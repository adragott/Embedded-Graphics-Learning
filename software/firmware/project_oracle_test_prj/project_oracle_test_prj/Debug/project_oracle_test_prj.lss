
project_oracle_test_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001b544  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0001b544  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00030074  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00030074  2**0
                  CONTENTS
  4 .bss          0000ad94  20000078  0001b5c0  00030078  2**3
                  ALLOC
  5 .stack        00010004  2000ae0c  00026354  00030078  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY
  8 .debug_info   00090f1d  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000bc0c  00000000  00000000  000c1018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004716c  00000000  00000000  000ccc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e30  00000000  00000000  00113d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ac0  00000000  00000000  00115bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fae2  00000000  00000000  00119680  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038a1f  00000000  00000000  00159162  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012a2ec  00000000  00000000  00191b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000058f8  00000000  00000000  002bbe70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_gc_clear_roots(void)
{
       0:	10 ae 01 20 01 0f 00 00 fd 0e 00 00 fd 0e 00 00     ... ............
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
      10:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 00 00 00 00     ................
	...
      2c:	fd 0e 00 00 fd 0e 00 00 00 00 00 00 fd 0e 00 00     ................
      3c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      4c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      5c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      6c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      7c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      8c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      9c:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      ac:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      bc:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      cc:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
      dc:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 00 00 00 00     ................
	...
      f4:	f9 1c 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     104:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     114:	fd 0e 00 00 a9 25 00 00 bd 25 00 00 d1 25 00 00     .....%...%...%..
     124:	e5 25 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     .%..............
     134:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     144:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     154:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     164:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     174:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     184:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     194:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     1a4:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     1b4:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     1c4:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     1d4:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     1e4:	fd 0e 00 00 fd 0e 00 00 6d 28 00 00 fd 0e 00 00     ........m(......
     1f4:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     204:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     214:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     224:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     234:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     244:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................
     254:	fd 0e 00 00 fd 0e 00 00 fd 0e 00 00 fd 0e 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000078 	.word	0x20000078
     280:	00000000 	.word	0x00000000
     284:	0001b544 	.word	0x0001b544

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0001b544 	.word	0x0001b544
     2c4:	2000007c 	.word	0x2000007c
     2c8:	0001b544 	.word	0x0001b544
     2cc:	00000000 	.word	0x00000000

000002d0 <ssd1963_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void ssd1963_init(void)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2d2:	4d89      	ldr	r5, [pc, #548]	; (4f8 <ssd1963_init+0x228>)
     2d4:	2640      	movs	r6, #64	; 0x40
     2d6:	616e      	str	r6, [r5, #20]

    LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
    cmd_mode = true;
     2d8:	4c88      	ldr	r4, [pc, #544]	; (4fc <ssd1963_init+0x22c>)
     2da:	2301      	movs	r3, #1
     2dc:	7023      	strb	r3, [r4, #0]

    LV_DRV_DELAY_MS(250);
     2de:	20fa      	movs	r0, #250	; 0xfa
     2e0:	4b87      	ldr	r3, [pc, #540]	; (500 <ssd1963_init+0x230>)
     2e2:	4798      	blx	r3
     2e4:	616e      	str	r6, [r5, #20]
/**
 * Command mode
 */
static inline void ssd1963_cmd_mode(void)
{
    if(cmd_mode == false) {
     2e6:	7823      	ldrb	r3, [r4, #0]
     2e8:	b91b      	cbnz	r3, 2f2 <ssd1963_init+0x22>
     2ea:	462b      	mov	r3, r5
     2ec:	615e      	str	r6, [r3, #20]
        LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
        cmd_mode = true;
     2ee:	2201      	movs	r2, #1
     2f0:	7022      	strb	r2, [r4, #0]
static inline void ssd1963_cmd(uint8_t cmd)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_cmd_mode();
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     2f2:	22e2      	movs	r2, #226	; 0xe2
     2f4:	4983      	ldr	r1, [pc, #524]	; (504 <ssd1963_init+0x234>)
     2f6:	4884      	ldr	r0, [pc, #528]	; (508 <ssd1963_init+0x238>)
     2f8:	4b84      	ldr	r3, [pc, #528]	; (50c <ssd1963_init+0x23c>)
     2fa:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2fc:	4b7e      	ldr	r3, [pc, #504]	; (4f8 <ssd1963_init+0x228>)
     2fe:	2240      	movs	r2, #64	; 0x40
     300:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     302:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     304:	4b7d      	ldr	r3, [pc, #500]	; (4fc <ssd1963_init+0x22c>)
     306:	781b      	ldrb	r3, [r3, #0]
     308:	b123      	cbz	r3, 314 <ssd1963_init+0x44>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     30a:	4b7b      	ldr	r3, [pc, #492]	; (4f8 <ssd1963_init+0x228>)
     30c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     30e:	2200      	movs	r2, #0
     310:	4b7a      	ldr	r3, [pc, #488]	; (4fc <ssd1963_init+0x22c>)
     312:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_data(uint8_t data)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_data_mode();
    LV_DRV_DISP_PAR_WR_WORD(data);
     314:	2223      	movs	r2, #35	; 0x23
     316:	497b      	ldr	r1, [pc, #492]	; (504 <ssd1963_init+0x234>)
     318:	487b      	ldr	r0, [pc, #492]	; (508 <ssd1963_init+0x238>)
     31a:	4b7c      	ldr	r3, [pc, #496]	; (50c <ssd1963_init+0x23c>)
     31c:	4798      	blx	r3
     31e:	4b76      	ldr	r3, [pc, #472]	; (4f8 <ssd1963_init+0x228>)
     320:	2240      	movs	r2, #64	; 0x40
     322:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     324:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     326:	4b75      	ldr	r3, [pc, #468]	; (4fc <ssd1963_init+0x22c>)
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	b123      	cbz	r3, 336 <ssd1963_init+0x66>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     32c:	4b72      	ldr	r3, [pc, #456]	; (4f8 <ssd1963_init+0x228>)
     32e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     330:	2200      	movs	r2, #0
     332:	4b72      	ldr	r3, [pc, #456]	; (4fc <ssd1963_init+0x22c>)
     334:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     336:	2202      	movs	r2, #2
     338:	4972      	ldr	r1, [pc, #456]	; (504 <ssd1963_init+0x234>)
     33a:	4873      	ldr	r0, [pc, #460]	; (508 <ssd1963_init+0x238>)
     33c:	4b73      	ldr	r3, [pc, #460]	; (50c <ssd1963_init+0x23c>)
     33e:	4798      	blx	r3
     340:	4b6d      	ldr	r3, [pc, #436]	; (4f8 <ssd1963_init+0x228>)
     342:	2240      	movs	r2, #64	; 0x40
     344:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     346:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     348:	4b6c      	ldr	r3, [pc, #432]	; (4fc <ssd1963_init+0x22c>)
     34a:	781b      	ldrb	r3, [r3, #0]
     34c:	b123      	cbz	r3, 358 <ssd1963_init+0x88>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     34e:	4b6a      	ldr	r3, [pc, #424]	; (4f8 <ssd1963_init+0x228>)
     350:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     352:	2200      	movs	r2, #0
     354:	4b69      	ldr	r3, [pc, #420]	; (4fc <ssd1963_init+0x22c>)
     356:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     358:	2204      	movs	r2, #4
     35a:	496a      	ldr	r1, [pc, #424]	; (504 <ssd1963_init+0x234>)
     35c:	486a      	ldr	r0, [pc, #424]	; (508 <ssd1963_init+0x238>)
     35e:	4b6b      	ldr	r3, [pc, #428]	; (50c <ssd1963_init+0x23c>)
     360:	4798      	blx	r3
     362:	4b65      	ldr	r3, [pc, #404]	; (4f8 <ssd1963_init+0x228>)
     364:	2240      	movs	r2, #64	; 0x40
     366:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     368:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     36a:	4b64      	ldr	r3, [pc, #400]	; (4fc <ssd1963_init+0x22c>)
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	b923      	cbnz	r3, 37a <ssd1963_init+0xaa>
     370:	4b61      	ldr	r3, [pc, #388]	; (4f8 <ssd1963_init+0x228>)
     372:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     374:	2201      	movs	r2, #1
     376:	4b61      	ldr	r3, [pc, #388]	; (4fc <ssd1963_init+0x22c>)
     378:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     37a:	22e0      	movs	r2, #224	; 0xe0
     37c:	4961      	ldr	r1, [pc, #388]	; (504 <ssd1963_init+0x234>)
     37e:	4862      	ldr	r0, [pc, #392]	; (508 <ssd1963_init+0x238>)
     380:	4b62      	ldr	r3, [pc, #392]	; (50c <ssd1963_init+0x23c>)
     382:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     384:	4b5c      	ldr	r3, [pc, #368]	; (4f8 <ssd1963_init+0x228>)
     386:	2240      	movs	r2, #64	; 0x40
     388:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     38c:	4b5b      	ldr	r3, [pc, #364]	; (4fc <ssd1963_init+0x22c>)
     38e:	781b      	ldrb	r3, [r3, #0]
     390:	b123      	cbz	r3, 39c <ssd1963_init+0xcc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     392:	4b59      	ldr	r3, [pc, #356]	; (4f8 <ssd1963_init+0x228>)
     394:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     396:	2200      	movs	r2, #0
     398:	4b58      	ldr	r3, [pc, #352]	; (4fc <ssd1963_init+0x22c>)
     39a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     39c:	2201      	movs	r2, #1
     39e:	4959      	ldr	r1, [pc, #356]	; (504 <ssd1963_init+0x234>)
     3a0:	4859      	ldr	r0, [pc, #356]	; (508 <ssd1963_init+0x238>)
     3a2:	4b5a      	ldr	r3, [pc, #360]	; (50c <ssd1963_init+0x23c>)
     3a4:	4798      	blx	r3
     3a6:	4c54      	ldr	r4, [pc, #336]	; (4f8 <ssd1963_init+0x228>)
     3a8:	2540      	movs	r5, #64	; 0x40
     3aa:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     3ac:	2001      	movs	r0, #1
     3ae:	4b54      	ldr	r3, [pc, #336]	; (500 <ssd1963_init+0x230>)
     3b0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3b2:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     3b4:	4b51      	ldr	r3, [pc, #324]	; (4fc <ssd1963_init+0x22c>)
     3b6:	781b      	ldrb	r3, [r3, #0]
     3b8:	b923      	cbnz	r3, 3c4 <ssd1963_init+0xf4>
     3ba:	4623      	mov	r3, r4
     3bc:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     3be:	2201      	movs	r2, #1
     3c0:	4b4e      	ldr	r3, [pc, #312]	; (4fc <ssd1963_init+0x22c>)
     3c2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     3c4:	22e0      	movs	r2, #224	; 0xe0
     3c6:	494f      	ldr	r1, [pc, #316]	; (504 <ssd1963_init+0x234>)
     3c8:	484f      	ldr	r0, [pc, #316]	; (508 <ssd1963_init+0x238>)
     3ca:	4b50      	ldr	r3, [pc, #320]	; (50c <ssd1963_init+0x23c>)
     3cc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3ce:	4b4a      	ldr	r3, [pc, #296]	; (4f8 <ssd1963_init+0x228>)
     3d0:	2240      	movs	r2, #64	; 0x40
     3d2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d4:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3d6:	4b49      	ldr	r3, [pc, #292]	; (4fc <ssd1963_init+0x22c>)
     3d8:	781b      	ldrb	r3, [r3, #0]
     3da:	b123      	cbz	r3, 3e6 <ssd1963_init+0x116>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3dc:	4b46      	ldr	r3, [pc, #280]	; (4f8 <ssd1963_init+0x228>)
     3de:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3e0:	2200      	movs	r2, #0
     3e2:	4b46      	ldr	r3, [pc, #280]	; (4fc <ssd1963_init+0x22c>)
     3e4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3e6:	2203      	movs	r2, #3
     3e8:	4946      	ldr	r1, [pc, #280]	; (504 <ssd1963_init+0x234>)
     3ea:	4847      	ldr	r0, [pc, #284]	; (508 <ssd1963_init+0x238>)
     3ec:	4b47      	ldr	r3, [pc, #284]	; (50c <ssd1963_init+0x23c>)
     3ee:	4798      	blx	r3
     3f0:	4c41      	ldr	r4, [pc, #260]	; (4f8 <ssd1963_init+0x228>)
     3f2:	2540      	movs	r5, #64	; 0x40
     3f4:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     3f6:	2001      	movs	r0, #1
     3f8:	4b41      	ldr	r3, [pc, #260]	; (500 <ssd1963_init+0x230>)
     3fa:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3fc:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     3fe:	4b3f      	ldr	r3, [pc, #252]	; (4fc <ssd1963_init+0x22c>)
     400:	781b      	ldrb	r3, [r3, #0]
     402:	b923      	cbnz	r3, 40e <ssd1963_init+0x13e>
     404:	4623      	mov	r3, r4
     406:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     408:	2201      	movs	r2, #1
     40a:	4b3c      	ldr	r3, [pc, #240]	; (4fc <ssd1963_init+0x22c>)
     40c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     40e:	2201      	movs	r2, #1
     410:	493c      	ldr	r1, [pc, #240]	; (504 <ssd1963_init+0x234>)
     412:	483d      	ldr	r0, [pc, #244]	; (508 <ssd1963_init+0x238>)
     414:	4b3d      	ldr	r3, [pc, #244]	; (50c <ssd1963_init+0x23c>)
     416:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     418:	4c37      	ldr	r4, [pc, #220]	; (4f8 <ssd1963_init+0x228>)
     41a:	2540      	movs	r5, #64	; 0x40
     41c:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     41e:	2001      	movs	r0, #1
     420:	4b37      	ldr	r3, [pc, #220]	; (500 <ssd1963_init+0x230>)
     422:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     424:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     426:	4b35      	ldr	r3, [pc, #212]	; (4fc <ssd1963_init+0x22c>)
     428:	781b      	ldrb	r3, [r3, #0]
     42a:	b923      	cbnz	r3, 436 <ssd1963_init+0x166>
     42c:	4623      	mov	r3, r4
     42e:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     430:	2201      	movs	r2, #1
     432:	4b32      	ldr	r3, [pc, #200]	; (4fc <ssd1963_init+0x22c>)
     434:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     436:	22e6      	movs	r2, #230	; 0xe6
     438:	4932      	ldr	r1, [pc, #200]	; (504 <ssd1963_init+0x234>)
     43a:	4833      	ldr	r0, [pc, #204]	; (508 <ssd1963_init+0x238>)
     43c:	4b33      	ldr	r3, [pc, #204]	; (50c <ssd1963_init+0x23c>)
     43e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     440:	4b2d      	ldr	r3, [pc, #180]	; (4f8 <ssd1963_init+0x228>)
     442:	2240      	movs	r2, #64	; 0x40
     444:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     446:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     448:	4b2c      	ldr	r3, [pc, #176]	; (4fc <ssd1963_init+0x22c>)
     44a:	781b      	ldrb	r3, [r3, #0]
     44c:	b123      	cbz	r3, 458 <ssd1963_init+0x188>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     44e:	4b2a      	ldr	r3, [pc, #168]	; (4f8 <ssd1963_init+0x228>)
     450:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     452:	2200      	movs	r2, #0
     454:	4b29      	ldr	r3, [pc, #164]	; (4fc <ssd1963_init+0x22c>)
     456:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     458:	2201      	movs	r2, #1
     45a:	492a      	ldr	r1, [pc, #168]	; (504 <ssd1963_init+0x234>)
     45c:	482a      	ldr	r0, [pc, #168]	; (508 <ssd1963_init+0x238>)
     45e:	4b2b      	ldr	r3, [pc, #172]	; (50c <ssd1963_init+0x23c>)
     460:	4798      	blx	r3
     462:	4b25      	ldr	r3, [pc, #148]	; (4f8 <ssd1963_init+0x228>)
     464:	2240      	movs	r2, #64	; 0x40
     466:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     468:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     46a:	4b24      	ldr	r3, [pc, #144]	; (4fc <ssd1963_init+0x22c>)
     46c:	781b      	ldrb	r3, [r3, #0]
     46e:	b123      	cbz	r3, 47a <ssd1963_init+0x1aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     470:	4b21      	ldr	r3, [pc, #132]	; (4f8 <ssd1963_init+0x228>)
     472:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     474:	2200      	movs	r2, #0
     476:	4b21      	ldr	r3, [pc, #132]	; (4fc <ssd1963_init+0x22c>)
     478:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     47a:	2233      	movs	r2, #51	; 0x33
     47c:	4921      	ldr	r1, [pc, #132]	; (504 <ssd1963_init+0x234>)
     47e:	4822      	ldr	r0, [pc, #136]	; (508 <ssd1963_init+0x238>)
     480:	4b22      	ldr	r3, [pc, #136]	; (50c <ssd1963_init+0x23c>)
     482:	4798      	blx	r3
     484:	4b1c      	ldr	r3, [pc, #112]	; (4f8 <ssd1963_init+0x228>)
     486:	2240      	movs	r2, #64	; 0x40
     488:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     48c:	4b1b      	ldr	r3, [pc, #108]	; (4fc <ssd1963_init+0x22c>)
     48e:	781b      	ldrb	r3, [r3, #0]
     490:	b123      	cbz	r3, 49c <ssd1963_init+0x1cc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     492:	4b19      	ldr	r3, [pc, #100]	; (4f8 <ssd1963_init+0x228>)
     494:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     496:	2200      	movs	r2, #0
     498:	4b18      	ldr	r3, [pc, #96]	; (4fc <ssd1963_init+0x22c>)
     49a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     49c:	2233      	movs	r2, #51	; 0x33
     49e:	4919      	ldr	r1, [pc, #100]	; (504 <ssd1963_init+0x234>)
     4a0:	4819      	ldr	r0, [pc, #100]	; (508 <ssd1963_init+0x238>)
     4a2:	4b1a      	ldr	r3, [pc, #104]	; (50c <ssd1963_init+0x23c>)
     4a4:	4798      	blx	r3
     4a6:	4b14      	ldr	r3, [pc, #80]	; (4f8 <ssd1963_init+0x228>)
     4a8:	2240      	movs	r2, #64	; 0x40
     4aa:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ac:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     4ae:	4b13      	ldr	r3, [pc, #76]	; (4fc <ssd1963_init+0x22c>)
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	b923      	cbnz	r3, 4be <ssd1963_init+0x1ee>
     4b4:	4b10      	ldr	r3, [pc, #64]	; (4f8 <ssd1963_init+0x228>)
     4b6:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     4b8:	2201      	movs	r2, #1
     4ba:	4b10      	ldr	r3, [pc, #64]	; (4fc <ssd1963_init+0x22c>)
     4bc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     4be:	22b0      	movs	r2, #176	; 0xb0
     4c0:	4910      	ldr	r1, [pc, #64]	; (504 <ssd1963_init+0x234>)
     4c2:	4811      	ldr	r0, [pc, #68]	; (508 <ssd1963_init+0x238>)
     4c4:	4b11      	ldr	r3, [pc, #68]	; (50c <ssd1963_init+0x23c>)
     4c6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c8:	4b0b      	ldr	r3, [pc, #44]	; (4f8 <ssd1963_init+0x228>)
     4ca:	2240      	movs	r2, #64	; 0x40
     4cc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ce:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     4d0:	4b0a      	ldr	r3, [pc, #40]	; (4fc <ssd1963_init+0x22c>)
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	b123      	cbz	r3, 4e0 <ssd1963_init+0x210>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4d6:	4b08      	ldr	r3, [pc, #32]	; (4f8 <ssd1963_init+0x228>)
     4d8:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     4da:	2200      	movs	r2, #0
     4dc:	4b07      	ldr	r3, [pc, #28]	; (4fc <ssd1963_init+0x22c>)
     4de:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     4e0:	2220      	movs	r2, #32
     4e2:	4908      	ldr	r1, [pc, #32]	; (504 <ssd1963_init+0x234>)
     4e4:	4808      	ldr	r0, [pc, #32]	; (508 <ssd1963_init+0x238>)
     4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <ssd1963_init+0x23c>)
     4e8:	4798      	blx	r3
     4ea:	4b03      	ldr	r3, [pc, #12]	; (4f8 <ssd1963_init+0x228>)
     4ec:	2240      	movs	r2, #64	; 0x40
     4ee:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     4f2:	4b02      	ldr	r3, [pc, #8]	; (4fc <ssd1963_init+0x22c>)
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	e00b      	b.n	510 <ssd1963_init+0x240>
     4f8:	41008000 	.word	0x41008000
     4fc:	20000000 	.word	0x20000000
     500:	00001509 	.word	0x00001509
     504:	1c03c3f7 	.word	0x1c03c3f7
     508:	41008080 	.word	0x41008080
     50c:	00000f99 	.word	0x00000f99
     510:	b123      	cbz	r3, 51c <ssd1963_init+0x24c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     512:	4b89      	ldr	r3, [pc, #548]	; (738 <ssd1963_init+0x468>)
     514:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     516:	2200      	movs	r2, #0
     518:	4b88      	ldr	r3, [pc, #544]	; (73c <ssd1963_init+0x46c>)
     51a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     51c:	2200      	movs	r2, #0
     51e:	4988      	ldr	r1, [pc, #544]	; (740 <ssd1963_init+0x470>)
     520:	4888      	ldr	r0, [pc, #544]	; (744 <ssd1963_init+0x474>)
     522:	4b89      	ldr	r3, [pc, #548]	; (748 <ssd1963_init+0x478>)
     524:	4798      	blx	r3
     526:	4c84      	ldr	r4, [pc, #528]	; (738 <ssd1963_init+0x468>)
     528:	2540      	movs	r5, #64	; 0x40
     52a:	61a5      	str	r5, [r4, #24]
    ssd1963_data(((SSD1963_HOR_RES - 1) >> 8) & 0X00FF); //Set HDP
     52c:	4b87      	ldr	r3, [pc, #540]	; (74c <ssd1963_init+0x47c>)
     52e:	4798      	blx	r3
     530:	4b87      	ldr	r3, [pc, #540]	; (750 <ssd1963_init+0x480>)
     532:	4798      	blx	r3
     534:	1e42      	subs	r2, r0, #1
     536:	1212      	asrs	r2, r2, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     538:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     53a:	4b80      	ldr	r3, [pc, #512]	; (73c <ssd1963_init+0x46c>)
     53c:	781b      	ldrb	r3, [r3, #0]
     53e:	b123      	cbz	r3, 54a <ssd1963_init+0x27a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     540:	4623      	mov	r3, r4
     542:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     544:	2100      	movs	r1, #0
     546:	4b7d      	ldr	r3, [pc, #500]	; (73c <ssd1963_init+0x46c>)
     548:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     54a:	b2d2      	uxtb	r2, r2
     54c:	497c      	ldr	r1, [pc, #496]	; (740 <ssd1963_init+0x470>)
     54e:	487d      	ldr	r0, [pc, #500]	; (744 <ssd1963_init+0x474>)
     550:	4b7d      	ldr	r3, [pc, #500]	; (748 <ssd1963_init+0x478>)
     552:	4798      	blx	r3
     554:	4c78      	ldr	r4, [pc, #480]	; (738 <ssd1963_init+0x468>)
     556:	2540      	movs	r5, #64	; 0x40
     558:	61a5      	str	r5, [r4, #24]
    ssd1963_data((SSD1963_HOR_RES - 1) & 0X00FF);
     55a:	4b7c      	ldr	r3, [pc, #496]	; (74c <ssd1963_init+0x47c>)
     55c:	4798      	blx	r3
     55e:	4b7c      	ldr	r3, [pc, #496]	; (750 <ssd1963_init+0x480>)
     560:	4798      	blx	r3
     562:	1e42      	subs	r2, r0, #1
     564:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     566:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     568:	4b74      	ldr	r3, [pc, #464]	; (73c <ssd1963_init+0x46c>)
     56a:	781b      	ldrb	r3, [r3, #0]
     56c:	b123      	cbz	r3, 578 <ssd1963_init+0x2a8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     56e:	4623      	mov	r3, r4
     570:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     572:	2100      	movs	r1, #0
     574:	4b71      	ldr	r3, [pc, #452]	; (73c <ssd1963_init+0x46c>)
     576:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     578:	4971      	ldr	r1, [pc, #452]	; (740 <ssd1963_init+0x470>)
     57a:	4872      	ldr	r0, [pc, #456]	; (744 <ssd1963_init+0x474>)
     57c:	4b72      	ldr	r3, [pc, #456]	; (748 <ssd1963_init+0x478>)
     57e:	4798      	blx	r3
     580:	4c6d      	ldr	r4, [pc, #436]	; (738 <ssd1963_init+0x468>)
     582:	2540      	movs	r5, #64	; 0x40
     584:	61a5      	str	r5, [r4, #24]
    ssd1963_data(((SSD1963_VER_RES - 1) >> 8) & 0X00FF); //Set VDP
     586:	4b71      	ldr	r3, [pc, #452]	; (74c <ssd1963_init+0x47c>)
     588:	4798      	blx	r3
     58a:	4b72      	ldr	r3, [pc, #456]	; (754 <ssd1963_init+0x484>)
     58c:	4798      	blx	r3
     58e:	1e42      	subs	r2, r0, #1
     590:	1212      	asrs	r2, r2, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     592:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     594:	4b69      	ldr	r3, [pc, #420]	; (73c <ssd1963_init+0x46c>)
     596:	781b      	ldrb	r3, [r3, #0]
     598:	b123      	cbz	r3, 5a4 <ssd1963_init+0x2d4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     59a:	4623      	mov	r3, r4
     59c:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     59e:	2100      	movs	r1, #0
     5a0:	4b66      	ldr	r3, [pc, #408]	; (73c <ssd1963_init+0x46c>)
     5a2:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5a4:	b2d2      	uxtb	r2, r2
     5a6:	4966      	ldr	r1, [pc, #408]	; (740 <ssd1963_init+0x470>)
     5a8:	4866      	ldr	r0, [pc, #408]	; (744 <ssd1963_init+0x474>)
     5aa:	4b67      	ldr	r3, [pc, #412]	; (748 <ssd1963_init+0x478>)
     5ac:	4798      	blx	r3
     5ae:	4c62      	ldr	r4, [pc, #392]	; (738 <ssd1963_init+0x468>)
     5b0:	2540      	movs	r5, #64	; 0x40
     5b2:	61a5      	str	r5, [r4, #24]
    ssd1963_data((SSD1963_VER_RES - 1) & 0X00FF);
     5b4:	4b65      	ldr	r3, [pc, #404]	; (74c <ssd1963_init+0x47c>)
     5b6:	4798      	blx	r3
     5b8:	4b66      	ldr	r3, [pc, #408]	; (754 <ssd1963_init+0x484>)
     5ba:	4798      	blx	r3
     5bc:	1e42      	subs	r2, r0, #1
     5be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5c0:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     5c2:	4b5e      	ldr	r3, [pc, #376]	; (73c <ssd1963_init+0x46c>)
     5c4:	781b      	ldrb	r3, [r3, #0]
     5c6:	b123      	cbz	r3, 5d2 <ssd1963_init+0x302>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5c8:	4623      	mov	r3, r4
     5ca:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     5cc:	2100      	movs	r1, #0
     5ce:	4b5b      	ldr	r3, [pc, #364]	; (73c <ssd1963_init+0x46c>)
     5d0:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5d2:	495b      	ldr	r1, [pc, #364]	; (740 <ssd1963_init+0x470>)
     5d4:	485b      	ldr	r0, [pc, #364]	; (744 <ssd1963_init+0x474>)
     5d6:	4b5c      	ldr	r3, [pc, #368]	; (748 <ssd1963_init+0x478>)
     5d8:	4798      	blx	r3
     5da:	4b57      	ldr	r3, [pc, #348]	; (738 <ssd1963_init+0x468>)
     5dc:	2240      	movs	r2, #64	; 0x40
     5de:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     5e2:	4b56      	ldr	r3, [pc, #344]	; (73c <ssd1963_init+0x46c>)
     5e4:	781b      	ldrb	r3, [r3, #0]
     5e6:	b123      	cbz	r3, 5f2 <ssd1963_init+0x322>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5e8:	4b53      	ldr	r3, [pc, #332]	; (738 <ssd1963_init+0x468>)
     5ea:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     5ec:	2200      	movs	r2, #0
     5ee:	4b53      	ldr	r3, [pc, #332]	; (73c <ssd1963_init+0x46c>)
     5f0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5f2:	2200      	movs	r2, #0
     5f4:	4952      	ldr	r1, [pc, #328]	; (740 <ssd1963_init+0x470>)
     5f6:	4853      	ldr	r0, [pc, #332]	; (744 <ssd1963_init+0x474>)
     5f8:	4b53      	ldr	r3, [pc, #332]	; (748 <ssd1963_init+0x478>)
     5fa:	4798      	blx	r3
     5fc:	4c4e      	ldr	r4, [pc, #312]	; (738 <ssd1963_init+0x468>)
     5fe:	2540      	movs	r5, #64	; 0x40
     600:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);//Delay10us(5);
     602:	2001      	movs	r0, #1
     604:	4b54      	ldr	r3, [pc, #336]	; (758 <ssd1963_init+0x488>)
     606:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     608:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     60a:	4b4c      	ldr	r3, [pc, #304]	; (73c <ssd1963_init+0x46c>)
     60c:	781b      	ldrb	r3, [r3, #0]
     60e:	b923      	cbnz	r3, 61a <ssd1963_init+0x34a>
     610:	4623      	mov	r3, r4
     612:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     614:	2201      	movs	r2, #1
     616:	4b49      	ldr	r3, [pc, #292]	; (73c <ssd1963_init+0x46c>)
     618:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     61a:	22b4      	movs	r2, #180	; 0xb4
     61c:	4948      	ldr	r1, [pc, #288]	; (740 <ssd1963_init+0x470>)
     61e:	4849      	ldr	r0, [pc, #292]	; (744 <ssd1963_init+0x474>)
     620:	4b49      	ldr	r3, [pc, #292]	; (748 <ssd1963_init+0x478>)
     622:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     624:	4b44      	ldr	r3, [pc, #272]	; (738 <ssd1963_init+0x468>)
     626:	2240      	movs	r2, #64	; 0x40
     628:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     62a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     62c:	4b43      	ldr	r3, [pc, #268]	; (73c <ssd1963_init+0x46c>)
     62e:	781b      	ldrb	r3, [r3, #0]
     630:	b123      	cbz	r3, 63c <ssd1963_init+0x36c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     632:	4b41      	ldr	r3, [pc, #260]	; (738 <ssd1963_init+0x468>)
     634:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     636:	2200      	movs	r2, #0
     638:	4b40      	ldr	r3, [pc, #256]	; (73c <ssd1963_init+0x46c>)
     63a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     63c:	2202      	movs	r2, #2
     63e:	4940      	ldr	r1, [pc, #256]	; (740 <ssd1963_init+0x470>)
     640:	4840      	ldr	r0, [pc, #256]	; (744 <ssd1963_init+0x474>)
     642:	4b41      	ldr	r3, [pc, #260]	; (748 <ssd1963_init+0x478>)
     644:	4798      	blx	r3
     646:	4b3c      	ldr	r3, [pc, #240]	; (738 <ssd1963_init+0x468>)
     648:	2240      	movs	r2, #64	; 0x40
     64a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     64c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     64e:	4b3b      	ldr	r3, [pc, #236]	; (73c <ssd1963_init+0x46c>)
     650:	781b      	ldrb	r3, [r3, #0]
     652:	b123      	cbz	r3, 65e <ssd1963_init+0x38e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     654:	4b38      	ldr	r3, [pc, #224]	; (738 <ssd1963_init+0x468>)
     656:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     658:	2200      	movs	r2, #0
     65a:	4b38      	ldr	r3, [pc, #224]	; (73c <ssd1963_init+0x46c>)
     65c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     65e:	220d      	movs	r2, #13
     660:	4937      	ldr	r1, [pc, #220]	; (740 <ssd1963_init+0x470>)
     662:	4838      	ldr	r0, [pc, #224]	; (744 <ssd1963_init+0x474>)
     664:	4b38      	ldr	r3, [pc, #224]	; (748 <ssd1963_init+0x478>)
     666:	4798      	blx	r3
     668:	4b33      	ldr	r3, [pc, #204]	; (738 <ssd1963_init+0x468>)
     66a:	2240      	movs	r2, #64	; 0x40
     66c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     66e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     670:	4b32      	ldr	r3, [pc, #200]	; (73c <ssd1963_init+0x46c>)
     672:	781b      	ldrb	r3, [r3, #0]
     674:	b123      	cbz	r3, 680 <ssd1963_init+0x3b0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     676:	4b30      	ldr	r3, [pc, #192]	; (738 <ssd1963_init+0x468>)
     678:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     67a:	2200      	movs	r2, #0
     67c:	4b2f      	ldr	r3, [pc, #188]	; (73c <ssd1963_init+0x46c>)
     67e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     680:	2200      	movs	r2, #0
     682:	492f      	ldr	r1, [pc, #188]	; (740 <ssd1963_init+0x470>)
     684:	482f      	ldr	r0, [pc, #188]	; (744 <ssd1963_init+0x474>)
     686:	4b30      	ldr	r3, [pc, #192]	; (748 <ssd1963_init+0x478>)
     688:	4798      	blx	r3
     68a:	4b2b      	ldr	r3, [pc, #172]	; (738 <ssd1963_init+0x468>)
     68c:	2240      	movs	r2, #64	; 0x40
     68e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     690:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     692:	4b2a      	ldr	r3, [pc, #168]	; (73c <ssd1963_init+0x46c>)
     694:	781b      	ldrb	r3, [r3, #0]
     696:	b123      	cbz	r3, 6a2 <ssd1963_init+0x3d2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     698:	4b27      	ldr	r3, [pc, #156]	; (738 <ssd1963_init+0x468>)
     69a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     69c:	2200      	movs	r2, #0
     69e:	4b27      	ldr	r3, [pc, #156]	; (73c <ssd1963_init+0x46c>)
     6a0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6a2:	2228      	movs	r2, #40	; 0x28
     6a4:	4926      	ldr	r1, [pc, #152]	; (740 <ssd1963_init+0x470>)
     6a6:	4827      	ldr	r0, [pc, #156]	; (744 <ssd1963_init+0x474>)
     6a8:	4b27      	ldr	r3, [pc, #156]	; (748 <ssd1963_init+0x478>)
     6aa:	4798      	blx	r3
     6ac:	4b22      	ldr	r3, [pc, #136]	; (738 <ssd1963_init+0x468>)
     6ae:	2240      	movs	r2, #64	; 0x40
     6b0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6b2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6b4:	4b21      	ldr	r3, [pc, #132]	; (73c <ssd1963_init+0x46c>)
     6b6:	781b      	ldrb	r3, [r3, #0]
     6b8:	b123      	cbz	r3, 6c4 <ssd1963_init+0x3f4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6ba:	4b1f      	ldr	r3, [pc, #124]	; (738 <ssd1963_init+0x468>)
     6bc:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6be:	2200      	movs	r2, #0
     6c0:	4b1e      	ldr	r3, [pc, #120]	; (73c <ssd1963_init+0x46c>)
     6c2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6c4:	22e0      	movs	r2, #224	; 0xe0
     6c6:	491e      	ldr	r1, [pc, #120]	; (740 <ssd1963_init+0x470>)
     6c8:	481e      	ldr	r0, [pc, #120]	; (744 <ssd1963_init+0x474>)
     6ca:	4b1f      	ldr	r3, [pc, #124]	; (748 <ssd1963_init+0x478>)
     6cc:	4798      	blx	r3
     6ce:	4b1a      	ldr	r3, [pc, #104]	; (738 <ssd1963_init+0x468>)
     6d0:	2240      	movs	r2, #64	; 0x40
     6d2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6d4:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6d6:	4b19      	ldr	r3, [pc, #100]	; (73c <ssd1963_init+0x46c>)
     6d8:	781b      	ldrb	r3, [r3, #0]
     6da:	b123      	cbz	r3, 6e6 <ssd1963_init+0x416>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6dc:	4b16      	ldr	r3, [pc, #88]	; (738 <ssd1963_init+0x468>)
     6de:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6e0:	2200      	movs	r2, #0
     6e2:	4b16      	ldr	r3, [pc, #88]	; (73c <ssd1963_init+0x46c>)
     6e4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6e6:	2200      	movs	r2, #0
     6e8:	4915      	ldr	r1, [pc, #84]	; (740 <ssd1963_init+0x470>)
     6ea:	4816      	ldr	r0, [pc, #88]	; (744 <ssd1963_init+0x474>)
     6ec:	4b16      	ldr	r3, [pc, #88]	; (748 <ssd1963_init+0x478>)
     6ee:	4798      	blx	r3
     6f0:	4b11      	ldr	r3, [pc, #68]	; (738 <ssd1963_init+0x468>)
     6f2:	2240      	movs	r2, #64	; 0x40
     6f4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6f6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6f8:	4b10      	ldr	r3, [pc, #64]	; (73c <ssd1963_init+0x46c>)
     6fa:	781b      	ldrb	r3, [r3, #0]
     6fc:	b123      	cbz	r3, 708 <ssd1963_init+0x438>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6fe:	4b0e      	ldr	r3, [pc, #56]	; (738 <ssd1963_init+0x468>)
     700:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     702:	2200      	movs	r2, #0
     704:	4b0d      	ldr	r3, [pc, #52]	; (73c <ssd1963_init+0x46c>)
     706:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     708:	2205      	movs	r2, #5
     70a:	490d      	ldr	r1, [pc, #52]	; (740 <ssd1963_init+0x470>)
     70c:	480d      	ldr	r0, [pc, #52]	; (744 <ssd1963_init+0x474>)
     70e:	4b0e      	ldr	r3, [pc, #56]	; (748 <ssd1963_init+0x478>)
     710:	4798      	blx	r3
     712:	4b09      	ldr	r3, [pc, #36]	; (738 <ssd1963_init+0x468>)
     714:	2240      	movs	r2, #64	; 0x40
     716:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     718:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     71a:	4b08      	ldr	r3, [pc, #32]	; (73c <ssd1963_init+0x46c>)
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	b123      	cbz	r3, 72a <ssd1963_init+0x45a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     720:	4b05      	ldr	r3, [pc, #20]	; (738 <ssd1963_init+0x468>)
     722:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     724:	2200      	movs	r2, #0
     726:	4b05      	ldr	r3, [pc, #20]	; (73c <ssd1963_init+0x46c>)
     728:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     72a:	2200      	movs	r2, #0
     72c:	4904      	ldr	r1, [pc, #16]	; (740 <ssd1963_init+0x470>)
     72e:	4805      	ldr	r0, [pc, #20]	; (744 <ssd1963_init+0x474>)
     730:	4b05      	ldr	r3, [pc, #20]	; (748 <ssd1963_init+0x478>)
     732:	4798      	blx	r3
     734:	e012      	b.n	75c <ssd1963_init+0x48c>
     736:	bf00      	nop
     738:	41008000 	.word	0x41008000
     73c:	20000000 	.word	0x20000000
     740:	1c03c3f7 	.word	0x1c03c3f7
     744:	41008080 	.word	0x41008080
     748:	00000f99 	.word	0x00000f99
     74c:	00010125 	.word	0x00010125
     750:	00010131 	.word	0x00010131
     754:	00010159 	.word	0x00010159
     758:	00001509 	.word	0x00001509
     75c:	4b86      	ldr	r3, [pc, #536]	; (978 <ssd1963_init+0x6a8>)
     75e:	2240      	movs	r2, #64	; 0x40
     760:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     762:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     764:	4b85      	ldr	r3, [pc, #532]	; (97c <ssd1963_init+0x6ac>)
     766:	781b      	ldrb	r3, [r3, #0]
     768:	b923      	cbnz	r3, 774 <ssd1963_init+0x4a4>
     76a:	4b83      	ldr	r3, [pc, #524]	; (978 <ssd1963_init+0x6a8>)
     76c:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     76e:	2201      	movs	r2, #1
     770:	4b82      	ldr	r3, [pc, #520]	; (97c <ssd1963_init+0x6ac>)
     772:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     774:	22b6      	movs	r2, #182	; 0xb6
     776:	4982      	ldr	r1, [pc, #520]	; (980 <ssd1963_init+0x6b0>)
     778:	4882      	ldr	r0, [pc, #520]	; (984 <ssd1963_init+0x6b4>)
     77a:	4b83      	ldr	r3, [pc, #524]	; (988 <ssd1963_init+0x6b8>)
     77c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     77e:	4b7e      	ldr	r3, [pc, #504]	; (978 <ssd1963_init+0x6a8>)
     780:	2240      	movs	r2, #64	; 0x40
     782:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     784:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     786:	4b7d      	ldr	r3, [pc, #500]	; (97c <ssd1963_init+0x6ac>)
     788:	781b      	ldrb	r3, [r3, #0]
     78a:	b123      	cbz	r3, 796 <ssd1963_init+0x4c6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     78c:	4b7a      	ldr	r3, [pc, #488]	; (978 <ssd1963_init+0x6a8>)
     78e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     790:	2200      	movs	r2, #0
     792:	4b7a      	ldr	r3, [pc, #488]	; (97c <ssd1963_init+0x6ac>)
     794:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     796:	2201      	movs	r2, #1
     798:	4979      	ldr	r1, [pc, #484]	; (980 <ssd1963_init+0x6b0>)
     79a:	487a      	ldr	r0, [pc, #488]	; (984 <ssd1963_init+0x6b4>)
     79c:	4b7a      	ldr	r3, [pc, #488]	; (988 <ssd1963_init+0x6b8>)
     79e:	4798      	blx	r3
     7a0:	4b75      	ldr	r3, [pc, #468]	; (978 <ssd1963_init+0x6a8>)
     7a2:	2240      	movs	r2, #64	; 0x40
     7a4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7a6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7a8:	4b74      	ldr	r3, [pc, #464]	; (97c <ssd1963_init+0x6ac>)
     7aa:	781b      	ldrb	r3, [r3, #0]
     7ac:	b123      	cbz	r3, 7b8 <ssd1963_init+0x4e8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7ae:	4b72      	ldr	r3, [pc, #456]	; (978 <ssd1963_init+0x6a8>)
     7b0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7b2:	2200      	movs	r2, #0
     7b4:	4b71      	ldr	r3, [pc, #452]	; (97c <ssd1963_init+0x6ac>)
     7b6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7b8:	2220      	movs	r2, #32
     7ba:	4971      	ldr	r1, [pc, #452]	; (980 <ssd1963_init+0x6b0>)
     7bc:	4871      	ldr	r0, [pc, #452]	; (984 <ssd1963_init+0x6b4>)
     7be:	4b72      	ldr	r3, [pc, #456]	; (988 <ssd1963_init+0x6b8>)
     7c0:	4798      	blx	r3
     7c2:	4b6d      	ldr	r3, [pc, #436]	; (978 <ssd1963_init+0x6a8>)
     7c4:	2240      	movs	r2, #64	; 0x40
     7c6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7c8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7ca:	4b6c      	ldr	r3, [pc, #432]	; (97c <ssd1963_init+0x6ac>)
     7cc:	781b      	ldrb	r3, [r3, #0]
     7ce:	b123      	cbz	r3, 7da <ssd1963_init+0x50a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7d0:	4b69      	ldr	r3, [pc, #420]	; (978 <ssd1963_init+0x6a8>)
     7d2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7d4:	2200      	movs	r2, #0
     7d6:	4b69      	ldr	r3, [pc, #420]	; (97c <ssd1963_init+0x6ac>)
     7d8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7da:	2200      	movs	r2, #0
     7dc:	4968      	ldr	r1, [pc, #416]	; (980 <ssd1963_init+0x6b0>)
     7de:	4869      	ldr	r0, [pc, #420]	; (984 <ssd1963_init+0x6b4>)
     7e0:	4b69      	ldr	r3, [pc, #420]	; (988 <ssd1963_init+0x6b8>)
     7e2:	4798      	blx	r3
     7e4:	4b64      	ldr	r3, [pc, #400]	; (978 <ssd1963_init+0x6a8>)
     7e6:	2240      	movs	r2, #64	; 0x40
     7e8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ea:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7ec:	4b63      	ldr	r3, [pc, #396]	; (97c <ssd1963_init+0x6ac>)
     7ee:	781b      	ldrb	r3, [r3, #0]
     7f0:	b123      	cbz	r3, 7fc <ssd1963_init+0x52c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7f2:	4b61      	ldr	r3, [pc, #388]	; (978 <ssd1963_init+0x6a8>)
     7f4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7f6:	2200      	movs	r2, #0
     7f8:	4b60      	ldr	r3, [pc, #384]	; (97c <ssd1963_init+0x6ac>)
     7fa:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7fc:	2208      	movs	r2, #8
     7fe:	4960      	ldr	r1, [pc, #384]	; (980 <ssd1963_init+0x6b0>)
     800:	4860      	ldr	r0, [pc, #384]	; (984 <ssd1963_init+0x6b4>)
     802:	4b61      	ldr	r3, [pc, #388]	; (988 <ssd1963_init+0x6b8>)
     804:	4798      	blx	r3
     806:	4b5c      	ldr	r3, [pc, #368]	; (978 <ssd1963_init+0x6a8>)
     808:	2240      	movs	r2, #64	; 0x40
     80a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     80c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     80e:	4b5b      	ldr	r3, [pc, #364]	; (97c <ssd1963_init+0x6ac>)
     810:	781b      	ldrb	r3, [r3, #0]
     812:	b123      	cbz	r3, 81e <ssd1963_init+0x54e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     814:	4b58      	ldr	r3, [pc, #352]	; (978 <ssd1963_init+0x6a8>)
     816:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     818:	2200      	movs	r2, #0
     81a:	4b58      	ldr	r3, [pc, #352]	; (97c <ssd1963_init+0x6ac>)
     81c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     81e:	2210      	movs	r2, #16
     820:	4957      	ldr	r1, [pc, #348]	; (980 <ssd1963_init+0x6b0>)
     822:	4858      	ldr	r0, [pc, #352]	; (984 <ssd1963_init+0x6b4>)
     824:	4b58      	ldr	r3, [pc, #352]	; (988 <ssd1963_init+0x6b8>)
     826:	4798      	blx	r3
     828:	4b53      	ldr	r3, [pc, #332]	; (978 <ssd1963_init+0x6a8>)
     82a:	2240      	movs	r2, #64	; 0x40
     82c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     82e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     830:	4b52      	ldr	r3, [pc, #328]	; (97c <ssd1963_init+0x6ac>)
     832:	781b      	ldrb	r3, [r3, #0]
     834:	b123      	cbz	r3, 840 <ssd1963_init+0x570>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     836:	4b50      	ldr	r3, [pc, #320]	; (978 <ssd1963_init+0x6a8>)
     838:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     83a:	2200      	movs	r2, #0
     83c:	4b4f      	ldr	r3, [pc, #316]	; (97c <ssd1963_init+0x6ac>)
     83e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     840:	2200      	movs	r2, #0
     842:	494f      	ldr	r1, [pc, #316]	; (980 <ssd1963_init+0x6b0>)
     844:	484f      	ldr	r0, [pc, #316]	; (984 <ssd1963_init+0x6b4>)
     846:	4b50      	ldr	r3, [pc, #320]	; (988 <ssd1963_init+0x6b8>)
     848:	4798      	blx	r3
     84a:	4b4b      	ldr	r3, [pc, #300]	; (978 <ssd1963_init+0x6a8>)
     84c:	2240      	movs	r2, #64	; 0x40
     84e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     850:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     852:	4b4a      	ldr	r3, [pc, #296]	; (97c <ssd1963_init+0x6ac>)
     854:	781b      	ldrb	r3, [r3, #0]
     856:	b123      	cbz	r3, 862 <ssd1963_init+0x592>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     858:	4b47      	ldr	r3, [pc, #284]	; (978 <ssd1963_init+0x6a8>)
     85a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     85c:	2200      	movs	r2, #0
     85e:	4b47      	ldr	r3, [pc, #284]	; (97c <ssd1963_init+0x6ac>)
     860:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     862:	2208      	movs	r2, #8
     864:	4946      	ldr	r1, [pc, #280]	; (980 <ssd1963_init+0x6b0>)
     866:	4847      	ldr	r0, [pc, #284]	; (984 <ssd1963_init+0x6b4>)
     868:	4b47      	ldr	r3, [pc, #284]	; (988 <ssd1963_init+0x6b8>)
     86a:	4798      	blx	r3
     86c:	4b42      	ldr	r3, [pc, #264]	; (978 <ssd1963_init+0x6a8>)
     86e:	2240      	movs	r2, #64	; 0x40
     870:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     872:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     874:	4b41      	ldr	r3, [pc, #260]	; (97c <ssd1963_init+0x6ac>)
     876:	781b      	ldrb	r3, [r3, #0]
     878:	b923      	cbnz	r3, 884 <ssd1963_init+0x5b4>
     87a:	4b3f      	ldr	r3, [pc, #252]	; (978 <ssd1963_init+0x6a8>)
     87c:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     87e:	2201      	movs	r2, #1
     880:	4b3e      	ldr	r3, [pc, #248]	; (97c <ssd1963_init+0x6ac>)
     882:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     884:	22b8      	movs	r2, #184	; 0xb8
     886:	493e      	ldr	r1, [pc, #248]	; (980 <ssd1963_init+0x6b0>)
     888:	483e      	ldr	r0, [pc, #248]	; (984 <ssd1963_init+0x6b4>)
     88a:	4b3f      	ldr	r3, [pc, #252]	; (988 <ssd1963_init+0x6b8>)
     88c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     88e:	4b3a      	ldr	r3, [pc, #232]	; (978 <ssd1963_init+0x6a8>)
     890:	2240      	movs	r2, #64	; 0x40
     892:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     894:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     896:	4b39      	ldr	r3, [pc, #228]	; (97c <ssd1963_init+0x6ac>)
     898:	781b      	ldrb	r3, [r3, #0]
     89a:	b123      	cbz	r3, 8a6 <ssd1963_init+0x5d6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     89c:	4b36      	ldr	r3, [pc, #216]	; (978 <ssd1963_init+0x6a8>)
     89e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8a0:	2200      	movs	r2, #0
     8a2:	4b36      	ldr	r3, [pc, #216]	; (97c <ssd1963_init+0x6ac>)
     8a4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8a6:	220f      	movs	r2, #15
     8a8:	4935      	ldr	r1, [pc, #212]	; (980 <ssd1963_init+0x6b0>)
     8aa:	4836      	ldr	r0, [pc, #216]	; (984 <ssd1963_init+0x6b4>)
     8ac:	4b36      	ldr	r3, [pc, #216]	; (988 <ssd1963_init+0x6b8>)
     8ae:	4798      	blx	r3
     8b0:	4b31      	ldr	r3, [pc, #196]	; (978 <ssd1963_init+0x6a8>)
     8b2:	2240      	movs	r2, #64	; 0x40
     8b4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8b6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8b8:	4b30      	ldr	r3, [pc, #192]	; (97c <ssd1963_init+0x6ac>)
     8ba:	781b      	ldrb	r3, [r3, #0]
     8bc:	b123      	cbz	r3, 8c8 <ssd1963_init+0x5f8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8be:	4b2e      	ldr	r3, [pc, #184]	; (978 <ssd1963_init+0x6a8>)
     8c0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8c2:	2200      	movs	r2, #0
     8c4:	4b2d      	ldr	r3, [pc, #180]	; (97c <ssd1963_init+0x6ac>)
     8c6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8c8:	2201      	movs	r2, #1
     8ca:	492d      	ldr	r1, [pc, #180]	; (980 <ssd1963_init+0x6b0>)
     8cc:	482d      	ldr	r0, [pc, #180]	; (984 <ssd1963_init+0x6b4>)
     8ce:	4b2e      	ldr	r3, [pc, #184]	; (988 <ssd1963_init+0x6b8>)
     8d0:	4798      	blx	r3
     8d2:	4b29      	ldr	r3, [pc, #164]	; (978 <ssd1963_init+0x6a8>)
     8d4:	2240      	movs	r2, #64	; 0x40
     8d6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8d8:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     8da:	4b28      	ldr	r3, [pc, #160]	; (97c <ssd1963_init+0x6ac>)
     8dc:	781b      	ldrb	r3, [r3, #0]
     8de:	b923      	cbnz	r3, 8ea <ssd1963_init+0x61a>
     8e0:	4b25      	ldr	r3, [pc, #148]	; (978 <ssd1963_init+0x6a8>)
     8e2:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     8e4:	2201      	movs	r2, #1
     8e6:	4b25      	ldr	r3, [pc, #148]	; (97c <ssd1963_init+0x6ac>)
     8e8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     8ea:	22ba      	movs	r2, #186	; 0xba
     8ec:	4924      	ldr	r1, [pc, #144]	; (980 <ssd1963_init+0x6b0>)
     8ee:	4825      	ldr	r0, [pc, #148]	; (984 <ssd1963_init+0x6b4>)
     8f0:	4b25      	ldr	r3, [pc, #148]	; (988 <ssd1963_init+0x6b8>)
     8f2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8f4:	4b20      	ldr	r3, [pc, #128]	; (978 <ssd1963_init+0x6a8>)
     8f6:	2240      	movs	r2, #64	; 0x40
     8f8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8fa:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8fc:	4b1f      	ldr	r3, [pc, #124]	; (97c <ssd1963_init+0x6ac>)
     8fe:	781b      	ldrb	r3, [r3, #0]
     900:	b123      	cbz	r3, 90c <ssd1963_init+0x63c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     902:	4b1d      	ldr	r3, [pc, #116]	; (978 <ssd1963_init+0x6a8>)
     904:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     906:	2200      	movs	r2, #0
     908:	4b1c      	ldr	r3, [pc, #112]	; (97c <ssd1963_init+0x6ac>)
     90a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     90c:	2201      	movs	r2, #1
     90e:	491c      	ldr	r1, [pc, #112]	; (980 <ssd1963_init+0x6b0>)
     910:	481c      	ldr	r0, [pc, #112]	; (984 <ssd1963_init+0x6b4>)
     912:	4b1d      	ldr	r3, [pc, #116]	; (988 <ssd1963_init+0x6b8>)
     914:	4798      	blx	r3
     916:	4b18      	ldr	r3, [pc, #96]	; (978 <ssd1963_init+0x6a8>)
     918:	2240      	movs	r2, #64	; 0x40
     91a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     91c:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     91e:	4b17      	ldr	r3, [pc, #92]	; (97c <ssd1963_init+0x6ac>)
     920:	781b      	ldrb	r3, [r3, #0]
     922:	b923      	cbnz	r3, 92e <ssd1963_init+0x65e>
     924:	4b14      	ldr	r3, [pc, #80]	; (978 <ssd1963_init+0x6a8>)
     926:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     928:	2201      	movs	r2, #1
     92a:	4b14      	ldr	r3, [pc, #80]	; (97c <ssd1963_init+0x6ac>)
     92c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     92e:	2236      	movs	r2, #54	; 0x36
     930:	4913      	ldr	r1, [pc, #76]	; (980 <ssd1963_init+0x6b0>)
     932:	4814      	ldr	r0, [pc, #80]	; (984 <ssd1963_init+0x6b4>)
     934:	4b14      	ldr	r3, [pc, #80]	; (988 <ssd1963_init+0x6b8>)
     936:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     938:	4b0f      	ldr	r3, [pc, #60]	; (978 <ssd1963_init+0x6a8>)
     93a:	2240      	movs	r2, #64	; 0x40
     93c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     940:	4b0e      	ldr	r3, [pc, #56]	; (97c <ssd1963_init+0x6ac>)
     942:	781b      	ldrb	r3, [r3, #0]
     944:	b123      	cbz	r3, 950 <ssd1963_init+0x680>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     946:	4b0c      	ldr	r3, [pc, #48]	; (978 <ssd1963_init+0x6a8>)
     948:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     94a:	2200      	movs	r2, #0
     94c:	4b0b      	ldr	r3, [pc, #44]	; (97c <ssd1963_init+0x6ac>)
     94e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     950:	2208      	movs	r2, #8
     952:	490b      	ldr	r1, [pc, #44]	; (980 <ssd1963_init+0x6b0>)
     954:	480b      	ldr	r0, [pc, #44]	; (984 <ssd1963_init+0x6b4>)
     956:	4b0c      	ldr	r3, [pc, #48]	; (988 <ssd1963_init+0x6b8>)
     958:	4798      	blx	r3
     95a:	4b07      	ldr	r3, [pc, #28]	; (978 <ssd1963_init+0x6a8>)
     95c:	2240      	movs	r2, #64	; 0x40
     95e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     960:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     962:	4b06      	ldr	r3, [pc, #24]	; (97c <ssd1963_init+0x6ac>)
     964:	781b      	ldrb	r3, [r3, #0]
     966:	b923      	cbnz	r3, 972 <ssd1963_init+0x6a2>
     968:	4b03      	ldr	r3, [pc, #12]	; (978 <ssd1963_init+0x6a8>)
     96a:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     96c:	2201      	movs	r2, #1
     96e:	4b03      	ldr	r3, [pc, #12]	; (97c <ssd1963_init+0x6ac>)
     970:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     972:	223a      	movs	r2, #58	; 0x3a
     974:	4902      	ldr	r1, [pc, #8]	; (980 <ssd1963_init+0x6b0>)
     976:	e009      	b.n	98c <ssd1963_init+0x6bc>
     978:	41008000 	.word	0x41008000
     97c:	20000000 	.word	0x20000000
     980:	1c03c3f7 	.word	0x1c03c3f7
     984:	41008080 	.word	0x41008080
     988:	00000f99 	.word	0x00000f99
     98c:	4886      	ldr	r0, [pc, #536]	; (ba8 <ssd1963_init+0x8d8>)
     98e:	4b87      	ldr	r3, [pc, #540]	; (bac <ssd1963_init+0x8dc>)
     990:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     992:	4b87      	ldr	r3, [pc, #540]	; (bb0 <ssd1963_init+0x8e0>)
     994:	2240      	movs	r2, #64	; 0x40
     996:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     998:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     99a:	4b86      	ldr	r3, [pc, #536]	; (bb4 <ssd1963_init+0x8e4>)
     99c:	781b      	ldrb	r3, [r3, #0]
     99e:	b123      	cbz	r3, 9aa <ssd1963_init+0x6da>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9a0:	4b83      	ldr	r3, [pc, #524]	; (bb0 <ssd1963_init+0x8e0>)
     9a2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     9a4:	2200      	movs	r2, #0
     9a6:	4b83      	ldr	r3, [pc, #524]	; (bb4 <ssd1963_init+0x8e4>)
     9a8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9aa:	2250      	movs	r2, #80	; 0x50
     9ac:	4982      	ldr	r1, [pc, #520]	; (bb8 <ssd1963_init+0x8e8>)
     9ae:	487e      	ldr	r0, [pc, #504]	; (ba8 <ssd1963_init+0x8d8>)
     9b0:	4b7e      	ldr	r3, [pc, #504]	; (bac <ssd1963_init+0x8dc>)
     9b2:	4798      	blx	r3
     9b4:	4b7e      	ldr	r3, [pc, #504]	; (bb0 <ssd1963_init+0x8e0>)
     9b6:	2240      	movs	r2, #64	; 0x40
     9b8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9ba:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     9bc:	4b7d      	ldr	r3, [pc, #500]	; (bb4 <ssd1963_init+0x8e4>)
     9be:	781b      	ldrb	r3, [r3, #0]
     9c0:	b923      	cbnz	r3, 9cc <ssd1963_init+0x6fc>
     9c2:	4b7b      	ldr	r3, [pc, #492]	; (bb0 <ssd1963_init+0x8e0>)
     9c4:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     9c6:	2201      	movs	r2, #1
     9c8:	4b7a      	ldr	r3, [pc, #488]	; (bb4 <ssd1963_init+0x8e4>)
     9ca:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     9cc:	22f0      	movs	r2, #240	; 0xf0
     9ce:	497a      	ldr	r1, [pc, #488]	; (bb8 <ssd1963_init+0x8e8>)
     9d0:	4875      	ldr	r0, [pc, #468]	; (ba8 <ssd1963_init+0x8d8>)
     9d2:	4b76      	ldr	r3, [pc, #472]	; (bac <ssd1963_init+0x8dc>)
     9d4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9d6:	4b76      	ldr	r3, [pc, #472]	; (bb0 <ssd1963_init+0x8e0>)
     9d8:	2240      	movs	r2, #64	; 0x40
     9da:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9dc:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     9de:	4b75      	ldr	r3, [pc, #468]	; (bb4 <ssd1963_init+0x8e4>)
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	b123      	cbz	r3, 9ee <ssd1963_init+0x71e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9e4:	4b72      	ldr	r3, [pc, #456]	; (bb0 <ssd1963_init+0x8e0>)
     9e6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     9e8:	2200      	movs	r2, #0
     9ea:	4b72      	ldr	r3, [pc, #456]	; (bb4 <ssd1963_init+0x8e4>)
     9ec:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9ee:	2203      	movs	r2, #3
     9f0:	4971      	ldr	r1, [pc, #452]	; (bb8 <ssd1963_init+0x8e8>)
     9f2:	486d      	ldr	r0, [pc, #436]	; (ba8 <ssd1963_init+0x8d8>)
     9f4:	4b6d      	ldr	r3, [pc, #436]	; (bac <ssd1963_init+0x8dc>)
     9f6:	4798      	blx	r3
     9f8:	4b6d      	ldr	r3, [pc, #436]	; (bb0 <ssd1963_init+0x8e0>)
     9fa:	2240      	movs	r2, #64	; 0x40
     9fc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9fe:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     a00:	4b6c      	ldr	r3, [pc, #432]	; (bb4 <ssd1963_init+0x8e4>)
     a02:	781b      	ldrb	r3, [r3, #0]
     a04:	b923      	cbnz	r3, a10 <ssd1963_init+0x740>
     a06:	4b6a      	ldr	r3, [pc, #424]	; (bb0 <ssd1963_init+0x8e0>)
     a08:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     a0a:	2201      	movs	r2, #1
     a0c:	4b69      	ldr	r3, [pc, #420]	; (bb4 <ssd1963_init+0x8e4>)
     a0e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     a10:	22bc      	movs	r2, #188	; 0xbc
     a12:	4969      	ldr	r1, [pc, #420]	; (bb8 <ssd1963_init+0x8e8>)
     a14:	4864      	ldr	r0, [pc, #400]	; (ba8 <ssd1963_init+0x8d8>)
     a16:	4b65      	ldr	r3, [pc, #404]	; (bac <ssd1963_init+0x8dc>)
     a18:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a1a:	4b65      	ldr	r3, [pc, #404]	; (bb0 <ssd1963_init+0x8e0>)
     a1c:	2240      	movs	r2, #64	; 0x40
     a1e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a20:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a22:	4b64      	ldr	r3, [pc, #400]	; (bb4 <ssd1963_init+0x8e4>)
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	b123      	cbz	r3, a32 <ssd1963_init+0x762>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a28:	4b61      	ldr	r3, [pc, #388]	; (bb0 <ssd1963_init+0x8e0>)
     a2a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a2c:	2200      	movs	r2, #0
     a2e:	4b61      	ldr	r3, [pc, #388]	; (bb4 <ssd1963_init+0x8e4>)
     a30:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a32:	2240      	movs	r2, #64	; 0x40
     a34:	4960      	ldr	r1, [pc, #384]	; (bb8 <ssd1963_init+0x8e8>)
     a36:	485c      	ldr	r0, [pc, #368]	; (ba8 <ssd1963_init+0x8d8>)
     a38:	4b5c      	ldr	r3, [pc, #368]	; (bac <ssd1963_init+0x8dc>)
     a3a:	4798      	blx	r3
     a3c:	4b5c      	ldr	r3, [pc, #368]	; (bb0 <ssd1963_init+0x8e0>)
     a3e:	2240      	movs	r2, #64	; 0x40
     a40:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a42:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a44:	4b5b      	ldr	r3, [pc, #364]	; (bb4 <ssd1963_init+0x8e4>)
     a46:	781b      	ldrb	r3, [r3, #0]
     a48:	b123      	cbz	r3, a54 <ssd1963_init+0x784>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a4a:	4b59      	ldr	r3, [pc, #356]	; (bb0 <ssd1963_init+0x8e0>)
     a4c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a4e:	2200      	movs	r2, #0
     a50:	4b58      	ldr	r3, [pc, #352]	; (bb4 <ssd1963_init+0x8e4>)
     a52:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a54:	2280      	movs	r2, #128	; 0x80
     a56:	4958      	ldr	r1, [pc, #352]	; (bb8 <ssd1963_init+0x8e8>)
     a58:	4853      	ldr	r0, [pc, #332]	; (ba8 <ssd1963_init+0x8d8>)
     a5a:	4b54      	ldr	r3, [pc, #336]	; (bac <ssd1963_init+0x8dc>)
     a5c:	4798      	blx	r3
     a5e:	4b54      	ldr	r3, [pc, #336]	; (bb0 <ssd1963_init+0x8e0>)
     a60:	2240      	movs	r2, #64	; 0x40
     a62:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a64:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a66:	4b53      	ldr	r3, [pc, #332]	; (bb4 <ssd1963_init+0x8e4>)
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	b123      	cbz	r3, a76 <ssd1963_init+0x7a6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a6c:	4b50      	ldr	r3, [pc, #320]	; (bb0 <ssd1963_init+0x8e0>)
     a6e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a70:	2200      	movs	r2, #0
     a72:	4b50      	ldr	r3, [pc, #320]	; (bb4 <ssd1963_init+0x8e4>)
     a74:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a76:	2240      	movs	r2, #64	; 0x40
     a78:	494f      	ldr	r1, [pc, #316]	; (bb8 <ssd1963_init+0x8e8>)
     a7a:	484b      	ldr	r0, [pc, #300]	; (ba8 <ssd1963_init+0x8d8>)
     a7c:	4b4b      	ldr	r3, [pc, #300]	; (bac <ssd1963_init+0x8dc>)
     a7e:	4798      	blx	r3
     a80:	4b4b      	ldr	r3, [pc, #300]	; (bb0 <ssd1963_init+0x8e0>)
     a82:	2240      	movs	r2, #64	; 0x40
     a84:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a86:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a88:	4b4a      	ldr	r3, [pc, #296]	; (bb4 <ssd1963_init+0x8e4>)
     a8a:	781b      	ldrb	r3, [r3, #0]
     a8c:	b123      	cbz	r3, a98 <ssd1963_init+0x7c8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a8e:	4b48      	ldr	r3, [pc, #288]	; (bb0 <ssd1963_init+0x8e0>)
     a90:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a92:	2200      	movs	r2, #0
     a94:	4b47      	ldr	r3, [pc, #284]	; (bb4 <ssd1963_init+0x8e4>)
     a96:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a98:	2201      	movs	r2, #1
     a9a:	4947      	ldr	r1, [pc, #284]	; (bb8 <ssd1963_init+0x8e8>)
     a9c:	4842      	ldr	r0, [pc, #264]	; (ba8 <ssd1963_init+0x8d8>)
     a9e:	4b43      	ldr	r3, [pc, #268]	; (bac <ssd1963_init+0x8dc>)
     aa0:	4798      	blx	r3
     aa2:	4c43      	ldr	r4, [pc, #268]	; (bb0 <ssd1963_init+0x8e0>)
     aa4:	2540      	movs	r5, #64	; 0x40
     aa6:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
     aa8:	2001      	movs	r0, #1
     aaa:	4b44      	ldr	r3, [pc, #272]	; (bbc <ssd1963_init+0x8ec>)
     aac:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aae:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     ab0:	4b40      	ldr	r3, [pc, #256]	; (bb4 <ssd1963_init+0x8e4>)
     ab2:	781b      	ldrb	r3, [r3, #0]
     ab4:	b923      	cbnz	r3, ac0 <ssd1963_init+0x7f0>
     ab6:	4623      	mov	r3, r4
     ab8:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     aba:	2201      	movs	r2, #1
     abc:	4b3d      	ldr	r3, [pc, #244]	; (bb4 <ssd1963_init+0x8e4>)
     abe:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     ac0:	2229      	movs	r2, #41	; 0x29
     ac2:	493d      	ldr	r1, [pc, #244]	; (bb8 <ssd1963_init+0x8e8>)
     ac4:	4838      	ldr	r0, [pc, #224]	; (ba8 <ssd1963_init+0x8d8>)
     ac6:	4b39      	ldr	r3, [pc, #228]	; (bac <ssd1963_init+0x8dc>)
     ac8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aca:	4b39      	ldr	r3, [pc, #228]	; (bb0 <ssd1963_init+0x8e0>)
     acc:	2240      	movs	r2, #64	; 0x40
     ace:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ad0:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     ad2:	4b38      	ldr	r3, [pc, #224]	; (bb4 <ssd1963_init+0x8e4>)
     ad4:	781b      	ldrb	r3, [r3, #0]
     ad6:	b923      	cbnz	r3, ae2 <ssd1963_init+0x812>
     ad8:	4b35      	ldr	r3, [pc, #212]	; (bb0 <ssd1963_init+0x8e0>)
     ada:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     adc:	2201      	movs	r2, #1
     ade:	4b35      	ldr	r3, [pc, #212]	; (bb4 <ssd1963_init+0x8e4>)
     ae0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     ae2:	22be      	movs	r2, #190	; 0xbe
     ae4:	4934      	ldr	r1, [pc, #208]	; (bb8 <ssd1963_init+0x8e8>)
     ae6:	4830      	ldr	r0, [pc, #192]	; (ba8 <ssd1963_init+0x8d8>)
     ae8:	4b30      	ldr	r3, [pc, #192]	; (bac <ssd1963_init+0x8dc>)
     aea:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aec:	4b30      	ldr	r3, [pc, #192]	; (bb0 <ssd1963_init+0x8e0>)
     aee:	2240      	movs	r2, #64	; 0x40
     af0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     af4:	4b2f      	ldr	r3, [pc, #188]	; (bb4 <ssd1963_init+0x8e4>)
     af6:	781b      	ldrb	r3, [r3, #0]
     af8:	b123      	cbz	r3, b04 <ssd1963_init+0x834>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     afa:	4b2d      	ldr	r3, [pc, #180]	; (bb0 <ssd1963_init+0x8e0>)
     afc:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     afe:	2200      	movs	r2, #0
     b00:	4b2c      	ldr	r3, [pc, #176]	; (bb4 <ssd1963_init+0x8e4>)
     b02:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b04:	2206      	movs	r2, #6
     b06:	492c      	ldr	r1, [pc, #176]	; (bb8 <ssd1963_init+0x8e8>)
     b08:	4827      	ldr	r0, [pc, #156]	; (ba8 <ssd1963_init+0x8d8>)
     b0a:	4b28      	ldr	r3, [pc, #160]	; (bac <ssd1963_init+0x8dc>)
     b0c:	4798      	blx	r3
     b0e:	4b28      	ldr	r3, [pc, #160]	; (bb0 <ssd1963_init+0x8e0>)
     b10:	2240      	movs	r2, #64	; 0x40
     b12:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b14:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b16:	4b27      	ldr	r3, [pc, #156]	; (bb4 <ssd1963_init+0x8e4>)
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	b123      	cbz	r3, b26 <ssd1963_init+0x856>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b1c:	4b24      	ldr	r3, [pc, #144]	; (bb0 <ssd1963_init+0x8e0>)
     b1e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b20:	2200      	movs	r2, #0
     b22:	4b24      	ldr	r3, [pc, #144]	; (bb4 <ssd1963_init+0x8e4>)
     b24:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b26:	2280      	movs	r2, #128	; 0x80
     b28:	4923      	ldr	r1, [pc, #140]	; (bb8 <ssd1963_init+0x8e8>)
     b2a:	481f      	ldr	r0, [pc, #124]	; (ba8 <ssd1963_init+0x8d8>)
     b2c:	4b1f      	ldr	r3, [pc, #124]	; (bac <ssd1963_init+0x8dc>)
     b2e:	4798      	blx	r3
     b30:	4b1f      	ldr	r3, [pc, #124]	; (bb0 <ssd1963_init+0x8e0>)
     b32:	2240      	movs	r2, #64	; 0x40
     b34:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b36:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b38:	4b1e      	ldr	r3, [pc, #120]	; (bb4 <ssd1963_init+0x8e4>)
     b3a:	781b      	ldrb	r3, [r3, #0]
     b3c:	b123      	cbz	r3, b48 <ssd1963_init+0x878>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b3e:	4b1c      	ldr	r3, [pc, #112]	; (bb0 <ssd1963_init+0x8e0>)
     b40:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b42:	2200      	movs	r2, #0
     b44:	4b1b      	ldr	r3, [pc, #108]	; (bb4 <ssd1963_init+0x8e4>)
     b46:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b48:	2201      	movs	r2, #1
     b4a:	491b      	ldr	r1, [pc, #108]	; (bb8 <ssd1963_init+0x8e8>)
     b4c:	4816      	ldr	r0, [pc, #88]	; (ba8 <ssd1963_init+0x8d8>)
     b4e:	4b17      	ldr	r3, [pc, #92]	; (bac <ssd1963_init+0x8dc>)
     b50:	4798      	blx	r3
     b52:	4b17      	ldr	r3, [pc, #92]	; (bb0 <ssd1963_init+0x8e0>)
     b54:	2240      	movs	r2, #64	; 0x40
     b56:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b58:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b5a:	4b16      	ldr	r3, [pc, #88]	; (bb4 <ssd1963_init+0x8e4>)
     b5c:	781b      	ldrb	r3, [r3, #0]
     b5e:	b123      	cbz	r3, b6a <ssd1963_init+0x89a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b60:	4b13      	ldr	r3, [pc, #76]	; (bb0 <ssd1963_init+0x8e0>)
     b62:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b64:	2200      	movs	r2, #0
     b66:	4b13      	ldr	r3, [pc, #76]	; (bb4 <ssd1963_init+0x8e4>)
     b68:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b6a:	22f0      	movs	r2, #240	; 0xf0
     b6c:	4912      	ldr	r1, [pc, #72]	; (bb8 <ssd1963_init+0x8e8>)
     b6e:	480e      	ldr	r0, [pc, #56]	; (ba8 <ssd1963_init+0x8d8>)
     b70:	4b0e      	ldr	r3, [pc, #56]	; (bac <ssd1963_init+0x8dc>)
     b72:	4798      	blx	r3
     b74:	4b0e      	ldr	r3, [pc, #56]	; (bb0 <ssd1963_init+0x8e0>)
     b76:	2240      	movs	r2, #64	; 0x40
     b78:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b7a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b7c:	4b0d      	ldr	r3, [pc, #52]	; (bb4 <ssd1963_init+0x8e4>)
     b7e:	781b      	ldrb	r3, [r3, #0]
     b80:	b123      	cbz	r3, b8c <ssd1963_init+0x8bc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b82:	4b0b      	ldr	r3, [pc, #44]	; (bb0 <ssd1963_init+0x8e0>)
     b84:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b86:	2200      	movs	r2, #0
     b88:	4b0a      	ldr	r3, [pc, #40]	; (bb4 <ssd1963_init+0x8e4>)
     b8a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b8c:	2200      	movs	r2, #0
     b8e:	490a      	ldr	r1, [pc, #40]	; (bb8 <ssd1963_init+0x8e8>)
     b90:	4805      	ldr	r0, [pc, #20]	; (ba8 <ssd1963_init+0x8d8>)
     b92:	4b06      	ldr	r3, [pc, #24]	; (bac <ssd1963_init+0x8dc>)
     b94:	4798      	blx	r3
     b96:	4b06      	ldr	r3, [pc, #24]	; (bb0 <ssd1963_init+0x8e0>)
     b98:	2240      	movs	r2, #64	; 0x40
     b9a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b9c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b9e:	4b05      	ldr	r3, [pc, #20]	; (bb4 <ssd1963_init+0x8e4>)
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	b193      	cbz	r3, bca <ssd1963_init+0x8fa>
     ba4:	e00c      	b.n	bc0 <ssd1963_init+0x8f0>
     ba6:	bf00      	nop
     ba8:	41008080 	.word	0x41008080
     bac:	00000f99 	.word	0x00000f99
     bb0:	41008000 	.word	0x41008000
     bb4:	20000000 	.word	0x20000000
     bb8:	1c03c3f7 	.word	0x1c03c3f7
     bbc:	00001509 	.word	0x00001509
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bc0:	4b19      	ldr	r3, [pc, #100]	; (c28 <ssd1963_init+0x958>)
     bc2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     bc4:	2200      	movs	r2, #0
     bc6:	4b19      	ldr	r3, [pc, #100]	; (c2c <ssd1963_init+0x95c>)
     bc8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     bca:	2200      	movs	r2, #0
     bcc:	4918      	ldr	r1, [pc, #96]	; (c30 <ssd1963_init+0x960>)
     bce:	4819      	ldr	r0, [pc, #100]	; (c34 <ssd1963_init+0x964>)
     bd0:	4b19      	ldr	r3, [pc, #100]	; (c38 <ssd1963_init+0x968>)
     bd2:	4798      	blx	r3
     bd4:	4b14      	ldr	r3, [pc, #80]	; (c28 <ssd1963_init+0x958>)
     bd6:	2240      	movs	r2, #64	; 0x40
     bd8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bda:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     bdc:	4b13      	ldr	r3, [pc, #76]	; (c2c <ssd1963_init+0x95c>)
     bde:	781b      	ldrb	r3, [r3, #0]
     be0:	b923      	cbnz	r3, bec <ssd1963_init+0x91c>
     be2:	4b11      	ldr	r3, [pc, #68]	; (c28 <ssd1963_init+0x958>)
     be4:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     be6:	2201      	movs	r2, #1
     be8:	4b10      	ldr	r3, [pc, #64]	; (c2c <ssd1963_init+0x95c>)
     bea:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     bec:	22d0      	movs	r2, #208	; 0xd0
     bee:	4910      	ldr	r1, [pc, #64]	; (c30 <ssd1963_init+0x960>)
     bf0:	4810      	ldr	r0, [pc, #64]	; (c34 <ssd1963_init+0x964>)
     bf2:	4b11      	ldr	r3, [pc, #68]	; (c38 <ssd1963_init+0x968>)
     bf4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bf6:	4b0c      	ldr	r3, [pc, #48]	; (c28 <ssd1963_init+0x958>)
     bf8:	2240      	movs	r2, #64	; 0x40
     bfa:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bfc:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     bfe:	4b0b      	ldr	r3, [pc, #44]	; (c2c <ssd1963_init+0x95c>)
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	b123      	cbz	r3, c0e <ssd1963_init+0x93e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c04:	4b08      	ldr	r3, [pc, #32]	; (c28 <ssd1963_init+0x958>)
     c06:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c08:	2200      	movs	r2, #0
     c0a:	4b08      	ldr	r3, [pc, #32]	; (c2c <ssd1963_init+0x95c>)
     c0c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c0e:	220d      	movs	r2, #13
     c10:	4907      	ldr	r1, [pc, #28]	; (c30 <ssd1963_init+0x960>)
     c12:	4808      	ldr	r0, [pc, #32]	; (c34 <ssd1963_init+0x964>)
     c14:	4b08      	ldr	r3, [pc, #32]	; (c38 <ssd1963_init+0x968>)
     c16:	4798      	blx	r3
     c18:	2240      	movs	r2, #64	; 0x40
     c1a:	4b03      	ldr	r3, [pc, #12]	; (c28 <ssd1963_init+0x958>)
     c1c:	619a      	str	r2, [r3, #24]
    LV_DRV_DELAY_MS(30);
     c1e:	201e      	movs	r0, #30
     c20:	4b06      	ldr	r3, [pc, #24]	; (c3c <ssd1963_init+0x96c>)
     c22:	4798      	blx	r3
     c24:	bd70      	pop	{r4, r5, r6, pc}
     c26:	bf00      	nop
     c28:	41008000 	.word	0x41008000
     c2c:	20000000 	.word	0x20000000
     c30:	1c03c3f7 	.word	0x1c03c3f7
     c34:	41008080 	.word	0x41008080
     c38:	00000f99 	.word	0x00000f99
     c3c:	00001509 	.word	0x00001509

00000c40 <ssd1963_flush>:
{
     c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(area->x2 < 0) return;
     c44:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
     c48:	2b00      	cmp	r3, #0
     c4a:	db0f      	blt.n	c6c <ssd1963_flush+0x2c>
     c4c:	4681      	mov	r9, r0
     c4e:	468a      	mov	sl, r1
     c50:	4615      	mov	r5, r2
    if(area->y2 < 0) return;
     c52:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
     c56:	2b00      	cmp	r3, #0
     c58:	db08      	blt.n	c6c <ssd1963_flush+0x2c>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
     c5a:	f9b1 4000 	ldrsh.w	r4, [r1]
     c5e:	4b93      	ldr	r3, [pc, #588]	; (eac <ssd1963_flush+0x26c>)
     c60:	4798      	blx	r3
     c62:	4b93      	ldr	r3, [pc, #588]	; (eb0 <ssd1963_flush+0x270>)
     c64:	4798      	blx	r3
     c66:	3801      	subs	r0, #1
     c68:	4284      	cmp	r4, r0
     c6a:	dd01      	ble.n	c70 <ssd1963_flush+0x30>
     c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(area->y1 > SSD1963_VER_RES - 1) return;
     c70:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     c74:	4b8d      	ldr	r3, [pc, #564]	; (eac <ssd1963_flush+0x26c>)
     c76:	4798      	blx	r3
     c78:	4b8e      	ldr	r3, [pc, #568]	; (eb4 <ssd1963_flush+0x274>)
     c7a:	4798      	blx	r3
     c7c:	3801      	subs	r0, #1
     c7e:	4284      	cmp	r4, r0
     c80:	dcf4      	bgt.n	c6c <ssd1963_flush+0x2c>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
     c82:	f9ba 6000 	ldrsh.w	r6, [sl]
     c86:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
     c8a:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     c8e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
     c92:	46a3      	mov	fp, r4
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     c94:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
     c98:	4b84      	ldr	r3, [pc, #528]	; (eac <ssd1963_flush+0x26c>)
     c9a:	4798      	blx	r3
     c9c:	4b84      	ldr	r3, [pc, #528]	; (eb0 <ssd1963_flush+0x270>)
     c9e:	4798      	blx	r3
     ca0:	3801      	subs	r0, #1
     ca2:	4287      	cmp	r7, r0
     ca4:	f300 8116 	bgt.w	ed4 <ssd1963_flush+0x294>
     ca8:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     cac:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
     cb0:	4b7e      	ldr	r3, [pc, #504]	; (eac <ssd1963_flush+0x26c>)
     cb2:	4798      	blx	r3
     cb4:	4b7f      	ldr	r3, [pc, #508]	; (eb4 <ssd1963_flush+0x274>)
     cb6:	4798      	blx	r3
     cb8:	3801      	subs	r0, #1
     cba:	4580      	cmp	r8, r0
     cbc:	f300 8110 	bgt.w	ee0 <ssd1963_flush+0x2a0>
     cc0:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cc4:	2240      	movs	r2, #64	; 0x40
     cc6:	4b7c      	ldr	r3, [pc, #496]	; (eb8 <ssd1963_flush+0x278>)
     cc8:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     cca:	4b7c      	ldr	r3, [pc, #496]	; (ebc <ssd1963_flush+0x27c>)
     ccc:	781b      	ldrb	r3, [r3, #0]
     cce:	b923      	cbnz	r3, cda <ssd1963_flush+0x9a>
     cd0:	4b79      	ldr	r3, [pc, #484]	; (eb8 <ssd1963_flush+0x278>)
     cd2:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     cd4:	2201      	movs	r2, #1
     cd6:	4b79      	ldr	r3, [pc, #484]	; (ebc <ssd1963_flush+0x27c>)
     cd8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     cda:	222a      	movs	r2, #42	; 0x2a
     cdc:	4978      	ldr	r1, [pc, #480]	; (ec0 <ssd1963_flush+0x280>)
     cde:	4879      	ldr	r0, [pc, #484]	; (ec4 <ssd1963_flush+0x284>)
     ce0:	4b79      	ldr	r3, [pc, #484]	; (ec8 <ssd1963_flush+0x288>)
     ce2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ce4:	4b74      	ldr	r3, [pc, #464]	; (eb8 <ssd1963_flush+0x278>)
     ce6:	2140      	movs	r1, #64	; 0x40
     ce8:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x1 >> 8);
     cea:	1232      	asrs	r2, r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cec:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     cee:	4b73      	ldr	r3, [pc, #460]	; (ebc <ssd1963_flush+0x27c>)
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	b123      	cbz	r3, cfe <ssd1963_flush+0xbe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cf4:	4b70      	ldr	r3, [pc, #448]	; (eb8 <ssd1963_flush+0x278>)
     cf6:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     cf8:	2100      	movs	r1, #0
     cfa:	4b70      	ldr	r3, [pc, #448]	; (ebc <ssd1963_flush+0x27c>)
     cfc:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     cfe:	b2d2      	uxtb	r2, r2
     d00:	496f      	ldr	r1, [pc, #444]	; (ec0 <ssd1963_flush+0x280>)
     d02:	4870      	ldr	r0, [pc, #448]	; (ec4 <ssd1963_flush+0x284>)
     d04:	4b70      	ldr	r3, [pc, #448]	; (ec8 <ssd1963_flush+0x288>)
     d06:	4798      	blx	r3
     d08:	4b6b      	ldr	r3, [pc, #428]	; (eb8 <ssd1963_flush+0x278>)
     d0a:	2140      	movs	r1, #64	; 0x40
     d0c:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_x1);
     d0e:	b2f2      	uxtb	r2, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d10:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d12:	4b6a      	ldr	r3, [pc, #424]	; (ebc <ssd1963_flush+0x27c>)
     d14:	781b      	ldrb	r3, [r3, #0]
     d16:	b123      	cbz	r3, d22 <ssd1963_flush+0xe2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d18:	4b67      	ldr	r3, [pc, #412]	; (eb8 <ssd1963_flush+0x278>)
     d1a:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d1c:	2100      	movs	r1, #0
     d1e:	4b67      	ldr	r3, [pc, #412]	; (ebc <ssd1963_flush+0x27c>)
     d20:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d22:	4967      	ldr	r1, [pc, #412]	; (ec0 <ssd1963_flush+0x280>)
     d24:	4867      	ldr	r0, [pc, #412]	; (ec4 <ssd1963_flush+0x284>)
     d26:	4b68      	ldr	r3, [pc, #416]	; (ec8 <ssd1963_flush+0x288>)
     d28:	4798      	blx	r3
     d2a:	4b63      	ldr	r3, [pc, #396]	; (eb8 <ssd1963_flush+0x278>)
     d2c:	2140      	movs	r1, #64	; 0x40
     d2e:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x2 >> 8);
     d30:	123a      	asrs	r2, r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d32:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d34:	4b61      	ldr	r3, [pc, #388]	; (ebc <ssd1963_flush+0x27c>)
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	b123      	cbz	r3, d44 <ssd1963_flush+0x104>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d3a:	4b5f      	ldr	r3, [pc, #380]	; (eb8 <ssd1963_flush+0x278>)
     d3c:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d3e:	2100      	movs	r1, #0
     d40:	4b5e      	ldr	r3, [pc, #376]	; (ebc <ssd1963_flush+0x27c>)
     d42:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d44:	b2d2      	uxtb	r2, r2
     d46:	495e      	ldr	r1, [pc, #376]	; (ec0 <ssd1963_flush+0x280>)
     d48:	485e      	ldr	r0, [pc, #376]	; (ec4 <ssd1963_flush+0x284>)
     d4a:	4b5f      	ldr	r3, [pc, #380]	; (ec8 <ssd1963_flush+0x288>)
     d4c:	4798      	blx	r3
     d4e:	4b5a      	ldr	r3, [pc, #360]	; (eb8 <ssd1963_flush+0x278>)
     d50:	2240      	movs	r2, #64	; 0x40
     d52:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d54:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     d56:	4b59      	ldr	r3, [pc, #356]	; (ebc <ssd1963_flush+0x27c>)
     d58:	781b      	ldrb	r3, [r3, #0]
     d5a:	b123      	cbz	r3, d66 <ssd1963_flush+0x126>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d5c:	4b56      	ldr	r3, [pc, #344]	; (eb8 <ssd1963_flush+0x278>)
     d5e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     d60:	2200      	movs	r2, #0
     d62:	4b56      	ldr	r3, [pc, #344]	; (ebc <ssd1963_flush+0x27c>)
     d64:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d66:	b2fa      	uxtb	r2, r7
     d68:	4955      	ldr	r1, [pc, #340]	; (ec0 <ssd1963_flush+0x280>)
     d6a:	4856      	ldr	r0, [pc, #344]	; (ec4 <ssd1963_flush+0x284>)
     d6c:	4b56      	ldr	r3, [pc, #344]	; (ec8 <ssd1963_flush+0x288>)
     d6e:	4798      	blx	r3
     d70:	4b51      	ldr	r3, [pc, #324]	; (eb8 <ssd1963_flush+0x278>)
     d72:	2240      	movs	r2, #64	; 0x40
     d74:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d76:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     d78:	4b50      	ldr	r3, [pc, #320]	; (ebc <ssd1963_flush+0x27c>)
     d7a:	781b      	ldrb	r3, [r3, #0]
     d7c:	b923      	cbnz	r3, d88 <ssd1963_flush+0x148>
     d7e:	4b4e      	ldr	r3, [pc, #312]	; (eb8 <ssd1963_flush+0x278>)
     d80:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     d82:	2201      	movs	r2, #1
     d84:	4b4d      	ldr	r3, [pc, #308]	; (ebc <ssd1963_flush+0x27c>)
     d86:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     d88:	222b      	movs	r2, #43	; 0x2b
     d8a:	494d      	ldr	r1, [pc, #308]	; (ec0 <ssd1963_flush+0x280>)
     d8c:	484d      	ldr	r0, [pc, #308]	; (ec4 <ssd1963_flush+0x284>)
     d8e:	4b4e      	ldr	r3, [pc, #312]	; (ec8 <ssd1963_flush+0x288>)
     d90:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d92:	4b49      	ldr	r3, [pc, #292]	; (eb8 <ssd1963_flush+0x278>)
     d94:	2140      	movs	r1, #64	; 0x40
     d96:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y1 >> 8);
     d98:	ea4f 222b 	mov.w	r2, fp, asr #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d9c:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d9e:	4b47      	ldr	r3, [pc, #284]	; (ebc <ssd1963_flush+0x27c>)
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b123      	cbz	r3, dae <ssd1963_flush+0x16e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     da4:	4b44      	ldr	r3, [pc, #272]	; (eb8 <ssd1963_flush+0x278>)
     da6:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     da8:	2100      	movs	r1, #0
     daa:	4b44      	ldr	r3, [pc, #272]	; (ebc <ssd1963_flush+0x27c>)
     dac:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dae:	b2d2      	uxtb	r2, r2
     db0:	4943      	ldr	r1, [pc, #268]	; (ec0 <ssd1963_flush+0x280>)
     db2:	4844      	ldr	r0, [pc, #272]	; (ec4 <ssd1963_flush+0x284>)
     db4:	4b44      	ldr	r3, [pc, #272]	; (ec8 <ssd1963_flush+0x288>)
     db6:	4798      	blx	r3
     db8:	4b3f      	ldr	r3, [pc, #252]	; (eb8 <ssd1963_flush+0x278>)
     dba:	2140      	movs	r1, #64	; 0x40
     dbc:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_y1);
     dbe:	b2e2      	uxtb	r2, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dc0:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     dc2:	4b3e      	ldr	r3, [pc, #248]	; (ebc <ssd1963_flush+0x27c>)
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	b123      	cbz	r3, dd2 <ssd1963_flush+0x192>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dc8:	4b3b      	ldr	r3, [pc, #236]	; (eb8 <ssd1963_flush+0x278>)
     dca:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     dcc:	2100      	movs	r1, #0
     dce:	4b3b      	ldr	r3, [pc, #236]	; (ebc <ssd1963_flush+0x27c>)
     dd0:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dd2:	493b      	ldr	r1, [pc, #236]	; (ec0 <ssd1963_flush+0x280>)
     dd4:	483b      	ldr	r0, [pc, #236]	; (ec4 <ssd1963_flush+0x284>)
     dd6:	4b3c      	ldr	r3, [pc, #240]	; (ec8 <ssd1963_flush+0x288>)
     dd8:	4798      	blx	r3
     dda:	4b37      	ldr	r3, [pc, #220]	; (eb8 <ssd1963_flush+0x278>)
     ddc:	2140      	movs	r1, #64	; 0x40
     dde:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y2 >> 8);
     de0:	ea4f 2228 	mov.w	r2, r8, asr #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     de4:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     de6:	4b35      	ldr	r3, [pc, #212]	; (ebc <ssd1963_flush+0x27c>)
     de8:	781b      	ldrb	r3, [r3, #0]
     dea:	b123      	cbz	r3, df6 <ssd1963_flush+0x1b6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dec:	4b32      	ldr	r3, [pc, #200]	; (eb8 <ssd1963_flush+0x278>)
     dee:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     df0:	2100      	movs	r1, #0
     df2:	4b32      	ldr	r3, [pc, #200]	; (ebc <ssd1963_flush+0x27c>)
     df4:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     df6:	b2d2      	uxtb	r2, r2
     df8:	4931      	ldr	r1, [pc, #196]	; (ec0 <ssd1963_flush+0x280>)
     dfa:	4832      	ldr	r0, [pc, #200]	; (ec4 <ssd1963_flush+0x284>)
     dfc:	4b32      	ldr	r3, [pc, #200]	; (ec8 <ssd1963_flush+0x288>)
     dfe:	4798      	blx	r3
     e00:	4b2d      	ldr	r3, [pc, #180]	; (eb8 <ssd1963_flush+0x278>)
     e02:	2240      	movs	r2, #64	; 0x40
     e04:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e06:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     e08:	4b2c      	ldr	r3, [pc, #176]	; (ebc <ssd1963_flush+0x27c>)
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	b123      	cbz	r3, e18 <ssd1963_flush+0x1d8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e0e:	4b2a      	ldr	r3, [pc, #168]	; (eb8 <ssd1963_flush+0x278>)
     e10:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     e12:	2200      	movs	r2, #0
     e14:	4b29      	ldr	r3, [pc, #164]	; (ebc <ssd1963_flush+0x27c>)
     e16:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e18:	fa5f f288 	uxtb.w	r2, r8
     e1c:	4928      	ldr	r1, [pc, #160]	; (ec0 <ssd1963_flush+0x280>)
     e1e:	4829      	ldr	r0, [pc, #164]	; (ec4 <ssd1963_flush+0x284>)
     e20:	4b29      	ldr	r3, [pc, #164]	; (ec8 <ssd1963_flush+0x288>)
     e22:	4798      	blx	r3
     e24:	4b24      	ldr	r3, [pc, #144]	; (eb8 <ssd1963_flush+0x278>)
     e26:	2240      	movs	r2, #64	; 0x40
     e28:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     e2c:	4b23      	ldr	r3, [pc, #140]	; (ebc <ssd1963_flush+0x27c>)
     e2e:	781b      	ldrb	r3, [r3, #0]
     e30:	b923      	cbnz	r3, e3c <ssd1963_flush+0x1fc>
     e32:	4b21      	ldr	r3, [pc, #132]	; (eb8 <ssd1963_flush+0x278>)
     e34:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     e36:	2201      	movs	r2, #1
     e38:	4b20      	ldr	r3, [pc, #128]	; (ebc <ssd1963_flush+0x27c>)
     e3a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     e3c:	222c      	movs	r2, #44	; 0x2c
     e3e:	4920      	ldr	r1, [pc, #128]	; (ec0 <ssd1963_flush+0x280>)
     e40:	4820      	ldr	r0, [pc, #128]	; (ec4 <ssd1963_flush+0x284>)
     e42:	4b21      	ldr	r3, [pc, #132]	; (ec8 <ssd1963_flush+0x288>)
     e44:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e46:	2240      	movs	r2, #64	; 0x40
     e48:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <ssd1963_flush+0x278>)
     e4a:	619a      	str	r2, [r3, #24]
    uint16_t full_w = area->x2 - area->x1 + 1;
     e4c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
     e50:	3301      	adds	r3, #1
     e52:	f8ba 2000 	ldrh.w	r2, [sl]
     e56:	1a9b      	subs	r3, r3, r2
     e58:	b29b      	uxth	r3, r3
    if(cmd_mode != false) {
     e5a:	4a18      	ldr	r2, [pc, #96]	; (ebc <ssd1963_flush+0x27c>)
     e5c:	7812      	ldrb	r2, [r2, #0]
     e5e:	b12a      	cbz	r2, e6c <ssd1963_flush+0x22c>
     e60:	2140      	movs	r1, #64	; 0x40
     e62:	4a15      	ldr	r2, [pc, #84]	; (eb8 <ssd1963_flush+0x278>)
     e64:	6191      	str	r1, [r2, #24]
        cmd_mode = false;
     e66:	2100      	movs	r1, #0
     e68:	4a14      	ldr	r2, [pc, #80]	; (ebc <ssd1963_flush+0x27c>)
     e6a:	7011      	strb	r1, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e6c:	2140      	movs	r1, #64	; 0x40
     e6e:	4a12      	ldr	r2, [pc, #72]	; (eb8 <ssd1963_flush+0x278>)
     e70:	6151      	str	r1, [r2, #20]
    uint16_t act_w = act_x2 - act_x1 + 1;
     e72:	f1c6 0601 	rsb	r6, r6, #1
     e76:	443e      	add	r6, r7
     e78:	b2b6      	uxth	r6, r6
    for(i = act_y1; i <= act_y2; i++) {
     e7a:	45d8      	cmp	r8, fp
     e7c:	db0e      	blt.n	e9c <ssd1963_flush+0x25c>
        color_p += full_w;
     e7e:	005f      	lsls	r7, r3, #1
        LV_DRV_DISP_PAR_WR_ARRAY((uint16_t *)color_p, act_w);
     e80:	f8df b03c 	ldr.w	fp, [pc, #60]	; ec0 <ssd1963_flush+0x280>
     e84:	f8df a048 	ldr.w	sl, [pc, #72]	; ed0 <ssd1963_flush+0x290>
     e88:	4633      	mov	r3, r6
     e8a:	462a      	mov	r2, r5
     e8c:	4659      	mov	r1, fp
     e8e:	480d      	ldr	r0, [pc, #52]	; (ec4 <ssd1963_flush+0x284>)
     e90:	47d0      	blx	sl
        color_p += full_w;
     e92:	443d      	add	r5, r7
     e94:	3401      	adds	r4, #1
     e96:	b224      	sxth	r4, r4
    for(i = act_y1; i <= act_y2; i++) {
     e98:	45a0      	cmp	r8, r4
     e9a:	daf5      	bge.n	e88 <ssd1963_flush+0x248>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e9c:	2240      	movs	r2, #64	; 0x40
     e9e:	4b06      	ldr	r3, [pc, #24]	; (eb8 <ssd1963_flush+0x278>)
     ea0:	619a      	str	r2, [r3, #24]
    lv_disp_flush_ready(disp_drv);
     ea2:	4648      	mov	r0, r9
     ea4:	4b09      	ldr	r3, [pc, #36]	; (ecc <ssd1963_flush+0x28c>)
     ea6:	4798      	blx	r3
     ea8:	e6e0      	b.n	c6c <ssd1963_flush+0x2c>
     eaa:	bf00      	nop
     eac:	00010125 	.word	0x00010125
     eb0:	00010131 	.word	0x00010131
     eb4:	00010159 	.word	0x00010159
     eb8:	41008000 	.word	0x41008000
     ebc:	20000000 	.word	0x20000000
     ec0:	1c03c3f7 	.word	0x1c03c3f7
     ec4:	41008080 	.word	0x41008080
     ec8:	00000f99 	.word	0x00000f99
     ecc:	000101f1 	.word	0x000101f1
     ed0:	00000fc5 	.word	0x00000fc5
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     ed4:	4b06      	ldr	r3, [pc, #24]	; (ef0 <ssd1963_flush+0x2b0>)
     ed6:	4798      	blx	r3
     ed8:	4b06      	ldr	r3, [pc, #24]	; (ef4 <ssd1963_flush+0x2b4>)
     eda:	4798      	blx	r3
     edc:	1e47      	subs	r7, r0, #1
     ede:	e6e5      	b.n	cac <ssd1963_flush+0x6c>
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <ssd1963_flush+0x2b0>)
     ee2:	4798      	blx	r3
     ee4:	4b04      	ldr	r3, [pc, #16]	; (ef8 <ssd1963_flush+0x2b8>)
     ee6:	4798      	blx	r3
     ee8:	f100 38ff 	add.w	r8, r0, #4294967295
     eec:	e6ea      	b.n	cc4 <ssd1963_flush+0x84>
     eee:	bf00      	nop
     ef0:	00010125 	.word	0x00010125
     ef4:	00010131 	.word	0x00010131
     ef8:	00010159 	.word	0x00010159

00000efc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     efc:	e7fe      	b.n	efc <Dummy_Handler>
	...

00000f00 <Reset_Handler>:
{
     f00:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     f02:	4b1c      	ldr	r3, [pc, #112]	; (f74 <Reset_Handler+0x74>)
     f04:	4a1c      	ldr	r2, [pc, #112]	; (f78 <Reset_Handler+0x78>)
     f06:	429a      	cmp	r2, r3
     f08:	d010      	beq.n	f2c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     f0a:	4b1c      	ldr	r3, [pc, #112]	; (f7c <Reset_Handler+0x7c>)
     f0c:	4a19      	ldr	r2, [pc, #100]	; (f74 <Reset_Handler+0x74>)
     f0e:	429a      	cmp	r2, r3
     f10:	d20c      	bcs.n	f2c <Reset_Handler+0x2c>
     f12:	3b01      	subs	r3, #1
     f14:	1a9b      	subs	r3, r3, r2
     f16:	f023 0303 	bic.w	r3, r3, #3
     f1a:	3304      	adds	r3, #4
     f1c:	4413      	add	r3, r2
     f1e:	4916      	ldr	r1, [pc, #88]	; (f78 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     f20:	f851 0b04 	ldr.w	r0, [r1], #4
     f24:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     f28:	429a      	cmp	r2, r3
     f2a:	d1f9      	bne.n	f20 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     f2c:	4b14      	ldr	r3, [pc, #80]	; (f80 <Reset_Handler+0x80>)
     f2e:	4a15      	ldr	r2, [pc, #84]	; (f84 <Reset_Handler+0x84>)
     f30:	429a      	cmp	r2, r3
     f32:	d20a      	bcs.n	f4a <Reset_Handler+0x4a>
     f34:	3b01      	subs	r3, #1
     f36:	1a9b      	subs	r3, r3, r2
     f38:	f023 0303 	bic.w	r3, r3, #3
     f3c:	3304      	adds	r3, #4
     f3e:	4413      	add	r3, r2
                *pDest++ = 0;
     f40:	2100      	movs	r1, #0
     f42:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     f46:	4293      	cmp	r3, r2
     f48:	d1fb      	bne.n	f42 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f4a:	4b0f      	ldr	r3, [pc, #60]	; (f88 <Reset_Handler+0x88>)
     f4c:	4a0f      	ldr	r2, [pc, #60]	; (f8c <Reset_Handler+0x8c>)
     f4e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     f52:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     f54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     f58:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f64:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     f68:	4b09      	ldr	r3, [pc, #36]	; (f90 <Reset_Handler+0x90>)
     f6a:	4798      	blx	r3
        main();
     f6c:	4b09      	ldr	r3, [pc, #36]	; (f94 <Reset_Handler+0x94>)
     f6e:	4798      	blx	r3
     f70:	e7fe      	b.n	f70 <Reset_Handler+0x70>
     f72:	bf00      	nop
     f74:	20000000 	.word	0x20000000
     f78:	0001b544 	.word	0x0001b544
     f7c:	20000074 	.word	0x20000074
     f80:	2000ae0c 	.word	0x2000ae0c
     f84:	20000078 	.word	0x20000078
     f88:	e000ed00 	.word	0xe000ed00
     f8c:	00000000 	.word	0x00000000
     f90:	00017405 	.word	0x00017405
     f94:	0000288d 	.word	0x0000288d

00000f98 <p_gpio_parallel_write>:
	gpio_set_pin_level(SSD1963_TFT_WR, 1);

}

void p_gpio_parallel_write(PortGroup* group, uint32_t mask, uint32_t data)
{
     f98:	b570      	push	{r4, r5, r6, lr}
}

void p_gpio_set_port_data(PortGroup* const port, const uint32_t mask, const uint32_t data)
{
	uint32_t dword = (uint32_t)(SSD1963_TFT_DATA_FIX(data));
	port->OUTSET.reg = (mask & data);
     f9a:	ea01 0302 	and.w	r3, r1, r2
     f9e:	6183      	str	r3, [r0, #24]
	port->OUTCLR.reg = (mask & ~data);
     fa0:	ea21 0102 	bic.w	r1, r1, r2
     fa4:	6141      	str	r1, [r0, #20]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fa6:	4d05      	ldr	r5, [pc, #20]	; (fbc <p_gpio_parallel_write+0x24>)
     fa8:	2680      	movs	r6, #128	; 0x80
     faa:	616e      	str	r6, [r5, #20]
	delay_us(1);
     fac:	2001      	movs	r0, #1
     fae:	4c04      	ldr	r4, [pc, #16]	; (fc0 <p_gpio_parallel_write+0x28>)
     fb0:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fb2:	61ae      	str	r6, [r5, #24]
	delay_us(1);
     fb4:	2001      	movs	r0, #1
     fb6:	47a0      	blx	r4
     fb8:	bd70      	pop	{r4, r5, r6, pc}
     fba:	bf00      	nop
     fbc:	41008000 	.word	0x41008000
     fc0:	000014e9 	.word	0x000014e9

00000fc4 <p_gpio_parallel_write_arr>:
	for(int ind = 0; ind < len; ind++)
     fc4:	b18b      	cbz	r3, fea <p_gpio_parallel_write_arr+0x26>
{
     fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fca:	461d      	mov	r5, r3
     fcc:	4690      	mov	r8, r2
     fce:	460f      	mov	r7, r1
     fd0:	4606      	mov	r6, r0
	for(int ind = 0; ind < len; ind++)
     fd2:	2400      	movs	r4, #0
		p_gpio_parallel_write(group, mask, data);
     fd4:	f8df 9014 	ldr.w	r9, [pc, #20]	; fec <p_gpio_parallel_write_arr+0x28>
     fd8:	4642      	mov	r2, r8
     fda:	4639      	mov	r1, r7
     fdc:	4630      	mov	r0, r6
     fde:	47c8      	blx	r9
	for(int ind = 0; ind < len; ind++)
     fe0:	3401      	adds	r4, #1
     fe2:	42ac      	cmp	r4, r5
     fe4:	d1f8      	bne.n	fd8 <p_gpio_parallel_write_arr+0x14>
     fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     fea:	4770      	bx	lr
     fec:	00000f99 	.word	0x00000f99

00000ff0 <p_gpio_set_port_group_config>:
}

void p_gpio_set_port_group_config(enum gpio_port port, const uint32_t mask, p_port_config* config)
{
     ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ff4:	b083      	sub	sp, #12
     ff6:	468b      	mov	fp, r1
     ff8:	9200      	str	r2, [sp, #0]
	for(uint8_t i = 0; i < 32; i++)
	{
		if(mask & (1UL << i))
		{
			uint32_t _gpio_pin = GPIO(port, i);
     ffa:	0140      	lsls	r0, r0, #5
     ffc:	b2c3      	uxtb	r3, r0
     ffe:	9301      	str	r3, [sp, #4]
    1000:	2600      	movs	r6, #0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1002:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1198 <p_gpio_set_port_group_config+0x1a8>
    1006:	e065      	b.n	10d4 <p_gpio_set_port_group_config+0xe4>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1008:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    100c:	605d      	str	r5, [r3, #4]
                                       const enum gpio_direction direction)
{
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    100e:	b2aa      	uxth	r2, r5
    1010:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1014:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1016:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    1018:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    101c:	629a      	str	r2, [r3, #40]	; 0x28
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
	switch (pull_mode) {
    101e:	9b00      	ldr	r3, [sp, #0]
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b01      	cmp	r3, #1
    1024:	d077      	beq.n	1116 <p_gpio_set_port_group_config+0x126>
    1026:	b323      	cbz	r3, 1072 <p_gpio_set_port_group_config+0x82>
    1028:	2b02      	cmp	r3, #2
    102a:	f000 8084 	beq.w	1136 <p_gpio_set_port_group_config+0x146>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    102e:	2289      	movs	r2, #137	; 0x89
    1030:	4957      	ldr	r1, [pc, #348]	; (1190 <p_gpio_set_port_group_config+0x1a0>)
    1032:	2000      	movs	r0, #0
    1034:	4b57      	ldr	r3, [pc, #348]	; (1194 <p_gpio_set_port_group_config+0x1a4>)
    1036:	4798      	blx	r3
    1038:	e024      	b.n	1084 <p_gpio_set_port_group_config+0x94>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    103a:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    103e:	6055      	str	r5, [r2, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1040:	b2ab      	uxth	r3, r5
    1042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    1046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    104a:	6293      	str	r3, [r2, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
    104c:	0c2b      	lsrs	r3, r5, #16
		hri_port_write_WRCONFIG_reg(PORT,
    104e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    1056:	6293      	str	r3, [r2, #40]	; 0x28
    1058:	e7e1      	b.n	101e <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    105a:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    105e:	609d      	str	r5, [r3, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1060:	b2aa      	uxth	r2, r5
    1062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1066:	629a      	str	r2, [r3, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    1068:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    106a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    106e:	629a      	str	r2, [r3, #40]	; 0x28
    1070:	e7d5      	b.n	101e <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1072:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    1076:	4443      	add	r3, r8
    1078:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    107c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			gpio_set_pin_direction(_gpio_pin, config->direction);
			gpio_set_pin_pull_mode(_gpio_pin, config->pull_mode);
			gpio_set_pin_function(_gpio_pin, config->function);
    1084:	9b00      	ldr	r3, [sp, #0]
    1086:	685a      	ldr	r2, [r3, #4]
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
    1088:	0964      	lsrs	r4, r4, #5
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    108a:	f1b2 3fff 	cmp.w	r2, #4294967295
    108e:	d062      	beq.n	1156 <p_gpio_set_port_group_config+0x166>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1090:	b2e4      	uxtb	r4, r4
    1092:	eb09 11c4 	add.w	r1, r9, r4, lsl #7
    1096:	4441      	add	r1, r8
    1098:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    109c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10a0:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10a4:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    10a8:	f01a 0f01 	tst.w	sl, #1
    10ac:	d15e      	bne.n	116c <p_gpio_set_port_group_config+0x17c>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10ae:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    10b2:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    10b6:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    10be:	f002 020f 	and.w	r2, r2, #15
    10c2:	431a      	orrs	r2, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10c4:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10c8:	eb09 17c7 	add.w	r7, r9, r7, lsl #7
    10cc:	617d      	str	r5, [r7, #20]
    10ce:	3601      	adds	r6, #1
	for(uint8_t i = 0; i < 32; i++)
    10d0:	2e20      	cmp	r6, #32
    10d2:	d059      	beq.n	1188 <p_gpio_set_port_group_config+0x198>
    10d4:	b2f4      	uxtb	r4, r6
		if(mask & (1UL << i))
    10d6:	fa2b f306 	lsr.w	r3, fp, r6
    10da:	f013 0f01 	tst.w	r3, #1
    10de:	d0f6      	beq.n	10ce <p_gpio_set_port_group_config+0xde>
			uint32_t _gpio_pin = GPIO(port, i);
    10e0:	f004 041f 	and.w	r4, r4, #31
    10e4:	9b01      	ldr	r3, [sp, #4]
    10e6:	441c      	add	r4, r3
			gpio_set_pin_direction(_gpio_pin, config->direction);
    10e8:	fa5f fa84 	uxtb.w	sl, r4
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    10ec:	ea4f 175a 	mov.w	r7, sl, lsr #5
    10f0:	f00a 081f 	and.w	r8, sl, #31
    10f4:	2501      	movs	r5, #1
    10f6:	fa05 f508 	lsl.w	r5, r5, r8
	switch (direction) {
    10fa:	9b00      	ldr	r3, [sp, #0]
    10fc:	785b      	ldrb	r3, [r3, #1]
    10fe:	2b01      	cmp	r3, #1
    1100:	d09b      	beq.n	103a <p_gpio_set_port_group_config+0x4a>
    1102:	2b00      	cmp	r3, #0
    1104:	d080      	beq.n	1008 <p_gpio_set_port_group_config+0x18>
    1106:	2b02      	cmp	r3, #2
    1108:	d0a7      	beq.n	105a <p_gpio_set_port_group_config+0x6a>
		ASSERT(false);
    110a:	2246      	movs	r2, #70	; 0x46
    110c:	4920      	ldr	r1, [pc, #128]	; (1190 <p_gpio_set_port_group_config+0x1a0>)
    110e:	2000      	movs	r0, #0
    1110:	4b20      	ldr	r3, [pc, #128]	; (1194 <p_gpio_set_port_group_config+0x1a4>)
    1112:	4798      	blx	r3
    1114:	e783      	b.n	101e <p_gpio_set_port_group_config+0x2e>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1116:	2301      	movs	r3, #1
    1118:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    111c:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1120:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1122:	eb02 0008 	add.w	r0, r2, r8
    1126:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    112a:	f041 0104 	orr.w	r1, r1, #4
    112e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1132:	6193      	str	r3, [r2, #24]
    1134:	e7a6      	b.n	1084 <p_gpio_set_port_group_config+0x94>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    1136:	2301      	movs	r3, #1
    1138:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    113c:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1140:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1142:	eb02 0008 	add.w	r0, r2, r8
    1146:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    114a:	f041 0104 	orr.w	r1, r1, #4
    114e:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1152:	6153      	str	r3, [r2, #20]
    1154:	e796      	b.n	1084 <p_gpio_set_port_group_config+0x94>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1156:	b2e4      	uxtb	r4, r4
    1158:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    115c:	44a0      	add	r8, r4
    115e:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    1162:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1166:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
    116a:	e7ad      	b.n	10c8 <p_gpio_set_port_group_config+0xd8>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    116c:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    1170:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    1174:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1178:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    117c:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    1180:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1182:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    1186:	e79f      	b.n	10c8 <p_gpio_set_port_group_config+0xd8>
			gpio_set_pin_level(_gpio_pin, 0);
		}
		
	}
}
    1188:	b003      	add	sp, #12
    118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    118e:	bf00      	nop
    1190:	000174a0 	.word	0x000174a0
    1194:	00001a5d 	.word	0x00001a5d
    1198:	41008000 	.word	0x41008000

0000119c <p_gpio_init>:
{
    119c:	b570      	push	{r4, r5, r6, lr}
    119e:	b082      	sub	sp, #8
	memset(&data_config, 0, sizeof(data_config));
    11a0:	2300      	movs	r3, #0
    11a2:	9300      	str	r3, [sp, #0]
	data_config.direction = GPIO_DIRECTION_OUT;
    11a4:	2302      	movs	r3, #2
    11a6:	f88d 3001 	strb.w	r3, [sp, #1]
	data_config.function = GPIO_PIN_FUNCTION_OFF;
    11aa:	f04f 33ff 	mov.w	r3, #4294967295
    11ae:	9301      	str	r3, [sp, #4]
	p_gpio_set_port_group_config(SSD1963_TFT_DATA_PORT, SSD1963_TFT_DATA_MASK, &data_config);
    11b0:	466a      	mov	r2, sp
    11b2:	4942      	ldr	r1, [pc, #264]	; (12bc <p_gpio_init+0x120>)
    11b4:	2001      	movs	r0, #1
    11b6:	4b42      	ldr	r3, [pc, #264]	; (12c0 <p_gpio_init+0x124>)
    11b8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11ba:	4b42      	ldr	r3, [pc, #264]	; (12c4 <p_gpio_init+0x128>)
    11bc:	2240      	movs	r2, #64	; 0x40
    11be:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11c0:	4d41      	ldr	r5, [pc, #260]	; (12c8 <p_gpio_init+0x12c>)
    11c2:	629d      	str	r5, [r3, #40]	; 0x28
    11c4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    11c8:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11ca:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    11cc:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
    11d0:	f040 0004 	orr.w	r0, r0, #4
    11d4:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    11d8:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11da:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    11de:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    11e2:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11e6:	2610      	movs	r6, #16
    11e8:	609e      	str	r6, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11ea:	4838      	ldr	r0, [pc, #224]	; (12cc <p_gpio_init+0x130>)
    11ec:	6298      	str	r0, [r3, #40]	; 0x28
    11ee:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    11f0:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
    11f4:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
    11f8:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    11fc:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    1200:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1204:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1208:	2408      	movs	r4, #8
    120a:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    120c:	4830      	ldr	r0, [pc, #192]	; (12d0 <p_gpio_init+0x134>)
    120e:	6298      	str	r0, [r3, #40]	; 0x28
    1210:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1212:	605c      	str	r4, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1214:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
    1218:	f040 0004 	orr.w	r0, r0, #4
    121c:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1220:	619c      	str	r4, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1222:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    1226:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    122a:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    122e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1230:	629d      	str	r5, [r3, #40]	; 0x28
    1232:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1234:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1236:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
    123a:	f040 0004 	orr.w	r0, r0, #4
    123e:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1242:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1244:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1248:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    124c:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1250:	2080      	movs	r0, #128	; 0x80
    1252:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1254:	3540      	adds	r5, #64	; 0x40
    1256:	629d      	str	r5, [r3, #40]	; 0x28
    1258:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    125a:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    125c:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
    1260:	f041 0104 	orr.w	r1, r1, #4
    1264:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1268:	6198      	str	r0, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    126a:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    126e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1272:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1276:	f44f 7180 	mov.w	r1, #256	; 0x100
    127a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    127e:	f505 3500 	add.w	r5, r5, #131072	; 0x20000
    1282:	3580      	adds	r5, #128	; 0x80
    1284:	f8c3 51a8 	str.w	r5, [r3, #424]	; 0x1a8
    1288:	4d12      	ldr	r5, [pc, #72]	; (12d4 <p_gpio_init+0x138>)
    128a:	f8c3 51a8 	str.w	r5, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    128e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1292:	f893 51c8 	ldrb.w	r5, [r3, #456]	; 0x1c8
    1296:	f045 0504 	orr.w	r5, r5, #4
    129a:	f883 51c8 	strb.w	r5, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    129e:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12a2:	f893 11c8 	ldrb.w	r1, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
    12a6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12aa:	f883 11c8 	strb.w	r1, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12ae:	619a      	str	r2, [r3, #24]
    12b0:	619e      	str	r6, [r3, #24]
    12b2:	619c      	str	r4, [r3, #24]
    12b4:	619a      	str	r2, [r3, #24]
    12b6:	6198      	str	r0, [r3, #24]
}
    12b8:	b002      	add	sp, #8
    12ba:	bd70      	pop	{r4, r5, r6, pc}
    12bc:	1c03c3f7 	.word	0x1c03c3f7
    12c0:	00000ff1 	.word	0x00000ff1
    12c4:	41008000 	.word	0x41008000
    12c8:	40000040 	.word	0x40000040
    12cc:	40000010 	.word	0x40000010
    12d0:	40000008 	.word	0x40000008
    12d4:	c0020000 	.word	0xc0020000

000012d8 <p_i2c_init>:
#include "p_i2c.h"

struct i2c_m_sync_desc p_i2c_master;

void p_i2c_init(void)
{
    12d8:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    12da:	4b1f      	ldr	r3, [pc, #124]	; (1358 <p_i2c_init+0x80>)
    12dc:	2240      	movs	r2, #64	; 0x40
    12de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    12e2:	2243      	movs	r2, #67	; 0x43
    12e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    12e8:	4a1c      	ldr	r2, [pc, #112]	; (135c <p_i2c_init+0x84>)
    12ea:	6993      	ldr	r3, [r2, #24]
    12ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    12f0:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
	
	i2c_m_sync_init(&p_i2c_master, I2C_MASTER_SERCOM);
    12f2:	491b      	ldr	r1, [pc, #108]	; (1360 <p_i2c_init+0x88>)
    12f4:	481b      	ldr	r0, [pc, #108]	; (1364 <p_i2c_init+0x8c>)
    12f6:	4b1c      	ldr	r3, [pc, #112]	; (1368 <p_i2c_init+0x90>)
    12f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    12fa:	4b1c      	ldr	r3, [pc, #112]	; (136c <p_i2c_init+0x94>)
    12fc:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    1300:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1304:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1308:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    130c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1310:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1314:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1318:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    131c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1320:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1324:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1328:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    132c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1330:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1334:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    133c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1340:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1344:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1348:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    134c:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1350:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1354:	bd08      	pop	{r3, pc}
    1356:	bf00      	nop
    1358:	40001c00 	.word	0x40001c00
    135c:	40000800 	.word	0x40000800
    1360:	41014000 	.word	0x41014000
    1364:	2000abf8 	.word	0x2000abf8
    1368:	00001589 	.word	0x00001589
    136c:	41008000 	.word	0x41008000

00001370 <TIMER_0_task1_cb>:
static volatile uint64_t sys_time = 0;
/**
 * Example of using TIMER_0.
 */
static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    1370:	b508      	push	{r3, lr}
	sys_time++;
    1372:	4906      	ldr	r1, [pc, #24]	; (138c <TIMER_0_task1_cb+0x1c>)
    1374:	e9d1 2300 	ldrd	r2, r3, [r1]
    1378:	3201      	adds	r2, #1
    137a:	f143 0300 	adc.w	r3, r3, #0
    137e:	e9c1 2300 	strd	r2, r3, [r1]
	lv_tick_inc(1);
    1382:	2001      	movs	r0, #1
    1384:	4b02      	ldr	r3, [pc, #8]	; (1390 <TIMER_0_task1_cb+0x20>)
    1386:	4798      	blx	r3
    1388:	bd08      	pop	{r3, pc}
    138a:	bf00      	nop
    138c:	20000098 	.word	0x20000098
    1390:	00010289 	.word	0x00010289

00001394 <p_tcc_init>:
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
}

void p_tcc_init(void)
{
    1394:	b510      	push	{r4, lr}
	delay_init(SysTick);
    1396:	4811      	ldr	r0, [pc, #68]	; (13dc <p_tcc_init+0x48>)
    1398:	4b11      	ldr	r3, [pc, #68]	; (13e0 <p_tcc_init+0x4c>)
    139a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    139c:	4a11      	ldr	r2, [pc, #68]	; (13e4 <p_tcc_init+0x50>)
    139e:	6953      	ldr	r3, [r2, #20]
    13a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    13a4:	6153      	str	r3, [r2, #20]
    13a6:	2240      	movs	r2, #64	; 0x40
    13a8:	4b0f      	ldr	r3, [pc, #60]	; (13e8 <p_tcc_init+0x54>)
    13aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&p_tcc_inst, TC0, _tc_get_timer());
    13ae:	4b0f      	ldr	r3, [pc, #60]	; (13ec <p_tcc_init+0x58>)
    13b0:	4798      	blx	r3
    13b2:	4c0f      	ldr	r4, [pc, #60]	; (13f0 <p_tcc_init+0x5c>)
    13b4:	4602      	mov	r2, r0
    13b6:	490f      	ldr	r1, [pc, #60]	; (13f4 <p_tcc_init+0x60>)
    13b8:	4620      	mov	r0, r4
    13ba:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <p_tcc_init+0x64>)
    13bc:	4798      	blx	r3
	
	TIMER_0_task1.interval = 1;
    13be:	490f      	ldr	r1, [pc, #60]	; (13fc <p_tcc_init+0x68>)
    13c0:	2301      	movs	r3, #1
    13c2:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    13c4:	4a0e      	ldr	r2, [pc, #56]	; (1400 <p_tcc_init+0x6c>)
    13c6:	614a      	str	r2, [r1, #20]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    13c8:	760b      	strb	r3, [r1, #24]
	//TIMER_0_task2.interval = 200;
	//TIMER_0_task2.cb       = TIMER_0_task2_cb;
	//TIMER_0_task2.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&p_tcc_inst, &TIMER_0_task1);
    13ca:	3108      	adds	r1, #8
    13cc:	4620      	mov	r0, r4
    13ce:	4b0d      	ldr	r3, [pc, #52]	; (1404 <p_tcc_init+0x70>)
    13d0:	4798      	blx	r3
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
    13d2:	4620      	mov	r0, r4
    13d4:	4b0c      	ldr	r3, [pc, #48]	; (1408 <p_tcc_init+0x74>)
    13d6:	4798      	blx	r3
    13d8:	bd10      	pop	{r4, pc}
    13da:	bf00      	nop
    13dc:	e000e010 	.word	0xe000e010
    13e0:	000014d5 	.word	0x000014d5
    13e4:	40000800 	.word	0x40000800
    13e8:	40001c00 	.word	0x40001c00
    13ec:	00002827 	.word	0x00002827
    13f0:	2000ac18 	.word	0x2000ac18
    13f4:	40003800 	.word	0x40003800
    13f8:	000016d1 	.word	0x000016d1
    13fc:	20000098 	.word	0x20000098
    1400:	00001371 	.word	0x00001371
    1404:	00001749 	.word	0x00001749
    1408:	0000170d 	.word	0x0000170d

0000140c <p_usart_init>:
static uint8_t example_USART_0[12] = "Hello World!";

static uint8_t debug_buffer[DEBUG_MAX_BUFFER_SIZE];
static uint8_t debug_rx_buff[DEBUG_USART_EX_BUFF_SIZE];
void p_usart_init(void)
{
    140c:	b530      	push	{r4, r5, lr}
    140e:	b083      	sub	sp, #12
    1410:	4b1f      	ldr	r3, [pc, #124]	; (1490 <p_usart_init+0x84>)
    1412:	2240      	movs	r2, #64	; 0x40
    1414:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    1418:	2243      	movs	r2, #67	; 0x43
    141a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    141e:	4a1d      	ldr	r2, [pc, #116]	; (1494 <p_usart_init+0x88>)
    1420:	6993      	ldr	r3, [r2, #24]
    1422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1426:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
	
	usart_async_init(&p_usart_debug_inst, USART_DEBUG_SERCOM, debug_rx_buff, DEBUG_USART_EX_BUFF_SIZE, (void*)NULL);
    1428:	4c1b      	ldr	r4, [pc, #108]	; (1498 <p_usart_init+0x8c>)
    142a:	2300      	movs	r3, #0
    142c:	9300      	str	r3, [sp, #0]
    142e:	2310      	movs	r3, #16
    1430:	4a1a      	ldr	r2, [pc, #104]	; (149c <p_usart_init+0x90>)
    1432:	491b      	ldr	r1, [pc, #108]	; (14a0 <p_usart_init+0x94>)
    1434:	4620      	mov	r0, r4
    1436:	4d1b      	ldr	r5, [pc, #108]	; (14a4 <p_usart_init+0x98>)
    1438:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    143a:	4b1b      	ldr	r3, [pc, #108]	; (14a8 <p_usart_init+0x9c>)
    143c:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    1440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1444:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1448:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    144c:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1450:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1454:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1458:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    145c:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1464:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1468:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    146c:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1470:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1474:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1478:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	// port init
	gpio_set_pin_function(USART_DEBUG_RX, USART_DEBUG_RX_MUX);
	gpio_set_pin_function(USART_DEBUG_TX, USART_DEBUG_TX_MUX);
	
	usart_async_enable(&p_usart_debug_inst);
    147c:	4620      	mov	r0, r4
    147e:	4b0b      	ldr	r3, [pc, #44]	; (14ac <p_usart_init+0xa0>)
    1480:	4798      	blx	r3
	
	io_write(&p_usart_debug_inst.io, example_USART_0, 12);
    1482:	220c      	movs	r2, #12
    1484:	490a      	ldr	r1, [pc, #40]	; (14b0 <p_usart_init+0xa4>)
    1486:	4620      	mov	r0, r4
    1488:	4b0a      	ldr	r3, [pc, #40]	; (14b4 <p_usart_init+0xa8>)
    148a:	4798      	blx	r3
	
	
}
    148c:	b003      	add	sp, #12
    148e:	bd30      	pop	{r4, r5, pc}
    1490:	40001c00 	.word	0x40001c00
    1494:	40000800 	.word	0x40000800
    1498:	2000ac34 	.word	0x2000ac34
    149c:	200000b4 	.word	0x200000b4
    14a0:	41012000 	.word	0x41012000
    14a4:	000019a1 	.word	0x000019a1
    14a8:	41008000 	.word	0x41008000
    14ac:	00001a31 	.word	0x00001a31
    14b0:	20000004 	.word	0x20000004
    14b4:	000015c9 	.word	0x000015c9

000014b8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14b8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    14bc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    14be:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    14c0:	f3bf 8f5f 	dmb	sy
    14c4:	4770      	bx	lr

000014c6 <atomic_leave_critical>:
    14c6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    14ca:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    14cc:	f383 8810 	msr	PRIMASK, r3
    14d0:	4770      	bx	lr
	...

000014d4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    14d4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    14d6:	4b02      	ldr	r3, [pc, #8]	; (14e0 <delay_init+0xc>)
    14d8:	6018      	str	r0, [r3, #0]
    14da:	4b02      	ldr	r3, [pc, #8]	; (14e4 <delay_init+0x10>)
    14dc:	4798      	blx	r3
    14de:	bd08      	pop	{r3, pc}
    14e0:	200000c4 	.word	0x200000c4
    14e4:	00001c11 	.word	0x00001c11

000014e8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    14e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    14ea:	4b04      	ldr	r3, [pc, #16]	; (14fc <delay_us+0x14>)
    14ec:	681c      	ldr	r4, [r3, #0]
    14ee:	4b04      	ldr	r3, [pc, #16]	; (1500 <delay_us+0x18>)
    14f0:	4798      	blx	r3
    14f2:	4601      	mov	r1, r0
    14f4:	4620      	mov	r0, r4
    14f6:	4b03      	ldr	r3, [pc, #12]	; (1504 <delay_us+0x1c>)
    14f8:	4798      	blx	r3
    14fa:	bd10      	pop	{r4, pc}
    14fc:	200000c4 	.word	0x200000c4
    1500:	00001bd9 	.word	0x00001bd9
    1504:	00001c19 	.word	0x00001c19

00001508 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1508:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    150a:	4b04      	ldr	r3, [pc, #16]	; (151c <delay_ms+0x14>)
    150c:	681c      	ldr	r4, [r3, #0]
    150e:	4b04      	ldr	r3, [pc, #16]	; (1520 <delay_ms+0x18>)
    1510:	4798      	blx	r3
    1512:	4601      	mov	r1, r0
    1514:	4620      	mov	r0, r4
    1516:	4b03      	ldr	r3, [pc, #12]	; (1524 <delay_ms+0x1c>)
    1518:	4798      	blx	r3
    151a:	bd10      	pop	{r4, pc}
    151c:	200000c4 	.word	0x200000c4
    1520:	00001bf1 	.word	0x00001bf1
    1524:	00001c19 	.word	0x00001c19

00001528 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1528:	b510      	push	{r4, lr}
    152a:	b084      	sub	sp, #16
    152c:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    152e:	8903      	ldrh	r3, [r0, #8]
    1530:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1534:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    153a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    153e:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1540:	a901      	add	r1, sp, #4
    1542:	3814      	subs	r0, #20
    1544:	4b03      	ldr	r3, [pc, #12]	; (1554 <i2c_m_sync_write+0x2c>)
    1546:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
    1548:	2800      	cmp	r0, #0
    154a:	bf08      	it	eq
    154c:	4620      	moveq	r0, r4
    154e:	b004      	add	sp, #16
    1550:	bd10      	pop	{r4, pc}
    1552:	bf00      	nop
    1554:	0000208d 	.word	0x0000208d

00001558 <i2c_m_sync_read>:
{
    1558:	b510      	push	{r4, lr}
    155a:	b084      	sub	sp, #16
    155c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    155e:	8903      	ldrh	r3, [r0, #8]
    1560:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1564:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1566:	f248 0301 	movw	r3, #32769	; 0x8001
    156a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    156e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1570:	a901      	add	r1, sp, #4
    1572:	3814      	subs	r0, #20
    1574:	4b03      	ldr	r3, [pc, #12]	; (1584 <i2c_m_sync_read+0x2c>)
    1576:	4798      	blx	r3
}
    1578:	2800      	cmp	r0, #0
    157a:	bf08      	it	eq
    157c:	4620      	moveq	r0, r4
    157e:	b004      	add	sp, #16
    1580:	bd10      	pop	{r4, pc}
    1582:	bf00      	nop
    1584:	0000208d 	.word	0x0000208d

00001588 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1588:	b538      	push	{r3, r4, r5, lr}
    158a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    158c:	4604      	mov	r4, r0
    158e:	225e      	movs	r2, #94	; 0x5e
    1590:	4908      	ldr	r1, [pc, #32]	; (15b4 <i2c_m_sync_init+0x2c>)
    1592:	3000      	adds	r0, #0
    1594:	bf18      	it	ne
    1596:	2001      	movne	r0, #1
    1598:	4b07      	ldr	r3, [pc, #28]	; (15b8 <i2c_m_sync_init+0x30>)
    159a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    159c:	4629      	mov	r1, r5
    159e:	4620      	mov	r0, r4
    15a0:	4b06      	ldr	r3, [pc, #24]	; (15bc <i2c_m_sync_init+0x34>)
    15a2:	4798      	blx	r3
	if (init_status) {
    15a4:	4603      	mov	r3, r0
    15a6:	b918      	cbnz	r0, 15b0 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    15a8:	4a05      	ldr	r2, [pc, #20]	; (15c0 <i2c_m_sync_init+0x38>)
    15aa:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    15ac:	4a05      	ldr	r2, [pc, #20]	; (15c4 <i2c_m_sync_init+0x3c>)
    15ae:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    15b0:	4618      	mov	r0, r3
    15b2:	bd38      	pop	{r3, r4, r5, pc}
    15b4:	000174bc 	.word	0x000174bc
    15b8:	00001a5d 	.word	0x00001a5d
    15bc:	0000205d 	.word	0x0000205d
    15c0:	00001559 	.word	0x00001559
    15c4:	00001529 	.word	0x00001529

000015c8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    15c8:	b570      	push	{r4, r5, r6, lr}
    15ca:	460d      	mov	r5, r1
    15cc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    15ce:	4604      	mov	r4, r0
    15d0:	b160      	cbz	r0, 15ec <io_write+0x24>
    15d2:	1c08      	adds	r0, r1, #0
    15d4:	bf18      	it	ne
    15d6:	2001      	movne	r0, #1
    15d8:	2234      	movs	r2, #52	; 0x34
    15da:	4905      	ldr	r1, [pc, #20]	; (15f0 <io_write+0x28>)
    15dc:	4b05      	ldr	r3, [pc, #20]	; (15f4 <io_write+0x2c>)
    15de:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    15e0:	6823      	ldr	r3, [r4, #0]
    15e2:	4632      	mov	r2, r6
    15e4:	4629      	mov	r1, r5
    15e6:	4620      	mov	r0, r4
    15e8:	4798      	blx	r3
}
    15ea:	bd70      	pop	{r4, r5, r6, pc}
    15ec:	2000      	movs	r0, #0
    15ee:	e7f3      	b.n	15d8 <io_write+0x10>
    15f0:	000174d8 	.word	0x000174d8
    15f4:	00001a5d 	.word	0x00001a5d

000015f8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    15f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15fa:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    15fc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    15fe:	b12f      	cbz	r7, 160c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1600:	688d      	ldr	r5, [r1, #8]
    1602:	463c      	mov	r4, r7
    1604:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1606:	f1c2 0e01 	rsb	lr, r2, #1
    160a:	e00b      	b.n	1624 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    160c:	4b0e      	ldr	r3, [pc, #56]	; (1648 <timer_add_timer_task+0x50>)
    160e:	4798      	blx	r3
		return;
    1610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1612:	4473      	add	r3, lr
    1614:	68a0      	ldr	r0, [r4, #8]
    1616:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1618:	42ab      	cmp	r3, r5
    161a:	d20a      	bcs.n	1632 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    161c:	6823      	ldr	r3, [r4, #0]
    161e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1620:	b153      	cbz	r3, 1638 <timer_add_timer_task+0x40>
    1622:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1624:	6863      	ldr	r3, [r4, #4]
    1626:	4293      	cmp	r3, r2
    1628:	d8f3      	bhi.n	1612 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    162a:	68a0      	ldr	r0, [r4, #8]
    162c:	4403      	add	r3, r0
    162e:	1a9b      	subs	r3, r3, r2
    1630:	e7f2      	b.n	1618 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1632:	42a7      	cmp	r7, r4
    1634:	d004      	beq.n	1640 <timer_add_timer_task+0x48>
    1636:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1638:	4620      	mov	r0, r4
    163a:	4b04      	ldr	r3, [pc, #16]	; (164c <timer_add_timer_task+0x54>)
    163c:	4798      	blx	r3
    163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1640:	4660      	mov	r0, ip
    1642:	4b01      	ldr	r3, [pc, #4]	; (1648 <timer_add_timer_task+0x50>)
    1644:	4798      	blx	r3
    1646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1648:	00001a85 	.word	0x00001a85
    164c:	00001ab1 	.word	0x00001ab1

00001650 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1654:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1656:	6907      	ldr	r7, [r0, #16]
    1658:	3701      	adds	r7, #1
    165a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    165c:	7e03      	ldrb	r3, [r0, #24]
    165e:	f013 0f01 	tst.w	r3, #1
    1662:	d113      	bne.n	168c <timer_process_counted+0x3c>
    1664:	7e03      	ldrb	r3, [r0, #24]
    1666:	f013 0f02 	tst.w	r3, #2
    166a:	d10f      	bne.n	168c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    166c:	b354      	cbz	r4, 16c4 <timer_process_counted+0x74>
    166e:	6863      	ldr	r3, [r4, #4]
    1670:	1afb      	subs	r3, r7, r3
    1672:	68a2      	ldr	r2, [r4, #8]
    1674:	4293      	cmp	r3, r2
    1676:	d307      	bcc.n	1688 <timer_process_counted+0x38>
    1678:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    167a:	f100 0814 	add.w	r8, r0, #20
    167e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16c8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1682:	f8df a048 	ldr.w	sl, [pc, #72]	; 16cc <timer_process_counted+0x7c>
    1686:	e012      	b.n	16ae <timer_process_counted+0x5e>
    1688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    168c:	7e03      	ldrb	r3, [r0, #24]
    168e:	f043 0302 	orr.w	r3, r3, #2
    1692:	7603      	strb	r3, [r0, #24]
		return;
    1694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1698:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    169a:	68e3      	ldr	r3, [r4, #12]
    169c:	4620      	mov	r0, r4
    169e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    16a0:	b185      	cbz	r5, 16c4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    16a2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    16a4:	686b      	ldr	r3, [r5, #4]
    16a6:	1afb      	subs	r3, r7, r3
    16a8:	68aa      	ldr	r2, [r5, #8]
    16aa:	4293      	cmp	r3, r2
    16ac:	d30a      	bcc.n	16c4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    16ae:	4640      	mov	r0, r8
    16b0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    16b2:	7c23      	ldrb	r3, [r4, #16]
    16b4:	2b01      	cmp	r3, #1
    16b6:	d1ef      	bne.n	1698 <timer_process_counted+0x48>
			tmp->time_label = time;
    16b8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    16ba:	463a      	mov	r2, r7
    16bc:	4621      	mov	r1, r4
    16be:	4640      	mov	r0, r8
    16c0:	47d0      	blx	sl
    16c2:	e7e9      	b.n	1698 <timer_process_counted+0x48>
    16c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16c8:	00001ab9 	.word	0x00001ab9
    16cc:	000015f9 	.word	0x000015f9

000016d0 <timer_init>:
{
    16d0:	b538      	push	{r3, r4, r5, lr}
    16d2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    16d4:	4604      	mov	r4, r0
    16d6:	b178      	cbz	r0, 16f8 <timer_init+0x28>
    16d8:	1c08      	adds	r0, r1, #0
    16da:	bf18      	it	ne
    16dc:	2001      	movne	r0, #1
    16de:	223b      	movs	r2, #59	; 0x3b
    16e0:	4906      	ldr	r1, [pc, #24]	; (16fc <timer_init+0x2c>)
    16e2:	4b07      	ldr	r3, [pc, #28]	; (1700 <timer_init+0x30>)
    16e4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    16e6:	4629      	mov	r1, r5
    16e8:	4620      	mov	r0, r4
    16ea:	4b06      	ldr	r3, [pc, #24]	; (1704 <timer_init+0x34>)
    16ec:	4798      	blx	r3
	descr->time                           = 0;
    16ee:	2000      	movs	r0, #0
    16f0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    16f2:	4b05      	ldr	r3, [pc, #20]	; (1708 <timer_init+0x38>)
    16f4:	6023      	str	r3, [r4, #0]
}
    16f6:	bd38      	pop	{r3, r4, r5, pc}
    16f8:	2000      	movs	r0, #0
    16fa:	e7f0      	b.n	16de <timer_init+0xe>
    16fc:	000174ec 	.word	0x000174ec
    1700:	00001a5d 	.word	0x00001a5d
    1704:	00002659 	.word	0x00002659
    1708:	00001651 	.word	0x00001651

0000170c <timer_start>:
{
    170c:	b510      	push	{r4, lr}
	ASSERT(descr);
    170e:	4604      	mov	r4, r0
    1710:	2253      	movs	r2, #83	; 0x53
    1712:	4909      	ldr	r1, [pc, #36]	; (1738 <timer_start+0x2c>)
    1714:	3000      	adds	r0, #0
    1716:	bf18      	it	ne
    1718:	2001      	movne	r0, #1
    171a:	4b08      	ldr	r3, [pc, #32]	; (173c <timer_start+0x30>)
    171c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    171e:	4620      	mov	r0, r4
    1720:	4b07      	ldr	r3, [pc, #28]	; (1740 <timer_start+0x34>)
    1722:	4798      	blx	r3
    1724:	b920      	cbnz	r0, 1730 <timer_start+0x24>
	_timer_start(&descr->device);
    1726:	4620      	mov	r0, r4
    1728:	4b06      	ldr	r3, [pc, #24]	; (1744 <timer_start+0x38>)
    172a:	4798      	blx	r3
	return ERR_NONE;
    172c:	2000      	movs	r0, #0
    172e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1730:	f06f 0010 	mvn.w	r0, #16
}
    1734:	bd10      	pop	{r4, pc}
    1736:	bf00      	nop
    1738:	000174ec 	.word	0x000174ec
    173c:	00001a5d 	.word	0x00001a5d
    1740:	00002815 	.word	0x00002815
    1744:	00002801 	.word	0x00002801

00001748 <timer_add_task>:
{
    1748:	b570      	push	{r4, r5, r6, lr}
    174a:	b082      	sub	sp, #8
    174c:	460d      	mov	r5, r1
	ASSERT(descr && task);
    174e:	4604      	mov	r4, r0
    1750:	b318      	cbz	r0, 179a <timer_add_task+0x52>
    1752:	1c08      	adds	r0, r1, #0
    1754:	bf18      	it	ne
    1756:	2001      	movne	r0, #1
    1758:	227a      	movs	r2, #122	; 0x7a
    175a:	491e      	ldr	r1, [pc, #120]	; (17d4 <timer_add_task+0x8c>)
    175c:	4b1e      	ldr	r3, [pc, #120]	; (17d8 <timer_add_task+0x90>)
    175e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    1760:	7e23      	ldrb	r3, [r4, #24]
    1762:	f043 0301 	orr.w	r3, r3, #1
    1766:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1768:	f104 0614 	add.w	r6, r4, #20
    176c:	4629      	mov	r1, r5
    176e:	4630      	mov	r0, r6
    1770:	4b1a      	ldr	r3, [pc, #104]	; (17dc <timer_add_task+0x94>)
    1772:	4798      	blx	r3
    1774:	b998      	cbnz	r0, 179e <timer_add_task+0x56>
	task->time_label = descr->time;
    1776:	6923      	ldr	r3, [r4, #16]
    1778:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    177a:	6922      	ldr	r2, [r4, #16]
    177c:	4629      	mov	r1, r5
    177e:	4630      	mov	r0, r6
    1780:	4b17      	ldr	r3, [pc, #92]	; (17e0 <timer_add_task+0x98>)
    1782:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    1784:	7e23      	ldrb	r3, [r4, #24]
    1786:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    178a:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    178c:	7e23      	ldrb	r3, [r4, #24]
    178e:	f013 0f02 	tst.w	r3, #2
    1792:	d110      	bne.n	17b6 <timer_add_task+0x6e>
	return ERR_NONE;
    1794:	2000      	movs	r0, #0
}
    1796:	b002      	add	sp, #8
    1798:	bd70      	pop	{r4, r5, r6, pc}
    179a:	2000      	movs	r0, #0
    179c:	e7dc      	b.n	1758 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    179e:	7e23      	ldrb	r3, [r4, #24]
    17a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17a4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    17a6:	227f      	movs	r2, #127	; 0x7f
    17a8:	490a      	ldr	r1, [pc, #40]	; (17d4 <timer_add_task+0x8c>)
    17aa:	2000      	movs	r0, #0
    17ac:	4b0a      	ldr	r3, [pc, #40]	; (17d8 <timer_add_task+0x90>)
    17ae:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    17b0:	f06f 0011 	mvn.w	r0, #17
    17b4:	e7ef      	b.n	1796 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    17b6:	a801      	add	r0, sp, #4
    17b8:	4b0a      	ldr	r3, [pc, #40]	; (17e4 <timer_add_task+0x9c>)
    17ba:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    17bc:	7e23      	ldrb	r3, [r4, #24]
    17be:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    17c2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    17c4:	4620      	mov	r0, r4
    17c6:	4b08      	ldr	r3, [pc, #32]	; (17e8 <timer_add_task+0xa0>)
    17c8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    17ca:	a801      	add	r0, sp, #4
    17cc:	4b07      	ldr	r3, [pc, #28]	; (17ec <timer_add_task+0xa4>)
    17ce:	4798      	blx	r3
	return ERR_NONE;
    17d0:	2000      	movs	r0, #0
    17d2:	e7e0      	b.n	1796 <timer_add_task+0x4e>
    17d4:	000174ec 	.word	0x000174ec
    17d8:	00001a5d 	.word	0x00001a5d
    17dc:	00001a63 	.word	0x00001a63
    17e0:	000015f9 	.word	0x000015f9
    17e4:	000014b9 	.word	0x000014b9
    17e8:	0000282d 	.word	0x0000282d
    17ec:	000014c7 	.word	0x000014c7

000017f0 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    17f0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    17f2:	2300      	movs	r3, #0
    17f4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    17f6:	69c3      	ldr	r3, [r0, #28]
    17f8:	b11b      	cbz	r3, 1802 <usart_transmission_complete+0x12>
    17fa:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    17fe:	4610      	mov	r0, r2
    1800:	4798      	blx	r3
    1802:	bd08      	pop	{r3, pc}

00001804 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1804:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1806:	2300      	movs	r3, #0
    1808:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    180a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    180c:	b11b      	cbz	r3, 1816 <usart_error+0x12>
    180e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    1812:	4610      	mov	r0, r2
    1814:	4798      	blx	r3
    1816:	bd08      	pop	{r3, pc}

00001818 <usart_fill_rx_buffer>:
{
    1818:	b538      	push	{r3, r4, r5, lr}
    181a:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    181c:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1820:	302c      	adds	r0, #44	; 0x2c
    1822:	4b03      	ldr	r3, [pc, #12]	; (1830 <usart_fill_rx_buffer+0x18>)
    1824:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1826:	6a23      	ldr	r3, [r4, #32]
    1828:	b10b      	cbz	r3, 182e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    182a:	4628      	mov	r0, r5
    182c:	4798      	blx	r3
    182e:	bd38      	pop	{r3, r4, r5, pc}
    1830:	00001b59 	.word	0x00001b59

00001834 <usart_async_write>:
{
    1834:	b570      	push	{r4, r5, r6, lr}
    1836:	460e      	mov	r6, r1
    1838:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    183a:	4604      	mov	r4, r0
    183c:	b1e0      	cbz	r0, 1878 <usart_async_write+0x44>
    183e:	b1e9      	cbz	r1, 187c <usart_async_write+0x48>
    1840:	1c10      	adds	r0, r2, #0
    1842:	bf18      	it	ne
    1844:	2001      	movne	r0, #1
    1846:	f240 123b 	movw	r2, #315	; 0x13b
    184a:	490f      	ldr	r1, [pc, #60]	; (1888 <usart_async_write+0x54>)
    184c:	4b0f      	ldr	r3, [pc, #60]	; (188c <usart_async_write+0x58>)
    184e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1850:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1854:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1858:	429a      	cmp	r2, r3
    185a:	d111      	bne.n	1880 <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    185c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    185e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1862:	2300      	movs	r3, #0
    1864:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1868:	2301      	movs	r3, #1
    186a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    186c:	f104 0008 	add.w	r0, r4, #8
    1870:	4b07      	ldr	r3, [pc, #28]	; (1890 <usart_async_write+0x5c>)
    1872:	4798      	blx	r3
	return (int32_t)length;
    1874:	4628      	mov	r0, r5
    1876:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1878:	2000      	movs	r0, #0
    187a:	e7e4      	b.n	1846 <usart_async_write+0x12>
    187c:	2000      	movs	r0, #0
    187e:	e7e2      	b.n	1846 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1880:	f06f 001b 	mvn.w	r0, #27
}
    1884:	bd70      	pop	{r4, r5, r6, pc}
    1886:	bf00      	nop
    1888:	00017504 	.word	0x00017504
    188c:	00001a5d 	.word	0x00001a5d
    1890:	0000204b 	.word	0x0000204b

00001894 <usart_process_byte_sent>:
{
    1894:	b510      	push	{r4, lr}
    1896:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1898:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    189a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    189e:	429a      	cmp	r2, r3
    18a0:	d009      	beq.n	18b6 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    18a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    18a4:	1c59      	adds	r1, r3, #1
    18a6:	8781      	strh	r1, [r0, #60]	; 0x3c
    18a8:	5cd1      	ldrb	r1, [r2, r3]
    18aa:	4b04      	ldr	r3, [pc, #16]	; (18bc <usart_process_byte_sent+0x28>)
    18ac:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    18ae:	4620      	mov	r0, r4
    18b0:	4b03      	ldr	r3, [pc, #12]	; (18c0 <usart_process_byte_sent+0x2c>)
    18b2:	4798      	blx	r3
    18b4:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    18b6:	4b03      	ldr	r3, [pc, #12]	; (18c4 <usart_process_byte_sent+0x30>)
    18b8:	4798      	blx	r3
    18ba:	bd10      	pop	{r4, pc}
    18bc:	00002045 	.word	0x00002045
    18c0:	0000204b 	.word	0x0000204b
    18c4:	00002053 	.word	0x00002053

000018c8 <usart_async_read>:
{
    18c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18cc:	b082      	sub	sp, #8
    18ce:	460f      	mov	r7, r1
    18d0:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    18d2:	4606      	mov	r6, r0
    18d4:	b1a0      	cbz	r0, 1900 <usart_async_read+0x38>
    18d6:	b199      	cbz	r1, 1900 <usart_async_read+0x38>
    18d8:	2a00      	cmp	r2, #0
    18da:	d12d      	bne.n	1938 <usart_async_read+0x70>
    18dc:	f44f 72ac 	mov.w	r2, #344	; 0x158
    18e0:	4929      	ldr	r1, [pc, #164]	; (1988 <usart_async_read+0xc0>)
    18e2:	2000      	movs	r0, #0
    18e4:	4b29      	ldr	r3, [pc, #164]	; (198c <usart_async_read+0xc4>)
    18e6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    18e8:	a801      	add	r0, sp, #4
    18ea:	4b29      	ldr	r3, [pc, #164]	; (1990 <usart_async_read+0xc8>)
    18ec:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    18ee:	f106 0034 	add.w	r0, r6, #52	; 0x34
    18f2:	4b28      	ldr	r3, [pc, #160]	; (1994 <usart_async_read+0xcc>)
    18f4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    18f6:	a801      	add	r0, sp, #4
    18f8:	4b27      	ldr	r3, [pc, #156]	; (1998 <usart_async_read+0xd0>)
    18fa:	4798      	blx	r3
	uint16_t                       was_read = 0;
    18fc:	2500      	movs	r5, #0
	return (int32_t)was_read;
    18fe:	e03e      	b.n	197e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1900:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1904:	4920      	ldr	r1, [pc, #128]	; (1988 <usart_async_read+0xc0>)
    1906:	2000      	movs	r0, #0
    1908:	4b20      	ldr	r3, [pc, #128]	; (198c <usart_async_read+0xc4>)
    190a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    190c:	a801      	add	r0, sp, #4
    190e:	4b20      	ldr	r3, [pc, #128]	; (1990 <usart_async_read+0xc8>)
    1910:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1912:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1916:	4650      	mov	r0, sl
    1918:	4b1e      	ldr	r3, [pc, #120]	; (1994 <usart_async_read+0xcc>)
    191a:	4798      	blx	r3
    191c:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    191e:	a801      	add	r0, sp, #4
    1920:	4b1d      	ldr	r3, [pc, #116]	; (1998 <usart_async_read+0xd0>)
    1922:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1924:	f1b9 0f00 	cmp.w	r9, #0
    1928:	d004      	beq.n	1934 <usart_async_read+0x6c>
    192a:	f1b8 0f00 	cmp.w	r8, #0
    192e:	d119      	bne.n	1964 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1930:	2500      	movs	r5, #0
    1932:	e024      	b.n	197e <usart_async_read+0xb6>
    1934:	2500      	movs	r5, #0
    1936:	e022      	b.n	197e <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1938:	f44f 72ac 	mov.w	r2, #344	; 0x158
    193c:	4912      	ldr	r1, [pc, #72]	; (1988 <usart_async_read+0xc0>)
    193e:	2001      	movs	r0, #1
    1940:	4b12      	ldr	r3, [pc, #72]	; (198c <usart_async_read+0xc4>)
    1942:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1944:	a801      	add	r0, sp, #4
    1946:	4b12      	ldr	r3, [pc, #72]	; (1990 <usart_async_read+0xc8>)
    1948:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    194a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    194e:	4650      	mov	r0, sl
    1950:	4b10      	ldr	r3, [pc, #64]	; (1994 <usart_async_read+0xcc>)
    1952:	4798      	blx	r3
    1954:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1956:	a801      	add	r0, sp, #4
    1958:	4b0f      	ldr	r3, [pc, #60]	; (1998 <usart_async_read+0xd0>)
    195a:	4798      	blx	r3
	uint16_t                       was_read = 0;
    195c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    195e:	f1b9 0f00 	cmp.w	r9, #0
    1962:	d00c      	beq.n	197e <usart_async_read+0xb6>
{
    1964:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1966:	4e0d      	ldr	r6, [pc, #52]	; (199c <usart_async_read+0xd4>)
    1968:	1c60      	adds	r0, r4, #1
    196a:	b285      	uxth	r5, r0
    196c:	1939      	adds	r1, r7, r4
    196e:	4650      	mov	r0, sl
    1970:	47b0      	blx	r6
    1972:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1974:	454c      	cmp	r4, r9
    1976:	d202      	bcs.n	197e <usart_async_read+0xb6>
    1978:	b2a3      	uxth	r3, r4
    197a:	4598      	cmp	r8, r3
    197c:	d8f4      	bhi.n	1968 <usart_async_read+0xa0>
}
    197e:	4628      	mov	r0, r5
    1980:	b002      	add	sp, #8
    1982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1986:	bf00      	nop
    1988:	00017504 	.word	0x00017504
    198c:	00001a5d 	.word	0x00001a5d
    1990:	000014b9 	.word	0x000014b9
    1994:	00001b99 	.word	0x00001b99
    1998:	000014c7 	.word	0x000014c7
    199c:	00001b15 	.word	0x00001b15

000019a0 <usart_async_init>:
{
    19a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19a2:	460d      	mov	r5, r1
    19a4:	4616      	mov	r6, r2
    19a6:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19a8:	4604      	mov	r4, r0
    19aa:	b320      	cbz	r0, 19f6 <usart_async_init+0x56>
    19ac:	b329      	cbz	r1, 19fa <usart_async_init+0x5a>
    19ae:	b332      	cbz	r2, 19fe <usart_async_init+0x5e>
    19b0:	1c18      	adds	r0, r3, #0
    19b2:	bf18      	it	ne
    19b4:	2001      	movne	r0, #1
    19b6:	223a      	movs	r2, #58	; 0x3a
    19b8:	4913      	ldr	r1, [pc, #76]	; (1a08 <usart_async_init+0x68>)
    19ba:	4b14      	ldr	r3, [pc, #80]	; (1a0c <usart_async_init+0x6c>)
    19bc:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19be:	463a      	mov	r2, r7
    19c0:	4631      	mov	r1, r6
    19c2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    19c6:	4b12      	ldr	r3, [pc, #72]	; (1a10 <usart_async_init+0x70>)
    19c8:	4798      	blx	r3
    19ca:	b9d0      	cbnz	r0, 1a02 <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    19cc:	4629      	mov	r1, r5
    19ce:	f104 0008 	add.w	r0, r4, #8
    19d2:	4b10      	ldr	r3, [pc, #64]	; (1a14 <usart_async_init+0x74>)
    19d4:	4798      	blx	r3
	if (init_status) {
    19d6:	4603      	mov	r3, r0
    19d8:	b958      	cbnz	r0, 19f2 <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    19da:	4a0f      	ldr	r2, [pc, #60]	; (1a18 <usart_async_init+0x78>)
    19dc:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    19de:	4a0f      	ldr	r2, [pc, #60]	; (1a1c <usart_async_init+0x7c>)
    19e0:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    19e2:	4a0f      	ldr	r2, [pc, #60]	; (1a20 <usart_async_init+0x80>)
    19e4:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    19e6:	4a0f      	ldr	r2, [pc, #60]	; (1a24 <usart_async_init+0x84>)
    19e8:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    19ea:	4a0f      	ldr	r2, [pc, #60]	; (1a28 <usart_async_init+0x88>)
    19ec:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    19ee:	4a0f      	ldr	r2, [pc, #60]	; (1a2c <usart_async_init+0x8c>)
    19f0:	6162      	str	r2, [r4, #20]
}
    19f2:	4618      	mov	r0, r3
    19f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19f6:	2000      	movs	r0, #0
    19f8:	e7dd      	b.n	19b6 <usart_async_init+0x16>
    19fa:	2000      	movs	r0, #0
    19fc:	e7db      	b.n	19b6 <usart_async_init+0x16>
    19fe:	2000      	movs	r0, #0
    1a00:	e7d9      	b.n	19b6 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1a02:	f06f 030c 	mvn.w	r3, #12
    1a06:	e7f4      	b.n	19f2 <usart_async_init+0x52>
    1a08:	00017504 	.word	0x00017504
    1a0c:	00001a5d 	.word	0x00001a5d
    1a10:	00001ac5 	.word	0x00001ac5
    1a14:	00001fad 	.word	0x00001fad
    1a18:	000018c9 	.word	0x000018c9
    1a1c:	00001835 	.word	0x00001835
    1a20:	00001895 	.word	0x00001895
    1a24:	00001819 	.word	0x00001819
    1a28:	000017f1 	.word	0x000017f1
    1a2c:	00001805 	.word	0x00001805

00001a30 <usart_async_enable>:
{
    1a30:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a32:	4604      	mov	r4, r0
    1a34:	2261      	movs	r2, #97	; 0x61
    1a36:	4906      	ldr	r1, [pc, #24]	; (1a50 <usart_async_enable+0x20>)
    1a38:	3000      	adds	r0, #0
    1a3a:	bf18      	it	ne
    1a3c:	2001      	movne	r0, #1
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <usart_async_enable+0x24>)
    1a40:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a42:	f104 0008 	add.w	r0, r4, #8
    1a46:	4b04      	ldr	r3, [pc, #16]	; (1a58 <usart_async_enable+0x28>)
    1a48:	4798      	blx	r3
}
    1a4a:	2000      	movs	r0, #0
    1a4c:	bd10      	pop	{r4, pc}
    1a4e:	bf00      	nop
    1a50:	00017504 	.word	0x00017504
    1a54:	00001a5d 	.word	0x00001a5d
    1a58:	00002031 	.word	0x00002031

00001a5c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1a5c:	b900      	cbnz	r0, 1a60 <assert+0x4>
		__asm("BKPT #0");
    1a5e:	be00      	bkpt	0x0000
    1a60:	4770      	bx	lr

00001a62 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1a62:	6803      	ldr	r3, [r0, #0]
    1a64:	b14b      	cbz	r3, 1a7a <is_list_element+0x18>
		if (it == element) {
    1a66:	428b      	cmp	r3, r1
    1a68:	d009      	beq.n	1a7e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	b11b      	cbz	r3, 1a76 <is_list_element+0x14>
		if (it == element) {
    1a6e:	4299      	cmp	r1, r3
    1a70:	d1fb      	bne.n	1a6a <is_list_element+0x8>
			return true;
    1a72:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1a74:	4770      	bx	lr
	return false;
    1a76:	2000      	movs	r0, #0
    1a78:	4770      	bx	lr
    1a7a:	2000      	movs	r0, #0
    1a7c:	4770      	bx	lr
			return true;
    1a7e:	2001      	movs	r0, #1
    1a80:	4770      	bx	lr
	...

00001a84 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1a84:	b538      	push	{r3, r4, r5, lr}
    1a86:	4604      	mov	r4, r0
    1a88:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1a8a:	4b06      	ldr	r3, [pc, #24]	; (1aa4 <list_insert_as_head+0x20>)
    1a8c:	4798      	blx	r3
    1a8e:	f080 0001 	eor.w	r0, r0, #1
    1a92:	2239      	movs	r2, #57	; 0x39
    1a94:	4904      	ldr	r1, [pc, #16]	; (1aa8 <list_insert_as_head+0x24>)
    1a96:	b2c0      	uxtb	r0, r0
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <list_insert_as_head+0x28>)
    1a9a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1a9c:	6823      	ldr	r3, [r4, #0]
    1a9e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1aa0:	6025      	str	r5, [r4, #0]
    1aa2:	bd38      	pop	{r3, r4, r5, pc}
    1aa4:	00001a63 	.word	0x00001a63
    1aa8:	00017524 	.word	0x00017524
    1aac:	00001a5d 	.word	0x00001a5d

00001ab0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1ab0:	6803      	ldr	r3, [r0, #0]
    1ab2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1ab4:	6001      	str	r1, [r0, #0]
    1ab6:	4770      	bx	lr

00001ab8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1ab8:	6803      	ldr	r3, [r0, #0]
    1aba:	b10b      	cbz	r3, 1ac0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1abc:	681a      	ldr	r2, [r3, #0]
    1abe:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1ac0:	4618      	mov	r0, r3
    1ac2:	4770      	bx	lr

00001ac4 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1ac4:	b570      	push	{r4, r5, r6, lr}
    1ac6:	460e      	mov	r6, r1
    1ac8:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1aca:	4604      	mov	r4, r0
    1acc:	b178      	cbz	r0, 1aee <ringbuffer_init+0x2a>
    1ace:	b181      	cbz	r1, 1af2 <ringbuffer_init+0x2e>
    1ad0:	b1a2      	cbz	r2, 1afc <ringbuffer_init+0x38>
    1ad2:	2001      	movs	r0, #1
    1ad4:	2228      	movs	r2, #40	; 0x28
    1ad6:	490d      	ldr	r1, [pc, #52]	; (1b0c <ringbuffer_init+0x48>)
    1ad8:	4b0d      	ldr	r3, [pc, #52]	; (1b10 <ringbuffer_init+0x4c>)
    1ada:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1adc:	1e6b      	subs	r3, r5, #1
    1ade:	421d      	tst	r5, r3
    1ae0:	d109      	bne.n	1af6 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1ae2:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1ae4:	2000      	movs	r0, #0
    1ae6:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1ae8:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1aea:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1aec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1aee:	2000      	movs	r0, #0
    1af0:	e7f0      	b.n	1ad4 <ringbuffer_init+0x10>
    1af2:	2000      	movs	r0, #0
    1af4:	e7ee      	b.n	1ad4 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1af6:	f06f 000c 	mvn.w	r0, #12
    1afa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1afc:	2228      	movs	r2, #40	; 0x28
    1afe:	4903      	ldr	r1, [pc, #12]	; (1b0c <ringbuffer_init+0x48>)
    1b00:	2000      	movs	r0, #0
    1b02:	4b03      	ldr	r3, [pc, #12]	; (1b10 <ringbuffer_init+0x4c>)
    1b04:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1b06:	1e6b      	subs	r3, r5, #1
    1b08:	e7eb      	b.n	1ae2 <ringbuffer_init+0x1e>
    1b0a:	bf00      	nop
    1b0c:	00017544 	.word	0x00017544
    1b10:	00001a5d 	.word	0x00001a5d

00001b14 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1b14:	b538      	push	{r3, r4, r5, lr}
    1b16:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1b18:	4604      	mov	r4, r0
    1b1a:	b1a0      	cbz	r0, 1b46 <ringbuffer_get+0x32>
    1b1c:	1c08      	adds	r0, r1, #0
    1b1e:	bf18      	it	ne
    1b20:	2001      	movne	r0, #1
    1b22:	2240      	movs	r2, #64	; 0x40
    1b24:	490a      	ldr	r1, [pc, #40]	; (1b50 <ringbuffer_get+0x3c>)
    1b26:	4b0b      	ldr	r3, [pc, #44]	; (1b54 <ringbuffer_get+0x40>)
    1b28:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1b2a:	68a3      	ldr	r3, [r4, #8]
    1b2c:	68e2      	ldr	r2, [r4, #12]
    1b2e:	429a      	cmp	r2, r3
    1b30:	d00b      	beq.n	1b4a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1b32:	6862      	ldr	r2, [r4, #4]
    1b34:	4013      	ands	r3, r2
    1b36:	6822      	ldr	r2, [r4, #0]
    1b38:	5cd3      	ldrb	r3, [r2, r3]
    1b3a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1b3c:	68a3      	ldr	r3, [r4, #8]
    1b3e:	3301      	adds	r3, #1
    1b40:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1b42:	2000      	movs	r0, #0
    1b44:	bd38      	pop	{r3, r4, r5, pc}
    1b46:	2000      	movs	r0, #0
    1b48:	e7eb      	b.n	1b22 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1b4a:	f06f 0009 	mvn.w	r0, #9
}
    1b4e:	bd38      	pop	{r3, r4, r5, pc}
    1b50:	00017544 	.word	0x00017544
    1b54:	00001a5d 	.word	0x00001a5d

00001b58 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1b58:	b538      	push	{r3, r4, r5, lr}
    1b5a:	460d      	mov	r5, r1
	ASSERT(rb);
    1b5c:	4604      	mov	r4, r0
    1b5e:	2251      	movs	r2, #81	; 0x51
    1b60:	490b      	ldr	r1, [pc, #44]	; (1b90 <ringbuffer_put+0x38>)
    1b62:	3000      	adds	r0, #0
    1b64:	bf18      	it	ne
    1b66:	2001      	movne	r0, #1
    1b68:	4b0a      	ldr	r3, [pc, #40]	; (1b94 <ringbuffer_put+0x3c>)
    1b6a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1b6c:	68e3      	ldr	r3, [r4, #12]
    1b6e:	6862      	ldr	r2, [r4, #4]
    1b70:	4013      	ands	r3, r2
    1b72:	6822      	ldr	r2, [r4, #0]
    1b74:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1b76:	68e3      	ldr	r3, [r4, #12]
    1b78:	6861      	ldr	r1, [r4, #4]
    1b7a:	68a2      	ldr	r2, [r4, #8]
    1b7c:	1a9a      	subs	r2, r3, r2
    1b7e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1b80:	bf84      	itt	hi
    1b82:	1a59      	subhi	r1, r3, r1
    1b84:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1b86:	3301      	adds	r3, #1
    1b88:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1b8a:	2000      	movs	r0, #0
    1b8c:	bd38      	pop	{r3, r4, r5, pc}
    1b8e:	bf00      	nop
    1b90:	00017544 	.word	0x00017544
    1b94:	00001a5d 	.word	0x00001a5d

00001b98 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1b98:	b510      	push	{r4, lr}
	ASSERT(rb);
    1b9a:	4604      	mov	r4, r0
    1b9c:	2267      	movs	r2, #103	; 0x67
    1b9e:	4905      	ldr	r1, [pc, #20]	; (1bb4 <ringbuffer_num+0x1c>)
    1ba0:	3000      	adds	r0, #0
    1ba2:	bf18      	it	ne
    1ba4:	2001      	movne	r0, #1
    1ba6:	4b04      	ldr	r3, [pc, #16]	; (1bb8 <ringbuffer_num+0x20>)
    1ba8:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1baa:	68e0      	ldr	r0, [r4, #12]
    1bac:	68a3      	ldr	r3, [r4, #8]
}
    1bae:	1ac0      	subs	r0, r0, r3
    1bb0:	bd10      	pop	{r4, pc}
    1bb2:	bf00      	nop
    1bb4:	00017544 	.word	0x00017544
    1bb8:	00001a5d 	.word	0x00001a5d

00001bbc <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bbc:	0943      	lsrs	r3, r0, #5
    1bbe:	f000 001f 	and.w	r0, r0, #31
    1bc2:	2201      	movs	r2, #1
    1bc4:	fa02 f000 	lsl.w	r0, r2, r0
    1bc8:	3340      	adds	r3, #64	; 0x40
    1bca:	4a02      	ldr	r2, [pc, #8]	; (1bd4 <_irq_set+0x18>)
    1bcc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1bd0:	4770      	bx	lr
    1bd2:	bf00      	nop
    1bd4:	e000e100 	.word	0xe000e100

00001bd8 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    1bd8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1bdc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1be0:	3002      	adds	r0, #2
    1be2:	4b02      	ldr	r3, [pc, #8]	; (1bec <_get_cycles_for_us+0x14>)
    1be4:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1be8:	0840      	lsrs	r0, r0, #1
    1bea:	4770      	bx	lr
    1bec:	aaaaaaab 	.word	0xaaaaaaab

00001bf0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    1bf0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1bf4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1bf8:	3002      	adds	r0, #2
    1bfa:	4b04      	ldr	r3, [pc, #16]	; (1c0c <_get_cycles_for_ms+0x1c>)
    1bfc:	fba3 3000 	umull	r3, r0, r3, r0
    1c00:	0840      	lsrs	r0, r0, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1c06:	fb03 f000 	mul.w	r0, r3, r0
    1c0a:	4770      	bx	lr
    1c0c:	aaaaaaab 	.word	0xaaaaaaab

00001c10 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c10:	4770      	bx	lr
    1c12:	0000      	movs	r0, r0
    1c14:	0000      	movs	r0, r0
	...

00001c18 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1c18:	3901      	subs	r1, #1
    1c1a:	d8fd      	bhi.n	1c18 <_delay_cycles>
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop

00001c20 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1c20:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1c22:	4a09      	ldr	r2, [pc, #36]	; (1c48 <_init_chip+0x28>)
    1c24:	8813      	ldrh	r3, [r2, #0]
    1c26:	b29b      	uxth	r3, r3
    1c28:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    1c2c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1c2e:	4b07      	ldr	r3, [pc, #28]	; (1c4c <_init_chip+0x2c>)
    1c30:	4798      	blx	r3
	_oscctrl_init_sources();
    1c32:	4b07      	ldr	r3, [pc, #28]	; (1c50 <_init_chip+0x30>)
    1c34:	4798      	blx	r3
	_mclk_init();
    1c36:	4b07      	ldr	r3, [pc, #28]	; (1c54 <_init_chip+0x34>)
    1c38:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1c3a:	4b07      	ldr	r3, [pc, #28]	; (1c58 <_init_chip+0x38>)
    1c3c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1c3e:	f640 70ff 	movw	r0, #4095	; 0xfff
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <_init_chip+0x3c>)
    1c44:	4798      	blx	r3
    1c46:	bd08      	pop	{r3, pc}
    1c48:	41004000 	.word	0x41004000
    1c4c:	00001c91 	.word	0x00001c91
    1c50:	00001cb1 	.word	0x00001cb1
    1c54:	00001c85 	.word	0x00001c85
    1c58:	00001cb5 	.word	0x00001cb5
    1c5c:	00001c61 	.word	0x00001c61

00001c60 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c60:	f010 0f01 	tst.w	r0, #1
    1c64:	d008      	beq.n	1c78 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c66:	4a05      	ldr	r2, [pc, #20]	; (1c7c <_gclk_init_generators_by_fref+0x1c>)
    1c68:	4b05      	ldr	r3, [pc, #20]	; (1c80 <_gclk_init_generators_by_fref+0x20>)
    1c6a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c6c:	4619      	mov	r1, r3
    1c6e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c72:	684b      	ldr	r3, [r1, #4]
    1c74:	4213      	tst	r3, r2
    1c76:	d1fc      	bne.n	1c72 <_gclk_init_generators_by_fref+0x12>
    1c78:	4770      	bx	lr
    1c7a:	bf00      	nop
    1c7c:	00010107 	.word	0x00010107
    1c80:	40001c00 	.word	0x40001c00

00001c84 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1c84:	2201      	movs	r2, #1
    1c86:	4b01      	ldr	r3, [pc, #4]	; (1c8c <_mclk_init+0x8>)
    1c88:	715a      	strb	r2, [r3, #5]
    1c8a:	4770      	bx	lr
    1c8c:	40000800 	.word	0x40000800

00001c90 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <_osc32kctrl_init_sources+0x1c>)
    1c92:	f242 328e 	movw	r2, #9102	; 0x238e
    1c96:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1c98:	2200      	movs	r2, #0
    1c9a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1c9c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1c9e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1ca0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1ca4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1ca6:	2201      	movs	r2, #1
    1ca8:	741a      	strb	r2, [r3, #16]
    1caa:	4770      	bx	lr
    1cac:	40001400 	.word	0x40001400

00001cb0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1cb0:	4770      	bx	lr
	...

00001cb4 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1cb4:	4a0e      	ldr	r2, [pc, #56]	; (1cf0 <_oscctrl_init_referenced_generators+0x3c>)
    1cb6:	4b0f      	ldr	r3, [pc, #60]	; (1cf4 <_oscctrl_init_referenced_generators+0x40>)
    1cb8:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cba:	461a      	mov	r2, r3
    1cbc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1cbe:	f013 0f06 	tst.w	r3, #6
    1cc2:	d1fb      	bne.n	1cbc <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1cc4:	4b0b      	ldr	r3, [pc, #44]	; (1cf4 <_oscctrl_init_referenced_generators+0x40>)
    1cc6:	f44f 6202 	mov.w	r2, #2080	; 0x820
    1cca:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1ccc:	2202      	movs	r2, #2
    1cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cd2:	461a      	mov	r2, r3
    1cd4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1cd6:	f013 0f02 	tst.w	r3, #2
    1cda:	d1fb      	bne.n	1cd4 <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1cdc:	4b05      	ldr	r3, [pc, #20]	; (1cf4 <_oscctrl_init_referenced_generators+0x40>)
    1cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1ce0:	f012 0f01 	tst.w	r2, #1
    1ce4:	d103      	bne.n	1cee <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1ce8:	f012 0f02 	tst.w	r2, #2
    1cec:	d0f7      	beq.n	1cde <_oscctrl_init_referenced_generators+0x2a>
    1cee:	4770      	bx	lr
    1cf0:	00010e4d 	.word	0x00010e4d
    1cf4:	40001000 	.word	0x40001000

00001cf8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1cf8:	b500      	push	{lr}
    1cfa:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1cfc:	4b0d      	ldr	r3, [pc, #52]	; (1d34 <RAMECC_Handler+0x3c>)
    1cfe:	789b      	ldrb	r3, [r3, #2]
    1d00:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d02:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d04:	9b01      	ldr	r3, [sp, #4]
    1d06:	f013 0f02 	tst.w	r3, #2
    1d0a:	d006      	beq.n	1d1a <RAMECC_Handler+0x22>
    1d0c:	4b0a      	ldr	r3, [pc, #40]	; (1d38 <RAMECC_Handler+0x40>)
    1d0e:	681b      	ldr	r3, [r3, #0]
    1d10:	b11b      	cbz	r3, 1d1a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d12:	4a08      	ldr	r2, [pc, #32]	; (1d34 <RAMECC_Handler+0x3c>)
    1d14:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d16:	4798      	blx	r3
    1d18:	e009      	b.n	1d2e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1d1a:	9b01      	ldr	r3, [sp, #4]
    1d1c:	f013 0f01 	tst.w	r3, #1
    1d20:	d005      	beq.n	1d2e <RAMECC_Handler+0x36>
    1d22:	4b05      	ldr	r3, [pc, #20]	; (1d38 <RAMECC_Handler+0x40>)
    1d24:	685b      	ldr	r3, [r3, #4]
    1d26:	b113      	cbz	r3, 1d2e <RAMECC_Handler+0x36>
    1d28:	4a02      	ldr	r2, [pc, #8]	; (1d34 <RAMECC_Handler+0x3c>)
    1d2a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d2c:	4798      	blx	r3
	} else {
		return;
	}
}
    1d2e:	b003      	add	sp, #12
    1d30:	f85d fb04 	ldr.w	pc, [sp], #4
    1d34:	41020000 	.word	0x41020000
    1d38:	2000ac84 	.word	0x2000ac84

00001d3c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d3c:	b470      	push	{r4, r5, r6}
    1d3e:	b089      	sub	sp, #36	; 0x24
    1d40:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d42:	466c      	mov	r4, sp
    1d44:	4d0d      	ldr	r5, [pc, #52]	; (1d7c <_sercom_get_hardware_index+0x40>)
    1d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d52:	9b00      	ldr	r3, [sp, #0]
    1d54:	42b3      	cmp	r3, r6
    1d56:	d00d      	beq.n	1d74 <_sercom_get_hardware_index+0x38>
    1d58:	4631      	mov	r1, r6
    1d5a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d5c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d5e:	f853 2b04 	ldr.w	r2, [r3], #4
    1d62:	428a      	cmp	r2, r1
    1d64:	d007      	beq.n	1d76 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d66:	3001      	adds	r0, #1
    1d68:	2808      	cmp	r0, #8
    1d6a:	d1f8      	bne.n	1d5e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1d6c:	2000      	movs	r0, #0
}
    1d6e:	b009      	add	sp, #36	; 0x24
    1d70:	bc70      	pop	{r4, r5, r6}
    1d72:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d74:	2000      	movs	r0, #0
			return i;
    1d76:	b2c0      	uxtb	r0, r0
    1d78:	e7f9      	b.n	1d6e <_sercom_get_hardware_index+0x32>
    1d7a:	bf00      	nop
    1d7c:	00017568 	.word	0x00017568

00001d80 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1d80:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1d82:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1d84:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1d86:	f013 0f01 	tst.w	r3, #1
    1d8a:	d003      	beq.n	1d94 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1d8c:	7da3      	ldrb	r3, [r4, #22]
    1d8e:	f013 0f01 	tst.w	r3, #1
    1d92:	d112      	bne.n	1dba <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1d94:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1d96:	f013 0f02 	tst.w	r3, #2
    1d9a:	d003      	beq.n	1da4 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1d9c:	7da3      	ldrb	r3, [r4, #22]
    1d9e:	f013 0f02 	tst.w	r3, #2
    1da2:	d10f      	bne.n	1dc4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1da4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1da6:	f013 0f04 	tst.w	r3, #4
    1daa:	d015      	beq.n	1dd8 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1dac:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1dae:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1db2:	b163      	cbz	r3, 1dce <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1db4:	23ff      	movs	r3, #255	; 0xff
    1db6:	8363      	strh	r3, [r4, #26]
    1db8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1dba:	2301      	movs	r3, #1
    1dbc:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1dbe:	6803      	ldr	r3, [r0, #0]
    1dc0:	4798      	blx	r3
    1dc2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1dc4:	2302      	movs	r3, #2
    1dc6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1dc8:	6883      	ldr	r3, [r0, #8]
    1dca:	4798      	blx	r3
    1dcc:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1dce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1dd0:	6843      	ldr	r3, [r0, #4]
    1dd2:	b2c9      	uxtb	r1, r1
    1dd4:	4798      	blx	r3
    1dd6:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1dd8:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1dda:	09db      	lsrs	r3, r3, #7
    1ddc:	d100      	bne.n	1de0 <_sercom_usart_interrupt_handler+0x60>
    1dde:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1de0:	2380      	movs	r3, #128	; 0x80
    1de2:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1de4:	68c3      	ldr	r3, [r0, #12]
    1de6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1de8:	8b63      	ldrh	r3, [r4, #26]
    1dea:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1dec:	8363      	strh	r3, [r4, #26]
    1dee:	e7f6      	b.n	1dde <_sercom_usart_interrupt_handler+0x5e>

00001df0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1df0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1df2:	4b03      	ldr	r3, [pc, #12]	; (1e00 <_sercom_get_irq_num+0x10>)
    1df4:	4798      	blx	r3
    1df6:	0080      	lsls	r0, r0, #2
    1df8:	302e      	adds	r0, #46	; 0x2e
}
    1dfa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1dfe:	bd08      	pop	{r3, pc}
    1e00:	00001d3d 	.word	0x00001d3d

00001e04 <_usart_init>:
{
    1e04:	b510      	push	{r4, lr}
    1e06:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e08:	4b21      	ldr	r3, [pc, #132]	; (1e90 <_usart_init+0x8c>)
    1e0a:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1e0c:	2802      	cmp	r0, #2
    1e0e:	d005      	beq.n	1e1c <_usart_init+0x18>
	ASSERT(false);
    1e10:	f240 226b 	movw	r2, #619	; 0x26b
    1e14:	491f      	ldr	r1, [pc, #124]	; (1e94 <_usart_init+0x90>)
    1e16:	2000      	movs	r0, #0
    1e18:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <_usart_init+0x94>)
    1e1a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e1c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e1e:	f013 0f01 	tst.w	r3, #1
    1e22:	d119      	bne.n	1e58 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e24:	69e3      	ldr	r3, [r4, #28]
    1e26:	f013 0f03 	tst.w	r3, #3
    1e2a:	d1fb      	bne.n	1e24 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e2c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e2e:	f013 0f02 	tst.w	r3, #2
    1e32:	d00b      	beq.n	1e4c <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e3c:	69e3      	ldr	r3, [r4, #28]
    1e3e:	f013 0f03 	tst.w	r3, #3
    1e42:	d1fb      	bne.n	1e3c <_usart_init+0x38>
    1e44:	69e3      	ldr	r3, [r4, #28]
    1e46:	f013 0f02 	tst.w	r3, #2
    1e4a:	d1fb      	bne.n	1e44 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e4c:	2305      	movs	r3, #5
    1e4e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e50:	69e3      	ldr	r3, [r4, #28]
    1e52:	f013 0f03 	tst.w	r3, #3
    1e56:	d1fb      	bne.n	1e50 <_usart_init+0x4c>
    1e58:	69e3      	ldr	r3, [r4, #28]
    1e5a:	f013 0f01 	tst.w	r3, #1
    1e5e:	d1fb      	bne.n	1e58 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e60:	4b0e      	ldr	r3, [pc, #56]	; (1e9c <_usart_init+0x98>)
    1e62:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e64:	69e3      	ldr	r3, [r4, #28]
    1e66:	f013 0f03 	tst.w	r3, #3
    1e6a:	d1fb      	bne.n	1e64 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1e6c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1e70:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e72:	69e3      	ldr	r3, [r4, #28]
    1e74:	f013 0f1f 	tst.w	r3, #31
    1e78:	d1fb      	bne.n	1e72 <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <_usart_init+0x9c>)
    1e7c:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1e7e:	f64f 4311 	movw	r3, #64529	; 0xfc11
    1e82:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1e84:	2000      	movs	r0, #0
    1e86:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1e88:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1e8c:	bd10      	pop	{r4, pc}
    1e8e:	bf00      	nop
    1e90:	00001d3d 	.word	0x00001d3d
    1e94:	000175a0 	.word	0x000175a0
    1e98:	00001a5d 	.word	0x00001a5d
    1e9c:	40100004 	.word	0x40100004
    1ea0:	00700002 	.word	0x00700002

00001ea4 <_get_i2cm_index>:
{
    1ea4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1ea6:	4b07      	ldr	r3, [pc, #28]	; (1ec4 <_get_i2cm_index+0x20>)
    1ea8:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1eaa:	2803      	cmp	r0, #3
    1eac:	d008      	beq.n	1ec0 <_get_i2cm_index+0x1c>
	ASSERT(false);
    1eae:	f240 32ce 	movw	r2, #974	; 0x3ce
    1eb2:	4905      	ldr	r1, [pc, #20]	; (1ec8 <_get_i2cm_index+0x24>)
    1eb4:	2000      	movs	r0, #0
    1eb6:	4b05      	ldr	r3, [pc, #20]	; (1ecc <_get_i2cm_index+0x28>)
    1eb8:	4798      	blx	r3
	return -1;
    1eba:	f04f 30ff 	mov.w	r0, #4294967295
}
    1ebe:	bd08      	pop	{r3, pc}
			return i;
    1ec0:	2000      	movs	r0, #0
    1ec2:	bd08      	pop	{r3, pc}
    1ec4:	00001d3d 	.word	0x00001d3d
    1ec8:	000175a0 	.word	0x000175a0
    1ecc:	00001a5d 	.word	0x00001a5d

00001ed0 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1ed0:	b538      	push	{r3, r4, r5, lr}
    1ed2:	4605      	mov	r5, r0
    1ed4:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1ed6:	4608      	mov	r0, r1
    1ed8:	4b32      	ldr	r3, [pc, #200]	; (1fa4 <_i2c_m_sync_init_impl+0xd4>)
    1eda:	4798      	blx	r3
    1edc:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1ede:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1ee0:	f013 0f01 	tst.w	r3, #1
    1ee4:	d122      	bne.n	1f2c <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1ee6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1eea:	4a2f      	ldr	r2, [pc, #188]	; (1fa8 <_i2c_m_sync_init_impl+0xd8>)
    1eec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1ef2:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ef6:	69e3      	ldr	r3, [r4, #28]
    1ef8:	f013 0f03 	tst.w	r3, #3
    1efc:	d1fb      	bne.n	1ef6 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1efe:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1f00:	f013 0f02 	tst.w	r3, #2
    1f04:	d00b      	beq.n	1f1e <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1f06:	6823      	ldr	r3, [r4, #0]
    1f08:	f023 0302 	bic.w	r3, r3, #2
    1f0c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f0e:	69e3      	ldr	r3, [r4, #28]
    1f10:	f013 0f03 	tst.w	r3, #3
    1f14:	d1fb      	bne.n	1f0e <_i2c_m_sync_init_impl+0x3e>
    1f16:	69e3      	ldr	r3, [r4, #28]
    1f18:	f013 0f02 	tst.w	r3, #2
    1f1c:	d1fb      	bne.n	1f16 <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1f1e:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f22:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f24:	69e3      	ldr	r3, [r4, #28]
    1f26:	f013 0f03 	tst.w	r3, #3
    1f2a:	d1fb      	bne.n	1f24 <_i2c_m_sync_init_impl+0x54>
    1f2c:	69e3      	ldr	r3, [r4, #28]
    1f2e:	f013 0f01 	tst.w	r3, #1
    1f32:	d1fb      	bne.n	1f2c <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1f34:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f38:	4a1b      	ldr	r2, [pc, #108]	; (1fa8 <_i2c_m_sync_init_impl+0xd8>)
    1f3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f40:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f42:	69e3      	ldr	r3, [r4, #28]
    1f44:	f013 0f03 	tst.w	r3, #3
    1f48:	d1fb      	bne.n	1f42 <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1f4a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f4e:	4916      	ldr	r1, [pc, #88]	; (1fa8 <_i2c_m_sync_init_impl+0xd8>)
    1f50:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1f56:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f58:	69e3      	ldr	r3, [r4, #28]
    1f5a:	f013 0f04 	tst.w	r3, #4
    1f5e:	d1fb      	bne.n	1f58 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1f60:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f64:	4910      	ldr	r1, [pc, #64]	; (1fa8 <_i2c_m_sync_init_impl+0xd8>)
    1f66:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1f6c:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1f6e:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1f72:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1f74:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1f7a:	2b01      	cmp	r3, #1
    1f7c:	bf94      	ite	ls
    1f7e:	2300      	movls	r3, #0
    1f80:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1f82:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1f86:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f88:	69e3      	ldr	r3, [r4, #28]
    1f8a:	f013 0f04 	tst.w	r3, #4
    1f8e:	d1fb      	bne.n	1f88 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1f90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <_i2c_m_sync_init_impl+0xd8>)
    1f96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1f9a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1f9c:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1f9e:	2000      	movs	r0, #0
    1fa0:	bd38      	pop	{r3, r4, r5, pc}
    1fa2:	bf00      	nop
    1fa4:	00001ea5 	.word	0x00001ea5
    1fa8:	00017568 	.word	0x00017568

00001fac <_usart_async_init>:
{
    1fac:	b570      	push	{r4, r5, r6, lr}
    1fae:	460d      	mov	r5, r1
	ASSERT(device);
    1fb0:	4606      	mov	r6, r0
    1fb2:	22cb      	movs	r2, #203	; 0xcb
    1fb4:	4918      	ldr	r1, [pc, #96]	; (2018 <_usart_async_init+0x6c>)
    1fb6:	3000      	adds	r0, #0
    1fb8:	bf18      	it	ne
    1fba:	2001      	movne	r0, #1
    1fbc:	4b17      	ldr	r3, [pc, #92]	; (201c <_usart_async_init+0x70>)
    1fbe:	4798      	blx	r3
	init_status = _usart_init(hw);
    1fc0:	4628      	mov	r0, r5
    1fc2:	4b17      	ldr	r3, [pc, #92]	; (2020 <_usart_async_init+0x74>)
    1fc4:	4798      	blx	r3
	if (init_status) {
    1fc6:	4604      	mov	r4, r0
    1fc8:	b108      	cbz	r0, 1fce <_usart_async_init+0x22>
}
    1fca:	4620      	mov	r0, r4
    1fcc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1fce:	61b5      	str	r5, [r6, #24]
	if (hw == SERCOM2) {
    1fd0:	4b14      	ldr	r3, [pc, #80]	; (2024 <_usart_async_init+0x78>)
    1fd2:	429d      	cmp	r5, r3
		_sercom2_dev = (struct _usart_async_device *)dev;
    1fd4:	bf04      	itt	eq
    1fd6:	4b14      	ldreq	r3, [pc, #80]	; (2028 <_usart_async_init+0x7c>)
    1fd8:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    1fda:	4628      	mov	r0, r5
    1fdc:	4b13      	ldr	r3, [pc, #76]	; (202c <_usart_async_init+0x80>)
    1fde:	4798      	blx	r3
    1fe0:	1d01      	adds	r1, r0, #4
    1fe2:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1fe4:	2501      	movs	r5, #1
    1fe6:	f000 021f 	and.w	r2, r0, #31
    1fea:	fa05 f202 	lsl.w	r2, r5, r2
    1fee:	0943      	lsrs	r3, r0, #5
    1ff0:	009b      	lsls	r3, r3, #2
    1ff2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1ff6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2002:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2006:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    200a:	601a      	str	r2, [r3, #0]
		irq++;
    200c:	3001      	adds	r0, #1
    200e:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2010:	4281      	cmp	r1, r0
    2012:	d1e8      	bne.n	1fe6 <_usart_async_init+0x3a>
    2014:	e7d9      	b.n	1fca <_usart_async_init+0x1e>
    2016:	bf00      	nop
    2018:	000175a0 	.word	0x000175a0
    201c:	00001a5d 	.word	0x00001a5d
    2020:	00001e05 	.word	0x00001e05
    2024:	41012000 	.word	0x41012000
    2028:	200000c8 	.word	0x200000c8
    202c:	00001df1 	.word	0x00001df1

00002030 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2030:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2032:	6813      	ldr	r3, [r2, #0]
    2034:	f043 0302 	orr.w	r3, r3, #2
    2038:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    203a:	69d3      	ldr	r3, [r2, #28]
    203c:	f013 0f03 	tst.w	r3, #3
    2040:	d1fb      	bne.n	203a <_usart_async_enable+0xa>
}
    2042:	4770      	bx	lr

00002044 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2044:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2046:	6299      	str	r1, [r3, #40]	; 0x28
    2048:	4770      	bx	lr

0000204a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    204a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    204c:	2201      	movs	r2, #1
    204e:	759a      	strb	r2, [r3, #22]
    2050:	4770      	bx	lr

00002052 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2052:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2054:	2202      	movs	r2, #2
    2056:	759a      	strb	r2, [r3, #22]
    2058:	4770      	bx	lr
	...

0000205c <_i2c_m_sync_init>:
{
    205c:	b538      	push	{r3, r4, r5, lr}
    205e:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2060:	4604      	mov	r4, r0
    2062:	f44f 62a8 	mov.w	r2, #1344	; 0x540
    2066:	4906      	ldr	r1, [pc, #24]	; (2080 <_i2c_m_sync_init+0x24>)
    2068:	3000      	adds	r0, #0
    206a:	bf18      	it	ne
    206c:	2001      	movne	r0, #1
    206e:	4b05      	ldr	r3, [pc, #20]	; (2084 <_i2c_m_sync_init+0x28>)
    2070:	4798      	blx	r3
	i2c_dev->hw = hw;
    2072:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2074:	4629      	mov	r1, r5
    2076:	4620      	mov	r0, r4
    2078:	4b03      	ldr	r3, [pc, #12]	; (2088 <_i2c_m_sync_init+0x2c>)
    207a:	4798      	blx	r3
}
    207c:	bd38      	pop	{r3, r4, r5, pc}
    207e:	bf00      	nop
    2080:	000175a0 	.word	0x000175a0
    2084:	00001a5d 	.word	0x00001a5d
    2088:	00001ed1 	.word	0x00001ed1

0000208c <_i2c_m_sync_transfer>:
{
    208c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2090:	4605      	mov	r5, r0
    2092:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    2094:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    2096:	f110 0800 	adds.w	r8, r0, #0
    209a:	bf18      	it	ne
    209c:	f04f 0801 	movne.w	r8, #1
    20a0:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2368 <_i2c_m_sync_transfer+0x2dc>
    20a4:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
    20a8:	4649      	mov	r1, r9
    20aa:	4640      	mov	r0, r8
    20ac:	4fad      	ldr	r7, [pc, #692]	; (2364 <_i2c_m_sync_transfer+0x2d8>)
    20ae:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    20b0:	6928      	ldr	r0, [r5, #16]
    20b2:	f240 52f9 	movw	r2, #1529	; 0x5f9
    20b6:	4649      	mov	r1, r9
    20b8:	3000      	adds	r0, #0
    20ba:	bf18      	it	ne
    20bc:	2001      	movne	r0, #1
    20be:	47b8      	blx	r7
	ASSERT(msg);
    20c0:	f240 52fa 	movw	r2, #1530	; 0x5fa
    20c4:	4649      	mov	r1, r9
    20c6:	1c30      	adds	r0, r6, #0
    20c8:	bf18      	it	ne
    20ca:	2001      	movne	r0, #1
    20cc:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    20ce:	886b      	ldrh	r3, [r5, #2]
    20d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    20d4:	f040 8218 	bne.w	2508 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    20d8:	8873      	ldrh	r3, [r6, #2]
    20da:	b29b      	uxth	r3, r3
    20dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    20e0:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    20e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    20e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    20ea:	6863      	ldr	r3, [r4, #4]
    20ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    20f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20f2:	69e3      	ldr	r3, [r4, #28]
    20f4:	f013 0f04 	tst.w	r3, #4
    20f8:	d1fb      	bne.n	20f2 <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    20fa:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    20fc:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    2100:	f240 52cd 	movw	r2, #1485	; 0x5cd
    2104:	4998      	ldr	r1, [pc, #608]	; (2368 <_i2c_m_sync_transfer+0x2dc>)
    2106:	4640      	mov	r0, r8
    2108:	4b96      	ldr	r3, [pc, #600]	; (2364 <_i2c_m_sync_transfer+0x2d8>)
    210a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    210c:	686b      	ldr	r3, [r5, #4]
    210e:	2b01      	cmp	r3, #1
    2110:	d05e      	beq.n	21d0 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2118:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    211a:	69fb      	ldr	r3, [r7, #28]
    211c:	f013 0f04 	tst.w	r3, #4
    2120:	d1fb      	bne.n	211a <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    2122:	882b      	ldrh	r3, [r5, #0]
    2124:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2128:	d05e      	beq.n	21e8 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    212a:	886a      	ldrh	r2, [r5, #2]
    212c:	f012 0f01 	tst.w	r2, #1
    2130:	d004      	beq.n	213c <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    2132:	886a      	ldrh	r2, [r5, #2]
    2134:	b292      	uxth	r2, r2
    2136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    213a:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    213c:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2140:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    2144:	69fb      	ldr	r3, [r7, #28]
    2146:	f013 0f04 	tst.w	r3, #4
    214a:	d1fb      	bne.n	2144 <_i2c_m_sync_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2156:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2158:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    215a:	69fb      	ldr	r3, [r7, #28]
    215c:	f013 0f04 	tst.w	r3, #4
    2160:	d1fb      	bne.n	215a <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    2162:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    2164:	7e0b      	ldrb	r3, [r1, #24]
    2166:	b2db      	uxtb	r3, r3
    2168:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    216c:	f013 0f03 	tst.w	r3, #3
    2170:	d103      	bne.n	217a <_i2c_m_sync_transfer+0xee>
    2172:	7e0b      	ldrb	r3, [r1, #24]
    2174:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    2176:	3a01      	subs	r2, #1
    2178:	d1f8      	bne.n	216c <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    217a:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    217c:	69fa      	ldr	r2, [r7, #28]
    217e:	f012 0f04 	tst.w	r2, #4
    2182:	d1fb      	bne.n	217c <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2184:	8b7a      	ldrh	r2, [r7, #26]
    2186:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    2188:	f013 0f01 	tst.w	r3, #1
    218c:	f000 80a3 	beq.w	22d6 <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2190:	f012 0f02 	tst.w	r2, #2
    2194:	d03c      	beq.n	2210 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2196:	2301      	movs	r3, #1
    2198:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    219a:	886b      	ldrh	r3, [r5, #2]
    219c:	b29b      	uxth	r3, r3
    219e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    21a2:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    21a4:	886b      	ldrh	r3, [r5, #2]
    21a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21aa:	041b      	lsls	r3, r3, #16
    21ac:	0c1b      	lsrs	r3, r3, #16
    21ae:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    21b0:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    21b4:	2a00      	cmp	r2, #0
    21b6:	bf14      	ite	ne
    21b8:	f06f 0004 	mvnne.w	r0, #4
    21bc:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    21c0:	886b      	ldrh	r3, [r5, #2]
    21c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21c6:	041b      	lsls	r3, r3, #16
    21c8:	0c1b      	lsrs	r3, r3, #16
    21ca:	806b      	strh	r3, [r5, #2]
		return ret;
    21cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    21d0:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    21d4:	d09d      	beq.n	2112 <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    21d6:	687b      	ldr	r3, [r7, #4]
    21d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    21dc:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21de:	69fb      	ldr	r3, [r7, #28]
    21e0:	f013 0f04 	tst.w	r3, #4
    21e4:	d1fb      	bne.n	21de <_i2c_m_sync_transfer+0x152>
    21e6:	e79c      	b.n	2122 <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    21e8:	8869      	ldrh	r1, [r5, #2]
    21ea:	005a      	lsls	r2, r3, #1
    21ec:	b2d2      	uxtb	r2, r2
    21ee:	f001 0301 	and.w	r3, r1, #1
    21f2:	431a      	orrs	r2, r3
    21f4:	69fb      	ldr	r3, [r7, #28]
    21f6:	f013 0f04 	tst.w	r3, #4
    21fa:	d1fb      	bne.n	21f4 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    21fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    21fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    2202:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2204:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2206:	69fb      	ldr	r3, [r7, #28]
    2208:	f013 0f04 	tst.w	r3, #4
    220c:	d1fb      	bne.n	2206 <_i2c_m_sync_transfer+0x17a>
    220e:	e7a8      	b.n	2162 <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2210:	f012 0f04 	tst.w	r2, #4
    2214:	d11d      	bne.n	2252 <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    2216:	886b      	ldrh	r3, [r5, #2]
    2218:	f413 6f80 	tst.w	r3, #1024	; 0x400
    221c:	d037      	beq.n	228e <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    221e:	882b      	ldrh	r3, [r5, #0]
    2220:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2222:	f003 0206 	and.w	r2, r3, #6
    2226:	69fb      	ldr	r3, [r7, #28]
    2228:	f013 0f04 	tst.w	r3, #4
    222c:	d1fb      	bne.n	2226 <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    2234:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2238:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    223a:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    223c:	69fb      	ldr	r3, [r7, #28]
    223e:	f013 0f04 	tst.w	r3, #4
    2242:	d1fb      	bne.n	223c <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    2244:	886b      	ldrh	r3, [r5, #2]
    2246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    224a:	041b      	lsls	r3, r3, #16
    224c:	0c1b      	lsrs	r3, r3, #16
    224e:	806b      	strh	r3, [r5, #2]
    2250:	e069      	b.n	2326 <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    2252:	686b      	ldr	r3, [r5, #4]
    2254:	2b00      	cmp	r3, #0
    2256:	dd04      	ble.n	2262 <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    2258:	886b      	ldrh	r3, [r5, #2]
    225a:	b29b      	uxth	r3, r3
    225c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2260:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    2262:	886b      	ldrh	r3, [r5, #2]
    2264:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2268:	d108      	bne.n	227c <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    226a:	886b      	ldrh	r3, [r5, #2]
    226c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2270:	041b      	lsls	r3, r3, #16
    2272:	0c1b      	lsrs	r3, r3, #16
    2274:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    2276:	f06f 0001 	mvn.w	r0, #1
    227a:	e7a1      	b.n	21c0 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    227c:	687b      	ldr	r3, [r7, #4]
    227e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2282:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2284:	69fb      	ldr	r3, [r7, #28]
    2286:	f013 0f04 	tst.w	r3, #4
    228a:	d1fb      	bne.n	2284 <_i2c_m_sync_transfer+0x1f8>
    228c:	e7ed      	b.n	226a <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    228e:	686b      	ldr	r3, [r5, #4]
    2290:	b99b      	cbnz	r3, 22ba <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    2292:	886b      	ldrh	r3, [r5, #2]
    2294:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2298:	d106      	bne.n	22a8 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    229a:	886b      	ldrh	r3, [r5, #2]
    229c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22a0:	041b      	lsls	r3, r3, #16
    22a2:	0c1b      	lsrs	r3, r3, #16
    22a4:	806b      	strh	r3, [r5, #2]
    22a6:	e03e      	b.n	2326 <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22ae:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22b0:	69fb      	ldr	r3, [r7, #28]
    22b2:	f013 0f04 	tst.w	r3, #4
    22b6:	d1fb      	bne.n	22b0 <_i2c_m_sync_transfer+0x224>
    22b8:	e7ef      	b.n	229a <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    22ba:	68ab      	ldr	r3, [r5, #8]
    22bc:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    22be:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22c0:	69fb      	ldr	r3, [r7, #28]
    22c2:	f013 0f04 	tst.w	r3, #4
    22c6:	d1fb      	bne.n	22c0 <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    22c8:	68ab      	ldr	r3, [r5, #8]
    22ca:	3301      	adds	r3, #1
    22cc:	60ab      	str	r3, [r5, #8]
				msg->len--;
    22ce:	686b      	ldr	r3, [r5, #4]
    22d0:	3b01      	subs	r3, #1
    22d2:	606b      	str	r3, [r5, #4]
    22d4:	e027      	b.n	2326 <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    22d6:	f013 0f02 	tst.w	r3, #2
    22da:	d024      	beq.n	2326 <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    22dc:	686b      	ldr	r3, [r5, #4]
    22de:	2b00      	cmp	r3, #0
    22e0:	d03a      	beq.n	2358 <_i2c_m_sync_transfer+0x2cc>
    22e2:	f012 0f04 	tst.w	r2, #4
    22e6:	d137      	bne.n	2358 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    22e8:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    22ec:	3b01      	subs	r3, #1
    22ee:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    22f0:	2b00      	cmp	r3, #0
    22f2:	f040 810d 	bne.w	2510 <_i2c_m_sync_transfer+0x484>
    22f6:	2900      	cmp	r1, #0
    22f8:	f000 8110 	beq.w	251c <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    22fc:	886b      	ldrh	r3, [r5, #2]
    22fe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2302:	d118      	bne.n	2336 <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    2304:	886b      	ldrh	r3, [r5, #2]
    2306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    230a:	041b      	lsls	r3, r3, #16
    230c:	0c1b      	lsrs	r3, r3, #16
    230e:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2310:	68aa      	ldr	r2, [r5, #8]
    2312:	1c53      	adds	r3, r2, #1
    2314:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2316:	69fb      	ldr	r3, [r7, #28]
    2318:	f013 0f04 	tst.w	r3, #4
    231c:	d1fb      	bne.n	2316 <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2320:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2322:	2302      	movs	r3, #2
    2324:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    2326:	2200      	movs	r2, #0
	return I2C_OK;
    2328:	4610      	mov	r0, r2
    232a:	2702      	movs	r7, #2
			return I2C_NACK;
    232c:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2330:	f04f 0e01 	mov.w	lr, #1
    2334:	e0b0      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    233c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    233e:	69fb      	ldr	r3, [r7, #28]
    2340:	f013 0f04 	tst.w	r3, #4
    2344:	d1fb      	bne.n	233e <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2346:	687b      	ldr	r3, [r7, #4]
    2348:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    234c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    234e:	69fb      	ldr	r3, [r7, #28]
    2350:	f013 0f04 	tst.w	r3, #4
    2354:	d1fb      	bne.n	234e <_i2c_m_sync_transfer+0x2c2>
    2356:	e7d5      	b.n	2304 <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2358:	2302      	movs	r3, #2
    235a:	763b      	strb	r3, [r7, #24]
    235c:	f06f 0001 	mvn.w	r0, #1
    2360:	e72e      	b.n	21c0 <_i2c_m_sync_transfer+0x134>
    2362:	bf00      	nop
    2364:	00001a5d 	.word	0x00001a5d
    2368:	000175a0 	.word	0x000175a0
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    236c:	6863      	ldr	r3, [r4, #4]
    236e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2372:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2374:	69e3      	ldr	r3, [r4, #28]
    2376:	f013 0f04 	tst.w	r3, #4
    237a:	d1fb      	bne.n	2374 <_i2c_m_sync_transfer+0x2e8>
    237c:	e0a1      	b.n	24c2 <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    237e:	f012 0f04 	tst.w	r2, #4
    2382:	d11e      	bne.n	23c2 <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    2384:	886b      	ldrh	r3, [r5, #2]
    2386:	f413 6f80 	tst.w	r3, #1024	; 0x400
    238a:	d037      	beq.n	23fc <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    238c:	882b      	ldrh	r3, [r5, #0]
    238e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2390:	f003 0206 	and.w	r2, r3, #6
    2394:	69e3      	ldr	r3, [r4, #28]
    2396:	f013 0f04 	tst.w	r3, #4
    239a:	d1fb      	bne.n	2394 <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    239c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    23a2:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    23a6:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    23a8:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23aa:	69e3      	ldr	r3, [r4, #28]
    23ac:	f013 0f04 	tst.w	r3, #4
    23b0:	d1fb      	bne.n	23aa <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    23b2:	886b      	ldrh	r3, [r5, #2]
    23b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    23b8:	041b      	lsls	r3, r3, #16
    23ba:	0c1b      	lsrs	r3, r3, #16
    23bc:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    23be:	4602      	mov	r2, r0
    23c0:	e06a      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    23c2:	686b      	ldr	r3, [r5, #4]
    23c4:	2b00      	cmp	r3, #0
    23c6:	dd04      	ble.n	23d2 <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    23c8:	886b      	ldrh	r3, [r5, #2]
    23ca:	b29b      	uxth	r3, r3
    23cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    23d0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    23d2:	886b      	ldrh	r3, [r5, #2]
    23d4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    23d8:	d107      	bne.n	23ea <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    23da:	886b      	ldrh	r3, [r5, #2]
    23dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    23e0:	041b      	lsls	r3, r3, #16
    23e2:	0c1b      	lsrs	r3, r3, #16
    23e4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    23e6:	4662      	mov	r2, ip
    23e8:	e056      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    23ea:	6863      	ldr	r3, [r4, #4]
    23ec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    23f0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23f2:	69e3      	ldr	r3, [r4, #28]
    23f4:	f013 0f04 	tst.w	r3, #4
    23f8:	d1fb      	bne.n	23f2 <_i2c_m_sync_transfer+0x366>
    23fa:	e7ee      	b.n	23da <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    23fc:	686b      	ldr	r3, [r5, #4]
    23fe:	b9a3      	cbnz	r3, 242a <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    2400:	886b      	ldrh	r3, [r5, #2]
    2402:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2406:	d107      	bne.n	2418 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    2408:	886b      	ldrh	r3, [r5, #2]
    240a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    240e:	041b      	lsls	r3, r3, #16
    2410:	0c1b      	lsrs	r3, r3, #16
    2412:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    2414:	4602      	mov	r2, r0
    2416:	e03f      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2418:	6863      	ldr	r3, [r4, #4]
    241a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    241e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2420:	69e3      	ldr	r3, [r4, #28]
    2422:	f013 0f04 	tst.w	r3, #4
    2426:	d1fb      	bne.n	2420 <_i2c_m_sync_transfer+0x394>
    2428:	e7ee      	b.n	2408 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    242a:	68ab      	ldr	r3, [r5, #8]
    242c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    242e:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2430:	69e3      	ldr	r3, [r4, #28]
    2432:	f013 0f04 	tst.w	r3, #4
    2436:	d1fb      	bne.n	2430 <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    2438:	68ab      	ldr	r3, [r5, #8]
    243a:	3301      	adds	r3, #1
    243c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    243e:	686b      	ldr	r3, [r5, #4]
    2440:	3b01      	subs	r3, #1
    2442:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    2444:	4602      	mov	r2, r0
    2446:	e027      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    2448:	f013 0f02 	tst.w	r3, #2
    244c:	d057      	beq.n	24fe <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    244e:	686b      	ldr	r3, [r5, #4]
    2450:	2b00      	cmp	r3, #0
    2452:	d051      	beq.n	24f8 <_i2c_m_sync_transfer+0x46c>
    2454:	f012 0f04 	tst.w	r2, #4
    2458:	d14e      	bne.n	24f8 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    245a:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    245e:	3b01      	subs	r3, #1
    2460:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2462:	2b00      	cmp	r3, #0
    2464:	f040 808c 	bne.w	2580 <_i2c_m_sync_transfer+0x4f4>
    2468:	2900      	cmp	r1, #0
    246a:	f000 808f 	beq.w	258c <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    246e:	886b      	ldrh	r3, [r5, #2]
    2470:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2474:	d12f      	bne.n	24d6 <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    2476:	886b      	ldrh	r3, [r5, #2]
    2478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    247c:	041b      	lsls	r3, r3, #16
    247e:	0c1b      	lsrs	r3, r3, #16
    2480:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2482:	68aa      	ldr	r2, [r5, #8]
    2484:	1c53      	adds	r3, r2, #1
    2486:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2488:	69e3      	ldr	r3, [r4, #28]
    248a:	f013 0f04 	tst.w	r3, #4
    248e:	d1fb      	bne.n	2488 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2490:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2492:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2494:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    2496:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2498:	886b      	ldrh	r3, [r5, #2]
    249a:	f413 7f80 	tst.w	r3, #256	; 0x100
    249e:	d030      	beq.n	2502 <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    24a0:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    24a2:	7e0b      	ldrb	r3, [r1, #24]
    24a4:	b2db      	uxtb	r3, r3
    24a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    24aa:	f013 0f03 	tst.w	r3, #3
    24ae:	d142      	bne.n	2536 <_i2c_m_sync_transfer+0x4aa>
    24b0:	7e0b      	ldrb	r3, [r1, #24]
    24b2:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    24b4:	3a01      	subs	r2, #1
    24b6:	d1f8      	bne.n	24aa <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    24b8:	8873      	ldrh	r3, [r6, #2]
    24ba:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24be:	f47f af55 	bne.w	236c <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    24c2:	886b      	ldrh	r3, [r5, #2]
    24c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24c8:	041b      	lsls	r3, r3, #16
    24ca:	0c1b      	lsrs	r3, r3, #16
    24cc:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    24ce:	f06f 0004 	mvn.w	r0, #4
			return ret;
    24d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    24d6:	6863      	ldr	r3, [r4, #4]
    24d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24dc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24de:	69e3      	ldr	r3, [r4, #28]
    24e0:	f013 0f04 	tst.w	r3, #4
    24e4:	d1fb      	bne.n	24de <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    24e6:	6863      	ldr	r3, [r4, #4]
    24e8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    24ec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24ee:	69e3      	ldr	r3, [r4, #28]
    24f0:	f013 0f04 	tst.w	r3, #4
    24f4:	d1fb      	bne.n	24ee <_i2c_m_sync_transfer+0x462>
    24f6:	e7be      	b.n	2476 <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    24f8:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    24fa:	4662      	mov	r2, ip
    24fc:	e7cc      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    24fe:	4602      	mov	r2, r0
    2500:	e7ca      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
    2502:	4610      	mov	r0, r2
    2504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    2508:	f06f 0005 	mvn.w	r0, #5
    250c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2510:	2b01      	cmp	r3, #1
    2512:	f47f aefd 	bne.w	2310 <_i2c_m_sync_transfer+0x284>
    2516:	2900      	cmp	r1, #0
    2518:	f43f aefa 	beq.w	2310 <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    251c:	687b      	ldr	r3, [r7, #4]
    251e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2522:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2524:	69fb      	ldr	r3, [r7, #28]
    2526:	f013 0f04 	tst.w	r3, #4
    252a:	d1fb      	bne.n	2524 <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    252c:	686b      	ldr	r3, [r5, #4]
    252e:	2b00      	cmp	r3, #0
    2530:	f43f aee4 	beq.w	22fc <_i2c_m_sync_transfer+0x270>
    2534:	e6ec      	b.n	2310 <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2536:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2538:	69e2      	ldr	r2, [r4, #28]
    253a:	f012 0f04 	tst.w	r2, #4
    253e:	d1fb      	bne.n	2538 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2540:	8b62      	ldrh	r2, [r4, #26]
    2542:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    2544:	f013 0f01 	tst.w	r3, #1
    2548:	f43f af7e 	beq.w	2448 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    254c:	f012 0f02 	tst.w	r2, #2
    2550:	f43f af15 	beq.w	237e <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2554:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2558:	886b      	ldrh	r3, [r5, #2]
    255a:	b29b      	uxth	r3, r3
    255c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2560:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    2562:	886b      	ldrh	r3, [r5, #2]
    2564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2568:	041b      	lsls	r3, r3, #16
    256a:	0c1b      	lsrs	r3, r3, #16
    256c:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    256e:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    2572:	2a00      	cmp	r2, #0
    2574:	bf14      	ite	ne
    2576:	f06f 0204 	mvnne.w	r2, #4
    257a:	f06f 0203 	mvneq.w	r2, #3
    257e:	e78b      	b.n	2498 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2580:	2b01      	cmp	r3, #1
    2582:	f47f af7e 	bne.w	2482 <_i2c_m_sync_transfer+0x3f6>
    2586:	2900      	cmp	r1, #0
    2588:	f43f af7b 	beq.w	2482 <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    258c:	6863      	ldr	r3, [r4, #4]
    258e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2592:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2594:	69e3      	ldr	r3, [r4, #28]
    2596:	f013 0f04 	tst.w	r3, #4
    259a:	d1fb      	bne.n	2594 <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    259c:	686b      	ldr	r3, [r5, #4]
    259e:	2b00      	cmp	r3, #0
    25a0:	f43f af65 	beq.w	246e <_i2c_m_sync_transfer+0x3e2>
    25a4:	e76d      	b.n	2482 <_i2c_m_sync_transfer+0x3f6>
    25a6:	bf00      	nop

000025a8 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    25a8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25aa:	4b02      	ldr	r3, [pc, #8]	; (25b4 <SERCOM2_0_Handler+0xc>)
    25ac:	6818      	ldr	r0, [r3, #0]
    25ae:	4b02      	ldr	r3, [pc, #8]	; (25b8 <SERCOM2_0_Handler+0x10>)
    25b0:	4798      	blx	r3
    25b2:	bd08      	pop	{r3, pc}
    25b4:	200000c8 	.word	0x200000c8
    25b8:	00001d81 	.word	0x00001d81

000025bc <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    25bc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25be:	4b02      	ldr	r3, [pc, #8]	; (25c8 <SERCOM2_1_Handler+0xc>)
    25c0:	6818      	ldr	r0, [r3, #0]
    25c2:	4b02      	ldr	r3, [pc, #8]	; (25cc <SERCOM2_1_Handler+0x10>)
    25c4:	4798      	blx	r3
    25c6:	bd08      	pop	{r3, pc}
    25c8:	200000c8 	.word	0x200000c8
    25cc:	00001d81 	.word	0x00001d81

000025d0 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    25d0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25d2:	4b02      	ldr	r3, [pc, #8]	; (25dc <SERCOM2_2_Handler+0xc>)
    25d4:	6818      	ldr	r0, [r3, #0]
    25d6:	4b02      	ldr	r3, [pc, #8]	; (25e0 <SERCOM2_2_Handler+0x10>)
    25d8:	4798      	blx	r3
    25da:	bd08      	pop	{r3, pc}
    25dc:	200000c8 	.word	0x200000c8
    25e0:	00001d81 	.word	0x00001d81

000025e4 <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    25e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <SERCOM2_3_Handler+0xc>)
    25e8:	6818      	ldr	r0, [r3, #0]
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <SERCOM2_3_Handler+0x10>)
    25ec:	4798      	blx	r3
    25ee:	bd08      	pop	{r3, pc}
    25f0:	200000c8 	.word	0x200000c8
    25f4:	00001d81 	.word	0x00001d81

000025f8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    25f8:	b570      	push	{r4, r5, r6, lr}
    25fa:	b088      	sub	sp, #32
    25fc:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    25fe:	466c      	mov	r4, sp
    2600:	4d12      	ldr	r5, [pc, #72]	; (264c <get_tc_index+0x54>)
    2602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2606:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    260a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    260e:	9b00      	ldr	r3, [sp, #0]
    2610:	42b3      	cmp	r3, r6
    2612:	d00b      	beq.n	262c <get_tc_index+0x34>
    2614:	4630      	mov	r0, r6
    2616:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2618:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    261a:	f852 1b04 	ldr.w	r1, [r2], #4
    261e:	4281      	cmp	r1, r0
    2620:	d005      	beq.n	262e <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2622:	3301      	adds	r3, #1
    2624:	2b08      	cmp	r3, #8
    2626:	d1f8      	bne.n	261a <get_tc_index+0x22>
			return i;
    2628:	2000      	movs	r0, #0
    262a:	e00b      	b.n	2644 <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    262c:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    262e:	f013 0fff 	tst.w	r3, #255	; 0xff
    2632:	d009      	beq.n	2648 <get_tc_index+0x50>
	ASSERT(false);
    2634:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2638:	4905      	ldr	r1, [pc, #20]	; (2650 <get_tc_index+0x58>)
    263a:	2000      	movs	r0, #0
    263c:	4b05      	ldr	r3, [pc, #20]	; (2654 <get_tc_index+0x5c>)
    263e:	4798      	blx	r3
	return -1;
    2640:	f04f 30ff 	mov.w	r0, #4294967295
}
    2644:	b008      	add	sp, #32
    2646:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    2648:	2000      	movs	r0, #0
    264a:	e7fb      	b.n	2644 <get_tc_index+0x4c>
    264c:	000175bc 	.word	0x000175bc
    2650:	000175f0 	.word	0x000175f0
    2654:	00001a5d 	.word	0x00001a5d

00002658 <_timer_init>:
{
    2658:	b570      	push	{r4, r5, r6, lr}
    265a:	4606      	mov	r6, r0
    265c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    265e:	4608      	mov	r0, r1
    2660:	4b60      	ldr	r3, [pc, #384]	; (27e4 <_timer_init+0x18c>)
    2662:	4798      	blx	r3
    2664:	4605      	mov	r5, r0
	device->hw = hw;
    2666:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2668:	228d      	movs	r2, #141	; 0x8d
    266a:	495f      	ldr	r1, [pc, #380]	; (27e8 <_timer_init+0x190>)
    266c:	2001      	movs	r0, #1
    266e:	4b5f      	ldr	r3, [pc, #380]	; (27ec <_timer_init+0x194>)
    2670:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2672:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    2674:	f013 0f01 	tst.w	r3, #1
    2678:	d119      	bne.n	26ae <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    267a:	6923      	ldr	r3, [r4, #16]
    267c:	f013 0f03 	tst.w	r3, #3
    2680:	d1fb      	bne.n	267a <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2682:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2684:	f013 0f02 	tst.w	r3, #2
    2688:	d00b      	beq.n	26a2 <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    268a:	6823      	ldr	r3, [r4, #0]
    268c:	f023 0302 	bic.w	r3, r3, #2
    2690:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2692:	6923      	ldr	r3, [r4, #16]
    2694:	f013 0f03 	tst.w	r3, #3
    2698:	d1fb      	bne.n	2692 <_timer_init+0x3a>
    269a:	6923      	ldr	r3, [r4, #16]
    269c:	f013 0f02 	tst.w	r3, #2
    26a0:	d1fb      	bne.n	269a <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26a2:	2301      	movs	r3, #1
    26a4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26a6:	6923      	ldr	r3, [r4, #16]
    26a8:	f013 0f03 	tst.w	r3, #3
    26ac:	d1fb      	bne.n	26a6 <_timer_init+0x4e>
    26ae:	6923      	ldr	r3, [r4, #16]
    26b0:	f013 0f01 	tst.w	r3, #1
    26b4:	d1fb      	bne.n	26ae <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    26b6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26ba:	4a4d      	ldr	r2, [pc, #308]	; (27f0 <_timer_init+0x198>)
    26bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26c2:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26c4:	6923      	ldr	r3, [r4, #16]
    26c6:	f013 0f03 	tst.w	r3, #3
    26ca:	d1fb      	bne.n	26c4 <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    26cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26d0:	4947      	ldr	r1, [pc, #284]	; (27f0 <_timer_init+0x198>)
    26d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    26d6:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    26da:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    26dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    26de:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    26e0:	2301      	movs	r3, #1
    26e2:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    26e4:	f002 020c 	and.w	r2, r2, #12
    26e8:	2a08      	cmp	r2, #8
    26ea:	d048      	beq.n	277e <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    26ec:	2a00      	cmp	r2, #0
    26ee:	d158      	bne.n	27a2 <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    26f0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26f4:	4a3e      	ldr	r2, [pc, #248]	; (27f0 <_timer_init+0x198>)
    26f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    26fc:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26fe:	6923      	ldr	r3, [r4, #16]
    2700:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2704:	d1fb      	bne.n	26fe <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2706:	2300      	movs	r3, #0
    2708:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    270a:	6923      	ldr	r3, [r4, #16]
    270c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2710:	d1fb      	bne.n	270a <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2712:	2301      	movs	r3, #1
    2714:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    2716:	4b37      	ldr	r3, [pc, #220]	; (27f4 <_timer_init+0x19c>)
    2718:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    271a:	bf04      	itt	eq
    271c:	4b36      	ldreq	r3, [pc, #216]	; (27f8 <_timer_init+0x1a0>)
    271e:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    2720:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2724:	4a32      	ldr	r2, [pc, #200]	; (27f0 <_timer_init+0x198>)
    2726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    272a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    272e:	2b00      	cmp	r3, #0
    2730:	db23      	blt.n	277a <_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2732:	095a      	lsrs	r2, r3, #5
    2734:	f003 031f 	and.w	r3, r3, #31
    2738:	2101      	movs	r1, #1
    273a:	fa01 f303 	lsl.w	r3, r1, r3
    273e:	3220      	adds	r2, #32
    2740:	492e      	ldr	r1, [pc, #184]	; (27fc <_timer_init+0x1a4>)
    2742:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    274a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    274e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2752:	4b27      	ldr	r3, [pc, #156]	; (27f0 <_timer_init+0x198>)
    2754:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2758:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    275c:	2b00      	cmp	r3, #0
    275e:	db0c      	blt.n	277a <_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2760:	0959      	lsrs	r1, r3, #5
    2762:	f003 031f 	and.w	r3, r3, #31
    2766:	2201      	movs	r2, #1
    2768:	fa02 f303 	lsl.w	r3, r2, r3
    276c:	4a23      	ldr	r2, [pc, #140]	; (27fc <_timer_init+0x1a4>)
    276e:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2772:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2776:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    277a:	2000      	movs	r0, #0
    277c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    277e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2782:	4a1b      	ldr	r2, [pc, #108]	; (27f0 <_timer_init+0x198>)
    2784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    278a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    278c:	6923      	ldr	r3, [r4, #16]
    278e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2792:	d1fb      	bne.n	278c <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2794:	2300      	movs	r3, #0
    2796:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2798:	6923      	ldr	r3, [r4, #16]
    279a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    279e:	d1fb      	bne.n	2798 <_timer_init+0x140>
    27a0:	e7b7      	b.n	2712 <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    27a2:	2a04      	cmp	r2, #4
    27a4:	d1b5      	bne.n	2712 <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    27a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27aa:	4a11      	ldr	r2, [pc, #68]	; (27f0 <_timer_init+0x198>)
    27ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    27b4:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27b6:	6923      	ldr	r3, [r4, #16]
    27b8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27bc:	d1fb      	bne.n	27b6 <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    27be:	2300      	movs	r3, #0
    27c0:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27c2:	6923      	ldr	r3, [r4, #16]
    27c4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27c8:	d1fb      	bne.n	27c2 <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    27ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27ce:	4a08      	ldr	r2, [pc, #32]	; (27f0 <_timer_init+0x198>)
    27d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    27d8:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27da:	6923      	ldr	r3, [r4, #16]
    27dc:	f013 0f20 	tst.w	r3, #32
    27e0:	d1fb      	bne.n	27da <_timer_init+0x182>
    27e2:	e796      	b.n	2712 <_timer_init+0xba>
    27e4:	000025f9 	.word	0x000025f9
    27e8:	000175f0 	.word	0x000175f0
    27ec:	00001a5d 	.word	0x00001a5d
    27f0:	000175bc 	.word	0x000175bc
    27f4:	40003800 	.word	0x40003800
    27f8:	200000cc 	.word	0x200000cc
    27fc:	e000e100 	.word	0xe000e100

00002800 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2800:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2802:	6813      	ldr	r3, [r2, #0]
    2804:	f043 0302 	orr.w	r3, r3, #2
    2808:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    280a:	6913      	ldr	r3, [r2, #16]
    280c:	f013 0f03 	tst.w	r3, #3
    2810:	d1fb      	bne.n	280a <_timer_start+0xa>
}
    2812:	4770      	bx	lr

00002814 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2814:	68c2      	ldr	r2, [r0, #12]
    2816:	6913      	ldr	r3, [r2, #16]
    2818:	f013 0f03 	tst.w	r3, #3
    281c:	d1fb      	bne.n	2816 <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    281e:	6810      	ldr	r0, [r2, #0]
}
    2820:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2824:	4770      	bx	lr

00002826 <_tc_get_timer>:
}
    2826:	2000      	movs	r0, #0
    2828:	4770      	bx	lr
	...

0000282c <_timer_set_irq>:
{
    282c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    282e:	68c0      	ldr	r0, [r0, #12]
    2830:	4b09      	ldr	r3, [pc, #36]	; (2858 <_timer_set_irq+0x2c>)
    2832:	4798      	blx	r3
    2834:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2836:	f240 120f 	movw	r2, #271	; 0x10f
    283a:	4908      	ldr	r1, [pc, #32]	; (285c <_timer_set_irq+0x30>)
    283c:	2001      	movs	r0, #1
    283e:	4b08      	ldr	r3, [pc, #32]	; (2860 <_timer_set_irq+0x34>)
    2840:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2842:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2846:	4b07      	ldr	r3, [pc, #28]	; (2864 <_timer_set_irq+0x38>)
    2848:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    284c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    2850:	4b05      	ldr	r3, [pc, #20]	; (2868 <_timer_set_irq+0x3c>)
    2852:	4798      	blx	r3
    2854:	bd10      	pop	{r4, pc}
    2856:	bf00      	nop
    2858:	000025f9 	.word	0x000025f9
    285c:	000175f0 	.word	0x000175f0
    2860:	00001a5d 	.word	0x00001a5d
    2864:	000175bc 	.word	0x000175bc
    2868:	00001bbd 	.word	0x00001bbd

0000286c <TC0_Handler>:
{
    286c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    286e:	4b06      	ldr	r3, [pc, #24]	; (2888 <TC0_Handler+0x1c>)
    2870:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    2872:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2874:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2876:	f012 0f01 	tst.w	r2, #1
    287a:	d100      	bne.n	287e <TC0_Handler+0x12>
    287c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    287e:	2201      	movs	r2, #1
    2880:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    2882:	6803      	ldr	r3, [r0, #0]
    2884:	4798      	blx	r3
}
    2886:	e7f9      	b.n	287c <TC0_Handler+0x10>
    2888:	200000cc 	.word	0x200000cc

0000288c <main>:
#include "oracle.h"


int main(void)
{
    288c:	b508      	push	{r3, lr}
	oracle_init();
    288e:	4b02      	ldr	r3, [pc, #8]	; (2898 <main+0xc>)
    2890:	4798      	blx	r3
	
	for(;;)
	{
		oracle_service();
    2892:	4c02      	ldr	r4, [pc, #8]	; (289c <main+0x10>)
    2894:	47a0      	blx	r4
    2896:	e7fd      	b.n	2894 <main+0x8>
    2898:	000028a1 	.word	0x000028a1
    289c:	0000291d 	.word	0x0000291d

000028a0 <oracle_init>:

static lv_disp_buf_t disp_buf;
static lv_color_t buf[LV_HOR_RES_MAX * 10];                     /*Declare a buffer for 10 lines*/
	
void oracle_init(void)
{
    28a0:	b530      	push	{r4, r5, lr}
    28a2:	b08d      	sub	sp, #52	; 0x34
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    28a4:	4b10      	ldr	r3, [pc, #64]	; (28e8 <oracle_init+0x48>)
    28a6:	4798      	blx	r3
	// init mcu
	init_mcu();
	// uart init
	p_usart_init();
    28a8:	4b10      	ldr	r3, [pc, #64]	; (28ec <oracle_init+0x4c>)
    28aa:	4798      	blx	r3
	// i2c init
	p_i2c_init();
    28ac:	4b10      	ldr	r3, [pc, #64]	; (28f0 <oracle_init+0x50>)
    28ae:	4798      	blx	r3
	// gpio init
	p_gpio_init();
    28b0:	4b10      	ldr	r3, [pc, #64]	; (28f4 <oracle_init+0x54>)
    28b2:	4798      	blx	r3
	// time init
	p_tcc_init();
    28b4:	4b10      	ldr	r3, [pc, #64]	; (28f8 <oracle_init+0x58>)
    28b6:	4798      	blx	r3

	
	ssd1963_init();
    28b8:	4b10      	ldr	r3, [pc, #64]	; (28fc <oracle_init+0x5c>)
    28ba:	4798      	blx	r3
	

	lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    /*Initialize the display buffer*/
    28bc:	4c10      	ldr	r4, [pc, #64]	; (2900 <oracle_init+0x60>)
    28be:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
    28c2:	2200      	movs	r2, #0
    28c4:	490f      	ldr	r1, [pc, #60]	; (2904 <oracle_init+0x64>)
    28c6:	4620      	mov	r0, r4
    28c8:	4d0f      	ldr	r5, [pc, #60]	; (2908 <oracle_init+0x68>)
    28ca:	47a8      	blx	r5
	lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
	lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
    28cc:	a801      	add	r0, sp, #4
    28ce:	4b0f      	ldr	r3, [pc, #60]	; (290c <oracle_init+0x6c>)
    28d0:	4798      	blx	r3
	disp_drv.flush_cb = ssd1963_flush;    /*Set your driver function*/
    28d2:	4b0f      	ldr	r3, [pc, #60]	; (2910 <oracle_init+0x70>)
    28d4:	9304      	str	r3, [sp, #16]
	disp_drv.buffer = &disp_buf;          /*Assign the buffer to the display*/
    28d6:	9402      	str	r4, [sp, #8]
	lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
    28d8:	a801      	add	r0, sp, #4
    28da:	4b0e      	ldr	r3, [pc, #56]	; (2914 <oracle_init+0x74>)
    28dc:	4798      	blx	r3
	// devices init
	lv_init();
    28de:	4b0e      	ldr	r3, [pc, #56]	; (2918 <oracle_init+0x78>)
    28e0:	4798      	blx	r3
}
    28e2:	b00d      	add	sp, #52	; 0x34
    28e4:	bd30      	pop	{r4, r5, pc}
    28e6:	bf00      	nop
    28e8:	00001c21 	.word	0x00001c21
    28ec:	0000140d 	.word	0x0000140d
    28f0:	000012d9 	.word	0x000012d9
    28f4:	0000119d 	.word	0x0000119d
    28f8:	00001395 	.word	0x00001395
    28fc:	000002d1 	.word	0x000002d1
    2900:	20002650 	.word	0x20002650
    2904:	200000d0 	.word	0x200000d0
    2908:	0000ffe1 	.word	0x0000ffe1
    290c:	0000ff81 	.word	0x0000ff81
    2910:	00000c41 	.word	0x00000c41
    2914:	00010001 	.word	0x00010001
    2918:	00002cdd 	.word	0x00002cdd

0000291c <oracle_service>:

void oracle_service(void)
{
    291c:	4770      	bx	lr

0000291e <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
    291e:	3000      	adds	r0, #0
    2920:	bf18      	it	ne
    2922:	2001      	movne	r0, #1
    2924:	4770      	bx	lr
	...

00002928 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
    2928:	b510      	push	{r4, lr}
    292a:	b0c0      	sub	sp, #256	; 0x100
    292c:	4604      	mov	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
    292e:	4b06      	ldr	r3, [pc, #24]	; (2948 <lv_debug_log_error+0x20>)
    2930:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
    2932:	28e5      	cmp	r0, #229	; 0xe5
    2934:	d901      	bls.n	293a <lv_debug_log_error+0x12>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
    2936:	b040      	add	sp, #256	; 0x100
    2938:	bd10      	pop	{r4, pc}
        _lv_memcpy(bufp, msg, msg_len);
    293a:	4602      	mov	r2, r0
    293c:	4621      	mov	r1, r4
    293e:	4668      	mov	r0, sp
    2940:	4b02      	ldr	r3, [pc, #8]	; (294c <lv_debug_log_error+0x24>)
    2942:	4798      	blx	r3
}
    2944:	e7f7      	b.n	2936 <lv_debug_log_error+0xe>
    2946:	bf00      	nop
    2948:	0001748f 	.word	0x0001748f
    294c:	00011769 	.word	0x00011769

00002950 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    2950:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    2952:	4603      	mov	r3, r0
    2954:	b108      	cbz	r0, 295a <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
        return NULL;
    }

    return disp->act_scr;
    2956:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    2958:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
    295a:	4b03      	ldr	r3, [pc, #12]	; (2968 <lv_disp_get_scr_act+0x18>)
    295c:	4798      	blx	r3
    if(!disp) {
    295e:	4603      	mov	r3, r0
    2960:	2800      	cmp	r0, #0
    2962:	d1f8      	bne.n	2956 <lv_disp_get_scr_act+0x6>
        return NULL;
    2964:	2000      	movs	r0, #0
}
    2966:	bd08      	pop	{r3, pc}
    2968:	00010125 	.word	0x00010125

0000296c <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    296c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    296e:	4603      	mov	r3, r0
    2970:	b108      	cbz	r0, 2976 <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
    2972:	6c18      	ldr	r0, [r3, #64]	; 0x40
    2974:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
    2976:	4b03      	ldr	r3, [pc, #12]	; (2984 <lv_disp_get_layer_top+0x18>)
    2978:	4798      	blx	r3
    if(!disp) {
    297a:	4603      	mov	r3, r0
    297c:	2800      	cmp	r0, #0
    297e:	d1f8      	bne.n	2972 <lv_disp_get_layer_top+0x6>
        return NULL;
    2980:	2000      	movs	r0, #0
}
    2982:	bd08      	pop	{r3, pc}
    2984:	00010125 	.word	0x00010125

00002988 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    2988:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
    298a:	4603      	mov	r3, r0
    298c:	b108      	cbz	r0, 2992 <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
    298e:	6c58      	ldr	r0, [r3, #68]	; 0x44
    2990:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
    2992:	4b03      	ldr	r3, [pc, #12]	; (29a0 <lv_disp_get_layer_sys+0x18>)
    2994:	4798      	blx	r3
    if(!disp) {
    2996:	4603      	mov	r3, r0
    2998:	2800      	cmp	r0, #0
    299a:	d1f8      	bne.n	298e <lv_disp_get_layer_sys+0x6>
        return NULL;
    299c:	2000      	movs	r0, #0
}
    299e:	bd08      	pop	{r3, pc}
    29a0:	00010125 	.word	0x00010125

000029a4 <obj_to_foreground>:
static void obj_to_foreground(lv_obj_t * obj)
{
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
    29a4:	b1a0      	cbz	r0, 29d0 <obj_to_foreground+0x2c>
{
    29a6:	b538      	push	{r3, r4, r5, lr}
    29a8:	4603      	mov	r3, r0
    while(i != NULL) {
    29aa:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    29ac:	4d09      	ldr	r5, [pc, #36]	; (29d4 <obj_to_foreground+0x30>)
        if(i->top != 0) last_top = i;
    29ae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    29b2:	f002 0220 	and.w	r2, r2, #32
    29b6:	2a00      	cmp	r2, #0
    29b8:	bf18      	it	ne
    29ba:	461c      	movne	r4, r3
        i = lv_obj_get_parent(i);
    29bc:	4618      	mov	r0, r3
    29be:	47a8      	blx	r5
    while(i != NULL) {
    29c0:	4603      	mov	r3, r0
    29c2:	2800      	cmp	r0, #0
    29c4:	d1f3      	bne.n	29ae <obj_to_foreground+0xa>
    }

    if(last_top != NULL) {
    29c6:	b114      	cbz	r4, 29ce <obj_to_foreground+0x2a>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
    29c8:	4620      	mov	r0, r4
    29ca:	4b03      	ldr	r3, [pc, #12]	; (29d8 <obj_to_foreground+0x34>)
    29cc:	4798      	blx	r3
    29ce:	bd38      	pop	{r3, r4, r5, pc}
    29d0:	4770      	bx	lr
    29d2:	bf00      	nop
    29d4:	00002f01 	.word	0x00002f01
    29d8:	00003481 	.word	0x00003481

000029dc <focus_next_core>:
{
    29dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return;
    29e0:	7d03      	ldrb	r3, [r0, #20]
    29e2:	f013 0f01 	tst.w	r3, #1
    29e6:	d12a      	bne.n	2a3e <focus_next_core+0x62>
    29e8:	4617      	mov	r7, r2
    29ea:	468a      	mov	sl, r1
    29ec:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
    29ee:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
    29f0:	f04f 0901 	mov.w	r9, #1
    lv_obj_t ** obj_sentinel = NULL;
    29f4:	2500      	movs	r5, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
    29f6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2abc <focus_next_core+0xe0>
                can_begin = false;
    29fa:	46ab      	mov	fp, r5
    29fc:	e04a      	b.n	2a94 <focus_next_core+0xb8>
            if(group->wrap || obj_sentinel == NULL) {
    29fe:	7d33      	ldrb	r3, [r6, #20]
    2a00:	f013 0f10 	tst.w	r3, #16
    2a04:	d100      	bne.n	2a08 <focus_next_core+0x2c>
    2a06:	b9d5      	cbnz	r5, 2a3e <focus_next_core+0x62>
                if(!can_begin) return;
    2a08:	f1b9 0f00 	cmp.w	r9, #0
    2a0c:	d017      	beq.n	2a3e <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    2a0e:	4630      	mov	r0, r6
    2a10:	47d0      	blx	sl
    2a12:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
    2a14:	2d00      	cmp	r5, #0
    2a16:	d035      	beq.n	2a84 <focus_next_core+0xa8>
                can_begin = false;
    2a18:	46d9      	mov	r9, fp
    2a1a:	e046      	b.n	2aaa <focus_next_core+0xce>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
    2a1c:	68f3      	ldr	r3, [r6, #12]
    2a1e:	42a3      	cmp	r3, r4
    2a20:	d00d      	beq.n	2a3e <focus_next_core+0x62>
    if(group->obj_focus) {
    2a22:	b193      	cbz	r3, 2a4a <focus_next_core+0x6e>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    2a24:	6818      	ldr	r0, [r3, #0]
    2a26:	69c3      	ldr	r3, [r0, #28]
    2a28:	2200      	movs	r2, #0
    2a2a:	2117      	movs	r1, #23
    2a2c:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
    2a2e:	68f3      	ldr	r3, [r6, #12]
    2a30:	2200      	movs	r2, #0
    2a32:	210e      	movs	r1, #14
    2a34:	6818      	ldr	r0, [r3, #0]
    2a36:	4b1e      	ldr	r3, [pc, #120]	; (2ab0 <focus_next_core+0xd4>)
    2a38:	4798      	blx	r3
        if(res != LV_RES_OK) return;
    2a3a:	2801      	cmp	r0, #1
    2a3c:	d001      	beq.n	2a42 <focus_next_core+0x66>
    2a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(*group->obj_focus);
    2a42:	68f3      	ldr	r3, [r6, #12]
    2a44:	6818      	ldr	r0, [r3, #0]
    2a46:	4b1b      	ldr	r3, [pc, #108]	; (2ab4 <focus_next_core+0xd8>)
    2a48:	4798      	blx	r3
    group->obj_focus = obj_next;
    2a4a:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
    2a4c:	6820      	ldr	r0, [r4, #0]
    2a4e:	69c3      	ldr	r3, [r0, #28]
    2a50:	2200      	movs	r2, #0
    2a52:	2116      	movs	r1, #22
    2a54:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
    2a56:	68f3      	ldr	r3, [r6, #12]
    2a58:	2200      	movs	r2, #0
    2a5a:	210d      	movs	r1, #13
    2a5c:	6818      	ldr	r0, [r3, #0]
    2a5e:	4b14      	ldr	r3, [pc, #80]	; (2ab0 <focus_next_core+0xd4>)
    2a60:	4798      	blx	r3
    if(res != LV_RES_OK) return;
    2a62:	2801      	cmp	r0, #1
    2a64:	d1eb      	bne.n	2a3e <focus_next_core+0x62>
    obj_to_foreground(*group->obj_focus);
    2a66:	68f3      	ldr	r3, [r6, #12]
    2a68:	6818      	ldr	r0, [r3, #0]
    2a6a:	4b13      	ldr	r3, [pc, #76]	; (2ab8 <focus_next_core+0xdc>)
    2a6c:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
    2a6e:	68f3      	ldr	r3, [r6, #12]
    2a70:	6818      	ldr	r0, [r3, #0]
    2a72:	4b10      	ldr	r3, [pc, #64]	; (2ab4 <focus_next_core+0xd8>)
    2a74:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
    2a76:	6933      	ldr	r3, [r6, #16]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d0e0      	beq.n	2a3e <focus_next_core+0x62>
    2a7c:	4630      	mov	r0, r6
    2a7e:	4798      	blx	r3
    2a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(obj_sentinel == NULL) return; /*Group is empty*/
    2a84:	2800      	cmp	r0, #0
    2a86:	d0da      	beq.n	2a3e <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    2a88:	4605      	mov	r5, r0
                can_begin = false;
    2a8a:	46d9      	mov	r9, fp
        if(!lv_obj_get_hidden(*obj_next)) break;
    2a8c:	6820      	ldr	r0, [r4, #0]
    2a8e:	47c0      	blx	r8
    2a90:	2800      	cmp	r0, #0
    2a92:	d0c3      	beq.n	2a1c <focus_next_core+0x40>
        if(obj_next == NULL) {
    2a94:	2c00      	cmp	r4, #0
    2a96:	d0b2      	beq.n	29fe <focus_next_core+0x22>
    2a98:	2d00      	cmp	r5, #0
    2a9a:	bf08      	it	eq
    2a9c:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
    2a9e:	4621      	mov	r1, r4
    2aa0:	4630      	mov	r0, r6
    2aa2:	47b8      	blx	r7
    2aa4:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
    2aa6:	42a8      	cmp	r0, r5
    2aa8:	d0c9      	beq.n	2a3e <focus_next_core+0x62>
        if(obj_next == NULL) continue;
    2aaa:	2c00      	cmp	r4, #0
    2aac:	d1ee      	bne.n	2a8c <focus_next_core+0xb0>
    2aae:	e7f1      	b.n	2a94 <focus_next_core+0xb8>
    2ab0:	00002e7d 	.word	0x00002e7d
    2ab4:	00003409 	.word	0x00003409
    2ab8:	000029a5 	.word	0x000029a5
    2abc:	000032c9 	.word	0x000032c9

00002ac0 <_lv_group_init>:
{
    2ac0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
    2ac2:	2118      	movs	r1, #24
    2ac4:	4801      	ldr	r0, [pc, #4]	; (2acc <_lv_group_init+0xc>)
    2ac6:	4b02      	ldr	r3, [pc, #8]	; (2ad0 <_lv_group_init+0x10>)
    2ac8:	4798      	blx	r3
    2aca:	bd08      	pop	{r3, pc}
    2acc:	2000adf4 	.word	0x2000adf4
    2ad0:	0001109d 	.word	0x0001109d

00002ad4 <lv_group_focus_next>:
{
    2ad4:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
    2ad6:	4a02      	ldr	r2, [pc, #8]	; (2ae0 <lv_group_focus_next+0xc>)
    2ad8:	4902      	ldr	r1, [pc, #8]	; (2ae4 <lv_group_focus_next+0x10>)
    2ada:	4b03      	ldr	r3, [pc, #12]	; (2ae8 <lv_group_focus_next+0x14>)
    2adc:	4798      	blx	r3
    2ade:	bd08      	pop	{r3, pc}
    2ae0:	00011161 	.word	0x00011161
    2ae4:	0001114d 	.word	0x0001114d
    2ae8:	000029dd 	.word	0x000029dd

00002aec <lv_group_focus_prev>:
{
    2aec:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
    2aee:	4a02      	ldr	r2, [pc, #8]	; (2af8 <lv_group_focus_prev+0xc>)
    2af0:	4902      	ldr	r1, [pc, #8]	; (2afc <lv_group_focus_prev+0x10>)
    2af2:	4b03      	ldr	r3, [pc, #12]	; (2b00 <lv_group_focus_prev+0x14>)
    2af4:	4798      	blx	r3
    2af6:	bd08      	pop	{r3, pc}
    2af8:	0001118d 	.word	0x0001118d
    2afc:	00011157 	.word	0x00011157
    2b00:	000029dd 	.word	0x000029dd

00002b04 <lv_group_refocus>:
{
    2b04:	b538      	push	{r3, r4, r5, lr}
    2b06:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
    2b08:	7d03      	ldrb	r3, [r0, #20]
    2b0a:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
    2b0e:	f043 0310 	orr.w	r3, r3, #16
    2b12:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
    2b14:	f013 0f08 	tst.w	r3, #8
        lv_group_focus_next(g);
    2b18:	bf0c      	ite	eq
    2b1a:	4b04      	ldreq	r3, [pc, #16]	; (2b2c <lv_group_refocus+0x28>)
        lv_group_focus_prev(g);
    2b1c:	4b04      	ldrne	r3, [pc, #16]	; (2b30 <lv_group_refocus+0x2c>)
    2b1e:	4798      	blx	r3
    g->wrap = temp_wrap;
    2b20:	7d23      	ldrb	r3, [r4, #20]
    2b22:	f365 1304 	bfi	r3, r5, #4, #1
    2b26:	7523      	strb	r3, [r4, #20]
    2b28:	bd38      	pop	{r3, r4, r5, pc}
    2b2a:	bf00      	nop
    2b2c:	00002ad5 	.word	0x00002ad5
    2b30:	00002aed 	.word	0x00002aed

00002b34 <lv_group_add_obj>:
    if(group == NULL) return;
    2b34:	2800      	cmp	r0, #0
    2b36:	d036      	beq.n	2ba6 <lv_group_add_obj+0x72>
{
    2b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b3a:	4605      	mov	r5, r0
    2b3c:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
    2b3e:	4607      	mov	r7, r0
    2b40:	4b19      	ldr	r3, [pc, #100]	; (2ba8 <lv_group_add_obj+0x74>)
    2b42:	4798      	blx	r3
    2b44:	4601      	mov	r1, r0
    2b46:	b158      	cbz	r0, 2b60 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
    2b48:	6803      	ldr	r3, [r0, #0]
    2b4a:	429c      	cmp	r4, r3
    2b4c:	d007      	beq.n	2b5e <lv_group_add_obj+0x2a>
    _LV_LL_READ(group->obj_ll, obj_i) {
    2b4e:	4e17      	ldr	r6, [pc, #92]	; (2bac <lv_group_add_obj+0x78>)
    2b50:	4638      	mov	r0, r7
    2b52:	47b0      	blx	r6
    2b54:	4601      	mov	r1, r0
    2b56:	b118      	cbz	r0, 2b60 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
    2b58:	680b      	ldr	r3, [r1, #0]
    2b5a:	42a3      	cmp	r3, r4
    2b5c:	d1f8      	bne.n	2b50 <lv_group_add_obj+0x1c>
    2b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj->group_p) {
    2b60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2b62:	b133      	cbz	r3, 2b72 <lv_group_add_obj+0x3e>
        if(lv_obj_is_focused(obj)) {
    2b64:	4620      	mov	r0, r4
    2b66:	4b12      	ldr	r3, [pc, #72]	; (2bb0 <lv_group_add_obj+0x7c>)
    2b68:	4798      	blx	r3
    2b6a:	b110      	cbz	r0, 2b72 <lv_group_add_obj+0x3e>
            lv_group_refocus(obj->group_p);
    2b6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2b6e:	4b11      	ldr	r3, [pc, #68]	; (2bb4 <lv_group_add_obj+0x80>)
    2b70:	4798      	blx	r3
    obj->group_p     = group;
    2b72:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
    2b74:	4628      	mov	r0, r5
    2b76:	4b10      	ldr	r3, [pc, #64]	; (2bb8 <lv_group_add_obj+0x84>)
    2b78:	4798      	blx	r3
    2b7a:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
    2b7c:	4b0f      	ldr	r3, [pc, #60]	; (2bbc <lv_group_add_obj+0x88>)
    2b7e:	4798      	blx	r3
    2b80:	b158      	cbz	r0, 2b9a <lv_group_add_obj+0x66>
    if(next == NULL) return;
    2b82:	2e00      	cmp	r6, #0
    2b84:	d0eb      	beq.n	2b5e <lv_group_add_obj+0x2a>
    *next = obj;
    2b86:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
    2b88:	4628      	mov	r0, r5
    2b8a:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <lv_group_add_obj+0x74>)
    2b8c:	4798      	blx	r3
    2b8e:	4286      	cmp	r6, r0
    2b90:	d1e5      	bne.n	2b5e <lv_group_add_obj+0x2a>
        lv_group_refocus(group);
    2b92:	4628      	mov	r0, r5
    2b94:	4b07      	ldr	r3, [pc, #28]	; (2bb4 <lv_group_add_obj+0x80>)
    2b96:	4798      	blx	r3
    2b98:	e7e1      	b.n	2b5e <lv_group_add_obj+0x2a>
    LV_ASSERT_MEM(next);
    2b9a:	4632      	mov	r2, r6
    2b9c:	2300      	movs	r3, #0
    2b9e:	4808      	ldr	r0, [pc, #32]	; (2bc0 <lv_group_add_obj+0x8c>)
    2ba0:	4908      	ldr	r1, [pc, #32]	; (2bc4 <lv_group_add_obj+0x90>)
    2ba2:	4788      	blx	r1
    2ba4:	e7fe      	b.n	2ba4 <lv_group_add_obj+0x70>
    2ba6:	4770      	bx	lr
    2ba8:	0001114d 	.word	0x0001114d
    2bac:	00011161 	.word	0x00011161
    2bb0:	00004995 	.word	0x00004995
    2bb4:	00002b05 	.word	0x00002b05
    2bb8:	00011101 	.word	0x00011101
    2bbc:	0000291f 	.word	0x0000291f
    2bc0:	00017604 	.word	0x00017604
    2bc4:	00002929 	.word	0x00002929

00002bc8 <lv_group_get_focused>:
    if(!group) return NULL;
    2bc8:	b118      	cbz	r0, 2bd2 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
    2bca:	68c3      	ldr	r3, [r0, #12]
    2bcc:	b11b      	cbz	r3, 2bd6 <lv_group_get_focused+0xe>
    return *group->obj_focus;
    2bce:	6818      	ldr	r0, [r3, #0]
    2bd0:	4770      	bx	lr
    if(!group) return NULL;
    2bd2:	2000      	movs	r0, #0
    2bd4:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
    2bd6:	2000      	movs	r0, #0
}
    2bd8:	4770      	bx	lr

00002bda <lv_group_get_editing>:
    if(!group) return false;
    2bda:	b118      	cbz	r0, 2be4 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
    2bdc:	7d00      	ldrb	r0, [r0, #20]
    2bde:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2be2:	4770      	bx	lr
    if(!group) return false;
    2be4:	2000      	movs	r0, #0
}
    2be6:	4770      	bx	lr

00002be8 <lv_indev_get_act>:
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
    2be8:	4b01      	ldr	r3, [pc, #4]	; (2bf0 <lv_indev_get_act+0x8>)
    2bea:	6858      	ldr	r0, [r3, #4]
    2bec:	4770      	bx	lr
    2bee:	bf00      	nop
    2bf0:	20002674 	.word	0x20002674

00002bf4 <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
    2bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(indev) {
    2bf6:	b1b0      	cbz	r0, 2c26 <lv_indev_reset+0x32>
    2bf8:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
    2bfa:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    2bfe:	f042 0202 	orr.w	r2, r2, #2
    2c02:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
    2c06:	4a18      	ldr	r2, [pc, #96]	; (2c68 <lv_indev_reset+0x74>)
    2c08:	6852      	ldr	r2, [r2, #4]
    2c0a:	4290      	cmp	r0, r2
    2c0c:	d004      	beq.n	2c18 <lv_indev_reset+0x24>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
    2c0e:	b139      	cbz	r1, 2c20 <lv_indev_reset+0x2c>
    2c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2c12:	4291      	cmp	r1, r2
    2c14:	d004      	beq.n	2c20 <lv_indev_reset+0x2c>
    2c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
    2c18:	2000      	movs	r0, #0
    2c1a:	4a13      	ldr	r2, [pc, #76]	; (2c68 <lv_indev_reset+0x74>)
    2c1c:	6010      	str	r0, [r2, #0]
    2c1e:	e7f6      	b.n	2c0e <lv_indev_reset+0x1a>
            indev->proc.types.pointer.last_pressed = NULL;
    2c20:	2200      	movs	r2, #0
    2c22:	63da      	str	r2, [r3, #60]	; 0x3c
    2c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c26:	460c      	mov	r4, r1
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
    2c28:	2000      	movs	r0, #0
    2c2a:	4b10      	ldr	r3, [pc, #64]	; (2c6c <lv_indev_reset+0x78>)
    2c2c:	4798      	blx	r3
        while(i) {
    2c2e:	4603      	mov	r3, r0
    2c30:	2800      	cmp	r0, #0
    2c32:	d0f0      	beq.n	2c16 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
    2c34:	4d0c      	ldr	r5, [pc, #48]	; (2c68 <lv_indev_reset+0x74>)
    2c36:	2700      	movs	r7, #0
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
    2c38:	4e0c      	ldr	r6, [pc, #48]	; (2c6c <lv_indev_reset+0x78>)
    2c3a:	e005      	b.n	2c48 <lv_indev_reset+0x54>
                i->proc.types.pointer.last_pressed = NULL;
    2c3c:	63df      	str	r7, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
    2c3e:	4618      	mov	r0, r3
    2c40:	47b0      	blx	r6
        while(i) {
    2c42:	4603      	mov	r3, r0
    2c44:	2800      	cmp	r0, #0
    2c46:	d0e6      	beq.n	2c16 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
    2c48:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    2c4c:	f042 0202 	orr.w	r2, r2, #2
    2c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
    2c54:	686a      	ldr	r2, [r5, #4]
    2c56:	429a      	cmp	r2, r3
    2c58:	bf08      	it	eq
    2c5a:	602f      	streq	r7, [r5, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
    2c5c:	2c00      	cmp	r4, #0
    2c5e:	d0ed      	beq.n	2c3c <lv_indev_reset+0x48>
    2c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2c62:	4294      	cmp	r4, r2
    2c64:	d1eb      	bne.n	2c3e <lv_indev_reset+0x4a>
    2c66:	e7e9      	b.n	2c3c <lv_indev_reset+0x48>
    2c68:	20002674 	.word	0x20002674
    2c6c:	00010265 	.word	0x00010265

00002c70 <_lv_indev_init>:
{
    2c70:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
    2c72:	2100      	movs	r1, #0
    2c74:	4608      	mov	r0, r1
    2c76:	4b01      	ldr	r3, [pc, #4]	; (2c7c <_lv_indev_init+0xc>)
    2c78:	4798      	blx	r3
    2c7a:	bd08      	pop	{r3, pc}
    2c7c:	00002bf5 	.word	0x00002bf5

00002c80 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
    2c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c84:	4689      	mov	r9, r1
    2c86:	4690      	mov	r8, r2
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
    2c88:	f100 0a04 	add.w	sl, r0, #4
    2c8c:	4650      	mov	r0, sl
    2c8e:	4b11      	ldr	r3, [pc, #68]	; (2cd4 <refresh_children_position+0x54>)
    2c90:	4798      	blx	r3
    2c92:	b1e0      	cbz	r0, 2cce <refresh_children_position+0x4e>
    2c94:	4604      	mov	r4, r0
        i->coords.x1 += x_diff;
    2c96:	fa1f f689 	uxth.w	r6, r9
        i->coords.y1 += y_diff;
    2c9a:	fa1f f588 	uxth.w	r5, r8
    _LV_LL_READ(obj->child_ll, i) {
    2c9e:	4f0e      	ldr	r7, [pc, #56]	; (2cd8 <refresh_children_position+0x58>)
        i->coords.x1 += x_diff;
    2ca0:	8a23      	ldrh	r3, [r4, #16]
    2ca2:	4433      	add	r3, r6
    2ca4:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
    2ca6:	8a63      	ldrh	r3, [r4, #18]
    2ca8:	442b      	add	r3, r5
    2caa:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
    2cac:	8aa3      	ldrh	r3, [r4, #20]
    2cae:	4433      	add	r3, r6
    2cb0:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
    2cb2:	8ae3      	ldrh	r3, [r4, #22]
    2cb4:	442b      	add	r3, r5
    2cb6:	82e3      	strh	r3, [r4, #22]

        refresh_children_position(i, x_diff, y_diff);
    2cb8:	4642      	mov	r2, r8
    2cba:	4649      	mov	r1, r9
    2cbc:	4620      	mov	r0, r4
    2cbe:	f7ff ffdf 	bl	2c80 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
    2cc2:	4621      	mov	r1, r4
    2cc4:	4650      	mov	r0, sl
    2cc6:	47b8      	blx	r7
    2cc8:	4604      	mov	r4, r0
    2cca:	2800      	cmp	r0, #0
    2ccc:	d1e8      	bne.n	2ca0 <refresh_children_position+0x20>
    2cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cd2:	bf00      	nop
    2cd4:	0001114d 	.word	0x0001114d
    2cd8:	00011161 	.word	0x00011161

00002cdc <lv_init>:
    if(lv_initialized) {
    2cdc:	4b1a      	ldr	r3, [pc, #104]	; (2d48 <lv_init+0x6c>)
    2cde:	781b      	ldrb	r3, [r3, #0]
    2ce0:	b103      	cbz	r3, 2ce4 <lv_init+0x8>
    2ce2:	4770      	bx	lr
{
    2ce4:	b530      	push	{r4, r5, lr}
    2ce6:	b085      	sub	sp, #20
    _lv_mem_init();
    2ce8:	4b18      	ldr	r3, [pc, #96]	; (2d4c <lv_init+0x70>)
    2cea:	4798      	blx	r3
    _lv_task_core_init();
    2cec:	4b18      	ldr	r3, [pc, #96]	; (2d50 <lv_init+0x74>)
    2cee:	4798      	blx	r3
    _lv_fs_init();
    2cf0:	4b18      	ldr	r3, [pc, #96]	; (2d54 <lv_init+0x78>)
    2cf2:	4798      	blx	r3
    _lv_anim_core_init();
    2cf4:	4b18      	ldr	r3, [pc, #96]	; (2d58 <lv_init+0x7c>)
    2cf6:	4798      	blx	r3
    _lv_group_init();
    2cf8:	4b18      	ldr	r3, [pc, #96]	; (2d5c <lv_init+0x80>)
    2cfa:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
    2cfc:	2110      	movs	r1, #16
    2cfe:	4818      	ldr	r0, [pc, #96]	; (2d60 <lv_init+0x84>)
    2d00:	4c18      	ldr	r4, [pc, #96]	; (2d64 <lv_init+0x88>)
    2d02:	47a0      	blx	r4
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
    2d04:	4b18      	ldr	r3, [pc, #96]	; (2d68 <lv_init+0x8c>)
    2d06:	9302      	str	r3, [sp, #8]
    2d08:	9301      	str	r3, [sp, #4]
    2d0a:	9300      	str	r3, [sp, #0]
    2d0c:	2202      	movs	r2, #2
    2d0e:	f04f 011f 	mov.w	r1, #31
    2d12:	f64f 0000 	movw	r0, #63488	; 0xf800
    2d16:	4d15      	ldr	r5, [pc, #84]	; (2d6c <lv_init+0x90>)
    2d18:	47a8      	blx	r5
    lv_theme_set_act(th);
    2d1a:	4b15      	ldr	r3, [pc, #84]	; (2d70 <lv_init+0x94>)
    2d1c:	4798      	blx	r3
    _lv_refr_init();
    2d1e:	4b15      	ldr	r3, [pc, #84]	; (2d74 <lv_init+0x98>)
    2d20:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    2d22:	f44f 71b8 	mov.w	r1, #368	; 0x170
    2d26:	4814      	ldr	r0, [pc, #80]	; (2d78 <lv_init+0x9c>)
    2d28:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    2d2a:	2160      	movs	r1, #96	; 0x60
    2d2c:	4813      	ldr	r0, [pc, #76]	; (2d7c <lv_init+0xa0>)
    2d2e:	47a0      	blx	r4
    _lv_indev_init();
    2d30:	4b13      	ldr	r3, [pc, #76]	; (2d80 <lv_init+0xa4>)
    2d32:	4798      	blx	r3
    _lv_img_decoder_init();
    2d34:	4b13      	ldr	r3, [pc, #76]	; (2d84 <lv_init+0xa8>)
    2d36:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    2d38:	2001      	movs	r0, #1
    2d3a:	4b13      	ldr	r3, [pc, #76]	; (2d88 <lv_init+0xac>)
    2d3c:	4798      	blx	r3
    lv_initialized = true;
    2d3e:	2201      	movs	r2, #1
    2d40:	4b01      	ldr	r3, [pc, #4]	; (2d48 <lv_init+0x6c>)
    2d42:	701a      	strb	r2, [r3, #0]
}
    2d44:	b005      	add	sp, #20
    2d46:	bd30      	pop	{r4, r5, pc}
    2d48:	2000267c 	.word	0x2000267c
    2d4c:	00011519 	.word	0x00011519
    2d50:	00011d4d 	.word	0x00011d4d
    2d54:	00010e3d 	.word	0x00010e3d
    2d58:	000104e1 	.word	0x000104e1
    2d5c:	00002ac1 	.word	0x00002ac1
    2d60:	2000ad50 	.word	0x2000ad50
    2d64:	0001109d 	.word	0x0001109d
    2d68:	20000010 	.word	0x20000010
    2d6c:	00014f4d 	.word	0x00014f4d
    2d70:	00012689 	.word	0x00012689
    2d74:	00005639 	.word	0x00005639
    2d78:	2000acac 	.word	0x2000acac
    2d7c:	2000aca0 	.word	0x2000aca0
    2d80:	00002c71 	.word	0x00002c71
    2d84:	0000f279 	.word	0x0000f279
    2d88:	0000e8b1 	.word	0x0000e8b1

00002d8c <lv_obj_set_click>:
{
    2d8c:	b538      	push	{r3, r4, r5, lr}
    2d8e:	4604      	mov	r4, r0
    2d90:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2d92:	4b08      	ldr	r3, [pc, #32]	; (2db4 <lv_obj_set_click+0x28>)
    2d94:	4798      	blx	r3
    2d96:	b130      	cbz	r0, 2da6 <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
    2d98:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2d9c:	f365 0300 	bfi	r3, r5, #0, #1
    2da0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    2da4:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2da6:	4622      	mov	r2, r4
    2da8:	2300      	movs	r3, #0
    2daa:	4803      	ldr	r0, [pc, #12]	; (2db8 <lv_obj_set_click+0x2c>)
    2dac:	4903      	ldr	r1, [pc, #12]	; (2dbc <lv_obj_set_click+0x30>)
    2dae:	4788      	blx	r1
    2db0:	e7fe      	b.n	2db0 <lv_obj_set_click+0x24>
    2db2:	bf00      	nop
    2db4:	0000291f 	.word	0x0000291f
    2db8:	00017618 	.word	0x00017618
    2dbc:	00002929 	.word	0x00002929

00002dc0 <lv_event_send_func>:
{
    2dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dc4:	b084      	sub	sp, #16
    2dc6:	4607      	mov	r7, r0
    2dc8:	4615      	mov	r5, r2
    2dca:	461e      	mov	r6, r3
    if(obj != NULL) {
    2dcc:	460c      	mov	r4, r1
    2dce:	b121      	cbz	r1, 2dda <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2dd0:	4608      	mov	r0, r1
    2dd2:	4b24      	ldr	r3, [pc, #144]	; (2e64 <lv_event_send_func+0xa4>)
    2dd4:	4798      	blx	r3
    2dd6:	2800      	cmp	r0, #0
    2dd8:	d033      	beq.n	2e42 <lv_event_send_func+0x82>
    event_temp_data.obj     = obj;
    2dda:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
    2ddc:	2300      	movs	r3, #0
    2dde:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
    2de2:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
    2de4:	4b20      	ldr	r3, [pc, #128]	; (2e68 <lv_event_send_func+0xa8>)
    2de6:	685b      	ldr	r3, [r3, #4]
    2de8:	b103      	cbz	r3, 2dec <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
    2dea:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
    2dec:	4b1e      	ldr	r3, [pc, #120]	; (2e68 <lv_event_send_func+0xa8>)
    2dee:	aa01      	add	r2, sp, #4
    2df0:	605a      	str	r2, [r3, #4]
    const void * event_act_data_save = event_act_data;
    2df2:	f8d3 8008 	ldr.w	r8, [r3, #8]
    event_act_data                   = data;
    2df6:	609e      	str	r6, [r3, #8]
    lv_indev_t * indev_act = lv_indev_get_act();
    2df8:	4b1c      	ldr	r3, [pc, #112]	; (2e6c <lv_event_send_func+0xac>)
    2dfa:	4798      	blx	r3
    if(indev_act) {
    2dfc:	b118      	cbz	r0, 2e06 <lv_event_send_func+0x46>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    2dfe:	6883      	ldr	r3, [r0, #8]
    2e00:	b10b      	cbz	r3, 2e06 <lv_event_send_func+0x46>
    2e02:	4629      	mov	r1, r5
    2e04:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    2e06:	b117      	cbz	r7, 2e0e <lv_event_send_func+0x4e>
    2e08:	4629      	mov	r1, r5
    2e0a:	4620      	mov	r0, r4
    2e0c:	47b8      	blx	r7
    event_act_data = event_act_data_save;
    2e0e:	4b16      	ldr	r3, [pc, #88]	; (2e68 <lv_event_send_func+0xa8>)
    2e10:	f8c3 8008 	str.w	r8, [r3, #8]
    event_temp_data_head = event_temp_data_head->prev;
    2e14:	685a      	ldr	r2, [r3, #4]
    2e16:	6892      	ldr	r2, [r2, #8]
    2e18:	605a      	str	r2, [r3, #4]
    if(event_temp_data.deleted) {
    2e1a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2e1e:	b9b3      	cbnz	r3, 2e4e <lv_event_send_func+0x8e>
    if(obj) {
    2e20:	b1cc      	cbz	r4, 2e56 <lv_event_send_func+0x96>
        if(obj->parent_event && obj->parent) {
    2e22:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    2e26:	f013 0f40 	tst.w	r3, #64	; 0x40
    2e2a:	d016      	beq.n	2e5a <lv_event_send_func+0x9a>
    2e2c:	6820      	ldr	r0, [r4, #0]
    2e2e:	b1b0      	cbz	r0, 2e5e <lv_event_send_func+0x9e>
            lv_res_t res = lv_event_send(obj->parent, event, data);
    2e30:	4632      	mov	r2, r6
    2e32:	4629      	mov	r1, r5
    2e34:	4b0e      	ldr	r3, [pc, #56]	; (2e70 <lv_event_send_func+0xb0>)
    2e36:	4798      	blx	r3
        return LV_RES_INV;
    2e38:	2801      	cmp	r0, #1
    2e3a:	bf14      	ite	ne
    2e3c:	2000      	movne	r0, #0
    2e3e:	2001      	moveq	r0, #1
    2e40:	e006      	b.n	2e50 <lv_event_send_func+0x90>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e42:	4622      	mov	r2, r4
    2e44:	2300      	movs	r3, #0
    2e46:	480b      	ldr	r0, [pc, #44]	; (2e74 <lv_event_send_func+0xb4>)
    2e48:	490b      	ldr	r1, [pc, #44]	; (2e78 <lv_event_send_func+0xb8>)
    2e4a:	4788      	blx	r1
    2e4c:	e7fe      	b.n	2e4c <lv_event_send_func+0x8c>
        return LV_RES_INV;
    2e4e:	2000      	movs	r0, #0
}
    2e50:	b004      	add	sp, #16
    2e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
    2e56:	2001      	movs	r0, #1
    2e58:	e7fa      	b.n	2e50 <lv_event_send_func+0x90>
    2e5a:	2001      	movs	r0, #1
    2e5c:	e7f8      	b.n	2e50 <lv_event_send_func+0x90>
    2e5e:	2001      	movs	r0, #1
    2e60:	e7f6      	b.n	2e50 <lv_event_send_func+0x90>
    2e62:	bf00      	nop
    2e64:	0000291f 	.word	0x0000291f
    2e68:	2000267c 	.word	0x2000267c
    2e6c:	00002be9 	.word	0x00002be9
    2e70:	00002e7d 	.word	0x00002e7d
    2e74:	00017618 	.word	0x00017618
    2e78:	00002929 	.word	0x00002929

00002e7c <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
    2e7c:	b198      	cbz	r0, 2ea6 <lv_event_send+0x2a>
{
    2e7e:	b570      	push	{r4, r5, r6, lr}
    2e80:	4604      	mov	r4, r0
    2e82:	4616      	mov	r6, r2
    2e84:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2e86:	4b09      	ldr	r3, [pc, #36]	; (2eac <lv_event_send+0x30>)
    2e88:	4798      	blx	r3
    2e8a:	b928      	cbnz	r0, 2e98 <lv_event_send+0x1c>
    2e8c:	4622      	mov	r2, r4
    2e8e:	2300      	movs	r3, #0
    2e90:	4807      	ldr	r0, [pc, #28]	; (2eb0 <lv_event_send+0x34>)
    2e92:	4908      	ldr	r1, [pc, #32]	; (2eb4 <lv_event_send+0x38>)
    2e94:	4788      	blx	r1
    2e96:	e7fe      	b.n	2e96 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    2e98:	4633      	mov	r3, r6
    2e9a:	462a      	mov	r2, r5
    2e9c:	4621      	mov	r1, r4
    2e9e:	69a0      	ldr	r0, [r4, #24]
    2ea0:	4c05      	ldr	r4, [pc, #20]	; (2eb8 <lv_event_send+0x3c>)
    2ea2:	47a0      	blx	r4
    return res;
    2ea4:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
    2ea6:	2001      	movs	r0, #1
    2ea8:	4770      	bx	lr
    2eaa:	bf00      	nop
    2eac:	0000291f 	.word	0x0000291f
    2eb0:	00017618 	.word	0x00017618
    2eb4:	00002929 	.word	0x00002929
    2eb8:	00002dc1 	.word	0x00002dc1

00002ebc <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
    2ebc:	b120      	cbz	r0, 2ec8 <lv_signal_send+0xc>
{
    2ebe:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
    2ec0:	69c4      	ldr	r4, [r0, #28]
    2ec2:	b11c      	cbz	r4, 2ecc <lv_signal_send+0x10>
    2ec4:	47a0      	blx	r4
    2ec6:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
    2ec8:	2001      	movs	r0, #1
    2eca:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
    2ecc:	2001      	movs	r0, #1
}
    2ece:	bd10      	pop	{r4, pc}

00002ed0 <lv_obj_refresh_ext_draw_pad>:
{
    2ed0:	b510      	push	{r4, lr}
    2ed2:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2ed4:	4b07      	ldr	r3, [pc, #28]	; (2ef4 <lv_obj_refresh_ext_draw_pad+0x24>)
    2ed6:	4798      	blx	r3
    2ed8:	b928      	cbnz	r0, 2ee6 <lv_obj_refresh_ext_draw_pad+0x16>
    2eda:	4622      	mov	r2, r4
    2edc:	2300      	movs	r3, #0
    2ede:	4806      	ldr	r0, [pc, #24]	; (2ef8 <lv_obj_refresh_ext_draw_pad+0x28>)
    2ee0:	4906      	ldr	r1, [pc, #24]	; (2efc <lv_obj_refresh_ext_draw_pad+0x2c>)
    2ee2:	4788      	blx	r1
    2ee4:	e7fe      	b.n	2ee4 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
    2ee6:	2200      	movs	r2, #0
    2ee8:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    2eea:	69e3      	ldr	r3, [r4, #28]
    2eec:	2106      	movs	r1, #6
    2eee:	4620      	mov	r0, r4
    2ef0:	4798      	blx	r3
    2ef2:	bd10      	pop	{r4, pc}
    2ef4:	0000291f 	.word	0x0000291f
    2ef8:	00017618 	.word	0x00017618
    2efc:	00002929 	.word	0x00002929

00002f00 <lv_obj_get_parent>:
{
    2f00:	b510      	push	{r4, lr}
    2f02:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f04:	4b05      	ldr	r3, [pc, #20]	; (2f1c <lv_obj_get_parent+0x1c>)
    2f06:	4798      	blx	r3
    2f08:	b108      	cbz	r0, 2f0e <lv_obj_get_parent+0xe>
}
    2f0a:	6820      	ldr	r0, [r4, #0]
    2f0c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f0e:	4622      	mov	r2, r4
    2f10:	2300      	movs	r3, #0
    2f12:	4803      	ldr	r0, [pc, #12]	; (2f20 <lv_obj_get_parent+0x20>)
    2f14:	4903      	ldr	r1, [pc, #12]	; (2f24 <lv_obj_get_parent+0x24>)
    2f16:	4788      	blx	r1
    2f18:	e7fe      	b.n	2f18 <lv_obj_get_parent+0x18>
    2f1a:	bf00      	nop
    2f1c:	0000291f 	.word	0x0000291f
    2f20:	00017618 	.word	0x00017618
    2f24:	00002929 	.word	0x00002929

00002f28 <lv_obj_get_screen>:
{
    2f28:	b538      	push	{r3, r4, r5, lr}
    2f2a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f2c:	4b09      	ldr	r3, [pc, #36]	; (2f54 <lv_obj_get_screen+0x2c>)
    2f2e:	4798      	blx	r3
    2f30:	b108      	cbz	r0, 2f36 <lv_obj_get_screen+0xe>
        par   = lv_obj_get_parent(act_p);
    2f32:	4d09      	ldr	r5, [pc, #36]	; (2f58 <lv_obj_get_screen+0x30>)
    2f34:	e006      	b.n	2f44 <lv_obj_get_screen+0x1c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f36:	4622      	mov	r2, r4
    2f38:	2300      	movs	r3, #0
    2f3a:	4808      	ldr	r0, [pc, #32]	; (2f5c <lv_obj_get_screen+0x34>)
    2f3c:	4908      	ldr	r1, [pc, #32]	; (2f60 <lv_obj_get_screen+0x38>)
    2f3e:	4788      	blx	r1
    2f40:	e7fe      	b.n	2f40 <lv_obj_get_screen+0x18>
        par   = lv_obj_get_parent(act_p);
    2f42:	461c      	mov	r4, r3
    2f44:	4620      	mov	r0, r4
    2f46:	47a8      	blx	r5
    } while(par != NULL);
    2f48:	4603      	mov	r3, r0
    2f4a:	2800      	cmp	r0, #0
    2f4c:	d1f9      	bne.n	2f42 <lv_obj_get_screen+0x1a>
}
    2f4e:	4620      	mov	r0, r4
    2f50:	bd38      	pop	{r3, r4, r5, pc}
    2f52:	bf00      	nop
    2f54:	0000291f 	.word	0x0000291f
    2f58:	00002f01 	.word	0x00002f01
    2f5c:	00017618 	.word	0x00017618
    2f60:	00002929 	.word	0x00002929

00002f64 <lv_obj_get_disp>:
{
    2f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f68:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f6a:	4b19      	ldr	r3, [pc, #100]	; (2fd0 <lv_obj_get_disp+0x6c>)
    2f6c:	4798      	blx	r3
    2f6e:	b180      	cbz	r0, 2f92 <lv_obj_get_disp+0x2e>
    if(obj->parent == NULL)
    2f70:	6823      	ldr	r3, [r4, #0]
    2f72:	b11b      	cbz	r3, 2f7c <lv_obj_get_disp+0x18>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
    2f74:	4620      	mov	r0, r4
    2f76:	4b17      	ldr	r3, [pc, #92]	; (2fd4 <lv_obj_get_disp+0x70>)
    2f78:	4798      	blx	r3
    2f7a:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2f7c:	4816      	ldr	r0, [pc, #88]	; (2fd8 <lv_obj_get_disp+0x74>)
    2f7e:	4b17      	ldr	r3, [pc, #92]	; (2fdc <lv_obj_get_disp+0x78>)
    2f80:	4798      	blx	r3
    2f82:	4607      	mov	r7, r0
    2f84:	b300      	cbz	r0, 2fc8 <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
    2f86:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2fdc <lv_obj_get_disp+0x78>
    2f8a:	4d15      	ldr	r5, [pc, #84]	; (2fe0 <lv_obj_get_disp+0x7c>)
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2f8c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2fd8 <lv_obj_get_disp+0x74>
    2f90:	e00a      	b.n	2fa8 <lv_obj_get_disp+0x44>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2f92:	4622      	mov	r2, r4
    2f94:	2300      	movs	r3, #0
    2f96:	4813      	ldr	r0, [pc, #76]	; (2fe4 <lv_obj_get_disp+0x80>)
    2f98:	4913      	ldr	r1, [pc, #76]	; (2fe8 <lv_obj_get_disp+0x84>)
    2f9a:	4788      	blx	r1
    2f9c:	e7fe      	b.n	2f9c <lv_obj_get_disp+0x38>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    2f9e:	4639      	mov	r1, r7
    2fa0:	4640      	mov	r0, r8
    2fa2:	47a8      	blx	r5
    2fa4:	4607      	mov	r7, r0
    2fa6:	b178      	cbz	r0, 2fc8 <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
    2fa8:	f107 0630 	add.w	r6, r7, #48	; 0x30
    2fac:	4630      	mov	r0, r6
    2fae:	47c8      	blx	r9
    2fb0:	4601      	mov	r1, r0
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d0f3      	beq.n	2f9e <lv_obj_get_disp+0x3a>
            if(s == scr) return d;
    2fb6:	4284      	cmp	r4, r0
    2fb8:	d006      	beq.n	2fc8 <lv_obj_get_disp+0x64>
        _LV_LL_READ(d->scr_ll, s) {
    2fba:	4630      	mov	r0, r6
    2fbc:	47a8      	blx	r5
    2fbe:	4601      	mov	r1, r0
    2fc0:	2800      	cmp	r0, #0
    2fc2:	d0ec      	beq.n	2f9e <lv_obj_get_disp+0x3a>
            if(s == scr) return d;
    2fc4:	428c      	cmp	r4, r1
    2fc6:	d1f8      	bne.n	2fba <lv_obj_get_disp+0x56>
}
    2fc8:	4638      	mov	r0, r7
    2fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fce:	bf00      	nop
    2fd0:	0000291f 	.word	0x0000291f
    2fd4:	00002f29 	.word	0x00002f29
    2fd8:	2000acac 	.word	0x2000acac
    2fdc:	0001114d 	.word	0x0001114d
    2fe0:	00011161 	.word	0x00011161
    2fe4:	00017618 	.word	0x00017618
    2fe8:	00002929 	.word	0x00002929

00002fec <lv_obj_get_child>:
{
    2fec:	b538      	push	{r3, r4, r5, lr}
    2fee:	4604      	mov	r4, r0
    2ff0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2ff2:	4b09      	ldr	r3, [pc, #36]	; (3018 <lv_obj_get_child+0x2c>)
    2ff4:	4798      	blx	r3
    2ff6:	b128      	cbz	r0, 3004 <lv_obj_get_child+0x18>
    if(child == NULL) {
    2ff8:	b155      	cbz	r5, 3010 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
    2ffa:	4629      	mov	r1, r5
    2ffc:	1d20      	adds	r0, r4, #4
    2ffe:	4b07      	ldr	r3, [pc, #28]	; (301c <lv_obj_get_child+0x30>)
    3000:	4798      	blx	r3
}
    3002:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3004:	4622      	mov	r2, r4
    3006:	2300      	movs	r3, #0
    3008:	4805      	ldr	r0, [pc, #20]	; (3020 <lv_obj_get_child+0x34>)
    300a:	4906      	ldr	r1, [pc, #24]	; (3024 <lv_obj_get_child+0x38>)
    300c:	4788      	blx	r1
    300e:	e7fe      	b.n	300e <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
    3010:	1d20      	adds	r0, r4, #4
    3012:	4b05      	ldr	r3, [pc, #20]	; (3028 <lv_obj_get_child+0x3c>)
    3014:	4798      	blx	r3
    3016:	bd38      	pop	{r3, r4, r5, pc}
    3018:	0000291f 	.word	0x0000291f
    301c:	00011161 	.word	0x00011161
    3020:	00017618 	.word	0x00017618
    3024:	00002929 	.word	0x00002929
    3028:	0001114d 	.word	0x0001114d

0000302c <lv_obj_get_coords>:
{
    302c:	b538      	push	{r3, r4, r5, lr}
    302e:	4605      	mov	r5, r0
    3030:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3032:	4b0a      	ldr	r3, [pc, #40]	; (305c <lv_obj_get_coords+0x30>)
    3034:	4798      	blx	r3
    3036:	b158      	cbz	r0, 3050 <lv_obj_get_coords+0x24>
    3038:	f105 020f 	add.w	r2, r5, #15
    303c:	f104 0008 	add.w	r0, r4, #8
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    3040:	4623      	mov	r3, r4
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    3042:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    3046:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    304a:	4283      	cmp	r3, r0
    304c:	d1f9      	bne.n	3042 <lv_obj_get_coords+0x16>
}
    304e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3050:	462a      	mov	r2, r5
    3052:	2300      	movs	r3, #0
    3054:	4802      	ldr	r0, [pc, #8]	; (3060 <lv_obj_get_coords+0x34>)
    3056:	4903      	ldr	r1, [pc, #12]	; (3064 <lv_obj_get_coords+0x38>)
    3058:	4788      	blx	r1
    305a:	e7fe      	b.n	305a <lv_obj_get_coords+0x2e>
    305c:	0000291f 	.word	0x0000291f
    3060:	00017618 	.word	0x00017618
    3064:	00002929 	.word	0x00002929

00003068 <lv_obj_get_x>:
{
    3068:	b510      	push	{r4, lr}
    306a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    306c:	4b0a      	ldr	r3, [pc, #40]	; (3098 <lv_obj_get_x+0x30>)
    306e:	4798      	blx	r3
    3070:	b928      	cbnz	r0, 307e <lv_obj_get_x+0x16>
    3072:	4622      	mov	r2, r4
    3074:	2300      	movs	r3, #0
    3076:	4809      	ldr	r0, [pc, #36]	; (309c <lv_obj_get_x+0x34>)
    3078:	4909      	ldr	r1, [pc, #36]	; (30a0 <lv_obj_get_x+0x38>)
    307a:	4788      	blx	r1
    307c:	e7fe      	b.n	307c <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    307e:	4620      	mov	r0, r4
    3080:	4b08      	ldr	r3, [pc, #32]	; (30a4 <lv_obj_get_x+0x3c>)
    3082:	4798      	blx	r3
    if(parent) {
    3084:	4603      	mov	r3, r0
    3086:	b120      	cbz	r0, 3092 <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
    3088:	8a20      	ldrh	r0, [r4, #16]
    308a:	8a1b      	ldrh	r3, [r3, #16]
    308c:	1ac0      	subs	r0, r0, r3
    308e:	b200      	sxth	r0, r0
    3090:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
    3092:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
    3096:	bd10      	pop	{r4, pc}
    3098:	0000291f 	.word	0x0000291f
    309c:	00017618 	.word	0x00017618
    30a0:	00002929 	.word	0x00002929
    30a4:	00002f01 	.word	0x00002f01

000030a8 <lv_obj_get_y>:
{
    30a8:	b510      	push	{r4, lr}
    30aa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30ac:	4b0a      	ldr	r3, [pc, #40]	; (30d8 <lv_obj_get_y+0x30>)
    30ae:	4798      	blx	r3
    30b0:	b928      	cbnz	r0, 30be <lv_obj_get_y+0x16>
    30b2:	4622      	mov	r2, r4
    30b4:	2300      	movs	r3, #0
    30b6:	4809      	ldr	r0, [pc, #36]	; (30dc <lv_obj_get_y+0x34>)
    30b8:	4909      	ldr	r1, [pc, #36]	; (30e0 <lv_obj_get_y+0x38>)
    30ba:	4788      	blx	r1
    30bc:	e7fe      	b.n	30bc <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    30be:	4620      	mov	r0, r4
    30c0:	4b08      	ldr	r3, [pc, #32]	; (30e4 <lv_obj_get_y+0x3c>)
    30c2:	4798      	blx	r3
    if(parent) {
    30c4:	4603      	mov	r3, r0
    30c6:	b120      	cbz	r0, 30d2 <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
    30c8:	8a60      	ldrh	r0, [r4, #18]
    30ca:	8a5b      	ldrh	r3, [r3, #18]
    30cc:	1ac0      	subs	r0, r0, r3
    30ce:	b200      	sxth	r0, r0
    30d0:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
    30d2:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
    30d6:	bd10      	pop	{r4, pc}
    30d8:	0000291f 	.word	0x0000291f
    30dc:	00017618 	.word	0x00017618
    30e0:	00002929 	.word	0x00002929
    30e4:	00002f01 	.word	0x00002f01

000030e8 <lv_obj_get_width>:
{
    30e8:	b510      	push	{r4, lr}
    30ea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30ec:	4b07      	ldr	r3, [pc, #28]	; (310c <lv_obj_get_width+0x24>)
    30ee:	4798      	blx	r3
    30f0:	b128      	cbz	r0, 30fe <lv_obj_get_width+0x16>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    30f2:	8aa0      	ldrh	r0, [r4, #20]
    30f4:	3001      	adds	r0, #1
    30f6:	8a23      	ldrh	r3, [r4, #16]
    30f8:	1ac0      	subs	r0, r0, r3
}
    30fa:	b200      	sxth	r0, r0
    30fc:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30fe:	4622      	mov	r2, r4
    3100:	2300      	movs	r3, #0
    3102:	4803      	ldr	r0, [pc, #12]	; (3110 <lv_obj_get_width+0x28>)
    3104:	4903      	ldr	r1, [pc, #12]	; (3114 <lv_obj_get_width+0x2c>)
    3106:	4788      	blx	r1
    3108:	e7fe      	b.n	3108 <lv_obj_get_width+0x20>
    310a:	bf00      	nop
    310c:	0000291f 	.word	0x0000291f
    3110:	00017618 	.word	0x00017618
    3114:	00002929 	.word	0x00002929

00003118 <lv_obj_get_height>:
{
    3118:	b510      	push	{r4, lr}
    311a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    311c:	4b07      	ldr	r3, [pc, #28]	; (313c <lv_obj_get_height+0x24>)
    311e:	4798      	blx	r3
    3120:	b128      	cbz	r0, 312e <lv_obj_get_height+0x16>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    3122:	8ae0      	ldrh	r0, [r4, #22]
    3124:	3001      	adds	r0, #1
    3126:	8a63      	ldrh	r3, [r4, #18]
    3128:	1ac0      	subs	r0, r0, r3
}
    312a:	b200      	sxth	r0, r0
    312c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    312e:	4622      	mov	r2, r4
    3130:	2300      	movs	r3, #0
    3132:	4803      	ldr	r0, [pc, #12]	; (3140 <lv_obj_get_height+0x28>)
    3134:	4903      	ldr	r1, [pc, #12]	; (3144 <lv_obj_get_height+0x2c>)
    3136:	4788      	blx	r1
    3138:	e7fe      	b.n	3138 <lv_obj_get_height+0x20>
    313a:	bf00      	nop
    313c:	0000291f 	.word	0x0000291f
    3140:	00017618 	.word	0x00017618
    3144:	00002929 	.word	0x00002929

00003148 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
    3148:	b909      	cbnz	r1, 314e <lv_obj_get_style_list+0x6>
    314a:	3028      	adds	r0, #40	; 0x28
    314c:	4770      	bx	lr
{
    314e:	b500      	push	{lr}
    3150:	b083      	sub	sp, #12
    info.part = part;
    3152:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
    3156:	2300      	movs	r3, #0
    3158:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
    315a:	466a      	mov	r2, sp
    315c:	2108      	movs	r1, #8
    315e:	4b04      	ldr	r3, [pc, #16]	; (3170 <lv_obj_get_style_list+0x28>)
    3160:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
    3162:	2801      	cmp	r0, #1
    return info.result;
    3164:	bf0c      	ite	eq
    3166:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
    3168:	2000      	movne	r0, #0
}
    316a:	b003      	add	sp, #12
    316c:	f85d fb04 	ldr.w	pc, [sp], #4
    3170:	00002ebd 	.word	0x00002ebd

00003174 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all porpeties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
    3174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3178:	4680      	mov	r8, r0
    317a:	468a      	mov	sl, r1
    317c:	4693      	mov	fp, r2
    317e:	461e      	mov	r6, r3
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    3180:	481c      	ldr	r0, [pc, #112]	; (31f4 <trans_del+0x80>)
    3182:	4b1d      	ldr	r3, [pc, #116]	; (31f8 <trans_del+0x84>)
    3184:	4798      	blx	r3
    while(tr != NULL) {
    3186:	2800      	cmp	r0, #0
    3188:	d031      	beq.n	31ee <trans_del+0x7a>
    318a:	4605      	mov	r5, r0
        if(tr == tr_limit) break;
    318c:	42b0      	cmp	r0, r6
    318e:	d02e      	beq.n	31ee <trans_del+0x7a>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    3190:	f8df 9060 	ldr.w	r9, [pc, #96]	; 31f4 <trans_del+0x80>
    3194:	4f19      	ldr	r7, [pc, #100]	; (31fc <trans_del+0x88>)
    3196:	e009      	b.n	31ac <trans_del+0x38>

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    3198:	88ab      	ldrh	r3, [r5, #4]
    319a:	455b      	cmp	r3, fp
    319c:	d014      	beq.n	31c8 <trans_del+0x54>
    319e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    31a2:	d011      	beq.n	31c8 <trans_del+0x54>
    while(tr != NULL) {
    31a4:	b31c      	cbz	r4, 31ee <trans_del+0x7a>
    31a6:	4625      	mov	r5, r4
        if(tr == tr_limit) break;
    31a8:	42a6      	cmp	r6, r4
    31aa:	d020      	beq.n	31ee <trans_del+0x7a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    31ac:	4629      	mov	r1, r5
    31ae:	4648      	mov	r0, r9
    31b0:	47b8      	blx	r7
    31b2:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    31b4:	6828      	ldr	r0, [r5, #0]
    31b6:	4540      	cmp	r0, r8
    31b8:	d1f4      	bne.n	31a4 <trans_del+0x30>
    31ba:	79a9      	ldrb	r1, [r5, #6]
    31bc:	4551      	cmp	r1, sl
    31be:	d0eb      	beq.n	3198 <trans_del+0x24>
    31c0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    31c4:	d1ee      	bne.n	31a4 <trans_del+0x30>
    31c6:	e7e7      	b.n	3198 <trans_del+0x24>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    31c8:	4b0d      	ldr	r3, [pc, #52]	; (3200 <trans_del+0x8c>)
    31ca:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    31cc:	4b0d      	ldr	r3, [pc, #52]	; (3204 <trans_del+0x90>)
    31ce:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
    31d0:	88a9      	ldrh	r1, [r5, #4]
    31d2:	4b0d      	ldr	r3, [pc, #52]	; (3208 <trans_del+0x94>)
    31d4:	4798      	blx	r3

            lv_anim_del(tr, NULL);
    31d6:	2100      	movs	r1, #0
    31d8:	4628      	mov	r0, r5
    31da:	4b0c      	ldr	r3, [pc, #48]	; (320c <trans_del+0x98>)
    31dc:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    31de:	4629      	mov	r1, r5
    31e0:	4648      	mov	r0, r9
    31e2:	4b0b      	ldr	r3, [pc, #44]	; (3210 <trans_del+0x9c>)
    31e4:	4798      	blx	r3
            lv_mem_free(tr);
    31e6:	4628      	mov	r0, r5
    31e8:	4b0a      	ldr	r3, [pc, #40]	; (3214 <trans_del+0xa0>)
    31ea:	4798      	blx	r3
    31ec:	e7da      	b.n	31a4 <trans_del+0x30>
    31ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31f2:	bf00      	nop
    31f4:	2000ad50 	.word	0x2000ad50
    31f8:	00011157 	.word	0x00011157
    31fc:	0001118d 	.word	0x0001118d
    3200:	00003149 	.word	0x00003149
    3204:	00006793 	.word	0x00006793
    3208:	00005f09 	.word	0x00005f09
    320c:	0001056d 	.word	0x0001056d
    3210:	00011239 	.word	0x00011239
    3214:	000115fd 	.word	0x000115fd

00003218 <lv_obj_clean_style_list>:
{
    3218:	b538      	push	{r3, r4, r5, lr}
    321a:	4604      	mov	r4, r0
    321c:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
    321e:	4b06      	ldr	r3, [pc, #24]	; (3238 <lv_obj_clean_style_list+0x20>)
    3220:	4798      	blx	r3
    if(style_dsc == NULL) {
    3222:	b138      	cbz	r0, 3234 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
    3224:	4b05      	ldr	r3, [pc, #20]	; (323c <lv_obj_clean_style_list+0x24>)
    3226:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
    3228:	2300      	movs	r3, #0
    322a:	22ff      	movs	r2, #255	; 0xff
    322c:	4629      	mov	r1, r5
    322e:	4620      	mov	r0, r4
    3230:	4c03      	ldr	r4, [pc, #12]	; (3240 <lv_obj_clean_style_list+0x28>)
    3232:	47a0      	blx	r4
    3234:	bd38      	pop	{r3, r4, r5, pc}
    3236:	bf00      	nop
    3238:	00003149 	.word	0x00003149
    323c:	000067a5 	.word	0x000067a5
    3240:	00003175 	.word	0x00003175

00003244 <trans_anim_ready_cb>:
    tr->prop = prop_tmp;

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
    3244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_trans_t * tr = a->var;
    3246:	6804      	ldr	r4, [r0, #0]
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    3248:	4817      	ldr	r0, [pc, #92]	; (32a8 <trans_anim_ready_cb+0x64>)
    324a:	4b18      	ldr	r3, [pc, #96]	; (32ac <trans_anim_ready_cb+0x68>)
    324c:	4798      	blx	r3
    324e:	b308      	cbz	r0, 3294 <trans_anim_ready_cb+0x50>
    3250:	4601      	mov	r1, r0
    3252:	2700      	movs	r7, #0
    3254:	4e14      	ldr	r6, [pc, #80]	; (32a8 <trans_anim_ready_cb+0x64>)
    3256:	4d16      	ldr	r5, [pc, #88]	; (32b0 <trans_anim_ready_cb+0x6c>)
    3258:	e003      	b.n	3262 <trans_anim_ready_cb+0x1e>
    325a:	4630      	mov	r0, r6
    325c:	47a8      	blx	r5
    325e:	4601      	mov	r1, r0
    3260:	b178      	cbz	r0, 3282 <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
    3262:	428c      	cmp	r4, r1
    3264:	d0f9      	beq.n	325a <trans_anim_ready_cb+0x16>
    3266:	680a      	ldr	r2, [r1, #0]
    3268:	6823      	ldr	r3, [r4, #0]
    326a:	429a      	cmp	r2, r3
    326c:	d1f5      	bne.n	325a <trans_anim_ready_cb+0x16>
    326e:	684b      	ldr	r3, [r1, #4]
    3270:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    3274:	6863      	ldr	r3, [r4, #4]
    3276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
    327a:	429a      	cmp	r2, r3
    327c:	bf08      	it	eq
    327e:	2701      	moveq	r7, #1
    3280:	e7eb      	b.n	325a <trans_anim_ready_cb+0x16>
        }
    }

    if(!running) {
    3282:	b13f      	cbz	r7, 3294 <trans_anim_ready_cb+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
        lv_style_remove_prop(style_trans, tr->prop);
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    3284:	4621      	mov	r1, r4
    3286:	4808      	ldr	r0, [pc, #32]	; (32a8 <trans_anim_ready_cb+0x64>)
    3288:	4b0a      	ldr	r3, [pc, #40]	; (32b4 <trans_anim_ready_cb+0x70>)
    328a:	4798      	blx	r3
    lv_mem_free(tr);
    328c:	4620      	mov	r0, r4
    328e:	4b0a      	ldr	r3, [pc, #40]	; (32b8 <trans_anim_ready_cb+0x74>)
    3290:	4798      	blx	r3
    3292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3294:	79a1      	ldrb	r1, [r4, #6]
    3296:	6820      	ldr	r0, [r4, #0]
    3298:	4b08      	ldr	r3, [pc, #32]	; (32bc <trans_anim_ready_cb+0x78>)
    329a:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    329c:	4b08      	ldr	r3, [pc, #32]	; (32c0 <trans_anim_ready_cb+0x7c>)
    329e:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
    32a0:	88a1      	ldrh	r1, [r4, #4]
    32a2:	4b08      	ldr	r3, [pc, #32]	; (32c4 <trans_anim_ready_cb+0x80>)
    32a4:	4798      	blx	r3
    32a6:	e7ed      	b.n	3284 <trans_anim_ready_cb+0x40>
    32a8:	2000ad50 	.word	0x2000ad50
    32ac:	0001114d 	.word	0x0001114d
    32b0:	00011161 	.word	0x00011161
    32b4:	00011239 	.word	0x00011239
    32b8:	000115fd 	.word	0x000115fd
    32bc:	00003149 	.word	0x00003149
    32c0:	00006793 	.word	0x00006793
    32c4:	00005f09 	.word	0x00005f09

000032c8 <lv_obj_get_hidden>:
{
    32c8:	b510      	push	{r4, lr}
    32ca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    32cc:	4b06      	ldr	r3, [pc, #24]	; (32e8 <lv_obj_get_hidden+0x20>)
    32ce:	4798      	blx	r3
    32d0:	b120      	cbz	r0, 32dc <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
    32d2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
    32d6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    32da:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    32dc:	4622      	mov	r2, r4
    32de:	2300      	movs	r3, #0
    32e0:	4802      	ldr	r0, [pc, #8]	; (32ec <lv_obj_get_hidden+0x24>)
    32e2:	4903      	ldr	r1, [pc, #12]	; (32f0 <lv_obj_get_hidden+0x28>)
    32e4:	4788      	blx	r1
    32e6:	e7fe      	b.n	32e6 <lv_obj_get_hidden+0x1e>
    32e8:	0000291f 	.word	0x0000291f
    32ec:	00017618 	.word	0x00017618
    32f0:	00002929 	.word	0x00002929

000032f4 <lv_obj_invalidate_area>:
{
    32f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32f8:	b084      	sub	sp, #16
    32fa:	4604      	mov	r4, r0
    32fc:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    32fe:	4b36      	ldr	r3, [pc, #216]	; (33d8 <lv_obj_invalidate_area+0xe4>)
    3300:	4798      	blx	r3
    3302:	b928      	cbnz	r0, 3310 <lv_obj_invalidate_area+0x1c>
    3304:	4622      	mov	r2, r4
    3306:	2300      	movs	r3, #0
    3308:	4834      	ldr	r0, [pc, #208]	; (33dc <lv_obj_invalidate_area+0xe8>)
    330a:	4935      	ldr	r1, [pc, #212]	; (33e0 <lv_obj_invalidate_area+0xec>)
    330c:	4788      	blx	r1
    330e:	e7fe      	b.n	330e <lv_obj_invalidate_area+0x1a>
    if(lv_obj_get_hidden(obj)) return;
    3310:	4620      	mov	r0, r4
    3312:	4b34      	ldr	r3, [pc, #208]	; (33e4 <lv_obj_invalidate_area+0xf0>)
    3314:	4798      	blx	r3
    3316:	b110      	cbz	r0, 331e <lv_obj_invalidate_area+0x2a>
}
    3318:	b004      	add	sp, #16
    331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
    331e:	4620      	mov	r0, r4
    3320:	4b31      	ldr	r3, [pc, #196]	; (33e8 <lv_obj_invalidate_area+0xf4>)
    3322:	4798      	blx	r3
    3324:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
    3326:	4b31      	ldr	r3, [pc, #196]	; (33ec <lv_obj_invalidate_area+0xf8>)
    3328:	4798      	blx	r3
    332a:	4605      	mov	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    332c:	4b30      	ldr	r3, [pc, #192]	; (33f0 <lv_obj_invalidate_area+0xfc>)
    332e:	4798      	blx	r3
    3330:	4287      	cmp	r7, r0
    3332:	d009      	beq.n	3348 <lv_obj_invalidate_area+0x54>
    3334:	4628      	mov	r0, r5
    3336:	4b2f      	ldr	r3, [pc, #188]	; (33f4 <lv_obj_invalidate_area+0x100>)
    3338:	4798      	blx	r3
    333a:	4287      	cmp	r7, r0
    333c:	d004      	beq.n	3348 <lv_obj_invalidate_area+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
    333e:	4628      	mov	r0, r5
    3340:	4b2d      	ldr	r3, [pc, #180]	; (33f8 <lv_obj_invalidate_area+0x104>)
    3342:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    3344:	4287      	cmp	r7, r0
    3346:	d1e7      	bne.n	3318 <lv_obj_invalidate_area+0x24>
        lv_coord_t ext_size = obj->ext_draw_pad;
    3348:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    334c:	f104 020f 	add.w	r2, r4, #15
    3350:	f104 0017 	add.w	r0, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    3354:	4669      	mov	r1, sp
        *d8 = *s8;
    3356:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    335a:	f801 7b01 	strb.w	r7, [r1], #1
    while(len) {
    335e:	4282      	cmp	r2, r0
    3360:	d1f9      	bne.n	3356 <lv_obj_invalidate_area+0x62>
        obj_coords.x1 -= ext_size;
    3362:	b29b      	uxth	r3, r3
    3364:	f8bd 2000 	ldrh.w	r2, [sp]
    3368:	1ad2      	subs	r2, r2, r3
    336a:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
    336e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    3372:	1ad2      	subs	r2, r2, r3
    3374:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
    3378:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    337c:	441a      	add	r2, r3
    337e:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
    3382:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3386:	4413      	add	r3, r2
    3388:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(&area_trunc, area, &obj_coords);
    338c:	466a      	mov	r2, sp
    338e:	4631      	mov	r1, r6
    3390:	a802      	add	r0, sp, #8
    3392:	4b1a      	ldr	r3, [pc, #104]	; (33fc <lv_obj_invalidate_area+0x108>)
    3394:	4798      	blx	r3
        if(is_common == false) return;  /*The area is not on the object*/
    3396:	2800      	cmp	r0, #0
    3398:	d0be      	beq.n	3318 <lv_obj_invalidate_area+0x24>
        lv_obj_t * par = lv_obj_get_parent(obj);
    339a:	4620      	mov	r0, r4
    339c:	4b18      	ldr	r3, [pc, #96]	; (3400 <lv_obj_invalidate_area+0x10c>)
    339e:	4798      	blx	r3
        while(par != NULL) {
    33a0:	4604      	mov	r4, r0
    33a2:	b198      	cbz	r0, 33cc <lv_obj_invalidate_area+0xd8>
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    33a4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 33fc <lv_obj_invalidate_area+0x108>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    33a8:	4f0e      	ldr	r7, [pc, #56]	; (33e4 <lv_obj_invalidate_area+0xf0>)
            par = lv_obj_get_parent(par);
    33aa:	4e15      	ldr	r6, [pc, #84]	; (3400 <lv_obj_invalidate_area+0x10c>)
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    33ac:	f104 0210 	add.w	r2, r4, #16
    33b0:	a902      	add	r1, sp, #8
    33b2:	4608      	mov	r0, r1
    33b4:	47c0      	blx	r8
            if(is_common == false) break;       /*If no common parts with parent break;*/
    33b6:	2800      	cmp	r0, #0
    33b8:	d0ae      	beq.n	3318 <lv_obj_invalidate_area+0x24>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    33ba:	4620      	mov	r0, r4
    33bc:	47b8      	blx	r7
    33be:	2800      	cmp	r0, #0
    33c0:	d1aa      	bne.n	3318 <lv_obj_invalidate_area+0x24>
            par = lv_obj_get_parent(par);
    33c2:	4620      	mov	r0, r4
    33c4:	47b0      	blx	r6
        while(par != NULL) {
    33c6:	4604      	mov	r4, r0
    33c8:	2800      	cmp	r0, #0
    33ca:	d1ef      	bne.n	33ac <lv_obj_invalidate_area+0xb8>
        if(is_common) _lv_inv_area(disp, &area_trunc);
    33cc:	a902      	add	r1, sp, #8
    33ce:	4628      	mov	r0, r5
    33d0:	4b0c      	ldr	r3, [pc, #48]	; (3404 <lv_obj_invalidate_area+0x110>)
    33d2:	4798      	blx	r3
    33d4:	e7a0      	b.n	3318 <lv_obj_invalidate_area+0x24>
    33d6:	bf00      	nop
    33d8:	0000291f 	.word	0x0000291f
    33dc:	00017618 	.word	0x00017618
    33e0:	00002929 	.word	0x00002929
    33e4:	000032c9 	.word	0x000032c9
    33e8:	00002f29 	.word	0x00002f29
    33ec:	00002f65 	.word	0x00002f65
    33f0:	00002951 	.word	0x00002951
    33f4:	0000296d 	.word	0x0000296d
    33f8:	00002989 	.word	0x00002989
    33fc:	000106dd 	.word	0x000106dd
    3400:	00002f01 	.word	0x00002f01
    3404:	0000563d 	.word	0x0000563d

00003408 <lv_obj_invalidate>:
{
    3408:	b530      	push	{r4, r5, lr}
    340a:	b083      	sub	sp, #12
    340c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    340e:	4b18      	ldr	r3, [pc, #96]	; (3470 <lv_obj_invalidate+0x68>)
    3410:	4798      	blx	r3
    3412:	b338      	cbz	r0, 3464 <lv_obj_invalidate+0x5c>
    lv_coord_t ext_size = obj->ext_draw_pad;
    3414:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    3418:	f104 020f 	add.w	r2, r4, #15
    341c:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    3420:	4669      	mov	r1, sp
        *d8 = *s8;
    3422:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3426:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
    342a:	42aa      	cmp	r2, r5
    342c:	d1f9      	bne.n	3422 <lv_obj_invalidate+0x1a>
    obj_coords.x1 -= ext_size;
    342e:	b29b      	uxth	r3, r3
    3430:	f8bd 2000 	ldrh.w	r2, [sp]
    3434:	1ad2      	subs	r2, r2, r3
    3436:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
    343a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    343e:	1ad2      	subs	r2, r2, r3
    3440:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
    3444:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3448:	441a      	add	r2, r3
    344a:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
    344e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3452:	4413      	add	r3, r2
    3454:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
    3458:	4669      	mov	r1, sp
    345a:	4620      	mov	r0, r4
    345c:	4b05      	ldr	r3, [pc, #20]	; (3474 <lv_obj_invalidate+0x6c>)
    345e:	4798      	blx	r3
}
    3460:	b003      	add	sp, #12
    3462:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3464:	4622      	mov	r2, r4
    3466:	2300      	movs	r3, #0
    3468:	4803      	ldr	r0, [pc, #12]	; (3478 <lv_obj_invalidate+0x70>)
    346a:	4904      	ldr	r1, [pc, #16]	; (347c <lv_obj_invalidate+0x74>)
    346c:	4788      	blx	r1
    346e:	e7fe      	b.n	346e <lv_obj_invalidate+0x66>
    3470:	0000291f 	.word	0x0000291f
    3474:	000032f5 	.word	0x000032f5
    3478:	00017618 	.word	0x00017618
    347c:	00002929 	.word	0x00002929

00003480 <lv_obj_move_foreground>:
{
    3480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3482:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3484:	4b11      	ldr	r3, [pc, #68]	; (34cc <lv_obj_move_foreground+0x4c>)
    3486:	4798      	blx	r3
    3488:	b928      	cbnz	r0, 3496 <lv_obj_move_foreground+0x16>
    348a:	462a      	mov	r2, r5
    348c:	2300      	movs	r3, #0
    348e:	4810      	ldr	r0, [pc, #64]	; (34d0 <lv_obj_move_foreground+0x50>)
    3490:	4910      	ldr	r1, [pc, #64]	; (34d4 <lv_obj_move_foreground+0x54>)
    3492:	4788      	blx	r1
    3494:	e7fe      	b.n	3494 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    3496:	4628      	mov	r0, r5
    3498:	4b0f      	ldr	r3, [pc, #60]	; (34d8 <lv_obj_move_foreground+0x58>)
    349a:	4798      	blx	r3
    349c:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
    349e:	1d06      	adds	r6, r0, #4
    34a0:	4630      	mov	r0, r6
    34a2:	4b0e      	ldr	r3, [pc, #56]	; (34dc <lv_obj_move_foreground+0x5c>)
    34a4:	4798      	blx	r3
    34a6:	4285      	cmp	r5, r0
    34a8:	d00f      	beq.n	34ca <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
    34aa:	4620      	mov	r0, r4
    34ac:	4f0c      	ldr	r7, [pc, #48]	; (34e0 <lv_obj_move_foreground+0x60>)
    34ae:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
    34b0:	2301      	movs	r3, #1
    34b2:	462a      	mov	r2, r5
    34b4:	4631      	mov	r1, r6
    34b6:	4630      	mov	r0, r6
    34b8:	4e0a      	ldr	r6, [pc, #40]	; (34e4 <lv_obj_move_foreground+0x64>)
    34ba:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    34bc:	69e3      	ldr	r3, [r4, #28]
    34be:	462a      	mov	r2, r5
    34c0:	2101      	movs	r1, #1
    34c2:	4620      	mov	r0, r4
    34c4:	4798      	blx	r3
    lv_obj_invalidate(parent);
    34c6:	4620      	mov	r0, r4
    34c8:	47b8      	blx	r7
    34ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34cc:	0000291f 	.word	0x0000291f
    34d0:	00017618 	.word	0x00017618
    34d4:	00002929 	.word	0x00002929
    34d8:	00002f01 	.word	0x00002f01
    34dc:	0001114d 	.word	0x0001114d
    34e0:	00003409 	.word	0x00003409
    34e4:	000112c5 	.word	0x000112c5

000034e8 <lv_obj_set_pos>:
{
    34e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34ec:	b082      	sub	sp, #8
    34ee:	4604      	mov	r4, r0
    34f0:	468a      	mov	sl, r1
    34f2:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    34f4:	4b24      	ldr	r3, [pc, #144]	; (3588 <lv_obj_set_pos+0xa0>)
    34f6:	4798      	blx	r3
    34f8:	2800      	cmp	r0, #0
    34fa:	d03e      	beq.n	357a <lv_obj_set_pos+0x92>
    lv_obj_t * par = obj->parent;
    34fc:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) {
    34fe:	2e00      	cmp	r6, #0
    3500:	d038      	beq.n	3574 <lv_obj_set_pos+0x8c>
    diff.x = x - obj->coords.x1;
    3502:	8a33      	ldrh	r3, [r6, #16]
    3504:	8a22      	ldrh	r2, [r4, #16]
    3506:	1a9b      	subs	r3, r3, r2
    3508:	4453      	add	r3, sl
    350a:	fa1f fa83 	uxth.w	sl, r3
    350e:	fa0f f88a 	sxth.w	r8, sl
    diff.y = y - obj->coords.y1;
    3512:	8a75      	ldrh	r5, [r6, #18]
    3514:	8a63      	ldrh	r3, [r4, #18]
    3516:	1aed      	subs	r5, r5, r3
    3518:	443d      	add	r5, r7
    351a:	b2ad      	uxth	r5, r5
    351c:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
    3520:	f1b8 0f00 	cmp.w	r8, #0
    3524:	d102      	bne.n	352c <lv_obj_set_pos+0x44>
    3526:	f1b9 0f00 	cmp.w	r9, #0
    352a:	d023      	beq.n	3574 <lv_obj_set_pos+0x8c>
    lv_obj_invalidate(obj);
    352c:	4620      	mov	r0, r4
    352e:	4f17      	ldr	r7, [pc, #92]	; (358c <lv_obj_set_pos+0xa4>)
    3530:	47b8      	blx	r7
    lv_obj_get_coords(obj, &ori);
    3532:	4669      	mov	r1, sp
    3534:	4620      	mov	r0, r4
    3536:	4b16      	ldr	r3, [pc, #88]	; (3590 <lv_obj_set_pos+0xa8>)
    3538:	4798      	blx	r3
    obj->coords.x1 += diff.x;
    353a:	8a23      	ldrh	r3, [r4, #16]
    353c:	4453      	add	r3, sl
    353e:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
    3540:	8a63      	ldrh	r3, [r4, #18]
    3542:	442b      	add	r3, r5
    3544:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
    3546:	8aa3      	ldrh	r3, [r4, #20]
    3548:	4453      	add	r3, sl
    354a:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
    354c:	8ae3      	ldrh	r3, [r4, #22]
    354e:	441d      	add	r5, r3
    3550:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
    3552:	464a      	mov	r2, r9
    3554:	4641      	mov	r1, r8
    3556:	4620      	mov	r0, r4
    3558:	4b0e      	ldr	r3, [pc, #56]	; (3594 <lv_obj_set_pos+0xac>)
    355a:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    355c:	69e3      	ldr	r3, [r4, #28]
    355e:	466a      	mov	r2, sp
    3560:	2102      	movs	r1, #2
    3562:	4620      	mov	r0, r4
    3564:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    3566:	69f3      	ldr	r3, [r6, #28]
    3568:	4622      	mov	r2, r4
    356a:	2101      	movs	r1, #1
    356c:	4630      	mov	r0, r6
    356e:	4798      	blx	r3
    lv_obj_invalidate(obj);
    3570:	4620      	mov	r0, r4
    3572:	47b8      	blx	r7
}
    3574:	b002      	add	sp, #8
    3576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    357a:	4622      	mov	r2, r4
    357c:	2300      	movs	r3, #0
    357e:	4806      	ldr	r0, [pc, #24]	; (3598 <lv_obj_set_pos+0xb0>)
    3580:	4906      	ldr	r1, [pc, #24]	; (359c <lv_obj_set_pos+0xb4>)
    3582:	4788      	blx	r1
    3584:	e7fe      	b.n	3584 <lv_obj_set_pos+0x9c>
    3586:	bf00      	nop
    3588:	0000291f 	.word	0x0000291f
    358c:	00003409 	.word	0x00003409
    3590:	0000302d 	.word	0x0000302d
    3594:	00002c81 	.word	0x00002c81
    3598:	00017618 	.word	0x00017618
    359c:	00002929 	.word	0x00002929

000035a0 <lv_obj_align>:
{
    35a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    35a4:	b083      	sub	sp, #12
    35a6:	4604      	mov	r4, r0
    35a8:	460d      	mov	r5, r1
    35aa:	4690      	mov	r8, r2
    35ac:	461f      	mov	r7, r3
    35ae:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35b2:	4b24      	ldr	r3, [pc, #144]	; (3644 <lv_obj_align+0xa4>)
    35b4:	4798      	blx	r3
    35b6:	b928      	cbnz	r0, 35c4 <lv_obj_align+0x24>
    35b8:	4622      	mov	r2, r4
    35ba:	2300      	movs	r3, #0
    35bc:	4822      	ldr	r0, [pc, #136]	; (3648 <lv_obj_align+0xa8>)
    35be:	4923      	ldr	r1, [pc, #140]	; (364c <lv_obj_align+0xac>)
    35c0:	4788      	blx	r1
    35c2:	e7fe      	b.n	35c2 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
    35c4:	b14d      	cbz	r5, 35da <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    35c6:	4628      	mov	r0, r5
    35c8:	4b1e      	ldr	r3, [pc, #120]	; (3644 <lv_obj_align+0xa4>)
    35ca:	4798      	blx	r3
    35cc:	b950      	cbnz	r0, 35e4 <lv_obj_align+0x44>
    35ce:	462a      	mov	r2, r5
    35d0:	2300      	movs	r3, #0
    35d2:	481d      	ldr	r0, [pc, #116]	; (3648 <lv_obj_align+0xa8>)
    35d4:	491d      	ldr	r1, [pc, #116]	; (364c <lv_obj_align+0xac>)
    35d6:	4788      	blx	r1
    35d8:	e7fe      	b.n	35d8 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
    35da:	4620      	mov	r0, r4
    35dc:	4b1c      	ldr	r3, [pc, #112]	; (3650 <lv_obj_align+0xb0>)
    35de:	4798      	blx	r3
    35e0:	4605      	mov	r5, r0
    35e2:	e7f0      	b.n	35c6 <lv_obj_align+0x26>
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
    35e4:	ab01      	add	r3, sp, #4
    35e6:	4642      	mov	r2, r8
    35e8:	f104 0110 	add.w	r1, r4, #16
    35ec:	f105 0010 	add.w	r0, r5, #16
    35f0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 3658 <lv_obj_align+0xb8>
    35f4:	47c8      	blx	r9
    lv_obj_t * par        = lv_obj_get_parent(obj);
    35f6:	4620      	mov	r0, r4
    35f8:	4b15      	ldr	r3, [pc, #84]	; (3650 <lv_obj_align+0xb0>)
    35fa:	4798      	blx	r3
    lv_coord_t par_abs_y  = par->coords.y1;
    35fc:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.y += y_ofs;
    3600:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3604:	4432      	add	r2, r6
    new_pos.x += x_ofs;
    3606:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    360a:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
    360c:	8a00      	ldrh	r0, [r0, #16]
    360e:	1a09      	subs	r1, r1, r0
    3610:	b209      	sxth	r1, r1
    3612:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
    3616:	1ad2      	subs	r2, r2, r3
    3618:	b212      	sxth	r2, r2
    361a:	f8ad 2006 	strh.w	r2, [sp, #6]
    lv_obj_set_pos(obj, new_pos.x, new_pos.y);
    361e:	4620      	mov	r0, r4
    3620:	4b0c      	ldr	r3, [pc, #48]	; (3654 <lv_obj_align+0xb4>)
    3622:	4798      	blx	r3
    obj->realign.align       = align;
    3624:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    3628:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    362c:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
    3630:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
    3632:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3636:	f36f 0341 	bfc	r3, #1, #1
    363a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
    363e:	b003      	add	sp, #12
    3640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3644:	0000291f 	.word	0x0000291f
    3648:	00017618 	.word	0x00017618
    364c:	00002929 	.word	0x00002929
    3650:	00002f01 	.word	0x00002f01
    3654:	000034e9 	.word	0x000034e9
    3658:	000109e9 	.word	0x000109e9

0000365c <lv_obj_align_origo>:
{
    365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3660:	b083      	sub	sp, #12
    3662:	4681      	mov	r9, r0
    3664:	460e      	mov	r6, r1
    3666:	4692      	mov	sl, r2
    3668:	9301      	str	r3, [sp, #4]
    366a:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    366e:	4ba2      	ldr	r3, [pc, #648]	; (38f8 <lv_obj_align_origo+0x29c>)
    3670:	4798      	blx	r3
    3672:	b928      	cbnz	r0, 3680 <lv_obj_align_origo+0x24>
    3674:	464a      	mov	r2, r9
    3676:	2300      	movs	r3, #0
    3678:	48a0      	ldr	r0, [pc, #640]	; (38fc <lv_obj_align_origo+0x2a0>)
    367a:	49a1      	ldr	r1, [pc, #644]	; (3900 <lv_obj_align_origo+0x2a4>)
    367c:	4788      	blx	r1
    367e:	e7fe      	b.n	367e <lv_obj_align_origo+0x22>
    lv_coord_t new_x = lv_obj_get_x(obj);
    3680:	4648      	mov	r0, r9
    3682:	4ba0      	ldr	r3, [pc, #640]	; (3904 <lv_obj_align_origo+0x2a8>)
    3684:	4798      	blx	r3
    3686:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    3688:	4648      	mov	r0, r9
    368a:	4b9f      	ldr	r3, [pc, #636]	; (3908 <lv_obj_align_origo+0x2ac>)
    368c:	4798      	blx	r3
    368e:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    3690:	4648      	mov	r0, r9
    3692:	4b9e      	ldr	r3, [pc, #632]	; (390c <lv_obj_align_origo+0x2b0>)
    3694:	4798      	blx	r3
    3696:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    369a:	f340 084f 	sbfx	r8, r0, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    369e:	4648      	mov	r0, r9
    36a0:	4b9b      	ldr	r3, [pc, #620]	; (3910 <lv_obj_align_origo+0x2b4>)
    36a2:	4798      	blx	r3
    36a4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    36a8:	f340 074f 	sbfx	r7, r0, #1, #16
    if(base == NULL) {
    36ac:	b1ee      	cbz	r6, 36ea <lv_obj_align_origo+0x8e>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    36ae:	4630      	mov	r0, r6
    36b0:	4b91      	ldr	r3, [pc, #580]	; (38f8 <lv_obj_align_origo+0x29c>)
    36b2:	4798      	blx	r3
    36b4:	b1f0      	cbz	r0, 36f4 <lv_obj_align_origo+0x98>
    switch(align) {
    36b6:	f1ba 0f14 	cmp.w	sl, #20
    36ba:	d831      	bhi.n	3720 <lv_obj_align_origo+0xc4>
    36bc:	e8df f01a 	tbh	[pc, sl, lsl #1]
    36c0:	00540020 	.word	0x00540020
    36c4:	0065005a 	.word	0x0065005a
    36c8:	0077006e 	.word	0x0077006e
    36cc:	00910085 	.word	0x00910085
    36d0:	00ac009d 	.word	0x00ac009d
    36d4:	00bd00b2 	.word	0x00bd00b2
    36d8:	00cf00c6 	.word	0x00cf00c6
    36dc:	00e900dd 	.word	0x00e900dd
    36e0:	00fb00ef 	.word	0x00fb00ef
    36e4:	010d0104 	.word	0x010d0104
    36e8:	012e      	.short	0x012e
        base = lv_obj_get_parent(obj);
    36ea:	4648      	mov	r0, r9
    36ec:	4b89      	ldr	r3, [pc, #548]	; (3914 <lv_obj_align_origo+0x2b8>)
    36ee:	4798      	blx	r3
    36f0:	4606      	mov	r6, r0
    36f2:	e7dc      	b.n	36ae <lv_obj_align_origo+0x52>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    36f4:	4632      	mov	r2, r6
    36f6:	2300      	movs	r3, #0
    36f8:	4880      	ldr	r0, [pc, #512]	; (38fc <lv_obj_align_origo+0x2a0>)
    36fa:	4981      	ldr	r1, [pc, #516]	; (3900 <lv_obj_align_origo+0x2a4>)
    36fc:	4788      	blx	r1
    36fe:	e7fe      	b.n	36fe <lv_obj_align_origo+0xa2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3700:	4630      	mov	r0, r6
    3702:	4b82      	ldr	r3, [pc, #520]	; (390c <lv_obj_align_origo+0x2b0>)
    3704:	4798      	blx	r3
    3706:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    370a:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    370e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3710:	4630      	mov	r0, r6
    3712:	4b7f      	ldr	r3, [pc, #508]	; (3910 <lv_obj_align_origo+0x2b4>)
    3714:	4798      	blx	r3
    3716:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    371a:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    371e:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
    3720:	4648      	mov	r0, r9
    3722:	4b7c      	ldr	r3, [pc, #496]	; (3914 <lv_obj_align_origo+0x2b8>)
    3724:	4798      	blx	r3
    new_x += x_ofs + base_abs_x;
    3726:	8a31      	ldrh	r1, [r6, #16]
    3728:	9f01      	ldr	r7, [sp, #4]
    372a:	4439      	add	r1, r7
    372c:	4429      	add	r1, r5
    new_x -= par_abs_x;
    372e:	8a03      	ldrh	r3, [r0, #16]
    3730:	1ac9      	subs	r1, r1, r3
    new_y += y_ofs + base_abs_y;
    3732:	8a72      	ldrh	r2, [r6, #18]
    3734:	445a      	add	r2, fp
    3736:	4422      	add	r2, r4
    new_y -= par_abs_y;
    3738:	8a43      	ldrh	r3, [r0, #18]
    373a:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
    373c:	b212      	sxth	r2, r2
    373e:	b209      	sxth	r1, r1
    3740:	4648      	mov	r0, r9
    3742:	4b75      	ldr	r3, [pc, #468]	; (3918 <lv_obj_align_origo+0x2bc>)
    3744:	4798      	blx	r3
    obj->realign.align       = align;
    3746:	f889 a048 	strb.w	sl, [r9, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    374a:	f8a9 7044 	strh.w	r7, [r9, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    374e:	f8a9 b046 	strh.w	fp, [r9, #70]	; 0x46
    obj->realign.base        = base;
    3752:	f8c9 6040 	str.w	r6, [r9, #64]	; 0x40
    obj->realign.origo_align = 1;
    3756:	f899 3049 	ldrb.w	r3, [r9, #73]	; 0x49
    375a:	f043 0302 	orr.w	r3, r3, #2
    375e:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
}
    3762:	b003      	add	sp, #12
    3764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = -obj_w_half;
    3768:	f1c8 0500 	rsb	r5, r8, #0
    376c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    376e:	427c      	negs	r4, r7
    3770:	b224      	sxth	r4, r4
            break;
    3772:	e7d5      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3774:	4630      	mov	r0, r6
    3776:	4b65      	ldr	r3, [pc, #404]	; (390c <lv_obj_align_origo+0x2b0>)
    3778:	4798      	blx	r3
    377a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    377e:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3782:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3784:	427c      	negs	r4, r7
    3786:	b224      	sxth	r4, r4
            break;
    3788:	e7ca      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    378a:	4630      	mov	r0, r6
    378c:	4b5f      	ldr	r3, [pc, #380]	; (390c <lv_obj_align_origo+0x2b0>)
    378e:	4798      	blx	r3
    3790:	eba0 0008 	sub.w	r0, r0, r8
    3794:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3796:	427c      	negs	r4, r7
    3798:	b224      	sxth	r4, r4
            break;
    379a:	e7c1      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    379c:	f1c8 0500 	rsb	r5, r8, #0
    37a0:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    37a2:	4630      	mov	r0, r6
    37a4:	4b5a      	ldr	r3, [pc, #360]	; (3910 <lv_obj_align_origo+0x2b4>)
    37a6:	4798      	blx	r3
    37a8:	1bc0      	subs	r0, r0, r7
    37aa:	b204      	sxth	r4, r0
            break;
    37ac:	e7b8      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    37ae:	4630      	mov	r0, r6
    37b0:	4b56      	ldr	r3, [pc, #344]	; (390c <lv_obj_align_origo+0x2b0>)
    37b2:	4798      	blx	r3
    37b4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    37b8:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    37bc:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    37be:	4630      	mov	r0, r6
    37c0:	4b53      	ldr	r3, [pc, #332]	; (3910 <lv_obj_align_origo+0x2b4>)
    37c2:	4798      	blx	r3
    37c4:	1bc0      	subs	r0, r0, r7
    37c6:	b204      	sxth	r4, r0
            break;
    37c8:	e7aa      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    37ca:	4630      	mov	r0, r6
    37cc:	4b4f      	ldr	r3, [pc, #316]	; (390c <lv_obj_align_origo+0x2b0>)
    37ce:	4798      	blx	r3
    37d0:	eba0 0008 	sub.w	r0, r0, r8
    37d4:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    37d6:	4630      	mov	r0, r6
    37d8:	4b4d      	ldr	r3, [pc, #308]	; (3910 <lv_obj_align_origo+0x2b4>)
    37da:	4798      	blx	r3
    37dc:	1bc0      	subs	r0, r0, r7
    37de:	b204      	sxth	r4, r0
            break;
    37e0:	e79e      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    37e2:	f1c8 0500 	rsb	r5, r8, #0
    37e6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    37e8:	4630      	mov	r0, r6
    37ea:	4b49      	ldr	r3, [pc, #292]	; (3910 <lv_obj_align_origo+0x2b4>)
    37ec:	4798      	blx	r3
    37ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    37f2:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    37f6:	b224      	sxth	r4, r4
            break;
    37f8:	e792      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    37fa:	4630      	mov	r0, r6
    37fc:	4b43      	ldr	r3, [pc, #268]	; (390c <lv_obj_align_origo+0x2b0>)
    37fe:	4798      	blx	r3
    3800:	eba0 0008 	sub.w	r0, r0, r8
    3804:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3806:	4630      	mov	r0, r6
    3808:	4b41      	ldr	r3, [pc, #260]	; (3910 <lv_obj_align_origo+0x2b4>)
    380a:	4798      	blx	r3
    380c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3810:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3814:	b224      	sxth	r4, r4
            break;
    3816:	e783      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    3818:	f1c8 0500 	rsb	r5, r8, #0
    381c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    381e:	427c      	negs	r4, r7
    3820:	b224      	sxth	r4, r4
            break;
    3822:	e77d      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3824:	4630      	mov	r0, r6
    3826:	4b39      	ldr	r3, [pc, #228]	; (390c <lv_obj_align_origo+0x2b0>)
    3828:	4798      	blx	r3
    382a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    382e:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3832:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3834:	427c      	negs	r4, r7
    3836:	b224      	sxth	r4, r4
            break;
    3838:	e772      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    383a:	4630      	mov	r0, r6
    383c:	4b33      	ldr	r3, [pc, #204]	; (390c <lv_obj_align_origo+0x2b0>)
    383e:	4798      	blx	r3
    3840:	eba0 0008 	sub.w	r0, r0, r8
    3844:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3846:	427c      	negs	r4, r7
    3848:	b224      	sxth	r4, r4
            break;
    384a:	e769      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    384c:	f1c8 0500 	rsb	r5, r8, #0
    3850:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3852:	4630      	mov	r0, r6
    3854:	4b2e      	ldr	r3, [pc, #184]	; (3910 <lv_obj_align_origo+0x2b4>)
    3856:	4798      	blx	r3
    3858:	1bc0      	subs	r0, r0, r7
    385a:	b204      	sxth	r4, r0
            break;
    385c:	e760      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    385e:	4630      	mov	r0, r6
    3860:	4b2a      	ldr	r3, [pc, #168]	; (390c <lv_obj_align_origo+0x2b0>)
    3862:	4798      	blx	r3
    3864:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3868:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    386c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    386e:	4630      	mov	r0, r6
    3870:	4b27      	ldr	r3, [pc, #156]	; (3910 <lv_obj_align_origo+0x2b4>)
    3872:	4798      	blx	r3
    3874:	1bc0      	subs	r0, r0, r7
    3876:	b204      	sxth	r4, r0
            break;
    3878:	e752      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    387a:	4630      	mov	r0, r6
    387c:	4b23      	ldr	r3, [pc, #140]	; (390c <lv_obj_align_origo+0x2b0>)
    387e:	4798      	blx	r3
    3880:	eba0 0008 	sub.w	r0, r0, r8
    3884:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    3886:	4630      	mov	r0, r6
    3888:	4b21      	ldr	r3, [pc, #132]	; (3910 <lv_obj_align_origo+0x2b4>)
    388a:	4798      	blx	r3
    388c:	1bc0      	subs	r0, r0, r7
    388e:	b204      	sxth	r4, r0
            break;
    3890:	e746      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    3892:	f1c8 0500 	rsb	r5, r8, #0
    3896:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3898:	427c      	negs	r4, r7
    389a:	b224      	sxth	r4, r4
            break;
    389c:	e740      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    389e:	f1c8 0500 	rsb	r5, r8, #0
    38a2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    38a4:	4630      	mov	r0, r6
    38a6:	4b1a      	ldr	r3, [pc, #104]	; (3910 <lv_obj_align_origo+0x2b4>)
    38a8:	4798      	blx	r3
    38aa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    38ae:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    38b2:	b224      	sxth	r4, r4
            break;
    38b4:	e734      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = -obj_w_half;
    38b6:	f1c8 0500 	rsb	r5, r8, #0
    38ba:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    38bc:	4630      	mov	r0, r6
    38be:	4b14      	ldr	r3, [pc, #80]	; (3910 <lv_obj_align_origo+0x2b4>)
    38c0:	4798      	blx	r3
    38c2:	1bc0      	subs	r0, r0, r7
    38c4:	b204      	sxth	r4, r0
            break;
    38c6:	e72b      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    38c8:	4630      	mov	r0, r6
    38ca:	4b10      	ldr	r3, [pc, #64]	; (390c <lv_obj_align_origo+0x2b0>)
    38cc:	4798      	blx	r3
    38ce:	eba0 0008 	sub.w	r0, r0, r8
    38d2:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    38d4:	427c      	negs	r4, r7
    38d6:	b224      	sxth	r4, r4
            break;
    38d8:	e722      	b.n	3720 <lv_obj_align_origo+0xc4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    38da:	4630      	mov	r0, r6
    38dc:	4b0b      	ldr	r3, [pc, #44]	; (390c <lv_obj_align_origo+0x2b0>)
    38de:	4798      	blx	r3
    38e0:	eba0 0008 	sub.w	r0, r0, r8
    38e4:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    38e6:	4630      	mov	r0, r6
    38e8:	4b09      	ldr	r3, [pc, #36]	; (3910 <lv_obj_align_origo+0x2b4>)
    38ea:	4798      	blx	r3
    38ec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    38f0:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    38f4:	b224      	sxth	r4, r4
            break;
    38f6:	e713      	b.n	3720 <lv_obj_align_origo+0xc4>
    38f8:	0000291f 	.word	0x0000291f
    38fc:	00017618 	.word	0x00017618
    3900:	00002929 	.word	0x00002929
    3904:	00003069 	.word	0x00003069
    3908:	000030a9 	.word	0x000030a9
    390c:	000030e9 	.word	0x000030e9
    3910:	00003119 	.word	0x00003119
    3914:	00002f01 	.word	0x00002f01
    3918:	000034e9 	.word	0x000034e9
            new_x = lv_obj_get_width(base) - obj_w_half;
    391c:	4630      	mov	r0, r6
    391e:	4b05      	ldr	r3, [pc, #20]	; (3934 <lv_obj_align_origo+0x2d8>)
    3920:	4798      	blx	r3
    3922:	eba0 0008 	sub.w	r0, r0, r8
    3926:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    3928:	4630      	mov	r0, r6
    392a:	4b03      	ldr	r3, [pc, #12]	; (3938 <lv_obj_align_origo+0x2dc>)
    392c:	4798      	blx	r3
    392e:	1bc0      	subs	r0, r0, r7
    3930:	b204      	sxth	r4, r0
            break;
    3932:	e6f5      	b.n	3720 <lv_obj_align_origo+0xc4>
    3934:	000030e9 	.word	0x000030e9
    3938:	00003119 	.word	0x00003119

0000393c <lv_obj_realign>:
{
    393c:	b510      	push	{r4, lr}
    393e:	b082      	sub	sp, #8
    3940:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3942:	4b0e      	ldr	r3, [pc, #56]	; (397c <lv_obj_realign+0x40>)
    3944:	4798      	blx	r3
    3946:	b190      	cbz	r0, 396e <lv_obj_realign+0x32>
    if(obj->realign.origo_align)
    3948:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    394c:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    3950:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    3954:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    3958:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    395c:	9100      	str	r1, [sp, #0]
    395e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3960:	4620      	mov	r0, r4
    3962:	bf14      	ite	ne
    3964:	4c06      	ldrne	r4, [pc, #24]	; (3980 <lv_obj_realign+0x44>)
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    3966:	4c07      	ldreq	r4, [pc, #28]	; (3984 <lv_obj_realign+0x48>)
    3968:	47a0      	blx	r4
}
    396a:	b002      	add	sp, #8
    396c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    396e:	4622      	mov	r2, r4
    3970:	2300      	movs	r3, #0
    3972:	4805      	ldr	r0, [pc, #20]	; (3988 <lv_obj_realign+0x4c>)
    3974:	4905      	ldr	r1, [pc, #20]	; (398c <lv_obj_realign+0x50>)
    3976:	4788      	blx	r1
    3978:	e7fe      	b.n	3978 <lv_obj_realign+0x3c>
    397a:	bf00      	nop
    397c:	0000291f 	.word	0x0000291f
    3980:	0000365d 	.word	0x0000365d
    3984:	000035a1 	.word	0x000035a1
    3988:	00017618 	.word	0x00017618
    398c:	00002929 	.word	0x00002929

00003990 <refresh_children_style>:
{
    3990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3994:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    3996:	2100      	movs	r1, #0
    3998:	4b0d      	ldr	r3, [pc, #52]	; (39d0 <refresh_children_style+0x40>)
    399a:	4798      	blx	r3
    while(child != NULL) {
    399c:	b1b0      	cbz	r0, 39cc <refresh_children_style+0x3c>
    399e:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
    39a0:	4d0c      	ldr	r5, [pc, #48]	; (39d4 <refresh_children_style+0x44>)
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    39a2:	f04f 0800 	mov.w	r8, #0
        child = lv_obj_get_child(obj, child);
    39a6:	4f0a      	ldr	r7, [pc, #40]	; (39d0 <refresh_children_style+0x40>)
        lv_obj_invalidate(child);
    39a8:	4620      	mov	r0, r4
    39aa:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    39ac:	69e3      	ldr	r3, [r4, #28]
    39ae:	4642      	mov	r2, r8
    39b0:	2104      	movs	r1, #4
    39b2:	4620      	mov	r0, r4
    39b4:	4798      	blx	r3
        lv_obj_invalidate(child);
    39b6:	4620      	mov	r0, r4
    39b8:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
    39ba:	4620      	mov	r0, r4
    39bc:	f7ff ffe8 	bl	3990 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
    39c0:	4621      	mov	r1, r4
    39c2:	4630      	mov	r0, r6
    39c4:	47b8      	blx	r7
    while(child != NULL) {
    39c6:	4604      	mov	r4, r0
    39c8:	2800      	cmp	r0, #0
    39ca:	d1ed      	bne.n	39a8 <refresh_children_style+0x18>
    39cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39d0:	00002fed 	.word	0x00002fed
    39d4:	00003409 	.word	0x00003409

000039d8 <lv_obj_refresh_style>:
{
    39d8:	b538      	push	{r3, r4, r5, lr}
    39da:	4605      	mov	r5, r0
    39dc:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    39de:	4b32      	ldr	r3, [pc, #200]	; (3aa8 <lv_obj_refresh_style+0xd0>)
    39e0:	4798      	blx	r3
    39e2:	b198      	cbz	r0, 3a0c <lv_obj_refresh_style+0x34>
    switch(prop) {
    39e4:	2c71      	cmp	r4, #113	; 0x71
    39e6:	d83d      	bhi.n	3a64 <lv_obj_refresh_style+0x8c>
    39e8:	2c70      	cmp	r4, #112	; 0x70
    39ea:	d21b      	bcs.n	3a24 <lv_obj_refresh_style+0x4c>
    39ec:	2c41      	cmp	r4, #65	; 0x41
    39ee:	d813      	bhi.n	3a18 <lv_obj_refresh_style+0x40>
    39f0:	2c40      	cmp	r4, #64	; 0x40
    39f2:	d217      	bcs.n	3a24 <lv_obj_refresh_style+0x4c>
    39f4:	2c02      	cmp	r4, #2
    39f6:	d305      	bcc.n	3a04 <lv_obj_refresh_style+0x2c>
    39f8:	2c07      	cmp	r4, #7
    39fa:	d913      	bls.n	3a24 <lv_obj_refresh_style+0x4c>
    39fc:	f1a4 0310 	sub.w	r3, r4, #16
    3a00:	2b08      	cmp	r3, #8
    3a02:	d90f      	bls.n	3a24 <lv_obj_refresh_style+0x4c>
        lv_obj_invalidate(obj);
    3a04:	4628      	mov	r0, r5
    3a06:	4b29      	ldr	r3, [pc, #164]	; (3aac <lv_obj_refresh_style+0xd4>)
    3a08:	4798      	blx	r3
}
    3a0a:	e027      	b.n	3a5c <lv_obj_refresh_style+0x84>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a0c:	462a      	mov	r2, r5
    3a0e:	2300      	movs	r3, #0
    3a10:	4827      	ldr	r0, [pc, #156]	; (3ab0 <lv_obj_refresh_style+0xd8>)
    3a12:	4928      	ldr	r1, [pc, #160]	; (3ab4 <lv_obj_refresh_style+0xdc>)
    3a14:	4788      	blx	r1
    3a16:	e7fe      	b.n	3a16 <lv_obj_refresh_style+0x3e>
    switch(prop) {
    3a18:	2c53      	cmp	r4, #83	; 0x53
    3a1a:	d820      	bhi.n	3a5e <lv_obj_refresh_style+0x86>
    3a1c:	2c50      	cmp	r4, #80	; 0x50
    3a1e:	d201      	bcs.n	3a24 <lv_obj_refresh_style+0x4c>
    3a20:	2c4c      	cmp	r4, #76	; 0x4c
    3a22:	d1ef      	bne.n	3a04 <lv_obj_refresh_style+0x2c>
        lv_obj_invalidate(obj);
    3a24:	4628      	mov	r0, r5
    3a26:	4b21      	ldr	r3, [pc, #132]	; (3aac <lv_obj_refresh_style+0xd4>)
    3a28:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    3a2a:	69eb      	ldr	r3, [r5, #28]
    3a2c:	2200      	movs	r2, #0
    3a2e:	2104      	movs	r1, #4
    3a30:	4628      	mov	r0, r5
    3a32:	4798      	blx	r3
        switch(prop) {
    3a34:	2c15      	cmp	r4, #21
    3a36:	d309      	bcc.n	3a4c <lv_obj_refresh_style+0x74>
    3a38:	2c18      	cmp	r4, #24
    3a3a:	d901      	bls.n	3a40 <lv_obj_refresh_style+0x68>
    3a3c:	2cff      	cmp	r4, #255	; 0xff
    3a3e:	d105      	bne.n	3a4c <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
    3a40:	6828      	ldr	r0, [r5, #0]
    3a42:	b118      	cbz	r0, 3a4c <lv_obj_refresh_style+0x74>
    3a44:	69c3      	ldr	r3, [r0, #28]
    3a46:	2200      	movs	r2, #0
    3a48:	2101      	movs	r1, #1
    3a4a:	4798      	blx	r3
        lv_obj_invalidate(obj);
    3a4c:	4628      	mov	r0, r5
    3a4e:	4b17      	ldr	r3, [pc, #92]	; (3aac <lv_obj_refresh_style+0xd4>)
    3a50:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    3a52:	2cff      	cmp	r4, #255	; 0xff
    3a54:	d023      	beq.n	3a9e <lv_obj_refresh_style+0xc6>
    3a56:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    3a5a:	d120      	bne.n	3a9e <lv_obj_refresh_style+0xc6>
    3a5c:	bd38      	pop	{r3, r4, r5, pc}
    switch(prop) {
    3a5e:	2c5c      	cmp	r4, #92	; 0x5c
    3a60:	d1d0      	bne.n	3a04 <lv_obj_refresh_style+0x2c>
    3a62:	e7df      	b.n	3a24 <lv_obj_refresh_style+0x4c>
    3a64:	2c7f      	cmp	r4, #127	; 0x7f
    3a66:	d90c      	bls.n	3a82 <lv_obj_refresh_style+0xaa>
    3a68:	f248 0381 	movw	r3, #32897	; 0x8081
    3a6c:	429c      	cmp	r4, r3
    3a6e:	d811      	bhi.n	3a94 <lv_obj_refresh_style+0xbc>
    3a70:	f248 0380 	movw	r3, #32896	; 0x8080
    3a74:	429c      	cmp	r4, r3
    3a76:	d2d5      	bcs.n	3a24 <lv_obj_refresh_style+0x4c>
    3a78:	2c90      	cmp	r4, #144	; 0x90
    3a7a:	d0d3      	beq.n	3a24 <lv_obj_refresh_style+0x4c>
    3a7c:	2cff      	cmp	r4, #255	; 0xff
    3a7e:	d1c1      	bne.n	3a04 <lv_obj_refresh_style+0x2c>
    3a80:	e7d0      	b.n	3a24 <lv_obj_refresh_style+0x4c>
    3a82:	2c7e      	cmp	r4, #126	; 0x7e
    3a84:	d2ce      	bcs.n	3a24 <lv_obj_refresh_style+0x4c>
    3a86:	2c73      	cmp	r4, #115	; 0x73
    3a88:	d3bc      	bcc.n	3a04 <lv_obj_refresh_style+0x2c>
    3a8a:	2c75      	cmp	r4, #117	; 0x75
    3a8c:	d9ca      	bls.n	3a24 <lv_obj_refresh_style+0x4c>
    3a8e:	2c7c      	cmp	r4, #124	; 0x7c
    3a90:	d1b8      	bne.n	3a04 <lv_obj_refresh_style+0x2c>
    3a92:	e7c7      	b.n	3a24 <lv_obj_refresh_style+0x4c>
    3a94:	f248 038e 	movw	r3, #32910	; 0x808e
    3a98:	429c      	cmp	r4, r3
    3a9a:	d1b3      	bne.n	3a04 <lv_obj_refresh_style+0x2c>
    3a9c:	e7c2      	b.n	3a24 <lv_obj_refresh_style+0x4c>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    3a9e:	4628      	mov	r0, r5
    3aa0:	4b05      	ldr	r3, [pc, #20]	; (3ab8 <lv_obj_refresh_style+0xe0>)
    3aa2:	4798      	blx	r3
    3aa4:	bd38      	pop	{r3, r4, r5, pc}
    3aa6:	bf00      	nop
    3aa8:	0000291f 	.word	0x0000291f
    3aac:	00003409 	.word	0x00003409
    3ab0:	00017618 	.word	0x00017618
    3ab4:	00002929 	.word	0x00002929
    3ab8:	00003991 	.word	0x00003991

00003abc <lv_obj_reset_style_list>:
{
    3abc:	b510      	push	{r4, lr}
    3abe:	4604      	mov	r4, r0
    lv_obj_clean_style_list(obj, part);
    3ac0:	4b03      	ldr	r3, [pc, #12]	; (3ad0 <lv_obj_reset_style_list+0x14>)
    3ac2:	4798      	blx	r3
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    3ac4:	21ff      	movs	r1, #255	; 0xff
    3ac6:	4620      	mov	r0, r4
    3ac8:	4b02      	ldr	r3, [pc, #8]	; (3ad4 <lv_obj_reset_style_list+0x18>)
    3aca:	4798      	blx	r3
    3acc:	bd10      	pop	{r4, pc}
    3ace:	bf00      	nop
    3ad0:	00003219 	.word	0x00003219
    3ad4:	000039d9 	.word	0x000039d9

00003ad8 <report_style_mod_core>:
{
    3ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3adc:	4604      	mov	r4, r0
    3ade:	460f      	mov	r7, r1
    3ae0:	2600      	movs	r6, #0
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    3ae2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3b6c <report_style_mod_core+0x94>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3ae6:	4635      	mov	r5, r6
                lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    3ae8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3b70 <report_style_mod_core+0x98>
    3aec:	e005      	b.n	3afa <report_style_mod_core+0x22>
    3aee:	21ff      	movs	r1, #255	; 0xff
    3af0:	4638      	mov	r0, r7
    3af2:	47c8      	blx	r9
    3af4:	3601      	adds	r6, #1
    for(part_sub = 0; part_sub != _LV_OBJ_PART_REAL_LAST; part_sub++) {
    3af6:	2e40      	cmp	r6, #64	; 0x40
    3af8:	d022      	beq.n	3b40 <report_style_mod_core+0x68>
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    3afa:	b2f1      	uxtb	r1, r6
    3afc:	4638      	mov	r0, r7
    3afe:	47c0      	blx	r8
        if(dsc == NULL) break;
    3b00:	4686      	mov	lr, r0
    3b02:	b1e8      	cbz	r0, 3b40 <report_style_mod_core+0x68>
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    3b04:	7901      	ldrb	r1, [r0, #4]
    3b06:	2900      	cmp	r1, #0
    3b08:	d0f4      	beq.n	3af4 <report_style_mod_core+0x1c>
    if(list->has_trans && list->skip_trans) id++;
    3b0a:	f890 c005 	ldrb.w	ip, [r0, #5]
    3b0e:	f00c 0c06 	and.w	ip, ip, #6
    3b12:	2300      	movs	r3, #0
    3b14:	b2da      	uxtb	r2, r3
    3b16:	f1bc 0f06 	cmp.w	ip, #6
    3b1a:	bf04      	itt	eq
    3b1c:	3201      	addeq	r2, #1
    3b1e:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3b20:	428a      	cmp	r2, r1
    return list->style_list[id];
    3b22:	bf3a      	itte	cc
    3b24:	f8de 0000 	ldrcc.w	r0, [lr]
    3b28:	f850 2022 	ldrcc.w	r2, [r0, r2, lsl #2]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    3b2c:	462a      	movcs	r2, r5
            if(class == style || style == NULL) {
    3b2e:	4294      	cmp	r4, r2
    3b30:	d0dd      	beq.n	3aee <report_style_mod_core+0x16>
    3b32:	2c00      	cmp	r4, #0
    3b34:	d0db      	beq.n	3aee <report_style_mod_core+0x16>
    3b36:	3301      	adds	r3, #1
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    3b38:	b2da      	uxtb	r2, r3
    3b3a:	428a      	cmp	r2, r1
    3b3c:	d3ea      	bcc.n	3b14 <report_style_mod_core+0x3c>
    3b3e:	e7d9      	b.n	3af4 <report_style_mod_core+0x1c>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    3b40:	2100      	movs	r1, #0
    3b42:	4638      	mov	r0, r7
    3b44:	4b08      	ldr	r3, [pc, #32]	; (3b68 <report_style_mod_core+0x90>)
    3b46:	4798      	blx	r3
    while(child) {
    3b48:	4605      	mov	r5, r0
    3b4a:	b150      	cbz	r0, 3b62 <report_style_mod_core+0x8a>
        child = lv_obj_get_child(obj, child);
    3b4c:	4e06      	ldr	r6, [pc, #24]	; (3b68 <report_style_mod_core+0x90>)
        report_style_mod_core(style, child);
    3b4e:	4629      	mov	r1, r5
    3b50:	4620      	mov	r0, r4
    3b52:	f7ff ffc1 	bl	3ad8 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
    3b56:	4629      	mov	r1, r5
    3b58:	4638      	mov	r0, r7
    3b5a:	47b0      	blx	r6
    while(child) {
    3b5c:	4605      	mov	r5, r0
    3b5e:	2800      	cmp	r0, #0
    3b60:	d1f5      	bne.n	3b4e <report_style_mod_core+0x76>
    3b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3b66:	bf00      	nop
    3b68:	00002fed 	.word	0x00002fed
    3b6c:	00003149 	.word	0x00003149
    3b70:	000039d9 	.word	0x000039d9

00003b74 <lv_obj_report_style_mod>:
{
    3b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b78:	4680      	mov	r8, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
    3b7a:	2000      	movs	r0, #0
    3b7c:	4b0f      	ldr	r3, [pc, #60]	; (3bbc <lv_obj_report_style_mod+0x48>)
    3b7e:	4798      	blx	r3
    while(d) {
    3b80:	b1c8      	cbz	r0, 3bb6 <lv_obj_report_style_mod+0x42>
    3b82:	4681      	mov	r9, r0
        _LV_LL_READ(d->scr_ll, i) {
    3b84:	f8df a040 	ldr.w	sl, [pc, #64]	; 3bc8 <lv_obj_report_style_mod+0x54>
            report_style_mod_core(style, i);
    3b88:	4f0d      	ldr	r7, [pc, #52]	; (3bc0 <lv_obj_report_style_mod+0x4c>)
        _LV_LL_READ(d->scr_ll, i) {
    3b8a:	4e0e      	ldr	r6, [pc, #56]	; (3bc4 <lv_obj_report_style_mod+0x50>)
    3b8c:	f109 0530 	add.w	r5, r9, #48	; 0x30
    3b90:	4628      	mov	r0, r5
    3b92:	47d0      	blx	sl
    3b94:	4604      	mov	r4, r0
    3b96:	b140      	cbz	r0, 3baa <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
    3b98:	4621      	mov	r1, r4
    3b9a:	4640      	mov	r0, r8
    3b9c:	47b8      	blx	r7
        _LV_LL_READ(d->scr_ll, i) {
    3b9e:	4621      	mov	r1, r4
    3ba0:	4628      	mov	r0, r5
    3ba2:	47b0      	blx	r6
    3ba4:	4604      	mov	r4, r0
    3ba6:	2800      	cmp	r0, #0
    3ba8:	d1f6      	bne.n	3b98 <lv_obj_report_style_mod+0x24>
        d = lv_disp_get_next(d);
    3baa:	4648      	mov	r0, r9
    3bac:	4b03      	ldr	r3, [pc, #12]	; (3bbc <lv_obj_report_style_mod+0x48>)
    3bae:	4798      	blx	r3
    while(d) {
    3bb0:	4681      	mov	r9, r0
    3bb2:	2800      	cmp	r0, #0
    3bb4:	d1ea      	bne.n	3b8c <lv_obj_report_style_mod+0x18>
    3bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bba:	bf00      	nop
    3bbc:	000101fd 	.word	0x000101fd
    3bc0:	00003ad9 	.word	0x00003ad9
    3bc4:	00011161 	.word	0x00011161
    3bc8:	0001114d 	.word	0x0001114d

00003bcc <trans_anim_cb>:
{
    3bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bce:	4604      	mov	r4, r0
    3bd0:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3bd2:	7981      	ldrb	r1, [r0, #6]
    3bd4:	6800      	ldr	r0, [r0, #0]
    3bd6:	4b42      	ldr	r3, [pc, #264]	; (3ce0 <trans_anim_cb+0x114>)
    3bd8:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
    3bda:	4b42      	ldr	r3, [pc, #264]	; (3ce4 <trans_anim_cb+0x118>)
    3bdc:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
    3bde:	88a1      	ldrh	r1, [r4, #4]
    3be0:	f001 030f 	and.w	r3, r1, #15
    3be4:	2b08      	cmp	r3, #8
    3be6:	dc19      	bgt.n	3c1c <trans_anim_cb+0x50>
        if(v == 0) x = tr->start_value._int;
    3be8:	b945      	cbnz	r5, 3bfc <trans_anim_cb+0x30>
    3bea:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
    3bee:	4b3e      	ldr	r3, [pc, #248]	; (3ce8 <trans_anim_cb+0x11c>)
    3bf0:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->prop);
    3bf2:	88a1      	ldrh	r1, [r4, #4]
    3bf4:	6820      	ldr	r0, [r4, #0]
    3bf6:	4b3d      	ldr	r3, [pc, #244]	; (3cec <trans_anim_cb+0x120>)
    3bf8:	4798      	blx	r3
    3bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if(v == 255) x = tr->end_value._int;
    3bfc:	2dff      	cmp	r5, #255	; 0xff
    3bfe:	d00a      	beq.n	3c16 <trans_anim_cb+0x4a>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
    3c00:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    3c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3c08:	1a9b      	subs	r3, r3, r2
    3c0a:	fb05 f503 	mul.w	r5, r5, r3
    3c0e:	eb02 2225 	add.w	r2, r2, r5, asr #8
    3c12:	b212      	sxth	r2, r2
    3c14:	e7eb      	b.n	3bee <trans_anim_cb+0x22>
        else if(v == 255) x = tr->end_value._int;
    3c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    3c1a:	e7e8      	b.n	3bee <trans_anim_cb+0x22>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    3c1c:	2b0b      	cmp	r3, #11
    3c1e:	dc43      	bgt.n	3ca8 <trans_anim_cb+0xdc>
        if(v <= 0) x = tr->start_value._color;
    3c20:	2d00      	cmp	r5, #0
    3c22:	dd05      	ble.n	3c30 <trans_anim_cb+0x64>
        else if(v >= 255) x = tr->end_value._color;
    3c24:	2dfe      	cmp	r5, #254	; 0xfe
    3c26:	dd05      	ble.n	3c34 <trans_anim_cb+0x68>
    3c28:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
    3c2a:	4b31      	ldr	r3, [pc, #196]	; (3cf0 <trans_anim_cb+0x124>)
    3c2c:	4798      	blx	r3
    3c2e:	e7e0      	b.n	3bf2 <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._color;
    3c30:	8922      	ldrh	r2, [r4, #8]
    3c32:	e7fa      	b.n	3c2a <trans_anim_cb+0x5e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    3c34:	b2ed      	uxtb	r5, r5
    3c36:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    3c3a:	7b63      	ldrb	r3, [r4, #13]
    3c3c:	08db      	lsrs	r3, r3, #3
    3c3e:	7a66      	ldrb	r6, [r4, #9]
    3c40:	08f6      	lsrs	r6, r6, #3
    3c42:	fb02 f606 	mul.w	r6, r2, r6
    3c46:	fb05 6303 	mla	r3, r5, r3, r6
    3c4a:	eb03 2703 	add.w	r7, r3, r3, lsl #8
    3c4e:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
    3c52:	f3c3 57c4 	ubfx	r7, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    3c56:	89a3      	ldrh	r3, [r4, #12]
    3c58:	f3c3 1345 	ubfx	r3, r3, #5, #6
    3c5c:	8926      	ldrh	r6, [r4, #8]
    3c5e:	f3c6 1645 	ubfx	r6, r6, #5, #6
    3c62:	fb02 f606 	mul.w	r6, r2, r6
    3c66:	fb05 6303 	mla	r3, r5, r3, r6
    3c6a:	eb03 2603 	add.w	r6, r3, r3, lsl #8
    3c6e:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    3c72:	f3c3 56c5 	ubfx	r6, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    3c76:	7b23      	ldrb	r3, [r4, #12]
    3c78:	f003 031f 	and.w	r3, r3, #31
    3c7c:	f894 e008 	ldrb.w	lr, [r4, #8]
    3c80:	f00e 0e1f 	and.w	lr, lr, #31
    3c84:	fb02 f20e 	mul.w	r2, r2, lr
    3c88:	fb05 2503 	mla	r5, r5, r3, r2
    3c8c:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    3c90:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    3c94:	0ded      	lsrs	r5, r5, #23
    3c96:	f04f 0200 	mov.w	r2, #0
    3c9a:	f365 0204 	bfi	r2, r5, #0, #5
    3c9e:	f366 124a 	bfi	r2, r6, #5, #6
    3ca2:	f367 22cf 	bfi	r2, r7, #11, #5
    3ca6:	e7c0      	b.n	3c2a <trans_anim_cb+0x5e>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    3ca8:	2b0d      	cmp	r3, #13
    3caa:	dc12      	bgt.n	3cd2 <trans_anim_cb+0x106>
        if(v <= 0) x = tr->start_value._opa;
    3cac:	2d00      	cmp	r5, #0
    3cae:	dd05      	ble.n	3cbc <trans_anim_cb+0xf0>
        else if(v >= 255) x = tr->end_value._opa;
    3cb0:	2dfe      	cmp	r5, #254	; 0xfe
    3cb2:	dd05      	ble.n	3cc0 <trans_anim_cb+0xf4>
    3cb4:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
    3cb6:	4b0f      	ldr	r3, [pc, #60]	; (3cf4 <trans_anim_cb+0x128>)
    3cb8:	4798      	blx	r3
    3cba:	e79a      	b.n	3bf2 <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._opa;
    3cbc:	7a22      	ldrb	r2, [r4, #8]
    3cbe:	e7fa      	b.n	3cb6 <trans_anim_cb+0xea>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
    3cc0:	7a22      	ldrb	r2, [r4, #8]
    3cc2:	7b23      	ldrb	r3, [r4, #12]
    3cc4:	1a9b      	subs	r3, r3, r2
    3cc6:	fb05 f503 	mul.w	r5, r5, r3
    3cca:	eb02 2225 	add.w	r2, r2, r5, asr #8
    3cce:	b2d2      	uxtb	r2, r2
    3cd0:	e7f1      	b.n	3cb6 <trans_anim_cb+0xea>
        if(v < 128) x = tr->start_value._ptr;
    3cd2:	2d7f      	cmp	r5, #127	; 0x7f
    3cd4:	bfd4      	ite	le
    3cd6:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
    3cd8:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
    3cda:	4b07      	ldr	r3, [pc, #28]	; (3cf8 <trans_anim_cb+0x12c>)
    3cdc:	4798      	blx	r3
    3cde:	e788      	b.n	3bf2 <trans_anim_cb+0x26>
    3ce0:	00003149 	.word	0x00003149
    3ce4:	00006793 	.word	0x00006793
    3ce8:	00005ffd 	.word	0x00005ffd
    3cec:	000039d9 	.word	0x000039d9
    3cf0:	00006125 	.word	0x00006125
    3cf4:	0000624d 	.word	0x0000624d
    3cf8:	00006361 	.word	0x00006361

00003cfc <lv_obj_get_base_dir>:
{
    3cfc:	b510      	push	{r4, lr}
    3cfe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3d00:	4b05      	ldr	r3, [pc, #20]	; (3d18 <lv_obj_get_base_dir+0x1c>)
    3d02:	4798      	blx	r3
    3d04:	b108      	cbz	r0, 3d0a <lv_obj_get_base_dir+0xe>
}
    3d06:	2000      	movs	r0, #0
    3d08:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3d0a:	4622      	mov	r2, r4
    3d0c:	2300      	movs	r3, #0
    3d0e:	4803      	ldr	r0, [pc, #12]	; (3d1c <lv_obj_get_base_dir+0x20>)
    3d10:	4903      	ldr	r1, [pc, #12]	; (3d20 <lv_obj_get_base_dir+0x24>)
    3d12:	4788      	blx	r1
    3d14:	e7fe      	b.n	3d14 <lv_obj_get_base_dir+0x18>
    3d16:	bf00      	nop
    3d18:	0000291f 	.word	0x0000291f
    3d1c:	00017618 	.word	0x00017618
    3d20:	00002929 	.word	0x00002929

00003d24 <lv_obj_create>:
{
    3d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d26:	460d      	mov	r5, r1
    if(parent == NULL) {
    3d28:	4606      	mov	r6, r0
    3d2a:	b150      	cbz	r0, 3d42 <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    3d2c:	4bc2      	ldr	r3, [pc, #776]	; (4038 <lv_obj_create+0x314>)
    3d2e:	4798      	blx	r3
    3d30:	2800      	cmp	r0, #0
    3d32:	f040 811f 	bne.w	3f74 <lv_obj_create+0x250>
    3d36:	4632      	mov	r2, r6
    3d38:	2300      	movs	r3, #0
    3d3a:	48c0      	ldr	r0, [pc, #768]	; (403c <lv_obj_create+0x318>)
    3d3c:	49c0      	ldr	r1, [pc, #768]	; (4040 <lv_obj_create+0x31c>)
    3d3e:	4788      	blx	r1
    3d40:	e7fe      	b.n	3d40 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
    3d42:	4bc0      	ldr	r3, [pc, #768]	; (4044 <lv_obj_create+0x320>)
    3d44:	4798      	blx	r3
        if(!disp) {
    3d46:	2800      	cmp	r0, #0
    3d48:	f000 81d9 	beq.w	40fe <lv_obj_create+0x3da>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
    3d4c:	3030      	adds	r0, #48	; 0x30
    3d4e:	4bbe      	ldr	r3, [pc, #760]	; (4048 <lv_obj_create+0x324>)
    3d50:	4798      	blx	r3
    3d52:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    3d54:	4bb8      	ldr	r3, [pc, #736]	; (4038 <lv_obj_create+0x314>)
    3d56:	4798      	blx	r3
    3d58:	b928      	cbnz	r0, 3d66 <lv_obj_create+0x42>
    3d5a:	4622      	mov	r2, r4
    3d5c:	2300      	movs	r3, #0
    3d5e:	48bb      	ldr	r0, [pc, #748]	; (404c <lv_obj_create+0x328>)
    3d60:	49b7      	ldr	r1, [pc, #732]	; (4040 <lv_obj_create+0x31c>)
    3d62:	4788      	blx	r1
    3d64:	e7fe      	b.n	3d64 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
    3d66:	2c00      	cmp	r4, #0
    3d68:	f000 81c7 	beq.w	40fa <lv_obj_create+0x3d6>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    3d6c:	214c      	movs	r1, #76	; 0x4c
    3d6e:	4620      	mov	r0, r4
    3d70:	4bb7      	ldr	r3, [pc, #732]	; (4050 <lv_obj_create+0x32c>)
    3d72:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    3d74:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3d78:	f36f 1305 	bfc	r3, #4, #2
    3d7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    3d80:	4bb4      	ldr	r3, [pc, #720]	; (4054 <lv_obj_create+0x330>)
    3d82:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    3d84:	4bb4      	ldr	r3, [pc, #720]	; (4058 <lv_obj_create+0x334>)
    3d86:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    3d88:	2700      	movs	r7, #0
    3d8a:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
    3d8c:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
    3d8e:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    3d90:	4638      	mov	r0, r7
    3d92:	4bb2      	ldr	r3, [pc, #712]	; (405c <lv_obj_create+0x338>)
    3d94:	4798      	blx	r3
    3d96:	3801      	subs	r0, #1
    3d98:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    3d9a:	4638      	mov	r0, r7
    3d9c:	4bb0      	ldr	r3, [pc, #704]	; (4060 <lv_obj_create+0x33c>)
    3d9e:	4798      	blx	r3
    3da0:	3801      	subs	r0, #1
    3da2:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    3da4:	214c      	movs	r1, #76	; 0x4c
    3da6:	1d20      	adds	r0, r4, #4
    3da8:	4bae      	ldr	r3, [pc, #696]	; (4064 <lv_obj_create+0x340>)
    3daa:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
    3dac:	2300      	movs	r3, #0
    3dae:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
    3db0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
    3db4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
    3db8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
    3dbc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
    3dc0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
    3dc4:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
    3dc6:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    3dca:	f363 0200 	bfi	r2, r3, #0, #1
    3dce:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
    3dd2:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
    3dd4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    new_obj->click        = 1;
    3dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    new_obj->drag         = 0;
    3ddc:	f042 0201 	orr.w	r2, r2, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
    3de0:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
    3de4:	2003      	movs	r0, #3
    3de6:	f360 0143 	bfi	r1, r0, #1, #3
    new_obj->protect      = LV_PROTECT_NONE;
    3dea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
    3dee:	f002 02c1 	and.w	r2, r2, #193	; 0xc1
    3df2:	f363 1286 	bfi	r2, r3, #6, #1
    3df6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    new_obj->gesture_parent = 1;
    3dfa:	f041 0101 	orr.w	r1, r1, #1
    3dfe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
    3e02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
    3e06:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
    3e08:	f104 0728 	add.w	r7, r4, #40	; 0x28
    3e0c:	4638      	mov	r0, r7
    3e0e:	4b96      	ldr	r3, [pc, #600]	; (4068 <lv_obj_create+0x344>)
    3e10:	4798      	blx	r3
    if(copy == NULL) {
    3e12:	2d00      	cmp	r5, #0
    3e14:	f000 815d 	beq.w	40d2 <lv_obj_create+0x3ae>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
    3e18:	f105 0128 	add.w	r1, r5, #40	; 0x28
    3e1c:	4638      	mov	r0, r7
    3e1e:	4b93      	ldr	r3, [pc, #588]	; (406c <lv_obj_create+0x348>)
    3e20:	4798      	blx	r3
    3e22:	f105 020f 	add.w	r2, r5, #15
    3e26:	f104 0118 	add.w	r1, r4, #24
    uint8_t * d8 = (uint8_t *)dst;
    3e2a:	f104 0310 	add.w	r3, r4, #16
        *d8 = *s8;
    3e2e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3e32:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    3e36:	428b      	cmp	r3, r1
    3e38:	d1f9      	bne.n	3e2e <lv_obj_create+0x10a>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    3e3a:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    3e3e:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
    3e40:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    3e44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
    3e48:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    3e4c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->realign.align        = copy->realign.align;
    3e50:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    3e54:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
    3e58:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
    3e5c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
    3e60:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
    3e64:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
    3e68:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    3e6a:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    3e6c:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
    3e70:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3e74:	f362 0300 	bfi	r3, r2, #0, #1
    3e78:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
    3e7c:	69ab      	ldr	r3, [r5, #24]
    3e7e:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    3e80:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3e84:	09db      	lsrs	r3, r3, #7
    3e86:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3e8a:	f363 12c7 	bfi	r2, r3, #7, #1
    3e8e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
    3e92:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    3e96:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    3e9a:	f362 0300 	bfi	r3, r2, #0, #1
    3e9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
    3ea2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ea6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    3eaa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3eae:	f363 0241 	bfi	r2, r3, #1, #1
    3eb2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
    3eb6:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    3eba:	f3c3 0342 	ubfx	r3, r3, #1, #3
    3ebe:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    3ec2:	f363 0243 	bfi	r2, r3, #1, #3
    3ec6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
    3eca:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ece:	f3c3 0380 	ubfx	r3, r3, #2, #1
    3ed2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    3ed6:	f363 0282 	bfi	r2, r3, #2, #1
    3eda:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
    3ede:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ee2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    3ee6:	b2d2      	uxtb	r2, r2
    3ee8:	f363 02c3 	bfi	r2, r3, #3, #1
    3eec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
    3ef0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3ef4:	f3c3 1300 	ubfx	r3, r3, #4, #1
    3ef8:	b2d2      	uxtb	r2, r2
    3efa:	f363 1204 	bfi	r2, r3, #4, #1
    3efe:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
    3f02:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f06:	f3c3 1340 	ubfx	r3, r3, #5, #1
    3f0a:	b2d2      	uxtb	r2, r2
    3f0c:	f363 1245 	bfi	r2, r3, #5, #1
    3f10:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
    3f14:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    3f18:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3f1c:	b2d2      	uxtb	r2, r2
    3f1e:	f363 1286 	bfi	r2, r3, #6, #1
    3f22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
    3f26:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    3f2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
    3f2e:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    3f32:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3f36:	f362 0300 	bfi	r3, r2, #0, #1
    3f3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
    3f3e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    3f40:	b110      	cbz	r0, 3f48 <lv_obj_create+0x224>
            lv_group_add_obj(copy->group_p, new_obj);
    3f42:	4621      	mov	r1, r4
    3f44:	4b4a      	ldr	r3, [pc, #296]	; (4070 <lv_obj_create+0x34c>)
    3f46:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    3f48:	4628      	mov	r0, r5
    3f4a:	4b4a      	ldr	r3, [pc, #296]	; (4074 <lv_obj_create+0x350>)
    3f4c:	4798      	blx	r3
    3f4e:	2800      	cmp	r0, #0
    3f50:	f000 80ca 	beq.w	40e8 <lv_obj_create+0x3c4>
    3f54:	2e00      	cmp	r6, #0
    3f56:	f000 80d0 	beq.w	40fa <lv_obj_create+0x3d6>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    3f5a:	4628      	mov	r0, r5
    3f5c:	4b46      	ldr	r3, [pc, #280]	; (4078 <lv_obj_create+0x354>)
    3f5e:	4798      	blx	r3
    3f60:	4607      	mov	r7, r0
    3f62:	4628      	mov	r0, r5
    3f64:	4b45      	ldr	r3, [pc, #276]	; (407c <lv_obj_create+0x358>)
    3f66:	4798      	blx	r3
    3f68:	4602      	mov	r2, r0
    3f6a:	4639      	mov	r1, r7
    3f6c:	4620      	mov	r0, r4
    3f6e:	4b44      	ldr	r3, [pc, #272]	; (4080 <lv_obj_create+0x35c>)
    3f70:	4798      	blx	r3
    3f72:	e0ba      	b.n	40ea <lv_obj_create+0x3c6>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
    3f74:	1d30      	adds	r0, r6, #4
    3f76:	4b34      	ldr	r3, [pc, #208]	; (4048 <lv_obj_create+0x324>)
    3f78:	4798      	blx	r3
    3f7a:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    3f7c:	4b2e      	ldr	r3, [pc, #184]	; (4038 <lv_obj_create+0x314>)
    3f7e:	4798      	blx	r3
    3f80:	2800      	cmp	r0, #0
    3f82:	d045      	beq.n	4010 <lv_obj_create+0x2ec>
        if(new_obj == NULL) return NULL;
    3f84:	2c00      	cmp	r4, #0
    3f86:	f000 80b8 	beq.w	40fa <lv_obj_create+0x3d6>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    3f8a:	214c      	movs	r1, #76	; 0x4c
    3f8c:	4620      	mov	r0, r4
    3f8e:	4b30      	ldr	r3, [pc, #192]	; (4050 <lv_obj_create+0x32c>)
    3f90:	4798      	blx	r3
        new_obj->parent = parent;
    3f92:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    3f94:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    3f98:	f36f 1305 	bfc	r3, #4, #2
    3f9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    3fa0:	4b2c      	ldr	r3, [pc, #176]	; (4054 <lv_obj_create+0x330>)
    3fa2:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    3fa4:	4b2c      	ldr	r3, [pc, #176]	; (4058 <lv_obj_create+0x334>)
    3fa6:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    3fa8:	2000      	movs	r0, #0
    3faa:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
    3fac:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
    3fb0:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    3fb2:	8a77      	ldrh	r7, [r6, #18]
    3fb4:	4b33      	ldr	r3, [pc, #204]	; (4084 <lv_obj_create+0x360>)
    3fb6:	4798      	blx	r3
    3fb8:	2332      	movs	r3, #50	; 0x32
    3fba:	fb03 f300 	mul.w	r3, r3, r0
    3fbe:	3350      	adds	r3, #80	; 0x50
    3fc0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    3fc4:	d22a      	bcs.n	401c <lv_obj_create+0x2f8>
    3fc6:	2301      	movs	r3, #1
    3fc8:	443b      	add	r3, r7
    3fca:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
    3fcc:	4620      	mov	r0, r4
    3fce:	4b2e      	ldr	r3, [pc, #184]	; (4088 <lv_obj_create+0x364>)
    3fd0:	4798      	blx	r3
    3fd2:	2801      	cmp	r0, #1
    3fd4:	d05c      	beq.n	4090 <lv_obj_create+0x36c>
            new_obj->coords.x1    = parent->coords.x1;
    3fd6:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    3fda:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    3fdc:	8a37      	ldrh	r7, [r6, #16]
    3fde:	2000      	movs	r0, #0
    3fe0:	4b28      	ldr	r3, [pc, #160]	; (4084 <lv_obj_create+0x360>)
    3fe2:	4798      	blx	r3
    3fe4:	2364      	movs	r3, #100	; 0x64
    3fe6:	fb03 f300 	mul.w	r3, r3, r0
    3fea:	3350      	adds	r3, #80	; 0x50
    3fec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    3ff0:	d36d      	bcc.n	40ce <lv_obj_create+0x3aa>
    3ff2:	2000      	movs	r0, #0
    3ff4:	4b23      	ldr	r3, [pc, #140]	; (4084 <lv_obj_create+0x360>)
    3ff6:	4798      	blx	r3
    3ff8:	2364      	movs	r3, #100	; 0x64
    3ffa:	fb03 f300 	mul.w	r3, r3, r0
    3ffe:	3350      	adds	r3, #80	; 0x50
    4000:	4a22      	ldr	r2, [pc, #136]	; (408c <lv_obj_create+0x368>)
    4002:	fba2 2303 	umull	r2, r3, r2, r3
    4006:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    400a:	443b      	add	r3, r7
    400c:	82a3      	strh	r3, [r4, #20]
    400e:	e6c9      	b.n	3da4 <lv_obj_create+0x80>
        LV_ASSERT_MEM(new_obj);
    4010:	4622      	mov	r2, r4
    4012:	2300      	movs	r3, #0
    4014:	480d      	ldr	r0, [pc, #52]	; (404c <lv_obj_create+0x328>)
    4016:	490a      	ldr	r1, [pc, #40]	; (4040 <lv_obj_create+0x31c>)
    4018:	4788      	blx	r1
    401a:	e7fe      	b.n	401a <lv_obj_create+0x2f6>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    401c:	2000      	movs	r0, #0
    401e:	4b19      	ldr	r3, [pc, #100]	; (4084 <lv_obj_create+0x360>)
    4020:	4798      	blx	r3
    4022:	2332      	movs	r3, #50	; 0x32
    4024:	fb03 f300 	mul.w	r3, r3, r0
    4028:	3350      	adds	r3, #80	; 0x50
    402a:	4a18      	ldr	r2, [pc, #96]	; (408c <lv_obj_create+0x368>)
    402c:	fba2 2303 	umull	r2, r3, r2, r3
    4030:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    4034:	e7c8      	b.n	3fc8 <lv_obj_create+0x2a4>
    4036:	bf00      	nop
    4038:	0000291f 	.word	0x0000291f
    403c:	00017618 	.word	0x00017618
    4040:	00002929 	.word	0x00002929
    4044:	00010125 	.word	0x00010125
    4048:	000110b5 	.word	0x000110b5
    404c:	00017604 	.word	0x00017604
    4050:	00011bdb 	.word	0x00011bdb
    4054:	000051e9 	.word	0x000051e9
    4058:	00004d65 	.word	0x00004d65
    405c:	00010131 	.word	0x00010131
    4060:	00010159 	.word	0x00010159
    4064:	0001109d 	.word	0x0001109d
    4068:	00005cad 	.word	0x00005cad
    406c:	00006815 	.word	0x00006815
    4070:	00002b35 	.word	0x00002b35
    4074:	00002f01 	.word	0x00002f01
    4078:	00003069 	.word	0x00003069
    407c:	000030a9 	.word	0x000030a9
    4080:	000034e9 	.word	0x000034e9
    4084:	00010181 	.word	0x00010181
    4088:	00003cfd 	.word	0x00003cfd
    408c:	cccccccd 	.word	0xcccccccd
            new_obj->coords.x2    = parent->coords.x2;
    4090:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
    4094:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
    4096:	8ab7      	ldrh	r7, [r6, #20]
    4098:	2000      	movs	r0, #0
    409a:	4b1a      	ldr	r3, [pc, #104]	; (4104 <lv_obj_create+0x3e0>)
    409c:	4798      	blx	r3
    409e:	2364      	movs	r3, #100	; 0x64
    40a0:	fb03 f300 	mul.w	r3, r3, r0
    40a4:	3350      	adds	r3, #80	; 0x50
    40a6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    40aa:	d30e      	bcc.n	40ca <lv_obj_create+0x3a6>
    40ac:	2000      	movs	r0, #0
    40ae:	4b15      	ldr	r3, [pc, #84]	; (4104 <lv_obj_create+0x3e0>)
    40b0:	4798      	blx	r3
    40b2:	2364      	movs	r3, #100	; 0x64
    40b4:	fb03 f300 	mul.w	r3, r3, r0
    40b8:	3350      	adds	r3, #80	; 0x50
    40ba:	4a13      	ldr	r2, [pc, #76]	; (4108 <lv_obj_create+0x3e4>)
    40bc:	fba2 2303 	umull	r2, r3, r2, r3
    40c0:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    40c4:	1afb      	subs	r3, r7, r3
    40c6:	8223      	strh	r3, [r4, #16]
    40c8:	e66c      	b.n	3da4 <lv_obj_create+0x80>
    40ca:	2301      	movs	r3, #1
    40cc:	e7fa      	b.n	40c4 <lv_obj_create+0x3a0>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    40ce:	2301      	movs	r3, #1
    40d0:	e79b      	b.n	400a <lv_obj_create+0x2e6>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
    40d2:	b126      	cbz	r6, 40de <lv_obj_create+0x3ba>
    40d4:	2102      	movs	r1, #2
    40d6:	4620      	mov	r0, r4
    40d8:	4b0c      	ldr	r3, [pc, #48]	; (410c <lv_obj_create+0x3e8>)
    40da:	4798      	blx	r3
    40dc:	e005      	b.n	40ea <lv_obj_create+0x3c6>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
    40de:	2101      	movs	r1, #1
    40e0:	4620      	mov	r0, r4
    40e2:	4b0a      	ldr	r3, [pc, #40]	; (410c <lv_obj_create+0x3e8>)
    40e4:	4798      	blx	r3
    40e6:	e008      	b.n	40fa <lv_obj_create+0x3d6>
    if(parent != NULL) {
    40e8:	b13e      	cbz	r6, 40fa <lv_obj_create+0x3d6>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    40ea:	69f3      	ldr	r3, [r6, #28]
    40ec:	4622      	mov	r2, r4
    40ee:	2101      	movs	r1, #1
    40f0:	4630      	mov	r0, r6
    40f2:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    40f4:	4620      	mov	r0, r4
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <lv_obj_create+0x3ec>)
    40f8:	4798      	blx	r3
}
    40fa:	4620      	mov	r0, r4
    40fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
    40fe:	4634      	mov	r4, r6
    4100:	e7fb      	b.n	40fa <lv_obj_create+0x3d6>
    4102:	bf00      	nop
    4104:	00010181 	.word	0x00010181
    4108:	cccccccd 	.word	0xcccccccd
    410c:	000126a1 	.word	0x000126a1
    4110:	00003409 	.word	0x00003409

00004114 <lv_obj_is_protected>:
{
    4114:	b538      	push	{r3, r4, r5, lr}
    4116:	4604      	mov	r4, r0
    4118:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    411a:	4b08      	ldr	r3, [pc, #32]	; (413c <lv_obj_is_protected+0x28>)
    411c:	4798      	blx	r3
    411e:	b130      	cbz	r0, 412e <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
    4120:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    4124:	421d      	tst	r5, r3
}
    4126:	bf14      	ite	ne
    4128:	2001      	movne	r0, #1
    412a:	2000      	moveq	r0, #0
    412c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    412e:	4622      	mov	r2, r4
    4130:	2300      	movs	r3, #0
    4132:	4803      	ldr	r0, [pc, #12]	; (4140 <lv_obj_is_protected+0x2c>)
    4134:	4903      	ldr	r1, [pc, #12]	; (4144 <lv_obj_is_protected+0x30>)
    4136:	4788      	blx	r1
    4138:	e7fe      	b.n	4138 <lv_obj_is_protected+0x24>
    413a:	bf00      	nop
    413c:	0000291f 	.word	0x0000291f
    4140:	00017618 	.word	0x00017618
    4144:	00002929 	.word	0x00002929

00004148 <lv_obj_get_state>:
{
    4148:	b530      	push	{r4, r5, lr}
    414a:	b083      	sub	sp, #12
    414c:	4604      	mov	r4, r0
    414e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4150:	4b0d      	ldr	r3, [pc, #52]	; (4188 <lv_obj_get_state+0x40>)
    4152:	4798      	blx	r3
    4154:	b128      	cbz	r0, 4162 <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
    4156:	2d3f      	cmp	r5, #63	; 0x3f
    4158:	d809      	bhi.n	416e <lv_obj_get_state+0x26>
    415a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
    415e:	b003      	add	sp, #12
    4160:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4162:	4622      	mov	r2, r4
    4164:	2300      	movs	r3, #0
    4166:	4809      	ldr	r0, [pc, #36]	; (418c <lv_obj_get_state+0x44>)
    4168:	4909      	ldr	r1, [pc, #36]	; (4190 <lv_obj_get_state+0x48>)
    416a:	4788      	blx	r1
    416c:	e7fe      	b.n	416c <lv_obj_get_state+0x24>
    info.part = part;
    416e:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
    4172:	2300      	movs	r3, #0
    4174:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
    4178:	aa01      	add	r2, sp, #4
    417a:	2109      	movs	r1, #9
    417c:	4620      	mov	r0, r4
    417e:	4b05      	ldr	r3, [pc, #20]	; (4194 <lv_obj_get_state+0x4c>)
    4180:	4798      	blx	r3
    return info.result;
    4182:	f89d 0005 	ldrb.w	r0, [sp, #5]
    4186:	e7ea      	b.n	415e <lv_obj_get_state+0x16>
    4188:	0000291f 	.word	0x0000291f
    418c:	00017618 	.word	0x00017618
    4190:	00002929 	.word	0x00002929
    4194:	00002ebd 	.word	0x00002ebd

00004198 <_lv_obj_get_style_int>:
{
    4198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    419c:	b085      	sub	sp, #20
    419e:	4617      	mov	r7, r2
    while(parent) {
    41a0:	b360      	cbz	r0, 41fc <_lv_obj_get_style_int+0x64>
    41a2:	460d      	mov	r5, r1
    41a4:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    41a8:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    41aa:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4238 <_lv_obj_get_style_int+0xa0>
        lv_state_t state = lv_obj_get_state(parent, part);
    41ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 423c <_lv_obj_get_style_int+0xa4>
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    41b2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4240 <_lv_obj_get_style_int+0xa8>
    41b6:	e006      	b.n	41c6 <_lv_obj_get_style_int+0x2e>
        if(res == LV_RES_OK) return value_act;
    41b8:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
    41bc:	b005      	add	sp, #20
    41be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41c2:	2500      	movs	r5, #0
    while(parent) {
    41c4:	b1de      	cbz	r6, 41fe <_lv_obj_get_style_int+0x66>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    41c6:	4629      	mov	r1, r5
    41c8:	4630      	mov	r0, r6
    41ca:	47d0      	blx	sl
    41cc:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    41ce:	4629      	mov	r1, r5
    41d0:	4630      	mov	r0, r6
    41d2:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    41d4:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    41d8:	b284      	uxth	r4, r0
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    41da:	f10d 020e 	add.w	r2, sp, #14
    41de:	4621      	mov	r1, r4
    41e0:	9801      	ldr	r0, [sp, #4]
    41e2:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    41e4:	2801      	cmp	r0, #1
    41e6:	d0e7      	beq.n	41b8 <_lv_obj_get_style_int+0x20>
        if(attr.bits.inherit == 0) break;
    41e8:	f01b 0f80 	tst.w	fp, #128	; 0x80
    41ec:	d007      	beq.n	41fe <_lv_obj_get_style_int+0x66>
        if(part != LV_OBJ_PART_MAIN) {
    41ee:	2d00      	cmp	r5, #0
    41f0:	d1e7      	bne.n	41c2 <_lv_obj_get_style_int+0x2a>
        parent = lv_obj_get_parent(parent);
    41f2:	4630      	mov	r0, r6
    41f4:	4b0f      	ldr	r3, [pc, #60]	; (4234 <_lv_obj_get_style_int+0x9c>)
    41f6:	4798      	blx	r3
    41f8:	4606      	mov	r6, r0
    41fa:	e7e2      	b.n	41c2 <_lv_obj_get_style_int+0x2a>
    while(parent) {
    41fc:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    41fe:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4202:	b2a4      	uxth	r4, r4
    4204:	2c22      	cmp	r4, #34	; 0x22
    4206:	d00f      	beq.n	4228 <_lv_obj_get_style_int+0x90>
    4208:	d806      	bhi.n	4218 <_lv_obj_get_style_int+0x80>
    420a:	2c03      	cmp	r4, #3
    420c:	d00a      	beq.n	4224 <_lv_obj_get_style_int+0x8c>
    420e:	2c07      	cmp	r4, #7
    4210:	d10c      	bne.n	422c <_lv_obj_get_style_int+0x94>
            return LV_IMG_ZOOM_NONE;
    4212:	f44f 7080 	mov.w	r0, #256	; 0x100
    4216:	e7d1      	b.n	41bc <_lv_obj_get_style_int+0x24>
    switch(prop) {
    4218:	2c31      	cmp	r4, #49	; 0x31
    421a:	d009      	beq.n	4230 <_lv_obj_get_style_int+0x98>
    421c:	2cc0      	cmp	r4, #192	; 0xc0
    421e:	d105      	bne.n	422c <_lv_obj_get_style_int+0x94>
            return LV_DPI / 8;
    4220:	2010      	movs	r0, #16
    4222:	e7cb      	b.n	41bc <_lv_obj_get_style_int+0x24>
            return LV_DPI / 20;
    4224:	2006      	movs	r0, #6
    4226:	e7c9      	b.n	41bc <_lv_obj_get_style_int+0x24>
            return 255;
    4228:	20ff      	movs	r0, #255	; 0xff
    422a:	e7c7      	b.n	41bc <_lv_obj_get_style_int+0x24>
    return 0;
    422c:	2000      	movs	r0, #0
    422e:	e7c5      	b.n	41bc <_lv_obj_get_style_int+0x24>
            return LV_BORDER_SIDE_FULL;
    4230:	200f      	movs	r0, #15
    4232:	e7c3      	b.n	41bc <_lv_obj_get_style_int+0x24>
    4234:	00002f01 	.word	0x00002f01
    4238:	00003149 	.word	0x00003149
    423c:	00004149 	.word	0x00004149
    4240:	0000695d 	.word	0x0000695d

00004244 <_lv_obj_get_style_color>:
{
    4244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4248:	b085      	sub	sp, #20
    424a:	4617      	mov	r7, r2
    while(parent) {
    424c:	b348      	cbz	r0, 42a2 <_lv_obj_get_style_color+0x5e>
    424e:	460d      	mov	r5, r1
    4250:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4254:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4256:	f8df a06c 	ldr.w	sl, [pc, #108]	; 42c4 <_lv_obj_get_style_color+0x80>
        lv_state_t state = lv_obj_get_state(parent, part);
    425a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 42c8 <_lv_obj_get_style_color+0x84>
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    425e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 42cc <_lv_obj_get_style_color+0x88>
    4262:	e004      	b.n	426e <_lv_obj_get_style_color+0x2a>
        if(res == LV_RES_OK) return value_act;
    4264:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    4268:	e024      	b.n	42b4 <_lv_obj_get_style_color+0x70>
    426a:	2500      	movs	r5, #0
    while(parent) {
    426c:	b1d6      	cbz	r6, 42a4 <_lv_obj_get_style_color+0x60>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    426e:	4629      	mov	r1, r5
    4270:	4630      	mov	r0, r6
    4272:	47d0      	blx	sl
    4274:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4276:	4629      	mov	r1, r5
    4278:	4630      	mov	r0, r6
    427a:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    427c:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4280:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    4282:	aa03      	add	r2, sp, #12
    4284:	4621      	mov	r1, r4
    4286:	9801      	ldr	r0, [sp, #4]
    4288:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    428a:	2801      	cmp	r0, #1
    428c:	d0ea      	beq.n	4264 <_lv_obj_get_style_color+0x20>
        if(attr.bits.inherit == 0) break;
    428e:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4292:	d007      	beq.n	42a4 <_lv_obj_get_style_color+0x60>
        if(part != LV_OBJ_PART_MAIN) {
    4294:	2d00      	cmp	r5, #0
    4296:	d1e8      	bne.n	426a <_lv_obj_get_style_color+0x26>
        parent = lv_obj_get_parent(parent);
    4298:	4630      	mov	r0, r6
    429a:	4b08      	ldr	r3, [pc, #32]	; (42bc <_lv_obj_get_style_color+0x78>)
    429c:	4798      	blx	r3
    429e:	4606      	mov	r6, r0
    42a0:	e7e3      	b.n	426a <_lv_obj_get_style_color+0x26>
    while(parent) {
    42a2:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    42a4:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    42a8:	3c29      	subs	r4, #41	; 0x29
    42aa:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
    42ac:	bf9a      	itte	ls
    42ae:	4b04      	ldrls	r3, [pc, #16]	; (42c0 <_lv_obj_get_style_color+0x7c>)
    42b0:	8818      	ldrhls	r0, [r3, #0]
    return LV_COLOR_BLACK;
    42b2:	2000      	movhi	r0, #0
}
    42b4:	b005      	add	sp, #20
    42b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42ba:	bf00      	nop
    42bc:	00002f01 	.word	0x00002f01
    42c0:	00017614 	.word	0x00017614
    42c4:	00003149 	.word	0x00003149
    42c8:	00004149 	.word	0x00004149
    42cc:	00006a21 	.word	0x00006a21

000042d0 <_lv_obj_get_style_opa>:
{
    42d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42d4:	b085      	sub	sp, #20
    42d6:	4617      	mov	r7, r2
    while(parent) {
    42d8:	b350      	cbz	r0, 4330 <_lv_obj_get_style_opa+0x60>
    42da:	460d      	mov	r5, r1
    42dc:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    42e0:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    42e2:	f8df a074 	ldr.w	sl, [pc, #116]	; 4358 <_lv_obj_get_style_opa+0x88>
        lv_state_t state = lv_obj_get_state(parent, part);
    42e6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 435c <_lv_obj_get_style_opa+0x8c>
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    42ea:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4360 <_lv_obj_get_style_opa+0x90>
    42ee:	e004      	b.n	42fa <_lv_obj_get_style_opa+0x2a>
        if(res == LV_RES_OK) return value_act;
    42f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    42f4:	e029      	b.n	434a <_lv_obj_get_style_opa+0x7a>
    42f6:	2500      	movs	r5, #0
    while(parent) {
    42f8:	b1de      	cbz	r6, 4332 <_lv_obj_get_style_opa+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    42fa:	4629      	mov	r1, r5
    42fc:	4630      	mov	r0, r6
    42fe:	47d0      	blx	sl
    4300:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4302:	4629      	mov	r1, r5
    4304:	4630      	mov	r0, r6
    4306:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4308:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    430c:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    430e:	f10d 020f 	add.w	r2, sp, #15
    4312:	4621      	mov	r1, r4
    4314:	9801      	ldr	r0, [sp, #4]
    4316:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4318:	2801      	cmp	r0, #1
    431a:	d0e9      	beq.n	42f0 <_lv_obj_get_style_opa+0x20>
        if(attr.bits.inherit == 0) break;
    431c:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4320:	d007      	beq.n	4332 <_lv_obj_get_style_opa+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    4322:	2d00      	cmp	r5, #0
    4324:	d1e7      	bne.n	42f6 <_lv_obj_get_style_opa+0x26>
        parent = lv_obj_get_parent(parent);
    4326:	4630      	mov	r0, r6
    4328:	4b0a      	ldr	r3, [pc, #40]	; (4354 <_lv_obj_get_style_opa+0x84>)
    432a:	4798      	blx	r3
    432c:	4606      	mov	r6, r0
    432e:	e7e2      	b.n	42f6 <_lv_obj_get_style_opa+0x26>
    while(parent) {
    4330:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4332:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4336:	b2a4      	uxth	r4, r4
    4338:	2c6d      	cmp	r4, #109	; 0x6d
    433a:	d009      	beq.n	4350 <_lv_obj_get_style_opa+0x80>
    433c:	f248 03ad 	movw	r3, #32941	; 0x80ad
    4340:	429c      	cmp	r4, r3
    4342:	d005      	beq.n	4350 <_lv_obj_get_style_opa+0x80>
    4344:	2c2c      	cmp	r4, #44	; 0x2c
    4346:	d003      	beq.n	4350 <_lv_obj_get_style_opa+0x80>
    return LV_OPA_COVER;
    4348:	20ff      	movs	r0, #255	; 0xff
}
    434a:	b005      	add	sp, #20
    434c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_OPA_TRANSP;
    4350:	2000      	movs	r0, #0
    4352:	e7fa      	b.n	434a <_lv_obj_get_style_opa+0x7a>
    4354:	00002f01 	.word	0x00002f01
    4358:	00003149 	.word	0x00003149
    435c:	00004149 	.word	0x00004149
    4360:	00006ae5 	.word	0x00006ae5

00004364 <_lv_obj_get_style_ptr>:
{
    4364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4368:	b085      	sub	sp, #20
    436a:	4617      	mov	r7, r2
    while(parent) {
    436c:	b350      	cbz	r0, 43c4 <_lv_obj_get_style_ptr+0x60>
    436e:	460d      	mov	r5, r1
    4370:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4374:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4376:	f8df a080 	ldr.w	sl, [pc, #128]	; 43f8 <_lv_obj_get_style_ptr+0x94>
        lv_state_t state = lv_obj_get_state(parent, part);
    437a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 43fc <_lv_obj_get_style_ptr+0x98>
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    437e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4400 <_lv_obj_get_style_ptr+0x9c>
    4382:	e005      	b.n	4390 <_lv_obj_get_style_ptr+0x2c>
        if(res == LV_RES_OK)  return value_act;
    4384:	9803      	ldr	r0, [sp, #12]
}
    4386:	b005      	add	sp, #20
    4388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    438c:	2500      	movs	r5, #0
    while(parent) {
    438e:	b1d6      	cbz	r6, 43c6 <_lv_obj_get_style_ptr+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4390:	4629      	mov	r1, r5
    4392:	4630      	mov	r0, r6
    4394:	47d0      	blx	sl
    4396:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4398:	4629      	mov	r1, r5
    439a:	4630      	mov	r0, r6
    439c:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    439e:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    43a2:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    43a4:	aa03      	add	r2, sp, #12
    43a6:	4621      	mov	r1, r4
    43a8:	9801      	ldr	r0, [sp, #4]
    43aa:	47c0      	blx	r8
        if(res == LV_RES_OK)  return value_act;
    43ac:	2801      	cmp	r0, #1
    43ae:	d0e9      	beq.n	4384 <_lv_obj_get_style_ptr+0x20>
        if(attr.bits.inherit == 0) break;
    43b0:	f01b 0f80 	tst.w	fp, #128	; 0x80
    43b4:	d007      	beq.n	43c6 <_lv_obj_get_style_ptr+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    43b6:	2d00      	cmp	r5, #0
    43b8:	d1e8      	bne.n	438c <_lv_obj_get_style_ptr+0x28>
        parent = lv_obj_get_parent(parent);
    43ba:	4630      	mov	r0, r6
    43bc:	4b0b      	ldr	r3, [pc, #44]	; (43ec <_lv_obj_get_style_ptr+0x88>)
    43be:	4798      	blx	r3
    43c0:	4606      	mov	r6, r0
    43c2:	e7e3      	b.n	438c <_lv_obj_get_style_ptr+0x28>
    while(parent) {
    43c4:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    43c6:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    43ca:	b2a4      	uxth	r4, r4
    43cc:	2cbe      	cmp	r4, #190	; 0xbe
    43ce:	d00a      	beq.n	43e6 <_lv_obj_get_style_ptr+0x82>
    43d0:	f248 038e 	movw	r3, #32910	; 0x808e
    43d4:	429c      	cmp	r4, r3
    43d6:	d003      	beq.n	43e0 <_lv_obj_get_style_ptr+0x7c>
    43d8:	2c7e      	cmp	r4, #126	; 0x7e
    43da:	d001      	beq.n	43e0 <_lv_obj_get_style_ptr+0x7c>
    return NULL;
    43dc:	2000      	movs	r0, #0
    43de:	e7d2      	b.n	4386 <_lv_obj_get_style_ptr+0x22>
            return lv_theme_get_font_normal();
    43e0:	4b03      	ldr	r3, [pc, #12]	; (43f0 <_lv_obj_get_style_ptr+0x8c>)
    43e2:	4798      	blx	r3
    43e4:	e7cf      	b.n	4386 <_lv_obj_get_style_ptr+0x22>
            return &lv_anim_path_def;
    43e6:	4803      	ldr	r0, [pc, #12]	; (43f4 <_lv_obj_get_style_ptr+0x90>)
    43e8:	e7cd      	b.n	4386 <_lv_obj_get_style_ptr+0x22>
    43ea:	bf00      	nop
    43ec:	00002f01 	.word	0x00002f01
    43f0:	00012695 	.word	0x00012695
    43f4:	0001b450 	.word	0x0001b450
    43f8:	00003149 	.word	0x00003149
    43fc:	00004149 	.word	0x00004149
    4400:	00006ba9 	.word	0x00006ba9

00004404 <trans_anim_start_cb>:
{
    4404:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
    4406:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
    4408:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    440a:	f005 030f 	and.w	r3, r5, #15
    440e:	2b08      	cmp	r3, #8
    4410:	dd13      	ble.n	443a <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    4412:	2b0b      	cmp	r3, #11
    4414:	dd18      	ble.n	4448 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    4416:	2b0d      	cmp	r3, #13
    4418:	dd1d      	ble.n	4456 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
    441a:	462a      	mov	r2, r5
    441c:	79a1      	ldrb	r1, [r4, #6]
    441e:	6820      	ldr	r0, [r4, #0]
    4420:	4b10      	ldr	r3, [pc, #64]	; (4464 <trans_anim_start_cb+0x60>)
    4422:	4798      	blx	r3
    4424:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
    4426:	2300      	movs	r3, #0
    4428:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
    442a:	4623      	mov	r3, r4
    442c:	462a      	mov	r2, r5
    442e:	79a1      	ldrb	r1, [r4, #6]
    4430:	6820      	ldr	r0, [r4, #0]
    4432:	4e0d      	ldr	r6, [pc, #52]	; (4468 <trans_anim_start_cb+0x64>)
    4434:	47b0      	blx	r6
    tr->prop = prop_tmp;
    4436:	80a5      	strh	r5, [r4, #4]
    4438:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
    443a:	462a      	mov	r2, r5
    443c:	79a1      	ldrb	r1, [r4, #6]
    443e:	6820      	ldr	r0, [r4, #0]
    4440:	4b0a      	ldr	r3, [pc, #40]	; (446c <trans_anim_start_cb+0x68>)
    4442:	4798      	blx	r3
    4444:	8120      	strh	r0, [r4, #8]
    4446:	e7ee      	b.n	4426 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
    4448:	462a      	mov	r2, r5
    444a:	79a1      	ldrb	r1, [r4, #6]
    444c:	6820      	ldr	r0, [r4, #0]
    444e:	4b08      	ldr	r3, [pc, #32]	; (4470 <trans_anim_start_cb+0x6c>)
    4450:	4798      	blx	r3
    4452:	8120      	strh	r0, [r4, #8]
    4454:	e7e7      	b.n	4426 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
    4456:	462a      	mov	r2, r5
    4458:	79a1      	ldrb	r1, [r4, #6]
    445a:	6820      	ldr	r0, [r4, #0]
    445c:	4b05      	ldr	r3, [pc, #20]	; (4474 <trans_anim_start_cb+0x70>)
    445e:	4798      	blx	r3
    4460:	7220      	strb	r0, [r4, #8]
    4462:	e7e0      	b.n	4426 <trans_anim_start_cb+0x22>
    4464:	00004365 	.word	0x00004365
    4468:	00003175 	.word	0x00003175
    446c:	00004199 	.word	0x00004199
    4470:	00004245 	.word	0x00004245
    4474:	000042d1 	.word	0x000042d1

00004478 <lv_obj_set_state>:
    if(obj->state == new_state) return;
    4478:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    447c:	428b      	cmp	r3, r1
    447e:	f000 8222 	beq.w	48c6 <lv_obj_set_state+0x44e>
{
    4482:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4486:	b09f      	sub	sp, #124	; 0x7c
    4488:	4689      	mov	r9, r1
    448a:	4682      	mov	sl, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    448c:	4b9b      	ldr	r3, [pc, #620]	; (46fc <lv_obj_set_state+0x284>)
    448e:	4798      	blx	r3
    4490:	b140      	cbz	r0, 44a4 <lv_obj_set_state+0x2c>
    lv_state_t prev_state = obj->state;
    4492:	f89a b03d 	ldrb.w	fp, [sl, #61]	; 0x3d
    obj->state = new_state;
    4496:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
    449a:	2300      	movs	r3, #0
    449c:	9304      	str	r3, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    449e:	4d98      	ldr	r5, [pc, #608]	; (4700 <lv_obj_set_state+0x288>)
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    44a0:	46d8      	mov	r8, fp
    44a2:	e1a2      	b.n	47ea <lv_obj_set_state+0x372>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    44a4:	4652      	mov	r2, sl
    44a6:	2300      	movs	r3, #0
    44a8:	4896      	ldr	r0, [pc, #600]	; (4704 <lv_obj_set_state+0x28c>)
    44aa:	4997      	ldr	r1, [pc, #604]	; (4708 <lv_obj_set_state+0x290>)
    44ac:	4788      	blx	r1
    44ae:	e7fe      	b.n	44ae <lv_obj_set_state+0x36>
        style_list->skip_trans = 1;
    44b0:	7973      	ldrb	r3, [r6, #5]
    44b2:	f043 0304 	orr.w	r3, r3, #4
    44b6:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    44b8:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    44bc:	4622      	mov	r2, r4
    44be:	f8dd b004 	ldr.w	fp, [sp, #4]
    44c2:	4659      	mov	r1, fp
    44c4:	4650      	mov	r0, sl
    44c6:	47a8      	blx	r5
    44c8:	4607      	mov	r7, r0
        obj->state = new_state;
    44ca:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    44ce:	4622      	mov	r2, r4
    44d0:	f8cd b004 	str.w	fp, [sp, #4]
    44d4:	4659      	mov	r1, fp
    44d6:	4650      	mov	r0, sl
    44d8:	47a8      	blx	r5
    44da:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    44dc:	7973      	ldrb	r3, [r6, #5]
    44de:	f36f 0382 	bfc	r3, #2, #1
    44e2:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
    44e4:	4287      	cmp	r7, r0
    44e6:	d04a      	beq.n	457e <lv_obj_set_state+0x106>
        obj->state = prev_state;
    44e8:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
    44ec:	4622      	mov	r2, r4
    44ee:	9901      	ldr	r1, [sp, #4]
    44f0:	4650      	mov	r0, sl
    44f2:	47a8      	blx	r5
    44f4:	4606      	mov	r6, r0
        obj->state = new_state;
    44f6:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    44fa:	4602      	mov	r2, r0
    44fc:	4621      	mov	r1, r4
    44fe:	9802      	ldr	r0, [sp, #8]
    4500:	4b82      	ldr	r3, [pc, #520]	; (470c <lv_obj_set_state+0x294>)
    4502:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
    4504:	2c01      	cmp	r4, #1
    4506:	f000 8094 	beq.w	4632 <lv_obj_set_state+0x1ba>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    450a:	4881      	ldr	r0, [pc, #516]	; (4710 <lv_obj_set_state+0x298>)
    450c:	4b81      	ldr	r3, [pc, #516]	; (4714 <lv_obj_set_state+0x29c>)
    450e:	4798      	blx	r3
    4510:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4512:	4b7a      	ldr	r3, [pc, #488]	; (46fc <lv_obj_set_state+0x284>)
    4514:	4798      	blx	r3
    4516:	2800      	cmp	r0, #0
    4518:	f000 80a2 	beq.w	4660 <lv_obj_set_state+0x1e8>
        if(tr == NULL) return NULL;
    451c:	2f00      	cmp	r7, #0
    451e:	d02e      	beq.n	457e <lv_obj_set_state+0x106>
        tr->start_value._int = int1;
    4520:	813e      	strh	r6, [r7, #8]
        tr->end_value._int = int2;
    4522:	f8a7 b00c 	strh.w	fp, [r7, #12]
                    tr->obj = obj;
    4526:	f8c7 a000 	str.w	sl, [r7]
                    tr->prop = props[i];
    452a:	80bc      	strh	r4, [r7, #4]
                    tr->part = part;
    452c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4530:	71bb      	strb	r3, [r7, #6]
                    lv_anim_init(&a);
    4532:	a80e      	add	r0, sp, #56	; 0x38
    4534:	4b78      	ldr	r3, [pc, #480]	; (4718 <lv_obj_set_state+0x2a0>)
    4536:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
    4538:	970e      	str	r7, [sp, #56]	; 0x38
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
    453a:	4b78      	ldr	r3, [pc, #480]	; (471c <lv_obj_set_state+0x2a4>)
    453c:	930f      	str	r3, [sp, #60]	; 0x3c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
    453e:	4b78      	ldr	r3, [pc, #480]	; (4720 <lv_obj_set_state+0x2a8>)
    4540:	9310      	str	r3, [sp, #64]	; 0x40
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
    4542:	4b78      	ldr	r3, [pc, #480]	; (4724 <lv_obj_set_state+0x2ac>)
    4544:	9311      	str	r3, [sp, #68]	; 0x44
    a->start = start;
    4546:	2300      	movs	r3, #0
    4548:	9314      	str	r3, [sp, #80]	; 0x50
    a->end   = end;
    454a:	23ff      	movs	r3, #255	; 0xff
    454c:	9315      	str	r3, [sp, #84]	; 0x54
                    lv_anim_set_time(&a, time);
    454e:	9b08      	ldr	r3, [sp, #32]
    4550:	9316      	str	r3, [sp, #88]	; 0x58
    a->act_time = (int32_t)(-delay);
    4552:	9b07      	ldr	r3, [sp, #28]
    4554:	425b      	negs	r3, r3
    4556:	9317      	str	r3, [sp, #92]	; 0x5c
    4558:	9a06      	ldr	r2, [sp, #24]
    455a:	1e53      	subs	r3, r2, #1
    455c:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    455e:	aa12      	add	r2, sp, #72	; 0x48
        *d8 = *s8;
    4560:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4564:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4568:	4283      	cmp	r3, r0
    456a:	d1f9      	bne.n	4560 <lv_obj_set_state+0xe8>
                    a.early_apply = 0;
    456c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
    4570:	f36f 0300 	bfc	r3, #0, #1
    4574:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
                    lv_anim_start(&a);
    4578:	a80e      	add	r0, sp, #56	; 0x38
    457a:	4b6b      	ldr	r3, [pc, #428]	; (4728 <lv_obj_set_state+0x2b0>)
    457c:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
    457e:	9b03      	ldr	r3, [sp, #12]
    4580:	aa0e      	add	r2, sp, #56	; 0x38
    4582:	4293      	cmp	r3, r2
    4584:	f000 812c 	beq.w	47e0 <lv_obj_set_state+0x368>
            if(props[i] != 0) {
    4588:	9b03      	ldr	r3, [sp, #12]
    458a:	f833 4b02 	ldrh.w	r4, [r3], #2
    458e:	9303      	str	r3, [sp, #12]
    4590:	2c00      	cmp	r4, #0
    4592:	d0f4      	beq.n	457e <lv_obj_set_state+0x106>
                _lv_style_list_add_trans_style(style_list);
    4594:	9805      	ldr	r0, [sp, #20]
    4596:	4b65      	ldr	r3, [pc, #404]	; (472c <lv_obj_set_state+0x2b4>)
    4598:	4798      	blx	r3
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    459a:	9901      	ldr	r1, [sp, #4]
    459c:	4650      	mov	r0, sl
    459e:	4b64      	ldr	r3, [pc, #400]	; (4730 <lv_obj_set_state+0x2b8>)
    45a0:	4798      	blx	r3
    45a2:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    45a4:	4b63      	ldr	r3, [pc, #396]	; (4734 <lv_obj_set_state+0x2bc>)
    45a6:	4798      	blx	r3
    45a8:	9002      	str	r0, [sp, #8]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    45aa:	f004 030f 	and.w	r3, r4, #15
    45ae:	2b08      	cmp	r3, #8
    45b0:	f77f af7e 	ble.w	44b0 <lv_obj_set_state+0x38>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    45b4:	2b0b      	cmp	r3, #11
    45b6:	dd59      	ble.n	466c <lv_obj_set_state+0x1f4>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    45b8:	2b0d      	cmp	r3, #13
    45ba:	f300 80c9 	bgt.w	4750 <lv_obj_set_state+0x2d8>
        style_list->skip_trans = 1;
    45be:	7973      	ldrb	r3, [r6, #5]
    45c0:	f043 0304 	orr.w	r3, r3, #4
    45c4:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    45c6:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    45ca:	4622      	mov	r2, r4
    45cc:	f8dd b004 	ldr.w	fp, [sp, #4]
    45d0:	4659      	mov	r1, fp
    45d2:	4650      	mov	r0, sl
    45d4:	4f58      	ldr	r7, [pc, #352]	; (4738 <lv_obj_set_state+0x2c0>)
    45d6:	47b8      	blx	r7
    45d8:	9009      	str	r0, [sp, #36]	; 0x24
        obj->state = new_state;
    45da:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    45de:	4622      	mov	r2, r4
    45e0:	f8cd b004 	str.w	fp, [sp, #4]
    45e4:	4659      	mov	r1, fp
    45e6:	4650      	mov	r0, sl
    45e8:	47b8      	blx	r7
    45ea:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    45ec:	7973      	ldrb	r3, [r6, #5]
    45ee:	f36f 0382 	bfc	r3, #2, #1
    45f2:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
    45f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    45f6:	4283      	cmp	r3, r0
    45f8:	d0c1      	beq.n	457e <lv_obj_set_state+0x106>
        obj->state = prev_state;
    45fa:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    45fe:	4622      	mov	r2, r4
    4600:	9901      	ldr	r1, [sp, #4]
    4602:	4650      	mov	r0, sl
    4604:	47b8      	blx	r7
    4606:	4606      	mov	r6, r0
        obj->state = new_state;
    4608:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    460c:	4602      	mov	r2, r0
    460e:	4621      	mov	r1, r4
    4610:	9802      	ldr	r0, [sp, #8]
    4612:	4b4a      	ldr	r3, [pc, #296]	; (473c <lv_obj_set_state+0x2c4>)
    4614:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4616:	483e      	ldr	r0, [pc, #248]	; (4710 <lv_obj_set_state+0x298>)
    4618:	4b3e      	ldr	r3, [pc, #248]	; (4714 <lv_obj_set_state+0x29c>)
    461a:	4798      	blx	r3
    461c:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    461e:	4b37      	ldr	r3, [pc, #220]	; (46fc <lv_obj_set_state+0x284>)
    4620:	4798      	blx	r3
    4622:	2800      	cmp	r0, #0
    4624:	d064      	beq.n	46f0 <lv_obj_set_state+0x278>
        if(tr == NULL) return NULL;
    4626:	2f00      	cmp	r7, #0
    4628:	d0a9      	beq.n	457e <lv_obj_set_state+0x106>
        tr->start_value._opa = o1;
    462a:	723e      	strb	r6, [r7, #8]
        tr->end_value._opa = o2;
    462c:	f887 b00c 	strb.w	fp, [r7, #12]
    4630:	e779      	b.n	4526 <lv_obj_set_state+0xae>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
    4632:	f647 73ff 	movw	r3, #32767	; 0x7fff
    4636:	429e      	cmp	r6, r3
    4638:	f000 8124 	beq.w	4884 <lv_obj_set_state+0x40c>
    463c:	459b      	cmp	fp, r3
    463e:	f47f af64 	bne.w	450a <lv_obj_set_state+0x92>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    4642:	4650      	mov	r0, sl
    4644:	f8df b104 	ldr.w	fp, [pc, #260]	; 474c <lv_obj_set_state+0x2d4>
    4648:	47d8      	blx	fp
    464a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    464e:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    4652:	4650      	mov	r0, sl
    4654:	47d8      	blx	fp
    4656:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    465a:	f340 034f 	sbfx	r3, r0, #1, #16
    465e:	e129      	b.n	48b4 <lv_obj_set_state+0x43c>
        LV_ASSERT_MEM(tr);
    4660:	463a      	mov	r2, r7
    4662:	2300      	movs	r3, #0
    4664:	4836      	ldr	r0, [pc, #216]	; (4740 <lv_obj_set_state+0x2c8>)
    4666:	4928      	ldr	r1, [pc, #160]	; (4708 <lv_obj_set_state+0x290>)
    4668:	4788      	blx	r1
    466a:	e7fe      	b.n	466a <lv_obj_set_state+0x1f2>
        style_list->skip_trans = 1;
    466c:	7973      	ldrb	r3, [r6, #5]
    466e:	f043 0304 	orr.w	r3, r3, #4
    4672:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    4674:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    4678:	4622      	mov	r2, r4
    467a:	9901      	ldr	r1, [sp, #4]
    467c:	4650      	mov	r0, sl
    467e:	4f31      	ldr	r7, [pc, #196]	; (4744 <lv_obj_set_state+0x2cc>)
    4680:	47b8      	blx	r7
    4682:	4683      	mov	fp, r0
        obj->state = new_state;
    4684:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    4688:	4622      	mov	r2, r4
    468a:	9901      	ldr	r1, [sp, #4]
    468c:	4650      	mov	r0, sl
    468e:	47b8      	blx	r7
    4690:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        style_list->skip_trans = 0;
    4694:	7973      	ldrb	r3, [r6, #5]
    4696:	f36f 0382 	bfc	r3, #2, #1
    469a:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
    469c:	fa1f fb8b 	uxth.w	fp, fp
    46a0:	b283      	uxth	r3, r0
    46a2:	459b      	cmp	fp, r3
    46a4:	f43f af6b 	beq.w	457e <lv_obj_set_state+0x106>
        obj->state = prev_state;
    46a8:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
    46ac:	4622      	mov	r2, r4
    46ae:	9901      	ldr	r1, [sp, #4]
    46b0:	4650      	mov	r0, sl
    46b2:	47b8      	blx	r7
    46b4:	4683      	mov	fp, r0
        obj->state = new_state;
    46b6:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    46ba:	4602      	mov	r2, r0
    46bc:	4621      	mov	r1, r4
    46be:	9802      	ldr	r0, [sp, #8]
    46c0:	4b21      	ldr	r3, [pc, #132]	; (4748 <lv_obj_set_state+0x2d0>)
    46c2:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    46c4:	4812      	ldr	r0, [pc, #72]	; (4710 <lv_obj_set_state+0x298>)
    46c6:	4b13      	ldr	r3, [pc, #76]	; (4714 <lv_obj_set_state+0x29c>)
    46c8:	4798      	blx	r3
    46ca:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    46cc:	4b0b      	ldr	r3, [pc, #44]	; (46fc <lv_obj_set_state+0x284>)
    46ce:	4798      	blx	r3
    46d0:	b140      	cbz	r0, 46e4 <lv_obj_set_state+0x26c>
        if(tr == NULL) return NULL;
    46d2:	2f00      	cmp	r7, #0
    46d4:	f43f af53 	beq.w	457e <lv_obj_set_state+0x106>
        tr->start_value._color = c1;
    46d8:	f8a7 b008 	strh.w	fp, [r7, #8]
        tr->end_value._color = c2;
    46dc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    46e0:	81bb      	strh	r3, [r7, #12]
    46e2:	e720      	b.n	4526 <lv_obj_set_state+0xae>
        LV_ASSERT_MEM(tr);
    46e4:	463a      	mov	r2, r7
    46e6:	2300      	movs	r3, #0
    46e8:	4815      	ldr	r0, [pc, #84]	; (4740 <lv_obj_set_state+0x2c8>)
    46ea:	4907      	ldr	r1, [pc, #28]	; (4708 <lv_obj_set_state+0x290>)
    46ec:	4788      	blx	r1
    46ee:	e7fe      	b.n	46ee <lv_obj_set_state+0x276>
        LV_ASSERT_MEM(tr);
    46f0:	463a      	mov	r2, r7
    46f2:	2300      	movs	r3, #0
    46f4:	4812      	ldr	r0, [pc, #72]	; (4740 <lv_obj_set_state+0x2c8>)
    46f6:	4904      	ldr	r1, [pc, #16]	; (4708 <lv_obj_set_state+0x290>)
    46f8:	4788      	blx	r1
    46fa:	e7fe      	b.n	46fa <lv_obj_set_state+0x282>
    46fc:	0000291f 	.word	0x0000291f
    4700:	00004199 	.word	0x00004199
    4704:	00017618 	.word	0x00017618
    4708:	00002929 	.word	0x00002929
    470c:	00005ffd 	.word	0x00005ffd
    4710:	2000ad50 	.word	0x2000ad50
    4714:	000110b5 	.word	0x000110b5
    4718:	00010529 	.word	0x00010529
    471c:	00003bcd 	.word	0x00003bcd
    4720:	00004405 	.word	0x00004405
    4724:	00003245 	.word	0x00003245
    4728:	000105e5 	.word	0x000105e5
    472c:	000068e1 	.word	0x000068e1
    4730:	00003149 	.word	0x00003149
    4734:	00006793 	.word	0x00006793
    4738:	000042d1 	.word	0x000042d1
    473c:	0000624d 	.word	0x0000624d
    4740:	00017604 	.word	0x00017604
    4744:	00004245 	.word	0x00004245
    4748:	00006125 	.word	0x00006125
    474c:	000030e9 	.word	0x000030e9
        obj->state = prev_state;
    4750:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        style_list->skip_trans = 1;
    4754:	7973      	ldrb	r3, [r6, #5]
    4756:	f043 0304 	orr.w	r3, r3, #4
    475a:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    475c:	4622      	mov	r2, r4
    475e:	f8dd b004 	ldr.w	fp, [sp, #4]
    4762:	4659      	mov	r1, fp
    4764:	4650      	mov	r0, sl
    4766:	4f58      	ldr	r7, [pc, #352]	; (48c8 <lv_obj_set_state+0x450>)
    4768:	47b8      	blx	r7
    476a:	900a      	str	r0, [sp, #40]	; 0x28
        obj->state = new_state;
    476c:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    4770:	4622      	mov	r2, r4
    4772:	f8cd b004 	str.w	fp, [sp, #4]
    4776:	4659      	mov	r1, fp
    4778:	4650      	mov	r0, sl
    477a:	47b8      	blx	r7
    477c:	4683      	mov	fp, r0
    477e:	a91e      	add	r1, sp, #120	; 0x78
    4780:	f841 0d40 	str.w	r0, [r1, #-64]!
        style_list->skip_trans = 0;
    4784:	7973      	ldrb	r3, [r6, #5]
    4786:	f36f 0382 	bfc	r3, #2, #1
    478a:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
    478c:	2204      	movs	r2, #4
    478e:	a80a      	add	r0, sp, #40	; 0x28
    4790:	4b4e      	ldr	r3, [pc, #312]	; (48cc <lv_obj_set_state+0x454>)
    4792:	4798      	blx	r3
    4794:	2800      	cmp	r0, #0
    4796:	f43f aef2 	beq.w	457e <lv_obj_set_state+0x106>
        obj->state = prev_state;
    479a:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    479e:	4622      	mov	r2, r4
    47a0:	9901      	ldr	r1, [sp, #4]
    47a2:	4650      	mov	r0, sl
    47a4:	47b8      	blx	r7
    47a6:	4606      	mov	r6, r0
    47a8:	900a      	str	r0, [sp, #40]	; 0x28
        obj->state = new_state;
    47aa:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    47ae:	4602      	mov	r2, r0
    47b0:	4621      	mov	r1, r4
    47b2:	9802      	ldr	r0, [sp, #8]
    47b4:	4b46      	ldr	r3, [pc, #280]	; (48d0 <lv_obj_set_state+0x458>)
    47b6:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    47b8:	4846      	ldr	r0, [pc, #280]	; (48d4 <lv_obj_set_state+0x45c>)
    47ba:	4b47      	ldr	r3, [pc, #284]	; (48d8 <lv_obj_set_state+0x460>)
    47bc:	4798      	blx	r3
    47be:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    47c0:	4b46      	ldr	r3, [pc, #280]	; (48dc <lv_obj_set_state+0x464>)
    47c2:	4798      	blx	r3
    47c4:	b130      	cbz	r0, 47d4 <lv_obj_set_state+0x35c>
        if(tr == NULL) return NULL;
    47c6:	2f00      	cmp	r7, #0
    47c8:	f43f aed9 	beq.w	457e <lv_obj_set_state+0x106>
        tr->start_value._ptr = p1;
    47cc:	60be      	str	r6, [r7, #8]
        tr->end_value._ptr = p2;
    47ce:	f8c7 b00c 	str.w	fp, [r7, #12]
    47d2:	e6a8      	b.n	4526 <lv_obj_set_state+0xae>
        LV_ASSERT_MEM(tr);
    47d4:	463a      	mov	r2, r7
    47d6:	2300      	movs	r3, #0
    47d8:	4841      	ldr	r0, [pc, #260]	; (48e0 <lv_obj_set_state+0x468>)
    47da:	4942      	ldr	r1, [pc, #264]	; (48e4 <lv_obj_set_state+0x46c>)
    47dc:	4788      	blx	r1
    47de:	e7fe      	b.n	47de <lv_obj_set_state+0x366>
    47e0:	9b04      	ldr	r3, [sp, #16]
    47e2:	3301      	adds	r3, #1
    47e4:	9304      	str	r3, [sp, #16]
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    47e6:	2b40      	cmp	r3, #64	; 0x40
    47e8:	d045      	beq.n	4876 <lv_obj_set_state+0x3fe>
    47ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
    47ee:	9301      	str	r3, [sp, #4]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    47f0:	4619      	mov	r1, r3
    47f2:	4650      	mov	r0, sl
    47f4:	4b3c      	ldr	r3, [pc, #240]	; (48e8 <lv_obj_set_state+0x470>)
    47f6:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
    47f8:	9005      	str	r0, [sp, #20]
    47fa:	2800      	cmp	r0, #0
    47fc:	d03b      	beq.n	4876 <lv_obj_set_state+0x3fe>
        if(style_list->ignore_trans) continue;
    47fe:	7943      	ldrb	r3, [r0, #5]
    4800:	f013 0f08 	tst.w	r3, #8
    4804:	d1ec      	bne.n	47e0 <lv_obj_set_state+0x368>
    4806:	22b0      	movs	r2, #176	; 0xb0
    4808:	9c01      	ldr	r4, [sp, #4]
    480a:	4621      	mov	r1, r4
    480c:	4650      	mov	r0, sl
    480e:	47a8      	blx	r5
    4810:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    4812:	22b1      	movs	r2, #177	; 0xb1
    4814:	4621      	mov	r1, r4
    4816:	4650      	mov	r0, sl
    4818:	47a8      	blx	r5
    481a:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    481c:	22be      	movs	r2, #190	; 0xbe
    481e:	4621      	mov	r1, r4
    4820:	4650      	mov	r0, sl
    4822:	4b29      	ldr	r3, [pc, #164]	; (48c8 <lv_obj_set_state+0x450>)
    4824:	4798      	blx	r3
    4826:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    4828:	22b2      	movs	r2, #178	; 0xb2
    482a:	4621      	mov	r1, r4
    482c:	4650      	mov	r0, sl
    482e:	47a8      	blx	r5
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
    4830:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
    4834:	22b3      	movs	r2, #179	; 0xb3
    4836:	4621      	mov	r1, r4
    4838:	4650      	mov	r0, sl
    483a:	47a8      	blx	r5
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
    483c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
    4840:	22b4      	movs	r2, #180	; 0xb4
    4842:	4621      	mov	r1, r4
    4844:	4650      	mov	r0, sl
    4846:	47a8      	blx	r5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
    4848:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
    484c:	22b5      	movs	r2, #181	; 0xb5
    484e:	4621      	mov	r1, r4
    4850:	4650      	mov	r0, sl
    4852:	47a8      	blx	r5
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
    4854:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
    4858:	22b6      	movs	r2, #182	; 0xb6
    485a:	4621      	mov	r1, r4
    485c:	4650      	mov	r0, sl
    485e:	47a8      	blx	r5
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
    4860:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
    4864:	22b7      	movs	r2, #183	; 0xb7
    4866:	4621      	mov	r1, r4
    4868:	4650      	mov	r0, sl
    486a:	47a8      	blx	r5
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
    486c:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    4870:	ab0b      	add	r3, sp, #44	; 0x2c
    4872:	9303      	str	r3, [sp, #12]
    4874:	e688      	b.n	4588 <lv_obj_set_state+0x110>
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    4876:	21ff      	movs	r1, #255	; 0xff
    4878:	4650      	mov	r0, sl
    487a:	4b1c      	ldr	r3, [pc, #112]	; (48ec <lv_obj_set_state+0x474>)
    487c:	4798      	blx	r3
}
    487e:	b01f      	add	sp, #124	; 0x7c
    4880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    4884:	4650      	mov	r0, sl
    4886:	4e1a      	ldr	r6, [pc, #104]	; (48f0 <lv_obj_set_state+0x478>)
    4888:	47b0      	blx	r6
    488a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    488e:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    4892:	4650      	mov	r0, sl
    4894:	47b0      	blx	r6
    4896:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    489a:	f340 034f 	sbfx	r3, r0, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    489e:	1c5e      	adds	r6, r3, #1
    48a0:	1c7a      	adds	r2, r7, #1
    48a2:	4296      	cmp	r6, r2
    48a4:	bfa8      	it	ge
    48a6:	4616      	movge	r6, r2
    48a8:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    48aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
    48ae:	4593      	cmp	fp, r2
    48b0:	f47f ae2b 	bne.w	450a <lv_obj_set_state+0x92>
    48b4:	f103 0b01 	add.w	fp, r3, #1
    48b8:	3701      	adds	r7, #1
    48ba:	45bb      	cmp	fp, r7
    48bc:	bfa8      	it	ge
    48be:	46bb      	movge	fp, r7
    48c0:	fa0f fb8b 	sxth.w	fp, fp
    48c4:	e621      	b.n	450a <lv_obj_set_state+0x92>
    48c6:	4770      	bx	lr
    48c8:	00004365 	.word	0x00004365
    48cc:	0001744d 	.word	0x0001744d
    48d0:	00006361 	.word	0x00006361
    48d4:	2000ad50 	.word	0x2000ad50
    48d8:	000110b5 	.word	0x000110b5
    48dc:	0000291f 	.word	0x0000291f
    48e0:	00017604 	.word	0x00017604
    48e4:	00002929 	.word	0x00002929
    48e8:	00003149 	.word	0x00003149
    48ec:	000039d9 	.word	0x000039d9
    48f0:	000030e9 	.word	0x000030e9

000048f4 <lv_obj_add_state>:
{
    48f4:	b538      	push	{r3, r4, r5, lr}
    48f6:	4605      	mov	r5, r0
    48f8:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    48fa:	4b09      	ldr	r3, [pc, #36]	; (4920 <lv_obj_add_state+0x2c>)
    48fc:	4798      	blx	r3
    48fe:	b148      	cbz	r0, 4914 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
    4900:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    4904:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
    4908:	428b      	cmp	r3, r1
    490a:	d002      	beq.n	4912 <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
    490c:	4628      	mov	r0, r5
    490e:	4b05      	ldr	r3, [pc, #20]	; (4924 <lv_obj_add_state+0x30>)
    4910:	4798      	blx	r3
    4912:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4914:	462a      	mov	r2, r5
    4916:	2300      	movs	r3, #0
    4918:	4803      	ldr	r0, [pc, #12]	; (4928 <lv_obj_add_state+0x34>)
    491a:	4904      	ldr	r1, [pc, #16]	; (492c <lv_obj_add_state+0x38>)
    491c:	4788      	blx	r1
    491e:	e7fe      	b.n	491e <lv_obj_add_state+0x2a>
    4920:	0000291f 	.word	0x0000291f
    4924:	00004479 	.word	0x00004479
    4928:	00017618 	.word	0x00017618
    492c:	00002929 	.word	0x00002929

00004930 <lv_obj_clear_state>:
{
    4930:	b538      	push	{r3, r4, r5, lr}
    4932:	4605      	mov	r5, r0
    4934:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4936:	4b09      	ldr	r3, [pc, #36]	; (495c <lv_obj_clear_state+0x2c>)
    4938:	4798      	blx	r3
    493a:	b148      	cbz	r0, 4950 <lv_obj_clear_state+0x20>
    lv_state_t new_state = obj->state & (~state);
    493c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    4940:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
    4944:	428b      	cmp	r3, r1
    4946:	d002      	beq.n	494e <lv_obj_clear_state+0x1e>
        lv_obj_set_state(obj, new_state);
    4948:	4628      	mov	r0, r5
    494a:	4b05      	ldr	r3, [pc, #20]	; (4960 <lv_obj_clear_state+0x30>)
    494c:	4798      	blx	r3
    494e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4950:	462a      	mov	r2, r5
    4952:	2300      	movs	r3, #0
    4954:	4803      	ldr	r0, [pc, #12]	; (4964 <lv_obj_clear_state+0x34>)
    4956:	4904      	ldr	r1, [pc, #16]	; (4968 <lv_obj_clear_state+0x38>)
    4958:	4788      	blx	r1
    495a:	e7fe      	b.n	495a <lv_obj_clear_state+0x2a>
    495c:	0000291f 	.word	0x0000291f
    4960:	00004479 	.word	0x00004479
    4964:	00017618 	.word	0x00017618
    4968:	00002929 	.word	0x00002929

0000496c <lv_obj_get_group>:
{
    496c:	b510      	push	{r4, lr}
    496e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4970:	4b05      	ldr	r3, [pc, #20]	; (4988 <lv_obj_get_group+0x1c>)
    4972:	4798      	blx	r3
    4974:	b108      	cbz	r0, 497a <lv_obj_get_group+0xe>
}
    4976:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4978:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    497a:	4622      	mov	r2, r4
    497c:	2300      	movs	r3, #0
    497e:	4803      	ldr	r0, [pc, #12]	; (498c <lv_obj_get_group+0x20>)
    4980:	4903      	ldr	r1, [pc, #12]	; (4990 <lv_obj_get_group+0x24>)
    4982:	4788      	blx	r1
    4984:	e7fe      	b.n	4984 <lv_obj_get_group+0x18>
    4986:	bf00      	nop
    4988:	0000291f 	.word	0x0000291f
    498c:	00017618 	.word	0x00017618
    4990:	00002929 	.word	0x00002929

00004994 <lv_obj_is_focused>:
{
    4994:	b510      	push	{r4, lr}
    4996:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4998:	4b09      	ldr	r3, [pc, #36]	; (49c0 <lv_obj_is_focused+0x2c>)
    499a:	4798      	blx	r3
    499c:	b140      	cbz	r0, 49b0 <lv_obj_is_focused+0x1c>
    if(obj->group_p) {
    499e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    49a0:	b160      	cbz	r0, 49bc <lv_obj_is_focused+0x28>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
    49a2:	4b08      	ldr	r3, [pc, #32]	; (49c4 <lv_obj_is_focused+0x30>)
    49a4:	4798      	blx	r3
    49a6:	4284      	cmp	r4, r0
    49a8:	bf14      	ite	ne
    49aa:	2000      	movne	r0, #0
    49ac:	2001      	moveq	r0, #1
    49ae:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    49b0:	4622      	mov	r2, r4
    49b2:	2300      	movs	r3, #0
    49b4:	4804      	ldr	r0, [pc, #16]	; (49c8 <lv_obj_is_focused+0x34>)
    49b6:	4905      	ldr	r1, [pc, #20]	; (49cc <lv_obj_is_focused+0x38>)
    49b8:	4788      	blx	r1
    49ba:	e7fe      	b.n	49ba <lv_obj_is_focused+0x26>
    return false;
    49bc:	2000      	movs	r0, #0
}
    49be:	bd10      	pop	{r4, pc}
    49c0:	0000291f 	.word	0x0000291f
    49c4:	00002bc9 	.word	0x00002bc9
    49c8:	00017618 	.word	0x00017618
    49cc:	00002929 	.word	0x00002929

000049d0 <lv_obj_handle_get_type_signal>:
        if(buf->type[i] == NULL) break;
    49d0:	6803      	ldr	r3, [r0, #0]
    49d2:	b17b      	cbz	r3, 49f4 <lv_obj_handle_get_type_signal+0x24>
{
    49d4:	b410      	push	{r4}
    49d6:	1d02      	adds	r2, r0, #4
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    49d8:	2301      	movs	r3, #1
        if(buf->type[i] == NULL) break;
    49da:	f852 4b04 	ldr.w	r4, [r2], #4
    49de:	b11c      	cbz	r4, 49e8 <lv_obj_handle_get_type_signal+0x18>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    49e0:	3301      	adds	r3, #1
    49e2:	b2db      	uxtb	r3, r3
    49e4:	2b07      	cmp	r3, #7
    49e6:	d1f8      	bne.n	49da <lv_obj_handle_get_type_signal+0xa>
    buf->type[i] = name;
    49e8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    49ec:	2001      	movs	r0, #1
    49ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    49f2:	4770      	bx	lr
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    49f4:	2300      	movs	r3, #0
    buf->type[i] = name;
    49f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    49fa:	2001      	movs	r0, #1
    49fc:	4770      	bx	lr
	...

00004a00 <lv_obj_init_draw_rect_dsc>:
{
    4a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a04:	4605      	mov	r5, r0
    4a06:	460e      	mov	r6, r1
    4a08:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    4a0a:	2201      	movs	r2, #1
    4a0c:	4ba8      	ldr	r3, [pc, #672]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4a0e:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
    4a10:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    4a12:	f248 020c 	movw	r2, #32780	; 0x800c
    4a16:	4631      	mov	r1, r6
    4a18:	4628      	mov	r0, r5
    4a1a:	4ba6      	ldr	r3, [pc, #664]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4a1c:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
    4a1e:	2805      	cmp	r0, #5
    4a20:	d942      	bls.n	4aa8 <lv_obj_init_draw_rect_dsc+0xa8>
    4a22:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
    4a24:	7b23      	ldrb	r3, [r4, #12]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d149      	bne.n	4abe <lv_obj_init_draw_rect_dsc+0xbe>
    if(draw_dsc->border_opa != LV_OPA_TRANSP) {
    4a2a:	7d23      	ldrb	r3, [r4, #20]
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d176      	bne.n	4b1e <lv_obj_init_draw_rect_dsc+0x11e>
    if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
    4a30:	7f23      	ldrb	r3, [r4, #28]
    4a32:	2b00      	cmp	r3, #0
    4a34:	f040 8098 	bne.w	4b68 <lv_obj_init_draw_rect_dsc+0x168>
    if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
    4a38:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	f040 80b8 	bne.w	4bb2 <lv_obj_init_draw_rect_dsc+0x1b2>
    if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    4a42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4a46:	2b05      	cmp	r3, #5
    4a48:	f200 8101 	bhi.w	4c4e <lv_obj_init_draw_rect_dsc+0x24e>
    if(draw_dsc->value_opa > LV_OPA_MIN) {
    4a4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4a50:	2b05      	cmp	r3, #5
    4a52:	f200 8137 	bhi.w	4cc4 <lv_obj_init_draw_rect_dsc+0x2c4>
    if(opa_scale < LV_OPA_MAX) {
    4a56:	2ff9      	cmp	r7, #249	; 0xf9
    4a58:	d824      	bhi.n	4aa4 <lv_obj_init_draw_rect_dsc+0xa4>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
    4a5a:	b2bf      	uxth	r7, r7
    4a5c:	7b23      	ldrb	r3, [r4, #12]
    4a5e:	fb13 f307 	smulbb	r3, r3, r7
    4a62:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a66:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
    4a68:	7d23      	ldrb	r3, [r4, #20]
    4a6a:	fb13 f307 	smulbb	r3, r3, r7
    4a6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a72:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
    4a74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4a78:	fb13 f307 	smulbb	r3, r3, r7
    4a7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a80:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
    4a84:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    4a88:	fb13 f307 	smulbb	r3, r3, r7
    4a8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a90:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
    4a94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4a98:	fb13 f707 	smulbb	r7, r3, r7
    4a9c:	f3c7 2707 	ubfx	r7, r7, #8, #8
    4aa0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    4aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
    4aa8:	2300      	movs	r3, #0
    4aaa:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
    4aac:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
    4aae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
    4ab2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
    4ab6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
    4aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    4abe:	222c      	movs	r2, #44	; 0x2c
    4ac0:	4631      	mov	r1, r6
    4ac2:	4628      	mov	r0, r5
    4ac4:	4b7b      	ldr	r3, [pc, #492]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4ac6:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
    4ac8:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
    4aca:	2805      	cmp	r0, #5
    4acc:	d9ad      	bls.n	4a2a <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
    4ace:	2229      	movs	r2, #41	; 0x29
    4ad0:	4631      	mov	r1, r6
    4ad2:	4628      	mov	r0, r5
    4ad4:	4b78      	ldr	r3, [pc, #480]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4ad6:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
    4ad8:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
    4ada:	2223      	movs	r2, #35	; 0x23
    4adc:	4631      	mov	r1, r6
    4ade:	4628      	mov	r0, r5
    4ae0:	4b73      	ldr	r3, [pc, #460]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4ae2:	4798      	blx	r3
    4ae4:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
    4ae6:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
    4ae8:	b930      	cbnz	r0, 4af8 <lv_obj_init_draw_rect_dsc+0xf8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    4aea:	2220      	movs	r2, #32
    4aec:	4631      	mov	r1, r6
    4aee:	4628      	mov	r0, r5
    4af0:	4b6f      	ldr	r3, [pc, #444]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4af2:	4798      	blx	r3
    4af4:	7360      	strb	r0, [r4, #13]
    4af6:	e798      	b.n	4a2a <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
    4af8:	222a      	movs	r2, #42	; 0x2a
    4afa:	4631      	mov	r1, r6
    4afc:	4628      	mov	r0, r5
    4afe:	4b6e      	ldr	r3, [pc, #440]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4b00:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
    4b02:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
    4b04:	2221      	movs	r2, #33	; 0x21
    4b06:	4631      	mov	r1, r6
    4b08:	4628      	mov	r0, r5
    4b0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>
    4b0e:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
    4b10:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
    4b12:	2222      	movs	r2, #34	; 0x22
    4b14:	4631      	mov	r1, r6
    4b16:	4628      	mov	r0, r5
    4b18:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
    4b1a:	8160      	strh	r0, [r4, #10]
    4b1c:	e7e5      	b.n	4aea <lv_obj_init_draw_rect_dsc+0xea>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
    4b1e:	2230      	movs	r2, #48	; 0x30
    4b20:	4631      	mov	r1, r6
    4b22:	4628      	mov	r0, r5
    4b24:	4b62      	ldr	r3, [pc, #392]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b26:	4798      	blx	r3
        draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
    4b28:	8220      	strh	r0, [r4, #16]
        if(draw_dsc->border_width) {
    4b2a:	2800      	cmp	r0, #0
    4b2c:	d080      	beq.n	4a30 <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
    4b2e:	223c      	movs	r2, #60	; 0x3c
    4b30:	4631      	mov	r1, r6
    4b32:	4628      	mov	r0, r5
    4b34:	4b5f      	ldr	r3, [pc, #380]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4b36:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
    4b38:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
    4b3a:	2805      	cmp	r0, #5
    4b3c:	d806      	bhi.n	4b4c <lv_obj_init_draw_rect_dsc+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    4b3e:	2232      	movs	r2, #50	; 0x32
    4b40:	4631      	mov	r1, r6
    4b42:	4628      	mov	r0, r5
    4b44:	4b5a      	ldr	r3, [pc, #360]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b46:	4798      	blx	r3
    4b48:	7560      	strb	r0, [r4, #21]
    4b4a:	e771      	b.n	4a30 <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
    4b4c:	2231      	movs	r2, #49	; 0x31
    4b4e:	4631      	mov	r1, r6
    4b50:	4628      	mov	r0, r5
    4b52:	4b57      	ldr	r3, [pc, #348]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b54:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
    4b56:	b2c0      	uxtb	r0, r0
    4b58:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
    4b5a:	2239      	movs	r2, #57	; 0x39
    4b5c:	4631      	mov	r1, r6
    4b5e:	4628      	mov	r0, r5
    4b60:	4b55      	ldr	r3, [pc, #340]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4b62:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
    4b64:	81e0      	strh	r0, [r4, #14]
    4b66:	e7ea      	b.n	4b3e <lv_obj_init_draw_rect_dsc+0x13e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    4b68:	2240      	movs	r2, #64	; 0x40
    4b6a:	4631      	mov	r1, r6
    4b6c:	4628      	mov	r0, r5
    4b6e:	4b50      	ldr	r3, [pc, #320]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b70:	4798      	blx	r3
        draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
    4b72:	8320      	strh	r0, [r4, #24]
        if(draw_dsc->outline_width) {
    4b74:	2800      	cmp	r0, #0
    4b76:	f43f af5f 	beq.w	4a38 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    4b7a:	224c      	movs	r2, #76	; 0x4c
    4b7c:	4631      	mov	r1, r6
    4b7e:	4628      	mov	r0, r5
    4b80:	4b4c      	ldr	r3, [pc, #304]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4b82:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
    4b84:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
    4b86:	2805      	cmp	r0, #5
    4b88:	d806      	bhi.n	4b98 <lv_obj_init_draw_rect_dsc+0x198>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
    4b8a:	2242      	movs	r2, #66	; 0x42
    4b8c:	4631      	mov	r1, r6
    4b8e:	4628      	mov	r0, r5
    4b90:	4b47      	ldr	r3, [pc, #284]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4b92:	4798      	blx	r3
    4b94:	7760      	strb	r0, [r4, #29]
    4b96:	e74f      	b.n	4a38 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    4b98:	2241      	movs	r2, #65	; 0x41
    4b9a:	4631      	mov	r1, r6
    4b9c:	4628      	mov	r0, r5
    4b9e:	4b44      	ldr	r3, [pc, #272]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4ba0:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
    4ba2:	8360      	strh	r0, [r4, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
    4ba4:	2249      	movs	r2, #73	; 0x49
    4ba6:	4631      	mov	r1, r6
    4ba8:	4628      	mov	r0, r5
    4baa:	4b43      	ldr	r3, [pc, #268]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4bac:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
    4bae:	82e0      	strh	r0, [r4, #22]
    4bb0:	e7eb      	b.n	4b8a <lv_obj_init_draw_rect_dsc+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
    4bb2:	226e      	movs	r2, #110	; 0x6e
    4bb4:	4631      	mov	r1, r6
    4bb6:	4628      	mov	r0, r5
    4bb8:	4b40      	ldr	r3, [pc, #256]	; (4cbc <lv_obj_init_draw_rect_dsc+0x2bc>)
    4bba:	4798      	blx	r3
        draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
    4bbc:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(draw_dsc->pattern_image) {
    4bbe:	2800      	cmp	r0, #0
    4bc0:	f43f af3f 	beq.w	4a42 <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
    4bc4:	226c      	movs	r2, #108	; 0x6c
    4bc6:	4631      	mov	r1, r6
    4bc8:	4628      	mov	r0, r5
    4bca:	4b3a      	ldr	r3, [pc, #232]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4bcc:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
    4bce:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
    4bd2:	2805      	cmp	r0, #5
    4bd4:	f67f af35 	bls.w	4a42 <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
    4bd8:	226d      	movs	r2, #109	; 0x6d
    4bda:	4631      	mov	r1, r6
    4bdc:	4628      	mov	r0, r5
    4bde:	4b35      	ldr	r3, [pc, #212]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4be0:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
    4be2:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
    4be6:	2261      	movs	r2, #97	; 0x61
    4be8:	4631      	mov	r1, r6
    4bea:	4628      	mov	r0, r5
    4bec:	4b30      	ldr	r3, [pc, #192]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4bee:	4798      	blx	r3
    4bf0:	3000      	adds	r0, #0
    4bf2:	bf18      	it	ne
    4bf4:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
    4bf6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    4bfa:	f360 0300 	bfi	r3, r0, #0, #1
    4bfe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
    4c02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4c04:	4b2e      	ldr	r3, [pc, #184]	; (4cc0 <lv_obj_init_draw_rect_dsc+0x2c0>)
    4c06:	4798      	blx	r3
    4c08:	2802      	cmp	r0, #2
    4c0a:	d00b      	beq.n	4c24 <lv_obj_init_draw_rect_dsc+0x224>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
    4c0c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    4c10:	2b05      	cmp	r3, #5
    4c12:	d815      	bhi.n	4c40 <lv_obj_init_draw_rect_dsc+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
    4c14:	2260      	movs	r2, #96	; 0x60
    4c16:	4631      	mov	r1, r6
    4c18:	4628      	mov	r0, r5
    4c1a:	4b25      	ldr	r3, [pc, #148]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4c1c:	4798      	blx	r3
    4c1e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    4c22:	e70e      	b.n	4a42 <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    4c24:	2269      	movs	r2, #105	; 0x69
    4c26:	4631      	mov	r1, r6
    4c28:	4628      	mov	r0, r5
    4c2a:	4b23      	ldr	r3, [pc, #140]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4c2c:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    4c2e:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    4c30:	f248 028e 	movw	r2, #32910	; 0x808e
    4c34:	4631      	mov	r1, r6
    4c36:	4628      	mov	r0, r5
    4c38:	4b20      	ldr	r3, [pc, #128]	; (4cbc <lv_obj_init_draw_rect_dsc+0x2bc>)
    4c3a:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
    4c3c:	6320      	str	r0, [r4, #48]	; 0x30
    4c3e:	e7e9      	b.n	4c14 <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    4c40:	2269      	movs	r2, #105	; 0x69
    4c42:	4631      	mov	r1, r6
    4c44:	4628      	mov	r0, r5
    4c46:	4b1c      	ldr	r3, [pc, #112]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4c48:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    4c4a:	86a0      	strh	r0, [r4, #52]	; 0x34
    4c4c:	e7e2      	b.n	4c14 <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    4c4e:	2250      	movs	r2, #80	; 0x50
    4c50:	4631      	mov	r1, r6
    4c52:	4628      	mov	r0, r5
    4c54:	4b16      	ldr	r3, [pc, #88]	; (4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>)
    4c56:	4798      	blx	r3
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
    4c58:	8420      	strh	r0, [r4, #32]
        if(draw_dsc->shadow_width) {
    4c5a:	2800      	cmp	r0, #0
    4c5c:	f43f aef6 	beq.w	4a4c <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    4c60:	225c      	movs	r2, #92	; 0x5c
    4c62:	4631      	mov	r1, r6
    4c64:	4628      	mov	r0, r5
    4c66:	4b13      	ldr	r3, [pc, #76]	; (4cb4 <lv_obj_init_draw_rect_dsc+0x2b4>)
    4c68:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
    4c6a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    4c6e:	2805      	cmp	r0, #5
    4c70:	f67f aeec 	bls.w	4a4c <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    4c74:	2251      	movs	r2, #81	; 0x51
    4c76:	4631      	mov	r1, r6
    4c78:	4628      	mov	r0, r5
    4c7a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4cb0 <lv_obj_init_draw_rect_dsc+0x2b0>
    4c7e:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
    4c80:	8460      	strh	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    4c82:	2252      	movs	r2, #82	; 0x52
    4c84:	4631      	mov	r1, r6
    4c86:	4628      	mov	r0, r5
    4c88:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
    4c8a:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    4c8c:	2253      	movs	r2, #83	; 0x53
    4c8e:	4631      	mov	r1, r6
    4c90:	4628      	mov	r0, r5
    4c92:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
    4c94:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
    4c96:	2259      	movs	r2, #89	; 0x59
    4c98:	4631      	mov	r1, r6
    4c9a:	4628      	mov	r0, r5
    4c9c:	4b06      	ldr	r3, [pc, #24]	; (4cb8 <lv_obj_init_draw_rect_dsc+0x2b8>)
    4c9e:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
    4ca0:	83e0      	strh	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
    4ca2:	2254      	movs	r2, #84	; 0x54
    4ca4:	4631      	mov	r1, r6
    4ca6:	4628      	mov	r0, r5
    4ca8:	47c0      	blx	r8
    4caa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    4cae:	e6cd      	b.n	4a4c <lv_obj_init_draw_rect_dsc+0x4c>
    4cb0:	00004199 	.word	0x00004199
    4cb4:	000042d1 	.word	0x000042d1
    4cb8:	00004245 	.word	0x00004245
    4cbc:	00004365 	.word	0x00004365
    4cc0:	00008f35 	.word	0x00008f35
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    4cc4:	227f      	movs	r2, #127	; 0x7f
    4cc6:	4631      	mov	r1, r6
    4cc8:	4628      	mov	r0, r5
    4cca:	4b22      	ldr	r3, [pc, #136]	; (4d54 <lv_obj_init_draw_rect_dsc+0x354>)
    4ccc:	4798      	blx	r3
        draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
    4cce:	63e0      	str	r0, [r4, #60]	; 0x3c
        if(draw_dsc->value_str) {
    4cd0:	2800      	cmp	r0, #0
    4cd2:	f43f aec0 	beq.w	4a56 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    4cd6:	227c      	movs	r2, #124	; 0x7c
    4cd8:	4631      	mov	r1, r6
    4cda:	4628      	mov	r0, r5
    4cdc:	4b1e      	ldr	r3, [pc, #120]	; (4d58 <lv_obj_init_draw_rect_dsc+0x358>)
    4cde:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
    4ce0:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
    4ce4:	2805      	cmp	r0, #5
    4ce6:	f67f aeb6 	bls.w	4a56 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    4cea:	2273      	movs	r2, #115	; 0x73
    4cec:	4631      	mov	r1, r6
    4cee:	4628      	mov	r0, r5
    4cf0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4d60 <lv_obj_init_draw_rect_dsc+0x360>
    4cf4:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
    4cf6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    4cfa:	2274      	movs	r2, #116	; 0x74
    4cfc:	4631      	mov	r1, r6
    4cfe:	4628      	mov	r0, r5
    4d00:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
    4d02:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
    4d06:	2279      	movs	r2, #121	; 0x79
    4d08:	4631      	mov	r1, r6
    4d0a:	4628      	mov	r0, r5
    4d0c:	4b13      	ldr	r3, [pc, #76]	; (4d5c <lv_obj_init_draw_rect_dsc+0x35c>)
    4d0e:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
    4d10:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    4d14:	227e      	movs	r2, #126	; 0x7e
    4d16:	4631      	mov	r1, r6
    4d18:	4628      	mov	r0, r5
    4d1a:	4b0e      	ldr	r3, [pc, #56]	; (4d54 <lv_obj_init_draw_rect_dsc+0x354>)
    4d1c:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
    4d1e:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    4d20:	2270      	movs	r2, #112	; 0x70
    4d22:	4631      	mov	r1, r6
    4d24:	4628      	mov	r0, r5
    4d26:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
    4d28:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
    4d2c:	2271      	movs	r2, #113	; 0x71
    4d2e:	4631      	mov	r1, r6
    4d30:	4628      	mov	r0, r5
    4d32:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
    4d34:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    4d38:	2275      	movs	r2, #117	; 0x75
    4d3a:	4631      	mov	r1, r6
    4d3c:	4628      	mov	r0, r5
    4d3e:	47c0      	blx	r8
    4d40:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
    4d44:	2272      	movs	r2, #114	; 0x72
    4d46:	4631      	mov	r1, r6
    4d48:	4628      	mov	r0, r5
    4d4a:	47c0      	blx	r8
    4d4c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    4d50:	e681      	b.n	4a56 <lv_obj_init_draw_rect_dsc+0x56>
    4d52:	bf00      	nop
    4d54:	00004365 	.word	0x00004365
    4d58:	000042d1 	.word	0x000042d1
    4d5c:	00004245 	.word	0x00004245
    4d60:	00004199 	.word	0x00004199

00004d64 <lv_obj_design>:
{
    4d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d68:	b098      	sub	sp, #96	; 0x60
    4d6a:	4604      	mov	r4, r0
    4d6c:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
    4d6e:	2a02      	cmp	r2, #2
    4d70:	d008      	beq.n	4d84 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    4d72:	2a00      	cmp	r2, #0
    4d74:	d06c      	beq.n	4e50 <lv_obj_design+0xec>
    else if(mode == LV_DESIGN_DRAW_POST) {
    4d76:	2a01      	cmp	r2, #1
    4d78:	f000 80cc 	beq.w	4f14 <lv_obj_design+0x1b0>
    return LV_DESIGN_RES_OK;
    4d7c:	2000      	movs	r0, #0
}
    4d7e:	b018      	add	sp, #96	; 0x60
    4d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    4d84:	2100      	movs	r1, #0
    4d86:	4b8e      	ldr	r3, [pc, #568]	; (4fc0 <lv_obj_design+0x25c>)
    4d88:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
    4d8a:	b108      	cbz	r0, 4d90 <lv_obj_design+0x2c>
    4d8c:	2003      	movs	r0, #3
    4d8e:	e7f6      	b.n	4d7e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    4d90:	2201      	movs	r2, #1
    4d92:	2100      	movs	r1, #0
    4d94:	4620      	mov	r0, r4
    4d96:	4d8a      	ldr	r5, [pc, #552]	; (4fc0 <lv_obj_design+0x25c>)
    4d98:	47a8      	blx	r5
    4d9a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    4d9c:	2204      	movs	r2, #4
    4d9e:	2100      	movs	r1, #0
    4da0:	4620      	mov	r0, r4
    4da2:	47a8      	blx	r5
    4da4:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    4da6:	2205      	movs	r2, #5
    4da8:	2100      	movs	r1, #0
    4daa:	4620      	mov	r0, r4
    4dac:	47a8      	blx	r5
    4dae:	f104 030f 	add.w	r3, r4, #15
    4db2:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    4db6:	aa03      	add	r2, sp, #12
        *d8 = *s8;
    4db8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4dbc:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4dc0:	429d      	cmp	r5, r3
    4dc2:	d1f9      	bne.n	4db8 <lv_obj_design+0x54>
        coords.x1 -= w;
    4dc4:	fa1f f888 	uxth.w	r8, r8
    4dc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4dcc:	eba3 0308 	sub.w	r3, r3, r8
    4dd0:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.x2 += w;
    4dd4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4dd8:	4498      	add	r8, r3
    4dda:	f8ad 8010 	strh.w	r8, [sp, #16]
        coords.y1 -= h;
    4dde:	b280      	uxth	r0, r0
    4de0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    4de4:	1a1b      	subs	r3, r3, r0
    4de6:	f8ad 300e 	strh.w	r3, [sp, #14]
        coords.y2 += h;
    4dea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    4dee:	4418      	add	r0, r3
    4df0:	f8ad 0012 	strh.w	r0, [sp, #18]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
    4df4:	463a      	mov	r2, r7
    4df6:	a903      	add	r1, sp, #12
    4df8:	4630      	mov	r0, r6
    4dfa:	4b72      	ldr	r3, [pc, #456]	; (4fc4 <lv_obj_design+0x260>)
    4dfc:	4798      	blx	r3
    4dfe:	b908      	cbnz	r0, 4e04 <lv_obj_design+0xa0>
    4e00:	2002      	movs	r0, #2
    4e02:	e7bc      	b.n	4d7e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    4e04:	222c      	movs	r2, #44	; 0x2c
    4e06:	2100      	movs	r1, #0
    4e08:	4620      	mov	r0, r4
    4e0a:	4b6f      	ldr	r3, [pc, #444]	; (4fc8 <lv_obj_design+0x264>)
    4e0c:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
    4e0e:	28f9      	cmp	r0, #249	; 0xf9
    4e10:	d801      	bhi.n	4e16 <lv_obj_design+0xb2>
    4e12:	2002      	movs	r0, #2
    4e14:	e7b3      	b.n	4d7e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    4e16:	2220      	movs	r2, #32
    4e18:	2100      	movs	r1, #0
    4e1a:	4620      	mov	r0, r4
    4e1c:	4b68      	ldr	r3, [pc, #416]	; (4fc0 <lv_obj_design+0x25c>)
    4e1e:	4798      	blx	r3
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    4e20:	b2c0      	uxtb	r0, r0
    4e22:	b108      	cbz	r0, 4e28 <lv_obj_design+0xc4>
    4e24:	2002      	movs	r0, #2
    4e26:	e7aa      	b.n	4d7e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    4e28:	2232      	movs	r2, #50	; 0x32
    4e2a:	2100      	movs	r1, #0
    4e2c:	4620      	mov	r0, r4
    4e2e:	4b64      	ldr	r3, [pc, #400]	; (4fc0 <lv_obj_design+0x25c>)
    4e30:	4798      	blx	r3
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    4e32:	b2c0      	uxtb	r0, r0
    4e34:	b108      	cbz	r0, 4e3a <lv_obj_design+0xd6>
    4e36:	2002      	movs	r0, #2
    4e38:	e7a1      	b.n	4d7e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    4e3a:	f248 020c 	movw	r2, #32780	; 0x800c
    4e3e:	2100      	movs	r1, #0
    4e40:	4620      	mov	r0, r4
    4e42:	4b61      	ldr	r3, [pc, #388]	; (4fc8 <lv_obj_design+0x264>)
    4e44:	4798      	blx	r3
        return  LV_DESIGN_RES_COVER;
    4e46:	28fa      	cmp	r0, #250	; 0xfa
    4e48:	bf34      	ite	cc
    4e4a:	2002      	movcc	r0, #2
    4e4c:	2001      	movcs	r0, #1
    4e4e:	e796      	b.n	4d7e <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
    4e50:	a803      	add	r0, sp, #12
    4e52:	4b5e      	ldr	r3, [pc, #376]	; (4fcc <lv_obj_design+0x268>)
    4e54:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    4e56:	2233      	movs	r2, #51	; 0x33
    4e58:	2100      	movs	r1, #0
    4e5a:	4620      	mov	r0, r4
    4e5c:	4b58      	ldr	r3, [pc, #352]	; (4fc0 <lv_obj_design+0x25c>)
    4e5e:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    4e60:	b110      	cbz	r0, 4e68 <lv_obj_design+0x104>
            draw_dsc.border_opa = LV_OPA_TRANSP;
    4e62:	2300      	movs	r3, #0
    4e64:	f88d 3020 	strb.w	r3, [sp, #32]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    4e68:	aa03      	add	r2, sp, #12
    4e6a:	2100      	movs	r1, #0
    4e6c:	4620      	mov	r0, r4
    4e6e:	4b58      	ldr	r3, [pc, #352]	; (4fd0 <lv_obj_design+0x26c>)
    4e70:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    4e72:	2204      	movs	r2, #4
    4e74:	2100      	movs	r1, #0
    4e76:	4620      	mov	r0, r4
    4e78:	4d51      	ldr	r5, [pc, #324]	; (4fc0 <lv_obj_design+0x25c>)
    4e7a:	47a8      	blx	r5
    4e7c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    4e7e:	2205      	movs	r2, #5
    4e80:	2100      	movs	r1, #0
    4e82:	4620      	mov	r0, r4
    4e84:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
    4e86:	f104 0710 	add.w	r7, r4, #16
    4e8a:	f104 030f 	add.w	r3, r4, #15
    4e8e:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    4e92:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    4e94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4e98:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4e9c:	42ab      	cmp	r3, r5
    4e9e:	d1f9      	bne.n	4e94 <lv_obj_design+0x130>
        coords.x1 -= w;
    4ea0:	fa1f f888 	uxth.w	r8, r8
    4ea4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    4ea8:	eba3 0308 	sub.w	r3, r3, r8
    4eac:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
    4eb0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4eb4:	4498      	add	r8, r3
    4eb6:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
    4eba:	b280      	uxth	r0, r0
    4ebc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4ec0:	1a1b      	subs	r3, r3, r0
    4ec2:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
    4ec6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4eca:	4418      	add	r0, r3
    4ecc:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
    4ed0:	aa03      	add	r2, sp, #12
    4ed2:	4631      	mov	r1, r6
    4ed4:	a801      	add	r0, sp, #4
    4ed6:	4b3f      	ldr	r3, [pc, #252]	; (4fd4 <lv_obj_design+0x270>)
    4ed8:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    4eda:	2202      	movs	r2, #2
    4edc:	2100      	movs	r1, #0
    4ede:	4620      	mov	r0, r4
    4ee0:	4b37      	ldr	r3, [pc, #220]	; (4fc0 <lv_obj_design+0x25c>)
    4ee2:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    4ee4:	b908      	cbnz	r0, 4eea <lv_obj_design+0x186>
    return LV_DESIGN_RES_OK;
    4ee6:	2000      	movs	r0, #0
    4ee8:	e749      	b.n	4d7e <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
    4eea:	201c      	movs	r0, #28
    4eec:	4b3a      	ldr	r3, [pc, #232]	; (4fd8 <lv_obj_design+0x274>)
    4eee:	4798      	blx	r3
    4ef0:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    4ef2:	2201      	movs	r2, #1
    4ef4:	2100      	movs	r1, #0
    4ef6:	4620      	mov	r0, r4
    4ef8:	4b31      	ldr	r3, [pc, #196]	; (4fc0 <lv_obj_design+0x25c>)
    4efa:	4798      	blx	r3
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
    4efc:	2300      	movs	r3, #0
    4efe:	4602      	mov	r2, r0
    4f00:	4639      	mov	r1, r7
    4f02:	4628      	mov	r0, r5
    4f04:	4e35      	ldr	r6, [pc, #212]	; (4fdc <lv_obj_design+0x278>)
    4f06:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
    4f08:	f504 7118 	add.w	r1, r4, #608	; 0x260
    4f0c:	4628      	mov	r0, r5
    4f0e:	4b34      	ldr	r3, [pc, #208]	; (4fe0 <lv_obj_design+0x27c>)
    4f10:	4798      	blx	r3
    4f12:	e7e8      	b.n	4ee6 <lv_obj_design+0x182>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    4f14:	2202      	movs	r2, #2
    4f16:	2100      	movs	r1, #0
    4f18:	4b29      	ldr	r3, [pc, #164]	; (4fc0 <lv_obj_design+0x25c>)
    4f1a:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    4f1c:	b938      	cbnz	r0, 4f2e <lv_obj_design+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    4f1e:	2233      	movs	r2, #51	; 0x33
    4f20:	2100      	movs	r1, #0
    4f22:	4620      	mov	r0, r4
    4f24:	4b26      	ldr	r3, [pc, #152]	; (4fc0 <lv_obj_design+0x25c>)
    4f26:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    4f28:	b940      	cbnz	r0, 4f3c <lv_obj_design+0x1d8>
    return LV_DESIGN_RES_OK;
    4f2a:	2000      	movs	r0, #0
    4f2c:	e727      	b.n	4d7e <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
    4f2e:	f504 7018 	add.w	r0, r4, #608	; 0x260
    4f32:	4b2c      	ldr	r3, [pc, #176]	; (4fe4 <lv_obj_design+0x280>)
    4f34:	4798      	blx	r3
            _lv_mem_buf_release(param);
    4f36:	4b2c      	ldr	r3, [pc, #176]	; (4fe8 <lv_obj_design+0x284>)
    4f38:	4798      	blx	r3
    4f3a:	e7f0      	b.n	4f1e <lv_obj_design+0x1ba>
            lv_draw_rect_dsc_init(&draw_dsc);
    4f3c:	a803      	add	r0, sp, #12
    4f3e:	4b23      	ldr	r3, [pc, #140]	; (4fcc <lv_obj_design+0x268>)
    4f40:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
    4f42:	2700      	movs	r7, #0
    4f44:	f88d 7018 	strb.w	r7, [sp, #24]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
    4f48:	f88d 7042 	strb.w	r7, [sp, #66]	; 0x42
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
    4f4c:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    4f50:	aa03      	add	r2, sp, #12
    4f52:	4639      	mov	r1, r7
    4f54:	4620      	mov	r0, r4
    4f56:	4b1e      	ldr	r3, [pc, #120]	; (4fd0 <lv_obj_design+0x26c>)
    4f58:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    4f5a:	2204      	movs	r2, #4
    4f5c:	4639      	mov	r1, r7
    4f5e:	4620      	mov	r0, r4
    4f60:	4d17      	ldr	r5, [pc, #92]	; (4fc0 <lv_obj_design+0x25c>)
    4f62:	47a8      	blx	r5
    4f64:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    4f66:	2205      	movs	r2, #5
    4f68:	4639      	mov	r1, r7
    4f6a:	4620      	mov	r0, r4
    4f6c:	47a8      	blx	r5
    4f6e:	f104 030f 	add.w	r3, r4, #15
    4f72:	3417      	adds	r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    4f74:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    4f76:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4f7a:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4f7e:	42a3      	cmp	r3, r4
    4f80:	d1f9      	bne.n	4f76 <lv_obj_design+0x212>
            coords.x1 -= w;
    4f82:	fa1f f388 	uxth.w	r3, r8
    4f86:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4f8a:	1ad2      	subs	r2, r2, r3
    4f8c:	f8ad 2004 	strh.w	r2, [sp, #4]
            coords.x2 += w;
    4f90:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    4f94:	4413      	add	r3, r2
    4f96:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 -= h;
    4f9a:	b280      	uxth	r0, r0
    4f9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4fa0:	1a1b      	subs	r3, r3, r0
    4fa2:	f8ad 3006 	strh.w	r3, [sp, #6]
            coords.y2 += h;
    4fa6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4faa:	4418      	add	r0, r3
    4fac:	f8ad 000a 	strh.w	r0, [sp, #10]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
    4fb0:	aa03      	add	r2, sp, #12
    4fb2:	4631      	mov	r1, r6
    4fb4:	a801      	add	r0, sp, #4
    4fb6:	4b07      	ldr	r3, [pc, #28]	; (4fd4 <lv_obj_design+0x270>)
    4fb8:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
    4fba:	2000      	movs	r0, #0
    4fbc:	e6df      	b.n	4d7e <lv_obj_design+0x1a>
    4fbe:	bf00      	nop
    4fc0:	00004199 	.word	0x00004199
    4fc4:	00010931 	.word	0x00010931
    4fc8:	000042d1 	.word	0x000042d1
    4fcc:	0000b789 	.word	0x0000b789
    4fd0:	00004a01 	.word	0x00004a01
    4fd4:	0000b851 	.word	0x0000b851
    4fd8:	00011a29 	.word	0x00011a29
    4fdc:	0000b54d 	.word	0x0000b54d
    4fe0:	0000b301 	.word	0x0000b301
    4fe4:	0000b3b1 	.word	0x0000b3b1
    4fe8:	000116a9 	.word	0x000116a9

00004fec <lv_obj_get_draw_rect_ext_pad_size>:
{
    4fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ff0:	b089      	sub	sp, #36	; 0x24
    4ff2:	4604      	mov	r4, r0
    4ff4:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    4ff6:	2250      	movs	r2, #80	; 0x50
    4ff8:	4b76      	ldr	r3, [pc, #472]	; (51d4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    4ffa:	4798      	blx	r3
    if(sh_width) {
    4ffc:	4607      	mov	r7, r0
    4ffe:	bb68      	cbnz	r0, 505c <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    5000:	227f      	movs	r2, #127	; 0x7f
    5002:	4631      	mov	r1, r6
    5004:	4620      	mov	r0, r4
    5006:	4b74      	ldr	r3, [pc, #464]	; (51d8 <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    5008:	4798      	blx	r3
    if(value_str) {
    500a:	4680      	mov	r8, r0
    500c:	b130      	cbz	r0, 501c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    500e:	227c      	movs	r2, #124	; 0x7c
    5010:	4631      	mov	r1, r6
    5012:	4620      	mov	r0, r4
    5014:	4b71      	ldr	r3, [pc, #452]	; (51dc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5016:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
    5018:	2805      	cmp	r0, #5
    501a:	d84c      	bhi.n	50b6 <lv_obj_get_draw_rect_ext_pad_size+0xca>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    501c:	2240      	movs	r2, #64	; 0x40
    501e:	4631      	mov	r1, r6
    5020:	4620      	mov	r0, r4
    5022:	4b6c      	ldr	r3, [pc, #432]	; (51d4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5024:	4798      	blx	r3
    if(outline_width) {
    5026:	4605      	mov	r5, r0
    5028:	2800      	cmp	r0, #0
    502a:	f040 80bf 	bne.w	51ac <lv_obj_get_draw_rect_ext_pad_size+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    502e:	2204      	movs	r2, #4
    5030:	4631      	mov	r1, r6
    5032:	4620      	mov	r0, r4
    5034:	f8df 819c 	ldr.w	r8, [pc, #412]	; 51d4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>
    5038:	47c0      	blx	r8
    503a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    503c:	2205      	movs	r2, #5
    503e:	4631      	mov	r1, r6
    5040:	4620      	mov	r0, r4
    5042:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
    5044:	42a8      	cmp	r0, r5
    5046:	bfb8      	it	lt
    5048:	4628      	movlt	r0, r5
    504a:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
    504c:	2800      	cmp	r0, #0
    504e:	bfc4      	itt	gt
    5050:	19c0      	addgt	r0, r0, r7
    5052:	b207      	sxthgt	r7, r0
}
    5054:	4638      	mov	r0, r7
    5056:	b009      	add	sp, #36	; 0x24
    5058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    505c:	225c      	movs	r2, #92	; 0x5c
    505e:	4631      	mov	r1, r6
    5060:	4620      	mov	r0, r4
    5062:	4b5e      	ldr	r3, [pc, #376]	; (51dc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5064:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
    5066:	2805      	cmp	r0, #5
    5068:	d801      	bhi.n	506e <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
    506a:	2700      	movs	r7, #0
    506c:	e7c8      	b.n	5000 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    506e:	2253      	movs	r2, #83	; 0x53
    5070:	4631      	mov	r1, r6
    5072:	4620      	mov	r0, r4
    5074:	4d57      	ldr	r5, [pc, #348]	; (51d4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5076:	47a8      	blx	r5
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
    5078:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            sh_width++;
    507c:	eb00 0767 	add.w	r7, r0, r7, asr #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
    5080:	3701      	adds	r7, #1
    5082:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    5084:	2251      	movs	r2, #81	; 0x51
    5086:	4631      	mov	r1, r6
    5088:	4620      	mov	r0, r4
    508a:	47a8      	blx	r5
    508c:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    508e:	2252      	movs	r2, #82	; 0x52
    5090:	4631      	mov	r1, r6
    5092:	4620      	mov	r0, r4
    5094:	47a8      	blx	r5
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
    5096:	2800      	cmp	r0, #0
    5098:	bfb8      	it	lt
    509a:	4240      	neglt	r0, r0
    509c:	f1b8 0f00 	cmp.w	r8, #0
    50a0:	bfb8      	it	lt
    50a2:	f1c8 0800 	rsblt	r8, r8, #0
    50a6:	4540      	cmp	r0, r8
    50a8:	bfac      	ite	ge
    50aa:	183f      	addge	r7, r7, r0
    50ac:	4447      	addlt	r7, r8
            s = LV_MATH_MAX(s, sh_width);
    50ae:	b238      	sxth	r0, r7
    50b0:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    50b4:	e7a4      	b.n	5000 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    50b6:	2270      	movs	r2, #112	; 0x70
    50b8:	4631      	mov	r1, r6
    50ba:	4620      	mov	r0, r4
    50bc:	4d45      	ldr	r5, [pc, #276]	; (51d4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    50be:	47a8      	blx	r5
    50c0:	4682      	mov	sl, r0
    50c2:	2270      	movs	r2, #112	; 0x70
    50c4:	4631      	mov	r1, r6
    50c6:	4620      	mov	r0, r4
    50c8:	47a8      	blx	r5
    50ca:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    50cc:	227e      	movs	r2, #126	; 0x7e
    50ce:	4631      	mov	r1, r6
    50d0:	4620      	mov	r0, r4
    50d2:	4b41      	ldr	r3, [pc, #260]	; (51d8 <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    50d4:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
    50d6:	f04f 0900 	mov.w	r9, #0
    50da:	f8cd 9008 	str.w	r9, [sp, #8]
    50de:	f647 4318 	movw	r3, #31768	; 0x7c18
    50e2:	9301      	str	r3, [sp, #4]
    50e4:	f8cd b000 	str.w	fp, [sp]
    50e8:	4653      	mov	r3, sl
    50ea:	4602      	mov	r2, r0
    50ec:	4641      	mov	r1, r8
    50ee:	a804      	add	r0, sp, #16
    50f0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 51e0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>
    50f4:	47c0      	blx	r8
            value_area.x1 = 0;
    50f6:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
    50fa:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
    50fe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5102:	3b01      	subs	r3, #1
    5104:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
    5108:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    510c:	3b01      	subs	r3, #1
    510e:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    5112:	2275      	movs	r2, #117	; 0x75
    5114:	4631      	mov	r1, r6
    5116:	4620      	mov	r0, r4
    5118:	47a8      	blx	r5
    511a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    511c:	2273      	movs	r2, #115	; 0x73
    511e:	4631      	mov	r1, r6
    5120:	4620      	mov	r0, r4
    5122:	47a8      	blx	r5
    5124:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    5126:	2274      	movs	r2, #116	; 0x74
    5128:	4631      	mov	r1, r6
    512a:	4620      	mov	r0, r4
    512c:	47a8      	blx	r5
    512e:	4605      	mov	r5, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
    5130:	ab05      	add	r3, sp, #20
    5132:	fa5f f289 	uxtb.w	r2, r9
    5136:	a906      	add	r1, sp, #24
    5138:	f104 0010 	add.w	r0, r4, #16
    513c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 51e4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>
    5140:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
    5142:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5146:	4443      	add	r3, r8
    5148:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
    514a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    514e:	442a      	add	r2, r5
    5150:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    5152:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            value_area.x1 += p_align.x + xofs;
    5156:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    515a:	4419      	add	r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    515c:	b209      	sxth	r1, r1
    515e:	1a40      	subs	r0, r0, r1
    5160:	42b8      	cmp	r0, r7
    5162:	bfb8      	it	lt
    5164:	4638      	movlt	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    5166:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
            value_area.y1 += p_align.y + yofs;
    516a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
    516e:	4417      	add	r7, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    5170:	b23f      	sxth	r7, r7
    5172:	1bcf      	subs	r7, r1, r7
    5174:	b200      	sxth	r0, r0
    5176:	4287      	cmp	r7, r0
    5178:	bfb8      	it	lt
    517a:	4607      	movlt	r7, r0
            value_area.x2 += p_align.x + xofs;
    517c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    5180:	4403      	add	r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
    5182:	b21b      	sxth	r3, r3
    5184:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
    5188:	1a18      	subs	r0, r3, r0
    518a:	b23b      	sxth	r3, r7
    518c:	4283      	cmp	r3, r0
    518e:	bfb8      	it	lt
    5190:	4603      	movlt	r3, r0
            value_area.y2 += p_align.y + yofs;
    5192:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    5196:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
    5198:	b200      	sxth	r0, r0
    519a:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
    519e:	1bc7      	subs	r7, r0, r7
    51a0:	b218      	sxth	r0, r3
    51a2:	42b8      	cmp	r0, r7
    51a4:	bfb8      	it	lt
    51a6:	4638      	movlt	r0, r7
    51a8:	b207      	sxth	r7, r0
    51aa:	e737      	b.n	501c <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    51ac:	224c      	movs	r2, #76	; 0x4c
    51ae:	4631      	mov	r1, r6
    51b0:	4620      	mov	r0, r4
    51b2:	4b0a      	ldr	r3, [pc, #40]	; (51dc <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    51b4:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
    51b6:	2805      	cmp	r0, #5
    51b8:	f67f af39 	bls.w	502e <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    51bc:	2241      	movs	r2, #65	; 0x41
    51be:	4631      	mov	r1, r6
    51c0:	4620      	mov	r0, r4
    51c2:	4b04      	ldr	r3, [pc, #16]	; (51d4 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    51c4:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
    51c6:	4428      	add	r0, r5
    51c8:	42b8      	cmp	r0, r7
    51ca:	bfb8      	it	lt
    51cc:	4638      	movlt	r0, r7
    51ce:	b207      	sxth	r7, r0
    51d0:	e72d      	b.n	502e <lv_obj_get_draw_rect_ext_pad_size+0x42>
    51d2:	bf00      	nop
    51d4:	00004199 	.word	0x00004199
    51d8:	00004365 	.word	0x00004365
    51dc:	000042d1 	.word	0x000042d1
    51e0:	00012559 	.word	0x00012559
    51e4:	000109e9 	.word	0x000109e9

000051e8 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
    51e8:	2908      	cmp	r1, #8
    51ea:	d01a      	beq.n	5222 <lv_obj_signal+0x3a>
{
    51ec:	b510      	push	{r4, lr}
    51ee:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    51f0:	2907      	cmp	r1, #7
    51f2:	d020      	beq.n	5236 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    51f4:	2901      	cmp	r1, #1
    51f6:	d023      	beq.n	5240 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    51f8:	2906      	cmp	r1, #6
    51fa:	d027      	beq.n	524c <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
    51fc:	2903      	cmp	r1, #3
    51fe:	d030      	beq.n	5262 <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
    5200:	2904      	cmp	r1, #4
    5202:	d039      	beq.n	5278 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
    5204:	290b      	cmp	r1, #11
    5206:	d03b      	beq.n	5280 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    5208:	f1a1 030d 	sub.w	r3, r1, #13
    520c:	b2db      	uxtb	r3, r3
    520e:	2b01      	cmp	r3, #1
    5210:	d93b      	bls.n	528a <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
    5212:	2916      	cmp	r1, #22
    5214:	d03e      	beq.n	5294 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
    5216:	2917      	cmp	r1, #23
    5218:	d051      	beq.n	52be <lv_obj_signal+0xd6>
    else if(sign == LV_SIGNAL_CLEANUP) {
    521a:	2900      	cmp	r1, #0
    521c:	d054      	beq.n	52c8 <lv_obj_signal+0xe0>
    lv_res_t res = LV_RES_OK;
    521e:	2001      	movs	r0, #1
}
    5220:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
    5222:	7813      	ldrb	r3, [r2, #0]
    5224:	b91b      	cbnz	r3, 522e <lv_obj_signal+0x46>
    5226:	3028      	adds	r0, #40	; 0x28
    5228:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
    522a:	2001      	movs	r0, #1
    522c:	4770      	bx	lr
        else info->result = NULL;
    522e:	2300      	movs	r3, #0
    5230:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
    5232:	2001      	movs	r0, #1
    5234:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    5236:	4926      	ldr	r1, [pc, #152]	; (52d0 <lv_obj_signal+0xe8>)
    5238:	4610      	mov	r0, r2
    523a:	4b26      	ldr	r3, [pc, #152]	; (52d4 <lv_obj_signal+0xec>)
    523c:	4798      	blx	r3
    523e:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
    5240:	4b25      	ldr	r3, [pc, #148]	; (52d8 <lv_obj_signal+0xf0>)
    5242:	4798      	blx	r3
    5244:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
    5248:	b2c0      	uxtb	r0, r0
    524a:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
    524c:	2100      	movs	r1, #0
    524e:	4b23      	ldr	r3, [pc, #140]	; (52dc <lv_obj_signal+0xf4>)
    5250:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
    5252:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    5256:	4298      	cmp	r0, r3
    5258:	bfb8      	it	lt
    525a:	4618      	movlt	r0, r3
    525c:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
    525e:	2001      	movs	r0, #1
    5260:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
    5262:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    5266:	f013 0f01 	tst.w	r3, #1
    526a:	d101      	bne.n	5270 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
    526c:	2001      	movs	r0, #1
    526e:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
    5270:	4b1b      	ldr	r3, [pc, #108]	; (52e0 <lv_obj_signal+0xf8>)
    5272:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5274:	2001      	movs	r0, #1
    5276:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
    5278:	4b1a      	ldr	r3, [pc, #104]	; (52e4 <lv_obj_signal+0xfc>)
    527a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    527c:	2001      	movs	r0, #1
    527e:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
    5280:	2110      	movs	r1, #16
    5282:	4b19      	ldr	r3, [pc, #100]	; (52e8 <lv_obj_signal+0x100>)
    5284:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5286:	2001      	movs	r0, #1
    5288:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
    528a:	2110      	movs	r1, #16
    528c:	4b17      	ldr	r3, [pc, #92]	; (52ec <lv_obj_signal+0x104>)
    528e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    5290:	2001      	movs	r0, #1
    5292:	bd10      	pop	{r4, pc}
        if(lv_group_get_editing(lv_obj_get_group(obj))) {
    5294:	4b16      	ldr	r3, [pc, #88]	; (52f0 <lv_obj_signal+0x108>)
    5296:	4798      	blx	r3
    5298:	4b16      	ldr	r3, [pc, #88]	; (52f4 <lv_obj_signal+0x10c>)
    529a:	4798      	blx	r3
    529c:	b128      	cbz	r0, 52aa <lv_obj_signal+0xc2>
            lv_obj_add_state(obj, state);
    529e:	2106      	movs	r1, #6
    52a0:	4620      	mov	r0, r4
    52a2:	4b11      	ldr	r3, [pc, #68]	; (52e8 <lv_obj_signal+0x100>)
    52a4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52a6:	2001      	movs	r0, #1
    52a8:	bd10      	pop	{r4, pc}
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
    52aa:	2102      	movs	r1, #2
    52ac:	4620      	mov	r0, r4
    52ae:	4b0e      	ldr	r3, [pc, #56]	; (52e8 <lv_obj_signal+0x100>)
    52b0:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
    52b2:	2104      	movs	r1, #4
    52b4:	4620      	mov	r0, r4
    52b6:	4b0d      	ldr	r3, [pc, #52]	; (52ec <lv_obj_signal+0x104>)
    52b8:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52ba:	2001      	movs	r0, #1
    52bc:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    52be:	2106      	movs	r1, #6
    52c0:	4b0a      	ldr	r3, [pc, #40]	; (52ec <lv_obj_signal+0x104>)
    52c2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52c4:	2001      	movs	r0, #1
    52c6:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
    52c8:	4b0b      	ldr	r3, [pc, #44]	; (52f8 <lv_obj_signal+0x110>)
    52ca:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    52cc:	2001      	movs	r0, #1
    52ce:	bd10      	pop	{r4, pc}
    52d0:	00017628 	.word	0x00017628
    52d4:	000049d1 	.word	0x000049d1
    52d8:	00004115 	.word	0x00004115
    52dc:	00004fed 	.word	0x00004fed
    52e0:	0000393d 	.word	0x0000393d
    52e4:	00002ed1 	.word	0x00002ed1
    52e8:	000048f5 	.word	0x000048f5
    52ec:	00004931 	.word	0x00004931
    52f0:	0000496d 	.word	0x0000496d
    52f4:	00002bdb 	.word	0x00002bdb
    52f8:	00003219 	.word	0x00003219

000052fc <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
    52fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5300:	4605      	mov	r5, r0
    5302:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
    5304:	2200      	movs	r2, #0
    5306:	3110      	adds	r1, #16
    5308:	4b1f      	ldr	r3, [pc, #124]	; (5388 <lv_refr_get_top_obj+0x8c>)
    530a:	4798      	blx	r3
    530c:	b350      	cbz	r0, 5364 <lv_refr_get_top_obj+0x68>
    530e:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    5312:	f013 0f10 	tst.w	r3, #16
    5316:	d127      	bne.n	5368 <lv_refr_get_top_obj+0x6c>
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    5318:	f8d8 3020 	ldr.w	r3, [r8, #32]
    531c:	b343      	cbz	r3, 5370 <lv_refr_get_top_obj+0x74>
    531e:	2202      	movs	r2, #2
    5320:	4629      	mov	r1, r5
    5322:	4640      	mov	r0, r8
    5324:	4798      	blx	r3
    5326:	4681      	mov	r9, r0
                                                                     LV_DESIGN_COVER_CHK) : LV_DESIGN_RES_NOT_COVER;
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    5328:	2803      	cmp	r0, #3
    532a:	d01f      	beq.n	536c <lv_refr_get_top_obj+0x70>

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
    532c:	f108 0604 	add.w	r6, r8, #4
    5330:	4630      	mov	r0, r6
    5332:	4b16      	ldr	r3, [pc, #88]	; (538c <lv_refr_get_top_obj+0x90>)
    5334:	4798      	blx	r3
    5336:	4604      	mov	r4, r0
    5338:	b160      	cbz	r0, 5354 <lv_refr_get_top_obj+0x58>
    533a:	4f15      	ldr	r7, [pc, #84]	; (5390 <lv_refr_get_top_obj+0x94>)
            found_p = lv_refr_get_top_obj(area_p, i);
    533c:	4621      	mov	r1, r4
    533e:	4628      	mov	r0, r5
    5340:	f7ff ffdc 	bl	52fc <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
    5344:	4603      	mov	r3, r0
    5346:	b950      	cbnz	r0, 535e <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    5348:	4621      	mov	r1, r4
    534a:	4630      	mov	r0, r6
    534c:	47b8      	blx	r7
    534e:	4604      	mov	r4, r0
    5350:	2800      	cmp	r0, #0
    5352:	d1f3      	bne.n	533c <lv_refr_get_top_obj+0x40>
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
            if(design_res == LV_DESIGN_RES_COVER) {
                found_p = obj;
    5354:	f1b9 0f01 	cmp.w	r9, #1
    5358:	bf0c      	ite	eq
    535a:	4643      	moveq	r3, r8
    535c:	2300      	movne	r3, #0
            }
        }
    }

    return found_p;
}
    535e:	4618      	mov	r0, r3
    5360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_obj_t * found_p = NULL;
    5364:	2300      	movs	r3, #0
    5366:	e7fa      	b.n	535e <lv_refr_get_top_obj+0x62>
    5368:	2300      	movs	r3, #0
    536a:	e7f8      	b.n	535e <lv_refr_get_top_obj+0x62>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    536c:	2300      	movs	r3, #0
    536e:	e7f6      	b.n	535e <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    5370:	f108 0604 	add.w	r6, r8, #4
    5374:	4630      	mov	r0, r6
    5376:	4b05      	ldr	r3, [pc, #20]	; (538c <lv_refr_get_top_obj+0x90>)
    5378:	4798      	blx	r3
    537a:	4604      	mov	r4, r0
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    537c:	f04f 0902 	mov.w	r9, #2
        _LV_LL_READ(obj->child_ll, i) {
    5380:	2800      	cmp	r0, #0
    5382:	d1da      	bne.n	533a <lv_refr_get_top_obj+0x3e>
    5384:	4603      	mov	r3, r0
    5386:	e7ea      	b.n	535e <lv_refr_get_top_obj+0x62>
    5388:	00010931 	.word	0x00010931
    538c:	0001114d 	.word	0x0001114d
    5390:	00011161 	.word	0x00011161

00005394 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
    5394:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    5398:	f013 0f10 	tst.w	r3, #16
    539c:	d000      	beq.n	53a0 <lv_refr_obj+0xc>
    539e:	4770      	bx	lr
{
    53a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    53a4:	b08b      	sub	sp, #44	; 0x2c
    53a6:	460e      	mov	r6, r1
    53a8:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
    53aa:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
    53ae:	a904      	add	r1, sp, #16
    53b0:	4b35      	ldr	r3, [pc, #212]	; (5488 <lv_refr_obj+0xf4>)
    53b2:	4798      	blx	r3
    obj_area.x1 -= ext_size;
    53b4:	b2a3      	uxth	r3, r4
    53b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    53ba:	1ad2      	subs	r2, r2, r3
    53bc:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
    53c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    53c4:	1ad2      	subs	r2, r2, r3
    53c6:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
    53ca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    53ce:	441a      	add	r2, r3
    53d0:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
    53d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    53d8:	4413      	add	r3, r2
    53da:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    53de:	aa04      	add	r2, sp, #16
    53e0:	4631      	mov	r1, r6
    53e2:	a806      	add	r0, sp, #24
    53e4:	4b29      	ldr	r3, [pc, #164]	; (548c <lv_refr_obj+0xf8>)
    53e6:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
    53e8:	b1a8      	cbz	r0, 5416 <lv_refr_obj+0x82>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
    53ea:	6a2b      	ldr	r3, [r5, #32]
    53ec:	b11b      	cbz	r3, 53f6 <lv_refr_obj+0x62>
    53ee:	2200      	movs	r2, #0
    53f0:	a906      	add	r1, sp, #24
    53f2:	4628      	mov	r0, r5
    53f4:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
    53f6:	a904      	add	r1, sp, #16
    53f8:	4628      	mov	r0, r5
    53fa:	4b23      	ldr	r3, [pc, #140]	; (5488 <lv_refr_obj+0xf4>)
    53fc:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
    53fe:	aa04      	add	r2, sp, #16
    5400:	4631      	mov	r1, r6
    5402:	a808      	add	r0, sp, #32
    5404:	4b21      	ldr	r3, [pc, #132]	; (548c <lv_refr_obj+0xf8>)
    5406:	4798      	blx	r3
        if(union_ok != false) {
    5408:	b940      	cbnz	r0, 541c <lv_refr_obj+0x88>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    540a:	6a2b      	ldr	r3, [r5, #32]
    540c:	b11b      	cbz	r3, 5416 <lv_refr_obj+0x82>
    540e:	2201      	movs	r2, #1
    5410:	a906      	add	r1, sp, #24
    5412:	4628      	mov	r0, r5
    5414:	4798      	blx	r3
    }
}
    5416:	b00b      	add	sp, #44	; 0x2c
    5418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    541c:	f105 0804 	add.w	r8, r5, #4
    5420:	4640      	mov	r0, r8
    5422:	4b1b      	ldr	r3, [pc, #108]	; (5490 <lv_refr_obj+0xfc>)
    5424:	4798      	blx	r3
    5426:	4604      	mov	r4, r0
    5428:	2800      	cmp	r0, #0
    542a:	d0ee      	beq.n	540a <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    542c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5488 <lv_refr_obj+0xf4>
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    5430:	4e16      	ldr	r6, [pc, #88]	; (548c <lv_refr_obj+0xf8>)
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    5432:	4f18      	ldr	r7, [pc, #96]	; (5494 <lv_refr_obj+0x100>)
    5434:	e005      	b.n	5442 <lv_refr_obj+0xae>
    5436:	4621      	mov	r1, r4
    5438:	4640      	mov	r0, r8
    543a:	47b8      	blx	r7
    543c:	4604      	mov	r4, r0
    543e:	2800      	cmp	r0, #0
    5440:	d0e3      	beq.n	540a <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    5442:	a902      	add	r1, sp, #8
    5444:	4620      	mov	r0, r4
    5446:	47c8      	blx	r9
                child_area.x1 -= ext_size;
    5448:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    544a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    544e:	1ad2      	subs	r2, r2, r3
    5450:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
    5454:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    5458:	1ad2      	subs	r2, r2, r3
    545a:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
    545e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    5462:	441a      	add	r2, r3
    5464:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
    5468:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    546c:	4413      	add	r3, r2
    546e:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    5472:	aa02      	add	r2, sp, #8
    5474:	a908      	add	r1, sp, #32
    5476:	4668      	mov	r0, sp
    5478:	47b0      	blx	r6
                if(union_ok) {
    547a:	2800      	cmp	r0, #0
    547c:	d0db      	beq.n	5436 <lv_refr_obj+0xa2>
                    lv_refr_obj(child_p, &mask_child);
    547e:	4669      	mov	r1, sp
    5480:	4620      	mov	r0, r4
    5482:	f7ff ff87 	bl	5394 <lv_refr_obj>
    5486:	e7d6      	b.n	5436 <lv_refr_obj+0xa2>
    5488:	0000302d 	.word	0x0000302d
    548c:	000106dd 	.word	0x000106dd
    5490:	00011157 	.word	0x00011157
    5494:	0001118d 	.word	0x0001118d

00005498 <lv_refr_obj_and_children>:
{
    5498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    549c:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    549e:	4604      	mov	r4, r0
    54a0:	b170      	cbz	r0, 54c0 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
    54a2:	4639      	mov	r1, r7
    54a4:	4620      	mov	r0, r4
    54a6:	4b1a      	ldr	r3, [pc, #104]	; (5510 <lv_refr_obj_and_children+0x78>)
    54a8:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
    54aa:	4620      	mov	r0, r4
    54ac:	4b19      	ldr	r3, [pc, #100]	; (5514 <lv_refr_obj_and_children+0x7c>)
    54ae:	4798      	blx	r3
    while(par != NULL) {
    54b0:	4681      	mov	r9, r0
    54b2:	b160      	cbz	r0, 54ce <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    54b4:	4e18      	ldr	r6, [pc, #96]	; (5518 <lv_refr_obj_and_children+0x80>)
            lv_refr_obj(i, mask_p);
    54b6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5510 <lv_refr_obj_and_children+0x78>
        par = lv_obj_get_parent(par);
    54ba:	f8df a058 	ldr.w	sl, [pc, #88]	; 5514 <lv_refr_obj_and_children+0x7c>
    54be:	e00e      	b.n	54de <lv_refr_obj_and_children+0x46>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    54c0:	4b16      	ldr	r3, [pc, #88]	; (551c <lv_refr_obj_and_children+0x84>)
    54c2:	6818      	ldr	r0, [r3, #0]
    54c4:	4b16      	ldr	r3, [pc, #88]	; (5520 <lv_refr_obj_and_children+0x88>)
    54c6:	4798      	blx	r3
    if(top_p == NULL) return;  /*Shouldn't happen*/
    54c8:	4604      	mov	r4, r0
    54ca:	2800      	cmp	r0, #0
    54cc:	d1e9      	bne.n	54a2 <lv_refr_obj_and_children+0xa>
    54ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        par = lv_obj_get_parent(par);
    54d2:	4648      	mov	r0, r9
    54d4:	47d0      	blx	sl
    54d6:	464c      	mov	r4, r9
    while(par != NULL) {
    54d8:	4681      	mov	r9, r0
    54da:	2800      	cmp	r0, #0
    54dc:	d0f7      	beq.n	54ce <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    54de:	f109 0504 	add.w	r5, r9, #4
    54e2:	4621      	mov	r1, r4
    54e4:	4628      	mov	r0, r5
    54e6:	47b0      	blx	r6
        while(i != NULL) {
    54e8:	4604      	mov	r4, r0
    54ea:	b140      	cbz	r0, 54fe <lv_refr_obj_and_children+0x66>
            lv_refr_obj(i, mask_p);
    54ec:	4639      	mov	r1, r7
    54ee:	4620      	mov	r0, r4
    54f0:	47c0      	blx	r8
            i = _lv_ll_get_prev(&(par->child_ll), i);
    54f2:	4621      	mov	r1, r4
    54f4:	4628      	mov	r0, r5
    54f6:	47b0      	blx	r6
        while(i != NULL) {
    54f8:	4604      	mov	r4, r0
    54fa:	2800      	cmp	r0, #0
    54fc:	d1f6      	bne.n	54ec <lv_refr_obj_and_children+0x54>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    54fe:	f8d9 3020 	ldr.w	r3, [r9, #32]
    5502:	2b00      	cmp	r3, #0
    5504:	d0e5      	beq.n	54d2 <lv_refr_obj_and_children+0x3a>
    5506:	2201      	movs	r2, #1
    5508:	4639      	mov	r1, r7
    550a:	4648      	mov	r0, r9
    550c:	4798      	blx	r3
    550e:	e7e0      	b.n	54d2 <lv_refr_obj_and_children+0x3a>
    5510:	00005395 	.word	0x00005395
    5514:	00002f01 	.word	0x00002f01
    5518:	0001118d 	.word	0x0001118d
    551c:	20002688 	.word	0x20002688
    5520:	00002951 	.word	0x00002951

00005524 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    5524:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5526:	4d1a      	ldr	r5, [pc, #104]	; (5590 <lv_refr_vdb_flush+0x6c>)
    5528:	6828      	ldr	r0, [r5, #0]
    552a:	4b1a      	ldr	r3, [pc, #104]	; (5594 <lv_refr_vdb_flush+0x70>)
    552c:	4798      	blx	r3
    552e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    5530:	6828      	ldr	r0, [r5, #0]
    5532:	4b19      	ldr	r3, [pc, #100]	; (5598 <lv_refr_vdb_flush+0x74>)
    5534:	4798      	blx	r3
    5536:	b978      	cbnz	r0, 5558 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
    5538:	2301      	movs	r3, #1
    553a:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    553c:	4b14      	ldr	r3, [pc, #80]	; (5590 <lv_refr_vdb_flush+0x6c>)
    553e:	6818      	ldr	r0, [r3, #0]
    5540:	6843      	ldr	r3, [r0, #4]
    5542:	6a1a      	ldr	r2, [r3, #32]
    5544:	f012 0f01 	tst.w	r2, #1
    5548:	d010      	beq.n	556c <lv_refr_vdb_flush+0x48>
    554a:	6a1b      	ldr	r3, [r3, #32]
    554c:	f013 0f02 	tst.w	r3, #2
    5550:	d00c      	beq.n	556c <lv_refr_vdb_flush+0x48>
    5552:	2301      	movs	r3, #1
    5554:	61e3      	str	r3, [r4, #28]
    5556:	e00b      	b.n	5570 <lv_refr_vdb_flush+0x4c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5558:	4d0d      	ldr	r5, [pc, #52]	; (5590 <lv_refr_vdb_flush+0x6c>)
    555a:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    555c:	69a3      	ldr	r3, [r4, #24]
    555e:	2b00      	cmp	r3, #0
    5560:	d0ea      	beq.n	5538 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    5562:	69c3      	ldr	r3, [r0, #28]
    5564:	2b00      	cmp	r3, #0
    5566:	d0f9      	beq.n	555c <lv_refr_vdb_flush+0x38>
    5568:	4798      	blx	r3
    556a:	e7f6      	b.n	555a <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
    556c:	2300      	movs	r3, #0
    556e:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    5570:	68c3      	ldr	r3, [r0, #12]
    5572:	b11b      	cbz	r3, 557c <lv_refr_vdb_flush+0x58>
    5574:	68a2      	ldr	r2, [r4, #8]
    5576:	f104 0110 	add.w	r1, r4, #16
    557a:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    557c:	6823      	ldr	r3, [r4, #0]
    557e:	b133      	cbz	r3, 558e <lv_refr_vdb_flush+0x6a>
    5580:	6862      	ldr	r2, [r4, #4]
    5582:	b122      	cbz	r2, 558e <lv_refr_vdb_flush+0x6a>
        if(vdb->buf_act == vdb->buf1)
    5584:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
    5586:	428b      	cmp	r3, r1
    5588:	bf08      	it	eq
    558a:	4613      	moveq	r3, r2
    558c:	60a3      	str	r3, [r4, #8]
    558e:	bd38      	pop	{r3, r4, r5, pc}
    5590:	20002688 	.word	0x20002688
    5594:	00010221 	.word	0x00010221
    5598:	00010225 	.word	0x00010225

0000559c <lv_refr_area_part>:
{
    559c:	b570      	push	{r4, r5, r6, lr}
    559e:	b082      	sub	sp, #8
    55a0:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    55a2:	4d1a      	ldr	r5, [pc, #104]	; (560c <lv_refr_area_part+0x70>)
    55a4:	6828      	ldr	r0, [r5, #0]
    55a6:	4b1a      	ldr	r3, [pc, #104]	; (5610 <lv_refr_area_part+0x74>)
    55a8:	4798      	blx	r3
    55aa:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    55ac:	6828      	ldr	r0, [r5, #0]
    55ae:	4b19      	ldr	r3, [pc, #100]	; (5614 <lv_refr_area_part+0x78>)
    55b0:	4798      	blx	r3
    55b2:	b938      	cbnz	r0, 55c4 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    55b4:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    55b6:	69a3      	ldr	r3, [r4, #24]
    55b8:	b123      	cbz	r3, 55c4 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    55ba:	69c3      	ldr	r3, [r0, #28]
    55bc:	2b00      	cmp	r3, #0
    55be:	d0fa      	beq.n	55b6 <lv_refr_area_part+0x1a>
    55c0:	4798      	blx	r3
    55c2:	e7f7      	b.n	55b4 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
    55c4:	f104 0210 	add.w	r2, r4, #16
    55c8:	4631      	mov	r1, r6
    55ca:	4668      	mov	r0, sp
    55cc:	4b12      	ldr	r3, [pc, #72]	; (5618 <lv_refr_area_part+0x7c>)
    55ce:	4798      	blx	r3
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    55d0:	4c0e      	ldr	r4, [pc, #56]	; (560c <lv_refr_area_part+0x70>)
    55d2:	6820      	ldr	r0, [r4, #0]
    55d4:	4b11      	ldr	r3, [pc, #68]	; (561c <lv_refr_area_part+0x80>)
    55d6:	4798      	blx	r3
    55d8:	4601      	mov	r1, r0
    55da:	4668      	mov	r0, sp
    55dc:	4b10      	ldr	r3, [pc, #64]	; (5620 <lv_refr_area_part+0x84>)
    55de:	4798      	blx	r3
    lv_refr_obj_and_children(top_p, &start_mask);
    55e0:	4669      	mov	r1, sp
    55e2:	4d10      	ldr	r5, [pc, #64]	; (5624 <lv_refr_area_part+0x88>)
    55e4:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    55e6:	6820      	ldr	r0, [r4, #0]
    55e8:	4b0f      	ldr	r3, [pc, #60]	; (5628 <lv_refr_area_part+0x8c>)
    55ea:	4798      	blx	r3
    55ec:	4669      	mov	r1, sp
    55ee:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    55f0:	6820      	ldr	r0, [r4, #0]
    55f2:	4b0e      	ldr	r3, [pc, #56]	; (562c <lv_refr_area_part+0x90>)
    55f4:	4798      	blx	r3
    55f6:	4669      	mov	r1, sp
    55f8:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    55fa:	6820      	ldr	r0, [r4, #0]
    55fc:	4b0c      	ldr	r3, [pc, #48]	; (5630 <lv_refr_area_part+0x94>)
    55fe:	4798      	blx	r3
    5600:	b108      	cbz	r0, 5606 <lv_refr_area_part+0x6a>
}
    5602:	b002      	add	sp, #8
    5604:	bd70      	pop	{r4, r5, r6, pc}
        lv_refr_vdb_flush();
    5606:	4b0b      	ldr	r3, [pc, #44]	; (5634 <lv_refr_area_part+0x98>)
    5608:	4798      	blx	r3
}
    560a:	e7fa      	b.n	5602 <lv_refr_area_part+0x66>
    560c:	20002688 	.word	0x20002688
    5610:	00010221 	.word	0x00010221
    5614:	00010225 	.word	0x00010225
    5618:	000106dd 	.word	0x000106dd
    561c:	00002951 	.word	0x00002951
    5620:	000052fd 	.word	0x000052fd
    5624:	00005499 	.word	0x00005499
    5628:	0000296d 	.word	0x0000296d
    562c:	00002989 	.word	0x00002989
    5630:	00010239 	.word	0x00010239
    5634:	00005525 	.word	0x00005525

00005638 <_lv_refr_init>:
{
    5638:	4770      	bx	lr
	...

0000563c <_lv_inv_area>:
{
    563c:	b5f0      	push	{r4, r5, r6, r7, lr}
    563e:	b085      	sub	sp, #20
    5640:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
    5642:	4605      	mov	r5, r0
    5644:	2800      	cmp	r0, #0
    5646:	d054      	beq.n	56f2 <_lv_inv_area+0xb6>
    if(area_p == NULL) {
    5648:	2c00      	cmp	r4, #0
    564a:	d057      	beq.n	56fc <_lv_inv_area+0xc0>
    scr_area.x1 = 0;
    564c:	2300      	movs	r3, #0
    564e:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
    5652:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    5656:	4628      	mov	r0, r5
    5658:	4b36      	ldr	r3, [pc, #216]	; (5734 <_lv_inv_area+0xf8>)
    565a:	4798      	blx	r3
    565c:	3801      	subs	r0, #1
    565e:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
    5662:	4628      	mov	r0, r5
    5664:	4b34      	ldr	r3, [pc, #208]	; (5738 <_lv_inv_area+0xfc>)
    5666:	4798      	blx	r3
    5668:	3801      	subs	r0, #1
    566a:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
    566e:	aa02      	add	r2, sp, #8
    5670:	4621      	mov	r1, r4
    5672:	4668      	mov	r0, sp
    5674:	4b31      	ldr	r3, [pc, #196]	; (573c <_lv_inv_area+0x100>)
    5676:	4798      	blx	r3
    if(suc != false) {
    5678:	2800      	cmp	r0, #0
    567a:	d045      	beq.n	5708 <_lv_inv_area+0xcc>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
    567c:	692b      	ldr	r3, [r5, #16]
    567e:	b113      	cbz	r3, 5686 <_lv_inv_area+0x4a>
    5680:	4669      	mov	r1, sp
    5682:	4628      	mov	r0, r5
    5684:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
    5686:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    568a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    568e:	b19b      	cbz	r3, 56b8 <_lv_inv_area+0x7c>
    5690:	2100      	movs	r1, #0
    5692:	460c      	mov	r4, r1
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
    5694:	460f      	mov	r7, r1
    5696:	4e2a      	ldr	r6, [pc, #168]	; (5740 <_lv_inv_area+0x104>)
    5698:	3109      	adds	r1, #9
    569a:	463a      	mov	r2, r7
    569c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    56a0:	4668      	mov	r0, sp
    56a2:	47b0      	blx	r6
    56a4:	bb80      	cbnz	r0, 5708 <_lv_inv_area+0xcc>
        for(i = 0; i < disp->inv_p; i++) {
    56a6:	3401      	adds	r4, #1
    56a8:	b2a4      	uxth	r4, r4
    56aa:	4621      	mov	r1, r4
    56ac:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    56b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    56b4:	429c      	cmp	r4, r3
    56b6:	dbef      	blt.n	5698 <_lv_inv_area+0x5c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
    56b8:	2b1f      	cmp	r3, #31
    56ba:	dc27      	bgt.n	570c <_lv_inv_area+0xd0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    56bc:	3309      	adds	r3, #9
    56be:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    56c2:	f10d 32ff 	add.w	r2, sp, #4294967295
    56c6:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    56ca:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    56ce:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    56d2:	4283      	cmp	r3, r0
    56d4:	d1f9      	bne.n	56ca <_lv_inv_area+0x8e>
        disp->inv_p++;
    56d6:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    56da:	f3c3 0209 	ubfx	r2, r3, #0, #10
    56de:	3201      	adds	r2, #1
    56e0:	f362 0309 	bfi	r3, r2, #0, #10
    56e4:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
    56e8:	2103      	movs	r1, #3
    56ea:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    56ec:	4b15      	ldr	r3, [pc, #84]	; (5744 <_lv_inv_area+0x108>)
    56ee:	4798      	blx	r3
    56f0:	e00a      	b.n	5708 <_lv_inv_area+0xcc>
    if(!disp) disp = lv_disp_get_default();
    56f2:	4b15      	ldr	r3, [pc, #84]	; (5748 <_lv_inv_area+0x10c>)
    56f4:	4798      	blx	r3
    if(!disp) return;
    56f6:	4605      	mov	r5, r0
    56f8:	b130      	cbz	r0, 5708 <_lv_inv_area+0xcc>
    56fa:	e7a5      	b.n	5648 <_lv_inv_area+0xc>
        disp->inv_p = 0;
    56fc:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5700:	f36f 0309 	bfc	r3, #0, #10
    5704:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
}
    5708:	b005      	add	sp, #20
    570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
    570c:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    5710:	f36f 0309 	bfc	r3, #0, #10
    5714:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
    5718:	f10d 0207 	add.w	r2, sp, #7
    571c:	f105 0050 	add.w	r0, r5, #80	; 0x50
    uint8_t * d8 = (uint8_t *)dst;
    5720:	f105 0348 	add.w	r3, r5, #72	; 0x48
        *d8 = *s8;
    5724:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5728:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    572c:	4283      	cmp	r3, r0
    572e:	d1f9      	bne.n	5724 <_lv_inv_area+0xe8>
    5730:	e7d1      	b.n	56d6 <_lv_inv_area+0x9a>
    5732:	bf00      	nop
    5734:	00010131 	.word	0x00010131
    5738:	00010159 	.word	0x00010159
    573c:	000106dd 	.word	0x000106dd
    5740:	00010931 	.word	0x00010931
    5744:	00011e55 	.word	0x00011e55
    5748:	00010125 	.word	0x00010125

0000574c <_lv_refr_get_disp_refreshing>:
}
    574c:	4b01      	ldr	r3, [pc, #4]	; (5754 <_lv_refr_get_disp_refreshing+0x8>)
    574e:	6818      	ldr	r0, [r3, #0]
    5750:	4770      	bx	lr
    5752:	bf00      	nop
    5754:	20002688 	.word	0x20002688

00005758 <_lv_disp_refr_task>:
{
    5758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    575c:	b08b      	sub	sp, #44	; 0x2c
    575e:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
    5760:	4bb3      	ldr	r3, [pc, #716]	; (5a30 <_lv_disp_refr_task+0x2d8>)
    5762:	4798      	blx	r3
    5764:	9007      	str	r0, [sp, #28]
    disp_refr = task->user_data;
    5766:	4cb3      	ldr	r4, [pc, #716]	; (5a34 <_lv_disp_refr_task+0x2dc>)
    5768:	68eb      	ldr	r3, [r5, #12]
    576a:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
    576c:	2100      	movs	r1, #0
    576e:	4628      	mov	r0, r5
    5770:	4bb1      	ldr	r3, [pc, #708]	; (5a38 <_lv_disp_refr_task+0x2e0>)
    5772:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
    5774:	6820      	ldr	r0, [r4, #0]
    5776:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5778:	b17b      	cbz	r3, 579a <_lv_disp_refr_task+0x42>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    577a:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    577e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5782:	2b00      	cmp	r3, #0
    5784:	f000 8268 	beq.w	5c58 <_lv_disp_refr_task+0x500>
    5788:	f04f 0848 	mov.w	r8, #72	; 0x48
    578c:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    578e:	4da9      	ldr	r5, [pc, #676]	; (5a34 <_lv_disp_refr_task+0x2dc>)
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    5790:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 5a58 <_lv_disp_refr_task+0x300>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    5794:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 5a50 <_lv_disp_refr_task+0x2f8>
    5798:	e04d      	b.n	5836 <_lv_disp_refr_task+0xde>
        disp_refr->inv_p = 0;
    579a:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    579e:	f36f 0309 	bfc	r3, #0, #10
    57a2:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
        return;
    57a6:	e252      	b.n	5c4e <_lv_disp_refr_task+0x4f6>
                disp_refr->inv_area_joined[join_from] = 1;
    57a8:	4426      	add	r6, r4
    57aa:	2301      	movs	r3, #1
    57ac:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    57b0:	3401      	adds	r4, #1
    57b2:	6828      	ldr	r0, [r5, #0]
    57b4:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    57b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    57bc:	429c      	cmp	r4, r3
    57be:	d230      	bcs.n	5822 <_lv_disp_refr_task+0xca>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
    57c0:	1903      	adds	r3, r0, r4
    57c2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    57c6:	2b00      	cmp	r3, #0
    57c8:	d1f2      	bne.n	57b0 <_lv_disp_refr_task+0x58>
    57ca:	42a7      	cmp	r7, r4
    57cc:	d0f0      	beq.n	57b0 <_lv_disp_refr_task+0x58>
    57ce:	f104 0609 	add.w	r6, r4, #9
    57d2:	00f6      	lsls	r6, r6, #3
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    57d4:	1981      	adds	r1, r0, r6
    57d6:	4440      	add	r0, r8
    57d8:	47d0      	blx	sl
    57da:	2800      	cmp	r0, #0
    57dc:	d0e8      	beq.n	57b0 <_lv_disp_refr_task+0x58>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    57de:	6829      	ldr	r1, [r5, #0]
    57e0:	198a      	adds	r2, r1, r6
    57e2:	4441      	add	r1, r8
    57e4:	a808      	add	r0, sp, #32
    57e6:	4b95      	ldr	r3, [pc, #596]	; (5a3c <_lv_disp_refr_task+0x2e4>)
    57e8:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    57ea:	a808      	add	r0, sp, #32
    57ec:	47d8      	blx	fp
    57ee:	9001      	str	r0, [sp, #4]
    57f0:	6828      	ldr	r0, [r5, #0]
    57f2:	4440      	add	r0, r8
    57f4:	47d8      	blx	fp
    57f6:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
    57f8:	6828      	ldr	r0, [r5, #0]
    57fa:	4430      	add	r0, r6
    57fc:	47d8      	blx	fp
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    57fe:	4448      	add	r0, r9
    5800:	9b01      	ldr	r3, [sp, #4]
    5802:	4283      	cmp	r3, r0
    5804:	d2d4      	bcs.n	57b0 <_lv_disp_refr_task+0x58>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
    5806:	682e      	ldr	r6, [r5, #0]
    5808:	eb06 0308 	add.w	r3, r6, r8
    580c:	f10d 021f 	add.w	r2, sp, #31
    5810:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    5814:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5818:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    581c:	4283      	cmp	r3, r0
    581e:	d1f9      	bne.n	5814 <_lv_disp_refr_task+0xbc>
    5820:	e7c2      	b.n	57a8 <_lv_disp_refr_task+0x50>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    5822:	3701      	adds	r7, #1
    5824:	6828      	ldr	r0, [r5, #0]
    5826:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    582a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    582e:	f108 0808 	add.w	r8, r8, #8
    5832:	429f      	cmp	r7, r3
    5834:	d20e      	bcs.n	5854 <_lv_disp_refr_task+0xfc>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
    5836:	4438      	add	r0, r7
    5838:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
    583c:	2b00      	cmp	r3, #0
    583e:	d1f0      	bne.n	5822 <_lv_disp_refr_task+0xca>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    5840:	6828      	ldr	r0, [r5, #0]
    5842:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5846:	f3c3 0309 	ubfx	r3, r3, #0, #10
    584a:	2b00      	cmp	r3, #0
    584c:	f000 81ea 	beq.w	5c24 <_lv_disp_refr_task+0x4cc>
    5850:	2400      	movs	r4, #0
    5852:	e7b5      	b.n	57c0 <_lv_disp_refr_task+0x68>
    px_num = 0;
    5854:	2100      	movs	r1, #0
    5856:	4a77      	ldr	r2, [pc, #476]	; (5a34 <_lv_disp_refr_task+0x2dc>)
    5858:	6051      	str	r1, [r2, #4]
    if(disp_refr->inv_p == 0) return;
    585a:	2b00      	cmp	r3, #0
    585c:	f000 81ea 	beq.w	5c34 <_lv_disp_refr_task+0x4dc>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    5860:	1e5a      	subs	r2, r3, #1
    5862:	4611      	mov	r1, r2
    5864:	9205      	str	r2, [sp, #20]
    5866:	d432      	bmi.n	58ce <_lv_disp_refr_task+0x176>
        if(disp_refr->inv_area_joined[i] == 0) {
    5868:	1882      	adds	r2, r0, r2
    586a:	f892 2148 	ldrb.w	r2, [r2, #328]	; 0x148
    586e:	b17a      	cbz	r2, 5890 <_lv_disp_refr_task+0x138>
    5870:	f203 1347 	addw	r3, r3, #327	; 0x147
    5874:	4403      	add	r3, r0
    5876:	460a      	mov	r2, r1
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    5878:	3a01      	subs	r2, #1
    587a:	f1b2 3fff 	cmp.w	r2, #4294967295
    587e:	d005      	beq.n	588c <_lv_disp_refr_task+0x134>
        if(disp_refr->inv_area_joined[i] == 0) {
    5880:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    5884:	2900      	cmp	r1, #0
    5886:	d1f7      	bne.n	5878 <_lv_disp_refr_task+0x120>
    5888:	9205      	str	r2, [sp, #20]
    588a:	e001      	b.n	5890 <_lv_disp_refr_task+0x138>
    int32_t last_i = 0;
    588c:	2300      	movs	r3, #0
    588e:	9305      	str	r3, [sp, #20]
    disp_refr->driver.buffer->last_area = 0;
    5890:	6842      	ldr	r2, [r0, #4]
    5892:	f892 3020 	ldrb.w	r3, [r2, #32]
    5896:	f36f 0300 	bfc	r3, #0, #1
    589a:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
    589e:	6842      	ldr	r2, [r0, #4]
    58a0:	f892 3020 	ldrb.w	r3, [r2, #32]
    58a4:	f36f 0341 	bfc	r3, #1, #1
    58a8:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
    58ac:	4b61      	ldr	r3, [pc, #388]	; (5a34 <_lv_disp_refr_task+0x2dc>)
    58ae:	681c      	ldr	r4, [r3, #0]
    58b0:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    58b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    58b8:	2b00      	cmp	r3, #0
    58ba:	f000 81bb 	beq.w	5c34 <_lv_disp_refr_task+0x4dc>
    58be:	2348      	movs	r3, #72	; 0x48
    58c0:	9302      	str	r3, [sp, #8]
    58c2:	f04f 0a00 	mov.w	sl, #0
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    58c6:	f8df b16c 	ldr.w	fp, [pc, #364]	; 5a34 <_lv_disp_refr_task+0x2dc>
    58ca:	4627      	mov	r7, r4
    58cc:	e045      	b.n	595a <_lv_disp_refr_task+0x202>
    int32_t last_i = 0;
    58ce:	2300      	movs	r3, #0
    58d0:	9305      	str	r3, [sp, #20]
    58d2:	e7dd      	b.n	5890 <_lv_disp_refr_task+0x138>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    58d4:	687a      	ldr	r2, [r7, #4]
    58d6:	f892 3020 	ldrb.w	r3, [r2, #32]
    58da:	f043 0301 	orr.w	r3, r3, #1
    58de:	f882 3020 	strb.w	r3, [r2, #32]
    58e2:	e043      	b.n	596c <_lv_disp_refr_task+0x214>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    58e4:	f8db 0000 	ldr.w	r0, [fp]
    58e8:	4b55      	ldr	r3, [pc, #340]	; (5a40 <_lv_disp_refr_task+0x2e8>)
    58ea:	4798      	blx	r3
    58ec:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
    58ee:	2500      	movs	r5, #0
    58f0:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
    58f2:	f8db 0000 	ldr.w	r0, [fp]
    58f6:	4b53      	ldr	r3, [pc, #332]	; (5a44 <_lv_disp_refr_task+0x2ec>)
    58f8:	4798      	blx	r3
    58fa:	3801      	subs	r0, #1
    58fc:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
    58fe:	8265      	strh	r5, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
    5900:	f8db 0000 	ldr.w	r0, [fp]
    5904:	4b50      	ldr	r3, [pc, #320]	; (5a48 <_lv_disp_refr_task+0x2f0>)
    5906:	4798      	blx	r3
    5908:	3801      	subs	r0, #1
    590a:	82e0      	strh	r0, [r4, #22]
        disp_refr->driver.buffer->last_part = 1;
    590c:	f8db 3000 	ldr.w	r3, [fp]
    5910:	685a      	ldr	r2, [r3, #4]
    5912:	f892 3020 	ldrb.w	r3, [r2, #32]
    5916:	f043 0302 	orr.w	r3, r3, #2
    591a:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
    591e:	9801      	ldr	r0, [sp, #4]
    5920:	4b4a      	ldr	r3, [pc, #296]	; (5a4c <_lv_disp_refr_task+0x2f4>)
    5922:	4798      	blx	r3
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    5924:	f8db 0000 	ldr.w	r0, [fp]
    5928:	6983      	ldr	r3, [r0, #24]
    592a:	b143      	cbz	r3, 593e <_lv_disp_refr_task+0x1e6>
    592c:	9b02      	ldr	r3, [sp, #8]
    592e:	4418      	add	r0, r3
    5930:	4b47      	ldr	r3, [pc, #284]	; (5a50 <_lv_disp_refr_task+0x2f8>)
    5932:	4798      	blx	r3
    5934:	f8db 3004 	ldr.w	r3, [fp, #4]
    5938:	4403      	add	r3, r0
    593a:	f8cb 3004 	str.w	r3, [fp, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
    593e:	f10a 0a01 	add.w	sl, sl, #1
    5942:	f8db 7000 	ldr.w	r7, [fp]
    5946:	9b02      	ldr	r3, [sp, #8]
    5948:	3308      	adds	r3, #8
    594a:	9302      	str	r3, [sp, #8]
    594c:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
    5950:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5954:	459a      	cmp	sl, r3
    5956:	f280 816d 	bge.w	5c34 <_lv_disp_refr_task+0x4dc>
        if(disp_refr->inv_area_joined[i] == 0) {
    595a:	eb07 030a 	add.w	r3, r7, sl
    595e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    5962:	2b00      	cmp	r3, #0
    5964:	d1eb      	bne.n	593e <_lv_disp_refr_task+0x1e6>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    5966:	9b05      	ldr	r3, [sp, #20]
    5968:	4553      	cmp	r3, sl
    596a:	d0b3      	beq.n	58d4 <_lv_disp_refr_task+0x17c>
            disp_refr->driver.buffer->last_part = 0;
    596c:	687a      	ldr	r2, [r7, #4]
    596e:	f892 3020 	ldrb.w	r3, [r2, #32]
    5972:	f36f 0341 	bfc	r3, #1, #1
    5976:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
    597a:	9b02      	ldr	r3, [sp, #8]
    597c:	18fb      	adds	r3, r7, r3
    597e:	9301      	str	r3, [sp, #4]
    if(lv_disp_is_true_double_buf(disp_refr)) {
    5980:	4638      	mov	r0, r7
    5982:	4b34      	ldr	r3, [pc, #208]	; (5a54 <_lv_disp_refr_task+0x2fc>)
    5984:	4798      	blx	r3
    5986:	2800      	cmp	r0, #0
    5988:	d1ac      	bne.n	58e4 <_lv_disp_refr_task+0x18c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    598a:	f8db 0000 	ldr.w	r0, [fp]
    598e:	4b2c      	ldr	r3, [pc, #176]	; (5a40 <_lv_disp_refr_task+0x2e8>)
    5990:	4798      	blx	r3
    5992:	4606      	mov	r6, r0
    5994:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5998:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
    599c:	3401      	adds	r4, #1
    599e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    59a2:	1ae4      	subs	r4, r4, r3
    59a4:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    59a6:	f9b7 504e 	ldrsh.w	r5, [r7, #78]	; 0x4e
    59aa:	f105 0801 	add.w	r8, r5, #1
    59ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    59b2:	eba8 0803 	sub.w	r8, r8, r3
    59b6:	fa0f f888 	sxth.w	r8, r8
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    59ba:	f8db 0000 	ldr.w	r0, [fp]
    59be:	4b22      	ldr	r3, [pc, #136]	; (5a48 <_lv_disp_refr_task+0x2f0>)
    59c0:	4798      	blx	r3
        lv_coord_t y2 =
    59c2:	4285      	cmp	r5, r0
    59c4:	da2b      	bge.n	5a1e <_lv_disp_refr_task+0x2c6>
    59c6:	f9b7 904e 	ldrsh.w	r9, [r7, #78]	; 0x4e
        int32_t max_row = (uint32_t)vdb->size / w;
    59ca:	68f3      	ldr	r3, [r6, #12]
    59cc:	fbb3 f3f4 	udiv	r3, r3, r4
    59d0:	4598      	cmp	r8, r3
    59d2:	bfa8      	it	ge
    59d4:	4698      	movge	r8, r3
        if(disp_refr->driver.rounder_cb) {
    59d6:	f8db 3000 	ldr.w	r3, [fp]
    59da:	691b      	ldr	r3, [r3, #16]
    59dc:	2b00      	cmp	r3, #0
    59de:	d042      	beq.n	5a66 <_lv_disp_refr_task+0x30e>
            tmp.x1 = 0;
    59e0:	2300      	movs	r3, #0
    59e2:	f8ad 3020 	strh.w	r3, [sp, #32]
            tmp.x2 = 0;
    59e6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            tmp.y1 = 0;
    59ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            lv_coord_t h_tmp = max_row;
    59ee:	fa0f f588 	sxth.w	r5, r8
    59f2:	1e6c      	subs	r4, r5, #1
    59f4:	b224      	sxth	r4, r4
                tmp.y2 = h_tmp - 1;
    59f6:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    59fa:	f8db 0000 	ldr.w	r0, [fp]
    59fe:	6903      	ldr	r3, [r0, #16]
    5a00:	a908      	add	r1, sp, #32
    5a02:	4798      	blx	r3
    5a04:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
    5a08:	1c4b      	adds	r3, r1, #1
    5a0a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    5a0e:	1a9b      	subs	r3, r3, r2
                if(lv_area_get_height(&tmp) <= max_row) break;
    5a10:	b21b      	sxth	r3, r3
    5a12:	4598      	cmp	r8, r3
    5a14:	da22      	bge.n	5a5c <_lv_disp_refr_task+0x304>
                h_tmp--;
    5a16:	4625      	mov	r5, r4
            } while(h_tmp > 0);
    5a18:	2c00      	cmp	r4, #0
    5a1a:	dcea      	bgt.n	59f2 <_lv_disp_refr_task+0x29a>
    5a1c:	e782      	b.n	5924 <_lv_disp_refr_task+0x1cc>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    5a1e:	f8db 0000 	ldr.w	r0, [fp]
    5a22:	4b09      	ldr	r3, [pc, #36]	; (5a48 <_lv_disp_refr_task+0x2f0>)
    5a24:	4798      	blx	r3
    5a26:	3801      	subs	r0, #1
        lv_coord_t y2 =
    5a28:	fa0f f980 	sxth.w	r9, r0
    5a2c:	e7cd      	b.n	59ca <_lv_disp_refr_task+0x272>
    5a2e:	bf00      	nop
    5a30:	0001029d 	.word	0x0001029d
    5a34:	20002688 	.word	0x20002688
    5a38:	00011e55 	.word	0x00011e55
    5a3c:	00010733 	.word	0x00010733
    5a40:	00010221 	.word	0x00010221
    5a44:	00010131 	.word	0x00010131
    5a48:	00010159 	.word	0x00010159
    5a4c:	0000559d 	.word	0x0000559d
    5a50:	000106c1 	.word	0x000106c1
    5a54:	00010239 	.word	0x00010239
    5a58:	000108ed 	.word	0x000108ed
            if(h_tmp <= 0) {
    5a5c:	2d00      	cmp	r5, #0
    5a5e:	f77f af61 	ble.w	5924 <_lv_disp_refr_task+0x1cc>
                max_row = tmp.y2 + 1;
    5a62:	f101 0801 	add.w	r8, r1, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    5a66:	f9b7 404a 	ldrsh.w	r4, [r7, #74]	; 0x4a
    5a6a:	f8cd 900c 	str.w	r9, [sp, #12]
    5a6e:	eb04 0308 	add.w	r3, r4, r8
    5a72:	3b01      	subs	r3, #1
    5a74:	454b      	cmp	r3, r9
    5a76:	dc4b      	bgt.n	5b10 <_lv_disp_refr_task+0x3b8>
            vdb->area.y2 = row + max_row - 1;
    5a78:	fa1f f388 	uxth.w	r3, r8
    5a7c:	9304      	str	r3, [sp, #16]
    5a7e:	3b01      	subs	r3, #1
    5a80:	f8cd a018 	str.w	sl, [sp, #24]
    5a84:	469a      	mov	sl, r3
    5a86:	e00d      	b.n	5aa4 <_lv_disp_refr_task+0x34c>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    5a88:	45a9      	cmp	r9, r5
    5a8a:	d01c      	beq.n	5ac6 <_lv_disp_refr_task+0x36e>
            lv_refr_area_part(area_p);
    5a8c:	9801      	ldr	r0, [sp, #4]
    5a8e:	4b78      	ldr	r3, [pc, #480]	; (5c70 <_lv_disp_refr_task+0x518>)
    5a90:	4798      	blx	r3
    5a92:	9b04      	ldr	r3, [sp, #16]
    5a94:	441c      	add	r4, r3
    5a96:	b224      	sxth	r4, r4
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    5a98:	eb04 0308 	add.w	r3, r4, r8
    5a9c:	3b01      	subs	r3, #1
    5a9e:	9a03      	ldr	r2, [sp, #12]
    5aa0:	4293      	cmp	r3, r2
    5aa2:	dc1a      	bgt.n	5ada <_lv_disp_refr_task+0x382>
            vdb->area.x1 = area_p->x1;
    5aa4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    5aa8:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    5aaa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    5aae:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    5ab0:	8274      	strh	r4, [r6, #18]
    5ab2:	b2a4      	uxth	r4, r4
    5ab4:	eb04 050a 	add.w	r5, r4, sl
    5ab8:	b22d      	sxth	r5, r5
            vdb->area.y2 = row + max_row - 1;
    5aba:	82f5      	strh	r5, [r6, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
    5abc:	45a9      	cmp	r9, r5
    5abe:	dae3      	bge.n	5a88 <_lv_disp_refr_task+0x330>
    5ac0:	f8a6 9016 	strh.w	r9, [r6, #22]
            row_last = vdb->area.y2;
    5ac4:	464d      	mov	r5, r9
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    5ac6:	f8db 3000 	ldr.w	r3, [fp]
    5aca:	685a      	ldr	r2, [r3, #4]
    5acc:	f892 3020 	ldrb.w	r3, [r2, #32]
    5ad0:	f043 0302 	orr.w	r3, r3, #2
    5ad4:	f882 3020 	strb.w	r3, [r2, #32]
    5ad8:	e7d8      	b.n	5a8c <_lv_disp_refr_task+0x334>
    5ada:	f8dd a018 	ldr.w	sl, [sp, #24]
        if(y2 != row_last) {
    5ade:	45a9      	cmp	r9, r5
    5ae0:	f43f af20 	beq.w	5924 <_lv_disp_refr_task+0x1cc>
            vdb->area.x1 = area_p->x1;
    5ae4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    5ae8:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    5aea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    5aee:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    5af0:	8274      	strh	r4, [r6, #18]
            vdb->area.y2 = y2;
    5af2:	f8a6 9016 	strh.w	r9, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
    5af6:	f8db 3000 	ldr.w	r3, [fp]
    5afa:	685a      	ldr	r2, [r3, #4]
    5afc:	f892 3020 	ldrb.w	r3, [r2, #32]
    5b00:	f043 0302 	orr.w	r3, r3, #2
    5b04:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
    5b08:	9801      	ldr	r0, [sp, #4]
    5b0a:	4b59      	ldr	r3, [pc, #356]	; (5c70 <_lv_disp_refr_task+0x518>)
    5b0c:	4798      	blx	r3
    5b0e:	e709      	b.n	5924 <_lv_disp_refr_task+0x1cc>
        lv_coord_t row_last = 0;
    5b10:	2500      	movs	r5, #0
    5b12:	e7e4      	b.n	5ade <_lv_disp_refr_task+0x386>
        if(lv_disp_is_true_double_buf(disp_refr) && disp_refr->driver.set_px_cb == NULL) {
    5b14:	4b57      	ldr	r3, [pc, #348]	; (5c74 <_lv_disp_refr_task+0x51c>)
    5b16:	4798      	blx	r3
    5b18:	b118      	cbz	r0, 5b22 <_lv_disp_refr_task+0x3ca>
    5b1a:	4b57      	ldr	r3, [pc, #348]	; (5c78 <_lv_disp_refr_task+0x520>)
    5b1c:	6818      	ldr	r0, [r3, #0]
    5b1e:	6943      	ldr	r3, [r0, #20]
    5b20:	b1eb      	cbz	r3, 5b5e <_lv_disp_refr_task+0x406>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
    5b22:	4c55      	ldr	r4, [pc, #340]	; (5c78 <_lv_disp_refr_task+0x520>)
    5b24:	6820      	ldr	r0, [r4, #0]
    5b26:	f44f 7180 	mov.w	r1, #256	; 0x100
    5b2a:	3048      	adds	r0, #72	; 0x48
    5b2c:	4d53      	ldr	r5, [pc, #332]	; (5c7c <_lv_disp_refr_task+0x524>)
    5b2e:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
    5b30:	6820      	ldr	r0, [r4, #0]
    5b32:	2120      	movs	r1, #32
    5b34:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    5b38:	47a8      	blx	r5
        disp_refr->inv_p = 0;
    5b3a:	6823      	ldr	r3, [r4, #0]
    5b3c:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    5b40:	f36f 0209 	bfc	r2, #0, #10
    5b44:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
        elaps = lv_tick_elaps(start);
    5b48:	9807      	ldr	r0, [sp, #28]
    5b4a:	4b4d      	ldr	r3, [pc, #308]	; (5c80 <_lv_disp_refr_task+0x528>)
    5b4c:	4798      	blx	r3
    5b4e:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
    5b50:	6820      	ldr	r0, [r4, #0]
    5b52:	6983      	ldr	r3, [r0, #24]
    5b54:	2b00      	cmp	r3, #0
    5b56:	d076      	beq.n	5c46 <_lv_disp_refr_task+0x4ee>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
    5b58:	6862      	ldr	r2, [r4, #4]
    5b5a:	4798      	blx	r3
    5b5c:	e073      	b.n	5c46 <_lv_disp_refr_task+0x4ee>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    5b5e:	4b49      	ldr	r3, [pc, #292]	; (5c84 <_lv_disp_refr_task+0x52c>)
    5b60:	4798      	blx	r3
    5b62:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
    5b64:	4b48      	ldr	r3, [pc, #288]	; (5c88 <_lv_disp_refr_task+0x530>)
    5b66:	4798      	blx	r3
            while(vdb->flushing)
    5b68:	69a3      	ldr	r3, [r4, #24]
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d1fc      	bne.n	5b68 <_lv_disp_refr_task+0x410>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
    5b6e:	68a3      	ldr	r3, [r4, #8]
    5b70:	9301      	str	r3, [sp, #4]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    5b72:	f8d4 a000 	ldr.w	sl, [r4]
    5b76:	4553      	cmp	r3, sl
    5b78:	bf08      	it	eq
    5b7a:	f8d4 a004 	ldreq.w	sl, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    5b7e:	4c3e      	ldr	r4, [pc, #248]	; (5c78 <_lv_disp_refr_task+0x520>)
    5b80:	6820      	ldr	r0, [r4, #0]
    5b82:	4b42      	ldr	r3, [pc, #264]	; (5c8c <_lv_disp_refr_task+0x534>)
    5b84:	4798      	blx	r3
    5b86:	9002      	str	r0, [sp, #8]
            for(a = 0; a < disp_refr->inv_p; a++) {
    5b88:	6823      	ldr	r3, [r4, #0]
    5b8a:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    5b8e:	f3c2 0209 	ubfx	r2, r2, #0, #10
    5b92:	2a00      	cmp	r2, #0
    5b94:	d0c5      	beq.n	5b22 <_lv_disp_refr_task+0x3ca>
                        start_offs += hres * sizeof(lv_color_t);
    5b96:	0045      	lsls	r5, r0, #1
    5b98:	2200      	movs	r2, #0
    5b9a:	4690      	mov	r8, r2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    5b9c:	46a1      	mov	r9, r4
    5b9e:	e00c      	b.n	5bba <_lv_disp_refr_task+0x462>
            for(a = 0; a < disp_refr->inv_p; a++) {
    5ba0:	f108 0801 	add.w	r8, r8, #1
    5ba4:	fa1f f888 	uxth.w	r8, r8
    5ba8:	4642      	mov	r2, r8
    5baa:	f8d9 3000 	ldr.w	r3, [r9]
    5bae:	f8b3 1168 	ldrh.w	r1, [r3, #360]	; 0x168
    5bb2:	f3c1 0109 	ubfx	r1, r1, #0, #10
    5bb6:	4588      	cmp	r8, r1
    5bb8:	dab3      	bge.n	5b22 <_lv_disp_refr_task+0x3ca>
                if(disp_refr->inv_area_joined[a] == 0) {
    5bba:	1899      	adds	r1, r3, r2
    5bbc:	f891 1148 	ldrb.w	r1, [r1, #328]	; 0x148
    5bc0:	2900      	cmp	r1, #0
    5bc2:	d1ed      	bne.n	5ba0 <_lv_disp_refr_task+0x448>
    5bc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
    5bc8:	f9b3 704a 	ldrsh.w	r7, [r3, #74]	; 0x4a
    5bcc:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
    5bd0:	9802      	ldr	r0, [sp, #8]
    5bd2:	fb07 1600 	mla	r6, r7, r0, r1
                    uint32_t start_offs =
    5bd6:	0076      	lsls	r6, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5bd8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    5bdc:	3301      	adds	r3, #1
    5bde:	1a5b      	subs	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    5be0:	b21b      	sxth	r3, r3
    5be2:	005b      	lsls	r3, r3, #1
    5be4:	9303      	str	r3, [sp, #12]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    5be6:	f8d9 3000 	ldr.w	r3, [r9]
    5bea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5bee:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
    5bf2:	42bb      	cmp	r3, r7
    5bf4:	dbd4      	blt.n	5ba0 <_lv_disp_refr_task+0x448>
    5bf6:	9b01      	ldr	r3, [sp, #4]
    5bf8:	eb03 0b06 	add.w	fp, r3, r6
    5bfc:	4456      	add	r6, sl
    5bfe:	3209      	adds	r2, #9
    5c00:	00d4      	lsls	r4, r2, #3
                        _lv_memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    5c02:	9a03      	ldr	r2, [sp, #12]
    5c04:	4631      	mov	r1, r6
    5c06:	4658      	mov	r0, fp
    5c08:	4b21      	ldr	r3, [pc, #132]	; (5c90 <_lv_disp_refr_task+0x538>)
    5c0a:	4798      	blx	r3
    5c0c:	3701      	adds	r7, #1
    5c0e:	b23f      	sxth	r7, r7
    5c10:	44ab      	add	fp, r5
    5c12:	442e      	add	r6, r5
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    5c14:	f8d9 3000 	ldr.w	r3, [r9]
    5c18:	4423      	add	r3, r4
    5c1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    5c1e:	42bb      	cmp	r3, r7
    5c20:	daef      	bge.n	5c02 <_lv_disp_refr_task+0x4aa>
    5c22:	e7bd      	b.n	5ba0 <_lv_disp_refr_task+0x448>
    px_num = 0;
    5c24:	2200      	movs	r2, #0
    5c26:	4b14      	ldr	r3, [pc, #80]	; (5c78 <_lv_disp_refr_task+0x520>)
    5c28:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    5c2a:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5c32:	b97b      	cbnz	r3, 5c54 <_lv_disp_refr_task+0x4fc>
    if(disp_refr->inv_p != 0) {
    5c34:	4b10      	ldr	r3, [pc, #64]	; (5c78 <_lv_disp_refr_task+0x520>)
    5c36:	6818      	ldr	r0, [r3, #0]
    5c38:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5c40:	2b00      	cmp	r3, #0
    5c42:	f47f af67 	bne.w	5b14 <_lv_disp_refr_task+0x3bc>
    _lv_mem_buf_free_all();
    5c46:	4b13      	ldr	r3, [pc, #76]	; (5c94 <_lv_disp_refr_task+0x53c>)
    5c48:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
    5c4a:	4b13      	ldr	r3, [pc, #76]	; (5c98 <_lv_disp_refr_task+0x540>)
    5c4c:	4798      	blx	r3
}
    5c4e:	b00b      	add	sp, #44	; 0x2c
    5c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t last_i = 0;
    5c54:	9205      	str	r2, [sp, #20]
    5c56:	e61b      	b.n	5890 <_lv_disp_refr_task+0x138>
    px_num = 0;
    5c58:	2200      	movs	r2, #0
    5c5a:	4b07      	ldr	r3, [pc, #28]	; (5c78 <_lv_disp_refr_task+0x520>)
    5c5c:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    5c5e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    5c62:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5c66:	2b00      	cmp	r3, #0
    5c68:	d0ed      	beq.n	5c46 <_lv_disp_refr_task+0x4ee>
    int32_t last_i = 0;
    5c6a:	9205      	str	r2, [sp, #20]
    5c6c:	e610      	b.n	5890 <_lv_disp_refr_task+0x138>
    5c6e:	bf00      	nop
    5c70:	0000559d 	.word	0x0000559d
    5c74:	00010239 	.word	0x00010239
    5c78:	20002688 	.word	0x20002688
    5c7c:	00011bdb 	.word	0x00011bdb
    5c80:	000102b5 	.word	0x000102b5
    5c84:	00010221 	.word	0x00010221
    5c88:	00005525 	.word	0x00005525
    5c8c:	00010131 	.word	0x00010131
    5c90:	00011769 	.word	0x00011769
    5c94:	0001170d 	.word	0x0001170d
    5c98:	0000ff65 	.word	0x0000ff65

00005c9c <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
    5c9c:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
    5c9e:	2104      	movs	r1, #4
    5ca0:	4b01      	ldr	r3, [pc, #4]	; (5ca8 <lv_style_init+0xc>)
    5ca2:	4798      	blx	r3
    5ca4:	bd08      	pop	{r3, pc}
    5ca6:	bf00      	nop
    5ca8:	00011bdb 	.word	0x00011bdb

00005cac <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
    5cac:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
    5cae:	2108      	movs	r1, #8
    5cb0:	4b01      	ldr	r3, [pc, #4]	; (5cb8 <lv_style_list_init+0xc>)
    5cb2:	4798      	blx	r3
    5cb4:	bd08      	pop	{r3, pc}
    5cb6:	bf00      	nop
    5cb8:	00011bdb 	.word	0x00011bdb

00005cbc <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
    5cbc:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
    5cbe:	7906      	ldrb	r6, [r0, #4]
    5cc0:	2e00      	cmp	r6, #0
    5cc2:	d044      	beq.n	5d4e <_lv_style_list_remove_style+0x92>
    5cc4:	4604      	mov	r4, r0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
        if(list->style_list[i] == style) {
    5cc6:	6800      	ldr	r0, [r0, #0]
    5cc8:	6803      	ldr	r3, [r0, #0]
    5cca:	4299      	cmp	r1, r3
    5ccc:	d00a      	beq.n	5ce4 <_lv_style_list_remove_style+0x28>
    5cce:	4603      	mov	r3, r0
    5cd0:	1e75      	subs	r5, r6, #1
    5cd2:	b2ed      	uxtb	r5, r5
    5cd4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    for(i = 0; i < list->style_cnt; i++) {
    5cd8:	429d      	cmp	r5, r3
    5cda:	d014      	beq.n	5d06 <_lv_style_list_remove_style+0x4a>
        if(list->style_list[i] == style) {
    5cdc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    5ce0:	428a      	cmp	r2, r1
    5ce2:	d1f9      	bne.n	5cd8 <_lv_style_list_remove_style+0x1c>
    5ce4:	460d      	mov	r5, r1
            break;
        }
    }
    if(found == false) return;

    if(list->style_cnt == 1) {
    5ce6:	2e01      	cmp	r6, #1
    5ce8:	d00e      	beq.n	5d08 <_lv_style_list_remove_style+0x4c>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt - 1));
    5cea:	1e71      	subs	r1, r6, #1
    5cec:	0089      	lsls	r1, r1, #2
    5cee:	4b18      	ldr	r3, [pc, #96]	; (5d50 <_lv_style_list_remove_style+0x94>)
    5cf0:	4798      	blx	r3
    5cf2:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
    5cf4:	4b17      	ldr	r3, [pc, #92]	; (5d54 <_lv_style_list_remove_style+0x98>)
    5cf6:	4798      	blx	r3
    5cf8:	b180      	cbz	r0, 5d1c <_lv_style_list_remove_style+0x60>
    if(new_classes == NULL) {
    5cfa:	b346      	cbz	r6, 5d4e <_lv_style_list_remove_style+0x92>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    5cfc:	7922      	ldrb	r2, [r4, #4]
    5cfe:	b312      	cbz	r2, 5d46 <_lv_style_list_remove_style+0x8a>
    5d00:	2100      	movs	r1, #0
    5d02:	460b      	mov	r3, r1
    5d04:	e015      	b.n	5d32 <_lv_style_list_remove_style+0x76>
    5d06:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(list->style_list);
    5d08:	4b13      	ldr	r3, [pc, #76]	; (5d58 <_lv_style_list_remove_style+0x9c>)
    5d0a:	4798      	blx	r3
        list->style_list = NULL;
    5d0c:	2300      	movs	r3, #0
    5d0e:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
    5d10:	7123      	strb	r3, [r4, #4]
        list->has_local = 0;
    5d12:	7962      	ldrb	r2, [r4, #5]
    5d14:	f363 0200 	bfi	r2, r3, #0, #1
    5d18:	7162      	strb	r2, [r4, #5]
        return;
    5d1a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
    5d1c:	4632      	mov	r2, r6
    5d1e:	2300      	movs	r3, #0
    5d20:	480e      	ldr	r0, [pc, #56]	; (5d5c <_lv_style_list_remove_style+0xa0>)
    5d22:	490f      	ldr	r1, [pc, #60]	; (5d60 <_lv_style_list_remove_style+0xa4>)
    5d24:	4788      	blx	r1
    5d26:	e7fe      	b.n	5d26 <_lv_style_list_remove_style+0x6a>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    5d28:	3301      	adds	r3, #1
    5d2a:	b2db      	uxtb	r3, r3
    5d2c:	7922      	ldrb	r2, [r4, #4]
    5d2e:	429a      	cmp	r2, r3
    5d30:	d909      	bls.n	5d46 <_lv_style_list_remove_style+0x8a>
        if(list->style_list[i] == style) continue;
    5d32:	6822      	ldr	r2, [r4, #0]
    5d34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5d38:	4295      	cmp	r5, r2
    5d3a:	d0f5      	beq.n	5d28 <_lv_style_list_remove_style+0x6c>
        new_classes[j] = list->style_list[i];
    5d3c:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
    5d40:	3101      	adds	r1, #1
    5d42:	b2c9      	uxtb	r1, r1
    5d44:	e7f0      	b.n	5d28 <_lv_style_list_remove_style+0x6c>

    }

    list->style_cnt--;
    5d46:	3a01      	subs	r2, #1
    5d48:	7122      	strb	r2, [r4, #4]
    list->style_list = new_classes;
    5d4a:	6026      	str	r6, [r4, #0]
    5d4c:	bd70      	pop	{r4, r5, r6, pc}
    5d4e:	bd70      	pop	{r4, r5, r6, pc}
    5d50:	000119ad 	.word	0x000119ad
    5d54:	0000291f 	.word	0x0000291f
    5d58:	000115fd 	.word	0x000115fd
    5d5c:	00017604 	.word	0x00017604
    5d60:	00002929 	.word	0x00002929

00005d64 <_lv_style_list_add_style>:
    if(list == NULL) return;
    5d64:	2800      	cmp	r0, #0
    5d66:	d03e      	beq.n	5de6 <_lv_style_list_add_style+0x82>
{
    5d68:	b570      	push	{r4, r5, r6, lr}
    5d6a:	4604      	mov	r4, r0
    5d6c:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
    5d6e:	4b1e      	ldr	r3, [pc, #120]	; (5de8 <_lv_style_list_add_style+0x84>)
    5d70:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
    5d72:	7923      	ldrb	r3, [r4, #4]
    5d74:	bb53      	cbnz	r3, 5dcc <_lv_style_list_add_style+0x68>
    5d76:	2004      	movs	r0, #4
    5d78:	4b1c      	ldr	r3, [pc, #112]	; (5dec <_lv_style_list_add_style+0x88>)
    5d7a:	4798      	blx	r3
    5d7c:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
    5d7e:	4628      	mov	r0, r5
    5d80:	4b1b      	ldr	r3, [pc, #108]	; (5df0 <_lv_style_list_add_style+0x8c>)
    5d82:	4798      	blx	r3
    5d84:	b348      	cbz	r0, 5dda <_lv_style_list_add_style+0x76>
    if(new_classes == NULL) {
    5d86:	b305      	cbz	r5, 5dca <_lv_style_list_add_style+0x66>
    if(list->has_trans) first_style++;
    5d88:	7963      	ldrb	r3, [r4, #5]
    uint8_t first_style = 0;
    5d8a:	f3c3 0040 	ubfx	r0, r3, #1, #1
    if(list->has_local) first_style++;
    5d8e:	f013 0f01 	tst.w	r3, #1
    5d92:	bf18      	it	ne
    5d94:	3001      	addne	r0, #1
    for(i = list->style_cnt; i > first_style; i--) {
    5d96:	7923      	ldrb	r3, [r4, #4]
    5d98:	4298      	cmp	r0, r3
    5d9a:	d210      	bcs.n	5dbe <_lv_style_list_add_style+0x5a>
    5d9c:	eb05 0183 	add.w	r1, r5, r3, lsl #2
    5da0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    5da4:	3a01      	subs	r2, #1
    5da6:	3b01      	subs	r3, #1
    5da8:	1a1b      	subs	r3, r3, r0
    5daa:	b2db      	uxtb	r3, r3
    5dac:	1ad3      	subs	r3, r2, r3
    5dae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
        new_classes[i] = new_classes[i - 1];
    5db2:	f851 2c04 	ldr.w	r2, [r1, #-4]
    5db6:	f841 2904 	str.w	r2, [r1], #-4
    for(i = list->style_cnt; i > first_style; i--) {
    5dba:	4299      	cmp	r1, r3
    5dbc:	d1f9      	bne.n	5db2 <_lv_style_list_add_style+0x4e>
    new_classes[first_style] = style;
    5dbe:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
    list->style_cnt++;
    5dc2:	7923      	ldrb	r3, [r4, #4]
    5dc4:	3301      	adds	r3, #1
    5dc6:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
    5dc8:	6025      	str	r5, [r4, #0]
    5dca:	bd70      	pop	{r4, r5, r6, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
    5dcc:	3301      	adds	r3, #1
    5dce:	0099      	lsls	r1, r3, #2
    5dd0:	6820      	ldr	r0, [r4, #0]
    5dd2:	4b08      	ldr	r3, [pc, #32]	; (5df4 <_lv_style_list_add_style+0x90>)
    5dd4:	4798      	blx	r3
    5dd6:	4605      	mov	r5, r0
    5dd8:	e7d1      	b.n	5d7e <_lv_style_list_add_style+0x1a>
    LV_ASSERT_MEM(new_classes);
    5dda:	462a      	mov	r2, r5
    5ddc:	2300      	movs	r3, #0
    5dde:	4806      	ldr	r0, [pc, #24]	; (5df8 <_lv_style_list_add_style+0x94>)
    5de0:	4906      	ldr	r1, [pc, #24]	; (5dfc <_lv_style_list_add_style+0x98>)
    5de2:	4788      	blx	r1
    5de4:	e7fe      	b.n	5de4 <_lv_style_list_add_style+0x80>
    5de6:	4770      	bx	lr
    5de8:	00005cbd 	.word	0x00005cbd
    5dec:	00011539 	.word	0x00011539
    5df0:	0000291f 	.word	0x0000291f
    5df4:	000119ad 	.word	0x000119ad
    5df8:	00017604 	.word	0x00017604
    5dfc:	00002929 	.word	0x00002929

00005e00 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
    5e00:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, 0);
    5e02:	7943      	ldrb	r3, [r0, #5]
    5e04:	f013 0f01 	tst.w	r3, #1
    5e08:	d00e      	beq.n	5e28 <get_alloc_local_style+0x28>
    if(list->has_trans && list->skip_trans) id++;
    5e0a:	f003 0306 	and.w	r3, r3, #6
    5e0e:	2b06      	cmp	r3, #6
    5e10:	bf14      	ite	ne
    5e12:	2300      	movne	r3, #0
    5e14:	2301      	moveq	r3, #1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    5e16:	7902      	ldrb	r2, [r0, #4]
    5e18:	b312      	cbz	r2, 5e60 <get_alloc_local_style+0x60>
    5e1a:	429a      	cmp	r2, r3
    5e1c:	d922      	bls.n	5e64 <get_alloc_local_style+0x64>
    return list->style_list[id];
    5e1e:	6802      	ldr	r2, [r0, #0]
    5e20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    /*Add the local style to the furst place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
    5e24:	4620      	mov	r0, r4
    5e26:	bd38      	pop	{r3, r4, r5, pc}
    5e28:	4605      	mov	r5, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
    5e2a:	2004      	movs	r0, #4
    5e2c:	4b0e      	ldr	r3, [pc, #56]	; (5e68 <get_alloc_local_style+0x68>)
    5e2e:	4798      	blx	r3
    5e30:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
    5e32:	4b0e      	ldr	r3, [pc, #56]	; (5e6c <get_alloc_local_style+0x6c>)
    5e34:	4798      	blx	r3
    5e36:	b168      	cbz	r0, 5e54 <get_alloc_local_style+0x54>
    if(local_style == NULL) {
    5e38:	2c00      	cmp	r4, #0
    5e3a:	d0f3      	beq.n	5e24 <get_alloc_local_style+0x24>
    lv_style_init(local_style);
    5e3c:	4620      	mov	r0, r4
    5e3e:	4b0c      	ldr	r3, [pc, #48]	; (5e70 <get_alloc_local_style+0x70>)
    5e40:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
    5e42:	4621      	mov	r1, r4
    5e44:	4628      	mov	r0, r5
    5e46:	4b0b      	ldr	r3, [pc, #44]	; (5e74 <get_alloc_local_style+0x74>)
    5e48:	4798      	blx	r3
    list->has_local = 1;
    5e4a:	796b      	ldrb	r3, [r5, #5]
    5e4c:	f043 0301 	orr.w	r3, r3, #1
    5e50:	716b      	strb	r3, [r5, #5]
    return local_style;
    5e52:	e7e7      	b.n	5e24 <get_alloc_local_style+0x24>
    LV_ASSERT_MEM(local_style);
    5e54:	4622      	mov	r2, r4
    5e56:	2300      	movs	r3, #0
    5e58:	4807      	ldr	r0, [pc, #28]	; (5e78 <get_alloc_local_style+0x78>)
    5e5a:	4908      	ldr	r1, [pc, #32]	; (5e7c <get_alloc_local_style+0x7c>)
    5e5c:	4788      	blx	r1
    5e5e:	e7fe      	b.n	5e5e <get_alloc_local_style+0x5e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    5e60:	2400      	movs	r4, #0
    5e62:	e7df      	b.n	5e24 <get_alloc_local_style+0x24>
    5e64:	2400      	movs	r4, #0
    5e66:	e7dd      	b.n	5e24 <get_alloc_local_style+0x24>
    5e68:	00011539 	.word	0x00011539
    5e6c:	0000291f 	.word	0x0000291f
    5e70:	00005c9d 	.word	0x00005c9d
    5e74:	00005d65 	.word	0x00005d65
    5e78:	00017604 	.word	0x00017604
    5e7c:	00002929 	.word	0x00002929

00005e80 <lv_style_reset>:
{
    5e80:	b510      	push	{r4, lr}
    5e82:	4604      	mov	r4, r0
    lv_mem_free(style->map);
    5e84:	6800      	ldr	r0, [r0, #0]
    5e86:	4b02      	ldr	r3, [pc, #8]	; (5e90 <lv_style_reset+0x10>)
    5e88:	4798      	blx	r3
    style->map = NULL;
    5e8a:	2300      	movs	r3, #0
    5e8c:	6023      	str	r3, [r4, #0]
    5e8e:	bd10      	pop	{r4, pc}
    5e90:	000115fd 	.word	0x000115fd

00005e94 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
    5e94:	6802      	ldr	r2, [r0, #0]
    5e96:	b1d2      	cbz	r2, 5ece <_lv_style_get_mem_size+0x3a>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5e98:	7813      	ldrb	r3, [r2, #0]
    5e9a:	2bff      	cmp	r3, #255	; 0xff
    5e9c:	d013      	beq.n	5ec6 <_lv_style_get_mem_size+0x32>
    5e9e:	2000      	movs	r0, #0
    5ea0:	e006      	b.n	5eb0 <_lv_style_get_mem_size+0x1c>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    5ea2:	2b0b      	cmp	r3, #11
    5ea4:	dc0a      	bgt.n	5ebc <_lv_style_get_mem_size+0x28>
    5ea6:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    5ea8:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5eaa:	5c13      	ldrb	r3, [r2, r0]
    5eac:	2bff      	cmp	r3, #255	; 0xff
    5eae:	d00b      	beq.n	5ec8 <_lv_style_get_mem_size+0x34>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5eb0:	f003 030f 	and.w	r3, r3, #15
    5eb4:	2b08      	cmp	r3, #8
    5eb6:	dcf4      	bgt.n	5ea2 <_lv_style_get_mem_size+0xe>
    5eb8:	3002      	adds	r0, #2
    5eba:	e7f5      	b.n	5ea8 <_lv_style_get_mem_size+0x14>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5ebc:	2b0d      	cmp	r3, #13
    5ebe:	bfd4      	ite	le
    5ec0:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    5ec2:	3004      	addgt	r0, #4
    5ec4:	e7f0      	b.n	5ea8 <_lv_style_get_mem_size+0x14>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5ec6:	2000      	movs	r0, #0
    return i + sizeof(lv_style_property_t);
    5ec8:	3002      	adds	r0, #2
    5eca:	b280      	uxth	r0, r0
    5ecc:	4770      	bx	lr
    if(style->map == NULL) return 0;
    5ece:	2000      	movs	r0, #0
}
    5ed0:	4770      	bx	lr
	...

00005ed4 <lv_style_copy>:
    if(style_src == NULL) return;
    5ed4:	b181      	cbz	r1, 5ef8 <lv_style_copy+0x24>
{
    5ed6:	b570      	push	{r4, r5, r6, lr}
    5ed8:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
    5eda:	680a      	ldr	r2, [r1, #0]
    5edc:	b15a      	cbz	r2, 5ef6 <lv_style_copy+0x22>
    5ede:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
    5ee0:	4608      	mov	r0, r1
    5ee2:	4b06      	ldr	r3, [pc, #24]	; (5efc <lv_style_copy+0x28>)
    5ee4:	4798      	blx	r3
    5ee6:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
    5ee8:	4b05      	ldr	r3, [pc, #20]	; (5f00 <lv_style_copy+0x2c>)
    5eea:	4798      	blx	r3
    5eec:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
    5eee:	4632      	mov	r2, r6
    5ef0:	6821      	ldr	r1, [r4, #0]
    5ef2:	4b04      	ldr	r3, [pc, #16]	; (5f04 <lv_style_copy+0x30>)
    5ef4:	4798      	blx	r3
    5ef6:	bd70      	pop	{r4, r5, r6, pc}
    5ef8:	4770      	bx	lr
    5efa:	bf00      	nop
    5efc:	00005e95 	.word	0x00005e95
    5f00:	00011539 	.word	0x00011539
    5f04:	00011769 	.word	0x00011769

00005f08 <lv_style_remove_prop>:
    if(style == NULL) return false;
    5f08:	2800      	cmp	r0, #0
    5f0a:	d06b      	beq.n	5fe4 <lv_style_remove_prop+0xdc>
{
    5f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f10:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    5f12:	6800      	ldr	r0, [r0, #0]
    5f14:	2800      	cmp	r0, #0
    5f16:	d06a      	beq.n	5fee <lv_style_remove_prop+0xe6>
    uint8_t id_to_find = prop & 0xFF;
    5f18:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    5f1a:	0a0e      	lsrs	r6, r1, #8
    5f1c:	46b4      	mov	ip, r6
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5f1e:	7803      	ldrb	r3, [r0, #0]
    5f20:	2bff      	cmp	r3, #255	; 0xff
    5f22:	d03b      	beq.n	5f9c <lv_style_remove_prop+0x94>
    5f24:	f04f 3eff 	mov.w	lr, #4294967295
    5f28:	46f0      	mov	r8, lr
    5f2a:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5f2c:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    5f30:	e027      	b.n	5f82 <lv_style_remove_prop+0x7a>
            attr_i.full = style->map[i + 1];
    5f32:	1884      	adds	r4, r0, r2
    5f34:	7864      	ldrb	r4, [r4, #1]
            if(attr_i.bits.state == attr.bits.state) {
    5f36:	ea86 0904 	eor.w	r9, r6, r4
    5f3a:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    5f3e:	d00b      	beq.n	5f58 <lv_style_remove_prop+0x50>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5f40:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    5f44:	ea34 090c 	bics.w	r9, r4, ip
    5f48:	d11d      	bne.n	5f86 <lv_style_remove_prop+0x7e>
                if(attr_i.bits.state > weight) {
    5f4a:	4544      	cmp	r4, r8
                    weight = attr_i.bits.state;
    5f4c:	bfc4      	itt	gt
    5f4e:	fa0f f884 	sxthgt.w	r8, r4
                    id_guess = i;
    5f52:	fa0f fe82 	sxthgt.w	lr, r2
    5f56:	e016      	b.n	5f86 <lv_style_remove_prop+0x7e>
                return i;
    5f58:	4696      	mov	lr, r2
    if(id >= 0) {
    5f5a:	f1be 0f00 	cmp.w	lr, #0
    5f5e:	db43      	blt.n	5fe8 <lv_style_remove_prop+0xe0>
        attr_found.full = *(style->map + id + 1);
    5f60:	4674      	mov	r4, lr
    5f62:	4470      	add	r0, lr
        if(attr_found.bits.state == attr_goal.bits.state) {
    5f64:	7843      	ldrb	r3, [r0, #1]
    5f66:	405e      	eors	r6, r3
    5f68:	f016 0f7f 	tst.w	r6, #127	; 0x7f
    5f6c:	d019      	beq.n	5fa2 <lv_style_remove_prop+0x9a>
    return false;
    5f6e:	2000      	movs	r0, #0
    5f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    5f74:	2b0b      	cmp	r3, #11
    5f76:	dc0c      	bgt.n	5f92 <lv_style_remove_prop+0x8a>
    5f78:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    5f7a:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5f7c:	5c83      	ldrb	r3, [r0, r2]
    5f7e:	2bff      	cmp	r3, #255	; 0xff
    5f80:	d0eb      	beq.n	5f5a <lv_style_remove_prop+0x52>
        if(style->map[i] == id_to_find) {
    5f82:	429d      	cmp	r5, r3
    5f84:	d0d5      	beq.n	5f32 <lv_style_remove_prop+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5f86:	f003 030f 	and.w	r3, r3, #15
    5f8a:	2b08      	cmp	r3, #8
    5f8c:	dcf2      	bgt.n	5f74 <lv_style_remove_prop+0x6c>
    5f8e:	3202      	adds	r2, #2
    5f90:	e7f3      	b.n	5f7a <lv_style_remove_prop+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5f92:	2b0d      	cmp	r3, #13
    5f94:	bfd4      	ite	le
    5f96:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    5f98:	3204      	addgt	r2, #4
    5f9a:	e7ee      	b.n	5f7a <lv_style_remove_prop+0x72>
    int16_t id_guess = -1;
    5f9c:	f04f 3eff 	mov.w	lr, #4294967295
    5fa0:	e7db      	b.n	5f5a <lv_style_remove_prop+0x52>
    5fa2:	460d      	mov	r5, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
    5fa4:	4638      	mov	r0, r7
    5fa6:	4b13      	ldr	r3, [pc, #76]	; (5ff4 <lv_style_remove_prop+0xec>)
    5fa8:	4798      	blx	r3
            if((prop & 0xF) < LV_STYLE_ID_COLOR) prop_size += sizeof(lv_style_int_t);
    5faa:	f005 010f 	and.w	r1, r5, #15
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    5fae:	290b      	cmp	r1, #11
    5fb0:	dd04      	ble.n	5fbc <lv_style_remove_prop+0xb4>
            else prop_size += sizeof(const void *);
    5fb2:	290e      	cmp	r1, #14
    5fb4:	bfb4      	ite	lt
    5fb6:	2103      	movlt	r1, #3
    5fb8:	2106      	movge	r1, #6
    5fba:	e000      	b.n	5fbe <lv_style_remove_prop+0xb6>
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    5fbc:	2104      	movs	r1, #4
            for(i = id; i < map_size - prop_size; i++) {
    5fbe:	460d      	mov	r5, r1
    5fc0:	1a41      	subs	r1, r0, r1
    5fc2:	428c      	cmp	r4, r1
    5fc4:	d207      	bcs.n	5fd6 <lv_style_remove_prop+0xce>
    5fc6:	4623      	mov	r3, r4
                style->map[i] = style->map[i + prop_size];
    5fc8:	683a      	ldr	r2, [r7, #0]
    5fca:	1954      	adds	r4, r2, r5
    5fcc:	5ce4      	ldrb	r4, [r4, r3]
    5fce:	54d4      	strb	r4, [r2, r3]
            for(i = id; i < map_size - prop_size; i++) {
    5fd0:	3301      	adds	r3, #1
    5fd2:	428b      	cmp	r3, r1
    5fd4:	d1f8      	bne.n	5fc8 <lv_style_remove_prop+0xc0>
            style->map = lv_mem_realloc(style->map, map_size - prop_size);
    5fd6:	6838      	ldr	r0, [r7, #0]
    5fd8:	4b07      	ldr	r3, [pc, #28]	; (5ff8 <lv_style_remove_prop+0xf0>)
    5fda:	4798      	blx	r3
    5fdc:	6038      	str	r0, [r7, #0]
            return true;
    5fde:	2001      	movs	r0, #1
    5fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return false;
    5fe4:	2000      	movs	r0, #0
    5fe6:	4770      	bx	lr
    return false;
    5fe8:	2000      	movs	r0, #0
    5fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fee:	2000      	movs	r0, #0
}
    5ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ff4:	00005e95 	.word	0x00005e95
    5ff8:	000119ad 	.word	0x000119ad

00005ffc <_lv_style_set_int>:
{
    5ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6000:	b084      	sub	sp, #16
    6002:	f8ad 1006 	strh.w	r1, [sp, #6]
    6006:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
    600a:	6804      	ldr	r4, [r0, #0]
    600c:	2c00      	cmp	r4, #0
    600e:	d048      	beq.n	60a2 <_lv_style_set_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6010:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6012:	0a0d      	lsrs	r5, r1, #8
    6014:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6016:	7823      	ldrb	r3, [r4, #0]
    6018:	2bff      	cmp	r3, #255	; 0xff
    601a:	d02c      	beq.n	6076 <_lv_style_set_int+0x7a>
    601c:	f04f 31ff 	mov.w	r1, #4294967295
    6020:	4688      	mov	r8, r1
    6022:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6024:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6028:	e018      	b.n	605c <_lv_style_set_int+0x60>
            attr_i.full = style->map[i + 1];
    602a:	18a6      	adds	r6, r4, r2
    602c:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    602e:	ea85 0c06 	eor.w	ip, r5, r6
    6032:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    6036:	d021      	beq.n	607c <_lv_style_set_int+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6038:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    603c:	ea36 0c0e 	bics.w	ip, r6, lr
    6040:	d10e      	bne.n	6060 <_lv_style_set_int+0x64>
                if(attr_i.bits.state > weight) {
    6042:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6044:	bfc4      	itt	gt
    6046:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    604a:	b211      	sxthgt	r1, r2
    604c:	e008      	b.n	6060 <_lv_style_set_int+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    604e:	2b0b      	cmp	r3, #11
    6050:	dc0c      	bgt.n	606c <_lv_style_set_int+0x70>
    6052:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6054:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6056:	5ca3      	ldrb	r3, [r4, r2]
    6058:	2bff      	cmp	r3, #255	; 0xff
    605a:	d00e      	beq.n	607a <_lv_style_set_int+0x7e>
        if(style->map[i] == id_to_find) {
    605c:	429f      	cmp	r7, r3
    605e:	d0e4      	beq.n	602a <_lv_style_set_int+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6060:	f003 030f 	and.w	r3, r3, #15
    6064:	2b08      	cmp	r3, #8
    6066:	dcf2      	bgt.n	604e <_lv_style_set_int+0x52>
    6068:	3202      	adds	r2, #2
    606a:	e7f3      	b.n	6054 <_lv_style_set_int+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    606c:	2b0d      	cmp	r3, #13
    606e:	bfd4      	ite	le
    6070:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6072:	3204      	addgt	r2, #4
    6074:	e7ee      	b.n	6054 <_lv_style_set_int+0x58>
    int16_t id_guess = -1;
    6076:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    607a:	460a      	mov	r2, r1
    if(id >= 0) {
    607c:	2a00      	cmp	r2, #0
    607e:	db10      	blt.n	60a2 <_lv_style_set_int+0xa6>
        attr_found.full = *(style->map + id + 1);
    6080:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    6082:	785b      	ldrb	r3, [r3, #1]
    6084:	405d      	eors	r5, r3
    6086:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    608a:	d10a      	bne.n	60a2 <_lv_style_set_int+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
    608c:	3202      	adds	r2, #2
    608e:	18a3      	adds	r3, r4, r2
        *d8 = *s8;
    6090:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6094:	54a1      	strb	r1, [r4, r2]
    6096:	f89d 2005 	ldrb.w	r2, [sp, #5]
    609a:	705a      	strb	r2, [r3, #1]
}
    609c:	b004      	add	sp, #16
    609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60a2:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    60a4:	23ff      	movs	r3, #255	; 0xff
    60a6:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    60aa:	4b19      	ldr	r3, [pc, #100]	; (6110 <_lv_style_set_int+0x114>)
    60ac:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    60ae:	2800      	cmp	r0, #0
    60b0:	bf08      	it	eq
    60b2:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
    60b4:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    60b6:	b2ad      	uxth	r5, r5
    60b8:	4629      	mov	r1, r5
    60ba:	4620      	mov	r0, r4
    60bc:	4b15      	ldr	r3, [pc, #84]	; (6114 <_lv_style_set_int+0x118>)
    60be:	4798      	blx	r3
    60c0:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    60c2:	4b15      	ldr	r3, [pc, #84]	; (6118 <_lv_style_set_int+0x11c>)
    60c4:	4798      	blx	r3
    60c6:	b1e8      	cbz	r0, 6104 <_lv_style_set_int+0x108>
    if(style == NULL) return;
    60c8:	2e00      	cmp	r6, #0
    60ca:	d0e7      	beq.n	609c <_lv_style_set_int+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    60cc:	1fab      	subs	r3, r5, #6
    60ce:	6832      	ldr	r2, [r6, #0]
    60d0:	18d1      	adds	r1, r2, r3
    60d2:	f89d 0006 	ldrb.w	r0, [sp, #6]
    60d6:	54d0      	strb	r0, [r2, r3]
    60d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60dc:	704b      	strb	r3, [r1, #1]
    60de:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
    60e0:	6832      	ldr	r2, [r6, #0]
    60e2:	18d1      	adds	r1, r2, r3
    60e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    60e8:	54d0      	strb	r0, [r2, r3]
    60ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    60ee:	704b      	strb	r3, [r1, #1]
    60f0:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    60f2:	6833      	ldr	r3, [r6, #0]
    60f4:	195a      	adds	r2, r3, r5
    60f6:	f89d 100e 	ldrb.w	r1, [sp, #14]
    60fa:	5559      	strb	r1, [r3, r5]
    60fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6100:	7053      	strb	r3, [r2, #1]
    6102:	e7cb      	b.n	609c <_lv_style_set_int+0xa0>
    LV_ASSERT_MEM(style->map);
    6104:	6832      	ldr	r2, [r6, #0]
    6106:	2300      	movs	r3, #0
    6108:	4804      	ldr	r0, [pc, #16]	; (611c <_lv_style_set_int+0x120>)
    610a:	4905      	ldr	r1, [pc, #20]	; (6120 <_lv_style_set_int+0x124>)
    610c:	4788      	blx	r1
    610e:	e7fe      	b.n	610e <_lv_style_set_int+0x112>
    6110:	00005e95 	.word	0x00005e95
    6114:	000119ad 	.word	0x000119ad
    6118:	0000291f 	.word	0x0000291f
    611c:	00017604 	.word	0x00017604
    6120:	00002929 	.word	0x00002929

00006124 <_lv_style_set_color>:
{
    6124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6128:	b084      	sub	sp, #16
    612a:	f8ad 2004 	strh.w	r2, [sp, #4]
    612e:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
    6132:	6804      	ldr	r4, [r0, #0]
    6134:	2c00      	cmp	r4, #0
    6136:	d048      	beq.n	61ca <_lv_style_set_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6138:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    613a:	0a0d      	lsrs	r5, r1, #8
    613c:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    613e:	7823      	ldrb	r3, [r4, #0]
    6140:	2bff      	cmp	r3, #255	; 0xff
    6142:	d02c      	beq.n	619e <_lv_style_set_color+0x7a>
    6144:	f04f 31ff 	mov.w	r1, #4294967295
    6148:	4688      	mov	r8, r1
    614a:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    614c:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6150:	e018      	b.n	6184 <_lv_style_set_color+0x60>
            attr_i.full = style->map[i + 1];
    6152:	18a6      	adds	r6, r4, r2
    6154:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6156:	ea85 0c06 	eor.w	ip, r5, r6
    615a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    615e:	d021      	beq.n	61a4 <_lv_style_set_color+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6160:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6164:	ea36 0c0e 	bics.w	ip, r6, lr
    6168:	d10e      	bne.n	6188 <_lv_style_set_color+0x64>
                if(attr_i.bits.state > weight) {
    616a:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    616c:	bfc4      	itt	gt
    616e:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6172:	b211      	sxthgt	r1, r2
    6174:	e008      	b.n	6188 <_lv_style_set_color+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6176:	2b0b      	cmp	r3, #11
    6178:	dc0c      	bgt.n	6194 <_lv_style_set_color+0x70>
    617a:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    617c:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    617e:	5ca3      	ldrb	r3, [r4, r2]
    6180:	2bff      	cmp	r3, #255	; 0xff
    6182:	d00e      	beq.n	61a2 <_lv_style_set_color+0x7e>
        if(style->map[i] == id_to_find) {
    6184:	429f      	cmp	r7, r3
    6186:	d0e4      	beq.n	6152 <_lv_style_set_color+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6188:	f003 030f 	and.w	r3, r3, #15
    618c:	2b08      	cmp	r3, #8
    618e:	dcf2      	bgt.n	6176 <_lv_style_set_color+0x52>
    6190:	3202      	adds	r2, #2
    6192:	e7f3      	b.n	617c <_lv_style_set_color+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6194:	2b0d      	cmp	r3, #13
    6196:	bfd4      	ite	le
    6198:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    619a:	3204      	addgt	r2, #4
    619c:	e7ee      	b.n	617c <_lv_style_set_color+0x58>
    int16_t id_guess = -1;
    619e:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    61a2:	460a      	mov	r2, r1
    if(id >= 0) {
    61a4:	2a00      	cmp	r2, #0
    61a6:	db10      	blt.n	61ca <_lv_style_set_color+0xa6>
        attr_found.full = *(style->map + id + 1);
    61a8:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    61aa:	785b      	ldrb	r3, [r3, #1]
    61ac:	405d      	eors	r5, r3
    61ae:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    61b2:	d10a      	bne.n	61ca <_lv_style_set_color+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
    61b4:	3202      	adds	r2, #2
    61b6:	18a3      	adds	r3, r4, r2
    61b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61bc:	54a1      	strb	r1, [r4, r2]
    61be:	f89d 2005 	ldrb.w	r2, [sp, #5]
    61c2:	705a      	strb	r2, [r3, #1]
}
    61c4:	b004      	add	sp, #16
    61c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61ca:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    61cc:	23ff      	movs	r3, #255	; 0xff
    61ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    61d2:	4b19      	ldr	r3, [pc, #100]	; (6238 <_lv_style_set_color+0x114>)
    61d4:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    61d6:	2800      	cmp	r0, #0
    61d8:	bf08      	it	eq
    61da:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
    61dc:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    61de:	b2ad      	uxth	r5, r5
    61e0:	4629      	mov	r1, r5
    61e2:	4620      	mov	r0, r4
    61e4:	4b15      	ldr	r3, [pc, #84]	; (623c <_lv_style_set_color+0x118>)
    61e6:	4798      	blx	r3
    61e8:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    61ea:	4b15      	ldr	r3, [pc, #84]	; (6240 <_lv_style_set_color+0x11c>)
    61ec:	4798      	blx	r3
    61ee:	b1e8      	cbz	r0, 622c <_lv_style_set_color+0x108>
    if(style == NULL) return;
    61f0:	2e00      	cmp	r6, #0
    61f2:	d0e7      	beq.n	61c4 <_lv_style_set_color+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    61f4:	1fab      	subs	r3, r5, #6
    61f6:	6832      	ldr	r2, [r6, #0]
    61f8:	18d1      	adds	r1, r2, r3
    61fa:	f89d 0006 	ldrb.w	r0, [sp, #6]
    61fe:	54d0      	strb	r0, [r2, r3]
    6200:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6204:	704b      	strb	r3, [r1, #1]
    6206:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
    6208:	6832      	ldr	r2, [r6, #0]
    620a:	18d1      	adds	r1, r2, r3
    620c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6210:	54d0      	strb	r0, [r2, r3]
    6212:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6216:	704b      	strb	r3, [r1, #1]
    6218:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    621a:	6833      	ldr	r3, [r6, #0]
    621c:	195a      	adds	r2, r3, r5
    621e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6222:	5559      	strb	r1, [r3, r5]
    6224:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6228:	7053      	strb	r3, [r2, #1]
    622a:	e7cb      	b.n	61c4 <_lv_style_set_color+0xa0>
    LV_ASSERT_MEM(style->map);
    622c:	6832      	ldr	r2, [r6, #0]
    622e:	2300      	movs	r3, #0
    6230:	4804      	ldr	r0, [pc, #16]	; (6244 <_lv_style_set_color+0x120>)
    6232:	4905      	ldr	r1, [pc, #20]	; (6248 <_lv_style_set_color+0x124>)
    6234:	4788      	blx	r1
    6236:	e7fe      	b.n	6236 <_lv_style_set_color+0x112>
    6238:	00005e95 	.word	0x00005e95
    623c:	000119ad 	.word	0x000119ad
    6240:	0000291f 	.word	0x0000291f
    6244:	00017604 	.word	0x00017604
    6248:	00002929 	.word	0x00002929

0000624c <_lv_style_set_opa>:
{
    624c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6250:	b085      	sub	sp, #20
    6252:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
    6256:	6804      	ldr	r4, [r0, #0]
    6258:	2c00      	cmp	r4, #0
    625a:	d043      	beq.n	62e4 <_lv_style_set_opa+0x98>
    uint8_t id_to_find = prop & 0xFF;
    625c:	fa5f fe81 	uxtb.w	lr, r1
    attr.full = (prop >> 8) & 0xFF;
    6260:	0a0d      	lsrs	r5, r1, #8
    6262:	46ac      	mov	ip, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6264:	7823      	ldrb	r3, [r4, #0]
    6266:	2bff      	cmp	r3, #255	; 0xff
    6268:	d02c      	beq.n	62c4 <_lv_style_set_opa+0x78>
    626a:	f04f 37ff 	mov.w	r7, #4294967295
    626e:	46b8      	mov	r8, r7
    6270:	2100      	movs	r1, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6272:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    6276:	e018      	b.n	62aa <_lv_style_set_opa+0x5e>
            attr_i.full = style->map[i + 1];
    6278:	1866      	adds	r6, r4, r1
    627a:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    627c:	ea85 0906 	eor.w	r9, r5, r6
    6280:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6284:	d021      	beq.n	62ca <_lv_style_set_opa+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6286:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    628a:	ea36 090c 	bics.w	r9, r6, ip
    628e:	d10e      	bne.n	62ae <_lv_style_set_opa+0x62>
                if(attr_i.bits.state > weight) {
    6290:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6292:	bfc4      	itt	gt
    6294:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6298:	b20f      	sxthgt	r7, r1
    629a:	e008      	b.n	62ae <_lv_style_set_opa+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    629c:	2b0b      	cmp	r3, #11
    629e:	dc0c      	bgt.n	62ba <_lv_style_set_opa+0x6e>
    62a0:	3102      	adds	r1, #2
        i += sizeof(lv_style_property_t);
    62a2:	3102      	adds	r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    62a4:	5c63      	ldrb	r3, [r4, r1]
    62a6:	2bff      	cmp	r3, #255	; 0xff
    62a8:	d00e      	beq.n	62c8 <_lv_style_set_opa+0x7c>
        if(style->map[i] == id_to_find) {
    62aa:	459e      	cmp	lr, r3
    62ac:	d0e4      	beq.n	6278 <_lv_style_set_opa+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    62ae:	f003 030f 	and.w	r3, r3, #15
    62b2:	2b08      	cmp	r3, #8
    62b4:	dcf2      	bgt.n	629c <_lv_style_set_opa+0x50>
    62b6:	3102      	adds	r1, #2
    62b8:	e7f3      	b.n	62a2 <_lv_style_set_opa+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    62ba:	2b0d      	cmp	r3, #13
    62bc:	bfd4      	ite	le
    62be:	3101      	addle	r1, #1
        else i += sizeof(const void *);
    62c0:	3104      	addgt	r1, #4
    62c2:	e7ee      	b.n	62a2 <_lv_style_set_opa+0x56>
    int16_t id_guess = -1;
    62c4:	f04f 37ff 	mov.w	r7, #4294967295
    return id_guess;
    62c8:	4639      	mov	r1, r7
    if(id >= 0) {
    62ca:	2900      	cmp	r1, #0
    62cc:	db0a      	blt.n	62e4 <_lv_style_set_opa+0x98>
        attr_found.full = *(style->map + id + 1);
    62ce:	1863      	adds	r3, r4, r1
        if(attr_found.bits.state == attr_goal.bits.state) {
    62d0:	785b      	ldrb	r3, [r3, #1]
    62d2:	405d      	eors	r5, r3
    62d4:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    62d8:	d104      	bne.n	62e4 <_lv_style_set_opa+0x98>
    62da:	4421      	add	r1, r4
    62dc:	708a      	strb	r2, [r1, #2]
}
    62de:	b005      	add	sp, #20
    62e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    62e4:	4617      	mov	r7, r2
    62e6:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    62e8:	23ff      	movs	r3, #255	; 0xff
    62ea:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    62ee:	4b17      	ldr	r3, [pc, #92]	; (634c <_lv_style_set_opa+0x100>)
    62f0:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    62f2:	2800      	cmp	r0, #0
    62f4:	bf08      	it	eq
    62f6:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
    62f8:	1cc5      	adds	r5, r0, #3
    style->map = lv_mem_realloc(style->map, size);
    62fa:	b2ad      	uxth	r5, r5
    62fc:	4629      	mov	r1, r5
    62fe:	4620      	mov	r0, r4
    6300:	4b13      	ldr	r3, [pc, #76]	; (6350 <_lv_style_set_opa+0x104>)
    6302:	4798      	blx	r3
    6304:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6306:	4b13      	ldr	r3, [pc, #76]	; (6354 <_lv_style_set_opa+0x108>)
    6308:	4798      	blx	r3
    630a:	b1c0      	cbz	r0, 633e <_lv_style_set_opa+0xf2>
    if(style == NULL) return;
    630c:	2e00      	cmp	r6, #0
    630e:	d0e6      	beq.n	62de <_lv_style_set_opa+0x92>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6310:	1f6b      	subs	r3, r5, #5
    6312:	6832      	ldr	r2, [r6, #0]
    6314:	18d1      	adds	r1, r2, r3
    6316:	f89d 0006 	ldrb.w	r0, [sp, #6]
    631a:	54d0      	strb	r0, [r2, r3]
    631c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6320:	704b      	strb	r3, [r1, #1]
    6322:	6833      	ldr	r3, [r6, #0]
    6324:	442b      	add	r3, r5
    6326:	f803 7c03 	strb.w	r7, [r3, #-3]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
    632a:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    632c:	6833      	ldr	r3, [r6, #0]
    632e:	195a      	adds	r2, r3, r5
    6330:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6334:	5559      	strb	r1, [r3, r5]
    6336:	f89d 300f 	ldrb.w	r3, [sp, #15]
    633a:	7053      	strb	r3, [r2, #1]
    633c:	e7cf      	b.n	62de <_lv_style_set_opa+0x92>
    LV_ASSERT_MEM(style->map);
    633e:	6832      	ldr	r2, [r6, #0]
    6340:	2300      	movs	r3, #0
    6342:	4805      	ldr	r0, [pc, #20]	; (6358 <_lv_style_set_opa+0x10c>)
    6344:	4905      	ldr	r1, [pc, #20]	; (635c <_lv_style_set_opa+0x110>)
    6346:	4788      	blx	r1
    6348:	e7fe      	b.n	6348 <_lv_style_set_opa+0xfc>
    634a:	bf00      	nop
    634c:	00005e95 	.word	0x00005e95
    6350:	000119ad 	.word	0x000119ad
    6354:	0000291f 	.word	0x0000291f
    6358:	00017604 	.word	0x00017604
    635c:	00002929 	.word	0x00002929

00006360 <_lv_style_set_ptr>:
{
    6360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6364:	b084      	sub	sp, #16
    6366:	9200      	str	r2, [sp, #0]
    6368:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
    636c:	6804      	ldr	r4, [r0, #0]
    636e:	2c00      	cmp	r4, #0
    6370:	d04e      	beq.n	6410 <_lv_style_set_ptr+0xb0>
    uint8_t id_to_find = prop & 0xFF;
    6372:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6374:	0a0d      	lsrs	r5, r1, #8
    6376:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6378:	7823      	ldrb	r3, [r4, #0]
    637a:	2bff      	cmp	r3, #255	; 0xff
    637c:	d02c      	beq.n	63d8 <_lv_style_set_ptr+0x78>
    637e:	f04f 31ff 	mov.w	r1, #4294967295
    6382:	4688      	mov	r8, r1
    6384:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6386:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    638a:	e018      	b.n	63be <_lv_style_set_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    638c:	18a6      	adds	r6, r4, r2
    638e:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6390:	ea85 0c06 	eor.w	ip, r5, r6
    6394:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    6398:	d021      	beq.n	63de <_lv_style_set_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    639a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    639e:	ea36 0c0e 	bics.w	ip, r6, lr
    63a2:	d10e      	bne.n	63c2 <_lv_style_set_ptr+0x62>
                if(attr_i.bits.state > weight) {
    63a4:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    63a6:	bfc4      	itt	gt
    63a8:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    63ac:	b211      	sxthgt	r1, r2
    63ae:	e008      	b.n	63c2 <_lv_style_set_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    63b0:	2b0b      	cmp	r3, #11
    63b2:	dc0c      	bgt.n	63ce <_lv_style_set_ptr+0x6e>
    63b4:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    63b6:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    63b8:	5ca3      	ldrb	r3, [r4, r2]
    63ba:	2bff      	cmp	r3, #255	; 0xff
    63bc:	d00e      	beq.n	63dc <_lv_style_set_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    63be:	429f      	cmp	r7, r3
    63c0:	d0e4      	beq.n	638c <_lv_style_set_ptr+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    63c2:	f003 030f 	and.w	r3, r3, #15
    63c6:	2b08      	cmp	r3, #8
    63c8:	dcf2      	bgt.n	63b0 <_lv_style_set_ptr+0x50>
    63ca:	3202      	adds	r2, #2
    63cc:	e7f3      	b.n	63b6 <_lv_style_set_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    63ce:	2b0d      	cmp	r3, #13
    63d0:	bfd4      	ite	le
    63d2:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    63d4:	3204      	addgt	r2, #4
    63d6:	e7ee      	b.n	63b6 <_lv_style_set_ptr+0x56>
    int16_t id_guess = -1;
    63d8:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    63dc:	460a      	mov	r2, r1
    if(id >= 0) {
    63de:	2a00      	cmp	r2, #0
    63e0:	db16      	blt.n	6410 <_lv_style_set_ptr+0xb0>
        attr_found.full = *(style->map + id + 1);
    63e2:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    63e4:	785b      	ldrb	r3, [r3, #1]
    63e6:	405d      	eors	r5, r3
    63e8:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    63ec:	d110      	bne.n	6410 <_lv_style_set_ptr+0xb0>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
    63ee:	3202      	adds	r2, #2
    63f0:	18a3      	adds	r3, r4, r2
    63f2:	f89d 1000 	ldrb.w	r1, [sp]
    63f6:	54a1      	strb	r1, [r4, r2]
    63f8:	f89d 2001 	ldrb.w	r2, [sp, #1]
    63fc:	705a      	strb	r2, [r3, #1]
    63fe:	f89d 2002 	ldrb.w	r2, [sp, #2]
    6402:	709a      	strb	r2, [r3, #2]
    6404:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6408:	70da      	strb	r2, [r3, #3]
}
    640a:	b004      	add	sp, #16
    640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6410:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6412:	23ff      	movs	r3, #255	; 0xff
    6414:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
    6418:	4b1c      	ldr	r3, [pc, #112]	; (648c <_lv_style_set_ptr+0x12c>)
    641a:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    641c:	2800      	cmp	r0, #0
    641e:	bf08      	it	eq
    6420:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
    6422:	1d85      	adds	r5, r0, #6
    style->map = lv_mem_realloc(style->map, size);
    6424:	b2ad      	uxth	r5, r5
    6426:	4629      	mov	r1, r5
    6428:	4620      	mov	r0, r4
    642a:	4b19      	ldr	r3, [pc, #100]	; (6490 <_lv_style_set_ptr+0x130>)
    642c:	4798      	blx	r3
    642e:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6430:	4b18      	ldr	r3, [pc, #96]	; (6494 <_lv_style_set_ptr+0x134>)
    6432:	4798      	blx	r3
    6434:	b320      	cbz	r0, 6480 <_lv_style_set_ptr+0x120>
    if(style == NULL) return;
    6436:	2e00      	cmp	r6, #0
    6438:	d0e7      	beq.n	640a <_lv_style_set_ptr+0xaa>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    643a:	f1a5 0308 	sub.w	r3, r5, #8
    643e:	6832      	ldr	r2, [r6, #0]
    6440:	18d1      	adds	r1, r2, r3
    6442:	f89d 0006 	ldrb.w	r0, [sp, #6]
    6446:	54d0      	strb	r0, [r2, r3]
    6448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    644c:	704b      	strb	r3, [r1, #1]
    644e:	1faa      	subs	r2, r5, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
    6450:	6831      	ldr	r1, [r6, #0]
    6452:	188b      	adds	r3, r1, r2
    6454:	f89d 0000 	ldrb.w	r0, [sp]
    6458:	5488      	strb	r0, [r1, r2]
    645a:	f89d 2001 	ldrb.w	r2, [sp, #1]
    645e:	705a      	strb	r2, [r3, #1]
    6460:	f89d 2002 	ldrb.w	r2, [sp, #2]
    6464:	709a      	strb	r2, [r3, #2]
    6466:	f89d 2003 	ldrb.w	r2, [sp, #3]
    646a:	70da      	strb	r2, [r3, #3]
    646c:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    646e:	6833      	ldr	r3, [r6, #0]
    6470:	195a      	adds	r2, r3, r5
    6472:	f89d 100e 	ldrb.w	r1, [sp, #14]
    6476:	5559      	strb	r1, [r3, r5]
    6478:	f89d 300f 	ldrb.w	r3, [sp, #15]
    647c:	7053      	strb	r3, [r2, #1]
    647e:	e7c4      	b.n	640a <_lv_style_set_ptr+0xaa>
    LV_ASSERT_MEM(style->map);
    6480:	6832      	ldr	r2, [r6, #0]
    6482:	2300      	movs	r3, #0
    6484:	4804      	ldr	r0, [pc, #16]	; (6498 <_lv_style_set_ptr+0x138>)
    6486:	4905      	ldr	r1, [pc, #20]	; (649c <_lv_style_set_ptr+0x13c>)
    6488:	4788      	blx	r1
    648a:	e7fe      	b.n	648a <_lv_style_set_ptr+0x12a>
    648c:	00005e95 	.word	0x00005e95
    6490:	000119ad 	.word	0x000119ad
    6494:	0000291f 	.word	0x0000291f
    6498:	00017604 	.word	0x00017604
    649c:	00002929 	.word	0x00002929

000064a0 <_lv_style_get_int>:
    if(style == NULL) return -1;
    64a0:	2800      	cmp	r0, #0
    64a2:	d04d      	beq.n	6540 <_lv_style_get_int+0xa0>
{
    64a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    64a8:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    64aa:	6804      	ldr	r4, [r0, #0]
    64ac:	2c00      	cmp	r4, #0
    64ae:	d04a      	beq.n	6546 <_lv_style_get_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    64b0:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    64b2:	0a09      	lsrs	r1, r1, #8
    64b4:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    64b6:	7823      	ldrb	r3, [r4, #0]
    64b8:	2bff      	cmp	r3, #255	; 0xff
    64ba:	d03e      	beq.n	653a <_lv_style_get_int+0x9a>
    64bc:	f04f 37ff 	mov.w	r7, #4294967295
    64c0:	46b8      	mov	r8, r7
    64c2:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    64c4:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    64c8:	e02a      	b.n	6520 <_lv_style_get_int+0x80>
            attr_i.full = style->map[i + 1];
    64ca:	1825      	adds	r5, r4, r0
    64cc:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    64ce:	ea81 0905 	eor.w	r9, r1, r5
    64d2:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    64d6:	d00a      	beq.n	64ee <_lv_style_get_int+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    64d8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    64dc:	ea35 090e 	bics.w	r9, r5, lr
    64e0:	d120      	bne.n	6524 <_lv_style_get_int+0x84>
                if(attr_i.bits.state > weight) {
    64e2:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    64e4:	bfc4      	itt	gt
    64e6:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    64ea:	b207      	sxthgt	r7, r0
    64ec:	e01a      	b.n	6524 <_lv_style_get_int+0x84>
                return i;
    64ee:	4607      	mov	r7, r0
    if(id < 0) {
    64f0:	2f00      	cmp	r7, #0
    64f2:	db2c      	blt.n	654e <_lv_style_get_int+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
    64f4:	1cbb      	adds	r3, r7, #2
    64f6:	18e0      	adds	r0, r4, r3
    64f8:	5ce3      	ldrb	r3, [r4, r3]
    64fa:	7013      	strb	r3, [r2, #0]
    64fc:	7843      	ldrb	r3, [r0, #1]
    64fe:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    6500:	f8dc 0000 	ldr.w	r0, [ip]
    6504:	4407      	add	r7, r0
    6506:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6508:	f3c1 0106 	ubfx	r1, r1, #0, #7
    650c:	4008      	ands	r0, r1
    650e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6512:	2b0b      	cmp	r3, #11
    6514:	dc0c      	bgt.n	6530 <_lv_style_get_int+0x90>
    6516:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6518:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    651a:	5c23      	ldrb	r3, [r4, r0]
    651c:	2bff      	cmp	r3, #255	; 0xff
    651e:	d0e7      	beq.n	64f0 <_lv_style_get_int+0x50>
        if(style->map[i] == id_to_find) {
    6520:	429e      	cmp	r6, r3
    6522:	d0d2      	beq.n	64ca <_lv_style_get_int+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6524:	f003 030f 	and.w	r3, r3, #15
    6528:	2b08      	cmp	r3, #8
    652a:	dcf2      	bgt.n	6512 <_lv_style_get_int+0x72>
    652c:	3002      	adds	r0, #2
    652e:	e7f3      	b.n	6518 <_lv_style_get_int+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6530:	2b0d      	cmp	r3, #13
    6532:	bfd4      	ite	le
    6534:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6536:	3004      	addgt	r0, #4
    6538:	e7ee      	b.n	6518 <_lv_style_get_int+0x78>
    int16_t id_guess = -1;
    653a:	f04f 37ff 	mov.w	r7, #4294967295
    653e:	e7d7      	b.n	64f0 <_lv_style_get_int+0x50>
    if(style == NULL) return -1;
    6540:	f04f 30ff 	mov.w	r0, #4294967295
    6544:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6546:	f04f 30ff 	mov.w	r0, #4294967295
    654a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    654e:	f04f 30ff 	mov.w	r0, #4294967295
}
    6552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006556 <_lv_style_get_opa>:
    if(style == NULL) return -1;
    6556:	2800      	cmp	r0, #0
    6558:	d04a      	beq.n	65f0 <_lv_style_get_opa+0x9a>
{
    655a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    655e:	4686      	mov	lr, r0
    if(style->map == NULL) return -1;
    6560:	6804      	ldr	r4, [r0, #0]
    6562:	2c00      	cmp	r4, #0
    6564:	d047      	beq.n	65f6 <_lv_style_get_opa+0xa0>
    uint8_t id_to_find = prop & 0xFF;
    6566:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    6568:	0a09      	lsrs	r1, r1, #8
    656a:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    656c:	7823      	ldrb	r3, [r4, #0]
    656e:	2bff      	cmp	r3, #255	; 0xff
    6570:	d03b      	beq.n	65ea <_lv_style_get_opa+0x94>
    6572:	f04f 37ff 	mov.w	r7, #4294967295
    6576:	46b8      	mov	r8, r7
    6578:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    657a:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    657e:	e027      	b.n	65d0 <_lv_style_get_opa+0x7a>
            attr_i.full = style->map[i + 1];
    6580:	1825      	adds	r5, r4, r0
    6582:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6584:	ea81 0905 	eor.w	r9, r1, r5
    6588:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    658c:	d00a      	beq.n	65a4 <_lv_style_get_opa+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    658e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6592:	ea35 090c 	bics.w	r9, r5, ip
    6596:	d11d      	bne.n	65d4 <_lv_style_get_opa+0x7e>
                if(attr_i.bits.state > weight) {
    6598:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    659a:	bfc4      	itt	gt
    659c:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    65a0:	b207      	sxthgt	r7, r0
    65a2:	e017      	b.n	65d4 <_lv_style_get_opa+0x7e>
                return i;
    65a4:	4607      	mov	r7, r0
    if(id < 0) {
    65a6:	2f00      	cmp	r7, #0
    65a8:	db29      	blt.n	65fe <_lv_style_get_opa+0xa8>
    65aa:	443c      	add	r4, r7
    65ac:	78a3      	ldrb	r3, [r4, #2]
    65ae:	7013      	strb	r3, [r2, #0]
        attr_act.full = style->map[id + 1];
    65b0:	f8de 0000 	ldr.w	r0, [lr]
    65b4:	4407      	add	r7, r0
    65b6:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    65b8:	f3c1 0106 	ubfx	r1, r1, #0, #7
    65bc:	4008      	ands	r0, r1
    65be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    65c2:	2b0b      	cmp	r3, #11
    65c4:	dc0c      	bgt.n	65e0 <_lv_style_get_opa+0x8a>
    65c6:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    65c8:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    65ca:	5c23      	ldrb	r3, [r4, r0]
    65cc:	2bff      	cmp	r3, #255	; 0xff
    65ce:	d0ea      	beq.n	65a6 <_lv_style_get_opa+0x50>
        if(style->map[i] == id_to_find) {
    65d0:	429e      	cmp	r6, r3
    65d2:	d0d5      	beq.n	6580 <_lv_style_get_opa+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    65d4:	f003 030f 	and.w	r3, r3, #15
    65d8:	2b08      	cmp	r3, #8
    65da:	dcf2      	bgt.n	65c2 <_lv_style_get_opa+0x6c>
    65dc:	3002      	adds	r0, #2
    65de:	e7f3      	b.n	65c8 <_lv_style_get_opa+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    65e0:	2b0d      	cmp	r3, #13
    65e2:	bfd4      	ite	le
    65e4:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    65e6:	3004      	addgt	r0, #4
    65e8:	e7ee      	b.n	65c8 <_lv_style_get_opa+0x72>
    int16_t id_guess = -1;
    65ea:	f04f 37ff 	mov.w	r7, #4294967295
    65ee:	e7da      	b.n	65a6 <_lv_style_get_opa+0x50>
    if(style == NULL) return -1;
    65f0:	f04f 30ff 	mov.w	r0, #4294967295
    65f4:	4770      	bx	lr
    if(style->map == NULL) return -1;
    65f6:	f04f 30ff 	mov.w	r0, #4294967295
    65fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    65fe:	f04f 30ff 	mov.w	r0, #4294967295
}
    6602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006606 <_lv_style_get_color>:
    if(style == NULL) return -1;
    6606:	2800      	cmp	r0, #0
    6608:	d04d      	beq.n	66a6 <_lv_style_get_color+0xa0>
{
    660a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    660e:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    6610:	6804      	ldr	r4, [r0, #0]
    6612:	2c00      	cmp	r4, #0
    6614:	d04a      	beq.n	66ac <_lv_style_get_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6616:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    6618:	0a09      	lsrs	r1, r1, #8
    661a:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    661c:	7823      	ldrb	r3, [r4, #0]
    661e:	2bff      	cmp	r3, #255	; 0xff
    6620:	d03e      	beq.n	66a0 <_lv_style_get_color+0x9a>
    6622:	f04f 37ff 	mov.w	r7, #4294967295
    6626:	46b8      	mov	r8, r7
    6628:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    662a:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    662e:	e02a      	b.n	6686 <_lv_style_get_color+0x80>
            attr_i.full = style->map[i + 1];
    6630:	1825      	adds	r5, r4, r0
    6632:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6634:	ea81 0905 	eor.w	r9, r1, r5
    6638:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    663c:	d00a      	beq.n	6654 <_lv_style_get_color+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    663e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    6642:	ea35 090e 	bics.w	r9, r5, lr
    6646:	d120      	bne.n	668a <_lv_style_get_color+0x84>
                if(attr_i.bits.state > weight) {
    6648:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    664a:	bfc4      	itt	gt
    664c:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6650:	b207      	sxthgt	r7, r0
    6652:	e01a      	b.n	668a <_lv_style_get_color+0x84>
                return i;
    6654:	4607      	mov	r7, r0
    if(id < 0) {
    6656:	2f00      	cmp	r7, #0
    6658:	db2c      	blt.n	66b4 <_lv_style_get_color+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
    665a:	1cbb      	adds	r3, r7, #2
    665c:	18e0      	adds	r0, r4, r3
    665e:	5ce3      	ldrb	r3, [r4, r3]
    6660:	7013      	strb	r3, [r2, #0]
    6662:	7843      	ldrb	r3, [r0, #1]
    6664:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    6666:	f8dc 0000 	ldr.w	r0, [ip]
    666a:	4407      	add	r7, r0
    666c:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    666e:	f3c1 0106 	ubfx	r1, r1, #0, #7
    6672:	4008      	ands	r0, r1
    6674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6678:	2b0b      	cmp	r3, #11
    667a:	dc0c      	bgt.n	6696 <_lv_style_get_color+0x90>
    667c:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    667e:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6680:	5c23      	ldrb	r3, [r4, r0]
    6682:	2bff      	cmp	r3, #255	; 0xff
    6684:	d0e7      	beq.n	6656 <_lv_style_get_color+0x50>
        if(style->map[i] == id_to_find) {
    6686:	429e      	cmp	r6, r3
    6688:	d0d2      	beq.n	6630 <_lv_style_get_color+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    668a:	f003 030f 	and.w	r3, r3, #15
    668e:	2b08      	cmp	r3, #8
    6690:	dcf2      	bgt.n	6678 <_lv_style_get_color+0x72>
    6692:	3002      	adds	r0, #2
    6694:	e7f3      	b.n	667e <_lv_style_get_color+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6696:	2b0d      	cmp	r3, #13
    6698:	bfd4      	ite	le
    669a:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    669c:	3004      	addgt	r0, #4
    669e:	e7ee      	b.n	667e <_lv_style_get_color+0x78>
    int16_t id_guess = -1;
    66a0:	f04f 37ff 	mov.w	r7, #4294967295
    66a4:	e7d7      	b.n	6656 <_lv_style_get_color+0x50>
    if(style == NULL) return -1;
    66a6:	f04f 30ff 	mov.w	r0, #4294967295
    66aa:	4770      	bx	lr
    if(style->map == NULL) return -1;
    66ac:	f04f 30ff 	mov.w	r0, #4294967295
    66b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    66b4:	f04f 30ff 	mov.w	r0, #4294967295
}
    66b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000066bc <_lv_style_get_ptr>:
    if(style == NULL) return -1;
    66bc:	2800      	cmp	r0, #0
    66be:	d050      	beq.n	6762 <_lv_style_get_ptr+0xa6>
{
    66c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    66c4:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    66c6:	6804      	ldr	r4, [r0, #0]
    66c8:	2c00      	cmp	r4, #0
    66ca:	d04d      	beq.n	6768 <_lv_style_get_ptr+0xac>
    uint8_t id_to_find = prop & 0xFF;
    66cc:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    66ce:	0a09      	lsrs	r1, r1, #8
    66d0:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    66d2:	7823      	ldrb	r3, [r4, #0]
    66d4:	2bff      	cmp	r3, #255	; 0xff
    66d6:	d02d      	beq.n	6734 <_lv_style_get_ptr+0x78>
    66d8:	f04f 3eff 	mov.w	lr, #4294967295
    66dc:	46f0      	mov	r8, lr
    66de:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    66e0:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    66e4:	e019      	b.n	671a <_lv_style_get_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    66e6:	1825      	adds	r5, r4, r0
    66e8:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    66ea:	ea81 0905 	eor.w	r9, r1, r5
    66ee:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    66f2:	d022      	beq.n	673a <_lv_style_get_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    66f4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    66f8:	ea35 090c 	bics.w	r9, r5, ip
    66fc:	d10f      	bne.n	671e <_lv_style_get_ptr+0x62>
                if(attr_i.bits.state > weight) {
    66fe:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    6700:	bfc4      	itt	gt
    6702:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    6706:	fa0f fe80 	sxthgt.w	lr, r0
    670a:	e008      	b.n	671e <_lv_style_get_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    670c:	2b0b      	cmp	r3, #11
    670e:	dc0c      	bgt.n	672a <_lv_style_get_ptr+0x6e>
    6710:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6712:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6714:	5c23      	ldrb	r3, [r4, r0]
    6716:	2bff      	cmp	r3, #255	; 0xff
    6718:	d00e      	beq.n	6738 <_lv_style_get_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    671a:	429e      	cmp	r6, r3
    671c:	d0e3      	beq.n	66e6 <_lv_style_get_ptr+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    671e:	f003 030f 	and.w	r3, r3, #15
    6722:	2b08      	cmp	r3, #8
    6724:	dcf2      	bgt.n	670c <_lv_style_get_ptr+0x50>
    6726:	3002      	adds	r0, #2
    6728:	e7f3      	b.n	6712 <_lv_style_get_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    672a:	2b0d      	cmp	r3, #13
    672c:	bfd4      	ite	le
    672e:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6730:	3004      	addgt	r0, #4
    6732:	e7ee      	b.n	6712 <_lv_style_get_ptr+0x56>
    int16_t id_guess = -1;
    6734:	f04f 3eff 	mov.w	lr, #4294967295
    return id_guess;
    6738:	4670      	mov	r0, lr
    if(id < 0) {
    673a:	2800      	cmp	r0, #0
    673c:	db18      	blt.n	6770 <_lv_style_get_ptr+0xb4>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
    673e:	4605      	mov	r5, r0
    6740:	3001      	adds	r0, #1
    6742:	1823      	adds	r3, r4, r0
    6744:	1d14      	adds	r4, r2, #4
    6746:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    674a:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
    674e:	4294      	cmp	r4, r2
    6750:	d1f9      	bne.n	6746 <_lv_style_get_ptr+0x8a>
        attr_act.full = style->map[id + 1];
    6752:	683b      	ldr	r3, [r7, #0]
    6754:	442b      	add	r3, r5
    6756:	7858      	ldrb	r0, [r3, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    6758:	f3c1 0106 	ubfx	r1, r1, #0, #7
    675c:	4008      	ands	r0, r1
    675e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return -1;
    6762:	f04f 30ff 	mov.w	r0, #4294967295
    6766:	4770      	bx	lr
    if(style->map == NULL) return -1;
    6768:	f04f 30ff 	mov.w	r0, #4294967295
    676c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6770:	f04f 30ff 	mov.w	r0, #4294967295
}
    6774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006778 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
    6778:	7943      	ldrb	r3, [r0, #5]
    677a:	f013 0f01 	tst.w	r3, #1
    677e:	d006      	beq.n	678e <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
    6780:	f013 0f02 	tst.w	r3, #2
    6784:	6803      	ldr	r3, [r0, #0]
    6786:	bf14      	ite	ne
    6788:	6858      	ldrne	r0, [r3, #4]
    else return list->style_list[0];
    678a:	6818      	ldreq	r0, [r3, #0]
    678c:	4770      	bx	lr
    if(!list->has_local) return NULL;
    678e:	2000      	movs	r0, #0
}
    6790:	4770      	bx	lr

00006792 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
    6792:	7943      	ldrb	r3, [r0, #5]
    6794:	f013 0f02 	tst.w	r3, #2
    return list->style_list[0];
    6798:	bf1a      	itte	ne
    679a:	6803      	ldrne	r3, [r0, #0]
    679c:	6818      	ldrne	r0, [r3, #0]
    if(!list->has_trans) return NULL;
    679e:	2000      	moveq	r0, #0
}
    67a0:	4770      	bx	lr
	...

000067a4 <_lv_style_list_reset>:
    if(list == NULL) return;
    67a4:	2800      	cmp	r0, #0
    67a6:	d02c      	beq.n	6802 <_lv_style_list_reset+0x5e>
{
    67a8:	b538      	push	{r3, r4, r5, lr}
    67aa:	4604      	mov	r4, r0
    if(list->has_local) {
    67ac:	7943      	ldrb	r3, [r0, #5]
    67ae:	f013 0f01 	tst.w	r3, #1
    67b2:	d008      	beq.n	67c6 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
    67b4:	4b13      	ldr	r3, [pc, #76]	; (6804 <_lv_style_list_reset+0x60>)
    67b6:	4798      	blx	r3
        if(local) {
    67b8:	4605      	mov	r5, r0
    67ba:	b120      	cbz	r0, 67c6 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
    67bc:	4b12      	ldr	r3, [pc, #72]	; (6808 <_lv_style_list_reset+0x64>)
    67be:	4798      	blx	r3
            lv_mem_free(local);
    67c0:	4628      	mov	r0, r5
    67c2:	4b12      	ldr	r3, [pc, #72]	; (680c <_lv_style_list_reset+0x68>)
    67c4:	4798      	blx	r3
    if(list->has_trans) {
    67c6:	7963      	ldrb	r3, [r4, #5]
    67c8:	f013 0f02 	tst.w	r3, #2
    67cc:	d009      	beq.n	67e2 <_lv_style_list_reset+0x3e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
    67ce:	4620      	mov	r0, r4
    67d0:	4b0f      	ldr	r3, [pc, #60]	; (6810 <_lv_style_list_reset+0x6c>)
    67d2:	4798      	blx	r3
        if(trans) {
    67d4:	4605      	mov	r5, r0
    67d6:	b120      	cbz	r0, 67e2 <_lv_style_list_reset+0x3e>
            lv_style_reset(trans);
    67d8:	4b0b      	ldr	r3, [pc, #44]	; (6808 <_lv_style_list_reset+0x64>)
    67da:	4798      	blx	r3
            lv_mem_free(trans);
    67dc:	4628      	mov	r0, r5
    67de:	4b0b      	ldr	r3, [pc, #44]	; (680c <_lv_style_list_reset+0x68>)
    67e0:	4798      	blx	r3
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    67e2:	7923      	ldrb	r3, [r4, #4]
    67e4:	b94b      	cbnz	r3, 67fa <_lv_style_list_reset+0x56>
    list->style_list = NULL;
    67e6:	2200      	movs	r2, #0
    67e8:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
    67ea:	7122      	strb	r2, [r4, #4]
    list->has_local = 0;
    67ec:	7963      	ldrb	r3, [r4, #5]
    list->skip_trans = 0;
    67ee:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    67f2:	f362 0382 	bfi	r3, r2, #2, #1
    67f6:	7163      	strb	r3, [r4, #5]
    67f8:	bd38      	pop	{r3, r4, r5, pc}
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    67fa:	6820      	ldr	r0, [r4, #0]
    67fc:	4b03      	ldr	r3, [pc, #12]	; (680c <_lv_style_list_reset+0x68>)
    67fe:	4798      	blx	r3
    6800:	e7f1      	b.n	67e6 <_lv_style_list_reset+0x42>
    6802:	4770      	bx	lr
    6804:	00006779 	.word	0x00006779
    6808:	00005e81 	.word	0x00005e81
    680c:	000115fd 	.word	0x000115fd
    6810:	00006793 	.word	0x00006793

00006814 <lv_style_list_copy>:
{
    6814:	b570      	push	{r4, r5, r6, lr}
    6816:	4605      	mov	r5, r0
    6818:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
    681a:	4b2c      	ldr	r3, [pc, #176]	; (68cc <lv_style_list_copy+0xb8>)
    681c:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
    681e:	6823      	ldr	r3, [r4, #0]
    6820:	2b00      	cmp	r3, #0
    6822:	d041      	beq.n	68a8 <lv_style_list_copy+0x94>
    if(list_src->has_local == 0) {
    6824:	7963      	ldrb	r3, [r4, #5]
    6826:	f013 0f01 	tst.w	r3, #1
    682a:	d120      	bne.n	686e <lv_style_list_copy+0x5a>
        if(list_src->has_trans) {
    682c:	f013 0f02 	tst.w	r3, #2
    6830:	d010      	beq.n	6854 <lv_style_list_copy+0x40>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    6832:	7920      	ldrb	r0, [r4, #4]
    6834:	3801      	subs	r0, #1
    6836:	0080      	lsls	r0, r0, #2
    6838:	4b25      	ldr	r3, [pc, #148]	; (68d0 <lv_style_list_copy+0xbc>)
    683a:	4798      	blx	r3
    683c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    683e:	7922      	ldrb	r2, [r4, #4]
    6840:	3a01      	subs	r2, #1
    6842:	6821      	ldr	r1, [r4, #0]
    6844:	0092      	lsls	r2, r2, #2
    6846:	3104      	adds	r1, #4
    6848:	4b22      	ldr	r3, [pc, #136]	; (68d4 <lv_style_list_copy+0xc0>)
    684a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    684c:	7923      	ldrb	r3, [r4, #4]
    684e:	3b01      	subs	r3, #1
    6850:	712b      	strb	r3, [r5, #4]
    6852:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
    6854:	7920      	ldrb	r0, [r4, #4]
    6856:	0080      	lsls	r0, r0, #2
    6858:	4b1d      	ldr	r3, [pc, #116]	; (68d0 <lv_style_list_copy+0xbc>)
    685a:	4798      	blx	r3
    685c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
    685e:	7922      	ldrb	r2, [r4, #4]
    6860:	0092      	lsls	r2, r2, #2
    6862:	6821      	ldr	r1, [r4, #0]
    6864:	4b1b      	ldr	r3, [pc, #108]	; (68d4 <lv_style_list_copy+0xc0>)
    6866:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
    6868:	7923      	ldrb	r3, [r4, #4]
    686a:	712b      	strb	r3, [r5, #4]
    686c:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
    686e:	f013 0f02 	tst.w	r3, #2
    6872:	d01a      	beq.n	68aa <lv_style_list_copy+0x96>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
    6874:	7920      	ldrb	r0, [r4, #4]
    6876:	3802      	subs	r0, #2
    6878:	0080      	lsls	r0, r0, #2
    687a:	4b15      	ldr	r3, [pc, #84]	; (68d0 <lv_style_list_copy+0xbc>)
    687c:	4798      	blx	r3
    687e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
    6880:	7922      	ldrb	r2, [r4, #4]
    6882:	3a02      	subs	r2, #2
    6884:	6821      	ldr	r1, [r4, #0]
    6886:	0092      	lsls	r2, r2, #2
    6888:	3108      	adds	r1, #8
    688a:	4b12      	ldr	r3, [pc, #72]	; (68d4 <lv_style_list_copy+0xc0>)
    688c:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
    688e:	7923      	ldrb	r3, [r4, #4]
    6890:	3b02      	subs	r3, #2
    6892:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
    6894:	4628      	mov	r0, r5
    6896:	4d10      	ldr	r5, [pc, #64]	; (68d8 <lv_style_list_copy+0xc4>)
    6898:	47a8      	blx	r5
    689a:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
    689c:	4620      	mov	r0, r4
    689e:	47a8      	blx	r5
    68a0:	4601      	mov	r1, r0
    68a2:	4630      	mov	r0, r6
    68a4:	4b0d      	ldr	r3, [pc, #52]	; (68dc <lv_style_list_copy+0xc8>)
    68a6:	4798      	blx	r3
    68a8:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    68aa:	7920      	ldrb	r0, [r4, #4]
    68ac:	3801      	subs	r0, #1
    68ae:	0080      	lsls	r0, r0, #2
    68b0:	4b07      	ldr	r3, [pc, #28]	; (68d0 <lv_style_list_copy+0xbc>)
    68b2:	4798      	blx	r3
    68b4:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    68b6:	7922      	ldrb	r2, [r4, #4]
    68b8:	3a01      	subs	r2, #1
    68ba:	6821      	ldr	r1, [r4, #0]
    68bc:	0092      	lsls	r2, r2, #2
    68be:	3104      	adds	r1, #4
    68c0:	4b04      	ldr	r3, [pc, #16]	; (68d4 <lv_style_list_copy+0xc0>)
    68c2:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    68c4:	7923      	ldrb	r3, [r4, #4]
    68c6:	3b01      	subs	r3, #1
    68c8:	712b      	strb	r3, [r5, #4]
    68ca:	e7e3      	b.n	6894 <lv_style_list_copy+0x80>
    68cc:	000067a5 	.word	0x000067a5
    68d0:	00011539 	.word	0x00011539
    68d4:	00011769 	.word	0x00011769
    68d8:	00005e01 	.word	0x00005e01
    68dc:	00005ed5 	.word	0x00005ed5

000068e0 <_lv_style_list_add_trans_style>:
{
    68e0:	b538      	push	{r3, r4, r5, lr}
    68e2:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
    68e4:	7943      	ldrb	r3, [r0, #5]
    68e6:	f013 0f02 	tst.w	r3, #2
    68ea:	d004      	beq.n	68f6 <_lv_style_list_add_trans_style+0x16>
    68ec:	4b14      	ldr	r3, [pc, #80]	; (6940 <_lv_style_list_add_trans_style+0x60>)
    68ee:	4798      	blx	r3
    68f0:	4605      	mov	r5, r0
}
    68f2:	4628      	mov	r0, r5
    68f4:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
    68f6:	2004      	movs	r0, #4
    68f8:	4b12      	ldr	r3, [pc, #72]	; (6944 <_lv_style_list_add_trans_style+0x64>)
    68fa:	4798      	blx	r3
    68fc:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
    68fe:	4b12      	ldr	r3, [pc, #72]	; (6948 <_lv_style_list_add_trans_style+0x68>)
    6900:	4798      	blx	r3
    6902:	b1b0      	cbz	r0, 6932 <_lv_style_list_add_trans_style+0x52>
    if(trans_style == NULL) {
    6904:	2d00      	cmp	r5, #0
    6906:	d0f4      	beq.n	68f2 <_lv_style_list_add_trans_style+0x12>
    lv_style_init(trans_style);
    6908:	4628      	mov	r0, r5
    690a:	4b10      	ldr	r3, [pc, #64]	; (694c <_lv_style_list_add_trans_style+0x6c>)
    690c:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
    690e:	4629      	mov	r1, r5
    6910:	4620      	mov	r0, r4
    6912:	4b0f      	ldr	r3, [pc, #60]	; (6950 <_lv_style_list_add_trans_style+0x70>)
    6914:	4798      	blx	r3
    list->has_trans = 1;
    6916:	7963      	ldrb	r3, [r4, #5]
    6918:	f043 0302 	orr.w	r3, r3, #2
    691c:	7163      	strb	r3, [r4, #5]
    if(list->has_local) {
    691e:	f013 0f01 	tst.w	r3, #1
    6922:	d0e6      	beq.n	68f2 <_lv_style_list_add_trans_style+0x12>
        lv_style_t * tmp = list->style_list[0];
    6924:	6823      	ldr	r3, [r4, #0]
    6926:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
    6928:	6859      	ldr	r1, [r3, #4]
    692a:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
    692c:	6823      	ldr	r3, [r4, #0]
    692e:	605a      	str	r2, [r3, #4]
    6930:	e7df      	b.n	68f2 <_lv_style_list_add_trans_style+0x12>
    LV_ASSERT_MEM(trans_style);
    6932:	462a      	mov	r2, r5
    6934:	2300      	movs	r3, #0
    6936:	4807      	ldr	r0, [pc, #28]	; (6954 <_lv_style_list_add_trans_style+0x74>)
    6938:	4907      	ldr	r1, [pc, #28]	; (6958 <_lv_style_list_add_trans_style+0x78>)
    693a:	4788      	blx	r1
    693c:	e7fe      	b.n	693c <_lv_style_list_add_trans_style+0x5c>
    693e:	bf00      	nop
    6940:	00006793 	.word	0x00006793
    6944:	00011539 	.word	0x00011539
    6948:	0000291f 	.word	0x0000291f
    694c:	00005c9d 	.word	0x00005c9d
    6950:	00005d65 	.word	0x00005d65
    6954:	00017604 	.word	0x00017604
    6958:	00002929 	.word	0x00002929

0000695c <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
    695c:	2800      	cmp	r0, #0
    695e:	d059      	beq.n	6a14 <_lv_style_list_get_int+0xb8>
{
    6960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6964:	b083      	sub	sp, #12
    6966:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6968:	6803      	ldr	r3, [r0, #0]
    696a:	2b00      	cmp	r3, #0
    696c:	d054      	beq.n	6a18 <_lv_style_list_get_int+0xbc>
    int16_t weight_goal = attr.full;
    696e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
    6972:	2300      	movs	r3, #0
    6974:	f8ad 3006 	strh.w	r3, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
    6978:	7900      	ldrb	r0, [r0, #4]
    697a:	2800      	cmp	r0, #0
    697c:	d042      	beq.n	6a04 <_lv_style_list_get_int+0xa8>
    697e:	4693      	mov	fp, r2
    6980:	4689      	mov	r9, r1
    6982:	461c      	mov	r4, r3
    6984:	f04f 36ff 	mov.w	r6, #4294967295
    6988:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
    698a:	4f24      	ldr	r7, [pc, #144]	; (6a1c <_lv_style_list_get_int+0xc0>)
    698c:	e01c      	b.n	69c8 <_lv_style_list_get_int+0x6c>
    698e:	4650      	mov	r0, sl
    6990:	f10d 0206 	add.w	r2, sp, #6
    6994:	4649      	mov	r1, r9
    6996:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6998:	4580      	cmp	r8, r0
    699a:	d027      	beq.n	69ec <_lv_style_list_get_int+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    699c:	796b      	ldrb	r3, [r5, #5]
    699e:	f013 0f02 	tst.w	r3, #2
    69a2:	d005      	beq.n	69b0 <_lv_style_list_get_int+0x54>
    69a4:	2800      	cmp	r0, #0
    69a6:	db03      	blt.n	69b0 <_lv_style_list_get_int+0x54>
    69a8:	b914      	cbnz	r4, 69b0 <_lv_style_list_get_int+0x54>
    69aa:	f013 0f04 	tst.w	r3, #4
    69ae:	d023      	beq.n	69f8 <_lv_style_list_get_int+0x9c>
        else if(weight_act > weight) {
    69b0:	42b0      	cmp	r0, r6
    69b2:	dd04      	ble.n	69be <_lv_style_list_get_int+0x62>
            *res = value_act;
    69b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69b8:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    69bc:	4606      	mov	r6, r0
    69be:	3401      	adds	r4, #1
    69c0:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    69c2:	7928      	ldrb	r0, [r5, #4]
    69c4:	4284      	cmp	r4, r0
    69c6:	da1f      	bge.n	6a08 <_lv_style_list_get_int+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    69c8:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    69ca:	796b      	ldrb	r3, [r5, #5]
    69cc:	f003 0306 	and.w	r3, r3, #6
    69d0:	2b06      	cmp	r3, #6
    69d2:	bf04      	itt	eq
    69d4:	3201      	addeq	r2, #1
    69d6:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    69d8:	2800      	cmp	r0, #0
    69da:	d0d8      	beq.n	698e <_lv_style_list_get_int+0x32>
    69dc:	4282      	cmp	r2, r0
    69de:	d203      	bcs.n	69e8 <_lv_style_list_get_int+0x8c>
    return list->style_list[id];
    69e0:	682b      	ldr	r3, [r5, #0]
    69e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    69e6:	e7d3      	b.n	6990 <_lv_style_list_get_int+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    69e8:	4650      	mov	r0, sl
    69ea:	e7d1      	b.n	6990 <_lv_style_list_get_int+0x34>
            *res = value_act;
    69ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69f0:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    69f4:	2001      	movs	r0, #1
    69f6:	e00a      	b.n	6a0e <_lv_style_list_get_int+0xb2>
            *res = value_act;
    69f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    69fc:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6a00:	2001      	movs	r0, #1
    6a02:	e004      	b.n	6a0e <_lv_style_list_get_int+0xb2>
    int16_t weight = -1;
    6a04:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0) return LV_RES_OK;
    6a08:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6a0a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6a0e:	b003      	add	sp, #12
    6a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6a14:	2000      	movs	r0, #0
    6a16:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6a18:	2000      	movs	r0, #0
    6a1a:	e7f8      	b.n	6a0e <_lv_style_list_get_int+0xb2>
    6a1c:	000064a1 	.word	0x000064a1

00006a20 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
    6a20:	2800      	cmp	r0, #0
    6a22:	d058      	beq.n	6ad6 <_lv_style_list_get_color+0xb6>
{
    6a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a28:	b083      	sub	sp, #12
    6a2a:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6a2c:	6803      	ldr	r3, [r0, #0]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d053      	beq.n	6ada <_lv_style_list_get_color+0xba>
    int16_t weight_goal = attr.full;
    6a32:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_color_t value_act = { 0 };
    6a36:	2300      	movs	r3, #0
    6a38:	f8ad 3004 	strh.w	r3, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
    6a3c:	7900      	ldrb	r0, [r0, #4]
    6a3e:	2800      	cmp	r0, #0
    6a40:	d041      	beq.n	6ac6 <_lv_style_list_get_color+0xa6>
    6a42:	4693      	mov	fp, r2
    6a44:	4689      	mov	r9, r1
    6a46:	461c      	mov	r4, r3
    6a48:	f04f 36ff 	mov.w	r6, #4294967295
    6a4c:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
    6a4e:	4f24      	ldr	r7, [pc, #144]	; (6ae0 <_lv_style_list_get_color+0xc0>)
    6a50:	e01b      	b.n	6a8a <_lv_style_list_get_color+0x6a>
    6a52:	4650      	mov	r0, sl
    6a54:	aa01      	add	r2, sp, #4
    6a56:	4649      	mov	r1, r9
    6a58:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6a5a:	4580      	cmp	r8, r0
    6a5c:	d027      	beq.n	6aae <_lv_style_list_get_color+0x8e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    6a5e:	796b      	ldrb	r3, [r5, #5]
    6a60:	f013 0f02 	tst.w	r3, #2
    6a64:	d005      	beq.n	6a72 <_lv_style_list_get_color+0x52>
    6a66:	2800      	cmp	r0, #0
    6a68:	db03      	blt.n	6a72 <_lv_style_list_get_color+0x52>
    6a6a:	b914      	cbnz	r4, 6a72 <_lv_style_list_get_color+0x52>
    6a6c:	f013 0f04 	tst.w	r3, #4
    6a70:	d023      	beq.n	6aba <_lv_style_list_get_color+0x9a>
        else if(weight_act > weight) {
    6a72:	42b0      	cmp	r0, r6
    6a74:	dd04      	ble.n	6a80 <_lv_style_list_get_color+0x60>
            *res = value_act;
    6a76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6a7a:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    6a7e:	4606      	mov	r6, r0
    6a80:	3401      	adds	r4, #1
    6a82:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    6a84:	7928      	ldrb	r0, [r5, #4]
    6a86:	4284      	cmp	r4, r0
    6a88:	da1f      	bge.n	6aca <_lv_style_list_get_color+0xaa>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6a8a:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6a8c:	796b      	ldrb	r3, [r5, #5]
    6a8e:	f003 0306 	and.w	r3, r3, #6
    6a92:	2b06      	cmp	r3, #6
    6a94:	bf04      	itt	eq
    6a96:	3201      	addeq	r2, #1
    6a98:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6a9a:	2800      	cmp	r0, #0
    6a9c:	d0d9      	beq.n	6a52 <_lv_style_list_get_color+0x32>
    6a9e:	4282      	cmp	r2, r0
    6aa0:	d203      	bcs.n	6aaa <_lv_style_list_get_color+0x8a>
    return list->style_list[id];
    6aa2:	682b      	ldr	r3, [r5, #0]
    6aa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6aa8:	e7d4      	b.n	6a54 <_lv_style_list_get_color+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6aaa:	4650      	mov	r0, sl
    6aac:	e7d2      	b.n	6a54 <_lv_style_list_get_color+0x34>
            *res = value_act;
    6aae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6ab2:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6ab6:	2001      	movs	r0, #1
    6ab8:	e00a      	b.n	6ad0 <_lv_style_list_get_color+0xb0>
            *res = value_act;
    6aba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6abe:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    6ac2:	2001      	movs	r0, #1
    6ac4:	e004      	b.n	6ad0 <_lv_style_list_get_color+0xb0>
    int16_t weight = -1;
    6ac6:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    6aca:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6acc:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6ad0:	b003      	add	sp, #12
    6ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6ad6:	2000      	movs	r0, #0
    6ad8:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6ada:	2000      	movs	r0, #0
    6adc:	e7f8      	b.n	6ad0 <_lv_style_list_get_color+0xb0>
    6ade:	bf00      	nop
    6ae0:	00006607 	.word	0x00006607

00006ae4 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d059      	beq.n	6b9c <_lv_style_list_get_opa+0xb8>
{
    6ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6aec:	b083      	sub	sp, #12
    6aee:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6af0:	6803      	ldr	r3, [r0, #0]
    6af2:	2b00      	cmp	r3, #0
    6af4:	d054      	beq.n	6ba0 <_lv_style_list_get_opa+0xbc>
    int16_t weight_goal = attr.full;
    6af6:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
    6afa:	2300      	movs	r3, #0
    6afc:	f88d 3007 	strb.w	r3, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
    6b00:	7900      	ldrb	r0, [r0, #4]
    6b02:	2800      	cmp	r0, #0
    6b04:	d042      	beq.n	6b8c <_lv_style_list_get_opa+0xa8>
    6b06:	4693      	mov	fp, r2
    6b08:	4689      	mov	r9, r1
    6b0a:	461c      	mov	r4, r3
    6b0c:	f04f 36ff 	mov.w	r6, #4294967295
    6b10:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
    6b12:	4f24      	ldr	r7, [pc, #144]	; (6ba4 <_lv_style_list_get_opa+0xc0>)
    6b14:	e01c      	b.n	6b50 <_lv_style_list_get_opa+0x6c>
    6b16:	4650      	mov	r0, sl
    6b18:	f10d 0207 	add.w	r2, sp, #7
    6b1c:	4649      	mov	r1, r9
    6b1e:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6b20:	4580      	cmp	r8, r0
    6b22:	d027      	beq.n	6b74 <_lv_style_list_get_opa+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    6b24:	796b      	ldrb	r3, [r5, #5]
    6b26:	f013 0f02 	tst.w	r3, #2
    6b2a:	d005      	beq.n	6b38 <_lv_style_list_get_opa+0x54>
    6b2c:	2800      	cmp	r0, #0
    6b2e:	db03      	blt.n	6b38 <_lv_style_list_get_opa+0x54>
    6b30:	b914      	cbnz	r4, 6b38 <_lv_style_list_get_opa+0x54>
    6b32:	f013 0f04 	tst.w	r3, #4
    6b36:	d023      	beq.n	6b80 <_lv_style_list_get_opa+0x9c>
        else if(weight_act > weight) {
    6b38:	42b0      	cmp	r0, r6
    6b3a:	dd04      	ble.n	6b46 <_lv_style_list_get_opa+0x62>
            *res = value_act;
    6b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b40:	f88b 3000 	strb.w	r3, [fp]
            weight =  weight_act;
    6b44:	4606      	mov	r6, r0
    6b46:	3401      	adds	r4, #1
    6b48:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    6b4a:	7928      	ldrb	r0, [r5, #4]
    6b4c:	4284      	cmp	r4, r0
    6b4e:	da1f      	bge.n	6b90 <_lv_style_list_get_opa+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6b50:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6b52:	796b      	ldrb	r3, [r5, #5]
    6b54:	f003 0306 	and.w	r3, r3, #6
    6b58:	2b06      	cmp	r3, #6
    6b5a:	bf04      	itt	eq
    6b5c:	3201      	addeq	r2, #1
    6b5e:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6b60:	2800      	cmp	r0, #0
    6b62:	d0d8      	beq.n	6b16 <_lv_style_list_get_opa+0x32>
    6b64:	4282      	cmp	r2, r0
    6b66:	d203      	bcs.n	6b70 <_lv_style_list_get_opa+0x8c>
    return list->style_list[id];
    6b68:	682b      	ldr	r3, [r5, #0]
    6b6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6b6e:	e7d3      	b.n	6b18 <_lv_style_list_get_opa+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6b70:	4650      	mov	r0, sl
    6b72:	e7d1      	b.n	6b18 <_lv_style_list_get_opa+0x34>
            *res = value_act;
    6b74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b78:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    6b7c:	2001      	movs	r0, #1
    6b7e:	e00a      	b.n	6b96 <_lv_style_list_get_opa+0xb2>
            *res = value_act;
    6b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b84:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    6b88:	2001      	movs	r0, #1
    6b8a:	e004      	b.n	6b96 <_lv_style_list_get_opa+0xb2>
    int16_t weight = -1;
    6b8c:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    6b90:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6b92:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6b96:	b003      	add	sp, #12
    6b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6b9c:	2000      	movs	r0, #0
    6b9e:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6ba0:	2000      	movs	r0, #0
    6ba2:	e7f8      	b.n	6b96 <_lv_style_list_get_opa+0xb2>
    6ba4:	00006557 	.word	0x00006557

00006ba8 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
    6ba8:	2800      	cmp	r0, #0
    6baa:	d052      	beq.n	6c52 <_lv_style_list_get_ptr+0xaa>
{
    6bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bb0:	b083      	sub	sp, #12
    6bb2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    6bb4:	6803      	ldr	r3, [r0, #0]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d04d      	beq.n	6c56 <_lv_style_list_get_ptr+0xae>
    int16_t weight_goal = attr.full;
    6bba:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
    6bbe:	7900      	ldrb	r0, [r0, #4]
    6bc0:	2800      	cmp	r0, #0
    6bc2:	d03e      	beq.n	6c42 <_lv_style_list_get_ptr+0x9a>
    6bc4:	4693      	mov	fp, r2
    6bc6:	4689      	mov	r9, r1
    6bc8:	2400      	movs	r4, #0
    6bca:	f04f 36ff 	mov.w	r6, #4294967295
    6bce:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
    6bd0:	4f22      	ldr	r7, [pc, #136]	; (6c5c <_lv_style_list_get_ptr+0xb4>)
    6bd2:	e01a      	b.n	6c0a <_lv_style_list_get_ptr+0x62>
    6bd4:	4650      	mov	r0, sl
    6bd6:	aa01      	add	r2, sp, #4
    6bd8:	4649      	mov	r1, r9
    6bda:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    6bdc:	4580      	cmp	r8, r0
    6bde:	d026      	beq.n	6c2e <_lv_style_list_get_ptr+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    6be0:	796b      	ldrb	r3, [r5, #5]
    6be2:	f013 0f02 	tst.w	r3, #2
    6be6:	d005      	beq.n	6bf4 <_lv_style_list_get_ptr+0x4c>
    6be8:	2800      	cmp	r0, #0
    6bea:	db03      	blt.n	6bf4 <_lv_style_list_get_ptr+0x4c>
    6bec:	b914      	cbnz	r4, 6bf4 <_lv_style_list_get_ptr+0x4c>
    6bee:	f013 0f04 	tst.w	r3, #4
    6bf2:	d021      	beq.n	6c38 <_lv_style_list_get_ptr+0x90>
        else if(weight_act > weight) {
    6bf4:	42b0      	cmp	r0, r6
    6bf6:	dd03      	ble.n	6c00 <_lv_style_list_get_ptr+0x58>
            *res = value_act;
    6bf8:	9b01      	ldr	r3, [sp, #4]
    6bfa:	f8cb 3000 	str.w	r3, [fp]
            weight =  weight_act;
    6bfe:	4606      	mov	r6, r0
    6c00:	3401      	adds	r4, #1
    6c02:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    6c04:	7928      	ldrb	r0, [r5, #4]
    6c06:	4284      	cmp	r4, r0
    6c08:	da1d      	bge.n	6c46 <_lv_style_list_get_ptr+0x9e>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    6c0a:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    6c0c:	796b      	ldrb	r3, [r5, #5]
    6c0e:	f003 0306 	and.w	r3, r3, #6
    6c12:	2b06      	cmp	r3, #6
    6c14:	bf04      	itt	eq
    6c16:	3201      	addeq	r2, #1
    6c18:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6c1a:	2800      	cmp	r0, #0
    6c1c:	d0da      	beq.n	6bd4 <_lv_style_list_get_ptr+0x2c>
    6c1e:	4282      	cmp	r2, r0
    6c20:	d203      	bcs.n	6c2a <_lv_style_list_get_ptr+0x82>
    return list->style_list[id];
    6c22:	682b      	ldr	r3, [r5, #0]
    6c24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6c28:	e7d5      	b.n	6bd6 <_lv_style_list_get_ptr+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6c2a:	4650      	mov	r0, sl
    6c2c:	e7d3      	b.n	6bd6 <_lv_style_list_get_ptr+0x2e>
            *res = value_act;
    6c2e:	9b01      	ldr	r3, [sp, #4]
    6c30:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    6c34:	2001      	movs	r0, #1
    6c36:	e009      	b.n	6c4c <_lv_style_list_get_ptr+0xa4>
            *res = value_act;
    6c38:	9b01      	ldr	r3, [sp, #4]
    6c3a:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    6c3e:	2001      	movs	r0, #1
    6c40:	e004      	b.n	6c4c <_lv_style_list_get_ptr+0xa4>
    int16_t weight = -1;
    6c42:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    6c46:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    6c48:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    6c4c:	b003      	add	sp, #12
    6c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    6c52:	2000      	movs	r0, #0
    6c54:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    6c56:	2000      	movs	r0, #0
    6c58:	e7f8      	b.n	6c4c <_lv_style_list_get_ptr+0xa4>
    6c5a:	bf00      	nop
    6c5c:	000066bd 	.word	0x000066bd

00006c60 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    6c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c62:	f001 0e1f 	and.w	lr, r1, #31
    6c66:	f3c1 1645 	ubfx	r6, r1, #5, #6
    6c6a:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    6c6e:	2a05      	cmp	r2, #5
    6c70:	d93f      	bls.n	6cf2 <color_blend_true_color_additive+0x92>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
    6c72:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    6c76:	440c      	add	r4, r1
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
    6c78:	2c1f      	cmp	r4, #31
    6c7a:	bf28      	it	cs
    6c7c:	241f      	movcs	r4, #31
    6c7e:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_DEPTH == 8
    fg.ch.green = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    6c82:	f3c0 1345 	ubfx	r3, r0, #5, #6
    6c86:	4433      	add	r3, r6
    fg.ch.green = LV_MATH_MIN(tmp, 63);
    6c88:	2b3f      	cmp	r3, #63	; 0x3f
    6c8a:	bf28      	it	cs
    6c8c:	233f      	movcs	r3, #63	; 0x3f
    6c8e:	f003 053f 	and.w	r5, r3, #63	; 0x3f

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
    6c92:	f000 001f 	and.w	r0, r0, #31
    6c96:	4470      	add	r0, lr
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
    6c98:	281f      	cmp	r0, #31
    6c9a:	bf28      	it	cs
    6c9c:	201f      	movcs	r0, #31
    6c9e:	f000 031f 	and.w	r3, r0, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
    6ca2:	2aff      	cmp	r2, #255	; 0xff
    6ca4:	d02e      	beq.n	6d04 <color_blend_true_color_additive+0xa4>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6ca6:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6caa:	fb07 f00e 	mul.w	r0, r7, lr
    6cae:	fb02 0003 	mla	r0, r2, r3, r0
    6cb2:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    6cb6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    6cba:	0dc3      	lsrs	r3, r0, #23
    6cbc:	f04f 0000 	mov.w	r0, #0
    6cc0:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6cc4:	fb07 f306 	mul.w	r3, r7, r6
    6cc8:	fb02 3305 	mla	r3, r2, r5, r3
    6ccc:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    6cd0:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    6cd4:	0ddb      	lsrs	r3, r3, #23
    6cd6:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6cda:	fb07 f101 	mul.w	r1, r7, r1
    6cde:	fb02 1204 	mla	r2, r2, r4, r1
    6ce2:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    6ce6:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    6cea:	0dd2      	lsrs	r2, r2, #23
    6cec:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    6cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    6cf2:	f04f 0000 	mov.w	r0, #0
    6cf6:	f36e 0004 	bfi	r0, lr, #0, #5
    6cfa:	f366 104a 	bfi	r0, r6, #5, #6
    6cfe:	f361 20cf 	bfi	r0, r1, #11, #5
    6d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    6d04:	f04f 0000 	mov.w	r0, #0
    6d08:	f363 0004 	bfi	r0, r3, #0, #5
    6d0c:	f365 104a 	bfi	r0, r5, #5, #6
    6d10:	f364 20cf 	bfi	r0, r4, #11, #5
    6d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006d16 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    6d16:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d18:	f001 0e1f 	and.w	lr, r1, #31
    6d1c:	f3c1 1645 	ubfx	r6, r1, #5, #6
    6d20:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    6d24:	2a05      	cmp	r2, #5
    6d26:	d93d      	bls.n	6da4 <color_blend_true_color_subtractive+0x8e>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
    6d28:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    6d2c:	1b0c      	subs	r4, r1, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
    6d2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    6d32:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    6d36:	f3c0 1345 	ubfx	r3, r0, #5, #6
    6d3a:	1af3      	subs	r3, r6, r3
    fg.ch.green = LV_MATH_MAX(tmp, 0);
    6d3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6d40:	f003 053f 	and.w	r5, r3, #63	; 0x3f
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    6d44:	f000 001f 	and.w	r0, r0, #31
    6d48:	ebae 0000 	sub.w	r0, lr, r0
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
    6d4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6d50:	f000 031f 	and.w	r3, r0, #31

    if(opa == LV_OPA_COVER) return fg;
    6d54:	2aff      	cmp	r2, #255	; 0xff
    6d56:	d02e      	beq.n	6db6 <color_blend_true_color_subtractive+0xa0>
    6d58:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6d5c:	fb07 f00e 	mul.w	r0, r7, lr
    6d60:	fb02 0003 	mla	r0, r2, r3, r0
    6d64:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    6d68:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    6d6c:	0dc3      	lsrs	r3, r0, #23
    6d6e:	f04f 0000 	mov.w	r0, #0
    6d72:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6d76:	fb07 f306 	mul.w	r3, r7, r6
    6d7a:	fb02 3305 	mla	r3, r2, r5, r3
    6d7e:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    6d82:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    6d86:	0ddb      	lsrs	r3, r3, #23
    6d88:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6d8c:	fb07 f101 	mul.w	r1, r7, r1
    6d90:	fb02 1204 	mla	r2, r2, r4, r1
    6d94:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    6d98:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    6d9c:	0dd2      	lsrs	r2, r2, #23
    6d9e:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    6da4:	f04f 0000 	mov.w	r0, #0
    6da8:	f36e 0004 	bfi	r0, lr, #0, #5
    6dac:	f366 104a 	bfi	r0, r6, #5, #6
    6db0:	f361 20cf 	bfi	r0, r1, #11, #5
    6db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    6db6:	f04f 0000 	mov.w	r0, #0
    6dba:	f363 0004 	bfi	r0, r3, #0, #5
    6dbe:	f365 104a 	bfi	r0, r5, #5, #6
    6dc2:	f364 20cf 	bfi	r0, r4, #11, #5
    6dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006dc8 <_lv_blend_fill>:
{
    6dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dcc:	b093      	sub	sp, #76	; 0x4c
    6dce:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
    6dd2:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
    6dd6:	f89d 9078 	ldrb.w	r9, [sp, #120]	; 0x78
    if(opa < LV_OPA_MIN) return;
    6dda:	f1bb 0f04 	cmp.w	fp, #4
    6dde:	d900      	bls.n	6de2 <_lv_blend_fill+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    6de0:	b914      	cbnz	r4, 6de8 <_lv_blend_fill+0x20>
}
    6de2:	b013      	add	sp, #76	; 0x4c
    6de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6de8:	9308      	str	r3, [sp, #32]
    6dea:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6dee:	460e      	mov	r6, r1
    6df0:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6df2:	4bba      	ldr	r3, [pc, #744]	; (70dc <_lv_blend_fill+0x314>)
    6df4:	4798      	blx	r3
    6df6:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    6df8:	4bb9      	ldr	r3, [pc, #740]	; (70e0 <_lv_blend_fill+0x318>)
    6dfa:	4798      	blx	r3
    6dfc:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
    6dfe:	6882      	ldr	r2, [r0, #8]
    6e00:	9206      	str	r2, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
    6e02:	4632      	mov	r2, r6
    6e04:	4629      	mov	r1, r5
    6e06:	a810      	add	r0, sp, #64	; 0x40
    6e08:	4bb6      	ldr	r3, [pc, #728]	; (70e4 <_lv_blend_fill+0x31c>)
    6e0a:	4798      	blx	r3
    if(!is_common) return;
    6e0c:	2800      	cmp	r0, #0
    6e0e:	d0e8      	beq.n	6de2 <_lv_blend_fill+0x1a>
    draw_area.x1 -= disp_area->x1;
    6e10:	8a3a      	ldrh	r2, [r7, #16]
    6e12:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    6e16:	1a9b      	subs	r3, r3, r2
    6e18:	b299      	uxth	r1, r3
    6e1a:	460d      	mov	r5, r1
    6e1c:	910a      	str	r1, [sp, #40]	; 0x28
    6e1e:	b208      	sxth	r0, r1
    6e20:	900b      	str	r0, [sp, #44]	; 0x2c
    6e22:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
    6e26:	8a7b      	ldrh	r3, [r7, #18]
    6e28:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    6e2c:	1ac9      	subs	r1, r1, r3
    6e2e:	fa0f fc81 	sxth.w	ip, r1
    6e32:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
    6e36:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    6e3a:	1a80      	subs	r0, r0, r2
    6e3c:	b280      	uxth	r0, r0
    6e3e:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
    6e42:	f8bd e046 	ldrh.w	lr, [sp, #70]	; 0x46
    6e46:	ebae 0e03 	sub.w	lr, lr, r3
    6e4a:	fa0f fe8e 	sxth.w	lr, lr
    6e4e:	f8ad e046 	strh.w	lr, [sp, #70]	; 0x46
    if(mask && disp->driver.antialiasing == 0)
    6e52:	9a08      	ldr	r2, [sp, #32]
    6e54:	b1aa      	cbz	r2, 6e82 <_lv_blend_fill+0xba>
    6e56:	f898 3008 	ldrb.w	r3, [r8, #8]
    6e5a:	f013 0f01 	tst.w	r3, #1
    6e5e:	d110      	bne.n	6e82 <_lv_blend_fill+0xba>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    6e60:	1c41      	adds	r1, r0, #1
    6e62:	1b49      	subs	r1, r1, r5
    6e64:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    6e66:	2900      	cmp	r1, #0
    6e68:	dd0b      	ble.n	6e82 <_lv_blend_fill+0xba>
    6e6a:	4613      	mov	r3, r2
    6e6c:	4411      	add	r1, r2
    6e6e:	781a      	ldrb	r2, [r3, #0]
    6e70:	2a80      	cmp	r2, #128	; 0x80
    6e72:	f04f 32ff 	mov.w	r2, #4294967295
    6e76:	bf98      	it	ls
    6e78:	2200      	movls	r2, #0
    6e7a:	f803 2b01 	strb.w	r2, [r3], #1
    6e7e:	428b      	cmp	r3, r1
    6e80:	d1f5      	bne.n	6e6e <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
    6e82:	f8d8 3014 	ldr.w	r3, [r8, #20]
    6e86:	2b00      	cmp	r3, #0
    6e88:	d077      	beq.n	6f7a <_lv_blend_fill+0x1b2>
    6e8a:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6e8e:	4b93      	ldr	r3, [pc, #588]	; (70dc <_lv_blend_fill+0x314>)
    6e90:	4798      	blx	r3
    6e92:	4605      	mov	r5, r0
    6e94:	8abb      	ldrh	r3, [r7, #20]
    6e96:	3301      	adds	r3, #1
    6e98:	8a3a      	ldrh	r2, [r7, #16]
    6e9a:	1a9b      	subs	r3, r3, r2
    6e9c:	b21b      	sxth	r3, r3
    6e9e:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    6ea0:	2c01      	cmp	r4, #1
    6ea2:	d03e      	beq.n	6f22 <_lv_blend_fill+0x15a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    6ea4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    6ea8:	9b08      	ldr	r3, [sp, #32]
    6eaa:	1a9f      	subs	r7, r3, r2
    6eac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    6eb0:	3301      	adds	r3, #1
    6eb2:	1a9b      	subs	r3, r3, r2
    6eb4:	b21b      	sxth	r3, r3
    6eb6:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6eb8:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
    6ebc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6ec0:	459a      	cmp	sl, r3
    6ec2:	dc8e      	bgt.n	6de2 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6ec4:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    6ec8:	4634      	mov	r4, r6
    6eca:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6ece:	429e      	cmp	r6, r3
    6ed0:	dc1e      	bgt.n	6f10 <_lv_blend_fill+0x148>
    6ed2:	443e      	add	r6, r7
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    6ed4:	fa0f f98a 	sxth.w	r9, sl
    6ed8:	9605      	str	r6, [sp, #20]
    6eda:	464b      	mov	r3, r9
    6edc:	46b9      	mov	r9, r7
    6ede:	461f      	mov	r7, r3
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    6ee0:	9a05      	ldr	r2, [sp, #20]
    6ee2:	f812 3b01 	ldrb.w	r3, [r2], #1
    6ee6:	9205      	str	r2, [sp, #20]
    6ee8:	fb03 f30b 	mul.w	r3, r3, fp
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    6eec:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6ef0:	9302      	str	r3, [sp, #8]
    6ef2:	f8ad 8004 	strh.w	r8, [sp, #4]
    6ef6:	9700      	str	r7, [sp, #0]
    6ef8:	b223      	sxth	r3, r4
    6efa:	9a07      	ldr	r2, [sp, #28]
    6efc:	9906      	ldr	r1, [sp, #24]
    6efe:	4628      	mov	r0, r5
    6f00:	696e      	ldr	r6, [r5, #20]
    6f02:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f04:	3401      	adds	r4, #1
    6f06:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6f0a:	429c      	cmp	r4, r3
    6f0c:	dde8      	ble.n	6ee0 <_lv_blend_fill+0x118>
    6f0e:	464f      	mov	r7, r9
    6f10:	9b08      	ldr	r3, [sp, #32]
    6f12:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6f14:	f10a 0a01 	add.w	sl, sl, #1
    6f18:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6f1c:	459a      	cmp	sl, r3
    6f1e:	ddd1      	ble.n	6ec4 <_lv_blend_fill+0xfc>
    6f20:	e75f      	b.n	6de2 <_lv_blend_fill+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6f22:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
    6f26:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6f2a:	4599      	cmp	r9, r3
    6f2c:	f73f af59 	bgt.w	6de2 <_lv_blend_fill+0x1a>
    6f30:	f8dd a01c 	ldr.w	sl, [sp, #28]
    6f34:	465e      	mov	r6, fp
    6f36:	f8dd b018 	ldr.w	fp, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f3a:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    6f3e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6f42:	429c      	cmp	r4, r3
    6f44:	dc12      	bgt.n	6f6c <_lv_blend_fill+0x1a4>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
    6f46:	fa0f f789 	sxth.w	r7, r9
    6f4a:	9705      	str	r7, [sp, #20]
    6f4c:	9602      	str	r6, [sp, #8]
    6f4e:	f8ad 8004 	strh.w	r8, [sp, #4]
    6f52:	9b05      	ldr	r3, [sp, #20]
    6f54:	9300      	str	r3, [sp, #0]
    6f56:	b223      	sxth	r3, r4
    6f58:	4652      	mov	r2, sl
    6f5a:	4659      	mov	r1, fp
    6f5c:	4628      	mov	r0, r5
    6f5e:	696f      	ldr	r7, [r5, #20]
    6f60:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6f62:	3401      	adds	r4, #1
    6f64:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    6f68:	429c      	cmp	r4, r3
    6f6a:	ddef      	ble.n	6f4c <_lv_blend_fill+0x184>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6f6c:	f109 0901 	add.w	r9, r9, #1
    6f70:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    6f74:	4599      	cmp	r9, r3
    6f76:	dde0      	ble.n	6f3a <_lv_blend_fill+0x172>
    6f78:	e733      	b.n	6de2 <_lv_blend_fill+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    6f7a:	f1b9 0f00 	cmp.w	r9, #0
    6f7e:	f040 83a0 	bne.w	76c2 <_lv_blend_fill+0x8fa>
    6f82:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    6f86:	f8ad 301c 	strh.w	r3, [sp, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6f8a:	4b54      	ldr	r3, [pc, #336]	; (70dc <_lv_blend_fill+0x314>)
    6f8c:	4798      	blx	r3
    6f8e:	4606      	mov	r6, r0
    6f90:	8abb      	ldrh	r3, [r7, #20]
    6f92:	3301      	adds	r3, #1
    6f94:	8a3f      	ldrh	r7, [r7, #16]
    6f96:	1bdf      	subs	r7, r3, r7
    6f98:	b23f      	sxth	r7, r7
    6f9a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    6f9e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    6fa2:	3301      	adds	r3, #1
    6fa4:	1a9b      	subs	r3, r3, r2
    6fa6:	b21b      	sxth	r3, r3
    6fa8:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
    6faa:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    6fac:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    6fb0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    6fb4:	1c41      	adds	r1, r0, #1
    6fb6:	1ac9      	subs	r1, r1, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
    6fb8:	b209      	sxth	r1, r1
    6fba:	910c      	str	r1, [sp, #48]	; 0x30
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    6fbc:	930a      	str	r3, [sp, #40]	; 0x28
    6fbe:	fb03 2207 	mla	r2, r3, r7, r2
    6fc2:	9906      	ldr	r1, [sp, #24]
    6fc4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    6fc8:	9105      	str	r1, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    6fca:	2c01      	cmp	r4, #1
    6fcc:	d029      	beq.n	7022 <_lv_blend_fill+0x25a>
        if(opa > LV_OPA_MAX) {
    6fce:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    6fd2:	f200 8108 	bhi.w	71e6 <_lv_blend_fill+0x41e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6fd6:	4283      	cmp	r3, r0
    6fd8:	f73f af03 	bgt.w	6de2 <_lv_blend_fill+0x1a>
        last_dest_color.full = disp_buf_first[0].full;
    6fdc:	9b06      	ldr	r3, [sp, #24]
    6fde:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6fe2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    6fe6:	f3c6 2cc4 	ubfx	ip, r6, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6fea:	f3c6 1245 	ubfx	r2, r6, #5, #6
    6fee:	4610      	mov	r0, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6ff0:	f006 021f 	and.w	r2, r6, #31
    6ff4:	4614      	mov	r4, r2
                disp_buf_first += disp_w;
    6ff6:	007a      	lsls	r2, r7, #1
    6ff8:	920c      	str	r2, [sp, #48]	; 0x30
    6ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6ffc:	9908      	ldr	r1, [sp, #32]
    6ffe:	3901      	subs	r1, #1
    7000:	9106      	str	r1, [sp, #24]
    7002:	0052      	lsls	r2, r2, #1
    7004:	920e      	str	r2, [sp, #56]	; 0x38
    7006:	4619      	mov	r1, r3
    7008:	f04f 0e00 	mov.w	lr, #0
    700c:	4672      	mov	r2, lr
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    700e:	b2b6      	uxth	r6, r6
    7010:	9608      	str	r6, [sp, #32]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7012:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    7016:	950d      	str	r5, [sp, #52]	; 0x34
    7018:	46a1      	mov	r9, r4
    701a:	f8cd b01c 	str.w	fp, [sp, #28]
    701e:	4683      	mov	fp, r0
    7020:	e345      	b.n	76ae <_lv_blend_fill+0x8e6>
        if(opa > LV_OPA_MAX) {
    7022:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    7026:	d925      	bls.n	7074 <_lv_blend_fill+0x2ac>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    7028:	6a73      	ldr	r3, [r6, #36]	; 0x24
    702a:	b123      	cbz	r3, 7036 <_lv_blend_fill+0x26e>
    702c:	a810      	add	r0, sp, #64	; 0x40
    702e:	4b2e      	ldr	r3, [pc, #184]	; (70e8 <_lv_blend_fill+0x320>)
    7030:	4798      	blx	r3
    7032:	28f0      	cmp	r0, #240	; 0xf0
    7034:	d813      	bhi.n	705e <_lv_blend_fill+0x296>
            for(y = 0; y < draw_area_h; y++) {
    7036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7038:	2b00      	cmp	r3, #0
    703a:	f77f aed2 	ble.w	6de2 <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    703e:	007f      	lsls	r7, r7, #1
    7040:	2400      	movs	r4, #0
                lv_color_fill(disp_buf_first, color, draw_area_w);
    7042:	4d2a      	ldr	r5, [pc, #168]	; (70ec <_lv_blend_fill+0x324>)
    7044:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    7048:	9e05      	ldr	r6, [sp, #20]
    704a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    704c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    7050:	4630      	mov	r0, r6
    7052:	47a8      	blx	r5
                disp_buf_first += disp_w;
    7054:	443e      	add	r6, r7
            for(y = 0; y < draw_area_h; y++) {
    7056:	3401      	adds	r4, #1
    7058:	45a0      	cmp	r8, r4
    705a:	d1f6      	bne.n	704a <_lv_blend_fill+0x282>
    705c:	e6c1      	b.n	6de2 <_lv_blend_fill+0x1a>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
    705e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7062:	f8ad 3000 	strh.w	r3, [sp]
    7066:	6a74      	ldr	r4, [r6, #36]	; 0x24
    7068:	ab10      	add	r3, sp, #64	; 0x40
    706a:	463a      	mov	r2, r7
    706c:	9906      	ldr	r1, [sp, #24]
    706e:	4630      	mov	r0, r6
    7070:	47a0      	blx	r4
    7072:	e6b6      	b.n	6de2 <_lv_blend_fill+0x1a>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    7074:	6a33      	ldr	r3, [r6, #32]
    7076:	2b00      	cmp	r3, #0
    7078:	d03c      	beq.n	70f4 <_lv_blend_fill+0x32c>
    707a:	a810      	add	r0, sp, #64	; 0x40
    707c:	4b1a      	ldr	r3, [pc, #104]	; (70e8 <_lv_blend_fill+0x320>)
    707e:	4798      	blx	r3
    7080:	28f0      	cmp	r0, #240	; 0xf0
    7082:	d937      	bls.n	70f4 <_lv_blend_fill+0x32c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
    7084:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7086:	2900      	cmp	r1, #0
    7088:	dd0c      	ble.n	70a4 <_lv_blend_fill+0x2dc>
    708a:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    708e:	4a18      	ldr	r2, [pc, #96]	; (70f0 <_lv_blend_fill+0x328>)
    7090:	1e93      	subs	r3, r2, #2
    7092:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    7096:	3901      	subs	r1, #1
    7098:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    709c:	f823 8f02 	strh.w	r8, [r3, #2]!
    70a0:	429a      	cmp	r2, r3
    70a2:	d1fb      	bne.n	709c <_lv_blend_fill+0x2d4>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    70a4:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
    70a8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    70ac:	429d      	cmp	r5, r3
    70ae:	f73f ae98 	bgt.w	6de2 <_lv_blend_fill+0x1a>
                    disp_buf_first += disp_w;
    70b2:	ea4f 0847 	mov.w	r8, r7, lsl #1
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
    70b6:	f8df a038 	ldr.w	sl, [pc, #56]	; 70f0 <_lv_blend_fill+0x328>
    70ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
    70be:	465c      	mov	r4, fp
    70c0:	9400      	str	r4, [sp, #0]
    70c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    70c4:	4652      	mov	r2, sl
    70c6:	4649      	mov	r1, r9
    70c8:	4630      	mov	r0, r6
    70ca:	6a37      	ldr	r7, [r6, #32]
    70cc:	47b8      	blx	r7
                    disp_buf_first += disp_w;
    70ce:	44c1      	add	r9, r8
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    70d0:	3501      	adds	r5, #1
    70d2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    70d6:	429d      	cmp	r5, r3
    70d8:	ddf2      	ble.n	70c0 <_lv_blend_fill+0x2f8>
    70da:	e682      	b.n	6de2 <_lv_blend_fill+0x1a>
    70dc:	0000574d 	.word	0x0000574d
    70e0:	00010221 	.word	0x00010221
    70e4:	000106dd 	.word	0x000106dd
    70e8:	000106c1 	.word	0x000106c1
    70ec:	00010cff 	.word	0x00010cff
    70f0:	20002690 	.word	0x20002690
            lv_color_t last_dest_color = LV_COLOR_BLACK;
    70f4:	f04f 0e00 	mov.w	lr, #0
    70f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    70fc:	f002 091f 	and.w	r9, r2, #31
    7100:	f3c2 1845 	ubfx	r8, r2, #5, #6
    7104:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7108:	fb0b f30c 	mul.w	r3, fp, ip
    710c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    7110:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    7114:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7118:	fb0b f308 	mul.w	r3, fp, r8
    711c:	eb03 2403 	add.w	r4, r3, r3, lsl #8
    7120:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
    7124:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7128:	fb0b f309 	mul.w	r3, fp, r9
    712c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7130:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7134:	f3c3 52c4 	ubfx	r2, r3, #23, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    7138:	fa1f f38b 	uxth.w	r3, fp
    713c:	fb0c fc03 	mul.w	ip, ip, r3
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    7140:	fb08 f803 	mul.w	r8, r8, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    7144:	fb09 f903 	mul.w	r9, r9, r3
            lv_opa_t opa_inv = 255 - opa;
    7148:	ea6f 030b 	mvn.w	r3, fp
    714c:	b2db      	uxtb	r3, r3
            for(y = 0; y < draw_area_h; y++) {
    714e:	980c      	ldr	r0, [sp, #48]	; 0x30
    7150:	2800      	cmp	r0, #0
    7152:	f77f ae46 	ble.w	6de2 <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    7156:	0078      	lsls	r0, r7, #1
    7158:	9007      	str	r0, [sp, #28]
    715a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    715c:	0040      	lsls	r0, r0, #1
    715e:	9008      	str	r0, [sp, #32]
    7160:	2000      	movs	r0, #0
    7162:	9006      	str	r0, [sp, #24]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    7164:	b29f      	uxth	r7, r3
    7166:	e036      	b.n	71d6 <_lv_blend_fill+0x40e>
                    disp_buf_first[x] = last_res_color;
    7168:	7830      	ldrb	r0, [r6, #0]
    716a:	f362 0004 	bfi	r0, r2, #0, #5
    716e:	7030      	strb	r0, [r6, #0]
    7170:	8830      	ldrh	r0, [r6, #0]
    7172:	f364 104a 	bfi	r0, r4, #5, #6
    7176:	8030      	strh	r0, [r6, #0]
    7178:	0a00      	lsrs	r0, r0, #8
    717a:	f361 00c7 	bfi	r0, r1, #3, #5
    717e:	7070      	strb	r0, [r6, #1]
    7180:	3302      	adds	r3, #2
                for(x = 0; x < draw_area_w; x++) {
    7182:	459b      	cmp	fp, r3
    7184:	d01c      	beq.n	71c0 <_lv_blend_fill+0x3f8>
                    if(last_dest_color.full != disp_buf_first[x].full) {
    7186:	461e      	mov	r6, r3
    7188:	fa1f f08e 	uxth.w	r0, lr
    718c:	f8b3 a000 	ldrh.w	sl, [r3]
    7190:	4550      	cmp	r0, sl
    7192:	d0e9      	beq.n	7168 <_lv_blend_fill+0x3a0>
                        last_dest_color = disp_buf_first[x];
    7194:	f8b3 e000 	ldrh.w	lr, [r3]
    7198:	7859      	ldrb	r1, [r3, #1]
    719a:	08c9      	lsrs	r1, r1, #3
    719c:	fb01 c107 	mla	r1, r1, r7, ip
    71a0:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    71a4:	f3ce 1445 	ubfx	r4, lr, #5, #6
    71a8:	fb04 8407 	mla	r4, r4, r7, r8
    71ac:	f3c4 2405 	ubfx	r4, r4, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    71b0:	781a      	ldrb	r2, [r3, #0]
    71b2:	f002 021f 	and.w	r2, r2, #31
    71b6:	fb02 9207 	mla	r2, r2, r7, r9
    71ba:	f3c2 2204 	ubfx	r2, r2, #8, #5
    71be:	e7d3      	b.n	7168 <_lv_blend_fill+0x3a0>
                disp_buf_first += disp_w;
    71c0:	9b05      	ldr	r3, [sp, #20]
    71c2:	9807      	ldr	r0, [sp, #28]
    71c4:	4403      	add	r3, r0
    71c6:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
    71c8:	9b06      	ldr	r3, [sp, #24]
    71ca:	3301      	adds	r3, #1
    71cc:	9306      	str	r3, [sp, #24]
    71ce:	980c      	ldr	r0, [sp, #48]	; 0x30
    71d0:	4298      	cmp	r0, r3
    71d2:	f43f ae06 	beq.w	6de2 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    71d6:	2d00      	cmp	r5, #0
    71d8:	ddf2      	ble.n	71c0 <_lv_blend_fill+0x3f8>
    71da:	9805      	ldr	r0, [sp, #20]
    71dc:	4603      	mov	r3, r0
    71de:	9e08      	ldr	r6, [sp, #32]
    71e0:	eb00 0b06 	add.w	fp, r0, r6
    71e4:	e7cf      	b.n	7186 <_lv_blend_fill+0x3be>
            for(y = 0; y < draw_area_h; y++) {
    71e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71e8:	2b00      	cmp	r3, #0
    71ea:	f77f adfa 	ble.w	6de2 <_lv_blend_fill+0x1a>
        int32_t x_end4 = draw_area_w - 4;
    71ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    71f0:	3b04      	subs	r3, #4
    71f2:	930d      	str	r3, [sp, #52]	; 0x34
                disp_buf_first += disp_w;
    71f4:	007b      	lsls	r3, r7, #1
    71f6:	930f      	str	r3, [sp, #60]	; 0x3c
    71f8:	2300      	movs	r3, #0
    71fa:	930a      	str	r3, [sp, #40]	; 0x28
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    71fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    7200:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7204:	f3c2 1e45 	ubfx	lr, r2, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7208:	f3c2 0304 	ubfx	r3, r2, #0, #5
    720c:	9306      	str	r3, [sp, #24]
    720e:	e1de      	b.n	75ce <_lv_blend_fill+0x806>
                    FILL_NORMAL_MASK_PX(x, color)
    7210:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7214:	803b      	strh	r3, [r7, #0]
    7216:	4643      	mov	r3, r8
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7218:	3101      	adds	r1, #1
    721a:	428d      	cmp	r5, r1
    721c:	f000 8342 	beq.w	78a4 <_lv_blend_fill+0xadc>
    7220:	3702      	adds	r7, #2
    7222:	f018 0f03 	tst.w	r8, #3
    7226:	f000 834b 	beq.w	78c0 <_lv_blend_fill+0xaf8>
                    FILL_NORMAL_MASK_PX(x, color)
    722a:	f818 3b01 	ldrb.w	r3, [r8], #1
    722e:	2b00      	cmp	r3, #0
    7230:	d0f1      	beq.n	7216 <_lv_blend_fill+0x44e>
    7232:	2bff      	cmp	r3, #255	; 0xff
    7234:	d0ec      	beq.n	7210 <_lv_blend_fill+0x448>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7236:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    723a:	787a      	ldrb	r2, [r7, #1]
    723c:	08d2      	lsrs	r2, r2, #3
    723e:	fb09 f202 	mul.w	r2, r9, r2
    7242:	fb03 220c 	mla	r2, r3, ip, r2
    7246:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    724a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    724e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7252:	8838      	ldrh	r0, [r7, #0]
    7254:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7258:	fb09 f000 	mul.w	r0, r9, r0
    725c:	fb03 000e 	mla	r0, r3, lr, r0
    7260:	eb00 2600 	add.w	r6, r0, r0, lsl #8
    7264:	eb00 10c6 	add.w	r0, r0, r6, lsl #7
    7268:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    726c:	783e      	ldrb	r6, [r7, #0]
    726e:	f006 0a1f 	and.w	sl, r6, #31
    7272:	fb09 f90a 	mul.w	r9, r9, sl
    7276:	fb03 9304 	mla	r3, r3, r4, r9
    727a:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    727e:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    7282:	0ddb      	lsrs	r3, r3, #23
    7284:	f363 0604 	bfi	r6, r3, #0, #5
    7288:	703e      	strb	r6, [r7, #0]
    728a:	883b      	ldrh	r3, [r7, #0]
    728c:	f360 134a 	bfi	r3, r0, #5, #6
    7290:	803b      	strh	r3, [r7, #0]
    7292:	0a1b      	lsrs	r3, r3, #8
    7294:	f362 03c7 	bfi	r3, r2, #3, #5
    7298:	707b      	strb	r3, [r7, #1]
    729a:	e7bc      	b.n	7216 <_lv_blend_fill+0x44e>
                            disp_buf_first[x] = color;
    729c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    72a0:	f820 4c06 	strh.w	r4, [r0, #-6]
                            disp_buf_first[x + 1] = color;
    72a4:	f820 4c04 	strh.w	r4, [r0, #-4]
                            disp_buf_first[x + 2] = color;
    72a8:	f820 4c02 	strh.w	r4, [r0, #-2]
                            disp_buf_first[x + 3] = color;
    72ac:	8004      	strh	r4, [r0, #0]
                for(; x <= x_end4; x += 4) {
    72ae:	3104      	adds	r1, #4
    72b0:	3304      	adds	r3, #4
    72b2:	3008      	adds	r0, #8
    72b4:	428f      	cmp	r7, r1
    72b6:	f2c0 8129 	blt.w	750c <_lv_blend_fill+0x744>
    72ba:	461a      	mov	r2, r3
                    if(*mask32) {
    72bc:	f853 4c04 	ldr.w	r4, [r3, #-4]
    72c0:	2c00      	cmp	r4, #0
    72c2:	d0f4      	beq.n	72ae <_lv_blend_fill+0x4e6>
                        if((*mask32) == 0xFFFFFFFF) {
    72c4:	f1b4 3fff 	cmp.w	r4, #4294967295
    72c8:	d0e8      	beq.n	729c <_lv_blend_fill+0x4d4>
                            FILL_NORMAL_MASK_PX(x, color)
    72ca:	f813 8c04 	ldrb.w	r8, [r3, #-4]
    72ce:	f1b8 0f00 	cmp.w	r8, #0
    72d2:	d03f      	beq.n	7354 <_lv_blend_fill+0x58c>
    72d4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    72d8:	f000 8105 	beq.w	74e6 <_lv_blend_fill+0x71e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    72dc:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    72e0:	f810 4c05 	ldrb.w	r4, [r0, #-5]
    72e4:	08e4      	lsrs	r4, r4, #3
    72e6:	fb06 f404 	mul.w	r4, r6, r4
    72ea:	fb08 440c 	mla	r4, r8, ip, r4
    72ee:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    72f2:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    72f6:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    72fa:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    72fc:	f830 5c06 	ldrh.w	r5, [r0, #-6]
    7300:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7304:	fb06 f505 	mul.w	r5, r6, r5
    7308:	fb08 550e 	mla	r5, r8, lr, r5
    730c:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7310:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7314:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7318:	f810 9c06 	ldrb.w	r9, [r0, #-6]
    731c:	f009 0b1f 	and.w	fp, r9, #31
    7320:	fb06 f60b 	mul.w	r6, r6, fp
    7324:	9c06      	ldr	r4, [sp, #24]
    7326:	fb08 6804 	mla	r8, r8, r4, r6
    732a:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    732e:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7332:	0df6      	lsrs	r6, r6, #23
    7334:	f366 0904 	bfi	r9, r6, #0, #5
    7338:	f800 9c06 	strb.w	r9, [r0, #-6]
    733c:	f830 6c06 	ldrh.w	r6, [r0, #-6]
    7340:	f365 164a 	bfi	r6, r5, #5, #6
    7344:	f820 6c06 	strh.w	r6, [r0, #-6]
    7348:	0a36      	lsrs	r6, r6, #8
    734a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    734c:	f364 06c7 	bfi	r6, r4, #3, #5
    7350:	f800 6c05 	strb.w	r6, [r0, #-5]
                            FILL_NORMAL_MASK_PX(x + 1, color)
    7354:	f812 8c03 	ldrb.w	r8, [r2, #-3]
    7358:	f1b8 0f00 	cmp.w	r8, #0
    735c:	d03f      	beq.n	73de <_lv_blend_fill+0x616>
    735e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7362:	f000 80c5 	beq.w	74f0 <_lv_blend_fill+0x728>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7366:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    736a:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    736e:	08e4      	lsrs	r4, r4, #3
    7370:	fb06 f404 	mul.w	r4, r6, r4
    7374:	fb08 440c 	mla	r4, r8, ip, r4
    7378:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    737c:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7380:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    7384:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7386:	f830 5c04 	ldrh.w	r5, [r0, #-4]
    738a:	f3c5 1545 	ubfx	r5, r5, #5, #6
    738e:	fb06 f505 	mul.w	r5, r6, r5
    7392:	fb08 550e 	mla	r5, r8, lr, r5
    7396:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    739a:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    739e:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    73a2:	f810 9c04 	ldrb.w	r9, [r0, #-4]
    73a6:	f009 0b1f 	and.w	fp, r9, #31
    73aa:	fb06 f60b 	mul.w	r6, r6, fp
    73ae:	9c06      	ldr	r4, [sp, #24]
    73b0:	fb08 6804 	mla	r8, r8, r4, r6
    73b4:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    73b8:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    73bc:	0df6      	lsrs	r6, r6, #23
    73be:	f366 0904 	bfi	r9, r6, #0, #5
    73c2:	f800 9c04 	strb.w	r9, [r0, #-4]
    73c6:	f830 6c04 	ldrh.w	r6, [r0, #-4]
    73ca:	f365 164a 	bfi	r6, r5, #5, #6
    73ce:	f820 6c04 	strh.w	r6, [r0, #-4]
    73d2:	0a36      	lsrs	r6, r6, #8
    73d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    73d6:	f364 06c7 	bfi	r6, r4, #3, #5
    73da:	f800 6c03 	strb.w	r6, [r0, #-3]
                            FILL_NORMAL_MASK_PX(x + 2, color)
    73de:	f812 8c02 	ldrb.w	r8, [r2, #-2]
    73e2:	f1b8 0f00 	cmp.w	r8, #0
    73e6:	d03f      	beq.n	7468 <_lv_blend_fill+0x6a0>
    73e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    73ec:	f000 8085 	beq.w	74fa <_lv_blend_fill+0x732>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    73f0:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    73f4:	f810 4c01 	ldrb.w	r4, [r0, #-1]
    73f8:	08e4      	lsrs	r4, r4, #3
    73fa:	fb06 f404 	mul.w	r4, r6, r4
    73fe:	fb08 440c 	mla	r4, r8, ip, r4
    7402:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    7406:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    740a:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    740e:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7410:	f830 5c02 	ldrh.w	r5, [r0, #-2]
    7414:	f3c5 1545 	ubfx	r5, r5, #5, #6
    7418:	fb06 f505 	mul.w	r5, r6, r5
    741c:	fb08 550e 	mla	r5, r8, lr, r5
    7420:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    7424:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    7428:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    742c:	f810 9c02 	ldrb.w	r9, [r0, #-2]
    7430:	f009 0b1f 	and.w	fp, r9, #31
    7434:	fb06 f60b 	mul.w	r6, r6, fp
    7438:	9c06      	ldr	r4, [sp, #24]
    743a:	fb08 6804 	mla	r8, r8, r4, r6
    743e:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    7442:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    7446:	0df6      	lsrs	r6, r6, #23
    7448:	f366 0904 	bfi	r9, r6, #0, #5
    744c:	f800 9c02 	strb.w	r9, [r0, #-2]
    7450:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    7454:	f365 164a 	bfi	r6, r5, #5, #6
    7458:	f820 6c02 	strh.w	r6, [r0, #-2]
    745c:	0a36      	lsrs	r6, r6, #8
    745e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7460:	f364 06c7 	bfi	r6, r4, #3, #5
    7464:	f800 6c01 	strb.w	r6, [r0, #-1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
    7468:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    746c:	f1b8 0f00 	cmp.w	r8, #0
    7470:	f43f af1d 	beq.w	72ae <_lv_blend_fill+0x4e6>
    7474:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7478:	d044      	beq.n	7504 <_lv_blend_fill+0x73c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    747a:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    747e:	7844      	ldrb	r4, [r0, #1]
    7480:	08e4      	lsrs	r4, r4, #3
    7482:	fb06 f404 	mul.w	r4, r6, r4
    7486:	fb08 440c 	mla	r4, r8, ip, r4
    748a:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    748e:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    7492:	f3c4 5bc4 	ubfx	fp, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7496:	8805      	ldrh	r5, [r0, #0]
    7498:	f3c5 1545 	ubfx	r5, r5, #5, #6
    749c:	fb06 f505 	mul.w	r5, r6, r5
    74a0:	fb08 550e 	mla	r5, r8, lr, r5
    74a4:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    74a8:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    74ac:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    74b0:	f890 9000 	ldrb.w	r9, [r0]
    74b4:	f009 0a1f 	and.w	sl, r9, #31
    74b8:	fb06 f60a 	mul.w	r6, r6, sl
    74bc:	9c06      	ldr	r4, [sp, #24]
    74be:	fb08 6804 	mla	r8, r8, r4, r6
    74c2:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    74c6:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    74ca:	0df6      	lsrs	r6, r6, #23
    74cc:	f366 0904 	bfi	r9, r6, #0, #5
    74d0:	f880 9000 	strb.w	r9, [r0]
    74d4:	8806      	ldrh	r6, [r0, #0]
    74d6:	f365 164a 	bfi	r6, r5, #5, #6
    74da:	8006      	strh	r6, [r0, #0]
    74dc:	0a36      	lsrs	r6, r6, #8
    74de:	f36b 06c7 	bfi	r6, fp, #3, #5
    74e2:	7046      	strb	r6, [r0, #1]
    74e4:	e6e3      	b.n	72ae <_lv_blend_fill+0x4e6>
                            FILL_NORMAL_MASK_PX(x, color)
    74e6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    74ea:	f820 4c06 	strh.w	r4, [r0, #-6]
    74ee:	e731      	b.n	7354 <_lv_blend_fill+0x58c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
    74f0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    74f4:	f820 4c04 	strh.w	r4, [r0, #-4]
    74f8:	e771      	b.n	73de <_lv_blend_fill+0x616>
                            FILL_NORMAL_MASK_PX(x + 2, color)
    74fa:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    74fe:	f820 4c02 	strh.w	r4, [r0, #-2]
    7502:	e7b1      	b.n	7468 <_lv_blend_fill+0x6a0>
                            FILL_NORMAL_MASK_PX(x + 3, color)
    7504:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    7508:	8004      	strh	r4, [r0, #0]
    750a:	e6d0      	b.n	72ae <_lv_blend_fill+0x4e6>
    750c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                for(; x < draw_area_w ; x++) {
    750e:	428d      	cmp	r5, r1
    7510:	dd4e      	ble.n	75b0 <_lv_blend_fill+0x7e8>
    7512:	1e54      	subs	r4, r2, #1
    7514:	9b05      	ldr	r3, [sp, #20]
    7516:	eb03 0841 	add.w	r8, r3, r1, lsl #1
    751a:	9e06      	ldr	r6, [sp, #24]
    751c:	e008      	b.n	7530 <_lv_blend_fill+0x768>
                    FILL_NORMAL_MASK_PX(x, color)
    751e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7522:	f8a8 3000 	strh.w	r3, [r8]
                for(; x < draw_area_w ; x++) {
    7526:	3101      	adds	r1, #1
    7528:	f108 0802 	add.w	r8, r8, #2
    752c:	428d      	cmp	r5, r1
    752e:	dd3f      	ble.n	75b0 <_lv_blend_fill+0x7e8>
                    FILL_NORMAL_MASK_PX(x, color)
    7530:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7534:	2b00      	cmp	r3, #0
    7536:	d0f6      	beq.n	7526 <_lv_blend_fill+0x75e>
    7538:	2bff      	cmp	r3, #255	; 0xff
    753a:	d0f0      	beq.n	751e <_lv_blend_fill+0x756>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    753c:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    7540:	f898 2001 	ldrb.w	r2, [r8, #1]
    7544:	08d2      	lsrs	r2, r2, #3
    7546:	fb09 f202 	mul.w	r2, r9, r2
    754a:	fb03 220c 	mla	r2, r3, ip, r2
    754e:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    7552:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    7556:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    755a:	f8b8 0000 	ldrh.w	r0, [r8]
    755e:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7562:	fb09 f000 	mul.w	r0, r9, r0
    7566:	fb03 000e 	mla	r0, r3, lr, r0
    756a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    756e:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
    7572:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7576:	f898 7000 	ldrb.w	r7, [r8]
    757a:	f007 0a1f 	and.w	sl, r7, #31
    757e:	fb09 f90a 	mul.w	r9, r9, sl
    7582:	fb03 9306 	mla	r3, r3, r6, r9
    7586:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    758a:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    758e:	0ddb      	lsrs	r3, r3, #23
    7590:	f363 0704 	bfi	r7, r3, #0, #5
    7594:	f888 7000 	strb.w	r7, [r8]
    7598:	f8b8 3000 	ldrh.w	r3, [r8]
    759c:	f360 134a 	bfi	r3, r0, #5, #6
    75a0:	f8a8 3000 	strh.w	r3, [r8]
    75a4:	0a1b      	lsrs	r3, r3, #8
    75a6:	f362 03c7 	bfi	r3, r2, #3, #5
    75aa:	f888 3001 	strb.w	r3, [r8, #1]
    75ae:	e7ba      	b.n	7526 <_lv_blend_fill+0x75e>
                disp_buf_first += disp_w;
    75b0:	9b05      	ldr	r3, [sp, #20]
    75b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    75b4:	4413      	add	r3, r2
    75b6:	9305      	str	r3, [sp, #20]
    75b8:	9b08      	ldr	r3, [sp, #32]
    75ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    75bc:	4413      	add	r3, r2
    75be:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
    75c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75c2:	3301      	adds	r3, #1
    75c4:	930a      	str	r3, [sp, #40]	; 0x28
    75c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75c8:	429a      	cmp	r2, r3
    75ca:	f43f ac0a 	beq.w	6de2 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    75ce:	2d00      	cmp	r5, #0
    75d0:	f340 8166 	ble.w	78a0 <_lv_blend_fill+0xad8>
    75d4:	9a08      	ldr	r2, [sp, #32]
    75d6:	f012 0f03 	tst.w	r2, #3
    75da:	f000 816f 	beq.w	78bc <_lv_blend_fill+0xaf4>
    75de:	9f05      	ldr	r7, [sp, #20]
    75e0:	4690      	mov	r8, r2
    75e2:	2100      	movs	r1, #0
    75e4:	9c06      	ldr	r4, [sp, #24]
    75e6:	e620      	b.n	722a <_lv_blend_fill+0x462>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    75e8:	2aff      	cmp	r2, #255	; 0xff
    75ea:	d002      	beq.n	75f2 <_lv_blend_fill+0x82a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    75ec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    75f0:	e004      	b.n	75fc <_lv_blend_fill+0x834>
    75f2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    75f6:	882a      	ldrh	r2, [r5, #0]
    75f8:	429a      	cmp	r2, r3
    75fa:	d032      	beq.n	7662 <_lv_blend_fill+0x89a>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    75fc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    7600:	d042      	beq.n	7688 <_lv_blend_fill+0x8c0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7602:	f1ce 04ff 	rsb	r4, lr, #255	; 0xff
    7606:	786b      	ldrb	r3, [r5, #1]
    7608:	08db      	lsrs	r3, r3, #3
    760a:	fb0e f20c 	mul.w	r2, lr, ip
    760e:	fb04 2303 	mla	r3, r4, r3, r2
    7612:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7616:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    761a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    761e:	882a      	ldrh	r2, [r5, #0]
    7620:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7624:	fb0b f10e 	mul.w	r1, fp, lr
    7628:	fb04 1202 	mla	r2, r4, r2, r1
    762c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    7630:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    7634:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7638:	7829      	ldrb	r1, [r5, #0]
    763a:	f001 011f 	and.w	r1, r1, #31
    763e:	fb09 f60e 	mul.w	r6, r9, lr
    7642:	fb04 6101 	mla	r1, r4, r1, r6
    7646:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    764a:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    764e:	0dc9      	lsrs	r1, r1, #23
    7650:	f361 0a04 	bfi	sl, r1, #0, #5
    7654:	f362 1a4a 	bfi	sl, r2, #5, #6
    7658:	f363 2acf 	bfi	sl, r3, #11, #5
    765c:	fa1f f18a 	uxth.w	r1, sl
                            last_dest_color.full = disp_buf_first[x].full;
    7660:	882b      	ldrh	r3, [r5, #0]
                        disp_buf_first[x] = last_res_color;
    7662:	8029      	strh	r1, [r5, #0]
    7664:	4602      	mov	r2, r0
    7666:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w; x++) {
    7668:	45a8      	cmp	r8, r5
    766a:	d00f      	beq.n	768c <_lv_blend_fill+0x8c4>
                    if(*mask_tmp_x) {
    766c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    7670:	2800      	cmp	r0, #0
    7672:	d0f8      	beq.n	7666 <_lv_blend_fill+0x89e>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7674:	4290      	cmp	r0, r2
    7676:	d0be      	beq.n	75f6 <_lv_blend_fill+0x82e>
    7678:	28ff      	cmp	r0, #255	; 0xff
    767a:	d0b5      	beq.n	75e8 <_lv_blend_fill+0x820>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
    767c:	9b07      	ldr	r3, [sp, #28]
    767e:	fb03 fe00 	mul.w	lr, r3, r0
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7682:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    7686:	e7b9      	b.n	75fc <_lv_blend_fill+0x834>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    7688:	9908      	ldr	r1, [sp, #32]
    768a:	e7e9      	b.n	7660 <_lv_blend_fill+0x898>
                disp_buf_first += disp_w;
    768c:	9805      	ldr	r0, [sp, #20]
    768e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7690:	4420      	add	r0, r4
    7692:	9005      	str	r0, [sp, #20]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7694:	980a      	ldr	r0, [sp, #40]	; 0x28
    7696:	3001      	adds	r0, #1
    7698:	4604      	mov	r4, r0
    769a:	900a      	str	r0, [sp, #40]	; 0x28
    769c:	9806      	ldr	r0, [sp, #24]
    769e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    76a0:	4428      	add	r0, r5
    76a2:	9006      	str	r0, [sp, #24]
    76a4:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    76a8:	4284      	cmp	r4, r0
    76aa:	f73f ab9a 	bgt.w	6de2 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    76ae:	980d      	ldr	r0, [sp, #52]	; 0x34
    76b0:	2800      	cmp	r0, #0
    76b2:	ddeb      	ble.n	768c <_lv_blend_fill+0x8c4>
    76b4:	9805      	ldr	r0, [sp, #20]
    76b6:	4605      	mov	r5, r0
    76b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    76ba:	eb00 0804 	add.w	r8, r0, r4
    76be:	9f06      	ldr	r7, [sp, #24]
    76c0:	e7d4      	b.n	766c <_lv_blend_fill+0x8a4>
    76c2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
    switch(mode) {
    76c6:	f1b9 0f01 	cmp.w	r9, #1
    76ca:	d036      	beq.n	773a <_lv_blend_fill+0x972>
    76cc:	f1b9 0f02 	cmp.w	r9, #2
    76d0:	f47f ab87 	bne.w	6de2 <_lv_blend_fill+0x1a>
            blend_fp = color_blend_true_color_subtractive;
    76d4:	4b7d      	ldr	r3, [pc, #500]	; (78cc <_lv_blend_fill+0xb04>)
    76d6:	9305      	str	r3, [sp, #20]
    76d8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    76dc:	f002 081f 	and.w	r8, r2, #31
    76e0:	f3c2 1645 	ubfx	r6, r2, #5, #6
    76e4:	f3c2 23c4 	ubfx	r3, r2, #11, #5
    76e8:	4699      	mov	r9, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    76ea:	8aba      	ldrh	r2, [r7, #20]
    76ec:	3201      	adds	r2, #1
    76ee:	8a3b      	ldrh	r3, [r7, #16]
    76f0:	1ad3      	subs	r3, r2, r3
    76f2:	b21f      	sxth	r7, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    76f4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    76f8:	fb0c f307 	mul.w	r3, ip, r7
    76fc:	9a06      	ldr	r2, [sp, #24]
    76fe:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    7702:	9207      	str	r2, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7704:	2c01      	cmp	r4, #1
    7706:	d01b      	beq.n	7740 <_lv_blend_fill+0x978>
    7708:	3001      	adds	r0, #1
    770a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    770c:	1a80      	subs	r0, r0, r2
    770e:	b202      	sxth	r2, r0
    7710:	920c      	str	r2, [sp, #48]	; 0x30
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    7712:	9a08      	ldr	r2, [sp, #32]
    7714:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7716:	1a52      	subs	r2, r2, r1
    7718:	9208      	str	r2, [sp, #32]
        last_dest_color.full = disp_buf_tmp[0].full;
    771a:	9a06      	ldr	r2, [sp, #24]
    771c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7720:	45f4      	cmp	ip, lr
    7722:	f73f ab5e 	bgt.w	6de2 <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    7726:	007b      	lsls	r3, r7, #1
    7728:	930b      	str	r3, [sp, #44]	; 0x2c
    772a:	4610      	mov	r0, r2
    772c:	2100      	movs	r1, #0
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    772e:	f8cd b018 	str.w	fp, [sp, #24]
    7732:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    7736:	46cb      	mov	fp, r9
    7738:	e0a5      	b.n	7886 <_lv_blend_fill+0xabe>
            blend_fp = color_blend_true_color_additive;
    773a:	4b65      	ldr	r3, [pc, #404]	; (78d0 <_lv_blend_fill+0xb08>)
    773c:	9305      	str	r3, [sp, #20]
    773e:	e7cb      	b.n	76d8 <_lv_blend_fill+0x910>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
    7740:	f04f 0a00 	mov.w	sl, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7744:	fb0b f309 	mul.w	r3, fp, r9
    7748:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    774c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    7750:	f3c3 50c4 	ubfx	r0, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7754:	fb0b f306 	mul.w	r3, fp, r6
    7758:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    775c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7760:	f3c3 52c5 	ubfx	r2, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7764:	fb0b f308 	mul.w	r3, fp, r8
    7768:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    776c:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    7770:	f3c3 53c4 	ubfx	r3, r3, #23, #5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7774:	45f4      	cmp	ip, lr
    7776:	f73f ab34 	bgt.w	6de2 <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    777a:	0079      	lsls	r1, r7, #1
    777c:	9108      	str	r1, [sp, #32]
    777e:	f8cd b018 	str.w	fp, [sp, #24]
    7782:	46cb      	mov	fp, r9
    7784:	e03a      	b.n	77fc <_lv_blend_fill+0xa34>
                disp_buf_tmp[x] = last_res_color;
    7786:	7821      	ldrb	r1, [r4, #0]
    7788:	f363 0104 	bfi	r1, r3, #0, #5
    778c:	7021      	strb	r1, [r4, #0]
    778e:	8821      	ldrh	r1, [r4, #0]
    7790:	f362 114a 	bfi	r1, r2, #5, #6
    7794:	8021      	strh	r1, [r4, #0]
    7796:	0a09      	lsrs	r1, r1, #8
    7798:	f360 01c7 	bfi	r1, r0, #3, #5
    779c:	7061      	strb	r1, [r4, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    779e:	f109 0901 	add.w	r9, r9, #1
    77a2:	3702      	adds	r7, #2
    77a4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    77a8:	4589      	cmp	r9, r1
    77aa:	dc1a      	bgt.n	77e2 <_lv_blend_fill+0xa1a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
    77ac:	463c      	mov	r4, r7
    77ae:	fa1f f18a 	uxth.w	r1, sl
    77b2:	f8b7 e000 	ldrh.w	lr, [r7]
    77b6:	4571      	cmp	r1, lr
    77b8:	d0e5      	beq.n	7786 <_lv_blend_fill+0x9be>
                    last_dest_color = disp_buf_tmp[x];
    77ba:	f8b7 a000 	ldrh.w	sl, [r7]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
    77be:	f368 0504 	bfi	r5, r8, #0, #5
    77c2:	f366 154a 	bfi	r5, r6, #5, #6
    77c6:	f36b 25cf 	bfi	r5, fp, #11, #5
    77ca:	9a06      	ldr	r2, [sp, #24]
    77cc:	4651      	mov	r1, sl
    77ce:	4628      	mov	r0, r5
    77d0:	9b05      	ldr	r3, [sp, #20]
    77d2:	4798      	blx	r3
    77d4:	f000 031f 	and.w	r3, r0, #31
    77d8:	f3c0 1245 	ubfx	r2, r0, #5, #6
    77dc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    77e0:	e7d1      	b.n	7786 <_lv_blend_fill+0x9be>
            disp_buf_tmp += disp_w;
    77e2:	9907      	ldr	r1, [sp, #28]
    77e4:	9c08      	ldr	r4, [sp, #32]
    77e6:	4421      	add	r1, r4
    77e8:	9107      	str	r1, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    77ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    77ec:	3101      	adds	r1, #1
    77ee:	460c      	mov	r4, r1
    77f0:	9109      	str	r1, [sp, #36]	; 0x24
    77f2:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
    77f6:	428c      	cmp	r4, r1
    77f8:	f73f aaf3 	bgt.w	6de2 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    77fc:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
    7800:	46b9      	mov	r9, r7
    7802:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    7806:	428f      	cmp	r7, r1
    7808:	dceb      	bgt.n	77e2 <_lv_blend_fill+0xa1a>
    780a:	9907      	ldr	r1, [sp, #28]
    780c:	eb01 0747 	add.w	r7, r1, r7, lsl #1
    7810:	e7cc      	b.n	77ac <_lv_blend_fill+0x9e4>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    7812:	2bf9      	cmp	r3, #249	; 0xf9
    7814:	bf9d      	ittte	ls
    7816:	9a0a      	ldrls	r2, [sp, #40]	; 0x28
    7818:	4353      	mulls	r3, r2
    781a:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    781e:	9a06      	ldrhi	r2, [sp, #24]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
    7820:	f368 0504 	bfi	r5, r8, #0, #5
    7824:	f366 154a 	bfi	r5, r6, #5, #6
    7828:	f36b 25cf 	bfi	r5, fp, #11, #5
    782c:	8821      	ldrh	r1, [r4, #0]
    782e:	4628      	mov	r0, r5
    7830:	9b05      	ldr	r3, [sp, #20]
    7832:	4798      	blx	r3
    7834:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
    7836:	f89a 1000 	ldrb.w	r1, [sl]
                    last_dest_color.full = disp_buf_tmp[x].full;
    783a:	8822      	ldrh	r2, [r4, #0]
                disp_buf_tmp[x] = last_res_color;
    783c:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    783e:	f109 0901 	add.w	r9, r9, #1
    7842:	3701      	adds	r7, #1
    7844:	3402      	adds	r4, #2
    7846:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    784a:	4599      	cmp	r9, r3
    784c:	dc0a      	bgt.n	7864 <_lv_blend_fill+0xa9c>
    784e:	46ba      	mov	sl, r7
                if(mask_tmp[x] == 0) continue;
    7850:	783b      	ldrb	r3, [r7, #0]
    7852:	2b00      	cmp	r3, #0
    7854:	d0f3      	beq.n	783e <_lv_blend_fill+0xa76>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
    7856:	428b      	cmp	r3, r1
    7858:	d1db      	bne.n	7812 <_lv_blend_fill+0xa4a>
    785a:	f8b4 e000 	ldrh.w	lr, [r4]
    785e:	4596      	cmp	lr, r2
    7860:	d1d7      	bne.n	7812 <_lv_blend_fill+0xa4a>
    7862:	e7eb      	b.n	783c <_lv_blend_fill+0xa74>
            disp_buf_tmp += disp_w;
    7864:	9b07      	ldr	r3, [sp, #28]
    7866:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7868:	4423      	add	r3, r4
    786a:	9307      	str	r3, [sp, #28]
    786c:	9b08      	ldr	r3, [sp, #32]
    786e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    7870:	4423      	add	r3, r4
    7872:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7874:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7876:	3301      	adds	r3, #1
    7878:	461c      	mov	r4, r3
    787a:	9309      	str	r3, [sp, #36]	; 0x24
    787c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7880:	429c      	cmp	r4, r3
    7882:	f73f aaae 	bgt.w	6de2 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7886:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    788a:	46a1      	mov	r9, r4
    788c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7890:	429c      	cmp	r4, r3
    7892:	dce7      	bgt.n	7864 <_lv_blend_fill+0xa9c>
    7894:	9b08      	ldr	r3, [sp, #32]
    7896:	191f      	adds	r7, r3, r4
    7898:	9b07      	ldr	r3, [sp, #28]
    789a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    789e:	e7d6      	b.n	784e <_lv_blend_fill+0xa86>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    78a0:	9b08      	ldr	r3, [sp, #32]
    78a2:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    78a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    78a6:	428a      	cmp	r2, r1
    78a8:	f6ff ae82 	blt.w	75b0 <_lv_blend_fill+0x7e8>
    78ac:	3304      	adds	r3, #4
    78ae:	1cc8      	adds	r0, r1, #3
    78b0:	9a05      	ldr	r2, [sp, #20]
    78b2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    78b6:	950e      	str	r5, [sp, #56]	; 0x38
    78b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    78ba:	e4fe      	b.n	72ba <_lv_blend_fill+0x4f2>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    78bc:	9b08      	ldr	r3, [sp, #32]
    78be:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    78c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    78c2:	428a      	cmp	r2, r1
    78c4:	daf2      	bge.n	78ac <_lv_blend_fill+0xae4>
    78c6:	461a      	mov	r2, r3
    78c8:	e623      	b.n	7512 <_lv_blend_fill+0x74a>
    78ca:	bf00      	nop
    78cc:	00006d17 	.word	0x00006d17
    78d0:	00006c61 	.word	0x00006c61

000078d4 <_lv_blend_map>:
{
    78d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78d8:	b091      	sub	sp, #68	; 0x44
    78da:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
    78de:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
    78e2:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
    if(opa < LV_OPA_MIN) return;
    78e6:	f1ba 0f04 	cmp.w	sl, #4
    78ea:	d900      	bls.n	78ee <_lv_blend_map+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    78ec:	b914      	cbnz	r4, 78f4 <_lv_blend_map+0x20>
}
    78ee:	b011      	add	sp, #68	; 0x44
    78f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78f4:	9304      	str	r3, [sp, #16]
    78f6:	9207      	str	r2, [sp, #28]
    78f8:	460f      	mov	r7, r1
    78fa:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
    78fc:	463a      	mov	r2, r7
    78fe:	a80e      	add	r0, sp, #56	; 0x38
    7900:	4bbc      	ldr	r3, [pc, #752]	; (7bf4 <_lv_blend_map+0x320>)
    7902:	4798      	blx	r3
    if(!is_common) return;
    7904:	2800      	cmp	r0, #0
    7906:	d0f2      	beq.n	78ee <_lv_blend_map+0x1a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7908:	4bbb      	ldr	r3, [pc, #748]	; (7bf8 <_lv_blend_map+0x324>)
    790a:	4798      	blx	r3
    790c:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    790e:	4bbb      	ldr	r3, [pc, #748]	; (7bfc <_lv_blend_map+0x328>)
    7910:	4798      	blx	r3
    7912:	4606      	mov	r6, r0
    lv_color_t * disp_buf = vdb->buf_act;
    7914:	6883      	ldr	r3, [r0, #8]
    7916:	9305      	str	r3, [sp, #20]
    draw_area.x1 -= disp_area->x1;
    7918:	8a02      	ldrh	r2, [r0, #16]
    791a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    791e:	1a9b      	subs	r3, r3, r2
    7920:	b29b      	uxth	r3, r3
    7922:	9306      	str	r3, [sp, #24]
    7924:	f9bd c018 	ldrsh.w	ip, [sp, #24]
    7928:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    792c:	8a43      	ldrh	r3, [r0, #18]
    792e:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
    7932:	ebab 0b03 	sub.w	fp, fp, r3
    7936:	fa1f fb8b 	uxth.w	fp, fp
    793a:	fa0f fe8b 	sxth.w	lr, fp
    793e:	f8ad e03a 	strh.w	lr, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    7942:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    7946:	1a89      	subs	r1, r1, r2
    7948:	b289      	uxth	r1, r1
    794a:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    794e:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    7952:	1ac0      	subs	r0, r0, r3
    7954:	b280      	uxth	r0, r0
    7956:	b202      	sxth	r2, r0
    7958:	9208      	str	r2, [sp, #32]
    795a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(mask && disp->driver.antialiasing == 0)
    795e:	9a04      	ldr	r2, [sp, #16]
    7960:	b1d2      	cbz	r2, 7998 <_lv_blend_map+0xc4>
    7962:	f898 3008 	ldrb.w	r3, [r8, #8]
    7966:	f013 0f01 	tst.w	r3, #1
    796a:	d115      	bne.n	7998 <_lv_blend_map+0xc4>
    796c:	f101 0901 	add.w	r9, r1, #1
    7970:	9b06      	ldr	r3, [sp, #24]
    7972:	eba9 0903 	sub.w	r9, r9, r3
    7976:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    797a:	f1b9 0f00 	cmp.w	r9, #0
    797e:	dd0b      	ble.n	7998 <_lv_blend_map+0xc4>
    7980:	4613      	mov	r3, r2
    7982:	4491      	add	r9, r2
    7984:	781a      	ldrb	r2, [r3, #0]
    7986:	2a80      	cmp	r2, #128	; 0x80
    7988:	f04f 32ff 	mov.w	r2, #4294967295
    798c:	bf98      	it	ls
    798e:	2200      	movls	r2, #0
    7990:	f803 2b01 	strb.w	r2, [r3], #1
    7994:	454b      	cmp	r3, r9
    7996:	d1f5      	bne.n	7984 <_lv_blend_map+0xb0>
    if(disp->driver.set_px_cb) {
    7998:	f8d8 3014 	ldr.w	r3, [r8, #20]
    799c:	2b00      	cmp	r3, #0
    799e:	f000 80a9 	beq.w	7af4 <_lv_blend_map+0x220>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    79a2:	4b95      	ldr	r3, [pc, #596]	; (7bf8 <_lv_blend_map+0x324>)
    79a4:	4798      	blx	r3
    79a6:	4605      	mov	r5, r0
    79a8:	f9b6 0010 	ldrsh.w	r0, [r6, #16]
    79ac:	8ab3      	ldrh	r3, [r6, #20]
    79ae:	3301      	adds	r3, #1
    79b0:	1a1b      	subs	r3, r3, r0
    79b2:	b21b      	sxth	r3, r3
    79b4:	9306      	str	r3, [sp, #24]
    79b6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
    79ba:	f9b7 2000 	ldrsh.w	r2, [r7]
    79be:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    79c2:	f109 0901 	add.w	r9, r9, #1
    79c6:	eba9 0902 	sub.w	r9, r9, r2
    79ca:	fa0f f989 	sxth.w	r9, r9
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    79ce:	f9bd e03a 	ldrsh.w	lr, [sp, #58]	; 0x3a
    79d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    79d6:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    79da:	1b9b      	subs	r3, r3, r6
    79dc:	ebae 0303 	sub.w	r3, lr, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    79e0:	1a12      	subs	r2, r2, r0
    79e2:	1a8a      	subs	r2, r1, r2
    map_buf_tmp -= draw_area->x1;
    79e4:	fb09 2303 	mla	r3, r9, r3, r2
    79e8:	ea4f 0b41 	mov.w	fp, r1, lsl #1
    79ec:	ebcb 0b43 	rsb	fp, fp, r3, lsl #1
    79f0:	9b07      	ldr	r3, [sp, #28]
    79f2:	445b      	add	r3, fp
    79f4:	469b      	mov	fp, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    79f6:	2c01      	cmp	r4, #1
    79f8:	d046      	beq.n	7a88 <_lv_blend_map+0x1b4>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    79fa:	9b04      	ldr	r3, [sp, #16]
    79fc:	1a5b      	subs	r3, r3, r1
    79fe:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7a00:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7a04:	459e      	cmp	lr, r3
    7a06:	f73f af72 	bgt.w	78ee <_lv_blend_map+0x1a>
    7a0a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
            map_buf_tmp += map_w;
    7a0e:	ea4f 0249 	mov.w	r2, r9, lsl #1
    7a12:	9208      	str	r2, [sp, #32]
    7a14:	3301      	adds	r3, #1
    7a16:	1a59      	subs	r1, r3, r1
            mask_tmp += draw_area_w;
    7a18:	b20b      	sxth	r3, r1
    7a1a:	9309      	str	r3, [sp, #36]	; 0x24
    7a1c:	46f1      	mov	r9, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7a1e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    7a22:	4634      	mov	r4, r6
    7a24:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7a28:	429e      	cmp	r6, r3
    7a2a:	dc20      	bgt.n	7a6e <_lv_blend_map+0x19a>
    7a2c:	9b07      	ldr	r3, [sp, #28]
    7a2e:	eb03 0806 	add.w	r8, r3, r6
    7a32:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    7a36:	fa0f f789 	sxth.w	r7, r9
    7a3a:	9604      	str	r6, [sp, #16]
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    7a3c:	f818 3b01 	ldrb.w	r3, [r8], #1
    7a40:	fb03 f30a 	mul.w	r3, r3, sl
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    7a44:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7a48:	9302      	str	r3, [sp, #8]
    7a4a:	9a04      	ldr	r2, [sp, #16]
    7a4c:	f832 3b02 	ldrh.w	r3, [r2], #2
    7a50:	9204      	str	r2, [sp, #16]
    7a52:	f8ad 3004 	strh.w	r3, [sp, #4]
    7a56:	9700      	str	r7, [sp, #0]
    7a58:	b223      	sxth	r3, r4
    7a5a:	9a06      	ldr	r2, [sp, #24]
    7a5c:	9905      	ldr	r1, [sp, #20]
    7a5e:	4628      	mov	r0, r5
    7a60:	696e      	ldr	r6, [r5, #20]
    7a62:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7a64:	3401      	adds	r4, #1
    7a66:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7a6a:	429c      	cmp	r4, r3
    7a6c:	dde6      	ble.n	7a3c <_lv_blend_map+0x168>
    7a6e:	9b07      	ldr	r3, [sp, #28]
    7a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7a72:	4413      	add	r3, r2
    7a74:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    7a76:	9b08      	ldr	r3, [sp, #32]
    7a78:	449b      	add	fp, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7a7a:	f109 0901 	add.w	r9, r9, #1
    7a7e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7a82:	4599      	cmp	r9, r3
    7a84:	ddcb      	ble.n	7a1e <_lv_blend_map+0x14a>
    7a86:	e732      	b.n	78ee <_lv_blend_map+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7a88:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7a8c:	4573      	cmp	r3, lr
    7a8e:	f6ff af2e 	blt.w	78ee <_lv_blend_map+0x1a>
            map_buf_tmp += map_w;
    7a92:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7a96:	46f0      	mov	r8, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7a98:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
    7a9c:	463c      	mov	r4, r7
    7a9e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7aa2:	429f      	cmp	r7, r3
    7aa4:	dc1e      	bgt.n	7ae4 <_lv_blend_map+0x210>
    7aa6:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
    7aaa:	fa0f f688 	sxth.w	r6, r8
    7aae:	9704      	str	r7, [sp, #16]
    7ab0:	4633      	mov	r3, r6
    7ab2:	4656      	mov	r6, sl
    7ab4:	46ca      	mov	sl, r9
    7ab6:	4699      	mov	r9, r3
    7ab8:	9602      	str	r6, [sp, #8]
    7aba:	9a04      	ldr	r2, [sp, #16]
    7abc:	f832 3b02 	ldrh.w	r3, [r2], #2
    7ac0:	9204      	str	r2, [sp, #16]
    7ac2:	f8ad 3004 	strh.w	r3, [sp, #4]
    7ac6:	f8cd 9000 	str.w	r9, [sp]
    7aca:	b223      	sxth	r3, r4
    7acc:	9a06      	ldr	r2, [sp, #24]
    7ace:	9905      	ldr	r1, [sp, #20]
    7ad0:	4628      	mov	r0, r5
    7ad2:	696f      	ldr	r7, [r5, #20]
    7ad4:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7ad6:	3401      	adds	r4, #1
    7ad8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    7adc:	429c      	cmp	r4, r3
    7ade:	ddeb      	ble.n	7ab8 <_lv_blend_map+0x1e4>
    7ae0:	46d1      	mov	r9, sl
    7ae2:	46b2      	mov	sl, r6
            map_buf_tmp += map_w;
    7ae4:	44cb      	add	fp, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7ae6:	f108 0801 	add.w	r8, r8, #1
    7aea:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7aee:	4598      	cmp	r8, r3
    7af0:	ddd2      	ble.n	7a98 <_lv_blend_map+0x1c4>
    7af2:	e6fc      	b.n	78ee <_lv_blend_map+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    7af4:	2d00      	cmp	r5, #0
    7af6:	f040 8399 	bne.w	822c <_lv_blend_map+0x958>
    7afa:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    7afe:	f8b6 8014 	ldrh.w	r8, [r6, #20]
    7b02:	f108 0801 	add.w	r8, r8, #1
    7b06:	eba8 0803 	sub.w	r8, r8, r3
    7b0a:	fa0f f888 	sxth.w	r8, r8
    7b0e:	3101      	adds	r1, #1
    7b10:	9a06      	ldr	r2, [sp, #24]
    7b12:	1a89      	subs	r1, r1, r2
    7b14:	b20a      	sxth	r2, r1
    7b16:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
    7b18:	4615      	mov	r5, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    7b1a:	3001      	adds	r0, #1
    7b1c:	eba0 0b0b 	sub.w	fp, r0, fp
    int32_t draw_area_h = lv_area_get_height(draw_area);
    7b20:	fa0f f28b 	sxth.w	r2, fp
    7b24:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    7b26:	f9b7 1000 	ldrsh.w	r1, [r7]
    7b2a:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    7b2e:	f109 0901 	add.w	r9, r9, #1
    7b32:	eba9 0901 	sub.w	r9, r9, r1
    7b36:	fa0f f989 	sxth.w	r9, r9
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    7b3a:	fb0e c208 	mla	r2, lr, r8, ip
    7b3e:	9805      	ldr	r0, [sp, #20]
    7b40:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    7b44:	9205      	str	r2, [sp, #20]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    7b46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    7b4a:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
    7b4e:	1a12      	subs	r2, r2, r0
    7b50:	ebae 0e02 	sub.w	lr, lr, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    7b54:	1acb      	subs	r3, r1, r3
    7b56:	ebac 0303 	sub.w	r3, ip, r3
    7b5a:	fb09 330e 	mla	r3, r9, lr, r3
    7b5e:	9a07      	ldr	r2, [sp, #28]
    7b60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    7b64:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7b66:	4b24      	ldr	r3, [pc, #144]	; (7bf8 <_lv_blend_map+0x324>)
    7b68:	4798      	blx	r3
    7b6a:	4606      	mov	r6, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7b6c:	2c01      	cmp	r4, #1
    7b6e:	d01b      	beq.n	7ba8 <_lv_blend_map+0x2d4>
        if(opa > LV_OPA_MAX) {
    7b70:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    7b74:	f200 80c5 	bhi.w	7d02 <_lv_blend_map+0x42e>
            for(y = 0; y < draw_area_h; y++) {
    7b78:	9b08      	ldr	r3, [sp, #32]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	f77f aeb7 	ble.w	78ee <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7b80:	ea4f 0348 	mov.w	r3, r8, lsl #1
    7b84:	930a      	str	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
    7b86:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7b8a:	930b      	str	r3, [sp, #44]	; 0x2c
    7b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b8e:	9a04      	ldr	r2, [sp, #16]
    7b90:	3a01      	subs	r2, #1
    7b92:	9204      	str	r2, [sp, #16]
    7b94:	005b      	lsls	r3, r3, #1
    7b96:	930d      	str	r3, [sp, #52]	; 0x34
    7b98:	f04f 0b00 	mov.w	fp, #0
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    7b9c:	f8cd a01c 	str.w	sl, [sp, #28]
    7ba0:	950c      	str	r5, [sp, #48]	; 0x30
    7ba2:	f8dd 9018 	ldr.w	r9, [sp, #24]
    7ba6:	e336      	b.n	8216 <_lv_blend_map+0x942>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
    7ba8:	6a03      	ldr	r3, [r0, #32]
    7baa:	b35b      	cbz	r3, 7c04 <_lv_blend_map+0x330>
    7bac:	a80e      	add	r0, sp, #56	; 0x38
    7bae:	4b14      	ldr	r3, [pc, #80]	; (7c00 <_lv_blend_map+0x32c>)
    7bb0:	4798      	blx	r3
    7bb2:	28f0      	cmp	r0, #240	; 0xf0
    7bb4:	d926      	bls.n	7c04 <_lv_blend_map+0x330>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7bb6:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
    7bba:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7bbe:	429d      	cmp	r5, r3
    7bc0:	f73f ae95 	bgt.w	78ee <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7bc4:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    7bc8:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7bcc:	f8dd b014 	ldr.w	fp, [sp, #20]
    7bd0:	9f06      	ldr	r7, [sp, #24]
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
    7bd2:	f8cd a000 	str.w	sl, [sp]
    7bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7bd8:	463a      	mov	r2, r7
    7bda:	4659      	mov	r1, fp
    7bdc:	4630      	mov	r0, r6
    7bde:	6a34      	ldr	r4, [r6, #32]
    7be0:	47a0      	blx	r4
                disp_buf_first += disp_w;
    7be2:	44c3      	add	fp, r8
                map_buf_first += map_w;
    7be4:	444f      	add	r7, r9
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7be6:	3501      	adds	r5, #1
    7be8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    7bec:	429d      	cmp	r5, r3
    7bee:	ddf0      	ble.n	7bd2 <_lv_blend_map+0x2fe>
    7bf0:	e67d      	b.n	78ee <_lv_blend_map+0x1a>
    7bf2:	bf00      	nop
    7bf4:	000106dd 	.word	0x000106dd
    7bf8:	0000574d 	.word	0x0000574d
    7bfc:	00010221 	.word	0x00010221
    7c00:	000106c1 	.word	0x000106c1
        if(opa > LV_OPA_MAX) {
    7c04:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    7c08:	d810      	bhi.n	7c2c <_lv_blend_map+0x358>
            for(y = 0; y < draw_area_h; y++) {
    7c0a:	9b08      	ldr	r3, [sp, #32]
    7c0c:	2b00      	cmp	r3, #0
    7c0e:	f77f ae6e 	ble.w	78ee <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7c12:	ea4f 0348 	mov.w	r3, r8, lsl #1
    7c16:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    7c18:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c1e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    7c22:	f04f 0800 	mov.w	r8, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7c26:	f1ca 0eff 	rsb	lr, sl, #255	; 0xff
    7c2a:	e026      	b.n	7c7a <_lv_blend_map+0x3a6>
            for(y = 0; y < draw_area_h; y++) {
    7c2c:	9b08      	ldr	r3, [sp, #32]
    7c2e:	2b00      	cmp	r3, #0
    7c30:	f77f ae5d 	ble.w	78ee <_lv_blend_map+0x1a>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    7c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7c36:	0056      	lsls	r6, r2, #1
                disp_buf_first += disp_w;
    7c38:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    7c3c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    7c40:	2400      	movs	r4, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    7c42:	4d66      	ldr	r5, [pc, #408]	; (7ddc <_lv_blend_map+0x508>)
    7c44:	469b      	mov	fp, r3
    7c46:	9f05      	ldr	r7, [sp, #20]
    7c48:	f8dd a018 	ldr.w	sl, [sp, #24]
    7c4c:	4632      	mov	r2, r6
    7c4e:	4651      	mov	r1, sl
    7c50:	4638      	mov	r0, r7
    7c52:	47a8      	blx	r5
                disp_buf_first += disp_w;
    7c54:	4447      	add	r7, r8
                map_buf_first += map_w;
    7c56:	44ca      	add	sl, r9
            for(y = 0; y < draw_area_h; y++) {
    7c58:	3401      	adds	r4, #1
    7c5a:	45a3      	cmp	fp, r4
    7c5c:	d1f6      	bne.n	7c4c <_lv_blend_map+0x378>
    7c5e:	e646      	b.n	78ee <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7c60:	9b05      	ldr	r3, [sp, #20]
    7c62:	9a04      	ldr	r2, [sp, #16]
    7c64:	4413      	add	r3, r2
    7c66:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    7c68:	9b06      	ldr	r3, [sp, #24]
    7c6a:	444b      	add	r3, r9
    7c6c:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    7c6e:	f108 0801 	add.w	r8, r8, #1
    7c72:	9b08      	ldr	r3, [sp, #32]
    7c74:	4543      	cmp	r3, r8
    7c76:	f43f ae3a 	beq.w	78ee <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    7c7a:	2d00      	cmp	r5, #0
    7c7c:	ddf0      	ble.n	7c60 <_lv_blend_map+0x38c>
    7c7e:	9b06      	ldr	r3, [sp, #24]
    7c80:	461f      	mov	r7, r3
    7c82:	9c05      	ldr	r4, [sp, #20]
    7c84:	eb03 0c0b 	add.w	ip, r3, fp
    7c88:	787b      	ldrb	r3, [r7, #1]
    7c8a:	08db      	lsrs	r3, r3, #3
    7c8c:	7862      	ldrb	r2, [r4, #1]
    7c8e:	08d2      	lsrs	r2, r2, #3
    7c90:	fb0e f202 	mul.w	r2, lr, r2
    7c94:	fb0a 2303 	mla	r3, sl, r3, r2
    7c98:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7c9c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7ca0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7ca4:	883a      	ldrh	r2, [r7, #0]
    7ca6:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7caa:	8821      	ldrh	r1, [r4, #0]
    7cac:	f3c1 1145 	ubfx	r1, r1, #5, #6
    7cb0:	fb0e f101 	mul.w	r1, lr, r1
    7cb4:	fb0a 1202 	mla	r2, sl, r2, r1
    7cb8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    7cbc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    7cc0:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7cc4:	f817 1b02 	ldrb.w	r1, [r7], #2
    7cc8:	f001 011f 	and.w	r1, r1, #31
    7ccc:	7820      	ldrb	r0, [r4, #0]
    7cce:	f000 061f 	and.w	r6, r0, #31
    7cd2:	fb0e f606 	mul.w	r6, lr, r6
    7cd6:	fb0a 6101 	mla	r1, sl, r1, r6
    7cda:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    7cde:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    7ce2:	0dc9      	lsrs	r1, r1, #23
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
    7ce4:	f361 0004 	bfi	r0, r1, #0, #5
    7ce8:	7020      	strb	r0, [r4, #0]
    7cea:	8821      	ldrh	r1, [r4, #0]
    7cec:	f362 114a 	bfi	r1, r2, #5, #6
    7cf0:	8021      	strh	r1, [r4, #0]
    7cf2:	0a09      	lsrs	r1, r1, #8
    7cf4:	f363 01c7 	bfi	r1, r3, #3, #5
    7cf8:	7061      	strb	r1, [r4, #1]
    7cfa:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w; x++) {
    7cfc:	45bc      	cmp	ip, r7
    7cfe:	d1c3      	bne.n	7c88 <_lv_blend_map+0x3b4>
    7d00:	e7ae      	b.n	7c60 <_lv_blend_map+0x38c>
            int32_t x_end4 = draw_area_w - 4;
    7d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d04:	3b04      	subs	r3, #4
    7d06:	930a      	str	r3, [sp, #40]	; 0x28
            for(y = 0; y < draw_area_h; y++) {
    7d08:	9b08      	ldr	r3, [sp, #32]
    7d0a:	2b00      	cmp	r3, #0
    7d0c:	f77f adef 	ble.w	78ee <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    7d10:	ea4f 0348 	mov.w	r3, r8, lsl #1
    7d14:	930c      	str	r3, [sp, #48]	; 0x30
                map_buf_first += map_w;
    7d16:	ea4f 0349 	mov.w	r3, r9, lsl #1
    7d1a:	930d      	str	r3, [sp, #52]	; 0x34
    7d1c:	2300      	movs	r3, #0
    7d1e:	9307      	str	r3, [sp, #28]
    7d20:	e35b      	b.n	83da <_lv_blend_map+0xb06>
                    MAP_NORMAL_MASK_PX(x)
    7d22:	f8b8 3000 	ldrh.w	r3, [r8]
    7d26:	f8ae 3000 	strh.w	r3, [lr]
    7d2a:	4663      	mov	r3, ip
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7d2c:	3101      	adds	r1, #1
    7d2e:	428d      	cmp	r5, r1
    7d30:	f000 833d 	beq.w	83ae <_lv_blend_map+0xada>
    7d34:	f108 0802 	add.w	r8, r8, #2
    7d38:	f10e 0e02 	add.w	lr, lr, #2
    7d3c:	f01c 0f03 	tst.w	ip, #3
    7d40:	f000 8323 	beq.w	838a <_lv_blend_map+0xab6>
                    MAP_NORMAL_MASK_PX(x)
    7d44:	f81c 4b01 	ldrb.w	r4, [ip], #1
    7d48:	2c00      	cmp	r4, #0
    7d4a:	d0ee      	beq.n	7d2a <_lv_blend_map+0x456>
    7d4c:	2cff      	cmp	r4, #255	; 0xff
    7d4e:	d0e8      	beq.n	7d22 <_lv_blend_map+0x44e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7d50:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
    7d54:	f898 3001 	ldrb.w	r3, [r8, #1]
    7d58:	08db      	lsrs	r3, r3, #3
    7d5a:	f89e 2001 	ldrb.w	r2, [lr, #1]
    7d5e:	08d2      	lsrs	r2, r2, #3
    7d60:	fb06 f202 	mul.w	r2, r6, r2
    7d64:	fb04 2303 	mla	r3, r4, r3, r2
    7d68:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    7d6c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    7d70:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7d74:	f8b8 0000 	ldrh.w	r0, [r8]
    7d78:	f3c0 1045 	ubfx	r0, r0, #5, #6
    7d7c:	f8be 2000 	ldrh.w	r2, [lr]
    7d80:	f3c2 1245 	ubfx	r2, r2, #5, #6
    7d84:	fb06 f202 	mul.w	r2, r6, r2
    7d88:	fb04 2000 	mla	r0, r4, r0, r2
    7d8c:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    7d90:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    7d94:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7d98:	f898 2000 	ldrb.w	r2, [r8]
    7d9c:	f002 021f 	and.w	r2, r2, #31
    7da0:	f89e 7000 	ldrb.w	r7, [lr]
    7da4:	f007 091f 	and.w	r9, r7, #31
    7da8:	fb06 f609 	mul.w	r6, r6, r9
    7dac:	fb04 6202 	mla	r2, r4, r2, r6
    7db0:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    7db4:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    7db8:	0dd2      	lsrs	r2, r2, #23
    7dba:	463c      	mov	r4, r7
    7dbc:	f362 0404 	bfi	r4, r2, #0, #5
    7dc0:	f88e 4000 	strb.w	r4, [lr]
    7dc4:	f8be 2000 	ldrh.w	r2, [lr]
    7dc8:	f360 124a 	bfi	r2, r0, #5, #6
    7dcc:	f8ae 2000 	strh.w	r2, [lr]
    7dd0:	0a12      	lsrs	r2, r2, #8
    7dd2:	f363 02c7 	bfi	r2, r3, #3, #5
    7dd6:	f88e 2001 	strb.w	r2, [lr, #1]
    7dda:	e7a6      	b.n	7d2a <_lv_blend_map+0x456>
    7ddc:	00011769 	.word	0x00011769
                            disp_buf_first[x] = map_buf_first[x];
    7de0:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    7de4:	f820 5c06 	strh.w	r5, [r0, #-6]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
    7de8:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    7dec:	f820 5c04 	strh.w	r5, [r0, #-4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
    7df0:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    7df4:	f820 5c02 	strh.w	r5, [r0, #-2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
    7df8:	8825      	ldrh	r5, [r4, #0]
    7dfa:	8005      	strh	r5, [r0, #0]
                for(; x < x_end4; x += 4) {
    7dfc:	3104      	adds	r1, #4
    7dfe:	3304      	adds	r3, #4
    7e00:	3408      	adds	r4, #8
    7e02:	3008      	adds	r0, #8
    7e04:	458e      	cmp	lr, r1
    7e06:	f340 8147 	ble.w	8098 <_lv_blend_map+0x7c4>
    7e0a:	461a      	mov	r2, r3
                    if(*mask32) {
    7e0c:	f853 5c04 	ldr.w	r5, [r3, #-4]
    7e10:	2d00      	cmp	r5, #0
    7e12:	d0f3      	beq.n	7dfc <_lv_blend_map+0x528>
                        if((*mask32) == 0xFFFFFFFF) {
    7e14:	f1b5 3fff 	cmp.w	r5, #4294967295
    7e18:	d0e2      	beq.n	7de0 <_lv_blend_map+0x50c>
                            MAP_NORMAL_MASK_PX(x)
    7e1a:	f813 cc04 	ldrb.w	ip, [r3, #-4]
    7e1e:	f1bc 0f00 	cmp.w	ip, #0
    7e22:	d047      	beq.n	7eb4 <_lv_blend_map+0x5e0>
    7e24:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7e28:	f000 8124 	beq.w	8074 <_lv_blend_map+0x7a0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7e2c:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    7e30:	f814 5c05 	ldrb.w	r5, [r4, #-5]
    7e34:	08ed      	lsrs	r5, r5, #3
    7e36:	f810 6c05 	ldrb.w	r6, [r0, #-5]
    7e3a:	08f6      	lsrs	r6, r6, #3
    7e3c:	fb09 f606 	mul.w	r6, r9, r6
    7e40:	fb0c 6505 	mla	r5, ip, r5, r6
    7e44:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    7e48:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    7e4c:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7e50:	f834 6c06 	ldrh.w	r6, [r4, #-6]
    7e54:	f3c6 1645 	ubfx	r6, r6, #5, #6
    7e58:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    7e5c:	f3c7 1745 	ubfx	r7, r7, #5, #6
    7e60:	fb09 f707 	mul.w	r7, r9, r7
    7e64:	fb0c 7606 	mla	r6, ip, r6, r7
    7e68:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    7e6c:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    7e70:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7e74:	f814 7c06 	ldrb.w	r7, [r4, #-6]
    7e78:	f007 071f 	and.w	r7, r7, #31
    7e7c:	f810 8c06 	ldrb.w	r8, [r0, #-6]
    7e80:	f008 0b1f 	and.w	fp, r8, #31
    7e84:	fb09 f90b 	mul.w	r9, r9, fp
    7e88:	fb0c 9707 	mla	r7, ip, r7, r9
    7e8c:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    7e90:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    7e94:	0dff      	lsrs	r7, r7, #23
    7e96:	f367 0804 	bfi	r8, r7, #0, #5
    7e9a:	f800 8c06 	strb.w	r8, [r0, #-6]
    7e9e:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    7ea2:	f366 174a 	bfi	r7, r6, #5, #6
    7ea6:	f820 7c06 	strh.w	r7, [r0, #-6]
    7eaa:	0a3f      	lsrs	r7, r7, #8
    7eac:	f365 07c7 	bfi	r7, r5, #3, #5
    7eb0:	f800 7c05 	strb.w	r7, [r0, #-5]
                            MAP_NORMAL_MASK_PX(x + 1)
    7eb4:	f812 cc03 	ldrb.w	ip, [r2, #-3]
    7eb8:	f1bc 0f00 	cmp.w	ip, #0
    7ebc:	d047      	beq.n	7f4e <_lv_blend_map+0x67a>
    7ebe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7ec2:	f000 80dc 	beq.w	807e <_lv_blend_map+0x7aa>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7ec6:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    7eca:	f814 5c03 	ldrb.w	r5, [r4, #-3]
    7ece:	08ed      	lsrs	r5, r5, #3
    7ed0:	f810 6c03 	ldrb.w	r6, [r0, #-3]
    7ed4:	08f6      	lsrs	r6, r6, #3
    7ed6:	fb09 f606 	mul.w	r6, r9, r6
    7eda:	fb0c 6505 	mla	r5, ip, r5, r6
    7ede:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    7ee2:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    7ee6:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7eea:	f834 6c04 	ldrh.w	r6, [r4, #-4]
    7eee:	f3c6 1645 	ubfx	r6, r6, #5, #6
    7ef2:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    7ef6:	f3c7 1745 	ubfx	r7, r7, #5, #6
    7efa:	fb09 f707 	mul.w	r7, r9, r7
    7efe:	fb0c 7606 	mla	r6, ip, r6, r7
    7f02:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    7f06:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    7f0a:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7f0e:	f814 7c04 	ldrb.w	r7, [r4, #-4]
    7f12:	f007 071f 	and.w	r7, r7, #31
    7f16:	f810 8c04 	ldrb.w	r8, [r0, #-4]
    7f1a:	f008 0b1f 	and.w	fp, r8, #31
    7f1e:	fb09 f90b 	mul.w	r9, r9, fp
    7f22:	fb0c 9707 	mla	r7, ip, r7, r9
    7f26:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    7f2a:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    7f2e:	0dff      	lsrs	r7, r7, #23
    7f30:	f367 0804 	bfi	r8, r7, #0, #5
    7f34:	f800 8c04 	strb.w	r8, [r0, #-4]
    7f38:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    7f3c:	f366 174a 	bfi	r7, r6, #5, #6
    7f40:	f820 7c04 	strh.w	r7, [r0, #-4]
    7f44:	0a3f      	lsrs	r7, r7, #8
    7f46:	f365 07c7 	bfi	r7, r5, #3, #5
    7f4a:	f800 7c03 	strb.w	r7, [r0, #-3]
                            MAP_NORMAL_MASK_PX(x + 2)
    7f4e:	f812 cc02 	ldrb.w	ip, [r2, #-2]
    7f52:	f1bc 0f00 	cmp.w	ip, #0
    7f56:	d047      	beq.n	7fe8 <_lv_blend_map+0x714>
    7f58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    7f5c:	f000 8094 	beq.w	8088 <_lv_blend_map+0x7b4>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7f60:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    7f64:	f814 5c01 	ldrb.w	r5, [r4, #-1]
    7f68:	08ed      	lsrs	r5, r5, #3
    7f6a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
    7f6e:	08f6      	lsrs	r6, r6, #3
    7f70:	fb09 f606 	mul.w	r6, r9, r6
    7f74:	fb0c 6505 	mla	r5, ip, r5, r6
    7f78:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    7f7c:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    7f80:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7f84:	f834 6c02 	ldrh.w	r6, [r4, #-2]
    7f88:	f3c6 1645 	ubfx	r6, r6, #5, #6
    7f8c:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    7f90:	f3c7 1745 	ubfx	r7, r7, #5, #6
    7f94:	fb09 f707 	mul.w	r7, r9, r7
    7f98:	fb0c 7606 	mla	r6, ip, r6, r7
    7f9c:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    7fa0:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    7fa4:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7fa8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
    7fac:	f007 071f 	and.w	r7, r7, #31
    7fb0:	f810 8c02 	ldrb.w	r8, [r0, #-2]
    7fb4:	f008 0b1f 	and.w	fp, r8, #31
    7fb8:	fb09 f90b 	mul.w	r9, r9, fp
    7fbc:	fb0c 9707 	mla	r7, ip, r7, r9
    7fc0:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    7fc4:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    7fc8:	0dff      	lsrs	r7, r7, #23
    7fca:	f367 0804 	bfi	r8, r7, #0, #5
    7fce:	f800 8c02 	strb.w	r8, [r0, #-2]
    7fd2:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    7fd6:	f366 174a 	bfi	r7, r6, #5, #6
    7fda:	f820 7c02 	strh.w	r7, [r0, #-2]
    7fde:	0a3f      	lsrs	r7, r7, #8
    7fe0:	f365 07c7 	bfi	r7, r5, #3, #5
    7fe4:	f800 7c01 	strb.w	r7, [r0, #-1]
                            MAP_NORMAL_MASK_PX(x + 3)
    7fe8:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    7fec:	f1b8 0f00 	cmp.w	r8, #0
    7ff0:	f43f af04 	beq.w	7dfc <_lv_blend_map+0x528>
    7ff4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7ff8:	d04b      	beq.n	8092 <_lv_blend_map+0x7be>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7ffa:	f1c8 09ff 	rsb	r9, r8, #255	; 0xff
    7ffe:	7865      	ldrb	r5, [r4, #1]
    8000:	08ed      	lsrs	r5, r5, #3
    8002:	7846      	ldrb	r6, [r0, #1]
    8004:	08f6      	lsrs	r6, r6, #3
    8006:	fb09 f606 	mul.w	r6, r9, r6
    800a:	fb08 6505 	mla	r5, r8, r5, r6
    800e:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    8012:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8016:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    801a:	8826      	ldrh	r6, [r4, #0]
    801c:	f3c6 1645 	ubfx	r6, r6, #5, #6
    8020:	8807      	ldrh	r7, [r0, #0]
    8022:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8026:	fb09 f707 	mul.w	r7, r9, r7
    802a:	fb08 7606 	mla	r6, r8, r6, r7
    802e:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    8032:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8036:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    803a:	7827      	ldrb	r7, [r4, #0]
    803c:	f007 071f 	and.w	r7, r7, #31
    8040:	f890 c000 	ldrb.w	ip, [r0]
    8044:	f00c 0a1f 	and.w	sl, ip, #31
    8048:	fb09 f90a 	mul.w	r9, r9, sl
    804c:	fb08 9707 	mla	r7, r8, r7, r9
    8050:	eb07 2807 	add.w	r8, r7, r7, lsl #8
    8054:	eb07 17c8 	add.w	r7, r7, r8, lsl #7
    8058:	0dff      	lsrs	r7, r7, #23
    805a:	f367 0c04 	bfi	ip, r7, #0, #5
    805e:	f880 c000 	strb.w	ip, [r0]
    8062:	8807      	ldrh	r7, [r0, #0]
    8064:	f366 174a 	bfi	r7, r6, #5, #6
    8068:	8007      	strh	r7, [r0, #0]
    806a:	0a3f      	lsrs	r7, r7, #8
    806c:	f365 07c7 	bfi	r7, r5, #3, #5
    8070:	7047      	strb	r7, [r0, #1]
    8072:	e6c3      	b.n	7dfc <_lv_blend_map+0x528>
                            MAP_NORMAL_MASK_PX(x)
    8074:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    8078:	f820 5c06 	strh.w	r5, [r0, #-6]
    807c:	e71a      	b.n	7eb4 <_lv_blend_map+0x5e0>
                            MAP_NORMAL_MASK_PX(x + 1)
    807e:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    8082:	f820 5c04 	strh.w	r5, [r0, #-4]
    8086:	e762      	b.n	7f4e <_lv_blend_map+0x67a>
                            MAP_NORMAL_MASK_PX(x + 2)
    8088:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    808c:	f820 5c02 	strh.w	r5, [r0, #-2]
    8090:	e7aa      	b.n	7fe8 <_lv_blend_map+0x714>
                            MAP_NORMAL_MASK_PX(x + 3)
    8092:	8825      	ldrh	r5, [r4, #0]
    8094:	8005      	strh	r5, [r0, #0]
    8096:	e6b1      	b.n	7dfc <_lv_blend_map+0x528>
    8098:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                for(; x < draw_area_w ; x++) {
    809a:	428d      	cmp	r5, r1
    809c:	f340 818a 	ble.w	83b4 <_lv_blend_map+0xae0>
    80a0:	1e56      	subs	r6, r2, #1
    80a2:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    80a6:	9b06      	ldr	r3, [sp, #24]
    80a8:	eb03 080c 	add.w	r8, r3, ip
    80ac:	9b05      	ldr	r3, [sp, #20]
    80ae:	449c      	add	ip, r3
    80b0:	e00b      	b.n	80ca <_lv_blend_map+0x7f6>
                    MAP_NORMAL_MASK_PX(x)
    80b2:	f8b8 3000 	ldrh.w	r3, [r8]
    80b6:	f8ac 3000 	strh.w	r3, [ip]
                for(; x < draw_area_w ; x++) {
    80ba:	3101      	adds	r1, #1
    80bc:	f108 0802 	add.w	r8, r8, #2
    80c0:	f10c 0c02 	add.w	ip, ip, #2
    80c4:	428d      	cmp	r5, r1
    80c6:	f340 8175 	ble.w	83b4 <_lv_blend_map+0xae0>
                    MAP_NORMAL_MASK_PX(x)
    80ca:	f816 4f01 	ldrb.w	r4, [r6, #1]!
    80ce:	2c00      	cmp	r4, #0
    80d0:	d0f3      	beq.n	80ba <_lv_blend_map+0x7e6>
    80d2:	2cff      	cmp	r4, #255	; 0xff
    80d4:	d0ed      	beq.n	80b2 <_lv_blend_map+0x7de>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    80d6:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
    80da:	f898 3001 	ldrb.w	r3, [r8, #1]
    80de:	08db      	lsrs	r3, r3, #3
    80e0:	f89c 2001 	ldrb.w	r2, [ip, #1]
    80e4:	08d2      	lsrs	r2, r2, #3
    80e6:	fb07 f202 	mul.w	r2, r7, r2
    80ea:	fb04 2303 	mla	r3, r4, r3, r2
    80ee:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    80f2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    80f6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    80fa:	f8b8 0000 	ldrh.w	r0, [r8]
    80fe:	f3c0 1045 	ubfx	r0, r0, #5, #6
    8102:	f8bc 2000 	ldrh.w	r2, [ip]
    8106:	f3c2 1245 	ubfx	r2, r2, #5, #6
    810a:	fb07 f202 	mul.w	r2, r7, r2
    810e:	fb04 2000 	mla	r0, r4, r0, r2
    8112:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    8116:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    811a:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    811e:	f898 2000 	ldrb.w	r2, [r8]
    8122:	f002 021f 	and.w	r2, r2, #31
    8126:	f89c e000 	ldrb.w	lr, [ip]
    812a:	f00e 091f 	and.w	r9, lr, #31
    812e:	fb07 f709 	mul.w	r7, r7, r9
    8132:	fb04 7202 	mla	r2, r4, r2, r7
    8136:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    813a:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    813e:	0dd2      	lsrs	r2, r2, #23
    8140:	4674      	mov	r4, lr
    8142:	f362 0404 	bfi	r4, r2, #0, #5
    8146:	f88c 4000 	strb.w	r4, [ip]
    814a:	f8bc 2000 	ldrh.w	r2, [ip]
    814e:	f360 124a 	bfi	r2, r0, #5, #6
    8152:	f8ac 2000 	strh.w	r2, [ip]
    8156:	0a12      	lsrs	r2, r2, #8
    8158:	f363 02c7 	bfi	r2, r3, #3, #5
    815c:	f88c 2001 	strb.w	r2, [ip, #1]
    8160:	e7ab      	b.n	80ba <_lv_blend_map+0x7e6>
    8162:	3702      	adds	r7, #2
    8164:	3602      	adds	r6, #2
                for(x = 0; x < draw_area_w; x++) {
    8166:	4547      	cmp	r7, r8
    8168:	d045      	beq.n	81f6 <_lv_blend_map+0x922>
                    if(mask[x]) {
    816a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    816e:	2900      	cmp	r1, #0
    8170:	d0f7      	beq.n	8162 <_lv_blend_map+0x88e>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    8172:	29f9      	cmp	r1, #249	; 0xf9
    8174:	bf9a      	itte	ls
    8176:	fb01 f10a 	mulls.w	r1, r1, sl
    817a:	f3c1 2407 	ubfxls	r4, r1, #8, #8
    817e:	9c07      	ldrhi	r4, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8180:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
    8184:	787b      	ldrb	r3, [r7, #1]
    8186:	08db      	lsrs	r3, r3, #3
    8188:	7872      	ldrb	r2, [r6, #1]
    818a:	08d2      	lsrs	r2, r2, #3
    818c:	fb05 f202 	mul.w	r2, r5, r2
    8190:	fb04 2303 	mla	r3, r4, r3, r2
    8194:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8198:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    819c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    81a0:	883a      	ldrh	r2, [r7, #0]
    81a2:	f3c2 1245 	ubfx	r2, r2, #5, #6
    81a6:	8831      	ldrh	r1, [r6, #0]
    81a8:	f3c1 1145 	ubfx	r1, r1, #5, #6
    81ac:	fb05 f101 	mul.w	r1, r5, r1
    81b0:	fb04 1202 	mla	r2, r4, r2, r1
    81b4:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    81b8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    81bc:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    81c0:	7839      	ldrb	r1, [r7, #0]
    81c2:	f001 011f 	and.w	r1, r1, #31
    81c6:	7830      	ldrb	r0, [r6, #0]
    81c8:	f000 0e1f 	and.w	lr, r0, #31
    81cc:	fb05 f50e 	mul.w	r5, r5, lr
    81d0:	fb04 5101 	mla	r1, r4, r1, r5
    81d4:	eb01 2401 	add.w	r4, r1, r1, lsl #8
    81d8:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    81dc:	0dc9      	lsrs	r1, r1, #23
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
    81de:	f361 0004 	bfi	r0, r1, #0, #5
    81e2:	7030      	strb	r0, [r6, #0]
    81e4:	8831      	ldrh	r1, [r6, #0]
    81e6:	f362 114a 	bfi	r1, r2, #5, #6
    81ea:	8031      	strh	r1, [r6, #0]
    81ec:	0a09      	lsrs	r1, r1, #8
    81ee:	f363 01c7 	bfi	r1, r3, #3, #5
    81f2:	7071      	strb	r1, [r6, #1]
    81f4:	e7b5      	b.n	8162 <_lv_blend_map+0x88e>
                disp_buf_first += disp_w;
    81f6:	9b05      	ldr	r3, [sp, #20]
    81f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    81fa:	4413      	add	r3, r2
    81fc:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    81fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8200:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
    8202:	f10b 0b01 	add.w	fp, fp, #1
    8206:	9b04      	ldr	r3, [sp, #16]
    8208:	9a09      	ldr	r2, [sp, #36]	; 0x24
    820a:	4413      	add	r3, r2
    820c:	9304      	str	r3, [sp, #16]
    820e:	9b08      	ldr	r3, [sp, #32]
    8210:	455b      	cmp	r3, fp
    8212:	f43f ab6c 	beq.w	78ee <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    8216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8218:	2b00      	cmp	r3, #0
    821a:	ddec      	ble.n	81f6 <_lv_blend_map+0x922>
    821c:	464f      	mov	r7, r9
    821e:	9e05      	ldr	r6, [sp, #20]
    8220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8222:	eb09 0803 	add.w	r8, r9, r3
    8226:	f8dd c010 	ldr.w	ip, [sp, #16]
    822a:	e79e      	b.n	816a <_lv_blend_map+0x896>
    switch(mode) {
    822c:	2d01      	cmp	r5, #1
    822e:	d03f      	beq.n	82b0 <_lv_blend_map+0x9dc>
    8230:	2d02      	cmp	r5, #2
    8232:	f47f ab5c 	bne.w	78ee <_lv_blend_map+0x1a>
            blend_fp = color_blend_true_color_subtractive;
    8236:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 83f4 <_lv_blend_map+0xb20>
    823a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    823e:	9309      	str	r3, [sp, #36]	; 0x24
    8240:	8ab0      	ldrh	r0, [r6, #20]
    8242:	3001      	adds	r0, #1
    8244:	1ac0      	subs	r0, r0, r3
    8246:	b200      	sxth	r0, r0
    8248:	f9b7 2000 	ldrsh.w	r2, [r7]
    824c:	88bb      	ldrh	r3, [r7, #4]
    824e:	3301      	adds	r3, #1
    8250:	1a9b      	subs	r3, r3, r2
    8252:	b21d      	sxth	r5, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    8254:	46f1      	mov	r9, lr
    8256:	fb0e fb00 	mul.w	fp, lr, r0
    825a:	9b05      	ldr	r3, [sp, #20]
    825c:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    8260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    8264:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    8268:	1b9f      	subs	r7, r3, r6
    826a:	ebae 0707 	sub.w	r7, lr, r7
    826e:	fb05 f707 	mul.w	r7, r5, r7
    8272:	9b07      	ldr	r3, [sp, #28]
    8274:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    8278:	2c01      	cmp	r4, #1
    827a:	d01c      	beq.n	82b6 <_lv_blend_map+0x9e2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    827c:	9b04      	ldr	r3, [sp, #16]
    827e:	eba3 030c 	sub.w	r3, r3, ip
    8282:	461a      	mov	r2, r3
        map_buf_tmp -= draw_area->x1;
    8284:	eba7 034c 	sub.w	r3, r7, ip, lsl #1
    8288:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    828a:	9b08      	ldr	r3, [sp, #32]
    828c:	459e      	cmp	lr, r3
    828e:	f73f ab2e 	bgt.w	78ee <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    8292:	0043      	lsls	r3, r0, #1
    8294:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    8296:	006b      	lsls	r3, r5, #1
    8298:	9308      	str	r3, [sp, #32]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    829a:	f8cd a014 	str.w	sl, [sp, #20]
    829e:	1c4b      	adds	r3, r1, #1
    82a0:	9906      	ldr	r1, [sp, #24]
    82a2:	1a5b      	subs	r3, r3, r1
            mask_tmp += draw_area_w;
    82a4:	b21b      	sxth	r3, r3
    82a6:	9309      	str	r3, [sp, #36]	; 0x24
    82a8:	f8cd a018 	str.w	sl, [sp, #24]
    82ac:	4692      	mov	sl, r2
    82ae:	e05b      	b.n	8368 <_lv_blend_map+0xa94>
            blend_fp = color_blend_true_color_additive;
    82b0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 83f8 <_lv_blend_map+0xb24>
    82b4:	e7c1      	b.n	823a <_lv_blend_map+0x966>
        map_buf_tmp -= draw_area->x1;
    82b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82b8:	1a9b      	subs	r3, r3, r2
    82ba:	eb07 0743 	add.w	r7, r7, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    82be:	9b08      	ldr	r3, [sp, #32]
    82c0:	459e      	cmp	lr, r3
    82c2:	f73f ab14 	bgt.w	78ee <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    82c6:	0043      	lsls	r3, r0, #1
    82c8:	9304      	str	r3, [sp, #16]
            map_buf_tmp += map_w;
    82ca:	006b      	lsls	r3, r5, #1
    82cc:	9305      	str	r3, [sp, #20]
    82ce:	463b      	mov	r3, r7
    82d0:	4647      	mov	r7, r8
    82d2:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    82d4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    82d8:	461c      	mov	r4, r3
    82da:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    82de:	4293      	cmp	r3, r2
    82e0:	dc10      	bgt.n	8304 <_lv_blend_map+0xa30>
    82e2:	005b      	lsls	r3, r3, #1
    82e4:	eb0b 0503 	add.w	r5, fp, r3
    82e8:	eb08 0603 	add.w	r6, r8, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
    82ec:	4652      	mov	r2, sl
    82ee:	8829      	ldrh	r1, [r5, #0]
    82f0:	f836 0b02 	ldrh.w	r0, [r6], #2
    82f4:	47b8      	blx	r7
    82f6:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    82fa:	3401      	adds	r4, #1
    82fc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8300:	429c      	cmp	r4, r3
    8302:	ddf3      	ble.n	82ec <_lv_blend_map+0xa18>
            disp_buf_tmp += disp_w;
    8304:	9b04      	ldr	r3, [sp, #16]
    8306:	449b      	add	fp, r3
            map_buf_tmp += map_w;
    8308:	9b05      	ldr	r3, [sp, #20]
    830a:	4498      	add	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    830c:	f109 0901 	add.w	r9, r9, #1
    8310:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8314:	4599      	cmp	r9, r3
    8316:	dddd      	ble.n	82d4 <_lv_blend_map+0xa00>
    8318:	f7ff bae9 	b.w	78ee <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    831c:	3501      	adds	r5, #1
    831e:	3602      	adds	r6, #2
    8320:	3402      	adds	r4, #2
    8322:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8326:	429d      	cmp	r5, r3
    8328:	dc0f      	bgt.n	834a <_lv_blend_map+0xa76>
                if(mask_tmp[x] == 0) continue;
    832a:	f817 3b01 	ldrb.w	r3, [r7], #1
    832e:	2b00      	cmp	r3, #0
    8330:	d0f4      	beq.n	831c <_lv_blend_map+0xa48>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    8332:	2bf9      	cmp	r3, #249	; 0xf9
    8334:	bf9d      	ittte	ls
    8336:	9a06      	ldrls	r2, [sp, #24]
    8338:	4353      	mulls	r3, r2
    833a:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    833e:	9a05      	ldrhi	r2, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
    8340:	8831      	ldrh	r1, [r6, #0]
    8342:	8820      	ldrh	r0, [r4, #0]
    8344:	47c0      	blx	r8
    8346:	8030      	strh	r0, [r6, #0]
    8348:	e7e8      	b.n	831c <_lv_blend_map+0xa48>
            disp_buf_tmp += disp_w;
    834a:	9b07      	ldr	r3, [sp, #28]
    834c:	449b      	add	fp, r3
    834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8350:	449a      	add	sl, r3
            map_buf_tmp += map_w;
    8352:	9b04      	ldr	r3, [sp, #16]
    8354:	9a08      	ldr	r2, [sp, #32]
    8356:	4413      	add	r3, r2
    8358:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    835a:	f109 0901 	add.w	r9, r9, #1
    835e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8362:	4599      	cmp	r9, r3
    8364:	f73f aac3 	bgt.w	78ee <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8368:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    836c:	461d      	mov	r5, r3
    836e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    8372:	4293      	cmp	r3, r2
    8374:	dce9      	bgt.n	834a <_lv_blend_map+0xa76>
    8376:	eb0a 0703 	add.w	r7, sl, r3
    837a:	005b      	lsls	r3, r3, #1
    837c:	eb0b 0603 	add.w	r6, fp, r3
    8380:	9a04      	ldr	r2, [sp, #16]
    8382:	18d4      	adds	r4, r2, r3
    8384:	e7d1      	b.n	832a <_lv_blend_map+0xa56>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8386:	9b04      	ldr	r3, [sp, #16]
    8388:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    838a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    838c:	428a      	cmp	r2, r1
    838e:	dd0a      	ble.n	83a6 <_lv_blend_map+0xad2>
    8390:	3304      	adds	r3, #4
    8392:	1cc8      	adds	r0, r1, #3
    8394:	0040      	lsls	r0, r0, #1
    8396:	9a06      	ldr	r2, [sp, #24]
    8398:	1814      	adds	r4, r2, r0
    839a:	9a05      	ldr	r2, [sp, #20]
    839c:	4410      	add	r0, r2
    839e:	950b      	str	r5, [sp, #44]	; 0x2c
    83a0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    83a4:	e531      	b.n	7e0a <_lv_blend_map+0x536>
    83a6:	461a      	mov	r2, r3
    83a8:	e67a      	b.n	80a0 <_lv_blend_map+0x7cc>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    83aa:	9b04      	ldr	r3, [sp, #16]
    83ac:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    83ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    83b0:	4291      	cmp	r1, r2
    83b2:	dbed      	blt.n	8390 <_lv_blend_map+0xabc>
                disp_buf_first += disp_w;
    83b4:	9b05      	ldr	r3, [sp, #20]
    83b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    83b8:	4413      	add	r3, r2
    83ba:	9305      	str	r3, [sp, #20]
    83bc:	9b04      	ldr	r3, [sp, #16]
    83be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    83c0:	4413      	add	r3, r2
    83c2:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    83c4:	9b06      	ldr	r3, [sp, #24]
    83c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    83c8:	4413      	add	r3, r2
    83ca:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    83cc:	9b07      	ldr	r3, [sp, #28]
    83ce:	3301      	adds	r3, #1
    83d0:	9307      	str	r3, [sp, #28]
    83d2:	9a08      	ldr	r2, [sp, #32]
    83d4:	429a      	cmp	r2, r3
    83d6:	f43f aa8a 	beq.w	78ee <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    83da:	2d00      	cmp	r5, #0
    83dc:	dde5      	ble.n	83aa <_lv_blend_map+0xad6>
    83de:	9a04      	ldr	r2, [sp, #16]
    83e0:	f012 0f03 	tst.w	r2, #3
    83e4:	d0cf      	beq.n	8386 <_lv_blend_map+0xab2>
    83e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    83ea:	f8dd e014 	ldr.w	lr, [sp, #20]
    83ee:	4694      	mov	ip, r2
    83f0:	2100      	movs	r1, #0
    83f2:	e4a7      	b.n	7d44 <_lv_blend_map+0x470>
    83f4:	00006d17 	.word	0x00006d17
    83f8:	00006c61 	.word	0x00006c61

000083fc <lv_draw_map>:
 * @param antialias anti-alias transformations (rotate, zoom) or not
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              lv_draw_img_dsc_t * draw_dsc, bool chroma_key, bool alpha_byte)
{
    83fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8400:	b0bd      	sub	sp, #244	; 0xf4
    8402:	901b      	str	r0, [sp, #108]	; 0x6c
    8404:	9123      	str	r1, [sp, #140]	; 0x8c
    8406:	4617      	mov	r7, r2
    8408:	9308      	str	r3, [sp, #32]
    840a:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
    840e:	930a      	str	r3, [sp, #40]	; 0x28
    8410:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
    8414:	9306      	str	r3, [sp, #24]
    8416:	1e4b      	subs	r3, r1, #1
    8418:	1dc8      	adds	r0, r1, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    841a:	aa3a      	add	r2, sp, #232	; 0xe8
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    841c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    8420:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    8424:	4283      	cmp	r3, r0
    8426:	d1f9      	bne.n	841c <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    8428:	4ba3      	ldr	r3, [pc, #652]	; (86b8 <lv_draw_map+0x2bc>)
    842a:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    842c:	4ba3      	ldr	r3, [pc, #652]	; (86bc <lv_draw_map+0x2c0>)
    842e:	4798      	blx	r3
    8430:	9018      	str	r0, [sp, #96]	; 0x60
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    8432:	8a01      	ldrh	r1, [r0, #16]
    8434:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    8438:	1a5b      	subs	r3, r3, r1
    843a:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
    843e:	8a42      	ldrh	r2, [r0, #18]
    8440:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    8444:	1a9b      	subs	r3, r3, r2
    8446:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
    844a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    844e:	1a5b      	subs	r3, r3, r1
    8450:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
    8454:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
    8458:	1a9b      	subs	r3, r3, r2
    845a:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    845e:	4b98      	ldr	r3, [pc, #608]	; (86c0 <lv_draw_map+0x2c4>)
    8460:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    8462:	9019      	str	r0, [sp, #100]	; 0x64
    8464:	b930      	cbnz	r0, 8474 <lv_draw_map+0x78>
    8466:	9a08      	ldr	r2, [sp, #32]
    8468:	8853      	ldrh	r3, [r2, #2]
    846a:	b91b      	cbnz	r3, 8474 <lv_draw_map+0x78>
    846c:	8913      	ldrh	r3, [r2, #8]
    846e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8472:	d071      	beq.n	8558 <lv_draw_map+0x15c>
                      draw_dsc->blend_mode);
    }
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    8474:	9b06      	ldr	r3, [sp, #24]
    8476:	2b00      	cmp	r3, #0
    8478:	bf14      	ite	ne
    847a:	f04f 0b03 	movne.w	fp, #3
    847e:	f04f 0b02 	moveq.w	fp, #2
    8482:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8484:	460b      	mov	r3, r1
    8486:	f9b1 2000 	ldrsh.w	r2, [r1]
    848a:	888d      	ldrh	r5, [r1, #4]
    848c:	3501      	adds	r5, #1
    848e:	1aad      	subs	r5, r5, r2
    8490:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    8492:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
    8496:	9e18      	ldr	r6, [sp, #96]	; 0x60
    8498:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
    849c:	46d8      	mov	r8, fp
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    849e:	f9bd 40e8 	ldrsh.w	r4, [sp, #232]	; 0xe8
    84a2:	f9b6 6010 	ldrsh.w	r6, [r6, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    84a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    84aa:	1a5b      	subs	r3, r3, r1
    84ac:	1ac3      	subs	r3, r0, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    84ae:	1b92      	subs	r2, r2, r6
    84b0:	1aa2      	subs	r2, r4, r2
    84b2:	fb05 2303 	mla	r3, r5, r3, r2
    84b6:	fb03 730b 	mla	r3, r3, fp, r7
    84ba:	9314      	str	r3, [sp, #80]	; 0x50
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
    84bc:	b2a4      	uxth	r4, r4
    84be:	19a2      	adds	r2, r4, r6
    84c0:	b292      	uxth	r2, r2
    84c2:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    84c6:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    84ca:	3301      	adds	r3, #1
    84cc:	1b1b      	subs	r3, r3, r4
    84ce:	b29b      	uxth	r3, r3
    84d0:	b21c      	sxth	r4, r3
    84d2:	9416      	str	r4, [sp, #88]	; 0x58
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
    84d4:	3b01      	subs	r3, #1
    84d6:	4413      	add	r3, r2
    84d8:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
    84dc:	b280      	uxth	r0, r0
    84de:	1843      	adds	r3, r0, r1
    84e0:	b21b      	sxth	r3, r3
    84e2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        blend_area.y2 = blend_area.y1;
    84e6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    84ea:	f8bd 60ee 	ldrh.w	r6, [sp, #238]	; 0xee
    84ee:	3601      	adds	r6, #1
    84f0:	1a36      	subs	r6, r6, r0
    84f2:	b236      	sxth	r6, r6

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
    84f4:	9908      	ldr	r1, [sp, #32]
    84f6:	884b      	ldrh	r3, [r1, #2]
    84f8:	2b00      	cmp	r3, #0
    84fa:	f040 8353 	bne.w	8ba4 <lv_draw_map+0x7a8>
    84fe:	890b      	ldrh	r3, [r1, #8]
    8500:	f5b3 7280 	subs.w	r2, r3, #256	; 0x100
    8504:	bf18      	it	ne
    8506:	2201      	movne	r2, #1
    8508:	9205      	str	r2, [sp, #20]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    850a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    850c:	2a00      	cmp	r2, #0
    850e:	f040 8370 	bne.w	8bf2 <lv_draw_map+0x7f6>
    8512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8516:	f040 8349 	bne.w	8bac <lv_draw_map+0x7b0>
    851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    851c:	b923      	cbnz	r3, 8528 <lv_draw_map+0x12c>
    851e:	7a8b      	ldrb	r3, [r1, #10]
    8520:	b913      	cbnz	r3, 8528 <lv_draw_map+0x12c>
    8522:	9b06      	ldr	r3, [sp, #24]
    8524:	2b00      	cmp	r3, #0
    8526:	d131      	bne.n	858c <lv_draw_map+0x190>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8528:	a83a      	add	r0, sp, #232	; 0xe8
    852a:	4b66      	ldr	r3, [pc, #408]	; (86c4 <lv_draw_map+0x2c8>)
    852c:	4798      	blx	r3
    852e:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8532:	f240 80ac 	bls.w	868e <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8536:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    853a:	4c63      	ldr	r4, [pc, #396]	; (86c8 <lv_draw_map+0x2cc>)
    853c:	47a0      	blx	r4
    853e:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    8540:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    8544:	47a0      	blx	r4
    8546:	9017      	str	r0, [sp, #92]	; 0x5c

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    8548:	2148      	movs	r1, #72	; 0x48
    854a:	a828      	add	r0, sp, #160	; 0xa0
    854c:	4b5f      	ldr	r3, [pc, #380]	; (86cc <lv_draw_map+0x2d0>)
    854e:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8550:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8554:	931c      	str	r3, [sp, #112]	; 0x70
    8556:	e0e4      	b.n	8722 <lv_draw_map+0x326>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    8558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    855a:	2b00      	cmp	r3, #0
    855c:	d18a      	bne.n	8474 <lv_draw_map+0x78>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
    855e:	9b06      	ldr	r3, [sp, #24]
    8560:	b98b      	cbnz	r3, 8586 <lv_draw_map+0x18a>
    8562:	7a93      	ldrb	r3, [r2, #10]
    8564:	b113      	cbz	r3, 856c <lv_draw_map+0x170>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    8566:	f04f 0b02 	mov.w	fp, #2
    856a:	e78a      	b.n	8482 <lv_draw_map+0x86>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
    856c:	7b93      	ldrb	r3, [r2, #14]
    856e:	9302      	str	r3, [sp, #8]
    8570:	7813      	ldrb	r3, [r2, #0]
    8572:	9301      	str	r3, [sp, #4]
    8574:	2301      	movs	r3, #1
    8576:	9300      	str	r3, [sp, #0]
    8578:	2300      	movs	r3, #0
    857a:	463a      	mov	r2, r7
    857c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    857e:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8580:	4c53      	ldr	r4, [pc, #332]	; (86d0 <lv_draw_map+0x2d4>)
    8582:	47a0      	blx	r4
    8584:	e30b      	b.n	8b9e <lv_draw_map+0x7a2>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    8586:	f04f 0b03 	mov.w	fp, #3
    858a:	e77a      	b.n	8482 <lv_draw_map+0x86>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    858c:	a83a      	add	r0, sp, #232	; 0xe8
    858e:	4b4d      	ldr	r3, [pc, #308]	; (86c4 <lv_draw_map+0x2c8>)
    8590:	4798      	blx	r3
    8592:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8596:	d814      	bhi.n	85c2 <lv_draw_map+0x1c6>
    8598:	a83a      	add	r0, sp, #232	; 0xe8
    859a:	4b4a      	ldr	r3, [pc, #296]	; (86c4 <lv_draw_map+0x2c8>)
    859c:	4798      	blx	r3
    859e:	4681      	mov	r9, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    85a0:	ea4f 0049 	mov.w	r0, r9, lsl #1
    85a4:	4c48      	ldr	r4, [pc, #288]	; (86c8 <lv_draw_map+0x2cc>)
    85a6:	47a0      	blx	r4
    85a8:	4682      	mov	sl, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    85aa:	4648      	mov	r0, r9
    85ac:	47a0      	blx	r4
    85ae:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
    85b0:	9605      	str	r6, [sp, #20]
    85b2:	2e00      	cmp	r6, #0
    85b4:	dd4f      	ble.n	8656 <lv_draw_map+0x25a>
                map_buf_tmp += map_w * px_size_byte;
    85b6:	fb08 f805 	mul.w	r8, r8, r5
    85ba:	2500      	movs	r5, #0
    85bc:	46ac      	mov	ip, r5
    85be:	9e14      	ldr	r6, [sp, #80]	; 0x50
    85c0:	e025      	b.n	860e <lv_draw_map+0x212>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    85c2:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
    85c6:	e7eb      	b.n	85a0 <lv_draw_map+0x1a4>
    85c8:	445b      	add	r3, fp
    85ca:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    85cc:	4596      	cmp	lr, r2
    85ce:	d00a      	beq.n	85e6 <lv_draw_map+0x1ea>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    85d0:	7899      	ldrb	r1, [r3, #2]
                    mask_buf[px_i] = px_opa;
    85d2:	f802 1b01 	strb.w	r1, [r2], #1
                    if(px_opa) {
    85d6:	2900      	cmp	r1, #0
    85d8:	d0f6      	beq.n	85c8 <lv_draw_map+0x1cc>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
    85da:	7858      	ldrb	r0, [r3, #1]
    85dc:	7819      	ldrb	r1, [r3, #0]
    85de:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    85e2:	8039      	strh	r1, [r7, #0]
    85e4:	e7f0      	b.n	85c8 <lv_draw_map+0x1cc>
                map_buf_tmp += map_w * px_size_byte;
    85e6:	4446      	add	r6, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    85e8:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    85ec:	3301      	adds	r3, #1
    85ee:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    85f2:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    85f4:	fa0c f383 	sxtah	r3, ip, r3
    85f8:	4599      	cmp	r9, r3
    85fa:	d914      	bls.n	8626 <lv_draw_map+0x22a>
                    blend_area.y2 ++;
    85fc:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8600:	3301      	adds	r3, #1
    8602:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            for(y = 0; y < draw_area_h; y++) {
    8606:	3501      	adds	r5, #1
    8608:	9b05      	ldr	r3, [sp, #20]
    860a:	429d      	cmp	r5, r3
    860c:	d023      	beq.n	8656 <lv_draw_map+0x25a>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    860e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8610:	2b00      	cmp	r3, #0
    8612:	dde8      	ble.n	85e6 <lv_draw_map+0x1ea>
    8614:	eb04 020c 	add.w	r2, r4, ip
    8618:	eb0a 074c 	add.w	r7, sl, ip, lsl #1
    861c:	449c      	add	ip, r3
    861e:	eb04 0e0c 	add.w	lr, r4, ip
    8622:	4633      	mov	r3, r6
    8624:	e7d4      	b.n	85d0 <lv_draw_map+0x1d4>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    8626:	9a08      	ldr	r2, [sp, #32]
    8628:	7b93      	ldrb	r3, [r2, #14]
    862a:	9302      	str	r3, [sp, #8]
    862c:	7813      	ldrb	r3, [r2, #0]
    862e:	9301      	str	r3, [sp, #4]
    8630:	2302      	movs	r3, #2
    8632:	9300      	str	r3, [sp, #0]
    8634:	4623      	mov	r3, r4
    8636:	4652      	mov	r2, sl
    8638:	a926      	add	r1, sp, #152	; 0x98
    863a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    863c:	4f24      	ldr	r7, [pc, #144]	; (86d0 <lv_draw_map+0x2d4>)
    863e:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
    8640:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8644:	3301      	adds	r3, #1
    8646:	b21b      	sxth	r3, r3
    8648:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    864c:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    px_i = 0;
    8650:	f04f 0c00 	mov.w	ip, #0
    8654:	e7d7      	b.n	8606 <lv_draw_map+0x20a>
            if(blend_area.y1 != blend_area.y2) {
    8656:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    865a:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    865e:	429a      	cmp	r2, r3
    8660:	d00f      	beq.n	8682 <lv_draw_map+0x286>
                blend_area.y2--;
    8662:	3b01      	subs	r3, #1
    8664:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    8668:	9a08      	ldr	r2, [sp, #32]
    866a:	7b93      	ldrb	r3, [r2, #14]
    866c:	9302      	str	r3, [sp, #8]
    866e:	7813      	ldrb	r3, [r2, #0]
    8670:	9301      	str	r3, [sp, #4]
    8672:	2302      	movs	r3, #2
    8674:	9300      	str	r3, [sp, #0]
    8676:	4623      	mov	r3, r4
    8678:	4652      	mov	r2, sl
    867a:	a926      	add	r1, sp, #152	; 0x98
    867c:	9823      	ldr	r0, [sp, #140]	; 0x8c
    867e:	4d14      	ldr	r5, [pc, #80]	; (86d0 <lv_draw_map+0x2d4>)
    8680:	47a8      	blx	r5
            _lv_mem_buf_release(mask_buf);
    8682:	4620      	mov	r0, r4
    8684:	4c13      	ldr	r4, [pc, #76]	; (86d4 <lv_draw_map+0x2d8>)
    8686:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    8688:	4650      	mov	r0, sl
    868a:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    868c:	e287      	b.n	8b9e <lv_draw_map+0x7a2>
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    868e:	a83a      	add	r0, sp, #232	; 0xe8
    8690:	4b0c      	ldr	r3, [pc, #48]	; (86c4 <lv_draw_map+0x2c8>)
    8692:	4798      	blx	r3
    8694:	901c      	str	r0, [sp, #112]	; 0x70
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8696:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    8698:	0058      	lsls	r0, r3, #1
    869a:	4c0b      	ldr	r4, [pc, #44]	; (86c8 <lv_draw_map+0x2cc>)
    869c:	47a0      	blx	r4
    869e:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    86a0:	981c      	ldr	r0, [sp, #112]	; 0x70
    86a2:	47a0      	blx	r4
    86a4:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    86a6:	2148      	movs	r1, #72	; 0x48
    86a8:	a828      	add	r0, sp, #160	; 0xa0
    86aa:	4b08      	ldr	r3, [pc, #32]	; (86cc <lv_draw_map+0x2d0>)
    86ac:	4798      	blx	r3
            if(transform) {
    86ae:	9b05      	ldr	r3, [sp, #20]
    86b0:	2b00      	cmp	r3, #0
    86b2:	d036      	beq.n	8722 <lv_draw_map+0x326>
    86b4:	e291      	b.n	8bda <lv_draw_map+0x7de>
    86b6:	bf00      	nop
    86b8:	0000574d 	.word	0x0000574d
    86bc:	00010221 	.word	0x00010221
    86c0:	0000b3e5 	.word	0x0000b3e5
    86c4:	000106c1 	.word	0x000106c1
    86c8:	00011a29 	.word	0x00011a29
    86cc:	00011bdb 	.word	0x00011bdb
    86d0:	000078d5 	.word	0x000078d5
    86d4:	000116a9 	.word	0x000116a9
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    86d8:	2205      	movs	r2, #5
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;

                trans_dsc.cfg.angle = draw_dsc->angle;
    86da:	9808      	ldr	r0, [sp, #32]
    86dc:	8843      	ldrh	r3, [r0, #2]
    86de:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.zoom = draw_dsc->zoom;
    86e2:	8903      	ldrh	r3, [r0, #8]
    86e4:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
                trans_dsc.cfg.src = map_p;
    86e8:	9728      	str	r7, [sp, #160]	; 0xa0
                trans_dsc.cfg.src_w = map_w;
    86ea:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    86ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
    86f0:	88cb      	ldrh	r3, [r1, #6]
    86f2:	3301      	adds	r3, #1
    86f4:	8849      	ldrh	r1, [r1, #2]
    86f6:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
    86f8:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.cf = cf;
    86fc:	f88d 20b2 	strb.w	r2, [sp, #178]	; 0xb2
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
    8700:	8883      	ldrh	r3, [r0, #4]
    8702:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
    8706:	88c3      	ldrh	r3, [r0, #6]
    8708:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.color = draw_dsc->recolor;
    870c:	8983      	ldrh	r3, [r0, #12]
    870e:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
                trans_dsc.cfg.antialias = draw_dsc->antialias;
    8712:	7bc3      	ldrb	r3, [r0, #15]
    8714:	f3c3 0300 	ubfx	r3, r3, #0, #1
    8718:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3

                _lv_img_buf_transform_init(&trans_dsc);
    871c:	a828      	add	r0, sp, #160	; 0xa0
    871e:	4b93      	ldr	r3, [pc, #588]	; (896c <lv_draw_map+0x570>)
    8720:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
    8722:	9808      	ldr	r0, [sp, #32]
    8724:	7a83      	ldrb	r3, [r0, #10]
    8726:	43da      	mvns	r2, r3
    8728:	b2d2      	uxtb	r2, r2
    872a:	9212      	str	r2, [sp, #72]	; 0x48
            if(draw_dsc->recolor_opa != 0) {
    872c:	b303      	cbz	r3, 8770 <lv_draw_map+0x374>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    872e:	b29b      	uxth	r3, r3
    8730:	7b42      	ldrb	r2, [r0, #13]
    8732:	08d2      	lsrs	r2, r2, #3
    8734:	fb02 f203 	mul.w	r2, r2, r3
    8738:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    873a:	8982      	ldrh	r2, [r0, #12]
    873c:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8740:	fb02 f203 	mul.w	r2, r2, r3
    8744:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    8746:	7b02      	ldrb	r2, [r0, #12]
    8748:	f002 021f 	and.w	r2, r2, #31
    874c:	fb02 f303 	mul.w	r3, r2, r3
    8750:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    8752:	9b06      	ldr	r3, [sp, #24]
    8754:	b98b      	cbnz	r3, 877a <lv_draw_map+0x37e>
    8756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8758:	bb53      	cbnz	r3, 87b0 <lv_draw_map+0x3b4>
    875a:	9a08      	ldr	r2, [sp, #32]
    875c:	8853      	ldrh	r3, [r2, #2]
    875e:	bb53      	cbnz	r3, 87b6 <lv_draw_map+0x3ba>
    8760:	8913      	ldrh	r3, [r2, #8]
    8762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8766:	bf14      	ite	ne
    8768:	2302      	movne	r3, #2
    876a:	2301      	moveq	r3, #1
    876c:	931d      	str	r3, [sp, #116]	; 0x74
    876e:	e006      	b.n	877e <lv_draw_map+0x382>
            uint16_t recolor_premult[3] = {0};
    8770:	2300      	movs	r3, #0
    8772:	9313      	str	r3, [sp, #76]	; 0x4c
    8774:	9311      	str	r3, [sp, #68]	; 0x44
    8776:	9310      	str	r3, [sp, #64]	; 0x40
    8778:	e7eb      	b.n	8752 <lv_draw_map+0x356>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    877a:	2302      	movs	r3, #2
    877c:	931d      	str	r3, [sp, #116]	; 0x74
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;


            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
    877e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8780:	b9e3      	cbnz	r3, 87bc <lv_draw_map+0x3c0>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
    8782:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8784:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    8788:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
    878c:	4413      	add	r3, r2
    878e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8790:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    8794:	1a9b      	subs	r3, r3, r2
    8796:	9322      	str	r3, [sp, #136]	; 0x88
#endif
            for(y = 0; y < draw_area_h; y++) {
    8798:	961f      	str	r6, [sp, #124]	; 0x7c
    879a:	2e00      	cmp	r6, #0
    879c:	f340 81e4 	ble.w	8b68 <lv_draw_map+0x76c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
    87a0:	fb08 f305 	mul.w	r3, r8, r5
    87a4:	931e      	str	r3, [sp, #120]	; 0x78
    87a6:	2300      	movs	r3, #0
    87a8:	930e      	str	r3, [sp, #56]	; 0x38
    87aa:	930f      	str	r3, [sp, #60]	; 0x3c
        }
    }
    else {
        pxi = 0; /*unused*/
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    87ac:	46d1      	mov	r9, sl
    87ae:	e154      	b.n	8a5a <lv_draw_map+0x65e>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    87b0:	2302      	movs	r3, #2
    87b2:	931d      	str	r3, [sp, #116]	; 0x74
    87b4:	e7e3      	b.n	877e <lv_draw_map+0x382>
    87b6:	2302      	movs	r3, #2
    87b8:	931d      	str	r3, [sp, #116]	; 0x74
    87ba:	e7e0      	b.n	877e <lv_draw_map+0x382>
                _lv_memset_ff(mask_buf, mask_buf_size);
    87bc:	991c      	ldr	r1, [sp, #112]	; 0x70
    87be:	9817      	ldr	r0, [sp, #92]	; 0x5c
    87c0:	4b6b      	ldr	r3, [pc, #428]	; (8970 <lv_draw_map+0x574>)
    87c2:	4798      	blx	r3
    87c4:	e7dd      	b.n	8782 <lv_draw_map+0x386>
    int32_t xt = x - dsc->cfg.pivot_x;
    87c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    87c8:	442b      	add	r3, r5
    87ca:	b21b      	sxth	r3, r3
    87cc:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
    87d0:	1a9b      	subs	r3, r3, r2
    int32_t yt = y - dsc->cfg.pivot_y;
    87d2:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
    87d6:	990d      	ldr	r1, [sp, #52]	; 0x34
    87d8:	1a8a      	subs	r2, r1, r2
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
    87da:	f8bd 10ae 	ldrh.w	r1, [sp, #174]	; 0xae
    87de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    87e2:	d056      	beq.n	8892 <lv_draw_map+0x496>
    else if(dsc->cfg.angle == 0) {
    87e4:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
    87e8:	2900      	cmp	r1, #0
    87ea:	d165      	bne.n	88b8 <lv_draw_map+0x4bc>
        xt *= dsc->tmp.zoom_inv;
    87ec:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
        xs = xt + dsc->tmp.pivot_x_256;
    87f0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    87f2:	fb01 4303 	mla	r3, r1, r3, r4
    87f6:	9309      	str	r3, [sp, #36]	; 0x24
        ys = yt + dsc->tmp.pivot_y_256;
    87f8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    87fa:	fb01 3302 	mla	r3, r1, r2, r3
    87fe:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t xs_int = xs >> 8;
    8800:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8802:	121f      	asrs	r7, r3, #8
    if(xs_int >= dsc->cfg.src_w) return false;
    8804:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
    8808:	429f      	cmp	r7, r3
    880a:	f280 80ab 	bge.w	8964 <lv_draw_map+0x568>
    else if(xs_int < 0) return false;
    880e:	2f00      	cmp	r7, #0
    8810:	f2c0 80a8 	blt.w	8964 <lv_draw_map+0x568>
    int32_t ys_int = ys >> 8;
    8814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8816:	1212      	asrs	r2, r2, #8
    8818:	4610      	mov	r0, r2
    881a:	9215      	str	r2, [sp, #84]	; 0x54
    if(ys_int >= dsc->cfg.src_h) return false;
    881c:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
    8820:	4290      	cmp	r0, r2
    8822:	f280 809f 	bge.w	8964 <lv_draw_map+0x568>
    else if(ys_int < 0) return false;
    8826:	2800      	cmp	r0, #0
    8828:	f2c0 809c 	blt.w	8964 <lv_draw_map+0x568>
    if(dsc->tmp.native_color) {
    882c:	f89d 20d4 	ldrb.w	r2, [sp, #212]	; 0xd4
    8830:	f012 0f04 	tst.w	r2, #4
    8834:	d06a      	beq.n	890c <lv_draw_map+0x510>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
    8836:	9928      	ldr	r1, [sp, #160]	; 0xa0
        if(dsc->tmp.has_alpha == 0) {
    8838:	f012 0f02 	tst.w	r2, #2
    883c:	d155      	bne.n	88ea <lv_draw_map+0x4ee>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    883e:	fb03 7300 	mla	r3, r3, r0, r7
    8842:	005a      	lsls	r2, r3, #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
    8844:	1888      	adds	r0, r1, r2
        *d8 = *s8;
    8846:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
    884a:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
    884e:	7843      	ldrb	r3, [r0, #1]
    8850:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
            px_size = LV_COLOR_SIZE >> 3;
    8854:	2102      	movs	r1, #2
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
    8856:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
    885a:	f013 0f01 	tst.w	r3, #1
    885e:	d00d      	beq.n	887c <lv_draw_map+0x480>
        lv_color_t ct = LV_COLOR_TRANSP;
    8860:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8862:	f36f 0304 	bfc	r3, #0, #5
    8866:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
    886a:	f36f 23cf 	bfc	r3, #11, #5
    886e:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        if(dsc->res.color.full == ct.full) return false;
    8872:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
    8876:	b29b      	uxth	r3, r3
    8878:	4298      	cmp	r0, r3
    887a:	d073      	beq.n	8964 <lv_draw_map+0x568>
    }

    if(dsc->cfg.antialias == false) return true;
    887c:	f89d 30b3 	ldrb.w	r3, [sp, #179]	; 0xb3
    8880:	2b00      	cmp	r3, #0
    8882:	d159      	bne.n	8938 <lv_draw_map+0x53c>
                            mask_buf[px_i] = trans_dsc.res.opa;
    8884:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
    8888:	f88a 3000 	strb.w	r3, [sl]
                            c.full = trans_dsc.res.color.full;
    888c:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
    8890:	e086      	b.n	89a0 <lv_draw_map+0x5a4>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
    8892:	9834      	ldr	r0, [sp, #208]	; 0xd0
    8894:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8896:	fb00 f403 	mul.w	r4, r0, r3
    889a:	fb01 4712 	mls	r7, r1, r2, r4
    889e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    88a0:	eb04 14e7 	add.w	r4, r4, r7, asr #7
    88a4:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    88a6:	fb00 f202 	mul.w	r2, r0, r2
    88aa:	fb01 2303 	mla	r3, r1, r3, r2
    88ae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    88b0:	eb02 13e3 	add.w	r3, r2, r3, asr #7
    88b4:	930b      	str	r3, [sp, #44]	; 0x2c
    88b6:	e7a3      	b.n	8800 <lv_draw_map+0x404>
        xt *= dsc->tmp.zoom_inv;
    88b8:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
    88bc:	fb01 f303 	mul.w	r3, r1, r3
        yt *= dsc->tmp.zoom_inv;
    88c0:	fb01 f202 	mul.w	r2, r1, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
    88c4:	9934      	ldr	r1, [sp, #208]	; 0xd0
    88c6:	9833      	ldr	r0, [sp, #204]	; 0xcc
    88c8:	fb01 f403 	mul.w	r4, r1, r3
    88cc:	fb00 4712 	mls	r7, r0, r2, r4
    88d0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    88d2:	eb04 34e7 	add.w	r4, r4, r7, asr #15
    88d6:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    88d8:	fb01 f202 	mul.w	r2, r1, r2
    88dc:	fb00 2303 	mla	r3, r0, r3, r2
    88e0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    88e2:	eb02 33e3 	add.w	r3, r2, r3, asr #15
    88e6:	930b      	str	r3, [sp, #44]	; 0x2c
    88e8:	e78a      	b.n	8800 <lv_draw_map+0x404>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    88ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
    88ec:	fb03 7302 	mla	r3, r3, r2, r7
    88f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
    88f4:	188b      	adds	r3, r1, r2
    88f6:	5c89      	ldrb	r1, [r1, r2]
    88f8:	f88d 10b4 	strb.w	r1, [sp, #180]	; 0xb4
    88fc:	7859      	ldrb	r1, [r3, #1]
    88fe:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
            dsc->res.opa = src_u8[pxi + px_size - 1];
    8902:	789b      	ldrb	r3, [r3, #2]
    8904:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
    8908:	2103      	movs	r1, #3
    890a:	e7a4      	b.n	8856 <lv_draw_map+0x45a>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    890c:	b239      	sxth	r1, r7
    890e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    8912:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
    8916:	9225      	str	r2, [sp, #148]	; 0x94
    8918:	9124      	str	r1, [sp, #144]	; 0x90
    891a:	a82e      	add	r0, sp, #184	; 0xb8
    891c:	4c15      	ldr	r4, [pc, #84]	; (8974 <lv_draw_map+0x578>)
    891e:	47a0      	blx	r4
    8920:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    8924:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8926:	9924      	ldr	r1, [sp, #144]	; 0x90
    8928:	a82e      	add	r0, sp, #184	; 0xb8
    892a:	4b13      	ldr	r3, [pc, #76]	; (8978 <lv_draw_map+0x57c>)
    892c:	4798      	blx	r3
    892e:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
        pxi = 0; /*unused*/
    8932:	2200      	movs	r2, #0
        px_size = 0;    /*unused*/
    8934:	4611      	mov	r1, r2
    8936:	e78e      	b.n	8856 <lv_draw_map+0x45a>

    dsc->tmp.xs = xs;
    8938:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    893c:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
    8940:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    8944:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
    8948:	f8ad 70dc 	strh.w	r7, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
    894c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    8950:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
    8954:	9238      	str	r2, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
    8956:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
    895a:	a828      	add	r0, sp, #160	; 0xa0
    895c:	4b07      	ldr	r3, [pc, #28]	; (897c <lv_draw_map+0x580>)
    895e:	4798      	blx	r3
                        if(ret == false) {
    8960:	2800      	cmp	r0, #0
    8962:	d18f      	bne.n	8884 <lv_draw_map+0x488>
                            mask_buf[px_i] = LV_OPA_TRANSP;
    8964:	2300      	movs	r3, #0
    8966:	f88a 3000 	strb.w	r3, [sl]
                            continue;
    896a:	e03d      	b.n	89e8 <lv_draw_map+0x5ec>
    896c:	0000e031 	.word	0x0000e031
    8970:	00011c91 	.word	0x00011c91
    8974:	0000ddfd 	.word	0x0000ddfd
    8978:	0000df2d 	.word	0x0000df2d
    897c:	0000e2e1 	.word	0x0000e2e1
    8980:	000007e0 	.word	0x000007e0
                            mask_buf[px_i] = 0xFF;
    8984:	23ff      	movs	r3, #255	; 0xff
    8986:	f88a 3000 	strb.w	r3, [sl]
                        c.full =  map_px[0] + (map_px[1] << 8);
    898a:	7872      	ldrb	r2, [r6, #1]
    898c:	7833      	ldrb	r3, [r6, #0]
    898e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    8992:	b29b      	uxth	r3, r3
                        if(chroma_key) {
    8994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8996:	b11a      	cbz	r2, 89a0 <lv_draw_map+0x5a4>
                            if(c.full == chroma_keyed_color.full) {
    8998:	f83f 201c 	ldrh.w	r2, [pc, #-28]	; 8980 <lv_draw_map+0x584>
    899c:	429a      	cmp	r2, r3
    899e:	d036      	beq.n	8a0e <lv_draw_map+0x612>
                    if(draw_dsc->recolor_opa != 0) {
    89a0:	9a08      	ldr	r2, [sp, #32]
    89a2:	7a92      	ldrb	r2, [r2, #10]
    89a4:	b1ea      	cbz	r2, 89e2 <lv_draw_map+0x5e6>
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    89a6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    89aa:	0ad9      	lsrs	r1, r3, #11
    89ac:	9810      	ldr	r0, [sp, #64]	; 0x40
    89ae:	fb01 0102 	mla	r1, r1, r2, r0
    89b2:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    89b6:	f3c3 1045 	ubfx	r0, r3, #5, #6
    89ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
    89bc:	fb00 4002 	mla	r0, r0, r2, r4
    89c0:	f3c0 2005 	ubfx	r0, r0, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    89c4:	f003 031f 	and.w	r3, r3, #31
    89c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    89ca:	fb03 4302 	mla	r3, r3, r2, r4
    89ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
    89d2:	f363 0904 	bfi	r9, r3, #0, #5
    89d6:	f360 194a 	bfi	r9, r0, #5, #6
    89da:	f361 29cf 	bfi	r9, r1, #11, #5
    89de:	fa1f f389 	uxth.w	r3, r9
                    map2[px_i].full = c.full;
    89e2:	9a07      	ldr	r2, [sp, #28]
    89e4:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    89e8:	3501      	adds	r5, #1
    89ea:	445e      	add	r6, fp
    89ec:	f10a 0a01 	add.w	sl, sl, #1
    89f0:	4545      	cmp	r5, r8
    89f2:	d010      	beq.n	8a16 <lv_draw_map+0x61a>
                    if(transform) {
    89f4:	9b05      	ldr	r3, [sp, #20]
    89f6:	2b00      	cmp	r3, #0
    89f8:	f47f aee5 	bne.w	87c6 <lv_draw_map+0x3ca>
                        if(alpha_byte) {
    89fc:	9b06      	ldr	r3, [sp, #24]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d0c0      	beq.n	8984 <lv_draw_map+0x588>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    8a02:	78b3      	ldrb	r3, [r6, #2]
                            mask_buf[px_i] = px_opa;
    8a04:	f88a 3000 	strb.w	r3, [sl]
                            if(px_opa == 0) {
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d0ed      	beq.n	89e8 <lv_draw_map+0x5ec>
    8a0c:	e7bd      	b.n	898a <lv_draw_map+0x58e>
                                mask_buf[px_i] = LV_OPA_TRANSP;
    8a0e:	2300      	movs	r3, #0
    8a10:	f88a 3000 	strb.w	r3, [sl]
                                continue;
    8a14:	e7e8      	b.n	89e8 <lv_draw_map+0x5ec>
    8a16:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a1a:	189c      	adds	r4, r3, r2
                if(other_mask_cnt) {
    8a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d13e      	bne.n	8aa0 <lv_draw_map+0x6a4>
                map_buf_tmp += map_w * px_size_byte;
    8a22:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8a24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    8a26:	4413      	add	r3, r2
    8a28:	9314      	str	r3, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8a2a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8a2e:	3301      	adds	r3, #1
    8a30:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    8a34:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    8a36:	fa04 f383 	sxtah	r3, r4, r3
    8a3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8a3c:	429a      	cmp	r2, r3
    8a3e:	d95c      	bls.n	8afa <lv_draw_map+0x6fe>
                    blend_area.y2 ++;
    8a40:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8a44:	3301      	adds	r3, #1
    8a46:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    8a4a:	940f      	str	r4, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
    8a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a4e:	3301      	adds	r3, #1
    8a50:	930e      	str	r3, [sp, #56]	; 0x38
    8a52:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8a54:	4293      	cmp	r3, r2
    8a56:	f000 8087 	beq.w	8b68 <lv_draw_map+0x76c>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
    8a5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8a5c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    8a60:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
    8a64:	4413      	add	r3, r2
    8a66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8a68:	f9b2 2000 	ldrsh.w	r2, [r2]
    8a6c:	1a9b      	subs	r3, r3, r2
    8a6e:	930c      	str	r3, [sp, #48]	; 0x30
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    8a70:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8a72:	4698      	mov	r8, r3
    8a74:	2b00      	cmp	r3, #0
    8a76:	dd11      	ble.n	8a9c <lv_draw_map+0x6a0>
    8a78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8a7a:	4619      	mov	r1, r3
    8a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a7e:	eb01 0a02 	add.w	sl, r1, r2
    8a82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8a84:	4619      	mov	r1, r3
    8a86:	eb01 0342 	add.w	r3, r1, r2, lsl #1
    8a8a:	9307      	str	r3, [sp, #28]
    8a8c:	9e14      	ldr	r6, [sp, #80]	; 0x50
    8a8e:	2500      	movs	r5, #0
    int32_t yt = y - dsc->cfg.pivot_y;
    8a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8a94:	4413      	add	r3, r2
    8a96:	b21b      	sxth	r3, r3
    8a98:	930d      	str	r3, [sp, #52]	; 0x34
    8a9a:	e7ab      	b.n	89f4 <lv_draw_map+0x5f8>
    8a9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8a9e:	e7bd      	b.n	8a1c <lv_draw_map+0x620>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
    8aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8aa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8aa4:	4413      	add	r3, r2
    8aa6:	461e      	mov	r6, r3
    8aa8:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
    8aac:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    8ab0:	3301      	adds	r3, #1
    8ab2:	1a5b      	subs	r3, r3, r1
    8ab4:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
    8ab8:	9d18      	ldr	r5, [sp, #96]	; 0x60
    8aba:	8a68      	ldrh	r0, [r5, #18]
    8abc:	4402      	add	r2, r0
    8abe:	980e      	ldr	r0, [sp, #56]	; 0x38
    8ac0:	4402      	add	r2, r0
    8ac2:	8a28      	ldrh	r0, [r5, #16]
    8ac4:	4401      	add	r1, r0
    8ac6:	b21b      	sxth	r3, r3
    8ac8:	b212      	sxth	r2, r2
    8aca:	b209      	sxth	r1, r1
    8acc:	4630      	mov	r0, r6
    8ace:	4d4e      	ldr	r5, [pc, #312]	; (8c08 <lv_draw_map+0x80c>)
    8ad0:	47a8      	blx	r5
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
    8ad2:	b128      	cbz	r0, 8ae0 <lv_draw_map+0x6e4>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    8ad4:	2802      	cmp	r0, #2
    8ad6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8ad8:	bf08      	it	eq
    8ada:	4602      	moveq	r2, r0
    8adc:	921d      	str	r2, [sp, #116]	; 0x74
    8ade:	e7a0      	b.n	8a22 <lv_draw_map+0x626>
    8ae0:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    8ae4:	3101      	adds	r1, #1
    8ae6:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    8aea:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
    8aec:	b209      	sxth	r1, r1
    8aee:	4630      	mov	r0, r6
    8af0:	4b46      	ldr	r3, [pc, #280]	; (8c0c <lv_draw_map+0x810>)
    8af2:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    8af4:	2302      	movs	r3, #2
    8af6:	931d      	str	r3, [sp, #116]	; 0x74
    8af8:	e793      	b.n	8a22 <lv_draw_map+0x626>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    8afa:	9d08      	ldr	r5, [sp, #32]
    8afc:	7bab      	ldrb	r3, [r5, #14]
    8afe:	9302      	str	r3, [sp, #8]
    8b00:	782b      	ldrb	r3, [r5, #0]
    8b02:	9301      	str	r3, [sp, #4]
    8b04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8b06:	9300      	str	r3, [sp, #0]
    8b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8b0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8b0c:	a926      	add	r1, sp, #152	; 0x98
    8b0e:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8b10:	4c3f      	ldr	r4, [pc, #252]	; (8c10 <lv_draw_map+0x814>)
    8b12:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
    8b14:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    8b18:	3301      	adds	r3, #1
    8b1a:	b21b      	sxth	r3, r3
    8b1c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    8b20:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    8b24:	9b06      	ldr	r3, [sp, #24]
    8b26:	b95b      	cbnz	r3, 8b40 <lv_draw_map+0x744>
    8b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b2a:	b983      	cbnz	r3, 8b4e <lv_draw_map+0x752>
    8b2c:	886b      	ldrh	r3, [r5, #2]
    8b2e:	b98b      	cbnz	r3, 8b54 <lv_draw_map+0x758>
    8b30:	892b      	ldrh	r3, [r5, #8]
    8b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8b36:	bf14      	ite	ne
    8b38:	2302      	movne	r3, #2
    8b3a:	2301      	moveq	r3, #1
    8b3c:	931d      	str	r3, [sp, #116]	; 0x74
    8b3e:	e001      	b.n	8b44 <lv_draw_map+0x748>
    8b40:	2302      	movs	r3, #2
    8b42:	931d      	str	r3, [sp, #116]	; 0x74
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
    8b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8b46:	b943      	cbnz	r3, 8b5a <lv_draw_map+0x75e>
                    px_i = 0;
    8b48:	2300      	movs	r3, #0
    8b4a:	930f      	str	r3, [sp, #60]	; 0x3c
    8b4c:	e77e      	b.n	8a4c <lv_draw_map+0x650>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    8b4e:	2302      	movs	r3, #2
    8b50:	931d      	str	r3, [sp, #116]	; 0x74
    8b52:	e7f7      	b.n	8b44 <lv_draw_map+0x748>
    8b54:	2302      	movs	r3, #2
    8b56:	931d      	str	r3, [sp, #116]	; 0x74
    8b58:	e7f4      	b.n	8b44 <lv_draw_map+0x748>
                        _lv_memset_ff(mask_buf, mask_buf_size);
    8b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
    8b5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8b5e:	4b2d      	ldr	r3, [pc, #180]	; (8c14 <lv_draw_map+0x818>)
    8b60:	4798      	blx	r3
                    px_i = 0;
    8b62:	2300      	movs	r3, #0
    8b64:	930f      	str	r3, [sp, #60]	; 0x3c
    8b66:	e771      	b.n	8a4c <lv_draw_map+0x650>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
    8b68:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    8b6c:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    8b70:	429a      	cmp	r2, r3
    8b72:	d00f      	beq.n	8b94 <lv_draw_map+0x798>
                blend_area.y2--;
    8b74:	3b01      	subs	r3, #1
    8b76:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    8b7a:	9a08      	ldr	r2, [sp, #32]
    8b7c:	7b93      	ldrb	r3, [r2, #14]
    8b7e:	9302      	str	r3, [sp, #8]
    8b80:	7813      	ldrb	r3, [r2, #0]
    8b82:	9301      	str	r3, [sp, #4]
    8b84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8b86:	9300      	str	r3, [sp, #0]
    8b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8b8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8b8c:	a926      	add	r1, sp, #152	; 0x98
    8b8e:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8b90:	4c1f      	ldr	r4, [pc, #124]	; (8c10 <lv_draw_map+0x814>)
    8b92:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
    8b94:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8b96:	4c20      	ldr	r4, [pc, #128]	; (8c18 <lv_draw_map+0x81c>)
    8b98:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    8b9a:	981a      	ldr	r0, [sp, #104]	; 0x68
    8b9c:	47a0      	blx	r4
        }
    }
}
    8b9e:	b03d      	add	sp, #244	; 0xf4
    8ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    8ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8ba6:	bb13      	cbnz	r3, 8bee <lv_draw_map+0x7f2>
    8ba8:	2301      	movs	r3, #1
    8baa:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8bac:	a83a      	add	r0, sp, #232	; 0xe8
    8bae:	4b1b      	ldr	r3, [pc, #108]	; (8c1c <lv_draw_map+0x820>)
    8bb0:	4798      	blx	r3
    8bb2:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8bb6:	f67f ad6a 	bls.w	868e <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    8bba:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    8bbe:	4c18      	ldr	r4, [pc, #96]	; (8c20 <lv_draw_map+0x824>)
    8bc0:	47a0      	blx	r4
    8bc2:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    8bc4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    8bc8:	47a0      	blx	r4
    8bca:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    8bcc:	2148      	movs	r1, #72	; 0x48
    8bce:	a828      	add	r0, sp, #160	; 0xa0
    8bd0:	4b0e      	ldr	r3, [pc, #56]	; (8c0c <lv_draw_map+0x810>)
    8bd2:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8bd4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8bd8:	931c      	str	r3, [sp, #112]	; 0x70
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    8bda:	9b06      	ldr	r3, [sp, #24]
    8bdc:	2b00      	cmp	r3, #0
    8bde:	f47f ad7b 	bne.w	86d8 <lv_draw_map+0x2dc>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
    8be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8be4:	2b00      	cmp	r3, #0
    8be6:	bf0c      	ite	eq
    8be8:	2204      	moveq	r2, #4
    8bea:	2206      	movne	r2, #6
    8bec:	e575      	b.n	86da <lv_draw_map+0x2de>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    8bee:	2301      	movs	r3, #1
    8bf0:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    8bf2:	a83a      	add	r0, sp, #232	; 0xe8
    8bf4:	4b09      	ldr	r3, [pc, #36]	; (8c1c <lv_draw_map+0x820>)
    8bf6:	4798      	blx	r3
    8bf8:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    8bfc:	f67f ad47 	bls.w	868e <lv_draw_map+0x292>
    8c00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    8c04:	931c      	str	r3, [sp, #112]	; 0x70
    8c06:	e546      	b.n	8696 <lv_draw_map+0x29a>
    8c08:	0000b33d 	.word	0x0000b33d
    8c0c:	00011bdb 	.word	0x00011bdb
    8c10:	000078d5 	.word	0x000078d5
    8c14:	00011c91 	.word	0x00011c91
    8c18:	000116a9 	.word	0x000116a9
    8c1c:	000106c1 	.word	0x000106c1
    8c20:	00011a29 	.word	0x00011a29

00008c24 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
    8c24:	b570      	push	{r4, r5, r6, lr}
    8c26:	b09e      	sub	sp, #120	; 0x78
    8c28:	4604      	mov	r4, r0
    8c2a:	460d      	mov	r5, r1
    8c2c:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
    8c2e:	a809      	add	r0, sp, #36	; 0x24
    8c30:	4b0b      	ldr	r3, [pc, #44]	; (8c60 <show_error+0x3c>)
    8c32:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
    8c34:	4b0b      	ldr	r3, [pc, #44]	; (8c64 <show_error+0x40>)
    8c36:	881b      	ldrh	r3, [r3, #0]
    8c38:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect(coords, clip_area, &rect_dsc);
    8c3c:	aa09      	add	r2, sp, #36	; 0x24
    8c3e:	4629      	mov	r1, r5
    8c40:	4620      	mov	r0, r4
    8c42:	4b09      	ldr	r3, [pc, #36]	; (8c68 <show_error+0x44>)
    8c44:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    8c46:	a802      	add	r0, sp, #8
    8c48:	4b08      	ldr	r3, [pc, #32]	; (8c6c <show_error+0x48>)
    8c4a:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
    8c4c:	2300      	movs	r3, #0
    8c4e:	9300      	str	r3, [sp, #0]
    8c50:	4633      	mov	r3, r6
    8c52:	aa02      	add	r2, sp, #8
    8c54:	4629      	mov	r1, r5
    8c56:	4620      	mov	r0, r4
    8c58:	4c05      	ldr	r4, [pc, #20]	; (8c70 <show_error+0x4c>)
    8c5a:	47a0      	blx	r4
}
    8c5c:	b01e      	add	sp, #120	; 0x78
    8c5e:	bd70      	pop	{r4, r5, r6, pc}
    8c60:	0000b789 	.word	0x0000b789
    8c64:	00017630 	.word	0x00017630
    8c68:	0000b851 	.word	0x0000b851
    8c6c:	00008f99 	.word	0x00008f99
    8c70:	00008ff1 	.word	0x00008ff1

00008c74 <lv_draw_img_dsc_init>:
{
    8c74:	b510      	push	{r4, lr}
    8c76:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
    8c78:	2110      	movs	r1, #16
    8c7a:	4b0c      	ldr	r3, [pc, #48]	; (8cac <lv_draw_img_dsc_init+0x38>)
    8c7c:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
    8c7e:	7b23      	ldrb	r3, [r4, #12]
    8c80:	f36f 0304 	bfc	r3, #0, #5
    8c84:	7323      	strb	r3, [r4, #12]
    8c86:	89a3      	ldrh	r3, [r4, #12]
    8c88:	f36f 134a 	bfc	r3, #5, #6
    8c8c:	81a3      	strh	r3, [r4, #12]
    8c8e:	0a1b      	lsrs	r3, r3, #8
    8c90:	f36f 03c7 	bfc	r3, #3, #5
    8c94:	7363      	strb	r3, [r4, #13]
    dsc->opa = LV_OPA_COVER;
    8c96:	23ff      	movs	r3, #255	; 0xff
    8c98:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
    8c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
    8c9e:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
    8ca0:	7be3      	ldrb	r3, [r4, #15]
    8ca2:	f043 0301 	orr.w	r3, r3, #1
    8ca6:	73e3      	strb	r3, [r4, #15]
    8ca8:	bd10      	pop	{r4, pc}
    8caa:	bf00      	nop
    8cac:	00011bdb 	.word	0x00011bdb

00008cb0 <lv_img_cf_get_px_size>:
    switch(cf) {
    8cb0:	3804      	subs	r0, #4
    8cb2:	280a      	cmp	r0, #10
    8cb4:	d813      	bhi.n	8cde <lv_img_cf_get_px_size+0x2e>
    8cb6:	e8df f000 	tbb	[pc, r0]
    8cba:	0806      	.short	0x0806
    8cbc:	0e0c0a06 	.word	0x0e0c0a06
    8cc0:	0e0c0a10 	.word	0x0e0c0a10
    8cc4:	10          	.byte	0x10
    8cc5:	00          	.byte	0x00
            px_size = LV_COLOR_SIZE;
    8cc6:	2010      	movs	r0, #16
    8cc8:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
    8cca:	2018      	movs	r0, #24
            break;
    8ccc:	4770      	bx	lr
            px_size = 1;
    8cce:	2001      	movs	r0, #1
            break;
    8cd0:	4770      	bx	lr
            px_size = 2;
    8cd2:	2002      	movs	r0, #2
            break;
    8cd4:	4770      	bx	lr
            px_size = 4;
    8cd6:	2004      	movs	r0, #4
            break;
    8cd8:	4770      	bx	lr
            px_size = 8;
    8cda:	2008      	movs	r0, #8
            break;
    8cdc:	4770      	bx	lr
            px_size = 0;
    8cde:	2000      	movs	r0, #0
}
    8ce0:	4770      	bx	lr

00008ce2 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
    8ce2:	2803      	cmp	r0, #3
    8ce4:	d005      	beq.n	8cf2 <lv_img_cf_is_chroma_keyed+0x10>
    8ce6:	d302      	bcc.n	8cee <lv_img_cf_is_chroma_keyed+0xc>
    8ce8:	3806      	subs	r0, #6
    8cea:	2804      	cmp	r0, #4
    8cec:	d901      	bls.n	8cf2 <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
    8cee:	2000      	movs	r0, #0
    8cf0:	4770      	bx	lr
            is_chroma_keyed = true;
    8cf2:	2001      	movs	r0, #1
}
    8cf4:	4770      	bx	lr

00008cf6 <lv_img_cf_has_alpha>:
    switch(cf) {
    8cf6:	3802      	subs	r0, #2
    8cf8:	280c      	cmp	r0, #12
    8cfa:	d808      	bhi.n	8d0e <lv_img_cf_has_alpha+0x18>
    8cfc:	e8df f000 	tbb	[pc, r0]
    8d00:	09070709 	.word	0x09070709
    8d04:	09090907 	.word	0x09090907
    8d08:	09090909 	.word	0x09090909
    8d0c:	09          	.byte	0x09
    8d0d:	00          	.byte	0x00
            has_alpha = false;
    8d0e:	2000      	movs	r0, #0
    8d10:	4770      	bx	lr
            has_alpha = true;
    8d12:	2001      	movs	r0, #1
}
    8d14:	4770      	bx	lr
	...

00008d18 <lv_draw_img>:
{
    8d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d1c:	b08f      	sub	sp, #60	; 0x3c
    8d1e:	4605      	mov	r5, r0
    8d20:	460e      	mov	r6, r1
    if(src == NULL) {
    8d22:	b13a      	cbz	r2, 8d34 <lv_draw_img+0x1c>
    8d24:	461c      	mov	r4, r3
    8d26:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	2b05      	cmp	r3, #5
    8d2c:	d806      	bhi.n	8d3c <lv_draw_img+0x24>
}
    8d2e:	b00f      	add	sp, #60	; 0x3c
    8d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        show_error(coords, mask, "No\ndata");
    8d34:	4a72      	ldr	r2, [pc, #456]	; (8f00 <lv_draw_img+0x1e8>)
    8d36:	4b73      	ldr	r3, [pc, #460]	; (8f04 <lv_draw_img+0x1ec>)
    8d38:	4798      	blx	r3
        return;
    8d3a:	e7f8      	b.n	8d2e <lv_draw_img+0x16>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
    8d3c:	89a1      	ldrh	r1, [r4, #12]
    8d3e:	4b72      	ldr	r3, [pc, #456]	; (8f08 <lv_draw_img+0x1f0>)
    8d40:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
    8d42:	4607      	mov	r7, r0
    8d44:	2800      	cmp	r0, #0
    8d46:	f000 80a2 	beq.w	8e8e <lv_draw_img+0x176>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    8d4a:	f890 900c 	ldrb.w	r9, [r0, #12]
    8d4e:	f009 091f 	and.w	r9, r9, #31
    8d52:	4648      	mov	r0, r9
    8d54:	4b6d      	ldr	r3, [pc, #436]	; (8f0c <lv_draw_img+0x1f4>)
    8d56:	4798      	blx	r3
    8d58:	4680      	mov	r8, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
    8d5a:	4648      	mov	r0, r9
    8d5c:	4b6c      	ldr	r3, [pc, #432]	; (8f10 <lv_draw_img+0x1f8>)
    8d5e:	4798      	blx	r3
    8d60:	4681      	mov	r9, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
    8d62:	69ba      	ldr	r2, [r7, #24]
    8d64:	b122      	cbz	r2, 8d70 <lv_draw_img+0x58>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
    8d66:	4631      	mov	r1, r6
    8d68:	4628      	mov	r0, r5
    8d6a:	4b66      	ldr	r3, [pc, #408]	; (8f04 <lv_draw_img+0x1ec>)
    8d6c:	4798      	blx	r3
    8d6e:	e7de      	b.n	8d2e <lv_draw_img+0x16>
    else if(cdsc->dec_dsc.img_data) {
    8d70:	693b      	ldr	r3, [r7, #16]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d049      	beq.n	8e0a <lv_draw_img+0xf2>
    8d76:	1e6b      	subs	r3, r5, #1
    8d78:	1de8      	adds	r0, r5, #7
    8d7a:	aa0a      	add	r2, sp, #40	; 0x28
    8d7c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    8d80:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    8d84:	4298      	cmp	r0, r3
    8d86:	d1f9      	bne.n	8d7c <lv_draw_img+0x64>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
    8d88:	8863      	ldrh	r3, [r4, #2]
    8d8a:	b91b      	cbnz	r3, 8d94 <lv_draw_img+0x7c>
    8d8c:	8922      	ldrh	r2, [r4, #8]
    8d8e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    8d92:	d028      	beq.n	8de6 <lv_draw_img+0xce>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    8d94:	88ea      	ldrh	r2, [r5, #6]
    8d96:	3201      	adds	r2, #1
    8d98:	8869      	ldrh	r1, [r5, #2]
    8d9a:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8d9c:	88a9      	ldrh	r1, [r5, #4]
    8d9e:	3101      	adds	r1, #1
    8da0:	8828      	ldrh	r0, [r5, #0]
    8da2:	1a09      	subs	r1, r1, r0
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
    8da4:	1d20      	adds	r0, r4, #4
    8da6:	9001      	str	r0, [sp, #4]
    8da8:	8920      	ldrh	r0, [r4, #8]
    8daa:	9000      	str	r0, [sp, #0]
    8dac:	b21b      	sxth	r3, r3
    8dae:	b212      	sxth	r2, r2
    8db0:	b209      	sxth	r1, r1
    8db2:	a80a      	add	r0, sp, #40	; 0x28
    8db4:	f8df a178 	ldr.w	sl, [pc, #376]	; 8f30 <lv_draw_img+0x218>
    8db8:	47d0      	blx	sl
            map_area_rot.x1 += coords->x1;
    8dba:	882a      	ldrh	r2, [r5, #0]
    8dbc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8dc0:	4413      	add	r3, r2
    8dc2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
    8dc6:	886b      	ldrh	r3, [r5, #2]
    8dc8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    8dcc:	4419      	add	r1, r3
    8dce:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
    8dd2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    8dd6:	440a      	add	r2, r1
    8dd8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
    8ddc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    8de0:	4413      	add	r3, r2
    8de2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
    8de6:	aa0a      	add	r2, sp, #40	; 0x28
    8de8:	4631      	mov	r1, r6
    8dea:	a80c      	add	r0, sp, #48	; 0x30
    8dec:	4b49      	ldr	r3, [pc, #292]	; (8f14 <lv_draw_img+0x1fc>)
    8dee:	4798      	blx	r3
        if(union_ok == false) {
    8df0:	2800      	cmp	r0, #0
    8df2:	d09c      	beq.n	8d2e <lv_draw_img+0x16>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
    8df4:	693a      	ldr	r2, [r7, #16]
    8df6:	f8cd 9004 	str.w	r9, [sp, #4]
    8dfa:	f8cd 8000 	str.w	r8, [sp]
    8dfe:	4623      	mov	r3, r4
    8e00:	a90c      	add	r1, sp, #48	; 0x30
    8e02:	4628      	mov	r0, r5
    8e04:	4c44      	ldr	r4, [pc, #272]	; (8f18 <lv_draw_img+0x200>)
    8e06:	47a0      	blx	r4
    8e08:	e791      	b.n	8d2e <lv_draw_img+0x16>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
    8e0a:	462a      	mov	r2, r5
    8e0c:	4631      	mov	r1, r6
    8e0e:	a808      	add	r0, sp, #32
    8e10:	4b40      	ldr	r3, [pc, #256]	; (8f14 <lv_draw_img+0x1fc>)
    8e12:	4798      	blx	r3
        if(union_ok == false) {
    8e14:	2800      	cmp	r0, #0
    8e16:	d08a      	beq.n	8d2e <lv_draw_img+0x16>
    8e18:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8e1c:	3301      	adds	r3, #1
    8e1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    8e22:	1a9b      	subs	r3, r3, r2
    8e24:	b21b      	sxth	r3, r3
    8e26:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
    8e28:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    8e2c:	4b3b      	ldr	r3, [pc, #236]	; (8f1c <lv_draw_img+0x204>)
    8e2e:	4798      	blx	r3
    8e30:	9002      	str	r0, [sp, #8]
    8e32:	f10d 021f 	add.w	r2, sp, #31
    uint8_t * d8 = (uint8_t *)dst;
    8e36:	ab0a      	add	r3, sp, #40	; 0x28
    while(len) {
    8e38:	a80c      	add	r0, sp, #48	; 0x30
        *d8 = *s8;
    8e3a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8e3e:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    8e42:	4283      	cmp	r3, r0
    8e44:	d1f9      	bne.n	8e3a <lv_draw_img+0x122>
        lv_area_set_height(&line, 1);
    8e46:	2101      	movs	r1, #1
    8e48:	a80a      	add	r0, sp, #40	; 0x28
    8e4a:	4b35      	ldr	r3, [pc, #212]	; (8f20 <lv_draw_img+0x208>)
    8e4c:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
    8e4e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    8e52:	f9b5 2000 	ldrsh.w	r2, [r5]
        int32_t y = mask_com.y1 - coords->y1;
    8e56:	f9bd a022 	ldrsh.w	sl, [sp, #34]	; 0x22
    8e5a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    8e5e:	ebaa 0101 	sub.w	r1, sl, r1
    8e62:	4608      	mov	r0, r1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    8e64:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
    8e68:	458a      	cmp	sl, r1
    8e6a:	dc44      	bgt.n	8ef6 <lv_draw_img+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    8e6c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8f14 <lv_draw_img+0x1fc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    8e70:	1a9b      	subs	r3, r3, r2
    8e72:	b21b      	sxth	r3, r3
    8e74:	9305      	str	r3, [sp, #20]
    8e76:	9507      	str	r5, [sp, #28]
    8e78:	9406      	str	r4, [sp, #24]
    8e7a:	4644      	mov	r4, r8
    8e7c:	4680      	mov	r8, r0
    8e7e:	e012      	b.n	8ea6 <lv_draw_img+0x18e>
    8e80:	9d07      	ldr	r5, [sp, #28]
                lv_img_decoder_close(&cdsc->dec_dsc);
    8e82:	9804      	ldr	r0, [sp, #16]
    8e84:	4b27      	ldr	r3, [pc, #156]	; (8f24 <lv_draw_img+0x20c>)
    8e86:	4798      	blx	r3
                _lv_mem_buf_release(buf);
    8e88:	9802      	ldr	r0, [sp, #8]
    8e8a:	4b27      	ldr	r3, [pc, #156]	; (8f28 <lv_draw_img+0x210>)
    8e8c:	4798      	blx	r3
        show_error(coords, mask, "No\ndata");
    8e8e:	4a1c      	ldr	r2, [pc, #112]	; (8f00 <lv_draw_img+0x1e8>)
    8e90:	4631      	mov	r1, r6
    8e92:	4628      	mov	r0, r5
    8e94:	4b1b      	ldr	r3, [pc, #108]	; (8f04 <lv_draw_img+0x1ec>)
    8e96:	4798      	blx	r3
        return;
    8e98:	e749      	b.n	8d2e <lv_draw_img+0x16>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    8e9a:	f10a 0a01 	add.w	sl, sl, #1
    8e9e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    8ea2:	459a      	cmp	sl, r3
    8ea4:	dc27      	bgt.n	8ef6 <lv_draw_img+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    8ea6:	aa0a      	add	r2, sp, #40	; 0x28
    8ea8:	4631      	mov	r1, r6
    8eaa:	a80c      	add	r0, sp, #48	; 0x30
    8eac:	47d8      	blx	fp
            if(union_ok == false) continue;
    8eae:	2800      	cmp	r0, #0
    8eb0:	d0f3      	beq.n	8e9a <lv_draw_img+0x182>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    8eb2:	9704      	str	r7, [sp, #16]
    8eb4:	9b02      	ldr	r3, [sp, #8]
    8eb6:	9300      	str	r3, [sp, #0]
    8eb8:	9b03      	ldr	r3, [sp, #12]
    8eba:	fa0f f288 	sxth.w	r2, r8
    8ebe:	9905      	ldr	r1, [sp, #20]
    8ec0:	4638      	mov	r0, r7
    8ec2:	4d1a      	ldr	r5, [pc, #104]	; (8f2c <lv_draw_img+0x214>)
    8ec4:	47a8      	blx	r5
            if(read_res != LV_RES_OK) {
    8ec6:	2801      	cmp	r0, #1
    8ec8:	d1da      	bne.n	8e80 <lv_draw_img+0x168>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
    8eca:	f8cd 9004 	str.w	r9, [sp, #4]
    8ece:	9400      	str	r4, [sp, #0]
    8ed0:	9b06      	ldr	r3, [sp, #24]
    8ed2:	9a02      	ldr	r2, [sp, #8]
    8ed4:	a90c      	add	r1, sp, #48	; 0x30
    8ed6:	a80a      	add	r0, sp, #40	; 0x28
    8ed8:	4d0f      	ldr	r5, [pc, #60]	; (8f18 <lv_draw_img+0x200>)
    8eda:	47a8      	blx	r5
            line.y1++;
    8edc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    8ee0:	3301      	adds	r3, #1
    8ee2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
    8ee6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    8eea:	3301      	adds	r3, #1
    8eec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
    8ef0:	f108 0801 	add.w	r8, r8, #1
    8ef4:	e7d1      	b.n	8e9a <lv_draw_img+0x182>
        _lv_mem_buf_release(buf);
    8ef6:	9802      	ldr	r0, [sp, #8]
    8ef8:	4b0b      	ldr	r3, [pc, #44]	; (8f28 <lv_draw_img+0x210>)
    8efa:	4798      	blx	r3
    8efc:	e717      	b.n	8d2e <lv_draw_img+0x16>
    8efe:	bf00      	nop
    8f00:	00017634 	.word	0x00017634
    8f04:	00008c25 	.word	0x00008c25
    8f08:	0000e6e5 	.word	0x0000e6e5
    8f0c:	00008ce3 	.word	0x00008ce3
    8f10:	00008cf7 	.word	0x00008cf7
    8f14:	000106dd 	.word	0x000106dd
    8f18:	000083fd 	.word	0x000083fd
    8f1c:	00011a29 	.word	0x00011a29
    8f20:	000106b7 	.word	0x000106b7
    8f24:	0000f209 	.word	0x0000f209
    8f28:	000116a9 	.word	0x000116a9
    8f2c:	0000f1e5 	.word	0x0000f1e5
    8f30:	0000e149 	.word	0x0000e149

00008f34 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
    8f34:	b158      	cbz	r0, 8f4e <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    8f36:	7802      	ldrb	r2, [r0, #0]
    8f38:	f1a2 0320 	sub.w	r3, r2, #32
    8f3c:	b2db      	uxtb	r3, r3
    8f3e:	2b5f      	cmp	r3, #95	; 0x5f
    8f40:	d907      	bls.n	8f52 <lv_img_src_get_type+0x1e>
    else if(u8_p[0] >= 0x80) {
    8f42:	b252      	sxtb	r2, r2
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
    8f44:	2a00      	cmp	r2, #0
    8f46:	bfb4      	ite	lt
    8f48:	2002      	movlt	r0, #2
    8f4a:	2000      	movge	r0, #0
    8f4c:	4770      	bx	lr
    if(src == NULL) return img_src_type;
    8f4e:	2003      	movs	r0, #3
    8f50:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    8f52:	2001      	movs	r0, #1
}
    8f54:	4770      	bx	lr

00008f56 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
    8f56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    8f5a:	b2db      	uxtb	r3, r3
    8f5c:	2b09      	cmp	r3, #9
    8f5e:	d917      	bls.n	8f90 <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
    8f60:	2860      	cmp	r0, #96	; 0x60
    8f62:	bf84      	itt	hi
    8f64:	3820      	subhi	r0, #32
    8f66:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
    8f68:	3841      	subs	r0, #65	; 0x41
    8f6a:	2805      	cmp	r0, #5
    8f6c:	d80e      	bhi.n	8f8c <hex_char_to_num+0x36>
    8f6e:	e8df f000 	tbb	[pc, r0]
    8f72:	0311      	.short	0x0311
    8f74:	0b090705 	.word	0x0b090705
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
    8f78:	200b      	movs	r0, #11
    8f7a:	4770      	bx	lr
                break;
            case 'C':
                result = 12;
    8f7c:	200c      	movs	r0, #12
                break;
    8f7e:	4770      	bx	lr
            case 'D':
                result = 13;
    8f80:	200d      	movs	r0, #13
                break;
    8f82:	4770      	bx	lr
            case 'E':
                result = 14;
    8f84:	200e      	movs	r0, #14
                break;
    8f86:	4770      	bx	lr
            case 'F':
                result = 15;
    8f88:	200f      	movs	r0, #15
                break;
    8f8a:	4770      	bx	lr
            default:
                result = 0;
    8f8c:	2000      	movs	r0, #0
                break;
    8f8e:	4770      	bx	lr
        result = hex - '0';
    8f90:	4618      	mov	r0, r3
    8f92:	4770      	bx	lr
                result = 10;
    8f94:	200a      	movs	r0, #10
        }
    }

    return result;
}
    8f96:	4770      	bx	lr

00008f98 <lv_draw_label_dsc_init>:
{
    8f98:	b510      	push	{r4, lr}
    8f9a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    8f9c:	211c      	movs	r1, #28
    8f9e:	4b12      	ldr	r3, [pc, #72]	; (8fe8 <lv_draw_label_dsc_init+0x50>)
    8fa0:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
    8fa2:	23ff      	movs	r3, #255	; 0xff
    8fa4:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    8fa6:	7823      	ldrb	r3, [r4, #0]
    8fa8:	f36f 0304 	bfc	r3, #0, #5
    8fac:	7023      	strb	r3, [r4, #0]
    8fae:	8823      	ldrh	r3, [r4, #0]
    8fb0:	f36f 134a 	bfc	r3, #5, #6
    8fb4:	8023      	strh	r3, [r4, #0]
    8fb6:	0a1b      	lsrs	r3, r3, #8
    8fb8:	f36f 03c7 	bfc	r3, #3, #5
    8fbc:	7063      	strb	r3, [r4, #1]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
    8fbe:	4b0b      	ldr	r3, [pc, #44]	; (8fec <lv_draw_label_dsc_init+0x54>)
    8fc0:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    8fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8fc6:	81e3      	strh	r3, [r4, #14]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    8fc8:	8223      	strh	r3, [r4, #16]
    dsc->sel_color = LV_COLOR_BLUE;
    8fca:	78a3      	ldrb	r3, [r4, #2]
    8fcc:	f043 031f 	orr.w	r3, r3, #31
    8fd0:	70a3      	strb	r3, [r4, #2]
    8fd2:	8863      	ldrh	r3, [r4, #2]
    8fd4:	f36f 134a 	bfc	r3, #5, #6
    8fd8:	8063      	strh	r3, [r4, #2]
    8fda:	0a1b      	lsrs	r3, r3, #8
    8fdc:	f36f 03c7 	bfc	r3, #3, #5
    8fe0:	70e3      	strb	r3, [r4, #3]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
    8fe2:	2300      	movs	r3, #0
    8fe4:	75a3      	strb	r3, [r4, #22]
    8fe6:	bd10      	pop	{r4, pc}
    8fe8:	00011bdb 	.word	0x00011bdb
    8fec:	20000010 	.word	0x20000010

00008ff0 <lv_draw_label>:
{
    8ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ff4:	b0d9      	sub	sp, #356	; 0x164
    8ff6:	9c62      	ldr	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
    8ff8:	7a15      	ldrb	r5, [r2, #8]
    8ffa:	2d05      	cmp	r5, #5
    8ffc:	d901      	bls.n	9002 <lv_draw_label+0x12>
    if(txt[0] == '\0')  return;
    8ffe:	781d      	ldrb	r5, [r3, #0]
    9000:	b915      	cbnz	r5, 9008 <lv_draw_label+0x18>
}
    9002:	b059      	add	sp, #356	; 0x164
    9004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9008:	930b      	str	r3, [sp, #44]	; 0x2c
    900a:	4693      	mov	fp, r2
    900c:	460a      	mov	r2, r1
    900e:	910e      	str	r1, [sp, #56]	; 0x38
    9010:	4605      	mov	r5, r0
    9012:	9013      	str	r0, [sp, #76]	; 0x4c
    const lv_font_t * font = dsc->font;
    9014:	f8db 3004 	ldr.w	r3, [fp, #4]
    9018:	9307      	str	r3, [sp, #28]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
    901a:	4601      	mov	r1, r0
    901c:	a856      	add	r0, sp, #344	; 0x158
    901e:	4ba9      	ldr	r3, [pc, #676]	; (92c4 <lv_draw_label+0x2d4>)
    9020:	4798      	blx	r3
    if(!clip_ok) return;
    9022:	2800      	cmp	r0, #0
    9024:	d0ed      	beq.n	9002 <lv_draw_label+0x12>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
    9026:	f89b 2017 	ldrb.w	r2, [fp, #23]
    902a:	f012 0f02 	tst.w	r2, #2
    902e:	d121      	bne.n	9074 <lv_draw_label+0x84>
    9030:	88ab      	ldrh	r3, [r5, #4]
    9032:	3301      	adds	r3, #1
    9034:	882a      	ldrh	r2, [r5, #0]
    9036:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
    9038:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
    903a:	9a07      	ldr	r2, [sp, #28]
    903c:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
    9040:	f9bb 900a 	ldrsh.w	r9, [fp, #10]
    9044:	44c1      	add	r9, r8
    pos.x = coords->x1;
    9046:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9048:	f9b1 2000 	ldrsh.w	r2, [r1]
    904c:	921c      	str	r2, [sp, #112]	; 0x70
    pos.y = coords->y1;
    904e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
    9052:	f9bb 2012 	ldrsh.w	r2, [fp, #18]
    9056:	921a      	str	r2, [sp, #104]	; 0x68
    y_ofs = dsc->ofs_y;
    9058:	f9bb 1014 	ldrsh.w	r1, [fp, #20]
    pos.y += y_ofs;
    905c:	1842      	adds	r2, r0, r1
    905e:	b292      	uxth	r2, r2
    9060:	b215      	sxth	r5, r2
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    9062:	2c00      	cmp	r4, #0
    9064:	d045      	beq.n	90f2 <lv_draw_label+0x102>
    9066:	2900      	cmp	r1, #0
    9068:	d146      	bne.n	90f8 <lv_draw_label+0x108>
    906a:	2800      	cmp	r0, #0
    906c:	db14      	blt.n	9098 <lv_draw_label+0xa8>
    pos.y += y_ofs;
    906e:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    9070:	2600      	movs	r6, #0
    9072:	e029      	b.n	90c8 <lv_draw_label+0xd8>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
    9074:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    9078:	9202      	str	r2, [sp, #8]
    907a:	f647 4218 	movw	r2, #31768	; 0x7c18
    907e:	9201      	str	r2, [sp, #4]
    9080:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
    9084:	9200      	str	r2, [sp, #0]
    9086:	f8db 2004 	ldr.w	r2, [fp, #4]
    908a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    908c:	a83a      	add	r0, sp, #232	; 0xe8
    908e:	4d8e      	ldr	r5, [pc, #568]	; (92c8 <lv_draw_label+0x2d8>)
    9090:	47a8      	blx	r5
        w = p.x;
    9092:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
    9096:	e7d0      	b.n	903a <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
    9098:	68a1      	ldr	r1, [r4, #8]
    909a:	1a08      	subs	r0, r1, r0
    909c:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
    90a0:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
    90a4:	f5c9 7000 	rsb	r0, r9, #512	; 0x200
    90a8:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
    90ac:	dd05      	ble.n	90ba <lv_draw_label+0xca>
            hint->line_start = -1;
    90ae:	f04f 32ff 	mov.w	r2, #4294967295
    90b2:	6022      	str	r2, [r4, #0]
    pos.y += y_ofs;
    90b4:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    90b6:	2600      	movs	r6, #0
    90b8:	e006      	b.n	90c8 <lv_draw_label+0xd8>
        last_line_start = hint->line_start;
    90ba:	6826      	ldr	r6, [r4, #0]
    if(hint && last_line_start >= 0) {
    90bc:	2e00      	cmp	r6, #0
    90be:	db1e      	blt.n	90fe <lv_draw_label+0x10e>
        pos.y += hint->y;
    90c0:	6861      	ldr	r1, [r4, #4]
    90c2:	440a      	add	r2, r1
    90c4:	b212      	sxth	r2, r2
    90c6:	920f      	str	r2, [sp, #60]	; 0x3c
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    90c8:	b21b      	sxth	r3, r3
    90ca:	4619      	mov	r1, r3
    90cc:	9310      	str	r3, [sp, #64]	; 0x40
    90ce:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    90d2:	f89b 3017 	ldrb.w	r3, [fp, #23]
    90d6:	9300      	str	r3, [sp, #0]
    90d8:	460b      	mov	r3, r1
    90da:	9907      	ldr	r1, [sp, #28]
    90dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    90de:	4430      	add	r0, r6
    90e0:	4d7a      	ldr	r5, [pc, #488]	; (92cc <lv_draw_label+0x2dc>)
    90e2:	47a8      	blx	r5
    90e4:	eb00 0a06 	add.w	sl, r0, r6
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    90e8:	462f      	mov	r7, r5
    90ea:	4631      	mov	r1, r6
    90ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    90ee:	4626      	mov	r6, r4
    while(pos.y + line_height_font < mask->y1) {
    90f0:	e00e      	b.n	9110 <lv_draw_label+0x120>
    pos.y += y_ofs;
    90f2:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    90f4:	2600      	movs	r6, #0
    90f6:	e7e7      	b.n	90c8 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    90f8:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    90fa:	2600      	movs	r6, #0
    90fc:	e7e4      	b.n	90c8 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    90fe:	950f      	str	r5, [sp, #60]	; 0x3c
    uint32_t line_start     = 0;
    9100:	2600      	movs	r6, #0
    9102:	e7e1      	b.n	90c8 <lv_draw_label+0xd8>
    9104:	4651      	mov	r1, sl
        if(txt[line_start] == '\0') return;
    9106:	7823      	ldrb	r3, [r4, #0]
    9108:	2b00      	cmp	r3, #0
    910a:	f43f af7a 	beq.w	9002 <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    910e:	4682      	mov	sl, r0
    while(pos.y + line_height_font < mask->y1) {
    9110:	eb05 0308 	add.w	r3, r5, r8
    9114:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9116:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    911a:	4293      	cmp	r3, r2
    911c:	da21      	bge.n	9162 <lv_draw_label+0x172>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    911e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9120:	eb03 040a 	add.w	r4, r3, sl
    9124:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    9128:	f89b 3017 	ldrb.w	r3, [fp, #23]
    912c:	9300      	str	r3, [sp, #0]
    912e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9130:	9907      	ldr	r1, [sp, #28]
    9132:	4620      	mov	r0, r4
    9134:	47b8      	blx	r7
    9136:	4450      	add	r0, sl
    9138:	444d      	add	r5, r9
    913a:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    913c:	2e00      	cmp	r6, #0
    913e:	d0e1      	beq.n	9104 <lv_draw_label+0x114>
    9140:	f515 6f80 	cmn.w	r5, #1024	; 0x400
    9144:	dbde      	blt.n	9104 <lv_draw_label+0x114>
    9146:	6833      	ldr	r3, [r6, #0]
    9148:	2b00      	cmp	r3, #0
    914a:	dadb      	bge.n	9104 <lv_draw_label+0x114>
            hint->line_start = line_start;
    914c:	f8c6 a000 	str.w	sl, [r6]
            hint->y          = pos.y - coords->y1;
    9150:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9152:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    9156:	1aeb      	subs	r3, r5, r3
    9158:	6073      	str	r3, [r6, #4]
            hint->coord_y    = coords->y1;
    915a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    915e:	60b3      	str	r3, [r6, #8]
    9160:	e7d0      	b.n	9104 <lv_draw_label+0x114>
    9162:	460e      	mov	r6, r1
    9164:	950f      	str	r5, [sp, #60]	; 0x3c
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
    9166:	f89b 2017 	ldrb.w	r2, [fp, #23]
    916a:	f012 0f04 	tst.w	r2, #4
    916e:	d132      	bne.n	91d6 <lv_draw_label+0x1e6>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    9170:	f012 0f08 	tst.w	r2, #8
    9174:	d149      	bne.n	920a <lv_draw_label+0x21a>
    lv_opa_t opa = dsc->opa;
    9176:	f89b 3008 	ldrb.w	r3, [fp, #8]
    917a:	930c      	str	r3, [sp, #48]	; 0x30
    uint16_t sel_start = dsc->sel_start;
    917c:	f8bb 700e 	ldrh.w	r7, [fp, #14]
    uint16_t sel_end = dsc->sel_end;
    9180:	f8bb 3010 	ldrh.w	r3, [fp, #16]
    9184:	4619      	mov	r1, r3
    9186:	461c      	mov	r4, r3
    if(sel_start > sel_end) {
    9188:	429f      	cmp	r7, r3
    918a:	d902      	bls.n	9192 <lv_draw_label+0x1a2>
    918c:	463b      	mov	r3, r7
        sel_start = sel_end;
    918e:	460f      	mov	r7, r1
        sel_end = tmp;
    9190:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
    9192:	f89b 3018 	ldrb.w	r3, [fp, #24]
    9196:	f013 0f03 	tst.w	r3, #3
    919a:	d14d      	bne.n	9238 <lv_draw_label+0x248>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
    919c:	a83d      	add	r0, sp, #244	; 0xf4
    919e:	4b4c      	ldr	r3, [pc, #304]	; (92d0 <lv_draw_label+0x2e0>)
    91a0:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_color;
    91a2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    91a6:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    91aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    91ac:	2bfa      	cmp	r3, #250	; 0xfa
    91ae:	bf88      	it	hi
    91b0:	23ff      	movhi	r3, #255	; 0xff
    91b2:	9317      	str	r3, [sp, #92]	; 0x5c
    91b4:	fa1f f389 	uxth.w	r3, r9
    91b8:	9314      	str	r3, [sp, #80]	; 0x50
    91ba:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    91be:	9312      	str	r3, [sp, #72]	; 0x48
    while(txt[line_start] != '\0') {
    91c0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    uint16_t par_start = 0;
    91c2:	2300      	movs	r3, #0
    91c4:	9319      	str	r3, [sp, #100]	; 0x64
    91c6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    91ca:	46ba      	mov	sl, r7
    91cc:	46a0      	mov	r8, r4
    91ce:	46d9      	mov	r9, fp
    91d0:	46b3      	mov	fp, r6
    while(txt[line_start] != '\0') {
    91d2:	f000 bd98 	b.w	9d06 <lv_draw_label+0xd16>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    91d6:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    91da:	ebaa 0101 	sub.w	r1, sl, r1
    91de:	9200      	str	r2, [sp, #0]
    91e0:	9a07      	ldr	r2, [sp, #28]
    91e2:	b289      	uxth	r1, r1
    91e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    91e6:	4430      	add	r0, r6
    91e8:	4c3a      	ldr	r4, [pc, #232]	; (92d4 <lv_draw_label+0x2e4>)
    91ea:	47a0      	blx	r4
    91ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    91ee:	8893      	ldrh	r3, [r2, #4]
    91f0:	3301      	adds	r3, #1
    91f2:	8812      	ldrh	r2, [r2, #0]
    91f4:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
    91f6:	b21b      	sxth	r3, r3
    91f8:	1a18      	subs	r0, r3, r0
    91fa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    91fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9200:	eb03 0360 	add.w	r3, r3, r0, asr #1
    9204:	b21b      	sxth	r3, r3
    9206:	931c      	str	r3, [sp, #112]	; 0x70
    9208:	e7b5      	b.n	9176 <lv_draw_label+0x186>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    920a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    920e:	ebaa 0101 	sub.w	r1, sl, r1
    9212:	9200      	str	r2, [sp, #0]
    9214:	9a07      	ldr	r2, [sp, #28]
    9216:	b289      	uxth	r1, r1
    9218:	980b      	ldr	r0, [sp, #44]	; 0x2c
    921a:	4430      	add	r0, r6
    921c:	4c2d      	ldr	r4, [pc, #180]	; (92d4 <lv_draw_label+0x2e4>)
    921e:	47a0      	blx	r4
    9220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9222:	8893      	ldrh	r3, [r2, #4]
    9224:	3301      	adds	r3, #1
    9226:	8812      	ldrh	r2, [r2, #0]
    9228:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
    922a:	b21b      	sxth	r3, r3
    922c:	1a1b      	subs	r3, r3, r0
    922e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9230:	4413      	add	r3, r2
    9232:	b21b      	sxth	r3, r3
    9234:	931c      	str	r3, [sp, #112]	; 0x70
    9236:	e79e      	b.n	9176 <lv_draw_label+0x186>
        lv_draw_line_dsc_init(&line_dsc);
    9238:	a853      	add	r0, sp, #332	; 0x14c
    923a:	4b27      	ldr	r3, [pc, #156]	; (92d8 <lv_draw_label+0x2e8>)
    923c:	4798      	blx	r3
        line_dsc.color = dsc->color;
    923e:	f8bb 3000 	ldrh.w	r3, [fp]
    9242:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        line_dsc.width = (dsc->font->line_height + 5) / 10;    /*+5 for rounding*/
    9246:	f8db 3004 	ldr.w	r3, [fp, #4]
    924a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    924e:	3305      	adds	r3, #5
    9250:	4a22      	ldr	r2, [pc, #136]	; (92dc <lv_draw_label+0x2ec>)
    9252:	fb82 1203 	smull	r1, r2, r2, r3
    9256:	17db      	asrs	r3, r3, #31
    9258:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    925c:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
        line_dsc.opa = dsc->opa;
    9260:	f89b 3008 	ldrb.w	r3, [fp, #8]
    9264:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
        line_dsc.blend_mode = dsc->blend_mode;
    9268:	f89d 3155 	ldrb.w	r3, [sp, #341]	; 0x155
    926c:	f89b 2019 	ldrb.w	r2, [fp, #25]
    9270:	f362 0301 	bfi	r3, r2, #0, #2
    9274:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
    9278:	e790      	b.n	919c <lv_draw_label+0x1ac>
            uint16_t logical_char_pos = 0;
    927a:	2600      	movs	r6, #0
    927c:	e2b2      	b.n	97e4 <lv_draw_label+0x7f4>
    927e:	2600      	movs	r6, #0
    9280:	e2b0      	b.n	97e4 <lv_draw_label+0x7f4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
    9282:	9b08      	ldr	r3, [sp, #32]
    9284:	b92b      	cbnz	r3, 9292 <lv_draw_label+0x2a2>
                        par_start = i;
    9286:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
    928a:	9319      	str	r3, [sp, #100]	; 0x64
                        cmd_state = CMD_STATE_PAR;
    928c:	2301      	movs	r3, #1
    928e:	9308      	str	r3, [sp, #32]
                        continue;
    9290:	e293      	b.n	97ba <lv_draw_label+0x7ca>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
    9292:	9b08      	ldr	r3, [sp, #32]
    9294:	2b01      	cmp	r3, #1
    9296:	f000 85b3 	beq.w	9e00 <lv_draw_label+0xe10>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
    929a:	2b02      	cmp	r3, #2
    929c:	f000 84f8 	beq.w	9c90 <lv_draw_label+0xca0>
            lv_color_t color = dsc->color;
    92a0:	9b05      	ldr	r3, [sp, #20]
    92a2:	881d      	ldrh	r5, [r3, #0]
    92a4:	e2bd      	b.n	9822 <lv_draw_label+0x832>
                    if(letter == ' ') {
    92a6:	2c20      	cmp	r4, #32
    92a8:	f040 8287 	bne.w	97ba <lv_draw_label+0x7ca>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
    92ac:	9b52      	ldr	r3, [sp, #328]	; 0x148
    92ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
    92b0:	1a9b      	subs	r3, r3, r2
    92b2:	2b07      	cmp	r3, #7
    92b4:	d014      	beq.n	92e0 <lv_draw_label+0x2f0>
                            recolor.full = dsc->color.full;
    92b6:	9b05      	ldr	r3, [sp, #20]
    92b8:	881b      	ldrh	r3, [r3, #0]
    92ba:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    92bc:	2302      	movs	r3, #2
    92be:	9308      	str	r3, [sp, #32]
    92c0:	e27b      	b.n	97ba <lv_draw_label+0x7ca>
    92c2:	bf00      	nop
    92c4:	000106dd 	.word	0x000106dd
    92c8:	00012559 	.word	0x00012559
    92cc:	0001228d 	.word	0x0001228d
    92d0:	0000b789 	.word	0x0000b789
    92d4:	000124b9 	.word	0x000124b9
    92d8:	00009e21 	.word	0x00009e21
    92dc:	66666667 	.word	0x66666667
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
    92e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92e2:	1898      	adds	r0, r3, r2
    92e4:	1e43      	subs	r3, r0, #1
    92e6:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
    92e8:	aa3a      	add	r2, sp, #232	; 0xe8
    92ea:	9f05      	ldr	r7, [sp, #20]
        *d8 = *s8;
    92ec:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    92f0:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    92f4:	4283      	cmp	r3, r0
    92f6:	d1f9      	bne.n	92ec <lv_draw_label+0x2fc>
    92f8:	9705      	str	r7, [sp, #20]
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
    92fa:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
    92fe:	4caf      	ldr	r4, [pc, #700]	; (95bc <lv_draw_label+0x5cc>)
    9300:	47a0      	blx	r4
    9302:	4605      	mov	r5, r0
    9304:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
    9308:	47a0      	blx	r4
    930a:	eb00 1605 	add.w	r6, r0, r5, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
    930e:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
    9312:	47a0      	blx	r4
    9314:	4605      	mov	r5, r0
    9316:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
    931a:	47a0      	blx	r4
    931c:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
    9320:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
    9324:	47a0      	blx	r4
    9326:	4607      	mov	r7, r0
    9328:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
    932c:	47a0      	blx	r4
    932e:	eb00 1307 	add.w	r3, r0, r7, lsl #4
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    9332:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    9336:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    9338:	f363 0204 	bfi	r2, r3, #0, #5
    933c:	4613      	mov	r3, r2
    933e:	f3c5 0585 	ubfx	r5, r5, #2, #6
    9342:	f365 134a 	bfi	r3, r5, #5, #6
    9346:	461a      	mov	r2, r3
    9348:	f3c6 03c4 	ubfx	r3, r6, #3, #5
    934c:	f363 22cf 	bfi	r2, r3, #11, #5
    9350:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    9354:	b293      	uxth	r3, r2
    9356:	930d      	str	r3, [sp, #52]	; 0x34
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    9358:	2302      	movs	r3, #2
    935a:	9308      	str	r3, [sp, #32]
    935c:	e22d      	b.n	97ba <lv_draw_label+0x7ca>
                    sel_coords.x1 = pos.x;
    935e:	f8ad 90e8 	strh.w	r9, [sp, #232]	; 0xe8
                    sel_coords.y1 = pos.y;
    9362:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9364:	f8ad 10ea 	strh.w	r1, [sp, #234]	; 0xea
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
    9368:	9b05      	ldr	r3, [sp, #20]
    936a:	899b      	ldrh	r3, [r3, #12]
    936c:	3b01      	subs	r3, #1
    936e:	444b      	add	r3, r9
    9370:	4403      	add	r3, r0
    9372:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
                    sel_coords.y2 = pos.y + line_height - 1;
    9376:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9378:	3b01      	subs	r3, #1
    937a:	440b      	add	r3, r1
    937c:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
    9380:	aa3d      	add	r2, sp, #244	; 0xf4
    9382:	990e      	ldr	r1, [sp, #56]	; 0x38
    9384:	a83a      	add	r0, sp, #232	; 0xe8
    9386:	4b8e      	ldr	r3, [pc, #568]	; (95c0 <lv_draw_label+0x5d0>)
    9388:	4798      	blx	r3
    938a:	e25b      	b.n	9844 <lv_draw_label+0x854>
            bitmask_init  = 0xC0;
    938c:	23c0      	movs	r3, #192	; 0xc0
    938e:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp2_opa_table;
    9390:	4b8c      	ldr	r3, [pc, #560]	; (95c4 <lv_draw_label+0x5d4>)
    9392:	9321      	str	r3, [sp, #132]	; 0x84
    int32_t box_w = g->box_w;
    9394:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    9398:	469c      	mov	ip, r3
    int32_t box_h = g->box_h;
    939a:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    939e:	fb04 f203 	mul.w	r2, r4, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
    93a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    93a8:	9f16      	ldr	r7, [sp, #88]	; 0x58
    93aa:	429f      	cmp	r7, r3
    93ac:	bfba      	itte	lt
    93ae:	1bdb      	sublt	r3, r3, r7
    93b0:	eb03 0343 	addlt.w	r3, r3, r3, lsl #1
    93b4:	2300      	movge	r3, #0
    93b6:	932a      	str	r3, [sp, #168]	; 0xa8
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
    93b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    93be:	4667      	mov	r7, ip
    93c0:	4881      	ldr	r0, [pc, #516]	; (95c8 <lv_draw_label+0x5d8>)
    93c2:	fb80 7007 	smull	r7, r0, r0, r7
    93c6:	9f16      	ldr	r7, [sp, #88]	; 0x58
    93c8:	4438      	add	r0, r7
    93ca:	4298      	cmp	r0, r3
    93cc:	bfc3      	ittte	gt
    93ce:	1bdb      	subgt	r3, r3, r7
    93d0:	3301      	addgt	r3, #1
    93d2:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
    93d6:	4663      	movle	r3, ip
    93d8:	9315      	str	r3, [sp, #84]	; 0x54
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    93da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    93e0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    93e2:	429f      	cmp	r7, r3
    93e4:	bfb4      	ite	lt
    93e6:	1bdb      	sublt	r3, r3, r7
    93e8:	2300      	movge	r3, #0
    93ea:	9326      	str	r3, [sp, #152]	; 0x98
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    93ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    93f2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    93f4:	19c8      	adds	r0, r1, r7
    93f6:	4298      	cmp	r0, r3
    93f8:	f340 80a8 	ble.w	954c <lv_draw_label+0x55c>
    93fc:	1bdb      	subs	r3, r3, r7
    93fe:	3301      	adds	r3, #1
    9400:	932b      	str	r3, [sp, #172]	; 0xac
    9402:	f005 031f 	and.w	r3, r5, #31
    9406:	9323      	str	r3, [sp, #140]	; 0x8c
    9408:	f3c5 1345 	ubfx	r3, r5, #5, #6
    940c:	9325      	str	r3, [sp, #148]	; 0x94
    940e:	f3c5 23c4 	ubfx	r3, r5, #11, #5
    9412:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    9414:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    9416:	fb04 f303 	mul.w	r3, r4, r3
    941a:	9826      	ldr	r0, [sp, #152]	; 0x98
    941c:	fb00 3302 	mla	r3, r0, r2, r3
    map_p += bit_ofs >> 3;
    9420:	eb0e 05e3 	add.w	r5, lr, r3, asr #3
    9424:	9520      	str	r5, [sp, #128]	; 0x80
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    9426:	f003 0507 	and.w	r5, r3, #7
    942a:	9532      	str	r5, [sp, #200]	; 0xc8
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
    942c:	4667      	mov	r7, ip
    942e:	fb01 fe0c 	mul.w	lr, r1, ip
    9432:	4672      	mov	r2, lr
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9434:	f5be 7ff0 	cmp.w	lr, #480	; 0x1e0
    9438:	bfa8      	it	ge
    943a:	f44f 72f0 	movge.w	r2, #480	; 0x1e0
    943e:	922c      	str	r2, [sp, #176]	; 0xb0
    9440:	4610      	mov	r0, r2
    9442:	4d62      	ldr	r5, [pc, #392]	; (95cc <lv_draw_label+0x5dc>)
    9444:	47a8      	blx	r5
    9446:	9022      	str	r0, [sp, #136]	; 0x88
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    9448:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    944a:	0050      	lsls	r0, r2, #1
    944c:	47a8      	blx	r5
    944e:	9031      	str	r0, [sp, #196]	; 0xc4
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    9450:	4b5f      	ldr	r3, [pc, #380]	; (95d0 <lv_draw_label+0x5e0>)
    9452:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    9454:	4b5f      	ldr	r3, [pc, #380]	; (95d4 <lv_draw_label+0x5e4>)
    9456:	4798      	blx	r3
    9458:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    945c:	8a83      	ldrh	r3, [r0, #20]
    945e:	3301      	adds	r3, #1
    9460:	1b5b      	subs	r3, r3, r5
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
    9462:	fa0f fe83 	sxth.w	lr, r3
    9466:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    946a:	6881      	ldr	r1, [r0, #8]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    946c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    946e:	4a56      	ldr	r2, [pc, #344]	; (95c8 <lv_draw_label+0x5d8>)
    9470:	fb82 e203 	smull	lr, r2, r2, r3
    9474:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
    9478:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    947c:	981e      	ldr	r0, [sp, #120]	; 0x78
    947e:	1ac3      	subs	r3, r0, r3
    9480:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9482:	4686      	mov	lr, r0
    9484:	9816      	ldr	r0, [sp, #88]	; 0x58
    9486:	fb0e 0303 	mla	r3, lr, r3, r0
    948a:	1b5b      	subs	r3, r3, r5
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    948c:	9d26      	ldr	r5, [sp, #152]	; 0x98
    948e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9490:	fb00 2005 	mla	r0, r0, r5, r2
    9494:	4403      	add	r3, r0
    9496:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    949a:	911e      	str	r1, [sp, #120]	; 0x78
    map_area.x1 = col_start / 3 + pos_x;
    949c:	b2b6      	uxth	r6, r6
    949e:	4432      	add	r2, r6
    94a0:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    map_area.x2 = col_end / 3  + pos_x - 1;
    94a4:	9815      	ldr	r0, [sp, #84]	; 0x54
    94a6:	4686      	mov	lr, r0
    94a8:	4947      	ldr	r1, [pc, #284]	; (95c8 <lv_draw_label+0x5d8>)
    94aa:	fb81 e30e 	smull	lr, r3, r1, lr
    94ae:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
    94b2:	3e01      	subs	r6, #1
    94b4:	4433      	add	r3, r6
    94b6:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    map_area.y1 = row_start + pos_y;
    94ba:	9e18      	ldr	r6, [sp, #96]	; 0x60
    94bc:	46b6      	mov	lr, r6
    94be:	44ae      	add	lr, r5
    94c0:	fa0f f38e 	sxth.w	r3, lr
    94c4:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    map_area.y2 = map_area.y1;
    94c8:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    94cc:	4b42      	ldr	r3, [pc, #264]	; (95d8 <lv_draw_label+0x5e8>)
    94ce:	4798      	blx	r3
    94d0:	902d      	str	r0, [sp, #180]	; 0xb4
    for(row = row_start ; row < row_end; row++) {
    94d2:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    94d4:	42b5      	cmp	r5, r6
    94d6:	f280 814d 	bge.w	9774 <lv_draw_label+0x784>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    94da:	9915      	ldr	r1, [sp, #84]	; 0x54
    94dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    94de:	1a8b      	subs	r3, r1, r2
    94e0:	461e      	mov	r6, r3
    94e2:	932e      	str	r3, [sp, #184]	; 0xb8
        col_bit += ((box_w - col_end) + col_start) * bpp;
    94e4:	1a7b      	subs	r3, r7, r1
    94e6:	4413      	add	r3, r2
    94e8:	fb04 f303 	mul.w	r3, r4, r3
    94ec:	932f      	str	r3, [sp, #188]	; 0xbc
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    94ee:	4631      	mov	r1, r6
    94f0:	4e35      	ldr	r6, [pc, #212]	; (95c8 <lv_draw_label+0x5d8>)
    94f2:	fb86 6301 	smull	r6, r3, r6, r1
    94f6:	ebc3 73e1 	rsb	r3, r3, r1, asr #31
    94fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    94fc:	4413      	add	r3, r2
    94fe:	005b      	lsls	r3, r3, #1
    9500:	9330      	str	r3, [sp, #192]	; 0xc0
    9502:	2300      	movs	r3, #0
    9504:	9327      	str	r3, [sp, #156]	; 0x9c
                col_bit = 0;
    9506:	9316      	str	r3, [sp, #88]	; 0x58
    9508:	f8cd b0cc 	str.w	fp, [sp, #204]	; 0xcc
    950c:	f8cd a0d0 	str.w	sl, [sp, #208]	; 0xd0
    9510:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    9514:	46a3      	mov	fp, r4
    9516:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
    951a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
    951c:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
    9520:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
    9524:	9f20      	ldr	r7, [sp, #128]	; 0x80
    9526:	e0d9      	b.n	96dc <lv_draw_label+0x6ec>
    if(bpp == 3) bpp = 4;
    9528:	2404      	movs	r4, #4
            bitmask_init  = 0xF0;
    952a:	23f0      	movs	r3, #240	; 0xf0
    952c:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp4_opa_table;
    952e:	4b2b      	ldr	r3, [pc, #172]	; (95dc <lv_draw_label+0x5ec>)
    9530:	9321      	str	r3, [sp, #132]	; 0x84
    9532:	e72f      	b.n	9394 <lv_draw_label+0x3a4>
    uint32_t bpp = g->bpp;
    9534:	2408      	movs	r4, #8
            bitmask_init  = 0xFF;
    9536:	23ff      	movs	r3, #255	; 0xff
    9538:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp8_opa_table;
    953a:	4b29      	ldr	r3, [pc, #164]	; (95e0 <lv_draw_label+0x5f0>)
    953c:	9321      	str	r3, [sp, #132]	; 0x84
    953e:	e729      	b.n	9394 <lv_draw_label+0x3a4>
    uint32_t bpp = g->bpp;
    9540:	2401      	movs	r4, #1
            bitmask_init  = 0x80;
    9542:	2380      	movs	r3, #128	; 0x80
    9544:	931d      	str	r3, [sp, #116]	; 0x74
            bpp_opa_table = _lv_bpp1_opa_table;
    9546:	4b27      	ldr	r3, [pc, #156]	; (95e4 <lv_draw_label+0x5f4>)
    9548:	9321      	str	r3, [sp, #132]	; 0x84
    954a:	e723      	b.n	9394 <lv_draw_label+0x3a4>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    954c:	912b      	str	r1, [sp, #172]	; 0xac
    954e:	e758      	b.n	9402 <lv_draw_label+0x412>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    9550:	2c08      	cmp	r4, #8
    9552:	d004      	beq.n	955e <lv_draw_label+0x56e>
    9554:	b2c9      	uxtb	r1, r1
    9556:	9821      	ldr	r0, [sp, #132]	; 0x84
    9558:	5c40      	ldrb	r0, [r0, r1]
    955a:	e000      	b.n	955e <lv_draw_label+0x56e>
                px_opa = 0;
    955c:	9816      	ldr	r0, [sp, #88]	; 0x58
            font_rgb[subpx_cnt] = px_opa;
    955e:	a958      	add	r1, sp, #352	; 0x160
    9560:	4419      	add	r1, r3
    9562:	f801 0c84 	strb.w	r0, [r1, #-132]
            subpx_cnt ++;
    9566:	3301      	adds	r3, #1
            if(subpx_cnt == 3) {
    9568:	2b03      	cmp	r3, #3
    956a:	d03d      	beq.n	95e8 <lv_draw_label+0x5f8>
            if(col_bit < 8 - bpp) {
    956c:	455a      	cmp	r2, fp
    956e:	f080 8094 	bcs.w	969a <lv_draw_label+0x6aa>
                col_bit += bpp;
    9572:	18a5      	adds	r5, r4, r2
                bitmask = bitmask >> bpp;
    9574:	fa2c fc04 	lsr.w	ip, ip, r4
        for(col = col_start; col < col_end; col++) {
    9578:	f10e 0e01 	add.w	lr, lr, #1
    957c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    957e:	4572      	cmp	r2, lr
    9580:	f000 8090 	beq.w	96a4 <lv_draw_label+0x6b4>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
    9584:	462a      	mov	r2, r5
    9586:	7839      	ldrb	r1, [r7, #0]
    9588:	ea01 000c 	and.w	r0, r1, ip
    958c:	f1c5 0108 	rsb	r1, r5, #8
    9590:	1b09      	subs	r1, r1, r4
    9592:	fa20 f101 	lsr.w	r1, r0, r1
            if(letter_px != 0) {
    9596:	f011 00ff 	ands.w	r0, r1, #255	; 0xff
    959a:	d0df      	beq.n	955c <lv_draw_label+0x56c>
                if(opa == LV_OPA_COVER) {
    959c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    959e:	2dff      	cmp	r5, #255	; 0xff
    95a0:	d0d6      	beq.n	9550 <lv_draw_label+0x560>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    95a2:	2c08      	cmp	r4, #8
    95a4:	bf0f      	iteee	eq
    95a6:	b2c8      	uxtbeq	r0, r1
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
    95a8:	b2c9      	uxtbne	r1, r1
    95aa:	9821      	ldrne	r0, [sp, #132]	; 0x84
    95ac:	5c40      	ldrbne	r0, [r0, r1]
    95ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
    95b0:	fb01 f000 	mul.w	r0, r1, r0
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    95b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
    95b8:	e7d1      	b.n	955e <lv_draw_label+0x56e>
    95ba:	bf00      	nop
    95bc:	00008f57 	.word	0x00008f57
    95c0:	0000b851 	.word	0x0000b851
    95c4:	00017640 	.word	0x00017640
    95c8:	55555556 	.word	0x55555556
    95cc:	00011a29 	.word	0x00011a29
    95d0:	0000574d 	.word	0x0000574d
    95d4:	00010221 	.word	0x00010221
    95d8:	0000b3e5 	.word	0x0000b3e5
    95dc:	00017644 	.word	0x00017644
    95e0:	00017654 	.word	0x00017654
    95e4:	0001763c 	.word	0x0001763c
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    95e8:	f89d 00dc 	ldrb.w	r0, [sp, #220]	; 0xdc
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    95ec:	f899 3001 	ldrb.w	r3, [r9, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    95f0:	08db      	lsrs	r3, r3, #3
    95f2:	f1c0 05ff 	rsb	r5, r0, #255	; 0xff
    95f6:	9924      	ldr	r1, [sp, #144]	; 0x90
    95f8:	fb00 f101 	mul.w	r1, r0, r1
    95fc:	fb05 1303 	mla	r3, r5, r3, r1
    9600:	f3c3 2304 	ubfx	r3, r3, #8, #5
    9604:	931e      	str	r3, [sp, #120]	; 0x78
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    9606:	f89d 80de 	ldrb.w	r8, [sp, #222]	; 0xde
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    960a:	f899 1000 	ldrb.w	r1, [r9]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    960e:	f001 011f 	and.w	r1, r1, #31
    9612:	f1c8 05ff 	rsb	r5, r8, #255	; 0xff
    9616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9618:	fb08 f303 	mul.w	r3, r8, r3
    961c:	fb05 3101 	mla	r1, r5, r1, r3
    9620:	f3c1 2304 	ubfx	r3, r1, #8, #5
    9624:	931f      	str	r3, [sp, #124]	; 0x7c
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    9626:	f89d 30dd 	ldrb.w	r3, [sp, #221]	; 0xdd
    962a:	9318      	str	r3, [sp, #96]	; 0x60
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    962c:	f8b9 3000 	ldrh.w	r3, [r9]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    9630:	f3c3 1545 	ubfx	r5, r3, #5, #6
    9634:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9636:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    963a:	9320      	str	r3, [sp, #128]	; 0x80
    963c:	9925      	ldr	r1, [sp, #148]	; 0x94
    963e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9640:	fb03 f101 	mul.w	r1, r3, r1
    9644:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9646:	fb03 1305 	mla	r3, r3, r5, r1
    964a:	f3c3 2305 	ubfx	r3, r3, #8, #6
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
    964e:	b938      	cbnz	r0, 9660 <lv_draw_label+0x670>
    9650:	9918      	ldr	r1, [sp, #96]	; 0x60
    9652:	b929      	cbnz	r1, 9660 <lv_draw_label+0x670>
    9654:	f1b8 0f00 	cmp.w	r8, #0
    9658:	d102      	bne.n	9660 <lv_draw_label+0x670>
    965a:	9922      	ldr	r1, [sp, #136]	; 0x88
    965c:	5588      	strb	r0, [r1, r6]
    965e:	e003      	b.n	9668 <lv_draw_label+0x678>
                else mask_buf[mask_p] = LV_OPA_COVER;
    9660:	9922      	ldr	r1, [sp, #136]	; 0x88
    9662:	f04f 30ff 	mov.w	r0, #4294967295
    9666:	5588      	strb	r0, [r1, r6]
                color_buf[mask_p] = res_color;
    9668:	eb0a 0546 	add.w	r5, sl, r6, lsl #1
    966c:	f81a 0016 	ldrb.w	r0, [sl, r6, lsl #1]
    9670:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9672:	f361 0004 	bfi	r0, r1, #0, #5
    9676:	f80a 0016 	strb.w	r0, [sl, r6, lsl #1]
    967a:	f83a 1016 	ldrh.w	r1, [sl, r6, lsl #1]
    967e:	f363 114a 	bfi	r1, r3, #5, #6
    9682:	f82a 1016 	strh.w	r1, [sl, r6, lsl #1]
    9686:	0a09      	lsrs	r1, r1, #8
    9688:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    968a:	f363 01c7 	bfi	r1, r3, #3, #5
    968e:	7069      	strb	r1, [r5, #1]
                mask_p++;
    9690:	3601      	adds	r6, #1
                vdb_buf_tmp++;
    9692:	f109 0902 	add.w	r9, r9, #2
                subpx_cnt = 0;
    9696:	2300      	movs	r3, #0
    9698:	e768      	b.n	956c <lv_draw_label+0x57c>
                map_p++;
    969a:	3701      	adds	r7, #1
                bitmask = bitmask_init;
    969c:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
                col_bit = 0;
    96a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
    96a2:	e769      	b.n	9578 <lv_draw_label+0x588>
    96a4:	46a3      	mov	fp, r4
        if(other_mask_cnt) {
    96a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    96a8:	bb43      	cbnz	r3, 96fc <lv_draw_label+0x70c>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    96aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    96ac:	4433      	add	r3, r6
    96ae:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    96b0:	429a      	cmp	r2, r3
    96b2:	d940      	bls.n	9736 <lv_draw_label+0x746>
            map_area.y2 ++;
    96b4:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    96b8:	3301      	adds	r3, #1
    96ba:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    96be:	9627      	str	r6, [sp, #156]	; 0x9c
        col_bit += ((box_w - col_end) + col_start) * bpp;
    96c0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    96c2:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
    96c4:	eb07 07e5 	add.w	r7, r7, r5, asr #3
        col_bit = col_bit & 0x7;
    96c8:	f005 0507 	and.w	r5, r5, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    96cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    96ce:	4499      	add	r9, r3
    for(row = row_start ; row < row_end; row++) {
    96d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    96d2:	3301      	adds	r3, #1
    96d4:	9326      	str	r3, [sp, #152]	; 0x98
    96d6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    96d8:	4293      	cmp	r3, r2
    96da:	da43      	bge.n	9764 <lv_draw_label+0x774>
        bitmask = bitmask_init >> col_bit;
    96dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    96de:	fa23 fc05 	lsr.w	ip, r3, r5
        for(col = col_start; col < col_end; col++) {
    96e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    96e4:	9915      	ldr	r1, [sp, #84]	; 0x54
    96e6:	428a      	cmp	r2, r1
    96e8:	da06      	bge.n	96f8 <lv_draw_label+0x708>
    96ea:	4696      	mov	lr, r2
    96ec:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    96ee:	2300      	movs	r3, #0
            if(col_bit < 8 - bpp) {
    96f0:	465c      	mov	r4, fp
    96f2:	f1cb 0b08 	rsb	fp, fp, #8
    96f6:	e745      	b.n	9584 <lv_draw_label+0x594>
        for(col = col_start; col < col_end; col++) {
    96f8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    96fa:	e7d4      	b.n	96a6 <lv_draw_label+0x6b6>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
    96fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    96fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9700:	4413      	add	r3, r2
    9702:	4698      	mov	r8, r3
    9704:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    9708:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    970c:	3301      	adds	r3, #1
    970e:	1a5b      	subs	r3, r3, r1
    9710:	b21b      	sxth	r3, r3
    9712:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    9716:	4640      	mov	r0, r8
    9718:	4c92      	ldr	r4, [pc, #584]	; (9964 <lv_draw_label+0x974>)
    971a:	47a0      	blx	r4
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    971c:	2800      	cmp	r0, #0
    971e:	d1c4      	bne.n	96aa <lv_draw_label+0x6ba>
    9720:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    9724:	3101      	adds	r1, #1
    9726:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    972a:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
    972c:	b209      	sxth	r1, r1
    972e:	4640      	mov	r0, r8
    9730:	4b8d      	ldr	r3, [pc, #564]	; (9968 <lv_draw_label+0x978>)
    9732:	4798      	blx	r3
    9734:	e7b9      	b.n	96aa <lv_draw_label+0x6ba>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    9736:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9738:	9302      	str	r3, [sp, #8]
    973a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    973c:	9301      	str	r3, [sp, #4]
    973e:	2302      	movs	r3, #2
    9740:	9300      	str	r3, [sp, #0]
    9742:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9744:	4652      	mov	r2, sl
    9746:	a938      	add	r1, sp, #224	; 0xe0
    9748:	980e      	ldr	r0, [sp, #56]	; 0x38
    974a:	4e88      	ldr	r6, [pc, #544]	; (996c <lv_draw_label+0x97c>)
    974c:	47b0      	blx	r6
            map_area.y1 = map_area.y2 + 1;
    974e:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    9752:	3301      	adds	r3, #1
    9754:	b21b      	sxth	r3, r3
    9756:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            map_area.y2 = map_area.y1;
    975a:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    975e:	2300      	movs	r3, #0
    9760:	9327      	str	r3, [sp, #156]	; 0x9c
    9762:	e7ad      	b.n	96c0 <lv_draw_label+0x6d0>
    9764:	f8dd b0cc 	ldr.w	fp, [sp, #204]	; 0xcc
    9768:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
    976c:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    9770:	f8dd 90c8 	ldr.w	r9, [sp, #200]	; 0xc8
    if(map_area.y1 != map_area.y2) {
    9774:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    9778:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    977c:	429a      	cmp	r2, r3
    977e:	d00e      	beq.n	979e <lv_draw_label+0x7ae>
        map_area.y2--;
    9780:	3b01      	subs	r3, #1
    9782:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    9786:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9788:	9302      	str	r3, [sp, #8]
    978a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    978c:	9301      	str	r3, [sp, #4]
    978e:	2302      	movs	r3, #2
    9790:	9300      	str	r3, [sp, #0]
    9792:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9794:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    9796:	a938      	add	r1, sp, #224	; 0xe0
    9798:	980e      	ldr	r0, [sp, #56]	; 0x38
    979a:	4c74      	ldr	r4, [pc, #464]	; (996c <lv_draw_label+0x97c>)
    979c:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    979e:	9822      	ldr	r0, [sp, #136]	; 0x88
    97a0:	4c73      	ldr	r4, [pc, #460]	; (9970 <lv_draw_label+0x980>)
    97a2:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
    97a4:	9831      	ldr	r0, [sp, #196]	; 0xc4
    97a6:	47a0      	blx	r4
            if(letter_w > 0) {
    97a8:	9a06      	ldr	r2, [sp, #24]
    97aa:	2a00      	cmp	r2, #0
    97ac:	dd05      	ble.n	97ba <lv_draw_label+0x7ca>
                pos.x += letter_w + dsc->letter_space;
    97ae:	9b05      	ldr	r3, [sp, #20]
    97b0:	899b      	ldrh	r3, [r3, #12]
    97b2:	444b      	add	r3, r9
    97b4:	441a      	add	r2, r3
    97b6:	fa0f f982 	sxth.w	r9, r2
        while(i < line_end - line_start) {
    97ba:	9952      	ldr	r1, [sp, #328]	; 0x148
    97bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97be:	eba3 030b 	sub.w	r3, r3, fp
    97c2:	428b      	cmp	r3, r1
    97c4:	f240 8267 	bls.w	9c96 <lv_draw_label+0xca6>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    97c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    97cc:	459a      	cmp	sl, r3
    97ce:	f43f ad54 	beq.w	927a <lv_draw_label+0x28a>
    97d2:	4598      	cmp	r8, r3
    97d4:	f43f ad53 	beq.w	927e <lv_draw_label+0x28e>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
    97d8:	4459      	add	r1, fp
    97da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    97dc:	4b65      	ldr	r3, [pc, #404]	; (9974 <lv_draw_label+0x984>)
    97de:	681b      	ldr	r3, [r3, #0]
    97e0:	4798      	blx	r3
    97e2:	b286      	uxth	r6, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
    97e4:	4d64      	ldr	r5, [pc, #400]	; (9978 <lv_draw_label+0x988>)
    97e6:	682b      	ldr	r3, [r5, #0]
    97e8:	a952      	add	r1, sp, #328	; 0x148
    97ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    97ec:	4638      	mov	r0, r7
    97ee:	4798      	blx	r3
    97f0:	4604      	mov	r4, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
    97f2:	682b      	ldr	r3, [r5, #0]
    97f4:	2100      	movs	r1, #0
    97f6:	9852      	ldr	r0, [sp, #328]	; 0x148
    97f8:	4438      	add	r0, r7
    97fa:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
    97fc:	9b05      	ldr	r3, [sp, #20]
    97fe:	7ddb      	ldrb	r3, [r3, #23]
    9800:	f013 0f01 	tst.w	r3, #1
    9804:	d006      	beq.n	9814 <lv_draw_label+0x824>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    9806:	2c23      	cmp	r4, #35	; 0x23
    9808:	f43f ad3b 	beq.w	9282 <lv_draw_label+0x292>
                if(cmd_state == CMD_STATE_PAR) {
    980c:	9b08      	ldr	r3, [sp, #32]
    980e:	2b01      	cmp	r3, #1
    9810:	f43f ad49 	beq.w	92a6 <lv_draw_label+0x2b6>
            lv_color_t color = dsc->color;
    9814:	9b05      	ldr	r3, [sp, #20]
    9816:	881d      	ldrh	r5, [r3, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
    9818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    981a:	9a08      	ldr	r2, [sp, #32]
    981c:	2a02      	cmp	r2, #2
    981e:	bf08      	it	eq
    9820:	461d      	moveq	r5, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    9822:	4602      	mov	r2, r0
    9824:	4621      	mov	r1, r4
    9826:	9807      	ldr	r0, [sp, #28]
    9828:	4b54      	ldr	r3, [pc, #336]	; (997c <lv_draw_label+0x98c>)
    982a:	4798      	blx	r3
    982c:	9006      	str	r0, [sp, #24]
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    982e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9832:	459a      	cmp	sl, r3
    9834:	d006      	beq.n	9844 <lv_draw_label+0x854>
    9836:	4598      	cmp	r8, r3
    9838:	d004      	beq.n	9844 <lv_draw_label+0x854>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
    983a:	45b2      	cmp	sl, r6
    983c:	d802      	bhi.n	9844 <lv_draw_label+0x854>
    983e:	45b0      	cmp	r8, r6
    9840:	f63f ad8d 	bhi.w	935e <lv_draw_label+0x36e>
    if(opa < LV_OPA_MIN) return;
    9844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9846:	2b04      	cmp	r3, #4
    9848:	d9ae      	bls.n	97a8 <lv_draw_label+0x7b8>
    if(font_p == NULL) {
    984a:	9807      	ldr	r0, [sp, #28]
    984c:	2800      	cmp	r0, #0
    984e:	d0ab      	beq.n	97a8 <lv_draw_label+0x7b8>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
    9850:	9b05      	ldr	r3, [sp, #20]
    9852:	7e5b      	ldrb	r3, [r3, #25]
    9854:	9311      	str	r3, [sp, #68]	; 0x44
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
    9856:	2300      	movs	r3, #0
    9858:	4622      	mov	r2, r4
    985a:	a93a      	add	r1, sp, #232	; 0xe8
    985c:	4e48      	ldr	r6, [pc, #288]	; (9980 <lv_draw_label+0x990>)
    985e:	47b0      	blx	r6
    if(g_ret == false)  {
    9860:	2800      	cmp	r0, #0
    9862:	d0a1      	beq.n	97a8 <lv_draw_label+0x7b8>
    if((g.box_h == 0) && (g.box_w == 0)) return;
    9864:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    9868:	b91a      	cbnz	r2, 9872 <lv_draw_label+0x882>
    986a:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    986e:	2b00      	cmp	r3, #0
    9870:	d09a      	beq.n	97a8 <lv_draw_label+0x7b8>
    int32_t pos_x = pos_p->x + g.ofs_x;
    9872:	f9bd 60ee 	ldrsh.w	r6, [sp, #238]	; 0xee
    9876:	444e      	add	r6, r9
    if(pos_x + g.box_w < clip_area->x1 ||
    9878:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    987c:	4433      	add	r3, r6
    987e:	980e      	ldr	r0, [sp, #56]	; 0x38
    9880:	f9b0 1000 	ldrsh.w	r1, [r0]
    9884:	428b      	cmp	r3, r1
    9886:	db8f      	blt.n	97a8 <lv_draw_label+0x7b8>
       pos_x > clip_area->x2 ||
    9888:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
    988c:	429e      	cmp	r6, r3
    988e:	dc8b      	bgt.n	97a8 <lv_draw_label+0x7b8>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    9890:	9f07      	ldr	r7, [sp, #28]
    9892:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
    9896:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    989a:	1acb      	subs	r3, r1, r3
    989c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    989e:	440b      	add	r3, r1
    98a0:	1a99      	subs	r1, r3, r2
    98a2:	f9bd 30f0 	ldrsh.w	r3, [sp, #240]	; 0xf0
    98a6:	1acb      	subs	r3, r1, r3
    98a8:	461f      	mov	r7, r3
    98aa:	9318      	str	r3, [sp, #96]	; 0x60
       pos_y + g.box_h < clip_area->y1 ||
    98ac:	441a      	add	r2, r3
    98ae:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
       pos_x > clip_area->x2 ||
    98b2:	429a      	cmp	r2, r3
    98b4:	f6ff af78 	blt.w	97a8 <lv_draw_label+0x7b8>
       pos_y > clip_area->y2)  {
    98b8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
       pos_y + g.box_h < clip_area->y1 ||
    98bc:	429f      	cmp	r7, r3
    98be:	f73f af73 	bgt.w	97a8 <lv_draw_label+0x7b8>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
    98c2:	4621      	mov	r1, r4
    98c4:	9c07      	ldr	r4, [sp, #28]
    98c6:	4620      	mov	r0, r4
    98c8:	4b2e      	ldr	r3, [pc, #184]	; (9984 <lv_draw_label+0x994>)
    98ca:	4798      	blx	r3
    if(map_p == NULL) {
    98cc:	4686      	mov	lr, r0
    98ce:	2800      	cmp	r0, #0
    98d0:	f43f af6a 	beq.w	97a8 <lv_draw_label+0x7b8>
    if(font_p->subpx) {
    98d4:	7b23      	ldrb	r3, [r4, #12]
    98d6:	f013 0f03 	tst.w	r3, #3
    98da:	d021      	beq.n	9920 <lv_draw_label+0x930>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    98dc:	b233      	sxth	r3, r6
    98de:	9316      	str	r3, [sp, #88]	; 0x58
    98e0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    98e4:	931e      	str	r3, [sp, #120]	; 0x78
    uint32_t bpp = g->bpp;
    98e6:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    98ea:	461c      	mov	r4, r3
    if(bpp == 3) bpp = 4;
    98ec:	2b03      	cmp	r3, #3
    98ee:	f43f ae1b 	beq.w	9528 <lv_draw_label+0x538>
    switch(bpp) {
    98f2:	3b01      	subs	r3, #1
    98f4:	2b07      	cmp	r3, #7
    98f6:	f63f af57 	bhi.w	97a8 <lv_draw_label+0x7b8>
    98fa:	a201      	add	r2, pc, #4	; (adr r2, 9900 <lv_draw_label+0x910>)
    98fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9900:	00009541 	.word	0x00009541
    9904:	0000938d 	.word	0x0000938d
    9908:	000097a9 	.word	0x000097a9
    990c:	0000952b 	.word	0x0000952b
    9910:	000097a9 	.word	0x000097a9
    9914:	000097a9 	.word	0x000097a9
    9918:	000097a9 	.word	0x000097a9
    991c:	00009535 	.word	0x00009535
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    9920:	b234      	sxth	r4, r6
    9922:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
    9926:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    uint32_t bpp = g->bpp;
    992a:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    992e:	9321      	str	r3, [sp, #132]	; 0x84
    if(bpp == 3) bpp = 4;
    9930:	2b03      	cmp	r3, #3
    9932:	f000 80dc 	beq.w	9aee <lv_draw_label+0xafe>
    switch(bpp) {
    9936:	3b01      	subs	r3, #1
    9938:	2b07      	cmp	r3, #7
    993a:	f63f af35 	bhi.w	97a8 <lv_draw_label+0x7b8>
    993e:	a201      	add	r2, pc, #4	; (adr r2, 9944 <lv_draw_label+0x954>)
    9940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9944:	00009b11 	.word	0x00009b11
    9948:	00009989 	.word	0x00009989
    994c:	000097a9 	.word	0x000097a9
    9950:	00009af3 	.word	0x00009af3
    9954:	000097a9 	.word	0x000097a9
    9958:	000097a9 	.word	0x000097a9
    995c:	000097a9 	.word	0x000097a9
    9960:	00009aff 	.word	0x00009aff
    9964:	0000b33d 	.word	0x0000b33d
    9968:	00011bdb 	.word	0x00011bdb
    996c:	000078d5 	.word	0x000078d5
    9970:	000116a9 	.word	0x000116a9
    9974:	20000064 	.word	0x20000064
    9978:	20000058 	.word	0x20000058
    997c:	0000f2e9 	.word	0x0000f2e9
    9980:	0000f2e1 	.word	0x0000f2e1
    9984:	0000f2d9 	.word	0x0000f2d9
            shades = 4;
    9988:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
    998a:	22c0      	movs	r2, #192	; 0xc0
    998c:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp2_opa_table;
    998e:	4aa5      	ldr	r2, [pc, #660]	; (9c24 <lv_draw_label+0xc34>)
    9990:	9223      	str	r2, [sp, #140]	; 0x8c
    if(opa < LV_OPA_MAX) {
    9992:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9994:	29f9      	cmp	r1, #249	; 0xf9
    9996:	d82d      	bhi.n	99f4 <lv_draw_label+0xa04>
        if(prev_opa != opa || prev_bpp != bpp) {
    9998:	4aa3      	ldr	r2, [pc, #652]	; (9c28 <lv_draw_label+0xc38>)
    999a:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    999e:	428a      	cmp	r2, r1
    99a0:	f000 80be 	beq.w	9b20 <lv_draw_label+0xb30>
            for(i = 0; i < shades; i++) {
    99a4:	b1e3      	cbz	r3, 99e0 <lv_draw_label+0x9f0>
    99a6:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    99a8:	1e6a      	subs	r2, r5, #1
    99aa:	499f      	ldr	r1, [pc, #636]	; (9c28 <lv_draw_label+0xc38>)
    99ac:	3901      	subs	r1, #1
    99ae:	3b01      	subs	r3, #1
    99b0:	eb05 0c03 	add.w	ip, r5, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    99b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    99b6:	461d      	mov	r5, r3
    99b8:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
    99bc:	469b      	mov	fp, r3
    99be:	9f05      	ldr	r7, [sp, #20]
    99c0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    99c4:	2bff      	cmp	r3, #255	; 0xff
    99c6:	bf1a      	itte	ne
    99c8:	fb0b f303 	mulne.w	r3, fp, r3
    99cc:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    99d0:	462b      	moveq	r3, r5
    99d2:	f801 3f01 	strb.w	r3, [r1, #1]!
            for(i = 0; i < shades; i++) {
    99d6:	4594      	cmp	ip, r2
    99d8:	d1f2      	bne.n	99c0 <lv_draw_label+0x9d0>
    99da:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    99de:	9705      	str	r7, [sp, #20]
        prev_opa = opa;
    99e0:	4b91      	ldr	r3, [pc, #580]	; (9c28 <lv_draw_label+0xc38>)
    99e2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
    99e6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        prev_bpp = bpp;
    99ea:	9a21      	ldr	r2, [sp, #132]	; 0x84
    99ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        bpp_opa_table_p = opa_table;
    99f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    99f2:	9323      	str	r3, [sp, #140]	; 0x8c
    int32_t box_w = g->box_w;
    99f4:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    99f8:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t box_h = g->box_h;
    99fa:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    99fe:	9921      	ldr	r1, [sp, #132]	; 0x84
    9a00:	fb01 fc03 	mul.w	ip, r1, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
    9a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a06:	f9b3 3000 	ldrsh.w	r3, [r3]
    9a0a:	429c      	cmp	r4, r3
    9a0c:	bfb4      	ite	lt
    9a0e:	1b1b      	sublt	r3, r3, r4
    9a10:	2300      	movge	r3, #0
    9a12:	9316      	str	r3, [sp, #88]	; 0x58
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
    9a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    9a1a:	9924      	ldr	r1, [sp, #144]	; 0x90
    9a1c:	4421      	add	r1, r4
    9a1e:	4299      	cmp	r1, r3
    9a20:	bfc6      	itte	gt
    9a22:	1b1b      	subgt	r3, r3, r4
    9a24:	3301      	addgt	r3, #1
    9a26:	9b24      	ldrle	r3, [sp, #144]	; 0x90
    9a28:	9326      	str	r3, [sp, #152]	; 0x98
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    9a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    9a30:	4298      	cmp	r0, r3
    9a32:	bfb4      	ite	lt
    9a34:	1a1b      	sublt	r3, r3, r0
    9a36:	2300      	movge	r3, #0
    9a38:	9320      	str	r3, [sp, #128]	; 0x80
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    9a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    9a40:	1811      	adds	r1, r2, r0
    9a42:	4299      	cmp	r1, r3
    9a44:	bfc3      	ittte	gt
    9a46:	1a1b      	subgt	r3, r3, r0
    9a48:	3301      	addgt	r3, #1
    9a4a:	931e      	strgt	r3, [sp, #120]	; 0x78
    9a4c:	921e      	strle	r2, [sp, #120]	; 0x78
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    9a4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a50:	9322      	str	r3, [sp, #136]	; 0x88
    9a52:	9921      	ldr	r1, [sp, #132]	; 0x84
    9a54:	fb03 f401 	mul.w	r4, r3, r1
    9a58:	9820      	ldr	r0, [sp, #128]	; 0x80
    9a5a:	fb00 440c 	mla	r4, r0, ip, r4
    map_p += bit_ofs >> 3;
    9a5e:	eb0e 05d4 	add.w	r5, lr, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    9a62:	f004 0407 	and.w	r4, r4, #7
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
    9a66:	9f24      	ldr	r7, [sp, #144]	; 0x90
    9a68:	fb02 f207 	mul.w	r2, r2, r7
    9a6c:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
    9a70:	bfa8      	it	ge
    9a72:	f44f 72f0 	movge.w	r2, #480	; 0x1e0
    9a76:	921f      	str	r2, [sp, #124]	; 0x7c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9a78:	4610      	mov	r0, r2
    9a7a:	4b6c      	ldr	r3, [pc, #432]	; (9c2c <lv_draw_label+0xc3c>)
    9a7c:	4798      	blx	r3
    9a7e:	901d      	str	r0, [sp, #116]	; 0x74
    fill_area.x1 = col_start + pos_x;
    9a80:	b2b6      	uxth	r6, r6
    9a82:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9a84:	18f3      	adds	r3, r6, r3
    9a86:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    fill_area.x2 = col_end  + pos_x - 1;
    9a8a:	3e01      	subs	r6, #1
    9a8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9a8e:	18b3      	adds	r3, r6, r2
    9a90:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    fill_area.y1 = row_start + pos_y;
    9a94:	9e18      	ldr	r6, [sp, #96]	; 0x60
    9a96:	46b6      	mov	lr, r6
    9a98:	9e20      	ldr	r6, [sp, #128]	; 0x80
    9a9a:	44b6      	add	lr, r6
    9a9c:	fa0f f38e 	sxth.w	r3, lr
    9aa0:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    fill_area.y2 = fill_area.y1;
    9aa4:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    9aa8:	4b61      	ldr	r3, [pc, #388]	; (9c30 <lv_draw_label+0xc40>)
    9aaa:	4798      	blx	r3
    9aac:	9020      	str	r0, [sp, #128]	; 0x80
    uint32_t col_bit_max = 8 - bpp;
    9aae:	9921      	ldr	r1, [sp, #132]	; 0x84
    9ab0:	f1c1 0008 	rsb	r0, r1, #8
    9ab4:	9018      	str	r0, [sp, #96]	; 0x60
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
    9ab6:	9f24      	ldr	r7, [sp, #144]	; 0x90
    9ab8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9aba:	18fb      	adds	r3, r7, r3
    9abc:	9826      	ldr	r0, [sp, #152]	; 0x98
    9abe:	1a1b      	subs	r3, r3, r0
    9ac0:	fb01 f303 	mul.w	r3, r1, r3
    9ac4:	9321      	str	r3, [sp, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
    9ac6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    9ac8:	42be      	cmp	r6, r7
    9aca:	f280 80c7 	bge.w	9c5c <lv_draw_label+0xc6c>
    9ace:	f04f 0e00 	mov.w	lr, #0
                mask_buf[mask_p] = 0;
    9ad2:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    9ad6:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
    9ada:	f8cd 809c 	str.w	r8, [sp, #156]	; 0x9c
    9ade:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    9ae2:	4682      	mov	sl, r0
    9ae4:	f8cd 90a8 	str.w	r9, [sp, #168]	; 0xa8
    9ae8:	46b1      	mov	r9, r6
    9aea:	460f      	mov	r7, r1
    9aec:	e052      	b.n	9b94 <lv_draw_label+0xba4>
    if(bpp == 3) bpp = 4;
    9aee:	2304      	movs	r3, #4
    9af0:	9321      	str	r3, [sp, #132]	; 0x84
            shades = 16;
    9af2:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
    9af4:	22f0      	movs	r2, #240	; 0xf0
    9af6:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp4_opa_table;
    9af8:	4a4e      	ldr	r2, [pc, #312]	; (9c34 <lv_draw_label+0xc44>)
    9afa:	9223      	str	r2, [sp, #140]	; 0x8c
    9afc:	e749      	b.n	9992 <lv_draw_label+0x9a2>
    uint32_t bpp = g->bpp;
    9afe:	2308      	movs	r3, #8
    9b00:	9321      	str	r3, [sp, #132]	; 0x84
            shades = 256;
    9b02:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
    9b06:	22ff      	movs	r2, #255	; 0xff
    9b08:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp8_opa_table;
    9b0a:	4a4b      	ldr	r2, [pc, #300]	; (9c38 <lv_draw_label+0xc48>)
    9b0c:	9223      	str	r2, [sp, #140]	; 0x8c
    9b0e:	e740      	b.n	9992 <lv_draw_label+0x9a2>
    uint32_t bpp = g->bpp;
    9b10:	2301      	movs	r3, #1
    9b12:	9321      	str	r3, [sp, #132]	; 0x84
            shades = 2;
    9b14:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
    9b16:	2280      	movs	r2, #128	; 0x80
    9b18:	9215      	str	r2, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp1_opa_table;
    9b1a:	4a48      	ldr	r2, [pc, #288]	; (9c3c <lv_draw_label+0xc4c>)
    9b1c:	9223      	str	r2, [sp, #140]	; 0x8c
    9b1e:	e738      	b.n	9992 <lv_draw_label+0x9a2>
        if(prev_opa != opa || prev_bpp != bpp) {
    9b20:	4a41      	ldr	r2, [pc, #260]	; (9c28 <lv_draw_label+0xc38>)
    9b22:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    9b26:	9921      	ldr	r1, [sp, #132]	; 0x84
    9b28:	4291      	cmp	r1, r2
    9b2a:	f47f af3b 	bne.w	99a4 <lv_draw_label+0x9b4>
    9b2e:	e757      	b.n	99e0 <lv_draw_label+0x9f0>
                map_p++;
    9b30:	3501      	adds	r5, #1
                bitmask = bitmask_init;
    9b32:	9815      	ldr	r0, [sp, #84]	; 0x54
                col_bit = 0;
    9b34:	2400      	movs	r4, #0
    9b36:	3101      	adds	r1, #1
        for(col = col_start; col < col_end; col++) {
    9b38:	458c      	cmp	ip, r1
    9b3a:	d010      	beq.n	9b5e <lv_draw_label+0xb6e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
    9b3c:	782b      	ldrb	r3, [r5, #0]
    9b3e:	4003      	ands	r3, r0
    9b40:	1b32      	subs	r2, r6, r4
    9b42:	40d3      	lsrs	r3, r2
            if(letter_px) {
    9b44:	f013 0fff 	tst.w	r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
    9b48:	bf1a      	itte	ne
    9b4a:	b2db      	uxtbne	r3, r3
    9b4c:	f818 3003 	ldrbne.w	r3, [r8, r3]
                mask_buf[mask_p] = 0;
    9b50:	2300      	moveq	r3, #0
    9b52:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
    9b54:	42a6      	cmp	r6, r4
    9b56:	d9eb      	bls.n	9b30 <lv_draw_label+0xb40>
                col_bit += bpp;
    9b58:	443c      	add	r4, r7
                bitmask = bitmask >> bpp;
    9b5a:	40f8      	lsrs	r0, r7
    9b5c:	e7eb      	b.n	9b36 <lv_draw_label+0xb46>
    9b5e:	9618      	str	r6, [sp, #96]	; 0x60
        if(other_mask_cnt) {
    9b60:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9b62:	bb53      	cbnz	r3, 9bba <lv_draw_label+0xbca>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    9b64:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9b66:	ebaa 0303 	sub.w	r3, sl, r3
    9b6a:	445b      	add	r3, fp
    9b6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9b6e:	429a      	cmp	r2, r3
    9b70:	d93f      	bls.n	9bf2 <lv_draw_label+0xc02>
            fill_area.y2 ++;
    9b72:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    9b76:	3301      	adds	r3, #1
    9b78:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    9b7c:	46de      	mov	lr, fp
        col_bit += col_bit_row_ofs;
    9b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9b80:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
    9b82:	eb05 05d4 	add.w	r5, r5, r4, lsr #3
        col_bit = col_bit & 0x7;
    9b86:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
    9b8a:	f109 0901 	add.w	r9, r9, #1
    9b8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9b90:	4599      	cmp	r9, r3
    9b92:	da5b      	bge.n	9c4c <lv_draw_label+0xc5c>
        bitmask = bitmask_init >> col_bit;
    9b94:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9b96:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
    9b9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9b9c:	4553      	cmp	r3, sl
    9b9e:	da0a      	bge.n	9bb6 <lv_draw_label+0xbc6>
    9ba0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9ba2:	eb02 010e 	add.w	r1, r2, lr
    9ba6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9ba8:	ebaa 0b03 	sub.w	fp, sl, r3
    9bac:	44f3      	add	fp, lr
    9bae:	eb02 0c0b 	add.w	ip, r2, fp
    9bb2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    9bb4:	e7c2      	b.n	9b3c <lv_draw_label+0xb4c>
    9bb6:	46f3      	mov	fp, lr
    9bb8:	e7d2      	b.n	9b60 <lv_draw_label+0xb70>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
    9bba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bbc:	4473      	add	r3, lr
    9bbe:	4618      	mov	r0, r3
    9bc0:	9323      	str	r3, [sp, #140]	; 0x8c
    9bc2:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    9bc6:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    9bca:	3301      	adds	r3, #1
    9bcc:	1a5b      	subs	r3, r3, r1
    9bce:	b21b      	sxth	r3, r3
    9bd0:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    9bd4:	4e1a      	ldr	r6, [pc, #104]	; (9c40 <lv_draw_label+0xc50>)
    9bd6:	47b0      	blx	r6
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    9bd8:	2800      	cmp	r0, #0
    9bda:	d1c3      	bne.n	9b64 <lv_draw_label+0xb74>
    9bdc:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    9be0:	3101      	adds	r1, #1
    9be2:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    9be6:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
    9be8:	b209      	sxth	r1, r1
    9bea:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9bec:	4b15      	ldr	r3, [pc, #84]	; (9c44 <lv_draw_label+0xc54>)
    9bee:	4798      	blx	r3
    9bf0:	e7b8      	b.n	9b64 <lv_draw_label+0xb74>
            _lv_blend_fill(clip_area, &fill_area,
    9bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9bf4:	9302      	str	r3, [sp, #8]
    9bf6:	23ff      	movs	r3, #255	; 0xff
    9bf8:	9301      	str	r3, [sp, #4]
    9bfa:	2302      	movs	r3, #2
    9bfc:	9300      	str	r3, [sp, #0]
    9bfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9c00:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
    9c04:	a938      	add	r1, sp, #224	; 0xe0
    9c06:	980e      	ldr	r0, [sp, #56]	; 0x38
    9c08:	f8df b03c 	ldr.w	fp, [pc, #60]	; 9c48 <lv_draw_label+0xc58>
    9c0c:	47d8      	blx	fp
            fill_area.y1 = fill_area.y2 + 1;
    9c0e:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    9c12:	3301      	adds	r3, #1
    9c14:	b21b      	sxth	r3, r3
    9c16:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            fill_area.y2 = fill_area.y1;
    9c1a:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    9c1e:	f04f 0e00 	mov.w	lr, #0
    9c22:	e7ac      	b.n	9b7e <lv_draw_label+0xb8e>
    9c24:	00017640 	.word	0x00017640
    9c28:	20002a50 	.word	0x20002a50
    9c2c:	00011a29 	.word	0x00011a29
    9c30:	0000b3e5 	.word	0x0000b3e5
    9c34:	00017644 	.word	0x00017644
    9c38:	00017654 	.word	0x00017654
    9c3c:	0001763c 	.word	0x0001763c
    9c40:	0000b33d 	.word	0x0000b33d
    9c44:	00011bdb 	.word	0x00011bdb
    9c48:	00006dc9 	.word	0x00006dc9
    9c4c:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    9c50:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
    9c54:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
    9c58:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
    if(fill_area.y1 != fill_area.y2) {
    9c5c:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    9c60:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    9c64:	429a      	cmp	r2, r3
    9c66:	d00f      	beq.n	9c88 <lv_draw_label+0xc98>
        fill_area.y2--;
    9c68:	3b01      	subs	r3, #1
    9c6a:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_fill(clip_area, &fill_area,
    9c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9c70:	9302      	str	r3, [sp, #8]
    9c72:	23ff      	movs	r3, #255	; 0xff
    9c74:	9301      	str	r3, [sp, #4]
    9c76:	2302      	movs	r3, #2
    9c78:	9300      	str	r3, [sp, #0]
    9c7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9c7c:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
    9c80:	a938      	add	r1, sp, #224	; 0xe0
    9c82:	980e      	ldr	r0, [sp, #56]	; 0x38
    9c84:	4c60      	ldr	r4, [pc, #384]	; (9e08 <lv_draw_label+0xe18>)
    9c86:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    9c88:	981d      	ldr	r0, [sp, #116]	; 0x74
    9c8a:	4b60      	ldr	r3, [pc, #384]	; (9e0c <lv_draw_label+0xe1c>)
    9c8c:	4798      	blx	r3
    9c8e:	e58b      	b.n	97a8 <lv_draw_label+0x7b8>
                        cmd_state = CMD_STATE_WAIT;
    9c90:	2300      	movs	r3, #0
    9c92:	9308      	str	r3, [sp, #32]
    9c94:	e591      	b.n	97ba <lv_draw_label+0x7ca>
    9c96:	464e      	mov	r6, r9
    9c98:	f8dd 9014 	ldr.w	r9, [sp, #20]
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
    9c9c:	f899 3018 	ldrb.w	r3, [r9, #24]
    9ca0:	f013 0f02 	tst.w	r3, #2
    9ca4:	d144      	bne.n	9d30 <lv_draw_label+0xd40>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
    9ca6:	f899 3018 	ldrb.w	r3, [r9, #24]
    9caa:	f013 0f01 	tst.w	r3, #1
    9cae:	d160      	bne.n	9d72 <lv_draw_label+0xd82>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9cb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9cb4:	1956      	adds	r6, r2, r5
    9cb6:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
    9cba:	f899 3017 	ldrb.w	r3, [r9, #23]
    9cbe:	9300      	str	r3, [sp, #0]
    9cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cc2:	9907      	ldr	r1, [sp, #28]
    9cc4:	4630      	mov	r0, r6
    9cc6:	4c52      	ldr	r4, [pc, #328]	; (9e10 <lv_draw_label+0xe20>)
    9cc8:	47a0      	blx	r4
    9cca:	1944      	adds	r4, r0, r5
        pos.x = coords->x1;
    9ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9cce:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
    9cd2:	f899 2017 	ldrb.w	r2, [r9, #23]
    9cd6:	f012 0f04 	tst.w	r2, #4
    9cda:	d16a      	bne.n	9db2 <lv_draw_label+0xdc2>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    9cdc:	f012 0f08 	tst.w	r2, #8
    9ce0:	d17c      	bne.n	9ddc <lv_draw_label+0xdec>
    9ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ce4:	9914      	ldr	r1, [sp, #80]	; 0x50
    9ce6:	440b      	add	r3, r1
    9ce8:	b21b      	sxth	r3, r3
    9cea:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9cec:	440a      	add	r2, r1
    9cee:	b292      	uxth	r2, r2
    9cf0:	9212      	str	r2, [sp, #72]	; 0x48
        line_start = line_end;
    9cf2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
        pos.y += line_height;
    9cf6:	930f      	str	r3, [sp, #60]	; 0x3c
        if(pos.y > mask->y2) return;
    9cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9cfa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    9cfe:	429a      	cmp	r2, r3
    9d00:	f6ff a97f 	blt.w	9002 <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    9d04:	9409      	str	r4, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
    9d06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d08:	4613      	mov	r3, r2
    9d0a:	445b      	add	r3, fp
    9d0c:	930a      	str	r3, [sp, #40]	; 0x28
    9d0e:	f812 300b 	ldrb.w	r3, [r2, fp]
    9d12:	2b00      	cmp	r3, #0
    9d14:	f43f a975 	beq.w	9002 <lv_draw_label+0x12>
        pos.x += x_ofs;
    9d18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9d1a:	441d      	add	r5, r3
    9d1c:	b22e      	sxth	r6, r5
        i         = 0;
    9d1e:	2300      	movs	r3, #0
    9d20:	9352      	str	r3, [sp, #328]	; 0x148
        cmd_state = CMD_STATE_WAIT;
    9d22:	9308      	str	r3, [sp, #32]
        bpp_opa_table_p = opa_table;
    9d24:	4b3b      	ldr	r3, [pc, #236]	; (9e14 <lv_draw_label+0xe24>)
    9d26:	931b      	str	r3, [sp, #108]	; 0x6c
    9d28:	f8cd 9014 	str.w	r9, [sp, #20]
    9d2c:	46b1      	mov	r9, r6
        while(i < line_end - line_start) {
    9d2e:	e544      	b.n	97ba <lv_draw_label+0x7ca>
            p1.x = pos_x_start;
    9d30:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    9d34:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
    9d38:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9d3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    9d40:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
    9d44:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    9d48:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    9d4c:	105b      	asrs	r3, r3, #1
    9d4e:	eb03 0362 	add.w	r3, r3, r2, asr #1
    9d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d54:	4413      	add	r3, r2
    9d56:	b21b      	sxth	r3, r3
    9d58:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    9d5c:	f8ad 60e8 	strh.w	r6, [sp, #232]	; 0xe8
            p2.y = p1.y;
    9d60:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    9d64:	ab53      	add	r3, sp, #332	; 0x14c
    9d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9d68:	a93a      	add	r1, sp, #232	; 0xe8
    9d6a:	a838      	add	r0, sp, #224	; 0xe0
    9d6c:	4c2a      	ldr	r4, [pc, #168]	; (9e18 <lv_draw_label+0xe28>)
    9d6e:	47a0      	blx	r4
    9d70:	e799      	b.n	9ca6 <lv_draw_label+0xcb6>
            p1.x = pos_x_start;
    9d72:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    9d76:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line + line_dsc.width / 2 + 1;
    9d7a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    9d7e:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    9d82:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    9d86:	105b      	asrs	r3, r3, #1
    9d88:	3301      	adds	r3, #1
    9d8a:	8911      	ldrh	r1, [r2, #8]
    9d8c:	440b      	add	r3, r1
    9d8e:	8952      	ldrh	r2, [r2, #10]
    9d90:	1a9b      	subs	r3, r3, r2
    9d92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9d94:	4413      	add	r3, r2
    9d96:	b21b      	sxth	r3, r3
    9d98:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    9d9c:	f8ad 60e8 	strh.w	r6, [sp, #232]	; 0xe8
            p2.y = p1.y;
    9da0:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    9da4:	ab53      	add	r3, sp, #332	; 0x14c
    9da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9da8:	a93a      	add	r1, sp, #232	; 0xe8
    9daa:	a838      	add	r0, sp, #224	; 0xe0
    9dac:	4c1a      	ldr	r4, [pc, #104]	; (9e18 <lv_draw_label+0xe28>)
    9dae:	47a0      	blx	r4
    9db0:	e77e      	b.n	9cb0 <lv_draw_label+0xcc0>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9db2:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
    9db6:	9200      	str	r2, [sp, #0]
    9db8:	9a07      	ldr	r2, [sp, #28]
    9dba:	4601      	mov	r1, r0
    9dbc:	4630      	mov	r0, r6
    9dbe:	4e17      	ldr	r6, [pc, #92]	; (9e1c <lv_draw_label+0xe2c>)
    9dc0:	47b0      	blx	r6
    9dc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9dc4:	8893      	ldrh	r3, [r2, #4]
    9dc6:	3301      	adds	r3, #1
    9dc8:	8812      	ldrh	r2, [r2, #0]
    9dca:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
    9dcc:	b21b      	sxth	r3, r3
    9dce:	1a18      	subs	r0, r3, r0
    9dd0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    9dd4:	eb05 0560 	add.w	r5, r5, r0, asr #1
    9dd8:	b22d      	sxth	r5, r5
    9dda:	e782      	b.n	9ce2 <lv_draw_label+0xcf2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9ddc:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
    9de0:	9200      	str	r2, [sp, #0]
    9de2:	9a07      	ldr	r2, [sp, #28]
    9de4:	4601      	mov	r1, r0
    9de6:	4630      	mov	r0, r6
    9de8:	4e0c      	ldr	r6, [pc, #48]	; (9e1c <lv_draw_label+0xe2c>)
    9dea:	47b0      	blx	r6
    9dec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9dee:	8893      	ldrh	r3, [r2, #4]
    9df0:	3301      	adds	r3, #1
    9df2:	8812      	ldrh	r2, [r2, #0]
    9df4:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
    9df6:	b21b      	sxth	r3, r3
    9df8:	1a18      	subs	r0, r3, r0
    9dfa:	4405      	add	r5, r0
    9dfc:	b22d      	sxth	r5, r5
    9dfe:	e770      	b.n	9ce2 <lv_draw_label+0xcf2>
                        cmd_state = CMD_STATE_WAIT;
    9e00:	2300      	movs	r3, #0
    9e02:	9308      	str	r3, [sp, #32]
    9e04:	f7ff ba4c 	b.w	92a0 <lv_draw_label+0x2b0>
    9e08:	00006dc9 	.word	0x00006dc9
    9e0c:	000116a9 	.word	0x000116a9
    9e10:	0001228d 	.word	0x0001228d
    9e14:	20002a50 	.word	0x20002a50
    9e18:	00009e51 	.word	0x00009e51
    9e1c:	000124b9 	.word	0x000124b9

00009e20 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
    9e20:	b510      	push	{r4, lr}
    9e22:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    9e24:	210a      	movs	r1, #10
    9e26:	4b09      	ldr	r3, [pc, #36]	; (9e4c <lv_draw_line_dsc_init+0x2c>)
    9e28:	4798      	blx	r3
    dsc->width = 1;
    9e2a:	2301      	movs	r3, #1
    9e2c:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
    9e2e:	23ff      	movs	r3, #255	; 0xff
    9e30:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    9e32:	7823      	ldrb	r3, [r4, #0]
    9e34:	f36f 0304 	bfc	r3, #0, #5
    9e38:	7023      	strb	r3, [r4, #0]
    9e3a:	8823      	ldrh	r3, [r4, #0]
    9e3c:	f36f 134a 	bfc	r3, #5, #6
    9e40:	8023      	strh	r3, [r4, #0]
    9e42:	0a1b      	lsrs	r3, r3, #8
    9e44:	f36f 03c7 	bfc	r3, #3, #5
    9e48:	7063      	strb	r3, [r4, #1]
    9e4a:	bd10      	pop	{r4, pc}
    9e4c:	00011bdb 	.word	0x00011bdb

00009e50 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        lv_draw_line_dsc_t * dsc)
{
    9e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e54:	b0cb      	sub	sp, #300	; 0x12c
    if(dsc->width == 0) return;
    9e56:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
    9e5a:	2d00      	cmp	r5, #0
    9e5c:	f000 8418 	beq.w	a690 <lv_draw_line+0x840>
    if(dsc->opa <= LV_OPA_MIN) return;
    9e60:	7a1c      	ldrb	r4, [r3, #8]
    9e62:	2c05      	cmp	r4, #5
    9e64:	f240 8414 	bls.w	a690 <lv_draw_line+0x840>

    if(point1->x == point2->x && point1->y == point2->y) return;
    9e68:	f9b0 6000 	ldrsh.w	r6, [r0]
    9e6c:	f9b1 7000 	ldrsh.w	r7, [r1]
    9e70:	42be      	cmp	r6, r7
    9e72:	f000 8130 	beq.w	a0d6 <lv_draw_line+0x286>
    9e76:	461c      	mov	r4, r3
    9e78:	4696      	mov	lr, r2
    9e7a:	9208      	str	r2, [sp, #32]
    9e7c:	9107      	str	r1, [sp, #28]
    9e7e:	9006      	str	r0, [sp, #24]

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
    9e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    9e84:	f3c5 054f 	ubfx	r5, r5, #1, #16
    9e88:	42be      	cmp	r6, r7
    9e8a:	bfd4      	ite	le
    9e8c:	ebc5 0306 	rsble	r3, r5, r6
    9e90:	ebc5 0307 	rsbgt	r3, r5, r7
    9e94:	f8ad 3120 	strh.w	r3, [sp, #288]	; 0x120
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
    9e98:	42be      	cmp	r6, r7
    9e9a:	bfac      	ite	ge
    9e9c:	19ae      	addge	r6, r5, r6
    9e9e:	19ee      	addlt	r6, r5, r7
    9ea0:	f8ad 6124 	strh.w	r6, [sp, #292]	; 0x124
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
    9ea4:	460f      	mov	r7, r1
    9ea6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
    9eaa:	4606      	mov	r6, r0
    9eac:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    9eb0:	429a      	cmp	r2, r3
    9eb2:	bfd4      	ite	le
    9eb4:	ebc5 0102 	rsble	r1, r5, r2
    9eb8:	ebc5 0103 	rsbgt	r1, r5, r3
    9ebc:	f8ad 1122 	strh.w	r1, [sp, #290]	; 0x122
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
    9ec0:	429a      	cmp	r2, r3
    9ec2:	bfac      	ite	ge
    9ec4:	18ad      	addge	r5, r5, r2
    9ec6:	18ed      	addlt	r5, r5, r3
    9ec8:	f8ad 5126 	strh.w	r5, [sp, #294]	; 0x126

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
    9ecc:	4672      	mov	r2, lr
    9ece:	a948      	add	r1, sp, #288	; 0x120
    9ed0:	4608      	mov	r0, r1
    9ed2:	4bab      	ldr	r3, [pc, #684]	; (a180 <lv_draw_line+0x330>)
    9ed4:	4798      	blx	r3
    if(!is_common) return;
    9ed6:	2800      	cmp	r0, #0
    9ed8:	f000 83da 	beq.w	a690 <lv_draw_line+0x840>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
    9edc:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
    9ee0:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
    9ee4:	42ae      	cmp	r6, r5
    9ee6:	f000 80fe 	beq.w	a0e6 <lv_draw_line+0x296>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
    9eea:	9b06      	ldr	r3, [sp, #24]
    9eec:	f9b3 3000 	ldrsh.w	r3, [r3]
    9ef0:	461a      	mov	r2, r3
    9ef2:	9305      	str	r3, [sp, #20]
    9ef4:	9b07      	ldr	r3, [sp, #28]
    9ef6:	f9b3 a000 	ldrsh.w	sl, [r3]
    9efa:	4552      	cmp	r2, sl
    9efc:	f000 8200 	beq.w	a300 <lv_draw_line+0x4b0>
                                                 lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
    9f00:	42ae      	cmp	r6, r5
    9f02:	db06      	blt.n	9f12 <lv_draw_line+0xc2>
    9f04:	4633      	mov	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
    9f06:	462e      	mov	r6, r5
        p2.y = point1->y;
    9f08:	461d      	mov	r5, r3
    if(point1->y < point2->y) {
    9f0a:	9b05      	ldr	r3, [sp, #20]
        p1.x = point2->x;
    9f0c:	f8cd a014 	str.w	sl, [sp, #20]
        p2.x = point1->x;
    9f10:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
    9f12:	9b05      	ldr	r3, [sp, #20]
    9f14:	ebaa 0303 	sub.w	r3, sl, r3
    9f18:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
    9f1a:	1baa      	subs	r2, r5, r6
    9f1c:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
    9f1e:	2b00      	cmp	r3, #0
    9f20:	bfb8      	it	lt
    9f22:	425b      	neglt	r3, r3
    9f24:	469b      	mov	fp, r3
    9f26:	2a00      	cmp	r2, #0
    9f28:	bfb8      	it	lt
    9f2a:	4252      	neglt	r2, r2
    9f2c:	4690      	mov	r8, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
    9f2e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    9f32:	4293      	cmp	r3, r2
    9f34:	bfc7      	ittee	gt
    9f36:	0153      	lslgt	r3, r2, #5
    9f38:	fb93 f3fb 	sdivgt	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
    9f3c:	ea4f 134b 	movle.w	r3, fp, lsl #5
    9f40:	fb93 f3f2 	sdivle	r3, r3, r2

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
    9f44:	4a8f      	ldr	r2, [pc, #572]	; (a184 <lv_draw_line+0x334>)
    9f46:	5cd3      	ldrb	r3, [r2, r3]
    9f48:	fb09 f903 	mul.w	r9, r9, r3
    9f4c:	f109 093f 	add.w	r9, r9, #63	; 0x3f
    9f50:	ea4f 13e9 	mov.w	r3, r9, asr #7
    9f54:	461f      	mov	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
    9f56:	b29b      	uxth	r3, r3
    9f58:	9805      	ldr	r0, [sp, #20]
    9f5a:	4582      	cmp	sl, r0
    9f5c:	bfd4      	ite	le
    9f5e:	ebc3 020a 	rsble	r2, r3, sl
    9f62:	ebc3 0200 	rsbgt	r2, r3, r0
    9f66:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
    9f6a:	4582      	cmp	sl, r0
    9f6c:	bfac      	ite	ge
    9f6e:	eb03 020a 	addge.w	r2, r3, sl
    9f72:	181a      	addlt	r2, r3, r0
    9f74:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
    9f78:	42b5      	cmp	r5, r6
    9f7a:	bfd4      	ite	le
    9f7c:	ebc3 0205 	rsble	r2, r3, r5
    9f80:	ebc3 0206 	rsbgt	r2, r3, r6
    9f84:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
    9f88:	42b5      	cmp	r5, r6
    9f8a:	bfac      	ite	ge
    9f8c:	195b      	addge	r3, r3, r5
    9f8e:	199b      	addlt	r3, r3, r6
    9f90:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
    9f94:	aa48      	add	r2, sp, #288	; 0x120
    9f96:	a90e      	add	r1, sp, #56	; 0x38
    9f98:	4608      	mov	r0, r1
    9f9a:	4b79      	ldr	r3, [pc, #484]	; (a180 <lv_draw_line+0x330>)
    9f9c:	4798      	blx	r3
    if(is_common == false) return;
    9f9e:	2800      	cmp	r0, #0
    9fa0:	f000 8372 	beq.w	a688 <lv_draw_line+0x838>
    int32_t w_half0 = w >> 1;
    9fa4:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    9fa8:	f007 0301 	and.w	r3, r7, #1
    9fac:	444b      	add	r3, r9
    9fae:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
    9fb0:	45c3      	cmp	fp, r8
    9fb2:	f340 82b6 	ble.w	a522 <lv_draw_line+0x6d2>
        if(xdiff > 0) {
    9fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9fb8:	2a00      	cmp	r2, #0
    9fba:	f340 828e 	ble.w	a4da <lv_draw_line+0x68a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    9fbe:	fa1f fb86 	uxth.w	fp, r6
    9fc2:	fa1f f389 	uxth.w	r3, r9
    9fc6:	fa1f f985 	uxth.w	r9, r5
    9fca:	ebab 0203 	sub.w	r2, fp, r3
    9fce:	2100      	movs	r1, #0
    9fd0:	9101      	str	r1, [sp, #4]
    9fd2:	eba9 0303 	sub.w	r3, r9, r3
    9fd6:	b21b      	sxth	r3, r3
    9fd8:	9300      	str	r3, [sp, #0]
    9fda:	4653      	mov	r3, sl
    9fdc:	b212      	sxth	r2, r2
    9fde:	9905      	ldr	r1, [sp, #20]
    9fe0:	a812      	add	r0, sp, #72	; 0x48
    9fe2:	4f69      	ldr	r7, [pc, #420]	; (a188 <lv_draw_line+0x338>)
    9fe4:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    9fe6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    9fea:	eb0b 0208 	add.w	r2, fp, r8
    9fee:	2301      	movs	r3, #1
    9ff0:	9301      	str	r3, [sp, #4]
    9ff2:	44c1      	add	r9, r8
    9ff4:	fa0f f389 	sxth.w	r3, r9
    9ff8:	9300      	str	r3, [sp, #0]
    9ffa:	4653      	mov	r3, sl
    9ffc:	b212      	sxth	r2, r2
    9ffe:	9905      	ldr	r1, [sp, #20]
    a000:	a81d      	add	r0, sp, #116	; 0x74
    a002:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
    a004:	2100      	movs	r1, #0
    a006:	a812      	add	r0, sp, #72	; 0x48
    a008:	f8df 819c 	ldr.w	r8, [pc, #412]	; a1a8 <lv_draw_line+0x358>
    a00c:	47c0      	blx	r8
    a00e:	900b      	str	r0, [sp, #44]	; 0x2c
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
    a010:	2100      	movs	r1, #0
    a012:	a81d      	add	r0, sp, #116	; 0x74
    a014:	47c0      	blx	r8
    a016:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
    a018:	7a63      	ldrb	r3, [r4, #9]
    a01a:	f013 0f10 	tst.w	r3, #16
    a01e:	f000 82a4 	beq.w	a56a <lv_draw_line+0x71a>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
    a022:	f04f 33ff 	mov.w	r3, #4294967295
    a026:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
    a028:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a02a:	4b58      	ldr	r3, [pc, #352]	; (a18c <lv_draw_line+0x33c>)
    a02c:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a02e:	4b58      	ldr	r3, [pc, #352]	; (a190 <lv_draw_line+0x340>)
    a030:	4798      	blx	r3
    a032:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    a034:	8a06      	ldrh	r6, [r0, #16]
    a036:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    a03a:	1bad      	subs	r5, r5, r6
    a03c:	b2aa      	uxth	r2, r5
    a03e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    a042:	8a40      	ldrh	r0, [r0, #18]
    a044:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    a048:	1a09      	subs	r1, r1, r0
    a04a:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    a04e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    a052:	1b9b      	subs	r3, r3, r6
    a054:	b29b      	uxth	r3, r3
    a056:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    a05a:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    a05e:	1a09      	subs	r1, r1, r0
    a060:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    a064:	1c5d      	adds	r5, r3, #1
    a066:	1aad      	subs	r5, r5, r2
    a068:	b22d      	sxth	r5, r5
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    a06a:	a80e      	add	r0, sp, #56	; 0x38
    a06c:	4b49      	ldr	r3, [pc, #292]	; (a194 <lv_draw_line+0x344>)
    a06e:	4798      	blx	r3
    a070:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    a074:	f0c0 82a2 	bcc.w	a5bc <lv_draw_line+0x76c>
    a078:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    a07c:	4658      	mov	r0, fp
    a07e:	4b46      	ldr	r3, [pc, #280]	; (a198 <lv_draw_line+0x348>)
    a080:	4798      	blx	r3
    a082:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
    a084:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a088:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    a08c:	441a      	add	r2, r3
    a08e:	b212      	sxth	r2, r2
    a090:	9205      	str	r2, [sp, #20]
    a092:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
    a096:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    a09a:	4413      	add	r3, r2
    a09c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    a0a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    a0a4:	f8ba 2012 	ldrh.w	r2, [sl, #18]
    a0a8:	4413      	add	r3, r2
    a0aa:	b21b      	sxth	r3, r3
    a0ac:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
    a0b0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
    a0b4:	4659      	mov	r1, fp
    a0b6:	4b39      	ldr	r3, [pc, #228]	; (a19c <lv_draw_line+0x34c>)
    a0b8:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    a0ba:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    a0be:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
    a0c2:	4416      	add	r6, r2
    a0c4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    a0c8:	4413      	add	r3, r2
    a0ca:	429e      	cmp	r6, r3
    a0cc:	f300 82b9 	bgt.w	a642 <lv_draw_line+0x7f2>
    a0d0:	2700      	movs	r7, #0
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
    a0d2:	9409      	str	r4, [sp, #36]	; 0x24
    a0d4:	e2a0      	b.n	a618 <lv_draw_line+0x7c8>
    if(point1->x == point2->x && point1->y == point2->y) return;
    a0d6:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
    a0da:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    a0de:	45a6      	cmp	lr, r4
    a0e0:	f47f aec9 	bne.w	9e76 <lv_draw_line+0x26>
    a0e4:	e2d4      	b.n	a690 <lv_draw_line+0x840>
    lv_opa_t opa = dsc->opa;
    a0e6:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a0ea:	4b28      	ldr	r3, [pc, #160]	; (a18c <lv_draw_line+0x33c>)
    a0ec:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a0ee:	4b28      	ldr	r3, [pc, #160]	; (a190 <lv_draw_line+0x340>)
    a0f0:	4798      	blx	r3
    a0f2:	4607      	mov	r7, r0
    int32_t w = dsc->width - 1;
    a0f4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    a0f8:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
    a0fa:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    a0fc:	f003 0301 	and.w	r3, r3, #1
    a100:	199d      	adds	r5, r3, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    a102:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a106:	2b00      	cmp	r3, #0
    a108:	d035      	beq.n	a176 <lv_draw_line+0x326>
    a10a:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
    a10e:	f118 0800 	adds.w	r8, r8, #0
    a112:	bf18      	it	ne
    a114:	f04f 0801 	movne.w	r8, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a118:	4b21      	ldr	r3, [pc, #132]	; (a1a0 <lv_draw_line+0x350>)
    a11a:	4798      	blx	r3
    a11c:	bb70      	cbnz	r0, a17c <lv_draw_line+0x32c>
    else if(dashed) simple_mode = false;
    a11e:	f088 0201 	eor.w	r2, r8, #1
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
    a122:	9b07      	ldr	r3, [sp, #28]
    a124:	f9b3 3000 	ldrsh.w	r3, [r3]
    a128:	9906      	ldr	r1, [sp, #24]
    a12a:	f9b1 1000 	ldrsh.w	r1, [r1]
    a12e:	4618      	mov	r0, r3
    a130:	428b      	cmp	r3, r1
    a132:	bfa8      	it	ge
    a134:	4608      	movge	r0, r1
    a136:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
    a13a:	428b      	cmp	r3, r1
    a13c:	bfb8      	it	lt
    a13e:	460b      	movlt	r3, r1
    a140:	3b01      	subs	r3, #1
    a142:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
    a146:	9906      	ldr	r1, [sp, #24]
    a148:	884b      	ldrh	r3, [r1, #2]
    a14a:	1b5d      	subs	r5, r3, r5
    a14c:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
    a150:	4433      	add	r3, r6
    a152:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    a156:	b34a      	cbz	r2, a1ac <lv_draw_line+0x35c>
                       dsc->blend_mode);
    a158:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    a15a:	f003 0303 	and.w	r3, r3, #3
    a15e:	9302      	str	r3, [sp, #8]
    a160:	f8cd 9004 	str.w	r9, [sp, #4]
    a164:	2301      	movs	r3, #1
    a166:	9300      	str	r3, [sp, #0]
    a168:	2300      	movs	r3, #0
    a16a:	8822      	ldrh	r2, [r4, #0]
    a16c:	a928      	add	r1, sp, #160	; 0xa0
    a16e:	a848      	add	r0, sp, #288	; 0x120
    a170:	4d0c      	ldr	r5, [pc, #48]	; (a1a4 <lv_draw_line+0x354>)
    a172:	47a8      	blx	r5
    a174:	e288      	b.n	a688 <lv_draw_line+0x838>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    a176:	f04f 0800 	mov.w	r8, #0
    a17a:	e7cd      	b.n	a118 <lv_draw_line+0x2c8>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a17c:	2200      	movs	r2, #0
    a17e:	e7d0      	b.n	a122 <lv_draw_line+0x2d2>
    a180:	000106dd 	.word	0x000106dd
    a184:	0001775c 	.word	0x0001775c
    a188:	0000b409 	.word	0x0000b409
    a18c:	0000574d 	.word	0x0000574d
    a190:	00010221 	.word	0x00010221
    a194:	000106c1 	.word	0x000106c1
    a198:	00011a29 	.word	0x00011a29
    a19c:	00011c91 	.word	0x00011c91
    a1a0:	0000b3e5 	.word	0x0000b3e5
    a1a4:	00006dc9 	.word	0x00006dc9
    a1a8:	0000b301 	.word	0x0000b301
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    a1ac:	aa28      	add	r2, sp, #160	; 0xa0
    a1ae:	a948      	add	r1, sp, #288	; 0x120
    a1b0:	4610      	mov	r0, r2
    a1b2:	4ba1      	ldr	r3, [pc, #644]	; (a438 <lv_draw_line+0x5e8>)
    a1b4:	4798      	blx	r3
        if(!is_common) return;
    a1b6:	2800      	cmp	r0, #0
    a1b8:	f000 8266 	beq.w	a688 <lv_draw_line+0x838>
        draw_area.x1 -= disp_area->x1;
    a1bc:	f9bd e0a0 	ldrsh.w	lr, [sp, #160]	; 0xa0
    a1c0:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
    a1c4:	b28b      	uxth	r3, r1
    a1c6:	ebae 0203 	sub.w	r2, lr, r3
    a1ca:	b292      	uxth	r2, r2
    a1cc:	fa0f f982 	sxth.w	r9, r2
    a1d0:	f8ad 90a0 	strh.w	r9, [sp, #160]	; 0xa0
        draw_area.y1 -= disp_area->y1;
    a1d4:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
    a1d8:	f8b7 c012 	ldrh.w	ip, [r7, #18]
    a1dc:	eba0 050c 	sub.w	r5, r0, ip
    a1e0:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
    a1e4:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
    a1e8:	1af3      	subs	r3, r6, r3
    a1ea:	b29b      	uxth	r3, r3
    a1ec:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
    a1f0:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
    a1f4:	eba5 050c 	sub.w	r5, r5, ip
    a1f8:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
    a1fc:	3301      	adds	r3, #1
    a1fe:	1a9a      	subs	r2, r3, r2
    a200:	b213      	sxth	r3, r2
    a202:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    a204:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    a208:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    a20c:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    a210:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        if(dashed) {
    a214:	f1b8 0f00 	cmp.w	r8, #0
    a218:	d01c      	beq.n	a254 <lv_draw_line+0x404>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    a21a:	4449      	add	r1, r9
    a21c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    a220:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    a224:	441a      	add	r2, r3
    a226:	fb91 f3f2 	sdiv	r3, r1, r2
    a22a:	fb02 1113 	mls	r1, r2, r3, r1
    a22e:	b20b      	sxth	r3, r1
    a230:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    a232:	9809      	ldr	r0, [sp, #36]	; 0x24
    a234:	4606      	mov	r6, r0
    a236:	4b81      	ldr	r3, [pc, #516]	; (a43c <lv_draw_line+0x5ec>)
    a238:	4798      	blx	r3
    a23a:	4682      	mov	sl, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a23c:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
    a240:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a244:	42ab      	cmp	r3, r5
    a246:	db57      	blt.n	a2f8 <lv_draw_line+0x4a8>
            _lv_memset_ff(mask_buf, draw_area_w);
    a248:	f8df 920c 	ldr.w	r9, [pc, #524]	; a458 <lv_draw_line+0x608>
            _lv_blend_fill(clip, &fill_area,
    a24c:	f8df b204 	ldr.w	fp, [pc, #516]	; a454 <lv_draw_line+0x604>
    a250:	9605      	str	r6, [sp, #20]
    a252:	e034      	b.n	a2be <lv_draw_line+0x46e>
        if(dashed) {
    a254:	2100      	movs	r1, #0
    a256:	e7ea      	b.n	a22e <lv_draw_line+0x3de>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    a258:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
    a25c:	4473      	add	r3, lr
    a25e:	429a      	cmp	r2, r3
                            mask_buf[i] = 0x00;
    a260:	bfba      	itte	lt
    a262:	f80a 0001 	strblt.w	r0, [sl, r1]
    a266:	4613      	movlt	r3, r2
                            dash_cnt = 0;
    a268:	4603      	movge	r3, r0
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    a26a:	3101      	adds	r1, #1
    a26c:	3301      	adds	r3, #1
    a26e:	b21a      	sxth	r2, r3
    a270:	428e      	cmp	r6, r1
    a272:	d907      	bls.n	a284 <lv_draw_line+0x434>
                        if(dash_cnt <= dsc->dash_width) {
    a274:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    a278:	4293      	cmp	r3, r2
    a27a:	dbed      	blt.n	a258 <lv_draw_line+0x408>
                            int16_t diff = dsc->dash_width - dash_cnt;
    a27c:	1a9a      	subs	r2, r3, r2
                            i += diff;
    a27e:	fa01 f182 	sxtah	r1, r1, r2
    a282:	e7f2      	b.n	a26a <lv_draw_line+0x41a>
    a284:	9605      	str	r6, [sp, #20]
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    a286:	2002      	movs	r0, #2
                           dsc->blend_mode);
    a288:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
    a28a:	f003 0303 	and.w	r3, r3, #3
    a28e:	9302      	str	r3, [sp, #8]
    a290:	7a23      	ldrb	r3, [r4, #8]
    a292:	9301      	str	r3, [sp, #4]
    a294:	9000      	str	r0, [sp, #0]
    a296:	4653      	mov	r3, sl
    a298:	8822      	ldrh	r2, [r4, #0]
    a29a:	a933      	add	r1, sp, #204	; 0xcc
    a29c:	a848      	add	r0, sp, #288	; 0x120
    a29e:	47d8      	blx	fp
            fill_area.y1++;
    a2a0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    a2a4:	3301      	adds	r3, #1
    a2a6:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    a2aa:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    a2ae:	3301      	adds	r3, #1
    a2b0:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a2b4:	3501      	adds	r5, #1
    a2b6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a2ba:	429d      	cmp	r5, r3
    a2bc:	dc1c      	bgt.n	a2f8 <lv_draw_line+0x4a8>
            _lv_memset_ff(mask_buf, draw_area_w);
    a2be:	9905      	ldr	r1, [sp, #20]
    a2c0:	4650      	mov	r0, sl
    a2c2:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    a2c4:	8a7a      	ldrh	r2, [r7, #18]
    a2c6:	442a      	add	r2, r5
    a2c8:	8a39      	ldrh	r1, [r7, #16]
    a2ca:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    a2ce:	4419      	add	r1, r3
    a2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2d2:	b212      	sxth	r2, r2
    a2d4:	b209      	sxth	r1, r1
    a2d6:	4650      	mov	r0, sl
    a2d8:	4e59      	ldr	r6, [pc, #356]	; (a440 <lv_draw_line+0x5f0>)
    a2da:	47b0      	blx	r6
            if(dashed) {
    a2dc:	f1b8 0f00 	cmp.w	r8, #0
    a2e0:	d0d2      	beq.n	a288 <lv_draw_line+0x438>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    a2e2:	2800      	cmp	r0, #0
    a2e4:	d0d0      	beq.n	a288 <lv_draw_line+0x438>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    a2e6:	9b05      	ldr	r3, [sp, #20]
    a2e8:	b123      	cbz	r3, a2f4 <lv_draw_line+0x4a4>
    a2ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a2ec:	2100      	movs	r1, #0
                            dash_cnt = 0;
    a2ee:	4608      	mov	r0, r1
    a2f0:	461e      	mov	r6, r3
    a2f2:	e7bf      	b.n	a274 <lv_draw_line+0x424>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    a2f4:	2002      	movs	r0, #2
    a2f6:	e7c7      	b.n	a288 <lv_draw_line+0x438>
        _lv_mem_buf_release(mask_buf);
    a2f8:	4650      	mov	r0, sl
    a2fa:	4b52      	ldr	r3, [pc, #328]	; (a444 <lv_draw_line+0x5f4>)
    a2fc:	4798      	blx	r3
    a2fe:	e1c3      	b.n	a688 <lv_draw_line+0x838>
    lv_opa_t opa = dsc->opa;
    a300:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a304:	4b50      	ldr	r3, [pc, #320]	; (a448 <lv_draw_line+0x5f8>)
    a306:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a308:	4b50      	ldr	r3, [pc, #320]	; (a44c <lv_draw_line+0x5fc>)
    a30a:	4798      	blx	r3
    a30c:	4680      	mov	r8, r0
    int32_t w = dsc->width - 1;
    a30e:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    a312:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
    a314:	106f      	asrs	r7, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    a316:	f005 0501 	and.w	r5, r5, #1
    a31a:	443d      	add	r5, r7
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    a31c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a320:	b12b      	cbz	r3, a32e <lv_draw_line+0x4de>
    a322:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
    a326:	3600      	adds	r6, #0
    a328:	bf18      	it	ne
    a32a:	2601      	movne	r6, #1
    a32c:	e000      	b.n	a330 <lv_draw_line+0x4e0>
    a32e:	2600      	movs	r6, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a330:	4b47      	ldr	r3, [pc, #284]	; (a450 <lv_draw_line+0x600>)
    a332:	4798      	blx	r3
    a334:	b910      	cbnz	r0, a33c <lv_draw_line+0x4ec>
    else if(dashed) simple_mode = false;
    a336:	f086 0201 	eor.w	r2, r6, #1
    a33a:	e000      	b.n	a33e <lv_draw_line+0x4ee>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    a33c:	2200      	movs	r2, #0
    draw_area.x1 = point1->x - w_half1;
    a33e:	9906      	ldr	r1, [sp, #24]
    a340:	880b      	ldrh	r3, [r1, #0]
    a342:	1b5d      	subs	r5, r3, r5
    a344:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
    a348:	441f      	add	r7, r3
    a34a:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    a34e:	9b07      	ldr	r3, [sp, #28]
    a350:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    a354:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    a358:	4618      	mov	r0, r3
    a35a:	428b      	cmp	r3, r1
    a35c:	bfa8      	it	ge
    a35e:	4608      	movge	r0, r1
    a360:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
    a364:	428b      	cmp	r3, r1
    a366:	bfb8      	it	lt
    a368:	460b      	movlt	r3, r1
    a36a:	3b01      	subs	r3, #1
    a36c:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    a370:	b172      	cbz	r2, a390 <lv_draw_line+0x540>
                       dsc->blend_mode);
    a372:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    a374:	f003 0303 	and.w	r3, r3, #3
    a378:	9302      	str	r3, [sp, #8]
    a37a:	f8cd 9004 	str.w	r9, [sp, #4]
    a37e:	2301      	movs	r3, #1
    a380:	9300      	str	r3, [sp, #0]
    a382:	2300      	movs	r3, #0
    a384:	8822      	ldrh	r2, [r4, #0]
    a386:	a928      	add	r1, sp, #160	; 0xa0
    a388:	a848      	add	r0, sp, #288	; 0x120
    a38a:	4d32      	ldr	r5, [pc, #200]	; (a454 <lv_draw_line+0x604>)
    a38c:	47a8      	blx	r5
    a38e:	e17b      	b.n	a688 <lv_draw_line+0x838>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    a390:	aa28      	add	r2, sp, #160	; 0xa0
    a392:	a948      	add	r1, sp, #288	; 0x120
    a394:	4610      	mov	r0, r2
    a396:	4b28      	ldr	r3, [pc, #160]	; (a438 <lv_draw_line+0x5e8>)
    a398:	4798      	blx	r3
        if(!is_common) return;
    a39a:	2800      	cmp	r0, #0
    a39c:	f000 8174 	beq.w	a688 <lv_draw_line+0x838>
        draw_area.x1 -= vdb->area.x1;
    a3a0:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
    a3a4:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    a3a8:	1ac5      	subs	r5, r0, r3
    a3aa:	b2ad      	uxth	r5, r5
    a3ac:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
    a3b0:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
    a3b4:	f8b8 7012 	ldrh.w	r7, [r8, #18]
    a3b8:	1bd1      	subs	r1, r2, r7
    a3ba:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
    a3be:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
    a3c2:	1acb      	subs	r3, r1, r3
    a3c4:	b29b      	uxth	r3, r3
    a3c6:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
    a3ca:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
    a3ce:	ebae 0707 	sub.w	r7, lr, r7
    a3d2:	f8ad 70a6 	strh.w	r7, [sp, #166]	; 0xa6
    a3d6:	3301      	adds	r3, #1
    a3d8:	1b5b      	subs	r3, r3, r5
    a3da:	b21b      	sxth	r3, r3
    a3dc:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    a3de:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    a3e2:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    a3e6:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    a3ea:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    a3ee:	930a      	str	r3, [sp, #40]	; 0x28
    a3f0:	4618      	mov	r0, r3
    a3f2:	4b12      	ldr	r3, [pc, #72]	; (a43c <lv_draw_line+0x5ec>)
    a3f4:	4798      	blx	r3
    a3f6:	9005      	str	r0, [sp, #20]
        if(dashed) {
    a3f8:	b176      	cbz	r6, a418 <lv_draw_line+0x5c8>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    a3fa:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    a3fe:	f9bd 70a0 	ldrsh.w	r7, [sp, #160]	; 0xa0
    a402:	443a      	add	r2, r7
    a404:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a408:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
    a40c:	443b      	add	r3, r7
    a40e:	fb92 f7f3 	sdiv	r7, r2, r3
    a412:	fb03 2717 	mls	r7, r3, r7, r2
    a416:	e000      	b.n	a41a <lv_draw_line+0x5ca>
        if(dashed) {
    a418:	2700      	movs	r7, #0
    a41a:	b23f      	sxth	r7, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a41c:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
    a420:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a424:	429d      	cmp	r5, r3
    a426:	dc54      	bgt.n	a4d2 <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    a428:	f8df 902c 	ldr.w	r9, [pc, #44]	; a458 <lv_draw_line+0x608>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    a42c:	f8df a010 	ldr.w	sl, [pc, #16]	; a440 <lv_draw_line+0x5f0>
            _lv_blend_fill(clip, &fill_area,
    a430:	f8df b020 	ldr.w	fp, [pc, #32]	; a454 <lv_draw_line+0x604>
    a434:	e02d      	b.n	a492 <lv_draw_line+0x642>
    a436:	bf00      	nop
    a438:	000106dd 	.word	0x000106dd
    a43c:	00011a29 	.word	0x00011a29
    a440:	0000b33d 	.word	0x0000b33d
    a444:	000116a9 	.word	0x000116a9
    a448:	0000574d 	.word	0x0000574d
    a44c:	00010221 	.word	0x00010221
    a450:	0000b3e5 	.word	0x0000b3e5
    a454:	00006dc9 	.word	0x00006dc9
    a458:	00011c91 	.word	0x00011c91
                dash_cnt ++;
    a45c:	3701      	adds	r7, #1
    a45e:	b23f      	sxth	r7, r7
            _lv_blend_fill(clip, &fill_area,
    a460:	2300      	movs	r3, #0
    a462:	9302      	str	r3, [sp, #8]
    a464:	7a23      	ldrb	r3, [r4, #8]
    a466:	9301      	str	r3, [sp, #4]
    a468:	9000      	str	r0, [sp, #0]
    a46a:	9b05      	ldr	r3, [sp, #20]
    a46c:	8822      	ldrh	r2, [r4, #0]
    a46e:	a933      	add	r1, sp, #204	; 0xcc
    a470:	a848      	add	r0, sp, #288	; 0x120
    a472:	47d8      	blx	fp
            fill_area.y1++;
    a474:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    a478:	3301      	adds	r3, #1
    a47a:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    a47e:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    a482:	3301      	adds	r3, #1
    a484:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    a488:	3501      	adds	r5, #1
    a48a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    a48e:	429d      	cmp	r5, r3
    a490:	dc1f      	bgt.n	a4d2 <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    a492:	990a      	ldr	r1, [sp, #40]	; 0x28
    a494:	9805      	ldr	r0, [sp, #20]
    a496:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    a498:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    a49c:	442a      	add	r2, r5
    a49e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    a4a2:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    a4a6:	4419      	add	r1, r3
    a4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4aa:	b212      	sxth	r2, r2
    a4ac:	b209      	sxth	r1, r1
    a4ae:	9805      	ldr	r0, [sp, #20]
    a4b0:	47d0      	blx	sl
            if(dashed) {
    a4b2:	2e00      	cmp	r6, #0
    a4b4:	d0d4      	beq.n	a460 <lv_draw_line+0x610>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    a4b6:	2800      	cmp	r0, #0
    a4b8:	d0d0      	beq.n	a45c <lv_draw_line+0x60c>
                    if(dash_cnt > dsc->dash_width) {
    a4ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
    a4be:	42ba      	cmp	r2, r7
    a4c0:	bfb8      	it	lt
    a4c2:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    a4c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    a4c8:	4413      	add	r3, r2
                        dash_cnt = 0;
    a4ca:	429f      	cmp	r7, r3
    a4cc:	bfa8      	it	ge
    a4ce:	2700      	movge	r7, #0
    a4d0:	e7c4      	b.n	a45c <lv_draw_line+0x60c>
        _lv_mem_buf_release(mask_buf);
    a4d2:	9805      	ldr	r0, [sp, #20]
    a4d4:	4b97      	ldr	r3, [pc, #604]	; (a734 <lv_draw_line+0x8e4>)
    a4d6:	4798      	blx	r3
    a4d8:	e0d6      	b.n	a688 <lv_draw_line+0x838>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    a4da:	fa1f fb86 	uxth.w	fp, r6
    a4de:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    a4e2:	b2a9      	uxth	r1, r5
    a4e4:	eb0b 0208 	add.w	r2, fp, r8
    a4e8:	2300      	movs	r3, #0
    a4ea:	9301      	str	r3, [sp, #4]
    a4ec:	460f      	mov	r7, r1
    a4ee:	4488      	add	r8, r1
    a4f0:	fa0f f388 	sxth.w	r3, r8
    a4f4:	9300      	str	r3, [sp, #0]
    a4f6:	4653      	mov	r3, sl
    a4f8:	b212      	sxth	r2, r2
    a4fa:	9905      	ldr	r1, [sp, #20]
    a4fc:	a812      	add	r0, sp, #72	; 0x48
    a4fe:	f8df 8238 	ldr.w	r8, [pc, #568]	; a738 <lv_draw_line+0x8e8>
    a502:	47c0      	blx	r8
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    a504:	fa1f f389 	uxth.w	r3, r9
    a508:	ebab 0203 	sub.w	r2, fp, r3
    a50c:	2101      	movs	r1, #1
    a50e:	9101      	str	r1, [sp, #4]
    a510:	1afb      	subs	r3, r7, r3
    a512:	b21b      	sxth	r3, r3
    a514:	9300      	str	r3, [sp, #0]
    a516:	4653      	mov	r3, sl
    a518:	b212      	sxth	r2, r2
    a51a:	9905      	ldr	r1, [sp, #20]
    a51c:	a81d      	add	r0, sp, #116	; 0x74
    a51e:	47c0      	blx	r8
    a520:	e570      	b.n	a004 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
    a522:	f8bd b014 	ldrh.w	fp, [sp, #20]
    a526:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    a52a:	fa1f f38a 	uxth.w	r3, sl
    a52e:	461f      	mov	r7, r3
    a530:	4443      	add	r3, r8
    a532:	44d8      	add	r8, fp
    a534:	2200      	movs	r2, #0
    a536:	9201      	str	r2, [sp, #4]
    a538:	9500      	str	r5, [sp, #0]
    a53a:	b21b      	sxth	r3, r3
    a53c:	4632      	mov	r2, r6
    a53e:	fa0f f188 	sxth.w	r1, r8
    a542:	a812      	add	r0, sp, #72	; 0x48
    a544:	f8df 81f0 	ldr.w	r8, [pc, #496]	; a738 <lv_draw_line+0x8e8>
    a548:	47c0      	blx	r8
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
    a54a:	fa1f f989 	uxth.w	r9, r9
    a54e:	eba7 0309 	sub.w	r3, r7, r9
    a552:	ebab 0909 	sub.w	r9, fp, r9
    a556:	2201      	movs	r2, #1
    a558:	9201      	str	r2, [sp, #4]
    a55a:	9500      	str	r5, [sp, #0]
    a55c:	b21b      	sxth	r3, r3
    a55e:	4632      	mov	r2, r6
    a560:	fa0f f189 	sxth.w	r1, r9
    a564:	a81d      	add	r0, sp, #116	; 0x74
    a566:	47c0      	blx	r8
    a568:	e54c      	b.n	a004 <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
    a56a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    a56e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    a572:	9905      	ldr	r1, [sp, #20]
    a574:	eba1 0308 	sub.w	r3, r1, r8
    a578:	2203      	movs	r2, #3
    a57a:	9201      	str	r2, [sp, #4]
    a57c:	eb09 0206 	add.w	r2, r9, r6
    a580:	b212      	sxth	r2, r2
    a582:	9200      	str	r2, [sp, #0]
    a584:	b21b      	sxth	r3, r3
    a586:	4632      	mov	r2, r6
    a588:	a828      	add	r0, sp, #160	; 0xa0
    a58a:	4e6b      	ldr	r6, [pc, #428]	; (a738 <lv_draw_line+0x8e8>)
    a58c:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
    a58e:	ebaa 0308 	sub.w	r3, sl, r8
    a592:	2202      	movs	r2, #2
    a594:	9201      	str	r2, [sp, #4]
    a596:	eb09 0205 	add.w	r2, r9, r5
    a59a:	b212      	sxth	r2, r2
    a59c:	9200      	str	r2, [sp, #0]
    a59e:	b21b      	sxth	r3, r3
    a5a0:	462a      	mov	r2, r5
    a5a2:	4651      	mov	r1, sl
    a5a4:	a833      	add	r0, sp, #204	; 0xcc
    a5a6:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
    a5a8:	2100      	movs	r1, #0
    a5aa:	a828      	add	r0, sp, #160	; 0xa0
    a5ac:	4d63      	ldr	r5, [pc, #396]	; (a73c <lv_draw_line+0x8ec>)
    a5ae:	47a8      	blx	r5
    a5b0:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    a5b2:	2100      	movs	r1, #0
    a5b4:	a833      	add	r0, sp, #204	; 0xcc
    a5b6:	47a8      	blx	r5
    a5b8:	900d      	str	r0, [sp, #52]	; 0x34
    a5ba:	e536      	b.n	a02a <lv_draw_line+0x1da>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    a5bc:	a80e      	add	r0, sp, #56	; 0x38
    a5be:	4b60      	ldr	r3, [pc, #384]	; (a740 <lv_draw_line+0x8f0>)
    a5c0:	4798      	blx	r3
    a5c2:	4683      	mov	fp, r0
    a5c4:	e55a      	b.n	a07c <lv_draw_line+0x22c>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
    a5c6:	4629      	mov	r1, r5
    a5c8:	4640      	mov	r0, r8
    a5ca:	4b5e      	ldr	r3, [pc, #376]	; (a744 <lv_draw_line+0x8f4>)
    a5cc:	4798      	blx	r3
    a5ce:	e02d      	b.n	a62c <lv_draw_line+0x7dc>
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
    a5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a5d2:	7a53      	ldrb	r3, [r2, #9]
            _lv_blend_fill(&fill_area, clip,
    a5d4:	f003 0303 	and.w	r3, r3, #3
    a5d8:	9302      	str	r3, [sp, #8]
    a5da:	7a13      	ldrb	r3, [r2, #8]
    a5dc:	9301      	str	r3, [sp, #4]
    a5de:	2302      	movs	r3, #2
    a5e0:	9300      	str	r3, [sp, #0]
    a5e2:	464b      	mov	r3, r9
    a5e4:	8812      	ldrh	r2, [r2, #0]
    a5e6:	a948      	add	r1, sp, #288	; 0x120
    a5e8:	a810      	add	r0, sp, #64	; 0x40
    a5ea:	4c57      	ldr	r4, [pc, #348]	; (a748 <lv_draw_line+0x8f8>)
    a5ec:	47a0      	blx	r4

            fill_area.y1 = fill_area.y2 + 1;
    a5ee:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    a5f2:	3301      	adds	r3, #1
    a5f4:	b21b      	sxth	r3, r3
    a5f6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
    a5fa:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
    a5fe:	4659      	mov	r1, fp
    a600:	4648      	mov	r0, r9
    a602:	4b52      	ldr	r3, [pc, #328]	; (a74c <lv_draw_line+0x8fc>)
    a604:	4798      	blx	r3
            mask_p = 0;
    a606:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    a608:	3601      	adds	r6, #1
    a60a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    a60e:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    a612:	4413      	add	r3, r2
    a614:	429e      	cmp	r6, r3
    a616:	dc13      	bgt.n	a640 <lv_draw_line+0x7f0>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
    a618:	eb09 0807 	add.w	r8, r9, r7
    a61c:	462b      	mov	r3, r5
    a61e:	b232      	sxth	r2, r6
    a620:	9905      	ldr	r1, [sp, #20]
    a622:	4640      	mov	r0, r8
    a624:	4c4a      	ldr	r4, [pc, #296]	; (a750 <lv_draw_line+0x900>)
    a626:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    a628:	2800      	cmp	r0, #0
    a62a:	d0cc      	beq.n	a5c6 <lv_draw_line+0x776>
        mask_p += draw_area_w;
    a62c:	442f      	add	r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
    a62e:	19eb      	adds	r3, r5, r7
    a630:	459b      	cmp	fp, r3
    a632:	d9cd      	bls.n	a5d0 <lv_draw_line+0x780>
            fill_area.y2 ++;
    a634:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    a638:	3301      	adds	r3, #1
    a63a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    a63e:	e7e3      	b.n	a608 <lv_draw_line+0x7b8>
    a640:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
    a642:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    a646:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
    a64a:	429a      	cmp	r2, r3
    a64c:	d010      	beq.n	a670 <lv_draw_line+0x820>
        fill_area.y2--;
    a64e:	3b01      	subs	r3, #1
    a650:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
    a654:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
    a656:	f003 0303 	and.w	r3, r3, #3
    a65a:	9302      	str	r3, [sp, #8]
    a65c:	7a23      	ldrb	r3, [r4, #8]
    a65e:	9301      	str	r3, [sp, #4]
    a660:	2302      	movs	r3, #2
    a662:	9300      	str	r3, [sp, #0]
    a664:	464b      	mov	r3, r9
    a666:	8822      	ldrh	r2, [r4, #0]
    a668:	a948      	add	r1, sp, #288	; 0x120
    a66a:	a810      	add	r0, sp, #64	; 0x40
    a66c:	4d36      	ldr	r5, [pc, #216]	; (a748 <lv_draw_line+0x8f8>)
    a66e:	47a8      	blx	r5

    }

    _lv_mem_buf_release(mask_buf);
    a670:	4648      	mov	r0, r9
    a672:	4b30      	ldr	r3, [pc, #192]	; (a734 <lv_draw_line+0x8e4>)
    a674:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
    a676:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a678:	4d36      	ldr	r5, [pc, #216]	; (a754 <lv_draw_line+0x904>)
    a67a:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
    a67c:	980c      	ldr	r0, [sp, #48]	; 0x30
    a67e:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
    a680:	980a      	ldr	r0, [sp, #40]	; 0x28
    a682:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
    a684:	980d      	ldr	r0, [sp, #52]	; 0x34
    a686:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
    a688:	7a63      	ldrb	r3, [r4, #9]
    a68a:	f013 0f0c 	tst.w	r3, #12
    a68e:	d102      	bne.n	a696 <lv_draw_line+0x846>
}
    a690:	b04b      	add	sp, #300	; 0x12c
    a692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
    a696:	a833      	add	r0, sp, #204	; 0xcc
    a698:	4b2f      	ldr	r3, [pc, #188]	; (a758 <lv_draw_line+0x908>)
    a69a:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
    a69c:	8823      	ldrh	r3, [r4, #0]
    a69e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
    a6a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    a6a6:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
    a6aa:	7a23      	ldrb	r3, [r4, #8]
    a6ac:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
    a6b0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    a6b4:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
    a6b6:	f083 0301 	eor.w	r3, r3, #1
    a6ba:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
    a6be:	7a63      	ldrb	r3, [r4, #9]
    a6c0:	f013 0f04 	tst.w	r3, #4
    a6c4:	d11c      	bne.n	a700 <lv_draw_line+0x8b0>
        if(dsc->round_end) {
    a6c6:	7a63      	ldrb	r3, [r4, #9]
    a6c8:	f013 0f08 	tst.w	r3, #8
    a6cc:	d0e0      	beq.n	a690 <lv_draw_line+0x840>
            cir_area.x1 = point2->x - r;
    a6ce:	9907      	ldr	r1, [sp, #28]
    a6d0:	880a      	ldrh	r2, [r1, #0]
    a6d2:	b2b6      	uxth	r6, r6
    a6d4:	1b93      	subs	r3, r2, r6
    a6d6:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
    a6da:	8849      	ldrh	r1, [r1, #2]
    a6dc:	1b8b      	subs	r3, r1, r6
    a6de:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
    a6e2:	b2ab      	uxth	r3, r5
    a6e4:	4432      	add	r2, r6
    a6e6:	1ad2      	subs	r2, r2, r3
    a6e8:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
    a6ec:	440e      	add	r6, r1
    a6ee:	1af3      	subs	r3, r6, r3
    a6f0:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    a6f4:	aa33      	add	r2, sp, #204	; 0xcc
    a6f6:	9908      	ldr	r1, [sp, #32]
    a6f8:	a828      	add	r0, sp, #160	; 0xa0
    a6fa:	4b18      	ldr	r3, [pc, #96]	; (a75c <lv_draw_line+0x90c>)
    a6fc:	4798      	blx	r3
    a6fe:	e7c7      	b.n	a690 <lv_draw_line+0x840>
            cir_area.x1 = point1->x - r;
    a700:	9806      	ldr	r0, [sp, #24]
    a702:	8802      	ldrh	r2, [r0, #0]
    a704:	b2b3      	uxth	r3, r6
    a706:	1ad1      	subs	r1, r2, r3
    a708:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
    a70c:	8840      	ldrh	r0, [r0, #2]
    a70e:	1ac1      	subs	r1, r0, r3
    a710:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
    a714:	b2a9      	uxth	r1, r5
    a716:	441a      	add	r2, r3
    a718:	1a52      	subs	r2, r2, r1
    a71a:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
    a71e:	4403      	add	r3, r0
    a720:	1a5b      	subs	r3, r3, r1
    a722:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    a726:	aa33      	add	r2, sp, #204	; 0xcc
    a728:	9908      	ldr	r1, [sp, #32]
    a72a:	a828      	add	r0, sp, #160	; 0xa0
    a72c:	4b0b      	ldr	r3, [pc, #44]	; (a75c <lv_draw_line+0x90c>)
    a72e:	4798      	blx	r3
    a730:	e7c9      	b.n	a6c6 <lv_draw_line+0x876>
    a732:	bf00      	nop
    a734:	000116a9 	.word	0x000116a9
    a738:	0000b409 	.word	0x0000b409
    a73c:	0000b301 	.word	0x0000b301
    a740:	000106c1 	.word	0x000106c1
    a744:	00011bdb 	.word	0x00011bdb
    a748:	00006dc9 	.word	0x00006dc9
    a74c:	00011c91 	.word	0x00011c91
    a750:	0000b33d 	.word	0x0000b33d
    a754:	0000b38d 	.word	0x0000b38d
    a758:	0000b789 	.word	0x0000b789
    a75c:	0000b851 	.word	0x0000b851

0000a760 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
    a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a764:	9c06      	ldr	r4, [sp, #24]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
    a766:	8aa5      	ldrh	r5, [r4, #20]
    a768:	1b52      	subs	r2, r2, r5
    a76a:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
    a76c:	8a65      	ldrh	r5, [r4, #18]
    a76e:	1b4d      	subs	r5, r1, r5
    a770:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
    a772:	6a21      	ldr	r1, [r4, #32]
    a774:	2900      	cmp	r1, #0
    a776:	d14b      	bne.n	a810 <lv_draw_mask_line+0xb0>
        /*Horizontal*/
        if(p->flat) {
    a778:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    a77c:	f011 0f01 	tst.w	r1, #1
    a780:	d016      	beq.n	a7b0 <lv_draw_mask_line+0x50>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
    a782:	7c23      	ldrb	r3, [r4, #16]
    a784:	f003 0303 	and.w	r3, r3, #3
    a788:	2b01      	cmp	r3, #1
    a78a:	f240 81db 	bls.w	ab44 <lv_draw_mask_line+0x3e4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a78e:	2b02      	cmp	r3, #2
    a790:	d004      	beq.n	a79c <lv_draw_mask_line+0x3c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a792:	2b03      	cmp	r3, #3
    a794:	d006      	beq.n	a7a4 <lv_draw_mask_line+0x44>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
    a796:	2000      	movs	r0, #0
    a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a79c:	3201      	adds	r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a79e:	0fd0      	lsrs	r0, r2, #31
    a7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a7a4:	2a00      	cmp	r2, #0
    a7a6:	bfd4      	ite	le
    a7a8:	2000      	movle	r0, #0
    a7aa:	2001      	movgt	r0, #1
    a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
    a7b0:	7c22      	ldrb	r2, [r4, #16]
    a7b2:	f002 0203 	and.w	r2, r2, #3
    a7b6:	1e91      	subs	r1, r2, #2
    a7b8:	b2c9      	uxtb	r1, r1
    a7ba:	2901      	cmp	r1, #1
    a7bc:	f240 81c5 	bls.w	ab4a <lv_draw_mask_line+0x3ea>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7c0:	2a01      	cmp	r2, #1
    a7c2:	d00c      	beq.n	a7de <lv_draw_mask_line+0x7e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
    a7c4:	b9b2      	cbnz	r2, a7f4 <lv_draw_mask_line+0x94>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7c6:	18e9      	adds	r1, r5, r3
    a7c8:	f100 81c2 	bmi.w	ab50 <lv_draw_mask_line+0x3f0>
                else {
                    int32_t k = - abs_x;
    a7cc:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    a7ce:	2d00      	cmp	r5, #0
    a7d0:	f2c0 81c1 	blt.w	ab56 <lv_draw_mask_line+0x3f6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    a7d4:	42ab      	cmp	r3, r5
    a7d6:	dc07      	bgt.n	a7e8 <lv_draw_mask_line+0x88>
                    return  LV_DRAW_MASK_RES_CHANGED;
    a7d8:	2002      	movs	r0, #2
    a7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    a7de:	2d00      	cmp	r5, #0
    a7e0:	dd08      	ble.n	a7f4 <lv_draw_mask_line+0x94>
    a7e2:	2001      	movs	r0, #1
    a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    a7e8:	4428      	add	r0, r5
    a7ea:	4bcd      	ldr	r3, [pc, #820]	; (ab20 <lv_draw_mask_line+0x3c0>)
    a7ec:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    a7ee:	2002      	movs	r0, #2
    a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    a7f4:	42dd      	cmn	r5, r3
    a7f6:	f100 81b1 	bmi.w	ab5c <lv_draw_mask_line+0x3fc>
                else {
                    int32_t k = - abs_x;
    a7fa:	4269      	negs	r1, r5
    a7fc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    a800:	428b      	cmp	r3, r1
    a802:	f340 81ae 	ble.w	ab62 <lv_draw_mask_line+0x402>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
    a806:	4bc6      	ldr	r3, [pc, #792]	; (ab20 <lv_draw_mask_line+0x3c0>)
    a808:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    a80a:	2002      	movs	r0, #2
    a80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
    a810:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    a814:	f016 0f01 	tst.w	r6, #1
    a818:	d10f      	bne.n	a83a <lv_draw_mask_line+0xda>
{
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    a81a:	69a7      	ldr	r7, [r4, #24]
    a81c:	fb02 f107 	mul.w	r1, r2, r7
    a820:	1289      	asrs	r1, r1, #10
    if(p->xy_steep > 0) x_at_y++;
    a822:	2f00      	cmp	r7, #0
    a824:	bfcc      	ite	gt
    a826:	f101 0e01 	addgt.w	lr, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    a82a:	468e      	movle	lr, r1
    if(x_at_y < abs_x) {
    a82c:	4575      	cmp	r5, lr
    a82e:	f340 8098 	ble.w	a962 <lv_draw_mask_line+0x202>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a832:	f3c6 0040 	ubfx	r0, r6, #1, #1
    a836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
    a83a:	69e1      	ldr	r1, [r4, #28]
    a83c:	fb05 f701 	mul.w	r7, r5, r1
    a840:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
    a842:	2900      	cmp	r1, #0
    a844:	dd06      	ble.n	a854 <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
    a846:	4297      	cmp	r7, r2
    a848:	f340 81b8 	ble.w	abbc <lv_draw_mask_line+0x45c>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a84c:	f3c6 0040 	ubfx	r0, r6, #1, #1
    a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(y_at_x < abs_y) {
    a854:	4297      	cmp	r7, r2
    a856:	f280 81ed 	bge.w	ac34 <lv_draw_mask_line+0x4d4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a85a:	f3c6 0040 	ubfx	r0, r6, #1, #1
    a85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    a862:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a866:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    a86e:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a872:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
    a87a:	2500      	movs	r5, #0
    a87c:	e1d4      	b.n	ac28 <lv_draw_mask_line+0x4c8>
    a87e:	46f4      	mov	ip, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
    a880:	f888 c000 	strb.w	ip, [r8]
        px_h -= p->spx;
    a884:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a886:	1ad2      	subs	r2, r2, r3
        k++;
    a888:	3501      	adds	r5, #1
    a88a:	3601      	adds	r6, #1
        if(k >= len) break;
    a88c:	42bd      	cmp	r5, r7
    a88e:	da49      	bge.n	a924 <lv_draw_mask_line+0x1c4>
    while(px_h > p->spx) {
    a890:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a892:	429a      	cmp	r2, r3
    a894:	dd1d      	ble.n	a8d2 <lv_draw_mask_line+0x172>
        if(k >= 0 && k < len) {
    a896:	2d00      	cmp	r5, #0
    a898:	dbf4      	blt.n	a884 <lv_draw_mask_line+0x124>
    a89a:	42bd      	cmp	r5, r7
    a89c:	daf2      	bge.n	a884 <lv_draw_mask_line+0x124>
            m = px_h - (p->spx >> 1);
    a89e:	eba2 0363 	sub.w	r3, r2, r3, asr #1
    a8a2:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
    a8a4:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    a8a8:	f01c 0f02 	tst.w	ip, #2
    a8ac:	bf1c      	itt	ne
    a8ae:	43db      	mvnne	r3, r3
    a8b0:	b2db      	uxtbne	r3, r3
    a8b2:	46b0      	mov	r8, r6
            mask_buf[k] = mask_mix(mask_buf[k], m);
    a8b4:	f896 c000 	ldrb.w	ip, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a8b8:	2bf9      	cmp	r3, #249	; 0xf9
    a8ba:	d8e1      	bhi.n	a880 <lv_draw_mask_line+0x120>
    if(mask_new <= LV_OPA_MIN) return 0;
    a8bc:	2b05      	cmp	r3, #5
    a8be:	d9de      	bls.n	a87e <lv_draw_mask_line+0x11e>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a8c0:	fb03 f30c 	mul.w	r3, r3, ip
    a8c4:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
    a8c8:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    a8cc:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
    a8d0:	e7d6      	b.n	a880 <lv_draw_mask_line+0x120>
    if(k < len && k >= 0) {
    a8d2:	42bd      	cmp	r5, r7
    a8d4:	da26      	bge.n	a924 <lv_draw_mask_line+0x1c4>
    a8d6:	2d00      	cmp	r5, #0
    a8d8:	db24      	blt.n	a924 <lv_draw_mask_line+0x1c4>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
    a8da:	69a3      	ldr	r3, [r4, #24]
    a8dc:	fb03 f302 	mul.w	r3, r3, r2
    a8e0:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
    a8e2:	fb02 f203 	mul.w	r2, r2, r3
    a8e6:	f3c2 2247 	ubfx	r2, r2, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
    a8ea:	69e3      	ldr	r3, [r4, #28]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	bfbc      	itt	lt
    a8f0:	43d2      	mvnlt	r2, r2
    a8f2:	b2d2      	uxtblt	r2, r2
        if(p->inv) m = 255 - m;
    a8f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a8f8:	f013 0f02 	tst.w	r3, #2
    a8fc:	bf1c      	itt	ne
    a8fe:	43d2      	mvnne	r2, r2
    a900:	b2d2      	uxtbne	r2, r2
        mask_buf[k] = mask_mix(mask_buf[k], m);
    a902:	1946      	adds	r6, r0, r5
    a904:	5d43      	ldrb	r3, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a906:	2af9      	cmp	r2, #249	; 0xf9
    a908:	d80b      	bhi.n	a922 <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    a90a:	2a05      	cmp	r2, #5
    a90c:	d908      	bls.n	a920 <lv_draw_mask_line+0x1c0>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a90e:	fb02 f203 	mul.w	r2, r2, r3
    a912:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    a916:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    a91a:	f3c2 53c7 	ubfx	r3, r2, #23, #8
    a91e:	e000      	b.n	a922 <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    a920:	2300      	movs	r3, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
    a922:	7033      	strb	r3, [r6, #0]
    if(p->inv) {
    a924:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a928:	f013 0f02 	tst.w	r3, #2
    a92c:	d00a      	beq.n	a944 <lv_draw_mask_line+0x1e4>
        if(k > len) {
    a92e:	428f      	cmp	r7, r1
    a930:	f2c0 811a 	blt.w	ab68 <lv_draw_mask_line+0x408>
        if(k >= 0) {
    a934:	2900      	cmp	r1, #0
    a936:	f2c0 811a 	blt.w	ab6e <lv_draw_mask_line+0x40e>
            _lv_memset_00(&mask_buf[0], k);
    a93a:	4b79      	ldr	r3, [pc, #484]	; (ab20 <lv_draw_mask_line+0x3c0>)
    a93c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    a93e:	2002      	movs	r0, #2
    a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(k < 0) {
    a944:	3501      	adds	r5, #1
    a946:	f100 8115 	bmi.w	ab74 <lv_draw_mask_line+0x414>
        if(k <= len) {
    a94a:	42bd      	cmp	r5, r7
    a94c:	dd02      	ble.n	a954 <lv_draw_mask_line+0x1f4>
    return LV_DRAW_MASK_RES_CHANGED;
    a94e:	2002      	movs	r0, #2
    a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _lv_memset_00(&mask_buf[k], len - k);
    a954:	1b79      	subs	r1, r7, r5
    a956:	4428      	add	r0, r5
    a958:	4b71      	ldr	r3, [pc, #452]	; (ab20 <lv_draw_mask_line+0x3c0>)
    a95a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    a95c:	2002      	movs	r0, #2
    a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(x_at_y > abs_x + len) {
    a962:	eb05 0e03 	add.w	lr, r5, r3
    a966:	4571      	cmp	r1, lr
    a968:	dd05      	ble.n	a976 <lv_draw_mask_line+0x216>
        if(p->inv) {
    a96a:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    a96e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
    a976:	0211      	lsls	r1, r2, #8
    a978:	fb07 f101 	mul.w	r1, r7, r1
    int32_t xsi = xs >> 8;
    a97c:	ea4f 48a1 	mov.w	r8, r1, asr #18
    int32_t xsf = xs & 0xFF;
    a980:	f3c1 2187 	ubfx	r1, r1, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    a984:	3201      	adds	r2, #1
    a986:	0212      	lsls	r2, r2, #8
    a988:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xei = xe >> 8;
    a98c:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    k = xsi - abs_x;
    a990:	eba8 0e05 	sub.w	lr, r8, r5
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    a994:	45e0      	cmp	r8, ip
    a996:	d063      	beq.n	aa60 <lv_draw_mask_line+0x300>
    a998:	2f00      	cmp	r7, #0
    a99a:	db5b      	blt.n	aa54 <lv_draw_mask_line+0x2f4>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
    a99c:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
    a9a0:	69e2      	ldr	r2, [r4, #28]
    a9a2:	fb02 f201 	mul.w	r2, r2, r1
    a9a6:	1295      	asrs	r5, r2, #10
            if(k >= 0 && k < len) {
    a9a8:	f1be 0f00 	cmp.w	lr, #0
    a9ac:	db1c      	blt.n	a9e8 <lv_draw_mask_line+0x288>
    a9ae:	4573      	cmp	r3, lr
    a9b0:	dd1a      	ble.n	a9e8 <lv_draw_mask_line+0x288>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    a9b2:	fb05 f101 	mul.w	r1, r5, r1
    a9b6:	f3c1 2247 	ubfx	r2, r1, #9, #8
                if(p->inv) m = 255 - m;
    a9ba:	f016 0f02 	tst.w	r6, #2
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    a9be:	bf04      	itt	eq
    a9c0:	43d2      	mvneq	r2, r2
    a9c2:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    a9c4:	eb00 060e 	add.w	r6, r0, lr
    a9c8:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a9cc:	2af9      	cmp	r2, #249	; 0xf9
    a9ce:	d80a      	bhi.n	a9e6 <lv_draw_mask_line+0x286>
    if(mask_new <= LV_OPA_MIN) return 0;
    a9d0:	2a05      	cmp	r2, #5
    a9d2:	f240 80a1 	bls.w	ab18 <lv_draw_mask_line+0x3b8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a9d6:	fb02 f201 	mul.w	r2, r2, r1
    a9da:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    a9de:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    a9e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    a9e6:	7031      	strb	r1, [r6, #0]
            if(k >= 0 && k < len) {
    a9e8:	f11e 0101 	adds.w	r1, lr, #1
    a9ec:	d420      	bmi.n	aa30 <lv_draw_mask_line+0x2d0>
    a9ee:	428b      	cmp	r3, r1
    a9f0:	dd1e      	ble.n	aa30 <lv_draw_mask_line+0x2d0>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
    a9f2:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    a9f6:	69a5      	ldr	r5, [r4, #24]
    a9f8:	fb05 f502 	mul.w	r5, r5, r2
    a9fc:	12ad      	asrs	r5, r5, #10
                m = ((255 - y_inters) * x_inters) >> 9;
    a9fe:	fb02 f205 	mul.w	r2, r2, r5
    aa02:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    aa06:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    aa0a:	f015 0f02 	tst.w	r5, #2
    aa0e:	bf1c      	itt	ne
    aa10:	43d2      	mvnne	r2, r2
    aa12:	b2d2      	uxtbne	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aa14:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aa16:	2af9      	cmp	r2, #249	; 0xf9
    aa18:	d809      	bhi.n	aa2e <lv_draw_mask_line+0x2ce>
    if(mask_new <= LV_OPA_MIN) return 0;
    aa1a:	2a05      	cmp	r2, #5
    aa1c:	d97e      	bls.n	ab1c <lv_draw_mask_line+0x3bc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aa1e:	fb02 f205 	mul.w	r2, r2, r5
    aa22:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    aa26:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    aa2a:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aa2e:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    aa30:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    aa34:	f012 0f02 	tst.w	r2, #2
    aa38:	d074      	beq.n	ab24 <lv_draw_mask_line+0x3c4>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    aa3a:	4573      	cmp	r3, lr
    aa3c:	f2c0 80b2 	blt.w	aba4 <lv_draw_mask_line+0x444>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
    aa40:	f1be 0f00 	cmp.w	lr, #0
    aa44:	f2c0 80b1 	blt.w	abaa <lv_draw_mask_line+0x44a>
    aa48:	4671      	mov	r1, lr
    aa4a:	4b35      	ldr	r3, [pc, #212]	; (ab20 <lv_draw_mask_line+0x3c0>)
    aa4c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    aa4e:	2002      	movs	r0, #2
    aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    aa54:	2900      	cmp	r1, #0
    aa56:	f040 8100 	bne.w	ac5a <lv_draw_mask_line+0x4fa>
        k--;
    aa5a:	f10e 3eff 	add.w	lr, lr, #4294967295
        xsf = 0xFF;
    aa5e:	21ff      	movs	r1, #255	; 0xff
        if(k >= 0 && k < len) {
    aa60:	f1be 0f00 	cmp.w	lr, #0
    aa64:	db1e      	blt.n	aaa4 <lv_draw_mask_line+0x344>
    aa66:	4573      	cmp	r3, lr
    aa68:	dd1c      	ble.n	aaa4 <lv_draw_mask_line+0x344>
    int32_t xef = xe & 0xFF;
    aa6a:	f3c2 2287 	ubfx	r2, r2, #10, #8
            m = (xsf + xef) >> 1;
    aa6e:	440a      	add	r2, r1
    aa70:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
    aa74:	f016 0f02 	tst.w	r6, #2
    aa78:	bf1c      	itt	ne
    aa7a:	43d2      	mvnne	r2, r2
    aa7c:	b2d2      	uxtbne	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
    aa7e:	eb00 060e 	add.w	r6, r0, lr
    aa82:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aa86:	2af9      	cmp	r2, #249	; 0xf9
    aa88:	d80b      	bhi.n	aaa2 <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    aa8a:	2a05      	cmp	r2, #5
    aa8c:	d908      	bls.n	aaa0 <lv_draw_mask_line+0x340>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aa8e:	fb02 f201 	mul.w	r2, r2, r1
    aa92:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    aa96:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    aa9a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
    aa9e:	e000      	b.n	aaa2 <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    aaa0:	2100      	movs	r1, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
    aaa2:	7031      	strb	r1, [r6, #0]
        if(p->inv) {
    aaa4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    aaa8:	f012 0f02 	tst.w	r2, #2
    aaac:	d00a      	beq.n	aac4 <lv_draw_mask_line+0x364>
            k = xsi - abs_x;
    aaae:	ebac 0105 	sub.w	r1, ip, r5
            if(k >= len) {
    aab2:	428b      	cmp	r3, r1
    aab4:	dd61      	ble.n	ab7a <lv_draw_mask_line+0x41a>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
    aab6:	2900      	cmp	r1, #0
    aab8:	db62      	blt.n	ab80 <lv_draw_mask_line+0x420>
    aaba:	4b19      	ldr	r3, [pc, #100]	; (ab20 <lv_draw_mask_line+0x3c0>)
    aabc:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    aabe:	2002      	movs	r0, #2
    aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        k++;
    aac4:	f10e 0201 	add.w	r2, lr, #1
    aac8:	429a      	cmp	r2, r3
    aaca:	bfa8      	it	ge
    aacc:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    aace:	2a00      	cmp	r2, #0
    aad0:	d059      	beq.n	ab86 <lv_draw_mask_line+0x426>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    aad2:	2a00      	cmp	r2, #0
    aad4:	dd5a      	ble.n	ab8c <lv_draw_mask_line+0x42c>
    aad6:	1a99      	subs	r1, r3, r2
    aad8:	4410      	add	r0, r2
    aada:	4b11      	ldr	r3, [pc, #68]	; (ab20 <lv_draw_mask_line+0x3c0>)
    aadc:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    aade:	2002      	movs	r0, #2
    aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    aae4:	2500      	movs	r5, #0
    aae6:	e0dc      	b.n	aca2 <lv_draw_mask_line+0x542>
    aae8:	2500      	movs	r5, #0
    aaea:	e100      	b.n	acee <lv_draw_mask_line+0x58e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
    aaec:	2900      	cmp	r1, #0
    aaee:	dd50      	ble.n	ab92 <lv_draw_mask_line+0x432>
    aaf0:	4b0b      	ldr	r3, [pc, #44]	; (ab20 <lv_draw_mask_line+0x3c0>)
    aaf2:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    aaf4:	2002      	movs	r0, #2
    aaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            k += 2;
    aafa:	f10e 0e01 	add.w	lr, lr, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    aafe:	4573      	cmp	r3, lr
    ab00:	db4a      	blt.n	ab98 <lv_draw_mask_line+0x438>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
    ab02:	f1be 0f00 	cmp.w	lr, #0
    ab06:	db4a      	blt.n	ab9e <lv_draw_mask_line+0x43e>
    ab08:	eba3 010e 	sub.w	r1, r3, lr
    ab0c:	4470      	add	r0, lr
    ab0e:	4b04      	ldr	r3, [pc, #16]	; (ab20 <lv_draw_mask_line+0x3c0>)
    ab10:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    ab12:	2002      	movs	r0, #2
    ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    ab18:	2100      	movs	r1, #0
    ab1a:	e764      	b.n	a9e6 <lv_draw_mask_line+0x286>
    ab1c:	2500      	movs	r5, #0
    ab1e:	e786      	b.n	aa2e <lv_draw_mask_line+0x2ce>
    ab20:	00011bdb 	.word	0x00011bdb
            k++;
    ab24:	f10e 0202 	add.w	r2, lr, #2
    ab28:	429a      	cmp	r2, r3
    ab2a:	bfa8      	it	ge
    ab2c:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    ab2e:	2a00      	cmp	r2, #0
    ab30:	d03e      	beq.n	abb0 <lv_draw_mask_line+0x450>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    ab32:	2a00      	cmp	r2, #0
    ab34:	dd3f      	ble.n	abb6 <lv_draw_mask_line+0x456>
    ab36:	1a99      	subs	r1, r3, r2
    ab38:	4410      	add	r0, r2
    ab3a:	4b73      	ldr	r3, [pc, #460]	; (ad08 <lv_draw_mask_line+0x5a8>)
    ab3c:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    ab3e:	2002      	movs	r0, #2
    ab40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    ab44:	2001      	movs	r0, #1
    ab46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
    ab4a:	2001      	movs	r0, #1
    ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    ab50:	2001      	movs	r0, #1
    ab52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    ab56:	2000      	movs	r0, #0
    ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    ab5c:	2000      	movs	r0, #0
    ab5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    ab62:	2000      	movs	r0, #0
    ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    ab68:	2000      	movs	r0, #0
    ab6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    ab6e:	2002      	movs	r0, #2
    ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    ab74:	2000      	movs	r0, #0
    ab76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return LV_DRAW_MASK_RES_TRANSP;
    ab7a:	2000      	movs	r0, #0
    ab7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    ab80:	2002      	movs	r0, #2
    ab82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    ab86:	2000      	movs	r0, #0
    ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    ab8c:	2002      	movs	r0, #2
    ab8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab92:	2002      	movs	r0, #2
    ab94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    ab98:	2001      	movs	r0, #1
    ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    ab9e:	2002      	movs	r0, #2
    aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    aba4:	2000      	movs	r0, #0
    aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abaa:	2002      	movs	r0, #2
    abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    abb0:	2000      	movs	r0, #0
    abb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    abb6:	2002      	movs	r0, #2
    abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    abbc:	461f      	mov	r7, r3
    abbe:	442b      	add	r3, r5
    abc0:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x < abs_y) {
    abc4:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    abc8:	f73f ae4b 	bgt.w	a862 <lv_draw_mask_line+0x102>
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
    abcc:	0212      	lsls	r2, r2, #8
    abce:	69a3      	ldr	r3, [r4, #24]
    abd0:	fb03 f302 	mul.w	r3, r3, r2
    abd4:	129b      	asrs	r3, r3, #10
    int32_t xei = xe >> 8;
    abd6:	1219      	asrs	r1, r3, #8
    if(xef == 0) px_h = 255;
    abd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    abdc:	d039      	beq.n	ac52 <lv_draw_mask_line+0x4f2>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
    abde:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    abe2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    abe4:	fb02 f203 	mul.w	r2, r2, r3
    abe8:	ea4f 2e22 	mov.w	lr, r2, asr #8
    abec:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
        if(k >= 0 && k < len) {
    abf0:	1b49      	subs	r1, r1, r5
    abf2:	d41a      	bmi.n	ac2a <lv_draw_mask_line+0x4ca>
    abf4:	42b9      	cmp	r1, r7
    abf6:	da18      	bge.n	ac2a <lv_draw_mask_line+0x4ca>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    abf8:	fb0e f303 	mul.w	r3, lr, r3
    abfc:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
    ac00:	f016 0f02 	tst.w	r6, #2
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    ac04:	bf04      	itt	eq
    ac06:	43db      	mvneq	r3, r3
    ac08:	b2db      	uxtbeq	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
    ac0a:	1846      	adds	r6, r0, r1
    ac0c:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ac0e:	2bf9      	cmp	r3, #249	; 0xf9
    ac10:	d80a      	bhi.n	ac28 <lv_draw_mask_line+0x4c8>
    if(mask_new <= LV_OPA_MIN) return 0;
    ac12:	2b05      	cmp	r3, #5
    ac14:	f67f ae31 	bls.w	a87a <lv_draw_mask_line+0x11a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ac18:	fb03 f305 	mul.w	r3, r3, r5
    ac1c:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    ac20:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    ac24:	f3c3 55c7 	ubfx	r5, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
    ac28:	7035      	strb	r5, [r6, #0]
        k++;
    ac2a:	1c4d      	adds	r5, r1, #1
    ac2c:	1946      	adds	r6, r0, r5
    if(mask_new <= LV_OPA_MIN) return 0;
    ac2e:	f04f 0e00 	mov.w	lr, #0
    ac32:	e62d      	b.n	a890 <lv_draw_mask_line+0x130>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    ac34:	461f      	mov	r7, r3
    ac36:	442b      	add	r3, r5
    ac38:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x > abs_y) {
    ac3c:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    ac40:	f6ff ae15 	blt.w	a86e <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    ac44:	3201      	adds	r2, #1
    ac46:	0212      	lsls	r2, r2, #8
    ac48:	69a3      	ldr	r3, [r4, #24]
    ac4a:	fb03 f302 	mul.w	r3, r3, r2
    ac4e:	129b      	asrs	r3, r3, #10
    ac50:	e7c1      	b.n	abd6 <lv_draw_mask_line+0x476>
    int32_t k = xei - abs_x;
    ac52:	1b4d      	subs	r5, r1, r5
    ac54:	4629      	mov	r1, r5
    if(xef == 0) px_h = 255;
    ac56:	22ff      	movs	r2, #255	; 0xff
    ac58:	e7e8      	b.n	ac2c <lv_draw_mask_line+0x4cc>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
    ac5a:	69e2      	ldr	r2, [r4, #28]
    ac5c:	4252      	negs	r2, r2
    ac5e:	fb01 f202 	mul.w	r2, r1, r2
    ac62:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
    ac64:	f1be 0f00 	cmp.w	lr, #0
    ac68:	db1c      	blt.n	aca4 <lv_draw_mask_line+0x544>
    ac6a:	4573      	cmp	r3, lr
    ac6c:	dd1a      	ble.n	aca4 <lv_draw_mask_line+0x544>
                m = (y_inters * xsf) >> 9;
    ac6e:	fb02 f101 	mul.w	r1, r2, r1
    ac72:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
    ac76:	f016 0f02 	tst.w	r6, #2
    ac7a:	bf1c      	itt	ne
    ac7c:	43c9      	mvnne	r1, r1
    ac7e:	b2c9      	uxtbne	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ac80:	eb00 060e 	add.w	r6, r0, lr
    ac84:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ac88:	29f9      	cmp	r1, #249	; 0xf9
    ac8a:	d80a      	bhi.n	aca2 <lv_draw_mask_line+0x542>
    if(mask_new <= LV_OPA_MIN) return 0;
    ac8c:	2905      	cmp	r1, #5
    ac8e:	f67f af29 	bls.w	aae4 <lv_draw_mask_line+0x384>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ac92:	fb01 f105 	mul.w	r1, r1, r5
    ac96:	eb01 2501 	add.w	r5, r1, r1, lsl #8
    ac9a:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    ac9e:	f3c1 55c7 	ubfx	r5, r1, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    aca2:	7035      	strb	r5, [r6, #0]
            if(k >= 0 && k < len) {
    aca4:	f1be 0101 	subs.w	r1, lr, #1
    aca8:	d422      	bmi.n	acf0 <lv_draw_mask_line+0x590>
    acaa:	428b      	cmp	r3, r1
    acac:	dd20      	ble.n	acf0 <lv_draw_mask_line+0x590>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
    acae:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
    acb2:	69a5      	ldr	r5, [r4, #24]
    acb4:	426d      	negs	r5, r5
    acb6:	fb02 f505 	mul.w	r5, r2, r5
    acba:	12ad      	asrs	r5, r5, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    acbc:	fb02 f205 	mul.w	r2, r2, r5
    acc0:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    acc4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    acc8:	f015 0f02 	tst.w	r5, #2
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    accc:	bf04      	itt	eq
    acce:	43d2      	mvneq	r2, r2
    acd0:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    acd2:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    acd4:	2af9      	cmp	r2, #249	; 0xf9
    acd6:	d80a      	bhi.n	acee <lv_draw_mask_line+0x58e>
    if(mask_new <= LV_OPA_MIN) return 0;
    acd8:	2a05      	cmp	r2, #5
    acda:	f67f af05 	bls.w	aae8 <lv_draw_mask_line+0x388>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    acde:	fb02 f205 	mul.w	r2, r2, r5
    ace2:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    ace6:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    acea:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    acee:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    acf0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    acf4:	f012 0f02 	tst.w	r2, #2
    acf8:	f43f aeff 	beq.w	aafa <lv_draw_mask_line+0x39a>
                if(k > len) k = len;
    acfc:	428b      	cmp	r3, r1
    acfe:	f6bf aef5 	bge.w	aaec <lv_draw_mask_line+0x38c>
    return LV_DRAW_MASK_RES_CHANGED;
    ad02:	2002      	movs	r0, #2
    ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad08:	00011bdb 	.word	0x00011bdb

0000ad0c <lv_draw_mask_radius>:
{
    ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad10:	b08d      	sub	sp, #52	; 0x34
    ad12:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
    ad14:	7cae      	ldrb	r6, [r5, #18]
    ad16:	f006 0601 	and.w	r6, r6, #1
    int32_t radius = p->cfg.radius;
    ad1a:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
    ad1e:	1dec      	adds	r4, r5, #7
    ad20:	f105 090f 	add.w	r9, r5, #15
    uint8_t * d8 = (uint8_t *)dst;
    ad24:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
        *d8 = *s8;
    ad28:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    ad2c:	f80e 7b01 	strb.w	r7, [lr], #1
    while(len) {
    ad30:	454c      	cmp	r4, r9
    ad32:	d1f9      	bne.n	ad28 <lv_draw_mask_radius+0x1c>
    if(outer == false) {
    ad34:	2e00      	cmp	r6, #0
    ad36:	d13d      	bne.n	adb4 <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    ad38:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    ad3c:	4294      	cmp	r4, r2
    ad3e:	f300 822b 	bgt.w	b198 <lv_draw_mask_radius+0x48c>
    ad42:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    ad46:	4294      	cmp	r4, r2
    ad48:	f2c0 822a 	blt.w	b1a0 <lv_draw_mask_radius+0x494>
    ad4c:	469b      	mov	fp, r3
    ad4e:	460f      	mov	r7, r1
    ad50:	9002      	str	r0, [sp, #8]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    ad52:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    ad56:	eb08 0309 	add.w	r3, r8, r9
    ad5a:	4299      	cmp	r1, r3
    ad5c:	db06      	blt.n	ad6c <lv_draw_mask_radius+0x60>
    ad5e:	4459      	add	r1, fp
    ad60:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    ad64:	eba3 0308 	sub.w	r3, r3, r8
    ad68:	4299      	cmp	r1, r3
    ad6a:	dd0b      	ble.n	ad84 <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    ad6c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    ad70:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    ad74:	428a      	cmp	r2, r1
    ad76:	db53      	blt.n	ae20 <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    ad78:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    ad7c:	eba1 0108 	sub.w	r1, r1, r8
    ad80:	428a      	cmp	r2, r1
    ad82:	dc4d      	bgt.n	ae20 <lv_draw_mask_radius+0x114>
        if(outer == false) {
    ad84:	bb86      	cbnz	r6, ade8 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
    ad86:	eba9 0407 	sub.w	r4, r9, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    ad8a:	455c      	cmp	r4, fp
    ad8c:	f300 820c 	bgt.w	b1a8 <lv_draw_mask_radius+0x49c>
            if(last >= 0) {
    ad90:	2c00      	cmp	r4, #0
    ad92:	db03      	blt.n	ad9c <lv_draw_mask_radius+0x90>
                _lv_memset_00(&mask_buf[0], last);
    ad94:	4621      	mov	r1, r4
    ad96:	9802      	ldr	r0, [sp, #8]
    ad98:	4b9f      	ldr	r3, [pc, #636]	; (b018 <lv_draw_mask_radius+0x30c>)
    ad9a:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
    ad9c:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
    ada0:	1bc0      	subs	r0, r0, r7
    ada2:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    ada4:	2800      	cmp	r0, #0
    ada6:	f340 8201 	ble.w	b1ac <lv_draw_mask_radius+0x4a0>
            else if(first < len) {
    adaa:	4583      	cmp	fp, r0
    adac:	dc0d      	bgt.n	adca <lv_draw_mask_radius+0xbe>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    adae:	b1bc      	cbz	r4, ade0 <lv_draw_mask_radius+0xd4>
            else return LV_DRAW_MASK_RES_CHANGED;
    adb0:	2002      	movs	r0, #2
    adb2:	e1f2      	b.n	b19a <lv_draw_mask_radius+0x48e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    adb4:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    adb8:	4294      	cmp	r4, r2
    adba:	f300 81f3 	bgt.w	b1a4 <lv_draw_mask_radius+0x498>
    adbe:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    adc2:	4294      	cmp	r4, r2
    adc4:	dac2      	bge.n	ad4c <lv_draw_mask_radius+0x40>
            return LV_DRAW_MASK_RES_FULL_COVER;
    adc6:	2001      	movs	r0, #1
    adc8:	e1e7      	b.n	b19a <lv_draw_mask_radius+0x48e>
                _lv_memset_00(&mask_buf[first], len - first);
    adca:	ebab 0100 	sub.w	r1, fp, r0
    adce:	9b02      	ldr	r3, [sp, #8]
    add0:	4403      	add	r3, r0
    add2:	4618      	mov	r0, r3
    add4:	4b90      	ldr	r3, [pc, #576]	; (b018 <lv_draw_mask_radius+0x30c>)
    add6:	4798      	blx	r3
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    add8:	2c00      	cmp	r4, #0
    adda:	d1e9      	bne.n	adb0 <lv_draw_mask_radius+0xa4>
            else return LV_DRAW_MASK_RES_CHANGED;
    addc:	2002      	movs	r0, #2
    adde:	e1dc      	b.n	b19a <lv_draw_mask_radius+0x48e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    ade0:	4583      	cmp	fp, r0
    ade2:	d1e5      	bne.n	adb0 <lv_draw_mask_radius+0xa4>
    ade4:	2001      	movs	r0, #1
    ade6:	e1d8      	b.n	b19a <lv_draw_mask_radius+0x48e>
            int32_t first = rect.x1 - abs_x;
    ade8:	eba9 0007 	sub.w	r0, r9, r7
    adec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
    adf0:	4558      	cmp	r0, fp
    adf2:	dd01      	ble.n	adf8 <lv_draw_mask_radius+0xec>
        return LV_DRAW_MASK_RES_CHANGED;
    adf4:	2002      	movs	r0, #2
    adf6:	e1d0      	b.n	b19a <lv_draw_mask_radius+0x48e>
                int32_t last =  rect.x2 - abs_x - first + 1;
    adf8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    adfc:	1bc9      	subs	r1, r1, r7
    adfe:	1a09      	subs	r1, r1, r0
    ae00:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
    ae02:	1843      	adds	r3, r0, r1
    ae04:	459b      	cmp	fp, r3
    ae06:	bfb8      	it	lt
    ae08:	ebab 0100 	sublt.w	r1, fp, r0
                if(last >= 0) {
    ae0c:	2900      	cmp	r1, #0
    ae0e:	f2c0 81cf 	blt.w	b1b0 <lv_draw_mask_radius+0x4a4>
                    _lv_memset_00(&mask_buf[first], last);
    ae12:	9b02      	ldr	r3, [sp, #8]
    ae14:	4403      	add	r3, r0
    ae16:	4618      	mov	r0, r3
    ae18:	4b7f      	ldr	r3, [pc, #508]	; (b018 <lv_draw_mask_radius+0x30c>)
    ae1a:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
    ae1c:	2002      	movs	r0, #2
    ae1e:	e1bc      	b.n	b19a <lv_draw_mask_radius+0x48e>
    ae20:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ae24:	b29b      	uxth	r3, r3
    ae26:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    ae2a:	3101      	adds	r1, #1
    ae2c:	1ac9      	subs	r1, r1, r3
    int32_t h = lv_area_get_height(&rect);
    ae2e:	b209      	sxth	r1, r1
    abs_y -= rect.y1;
    ae30:	1ad2      	subs	r2, r2, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
    ae32:	fb08 f308 	mul.w	r3, r8, r8
    ae36:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
    ae38:	b212      	sxth	r2, r2
    ae3a:	4590      	cmp	r8, r2
    ae3c:	f300 81d1 	bgt.w	b1e2 <lv_draw_mask_radius+0x4d6>
    ae40:	eba1 0308 	sub.w	r3, r1, r8
    ae44:	3b01      	subs	r3, #1
    ae46:	429a      	cmp	r2, r3
    ae48:	f300 81b4 	bgt.w	b1b4 <lv_draw_mask_radius+0x4a8>
    return LV_DRAW_MASK_RES_CHANGED;
    ae4c:	2002      	movs	r0, #2
    ae4e:	e1a4      	b.n	b19a <lv_draw_mask_radius+0x48e>
                x0.f = p->y_prev_x.f;
    ae50:	8b6b      	ldrh	r3, [r5, #26]
    ae52:	f8ad 301a 	strh.w	r3, [sp, #26]
                x0.i = p->y_prev_x.i;
    ae56:	8b2b      	ldrh	r3, [r5, #24]
    ae58:	f8ad 3018 	strh.w	r3, [sp, #24]
    ae5c:	e1d6      	b.n	b20c <lv_draw_mask_radius+0x500>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    ae5e:	9a04      	ldr	r2, [sp, #16]
    ae60:	a907      	add	r1, sp, #28
    ae62:	9b01      	ldr	r3, [sp, #4]
    ae64:	fb00 3010 	mls	r0, r0, r0, r3
    ae68:	4b6c      	ldr	r3, [pc, #432]	; (b01c <lv_draw_mask_radius+0x310>)
    ae6a:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    ae6c:	9a04      	ldr	r2, [sp, #16]
    ae6e:	a906      	add	r1, sp, #24
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	fb04 3014 	mls	r0, r4, r4, r3
    ae76:	4b69      	ldr	r3, [pc, #420]	; (b01c <lv_draw_mask_radius+0x310>)
    ae78:	4798      	blx	r3
            p->y_prev = y;
    ae7a:	616c      	str	r4, [r5, #20]
            p->y_prev_x.f = x0.f;
    ae7c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ae80:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x0.i;
    ae82:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    ae86:	832b      	strh	r3, [r5, #24]
    ae88:	e1d1      	b.n	b22e <lv_draw_mask_radius+0x522>
        if(x0.i == x1.i - 1 && x1.f == 0) {
    ae8a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    ae8e:	2900      	cmp	r1, #0
    ae90:	f040 81d5 	bne.w	b23e <lv_draw_mask_radius+0x532>
            x1.i--;
    ae94:	3a01      	subs	r2, #1
    ae96:	f8ad 201c 	strh.w	r2, [sp, #28]
            x1.f = 0xFF;
    ae9a:	22ff      	movs	r2, #255	; 0xff
    ae9c:	f8ad 201e 	strh.w	r2, [sp, #30]
    aea0:	e1cd      	b.n	b23e <lv_draw_mask_radius+0x532>
            lv_opa_t m = (x0.f + x1.f) >> 1;
    aea2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    aea6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    aeaa:	440a      	add	r2, r1
    aeac:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
    aeb0:	b10e      	cbz	r6, aeb6 <lv_draw_mask_radius+0x1aa>
    aeb2:	43d2      	mvns	r2, r2
    aeb4:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
    aeb6:	eba8 0303 	sub.w	r3, r8, r3
    aeba:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
    aebc:	18f9      	adds	r1, r7, r3
    aebe:	d411      	bmi.n	aee4 <lv_draw_mask_radius+0x1d8>
    aec0:	4559      	cmp	r1, fp
    aec2:	da0f      	bge.n	aee4 <lv_draw_mask_radius+0x1d8>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    aec4:	9802      	ldr	r0, [sp, #8]
    aec6:	5c40      	ldrb	r0, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aec8:	2af9      	cmp	r2, #249	; 0xf9
    aeca:	d809      	bhi.n	aee0 <lv_draw_mask_radius+0x1d4>
    if(mask_new <= LV_OPA_MIN) return 0;
    aecc:	2a05      	cmp	r2, #5
    aece:	d935      	bls.n	af3c <lv_draw_mask_radius+0x230>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aed0:	fb02 f000 	mul.w	r0, r2, r0
    aed4:	eb00 2400 	add.w	r4, r0, r0, lsl #8
    aed8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    aedc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    aee0:	9c02      	ldr	r4, [sp, #8]
    aee2:	5460      	strb	r0, [r4, r1]
            int32_t kr = k + (w - ofs - 1);
    aee4:	eba9 0303 	sub.w	r3, r9, r3
    aee8:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
    aeea:	19df      	adds	r7, r3, r7
    aeec:	d411      	bmi.n	af12 <lv_draw_mask_radius+0x206>
    aeee:	455f      	cmp	r7, fp
    aef0:	da0f      	bge.n	af12 <lv_draw_mask_radius+0x206>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    aef2:	9b02      	ldr	r3, [sp, #8]
    aef4:	5ddb      	ldrb	r3, [r3, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    aef6:	2af9      	cmp	r2, #249	; 0xf9
    aef8:	d809      	bhi.n	af0e <lv_draw_mask_radius+0x202>
    if(mask_new <= LV_OPA_MIN) return 0;
    aefa:	2a05      	cmp	r2, #5
    aefc:	d920      	bls.n	af40 <lv_draw_mask_radius+0x234>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    aefe:	fb02 f203 	mul.w	r2, r2, r3
    af02:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    af06:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    af0a:	f3c2 53c7 	ubfx	r3, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    af0e:	9a02      	ldr	r2, [sp, #8]
    af10:	55d3      	strb	r3, [r2, r7]
            if(outer == false) {
    af12:	b1be      	cbz	r6, af44 <lv_draw_mask_radius+0x238>
                kl++;
    af14:	1c48      	adds	r0, r1, #1
    af16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    af1a:	455f      	cmp	r7, fp
                int32_t len_tmp = kr - first;
    af1c:	bfd4      	ite	le
    af1e:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
    af20:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    af24:	4558      	cmp	r0, fp
    af26:	f280 8119 	bge.w	b15c <lv_draw_mask_radius+0x450>
    af2a:	2900      	cmp	r1, #0
    af2c:	f2c0 8116 	blt.w	b15c <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    af30:	9b02      	ldr	r3, [sp, #8]
    af32:	4403      	add	r3, r0
    af34:	4618      	mov	r0, r3
    af36:	4b38      	ldr	r3, [pc, #224]	; (b018 <lv_draw_mask_radius+0x30c>)
    af38:	4798      	blx	r3
    af3a:	e10f      	b.n	b15c <lv_draw_mask_radius+0x450>
    if(mask_new <= LV_OPA_MIN) return 0;
    af3c:	2000      	movs	r0, #0
    af3e:	e7cf      	b.n	aee0 <lv_draw_mask_radius+0x1d4>
    af40:	2300      	movs	r3, #0
    af42:	e7e4      	b.n	af0e <lv_draw_mask_radius+0x202>
                if(kl > len)  {
    af44:	4559      	cmp	r1, fp
    af46:	f300 8125 	bgt.w	b194 <lv_draw_mask_radius+0x488>
                if(kl >= 0) {
    af4a:	2900      	cmp	r1, #0
    af4c:	db02      	blt.n	af54 <lv_draw_mask_radius+0x248>
                    _lv_memset_00(&mask_buf[0], kl);
    af4e:	9802      	ldr	r0, [sp, #8]
    af50:	4b31      	ldr	r3, [pc, #196]	; (b018 <lv_draw_mask_radius+0x30c>)
    af52:	4798      	blx	r3
                if(kr < 0) {
    af54:	3701      	adds	r7, #1
    af56:	f100 811d 	bmi.w	b194 <lv_draw_mask_radius+0x488>
                if(kr <= len) {
    af5a:	455f      	cmp	r7, fp
    af5c:	f300 80fe 	bgt.w	b15c <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[kr], len - kr);
    af60:	ebab 0107 	sub.w	r1, fp, r7
    af64:	9b02      	ldr	r3, [sp, #8]
    af66:	443b      	add	r3, r7
    af68:	4618      	mov	r0, r3
    af6a:	4b2b      	ldr	r3, [pc, #172]	; (b018 <lv_draw_mask_radius+0x30c>)
    af6c:	4798      	blx	r3
    af6e:	e0f5      	b.n	b15c <lv_draw_mask_radius+0x450>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
    af70:	9a04      	ldr	r2, [sp, #16]
    af72:	a909      	add	r1, sp, #36	; 0x24
    af74:	9b01      	ldr	r3, [sp, #4]
    af76:	fb08 3018 	mls	r0, r8, r8, r3
    af7a:	4b28      	ldr	r3, [pc, #160]	; (b01c <lv_draw_mask_radius+0x310>)
    af7c:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    af7e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    af82:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    af86:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
    af8a:	f1c1 03ff 	rsb	r3, r1, #255	; 0xff
    af8e:	fb03 f302 	mul.w	r3, r3, r2
    af92:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    af96:	b90e      	cbnz	r6, af9c <lv_draw_mask_radius+0x290>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    af98:	43db      	mvns	r3, r3
    af9a:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    af9c:	9803      	ldr	r0, [sp, #12]
    af9e:	4602      	mov	r2, r0
    afa0:	2800      	cmp	r0, #0
    afa2:	db11      	blt.n	afc8 <lv_draw_mask_radius+0x2bc>
    afa4:	4558      	cmp	r0, fp
    afa6:	da0f      	bge.n	afc8 <lv_draw_mask_radius+0x2bc>
    afa8:	9c02      	ldr	r4, [sp, #8]
    afaa:	1820      	adds	r0, r4, r0
    afac:	5ca2      	ldrb	r2, [r4, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    afae:	2bf9      	cmp	r3, #249	; 0xf9
    afb0:	d809      	bhi.n	afc6 <lv_draw_mask_radius+0x2ba>
    if(mask_new <= LV_OPA_MIN) return 0;
    afb2:	2b05      	cmp	r3, #5
    afb4:	d929      	bls.n	b00a <lv_draw_mask_radius+0x2fe>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    afb6:	fb03 f202 	mul.w	r2, r3, r2
    afba:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    afbe:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    afc2:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    afc6:	7002      	strb	r2, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    afc8:	f1ba 0f00 	cmp.w	sl, #0
    afcc:	db13      	blt.n	aff6 <lv_draw_mask_radius+0x2ea>
    afce:	45da      	cmp	sl, fp
    afd0:	da11      	bge.n	aff6 <lv_draw_mask_radius+0x2ea>
    afd2:	9c02      	ldr	r4, [sp, #8]
    afd4:	eb04 000a 	add.w	r0, r4, sl
    afd8:	f814 200a 	ldrb.w	r2, [r4, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    afdc:	2bf9      	cmp	r3, #249	; 0xf9
    afde:	d809      	bhi.n	aff4 <lv_draw_mask_radius+0x2e8>
    if(mask_new <= LV_OPA_MIN) return 0;
    afe0:	2b05      	cmp	r3, #5
    afe2:	d914      	bls.n	b00e <lv_draw_mask_radius+0x302>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    afe4:	fb03 f302 	mul.w	r3, r3, r2
    afe8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    afec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    aff0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    aff4:	7002      	strb	r2, [r0, #0]
                kl--;
    aff6:	9b03      	ldr	r3, [sp, #12]
    aff8:	3b01      	subs	r3, #1
    affa:	9303      	str	r3, [sp, #12]
                kr++;
    affc:	f10a 0a01 	add.w	sl, sl, #1
                y_prev.f = y_next.f;
    b000:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                i++;
    b004:	f108 0801 	add.w	r8, r8, #1
    b008:	e15e      	b.n	b2c8 <lv_draw_mask_radius+0x5bc>
    if(mask_new <= LV_OPA_MIN) return 0;
    b00a:	2200      	movs	r2, #0
    b00c:	e7db      	b.n	afc6 <lv_draw_mask_radius+0x2ba>
    b00e:	2200      	movs	r2, #0
    b010:	e7f0      	b.n	aff4 <lv_draw_mask_radius+0x2e8>
    b012:	2700      	movs	r7, #0
    b014:	e039      	b.n	b08a <lv_draw_mask_radius+0x37e>
    b016:	bf00      	nop
    b018:	00011bdb 	.word	0x00011bdb
    b01c:	00011479 	.word	0x00011479
    b020:	2700      	movs	r7, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b022:	f80e 7008 	strb.w	r7, [lr, r8]
                kl--;
    b026:	3801      	subs	r0, #1
                kr++;
    b028:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
    b02a:	3101      	adds	r1, #1
                y_prev.f = y_next.f;
    b02c:	461a      	mov	r2, r3
            for(; i <= x1.i; i++) {
    b02e:	9d01      	ldr	r5, [sp, #4]
    b030:	42a9      	cmp	r1, r5
    b032:	d840      	bhi.n	b0b6 <lv_draw_mask_radius+0x3aa>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    b034:	eb09 1712 	add.w	r7, r9, r2, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
    b038:	fb01 a311 	mls	r3, r1, r1, sl
    uint32_t raw2 = raw * raw;
    b03c:	fb07 fc07 	mul.w	ip, r7, r7

    int32_t d = x - raw2;
    b040:	ebcc 2303 	rsb	r3, ip, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
    b044:	ea4f 0c47 	mov.w	ip, r7, lsl #1
    b048:	fb93 f3fc 	sdiv	r3, r3, ip
    b04c:	441f      	add	r7, r3

    q->i = d >> 4;
    b04e:	f3c7 1c0f 	ubfx	ip, r7, #4, #16
    q->f = (d & 0xF) << 4;
    b052:	013f      	lsls	r7, r7, #4
    b054:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
    b058:	441a      	add	r2, r3
    b05a:	f3c2 0247 	ubfx	r2, r2, #1, #8
                if(outer) m = 255 - m;
    b05e:	b10e      	cbz	r6, b064 <lv_draw_mask_radius+0x358>
    b060:	43d2      	mvns	r2, r2
    b062:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b064:	2800      	cmp	r0, #0
    b066:	db12      	blt.n	b08e <lv_draw_mask_radius+0x382>
    b068:	4583      	cmp	fp, r0
    b06a:	dd10      	ble.n	b08e <lv_draw_mask_radius+0x382>
    b06c:	4680      	mov	r8, r0
    b06e:	f81e 7000 	ldrb.w	r7, [lr, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b072:	2af9      	cmp	r2, #249	; 0xf9
    b074:	d809      	bhi.n	b08a <lv_draw_mask_radius+0x37e>
    if(mask_new <= LV_OPA_MIN) return 0;
    b076:	2a05      	cmp	r2, #5
    b078:	d9cb      	bls.n	b012 <lv_draw_mask_radius+0x306>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b07a:	fb02 f507 	mul.w	r5, r2, r7
    b07e:	eb05 2705 	add.w	r7, r5, r5, lsl #8
    b082:	eb05 17c7 	add.w	r7, r5, r7, lsl #7
    b086:	f3c7 57c7 	ubfx	r7, r7, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b08a:	f80e 7008 	strb.w	r7, [lr, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b08e:	2c00      	cmp	r4, #0
    b090:	dbc9      	blt.n	b026 <lv_draw_mask_radius+0x31a>
    b092:	45a3      	cmp	fp, r4
    b094:	ddc7      	ble.n	b026 <lv_draw_mask_radius+0x31a>
    b096:	46a0      	mov	r8, r4
    b098:	f81e 7004 	ldrb.w	r7, [lr, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b09c:	2af9      	cmp	r2, #249	; 0xf9
    b09e:	d8c0      	bhi.n	b022 <lv_draw_mask_radius+0x316>
    if(mask_new <= LV_OPA_MIN) return 0;
    b0a0:	2a05      	cmp	r2, #5
    b0a2:	d9bd      	bls.n	b020 <lv_draw_mask_radius+0x314>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b0a4:	fb02 f207 	mul.w	r2, r2, r7
    b0a8:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    b0ac:	eb02 17c7 	add.w	r7, r2, r7, lsl #7
    b0b0:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    b0b4:	e7b5      	b.n	b022 <lv_draw_mask_radius+0x316>
    b0b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
    b0ba:	f8dd a014 	ldr.w	sl, [sp, #20]
    b0be:	43ea      	mvns	r2, r5
    b0c0:	4442      	add	r2, r8
    b0c2:	9903      	ldr	r1, [sp, #12]
    b0c4:	4411      	add	r1, r2
    b0c6:	9103      	str	r1, [sp, #12]
    b0c8:	3501      	adds	r5, #1
    b0ca:	44aa      	add	sl, r5
    b0cc:	ebaa 0a08 	sub.w	sl, sl, r8
    b0d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    b0d4:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
    b0d8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
    b0dc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	d03a      	beq.n	b15a <lv_draw_mask_radius+0x44e>
                m = (y_prev.f * x1.f) >> 9;
    b0e4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    b0e8:	fb03 f302 	mul.w	r3, r3, r2
    b0ec:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    b0f0:	b10e      	cbz	r6, b0f6 <lv_draw_mask_radius+0x3ea>
    b0f2:	43db      	mvns	r3, r3
    b0f4:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b0f6:	9a03      	ldr	r2, [sp, #12]
    b0f8:	2a00      	cmp	r2, #0
    b0fa:	db12      	blt.n	b122 <lv_draw_mask_radius+0x416>
    b0fc:	4593      	cmp	fp, r2
    b0fe:	dd10      	ble.n	b122 <lv_draw_mask_radius+0x416>
    b100:	9802      	ldr	r0, [sp, #8]
    b102:	4601      	mov	r1, r0
    b104:	4411      	add	r1, r2
    b106:	5c82      	ldrb	r2, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b108:	2bf9      	cmp	r3, #249	; 0xf9
    b10a:	d809      	bhi.n	b120 <lv_draw_mask_radius+0x414>
    if(mask_new <= LV_OPA_MIN) return 0;
    b10c:	2b05      	cmp	r3, #5
    b10e:	d927      	bls.n	b160 <lv_draw_mask_radius+0x454>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b110:	fb03 f202 	mul.w	r2, r3, r2
    b114:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    b118:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    b11c:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    b120:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b122:	f1ba 0f00 	cmp.w	sl, #0
    b126:	db13      	blt.n	b150 <lv_draw_mask_radius+0x444>
    b128:	45d3      	cmp	fp, sl
    b12a:	dd11      	ble.n	b150 <lv_draw_mask_radius+0x444>
    b12c:	9802      	ldr	r0, [sp, #8]
    b12e:	eb00 010a 	add.w	r1, r0, sl
    b132:	f810 200a 	ldrb.w	r2, [r0, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b136:	2bf9      	cmp	r3, #249	; 0xf9
    b138:	d809      	bhi.n	b14e <lv_draw_mask_radius+0x442>
    if(mask_new <= LV_OPA_MIN) return 0;
    b13a:	2b05      	cmp	r3, #5
    b13c:	d912      	bls.n	b164 <lv_draw_mask_radius+0x458>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b13e:	fb03 f302 	mul.w	r3, r3, r2
    b142:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    b146:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    b14a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    b14e:	700a      	strb	r2, [r1, #0]
                kl--;
    b150:	9b03      	ldr	r3, [sp, #12]
    b152:	3b01      	subs	r3, #1
    b154:	9303      	str	r3, [sp, #12]
                kr++;
    b156:	f10a 0a01 	add.w	sl, sl, #1
            if(outer == 0) {
    b15a:	b12e      	cbz	r6, b168 <lv_draw_mask_radius+0x45c>
    return LV_DRAW_MASK_RES_CHANGED;
    b15c:	2002      	movs	r0, #2
    b15e:	e01c      	b.n	b19a <lv_draw_mask_radius+0x48e>
    if(mask_new <= LV_OPA_MIN) return 0;
    b160:	2200      	movs	r2, #0
    b162:	e7dd      	b.n	b120 <lv_draw_mask_radius+0x414>
    b164:	2200      	movs	r2, #0
    b166:	e7f2      	b.n	b14e <lv_draw_mask_radius+0x442>
                kl++;
    b168:	9903      	ldr	r1, [sp, #12]
    b16a:	3101      	adds	r1, #1
                if(kl > len) {
    b16c:	4559      	cmp	r1, fp
    b16e:	dc11      	bgt.n	b194 <lv_draw_mask_radius+0x488>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
    b170:	2900      	cmp	r1, #0
    b172:	db02      	blt.n	b17a <lv_draw_mask_radius+0x46e>
    b174:	9802      	ldr	r0, [sp, #8]
    b176:	4b60      	ldr	r3, [pc, #384]	; (b2f8 <lv_draw_mask_radius+0x5ec>)
    b178:	4798      	blx	r3
                if(kr < 0) {
    b17a:	f1ba 0f00 	cmp.w	sl, #0
    b17e:	db09      	blt.n	b194 <lv_draw_mask_radius+0x488>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
    b180:	45da      	cmp	sl, fp
    b182:	daeb      	bge.n	b15c <lv_draw_mask_radius+0x450>
    b184:	ebab 010a 	sub.w	r1, fp, sl
    b188:	9b02      	ldr	r3, [sp, #8]
    b18a:	4453      	add	r3, sl
    b18c:	4618      	mov	r0, r3
    b18e:	4b5a      	ldr	r3, [pc, #360]	; (b2f8 <lv_draw_mask_radius+0x5ec>)
    b190:	4798      	blx	r3
    b192:	e7e3      	b.n	b15c <lv_draw_mask_radius+0x450>
                    return LV_DRAW_MASK_RES_TRANSP;
    b194:	2000      	movs	r0, #0
    b196:	e000      	b.n	b19a <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_TRANSP;
    b198:	2000      	movs	r0, #0
}
    b19a:	b00d      	add	sp, #52	; 0x34
    b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    b1a0:	2000      	movs	r0, #0
    b1a2:	e7fa      	b.n	b19a <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_FULL_COVER;
    b1a4:	2001      	movs	r0, #1
    b1a6:	e7f8      	b.n	b19a <lv_draw_mask_radius+0x48e>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    b1a8:	2000      	movs	r0, #0
    b1aa:	e7f6      	b.n	b19a <lv_draw_mask_radius+0x48e>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    b1ac:	2000      	movs	r0, #0
    b1ae:	e7f4      	b.n	b19a <lv_draw_mask_radius+0x48e>
        return LV_DRAW_MASK_RES_CHANGED;
    b1b0:	2002      	movs	r0, #2
    b1b2:	e7f2      	b.n	b19a <lv_draw_mask_radius+0x48e>
        if(radius <= 256) sqrt_mask = 0x800;
    b1b4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    b1b8:	bfd4      	ite	le
    b1ba:	f44f 6300 	movle.w	r3, #2048	; 0x800
    b1be:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    b1c2:	9304      	str	r3, [sp, #16]
            y = radius - (h - abs_y) + 1;
    b1c4:	1a89      	subs	r1, r1, r2
    b1c6:	eba8 0001 	sub.w	r0, r8, r1
    b1ca:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
    b1cc:	696b      	ldr	r3, [r5, #20]
    b1ce:	4298      	cmp	r0, r3
    b1d0:	f47f ae45 	bne.w	ae5e <lv_draw_mask_radius+0x152>
                x1.f = p->y_prev_x.f;
    b1d4:	8b6b      	ldrh	r3, [r5, #26]
    b1d6:	f8ad 301e 	strh.w	r3, [sp, #30]
                x1.i = p->y_prev_x.i;
    b1da:	8b2b      	ldrh	r3, [r5, #24]
    b1dc:	f8ad 301c 	strh.w	r3, [sp, #28]
    b1e0:	e644      	b.n	ae6c <lv_draw_mask_radius+0x160>
        if(radius <= 256) sqrt_mask = 0x800;
    b1e2:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    b1e6:	bfd4      	ite	le
    b1e8:	f44f 6300 	movle.w	r3, #2048	; 0x800
    b1ec:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    b1f0:	9304      	str	r3, [sp, #16]
            y = radius - abs_y;
    b1f2:	eba8 0402 	sub.w	r4, r8, r2
            if(y == p->y_prev) {
    b1f6:	696b      	ldr	r3, [r5, #20]
    b1f8:	429c      	cmp	r4, r3
    b1fa:	f43f ae29 	beq.w	ae50 <lv_draw_mask_radius+0x144>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    b1fe:	9a04      	ldr	r2, [sp, #16]
    b200:	a906      	add	r1, sp, #24
    b202:	9b01      	ldr	r3, [sp, #4]
    b204:	fb04 3014 	mls	r0, r4, r4, r3
    b208:	4b3c      	ldr	r3, [pc, #240]	; (b2fc <lv_draw_mask_radius+0x5f0>)
    b20a:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    b20c:	1e63      	subs	r3, r4, #1
    b20e:	9a04      	ldr	r2, [sp, #16]
    b210:	a907      	add	r1, sp, #28
    b212:	9303      	str	r3, [sp, #12]
    b214:	9801      	ldr	r0, [sp, #4]
    b216:	fb03 0013 	mls	r0, r3, r3, r0
    b21a:	4b38      	ldr	r3, [pc, #224]	; (b2fc <lv_draw_mask_radius+0x5f0>)
    b21c:	4798      	blx	r3
            p->y_prev = y - 1;
    b21e:	9b03      	ldr	r3, [sp, #12]
    b220:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x1.f;
    b222:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    b226:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x1.i;
    b228:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b22c:	832b      	strh	r3, [r5, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
    b22e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    b232:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    b236:	1e51      	subs	r1, r2, #1
    b238:	428b      	cmp	r3, r1
    b23a:	f43f ae26 	beq.w	ae8a <lv_draw_mask_radius+0x17e>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
    b23e:	eba9 0707 	sub.w	r7, r9, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b242:	f10a 0a01 	add.w	sl, sl, #1
    b246:	ebaa 0909 	sub.w	r9, sl, r9
    int32_t w = lv_area_get_width(&rect);
    b24a:	fa0f f989 	sxth.w	r9, r9
        if(x0.i == x1.i) {
    b24e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    b252:	429a      	cmp	r2, r3
    b254:	f43f ae25 	beq.w	aea2 <lv_draw_mask_radius+0x196>
            int32_t ofs = radius - (x0.i + 1);
    b258:	3301      	adds	r3, #1
    b25a:	eba8 0803 	sub.w	r8, r8, r3
            int32_t kl = k + ofs;
    b25e:	eb07 0308 	add.w	r3, r7, r8
    b262:	9303      	str	r3, [sp, #12]
            int32_t kr = k + (w - ofs - 1);
    b264:	eba9 0808 	sub.w	r8, r9, r8
    b268:	f108 3aff 	add.w	sl, r8, #4294967295
    b26c:	44ba      	add	sl, r7
            if(outer) {
    b26e:	b186      	cbz	r6, b292 <lv_draw_mask_radius+0x586>
                int32_t first = kl + 1;
    b270:	1c58      	adds	r0, r3, #1
    b272:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    b276:	45da      	cmp	sl, fp
                int32_t len_tmp = kr - first;
    b278:	bfd4      	ite	le
    b27a:	ebaa 0100 	suble.w	r1, sl, r0
                if(len_tmp + first > len) len_tmp = len - first;
    b27e:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    b282:	4558      	cmp	r0, fp
    b284:	da05      	bge.n	b292 <lv_draw_mask_radius+0x586>
    b286:	2900      	cmp	r1, #0
    b288:	db03      	blt.n	b292 <lv_draw_mask_radius+0x586>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    b28a:	9b02      	ldr	r3, [sp, #8]
    b28c:	4418      	add	r0, r3
    b28e:	4b1a      	ldr	r3, [pc, #104]	; (b2f8 <lv_draw_mask_radius+0x5ec>)
    b290:	4798      	blx	r3
            uint32_t i = x0.i + 1;
    b292:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    b296:	f100 0801 	add.w	r8, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
    b29a:	9a04      	ldr	r2, [sp, #16]
    b29c:	a908      	add	r1, sp, #32
    b29e:	9b01      	ldr	r3, [sp, #4]
    b2a0:	fb00 3010 	mls	r0, r0, r0, r3
    b2a4:	4b15      	ldr	r3, [pc, #84]	; (b2fc <lv_draw_mask_radius+0x5f0>)
    b2a6:	4798      	blx	r3
            if(y_prev.f == 0) {
    b2a8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    b2ac:	b93b      	cbnz	r3, b2be <lv_draw_mask_radius+0x5b2>
                y_prev.i--;
    b2ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b2b2:	3b01      	subs	r3, #1
    b2b4:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
    b2b8:	23ff      	movs	r3, #255	; 0xff
    b2ba:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
    b2be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b2c2:	429c      	cmp	r4, r3
    b2c4:	f77f ae54 	ble.w	af70 <lv_draw_mask_radius+0x264>
            for(; i <= x1.i; i++) {
    b2c8:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    b2cc:	45a8      	cmp	r8, r5
    b2ce:	f63f af05 	bhi.w	b0dc <lv_draw_mask_radius+0x3d0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    b2d2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    b2d6:	ea4f 1909 	mov.w	r9, r9, lsl #4
    b2da:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    b2de:	4641      	mov	r1, r8
    b2e0:	4654      	mov	r4, sl
    b2e2:	9803      	ldr	r0, [sp, #12]
    if(mask_new <= LV_OPA_MIN) return 0;
    b2e4:	f8cd 8010 	str.w	r8, [sp, #16]
    b2e8:	f8cd a014 	str.w	sl, [sp, #20]
    b2ec:	f8dd a004 	ldr.w	sl, [sp, #4]
    b2f0:	9501      	str	r5, [sp, #4]
    b2f2:	f8dd e008 	ldr.w	lr, [sp, #8]
    b2f6:	e69d      	b.n	b034 <lv_draw_mask_radius+0x328>
    b2f8:	00011bdb 	.word	0x00011bdb
    b2fc:	00011479 	.word	0x00011479

0000b300 <lv_draw_mask_add>:
{
    b300:	b410      	push	{r4}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    b302:	4b0d      	ldr	r3, [pc, #52]	; (b338 <lv_draw_mask_add+0x38>)
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	b15b      	cbz	r3, b320 <lv_draw_mask_add+0x20>
    b308:	4a0b      	ldr	r2, [pc, #44]	; (b338 <lv_draw_mask_add+0x38>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b30a:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    b30c:	6894      	ldr	r4, [r2, #8]
    b30e:	b144      	cbz	r4, b322 <lv_draw_mask_add+0x22>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b310:	3301      	adds	r3, #1
    b312:	b2db      	uxtb	r3, r3
    b314:	3208      	adds	r2, #8
    b316:	2b10      	cmp	r3, #16
    b318:	d1f8      	bne.n	b30c <lv_draw_mask_add+0xc>
        return LV_MASK_ID_INV;
    b31a:	f04f 30ff 	mov.w	r0, #4294967295
    b31e:	e007      	b.n	b330 <lv_draw_mask_add+0x30>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b320:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    b322:	4a05      	ldr	r2, [pc, #20]	; (b338 <lv_draw_mask_add+0x38>)
    b324:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
    b328:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b32c:	6051      	str	r1, [r2, #4]
    return i;
    b32e:	b218      	sxth	r0, r3
}
    b330:	f85d 4b04 	ldr.w	r4, [sp], #4
    b334:	4770      	bx	lr
    b336:	bf00      	nop
    b338:	2000ad74 	.word	0x2000ad74

0000b33c <lv_draw_mask_apply>:
{
    b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b340:	b082      	sub	sp, #8
    while(m->param) {
    b342:	4c11      	ldr	r4, [pc, #68]	; (b388 <lv_draw_mask_apply+0x4c>)
    b344:	6824      	ldr	r4, [r4, #0]
    b346:	b1ec      	cbz	r4, b384 <lv_draw_mask_apply+0x48>
    b348:	469a      	mov	sl, r3
    b34a:	4691      	mov	r9, r2
    b34c:	4688      	mov	r8, r1
    b34e:	4607      	mov	r7, r0
    b350:	4e0d      	ldr	r6, [pc, #52]	; (b388 <lv_draw_mask_apply+0x4c>)
    b352:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
    b354:	9400      	str	r4, [sp, #0]
    b356:	6824      	ldr	r4, [r4, #0]
    b358:	4653      	mov	r3, sl
    b35a:	464a      	mov	r2, r9
    b35c:	4641      	mov	r1, r8
    b35e:	4638      	mov	r0, r7
    b360:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
    b362:	4604      	mov	r4, r0
    b364:	b150      	cbz	r0, b37c <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
    b366:	2802      	cmp	r0, #2
    b368:	bf08      	it	eq
    b36a:	2501      	moveq	r5, #1
    while(m->param) {
    b36c:	f856 4f08 	ldr.w	r4, [r6, #8]!
    b370:	2c00      	cmp	r4, #0
    b372:	d1ef      	bne.n	b354 <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    b374:	2d00      	cmp	r5, #0
    b376:	bf14      	ite	ne
    b378:	2402      	movne	r4, #2
    b37a:	2401      	moveq	r4, #1
}
    b37c:	4620      	mov	r0, r4
    b37e:	b002      	add	sp, #8
    b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    b384:	2401      	movs	r4, #1
    b386:	e7f9      	b.n	b37c <lv_draw_mask_apply+0x40>
    b388:	2000ad74 	.word	0x2000ad74

0000b38c <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
    b38c:	f1b0 3fff 	cmp.w	r0, #4294967295
    b390:	d00a      	beq.n	b3a8 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
    b392:	4b06      	ldr	r3, [pc, #24]	; (b3ac <lv_draw_mask_remove_id+0x20>)
    b394:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
    b398:	2200      	movs	r2, #0
    b39a:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
    b39e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    b3a2:	605a      	str	r2, [r3, #4]
}
    b3a4:	4608      	mov	r0, r1
    b3a6:	4770      	bx	lr
    void * p = NULL;
    b3a8:	2100      	movs	r1, #0
    return p;
    b3aa:	e7fb      	b.n	b3a4 <lv_draw_mask_remove_id+0x18>
    b3ac:	2000ad74 	.word	0x2000ad74

0000b3b0 <lv_draw_mask_remove_custom>:
{
    b3b0:	b470      	push	{r4, r5, r6}
    b3b2:	4b0b      	ldr	r3, [pc, #44]	; (b3e0 <lv_draw_mask_remove_custom+0x30>)
    b3b4:	1d1a      	adds	r2, r3, #4
    b3b6:	f103 0480 	add.w	r4, r3, #128	; 0x80
    void * p = NULL;
    b3ba:	2600      	movs	r6, #0
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    b3bc:	4635      	mov	r5, r6
    b3be:	e003      	b.n	b3c8 <lv_draw_mask_remove_custom+0x18>
    b3c0:	3308      	adds	r3, #8
    b3c2:	3208      	adds	r2, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b3c4:	42a3      	cmp	r3, r4
    b3c6:	d008      	beq.n	b3da <lv_draw_mask_remove_custom+0x2a>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
    b3c8:	6859      	ldr	r1, [r3, #4]
    b3ca:	4281      	cmp	r1, r0
    b3cc:	d1f8      	bne.n	b3c0 <lv_draw_mask_remove_custom+0x10>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
    b3ce:	f852 6c04 	ldr.w	r6, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    b3d2:	f842 5c04 	str.w	r5, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
    b3d6:	605d      	str	r5, [r3, #4]
    b3d8:	e7f2      	b.n	b3c0 <lv_draw_mask_remove_custom+0x10>
}
    b3da:	4630      	mov	r0, r6
    b3dc:	bc70      	pop	{r4, r5, r6}
    b3de:	4770      	bx	lr
    b3e0:	2000ad74 	.word	0x2000ad74

0000b3e4 <lv_draw_mask_get_cnt>:
{
    b3e4:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    b3e6:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    b3e8:	4906      	ldr	r1, [pc, #24]	; (b404 <lv_draw_mask_get_cnt+0x20>)
    b3ea:	e002      	b.n	b3f2 <lv_draw_mask_get_cnt+0xe>
    b3ec:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    b3ee:	2b10      	cmp	r3, #16
    b3f0:	d006      	beq.n	b400 <lv_draw_mask_get_cnt+0x1c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    b3f2:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
    b3f6:	2a00      	cmp	r2, #0
    b3f8:	d0f8      	beq.n	b3ec <lv_draw_mask_get_cnt+0x8>
    b3fa:	3001      	adds	r0, #1
    b3fc:	b2c0      	uxtb	r0, r0
    b3fe:	e7f5      	b.n	b3ec <lv_draw_mask_get_cnt+0x8>
}
    b400:	4770      	bx	lr
    b402:	bf00      	nop
    b404:	2000ad74 	.word	0x2000ad74

0000b408 <lv_draw_mask_line_points_init>:
{
    b408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b40c:	4604      	mov	r4, r0
    b40e:	460f      	mov	r7, r1
    b410:	4615      	mov	r5, r2
    b412:	4698      	mov	r8, r3
    b414:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
    b418:	212c      	movs	r1, #44	; 0x2c
    b41a:	4b4a      	ldr	r3, [pc, #296]	; (b544 <lv_draw_mask_line_points_init+0x13c>)
    b41c:	4798      	blx	r3
    if(p1y > p2y) {
    b41e:	42b5      	cmp	r5, r6
    b420:	dd05      	ble.n	b42e <lv_draw_mask_line_points_init+0x26>
    b422:	462b      	mov	r3, r5
        p1y = t;
    b424:	4635      	mov	r5, r6
        p2y = p1y;
    b426:	461e      	mov	r6, r3
    if(p1y > p2y) {
    b428:	463b      	mov	r3, r7
        p1x = t;
    b42a:	4647      	mov	r7, r8
        p2x = p1x;
    b42c:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
    b42e:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
    b430:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
    b432:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
    b436:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
    b438:	7c23      	ldrb	r3, [r4, #16]
    b43a:	f89d 201c 	ldrb.w	r2, [sp, #28]
    b43e:	f362 0301 	bfi	r3, r2, #0, #2
    b442:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
    b444:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
    b446:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
    b448:	eba8 0707 	sub.w	r7, r8, r7
    b44c:	1b75      	subs	r5, r6, r5
    b44e:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
    b452:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
    b456:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
    b45a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
    b45e:	4299      	cmp	r1, r3
    b460:	bfd4      	ite	le
    b462:	2100      	movle	r1, #0
    b464:	2101      	movgt	r1, #1
    b466:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    b46a:	f361 0200 	bfi	r2, r1, #0, #1
    b46e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
    b472:	2100      	movs	r1, #0
    b474:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
    b476:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
    b478:	4b33      	ldr	r3, [pc, #204]	; (b548 <lv_draw_mask_line_points_init+0x140>)
    b47a:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
    b47c:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
    b47e:	f012 0f01 	tst.w	r2, #1
    b482:	d025      	beq.n	b4d0 <lv_draw_mask_line_points_init+0xc8>
        if(dx) {
    b484:	b13f      	cbz	r7, b496 <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
    b486:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    b48a:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
    b48e:	fb05 f303 	mul.w	r3, r5, r3
    b492:	129b      	asrs	r3, r3, #10
    b494:	61e3      	str	r3, [r4, #28]
        if(dy) {
    b496:	b13d      	cbz	r5, b4a8 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    b498:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    b49c:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
    b4a0:	fb07 f705 	mul.w	r7, r7, r5
    b4a4:	12bf      	asrs	r7, r7, #10
    b4a6:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
    b4a8:	69e3      	ldr	r3, [r4, #28]
    b4aa:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
    b4ac:	7c23      	ldrb	r3, [r4, #16]
    b4ae:	f013 0303 	ands.w	r3, r3, #3
    b4b2:	d122      	bne.n	b4fa <lv_draw_mask_line_points_init+0xf2>
    b4b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b4b8:	f36f 0341 	bfc	r3, #1, #1
    b4bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
    b4c0:	6a23      	ldr	r3, [r4, #32]
    b4c2:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
    b4c4:	2b00      	cmp	r3, #0
    b4c6:	bfb8      	it	lt
    b4c8:	4252      	neglt	r2, r2
    b4ca:	6262      	str	r2, [r4, #36]	; 0x24
    b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
    b4d0:	b13d      	cbz	r5, b4e2 <lv_draw_mask_line_points_init+0xda>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    b4d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    b4d6:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
    b4da:	fb07 f303 	mul.w	r3, r7, r3
    b4de:	129b      	asrs	r3, r3, #10
    b4e0:	61a3      	str	r3, [r4, #24]
        if(dx) {
    b4e2:	b13f      	cbz	r7, b4f4 <lv_draw_mask_line_points_init+0xec>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
    b4e4:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
    b4e8:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
    b4ec:	fb05 f507 	mul.w	r5, r5, r7
    b4f0:	12ad      	asrs	r5, r5, #10
    b4f2:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
    b4f4:	69a3      	ldr	r3, [r4, #24]
    b4f6:	6223      	str	r3, [r4, #32]
    b4f8:	e7d8      	b.n	b4ac <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    b4fa:	2b01      	cmp	r3, #1
    b4fc:	d00f      	beq.n	b51e <lv_draw_mask_line_points_init+0x116>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
    b4fe:	2b02      	cmp	r3, #2
    b500:	d014      	beq.n	b52c <lv_draw_mask_line_points_init+0x124>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
    b502:	2b03      	cmp	r3, #3
    b504:	d1dc      	bne.n	b4c0 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
    b506:	6a23      	ldr	r3, [r4, #32]
    b508:	2b00      	cmp	r3, #0
    b50a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b50e:	bfcc      	ite	gt
    b510:	f36f 0341 	bfcgt	r3, #1, #1
        else param->inv = 1;
    b514:	f043 0302 	orrle.w	r3, r3, #2
    b518:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    b51c:	e7d0      	b.n	b4c0 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    b51e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b522:	f043 0302 	orr.w	r3, r3, #2
    b526:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    b52a:	e7c9      	b.n	b4c0 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
    b52c:	6a23      	ldr	r3, [r4, #32]
    b52e:	2b00      	cmp	r3, #0
    b530:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b534:	bfcc      	ite	gt
    b536:	f043 0302 	orrgt.w	r3, r3, #2
        else param->inv = 0;
    b53a:	f36f 0341 	bfcle	r3, #1, #1
    b53e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    b542:	e7bd      	b.n	b4c0 <lv_draw_mask_line_points_init+0xb8>
    b544:	00011bdb 	.word	0x00011bdb
    b548:	0000a761 	.word	0x0000a761

0000b54c <lv_draw_mask_radius_init>:
{
    b54c:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b54e:	88cc      	ldrh	r4, [r1, #6]
    b550:	3401      	adds	r4, #1
    b552:	884d      	ldrh	r5, [r1, #2]
    b554:	1b64      	subs	r4, r4, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b556:	888d      	ldrh	r5, [r1, #4]
    b558:	3501      	adds	r5, #1
    b55a:	880e      	ldrh	r6, [r1, #0]
    b55c:	1bad      	subs	r5, r5, r6
    int32_t short_side = LV_MATH_MIN(w, h);
    b55e:	b224      	sxth	r4, r4
    b560:	b22d      	sxth	r5, r5
    b562:	42ac      	cmp	r4, r5
    b564:	bfa8      	it	ge
    b566:	462c      	movge	r4, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
    b568:	1064      	asrs	r4, r4, #1
    b56a:	42a2      	cmp	r2, r4
    b56c:	bfc8      	it	gt
    b56e:	b222      	sxthgt	r2, r4
    b570:	3901      	subs	r1, #1
    b572:	f100 0610 	add.w	r6, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
    b576:	f100 0408 	add.w	r4, r0, #8
        *d8 = *s8;
    b57a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b57e:	f804 5b01 	strb.w	r5, [r4], #1
    while(len) {
    b582:	42b4      	cmp	r4, r6
    b584:	d1f9      	bne.n	b57a <lv_draw_mask_radius_init+0x2e>
    param->cfg.radius = radius;
    b586:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
    b588:	7c82      	ldrb	r2, [r0, #18]
    b58a:	f363 0200 	bfi	r2, r3, #0, #1
    b58e:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    b590:	4b05      	ldr	r3, [pc, #20]	; (b5a8 <lv_draw_mask_radius_init+0x5c>)
    b592:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
    b594:	2302      	movs	r3, #2
    b596:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
    b598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b59c:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
    b59e:	2300      	movs	r3, #0
    b5a0:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
    b5a2:	8303      	strh	r3, [r0, #24]
}
    b5a4:	bc70      	pop	{r4, r5, r6}
    b5a6:	4770      	bx	lr
    b5a8:	0000ad0d 	.word	0x0000ad0d

0000b5ac <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
    b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5b0:	b08b      	sub	sp, #44	; 0x2c
    b5b2:	9006      	str	r0, [sp, #24]
    b5b4:	4689      	mov	r9, r1
    b5b6:	9207      	str	r2, [sp, #28]
    int32_t s_left = sw >> 1;
    b5b8:	ea4f 0b61 	mov.w	fp, r1, asr #1
    b5bc:	f8cd b008 	str.w	fp, [sp, #8]
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
    b5c0:	f011 0f01 	tst.w	r1, #1
    b5c4:	bf06      	itte	eq
    b5c6:	f10b 33ff 	addeq.w	r3, fp, #4294967295
    b5ca:	9308      	streq	r3, [sp, #32]
    int32_t s_left = sw >> 1;
    b5cc:	f8cd b020 	strne.w	fp, [sp, #32]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
    b5d0:	9c06      	ldr	r4, [sp, #24]
    b5d2:	0067      	lsls	r7, r4, #1
    b5d4:	4638      	mov	r0, r7
    b5d6:	4b69      	ldr	r3, [pc, #420]	; (b77c <shadow_blur_corner+0x1d0>)
    b5d8:	4798      	blx	r3
    b5da:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
    b5dc:	2c00      	cmp	r4, #0
    b5de:	f340 80be 	ble.w	b75e <shadow_blur_corner+0x1b2>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    b5e2:	1eba      	subs	r2, r7, #2
    b5e4:	19c1      	adds	r1, r0, r7
    b5e6:	9103      	str	r1, [sp, #12]
    b5e8:	9d07      	ldr	r5, [sp, #28]
    b5ea:	f04f 0800 	mov.w	r8, #0
        for(x = size - 1; x >= 0; x--) {
    b5ee:	f104 3aff 	add.w	sl, r4, #4294967295
    b5f2:	9908      	ldr	r1, [sp, #32]
    b5f4:	ebaa 0101 	sub.w	r1, sl, r1
    b5f8:	9104      	str	r1, [sp, #16]
    b5fa:	4606      	mov	r6, r0
    b5fc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    b600:	4693      	mov	fp, r2
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    b602:	f8cd 9004 	str.w	r9, [sp, #4]
    b606:	f835 300b 	ldrh.w	r3, [r5, fp]
    b60a:	fb09 f303 	mul.w	r3, r9, r3
        for(x = size - 1; x >= 0; x--) {
    b60e:	f1ba 0f00 	cmp.w	sl, #0
    b612:	db1b      	blt.n	b64c <shadow_blur_corner+0xa0>
    b614:	9a02      	ldr	r2, [sp, #8]
    b616:	eb02 010a 	add.w	r1, r2, sl
    b61a:	9a04      	ldr	r2, [sp, #16]
    b61c:	3a01      	subs	r2, #1
    b61e:	9803      	ldr	r0, [sp, #12]
    b620:	f04f 0e00 	mov.w	lr, #0
            sh_ups_blur_buf[x] = v;
    b624:	f820 3d02 	strh.w	r3, [r0, #-2]!

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
    b628:	428c      	cmp	r4, r1
    b62a:	bfcc      	ite	gt
    b62c:	f835 c011 	ldrhgt.w	ip, [r5, r1, lsl #1]
    b630:	46f4      	movle	ip, lr
            v -= right_val;
    b632:	eba3 030c 	sub.w	r3, r3, ip

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
    b636:	2a00      	cmp	r2, #0
    b638:	bfb4      	ite	lt
    b63a:	f8b5 c000 	ldrhlt.w	ip, [r5]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
    b63e:	f835 c012 	ldrhge.w	ip, [r5, r2, lsl #1]
            v += left_val;
    b642:	4463      	add	r3, ip
    b644:	3901      	subs	r1, #1
    b646:	3a01      	subs	r2, #1
        for(x = size - 1; x >= 0; x--) {
    b648:	42b0      	cmp	r0, r6
    b64a:	d1eb      	bne.n	b624 <shadow_blur_corner+0x78>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
    b64c:	463a      	mov	r2, r7
    b64e:	4631      	mov	r1, r6
    b650:	4628      	mov	r0, r5
    b652:	4b4b      	ldr	r3, [pc, #300]	; (b780 <shadow_blur_corner+0x1d4>)
    b654:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    b656:	443d      	add	r5, r7
    for(y = 0; y < size; y++) {
    b658:	f108 0801 	add.w	r8, r8, #1
    b65c:	45a0      	cmp	r8, r4
    b65e:	d1d0      	bne.n	b602 <shadow_blur_corner+0x56>
    b660:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    b664:	9a07      	ldr	r2, [sp, #28]
    b666:	8813      	ldrh	r3, [r2, #0]
    b668:	9901      	ldr	r1, [sp, #4]
    b66a:	fb93 f3f1 	sdiv	r3, r3, r1
    b66e:	8013      	strh	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    b670:	9b06      	ldr	r3, [sp, #24]
    b672:	fb03 f503 	mul.w	r5, r3, r3
    b676:	2d01      	cmp	r5, #1
    b678:	d911      	bls.n	b69e <shadow_blur_corner+0xf2>
    b67a:	9a07      	ldr	r2, [sp, #28]
    b67c:	2101      	movs	r1, #1
    b67e:	9e01      	ldr	r6, [sp, #4]
    b680:	4610      	mov	r0, r2
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
    b682:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    b686:	8800      	ldrh	r0, [r0, #0]
    b688:	4298      	cmp	r0, r3
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    b68a:	bf1c      	itt	ne
    b68c:	fb93 f3f6 	sdivne	r3, r3, r6
    b690:	8013      	strhne	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    b692:	3101      	adds	r1, #1
    b694:	42a9      	cmp	r1, r5
    b696:	d3f3      	bcc.n	b680 <shadow_blur_corner+0xd4>
    }

    for(x = 0; x < size; x++) {
    b698:	9b06      	ldr	r3, [sp, #24]
    b69a:	2b00      	cmp	r3, #0
    b69c:	dd59      	ble.n	b752 <shadow_blur_corner+0x1a6>
    b69e:	9e07      	ldr	r6, [sp, #28]
    b6a0:	9602      	str	r6, [sp, #8]
    b6a2:	9908      	ldr	r1, [sp, #32]
    b6a4:	fb01 7207 	mla	r2, r1, r7, r7
    b6a8:	ea6f 030b 	mvn.w	r3, fp
    b6ac:	1a5b      	subs	r3, r3, r1
    b6ae:	9d06      	ldr	r5, [sp, #24]
    b6b0:	fb05 f303 	mul.w	r3, r5, r3
    b6b4:	9306      	str	r3, [sp, #24]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    b6b6:	1e6b      	subs	r3, r5, #1
    b6b8:	fb05 f303 	mul.w	r3, r5, r3
    b6bc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    b6c0:	9307      	str	r3, [sp, #28]
    b6c2:	f04f 0a00 	mov.w	sl, #0
    b6c6:	1e93      	subs	r3, r2, #2
    b6c8:	9308      	str	r3, [sp, #32]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    b6ca:	f101 0901 	add.w	r9, r1, #1
        sh_ups_tmp_buf = &sh_ups_buf[x];
    b6ce:	9b02      	ldr	r3, [sp, #8]
    b6d0:	461e      	mov	r6, r3
    b6d2:	3302      	adds	r3, #2
    b6d4:	461a      	mov	r2, r3
    b6d6:	9302      	str	r3, [sp, #8]
        int32_t v = sh_ups_tmp_buf[0] * sw;
    b6d8:	8833      	ldrh	r3, [r6, #0]
    b6da:	9901      	ldr	r1, [sp, #4]
    b6dc:	fb01 f303 	mul.w	r3, r1, r3
    b6e0:	9908      	ldr	r1, [sp, #32]
    b6e2:	188d      	adds	r5, r1, r2
    b6e4:	9a05      	ldr	r2, [sp, #20]
    b6e6:	f1a2 0c02 	sub.w	ip, r2, #2
    b6ea:	46e0      	mov	r8, ip
    b6ec:	46b6      	mov	lr, r6
    b6ee:	2200      	movs	r2, #0
    b6f0:	f8cd c00c 	str.w	ip, [sp, #12]
    b6f4:	9604      	str	r6, [sp, #16]
    b6f6:	9e06      	ldr	r6, [sp, #24]
    b6f8:	f8dd c01c 	ldr.w	ip, [sp, #28]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSACALE_SHIFT);
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	bfac      	ite	ge
    b700:	1199      	asrge	r1, r3, #6
    b702:	2100      	movlt	r1, #0
    b704:	f828 1f02 	strh.w	r1, [r8, #2]!
    b708:	4611      	mov	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
    b70a:	eba2 000b 	sub.w	r0, r2, fp
    b70e:	2800      	cmp	r0, #0
    b710:	bfd4      	ite	le
    b712:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
    b716:	f835 0016 	ldrhgt.w	r0, [r5, r6, lsl #1]
            v -= top_val;
    b71a:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    b71c:	4449      	add	r1, r9
    b71e:	428c      	cmp	r4, r1
    b720:	bfcc      	ite	gt
    b722:	8829      	ldrhgt	r1, [r5, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    b724:	f83c 101a 	ldrhle.w	r1, [ip, sl, lsl #1]
            v += bottom_val;
    b728:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
    b72a:	3201      	adds	r2, #1
    b72c:	44be      	add	lr, r7
    b72e:	443d      	add	r5, r7
    b730:	42a2      	cmp	r2, r4
    b732:	dbe3      	blt.n	b6fc <shadow_blur_corner+0x150>
    b734:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b738:	9e04      	ldr	r6, [sp, #16]
    b73a:	2300      	movs	r3, #0
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
    b73c:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
    b740:	8032      	strh	r2, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
    b742:	3301      	adds	r3, #1
    b744:	443e      	add	r6, r7
    b746:	42a3      	cmp	r3, r4
    b748:	dbf8      	blt.n	b73c <shadow_blur_corner+0x190>
    for(x = 0; x < size; x++) {
    b74a:	f10a 0a01 	add.w	sl, sl, #1
    b74e:	45a2      	cmp	sl, r4
    b750:	dbbd      	blt.n	b6ce <shadow_blur_corner+0x122>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
    b752:	9805      	ldr	r0, [sp, #20]
    b754:	4b0b      	ldr	r3, [pc, #44]	; (b784 <shadow_blur_corner+0x1d8>)
    b756:	4798      	blx	r3
}
    b758:	b00b      	add	sp, #44	; 0x2c
    b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    b75e:	f8cd 9004 	str.w	r9, [sp, #4]
    b762:	9a07      	ldr	r2, [sp, #28]
    b764:	8813      	ldrh	r3, [r2, #0]
    b766:	fb93 f9f9 	sdiv	r9, r3, r9
    b76a:	f8a2 9000 	strh.w	r9, [r2]
    for(i = 1; i < (uint32_t)size * size; i++) {
    b76e:	9b06      	ldr	r3, [sp, #24]
    b770:	fb03 f503 	mul.w	r5, r3, r3
    b774:	2d01      	cmp	r5, #1
    b776:	d880      	bhi.n	b67a <shadow_blur_corner+0xce>
    b778:	e7eb      	b.n	b752 <shadow_blur_corner+0x1a6>
    b77a:	bf00      	nop
    b77c:	00011a29 	.word	0x00011a29
    b780:	00011769 	.word	0x00011769
    b784:	000116a9 	.word	0x000116a9

0000b788 <lv_draw_rect_dsc_init>:
{
    b788:	b510      	push	{r4, lr}
    b78a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    b78c:	2154      	movs	r1, #84	; 0x54
    b78e:	4b2d      	ldr	r3, [pc, #180]	; (b844 <lv_draw_rect_dsc_init+0xbc>)
    b790:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
    b792:	4b2d      	ldr	r3, [pc, #180]	; (b848 <lv_draw_rect_dsc_init+0xc0>)
    b794:	881b      	ldrh	r3, [r3, #0]
    b796:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
    b798:	7923      	ldrb	r3, [r4, #4]
    b79a:	f36f 0304 	bfc	r3, #0, #5
    b79e:	7123      	strb	r3, [r4, #4]
    b7a0:	88a3      	ldrh	r3, [r4, #4]
    b7a2:	f36f 134a 	bfc	r3, #5, #6
    b7a6:	80a3      	strh	r3, [r4, #4]
    b7a8:	0a1b      	lsrs	r3, r3, #8
    b7aa:	f36f 03c7 	bfc	r3, #3, #5
    b7ae:	7163      	strb	r3, [r4, #5]
    dsc->border_color = LV_COLOR_BLACK;
    b7b0:	7ba3      	ldrb	r3, [r4, #14]
    b7b2:	f36f 0304 	bfc	r3, #0, #5
    b7b6:	73a3      	strb	r3, [r4, #14]
    b7b8:	89e3      	ldrh	r3, [r4, #14]
    b7ba:	f36f 134a 	bfc	r3, #5, #6
    b7be:	81e3      	strh	r3, [r4, #14]
    b7c0:	0a1b      	lsrs	r3, r3, #8
    b7c2:	f36f 03c7 	bfc	r3, #3, #5
    b7c6:	73e3      	strb	r3, [r4, #15]
    dsc->pattern_recolor = LV_COLOR_BLACK;
    b7c8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    b7cc:	f36f 0304 	bfc	r3, #0, #5
    b7d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    b7d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    b7d6:	f36f 134a 	bfc	r3, #5, #6
    b7da:	86a3      	strh	r3, [r4, #52]	; 0x34
    b7dc:	0a1b      	lsrs	r3, r3, #8
    b7de:	f36f 03c7 	bfc	r3, #3, #5
    b7e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    dsc->value_color = LV_COLOR_BLACK;
    b7e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    b7ea:	f36f 0304 	bfc	r3, #0, #5
    b7ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    b7f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    b7f6:	f36f 134a 	bfc	r3, #5, #6
    b7fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    b7fe:	0a1b      	lsrs	r3, r3, #8
    b800:	f36f 03c7 	bfc	r3, #3, #5
    b804:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    dsc->shadow_color = LV_COLOR_BLACK;
    b808:	7fa3      	ldrb	r3, [r4, #30]
    b80a:	f36f 0304 	bfc	r3, #0, #5
    b80e:	77a3      	strb	r3, [r4, #30]
    b810:	8be3      	ldrh	r3, [r4, #30]
    b812:	f36f 134a 	bfc	r3, #5, #6
    b816:	83e3      	strh	r3, [r4, #30]
    b818:	0a1b      	lsrs	r3, r3, #8
    b81a:	f36f 03c7 	bfc	r3, #3, #5
    b81e:	77e3      	strb	r3, [r4, #31]
    dsc->bg_grad_color_stop = 0xFF;
    b820:	23ff      	movs	r3, #255	; 0xff
    b822:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
    b824:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
    b826:	7723      	strb	r3, [r4, #28]
    dsc->border_opa = LV_OPA_COVER;
    b828:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
    b82a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
    b82e:	4a07      	ldr	r2, [pc, #28]	; (b84c <lv_draw_rect_dsc_init+0xc4>)
    b830:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
    b832:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    b836:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
    b838:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    dsc->border_side = LV_BORDER_SIDE_FULL;
    b83c:	230f      	movs	r3, #15
    b83e:	8263      	strh	r3, [r4, #18]
    b840:	bd10      	pop	{r4, pc}
    b842:	bf00      	nop
    b844:	00011bdb 	.word	0x00011bdb
    b848:	00017780 	.word	0x00017780
    b84c:	20000010 	.word	0x20000010

0000b850 <lv_draw_rect>:
{
    b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b854:	b0b1      	sub	sp, #196	; 0xc4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b856:	88c4      	ldrh	r4, [r0, #6]
    b858:	8845      	ldrh	r5, [r0, #2]
    b85a:	1c63      	adds	r3, r4, #1
    b85c:	1b5b      	subs	r3, r3, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    b85e:	b21b      	sxth	r3, r3
    b860:	2b00      	cmp	r3, #0
    b862:	f341 800f 	ble.w	c884 <lv_draw_rect+0x1034>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b866:	8886      	ldrh	r6, [r0, #4]
    b868:	f8b0 8000 	ldrh.w	r8, [r0]
    b86c:	1c73      	adds	r3, r6, #1
    b86e:	eba3 0308 	sub.w	r3, r3, r8
    b872:	b21b      	sxth	r3, r3
    b874:	2b00      	cmp	r3, #0
    b876:	f341 8005 	ble.w	c884 <lv_draw_rect+0x1034>
    b87a:	4692      	mov	sl, r2
    b87c:	9104      	str	r1, [sp, #16]
    b87e:	9006      	str	r0, [sp, #24]
    if(dsc->shadow_width == 0) return;
    b880:	f9b2 7020 	ldrsh.w	r7, [r2, #32]
    b884:	2f00      	cmp	r7, #0
    b886:	f000 8719 	beq.w	c6bc <lv_draw_rect+0xe6c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
    b88a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    b88e:	9309      	str	r3, [sp, #36]	; 0x24
    b890:	2b05      	cmp	r3, #5
    b892:	f240 8713 	bls.w	c6bc <lv_draw_rect+0xe6c>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    b896:	6a13      	ldr	r3, [r2, #32]
    b898:	2b01      	cmp	r3, #1
    b89a:	f000 80f6 	beq.w	ba8a <lv_draw_rect+0x23a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
    b89e:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
    b8a2:	f8ba 3026 	ldrh.w	r3, [sl, #38]	; 0x26
    b8a6:	1ad1      	subs	r1, r2, r3
    b8a8:	4488      	add	r8, r1
    b8aa:	fa1f f888 	uxth.w	r8, r8
    b8ae:	f8ad 8050 	strh.w	r8, [sp, #80]	; 0x50
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
    b8b2:	441a      	add	r2, r3
    b8b4:	4416      	add	r6, r2
    b8b6:	b2b6      	uxth	r6, r6
    b8b8:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
    b8bc:	f8ba 2024 	ldrh.w	r2, [sl, #36]	; 0x24
    b8c0:	1ad1      	subs	r1, r2, r3
    b8c2:	440d      	add	r5, r1
    b8c4:	b2ad      	uxth	r5, r5
    b8c6:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
    b8ca:	4413      	add	r3, r2
    b8cc:	441c      	add	r4, r3
    b8ce:	b2a4      	uxth	r4, r4
    b8d0:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
    b8d4:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
    b8d8:	ea6f 0263 	mvn.w	r2, r3, asr #1
    b8dc:	b292      	uxth	r2, r2
    b8de:	eb08 0102 	add.w	r1, r8, r2
    b8e2:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
    b8e6:	105b      	asrs	r3, r3, #1
    b8e8:	3301      	adds	r3, #1
    b8ea:	b29b      	uxth	r3, r3
    b8ec:	18f1      	adds	r1, r6, r3
    b8ee:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
    b8f2:	442a      	add	r2, r5
    b8f4:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
    b8f8:	4423      	add	r3, r4
    b8fa:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    b8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b900:	2bfb      	cmp	r3, #251	; 0xfb
    b902:	bf28      	it	cs
    b904:	23ff      	movcs	r3, #255	; 0xff
    b906:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    b908:	4bbe      	ldr	r3, [pc, #760]	; (bc04 <lv_draw_rect+0x3b4>)
    b90a:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    b90c:	4bbe      	ldr	r3, [pc, #760]	; (bc08 <lv_draw_rect+0x3b8>)
    b90e:	4798      	blx	r3
    b910:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
    b912:	9a04      	ldr	r2, [sp, #16]
    b914:	a916      	add	r1, sp, #88	; 0x58
    b916:	a818      	add	r0, sp, #96	; 0x60
    b918:	4bbc      	ldr	r3, [pc, #752]	; (bc0c <lv_draw_rect+0x3bc>)
    b91a:	4798      	blx	r3
    if(is_common == false) return;
    b91c:	2800      	cmp	r0, #0
    b91e:	f000 86cd 	beq.w	c6bc <lv_draw_rect+0xe6c>
    draw_area.x1 -= disp_area->x1;
    b922:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    b926:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    b92a:	1a5b      	subs	r3, r3, r1
    b92c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    b930:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    b934:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    b938:	1a9b      	subs	r3, r3, r2
    b93a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    b93e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    b942:	1a5b      	subs	r3, r3, r1
    b944:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    b948:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    b94c:	1a9b      	subs	r3, r3, r2
    b94e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    b952:	9a06      	ldr	r2, [sp, #24]
    b954:	1e53      	subs	r3, r2, #1
    b956:	1dd0      	adds	r0, r2, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    b958:	aa1a      	add	r2, sp, #104	; 0x68
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    b95a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    b95e:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    b962:	4298      	cmp	r0, r3
    b964:	d1f9      	bne.n	b95a <lv_draw_rect+0x10a>
    bg_coords.x1 += 1;
    b966:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    b96a:	3301      	adds	r3, #1
    b96c:	fa1f fe83 	uxth.w	lr, r3
    b970:	f8ad e068 	strh.w	lr, [sp, #104]	; 0x68
    bg_coords.y1 += 1;
    b974:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    b978:	3101      	adds	r1, #1
    b97a:	b288      	uxth	r0, r1
    b97c:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    bg_coords.x2 -= 1;
    b980:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    b984:	1e5a      	subs	r2, r3, #1
    b986:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    bg_coords.y2 -= 1;
    b98a:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    b98e:	1e4a      	subs	r2, r1, #1
    b990:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    int32_t r_bg = dsc->radius;
    b994:	f9ba 2000 	ldrsh.w	r2, [sl]
    b998:	eba3 030e 	sub.w	r3, r3, lr
    b99c:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b99e:	1a09      	subs	r1, r1, r0
    b9a0:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
    b9a2:	428b      	cmp	r3, r1
    b9a4:	bfa8      	it	ge
    b9a6:	460b      	movge	r3, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
    b9a8:	105b      	asrs	r3, r3, #1
    b9aa:	4293      	cmp	r3, r2
    b9ac:	bfa8      	it	ge
    b9ae:	4613      	movge	r3, r2
    b9b0:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b9b2:	3601      	adds	r6, #1
    b9b4:	eba6 0608 	sub.w	r6, r6, r8
    b9b8:	b2b6      	uxth	r6, r6
    b9ba:	b233      	sxth	r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b9bc:	3401      	adds	r4, #1
    b9be:	1b64      	subs	r4, r4, r5
    b9c0:	b2a4      	uxth	r4, r4
    b9c2:	b225      	sxth	r5, r4
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
    b9c4:	429d      	cmp	r5, r3
    b9c6:	bfa8      	it	ge
    b9c8:	461d      	movge	r5, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
    b9ca:	106d      	asrs	r5, r5, #1
    b9cc:	4295      	cmp	r5, r2
    b9ce:	bfa8      	it	ge
    b9d0:	4615      	movge	r5, r2
    int32_t corner_size = sw  + r_sh;
    b9d2:	eb07 0905 	add.w	r9, r7, r5
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
    b9d6:	fb09 f009 	mul.w	r0, r9, r9
    b9da:	0040      	lsls	r0, r0, #1
    b9dc:	4b8c      	ldr	r3, [pc, #560]	; (bc10 <lv_draw_rect+0x3c0>)
    b9de:	4798      	blx	r3
    b9e0:	900a      	str	r0, [sp, #40]	; 0x28
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
    b9e2:	f9ba b020 	ldrsh.w	fp, [sl, #32]
    b9e6:	b22a      	sxth	r2, r5
    int32_t size = sw_ori  + r;
    b9e8:	eb02 070b 	add.w	r7, r2, fp
    b9ec:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
    uint8_t * d8 = (uint8_t *)dst;
    b9f0:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    b9f2:	f10d 0e90 	add.w	lr, sp, #144	; 0x90
        *d8 = *s8;
    b9f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b9fa:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    b9fe:	4573      	cmp	r3, lr
    ba00:	d1f9      	bne.n	b9f6 <lv_draw_rect+0x1a6>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
    ba02:	eb0b 71db 	add.w	r1, fp, fp, lsr #31
    ba06:	f3c1 014f 	ubfx	r1, r1, #1, #16
    ba0a:	1e4b      	subs	r3, r1, #1
    ba0c:	f01b 0001 	ands.w	r0, fp, #1
    ba10:	9010      	str	r0, [sp, #64]	; 0x40
    ba12:	bf0c      	ite	eq
    ba14:	2001      	moveq	r0, #1
    ba16:	2000      	movne	r0, #0
    ba18:	1a1b      	subs	r3, r3, r0
    ba1a:	442b      	add	r3, r5
    ba1c:	b29b      	uxth	r3, r3
    ba1e:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    sh_area.y1 = sw / 2 + 1;
    ba22:	3101      	adds	r1, #1
    ba24:	b289      	uxth	r1, r1
    ba26:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
    ba2a:	1b9b      	subs	r3, r3, r6
    ba2c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
    ba30:	4421      	add	r1, r4
    ba32:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
    ba36:	2300      	movs	r3, #0
    ba38:	a922      	add	r1, sp, #136	; 0x88
    ba3a:	a829      	add	r0, sp, #164	; 0xa4
    ba3c:	4c75      	ldr	r4, [pc, #468]	; (bc14 <lv_draw_rect+0x3c4>)
    ba3e:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
    ba40:	f1bb 0f01 	cmp.w	fp, #1
    ba44:	f002 81ba 	beq.w	ddbc <lv_draw_rect+0x256c>
    ba48:	ea4f 036b 	mov.w	r3, fp, asr #1
    ba4c:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    ba4e:	9707      	str	r7, [sp, #28]
    ba50:	4638      	mov	r0, r7
    ba52:	4b6f      	ldr	r3, [pc, #444]	; (bc10 <lv_draw_rect+0x3c0>)
    ba54:	4798      	blx	r3
    ba56:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    ba58:	2f00      	cmp	r7, #0
    ba5a:	dd5c      	ble.n	bb16 <lv_draw_rect+0x2c6>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    ba5c:	9b07      	ldr	r3, [sp, #28]
    ba5e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    ba62:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    ba66:	3b01      	subs	r3, #1
    ba68:	005b      	lsls	r3, r3, #1
    ba6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ba6c:	2500      	movs	r5, #0
        _lv_memset_ff(mask_line, size);
    ba6e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; bc28 <lv_draw_rect+0x3d8>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    ba72:	b23a      	sxth	r2, r7
    ba74:	9208      	str	r2, [sp, #32]
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    ba76:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    ba7a:	9705      	str	r7, [sp, #20]
    ba7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ba7e:	4699      	mov	r9, r3
    ba80:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    ba84:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    ba88:	e014      	b.n	bab4 <lv_draw_rect+0x264>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    ba8a:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
    ba8e:	2b00      	cmp	r3, #0
    ba90:	f47f af05 	bne.w	b89e <lv_draw_rect+0x4e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
    ba94:	f9b2 3026 	ldrsh.w	r3, [r2, #38]	; 0x26
    ba98:	2b00      	cmp	r3, #0
    ba9a:	f73f af00 	bgt.w	b89e <lv_draw_rect+0x4e>
    ba9e:	f000 be0d 	b.w	c6bc <lv_draw_rect+0xe6c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    baa2:	4659      	mov	r1, fp
    baa4:	4620      	mov	r0, r4
    baa6:	4b5c      	ldr	r3, [pc, #368]	; (bc18 <lv_draw_rect+0x3c8>)
    baa8:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    baaa:	445c      	add	r4, fp
    for(y = 0; y < size; y++) {
    baac:	3501      	adds	r5, #1
    baae:	9b05      	ldr	r3, [sp, #20]
    bab0:	42ab      	cmp	r3, r5
    bab2:	dd2b      	ble.n	bb0c <lv_draw_rect+0x2bc>
        _lv_memset_ff(mask_line, size);
    bab4:	9907      	ldr	r1, [sp, #28]
    bab6:	4630      	mov	r0, r6
    bab8:	47c0      	blx	r8
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    baba:	ab29      	add	r3, sp, #164	; 0xa4
    babc:	9300      	str	r3, [sp, #0]
    babe:	9b08      	ldr	r3, [sp, #32]
    bac0:	b22a      	sxth	r2, r5
    bac2:	2100      	movs	r1, #0
    bac4:	4630      	mov	r0, r6
    bac6:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    bac8:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    baca:	2800      	cmp	r0, #0
    bacc:	d0e9      	beq.n	baa2 <lv_draw_rect+0x252>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSACALE_SHIFT) / sw;
    bace:	46d6      	mov	lr, sl
    bad0:	7833      	ldrb	r3, [r6, #0]
    bad2:	019b      	lsls	r3, r3, #6
    bad4:	fb93 f3fa 	sdiv	r3, r3, sl
    bad8:	8023      	strh	r3, [r4, #0]
            for(i = 1; i < size; i++) {
    bada:	9b05      	ldr	r3, [sp, #20]
    badc:	2b01      	cmp	r3, #1
    bade:	dde4      	ble.n	baaa <lv_draw_rect+0x25a>
    bae0:	4631      	mov	r1, r6
    bae2:	4622      	mov	r2, r4
    bae4:	eb04 0009 	add.w	r0, r4, r9
    bae8:	461f      	mov	r7, r3
    baea:	468c      	mov	ip, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
    baec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    baf0:	f89c c000 	ldrb.w	ip, [ip]
    baf4:	459c      	cmp	ip, r3
    baf6:	bf0e      	itee	eq
    baf8:	8813      	ldrheq	r3, [r2, #0]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
    bafa:	019b      	lslne	r3, r3, #6
    bafc:	fb93 f3fe 	sdivne	r3, r3, lr
    bb00:	8053      	strh	r3, [r2, #2]
    bb02:	3202      	adds	r2, #2
            for(i = 1; i < size; i++) {
    bb04:	4282      	cmp	r2, r0
    bb06:	d1f0      	bne.n	baea <lv_draw_rect+0x29a>
    bb08:	9705      	str	r7, [sp, #20]
    bb0a:	e7ce      	b.n	baaa <lv_draw_rect+0x25a>
    bb0c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    bb10:	461f      	mov	r7, r3
    bb12:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    _lv_mem_buf_release(mask_line);
    bb16:	980c      	ldr	r0, [sp, #48]	; 0x30
    bb18:	4b40      	ldr	r3, [pc, #256]	; (bc1c <lv_draw_rect+0x3cc>)
    bb1a:	4798      	blx	r3
    if(sw == 1) {
    bb1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb1e:	2b01      	cmp	r3, #1
    bb20:	f002 812f 	beq.w	dd82 <lv_draw_rect+0x2532>
    shadow_blur_corner(size, sw, sh_buf);
    bb24:	b23c      	sxth	r4, r7
    bb26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    bb28:	4632      	mov	r2, r6
    bb2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    bb2c:	4629      	mov	r1, r5
    bb2e:	4620      	mov	r0, r4
    bb30:	4b3b      	ldr	r3, [pc, #236]	; (bc20 <lv_draw_rect+0x3d0>)
    bb32:	4798      	blx	r3
    sw += sw_ori & 1;
    bb34:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bb36:	442a      	add	r2, r5
    bb38:	b211      	sxth	r1, r2
    if(sw > 1) {
    bb3a:	2901      	cmp	r1, #1
    bb3c:	dd22      	ble.n	bb84 <lv_draw_rect+0x334>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
    bb3e:	460d      	mov	r5, r1
    bb40:	8833      	ldrh	r3, [r6, #0]
    bb42:	019b      	lsls	r3, r3, #6
    bb44:	fb93 f3f1 	sdiv	r3, r3, r1
    bb48:	4632      	mov	r2, r6
    bb4a:	8033      	strh	r3, [r6, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
    bb4c:	9807      	ldr	r0, [sp, #28]
    bb4e:	fb00 f000 	mul.w	r0, r0, r0
    bb52:	2801      	cmp	r0, #1
    bb54:	d912      	bls.n	bb7c <lv_draw_rect+0x32c>
    bb56:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    bb5a:	3801      	subs	r0, #1
    bb5c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    bb60:	e001      	b.n	bb66 <lv_draw_rect+0x316>
    bb62:	4282      	cmp	r2, r0
    bb64:	d00a      	beq.n	bb7c <lv_draw_rect+0x32c>
    bb66:	4616      	mov	r6, r2
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
    bb68:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    bb6c:	8836      	ldrh	r6, [r6, #0]
    bb6e:	429e      	cmp	r6, r3
    bb70:	d0f7      	beq.n	bb62 <lv_draw_rect+0x312>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
    bb72:	019b      	lsls	r3, r3, #6
    bb74:	fb93 f3f5 	sdiv	r3, r3, r5
    bb78:	8013      	strh	r3, [r2, #0]
    bb7a:	e7f2      	b.n	bb62 <lv_draw_rect+0x312>
        shadow_blur_corner(size, sw, sh_buf);
    bb7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bb7e:	4620      	mov	r0, r4
    bb80:	4b27      	ldr	r3, [pc, #156]	; (bc20 <lv_draw_rect+0x3d0>)
    bb82:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
    bb84:	fb07 f707 	mul.w	r7, r7, r7
    bb88:	b157      	cbz	r7, bba0 <lv_draw_rect+0x350>
    bb8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb8c:	460b      	mov	r3, r1
    bb8e:	1e4a      	subs	r2, r1, #1
    bb90:	eb01 0047 	add.w	r0, r1, r7, lsl #1
        res_buf[x] = sh_buf[x];
    bb94:	f833 1b02 	ldrh.w	r1, [r3], #2
    bb98:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
    bb9c:	4298      	cmp	r0, r3
    bb9e:	d1f9      	bne.n	bb94 <lv_draw_rect+0x344>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
    bba0:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    bba4:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    bba8:	3301      	adds	r3, #1
    bbaa:	1a9b      	subs	r3, r3, r2
    bbac:	b21b      	sxth	r3, r3
    bbae:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bbb2:	eb02 0363 	add.w	r3, r2, r3, asr #1
    bbb6:	b29b      	uxth	r3, r3
    bbb8:	930f      	str	r3, [sp, #60]	; 0x3c
    bbba:	b21b      	sxth	r3, r3
    bbbc:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
    bbbe:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bbc2:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    bbc6:	3301      	adds	r3, #1
    bbc8:	1a9b      	subs	r3, r3, r2
    bbca:	b21b      	sxth	r3, r3
    bbcc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bbd0:	eb02 0363 	add.w	r3, r2, r3, asr #1
    bbd4:	b29b      	uxth	r3, r3
    bbd6:	9310      	str	r3, [sp, #64]	; 0x40
    bbd8:	b21b      	sxth	r3, r3
    bbda:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    bbdc:	4b11      	ldr	r3, [pc, #68]	; (bc24 <lv_draw_rect+0x3d4>)
    bbde:	4798      	blx	r3
    bbe0:	bb20      	cbnz	r0, bc2c <lv_draw_rect+0x3dc>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    bbe2:	f9ba 3022 	ldrsh.w	r3, [sl, #34]	; 0x22
    bbe6:	2b00      	cmp	r3, #0
    bbe8:	f040 81bc 	bne.w	bf64 <lv_draw_rect+0x714>
    bbec:	f9ba 3024 	ldrsh.w	r3, [sl, #36]	; 0x24
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	f040 81ba 	bne.w	bf6a <lv_draw_rect+0x71a>
    else if(dsc->shadow_spread != 0) simple_mode = false;
    bbf6:	f9ba 3026 	ldrsh.w	r3, [sl, #38]	; 0x26
    bbfa:	fab3 f383 	clz	r3, r3
    bbfe:	095b      	lsrs	r3, r3, #5
    bc00:	9307      	str	r3, [sp, #28]
    bc02:	e015      	b.n	bc30 <lv_draw_rect+0x3e0>
    bc04:	0000574d 	.word	0x0000574d
    bc08:	00010221 	.word	0x00010221
    bc0c:	000106dd 	.word	0x000106dd
    bc10:	00011a29 	.word	0x00011a29
    bc14:	0000b54d 	.word	0x0000b54d
    bc18:	00011bdb 	.word	0x00011bdb
    bc1c:	000116a9 	.word	0x000116a9
    bc20:	0000b5ad 	.word	0x0000b5ad
    bc24:	0000b3e5 	.word	0x0000b3e5
    bc28:	00011c91 	.word	0x00011c91
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    bc2c:	2300      	movs	r3, #0
    bc2e:	9307      	str	r3, [sp, #28]
    bc30:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    bc34:	3001      	adds	r0, #1
    bc36:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    bc3a:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
    bc3c:	b200      	sxth	r0, r0
    bc3e:	4bc2      	ldr	r3, [pc, #776]	; (bf48 <lv_draw_rect+0x6f8>)
    bc40:	4798      	blx	r3
    bc42:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
    bc44:	2301      	movs	r3, #1
    bc46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bc48:	a91a      	add	r1, sp, #104	; 0x68
    bc4a:	a829      	add	r0, sp, #164	; 0xa4
    bc4c:	4cbf      	ldr	r4, [pc, #764]	; (bf4c <lv_draw_rect+0x6fc>)
    bc4e:	47a0      	blx	r4
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    bc50:	2100      	movs	r1, #0
    bc52:	a829      	add	r0, sp, #164	; 0xa4
    bc54:	4bbe      	ldr	r3, [pc, #760]	; (bf50 <lv_draw_rect+0x700>)
    bc56:	4798      	blx	r3
    bc58:	900e      	str	r0, [sp, #56]	; 0x38
    a.x2 = sh_area.x2;
    bc5a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    bc5e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    bc62:	fa1f fb89 	uxth.w	fp, r9
    bc66:	3301      	adds	r3, #1
    bc68:	eba3 030b 	sub.w	r3, r3, fp
    bc6c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1;
    bc70:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    bc74:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    bc78:	3b01      	subs	r3, #1
    bc7a:	445b      	add	r3, fp
    bc7c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    bool has_com = _lv_area_intersect(&ca, &a, clip);
    bc80:	9a04      	ldr	r2, [sp, #16]
    bc82:	a91c      	add	r1, sp, #112	; 0x70
    bc84:	a81e      	add	r0, sp, #120	; 0x78
    bc86:	4bb3      	ldr	r3, [pc, #716]	; (bf54 <lv_draw_rect+0x704>)
    bc88:	4798      	blx	r3
    if(has_com) {
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d072      	beq.n	bd74 <lv_draw_rect+0x524>
        if(ca.y2 > h_half) ca.y2 = h_half;
    bc8e:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    bc92:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc94:	428b      	cmp	r3, r1
    bc96:	bfc4      	itt	gt
    bc98:	460b      	movgt	r3, r1
    bc9a:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    bc9e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    bca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bca4:	4293      	cmp	r3, r2
    bca6:	dc03      	bgt.n	bcb0 <lv_draw_rect+0x460>
    bca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bcaa:	3301      	adds	r3, #1
    bcac:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    bcb0:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    bcb4:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    bcb8:	3301      	adds	r3, #1
    bcba:	1a9b      	subs	r3, r3, r2
    bcbc:	b21b      	sxth	r3, r3
    bcbe:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	dd57      	ble.n	bd74 <lv_draw_rect+0x524>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    bcc4:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    bcc8:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    bccc:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    bcd0:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    bcd2:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    bcd6:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    bcd8:	fb09 2505 	mla	r5, r9, r5, r2
    bcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bcde:	441d      	add	r5, r3
    bce0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    bce4:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    bce6:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    bce8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    bcec:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    bcf0:	4283      	cmp	r3, r0
    bcf2:	d1f9      	bne.n	bce8 <lv_draw_rect+0x498>
            fa.y2 = fa.y1;
    bcf4:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bcf8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    bcfc:	3701      	adds	r7, #1
    bcfe:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    bd00:	b23f      	sxth	r7, r7
    bd02:	2f00      	cmp	r7, #0
    bd04:	dd36      	ble.n	bd74 <lv_draw_rect+0x524>
    bd06:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    bd08:	f8df 8254 	ldr.w	r8, [pc, #596]	; bf60 <lv_draw_rect+0x710>
    bd0c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    bd10:	46bb      	mov	fp, r7
    bd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bd14:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    bd16:	9a08      	ldr	r2, [sp, #32]
    bd18:	4629      	mov	r1, r5
    bd1a:	9f05      	ldr	r7, [sp, #20]
    bd1c:	4638      	mov	r0, r7
    bd1e:	4c8e      	ldr	r4, [pc, #568]	; (bf58 <lv_draw_rect+0x708>)
    bd20:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    bd22:	ac30      	add	r4, sp, #192	; 0xc0
    bd24:	9b08      	ldr	r3, [sp, #32]
    bd26:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    bd2a:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    bd2e:	9705      	str	r7, [sp, #20]
    bd30:	4638      	mov	r0, r7
    bd32:	4f8a      	ldr	r7, [pc, #552]	; (bf5c <lv_draw_rect+0x70c>)
    bd34:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    bd36:	2801      	cmp	r0, #1
    bd38:	bf08      	it	eq
    bd3a:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    bd3c:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    bd40:	9302      	str	r3, [sp, #8]
    bd42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bd44:	9201      	str	r2, [sp, #4]
    bd46:	9000      	str	r0, [sp, #0]
    bd48:	9b05      	ldr	r3, [sp, #20]
    bd4a:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    bd4e:	4621      	mov	r1, r4
    bd50:	9804      	ldr	r0, [sp, #16]
    bd52:	47c0      	blx	r8
                fa.y1++;
    bd54:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bd58:	3301      	adds	r3, #1
    bd5a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    bd5e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    bd62:	3301      	adds	r3, #1
    bd64:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    bd68:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    bd6a:	3601      	adds	r6, #1
    bd6c:	455e      	cmp	r6, fp
    bd6e:	d1d2      	bne.n	bd16 <lv_draw_rect+0x4c6>
    bd70:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    a.x2 = sh_area.x2;
    bd74:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    bd78:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    bd7c:	3301      	adds	r3, #1
    bd7e:	eba3 030b 	sub.w	r3, r3, fp
    bd82:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
    bd86:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    bd8a:	1c53      	adds	r3, r2, #1
    bd8c:	eba3 030b 	sub.w	r3, r3, fp
    bd90:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    bd94:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    bd98:	9a04      	ldr	r2, [sp, #16]
    bd9a:	a91c      	add	r1, sp, #112	; 0x70
    bd9c:	a81e      	add	r0, sp, #120	; 0x78
    bd9e:	4b6d      	ldr	r3, [pc, #436]	; (bf54 <lv_draw_rect+0x704>)
    bda0:	4798      	blx	r3
    if(has_com) {
    bda2:	2800      	cmp	r0, #0
    bda4:	d073      	beq.n	be8e <lv_draw_rect+0x63e>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    bda6:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    bdaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bdac:	4293      	cmp	r3, r2
    bdae:	dc03      	bgt.n	bdb8 <lv_draw_rect+0x568>
    bdb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bdb2:	3301      	adds	r3, #1
    bdb4:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    bdb8:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    bdbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bdbe:	4293      	cmp	r3, r2
    bdc0:	dc03      	bgt.n	bdca <lv_draw_rect+0x57a>
    bdc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bdc4:	3301      	adds	r3, #1
    bdc6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bdca:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    bdce:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    bdd2:	3301      	adds	r3, #1
    bdd4:	1a9b      	subs	r3, r3, r2
    bdd6:	b21b      	sxth	r3, r3
    bdd8:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    bdda:	2b00      	cmp	r3, #0
    bddc:	dd57      	ble.n	be8e <lv_draw_rect+0x63e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    bdde:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    bde2:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    bde6:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    bdea:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    bdec:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    bdf0:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    bdf2:	fb09 2505 	mla	r5, r9, r5, r2
    bdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdf8:	441d      	add	r5, r3
    bdfa:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    bdfe:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    be00:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    be02:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    be06:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    be0a:	4283      	cmp	r3, r0
    be0c:	d1f9      	bne.n	be02 <lv_draw_rect+0x5b2>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    be0e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    be12:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    be16:	1c67      	adds	r7, r4, #1
    be18:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    be1a:	b23f      	sxth	r7, r7
    be1c:	2f00      	cmp	r7, #0
    be1e:	dd36      	ble.n	be8e <lv_draw_rect+0x63e>
    be20:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    be22:	f8df 813c 	ldr.w	r8, [pc, #316]	; bf60 <lv_draw_rect+0x710>
    be26:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    be2a:	46bb      	mov	fp, r7
    be2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be2e:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    be30:	9a08      	ldr	r2, [sp, #32]
    be32:	4629      	mov	r1, r5
    be34:	9f05      	ldr	r7, [sp, #20]
    be36:	4638      	mov	r0, r7
    be38:	4c47      	ldr	r4, [pc, #284]	; (bf58 <lv_draw_rect+0x708>)
    be3a:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    be3c:	ac30      	add	r4, sp, #192	; 0xc0
    be3e:	9b08      	ldr	r3, [sp, #32]
    be40:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    be44:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    be48:	9705      	str	r7, [sp, #20]
    be4a:	4638      	mov	r0, r7
    be4c:	4f43      	ldr	r7, [pc, #268]	; (bf5c <lv_draw_rect+0x70c>)
    be4e:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    be50:	2801      	cmp	r0, #1
    be52:	bf08      	it	eq
    be54:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    be56:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    be5a:	9302      	str	r3, [sp, #8]
    be5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    be5e:	9201      	str	r2, [sp, #4]
    be60:	9000      	str	r0, [sp, #0]
    be62:	9b05      	ldr	r3, [sp, #20]
    be64:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    be68:	4621      	mov	r1, r4
    be6a:	9804      	ldr	r0, [sp, #16]
    be6c:	47c0      	blx	r8
                fa.y1--;
    be6e:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    be72:	3b01      	subs	r3, #1
    be74:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    be78:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    be7c:	3b01      	subs	r3, #1
    be7e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    be82:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    be84:	3601      	adds	r6, #1
    be86:	455e      	cmp	r6, fp
    be88:	d1d2      	bne.n	be30 <lv_draw_rect+0x5e0>
    be8a:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x2 = sh_area.x2;
    be8e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    be92:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    be96:	3301      	adds	r3, #1
    be98:	eba3 030b 	sub.w	r3, r3, fp
    be9c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1 + corner_size;
    bea0:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    bea4:	445b      	add	r3, fp
    bea6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    beaa:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    beae:	eba3 030b 	sub.w	r3, r3, fp
    beb2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    beb6:	9a04      	ldr	r2, [sp, #16]
    beb8:	a91c      	add	r1, sp, #112	; 0x70
    beba:	a81e      	add	r0, sp, #120	; 0x78
    bebc:	4b25      	ldr	r3, [pc, #148]	; (bf54 <lv_draw_rect+0x704>)
    bebe:	4798      	blx	r3
    if(has_com) {
    bec0:	2800      	cmp	r0, #0
    bec2:	f000 8085 	beq.w	bfd0 <lv_draw_rect+0x780>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
    bec6:	9b07      	ldr	r3, [sp, #28]
    bec8:	b14b      	cbz	r3, bede <lv_draw_rect+0x68e>
    beca:	9b06      	ldr	r3, [sp, #24]
    becc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    bed0:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    bed4:	4293      	cmp	r3, r2
    bed6:	bfb8      	it	lt
    bed8:	4613      	movlt	r3, r2
    beda:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bede:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    bee2:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    bee6:	3201      	adds	r2, #1
    bee8:	1ad2      	subs	r2, r2, r3
    beea:	fa0f f882 	sxth.w	r8, r2
        if(w > 0) {
    beee:	f1b8 0f00 	cmp.w	r8, #0
    bef2:	dd6d      	ble.n	bfd0 <lv_draw_rect+0x780>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    bef4:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    bef8:	3401      	adds	r4, #1
    befa:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    befe:	1aa4      	subs	r4, r4, r2
    bf00:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    bf02:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    bf06:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    bf0a:	1a9b      	subs	r3, r3, r2
    bf0c:	fb09 3301 	mla	r3, r9, r1, r3
    bf10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf12:	18d3      	adds	r3, r2, r3
    bf14:	9308      	str	r3, [sp, #32]
    bf16:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    bf1a:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    bf1c:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    bf1e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    bf22:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    bf26:	4283      	cmp	r3, r0
    bf28:	d1f9      	bne.n	bf1e <lv_draw_rect+0x6ce>
            fa.y2 = fa.y1;
    bf2a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bf2e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    bf32:	4625      	mov	r5, r4
    bf34:	2c00      	cmp	r4, #0
    bf36:	dd4b      	ble.n	bfd0 <lv_draw_rect+0x780>
    bf38:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    bf3a:	4f07      	ldr	r7, [pc, #28]	; (bf58 <lv_draw_rect+0x708>)
                _lv_blend_fill(clip, &fa,
    bf3c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    bf40:	46a9      	mov	r9, r5
    bf42:	9d07      	ldr	r5, [sp, #28]
    bf44:	e03a      	b.n	bfbc <lv_draw_rect+0x76c>
    bf46:	bf00      	nop
    bf48:	00011a29 	.word	0x00011a29
    bf4c:	0000b54d 	.word	0x0000b54d
    bf50:	0000b301 	.word	0x0000b301
    bf54:	000106dd 	.word	0x000106dd
    bf58:	00011769 	.word	0x00011769
    bf5c:	0000b33d 	.word	0x0000b33d
    bf60:	00006dc9 	.word	0x00006dc9
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    bf64:	2300      	movs	r3, #0
    bf66:	9307      	str	r3, [sp, #28]
    bf68:	e662      	b.n	bc30 <lv_draw_rect+0x3e0>
    bf6a:	2300      	movs	r3, #0
    bf6c:	9307      	str	r3, [sp, #28]
    bf6e:	e65f      	b.n	bc30 <lv_draw_rect+0x3e0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    bf70:	4643      	mov	r3, r8
    bf72:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    bf76:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    bf7a:	9805      	ldr	r0, [sp, #20]
    bf7c:	4e23      	ldr	r6, [pc, #140]	; (c00c <lv_draw_rect+0x7bc>)
    bf7e:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    bf80:	2801      	cmp	r0, #1
    bf82:	bf08      	it	eq
    bf84:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    bf86:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    bf8a:	9302      	str	r3, [sp, #8]
    bf8c:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    bf90:	9301      	str	r3, [sp, #4]
    bf92:	9000      	str	r0, [sp, #0]
    bf94:	9b05      	ldr	r3, [sp, #20]
    bf96:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    bf9a:	a922      	add	r1, sp, #136	; 0x88
    bf9c:	9804      	ldr	r0, [sp, #16]
    bf9e:	4e1c      	ldr	r6, [pc, #112]	; (c010 <lv_draw_rect+0x7c0>)
    bfa0:	47b0      	blx	r6
                fa.y1++;
    bfa2:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    bfa6:	3301      	adds	r3, #1
    bfa8:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    bfac:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    bfb0:	3301      	adds	r3, #1
    bfb2:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    bfb6:	3401      	adds	r4, #1
    bfb8:	454c      	cmp	r4, r9
    bfba:	d007      	beq.n	bfcc <lv_draw_rect+0x77c>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    bfbc:	4642      	mov	r2, r8
    bfbe:	9908      	ldr	r1, [sp, #32]
    bfc0:	9805      	ldr	r0, [sp, #20]
    bfc2:	47b8      	blx	r7
                if(simple_mode) {
    bfc4:	2d00      	cmp	r5, #0
    bfc6:	d0d3      	beq.n	bf70 <lv_draw_rect+0x720>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    bfc8:	2002      	movs	r0, #2
    bfca:	e7dc      	b.n	bf86 <lv_draw_rect+0x736>
    bfcc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    for(y = 0; y < corner_size; y++) {
    bfd0:	f1b9 0f00 	cmp.w	r9, #0
    bfd4:	dd1e      	ble.n	c014 <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    bfd6:	eb09 77d9 	add.w	r7, r9, r9, lsr #31
    bfda:	107f      	asrs	r7, r7, #1
    bfdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    bfde:	2600      	movs	r6, #0
    bfe0:	e00c      	b.n	bffc <lv_draw_rect+0x7ac>
            lv_opa_t tmp = sh_buf_tmp[x];
    bfe2:	7819      	ldrb	r1, [r3, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
    bfe4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    bfe8:	f803 0b01 	strb.w	r0, [r3], #1
            sh_buf_tmp[corner_size - x - 1] = tmp;
    bfec:	f802 1d01 	strb.w	r1, [r2, #-1]!
        for(x = 0; x < corner_size / 2; x++) {
    bff0:	42a3      	cmp	r3, r4
    bff2:	d1f6      	bne.n	bfe2 <lv_draw_rect+0x792>
    bff4:	444d      	add	r5, r9
    for(y = 0; y < corner_size; y++) {
    bff6:	3601      	adds	r6, #1
    bff8:	45b1      	cmp	r9, r6
    bffa:	d00b      	beq.n	c014 <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    bffc:	2f00      	cmp	r7, #0
    bffe:	d0f9      	beq.n	bff4 <lv_draw_rect+0x7a4>
    c000:	462b      	mov	r3, r5
    c002:	eb05 0209 	add.w	r2, r5, r9
    c006:	19ec      	adds	r4, r5, r7
    c008:	e7eb      	b.n	bfe2 <lv_draw_rect+0x792>
    c00a:	bf00      	nop
    c00c:	0000b33d 	.word	0x0000b33d
    c010:	00006dc9 	.word	0x00006dc9
    a.x1 = sh_area.x1;
    c014:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    c018:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    c01c:	3b01      	subs	r3, #1
    c01e:	445b      	add	r3, fp
    c020:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    c024:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    c028:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    c02c:	3b01      	subs	r3, #1
    c02e:	445b      	add	r3, fp
    c030:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c034:	9a04      	ldr	r2, [sp, #16]
    c036:	a91c      	add	r1, sp, #112	; 0x70
    c038:	a81e      	add	r0, sp, #120	; 0x78
    c03a:	4bae      	ldr	r3, [pc, #696]	; (c2f4 <lv_draw_rect+0xaa4>)
    c03c:	4798      	blx	r3
    if(has_com) {
    c03e:	2800      	cmp	r0, #0
    c040:	d071      	beq.n	c126 <lv_draw_rect+0x8d6>
        if(ca.y2 > h_half) ca.y2 = h_half;
    c042:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    c046:	990c      	ldr	r1, [sp, #48]	; 0x30
    c048:	428b      	cmp	r3, r1
    c04a:	bfc4      	itt	gt
    c04c:	460b      	movgt	r3, r1
    c04e:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x2 > w_half) ca.x2 = w_half;
    c052:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    c056:	990d      	ldr	r1, [sp, #52]	; 0x34
    c058:	428b      	cmp	r3, r1
    c05a:	bfc4      	itt	gt
    c05c:	460b      	movgt	r3, r1
    c05e:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c062:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c066:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c06a:	3301      	adds	r3, #1
    c06c:	1a9b      	subs	r3, r3, r2
    c06e:	b21b      	sxth	r3, r3
    c070:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    c072:	2b00      	cmp	r3, #0
    c074:	dd57      	ble.n	c126 <lv_draw_rect+0x8d6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c076:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    c07a:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c07e:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    c082:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    c084:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    c088:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c08a:	fb09 2505 	mla	r5, r9, r5, r2
    c08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c090:	441d      	add	r5, r3
    c092:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c096:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c098:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c09a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c09e:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c0a2:	4283      	cmp	r3, r0
    c0a4:	d1f9      	bne.n	c09a <lv_draw_rect+0x84a>
            fa.y2 = fa.y1;
    c0a6:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c0aa:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c0ae:	3701      	adds	r7, #1
    c0b0:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    c0b2:	b23f      	sxth	r7, r7
    c0b4:	2f00      	cmp	r7, #0
    c0b6:	dd36      	ble.n	c126 <lv_draw_rect+0x8d6>
    c0b8:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c0ba:	f8df 8244 	ldr.w	r8, [pc, #580]	; c300 <lv_draw_rect+0xab0>
    c0be:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    c0c2:	46bb      	mov	fp, r7
    c0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0c6:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c0c8:	9a08      	ldr	r2, [sp, #32]
    c0ca:	4629      	mov	r1, r5
    c0cc:	9f05      	ldr	r7, [sp, #20]
    c0ce:	4638      	mov	r0, r7
    c0d0:	4c89      	ldr	r4, [pc, #548]	; (c2f8 <lv_draw_rect+0xaa8>)
    c0d2:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c0d4:	ac30      	add	r4, sp, #192	; 0xc0
    c0d6:	9b08      	ldr	r3, [sp, #32]
    c0d8:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c0dc:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c0e0:	9705      	str	r7, [sp, #20]
    c0e2:	4638      	mov	r0, r7
    c0e4:	4f85      	ldr	r7, [pc, #532]	; (c2fc <lv_draw_rect+0xaac>)
    c0e6:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c0e8:	2801      	cmp	r0, #1
    c0ea:	bf08      	it	eq
    c0ec:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c0ee:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c0f2:	9302      	str	r3, [sp, #8]
    c0f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c0f6:	9201      	str	r2, [sp, #4]
    c0f8:	9000      	str	r0, [sp, #0]
    c0fa:	9b05      	ldr	r3, [sp, #20]
    c0fc:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c100:	4621      	mov	r1, r4
    c102:	9804      	ldr	r0, [sp, #16]
    c104:	47c0      	blx	r8
                fa.y1++;
    c106:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c10a:	3301      	adds	r3, #1
    c10c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    c110:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c114:	3301      	adds	r3, #1
    c116:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c11a:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    c11c:	3601      	adds	r6, #1
    c11e:	455e      	cmp	r6, fp
    c120:	d1d2      	bne.n	c0c8 <lv_draw_rect+0x878>
    c122:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x1 = sh_area.x1;
    c126:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    c12a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    c12e:	3b01      	subs	r3, #1
    c130:	445b      	add	r3, fp
    c132:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    c136:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    c13a:	1c53      	adds	r3, r2, #1
    c13c:	eba3 030b 	sub.w	r3, r3, fp
    c140:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    c144:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c148:	9a04      	ldr	r2, [sp, #16]
    c14a:	a91c      	add	r1, sp, #112	; 0x70
    c14c:	a81e      	add	r0, sp, #120	; 0x78
    c14e:	4b69      	ldr	r3, [pc, #420]	; (c2f4 <lv_draw_rect+0xaa4>)
    c150:	4798      	blx	r3
    if(has_com) {
    c152:	2800      	cmp	r0, #0
    c154:	d072      	beq.n	c23c <lv_draw_rect+0x9ec>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    c156:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    c15a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c15c:	4293      	cmp	r3, r2
    c15e:	dc03      	bgt.n	c168 <lv_draw_rect+0x918>
    c160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c162:	3301      	adds	r3, #1
    c164:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x2 > w_half) ca.x2 = w_half;
    c168:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    c16c:	990d      	ldr	r1, [sp, #52]	; 0x34
    c16e:	428b      	cmp	r3, r1
    c170:	bfc4      	itt	gt
    c172:	460b      	movgt	r3, r1
    c174:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c178:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    c17c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c180:	3301      	adds	r3, #1
    c182:	1a9b      	subs	r3, r3, r2
    c184:	b21b      	sxth	r3, r3
    c186:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    c188:	2b00      	cmp	r3, #0
    c18a:	dd57      	ble.n	c23c <lv_draw_rect+0x9ec>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c18c:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    c190:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c194:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    c198:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    c19a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    c19e:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c1a0:	fb09 2505 	mla	r5, r9, r5, r2
    c1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c1a6:	441d      	add	r5, r3
    c1a8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c1ac:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c1ae:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c1b0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c1b4:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c1b8:	4283      	cmp	r3, r0
    c1ba:	d1f9      	bne.n	c1b0 <lv_draw_rect+0x960>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    c1bc:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c1c0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    c1c4:	1c67      	adds	r7, r4, #1
    c1c6:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    c1c8:	b23f      	sxth	r7, r7
    c1ca:	2f00      	cmp	r7, #0
    c1cc:	dd36      	ble.n	c23c <lv_draw_rect+0x9ec>
    c1ce:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c1d0:	f8df 812c 	ldr.w	r8, [pc, #300]	; c300 <lv_draw_rect+0xab0>
    c1d4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    c1d8:	46bb      	mov	fp, r7
    c1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1dc:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c1de:	9a08      	ldr	r2, [sp, #32]
    c1e0:	4629      	mov	r1, r5
    c1e2:	9f05      	ldr	r7, [sp, #20]
    c1e4:	4638      	mov	r0, r7
    c1e6:	4c44      	ldr	r4, [pc, #272]	; (c2f8 <lv_draw_rect+0xaa8>)
    c1e8:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c1ea:	ac30      	add	r4, sp, #192	; 0xc0
    c1ec:	9b08      	ldr	r3, [sp, #32]
    c1ee:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c1f2:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c1f6:	9705      	str	r7, [sp, #20]
    c1f8:	4638      	mov	r0, r7
    c1fa:	4f40      	ldr	r7, [pc, #256]	; (c2fc <lv_draw_rect+0xaac>)
    c1fc:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c1fe:	2801      	cmp	r0, #1
    c200:	bf08      	it	eq
    c202:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c204:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c208:	9302      	str	r3, [sp, #8]
    c20a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c20c:	9201      	str	r2, [sp, #4]
    c20e:	9000      	str	r0, [sp, #0]
    c210:	9b05      	ldr	r3, [sp, #20]
    c212:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c216:	4621      	mov	r1, r4
    c218:	9804      	ldr	r0, [sp, #16]
    c21a:	47c0      	blx	r8
                fa.y1--;
    c21c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c220:	3b01      	subs	r3, #1
    c222:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    c226:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c22a:	3b01      	subs	r3, #1
    c22c:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    c230:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    c232:	3601      	adds	r6, #1
    c234:	455e      	cmp	r6, fp
    c236:	d1d2      	bne.n	c1de <lv_draw_rect+0x98e>
    c238:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1;
    c23c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    c240:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    c244:	3b01      	subs	r3, #1
    c246:	445b      	add	r3, fp
    c248:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    c24c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c250:	445b      	add	r3, fp
    c252:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    c256:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c25a:	eba3 030b 	sub.w	r3, r3, fp
    c25e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c262:	9a04      	ldr	r2, [sp, #16]
    c264:	a91c      	add	r1, sp, #112	; 0x70
    c266:	a81e      	add	r0, sp, #120	; 0x78
    c268:	4b22      	ldr	r3, [pc, #136]	; (c2f4 <lv_draw_rect+0xaa4>)
    c26a:	4798      	blx	r3
    if(has_com) {
    c26c:	2800      	cmp	r0, #0
    c26e:	d079      	beq.n	c364 <lv_draw_rect+0xb14>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
    c270:	9b07      	ldr	r3, [sp, #28]
    c272:	b14b      	cbz	r3, c288 <lv_draw_rect+0xa38>
    c274:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    c278:	9a06      	ldr	r2, [sp, #24]
    c27a:	f9b2 2000 	ldrsh.w	r2, [r2]
    c27e:	4293      	cmp	r3, r2
    c280:	bfa8      	it	ge
    c282:	4613      	movge	r3, r2
    c284:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c288:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    c28c:	f8bd 807c 	ldrh.w	r8, [sp, #124]	; 0x7c
    c290:	f108 0801 	add.w	r8, r8, #1
    c294:	eba8 0803 	sub.w	r8, r8, r3
    c298:	fa0f f888 	sxth.w	r8, r8
        if(w > 0) {
    c29c:	f1b8 0f00 	cmp.w	r8, #0
    c2a0:	dd60      	ble.n	c364 <lv_draw_rect+0xb14>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c2a2:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    c2a6:	3401      	adds	r4, #1
    c2a8:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    c2ac:	1aa4      	subs	r4, r4, r2
    c2ae:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    c2b0:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    c2b4:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    c2b8:	1a9b      	subs	r3, r3, r2
    c2ba:	fb09 3301 	mla	r3, r9, r1, r3
    c2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c2c0:	18d3      	adds	r3, r2, r3
    c2c2:	9308      	str	r3, [sp, #32]
    c2c4:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c2c8:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c2ca:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c2cc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c2d0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c2d4:	4283      	cmp	r3, r0
    c2d6:	d1f9      	bne.n	c2cc <lv_draw_rect+0xa7c>
            fa.y2 = fa.y1;
    c2d8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c2dc:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    c2e0:	4625      	mov	r5, r4
    c2e2:	2c00      	cmp	r4, #0
    c2e4:	dd3e      	ble.n	c364 <lv_draw_rect+0xb14>
    c2e6:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c2e8:	4f03      	ldr	r7, [pc, #12]	; (c2f8 <lv_draw_rect+0xaa8>)
                _lv_blend_fill(clip, &fa,
    c2ea:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    c2ee:	46a9      	mov	r9, r5
    c2f0:	9d07      	ldr	r5, [sp, #28]
    c2f2:	e02d      	b.n	c350 <lv_draw_rect+0xb00>
    c2f4:	000106dd 	.word	0x000106dd
    c2f8:	00011769 	.word	0x00011769
    c2fc:	0000b33d 	.word	0x0000b33d
    c300:	00006dc9 	.word	0x00006dc9
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c304:	4643      	mov	r3, r8
    c306:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c30a:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    c30e:	9805      	ldr	r0, [sp, #20]
    c310:	4eaa      	ldr	r6, [pc, #680]	; (c5bc <lv_draw_rect+0xd6c>)
    c312:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c314:	2801      	cmp	r0, #1
    c316:	bf08      	it	eq
    c318:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    c31a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c31e:	9302      	str	r3, [sp, #8]
    c320:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    c324:	9301      	str	r3, [sp, #4]
    c326:	9000      	str	r0, [sp, #0]
    c328:	9b05      	ldr	r3, [sp, #20]
    c32a:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c32e:	a922      	add	r1, sp, #136	; 0x88
    c330:	9804      	ldr	r0, [sp, #16]
    c332:	4ea3      	ldr	r6, [pc, #652]	; (c5c0 <lv_draw_rect+0xd70>)
    c334:	47b0      	blx	r6
                fa.y1++;
    c336:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c33a:	3301      	adds	r3, #1
    c33c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    c340:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c344:	3301      	adds	r3, #1
    c346:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    c34a:	3401      	adds	r4, #1
    c34c:	454c      	cmp	r4, r9
    c34e:	d007      	beq.n	c360 <lv_draw_rect+0xb10>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    c350:	4642      	mov	r2, r8
    c352:	9908      	ldr	r1, [sp, #32]
    c354:	9805      	ldr	r0, [sp, #20]
    c356:	47b8      	blx	r7
                if(simple_mode) {
    c358:	2d00      	cmp	r5, #0
    c35a:	d0d3      	beq.n	c304 <lv_draw_rect+0xab4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    c35c:	2002      	movs	r0, #2
    c35e:	e7dc      	b.n	c31a <lv_draw_rect+0xaca>
    c360:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    c364:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c368:	445b      	add	r3, fp
    c36a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    c36e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c372:	eba3 030b 	sub.w	r3, r3, fp
    c376:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    c37a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    c37e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y1 + corner_size - 1;
    c382:	3b01      	subs	r3, #1
    c384:	445b      	add	r3, fp
    c386:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c38a:	9a04      	ldr	r2, [sp, #16]
    c38c:	a91c      	add	r1, sp, #112	; 0x70
    c38e:	a81e      	add	r0, sp, #120	; 0x78
    c390:	4b8c      	ldr	r3, [pc, #560]	; (c5c4 <lv_draw_rect+0xd74>)
    c392:	4798      	blx	r3
    if(has_com) {
    c394:	2800      	cmp	r0, #0
    c396:	d07d      	beq.n	c494 <lv_draw_rect+0xc44>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
    c398:	9b07      	ldr	r3, [sp, #28]
    c39a:	b14b      	cbz	r3, c3b0 <lv_draw_rect+0xb60>
    c39c:	9b06      	ldr	r3, [sp, #24]
    c39e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    c3a2:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    c3a6:	4293      	cmp	r3, r2
    c3a8:	bfa8      	it	ge
    c3aa:	4613      	movge	r3, r2
    c3ac:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c3b0:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c3b4:	3301      	adds	r3, #1
    c3b6:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    c3ba:	1a9b      	subs	r3, r3, r2
    c3bc:	b21b      	sxth	r3, r3
    c3be:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c3c0:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    c3c4:	f8bd 507e 	ldrh.w	r5, [sp, #126]	; 0x7e
    c3c8:	3501      	adds	r5, #1
    c3ca:	1aed      	subs	r5, r5, r3
    c3cc:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    c3ce:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c3d0:	f9bd 4072 	ldrsh.w	r4, [sp, #114]	; 0x72
    c3d4:	1b1c      	subs	r4, r3, r4
        sh_buf_tmp = sh_buf + corner_size - 1;
    c3d6:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    c3da:	fb09 3404 	mla	r4, r9, r4, r3
    c3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3e0:	441c      	add	r4, r3
    c3e2:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c3e6:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c3e8:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c3ea:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c3ee:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c3f2:	4283      	cmp	r3, r0
    c3f4:	d1f9      	bne.n	c3ea <lv_draw_rect+0xb9a>
        fa.y2 = fa.y1;
    c3f6:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c3fa:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    c3fe:	462b      	mov	r3, r5
    c400:	2d00      	cmp	r5, #0
    c402:	dd47      	ble.n	c494 <lv_draw_rect+0xc44>
    c404:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    c406:	4f70      	ldr	r7, [pc, #448]	; (c5c8 <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c408:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    c40c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    c410:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    c414:	469b      	mov	fp, r3
    c416:	e02a      	b.n	c46e <lv_draw_rect+0xc1e>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c418:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    c41c:	d12a      	bne.n	c474 <lv_draw_rect+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c41e:	4649      	mov	r1, r9
    c420:	e02c      	b.n	c47c <lv_draw_rect+0xc2c>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c422:	9b08      	ldr	r3, [sp, #32]
    c424:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c428:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    c42c:	9805      	ldr	r0, [sp, #20]
    c42e:	4e63      	ldr	r6, [pc, #396]	; (c5bc <lv_draw_rect+0xd6c>)
    c430:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c432:	2801      	cmp	r0, #1
    c434:	bf08      	it	eq
    c436:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c438:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c43c:	9302      	str	r3, [sp, #8]
    c43e:	23ff      	movs	r3, #255	; 0xff
    c440:	9301      	str	r3, [sp, #4]
    c442:	9000      	str	r0, [sp, #0]
    c444:	9b05      	ldr	r3, [sp, #20]
    c446:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c44a:	a922      	add	r1, sp, #136	; 0x88
    c44c:	9804      	ldr	r0, [sp, #16]
    c44e:	4e5c      	ldr	r6, [pc, #368]	; (c5c0 <lv_draw_rect+0xd70>)
    c450:	47b0      	blx	r6
            fa.y1++;
    c452:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c456:	3301      	adds	r3, #1
    c458:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    c45c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c460:	3301      	adds	r3, #1
    c462:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    c466:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    c468:	3501      	adds	r5, #1
    c46a:	455d      	cmp	r5, fp
    c46c:	d00e      	beq.n	c48c <lv_draw_rect+0xc3c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c46e:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c470:	2bff      	cmp	r3, #255	; 0xff
    c472:	d0d1      	beq.n	c418 <lv_draw_rect+0xbc8>
    c474:	fb03 f309 	mul.w	r3, r3, r9
    c478:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    c47c:	9a08      	ldr	r2, [sp, #32]
    c47e:	9805      	ldr	r0, [sp, #20]
    c480:	47b8      	blx	r7
            if(simple_mode) {
    c482:	9b07      	ldr	r3, [sp, #28]
    c484:	2b00      	cmp	r3, #0
    c486:	d0cc      	beq.n	c422 <lv_draw_rect+0xbd2>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    c488:	2002      	movs	r0, #2
    c48a:	e7d5      	b.n	c438 <lv_draw_rect+0xbe8>
    c48c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    c490:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1 + corner_size;
    c494:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c498:	445b      	add	r3, fp
    c49a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    c49e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c4a2:	eba3 030b 	sub.w	r3, r3, fp
    c4a6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    c4aa:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    c4ae:	1c53      	adds	r3, r2, #1
    c4b0:	eba3 030b 	sub.w	r3, r3, fp
    c4b4:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    c4b8:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c4bc:	9a04      	ldr	r2, [sp, #16]
    c4be:	a91c      	add	r1, sp, #112	; 0x70
    c4c0:	a81e      	add	r0, sp, #120	; 0x78
    c4c2:	4b40      	ldr	r3, [pc, #256]	; (c5c4 <lv_draw_rect+0xd74>)
    c4c4:	4798      	blx	r3
    if(has_com) {
    c4c6:	2800      	cmp	r0, #0
    c4c8:	f000 8082 	beq.w	c5d0 <lv_draw_rect+0xd80>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
    c4cc:	9b07      	ldr	r3, [sp, #28]
    c4ce:	b14b      	cbz	r3, c4e4 <lv_draw_rect+0xc94>
    c4d0:	9b06      	ldr	r3, [sp, #24]
    c4d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    c4d6:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
    c4da:	4293      	cmp	r3, r2
    c4dc:	bfb8      	it	lt
    c4de:	4613      	movlt	r3, r2
    c4e0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c4e4:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    c4e8:	3301      	adds	r3, #1
    c4ea:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    c4ee:	1a9b      	subs	r3, r3, r2
    c4f0:	b21b      	sxth	r3, r3
    c4f2:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c4f4:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    c4f8:	1c5d      	adds	r5, r3, #1
    c4fa:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    c4fe:	1aad      	subs	r5, r5, r2
    c500:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    c502:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c504:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
    c508:	1ae4      	subs	r4, r4, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
    c50a:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    c50e:	fb09 3404 	mla	r4, r9, r4, r3
    c512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c514:	441c      	add	r4, r3
    c516:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c51a:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c51c:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c51e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c522:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c526:	4283      	cmp	r3, r0
    c528:	d1f9      	bne.n	c51e <lv_draw_rect+0xcce>
        fa.y1 = fa.y2;
    c52a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c52e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
    c532:	46a9      	mov	r9, r5
    c534:	2d00      	cmp	r5, #0
    c536:	dd4b      	ble.n	c5d0 <lv_draw_rect+0xd80>
    c538:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    c53a:	4f23      	ldr	r7, [pc, #140]	; (c5c8 <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c53c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    c540:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    c544:	e02a      	b.n	c59c <lv_draw_rect+0xd4c>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c546:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    c54a:	d12a      	bne.n	c5a2 <lv_draw_rect+0xd52>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c54c:	4659      	mov	r1, fp
    c54e:	e02c      	b.n	c5aa <lv_draw_rect+0xd5a>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c550:	9b08      	ldr	r3, [sp, #32]
    c552:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c556:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    c55a:	9805      	ldr	r0, [sp, #20]
    c55c:	4e17      	ldr	r6, [pc, #92]	; (c5bc <lv_draw_rect+0xd6c>)
    c55e:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c560:	2801      	cmp	r0, #1
    c562:	bf08      	it	eq
    c564:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c566:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c56a:	9302      	str	r3, [sp, #8]
    c56c:	23ff      	movs	r3, #255	; 0xff
    c56e:	9301      	str	r3, [sp, #4]
    c570:	9000      	str	r0, [sp, #0]
    c572:	9b05      	ldr	r3, [sp, #20]
    c574:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c578:	a922      	add	r1, sp, #136	; 0x88
    c57a:	9804      	ldr	r0, [sp, #16]
    c57c:	4e10      	ldr	r6, [pc, #64]	; (c5c0 <lv_draw_rect+0xd70>)
    c57e:	47b0      	blx	r6
            fa.y1--;
    c580:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c584:	3b01      	subs	r3, #1
    c586:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2--;
    c58a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c58e:	3b01      	subs	r3, #1
    c590:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    c594:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    c596:	3501      	adds	r5, #1
    c598:	454d      	cmp	r5, r9
    c59a:	d017      	beq.n	c5cc <lv_draw_rect+0xd7c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    c59c:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    c59e:	2bff      	cmp	r3, #255	; 0xff
    c5a0:	d0d1      	beq.n	c546 <lv_draw_rect+0xcf6>
    c5a2:	fb03 f30b 	mul.w	r3, r3, fp
    c5a6:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    c5aa:	9a08      	ldr	r2, [sp, #32]
    c5ac:	9805      	ldr	r0, [sp, #20]
    c5ae:	47b8      	blx	r7
            if(simple_mode) {
    c5b0:	9b07      	ldr	r3, [sp, #28]
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d0cc      	beq.n	c550 <lv_draw_rect+0xd00>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    c5b6:	2002      	movs	r0, #2
    c5b8:	e7d5      	b.n	c566 <lv_draw_rect+0xd16>
    c5ba:	bf00      	nop
    c5bc:	0000b33d 	.word	0x0000b33d
    c5c0:	00006dc9 	.word	0x00006dc9
    c5c4:	000106dd 	.word	0x000106dd
    c5c8:	00011b25 	.word	0x00011b25
    c5cc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    c5d0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c5d4:	445b      	add	r3, fp
    c5d6:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    c5da:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    c5de:	eba3 030b 	sub.w	r3, r3, fp
    c5e2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    c5e6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c5ea:	445b      	add	r3, fp
    c5ec:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    c5f0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c5f4:	eba3 0b0b 	sub.w	fp, r3, fp
    c5f8:	f8ad b076 	strh.w	fp, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    c5fc:	9a04      	ldr	r2, [sp, #16]
    c5fe:	a91c      	add	r1, sp, #112	; 0x70
    c600:	a81e      	add	r0, sp, #120	; 0x78
    c602:	4ba2      	ldr	r3, [pc, #648]	; (c88c <lv_draw_rect+0x103c>)
    c604:	4798      	blx	r3
    if(has_com && simple_mode == false) {
    c606:	2800      	cmp	r0, #0
    c608:	d050      	beq.n	c6ac <lv_draw_rect+0xe5c>
    c60a:	9b07      	ldr	r3, [sp, #28]
    c60c:	2b00      	cmp	r3, #0
    c60e:	d14d      	bne.n	c6ac <lv_draw_rect+0xe5c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c610:	f8bd 607c 	ldrh.w	r6, [sp, #124]	; 0x7c
    c614:	3601      	adds	r6, #1
    c616:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    c61a:	1af6      	subs	r6, r6, r3
    c61c:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c61e:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    c622:	3401      	adds	r4, #1
    c624:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    c628:	1ae4      	subs	r4, r4, r3
    c62a:	b224      	sxth	r4, r4
    c62c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    c630:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    c632:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    c634:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c638:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c63c:	4283      	cmp	r3, r0
    c63e:	d1f9      	bne.n	c634 <lv_draw_rect+0xde4>
        fa.y2 = fa.y1;
    c640:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c644:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    c648:	46a3      	mov	fp, r4
    c64a:	2c00      	cmp	r4, #0
    c64c:	dd2e      	ble.n	c6ac <lv_draw_rect+0xe5c>
    c64e:	2500      	movs	r5, #0
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    c650:	f8df 9254 	ldr.w	r9, [pc, #596]	; c8a8 <lv_draw_rect+0x1058>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c654:	f8df 8254 	ldr.w	r8, [pc, #596]	; c8ac <lv_draw_rect+0x105c>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c658:	4f8d      	ldr	r7, [pc, #564]	; (c890 <lv_draw_rect+0x1040>)
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    c65a:	4632      	mov	r2, r6
    c65c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    c660:	9805      	ldr	r0, [sp, #20]
    c662:	47c8      	blx	r9
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    c664:	ac30      	add	r4, sp, #192	; 0xc0
    c666:	4633      	mov	r3, r6
    c668:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    c66c:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    c670:	9805      	ldr	r0, [sp, #20]
    c672:	47c0      	blx	r8
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    c674:	2801      	cmp	r0, #1
    c676:	bf08      	it	eq
    c678:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    c67a:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    c67e:	9302      	str	r3, [sp, #8]
    c680:	23ff      	movs	r3, #255	; 0xff
    c682:	9301      	str	r3, [sp, #4]
    c684:	9000      	str	r0, [sp, #0]
    c686:	9b05      	ldr	r3, [sp, #20]
    c688:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    c68c:	4621      	mov	r1, r4
    c68e:	9804      	ldr	r0, [sp, #16]
    c690:	47b8      	blx	r7
            fa.y1++;
    c692:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    c696:	3301      	adds	r3, #1
    c698:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    c69c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    c6a0:	3301      	adds	r3, #1
    c6a2:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    c6a6:	3501      	adds	r5, #1
    c6a8:	455d      	cmp	r5, fp
    c6aa:	d1d6      	bne.n	c65a <lv_draw_rect+0xe0a>
    lv_draw_mask_remove_id(mask_rout_id);
    c6ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    c6ae:	4b79      	ldr	r3, [pc, #484]	; (c894 <lv_draw_rect+0x1044>)
    c6b0:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    c6b2:	9805      	ldr	r0, [sp, #20]
    c6b4:	4c78      	ldr	r4, [pc, #480]	; (c898 <lv_draw_rect+0x1048>)
    c6b6:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
    c6b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    c6ba:	47a0      	blx	r4
    if(dsc->bg_opa <= LV_OPA_MIN) return;
    c6bc:	f89a 700c 	ldrb.w	r7, [sl, #12]
    c6c0:	2f05      	cmp	r7, #5
    c6c2:	d942      	bls.n	c74a <lv_draw_rect+0xefa>
    c6c4:	9a06      	ldr	r2, [sp, #24]
    c6c6:	1e53      	subs	r3, r2, #1
    c6c8:	1dd0      	adds	r0, r2, #7
    c6ca:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    c6cc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c6d0:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    c6d4:	4298      	cmp	r0, r3
    c6d6:	d1f9      	bne.n	c6cc <lv_draw_rect+0xe7c>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
    c6d8:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    c6dc:	2b01      	cmp	r3, #1
    c6de:	dd24      	ble.n	c72a <lv_draw_rect+0xeda>
    c6e0:	f89a 3014 	ldrb.w	r3, [sl, #20]
    c6e4:	2bf9      	cmp	r3, #249	; 0xf9
    c6e6:	d920      	bls.n	c72a <lv_draw_rect+0xeda>
    c6e8:	f9ba 3000 	ldrsh.w	r3, [sl]
    c6ec:	b1eb      	cbz	r3, c72a <lv_draw_rect+0xeda>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
    c6ee:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    c6f2:	f3c3 0280 	ubfx	r2, r3, #2, #1
    c6f6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    c6fa:	440a      	add	r2, r1
    c6fc:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
    c700:	f3c3 0240 	ubfx	r2, r3, #1, #1
    c704:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    c708:	440a      	add	r2, r1
    c70a:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
    c70e:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    c712:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    c716:	1a52      	subs	r2, r2, r1
    c718:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
    c71c:	f003 0301 	and.w	r3, r3, #1
    c720:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    c724:	1ad3      	subs	r3, r2, r3
    c726:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c72a:	2ffb      	cmp	r7, #251	; 0xfb
    c72c:	bf28      	it	cs
    c72e:	27ff      	movcs	r7, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c730:	4b5a      	ldr	r3, [pc, #360]	; (c89c <lv_draw_rect+0x104c>)
    c732:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c734:	4b5a      	ldr	r3, [pc, #360]	; (c8a0 <lv_draw_rect+0x1050>)
    c736:	4798      	blx	r3
    c738:	4680      	mov	r8, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
    c73a:	9a04      	ldr	r2, [sp, #16]
    c73c:	a91a      	add	r1, sp, #104	; 0x68
    c73e:	a81c      	add	r0, sp, #112	; 0x70
    c740:	4b52      	ldr	r3, [pc, #328]	; (c88c <lv_draw_rect+0x103c>)
    c742:	4798      	blx	r3
    if(is_common == false) return;
    c744:	2800      	cmp	r0, #0
    c746:	f040 80b3 	bne.w	c8b0 <lv_draw_rect+0x1060>
    _lv_mem_buf_release(mask_buf);
}

static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->pattern_image == NULL) return;
    c74a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    c74e:	b120      	cbz	r0, c75a <lv_draw_rect+0xf0a>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
    c750:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    c754:	2b05      	cmp	r3, #5
    c756:	f200 83eb 	bhi.w	cf30 <lv_draw_rect+0x16e0>
    if(dsc->border_opa <= LV_OPA_MIN) return;
    c75a:	f89a 4014 	ldrb.w	r4, [sl, #20]
    c75e:	2c05      	cmp	r4, #5
    c760:	d915      	bls.n	c78e <lv_draw_rect+0xf3e>
    if(dsc->border_width == 0) return;
    c762:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    c766:	b193      	cbz	r3, c78e <lv_draw_rect+0xf3e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
    c768:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    c76c:	b17b      	cbz	r3, c78e <lv_draw_rect+0xf3e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c76e:	2cfb      	cmp	r4, #251	; 0xfb
    c770:	bf28      	it	cs
    c772:	24ff      	movcs	r4, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c774:	4b49      	ldr	r3, [pc, #292]	; (c89c <lv_draw_rect+0x104c>)
    c776:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c778:	4b49      	ldr	r3, [pc, #292]	; (c8a0 <lv_draw_rect+0x1050>)
    c77a:	4798      	blx	r3
    c77c:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, coords, clip);
    c77e:	9a04      	ldr	r2, [sp, #16]
    c780:	9906      	ldr	r1, [sp, #24]
    c782:	a818      	add	r0, sp, #96	; 0x60
    c784:	4b41      	ldr	r3, [pc, #260]	; (c88c <lv_draw_rect+0x103c>)
    c786:	4798      	blx	r3
    if(is_common == false) return;
    c788:	2800      	cmp	r0, #0
    c78a:	f040 8529 	bne.w	d1e0 <lv_draw_rect+0x1990>
}


static void draw_value(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->value_str == NULL) return;
    c78e:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
    c792:	b121      	cbz	r1, c79e <lv_draw_rect+0xf4e>
    if(dsc->value_opa <= LV_OPA_MIN) return;
    c794:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    c798:	2b05      	cmp	r3, #5
    c79a:	f201 8035 	bhi.w	d808 <lv_draw_rect+0x1fb8>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
    c79e:	f89a b01c 	ldrb.w	fp, [sl, #28]
    c7a2:	f1bb 0f05 	cmp.w	fp, #5
    c7a6:	d96d      	bls.n	c884 <lv_draw_rect+0x1034>
    if(dsc->outline_width == 0) return;
    c7a8:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d069      	beq.n	c884 <lv_draw_rect+0x1034>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c7b0:	f1bb 0ffb 	cmp.w	fp, #251	; 0xfb
    c7b4:	bf28      	it	cs
    c7b6:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    c7ba:	4b3a      	ldr	r3, [pc, #232]	; (c8a4 <lv_draw_rect+0x1054>)
    c7bc:	4798      	blx	r3
    c7be:	9009      	str	r0, [sp, #36]	; 0x24
    c7c0:	9a06      	ldr	r2, [sp, #24]
    c7c2:	1e53      	subs	r3, r2, #1
    c7c4:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    c7c6:	aa16      	add	r2, sp, #88	; 0x58
        *d8 = *s8;
    c7c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c7cc:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    c7d0:	4283      	cmp	r3, r0
    c7d2:	d1f9      	bne.n	c7c8 <lv_draw_rect+0xf78>
    area_inner.x1 -= dsc->outline_pad;
    c7d4:	f8ba 501a 	ldrh.w	r5, [sl, #26]
    c7d8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    c7dc:	1b5b      	subs	r3, r3, r5
    c7de:	b29b      	uxth	r3, r3
    c7e0:	9306      	str	r3, [sp, #24]
    c7e2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    area_inner.y1 -= dsc->outline_pad;
    c7e6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    c7ea:	1b5b      	subs	r3, r3, r5
    c7ec:	b29b      	uxth	r3, r3
    c7ee:	9307      	str	r3, [sp, #28]
    c7f0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    area_inner.x2 += dsc->outline_pad;
    c7f4:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
    c7f8:	442e      	add	r6, r5
    c7fa:	b2b6      	uxth	r6, r6
    c7fc:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    area_inner.y2 += dsc->outline_pad;
    c800:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    c804:	441d      	add	r5, r3
    c806:	b2ad      	uxth	r5, r5
    c808:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
    int32_t rin = dsc->radius;
    c80c:	f9ba 3000 	ldrsh.w	r3, [sl]
    c810:	9308      	str	r3, [sp, #32]
    int32_t rout = rin + dsc->outline_width;
    c812:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    c816:	9305      	str	r3, [sp, #20]
    c818:	f10d 0257 	add.w	r2, sp, #87	; 0x57
    uint8_t * d8 = (uint8_t *)dst;
    c81c:	ab18      	add	r3, sp, #96	; 0x60
    while(len) {
    c81e:	a81a      	add	r0, sp, #104	; 0x68
        *d8 = *s8;
    c820:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    c824:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    c828:	4283      	cmp	r3, r0
    c82a:	d1f9      	bne.n	c820 <lv_draw_rect+0xfd0>
    area_outer.x1 -= dsc->outline_width;
    c82c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    c830:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
    c834:	eba9 0904 	sub.w	r9, r9, r4
    c838:	fa1f f389 	uxth.w	r3, r9
    c83c:	930a      	str	r3, [sp, #40]	; 0x28
    c83e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    area_outer.x2 += dsc->outline_width;
    c842:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    c846:	4427      	add	r7, r4
    c848:	b2bf      	uxth	r7, r7
    c84a:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    area_outer.y1 -= dsc->outline_width;
    c84e:	f8bd 8062 	ldrh.w	r8, [sp, #98]	; 0x62
    c852:	eba8 0804 	sub.w	r8, r8, r4
    c856:	fa1f f888 	uxth.w	r8, r8
    c85a:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
    area_outer.y2 += dsc->outline_width;
    c85e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    c862:	441c      	add	r4, r3
    c864:	b2a4      	uxth	r4, r4
    c866:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c86a:	4b0c      	ldr	r3, [pc, #48]	; (c89c <lv_draw_rect+0x104c>)
    c86c:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c86e:	4b0c      	ldr	r3, [pc, #48]	; (c8a0 <lv_draw_rect+0x1050>)
    c870:	4798      	blx	r3
    c872:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &area_outer, clip);
    c874:	9a04      	ldr	r2, [sp, #16]
    c876:	a918      	add	r1, sp, #96	; 0x60
    c878:	a81a      	add	r0, sp, #104	; 0x68
    c87a:	4b04      	ldr	r3, [pc, #16]	; (c88c <lv_draw_rect+0x103c>)
    c87c:	4798      	blx	r3
    if(is_common == false) return;
    c87e:	2800      	cmp	r0, #0
    c880:	f041 8026 	bne.w	d8d0 <lv_draw_rect+0x2080>
}
    c884:	b031      	add	sp, #196	; 0xc4
    c886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c88a:	bf00      	nop
    c88c:	000106dd 	.word	0x000106dd
    c890:	00006dc9 	.word	0x00006dc9
    c894:	0000b38d 	.word	0x0000b38d
    c898:	000116a9 	.word	0x000116a9
    c89c:	0000574d 	.word	0x0000574d
    c8a0:	00010221 	.word	0x00010221
    c8a4:	0000b3e5 	.word	0x0000b3e5
    c8a8:	00011b25 	.word	0x00011b25
    c8ac:	0000b33d 	.word	0x0000b33d
    draw_area.x1 -= disp_area->x1;
    c8b0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    c8b4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    c8b8:	1a5b      	subs	r3, r3, r1
    c8ba:	b29a      	uxth	r2, r3
    c8bc:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y1 -= disp_area->y1;
    c8c0:	f8b8 0012 	ldrh.w	r0, [r8, #18]
    c8c4:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    c8c8:	1a1b      	subs	r3, r3, r0
    c8ca:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    draw_area.x2 -= disp_area->x1;
    c8ce:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    c8d2:	1a5b      	subs	r3, r3, r1
    c8d4:	b29b      	uxth	r3, r3
    c8d6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    draw_area.y2 -= disp_area->y1;
    c8da:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
    c8de:	1a09      	subs	r1, r1, r0
    c8e0:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c8e4:	3301      	adds	r3, #1
    c8e6:	1a9b      	subs	r3, r3, r2
    c8e8:	b21b      	sxth	r3, r3
    c8ea:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    c8ec:	930a      	str	r3, [sp, #40]	; 0x28
    c8ee:	4618      	mov	r0, r3
    c8f0:	4b93      	ldr	r3, [pc, #588]	; (cb40 <lv_draw_rect+0x12f0>)
    c8f2:	4798      	blx	r3
    c8f4:	9005      	str	r0, [sp, #20]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
    c8f6:	4b93      	ldr	r3, [pc, #588]	; (cb44 <lv_draw_rect+0x12f4>)
    c8f8:	4798      	blx	r3
    c8fa:	b283      	uxth	r3, r0
    c8fc:	930b      	str	r3, [sp, #44]	; 0x2c
    if(other_mask_cnt) simple_mode = false;
    c8fe:	bb43      	cbnz	r3, c952 <lv_draw_rect+0x1102>
    else if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
    c900:	f89a 3006 	ldrb.w	r3, [sl, #6]
    c904:	3b02      	subs	r3, #2
    c906:	bf18      	it	ne
    c908:	2301      	movne	r3, #1
    c90a:	9307      	str	r3, [sp, #28]
    c90c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    c910:	3501      	adds	r5, #1
    c912:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    c916:	1aed      	subs	r5, r5, r3
    c918:	b22d      	sxth	r5, r5
    int32_t coords_w = lv_area_get_width(&coords_bg);
    c91a:	462c      	mov	r4, r5
    int32_t rout = dsc->radius;
    c91c:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c920:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    c924:	3301      	adds	r3, #1
    c926:	f8bd 606a 	ldrh.w	r6, [sp, #106]	; 0x6a
    c92a:	1b9b      	subs	r3, r3, r6
    int32_t coords_h = lv_area_get_height(&coords_bg);
    c92c:	b21e      	sxth	r6, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    c92e:	4633      	mov	r3, r6
    c930:	42ae      	cmp	r6, r5
    c932:	bfa8      	it	ge
    c934:	462b      	movge	r3, r5
    if(rout > short_side >> 1) rout = short_side >> 1;
    c936:	105e      	asrs	r6, r3, #1
    c938:	4296      	cmp	r6, r2
    c93a:	bfa8      	it	ge
    c93c:	4616      	movge	r6, r2
    if(simple_mode && rout == 0 && (dsc->bg_grad_dir == LV_GRAD_DIR_NONE)) {
    c93e:	9b07      	ldr	r3, [sp, #28]
    c940:	b1db      	cbz	r3, c97a <lv_draw_rect+0x112a>
    c942:	b9d6      	cbnz	r6, c97a <lv_draw_rect+0x112a>
    c944:	f89a 3006 	ldrb.w	r3, [sl, #6]
    c948:	b133      	cbz	r3, c958 <lv_draw_rect+0x1108>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    c94a:	f04f 33ff 	mov.w	r3, #4294967295
    c94e:	930e      	str	r3, [sp, #56]	; 0x38
    c950:	e021      	b.n	c996 <lv_draw_rect+0x1146>
    if(other_mask_cnt) simple_mode = false;
    c952:	2300      	movs	r3, #0
    c954:	9307      	str	r3, [sp, #28]
    c956:	e7d9      	b.n	c90c <lv_draw_rect+0x10bc>
        _lv_blend_fill(clip, &coords_bg,
    c958:	f89a 300d 	ldrb.w	r3, [sl, #13]
    c95c:	9302      	str	r3, [sp, #8]
    c95e:	9701      	str	r7, [sp, #4]
    c960:	2301      	movs	r3, #1
    c962:	9300      	str	r3, [sp, #0]
    c964:	2300      	movs	r3, #0
    c966:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    c96a:	a91a      	add	r1, sp, #104	; 0x68
    c96c:	9804      	ldr	r0, [sp, #16]
    c96e:	4c76      	ldr	r4, [pc, #472]	; (cb48 <lv_draw_rect+0x12f8>)
    c970:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
    c972:	f04f 33ff 	mov.w	r3, #4294967295
    c976:	930e      	str	r3, [sp, #56]	; 0x38
    c978:	e276      	b.n	ce68 <lv_draw_rect+0x1618>
        if(rout > 0) {
    c97a:	2e00      	cmp	r6, #0
    c97c:	dd32      	ble.n	c9e4 <lv_draw_rect+0x1194>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
    c97e:	2300      	movs	r3, #0
    c980:	4632      	mov	r2, r6
    c982:	a91a      	add	r1, sp, #104	; 0x68
    c984:	a829      	add	r0, sp, #164	; 0xa4
    c986:	f8df 91d0 	ldr.w	r9, [pc, #464]	; cb58 <lv_draw_rect+0x1308>
    c98a:	47c8      	blx	r9
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    c98c:	2100      	movs	r1, #0
    c98e:	a829      	add	r0, sp, #164	; 0xa4
    c990:	4b6e      	ldr	r3, [pc, #440]	; (cb4c <lv_draw_rect+0x12fc>)
    c992:	4798      	blx	r3
    c994:	900e      	str	r0, [sp, #56]	; 0x38
        lv_color_t grad_color = dsc->bg_color;
    c996:	f8ba b002 	ldrh.w	fp, [sl, #2]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    c99a:	f89a 3006 	ldrb.w	r3, [sl, #6]
    c99e:	2b02      	cmp	r3, #2
    c9a0:	d024      	beq.n	c9ec <lv_draw_rect+0x119c>
        lv_color_t * grad_map = NULL;
    c9a2:	2300      	movs	r3, #0
    c9a4:	930d      	str	r3, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c9a6:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    c9aa:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    c9ae:	1c53      	adds	r3, r2, #1
    c9b0:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
    c9b2:	b21b      	sxth	r3, r3
    c9b4:	eba3 0946 	sub.w	r9, r3, r6, lsl #1
        fill_area.x1 = coords_bg.x1;
    c9b8:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
        fill_area.x2 = coords_bg.x2;
    c9bc:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    c9c0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    c9c4:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    c9c8:	4413      	add	r3, r2
    c9ca:	b21b      	sxth	r3, r3
    c9cc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        fill_area.y2 = fill_area.y1;
    c9d0:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    c9d4:	4615      	mov	r5, r2
    c9d6:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    c9da:	429a      	cmp	r2, r3
    c9dc:	f300 8237 	bgt.w	ce4e <lv_draw_rect+0x15fe>
                _lv_blend_fill(clip, &fill_area2,
    c9e0:	9708      	str	r7, [sp, #32]
    c9e2:	e0fa      	b.n	cbda <lv_draw_rect+0x138a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    c9e4:	f04f 33ff 	mov.w	r3, #4294967295
    c9e8:	930e      	str	r3, [sp, #56]	; 0x38
    c9ea:	e7d4      	b.n	c996 <lv_draw_rect+0x1146>
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    c9ec:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    c9f0:	459b      	cmp	fp, r3
    c9f2:	f000 8089 	beq.w	cb08 <lv_draw_rect+0x12b8>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
    c9f6:	0068      	lsls	r0, r5, #1
    c9f8:	4b51      	ldr	r3, [pc, #324]	; (cb40 <lv_draw_rect+0x12f0>)
    c9fa:	4798      	blx	r3
    c9fc:	900d      	str	r0, [sp, #52]	; 0x34
            for(i = 0; i < coords_w; i++) {
    c9fe:	2d00      	cmp	r5, #0
    ca00:	ddd1      	ble.n	c9a6 <lv_draw_rect+0x1156>
    ca02:	f04f 0900 	mov.w	r9, #0
    ca06:	9608      	str	r6, [sp, #32]
    ca08:	4606      	mov	r6, r0
    ca0a:	e01b      	b.n	ca44 <lv_draw_rect+0x11f4>
    if(i <= min) return dsc->bg_color;
    ca0c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    ca10:	f003 031f 	and.w	r3, r3, #31
    ca14:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    ca18:	f3c1 1145 	ubfx	r1, r1, #5, #6
    ca1c:	f89a 2003 	ldrb.w	r2, [sl, #3]
    ca20:	08d2      	lsrs	r2, r2, #3
                grad_map[i] = grad_get(dsc, coords_w, i);
    ca22:	7828      	ldrb	r0, [r5, #0]
    ca24:	f363 0004 	bfi	r0, r3, #0, #5
    ca28:	7028      	strb	r0, [r5, #0]
    ca2a:	882b      	ldrh	r3, [r5, #0]
    ca2c:	f361 134a 	bfi	r3, r1, #5, #6
    ca30:	802b      	strh	r3, [r5, #0]
    ca32:	0a1b      	lsrs	r3, r3, #8
    ca34:	f362 03c7 	bfi	r3, r2, #3, #5
    ca38:	706b      	strb	r3, [r5, #1]
            for(i = 0; i < coords_w; i++) {
    ca3a:	f109 0901 	add.w	r9, r9, #1
    ca3e:	3602      	adds	r6, #2
    ca40:	454c      	cmp	r4, r9
    ca42:	d05f      	beq.n	cb04 <lv_draw_rect+0x12b4>
                grad_map[i] = grad_get(dsc, coords_w, i);
    ca44:	4635      	mov	r5, r6
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    ca46:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
    ca4a:	fb00 f304 	mul.w	r3, r0, r4
    ca4e:	121b      	asrs	r3, r3, #8
    if(i <= min) return dsc->bg_color;
    ca50:	fa0f f189 	sxth.w	r1, r9
    ca54:	428b      	cmp	r3, r1
    ca56:	dad9      	bge.n	ca0c <lv_draw_rect+0x11bc>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    ca58:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
    ca5c:	fb02 fe04 	mul.w	lr, r2, r4
    if(i >= max) return dsc->bg_grad_color;
    ca60:	ebb1 2f2e 	cmp.w	r1, lr, asr #8
    ca64:	da42      	bge.n	caec <lv_draw_rect+0x129c>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    ca66:	1a12      	subs	r2, r2, r0
    d = (s * d) >> 8;
    ca68:	fb04 f202 	mul.w	r2, r4, r2
    i -= min;
    ca6c:	eba9 0303 	sub.w	r3, r9, r3
    lv_opa_t mix = (i * 255) / d;
    ca70:	b21b      	sxth	r3, r3
    ca72:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
    ca76:	1212      	asrs	r2, r2, #8
    lv_opa_t mix = (i * 255) / d;
    ca78:	fb93 f3f2 	sdiv	r3, r3, r2
    ca7c:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    ca7e:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
    ca82:	f89a 2005 	ldrb.w	r2, [sl, #5]
    ca86:	08d2      	lsrs	r2, r2, #3
    ca88:	f89a 1003 	ldrb.w	r1, [sl, #3]
    ca8c:	08c9      	lsrs	r1, r1, #3
    ca8e:	fb0e f101 	mul.w	r1, lr, r1
    ca92:	fb03 1202 	mla	r2, r3, r2, r1
    ca96:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    ca9a:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    ca9e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    caa2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    caa6:	f3c1 1145 	ubfx	r1, r1, #5, #6
    caaa:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    caae:	f3c0 1045 	ubfx	r0, r0, #5, #6
    cab2:	fb0e f000 	mul.w	r0, lr, r0
    cab6:	fb03 0101 	mla	r1, r3, r1, r0
    caba:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    cabe:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
    cac2:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    cac6:	f89a 0004 	ldrb.w	r0, [sl, #4]
    caca:	f000 001f 	and.w	r0, r0, #31
    cace:	f89a c002 	ldrb.w	ip, [sl, #2]
    cad2:	f00c 0c1f 	and.w	ip, ip, #31
    cad6:	fb0e fe0c 	mul.w	lr, lr, ip
    cada:	fb03 e300 	mla	r3, r3, r0, lr
    cade:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    cae2:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    cae6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    caea:	e79a      	b.n	ca22 <lv_draw_rect+0x11d2>
    if(i >= max) return dsc->bg_grad_color;
    caec:	f89a 3004 	ldrb.w	r3, [sl, #4]
    caf0:	f003 031f 	and.w	r3, r3, #31
    caf4:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    caf8:	f3c1 1145 	ubfx	r1, r1, #5, #6
    cafc:	f89a 2005 	ldrb.w	r2, [sl, #5]
    cb00:	08d2      	lsrs	r2, r2, #3
    cb02:	e78e      	b.n	ca22 <lv_draw_rect+0x11d2>
    cb04:	9e08      	ldr	r6, [sp, #32]
    cb06:	e74e      	b.n	c9a6 <lv_draw_rect+0x1156>
        lv_color_t * grad_map = NULL;
    cb08:	2300      	movs	r3, #0
    cb0a:	930d      	str	r3, [sp, #52]	; 0x34
    cb0c:	e74b      	b.n	c9a6 <lv_draw_rect+0x1156>
                    _lv_memset_ff(mask_buf, draw_area_w);
    cb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb10:	9f05      	ldr	r7, [sp, #20]
    cb12:	4638      	mov	r0, r7
    cb14:	4b0e      	ldr	r3, [pc, #56]	; (cb50 <lv_draw_rect+0x1300>)
    cb16:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    cb18:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    cb1c:	442a      	add	r2, r5
    cb1e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cb22:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    cb26:	4419      	add	r1, r3
    cb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb2a:	b212      	sxth	r2, r2
    cb2c:	b209      	sxth	r1, r1
    cb2e:	4638      	mov	r0, r7
    cb30:	4f08      	ldr	r7, [pc, #32]	; (cb54 <lv_draw_rect+0x1304>)
    cb32:	47b8      	blx	r7
    cb34:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cb36:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cb3a:	2b01      	cmp	r3, #1
    cb3c:	d129      	bne.n	cb92 <lv_draw_rect+0x1342>
    cb3e:	e07a      	b.n	cc36 <lv_draw_rect+0x13e6>
    cb40:	00011a29 	.word	0x00011a29
    cb44:	0000b3e5 	.word	0x0000b3e5
    cb48:	00006dc9 	.word	0x00006dc9
    cb4c:	0000b301 	.word	0x0000b301
    cb50:	00011c91 	.word	0x00011c91
    cb54:	0000b33d 	.word	0x0000b33d
    cb58:	0000b54d 	.word	0x0000b54d
                _lv_memset_ff(mask_buf, draw_area_w);
    cb5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb5e:	9f05      	ldr	r7, [sp, #20]
    cb60:	4638      	mov	r0, r7
    cb62:	4bb6      	ldr	r3, [pc, #728]	; (ce3c <lv_draw_rect+0x15ec>)
    cb64:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    cb66:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    cb6a:	442a      	add	r2, r5
    cb6c:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    cb70:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    cb74:	4419      	add	r1, r3
    cb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb78:	b212      	sxth	r2, r2
    cb7a:	b209      	sxth	r1, r1
    cb7c:	4638      	mov	r0, r7
    cb7e:	4fb0      	ldr	r7, [pc, #704]	; (ce40 <lv_draw_rect+0x15f0>)
    cb80:	47b8      	blx	r7
    cb82:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cb84:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cb88:	2b01      	cmp	r3, #1
    cb8a:	d054      	beq.n	cc36 <lv_draw_rect+0x13e6>
            if(simple_mode && split &&
    cb8c:	9a07      	ldr	r2, [sp, #28]
    cb8e:	2a00      	cmp	r2, #0
    cb90:	d13a      	bne.n	cc08 <lv_draw_rect+0x13b8>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    cb92:	2b02      	cmp	r3, #2
    cb94:	f000 8144 	beq.w	ce20 <lv_draw_rect+0x15d0>
                else if(other_mask_cnt != 0 || !split) {
    cb98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb9a:	b913      	cbnz	r3, cba2 <lv_draw_rect+0x1352>
    cb9c:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    cba0:	dc0b      	bgt.n	cbba <lv_draw_rect+0x136a>
                    _lv_blend_fill(clip, &fill_area,
    cba2:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cba6:	9302      	str	r3, [sp, #8]
    cba8:	9b08      	ldr	r3, [sp, #32]
    cbaa:	9301      	str	r3, [sp, #4]
    cbac:	9700      	str	r7, [sp, #0]
    cbae:	9b05      	ldr	r3, [sp, #20]
    cbb0:	465a      	mov	r2, fp
    cbb2:	a91e      	add	r1, sp, #120	; 0x78
    cbb4:	9804      	ldr	r0, [sp, #16]
    cbb6:	4ca3      	ldr	r4, [pc, #652]	; (ce44 <lv_draw_rect+0x15f4>)
    cbb8:	47a0      	blx	r4
            fill_area.y1++;
    cbba:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    cbbe:	3301      	adds	r3, #1
    cbc0:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2++;
    cbc4:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    cbc8:	3301      	adds	r3, #1
    cbca:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    cbce:	3501      	adds	r5, #1
    cbd0:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    cbd4:	429d      	cmp	r5, r3
    cbd6:	f300 8139 	bgt.w	ce4c <lv_draw_rect+0x15fc>
            int32_t y = h + vdb->area.y1;
    cbda:	f9b8 4012 	ldrsh.w	r4, [r8, #18]
    cbde:	442c      	add	r4, r5
            if(y > coords_bg.y1 + rout + 1 &&
    cbe0:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    cbe4:	4433      	add	r3, r6
    cbe6:	3301      	adds	r3, #1
    cbe8:	429c      	cmp	r4, r3
    cbea:	ddb7      	ble.n	cb5c <lv_draw_rect+0x130c>
               y < coords_bg.y2 - rout - 1) {
    cbec:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    cbf0:	1b9b      	subs	r3, r3, r6
    cbf2:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
    cbf4:	429c      	cmp	r4, r3
    cbf6:	dab1      	bge.n	cb5c <lv_draw_rect+0x130c>
                if(simple_mode == false) {
    cbf8:	9b07      	ldr	r3, [sp, #28]
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	d087      	beq.n	cb0e <lv_draw_rect+0x12be>
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cbfe:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cc02:	2b01      	cmp	r3, #1
    cc04:	d016      	beq.n	cc34 <lv_draw_rect+0x13e4>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    cc06:	2701      	movs	r7, #1
            if(simple_mode && split &&
    cc08:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    cc0c:	f300 8093 	bgt.w	cd36 <lv_draw_rect+0x14e6>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    cc10:	2b02      	cmp	r3, #2
    cc12:	f000 8105 	beq.w	ce20 <lv_draw_rect+0x15d0>
                else if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    cc16:	2b01      	cmp	r3, #1
    cc18:	d1be      	bne.n	cb98 <lv_draw_rect+0x1348>
                    _lv_blend_fill(clip, &fill_area,
    cc1a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cc1e:	9302      	str	r3, [sp, #8]
    cc20:	9b08      	ldr	r3, [sp, #32]
    cc22:	9301      	str	r3, [sp, #4]
    cc24:	9700      	str	r7, [sp, #0]
    cc26:	9b05      	ldr	r3, [sp, #20]
    cc28:	465a      	mov	r2, fp
    cc2a:	a91e      	add	r1, sp, #120	; 0x78
    cc2c:	9804      	ldr	r0, [sp, #16]
    cc2e:	4c85      	ldr	r4, [pc, #532]	; (ce44 <lv_draw_rect+0x15f4>)
    cc30:	47a0      	blx	r4
    cc32:	e7c2      	b.n	cbba <lv_draw_rect+0x136a>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    cc34:	2701      	movs	r7, #1
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    cc36:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cc3a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    cc3e:	429a      	cmp	r2, r3
    cc40:	d06f      	beq.n	cd22 <lv_draw_rect+0x14d2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cc42:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
    cc46:	1a62      	subs	r2, r4, r1
    cc48:	b293      	uxth	r3, r2
    cc4a:	461a      	mov	r2, r3
    cc4c:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    cc4e:	f9ba e008 	ldrsh.w	lr, [sl, #8]
    cc52:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    cc56:	3301      	adds	r3, #1
    cc58:	1a5b      	subs	r3, r3, r1
    cc5a:	b21b      	sxth	r3, r3
    cc5c:	fb03 f10e 	mul.w	r1, r3, lr
    cc60:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
    cc62:	b210      	sxth	r0, r2
    cc64:	4281      	cmp	r1, r0
    cc66:	da4b      	bge.n	cd00 <lv_draw_rect+0x14b0>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    cc68:	f9ba c00a 	ldrsh.w	ip, [sl, #10]
    cc6c:	fb0c f203 	mul.w	r2, ip, r3
    if(i >= max) return dsc->bg_grad_color;
    cc70:	ebb0 2f22 	cmp.w	r0, r2, asr #8
    cc74:	f280 80b0 	bge.w	cdd8 <lv_draw_rect+0x1588>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    cc78:	ebac 0e0e 	sub.w	lr, ip, lr
    d = (s * d) >> 8;
    cc7c:	fb03 f30e 	mul.w	r3, r3, lr
    i -= min;
    cc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc82:	1a52      	subs	r2, r2, r1
    lv_opa_t mix = (i * 255) / d;
    cc84:	b212      	sxth	r2, r2
    cc86:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
    cc8a:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
    cc8c:	fb92 f3f3 	sdiv	r3, r2, r3
    cc90:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    cc92:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    cc96:	f89a 2005 	ldrb.w	r2, [sl, #5]
    cc9a:	08d2      	lsrs	r2, r2, #3
    cc9c:	f89a 0003 	ldrb.w	r0, [sl, #3]
    cca0:	08c0      	lsrs	r0, r0, #3
    cca2:	fb01 f000 	mul.w	r0, r1, r0
    cca6:	fb03 0202 	mla	r2, r3, r2, r0
    ccaa:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    ccae:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    ccb2:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    ccb6:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    ccba:	f3c0 1045 	ubfx	r0, r0, #5, #6
    ccbe:	f8ba e002 	ldrh.w	lr, [sl, #2]
    ccc2:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    ccc6:	fb01 fe0e 	mul.w	lr, r1, lr
    ccca:	fb03 e000 	mla	r0, r3, r0, lr
    ccce:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    ccd2:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
    ccd6:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    ccda:	f89a e004 	ldrb.w	lr, [sl, #4]
    ccde:	f00e 0e1f 	and.w	lr, lr, #31
    cce2:	f89a c002 	ldrb.w	ip, [sl, #2]
    cce6:	f00c 0c1f 	and.w	ip, ip, #31
    ccea:	fb01 f10c 	mul.w	r1, r1, ip
    ccee:	fb03 130e 	mla	r3, r3, lr, r1
    ccf2:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    ccf6:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    ccfa:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    ccfe:	e00a      	b.n	cd16 <lv_draw_rect+0x14c6>
    if(i <= min) return dsc->bg_color;
    cd00:	f89a 3002 	ldrb.w	r3, [sl, #2]
    cd04:	f003 031f 	and.w	r3, r3, #31
    cd08:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    cd0c:	f3c0 1045 	ubfx	r0, r0, #5, #6
    cd10:	f89a 2003 	ldrb.w	r2, [sl, #3]
    cd14:	08d2      	lsrs	r2, r2, #3
    cd16:	f363 0b04 	bfi	fp, r3, #0, #5
    cd1a:	f360 1b4a 	bfi	fp, r0, #5, #6
    cd1e:	f362 2bcf 	bfi	fp, r2, #11, #5
            if(simple_mode && split &&
    cd22:	9b07      	ldr	r3, [sp, #28]
    cd24:	2b00      	cmp	r3, #0
    cd26:	f43f af78 	beq.w	cc1a <lv_draw_rect+0x13ca>
    cd2a:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    cd2e:	bfc8      	it	gt
    cd30:	2301      	movgt	r3, #1
    cd32:	f77f af72 	ble.w	cc1a <lv_draw_rect+0x13ca>
               (y < coords_bg.y1 + rout + 1 ||
    cd36:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    cd3a:	4432      	add	r2, r6
    cd3c:	3201      	adds	r2, #1
            if(simple_mode && split &&
    cd3e:	4294      	cmp	r4, r2
    cd40:	db06      	blt.n	cd50 <lv_draw_rect+0x1500>
                y > coords_bg.y2 - rout - 1)) {
    cd42:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
    cd46:	1b92      	subs	r2, r2, r6
    cd48:	3a01      	subs	r2, #1
               (y < coords_bg.y1 + rout + 1 ||
    cd4a:	4294      	cmp	r4, r2
    cd4c:	f77f af60 	ble.w	cc10 <lv_draw_rect+0x13c0>
                fill_area2.x1 = coords_bg.x1;
    cd50:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    cd54:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x1 + rout - 1;
    cd58:	b2b2      	uxth	r2, r6
    cd5a:	920c      	str	r2, [sp, #48]	; 0x30
    cd5c:	3b01      	subs	r3, #1
    cd5e:	4413      	add	r3, r2
    cd60:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                fill_area2.y1 = fill_area.y1;
    cd64:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    cd68:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fill_area2.y2 = fill_area.y2;
    cd6c:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    cd70:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                _lv_blend_fill(clip, &fill_area2,
    cd74:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cd78:	9302      	str	r3, [sp, #8]
    cd7a:	9b08      	ldr	r3, [sp, #32]
    cd7c:	9301      	str	r3, [sp, #4]
    cd7e:	9700      	str	r7, [sp, #0]
    cd80:	9b05      	ldr	r3, [sp, #20]
    cd82:	465a      	mov	r2, fp
    cd84:	a922      	add	r1, sp, #136	; 0x88
    cd86:	9804      	ldr	r0, [sp, #16]
    cd88:	4c2e      	ldr	r4, [pc, #184]	; (ce44 <lv_draw_rect+0x15f4>)
    cd8a:	47a0      	blx	r4
                if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    cd8c:	f89a 3006 	ldrb.w	r3, [sl, #6]
    cd90:	2b01      	cmp	r3, #1
    cd92:	d02d      	beq.n	cdf0 <lv_draw_rect+0x15a0>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
    cd94:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
    cd98:	1c5a      	adds	r2, r3, #1
    cd9a:	990c      	ldr	r1, [sp, #48]	; 0x30
    cd9c:	1a54      	subs	r4, r2, r1
    cd9e:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x2;
    cda2:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    cda6:	1b9b      	subs	r3, r3, r6
    cda8:	3301      	adds	r3, #1
    cdaa:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    cdae:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
    cdb2:	440a      	add	r2, r1
    cdb4:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
    cdb6:	f89a 200d 	ldrb.w	r2, [sl, #13]
    cdba:	9202      	str	r2, [sp, #8]
    cdbc:	9a08      	ldr	r2, [sp, #32]
    cdbe:	9201      	str	r2, [sp, #4]
    cdc0:	9700      	str	r7, [sp, #0]
    cdc2:	9a05      	ldr	r2, [sp, #20]
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	bfa8      	it	ge
    cdc8:	18d2      	addge	r2, r2, r3
    cdca:	4613      	mov	r3, r2
    cdcc:	465a      	mov	r2, fp
    cdce:	a922      	add	r1, sp, #136	; 0x88
    cdd0:	9804      	ldr	r0, [sp, #16]
    cdd2:	4c1c      	ldr	r4, [pc, #112]	; (ce44 <lv_draw_rect+0x15f4>)
    cdd4:	47a0      	blx	r4
    cdd6:	e6f0      	b.n	cbba <lv_draw_rect+0x136a>
    if(i >= max) return dsc->bg_grad_color;
    cdd8:	f89a 3004 	ldrb.w	r3, [sl, #4]
    cddc:	f003 031f 	and.w	r3, r3, #31
    cde0:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    cde4:	f3c0 1045 	ubfx	r0, r0, #5, #6
    cde8:	f89a 2005 	ldrb.w	r2, [sl, #5]
    cdec:	08d2      	lsrs	r2, r2, #3
    cdee:	e792      	b.n	cd16 <lv_draw_rect+0x14c6>
                    fill_area2.x1 = coords_bg.x1 + rout;
    cdf0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    cdf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cdf6:	4413      	add	r3, r2
    cdf8:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                    fill_area2.x2 = coords_bg.x2 - rout;
    cdfc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    ce00:	1a9b      	subs	r3, r3, r2
    ce02:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                    _lv_blend_fill(clip, &fill_area2,
    ce06:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ce0a:	9302      	str	r3, [sp, #8]
    ce0c:	9b08      	ldr	r3, [sp, #32]
    ce0e:	9301      	str	r3, [sp, #4]
    ce10:	2301      	movs	r3, #1
    ce12:	9300      	str	r3, [sp, #0]
    ce14:	2300      	movs	r3, #0
    ce16:	465a      	mov	r2, fp
    ce18:	a922      	add	r1, sp, #136	; 0x88
    ce1a:	9804      	ldr	r0, [sp, #16]
    ce1c:	47a0      	blx	r4
    ce1e:	e7b9      	b.n	cd94 <lv_draw_rect+0x1544>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa, dsc->bg_blend_mode);
    ce20:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ce24:	9302      	str	r3, [sp, #8]
    ce26:	9b08      	ldr	r3, [sp, #32]
    ce28:	9301      	str	r3, [sp, #4]
    ce2a:	9700      	str	r7, [sp, #0]
    ce2c:	9b05      	ldr	r3, [sp, #20]
    ce2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce30:	a91e      	add	r1, sp, #120	; 0x78
    ce32:	9804      	ldr	r0, [sp, #16]
    ce34:	4c04      	ldr	r4, [pc, #16]	; (ce48 <lv_draw_rect+0x15f8>)
    ce36:	47a0      	blx	r4
    ce38:	e6bf      	b.n	cbba <lv_draw_rect+0x136a>
    ce3a:	bf00      	nop
    ce3c:	00011c91 	.word	0x00011c91
    ce40:	0000b33d 	.word	0x0000b33d
    ce44:	00006dc9 	.word	0x00006dc9
    ce48:	000078d5 	.word	0x000078d5
    ce4c:	9f08      	ldr	r7, [sp, #32]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
    ce4e:	f89a 3006 	ldrb.w	r3, [sl, #6]
    ce52:	b923      	cbnz	r3, ce5e <lv_draw_rect+0x160e>
    ce54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce56:	b913      	cbnz	r3, ce5e <lv_draw_rect+0x160e>
    ce58:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    ce5c:	dc0b      	bgt.n	ce76 <lv_draw_rect+0x1626>
        if(grad_map) _lv_mem_buf_release(grad_map);
    ce5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce60:	b113      	cbz	r3, ce68 <lv_draw_rect+0x1618>
    ce62:	4618      	mov	r0, r3
    ce64:	4bbd      	ldr	r3, [pc, #756]	; (d15c <lv_draw_rect+0x190c>)
    ce66:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
    ce68:	980e      	ldr	r0, [sp, #56]	; 0x38
    ce6a:	4bbd      	ldr	r3, [pc, #756]	; (d160 <lv_draw_rect+0x1910>)
    ce6c:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    ce6e:	9805      	ldr	r0, [sp, #20]
    ce70:	4bba      	ldr	r3, [pc, #744]	; (d15c <lv_draw_rect+0x190c>)
    ce72:	4798      	blx	r3
    ce74:	e469      	b.n	c74a <lv_draw_rect+0xefa>
            fill_area.x1 = coords_bg.x1 + rout;
    ce76:	b2b6      	uxth	r6, r6
    ce78:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    ce7c:	4433      	add	r3, r6
    ce7e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2 - rout;
    ce82:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    ce86:	1b9b      	subs	r3, r3, r6
    ce88:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1;
    ce8c:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    ce90:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y1 + rout;
    ce94:	4433      	add	r3, r6
    ce96:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    ce9a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ce9e:	9302      	str	r3, [sp, #8]
    cea0:	9701      	str	r7, [sp, #4]
    cea2:	2301      	movs	r3, #1
    cea4:	9300      	str	r3, [sp, #0]
    cea6:	2300      	movs	r3, #0
    cea8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    ceac:	a91e      	add	r1, sp, #120	; 0x78
    ceae:	9804      	ldr	r0, [sp, #16]
    ceb0:	4cac      	ldr	r4, [pc, #688]	; (d164 <lv_draw_rect+0x1914>)
    ceb2:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
    ceb4:	f9bd 106e 	ldrsh.w	r1, [sp, #110]	; 0x6e
    ceb8:	1b8a      	subs	r2, r1, r6
    ceba:	b212      	sxth	r2, r2
    cebc:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
    cec0:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    cec4:	429a      	cmp	r2, r3
    cec6:	bfdc      	itt	le
    cec8:	3301      	addle	r3, #1
    ceca:	f8ad 307a 	strhle.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2;
    cece:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    ced2:	f89a 300d 	ldrb.w	r3, [sl, #13]
    ced6:	9302      	str	r3, [sp, #8]
    ced8:	9701      	str	r7, [sp, #4]
    ceda:	2501      	movs	r5, #1
    cedc:	9500      	str	r5, [sp, #0]
    cede:	2300      	movs	r3, #0
    cee0:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cee4:	a91e      	add	r1, sp, #120	; 0x78
    cee6:	f8dd 8010 	ldr.w	r8, [sp, #16]
    ceea:	4640      	mov	r0, r8
    ceec:	4c9d      	ldr	r4, [pc, #628]	; (d164 <lv_draw_rect+0x1914>)
    ceee:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
    cef0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    cef4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2;
    cef8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    cefc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1 + rout + 1;
    cf00:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    cf04:	442b      	add	r3, r5
    cf06:	4433      	add	r3, r6
    cf08:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2 - rout - 1;
    cf0c:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    cf10:	3b01      	subs	r3, #1
    cf12:	1b9e      	subs	r6, r3, r6
    cf14:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    cf18:	f89a 300d 	ldrb.w	r3, [sl, #13]
    cf1c:	9302      	str	r3, [sp, #8]
    cf1e:	9701      	str	r7, [sp, #4]
    cf20:	9500      	str	r5, [sp, #0]
    cf22:	2300      	movs	r3, #0
    cf24:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    cf28:	a91e      	add	r1, sp, #120	; 0x78
    cf2a:	4640      	mov	r0, r8
    cf2c:	47a0      	blx	r4
    cf2e:	e796      	b.n	ce5e <lv_draw_rect+0x160e>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
    cf30:	4b8d      	ldr	r3, [pc, #564]	; (d168 <lv_draw_rect+0x1918>)
    cf32:	4798      	blx	r3
    cf34:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
    cf36:	2801      	cmp	r0, #1
    cf38:	d908      	bls.n	cf4c <lv_draw_rect+0x16fc>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    cf3a:	2802      	cmp	r0, #2
    cf3c:	d025      	beq.n	cf8a <lv_draw_rect+0x173a>
        lv_draw_img(coords, clip, NULL, NULL);
    cf3e:	2300      	movs	r3, #0
    cf40:	461a      	mov	r2, r3
    cf42:	9904      	ldr	r1, [sp, #16]
    cf44:	9806      	ldr	r0, [sp, #24]
    cf46:	4c89      	ldr	r4, [pc, #548]	; (d16c <lv_draw_rect+0x191c>)
    cf48:	47a0      	blx	r4
    cf4a:	e406      	b.n	c75a <lv_draw_rect+0xf0a>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
    cf4c:	a929      	add	r1, sp, #164	; 0xa4
    cf4e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    cf52:	4b87      	ldr	r3, [pc, #540]	; (d170 <lv_draw_rect+0x1920>)
    cf54:	4798      	blx	r3
        if(res != LV_RES_OK) {
    cf56:	2801      	cmp	r0, #1
    cf58:	f47f abff 	bne.w	c75a <lv_draw_rect+0xf0a>
        img_w = header.w;
    cf5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    cf5e:	f3c3 298a 	ubfx	r9, r3, #10, #11
        img_h = header.h;
    cf62:	f8bd 70a6 	ldrh.w	r7, [sp, #166]	; 0xa6
    cf66:	f3c7 174a 	ubfx	r7, r7, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
    cf6a:	a81e      	add	r0, sp, #120	; 0x78
    cf6c:	4b81      	ldr	r3, [pc, #516]	; (d174 <lv_draw_rect+0x1924>)
    cf6e:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
    cf70:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    cf74:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
    cf78:	f89a 3037 	ldrb.w	r3, [sl, #55]	; 0x37
    cf7c:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
        img_dsc.recolor = dsc->pattern_recolor;
    cf80:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    cf84:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    cf88:	e020      	b.n	cfcc <lv_draw_rect+0x177c>
        lv_draw_label_dsc_init(&label_dsc);
    cf8a:	a822      	add	r0, sp, #136	; 0x88
    cf8c:	4b7a      	ldr	r3, [pc, #488]	; (d178 <lv_draw_rect+0x1928>)
    cf8e:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
    cf90:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    cf94:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        label_dsc.font = dsc->pattern_font;
    cf98:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
    cf9c:	9223      	str	r2, [sp, #140]	; 0x8c
        label_dsc.opa = dsc->pattern_opa;
    cf9e:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    cfa2:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
    cfa6:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
    cfaa:	2100      	movs	r1, #0
    cfac:	9102      	str	r1, [sp, #8]
    cfae:	f647 4118 	movw	r1, #31768	; 0x7c18
    cfb2:	9101      	str	r1, [sp, #4]
    cfb4:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
    cfb8:	9100      	str	r1, [sp, #0]
    cfba:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
    cfbe:	a829      	add	r0, sp, #164	; 0xa4
    cfc0:	4c6e      	ldr	r4, [pc, #440]	; (d17c <lv_draw_rect+0x192c>)
    cfc2:	47a0      	blx	r4
        img_w = s.x;
    cfc4:	f9bd 90a4 	ldrsh.w	r9, [sp, #164]	; 0xa4
        img_h = s.y;
    cfc8:	f9bd 70a6 	ldrsh.w	r7, [sp, #166]	; 0xa6
    if(dsc->pattern_repeat) {
    cfcc:	f89a 3038 	ldrb.w	r3, [sl, #56]	; 0x38
    cfd0:	f013 0f01 	tst.w	r3, #1
    cfd4:	d13f      	bne.n	d056 <lv_draw_rect+0x1806>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cfd6:	9c06      	ldr	r4, [sp, #24]
    cfd8:	8821      	ldrh	r1, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cfda:	8860      	ldrh	r0, [r4, #2]
    cfdc:	88e2      	ldrh	r2, [r4, #6]
    cfde:	3201      	adds	r2, #1
    cfe0:	1a12      	subs	r2, r2, r0
        int32_t obj_h = lv_area_get_height(coords);
    cfe2:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cfe4:	88a3      	ldrh	r3, [r4, #4]
    cfe6:	3301      	adds	r3, #1
    cfe8:	1a5b      	subs	r3, r3, r1
        int32_t obj_w = lv_area_get_width(coords);
    cfea:	b21b      	sxth	r3, r3
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
    cfec:	eba3 0309 	sub.w	r3, r3, r9
    cff0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    cff4:	eb01 0363 	add.w	r3, r1, r3, asr #1
    cff8:	b29b      	uxth	r3, r3
    cffa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
    cffe:	1bd2      	subs	r2, r2, r7
    d000:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    d004:	eb00 0161 	add.w	r1, r0, r1, asr #1
    d008:	b289      	uxth	r1, r1
    d00a:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    d00e:	f109 39ff 	add.w	r9, r9, #4294967295
    d012:	4499      	add	r9, r3
    d014:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    d018:	1e7b      	subs	r3, r7, #1
    d01a:	440b      	add	r3, r1
    d01c:	b29b      	uxth	r3, r3
    d01e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(src_type == LV_IMG_SRC_SYMBOL) {
    d022:	2d02      	cmp	r5, #2
    d024:	f000 80b4 	beq.w	d190 <lv_draw_rect+0x1940>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    d028:	f9ba 2000 	ldrsh.w	r2, [sl]
    d02c:	9906      	ldr	r1, [sp, #24]
    d02e:	a81c      	add	r0, sp, #112	; 0x70
    d030:	4b53      	ldr	r3, [pc, #332]	; (d180 <lv_draw_rect+0x1930>)
    d032:	4798      	blx	r3
        int16_t radius_mask_id = LV_MASK_ID_INV;
    d034:	f04f 34ff 	mov.w	r4, #4294967295
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    d038:	2800      	cmp	r0, #0
    d03a:	f000 86ca 	beq.w	ddd2 <lv_draw_rect+0x2582>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    d03e:	ab1e      	add	r3, sp, #120	; 0x78
    d040:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    d044:	9904      	ldr	r1, [sp, #16]
    d046:	a81c      	add	r0, sp, #112	; 0x70
    d048:	4d48      	ldr	r5, [pc, #288]	; (d16c <lv_draw_rect+0x191c>)
    d04a:	47a8      	blx	r5
        lv_draw_mask_remove_id(radius_mask_id);
    d04c:	4620      	mov	r0, r4
    d04e:	4b44      	ldr	r3, [pc, #272]	; (d160 <lv_draw_rect+0x1910>)
    d050:	4798      	blx	r3
    d052:	f7ff bb82 	b.w	c75a <lv_draw_rect+0xf0a>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    d056:	2300      	movs	r3, #0
    d058:	f9ba 2000 	ldrsh.w	r2, [sl]
    d05c:	9e06      	ldr	r6, [sp, #24]
    d05e:	4631      	mov	r1, r6
    d060:	a829      	add	r0, sp, #164	; 0xa4
    d062:	4c48      	ldr	r4, [pc, #288]	; (d184 <lv_draw_rect+0x1934>)
    d064:	47a0      	blx	r4
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    d066:	2100      	movs	r1, #0
    d068:	a829      	add	r0, sp, #164	; 0xa4
    d06a:	4b47      	ldr	r3, [pc, #284]	; (d188 <lv_draw_rect+0x1938>)
    d06c:	4798      	blx	r3
    d06e:	9007      	str	r0, [sp, #28]
    d070:	88b3      	ldrh	r3, [r6, #4]
    d072:	3301      	adds	r3, #1
    d074:	4634      	mov	r4, r6
    d076:	8832      	ldrh	r2, [r6, #0]
    d078:	1a9b      	subs	r3, r3, r2
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
    d07a:	b21b      	sxth	r3, r3
    d07c:	fb93 f2f9 	sdiv	r2, r3, r9
    d080:	fb09 3312 	mls	r3, r9, r2, r3
    d084:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    d088:	ea4f 0b63 	mov.w	fp, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d08c:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
    d090:	8873      	ldrh	r3, [r6, #2]
    d092:	1c4a      	adds	r2, r1, #1
    d094:	1ad2      	subs	r2, r2, r3
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
    d096:	b210      	sxth	r0, r2
    d098:	fb90 f2f7 	sdiv	r2, r0, r7
    d09c:	fb07 0212 	mls	r2, r7, r2, r0
    d0a0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        coords_tmp.y1 = coords->y1 - ofs_y;
    d0a4:	eba3 0362 	sub.w	r3, r3, r2, asr #1
    d0a8:	b29b      	uxth	r3, r3
    d0aa:	b21a      	sxth	r2, r3
    d0ac:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    d0b0:	b2bf      	uxth	r7, r7
    d0b2:	1e78      	subs	r0, r7, #1
    d0b4:	4403      	add	r3, r0
    d0b6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    d0ba:	4291      	cmp	r1, r2
    d0bc:	db48      	blt.n	d150 <lv_draw_rect+0x1900>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d0be:	f8df 80cc 	ldr.w	r8, [pc, #204]	; d18c <lv_draw_rect+0x193c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    d0c2:	4e2a      	ldr	r6, [pc, #168]	; (d16c <lv_draw_rect+0x191c>)
    d0c4:	f8cd 9014 	str.w	r9, [sp, #20]
    d0c8:	46a1      	mov	r9, r4
    d0ca:	e02e      	b.n	d12a <lv_draw_rect+0x18da>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d0cc:	2300      	movs	r3, #0
    d0ce:	9300      	str	r3, [sp, #0]
    d0d0:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d0d4:	aa22      	add	r2, sp, #136	; 0x88
    d0d6:	9904      	ldr	r1, [sp, #16]
    d0d8:	a81c      	add	r0, sp, #112	; 0x70
    d0da:	47c0      	blx	r8
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    d0dc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d0e0:	4423      	add	r3, r4
    d0e2:	b21b      	sxth	r3, r3
    d0e4:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    d0e8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    d0ec:	4422      	add	r2, r4
    d0ee:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    d0f2:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    d0f6:	429a      	cmp	r2, r3
    d0f8:	db08      	blt.n	d10c <lv_draw_rect+0x18bc>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d0fa:	2d02      	cmp	r5, #2
    d0fc:	d0e6      	beq.n	d0cc <lv_draw_rect+0x187c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    d0fe:	ab1e      	add	r3, sp, #120	; 0x78
    d100:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    d104:	9904      	ldr	r1, [sp, #16]
    d106:	a81c      	add	r0, sp, #112	; 0x70
    d108:	47b0      	blx	r6
    d10a:	e7e7      	b.n	d0dc <lv_draw_rect+0x188c>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    d10c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d110:	443b      	add	r3, r7
    d112:	b21b      	sxth	r3, r3
    d114:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    d118:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
    d11c:	443a      	add	r2, r7
    d11e:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    d122:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
    d126:	429a      	cmp	r2, r3
    d128:	db12      	blt.n	d150 <lv_draw_rect+0x1900>
            coords_tmp.x1 = coords->x1 - ofs_x;
    d12a:	f8b9 3000 	ldrh.w	r3, [r9]
    d12e:	eba3 030b 	sub.w	r3, r3, fp
    d132:	b29b      	uxth	r3, r3
    d134:	b21a      	sxth	r2, r3
    d136:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    d13a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    d13e:	1e61      	subs	r1, r4, #1
    d140:	440b      	add	r3, r1
    d142:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    d146:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
    d14a:	4293      	cmp	r3, r2
    d14c:	dad5      	bge.n	d0fa <lv_draw_rect+0x18aa>
    d14e:	e7dd      	b.n	d10c <lv_draw_rect+0x18bc>
        lv_draw_mask_remove_id(radius_mask_id);
    d150:	9807      	ldr	r0, [sp, #28]
    d152:	4b03      	ldr	r3, [pc, #12]	; (d160 <lv_draw_rect+0x1910>)
    d154:	4798      	blx	r3
    d156:	f7ff bb00 	b.w	c75a <lv_draw_rect+0xf0a>
    d15a:	bf00      	nop
    d15c:	000116a9 	.word	0x000116a9
    d160:	0000b38d 	.word	0x0000b38d
    d164:	00006dc9 	.word	0x00006dc9
    d168:	00008f35 	.word	0x00008f35
    d16c:	00008d19 	.word	0x00008d19
    d170:	0000f0c1 	.word	0x0000f0c1
    d174:	00008c75 	.word	0x00008c75
    d178:	00008f99 	.word	0x00008f99
    d17c:	00012559 	.word	0x00012559
    d180:	00010931 	.word	0x00010931
    d184:	0000b54d 	.word	0x0000b54d
    d188:	0000b301 	.word	0x0000b301
    d18c:	00008ff1 	.word	0x00008ff1
            coords_tmp.y1 += y_corr;
    d190:	f002 0201 	and.w	r2, r2, #1
    d194:	4411      	add	r1, r2
    d196:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            coords_tmp.y2 += y_corr;
    d19a:	4413      	add	r3, r2
    d19c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    d1a0:	f9ba 2000 	ldrsh.w	r2, [sl]
    d1a4:	4621      	mov	r1, r4
    d1a6:	a81c      	add	r0, sp, #112	; 0x70
    d1a8:	4b82      	ldr	r3, [pc, #520]	; (d3b4 <lv_draw_rect+0x1b64>)
    d1aa:	4798      	blx	r3
    d1ac:	b9a8      	cbnz	r0, d1da <lv_draw_rect+0x198a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    d1ae:	2300      	movs	r3, #0
    d1b0:	f9ba 2000 	ldrsh.w	r2, [sl]
    d1b4:	9906      	ldr	r1, [sp, #24]
    d1b6:	a829      	add	r0, sp, #164	; 0xa4
    d1b8:	4c7f      	ldr	r4, [pc, #508]	; (d3b8 <lv_draw_rect+0x1b68>)
    d1ba:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    d1bc:	2100      	movs	r1, #0
    d1be:	a829      	add	r0, sp, #164	; 0xa4
    d1c0:	4b7e      	ldr	r3, [pc, #504]	; (d3bc <lv_draw_rect+0x1b6c>)
    d1c2:	4798      	blx	r3
    d1c4:	4604      	mov	r4, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    d1c6:	2300      	movs	r3, #0
    d1c8:	9300      	str	r3, [sp, #0]
    d1ca:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d1ce:	aa22      	add	r2, sp, #136	; 0x88
    d1d0:	9904      	ldr	r1, [sp, #16]
    d1d2:	a81c      	add	r0, sp, #112	; 0x70
    d1d4:	4d7a      	ldr	r5, [pc, #488]	; (d3c0 <lv_draw_rect+0x1b70>)
    d1d6:	47a8      	blx	r5
    d1d8:	e738      	b.n	d04c <lv_draw_rect+0x17fc>
        int16_t radius_mask_id = LV_MASK_ID_INV;
    d1da:	f04f 34ff 	mov.w	r4, #4294967295
    d1de:	e7f2      	b.n	d1c6 <lv_draw_rect+0x1976>
    draw_area.x1 -= disp_area->x1;
    d1e0:	8a29      	ldrh	r1, [r5, #16]
    d1e2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d1e6:	1a5b      	subs	r3, r3, r1
    d1e8:	b29a      	uxth	r2, r3
    d1ea:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    d1ee:	8a68      	ldrh	r0, [r5, #18]
    d1f0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    d1f4:	1a1b      	subs	r3, r3, r0
    d1f6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    d1fa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    d1fe:	1a5b      	subs	r3, r3, r1
    d200:	b29b      	uxth	r3, r3
    d202:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    d206:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    d20a:	1a09      	subs	r1, r1, r0
    d20c:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d210:	3301      	adds	r3, #1
    d212:	1a9b      	subs	r3, r3, r2
    d214:	b21b      	sxth	r3, r3
    d216:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    d218:	9309      	str	r3, [sp, #36]	; 0x24
    d21a:	4618      	mov	r0, r3
    d21c:	4b69      	ldr	r3, [pc, #420]	; (d3c4 <lv_draw_rect+0x1b74>)
    d21e:	4798      	blx	r3
    d220:	4683      	mov	fp, r0
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    d222:	4b69      	ldr	r3, [pc, #420]	; (d3c8 <lv_draw_rect+0x1b78>)
    d224:	4798      	blx	r3
    if(other_mask_cnt) simple_mode = false;
    d226:	b948      	cbnz	r0, d23c <lv_draw_rect+0x19ec>
    else if(dsc->border_side != LV_BORDER_SIDE_FULL) simple_mode = false;
    d228:	f9ba 8012 	ldrsh.w	r8, [sl, #18]
    d22c:	f1b8 0f0f 	cmp.w	r8, #15
    d230:	bf14      	ite	ne
    d232:	f04f 0800 	movne.w	r8, #0
    d236:	f04f 0801 	moveq.w	r8, #1
    d23a:	e001      	b.n	d240 <lv_draw_rect+0x19f0>
    if(other_mask_cnt) simple_mode = false;
    d23c:	f04f 0800 	mov.w	r8, #0
    int32_t rout = dsc->radius;
    d240:	f9ba 2000 	ldrsh.w	r2, [sl]
    d244:	9e06      	ldr	r6, [sp, #24]
    d246:	88b3      	ldrh	r3, [r6, #4]
    d248:	3301      	adds	r3, #1
    d24a:	8831      	ldrh	r1, [r6, #0]
    d24c:	1a5b      	subs	r3, r3, r1
    int32_t coords_w = lv_area_get_width(coords);
    d24e:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d250:	88f3      	ldrh	r3, [r6, #6]
    d252:	3301      	adds	r3, #1
    d254:	8870      	ldrh	r0, [r6, #2]
    d256:	1a1b      	subs	r3, r3, r0
    int32_t coords_h = lv_area_get_height(coords);
    d258:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    d25a:	428b      	cmp	r3, r1
    d25c:	bfa8      	it	ge
    d25e:	460b      	movge	r3, r1
    if(rout > short_side >> 1) rout = short_side >> 1;
    d260:	105b      	asrs	r3, r3, #1
    d262:	4293      	cmp	r3, r2
    d264:	bfa8      	it	ge
    d266:	4613      	movge	r3, r2
    d268:	461a      	mov	r2, r3
    d26a:	930a      	str	r3, [sp, #40]	; 0x28
    if(rout > 0) {
    d26c:	2b00      	cmp	r3, #0
    d26e:	f340 8088 	ble.w	d382 <lv_draw_rect+0x1b32>
        lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
    d272:	2300      	movs	r3, #0
    d274:	4631      	mov	r1, r6
    d276:	a822      	add	r0, sp, #136	; 0x88
    d278:	4e4f      	ldr	r6, [pc, #316]	; (d3b8 <lv_draw_rect+0x1b68>)
    d27a:	47b0      	blx	r6
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    d27c:	2100      	movs	r1, #0
    d27e:	a822      	add	r0, sp, #136	; 0x88
    d280:	4b4e      	ldr	r3, [pc, #312]	; (d3bc <lv_draw_rect+0x1b6c>)
    d282:	4798      	blx	r3
    d284:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t rin = rout - dsc->border_width;
    d286:	f9ba 6010 	ldrsh.w	r6, [sl, #16]
    d28a:	9a06      	ldr	r2, [sp, #24]
    d28c:	1e53      	subs	r3, r2, #1
    d28e:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    d290:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    d292:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d296:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    d29a:	4283      	cmp	r3, r0
    d29c:	d1f9      	bne.n	d292 <lv_draw_rect+0x1a42>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    d29e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    d2a2:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    d2a6:	f013 0f04 	tst.w	r3, #4
    d2aa:	d06e      	beq.n	d38a <lv_draw_rect+0x1b3a>
    d2ac:	b2b1      	uxth	r1, r6
    d2ae:	440a      	add	r2, r1
    d2b0:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    d2b4:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    d2b8:	f013 0f08 	tst.w	r3, #8
    d2bc:	d06a      	beq.n	d394 <lv_draw_rect+0x1b44>
    d2be:	b2b1      	uxth	r1, r6
    d2c0:	1a52      	subs	r2, r2, r1
    d2c2:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    d2c6:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    d2ca:	f013 0f02 	tst.w	r3, #2
    d2ce:	d066      	beq.n	d39e <lv_draw_rect+0x1b4e>
    d2d0:	b2b1      	uxth	r1, r6
    d2d2:	440a      	add	r2, r1
    d2d4:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    d2d8:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    d2dc:	f013 0f01 	tst.w	r3, #1
    d2e0:	d062      	beq.n	d3a8 <lv_draw_rect+0x1b58>
    d2e2:	b2b3      	uxth	r3, r6
    d2e4:	1ad3      	subs	r3, r2, r3
    d2e6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    lv_draw_mask_radius_init(&mask_rin_param, &area_small, rout - dsc->border_width, true);
    d2ea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d2ee:	fa1f f789 	uxth.w	r7, r9
    d2f2:	1bba      	subs	r2, r7, r6
    d2f4:	2301      	movs	r3, #1
    d2f6:	b212      	sxth	r2, r2
    d2f8:	a91a      	add	r1, sp, #104	; 0x68
    d2fa:	a829      	add	r0, sp, #164	; 0xa4
    d2fc:	4e2e      	ldr	r6, [pc, #184]	; (d3b8 <lv_draw_rect+0x1b68>)
    d2fe:	47b0      	blx	r6
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    d300:	2100      	movs	r1, #0
    d302:	a829      	add	r0, sp, #164	; 0xa4
    d304:	4b2d      	ldr	r3, [pc, #180]	; (d3bc <lv_draw_rect+0x1b6c>)
    d306:	4798      	blx	r3
    d308:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
    d30a:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    d30e:	3b01      	subs	r3, #1
    d310:	454b      	cmp	r3, r9
    d312:	bfb8      	it	lt
    d314:	464b      	movlt	r3, r9
    d316:	4619      	mov	r1, r3
    d318:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t color = dsc->border_color;
    d31a:	f8ba 300e 	ldrh.w	r3, [sl, #14]
    d31e:	f8ad 3014 	strh.w	r3, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->border_blend_mode;
    d322:	f89a 6015 	ldrb.w	r6, [sl, #21]
    if(simple_mode) {
    d326:	f1b8 0f00 	cmp.w	r8, #0
    d32a:	f000 81be 	beq.w	d6aa <lv_draw_rect+0x1e5a>
        int32_t upper_corner_end = coords->y1 - disp_area->y1 + corner_size;
    d32e:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    d332:	9806      	ldr	r0, [sp, #24]
    d334:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    d338:	1ad2      	subs	r2, r2, r3
    d33a:	440a      	add	r2, r1
        upper_corner_end = LV_MATH_MIN(upper_corner_end, draw_area.y2);
    d33c:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
    d340:	4291      	cmp	r1, r2
    d342:	bfa8      	it	ge
    d344:	4611      	movge	r1, r2
    d346:	910b      	str	r1, [sp, #44]	; 0x2c
        fill_area.x1 = coords->x1;
    d348:	8802      	ldrh	r2, [r0, #0]
    d34a:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    d34e:	8882      	ldrh	r2, [r0, #4]
    d350:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    d354:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    d358:	4413      	add	r3, r2
    d35a:	b21b      	sxth	r3, r3
    d35c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d360:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    d364:	4690      	mov	r8, r2
    d366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d368:	4293      	cmp	r3, r2
    d36a:	f2c0 80b2 	blt.w	d4d2 <lv_draw_rect+0x1c82>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d36e:	f8df 905c 	ldr.w	r9, [pc, #92]	; d3cc <lv_draw_rect+0x1b7c>
    d372:	f8cd b01c 	str.w	fp, [sp, #28]
    d376:	46b3      	mov	fp, r6
    d378:	4626      	mov	r6, r4
    d37a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    d37e:	4682      	mov	sl, r0
    d380:	e054      	b.n	d42c <lv_draw_rect+0x1bdc>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d382:	f04f 33ff 	mov.w	r3, #4294967295
    d386:	930e      	str	r3, [sp, #56]	; 0x38
    d388:	e77d      	b.n	d286 <lv_draw_rect+0x1a36>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    d38a:	990a      	ldr	r1, [sp, #40]	; 0x28
    d38c:	1871      	adds	r1, r6, r1
    d38e:	4249      	negs	r1, r1
    d390:	b289      	uxth	r1, r1
    d392:	e78c      	b.n	d2ae <lv_draw_rect+0x1a5e>
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    d394:	990a      	ldr	r1, [sp, #40]	; 0x28
    d396:	1871      	adds	r1, r6, r1
    d398:	4249      	negs	r1, r1
    d39a:	b289      	uxth	r1, r1
    d39c:	e790      	b.n	d2c0 <lv_draw_rect+0x1a70>
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    d39e:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3a0:	1871      	adds	r1, r6, r1
    d3a2:	4249      	negs	r1, r1
    d3a4:	b289      	uxth	r1, r1
    d3a6:	e794      	b.n	d2d2 <lv_draw_rect+0x1a82>
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    d3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d3aa:	18f3      	adds	r3, r6, r3
    d3ac:	425b      	negs	r3, r3
    d3ae:	b29b      	uxth	r3, r3
    d3b0:	e798      	b.n	d2e4 <lv_draw_rect+0x1a94>
    d3b2:	bf00      	nop
    d3b4:	00010931 	.word	0x00010931
    d3b8:	0000b54d 	.word	0x0000b54d
    d3bc:	0000b301 	.word	0x0000b301
    d3c0:	00008ff1 	.word	0x00008ff1
    d3c4:	00011a29 	.word	0x00011a29
    d3c8:	0000b3e5 	.word	0x0000b3e5
    d3cc:	00006dc9 	.word	0x00006dc9
            fill_area2.x1 = coords->x2 - rout + 1;
    d3d0:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    d3d4:	1c5a      	adds	r2, r3, #1
    d3d6:	1bd2      	subs	r2, r2, r7
    d3d8:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    d3dc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    d3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d3e2:	1a9b      	subs	r3, r3, r2
    d3e4:	3301      	adds	r3, #1
    d3e6:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    d3ea:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    d3ee:	440a      	add	r2, r1
    d3f0:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    d3f2:	f8cd b008 	str.w	fp, [sp, #8]
    d3f6:	9601      	str	r6, [sp, #4]
    d3f8:	9400      	str	r4, [sp, #0]
    d3fa:	9a07      	ldr	r2, [sp, #28]
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	bfa8      	it	ge
    d400:	18d2      	addge	r2, r2, r3
    d402:	4613      	mov	r3, r2
    d404:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d408:	a91e      	add	r1, sp, #120	; 0x78
    d40a:	9804      	ldr	r0, [sp, #16]
    d40c:	47c8      	blx	r9
            fill_area.y1++;
    d40e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d412:	3301      	adds	r3, #1
    d414:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    d418:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d41c:	3301      	adds	r3, #1
    d41e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    d422:	f108 0801 	add.w	r8, r8, #1
    d426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d428:	4543      	cmp	r3, r8
    d42a:	db4c      	blt.n	d4c6 <lv_draw_rect+0x1c76>
            _lv_memset_ff(mask_buf, draw_area_w);
    d42c:	9909      	ldr	r1, [sp, #36]	; 0x24
    d42e:	9c07      	ldr	r4, [sp, #28]
    d430:	4620      	mov	r0, r4
    d432:	4bc7      	ldr	r3, [pc, #796]	; (d750 <lv_draw_rect+0x1f00>)
    d434:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d436:	8a6a      	ldrh	r2, [r5, #18]
    d438:	4442      	add	r2, r8
    d43a:	8a29      	ldrh	r1, [r5, #16]
    d43c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d440:	4419      	add	r1, r3
    d442:	9b08      	ldr	r3, [sp, #32]
    d444:	b212      	sxth	r2, r2
    d446:	b209      	sxth	r1, r1
    d448:	9407      	str	r4, [sp, #28]
    d44a:	4620      	mov	r0, r4
    d44c:	4cc1      	ldr	r4, [pc, #772]	; (d754 <lv_draw_rect+0x1f04>)
    d44e:	47a0      	blx	r4
    d450:	4604      	mov	r4, r0
            fill_area2.y1 = fill_area.y1;
    d452:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d456:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    d45a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d45e:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = coords->x1;
    d462:	f9ba 3000 	ldrsh.w	r3, [sl]
    d466:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    d46a:	3b01      	subs	r3, #1
    d46c:	443b      	add	r3, r7
    d46e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d472:	f8cd b008 	str.w	fp, [sp, #8]
    d476:	9601      	str	r6, [sp, #4]
    d478:	9000      	str	r0, [sp, #0]
    d47a:	9b07      	ldr	r3, [sp, #28]
    d47c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d480:	a91e      	add	r1, sp, #120	; 0x78
    d482:	9804      	ldr	r0, [sp, #16]
    d484:	47c8      	blx	r9
            if(fill_area2.y2 < coords->y1 + dsc->border_width) {
    d486:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    d48a:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    d48e:	990c      	ldr	r1, [sp, #48]	; 0x30
    d490:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    d494:	440b      	add	r3, r1
    d496:	429a      	cmp	r2, r3
    d498:	da9a      	bge.n	d3d0 <lv_draw_rect+0x1b80>
                fill_area2.x1 = coords->x1 + rout;
    d49a:	f8ba 3000 	ldrh.w	r3, [sl]
    d49e:	443b      	add	r3, r7
    d4a0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    d4a4:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d4a8:	1bdb      	subs	r3, r3, r7
    d4aa:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d4ae:	f8cd b008 	str.w	fp, [sp, #8]
    d4b2:	9601      	str	r6, [sp, #4]
    d4b4:	2301      	movs	r3, #1
    d4b6:	9300      	str	r3, [sp, #0]
    d4b8:	2300      	movs	r3, #0
    d4ba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d4be:	a91e      	add	r1, sp, #120	; 0x78
    d4c0:	9804      	ldr	r0, [sp, #16]
    d4c2:	47c8      	blx	r9
    d4c4:	e784      	b.n	d3d0 <lv_draw_rect+0x1b80>
    d4c6:	4634      	mov	r4, r6
    d4c8:	465e      	mov	r6, fp
    d4ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d4ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
        int32_t lower_corner_end = coords->y2 - disp_area->y1 - corner_size;
    d4d2:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    d4d6:	9a06      	ldr	r2, [sp, #24]
    d4d8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    d4dc:	1ad2      	subs	r2, r2, r3
    d4de:	990d      	ldr	r1, [sp, #52]	; 0x34
    d4e0:	1a52      	subs	r2, r2, r1
        lower_corner_end = LV_MATH_MAX(lower_corner_end, draw_area.y1);
    d4e2:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
    d4e6:	4590      	cmp	r8, r2
    d4e8:	bfb8      	it	lt
    d4ea:	4690      	movlt	r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    d4ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d4ee:	4541      	cmp	r1, r8
    d4f0:	bfa8      	it	ge
    d4f2:	f101 0801 	addge.w	r8, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    d4f6:	4443      	add	r3, r8
    d4f8:	b21b      	sxth	r3, r3
    d4fa:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d4fe:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    d502:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d506:	4598      	cmp	r8, r3
    d508:	f300 808d 	bgt.w	d626 <lv_draw_rect+0x1dd6>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d50c:	f8df 9248 	ldr.w	r9, [pc, #584]	; d758 <lv_draw_rect+0x1f08>
    d510:	f8cd b01c 	str.w	fp, [sp, #28]
    d514:	46b3      	mov	fp, r6
    d516:	4626      	mov	r6, r4
    d518:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    d51c:	f8dd a018 	ldr.w	sl, [sp, #24]
    d520:	e02e      	b.n	d580 <lv_draw_rect+0x1d30>
            fill_area2.x1 = coords->x2 - rout + 1;
    d522:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    d526:	1c5a      	adds	r2, r3, #1
    d528:	1bd2      	subs	r2, r2, r7
    d52a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    d52e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    d532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d534:	1a9b      	subs	r3, r3, r2
    d536:	3301      	adds	r3, #1
    d538:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    d53c:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    d540:	440a      	add	r2, r1
    d542:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    d544:	f8cd b008 	str.w	fp, [sp, #8]
    d548:	9601      	str	r6, [sp, #4]
    d54a:	9400      	str	r4, [sp, #0]
    d54c:	9a07      	ldr	r2, [sp, #28]
    d54e:	2b00      	cmp	r3, #0
    d550:	bfa8      	it	ge
    d552:	18d2      	addge	r2, r2, r3
    d554:	4613      	mov	r3, r2
    d556:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d55a:	a91e      	add	r1, sp, #120	; 0x78
    d55c:	9804      	ldr	r0, [sp, #16]
    d55e:	47c8      	blx	r9
            fill_area.y1++;
    d560:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d564:	3301      	adds	r3, #1
    d566:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    d56a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d56e:	3301      	adds	r3, #1
    d570:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    d574:	f108 0801 	add.w	r8, r8, #1
    d578:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d57c:	4598      	cmp	r8, r3
    d57e:	dc4c      	bgt.n	d61a <lv_draw_rect+0x1dca>
            _lv_memset_ff(mask_buf, draw_area_w);
    d580:	9909      	ldr	r1, [sp, #36]	; 0x24
    d582:	9c07      	ldr	r4, [sp, #28]
    d584:	4620      	mov	r0, r4
    d586:	4b72      	ldr	r3, [pc, #456]	; (d750 <lv_draw_rect+0x1f00>)
    d588:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d58a:	8a6a      	ldrh	r2, [r5, #18]
    d58c:	4442      	add	r2, r8
    d58e:	8a29      	ldrh	r1, [r5, #16]
    d590:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d594:	4419      	add	r1, r3
    d596:	9b08      	ldr	r3, [sp, #32]
    d598:	b212      	sxth	r2, r2
    d59a:	b209      	sxth	r1, r1
    d59c:	9407      	str	r4, [sp, #28]
    d59e:	4620      	mov	r0, r4
    d5a0:	4c6c      	ldr	r4, [pc, #432]	; (d754 <lv_draw_rect+0x1f04>)
    d5a2:	47a0      	blx	r4
    d5a4:	4604      	mov	r4, r0
            fill_area2.x1 = coords->x1;
    d5a6:	f9ba 3000 	ldrsh.w	r3, [sl]
    d5aa:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    d5ae:	3b01      	subs	r3, #1
    d5b0:	443b      	add	r3, r7
    d5b2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    d5b6:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d5ba:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    d5be:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d5c2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d5c6:	f8cd b008 	str.w	fp, [sp, #8]
    d5ca:	9601      	str	r6, [sp, #4]
    d5cc:	9000      	str	r0, [sp, #0]
    d5ce:	9b07      	ldr	r3, [sp, #28]
    d5d0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d5d4:	a91e      	add	r1, sp, #120	; 0x78
    d5d6:	9804      	ldr	r0, [sp, #16]
    d5d8:	47c8      	blx	r9
            if(fill_area2.y2 > coords->y2 - dsc->border_width) {
    d5da:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    d5de:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    d5e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d5e4:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    d5e8:	1a5b      	subs	r3, r3, r1
    d5ea:	429a      	cmp	r2, r3
    d5ec:	dd99      	ble.n	d522 <lv_draw_rect+0x1cd2>
                fill_area2.x1 = coords->x1 + rout;
    d5ee:	f8ba 3000 	ldrh.w	r3, [sl]
    d5f2:	443b      	add	r3, r7
    d5f4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    d5f8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    d5fc:	1bdb      	subs	r3, r3, r7
    d5fe:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d602:	f8cd b008 	str.w	fp, [sp, #8]
    d606:	9601      	str	r6, [sp, #4]
    d608:	2301      	movs	r3, #1
    d60a:	9300      	str	r3, [sp, #0]
    d60c:	2300      	movs	r3, #0
    d60e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d612:	a91e      	add	r1, sp, #120	; 0x78
    d614:	9804      	ldr	r0, [sp, #16]
    d616:	47c8      	blx	r9
    d618:	e783      	b.n	d522 <lv_draw_rect+0x1cd2>
    d61a:	4634      	mov	r4, r6
    d61c:	465e      	mov	r6, fp
    d61e:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d622:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
        fill_area.y1 = coords->y1 + corner_size + 1;
    d626:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    d62a:	9906      	ldr	r1, [sp, #24]
    d62c:	884b      	ldrh	r3, [r1, #2]
    d62e:	3301      	adds	r3, #1
    d630:	4413      	add	r3, r2
    d632:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = coords->y2 - corner_size - 1;
    d636:	88cb      	ldrh	r3, [r1, #6]
    d638:	3b01      	subs	r3, #1
    d63a:	1a9b      	subs	r3, r3, r2
    d63c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = coords->x1;
    d640:	f9b1 3000 	ldrsh.w	r3, [r1]
    d644:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x1 + dsc->border_width - 1;
    d648:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    d64c:	3a01      	subs	r2, #1
    d64e:	4413      	add	r3, r2
    d650:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d654:	9602      	str	r6, [sp, #8]
    d656:	9401      	str	r4, [sp, #4]
    d658:	2701      	movs	r7, #1
    d65a:	9700      	str	r7, [sp, #0]
    d65c:	2300      	movs	r3, #0
    d65e:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    d662:	464a      	mov	r2, r9
    d664:	a91c      	add	r1, sp, #112	; 0x70
    d666:	f8dd 8010 	ldr.w	r8, [sp, #16]
    d66a:	4640      	mov	r0, r8
    d66c:	4d3a      	ldr	r5, [pc, #232]	; (d758 <lv_draw_rect+0x1f08>)
    d66e:	47a8      	blx	r5
        fill_area.x1 = coords->x2 - dsc->border_width + 1;
    d670:	9b06      	ldr	r3, [sp, #24]
    d672:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    d676:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    d67a:	1afb      	subs	r3, r7, r3
    d67c:	4413      	add	r3, r2
    d67e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    d682:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    d686:	9602      	str	r6, [sp, #8]
    d688:	9401      	str	r4, [sp, #4]
    d68a:	9700      	str	r7, [sp, #0]
    d68c:	2300      	movs	r3, #0
    d68e:	464a      	mov	r2, r9
    d690:	a91c      	add	r1, sp, #112	; 0x70
    d692:	4640      	mov	r0, r8
    d694:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
    d696:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d698:	4c30      	ldr	r4, [pc, #192]	; (d75c <lv_draw_rect+0x1f0c>)
    d69a:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    d69c:	980e      	ldr	r0, [sp, #56]	; 0x38
    d69e:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    d6a0:	4658      	mov	r0, fp
    d6a2:	4b2f      	ldr	r3, [pc, #188]	; (d760 <lv_draw_rect+0x1f10>)
    d6a4:	4798      	blx	r3
    d6a6:	f7ff b872 	b.w	c78e <lv_draw_rect+0xf3e>
        fill_area.x1 = coords->x1;
    d6aa:	9a06      	ldr	r2, [sp, #24]
    d6ac:	f9b2 1000 	ldrsh.w	r1, [r2]
    d6b0:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    d6b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    d6b8:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    d6bc:	f9bd 0062 	ldrsh.w	r0, [sp, #98]	; 0x62
    d6c0:	8a6b      	ldrh	r3, [r5, #18]
    d6c2:	4403      	add	r3, r0
    d6c4:	b21b      	sxth	r3, r3
    d6c6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d6ca:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    d6ce:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    d6d2:	2b04      	cmp	r3, #4
    d6d4:	d029      	beq.n	d72a <lv_draw_rect+0x1eda>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    d6d6:	2b08      	cmp	r3, #8
    d6d8:	d044      	beq.n	d764 <lv_draw_rect+0x1f14>
        volatile bool top_only = false;
    d6da:	2200      	movs	r2, #0
    d6dc:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    d6e0:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
    d6e4:	2b02      	cmp	r3, #2
    d6e6:	d129      	bne.n	d73c <lv_draw_rect+0x1eec>
    d6e8:	2301      	movs	r3, #1
    d6ea:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
    d6ee:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
    d6f2:	b91b      	cbnz	r3, d6fc <lv_draw_rect+0x1eac>
    d6f4:	f89d 804f 	ldrb.w	r8, [sp, #79]	; 0x4f
    d6f8:	f088 0801 	eor.w	r8, r8, #1
    d6fc:	f008 0801 	and.w	r8, r8, #1
    d700:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    d704:	4607      	mov	r7, r0
    d706:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d70a:	4298      	cmp	r0, r3
    d70c:	dcc3      	bgt.n	d696 <lv_draw_rect+0x1e46>
                _lv_memset_ff(mask_buf, draw_area_w);
    d70e:	f8df 8040 	ldr.w	r8, [pc, #64]	; d750 <lv_draw_rect+0x1f00>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    d712:	f8df 9044 	ldr.w	r9, [pc, #68]	; d758 <lv_draw_rect+0x1f08>
    d716:	940a      	str	r4, [sp, #40]	; 0x28
    d718:	f8cd b01c 	str.w	fp, [sp, #28]
    d71c:	f8dd b018 	ldr.w	fp, [sp, #24]
    d720:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    d724:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    d728:	e04e      	b.n	d7c8 <lv_draw_rect+0x1f78>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    d72a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d72c:	4411      	add	r1, r2
    d72e:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        volatile bool top_only = false;
    d732:	2200      	movs	r2, #0
    d734:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    d738:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    d73c:	2b01      	cmp	r3, #1
    d73e:	d016      	beq.n	d76e <lv_draw_rect+0x1f1e>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
    d740:	2b03      	cmp	r3, #3
    d742:	d1d4      	bne.n	d6ee <lv_draw_rect+0x1e9e>
            top_only = true;
    d744:	2301      	movs	r3, #1
    d746:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
    d74a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    d74e:	e7ce      	b.n	d6ee <lv_draw_rect+0x1e9e>
    d750:	00011c91 	.word	0x00011c91
    d754:	0000b33d 	.word	0x0000b33d
    d758:	00006dc9 	.word	0x00006dc9
    d75c:	0000b38d 	.word	0x0000b38d
    d760:	000116a9 	.word	0x000116a9
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    d764:	990d      	ldr	r1, [sp, #52]	; 0x34
    d766:	1a52      	subs	r2, r2, r1
    d768:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    d76c:	e7e1      	b.n	d732 <lv_draw_rect+0x1ee2>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    d76e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    d772:	e7bc      	b.n	d6ee <lv_draw_rect+0x1e9e>
                _lv_memset_ff(mask_buf, draw_area_w);
    d774:	9909      	ldr	r1, [sp, #36]	; 0x24
    d776:	9c07      	ldr	r4, [sp, #28]
    d778:	4620      	mov	r0, r4
    d77a:	47c0      	blx	r8
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    d77c:	8a6a      	ldrh	r2, [r5, #18]
    d77e:	443a      	add	r2, r7
    d780:	8a29      	ldrh	r1, [r5, #16]
    d782:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    d786:	4419      	add	r1, r3
    d788:	9b08      	ldr	r3, [sp, #32]
    d78a:	b212      	sxth	r2, r2
    d78c:	b209      	sxth	r1, r1
    d78e:	9407      	str	r4, [sp, #28]
    d790:	4620      	mov	r0, r4
    d792:	4c98      	ldr	r4, [pc, #608]	; (d9f4 <lv_draw_rect+0x21a4>)
    d794:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    d796:	9602      	str	r6, [sp, #8]
    d798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d79a:	9201      	str	r2, [sp, #4]
    d79c:	9000      	str	r0, [sp, #0]
    d79e:	9b07      	ldr	r3, [sp, #28]
    d7a0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    d7a4:	a91c      	add	r1, sp, #112	; 0x70
    d7a6:	9804      	ldr	r0, [sp, #16]
    d7a8:	47c8      	blx	r9
            fill_area.y1++;
    d7aa:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d7ae:	3301      	adds	r3, #1
    d7b0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    d7b4:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    d7b8:	3301      	adds	r3, #1
    d7ba:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    d7be:	3701      	adds	r7, #1
    d7c0:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    d7c4:	429f      	cmp	r7, r3
    d7c6:	dc1a      	bgt.n	d7fe <lv_draw_rect+0x1fae>
            if(normal ||
    d7c8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    d7cc:	2b00      	cmp	r3, #0
    d7ce:	d1d1      	bne.n	d774 <lv_draw_rect+0x1f24>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    d7d0:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            if(normal ||
    d7d4:	b133      	cbz	r3, d7e4 <lv_draw_rect+0x1f94>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    d7d6:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    d7da:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    d7de:	4453      	add	r3, sl
    d7e0:	429a      	cmp	r2, r3
    d7e2:	ddc7      	ble.n	d774 <lv_draw_rect+0x1f24>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    d7e4:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    d7e8:	2b00      	cmp	r3, #0
    d7ea:	d0de      	beq.n	d7aa <lv_draw_rect+0x1f5a>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    d7ec:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    d7f0:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
    d7f4:	eba3 030a 	sub.w	r3, r3, sl
    d7f8:	429a      	cmp	r2, r3
    d7fa:	dbd6      	blt.n	d7aa <lv_draw_rect+0x1f5a>
    d7fc:	e7ba      	b.n	d774 <lv_draw_rect+0x1f24>
    d7fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
    d802:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d806:	e746      	b.n	d696 <lv_draw_rect+0x1e46>

    lv_point_t s;
    _lv_txt_get_size(&s, dsc->value_str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
    d808:	f9ba 304c 	ldrsh.w	r3, [sl, #76]	; 0x4c
    d80c:	2400      	movs	r4, #0
    d80e:	9402      	str	r4, [sp, #8]
    d810:	f647 4218 	movw	r2, #31768	; 0x7c18
    d814:	9201      	str	r2, [sp, #4]
    d816:	f9ba 204e 	ldrsh.w	r2, [sl, #78]	; 0x4e
    d81a:	9200      	str	r2, [sp, #0]
    d81c:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
    d820:	a81c      	add	r0, sp, #112	; 0x70
    d822:	4d75      	ldr	r5, [pc, #468]	; (d9f8 <lv_draw_rect+0x21a8>)
    d824:	47a8      	blx	r5
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
    d826:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    value_area.y1 = 0;
    d82a:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
    value_area.x2 = s.x - 1;
    d82e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d832:	3b01      	subs	r3, #1
    d834:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    value_area.y2 = s.y - 1;
    d838:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d83c:	3b01      	subs	r3, #1
    d83e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
    d842:	ab1e      	add	r3, sp, #120	; 0x78
    d844:	f89a 2050 	ldrb.w	r2, [sl, #80]	; 0x50
    d848:	a922      	add	r1, sp, #136	; 0x88
    d84a:	9806      	ldr	r0, [sp, #24]
    d84c:	4d6b      	ldr	r5, [pc, #428]	; (d9fc <lv_draw_rect+0x21ac>)
    d84e:	47a8      	blx	r5

    value_area.x1 += p_align.x + dsc->value_ofs_x;
    d850:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    d854:	f8ba 3048 	ldrh.w	r3, [sl, #72]	; 0x48
    d858:	441a      	add	r2, r3
    d85a:	b292      	uxth	r2, r2
    d85c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
    d860:	4413      	add	r3, r2
    d862:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    value_area.y1 += p_align.y + dsc->value_ofs_y;
    d866:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    d86a:	f8ba 104a 	ldrh.w	r1, [sl, #74]	; 0x4a
    d86e:	440b      	add	r3, r1
    d870:	b29b      	uxth	r3, r3
    d872:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
    d876:	4419      	add	r1, r3
    d878:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    value_area.x2 += p_align.x + dsc->value_ofs_x;
    d87c:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
    d880:	440a      	add	r2, r1
    d882:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
    value_area.y2 += p_align.y + dsc->value_ofs_y;
    d886:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
    d88a:	4413      	add	r3, r2
    d88c:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    d890:	a829      	add	r0, sp, #164	; 0xa4
    d892:	4b5b      	ldr	r3, [pc, #364]	; (da00 <lv_draw_rect+0x21b0>)
    d894:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
    d896:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
    d89a:	932a      	str	r3, [sp, #168]	; 0xa8
    label_dsc.letter_space = dsc->value_letter_space;
    d89c:	f8ba 304c 	ldrh.w	r3, [sl, #76]	; 0x4c
    d8a0:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    label_dsc.line_space = dsc->value_line_space;
    d8a4:	f8ba 304e 	ldrh.w	r3, [sl, #78]	; 0x4e
    d8a8:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    label_dsc.color = dsc->value_color;
    d8ac:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    d8b0:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    label_dsc.opa = dsc->value_opa;
    d8b4:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    d8b8:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac

    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
    d8bc:	9400      	str	r4, [sp, #0]
    d8be:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    d8c2:	aa29      	add	r2, sp, #164	; 0xa4
    d8c4:	9904      	ldr	r1, [sp, #16]
    d8c6:	a822      	add	r0, sp, #136	; 0x88
    d8c8:	4c4e      	ldr	r4, [pc, #312]	; (da04 <lv_draw_rect+0x21b4>)
    d8ca:	47a0      	blx	r4
    d8cc:	f7fe bf67 	b.w	c79e <lv_draw_rect+0xf4e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d8d0:	1c72      	adds	r2, r6, #1
    d8d2:	9b06      	ldr	r3, [sp, #24]
    d8d4:	1ad2      	subs	r2, r2, r3
    int32_t inner_w = lv_area_get_width(&area_inner);
    d8d6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d8d8:	1c6b      	adds	r3, r5, #1
    d8da:	9907      	ldr	r1, [sp, #28]
    d8dc:	1a5b      	subs	r3, r3, r1
    int32_t inner_h = lv_area_get_height(&area_inner);
    d8de:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
    d8e0:	429a      	cmp	r2, r3
    d8e2:	bfa8      	it	ge
    d8e4:	461a      	movge	r2, r3
    if(rin > short_side >> 1) rin = short_side >> 1;
    d8e6:	1052      	asrs	r2, r2, #1
    d8e8:	9b08      	ldr	r3, [sp, #32]
    d8ea:	429a      	cmp	r2, r3
    d8ec:	bfa8      	it	ge
    d8ee:	461a      	movge	r2, r3
    int32_t rout = rin + dsc->outline_width;
    d8f0:	9b05      	ldr	r3, [sp, #20]
    d8f2:	4413      	add	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d8f4:	3701      	adds	r7, #1
    d8f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    d8f8:	1a79      	subs	r1, r7, r1
    int32_t coords_out_w = lv_area_get_width(&area_outer);
    d8fa:	b208      	sxth	r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d8fc:	1c61      	adds	r1, r4, #1
    d8fe:	eba1 0108 	sub.w	r1, r1, r8
    int32_t coords_out_h = lv_area_get_height(&area_outer);
    d902:	b209      	sxth	r1, r1
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    d904:	4281      	cmp	r1, r0
    d906:	bfa8      	it	ge
    d908:	4601      	movge	r1, r0
    if(rout > short_side >> 1) rout = short_side >> 1;
    d90a:	1049      	asrs	r1, r1, #1
    d90c:	4299      	cmp	r1, r3
    d90e:	bfa8      	it	ge
    d910:	4619      	movge	r1, r3
    d912:	460f      	mov	r7, r1
    d914:	9106      	str	r1, [sp, #24]
    draw_area.x1 -= disp_area->x1;
    d916:	f8b9 0010 	ldrh.w	r0, [r9, #16]
    d91a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d91e:	1a1b      	subs	r3, r3, r0
    d920:	b299      	uxth	r1, r3
    d922:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
    d926:	f8b9 4012 	ldrh.w	r4, [r9, #18]
    d92a:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    d92e:	1b1b      	subs	r3, r3, r4
    d930:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    draw_area.x2 -= disp_area->x1;
    d934:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    d938:	1a1b      	subs	r3, r3, r0
    d93a:	b29b      	uxth	r3, r3
    d93c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.y2 -= disp_area->y1;
    d940:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
    d944:	1b00      	subs	r0, r0, r4
    d946:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d94a:	3301      	adds	r3, #1
    d94c:	1a5b      	subs	r3, r3, r1
    d94e:	b21b      	sxth	r3, r3
    d950:	461e      	mov	r6, r3
    d952:	9307      	str	r3, [sp, #28]
    lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rin, true);
    d954:	2301      	movs	r3, #1
    d956:	a916      	add	r1, sp, #88	; 0x58
    d958:	a822      	add	r0, sp, #136	; 0x88
    d95a:	4d2b      	ldr	r5, [pc, #172]	; (da08 <lv_draw_rect+0x21b8>)
    d95c:	47a8      	blx	r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    d95e:	2100      	movs	r1, #0
    d960:	a822      	add	r0, sp, #136	; 0x88
    d962:	4c2a      	ldr	r4, [pc, #168]	; (da0c <lv_draw_rect+0x21bc>)
    d964:	47a0      	blx	r4
    d966:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rout_param, &area_outer, rout, false);
    d968:	2300      	movs	r3, #0
    d96a:	b23a      	sxth	r2, r7
    d96c:	a918      	add	r1, sp, #96	; 0x60
    d96e:	a829      	add	r0, sp, #164	; 0xa4
    d970:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    d972:	2100      	movs	r1, #0
    d974:	a829      	add	r0, sp, #164	; 0xa4
    d976:	47a0      	blx	r4
    d978:	900d      	str	r0, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    d97a:	9608      	str	r6, [sp, #32]
    d97c:	4630      	mov	r0, r6
    d97e:	4b24      	ldr	r3, [pc, #144]	; (da10 <lv_draw_rect+0x21c0>)
    d980:	4798      	blx	r3
    d982:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    d984:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    lv_color_t color = dsc->outline_color;
    d988:	f8ba 2016 	ldrh.w	r2, [sl, #22]
    d98c:	f8ad 2014 	strh.w	r2, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->outline_blend_mode;
    d990:	f89a 501d 	ldrb.w	r5, [sl, #29]
    if(simple_mode) {
    d994:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d996:	2a00      	cmp	r2, #0
    d998:	f040 81a6 	bne.w	dce8 <lv_draw_rect+0x2498>
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    d99c:	3b01      	subs	r3, #1
    d99e:	42bb      	cmp	r3, r7
    d9a0:	bfb8      	it	lt
    d9a2:	463b      	movlt	r3, r7
    d9a4:	4619      	mov	r1, r3
    d9a6:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t upper_corner_end = area_outer.y1 - disp_area->y1 + corner_size;
    d9a8:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    d9ac:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    d9b0:	1ad2      	subs	r2, r2, r3
    d9b2:	440a      	add	r2, r1
    d9b4:	4611      	mov	r1, r2
    d9b6:	9209      	str	r2, [sp, #36]	; 0x24
        fill_area.x1 = area_outer.x1;
    d9b8:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    d9bc:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    d9c0:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
    d9c4:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    d9c8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    d9cc:	4413      	add	r3, r2
    d9ce:	b21b      	sxth	r3, r3
    d9d0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    d9d4:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    d9d8:	4616      	mov	r6, r2
    d9da:	4291      	cmp	r1, r2
    d9dc:	f2c0 809d 	blt.w	db1a <lv_draw_rect+0x22ca>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    d9e0:	f8df 8030 	ldr.w	r8, [pc, #48]	; da14 <lv_draw_rect+0x21c4>
    d9e4:	462b      	mov	r3, r5
    d9e6:	465d      	mov	r5, fp
    d9e8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    d9ec:	4682      	mov	sl, r0
    d9ee:	469b      	mov	fp, r3
    d9f0:	e03f      	b.n	da72 <lv_draw_rect+0x2222>
    d9f2:	bf00      	nop
    d9f4:	0000b33d 	.word	0x0000b33d
    d9f8:	00012559 	.word	0x00012559
    d9fc:	000109e9 	.word	0x000109e9
    da00:	00008f99 	.word	0x00008f99
    da04:	00008ff1 	.word	0x00008ff1
    da08:	0000b54d 	.word	0x0000b54d
    da0c:	0000b301 	.word	0x0000b301
    da10:	00011a29 	.word	0x00011a29
    da14:	00006dc9 	.word	0x00006dc9
            fill_area2.x1 = area_outer.x2 - rout + 1;
    da18:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    da1c:	1c5a      	adds	r2, r3, #1
    da1e:	1b14      	subs	r4, r2, r4
    da20:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    da24:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    da28:	9a06      	ldr	r2, [sp, #24]
    da2a:	1a9b      	subs	r3, r3, r2
    da2c:	3301      	adds	r3, #1
    da2e:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    da32:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    da36:	440a      	add	r2, r1
    da38:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    da3a:	f8cd b008 	str.w	fp, [sp, #8]
    da3e:	9501      	str	r5, [sp, #4]
    da40:	9700      	str	r7, [sp, #0]
    da42:	2b00      	cmp	r3, #0
    da44:	bfac      	ite	ge
    da46:	4453      	addge	r3, sl
    da48:	f10a 0300 	addlt.w	r3, sl, #0
    da4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    da50:	a91e      	add	r1, sp, #120	; 0x78
    da52:	9804      	ldr	r0, [sp, #16]
    da54:	47c0      	blx	r8
            fill_area.y1++;
    da56:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    da5a:	3301      	adds	r3, #1
    da5c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    da60:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    da64:	3301      	adds	r3, #1
    da66:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    da6a:	3601      	adds	r6, #1
    da6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da6e:	42b3      	cmp	r3, r6
    da70:	db4e      	blt.n	db10 <lv_draw_rect+0x22c0>
            _lv_memset_ff(mask_buf, draw_area_w);
    da72:	9908      	ldr	r1, [sp, #32]
    da74:	4650      	mov	r0, sl
    da76:	4bcc      	ldr	r3, [pc, #816]	; (dda8 <lv_draw_rect+0x2558>)
    da78:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    da7a:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    da7e:	4432      	add	r2, r6
    da80:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    da84:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    da88:	4419      	add	r1, r3
    da8a:	9b07      	ldr	r3, [sp, #28]
    da8c:	b212      	sxth	r2, r2
    da8e:	b209      	sxth	r1, r1
    da90:	4650      	mov	r0, sl
    da92:	4cc6      	ldr	r4, [pc, #792]	; (ddac <lv_draw_rect+0x255c>)
    da94:	47a0      	blx	r4
    da96:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
    da98:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    da9c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    daa0:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    daa4:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = area_outer.x1;
    daa8:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    daac:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    dab0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    dab4:	3b01      	subs	r3, #1
    dab6:	4423      	add	r3, r4
    dab8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    dabc:	f8cd b008 	str.w	fp, [sp, #8]
    dac0:	9501      	str	r5, [sp, #4]
    dac2:	9000      	str	r0, [sp, #0]
    dac4:	4653      	mov	r3, sl
    dac6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    daca:	a91e      	add	r1, sp, #120	; 0x78
    dacc:	9804      	ldr	r0, [sp, #16]
    dace:	47c0      	blx	r8
            if(fill_area2.y2 < area_outer.y1 + dsc->outline_width) {
    dad0:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    dad4:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
    dad8:	990a      	ldr	r1, [sp, #40]	; 0x28
    dada:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    dade:	440b      	add	r3, r1
    dae0:	429a      	cmp	r2, r3
    dae2:	da99      	bge.n	da18 <lv_draw_rect+0x21c8>
                fill_area2.x1 = area_outer.x1 + rout;
    dae4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    dae8:	4423      	add	r3, r4
    daea:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    daee:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    daf2:	1b1b      	subs	r3, r3, r4
    daf4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    daf8:	f8cd b008 	str.w	fp, [sp, #8]
    dafc:	9501      	str	r5, [sp, #4]
    dafe:	2301      	movs	r3, #1
    db00:	9300      	str	r3, [sp, #0]
    db02:	2300      	movs	r3, #0
    db04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    db08:	a91e      	add	r1, sp, #120	; 0x78
    db0a:	9804      	ldr	r0, [sp, #16]
    db0c:	47c0      	blx	r8
    db0e:	e783      	b.n	da18 <lv_draw_rect+0x21c8>
    db10:	465b      	mov	r3, fp
    db12:	46ab      	mov	fp, r5
    db14:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    db18:	461d      	mov	r5, r3
        int32_t lower_corner_end = area_outer.y2 - disp_area->y1 - corner_size;
    db1a:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    db1e:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
    db22:	1af6      	subs	r6, r6, r3
    db24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    db26:	1ab6      	subs	r6, r6, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    db28:	9909      	ldr	r1, [sp, #36]	; 0x24
    db2a:	460a      	mov	r2, r1
    db2c:	42b1      	cmp	r1, r6
    db2e:	bfa4      	itt	ge
    db30:	3201      	addge	r2, #1
    db32:	4616      	movge	r6, r2
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    db34:	4433      	add	r3, r6
    db36:	b21b      	sxth	r3, r3
    db38:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    db3c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    db40:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    db44:	429e      	cmp	r6, r3
    db46:	f300 808c 	bgt.w	dc62 <lv_draw_rect+0x2412>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    db4a:	f8df 8264 	ldr.w	r8, [pc, #612]	; ddb0 <lv_draw_rect+0x2560>
    db4e:	462b      	mov	r3, r5
    db50:	465d      	mov	r5, fp
    db52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    db56:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    db5a:	469b      	mov	fp, r3
    db5c:	e02d      	b.n	dbba <lv_draw_rect+0x236a>
            fill_area2.x1 = area_outer.x2 - rout + 1;
    db5e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    db62:	1c5a      	adds	r2, r3, #1
    db64:	1b14      	subs	r4, r2, r4
    db66:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    db6a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    db6e:	9a06      	ldr	r2, [sp, #24]
    db70:	1a9b      	subs	r3, r3, r2
    db72:	3301      	adds	r3, #1
    db74:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    db78:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    db7c:	440a      	add	r2, r1
    db7e:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    db80:	f8cd b008 	str.w	fp, [sp, #8]
    db84:	9501      	str	r5, [sp, #4]
    db86:	9700      	str	r7, [sp, #0]
    db88:	2b00      	cmp	r3, #0
    db8a:	bfac      	ite	ge
    db8c:	4453      	addge	r3, sl
    db8e:	f10a 0300 	addlt.w	r3, sl, #0
    db92:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    db96:	a91e      	add	r1, sp, #120	; 0x78
    db98:	9804      	ldr	r0, [sp, #16]
    db9a:	47c0      	blx	r8
            fill_area.y1++;
    db9c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dba0:	3301      	adds	r3, #1
    dba2:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    dba6:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dbaa:	3301      	adds	r3, #1
    dbac:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    dbb0:	3601      	adds	r6, #1
    dbb2:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    dbb6:	429e      	cmp	r6, r3
    dbb8:	dc4e      	bgt.n	dc58 <lv_draw_rect+0x2408>
            _lv_memset_ff(mask_buf, draw_area_w);
    dbba:	9908      	ldr	r1, [sp, #32]
    dbbc:	4650      	mov	r0, sl
    dbbe:	4b7a      	ldr	r3, [pc, #488]	; (dda8 <lv_draw_rect+0x2558>)
    dbc0:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dbc2:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    dbc6:	4432      	add	r2, r6
    dbc8:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    dbcc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    dbd0:	4419      	add	r1, r3
    dbd2:	9b07      	ldr	r3, [sp, #28]
    dbd4:	b212      	sxth	r2, r2
    dbd6:	b209      	sxth	r1, r1
    dbd8:	4650      	mov	r0, sl
    dbda:	4c74      	ldr	r4, [pc, #464]	; (ddac <lv_draw_rect+0x255c>)
    dbdc:	47a0      	blx	r4
    dbde:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer.x1;
    dbe0:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    dbe4:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    dbe8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    dbec:	3b01      	subs	r3, #1
    dbee:	4423      	add	r3, r4
    dbf0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    dbf4:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dbf8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    dbfc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dc00:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    dc04:	f8cd b008 	str.w	fp, [sp, #8]
    dc08:	9501      	str	r5, [sp, #4]
    dc0a:	9000      	str	r0, [sp, #0]
    dc0c:	4653      	mov	r3, sl
    dc0e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dc12:	a91e      	add	r1, sp, #120	; 0x78
    dc14:	9804      	ldr	r0, [sp, #16]
    dc16:	47c0      	blx	r8
            if(fill_area2.y2 > area_outer.y2 - dsc->outline_width) {
    dc18:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    dc1c:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    dc20:	9909      	ldr	r1, [sp, #36]	; 0x24
    dc22:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    dc26:	1a5b      	subs	r3, r3, r1
    dc28:	429a      	cmp	r2, r3
    dc2a:	dd98      	ble.n	db5e <lv_draw_rect+0x230e>
                fill_area2.x1 = area_outer.x1 + rout;
    dc2c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    dc30:	4423      	add	r3, r4
    dc32:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    dc36:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dc3a:	1b1b      	subs	r3, r3, r4
    dc3c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dc40:	f8cd b008 	str.w	fp, [sp, #8]
    dc44:	9501      	str	r5, [sp, #4]
    dc46:	2301      	movs	r3, #1
    dc48:	9300      	str	r3, [sp, #0]
    dc4a:	2300      	movs	r3, #0
    dc4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dc50:	a91e      	add	r1, sp, #120	; 0x78
    dc52:	9804      	ldr	r0, [sp, #16]
    dc54:	47c0      	blx	r8
    dc56:	e782      	b.n	db5e <lv_draw_rect+0x230e>
    dc58:	465b      	mov	r3, fp
    dc5a:	46ab      	mov	fp, r5
    dc5c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    dc60:	461d      	mov	r5, r3
        fill_area.y1 = area_outer.y1 + corner_size + 1;
    dc62:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    dc66:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    dc6a:	3201      	adds	r2, #1
    dc6c:	441a      	add	r2, r3
    dc6e:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        fill_area.y2 = area_outer.y2 - corner_size - 1;
    dc72:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    dc76:	3a01      	subs	r2, #1
    dc78:	1ad3      	subs	r3, r2, r3
    dc7a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = area_outer.x1;
    dc7e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    dc82:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x1 + dsc->outline_width - 1;
    dc86:	3b01      	subs	r3, #1
    dc88:	f8ba 2018 	ldrh.w	r2, [sl, #24]
    dc8c:	4413      	add	r3, r2
    dc8e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dc92:	9502      	str	r5, [sp, #8]
    dc94:	f8cd b004 	str.w	fp, [sp, #4]
    dc98:	2601      	movs	r6, #1
    dc9a:	9600      	str	r6, [sp, #0]
    dc9c:	2300      	movs	r3, #0
    dc9e:	f8bd 8014 	ldrh.w	r8, [sp, #20]
    dca2:	4642      	mov	r2, r8
    dca4:	a91c      	add	r1, sp, #112	; 0x70
    dca6:	9f04      	ldr	r7, [sp, #16]
    dca8:	4638      	mov	r0, r7
    dcaa:	4c41      	ldr	r4, [pc, #260]	; (ddb0 <lv_draw_rect+0x2560>)
    dcac:	47a0      	blx	r4
        fill_area.x1 = area_outer.x2 - dsc->outline_width + 1;
    dcae:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
    dcb2:	1993      	adds	r3, r2, r6
    dcb4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
    dcb8:	1a5b      	subs	r3, r3, r1
    dcba:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    dcbe:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    dcc2:	9502      	str	r5, [sp, #8]
    dcc4:	f8cd b004 	str.w	fp, [sp, #4]
    dcc8:	9600      	str	r6, [sp, #0]
    dcca:	2300      	movs	r3, #0
    dccc:	4642      	mov	r2, r8
    dcce:	a91c      	add	r1, sp, #112	; 0x70
    dcd0:	4638      	mov	r0, r7
    dcd2:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rin_id);
    dcd4:	980c      	ldr	r0, [sp, #48]	; 0x30
    dcd6:	4c37      	ldr	r4, [pc, #220]	; (ddb4 <lv_draw_rect+0x2564>)
    dcd8:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    dcda:	980d      	ldr	r0, [sp, #52]	; 0x34
    dcdc:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    dcde:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dce0:	4b35      	ldr	r3, [pc, #212]	; (ddb8 <lv_draw_rect+0x2568>)
    dce2:	4798      	blx	r3
    dce4:	f7fe bdce 	b.w	c884 <lv_draw_rect+0x1034>
        fill_area.x1 = area_outer.x1;
    dce8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    dcec:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    dcf0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    dcf4:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    dcf8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    dcfc:	f8b9 3012 	ldrh.w	r3, [r9, #18]
    dd00:	4413      	add	r3, r2
    dd02:	b21b      	sxth	r3, r3
    dd04:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    dd08:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    dd0c:	4614      	mov	r4, r2
    dd0e:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    dd12:	429a      	cmp	r2, r3
    dd14:	dcde      	bgt.n	dcd4 <lv_draw_rect+0x2484>
            _lv_memset_ff(mask_buf, draw_area_w);
    dd16:	f8df 8090 	ldr.w	r8, [pc, #144]	; dda8 <lv_draw_rect+0x2558>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dd1a:	4f24      	ldr	r7, [pc, #144]	; (ddac <lv_draw_rect+0x255c>)
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    dd1c:	4e24      	ldr	r6, [pc, #144]	; (ddb0 <lv_draw_rect+0x2560>)
    dd1e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    dd22:	462b      	mov	r3, r5
    dd24:	465d      	mov	r5, fp
    dd26:	469b      	mov	fp, r3
            _lv_memset_ff(mask_buf, draw_area_w);
    dd28:	9908      	ldr	r1, [sp, #32]
    dd2a:	4650      	mov	r0, sl
    dd2c:	47c0      	blx	r8
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dd2e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    dd32:	4422      	add	r2, r4
    dd34:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    dd38:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    dd3c:	4419      	add	r1, r3
    dd3e:	9b07      	ldr	r3, [sp, #28]
    dd40:	b212      	sxth	r2, r2
    dd42:	b209      	sxth	r1, r1
    dd44:	4650      	mov	r0, sl
    dd46:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    dd48:	f8cd b008 	str.w	fp, [sp, #8]
    dd4c:	9501      	str	r5, [sp, #4]
    dd4e:	9000      	str	r0, [sp, #0]
    dd50:	4653      	mov	r3, sl
    dd52:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    dd56:	a91c      	add	r1, sp, #112	; 0x70
    dd58:	9804      	ldr	r0, [sp, #16]
    dd5a:	47b0      	blx	r6
            fill_area.y1++;
    dd5c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    dd60:	3301      	adds	r3, #1
    dd62:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    dd66:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    dd6a:	3301      	adds	r3, #1
    dd6c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    dd70:	3401      	adds	r4, #1
    dd72:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    dd76:	429c      	cmp	r4, r3
    dd78:	ddd6      	ble.n	dd28 <lv_draw_rect+0x24d8>
    dd7a:	e7ab      	b.n	dcd4 <lv_draw_rect+0x2484>
    _lv_mem_buf_release(mask_line);
    dd7c:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd7e:	4b0e      	ldr	r3, [pc, #56]	; (ddb8 <lv_draw_rect+0x2568>)
    dd80:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
    dd82:	fb07 f707 	mul.w	r7, r7, r7
    dd86:	2f00      	cmp	r7, #0
    dd88:	f43d af0a 	beq.w	bba0 <lv_draw_rect+0x350>
    dd8c:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd8e:	4602      	mov	r2, r0
    dd90:	1e41      	subs	r1, r0, #1
    dd92:	eb00 0047 	add.w	r0, r0, r7, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSACALE_SHIFT);
    dd96:	f832 3b02 	ldrh.w	r3, [r2], #2
    dd9a:	099b      	lsrs	r3, r3, #6
    dd9c:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
    dda0:	4290      	cmp	r0, r2
    dda2:	d1f8      	bne.n	dd96 <lv_draw_rect+0x2546>
    dda4:	f7fd befc 	b.w	bba0 <lv_draw_rect+0x350>
    dda8:	00011c91 	.word	0x00011c91
    ddac:	0000b33d 	.word	0x0000b33d
    ddb0:	00006dc9 	.word	0x00006dc9
    ddb4:	0000b38d 	.word	0x0000b38d
    ddb8:	000116a9 	.word	0x000116a9
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    ddbc:	9707      	str	r7, [sp, #28]
    ddbe:	4638      	mov	r0, r7
    ddc0:	4b0b      	ldr	r3, [pc, #44]	; (ddf0 <lv_draw_rect+0x25a0>)
    ddc2:	4798      	blx	r3
    ddc4:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    ddc6:	2f00      	cmp	r7, #0
    ddc8:	ddd8      	ble.n	dd7c <lv_draw_rect+0x252c>
    ddca:	2301      	movs	r3, #1
    ddcc:	930b      	str	r3, [sp, #44]	; 0x2c
    ddce:	f7fd be45 	b.w	ba5c <lv_draw_rect+0x20c>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    ddd2:	2300      	movs	r3, #0
    ddd4:	f9ba 2000 	ldrsh.w	r2, [sl]
    ddd8:	9906      	ldr	r1, [sp, #24]
    ddda:	a829      	add	r0, sp, #164	; 0xa4
    dddc:	4c05      	ldr	r4, [pc, #20]	; (ddf4 <lv_draw_rect+0x25a4>)
    ddde:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    dde0:	2100      	movs	r1, #0
    dde2:	a829      	add	r0, sp, #164	; 0xa4
    dde4:	4b04      	ldr	r3, [pc, #16]	; (ddf8 <lv_draw_rect+0x25a8>)
    dde6:	4798      	blx	r3
    dde8:	4604      	mov	r4, r0
    ddea:	f7ff b928 	b.w	d03e <lv_draw_rect+0x17ee>
    ddee:	bf00      	nop
    ddf0:	00011a29 	.word	0x00011a29
    ddf4:	0000b54d 	.word	0x0000b54d
    ddf8:	0000b301 	.word	0x0000b301

0000ddfc <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
    ddfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddfe:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
    de00:	f89d 4004 	ldrb.w	r4, [sp, #4]
    de04:	f36f 0404 	bfc	r4, #0, #5
    de08:	f88d 4004 	strb.w	r4, [sp, #4]
    de0c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    de10:	f36f 144a 	bfc	r4, #5, #6
    de14:	f8ad 4004 	strh.w	r4, [sp, #4]
    de18:	0a24      	lsrs	r4, r4, #8
    de1a:	f36f 04c7 	bfc	r4, #3, #5
    de1e:	f88d 4005 	strb.w	r4, [sp, #5]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    de22:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
    de24:	7804      	ldrb	r4, [r0, #0]
    de26:	f004 041f 	and.w	r4, r4, #31
    de2a:	1f25      	subs	r5, r4, #4
    de2c:	b2ed      	uxtb	r5, r5
    de2e:	2d02      	cmp	r5, #2
    de30:	d90e      	bls.n	de50 <lv_img_buf_get_px_color+0x54>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a deafult alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
    de32:	2c07      	cmp	r4, #7
    de34:	d028      	beq.n	de88 <lv_img_buf_get_px_color+0x8c>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
    de36:	2c08      	cmp	r4, #8
    de38:	d03b      	beq.n	deb2 <lv_img_buf_get_px_color+0xb6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
    de3a:	2c09      	cmp	r4, #9
    de3c:	d050      	beq.n	dee0 <lv_img_buf_get_px_color+0xe4>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    de3e:	2c0a      	cmp	r4, #10
    de40:	d066      	beq.n	df10 <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    de42:	3c0b      	subs	r4, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    de44:	b2e4      	uxtb	r4, r4
    de46:	2c03      	cmp	r4, #3
        p_color = color;
    de48:	bf98      	it	ls
    de4a:	f8ad 3004 	strhls.w	r3, [sp, #4]
    de4e:	e017      	b.n	de80 <lv_img_buf_get_px_color+0x84>
    de50:	4614      	mov	r4, r2
    de52:	460f      	mov	r7, r1
    de54:	4605      	mov	r5, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
    de56:	7800      	ldrb	r0, [r0, #0]
    de58:	f000 001f 	and.w	r0, r0, #31
    de5c:	4b32      	ldr	r3, [pc, #200]	; (df28 <lv_img_buf_get_px_color+0x12c>)
    de5e:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
    de60:	682b      	ldr	r3, [r5, #0]
    de62:	f3c3 238a 	ubfx	r3, r3, #10, #11
    de66:	fb04 7203 	mla	r2, r4, r3, r7
    de6a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    de6e:	fb00 f202 	mul.w	r2, r0, r2
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
    de72:	18b3      	adds	r3, r6, r2
        *d8 = *s8;
    de74:	5cb2      	ldrb	r2, [r6, r2]
    de76:	f88d 2004 	strb.w	r2, [sp, #4]
    de7a:	785b      	ldrb	r3, [r3, #1]
    de7c:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    return p_color;
}
    de80:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    de84:	b003      	add	sp, #12
    de86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    de88:	f001 0307 	and.w	r3, r1, #7
    de8c:	f1c3 0407 	rsb	r4, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
    de90:	6803      	ldr	r3, [r0, #0]
    de92:	f3c3 238a 	ubfx	r3, r3, #10, #11
    de96:	3307      	adds	r3, #7
    de98:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    de9a:	fb02 6603 	mla	r6, r2, r3, r6
    de9e:	eb06 01e1 	add.w	r1, r6, r1, asr #3
    dea2:	7a0b      	ldrb	r3, [r1, #8]
    dea4:	2201      	movs	r2, #1
    dea6:	40a2      	lsls	r2, r4
    dea8:	4013      	ands	r3, r2
    deaa:	4123      	asrs	r3, r4
    deac:	f8ad 3004 	strh.w	r3, [sp, #4]
    deb0:	e7e6      	b.n	de80 <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x3) * 2;
    deb2:	f001 0403 	and.w	r4, r1, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    deb6:	0064      	lsls	r4, r4, #1
    deb8:	f1c4 0406 	rsb	r4, r4, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
    debc:	6803      	ldr	r3, [r0, #0]
    debe:	f3c3 238a 	ubfx	r3, r3, #10, #11
    dec2:	3303      	adds	r3, #3
    dec4:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    dec6:	fb02 6603 	mla	r6, r2, r3, r6
    deca:	eb06 01a1 	add.w	r1, r6, r1, asr #2
    dece:	7c0b      	ldrb	r3, [r1, #16]
    ded0:	2203      	movs	r2, #3
    ded2:	40a2      	lsls	r2, r4
    ded4:	4013      	ands	r3, r2
    ded6:	fa43 f404 	asr.w	r4, r3, r4
    deda:	f8ad 4004 	strh.w	r4, [sp, #4]
    dede:	e7cf      	b.n	de80 <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x1) * 4;
    dee0:	f001 0401 	and.w	r4, r1, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    dee4:	00a4      	lsls	r4, r4, #2
    dee6:	f1c4 0404 	rsb	r4, r4, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
    deea:	6803      	ldr	r3, [r0, #0]
    deec:	f3c3 238a 	ubfx	r3, r3, #10, #11
    def0:	3301      	adds	r3, #1
    def2:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    def4:	fb02 6603 	mla	r6, r2, r3, r6
    def8:	eb06 0161 	add.w	r1, r6, r1, asr #1
    defc:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    df00:	220f      	movs	r2, #15
    df02:	40a2      	lsls	r2, r4
    df04:	4013      	ands	r3, r2
    df06:	fa43 f404 	asr.w	r4, r3, r4
    df0a:	f8ad 4004 	strh.w	r4, [sp, #4]
    df0e:	e7b7      	b.n	de80 <lv_img_buf_get_px_color+0x84>
        uint32_t px  = dsc->header.w * y + x;
    df10:	6803      	ldr	r3, [r0, #0]
    df12:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = buf_u8[px];
    df16:	4431      	add	r1, r6
    df18:	fb02 1103 	mla	r1, r2, r3, r1
    df1c:	f891 3400 	ldrb.w	r3, [r1, #1024]	; 0x400
    df20:	f8ad 3004 	strh.w	r3, [sp, #4]
    df24:	e7ac      	b.n	de80 <lv_img_buf_get_px_color+0x84>
    df26:	bf00      	nop
    df28:	00008cb1 	.word	0x00008cb1

0000df2c <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    df2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df2e:	b085      	sub	sp, #20
    df30:	4604      	mov	r4, r0
    df32:	460d      	mov	r5, r1
    df34:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    df36:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
    df38:	7803      	ldrb	r3, [r0, #0]
    df3a:	f003 031f 	and.w	r3, r3, #31
    df3e:	2b05      	cmp	r3, #5
    df40:	d00a      	beq.n	df58 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
    df42:	2b0b      	cmp	r3, #11
    df44:	d012      	beq.n	df6c <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
    df46:	2b0c      	cmp	r3, #12
    df48:	d027      	beq.n	df9a <lv_img_buf_get_px_alpha+0x6e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
    df4a:	2b0d      	cmp	r3, #13
    df4c:	d049      	beq.n	dfe2 <lv_img_buf_get_px_alpha+0xb6>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    df4e:	2b0e      	cmp	r3, #14
    df50:	d064      	beq.n	e01c <lv_img_buf_get_px_alpha+0xf0>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
    df52:	20ff      	movs	r0, #255	; 0xff
}
    df54:	b005      	add	sp, #20
    df56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
    df58:	6802      	ldr	r2, [r0, #0]
    df5a:	f3c2 228a 	ubfx	r2, r2, #10, #11
    df5e:	fb07 1502 	mla	r5, r7, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    df62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    df66:	4435      	add	r5, r6
    df68:	78a8      	ldrb	r0, [r5, #2]
    df6a:	e7f3      	b.n	df54 <lv_img_buf_get_px_alpha+0x28>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    df6c:	f001 0307 	and.w	r3, r1, #7
    df70:	f1c3 0107 	rsb	r1, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
    df74:	6802      	ldr	r2, [r0, #0]
    df76:	f3c2 228a 	ubfx	r2, r2, #10, #11
    df7a:	3207      	adds	r2, #7
    df7c:	10d2      	asrs	r2, r2, #3
    df7e:	10ed      	asrs	r5, r5, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    df80:	fb07 6202 	mla	r2, r7, r2, r6
    df84:	5d53      	ldrb	r3, [r2, r5]
    df86:	2201      	movs	r2, #1
    df88:	408a      	lsls	r2, r1
    df8a:	4013      	ands	r3, r2
    df8c:	410b      	asrs	r3, r1
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    df8e:	f013 0fff 	tst.w	r3, #255	; 0xff
    df92:	bf0c      	ite	eq
    df94:	20ff      	moveq	r0, #255	; 0xff
    df96:	2000      	movne	r0, #0
    df98:	e7dc      	b.n	df54 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    df9a:	2300      	movs	r3, #0
    df9c:	f88d 3000 	strb.w	r3, [sp]
    dfa0:	2355      	movs	r3, #85	; 0x55
    dfa2:	f88d 3001 	strb.w	r3, [sp, #1]
    dfa6:	23aa      	movs	r3, #170	; 0xaa
    dfa8:	f88d 3002 	strb.w	r3, [sp, #2]
    dfac:	23ff      	movs	r3, #255	; 0xff
    dfae:	f88d 3003 	strb.w	r3, [sp, #3]
        uint8_t bit = (x & 0x3) * 2;
    dfb2:	f001 0303 	and.w	r3, r1, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    dfb6:	005b      	lsls	r3, r3, #1
    dfb8:	f1c3 0106 	rsb	r1, r3, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
    dfbc:	6802      	ldr	r2, [r0, #0]
    dfbe:	f3c2 228a 	ubfx	r2, r2, #10, #11
    dfc2:	3203      	adds	r2, #3
    dfc4:	1092      	asrs	r2, r2, #2
    dfc6:	10ad      	asrs	r5, r5, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    dfc8:	fb07 6202 	mla	r2, r7, r2, r6
    dfcc:	5d53      	ldrb	r3, [r2, r5]
    dfce:	2203      	movs	r2, #3
    dfd0:	408a      	lsls	r2, r1
    dfd2:	4013      	ands	r3, r2
    dfd4:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    dfd6:	aa04      	add	r2, sp, #16
    dfd8:	fa52 f383 	uxtab	r3, r2, r3
    dfdc:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    dfe0:	e7b8      	b.n	df54 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
    dfe2:	4b12      	ldr	r3, [pc, #72]	; (e02c <lv_img_buf_get_px_alpha+0x100>)
    dfe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    dfe6:	f10d 0e10 	add.w	lr, sp, #16
    dfea:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
    dfee:	f005 0301 	and.w	r3, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    dff2:	009b      	lsls	r3, r3, #2
    dff4:	f1c3 0104 	rsb	r1, r3, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
    dff8:	6822      	ldr	r2, [r4, #0]
    dffa:	f3c2 228a 	ubfx	r2, r2, #10, #11
    dffe:	3201      	adds	r2, #1
    e000:	1052      	asrs	r2, r2, #1
    e002:	106d      	asrs	r5, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    e004:	fb07 6202 	mla	r2, r7, r2, r6
    e008:	5d53      	ldrb	r3, [r2, r5]
    e00a:	220f      	movs	r2, #15
    e00c:	408a      	lsls	r2, r1
    e00e:	4013      	ands	r3, r2
    e010:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    e012:	fa5e f383 	uxtab	r3, lr, r3
    e016:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    e01a:	e79b      	b.n	df54 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
    e01c:	6802      	ldr	r2, [r0, #0]
    e01e:	f3c2 228a 	ubfx	r2, r2, #10, #11
        return buf_u8[px];
    e022:	fb07 6202 	mla	r2, r7, r2, r6
    e026:	5c50      	ldrb	r0, [r2, r1]
    e028:	e794      	b.n	df54 <lv_img_buf_get_px_alpha+0x28>
    e02a:	bf00      	nop
    e02c:	00017784 	.word	0x00017784

0000e030 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to tranform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
    e030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e034:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    e036:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    e03a:	021b      	lsls	r3, r3, #8
    e03c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
    e03e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    e042:	021b      	lsls	r3, r3, #8
    e044:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
    e046:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
    e04a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e140 <_lv_img_buf_transform_init+0x110>
    e04e:	fb88 2300 	smull	r2, r3, r8, r0
    e052:	17c5      	asrs	r5, r0, #31
    e054:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    e058:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
    e05a:	f06f 0709 	mvn.w	r7, #9
    e05e:	fb07 0705 	mla	r7, r7, r5, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
    e062:	fa1f fa85 	uxth.w	sl, r5
    e066:	f1ca 0000 	rsb	r0, sl, #0
    e06a:	b200      	sxth	r0, r0
    e06c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; e144 <_lv_img_buf_transform_init+0x114>
    e070:	47c8      	blx	r9
    e072:	4606      	mov	r6, r0
    int32_t angle_hight = angle_low + 1;
    e074:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_hight);
    e076:	b2ad      	uxth	r5, r5
    e078:	4268      	negs	r0, r5
    e07a:	b200      	sxth	r0, r0
    e07c:	47c8      	blx	r9
    e07e:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
    e080:	f1ca 005a 	rsb	r0, sl, #90	; 0x5a
    e084:	b200      	sxth	r0, r0
    e086:	47c8      	blx	r9
    e088:	4682      	mov	sl, r0
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
    e08a:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    e08e:	b228      	sxth	r0, r5
    e090:	47c8      	blx	r9

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    e092:	f1c7 030a 	rsb	r3, r7, #10
    e096:	fb07 fb0b 	mul.w	fp, r7, fp
    e09a:	fb03 b606 	mla	r6, r3, r6, fp
    e09e:	fb88 2b06 	smull	r2, fp, r8, r6
    e0a2:	17f6      	asrs	r6, r6, #31
    e0a4:	ebc6 06ab 	rsb	r6, r6, fp, asr #2
    e0a8:	62e6      	str	r6, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    e0aa:	fb07 f000 	mul.w	r0, r7, r0
    e0ae:	fb03 000a 	mla	r0, r3, sl, r0
    e0b2:	fb88 3800 	smull	r3, r8, r8, r0
    e0b6:	17c0      	asrs	r0, r0, #31
    e0b8:	ebc0 00a8 	rsb	r0, r0, r8, asr #2
    e0bc:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
    e0be:	7ca0      	ldrb	r0, [r4, #18]
    e0c0:	4b1d      	ldr	r3, [pc, #116]	; (e138 <_lv_img_buf_transform_init+0x108>)
    e0c2:	4798      	blx	r3
    e0c4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e0c8:	f360 0300 	bfi	r3, r0, #0, #1
    e0cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
    e0d0:	7ca0      	ldrb	r0, [r4, #18]
    e0d2:	4b1a      	ldr	r3, [pc, #104]	; (e13c <_lv_img_buf_transform_init+0x10c>)
    e0d4:	4798      	blx	r3
    e0d6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e0da:	f360 0341 	bfi	r3, r0, #1, #1
    e0de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    e0e2:	7ca2      	ldrb	r2, [r4, #18]
    e0e4:	1f13      	subs	r3, r2, #4
    e0e6:	b2db      	uxtb	r3, r3
    e0e8:	2b02      	cmp	r3, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    e0ea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e0ee:	bf94      	ite	ls
    e0f0:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
    e0f4:	f36f 0382 	bfchi	r3, #2, #1
    e0f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    e0fc:	6823      	ldr	r3, [r4, #0]
    e0fe:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
    e100:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
    e102:	f003 031f 	and.w	r3, r3, #31
    e106:	f362 0304 	bfi	r3, r2, #0, #5
    e10a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    e10c:	69a3      	ldr	r3, [r4, #24]
    e10e:	88a2      	ldrh	r2, [r4, #4]
    e110:	f362 2394 	bfi	r3, r2, #10, #11
    e114:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
    e116:	0c1b      	lsrs	r3, r3, #16
    e118:	88e2      	ldrh	r2, [r4, #6]
    e11a:	f362 134f 	bfi	r3, r2, #5, #11
    e11e:	8363      	strh	r3, [r4, #26]

    dsc->tmp.zoom_inv = (256 * 256) / dsc->cfg.zoom;
    e120:	89e2      	ldrh	r2, [r4, #14]
    e122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e126:	fb93 f3f2 	sdiv	r3, r3, r2
    e12a:	86e3      	strh	r3, [r4, #54]	; 0x36

    dsc->res.opa = LV_OPA_COVER;
    e12c:	23ff      	movs	r3, #255	; 0xff
    e12e:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
    e130:	8a23      	ldrh	r3, [r4, #16]
    e132:	82a3      	strh	r3, [r4, #20]
    e134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e138:	00008ce3 	.word	0x00008ce3
    e13c:	00008cf7 	.word	0x00008cf7
    e140:	66666667 	.word	0x66666667
    e144:	00011401 	.word	0x00011401

0000e148 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      lv_point_t * pivot)
{
    e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e14c:	b087      	sub	sp, #28
    e14e:	9003      	str	r0, [sp, #12]
    e150:	9104      	str	r1, [sp, #16]
    e152:	9205      	str	r2, [sp, #20]
    e154:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
    e158:	9401      	str	r4, [sp, #4]
    e15a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
#if LV_USE_IMG_TRANSFORM
    int32_t angle_low = angle / 10;
    e15e:	4f5e      	ldr	r7, [pc, #376]	; (e2d8 <_lv_img_buf_get_transformed_area+0x190>)
    e160:	fb87 6003 	smull	r6, r0, r7, r3
    e164:	17dd      	asrs	r5, r3, #31
    e166:	ebc5 05a0 	rsb	r5, r5, r0, asr #2
    e16a:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    e16c:	f105 0901 	add.w	r9, r5, #1
    int32_t angle_rem = angle  - (angle_low * 10);
    e170:	f06f 0609 	mvn.w	r6, #9
    e174:	fb06 3605 	mla	r6, r6, r5, r3

    int32_t s1 = _lv_trigo_sin(angle_low);
    e178:	4628      	mov	r0, r5
    e17a:	f8df 8160 	ldr.w	r8, [pc, #352]	; e2dc <_lv_img_buf_get_transformed_area+0x194>
    e17e:	47c0      	blx	r8
    e180:	4604      	mov	r4, r0
    int32_t s2 = _lv_trigo_sin(angle_hight);
    e182:	fa0f f089 	sxth.w	r0, r9
    e186:	47c0      	blx	r8
    e188:	4682      	mov	sl, r0

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
    e18a:	f105 005a 	add.w	r0, r5, #90	; 0x5a
    e18e:	b200      	sxth	r0, r0
    e190:	47c0      	blx	r8
    e192:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(angle_hight + 90);
    e194:	f109 005a 	add.w	r0, r9, #90	; 0x5a
    e198:	b200      	sxth	r0, r0
    e19a:	47c0      	blx	r8

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    e19c:	f1c6 030a 	rsb	r3, r6, #10
    e1a0:	fb06 fa0a 	mul.w	sl, r6, sl
    e1a4:	fb03 a404 	mla	r4, r3, r4, sl
    e1a8:	fb87 ea04 	smull	lr, sl, r7, r4
    e1ac:	17e4      	asrs	r4, r4, #31
    e1ae:	ebc4 04aa 	rsb	r4, r4, sl, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    e1b2:	fb06 f000 	mul.w	r0, r6, r0
    e1b6:	fb03 0505 	mla	r5, r3, r5, r0
    e1ba:	fb87 3705 	smull	r3, r7, r7, r5
    e1be:	17ed      	asrs	r5, r5, #31
    e1c0:	ebc5 07a7 	rsb	r7, r5, r7, asr #2

    lv_coord_t xt;
    lv_coord_t yt;

    lv_area_t a;
    a.x1 = ((-pivot->x) * zoom) >> 8;
    e1c4:	f9bb c000 	ldrsh.w	ip, [fp]
    a.y1 = ((-pivot->y) * zoom) >> 8;
    e1c8:	f9bb 8002 	ldrsh.w	r8, [fp, #2]
    a.x1 = ((-pivot->x) * zoom) >> 8;
    e1cc:	f1cc 0300 	rsb	r3, ip, #0
    e1d0:	9d01      	ldr	r5, [sp, #4]
    e1d2:	fb05 f303 	mul.w	r3, r5, r3
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    a.y2 = ((h - pivot->y) * zoom) >> 8;

    xt = a.x1;
    yt = a.y1;
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e1d6:	f343 230f 	sbfx	r3, r3, #8, #16
    e1da:	fb03 fa07 	mul.w	sl, r3, r7
    a.y1 = ((-pivot->y) * zoom) >> 8;
    e1de:	f1c8 0200 	rsb	r2, r8, #0
    e1e2:	fb05 f202 	mul.w	r2, r5, r2
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e1e6:	f342 220f 	sbfx	r2, r2, #8, #16
    e1ea:	fb02 fe04 	mul.w	lr, r2, r4
    e1ee:	fa1f f68c 	uxth.w	r6, ip
    e1f2:	ebaa 0b0e 	sub.w	fp, sl, lr
    e1f6:	eb06 3beb 	add.w	fp, r6, fp, asr #15
    e1fa:	fa0f fb8b 	sxth.w	fp, fp
    lt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e1fe:	fb03 f304 	mul.w	r3, r3, r4
    e202:	fb02 f207 	mul.w	r2, r2, r7
    e206:	fa1f f088 	uxth.w	r0, r8
    e20a:	1899      	adds	r1, r3, r2
    e20c:	eb00 31e1 	add.w	r1, r0, r1, asr #15
    e210:	b209      	sxth	r1, r1
    e212:	9102      	str	r1, [sp, #8]
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    e214:	9904      	ldr	r1, [sp, #16]
    e216:	eba1 0c0c 	sub.w	ip, r1, ip
    e21a:	fb05 fc0c 	mul.w	ip, r5, ip

    xt = a.x2;
    yt = a.y1;
    rt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e21e:	f34c 2c0f 	sbfx	ip, ip, #8, #16
    e222:	fb0c f907 	mul.w	r9, ip, r7
    e226:	eba9 0e0e 	sub.w	lr, r9, lr
    e22a:	eb06 3eee 	add.w	lr, r6, lr, asr #15
    e22e:	fa0f fe8e 	sxth.w	lr, lr
    rt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e232:	fb0c fc04 	mul.w	ip, ip, r4
    e236:	4462      	add	r2, ip
    e238:	eb00 32e2 	add.w	r2, r0, r2, asr #15
    e23c:	b212      	sxth	r2, r2
    a.y2 = ((h - pivot->y) * zoom) >> 8;
    e23e:	9905      	ldr	r1, [sp, #20]
    e240:	eba1 0808 	sub.w	r8, r1, r8
    e244:	fb05 f808 	mul.w	r8, r5, r8

    xt = a.x1;
    yt = a.y2;
    lb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e248:	f348 280f 	sbfx	r8, r8, #8, #16
    e24c:	fb08 f404 	mul.w	r4, r8, r4
    e250:	ebaa 0504 	sub.w	r5, sl, r4
    e254:	eb06 35e5 	add.w	r5, r6, r5, asr #15
    e258:	b22d      	sxth	r5, r5
    lb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e25a:	fb08 f707 	mul.w	r7, r8, r7
    e25e:	443b      	add	r3, r7
    e260:	eb00 33e3 	add.w	r3, r0, r3, asr #15
    e264:	b21b      	sxth	r3, r3

    xt = a.x2;
    yt = a.y2;
    rb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    e266:	eba9 0404 	sub.w	r4, r9, r4
    e26a:	eb06 36e4 	add.w	r6, r6, r4, asr #15
    e26e:	b236      	sxth	r6, r6
    rb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    e270:	44bc      	add	ip, r7
    e272:	eb00 30ec 	add.w	r0, r0, ip, asr #15
    e276:	b200      	sxth	r0, r0

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
    e278:	465c      	mov	r4, fp
    e27a:	45f3      	cmp	fp, lr
    e27c:	bfa8      	it	ge
    e27e:	4674      	movge	r4, lr
    e280:	42ac      	cmp	r4, r5
    e282:	bfa8      	it	ge
    e284:	462c      	movge	r4, r5
    e286:	42b4      	cmp	r4, r6
    e288:	bfa8      	it	ge
    e28a:	4634      	movge	r4, r6
    e28c:	9903      	ldr	r1, [sp, #12]
    e28e:	460f      	mov	r7, r1
    e290:	800c      	strh	r4, [r1, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
    e292:	45de      	cmp	lr, fp
    e294:	bfb8      	it	lt
    e296:	46de      	movlt	lr, fp
    e298:	4575      	cmp	r5, lr
    e29a:	bfb8      	it	lt
    e29c:	4675      	movlt	r5, lr
    e29e:	42ae      	cmp	r6, r5
    e2a0:	bfb8      	it	lt
    e2a2:	462e      	movlt	r6, r5
    e2a4:	808e      	strh	r6, [r1, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
    e2a6:	9902      	ldr	r1, [sp, #8]
    e2a8:	460c      	mov	r4, r1
    e2aa:	4291      	cmp	r1, r2
    e2ac:	bfa8      	it	ge
    e2ae:	4614      	movge	r4, r2
    e2b0:	429c      	cmp	r4, r3
    e2b2:	bfa8      	it	ge
    e2b4:	461c      	movge	r4, r3
    e2b6:	4284      	cmp	r4, r0
    e2b8:	bfa8      	it	ge
    e2ba:	4604      	movge	r4, r0
    e2bc:	807c      	strh	r4, [r7, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
    e2be:	4291      	cmp	r1, r2
    e2c0:	bfb8      	it	lt
    e2c2:	4611      	movlt	r1, r2
    e2c4:	428b      	cmp	r3, r1
    e2c6:	bfb8      	it	lt
    e2c8:	460b      	movlt	r3, r1
    e2ca:	4298      	cmp	r0, r3
    e2cc:	bfb8      	it	lt
    e2ce:	4618      	movlt	r0, r3
    e2d0:	80f8      	strh	r0, [r7, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w;
    res->y2 = h;
#endif
}
    e2d2:	b007      	add	sp, #28
    e2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2d8:	66666667 	.word	0x66666667
    e2dc:	00011401 	.word	0x00011401

0000e2e0 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
    e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2e4:	b089      	sub	sp, #36	; 0x24
    e2e6:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
    e2e8:	f9b0 5038 	ldrsh.w	r5, [r0, #56]	; 0x38
    e2ec:	b2ea      	uxtb	r2, r5
    int ys_fract = dsc->tmp.ys & 0xff;
    e2ee:	f9b0 603a 	ldrsh.w	r6, [r0, #58]	; 0x3a
    e2f2:	b2f3      	uxtb	r3, r6
    int32_t xn;      /*x neightboor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
    e2f4:	2a6f      	cmp	r2, #111	; 0x6f
    e2f6:	dc74      	bgt.n	e3e2 <_lv_img_buf_transform_anti_alias+0x102>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
    e2f8:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    e2fc:	4249      	negs	r1, r1
    e2fe:	17c9      	asrs	r1, r1, #31
        xr = xs_fract + 0x80;
    e300:	3d80      	subs	r5, #128	; 0x80
    e302:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neightboor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
    e304:	2b6f      	cmp	r3, #111	; 0x6f
    e306:	dc7e      	bgt.n	e406 <_lv_img_buf_transform_anti_alias+0x126>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
    e308:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    e30c:	f1cb 0b00 	rsb	fp, fp, #0
    e310:	ea4f 7beb 	mov.w	fp, fp, asr #31

        yr = ys_fract + 0x80;
    e314:	3e80      	subs	r6, #128	; 0x80
    e316:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
    e318:	f894 9014 	ldrb.w	r9, [r4, #20]
    e31c:	f009 091f 	and.w	r9, r9, #31
    e320:	f8b4 8014 	ldrh.w	r8, [r4, #20]
    e324:	f3c8 1845 	ubfx	r8, r8, #5, #6
    e328:	7d67      	ldrb	r7, [r4, #21]
    e32a:	08ff      	lsrs	r7, r7, #3
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
    e32c:	7da3      	ldrb	r3, [r4, #22]
    e32e:	9300      	str	r3, [sp, #0]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
    e330:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    e334:	f01c 0f04 	tst.w	ip, #4
    e338:	d07b      	beq.n	e432 <_lv_img_buf_transform_anti_alias+0x152>
    const uint8_t * src_u8 = dsc->cfg.src;
    e33a:	6823      	ldr	r3, [r4, #0]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
    e33c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    e33e:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    e342:	fb0e 0101 	mla	r1, lr, r1, r0
    e346:	185a      	adds	r2, r3, r1
    e348:	f813 a001 	ldrb.w	sl, [r3, r1]
    e34c:	f88d a01c 	strb.w	sl, [sp, #28]
    e350:	7852      	ldrb	r2, [r2, #1]
    e352:	f88d 201d 	strb.w	r2, [sp, #29]
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
    e356:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    e35a:	fb0e f202 	mul.w	r2, lr, r2
    e35e:	fb0b fb02 	mul.w	fp, fp, r2
    e362:	4458      	add	r0, fp
    e364:	181a      	adds	r2, r3, r0
    e366:	f813 a000 	ldrb.w	sl, [r3, r0]
    e36a:	f88d a018 	strb.w	sl, [sp, #24]
    e36e:	7852      	ldrb	r2, [r2, #1]
    e370:	f88d 2019 	strb.w	r2, [sp, #25]
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
    e374:	eb01 020b 	add.w	r2, r1, fp
    e378:	eb03 0a02 	add.w	sl, r3, r2
    e37c:	f813 b002 	ldrb.w	fp, [r3, r2]
    e380:	f88d b014 	strb.w	fp, [sp, #20]
    e384:	f89a a001 	ldrb.w	sl, [sl, #1]
    e388:	f88d a015 	strb.w	sl, [sp, #21]
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
    e38c:	f01c 0f02 	tst.w	ip, #2
    e390:	f000 8081 	beq.w	e496 <_lv_img_buf_transform_anti_alias+0x1b6>
    e394:	f10e 3eff 	add.w	lr, lr, #4294967295
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    e398:	4473      	add	r3, lr
    e39a:	f813 b001 	ldrb.w	fp, [r3, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
    e39e:	f813 a000 	ldrb.w	sl, [r3, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    e3a2:	5c98      	ldrb	r0, [r3, r2]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
    e3a4:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
    e3a8:	fb03 f10b 	mul.w	r1, r3, fp
    e3ac:	9a00      	ldr	r2, [sp, #0]
    e3ae:	fb05 1102 	mla	r1, r5, r2, r1
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
    e3b2:	fb03 f300 	mul.w	r3, r3, r0
    e3b6:	fb05 330a 	mla	r3, r5, sl, r3
    e3ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
    e3be:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    e3c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    e3c6:	fb06 fe01 	mul.w	lr, r6, r1
    e3ca:	fb02 e203 	mla	r2, r2, r3, lr
    e3ce:	1212      	asrs	r2, r2, #8
    e3d0:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    e3d2:	2905      	cmp	r1, #5
    e3d4:	f200 80dc 	bhi.w	e590 <_lv_img_buf_transform_anti_alias+0x2b0>
    e3d8:	2b05      	cmp	r3, #5
    e3da:	f240 817d 	bls.w	e6d8 <_lv_img_buf_transform_anti_alias+0x3f8>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
    e3de:	2600      	movs	r6, #0
    e3e0:	e0d9      	b.n	e596 <_lv_img_buf_transform_anti_alias+0x2b6>
    else if(xs_fract > 0x90) {
    e3e2:	2a90      	cmp	r2, #144	; 0x90
    e3e4:	dd0c      	ble.n	e400 <_lv_img_buf_transform_anti_alias+0x120>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
    e3e6:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    e3ea:	3101      	adds	r1, #1
    e3ec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    e3f0:	4291      	cmp	r1, r2
    e3f2:	bfac      	ite	ge
    e3f4:	2100      	movge	r1, #0
    e3f6:	2101      	movlt	r1, #1
        xr = (0xFF - xs_fract) + 0x80;
    e3f8:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
    e3fc:	b2ed      	uxtb	r5, r5
    e3fe:	e781      	b.n	e304 <_lv_img_buf_transform_anti_alias+0x24>
        xr = 0xFF;
    e400:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
    e402:	2100      	movs	r1, #0
    e404:	e77e      	b.n	e304 <_lv_img_buf_transform_anti_alias+0x24>
    else if(ys_fract > 0x90) {
    e406:	2b90      	cmp	r3, #144	; 0x90
    e408:	dd0f      	ble.n	e42a <_lv_img_buf_transform_anti_alias+0x14a>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
    e40a:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    e40e:	f10b 0b01 	add.w	fp, fp, #1
    e412:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    e416:	4593      	cmp	fp, r2
    e418:	bfac      	ite	ge
    e41a:	f04f 0b00 	movge.w	fp, #0
    e41e:	f04f 0b01 	movlt.w	fp, #1
        yr = (0xFF - ys_fract) + 0x80;
    e422:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
    e426:	b2f6      	uxtb	r6, r6
    e428:	e776      	b.n	e318 <_lv_img_buf_transform_anti_alias+0x38>
        yr = 0xFF;
    e42a:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
    e42c:	f04f 0b00 	mov.w	fp, #0
    e430:	e772      	b.n	e318 <_lv_img_buf_transform_anti_alias+0x38>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
    e432:	f104 0318 	add.w	r3, r4, #24
    e436:	4618      	mov	r0, r3
    e438:	b28b      	uxth	r3, r1
    e43a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e43c:	9302      	str	r3, [sp, #8]
    e43e:	4419      	add	r1, r3
    e440:	8a23      	ldrh	r3, [r4, #16]
    e442:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    e446:	b209      	sxth	r1, r1
    e448:	9001      	str	r0, [sp, #4]
    e44a:	f8df a294 	ldr.w	sl, [pc, #660]	; e6e0 <_lv_img_buf_transform_anti_alias+0x400>
    e44e:	47d0      	blx	sl
    e450:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
    e454:	fa1f f18b 	uxth.w	r1, fp
    e458:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e45a:	9103      	str	r1, [sp, #12]
    e45c:	440a      	add	r2, r1
    e45e:	8a23      	ldrh	r3, [r4, #16]
    e460:	b212      	sxth	r2, r2
    e462:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    e466:	f8dd b004 	ldr.w	fp, [sp, #4]
    e46a:	4658      	mov	r0, fp
    e46c:	47d0      	blx	sl
    e46e:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
    e472:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e474:	9903      	ldr	r1, [sp, #12]
    e476:	440a      	add	r2, r1
    e478:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e47a:	9b02      	ldr	r3, [sp, #8]
    e47c:	4419      	add	r1, r3
    e47e:	8a23      	ldrh	r3, [r4, #16]
    e480:	b212      	sxth	r2, r2
    e482:	b209      	sxth	r1, r1
    e484:	4658      	mov	r0, fp
    e486:	47d0      	blx	sl
    e488:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(dsc->tmp.has_alpha) {
    e48c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e490:	f013 0f02 	tst.w	r3, #2
    e494:	d152      	bne.n	e53c <_lv_img_buf_transform_anti_alias+0x25c>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    e496:	23ff      	movs	r3, #255	; 0xff
    e498:	75a3      	strb	r3, [r4, #22]
        xr0 = xr;
    e49a:	462b      	mov	r3, r5
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
    e49c:	2b00      	cmp	r3, #0
    e49e:	f040 808b 	bne.w	e5b8 <_lv_img_buf_transform_anti_alias+0x2d8>
    e4a2:	f89d 901c 	ldrb.w	r9, [sp, #28]
    e4a6:	f009 091f 	and.w	r9, r9, #31
    e4aa:	f8bd 801c 	ldrh.w	r8, [sp, #28]
    e4ae:	f3c8 1845 	ubfx	r8, r8, #5, #6
    e4b2:	f89d 701d 	ldrb.w	r7, [sp, #29]
    e4b6:	08ff      	lsrs	r7, r7, #3
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
    e4b8:	2d00      	cmp	r5, #0
    e4ba:	f040 80ac 	bne.w	e616 <_lv_img_buf_transform_anti_alias+0x336>
    e4be:	f89d 5014 	ldrb.w	r5, [sp, #20]
    e4c2:	f005 051f 	and.w	r5, r5, #31
    e4c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e4ca:	f3c3 1345 	ubfx	r3, r3, #5, #6
    e4ce:	f89d 1015 	ldrb.w	r1, [sp, #21]
    e4d2:	08c9      	lsrs	r1, r1, #3
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    e4d4:	2e00      	cmp	r6, #0
    e4d6:	f000 80e3 	beq.w	e6a0 <_lv_img_buf_transform_anti_alias+0x3c0>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    e4da:	2eff      	cmp	r6, #255	; 0xff
    e4dc:	f000 80ee 	beq.w	e6bc <_lv_img_buf_transform_anti_alias+0x3dc>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    e4e0:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    e4e4:	fb02 f505 	mul.w	r5, r2, r5
    e4e8:	fb06 5509 	mla	r5, r6, r9, r5
    e4ec:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    e4f0:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    e4f4:	0ded      	lsrs	r5, r5, #23
    else dsc->res.color = lv_color_mix(c0, c1, yr);
    e4f6:	7d20      	ldrb	r0, [r4, #20]
    e4f8:	f365 0004 	bfi	r0, r5, #0, #5
    e4fc:	7520      	strb	r0, [r4, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    e4fe:	fb02 f303 	mul.w	r3, r2, r3
    e502:	fb06 3808 	mla	r8, r6, r8, r3
    e506:	eb08 2308 	add.w	r3, r8, r8, lsl #8
    e50a:	eb08 18c3 	add.w	r8, r8, r3, lsl #7
    e50e:	ea4f 58d8 	mov.w	r8, r8, lsr #23
    e512:	8aa3      	ldrh	r3, [r4, #20]
    e514:	f368 134a 	bfi	r3, r8, #5, #6
    e518:	82a3      	strh	r3, [r4, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    e51a:	fb02 f101 	mul.w	r1, r2, r1
    e51e:	fb06 1607 	mla	r6, r6, r7, r1
    e522:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    e526:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    e52a:	0df6      	lsrs	r6, r6, #23
    e52c:	0a1b      	lsrs	r3, r3, #8
    e52e:	f366 03c7 	bfi	r3, r6, #3, #5
    e532:	7563      	strb	r3, [r4, #21]

    return true;
    e534:	2001      	movs	r0, #1
}
    e536:	b009      	add	sp, #36	; 0x24
    e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
    e53c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e53e:	9b02      	ldr	r3, [sp, #8]
    e540:	4419      	add	r1, r3
    e542:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    e546:	b209      	sxth	r1, r1
    e548:	f8dd a004 	ldr.w	sl, [sp, #4]
    e54c:	4650      	mov	r0, sl
    e54e:	4b63      	ldr	r3, [pc, #396]	; (e6dc <_lv_img_buf_transform_anti_alias+0x3fc>)
    e550:	4798      	blx	r3
    e552:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
    e554:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e556:	9903      	ldr	r1, [sp, #12]
    e558:	440a      	add	r2, r1
    e55a:	b212      	sxth	r2, r2
    e55c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    e560:	f8cd a004 	str.w	sl, [sp, #4]
    e564:	4650      	mov	r0, sl
    e566:	4b5d      	ldr	r3, [pc, #372]	; (e6dc <_lv_img_buf_transform_anti_alias+0x3fc>)
    e568:	4798      	blx	r3
    e56a:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
    e56c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    e56e:	9903      	ldr	r1, [sp, #12]
    e570:	440a      	add	r2, r1
    e572:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    e574:	9b02      	ldr	r3, [sp, #8]
    e576:	4419      	add	r1, r3
    e578:	b212      	sxth	r2, r2
    e57a:	b209      	sxth	r1, r1
    e57c:	9801      	ldr	r0, [sp, #4]
    e57e:	4b57      	ldr	r3, [pc, #348]	; (e6dc <_lv_img_buf_transform_anti_alias+0x3fc>)
    e580:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
    e582:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    e586:	f013 0f02 	tst.w	r3, #2
    e58a:	f47f af0b 	bne.w	e3a4 <_lv_img_buf_transform_anti_alias+0xc4>
    e58e:	e782      	b.n	e496 <_lv_img_buf_transform_anti_alias+0x1b6>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
    e590:	2b05      	cmp	r3, #5
    e592:	bf98      	it	ls
    e594:	26ff      	movls	r6, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
    e596:	9b00      	ldr	r3, [sp, #0]
    e598:	2b05      	cmp	r3, #5
    e59a:	bf8c      	ite	hi
    e59c:	462b      	movhi	r3, r5
    e59e:	2300      	movls	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
    e5a0:	f1bb 0f05 	cmp.w	fp, #5
    e5a4:	bf98      	it	ls
    e5a6:	23ff      	movls	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
    e5a8:	f1ba 0f05 	cmp.w	sl, #5
    e5ac:	bf98      	it	ls
    e5ae:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    e5b0:	2805      	cmp	r0, #5
    e5b2:	bf98      	it	ls
    e5b4:	25ff      	movls	r5, #255	; 0xff
    e5b6:	e771      	b.n	e49c <_lv_img_buf_transform_anti_alias+0x1bc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    e5b8:	2bff      	cmp	r3, #255	; 0xff
    e5ba:	f43f af7d 	beq.w	e4b8 <_lv_img_buf_transform_anti_alias+0x1d8>
    e5be:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    e5c2:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e5c6:	08d2      	lsrs	r2, r2, #3
    e5c8:	fb03 f707 	mul.w	r7, r3, r7
    e5cc:	fb01 7702 	mla	r7, r1, r2, r7
    e5d0:	eb07 2207 	add.w	r2, r7, r7, lsl #8
    e5d4:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    e5d8:	f3c7 57c4 	ubfx	r7, r7, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    e5dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    e5e0:	f3c2 1245 	ubfx	r2, r2, #5, #6
    e5e4:	fb03 f808 	mul.w	r8, r3, r8
    e5e8:	fb01 8802 	mla	r8, r1, r2, r8
    e5ec:	eb08 2208 	add.w	r2, r8, r8, lsl #8
    e5f0:	eb08 18c2 	add.w	r8, r8, r2, lsl #7
    e5f4:	f3c8 58c5 	ubfx	r8, r8, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    e5f8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    e5fc:	f002 021f 	and.w	r2, r2, #31
    e600:	fb03 f909 	mul.w	r9, r3, r9
    e604:	fb01 9902 	mla	r9, r1, r2, r9
    e608:	eb09 2309 	add.w	r3, r9, r9, lsl #8
    e60c:	eb09 19c3 	add.w	r9, r9, r3, lsl #7
    e610:	f3c9 59c4 	ubfx	r9, r9, #23, #5
    e614:	e750      	b.n	e4b8 <_lv_img_buf_transform_anti_alias+0x1d8>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    e616:	2dff      	cmp	r5, #255	; 0xff
    e618:	d036      	beq.n	e688 <_lv_img_buf_transform_anti_alias+0x3a8>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    e61a:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
    e61e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    e622:	08c9      	lsrs	r1, r1, #3
    e624:	f89d 3015 	ldrb.w	r3, [sp, #21]
    e628:	08db      	lsrs	r3, r3, #3
    e62a:	fb00 f303 	mul.w	r3, r0, r3
    e62e:	fb05 3101 	mla	r1, r5, r1, r3
    e632:	eb01 2301 	add.w	r3, r1, r1, lsl #8
    e636:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    e63a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    e63e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    e642:	f3c3 1345 	ubfx	r3, r3, #5, #6
    e646:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e64a:	f3c2 1245 	ubfx	r2, r2, #5, #6
    e64e:	fb00 f202 	mul.w	r2, r0, r2
    e652:	fb05 2303 	mla	r3, r5, r3, r2
    e656:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    e65a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    e65e:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    e662:	f89d 2018 	ldrb.w	r2, [sp, #24]
    e666:	f002 021f 	and.w	r2, r2, #31
    e66a:	f89d e014 	ldrb.w	lr, [sp, #20]
    e66e:	f00e 0e1f 	and.w	lr, lr, #31
    e672:	fb00 f00e 	mul.w	r0, r0, lr
    e676:	fb05 0502 	mla	r5, r5, r2, r0
    e67a:	eb05 2205 	add.w	r2, r5, r5, lsl #8
    e67e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    e682:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    e686:	e725      	b.n	e4d4 <_lv_img_buf_transform_anti_alias+0x1f4>
    e688:	f89d 5018 	ldrb.w	r5, [sp, #24]
    e68c:	f005 051f 	and.w	r5, r5, #31
    e690:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    e694:	f3c3 1345 	ubfx	r3, r3, #5, #6
    e698:	f89d 1019 	ldrb.w	r1, [sp, #25]
    e69c:	08c9      	lsrs	r1, r1, #3
    e69e:	e719      	b.n	e4d4 <_lv_img_buf_transform_anti_alias+0x1f4>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    e6a0:	7d22      	ldrb	r2, [r4, #20]
    e6a2:	f365 0204 	bfi	r2, r5, #0, #5
    e6a6:	7522      	strb	r2, [r4, #20]
    e6a8:	8aa2      	ldrh	r2, [r4, #20]
    e6aa:	f363 124a 	bfi	r2, r3, #5, #6
    e6ae:	82a2      	strh	r2, [r4, #20]
    e6b0:	0a12      	lsrs	r2, r2, #8
    e6b2:	f361 02c7 	bfi	r2, r1, #3, #5
    e6b6:	7562      	strb	r2, [r4, #21]
    return true;
    e6b8:	2001      	movs	r0, #1
    e6ba:	e73c      	b.n	e536 <_lv_img_buf_transform_anti_alias+0x256>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    e6bc:	7d23      	ldrb	r3, [r4, #20]
    e6be:	f369 0304 	bfi	r3, r9, #0, #5
    e6c2:	7523      	strb	r3, [r4, #20]
    e6c4:	8aa3      	ldrh	r3, [r4, #20]
    e6c6:	f368 134a 	bfi	r3, r8, #5, #6
    e6ca:	82a3      	strh	r3, [r4, #20]
    e6cc:	0a1b      	lsrs	r3, r3, #8
    e6ce:	f367 03c7 	bfi	r3, r7, #3, #5
    e6d2:	7563      	strb	r3, [r4, #21]
    return true;
    e6d4:	2001      	movs	r0, #1
    e6d6:	e72e      	b.n	e536 <_lv_img_buf_transform_anti_alias+0x256>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    e6d8:	2000      	movs	r0, #0
    e6da:	e72c      	b.n	e536 <_lv_img_buf_transform_anti_alias+0x256>
    e6dc:	0000df2d 	.word	0x0000df2d
    e6e0:	0000ddfd 	.word	0x0000ddfd

0000e6e4 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    e6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
    e6e8:	4b4d      	ldr	r3, [pc, #308]	; (e820 <_lv_img_cache_open+0x13c>)
    e6ea:	881d      	ldrh	r5, [r3, #0]
    e6ec:	2d00      	cmp	r5, #0
    e6ee:	f000 8094 	beq.w	e81a <_lv_img_cache_open+0x136>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    e6f2:	4b4c      	ldr	r3, [pc, #304]	; (e824 <_lv_img_cache_open+0x140>)
    e6f4:	681e      	ldr	r6, [r3, #0]
    e6f6:	4633      	mov	r3, r6
    e6f8:	3d01      	subs	r5, #1
    e6fa:	b2ad      	uxth	r5, r5
    e6fc:	3501      	adds	r5, #1
    e6fe:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
    e702:	eb06 0585 	add.w	r5, r6, r5, lsl #2

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
    e706:	4a48      	ldr	r2, [pc, #288]	; (e828 <_lv_img_cache_open+0x144>)
    e708:	6a1c      	ldr	r4, [r3, #32]
    e70a:	4294      	cmp	r4, r2
            cache[i].life -= LV_IMG_CACHE_AGING;
    e70c:	bfa4      	itt	ge
    e70e:	f104 34ff 	addge.w	r4, r4, #4294967295
    e712:	621c      	strge	r4, [r3, #32]
    e714:	3324      	adds	r3, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
    e716:	42ab      	cmp	r3, r5
    e718:	d1f6      	bne.n	e708 <_lv_img_cache_open+0x24>
    e71a:	468a      	mov	sl, r1
    e71c:	4681      	mov	r9, r0
    e71e:	2400      	movs	r4, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    e720:	4f42      	ldr	r7, [pc, #264]	; (e82c <_lv_img_cache_open+0x148>)
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
        }
        else if(src_type == LV_IMG_SRC_FILE) {
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    e722:	f8df b120 	ldr.w	fp, [pc, #288]	; e844 <_lv_img_cache_open+0x160>
    for(i = 0; i < entry_cnt; i++) {
    e726:	f8df 80f8 	ldr.w	r8, [pc, #248]	; e820 <_lv_img_cache_open+0x13c>
    e72a:	e007      	b.n	e73c <_lv_img_cache_open+0x58>
        else if(src_type == LV_IMG_SRC_FILE) {
    e72c:	2801      	cmp	r0, #1
    e72e:	d026      	beq.n	e77e <_lv_img_cache_open+0x9a>
    for(i = 0; i < entry_cnt; i++) {
    e730:	3401      	adds	r4, #1
    e732:	b2a4      	uxth	r4, r4
    e734:	f8b8 3000 	ldrh.w	r3, [r8]
    e738:	42a3      	cmp	r3, r4
    e73a:	d929      	bls.n	e790 <_lv_img_cache_open+0xac>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    e73c:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    e740:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    e744:	6868      	ldr	r0, [r5, #4]
    e746:	47b8      	blx	r7
        if(src_type == LV_IMG_SRC_VARIABLE) {
    e748:	2800      	cmp	r0, #0
    e74a:	d1ef      	bne.n	e72c <_lv_img_cache_open+0x48>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
    e74c:	686b      	ldr	r3, [r5, #4]
    e74e:	454b      	cmp	r3, r9
    e750:	d1ee      	bne.n	e730 <_lv_img_cache_open+0x4c>
    e752:	8928      	ldrh	r0, [r5, #8]
    e754:	fa1f f38a 	uxth.w	r3, sl
    e758:	4298      	cmp	r0, r3
    e75a:	bf14      	ite	ne
    e75c:	2000      	movne	r0, #0
    e75e:	2001      	moveq	r0, #1
        }

        if(match) {
    e760:	2800      	cmp	r0, #0
    e762:	d0e5      	beq.n	e730 <_lv_img_cache_open+0x4c>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    e764:	6a2b      	ldr	r3, [r5, #32]
    e766:	696a      	ldr	r2, [r5, #20]
    e768:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
    e76a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    e76e:	dd0d      	ble.n	e78c <_lv_img_cache_open+0xa8>
    e770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e774:	622b      	str	r3, [r5, #32]
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
    e776:	b15d      	cbz	r5, e790 <_lv_img_cache_open+0xac>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
    e778:	4628      	mov	r0, r5
    e77a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    e77e:	4649      	mov	r1, r9
    e780:	6868      	ldr	r0, [r5, #4]
    e782:	47d8      	blx	fp
    e784:	fab0 f080 	clz	r0, r0
    e788:	0940      	lsrs	r0, r0, #5
    e78a:	e7e9      	b.n	e760 <_lv_img_cache_open+0x7c>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    e78c:	622b      	str	r3, [r5, #32]
    e78e:	e7f2      	b.n	e776 <_lv_img_cache_open+0x92>
        for(i = 1; i < entry_cnt; i++) {
    e790:	4b23      	ldr	r3, [pc, #140]	; (e820 <_lv_img_cache_open+0x13c>)
    e792:	881a      	ldrh	r2, [r3, #0]
    e794:	2a01      	cmp	r2, #1
    e796:	d92f      	bls.n	e7f8 <_lv_img_cache_open+0x114>
    e798:	f106 0324 	add.w	r3, r6, #36	; 0x24
    e79c:	3a02      	subs	r2, #2
    e79e:	b292      	uxth	r2, r2
    e7a0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    e7a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    e7a8:	3248      	adds	r2, #72	; 0x48
    e7aa:	4635      	mov	r5, r6
            if(cache[i].life < cached_src->life) {
    e7ac:	6a18      	ldr	r0, [r3, #32]
    e7ae:	6a29      	ldr	r1, [r5, #32]
                cached_src = &cache[i];
    e7b0:	4288      	cmp	r0, r1
    e7b2:	bfb8      	it	lt
    e7b4:	461d      	movlt	r5, r3
    e7b6:	3324      	adds	r3, #36	; 0x24
        for(i = 1; i < entry_cnt; i++) {
    e7b8:	4293      	cmp	r3, r2
    e7ba:	d1f7      	bne.n	e7ac <_lv_img_cache_open+0xc8>
        if(cached_src->dec_dsc.src) {
    e7bc:	686b      	ldr	r3, [r5, #4]
    e7be:	b113      	cbz	r3, e7c6 <_lv_img_cache_open+0xe2>
            lv_img_decoder_close(&cached_src->dec_dsc);
    e7c0:	4628      	mov	r0, r5
    e7c2:	4b1b      	ldr	r3, [pc, #108]	; (e830 <_lv_img_cache_open+0x14c>)
    e7c4:	4798      	blx	r3
        t_start                          = lv_tick_get();
    e7c6:	4b1b      	ldr	r3, [pc, #108]	; (e834 <_lv_img_cache_open+0x150>)
    e7c8:	4798      	blx	r3
    e7ca:	4604      	mov	r4, r0
        cached_src->dec_dsc.time_to_open = 0;
    e7cc:	2300      	movs	r3, #0
    e7ce:	616b      	str	r3, [r5, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
    e7d0:	4652      	mov	r2, sl
    e7d2:	4649      	mov	r1, r9
    e7d4:	4628      	mov	r0, r5
    e7d6:	4b18      	ldr	r3, [pc, #96]	; (e838 <_lv_img_cache_open+0x154>)
    e7d8:	4798      	blx	r3
        if(open_res == LV_RES_INV) {
    e7da:	b178      	cbz	r0, e7fc <_lv_img_cache_open+0x118>
        cached_src->life = 0;
    e7dc:	2300      	movs	r3, #0
    e7de:	622b      	str	r3, [r5, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
    e7e0:	696b      	ldr	r3, [r5, #20]
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	d1c8      	bne.n	e778 <_lv_img_cache_open+0x94>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    e7e6:	4620      	mov	r0, r4
    e7e8:	4b14      	ldr	r3, [pc, #80]	; (e83c <_lv_img_cache_open+0x158>)
    e7ea:	4798      	blx	r3
    e7ec:	6168      	str	r0, [r5, #20]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    e7ee:	2800      	cmp	r0, #0
    e7f0:	d1c2      	bne.n	e778 <_lv_img_cache_open+0x94>
    e7f2:	2301      	movs	r3, #1
    e7f4:	616b      	str	r3, [r5, #20]
    e7f6:	e7bf      	b.n	e778 <_lv_img_cache_open+0x94>
        for(i = 1; i < entry_cnt; i++) {
    e7f8:	4635      	mov	r5, r6
    e7fa:	e7df      	b.n	e7bc <_lv_img_cache_open+0xd8>
            lv_img_decoder_close(&cached_src->dec_dsc);
    e7fc:	4628      	mov	r0, r5
    e7fe:	4b0c      	ldr	r3, [pc, #48]	; (e830 <_lv_img_cache_open+0x14c>)
    e800:	4798      	blx	r3
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e802:	2120      	movs	r1, #32
    e804:	4628      	mov	r0, r5
    e806:	4c0e      	ldr	r4, [pc, #56]	; (e840 <_lv_img_cache_open+0x15c>)
    e808:	47a0      	blx	r4
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
    e80a:	2124      	movs	r1, #36	; 0x24
    e80c:	4628      	mov	r0, r5
    e80e:	47a0      	blx	r4
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
    e810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    e814:	622b      	str	r3, [r5, #32]
            return NULL;
    e816:	2500      	movs	r5, #0
    e818:	e7ae      	b.n	e778 <_lv_img_cache_open+0x94>
        return NULL;
    e81a:	2500      	movs	r5, #0
    e81c:	e7ac      	b.n	e778 <_lv_img_cache_open+0x94>
    e81e:	bf00      	nop
    e820:	20002b58 	.word	0x20002b58
    e824:	2000ad64 	.word	0x2000ad64
    e828:	80000002 	.word	0x80000002
    e82c:	00008f35 	.word	0x00008f35
    e830:	0000f209 	.word	0x0000f209
    e834:	0001029d 	.word	0x0001029d
    e838:	0000f11d 	.word	0x0000f11d
    e83c:	000102b5 	.word	0x000102b5
    e840:	00011bdb 	.word	0x00011bdb
    e844:	0001746b 	.word	0x0001746b

0000e848 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
    e848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    e84c:	4b14      	ldr	r3, [pc, #80]	; (e8a0 <lv_img_cache_invalidate_src+0x58>)
    e84e:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
    e850:	4b14      	ldr	r3, [pc, #80]	; (e8a4 <lv_img_cache_invalidate_src+0x5c>)
    e852:	881b      	ldrh	r3, [r3, #0]
    e854:	b30b      	cbz	r3, e89a <lv_img_cache_invalidate_src+0x52>
    e856:	4606      	mov	r6, r0
    e858:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e85a:	f8df 904c 	ldr.w	r9, [pc, #76]	; e8a8 <lv_img_cache_invalidate_src+0x60>
                lv_img_decoder_close(&cache[i].dec_dsc);
    e85e:	f8df a04c 	ldr.w	sl, [pc, #76]	; e8ac <lv_img_cache_invalidate_src+0x64>
    for(i = 0; i < entry_cnt; i++) {
    e862:	f8df 8040 	ldr.w	r8, [pc, #64]	; e8a4 <lv_img_cache_invalidate_src+0x5c>
    e866:	e00e      	b.n	e886 <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
    e868:	b10b      	cbz	r3, e86e <lv_img_cache_invalidate_src+0x26>
                lv_img_decoder_close(&cache[i].dec_dsc);
    e86a:	4628      	mov	r0, r5
    e86c:	47d0      	blx	sl
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e86e:	2120      	movs	r1, #32
    e870:	4628      	mov	r0, r5
    e872:	47c8      	blx	r9
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
    e874:	2124      	movs	r1, #36	; 0x24
    e876:	4628      	mov	r0, r5
    e878:	47c8      	blx	r9
    for(i = 0; i < entry_cnt; i++) {
    e87a:	3401      	adds	r4, #1
    e87c:	b2a4      	uxth	r4, r4
    e87e:	f8b8 3000 	ldrh.w	r3, [r8]
    e882:	42a3      	cmp	r3, r4
    e884:	d909      	bls.n	e89a <lv_img_cache_invalidate_src+0x52>
        if(cache[i].dec_dsc.src == src || src == NULL) {
    e886:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    e88a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    e88e:	686b      	ldr	r3, [r5, #4]
    e890:	42b3      	cmp	r3, r6
    e892:	d0e9      	beq.n	e868 <lv_img_cache_invalidate_src+0x20>
    e894:	2e00      	cmp	r6, #0
    e896:	d1f0      	bne.n	e87a <lv_img_cache_invalidate_src+0x32>
    e898:	e7e6      	b.n	e868 <lv_img_cache_invalidate_src+0x20>
    e89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e89e:	bf00      	nop
    e8a0:	2000ad64 	.word	0x2000ad64
    e8a4:	20002b58 	.word	0x20002b58
    e8a8:	00011bdb 	.word	0x00011bdb
    e8ac:	0000f209 	.word	0x0000f209

0000e8b0 <lv_img_cache_set_size>:
{
    e8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8b4:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    e8b6:	4b1e      	ldr	r3, [pc, #120]	; (e930 <lv_img_cache_set_size+0x80>)
    e8b8:	681b      	ldr	r3, [r3, #0]
    e8ba:	b133      	cbz	r3, e8ca <lv_img_cache_set_size+0x1a>
        lv_img_cache_invalidate_src(NULL);
    e8bc:	2000      	movs	r0, #0
    e8be:	4b1d      	ldr	r3, [pc, #116]	; (e934 <lv_img_cache_set_size+0x84>)
    e8c0:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
    e8c2:	4b1b      	ldr	r3, [pc, #108]	; (e930 <lv_img_cache_set_size+0x80>)
    e8c4:	6818      	ldr	r0, [r3, #0]
    e8c6:	4b1c      	ldr	r3, [pc, #112]	; (e938 <lv_img_cache_set_size+0x88>)
    e8c8:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
    e8ca:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    e8ce:	0080      	lsls	r0, r0, #2
    e8d0:	4b1a      	ldr	r3, [pc, #104]	; (e93c <lv_img_cache_set_size+0x8c>)
    e8d2:	4798      	blx	r3
    e8d4:	4b16      	ldr	r3, [pc, #88]	; (e930 <lv_img_cache_set_size+0x80>)
    e8d6:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    e8d8:	4b19      	ldr	r3, [pc, #100]	; (e940 <lv_img_cache_set_size+0x90>)
    e8da:	4798      	blx	r3
    e8dc:	b1e0      	cbz	r0, e918 <lv_img_cache_set_size+0x68>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
    e8de:	4b14      	ldr	r3, [pc, #80]	; (e930 <lv_img_cache_set_size+0x80>)
    e8e0:	681b      	ldr	r3, [r3, #0]
    e8e2:	b303      	cbz	r3, e926 <lv_img_cache_set_size+0x76>
    entry_cnt = new_entry_cnt;
    e8e4:	4b17      	ldr	r3, [pc, #92]	; (e944 <lv_img_cache_set_size+0x94>)
    e8e6:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
    e8e8:	b1a4      	cbz	r4, e914 <lv_img_cache_set_size+0x64>
    e8ea:	2400      	movs	r4, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e8ec:	4f10      	ldr	r7, [pc, #64]	; (e930 <lv_img_cache_set_size+0x80>)
    e8ee:	4e16      	ldr	r6, [pc, #88]	; (e948 <lv_img_cache_set_size+0x98>)
    for(i = 0; i < entry_cnt; i++) {
    e8f0:	4698      	mov	r8, r3
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    e8f2:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    e8f6:	00ad      	lsls	r5, r5, #2
    e8f8:	6838      	ldr	r0, [r7, #0]
    e8fa:	2120      	movs	r1, #32
    e8fc:	4428      	add	r0, r5
    e8fe:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
    e900:	6838      	ldr	r0, [r7, #0]
    e902:	2124      	movs	r1, #36	; 0x24
    e904:	4428      	add	r0, r5
    e906:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
    e908:	3401      	adds	r4, #1
    e90a:	b2a4      	uxth	r4, r4
    e90c:	f8b8 3000 	ldrh.w	r3, [r8]
    e910:	42a3      	cmp	r3, r4
    e912:	d8ee      	bhi.n	e8f2 <lv_img_cache_set_size+0x42>
    e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    e918:	4b05      	ldr	r3, [pc, #20]	; (e930 <lv_img_cache_set_size+0x80>)
    e91a:	681a      	ldr	r2, [r3, #0]
    e91c:	2300      	movs	r3, #0
    e91e:	480b      	ldr	r0, [pc, #44]	; (e94c <lv_img_cache_set_size+0x9c>)
    e920:	490b      	ldr	r1, [pc, #44]	; (e950 <lv_img_cache_set_size+0xa0>)
    e922:	4788      	blx	r1
    e924:	e7fe      	b.n	e924 <lv_img_cache_set_size+0x74>
        entry_cnt = 0;
    e926:	2200      	movs	r2, #0
    e928:	4b06      	ldr	r3, [pc, #24]	; (e944 <lv_img_cache_set_size+0x94>)
    e92a:	801a      	strh	r2, [r3, #0]
        return;
    e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e930:	2000ad64 	.word	0x2000ad64
    e934:	0000e849 	.word	0x0000e849
    e938:	000115fd 	.word	0x000115fd
    e93c:	00011539 	.word	0x00011539
    e940:	0000291f 	.word	0x0000291f
    e944:	20002b58 	.word	0x20002b58
    e948:	00011bdb 	.word	0x00011bdb
    e94c:	00017604 	.word	0x00017604
    e950:	00002929 	.word	0x00002929

0000e954 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
    e954:	b530      	push	{r4, r5, lr}
    e956:	b085      	sub	sp, #20
    e958:	460c      	mov	r4, r1
    e95a:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
    e95c:	4608      	mov	r0, r1
    e95e:	4b2a      	ldr	r3, [pc, #168]	; (ea08 <lv_img_decoder_built_in_info+0xb4>)
    e960:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
    e962:	b9d8      	cbnz	r0, e99c <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    e964:	7823      	ldrb	r3, [r4, #0]
    e966:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    e96a:	3b04      	subs	r3, #4
    e96c:	b2db      	uxtb	r3, r3
    e96e:	2b0a      	cmp	r3, #10
    e970:	d847      	bhi.n	ea02 <lv_img_decoder_built_in_info+0xae>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
    e972:	6823      	ldr	r3, [r4, #0]
    e974:	f3c3 238a 	ubfx	r3, r3, #10, #11
    e978:	682a      	ldr	r2, [r5, #0]
    e97a:	f363 2294 	bfi	r2, r3, #10, #11
    e97e:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    e980:	8863      	ldrh	r3, [r4, #2]
    e982:	f3c3 134a 	ubfx	r3, r3, #5, #11
    e986:	886a      	ldrh	r2, [r5, #2]
    e988:	f363 124f 	bfi	r2, r3, #5, #11
    e98c:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
    e98e:	7822      	ldrb	r2, [r4, #0]
    e990:	782b      	ldrb	r3, [r5, #0]
    e992:	f362 0304 	bfi	r3, r2, #0, #5
    e996:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
    e998:	2001      	movs	r0, #1
    e99a:	e004      	b.n	e9a6 <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
    e99c:	2801      	cmp	r0, #1
    e99e:	d004      	beq.n	e9aa <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    e9a0:	2802      	cmp	r0, #2
    e9a2:	d020      	beq.n	e9e6 <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
    e9a4:	2000      	movs	r0, #0
}
    e9a6:	b005      	add	sp, #20
    e9a8:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
    e9aa:	2202      	movs	r2, #2
    e9ac:	4621      	mov	r1, r4
    e9ae:	a802      	add	r0, sp, #8
    e9b0:	4b16      	ldr	r3, [pc, #88]	; (ea0c <lv_img_decoder_built_in_info+0xb8>)
    e9b2:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
    e9b4:	b138      	cbz	r0, e9c6 <lv_img_decoder_built_in_info+0x72>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    e9b6:	782b      	ldrb	r3, [r5, #0]
    e9b8:	331c      	adds	r3, #28
    e9ba:	f003 031f 	and.w	r3, r3, #31
    e9be:	2b0a      	cmp	r3, #10
    e9c0:	d80f      	bhi.n	e9e2 <lv_img_decoder_built_in_info+0x8e>
    return LV_RES_OK;
    e9c2:	2001      	movs	r0, #1
    e9c4:	e7ef      	b.n	e9a6 <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
    e9c6:	ab01      	add	r3, sp, #4
    e9c8:	2204      	movs	r2, #4
    e9ca:	4629      	mov	r1, r5
    e9cc:	a802      	add	r0, sp, #8
    e9ce:	4c10      	ldr	r4, [pc, #64]	; (ea10 <lv_img_decoder_built_in_info+0xbc>)
    e9d0:	47a0      	blx	r4
    e9d2:	4604      	mov	r4, r0
            lv_fs_close(&file);
    e9d4:	a802      	add	r0, sp, #8
    e9d6:	4b0f      	ldr	r3, [pc, #60]	; (ea14 <lv_img_decoder_built_in_info+0xc0>)
    e9d8:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
    e9da:	b914      	cbnz	r4, e9e2 <lv_img_decoder_built_in_info+0x8e>
    e9dc:	9b01      	ldr	r3, [sp, #4]
    e9de:	2b04      	cmp	r3, #4
    e9e0:	d0e9      	beq.n	e9b6 <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
    e9e2:	2000      	movs	r0, #0
    e9e4:	e7df      	b.n	e9a6 <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
    e9e6:	682b      	ldr	r3, [r5, #0]
    e9e8:	2001      	movs	r0, #1
    e9ea:	f360 2394 	bfi	r3, r0, #10, #11
    e9ee:	602b      	str	r3, [r5, #0]
        header->h = 1;
    e9f0:	0c1a      	lsrs	r2, r3, #16
    e9f2:	f360 124f 	bfi	r2, r0, #5, #11
    e9f6:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    e9f8:	220b      	movs	r2, #11
    e9fa:	f362 0304 	bfi	r3, r2, #0, #5
    e9fe:	702b      	strb	r3, [r5, #0]
    ea00:	e7d1      	b.n	e9a6 <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    ea02:	2000      	movs	r0, #0
    ea04:	e7cf      	b.n	e9a6 <lv_img_decoder_built_in_info+0x52>
    ea06:	bf00      	nop
    ea08:	00008f35 	.word	0x00008f35
    ea0c:	00010f11 	.word	0x00010f11
    ea10:	00010e81 	.word	0x00010e81
    ea14:	00010e51 	.word	0x00010e51

0000ea18 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
    ea18:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ea1a:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
    ea1c:	b1a4      	cbz	r4, ea48 <lv_img_decoder_built_in_close+0x30>
    ea1e:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
    ea20:	6820      	ldr	r0, [r4, #0]
    ea22:	b120      	cbz	r0, ea2e <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
    ea24:	4b09      	ldr	r3, [pc, #36]	; (ea4c <lv_img_decoder_built_in_close+0x34>)
    ea26:	4798      	blx	r3
            lv_mem_free(user_data->f);
    ea28:	6820      	ldr	r0, [r4, #0]
    ea2a:	4b09      	ldr	r3, [pc, #36]	; (ea50 <lv_img_decoder_built_in_close+0x38>)
    ea2c:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
    ea2e:	6860      	ldr	r0, [r4, #4]
    ea30:	b108      	cbz	r0, ea36 <lv_img_decoder_built_in_close+0x1e>
    ea32:	4b07      	ldr	r3, [pc, #28]	; (ea50 <lv_img_decoder_built_in_close+0x38>)
    ea34:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
    ea36:	68a0      	ldr	r0, [r4, #8]
    ea38:	b108      	cbz	r0, ea3e <lv_img_decoder_built_in_close+0x26>
    ea3a:	4b05      	ldr	r3, [pc, #20]	; (ea50 <lv_img_decoder_built_in_close+0x38>)
    ea3c:	4798      	blx	r3

        lv_mem_free(user_data);
    ea3e:	4620      	mov	r0, r4
    ea40:	4b03      	ldr	r3, [pc, #12]	; (ea50 <lv_img_decoder_built_in_close+0x38>)
    ea42:	4798      	blx	r3

        dsc->user_data = NULL;
    ea44:	2300      	movs	r3, #0
    ea46:	61eb      	str	r3, [r5, #28]
    ea48:	bd38      	pop	{r3, r4, r5, pc}
    ea4a:	bf00      	nop
    ea4c:	00010e51 	.word	0x00010e51
    ea50:	000115fd 	.word	0x000115fd

0000ea54 <lv_img_decoder_built_in_open>:
{
    ea54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea58:	b083      	sub	sp, #12
    ea5a:	4605      	mov	r5, r0
    ea5c:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    ea5e:	7a8b      	ldrb	r3, [r1, #10]
    ea60:	2b01      	cmp	r3, #1
    ea62:	d015      	beq.n	ea90 <lv_img_decoder_built_in_open+0x3c>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    ea64:	2b00      	cmp	r3, #0
    ea66:	f040 8121 	bne.w	ecac <lv_img_decoder_built_in_open+0x258>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
    ea6a:	684b      	ldr	r3, [r1, #4]
    ea6c:	689b      	ldr	r3, [r3, #8]
    ea6e:	2b00      	cmp	r3, #0
    ea70:	f000 811a 	beq.w	eca8 <lv_img_decoder_built_in_open+0x254>
    lv_img_cf_t cf = dsc->header.cf;
    ea74:	7b08      	ldrb	r0, [r1, #12]
    ea76:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    ea7a:	1f03      	subs	r3, r0, #4
    ea7c:	b2db      	uxtb	r3, r3
    ea7e:	2b02      	cmp	r3, #2
    ea80:	d854      	bhi.n	eb2c <lv_img_decoder_built_in_open+0xd8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
    ea82:	6863      	ldr	r3, [r4, #4]
    ea84:	689b      	ldr	r3, [r3, #8]
    ea86:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    ea88:	2001      	movs	r0, #1
}
    ea8a:	b003      	add	sp, #12
    ea8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    ea90:	6848      	ldr	r0, [r1, #4]
    ea92:	4b8c      	ldr	r3, [pc, #560]	; (ecc4 <lv_img_decoder_built_in_open+0x270>)
    ea94:	4798      	blx	r3
    ea96:	498c      	ldr	r1, [pc, #560]	; (ecc8 <lv_img_decoder_built_in_open+0x274>)
    ea98:	4b8c      	ldr	r3, [pc, #560]	; (eccc <lv_img_decoder_built_in_open+0x278>)
    ea9a:	4798      	blx	r3
    ea9c:	b9a8      	cbnz	r0, eaca <lv_img_decoder_built_in_open+0x76>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
    ea9e:	2202      	movs	r2, #2
    eaa0:	6861      	ldr	r1, [r4, #4]
    eaa2:	4668      	mov	r0, sp
    eaa4:	4b8a      	ldr	r3, [pc, #552]	; (ecd0 <lv_img_decoder_built_in_open+0x27c>)
    eaa6:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
    eaa8:	b978      	cbnz	r0, eaca <lv_img_decoder_built_in_open+0x76>
        if(dsc->user_data == NULL) {
    eaaa:	69e3      	ldr	r3, [r4, #28]
    eaac:	b17b      	cbz	r3, eace <lv_img_decoder_built_in_open+0x7a>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    eaae:	69e6      	ldr	r6, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
    eab0:	2008      	movs	r0, #8
    eab2:	4b88      	ldr	r3, [pc, #544]	; (ecd4 <lv_img_decoder_built_in_open+0x280>)
    eab4:	4798      	blx	r3
    eab6:	6030      	str	r0, [r6, #0]
        LV_ASSERT_MEM(user_data->f);
    eab8:	4b87      	ldr	r3, [pc, #540]	; (ecd8 <lv_img_decoder_built_in_open+0x284>)
    eaba:	4798      	blx	r3
    eabc:	b1d8      	cbz	r0, eaf6 <lv_img_decoder_built_in_open+0xa2>
        if(user_data->f == NULL) {
    eabe:	6833      	ldr	r3, [r6, #0]
    eac0:	b9fb      	cbnz	r3, eb02 <lv_img_decoder_built_in_open+0xae>
            lv_img_decoder_built_in_close(decoder, dsc);
    eac2:	4621      	mov	r1, r4
    eac4:	4628      	mov	r0, r5
    eac6:	4b85      	ldr	r3, [pc, #532]	; (ecdc <lv_img_decoder_built_in_open+0x288>)
    eac8:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    eaca:	2000      	movs	r0, #0
    eacc:	e7dd      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    eace:	200c      	movs	r0, #12
    ead0:	4b80      	ldr	r3, [pc, #512]	; (ecd4 <lv_img_decoder_built_in_open+0x280>)
    ead2:	4798      	blx	r3
    ead4:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    ead6:	4b80      	ldr	r3, [pc, #512]	; (ecd8 <lv_img_decoder_built_in_open+0x284>)
    ead8:	4798      	blx	r3
    eada:	b928      	cbnz	r0, eae8 <lv_img_decoder_built_in_open+0x94>
    eadc:	69e2      	ldr	r2, [r4, #28]
    eade:	2300      	movs	r3, #0
    eae0:	487f      	ldr	r0, [pc, #508]	; (ece0 <lv_img_decoder_built_in_open+0x28c>)
    eae2:	4980      	ldr	r1, [pc, #512]	; (ece4 <lv_img_decoder_built_in_open+0x290>)
    eae4:	4788      	blx	r1
    eae6:	e7fe      	b.n	eae6 <lv_img_decoder_built_in_open+0x92>
            if(dsc->user_data == NULL) {
    eae8:	69e0      	ldr	r0, [r4, #28]
    eaea:	2800      	cmp	r0, #0
    eaec:	d0ed      	beq.n	eaca <lv_img_decoder_built_in_open+0x76>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    eaee:	210c      	movs	r1, #12
    eaf0:	4b7d      	ldr	r3, [pc, #500]	; (ece8 <lv_img_decoder_built_in_open+0x294>)
    eaf2:	4798      	blx	r3
    eaf4:	e7db      	b.n	eaae <lv_img_decoder_built_in_open+0x5a>
        LV_ASSERT_MEM(user_data->f);
    eaf6:	6832      	ldr	r2, [r6, #0]
    eaf8:	2300      	movs	r3, #0
    eafa:	4879      	ldr	r0, [pc, #484]	; (ece0 <lv_img_decoder_built_in_open+0x28c>)
    eafc:	4979      	ldr	r1, [pc, #484]	; (ece4 <lv_img_decoder_built_in_open+0x290>)
    eafe:	4788      	blx	r1
    eb00:	e7fe      	b.n	eb00 <lv_img_decoder_built_in_open+0xac>
    eb02:	f10d 32ff 	add.w	r2, sp, #4294967295
    eb06:	f103 0108 	add.w	r1, r3, #8
    eb0a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    eb0e:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    eb12:	428b      	cmp	r3, r1
    eb14:	d1f9      	bne.n	eb0a <lv_img_decoder_built_in_open+0xb6>
    lv_img_cf_t cf = dsc->header.cf;
    eb16:	7b20      	ldrb	r0, [r4, #12]
    eb18:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    eb1c:	1f03      	subs	r3, r0, #4
    eb1e:	b2db      	uxtb	r3, r3
    eb20:	2b02      	cmp	r3, #2
    eb22:	d803      	bhi.n	eb2c <lv_img_decoder_built_in_open+0xd8>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    eb24:	7aa3      	ldrb	r3, [r4, #10]
    eb26:	2b00      	cmp	r3, #0
    eb28:	d0ab      	beq.n	ea82 <lv_img_decoder_built_in_open+0x2e>
    eb2a:	e0c7      	b.n	ecbc <lv_img_decoder_built_in_open+0x268>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
    eb2c:	1fc3      	subs	r3, r0, #7
    eb2e:	b2db      	uxtb	r3, r3
    eb30:	2b03      	cmp	r3, #3
    eb32:	d909      	bls.n	eb48 <lv_img_decoder_built_in_open+0xf4>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
    eb34:	f1a0 030b 	sub.w	r3, r0, #11
    eb38:	b2db      	uxtb	r3, r3
    eb3a:	2b03      	cmp	r3, #3
    eb3c:	f200 80ae 	bhi.w	ec9c <lv_img_decoder_built_in_open+0x248>
        dsc->img_data = NULL;
    eb40:	2300      	movs	r3, #0
    eb42:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
    eb44:	2001      	movs	r0, #1
    eb46:	e7a0      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
    eb48:	4b68      	ldr	r3, [pc, #416]	; (ecec <lv_img_decoder_built_in_open+0x298>)
    eb4a:	4798      	blx	r3
    eb4c:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
    eb4e:	69e3      	ldr	r3, [r4, #28]
    eb50:	b173      	cbz	r3, eb70 <lv_img_decoder_built_in_open+0x11c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    eb52:	69e6      	ldr	r6, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
    eb54:	2002      	movs	r0, #2
    eb56:	40b8      	lsls	r0, r7
    eb58:	4b5e      	ldr	r3, [pc, #376]	; (ecd4 <lv_img_decoder_built_in_open+0x280>)
    eb5a:	4798      	blx	r3
    eb5c:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MEM(user_data->palette);
    eb5e:	4b5e      	ldr	r3, [pc, #376]	; (ecd8 <lv_img_decoder_built_in_open+0x284>)
    eb60:	4798      	blx	r3
    eb62:	b9f0      	cbnz	r0, eba2 <lv_img_decoder_built_in_open+0x14e>
    eb64:	6872      	ldr	r2, [r6, #4]
    eb66:	2300      	movs	r3, #0
    eb68:	485d      	ldr	r0, [pc, #372]	; (ece0 <lv_img_decoder_built_in_open+0x28c>)
    eb6a:	495e      	ldr	r1, [pc, #376]	; (ece4 <lv_img_decoder_built_in_open+0x290>)
    eb6c:	4788      	blx	r1
    eb6e:	e7fe      	b.n	eb6e <lv_img_decoder_built_in_open+0x11a>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    eb70:	200c      	movs	r0, #12
    eb72:	4b58      	ldr	r3, [pc, #352]	; (ecd4 <lv_img_decoder_built_in_open+0x280>)
    eb74:	4798      	blx	r3
    eb76:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    eb78:	4b57      	ldr	r3, [pc, #348]	; (ecd8 <lv_img_decoder_built_in_open+0x284>)
    eb7a:	4798      	blx	r3
    eb7c:	b928      	cbnz	r0, eb8a <lv_img_decoder_built_in_open+0x136>
    eb7e:	69e2      	ldr	r2, [r4, #28]
    eb80:	2300      	movs	r3, #0
    eb82:	4857      	ldr	r0, [pc, #348]	; (ece0 <lv_img_decoder_built_in_open+0x28c>)
    eb84:	4957      	ldr	r1, [pc, #348]	; (ece4 <lv_img_decoder_built_in_open+0x290>)
    eb86:	4788      	blx	r1
    eb88:	e7fe      	b.n	eb88 <lv_img_decoder_built_in_open+0x134>
            if(dsc->user_data == NULL) {
    eb8a:	69e0      	ldr	r0, [r4, #28]
    eb8c:	b928      	cbnz	r0, eb9a <lv_img_decoder_built_in_open+0x146>
                lv_img_decoder_built_in_close(decoder, dsc);
    eb8e:	4621      	mov	r1, r4
    eb90:	4628      	mov	r0, r5
    eb92:	4b52      	ldr	r3, [pc, #328]	; (ecdc <lv_img_decoder_built_in_open+0x288>)
    eb94:	4798      	blx	r3
                return LV_RES_INV;
    eb96:	2000      	movs	r0, #0
    eb98:	e777      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    eb9a:	210c      	movs	r1, #12
    eb9c:	4b52      	ldr	r3, [pc, #328]	; (ece8 <lv_img_decoder_built_in_open+0x294>)
    eb9e:	4798      	blx	r3
    eba0:	e7d7      	b.n	eb52 <lv_img_decoder_built_in_open+0xfe>
        uint32_t palette_size = 1 << px_size;
    eba2:	2301      	movs	r3, #1
    eba4:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
    eba8:	4638      	mov	r0, r7
    ebaa:	4b4a      	ldr	r3, [pc, #296]	; (ecd4 <lv_img_decoder_built_in_open+0x280>)
    ebac:	4798      	blx	r3
    ebae:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MEM(user_data->opa);
    ebb0:	4b49      	ldr	r3, [pc, #292]	; (ecd8 <lv_img_decoder_built_in_open+0x284>)
    ebb2:	4798      	blx	r3
    ebb4:	b380      	cbz	r0, ec18 <lv_img_decoder_built_in_open+0x1c4>
        if(user_data->palette == NULL || user_data->opa == NULL) {
    ebb6:	6873      	ldr	r3, [r6, #4]
    ebb8:	2b00      	cmp	r3, #0
    ebba:	d033      	beq.n	ec24 <lv_img_decoder_built_in_open+0x1d0>
    ebbc:	68b3      	ldr	r3, [r6, #8]
    ebbe:	b38b      	cbz	r3, ec24 <lv_img_decoder_built_in_open+0x1d0>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    ebc0:	7aa3      	ldrb	r3, [r4, #10]
    ebc2:	2b01      	cmp	r3, #1
    ebc4:	d034      	beq.n	ec30 <lv_img_decoder_built_in_open+0x1dc>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
    ebc6:	6863      	ldr	r3, [r4, #4]
    ebc8:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
    ebca:	2f00      	cmp	r7, #0
    ebcc:	d062      	beq.n	ec94 <lv_img_decoder_built_in_open+0x240>
    ebce:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
    ebd0:	6870      	ldr	r0, [r6, #4]
    ebd2:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    ebd6:	f892 e001 	ldrb.w	lr, [r2, #1]
    ebda:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    ebde:	7895      	ldrb	r5, [r2, #2]
    ebe0:	08ed      	lsrs	r5, r5, #3
    ebe2:	7811      	ldrb	r1, [r2, #0]
    ebe4:	08c9      	lsrs	r1, r1, #3
    ebe6:	f810 8013 	ldrb.w	r8, [r0, r3, lsl #1]
    ebea:	f361 0804 	bfi	r8, r1, #0, #5
    ebee:	f800 8013 	strb.w	r8, [r0, r3, lsl #1]
    ebf2:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    ebf6:	f36e 114a 	bfi	r1, lr, #5, #6
    ebfa:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    ebfe:	0a09      	lsrs	r1, r1, #8
    ec00:	f365 01c7 	bfi	r1, r5, #3, #5
    ec04:	f88c 1001 	strb.w	r1, [ip, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
    ec08:	78d0      	ldrb	r0, [r2, #3]
    ec0a:	68b1      	ldr	r1, [r6, #8]
    ec0c:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
    ec0e:	3301      	adds	r3, #1
    ec10:	3204      	adds	r2, #4
    ec12:	429f      	cmp	r7, r3
    ec14:	d1dc      	bne.n	ebd0 <lv_img_decoder_built_in_open+0x17c>
    ec16:	e03d      	b.n	ec94 <lv_img_decoder_built_in_open+0x240>
        LV_ASSERT_MEM(user_data->opa);
    ec18:	68b2      	ldr	r2, [r6, #8]
    ec1a:	2300      	movs	r3, #0
    ec1c:	4830      	ldr	r0, [pc, #192]	; (ece0 <lv_img_decoder_built_in_open+0x28c>)
    ec1e:	4931      	ldr	r1, [pc, #196]	; (ece4 <lv_img_decoder_built_in_open+0x290>)
    ec20:	4788      	blx	r1
    ec22:	e7fe      	b.n	ec22 <lv_img_decoder_built_in_open+0x1ce>
            lv_img_decoder_built_in_close(decoder, dsc);
    ec24:	4621      	mov	r1, r4
    ec26:	4628      	mov	r0, r5
    ec28:	4b2c      	ldr	r3, [pc, #176]	; (ecdc <lv_img_decoder_built_in_open+0x288>)
    ec2a:	4798      	blx	r3
            return LV_RES_INV;
    ec2c:	2000      	movs	r0, #0
    ec2e:	e72c      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
    ec30:	2104      	movs	r1, #4
    ec32:	6830      	ldr	r0, [r6, #0]
    ec34:	4b2e      	ldr	r3, [pc, #184]	; (ecf0 <lv_img_decoder_built_in_open+0x29c>)
    ec36:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
    ec38:	b367      	cbz	r7, ec94 <lv_img_decoder_built_in_open+0x240>
    ec3a:	2500      	movs	r5, #0
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
    ec3c:	46a9      	mov	r9, r5
    ec3e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ecf4 <lv_img_decoder_built_in_open+0x2a0>
    ec42:	464b      	mov	r3, r9
    ec44:	2204      	movs	r2, #4
    ec46:	4669      	mov	r1, sp
    ec48:	6830      	ldr	r0, [r6, #0]
    ec4a:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
    ec4c:	6872      	ldr	r2, [r6, #4]
    ec4e:	eb02 0e45 	add.w	lr, r2, r5, lsl #1
    ec52:	f89d 0001 	ldrb.w	r0, [sp, #1]
    ec56:	0880      	lsrs	r0, r0, #2
    ec58:	f89d 1002 	ldrb.w	r1, [sp, #2]
    ec5c:	08c9      	lsrs	r1, r1, #3
    ec5e:	f89d 3000 	ldrb.w	r3, [sp]
    ec62:	08db      	lsrs	r3, r3, #3
    ec64:	f812 c015 	ldrb.w	ip, [r2, r5, lsl #1]
    ec68:	f363 0c04 	bfi	ip, r3, #0, #5
    ec6c:	f802 c015 	strb.w	ip, [r2, r5, lsl #1]
    ec70:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    ec74:	f360 134a 	bfi	r3, r0, #5, #6
    ec78:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    ec7c:	0a1b      	lsrs	r3, r3, #8
    ec7e:	f361 03c7 	bfi	r3, r1, #3, #5
    ec82:	f88e 3001 	strb.w	r3, [lr, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
    ec86:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ec8a:	68b3      	ldr	r3, [r6, #8]
    ec8c:	555a      	strb	r2, [r3, r5]
            for(i = 0; i < palette_size; i++) {
    ec8e:	3501      	adds	r5, #1
    ec90:	42af      	cmp	r7, r5
    ec92:	d1d6      	bne.n	ec42 <lv_img_decoder_built_in_open+0x1ee>
        dsc->img_data = NULL;
    ec94:	2300      	movs	r3, #0
    ec96:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
    ec98:	2001      	movs	r0, #1
    ec9a:	e6f6      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
        lv_img_decoder_built_in_close(decoder, dsc);
    ec9c:	4621      	mov	r1, r4
    ec9e:	4628      	mov	r0, r5
    eca0:	4b0e      	ldr	r3, [pc, #56]	; (ecdc <lv_img_decoder_built_in_open+0x288>)
    eca2:	4798      	blx	r3
        return LV_RES_INV;
    eca4:	2000      	movs	r0, #0
    eca6:	e6f0      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
            return LV_RES_INV;
    eca8:	2000      	movs	r0, #0
    ecaa:	e6ee      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
    lv_img_cf_t cf = dsc->header.cf;
    ecac:	7b08      	ldrb	r0, [r1, #12]
    ecae:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    ecb2:	1f03      	subs	r3, r0, #4
    ecb4:	b2db      	uxtb	r3, r3
    ecb6:	2b02      	cmp	r3, #2
    ecb8:	f63f af38 	bhi.w	eb2c <lv_img_decoder_built_in_open+0xd8>
            dsc->img_data = NULL;
    ecbc:	2300      	movs	r3, #0
    ecbe:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    ecc0:	2001      	movs	r0, #1
    ecc2:	e6e2      	b.n	ea8a <lv_img_decoder_built_in_open+0x36>
    ecc4:	00010fc5 	.word	0x00010fc5
    ecc8:	000177a4 	.word	0x000177a4
    eccc:	0001746b 	.word	0x0001746b
    ecd0:	00010f11 	.word	0x00010f11
    ecd4:	00011539 	.word	0x00011539
    ecd8:	0000291f 	.word	0x0000291f
    ecdc:	0000ea19 	.word	0x0000ea19
    ece0:	00017604 	.word	0x00017604
    ece4:	00002929 	.word	0x00002929
    ece8:	00011bdb 	.word	0x00011bdb
    ecec:	00008cb1 	.word	0x00008cb1
    ecf0:	00010ebd 	.word	0x00010ebd
    ecf4:	00010e81 	.word	0x00010e81

0000ecf8 <lv_img_decoder_built_in_read_line>:
{
    ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecfc:	b089      	sub	sp, #36	; 0x24
    ecfe:	460d      	mov	r5, r1
    ed00:	4614      	mov	r4, r2
    ed02:	469a      	mov	sl, r3
    ed04:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    ed08:	7b0b      	ldrb	r3, [r1, #12]
    ed0a:	f003 031f 	and.w	r3, r3, #31
    ed0e:	1f1a      	subs	r2, r3, #4
    ed10:	b2d2      	uxtb	r2, r2
    ed12:	2a02      	cmp	r2, #2
    ed14:	d832      	bhi.n	ed7c <lv_img_decoder_built_in_read_line+0x84>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    ed16:	7a8b      	ldrb	r3, [r1, #10]
    ed18:	2b01      	cmp	r3, #1
    ed1a:	d003      	beq.n	ed24 <lv_img_decoder_built_in_read_line+0x2c>
    lv_res_t res = LV_RES_INV;
    ed1c:	2000      	movs	r0, #0
}
    ed1e:	b009      	add	sp, #36	; 0x24
    ed20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ed24:	f8d1 801c 	ldr.w	r8, [r1, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    ed28:	7b08      	ldrb	r0, [r1, #12]
    ed2a:	f000 001f 	and.w	r0, r0, #31
    ed2e:	4bb5      	ldr	r3, [pc, #724]	; (f004 <lv_img_decoder_built_in_read_line+0x30c>)
    ed30:	4798      	blx	r3
    ed32:	4607      	mov	r7, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    ed34:	68e9      	ldr	r1, [r5, #12]
    ed36:	f3c1 218a 	ubfx	r1, r1, #10, #11
    ed3a:	fb0a 4101 	mla	r1, sl, r1, r4
    ed3e:	fb00 f101 	mul.w	r1, r0, r1
    ed42:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
    ed44:	3104      	adds	r1, #4
    ed46:	f8d8 0000 	ldr.w	r0, [r8]
    ed4a:	4baf      	ldr	r3, [pc, #700]	; (f008 <lv_img_decoder_built_in_read_line+0x310>)
    ed4c:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
    ed4e:	b108      	cbz	r0, ed54 <lv_img_decoder_built_in_read_line+0x5c>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    ed50:	2000      	movs	r0, #0
    ed52:	e7e4      	b.n	ed1e <lv_img_decoder_built_in_read_line+0x26>
    }
    uint32_t btr = len * (px_size >> 3);
    ed54:	f3c7 00c7 	ubfx	r0, r7, #3, #8
    ed58:	fb06 f600 	mul.w	r6, r6, r0
    uint32_t br  = 0;
    ed5c:	ab08      	add	r3, sp, #32
    ed5e:	2200      	movs	r2, #0
    ed60:	f843 2d10 	str.w	r2, [r3, #-16]!
    lv_fs_read(user_data->f, buf, btr, &br);
    ed64:	4632      	mov	r2, r6
    ed66:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ed68:	f8d8 0000 	ldr.w	r0, [r8]
    ed6c:	4ca7      	ldr	r4, [pc, #668]	; (f00c <lv_img_decoder_built_in_read_line+0x314>)
    ed6e:	47a0      	blx	r4
        return LV_RES_INV;
    ed70:	9804      	ldr	r0, [sp, #16]
    ed72:	42b0      	cmp	r0, r6
    ed74:	bf14      	ite	ne
    ed76:	2000      	movne	r0, #0
    ed78:	2001      	moveq	r0, #1
    ed7a:	e7d0      	b.n	ed1e <lv_img_decoder_built_in_read_line+0x26>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    ed7c:	f1a3 020b 	sub.w	r2, r3, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    ed80:	b2d2      	uxtb	r2, r2
    ed82:	2a03      	cmp	r2, #3
    ed84:	d906      	bls.n	ed94 <lv_img_decoder_built_in_read_line+0x9c>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    ed86:	3b07      	subs	r3, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
    ed88:	b2db      	uxtb	r3, r3
    ed8a:	2b03      	cmp	r3, #3
    ed8c:	f240 80d6 	bls.w	ef3c <lv_img_decoder_built_in_read_line+0x244>
        return LV_RES_INV;
    ed90:	2000      	movs	r0, #0
    ed92:	e7c4      	b.n	ed1e <lv_img_decoder_built_in_read_line+0x26>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    ed94:	2200      	movs	r2, #0
    ed96:	f88d 2008 	strb.w	r2, [sp, #8]
    ed9a:	23ff      	movs	r3, #255	; 0xff
    ed9c:	f88d 3009 	strb.w	r3, [sp, #9]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    eda0:	f88d 200c 	strb.w	r2, [sp, #12]
    eda4:	2255      	movs	r2, #85	; 0x55
    eda6:	f88d 200d 	strb.w	r2, [sp, #13]
    edaa:	22aa      	movs	r2, #170	; 0xaa
    edac:	f88d 200e 	strb.w	r2, [sp, #14]
    edb0:	f88d 300f 	strb.w	r3, [sp, #15]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
    edb4:	4b96      	ldr	r3, [pc, #600]	; (f010 <lv_img_decoder_built_in_read_line+0x318>)
    edb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    edb8:	af08      	add	r7, sp, #32
    edba:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
    edbe:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
    edc0:	2e00      	cmp	r6, #0
    edc2:	dd0c      	ble.n	edde <lv_img_decoder_built_in_read_line+0xe6>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    edc4:	0a08      	lsrs	r0, r1, #8
    edc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    edc8:	1e72      	subs	r2, r6, #1
    edca:	b292      	uxth	r2, r2
    edcc:	3201      	adds	r2, #1
    edce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    edd2:	441a      	add	r2, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
    edd4:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    edd6:	7058      	strb	r0, [r3, #1]
    edd8:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
    edda:	429a      	cmp	r2, r3
    eddc:	d1fa      	bne.n	edd4 <lv_img_decoder_built_in_read_line+0xdc>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
    edde:	7b28      	ldrb	r0, [r5, #12]
    ede0:	f000 001f 	and.w	r0, r0, #31
    ede4:	4b87      	ldr	r3, [pc, #540]	; (f004 <lv_img_decoder_built_in_read_line+0x30c>)
    ede6:	4798      	blx	r3
    ede8:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    edea:	2701      	movs	r7, #1
    edec:	4087      	lsls	r7, r0
    edee:	3f01      	subs	r7, #1
    edf0:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
    edf2:	7b2b      	ldrb	r3, [r5, #12]
    edf4:	f003 031f 	and.w	r3, r3, #31
    edf8:	3b0b      	subs	r3, #11
    edfa:	2b03      	cmp	r3, #3
    edfc:	f200 8083 	bhi.w	ef06 <lv_img_decoder_built_in_read_line+0x20e>
    ee00:	e8df f003 	tbb	[pc, r3]
    ee04:	76614c02 	.word	0x76614c02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    ee08:	68eb      	ldr	r3, [r5, #12]
    ee0a:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ee0e:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
    ee10:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    ee14:	bf0c      	ite	eq
    ee16:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
    ee1a:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
    ee1e:	10e3      	asrs	r3, r4, #3
    ee20:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 7 - (x & 0x7);
    ee24:	43e4      	mvns	r4, r4
    ee26:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
    ee2a:	f10d 0908 	add.w	r9, sp, #8
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ee2e:	69eb      	ldr	r3, [r5, #28]
    ee30:	9301      	str	r3, [sp, #4]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    ee32:	4658      	mov	r0, fp
    ee34:	4b77      	ldr	r3, [pc, #476]	; (f014 <lv_img_decoder_built_in_read_line+0x31c>)
    ee36:	4798      	blx	r3
    ee38:	9000      	str	r0, [sp, #0]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    ee3a:	7aab      	ldrb	r3, [r5, #10]
    ee3c:	2b00      	cmp	r3, #0
    ee3e:	d16b      	bne.n	ef18 <lv_img_decoder_built_in_read_line+0x220>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
    ee40:	686b      	ldr	r3, [r5, #4]
    ee42:	689b      	ldr	r3, [r3, #8]
    ee44:	449a      	add	sl, r3
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
    ee46:	2e00      	cmp	r6, #0
    ee48:	dd23      	ble.n	ee92 <lv_img_decoder_built_in_read_line+0x19a>
    ee4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ee4c:	1e71      	subs	r1, r6, #1
    ee4e:	b289      	uxth	r1, r1
    ee50:	3101      	adds	r1, #1
    ee52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ee56:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    ee58:	f1c8 0008 	rsb	r0, r8, #8
    ee5c:	b240      	sxtb	r0, r0
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    ee5e:	f89a 3000 	ldrb.w	r3, [sl]
    ee62:	fa07 f604 	lsl.w	r6, r7, r4
    ee66:	4033      	ands	r3, r6
    ee68:	4123      	asrs	r3, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
    ee6a:	7b2e      	ldrb	r6, [r5, #12]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    ee6c:	f006 061f 	and.w	r6, r6, #31
    ee70:	2e0e      	cmp	r6, #14
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    ee72:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    ee74:	bf18      	it	ne
    ee76:	f819 3003 	ldrbne.w	r3, [r9, r3]
    ee7a:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
    ee7c:	eba4 0408 	sub.w	r4, r4, r8
    ee80:	b264      	sxtb	r4, r4
        if(pos < 0) {
    ee82:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
    ee84:	bfbc      	itt	lt
    ee86:	4604      	movlt	r4, r0
            data_tmp++;
    ee88:	f10a 0a01 	addlt.w	sl, sl, #1
    ee8c:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
    ee8e:	4291      	cmp	r1, r2
    ee90:	d1e5      	bne.n	ee5e <lv_img_decoder_built_in_read_line+0x166>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    ee92:	9800      	ldr	r0, [sp, #0]
    ee94:	4b60      	ldr	r3, [pc, #384]	; (f018 <lv_img_decoder_built_in_read_line+0x320>)
    ee96:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
    ee98:	2001      	movs	r0, #1
    ee9a:	e740      	b.n	ed1e <lv_img_decoder_built_in_read_line+0x26>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    ee9c:	68eb      	ldr	r3, [r5, #12]
    ee9e:	f3c3 238a 	ubfx	r3, r3, #10, #11
    eea2:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
    eea4:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    eea8:	bf0c      	ite	eq
    eeaa:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
    eeae:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
    eeb2:	10a3      	asrs	r3, r4, #2
    eeb4:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 6 - ((x & 0x3) * 2);
    eeb8:	43e4      	mvns	r4, r4
    eeba:	f004 0403 	and.w	r4, r4, #3
    eebe:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
    eec0:	f10d 090c 	add.w	r9, sp, #12
    eec4:	e7b3      	b.n	ee2e <lv_img_decoder_built_in_read_line+0x136>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    eec6:	68eb      	ldr	r3, [r5, #12]
    eec8:	f3c3 238a 	ubfx	r3, r3, #10, #11
    eecc:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
    eece:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    eed2:	bf0c      	ite	eq
    eed4:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x1) w++;
    eed8:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
    eedc:	1063      	asrs	r3, r4, #1
    eede:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 4 - ((x & 0x1) * 4);
    eee2:	f014 0f01 	tst.w	r4, #1
    eee6:	d013      	beq.n	ef10 <lv_img_decoder_built_in_read_line+0x218>
    eee8:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
    eeea:	f10d 0910 	add.w	r9, sp, #16
    eeee:	e79e      	b.n	ee2e <lv_img_decoder_built_in_read_line+0x136>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    eef0:	68eb      	ldr	r3, [r5, #12]
    eef2:	f3c3 238a 	ubfx	r3, r3, #10, #11
    eef6:	b29a      	uxth	r2, r3
    eef8:	fa0f fb83 	sxth.w	fp, r3
            ofs += w * y + x;  /*First pixel*/
    eefc:	fb0a 4a02 	mla	sl, sl, r2, r4
            pos = 0;
    ef00:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
    ef02:	46a1      	mov	r9, r4
    ef04:	e793      	b.n	ee2e <lv_img_decoder_built_in_read_line+0x136>
    int8_t pos   = 0;
    ef06:	2400      	movs	r4, #0
    uint32_t ofs = 0;
    ef08:	46a2      	mov	sl, r4
    lv_coord_t w = 0;
    ef0a:	46a3      	mov	fp, r4
    const lv_opa_t * opa_table = NULL;
    ef0c:	46a1      	mov	r9, r4
    ef0e:	e78e      	b.n	ee2e <lv_img_decoder_built_in_read_line+0x136>
            pos       = 4 - ((x & 0x1) * 4);
    ef10:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
    ef12:	f10d 0910 	add.w	r9, sp, #16
    ef16:	e78a      	b.n	ee2e <lv_img_decoder_built_in_read_line+0x136>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    ef18:	f10a 0104 	add.w	r1, sl, #4
    ef1c:	9b01      	ldr	r3, [sp, #4]
    ef1e:	6818      	ldr	r0, [r3, #0]
    ef20:	4b39      	ldr	r3, [pc, #228]	; (f008 <lv_img_decoder_built_in_read_line+0x310>)
    ef22:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    ef24:	2300      	movs	r3, #0
    ef26:	465a      	mov	r2, fp
    ef28:	f8dd b000 	ldr.w	fp, [sp]
    ef2c:	4659      	mov	r1, fp
    ef2e:	9801      	ldr	r0, [sp, #4]
    ef30:	6800      	ldr	r0, [r0, #0]
    ef32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; f00c <lv_img_decoder_built_in_read_line+0x314>
    ef36:	47d0      	blx	sl
        data_tmp = fs_buf;
    ef38:	46da      	mov	sl, fp
    ef3a:	e784      	b.n	ee46 <lv_img_decoder_built_in_read_line+0x14e>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    ef3c:	7b08      	ldrb	r0, [r1, #12]
    ef3e:	f000 001f 	and.w	r0, r0, #31
    ef42:	4b30      	ldr	r3, [pc, #192]	; (f004 <lv_img_decoder_built_in_read_line+0x30c>)
    ef44:	4798      	blx	r3
    ef46:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    ef48:	f04f 0801 	mov.w	r8, #1
    ef4c:	fa08 f800 	lsl.w	r8, r8, r0
    ef50:	f108 38ff 	add.w	r8, r8, #4294967295
    ef54:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
    ef58:	7b2b      	ldrb	r3, [r5, #12]
    ef5a:	f003 031f 	and.w	r3, r3, #31
    ef5e:	3b07      	subs	r3, #7
    ef60:	2b03      	cmp	r3, #3
    ef62:	f200 8096 	bhi.w	f092 <lv_img_decoder_built_in_read_line+0x39a>
    ef66:	e8df f003 	tbb	[pc, r3]
    ef6a:	5902      	.short	0x5902
    ef6c:	876f      	.short	0x876f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    ef6e:	68eb      	ldr	r3, [r5, #12]
    ef70:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ef74:	ea4f 0be3 	mov.w	fp, r3, asr #3
            if(dsc->header.w & 0x7) w++;
    ef78:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    ef7c:	bf0c      	ite	eq
    ef7e:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x7) w++;
    ef82:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 3); /*First pixel*/
    ef86:	10e3      	asrs	r3, r4, #3
    ef88:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 8;                /*Skip the palette*/
    ef8c:	f10a 0a08 	add.w	sl, sl, #8
            pos = 7 - (x & 0x7);
    ef90:	43e4      	mvns	r4, r4
    ef92:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ef96:	69ef      	ldr	r7, [r5, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    ef98:	4658      	mov	r0, fp
    ef9a:	4b1e      	ldr	r3, [pc, #120]	; (f014 <lv_img_decoder_built_in_read_line+0x31c>)
    ef9c:	4798      	blx	r3
    ef9e:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    efa0:	7aab      	ldrb	r3, [r5, #10]
    efa2:	2b00      	cmp	r3, #0
    efa4:	d17a      	bne.n	f09c <lv_img_decoder_built_in_read_line+0x3a4>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
    efa6:	686b      	ldr	r3, [r5, #4]
    efa8:	689b      	ldr	r3, [r3, #8]
    efaa:	449a      	add	sl, r3
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
    efac:	2e00      	cmp	r6, #0
    efae:	dd24      	ble.n	effa <lv_img_decoder_built_in_read_line+0x302>
    efb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    efb2:	1e71      	subs	r1, r6, #1
    efb4:	b289      	uxth	r1, r1
    efb6:	3101      	adds	r1, #1
    efb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    efbc:	4411      	add	r1, r2
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    efbe:	f1c9 0508 	rsb	r5, r9, #8
    efc2:	b26d      	sxtb	r5, r5
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    efc4:	f89a 3000 	ldrb.w	r3, [sl]
    efc8:	fa08 f004 	lsl.w	r0, r8, r4
    efcc:	4003      	ands	r3, r0
    efce:	4123      	asrs	r3, r4
        lv_color_t color = user_data->palette[val_act];
    efd0:	b2db      	uxtb	r3, r3
    efd2:	6878      	ldr	r0, [r7, #4]
    efd4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
    efd8:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
    efda:	0a00      	lsrs	r0, r0, #8
    efdc:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
    efde:	68b8      	ldr	r0, [r7, #8]
    efe0:	5cc3      	ldrb	r3, [r0, r3]
    efe2:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
    efe4:	eba4 0409 	sub.w	r4, r4, r9
    efe8:	b264      	sxtb	r4, r4
        if(pos < 0) {
    efea:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
    efec:	bfbc      	itt	lt
    efee:	462c      	movlt	r4, r5
            data_tmp++;
    eff0:	f10a 0a01 	addlt.w	sl, sl, #1
    eff4:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
    eff6:	428a      	cmp	r2, r1
    eff8:	d1e4      	bne.n	efc4 <lv_img_decoder_built_in_read_line+0x2cc>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    effa:	9800      	ldr	r0, [sp, #0]
    effc:	4b06      	ldr	r3, [pc, #24]	; (f018 <lv_img_decoder_built_in_read_line+0x320>)
    effe:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
    f000:	2001      	movs	r0, #1
    f002:	e68c      	b.n	ed1e <lv_img_decoder_built_in_read_line+0x26>
    f004:	00008cb1 	.word	0x00008cb1
    f008:	00010ebd 	.word	0x00010ebd
    f00c:	00010e81 	.word	0x00010e81
    f010:	00017794 	.word	0x00017794
    f014:	00011a29 	.word	0x00011a29
    f018:	000116a9 	.word	0x000116a9
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    f01c:	68eb      	ldr	r3, [r5, #12]
    f01e:	f3c3 238a 	ubfx	r3, r3, #10, #11
    f022:	ea4f 0ba3 	mov.w	fp, r3, asr #2
            if(dsc->header.w & 0x3) w++;
    f026:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    f02a:	bf0c      	ite	eq
    f02c:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x3) w++;
    f030:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 2); /*First pixel*/
    f034:	10a3      	asrs	r3, r4, #2
    f036:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 16;               /*Skip the palette*/
    f03a:	f10a 0a10 	add.w	sl, sl, #16
            pos = 6 - ((x & 0x3) * 2);
    f03e:	43e4      	mvns	r4, r4
    f040:	f004 0403 	and.w	r4, r4, #3
    f044:	0064      	lsls	r4, r4, #1
    f046:	e7a6      	b.n	ef96 <lv_img_decoder_built_in_read_line+0x29e>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    f048:	68eb      	ldr	r3, [r5, #12]
    f04a:	f3c3 238a 	ubfx	r3, r3, #10, #11
    f04e:	ea4f 0b63 	mov.w	fp, r3, asr #1
            if(dsc->header.w & 0x1) w++;
    f052:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    f056:	bf0c      	ite	eq
    f058:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x1) w++;
    f05c:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 1); /*First pixel*/
    f060:	1063      	asrs	r3, r4, #1
    f062:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 64;               /*Skip the palette*/
    f066:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
    f06a:	f004 0401 	and.w	r4, r4, #1
    f06e:	2c00      	cmp	r4, #0
    f070:	bf0c      	ite	eq
    f072:	2404      	moveq	r4, #4
    f074:	2400      	movne	r4, #0
    f076:	e78e      	b.n	ef96 <lv_img_decoder_built_in_read_line+0x29e>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    f078:	68eb      	ldr	r3, [r5, #12]
    f07a:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
    f07e:	fa1f f38b 	uxth.w	r3, fp
    f082:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
    f086:	fb0a 4a03 	mla	sl, sl, r3, r4
            ofs += 1024;       /*Skip the palette*/
    f08a:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
            pos = 0;
    f08e:	2400      	movs	r4, #0
    f090:	e781      	b.n	ef96 <lv_img_decoder_built_in_read_line+0x29e>
    uint32_t ofs = 0;
    f092:	f04f 0a00 	mov.w	sl, #0
    int8_t pos   = 0;
    f096:	4654      	mov	r4, sl
    lv_coord_t w = 0;
    f098:	46d3      	mov	fp, sl
    f09a:	e77c      	b.n	ef96 <lv_img_decoder_built_in_read_line+0x29e>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    f09c:	f10a 0104 	add.w	r1, sl, #4
    f0a0:	6838      	ldr	r0, [r7, #0]
    f0a2:	4b05      	ldr	r3, [pc, #20]	; (f0b8 <lv_img_decoder_built_in_read_line+0x3c0>)
    f0a4:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    f0a6:	2300      	movs	r3, #0
    f0a8:	465a      	mov	r2, fp
    f0aa:	f8dd a000 	ldr.w	sl, [sp]
    f0ae:	4651      	mov	r1, sl
    f0b0:	6838      	ldr	r0, [r7, #0]
    f0b2:	4d02      	ldr	r5, [pc, #8]	; (f0bc <lv_img_decoder_built_in_read_line+0x3c4>)
    f0b4:	47a8      	blx	r5
    f0b6:	e779      	b.n	efac <lv_img_decoder_built_in_read_line+0x2b4>
    f0b8:	00010ebd 	.word	0x00010ebd
    f0bc:	00010e81 	.word	0x00010e81

0000f0c0 <lv_img_decoder_get_info>:
{
    f0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f0c4:	4681      	mov	r9, r0
    f0c6:	460e      	mov	r6, r1
    header->always_zero = 0;
    f0c8:	780b      	ldrb	r3, [r1, #0]
    f0ca:	f36f 1347 	bfc	r3, #5, #3
    f0ce:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f0d0:	480f      	ldr	r0, [pc, #60]	; (f110 <lv_img_decoder_get_info+0x50>)
    f0d2:	4b10      	ldr	r3, [pc, #64]	; (f114 <lv_img_decoder_get_info+0x54>)
    f0d4:	4798      	blx	r3
    f0d6:	b1c8      	cbz	r0, f10c <lv_img_decoder_get_info+0x4c>
    f0d8:	4604      	mov	r4, r0
        res = LV_RES_INV;
    f0da:	f04f 0a00 	mov.w	sl, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f0de:	f8df 8030 	ldr.w	r8, [pc, #48]	; f110 <lv_img_decoder_get_info+0x50>
    f0e2:	4f0d      	ldr	r7, [pc, #52]	; (f118 <lv_img_decoder_get_info+0x58>)
    f0e4:	e005      	b.n	f0f2 <lv_img_decoder_get_info+0x32>
        res = LV_RES_INV;
    f0e6:	4655      	mov	r5, sl
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f0e8:	4621      	mov	r1, r4
    f0ea:	4640      	mov	r0, r8
    f0ec:	47b8      	blx	r7
    f0ee:	4604      	mov	r4, r0
    f0f0:	b148      	cbz	r0, f106 <lv_img_decoder_get_info+0x46>
        if(d->info_cb) {
    f0f2:	6823      	ldr	r3, [r4, #0]
    f0f4:	2b00      	cmp	r3, #0
    f0f6:	d0f6      	beq.n	f0e6 <lv_img_decoder_get_info+0x26>
            res = d->info_cb(d, src, header);
    f0f8:	4632      	mov	r2, r6
    f0fa:	4649      	mov	r1, r9
    f0fc:	4620      	mov	r0, r4
    f0fe:	4798      	blx	r3
    f100:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
    f102:	2801      	cmp	r0, #1
    f104:	d1f0      	bne.n	f0e8 <lv_img_decoder_get_info+0x28>
}
    f106:	4628      	mov	r0, r5
    f108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
    f10c:	2500      	movs	r5, #0
    f10e:	e7fa      	b.n	f106 <lv_img_decoder_get_info+0x46>
    f110:	2000acb8 	.word	0x2000acb8
    f114:	0001114d 	.word	0x0001114d
    f118:	00011161 	.word	0x00011161

0000f11c <lv_img_decoder_open>:
{
    f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f120:	4682      	mov	sl, r0
    f122:	4688      	mov	r8, r1
    dsc->color     = color;
    f124:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
    f126:	4608      	mov	r0, r1
    f128:	4b26      	ldr	r3, [pc, #152]	; (f1c4 <lv_img_decoder_open+0xa8>)
    f12a:	4798      	blx	r3
    f12c:	f88a 000a 	strb.w	r0, [sl, #10]
    dsc->user_data = NULL;
    f130:	2300      	movs	r3, #0
    f132:	f8ca 301c 	str.w	r3, [sl, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    f136:	2801      	cmp	r0, #1
    f138:	d00d      	beq.n	f156 <lv_img_decoder_open+0x3a>
        dsc->src       = src;
    f13a:	f8ca 8004 	str.w	r8, [sl, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f13e:	4822      	ldr	r0, [pc, #136]	; (f1c8 <lv_img_decoder_open+0xac>)
    f140:	4b22      	ldr	r3, [pc, #136]	; (f1cc <lv_img_decoder_open+0xb0>)
    f142:	4798      	blx	r3
    f144:	4604      	mov	r4, r0
    f146:	2800      	cmp	r0, #0
    f148:	d036      	beq.n	f1b8 <lv_img_decoder_open+0x9c>
    f14a:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
    f14c:	f10a 090c 	add.w	r9, sl, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f150:	4f1d      	ldr	r7, [pc, #116]	; (f1c8 <lv_img_decoder_open+0xac>)
    f152:	4e1f      	ldr	r6, [pc, #124]	; (f1d0 <lv_img_decoder_open+0xb4>)
    f154:	e010      	b.n	f178 <lv_img_decoder_open+0x5c>
        size_t fnlen = strlen(src);
    f156:	4640      	mov	r0, r8
    f158:	4b1e      	ldr	r3, [pc, #120]	; (f1d4 <lv_img_decoder_open+0xb8>)
    f15a:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
    f15c:	3001      	adds	r0, #1
    f15e:	4b1e      	ldr	r3, [pc, #120]	; (f1d8 <lv_img_decoder_open+0xbc>)
    f160:	4798      	blx	r3
    f162:	f8ca 0004 	str.w	r0, [sl, #4]
        strcpy((char *)dsc->src, src);
    f166:	4641      	mov	r1, r8
    f168:	4b1c      	ldr	r3, [pc, #112]	; (f1dc <lv_img_decoder_open+0xc0>)
    f16a:	4798      	blx	r3
    f16c:	e7e7      	b.n	f13e <lv_img_decoder_open+0x22>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    f16e:	4621      	mov	r1, r4
    f170:	4638      	mov	r0, r7
    f172:	47b0      	blx	r6
    f174:	4604      	mov	r4, r0
    f176:	b1d8      	cbz	r0, f1b0 <lv_img_decoder_open+0x94>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
    f178:	6823      	ldr	r3, [r4, #0]
    f17a:	2b00      	cmp	r3, #0
    f17c:	d0f7      	beq.n	f16e <lv_img_decoder_open+0x52>
    f17e:	6862      	ldr	r2, [r4, #4]
    f180:	2a00      	cmp	r2, #0
    f182:	d0f4      	beq.n	f16e <lv_img_decoder_open+0x52>
        res = d->info_cb(d, src, &dsc->header);
    f184:	464a      	mov	r2, r9
    f186:	4641      	mov	r1, r8
    f188:	4620      	mov	r0, r4
    f18a:	4798      	blx	r3
    f18c:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
    f18e:	2801      	cmp	r0, #1
    f190:	d1ed      	bne.n	f16e <lv_img_decoder_open+0x52>
        dsc->error_msg = NULL;
    f192:	2300      	movs	r3, #0
    f194:	f8ca 3018 	str.w	r3, [sl, #24]
        dsc->img_data  = NULL;
    f198:	f8ca 3010 	str.w	r3, [sl, #16]
        dsc->decoder   = d;
    f19c:	f8ca 4000 	str.w	r4, [sl]
        res = d->open_cb(d, dsc);
    f1a0:	6863      	ldr	r3, [r4, #4]
    f1a2:	4651      	mov	r1, sl
    f1a4:	4620      	mov	r0, r4
    f1a6:	4798      	blx	r3
    f1a8:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
    f1aa:	2801      	cmp	r0, #1
    f1ac:	d1df      	bne.n	f16e <lv_img_decoder_open+0x52>
    f1ae:	e000      	b.n	f1b2 <lv_img_decoder_open+0x96>
    if(res == LV_RES_INV) {
    f1b0:	b11d      	cbz	r5, f1ba <lv_img_decoder_open+0x9e>
}
    f1b2:	4628      	mov	r0, r5
    f1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
    f1b8:	2500      	movs	r5, #0
        _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
    f1ba:	2120      	movs	r1, #32
    f1bc:	4650      	mov	r0, sl
    f1be:	4b08      	ldr	r3, [pc, #32]	; (f1e0 <lv_img_decoder_open+0xc4>)
    f1c0:	4798      	blx	r3
    f1c2:	e7f6      	b.n	f1b2 <lv_img_decoder_open+0x96>
    f1c4:	00008f35 	.word	0x00008f35
    f1c8:	2000acb8 	.word	0x2000acb8
    f1cc:	0001114d 	.word	0x0001114d
    f1d0:	00011161 	.word	0x00011161
    f1d4:	0001748f 	.word	0x0001748f
    f1d8:	00011539 	.word	0x00011539
    f1dc:	0001747f 	.word	0x0001747f
    f1e0:	00011bdb 	.word	0x00011bdb

0000f1e4 <lv_img_decoder_read_line>:
{
    f1e4:	b570      	push	{r4, r5, r6, lr}
    f1e6:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
    f1e8:	6806      	ldr	r6, [r0, #0]
    f1ea:	68b4      	ldr	r4, [r6, #8]
    f1ec:	b154      	cbz	r4, f204 <lv_img_decoder_read_line+0x20>
    f1ee:	461d      	mov	r5, r3
    f1f0:	4613      	mov	r3, r2
    f1f2:	460a      	mov	r2, r1
    f1f4:	4601      	mov	r1, r0
    f1f6:	9806      	ldr	r0, [sp, #24]
    f1f8:	9001      	str	r0, [sp, #4]
    f1fa:	9500      	str	r5, [sp, #0]
    f1fc:	4630      	mov	r0, r6
    f1fe:	47a0      	blx	r4
}
    f200:	b002      	add	sp, #8
    f202:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
    f204:	2000      	movs	r0, #0
    f206:	e7fb      	b.n	f200 <lv_img_decoder_read_line+0x1c>

0000f208 <lv_img_decoder_close>:
    if(dsc->decoder) {
    f208:	6803      	ldr	r3, [r0, #0]
    f20a:	b183      	cbz	r3, f22e <lv_img_decoder_close+0x26>
{
    f20c:	b510      	push	{r4, lr}
    f20e:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
    f210:	68da      	ldr	r2, [r3, #12]
    f212:	b112      	cbz	r2, f21a <lv_img_decoder_close+0x12>
    f214:	4601      	mov	r1, r0
    f216:	4618      	mov	r0, r3
    f218:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    f21a:	7aa3      	ldrb	r3, [r4, #10]
    f21c:	2b01      	cmp	r3, #1
    f21e:	d000      	beq.n	f222 <lv_img_decoder_close+0x1a>
    f220:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
    f222:	6860      	ldr	r0, [r4, #4]
    f224:	4b02      	ldr	r3, [pc, #8]	; (f230 <lv_img_decoder_close+0x28>)
    f226:	4798      	blx	r3
            dsc->src = NULL;
    f228:	2300      	movs	r3, #0
    f22a:	6063      	str	r3, [r4, #4]
}
    f22c:	e7f8      	b.n	f220 <lv_img_decoder_close+0x18>
    f22e:	4770      	bx	lr
    f230:	000115fd 	.word	0x000115fd

0000f234 <lv_img_decoder_create>:
{
    f234:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
    f236:	480a      	ldr	r0, [pc, #40]	; (f260 <lv_img_decoder_create+0x2c>)
    f238:	4b0a      	ldr	r3, [pc, #40]	; (f264 <lv_img_decoder_create+0x30>)
    f23a:	4798      	blx	r3
    f23c:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
    f23e:	4b0a      	ldr	r3, [pc, #40]	; (f268 <lv_img_decoder_create+0x34>)
    f240:	4798      	blx	r3
    f242:	b130      	cbz	r0, f252 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
    f244:	b11c      	cbz	r4, f24e <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
    f246:	2110      	movs	r1, #16
    f248:	4620      	mov	r0, r4
    f24a:	4b08      	ldr	r3, [pc, #32]	; (f26c <lv_img_decoder_create+0x38>)
    f24c:	4798      	blx	r3
}
    f24e:	4620      	mov	r0, r4
    f250:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
    f252:	4622      	mov	r2, r4
    f254:	2300      	movs	r3, #0
    f256:	4806      	ldr	r0, [pc, #24]	; (f270 <lv_img_decoder_create+0x3c>)
    f258:	4906      	ldr	r1, [pc, #24]	; (f274 <lv_img_decoder_create+0x40>)
    f25a:	4788      	blx	r1
    f25c:	e7fe      	b.n	f25c <lv_img_decoder_create+0x28>
    f25e:	bf00      	nop
    f260:	2000acb8 	.word	0x2000acb8
    f264:	000110b5 	.word	0x000110b5
    f268:	0000291f 	.word	0x0000291f
    f26c:	00011bdb 	.word	0x00011bdb
    f270:	00017604 	.word	0x00017604
    f274:	00002929 	.word	0x00002929

0000f278 <_lv_img_decoder_init>:
{
    f278:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
    f27a:	2110      	movs	r1, #16
    f27c:	480c      	ldr	r0, [pc, #48]	; (f2b0 <_lv_img_decoder_init+0x38>)
    f27e:	4b0d      	ldr	r3, [pc, #52]	; (f2b4 <_lv_img_decoder_init+0x3c>)
    f280:	4798      	blx	r3
    decoder = lv_img_decoder_create();
    f282:	4b0d      	ldr	r3, [pc, #52]	; (f2b8 <_lv_img_decoder_init+0x40>)
    f284:	4798      	blx	r3
    if(decoder == NULL) {
    f286:	b140      	cbz	r0, f29a <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
    f288:	4a0c      	ldr	r2, [pc, #48]	; (f2bc <_lv_img_decoder_init+0x44>)
    f28a:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
    f28c:	4a0c      	ldr	r2, [pc, #48]	; (f2c0 <_lv_img_decoder_init+0x48>)
    f28e:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
    f290:	4a0c      	ldr	r2, [pc, #48]	; (f2c4 <_lv_img_decoder_init+0x4c>)
    f292:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
    f294:	4a0c      	ldr	r2, [pc, #48]	; (f2c8 <_lv_img_decoder_init+0x50>)
    f296:	60c2      	str	r2, [r0, #12]
    f298:	bd08      	pop	{r3, pc}
        LV_ASSERT_MEM(decoder);
    f29a:	4b0c      	ldr	r3, [pc, #48]	; (f2cc <_lv_img_decoder_init+0x54>)
    f29c:	4798      	blx	r3
    f29e:	2800      	cmp	r0, #0
    f2a0:	d1fa      	bne.n	f298 <_lv_img_decoder_init+0x20>
    f2a2:	2200      	movs	r2, #0
    f2a4:	2300      	movs	r3, #0
    f2a6:	480a      	ldr	r0, [pc, #40]	; (f2d0 <_lv_img_decoder_init+0x58>)
    f2a8:	490a      	ldr	r1, [pc, #40]	; (f2d4 <_lv_img_decoder_init+0x5c>)
    f2aa:	4788      	blx	r1
    f2ac:	e7fe      	b.n	f2ac <_lv_img_decoder_init+0x34>
    f2ae:	bf00      	nop
    f2b0:	2000acb8 	.word	0x2000acb8
    f2b4:	0001109d 	.word	0x0001109d
    f2b8:	0000f235 	.word	0x0000f235
    f2bc:	0000e955 	.word	0x0000e955
    f2c0:	0000ea55 	.word	0x0000ea55
    f2c4:	0000ecf9 	.word	0x0000ecf9
    f2c8:	0000ea19 	.word	0x0000ea19
    f2cc:	0000291f 	.word	0x0000291f
    f2d0:	00017604 	.word	0x00017604
    f2d4:	00002929 	.word	0x00002929

0000f2d8 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    f2d8:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
    f2da:	6843      	ldr	r3, [r0, #4]
    f2dc:	4798      	blx	r3
}
    f2de:	bd08      	pop	{r3, pc}

0000f2e0 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
    f2e0:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
    f2e2:	6804      	ldr	r4, [r0, #0]
    f2e4:	47a0      	blx	r4
}
    f2e6:	bd10      	pop	{r4, pc}

0000f2e8 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    f2e8:	b510      	push	{r4, lr}
    f2ea:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    f2ec:	4613      	mov	r3, r2
    f2ee:	460a      	mov	r2, r1
    f2f0:	a901      	add	r1, sp, #4
    f2f2:	4c04      	ldr	r4, [pc, #16]	; (f304 <lv_font_get_glyph_width+0x1c>)
    f2f4:	47a0      	blx	r4
    if(ret) return g.adv_w;
    f2f6:	b118      	cbz	r0, f300 <lv_font_get_glyph_width+0x18>
    f2f8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
    f2fc:	b004      	add	sp, #16
    f2fe:	bd10      	pop	{r4, pc}
    else return 0;
    f300:	2000      	movs	r0, #0
    f302:	e7fb      	b.n	f2fc <lv_font_get_glyph_width+0x14>
    f304:	0000f2e1 	.word	0x0000f2e1

0000f308 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
    f308:	7803      	ldrb	r3, [r0, #0]
    f30a:	780a      	ldrb	r2, [r1, #0]
    f30c:	4293      	cmp	r3, r2
    f30e:	bf11      	iteee	ne
    f310:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
    f312:	7840      	ldrbeq	r0, [r0, #1]
    f314:	784b      	ldrbeq	r3, [r1, #1]
    f316:	1ac0      	subeq	r0, r0, r3

}
    f318:	4770      	bx	lr

0000f31a <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
    f31a:	8803      	ldrh	r3, [r0, #0]
    f31c:	880a      	ldrh	r2, [r1, #0]
    f31e:	4293      	cmp	r3, r2
    f320:	bf11      	iteee	ne
    f322:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
    f324:	8840      	ldrheq	r0, [r0, #2]
    f326:	884b      	ldrheq	r3, [r1, #2]
    f328:	1ac0      	subeq	r0, r0, r3
}
    f32a:	4770      	bx	lr

0000f32c <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
    f32c:	8800      	ldrh	r0, [r0, #0]
    f32e:	880b      	ldrh	r3, [r1, #0]
}
    f330:	1ac0      	subs	r0, r0, r3
    f332:	4770      	bx	lr

0000f334 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
    f334:	460b      	mov	r3, r1
    f336:	2900      	cmp	r1, #0
    f338:	d06c      	beq.n	f414 <get_glyph_dsc_id+0xe0>
{
    f33a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f33c:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    f33e:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    f340:	69a2      	ldr	r2, [r4, #24]
    f342:	4291      	cmp	r1, r2
    f344:	d015      	beq.n	f372 <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
    f346:	8a67      	ldrh	r7, [r4, #18]
    f348:	f3c7 0709 	ubfx	r7, r7, #0, #10
    f34c:	2f00      	cmp	r7, #0
    f34e:	d05d      	beq.n	f40c <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f350:	68a1      	ldr	r1, [r4, #8]
    f352:	6808      	ldr	r0, [r1, #0]
    f354:	1a1a      	subs	r2, r3, r0
    f356:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    f358:	8888      	ldrh	r0, [r1, #4]
    f35a:	4282      	cmp	r2, r0
    f35c:	d80b      	bhi.n	f376 <get_glyph_dsc_id+0x42>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f35e:	2600      	movs	r6, #0
    f360:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
    f362:	7c8b      	ldrb	r3, [r1, #18]
    f364:	b9e3      	cbnz	r3, f3a0 <get_glyph_dsc_id+0x6c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
    f366:	88c8      	ldrh	r0, [r1, #6]
    f368:	4410      	add	r0, r2
        fdsc->last_letter = letter;
    f36a:	61a5      	str	r5, [r4, #24]
        fdsc->last_glyph_id = glyph_id;
    f36c:	61e0      	str	r0, [r4, #28]
}
    f36e:	b005      	add	sp, #20
    f370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    f372:	69e0      	ldr	r0, [r4, #28]
    f374:	e7fb      	b.n	f36e <get_glyph_dsc_id+0x3a>
        if(rcp > fdsc->cmaps[i].range_length) continue;
    f376:	2500      	movs	r5, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
    f378:	3501      	adds	r5, #1
    f37a:	b2ad      	uxth	r5, r5
    f37c:	42bd      	cmp	r5, r7
    f37e:	da45      	bge.n	f40c <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f380:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    f384:	0082      	lsls	r2, r0, #2
    f386:	4616      	mov	r6, r2
    f388:	eb01 0e02 	add.w	lr, r1, r2
    f38c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    f390:	1a9a      	subs	r2, r3, r2
    f392:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    f394:	f8be 0004 	ldrh.w	r0, [lr, #4]
    f398:	4282      	cmp	r2, r0
    f39a:	d8ed      	bhi.n	f378 <get_glyph_dsc_id+0x44>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    f39c:	4671      	mov	r1, lr
    f39e:	e7df      	b.n	f360 <get_glyph_dsc_id+0x2c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
    f3a0:	2b01      	cmp	r3, #1
    f3a2:	d005      	beq.n	f3b0 <get_glyph_dsc_id+0x7c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
    f3a4:	2b02      	cmp	r3, #2
    f3a6:	d008      	beq.n	f3ba <get_glyph_dsc_id+0x86>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
    f3a8:	2b03      	cmp	r3, #3
    f3aa:	d018      	beq.n	f3de <get_glyph_dsc_id+0xaa>
        uint32_t glyph_id = 0;
    f3ac:	2000      	movs	r0, #0
    f3ae:	e7dc      	b.n	f36a <get_glyph_dsc_id+0x36>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
    f3b0:	68cb      	ldr	r3, [r1, #12]
    f3b2:	5c9b      	ldrb	r3, [r3, r2]
    f3b4:	88c8      	ldrh	r0, [r1, #6]
    f3b6:	4418      	add	r0, r3
    f3b8:	e7d7      	b.n	f36a <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
    f3ba:	8a0a      	ldrh	r2, [r1, #16]
    f3bc:	6889      	ldr	r1, [r1, #8]
    f3be:	4b16      	ldr	r3, [pc, #88]	; (f418 <get_glyph_dsc_id+0xe4>)
    f3c0:	9300      	str	r3, [sp, #0]
    f3c2:	2302      	movs	r3, #2
    f3c4:	a803      	add	r0, sp, #12
    f3c6:	4f15      	ldr	r7, [pc, #84]	; (f41c <get_glyph_dsc_id+0xe8>)
    f3c8:	47b8      	blx	r7
            if(p) {
    f3ca:	4603      	mov	r3, r0
    f3cc:	b1d0      	cbz	r0, f404 <get_glyph_dsc_id+0xd0>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    f3ce:	68a2      	ldr	r2, [r4, #8]
    f3d0:	4416      	add	r6, r2
    f3d2:	68b0      	ldr	r0, [r6, #8]
    f3d4:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
    f3d6:	88f3      	ldrh	r3, [r6, #6]
    f3d8:	eb03 0050 	add.w	r0, r3, r0, lsr #1
    f3dc:	e7c5      	b.n	f36a <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
    f3de:	8a0a      	ldrh	r2, [r1, #16]
    f3e0:	6889      	ldr	r1, [r1, #8]
    f3e2:	4b0d      	ldr	r3, [pc, #52]	; (f418 <get_glyph_dsc_id+0xe4>)
    f3e4:	9300      	str	r3, [sp, #0]
    f3e6:	2302      	movs	r3, #2
    f3e8:	a803      	add	r0, sp, #12
    f3ea:	4f0c      	ldr	r7, [pc, #48]	; (f41c <get_glyph_dsc_id+0xe8>)
    f3ec:	47b8      	blx	r7
            if(p) {
    f3ee:	b158      	cbz	r0, f408 <get_glyph_dsc_id+0xd4>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    f3f0:	68a2      	ldr	r2, [r4, #8]
    f3f2:	4416      	add	r6, r2
    f3f4:	68b2      	ldr	r2, [r6, #8]
    f3f6:	1a83      	subs	r3, r0, r2
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
    f3f8:	085b      	lsrs	r3, r3, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
    f3fa:	68f2      	ldr	r2, [r6, #12]
    f3fc:	5cd3      	ldrb	r3, [r2, r3]
    f3fe:	88f0      	ldrh	r0, [r6, #6]
    f400:	4418      	add	r0, r3
    f402:	e7b2      	b.n	f36a <get_glyph_dsc_id+0x36>
        uint32_t glyph_id = 0;
    f404:	2000      	movs	r0, #0
    f406:	e7b0      	b.n	f36a <get_glyph_dsc_id+0x36>
    f408:	2000      	movs	r0, #0
    f40a:	e7ae      	b.n	f36a <get_glyph_dsc_id+0x36>
    fdsc->last_letter = letter;
    f40c:	61a3      	str	r3, [r4, #24]
    fdsc->last_glyph_id = 0;
    f40e:	2000      	movs	r0, #0
    f410:	61e0      	str	r0, [r4, #28]
    return 0;
    f412:	e7ac      	b.n	f36e <get_glyph_dsc_id+0x3a>
    if(letter == '\0') return 0;
    f414:	4608      	mov	r0, r1
    f416:	4770      	bx	lr
    f418:	0000f32d 	.word	0x0000f32d
    f41c:	0001263d 	.word	0x0001263d

0000f420 <lv_font_get_bitmap_fmt_txt>:
{
    f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f424:	b09d      	sub	sp, #116	; 0x74
    if(unicode_letter == '\t') unicode_letter = ' ';
    f426:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    f428:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    f42a:	bf08      	it	eq
    f42c:	2120      	moveq	r1, #32
    f42e:	4baa      	ldr	r3, [pc, #680]	; (f6d8 <lv_font_get_bitmap_fmt_txt+0x2b8>)
    f430:	4798      	blx	r3
    if(!gid) return NULL;
    f432:	2800      	cmp	r0, #0
    f434:	f000 84de 	beq.w	fdf4 <lv_font_get_bitmap_fmt_txt+0x9d4>
    f438:	4680      	mov	r8, r0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    f43a:	686f      	ldr	r7, [r5, #4]
    f43c:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
    f440:	7d2b      	ldrb	r3, [r5, #20]
    f442:	f013 0f03 	tst.w	r3, #3
    f446:	d10b      	bne.n	f460 <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
    f448:	2e00      	cmp	r6, #0
    f44a:	f000 84d6 	beq.w	fdfa <lv_font_get_bitmap_fmt_txt+0x9da>
    f44e:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
    f452:	f3c3 0313 	ubfx	r3, r3, #0, #20
    f456:	6828      	ldr	r0, [r5, #0]
    f458:	4418      	add	r0, r3
}
    f45a:	b01d      	add	sp, #116	; 0x74
    f45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
    f460:	7933      	ldrb	r3, [r6, #4]
    f462:	7974      	ldrb	r4, [r6, #5]
    f464:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
    f468:	2c00      	cmp	r4, #0
    f46a:	f000 84c9 	beq.w	fe00 <lv_font_get_bitmap_fmt_txt+0x9e0>
        switch(fdsc->bpp) {
    f46e:	7ceb      	ldrb	r3, [r5, #19]
    f470:	f3c3 0383 	ubfx	r3, r3, #2, #4
    f474:	3b01      	subs	r3, #1
    f476:	2b03      	cmp	r3, #3
    f478:	d805      	bhi.n	f486 <lv_font_get_bitmap_fmt_txt+0x66>
    f47a:	e8df f003 	tbb	[pc, r3]
    f47e:	7502      	.short	0x7502
    f480:	7b78      	.short	0x7b78
                buf_size = (gsize + 7) >> 3;
    f482:	3407      	adds	r4, #7
    f484:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(decompr_buf) < buf_size) {
    f486:	4b95      	ldr	r3, [pc, #596]	; (f6dc <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f488:	6818      	ldr	r0, [r3, #0]
    f48a:	4b95      	ldr	r3, [pc, #596]	; (f6e0 <lv_font_get_bitmap_fmt_txt+0x2c0>)
    f48c:	4798      	blx	r3
    f48e:	4284      	cmp	r4, r0
    f490:	d911      	bls.n	f4b6 <lv_font_get_bitmap_fmt_txt+0x96>
            decompr_buf = lv_mem_realloc(decompr_buf, buf_size);
    f492:	f8df 9248 	ldr.w	r9, [pc, #584]	; f6dc <lv_font_get_bitmap_fmt_txt+0x2bc>
    f496:	4621      	mov	r1, r4
    f498:	f8d9 0000 	ldr.w	r0, [r9]
    f49c:	4b91      	ldr	r3, [pc, #580]	; (f6e4 <lv_font_get_bitmap_fmt_txt+0x2c4>)
    f49e:	4798      	blx	r3
    f4a0:	f8c9 0000 	str.w	r0, [r9]
            LV_ASSERT_MEM(decompr_buf);
    f4a4:	4b90      	ldr	r3, [pc, #576]	; (f6e8 <lv_font_get_bitmap_fmt_txt+0x2c8>)
    f4a6:	4798      	blx	r3
    f4a8:	2800      	cmp	r0, #0
    f4aa:	d066      	beq.n	f57a <lv_font_get_bitmap_fmt_txt+0x15a>
            if(decompr_buf == NULL) return NULL;
    f4ac:	4b8b      	ldr	r3, [pc, #556]	; (f6dc <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f4ae:	681b      	ldr	r3, [r3, #0]
    f4b0:	2b00      	cmp	r3, #0
    f4b2:	f000 84a8 	beq.w	fe06 <lv_font_get_bitmap_fmt_txt+0x9e6>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], decompr_buf, gdsc->box_w, gdsc->box_h, (uint8_t)fdsc->bpp);
    f4b6:	f857 1038 	ldr.w	r1, [r7, r8, lsl #3]
    f4ba:	f3c1 0113 	ubfx	r1, r1, #0, #20
    f4be:	682b      	ldr	r3, [r5, #0]
    f4c0:	4419      	add	r1, r3
    f4c2:	4b86      	ldr	r3, [pc, #536]	; (f6dc <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f4c4:	f8d3 9000 	ldr.w	r9, [r3]
    f4c8:	7933      	ldrb	r3, [r6, #4]
    f4ca:	930a      	str	r3, [sp, #40]	; 0x28
    f4cc:	469b      	mov	fp, r3
    f4ce:	b21a      	sxth	r2, r3
    f4d0:	4617      	mov	r7, r2
    f4d2:	9216      	str	r2, [sp, #88]	; 0x58
    f4d4:	7972      	ldrb	r2, [r6, #5]
    f4d6:	9213      	str	r2, [sp, #76]	; 0x4c
    f4d8:	7cea      	ldrb	r2, [r5, #19]
    f4da:	f3c2 0283 	ubfx	r2, r2, #2, #4
    f4de:	b2d3      	uxtb	r3, r2
    f4e0:	930d      	str	r3, [sp, #52]	; 0x34
    if(bpp == 3) wr_size = 4;
    f4e2:	2b03      	cmp	r3, #3
    f4e4:	bf14      	ite	ne
    f4e6:	4618      	movne	r0, r3
    f4e8:	2004      	moveq	r0, #4
    f4ea:	9006      	str	r0, [sp, #24]
    rle_in = in;
    f4ec:	4b7b      	ldr	r3, [pc, #492]	; (f6dc <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f4ee:	6059      	str	r1, [r3, #4]
    rle_bpp = bpp;
    f4f0:	721a      	strb	r2, [r3, #8]
    rle_state = RLE_STATE_SINGLE;
    f4f2:	2200      	movs	r2, #0
    f4f4:	725a      	strb	r2, [r3, #9]
    rle_rdp = 0;
    f4f6:	60da      	str	r2, [r3, #12]
    rle_prev_v = 0;
    f4f8:	741a      	strb	r2, [r3, #16]
    rle_cnt = 0;
    f4fa:	745a      	strb	r2, [r3, #17]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
    f4fc:	4658      	mov	r0, fp
    f4fe:	4c7b      	ldr	r4, [pc, #492]	; (f6ec <lv_font_get_bitmap_fmt_txt+0x2cc>)
    f500:	47a0      	blx	r4
    f502:	9014      	str	r0, [sp, #80]	; 0x50
    uint8_t * line_buf2 = _lv_mem_buf_get(w);
    f504:	4658      	mov	r0, fp
    f506:	47a0      	blx	r4
    f508:	9015      	str	r0, [sp, #84]	; 0x54
    for(i = 0; i < w; i++) {
    f50a:	2f00      	cmp	r7, #0
    f50c:	f000 8245 	beq.w	f99a <lv_font_get_bitmap_fmt_txt+0x57a>
    f510:	4b72      	ldr	r3, [pc, #456]	; (f6dc <lv_font_get_bitmap_fmt_txt+0x2bc>)
    f512:	7c19      	ldrb	r1, [r3, #16]
    f514:	9101      	str	r1, [sp, #4]
    f516:	7c5c      	ldrb	r4, [r3, #17]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    f518:	685f      	ldr	r7, [r3, #4]
    f51a:	68dd      	ldr	r5, [r3, #12]
    f51c:	f893 a008 	ldrb.w	sl, [r3, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f520:	2201      	movs	r2, #1
    f522:	fa02 f20a 	lsl.w	r2, r2, sl
    f526:	1e51      	subs	r1, r2, #1
    if(bit_pos + len >= 8) {
    f528:	46d0      	mov	r8, sl
    f52a:	f1ca 0608 	rsb	r6, sl, #8
    f52e:	9608      	str	r6, [sp, #32]
    f530:	f1ca 0610 	rsb	r6, sl, #16
    f534:	9607      	str	r6, [sp, #28]
    f536:	f893 c009 	ldrb.w	ip, [r3, #9]
    f53a:	9814      	ldr	r0, [sp, #80]	; 0x50
    f53c:	f100 3eff 	add.w	lr, r0, #4294967295
    f540:	f10b 33ff 	add.w	r3, fp, #4294967295
    f544:	b29b      	uxth	r3, r3
    f546:	930b      	str	r3, [sp, #44]	; 0x2c
    f548:	eb00 0b03 	add.w	fp, r0, r3
    f54c:	4676      	mov	r6, lr
    f54e:	2300      	movs	r3, #0
    f550:	9303      	str	r3, [sp, #12]
    f552:	9305      	str	r3, [sp, #20]
    f554:	461a      	mov	r2, r3
    switch(len) {
    f556:	f10a 3aff 	add.w	sl, sl, #4294967295
            rle_rdp += rle_bpp;
    f55a:	2301      	movs	r3, #1
    f55c:	9302      	str	r3, [sp, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f55e:	b2cb      	uxtb	r3, r1
    f560:	9309      	str	r3, [sp, #36]	; 0x24
            bit_mask = 0x3;
    f562:	9204      	str	r2, [sp, #16]
    f564:	4661      	mov	r1, ip
    f566:	e02d      	b.n	f5c4 <lv_font_get_bitmap_fmt_txt+0x1a4>
                buf_size = (gsize + 3) >> 2;
    f568:	3403      	adds	r4, #3
    f56a:	08a4      	lsrs	r4, r4, #2
                break;
    f56c:	e78b      	b.n	f486 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
    f56e:	3401      	adds	r4, #1
    f570:	0864      	lsrs	r4, r4, #1
                break;
    f572:	e788      	b.n	f486 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
    f574:	3401      	adds	r4, #1
    f576:	0864      	lsrs	r4, r4, #1
                break;
    f578:	e785      	b.n	f486 <lv_font_get_bitmap_fmt_txt+0x66>
            LV_ASSERT_MEM(decompr_buf);
    f57a:	f8d9 2000 	ldr.w	r2, [r9]
    f57e:	2300      	movs	r3, #0
    f580:	485b      	ldr	r0, [pc, #364]	; (f6f0 <lv_font_get_bitmap_fmt_txt+0x2d0>)
    f582:	495c      	ldr	r1, [pc, #368]	; (f6f4 <lv_font_get_bitmap_fmt_txt+0x2d4>)
    f584:	4788      	blx	r1
    f586:	e7fe      	b.n	f586 <lv_font_get_bitmap_fmt_txt+0x166>
            bit_mask = 0x3;
    f588:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f58a:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
    f58c:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
    f590:	eb02 0c08 	add.w	ip, r2, r8
    f594:	f1bc 0f07 	cmp.w	ip, #7
    f598:	d836      	bhi.n	f608 <lv_font_get_bitmap_fmt_txt+0x1e8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f59a:	f817 c003 	ldrb.w	ip, [r7, r3]
    f59e:	9b08      	ldr	r3, [sp, #32]
    f5a0:	1a9a      	subs	r2, r3, r2
    f5a2:	fa4c f302 	asr.w	r3, ip, r2
    f5a6:	4003      	ands	r3, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f5a8:	b115      	cbz	r5, f5b0 <lv_font_get_bitmap_fmt_txt+0x190>
    f5aa:	9a01      	ldr	r2, [sp, #4]
    f5ac:	4293      	cmp	r3, r2
    f5ae:	d039      	beq.n	f624 <lv_font_get_bitmap_fmt_txt+0x204>
        rle_rdp += rle_bpp;
    f5b0:	4445      	add	r5, r8
        rle_prev_v = ret;
    f5b2:	9301      	str	r3, [sp, #4]
        rle_rdp += rle_bpp;
    f5b4:	2201      	movs	r2, #1
    f5b6:	9802      	ldr	r0, [sp, #8]
    f5b8:	9004      	str	r0, [sp, #16]
        out[i] = rle_next();
    f5ba:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(i = 0; i < w; i++) {
    f5be:	455e      	cmp	r6, fp
    f5c0:	f000 8149 	beq.w	f856 <lv_font_get_bitmap_fmt_txt+0x436>
    if(rle_state == RLE_STATE_SINGLE) {
    f5c4:	bba9      	cbnz	r1, f632 <lv_font_get_bitmap_fmt_txt+0x212>
    switch(len) {
    f5c6:	f1ba 0f07 	cmp.w	sl, #7
    f5ca:	d819      	bhi.n	f600 <lv_font_get_bitmap_fmt_txt+0x1e0>
    f5cc:	a301      	add	r3, pc, #4	; (adr r3, f5d4 <lv_font_get_bitmap_fmt_txt+0x1b4>)
    f5ce:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
    f5d2:	bf00      	nop
    f5d4:	0000f605 	.word	0x0000f605
    f5d8:	0000f589 	.word	0x0000f589
    f5dc:	0000f5f5 	.word	0x0000f5f5
    f5e0:	0000f5f9 	.word	0x0000f5f9
    f5e4:	0000f601 	.word	0x0000f601
    f5e8:	0000f601 	.word	0x0000f601
    f5ec:	0000f601 	.word	0x0000f601
    f5f0:	0000f5fd 	.word	0x0000f5fd
            bit_mask = 0x7;
    f5f4:	2007      	movs	r0, #7
    f5f6:	e7c8      	b.n	f58a <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = 0xF;
    f5f8:	200f      	movs	r0, #15
    f5fa:	e7c6      	b.n	f58a <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = 0xFF;
    f5fc:	20ff      	movs	r0, #255	; 0xff
    f5fe:	e7c4      	b.n	f58a <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f600:	9809      	ldr	r0, [sp, #36]	; 0x24
    f602:	e7c2      	b.n	f58a <lv_font_get_bitmap_fmt_txt+0x16a>
            bit_mask = 0x1;
    f604:	2001      	movs	r0, #1
    f606:	e7c0      	b.n	f58a <lv_font_get_bitmap_fmt_txt+0x16a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f608:	f817 c003 	ldrb.w	ip, [r7, r3]
    f60c:	443b      	add	r3, r7
    f60e:	785b      	ldrb	r3, [r3, #1]
    f610:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f614:	fa1f fc83 	uxth.w	ip, r3
    f618:	9b07      	ldr	r3, [sp, #28]
    f61a:	1a9a      	subs	r2, r3, r2
    f61c:	fa4c f302 	asr.w	r3, ip, r2
    f620:	4003      	ands	r3, r0
    f622:	e7c1      	b.n	f5a8 <lv_font_get_bitmap_fmt_txt+0x188>
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f624:	2201      	movs	r2, #1
    f626:	9203      	str	r2, [sp, #12]
            rle_cnt = 0;
    f628:	2400      	movs	r4, #0
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f62a:	9a02      	ldr	r2, [sp, #8]
    f62c:	9205      	str	r2, [sp, #20]
            rle_state = RLE_STATE_REPEATE;
    f62e:	4611      	mov	r1, r2
    f630:	e7be      	b.n	f5b0 <lv_font_get_bitmap_fmt_txt+0x190>
    else if(rle_state == RLE_STATE_REPEATE) {
    f632:	2901      	cmp	r1, #1
    f634:	d004      	beq.n	f640 <lv_font_get_bitmap_fmt_txt+0x220>
    else if(rle_state == RLE_STATE_COUNTER) {
    f636:	2902      	cmp	r1, #2
    f638:	f000 80c7 	beq.w	f7ca <lv_font_get_bitmap_fmt_txt+0x3aa>
    uint8_t ret = 0;
    f63c:	2300      	movs	r3, #0
    f63e:	e7bc      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
    uint32_t byte_pos = bit_pos >> 3;
    f640:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
    f642:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
    f646:	f102 0c01 	add.w	ip, r2, #1
    f64a:	f1bc 0f07 	cmp.w	ip, #7
    f64e:	d813      	bhi.n	f678 <lv_font_get_bitmap_fmt_txt+0x258>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f650:	5cfb      	ldrb	r3, [r7, r3]
    f652:	43d2      	mvns	r2, r2
    f654:	3208      	adds	r2, #8
    f656:	4113      	asrs	r3, r2
    f658:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
    f65c:	3401      	adds	r4, #1
    f65e:	b2e4      	uxtb	r4, r4
        rle_rdp += 1;
    f660:	1c6a      	adds	r2, r5, #1
        if(v == 1) {
    f662:	b9b3      	cbnz	r3, f692 <lv_font_get_bitmap_fmt_txt+0x272>
    switch(len) {
    f664:	f1ba 0f07 	cmp.w	sl, #7
    f668:	f200 809f 	bhi.w	f7aa <lv_font_get_bitmap_fmt_txt+0x38a>
    f66c:	e8df f00a 	tbb	[pc, sl]
    f670:	99977e9f 	.word	0x99977e9f
    f674:	9b9d9d9d 	.word	0x9b9d9d9d
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f678:	f817 c003 	ldrb.w	ip, [r7, r3]
    f67c:	443b      	add	r3, r7
    f67e:	785b      	ldrb	r3, [r3, #1]
    f680:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f684:	b29b      	uxth	r3, r3
    f686:	43d2      	mvns	r2, r2
    f688:	3210      	adds	r2, #16
    f68a:	4113      	asrs	r3, r2
    f68c:	f003 0301 	and.w	r3, r3, #1
    f690:	e7e4      	b.n	f65c <lv_font_get_bitmap_fmt_txt+0x23c>
            if(rle_cnt == 11) {
    f692:	2c0b      	cmp	r4, #11
    f694:	d005      	beq.n	f6a2 <lv_font_get_bitmap_fmt_txt+0x282>
        rle_rdp += 1;
    f696:	4615      	mov	r5, r2
            ret = rle_prev_v;
    f698:	9b01      	ldr	r3, [sp, #4]
            if(rle_cnt == 11) {
    f69a:	2201      	movs	r2, #1
    f69c:	9203      	str	r2, [sp, #12]
    f69e:	9a02      	ldr	r2, [sp, #8]
    f6a0:	e78b      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
    uint32_t byte_pos = bit_pos >> 3;
    f6a2:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
    f6a4:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
    f6a8:	1d91      	adds	r1, r2, #6
    f6aa:	2907      	cmp	r1, #7
    f6ac:	d824      	bhi.n	f6f8 <lv_font_get_bitmap_fmt_txt+0x2d8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f6ae:	5cfc      	ldrb	r4, [r7, r3]
    f6b0:	f1c2 0202 	rsb	r2, r2, #2
    f6b4:	fa44 f202 	asr.w	r2, r4, r2
    f6b8:	f002 043f 	and.w	r4, r2, #63	; 0x3f
                rle_rdp += 6;
    f6bc:	3507      	adds	r5, #7
                if(rle_cnt != 0) {
    f6be:	2c00      	cmp	r4, #0
    f6c0:	f040 80be 	bne.w	f840 <lv_font_get_bitmap_fmt_txt+0x420>
    switch(len) {
    f6c4:	f1ba 0f07 	cmp.w	sl, #7
    f6c8:	d837      	bhi.n	f73a <lv_font_get_bitmap_fmt_txt+0x31a>
    f6ca:	e8df f00a 	tbb	[pc, sl]
    f6ce:	2138      	.short	0x2138
    f6d0:	36363230 	.word	0x36363230
    f6d4:	3436      	.short	0x3436
    f6d6:	bf00      	nop
    f6d8:	0000f335 	.word	0x0000f335
    f6dc:	20002b5c 	.word	0x20002b5c
    f6e0:	00011689 	.word	0x00011689
    f6e4:	000119ad 	.word	0x000119ad
    f6e8:	0000291f 	.word	0x0000291f
    f6ec:	00011a29 	.word	0x00011a29
    f6f0:	00017604 	.word	0x00017604
    f6f4:	00002929 	.word	0x00002929
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f6f8:	5cf9      	ldrb	r1, [r7, r3]
    f6fa:	443b      	add	r3, r7
    f6fc:	785c      	ldrb	r4, [r3, #1]
    f6fe:	eb04 2401 	add.w	r4, r4, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f702:	b2a4      	uxth	r4, r4
    f704:	f1c2 020a 	rsb	r2, r2, #10
    f708:	4114      	asrs	r4, r2
    f70a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    f70e:	e7d5      	b.n	f6bc <lv_font_get_bitmap_fmt_txt+0x29c>
            bit_mask = 0x3;
    f710:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f712:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
    f714:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
    f718:	eb03 0108 	add.w	r1, r3, r8
    f71c:	2907      	cmp	r1, #7
    f71e:	d810      	bhi.n	f742 <lv_font_get_bitmap_fmt_txt+0x322>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f720:	5cba      	ldrb	r2, [r7, r2]
    f722:	9908      	ldr	r1, [sp, #32]
    f724:	1acb      	subs	r3, r1, r3
    f726:	fa42 f303 	asr.w	r3, r2, r3
    f72a:	4003      	ands	r3, r0
    f72c:	e014      	b.n	f758 <lv_font_get_bitmap_fmt_txt+0x338>
            bit_mask = 0x7;
    f72e:	2007      	movs	r0, #7
    f730:	e7ef      	b.n	f712 <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = 0xF;
    f732:	200f      	movs	r0, #15
    f734:	e7ed      	b.n	f712 <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = 0xFF;
    f736:	20ff      	movs	r0, #255	; 0xff
    f738:	e7eb      	b.n	f712 <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f73a:	9809      	ldr	r0, [sp, #36]	; 0x24
    f73c:	e7e9      	b.n	f712 <lv_font_get_bitmap_fmt_txt+0x2f2>
            bit_mask = 0x1;
    f73e:	2001      	movs	r0, #1
    f740:	e7e7      	b.n	f712 <lv_font_get_bitmap_fmt_txt+0x2f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f742:	5cb9      	ldrb	r1, [r7, r2]
    f744:	443a      	add	r2, r7
    f746:	7852      	ldrb	r2, [r2, #1]
    f748:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f74c:	b292      	uxth	r2, r2
    f74e:	9907      	ldr	r1, [sp, #28]
    f750:	1acb      	subs	r3, r1, r3
    f752:	fa42 f303 	asr.w	r3, r2, r3
    f756:	4003      	ands	r3, r0
                    rle_rdp += rle_bpp;
    f758:	4445      	add	r5, r8
                    rle_prev_v = ret;
    f75a:	9301      	str	r3, [sp, #4]
                    rle_rdp += rle_bpp;
    f75c:	2201      	movs	r2, #1
    f75e:	9203      	str	r2, [sp, #12]
    f760:	9802      	ldr	r0, [sp, #8]
    f762:	4602      	mov	r2, r0
    f764:	9005      	str	r0, [sp, #20]
                    rle_state = RLE_STATE_SINGLE;
    f766:	2100      	movs	r1, #0
                    rle_rdp += rle_bpp;
    f768:	9004      	str	r0, [sp, #16]
    f76a:	e726      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
            bit_mask = 0x3;
    f76c:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f76e:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
    f770:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
    f774:	eb03 0508 	add.w	r5, r3, r8
    f778:	2d07      	cmp	r5, #7
    f77a:	d81a      	bhi.n	f7b2 <lv_font_get_bitmap_fmt_txt+0x392>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f77c:	5c79      	ldrb	r1, [r7, r1]
    f77e:	9d08      	ldr	r5, [sp, #32]
    f780:	1aeb      	subs	r3, r5, r3
    f782:	fa41 f303 	asr.w	r3, r1, r3
    f786:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
    f788:	eb02 0508 	add.w	r5, r2, r8
            rle_prev_v = ret;
    f78c:	9301      	str	r3, [sp, #4]
            rle_rdp += rle_bpp;
    f78e:	2201      	movs	r2, #1
    f790:	9203      	str	r2, [sp, #12]
    f792:	9802      	ldr	r0, [sp, #8]
    f794:	4602      	mov	r2, r0
    f796:	9005      	str	r0, [sp, #20]
            rle_state = RLE_STATE_SINGLE;
    f798:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
    f79a:	9004      	str	r0, [sp, #16]
    f79c:	e70d      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
            bit_mask = 0x7;
    f79e:	2007      	movs	r0, #7
    f7a0:	e7e5      	b.n	f76e <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = 0xF;
    f7a2:	200f      	movs	r0, #15
    f7a4:	e7e3      	b.n	f76e <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = 0xFF;
    f7a6:	20ff      	movs	r0, #255	; 0xff
    f7a8:	e7e1      	b.n	f76e <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f7aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    f7ac:	e7df      	b.n	f76e <lv_font_get_bitmap_fmt_txt+0x34e>
            bit_mask = 0x1;
    f7ae:	2001      	movs	r0, #1
    f7b0:	e7dd      	b.n	f76e <lv_font_get_bitmap_fmt_txt+0x34e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f7b2:	5c7d      	ldrb	r5, [r7, r1]
    f7b4:	4439      	add	r1, r7
    f7b6:	7849      	ldrb	r1, [r1, #1]
    f7b8:	eb01 2105 	add.w	r1, r1, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f7bc:	b289      	uxth	r1, r1
    f7be:	9d07      	ldr	r5, [sp, #28]
    f7c0:	1aeb      	subs	r3, r5, r3
    f7c2:	fa41 f303 	asr.w	r3, r1, r3
    f7c6:	4003      	ands	r3, r0
    f7c8:	e7de      	b.n	f788 <lv_font_get_bitmap_fmt_txt+0x368>
        rle_cnt--;
    f7ca:	3c01      	subs	r4, #1
        if(rle_cnt == 0) {
    f7cc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f7d0:	d13d      	bne.n	f84e <lv_font_get_bitmap_fmt_txt+0x42e>
    switch(len) {
    f7d2:	f1ba 0f07 	cmp.w	sl, #7
    f7d6:	d823      	bhi.n	f820 <lv_font_get_bitmap_fmt_txt+0x400>
    f7d8:	e8df f00a 	tbb	[pc, sl]
    f7dc:	1e1c0424 	.word	0x1e1c0424
    f7e0:	20222222 	.word	0x20222222
            bit_mask = 0x3;
    f7e4:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
    f7e6:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
    f7e8:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
    f7ec:	eb03 0108 	add.w	r1, r3, r8
    f7f0:	2907      	cmp	r1, #7
    f7f2:	d819      	bhi.n	f828 <lv_font_get_bitmap_fmt_txt+0x408>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f7f4:	5cba      	ldrb	r2, [r7, r2]
    f7f6:	9908      	ldr	r1, [sp, #32]
    f7f8:	1acb      	subs	r3, r1, r3
    f7fa:	fa42 f303 	asr.w	r3, r2, r3
    f7fe:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
    f800:	4445      	add	r5, r8
            rle_prev_v = ret;
    f802:	9301      	str	r3, [sp, #4]
            rle_rdp += rle_bpp;
    f804:	2201      	movs	r2, #1
    f806:	9203      	str	r2, [sp, #12]
    f808:	9802      	ldr	r0, [sp, #8]
    f80a:	4602      	mov	r2, r0
    f80c:	9005      	str	r0, [sp, #20]
            rle_state = RLE_STATE_SINGLE;
    f80e:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
    f810:	9004      	str	r0, [sp, #16]
    f812:	e6d2      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
            bit_mask = 0x7;
    f814:	2007      	movs	r0, #7
    f816:	e7e6      	b.n	f7e6 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = 0xF;
    f818:	200f      	movs	r0, #15
    f81a:	e7e4      	b.n	f7e6 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = 0xFF;
    f81c:	20ff      	movs	r0, #255	; 0xff
    f81e:	e7e2      	b.n	f7e6 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f820:	9809      	ldr	r0, [sp, #36]	; 0x24
    f822:	e7e0      	b.n	f7e6 <lv_font_get_bitmap_fmt_txt+0x3c6>
            bit_mask = 0x1;
    f824:	2001      	movs	r0, #1
    f826:	e7de      	b.n	f7e6 <lv_font_get_bitmap_fmt_txt+0x3c6>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f828:	5cb9      	ldrb	r1, [r7, r2]
    f82a:	443a      	add	r2, r7
    f82c:	7852      	ldrb	r2, [r2, #1]
    f82e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f832:	b292      	uxth	r2, r2
    f834:	9907      	ldr	r1, [sp, #28]
    f836:	1acb      	subs	r3, r1, r3
    f838:	fa42 f303 	asr.w	r3, r2, r3
    f83c:	4003      	ands	r3, r0
    f83e:	e7df      	b.n	f800 <lv_font_get_bitmap_fmt_txt+0x3e0>
            ret = rle_prev_v;
    f840:	9b01      	ldr	r3, [sp, #4]
                if(rle_cnt != 0) {
    f842:	2201      	movs	r2, #1
    f844:	9203      	str	r2, [sp, #12]
    f846:	9a02      	ldr	r2, [sp, #8]
    f848:	9205      	str	r2, [sp, #20]
                    rle_state = RLE_STATE_COUNTER;
    f84a:	2102      	movs	r1, #2
    f84c:	e6b5      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
        ret = rle_prev_v;
    f84e:	9b01      	ldr	r3, [sp, #4]
        if(rle_cnt == 0) {
    f850:	2001      	movs	r0, #1
    f852:	9003      	str	r0, [sp, #12]
    f854:	e6b1      	b.n	f5ba <lv_font_get_bitmap_fmt_txt+0x19a>
    f856:	9804      	ldr	r0, [sp, #16]
    f858:	468c      	mov	ip, r1
    f85a:	b9c8      	cbnz	r0, f890 <lv_font_get_bitmap_fmt_txt+0x470>
    f85c:	b10a      	cbz	r2, f862 <lv_font_get_bitmap_fmt_txt+0x442>
    f85e:	4b9f      	ldr	r3, [pc, #636]	; (fadc <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f860:	60dd      	str	r5, [r3, #12]
    f862:	9b05      	ldr	r3, [sp, #20]
    f864:	b113      	cbz	r3, f86c <lv_font_get_bitmap_fmt_txt+0x44c>
    f866:	4b9d      	ldr	r3, [pc, #628]	; (fadc <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f868:	f883 c009 	strb.w	ip, [r3, #9]
    f86c:	9b03      	ldr	r3, [sp, #12]
    f86e:	b10b      	cbz	r3, f874 <lv_font_get_bitmap_fmt_txt+0x454>
    f870:	4b9a      	ldr	r3, [pc, #616]	; (fadc <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f872:	745c      	strb	r4, [r3, #17]
            rle_rdp += rle_bpp;
    f874:	2000      	movs	r0, #0
    if(len == 3) {
    f876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f878:	9301      	str	r3, [sp, #4]
        len = 4;
    f87a:	2704      	movs	r7, #4
                val = 15;
    f87c:	f04f 0c0f 	mov.w	ip, #15
                val = 13;
    f880:	f04f 080d 	mov.w	r8, #13
                val = 11;
    f884:	f04f 0a0b 	mov.w	sl, #11
                val = 9;
    f888:	f04f 0b09 	mov.w	fp, #9
                val = 4;
    f88c:	9702      	str	r7, [sp, #8]
    f88e:	e028      	b.n	f8e2 <lv_font_get_bitmap_fmt_txt+0x4c2>
    f890:	4b92      	ldr	r3, [pc, #584]	; (fadc <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f892:	f89d 1004 	ldrb.w	r1, [sp, #4]
    f896:	7419      	strb	r1, [r3, #16]
    f898:	e7e0      	b.n	f85c <lv_font_get_bitmap_fmt_txt+0x43c>
        switch(val) {
    f89a:	2907      	cmp	r1, #7
    f89c:	d83d      	bhi.n	f91a <lv_font_get_bitmap_fmt_txt+0x4fa>
    f89e:	e8df f001 	tbb	[pc, r1]
    f8a2:	2704      	.short	0x2704
    f8a4:	33302d2a 	.word	0x33302d2a
    f8a8:	3936      	.short	0x3936
        len = 4;
    f8aa:	463d      	mov	r5, r7
                val = 0;
    f8ac:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
    f8ae:	f000 0207 	and.w	r2, r0, #7
    f8b2:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos = 8 - bit_pos - len;
    f8b6:	1b52      	subs	r2, r2, r5
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    f8b8:	f3c0 04cf 	ubfx	r4, r0, #3, #16
    f8bc:	f04f 33ff 	mov.w	r3, #4294967295
    f8c0:	40ab      	lsls	r3, r5
    f8c2:	f063 03ff 	orn	r3, r3, #255	; 0xff
    f8c6:	4093      	lsls	r3, r2
    f8c8:	f819 5004 	ldrb.w	r5, [r9, r4]
    f8cc:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
    f8ce:	fa01 f202 	lsl.w	r2, r1, r2
    f8d2:	4313      	orrs	r3, r2
    f8d4:	f809 3004 	strb.w	r3, [r9, r4]
        wrp += wr_size;
    f8d8:	9a06      	ldr	r2, [sp, #24]
    f8da:	4613      	mov	r3, r2
    f8dc:	4410      	add	r0, r2
    for(x = 0; x < w; x++) {
    f8de:	45b6      	cmp	lr, r6
    f8e0:	d01d      	beq.n	f91e <lv_font_get_bitmap_fmt_txt+0x4fe>
        bits_write(out, wrp, line_buf1[x], bpp);
    f8e2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    if(len == 3) {
    f8e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f8e8:	2b03      	cmp	r3, #3
    f8ea:	d0d6      	beq.n	f89a <lv_font_get_bitmap_fmt_txt+0x47a>
    f8ec:	9d01      	ldr	r5, [sp, #4]
    f8ee:	e7de      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f8f0:	463d      	mov	r5, r7
                val = 2;
    f8f2:	2102      	movs	r1, #2
    f8f4:	e7db      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f8f6:	463d      	mov	r5, r7
                val = 4;
    f8f8:	9902      	ldr	r1, [sp, #8]
    f8fa:	e7d8      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f8fc:	463d      	mov	r5, r7
                val = 6;
    f8fe:	2106      	movs	r1, #6
    f900:	e7d5      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f902:	463d      	mov	r5, r7
                val = 9;
    f904:	4659      	mov	r1, fp
    f906:	e7d2      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f908:	463d      	mov	r5, r7
                val = 11;
    f90a:	4651      	mov	r1, sl
    f90c:	e7cf      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f90e:	463d      	mov	r5, r7
                val = 13;
    f910:	4641      	mov	r1, r8
    f912:	e7cc      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f914:	463d      	mov	r5, r7
                val = 15;
    f916:	4661      	mov	r1, ip
    f918:	e7c9      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
        len = 4;
    f91a:	463d      	mov	r5, r7
    f91c:	e7c7      	b.n	f8ae <lv_font_get_bitmap_fmt_txt+0x48e>
    f91e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f920:	fb02 3303 	mla	r3, r2, r3, r3
    f924:	930c      	str	r3, [sp, #48]	; 0x30
    for(y = 1; y < h; y++) {
    f926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f928:	2b01      	cmp	r3, #1
    f92a:	f340 8255 	ble.w	fdd8 <lv_font_get_bitmap_fmt_txt+0x9b8>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    f92e:	4b6b      	ldr	r3, [pc, #428]	; (fadc <lv_font_get_bitmap_fmt_txt+0x6bc>)
    f930:	f8d3 8004 	ldr.w	r8, [r3, #4]
    f934:	7a1a      	ldrb	r2, [r3, #8]
    f936:	4610      	mov	r0, r2
    f938:	9217      	str	r2, [sp, #92]	; 0x5c
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f93a:	2201      	movs	r2, #1
    f93c:	fa02 f100 	lsl.w	r1, r2, r0
    f940:	3901      	subs	r1, #1
    f942:	b2c9      	uxtb	r1, r1
    f944:	9119      	str	r1, [sp, #100]	; 0x64
    if(bit_pos + len >= 8) {
    f946:	4601      	mov	r1, r0
    f948:	4682      	mov	sl, r0
    f94a:	7c58      	ldrb	r0, [r3, #17]
    f94c:	9005      	str	r0, [sp, #20]
    f94e:	f1c1 0108 	rsb	r1, r1, #8
    f952:	9109      	str	r1, [sp, #36]	; 0x24
    f954:	f1ca 0110 	rsb	r1, sl, #16
    f958:	910b      	str	r1, [sp, #44]	; 0x2c
    f95a:	7c19      	ldrb	r1, [r3, #16]
    f95c:	9101      	str	r1, [sp, #4]
    f95e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    f962:	f893 b009 	ldrb.w	fp, [r3, #9]
    f966:	9906      	ldr	r1, [sp, #24]
    f968:	9110      	str	r1, [sp, #64]	; 0x40
    f96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f96c:	3b01      	subs	r3, #1
    f96e:	b29b      	uxth	r3, r3
    f970:	fb01 f103 	mul.w	r1, r1, r3
    f974:	9118      	str	r1, [sp, #96]	; 0x60
    f976:	2100      	movs	r1, #0
    f978:	9108      	str	r1, [sp, #32]
    f97a:	910a      	str	r1, [sp, #40]	; 0x28
    f97c:	9104      	str	r1, [sp, #16]
    f97e:	9106      	str	r1, [sp, #24]
    f980:	920e      	str	r2, [sp, #56]	; 0x38
    f982:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f984:	18d3      	adds	r3, r2, r3
    f986:	931a      	str	r3, [sp, #104]	; 0x68
            rle_rdp += rle_bpp;
    f988:	2301      	movs	r3, #1
    f98a:	9302      	str	r3, [sp, #8]
    if(len == 3) {
    f98c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f98e:	9207      	str	r2, [sp, #28]
                val = 4;
    f990:	2204      	movs	r2, #4
    f992:	921b      	str	r2, [sp, #108]	; 0x6c
            rle_rdp += rle_bpp;
    f994:	9303      	str	r3, [sp, #12]
    f996:	4666      	mov	r6, ip
    f998:	e1f5      	b.n	fd86 <lv_font_get_bitmap_fmt_txt+0x966>
    for(i = 0; i < w; i++) {
    f99a:	2300      	movs	r3, #0
    f99c:	930c      	str	r3, [sp, #48]	; 0x30
    f99e:	e7c2      	b.n	f926 <lv_font_get_bitmap_fmt_txt+0x506>
            bit_mask = 0x3;
    f9a0:	f04f 0903 	mov.w	r9, #3
    f9a4:	e00c      	b.n	f9c0 <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0x7;
    f9a6:	f04f 0907 	mov.w	r9, #7
    f9aa:	e009      	b.n	f9c0 <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0xF;
    f9ac:	f04f 090f 	mov.w	r9, #15
    f9b0:	e006      	b.n	f9c0 <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0xFF;
    f9b2:	46e1      	mov	r9, ip
    f9b4:	e004      	b.n	f9c0 <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f9b6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    f9ba:	e001      	b.n	f9c0 <lv_font_get_bitmap_fmt_txt+0x5a0>
            bit_mask = 0x1;
    f9bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
    f9c0:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    f9c2:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    f9c6:	eb02 0b0a 	add.w	fp, r2, sl
    f9ca:	f1bb 0f07 	cmp.w	fp, #7
    f9ce:	d831      	bhi.n	fa34 <lv_font_get_bitmap_fmt_txt+0x614>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f9d0:	f818 3003 	ldrb.w	r3, [r8, r3]
    f9d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    f9d6:	1aaa      	subs	r2, r5, r2
    f9d8:	fa43 f202 	asr.w	r2, r3, r2
    f9dc:	ea02 0909 	and.w	r9, r2, r9
    f9e0:	fa5f f989 	uxtb.w	r9, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
    f9e4:	b116      	cbz	r6, f9ec <lv_font_get_bitmap_fmt_txt+0x5cc>
    f9e6:	9b01      	ldr	r3, [sp, #4]
    f9e8:	454b      	cmp	r3, r9
    f9ea:	d033      	beq.n	fa54 <lv_font_get_bitmap_fmt_txt+0x634>
        rle_rdp += rle_bpp;
    f9ec:	4456      	add	r6, sl
        rle_prev_v = ret;
    f9ee:	f8cd 9004 	str.w	r9, [sp, #4]
        rle_rdp += rle_bpp;
    f9f2:	9b02      	ldr	r3, [sp, #8]
    f9f4:	9304      	str	r3, [sp, #16]
    f9f6:	9b03      	ldr	r3, [sp, #12]
    f9f8:	9306      	str	r3, [sp, #24]
        out[i] = rle_next();
    f9fa:	f804 9f01 	strb.w	r9, [r4, #1]!
    for(i = 0; i < w; i++) {
    f9fe:	42a0      	cmp	r0, r4
    fa00:	f000 815d 	beq.w	fcbe <lv_font_get_bitmap_fmt_txt+0x89e>
    if(rle_state == RLE_STATE_SINGLE) {
    fa04:	bb69      	cbnz	r1, fa62 <lv_font_get_bitmap_fmt_txt+0x642>
    switch(len) {
    fa06:	9b05      	ldr	r3, [sp, #20]
    fa08:	461a      	mov	r2, r3
    fa0a:	2a07      	cmp	r2, #7
    fa0c:	d8d3      	bhi.n	f9b6 <lv_font_get_bitmap_fmt_txt+0x596>
    fa0e:	a301      	add	r3, pc, #4	; (adr r3, fa14 <lv_font_get_bitmap_fmt_txt+0x5f4>)
    fa10:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    fa14:	0000f9bd 	.word	0x0000f9bd
    fa18:	0000f9a1 	.word	0x0000f9a1
    fa1c:	0000f9a7 	.word	0x0000f9a7
    fa20:	0000f9ad 	.word	0x0000f9ad
    fa24:	0000f9b7 	.word	0x0000f9b7
    fa28:	0000f9b7 	.word	0x0000f9b7
    fa2c:	0000f9b7 	.word	0x0000f9b7
    fa30:	0000f9b3 	.word	0x0000f9b3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fa34:	f818 b003 	ldrb.w	fp, [r8, r3]
    fa38:	4443      	add	r3, r8
    fa3a:	785b      	ldrb	r3, [r3, #1]
    fa3c:	eb03 230b 	add.w	r3, r3, fp, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fa40:	b29b      	uxth	r3, r3
    fa42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fa44:	1aaa      	subs	r2, r5, r2
    fa46:	fa43 f202 	asr.w	r2, r3, r2
    fa4a:	ea02 0209 	and.w	r2, r2, r9
    fa4e:	fa5f f982 	uxtb.w	r9, r2
    fa52:	e7c7      	b.n	f9e4 <lv_font_get_bitmap_fmt_txt+0x5c4>
        if(rle_rdp != 0 && rle_prev_v == ret) {
    fa54:	9b02      	ldr	r3, [sp, #8]
    fa56:	9308      	str	r3, [sp, #32]
            rle_cnt = 0;
    fa58:	4677      	mov	r7, lr
        if(rle_rdp != 0 && rle_prev_v == ret) {
    fa5a:	9b03      	ldr	r3, [sp, #12]
    fa5c:	930a      	str	r3, [sp, #40]	; 0x28
            rle_state = RLE_STATE_REPEATE;
    fa5e:	4619      	mov	r1, r3
    fa60:	e7c4      	b.n	f9ec <lv_font_get_bitmap_fmt_txt+0x5cc>
    else if(rle_state == RLE_STATE_REPEATE) {
    fa62:	2901      	cmp	r1, #1
    fa64:	d004      	beq.n	fa70 <lv_font_get_bitmap_fmt_txt+0x650>
    else if(rle_state == RLE_STATE_COUNTER) {
    fa66:	2902      	cmp	r1, #2
    fa68:	f000 80d7 	beq.w	fc1a <lv_font_get_bitmap_fmt_txt+0x7fa>
    uint8_t ret = 0;
    fa6c:	46f1      	mov	r9, lr
    fa6e:	e7c4      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
    uint32_t byte_pos = bit_pos >> 3;
    fa70:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    fa72:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fa76:	f102 0901 	add.w	r9, r2, #1
    fa7a:	f1b9 0f07 	cmp.w	r9, #7
    fa7e:	d815      	bhi.n	faac <lv_font_get_bitmap_fmt_txt+0x68c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fa80:	f818 3003 	ldrb.w	r3, [r8, r3]
    fa84:	43d2      	mvns	r2, r2
    fa86:	3208      	adds	r2, #8
    fa88:	4113      	asrs	r3, r2
    fa8a:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
    fa8e:	1c7a      	adds	r2, r7, #1
    fa90:	b2d7      	uxtb	r7, r2
        rle_rdp += 1;
    fa92:	1c72      	adds	r2, r6, #1
        if(v == 1) {
    fa94:	b9bb      	cbnz	r3, fac6 <lv_font_get_bitmap_fmt_txt+0x6a6>
    switch(len) {
    fa96:	9b05      	ldr	r3, [sp, #20]
    fa98:	4619      	mov	r1, r3
    fa9a:	2907      	cmp	r1, #7
    fa9c:	f200 808e 	bhi.w	fbbc <lv_font_get_bitmap_fmt_txt+0x79c>
    faa0:	e8df f001 	tbb	[pc, r1]
    faa4:	8886848e 	.word	0x8886848e
    faa8:	8a8c8c8c 	.word	0x8a8c8c8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    faac:	f818 9003 	ldrb.w	r9, [r8, r3]
    fab0:	4443      	add	r3, r8
    fab2:	785b      	ldrb	r3, [r3, #1]
    fab4:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fab8:	b29b      	uxth	r3, r3
    faba:	43d2      	mvns	r2, r2
    fabc:	3210      	adds	r2, #16
    fabe:	4113      	asrs	r3, r2
    fac0:	f003 0301 	and.w	r3, r3, #1
    fac4:	e7e3      	b.n	fa8e <lv_font_get_bitmap_fmt_txt+0x66e>
            if(rle_cnt == 11) {
    fac6:	2f0b      	cmp	r7, #11
    fac8:	d00a      	beq.n	fae0 <lv_font_get_bitmap_fmt_txt+0x6c0>
        rle_rdp += 1;
    faca:	4616      	mov	r6, r2
            ret = rle_prev_v;
    facc:	f8dd 9004 	ldr.w	r9, [sp, #4]
            if(rle_cnt == 11) {
    fad0:	9b02      	ldr	r3, [sp, #8]
    fad2:	9308      	str	r3, [sp, #32]
    fad4:	9b03      	ldr	r3, [sp, #12]
    fad6:	9304      	str	r3, [sp, #16]
    fad8:	e78f      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
    fada:	bf00      	nop
    fadc:	20002b5c 	.word	0x20002b5c
    uint32_t byte_pos = bit_pos >> 3;
    fae0:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
    fae2:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
    fae6:	1d91      	adds	r1, r2, #6
    fae8:	2907      	cmp	r1, #7
    faea:	d815      	bhi.n	fb18 <lv_font_get_bitmap_fmt_txt+0x6f8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    faec:	f818 3003 	ldrb.w	r3, [r8, r3]
    faf0:	f1c2 0202 	rsb	r2, r2, #2
    faf4:	fa43 f202 	asr.w	r2, r3, r2
    faf8:	f002 073f 	and.w	r7, r2, #63	; 0x3f
                rle_rdp += 6;
    fafc:	3607      	adds	r6, #7
                if(rle_cnt != 0) {
    fafe:	2f00      	cmp	r7, #0
    fb00:	f040 80cf 	bne.w	fca2 <lv_font_get_bitmap_fmt_txt+0x882>
    switch(len) {
    fb04:	9b05      	ldr	r3, [sp, #20]
    fb06:	461a      	mov	r2, r3
    fb08:	2a07      	cmp	r2, #7
    fb0a:	d839      	bhi.n	fb80 <lv_font_get_bitmap_fmt_txt+0x760>
    fb0c:	e8df f002 	tbb	[pc, r2]
    fb10:	3330123b 	.word	0x3330123b
    fb14:	36383838 	.word	0x36383838
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fb18:	f818 1003 	ldrb.w	r1, [r8, r3]
    fb1c:	4443      	add	r3, r8
    fb1e:	785b      	ldrb	r3, [r3, #1]
    fb20:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fb24:	b29b      	uxth	r3, r3
    fb26:	f1c2 020a 	rsb	r2, r2, #10
    fb2a:	fa43 f202 	asr.w	r2, r3, r2
    fb2e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
    fb32:	e7e3      	b.n	fafc <lv_font_get_bitmap_fmt_txt+0x6dc>
            bit_mask = 0x3;
    fb34:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
    fb38:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    fb3a:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fb3e:	eb02 010a 	add.w	r1, r2, sl
    fb42:	2907      	cmp	r1, #7
    fb44:	d822      	bhi.n	fb8c <lv_font_get_bitmap_fmt_txt+0x76c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fb46:	f818 3003 	ldrb.w	r3, [r8, r3]
    fb4a:	9909      	ldr	r1, [sp, #36]	; 0x24
    fb4c:	1a8a      	subs	r2, r1, r2
    fb4e:	fa43 f202 	asr.w	r2, r3, r2
    fb52:	ea02 0209 	and.w	r2, r2, r9
    fb56:	fa5f f982 	uxtb.w	r9, r2
                    rle_rdp += rle_bpp;
    fb5a:	4456      	add	r6, sl
                    rle_prev_v = ret;
    fb5c:	f8cd 9004 	str.w	r9, [sp, #4]
                    rle_rdp += rle_bpp;
    fb60:	9b02      	ldr	r3, [sp, #8]
    fb62:	9308      	str	r3, [sp, #32]
    fb64:	9b03      	ldr	r3, [sp, #12]
    fb66:	930a      	str	r3, [sp, #40]	; 0x28
                    rle_state = RLE_STATE_SINGLE;
    fb68:	4671      	mov	r1, lr
                    rle_rdp += rle_bpp;
    fb6a:	9304      	str	r3, [sp, #16]
    fb6c:	9306      	str	r3, [sp, #24]
    fb6e:	e744      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
            bit_mask = 0x7;
    fb70:	f04f 0907 	mov.w	r9, #7
    fb74:	e7e0      	b.n	fb38 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = 0xF;
    fb76:	f04f 090f 	mov.w	r9, #15
    fb7a:	e7dd      	b.n	fb38 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = 0xFF;
    fb7c:	46e1      	mov	r9, ip
    fb7e:	e7db      	b.n	fb38 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fb80:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    fb84:	e7d8      	b.n	fb38 <lv_font_get_bitmap_fmt_txt+0x718>
            bit_mask = 0x1;
    fb86:	f8dd 9008 	ldr.w	r9, [sp, #8]
    fb8a:	e7d5      	b.n	fb38 <lv_font_get_bitmap_fmt_txt+0x718>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fb8c:	f818 1003 	ldrb.w	r1, [r8, r3]
    fb90:	4443      	add	r3, r8
    fb92:	785b      	ldrb	r3, [r3, #1]
    fb94:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fb98:	b29b      	uxth	r3, r3
    fb9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fb9c:	1a8a      	subs	r2, r1, r2
    fb9e:	fa43 f202 	asr.w	r2, r3, r2
    fba2:	ea02 0209 	and.w	r2, r2, r9
    fba6:	fa5f f982 	uxtb.w	r9, r2
    fbaa:	e7d6      	b.n	fb5a <lv_font_get_bitmap_fmt_txt+0x73a>
            bit_mask = 0x3;
    fbac:	2603      	movs	r6, #3
    fbae:	e008      	b.n	fbc2 <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0x7;
    fbb0:	2607      	movs	r6, #7
    fbb2:	e006      	b.n	fbc2 <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0xF;
    fbb4:	260f      	movs	r6, #15
    fbb6:	e004      	b.n	fbc2 <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0xFF;
    fbb8:	4666      	mov	r6, ip
    fbba:	e002      	b.n	fbc2 <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fbbc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    fbbe:	e000      	b.n	fbc2 <lv_font_get_bitmap_fmt_txt+0x7a2>
            bit_mask = 0x1;
    fbc0:	9e02      	ldr	r6, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
    fbc2:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
    fbc4:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
    fbc8:	eb01 090a 	add.w	r9, r1, sl
    fbcc:	f1b9 0f07 	cmp.w	r9, #7
    fbd0:	d814      	bhi.n	fbfc <lv_font_get_bitmap_fmt_txt+0x7dc>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fbd2:	f818 3003 	ldrb.w	r3, [r8, r3]
    fbd6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fbd8:	1a69      	subs	r1, r5, r1
    fbda:	fa43 f101 	asr.w	r1, r3, r1
    fbde:	4031      	ands	r1, r6
    fbe0:	fa5f f981 	uxtb.w	r9, r1
            rle_rdp += rle_bpp;
    fbe4:	eb02 060a 	add.w	r6, r2, sl
            rle_prev_v = ret;
    fbe8:	f8cd 9004 	str.w	r9, [sp, #4]
            rle_rdp += rle_bpp;
    fbec:	9b02      	ldr	r3, [sp, #8]
    fbee:	9308      	str	r3, [sp, #32]
    fbf0:	9b03      	ldr	r3, [sp, #12]
    fbf2:	930a      	str	r3, [sp, #40]	; 0x28
            rle_state = RLE_STATE_SINGLE;
    fbf4:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
    fbf6:	9304      	str	r3, [sp, #16]
    fbf8:	9306      	str	r3, [sp, #24]
    fbfa:	e6fe      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fbfc:	f818 9003 	ldrb.w	r9, [r8, r3]
    fc00:	4443      	add	r3, r8
    fc02:	785b      	ldrb	r3, [r3, #1]
    fc04:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fc08:	b29b      	uxth	r3, r3
    fc0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fc0c:	1a69      	subs	r1, r5, r1
    fc0e:	fa43 f101 	asr.w	r1, r3, r1
    fc12:	4031      	ands	r1, r6
    fc14:	fa5f f981 	uxtb.w	r9, r1
    fc18:	e7e4      	b.n	fbe4 <lv_font_get_bitmap_fmt_txt+0x7c4>
        rle_cnt--;
    fc1a:	1e7b      	subs	r3, r7, #1
        if(rle_cnt == 0) {
    fc1c:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    fc20:	d148      	bne.n	fcb4 <lv_font_get_bitmap_fmt_txt+0x894>
    switch(len) {
    fc22:	9b05      	ldr	r3, [sp, #20]
    fc24:	461a      	mov	r2, r3
    fc26:	2a07      	cmp	r2, #7
    fc28:	d80d      	bhi.n	fc46 <lv_font_get_bitmap_fmt_txt+0x826>
    fc2a:	e8df f002 	tbb	[pc, r2]
    fc2e:	040e      	.short	0x040e
    fc30:	0c0c0806 	.word	0x0c0c0806
    fc34:	0a0c      	.short	0x0a0c
            bit_mask = 0x3;
    fc36:	2103      	movs	r1, #3
    fc38:	e008      	b.n	fc4c <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0x7;
    fc3a:	2107      	movs	r1, #7
    fc3c:	e006      	b.n	fc4c <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0xF;
    fc3e:	210f      	movs	r1, #15
    fc40:	e004      	b.n	fc4c <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0xFF;
    fc42:	4661      	mov	r1, ip
    fc44:	e002      	b.n	fc4c <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fc46:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fc48:	e000      	b.n	fc4c <lv_font_get_bitmap_fmt_txt+0x82c>
            bit_mask = 0x1;
    fc4a:	9902      	ldr	r1, [sp, #8]
    uint32_t byte_pos = bit_pos >> 3;
    fc4c:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
    fc4e:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
    fc52:	eb02 090a 	add.w	r9, r2, sl
    fc56:	f1b9 0f07 	cmp.w	r9, #7
    fc5a:	d813      	bhi.n	fc84 <lv_font_get_bitmap_fmt_txt+0x864>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    fc5c:	f818 3003 	ldrb.w	r3, [r8, r3]
    fc60:	9d09      	ldr	r5, [sp, #36]	; 0x24
    fc62:	1aaa      	subs	r2, r5, r2
    fc64:	fa43 f202 	asr.w	r2, r3, r2
    fc68:	400a      	ands	r2, r1
    fc6a:	fa5f f982 	uxtb.w	r9, r2
            rle_rdp += rle_bpp;
    fc6e:	4456      	add	r6, sl
            rle_prev_v = ret;
    fc70:	f8cd 9004 	str.w	r9, [sp, #4]
            rle_rdp += rle_bpp;
    fc74:	9b02      	ldr	r3, [sp, #8]
    fc76:	9308      	str	r3, [sp, #32]
    fc78:	9b03      	ldr	r3, [sp, #12]
    fc7a:	930a      	str	r3, [sp, #40]	; 0x28
            rle_state = RLE_STATE_SINGLE;
    fc7c:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
    fc7e:	9304      	str	r3, [sp, #16]
    fc80:	9306      	str	r3, [sp, #24]
    fc82:	e6ba      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    fc84:	f818 9003 	ldrb.w	r9, [r8, r3]
    fc88:	4443      	add	r3, r8
    fc8a:	785b      	ldrb	r3, [r3, #1]
    fc8c:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    fc90:	b29b      	uxth	r3, r3
    fc92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    fc94:	1aaa      	subs	r2, r5, r2
    fc96:	fa43 f202 	asr.w	r2, r3, r2
    fc9a:	400a      	ands	r2, r1
    fc9c:	fa5f f982 	uxtb.w	r9, r2
    fca0:	e7e5      	b.n	fc6e <lv_font_get_bitmap_fmt_txt+0x84e>
            ret = rle_prev_v;
    fca2:	f8dd 9004 	ldr.w	r9, [sp, #4]
                if(rle_cnt != 0) {
    fca6:	9b02      	ldr	r3, [sp, #8]
    fca8:	9308      	str	r3, [sp, #32]
    fcaa:	9b03      	ldr	r3, [sp, #12]
    fcac:	930a      	str	r3, [sp, #40]	; 0x28
                    rle_state = RLE_STATE_COUNTER;
    fcae:	2102      	movs	r1, #2
                if(rle_cnt != 0) {
    fcb0:	9304      	str	r3, [sp, #16]
    fcb2:	e6a2      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
        ret = rle_prev_v;
    fcb4:	f8dd 9004 	ldr.w	r9, [sp, #4]
        if(rle_cnt == 0) {
    fcb8:	9b02      	ldr	r3, [sp, #8]
    fcba:	9308      	str	r3, [sp, #32]
    fcbc:	e69d      	b.n	f9fa <lv_font_get_bitmap_fmt_txt+0x5da>
    fcbe:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    fcc2:	9705      	str	r7, [sp, #20]
    fcc4:	9f12      	ldr	r7, [sp, #72]	; 0x48
    fcc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fcc8:	f103 3eff 	add.w	lr, r3, #4294967295
    for(i = 0; i < w; i++) {
    fccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
                val = 2;
    fcce:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    fcd2:	960f      	str	r6, [sp, #60]	; 0x3c
    fcd4:	9111      	str	r1, [sp, #68]	; 0x44
    fcd6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    fcda:	e021      	b.n	fd20 <lv_font_get_bitmap_fmt_txt+0x900>
        switch(val) {
    fcdc:	2a07      	cmp	r2, #7
    fcde:	d840      	bhi.n	fd62 <lv_font_get_bitmap_fmt_txt+0x942>
    fce0:	e8df f002 	tbb	[pc, r2]
    fce4:	302d2a04 	.word	0x302d2a04
    fce8:	3c393633 	.word	0x3c393633
        len = 4;
    fcec:	2304      	movs	r3, #4
                val = 0;
    fcee:	2200      	movs	r2, #0
    bit_pos = bit_pos & 0x7;
    fcf0:	f005 0107 	and.w	r1, r5, #7
    fcf4:	f1c1 0108 	rsb	r1, r1, #8
    bit_pos = 8 - bit_pos - len;
    fcf8:	1ac9      	subs	r1, r1, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    fcfa:	f3c5 00cf 	ubfx	r0, r5, #3, #16
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fcfe:	2601      	movs	r6, #1
    fd00:	fa06 f303 	lsl.w	r3, r6, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    fd04:	425b      	negs	r3, r3
    fd06:	f063 03ff 	orn	r3, r3, #255	; 0xff
    fd0a:	408b      	lsls	r3, r1
    fd0c:	f819 6000 	ldrb.w	r6, [r9, r0]
    fd10:	4033      	ands	r3, r6
    out[byte_pos] |= (val << bit_pos);
    fd12:	408a      	lsls	r2, r1
    fd14:	4313      	orrs	r3, r2
    fd16:	f809 3000 	strb.w	r3, [r9, r0]
    fd1a:	445d      	add	r5, fp
        for(x = 0; x < w; x++) {
    fd1c:	42bc      	cmp	r4, r7
    fd1e:	d022      	beq.n	fd66 <lv_font_get_bitmap_fmt_txt+0x946>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
    fd20:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    fd24:	f89e 3001 	ldrb.w	r3, [lr, #1]
    fd28:	405a      	eors	r2, r3
    fd2a:	f80e 2f01 	strb.w	r2, [lr, #1]!
    if(len == 3) {
    fd2e:	f1bc 0f03 	cmp.w	ip, #3
    fd32:	d0d3      	beq.n	fcdc <lv_font_get_bitmap_fmt_txt+0x8bc>
    fd34:	9b07      	ldr	r3, [sp, #28]
    fd36:	e7db      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd38:	2304      	movs	r3, #4
                val = 2;
    fd3a:	2202      	movs	r2, #2
    fd3c:	e7d8      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd3e:	2304      	movs	r3, #4
                val = 4;
    fd40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fd42:	e7d5      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd44:	2304      	movs	r3, #4
                val = 6;
    fd46:	2206      	movs	r2, #6
    fd48:	e7d2      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd4a:	2304      	movs	r3, #4
                val = 9;
    fd4c:	2209      	movs	r2, #9
    fd4e:	e7cf      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd50:	2304      	movs	r3, #4
                val = 11;
    fd52:	220b      	movs	r2, #11
    fd54:	e7cc      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd56:	2304      	movs	r3, #4
                val = 13;
    fd58:	220d      	movs	r2, #13
    fd5a:	e7c9      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd5c:	2304      	movs	r3, #4
                val = 15;
    fd5e:	220f      	movs	r2, #15
    fd60:	e7c6      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
        len = 4;
    fd62:	2304      	movs	r3, #4
    fd64:	e7c4      	b.n	fcf0 <lv_font_get_bitmap_fmt_txt+0x8d0>
    fd66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    fd68:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    fd6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fd6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fd70:	4413      	add	r3, r2
    fd72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd74:	441a      	add	r2, r3
    fd76:	920c      	str	r2, [sp, #48]	; 0x30
    fd78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd7a:	3301      	adds	r3, #1
    fd7c:	b21b      	sxth	r3, r3
    fd7e:	930e      	str	r3, [sp, #56]	; 0x38
    for(y = 1; y < h; y++) {
    fd80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fd82:	429a      	cmp	r2, r3
    fd84:	d015      	beq.n	fdb2 <lv_font_get_bitmap_fmt_txt+0x992>
    for(i = 0; i < w; i++) {
    fd86:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fd88:	2b00      	cmp	r3, #0
    fd8a:	d0f5      	beq.n	fd78 <lv_font_get_bitmap_fmt_txt+0x958>
    fd8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fd8e:	1e5f      	subs	r7, r3, #1
    fd90:	463c      	mov	r4, r7
    uint8_t ret = 0;
    fd92:	f04f 0e00 	mov.w	lr, #0
    switch(len) {
    fd96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fd98:	1e5d      	subs	r5, r3, #1
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    fd9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fd9c:	930f      	str	r3, [sp, #60]	; 0x3c
            bit_mask = 0xFF;
    fd9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fda2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    fda6:	4659      	mov	r1, fp
    fda8:	9712      	str	r7, [sp, #72]	; 0x48
    fdaa:	9f05      	ldr	r7, [sp, #20]
    fdac:	9505      	str	r5, [sp, #20]
    fdae:	981a      	ldr	r0, [sp, #104]	; 0x68
    fdb0:	e628      	b.n	fa04 <lv_font_get_bitmap_fmt_txt+0x5e4>
    fdb2:	46b4      	mov	ip, r6
    fdb4:	9b06      	ldr	r3, [sp, #24]
    fdb6:	b9c3      	cbnz	r3, fdea <lv_font_get_bitmap_fmt_txt+0x9ca>
    fdb8:	9b04      	ldr	r3, [sp, #16]
    fdba:	b113      	cbz	r3, fdc2 <lv_font_get_bitmap_fmt_txt+0x9a2>
    fdbc:	4b13      	ldr	r3, [pc, #76]	; (fe0c <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fdbe:	f8c3 c00c 	str.w	ip, [r3, #12]
    fdc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fdc4:	b113      	cbz	r3, fdcc <lv_font_get_bitmap_fmt_txt+0x9ac>
    fdc6:	4b11      	ldr	r3, [pc, #68]	; (fe0c <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fdc8:	f883 b009 	strb.w	fp, [r3, #9]
    fdcc:	9b08      	ldr	r3, [sp, #32]
    fdce:	b11b      	cbz	r3, fdd8 <lv_font_get_bitmap_fmt_txt+0x9b8>
    fdd0:	4b0e      	ldr	r3, [pc, #56]	; (fe0c <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fdd2:	f89d 2014 	ldrb.w	r2, [sp, #20]
    fdd6:	745a      	strb	r2, [r3, #17]
    _lv_mem_buf_release(line_buf1);
    fdd8:	9814      	ldr	r0, [sp, #80]	; 0x50
    fdda:	4c0d      	ldr	r4, [pc, #52]	; (fe10 <lv_font_get_bitmap_fmt_txt+0x9f0>)
    fddc:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
    fdde:	9815      	ldr	r0, [sp, #84]	; 0x54
    fde0:	47a0      	blx	r4
        return decompr_buf;
    fde2:	4b0a      	ldr	r3, [pc, #40]	; (fe0c <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fde4:	6818      	ldr	r0, [r3, #0]
    fde6:	f7ff bb38 	b.w	f45a <lv_font_get_bitmap_fmt_txt+0x3a>
    fdea:	4b08      	ldr	r3, [pc, #32]	; (fe0c <lv_font_get_bitmap_fmt_txt+0x9ec>)
    fdec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    fdf0:	741a      	strb	r2, [r3, #16]
    fdf2:	e7e1      	b.n	fdb8 <lv_font_get_bitmap_fmt_txt+0x998>
    if(!gid) return NULL;
    fdf4:	2000      	movs	r0, #0
    fdf6:	f7ff bb30 	b.w	f45a <lv_font_get_bitmap_fmt_txt+0x3a>
    return NULL;
    fdfa:	2000      	movs	r0, #0
    fdfc:	f7ff bb2d 	b.w	f45a <lv_font_get_bitmap_fmt_txt+0x3a>
        if(gsize == 0) return NULL;
    fe00:	2000      	movs	r0, #0
    fe02:	f7ff bb2a 	b.w	f45a <lv_font_get_bitmap_fmt_txt+0x3a>
            if(decompr_buf == NULL) return NULL;
    fe06:	2000      	movs	r0, #0
    fe08:	f7ff bb27 	b.w	f45a <lv_font_get_bitmap_fmt_txt+0x3a>
    fe0c:	20002b5c 	.word	0x20002b5c
    fe10:	000116a9 	.word	0x000116a9

0000fe14 <lv_font_get_glyph_dsc_fmt_txt>:
{
    fe14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe18:	b084      	sub	sp, #16
    fe1a:	4607      	mov	r7, r0
    fe1c:	460c      	mov	r4, r1
    fe1e:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
    fe20:	2a09      	cmp	r2, #9
        is_tab = true;
    fe22:	bf06      	itte	eq
    fe24:	2501      	moveq	r5, #1
        unicode_letter = ' ';
    fe26:	2220      	moveq	r2, #32
    bool is_tab = false;
    fe28:	2500      	movne	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    fe2a:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    fe2c:	4611      	mov	r1, r2
    fe2e:	4b49      	ldr	r3, [pc, #292]	; (ff54 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
    fe30:	4798      	blx	r3
    if(!gid) return false;
    fe32:	4680      	mov	r8, r0
    fe34:	2800      	cmp	r0, #0
    fe36:	f000 8086 	beq.w	ff46 <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
    fe3a:	68f3      	ldr	r3, [r6, #12]
    fe3c:	2b00      	cmp	r3, #0
    fe3e:	d07c      	beq.n	ff3a <lv_font_get_glyph_dsc_fmt_txt+0x126>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
    fe40:	4649      	mov	r1, r9
    fe42:	4638      	mov	r0, r7
    fe44:	4b43      	ldr	r3, [pc, #268]	; (ff54 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
    fe46:	4798      	blx	r3
        if(gid_next) {
    fe48:	4603      	mov	r3, r0
    fe4a:	bb18      	cbnz	r0, fe94 <lv_font_get_glyph_dsc_fmt_txt+0x80>
    int8_t kvalue = 0;
    fe4c:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    fe4e:	6870      	ldr	r0, [r6, #4]
    fe50:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
    fe54:	8a32      	ldrh	r2, [r6, #16]
    fe56:	fb03 f302 	mul.w	r3, r3, r2
    fe5a:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
    fe5c:	8842      	ldrh	r2, [r0, #2]
    fe5e:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
    fe62:	b105      	cbz	r5, fe66 <lv_font_get_glyph_dsc_fmt_txt+0x52>
    fe64:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
    fe66:	3308      	adds	r3, #8
    fe68:	4413      	add	r3, r2
    fe6a:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
    fe6c:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
    fe6e:	7943      	ldrb	r3, [r0, #5]
    fe70:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
    fe72:	7902      	ldrb	r2, [r0, #4]
    fe74:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
    fe76:	f990 3006 	ldrsb.w	r3, [r0, #6]
    fe7a:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
    fe7c:	f990 3007 	ldrsb.w	r3, [r0, #7]
    fe80:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
    fe82:	7cf3      	ldrb	r3, [r6, #19]
    fe84:	f3c3 0383 	ubfx	r3, r3, #2, #4
    fe88:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
    fe8a:	2d00      	cmp	r5, #0
    fe8c:	d060      	beq.n	ff50 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
    fe8e:	0052      	lsls	r2, r2, #1
    fe90:	8062      	strh	r2, [r4, #2]
    fe92:	e059      	b.n	ff48 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    fe94:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
    fe96:	7cd1      	ldrb	r1, [r2, #19]
    fe98:	f011 0f40 	tst.w	r1, #64	; 0x40
    fe9c:	d13c      	bne.n	ff18 <lv_font_get_glyph_dsc_fmt_txt+0x104>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
    fe9e:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
    fea0:	7afa      	ldrb	r2, [r7, #11]
    fea2:	f012 0203 	ands.w	r2, r2, #3
    fea6:	d003      	beq.n	feb0 <lv_font_get_glyph_dsc_fmt_txt+0x9c>
        else if(kdsc->glyph_ids_size == 1) {
    fea8:	2a01      	cmp	r2, #1
    feaa:	d01b      	beq.n	fee4 <lv_font_get_glyph_dsc_fmt_txt+0xd0>
    int8_t value = 0;
    feac:	2300      	movs	r3, #0
    feae:	e7ce      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint8_t * g_ids = kdsc->glyph_ids;
    feb0:	f8d7 9000 	ldr.w	r9, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
    feb4:	eb08 2300 	add.w	r3, r8, r0, lsl #8
    feb8:	a804      	add	r0, sp, #16
    feba:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
    febe:	68ba      	ldr	r2, [r7, #8]
    fec0:	4b25      	ldr	r3, [pc, #148]	; (ff58 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
    fec2:	9300      	str	r3, [sp, #0]
    fec4:	2302      	movs	r3, #2
    fec6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    feca:	4649      	mov	r1, r9
    fecc:	f8df a090 	ldr.w	sl, [pc, #144]	; ff60 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
    fed0:	47d0      	blx	sl
            if(kid_p) {
    fed2:	b128      	cbz	r0, fee0 <lv_font_get_glyph_dsc_fmt_txt+0xcc>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
    fed4:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
    fed8:	085b      	lsrs	r3, r3, #1
                value = kdsc->values[ofs];
    feda:	687a      	ldr	r2, [r7, #4]
    fedc:	56d3      	ldrsb	r3, [r2, r3]
    fede:	e7b6      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
    fee0:	2300      	movs	r3, #0
    fee2:	e7b4      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint16_t * g_ids = kdsc->glyph_ids;
    fee4:	f8d7 9000 	ldr.w	r9, [r7]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
    fee8:	eb08 2300 	add.w	r3, r8, r0, lsl #8
    feec:	a804      	add	r0, sp, #16
    feee:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
    fef2:	68ba      	ldr	r2, [r7, #8]
    fef4:	4b19      	ldr	r3, [pc, #100]	; (ff5c <lv_font_get_glyph_dsc_fmt_txt+0x148>)
    fef6:	9300      	str	r3, [sp, #0]
    fef8:	2304      	movs	r3, #4
    fefa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fefe:	4649      	mov	r1, r9
    ff00:	f8df a05c 	ldr.w	sl, [pc, #92]	; ff60 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
    ff04:	47d0      	blx	sl
            if(kid_p) {
    ff06:	b128      	cbz	r0, ff14 <lv_font_get_glyph_dsc_fmt_txt+0x100>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
    ff08:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
    ff0c:	091b      	lsrs	r3, r3, #4
                value = kdsc->values[ofs];
    ff0e:	687a      	ldr	r2, [r7, #4]
    ff10:	56d3      	ldrsb	r3, [r2, r3]
    ff12:	e79c      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
    ff14:	2300      	movs	r3, #0
    ff16:	e79a      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
    ff18:	68d1      	ldr	r1, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
    ff1a:	684a      	ldr	r2, [r1, #4]
    ff1c:	f812 2008 	ldrb.w	r2, [r2, r8]
        if(left_class > 0 && right_class > 0) {
    ff20:	b16a      	cbz	r2, ff3e <lv_font_get_glyph_dsc_fmt_txt+0x12a>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
    ff22:	6888      	ldr	r0, [r1, #8]
    ff24:	5cc3      	ldrb	r3, [r0, r3]
        if(left_class > 0 && right_class > 0) {
    ff26:	b163      	cbz	r3, ff42 <lv_font_get_glyph_dsc_fmt_txt+0x12e>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
    ff28:	3a01      	subs	r2, #1
    ff2a:	7b48      	ldrb	r0, [r1, #13]
    ff2c:	6809      	ldr	r1, [r1, #0]
    ff2e:	440b      	add	r3, r1
    ff30:	fb00 3202 	mla	r2, r0, r2, r3
    ff34:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
    ff38:	e789      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t kvalue = 0;
    ff3a:	2300      	movs	r3, #0
    ff3c:	e787      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
    ff3e:	2300      	movs	r3, #0
    ff40:	e785      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    ff42:	2300      	movs	r3, #0
    ff44:	e783      	b.n	fe4e <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    if(!gid) return false;
    ff46:	2500      	movs	r5, #0
}
    ff48:	4628      	mov	r0, r5
    ff4a:	b004      	add	sp, #16
    ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return true;
    ff50:	2501      	movs	r5, #1
    ff52:	e7f9      	b.n	ff48 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    ff54:	0000f335 	.word	0x0000f335
    ff58:	0000f309 	.word	0x0000f309
    ff5c:	0000f31b 	.word	0x0000f31b
    ff60:	0001263d 	.word	0x0001263d

0000ff64 <_lv_font_clean_up_fmt_txt>:
{
    ff64:	b508      	push	{r3, lr}
    if(decompr_buf) {
    ff66:	4b04      	ldr	r3, [pc, #16]	; (ff78 <_lv_font_clean_up_fmt_txt+0x14>)
    ff68:	6818      	ldr	r0, [r3, #0]
    ff6a:	b120      	cbz	r0, ff76 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(decompr_buf);
    ff6c:	4b03      	ldr	r3, [pc, #12]	; (ff7c <_lv_font_clean_up_fmt_txt+0x18>)
    ff6e:	4798      	blx	r3
        decompr_buf = NULL;
    ff70:	2200      	movs	r2, #0
    ff72:	4b01      	ldr	r3, [pc, #4]	; (ff78 <_lv_font_clean_up_fmt_txt+0x14>)
    ff74:	601a      	str	r2, [r3, #0]
    ff76:	bd08      	pop	{r3, pc}
    ff78:	20002b5c 	.word	0x20002b5c
    ff7c:	000115fd 	.word	0x000115fd

0000ff80 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    ff80:	b510      	push	{r4, lr}
    ff82:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
    ff84:	212c      	movs	r1, #44	; 0x2c
    ff86:	4b15      	ldr	r3, [pc, #84]	; (ffdc <lv_disp_drv_init+0x5c>)
    ff88:	4798      	blx	r3

    driver->flush_cb         = NULL;
    ff8a:	2300      	movs	r3, #0
    ff8c:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
    ff8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    ff92:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
    ff94:	f44f 7288 	mov.w	r2, #272	; 0x110
    ff98:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
    ff9a:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
    ff9c:	7a22      	ldrb	r2, [r4, #8]
    ff9e:	f363 0241 	bfi	r2, r3, #1, #1
    ffa2:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
    ffa4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    ffa8:	f363 0204 	bfi	r2, r3, #0, #5
    ffac:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    ffb0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    ffb2:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
    ffb6:	8522      	strh	r2, [r4, #40]	; 0x28
    ffb8:	0a12      	lsrs	r2, r2, #8
    ffba:	f363 02c7 	bfi	r2, r3, #3, #5
    ffbe:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    driver->dpi = LV_DPI;
    ffc2:	8922      	ldrh	r2, [r4, #8]
    ffc4:	2182      	movs	r1, #130	; 0x82
    ffc6:	f361 028b 	bfi	r2, r1, #2, #10
    ffca:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
    ffcc:	f042 0201 	orr.w	r2, r2, #1
    ffd0:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
    ffd2:	6223      	str	r3, [r4, #32]
    driver->gpu_fill_cb  = NULL;
    ffd4:	6263      	str	r3, [r4, #36]	; 0x24

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
    ffd6:	6163      	str	r3, [r4, #20]
    ffd8:	bd10      	pop	{r4, pc}
    ffda:	bf00      	nop
    ffdc:	00011bdb 	.word	0x00011bdb

0000ffe0 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
    ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffe2:	4604      	mov	r4, r0
    ffe4:	460d      	mov	r5, r1
    ffe6:	4617      	mov	r7, r2
    ffe8:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
    ffea:	2124      	movs	r1, #36	; 0x24
    ffec:	4b03      	ldr	r3, [pc, #12]	; (fffc <lv_disp_buf_init+0x1c>)
    ffee:	4798      	blx	r3

    disp_buf->buf1    = buf1;
    fff0:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
    fff2:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
    fff4:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
    fff6:	60e6      	str	r6, [r4, #12]
    fff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fffa:	bf00      	nop
    fffc:	00011bdb 	.word	0x00011bdb

00010000 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
   10000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10002:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   10004:	4837      	ldr	r0, [pc, #220]	; (100e4 <lv_disp_drv_register+0xe4>)
   10006:	4b38      	ldr	r3, [pc, #224]	; (100e8 <lv_disp_drv_register+0xe8>)
   10008:	4798      	blx	r3
    if(!disp) {
   1000a:	4604      	mov	r4, r0
   1000c:	2800      	cmp	r0, #0
   1000e:	d053      	beq.n	100b8 <lv_disp_drv_register+0xb8>
        LV_ASSERT_MEM(disp);
        return NULL;
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
   10010:	f44f 71b8 	mov.w	r1, #368	; 0x170
   10014:	4b35      	ldr	r3, [pc, #212]	; (100ec <lv_disp_drv_register+0xec>)
   10016:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
   10018:	222c      	movs	r2, #44	; 0x2c
   1001a:	4629      	mov	r1, r5
   1001c:	4620      	mov	r0, r4
   1001e:	4b34      	ldr	r3, [pc, #208]	; (100f0 <lv_disp_drv_register+0xf0>)
   10020:	4798      	blx	r3

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   10022:	214c      	movs	r1, #76	; 0x4c
   10024:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10028:	4b32      	ldr	r3, [pc, #200]	; (100f4 <lv_disp_drv_register+0xf4>)
   1002a:	4798      	blx	r3
    disp->last_activity_time = 0;
   1002c:	2300      	movs	r3, #0
   1002e:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

    if(disp_def == NULL) disp_def = disp;
   10032:	4b31      	ldr	r3, [pc, #196]	; (100f8 <lv_disp_drv_register+0xf8>)
   10034:	681b      	ldr	r3, [r3, #0]
   10036:	2b00      	cmp	r3, #0
   10038:	d048      	beq.n	100cc <lv_disp_drv_register+0xcc>

    lv_disp_t * disp_def_tmp = disp_def;
   1003a:	4b2f      	ldr	r3, [pc, #188]	; (100f8 <lv_disp_drv_register+0xf8>)
   1003c:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   1003e:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   10040:	4623      	mov	r3, r4
   10042:	2203      	movs	r2, #3
   10044:	211e      	movs	r1, #30
   10046:	482d      	ldr	r0, [pc, #180]	; (100fc <lv_disp_drv_register+0xfc>)
   10048:	4d2d      	ldr	r5, [pc, #180]	; (10100 <lv_disp_drv_register+0x100>)
   1004a:	47a8      	blx	r5
   1004c:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MEM(disp->refr_task);
   1004e:	4b2d      	ldr	r3, [pc, #180]	; (10104 <lv_disp_drv_register+0x104>)
   10050:	4798      	blx	r3
   10052:	2800      	cmp	r0, #0
   10054:	d03d      	beq.n	100d2 <lv_disp_drv_register+0xd2>
    if(disp->refr_task == NULL) return NULL;
   10056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10058:	2b00      	cmp	r3, #0
   1005a:	d040      	beq.n	100de <lv_disp_drv_register+0xde>

    disp->inv_p = 0;
   1005c:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   10060:	f36f 0309 	bfc	r3, #0, #10
   10064:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
    disp->last_activity_time = 0;
   10068:	2500      	movs	r5, #0
   1006a:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1006e:	4629      	mov	r1, r5
   10070:	4628      	mov	r0, r5
   10072:	4e25      	ldr	r6, [pc, #148]	; (10108 <lv_disp_drv_register+0x108>)
   10074:	47b0      	blx	r6
   10076:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   10078:	4629      	mov	r1, r5
   1007a:	4628      	mov	r0, r5
   1007c:	47b0      	blx	r6
   1007e:	6420      	str	r0, [r4, #64]	; 0x40
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   10080:	4629      	mov	r1, r5
   10082:	4628      	mov	r0, r5
   10084:	47b0      	blx	r6
   10086:	6460      	str	r0, [r4, #68]	; 0x44
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   10088:	4629      	mov	r1, r5
   1008a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1008c:	4e1f      	ldr	r6, [pc, #124]	; (1010c <lv_disp_drv_register+0x10c>)
   1008e:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   10090:	4629      	mov	r1, r5
   10092:	6c60      	ldr	r0, [r4, #68]	; 0x44
   10094:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
   10096:	4629      	mov	r1, r5
   10098:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1009a:	4e1d      	ldr	r6, [pc, #116]	; (10110 <lv_disp_drv_register+0x110>)
   1009c:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
   1009e:	4629      	mov	r1, r5
   100a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   100a2:	47b0      	blx	r6

    lv_obj_invalidate(disp->act_scr);
   100a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   100a6:	4b1b      	ldr	r3, [pc, #108]	; (10114 <lv_disp_drv_register+0x114>)
   100a8:	4798      	blx	r3

    disp_def = disp_def_tmp; /*Revert the default display*/
   100aa:	4b13      	ldr	r3, [pc, #76]	; (100f8 <lv_disp_drv_register+0xf8>)
   100ac:	601f      	str	r7, [r3, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   100ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   100b0:	4b19      	ldr	r3, [pc, #100]	; (10118 <lv_disp_drv_register+0x118>)
   100b2:	4798      	blx	r3

    return disp;
}
   100b4:	4620      	mov	r0, r4
   100b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
   100b8:	4b12      	ldr	r3, [pc, #72]	; (10104 <lv_disp_drv_register+0x104>)
   100ba:	4798      	blx	r3
   100bc:	2800      	cmp	r0, #0
   100be:	d1f9      	bne.n	100b4 <lv_disp_drv_register+0xb4>
   100c0:	2200      	movs	r2, #0
   100c2:	2300      	movs	r3, #0
   100c4:	4815      	ldr	r0, [pc, #84]	; (1011c <lv_disp_drv_register+0x11c>)
   100c6:	4916      	ldr	r1, [pc, #88]	; (10120 <lv_disp_drv_register+0x120>)
   100c8:	4788      	blx	r1
   100ca:	e7fe      	b.n	100ca <lv_disp_drv_register+0xca>
    if(disp_def == NULL) disp_def = disp;
   100cc:	4b0a      	ldr	r3, [pc, #40]	; (100f8 <lv_disp_drv_register+0xf8>)
   100ce:	601c      	str	r4, [r3, #0]
   100d0:	e7b3      	b.n	1003a <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
   100d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   100d4:	2300      	movs	r3, #0
   100d6:	4811      	ldr	r0, [pc, #68]	; (1011c <lv_disp_drv_register+0x11c>)
   100d8:	4911      	ldr	r1, [pc, #68]	; (10120 <lv_disp_drv_register+0x120>)
   100da:	4788      	blx	r1
   100dc:	e7fe      	b.n	100dc <lv_disp_drv_register+0xdc>
    if(disp->refr_task == NULL) return NULL;
   100de:	2400      	movs	r4, #0
   100e0:	e7e8      	b.n	100b4 <lv_disp_drv_register+0xb4>
   100e2:	bf00      	nop
   100e4:	2000acac 	.word	0x2000acac
   100e8:	000110b5 	.word	0x000110b5
   100ec:	00011bdb 	.word	0x00011bdb
   100f0:	00011769 	.word	0x00011769
   100f4:	0001109d 	.word	0x0001109d
   100f8:	20002b70 	.word	0x20002b70
   100fc:	00005759 	.word	0x00005759
   10100:	00011ee1 	.word	0x00011ee1
   10104:	0000291f 	.word	0x0000291f
   10108:	00003d25 	.word	0x00003d25
   1010c:	00003abd 	.word	0x00003abd
   10110:	00002d8d 	.word	0x00002d8d
   10114:	00003409 	.word	0x00003409
   10118:	00011f31 	.word	0x00011f31
   1011c:	00017604 	.word	0x00017604
   10120:	00002929 	.word	0x00002929

00010124 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   10124:	4b01      	ldr	r3, [pc, #4]	; (1012c <lv_disp_get_default+0x8>)
   10126:	6818      	ldr	r0, [r3, #0]
   10128:	4770      	bx	lr
   1012a:	bf00      	nop
   1012c:	20002b70 	.word	0x20002b70

00010130 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10130:	4603      	mov	r3, r0
   10132:	b140      	cbz	r0, 10146 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   10134:	7a1a      	ldrb	r2, [r3, #8]
   10136:	f012 0f02 	tst.w	r2, #2
   1013a:	bf0c      	ite	eq
   1013c:	f9b3 0000 	ldrsheq.w	r0, [r3]
   10140:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
   10144:	4770      	bx	lr
    return disp_def;
   10146:	4b03      	ldr	r3, [pc, #12]	; (10154 <lv_disp_get_hor_res+0x24>)
   10148:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   1014a:	2b00      	cmp	r3, #0
   1014c:	d1f2      	bne.n	10134 <lv_disp_get_hor_res+0x4>
        return LV_HOR_RES_MAX;
   1014e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
   10152:	4770      	bx	lr
   10154:	20002b70 	.word	0x20002b70

00010158 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10158:	4603      	mov	r3, r0
   1015a:	b140      	cbz	r0, 1016e <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   1015c:	7a1a      	ldrb	r2, [r3, #8]
   1015e:	f012 0f02 	tst.w	r2, #2
   10162:	bf0c      	ite	eq
   10164:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
   10168:	f9b3 0000 	ldrshne.w	r0, [r3]
   1016c:	4770      	bx	lr
    return disp_def;
   1016e:	4b03      	ldr	r3, [pc, #12]	; (1017c <lv_disp_get_ver_res+0x24>)
   10170:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   10172:	2b00      	cmp	r3, #0
   10174:	d1f2      	bne.n	1015c <lv_disp_get_ver_res+0x4>
        return LV_VER_RES_MAX;
   10176:	f44f 7088 	mov.w	r0, #272	; 0x110
}
   1017a:	4770      	bx	lr
   1017c:	20002b70 	.word	0x20002b70

00010180 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
uint32_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   10180:	4603      	mov	r3, r0
   10182:	b118      	cbz	r0, 1018c <lv_disp_get_dpi+0xc>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
   10184:	8918      	ldrh	r0, [r3, #8]
   10186:	f3c0 0089 	ubfx	r0, r0, #2, #10
   1018a:	4770      	bx	lr
    return disp_def;
   1018c:	4b02      	ldr	r3, [pc, #8]	; (10198 <lv_disp_get_dpi+0x18>)
   1018e:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   10190:	2b00      	cmp	r3, #0
   10192:	d1f7      	bne.n	10184 <lv_disp_get_dpi+0x4>
   10194:	2082      	movs	r0, #130	; 0x82
}
   10196:	4770      	bx	lr
   10198:	20002b70 	.word	0x20002b70

0001019c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
   1019c:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
   1019e:	4605      	mov	r5, r0
   101a0:	b1a0      	cbz	r0, 101cc <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
    else w = lv_disp_get_hor_res(disp);
   101a2:	4628      	mov	r0, r5
   101a4:	4b0f      	ldr	r3, [pc, #60]	; (101e4 <lv_disp_get_size_category+0x48>)
   101a6:	4798      	blx	r3
   101a8:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
   101aa:	4628      	mov	r0, r5
   101ac:	4b0e      	ldr	r3, [pc, #56]	; (101e8 <lv_disp_get_size_category+0x4c>)
   101ae:	4798      	blx	r3

    w = w * 10 / dpi;
   101b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   101b4:	0064      	lsls	r4, r4, #1
   101b6:	fbb4 f0f0 	udiv	r0, r4, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   101ba:	281d      	cmp	r0, #29
   101bc:	d90d      	bls.n	101da <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   101be:	2831      	cmp	r0, #49	; 0x31
   101c0:	d90d      	bls.n	101de <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
   101c2:	2846      	cmp	r0, #70	; 0x46
   101c4:	bf34      	ite	cc
   101c6:	2002      	movcc	r0, #2
   101c8:	2003      	movcs	r0, #3
   101ca:	bd38      	pop	{r3, r4, r5, pc}
    return disp_def;
   101cc:	4b07      	ldr	r3, [pc, #28]	; (101ec <lv_disp_get_size_category+0x50>)
   101ce:	681d      	ldr	r5, [r3, #0]
   101d0:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    if(disp == NULL) w = LV_HOR_RES_MAX;
   101d4:	2d00      	cmp	r5, #0
   101d6:	d0e8      	beq.n	101aa <lv_disp_get_size_category+0xe>
   101d8:	e7e3      	b.n	101a2 <lv_disp_get_size_category+0x6>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   101da:	2000      	movs	r0, #0
   101dc:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   101de:	2001      	movs	r0, #1
}
   101e0:	bd38      	pop	{r3, r4, r5, pc}
   101e2:	bf00      	nop
   101e4:	00010131 	.word	0x00010131
   101e8:	00010181 	.word	0x00010181
   101ec:	20002b70 	.word	0x20002b70

000101f0 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   101f0:	6842      	ldr	r2, [r0, #4]
   101f2:	2300      	movs	r3, #0
   101f4:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
   101f6:	6842      	ldr	r2, [r0, #4]
   101f8:	61d3      	str	r3, [r2, #28]
   101fa:	4770      	bx	lr

000101fc <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
   101fc:	b508      	push	{r3, lr}
    if(disp == NULL)
   101fe:	b120      	cbz	r0, 1020a <lv_disp_get_next+0xe>
   10200:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
   10202:	4804      	ldr	r0, [pc, #16]	; (10214 <lv_disp_get_next+0x18>)
   10204:	4b04      	ldr	r3, [pc, #16]	; (10218 <lv_disp_get_next+0x1c>)
   10206:	4798      	blx	r3
}
   10208:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
   1020a:	4802      	ldr	r0, [pc, #8]	; (10214 <lv_disp_get_next+0x18>)
   1020c:	4b03      	ldr	r3, [pc, #12]	; (1021c <lv_disp_get_next+0x20>)
   1020e:	4798      	blx	r3
   10210:	bd08      	pop	{r3, pc}
   10212:	bf00      	nop
   10214:	2000acac 	.word	0x2000acac
   10218:	00011161 	.word	0x00011161
   1021c:	0001114d 	.word	0x0001114d

00010220 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   10220:	6840      	ldr	r0, [r0, #4]
   10222:	4770      	bx	lr

00010224 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   10224:	6843      	ldr	r3, [r0, #4]
   10226:	681a      	ldr	r2, [r3, #0]
   10228:	b122      	cbz	r2, 10234 <lv_disp_is_double_buf+0x10>
   1022a:	6858      	ldr	r0, [r3, #4]
   1022c:	3000      	adds	r0, #0
   1022e:	bf18      	it	ne
   10230:	2001      	movne	r0, #1
   10232:	4770      	bx	lr
        return true;
    else
        return false;
   10234:	2000      	movs	r0, #0
}
   10236:	4770      	bx	lr

00010238 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   10238:	b510      	push	{r4, lr}
   1023a:	4604      	mov	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   1023c:	4b08      	ldr	r3, [pc, #32]	; (10260 <lv_disp_is_true_double_buf+0x28>)
   1023e:	4798      	blx	r3
   10240:	4603      	mov	r3, r0
   10242:	b158      	cbz	r0, 1025c <lv_disp_is_true_double_buf+0x24>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   10244:	f9b4 2000 	ldrsh.w	r2, [r4]
   10248:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1024c:	fb03 f302 	mul.w	r3, r3, r2
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   10250:	6862      	ldr	r2, [r4, #4]
   10252:	68d2      	ldr	r2, [r2, #12]
   10254:	4293      	cmp	r3, r2
   10256:	bf14      	ite	ne
   10258:	2300      	movne	r3, #0
   1025a:	2301      	moveq	r3, #1
        return true;
    }
    else {
        return false;
    }
}
   1025c:	4618      	mov	r0, r3
   1025e:	bd10      	pop	{r4, pc}
   10260:	00010225 	.word	0x00010225

00010264 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
   10264:	b508      	push	{r3, lr}
    if(indev == NULL)
   10266:	b120      	cbz	r0, 10272 <lv_indev_get_next+0xe>
   10268:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   1026a:	4804      	ldr	r0, [pc, #16]	; (1027c <lv_indev_get_next+0x18>)
   1026c:	4b04      	ldr	r3, [pc, #16]	; (10280 <lv_indev_get_next+0x1c>)
   1026e:	4798      	blx	r3
}
   10270:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   10272:	4802      	ldr	r0, [pc, #8]	; (1027c <lv_indev_get_next+0x18>)
   10274:	4b03      	ldr	r3, [pc, #12]	; (10284 <lv_indev_get_next+0x20>)
   10276:	4798      	blx	r3
   10278:	bd08      	pop	{r3, pc}
   1027a:	bf00      	nop
   1027c:	2000aca0 	.word	0x2000aca0
   10280:	00011161 	.word	0x00011161
   10284:	0001114d 	.word	0x0001114d

00010288 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
   10288:	4b03      	ldr	r3, [pc, #12]	; (10298 <lv_tick_inc+0x10>)
   1028a:	2200      	movs	r2, #0
   1028c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
   1028e:	685a      	ldr	r2, [r3, #4]
   10290:	4410      	add	r0, r2
   10292:	6058      	str	r0, [r3, #4]
   10294:	4770      	bx	lr
   10296:	bf00      	nop
   10298:	20002b74 	.word	0x20002b74

0001029c <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
   1029c:	4b04      	ldr	r3, [pc, #16]	; (102b0 <lv_tick_get+0x14>)
   1029e:	f04f 0101 	mov.w	r1, #1
   102a2:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
   102a4:	781a      	ldrb	r2, [r3, #0]
   102a6:	2a00      	cmp	r2, #0
   102a8:	d0fb      	beq.n	102a2 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   102aa:	4b01      	ldr	r3, [pc, #4]	; (102b0 <lv_tick_get+0x14>)
   102ac:	6858      	ldr	r0, [r3, #4]
   102ae:	4770      	bx	lr
   102b0:	20002b74 	.word	0x20002b74

000102b4 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   102b4:	b510      	push	{r4, lr}
   102b6:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
   102b8:	4b01      	ldr	r3, [pc, #4]	; (102c0 <lv_tick_elaps+0xc>)
   102ba:	4798      	blx	r3
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   102bc:	1b00      	subs	r0, r0, r4
   102be:	bd10      	pop	{r4, pc}
   102c0:	0001029d 	.word	0x0001029d

000102c4 <lv_anim_path_linear>:
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)
{
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
   102c4:	6a0a      	ldr	r2, [r1, #32]
   102c6:	6a48      	ldr	r0, [r1, #36]	; 0x24
   102c8:	4282      	cmp	r2, r0
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
   102ca:	bf1a      	itte	ne
   102cc:	0280      	lslne	r0, r0, #10
   102ce:	fbb0 f0f2 	udivne	r0, r0, r2
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
   102d2:	f44f 6080 	moveq.w	r0, #1024	; 0x400
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
   102d6:	698a      	ldr	r2, [r1, #24]
   102d8:	69cb      	ldr	r3, [r1, #28]
   102da:	1a9b      	subs	r3, r3, r2
   102dc:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
   102e0:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
   102e4:	b200      	sxth	r0, r0
   102e6:	4770      	bx	lr

000102e8 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
   102e8:	b508      	push	{r3, lr}
    anim_list_changed = true;
   102ea:	2201      	movs	r2, #1
   102ec:	4b08      	ldr	r3, [pc, #32]	; (10310 <anim_mark_list_change+0x28>)
   102ee:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
   102f0:	4808      	ldr	r0, [pc, #32]	; (10314 <anim_mark_list_change+0x2c>)
   102f2:	4b09      	ldr	r3, [pc, #36]	; (10318 <anim_mark_list_change+0x30>)
   102f4:	4798      	blx	r3
   102f6:	b128      	cbz	r0, 10304 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
   102f8:	2104      	movs	r1, #4
   102fa:	4b05      	ldr	r3, [pc, #20]	; (10310 <anim_mark_list_change+0x28>)
   102fc:	6858      	ldr	r0, [r3, #4]
   102fe:	4b07      	ldr	r3, [pc, #28]	; (1031c <anim_mark_list_change+0x34>)
   10300:	4798      	blx	r3
   10302:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
   10304:	2100      	movs	r1, #0
   10306:	4b02      	ldr	r3, [pc, #8]	; (10310 <anim_mark_list_change+0x28>)
   10308:	6858      	ldr	r0, [r3, #4]
   1030a:	4b04      	ldr	r3, [pc, #16]	; (1031c <anim_mark_list_change+0x34>)
   1030c:	4798      	blx	r3
   1030e:	bd08      	pop	{r3, pc}
   10310:	20002b7c 	.word	0x20002b7c
   10314:	2000ad68 	.word	0x2000ad68
   10318:	0001114d 	.word	0x0001114d
   1031c:	00011e55 	.word	0x00011e55

00010320 <anim_task>:
{
   10320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10324:	b091      	sub	sp, #68	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   10326:	4863      	ldr	r0, [pc, #396]	; (104b4 <anim_task+0x194>)
   10328:	4b63      	ldr	r3, [pc, #396]	; (104b8 <anim_task+0x198>)
   1032a:	4798      	blx	r3
   1032c:	b168      	cbz	r0, 1034a <anim_task+0x2a>
   1032e:	4601      	mov	r1, r0
   10330:	4d60      	ldr	r5, [pc, #384]	; (104b4 <anim_task+0x194>)
   10332:	4c62      	ldr	r4, [pc, #392]	; (104bc <anim_task+0x19c>)
        a->has_run = 0;
   10334:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
   10338:	f36f 0341 	bfc	r3, #1, #1
   1033c:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   10340:	4628      	mov	r0, r5
   10342:	47a0      	blx	r4
   10344:	4601      	mov	r1, r0
   10346:	2800      	cmp	r0, #0
   10348:	d1f4      	bne.n	10334 <anim_task+0x14>
    uint32_t elaps = lv_tick_elaps(last_task_run);
   1034a:	4b5d      	ldr	r3, [pc, #372]	; (104c0 <anim_task+0x1a0>)
   1034c:	6898      	ldr	r0, [r3, #8]
   1034e:	4b5d      	ldr	r3, [pc, #372]	; (104c4 <anim_task+0x1a4>)
   10350:	4798      	blx	r3
   10352:	4680      	mov	r8, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   10354:	4857      	ldr	r0, [pc, #348]	; (104b4 <anim_task+0x194>)
   10356:	4b58      	ldr	r3, [pc, #352]	; (104b8 <anim_task+0x198>)
   10358:	4798      	blx	r3
    while(a != NULL) {
   1035a:	4604      	mov	r4, r0
   1035c:	2800      	cmp	r0, #0
   1035e:	f000 8089 	beq.w	10474 <anim_task+0x154>
        anim_list_changed = false;
   10362:	4d57      	ldr	r5, [pc, #348]	; (104c0 <anim_task+0x1a0>)
   10364:	f04f 0700 	mov.w	r7, #0
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   10368:	4e52      	ldr	r6, [pc, #328]	; (104b4 <anim_task+0x194>)
   1036a:	f8df 914c 	ldr.w	r9, [pc, #332]	; 104b8 <anim_task+0x198>
   1036e:	e01c      	b.n	103aa <anim_task+0x8a>
            int32_t new_act_time = a->act_time + elaps;
   10370:	4443      	add	r3, r8
            if(a->act_time <= 0 && new_act_time >= 0) {
   10372:	2b00      	cmp	r3, #0
   10374:	f2c0 8085 	blt.w	10482 <anim_task+0x162>
                if(a->start_cb) a->start_cb(a);
   10378:	68a2      	ldr	r2, [r4, #8]
   1037a:	2a00      	cmp	r2, #0
   1037c:	f000 8088 	beq.w	10490 <anim_task+0x170>
   10380:	4620      	mov	r0, r4
   10382:	4790      	blx	r2
   10384:	e01e      	b.n	103c4 <anim_task+0xa4>
                else new_value = lv_anim_path_linear(&a->path, a);
   10386:	4621      	mov	r1, r4
   10388:	f104 0010 	add.w	r0, r4, #16
   1038c:	4b4e      	ldr	r3, [pc, #312]	; (104c8 <anim_task+0x1a8>)
   1038e:	4798      	blx	r3
   10390:	e028      	b.n	103e4 <anim_task+0xc4>
                if(a->act_time >= a->time) {
   10392:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10394:	6a23      	ldr	r3, [r4, #32]
   10396:	429a      	cmp	r2, r3
   10398:	d22b      	bcs.n	103f2 <anim_task+0xd2>
        if(anim_list_changed)
   1039a:	782b      	ldrb	r3, [r5, #0]
   1039c:	2b00      	cmp	r3, #0
   1039e:	d071      	beq.n	10484 <anim_task+0x164>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   103a0:	4630      	mov	r0, r6
   103a2:	47c8      	blx	r9
   103a4:	4604      	mov	r4, r0
    while(a != NULL) {
   103a6:	2c00      	cmp	r4, #0
   103a8:	d064      	beq.n	10474 <anim_task+0x154>
        anim_list_changed = false;
   103aa:	702f      	strb	r7, [r5, #0]
        if(!a->has_run) {
   103ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   103b0:	f013 0f02 	tst.w	r3, #2
   103b4:	d166      	bne.n	10484 <anim_task+0x164>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
   103b6:	f043 0302 	orr.w	r3, r3, #2
   103ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            int32_t new_act_time = a->act_time + elaps;
   103be:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if(a->act_time <= 0 && new_act_time >= 0) {
   103c0:	2b00      	cmp	r3, #0
   103c2:	ddd5      	ble.n	10370 <anim_task+0x50>
            a->act_time += elaps;
   103c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   103c6:	4443      	add	r3, r8
   103c8:	6263      	str	r3, [r4, #36]	; 0x24
            if(a->act_time >= 0) {
   103ca:	2b00      	cmp	r3, #0
   103cc:	dbe5      	blt.n	1039a <anim_task+0x7a>
                if(a->act_time > a->time) a->act_time = a->time;
   103ce:	6a22      	ldr	r2, [r4, #32]
   103d0:	429a      	cmp	r2, r3
   103d2:	bf38      	it	cc
   103d4:	6262      	strcc	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   103d6:	6923      	ldr	r3, [r4, #16]
   103d8:	2b00      	cmp	r3, #0
   103da:	d0d4      	beq.n	10386 <anim_task+0x66>
   103dc:	4621      	mov	r1, r4
   103de:	f104 0010 	add.w	r0, r4, #16
   103e2:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
   103e4:	6863      	ldr	r3, [r4, #4]
   103e6:	2b00      	cmp	r3, #0
   103e8:	d0d3      	beq.n	10392 <anim_task+0x72>
   103ea:	b201      	sxth	r1, r0
   103ec:	6820      	ldr	r0, [r4, #0]
   103ee:	4798      	blx	r3
   103f0:	e7cf      	b.n	10392 <anim_task+0x72>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
   103f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   103f6:	f013 0301 	ands.w	r3, r3, #1
   103fa:	d108      	bne.n	1040e <anim_task+0xee>
   103fc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   103fe:	2a00      	cmp	r2, #0
   10400:	d048      	beq.n	10494 <anim_task+0x174>
   10402:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10406:	428a      	cmp	r2, r1
   10408:	d04b      	beq.n	104a2 <anim_task+0x182>
        a->repeat_cnt--;
   1040a:	3a01      	subs	r2, #1
   1040c:	86a2      	strh	r2, [r4, #52]	; 0x34
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   1040e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   10410:	b1ca      	cbz	r2, 10446 <anim_task+0x126>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   10412:	6b22      	ldr	r2, [r4, #48]	; 0x30
   10414:	4252      	negs	r2, r2
   10416:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   10418:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1041a:	2a00      	cmp	r2, #0
   1041c:	d0bd      	beq.n	1039a <anim_task+0x7a>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   1041e:	2b00      	cmp	r3, #0
   10420:	d03b      	beq.n	1049a <anim_task+0x17a>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
   10422:	f083 0301 	eor.w	r3, r3, #1
   10426:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   1042a:	f363 0100 	bfi	r1, r3, #0, #1
   1042e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            tmp      = a->start;
   10432:	69a3      	ldr	r3, [r4, #24]
            a->start = a->end;
   10434:	69e0      	ldr	r0, [r4, #28]
   10436:	61a0      	str	r0, [r4, #24]
            a->end   = tmp;
   10438:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   1043a:	f011 0f01 	tst.w	r1, #1
   1043e:	bf08      	it	eq
   10440:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
   10442:	6222      	str	r2, [r4, #32]
   10444:	e7a9      	b.n	1039a <anim_task+0x7a>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   10446:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10448:	b102      	cbz	r2, 1044c <anim_task+0x12c>
   1044a:	b333      	cbz	r3, 1049a <anim_task+0x17a>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
   1044c:	2240      	movs	r2, #64	; 0x40
   1044e:	4621      	mov	r1, r4
   10450:	4668      	mov	r0, sp
   10452:	4b1e      	ldr	r3, [pc, #120]	; (104cc <anim_task+0x1ac>)
   10454:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   10456:	4621      	mov	r1, r4
   10458:	4630      	mov	r0, r6
   1045a:	4b1d      	ldr	r3, [pc, #116]	; (104d0 <anim_task+0x1b0>)
   1045c:	4798      	blx	r3
        lv_mem_free(a);
   1045e:	4620      	mov	r0, r4
   10460:	4b1c      	ldr	r3, [pc, #112]	; (104d4 <anim_task+0x1b4>)
   10462:	4798      	blx	r3
        anim_mark_list_change();
   10464:	4b1c      	ldr	r3, [pc, #112]	; (104d8 <anim_task+0x1b8>)
   10466:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
   10468:	9b03      	ldr	r3, [sp, #12]
   1046a:	2b00      	cmp	r3, #0
   1046c:	d095      	beq.n	1039a <anim_task+0x7a>
   1046e:	4668      	mov	r0, sp
   10470:	4798      	blx	r3
   10472:	e792      	b.n	1039a <anim_task+0x7a>
    last_task_run = lv_tick_get();
   10474:	4b19      	ldr	r3, [pc, #100]	; (104dc <anim_task+0x1bc>)
   10476:	4798      	blx	r3
   10478:	4b11      	ldr	r3, [pc, #68]	; (104c0 <anim_task+0x1a0>)
   1047a:	6098      	str	r0, [r3, #8]
}
   1047c:	b011      	add	sp, #68	; 0x44
   1047e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            a->act_time += elaps;
   10482:	6263      	str	r3, [r4, #36]	; 0x24
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   10484:	4621      	mov	r1, r4
   10486:	4630      	mov	r0, r6
   10488:	4b0c      	ldr	r3, [pc, #48]	; (104bc <anim_task+0x19c>)
   1048a:	4798      	blx	r3
   1048c:	4604      	mov	r4, r0
   1048e:	e78a      	b.n	103a6 <anim_task+0x86>
            a->act_time += elaps;
   10490:	6263      	str	r3, [r4, #36]	; 0x24
   10492:	e79c      	b.n	103ce <anim_task+0xae>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   10494:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   10496:	2a00      	cmp	r2, #0
   10498:	d0d8      	beq.n	1044c <anim_task+0x12c>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   1049a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1049c:	4249      	negs	r1, r1
   1049e:	6261      	str	r1, [r4, #36]	; 0x24
   104a0:	e7bf      	b.n	10422 <anim_task+0x102>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   104a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
   104a4:	4252      	negs	r2, r2
   104a6:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   104a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   104aa:	2a00      	cmp	r2, #0
   104ac:	f43f af75 	beq.w	1039a <anim_task+0x7a>
   104b0:	e7f3      	b.n	1049a <anim_task+0x17a>
   104b2:	bf00      	nop
   104b4:	2000ad68 	.word	0x2000ad68
   104b8:	0001114d 	.word	0x0001114d
   104bc:	00011161 	.word	0x00011161
   104c0:	20002b7c 	.word	0x20002b7c
   104c4:	000102b5 	.word	0x000102b5
   104c8:	000102c5 	.word	0x000102c5
   104cc:	00011769 	.word	0x00011769
   104d0:	00011239 	.word	0x00011239
   104d4:	000115fd 	.word	0x000115fd
   104d8:	000102e9 	.word	0x000102e9
   104dc:	0001029d 	.word	0x0001029d

000104e0 <_lv_anim_core_init>:
{
   104e0:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
   104e2:	2140      	movs	r1, #64	; 0x40
   104e4:	4809      	ldr	r0, [pc, #36]	; (1050c <_lv_anim_core_init+0x2c>)
   104e6:	4b0a      	ldr	r3, [pc, #40]	; (10510 <_lv_anim_core_init+0x30>)
   104e8:	4798      	blx	r3
    last_task_run = lv_tick_get();
   104ea:	4b0a      	ldr	r3, [pc, #40]	; (10514 <_lv_anim_core_init+0x34>)
   104ec:	4798      	blx	r3
   104ee:	4c0a      	ldr	r4, [pc, #40]	; (10518 <_lv_anim_core_init+0x38>)
   104f0:	60a0      	str	r0, [r4, #8]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
   104f2:	2300      	movs	r3, #0
   104f4:	2204      	movs	r2, #4
   104f6:	211e      	movs	r1, #30
   104f8:	4808      	ldr	r0, [pc, #32]	; (1051c <_lv_anim_core_init+0x3c>)
   104fa:	4d09      	ldr	r5, [pc, #36]	; (10520 <_lv_anim_core_init+0x40>)
   104fc:	47a8      	blx	r5
   104fe:	6060      	str	r0, [r4, #4]
    anim_mark_list_change(); /*Turn off the animation task*/
   10500:	4b08      	ldr	r3, [pc, #32]	; (10524 <_lv_anim_core_init+0x44>)
   10502:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actaully changed*/
   10504:	2300      	movs	r3, #0
   10506:	7023      	strb	r3, [r4, #0]
   10508:	bd38      	pop	{r3, r4, r5, pc}
   1050a:	bf00      	nop
   1050c:	2000ad68 	.word	0x2000ad68
   10510:	0001109d 	.word	0x0001109d
   10514:	0001029d 	.word	0x0001029d
   10518:	20002b7c 	.word	0x20002b7c
   1051c:	00010321 	.word	0x00010321
   10520:	00011ee1 	.word	0x00011ee1
   10524:	000102e9 	.word	0x000102e9

00010528 <lv_anim_init>:
{
   10528:	b510      	push	{r4, lr}
   1052a:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
   1052c:	2140      	movs	r1, #64	; 0x40
   1052e:	4b0d      	ldr	r3, [pc, #52]	; (10564 <lv_anim_init+0x3c>)
   10530:	4798      	blx	r3
    a->time    = 500;
   10532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   10536:	6223      	str	r3, [r4, #32]
    a->start   = 0;
   10538:	2300      	movs	r3, #0
   1053a:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
   1053c:	2364      	movs	r3, #100	; 0x64
   1053e:	61e3      	str	r3, [r4, #28]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
   10540:	4b09      	ldr	r3, [pc, #36]	; (10568 <lv_anim_init+0x40>)
   10542:	781a      	ldrb	r2, [r3, #0]
   10544:	7422      	strb	r2, [r4, #16]
   10546:	785a      	ldrb	r2, [r3, #1]
   10548:	7462      	strb	r2, [r4, #17]
   1054a:	789a      	ldrb	r2, [r3, #2]
   1054c:	74a2      	strb	r2, [r4, #18]
   1054e:	78db      	ldrb	r3, [r3, #3]
   10550:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
   10552:	2301      	movs	r3, #1
   10554:	86a3      	strh	r3, [r4, #52]	; 0x34
    a->early_apply = 1;
   10556:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1055a:	f043 0301 	orr.w	r3, r3, #1
   1055e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   10562:	bd10      	pop	{r4, pc}
   10564:	00011bdb 	.word	0x00011bdb
   10568:	0001b450 	.word	0x0001b450

0001056c <lv_anim_del>:
{
   1056c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10570:	4607      	mov	r7, r0
   10572:	4689      	mov	r9, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   10574:	4815      	ldr	r0, [pc, #84]	; (105cc <lv_anim_del+0x60>)
   10576:	4b16      	ldr	r3, [pc, #88]	; (105d0 <lv_anim_del+0x64>)
   10578:	4798      	blx	r3
    while(a != NULL) {
   1057a:	b310      	cbz	r0, 105c2 <lv_anim_del+0x56>
   1057c:	4604      	mov	r4, r0
   1057e:	f04f 0a00 	mov.w	sl, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   10582:	f8df 8048 	ldr.w	r8, [pc, #72]	; 105cc <lv_anim_del+0x60>
   10586:	4e13      	ldr	r6, [pc, #76]	; (105d4 <lv_anim_del+0x68>)
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   10588:	f8df b054 	ldr.w	fp, [pc, #84]	; 105e0 <lv_anim_del+0x74>
   1058c:	e00b      	b.n	105a6 <lv_anim_del+0x3a>
   1058e:	4621      	mov	r1, r4
   10590:	4640      	mov	r0, r8
   10592:	47d8      	blx	fp
            lv_mem_free(a);
   10594:	4620      	mov	r0, r4
   10596:	4b10      	ldr	r3, [pc, #64]	; (105d8 <lv_anim_del+0x6c>)
   10598:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
   1059a:	4b10      	ldr	r3, [pc, #64]	; (105dc <lv_anim_del+0x70>)
   1059c:	4798      	blx	r3
            del = true;
   1059e:	f04f 0a01 	mov.w	sl, #1
   105a2:	462c      	mov	r4, r5
    while(a != NULL) {
   105a4:	b17d      	cbz	r5, 105c6 <lv_anim_del+0x5a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   105a6:	4621      	mov	r1, r4
   105a8:	4640      	mov	r0, r8
   105aa:	47b0      	blx	r6
   105ac:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
   105ae:	6823      	ldr	r3, [r4, #0]
   105b0:	42bb      	cmp	r3, r7
   105b2:	d1f6      	bne.n	105a2 <lv_anim_del+0x36>
   105b4:	6863      	ldr	r3, [r4, #4]
   105b6:	454b      	cmp	r3, r9
   105b8:	d0e9      	beq.n	1058e <lv_anim_del+0x22>
   105ba:	f1b9 0f00 	cmp.w	r9, #0
   105be:	d1f0      	bne.n	105a2 <lv_anim_del+0x36>
   105c0:	e7e5      	b.n	1058e <lv_anim_del+0x22>
    bool del = false;
   105c2:	f04f 0a00 	mov.w	sl, #0
}
   105c6:	4650      	mov	r0, sl
   105c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105cc:	2000ad68 	.word	0x2000ad68
   105d0:	0001114d 	.word	0x0001114d
   105d4:	00011161 	.word	0x00011161
   105d8:	000115fd 	.word	0x000115fd
   105dc:	000102e9 	.word	0x000102e9
   105e0:	00011239 	.word	0x00011239

000105e4 <lv_anim_start>:
{
   105e4:	b538      	push	{r3, r4, r5, lr}
   105e6:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
   105e8:	6841      	ldr	r1, [r0, #4]
   105ea:	b111      	cbz	r1, 105f2 <lv_anim_start+0xe>
   105ec:	6800      	ldr	r0, [r0, #0]
   105ee:	4b18      	ldr	r3, [pc, #96]	; (10650 <lv_anim_start+0x6c>)
   105f0:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
   105f2:	4818      	ldr	r0, [pc, #96]	; (10654 <lv_anim_start+0x70>)
   105f4:	4b18      	ldr	r3, [pc, #96]	; (10658 <lv_anim_start+0x74>)
   105f6:	4798      	blx	r3
   105f8:	b9e8      	cbnz	r0, 10636 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
   105fa:	4816      	ldr	r0, [pc, #88]	; (10654 <lv_anim_start+0x70>)
   105fc:	4b17      	ldr	r3, [pc, #92]	; (1065c <lv_anim_start+0x78>)
   105fe:	4798      	blx	r3
   10600:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
   10602:	4b17      	ldr	r3, [pc, #92]	; (10660 <lv_anim_start+0x7c>)
   10604:	4798      	blx	r3
   10606:	b1e0      	cbz	r0, 10642 <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
   10608:	b1a4      	cbz	r4, 10634 <lv_anim_start+0x50>
    a->time_orig = a->time;
   1060a:	6a2b      	ldr	r3, [r5, #32]
   1060c:	63ab      	str	r3, [r5, #56]	; 0x38
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
   1060e:	2240      	movs	r2, #64	; 0x40
   10610:	4629      	mov	r1, r5
   10612:	4620      	mov	r0, r4
   10614:	4b13      	ldr	r3, [pc, #76]	; (10664 <lv_anim_start+0x80>)
   10616:	4798      	blx	r3
    if(new_anim->early_apply) {
   10618:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1061c:	f013 0f01 	tst.w	r3, #1
   10620:	d006      	beq.n	10630 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
   10622:	6863      	ldr	r3, [r4, #4]
   10624:	b123      	cbz	r3, 10630 <lv_anim_start+0x4c>
   10626:	6820      	ldr	r0, [r4, #0]
   10628:	b110      	cbz	r0, 10630 <lv_anim_start+0x4c>
   1062a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
   1062e:	4798      	blx	r3
    anim_mark_list_change();
   10630:	4b0d      	ldr	r3, [pc, #52]	; (10668 <lv_anim_start+0x84>)
   10632:	4798      	blx	r3
   10634:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
   10636:	4b0d      	ldr	r3, [pc, #52]	; (1066c <lv_anim_start+0x88>)
   10638:	4798      	blx	r3
   1063a:	3801      	subs	r0, #1
   1063c:	4b0c      	ldr	r3, [pc, #48]	; (10670 <lv_anim_start+0x8c>)
   1063e:	6098      	str	r0, [r3, #8]
   10640:	e7db      	b.n	105fa <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
   10642:	4622      	mov	r2, r4
   10644:	2300      	movs	r3, #0
   10646:	480b      	ldr	r0, [pc, #44]	; (10674 <lv_anim_start+0x90>)
   10648:	490b      	ldr	r1, [pc, #44]	; (10678 <lv_anim_start+0x94>)
   1064a:	4788      	blx	r1
   1064c:	e7fe      	b.n	1064c <lv_anim_start+0x68>
   1064e:	bf00      	nop
   10650:	0001056d 	.word	0x0001056d
   10654:	2000ad68 	.word	0x2000ad68
   10658:	000113e9 	.word	0x000113e9
   1065c:	000110b5 	.word	0x000110b5
   10660:	0000291f 	.word	0x0000291f
   10664:	00011769 	.word	0x00011769
   10668:	000102e9 	.word	0x000102e9
   1066c:	0001029d 	.word	0x0001029d
   10670:	20002b7c 	.word	0x20002b7c
   10674:	00017604 	.word	0x00017604
   10678:	00002929 	.word	0x00002929

0001067c <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   1067c:	b430      	push	{r4, r5}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   1067e:	f9b0 5000 	ldrsh.w	r5, [r0]
   10682:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   10686:	1b5b      	subs	r3, r3, r5
   10688:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1068c:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
   1068e:	b29c      	uxth	r4, r3
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   10690:	880a      	ldrh	r2, [r1, #0]
   10692:	1b52      	subs	r2, r2, r5
   10694:	1b12      	subs	r2, r2, r4
    lv_coord_t py = p->y - cy;
   10696:	8849      	ldrh	r1, [r1, #2]
   10698:	8840      	ldrh	r0, [r0, #2]
   1069a:	1a08      	subs	r0, r1, r0
   1069c:	1b00      	subs	r0, r0, r4

    int32_t r_sqrd = r * r;
   1069e:	fb13 f303 	smulbb	r3, r3, r3
    int32_t dist = (px * px) + (py * py);
   106a2:	fb10 f000 	smulbb	r0, r0, r0
   106a6:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   106aa:	4293      	cmp	r3, r2
   106ac:	bfb4      	ite	lt
   106ae:	2000      	movlt	r0, #0
   106b0:	2001      	movge	r0, #1
   106b2:	bc30      	pop	{r4, r5}
   106b4:	4770      	bx	lr

000106b6 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   106b6:	3901      	subs	r1, #1
   106b8:	8843      	ldrh	r3, [r0, #2]
   106ba:	4419      	add	r1, r3
   106bc:	80c1      	strh	r1, [r0, #6]
   106be:	4770      	bx	lr

000106c0 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   106c0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   106c4:	f9b0 3000 	ldrsh.w	r3, [r0]
   106c8:	1ad2      	subs	r2, r2, r3
   106ca:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   106ce:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   106d2:	1a18      	subs	r0, r3, r0
   106d4:	3001      	adds	r0, #1
}
   106d6:	fb02 0000 	mla	r0, r2, r0, r0
   106da:	4770      	bx	lr

000106dc <_lv_area_intersect>:
{
   106dc:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   106de:	f9b2 5000 	ldrsh.w	r5, [r2]
   106e2:	f9b1 3000 	ldrsh.w	r3, [r1]
   106e6:	429d      	cmp	r5, r3
   106e8:	bfb8      	it	lt
   106ea:	461d      	movlt	r5, r3
   106ec:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   106ee:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   106f2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   106f6:	42a3      	cmp	r3, r4
   106f8:	bfb8      	it	lt
   106fa:	4623      	movlt	r3, r4
   106fc:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   106fe:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
   10702:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   10706:	42b4      	cmp	r4, r6
   10708:	bfa8      	it	ge
   1070a:	4634      	movge	r4, r6
   1070c:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   1070e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   10712:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   10716:	428a      	cmp	r2, r1
   10718:	bfa8      	it	ge
   1071a:	460a      	movge	r2, r1
   1071c:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   1071e:	42a5      	cmp	r5, r4
   10720:	dc05      	bgt.n	1072e <_lv_area_intersect+0x52>
   10722:	4293      	cmp	r3, r2
   10724:	bfcc      	ite	gt
   10726:	2000      	movgt	r0, #0
   10728:	2001      	movle	r0, #1
}
   1072a:	bc70      	pop	{r4, r5, r6}
   1072c:	4770      	bx	lr
        union_ok = false;
   1072e:	2000      	movs	r0, #0
   10730:	e7fb      	b.n	1072a <_lv_area_intersect+0x4e>

00010732 <_lv_area_join>:
{
   10732:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   10734:	f9b2 3000 	ldrsh.w	r3, [r2]
   10738:	f9b1 4000 	ldrsh.w	r4, [r1]
   1073c:	42a3      	cmp	r3, r4
   1073e:	bfa8      	it	ge
   10740:	4623      	movge	r3, r4
   10742:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   10744:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   10748:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   1074c:	42a3      	cmp	r3, r4
   1074e:	bfa8      	it	ge
   10750:	4623      	movge	r3, r4
   10752:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   10754:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   10758:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   1075c:	42a3      	cmp	r3, r4
   1075e:	bfb8      	it	lt
   10760:	4623      	movlt	r3, r4
   10762:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   10764:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   10768:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   1076c:	4293      	cmp	r3, r2
   1076e:	bfb8      	it	lt
   10770:	4613      	movlt	r3, r2
   10772:	80c3      	strh	r3, [r0, #6]
}
   10774:	f85d 4b04 	ldr.w	r4, [sp], #4
   10778:	4770      	bx	lr
	...

0001077c <_lv_area_is_point_on>:
{
   1077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10780:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   10782:	f9b1 5000 	ldrsh.w	r5, [r1]
   10786:	f9b0 e000 	ldrsh.w	lr, [r0]
   1078a:	4575      	cmp	r5, lr
   1078c:	f2c0 809d 	blt.w	108ca <_lv_area_is_point_on+0x14e>
   10790:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   10794:	4545      	cmp	r5, r8
   10796:	f300 809c 	bgt.w	108d2 <_lv_area_is_point_on+0x156>
   1079a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   1079e:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
   107a2:	4553      	cmp	r3, sl
   107a4:	f2c0 8097 	blt.w	108d6 <_lv_area_is_point_on+0x15a>
   107a8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   107ac:	9001      	str	r0, [sp, #4]
    if(!is_on_rect)
   107ae:	4283      	cmp	r3, r0
   107b0:	f300 8093 	bgt.w	108da <_lv_area_is_point_on+0x15e>
    if(radius <= 0) {
   107b4:	2a00      	cmp	r2, #0
   107b6:	f340 8092 	ble.w	108de <_lv_area_is_point_on+0x162>
   107ba:	468c      	mov	ip, r1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   107bc:	fa1f f988 	uxth.w	r9, r8
   107c0:	fa1f f68e 	uxth.w	r6, lr
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   107c4:	b287      	uxth	r7, r0
   107c6:	fa1f f58a 	uxth.w	r5, sl
    corner_area.x1 = a_p->x1;
   107ca:	f8ad e008 	strh.w	lr, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   107ce:	f109 0301 	add.w	r3, r9, #1
   107d2:	1b9b      	subs	r3, r3, r6
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   107d4:	b21b      	sxth	r3, r3
   107d6:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   107da:	1c7b      	adds	r3, r7, #1
   107dc:	1b5b      	subs	r3, r3, r5
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   107de:	b21b      	sxth	r3, r3
   107e0:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   107e4:	1064      	asrs	r4, r4, #1
   107e6:	104b      	asrs	r3, r1, #1
    corner_area.x2 = a_p->x1 + radius;
   107e8:	42a3      	cmp	r3, r4
   107ea:	bfa8      	it	ge
   107ec:	4623      	movge	r3, r4
   107ee:	4293      	cmp	r3, r2
   107f0:	bfa8      	it	ge
   107f2:	4613      	movge	r3, r2
   107f4:	b29c      	uxth	r4, r3
   107f6:	4426      	add	r6, r4
   107f8:	b2b6      	uxth	r6, r6
   107fa:	f8ad 600c 	strh.w	r6, [sp, #12]
    corner_area.y1 = a_p->y1;
   107fe:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   10802:	4425      	add	r5, r4
   10804:	b2ad      	uxth	r5, r5
   10806:	fa0f fb85 	sxth.w	fp, r5
   1080a:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   1080e:	2200      	movs	r2, #0
   10810:	f8cd c000 	str.w	ip, [sp]
   10814:	4661      	mov	r1, ip
   10816:	a802      	add	r0, sp, #8
   10818:	f7ff ffb0 	bl	1077c <_lv_area_is_point_on>
   1081c:	b150      	cbz	r0, 10834 <_lv_area_is_point_on+0xb8>
        corner_area.x2 += radius;
   1081e:	4426      	add	r6, r4
   10820:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y2 += radius;
   10824:	442c      	add	r4, r5
   10826:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   1082a:	9900      	ldr	r1, [sp, #0]
   1082c:	a802      	add	r0, sp, #8
   1082e:	4b2e      	ldr	r3, [pc, #184]	; (108e8 <_lv_area_is_point_on+0x16c>)
   10830:	4798      	blx	r3
   10832:	e04b      	b.n	108cc <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y2 - radius;
   10834:	1b3f      	subs	r7, r7, r4
   10836:	b2bf      	uxth	r7, r7
   10838:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y2;
   1083c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10840:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   10844:	2200      	movs	r2, #0
   10846:	9900      	ldr	r1, [sp, #0]
   10848:	a802      	add	r0, sp, #8
   1084a:	f7ff ff97 	bl	1077c <_lv_area_is_point_on>
   1084e:	b150      	cbz	r0, 10866 <_lv_area_is_point_on+0xea>
        corner_area.x2 += radius;
   10850:	4426      	add	r6, r4
   10852:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y1 -= radius;
   10856:	1b3c      	subs	r4, r7, r4
   10858:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   1085c:	9900      	ldr	r1, [sp, #0]
   1085e:	a802      	add	r0, sp, #8
   10860:	4b21      	ldr	r3, [pc, #132]	; (108e8 <_lv_area_is_point_on+0x16c>)
   10862:	4798      	blx	r3
   10864:	e032      	b.n	108cc <_lv_area_is_point_on+0x150>
    corner_area.x1 = a_p->x2 - radius;
   10866:	eba9 0904 	sub.w	r9, r9, r4
   1086a:	fa1f f989 	uxth.w	r9, r9
   1086e:	f8ad 9008 	strh.w	r9, [sp, #8]
    corner_area.x2 = a_p->x2;
   10872:	f8ad 800c 	strh.w	r8, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   10876:	2200      	movs	r2, #0
   10878:	9e00      	ldr	r6, [sp, #0]
   1087a:	4631      	mov	r1, r6
   1087c:	a802      	add	r0, sp, #8
   1087e:	f7ff ff7d 	bl	1077c <_lv_area_is_point_on>
   10882:	b158      	cbz	r0, 1089c <_lv_area_is_point_on+0x120>
        corner_area.x1 -= radius;
   10884:	eba9 0904 	sub.w	r9, r9, r4
   10888:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y1 -= radius;
   1088c:	1b3c      	subs	r4, r7, r4
   1088e:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   10892:	4631      	mov	r1, r6
   10894:	a802      	add	r0, sp, #8
   10896:	4b14      	ldr	r3, [pc, #80]	; (108e8 <_lv_area_is_point_on+0x16c>)
   10898:	4798      	blx	r3
   1089a:	e017      	b.n	108cc <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y1;
   1089c:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   108a0:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   108a4:	2200      	movs	r2, #0
   108a6:	9e00      	ldr	r6, [sp, #0]
   108a8:	4631      	mov	r1, r6
   108aa:	a802      	add	r0, sp, #8
   108ac:	f7ff ff66 	bl	1077c <_lv_area_is_point_on>
   108b0:	b1b8      	cbz	r0, 108e2 <_lv_area_is_point_on+0x166>
        corner_area.x1 -= radius;
   108b2:	eba9 0904 	sub.w	r9, r9, r4
   108b6:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y2 += radius;
   108ba:	442c      	add	r4, r5
   108bc:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   108c0:	4631      	mov	r1, r6
   108c2:	a802      	add	r0, sp, #8
   108c4:	4b08      	ldr	r3, [pc, #32]	; (108e8 <_lv_area_is_point_on+0x16c>)
   108c6:	4798      	blx	r3
   108c8:	e000      	b.n	108cc <_lv_area_is_point_on+0x150>
        return false;
   108ca:	2000      	movs	r0, #0
}
   108cc:	b005      	add	sp, #20
   108ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
   108d2:	2000      	movs	r0, #0
   108d4:	e7fa      	b.n	108cc <_lv_area_is_point_on+0x150>
   108d6:	2000      	movs	r0, #0
   108d8:	e7f8      	b.n	108cc <_lv_area_is_point_on+0x150>
   108da:	2000      	movs	r0, #0
   108dc:	e7f6      	b.n	108cc <_lv_area_is_point_on+0x150>
        return true;
   108de:	2001      	movs	r0, #1
   108e0:	e7f4      	b.n	108cc <_lv_area_is_point_on+0x150>
    return true;
   108e2:	2001      	movs	r0, #1
   108e4:	e7f2      	b.n	108cc <_lv_area_is_point_on+0x150>
   108e6:	bf00      	nop
   108e8:	0001067d 	.word	0x0001067d

000108ec <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   108ec:	f9b0 2000 	ldrsh.w	r2, [r0]
   108f0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   108f4:	429a      	cmp	r2, r3
   108f6:	dc14      	bgt.n	10922 <_lv_area_is_on+0x36>
   108f8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   108fc:	f9b1 3000 	ldrsh.w	r3, [r1]
   10900:	429a      	cmp	r2, r3
   10902:	db10      	blt.n	10926 <_lv_area_is_on+0x3a>
   10904:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   10908:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   1090c:	429a      	cmp	r2, r3
   1090e:	dc0c      	bgt.n	1092a <_lv_area_is_on+0x3e>
   10910:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   10914:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   10918:	4298      	cmp	r0, r3
   1091a:	bfb4      	ite	lt
   1091c:	2000      	movlt	r0, #0
   1091e:	2001      	movge	r0, #1
   10920:	4770      	bx	lr
        return false;
   10922:	2000      	movs	r0, #0
   10924:	4770      	bx	lr
   10926:	2000      	movs	r0, #0
   10928:	4770      	bx	lr
   1092a:	2000      	movs	r0, #0
}
   1092c:	4770      	bx	lr
	...

00010930 <_lv_area_is_in>:
{
   10930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10934:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   10936:	f9b0 5000 	ldrsh.w	r5, [r0]
   1093a:	f9b1 3000 	ldrsh.w	r3, [r1]
   1093e:	42ab      	cmp	r3, r5
   10940:	dc14      	bgt.n	1096c <_lv_area_is_in+0x3c>
   10942:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   10946:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   1094a:	429c      	cmp	r4, r3
   1094c:	db14      	blt.n	10978 <_lv_area_is_in+0x48>
   1094e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
   10952:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   10956:	429c      	cmp	r4, r3
   10958:	dc10      	bgt.n	1097c <_lv_area_is_in+0x4c>
   1095a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   1095e:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
   10962:	42a3      	cmp	r3, r4
   10964:	bfcc      	ite	gt
   10966:	2300      	movgt	r3, #0
   10968:	2301      	movle	r3, #1
   1096a:	e000      	b.n	1096e <_lv_area_is_in+0x3e>
    bool is_in = false;
   1096c:	2300      	movs	r3, #0
    if(radius == 0) return is_in;
   1096e:	b93a      	cbnz	r2, 10980 <_lv_area_is_in+0x50>
}
   10970:	4618      	mov	r0, r3
   10972:	b002      	add	sp, #8
   10974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   10978:	2300      	movs	r3, #0
   1097a:	e7f8      	b.n	1096e <_lv_area_is_in+0x3e>
   1097c:	2300      	movs	r3, #0
   1097e:	e7f6      	b.n	1096e <_lv_area_is_in+0x3e>
   10980:	4617      	mov	r7, r2
   10982:	460c      	mov	r4, r1
   10984:	4606      	mov	r6, r0
    p.x = ain_p->x1;
   10986:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
   1098a:	8843      	ldrh	r3, [r0, #2]
   1098c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   10990:	a901      	add	r1, sp, #4
   10992:	4620      	mov	r0, r4
   10994:	4b13      	ldr	r3, [pc, #76]	; (109e4 <_lv_area_is_in+0xb4>)
   10996:	4798      	blx	r3
   10998:	4603      	mov	r3, r0
   1099a:	2800      	cmp	r0, #0
   1099c:	d0e8      	beq.n	10970 <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   1099e:	f9b6 8004 	ldrsh.w	r8, [r6, #4]
   109a2:	a902      	add	r1, sp, #8
   109a4:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   109a8:	463a      	mov	r2, r7
   109aa:	4620      	mov	r0, r4
   109ac:	4b0d      	ldr	r3, [pc, #52]	; (109e4 <_lv_area_is_in+0xb4>)
   109ae:	4798      	blx	r3
   109b0:	4603      	mov	r3, r0
   109b2:	2800      	cmp	r0, #0
   109b4:	d0dc      	beq.n	10970 <_lv_area_is_in+0x40>
    p.x = ain_p->x1;
   109b6:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y2;
   109ba:	88f3      	ldrh	r3, [r6, #6]
   109bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   109c0:	463a      	mov	r2, r7
   109c2:	a901      	add	r1, sp, #4
   109c4:	4620      	mov	r0, r4
   109c6:	4b07      	ldr	r3, [pc, #28]	; (109e4 <_lv_area_is_in+0xb4>)
   109c8:	4798      	blx	r3
   109ca:	4603      	mov	r3, r0
   109cc:	2800      	cmp	r0, #0
   109ce:	d0cf      	beq.n	10970 <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   109d0:	a902      	add	r1, sp, #8
   109d2:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   109d6:	463a      	mov	r2, r7
   109d8:	4620      	mov	r0, r4
   109da:	4b02      	ldr	r3, [pc, #8]	; (109e4 <_lv_area_is_in+0xb4>)
   109dc:	4798      	blx	r3
   109de:	4603      	mov	r3, r0
   109e0:	e7c6      	b.n	10970 <_lv_area_is_in+0x40>
   109e2:	bf00      	nop
   109e4:	0001077d 	.word	0x0001077d

000109e8 <_lv_area_align>:
{
   109e8:	b430      	push	{r4, r5}
    switch(align) {
   109ea:	2a14      	cmp	r2, #20
   109ec:	d83a      	bhi.n	10a64 <_lv_area_align+0x7c>
   109ee:	e8df f012 	tbh	[pc, r2, lsl #1]
   109f2:	0015      	.short	0x0015
   109f4:	00470043 	.word	0x00470043
   109f8:	0067005c 	.word	0x0067005c
   109fc:	008d0072 	.word	0x008d0072
   10a00:	00b3009e 	.word	0x00b3009e
   10a04:	00d600ce 	.word	0x00d600ce
   10a08:	00fc00ee 	.word	0x00fc00ee
   10a0c:	011c0104 	.word	0x011c0104
   10a10:	0132012a 	.word	0x0132012a
   10a14:	0158014a 	.word	0x0158014a
   10a18:	01780160 	.word	0x01780160
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10a1c:	8882      	ldrh	r2, [r0, #4]
   10a1e:	3201      	adds	r2, #1
   10a20:	8804      	ldrh	r4, [r0, #0]
   10a22:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10a24:	b212      	sxth	r2, r2
   10a26:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10a2a:	888a      	ldrh	r2, [r1, #4]
   10a2c:	3201      	adds	r2, #1
   10a2e:	880d      	ldrh	r5, [r1, #0]
   10a30:	1b52      	subs	r2, r2, r5
   10a32:	b212      	sxth	r2, r2
   10a34:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10a38:	1052      	asrs	r2, r2, #1
   10a3a:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10a3e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10a40:	88c2      	ldrh	r2, [r0, #6]
   10a42:	3201      	adds	r2, #1
   10a44:	8844      	ldrh	r4, [r0, #2]
   10a46:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10a48:	b212      	sxth	r2, r2
   10a4a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10a4e:	88ca      	ldrh	r2, [r1, #6]
   10a50:	3201      	adds	r2, #1
   10a52:	8849      	ldrh	r1, [r1, #2]
   10a54:	1a52      	subs	r2, r2, r1
   10a56:	b212      	sxth	r2, r2
   10a58:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10a5c:	1052      	asrs	r2, r2, #1
   10a5e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10a62:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   10a64:	881a      	ldrh	r2, [r3, #0]
   10a66:	8801      	ldrh	r1, [r0, #0]
   10a68:	440a      	add	r2, r1
   10a6a:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
   10a6c:	885a      	ldrh	r2, [r3, #2]
   10a6e:	8841      	ldrh	r1, [r0, #2]
   10a70:	440a      	add	r2, r1
   10a72:	805a      	strh	r2, [r3, #2]
}
   10a74:	bc30      	pop	{r4, r5}
   10a76:	4770      	bx	lr
            res->x = 0;
   10a78:	2200      	movs	r2, #0
   10a7a:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10a7c:	805a      	strh	r2, [r3, #2]
            break;
   10a7e:	e7f1      	b.n	10a64 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10a80:	8882      	ldrh	r2, [r0, #4]
   10a82:	3201      	adds	r2, #1
   10a84:	8804      	ldrh	r4, [r0, #0]
   10a86:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10a88:	b212      	sxth	r2, r2
   10a8a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10a8e:	888a      	ldrh	r2, [r1, #4]
   10a90:	3201      	adds	r2, #1
   10a92:	8809      	ldrh	r1, [r1, #0]
   10a94:	1a52      	subs	r2, r2, r1
   10a96:	b212      	sxth	r2, r2
   10a98:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10a9c:	1052      	asrs	r2, r2, #1
   10a9e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10aa2:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10aa4:	2200      	movs	r2, #0
   10aa6:	805a      	strh	r2, [r3, #2]
            break;
   10aa8:	e7dc      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10aaa:	8882      	ldrh	r2, [r0, #4]
   10aac:	888c      	ldrh	r4, [r1, #4]
   10aae:	1b12      	subs	r2, r2, r4
   10ab0:	8804      	ldrh	r4, [r0, #0]
   10ab2:	1b12      	subs	r2, r2, r4
   10ab4:	8809      	ldrh	r1, [r1, #0]
   10ab6:	440a      	add	r2, r1
   10ab8:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10aba:	2200      	movs	r2, #0
   10abc:	805a      	strh	r2, [r3, #2]
            break;
   10abe:	e7d1      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = 0;
   10ac0:	2200      	movs	r2, #0
   10ac2:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10ac4:	88c2      	ldrh	r2, [r0, #6]
   10ac6:	88cc      	ldrh	r4, [r1, #6]
   10ac8:	1b12      	subs	r2, r2, r4
   10aca:	8844      	ldrh	r4, [r0, #2]
   10acc:	1b12      	subs	r2, r2, r4
   10ace:	8849      	ldrh	r1, [r1, #2]
   10ad0:	440a      	add	r2, r1
   10ad2:	805a      	strh	r2, [r3, #2]
            break;
   10ad4:	e7c6      	b.n	10a64 <_lv_area_align+0x7c>
   10ad6:	8882      	ldrh	r2, [r0, #4]
   10ad8:	3201      	adds	r2, #1
   10ada:	8804      	ldrh	r4, [r0, #0]
   10adc:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10ade:	b212      	sxth	r2, r2
   10ae0:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10ae4:	888a      	ldrh	r2, [r1, #4]
   10ae6:	3201      	adds	r2, #1
   10ae8:	880d      	ldrh	r5, [r1, #0]
   10aea:	1b52      	subs	r2, r2, r5
   10aec:	b212      	sxth	r2, r2
   10aee:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10af2:	1052      	asrs	r2, r2, #1
   10af4:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10af8:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10afa:	88c2      	ldrh	r2, [r0, #6]
   10afc:	88cc      	ldrh	r4, [r1, #6]
   10afe:	1b12      	subs	r2, r2, r4
   10b00:	8844      	ldrh	r4, [r0, #2]
   10b02:	1b12      	subs	r2, r2, r4
   10b04:	8849      	ldrh	r1, [r1, #2]
   10b06:	440a      	add	r2, r1
   10b08:	805a      	strh	r2, [r3, #2]
            break;
   10b0a:	e7ab      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10b0c:	8882      	ldrh	r2, [r0, #4]
   10b0e:	888c      	ldrh	r4, [r1, #4]
   10b10:	1b12      	subs	r2, r2, r4
   10b12:	8804      	ldrh	r4, [r0, #0]
   10b14:	1b12      	subs	r2, r2, r4
   10b16:	880c      	ldrh	r4, [r1, #0]
   10b18:	4422      	add	r2, r4
   10b1a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10b1c:	88c2      	ldrh	r2, [r0, #6]
   10b1e:	88cc      	ldrh	r4, [r1, #6]
   10b20:	1b12      	subs	r2, r2, r4
   10b22:	8844      	ldrh	r4, [r0, #2]
   10b24:	1b12      	subs	r2, r2, r4
   10b26:	8849      	ldrh	r1, [r1, #2]
   10b28:	440a      	add	r2, r1
   10b2a:	805a      	strh	r2, [r3, #2]
            break;
   10b2c:	e79a      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = 0;
   10b2e:	2200      	movs	r2, #0
   10b30:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10b32:	88c2      	ldrh	r2, [r0, #6]
   10b34:	3201      	adds	r2, #1
   10b36:	8844      	ldrh	r4, [r0, #2]
   10b38:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10b3a:	b212      	sxth	r2, r2
   10b3c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10b40:	88ca      	ldrh	r2, [r1, #6]
   10b42:	3201      	adds	r2, #1
   10b44:	8849      	ldrh	r1, [r1, #2]
   10b46:	1a52      	subs	r2, r2, r1
   10b48:	b212      	sxth	r2, r2
   10b4a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10b4e:	1052      	asrs	r2, r2, #1
   10b50:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10b54:	805a      	strh	r2, [r3, #2]
            break;
   10b56:	e785      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10b58:	8882      	ldrh	r2, [r0, #4]
   10b5a:	888c      	ldrh	r4, [r1, #4]
   10b5c:	1b12      	subs	r2, r2, r4
   10b5e:	8804      	ldrh	r4, [r0, #0]
   10b60:	1b12      	subs	r2, r2, r4
   10b62:	880c      	ldrh	r4, [r1, #0]
   10b64:	4422      	add	r2, r4
   10b66:	801a      	strh	r2, [r3, #0]
   10b68:	88c2      	ldrh	r2, [r0, #6]
   10b6a:	3201      	adds	r2, #1
   10b6c:	8844      	ldrh	r4, [r0, #2]
   10b6e:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10b70:	b212      	sxth	r2, r2
   10b72:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10b76:	88ca      	ldrh	r2, [r1, #6]
   10b78:	3201      	adds	r2, #1
   10b7a:	8849      	ldrh	r1, [r1, #2]
   10b7c:	1a52      	subs	r2, r2, r1
   10b7e:	b212      	sxth	r2, r2
   10b80:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10b84:	1052      	asrs	r2, r2, #1
   10b86:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10b8a:	805a      	strh	r2, [r3, #2]
            break;
   10b8c:	e76a      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = 0;
   10b8e:	2200      	movs	r2, #0
   10b90:	801a      	strh	r2, [r3, #0]
   10b92:	88ca      	ldrh	r2, [r1, #6]
   10b94:	8849      	ldrh	r1, [r1, #2]
   10b96:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10b98:	43d2      	mvns	r2, r2
   10b9a:	805a      	strh	r2, [r3, #2]
            break;
   10b9c:	e762      	b.n	10a64 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10b9e:	8882      	ldrh	r2, [r0, #4]
   10ba0:	3201      	adds	r2, #1
   10ba2:	8804      	ldrh	r4, [r0, #0]
   10ba4:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10ba6:	b212      	sxth	r2, r2
   10ba8:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10bac:	888a      	ldrh	r2, [r1, #4]
   10bae:	3201      	adds	r2, #1
   10bb0:	880d      	ldrh	r5, [r1, #0]
   10bb2:	1b52      	subs	r2, r2, r5
   10bb4:	b212      	sxth	r2, r2
   10bb6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10bba:	1052      	asrs	r2, r2, #1
   10bbc:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10bc0:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10bc2:	88ca      	ldrh	r2, [r1, #6]
   10bc4:	8849      	ldrh	r1, [r1, #2]
   10bc6:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10bc8:	43d2      	mvns	r2, r2
   10bca:	805a      	strh	r2, [r3, #2]
            break;
   10bcc:	e74a      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10bce:	8882      	ldrh	r2, [r0, #4]
   10bd0:	888c      	ldrh	r4, [r1, #4]
   10bd2:	1b12      	subs	r2, r2, r4
   10bd4:	8804      	ldrh	r4, [r0, #0]
   10bd6:	1b12      	subs	r2, r2, r4
   10bd8:	880c      	ldrh	r4, [r1, #0]
   10bda:	4422      	add	r2, r4
   10bdc:	801a      	strh	r2, [r3, #0]
   10bde:	88ca      	ldrh	r2, [r1, #6]
   10be0:	8849      	ldrh	r1, [r1, #2]
   10be2:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10be4:	43d2      	mvns	r2, r2
   10be6:	805a      	strh	r2, [r3, #2]
            break;
   10be8:	e73c      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = 0;
   10bea:	2200      	movs	r2, #0
   10bec:	801a      	strh	r2, [r3, #0]
   10bee:	88c2      	ldrh	r2, [r0, #6]
   10bf0:	3201      	adds	r2, #1
   10bf2:	8841      	ldrh	r1, [r0, #2]
   10bf4:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   10bf6:	805a      	strh	r2, [r3, #2]
            break;
   10bf8:	e734      	b.n	10a64 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10bfa:	8882      	ldrh	r2, [r0, #4]
   10bfc:	3201      	adds	r2, #1
   10bfe:	8804      	ldrh	r4, [r0, #0]
   10c00:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   10c02:	b212      	sxth	r2, r2
   10c04:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10c08:	888a      	ldrh	r2, [r1, #4]
   10c0a:	3201      	adds	r2, #1
   10c0c:	8809      	ldrh	r1, [r1, #0]
   10c0e:	1a52      	subs	r2, r2, r1
   10c10:	b212      	sxth	r2, r2
   10c12:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10c16:	1052      	asrs	r2, r2, #1
   10c18:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10c1c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10c1e:	88c2      	ldrh	r2, [r0, #6]
   10c20:	3201      	adds	r2, #1
   10c22:	8841      	ldrh	r1, [r0, #2]
   10c24:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   10c26:	805a      	strh	r2, [r3, #2]
            break;
   10c28:	e71c      	b.n	10a64 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10c2a:	8882      	ldrh	r2, [r0, #4]
   10c2c:	888c      	ldrh	r4, [r1, #4]
   10c2e:	1b12      	subs	r2, r2, r4
   10c30:	8804      	ldrh	r4, [r0, #0]
   10c32:	1b12      	subs	r2, r2, r4
   10c34:	8809      	ldrh	r1, [r1, #0]
   10c36:	440a      	add	r2, r1
   10c38:	801a      	strh	r2, [r3, #0]
   10c3a:	88c2      	ldrh	r2, [r0, #6]
   10c3c:	3201      	adds	r2, #1
   10c3e:	8841      	ldrh	r1, [r0, #2]
   10c40:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   10c42:	805a      	strh	r2, [r3, #2]
            break;
   10c44:	e70e      	b.n	10a64 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10c46:	888a      	ldrh	r2, [r1, #4]
   10c48:	8809      	ldrh	r1, [r1, #0]
   10c4a:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
   10c4c:	43d2      	mvns	r2, r2
   10c4e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10c50:	2200      	movs	r2, #0
   10c52:	805a      	strh	r2, [r3, #2]
            break;
   10c54:	e706      	b.n	10a64 <_lv_area_align+0x7c>
   10c56:	888a      	ldrh	r2, [r1, #4]
   10c58:	880c      	ldrh	r4, [r1, #0]
   10c5a:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   10c5c:	43d2      	mvns	r2, r2
   10c5e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10c60:	88c2      	ldrh	r2, [r0, #6]
   10c62:	3201      	adds	r2, #1
   10c64:	8844      	ldrh	r4, [r0, #2]
   10c66:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10c68:	b212      	sxth	r2, r2
   10c6a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10c6e:	88ca      	ldrh	r2, [r1, #6]
   10c70:	3201      	adds	r2, #1
   10c72:	8849      	ldrh	r1, [r1, #2]
   10c74:	1a52      	subs	r2, r2, r1
   10c76:	b212      	sxth	r2, r2
   10c78:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10c7c:	1052      	asrs	r2, r2, #1
   10c7e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10c82:	805a      	strh	r2, [r3, #2]
            break;
   10c84:	e6ee      	b.n	10a64 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10c86:	888a      	ldrh	r2, [r1, #4]
   10c88:	880c      	ldrh	r4, [r1, #0]
   10c8a:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   10c8c:	43d2      	mvns	r2, r2
   10c8e:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10c90:	88c2      	ldrh	r2, [r0, #6]
   10c92:	88cc      	ldrh	r4, [r1, #6]
   10c94:	1b12      	subs	r2, r2, r4
   10c96:	8844      	ldrh	r4, [r0, #2]
   10c98:	1b12      	subs	r2, r2, r4
   10c9a:	8849      	ldrh	r1, [r1, #2]
   10c9c:	440a      	add	r2, r1
   10c9e:	805a      	strh	r2, [r3, #2]
            break;
   10ca0:	e6e0      	b.n	10a64 <_lv_area_align+0x7c>
   10ca2:	8882      	ldrh	r2, [r0, #4]
   10ca4:	3201      	adds	r2, #1
   10ca6:	8801      	ldrh	r1, [r0, #0]
   10ca8:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
   10caa:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10cac:	2200      	movs	r2, #0
   10cae:	805a      	strh	r2, [r3, #2]
            break;
   10cb0:	e6d8      	b.n	10a64 <_lv_area_align+0x7c>
   10cb2:	8882      	ldrh	r2, [r0, #4]
   10cb4:	3201      	adds	r2, #1
   10cb6:	8804      	ldrh	r4, [r0, #0]
   10cb8:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   10cba:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10cbc:	88c2      	ldrh	r2, [r0, #6]
   10cbe:	3201      	adds	r2, #1
   10cc0:	8844      	ldrh	r4, [r0, #2]
   10cc2:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10cc4:	b212      	sxth	r2, r2
   10cc6:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   10cca:	88ca      	ldrh	r2, [r1, #6]
   10ccc:	3201      	adds	r2, #1
   10cce:	8849      	ldrh	r1, [r1, #2]
   10cd0:	1a52      	subs	r2, r2, r1
   10cd2:	b212      	sxth	r2, r2
   10cd4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   10cd8:	1052      	asrs	r2, r2, #1
   10cda:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   10cde:	805a      	strh	r2, [r3, #2]
            break;
   10ce0:	e6c0      	b.n	10a64 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10ce2:	8882      	ldrh	r2, [r0, #4]
   10ce4:	3201      	adds	r2, #1
   10ce6:	8804      	ldrh	r4, [r0, #0]
   10ce8:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   10cea:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10cec:	88c2      	ldrh	r2, [r0, #6]
   10cee:	88cc      	ldrh	r4, [r1, #6]
   10cf0:	1b12      	subs	r2, r2, r4
   10cf2:	8844      	ldrh	r4, [r0, #2]
   10cf4:	1b12      	subs	r2, r2, r4
   10cf6:	8849      	ldrh	r1, [r1, #2]
   10cf8:	440a      	add	r2, r1
   10cfa:	805a      	strh	r2, [r3, #2]
            break;
   10cfc:	e6b2      	b.n	10a64 <_lv_area_align+0x7c>

00010cfe <lv_color_fill>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
   10cfe:	b430      	push	{r4, r5}
   10d00:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   10d02:	f010 0f03 	tst.w	r0, #3
        *buf = color;
   10d06:	bf1c      	itt	ne
   10d08:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
   10d0c:	f102 32ff 	addne.w	r2, r2, #4294967295
    }

    uint32_t c32 = color.full + (color.full << 16);
   10d10:	eb05 4105 	add.w	r1, r5, r5, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   10d14:	2a10      	cmp	r2, #16
   10d16:	d921      	bls.n	10d5c <lv_color_fill+0x5e>
   10d18:	f100 0320 	add.w	r3, r0, #32
   10d1c:	4614      	mov	r4, r2
        *buf32 = c32;
   10d1e:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
   10d22:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
   10d26:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
   10d2a:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
   10d2e:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
   10d32:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
   10d36:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
   10d3a:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
   10d3e:	3c10      	subs	r4, #16
   10d40:	3320      	adds	r3, #32
    while(px_num > 16) {
   10d42:	2c10      	cmp	r4, #16
   10d44:	d8eb      	bhi.n	10d1e <lv_color_fill+0x20>
   10d46:	f1a2 0311 	sub.w	r3, r2, #17
   10d4a:	091b      	lsrs	r3, r3, #4
   10d4c:	1c59      	adds	r1, r3, #1
   10d4e:	3a10      	subs	r2, #16
   10d50:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
   10d54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
        buf32++;
   10d58:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   10d5c:	b11a      	cbz	r2, 10d66 <lv_color_fill+0x68>
        *buf = color;
   10d5e:	f820 5b02 	strh.w	r5, [r0], #2
    while(px_num) {
   10d62:	3a01      	subs	r2, #1
   10d64:	d1fb      	bne.n	10d5e <lv_color_fill+0x60>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   10d66:	bc30      	pop	{r4, r5}
   10d68:	4770      	bx	lr

00010d6a <lv_color_lighten>:


lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
   10d6a:	b430      	push	{r4, r5}
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   10d6c:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
   10d70:	f1c1 04ff 	rsb	r4, r1, #255	; 0xff
   10d74:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   10d78:	fb04 5303 	mla	r3, r4, r3, r5
   10d7c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   10d80:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10d84:	f3c3 52c4 	ubfx	r2, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   10d88:	f3c0 1345 	ubfx	r3, r0, #5, #6
   10d8c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
   10d90:	fb04 1103 	mla	r1, r4, r3, r1
   10d94:	eb01 2301 	add.w	r3, r1, r1, lsl #8
   10d98:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
   10d9c:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   10da0:	f000 001f 	and.w	r0, r0, #31
   10da4:	fb04 5000 	mla	r0, r4, r0, r5
   10da8:	eb00 2300 	add.w	r3, r0, r0, lsl #8
   10dac:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
   10db0:	0dc3      	lsrs	r3, r0, #23
   10db2:	f04f 0000 	mov.w	r0, #0
   10db6:	f363 0004 	bfi	r0, r3, #0, #5
   10dba:	f361 104a 	bfi	r0, r1, #5, #6
   10dbe:	f362 20cf 	bfi	r0, r2, #11, #5
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}
   10dc2:	bc30      	pop	{r4, r5}
   10dc4:	4770      	bx	lr

00010dc6 <lv_color_darken>:


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
   10dc6:	b410      	push	{r4}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   10dc8:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   10dcc:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   10dd0:	fb01 f303 	mul.w	r3, r1, r3
   10dd4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   10dd8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   10ddc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   10de0:	f3c0 1245 	ubfx	r2, r0, #5, #6
   10de4:	fb01 f202 	mul.w	r2, r1, r2
   10de8:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   10dec:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   10df0:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   10df4:	f000 001f 	and.w	r0, r0, #31
   10df8:	fb01 f100 	mul.w	r1, r1, r0
   10dfc:	eb01 2001 	add.w	r0, r1, r1, lsl #8
   10e00:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   10e04:	0dc9      	lsrs	r1, r1, #23
   10e06:	f04f 0000 	mov.w	r0, #0
   10e0a:	f361 0004 	bfi	r0, r1, #0, #5
   10e0e:	f362 104a 	bfi	r0, r2, #5, #6
   10e12:	f363 20cf 	bfi	r0, r3, #11, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
   10e16:	f85d 4b04 	ldr.w	r4, [sp], #4
   10e1a:	4770      	bx	lr

00010e1c <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
   10e1c:	1c42      	adds	r2, r0, #1

    while(*path != '\0') {
   10e1e:	7843      	ldrb	r3, [r0, #1]
   10e20:	b91b      	cbnz	r3, 10e2a <lv_fs_get_real_path+0xe>
   10e22:	e008      	b.n	10e36 <lv_fs_get_real_path+0x1a>
   10e24:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   10e28:	b12b      	cbz	r3, 10e36 <lv_fs_get_real_path+0x1a>
        if(*path == ':' || *path == '\\' || *path == '/') {
   10e2a:	2b3a      	cmp	r3, #58	; 0x3a
   10e2c:	d0fa      	beq.n	10e24 <lv_fs_get_real_path+0x8>
   10e2e:	2b5c      	cmp	r3, #92	; 0x5c
   10e30:	d0f8      	beq.n	10e24 <lv_fs_get_real_path+0x8>
   10e32:	2b2f      	cmp	r3, #47	; 0x2f
   10e34:	d0f6      	beq.n	10e24 <lv_fs_get_real_path+0x8>
            break;
        }
    }

    return path;
}
   10e36:	4610      	mov	r0, r2
   10e38:	4770      	bx	lr
	...

00010e3c <_lv_fs_init>:
{
   10e3c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
   10e3e:	2144      	movs	r1, #68	; 0x44
   10e40:	4801      	ldr	r0, [pc, #4]	; (10e48 <_lv_fs_init+0xc>)
   10e42:	4b02      	ldr	r3, [pc, #8]	; (10e4c <_lv_fs_init+0x10>)
   10e44:	4798      	blx	r3
   10e46:	bd08      	pop	{r3, pc}
   10e48:	2000ad44 	.word	0x2000ad44
   10e4c:	0001109d 	.word	0x0001109d

00010e50 <lv_fs_close>:
{
   10e50:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   10e52:	6843      	ldr	r3, [r0, #4]
   10e54:	b173      	cbz	r3, 10e74 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
   10e56:	691a      	ldr	r2, [r3, #16]
   10e58:	b172      	cbz	r2, 10e78 <lv_fs_close+0x28>
   10e5a:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
   10e5c:	6801      	ldr	r1, [r0, #0]
   10e5e:	4618      	mov	r0, r3
   10e60:	4790      	blx	r2
   10e62:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
   10e64:	6820      	ldr	r0, [r4, #0]
   10e66:	4b05      	ldr	r3, [pc, #20]	; (10e7c <lv_fs_close+0x2c>)
   10e68:	4798      	blx	r3
    file_p->file_d = NULL;
   10e6a:	2300      	movs	r3, #0
   10e6c:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
   10e6e:	6063      	str	r3, [r4, #4]
}
   10e70:	4628      	mov	r0, r5
   10e72:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   10e74:	250b      	movs	r5, #11
   10e76:	e7fb      	b.n	10e70 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
   10e78:	2509      	movs	r5, #9
   10e7a:	e7f9      	b.n	10e70 <lv_fs_close+0x20>
   10e7c:	000115fd 	.word	0x000115fd

00010e80 <lv_fs_read>:
{
   10e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e82:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
   10e84:	461e      	mov	r6, r3
   10e86:	b10b      	cbz	r3, 10e8c <lv_fs_read+0xc>
   10e88:	2300      	movs	r3, #0
   10e8a:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   10e8c:	6845      	ldr	r5, [r0, #4]
   10e8e:	b18d      	cbz	r5, 10eb4 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   10e90:	69af      	ldr	r7, [r5, #24]
   10e92:	b18f      	cbz	r7, 10eb8 <lv_fs_read+0x38>
   10e94:	4613      	mov	r3, r2
   10e96:	460a      	mov	r2, r1
   10e98:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
   10e9a:	a804      	add	r0, sp, #16
   10e9c:	2100      	movs	r1, #0
   10e9e:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
   10ea2:	6821      	ldr	r1, [r4, #0]
   10ea4:	9000      	str	r0, [sp, #0]
   10ea6:	4628      	mov	r0, r5
   10ea8:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
   10eaa:	b10e      	cbz	r6, 10eb0 <lv_fs_read+0x30>
   10eac:	9b03      	ldr	r3, [sp, #12]
   10eae:	6033      	str	r3, [r6, #0]
}
   10eb0:	b005      	add	sp, #20
   10eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   10eb4:	200b      	movs	r0, #11
   10eb6:	e7fb      	b.n	10eb0 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   10eb8:	2009      	movs	r0, #9
   10eba:	e7f9      	b.n	10eb0 <lv_fs_read+0x30>

00010ebc <lv_fs_seek>:
{
   10ebc:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   10ebe:	6844      	ldr	r4, [r0, #4]
   10ec0:	b134      	cbz	r4, 10ed0 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
   10ec2:	6a25      	ldr	r5, [r4, #32]
   10ec4:	b135      	cbz	r5, 10ed4 <lv_fs_seek+0x18>
   10ec6:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
   10ec8:	6801      	ldr	r1, [r0, #0]
   10eca:	4620      	mov	r0, r4
   10ecc:	47a8      	blx	r5
    return res;
   10ece:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   10ed0:	200b      	movs	r0, #11
   10ed2:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
   10ed4:	2009      	movs	r0, #9
}
   10ed6:	bd38      	pop	{r3, r4, r5, pc}

00010ed8 <lv_fs_get_drv>:
{
   10ed8:	b570      	push	{r4, r5, r6, lr}
   10eda:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   10edc:	4809      	ldr	r0, [pc, #36]	; (10f04 <lv_fs_get_drv+0x2c>)
   10ede:	4b0a      	ldr	r3, [pc, #40]	; (10f08 <lv_fs_get_drv+0x30>)
   10ee0:	4798      	blx	r3
   10ee2:	4601      	mov	r1, r0
   10ee4:	b158      	cbz	r0, 10efe <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   10ee6:	7803      	ldrb	r3, [r0, #0]
   10ee8:	42a3      	cmp	r3, r4
   10eea:	d008      	beq.n	10efe <lv_fs_get_drv+0x26>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   10eec:	4e05      	ldr	r6, [pc, #20]	; (10f04 <lv_fs_get_drv+0x2c>)
   10eee:	4d07      	ldr	r5, [pc, #28]	; (10f0c <lv_fs_get_drv+0x34>)
   10ef0:	4630      	mov	r0, r6
   10ef2:	47a8      	blx	r5
   10ef4:	4601      	mov	r1, r0
   10ef6:	b110      	cbz	r0, 10efe <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   10ef8:	780b      	ldrb	r3, [r1, #0]
   10efa:	42a3      	cmp	r3, r4
   10efc:	d1f8      	bne.n	10ef0 <lv_fs_get_drv+0x18>
}
   10efe:	4608      	mov	r0, r1
   10f00:	bd70      	pop	{r4, r5, r6, pc}
   10f02:	bf00      	nop
   10f04:	2000ad44 	.word	0x2000ad44
   10f08:	0001114d 	.word	0x0001114d
   10f0c:	00011161 	.word	0x00011161

00010f10 <lv_fs_open>:
{
   10f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    file_p->drv    = NULL;
   10f14:	2300      	movs	r3, #0
   10f16:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
   10f18:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   10f1a:	2900      	cmp	r1, #0
   10f1c:	d03e      	beq.n	10f9c <lv_fs_open+0x8c>
   10f1e:	460d      	mov	r5, r1
   10f20:	4691      	mov	r9, r2
   10f22:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
   10f24:	7808      	ldrb	r0, [r1, #0]
   10f26:	4b20      	ldr	r3, [pc, #128]	; (10fa8 <lv_fs_open+0x98>)
   10f28:	4798      	blx	r3
   10f2a:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
   10f2c:	b140      	cbz	r0, 10f40 <lv_fs_open+0x30>
    if(file_p->drv->ready_cb != NULL) {
   10f2e:	6883      	ldr	r3, [r0, #8]
   10f30:	b153      	cbz	r3, 10f48 <lv_fs_open+0x38>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
   10f32:	4798      	blx	r3
   10f34:	b940      	cbnz	r0, 10f48 <lv_fs_open+0x38>
            file_p->drv    = NULL;
   10f36:	2300      	movs	r3, #0
   10f38:	6063      	str	r3, [r4, #4]
            file_p->file_d = NULL;
   10f3a:	6023      	str	r3, [r4, #0]
            return LV_FS_RES_HW_ERR;
   10f3c:	2501      	movs	r5, #1
   10f3e:	e02e      	b.n	10f9e <lv_fs_open+0x8e>
        file_p->file_d = NULL;
   10f40:	2300      	movs	r3, #0
   10f42:	6023      	str	r3, [r4, #0]
        return LV_FS_RES_NOT_EX;
   10f44:	2503      	movs	r5, #3
   10f46:	e02a      	b.n	10f9e <lv_fs_open+0x8e>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
   10f48:	6863      	ldr	r3, [r4, #4]
   10f4a:	8858      	ldrh	r0, [r3, #2]
   10f4c:	4b17      	ldr	r3, [pc, #92]	; (10fac <lv_fs_open+0x9c>)
   10f4e:	4798      	blx	r3
   10f50:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
   10f52:	4b17      	ldr	r3, [pc, #92]	; (10fb0 <lv_fs_open+0xa0>)
   10f54:	4798      	blx	r3
   10f56:	b128      	cbz	r0, 10f64 <lv_fs_open+0x54>
    if(file_p->file_d == NULL) {
   10f58:	6826      	ldr	r6, [r4, #0]
   10f5a:	b94e      	cbnz	r6, 10f70 <lv_fs_open+0x60>
        file_p->drv = NULL;
   10f5c:	2300      	movs	r3, #0
   10f5e:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
   10f60:	250a      	movs	r5, #10
   10f62:	e01c      	b.n	10f9e <lv_fs_open+0x8e>
    LV_ASSERT_MEM(file_p->file_d);
   10f64:	6822      	ldr	r2, [r4, #0]
   10f66:	2300      	movs	r3, #0
   10f68:	4812      	ldr	r0, [pc, #72]	; (10fb4 <lv_fs_open+0xa4>)
   10f6a:	4913      	ldr	r1, [pc, #76]	; (10fb8 <lv_fs_open+0xa8>)
   10f6c:	4788      	blx	r1
   10f6e:	e7fe      	b.n	10f6e <lv_fs_open+0x5e>
    if(file_p->drv->open_cb == NULL) {
   10f70:	f8d4 8004 	ldr.w	r8, [r4, #4]
   10f74:	f8d8 700c 	ldr.w	r7, [r8, #12]
   10f78:	b1a7      	cbz	r7, 10fa4 <lv_fs_open+0x94>
    const char * real_path = lv_fs_get_real_path(path);
   10f7a:	4628      	mov	r0, r5
   10f7c:	4b0f      	ldr	r3, [pc, #60]	; (10fbc <lv_fs_open+0xac>)
   10f7e:	4798      	blx	r3
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
   10f80:	464b      	mov	r3, r9
   10f82:	4602      	mov	r2, r0
   10f84:	4631      	mov	r1, r6
   10f86:	4640      	mov	r0, r8
   10f88:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
   10f8a:	4605      	mov	r5, r0
   10f8c:	b138      	cbz	r0, 10f9e <lv_fs_open+0x8e>
        lv_mem_free(file_p->file_d);
   10f8e:	6820      	ldr	r0, [r4, #0]
   10f90:	4b0b      	ldr	r3, [pc, #44]	; (10fc0 <lv_fs_open+0xb0>)
   10f92:	4798      	blx	r3
        file_p->file_d = NULL;
   10f94:	2300      	movs	r3, #0
   10f96:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
   10f98:	6063      	str	r3, [r4, #4]
   10f9a:	e000      	b.n	10f9e <lv_fs_open+0x8e>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   10f9c:	250b      	movs	r5, #11
}
   10f9e:	4628      	mov	r0, r5
   10fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return LV_FS_RES_NOT_IMP;
   10fa4:	2509      	movs	r5, #9
   10fa6:	e7fa      	b.n	10f9e <lv_fs_open+0x8e>
   10fa8:	00010ed9 	.word	0x00010ed9
   10fac:	00011539 	.word	0x00011539
   10fb0:	0000291f 	.word	0x0000291f
   10fb4:	00017604 	.word	0x00017604
   10fb8:	00002929 	.word	0x00002929
   10fbc:	00010e1d 	.word	0x00010e1d
   10fc0:	000115fd 	.word	0x000115fd

00010fc4 <lv_fs_get_ext>:
{
   10fc4:	b510      	push	{r4, lr}
   10fc6:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
   10fc8:	4b12      	ldr	r3, [pc, #72]	; (11014 <lv_fs_get_ext+0x50>)
   10fca:	4798      	blx	r3
   10fcc:	b1c8      	cbz	r0, 11002 <lv_fs_get_ext+0x3e>
   10fce:	4602      	mov	r2, r0
        if(fn[i] == '.') {
   10fd0:	1821      	adds	r1, r4, r0
   10fd2:	5c23      	ldrb	r3, [r4, r0]
   10fd4:	2b2e      	cmp	r3, #46	; 0x2e
   10fd6:	d00f      	beq.n	10ff8 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   10fd8:	2b2f      	cmp	r3, #47	; 0x2f
   10fda:	d014      	beq.n	11006 <lv_fs_get_ext+0x42>
   10fdc:	2b5c      	cmp	r3, #92	; 0x5c
   10fde:	d014      	beq.n	1100a <lv_fs_get_ext+0x46>
    for(i = strlen(fn); i > 0; i--) {
   10fe0:	3a01      	subs	r2, #1
   10fe2:	d00c      	beq.n	10ffe <lv_fs_get_ext+0x3a>
        if(fn[i] == '.') {
   10fe4:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   10fe8:	2b2e      	cmp	r3, #46	; 0x2e
   10fea:	d005      	beq.n	10ff8 <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   10fec:	2b2f      	cmp	r3, #47	; 0x2f
   10fee:	d00e      	beq.n	1100e <lv_fs_get_ext+0x4a>
   10ff0:	2b5c      	cmp	r3, #92	; 0x5c
   10ff2:	d1f5      	bne.n	10fe0 <lv_fs_get_ext+0x1c>
            return ""; /*No extension if a '\' or '/' found*/
   10ff4:	4808      	ldr	r0, [pc, #32]	; (11018 <lv_fs_get_ext+0x54>)
}
   10ff6:	bd10      	pop	{r4, pc}
            return &fn[i + 1];
   10ff8:	3201      	adds	r2, #1
   10ffa:	18a0      	adds	r0, r4, r2
   10ffc:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
   10ffe:	4806      	ldr	r0, [pc, #24]	; (11018 <lv_fs_get_ext+0x54>)
   11000:	bd10      	pop	{r4, pc}
   11002:	4805      	ldr	r0, [pc, #20]	; (11018 <lv_fs_get_ext+0x54>)
   11004:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
   11006:	4804      	ldr	r0, [pc, #16]	; (11018 <lv_fs_get_ext+0x54>)
   11008:	bd10      	pop	{r4, pc}
   1100a:	4803      	ldr	r0, [pc, #12]	; (11018 <lv_fs_get_ext+0x54>)
   1100c:	bd10      	pop	{r4, pc}
   1100e:	4802      	ldr	r0, [pc, #8]	; (11018 <lv_fs_get_ext+0x54>)
   11010:	bd10      	pop	{r4, pc}
   11012:	bf00      	nop
   11014:	0001748f 	.word	0x0001748f
   11018:	00017520 	.word	0x00017520

0001101c <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
   1101c:	b510      	push	{r4, lr}
   1101e:	b082      	sub	sp, #8
   11020:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   11022:	b181      	cbz	r1, 11046 <node_set_next+0x2a>
   11024:	460c      	mov	r4, r1

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   11026:	b182      	cbz	r2, 1104a <node_set_next+0x2e>
        _lv_memcpy_small(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   11028:	6803      	ldr	r3, [r0, #0]
   1102a:	3304      	adds	r3, #4
   1102c:	18ca      	adds	r2, r1, r3
   1102e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   11032:	54e1      	strb	r1, [r4, r3]
   11034:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11038:	7053      	strb	r3, [r2, #1]
   1103a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1103e:	7093      	strb	r3, [r2, #2]
   11040:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11044:	70d3      	strb	r3, [r2, #3]
    else
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
}
   11046:	b002      	add	sp, #8
   11048:	bd10      	pop	{r4, pc}
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
   1104a:	6800      	ldr	r0, [r0, #0]
   1104c:	3004      	adds	r0, #4
   1104e:	2104      	movs	r1, #4
   11050:	4420      	add	r0, r4
   11052:	4b01      	ldr	r3, [pc, #4]	; (11058 <node_set_next+0x3c>)
   11054:	4798      	blx	r3
   11056:	e7f6      	b.n	11046 <node_set_next+0x2a>
   11058:	00011bdb 	.word	0x00011bdb

0001105c <node_set_prev>:
{
   1105c:	b500      	push	{lr}
   1105e:	b083      	sub	sp, #12
   11060:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   11062:	b181      	cbz	r1, 11086 <node_set_prev+0x2a>
   11064:	460a      	mov	r2, r1
    if(prev)
   11066:	9b01      	ldr	r3, [sp, #4]
   11068:	b183      	cbz	r3, 1108c <node_set_prev+0x30>
        _lv_memcpy_small(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   1106a:	6801      	ldr	r1, [r0, #0]
   1106c:	1853      	adds	r3, r2, r1
   1106e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   11072:	5450      	strb	r0, [r2, r1]
   11074:	f89d 2005 	ldrb.w	r2, [sp, #5]
   11078:	705a      	strb	r2, [r3, #1]
   1107a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1107e:	709a      	strb	r2, [r3, #2]
   11080:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11084:	70da      	strb	r2, [r3, #3]
}
   11086:	b003      	add	sp, #12
   11088:	f85d fb04 	ldr.w	pc, [sp], #4
        _lv_memset_00(act + LL_PREV_P_OFFSET(ll_p), node_p_size);
   1108c:	6800      	ldr	r0, [r0, #0]
   1108e:	2104      	movs	r1, #4
   11090:	4410      	add	r0, r2
   11092:	4b01      	ldr	r3, [pc, #4]	; (11098 <node_set_prev+0x3c>)
   11094:	4798      	blx	r3
   11096:	e7f6      	b.n	11086 <node_set_prev+0x2a>
   11098:	00011bdb 	.word	0x00011bdb

0001109c <_lv_ll_init>:
    ll_p->head = NULL;
   1109c:	2300      	movs	r3, #0
   1109e:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
   110a0:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
   110a2:	f011 0f03 	tst.w	r1, #3
        node_size = node_size & (~0x3);
   110a6:	bf1c      	itt	ne
   110a8:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
   110ac:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
   110ae:	6001      	str	r1, [r0, #0]
   110b0:	4770      	bx	lr
	...

000110b4 <_lv_ll_ins_head>:
{
   110b4:	b538      	push	{r3, r4, r5, lr}
   110b6:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   110b8:	6800      	ldr	r0, [r0, #0]
   110ba:	3008      	adds	r0, #8
   110bc:	4b0d      	ldr	r3, [pc, #52]	; (110f4 <_lv_ll_ins_head+0x40>)
   110be:	4798      	blx	r3
    if(n_new != NULL) {
   110c0:	4605      	mov	r5, r0
   110c2:	b190      	cbz	r0, 110ea <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   110c4:	2200      	movs	r2, #0
   110c6:	4601      	mov	r1, r0
   110c8:	4620      	mov	r0, r4
   110ca:	4b0b      	ldr	r3, [pc, #44]	; (110f8 <_lv_ll_ins_head+0x44>)
   110cc:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   110ce:	6862      	ldr	r2, [r4, #4]
   110d0:	4629      	mov	r1, r5
   110d2:	4620      	mov	r0, r4
   110d4:	4b09      	ldr	r3, [pc, #36]	; (110fc <_lv_ll_ins_head+0x48>)
   110d6:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   110d8:	6861      	ldr	r1, [r4, #4]
   110da:	b119      	cbz	r1, 110e4 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
   110dc:	462a      	mov	r2, r5
   110de:	4620      	mov	r0, r4
   110e0:	4b05      	ldr	r3, [pc, #20]	; (110f8 <_lv_ll_ins_head+0x44>)
   110e2:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   110e4:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   110e6:	68a3      	ldr	r3, [r4, #8]
   110e8:	b10b      	cbz	r3, 110ee <_lv_ll_ins_head+0x3a>
}
   110ea:	4628      	mov	r0, r5
   110ec:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
   110ee:	60a5      	str	r5, [r4, #8]
   110f0:	e7fb      	b.n	110ea <_lv_ll_ins_head+0x36>
   110f2:	bf00      	nop
   110f4:	00011539 	.word	0x00011539
   110f8:	0001105d 	.word	0x0001105d
   110fc:	0001101d 	.word	0x0001101d

00011100 <_lv_ll_ins_tail>:
{
   11100:	b538      	push	{r3, r4, r5, lr}
   11102:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11104:	6800      	ldr	r0, [r0, #0]
   11106:	3008      	adds	r0, #8
   11108:	4b0d      	ldr	r3, [pc, #52]	; (11140 <_lv_ll_ins_tail+0x40>)
   1110a:	4798      	blx	r3
    if(n_new != NULL) {
   1110c:	4605      	mov	r5, r0
   1110e:	b190      	cbz	r0, 11136 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   11110:	2200      	movs	r2, #0
   11112:	4601      	mov	r1, r0
   11114:	4620      	mov	r0, r4
   11116:	4b0b      	ldr	r3, [pc, #44]	; (11144 <_lv_ll_ins_tail+0x44>)
   11118:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   1111a:	68a2      	ldr	r2, [r4, #8]
   1111c:	4629      	mov	r1, r5
   1111e:	4620      	mov	r0, r4
   11120:	4b09      	ldr	r3, [pc, #36]	; (11148 <_lv_ll_ins_tail+0x48>)
   11122:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   11124:	68a1      	ldr	r1, [r4, #8]
   11126:	b119      	cbz	r1, 11130 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
   11128:	462a      	mov	r2, r5
   1112a:	4620      	mov	r0, r4
   1112c:	4b05      	ldr	r3, [pc, #20]	; (11144 <_lv_ll_ins_tail+0x44>)
   1112e:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   11130:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   11132:	6863      	ldr	r3, [r4, #4]
   11134:	b10b      	cbz	r3, 1113a <_lv_ll_ins_tail+0x3a>
}
   11136:	4628      	mov	r0, r5
   11138:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
   1113a:	6065      	str	r5, [r4, #4]
   1113c:	e7fb      	b.n	11136 <_lv_ll_ins_tail+0x36>
   1113e:	bf00      	nop
   11140:	00011539 	.word	0x00011539
   11144:	0001101d 	.word	0x0001101d
   11148:	0001105d 	.word	0x0001105d

0001114c <_lv_ll_get_head>:
    if(ll_p != NULL) {
   1114c:	b108      	cbz	r0, 11152 <_lv_ll_get_head+0x6>
        head = ll_p->head;
   1114e:	6840      	ldr	r0, [r0, #4]
   11150:	4770      	bx	lr
    void * head = NULL;
   11152:	2000      	movs	r0, #0
}
   11154:	4770      	bx	lr

00011156 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   11156:	b108      	cbz	r0, 1115c <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
   11158:	6880      	ldr	r0, [r0, #8]
   1115a:	4770      	bx	lr
    void * tail = NULL;
   1115c:	2000      	movs	r0, #0
}
   1115e:	4770      	bx	lr

00011160 <_lv_ll_get_next>:
{
   11160:	b082      	sub	sp, #8
    void * next = NULL;
   11162:	2300      	movs	r3, #0
   11164:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   11166:	b170      	cbz	r0, 11186 <_lv_ll_get_next+0x26>
        _lv_memcpy_small(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   11168:	6803      	ldr	r3, [r0, #0]
   1116a:	3304      	adds	r3, #4
   1116c:	18ca      	adds	r2, r1, r3
   1116e:	5ccb      	ldrb	r3, [r1, r3]
   11170:	f88d 3004 	strb.w	r3, [sp, #4]
   11174:	7853      	ldrb	r3, [r2, #1]
   11176:	f88d 3005 	strb.w	r3, [sp, #5]
   1117a:	7893      	ldrb	r3, [r2, #2]
   1117c:	f88d 3006 	strb.w	r3, [sp, #6]
   11180:	78d3      	ldrb	r3, [r2, #3]
   11182:	f88d 3007 	strb.w	r3, [sp, #7]
}
   11186:	9801      	ldr	r0, [sp, #4]
   11188:	b002      	add	sp, #8
   1118a:	4770      	bx	lr

0001118c <_lv_ll_get_prev>:
{
   1118c:	b082      	sub	sp, #8
    void * prev = NULL;
   1118e:	2300      	movs	r3, #0
   11190:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   11192:	b168      	cbz	r0, 111b0 <_lv_ll_get_prev+0x24>
        _lv_memcpy_small(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   11194:	6802      	ldr	r2, [r0, #0]
   11196:	188b      	adds	r3, r1, r2
   11198:	5c8a      	ldrb	r2, [r1, r2]
   1119a:	f88d 2004 	strb.w	r2, [sp, #4]
   1119e:	785a      	ldrb	r2, [r3, #1]
   111a0:	f88d 2005 	strb.w	r2, [sp, #5]
   111a4:	789a      	ldrb	r2, [r3, #2]
   111a6:	f88d 2006 	strb.w	r2, [sp, #6]
   111aa:	78db      	ldrb	r3, [r3, #3]
   111ac:	f88d 3007 	strb.w	r3, [sp, #7]
}
   111b0:	9801      	ldr	r0, [sp, #4]
   111b2:	b002      	add	sp, #8
   111b4:	4770      	bx	lr
	...

000111b8 <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
   111b8:	b360      	cbz	r0, 11214 <_lv_ll_ins_prev+0x5c>
{
   111ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111be:	4604      	mov	r4, r0
    if(NULL == ll_p || NULL == n_act) return NULL;
   111c0:	b351      	cbz	r1, 11218 <_lv_ll_ins_prev+0x60>
   111c2:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
   111c4:	6843      	ldr	r3, [r0, #4]
   111c6:	4299      	cmp	r1, r3
   111c8:	d020      	beq.n	1120c <_lv_ll_ins_prev+0x54>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   111ca:	6800      	ldr	r0, [r0, #0]
   111cc:	3008      	adds	r0, #8
   111ce:	4b15      	ldr	r3, [pc, #84]	; (11224 <_lv_ll_ins_prev+0x6c>)
   111d0:	4798      	blx	r3
        if(n_new == NULL) return NULL;
   111d2:	4606      	mov	r6, r0
   111d4:	b318      	cbz	r0, 1121e <_lv_ll_ins_prev+0x66>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   111d6:	4629      	mov	r1, r5
   111d8:	4620      	mov	r0, r4
   111da:	4b13      	ldr	r3, [pc, #76]	; (11228 <_lv_ll_ins_prev+0x70>)
   111dc:	4798      	blx	r3
   111de:	4680      	mov	r8, r0
        node_set_next(ll_p, n_prev, n_new);
   111e0:	4632      	mov	r2, r6
   111e2:	4601      	mov	r1, r0
   111e4:	4620      	mov	r0, r4
   111e6:	4f11      	ldr	r7, [pc, #68]	; (1122c <_lv_ll_ins_prev+0x74>)
   111e8:	47b8      	blx	r7
        node_set_prev(ll_p, n_new, n_prev);
   111ea:	4642      	mov	r2, r8
   111ec:	4631      	mov	r1, r6
   111ee:	4620      	mov	r0, r4
   111f0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 11234 <_lv_ll_ins_prev+0x7c>
   111f4:	47c0      	blx	r8
        node_set_prev(ll_p, n_act, n_new);
   111f6:	4632      	mov	r2, r6
   111f8:	4629      	mov	r1, r5
   111fa:	4620      	mov	r0, r4
   111fc:	47c0      	blx	r8
        node_set_next(ll_p, n_new, n_act);
   111fe:	462a      	mov	r2, r5
   11200:	4631      	mov	r1, r6
   11202:	4620      	mov	r0, r4
   11204:	47b8      	blx	r7
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   11206:	4630      	mov	r0, r6
   11208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
   1120c:	4b08      	ldr	r3, [pc, #32]	; (11230 <_lv_ll_ins_prev+0x78>)
   1120e:	4798      	blx	r3
   11210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
   11214:	2000      	movs	r0, #0
   11216:	4770      	bx	lr
   11218:	4608      	mov	r0, r1
   1121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
   1121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11222:	bf00      	nop
   11224:	00011539 	.word	0x00011539
   11228:	0001118d 	.word	0x0001118d
   1122c:	0001101d 	.word	0x0001101d
   11230:	000110b5 	.word	0x000110b5
   11234:	0001105d 	.word	0x0001105d

00011238 <_lv_ll_remove>:
{
   11238:	b570      	push	{r4, r5, r6, lr}
   1123a:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   1123c:	4604      	mov	r4, r0
   1123e:	b350      	cbz	r0, 11296 <_lv_ll_remove+0x5e>
    if(_lv_ll_get_head(ll_p) == node_p) {
   11240:	6843      	ldr	r3, [r0, #4]
   11242:	4299      	cmp	r1, r3
   11244:	d029      	beq.n	1129a <_lv_ll_remove+0x62>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   11246:	6883      	ldr	r3, [r0, #8]
   11248:	4299      	cmp	r1, r3
   1124a:	d017      	beq.n	1127c <_lv_ll_remove+0x44>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   1124c:	4629      	mov	r1, r5
   1124e:	4620      	mov	r0, r4
   11250:	4b18      	ldr	r3, [pc, #96]	; (112b4 <_lv_ll_remove+0x7c>)
   11252:	4798      	blx	r3
   11254:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   11256:	4629      	mov	r1, r5
   11258:	4620      	mov	r0, r4
   1125a:	4b17      	ldr	r3, [pc, #92]	; (112b8 <_lv_ll_remove+0x80>)
   1125c:	4798      	blx	r3
   1125e:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   11260:	4602      	mov	r2, r0
   11262:	4631      	mov	r1, r6
   11264:	4620      	mov	r0, r4
   11266:	4b15      	ldr	r3, [pc, #84]	; (112bc <_lv_ll_remove+0x84>)
   11268:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
   1126a:	4632      	mov	r2, r6
   1126c:	4629      	mov	r1, r5
   1126e:	4620      	mov	r0, r4
   11270:	4b13      	ldr	r3, [pc, #76]	; (112c0 <_lv_ll_remove+0x88>)
   11272:	4798      	blx	r3
}
   11274:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
   11276:	2300      	movs	r3, #0
   11278:	60a3      	str	r3, [r4, #8]
   1127a:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   1127c:	4b0d      	ldr	r3, [pc, #52]	; (112b4 <_lv_ll_remove+0x7c>)
   1127e:	4798      	blx	r3
   11280:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   11282:	b128      	cbz	r0, 11290 <_lv_ll_remove+0x58>
            node_set_next(ll_p, ll_p->tail, NULL);
   11284:	2200      	movs	r2, #0
   11286:	4601      	mov	r1, r0
   11288:	4620      	mov	r0, r4
   1128a:	4b0c      	ldr	r3, [pc, #48]	; (112bc <_lv_ll_remove+0x84>)
   1128c:	4798      	blx	r3
   1128e:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
   11290:	2300      	movs	r3, #0
   11292:	6063      	str	r3, [r4, #4]
   11294:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_ll_get_head(ll_p) == node_p) {
   11296:	2900      	cmp	r1, #0
   11298:	d1d8      	bne.n	1124c <_lv_ll_remove+0x14>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   1129a:	4629      	mov	r1, r5
   1129c:	4620      	mov	r0, r4
   1129e:	4b06      	ldr	r3, [pc, #24]	; (112b8 <_lv_ll_remove+0x80>)
   112a0:	4798      	blx	r3
   112a2:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   112a4:	2800      	cmp	r0, #0
   112a6:	d0e6      	beq.n	11276 <_lv_ll_remove+0x3e>
            node_set_prev(ll_p, ll_p->head, NULL);
   112a8:	2200      	movs	r2, #0
   112aa:	4601      	mov	r1, r0
   112ac:	4620      	mov	r0, r4
   112ae:	4b04      	ldr	r3, [pc, #16]	; (112c0 <_lv_ll_remove+0x88>)
   112b0:	4798      	blx	r3
   112b2:	bd70      	pop	{r4, r5, r6, pc}
   112b4:	0001118d 	.word	0x0001118d
   112b8:	00011161 	.word	0x00011161
   112bc:	0001101d 	.word	0x0001101d
   112c0:	0001105d 	.word	0x0001105d

000112c4 <_lv_ll_chg_list>:
{
   112c4:	b570      	push	{r4, r5, r6, lr}
   112c6:	460c      	mov	r4, r1
   112c8:	4615      	mov	r5, r2
   112ca:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
   112cc:	4611      	mov	r1, r2
   112ce:	4b17      	ldr	r3, [pc, #92]	; (1132c <_lv_ll_chg_list+0x68>)
   112d0:	4798      	blx	r3
    if(head) {
   112d2:	b1ae      	cbz	r6, 11300 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
   112d4:	2200      	movs	r2, #0
   112d6:	4629      	mov	r1, r5
   112d8:	4620      	mov	r0, r4
   112da:	4b15      	ldr	r3, [pc, #84]	; (11330 <_lv_ll_chg_list+0x6c>)
   112dc:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
   112de:	6862      	ldr	r2, [r4, #4]
   112e0:	4629      	mov	r1, r5
   112e2:	4620      	mov	r0, r4
   112e4:	4b13      	ldr	r3, [pc, #76]	; (11334 <_lv_ll_chg_list+0x70>)
   112e6:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
   112e8:	6861      	ldr	r1, [r4, #4]
   112ea:	b119      	cbz	r1, 112f4 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
   112ec:	462a      	mov	r2, r5
   112ee:	4620      	mov	r0, r4
   112f0:	4b0f      	ldr	r3, [pc, #60]	; (11330 <_lv_ll_chg_list+0x6c>)
   112f2:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
   112f4:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
   112f6:	68a3      	ldr	r3, [r4, #8]
   112f8:	b103      	cbz	r3, 112fc <_lv_ll_chg_list+0x38>
   112fa:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
   112fc:	60a5      	str	r5, [r4, #8]
   112fe:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
   11300:	68a2      	ldr	r2, [r4, #8]
   11302:	4629      	mov	r1, r5
   11304:	4620      	mov	r0, r4
   11306:	4b0a      	ldr	r3, [pc, #40]	; (11330 <_lv_ll_chg_list+0x6c>)
   11308:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
   1130a:	2200      	movs	r2, #0
   1130c:	4629      	mov	r1, r5
   1130e:	4620      	mov	r0, r4
   11310:	4b08      	ldr	r3, [pc, #32]	; (11334 <_lv_ll_chg_list+0x70>)
   11312:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
   11314:	68a1      	ldr	r1, [r4, #8]
   11316:	b119      	cbz	r1, 11320 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
   11318:	462a      	mov	r2, r5
   1131a:	4620      	mov	r0, r4
   1131c:	4b05      	ldr	r3, [pc, #20]	; (11334 <_lv_ll_chg_list+0x70>)
   1131e:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
   11320:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
   11322:	6863      	ldr	r3, [r4, #4]
   11324:	2b00      	cmp	r3, #0
   11326:	d1e8      	bne.n	112fa <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
   11328:	6065      	str	r5, [r4, #4]
}
   1132a:	e7e6      	b.n	112fa <_lv_ll_chg_list+0x36>
   1132c:	00011239 	.word	0x00011239
   11330:	0001105d 	.word	0x0001105d
   11334:	0001101d 	.word	0x0001101d

00011338 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   11338:	4291      	cmp	r1, r2
   1133a:	d04c      	beq.n	113d6 <_lv_ll_move_before+0x9e>
{
   1133c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11340:	4617      	mov	r7, r2
   11342:	460c      	mov	r4, r1
   11344:	4605      	mov	r5, r0
    if(n_after != NULL)
   11346:	b312      	cbz	r2, 1138e <_lv_ll_move_before+0x56>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   11348:	4611      	mov	r1, r2
   1134a:	4b23      	ldr	r3, [pc, #140]	; (113d8 <_lv_ll_move_before+0xa0>)
   1134c:	4798      	blx	r3
   1134e:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   11350:	4284      	cmp	r4, r0
   11352:	d01a      	beq.n	1138a <_lv_ll_move_before+0x52>
    _lv_ll_remove(ll_p, n_act);
   11354:	4621      	mov	r1, r4
   11356:	4628      	mov	r0, r5
   11358:	4b20      	ldr	r3, [pc, #128]	; (113dc <_lv_ll_move_before+0xa4>)
   1135a:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   1135c:	4622      	mov	r2, r4
   1135e:	4631      	mov	r1, r6
   11360:	4628      	mov	r0, r5
   11362:	f8df 807c 	ldr.w	r8, [pc, #124]	; 113e0 <_lv_ll_move_before+0xa8>
   11366:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
   11368:	4632      	mov	r2, r6
   1136a:	4621      	mov	r1, r4
   1136c:	4628      	mov	r0, r5
   1136e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 113e4 <_lv_ll_move_before+0xac>
   11372:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
   11374:	4622      	mov	r2, r4
   11376:	4639      	mov	r1, r7
   11378:	4628      	mov	r0, r5
   1137a:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
   1137c:	463a      	mov	r2, r7
   1137e:	4621      	mov	r1, r4
   11380:	4628      	mov	r0, r5
   11382:	47c0      	blx	r8
    if(n_before == NULL) ll_p->head = n_act;
   11384:	b306      	cbz	r6, 113c8 <_lv_ll_move_before+0x90>
   11386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1138a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ll_p != NULL) {
   1138e:	b1f0      	cbz	r0, 113ce <_lv_ll_move_before+0x96>
        tail = ll_p->tail;
   11390:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
   11392:	42b4      	cmp	r4, r6
   11394:	d01d      	beq.n	113d2 <_lv_ll_move_before+0x9a>
    _lv_ll_remove(ll_p, n_act);
   11396:	4621      	mov	r1, r4
   11398:	4628      	mov	r0, r5
   1139a:	4b10      	ldr	r3, [pc, #64]	; (113dc <_lv_ll_move_before+0xa4>)
   1139c:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   1139e:	4622      	mov	r2, r4
   113a0:	4631      	mov	r1, r6
   113a2:	4628      	mov	r0, r5
   113a4:	4f0e      	ldr	r7, [pc, #56]	; (113e0 <_lv_ll_move_before+0xa8>)
   113a6:	47b8      	blx	r7
    node_set_prev(ll_p, n_act, n_before);
   113a8:	4632      	mov	r2, r6
   113aa:	4621      	mov	r1, r4
   113ac:	4628      	mov	r0, r5
   113ae:	f8df 8034 	ldr.w	r8, [pc, #52]	; 113e4 <_lv_ll_move_before+0xac>
   113b2:	47c0      	blx	r8
    node_set_prev(ll_p, n_after, n_act);
   113b4:	4622      	mov	r2, r4
   113b6:	2100      	movs	r1, #0
   113b8:	4628      	mov	r0, r5
   113ba:	47c0      	blx	r8
    node_set_next(ll_p, n_act, n_after);
   113bc:	2200      	movs	r2, #0
   113be:	4621      	mov	r1, r4
   113c0:	4628      	mov	r0, r5
   113c2:	47b8      	blx	r7
    if(n_after == NULL) ll_p->tail = n_act;
   113c4:	60ac      	str	r4, [r5, #8]
   113c6:	e7dd      	b.n	11384 <_lv_ll_move_before+0x4c>
    if(n_before == NULL) ll_p->head = n_act;
   113c8:	606c      	str	r4, [r5, #4]
   113ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void * tail = NULL;
   113ce:	4616      	mov	r6, r2
   113d0:	e7df      	b.n	11392 <_lv_ll_move_before+0x5a>
   113d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   113d6:	4770      	bx	lr
   113d8:	0001118d 	.word	0x0001118d
   113dc:	00011239 	.word	0x00011239
   113e0:	0001101d 	.word	0x0001101d
   113e4:	0001105d 	.word	0x0001105d

000113e8 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
   113e8:	b140      	cbz	r0, 113fc <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   113ea:	6842      	ldr	r2, [r0, #4]
   113ec:	b10a      	cbz	r2, 113f2 <_lv_ll_is_empty+0xa>
    return false;
   113ee:	2000      	movs	r0, #0
}
   113f0:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   113f2:	6880      	ldr	r0, [r0, #8]
   113f4:	fab0 f080 	clz	r0, r0
   113f8:	0940      	lsrs	r0, r0, #5
   113fa:	4770      	bx	lr
    if(ll_p == NULL) return true;
   113fc:	2001      	movs	r0, #1
   113fe:	4770      	bx	lr

00011400 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
   11400:	4b1b      	ldr	r3, [pc, #108]	; (11470 <_lv_trigo_sin+0x70>)
   11402:	fb83 2300 	smull	r2, r3, r3, r0
   11406:	181a      	adds	r2, r3, r0
   11408:	17c3      	asrs	r3, r0, #31
   1140a:	ebc3 2322 	rsb	r3, r3, r2, asr #8
   1140e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   11412:	fb02 0013 	mls	r0, r2, r3, r0
   11416:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
   11418:	2800      	cmp	r0, #0
   1141a:	bfbc      	itt	lt
   1141c:	1880      	addlt	r0, r0, r2
   1141e:	b200      	sxthlt	r0, r0

    if(angle < 90) {
   11420:	2859      	cmp	r0, #89	; 0x59
   11422:	dd13      	ble.n	1144c <_lv_trigo_sin+0x4c>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
   11424:	b280      	uxth	r0, r0
   11426:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
   1142a:	b29b      	uxth	r3, r3
   1142c:	2b59      	cmp	r3, #89	; 0x59
   1142e:	d911      	bls.n	11454 <_lv_trigo_sin+0x54>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
   11430:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
   11434:	b29b      	uxth	r3, r3
   11436:	2b59      	cmp	r3, #89	; 0x59
   11438:	d913      	bls.n	11462 <_lv_trigo_sin+0x62>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
   1143a:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
   1143e:	b200      	sxth	r0, r0
   11440:	4b0c      	ldr	r3, [pc, #48]	; (11474 <_lv_trigo_sin+0x74>)
   11442:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11446:	4240      	negs	r0, r0
   11448:	b200      	sxth	r0, r0
    }

    return ret;
}
   1144a:	4770      	bx	lr
        ret = sin0_90_table[angle];
   1144c:	4b09      	ldr	r3, [pc, #36]	; (11474 <_lv_trigo_sin+0x74>)
   1144e:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   11452:	4770      	bx	lr
        angle = 180 - angle;
   11454:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
   11458:	b200      	sxth	r0, r0
   1145a:	4b06      	ldr	r3, [pc, #24]	; (11474 <_lv_trigo_sin+0x74>)
   1145c:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   11460:	4770      	bx	lr
        ret   = -sin0_90_table[angle];
   11462:	b21b      	sxth	r3, r3
   11464:	4a03      	ldr	r2, [pc, #12]	; (11474 <_lv_trigo_sin+0x74>)
   11466:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
   1146a:	4240      	negs	r0, r0
   1146c:	b200      	sxth	r0, r0
   1146e:	4770      	bx	lr
   11470:	b60b60b7 	.word	0xb60b60b7
   11474:	0001b458 	.word	0x0001b458

00011478 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   11478:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   1147a:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   1147c:	2400      	movs	r4, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   1147e:	1913      	adds	r3, r2, r4
        if((uint32_t)trial * trial <= x) root = trial;
   11480:	fb03 f503 	mul.w	r5, r3, r3
   11484:	42a8      	cmp	r0, r5
   11486:	bf28      	it	cs
   11488:	461c      	movcs	r4, r3
        mask = mask >> 1;
    } while(mask);
   1148a:	0852      	lsrs	r2, r2, #1
   1148c:	d1f7      	bne.n	1147e <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   1148e:	0923      	lsrs	r3, r4, #4
   11490:	800b      	strh	r3, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   11492:	0124      	lsls	r4, r4, #4
   11494:	b2e4      	uxtb	r4, r4
   11496:	804c      	strh	r4, [r1, #2]
}
   11498:	bc30      	pop	{r4, r5}
   1149a:	4770      	bx	lr

0001149c <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
   1149c:	4603      	mov	r3, r0
   1149e:	b160      	cbz	r0, 114ba <ent_get_next+0x1e>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
   114a0:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
   114a2:	681b      	ldr	r3, [r3, #0]
   114a4:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
   114a8:	1d02      	adds	r2, r0, #4
   114aa:	4b05      	ldr	r3, [pc, #20]	; (114c0 <ent_get_next+0x24>)
   114ac:	681b      	ldr	r3, [r3, #0]
   114ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   114b2:	429a      	cmp	r2, r3
   114b4:	bf28      	it	cs
   114b6:	2000      	movcs	r0, #0
    }

    return next_e;
}
   114b8:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
   114ba:	4b01      	ldr	r3, [pc, #4]	; (114c0 <ent_get_next+0x24>)
   114bc:	6818      	ldr	r0, [r3, #0]
   114be:	4770      	bx	lr
   114c0:	20002b88 	.word	0x20002b88

000114c4 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   114c4:	f011 0f03 	tst.w	r1, #3
        size = size & (~0x3);
   114c8:	bf1c      	itt	ne
   114ca:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
   114ce:	3104      	addne	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
   114d0:	6803      	ldr	r3, [r0, #0]
   114d2:	f3c3 035e 	ubfx	r3, r3, #1, #31
   114d6:	1d0a      	adds	r2, r1, #4
   114d8:	4293      	cmp	r3, r2
   114da:	d017      	beq.n	1150c <ent_trunc+0x48>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
   114dc:	4299      	cmp	r1, r3
   114de:	d016      	beq.n	1150e <ent_trunc+0x4a>
{
   114e0:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
   114e2:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
   114e4:	5c53      	ldrb	r3, [r2, r1]
   114e6:	f36f 0300 	bfc	r3, #0, #1
   114ea:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
   114ec:	6803      	ldr	r3, [r0, #0]
   114ee:	f3c3 035e 	ubfx	r3, r3, #1, #31
   114f2:	3b04      	subs	r3, #4
   114f4:	1a5b      	subs	r3, r3, r1
   114f6:	5854      	ldr	r4, [r2, r1]
   114f8:	f363 045f 	bfi	r4, r3, #1, #31
   114fc:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
   114fe:	6803      	ldr	r3, [r0, #0]
   11500:	f361 035f 	bfi	r3, r1, #1, #31
   11504:	6003      	str	r3, [r0, #0]
}
   11506:	f85d 4b04 	ldr.w	r4, [sp], #4
   1150a:	4770      	bx	lr
        size = e->header.s.d_size;
   1150c:	4611      	mov	r1, r2
    e->header.s.d_size = (uint32_t)size;
   1150e:	6803      	ldr	r3, [r0, #0]
   11510:	f361 035f 	bfi	r3, r1, #1, #31
   11514:	6003      	str	r3, [r0, #0]
   11516:	4770      	bx	lr

00011518 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
   11518:	4b06      	ldr	r3, [pc, #24]	; (11534 <_lv_mem_init+0x1c>)
   1151a:	1d1a      	adds	r2, r3, #4
   1151c:	601a      	str	r2, [r3, #0]
    full->header.s.used = 0;
   1151e:	791a      	ldrb	r2, [r3, #4]
   11520:	f36f 0200 	bfc	r2, #0, #1
   11524:	711a      	strb	r2, [r3, #4]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
   11526:	685a      	ldr	r2, [r3, #4]
   11528:	f647 71fc 	movw	r1, #32764	; 0x7ffc
   1152c:	f361 025f 	bfi	r2, r1, #1, #31
   11530:	605a      	str	r2, [r3, #4]
   11532:	4770      	bx	lr
   11534:	20002b88 	.word	0x20002b88

00011538 <lv_mem_alloc>:
    if(size == 0) {
   11538:	b318      	cbz	r0, 11582 <lv_mem_alloc+0x4a>
{
   1153a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1153c:	4605      	mov	r5, r0
    if(size & 0x3) {
   1153e:	f010 0f03 	tst.w	r0, #3
        size = size & (~0x3);
   11542:	bf1c      	itt	ne
   11544:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
   11548:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
   1154a:	2400      	movs	r4, #0
        e = ent_get_next(e);
   1154c:	4e0f      	ldr	r6, [pc, #60]	; (1158c <lv_mem_alloc+0x54>)
        ent_trunc(e, size);
   1154e:	4f10      	ldr	r7, [pc, #64]	; (11590 <lv_mem_alloc+0x58>)
   11550:	e008      	b.n	11564 <lv_mem_alloc+0x2c>
   11552:	4629      	mov	r1, r5
   11554:	47b8      	blx	r7
        e->header.s.used = 1;
   11556:	7823      	ldrb	r3, [r4, #0]
   11558:	f043 0301 	orr.w	r3, r3, #1
   1155c:	4620      	mov	r0, r4
   1155e:	f800 3b04 	strb.w	r3, [r0], #4
    } while(e != NULL && alloc == NULL);
   11562:	b968      	cbnz	r0, 11580 <lv_mem_alloc+0x48>
        e = ent_get_next(e);
   11564:	4620      	mov	r0, r4
   11566:	47b0      	blx	r6
        if(e != NULL) {
   11568:	4604      	mov	r4, r0
   1156a:	b160      	cbz	r0, 11586 <lv_mem_alloc+0x4e>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
   1156c:	7803      	ldrb	r3, [r0, #0]
   1156e:	f013 0f01 	tst.w	r3, #1
   11572:	d1f7      	bne.n	11564 <lv_mem_alloc+0x2c>
   11574:	6803      	ldr	r3, [r0, #0]
   11576:	f3c3 035e 	ubfx	r3, r3, #1, #31
   1157a:	429d      	cmp	r5, r3
   1157c:	d9e9      	bls.n	11552 <lv_mem_alloc+0x1a>
   1157e:	e7f1      	b.n	11564 <lv_mem_alloc+0x2c>
   11580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return &zero_mem;
   11582:	4804      	ldr	r0, [pc, #16]	; (11594 <lv_mem_alloc+0x5c>)
   11584:	4770      	bx	lr
   11586:	2000      	movs	r0, #0
}
   11588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1158a:	bf00      	nop
   1158c:	0001149d 	.word	0x0001149d
   11590:	000114c5 	.word	0x000114c5
   11594:	2000ab8c 	.word	0x2000ab8c

00011598 <lv_mem_defrag>:
{
   11598:	b538      	push	{r3, r4, r5, lr}
    e_free = ent_get_next(NULL);
   1159a:	2000      	movs	r0, #0
   1159c:	4b16      	ldr	r3, [pc, #88]	; (115f8 <lv_mem_defrag+0x60>)
   1159e:	4798      	blx	r3
   115a0:	4604      	mov	r4, r0
        e_next = ent_get_next(e_free);
   115a2:	4d15      	ldr	r5, [pc, #84]	; (115f8 <lv_mem_defrag+0x60>)
   115a4:	e01b      	b.n	115de <lv_mem_defrag+0x46>
   115a6:	bd38      	pop	{r3, r4, r5, pc}
   115a8:	4620      	mov	r0, r4
   115aa:	47a8      	blx	r5
        while(e_next != NULL) {
   115ac:	4601      	mov	r1, r0
   115ae:	b308      	cbz	r0, 115f4 <lv_mem_defrag+0x5c>
            if(e_next->header.s.used == 0) {
   115b0:	7803      	ldrb	r3, [r0, #0]
   115b2:	f013 0f01 	tst.w	r3, #1
   115b6:	d111      	bne.n	115dc <lv_mem_defrag+0x44>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
   115b8:	6823      	ldr	r3, [r4, #0]
   115ba:	f3c3 025e 	ubfx	r2, r3, #1, #31
   115be:	3204      	adds	r2, #4
   115c0:	6808      	ldr	r0, [r1, #0]
   115c2:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   115c6:	f362 035f 	bfi	r3, r2, #1, #31
   115ca:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
   115cc:	4608      	mov	r0, r1
   115ce:	47a8      	blx	r5
        while(e_next != NULL) {
   115d0:	4601      	mov	r1, r0
   115d2:	b170      	cbz	r0, 115f2 <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
   115d4:	780b      	ldrb	r3, [r1, #0]
   115d6:	f013 0f01 	tst.w	r3, #1
   115da:	d0ed      	beq.n	115b8 <lv_mem_defrag+0x20>
{
   115dc:	460c      	mov	r4, r1
        while(e_free != NULL) {
   115de:	2c00      	cmp	r4, #0
   115e0:	d0e1      	beq.n	115a6 <lv_mem_defrag+0xe>
            if(e_free->header.s.used != 0) {
   115e2:	7823      	ldrb	r3, [r4, #0]
   115e4:	f013 0f01 	tst.w	r3, #1
   115e8:	d0de      	beq.n	115a8 <lv_mem_defrag+0x10>
                e_free = ent_get_next(e_free);
   115ea:	4620      	mov	r0, r4
   115ec:	47a8      	blx	r5
   115ee:	4604      	mov	r4, r0
   115f0:	e7f5      	b.n	115de <lv_mem_defrag+0x46>
   115f2:	bd38      	pop	{r3, r4, r5, pc}
   115f4:	bd38      	pop	{r3, r4, r5, pc}
   115f6:	bf00      	nop
   115f8:	0001149d 	.word	0x0001149d

000115fc <lv_mem_free>:
{
   115fc:	b538      	push	{r3, r4, r5, lr}
    if(data == &zero_mem) return;
   115fe:	4b1e      	ldr	r3, [pc, #120]	; (11678 <lv_mem_free+0x7c>)
   11600:	4298      	cmp	r0, r3
   11602:	d038      	beq.n	11676 <lv_mem_free+0x7a>
    if(data == NULL) return;
   11604:	2800      	cmp	r0, #0
   11606:	d036      	beq.n	11676 <lv_mem_free+0x7a>
   11608:	4604      	mov	r4, r0
    e->header.s.used = 0;
   1160a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1160e:	f36f 0300 	bfc	r3, #0, #1
   11612:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
   11616:	4a19      	ldr	r2, [pc, #100]	; (1167c <lv_mem_free+0x80>)
   11618:	f8b2 3940 	ldrh.w	r3, [r2, #2368]	; 0x940
   1161c:	3301      	adds	r3, #1
   1161e:	b29b      	uxth	r3, r3
   11620:	f8a2 3940 	strh.w	r3, [r2, #2368]	; 0x940
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
   11624:	2b0f      	cmp	r3, #15
   11626:	d820      	bhi.n	1166a <lv_mem_free+0x6e>
        e_next = ent_get_next(e);
   11628:	3804      	subs	r0, #4
   1162a:	4b15      	ldr	r3, [pc, #84]	; (11680 <lv_mem_free+0x84>)
   1162c:	4798      	blx	r3
        while(e_next != NULL) {
   1162e:	4601      	mov	r1, r0
   11630:	b308      	cbz	r0, 11676 <lv_mem_free+0x7a>
            if(e_next->header.s.used == 0) {
   11632:	7803      	ldrb	r3, [r0, #0]
   11634:	f013 0f01 	tst.w	r3, #1
   11638:	d115      	bne.n	11666 <lv_mem_free+0x6a>
            e_next = ent_get_next(e_next);
   1163a:	4d11      	ldr	r5, [pc, #68]	; (11680 <lv_mem_free+0x84>)
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
   1163c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11640:	f3c3 025e 	ubfx	r2, r3, #1, #31
   11644:	3204      	adds	r2, #4
   11646:	6808      	ldr	r0, [r1, #0]
   11648:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   1164c:	f362 035f 	bfi	r3, r2, #1, #31
   11650:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
   11654:	4608      	mov	r0, r1
   11656:	47a8      	blx	r5
        while(e_next != NULL) {
   11658:	4601      	mov	r1, r0
   1165a:	b128      	cbz	r0, 11668 <lv_mem_free+0x6c>
            if(e_next->header.s.used == 0) {
   1165c:	780b      	ldrb	r3, [r1, #0]
   1165e:	f013 0f01 	tst.w	r3, #1
   11662:	d0eb      	beq.n	1163c <lv_mem_free+0x40>
   11664:	bd38      	pop	{r3, r4, r5, pc}
   11666:	bd38      	pop	{r3, r4, r5, pc}
   11668:	bd38      	pop	{r3, r4, r5, pc}
        full_defrag_cnt = 0;
   1166a:	2200      	movs	r2, #0
   1166c:	4b03      	ldr	r3, [pc, #12]	; (1167c <lv_mem_free+0x80>)
   1166e:	f8a3 2940 	strh.w	r2, [r3, #2368]	; 0x940
        lv_mem_defrag();
   11672:	4b04      	ldr	r3, [pc, #16]	; (11684 <lv_mem_free+0x88>)
   11674:	4798      	blx	r3
   11676:	bd38      	pop	{r3, r4, r5, pc}
   11678:	2000ab8c 	.word	0x2000ab8c
   1167c:	2000a250 	.word	0x2000a250
   11680:	0001149d 	.word	0x0001149d
   11684:	00011599 	.word	0x00011599

00011688 <_lv_mem_get_size>:
    if(data == NULL) return 0;
   11688:	b138      	cbz	r0, 1169a <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
   1168a:	4a06      	ldr	r2, [pc, #24]	; (116a4 <_lv_mem_get_size+0x1c>)
   1168c:	4290      	cmp	r0, r2
   1168e:	d006      	beq.n	1169e <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
   11690:	f850 0c04 	ldr.w	r0, [r0, #-4]
   11694:	f3c0 005e 	ubfx	r0, r0, #1, #31
   11698:	4770      	bx	lr
    if(data == NULL) return 0;
   1169a:	2000      	movs	r0, #0
   1169c:	4770      	bx	lr
    if(data == &zero_mem) return 0;
   1169e:	2000      	movs	r0, #0
}
   116a0:	4770      	bx	lr
   116a2:	bf00      	nop
   116a4:	2000ab8c 	.word	0x2000ab8c

000116a8 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
   116a8:	4b16      	ldr	r3, [pc, #88]	; (11704 <_lv_mem_buf_release+0x5c>)
   116aa:	681b      	ldr	r3, [r3, #0]
   116ac:	4298      	cmp	r0, r3
   116ae:	d017      	beq.n	116e0 <_lv_mem_buf_release+0x38>
   116b0:	4b14      	ldr	r3, [pc, #80]	; (11704 <_lv_mem_buf_release+0x5c>)
   116b2:	689b      	ldr	r3, [r3, #8]
   116b4:	4283      	cmp	r3, r0
   116b6:	bf08      	it	eq
   116b8:	2201      	moveq	r2, #1
   116ba:	d012      	beq.n	116e2 <_lv_mem_buf_release+0x3a>
{
   116bc:	b410      	push	{r4}
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   116be:	4b12      	ldr	r3, [pc, #72]	; (11708 <_lv_mem_buf_release+0x60>)
   116c0:	681b      	ldr	r3, [r3, #0]
   116c2:	4298      	cmp	r0, r3
   116c4:	d015      	beq.n	116f2 <_lv_mem_buf_release+0x4a>
   116c6:	2301      	movs	r3, #1
   116c8:	490f      	ldr	r1, [pc, #60]	; (11708 <_lv_mem_buf_release+0x60>)
   116ca:	461c      	mov	r4, r3
   116cc:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   116d0:	4290      	cmp	r0, r2
   116d2:	d00f      	beq.n	116f4 <_lv_mem_buf_release+0x4c>
   116d4:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   116d6:	2b10      	cmp	r3, #16
   116d8:	d1f7      	bne.n	116ca <_lv_mem_buf_release+0x22>
}
   116da:	f85d 4b04 	ldr.w	r4, [sp], #4
   116de:	4770      	bx	lr
        if(mem_buf_small[i].p == p) {
   116e0:	2200      	movs	r2, #0
            mem_buf_small[i].used = 0;
   116e2:	4b08      	ldr	r3, [pc, #32]	; (11704 <_lv_mem_buf_release+0x5c>)
   116e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   116e8:	799a      	ldrb	r2, [r3, #6]
   116ea:	f36f 0200 	bfc	r2, #0, #1
   116ee:	719a      	strb	r2, [r3, #6]
            return;
   116f0:	4770      	bx	lr
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   116f2:	2400      	movs	r4, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   116f4:	4b04      	ldr	r3, [pc, #16]	; (11708 <_lv_mem_buf_release+0x60>)
   116f6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   116fa:	79a3      	ldrb	r3, [r4, #6]
   116fc:	f36f 0300 	bfc	r3, #0, #1
   11700:	71a3      	strb	r3, [r4, #6]
            return;
   11702:	e7ea      	b.n	116da <_lv_mem_buf_release+0x32>
   11704:	20000044 	.word	0x20000044
   11708:	2000acc4 	.word	0x2000acc4

0001170c <_lv_mem_buf_free_all>:
{
   1170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        mem_buf_small[i].used = 0;
   11710:	4b12      	ldr	r3, [pc, #72]	; (1175c <_lv_mem_buf_free_all+0x50>)
   11712:	799a      	ldrb	r2, [r3, #6]
   11714:	f36f 0200 	bfc	r2, #0, #1
   11718:	719a      	strb	r2, [r3, #6]
   1171a:	7b9a      	ldrb	r2, [r3, #14]
   1171c:	f36f 0200 	bfc	r2, #0, #1
   11720:	739a      	strb	r2, [r3, #14]
   11722:	4c0f      	ldr	r4, [pc, #60]	; (11760 <_lv_mem_buf_free_all+0x54>)
   11724:	2500      	movs	r5, #0
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   11726:	f8df 803c 	ldr.w	r8, [pc, #60]	; 11764 <_lv_mem_buf_free_all+0x58>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1172a:	462e      	mov	r6, r5
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1172c:	1f27      	subs	r7, r4, #4
   1172e:	e003      	b.n	11738 <_lv_mem_buf_free_all+0x2c>
   11730:	3501      	adds	r5, #1
   11732:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11734:	2d10      	cmp	r5, #16
   11736:	d00e      	beq.n	11756 <_lv_mem_buf_free_all+0x4a>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   11738:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1173c:	2800      	cmp	r0, #0
   1173e:	d0f7      	beq.n	11730 <_lv_mem_buf_free_all+0x24>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   11740:	47c0      	blx	r8
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   11742:	f844 6c04 	str.w	r6, [r4, #-4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   11746:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   1174a:	799a      	ldrb	r2, [r3, #6]
   1174c:	f366 0200 	bfi	r2, r6, #0, #1
   11750:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   11752:	8026      	strh	r6, [r4, #0]
   11754:	e7ec      	b.n	11730 <_lv_mem_buf_free_all+0x24>
}
   11756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1175a:	bf00      	nop
   1175c:	20000044 	.word	0x20000044
   11760:	2000acc8 	.word	0x2000acc8
   11764:	000115fd 	.word	0x000115fd

00011768 <_lv_memcpy>:
{
   11768:	b4f0      	push	{r4, r5, r6, r7}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
   1176a:	f000 0303 	and.w	r3, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
   1176e:	f001 0403 	and.w	r4, r1, #3
    if(s_align != d_align) {
   11772:	42a3      	cmp	r3, r4
   11774:	f000 80a6 	beq.w	118c4 <_lv_memcpy+0x15c>
        while(len > 32) {
   11778:	2a20      	cmp	r2, #32
   1177a:	f240 80a1 	bls.w	118c0 <_lv_memcpy+0x158>
   1177e:	f100 0420 	add.w	r4, r0, #32
   11782:	f101 0320 	add.w	r3, r1, #32
   11786:	4615      	mov	r5, r2
            REPEAT8(COPY8);
   11788:	f813 6c20 	ldrb.w	r6, [r3, #-32]
   1178c:	f804 6c20 	strb.w	r6, [r4, #-32]
   11790:	f813 6c1f 	ldrb.w	r6, [r3, #-31]
   11794:	f804 6c1f 	strb.w	r6, [r4, #-31]
   11798:	f813 6c1e 	ldrb.w	r6, [r3, #-30]
   1179c:	f804 6c1e 	strb.w	r6, [r4, #-30]
   117a0:	f813 6c1d 	ldrb.w	r6, [r3, #-29]
   117a4:	f804 6c1d 	strb.w	r6, [r4, #-29]
   117a8:	f813 6c1c 	ldrb.w	r6, [r3, #-28]
   117ac:	f804 6c1c 	strb.w	r6, [r4, #-28]
   117b0:	f813 6c1b 	ldrb.w	r6, [r3, #-27]
   117b4:	f804 6c1b 	strb.w	r6, [r4, #-27]
   117b8:	f813 6c1a 	ldrb.w	r6, [r3, #-26]
   117bc:	f804 6c1a 	strb.w	r6, [r4, #-26]
   117c0:	f813 6c19 	ldrb.w	r6, [r3, #-25]
   117c4:	f804 6c19 	strb.w	r6, [r4, #-25]
            REPEAT8(COPY8);
   117c8:	f813 6c18 	ldrb.w	r6, [r3, #-24]
   117cc:	f804 6c18 	strb.w	r6, [r4, #-24]
   117d0:	f813 6c17 	ldrb.w	r6, [r3, #-23]
   117d4:	f804 6c17 	strb.w	r6, [r4, #-23]
   117d8:	f813 6c16 	ldrb.w	r6, [r3, #-22]
   117dc:	f804 6c16 	strb.w	r6, [r4, #-22]
   117e0:	f813 6c15 	ldrb.w	r6, [r3, #-21]
   117e4:	f804 6c15 	strb.w	r6, [r4, #-21]
   117e8:	f813 6c14 	ldrb.w	r6, [r3, #-20]
   117ec:	f804 6c14 	strb.w	r6, [r4, #-20]
   117f0:	f813 6c13 	ldrb.w	r6, [r3, #-19]
   117f4:	f804 6c13 	strb.w	r6, [r4, #-19]
   117f8:	f813 6c12 	ldrb.w	r6, [r3, #-18]
   117fc:	f804 6c12 	strb.w	r6, [r4, #-18]
   11800:	f813 6c11 	ldrb.w	r6, [r3, #-17]
   11804:	f804 6c11 	strb.w	r6, [r4, #-17]
            REPEAT8(COPY8);
   11808:	f813 6c10 	ldrb.w	r6, [r3, #-16]
   1180c:	f804 6c10 	strb.w	r6, [r4, #-16]
   11810:	f813 6c0f 	ldrb.w	r6, [r3, #-15]
   11814:	f804 6c0f 	strb.w	r6, [r4, #-15]
   11818:	f813 6c0e 	ldrb.w	r6, [r3, #-14]
   1181c:	f804 6c0e 	strb.w	r6, [r4, #-14]
   11820:	f813 6c0d 	ldrb.w	r6, [r3, #-13]
   11824:	f804 6c0d 	strb.w	r6, [r4, #-13]
   11828:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
   1182c:	f804 6c0c 	strb.w	r6, [r4, #-12]
   11830:	f813 6c0b 	ldrb.w	r6, [r3, #-11]
   11834:	f804 6c0b 	strb.w	r6, [r4, #-11]
   11838:	f813 6c0a 	ldrb.w	r6, [r3, #-10]
   1183c:	f804 6c0a 	strb.w	r6, [r4, #-10]
   11840:	f813 6c09 	ldrb.w	r6, [r3, #-9]
   11844:	f804 6c09 	strb.w	r6, [r4, #-9]
            REPEAT8(COPY8);
   11848:	f813 6c08 	ldrb.w	r6, [r3, #-8]
   1184c:	f804 6c08 	strb.w	r6, [r4, #-8]
   11850:	f813 6c07 	ldrb.w	r6, [r3, #-7]
   11854:	f804 6c07 	strb.w	r6, [r4, #-7]
   11858:	f813 6c06 	ldrb.w	r6, [r3, #-6]
   1185c:	f804 6c06 	strb.w	r6, [r4, #-6]
   11860:	f813 6c05 	ldrb.w	r6, [r3, #-5]
   11864:	f804 6c05 	strb.w	r6, [r4, #-5]
   11868:	f813 6c04 	ldrb.w	r6, [r3, #-4]
   1186c:	f804 6c04 	strb.w	r6, [r4, #-4]
   11870:	f813 6c03 	ldrb.w	r6, [r3, #-3]
   11874:	f804 6c03 	strb.w	r6, [r4, #-3]
   11878:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   1187c:	f804 6c02 	strb.w	r6, [r4, #-2]
   11880:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   11884:	f804 6c01 	strb.w	r6, [r4, #-1]
            len -= 32;
   11888:	3d20      	subs	r5, #32
   1188a:	3420      	adds	r4, #32
   1188c:	3320      	adds	r3, #32
        while(len > 32) {
   1188e:	2d20      	cmp	r5, #32
   11890:	f63f af7a 	bhi.w	11788 <_lv_memcpy+0x20>
   11894:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
   11898:	f025 041f 	bic.w	r4, r5, #31
   1189c:	3420      	adds	r4, #32
   1189e:	1903      	adds	r3, r0, r4
   118a0:	4421      	add	r1, r4
   118a2:	3a20      	subs	r2, #32
   118a4:	f025 051f 	bic.w	r5, r5, #31
   118a8:	1b52      	subs	r2, r2, r5
        while(len) {
   118aa:	b13a      	cbz	r2, 118bc <_lv_memcpy+0x154>
   118ac:	3901      	subs	r1, #1
   118ae:	441a      	add	r2, r3
            COPY8
   118b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   118b4:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
   118b8:	429a      	cmp	r2, r3
   118ba:	d1f9      	bne.n	118b0 <_lv_memcpy+0x148>
}
   118bc:	bcf0      	pop	{r4, r5, r6, r7}
   118be:	4770      	bx	lr
        while(len > 32) {
   118c0:	4603      	mov	r3, r0
   118c2:	e7f2      	b.n	118aa <_lv_memcpy+0x142>
    if(d_align) {
   118c4:	2b00      	cmp	r3, #0
   118c6:	d15b      	bne.n	11980 <_lv_memcpy+0x218>
    uint8_t * d8 = dst;
   118c8:	4605      	mov	r5, r0
    while(len > 32) {
   118ca:	2a20      	cmp	r2, #32
   118cc:	d934      	bls.n	11938 <_lv_memcpy+0x1d0>
   118ce:	f105 0420 	add.w	r4, r5, #32
   118d2:	f101 0320 	add.w	r3, r1, #32
   118d6:	4616      	mov	r6, r2
        REPEAT8(COPY32)
   118d8:	f853 7c20 	ldr.w	r7, [r3, #-32]
   118dc:	f844 7c20 	str.w	r7, [r4, #-32]
   118e0:	f853 7c1c 	ldr.w	r7, [r3, #-28]
   118e4:	f844 7c1c 	str.w	r7, [r4, #-28]
   118e8:	f853 7c18 	ldr.w	r7, [r3, #-24]
   118ec:	f844 7c18 	str.w	r7, [r4, #-24]
   118f0:	f853 7c14 	ldr.w	r7, [r3, #-20]
   118f4:	f844 7c14 	str.w	r7, [r4, #-20]
   118f8:	f853 7c10 	ldr.w	r7, [r3, #-16]
   118fc:	f844 7c10 	str.w	r7, [r4, #-16]
   11900:	f853 7c0c 	ldr.w	r7, [r3, #-12]
   11904:	f844 7c0c 	str.w	r7, [r4, #-12]
   11908:	f853 7c08 	ldr.w	r7, [r3, #-8]
   1190c:	f844 7c08 	str.w	r7, [r4, #-8]
   11910:	f853 7c04 	ldr.w	r7, [r3, #-4]
   11914:	f844 7c04 	str.w	r7, [r4, #-4]
        len -= 32;
   11918:	3e20      	subs	r6, #32
   1191a:	3420      	adds	r4, #32
   1191c:	3320      	adds	r3, #32
    while(len > 32) {
   1191e:	2e20      	cmp	r6, #32
   11920:	d8da      	bhi.n	118d8 <_lv_memcpy+0x170>
   11922:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   11926:	f023 041f 	bic.w	r4, r3, #31
   1192a:	3420      	adds	r4, #32
   1192c:	4425      	add	r5, r4
   1192e:	4421      	add	r1, r4
   11930:	3a20      	subs	r2, #32
   11932:	f023 031f 	bic.w	r3, r3, #31
   11936:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   11938:	2a04      	cmp	r2, #4
   1193a:	d932      	bls.n	119a2 <_lv_memcpy+0x23a>
   1193c:	1f0e      	subs	r6, r1, #4
   1193e:	462c      	mov	r4, r5
   11940:	4613      	mov	r3, r2
        COPY32;
   11942:	f856 7f04 	ldr.w	r7, [r6, #4]!
   11946:	f844 7b04 	str.w	r7, [r4], #4
        len -= 4;
   1194a:	3b04      	subs	r3, #4
    while(len > 4) {
   1194c:	2b04      	cmp	r3, #4
   1194e:	d8f8      	bhi.n	11942 <_lv_memcpy+0x1da>
   11950:	1f54      	subs	r4, r2, #5
   11952:	f024 0303 	bic.w	r3, r4, #3
   11956:	3304      	adds	r3, #4
   11958:	3a04      	subs	r2, #4
   1195a:	f024 0403 	bic.w	r4, r4, #3
   1195e:	1b12      	subs	r2, r2, r4
        COPY32;
   11960:	4419      	add	r1, r3
   11962:	442b      	add	r3, r5
    while(len) {
   11964:	2a00      	cmp	r2, #0
   11966:	d0a9      	beq.n	118bc <_lv_memcpy+0x154>
   11968:	3901      	subs	r1, #1
   1196a:	441a      	add	r2, r3
        COPY8
   1196c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11970:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
   11974:	4293      	cmp	r3, r2
   11976:	d1f9      	bne.n	1196c <_lv_memcpy+0x204>
   11978:	e7a0      	b.n	118bc <_lv_memcpy+0x154>
            COPY8;
   1197a:	4629      	mov	r1, r5
   1197c:	461d      	mov	r5, r3
   1197e:	e7a4      	b.n	118ca <_lv_memcpy+0x162>
        while(d_align && len) {
   11980:	f1c3 0304 	rsb	r3, r3, #4
   11984:	b17a      	cbz	r2, 119a6 <_lv_memcpy+0x23e>
   11986:	18c4      	adds	r4, r0, r3
   11988:	4603      	mov	r3, r0
            COPY8;
   1198a:	f811 5b01 	ldrb.w	r5, [r1], #1
   1198e:	f803 5b01 	strb.w	r5, [r3], #1
   11992:	460d      	mov	r5, r1
            len--;
   11994:	3a01      	subs	r2, #1
        while(d_align && len) {
   11996:	42a3      	cmp	r3, r4
   11998:	d0ef      	beq.n	1197a <_lv_memcpy+0x212>
   1199a:	2a00      	cmp	r2, #0
   1199c:	d1f5      	bne.n	1198a <_lv_memcpy+0x222>
    while(len > 4) {
   1199e:	2200      	movs	r2, #0
   119a0:	e7e0      	b.n	11964 <_lv_memcpy+0x1fc>
   119a2:	462b      	mov	r3, r5
   119a4:	e7de      	b.n	11964 <_lv_memcpy+0x1fc>
    uint8_t * d8 = dst;
   119a6:	4603      	mov	r3, r0
   119a8:	e7f9      	b.n	1199e <_lv_memcpy+0x236>
	...

000119ac <lv_mem_realloc>:
{
   119ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119ae:	4604      	mov	r4, r0
   119b0:	460d      	mov	r5, r1
    if(new_size & 0x3) {
   119b2:	f011 0f03 	tst.w	r1, #3
        new_size = new_size & (~0x3);
   119b6:	bf1c      	itt	ne
   119b8:	f021 0503 	bicne.w	r5, r1, #3
        new_size += 4;
   119bc:	3504      	addne	r5, #4
    if(data_p != NULL) {
   119be:	b138      	cbz	r0, 119d0 <lv_mem_realloc+0x24>
        if(e->header.s.used == 0) {
   119c0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   119c4:	f003 0301 	and.w	r3, r3, #1
            data_p = NULL;
   119c8:	2b00      	cmp	r3, #0
   119ca:	bf14      	ite	ne
   119cc:	4604      	movne	r4, r0
   119ce:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   119d0:	4620      	mov	r0, r4
   119d2:	4b10      	ldr	r3, [pc, #64]	; (11a14 <lv_mem_realloc+0x68>)
   119d4:	4798      	blx	r3
   119d6:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   119d8:	4285      	cmp	r5, r0
   119da:	d019      	beq.n	11a10 <lv_mem_realloc+0x64>
    if(new_size < old_size) {
   119dc:	d311      	bcc.n	11a02 <lv_mem_realloc+0x56>
    new_p = lv_mem_alloc(new_size);
   119de:	4628      	mov	r0, r5
   119e0:	4b0d      	ldr	r3, [pc, #52]	; (11a18 <lv_mem_realloc+0x6c>)
   119e2:	4798      	blx	r3
    if(new_p == NULL) {
   119e4:	4607      	mov	r7, r0
   119e6:	b188      	cbz	r0, 11a0c <lv_mem_realloc+0x60>
    if(data_p != NULL) {
   119e8:	b184      	cbz	r4, 11a0c <lv_mem_realloc+0x60>
        if(old_size != 0) {
   119ea:	b17e      	cbz	r6, 11a0c <lv_mem_realloc+0x60>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   119ec:	462a      	mov	r2, r5
   119ee:	42b5      	cmp	r5, r6
   119f0:	bf28      	it	cs
   119f2:	4632      	movcs	r2, r6
   119f4:	4621      	mov	r1, r4
   119f6:	4b09      	ldr	r3, [pc, #36]	; (11a1c <lv_mem_realloc+0x70>)
   119f8:	4798      	blx	r3
            lv_mem_free(data_p);
   119fa:	4620      	mov	r0, r4
   119fc:	4b08      	ldr	r3, [pc, #32]	; (11a20 <lv_mem_realloc+0x74>)
   119fe:	4798      	blx	r3
   11a00:	e004      	b.n	11a0c <lv_mem_realloc+0x60>
        ent_trunc(e, new_size);
   11a02:	4629      	mov	r1, r5
   11a04:	1f20      	subs	r0, r4, #4
   11a06:	4b07      	ldr	r3, [pc, #28]	; (11a24 <lv_mem_realloc+0x78>)
   11a08:	4798      	blx	r3
        return &e->first_data;
   11a0a:	4627      	mov	r7, r4
}
   11a0c:	4638      	mov	r0, r7
   11a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   11a10:	4627      	mov	r7, r4
   11a12:	e7fb      	b.n	11a0c <lv_mem_realloc+0x60>
   11a14:	00011689 	.word	0x00011689
   11a18:	00011539 	.word	0x00011539
   11a1c:	00011769 	.word	0x00011769
   11a20:	000115fd 	.word	0x000115fd
   11a24:	000114c5 	.word	0x000114c5

00011a28 <_lv_mem_buf_get>:
    if(size == 0) return NULL;
   11a28:	2800      	cmp	r0, #0
   11a2a:	d073      	beq.n	11b14 <_lv_mem_buf_get+0xec>
   11a2c:	4601      	mov	r1, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
   11a2e:	2810      	cmp	r0, #16
   11a30:	d80b      	bhi.n	11a4a <_lv_mem_buf_get+0x22>
            if(mem_buf_small[i].used == 0) {
   11a32:	4b39      	ldr	r3, [pc, #228]	; (11b18 <_lv_mem_buf_get+0xf0>)
   11a34:	799b      	ldrb	r3, [r3, #6]
   11a36:	f013 0f01 	tst.w	r3, #1
   11a3a:	d00d      	beq.n	11a58 <_lv_mem_buf_get+0x30>
   11a3c:	4b36      	ldr	r3, [pc, #216]	; (11b18 <_lv_mem_buf_get+0xf0>)
   11a3e:	7b9b      	ldrb	r3, [r3, #14]
   11a40:	f013 0f01 	tst.w	r3, #1
   11a44:	bf08      	it	eq
   11a46:	2001      	moveq	r0, #1
   11a48:	d007      	beq.n	11a5a <_lv_mem_buf_get+0x32>
{
   11a4a:	b570      	push	{r4, r5, r6, lr}
   11a4c:	4a33      	ldr	r2, [pc, #204]	; (11b1c <_lv_mem_buf_get+0xf4>)
            if(mem_buf_small[i].used == 0) {
   11a4e:	2300      	movs	r3, #0
   11a50:	f04f 36ff 	mov.w	r6, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   11a54:	4614      	mov	r4, r2
   11a56:	e019      	b.n	11a8c <_lv_mem_buf_get+0x64>
            if(mem_buf_small[i].used == 0) {
   11a58:	2000      	movs	r0, #0
                mem_buf_small[i].used = 1;
   11a5a:	4a2f      	ldr	r2, [pc, #188]	; (11b18 <_lv_mem_buf_get+0xf0>)
   11a5c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   11a60:	798b      	ldrb	r3, [r1, #6]
   11a62:	f043 0301 	orr.w	r3, r3, #1
   11a66:	718b      	strb	r3, [r1, #6]
                return mem_buf_small[i].p;
   11a68:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
   11a6c:	4770      	bx	lr
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   11a6e:	4a2b      	ldr	r2, [pc, #172]	; (11b1c <_lv_mem_buf_get+0xf4>)
   11a70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   11a74:	798b      	ldrb	r3, [r1, #6]
   11a76:	f043 0301 	orr.w	r3, r3, #1
   11a7a:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   11a7c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
   11a80:	bd70      	pop	{r4, r5, r6, pc}
                i_guess = i;
   11a82:	b25e      	sxtb	r6, r3
   11a84:	3301      	adds	r3, #1
   11a86:	3208      	adds	r2, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11a88:	2b10      	cmp	r3, #16
   11a8a:	d013      	beq.n	11ab4 <_lv_mem_buf_get+0x8c>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   11a8c:	461d      	mov	r5, r3
   11a8e:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   11a92:	7980      	ldrb	r0, [r0, #6]
   11a94:	f010 0f01 	tst.w	r0, #1
   11a98:	d1f4      	bne.n	11a84 <_lv_mem_buf_get+0x5c>
   11a9a:	8890      	ldrh	r0, [r2, #4]
   11a9c:	4281      	cmp	r1, r0
   11a9e:	d8f1      	bhi.n	11a84 <_lv_mem_buf_get+0x5c>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   11aa0:	d0e5      	beq.n	11a6e <_lv_mem_buf_get+0x46>
            else if(i_guess < 0) {
   11aa2:	2e00      	cmp	r6, #0
   11aa4:	dbed      	blt.n	11a82 <_lv_mem_buf_get+0x5a>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   11aa6:	eb04 05c6 	add.w	r5, r4, r6, lsl #3
   11aaa:	88ad      	ldrh	r5, [r5, #4]
   11aac:	4285      	cmp	r5, r0
                i_guess = i;
   11aae:	bf88      	it	hi
   11ab0:	b25e      	sxtbhi	r6, r3
   11ab2:	e7e7      	b.n	11a84 <_lv_mem_buf_get+0x5c>
    if(i_guess >= 0) {
   11ab4:	2e00      	cmp	r6, #0
   11ab6:	db09      	blt.n	11acc <_lv_mem_buf_get+0xa4>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   11ab8:	4a18      	ldr	r2, [pc, #96]	; (11b1c <_lv_mem_buf_get+0xf4>)
   11aba:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   11abe:	798b      	ldrb	r3, [r1, #6]
   11ac0:	f043 0301 	orr.w	r3, r3, #1
   11ac4:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   11ac6:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
   11aca:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   11acc:	4b13      	ldr	r3, [pc, #76]	; (11b1c <_lv_mem_buf_get+0xf4>)
   11ace:	799b      	ldrb	r3, [r3, #6]
   11ad0:	f013 0f01 	tst.w	r3, #1
   11ad4:	bf08      	it	eq
   11ad6:	2400      	moveq	r4, #0
   11ad8:	d00d      	beq.n	11af6 <_lv_mem_buf_get+0xce>
   11ada:	2301      	movs	r3, #1
   11adc:	480f      	ldr	r0, [pc, #60]	; (11b1c <_lv_mem_buf_get+0xf4>)
   11ade:	461c      	mov	r4, r3
   11ae0:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   11ae4:	7992      	ldrb	r2, [r2, #6]
   11ae6:	f012 0f01 	tst.w	r2, #1
   11aea:	d004      	beq.n	11af6 <_lv_mem_buf_get+0xce>
   11aec:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   11aee:	2b10      	cmp	r3, #16
   11af0:	d1f5      	bne.n	11ade <_lv_mem_buf_get+0xb6>
    return NULL;
   11af2:	2000      	movs	r0, #0
   11af4:	bd70      	pop	{r4, r5, r6, pc}
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   11af6:	4d09      	ldr	r5, [pc, #36]	; (11b1c <_lv_mem_buf_get+0xf4>)
   11af8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   11afc:	799a      	ldrb	r2, [r3, #6]
   11afe:	f042 0201 	orr.w	r2, r2, #1
   11b02:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   11b04:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   11b06:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   11b0a:	4b05      	ldr	r3, [pc, #20]	; (11b20 <_lv_mem_buf_get+0xf8>)
   11b0c:	4798      	blx	r3
   11b0e:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   11b12:	bd70      	pop	{r4, r5, r6, pc}
    if(size == 0) return NULL;
   11b14:	2000      	movs	r0, #0
   11b16:	4770      	bx	lr
   11b18:	20000044 	.word	0x20000044
   11b1c:	2000acc4 	.word	0x2000acc4
   11b20:	000119ad 	.word	0x000119ad

00011b24 <_lv_memset>:
    if(d_align) {
   11b24:	f010 0303 	ands.w	r3, r0, #3
   11b28:	d013      	beq.n	11b52 <_lv_memset+0x2e>
        while(d_align && len) {
   11b2a:	f1c3 0304 	rsb	r3, r3, #4
   11b2e:	b13a      	cbz	r2, 11b40 <_lv_memset+0x1c>
   11b30:	4403      	add	r3, r0
            *d8 = v;
   11b32:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
   11b36:	3a01      	subs	r2, #1
        while(d_align && len) {
   11b38:	4298      	cmp	r0, r3
   11b3a:	d00a      	beq.n	11b52 <_lv_memset+0x2e>
   11b3c:	2a00      	cmp	r2, #0
   11b3e:	d1f8      	bne.n	11b32 <_lv_memset+0xe>
    while(len > 4) {
   11b40:	2200      	movs	r2, #0
    while(len) {
   11b42:	2a00      	cmp	r2, #0
   11b44:	d048      	beq.n	11bd8 <_lv_memset+0xb4>
   11b46:	4402      	add	r2, r0
        *d8 = v;
   11b48:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   11b4c:	4290      	cmp	r0, r2
   11b4e:	d1fb      	bne.n	11b48 <_lv_memset+0x24>
   11b50:	4770      	bx	lr
{
   11b52:	b430      	push	{r4, r5}
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
   11b54:	eb01 2401 	add.w	r4, r1, r1, lsl #8
   11b58:	eb04 4401 	add.w	r4, r4, r1, lsl #16
   11b5c:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
   11b60:	2a20      	cmp	r2, #32
   11b62:	d920      	bls.n	11ba6 <_lv_memset+0x82>
   11b64:	f100 0320 	add.w	r3, r0, #32
   11b68:	4615      	mov	r5, r2
        SET32(v32);
   11b6a:	f843 4c20 	str.w	r4, [r3, #-32]
        SET32(v32);
   11b6e:	f843 4c1c 	str.w	r4, [r3, #-28]
        SET32(v32);
   11b72:	f843 4c18 	str.w	r4, [r3, #-24]
        SET32(v32);
   11b76:	f843 4c14 	str.w	r4, [r3, #-20]
        SET32(v32);
   11b7a:	f843 4c10 	str.w	r4, [r3, #-16]
        SET32(v32);
   11b7e:	f843 4c0c 	str.w	r4, [r3, #-12]
        SET32(v32);
   11b82:	f843 4c08 	str.w	r4, [r3, #-8]
        SET32(v32);
   11b86:	f843 4c04 	str.w	r4, [r3, #-4]
        len -= 32;
   11b8a:	3d20      	subs	r5, #32
   11b8c:	3320      	adds	r3, #32
    while(len > 32) {
   11b8e:	2d20      	cmp	r5, #32
   11b90:	d8eb      	bhi.n	11b6a <_lv_memset+0x46>
   11b92:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   11b96:	f023 051f 	bic.w	r5, r3, #31
   11b9a:	3520      	adds	r5, #32
   11b9c:	4428      	add	r0, r5
   11b9e:	3a20      	subs	r2, #32
   11ba0:	f023 031f 	bic.w	r3, r3, #31
   11ba4:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   11ba6:	2a04      	cmp	r2, #4
   11ba8:	d90f      	bls.n	11bca <_lv_memset+0xa6>
   11baa:	4605      	mov	r5, r0
   11bac:	4613      	mov	r3, r2
        SET32(v32);
   11bae:	f845 4b04 	str.w	r4, [r5], #4
        len -= 4;
   11bb2:	3b04      	subs	r3, #4
    while(len > 4) {
   11bb4:	2b04      	cmp	r3, #4
   11bb6:	d8fa      	bhi.n	11bae <_lv_memset+0x8a>
   11bb8:	1f53      	subs	r3, r2, #5
   11bba:	f023 0403 	bic.w	r4, r3, #3
   11bbe:	3404      	adds	r4, #4
   11bc0:	3a04      	subs	r2, #4
   11bc2:	f023 0303 	bic.w	r3, r3, #3
   11bc6:	1ad2      	subs	r2, r2, r3
        SET32(v32);
   11bc8:	4420      	add	r0, r4
    while(len) {
   11bca:	b122      	cbz	r2, 11bd6 <_lv_memset+0xb2>
   11bcc:	4402      	add	r2, r0
        *d8 = v;
   11bce:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   11bd2:	4290      	cmp	r0, r2
   11bd4:	d1fb      	bne.n	11bce <_lv_memset+0xaa>
}
   11bd6:	bc30      	pop	{r4, r5}
   11bd8:	4770      	bx	lr

00011bda <_lv_memset_00>:
    if(d_align) {
   11bda:	f010 0303 	ands.w	r3, r0, #3
   11bde:	d141      	bne.n	11c64 <_lv_memset_00+0x8a>
{
   11be0:	b410      	push	{r4}
    while(len > 32) {
   11be2:	2920      	cmp	r1, #32
   11be4:	d921      	bls.n	11c2a <_lv_memset_00+0x50>
   11be6:	f100 0320 	add.w	r3, r0, #32
   11bea:	460c      	mov	r4, r1
        SET32(0);
   11bec:	2200      	movs	r2, #0
   11bee:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0);
   11bf2:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0);
   11bf6:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0);
   11bfa:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0);
   11bfe:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0);
   11c02:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0);
   11c06:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0);
   11c0a:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   11c0e:	3c20      	subs	r4, #32
   11c10:	3320      	adds	r3, #32
    while(len > 32) {
   11c12:	2c20      	cmp	r4, #32
   11c14:	d8eb      	bhi.n	11bee <_lv_memset_00+0x14>
   11c16:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   11c1a:	f023 021f 	bic.w	r2, r3, #31
   11c1e:	3220      	adds	r2, #32
   11c20:	4410      	add	r0, r2
   11c22:	3920      	subs	r1, #32
   11c24:	f023 031f 	bic.w	r3, r3, #31
   11c28:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   11c2a:	2904      	cmp	r1, #4
   11c2c:	d910      	bls.n	11c50 <_lv_memset_00+0x76>
   11c2e:	4602      	mov	r2, r0
   11c30:	460b      	mov	r3, r1
        SET32(0);
   11c32:	2400      	movs	r4, #0
   11c34:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   11c38:	3b04      	subs	r3, #4
    while(len > 4) {
   11c3a:	2b04      	cmp	r3, #4
   11c3c:	d8fa      	bhi.n	11c34 <_lv_memset_00+0x5a>
   11c3e:	1f4b      	subs	r3, r1, #5
   11c40:	f023 0203 	bic.w	r2, r3, #3
   11c44:	3204      	adds	r2, #4
   11c46:	3904      	subs	r1, #4
   11c48:	f023 0303 	bic.w	r3, r3, #3
   11c4c:	1ac9      	subs	r1, r1, r3
        SET32(0);
   11c4e:	4410      	add	r0, r2
    while(len) {
   11c50:	b129      	cbz	r1, 11c5e <_lv_memset_00+0x84>
   11c52:	4401      	add	r1, r0
        *d8 = 0;
   11c54:	2300      	movs	r3, #0
   11c56:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11c5a:	4288      	cmp	r0, r1
   11c5c:	d1fb      	bne.n	11c56 <_lv_memset_00+0x7c>
}
   11c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c62:	4770      	bx	lr
        while(d_align && len) {
   11c64:	f1c3 0304 	rsb	r3, r3, #4
   11c68:	b141      	cbz	r1, 11c7c <_lv_memset_00+0xa2>
   11c6a:	4403      	add	r3, r0
            *d8 = 0x00;
   11c6c:	2200      	movs	r2, #0
   11c6e:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   11c72:	3901      	subs	r1, #1
        while(d_align && len) {
   11c74:	4298      	cmp	r0, r3
   11c76:	d0b3      	beq.n	11be0 <_lv_memset_00+0x6>
   11c78:	2900      	cmp	r1, #0
   11c7a:	d1f8      	bne.n	11c6e <_lv_memset_00+0x94>
    while(len > 4) {
   11c7c:	2100      	movs	r1, #0
    while(len) {
   11c7e:	2900      	cmp	r1, #0
   11c80:	d0ef      	beq.n	11c62 <_lv_memset_00+0x88>
   11c82:	4401      	add	r1, r0
        *d8 = 0;
   11c84:	2300      	movs	r3, #0
   11c86:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11c8a:	4288      	cmp	r0, r1
   11c8c:	d1fb      	bne.n	11c86 <_lv_memset_00+0xac>
   11c8e:	4770      	bx	lr

00011c90 <_lv_memset_ff>:
    if(d_align) {
   11c90:	f010 0303 	ands.w	r3, r0, #3
   11c94:	d143      	bne.n	11d1e <_lv_memset_ff+0x8e>
{
   11c96:	b410      	push	{r4}
    while(len > 32) {
   11c98:	2920      	cmp	r1, #32
   11c9a:	d922      	bls.n	11ce2 <_lv_memset_ff+0x52>
   11c9c:	f100 0320 	add.w	r3, r0, #32
   11ca0:	460c      	mov	r4, r1
        SET32(0xFFFFFFFF);
   11ca2:	f04f 32ff 	mov.w	r2, #4294967295
   11ca6:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0xFFFFFFFF);
   11caa:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0xFFFFFFFF);
   11cae:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0xFFFFFFFF);
   11cb2:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0xFFFFFFFF);
   11cb6:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0xFFFFFFFF);
   11cba:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0xFFFFFFFF);
   11cbe:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0xFFFFFFFF);
   11cc2:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   11cc6:	3c20      	subs	r4, #32
   11cc8:	3320      	adds	r3, #32
    while(len > 32) {
   11cca:	2c20      	cmp	r4, #32
   11ccc:	d8eb      	bhi.n	11ca6 <_lv_memset_ff+0x16>
   11cce:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   11cd2:	f023 021f 	bic.w	r2, r3, #31
   11cd6:	3220      	adds	r2, #32
   11cd8:	4410      	add	r0, r2
   11cda:	3920      	subs	r1, #32
   11cdc:	f023 031f 	bic.w	r3, r3, #31
   11ce0:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   11ce2:	2904      	cmp	r1, #4
   11ce4:	d911      	bls.n	11d0a <_lv_memset_ff+0x7a>
   11ce6:	4602      	mov	r2, r0
   11ce8:	460b      	mov	r3, r1
        SET32(0xFFFFFFFF);
   11cea:	f04f 34ff 	mov.w	r4, #4294967295
   11cee:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   11cf2:	3b04      	subs	r3, #4
    while(len > 4) {
   11cf4:	2b04      	cmp	r3, #4
   11cf6:	d8fa      	bhi.n	11cee <_lv_memset_ff+0x5e>
   11cf8:	1f4b      	subs	r3, r1, #5
   11cfa:	f023 0203 	bic.w	r2, r3, #3
   11cfe:	3204      	adds	r2, #4
   11d00:	3904      	subs	r1, #4
   11d02:	f023 0303 	bic.w	r3, r3, #3
   11d06:	1ac9      	subs	r1, r1, r3
        SET32(0xFFFFFFFF);
   11d08:	4410      	add	r0, r2
    while(len) {
   11d0a:	b129      	cbz	r1, 11d18 <_lv_memset_ff+0x88>
   11d0c:	4401      	add	r1, r0
        *d8 = 0xFF;
   11d0e:	23ff      	movs	r3, #255	; 0xff
   11d10:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11d14:	4288      	cmp	r0, r1
   11d16:	d1fb      	bne.n	11d10 <_lv_memset_ff+0x80>
}
   11d18:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d1c:	4770      	bx	lr
        while(d_align && len) {
   11d1e:	f1c3 0304 	rsb	r3, r3, #4
   11d22:	b141      	cbz	r1, 11d36 <_lv_memset_ff+0xa6>
   11d24:	4403      	add	r3, r0
            *d8 = 0xFF;
   11d26:	22ff      	movs	r2, #255	; 0xff
   11d28:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   11d2c:	3901      	subs	r1, #1
        while(d_align && len) {
   11d2e:	4298      	cmp	r0, r3
   11d30:	d0b1      	beq.n	11c96 <_lv_memset_ff+0x6>
   11d32:	2900      	cmp	r1, #0
   11d34:	d1f8      	bne.n	11d28 <_lv_memset_ff+0x98>
    while(len > 4) {
   11d36:	2100      	movs	r1, #0
    while(len) {
   11d38:	2900      	cmp	r1, #0
   11d3a:	d0ef      	beq.n	11d1c <_lv_memset_ff+0x8c>
   11d3c:	4401      	add	r1, r0
        *d8 = 0xFF;
   11d3e:	23ff      	movs	r3, #255	; 0xff
   11d40:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   11d44:	4288      	cmp	r0, r1
   11d46:	d1fb      	bne.n	11d40 <_lv_memset_ff+0xb0>
   11d48:	4770      	bx	lr
	...

00011d4c <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   11d4c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   11d4e:	2118      	movs	r1, #24
   11d50:	4804      	ldr	r0, [pc, #16]	; (11d64 <_lv_task_core_init+0x18>)
   11d52:	4b05      	ldr	r3, [pc, #20]	; (11d68 <_lv_task_core_init+0x1c>)
   11d54:	4798      	blx	r3

    task_list_changed = false;
   11d56:	4b05      	ldr	r3, [pc, #20]	; (11d6c <_lv_task_core_init+0x20>)
   11d58:	2200      	movs	r2, #0
   11d5a:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   11d5c:	2201      	movs	r2, #1
   11d5e:	705a      	strb	r2, [r3, #1]
   11d60:	bd08      	pop	{r3, pc}
   11d62:	bf00      	nop
   11d64:	2000ac94 	.word	0x2000ac94
   11d68:	0001109d 	.word	0x0001109d
   11d6c:	2000abb4 	.word	0x2000abb4

00011d70 <lv_task_create_basic>:
{
   11d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   11d72:	482d      	ldr	r0, [pc, #180]	; (11e28 <lv_task_create_basic+0xb8>)
   11d74:	4b2d      	ldr	r3, [pc, #180]	; (11e2c <lv_task_create_basic+0xbc>)
   11d76:	4798      	blx	r3
    if(NULL == tmp) {
   11d78:	b1d8      	cbz	r0, 11db2 <lv_task_create_basic+0x42>
   11d7a:	4604      	mov	r4, r0
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   11d7c:	4e2a      	ldr	r6, [pc, #168]	; (11e28 <lv_task_create_basic+0xb8>)
   11d7e:	4d2c      	ldr	r5, [pc, #176]	; (11e30 <lv_task_create_basic+0xc0>)
            if(tmp->prio <= DEF_PRIO) {
   11d80:	7d23      	ldrb	r3, [r4, #20]
   11d82:	f003 0307 	and.w	r3, r3, #7
   11d86:	2b03      	cmp	r3, #3
   11d88:	dd22      	ble.n	11dd0 <lv_task_create_basic+0x60>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   11d8a:	4621      	mov	r1, r4
   11d8c:	4630      	mov	r0, r6
   11d8e:	47a8      	blx	r5
        } while(tmp != NULL);
   11d90:	4604      	mov	r4, r0
   11d92:	2800      	cmp	r0, #0
   11d94:	d1f4      	bne.n	11d80 <lv_task_create_basic+0x10>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   11d96:	4824      	ldr	r0, [pc, #144]	; (11e28 <lv_task_create_basic+0xb8>)
   11d98:	4b26      	ldr	r3, [pc, #152]	; (11e34 <lv_task_create_basic+0xc4>)
   11d9a:	4798      	blx	r3
   11d9c:	4605      	mov	r5, r0
            LV_ASSERT_MEM(new_task);
   11d9e:	4b26      	ldr	r3, [pc, #152]	; (11e38 <lv_task_create_basic+0xc8>)
   11da0:	4798      	blx	r3
   11da2:	2800      	cmp	r0, #0
   11da4:	d13c      	bne.n	11e20 <lv_task_create_basic+0xb0>
   11da6:	462a      	mov	r2, r5
   11da8:	2300      	movs	r3, #0
   11daa:	4824      	ldr	r0, [pc, #144]	; (11e3c <lv_task_create_basic+0xcc>)
   11dac:	4924      	ldr	r1, [pc, #144]	; (11e40 <lv_task_create_basic+0xd0>)
   11dae:	4788      	blx	r1
   11db0:	e7fe      	b.n	11db0 <lv_task_create_basic+0x40>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   11db2:	481d      	ldr	r0, [pc, #116]	; (11e28 <lv_task_create_basic+0xb8>)
   11db4:	4b23      	ldr	r3, [pc, #140]	; (11e44 <lv_task_create_basic+0xd4>)
   11db6:	4798      	blx	r3
   11db8:	4605      	mov	r5, r0
        LV_ASSERT_MEM(new_task);
   11dba:	4b1f      	ldr	r3, [pc, #124]	; (11e38 <lv_task_create_basic+0xc8>)
   11dbc:	4798      	blx	r3
   11dbe:	b928      	cbnz	r0, 11dcc <lv_task_create_basic+0x5c>
   11dc0:	462a      	mov	r2, r5
   11dc2:	2300      	movs	r3, #0
   11dc4:	481d      	ldr	r0, [pc, #116]	; (11e3c <lv_task_create_basic+0xcc>)
   11dc6:	491e      	ldr	r1, [pc, #120]	; (11e40 <lv_task_create_basic+0xd0>)
   11dc8:	4788      	blx	r1
   11dca:	e7fe      	b.n	11dca <lv_task_create_basic+0x5a>
        if(new_task == NULL) return NULL;
   11dcc:	b95d      	cbnz	r5, 11de6 <lv_task_create_basic+0x76>
   11dce:	e01f      	b.n	11e10 <lv_task_create_basic+0xa0>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   11dd0:	4621      	mov	r1, r4
   11dd2:	4815      	ldr	r0, [pc, #84]	; (11e28 <lv_task_create_basic+0xb8>)
   11dd4:	4b1c      	ldr	r3, [pc, #112]	; (11e48 <lv_task_create_basic+0xd8>)
   11dd6:	4798      	blx	r3
   11dd8:	4605      	mov	r5, r0
                LV_ASSERT_MEM(new_task);
   11dda:	4b17      	ldr	r3, [pc, #92]	; (11e38 <lv_task_create_basic+0xc8>)
   11ddc:	4798      	blx	r3
   11dde:	b1c8      	cbz	r0, 11e14 <lv_task_create_basic+0xa4>
                if(new_task == NULL) return NULL;
   11de0:	b1b5      	cbz	r5, 11e10 <lv_task_create_basic+0xa0>
        if(tmp == NULL) {
   11de2:	2c00      	cmp	r4, #0
   11de4:	d0d7      	beq.n	11d96 <lv_task_create_basic+0x26>
    task_list_changed = true;
   11de6:	4c19      	ldr	r4, [pc, #100]	; (11e4c <lv_task_create_basic+0xdc>)
   11de8:	2601      	movs	r6, #1
   11dea:	7026      	strb	r6, [r4, #0]
    new_task->period  = DEF_PERIOD;
   11dec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   11df0:	602b      	str	r3, [r5, #0]
    new_task->task_cb = NULL;
   11df2:	2700      	movs	r7, #0
   11df4:	60af      	str	r7, [r5, #8]
    new_task->prio    = DEF_PRIO;
   11df6:	7d2b      	ldrb	r3, [r5, #20]
   11df8:	2203      	movs	r2, #3
   11dfa:	f362 0302 	bfi	r3, r2, #0, #3
   11dfe:	752b      	strb	r3, [r5, #20]
    new_task->repeat_count = -1;
   11e00:	f04f 33ff 	mov.w	r3, #4294967295
   11e04:	612b      	str	r3, [r5, #16]
    new_task->last_run = lv_tick_get();
   11e06:	4b12      	ldr	r3, [pc, #72]	; (11e50 <lv_task_create_basic+0xe0>)
   11e08:	4798      	blx	r3
   11e0a:	6068      	str	r0, [r5, #4]
    new_task->user_data = NULL;
   11e0c:	60ef      	str	r7, [r5, #12]
    task_created = true;
   11e0e:	70a6      	strb	r6, [r4, #2]
}
   11e10:	4628      	mov	r0, r5
   11e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                LV_ASSERT_MEM(new_task);
   11e14:	462a      	mov	r2, r5
   11e16:	2300      	movs	r3, #0
   11e18:	4808      	ldr	r0, [pc, #32]	; (11e3c <lv_task_create_basic+0xcc>)
   11e1a:	4909      	ldr	r1, [pc, #36]	; (11e40 <lv_task_create_basic+0xd0>)
   11e1c:	4788      	blx	r1
   11e1e:	e7fe      	b.n	11e1e <lv_task_create_basic+0xae>
            if(new_task == NULL) return NULL;
   11e20:	2d00      	cmp	r5, #0
   11e22:	d1e0      	bne.n	11de6 <lv_task_create_basic+0x76>
   11e24:	e7f4      	b.n	11e10 <lv_task_create_basic+0xa0>
   11e26:	bf00      	nop
   11e28:	2000ac94 	.word	0x2000ac94
   11e2c:	0001114d 	.word	0x0001114d
   11e30:	00011161 	.word	0x00011161
   11e34:	00011101 	.word	0x00011101
   11e38:	0000291f 	.word	0x0000291f
   11e3c:	00017604 	.word	0x00017604
   11e40:	00002929 	.word	0x00002929
   11e44:	000110b5 	.word	0x000110b5
   11e48:	000111b9 	.word	0x000111b9
   11e4c:	2000abb4 	.word	0x2000abb4
   11e50:	0001029d 	.word	0x0001029d

00011e54 <lv_task_set_prio>:
{
   11e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task->prio == prio) return;
   11e58:	7d03      	ldrb	r3, [r0, #20]
   11e5a:	f003 0307 	and.w	r3, r3, #7
   11e5e:	428b      	cmp	r3, r1
   11e60:	d031      	beq.n	11ec6 <lv_task_set_prio+0x72>
   11e62:	460d      	mov	r5, r1
   11e64:	4688      	mov	r8, r1
   11e66:	4681      	mov	r9, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   11e68:	4818      	ldr	r0, [pc, #96]	; (11ecc <lv_task_set_prio+0x78>)
   11e6a:	4b19      	ldr	r3, [pc, #100]	; (11ed0 <lv_task_set_prio+0x7c>)
   11e6c:	4798      	blx	r3
   11e6e:	4604      	mov	r4, r0
   11e70:	b318      	cbz	r0, 11eba <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   11e72:	7d03      	ldrb	r3, [r0, #20]
   11e74:	f003 0307 	and.w	r3, r3, #7
   11e78:	429d      	cmp	r5, r3
   11e7a:	da0b      	bge.n	11e94 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   11e7c:	4f13      	ldr	r7, [pc, #76]	; (11ecc <lv_task_set_prio+0x78>)
   11e7e:	4e15      	ldr	r6, [pc, #84]	; (11ed4 <lv_task_set_prio+0x80>)
   11e80:	4621      	mov	r1, r4
   11e82:	4638      	mov	r0, r7
   11e84:	47b0      	blx	r6
   11e86:	4604      	mov	r4, r0
   11e88:	b1b8      	cbz	r0, 11eba <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   11e8a:	7d23      	ldrb	r3, [r4, #20]
   11e8c:	f003 0307 	and.w	r3, r3, #7
   11e90:	429d      	cmp	r5, r3
   11e92:	dbf5      	blt.n	11e80 <lv_task_set_prio+0x2c>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   11e94:	45a1      	cmp	r9, r4
   11e96:	d005      	beq.n	11ea4 <lv_task_set_prio+0x50>
   11e98:	4622      	mov	r2, r4
   11e9a:	4649      	mov	r1, r9
   11e9c:	480b      	ldr	r0, [pc, #44]	; (11ecc <lv_task_set_prio+0x78>)
   11e9e:	4b0e      	ldr	r3, [pc, #56]	; (11ed8 <lv_task_set_prio+0x84>)
   11ea0:	4798      	blx	r3
    if(i == NULL) {
   11ea2:	b154      	cbz	r4, 11eba <lv_task_set_prio+0x66>
    task_list_changed = true;
   11ea4:	2201      	movs	r2, #1
   11ea6:	4b0d      	ldr	r3, [pc, #52]	; (11edc <lv_task_set_prio+0x88>)
   11ea8:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   11eaa:	f899 3014 	ldrb.w	r3, [r9, #20]
   11eae:	f368 0302 	bfi	r3, r8, #0, #3
   11eb2:	f889 3014 	strb.w	r3, [r9, #20]
   11eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   11eba:	2200      	movs	r2, #0
   11ebc:	4649      	mov	r1, r9
   11ebe:	4803      	ldr	r0, [pc, #12]	; (11ecc <lv_task_set_prio+0x78>)
   11ec0:	4b05      	ldr	r3, [pc, #20]	; (11ed8 <lv_task_set_prio+0x84>)
   11ec2:	4798      	blx	r3
   11ec4:	e7ee      	b.n	11ea4 <lv_task_set_prio+0x50>
   11ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11eca:	bf00      	nop
   11ecc:	2000ac94 	.word	0x2000ac94
   11ed0:	0001114d 	.word	0x0001114d
   11ed4:	00011161 	.word	0x00011161
   11ed8:	00011339 	.word	0x00011339
   11edc:	2000abb4 	.word	0x2000abb4

00011ee0 <lv_task_create>:
{
   11ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ee4:	4680      	mov	r8, r0
   11ee6:	460f      	mov	r7, r1
   11ee8:	4616      	mov	r6, r2
   11eea:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   11eec:	4b0b      	ldr	r3, [pc, #44]	; (11f1c <lv_task_create+0x3c>)
   11eee:	4798      	blx	r3
   11ef0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_task);
   11ef2:	4b0b      	ldr	r3, [pc, #44]	; (11f20 <lv_task_create+0x40>)
   11ef4:	4798      	blx	r3
   11ef6:	b158      	cbz	r0, 11f10 <lv_task_create+0x30>
    if(new_task == NULL) return NULL;
   11ef8:	b13c      	cbz	r4, 11f0a <lv_task_create+0x2a>
    task->task_cb = task_cb;
   11efa:	f8c4 8008 	str.w	r8, [r4, #8]
    task->period = period;
   11efe:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
   11f00:	4631      	mov	r1, r6
   11f02:	4620      	mov	r0, r4
   11f04:	4b07      	ldr	r3, [pc, #28]	; (11f24 <lv_task_create+0x44>)
   11f06:	4798      	blx	r3
    new_task->user_data = user_data;
   11f08:	60e5      	str	r5, [r4, #12]
}
   11f0a:	4620      	mov	r0, r4
   11f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(new_task);
   11f10:	4622      	mov	r2, r4
   11f12:	2300      	movs	r3, #0
   11f14:	4804      	ldr	r0, [pc, #16]	; (11f28 <lv_task_create+0x48>)
   11f16:	4905      	ldr	r1, [pc, #20]	; (11f2c <lv_task_create+0x4c>)
   11f18:	4788      	blx	r1
   11f1a:	e7fe      	b.n	11f1a <lv_task_create+0x3a>
   11f1c:	00011d71 	.word	0x00011d71
   11f20:	0000291f 	.word	0x0000291f
   11f24:	00011e55 	.word	0x00011e55
   11f28:	00017604 	.word	0x00017604
   11f2c:	00002929 	.word	0x00002929

00011f30 <lv_task_ready>:
{
   11f30:	b510      	push	{r4, lr}
   11f32:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   11f34:	4b03      	ldr	r3, [pc, #12]	; (11f44 <lv_task_ready+0x14>)
   11f36:	4798      	blx	r3
   11f38:	6823      	ldr	r3, [r4, #0]
   11f3a:	43db      	mvns	r3, r3
   11f3c:	4403      	add	r3, r0
   11f3e:	6063      	str	r3, [r4, #4]
   11f40:	bd10      	pop	{r4, pc}
   11f42:	bf00      	nop
   11f44:	0001029d 	.word	0x0001029d

00011f48 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
   11f48:	7803      	ldrb	r3, [r0, #0]
   11f4a:	f013 0f80 	tst.w	r3, #128	; 0x80
   11f4e:	d101      	bne.n	11f54 <lv_txt_utf8_size+0xc>
        return 1;
   11f50:	2001      	movs	r0, #1
   11f52:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
   11f54:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
   11f58:	2ac0      	cmp	r2, #192	; 0xc0
   11f5a:	d00a      	beq.n	11f72 <lv_txt_utf8_size+0x2a>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
   11f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   11f60:	2ae0      	cmp	r2, #224	; 0xe0
   11f62:	d008      	beq.n	11f76 <lv_txt_utf8_size+0x2e>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
   11f64:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
   11f68:	2bf0      	cmp	r3, #240	; 0xf0
   11f6a:	bf0c      	ite	eq
   11f6c:	2004      	moveq	r0, #4
   11f6e:	2000      	movne	r0, #0
   11f70:	4770      	bx	lr
        return 2;
   11f72:	2002      	movs	r0, #2
   11f74:	4770      	bx	lr
        return 3;
   11f76:	2003      	movs	r0, #3
}
   11f78:	4770      	bx	lr

00011f7a <lv_txt_unicode_to_utf8>:
 * @param letter_uni an Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
   11f7a:	287f      	cmp	r0, #127	; 0x7f
   11f7c:	d916      	bls.n	11fac <lv_txt_unicode_to_utf8+0x32>
{
   11f7e:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
   11f80:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   11f84:	d213      	bcs.n	11fae <lv_txt_unicode_to_utf8+0x34>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
   11f86:	f3c0 1384 	ubfx	r3, r0, #6, #5
   11f8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   11f8e:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
   11f92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   11f96:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11f9a:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
   11f9e:	2300      	movs	r3, #0
   11fa0:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
   11fa4:	f88d 3007 	strb.w	r3, [sp, #7]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
   11fa8:	9801      	ldr	r0, [sp, #4]
}
   11faa:	b002      	add	sp, #8
   11fac:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
   11fae:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   11fb2:	d215      	bcs.n	11fe0 <lv_txt_unicode_to_utf8+0x66>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
   11fb4:	f3c0 3303 	ubfx	r3, r0, #12, #4
   11fb8:	f063 031f 	orn	r3, r3, #31
   11fbc:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
   11fc0:	f3c0 1385 	ubfx	r3, r0, #6, #6
   11fc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11fc8:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
   11fcc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   11fd0:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11fd4:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
   11fd8:	2300      	movs	r3, #0
   11fda:	f88d 3007 	strb.w	r3, [sp, #7]
   11fde:	e7e3      	b.n	11fa8 <lv_txt_unicode_to_utf8+0x2e>
    else if(letter_uni < 0x110000) {
   11fe0:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   11fe4:	d2e0      	bcs.n	11fa8 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
   11fe6:	f3c0 4382 	ubfx	r3, r0, #18, #3
   11fea:	f063 030f 	orn	r3, r3, #15
   11fee:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
   11ff2:	f3c0 3305 	ubfx	r3, r0, #12, #6
   11ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11ffa:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
   11ffe:	f3c0 1385 	ubfx	r3, r0, #6, #6
   12002:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12006:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
   1200a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1200e:	f060 007f 	orn	r0, r0, #127	; 0x7f
   12012:	f88d 0007 	strb.w	r0, [sp, #7]
   12016:	e7c7      	b.n	11fa8 <lv_txt_unicode_to_utf8+0x2e>

00012018 <lv_txt_utf8_conv_wc>:
 * Convert a wide character, e.g. 'Á' little endian to be UTF-8 compatible
 * @param c a wide character or a  Little endian number
 * @return `c` in big endian
 */
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)
{
   12018:	b082      	sub	sp, #8
   1201a:	9001      	str	r0, [sp, #4]
    /*Swap the bytes (UTF-8 is big endian, but the MCUs are little endian)*/
    if((c & 0x80) != 0) {
   1201c:	f010 0f80 	tst.w	r0, #128	; 0x80
   12020:	d017      	beq.n	12052 <lv_txt_utf8_conv_wc+0x3a>
        uint32_t swapped;
        uint8_t c8[4];
        _lv_memcpy_small(c8, &c, 4);
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
   12022:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12026:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1202a:	0412      	lsls	r2, r2, #16
   1202c:	eb02 6203 	add.w	r2, r2, r3, lsl #24
   12030:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12034:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   12038:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1203c:	441a      	add	r2, r3
   1203e:	2304      	movs	r3, #4
        uint8_t i;
        for(i = 0; i < 4; i++) {
            if((swapped & 0xFF) == 0)
   12040:	f012 0fff 	tst.w	r2, #255	; 0xff
                swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
   12044:	bf08      	it	eq
   12046:	0a12      	lsreq	r2, r2, #8
   12048:	3b01      	subs	r3, #1
        for(i = 0; i < 4; i++) {
   1204a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1204e:	d1f7      	bne.n	12040 <lv_txt_utf8_conv_wc+0x28>
        }
        c = swapped;
   12050:	9201      	str	r2, [sp, #4]
    }

    return c;
}
   12052:	9801      	ldr	r0, [sp, #4]
   12054:	b002      	add	sp, #8
   12056:	4770      	bx	lr

00012058 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
   12058:	b470      	push	{r4, r5, r6}
   1205a:	b083      	sub	sp, #12
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
   1205c:	2300      	movs	r3, #0
   1205e:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   12060:	460c      	mov	r4, r1
   12062:	b151      	cbz	r1, 1207a <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
   12064:	6822      	ldr	r2, [r4, #0]
   12066:	5c83      	ldrb	r3, [r0, r2]
   12068:	f013 0f80 	tst.w	r3, #128	; 0x80
   1206c:	d107      	bne.n	1207e <lv_txt_utf8_next+0x26>
        result = txt[*i];
   1206e:	4618      	mov	r0, r3
        (*i)++;
   12070:	3201      	adds	r2, #1
   12072:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
   12074:	b003      	add	sp, #12
   12076:	bc70      	pop	{r4, r5, r6}
   12078:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
   1207a:	ac01      	add	r4, sp, #4
   1207c:	e7f2      	b.n	12064 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
   1207e:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
   12082:	29c0      	cmp	r1, #192	; 0xc0
   12084:	d00b      	beq.n	1209e <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
   12086:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
   1208a:	29e0      	cmp	r1, #224	; 0xe0
   1208c:	d019      	beq.n	120c2 <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
   1208e:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
   12092:	29f0      	cmp	r1, #240	; 0xf0
   12094:	d033      	beq.n	120fe <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
   12096:	3201      	adds	r2, #1
   12098:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
   1209a:	2000      	movs	r0, #0
   1209c:	e7ea      	b.n	12074 <lv_txt_utf8_next+0x1c>
            (*i)++;
   1209e:	1c51      	adds	r1, r2, #1
   120a0:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   120a2:	5c40      	ldrb	r0, [r0, r1]
   120a4:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   120a8:	2980      	cmp	r1, #128	; 0x80
   120aa:	d001      	beq.n	120b0 <lv_txt_utf8_next+0x58>
   120ac:	2000      	movs	r0, #0
   120ae:	e7e1      	b.n	12074 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   120b0:	019b      	lsls	r3, r3, #6
   120b2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
   120b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   120ba:	4418      	add	r0, r3
            (*i)++;
   120bc:	3202      	adds	r2, #2
   120be:	6022      	str	r2, [r4, #0]
   120c0:	e7d8      	b.n	12074 <lv_txt_utf8_next+0x1c>
            (*i)++;
   120c2:	1c51      	adds	r1, r2, #1
   120c4:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   120c6:	5c41      	ldrb	r1, [r0, r1]
   120c8:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   120cc:	2d80      	cmp	r5, #128	; 0x80
   120ce:	d001      	beq.n	120d4 <lv_txt_utf8_next+0x7c>
   120d0:	2000      	movs	r0, #0
   120d2:	e7cf      	b.n	12074 <lv_txt_utf8_next+0x1c>
            (*i)++;
   120d4:	1c95      	adds	r5, r2, #2
   120d6:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   120d8:	5d40      	ldrb	r0, [r0, r5]
   120da:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
   120de:	2d80      	cmp	r5, #128	; 0x80
   120e0:	d001      	beq.n	120e6 <lv_txt_utf8_next+0x8e>
   120e2:	2000      	movs	r0, #0
   120e4:	e7c6      	b.n	12074 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   120e6:	031b      	lsls	r3, r3, #12
   120e8:	b29b      	uxth	r3, r3
            result += (txt[*i] & 0x3F);
   120ea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   120ee:	4403      	add	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   120f0:	0188      	lsls	r0, r1, #6
   120f2:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
   120f6:	4418      	add	r0, r3
            (*i)++;
   120f8:	3203      	adds	r2, #3
   120fa:	6022      	str	r2, [r4, #0]
   120fc:	e7ba      	b.n	12074 <lv_txt_utf8_next+0x1c>
            (*i)++;
   120fe:	1c51      	adds	r1, r2, #1
   12100:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   12102:	5c41      	ldrb	r1, [r0, r1]
   12104:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   12108:	2d80      	cmp	r5, #128	; 0x80
   1210a:	d001      	beq.n	12110 <lv_txt_utf8_next+0xb8>
   1210c:	2000      	movs	r0, #0
   1210e:	e7b1      	b.n	12074 <lv_txt_utf8_next+0x1c>
            (*i)++;
   12110:	1c95      	adds	r5, r2, #2
   12112:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   12114:	5d45      	ldrb	r5, [r0, r5]
   12116:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   1211a:	2e80      	cmp	r6, #128	; 0x80
   1211c:	d001      	beq.n	12122 <lv_txt_utf8_next+0xca>
   1211e:	2000      	movs	r0, #0
   12120:	e7a8      	b.n	12074 <lv_txt_utf8_next+0x1c>
            (*i)++;
   12122:	1cd6      	adds	r6, r2, #3
   12124:	6026      	str	r6, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   12126:	5d86      	ldrb	r6, [r0, r6]
   12128:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
   1212c:	2880      	cmp	r0, #128	; 0x80
   1212e:	d001      	beq.n	12134 <lv_txt_utf8_next+0xdc>
   12130:	2000      	movs	r0, #0
   12132:	e79f      	b.n	12074 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   12134:	049b      	lsls	r3, r3, #18
   12136:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   1213a:	0309      	lsls	r1, r1, #12
   1213c:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
   12140:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   12142:	01a8      	lsls	r0, r5, #6
   12144:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
   12148:	f006 063f 	and.w	r6, r6, #63	; 0x3f
   1214c:	4430      	add	r0, r6
   1214e:	4418      	add	r0, r3
            (*i)++;
   12150:	3204      	adds	r2, #4
   12152:	6022      	str	r2, [r4, #0]
   12154:	e78e      	b.n	12074 <lv_txt_utf8_next+0x1c>
	...

00012158 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
   12158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1215a:	b083      	sub	sp, #12
   1215c:	4606      	mov	r6, r0
   1215e:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
   12160:	680b      	ldr	r3, [r1, #0]
   12162:	3b01      	subs	r3, #1
   12164:	600b      	str	r3, [r1, #0]
   12166:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
   12168:	4f0e      	ldr	r7, [pc, #56]	; (121a4 <lv_txt_utf8_prev+0x4c>)
   1216a:	e005      	b.n	12178 <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
   1216c:	3801      	subs	r0, #1
   1216e:	6028      	str	r0, [r5, #0]
   12170:	1e63      	subs	r3, r4, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   12172:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   12176:	d008      	beq.n	1218a <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
   12178:	6828      	ldr	r0, [r5, #0]
   1217a:	4430      	add	r0, r6
   1217c:	683b      	ldr	r3, [r7, #0]
   1217e:	4798      	blx	r3
        if(c_size == 0) {
   12180:	b928      	cbnz	r0, 1218e <lv_txt_utf8_prev+0x36>
            if(*i != 0)
   12182:	6828      	ldr	r0, [r5, #0]
   12184:	2800      	cmp	r0, #0
   12186:	d1f1      	bne.n	1216c <lv_txt_utf8_prev+0x14>
   12188:	e009      	b.n	1219e <lv_txt_utf8_prev+0x46>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   1218a:	2000      	movs	r0, #0
   1218c:	e007      	b.n	1219e <lv_txt_utf8_prev+0x46>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
   1218e:	682b      	ldr	r3, [r5, #0]
   12190:	a902      	add	r1, sp, #8
   12192:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
   12196:	4b03      	ldr	r3, [pc, #12]	; (121a4 <lv_txt_utf8_prev+0x4c>)
   12198:	685b      	ldr	r3, [r3, #4]
   1219a:	4630      	mov	r0, r6
   1219c:	4798      	blx	r3

    return letter;
}
   1219e:	b003      	add	sp, #12
   121a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   121a2:	bf00      	nop
   121a4:	20000054 	.word	0x20000054

000121a8 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
   121a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
   121ac:	460e      	mov	r6, r1
   121ae:	b191      	cbz	r1, 121d6 <lv_txt_utf8_get_byte_id+0x2e>
   121b0:	4607      	mov	r7, r0
   121b2:	2400      	movs	r4, #0
   121b4:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   121b6:	f8df 8024 	ldr.w	r8, [pc, #36]	; 121dc <lv_txt_utf8_get_byte_id+0x34>
   121ba:	1938      	adds	r0, r7, r4
   121bc:	f8d8 3000 	ldr.w	r3, [r8]
   121c0:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
   121c2:	2800      	cmp	r0, #0
   121c4:	bf08      	it	eq
   121c6:	2001      	moveq	r0, #1
   121c8:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
   121ca:	3501      	adds	r5, #1
   121cc:	42ae      	cmp	r6, r5
   121ce:	d1f4      	bne.n	121ba <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;
}
   121d0:	4620      	mov	r0, r4
   121d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
   121d6:	460c      	mov	r4, r1
    return byte_cnt;
   121d8:	e7fa      	b.n	121d0 <lv_txt_utf8_get_byte_id+0x28>
   121da:	bf00      	nop
   121dc:	20000054 	.word	0x20000054

000121e0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   121e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   121e2:	b083      	sub	sp, #12
    uint32_t i        = 0;
   121e4:	2300      	movs	r3, #0
   121e6:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
   121e8:	460d      	mov	r5, r1
   121ea:	b169      	cbz	r1, 12208 <lv_txt_utf8_get_char_id+0x28>
   121ec:	4606      	mov	r6, r0
   121ee:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   121f0:	4f06      	ldr	r7, [pc, #24]	; (1220c <lv_txt_utf8_get_char_id+0x2c>)
   121f2:	a901      	add	r1, sp, #4
   121f4:	4630      	mov	r0, r6
   121f6:	687b      	ldr	r3, [r7, #4]
   121f8:	4798      	blx	r3
        char_cnt++;
   121fa:	3401      	adds	r4, #1
    while(i < byte_id) {
   121fc:	9b01      	ldr	r3, [sp, #4]
   121fe:	42ab      	cmp	r3, r5
   12200:	d3f7      	bcc.n	121f2 <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
   12202:	4620      	mov	r0, r4
   12204:	b003      	add	sp, #12
   12206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
   12208:	460c      	mov	r4, r1
    return char_cnt;
   1220a:	e7fa      	b.n	12202 <lv_txt_utf8_get_char_id+0x22>
   1220c:	20000054 	.word	0x20000054

00012210 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
   12210:	b570      	push	{r4, r5, r6, lr}
   12212:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
   12214:	2300      	movs	r3, #0
   12216:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
   12218:	7803      	ldrb	r3, [r0, #0]
   1221a:	b173      	cbz	r3, 1223a <lv_txt_utf8_get_length+0x2a>
   1221c:	4604      	mov	r4, r0
   1221e:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
   12220:	4e07      	ldr	r6, [pc, #28]	; (12240 <lv_txt_utf8_get_length+0x30>)
   12222:	a901      	add	r1, sp, #4
   12224:	4620      	mov	r0, r4
   12226:	6873      	ldr	r3, [r6, #4]
   12228:	4798      	blx	r3
        len++;
   1222a:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
   1222c:	9b01      	ldr	r3, [sp, #4]
   1222e:	5ce3      	ldrb	r3, [r4, r3]
   12230:	2b00      	cmp	r3, #0
   12232:	d1f6      	bne.n	12222 <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
   12234:	4628      	mov	r0, r5
   12236:	b002      	add	sp, #8
   12238:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
   1223a:	2500      	movs	r5, #0
    return len;
   1223c:	e7fa      	b.n	12234 <lv_txt_utf8_get_length+0x24>
   1223e:	bf00      	nop
   12240:	20000054 	.word	0x20000054

00012244 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   12244:	2923      	cmp	r1, #35	; 0x23
   12246:	d004      	beq.n	12252 <_lv_txt_is_cmd+0xe>
    if(*state == LV_TXT_CMD_STATE_PAR) {
   12248:	7803      	ldrb	r3, [r0, #0]
   1224a:	2b01      	cmp	r3, #1
   1224c:	d015      	beq.n	1227a <_lv_txt_is_cmd+0x36>
    bool ret = false;
   1224e:	2000      	movs	r0, #0
   12250:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   12252:	7803      	ldrb	r3, [r0, #0]
   12254:	b91b      	cbnz	r3, 1225e <_lv_txt_is_cmd+0x1a>
            *state = LV_TXT_CMD_STATE_PAR;
   12256:	2301      	movs	r3, #1
   12258:	7003      	strb	r3, [r0, #0]
        ret = true;
   1225a:	4618      	mov	r0, r3
   1225c:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   1225e:	2b01      	cmp	r3, #1
   12260:	d003      	beq.n	1226a <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   12262:	2b02      	cmp	r3, #2
   12264:	d005      	beq.n	12272 <_lv_txt_is_cmd+0x2e>
    bool ret = false;
   12266:	2000      	movs	r0, #0
}
   12268:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   1226a:	2300      	movs	r3, #0
   1226c:	7003      	strb	r3, [r0, #0]
    bool ret = false;
   1226e:	4618      	mov	r0, r3
   12270:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   12272:	2300      	movs	r3, #0
   12274:	7003      	strb	r3, [r0, #0]
            ret    = true;
   12276:	2001      	movs	r0, #1
   12278:	4770      	bx	lr
        if(c == ' ') {
   1227a:	2920      	cmp	r1, #32
   1227c:	d103      	bne.n	12286 <_lv_txt_is_cmd+0x42>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   1227e:	2302      	movs	r3, #2
   12280:	7003      	strb	r3, [r0, #0]
        ret = true;
   12282:	2001      	movs	r0, #1
   12284:	4770      	bx	lr
   12286:	2001      	movs	r0, #1
   12288:	4770      	bx	lr
	...

0001228c <_lv_txt_get_next_line>:
{
   1228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12290:	b091      	sub	sp, #68	; 0x44
   12292:	9105      	str	r1, [sp, #20]
   12294:	9206      	str	r2, [sp, #24]
   12296:	9307      	str	r3, [sp, #28]
   12298:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1229c:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
   1229e:	9008      	str	r0, [sp, #32]
   122a0:	2800      	cmp	r0, #0
   122a2:	f000 80f0 	beq.w	12486 <_lv_txt_get_next_line+0x1fa>
    if(font == NULL) return 0;
   122a6:	2900      	cmp	r1, #0
   122a8:	f000 80ef 	beq.w	1248a <_lv_txt_get_next_line+0x1fe>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   122ac:	f013 0f12 	tst.w	r3, #18
   122b0:	d017      	beq.n	122e2 <_lv_txt_get_next_line+0x56>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   122b2:	7803      	ldrb	r3, [r0, #0]
   122b4:	2b0a      	cmp	r3, #10
   122b6:	f000 80ea 	beq.w	1248e <_lv_txt_get_next_line+0x202>
   122ba:	2b0d      	cmp	r3, #13
   122bc:	f000 80ed 	beq.w	1249a <_lv_txt_get_next_line+0x20e>
   122c0:	2b00      	cmp	r3, #0
   122c2:	f000 80ec 	beq.w	1249e <_lv_txt_get_next_line+0x212>
   122c6:	4601      	mov	r1, r0
   122c8:	2200      	movs	r2, #0
   122ca:	3201      	adds	r2, #1
   122cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   122d0:	2b0a      	cmp	r3, #10
   122d2:	f000 80dd 	beq.w	12490 <_lv_txt_get_next_line+0x204>
   122d6:	2b0d      	cmp	r3, #13
   122d8:	f000 80da 	beq.w	12490 <_lv_txt_get_next_line+0x204>
   122dc:	2b00      	cmp	r3, #0
   122de:	d1f4      	bne.n	122ca <_lv_txt_get_next_line+0x3e>
   122e0:	e0d7      	b.n	12492 <_lv_txt_get_next_line+0x206>
   122e2:	9b04      	ldr	r3, [sp, #16]
   122e4:	f003 0302 	and.w	r3, r3, #2
   122e8:	461a      	mov	r2, r3
   122ea:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   122ec:	f647 4318 	movw	r3, #31768	; 0x7c18
   122f0:	9907      	ldr	r1, [sp, #28]
   122f2:	2a00      	cmp	r2, #0
   122f4:	bf18      	it	ne
   122f6:	4619      	movne	r1, r3
   122f8:	9107      	str	r1, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   122fa:	2300      	movs	r3, #0
   122fc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;                                        /* Iterating index into txt */
   12300:	930e      	str	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
   12302:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 124b0 <_lv_txt_get_next_line+0x224>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   12306:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 124b4 <_lv_txt_get_next_line+0x228>
    while(txt[i] != '\0' && max_width > 0) {
   1230a:	e078      	b.n	123fe <_lv_txt_get_next_line+0x172>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1230c:	9a01      	ldr	r2, [sp, #4]
   1230e:	4621      	mov	r1, r4
   12310:	9805      	ldr	r0, [sp, #20]
   12312:	4b64      	ldr	r3, [pc, #400]	; (124a4 <_lv_txt_get_next_line+0x218>)
   12314:	4798      	blx	r3
        cur_w += letter_w;
   12316:	4405      	add	r5, r0
   12318:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
   1231a:	b200      	sxth	r0, r0
   1231c:	2800      	cmp	r0, #0
   1231e:	dd02      	ble.n	12326 <_lv_txt_get_next_line+0x9a>
            cur_w += letter_space;
   12320:	9b06      	ldr	r3, [sp, #24]
   12322:	441d      	add	r5, r3
   12324:	b2ad      	uxth	r5, r5
   12326:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   12328:	f1b7 3fff 	cmp.w	r7, #4294967295
   1232c:	d038      	beq.n	123a0 <_lv_txt_get_next_line+0x114>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1232e:	f1a4 020a 	sub.w	r2, r4, #10
   12332:	2a16      	cmp	r2, #22
   12334:	d83b      	bhi.n	123ae <_lv_txt_get_next_line+0x122>
   12336:	4b5c      	ldr	r3, [pc, #368]	; (124a8 <_lv_txt_get_next_line+0x21c>)
   12338:	40d3      	lsrs	r3, r2
   1233a:	f013 0f01 	tst.w	r3, #1
   1233e:	d139      	bne.n	123b4 <_lv_txt_get_next_line+0x128>
   12340:	2301      	movs	r3, #1
   12342:	222c      	movs	r2, #44	; 0x2c
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   12344:	4294      	cmp	r4, r2
   12346:	d035      	beq.n	123b4 <_lv_txt_get_next_line+0x128>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   12348:	3301      	adds	r3, #1
   1234a:	b2db      	uxtb	r3, r3
   1234c:	f81a 2003 	ldrb.w	r2, [sl, r3]
   12350:	2a00      	cmp	r2, #0
   12352:	d1f7      	bne.n	12344 <_lv_txt_get_next_line+0xb8>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   12354:	f1b7 3fff 	cmp.w	r7, #4294967295
   12358:	bf08      	it	eq
   1235a:	46ab      	moveq	fp, r5
        i = i_next;
   1235c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
   1235e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12360:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   12362:	9b03      	ldr	r3, [sp, #12]
   12364:	9302      	str	r3, [sp, #8]
   12366:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
   12368:	f818 3006 	ldrb.w	r3, [r8, r6]
   1236c:	2b00      	cmp	r3, #0
   1236e:	d06e      	beq.n	1244e <_lv_txt_get_next_line+0x1c2>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   12370:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12374:	a90d      	add	r1, sp, #52	; 0x34
   12376:	4640      	mov	r0, r8
   12378:	4798      	blx	r3
   1237a:	9001      	str	r0, [sp, #4]
        word_len++;
   1237c:	9b02      	ldr	r3, [sp, #8]
   1237e:	3301      	adds	r3, #1
   12380:	9303      	str	r3, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   12382:	9b04      	ldr	r3, [sp, #16]
   12384:	f013 0f01 	tst.w	r3, #1
   12388:	d0c0      	beq.n	1230c <_lv_txt_get_next_line+0x80>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   1238a:	4621      	mov	r1, r4
   1238c:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   12390:	4b46      	ldr	r3, [pc, #280]	; (124ac <_lv_txt_get_next_line+0x220>)
   12392:	4798      	blx	r3
   12394:	2800      	cmp	r0, #0
   12396:	d0b9      	beq.n	1230c <_lv_txt_get_next_line+0x80>
                i = i_next;
   12398:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
   1239a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1239c:	930c      	str	r3, [sp, #48]	; 0x30
   1239e:	e7e0      	b.n	12362 <_lv_txt_get_next_line+0xd6>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   123a0:	9b06      	ldr	r3, [sp, #24]
   123a2:	1aeb      	subs	r3, r5, r3
   123a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   123a6:	4293      	cmp	r3, r2
   123a8:	bfc8      	it	gt
   123aa:	4637      	movgt	r7, r6
   123ac:	e7bf      	b.n	1232e <_lv_txt_get_next_line+0xa2>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   123ae:	2301      	movs	r3, #1
   123b0:	222c      	movs	r2, #44	; 0x2c
   123b2:	e7c7      	b.n	12344 <_lv_txt_get_next_line+0xb8>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   123b4:	2e00      	cmp	r6, #0
   123b6:	d14a      	bne.n	1244e <_lv_txt_get_next_line+0x1c2>
   123b8:	f1b7 3fff 	cmp.w	r7, #4294967295
   123bc:	d14a      	bne.n	12454 <_lv_txt_get_next_line+0x1c8>
   123be:	46ab      	mov	fp, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   123c0:	9b02      	ldr	r3, [sp, #8]
   123c2:	b123      	cbz	r3, 123ce <_lv_txt_get_next_line+0x142>
   123c4:	2c0d      	cmp	r4, #13
   123c6:	d103      	bne.n	123d0 <_lv_txt_get_next_line+0x144>
   123c8:	9b01      	ldr	r3, [sp, #4]
   123ca:	2b0a      	cmp	r3, #10
   123cc:	d100      	bne.n	123d0 <_lv_txt_get_next_line+0x144>
   123ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        return i;
   123d0:	b2b6      	uxth	r6, r6
        max_width -= word_w;
   123d2:	9b07      	ldr	r3, [sp, #28]
   123d4:	eba3 0b0b 	sub.w	fp, r3, fp
   123d8:	fa0f f38b 	sxth.w	r3, fp
   123dc:	9307      	str	r3, [sp, #28]
        if(advance == 0) {
   123de:	2e00      	cmp	r6, #0
   123e0:	d03a      	beq.n	12458 <_lv_txt_get_next_line+0x1cc>
        i += advance;
   123e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   123e4:	443e      	add	r6, r7
   123e6:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
   123e8:	9a08      	ldr	r2, [sp, #32]
   123ea:	7813      	ldrb	r3, [r2, #0]
   123ec:	2b0a      	cmp	r3, #10
   123ee:	d03f      	beq.n	12470 <_lv_txt_get_next_line+0x1e4>
   123f0:	2b0d      	cmp	r3, #13
   123f2:	d03d      	beq.n	12470 <_lv_txt_get_next_line+0x1e4>
        if(txt[i] == '\n' || txt[i] == '\r') {
   123f4:	5d93      	ldrb	r3, [r2, r6]
   123f6:	2b0a      	cmp	r3, #10
   123f8:	d038      	beq.n	1246c <_lv_txt_get_next_line+0x1e0>
   123fa:	2b0d      	cmp	r3, #13
   123fc:	d036      	beq.n	1246c <_lv_txt_get_next_line+0x1e0>
    while(txt[i] != '\0' && max_width > 0) {
   123fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12400:	930a      	str	r3, [sp, #40]	; 0x28
   12402:	9908      	ldr	r1, [sp, #32]
   12404:	eb01 0803 	add.w	r8, r1, r3
   12408:	5ccb      	ldrb	r3, [r1, r3]
   1240a:	2b00      	cmp	r3, #0
   1240c:	d030      	beq.n	12470 <_lv_txt_get_next_line+0x1e4>
   1240e:	9b07      	ldr	r3, [sp, #28]
   12410:	2b00      	cmp	r3, #0
   12412:	dd2d      	ble.n	12470 <_lv_txt_get_next_line+0x1e4>
    if(txt == NULL || txt[0] == '\0') return 0;
   12414:	f1b8 0f00 	cmp.w	r8, #0
   12418:	d01e      	beq.n	12458 <_lv_txt_get_next_line+0x1cc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1241a:	f647 4318 	movw	r3, #31768	; 0x7c18
   1241e:	9a07      	ldr	r2, [sp, #28]
   12420:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12422:	2900      	cmp	r1, #0
   12424:	bf08      	it	eq
   12426:	4613      	moveq	r3, r2
   12428:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1242a:	2600      	movs	r6, #0
   1242c:	960c      	str	r6, [sp, #48]	; 0x30
   1242e:	960d      	str	r6, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
   12430:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12434:	a90c      	add	r1, sp, #48	; 0x30
   12436:	4640      	mov	r0, r8
   12438:	4798      	blx	r3
   1243a:	4604      	mov	r4, r0
    i_next_next = i_next;
   1243c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1243e:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
   12440:	46b3      	mov	fp, r6
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   12442:	f04f 37ff 	mov.w	r7, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   12446:	9602      	str	r6, [sp, #8]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   12448:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
   1244a:	9601      	str	r6, [sp, #4]
   1244c:	e78c      	b.n	12368 <_lv_txt_get_next_line+0xdc>
    if(break_index == NO_BREAK_FOUND) {
   1244e:	f1b7 3fff 	cmp.w	r7, #4294967295
   12452:	d0b5      	beq.n	123c0 <_lv_txt_get_next_line+0x134>
    if(force) return break_index;
   12454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12456:	b13b      	cbz	r3, 12468 <_lv_txt_get_next_line+0x1dc>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   12458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1245a:	b95b      	cbnz	r3, 12474 <_lv_txt_get_next_line+0x1e8>
   1245c:	4b14      	ldr	r3, [pc, #80]	; (124b0 <_lv_txt_get_next_line+0x224>)
   1245e:	685b      	ldr	r3, [r3, #4]
   12460:	a90e      	add	r1, sp, #56	; 0x38
   12462:	9808      	ldr	r0, [sp, #32]
   12464:	4798      	blx	r3
   12466:	e003      	b.n	12470 <_lv_txt_get_next_line+0x1e4>
    if(force) return break_index;
   12468:	b2be      	uxth	r6, r7
   1246a:	e7b2      	b.n	123d2 <_lv_txt_get_next_line+0x146>
            i++;  /* Include the following newline in the current line */
   1246c:	3601      	adds	r6, #1
   1246e:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
   12470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12472:	b113      	cbz	r3, 1247a <_lv_txt_get_next_line+0x1ee>
    return i;
   12474:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
   12478:	e00c      	b.n	12494 <_lv_txt_get_next_line+0x208>
        _lv_txt_encoded_next(txt, &i);
   1247a:	4b0d      	ldr	r3, [pc, #52]	; (124b0 <_lv_txt_get_next_line+0x224>)
   1247c:	685b      	ldr	r3, [r3, #4]
   1247e:	a90e      	add	r1, sp, #56	; 0x38
   12480:	9808      	ldr	r0, [sp, #32]
   12482:	4798      	blx	r3
   12484:	e7f6      	b.n	12474 <_lv_txt_get_next_line+0x1e8>
    if(txt == NULL) return 0;
   12486:	2000      	movs	r0, #0
   12488:	e004      	b.n	12494 <_lv_txt_get_next_line+0x208>
    if(font == NULL) return 0;
   1248a:	2000      	movs	r0, #0
   1248c:	e002      	b.n	12494 <_lv_txt_get_next_line+0x208>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1248e:	2200      	movs	r2, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   12490:	3201      	adds	r2, #1
        return i;
   12492:	b290      	uxth	r0, r2
}
   12494:	b011      	add	sp, #68	; 0x44
   12496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1249a:	2200      	movs	r2, #0
   1249c:	e7f8      	b.n	12490 <_lv_txt_get_next_line+0x204>
   1249e:	2200      	movs	r2, #0
   124a0:	e7f7      	b.n	12492 <_lv_txt_get_next_line+0x206>
   124a2:	bf00      	nop
   124a4:	0000f2e9 	.word	0x0000f2e9
   124a8:	00400009 	.word	0x00400009
   124ac:	00012245 	.word	0x00012245
   124b0:	20000054 	.word	0x20000054
   124b4:	0001b510 	.word	0x0001b510

000124b8 <_lv_txt_get_width>:
{
   124b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124bc:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
   124be:	2800      	cmp	r0, #0
   124c0:	d040      	beq.n	12544 <_lv_txt_get_width+0x8c>
   124c2:	4605      	mov	r5, r0
    if(font == NULL) return 0;
   124c4:	2a00      	cmp	r2, #0
   124c6:	d03f      	beq.n	12548 <_lv_txt_get_width+0x90>
    uint32_t i                   = 0;
   124c8:	2000      	movs	r0, #0
   124ca:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   124cc:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
   124d0:	b149      	cbz	r1, 124e6 <_lv_txt_get_width+0x2e>
   124d2:	469b      	mov	fp, r3
   124d4:	9201      	str	r2, [sp, #4]
   124d6:	4689      	mov	r9, r1
   124d8:	2400      	movs	r4, #0
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   124da:	4f1c      	ldr	r7, [pc, #112]	; (1254c <_lv_txt_get_width+0x94>)
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   124dc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   124e0:	f00a 0a01 	and.w	sl, sl, #1
   124e4:	e00c      	b.n	12500 <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
   124e6:	4604      	mov	r4, r0
   124e8:	e028      	b.n	1253c <_lv_txt_get_width+0x84>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   124ea:	4642      	mov	r2, r8
   124ec:	4631      	mov	r1, r6
   124ee:	9801      	ldr	r0, [sp, #4]
   124f0:	4b17      	ldr	r3, [pc, #92]	; (12550 <_lv_txt_get_width+0x98>)
   124f2:	4798      	blx	r3
            if(char_width > 0) {
   124f4:	b203      	sxth	r3, r0
   124f6:	2b00      	cmp	r3, #0
   124f8:	dd02      	ble.n	12500 <_lv_txt_get_width+0x48>
                width += letter_space;
   124fa:	445c      	add	r4, fp
   124fc:	4404      	add	r4, r0
   124fe:	b224      	sxth	r4, r4
        while(i < length) {
   12500:	9b03      	ldr	r3, [sp, #12]
   12502:	4599      	cmp	r9, r3
   12504:	d915      	bls.n	12532 <_lv_txt_get_width+0x7a>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   12506:	687b      	ldr	r3, [r7, #4]
   12508:	a903      	add	r1, sp, #12
   1250a:	4628      	mov	r0, r5
   1250c:	4798      	blx	r3
   1250e:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   12510:	687b      	ldr	r3, [r7, #4]
   12512:	2100      	movs	r1, #0
   12514:	9803      	ldr	r0, [sp, #12]
   12516:	4428      	add	r0, r5
   12518:	4798      	blx	r3
   1251a:	4680      	mov	r8, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1251c:	f1ba 0f00 	cmp.w	sl, #0
   12520:	d0e3      	beq.n	124ea <_lv_txt_get_width+0x32>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   12522:	4631      	mov	r1, r6
   12524:	f10d 000b 	add.w	r0, sp, #11
   12528:	4b0a      	ldr	r3, [pc, #40]	; (12554 <_lv_txt_get_width+0x9c>)
   1252a:	4798      	blx	r3
   1252c:	2800      	cmp	r0, #0
   1252e:	d1e7      	bne.n	12500 <_lv_txt_get_width+0x48>
   12530:	e7db      	b.n	124ea <_lv_txt_get_width+0x32>
        if(width > 0) {
   12532:	2c00      	cmp	r4, #0
   12534:	dd02      	ble.n	1253c <_lv_txt_get_width+0x84>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   12536:	eba4 040b 	sub.w	r4, r4, fp
   1253a:	b224      	sxth	r4, r4
}
   1253c:	4620      	mov	r0, r4
   1253e:	b005      	add	sp, #20
   12540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
   12544:	2400      	movs	r4, #0
   12546:	e7f9      	b.n	1253c <_lv_txt_get_width+0x84>
    if(font == NULL) return 0;
   12548:	2400      	movs	r4, #0
   1254a:	e7f7      	b.n	1253c <_lv_txt_get_width+0x84>
   1254c:	20000054 	.word	0x20000054
   12550:	0000f2e9 	.word	0x0000f2e9
   12554:	00012245 	.word	0x00012245

00012558 <_lv_txt_get_size>:
{
   12558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1255c:	b089      	sub	sp, #36	; 0x24
   1255e:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
   12562:	9406      	str	r4, [sp, #24]
   12564:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
   12568:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    size_res->x = 0;
   1256c:	2400      	movs	r4, #0
   1256e:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
   12570:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
   12572:	2900      	cmp	r1, #0
   12574:	d052      	beq.n	1261c <_lv_txt_get_size+0xc4>
   12576:	460f      	mov	r7, r1
    if(font == NULL) return;
   12578:	2a00      	cmp	r2, #0
   1257a:	d04f      	beq.n	1261c <_lv_txt_get_size+0xc4>
   1257c:	9303      	str	r3, [sp, #12]
   1257e:	4611      	mov	r1, r2
   12580:	9202      	str	r2, [sp, #8]
   12582:	4604      	mov	r4, r0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   12584:	f008 0302 	and.w	r3, r8, #2
   12588:	f647 4218 	movw	r2, #31768	; 0x7c18
   1258c:	2b00      	cmp	r3, #0
   1258e:	bf18      	it	ne
   12590:	4615      	movne	r5, r2
   12592:	9504      	str	r5, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   12594:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   12598:	9207      	str	r2, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
   1259a:	fa1f fa82 	uxth.w	sl, r2
    while(text[line_start] != '\0') {
   1259e:	783b      	ldrb	r3, [r7, #0]
   125a0:	2b00      	cmp	r3, #0
   125a2:	d043      	beq.n	1262c <_lv_txt_get_size+0xd4>
   125a4:	463e      	mov	r6, r7
   125a6:	2500      	movs	r5, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   125a8:	f8df b08c 	ldr.w	fp, [pc, #140]	; 12638 <_lv_txt_get_size+0xe0>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   125ac:	9b06      	ldr	r3, [sp, #24]
   125ae:	449a      	add	sl, r3
   125b0:	fa1f f98a 	uxth.w	r9, sl
   125b4:	4647      	mov	r7, r8
   125b6:	46b0      	mov	r8, r6
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   125b8:	9700      	str	r7, [sp, #0]
   125ba:	9b04      	ldr	r3, [sp, #16]
   125bc:	9a03      	ldr	r2, [sp, #12]
   125be:	9902      	ldr	r1, [sp, #8]
   125c0:	4630      	mov	r0, r6
   125c2:	47d8      	blx	fp
   125c4:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   125c6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   125ca:	eb0a 0203 	add.w	r2, sl, r3
   125ce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   125d2:	d223      	bcs.n	1261c <_lv_txt_get_size+0xc4>
   125d4:	f8cd 9014 	str.w	r9, [sp, #20]
            size_res->y += line_space;
   125d8:	444b      	add	r3, r9
   125da:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   125dc:	9700      	str	r7, [sp, #0]
   125de:	9b03      	ldr	r3, [sp, #12]
   125e0:	9a02      	ldr	r2, [sp, #8]
   125e2:	4601      	mov	r1, r0
   125e4:	4630      	mov	r0, r6
   125e6:	4e13      	ldr	r6, [pc, #76]	; (12634 <_lv_txt_get_size+0xdc>)
   125e8:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   125ea:	f9b4 3000 	ldrsh.w	r3, [r4]
   125ee:	4298      	cmp	r0, r3
   125f0:	bfb8      	it	lt
   125f2:	4618      	movlt	r0, r3
   125f4:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
   125f6:	eb08 0605 	add.w	r6, r8, r5
   125fa:	f818 3005 	ldrb.w	r3, [r8, r5]
   125fe:	2b00      	cmp	r3, #0
   12600:	d1da      	bne.n	125b8 <_lv_txt_get_size+0x60>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   12602:	b12d      	cbz	r5, 12610 <_lv_txt_get_size+0xb8>
   12604:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   12608:	2b0a      	cmp	r3, #10
   1260a:	d00a      	beq.n	12622 <_lv_txt_get_size+0xca>
   1260c:	2b0d      	cmp	r3, #13
   1260e:	d008      	beq.n	12622 <_lv_txt_get_size+0xca>
    if(size_res->y == 0)
   12610:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   12614:	b153      	cbz	r3, 1262c <_lv_txt_get_size+0xd4>
        size_res->y -= line_space;
   12616:	9a06      	ldr	r2, [sp, #24]
   12618:	1a9b      	subs	r3, r3, r2
   1261a:	8063      	strh	r3, [r4, #2]
}
   1261c:	b009      	add	sp, #36	; 0x24
   1261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
   12622:	8863      	ldrh	r3, [r4, #2]
   12624:	9a05      	ldr	r2, [sp, #20]
   12626:	441a      	add	r2, r3
   12628:	8062      	strh	r2, [r4, #2]
   1262a:	e7f1      	b.n	12610 <_lv_txt_get_size+0xb8>
        size_res->y = letter_height;
   1262c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   12630:	8063      	strh	r3, [r4, #2]
   12632:	e7f3      	b.n	1261c <_lv_txt_get_size+0xc4>
   12634:	000124b9 	.word	0x000124b9
   12638:	0001228d 	.word	0x0001228d

0001263c <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   1263c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12640:	4681      	mov	r9, r0
   12642:	468a      	mov	sl, r1
   12644:	461f      	mov	r7, r3
   12646:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   1264a:	4614      	mov	r4, r2
   1264c:	b932      	cbnz	r2, 1265c <_lv_utils_bsearch+0x20>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   1264e:	2000      	movs	r0, #0
   12650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(c < 0) {
   12654:	2800      	cmp	r0, #0
   12656:	da14      	bge.n	12682 <_lv_utils_bsearch+0x46>
            n /= 2;
   12658:	462c      	mov	r4, r5
    for(middle = base; n != 0;) {
   1265a:	b17c      	cbz	r4, 1267c <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
   1265c:	0865      	lsrs	r5, r4, #1
   1265e:	fb07 a605 	mla	r6, r7, r5, sl
        if((c = (*cmp)(key, middle)) > 0) {
   12662:	4631      	mov	r1, r6
   12664:	4648      	mov	r0, r9
   12666:	47c0      	blx	r8
   12668:	2800      	cmp	r0, #0
   1266a:	ddf3      	ble.n	12654 <_lv_utils_bsearch+0x18>
            n    = (n / 2) - ((n & 1) == 0);
   1266c:	f084 0401 	eor.w	r4, r4, #1
   12670:	f004 0401 	and.w	r4, r4, #1
   12674:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
   12676:	eb06 0a07 	add.w	sl, r6, r7
   1267a:	e7ee      	b.n	1265a <_lv_utils_bsearch+0x1e>
    return NULL;
   1267c:	2000      	movs	r0, #0
   1267e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
   12682:	4630      	mov	r0, r6
}
   12684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00012688 <lv_theme_set_act>:
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
    act_theme = th;
   12688:	4b01      	ldr	r3, [pc, #4]	; (12690 <lv_theme_set_act+0x8>)
   1268a:	6018      	str	r0, [r3, #0]
   1268c:	4770      	bx	lr
   1268e:	bf00      	nop
   12690:	2000abd0 	.word	0x2000abd0

00012694 <lv_theme_get_font_normal>:
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
    return act_theme->font_normal;
   12694:	4b01      	ldr	r3, [pc, #4]	; (1269c <lv_theme_get_font_normal+0x8>)
   12696:	681b      	ldr	r3, [r3, #0]
}
   12698:	68d8      	ldr	r0, [r3, #12]
   1269a:	4770      	bx	lr
   1269c:	2000abd0 	.word	0x2000abd0

000126a0 <lv_theme_apply>:
{
    return act_theme->flags;
}

void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   126a0:	b508      	push	{r3, lr}
    act_theme->apply_xcb(obj, name);
   126a2:	4b02      	ldr	r3, [pc, #8]	; (126ac <lv_theme_apply+0xc>)
   126a4:	681b      	ldr	r3, [r3, #0]
   126a6:	681b      	ldr	r3, [r3, #0]
   126a8:	4798      	blx	r3
   126aa:	bd08      	pop	{r3, pc}
   126ac:	2000abd0 	.word	0x2000abd0

000126b0 <theme_apply>:
    return &theme;
}


static void theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   126b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   126b4:	4604      	mov	r4, r0
    lv_style_list_t * list;

    switch(name) {
   126b6:	3901      	subs	r1, #1
   126b8:	2927      	cmp	r1, #39	; 0x27
   126ba:	d834      	bhi.n	12726 <theme_apply+0x76>
   126bc:	e8df f011 	tbh	[pc, r1, lsl #1]
   126c0:	00390028 	.word	0x00390028
   126c4:	00a100ec 	.word	0x00a100ec
   126c8:	00600053 	.word	0x00600053
   126cc:	00d803a3 	.word	0x00d803a3
   126d0:	02b20144 	.word	0x02b20144
   126d4:	03cc0046 	.word	0x03cc0046
   126d8:	03fe0273 	.word	0x03fe0273
   126dc:	00e000dc 	.word	0x00e000dc
   126e0:	00e40081 	.word	0x00e40081
   126e4:	00e80193 	.word	0x00e80193
   126e8:	02660247 	.word	0x02660247
   126ec:	016a03e3 	.word	0x016a03e3
   126f0:	023f017c 	.word	0x023f017c
   126f4:	022301a0 	.word	0x022301a0
   126f8:	0375011f 	.word	0x0375011f
   126fc:	01080391 	.word	0x01080391
   12700:	02e000b8 	.word	0x02e000b8
   12704:	01f401c9 	.word	0x01f401c9
   12708:	02040347 	.word	0x02040347
   1270c:	033a0312 	.word	0x033a0312
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   12710:	2100      	movs	r1, #0
   12712:	4b9b      	ldr	r3, [pc, #620]	; (12980 <theme_apply+0x2d0>)
   12714:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   12716:	2100      	movs	r1, #0
   12718:	4620      	mov	r0, r4
   1271a:	4b9a      	ldr	r3, [pc, #616]	; (12984 <theme_apply+0x2d4>)
   1271c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
   1271e:	4b9a      	ldr	r3, [pc, #616]	; (12988 <theme_apply+0x2d8>)
   12720:	6819      	ldr	r1, [r3, #0]
   12722:	4b9a      	ldr	r3, [pc, #616]	; (1298c <theme_apply+0x2dc>)
   12724:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
   12726:	21ff      	movs	r1, #255	; 0xff
   12728:	4620      	mov	r0, r4
   1272a:	4b99      	ldr	r3, [pc, #612]	; (12990 <theme_apply+0x2e0>)
   1272c:	4798      	blx	r3
   1272e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   12732:	2100      	movs	r1, #0
   12734:	4b92      	ldr	r3, [pc, #584]	; (12980 <theme_apply+0x2d0>)
   12736:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   12738:	2100      	movs	r1, #0
   1273a:	4620      	mov	r0, r4
   1273c:	4b91      	ldr	r3, [pc, #580]	; (12984 <theme_apply+0x2d4>)
   1273e:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   12740:	4b91      	ldr	r3, [pc, #580]	; (12988 <theme_apply+0x2d8>)
   12742:	6819      	ldr	r1, [r3, #0]
   12744:	3104      	adds	r1, #4
   12746:	4b91      	ldr	r3, [pc, #580]	; (1298c <theme_apply+0x2dc>)
   12748:	4798      	blx	r3
            break;
   1274a:	e7ec      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1274c:	2100      	movs	r1, #0
   1274e:	4b8c      	ldr	r3, [pc, #560]	; (12980 <theme_apply+0x2d0>)
   12750:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
   12752:	2100      	movs	r1, #0
   12754:	4620      	mov	r0, r4
   12756:	4b8b      	ldr	r3, [pc, #556]	; (12984 <theme_apply+0x2d4>)
   12758:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   1275a:	4b8b      	ldr	r3, [pc, #556]	; (12988 <theme_apply+0x2d8>)
   1275c:	6819      	ldr	r1, [r3, #0]
   1275e:	3104      	adds	r1, #4
   12760:	4b8a      	ldr	r3, [pc, #552]	; (1298c <theme_apply+0x2dc>)
   12762:	4798      	blx	r3
            break;
   12764:	e7df      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12766:	2100      	movs	r1, #0
   12768:	4b85      	ldr	r3, [pc, #532]	; (12980 <theme_apply+0x2d0>)
   1276a:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1276c:	2100      	movs	r1, #0
   1276e:	4620      	mov	r0, r4
   12770:	4b84      	ldr	r3, [pc, #528]	; (12984 <theme_apply+0x2d4>)
   12772:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
   12774:	4b84      	ldr	r3, [pc, #528]	; (12988 <theme_apply+0x2d8>)
   12776:	6819      	ldr	r1, [r3, #0]
   12778:	3110      	adds	r1, #16
   1277a:	4b84      	ldr	r3, [pc, #528]	; (1298c <theme_apply+0x2dc>)
   1277c:	4798      	blx	r3
            break;
   1277e:	e7d2      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
   12780:	2100      	movs	r1, #0
   12782:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 12980 <theme_apply+0x2d0>
   12786:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
   12788:	2100      	movs	r1, #0
   1278a:	4620      	mov	r0, r4
   1278c:	4f7d      	ldr	r7, [pc, #500]	; (12984 <theme_apply+0x2d4>)
   1278e:	47b8      	blx	r7
   12790:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12792:	4e7d      	ldr	r6, [pc, #500]	; (12988 <theme_apply+0x2d8>)
   12794:	6831      	ldr	r1, [r6, #0]
   12796:	3104      	adds	r1, #4
   12798:	4d7c      	ldr	r5, [pc, #496]	; (1298c <theme_apply+0x2dc>)
   1279a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   1279c:	6831      	ldr	r1, [r6, #0]
   1279e:	3118      	adds	r1, #24
   127a0:	4648      	mov	r0, r9
   127a2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
   127a4:	2101      	movs	r1, #1
   127a6:	4620      	mov	r0, r4
   127a8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
   127aa:	2101      	movs	r1, #1
   127ac:	4620      	mov	r0, r4
   127ae:	47b8      	blx	r7
   127b0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   127b2:	6831      	ldr	r1, [r6, #0]
   127b4:	3104      	adds	r1, #4
   127b6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   127b8:	6831      	ldr	r1, [r6, #0]
   127ba:	3108      	adds	r1, #8
   127bc:	4638      	mov	r0, r7
   127be:	47a8      	blx	r5
            break;
   127c0:	e7b1      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
   127c2:	2100      	movs	r1, #0
   127c4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 12980 <theme_apply+0x2d0>
   127c8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
   127ca:	2100      	movs	r1, #0
   127cc:	4620      	mov	r0, r4
   127ce:	4f6d      	ldr	r7, [pc, #436]	; (12984 <theme_apply+0x2d4>)
   127d0:	47b8      	blx	r7
   127d2:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->scr);
   127d4:	4e6c      	ldr	r6, [pc, #432]	; (12988 <theme_apply+0x2d8>)
   127d6:	6831      	ldr	r1, [r6, #0]
   127d8:	4d6c      	ldr	r5, [pc, #432]	; (1298c <theme_apply+0x2dc>)
   127da:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
   127dc:	6831      	ldr	r1, [r6, #0]
   127de:	3168      	adds	r1, #104	; 0x68
   127e0:	4648      	mov	r0, r9
   127e2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
   127e4:	2101      	movs	r1, #1
   127e6:	4620      	mov	r0, r4
   127e8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
   127ea:	2101      	movs	r1, #1
   127ec:	4620      	mov	r0, r4
   127ee:	47b8      	blx	r7
   127f0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   127f2:	6831      	ldr	r1, [r6, #0]
   127f4:	3104      	adds	r1, #4
   127f6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   127f8:	6831      	ldr	r1, [r6, #0]
   127fa:	3108      	adds	r1, #8
   127fc:	4638      	mov	r0, r7
   127fe:	47a8      	blx	r5
            break;
   12800:	e791      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
   12802:	2100      	movs	r1, #0
   12804:	f8df 8178 	ldr.w	r8, [pc, #376]	; 12980 <theme_apply+0x2d0>
   12808:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
   1280a:	2100      	movs	r1, #0
   1280c:	4620      	mov	r0, r4
   1280e:	4f5d      	ldr	r7, [pc, #372]	; (12984 <theme_apply+0x2d4>)
   12810:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   12812:	4e5d      	ldr	r6, [pc, #372]	; (12988 <theme_apply+0x2d8>)
   12814:	6831      	ldr	r1, [r6, #0]
   12816:	3124      	adds	r1, #36	; 0x24
   12818:	4d5c      	ldr	r5, [pc, #368]	; (1298c <theme_apply+0x2dc>)
   1281a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
   1281c:	2101      	movs	r1, #1
   1281e:	4620      	mov	r0, r4
   12820:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
   12822:	2101      	movs	r1, #1
   12824:	4620      	mov	r0, r4
   12826:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   12828:	6831      	ldr	r1, [r6, #0]
   1282a:	3128      	adds	r1, #40	; 0x28
   1282c:	47a8      	blx	r5
            break;
   1282e:	e77a      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
   12830:	2100      	movs	r1, #0
   12832:	f8df 814c 	ldr.w	r8, [pc, #332]	; 12980 <theme_apply+0x2d0>
   12836:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
   12838:	2100      	movs	r1, #0
   1283a:	4620      	mov	r0, r4
   1283c:	4f51      	ldr	r7, [pc, #324]	; (12984 <theme_apply+0x2d4>)
   1283e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   12840:	4e51      	ldr	r6, [pc, #324]	; (12988 <theme_apply+0x2d8>)
   12842:	6831      	ldr	r1, [r6, #0]
   12844:	3124      	adds	r1, #36	; 0x24
   12846:	4d51      	ldr	r5, [pc, #324]	; (1298c <theme_apply+0x2dc>)
   12848:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
   1284a:	2101      	movs	r1, #1
   1284c:	4620      	mov	r0, r4
   1284e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
   12850:	2101      	movs	r1, #1
   12852:	4620      	mov	r0, r4
   12854:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   12856:	6831      	ldr	r1, [r6, #0]
   12858:	3128      	adds	r1, #40	; 0x28
   1285a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
   1285c:	2102      	movs	r1, #2
   1285e:	4620      	mov	r0, r4
   12860:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
   12862:	2102      	movs	r1, #2
   12864:	4620      	mov	r0, r4
   12866:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
   12868:	6831      	ldr	r1, [r6, #0]
   1286a:	319c      	adds	r1, #156	; 0x9c
   1286c:	47a8      	blx	r5
            break;
   1286e:	e75a      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
   12870:	2100      	movs	r1, #0
   12872:	4b43      	ldr	r3, [pc, #268]	; (12980 <theme_apply+0x2d0>)
   12874:	4798      	blx	r3
            break;
   12876:	e756      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   12878:	2100      	movs	r1, #0
   1287a:	4b41      	ldr	r3, [pc, #260]	; (12980 <theme_apply+0x2d0>)
   1287c:	4798      	blx	r3
            break;
   1287e:	e752      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   12880:	2100      	movs	r1, #0
   12882:	4b3f      	ldr	r3, [pc, #252]	; (12980 <theme_apply+0x2d0>)
   12884:	4798      	blx	r3
            break;
   12886:	e74e      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   12888:	2100      	movs	r1, #0
   1288a:	4b3d      	ldr	r3, [pc, #244]	; (12980 <theme_apply+0x2d0>)
   1288c:	4798      	blx	r3
            break;
   1288e:	e74a      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   12890:	2100      	movs	r1, #0
   12892:	4b3b      	ldr	r3, [pc, #236]	; (12980 <theme_apply+0x2d0>)
   12894:	4798      	blx	r3
            break;
   12896:	e746      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
   12898:	2100      	movs	r1, #0
   1289a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 12980 <theme_apply+0x2d0>
   1289e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
   128a0:	2100      	movs	r1, #0
   128a2:	4620      	mov	r0, r4
   128a4:	4f37      	ldr	r7, [pc, #220]	; (12984 <theme_apply+0x2d4>)
   128a6:	47b8      	blx	r7
   128a8:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   128aa:	4e37      	ldr	r6, [pc, #220]	; (12988 <theme_apply+0x2d8>)
   128ac:	6831      	ldr	r1, [r6, #0]
   128ae:	3104      	adds	r1, #4
   128b0:	4d36      	ldr	r5, [pc, #216]	; (1298c <theme_apply+0x2dc>)
   128b2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
   128b4:	6831      	ldr	r1, [r6, #0]
   128b6:	3120      	adds	r1, #32
   128b8:	4648      	mov	r0, r9
   128ba:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
   128bc:	2101      	movs	r1, #1
   128be:	4620      	mov	r0, r4
   128c0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
   128c2:	2101      	movs	r1, #1
   128c4:	4620      	mov	r0, r4
   128c6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   128c8:	6831      	ldr	r1, [r6, #0]
   128ca:	311c      	adds	r1, #28
   128cc:	47a8      	blx	r5
            break;
   128ce:	e72a      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
   128d0:	2100      	movs	r1, #0
   128d2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 12980 <theme_apply+0x2d0>
   128d6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
   128d8:	2100      	movs	r1, #0
   128da:	4620      	mov	r0, r4
   128dc:	4f29      	ldr	r7, [pc, #164]	; (12984 <theme_apply+0x2d4>)
   128de:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
   128e0:	4e29      	ldr	r6, [pc, #164]	; (12988 <theme_apply+0x2d8>)
   128e2:	6831      	ldr	r1, [r6, #0]
   128e4:	3120      	adds	r1, #32
   128e6:	4d29      	ldr	r5, [pc, #164]	; (1298c <theme_apply+0x2dc>)
   128e8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
   128ea:	2101      	movs	r1, #1
   128ec:	4620      	mov	r0, r4
   128ee:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
   128f0:	2101      	movs	r1, #1
   128f2:	4620      	mov	r0, r4
   128f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   128f6:	6831      	ldr	r1, [r6, #0]
   128f8:	311c      	adds	r1, #28
   128fa:	47a8      	blx	r5
            break;
   128fc:	e713      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
   128fe:	2100      	movs	r1, #0
   12900:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12980 <theme_apply+0x2d0>
   12904:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
   12906:	2100      	movs	r1, #0
   12908:	4620      	mov	r0, r4
   1290a:	4f1e      	ldr	r7, [pc, #120]	; (12984 <theme_apply+0x2d4>)
   1290c:	47b8      	blx	r7
   1290e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
   12910:	4e1d      	ldr	r6, [pc, #116]	; (12988 <theme_apply+0x2d8>)
   12912:	6831      	ldr	r1, [r6, #0]
   12914:	3124      	adds	r1, #36	; 0x24
   12916:	4d1d      	ldr	r5, [pc, #116]	; (1298c <theme_apply+0x2dc>)
   12918:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
   1291a:	6831      	ldr	r1, [r6, #0]
   1291c:	3194      	adds	r1, #148	; 0x94
   1291e:	4648      	mov	r0, r9
   12920:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
   12922:	2101      	movs	r1, #1
   12924:	4620      	mov	r0, r4
   12926:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
   12928:	2101      	movs	r1, #1
   1292a:	4620      	mov	r0, r4
   1292c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   1292e:	6831      	ldr	r1, [r6, #0]
   12930:	3128      	adds	r1, #40	; 0x28
   12932:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
   12934:	2102      	movs	r1, #2
   12936:	4620      	mov	r0, r4
   12938:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
   1293a:	2102      	movs	r1, #2
   1293c:	4620      	mov	r0, r4
   1293e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
   12940:	6831      	ldr	r1, [r6, #0]
   12942:	3190      	adds	r1, #144	; 0x90
   12944:	47a8      	blx	r5
            break;
   12946:	e6ee      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
   12948:	2100      	movs	r1, #0
   1294a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12980 <theme_apply+0x2d0>
   1294e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
   12950:	2100      	movs	r1, #0
   12952:	4620      	mov	r0, r4
   12954:	4f0b      	ldr	r7, [pc, #44]	; (12984 <theme_apply+0x2d4>)
   12956:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
   12958:	4e0b      	ldr	r6, [pc, #44]	; (12988 <theme_apply+0x2d8>)
   1295a:	6831      	ldr	r1, [r6, #0]
   1295c:	314c      	adds	r1, #76	; 0x4c
   1295e:	4d0b      	ldr	r5, [pc, #44]	; (1298c <theme_apply+0x2dc>)
   12960:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
   12962:	2140      	movs	r1, #64	; 0x40
   12964:	4620      	mov	r0, r4
   12966:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
   12968:	2140      	movs	r1, #64	; 0x40
   1296a:	4620      	mov	r0, r4
   1296c:	47b8      	blx	r7
   1296e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
   12970:	6831      	ldr	r1, [r6, #0]
   12972:	3110      	adds	r1, #16
   12974:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
   12976:	6831      	ldr	r1, [r6, #0]
   12978:	3150      	adds	r1, #80	; 0x50
   1297a:	4638      	mov	r0, r7
   1297c:	47a8      	blx	r5
            break;
   1297e:	e6d2      	b.n	12726 <theme_apply+0x76>
   12980:	00003219 	.word	0x00003219
   12984:	00003149 	.word	0x00003149
   12988:	2000abd4 	.word	0x2000abd4
   1298c:	00005d65 	.word	0x00005d65
   12990:	000039d9 	.word	0x000039d9
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
   12994:	2100      	movs	r1, #0
   12996:	4b9f      	ldr	r3, [pc, #636]	; (12c14 <theme_apply+0x564>)
   12998:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
   1299a:	2100      	movs	r1, #0
   1299c:	4620      	mov	r0, r4
   1299e:	4b9e      	ldr	r3, [pc, #632]	; (12c18 <theme_apply+0x568>)
   129a0:	4798      	blx	r3
   129a2:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   129a4:	4e9d      	ldr	r6, [pc, #628]	; (12c1c <theme_apply+0x56c>)
   129a6:	6831      	ldr	r1, [r6, #0]
   129a8:	3104      	adds	r1, #4
   129aa:	4d9d      	ldr	r5, [pc, #628]	; (12c20 <theme_apply+0x570>)
   129ac:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
   129ae:	6831      	ldr	r1, [r6, #0]
   129b0:	317c      	adds	r1, #124	; 0x7c
   129b2:	4638      	mov	r0, r7
   129b4:	47a8      	blx	r5
            break;
   129b6:	e6b6      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   129b8:	2140      	movs	r1, #64	; 0x40
   129ba:	f8df 8258 	ldr.w	r8, [pc, #600]	; 12c14 <theme_apply+0x564>
   129be:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   129c0:	2140      	movs	r1, #64	; 0x40
   129c2:	4620      	mov	r0, r4
   129c4:	4f94      	ldr	r7, [pc, #592]	; (12c18 <theme_apply+0x568>)
   129c6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
   129c8:	4e94      	ldr	r6, [pc, #592]	; (12c1c <theme_apply+0x56c>)
   129ca:	6831      	ldr	r1, [r6, #0]
   129cc:	3118      	adds	r1, #24
   129ce:	4d94      	ldr	r5, [pc, #592]	; (12c20 <theme_apply+0x570>)
   129d0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
   129d2:	2141      	movs	r1, #65	; 0x41
   129d4:	4620      	mov	r0, r4
   129d6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
   129d8:	2141      	movs	r1, #65	; 0x41
   129da:	4620      	mov	r0, r4
   129dc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
   129de:	6831      	ldr	r1, [r6, #0]
   129e0:	3110      	adds	r1, #16
   129e2:	47a8      	blx	r5
            break;
   129e4:	e69f      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
   129e6:	2100      	movs	r1, #0
   129e8:	4b8a      	ldr	r3, [pc, #552]	; (12c14 <theme_apply+0x564>)
   129ea:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
   129ec:	2100      	movs	r1, #0
   129ee:	4620      	mov	r0, r4
   129f0:	4b89      	ldr	r3, [pc, #548]	; (12c18 <theme_apply+0x568>)
   129f2:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
   129f4:	4b89      	ldr	r3, [pc, #548]	; (12c1c <theme_apply+0x56c>)
   129f6:	6819      	ldr	r1, [r3, #0]
   129f8:	316c      	adds	r1, #108	; 0x6c
   129fa:	4b89      	ldr	r3, [pc, #548]	; (12c20 <theme_apply+0x570>)
   129fc:	4798      	blx	r3
            break;
   129fe:	e692      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   12a00:	2100      	movs	r1, #0
   12a02:	f8df 8210 	ldr.w	r8, [pc, #528]	; 12c14 <theme_apply+0x564>
   12a06:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
   12a08:	2100      	movs	r1, #0
   12a0a:	4620      	mov	r0, r4
   12a0c:	4f82      	ldr	r7, [pc, #520]	; (12c18 <theme_apply+0x568>)
   12a0e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12a10:	4e82      	ldr	r6, [pc, #520]	; (12c1c <theme_apply+0x56c>)
   12a12:	6831      	ldr	r1, [r6, #0]
   12a14:	3104      	adds	r1, #4
   12a16:	4d82      	ldr	r5, [pc, #520]	; (12c20 <theme_apply+0x570>)
   12a18:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12a1a:	2140      	movs	r1, #64	; 0x40
   12a1c:	4620      	mov	r0, r4
   12a1e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12a20:	2140      	movs	r1, #64	; 0x40
   12a22:	4620      	mov	r0, r4
   12a24:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
   12a26:	6831      	ldr	r1, [r6, #0]
   12a28:	3114      	adds	r1, #20
   12a2a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   12a2c:	2101      	movs	r1, #1
   12a2e:	4620      	mov	r0, r4
   12a30:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   12a32:	2101      	movs	r1, #1
   12a34:	4620      	mov	r0, r4
   12a36:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12a38:	6831      	ldr	r1, [r6, #0]
   12a3a:	3180      	adds	r1, #128	; 0x80
   12a3c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   12a3e:	2102      	movs	r1, #2
   12a40:	4620      	mov	r0, r4
   12a42:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   12a44:	2102      	movs	r1, #2
   12a46:	4620      	mov	r0, r4
   12a48:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   12a4a:	6831      	ldr	r1, [r6, #0]
   12a4c:	3184      	adds	r1, #132	; 0x84
   12a4e:	47a8      	blx	r5
            break;
   12a50:	e669      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
   12a52:	2100      	movs	r1, #0
   12a54:	4d6f      	ldr	r5, [pc, #444]	; (12c14 <theme_apply+0x564>)
   12a56:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
   12a58:	2100      	movs	r1, #0
   12a5a:	4620      	mov	r0, r4
   12a5c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 12c18 <theme_apply+0x568>
   12a60:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->scr);
   12a62:	4f6e      	ldr	r7, [pc, #440]	; (12c1c <theme_apply+0x56c>)
   12a64:	6839      	ldr	r1, [r7, #0]
   12a66:	4e6e      	ldr	r6, [pc, #440]	; (12c20 <theme_apply+0x570>)
   12a68:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCRLLABLE);
   12a6a:	2140      	movs	r1, #64	; 0x40
   12a6c:	4620      	mov	r0, r4
   12a6e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   12a70:	2141      	movs	r1, #65	; 0x41
   12a72:	4620      	mov	r0, r4
   12a74:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   12a76:	2141      	movs	r1, #65	; 0x41
   12a78:	4620      	mov	r0, r4
   12a7a:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   12a7c:	6839      	ldr	r1, [r7, #0]
   12a7e:	31a8      	adds	r1, #168	; 0xa8
   12a80:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
   12a82:	2143      	movs	r1, #67	; 0x43
   12a84:	4620      	mov	r0, r4
   12a86:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
   12a88:	2143      	movs	r1, #67	; 0x43
   12a8a:	4620      	mov	r0, r4
   12a8c:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_indic);
   12a8e:	6839      	ldr	r1, [r7, #0]
   12a90:	31ac      	adds	r1, #172	; 0xac
   12a92:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   12a94:	2142      	movs	r1, #66	; 0x42
   12a96:	4620      	mov	r0, r4
   12a98:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   12a9a:	2142      	movs	r1, #66	; 0x42
   12a9c:	4620      	mov	r0, r4
   12a9e:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns);
   12aa0:	6839      	ldr	r1, [r7, #0]
   12aa2:	31a4      	adds	r1, #164	; 0xa4
   12aa4:	47b0      	blx	r6
            break;
   12aa6:	e63e      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   12aa8:	2100      	movs	r1, #0
   12aaa:	4d5a      	ldr	r5, [pc, #360]	; (12c14 <theme_apply+0x564>)
   12aac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12aae:	2140      	movs	r1, #64	; 0x40
   12ab0:	4620      	mov	r0, r4
   12ab2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   12ab4:	2140      	movs	r1, #64	; 0x40
   12ab6:	4620      	mov	r0, r4
   12ab8:	4b57      	ldr	r3, [pc, #348]	; (12c18 <theme_apply+0x568>)
   12aba:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   12abc:	4b57      	ldr	r3, [pc, #348]	; (12c1c <theme_apply+0x56c>)
   12abe:	6819      	ldr	r1, [r3, #0]
   12ac0:	31b0      	adds	r1, #176	; 0xb0
   12ac2:	4b57      	ldr	r3, [pc, #348]	; (12c20 <theme_apply+0x570>)
   12ac4:	4798      	blx	r3
            break;
   12ac6:	e62e      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
   12ac8:	2100      	movs	r1, #0
   12aca:	f8df 8148 	ldr.w	r8, [pc, #328]	; 12c14 <theme_apply+0x564>
   12ace:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
   12ad0:	2100      	movs	r1, #0
   12ad2:	4620      	mov	r0, r4
   12ad4:	4f50      	ldr	r7, [pc, #320]	; (12c18 <theme_apply+0x568>)
   12ad6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   12ad8:	4e50      	ldr	r6, [pc, #320]	; (12c1c <theme_apply+0x56c>)
   12ada:	6831      	ldr	r1, [r6, #0]
   12adc:	4d50      	ldr	r5, [pc, #320]	; (12c20 <theme_apply+0x570>)
   12ade:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   12ae0:	2101      	movs	r1, #1
   12ae2:	4620      	mov	r0, r4
   12ae4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   12ae6:	2101      	movs	r1, #1
   12ae8:	4620      	mov	r0, r4
   12aea:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12aec:	6831      	ldr	r1, [r6, #0]
   12aee:	3180      	adds	r1, #128	; 0x80
   12af0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   12af2:	2102      	movs	r1, #2
   12af4:	4620      	mov	r0, r4
   12af6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   12af8:	2102      	movs	r1, #2
   12afa:	4620      	mov	r0, r4
   12afc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   12afe:	6831      	ldr	r1, [r6, #0]
   12b00:	3184      	adds	r1, #132	; 0x84
   12b02:	47a8      	blx	r5
            break;
   12b04:	e60f      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
   12b06:	2100      	movs	r1, #0
   12b08:	f8df 8108 	ldr.w	r8, [pc, #264]	; 12c14 <theme_apply+0x564>
   12b0c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
   12b0e:	2100      	movs	r1, #0
   12b10:	4620      	mov	r0, r4
   12b12:	4f41      	ldr	r7, [pc, #260]	; (12c18 <theme_apply+0x568>)
   12b14:	47b8      	blx	r7
   12b16:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12b18:	4e40      	ldr	r6, [pc, #256]	; (12c1c <theme_apply+0x56c>)
   12b1a:	6831      	ldr	r1, [r6, #0]
   12b1c:	3104      	adds	r1, #4
   12b1e:	4d40      	ldr	r5, [pc, #256]	; (12c20 <theme_apply+0x570>)
   12b20:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
   12b22:	6831      	ldr	r1, [r6, #0]
   12b24:	3188      	adds	r1, #136	; 0x88
   12b26:	4648      	mov	r0, r9
   12b28:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
   12b2a:	2103      	movs	r1, #3
   12b2c:	4620      	mov	r0, r4
   12b2e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
   12b30:	2103      	movs	r1, #3
   12b32:	4620      	mov	r0, r4
   12b34:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
   12b36:	6831      	ldr	r1, [r6, #0]
   12b38:	318c      	adds	r1, #140	; 0x8c
   12b3a:	47a8      	blx	r5
            break;
   12b3c:	e5f3      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
   12b3e:	2100      	movs	r1, #0
   12b40:	4b34      	ldr	r3, [pc, #208]	; (12c14 <theme_apply+0x564>)
   12b42:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
   12b44:	2100      	movs	r1, #0
   12b46:	4620      	mov	r0, r4
   12b48:	4b33      	ldr	r3, [pc, #204]	; (12c18 <theme_apply+0x568>)
   12b4a:	4798      	blx	r3
            break;
   12b4c:	e5eb      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
   12b4e:	2100      	movs	r1, #0
   12b50:	4f30      	ldr	r7, [pc, #192]	; (12c14 <theme_apply+0x564>)
   12b52:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
   12b54:	2100      	movs	r1, #0
   12b56:	4620      	mov	r0, r4
   12b58:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 12c18 <theme_apply+0x568>
   12b5c:	47c0      	blx	r8
   12b5e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12b60:	4e2e      	ldr	r6, [pc, #184]	; (12c1c <theme_apply+0x56c>)
   12b62:	6831      	ldr	r1, [r6, #0]
   12b64:	3104      	adds	r1, #4
   12b66:	4d2e      	ldr	r5, [pc, #184]	; (12c20 <theme_apply+0x570>)
   12b68:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
   12b6a:	6831      	ldr	r1, [r6, #0]
   12b6c:	3174      	adds	r1, #116	; 0x74
   12b6e:	4648      	mov	r0, r9
   12b70:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
   12b72:	2140      	movs	r1, #64	; 0x40
   12b74:	4620      	mov	r0, r4
   12b76:	47b8      	blx	r7
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
   12b78:	2101      	movs	r1, #1
   12b7a:	4620      	mov	r0, r4
   12b7c:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
   12b7e:	2101      	movs	r1, #1
   12b80:	4620      	mov	r0, r4
   12b82:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->sb);
   12b84:	6831      	ldr	r1, [r6, #0]
   12b86:	3180      	adds	r1, #128	; 0x80
   12b88:	47a8      	blx	r5
            break;
   12b8a:	e5cc      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12b8c:	2100      	movs	r1, #0
   12b8e:	4b21      	ldr	r3, [pc, #132]	; (12c14 <theme_apply+0x564>)
   12b90:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   12b92:	2100      	movs	r1, #0
   12b94:	4620      	mov	r0, r4
   12b96:	4b20      	ldr	r3, [pc, #128]	; (12c18 <theme_apply+0x568>)
   12b98:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
   12b9a:	4b20      	ldr	r3, [pc, #128]	; (12c1c <theme_apply+0x56c>)
   12b9c:	6819      	ldr	r1, [r3, #0]
   12b9e:	3178      	adds	r1, #120	; 0x78
   12ba0:	4b1f      	ldr	r3, [pc, #124]	; (12c20 <theme_apply+0x570>)
   12ba2:	4798      	blx	r3
            break;
   12ba4:	e5bf      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
   12ba6:	2100      	movs	r1, #0
   12ba8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 12c14 <theme_apply+0x564>
   12bac:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
   12bae:	2100      	movs	r1, #0
   12bb0:	4620      	mov	r0, r4
   12bb2:	4f19      	ldr	r7, [pc, #100]	; (12c18 <theme_apply+0x568>)
   12bb4:	47b8      	blx	r7
   12bb6:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12bb8:	4e18      	ldr	r6, [pc, #96]	; (12c1c <theme_apply+0x56c>)
   12bba:	6831      	ldr	r1, [r6, #0]
   12bbc:	3104      	adds	r1, #4
   12bbe:	4d18      	ldr	r5, [pc, #96]	; (12c20 <theme_apply+0x570>)
   12bc0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   12bc2:	6831      	ldr	r1, [r6, #0]
   12bc4:	3108      	adds	r1, #8
   12bc6:	4648      	mov	r0, r9
   12bc8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12bca:	6831      	ldr	r1, [r6, #0]
   12bcc:	3118      	adds	r1, #24
   12bce:	4648      	mov	r0, r9
   12bd0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
   12bd2:	2140      	movs	r1, #64	; 0x40
   12bd4:	4620      	mov	r0, r4
   12bd6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
   12bd8:	2140      	movs	r1, #64	; 0x40
   12bda:	4620      	mov	r0, r4
   12bdc:	47b8      	blx	r7
   12bde:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12be0:	6831      	ldr	r1, [r6, #0]
   12be2:	3104      	adds	r1, #4
   12be4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
   12be6:	6831      	ldr	r1, [r6, #0]
   12be8:	3154      	adds	r1, #84	; 0x54
   12bea:	4648      	mov	r0, r9
   12bec:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   12bee:	2141      	movs	r1, #65	; 0x41
   12bf0:	4620      	mov	r0, r4
   12bf2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   12bf4:	2141      	movs	r1, #65	; 0x41
   12bf6:	4620      	mov	r0, r4
   12bf8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12bfa:	6831      	ldr	r1, [r6, #0]
   12bfc:	3180      	adds	r1, #128	; 0x80
   12bfe:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   12c00:	2142      	movs	r1, #66	; 0x42
   12c02:	4620      	mov	r0, r4
   12c04:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   12c06:	2142      	movs	r1, #66	; 0x42
   12c08:	4620      	mov	r0, r4
   12c0a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
   12c0c:	6831      	ldr	r1, [r6, #0]
   12c0e:	3158      	adds	r1, #88	; 0x58
   12c10:	47a8      	blx	r5
            break;
   12c12:	e588      	b.n	12726 <theme_apply+0x76>
   12c14:	00003219 	.word	0x00003219
   12c18:	00003149 	.word	0x00003149
   12c1c:	2000abd4 	.word	0x2000abd4
   12c20:	00005d65 	.word	0x00005d65
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
   12c24:	2100      	movs	r1, #0
   12c26:	f8df 8290 	ldr.w	r8, [pc, #656]	; 12eb8 <theme_apply+0x808>
   12c2a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
   12c2c:	2100      	movs	r1, #0
   12c2e:	4620      	mov	r0, r4
   12c30:	4f9e      	ldr	r7, [pc, #632]	; (12eac <theme_apply+0x7fc>)
   12c32:	47b8      	blx	r7
   12c34:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12c36:	4e9e      	ldr	r6, [pc, #632]	; (12eb0 <theme_apply+0x800>)
   12c38:	6831      	ldr	r1, [r6, #0]
   12c3a:	3104      	adds	r1, #4
   12c3c:	4d9d      	ldr	r5, [pc, #628]	; (12eb4 <theme_apply+0x804>)
   12c3e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
   12c40:	6831      	ldr	r1, [r6, #0]
   12c42:	3140      	adds	r1, #64	; 0x40
   12c44:	4648      	mov	r0, r9
   12c46:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12c48:	6831      	ldr	r1, [r6, #0]
   12c4a:	3118      	adds	r1, #24
   12c4c:	4648      	mov	r0, r9
   12c4e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
   12c50:	2101      	movs	r1, #1
   12c52:	4620      	mov	r0, r4
   12c54:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
   12c56:	2101      	movs	r1, #1
   12c58:	4620      	mov	r0, r4
   12c5a:	47b8      	blx	r7
   12c5c:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->pad_small);
   12c5e:	6831      	ldr	r1, [r6, #0]
   12c60:	3118      	adds	r1, #24
   12c62:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
   12c64:	6831      	ldr	r1, [r6, #0]
   12c66:	3144      	adds	r1, #68	; 0x44
   12c68:	4648      	mov	r0, r9
   12c6a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   12c6c:	2102      	movs	r1, #2
   12c6e:	4620      	mov	r0, r4
   12c70:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
   12c72:	2102      	movs	r1, #2
   12c74:	4620      	mov	r0, r4
   12c76:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
   12c78:	6831      	ldr	r1, [r6, #0]
   12c7a:	3148      	adds	r1, #72	; 0x48
   12c7c:	47a8      	blx	r5
            break;
   12c7e:	e552      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
   12c80:	2100      	movs	r1, #0
   12c82:	f8df 8234 	ldr.w	r8, [pc, #564]	; 12eb8 <theme_apply+0x808>
   12c86:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
   12c88:	2100      	movs	r1, #0
   12c8a:	4620      	mov	r0, r4
   12c8c:	4f87      	ldr	r7, [pc, #540]	; (12eac <theme_apply+0x7fc>)
   12c8e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12c90:	4e87      	ldr	r6, [pc, #540]	; (12eb0 <theme_apply+0x800>)
   12c92:	6831      	ldr	r1, [r6, #0]
   12c94:	3104      	adds	r1, #4
   12c96:	4d87      	ldr	r5, [pc, #540]	; (12eb4 <theme_apply+0x804>)
   12c98:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
   12c9a:	2101      	movs	r1, #1
   12c9c:	4620      	mov	r0, r4
   12c9e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL1);
   12ca0:	2101      	movs	r1, #1
   12ca2:	4620      	mov	r0, r4
   12ca4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12ca6:	6831      	ldr	r1, [r6, #0]
   12ca8:	31a0      	adds	r1, #160	; 0xa0
   12caa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
   12cac:	2102      	movs	r1, #2
   12cae:	4620      	mov	r0, r4
   12cb0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL2);
   12cb2:	2102      	movs	r1, #2
   12cb4:	4620      	mov	r0, r4
   12cb6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12cb8:	6831      	ldr	r1, [r6, #0]
   12cba:	31a0      	adds	r1, #160	; 0xa0
   12cbc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
   12cbe:	2103      	movs	r1, #3
   12cc0:	4620      	mov	r0, r4
   12cc2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL3);
   12cc4:	2103      	movs	r1, #3
   12cc6:	4620      	mov	r0, r4
   12cc8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12cca:	6831      	ldr	r1, [r6, #0]
   12ccc:	31a0      	adds	r1, #160	; 0xa0
   12cce:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
   12cd0:	2104      	movs	r1, #4
   12cd2:	4620      	mov	r0, r4
   12cd4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL4);
   12cd6:	2104      	movs	r1, #4
   12cd8:	4620      	mov	r0, r4
   12cda:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   12cdc:	6831      	ldr	r1, [r6, #0]
   12cde:	31a0      	adds	r1, #160	; 0xa0
   12ce0:	47a8      	blx	r5
            break;
   12ce2:	e520      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
   12ce4:	2100      	movs	r1, #0
   12ce6:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 12eb8 <theme_apply+0x808>
   12cea:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
   12cec:	2100      	movs	r1, #0
   12cee:	4620      	mov	r0, r4
   12cf0:	4f6e      	ldr	r7, [pc, #440]	; (12eac <theme_apply+0x7fc>)
   12cf2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   12cf4:	4e6e      	ldr	r6, [pc, #440]	; (12eb0 <theme_apply+0x800>)
   12cf6:	6831      	ldr	r1, [r6, #0]
   12cf8:	4d6e      	ldr	r5, [pc, #440]	; (12eb4 <theme_apply+0x804>)
   12cfa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
   12cfc:	2142      	movs	r1, #66	; 0x42
   12cfe:	4620      	mov	r0, r4
   12d00:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
   12d02:	2142      	movs	r1, #66	; 0x42
   12d04:	4620      	mov	r0, r4
   12d06:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12d08:	6831      	ldr	r1, [r6, #0]
   12d0a:	3180      	adds	r1, #128	; 0x80
   12d0c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   12d0e:	2141      	movs	r1, #65	; 0x41
   12d10:	4620      	mov	r0, r4
   12d12:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   12d14:	2141      	movs	r1, #65	; 0x41
   12d16:	4620      	mov	r0, r4
   12d18:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   12d1a:	6831      	ldr	r1, [r6, #0]
   12d1c:	31b0      	adds	r1, #176	; 0xb0
   12d1e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
   12d20:	2140      	movs	r1, #64	; 0x40
   12d22:	4620      	mov	r0, r4
   12d24:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
   12d26:	2140      	movs	r1, #64	; 0x40
   12d28:	4620      	mov	r0, r4
   12d2a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   12d2c:	6831      	ldr	r1, [r6, #0]
   12d2e:	31a8      	adds	r1, #168	; 0xa8
   12d30:	47a8      	blx	r5
            break;
   12d32:	e4f8      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12d34:	2100      	movs	r1, #0
   12d36:	4b60      	ldr	r3, [pc, #384]	; (12eb8 <theme_apply+0x808>)
   12d38:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   12d3a:	2100      	movs	r1, #0
   12d3c:	4620      	mov	r0, r4
   12d3e:	4b5b      	ldr	r3, [pc, #364]	; (12eac <theme_apply+0x7fc>)
   12d40:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
   12d42:	4b5b      	ldr	r3, [pc, #364]	; (12eb0 <theme_apply+0x800>)
   12d44:	6819      	ldr	r1, [r3, #0]
   12d46:	31a4      	adds	r1, #164	; 0xa4
   12d48:	4b5a      	ldr	r3, [pc, #360]	; (12eb4 <theme_apply+0x804>)
   12d4a:	4798      	blx	r3
            break;
   12d4c:	e4eb      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
   12d4e:	2100      	movs	r1, #0
   12d50:	f8df 8164 	ldr.w	r8, [pc, #356]	; 12eb8 <theme_apply+0x808>
   12d54:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
   12d56:	2100      	movs	r1, #0
   12d58:	4620      	mov	r0, r4
   12d5a:	4f54      	ldr	r7, [pc, #336]	; (12eac <theme_apply+0x7fc>)
   12d5c:	47b8      	blx	r7
   12d5e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12d60:	4e53      	ldr	r6, [pc, #332]	; (12eb0 <theme_apply+0x800>)
   12d62:	6831      	ldr	r1, [r6, #0]
   12d64:	3104      	adds	r1, #4
   12d66:	4d53      	ldr	r5, [pc, #332]	; (12eb4 <theme_apply+0x804>)
   12d68:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12d6a:	6831      	ldr	r1, [r6, #0]
   12d6c:	3118      	adds	r1, #24
   12d6e:	4648      	mov	r0, r9
   12d70:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   12d72:	2104      	movs	r1, #4
   12d74:	4620      	mov	r0, r4
   12d76:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   12d78:	2104      	movs	r1, #4
   12d7a:	4620      	mov	r0, r4
   12d7c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
   12d7e:	6831      	ldr	r1, [r6, #0]
   12d80:	31b8      	adds	r1, #184	; 0xb8
   12d82:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   12d84:	2103      	movs	r1, #3
   12d86:	4620      	mov	r0, r4
   12d88:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   12d8a:	2103      	movs	r1, #3
   12d8c:	4620      	mov	r0, r4
   12d8e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
   12d90:	6831      	ldr	r1, [r6, #0]
   12d92:	31b4      	adds	r1, #180	; 0xb4
   12d94:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   12d96:	2101      	movs	r1, #1
   12d98:	4620      	mov	r0, r4
   12d9a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   12d9c:	2101      	movs	r1, #1
   12d9e:	4620      	mov	r0, r4
   12da0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12da2:	6831      	ldr	r1, [r6, #0]
   12da4:	3180      	adds	r1, #128	; 0x80
   12da6:	47a8      	blx	r5
            break;
   12da8:	e4bd      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
   12daa:	2100      	movs	r1, #0
   12dac:	f8df 8108 	ldr.w	r8, [pc, #264]	; 12eb8 <theme_apply+0x808>
   12db0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
   12db2:	2100      	movs	r1, #0
   12db4:	4620      	mov	r0, r4
   12db6:	4f3d      	ldr	r7, [pc, #244]	; (12eac <theme_apply+0x7fc>)
   12db8:	47b8      	blx	r7
   12dba:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12dbc:	4e3c      	ldr	r6, [pc, #240]	; (12eb0 <theme_apply+0x800>)
   12dbe:	6831      	ldr	r1, [r6, #0]
   12dc0:	3104      	adds	r1, #4
   12dc2:	4d3c      	ldr	r5, [pc, #240]	; (12eb4 <theme_apply+0x804>)
   12dc4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   12dc6:	6831      	ldr	r1, [r6, #0]
   12dc8:	3118      	adds	r1, #24
   12dca:	4648      	mov	r0, r9
   12dcc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
   12dce:	2103      	movs	r1, #3
   12dd0:	4620      	mov	r0, r4
   12dd2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
   12dd4:	2103      	movs	r1, #3
   12dd6:	4620      	mov	r0, r4
   12dd8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
   12dda:	6831      	ldr	r1, [r6, #0]
   12ddc:	3198      	adds	r1, #152	; 0x98
   12dde:	47a8      	blx	r5
            break;
   12de0:	e4a1      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12de2:	2100      	movs	r1, #0
   12de4:	4b34      	ldr	r3, [pc, #208]	; (12eb8 <theme_apply+0x808>)
   12de6:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   12de8:	2100      	movs	r1, #0
   12dea:	4620      	mov	r0, r4
   12dec:	4b2f      	ldr	r3, [pc, #188]	; (12eac <theme_apply+0x7fc>)
   12dee:	4798      	blx	r3
   12df0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   12df2:	4e2f      	ldr	r6, [pc, #188]	; (12eb0 <theme_apply+0x800>)
   12df4:	6831      	ldr	r1, [r6, #0]
   12df6:	3104      	adds	r1, #4
   12df8:	4d2e      	ldr	r5, [pc, #184]	; (12eb4 <theme_apply+0x804>)
   12dfa:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   12dfc:	6831      	ldr	r1, [r6, #0]
   12dfe:	3108      	adds	r1, #8
   12e00:	4638      	mov	r0, r7
   12e02:	47a8      	blx	r5
            break;
   12e04:	e48f      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
   12e06:	2100      	movs	r1, #0
   12e08:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 12eb8 <theme_apply+0x808>
   12e0c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
   12e0e:	2100      	movs	r1, #0
   12e10:	4620      	mov	r0, r4
   12e12:	4f26      	ldr	r7, [pc, #152]	; (12eac <theme_apply+0x7fc>)
   12e14:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12e16:	4e26      	ldr	r6, [pc, #152]	; (12eb0 <theme_apply+0x800>)
   12e18:	6831      	ldr	r1, [r6, #0]
   12e1a:	3104      	adds	r1, #4
   12e1c:	4d25      	ldr	r5, [pc, #148]	; (12eb4 <theme_apply+0x804>)
   12e1e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
   12e20:	2103      	movs	r1, #3
   12e22:	4620      	mov	r0, r4
   12e24:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
   12e26:	2103      	movs	r1, #3
   12e28:	4620      	mov	r0, r4
   12e2a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
   12e2c:	6831      	ldr	r1, [r6, #0]
   12e2e:	312c      	adds	r1, #44	; 0x2c
   12e30:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
   12e32:	2101      	movs	r1, #1
   12e34:	4620      	mov	r0, r4
   12e36:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
   12e38:	2101      	movs	r1, #1
   12e3a:	4620      	mov	r0, r4
   12e3c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
   12e3e:	6831      	ldr	r1, [r6, #0]
   12e40:	3130      	adds	r1, #48	; 0x30
   12e42:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   12e44:	2102      	movs	r1, #2
   12e46:	4620      	mov	r0, r4
   12e48:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   12e4a:	2102      	movs	r1, #2
   12e4c:	4620      	mov	r0, r4
   12e4e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
   12e50:	6831      	ldr	r1, [r6, #0]
   12e52:	3134      	adds	r1, #52	; 0x34
   12e54:	47a8      	blx	r5
            break;
   12e56:	e466      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
   12e58:	2100      	movs	r1, #0
   12e5a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 12eb8 <theme_apply+0x808>
   12e5e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
   12e60:	2100      	movs	r1, #0
   12e62:	4620      	mov	r0, r4
   12e64:	4f11      	ldr	r7, [pc, #68]	; (12eac <theme_apply+0x7fc>)
   12e66:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
   12e68:	4e11      	ldr	r6, [pc, #68]	; (12eb0 <theme_apply+0x800>)
   12e6a:	6831      	ldr	r1, [r6, #0]
   12e6c:	3138      	adds	r1, #56	; 0x38
   12e6e:	4d11      	ldr	r5, [pc, #68]	; (12eb4 <theme_apply+0x804>)
   12e70:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
   12e72:	2101      	movs	r1, #1
   12e74:	4620      	mov	r0, r4
   12e76:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
   12e78:	2101      	movs	r1, #1
   12e7a:	4620      	mov	r0, r4
   12e7c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
   12e7e:	6831      	ldr	r1, [r6, #0]
   12e80:	313c      	adds	r1, #60	; 0x3c
   12e82:	47a8      	blx	r5
            break;
   12e84:	e44f      	b.n	12726 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
   12e86:	2100      	movs	r1, #0
   12e88:	4b0b      	ldr	r3, [pc, #44]	; (12eb8 <theme_apply+0x808>)
   12e8a:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
   12e8c:	2100      	movs	r1, #0
   12e8e:	4620      	mov	r0, r4
   12e90:	4b06      	ldr	r3, [pc, #24]	; (12eac <theme_apply+0x7fc>)
   12e92:	4798      	blx	r3
   12e94:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   12e96:	4e06      	ldr	r6, [pc, #24]	; (12eb0 <theme_apply+0x800>)
   12e98:	6831      	ldr	r1, [r6, #0]
   12e9a:	3104      	adds	r1, #4
   12e9c:	4d05      	ldr	r5, [pc, #20]	; (12eb4 <theme_apply+0x804>)
   12e9e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
   12ea0:	6831      	ldr	r1, [r6, #0]
   12ea2:	3170      	adds	r1, #112	; 0x70
   12ea4:	4638      	mov	r0, r7
   12ea6:	47a8      	blx	r5
            break;
   12ea8:	e43d      	b.n	12726 <theme_apply+0x76>
   12eaa:	bf00      	nop
   12eac:	00003149 	.word	0x00003149
   12eb0:	2000abd4 	.word	0x2000abd4
   12eb4:	00005d65 	.word	0x00005d65
   12eb8:	00003219 	.word	0x00003219
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
   12ebc:	2100      	movs	r1, #0
   12ebe:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12f14 <theme_apply+0x864>
   12ec2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
   12ec4:	2100      	movs	r1, #0
   12ec6:	4620      	mov	r0, r4
   12ec8:	4f0f      	ldr	r7, [pc, #60]	; (12f08 <theme_apply+0x858>)
   12eca:	47b8      	blx	r7
   12ecc:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   12ece:	4e0f      	ldr	r6, [pc, #60]	; (12f0c <theme_apply+0x85c>)
   12ed0:	6831      	ldr	r1, [r6, #0]
   12ed2:	3104      	adds	r1, #4
   12ed4:	4d0e      	ldr	r5, [pc, #56]	; (12f10 <theme_apply+0x860>)
   12ed6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
   12ed8:	6831      	ldr	r1, [r6, #0]
   12eda:	315c      	adds	r1, #92	; 0x5c
   12edc:	4648      	mov	r0, r9
   12ede:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
   12ee0:	2101      	movs	r1, #1
   12ee2:	4620      	mov	r0, r4
   12ee4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
   12ee6:	2101      	movs	r1, #1
   12ee8:	4620      	mov	r0, r4
   12eea:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
   12eec:	6831      	ldr	r1, [r6, #0]
   12eee:	3160      	adds	r1, #96	; 0x60
   12ef0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
   12ef2:	2102      	movs	r1, #2
   12ef4:	4620      	mov	r0, r4
   12ef6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
   12ef8:	2102      	movs	r1, #2
   12efa:	4620      	mov	r0, r4
   12efc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
   12efe:	6831      	ldr	r1, [r6, #0]
   12f00:	3164      	adds	r1, #100	; 0x64
   12f02:	47a8      	blx	r5
            break;
   12f04:	e40f      	b.n	12726 <theme_apply+0x76>
   12f06:	bf00      	nop
   12f08:	00003149 	.word	0x00003149
   12f0c:	2000abd4 	.word	0x2000abd4
   12f10:	00005d65 	.word	0x00005d65
   12f14:	00003219 	.word	0x00003219

00012f18 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
   12f18:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
   12f1a:	4b04      	ldr	r3, [pc, #16]	; (12f2c <style_init_reset+0x14>)
   12f1c:	791b      	ldrb	r3, [r3, #4]
   12f1e:	b913      	cbnz	r3, 12f26 <style_init_reset+0xe>
    else lv_style_init(style);
   12f20:	4b03      	ldr	r3, [pc, #12]	; (12f30 <style_init_reset+0x18>)
   12f22:	4798      	blx	r3
   12f24:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
   12f26:	4b03      	ldr	r3, [pc, #12]	; (12f34 <style_init_reset+0x1c>)
   12f28:	4798      	blx	r3
   12f2a:	bd08      	pop	{r3, pc}
   12f2c:	2000abd4 	.word	0x2000abd4
   12f30:	00005c9d 	.word	0x00005c9d
   12f34:	00005e81 	.word	0x00005e81

00012f38 <basic_init>:
{
   12f38:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->scr);
   12f3a:	4cb3      	ldr	r4, [pc, #716]	; (13208 <basic_init+0x2d0>)
   12f3c:	6820      	ldr	r0, [r4, #0]
   12f3e:	4bb3      	ldr	r3, [pc, #716]	; (1320c <basic_init+0x2d4>)
   12f40:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   12f42:	22ff      	movs	r2, #255	; 0xff
   12f44:	212c      	movs	r1, #44	; 0x2c
   12f46:	6820      	ldr	r0, [r4, #0]
   12f48:	4bb1      	ldr	r3, [pc, #708]	; (13210 <basic_init+0x2d8>)
   12f4a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
   12f4c:	6a23      	ldr	r3, [r4, #32]
   12f4e:	f013 0302 	ands.w	r3, r3, #2
   12f52:	bf14      	ite	ne
   12f54:	211d      	movne	r1, #29
   12f56:	2108      	moveq	r1, #8
   12f58:	2b00      	cmp	r3, #0
   12f5a:	bf15      	itete	ne
   12f5c:	203b      	movne	r0, #59	; 0x3b
   12f5e:	2012      	moveq	r0, #18
   12f60:	231e      	movne	r3, #30
   12f62:	230b      	moveq	r3, #11
   12f64:	f04f 0200 	mov.w	r2, #0
   12f68:	f363 0204 	bfi	r2, r3, #0, #5
   12f6c:	f360 124a 	bfi	r2, r0, #5, #6
   12f70:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   12f74:	2129      	movs	r1, #41	; 0x29
   12f76:	6820      	ldr	r0, [r4, #0]
   12f78:	4ba6      	ldr	r3, [pc, #664]	; (13214 <basic_init+0x2dc>)
   12f7a:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   12f7c:	4620      	mov	r0, r4
   12f7e:	6a23      	ldr	r3, [r4, #32]
   12f80:	f013 0302 	ands.w	r3, r3, #2
   12f84:	bf14      	ite	ne
   12f86:	2107      	movne	r1, #7
   12f88:	211c      	moveq	r1, #28
   12f8a:	2b00      	cmp	r3, #0
   12f8c:	bf15      	itete	ne
   12f8e:	240f      	movne	r4, #15
   12f90:	243a      	moveq	r4, #58	; 0x3a
   12f92:	2308      	movne	r3, #8
   12f94:	231d      	moveq	r3, #29
   12f96:	f04f 0200 	mov.w	r2, #0
   12f9a:	f363 0204 	bfi	r2, r3, #0, #5
   12f9e:	f364 124a 	bfi	r2, r4, #5, #6
   12fa2:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   12fa6:	f248 0189 	movw	r1, #32905	; 0x8089
   12faa:	6800      	ldr	r0, [r0, #0]
   12fac:	4b99      	ldr	r3, [pc, #612]	; (13214 <basic_init+0x2dc>)
   12fae:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   12fb0:	4895      	ldr	r0, [pc, #596]	; (13208 <basic_init+0x2d0>)
   12fb2:	6a03      	ldr	r3, [r0, #32]
   12fb4:	f013 0302 	ands.w	r3, r3, #2
   12fb8:	bf14      	ite	ne
   12fba:	2107      	movne	r1, #7
   12fbc:	211c      	moveq	r1, #28
   12fbe:	2b00      	cmp	r3, #0
   12fc0:	bf15      	itete	ne
   12fc2:	240f      	movne	r4, #15
   12fc4:	243a      	moveq	r4, #58	; 0x3a
   12fc6:	2308      	movne	r3, #8
   12fc8:	231d      	moveq	r3, #29
   12fca:	f04f 0200 	mov.w	r2, #0
   12fce:	f363 0204 	bfi	r2, r3, #0, #5
   12fd2:	f364 124a 	bfi	r2, r4, #5, #6
   12fd6:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   12fda:	2179      	movs	r1, #121	; 0x79
   12fdc:	6800      	ldr	r0, [r0, #0]
   12fde:	4b8d      	ldr	r3, [pc, #564]	; (13214 <basic_init+0x2dc>)
   12fe0:	4798      	blx	r3
    lv_style_set_text_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
   12fe2:	4c89      	ldr	r4, [pc, #548]	; (13208 <basic_init+0x2d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   12fe4:	6962      	ldr	r2, [r4, #20]
   12fe6:	f248 018e 	movw	r1, #32910	; 0x808e
   12fea:	6820      	ldr	r0, [r4, #0]
   12fec:	4d8a      	ldr	r5, [pc, #552]	; (13218 <basic_init+0x2e0>)
   12fee:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   12ff0:	6962      	ldr	r2, [r4, #20]
   12ff2:	217e      	movs	r1, #126	; 0x7e
   12ff4:	6820      	ldr	r0, [r4, #0]
   12ff6:	47a8      	blx	r5
    style_init_reset(&styles->bg);
   12ff8:	6820      	ldr	r0, [r4, #0]
   12ffa:	3004      	adds	r0, #4
   12ffc:	4b83      	ldr	r3, [pc, #524]	; (1320c <basic_init+0x2d4>)
   12ffe:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   13000:	6824      	ldr	r4, [r4, #0]
   13002:	3404      	adds	r4, #4
   13004:	2000      	movs	r0, #0
   13006:	4b85      	ldr	r3, [pc, #532]	; (1321c <basic_init+0x2e4>)
   13008:	4798      	blx	r3
   1300a:	300a      	adds	r0, #10
   1300c:	00c0      	lsls	r0, r0, #3
   1300e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13012:	f080 8646 	bcs.w	13ca2 <basic_init+0xd6a>
   13016:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13018:	2101      	movs	r1, #1
   1301a:	4620      	mov	r0, r4
   1301c:	4b80      	ldr	r3, [pc, #512]	; (13220 <basic_init+0x2e8>)
   1301e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   13020:	4c79      	ldr	r4, [pc, #484]	; (13208 <basic_init+0x2d0>)
   13022:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13024:	22ff      	movs	r2, #255	; 0xff
   13026:	212c      	movs	r1, #44	; 0x2c
   13028:	3004      	adds	r0, #4
   1302a:	4b79      	ldr	r3, [pc, #484]	; (13210 <basic_init+0x2d8>)
   1302c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
   1302e:	6820      	ldr	r0, [r4, #0]
   13030:	3004      	adds	r0, #4
   13032:	6a23      	ldr	r3, [r4, #32]
   13034:	f013 0f02 	tst.w	r3, #2
   13038:	f040 8640 	bne.w	13cbc <basic_init+0xd84>
   1303c:	230b      	movs	r3, #11
   1303e:	2118      	movs	r1, #24
   13040:	240e      	movs	r4, #14
   13042:	f04f 0200 	mov.w	r2, #0
   13046:	f364 0204 	bfi	r2, r4, #0, #5
   1304a:	f361 124a 	bfi	r2, r1, #5, #6
   1304e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13052:	2129      	movs	r1, #41	; 0x29
   13054:	4b6f      	ldr	r3, [pc, #444]	; (13214 <basic_init+0x2dc>)
   13056:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   13058:	4b6b      	ldr	r3, [pc, #428]	; (13208 <basic_init+0x2d0>)
   1305a:	6818      	ldr	r0, [r3, #0]
   1305c:	6a1b      	ldr	r3, [r3, #32]
   1305e:	f013 0302 	ands.w	r3, r3, #2
   13062:	bf14      	ite	ne
   13064:	211a      	movne	r1, #26
   13066:	2110      	moveq	r1, #16
   13068:	2b00      	cmp	r3, #0
   1306a:	bf15      	itete	ne
   1306c:	2437      	movne	r4, #55	; 0x37
   1306e:	2422      	moveq	r4, #34	; 0x22
   13070:	231c      	movne	r3, #28
   13072:	2312      	moveq	r3, #18
   13074:	f04f 0200 	mov.w	r2, #0
   13078:	f363 0204 	bfi	r2, r3, #0, #5
   1307c:	f364 124a 	bfi	r2, r4, #5, #6
   13080:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13084:	2139      	movs	r1, #57	; 0x39
   13086:	3004      	adds	r0, #4
   13088:	4d62      	ldr	r5, [pc, #392]	; (13214 <basic_init+0x2dc>)
   1308a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED, theme.color_primary);
   1308c:	4c5e      	ldr	r4, [pc, #376]	; (13208 <basic_init+0x2d0>)
   1308e:	6820      	ldr	r0, [r4, #0]
   13090:	89a2      	ldrh	r2, [r4, #12]
   13092:	f240 2139 	movw	r1, #569	; 0x239
   13096:	3004      	adds	r0, #4
   13098:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
   1309a:	6820      	ldr	r0, [r4, #0]
   1309c:	89e2      	ldrh	r2, [r4, #14]
   1309e:	f240 4139 	movw	r1, #1081	; 0x439
   130a2:	3004      	adds	r0, #4
   130a4:	47a8      	blx	r5
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   130a6:	6824      	ldr	r4, [r4, #0]
   130a8:	3404      	adds	r4, #4
   130aa:	2000      	movs	r0, #0
   130ac:	4b5b      	ldr	r3, [pc, #364]	; (1321c <basic_init+0x2e4>)
   130ae:	4798      	blx	r3
   130b0:	3028      	adds	r0, #40	; 0x28
   130b2:	0040      	lsls	r0, r0, #1
   130b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   130b8:	f080 8605 	bcs.w	13cc6 <basic_init+0xd8e>
   130bc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   130be:	2130      	movs	r1, #48	; 0x30
   130c0:	4620      	mov	r0, r4
   130c2:	4d57      	ldr	r5, [pc, #348]	; (13220 <basic_init+0x2e8>)
   130c4:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   130c6:	4c50      	ldr	r4, [pc, #320]	; (13208 <basic_init+0x2d0>)
   130c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   130ca:	2201      	movs	r2, #1
   130cc:	2133      	movs	r1, #51	; 0x33
   130ce:	3004      	adds	r0, #4
   130d0:	47a8      	blx	r5
    lv_style_set_text_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   130d2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   130d4:	6962      	ldr	r2, [r4, #20]
   130d6:	f248 018e 	movw	r1, #32910	; 0x808e
   130da:	3004      	adds	r0, #4
   130dc:	4b4e      	ldr	r3, [pc, #312]	; (13218 <basic_init+0x2e0>)
   130de:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   130e0:	6820      	ldr	r0, [r4, #0]
   130e2:	3004      	adds	r0, #4
   130e4:	6a23      	ldr	r3, [r4, #32]
   130e6:	f013 0f02 	tst.w	r3, #2
   130ea:	f040 85f9 	bne.w	13ce0 <basic_init+0xda8>
   130ee:	231f      	movs	r3, #31
   130f0:	213f      	movs	r1, #63	; 0x3f
   130f2:	461c      	mov	r4, r3
   130f4:	f04f 0200 	mov.w	r2, #0
   130f8:	f364 0204 	bfi	r2, r4, #0, #5
   130fc:	f361 124a 	bfi	r2, r1, #5, #6
   13100:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13104:	f248 0189 	movw	r1, #32905	; 0x8089
   13108:	4b42      	ldr	r3, [pc, #264]	; (13214 <basic_init+0x2dc>)
   1310a:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   1310c:	4c3e      	ldr	r4, [pc, #248]	; (13208 <basic_init+0x2d0>)
   1310e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   13110:	6962      	ldr	r2, [r4, #20]
   13112:	217e      	movs	r1, #126	; 0x7e
   13114:	3004      	adds	r0, #4
   13116:	4b40      	ldr	r3, [pc, #256]	; (13218 <basic_init+0x2e0>)
   13118:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1311a:	6820      	ldr	r0, [r4, #0]
   1311c:	3004      	adds	r0, #4
   1311e:	6a23      	ldr	r3, [r4, #32]
   13120:	f013 0f02 	tst.w	r3, #2
   13124:	f040 85e1 	bne.w	13cea <basic_init+0xdb2>
   13128:	231f      	movs	r3, #31
   1312a:	213f      	movs	r1, #63	; 0x3f
   1312c:	461c      	mov	r4, r3
   1312e:	f04f 0200 	mov.w	r2, #0
   13132:	f364 0204 	bfi	r2, r4, #0, #5
   13136:	f361 124a 	bfi	r2, r1, #5, #6
   1313a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1313e:	2179      	movs	r1, #121	; 0x79
   13140:	4b34      	ldr	r3, [pc, #208]	; (13214 <basic_init+0x2dc>)
   13142:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13144:	4b30      	ldr	r3, [pc, #192]	; (13208 <basic_init+0x2d0>)
   13146:	6818      	ldr	r0, [r3, #0]
   13148:	3004      	adds	r0, #4
   1314a:	6a1b      	ldr	r3, [r3, #32]
   1314c:	f013 0f02 	tst.w	r3, #2
   13150:	f040 85d0 	bne.w	13cf4 <basic_init+0xdbc>
   13154:	231f      	movs	r3, #31
   13156:	213f      	movs	r1, #63	; 0x3f
   13158:	461c      	mov	r4, r3
   1315a:	f04f 0200 	mov.w	r2, #0
   1315e:	f364 0204 	bfi	r2, r4, #0, #5
   13162:	f361 124a 	bfi	r2, r1, #5, #6
   13166:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1316a:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1316e:	4b29      	ldr	r3, [pc, #164]	; (13214 <basic_init+0x2dc>)
   13170:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   13172:	4b25      	ldr	r3, [pc, #148]	; (13208 <basic_init+0x2d0>)
   13174:	6818      	ldr	r0, [r3, #0]
   13176:	3004      	adds	r0, #4
   13178:	6a1b      	ldr	r3, [r3, #32]
   1317a:	f013 0f02 	tst.w	r3, #2
   1317e:	f040 85be 	bne.w	13cfe <basic_init+0xdc6>
   13182:	231f      	movs	r3, #31
   13184:	213f      	movs	r1, #63	; 0x3f
   13186:	461c      	mov	r4, r3
   13188:	f04f 0200 	mov.w	r2, #0
   1318c:	f364 0204 	bfi	r2, r4, #0, #5
   13190:	f361 124a 	bfi	r2, r1, #5, #6
   13194:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13198:	2199      	movs	r1, #153	; 0x99
   1319a:	4b1e      	ldr	r3, [pc, #120]	; (13214 <basic_init+0x2dc>)
   1319c:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
   1319e:	4c1a      	ldr	r4, [pc, #104]	; (13208 <basic_init+0x2d0>)
   131a0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   131a2:	2201      	movs	r2, #1
   131a4:	2190      	movs	r1, #144	; 0x90
   131a6:	3004      	adds	r0, #4
   131a8:	4b1d      	ldr	r3, [pc, #116]	; (13220 <basic_init+0x2e8>)
   131aa:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   131ac:	6825      	ldr	r5, [r4, #0]
   131ae:	3504      	adds	r5, #4
   131b0:	2000      	movs	r0, #0
   131b2:	4b1c      	ldr	r3, [pc, #112]	; (13224 <basic_init+0x2ec>)
   131b4:	4798      	blx	r3
   131b6:	2801      	cmp	r0, #1
   131b8:	f240 85a6 	bls.w	13d08 <basic_init+0xdd0>
   131bc:	2000      	movs	r0, #0
   131be:	4b17      	ldr	r3, [pc, #92]	; (1321c <basic_init+0x2e4>)
   131c0:	4798      	blx	r3
   131c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   131c6:	0040      	lsls	r0, r0, #1
   131c8:	3050      	adds	r0, #80	; 0x50
   131ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   131ce:	f080 85b5 	bcs.w	13d3c <basic_init+0xe04>
   131d2:	2401      	movs	r4, #1
   131d4:	2000      	movs	r0, #0
   131d6:	4b11      	ldr	r3, [pc, #68]	; (1321c <basic_init+0x2e4>)
   131d8:	4798      	blx	r3
   131da:	3028      	adds	r0, #40	; 0x28
   131dc:	0040      	lsls	r0, r0, #1
   131de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   131e2:	f080 85b9 	bcs.w	13d58 <basic_init+0xe20>
   131e6:	2201      	movs	r2, #1
   131e8:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   131ea:	b212      	sxth	r2, r2
   131ec:	2112      	movs	r1, #18
   131ee:	4628      	mov	r0, r5
   131f0:	4b0b      	ldr	r3, [pc, #44]	; (13220 <basic_init+0x2e8>)
   131f2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   131f4:	4b04      	ldr	r3, [pc, #16]	; (13208 <basic_init+0x2d0>)
   131f6:	681d      	ldr	r5, [r3, #0]
   131f8:	3504      	adds	r5, #4
   131fa:	2000      	movs	r0, #0
   131fc:	4b09      	ldr	r3, [pc, #36]	; (13224 <basic_init+0x2ec>)
   131fe:	4798      	blx	r3
   13200:	2801      	cmp	r0, #1
   13202:	f240 85b6 	bls.w	13d72 <basic_init+0xe3a>
   13206:	e00f      	b.n	13228 <basic_init+0x2f0>
   13208:	2000abd4 	.word	0x2000abd4
   1320c:	00012f19 	.word	0x00012f19
   13210:	0000624d 	.word	0x0000624d
   13214:	00006125 	.word	0x00006125
   13218:	00006361 	.word	0x00006361
   1321c:	00010181 	.word	0x00010181
   13220:	00005ffd 	.word	0x00005ffd
   13224:	0001019d 	.word	0x0001019d
   13228:	2000      	movs	r0, #0
   1322a:	4bb1      	ldr	r3, [pc, #708]	; (134f0 <basic_init+0x5b8>)
   1322c:	4798      	blx	r3
   1322e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13232:	0040      	lsls	r0, r0, #1
   13234:	3050      	adds	r0, #80	; 0x50
   13236:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1323a:	f080 85b4 	bcs.w	13da6 <basic_init+0xe6e>
   1323e:	2401      	movs	r4, #1
   13240:	2000      	movs	r0, #0
   13242:	4bab      	ldr	r3, [pc, #684]	; (134f0 <basic_init+0x5b8>)
   13244:	4798      	blx	r3
   13246:	3028      	adds	r0, #40	; 0x28
   13248:	0040      	lsls	r0, r0, #1
   1324a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1324e:	f080 85b8 	bcs.w	13dc2 <basic_init+0xe8a>
   13252:	2201      	movs	r2, #1
   13254:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13256:	b212      	sxth	r2, r2
   13258:	2113      	movs	r1, #19
   1325a:	4628      	mov	r0, r5
   1325c:	4ba5      	ldr	r3, [pc, #660]	; (134f4 <basic_init+0x5bc>)
   1325e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13260:	4ba5      	ldr	r3, [pc, #660]	; (134f8 <basic_init+0x5c0>)
   13262:	681d      	ldr	r5, [r3, #0]
   13264:	3504      	adds	r5, #4
   13266:	2000      	movs	r0, #0
   13268:	4ba4      	ldr	r3, [pc, #656]	; (134fc <basic_init+0x5c4>)
   1326a:	4798      	blx	r3
   1326c:	2801      	cmp	r0, #1
   1326e:	f240 85b5 	bls.w	13ddc <basic_init+0xea4>
   13272:	2000      	movs	r0, #0
   13274:	4b9e      	ldr	r3, [pc, #632]	; (134f0 <basic_init+0x5b8>)
   13276:	4798      	blx	r3
   13278:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1327c:	0040      	lsls	r0, r0, #1
   1327e:	3050      	adds	r0, #80	; 0x50
   13280:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13284:	f080 85c4 	bcs.w	13e10 <basic_init+0xed8>
   13288:	2401      	movs	r4, #1
   1328a:	2000      	movs	r0, #0
   1328c:	4b98      	ldr	r3, [pc, #608]	; (134f0 <basic_init+0x5b8>)
   1328e:	4798      	blx	r3
   13290:	3028      	adds	r0, #40	; 0x28
   13292:	0040      	lsls	r0, r0, #1
   13294:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13298:	f080 85c8 	bcs.w	13e2c <basic_init+0xef4>
   1329c:	2201      	movs	r2, #1
   1329e:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   132a0:	b212      	sxth	r2, r2
   132a2:	2110      	movs	r1, #16
   132a4:	4628      	mov	r0, r5
   132a6:	4b93      	ldr	r3, [pc, #588]	; (134f4 <basic_init+0x5bc>)
   132a8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   132aa:	4b93      	ldr	r3, [pc, #588]	; (134f8 <basic_init+0x5c0>)
   132ac:	681d      	ldr	r5, [r3, #0]
   132ae:	3504      	adds	r5, #4
   132b0:	2000      	movs	r0, #0
   132b2:	4b92      	ldr	r3, [pc, #584]	; (134fc <basic_init+0x5c4>)
   132b4:	4798      	blx	r3
   132b6:	2801      	cmp	r0, #1
   132b8:	f240 85c5 	bls.w	13e46 <basic_init+0xf0e>
   132bc:	2000      	movs	r0, #0
   132be:	4b8c      	ldr	r3, [pc, #560]	; (134f0 <basic_init+0x5b8>)
   132c0:	4798      	blx	r3
   132c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   132c6:	0040      	lsls	r0, r0, #1
   132c8:	3050      	adds	r0, #80	; 0x50
   132ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   132ce:	f080 85d4 	bcs.w	13e7a <basic_init+0xf42>
   132d2:	2401      	movs	r4, #1
   132d4:	2000      	movs	r0, #0
   132d6:	4b86      	ldr	r3, [pc, #536]	; (134f0 <basic_init+0x5b8>)
   132d8:	4798      	blx	r3
   132da:	3028      	adds	r0, #40	; 0x28
   132dc:	0040      	lsls	r0, r0, #1
   132de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   132e2:	f080 85e9 	bcs.w	13eb8 <basic_init+0xf80>
   132e6:	2201      	movs	r2, #1
   132e8:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   132ea:	b212      	sxth	r2, r2
   132ec:	2111      	movs	r1, #17
   132ee:	4628      	mov	r0, r5
   132f0:	4b80      	ldr	r3, [pc, #512]	; (134f4 <basic_init+0x5bc>)
   132f2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   132f4:	4b80      	ldr	r3, [pc, #512]	; (134f8 <basic_init+0x5c0>)
   132f6:	681c      	ldr	r4, [r3, #0]
   132f8:	3404      	adds	r4, #4
   132fa:	2000      	movs	r0, #0
   132fc:	4b7f      	ldr	r3, [pc, #508]	; (134fc <basic_init+0x5c4>)
   132fe:	4798      	blx	r3
   13300:	2801      	cmp	r0, #1
   13302:	f240 85e6 	bls.w	13ed2 <basic_init+0xf9a>
   13306:	2000      	movs	r0, #0
   13308:	4b79      	ldr	r3, [pc, #484]	; (134f0 <basic_init+0x5b8>)
   1330a:	4798      	blx	r3
   1330c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13310:	0040      	lsls	r0, r0, #1
   13312:	3050      	adds	r0, #80	; 0x50
   13314:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13318:	f080 85f5 	bcs.w	13f06 <basic_init+0xfce>
   1331c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1331e:	2114      	movs	r1, #20
   13320:	4620      	mov	r0, r4
   13322:	4d74      	ldr	r5, [pc, #464]	; (134f4 <basic_init+0x5bc>)
   13324:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   13326:	4c74      	ldr	r4, [pc, #464]	; (134f8 <basic_init+0x5c0>)
   13328:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   1332a:	2296      	movs	r2, #150	; 0x96
   1332c:	21b0      	movs	r1, #176	; 0xb0
   1332e:	3004      	adds	r0, #4
   13330:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
   13332:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   13334:	2239      	movs	r2, #57	; 0x39
   13336:	21b7      	movs	r1, #183	; 0xb7
   13338:	3004      	adds	r0, #4
   1333a:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
   1333c:	6820      	ldr	r0, [r4, #0]
   1333e:	300c      	adds	r0, #12
   13340:	4b6f      	ldr	r3, [pc, #444]	; (13500 <basic_init+0x5c8>)
   13342:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
   13344:	6820      	ldr	r0, [r4, #0]
   13346:	1d01      	adds	r1, r0, #4
   13348:	300c      	adds	r0, #12
   1334a:	4b6e      	ldr	r3, [pc, #440]	; (13504 <basic_init+0x5cc>)
   1334c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
   1334e:	6820      	ldr	r0, [r4, #0]
   13350:	6a23      	ldr	r3, [r4, #32]
   13352:	f013 0302 	ands.w	r3, r3, #2
   13356:	bf14      	ite	ne
   13358:	211a      	movne	r1, #26
   1335a:	2108      	moveq	r1, #8
   1335c:	2b00      	cmp	r3, #0
   1335e:	bf15      	itete	ne
   13360:	2435      	movne	r4, #53	; 0x35
   13362:	2412      	moveq	r4, #18
   13364:	231b      	movne	r3, #27
   13366:	2309      	moveq	r3, #9
   13368:	f04f 0200 	mov.w	r2, #0
   1336c:	f363 0204 	bfi	r2, r3, #0, #5
   13370:	f364 124a 	bfi	r2, r4, #5, #6
   13374:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13378:	2129      	movs	r1, #41	; 0x29
   1337a:	300c      	adds	r0, #12
   1337c:	4b62      	ldr	r3, [pc, #392]	; (13508 <basic_init+0x5d0>)
   1337e:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
   13380:	4b5d      	ldr	r3, [pc, #372]	; (134f8 <basic_init+0x5c0>)
   13382:	6818      	ldr	r0, [r3, #0]
   13384:	300c      	adds	r0, #12
   13386:	6a1b      	ldr	r3, [r3, #32]
   13388:	f013 0f02 	tst.w	r3, #2
   1338c:	f040 85c9 	bne.w	13f22 <basic_init+0xfea>
   13390:	2308      	movs	r3, #8
   13392:	2110      	movs	r1, #16
   13394:	461c      	mov	r4, r3
   13396:	f04f 0200 	mov.w	r2, #0
   1339a:	f364 0204 	bfi	r2, r4, #0, #5
   1339e:	f361 124a 	bfi	r2, r1, #5, #6
   133a2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   133a6:	2139      	movs	r1, #57	; 0x39
   133a8:	4b57      	ldr	r3, [pc, #348]	; (13508 <basic_init+0x5d0>)
   133aa:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   133ac:	4b52      	ldr	r3, [pc, #328]	; (134f8 <basic_init+0x5c0>)
   133ae:	6818      	ldr	r0, [r3, #0]
   133b0:	6a1b      	ldr	r3, [r3, #32]
   133b2:	f013 0302 	ands.w	r3, r3, #2
   133b6:	bf14      	ite	ne
   133b8:	2106      	movne	r1, #6
   133ba:	2114      	moveq	r1, #20
   133bc:	2b00      	cmp	r3, #0
   133be:	bf15      	itete	ne
   133c0:	2410      	movne	r4, #16
   133c2:	242a      	moveq	r4, #42	; 0x2a
   133c4:	2309      	movne	r3, #9
   133c6:	2315      	moveq	r3, #21
   133c8:	f04f 0200 	mov.w	r2, #0
   133cc:	f363 0204 	bfi	r2, r3, #0, #5
   133d0:	f364 124a 	bfi	r2, r4, #5, #6
   133d4:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   133d8:	f248 0189 	movw	r1, #32905	; 0x8089
   133dc:	300c      	adds	r0, #12
   133de:	4b4a      	ldr	r3, [pc, #296]	; (13508 <basic_init+0x5d0>)
   133e0:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   133e2:	4b45      	ldr	r3, [pc, #276]	; (134f8 <basic_init+0x5c0>)
   133e4:	6818      	ldr	r0, [r3, #0]
   133e6:	6a1b      	ldr	r3, [r3, #32]
   133e8:	f013 0302 	ands.w	r3, r3, #2
   133ec:	bf14      	ite	ne
   133ee:	2106      	movne	r1, #6
   133f0:	2114      	moveq	r1, #20
   133f2:	2b00      	cmp	r3, #0
   133f4:	bf15      	itete	ne
   133f6:	2410      	movne	r4, #16
   133f8:	242a      	moveq	r4, #42	; 0x2a
   133fa:	2309      	movne	r3, #9
   133fc:	2315      	moveq	r3, #21
   133fe:	f04f 0200 	mov.w	r2, #0
   13402:	f363 0204 	bfi	r2, r3, #0, #5
   13406:	f364 124a 	bfi	r2, r4, #5, #6
   1340a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1340e:	2179      	movs	r1, #121	; 0x79
   13410:	300c      	adds	r0, #12
   13412:	4b3d      	ldr	r3, [pc, #244]	; (13508 <basic_init+0x5d0>)
   13414:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   13416:	4b38      	ldr	r3, [pc, #224]	; (134f8 <basic_init+0x5c0>)
   13418:	6818      	ldr	r0, [r3, #0]
   1341a:	6a1b      	ldr	r3, [r3, #32]
   1341c:	f013 0302 	ands.w	r3, r3, #2
   13420:	bf14      	ite	ne
   13422:	2106      	movne	r1, #6
   13424:	2114      	moveq	r1, #20
   13426:	2b00      	cmp	r3, #0
   13428:	bf15      	itete	ne
   1342a:	2410      	movne	r4, #16
   1342c:	242a      	moveq	r4, #42	; 0x2a
   1342e:	2309      	movne	r3, #9
   13430:	2315      	moveq	r3, #21
   13432:	f04f 0200 	mov.w	r2, #0
   13436:	f363 0204 	bfi	r2, r3, #0, #5
   1343a:	f364 124a 	bfi	r2, r4, #5, #6
   1343e:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   13442:	f248 01a9 	movw	r1, #32937	; 0x80a9
   13446:	300c      	adds	r0, #12
   13448:	4b2f      	ldr	r3, [pc, #188]	; (13508 <basic_init+0x5d0>)
   1344a:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   1344c:	4b2a      	ldr	r3, [pc, #168]	; (134f8 <basic_init+0x5c0>)
   1344e:	6818      	ldr	r0, [r3, #0]
   13450:	6a1b      	ldr	r3, [r3, #32]
   13452:	f013 0302 	ands.w	r3, r3, #2
   13456:	bf14      	ite	ne
   13458:	2106      	movne	r1, #6
   1345a:	2114      	moveq	r1, #20
   1345c:	2b00      	cmp	r3, #0
   1345e:	bf15      	itete	ne
   13460:	2410      	movne	r4, #16
   13462:	242a      	moveq	r4, #42	; 0x2a
   13464:	2309      	movne	r3, #9
   13466:	2315      	moveq	r3, #21
   13468:	f04f 0200 	mov.w	r2, #0
   1346c:	f363 0204 	bfi	r2, r3, #0, #5
   13470:	f364 124a 	bfi	r2, r4, #5, #6
   13474:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13478:	2199      	movs	r1, #153	; 0x99
   1347a:	300c      	adds	r0, #12
   1347c:	4b22      	ldr	r3, [pc, #136]	; (13508 <basic_init+0x5d0>)
   1347e:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
   13480:	4c1d      	ldr	r4, [pc, #116]	; (134f8 <basic_init+0x5c0>)
   13482:	6820      	ldr	r0, [r4, #0]
   13484:	3008      	adds	r0, #8
   13486:	4b1e      	ldr	r3, [pc, #120]	; (13500 <basic_init+0x5c8>)
   13488:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
   1348a:	6820      	ldr	r0, [r4, #0]
   1348c:	3008      	adds	r0, #8
   1348e:	6a23      	ldr	r3, [r4, #32]
   13490:	f013 0f02 	tst.w	r3, #2
   13494:	f040 854a 	bne.w	13f2c <basic_init+0xff4>
   13498:	2309      	movs	r3, #9
   1349a:	2113      	movs	r1, #19
   1349c:	240a      	movs	r4, #10
   1349e:	f04f 0200 	mov.w	r2, #0
   134a2:	f364 0204 	bfi	r2, r4, #0, #5
   134a6:	f361 124a 	bfi	r2, r1, #5, #6
   134aa:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   134ae:	f241 0129 	movw	r1, #4137	; 0x1029
   134b2:	4d15      	ldr	r5, [pc, #84]	; (13508 <basic_init+0x5d0>)
   134b4:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
   134b6:	4c10      	ldr	r4, [pc, #64]	; (134f8 <basic_init+0x5c0>)
   134b8:	6820      	ldr	r0, [r4, #0]
   134ba:	89a2      	ldrh	r2, [r4, #12]
   134bc:	f240 1129 	movw	r1, #297	; 0x129
   134c0:	3008      	adds	r0, #8
   134c2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
   134c4:	6826      	ldr	r6, [r4, #0]
   134c6:	3608      	adds	r6, #8
   134c8:	2133      	movs	r1, #51	; 0x33
   134ca:	89a0      	ldrh	r0, [r4, #12]
   134cc:	4b0f      	ldr	r3, [pc, #60]	; (1350c <basic_init+0x5d4>)
   134ce:	4798      	blx	r3
   134d0:	4602      	mov	r2, r0
   134d2:	f241 1129 	movw	r1, #4393	; 0x1129
   134d6:	4630      	mov	r0, r6
   134d8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
   134da:	6820      	ldr	r0, [r4, #0]
   134dc:	3008      	adds	r0, #8
   134de:	6a23      	ldr	r3, [r4, #32]
   134e0:	f013 0f02 	tst.w	r3, #2
   134e4:	f040 8527 	bne.w	13f36 <basic_init+0xffe>
   134e8:	230b      	movs	r3, #11
   134ea:	2118      	movs	r1, #24
   134ec:	240e      	movs	r4, #14
   134ee:	e00f      	b.n	13510 <basic_init+0x5d8>
   134f0:	00010181 	.word	0x00010181
   134f4:	00005ffd 	.word	0x00005ffd
   134f8:	2000abd4 	.word	0x2000abd4
   134fc:	0001019d 	.word	0x0001019d
   13500:	00012f19 	.word	0x00012f19
   13504:	00005ed5 	.word	0x00005ed5
   13508:	00006125 	.word	0x00006125
   1350c:	00010dc7 	.word	0x00010dc7
   13510:	f04f 0200 	mov.w	r2, #0
   13514:	f364 0204 	bfi	r2, r4, #0, #5
   13518:	f361 124a 	bfi	r2, r1, #5, #6
   1351c:	f363 22cf 	bfi	r2, r3, #11, #5
   13520:	f242 0129 	movw	r1, #8233	; 0x2029
   13524:	4ebb      	ldr	r6, [pc, #748]	; (13814 <basic_init+0x8dc>)
   13526:	47b0      	blx	r6
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
   13528:	4dbb      	ldr	r5, [pc, #748]	; (13818 <basic_init+0x8e0>)
   1352a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1352c:	2200      	movs	r2, #0
   1352e:	f44f 7198 	mov.w	r1, #304	; 0x130
   13532:	3008      	adds	r0, #8
   13534:	4bb9      	ldr	r3, [pc, #740]	; (1381c <basic_init+0x8e4>)
   13536:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
   13538:	682c      	ldr	r4, [r5, #0]
   1353a:	3408      	adds	r4, #8
   1353c:	2133      	movs	r1, #51	; 0x33
   1353e:	89a8      	ldrh	r0, [r5, #12]
   13540:	4bb7      	ldr	r3, [pc, #732]	; (13820 <basic_init+0x8e8>)
   13542:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13544:	4602      	mov	r2, r0
   13546:	f241 2139 	movw	r1, #4665	; 0x1239
   1354a:	4620      	mov	r0, r4
   1354c:	47b0      	blx	r6
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
   1354e:	6828      	ldr	r0, [r5, #0]
   13550:	3008      	adds	r0, #8
   13552:	6a2b      	ldr	r3, [r5, #32]
   13554:	f013 0f02 	tst.w	r3, #2
   13558:	f040 84f2 	bne.w	13f40 <basic_init+0x1008>
   1355c:	230b      	movs	r3, #11
   1355e:	2119      	movs	r1, #25
   13560:	240d      	movs	r4, #13
   13562:	f04f 0200 	mov.w	r2, #0
   13566:	f364 0204 	bfi	r2, r4, #0, #5
   1356a:	f361 124a 	bfi	r2, r1, #5, #6
   1356e:	f363 22cf 	bfi	r2, r3, #11, #5
   13572:	f241 0139 	movw	r1, #4153	; 0x1039
   13576:	4ba7      	ldr	r3, [pc, #668]	; (13814 <basic_init+0x8dc>)
   13578:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   1357a:	4ba7      	ldr	r3, [pc, #668]	; (13818 <basic_init+0x8e0>)
   1357c:	6818      	ldr	r0, [r3, #0]
   1357e:	6a1b      	ldr	r3, [r3, #32]
   13580:	f013 0302 	ands.w	r3, r3, #2
   13584:	bf14      	ite	ne
   13586:	2107      	movne	r1, #7
   13588:	210b      	moveq	r1, #11
   1358a:	2b00      	cmp	r3, #0
   1358c:	bf15      	itete	ne
   1358e:	240f      	movne	r4, #15
   13590:	2419      	moveq	r4, #25
   13592:	2308      	movne	r3, #8
   13594:	230d      	moveq	r3, #13
   13596:	f04f 0200 	mov.w	r2, #0
   1359a:	f363 0204 	bfi	r2, r3, #0, #5
   1359e:	f364 124a 	bfi	r2, r4, #5, #6
   135a2:	f361 22cf 	bfi	r2, r1, #11, #5
   135a6:	f240 1139 	movw	r1, #313	; 0x139
   135aa:	3008      	adds	r0, #8
   135ac:	4b99      	ldr	r3, [pc, #612]	; (13814 <basic_init+0x8dc>)
   135ae:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   135b0:	4b99      	ldr	r3, [pc, #612]	; (13818 <basic_init+0x8e0>)
   135b2:	6818      	ldr	r0, [r3, #0]
   135b4:	6a1b      	ldr	r3, [r3, #32]
   135b6:	f013 0302 	ands.w	r3, r3, #2
   135ba:	bf14      	ite	ne
   135bc:	2107      	movne	r1, #7
   135be:	210b      	moveq	r1, #11
   135c0:	2b00      	cmp	r3, #0
   135c2:	bf15      	itete	ne
   135c4:	240f      	movne	r4, #15
   135c6:	2419      	moveq	r4, #25
   135c8:	2308      	movne	r3, #8
   135ca:	230d      	moveq	r3, #13
   135cc:	f04f 0200 	mov.w	r2, #0
   135d0:	f363 0204 	bfi	r2, r3, #0, #5
   135d4:	f364 124a 	bfi	r2, r4, #5, #6
   135d8:	f361 22cf 	bfi	r2, r1, #11, #5
   135dc:	f241 1139 	movw	r1, #4409	; 0x1139
   135e0:	3008      	adds	r0, #8
   135e2:	4b8c      	ldr	r3, [pc, #560]	; (13814 <basic_init+0x8dc>)
   135e4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
   135e6:	4b8c      	ldr	r3, [pc, #560]	; (13818 <basic_init+0x8e0>)
   135e8:	6818      	ldr	r0, [r3, #0]
   135ea:	6a1b      	ldr	r3, [r3, #32]
   135ec:	f013 0302 	ands.w	r3, r3, #2
   135f0:	bf14      	ite	ne
   135f2:	211a      	movne	r1, #26
   135f4:	210b      	moveq	r1, #11
   135f6:	2b00      	cmp	r3, #0
   135f8:	bf15      	itete	ne
   135fa:	2437      	movne	r4, #55	; 0x37
   135fc:	2419      	moveq	r4, #25
   135fe:	231c      	movne	r3, #28
   13600:	230d      	moveq	r3, #13
   13602:	f04f 0200 	mov.w	r2, #0
   13606:	f363 0204 	bfi	r2, r3, #0, #5
   1360a:	f364 124a 	bfi	r2, r4, #5, #6
   1360e:	f361 22cf 	bfi	r2, r1, #11, #5
   13612:	f242 0139 	movw	r1, #8249	; 0x2039
   13616:	3008      	adds	r0, #8
   13618:	4b7e      	ldr	r3, [pc, #504]	; (13814 <basic_init+0x8dc>)
   1361a:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   1361c:	4b7e      	ldr	r3, [pc, #504]	; (13818 <basic_init+0x8e0>)
   1361e:	6818      	ldr	r0, [r3, #0]
   13620:	3008      	adds	r0, #8
   13622:	6a1b      	ldr	r3, [r3, #32]
   13624:	f013 0f02 	tst.w	r3, #2
   13628:	f040 848f 	bne.w	13f4a <basic_init+0x1012>
   1362c:	231f      	movs	r3, #31
   1362e:	213f      	movs	r1, #63	; 0x3f
   13630:	461c      	mov	r4, r3
   13632:	f04f 0200 	mov.w	r2, #0
   13636:	f364 0204 	bfi	r2, r4, #0, #5
   1363a:	f361 124a 	bfi	r2, r1, #5, #6
   1363e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   13642:	f249 0189 	movw	r1, #37001	; 0x9089
   13646:	4d73      	ldr	r5, [pc, #460]	; (13814 <basic_init+0x8dc>)
   13648:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   1364a:	4c73      	ldr	r4, [pc, #460]	; (13818 <basic_init+0x8e0>)
   1364c:	6820      	ldr	r0, [r4, #0]
   1364e:	f04f 32ff 	mov.w	r2, #4294967295
   13652:	f248 1189 	movw	r1, #33161	; 0x8189
   13656:	3008      	adds	r0, #8
   13658:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   1365a:	6820      	ldr	r0, [r4, #0]
   1365c:	f04f 32ff 	mov.w	r2, #4294967295
   13660:	f249 1189 	movw	r1, #37257	; 0x9189
   13664:	3008      	adds	r0, #8
   13666:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   13668:	6820      	ldr	r0, [r4, #0]
   1366a:	6a23      	ldr	r3, [r4, #32]
   1366c:	f013 0302 	ands.w	r3, r3, #2
   13670:	bf14      	ite	ne
   13672:	212a      	movne	r1, #42	; 0x2a
   13674:	2126      	moveq	r1, #38	; 0x26
   13676:	2b00      	cmp	r3, #0
   13678:	bf14      	ite	ne
   1367a:	2315      	movne	r3, #21
   1367c:	2313      	moveq	r3, #19
   1367e:	f04f 0200 	mov.w	r2, #0
   13682:	f363 0204 	bfi	r2, r3, #0, #5
   13686:	f361 124a 	bfi	r2, r1, #5, #6
   1368a:	f363 22cf 	bfi	r2, r3, #11, #5
   1368e:	f24a 0189 	movw	r1, #41097	; 0xa089
   13692:	3008      	adds	r0, #8
   13694:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   13696:	6820      	ldr	r0, [r4, #0]
   13698:	3008      	adds	r0, #8
   1369a:	6a23      	ldr	r3, [r4, #32]
   1369c:	f013 0f02 	tst.w	r3, #2
   136a0:	f040 8458 	bne.w	13f54 <basic_init+0x101c>
   136a4:	231f      	movs	r3, #31
   136a6:	213f      	movs	r1, #63	; 0x3f
   136a8:	461c      	mov	r4, r3
   136aa:	f04f 0200 	mov.w	r2, #0
   136ae:	f364 0204 	bfi	r2, r4, #0, #5
   136b2:	f361 124a 	bfi	r2, r1, #5, #6
   136b6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   136ba:	f249 01a9 	movw	r1, #37033	; 0x90a9
   136be:	4d55      	ldr	r5, [pc, #340]	; (13814 <basic_init+0x8dc>)
   136c0:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   136c2:	4c55      	ldr	r4, [pc, #340]	; (13818 <basic_init+0x8e0>)
   136c4:	6820      	ldr	r0, [r4, #0]
   136c6:	f04f 32ff 	mov.w	r2, #4294967295
   136ca:	f248 11a9 	movw	r1, #33193	; 0x81a9
   136ce:	3008      	adds	r0, #8
   136d0:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   136d2:	6820      	ldr	r0, [r4, #0]
   136d4:	f04f 32ff 	mov.w	r2, #4294967295
   136d8:	f249 11a9 	movw	r1, #37289	; 0x91a9
   136dc:	3008      	adds	r0, #8
   136de:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   136e0:	6820      	ldr	r0, [r4, #0]
   136e2:	6a23      	ldr	r3, [r4, #32]
   136e4:	f013 0302 	ands.w	r3, r3, #2
   136e8:	bf14      	ite	ne
   136ea:	212a      	movne	r1, #42	; 0x2a
   136ec:	2126      	moveq	r1, #38	; 0x26
   136ee:	2b00      	cmp	r3, #0
   136f0:	bf14      	ite	ne
   136f2:	2315      	movne	r3, #21
   136f4:	2313      	moveq	r3, #19
   136f6:	f04f 0200 	mov.w	r2, #0
   136fa:	f363 0204 	bfi	r2, r3, #0, #5
   136fe:	f361 124a 	bfi	r2, r1, #5, #6
   13702:	f363 22cf 	bfi	r2, r3, #11, #5
   13706:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   1370a:	3008      	adds	r0, #8
   1370c:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   1370e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   13710:	2229      	movs	r2, #41	; 0x29
   13712:	21b6      	movs	r1, #182	; 0xb6
   13714:	3008      	adds	r0, #8
   13716:	4d41      	ldr	r5, [pc, #260]	; (1381c <basic_init+0x8e4>)
   13718:	47a8      	blx	r5
    style_init_reset(&styles->btn);
   1371a:	6820      	ldr	r0, [r4, #0]
   1371c:	3010      	adds	r0, #16
   1371e:	4b41      	ldr	r3, [pc, #260]	; (13824 <basic_init+0x8ec>)
   13720:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   13722:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13724:	f647 72ff 	movw	r2, #32767	; 0x7fff
   13728:	2101      	movs	r1, #1
   1372a:	3010      	adds	r0, #16
   1372c:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   1372e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13730:	22ff      	movs	r2, #255	; 0xff
   13732:	212c      	movs	r1, #44	; 0x2c
   13734:	3010      	adds	r0, #16
   13736:	4b3c      	ldr	r3, [pc, #240]	; (13828 <basic_init+0x8f0>)
   13738:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
   1373a:	6820      	ldr	r0, [r4, #0]
   1373c:	3010      	adds	r0, #16
   1373e:	6a23      	ldr	r3, [r4, #32]
   13740:	f013 0f02 	tst.w	r3, #2
   13744:	f040 840b 	bne.w	13f5e <basic_init+0x1026>
   13748:	230b      	movs	r3, #11
   1374a:	2118      	movs	r1, #24
   1374c:	240e      	movs	r4, #14
   1374e:	f04f 0200 	mov.w	r2, #0
   13752:	f364 0204 	bfi	r2, r4, #0, #5
   13756:	f361 124a 	bfi	r2, r1, #5, #6
   1375a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1375e:	2129      	movs	r1, #41	; 0x29
   13760:	4b2c      	ldr	r3, [pc, #176]	; (13814 <basic_init+0x8dc>)
   13762:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   13764:	4b2c      	ldr	r3, [pc, #176]	; (13818 <basic_init+0x8e0>)
   13766:	6818      	ldr	r0, [r3, #0]
   13768:	3010      	adds	r0, #16
   1376a:	6a1b      	ldr	r3, [r3, #32]
   1376c:	f013 0f02 	tst.w	r3, #2
   13770:	f000 83fa 	beq.w	13f68 <basic_init+0x1030>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   13774:	4928      	ldr	r1, [pc, #160]	; (13818 <basic_init+0x8e0>)
   13776:	7b4b      	ldrb	r3, [r1, #13]
   13778:	08db      	lsrs	r3, r3, #3
   1377a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1377e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13782:	f641 35da 	movw	r5, #7130	; 0x1bda
   13786:	442b      	add	r3, r5
   13788:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   1378c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   13790:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   13794:	898a      	ldrh	r2, [r1, #12]
   13796:	f3c2 1245 	ubfx	r2, r2, #5, #6
   1379a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1379e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   137a2:	f502 5262 	add.w	r2, r2, #14464	; 0x3880
   137a6:	321a      	adds	r2, #26
   137a8:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   137ac:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   137b0:	f3c2 54c5 	ubfx	r4, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   137b4:	7b09      	ldrb	r1, [r1, #12]
   137b6:	f001 011f 	and.w	r1, r1, #31
   137ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   137be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   137c2:	4429      	add	r1, r5
   137c4:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   137c8:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   137cc:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   137d0:	f04f 0200 	mov.w	r2, #0
   137d4:	f361 0204 	bfi	r2, r1, #0, #5
   137d8:	f364 124a 	bfi	r2, r4, #5, #6
   137dc:	f363 22cf 	bfi	r2, r3, #11, #5
   137e0:	f241 0129 	movw	r1, #4137	; 0x1029
   137e4:	4d0b      	ldr	r5, [pc, #44]	; (13814 <basic_init+0x8dc>)
   137e6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
   137e8:	4c0b      	ldr	r4, [pc, #44]	; (13818 <basic_init+0x8e0>)
   137ea:	6820      	ldr	r0, [r4, #0]
   137ec:	89a2      	ldrh	r2, [r4, #12]
   137ee:	f240 1129 	movw	r1, #297	; 0x129
   137f2:	3010      	adds	r0, #16
   137f4:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
   137f6:	6826      	ldr	r6, [r4, #0]
   137f8:	3610      	adds	r6, #16
   137fa:	214c      	movs	r1, #76	; 0x4c
   137fc:	89a0      	ldrh	r0, [r4, #12]
   137fe:	4b08      	ldr	r3, [pc, #32]	; (13820 <basic_init+0x8e8>)
   13800:	4798      	blx	r3
   13802:	4602      	mov	r2, r0
   13804:	f241 1129 	movw	r1, #4393	; 0x1129
   13808:	4630      	mov	r0, r6
   1380a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
   1380c:	6820      	ldr	r0, [r4, #0]
   1380e:	3010      	adds	r0, #16
   13810:	6a23      	ldr	r3, [r4, #32]
   13812:	e00b      	b.n	1382c <basic_init+0x8f4>
   13814:	00006125 	.word	0x00006125
   13818:	2000abd4 	.word	0x2000abd4
   1381c:	00005ffd 	.word	0x00005ffd
   13820:	00010dc7 	.word	0x00010dc7
   13824:	00012f19 	.word	0x00012f19
   13828:	0000624d 	.word	0x0000624d
   1382c:	f013 0f02 	tst.w	r3, #2
   13830:	f040 83c3 	bne.w	13fba <basic_init+0x1082>
   13834:	230b      	movs	r3, #11
   13836:	2118      	movs	r1, #24
   13838:	240e      	movs	r4, #14
   1383a:	f04f 0200 	mov.w	r2, #0
   1383e:	f364 0204 	bfi	r2, r4, #0, #5
   13842:	f361 124a 	bfi	r2, r1, #5, #6
   13846:	f363 22cf 	bfi	r2, r3, #11, #5
   1384a:	f242 0129 	movw	r1, #8233	; 0x2029
   1384e:	4bc6      	ldr	r3, [pc, #792]	; (13b68 <basic_init+0xc30>)
   13850:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
   13852:	4bc6      	ldr	r3, [pc, #792]	; (13b6c <basic_init+0xc34>)
   13854:	6818      	ldr	r0, [r3, #0]
   13856:	6a1b      	ldr	r3, [r3, #32]
   13858:	f013 0302 	ands.w	r3, r3, #2
   1385c:	bf14      	ite	ne
   1385e:	2133      	movne	r1, #51	; 0x33
   13860:	2122      	moveq	r1, #34	; 0x22
   13862:	2b00      	cmp	r3, #0
   13864:	bf14      	ite	ne
   13866:	2319      	movne	r3, #25
   13868:	2311      	moveq	r3, #17
   1386a:	f04f 0200 	mov.w	r2, #0
   1386e:	f363 0204 	bfi	r2, r3, #0, #5
   13872:	f361 124a 	bfi	r2, r1, #5, #6
   13876:	f363 22cf 	bfi	r2, r3, #11, #5
   1387a:	f242 1129 	movw	r1, #8489	; 0x2129
   1387e:	3010      	adds	r0, #16
   13880:	4db9      	ldr	r5, [pc, #740]	; (13b68 <basic_init+0xc30>)
   13882:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
   13884:	4cb9      	ldr	r4, [pc, #740]	; (13b6c <basic_init+0xc34>)
   13886:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   13888:	89a2      	ldrh	r2, [r4, #12]
   1388a:	2139      	movs	r1, #57	; 0x39
   1388c:	3010      	adds	r0, #16
   1388e:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
   13890:	6820      	ldr	r0, [r4, #0]
   13892:	89a2      	ldrh	r2, [r4, #12]
   13894:	f241 0139 	movw	r1, #4153	; 0x1039
   13898:	3010      	adds	r0, #16
   1389a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
   1389c:	6820      	ldr	r0, [r4, #0]
   1389e:	6a23      	ldr	r3, [r4, #32]
   138a0:	f013 0302 	ands.w	r3, r3, #2
   138a4:	bf14      	ite	ne
   138a6:	2122      	movne	r1, #34	; 0x22
   138a8:	2110      	moveq	r1, #16
   138aa:	2b00      	cmp	r3, #0
   138ac:	bf14      	ite	ne
   138ae:	2311      	movne	r3, #17
   138b0:	2308      	moveq	r3, #8
   138b2:	f04f 0200 	mov.w	r2, #0
   138b6:	f363 0204 	bfi	r2, r3, #0, #5
   138ba:	f361 124a 	bfi	r2, r1, #5, #6
   138be:	f363 22cf 	bfi	r2, r3, #11, #5
   138c2:	f242 0139 	movw	r1, #8249	; 0x2039
   138c6:	3010      	adds	r0, #16
   138c8:	47a8      	blx	r5
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   138ca:	6824      	ldr	r4, [r4, #0]
   138cc:	3410      	adds	r4, #16
   138ce:	2000      	movs	r0, #0
   138d0:	4ba7      	ldr	r3, [pc, #668]	; (13b70 <basic_init+0xc38>)
   138d2:	4798      	blx	r3
   138d4:	3028      	adds	r0, #40	; 0x28
   138d6:	0040      	lsls	r0, r0, #1
   138d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   138dc:	f080 8371 	bcs.w	13fc2 <basic_init+0x108a>
   138e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   138e2:	2130      	movs	r1, #48	; 0x30
   138e4:	4620      	mov	r0, r4
   138e6:	4ba3      	ldr	r3, [pc, #652]	; (13b74 <basic_init+0xc3c>)
   138e8:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
   138ea:	4ca0      	ldr	r4, [pc, #640]	; (13b6c <basic_init+0xc34>)
   138ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   138ee:	2200      	movs	r2, #0
   138f0:	f44f 719e 	mov.w	r1, #316	; 0x13c
   138f4:	3010      	adds	r0, #16
   138f6:	4ba0      	ldr	r3, [pc, #640]	; (13b78 <basic_init+0xc40>)
   138f8:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   138fa:	6820      	ldr	r0, [r4, #0]
   138fc:	3010      	adds	r0, #16
   138fe:	6a23      	ldr	r3, [r4, #32]
   13900:	f013 0f02 	tst.w	r3, #2
   13904:	f040 8369 	bne.w	13fda <basic_init+0x10a2>
   13908:	231f      	movs	r3, #31
   1390a:	213f      	movs	r1, #63	; 0x3f
   1390c:	461c      	mov	r4, r3
   1390e:	f04f 0200 	mov.w	r2, #0
   13912:	f364 0204 	bfi	r2, r4, #0, #5
   13916:	f361 124a 	bfi	r2, r1, #5, #6
   1391a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1391e:	f248 0189 	movw	r1, #32905	; 0x8089
   13922:	4b91      	ldr	r3, [pc, #580]	; (13b68 <basic_init+0xc30>)
   13924:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13926:	4b91      	ldr	r3, [pc, #580]	; (13b6c <basic_init+0xc34>)
   13928:	6818      	ldr	r0, [r3, #0]
   1392a:	3010      	adds	r0, #16
   1392c:	6a1b      	ldr	r3, [r3, #32]
   1392e:	f013 0f02 	tst.w	r3, #2
   13932:	f040 8356 	bne.w	13fe2 <basic_init+0x10aa>
   13936:	231f      	movs	r3, #31
   13938:	213f      	movs	r1, #63	; 0x3f
   1393a:	461c      	mov	r4, r3
   1393c:	f04f 0200 	mov.w	r2, #0
   13940:	f364 0204 	bfi	r2, r4, #0, #5
   13944:	f361 124a 	bfi	r2, r1, #5, #6
   13948:	f363 22cf 	bfi	r2, r3, #11, #5
   1394c:	f249 0189 	movw	r1, #37001	; 0x9089
   13950:	4c85      	ldr	r4, [pc, #532]	; (13b68 <basic_init+0xc30>)
   13952:	47a0      	blx	r4
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   13954:	4d85      	ldr	r5, [pc, #532]	; (13b6c <basic_init+0xc34>)
   13956:	6828      	ldr	r0, [r5, #0]
   13958:	f04f 32ff 	mov.w	r2, #4294967295
   1395c:	f248 1189 	movw	r1, #33161	; 0x8189
   13960:	3010      	adds	r0, #16
   13962:	47a0      	blx	r4
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   13964:	6828      	ldr	r0, [r5, #0]
   13966:	f04f 32ff 	mov.w	r2, #4294967295
   1396a:	f249 1189 	movw	r1, #37257	; 0x9189
   1396e:	3010      	adds	r0, #16
   13970:	47a0      	blx	r4
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   13972:	6828      	ldr	r0, [r5, #0]
   13974:	2311      	movs	r3, #17
   13976:	f04f 0200 	mov.w	r2, #0
   1397a:	f363 0204 	bfi	r2, r3, #0, #5
   1397e:	2122      	movs	r1, #34	; 0x22
   13980:	f361 124a 	bfi	r2, r1, #5, #6
   13984:	f363 22cf 	bfi	r2, r3, #11, #5
   13988:	f24a 0189 	movw	r1, #41097	; 0xa089
   1398c:	3010      	adds	r0, #16
   1398e:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13990:	6828      	ldr	r0, [r5, #0]
   13992:	3010      	adds	r0, #16
   13994:	6a2b      	ldr	r3, [r5, #32]
   13996:	f013 0f02 	tst.w	r3, #2
   1399a:	f040 8326 	bne.w	13fea <basic_init+0x10b2>
   1399e:	231f      	movs	r3, #31
   139a0:	213f      	movs	r1, #63	; 0x3f
   139a2:	461c      	mov	r4, r3
   139a4:	f04f 0200 	mov.w	r2, #0
   139a8:	f364 0204 	bfi	r2, r4, #0, #5
   139ac:	f361 124a 	bfi	r2, r1, #5, #6
   139b0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   139b4:	f248 01a9 	movw	r1, #32937	; 0x80a9
   139b8:	4b6b      	ldr	r3, [pc, #428]	; (13b68 <basic_init+0xc30>)
   139ba:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   139bc:	4b6b      	ldr	r3, [pc, #428]	; (13b6c <basic_init+0xc34>)
   139be:	6818      	ldr	r0, [r3, #0]
   139c0:	3010      	adds	r0, #16
   139c2:	6a1b      	ldr	r3, [r3, #32]
   139c4:	f013 0f02 	tst.w	r3, #2
   139c8:	f040 8313 	bne.w	13ff2 <basic_init+0x10ba>
   139cc:	231f      	movs	r3, #31
   139ce:	213f      	movs	r1, #63	; 0x3f
   139d0:	461c      	mov	r4, r3
   139d2:	f04f 0200 	mov.w	r2, #0
   139d6:	f364 0204 	bfi	r2, r4, #0, #5
   139da:	f361 124a 	bfi	r2, r1, #5, #6
   139de:	f363 22cf 	bfi	r2, r3, #11, #5
   139e2:	f249 01a9 	movw	r1, #37033	; 0x90a9
   139e6:	4c60      	ldr	r4, [pc, #384]	; (13b68 <basic_init+0xc30>)
   139e8:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
   139ea:	4d60      	ldr	r5, [pc, #384]	; (13b6c <basic_init+0xc34>)
   139ec:	6828      	ldr	r0, [r5, #0]
   139ee:	f04f 32ff 	mov.w	r2, #4294967295
   139f2:	f249 01a9 	movw	r1, #37033	; 0x90a9
   139f6:	3010      	adds	r0, #16
   139f8:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   139fa:	6828      	ldr	r0, [r5, #0]
   139fc:	f04f 32ff 	mov.w	r2, #4294967295
   13a00:	f249 11a9 	movw	r1, #37289	; 0x91a9
   13a04:	3010      	adds	r0, #16
   13a06:	47a0      	blx	r4
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   13a08:	6828      	ldr	r0, [r5, #0]
   13a0a:	2311      	movs	r3, #17
   13a0c:	f04f 0200 	mov.w	r2, #0
   13a10:	f363 0204 	bfi	r2, r3, #0, #5
   13a14:	2122      	movs	r1, #34	; 0x22
   13a16:	f361 124a 	bfi	r2, r1, #5, #6
   13a1a:	f363 22cf 	bfi	r2, r3, #11, #5
   13a1e:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   13a22:	3010      	adds	r0, #16
   13a24:	47a0      	blx	r4
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13a26:	6828      	ldr	r0, [r5, #0]
   13a28:	3010      	adds	r0, #16
   13a2a:	6a2b      	ldr	r3, [r5, #32]
   13a2c:	f013 0f02 	tst.w	r3, #2
   13a30:	f040 82e3 	bne.w	13ffa <basic_init+0x10c2>
   13a34:	231f      	movs	r3, #31
   13a36:	213f      	movs	r1, #63	; 0x3f
   13a38:	461c      	mov	r4, r3
   13a3a:	f04f 0200 	mov.w	r2, #0
   13a3e:	f364 0204 	bfi	r2, r4, #0, #5
   13a42:	f361 124a 	bfi	r2, r1, #5, #6
   13a46:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13a4a:	2179      	movs	r1, #121	; 0x79
   13a4c:	4b46      	ldr	r3, [pc, #280]	; (13b68 <basic_init+0xc30>)
   13a4e:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   13a50:	4b46      	ldr	r3, [pc, #280]	; (13b6c <basic_init+0xc34>)
   13a52:	6818      	ldr	r0, [r3, #0]
   13a54:	3010      	adds	r0, #16
   13a56:	6a1b      	ldr	r3, [r3, #32]
   13a58:	f013 0f02 	tst.w	r3, #2
   13a5c:	f040 82d1 	bne.w	14002 <basic_init+0x10ca>
   13a60:	231f      	movs	r3, #31
   13a62:	213f      	movs	r1, #63	; 0x3f
   13a64:	461c      	mov	r4, r3
   13a66:	f04f 0200 	mov.w	r2, #0
   13a6a:	f364 0204 	bfi	r2, r4, #0, #5
   13a6e:	f361 124a 	bfi	r2, r1, #5, #6
   13a72:	f363 22cf 	bfi	r2, r3, #11, #5
   13a76:	f241 0179 	movw	r1, #4217	; 0x1079
   13a7a:	4d3b      	ldr	r5, [pc, #236]	; (13b68 <basic_init+0xc30>)
   13a7c:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   13a7e:	4c3b      	ldr	r4, [pc, #236]	; (13b6c <basic_init+0xc34>)
   13a80:	6820      	ldr	r0, [r4, #0]
   13a82:	f04f 32ff 	mov.w	r2, #4294967295
   13a86:	f240 1179 	movw	r1, #377	; 0x179
   13a8a:	3010      	adds	r0, #16
   13a8c:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   13a8e:	6820      	ldr	r0, [r4, #0]
   13a90:	f04f 32ff 	mov.w	r2, #4294967295
   13a94:	f241 1179 	movw	r1, #4473	; 0x1179
   13a98:	3010      	adds	r0, #16
   13a9a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   13a9c:	6820      	ldr	r0, [r4, #0]
   13a9e:	2311      	movs	r3, #17
   13aa0:	f04f 0200 	mov.w	r2, #0
   13aa4:	f363 0204 	bfi	r2, r3, #0, #5
   13aa8:	2122      	movs	r1, #34	; 0x22
   13aaa:	f361 124a 	bfi	r2, r1, #5, #6
   13aae:	f363 22cf 	bfi	r2, r3, #11, #5
   13ab2:	f242 0179 	movw	r1, #8313	; 0x2079
   13ab6:	3010      	adds	r0, #16
   13ab8:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   13aba:	6824      	ldr	r4, [r4, #0]
   13abc:	3410      	adds	r4, #16
   13abe:	2000      	movs	r0, #0
   13ac0:	4b2b      	ldr	r3, [pc, #172]	; (13b70 <basic_init+0xc38>)
   13ac2:	4798      	blx	r3
   13ac4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13ac8:	00c0      	lsls	r0, r0, #3
   13aca:	3050      	adds	r0, #80	; 0x50
   13acc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13ad0:	f080 829b 	bcs.w	1400a <basic_init+0x10d2>
   13ad4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13ad6:	2112      	movs	r1, #18
   13ad8:	4620      	mov	r0, r4
   13ada:	4b26      	ldr	r3, [pc, #152]	; (13b74 <basic_init+0xc3c>)
   13adc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   13ade:	4b23      	ldr	r3, [pc, #140]	; (13b6c <basic_init+0xc34>)
   13ae0:	681c      	ldr	r4, [r3, #0]
   13ae2:	3410      	adds	r4, #16
   13ae4:	2000      	movs	r0, #0
   13ae6:	4b22      	ldr	r3, [pc, #136]	; (13b70 <basic_init+0xc38>)
   13ae8:	4798      	blx	r3
   13aea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13aee:	00c0      	lsls	r0, r0, #3
   13af0:	3050      	adds	r0, #80	; 0x50
   13af2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13af6:	f080 8295 	bcs.w	14024 <basic_init+0x10ec>
   13afa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13afc:	2113      	movs	r1, #19
   13afe:	4620      	mov	r0, r4
   13b00:	4b1c      	ldr	r3, [pc, #112]	; (13b74 <basic_init+0xc3c>)
   13b02:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   13b04:	4b19      	ldr	r3, [pc, #100]	; (13b6c <basic_init+0xc34>)
   13b06:	681c      	ldr	r4, [r3, #0]
   13b08:	3410      	adds	r4, #16
   13b0a:	2000      	movs	r0, #0
   13b0c:	4b18      	ldr	r3, [pc, #96]	; (13b70 <basic_init+0xc38>)
   13b0e:	4798      	blx	r3
   13b10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13b14:	3050      	adds	r0, #80	; 0x50
   13b16:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13b1a:	f080 8290 	bcs.w	1403e <basic_init+0x1106>
   13b1e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13b20:	2110      	movs	r1, #16
   13b22:	4620      	mov	r0, r4
   13b24:	4b13      	ldr	r3, [pc, #76]	; (13b74 <basic_init+0xc3c>)
   13b26:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   13b28:	4b10      	ldr	r3, [pc, #64]	; (13b6c <basic_init+0xc34>)
   13b2a:	681c      	ldr	r4, [r3, #0]
   13b2c:	3410      	adds	r4, #16
   13b2e:	2000      	movs	r0, #0
   13b30:	4b0f      	ldr	r3, [pc, #60]	; (13b70 <basic_init+0xc38>)
   13b32:	4798      	blx	r3
   13b34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13b38:	3050      	adds	r0, #80	; 0x50
   13b3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13b3e:	f080 828b 	bcs.w	14058 <basic_init+0x1120>
   13b42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13b44:	2111      	movs	r1, #17
   13b46:	4620      	mov	r0, r4
   13b48:	4b0a      	ldr	r3, [pc, #40]	; (13b74 <basic_init+0xc3c>)
   13b4a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   13b4c:	4b07      	ldr	r3, [pc, #28]	; (13b6c <basic_init+0xc34>)
   13b4e:	681c      	ldr	r4, [r3, #0]
   13b50:	3410      	adds	r4, #16
   13b52:	2000      	movs	r0, #0
   13b54:	4b06      	ldr	r3, [pc, #24]	; (13b70 <basic_init+0xc38>)
   13b56:	4798      	blx	r3
   13b58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13b5c:	0080      	lsls	r0, r0, #2
   13b5e:	3050      	adds	r0, #80	; 0x50
   13b60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13b64:	e00a      	b.n	13b7c <basic_init+0xc44>
   13b66:	bf00      	nop
   13b68:	00006125 	.word	0x00006125
   13b6c:	2000abd4 	.word	0x2000abd4
   13b70:	00010181 	.word	0x00010181
   13b74:	00005ffd 	.word	0x00005ffd
   13b78:	0000624d 	.word	0x0000624d
   13b7c:	f080 8279 	bcs.w	14072 <basic_init+0x113a>
   13b80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13b82:	2114      	movs	r1, #20
   13b84:	4620      	mov	r0, r4
   13b86:	4dc4      	ldr	r5, [pc, #784]	; (13e98 <basic_init+0xf60>)
   13b88:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, 3);
   13b8a:	4cc4      	ldr	r4, [pc, #784]	; (13e9c <basic_init+0xf64>)
   13b8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   13b8e:	2203      	movs	r2, #3
   13b90:	2140      	movs	r1, #64	; 0x40
   13b92:	3010      	adds	r0, #16
   13b94:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
   13b96:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   13b98:	2200      	movs	r2, #0
   13b9a:	214c      	movs	r1, #76	; 0x4c
   13b9c:	3010      	adds	r0, #16
   13b9e:	4ec0      	ldr	r6, [pc, #768]	; (13ea0 <basic_init+0xf68>)
   13ba0:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
   13ba2:	6820      	ldr	r0, [r4, #0]
   13ba4:	227f      	movs	r2, #127	; 0x7f
   13ba6:	f44f 7113 	mov.w	r1, #588	; 0x24c
   13baa:	3010      	adds	r0, #16
   13bac:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
   13bae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   13bb0:	89a2      	ldrh	r2, [r4, #12]
   13bb2:	2149      	movs	r1, #73	; 0x49
   13bb4:	3010      	adds	r0, #16
   13bb6:	4ebb      	ldr	r6, [pc, #748]	; (13ea4 <basic_init+0xf6c>)
   13bb8:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
   13bba:	6820      	ldr	r0, [r4, #0]
   13bbc:	89e2      	ldrh	r2, [r4, #14]
   13bbe:	f240 4149 	movw	r1, #1097	; 0x449
   13bc2:	3010      	adds	r0, #16
   13bc4:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   13bc6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   13bc8:	2296      	movs	r2, #150	; 0x96
   13bca:	21b0      	movs	r1, #176	; 0xb0
   13bcc:	3010      	adds	r0, #16
   13bce:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
   13bd0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
   13bd2:	223c      	movs	r2, #60	; 0x3c
   13bd4:	21b5      	movs	r1, #181	; 0xb5
   13bd6:	3010      	adds	r0, #16
   13bd8:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   13bda:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   13bdc:	2229      	movs	r2, #41	; 0x29
   13bde:	21b6      	movs	r1, #182	; 0xb6
   13be0:	3010      	adds	r0, #16
   13be2:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   13be4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   13be6:	224c      	movs	r2, #76	; 0x4c
   13be8:	21b7      	movs	r1, #183	; 0xb7
   13bea:	3010      	adds	r0, #16
   13bec:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   13bee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
   13bf0:	2296      	movs	r2, #150	; 0x96
   13bf2:	21b1      	movs	r1, #177	; 0xb1
   13bf4:	3010      	adds	r0, #16
   13bf6:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
   13bf8:	6820      	ldr	r0, [r4, #0]
   13bfa:	2200      	movs	r2, #0
   13bfc:	f241 01b1 	movw	r1, #4273	; 0x10b1
   13c00:	3010      	adds	r0, #16
   13c02:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
   13c04:	6820      	ldr	r0, [r4, #0]
   13c06:	3014      	adds	r0, #20
   13c08:	4ba7      	ldr	r3, [pc, #668]	; (13ea8 <basic_init+0xf70>)
   13c0a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13c0c:	6824      	ldr	r4, [r4, #0]
   13c0e:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13c10:	2000      	movs	r0, #0
   13c12:	4ba6      	ldr	r3, [pc, #664]	; (13eac <basic_init+0xf74>)
   13c14:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13c16:	2832      	cmp	r0, #50	; 0x32
   13c18:	f200 8245 	bhi.w	140a6 <basic_init+0x116e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13c1c:	2000      	movs	r0, #0
   13c1e:	4ba4      	ldr	r3, [pc, #656]	; (13eb0 <basic_init+0xf78>)
   13c20:	4798      	blx	r3
   13c22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13c26:	0080      	lsls	r0, r0, #2
   13c28:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13c2a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13c2e:	f080 822d 	bcs.w	1408c <basic_init+0x1154>
   13c32:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13c34:	2114      	movs	r1, #20
   13c36:	4620      	mov	r0, r4
   13c38:	4b97      	ldr	r3, [pc, #604]	; (13e98 <basic_init+0xf60>)
   13c3a:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
   13c3c:	4b97      	ldr	r3, [pc, #604]	; (13e9c <basic_init+0xf64>)
   13c3e:	6818      	ldr	r0, [r3, #0]
   13c40:	3018      	adds	r0, #24
   13c42:	4b99      	ldr	r3, [pc, #612]	; (13ea8 <basic_init+0xf70>)
   13c44:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   13c46:	2000      	movs	r0, #0
   13c48:	4b98      	ldr	r3, [pc, #608]	; (13eac <basic_init+0xf74>)
   13c4a:	4798      	blx	r3
   13c4c:	2832      	cmp	r0, #50	; 0x32
   13c4e:	f200 8250 	bhi.w	140f2 <basic_init+0x11ba>
   13c52:	2000      	movs	r0, #0
   13c54:	4b96      	ldr	r3, [pc, #600]	; (13eb0 <basic_init+0xf78>)
   13c56:	4798      	blx	r3
   13c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13c5c:	0040      	lsls	r0, r0, #1
   13c5e:	3050      	adds	r0, #80	; 0x50
   13c60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13c64:	f080 8238 	bcs.w	140d8 <basic_init+0x11a0>
   13c68:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   13c6a:	4e8c      	ldr	r6, [pc, #560]	; (13e9c <basic_init+0xf64>)
   13c6c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13c6e:	4622      	mov	r2, r4
   13c70:	2112      	movs	r1, #18
   13c72:	3018      	adds	r0, #24
   13c74:	4d88      	ldr	r5, [pc, #544]	; (13e98 <basic_init+0xf60>)
   13c76:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13c78:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13c7a:	4622      	mov	r2, r4
   13c7c:	2113      	movs	r1, #19
   13c7e:	3018      	adds	r0, #24
   13c80:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   13c82:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13c84:	4622      	mov	r2, r4
   13c86:	2110      	movs	r1, #16
   13c88:	3018      	adds	r0, #24
   13c8a:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13c8c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13c8e:	4622      	mov	r2, r4
   13c90:	2111      	movs	r1, #17
   13c92:	3018      	adds	r0, #24
   13c94:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13c96:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13c98:	4622      	mov	r2, r4
   13c9a:	2114      	movs	r1, #20
   13c9c:	3018      	adds	r0, #24
   13c9e:	47a8      	blx	r5
   13ca0:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   13ca2:	2000      	movs	r0, #0
   13ca4:	4b82      	ldr	r3, [pc, #520]	; (13eb0 <basic_init+0xf78>)
   13ca6:	4798      	blx	r3
   13ca8:	f100 020a 	add.w	r2, r0, #10
   13cac:	00d2      	lsls	r2, r2, #3
   13cae:	4881      	ldr	r0, [pc, #516]	; (13eb4 <basic_init+0xf7c>)
   13cb0:	fba0 3202 	umull	r3, r2, r0, r2
   13cb4:	f342 12cf 	sbfx	r2, r2, #7, #16
   13cb8:	f7ff b9ae 	b.w	13018 <basic_init+0xe0>
   13cbc:	231f      	movs	r3, #31
   13cbe:	213f      	movs	r1, #63	; 0x3f
   13cc0:	461c      	mov	r4, r3
   13cc2:	f7ff b9be 	b.w	13042 <basic_init+0x10a>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   13cc6:	2000      	movs	r0, #0
   13cc8:	4b79      	ldr	r3, [pc, #484]	; (13eb0 <basic_init+0xf78>)
   13cca:	4798      	blx	r3
   13ccc:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13cd0:	0052      	lsls	r2, r2, #1
   13cd2:	4878      	ldr	r0, [pc, #480]	; (13eb4 <basic_init+0xf7c>)
   13cd4:	fba0 3202 	umull	r3, r2, r0, r2
   13cd8:	f342 12cf 	sbfx	r2, r2, #7, #16
   13cdc:	f7ff b9ef 	b.w	130be <basic_init+0x186>
   13ce0:	2307      	movs	r3, #7
   13ce2:	210f      	movs	r1, #15
   13ce4:	2408      	movs	r4, #8
   13ce6:	f7ff ba05 	b.w	130f4 <basic_init+0x1bc>
   13cea:	2307      	movs	r3, #7
   13cec:	210f      	movs	r1, #15
   13cee:	2408      	movs	r4, #8
   13cf0:	f7ff ba1d 	b.w	1312e <basic_init+0x1f6>
   13cf4:	2307      	movs	r3, #7
   13cf6:	210f      	movs	r1, #15
   13cf8:	2408      	movs	r4, #8
   13cfa:	f7ff ba2e 	b.w	1315a <basic_init+0x222>
   13cfe:	2307      	movs	r3, #7
   13d00:	210f      	movs	r1, #15
   13d02:	2408      	movs	r4, #8
   13d04:	f7ff ba40 	b.w	13188 <basic_init+0x250>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13d08:	2000      	movs	r0, #0
   13d0a:	4b69      	ldr	r3, [pc, #420]	; (13eb0 <basic_init+0xf78>)
   13d0c:	4798      	blx	r3
   13d0e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13d12:	3050      	adds	r0, #80	; 0x50
   13d14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13d18:	d202      	bcs.n	13d20 <basic_init+0xde8>
   13d1a:	2401      	movs	r4, #1
   13d1c:	f7ff ba5a 	b.w	131d4 <basic_init+0x29c>
   13d20:	2000      	movs	r0, #0
   13d22:	4b63      	ldr	r3, [pc, #396]	; (13eb0 <basic_init+0xf78>)
   13d24:	4798      	blx	r3
   13d26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13d2a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   13d2e:	4c61      	ldr	r4, [pc, #388]	; (13eb4 <basic_init+0xf7c>)
   13d30:	fba4 3202 	umull	r3, r2, r4, r2
   13d34:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13d38:	f7ff ba4c 	b.w	131d4 <basic_init+0x29c>
   13d3c:	2000      	movs	r0, #0
   13d3e:	4b5c      	ldr	r3, [pc, #368]	; (13eb0 <basic_init+0xf78>)
   13d40:	4798      	blx	r3
   13d42:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13d46:	0042      	lsls	r2, r0, #1
   13d48:	3250      	adds	r2, #80	; 0x50
   13d4a:	4c5a      	ldr	r4, [pc, #360]	; (13eb4 <basic_init+0xf7c>)
   13d4c:	fba4 3202 	umull	r3, r2, r4, r2
   13d50:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13d54:	f7ff ba3e 	b.w	131d4 <basic_init+0x29c>
   13d58:	2000      	movs	r0, #0
   13d5a:	4b55      	ldr	r3, [pc, #340]	; (13eb0 <basic_init+0xf78>)
   13d5c:	4798      	blx	r3
   13d5e:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13d62:	0052      	lsls	r2, r2, #1
   13d64:	4853      	ldr	r0, [pc, #332]	; (13eb4 <basic_init+0xf7c>)
   13d66:	fba0 3202 	umull	r3, r2, r0, r2
   13d6a:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   13d6e:	f7ff ba3b 	b.w	131e8 <basic_init+0x2b0>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13d72:	2000      	movs	r0, #0
   13d74:	4b4e      	ldr	r3, [pc, #312]	; (13eb0 <basic_init+0xf78>)
   13d76:	4798      	blx	r3
   13d78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13d7c:	3050      	adds	r0, #80	; 0x50
   13d7e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13d82:	d202      	bcs.n	13d8a <basic_init+0xe52>
   13d84:	2401      	movs	r4, #1
   13d86:	f7ff ba5b 	b.w	13240 <basic_init+0x308>
   13d8a:	2000      	movs	r0, #0
   13d8c:	4b48      	ldr	r3, [pc, #288]	; (13eb0 <basic_init+0xf78>)
   13d8e:	4798      	blx	r3
   13d90:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13d94:	f100 0250 	add.w	r2, r0, #80	; 0x50
   13d98:	4c46      	ldr	r4, [pc, #280]	; (13eb4 <basic_init+0xf7c>)
   13d9a:	fba4 3202 	umull	r3, r2, r4, r2
   13d9e:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13da2:	f7ff ba4d 	b.w	13240 <basic_init+0x308>
   13da6:	2000      	movs	r0, #0
   13da8:	4b41      	ldr	r3, [pc, #260]	; (13eb0 <basic_init+0xf78>)
   13daa:	4798      	blx	r3
   13dac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13db0:	0042      	lsls	r2, r0, #1
   13db2:	3250      	adds	r2, #80	; 0x50
   13db4:	4c3f      	ldr	r4, [pc, #252]	; (13eb4 <basic_init+0xf7c>)
   13db6:	fba4 3202 	umull	r3, r2, r4, r2
   13dba:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13dbe:	f7ff ba3f 	b.w	13240 <basic_init+0x308>
   13dc2:	2000      	movs	r0, #0
   13dc4:	4b3a      	ldr	r3, [pc, #232]	; (13eb0 <basic_init+0xf78>)
   13dc6:	4798      	blx	r3
   13dc8:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13dcc:	0052      	lsls	r2, r2, #1
   13dce:	4839      	ldr	r0, [pc, #228]	; (13eb4 <basic_init+0xf7c>)
   13dd0:	fba0 3202 	umull	r3, r2, r0, r2
   13dd4:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   13dd8:	f7ff ba3c 	b.w	13254 <basic_init+0x31c>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13ddc:	2000      	movs	r0, #0
   13dde:	4b34      	ldr	r3, [pc, #208]	; (13eb0 <basic_init+0xf78>)
   13de0:	4798      	blx	r3
   13de2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13de6:	3050      	adds	r0, #80	; 0x50
   13de8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13dec:	d202      	bcs.n	13df4 <basic_init+0xebc>
   13dee:	2401      	movs	r4, #1
   13df0:	f7ff ba4b 	b.w	1328a <basic_init+0x352>
   13df4:	2000      	movs	r0, #0
   13df6:	4b2e      	ldr	r3, [pc, #184]	; (13eb0 <basic_init+0xf78>)
   13df8:	4798      	blx	r3
   13dfa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13dfe:	f100 0250 	add.w	r2, r0, #80	; 0x50
   13e02:	4c2c      	ldr	r4, [pc, #176]	; (13eb4 <basic_init+0xf7c>)
   13e04:	fba4 3202 	umull	r3, r2, r4, r2
   13e08:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13e0c:	f7ff ba3d 	b.w	1328a <basic_init+0x352>
   13e10:	2000      	movs	r0, #0
   13e12:	4b27      	ldr	r3, [pc, #156]	; (13eb0 <basic_init+0xf78>)
   13e14:	4798      	blx	r3
   13e16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13e1a:	0042      	lsls	r2, r0, #1
   13e1c:	3250      	adds	r2, #80	; 0x50
   13e1e:	4c25      	ldr	r4, [pc, #148]	; (13eb4 <basic_init+0xf7c>)
   13e20:	fba4 3202 	umull	r3, r2, r4, r2
   13e24:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13e28:	f7ff ba2f 	b.w	1328a <basic_init+0x352>
   13e2c:	2000      	movs	r0, #0
   13e2e:	4b20      	ldr	r3, [pc, #128]	; (13eb0 <basic_init+0xf78>)
   13e30:	4798      	blx	r3
   13e32:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13e36:	0052      	lsls	r2, r2, #1
   13e38:	481e      	ldr	r0, [pc, #120]	; (13eb4 <basic_init+0xf7c>)
   13e3a:	fba0 3202 	umull	r3, r2, r0, r2
   13e3e:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   13e42:	f7ff ba2c 	b.w	1329e <basic_init+0x366>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   13e46:	2000      	movs	r0, #0
   13e48:	4b19      	ldr	r3, [pc, #100]	; (13eb0 <basic_init+0xf78>)
   13e4a:	4798      	blx	r3
   13e4c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13e50:	3050      	adds	r0, #80	; 0x50
   13e52:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13e56:	d202      	bcs.n	13e5e <basic_init+0xf26>
   13e58:	2401      	movs	r4, #1
   13e5a:	f7ff ba3b 	b.w	132d4 <basic_init+0x39c>
   13e5e:	2000      	movs	r0, #0
   13e60:	4b13      	ldr	r3, [pc, #76]	; (13eb0 <basic_init+0xf78>)
   13e62:	4798      	blx	r3
   13e64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13e68:	f100 0250 	add.w	r2, r0, #80	; 0x50
   13e6c:	4c11      	ldr	r4, [pc, #68]	; (13eb4 <basic_init+0xf7c>)
   13e6e:	fba4 3202 	umull	r3, r2, r4, r2
   13e72:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13e76:	f7ff ba2d 	b.w	132d4 <basic_init+0x39c>
   13e7a:	2000      	movs	r0, #0
   13e7c:	4b0c      	ldr	r3, [pc, #48]	; (13eb0 <basic_init+0xf78>)
   13e7e:	4798      	blx	r3
   13e80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13e84:	0042      	lsls	r2, r0, #1
   13e86:	3250      	adds	r2, #80	; 0x50
   13e88:	4c0a      	ldr	r4, [pc, #40]	; (13eb4 <basic_init+0xf7c>)
   13e8a:	fba4 3202 	umull	r3, r2, r4, r2
   13e8e:	f3c2 14cf 	ubfx	r4, r2, #7, #16
   13e92:	f7ff ba1f 	b.w	132d4 <basic_init+0x39c>
   13e96:	bf00      	nop
   13e98:	00005ffd 	.word	0x00005ffd
   13e9c:	2000abd4 	.word	0x2000abd4
   13ea0:	0000624d 	.word	0x0000624d
   13ea4:	00006125 	.word	0x00006125
   13ea8:	00012f19 	.word	0x00012f19
   13eac:	0001019d 	.word	0x0001019d
   13eb0:	00010181 	.word	0x00010181
   13eb4:	cccccccd 	.word	0xcccccccd
   13eb8:	2000      	movs	r0, #0
   13eba:	4b9a      	ldr	r3, [pc, #616]	; (14124 <basic_init+0x11ec>)
   13ebc:	4798      	blx	r3
   13ebe:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13ec2:	0052      	lsls	r2, r2, #1
   13ec4:	4898      	ldr	r0, [pc, #608]	; (14128 <basic_init+0x11f0>)
   13ec6:	fba0 3202 	umull	r3, r2, r0, r2
   13eca:	f3c2 12cf 	ubfx	r2, r2, #7, #16
   13ece:	f7ff ba0b 	b.w	132e8 <basic_init+0x3b0>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   13ed2:	2000      	movs	r0, #0
   13ed4:	4b93      	ldr	r3, [pc, #588]	; (14124 <basic_init+0x11ec>)
   13ed6:	4798      	blx	r3
   13ed8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13edc:	3050      	adds	r0, #80	; 0x50
   13ede:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   13ee2:	d202      	bcs.n	13eea <basic_init+0xfb2>
   13ee4:	2201      	movs	r2, #1
   13ee6:	f7ff ba1a 	b.w	1331e <basic_init+0x3e6>
   13eea:	2000      	movs	r0, #0
   13eec:	4b8d      	ldr	r3, [pc, #564]	; (14124 <basic_init+0x11ec>)
   13eee:	4798      	blx	r3
   13ef0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13ef4:	f100 0250 	add.w	r2, r0, #80	; 0x50
   13ef8:	488b      	ldr	r0, [pc, #556]	; (14128 <basic_init+0x11f0>)
   13efa:	fba0 3202 	umull	r3, r2, r0, r2
   13efe:	f342 12cf 	sbfx	r2, r2, #7, #16
   13f02:	f7ff ba0c 	b.w	1331e <basic_init+0x3e6>
   13f06:	2000      	movs	r0, #0
   13f08:	4b86      	ldr	r3, [pc, #536]	; (14124 <basic_init+0x11ec>)
   13f0a:	4798      	blx	r3
   13f0c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   13f10:	0042      	lsls	r2, r0, #1
   13f12:	3250      	adds	r2, #80	; 0x50
   13f14:	4b84      	ldr	r3, [pc, #528]	; (14128 <basic_init+0x11f0>)
   13f16:	fba3 3202 	umull	r3, r2, r3, r2
   13f1a:	f342 12cf 	sbfx	r2, r2, #7, #16
   13f1e:	f7ff b9fe 	b.w	1331e <basic_init+0x3e6>
   13f22:	231b      	movs	r3, #27
   13f24:	2139      	movs	r1, #57	; 0x39
   13f26:	241d      	movs	r4, #29
   13f28:	f7ff ba35 	b.w	13396 <basic_init+0x45e>
   13f2c:	231d      	movs	r3, #29
   13f2e:	213b      	movs	r1, #59	; 0x3b
   13f30:	461c      	mov	r4, r3
   13f32:	f7ff bab4 	b.w	1349e <basic_init+0x566>
   13f36:	231f      	movs	r3, #31
   13f38:	213f      	movs	r1, #63	; 0x3f
   13f3a:	461c      	mov	r4, r3
   13f3c:	f7ff bae8 	b.w	13510 <basic_init+0x5d8>
   13f40:	2319      	movs	r3, #25
   13f42:	2133      	movs	r1, #51	; 0x33
   13f44:	461c      	mov	r4, r3
   13f46:	f7ff bb0c 	b.w	13562 <basic_init+0x62a>
   13f4a:	2307      	movs	r3, #7
   13f4c:	210f      	movs	r1, #15
   13f4e:	2408      	movs	r4, #8
   13f50:	f7ff bb6f 	b.w	13632 <basic_init+0x6fa>
   13f54:	2307      	movs	r3, #7
   13f56:	210f      	movs	r1, #15
   13f58:	2408      	movs	r4, #8
   13f5a:	f7ff bba6 	b.w	136aa <basic_init+0x772>
   13f5e:	231f      	movs	r3, #31
   13f60:	213f      	movs	r1, #63	; 0x3f
   13f62:	461c      	mov	r4, r3
   13f64:	f7ff bbf3 	b.w	1374e <basic_init+0x816>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   13f68:	4d70      	ldr	r5, [pc, #448]	; (1412c <basic_init+0x11f4>)
   13f6a:	7b6b      	ldrb	r3, [r5, #13]
   13f6c:	08db      	lsrs	r3, r3, #3
   13f6e:	214c      	movs	r1, #76	; 0x4c
   13f70:	fb01 f303 	mul.w	r3, r1, r3
   13f74:	f203 73b1 	addw	r3, r3, #1969	; 0x7b1
   13f78:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   13f7c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   13f80:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   13f84:	89ac      	ldrh	r4, [r5, #12]
   13f86:	f3c4 1445 	ubfx	r4, r4, #5, #6
   13f8a:	f241 02c8 	movw	r2, #4296	; 0x10c8
   13f8e:	fb01 2404 	mla	r4, r1, r4, r2
   13f92:	eb04 2204 	add.w	r2, r4, r4, lsl #8
   13f96:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   13f9a:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   13f9e:	7b2a      	ldrb	r2, [r5, #12]
   13fa0:	f002 021f 	and.w	r2, r2, #31
   13fa4:	fb01 f102 	mul.w	r1, r1, r2
   13fa8:	f601 11ca 	addw	r1, r1, #2506	; 0x9ca
   13fac:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   13fb0:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   13fb4:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   13fb8:	e40a      	b.n	137d0 <basic_init+0x898>
   13fba:	231f      	movs	r3, #31
   13fbc:	213f      	movs	r1, #63	; 0x3f
   13fbe:	461c      	mov	r4, r3
   13fc0:	e43b      	b.n	1383a <basic_init+0x902>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   13fc2:	2000      	movs	r0, #0
   13fc4:	4b57      	ldr	r3, [pc, #348]	; (14124 <basic_init+0x11ec>)
   13fc6:	4798      	blx	r3
   13fc8:	f100 0228 	add.w	r2, r0, #40	; 0x28
   13fcc:	0052      	lsls	r2, r2, #1
   13fce:	4856      	ldr	r0, [pc, #344]	; (14128 <basic_init+0x11f0>)
   13fd0:	fba0 3202 	umull	r3, r2, r0, r2
   13fd4:	f342 12cf 	sbfx	r2, r2, #7, #16
   13fd8:	e483      	b.n	138e2 <basic_init+0x9aa>
   13fda:	2306      	movs	r3, #6
   13fdc:	2110      	movs	r1, #16
   13fde:	2409      	movs	r4, #9
   13fe0:	e495      	b.n	1390e <basic_init+0x9d6>
   13fe2:	2306      	movs	r3, #6
   13fe4:	2110      	movs	r1, #16
   13fe6:	2409      	movs	r4, #9
   13fe8:	e4a8      	b.n	1393c <basic_init+0xa04>
   13fea:	2306      	movs	r3, #6
   13fec:	2110      	movs	r1, #16
   13fee:	2409      	movs	r4, #9
   13ff0:	e4d8      	b.n	139a4 <basic_init+0xa6c>
   13ff2:	2306      	movs	r3, #6
   13ff4:	2110      	movs	r1, #16
   13ff6:	2409      	movs	r4, #9
   13ff8:	e4eb      	b.n	139d2 <basic_init+0xa9a>
   13ffa:	2306      	movs	r3, #6
   13ffc:	2110      	movs	r1, #16
   13ffe:	2409      	movs	r4, #9
   14000:	e51b      	b.n	13a3a <basic_init+0xb02>
   14002:	2306      	movs	r3, #6
   14004:	2110      	movs	r1, #16
   14006:	2409      	movs	r4, #9
   14008:	e52d      	b.n	13a66 <basic_init+0xb2e>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   1400a:	2000      	movs	r0, #0
   1400c:	4b45      	ldr	r3, [pc, #276]	; (14124 <basic_init+0x11ec>)
   1400e:	4798      	blx	r3
   14010:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14014:	00c2      	lsls	r2, r0, #3
   14016:	3250      	adds	r2, #80	; 0x50
   14018:	4843      	ldr	r0, [pc, #268]	; (14128 <basic_init+0x11f0>)
   1401a:	fba0 3202 	umull	r3, r2, r0, r2
   1401e:	f342 12cf 	sbfx	r2, r2, #7, #16
   14022:	e558      	b.n	13ad6 <basic_init+0xb9e>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   14024:	2000      	movs	r0, #0
   14026:	4b3f      	ldr	r3, [pc, #252]	; (14124 <basic_init+0x11ec>)
   14028:	4798      	blx	r3
   1402a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1402e:	00c2      	lsls	r2, r0, #3
   14030:	3250      	adds	r2, #80	; 0x50
   14032:	483d      	ldr	r0, [pc, #244]	; (14128 <basic_init+0x11f0>)
   14034:	fba0 3202 	umull	r3, r2, r0, r2
   14038:	f342 12cf 	sbfx	r2, r2, #7, #16
   1403c:	e55e      	b.n	13afc <basic_init+0xbc4>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   1403e:	2000      	movs	r0, #0
   14040:	4b38      	ldr	r3, [pc, #224]	; (14124 <basic_init+0x11ec>)
   14042:	4798      	blx	r3
   14044:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14048:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1404c:	4836      	ldr	r0, [pc, #216]	; (14128 <basic_init+0x11f0>)
   1404e:	fba0 3202 	umull	r3, r2, r0, r2
   14052:	f342 12cf 	sbfx	r2, r2, #7, #16
   14056:	e563      	b.n	13b20 <basic_init+0xbe8>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   14058:	2000      	movs	r0, #0
   1405a:	4b32      	ldr	r3, [pc, #200]	; (14124 <basic_init+0x11ec>)
   1405c:	4798      	blx	r3
   1405e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14062:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14066:	4830      	ldr	r0, [pc, #192]	; (14128 <basic_init+0x11f0>)
   14068:	fba0 3202 	umull	r3, r2, r0, r2
   1406c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14070:	e568      	b.n	13b44 <basic_init+0xc0c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   14072:	2000      	movs	r0, #0
   14074:	4b2b      	ldr	r3, [pc, #172]	; (14124 <basic_init+0x11ec>)
   14076:	4798      	blx	r3
   14078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1407c:	0082      	lsls	r2, r0, #2
   1407e:	3250      	adds	r2, #80	; 0x50
   14080:	4829      	ldr	r0, [pc, #164]	; (14128 <basic_init+0x11f0>)
   14082:	fba0 3202 	umull	r3, r2, r0, r2
   14086:	f342 12cf 	sbfx	r2, r2, #7, #16
   1408a:	e57a      	b.n	13b82 <basic_init+0xc4a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   1408c:	2000      	movs	r0, #0
   1408e:	4b25      	ldr	r3, [pc, #148]	; (14124 <basic_init+0x11ec>)
   14090:	4798      	blx	r3
   14092:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14096:	0082      	lsls	r2, r0, #2
   14098:	3250      	adds	r2, #80	; 0x50
   1409a:	4b23      	ldr	r3, [pc, #140]	; (14128 <basic_init+0x11f0>)
   1409c:	fba3 3202 	umull	r3, r2, r3, r2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   140a0:	f342 12cf 	sbfx	r2, r2, #7, #16
   140a4:	e5c6      	b.n	13c34 <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   140a6:	2000      	movs	r0, #0
   140a8:	4b1e      	ldr	r3, [pc, #120]	; (14124 <basic_init+0x11ec>)
   140aa:	4798      	blx	r3
   140ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   140b0:	00c0      	lsls	r0, r0, #3
   140b2:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   140b4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   140b8:	d201      	bcs.n	140be <basic_init+0x1186>
   140ba:	2201      	movs	r2, #1
   140bc:	e5ba      	b.n	13c34 <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   140be:	2000      	movs	r0, #0
   140c0:	4b18      	ldr	r3, [pc, #96]	; (14124 <basic_init+0x11ec>)
   140c2:	4798      	blx	r3
   140c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   140c8:	00c2      	lsls	r2, r0, #3
   140ca:	3250      	adds	r2, #80	; 0x50
   140cc:	4b16      	ldr	r3, [pc, #88]	; (14128 <basic_init+0x11f0>)
   140ce:	fba3 3202 	umull	r3, r2, r3, r2
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   140d2:	f342 12cf 	sbfx	r2, r2, #7, #16
   140d6:	e5ad      	b.n	13c34 <basic_init+0xcfc>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   140d8:	2000      	movs	r0, #0
   140da:	4b12      	ldr	r3, [pc, #72]	; (14124 <basic_init+0x11ec>)
   140dc:	4798      	blx	r3
   140de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   140e2:	0044      	lsls	r4, r0, #1
   140e4:	3450      	adds	r4, #80	; 0x50
   140e6:	4b10      	ldr	r3, [pc, #64]	; (14128 <basic_init+0x11f0>)
   140e8:	fba3 3404 	umull	r3, r4, r3, r4
   140ec:	f344 14cf 	sbfx	r4, r4, #7, #16
   140f0:	e5bb      	b.n	13c6a <basic_init+0xd32>
   140f2:	2000      	movs	r0, #0
   140f4:	4b0b      	ldr	r3, [pc, #44]	; (14124 <basic_init+0x11ec>)
   140f6:	4798      	blx	r3
   140f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   140fc:	0080      	lsls	r0, r0, #2
   140fe:	3050      	adds	r0, #80	; 0x50
   14100:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14104:	d201      	bcs.n	1410a <basic_init+0x11d2>
   14106:	2401      	movs	r4, #1
   14108:	e5af      	b.n	13c6a <basic_init+0xd32>
   1410a:	2000      	movs	r0, #0
   1410c:	4b05      	ldr	r3, [pc, #20]	; (14124 <basic_init+0x11ec>)
   1410e:	4798      	blx	r3
   14110:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14114:	0084      	lsls	r4, r0, #2
   14116:	3450      	adds	r4, #80	; 0x50
   14118:	4b03      	ldr	r3, [pc, #12]	; (14128 <basic_init+0x11f0>)
   1411a:	fba3 3404 	umull	r3, r4, r3, r4
   1411e:	f344 14cf 	sbfx	r4, r4, #7, #16
   14122:	e5a2      	b.n	13c6a <basic_init+0xd32>
   14124:	00010181 	.word	0x00010181
   14128:	cccccccd 	.word	0xcccccccd
   1412c:	2000abd4 	.word	0x2000abd4

00014130 <bar_init>:
{
   14130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->bar_bg);
   14132:	4c54      	ldr	r4, [pc, #336]	; (14284 <bar_init+0x154>)
   14134:	6820      	ldr	r0, [r4, #0]
   14136:	3024      	adds	r0, #36	; 0x24
   14138:	4b53      	ldr	r3, [pc, #332]	; (14288 <bar_init+0x158>)
   1413a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1413c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1413e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14142:	2101      	movs	r1, #1
   14144:	3024      	adds	r0, #36	; 0x24
   14146:	4b51      	ldr	r3, [pc, #324]	; (1428c <bar_init+0x15c>)
   14148:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   1414a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1414c:	22ff      	movs	r2, #255	; 0xff
   1414e:	212c      	movs	r1, #44	; 0x2c
   14150:	3024      	adds	r0, #36	; 0x24
   14152:	4b4f      	ldr	r3, [pc, #316]	; (14290 <bar_init+0x160>)
   14154:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   14156:	6820      	ldr	r0, [r4, #0]
   14158:	6a23      	ldr	r3, [r4, #32]
   1415a:	f013 0302 	ands.w	r3, r3, #2
   1415e:	bf14      	ite	ne
   14160:	211a      	movne	r1, #26
   14162:	2108      	moveq	r1, #8
   14164:	2b00      	cmp	r3, #0
   14166:	bf15      	itete	ne
   14168:	2435      	movne	r4, #53	; 0x35
   1416a:	2412      	moveq	r4, #18
   1416c:	231b      	movne	r3, #27
   1416e:	2309      	moveq	r3, #9
   14170:	f04f 0200 	mov.w	r2, #0
   14174:	f363 0204 	bfi	r2, r3, #0, #5
   14178:	f364 124a 	bfi	r2, r4, #5, #6
   1417c:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14180:	2129      	movs	r1, #41	; 0x29
   14182:	3024      	adds	r0, #36	; 0x24
   14184:	4b43      	ldr	r3, [pc, #268]	; (14294 <bar_init+0x164>)
   14186:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   14188:	4b3e      	ldr	r3, [pc, #248]	; (14284 <bar_init+0x154>)
   1418a:	6818      	ldr	r0, [r3, #0]
   1418c:	3024      	adds	r0, #36	; 0x24
   1418e:	6a1b      	ldr	r3, [r3, #32]
   14190:	f013 0f02 	tst.w	r3, #2
   14194:	d16d      	bne.n	14272 <bar_init+0x142>
   14196:	231f      	movs	r3, #31
   14198:	213f      	movs	r1, #63	; 0x3f
   1419a:	461c      	mov	r4, r3
   1419c:	f04f 0200 	mov.w	r2, #0
   141a0:	f364 0204 	bfi	r2, r4, #0, #5
   141a4:	f361 124a 	bfi	r2, r1, #5, #6
   141a8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   141ac:	2179      	movs	r1, #121	; 0x79
   141ae:	4d39      	ldr	r5, [pc, #228]	; (14294 <bar_init+0x164>)
   141b0:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
   141b2:	4c34      	ldr	r4, [pc, #208]	; (14284 <bar_init+0x154>)
   141b4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   141b6:	89a2      	ldrh	r2, [r4, #12]
   141b8:	2149      	movs	r1, #73	; 0x49
   141ba:	3024      	adds	r0, #36	; 0x24
   141bc:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
   141be:	6820      	ldr	r0, [r4, #0]
   141c0:	89e2      	ldrh	r2, [r4, #14]
   141c2:	f240 4149 	movw	r1, #1097	; 0x449
   141c6:	3024      	adds	r0, #36	; 0x24
   141c8:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   141ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   141cc:	2200      	movs	r2, #0
   141ce:	214c      	movs	r1, #76	; 0x4c
   141d0:	3024      	adds	r0, #36	; 0x24
   141d2:	4f2f      	ldr	r7, [pc, #188]	; (14290 <bar_init+0x160>)
   141d4:	47b8      	blx	r7
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
   141d6:	6820      	ldr	r0, [r4, #0]
   141d8:	227f      	movs	r2, #127	; 0x7f
   141da:	f44f 7113 	mov.w	r1, #588	; 0x24c
   141de:	3024      	adds	r0, #36	; 0x24
   141e0:	47b8      	blx	r7
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, 3);
   141e2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   141e4:	2203      	movs	r2, #3
   141e6:	2140      	movs	r1, #64	; 0x40
   141e8:	3024      	adds	r0, #36	; 0x24
   141ea:	4e28      	ldr	r6, [pc, #160]	; (1428c <bar_init+0x15c>)
   141ec:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   141ee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   141f0:	2296      	movs	r2, #150	; 0x96
   141f2:	21b0      	movs	r1, #176	; 0xb0
   141f4:	3024      	adds	r0, #36	; 0x24
   141f6:	47b0      	blx	r6
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   141f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   141fa:	224c      	movs	r2, #76	; 0x4c
   141fc:	21b7      	movs	r1, #183	; 0xb7
   141fe:	3024      	adds	r0, #36	; 0x24
   14200:	47b0      	blx	r6
    style_init_reset(&styles->bar_indic);
   14202:	6820      	ldr	r0, [r4, #0]
   14204:	3028      	adds	r0, #40	; 0x28
   14206:	4b20      	ldr	r3, [pc, #128]	; (14288 <bar_init+0x158>)
   14208:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   1420a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1420c:	22ff      	movs	r2, #255	; 0xff
   1420e:	212c      	movs	r1, #44	; 0x2c
   14210:	3028      	adds	r0, #40	; 0x28
   14212:	47b8      	blx	r7
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14214:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14216:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1421a:	2101      	movs	r1, #1
   1421c:	3028      	adds	r0, #40	; 0x28
   1421e:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
   14220:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14222:	89a2      	ldrh	r2, [r4, #12]
   14224:	2129      	movs	r1, #41	; 0x29
   14226:	3028      	adds	r0, #40	; 0x28
   14228:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
   1422a:	6820      	ldr	r0, [r4, #0]
   1422c:	2311      	movs	r3, #17
   1422e:	f04f 0200 	mov.w	r2, #0
   14232:	f363 0204 	bfi	r2, r3, #0, #5
   14236:	2122      	movs	r1, #34	; 0x22
   14238:	f361 124a 	bfi	r2, r1, #5, #6
   1423c:	f363 22cf 	bfi	r2, r3, #11, #5
   14240:	f242 0129 	movw	r1, #8233	; 0x2029
   14244:	3028      	adds	r0, #40	; 0x28
   14246:	47a8      	blx	r5
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
   14248:	6820      	ldr	r0, [r4, #0]
   1424a:	3028      	adds	r0, #40	; 0x28
   1424c:	6a23      	ldr	r3, [r4, #32]
   1424e:	f013 0f02 	tst.w	r3, #2
   14252:	d112      	bne.n	1427a <bar_init+0x14a>
   14254:	231f      	movs	r3, #31
   14256:	213f      	movs	r1, #63	; 0x3f
   14258:	461c      	mov	r4, r3
   1425a:	f04f 0200 	mov.w	r2, #0
   1425e:	f364 0204 	bfi	r2, r4, #0, #5
   14262:	f361 124a 	bfi	r2, r1, #5, #6
   14266:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1426a:	2179      	movs	r1, #121	; 0x79
   1426c:	4b09      	ldr	r3, [pc, #36]	; (14294 <bar_init+0x164>)
   1426e:	4798      	blx	r3
   14270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14272:	2306      	movs	r3, #6
   14274:	2110      	movs	r1, #16
   14276:	2409      	movs	r4, #9
   14278:	e790      	b.n	1419c <bar_init+0x6c>
   1427a:	2308      	movs	r3, #8
   1427c:	2110      	movs	r1, #16
   1427e:	2409      	movs	r4, #9
   14280:	e7eb      	b.n	1425a <bar_init+0x12a>
   14282:	bf00      	nop
   14284:	2000abd4 	.word	0x2000abd4
   14288:	00012f19 	.word	0x00012f19
   1428c:	00005ffd 	.word	0x00005ffd
   14290:	0000624d 	.word	0x0000624d
   14294:	00006125 	.word	0x00006125

00014298 <slider_init>:
{
   14298:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
   1429a:	4c9a      	ldr	r4, [pc, #616]	; (14504 <slider_init+0x26c>)
   1429c:	6820      	ldr	r0, [r4, #0]
   1429e:	3090      	adds	r0, #144	; 0x90
   142a0:	4b99      	ldr	r3, [pc, #612]	; (14508 <slider_init+0x270>)
   142a2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   142a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   142a6:	22ff      	movs	r2, #255	; 0xff
   142a8:	212c      	movs	r1, #44	; 0x2c
   142aa:	3090      	adds	r0, #144	; 0x90
   142ac:	4b97      	ldr	r3, [pc, #604]	; (1450c <slider_init+0x274>)
   142ae:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
   142b0:	6820      	ldr	r0, [r4, #0]
   142b2:	3090      	adds	r0, #144	; 0x90
   142b4:	6a23      	ldr	r3, [r4, #32]
   142b6:	f013 0f02 	tst.w	r3, #2
   142ba:	bf19      	ittee	ne
   142bc:	4623      	movne	r3, r4
   142be:	899a      	ldrhne	r2, [r3, #12]
   142c0:	4b93      	ldreq	r3, [pc, #588]	; (14510 <slider_init+0x278>)
   142c2:	881a      	ldrheq	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   142c4:	2129      	movs	r1, #41	; 0x29
   142c6:	4b93      	ldr	r3, [pc, #588]	; (14514 <slider_init+0x27c>)
   142c8:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   142ca:	4b8e      	ldr	r3, [pc, #568]	; (14504 <slider_init+0x26c>)
   142cc:	6818      	ldr	r0, [r3, #0]
   142ce:	3090      	adds	r0, #144	; 0x90
   142d0:	6a1b      	ldr	r3, [r3, #32]
   142d2:	f013 0f02 	tst.w	r3, #2
   142d6:	f040 80a9 	bne.w	1442c <slider_init+0x194>
   142da:	231f      	movs	r3, #31
   142dc:	213f      	movs	r1, #63	; 0x3f
   142de:	461c      	mov	r4, r3
   142e0:	f04f 0200 	mov.w	r2, #0
   142e4:	f364 0204 	bfi	r2, r4, #0, #5
   142e8:	f361 124a 	bfi	r2, r1, #5, #6
   142ec:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   142f0:	2179      	movs	r1, #121	; 0x79
   142f2:	4b88      	ldr	r3, [pc, #544]	; (14514 <slider_init+0x27c>)
   142f4:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   142f6:	4c83      	ldr	r4, [pc, #524]	; (14504 <slider_init+0x26c>)
   142f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   142fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
   142fe:	2101      	movs	r1, #1
   14300:	3090      	adds	r0, #144	; 0x90
   14302:	4b85      	ldr	r3, [pc, #532]	; (14518 <slider_init+0x280>)
   14304:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14306:	6824      	ldr	r4, [r4, #0]
   14308:	3490      	adds	r4, #144	; 0x90
   1430a:	2000      	movs	r0, #0
   1430c:	4b83      	ldr	r3, [pc, #524]	; (1451c <slider_init+0x284>)
   1430e:	4798      	blx	r3
   14310:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14314:	3050      	adds	r0, #80	; 0x50
   14316:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1431a:	f080 808b 	bcs.w	14434 <slider_init+0x19c>
   1431e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14320:	2112      	movs	r1, #18
   14322:	4620      	mov	r0, r4
   14324:	4b7c      	ldr	r3, [pc, #496]	; (14518 <slider_init+0x280>)
   14326:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14328:	4b76      	ldr	r3, [pc, #472]	; (14504 <slider_init+0x26c>)
   1432a:	681c      	ldr	r4, [r3, #0]
   1432c:	3490      	adds	r4, #144	; 0x90
   1432e:	2000      	movs	r0, #0
   14330:	4b7a      	ldr	r3, [pc, #488]	; (1451c <slider_init+0x284>)
   14332:	4798      	blx	r3
   14334:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14338:	3050      	adds	r0, #80	; 0x50
   1433a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1433e:	f080 8086 	bcs.w	1444e <slider_init+0x1b6>
   14342:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14344:	2113      	movs	r1, #19
   14346:	4620      	mov	r0, r4
   14348:	4b73      	ldr	r3, [pc, #460]	; (14518 <slider_init+0x280>)
   1434a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1434c:	4b6d      	ldr	r3, [pc, #436]	; (14504 <slider_init+0x26c>)
   1434e:	681c      	ldr	r4, [r3, #0]
   14350:	3490      	adds	r4, #144	; 0x90
   14352:	2000      	movs	r0, #0
   14354:	4b71      	ldr	r3, [pc, #452]	; (1451c <slider_init+0x284>)
   14356:	4798      	blx	r3
   14358:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1435c:	3050      	adds	r0, #80	; 0x50
   1435e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14362:	f080 8081 	bcs.w	14468 <slider_init+0x1d0>
   14366:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14368:	2110      	movs	r1, #16
   1436a:	4620      	mov	r0, r4
   1436c:	4b6a      	ldr	r3, [pc, #424]	; (14518 <slider_init+0x280>)
   1436e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14370:	4b64      	ldr	r3, [pc, #400]	; (14504 <slider_init+0x26c>)
   14372:	681c      	ldr	r4, [r3, #0]
   14374:	3490      	adds	r4, #144	; 0x90
   14376:	2000      	movs	r0, #0
   14378:	4b68      	ldr	r3, [pc, #416]	; (1451c <slider_init+0x284>)
   1437a:	4798      	blx	r3
   1437c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14380:	3050      	adds	r0, #80	; 0x50
   14382:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14386:	d27c      	bcs.n	14482 <slider_init+0x1ea>
   14388:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1438a:	2111      	movs	r1, #17
   1438c:	4620      	mov	r0, r4
   1438e:	4b62      	ldr	r3, [pc, #392]	; (14518 <slider_init+0x280>)
   14390:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
   14392:	4c5c      	ldr	r4, [pc, #368]	; (14504 <slider_init+0x26c>)
   14394:	6820      	ldr	r0, [r4, #0]
   14396:	3094      	adds	r0, #148	; 0x94
   14398:	4b5b      	ldr	r3, [pc, #364]	; (14508 <slider_init+0x270>)
   1439a:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1439c:	6824      	ldr	r4, [r4, #0]
   1439e:	3494      	adds	r4, #148	; 0x94
   143a0:	2000      	movs	r0, #0
   143a2:	4b5e      	ldr	r3, [pc, #376]	; (1451c <slider_init+0x284>)
   143a4:	4798      	blx	r3
   143a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   143aa:	0040      	lsls	r0, r0, #1
   143ac:	3050      	adds	r0, #80	; 0x50
   143ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   143b2:	d273      	bcs.n	1449c <slider_init+0x204>
   143b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   143b6:	2117      	movs	r1, #23
   143b8:	4620      	mov	r0, r4
   143ba:	4b57      	ldr	r3, [pc, #348]	; (14518 <slider_init+0x280>)
   143bc:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   143be:	4b51      	ldr	r3, [pc, #324]	; (14504 <slider_init+0x26c>)
   143c0:	681c      	ldr	r4, [r3, #0]
   143c2:	3494      	adds	r4, #148	; 0x94
   143c4:	2000      	movs	r0, #0
   143c6:	4b55      	ldr	r3, [pc, #340]	; (1451c <slider_init+0x284>)
   143c8:	4798      	blx	r3
   143ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   143ce:	0040      	lsls	r0, r0, #1
   143d0:	3050      	adds	r0, #80	; 0x50
   143d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   143d6:	d26e      	bcs.n	144b6 <slider_init+0x21e>
   143d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   143da:	2118      	movs	r1, #24
   143dc:	4620      	mov	r0, r4
   143de:	4b4e      	ldr	r3, [pc, #312]	; (14518 <slider_init+0x280>)
   143e0:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   143e2:	4b48      	ldr	r3, [pc, #288]	; (14504 <slider_init+0x26c>)
   143e4:	681c      	ldr	r4, [r3, #0]
   143e6:	3494      	adds	r4, #148	; 0x94
   143e8:	2000      	movs	r0, #0
   143ea:	4b4c      	ldr	r3, [pc, #304]	; (1451c <slider_init+0x284>)
   143ec:	4798      	blx	r3
   143ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   143f2:	0040      	lsls	r0, r0, #1
   143f4:	3050      	adds	r0, #80	; 0x50
   143f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   143fa:	d269      	bcs.n	144d0 <slider_init+0x238>
   143fc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   143fe:	2115      	movs	r1, #21
   14400:	4620      	mov	r0, r4
   14402:	4b45      	ldr	r3, [pc, #276]	; (14518 <slider_init+0x280>)
   14404:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14406:	4b3f      	ldr	r3, [pc, #252]	; (14504 <slider_init+0x26c>)
   14408:	681c      	ldr	r4, [r3, #0]
   1440a:	3494      	adds	r4, #148	; 0x94
   1440c:	2000      	movs	r0, #0
   1440e:	4b43      	ldr	r3, [pc, #268]	; (1451c <slider_init+0x284>)
   14410:	4798      	blx	r3
   14412:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14416:	0040      	lsls	r0, r0, #1
   14418:	3050      	adds	r0, #80	; 0x50
   1441a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1441e:	d264      	bcs.n	144ea <slider_init+0x252>
   14420:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   14422:	2116      	movs	r1, #22
   14424:	4620      	mov	r0, r4
   14426:	4b3c      	ldr	r3, [pc, #240]	; (14518 <slider_init+0x280>)
   14428:	4798      	blx	r3
   1442a:	bd10      	pop	{r4, pc}
   1442c:	2306      	movs	r3, #6
   1442e:	2110      	movs	r1, #16
   14430:	2409      	movs	r4, #9
   14432:	e755      	b.n	142e0 <slider_init+0x48>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14434:	2000      	movs	r0, #0
   14436:	4b39      	ldr	r3, [pc, #228]	; (1451c <slider_init+0x284>)
   14438:	4798      	blx	r3
   1443a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1443e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14442:	4837      	ldr	r0, [pc, #220]	; (14520 <slider_init+0x288>)
   14444:	fba0 3202 	umull	r3, r2, r0, r2
   14448:	f342 12cf 	sbfx	r2, r2, #7, #16
   1444c:	e768      	b.n	14320 <slider_init+0x88>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1444e:	2000      	movs	r0, #0
   14450:	4b32      	ldr	r3, [pc, #200]	; (1451c <slider_init+0x284>)
   14452:	4798      	blx	r3
   14454:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14458:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1445c:	4830      	ldr	r0, [pc, #192]	; (14520 <slider_init+0x288>)
   1445e:	fba0 3202 	umull	r3, r2, r0, r2
   14462:	f342 12cf 	sbfx	r2, r2, #7, #16
   14466:	e76d      	b.n	14344 <slider_init+0xac>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14468:	2000      	movs	r0, #0
   1446a:	4b2c      	ldr	r3, [pc, #176]	; (1451c <slider_init+0x284>)
   1446c:	4798      	blx	r3
   1446e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14472:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14476:	482a      	ldr	r0, [pc, #168]	; (14520 <slider_init+0x288>)
   14478:	fba0 3202 	umull	r3, r2, r0, r2
   1447c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14480:	e772      	b.n	14368 <slider_init+0xd0>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   14482:	2000      	movs	r0, #0
   14484:	4b25      	ldr	r3, [pc, #148]	; (1451c <slider_init+0x284>)
   14486:	4798      	blx	r3
   14488:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1448c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14490:	4823      	ldr	r0, [pc, #140]	; (14520 <slider_init+0x288>)
   14492:	fba0 3202 	umull	r3, r2, r0, r2
   14496:	f342 12cf 	sbfx	r2, r2, #7, #16
   1449a:	e776      	b.n	1438a <slider_init+0xf2>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1449c:	2000      	movs	r0, #0
   1449e:	4b1f      	ldr	r3, [pc, #124]	; (1451c <slider_init+0x284>)
   144a0:	4798      	blx	r3
   144a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   144a6:	0042      	lsls	r2, r0, #1
   144a8:	3250      	adds	r2, #80	; 0x50
   144aa:	481d      	ldr	r0, [pc, #116]	; (14520 <slider_init+0x288>)
   144ac:	fba0 3202 	umull	r3, r2, r0, r2
   144b0:	f342 12cf 	sbfx	r2, r2, #7, #16
   144b4:	e77f      	b.n	143b6 <slider_init+0x11e>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   144b6:	2000      	movs	r0, #0
   144b8:	4b18      	ldr	r3, [pc, #96]	; (1451c <slider_init+0x284>)
   144ba:	4798      	blx	r3
   144bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   144c0:	0042      	lsls	r2, r0, #1
   144c2:	3250      	adds	r2, #80	; 0x50
   144c4:	4816      	ldr	r0, [pc, #88]	; (14520 <slider_init+0x288>)
   144c6:	fba0 3202 	umull	r3, r2, r0, r2
   144ca:	f342 12cf 	sbfx	r2, r2, #7, #16
   144ce:	e784      	b.n	143da <slider_init+0x142>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   144d0:	2000      	movs	r0, #0
   144d2:	4b12      	ldr	r3, [pc, #72]	; (1451c <slider_init+0x284>)
   144d4:	4798      	blx	r3
   144d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   144da:	0042      	lsls	r2, r0, #1
   144dc:	3250      	adds	r2, #80	; 0x50
   144de:	4810      	ldr	r0, [pc, #64]	; (14520 <slider_init+0x288>)
   144e0:	fba0 3202 	umull	r3, r2, r0, r2
   144e4:	f342 12cf 	sbfx	r2, r2, #7, #16
   144e8:	e789      	b.n	143fe <slider_init+0x166>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   144ea:	2000      	movs	r0, #0
   144ec:	4b0b      	ldr	r3, [pc, #44]	; (1451c <slider_init+0x284>)
   144ee:	4798      	blx	r3
   144f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   144f4:	0042      	lsls	r2, r0, #1
   144f6:	3250      	adds	r2, #80	; 0x50
   144f8:	4809      	ldr	r0, [pc, #36]	; (14520 <slider_init+0x288>)
   144fa:	fba0 3202 	umull	r3, r2, r0, r2
   144fe:	f342 12cf 	sbfx	r2, r2, #7, #16
   14502:	e78e      	b.n	14422 <slider_init+0x18a>
   14504:	2000abd4 	.word	0x2000abd4
   14508:	00012f19 	.word	0x00012f19
   1450c:	0000624d 	.word	0x0000624d
   14510:	0001b518 	.word	0x0001b518
   14514:	00006125 	.word	0x00006125
   14518:	00005ffd 	.word	0x00005ffd
   1451c:	00010181 	.word	0x00010181
   14520:	cccccccd 	.word	0xcccccccd

00014524 <switch_init>:
{
   14524:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
   14526:	4c48      	ldr	r4, [pc, #288]	; (14648 <switch_init+0x124>)
   14528:	6820      	ldr	r0, [r4, #0]
   1452a:	309c      	adds	r0, #156	; 0x9c
   1452c:	4b47      	ldr	r3, [pc, #284]	; (1464c <switch_init+0x128>)
   1452e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   14530:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14532:	22ff      	movs	r2, #255	; 0xff
   14534:	212c      	movs	r1, #44	; 0x2c
   14536:	309c      	adds	r0, #156	; 0x9c
   14538:	4b45      	ldr	r3, [pc, #276]	; (14650 <switch_init+0x12c>)
   1453a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   1453c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1453e:	4b45      	ldr	r3, [pc, #276]	; (14654 <switch_init+0x130>)
   14540:	881a      	ldrh	r2, [r3, #0]
   14542:	2129      	movs	r1, #41	; 0x29
   14544:	309c      	adds	r0, #156	; 0x9c
   14546:	4b44      	ldr	r3, [pc, #272]	; (14658 <switch_init+0x134>)
   14548:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1454a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1454c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14550:	2101      	movs	r1, #1
   14552:	309c      	adds	r0, #156	; 0x9c
   14554:	4b41      	ldr	r3, [pc, #260]	; (1465c <switch_init+0x138>)
   14556:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   14558:	6824      	ldr	r4, [r4, #0]
   1455a:	349c      	adds	r4, #156	; 0x9c
   1455c:	2000      	movs	r0, #0
   1455e:	4b40      	ldr	r3, [pc, #256]	; (14660 <switch_init+0x13c>)
   14560:	4798      	blx	r3
   14562:	3014      	adds	r0, #20
   14564:	0080      	lsls	r0, r0, #2
   14566:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1456a:	d239      	bcs.n	145e0 <switch_init+0xbc>
   1456c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14570:	2110      	movs	r1, #16
   14572:	4620      	mov	r0, r4
   14574:	4b39      	ldr	r3, [pc, #228]	; (1465c <switch_init+0x138>)
   14576:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   14578:	4b33      	ldr	r3, [pc, #204]	; (14648 <switch_init+0x124>)
   1457a:	681c      	ldr	r4, [r3, #0]
   1457c:	349c      	adds	r4, #156	; 0x9c
   1457e:	2000      	movs	r0, #0
   14580:	4b37      	ldr	r3, [pc, #220]	; (14660 <switch_init+0x13c>)
   14582:	4798      	blx	r3
   14584:	3014      	adds	r0, #20
   14586:	0080      	lsls	r0, r0, #2
   14588:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1458c:	d235      	bcs.n	145fa <switch_init+0xd6>
   1458e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14592:	2111      	movs	r1, #17
   14594:	4620      	mov	r0, r4
   14596:	4b31      	ldr	r3, [pc, #196]	; (1465c <switch_init+0x138>)
   14598:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   1459a:	4b2b      	ldr	r3, [pc, #172]	; (14648 <switch_init+0x124>)
   1459c:	681c      	ldr	r4, [r3, #0]
   1459e:	349c      	adds	r4, #156	; 0x9c
   145a0:	2000      	movs	r0, #0
   145a2:	4b2f      	ldr	r3, [pc, #188]	; (14660 <switch_init+0x13c>)
   145a4:	4798      	blx	r3
   145a6:	3014      	adds	r0, #20
   145a8:	0080      	lsls	r0, r0, #2
   145aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   145ae:	d231      	bcs.n	14614 <switch_init+0xf0>
   145b0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   145b4:	2112      	movs	r1, #18
   145b6:	4620      	mov	r0, r4
   145b8:	4b28      	ldr	r3, [pc, #160]	; (1465c <switch_init+0x138>)
   145ba:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   145bc:	4b22      	ldr	r3, [pc, #136]	; (14648 <switch_init+0x124>)
   145be:	681c      	ldr	r4, [r3, #0]
   145c0:	349c      	adds	r4, #156	; 0x9c
   145c2:	2000      	movs	r0, #0
   145c4:	4b26      	ldr	r3, [pc, #152]	; (14660 <switch_init+0x13c>)
   145c6:	4798      	blx	r3
   145c8:	3014      	adds	r0, #20
   145ca:	0080      	lsls	r0, r0, #2
   145cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   145d0:	d22d      	bcs.n	1462e <switch_init+0x10a>
   145d2:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   145d6:	2113      	movs	r1, #19
   145d8:	4620      	mov	r0, r4
   145da:	4b20      	ldr	r3, [pc, #128]	; (1465c <switch_init+0x138>)
   145dc:	4798      	blx	r3
   145de:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   145e0:	2000      	movs	r0, #0
   145e2:	4b1f      	ldr	r3, [pc, #124]	; (14660 <switch_init+0x13c>)
   145e4:	4798      	blx	r3
   145e6:	f100 0214 	add.w	r2, r0, #20
   145ea:	0092      	lsls	r2, r2, #2
   145ec:	481d      	ldr	r0, [pc, #116]	; (14664 <switch_init+0x140>)
   145ee:	fba0 3202 	umull	r3, r2, r0, r2
   145f2:	09d2      	lsrs	r2, r2, #7
   145f4:	4252      	negs	r2, r2
   145f6:	b212      	sxth	r2, r2
   145f8:	e7ba      	b.n	14570 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   145fa:	2000      	movs	r0, #0
   145fc:	4b18      	ldr	r3, [pc, #96]	; (14660 <switch_init+0x13c>)
   145fe:	4798      	blx	r3
   14600:	f100 0214 	add.w	r2, r0, #20
   14604:	0092      	lsls	r2, r2, #2
   14606:	4817      	ldr	r0, [pc, #92]	; (14664 <switch_init+0x140>)
   14608:	fba0 3202 	umull	r3, r2, r0, r2
   1460c:	09d2      	lsrs	r2, r2, #7
   1460e:	4252      	negs	r2, r2
   14610:	b212      	sxth	r2, r2
   14612:	e7be      	b.n	14592 <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   14614:	2000      	movs	r0, #0
   14616:	4b12      	ldr	r3, [pc, #72]	; (14660 <switch_init+0x13c>)
   14618:	4798      	blx	r3
   1461a:	f100 0214 	add.w	r2, r0, #20
   1461e:	0092      	lsls	r2, r2, #2
   14620:	4810      	ldr	r0, [pc, #64]	; (14664 <switch_init+0x140>)
   14622:	fba0 3202 	umull	r3, r2, r0, r2
   14626:	09d2      	lsrs	r2, r2, #7
   14628:	4252      	negs	r2, r2
   1462a:	b212      	sxth	r2, r2
   1462c:	e7c2      	b.n	145b4 <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   1462e:	2000      	movs	r0, #0
   14630:	4b0b      	ldr	r3, [pc, #44]	; (14660 <switch_init+0x13c>)
   14632:	4798      	blx	r3
   14634:	f100 0214 	add.w	r2, r0, #20
   14638:	0092      	lsls	r2, r2, #2
   1463a:	480a      	ldr	r0, [pc, #40]	; (14664 <switch_init+0x140>)
   1463c:	fba0 3202 	umull	r3, r2, r0, r2
   14640:	09d2      	lsrs	r2, r2, #7
   14642:	4252      	negs	r2, r2
   14644:	b212      	sxth	r2, r2
   14646:	e7c6      	b.n	145d6 <switch_init+0xb2>
   14648:	2000abd4 	.word	0x2000abd4
   1464c:	00012f19 	.word	0x00012f19
   14650:	0000624d 	.word	0x0000624d
   14654:	0001b518 	.word	0x0001b518
   14658:	00006125 	.word	0x00006125
   1465c:	00005ffd 	.word	0x00005ffd
   14660:	00010181 	.word	0x00010181
   14664:	cccccccd 	.word	0xcccccccd

00014668 <linemeter_init>:
{
   14668:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->lmeter);
   1466a:	4c81      	ldr	r4, [pc, #516]	; (14870 <linemeter_init+0x208>)
   1466c:	6820      	ldr	r0, [r4, #0]
   1466e:	3070      	adds	r0, #112	; 0x70
   14670:	4b80      	ldr	r3, [pc, #512]	; (14874 <linemeter_init+0x20c>)
   14672:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14674:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14676:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1467a:	2101      	movs	r1, #1
   1467c:	3070      	adds	r0, #112	; 0x70
   1467e:	4b7e      	ldr	r3, [pc, #504]	; (14878 <linemeter_init+0x210>)
   14680:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   14682:	6824      	ldr	r4, [r4, #0]
   14684:	3470      	adds	r4, #112	; 0x70
   14686:	2000      	movs	r0, #0
   14688:	4b7c      	ldr	r3, [pc, #496]	; (1487c <linemeter_init+0x214>)
   1468a:	4798      	blx	r3
   1468c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14690:	0080      	lsls	r0, r0, #2
   14692:	3050      	adds	r0, #80	; 0x50
   14694:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14698:	f080 808d 	bcs.w	147b6 <linemeter_init+0x14e>
   1469c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1469e:	2112      	movs	r1, #18
   146a0:	4620      	mov	r0, r4
   146a2:	4b75      	ldr	r3, [pc, #468]	; (14878 <linemeter_init+0x210>)
   146a4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   146a6:	4b72      	ldr	r3, [pc, #456]	; (14870 <linemeter_init+0x208>)
   146a8:	681c      	ldr	r4, [r3, #0]
   146aa:	3470      	adds	r4, #112	; 0x70
   146ac:	2000      	movs	r0, #0
   146ae:	4b73      	ldr	r3, [pc, #460]	; (1487c <linemeter_init+0x214>)
   146b0:	4798      	blx	r3
   146b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   146b6:	0080      	lsls	r0, r0, #2
   146b8:	3050      	adds	r0, #80	; 0x50
   146ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   146be:	f080 8087 	bcs.w	147d0 <linemeter_init+0x168>
   146c2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   146c4:	2113      	movs	r1, #19
   146c6:	4620      	mov	r0, r4
   146c8:	4b6b      	ldr	r3, [pc, #428]	; (14878 <linemeter_init+0x210>)
   146ca:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   146cc:	4b68      	ldr	r3, [pc, #416]	; (14870 <linemeter_init+0x208>)
   146ce:	681c      	ldr	r4, [r3, #0]
   146d0:	3470      	adds	r4, #112	; 0x70
   146d2:	2000      	movs	r0, #0
   146d4:	4b69      	ldr	r3, [pc, #420]	; (1487c <linemeter_init+0x214>)
   146d6:	4798      	blx	r3
   146d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   146dc:	0080      	lsls	r0, r0, #2
   146de:	3050      	adds	r0, #80	; 0x50
   146e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   146e4:	f080 8081 	bcs.w	147ea <linemeter_init+0x182>
   146e8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   146ea:	2110      	movs	r1, #16
   146ec:	4620      	mov	r0, r4
   146ee:	4b62      	ldr	r3, [pc, #392]	; (14878 <linemeter_init+0x210>)
   146f0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   146f2:	4b5f      	ldr	r3, [pc, #380]	; (14870 <linemeter_init+0x208>)
   146f4:	681c      	ldr	r4, [r3, #0]
   146f6:	3470      	adds	r4, #112	; 0x70
   146f8:	2000      	movs	r0, #0
   146fa:	4b60      	ldr	r3, [pc, #384]	; (1487c <linemeter_init+0x214>)
   146fc:	4798      	blx	r3
   146fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14702:	0040      	lsls	r0, r0, #1
   14704:	3050      	adds	r0, #80	; 0x50
   14706:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1470a:	d27b      	bcs.n	14804 <linemeter_init+0x19c>
   1470c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1470e:	2114      	movs	r1, #20
   14710:	4620      	mov	r0, r4
   14712:	4b59      	ldr	r3, [pc, #356]	; (14878 <linemeter_init+0x210>)
   14714:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   14716:	4b56      	ldr	r3, [pc, #344]	; (14870 <linemeter_init+0x208>)
   14718:	681c      	ldr	r4, [r3, #0]
   1471a:	3470      	adds	r4, #112	; 0x70
   1471c:	2000      	movs	r0, #0
   1471e:	4b57      	ldr	r3, [pc, #348]	; (1487c <linemeter_init+0x214>)
   14720:	4798      	blx	r3
   14722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1472a:	3050      	adds	r0, #80	; 0x50
   1472c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14730:	d275      	bcs.n	1481e <linemeter_init+0x1b6>
   14732:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   14734:	21c0      	movs	r1, #192	; 0xc0
   14736:	4620      	mov	r0, r4
   14738:	4b4f      	ldr	r3, [pc, #316]	; (14878 <linemeter_init+0x210>)
   1473a:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   1473c:	4c4c      	ldr	r4, [pc, #304]	; (14870 <linemeter_init+0x208>)
   1473e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14740:	89a2      	ldrh	r2, [r4, #12]
   14742:	2199      	movs	r1, #153	; 0x99
   14744:	3070      	adds	r0, #112	; 0x70
   14746:	4d4e      	ldr	r5, [pc, #312]	; (14880 <linemeter_init+0x218>)
   14748:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   1474a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   1474c:	89a2      	ldrh	r2, [r4, #12]
   1474e:	21c9      	movs	r1, #201	; 0xc9
   14750:	3070      	adds	r0, #112	; 0x70
   14752:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14754:	6820      	ldr	r0, [r4, #0]
   14756:	2311      	movs	r3, #17
   14758:	f04f 0200 	mov.w	r2, #0
   1475c:	f363 0204 	bfi	r2, r3, #0, #5
   14760:	2122      	movs	r1, #34	; 0x22
   14762:	f361 124a 	bfi	r2, r1, #5, #6
   14766:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   1476a:	21ca      	movs	r1, #202	; 0xca
   1476c:	3070      	adds	r0, #112	; 0x70
   1476e:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   14770:	6824      	ldr	r4, [r4, #0]
   14772:	3470      	adds	r4, #112	; 0x70
   14774:	2000      	movs	r0, #0
   14776:	4b41      	ldr	r3, [pc, #260]	; (1487c <linemeter_init+0x214>)
   14778:	4798      	blx	r3
   1477a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1477e:	0040      	lsls	r0, r0, #1
   14780:	3050      	adds	r0, #80	; 0x50
   14782:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14786:	d259      	bcs.n	1483c <linemeter_init+0x1d4>
   14788:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1478a:	2190      	movs	r1, #144	; 0x90
   1478c:	4620      	mov	r0, r4
   1478e:	4b3a      	ldr	r3, [pc, #232]	; (14878 <linemeter_init+0x210>)
   14790:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   14792:	4b37      	ldr	r3, [pc, #220]	; (14870 <linemeter_init+0x208>)
   14794:	681c      	ldr	r4, [r3, #0]
   14796:	3470      	adds	r4, #112	; 0x70
   14798:	2000      	movs	r0, #0
   1479a:	4b38      	ldr	r3, [pc, #224]	; (1487c <linemeter_init+0x214>)
   1479c:	4798      	blx	r3
   1479e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   147a2:	3050      	adds	r0, #80	; 0x50
   147a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   147a8:	d255      	bcs.n	14856 <linemeter_init+0x1ee>
   147aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   147ac:	21c3      	movs	r1, #195	; 0xc3
   147ae:	4620      	mov	r0, r4
   147b0:	4b31      	ldr	r3, [pc, #196]	; (14878 <linemeter_init+0x210>)
   147b2:	4798      	blx	r3
   147b4:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   147b6:	2000      	movs	r0, #0
   147b8:	4b30      	ldr	r3, [pc, #192]	; (1487c <linemeter_init+0x214>)
   147ba:	4798      	blx	r3
   147bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   147c0:	0082      	lsls	r2, r0, #2
   147c2:	3250      	adds	r2, #80	; 0x50
   147c4:	482f      	ldr	r0, [pc, #188]	; (14884 <linemeter_init+0x21c>)
   147c6:	fba0 3202 	umull	r3, r2, r0, r2
   147ca:	f342 12cf 	sbfx	r2, r2, #7, #16
   147ce:	e766      	b.n	1469e <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   147d0:	2000      	movs	r0, #0
   147d2:	4b2a      	ldr	r3, [pc, #168]	; (1487c <linemeter_init+0x214>)
   147d4:	4798      	blx	r3
   147d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   147da:	0082      	lsls	r2, r0, #2
   147dc:	3250      	adds	r2, #80	; 0x50
   147de:	4829      	ldr	r0, [pc, #164]	; (14884 <linemeter_init+0x21c>)
   147e0:	fba0 3202 	umull	r3, r2, r0, r2
   147e4:	f342 12cf 	sbfx	r2, r2, #7, #16
   147e8:	e76c      	b.n	146c4 <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   147ea:	2000      	movs	r0, #0
   147ec:	4b23      	ldr	r3, [pc, #140]	; (1487c <linemeter_init+0x214>)
   147ee:	4798      	blx	r3
   147f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   147f4:	0082      	lsls	r2, r0, #2
   147f6:	3250      	adds	r2, #80	; 0x50
   147f8:	4822      	ldr	r0, [pc, #136]	; (14884 <linemeter_init+0x21c>)
   147fa:	fba0 3202 	umull	r3, r2, r0, r2
   147fe:	f342 12cf 	sbfx	r2, r2, #7, #16
   14802:	e772      	b.n	146ea <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   14804:	2000      	movs	r0, #0
   14806:	4b1d      	ldr	r3, [pc, #116]	; (1487c <linemeter_init+0x214>)
   14808:	4798      	blx	r3
   1480a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1480e:	0042      	lsls	r2, r0, #1
   14810:	3250      	adds	r2, #80	; 0x50
   14812:	481c      	ldr	r0, [pc, #112]	; (14884 <linemeter_init+0x21c>)
   14814:	fba0 3202 	umull	r3, r2, r0, r2
   14818:	f342 12cf 	sbfx	r2, r2, #7, #16
   1481c:	e777      	b.n	1470e <linemeter_init+0xa6>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   1481e:	2000      	movs	r0, #0
   14820:	4b16      	ldr	r3, [pc, #88]	; (1487c <linemeter_init+0x214>)
   14822:	4798      	blx	r3
   14824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14828:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1482c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14830:	4814      	ldr	r0, [pc, #80]	; (14884 <linemeter_init+0x21c>)
   14832:	fba0 3202 	umull	r3, r2, r0, r2
   14836:	f342 12cf 	sbfx	r2, r2, #7, #16
   1483a:	e77b      	b.n	14734 <linemeter_init+0xcc>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   1483c:	2000      	movs	r0, #0
   1483e:	4b0f      	ldr	r3, [pc, #60]	; (1487c <linemeter_init+0x214>)
   14840:	4798      	blx	r3
   14842:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14846:	0042      	lsls	r2, r0, #1
   14848:	3250      	adds	r2, #80	; 0x50
   1484a:	480e      	ldr	r0, [pc, #56]	; (14884 <linemeter_init+0x21c>)
   1484c:	fba0 3202 	umull	r3, r2, r0, r2
   14850:	f342 12cf 	sbfx	r2, r2, #7, #16
   14854:	e799      	b.n	1478a <linemeter_init+0x122>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   14856:	2000      	movs	r0, #0
   14858:	4b08      	ldr	r3, [pc, #32]	; (1487c <linemeter_init+0x214>)
   1485a:	4798      	blx	r3
   1485c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14860:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14864:	4807      	ldr	r0, [pc, #28]	; (14884 <linemeter_init+0x21c>)
   14866:	fba0 3202 	umull	r3, r2, r0, r2
   1486a:	f342 12cf 	sbfx	r2, r2, #7, #16
   1486e:	e79d      	b.n	147ac <linemeter_init+0x144>
   14870:	2000abd4 	.word	0x2000abd4
   14874:	00012f19 	.word	0x00012f19
   14878:	00005ffd 	.word	0x00005ffd
   1487c:	00010181 	.word	0x00010181
   14880:	00006125 	.word	0x00006125
   14884:	cccccccd 	.word	0xcccccccd

00014888 <gauge_init>:
{
   14888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->gauge_main);
   1488a:	4cc0      	ldr	r4, [pc, #768]	; (14b8c <gauge_init+0x304>)
   1488c:	6820      	ldr	r0, [r4, #0]
   1488e:	305c      	adds	r0, #92	; 0x5c
   14890:	4bbf      	ldr	r3, [pc, #764]	; (14b90 <gauge_init+0x308>)
   14892:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14894:	6820      	ldr	r0, [r4, #0]
   14896:	2511      	movs	r5, #17
   14898:	f04f 0200 	mov.w	r2, #0
   1489c:	f365 0204 	bfi	r2, r5, #0, #5
   148a0:	2722      	movs	r7, #34	; 0x22
   148a2:	f367 124a 	bfi	r2, r7, #5, #6
   148a6:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   148aa:	2199      	movs	r1, #153	; 0x99
   148ac:	305c      	adds	r0, #92	; 0x5c
   148ae:	4eb9      	ldr	r6, [pc, #740]	; (14b94 <gauge_init+0x30c>)
   148b0:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   148b2:	6820      	ldr	r0, [r4, #0]
   148b4:	f04f 0200 	mov.w	r2, #0
   148b8:	f365 0204 	bfi	r2, r5, #0, #5
   148bc:	f367 124a 	bfi	r2, r7, #5, #6
   148c0:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   148c4:	21c9      	movs	r1, #201	; 0xc9
   148c6:	305c      	adds	r0, #92	; 0x5c
   148c8:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
   148ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   148cc:	89a2      	ldrh	r2, [r4, #12]
   148ce:	21ca      	movs	r1, #202	; 0xca
   148d0:	305c      	adds	r0, #92	; 0x5c
   148d2:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   148d4:	6824      	ldr	r4, [r4, #0]
   148d6:	345c      	adds	r4, #92	; 0x5c
   148d8:	2000      	movs	r0, #0
   148da:	4baf      	ldr	r3, [pc, #700]	; (14b98 <gauge_init+0x310>)
   148dc:	4798      	blx	r3
   148de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   148e2:	3050      	adds	r0, #80	; 0x50
   148e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   148e8:	f080 8168 	bcs.w	14bbc <gauge_init+0x334>
   148ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   148ee:	2190      	movs	r1, #144	; 0x90
   148f0:	4620      	mov	r0, r4
   148f2:	4baa      	ldr	r3, [pc, #680]	; (14b9c <gauge_init+0x314>)
   148f4:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   148f6:	4ba5      	ldr	r3, [pc, #660]	; (14b8c <gauge_init+0x304>)
   148f8:	681c      	ldr	r4, [r3, #0]
   148fa:	345c      	adds	r4, #92	; 0x5c
   148fc:	2000      	movs	r0, #0
   148fe:	4ba6      	ldr	r3, [pc, #664]	; (14b98 <gauge_init+0x310>)
   14900:	4798      	blx	r3
   14902:	3014      	adds	r0, #20
   14904:	0080      	lsls	r0, r0, #2
   14906:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1490a:	f080 8164 	bcs.w	14bd6 <gauge_init+0x34e>
   1490e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   14910:	21c3      	movs	r1, #195	; 0xc3
   14912:	4620      	mov	r0, r4
   14914:	4ba1      	ldr	r3, [pc, #644]	; (14b9c <gauge_init+0x314>)
   14916:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   14918:	4b9c      	ldr	r3, [pc, #624]	; (14b8c <gauge_init+0x304>)
   1491a:	681c      	ldr	r4, [r3, #0]
   1491c:	345c      	adds	r4, #92	; 0x5c
   1491e:	2000      	movs	r0, #0
   14920:	4b9d      	ldr	r3, [pc, #628]	; (14b98 <gauge_init+0x310>)
   14922:	4798      	blx	r3
   14924:	300a      	adds	r0, #10
   14926:	00c0      	lsls	r0, r0, #3
   14928:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1492c:	f080 815f 	bcs.w	14bee <gauge_init+0x366>
   14930:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   14932:	21c2      	movs	r1, #194	; 0xc2
   14934:	4620      	mov	r0, r4
   14936:	4b99      	ldr	r3, [pc, #612]	; (14b9c <gauge_init+0x314>)
   14938:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   1493a:	4b94      	ldr	r3, [pc, #592]	; (14b8c <gauge_init+0x304>)
   1493c:	681c      	ldr	r4, [r3, #0]
   1493e:	345c      	adds	r4, #92	; 0x5c
   14940:	2000      	movs	r0, #0
   14942:	4b95      	ldr	r3, [pc, #596]	; (14b98 <gauge_init+0x310>)
   14944:	4798      	blx	r3
   14946:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1494a:	0080      	lsls	r0, r0, #2
   1494c:	3050      	adds	r0, #80	; 0x50
   1494e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14952:	f080 8158 	bcs.w	14c06 <gauge_init+0x37e>
   14956:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14958:	2112      	movs	r1, #18
   1495a:	4620      	mov	r0, r4
   1495c:	4b8f      	ldr	r3, [pc, #572]	; (14b9c <gauge_init+0x314>)
   1495e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14960:	4b8a      	ldr	r3, [pc, #552]	; (14b8c <gauge_init+0x304>)
   14962:	681c      	ldr	r4, [r3, #0]
   14964:	345c      	adds	r4, #92	; 0x5c
   14966:	2000      	movs	r0, #0
   14968:	4b8b      	ldr	r3, [pc, #556]	; (14b98 <gauge_init+0x310>)
   1496a:	4798      	blx	r3
   1496c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14970:	0080      	lsls	r0, r0, #2
   14972:	3050      	adds	r0, #80	; 0x50
   14974:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14978:	f080 8152 	bcs.w	14c20 <gauge_init+0x398>
   1497c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1497e:	2113      	movs	r1, #19
   14980:	4620      	mov	r0, r4
   14982:	4b86      	ldr	r3, [pc, #536]	; (14b9c <gauge_init+0x314>)
   14984:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14986:	4b81      	ldr	r3, [pc, #516]	; (14b8c <gauge_init+0x304>)
   14988:	681c      	ldr	r4, [r3, #0]
   1498a:	345c      	adds	r4, #92	; 0x5c
   1498c:	2000      	movs	r0, #0
   1498e:	4b82      	ldr	r3, [pc, #520]	; (14b98 <gauge_init+0x310>)
   14990:	4798      	blx	r3
   14992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14996:	0080      	lsls	r0, r0, #2
   14998:	3050      	adds	r0, #80	; 0x50
   1499a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1499e:	f080 814c 	bcs.w	14c3a <gauge_init+0x3b2>
   149a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   149a4:	2110      	movs	r1, #16
   149a6:	4620      	mov	r0, r4
   149a8:	4b7c      	ldr	r3, [pc, #496]	; (14b9c <gauge_init+0x314>)
   149aa:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   149ac:	4b77      	ldr	r3, [pc, #476]	; (14b8c <gauge_init+0x304>)
   149ae:	681c      	ldr	r4, [r3, #0]
   149b0:	345c      	adds	r4, #92	; 0x5c
   149b2:	2000      	movs	r0, #0
   149b4:	4b78      	ldr	r3, [pc, #480]	; (14b98 <gauge_init+0x310>)
   149b6:	4798      	blx	r3
   149b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   149bc:	0080      	lsls	r0, r0, #2
   149be:	3050      	adds	r0, #80	; 0x50
   149c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   149c4:	f080 8146 	bcs.w	14c54 <gauge_init+0x3cc>
   149c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   149ca:	2114      	movs	r1, #20
   149cc:	4620      	mov	r0, r4
   149ce:	4b73      	ldr	r3, [pc, #460]	; (14b9c <gauge_init+0x314>)
   149d0:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   149d2:	4b6e      	ldr	r3, [pc, #440]	; (14b8c <gauge_init+0x304>)
   149d4:	681c      	ldr	r4, [r3, #0]
   149d6:	345c      	adds	r4, #92	; 0x5c
   149d8:	2000      	movs	r0, #0
   149da:	4b6f      	ldr	r3, [pc, #444]	; (14b98 <gauge_init+0x310>)
   149dc:	4798      	blx	r3
   149de:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   149e2:	3050      	adds	r0, #80	; 0x50
   149e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   149e8:	f080 8141 	bcs.w	14c6e <gauge_init+0x3e6>
   149ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   149ee:	21c0      	movs	r1, #192	; 0xc0
   149f0:	4620      	mov	r0, r4
   149f2:	4d6a      	ldr	r5, [pc, #424]	; (14b9c <gauge_init+0x314>)
   149f4:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   149f6:	4c65      	ldr	r4, [pc, #404]	; (14b8c <gauge_init+0x304>)
   149f8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   149fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
   149fe:	2101      	movs	r1, #1
   14a00:	305c      	adds	r0, #92	; 0x5c
   14a02:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
   14a04:	6820      	ldr	r0, [r4, #0]
   14a06:	3060      	adds	r0, #96	; 0x60
   14a08:	4b61      	ldr	r3, [pc, #388]	; (14b90 <gauge_init+0x308>)
   14a0a:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14a0c:	6820      	ldr	r0, [r4, #0]
   14a0e:	2511      	movs	r5, #17
   14a10:	f04f 0200 	mov.w	r2, #0
   14a14:	f365 0204 	bfi	r2, r5, #0, #5
   14a18:	2722      	movs	r7, #34	; 0x22
   14a1a:	f367 124a 	bfi	r2, r7, #5, #6
   14a1e:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14a22:	2199      	movs	r1, #153	; 0x99
   14a24:	3060      	adds	r0, #96	; 0x60
   14a26:	4e5b      	ldr	r6, [pc, #364]	; (14b94 <gauge_init+0x30c>)
   14a28:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   14a2a:	6820      	ldr	r0, [r4, #0]
   14a2c:	f04f 0200 	mov.w	r2, #0
   14a30:	f365 0204 	bfi	r2, r5, #0, #5
   14a34:	f367 124a 	bfi	r2, r7, #5, #6
   14a38:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   14a3c:	21c9      	movs	r1, #201	; 0xc9
   14a3e:	3060      	adds	r0, #96	; 0x60
   14a40:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
   14a42:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   14a44:	89a2      	ldrh	r2, [r4, #12]
   14a46:	21ca      	movs	r1, #202	; 0xca
   14a48:	3060      	adds	r0, #96	; 0x60
   14a4a:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14a4c:	6824      	ldr	r4, [r4, #0]
   14a4e:	3460      	adds	r4, #96	; 0x60
   14a50:	2000      	movs	r0, #0
   14a52:	4b51      	ldr	r3, [pc, #324]	; (14b98 <gauge_init+0x310>)
   14a54:	4798      	blx	r3
   14a56:	300a      	adds	r0, #10
   14a58:	00c0      	lsls	r0, r0, #3
   14a5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14a5e:	f080 8113 	bcs.w	14c88 <gauge_init+0x400>
   14a62:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14a64:	2190      	movs	r1, #144	; 0x90
   14a66:	4620      	mov	r0, r4
   14a68:	4b4c      	ldr	r3, [pc, #304]	; (14b9c <gauge_init+0x314>)
   14a6a:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14a6c:	4b47      	ldr	r3, [pc, #284]	; (14b8c <gauge_init+0x304>)
   14a6e:	681c      	ldr	r4, [r3, #0]
   14a70:	3460      	adds	r4, #96	; 0x60
   14a72:	2000      	movs	r0, #0
   14a74:	4b48      	ldr	r3, [pc, #288]	; (14b98 <gauge_init+0x310>)
   14a76:	4798      	blx	r3
   14a78:	300a      	adds	r0, #10
   14a7a:	00c0      	lsls	r0, r0, #3
   14a7c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14a80:	f080 810e 	bcs.w	14ca0 <gauge_init+0x418>
   14a84:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   14a86:	21c3      	movs	r1, #195	; 0xc3
   14a88:	4620      	mov	r0, r4
   14a8a:	4b44      	ldr	r3, [pc, #272]	; (14b9c <gauge_init+0x314>)
   14a8c:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   14a8e:	4b3f      	ldr	r3, [pc, #252]	; (14b8c <gauge_init+0x304>)
   14a90:	681c      	ldr	r4, [r3, #0]
   14a92:	3460      	adds	r4, #96	; 0x60
   14a94:	2000      	movs	r0, #0
   14a96:	4b40      	ldr	r3, [pc, #256]	; (14b98 <gauge_init+0x310>)
   14a98:	4798      	blx	r3
   14a9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14a9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14aa2:	3050      	adds	r0, #80	; 0x50
   14aa4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14aa8:	f080 8106 	bcs.w	14cb8 <gauge_init+0x430>
   14aac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   14aae:	21c0      	movs	r1, #192	; 0xc0
   14ab0:	4620      	mov	r0, r4
   14ab2:	4b3a      	ldr	r3, [pc, #232]	; (14b9c <gauge_init+0x314>)
   14ab4:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
   14ab6:	4c35      	ldr	r4, [pc, #212]	; (14b8c <gauge_init+0x304>)
   14ab8:	6820      	ldr	r0, [r4, #0]
   14aba:	3064      	adds	r0, #100	; 0x64
   14abc:	4b34      	ldr	r3, [pc, #208]	; (14b90 <gauge_init+0x308>)
   14abe:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   14ac0:	6820      	ldr	r0, [r4, #0]
   14ac2:	3064      	adds	r0, #100	; 0x64
   14ac4:	6a23      	ldr	r3, [r4, #32]
   14ac6:	f013 0f02 	tst.w	r3, #2
   14aca:	f040 8104 	bne.w	14cd6 <gauge_init+0x44e>
   14ace:	231f      	movs	r3, #31
   14ad0:	213f      	movs	r1, #63	; 0x3f
   14ad2:	461c      	mov	r4, r3
   14ad4:	f04f 0200 	mov.w	r2, #0
   14ad8:	f364 0204 	bfi	r2, r4, #0, #5
   14adc:	f361 124a 	bfi	r2, r1, #5, #6
   14ae0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14ae4:	2199      	movs	r1, #153	; 0x99
   14ae6:	4b2b      	ldr	r3, [pc, #172]	; (14b94 <gauge_init+0x30c>)
   14ae8:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   14aea:	4b28      	ldr	r3, [pc, #160]	; (14b8c <gauge_init+0x304>)
   14aec:	681c      	ldr	r4, [r3, #0]
   14aee:	3464      	adds	r4, #100	; 0x64
   14af0:	2000      	movs	r0, #0
   14af2:	4b29      	ldr	r3, [pc, #164]	; (14b98 <gauge_init+0x310>)
   14af4:	4798      	blx	r3
   14af6:	300a      	adds	r0, #10
   14af8:	00c0      	lsls	r0, r0, #3
   14afa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14afe:	f080 80ee 	bcs.w	14cde <gauge_init+0x456>
   14b02:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14b04:	2190      	movs	r1, #144	; 0x90
   14b06:	4620      	mov	r0, r4
   14b08:	4b24      	ldr	r3, [pc, #144]	; (14b9c <gauge_init+0x314>)
   14b0a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
   14b0c:	4c1f      	ldr	r4, [pc, #124]	; (14b8c <gauge_init+0x304>)
   14b0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14b10:	22ff      	movs	r2, #255	; 0xff
   14b12:	212c      	movs	r1, #44	; 0x2c
   14b14:	3064      	adds	r0, #100	; 0x64
   14b16:	4b22      	ldr	r3, [pc, #136]	; (14ba0 <gauge_init+0x318>)
   14b18:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   14b1a:	6820      	ldr	r0, [r4, #0]
   14b1c:	3064      	adds	r0, #100	; 0x64
   14b1e:	6a23      	ldr	r3, [r4, #32]
   14b20:	f013 0f02 	tst.w	r3, #2
   14b24:	f040 80e7 	bne.w	14cf6 <gauge_init+0x46e>
   14b28:	231f      	movs	r3, #31
   14b2a:	213f      	movs	r1, #63	; 0x3f
   14b2c:	461c      	mov	r4, r3
   14b2e:	f04f 0200 	mov.w	r2, #0
   14b32:	f364 0204 	bfi	r2, r4, #0, #5
   14b36:	f361 124a 	bfi	r2, r1, #5, #6
   14b3a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14b3e:	2129      	movs	r1, #41	; 0x29
   14b40:	4b14      	ldr	r3, [pc, #80]	; (14b94 <gauge_init+0x30c>)
   14b42:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14b44:	4c11      	ldr	r4, [pc, #68]	; (14b8c <gauge_init+0x304>)
   14b46:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14b48:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14b4c:	2101      	movs	r1, #1
   14b4e:	3064      	adds	r0, #100	; 0x64
   14b50:	4b12      	ldr	r3, [pc, #72]	; (14b9c <gauge_init+0x314>)
   14b52:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   14b54:	6824      	ldr	r4, [r4, #0]
   14b56:	3464      	adds	r4, #100	; 0x64
   14b58:	2000      	movs	r0, #0
   14b5a:	4b0f      	ldr	r3, [pc, #60]	; (14b98 <gauge_init+0x310>)
   14b5c:	4798      	blx	r3
   14b5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14b62:	0040      	lsls	r0, r0, #1
   14b64:	3050      	adds	r0, #80	; 0x50
   14b66:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14b6a:	f080 80c8 	bcs.w	14cfe <gauge_init+0x476>
   14b6e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   14b70:	2103      	movs	r1, #3
   14b72:	4620      	mov	r0, r4
   14b74:	4b09      	ldr	r3, [pc, #36]	; (14b9c <gauge_init+0x314>)
   14b76:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   14b78:	4b04      	ldr	r3, [pc, #16]	; (14b8c <gauge_init+0x304>)
   14b7a:	681c      	ldr	r4, [r3, #0]
   14b7c:	3464      	adds	r4, #100	; 0x64
   14b7e:	2000      	movs	r0, #0
   14b80:	4b05      	ldr	r3, [pc, #20]	; (14b98 <gauge_init+0x310>)
   14b82:	4798      	blx	r3
   14b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14b88:	e00c      	b.n	14ba4 <gauge_init+0x31c>
   14b8a:	bf00      	nop
   14b8c:	2000abd4 	.word	0x2000abd4
   14b90:	00012f19 	.word	0x00012f19
   14b94:	00006125 	.word	0x00006125
   14b98:	00010181 	.word	0x00010181
   14b9c:	00005ffd 	.word	0x00005ffd
   14ba0:	0000624d 	.word	0x0000624d
   14ba4:	0040      	lsls	r0, r0, #1
   14ba6:	3050      	adds	r0, #80	; 0x50
   14ba8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14bac:	f080 80b4 	bcs.w	14d18 <gauge_init+0x490>
   14bb0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14bb2:	2114      	movs	r1, #20
   14bb4:	4620      	mov	r0, r4
   14bb6:	4b5f      	ldr	r3, [pc, #380]	; (14d34 <gauge_init+0x4ac>)
   14bb8:	4798      	blx	r3
   14bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   14bbc:	2000      	movs	r0, #0
   14bbe:	4b5e      	ldr	r3, [pc, #376]	; (14d38 <gauge_init+0x4b0>)
   14bc0:	4798      	blx	r3
   14bc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14bc6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14bca:	485c      	ldr	r0, [pc, #368]	; (14d3c <gauge_init+0x4b4>)
   14bcc:	fba0 3202 	umull	r3, r2, r0, r2
   14bd0:	f342 12cf 	sbfx	r2, r2, #7, #16
   14bd4:	e68b      	b.n	148ee <gauge_init+0x66>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   14bd6:	2000      	movs	r0, #0
   14bd8:	4b57      	ldr	r3, [pc, #348]	; (14d38 <gauge_init+0x4b0>)
   14bda:	4798      	blx	r3
   14bdc:	f100 0214 	add.w	r2, r0, #20
   14be0:	0092      	lsls	r2, r2, #2
   14be2:	4856      	ldr	r0, [pc, #344]	; (14d3c <gauge_init+0x4b4>)
   14be4:	fba0 3202 	umull	r3, r2, r0, r2
   14be8:	f342 12cf 	sbfx	r2, r2, #7, #16
   14bec:	e690      	b.n	14910 <gauge_init+0x88>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   14bee:	2000      	movs	r0, #0
   14bf0:	4b51      	ldr	r3, [pc, #324]	; (14d38 <gauge_init+0x4b0>)
   14bf2:	4798      	blx	r3
   14bf4:	f100 020a 	add.w	r2, r0, #10
   14bf8:	00d2      	lsls	r2, r2, #3
   14bfa:	4850      	ldr	r0, [pc, #320]	; (14d3c <gauge_init+0x4b4>)
   14bfc:	fba0 3202 	umull	r3, r2, r0, r2
   14c00:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c04:	e695      	b.n	14932 <gauge_init+0xaa>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14c06:	2000      	movs	r0, #0
   14c08:	4b4b      	ldr	r3, [pc, #300]	; (14d38 <gauge_init+0x4b0>)
   14c0a:	4798      	blx	r3
   14c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c10:	0082      	lsls	r2, r0, #2
   14c12:	3250      	adds	r2, #80	; 0x50
   14c14:	4849      	ldr	r0, [pc, #292]	; (14d3c <gauge_init+0x4b4>)
   14c16:	fba0 3202 	umull	r3, r2, r0, r2
   14c1a:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c1e:	e69b      	b.n	14958 <gauge_init+0xd0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14c20:	2000      	movs	r0, #0
   14c22:	4b45      	ldr	r3, [pc, #276]	; (14d38 <gauge_init+0x4b0>)
   14c24:	4798      	blx	r3
   14c26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c2a:	0082      	lsls	r2, r0, #2
   14c2c:	3250      	adds	r2, #80	; 0x50
   14c2e:	4843      	ldr	r0, [pc, #268]	; (14d3c <gauge_init+0x4b4>)
   14c30:	fba0 3202 	umull	r3, r2, r0, r2
   14c34:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c38:	e6a1      	b.n	1497e <gauge_init+0xf6>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14c3a:	2000      	movs	r0, #0
   14c3c:	4b3e      	ldr	r3, [pc, #248]	; (14d38 <gauge_init+0x4b0>)
   14c3e:	4798      	blx	r3
   14c40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c44:	0082      	lsls	r2, r0, #2
   14c46:	3250      	adds	r2, #80	; 0x50
   14c48:	483c      	ldr	r0, [pc, #240]	; (14d3c <gauge_init+0x4b4>)
   14c4a:	fba0 3202 	umull	r3, r2, r0, r2
   14c4e:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c52:	e6a7      	b.n	149a4 <gauge_init+0x11c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14c54:	2000      	movs	r0, #0
   14c56:	4b38      	ldr	r3, [pc, #224]	; (14d38 <gauge_init+0x4b0>)
   14c58:	4798      	blx	r3
   14c5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14c5e:	0082      	lsls	r2, r0, #2
   14c60:	3250      	adds	r2, #80	; 0x50
   14c62:	4836      	ldr	r0, [pc, #216]	; (14d3c <gauge_init+0x4b4>)
   14c64:	fba0 3202 	umull	r3, r2, r0, r2
   14c68:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c6c:	e6ad      	b.n	149ca <gauge_init+0x142>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   14c6e:	2000      	movs	r0, #0
   14c70:	4b31      	ldr	r3, [pc, #196]	; (14d38 <gauge_init+0x4b0>)
   14c72:	4798      	blx	r3
   14c74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14c78:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14c7c:	482f      	ldr	r0, [pc, #188]	; (14d3c <gauge_init+0x4b4>)
   14c7e:	fba0 3202 	umull	r3, r2, r0, r2
   14c82:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c86:	e6b2      	b.n	149ee <gauge_init+0x166>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14c88:	2000      	movs	r0, #0
   14c8a:	4b2b      	ldr	r3, [pc, #172]	; (14d38 <gauge_init+0x4b0>)
   14c8c:	4798      	blx	r3
   14c8e:	f100 020a 	add.w	r2, r0, #10
   14c92:	00d2      	lsls	r2, r2, #3
   14c94:	4829      	ldr	r0, [pc, #164]	; (14d3c <gauge_init+0x4b4>)
   14c96:	fba0 3202 	umull	r3, r2, r0, r2
   14c9a:	f342 12cf 	sbfx	r2, r2, #7, #16
   14c9e:	e6e1      	b.n	14a64 <gauge_init+0x1dc>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14ca0:	2000      	movs	r0, #0
   14ca2:	4b25      	ldr	r3, [pc, #148]	; (14d38 <gauge_init+0x4b0>)
   14ca4:	4798      	blx	r3
   14ca6:	f100 020a 	add.w	r2, r0, #10
   14caa:	00d2      	lsls	r2, r2, #3
   14cac:	4823      	ldr	r0, [pc, #140]	; (14d3c <gauge_init+0x4b4>)
   14cae:	fba0 3202 	umull	r3, r2, r0, r2
   14cb2:	f342 12cf 	sbfx	r2, r2, #7, #16
   14cb6:	e6e6      	b.n	14a86 <gauge_init+0x1fe>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   14cb8:	2000      	movs	r0, #0
   14cba:	4b1f      	ldr	r3, [pc, #124]	; (14d38 <gauge_init+0x4b0>)
   14cbc:	4798      	blx	r3
   14cbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14cc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14cc6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14cca:	481c      	ldr	r0, [pc, #112]	; (14d3c <gauge_init+0x4b4>)
   14ccc:	fba0 3202 	umull	r3, r2, r0, r2
   14cd0:	f342 12cf 	sbfx	r2, r2, #7, #16
   14cd4:	e6eb      	b.n	14aae <gauge_init+0x226>
   14cd6:	2308      	movs	r3, #8
   14cd8:	2112      	movs	r1, #18
   14cda:	240b      	movs	r4, #11
   14cdc:	e6fa      	b.n	14ad4 <gauge_init+0x24c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   14cde:	2000      	movs	r0, #0
   14ce0:	4b15      	ldr	r3, [pc, #84]	; (14d38 <gauge_init+0x4b0>)
   14ce2:	4798      	blx	r3
   14ce4:	f100 020a 	add.w	r2, r0, #10
   14ce8:	00d2      	lsls	r2, r2, #3
   14cea:	4814      	ldr	r0, [pc, #80]	; (14d3c <gauge_init+0x4b4>)
   14cec:	fba0 3202 	umull	r3, r2, r0, r2
   14cf0:	f342 12cf 	sbfx	r2, r2, #7, #16
   14cf4:	e706      	b.n	14b04 <gauge_init+0x27c>
   14cf6:	2308      	movs	r3, #8
   14cf8:	2112      	movs	r1, #18
   14cfa:	240b      	movs	r4, #11
   14cfc:	e717      	b.n	14b2e <gauge_init+0x2a6>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   14cfe:	2000      	movs	r0, #0
   14d00:	4b0d      	ldr	r3, [pc, #52]	; (14d38 <gauge_init+0x4b0>)
   14d02:	4798      	blx	r3
   14d04:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14d08:	0042      	lsls	r2, r0, #1
   14d0a:	3250      	adds	r2, #80	; 0x50
   14d0c:	480b      	ldr	r0, [pc, #44]	; (14d3c <gauge_init+0x4b4>)
   14d0e:	fba0 3202 	umull	r3, r2, r0, r2
   14d12:	f342 12cf 	sbfx	r2, r2, #7, #16
   14d16:	e72b      	b.n	14b70 <gauge_init+0x2e8>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   14d18:	2000      	movs	r0, #0
   14d1a:	4b07      	ldr	r3, [pc, #28]	; (14d38 <gauge_init+0x4b0>)
   14d1c:	4798      	blx	r3
   14d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14d22:	0042      	lsls	r2, r0, #1
   14d24:	3250      	adds	r2, #80	; 0x50
   14d26:	4805      	ldr	r0, [pc, #20]	; (14d3c <gauge_init+0x4b4>)
   14d28:	fba0 3202 	umull	r3, r2, r0, r2
   14d2c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14d30:	e73f      	b.n	14bb2 <gauge_init+0x32a>
   14d32:	bf00      	nop
   14d34:	00005ffd 	.word	0x00005ffd
   14d38:	00010181 	.word	0x00010181
   14d3c:	cccccccd 	.word	0xcccccccd

00014d40 <arc_init>:
{
   14d40:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
   14d42:	4c3c      	ldr	r4, [pc, #240]	; (14e34 <arc_init+0xf4>)
   14d44:	6820      	ldr	r0, [r4, #0]
   14d46:	301c      	adds	r0, #28
   14d48:	4b3b      	ldr	r3, [pc, #236]	; (14e38 <arc_init+0xf8>)
   14d4a:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
   14d4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14d4e:	89a2      	ldrh	r2, [r4, #12]
   14d50:	2199      	movs	r1, #153	; 0x99
   14d52:	301c      	adds	r0, #28
   14d54:	4b39      	ldr	r3, [pc, #228]	; (14e3c <arc_init+0xfc>)
   14d56:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   14d58:	6824      	ldr	r4, [r4, #0]
   14d5a:	341c      	adds	r4, #28
   14d5c:	2000      	movs	r0, #0
   14d5e:	4b38      	ldr	r3, [pc, #224]	; (14e40 <arc_init+0x100>)
   14d60:	4798      	blx	r3
   14d62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14d66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14d6a:	3050      	adds	r0, #80	; 0x50
   14d6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14d70:	d241      	bcs.n	14df6 <arc_init+0xb6>
   14d72:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14d74:	2190      	movs	r1, #144	; 0x90
   14d76:	4620      	mov	r0, r4
   14d78:	4d32      	ldr	r5, [pc, #200]	; (14e44 <arc_init+0x104>)
   14d7a:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
   14d7c:	4c2d      	ldr	r4, [pc, #180]	; (14e34 <arc_init+0xf4>)
   14d7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   14d80:	2201      	movs	r2, #1
   14d82:	2194      	movs	r1, #148	; 0x94
   14d84:	301c      	adds	r0, #28
   14d86:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
   14d88:	6820      	ldr	r0, [r4, #0]
   14d8a:	3020      	adds	r0, #32
   14d8c:	4b2a      	ldr	r3, [pc, #168]	; (14e38 <arc_init+0xf8>)
   14d8e:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   14d90:	6820      	ldr	r0, [r4, #0]
   14d92:	6a23      	ldr	r3, [r4, #32]
   14d94:	f013 0302 	ands.w	r3, r3, #2
   14d98:	bf14      	ite	ne
   14d9a:	211a      	movne	r1, #26
   14d9c:	2108      	moveq	r1, #8
   14d9e:	2b00      	cmp	r3, #0
   14da0:	bf15      	itete	ne
   14da2:	2435      	movne	r4, #53	; 0x35
   14da4:	2412      	moveq	r4, #18
   14da6:	231b      	movne	r3, #27
   14da8:	2309      	moveq	r3, #9
   14daa:	f04f 0200 	mov.w	r2, #0
   14dae:	f363 0204 	bfi	r2, r3, #0, #5
   14db2:	f364 124a 	bfi	r2, r4, #5, #6
   14db6:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14dba:	2199      	movs	r1, #153	; 0x99
   14dbc:	3020      	adds	r0, #32
   14dbe:	4b1f      	ldr	r3, [pc, #124]	; (14e3c <arc_init+0xfc>)
   14dc0:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   14dc2:	4b1c      	ldr	r3, [pc, #112]	; (14e34 <arc_init+0xf4>)
   14dc4:	681c      	ldr	r4, [r3, #0]
   14dc6:	3420      	adds	r4, #32
   14dc8:	2000      	movs	r0, #0
   14dca:	4b1d      	ldr	r3, [pc, #116]	; (14e40 <arc_init+0x100>)
   14dcc:	4798      	blx	r3
   14dce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14dd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14dd6:	3050      	adds	r0, #80	; 0x50
   14dd8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14ddc:	d21a      	bcs.n	14e14 <arc_init+0xd4>
   14dde:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14de0:	2190      	movs	r1, #144	; 0x90
   14de2:	4620      	mov	r0, r4
   14de4:	4c17      	ldr	r4, [pc, #92]	; (14e44 <arc_init+0x104>)
   14de6:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
   14de8:	4b12      	ldr	r3, [pc, #72]	; (14e34 <arc_init+0xf4>)
   14dea:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   14dec:	2201      	movs	r2, #1
   14dee:	2194      	movs	r1, #148	; 0x94
   14df0:	3020      	adds	r0, #32
   14df2:	47a0      	blx	r4
   14df4:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   14df6:	2000      	movs	r0, #0
   14df8:	4b11      	ldr	r3, [pc, #68]	; (14e40 <arc_init+0x100>)
   14dfa:	4798      	blx	r3
   14dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e04:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14e08:	480f      	ldr	r0, [pc, #60]	; (14e48 <arc_init+0x108>)
   14e0a:	fba0 3202 	umull	r3, r2, r0, r2
   14e0e:	f342 12cf 	sbfx	r2, r2, #7, #16
   14e12:	e7af      	b.n	14d74 <arc_init+0x34>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   14e14:	2000      	movs	r0, #0
   14e16:	4b0a      	ldr	r3, [pc, #40]	; (14e40 <arc_init+0x100>)
   14e18:	4798      	blx	r3
   14e1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14e22:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14e26:	4808      	ldr	r0, [pc, #32]	; (14e48 <arc_init+0x108>)
   14e28:	fba0 3202 	umull	r3, r2, r0, r2
   14e2c:	f342 12cf 	sbfx	r2, r2, #7, #16
   14e30:	e7d6      	b.n	14de0 <arc_init+0xa0>
   14e32:	bf00      	nop
   14e34:	2000abd4 	.word	0x2000abd4
   14e38:	00012f19 	.word	0x00012f19
   14e3c:	00006125 	.word	0x00006125
   14e40:	00010181 	.word	0x00010181
   14e44:	00005ffd 	.word	0x00005ffd
   14e48:	cccccccd 	.word	0xcccccccd

00014e4c <led_init>:
{
   14e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->led);
   14e4e:	4c37      	ldr	r4, [pc, #220]	; (14f2c <led_init+0xe0>)
   14e50:	6820      	ldr	r0, [r4, #0]
   14e52:	306c      	adds	r0, #108	; 0x6c
   14e54:	4b36      	ldr	r3, [pc, #216]	; (14f30 <led_init+0xe4>)
   14e56:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
   14e58:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14e5a:	22ff      	movs	r2, #255	; 0xff
   14e5c:	212c      	movs	r1, #44	; 0x2c
   14e5e:	306c      	adds	r0, #108	; 0x6c
   14e60:	4d34      	ldr	r5, [pc, #208]	; (14f34 <led_init+0xe8>)
   14e62:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   14e64:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14e66:	89a2      	ldrh	r2, [r4, #12]
   14e68:	2129      	movs	r1, #41	; 0x29
   14e6a:	306c      	adds	r0, #108	; 0x6c
   14e6c:	4f32      	ldr	r7, [pc, #200]	; (14f38 <led_init+0xec>)
   14e6e:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
   14e70:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   14e72:	2202      	movs	r2, #2
   14e74:	2130      	movs	r1, #48	; 0x30
   14e76:	306c      	adds	r0, #108	; 0x6c
   14e78:	4e30      	ldr	r6, [pc, #192]	; (14f3c <led_init+0xf0>)
   14e7a:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
   14e7c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   14e7e:	227f      	movs	r2, #127	; 0x7f
   14e80:	213c      	movs	r1, #60	; 0x3c
   14e82:	306c      	adds	r0, #108	; 0x6c
   14e84:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
   14e86:	6825      	ldr	r5, [r4, #0]
   14e88:	356c      	adds	r5, #108	; 0x6c
   14e8a:	214c      	movs	r1, #76	; 0x4c
   14e8c:	89a0      	ldrh	r0, [r4, #12]
   14e8e:	4b2c      	ldr	r3, [pc, #176]	; (14f40 <led_init+0xf4>)
   14e90:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   14e92:	4602      	mov	r2, r0
   14e94:	2139      	movs	r1, #57	; 0x39
   14e96:	4628      	mov	r0, r5
   14e98:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14e9a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14e9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   14ea0:	2101      	movs	r1, #1
   14ea2:	306c      	adds	r0, #108	; 0x6c
   14ea4:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   14ea6:	6824      	ldr	r4, [r4, #0]
   14ea8:	346c      	adds	r4, #108	; 0x6c
   14eaa:	2000      	movs	r0, #0
   14eac:	4b25      	ldr	r3, [pc, #148]	; (14f44 <led_init+0xf8>)
   14eae:	4798      	blx	r3
   14eb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14eb4:	3050      	adds	r0, #80	; 0x50
   14eb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14eba:	d21c      	bcs.n	14ef6 <led_init+0xaa>
   14ebc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   14ebe:	2150      	movs	r1, #80	; 0x50
   14ec0:	4620      	mov	r0, r4
   14ec2:	4b1e      	ldr	r3, [pc, #120]	; (14f3c <led_init+0xf0>)
   14ec4:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   14ec6:	4c19      	ldr	r4, [pc, #100]	; (14f2c <led_init+0xe0>)
   14ec8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   14eca:	89a2      	ldrh	r2, [r4, #12]
   14ecc:	2159      	movs	r1, #89	; 0x59
   14ece:	306c      	adds	r0, #108	; 0x6c
   14ed0:	4b19      	ldr	r3, [pc, #100]	; (14f38 <led_init+0xec>)
   14ed2:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   14ed4:	6824      	ldr	r4, [r4, #0]
   14ed6:	346c      	adds	r4, #108	; 0x6c
   14ed8:	2000      	movs	r0, #0
   14eda:	4b1a      	ldr	r3, [pc, #104]	; (14f44 <led_init+0xf8>)
   14edc:	4798      	blx	r3
   14ede:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14ee2:	3050      	adds	r0, #80	; 0x50
   14ee4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14ee8:	d212      	bcs.n	14f10 <led_init+0xc4>
   14eea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   14eec:	2153      	movs	r1, #83	; 0x53
   14eee:	4620      	mov	r0, r4
   14ef0:	4b12      	ldr	r3, [pc, #72]	; (14f3c <led_init+0xf0>)
   14ef2:	4798      	blx	r3
   14ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   14ef6:	2000      	movs	r0, #0
   14ef8:	4b12      	ldr	r3, [pc, #72]	; (14f44 <led_init+0xf8>)
   14efa:	4798      	blx	r3
   14efc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   14f00:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14f04:	4810      	ldr	r0, [pc, #64]	; (14f48 <led_init+0xfc>)
   14f06:	fba0 3202 	umull	r3, r2, r0, r2
   14f0a:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f0e:	e7d6      	b.n	14ebe <led_init+0x72>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   14f10:	2000      	movs	r0, #0
   14f12:	4b0c      	ldr	r3, [pc, #48]	; (14f44 <led_init+0xf8>)
   14f14:	4798      	blx	r3
   14f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14f1a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   14f1e:	480a      	ldr	r0, [pc, #40]	; (14f48 <led_init+0xfc>)
   14f20:	fba0 3202 	umull	r3, r2, r0, r2
   14f24:	f342 12cf 	sbfx	r2, r2, #7, #16
   14f28:	e7e0      	b.n	14eec <led_init+0xa0>
   14f2a:	bf00      	nop
   14f2c:	2000abd4 	.word	0x2000abd4
   14f30:	00012f19 	.word	0x00012f19
   14f34:	0000624d 	.word	0x0000624d
   14f38:	00006125 	.word	0x00006125
   14f3c:	00005ffd 	.word	0x00005ffd
   14f40:	00010d6b 	.word	0x00010d6b
   14f44:	00010181 	.word	0x00010181
   14f48:	cccccccd 	.word	0xcccccccd

00014f4c <lv_theme_material_init>:
{
   14f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f50:	4680      	mov	r8, r0
   14f52:	460f      	mov	r7, r1
   14f54:	4615      	mov	r5, r2
   14f56:	461e      	mov	r6, r3
    if(!inited) {
   14f58:	4bb2      	ldr	r3, [pc, #712]	; (15224 <lv_theme_material_init+0x2d8>)
   14f5a:	791b      	ldrb	r3, [r3, #4]
   14f5c:	2b00      	cmp	r3, #0
   14f5e:	f001 8369 	beq.w	16634 <lv_theme_material_init+0x16e8>
    theme.color_primary = color_primary;
   14f62:	4cb0      	ldr	r4, [pc, #704]	; (15224 <lv_theme_material_init+0x2d8>)
   14f64:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
   14f68:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
   14f6a:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
   14f6c:	9b06      	ldr	r3, [sp, #24]
   14f6e:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
   14f70:	9b07      	ldr	r3, [sp, #28]
   14f72:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
   14f74:	9b08      	ldr	r3, [sp, #32]
   14f76:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
   14f78:	6225      	str	r5, [r4, #32]
    basic_init();
   14f7a:	4bab      	ldr	r3, [pc, #684]	; (15228 <lv_theme_material_init+0x2dc>)
   14f7c:	4798      	blx	r3
    bar_init();
   14f7e:	4bab      	ldr	r3, [pc, #684]	; (1522c <lv_theme_material_init+0x2e0>)
   14f80:	4798      	blx	r3
    led_init();
   14f82:	4bab      	ldr	r3, [pc, #684]	; (15230 <lv_theme_material_init+0x2e4>)
   14f84:	4798      	blx	r3
    slider_init();
   14f86:	4bab      	ldr	r3, [pc, #684]	; (15234 <lv_theme_material_init+0x2e8>)
   14f88:	4798      	blx	r3
    switch_init();
   14f8a:	4bab      	ldr	r3, [pc, #684]	; (15238 <lv_theme_material_init+0x2ec>)
   14f8c:	4798      	blx	r3
    linemeter_init();
   14f8e:	4bab      	ldr	r3, [pc, #684]	; (1523c <lv_theme_material_init+0x2f0>)
   14f90:	4798      	blx	r3
    gauge_init();
   14f92:	4bab      	ldr	r3, [pc, #684]	; (15240 <lv_theme_material_init+0x2f4>)
   14f94:	4798      	blx	r3
    arc_init();
   14f96:	4bab      	ldr	r3, [pc, #684]	; (15244 <lv_theme_material_init+0x2f8>)
   14f98:	4798      	blx	r3
    style_init_reset(&styles->chart_bg);
   14f9a:	6820      	ldr	r0, [r4, #0]
   14f9c:	3040      	adds	r0, #64	; 0x40
   14f9e:	4baa      	ldr	r3, [pc, #680]	; (15248 <lv_theme_material_init+0x2fc>)
   14fa0:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   14fa2:	6820      	ldr	r0, [r4, #0]
   14fa4:	3040      	adds	r0, #64	; 0x40
   14fa6:	6a23      	ldr	r3, [r4, #32]
   14fa8:	f013 0f02 	tst.w	r3, #2
   14fac:	f041 834b 	bne.w	16646 <lv_theme_material_init+0x16fa>
   14fb0:	2314      	movs	r3, #20
   14fb2:	212b      	movs	r1, #43	; 0x2b
   14fb4:	2417      	movs	r4, #23
   14fb6:	f04f 0200 	mov.w	r2, #0
   14fba:	f364 0204 	bfi	r2, r4, #0, #5
   14fbe:	f361 124a 	bfi	r2, r1, #5, #6
   14fc2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   14fc6:	f248 0189 	movw	r1, #32905	; 0x8089
   14fca:	4ba0      	ldr	r3, [pc, #640]	; (1524c <lv_theme_material_init+0x300>)
   14fcc:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
   14fce:	4c95      	ldr	r4, [pc, #596]	; (15224 <lv_theme_material_init+0x2d8>)
   14fd0:	6820      	ldr	r0, [r4, #0]
   14fd2:	3044      	adds	r0, #68	; 0x44
   14fd4:	4b9c      	ldr	r3, [pc, #624]	; (15248 <lv_theme_material_init+0x2fc>)
   14fd6:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   14fd8:	6824      	ldr	r4, [r4, #0]
   14fda:	3444      	adds	r4, #68	; 0x44
   14fdc:	2000      	movs	r0, #0
   14fde:	4b9c      	ldr	r3, [pc, #624]	; (15250 <lv_theme_material_init+0x304>)
   14fe0:	4798      	blx	r3
   14fe2:	3050      	adds	r0, #80	; 0x50
   14fe4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   14fe8:	f081 8332 	bcs.w	16650 <lv_theme_material_init+0x1704>
   14fec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14fee:	2190      	movs	r1, #144	; 0x90
   14ff0:	4620      	mov	r0, r4
   14ff2:	4b98      	ldr	r3, [pc, #608]	; (15254 <lv_theme_material_init+0x308>)
   14ff4:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14ff6:	4b8b      	ldr	r3, [pc, #556]	; (15224 <lv_theme_material_init+0x2d8>)
   14ff8:	681c      	ldr	r4, [r3, #0]
   14ffa:	3444      	adds	r4, #68	; 0x44
   14ffc:	2000      	movs	r0, #0
   14ffe:	4b94      	ldr	r3, [pc, #592]	; (15250 <lv_theme_material_init+0x304>)
   15000:	4798      	blx	r3
   15002:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15006:	0040      	lsls	r0, r0, #1
   15008:	3050      	adds	r0, #80	; 0x50
   1500a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1500e:	f081 832b 	bcs.w	16668 <lv_theme_material_init+0x171c>
   15012:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   15014:	2192      	movs	r1, #146	; 0x92
   15016:	4620      	mov	r0, r4
   15018:	4b8e      	ldr	r3, [pc, #568]	; (15254 <lv_theme_material_init+0x308>)
   1501a:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1501c:	4b81      	ldr	r3, [pc, #516]	; (15224 <lv_theme_material_init+0x2d8>)
   1501e:	681c      	ldr	r4, [r3, #0]
   15020:	3444      	adds	r4, #68	; 0x44
   15022:	2000      	movs	r0, #0
   15024:	4b8a      	ldr	r3, [pc, #552]	; (15250 <lv_theme_material_init+0x304>)
   15026:	4798      	blx	r3
   15028:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1502c:	0040      	lsls	r0, r0, #1
   1502e:	3050      	adds	r0, #80	; 0x50
   15030:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15034:	f081 8326 	bcs.w	16684 <lv_theme_material_init+0x1738>
   15038:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   1503a:	2193      	movs	r1, #147	; 0x93
   1503c:	4620      	mov	r0, r4
   1503e:	4b85      	ldr	r3, [pc, #532]	; (15254 <lv_theme_material_init+0x308>)
   15040:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   15042:	4b78      	ldr	r3, [pc, #480]	; (15224 <lv_theme_material_init+0x2d8>)
   15044:	6818      	ldr	r0, [r3, #0]
   15046:	6a1b      	ldr	r3, [r3, #32]
   15048:	f013 0302 	ands.w	r3, r3, #2
   1504c:	bf14      	ite	ne
   1504e:	211a      	movne	r1, #26
   15050:	2110      	moveq	r1, #16
   15052:	2b00      	cmp	r3, #0
   15054:	bf15      	itete	ne
   15056:	2437      	movne	r4, #55	; 0x37
   15058:	2422      	moveq	r4, #34	; 0x22
   1505a:	231c      	movne	r3, #28
   1505c:	2312      	moveq	r3, #18
   1505e:	f04f 0200 	mov.w	r2, #0
   15062:	f363 0204 	bfi	r2, r3, #0, #5
   15066:	f364 124a 	bfi	r2, r4, #5, #6
   1506a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1506e:	2199      	movs	r1, #153	; 0x99
   15070:	3044      	adds	r0, #68	; 0x44
   15072:	4b76      	ldr	r3, [pc, #472]	; (1524c <lv_theme_material_init+0x300>)
   15074:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
   15076:	4c6b      	ldr	r4, [pc, #428]	; (15224 <lv_theme_material_init+0x2d8>)
   15078:	6820      	ldr	r0, [r4, #0]
   1507a:	3048      	adds	r0, #72	; 0x48
   1507c:	4b72      	ldr	r3, [pc, #456]	; (15248 <lv_theme_material_init+0x2fc>)
   1507e:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   15080:	6824      	ldr	r4, [r4, #0]
   15082:	3448      	adds	r4, #72	; 0x48
   15084:	2000      	movs	r0, #0
   15086:	4b72      	ldr	r3, [pc, #456]	; (15250 <lv_theme_material_init+0x304>)
   15088:	4798      	blx	r3
   1508a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1508e:	3050      	adds	r0, #80	; 0x50
   15090:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15094:	f081 8304 	bcs.w	166a0 <lv_theme_material_init+0x1754>
   15098:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1509a:	2190      	movs	r1, #144	; 0x90
   1509c:	4620      	mov	r0, r4
   1509e:	4b6d      	ldr	r3, [pc, #436]	; (15254 <lv_theme_material_init+0x308>)
   150a0:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   150a2:	4b60      	ldr	r3, [pc, #384]	; (15224 <lv_theme_material_init+0x2d8>)
   150a4:	681c      	ldr	r4, [r3, #0]
   150a6:	3448      	adds	r4, #72	; 0x48
   150a8:	2000      	movs	r0, #0
   150aa:	4b69      	ldr	r3, [pc, #420]	; (15250 <lv_theme_material_init+0x304>)
   150ac:	4798      	blx	r3
   150ae:	3014      	adds	r0, #20
   150b0:	0080      	lsls	r0, r0, #2
   150b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   150b6:	f081 8301 	bcs.w	166bc <lv_theme_material_init+0x1770>
   150ba:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   150bc:	2103      	movs	r1, #3
   150be:	4620      	mov	r0, r4
   150c0:	4b64      	ldr	r3, [pc, #400]	; (15254 <lv_theme_material_init+0x308>)
   150c2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   150c4:	4b57      	ldr	r3, [pc, #348]	; (15224 <lv_theme_material_init+0x2d8>)
   150c6:	681c      	ldr	r4, [r3, #0]
   150c8:	3448      	adds	r4, #72	; 0x48
   150ca:	2000      	movs	r0, #0
   150cc:	4b60      	ldr	r3, [pc, #384]	; (15250 <lv_theme_material_init+0x304>)
   150ce:	4798      	blx	r3
   150d0:	3028      	adds	r0, #40	; 0x28
   150d2:	0040      	lsls	r0, r0, #1
   150d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   150d8:	f081 82fd 	bcs.w	166d6 <lv_theme_material_init+0x178a>
   150dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   150de:	2114      	movs	r1, #20
   150e0:	4620      	mov	r0, r4
   150e2:	4b5c      	ldr	r3, [pc, #368]	; (15254 <lv_theme_material_init+0x308>)
   150e4:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   150e6:	4b4f      	ldr	r3, [pc, #316]	; (15224 <lv_theme_material_init+0x2d8>)
   150e8:	681c      	ldr	r4, [r3, #0]
   150ea:	3448      	adds	r4, #72	; 0x48
   150ec:	2000      	movs	r0, #0
   150ee:	4b58      	ldr	r3, [pc, #352]	; (15250 <lv_theme_material_init+0x304>)
   150f0:	4798      	blx	r3
   150f2:	3050      	adds	r0, #80	; 0x50
   150f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   150f8:	f081 82fa 	bcs.w	166f0 <lv_theme_material_init+0x17a4>
   150fc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   150fe:	2101      	movs	r1, #1
   15100:	4620      	mov	r0, r4
   15102:	4b54      	ldr	r3, [pc, #336]	; (15254 <lv_theme_material_init+0x308>)
   15104:	4798      	blx	r3
    style_init_reset(&styles->calendar_header);
   15106:	4c47      	ldr	r4, [pc, #284]	; (15224 <lv_theme_material_init+0x2d8>)
   15108:	6820      	ldr	r0, [r4, #0]
   1510a:	3030      	adds	r0, #48	; 0x30
   1510c:	4b4e      	ldr	r3, [pc, #312]	; (15248 <lv_theme_material_init+0x2fc>)
   1510e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15110:	6824      	ldr	r4, [r4, #0]
   15112:	3430      	adds	r4, #48	; 0x30
   15114:	2000      	movs	r0, #0
   15116:	4b50      	ldr	r3, [pc, #320]	; (15258 <lv_theme_material_init+0x30c>)
   15118:	4798      	blx	r3
   1511a:	2801      	cmp	r0, #1
   1511c:	f241 82f4 	bls.w	16708 <lv_theme_material_init+0x17bc>
   15120:	2000      	movs	r0, #0
   15122:	4b4b      	ldr	r3, [pc, #300]	; (15250 <lv_theme_material_init+0x304>)
   15124:	4798      	blx	r3
   15126:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1512a:	0040      	lsls	r0, r0, #1
   1512c:	3050      	adds	r0, #80	; 0x50
   1512e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15132:	f081 8303 	bcs.w	1673c <lv_theme_material_init+0x17f0>
   15136:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15138:	2110      	movs	r1, #16
   1513a:	4620      	mov	r0, r4
   1513c:	4b45      	ldr	r3, [pc, #276]	; (15254 <lv_theme_material_init+0x308>)
   1513e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15140:	4b38      	ldr	r3, [pc, #224]	; (15224 <lv_theme_material_init+0x2d8>)
   15142:	681c      	ldr	r4, [r3, #0]
   15144:	3430      	adds	r4, #48	; 0x30
   15146:	2000      	movs	r0, #0
   15148:	4b43      	ldr	r3, [pc, #268]	; (15258 <lv_theme_material_init+0x30c>)
   1514a:	4798      	blx	r3
   1514c:	2801      	cmp	r0, #1
   1514e:	f241 8303 	bls.w	16758 <lv_theme_material_init+0x180c>
   15152:	2000      	movs	r0, #0
   15154:	4b3e      	ldr	r3, [pc, #248]	; (15250 <lv_theme_material_init+0x304>)
   15156:	4798      	blx	r3
   15158:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1515c:	0040      	lsls	r0, r0, #1
   1515e:	3050      	adds	r0, #80	; 0x50
   15160:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15164:	f081 8312 	bcs.w	1678c <lv_theme_material_init+0x1840>
   15168:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1516a:	2112      	movs	r1, #18
   1516c:	4620      	mov	r0, r4
   1516e:	4b39      	ldr	r3, [pc, #228]	; (15254 <lv_theme_material_init+0x308>)
   15170:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15172:	4b2c      	ldr	r3, [pc, #176]	; (15224 <lv_theme_material_init+0x2d8>)
   15174:	681c      	ldr	r4, [r3, #0]
   15176:	3430      	adds	r4, #48	; 0x30
   15178:	2000      	movs	r0, #0
   1517a:	4b37      	ldr	r3, [pc, #220]	; (15258 <lv_theme_material_init+0x30c>)
   1517c:	4798      	blx	r3
   1517e:	2801      	cmp	r0, #1
   15180:	f241 8328 	bls.w	167d4 <lv_theme_material_init+0x1888>
   15184:	2000      	movs	r0, #0
   15186:	4b32      	ldr	r3, [pc, #200]	; (15250 <lv_theme_material_init+0x304>)
   15188:	4798      	blx	r3
   1518a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1518e:	0040      	lsls	r0, r0, #1
   15190:	3050      	adds	r0, #80	; 0x50
   15192:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15196:	f081 8337 	bcs.w	16808 <lv_theme_material_init+0x18bc>
   1519a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1519c:	2113      	movs	r1, #19
   1519e:	4620      	mov	r0, r4
   151a0:	4b2c      	ldr	r3, [pc, #176]	; (15254 <lv_theme_material_init+0x308>)
   151a2:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   151a4:	4b1f      	ldr	r3, [pc, #124]	; (15224 <lv_theme_material_init+0x2d8>)
   151a6:	681c      	ldr	r4, [r3, #0]
   151a8:	3430      	adds	r4, #48	; 0x30
   151aa:	2000      	movs	r0, #0
   151ac:	4b2a      	ldr	r3, [pc, #168]	; (15258 <lv_theme_material_init+0x30c>)
   151ae:	4798      	blx	r3
   151b0:	2801      	cmp	r0, #1
   151b2:	f241 8337 	bls.w	16824 <lv_theme_material_init+0x18d8>
   151b6:	2000      	movs	r0, #0
   151b8:	4b25      	ldr	r3, [pc, #148]	; (15250 <lv_theme_material_init+0x304>)
   151ba:	4798      	blx	r3
   151bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   151c0:	0040      	lsls	r0, r0, #1
   151c2:	3050      	adds	r0, #80	; 0x50
   151c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   151c8:	f081 8346 	bcs.w	16858 <lv_theme_material_init+0x190c>
   151cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   151ce:	2111      	movs	r1, #17
   151d0:	4620      	mov	r0, r4
   151d2:	4b20      	ldr	r3, [pc, #128]	; (15254 <lv_theme_material_init+0x308>)
   151d4:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
   151d6:	4b13      	ldr	r3, [pc, #76]	; (15224 <lv_theme_material_init+0x2d8>)
   151d8:	6818      	ldr	r0, [r3, #0]
   151da:	6a1b      	ldr	r3, [r3, #32]
   151dc:	f013 0302 	ands.w	r3, r3, #2
   151e0:	bf14      	ite	ne
   151e2:	2122      	movne	r1, #34	; 0x22
   151e4:	213f      	moveq	r1, #63	; 0x3f
   151e6:	2b00      	cmp	r3, #0
   151e8:	bf14      	ite	ne
   151ea:	2311      	movne	r3, #17
   151ec:	231f      	moveq	r3, #31
   151ee:	f04f 0200 	mov.w	r2, #0
   151f2:	f363 0204 	bfi	r2, r3, #0, #5
   151f6:	f361 124a 	bfi	r2, r1, #5, #6
   151fa:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   151fe:	f249 0189 	movw	r1, #37001	; 0x9089
   15202:	3030      	adds	r0, #48	; 0x30
   15204:	4b11      	ldr	r3, [pc, #68]	; (1524c <lv_theme_material_init+0x300>)
   15206:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
   15208:	4c06      	ldr	r4, [pc, #24]	; (15224 <lv_theme_material_init+0x2d8>)
   1520a:	6820      	ldr	r0, [r4, #0]
   1520c:	3034      	adds	r0, #52	; 0x34
   1520e:	4b0e      	ldr	r3, [pc, #56]	; (15248 <lv_theme_material_init+0x2fc>)
   15210:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   15212:	6820      	ldr	r0, [r4, #0]
   15214:	3034      	adds	r0, #52	; 0x34
   15216:	6a23      	ldr	r3, [r4, #32]
   15218:	f013 0f02 	tst.w	r3, #2
   1521c:	f041 832a 	bne.w	16874 <lv_theme_material_init+0x1928>
   15220:	e01c      	b.n	1525c <lv_theme_material_init+0x310>
   15222:	bf00      	nop
   15224:	2000abd4 	.word	0x2000abd4
   15228:	00012f39 	.word	0x00012f39
   1522c:	00014131 	.word	0x00014131
   15230:	00014e4d 	.word	0x00014e4d
   15234:	00014299 	.word	0x00014299
   15238:	00014525 	.word	0x00014525
   1523c:	00014669 	.word	0x00014669
   15240:	00014889 	.word	0x00014889
   15244:	00014d41 	.word	0x00014d41
   15248:	00012f19 	.word	0x00012f19
   1524c:	00006125 	.word	0x00006125
   15250:	00010181 	.word	0x00010181
   15254:	00005ffd 	.word	0x00005ffd
   15258:	0001019d 	.word	0x0001019d
   1525c:	231d      	movs	r3, #29
   1525e:	213b      	movs	r1, #59	; 0x3b
   15260:	461c      	mov	r4, r3
   15262:	f04f 0200 	mov.w	r2, #0
   15266:	f364 0204 	bfi	r2, r4, #0, #5
   1526a:	f361 124a 	bfi	r2, r1, #5, #6
   1526e:	f363 22cf 	bfi	r2, r3, #11, #5
   15272:	f248 0189 	movw	r1, #32905	; 0x8089
   15276:	4bb8      	ldr	r3, [pc, #736]	; (15558 <lv_theme_material_init+0x60c>)
   15278:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   1527a:	4bb8      	ldr	r3, [pc, #736]	; (1555c <lv_theme_material_init+0x610>)
   1527c:	681c      	ldr	r4, [r3, #0]
   1527e:	3434      	adds	r4, #52	; 0x34
   15280:	2000      	movs	r0, #0
   15282:	4bb7      	ldr	r3, [pc, #732]	; (15560 <lv_theme_material_init+0x614>)
   15284:	4798      	blx	r3
   15286:	2801      	cmp	r0, #1
   15288:	f241 82f9 	bls.w	1687e <lv_theme_material_init+0x1932>
   1528c:	2000      	movs	r0, #0
   1528e:	4bb5      	ldr	r3, [pc, #724]	; (15564 <lv_theme_material_init+0x618>)
   15290:	4798      	blx	r3
   15292:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15296:	0040      	lsls	r0, r0, #1
   15298:	3050      	adds	r0, #80	; 0x50
   1529a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1529e:	f081 8308 	bcs.w	168b2 <lv_theme_material_init+0x1966>
   152a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   152a4:	2112      	movs	r1, #18
   152a6:	4620      	mov	r0, r4
   152a8:	4baf      	ldr	r3, [pc, #700]	; (15568 <lv_theme_material_init+0x61c>)
   152aa:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   152ac:	4bab      	ldr	r3, [pc, #684]	; (1555c <lv_theme_material_init+0x610>)
   152ae:	681c      	ldr	r4, [r3, #0]
   152b0:	3434      	adds	r4, #52	; 0x34
   152b2:	2000      	movs	r0, #0
   152b4:	4baa      	ldr	r3, [pc, #680]	; (15560 <lv_theme_material_init+0x614>)
   152b6:	4798      	blx	r3
   152b8:	2801      	cmp	r0, #1
   152ba:	f241 8308 	bls.w	168ce <lv_theme_material_init+0x1982>
   152be:	2000      	movs	r0, #0
   152c0:	4ba8      	ldr	r3, [pc, #672]	; (15564 <lv_theme_material_init+0x618>)
   152c2:	4798      	blx	r3
   152c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   152c8:	0040      	lsls	r0, r0, #1
   152ca:	3050      	adds	r0, #80	; 0x50
   152cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   152d0:	f081 8317 	bcs.w	16902 <lv_theme_material_init+0x19b6>
   152d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   152d6:	2113      	movs	r1, #19
   152d8:	4620      	mov	r0, r4
   152da:	4ba3      	ldr	r3, [pc, #652]	; (15568 <lv_theme_material_init+0x61c>)
   152dc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   152de:	4b9f      	ldr	r3, [pc, #636]	; (1555c <lv_theme_material_init+0x610>)
   152e0:	681c      	ldr	r4, [r3, #0]
   152e2:	3434      	adds	r4, #52	; 0x34
   152e4:	2000      	movs	r0, #0
   152e6:	4b9e      	ldr	r3, [pc, #632]	; (15560 <lv_theme_material_init+0x614>)
   152e8:	4798      	blx	r3
   152ea:	2801      	cmp	r0, #1
   152ec:	f241 8317 	bls.w	1691e <lv_theme_material_init+0x19d2>
   152f0:	2000      	movs	r0, #0
   152f2:	4b9c      	ldr	r3, [pc, #624]	; (15564 <lv_theme_material_init+0x618>)
   152f4:	4798      	blx	r3
   152f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   152fa:	0040      	lsls	r0, r0, #1
   152fc:	3050      	adds	r0, #80	; 0x50
   152fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15302:	f081 8326 	bcs.w	16952 <lv_theme_material_init+0x1a06>
   15306:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15308:	2111      	movs	r1, #17
   1530a:	4620      	mov	r0, r4
   1530c:	4b96      	ldr	r3, [pc, #600]	; (15568 <lv_theme_material_init+0x61c>)
   1530e:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
   15310:	4c92      	ldr	r4, [pc, #584]	; (1555c <lv_theme_material_init+0x610>)
   15312:	6820      	ldr	r0, [r4, #0]
   15314:	302c      	adds	r0, #44	; 0x2c
   15316:	4b95      	ldr	r3, [pc, #596]	; (1556c <lv_theme_material_init+0x620>)
   15318:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   1531a:	6824      	ldr	r4, [r4, #0]
   1531c:	342c      	adds	r4, #44	; 0x2c
   1531e:	2000      	movs	r0, #0
   15320:	4b90      	ldr	r3, [pc, #576]	; (15564 <lv_theme_material_init+0x618>)
   15322:	4798      	blx	r3
   15324:	3014      	adds	r0, #20
   15326:	0080      	lsls	r0, r0, #2
   15328:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1532c:	f081 831f 	bcs.w	1696e <lv_theme_material_init+0x1a22>
   15330:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15332:	2101      	movs	r1, #1
   15334:	4620      	mov	r0, r4
   15336:	4b8c      	ldr	r3, [pc, #560]	; (15568 <lv_theme_material_init+0x61c>)
   15338:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   1533a:	4b88      	ldr	r3, [pc, #544]	; (1555c <lv_theme_material_init+0x610>)
   1533c:	6818      	ldr	r0, [r3, #0]
   1533e:	302c      	adds	r0, #44	; 0x2c
   15340:	6a1b      	ldr	r3, [r3, #32]
   15342:	f013 0f02 	tst.w	r3, #2
   15346:	f041 831f 	bne.w	16988 <lv_theme_material_init+0x1a3c>
   1534a:	231f      	movs	r3, #31
   1534c:	213f      	movs	r1, #63	; 0x3f
   1534e:	461c      	mov	r4, r3
   15350:	f04f 0200 	mov.w	r2, #0
   15354:	f364 0204 	bfi	r2, r4, #0, #5
   15358:	f361 124a 	bfi	r2, r1, #5, #6
   1535c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15360:	f248 1189 	movw	r1, #33161	; 0x8189
   15364:	4b7c      	ldr	r3, [pc, #496]	; (15558 <lv_theme_material_init+0x60c>)
   15366:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
   15368:	4b7c      	ldr	r3, [pc, #496]	; (1555c <lv_theme_material_init+0x610>)
   1536a:	6818      	ldr	r0, [r3, #0]
   1536c:	6a1b      	ldr	r3, [r3, #32]
   1536e:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15372:	bf14      	ite	ne
   15374:	2233      	movne	r2, #51	; 0x33
   15376:	2266      	moveq	r2, #102	; 0x66
   15378:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1537c:	302c      	adds	r0, #44	; 0x2c
   1537e:	4d7c      	ldr	r5, [pc, #496]	; (15570 <lv_theme_material_init+0x624>)
   15380:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
   15382:	4c76      	ldr	r4, [pc, #472]	; (1555c <lv_theme_material_init+0x610>)
   15384:	6820      	ldr	r0, [r4, #0]
   15386:	2233      	movs	r2, #51	; 0x33
   15388:	f241 012c 	movw	r1, #4140	; 0x102c
   1538c:	302c      	adds	r0, #44	; 0x2c
   1538e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
   15390:	6820      	ldr	r0, [r4, #0]
   15392:	22ff      	movs	r2, #255	; 0xff
   15394:	f44f 710b 	mov.w	r1, #556	; 0x22c
   15398:	302c      	adds	r0, #44	; 0x2c
   1539a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
   1539c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1539e:	4b75      	ldr	r3, [pc, #468]	; (15574 <lv_theme_material_init+0x628>)
   153a0:	881a      	ldrh	r2, [r3, #0]
   153a2:	f248 2189 	movw	r1, #33417	; 0x8289
   153a6:	302c      	adds	r0, #44	; 0x2c
   153a8:	4d6b      	ldr	r5, [pc, #428]	; (15558 <lv_theme_material_init+0x60c>)
   153aa:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
   153ac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   153ae:	89a2      	ldrh	r2, [r4, #12]
   153b0:	f240 2129 	movw	r1, #553	; 0x229
   153b4:	302c      	adds	r0, #44	; 0x2c
   153b6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
   153b8:	6820      	ldr	r0, [r4, #0]
   153ba:	6a23      	ldr	r3, [r4, #32]
   153bc:	f013 0302 	ands.w	r3, r3, #2
   153c0:	bf14      	ite	ne
   153c2:	2119      	movne	r1, #25
   153c4:	213f      	moveq	r1, #63	; 0x3f
   153c6:	2b00      	cmp	r3, #0
   153c8:	bf14      	ite	ne
   153ca:	230c      	movne	r3, #12
   153cc:	231f      	moveq	r3, #31
   153ce:	f04f 0200 	mov.w	r2, #0
   153d2:	f363 0204 	bfi	r2, r3, #0, #5
   153d6:	f361 124a 	bfi	r2, r1, #5, #6
   153da:	f363 22cf 	bfi	r2, r3, #11, #5
   153de:	2129      	movs	r1, #41	; 0x29
   153e0:	302c      	adds	r0, #44	; 0x2c
   153e2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   153e4:	6820      	ldr	r0, [r4, #0]
   153e6:	89a2      	ldrh	r2, [r4, #12]
   153e8:	f240 1129 	movw	r1, #297	; 0x129
   153ec:	302c      	adds	r0, #44	; 0x2c
   153ee:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
   153f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   153f2:	2202      	movs	r2, #2
   153f4:	f44f 7198 	mov.w	r1, #304	; 0x130
   153f8:	302c      	adds	r0, #44	; 0x2c
   153fa:	4e5b      	ldr	r6, [pc, #364]	; (15568 <lv_theme_material_init+0x61c>)
   153fc:	47b0      	blx	r6
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
   153fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15400:	2204      	movs	r2, #4
   15402:	f240 1131 	movw	r1, #305	; 0x131
   15406:	302c      	adds	r0, #44	; 0x2c
   15408:	47b0      	blx	r6
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   1540a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1540c:	89a2      	ldrh	r2, [r4, #12]
   1540e:	f240 1139 	movw	r1, #313	; 0x139
   15412:	302c      	adds	r0, #44	; 0x2c
   15414:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   15416:	6824      	ldr	r4, [r4, #0]
   15418:	342c      	adds	r4, #44	; 0x2c
   1541a:	2000      	movs	r0, #0
   1541c:	4b51      	ldr	r3, [pc, #324]	; (15564 <lv_theme_material_init+0x618>)
   1541e:	4798      	blx	r3
   15420:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15424:	3050      	adds	r0, #80	; 0x50
   15426:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1542a:	f081 82b2 	bcs.w	16992 <lv_theme_material_init+0x1a46>
   1542e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15430:	2114      	movs	r1, #20
   15432:	4620      	mov	r0, r4
   15434:	4b4c      	ldr	r3, [pc, #304]	; (15568 <lv_theme_material_init+0x61c>)
   15436:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   15438:	4b48      	ldr	r3, [pc, #288]	; (1555c <lv_theme_material_init+0x610>)
   1543a:	681c      	ldr	r4, [r3, #0]
   1543c:	342c      	adds	r4, #44	; 0x2c
   1543e:	2000      	movs	r0, #0
   15440:	4b47      	ldr	r3, [pc, #284]	; (15560 <lv_theme_material_init+0x614>)
   15442:	4798      	blx	r3
   15444:	2801      	cmp	r0, #1
   15446:	f241 82b2 	bls.w	169ae <lv_theme_material_init+0x1a62>
   1544a:	2000      	movs	r0, #0
   1544c:	4b45      	ldr	r3, [pc, #276]	; (15564 <lv_theme_material_init+0x618>)
   1544e:	4798      	blx	r3
   15450:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15454:	0040      	lsls	r0, r0, #1
   15456:	3050      	adds	r0, #80	; 0x50
   15458:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1545c:	f081 82c1 	bcs.w	169e2 <lv_theme_material_init+0x1a96>
   15460:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15462:	2112      	movs	r1, #18
   15464:	4620      	mov	r0, r4
   15466:	4b40      	ldr	r3, [pc, #256]	; (15568 <lv_theme_material_init+0x61c>)
   15468:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   1546a:	4b3c      	ldr	r3, [pc, #240]	; (1555c <lv_theme_material_init+0x610>)
   1546c:	681c      	ldr	r4, [r3, #0]
   1546e:	342c      	adds	r4, #44	; 0x2c
   15470:	2000      	movs	r0, #0
   15472:	4b3b      	ldr	r3, [pc, #236]	; (15560 <lv_theme_material_init+0x614>)
   15474:	4798      	blx	r3
   15476:	2801      	cmp	r0, #1
   15478:	f241 82c1 	bls.w	169fe <lv_theme_material_init+0x1ab2>
   1547c:	2000      	movs	r0, #0
   1547e:	4b39      	ldr	r3, [pc, #228]	; (15564 <lv_theme_material_init+0x618>)
   15480:	4798      	blx	r3
   15482:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15486:	0040      	lsls	r0, r0, #1
   15488:	3050      	adds	r0, #80	; 0x50
   1548a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1548e:	f081 82d0 	bcs.w	16a32 <lv_theme_material_init+0x1ae6>
   15492:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15494:	2113      	movs	r1, #19
   15496:	4620      	mov	r0, r4
   15498:	4b33      	ldr	r3, [pc, #204]	; (15568 <lv_theme_material_init+0x61c>)
   1549a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   1549c:	4b2f      	ldr	r3, [pc, #188]	; (1555c <lv_theme_material_init+0x610>)
   1549e:	681c      	ldr	r4, [r3, #0]
   154a0:	342c      	adds	r4, #44	; 0x2c
   154a2:	2000      	movs	r0, #0
   154a4:	4b2e      	ldr	r3, [pc, #184]	; (15560 <lv_theme_material_init+0x614>)
   154a6:	4798      	blx	r3
   154a8:	2801      	cmp	r0, #1
   154aa:	f241 82d0 	bls.w	16a4e <lv_theme_material_init+0x1b02>
   154ae:	2000      	movs	r0, #0
   154b0:	4b2c      	ldr	r3, [pc, #176]	; (15564 <lv_theme_material_init+0x618>)
   154b2:	4798      	blx	r3
   154b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   154b8:	0040      	lsls	r0, r0, #1
   154ba:	3050      	adds	r0, #80	; 0x50
   154bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   154c0:	f081 82df 	bcs.w	16a82 <lv_theme_material_init+0x1b36>
   154c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   154c6:	2111      	movs	r1, #17
   154c8:	4620      	mov	r0, r4
   154ca:	4b27      	ldr	r3, [pc, #156]	; (15568 <lv_theme_material_init+0x61c>)
   154cc:	4798      	blx	r3
    style_init_reset(&styles->cpicker_bg);
   154ce:	4c23      	ldr	r4, [pc, #140]	; (1555c <lv_theme_material_init+0x610>)
   154d0:	6820      	ldr	r0, [r4, #0]
   154d2:	3038      	adds	r0, #56	; 0x38
   154d4:	4b25      	ldr	r3, [pc, #148]	; (1556c <lv_theme_material_init+0x620>)
   154d6:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   154d8:	6824      	ldr	r4, [r4, #0]
   154da:	3438      	adds	r4, #56	; 0x38
   154dc:	2000      	movs	r0, #0
   154de:	4b21      	ldr	r3, [pc, #132]	; (15564 <lv_theme_material_init+0x618>)
   154e0:	4798      	blx	r3
   154e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   154e6:	0040      	lsls	r0, r0, #1
   154e8:	3050      	adds	r0, #80	; 0x50
   154ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   154ee:	f081 82d6 	bcs.w	16a9e <lv_theme_material_init+0x1b52>
   154f2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   154f4:	21c0      	movs	r1, #192	; 0xc0
   154f6:	4620      	mov	r0, r4
   154f8:	4b1b      	ldr	r3, [pc, #108]	; (15568 <lv_theme_material_init+0x61c>)
   154fa:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   154fc:	4c17      	ldr	r4, [pc, #92]	; (1555c <lv_theme_material_init+0x610>)
   154fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15500:	22ff      	movs	r2, #255	; 0xff
   15502:	212c      	movs	r1, #44	; 0x2c
   15504:	3038      	adds	r0, #56	; 0x38
   15506:	4b1a      	ldr	r3, [pc, #104]	; (15570 <lv_theme_material_init+0x624>)
   15508:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
   1550a:	6820      	ldr	r0, [r4, #0]
   1550c:	6a23      	ldr	r3, [r4, #32]
   1550e:	f013 0302 	ands.w	r3, r3, #2
   15512:	bf14      	ite	ne
   15514:	211d      	movne	r1, #29
   15516:	2108      	moveq	r1, #8
   15518:	2b00      	cmp	r3, #0
   1551a:	bf15      	itete	ne
   1551c:	243b      	movne	r4, #59	; 0x3b
   1551e:	2412      	moveq	r4, #18
   15520:	231e      	movne	r3, #30
   15522:	230b      	moveq	r3, #11
   15524:	f04f 0200 	mov.w	r2, #0
   15528:	f363 0204 	bfi	r2, r3, #0, #5
   1552c:	f364 124a 	bfi	r2, r4, #5, #6
   15530:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15534:	2129      	movs	r1, #41	; 0x29
   15536:	3038      	adds	r0, #56	; 0x38
   15538:	4b07      	ldr	r3, [pc, #28]	; (15558 <lv_theme_material_init+0x60c>)
   1553a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   1553c:	4b07      	ldr	r3, [pc, #28]	; (1555c <lv_theme_material_init+0x610>)
   1553e:	681c      	ldr	r4, [r3, #0]
   15540:	3438      	adds	r4, #56	; 0x38
   15542:	2000      	movs	r0, #0
   15544:	4b07      	ldr	r3, [pc, #28]	; (15564 <lv_theme_material_init+0x618>)
   15546:	4798      	blx	r3
   15548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1554c:	0080      	lsls	r0, r0, #2
   1554e:	3050      	adds	r0, #80	; 0x50
   15550:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15554:	e010      	b.n	15578 <lv_theme_material_init+0x62c>
   15556:	bf00      	nop
   15558:	00006125 	.word	0x00006125
   1555c:	2000abd4 	.word	0x2000abd4
   15560:	0001019d 	.word	0x0001019d
   15564:	00010181 	.word	0x00010181
   15568:	00005ffd 	.word	0x00005ffd
   1556c:	00012f19 	.word	0x00012f19
   15570:	0000624d 	.word	0x0000624d
   15574:	0001b518 	.word	0x0001b518
   15578:	f081 829f 	bcs.w	16aba <lv_theme_material_init+0x1b6e>
   1557c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1557e:	2114      	movs	r1, #20
   15580:	4620      	mov	r0, r4
   15582:	4eb6      	ldr	r6, [pc, #728]	; (1585c <lv_theme_material_init+0x910>)
   15584:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15586:	4cb6      	ldr	r4, [pc, #728]	; (15860 <lv_theme_material_init+0x914>)
   15588:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1558a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1558e:	2101      	movs	r1, #1
   15590:	3038      	adds	r0, #56	; 0x38
   15592:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
   15594:	6820      	ldr	r0, [r4, #0]
   15596:	303c      	adds	r0, #60	; 0x3c
   15598:	4bb2      	ldr	r3, [pc, #712]	; (15864 <lv_theme_material_init+0x918>)
   1559a:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1559c:	6820      	ldr	r0, [r4, #0]
   1559e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   155a2:	2101      	movs	r1, #1
   155a4:	303c      	adds	r0, #60	; 0x3c
   155a6:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   155a8:	6820      	ldr	r0, [r4, #0]
   155aa:	4faf      	ldr	r7, [pc, #700]	; (15868 <lv_theme_material_init+0x91c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   155ac:	883a      	ldrh	r2, [r7, #0]
   155ae:	2129      	movs	r1, #41	; 0x29
   155b0:	303c      	adds	r0, #60	; 0x3c
   155b2:	4dae      	ldr	r5, [pc, #696]	; (1586c <lv_theme_material_init+0x920>)
   155b4:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   155b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   155b8:	22ff      	movs	r2, #255	; 0xff
   155ba:	212c      	movs	r1, #44	; 0x2c
   155bc:	303c      	adds	r0, #60	; 0x3c
   155be:	4bac      	ldr	r3, [pc, #688]	; (15870 <lv_theme_material_init+0x924>)
   155c0:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
   155c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   155c4:	2202      	movs	r2, #2
   155c6:	2130      	movs	r1, #48	; 0x30
   155c8:	303c      	adds	r0, #60	; 0x3c
   155ca:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
   155cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   155ce:	88ba      	ldrh	r2, [r7, #4]
   155d0:	2139      	movs	r1, #57	; 0x39
   155d2:	303c      	adds	r0, #60	; 0x3c
   155d4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
   155d6:	6820      	ldr	r0, [r4, #0]
   155d8:	89a2      	ldrh	r2, [r4, #12]
   155da:	f240 2139 	movw	r1, #569	; 0x239
   155de:	303c      	adds	r0, #60	; 0x3c
   155e0:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
   155e2:	6820      	ldr	r0, [r4, #0]
   155e4:	89e2      	ldrh	r2, [r4, #14]
   155e6:	f240 4139 	movw	r1, #1081	; 0x439
   155ea:	303c      	adds	r0, #60	; 0x3c
   155ec:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   155ee:	6824      	ldr	r4, [r4, #0]
   155f0:	343c      	adds	r4, #60	; 0x3c
   155f2:	2000      	movs	r0, #0
   155f4:	4b9f      	ldr	r3, [pc, #636]	; (15874 <lv_theme_material_init+0x928>)
   155f6:	4798      	blx	r3
   155f8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   155fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15600:	3050      	adds	r0, #80	; 0x50
   15602:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15606:	f081 8266 	bcs.w	16ad6 <lv_theme_material_init+0x1b8a>
   1560a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1560c:	2112      	movs	r1, #18
   1560e:	4620      	mov	r0, r4
   15610:	4b92      	ldr	r3, [pc, #584]	; (1585c <lv_theme_material_init+0x910>)
   15612:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   15614:	4b92      	ldr	r3, [pc, #584]	; (15860 <lv_theme_material_init+0x914>)
   15616:	681c      	ldr	r4, [r3, #0]
   15618:	343c      	adds	r4, #60	; 0x3c
   1561a:	2000      	movs	r0, #0
   1561c:	4b95      	ldr	r3, [pc, #596]	; (15874 <lv_theme_material_init+0x928>)
   1561e:	4798      	blx	r3
   15620:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   15624:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15628:	3050      	adds	r0, #80	; 0x50
   1562a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1562e:	f081 8261 	bcs.w	16af4 <lv_theme_material_init+0x1ba8>
   15632:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15634:	2113      	movs	r1, #19
   15636:	4620      	mov	r0, r4
   15638:	4b88      	ldr	r3, [pc, #544]	; (1585c <lv_theme_material_init+0x910>)
   1563a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   1563c:	4b88      	ldr	r3, [pc, #544]	; (15860 <lv_theme_material_init+0x914>)
   1563e:	681c      	ldr	r4, [r3, #0]
   15640:	343c      	adds	r4, #60	; 0x3c
   15642:	2000      	movs	r0, #0
   15644:	4b8b      	ldr	r3, [pc, #556]	; (15874 <lv_theme_material_init+0x928>)
   15646:	4798      	blx	r3
   15648:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1564c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15650:	3050      	adds	r0, #80	; 0x50
   15652:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15656:	f081 8261 	bcs.w	16b1c <lv_theme_material_init+0x1bd0>
   1565a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1565c:	2110      	movs	r1, #16
   1565e:	4620      	mov	r0, r4
   15660:	4b7e      	ldr	r3, [pc, #504]	; (1585c <lv_theme_material_init+0x910>)
   15662:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   15664:	4b7e      	ldr	r3, [pc, #504]	; (15860 <lv_theme_material_init+0x914>)
   15666:	681c      	ldr	r4, [r3, #0]
   15668:	343c      	adds	r4, #60	; 0x3c
   1566a:	2000      	movs	r0, #0
   1566c:	4b81      	ldr	r3, [pc, #516]	; (15874 <lv_theme_material_init+0x928>)
   1566e:	4798      	blx	r3
   15670:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   15674:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15678:	3050      	adds	r0, #80	; 0x50
   1567a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1567e:	f081 825c 	bcs.w	16b3a <lv_theme_material_init+0x1bee>
   15682:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15684:	2111      	movs	r1, #17
   15686:	4620      	mov	r0, r4
   15688:	4b74      	ldr	r3, [pc, #464]	; (1585c <lv_theme_material_init+0x910>)
   1568a:	4798      	blx	r3
    style_init_reset(&styles->cb_bg);
   1568c:	4c74      	ldr	r4, [pc, #464]	; (15860 <lv_theme_material_init+0x914>)
   1568e:	6820      	ldr	r0, [r4, #0]
   15690:	304c      	adds	r0, #76	; 0x4c
   15692:	4b74      	ldr	r3, [pc, #464]	; (15864 <lv_theme_material_init+0x918>)
   15694:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   15696:	6824      	ldr	r4, [r4, #0]
   15698:	344c      	adds	r4, #76	; 0x4c
   1569a:	2000      	movs	r0, #0
   1569c:	4b75      	ldr	r3, [pc, #468]	; (15874 <lv_theme_material_init+0x928>)
   1569e:	4798      	blx	r3
   156a0:	3014      	adds	r0, #20
   156a2:	0080      	lsls	r0, r0, #2
   156a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   156a8:	f081 8256 	bcs.w	16b58 <lv_theme_material_init+0x1c0c>
   156ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   156ae:	2101      	movs	r1, #1
   156b0:	4620      	mov	r0, r4
   156b2:	4b6a      	ldr	r3, [pc, #424]	; (1585c <lv_theme_material_init+0x910>)
   156b4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   156b6:	4b6a      	ldr	r3, [pc, #424]	; (15860 <lv_theme_material_init+0x914>)
   156b8:	681c      	ldr	r4, [r3, #0]
   156ba:	344c      	adds	r4, #76	; 0x4c
   156bc:	2000      	movs	r0, #0
   156be:	4b6d      	ldr	r3, [pc, #436]	; (15874 <lv_theme_material_init+0x928>)
   156c0:	4798      	blx	r3
   156c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   156c6:	0040      	lsls	r0, r0, #1
   156c8:	3050      	adds	r0, #80	; 0x50
   156ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   156ce:	f081 8250 	bcs.w	16b72 <lv_theme_material_init+0x1c26>
   156d2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   156d4:	2114      	movs	r1, #20
   156d6:	4620      	mov	r0, r4
   156d8:	4b60      	ldr	r3, [pc, #384]	; (1585c <lv_theme_material_init+0x910>)
   156da:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
   156dc:	4c60      	ldr	r4, [pc, #384]	; (15860 <lv_theme_material_init+0x914>)
   156de:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   156e0:	89a2      	ldrh	r2, [r4, #12]
   156e2:	2149      	movs	r1, #73	; 0x49
   156e4:	304c      	adds	r0, #76	; 0x4c
   156e6:	4b61      	ldr	r3, [pc, #388]	; (1586c <lv_theme_material_init+0x920>)
   156e8:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   156ea:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   156ec:	2200      	movs	r2, #0
   156ee:	214c      	movs	r1, #76	; 0x4c
   156f0:	4408      	add	r0, r1
   156f2:	4d5f      	ldr	r5, [pc, #380]	; (15870 <lv_theme_material_init+0x924>)
   156f4:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
   156f6:	6820      	ldr	r0, [r4, #0]
   156f8:	227f      	movs	r2, #127	; 0x7f
   156fa:	f44f 7113 	mov.w	r1, #588	; 0x24c
   156fe:	304c      	adds	r0, #76	; 0x4c
   15700:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   15702:	6824      	ldr	r4, [r4, #0]
   15704:	344c      	adds	r4, #76	; 0x4c
   15706:	2000      	movs	r0, #0
   15708:	4b5a      	ldr	r3, [pc, #360]	; (15874 <lv_theme_material_init+0x928>)
   1570a:	4798      	blx	r3
   1570c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15710:	3050      	adds	r0, #80	; 0x50
   15712:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15716:	f081 823a 	bcs.w	16b8e <lv_theme_material_init+0x1c42>
   1571a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1571c:	2140      	movs	r1, #64	; 0x40
   1571e:	4620      	mov	r0, r4
   15720:	4b4e      	ldr	r3, [pc, #312]	; (1585c <lv_theme_material_init+0x910>)
   15722:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15724:	4b4e      	ldr	r3, [pc, #312]	; (15860 <lv_theme_material_init+0x914>)
   15726:	681c      	ldr	r4, [r3, #0]
   15728:	344c      	adds	r4, #76	; 0x4c
   1572a:	2000      	movs	r0, #0
   1572c:	4b51      	ldr	r3, [pc, #324]	; (15874 <lv_theme_material_init+0x928>)
   1572e:	4798      	blx	r3
   15730:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15734:	0040      	lsls	r0, r0, #1
   15736:	3050      	adds	r0, #80	; 0x50
   15738:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1573c:	f081 8235 	bcs.w	16baa <lv_theme_material_init+0x1c5e>
   15740:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   15742:	2141      	movs	r1, #65	; 0x41
   15744:	4620      	mov	r0, r4
   15746:	4d45      	ldr	r5, [pc, #276]	; (1585c <lv_theme_material_init+0x910>)
   15748:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   1574a:	4c45      	ldr	r4, [pc, #276]	; (15860 <lv_theme_material_init+0x914>)
   1574c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   1574e:	2296      	movs	r2, #150	; 0x96
   15750:	21b0      	movs	r1, #176	; 0xb0
   15752:	304c      	adds	r0, #76	; 0x4c
   15754:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   15756:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15758:	224c      	movs	r2, #76	; 0x4c
   1575a:	21b7      	movs	r1, #183	; 0xb7
   1575c:	4410      	add	r0, r2
   1575e:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
   15760:	6820      	ldr	r0, [r4, #0]
   15762:	3050      	adds	r0, #80	; 0x50
   15764:	4b3f      	ldr	r3, [pc, #252]	; (15864 <lv_theme_material_init+0x918>)
   15766:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
   15768:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   1576a:	2200      	movs	r2, #0
   1576c:	f44f 7113 	mov.w	r1, #588	; 0x24c
   15770:	3050      	adds	r0, #80	; 0x50
   15772:	4b3f      	ldr	r3, [pc, #252]	; (15870 <lv_theme_material_init+0x924>)
   15774:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   15776:	6824      	ldr	r4, [r4, #0]
   15778:	3450      	adds	r4, #80	; 0x50
   1577a:	2000      	movs	r0, #0
   1577c:	4b3d      	ldr	r3, [pc, #244]	; (15874 <lv_theme_material_init+0x928>)
   1577e:	4798      	blx	r3
   15780:	3014      	adds	r0, #20
   15782:	0080      	lsls	r0, r0, #2
   15784:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15788:	f081 821d 	bcs.w	16bc6 <lv_theme_material_init+0x1c7a>
   1578c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1578e:	2101      	movs	r1, #1
   15790:	4620      	mov	r0, r4
   15792:	4b32      	ldr	r3, [pc, #200]	; (1585c <lv_theme_material_init+0x910>)
   15794:	4798      	blx	r3
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
   15796:	4c32      	ldr	r4, [pc, #200]	; (15860 <lv_theme_material_init+0x914>)
   15798:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   1579a:	4a37      	ldr	r2, [pc, #220]	; (15878 <lv_theme_material_init+0x92c>)
   1579c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   157a0:	3050      	adds	r0, #80	; 0x50
   157a2:	4d36      	ldr	r5, [pc, #216]	; (1587c <lv_theme_material_init+0x930>)
   157a4:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
   157a6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
   157a8:	4b2f      	ldr	r3, [pc, #188]	; (15868 <lv_theme_material_init+0x91c>)
   157aa:	881a      	ldrh	r2, [r3, #0]
   157ac:	f240 1169 	movw	r1, #361	; 0x169
   157b0:	3050      	adds	r0, #80	; 0x50
   157b2:	4b2e      	ldr	r3, [pc, #184]	; (1586c <lv_theme_material_init+0x920>)
   157b4:	4798      	blx	r3
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
   157b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   157b8:	6922      	ldr	r2, [r4, #16]
   157ba:	f248 118e 	movw	r1, #33166	; 0x818e
   157be:	3050      	adds	r0, #80	; 0x50
   157c0:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   157c2:	6824      	ldr	r4, [r4, #0]
   157c4:	3450      	adds	r4, #80	; 0x50
   157c6:	2000      	movs	r0, #0
   157c8:	4b2a      	ldr	r3, [pc, #168]	; (15874 <lv_theme_material_init+0x928>)
   157ca:	4798      	blx	r3
   157cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   157d0:	3050      	adds	r0, #80	; 0x50
   157d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   157d6:	f081 8203 	bcs.w	16be0 <lv_theme_material_init+0x1c94>
   157da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   157dc:	2112      	movs	r1, #18
   157de:	4620      	mov	r0, r4
   157e0:	4b1e      	ldr	r3, [pc, #120]	; (1585c <lv_theme_material_init+0x910>)
   157e2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   157e4:	4b1e      	ldr	r3, [pc, #120]	; (15860 <lv_theme_material_init+0x914>)
   157e6:	681c      	ldr	r4, [r3, #0]
   157e8:	3450      	adds	r4, #80	; 0x50
   157ea:	2000      	movs	r0, #0
   157ec:	4b21      	ldr	r3, [pc, #132]	; (15874 <lv_theme_material_init+0x928>)
   157ee:	4798      	blx	r3
   157f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   157f4:	3050      	adds	r0, #80	; 0x50
   157f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   157fa:	f081 81ff 	bcs.w	16bfc <lv_theme_material_init+0x1cb0>
   157fe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15800:	2113      	movs	r1, #19
   15802:	4620      	mov	r0, r4
   15804:	4b15      	ldr	r3, [pc, #84]	; (1585c <lv_theme_material_init+0x910>)
   15806:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   15808:	4b15      	ldr	r3, [pc, #84]	; (15860 <lv_theme_material_init+0x914>)
   1580a:	681c      	ldr	r4, [r3, #0]
   1580c:	3450      	adds	r4, #80	; 0x50
   1580e:	2000      	movs	r0, #0
   15810:	4b18      	ldr	r3, [pc, #96]	; (15874 <lv_theme_material_init+0x928>)
   15812:	4798      	blx	r3
   15814:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15818:	3050      	adds	r0, #80	; 0x50
   1581a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1581e:	f081 81fb 	bcs.w	16c18 <lv_theme_material_init+0x1ccc>
   15822:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15824:	2110      	movs	r1, #16
   15826:	4620      	mov	r0, r4
   15828:	4b0c      	ldr	r3, [pc, #48]	; (1585c <lv_theme_material_init+0x910>)
   1582a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   1582c:	4b0c      	ldr	r3, [pc, #48]	; (15860 <lv_theme_material_init+0x914>)
   1582e:	681c      	ldr	r4, [r3, #0]
   15830:	3450      	adds	r4, #80	; 0x50
   15832:	2000      	movs	r0, #0
   15834:	4b0f      	ldr	r3, [pc, #60]	; (15874 <lv_theme_material_init+0x928>)
   15836:	4798      	blx	r3
   15838:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1583c:	3050      	adds	r0, #80	; 0x50
   1583e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15842:	f081 81f7 	bcs.w	16c34 <lv_theme_material_init+0x1ce8>
   15846:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15848:	2111      	movs	r1, #17
   1584a:	4620      	mov	r0, r4
   1584c:	4d03      	ldr	r5, [pc, #12]	; (1585c <lv_theme_material_init+0x910>)
   1584e:	47a8      	blx	r5
    style_init_reset(&styles->kb_bg);
   15850:	4c03      	ldr	r4, [pc, #12]	; (15860 <lv_theme_material_init+0x914>)
   15852:	6820      	ldr	r0, [r4, #0]
   15854:	3068      	adds	r0, #104	; 0x68
   15856:	4b03      	ldr	r3, [pc, #12]	; (15864 <lv_theme_material_init+0x918>)
   15858:	4798      	blx	r3
   1585a:	e011      	b.n	15880 <lv_theme_material_init+0x934>
   1585c:	00005ffd 	.word	0x00005ffd
   15860:	2000abd4 	.word	0x2000abd4
   15864:	00012f19 	.word	0x00012f19
   15868:	0001b518 	.word	0x0001b518
   1586c:	00006125 	.word	0x00006125
   15870:	0000624d 	.word	0x0000624d
   15874:	00010181 	.word	0x00010181
   15878:	0001b520 	.word	0x0001b520
   1587c:	00006361 	.word	0x00006361
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
   15880:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15882:	2200      	movs	r2, #0
   15884:	2101      	movs	r1, #1
   15886:	3068      	adds	r0, #104	; 0x68
   15888:	47a8      	blx	r5
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   1588a:	6824      	ldr	r4, [r4, #0]
   1588c:	3468      	adds	r4, #104	; 0x68
   1588e:	2000      	movs	r0, #0
   15890:	4bb5      	ldr	r3, [pc, #724]	; (15b68 <lv_theme_material_init+0xc1c>)
   15892:	4798      	blx	r3
   15894:	3014      	adds	r0, #20
   15896:	0080      	lsls	r0, r0, #2
   15898:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1589c:	f081 81d8 	bcs.w	16c50 <lv_theme_material_init+0x1d04>
   158a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   158a2:	2130      	movs	r1, #48	; 0x30
   158a4:	4620      	mov	r0, r4
   158a6:	4db1      	ldr	r5, [pc, #708]	; (15b6c <lv_theme_material_init+0xc20>)
   158a8:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
   158aa:	4cb1      	ldr	r4, [pc, #708]	; (15b70 <lv_theme_material_init+0xc24>)
   158ac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   158ae:	2202      	movs	r2, #2
   158b0:	2131      	movs	r1, #49	; 0x31
   158b2:	3068      	adds	r0, #104	; 0x68
   158b4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   158b6:	6820      	ldr	r0, [r4, #0]
   158b8:	3068      	adds	r0, #104	; 0x68
   158ba:	6a23      	ldr	r3, [r4, #32]
   158bc:	f013 0f02 	tst.w	r3, #2
   158c0:	f041 81d3 	bne.w	16c6a <lv_theme_material_init+0x1d1e>
   158c4:	2300      	movs	r3, #0
   158c6:	4619      	mov	r1, r3
   158c8:	461c      	mov	r4, r3
   158ca:	f04f 0200 	mov.w	r2, #0
   158ce:	f364 0204 	bfi	r2, r4, #0, #5
   158d2:	f361 124a 	bfi	r2, r1, #5, #6
   158d6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   158da:	2139      	movs	r1, #57	; 0x39
   158dc:	4da5      	ldr	r5, [pc, #660]	; (15b74 <lv_theme_material_init+0xc28>)
   158de:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
   158e0:	4ca3      	ldr	r4, [pc, #652]	; (15b70 <lv_theme_material_init+0xc24>)
   158e2:	6820      	ldr	r0, [r4, #0]
   158e4:	89e2      	ldrh	r2, [r4, #14]
   158e6:	f240 4139 	movw	r1, #1081	; 0x439
   158ea:	3068      	adds	r0, #104	; 0x68
   158ec:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   158ee:	6824      	ldr	r4, [r4, #0]
   158f0:	3468      	adds	r4, #104	; 0x68
   158f2:	2000      	movs	r0, #0
   158f4:	4b9c      	ldr	r3, [pc, #624]	; (15b68 <lv_theme_material_init+0xc1c>)
   158f6:	4798      	blx	r3
   158f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   158fc:	3050      	adds	r0, #80	; 0x50
   158fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15902:	f081 81b7 	bcs.w	16c74 <lv_theme_material_init+0x1d28>
   15906:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15908:	2112      	movs	r1, #18
   1590a:	4620      	mov	r0, r4
   1590c:	4b97      	ldr	r3, [pc, #604]	; (15b6c <lv_theme_material_init+0xc20>)
   1590e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   15910:	4b97      	ldr	r3, [pc, #604]	; (15b70 <lv_theme_material_init+0xc24>)
   15912:	681c      	ldr	r4, [r3, #0]
   15914:	3468      	adds	r4, #104	; 0x68
   15916:	2000      	movs	r0, #0
   15918:	4b93      	ldr	r3, [pc, #588]	; (15b68 <lv_theme_material_init+0xc1c>)
   1591a:	4798      	blx	r3
   1591c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15920:	3050      	adds	r0, #80	; 0x50
   15922:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15926:	f081 81b3 	bcs.w	16c90 <lv_theme_material_init+0x1d44>
   1592a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1592c:	2113      	movs	r1, #19
   1592e:	4620      	mov	r0, r4
   15930:	4b8e      	ldr	r3, [pc, #568]	; (15b6c <lv_theme_material_init+0xc20>)
   15932:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   15934:	4b8e      	ldr	r3, [pc, #568]	; (15b70 <lv_theme_material_init+0xc24>)
   15936:	681c      	ldr	r4, [r3, #0]
   15938:	3468      	adds	r4, #104	; 0x68
   1593a:	2000      	movs	r0, #0
   1593c:	4b8a      	ldr	r3, [pc, #552]	; (15b68 <lv_theme_material_init+0xc1c>)
   1593e:	4798      	blx	r3
   15940:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15944:	3050      	adds	r0, #80	; 0x50
   15946:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1594a:	f081 81af 	bcs.w	16cac <lv_theme_material_init+0x1d60>
   1594e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15950:	2110      	movs	r1, #16
   15952:	4620      	mov	r0, r4
   15954:	4b85      	ldr	r3, [pc, #532]	; (15b6c <lv_theme_material_init+0xc20>)
   15956:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   15958:	4b85      	ldr	r3, [pc, #532]	; (15b70 <lv_theme_material_init+0xc24>)
   1595a:	681c      	ldr	r4, [r3, #0]
   1595c:	3468      	adds	r4, #104	; 0x68
   1595e:	2000      	movs	r0, #0
   15960:	4b81      	ldr	r3, [pc, #516]	; (15b68 <lv_theme_material_init+0xc1c>)
   15962:	4798      	blx	r3
   15964:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15968:	3050      	adds	r0, #80	; 0x50
   1596a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1596e:	f081 81ab 	bcs.w	16cc8 <lv_theme_material_init+0x1d7c>
   15972:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15974:	2111      	movs	r1, #17
   15976:	4620      	mov	r0, r4
   15978:	4b7c      	ldr	r3, [pc, #496]	; (15b6c <lv_theme_material_init+0xc20>)
   1597a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   1597c:	4b7c      	ldr	r3, [pc, #496]	; (15b70 <lv_theme_material_init+0xc24>)
   1597e:	681c      	ldr	r4, [r3, #0]
   15980:	3468      	adds	r4, #104	; 0x68
   15982:	2000      	movs	r0, #0
   15984:	4b78      	ldr	r3, [pc, #480]	; (15b68 <lv_theme_material_init+0xc1c>)
   15986:	4798      	blx	r3
   15988:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1598c:	3050      	adds	r0, #80	; 0x50
   1598e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15992:	f081 81a7 	bcs.w	16ce4 <lv_theme_material_init+0x1d98>
   15996:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15998:	2114      	movs	r1, #20
   1599a:	4620      	mov	r0, r4
   1599c:	4b73      	ldr	r3, [pc, #460]	; (15b6c <lv_theme_material_init+0xc20>)
   1599e:	4798      	blx	r3
    style_init_reset(&styles->mbox_bg);
   159a0:	4c73      	ldr	r4, [pc, #460]	; (15b70 <lv_theme_material_init+0xc24>)
   159a2:	6820      	ldr	r0, [r4, #0]
   159a4:	307c      	adds	r0, #124	; 0x7c
   159a6:	4b74      	ldr	r3, [pc, #464]	; (15b78 <lv_theme_material_init+0xc2c>)
   159a8:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   159aa:	6824      	ldr	r4, [r4, #0]
   159ac:	347c      	adds	r4, #124	; 0x7c
   159ae:	2000      	movs	r0, #0
   159b0:	4b6d      	ldr	r3, [pc, #436]	; (15b68 <lv_theme_material_init+0xc1c>)
   159b2:	4798      	blx	r3
   159b4:	2332      	movs	r3, #50	; 0x32
   159b6:	fb03 f000 	mul.w	r0, r3, r0
   159ba:	3050      	adds	r0, #80	; 0x50
   159bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   159c0:	f081 819e 	bcs.w	16d00 <lv_theme_material_init+0x1db4>
   159c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   159c6:	2150      	movs	r1, #80	; 0x50
   159c8:	4620      	mov	r0, r4
   159ca:	4b68      	ldr	r3, [pc, #416]	; (15b6c <lv_theme_material_init+0xc20>)
   159cc:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
   159ce:	4b68      	ldr	r3, [pc, #416]	; (15b70 <lv_theme_material_init+0xc24>)
   159d0:	6818      	ldr	r0, [r3, #0]
   159d2:	6a1b      	ldr	r3, [r3, #32]
   159d4:	f013 0302 	ands.w	r3, r3, #2
   159d8:	bf0c      	ite	eq
   159da:	2126      	moveq	r1, #38	; 0x26
   159dc:	2130      	movne	r1, #48	; 0x30
   159de:	2b00      	cmp	r3, #0
   159e0:	bf0c      	ite	eq
   159e2:	2313      	moveq	r3, #19
   159e4:	2318      	movne	r3, #24
   159e6:	f04f 0200 	mov.w	r2, #0
   159ea:	f363 0204 	bfi	r2, r3, #0, #5
   159ee:	f361 124a 	bfi	r2, r1, #5, #6
   159f2:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   159f6:	2159      	movs	r1, #89	; 0x59
   159f8:	307c      	adds	r0, #124	; 0x7c
   159fa:	4b5e      	ldr	r3, [pc, #376]	; (15b74 <lv_theme_material_init+0xc28>)
   159fc:	4798      	blx	r3
    style_init_reset(&styles->sb);
   159fe:	4c5c      	ldr	r4, [pc, #368]	; (15b70 <lv_theme_material_init+0xc24>)
   15a00:	6820      	ldr	r0, [r4, #0]
   15a02:	3080      	adds	r0, #128	; 0x80
   15a04:	4b5c      	ldr	r3, [pc, #368]	; (15b78 <lv_theme_material_init+0xc2c>)
   15a06:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
   15a08:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15a0a:	22ff      	movs	r2, #255	; 0xff
   15a0c:	212c      	movs	r1, #44	; 0x2c
   15a0e:	3080      	adds	r0, #128	; 0x80
   15a10:	4b5a      	ldr	r3, [pc, #360]	; (15b7c <lv_theme_material_init+0xc30>)
   15a12:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
   15a14:	6820      	ldr	r0, [r4, #0]
   15a16:	6a23      	ldr	r3, [r4, #32]
   15a18:	f013 0302 	ands.w	r3, r3, #2
   15a1c:	bf14      	ite	ne
   15a1e:	2119      	movne	r1, #25
   15a20:	210e      	moveq	r1, #14
   15a22:	2b00      	cmp	r3, #0
   15a24:	bf15      	itete	ne
   15a26:	2433      	movne	r4, #51	; 0x33
   15a28:	241f      	moveq	r4, #31
   15a2a:	231a      	movne	r3, #26
   15a2c:	2310      	moveq	r3, #16
   15a2e:	f04f 0200 	mov.w	r2, #0
   15a32:	f363 0204 	bfi	r2, r3, #0, #5
   15a36:	f364 124a 	bfi	r2, r4, #5, #6
   15a3a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15a3e:	2129      	movs	r1, #41	; 0x29
   15a40:	3080      	adds	r0, #128	; 0x80
   15a42:	4b4c      	ldr	r3, [pc, #304]	; (15b74 <lv_theme_material_init+0xc28>)
   15a44:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15a46:	4c4a      	ldr	r4, [pc, #296]	; (15b70 <lv_theme_material_init+0xc24>)
   15a48:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15a4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15a4e:	2101      	movs	r1, #1
   15a50:	3080      	adds	r0, #128	; 0x80
   15a52:	4b46      	ldr	r3, [pc, #280]	; (15b6c <lv_theme_material_init+0xc20>)
   15a54:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   15a56:	6824      	ldr	r4, [r4, #0]
   15a58:	3480      	adds	r4, #128	; 0x80
   15a5a:	2000      	movs	r0, #0
   15a5c:	4b42      	ldr	r3, [pc, #264]	; (15b68 <lv_theme_material_init+0xc1c>)
   15a5e:	4798      	blx	r3
   15a60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15a64:	3050      	adds	r0, #80	; 0x50
   15a66:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15a6a:	f081 8157 	bcs.w	16d1c <lv_theme_material_init+0x1dd0>
   15a6e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   15a70:	2103      	movs	r1, #3
   15a72:	4620      	mov	r0, r4
   15a74:	4b3d      	ldr	r3, [pc, #244]	; (15b6c <lv_theme_material_init+0xc20>)
   15a76:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   15a78:	4b3d      	ldr	r3, [pc, #244]	; (15b70 <lv_theme_material_init+0xc24>)
   15a7a:	681c      	ldr	r4, [r3, #0]
   15a7c:	3480      	adds	r4, #128	; 0x80
   15a7e:	2000      	movs	r0, #0
   15a80:	4b39      	ldr	r3, [pc, #228]	; (15b68 <lv_theme_material_init+0xc1c>)
   15a82:	4798      	blx	r3
   15a84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15a88:	3050      	adds	r0, #80	; 0x50
   15a8a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15a8e:	f081 8153 	bcs.w	16d38 <lv_theme_material_init+0x1dec>
   15a92:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15a94:	2113      	movs	r1, #19
   15a96:	4620      	mov	r0, r4
   15a98:	4b34      	ldr	r3, [pc, #208]	; (15b6c <lv_theme_material_init+0xc20>)
   15a9a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   15a9c:	4b34      	ldr	r3, [pc, #208]	; (15b70 <lv_theme_material_init+0xc24>)
   15a9e:	681c      	ldr	r4, [r3, #0]
   15aa0:	3480      	adds	r4, #128	; 0x80
   15aa2:	2000      	movs	r0, #0
   15aa4:	4b30      	ldr	r3, [pc, #192]	; (15b68 <lv_theme_material_init+0xc1c>)
   15aa6:	4798      	blx	r3
   15aa8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15aac:	3050      	adds	r0, #80	; 0x50
   15aae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15ab2:	f081 814f 	bcs.w	16d54 <lv_theme_material_init+0x1e08>
   15ab6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15ab8:	2111      	movs	r1, #17
   15aba:	4620      	mov	r0, r4
   15abc:	4b2b      	ldr	r3, [pc, #172]	; (15b6c <lv_theme_material_init+0xc20>)
   15abe:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
   15ac0:	4c2b      	ldr	r4, [pc, #172]	; (15b70 <lv_theme_material_init+0xc24>)
   15ac2:	6820      	ldr	r0, [r4, #0]
   15ac4:	3084      	adds	r0, #132	; 0x84
   15ac6:	4d2c      	ldr	r5, [pc, #176]	; (15b78 <lv_theme_material_init+0xc2c>)
   15ac8:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
   15aca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15acc:	22ff      	movs	r2, #255	; 0xff
   15ace:	212c      	movs	r1, #44	; 0x2c
   15ad0:	3084      	adds	r0, #132	; 0x84
   15ad2:	4b2a      	ldr	r3, [pc, #168]	; (15b7c <lv_theme_material_init+0xc30>)
   15ad4:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
   15ad6:	6820      	ldr	r0, [r4, #0]
   15ad8:	2311      	movs	r3, #17
   15ada:	f04f 0200 	mov.w	r2, #0
   15ade:	f363 0204 	bfi	r2, r3, #0, #5
   15ae2:	2122      	movs	r1, #34	; 0x22
   15ae4:	f361 124a 	bfi	r2, r1, #5, #6
   15ae8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15aec:	2129      	movs	r1, #41	; 0x29
   15aee:	3084      	adds	r0, #132	; 0x84
   15af0:	4b20      	ldr	r3, [pc, #128]	; (15b74 <lv_theme_material_init+0xc28>)
   15af2:	4798      	blx	r3
    style_init_reset(&styles->ta_cursor);
   15af4:	6820      	ldr	r0, [r4, #0]
   15af6:	30b4      	adds	r0, #180	; 0xb4
   15af8:	47a8      	blx	r5
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   15afa:	6820      	ldr	r0, [r4, #0]
   15afc:	6a23      	ldr	r3, [r4, #32]
   15afe:	f013 0302 	ands.w	r3, r3, #2
   15b02:	bf14      	ite	ne
   15b04:	2106      	movne	r1, #6
   15b06:	2114      	moveq	r1, #20
   15b08:	2b00      	cmp	r3, #0
   15b0a:	bf15      	itete	ne
   15b0c:	2410      	movne	r4, #16
   15b0e:	242a      	moveq	r4, #42	; 0x2a
   15b10:	2309      	movne	r3, #9
   15b12:	2315      	moveq	r3, #21
   15b14:	f04f 0200 	mov.w	r2, #0
   15b18:	f363 0204 	bfi	r2, r3, #0, #5
   15b1c:	f364 124a 	bfi	r2, r4, #5, #6
   15b20:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15b24:	2139      	movs	r1, #57	; 0x39
   15b26:	30b4      	adds	r0, #180	; 0xb4
   15b28:	4b12      	ldr	r3, [pc, #72]	; (15b74 <lv_theme_material_init+0xc28>)
   15b2a:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   15b2c:	4b10      	ldr	r3, [pc, #64]	; (15b70 <lv_theme_material_init+0xc24>)
   15b2e:	681c      	ldr	r4, [r3, #0]
   15b30:	34b4      	adds	r4, #180	; 0xb4
   15b32:	2000      	movs	r0, #0
   15b34:	4b0c      	ldr	r3, [pc, #48]	; (15b68 <lv_theme_material_init+0xc1c>)
   15b36:	4798      	blx	r3
   15b38:	3028      	adds	r0, #40	; 0x28
   15b3a:	0040      	lsls	r0, r0, #1
   15b3c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15b40:	f081 8116 	bcs.w	16d70 <lv_theme_material_init+0x1e24>
   15b44:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15b46:	2130      	movs	r1, #48	; 0x30
   15b48:	4620      	mov	r0, r4
   15b4a:	4b08      	ldr	r3, [pc, #32]	; (15b6c <lv_theme_material_init+0xc20>)
   15b4c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   15b4e:	4b08      	ldr	r3, [pc, #32]	; (15b70 <lv_theme_material_init+0xc24>)
   15b50:	681c      	ldr	r4, [r3, #0]
   15b52:	34b4      	adds	r4, #180	; 0xb4
   15b54:	2000      	movs	r0, #0
   15b56:	4b04      	ldr	r3, [pc, #16]	; (15b68 <lv_theme_material_init+0xc1c>)
   15b58:	4798      	blx	r3
   15b5a:	3050      	adds	r0, #80	; 0x50
   15b5c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15b60:	f081 8113 	bcs.w	16d8a <lv_theme_material_init+0x1e3e>
   15b64:	2201      	movs	r2, #1
   15b66:	e00b      	b.n	15b80 <lv_theme_material_init+0xc34>
   15b68:	00010181 	.word	0x00010181
   15b6c:	00005ffd 	.word	0x00005ffd
   15b70:	2000abd4 	.word	0x2000abd4
   15b74:	00006125 	.word	0x00006125
   15b78:	00012f19 	.word	0x00012f19
   15b7c:	0000624d 	.word	0x0000624d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15b80:	2112      	movs	r1, #18
   15b82:	4620      	mov	r0, r4
   15b84:	4dba      	ldr	r5, [pc, #744]	; (15e70 <lv_theme_material_init+0xf24>)
   15b86:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
   15b88:	4cba      	ldr	r4, [pc, #744]	; (15e74 <lv_theme_material_init+0xf28>)
   15b8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15b8c:	2204      	movs	r2, #4
   15b8e:	2131      	movs	r1, #49	; 0x31
   15b90:	30b4      	adds	r0, #180	; 0xb4
   15b92:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
   15b94:	6820      	ldr	r0, [r4, #0]
   15b96:	30b8      	adds	r0, #184	; 0xb8
   15b98:	4bb7      	ldr	r3, [pc, #732]	; (15e78 <lv_theme_material_init+0xf2c>)
   15b9a:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   15b9c:	6820      	ldr	r0, [r4, #0]
   15b9e:	30b8      	adds	r0, #184	; 0xb8
   15ba0:	6a23      	ldr	r3, [r4, #32]
   15ba2:	f013 0f02 	tst.w	r3, #2
   15ba6:	f041 80fc 	bne.w	16da2 <lv_theme_material_init+0x1e56>
   15baa:	2314      	movs	r3, #20
   15bac:	212b      	movs	r1, #43	; 0x2b
   15bae:	2417      	movs	r4, #23
   15bb0:	f04f 0200 	mov.w	r2, #0
   15bb4:	f364 0204 	bfi	r2, r4, #0, #5
   15bb8:	f361 124a 	bfi	r2, r1, #5, #6
   15bbc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15bc0:	f248 0189 	movw	r1, #32905	; 0x8089
   15bc4:	4dad      	ldr	r5, [pc, #692]	; (15e7c <lv_theme_material_init+0xf30>)
   15bc6:	47a8      	blx	r5
    style_init_reset(&styles->spinbox_cursor);
   15bc8:	4caa      	ldr	r4, [pc, #680]	; (15e74 <lv_theme_material_init+0xf28>)
   15bca:	6820      	ldr	r0, [r4, #0]
   15bcc:	3098      	adds	r0, #152	; 0x98
   15bce:	4baa      	ldr	r3, [pc, #680]	; (15e78 <lv_theme_material_init+0xf2c>)
   15bd0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
   15bd2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15bd4:	22ff      	movs	r2, #255	; 0xff
   15bd6:	212c      	movs	r1, #44	; 0x2c
   15bd8:	3098      	adds	r0, #152	; 0x98
   15bda:	4ba9      	ldr	r3, [pc, #676]	; (15e80 <lv_theme_material_init+0xf34>)
   15bdc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
   15bde:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15be0:	89a2      	ldrh	r2, [r4, #12]
   15be2:	2129      	movs	r1, #41	; 0x29
   15be4:	3098      	adds	r0, #152	; 0x98
   15be6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   15be8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15bea:	4ba6      	ldr	r3, [pc, #664]	; (15e84 <lv_theme_material_init+0xf38>)
   15bec:	881a      	ldrh	r2, [r3, #0]
   15bee:	f248 0189 	movw	r1, #32905	; 0x8089
   15bf2:	3098      	adds	r0, #152	; 0x98
   15bf4:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   15bf6:	6824      	ldr	r4, [r4, #0]
   15bf8:	3498      	adds	r4, #152	; 0x98
   15bfa:	2000      	movs	r0, #0
   15bfc:	4ba2      	ldr	r3, [pc, #648]	; (15e88 <lv_theme_material_init+0xf3c>)
   15bfe:	4798      	blx	r3
   15c00:	2364      	movs	r3, #100	; 0x64
   15c02:	fb03 f000 	mul.w	r0, r3, r0
   15c06:	3050      	adds	r0, #80	; 0x50
   15c08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c0c:	f081 80ce 	bcs.w	16dac <lv_theme_material_init+0x1e60>
   15c10:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15c12:	2110      	movs	r1, #16
   15c14:	4620      	mov	r0, r4
   15c16:	4b96      	ldr	r3, [pc, #600]	; (15e70 <lv_theme_material_init+0xf24>)
   15c18:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   15c1a:	4b96      	ldr	r3, [pc, #600]	; (15e74 <lv_theme_material_init+0xf28>)
   15c1c:	681c      	ldr	r4, [r3, #0]
   15c1e:	3498      	adds	r4, #152	; 0x98
   15c20:	2000      	movs	r0, #0
   15c22:	4b99      	ldr	r3, [pc, #612]	; (15e88 <lv_theme_material_init+0xf3c>)
   15c24:	4798      	blx	r3
   15c26:	2364      	movs	r3, #100	; 0x64
   15c28:	fb03 f000 	mul.w	r0, r3, r0
   15c2c:	3050      	adds	r0, #80	; 0x50
   15c2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c32:	f081 80c9 	bcs.w	16dc8 <lv_theme_material_init+0x1e7c>
   15c36:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15c38:	2111      	movs	r1, #17
   15c3a:	4620      	mov	r0, r4
   15c3c:	4d8c      	ldr	r5, [pc, #560]	; (15e70 <lv_theme_material_init+0xf24>)
   15c3e:	47a8      	blx	r5
    style_init_reset(&styles->list_bg);
   15c40:	4c8c      	ldr	r4, [pc, #560]	; (15e74 <lv_theme_material_init+0xf28>)
   15c42:	6820      	ldr	r0, [r4, #0]
   15c44:	3074      	adds	r0, #116	; 0x74
   15c46:	4e8c      	ldr	r6, [pc, #560]	; (15e78 <lv_theme_material_init+0xf2c>)
   15c48:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
   15c4a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   15c4c:	2201      	movs	r2, #1
   15c4e:	2102      	movs	r1, #2
   15c50:	3074      	adds	r0, #116	; 0x74
   15c52:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15c54:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15c56:	2200      	movs	r2, #0
   15c58:	2112      	movs	r1, #18
   15c5a:	3074      	adds	r0, #116	; 0x74
   15c5c:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15c5e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15c60:	2200      	movs	r2, #0
   15c62:	2113      	movs	r1, #19
   15c64:	3074      	adds	r0, #116	; 0x74
   15c66:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15c68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15c6a:	2200      	movs	r2, #0
   15c6c:	2110      	movs	r1, #16
   15c6e:	3074      	adds	r0, #116	; 0x74
   15c70:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15c72:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15c74:	2200      	movs	r2, #0
   15c76:	2111      	movs	r1, #17
   15c78:	3074      	adds	r0, #116	; 0x74
   15c7a:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
   15c7c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15c7e:	2200      	movs	r2, #0
   15c80:	2114      	movs	r1, #20
   15c82:	3074      	adds	r0, #116	; 0x74
   15c84:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
   15c86:	6820      	ldr	r0, [r4, #0]
   15c88:	3078      	adds	r0, #120	; 0x78
   15c8a:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   15c8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15c8e:	22ff      	movs	r2, #255	; 0xff
   15c90:	212c      	movs	r1, #44	; 0x2c
   15c92:	3078      	adds	r0, #120	; 0x78
   15c94:	4b7a      	ldr	r3, [pc, #488]	; (15e80 <lv_theme_material_init+0xf34>)
   15c96:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   15c98:	6820      	ldr	r0, [r4, #0]
   15c9a:	3078      	adds	r0, #120	; 0x78
   15c9c:	6a23      	ldr	r3, [r4, #32]
   15c9e:	f013 0f02 	tst.w	r3, #2
   15ca2:	f041 809f 	bne.w	16de4 <lv_theme_material_init+0x1e98>
   15ca6:	230b      	movs	r3, #11
   15ca8:	2118      	movs	r1, #24
   15caa:	240e      	movs	r4, #14
   15cac:	f04f 0200 	mov.w	r2, #0
   15cb0:	f364 0204 	bfi	r2, r4, #0, #5
   15cb4:	f361 124a 	bfi	r2, r1, #5, #6
   15cb8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15cbc:	2129      	movs	r1, #41	; 0x29
   15cbe:	4b6f      	ldr	r3, [pc, #444]	; (15e7c <lv_theme_material_init+0xf30>)
   15cc0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   15cc2:	4b6c      	ldr	r3, [pc, #432]	; (15e74 <lv_theme_material_init+0xf28>)
   15cc4:	6818      	ldr	r0, [r3, #0]
   15cc6:	3078      	adds	r0, #120	; 0x78
   15cc8:	6a1b      	ldr	r3, [r3, #32]
   15cca:	f013 0f02 	tst.w	r3, #2
   15cce:	f041 808e 	bne.w	16dee <lv_theme_material_init+0x1ea2>
   15cd2:	2309      	movs	r3, #9
   15cd4:	2113      	movs	r1, #19
   15cd6:	240a      	movs	r4, #10
   15cd8:	f04f 0200 	mov.w	r2, #0
   15cdc:	f364 0204 	bfi	r2, r4, #0, #5
   15ce0:	f361 124a 	bfi	r2, r1, #5, #6
   15ce4:	f363 22cf 	bfi	r2, r3, #11, #5
   15ce8:	f241 0129 	movw	r1, #4137	; 0x1029
   15cec:	4b63      	ldr	r3, [pc, #396]	; (15e7c <lv_theme_material_init+0xf30>)
   15cee:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   15cf0:	4b60      	ldr	r3, [pc, #384]	; (15e74 <lv_theme_material_init+0xf28>)
   15cf2:	6818      	ldr	r0, [r3, #0]
   15cf4:	3078      	adds	r0, #120	; 0x78
   15cf6:	6a1b      	ldr	r3, [r3, #32]
   15cf8:	f013 0f02 	tst.w	r3, #2
   15cfc:	f041 807c 	bne.w	16df8 <lv_theme_material_init+0x1eac>
   15d00:	230b      	movs	r3, #11
   15d02:	2118      	movs	r1, #24
   15d04:	240e      	movs	r4, #14
   15d06:	f04f 0200 	mov.w	r2, #0
   15d0a:	f364 0204 	bfi	r2, r4, #0, #5
   15d0e:	f361 124a 	bfi	r2, r1, #5, #6
   15d12:	f363 22cf 	bfi	r2, r3, #11, #5
   15d16:	f242 0129 	movw	r1, #8233	; 0x2029
   15d1a:	4d58      	ldr	r5, [pc, #352]	; (15e7c <lv_theme_material_init+0xf30>)
   15d1c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
   15d1e:	4c55      	ldr	r4, [pc, #340]	; (15e74 <lv_theme_material_init+0xf28>)
   15d20:	6820      	ldr	r0, [r4, #0]
   15d22:	89a2      	ldrh	r2, [r4, #12]
   15d24:	f240 1129 	movw	r1, #297	; 0x129
   15d28:	3078      	adds	r0, #120	; 0x78
   15d2a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
   15d2c:	6826      	ldr	r6, [r4, #0]
   15d2e:	3678      	adds	r6, #120	; 0x78
   15d30:	2133      	movs	r1, #51	; 0x33
   15d32:	89a0      	ldrh	r0, [r4, #12]
   15d34:	4b55      	ldr	r3, [pc, #340]	; (15e8c <lv_theme_material_init+0xf40>)
   15d36:	4798      	blx	r3
   15d38:	4602      	mov	r2, r0
   15d3a:	f241 1129 	movw	r1, #4393	; 0x1129
   15d3e:	4630      	mov	r0, r6
   15d40:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   15d42:	6820      	ldr	r0, [r4, #0]
   15d44:	3078      	adds	r0, #120	; 0x78
   15d46:	6a23      	ldr	r3, [r4, #32]
   15d48:	f013 0f02 	tst.w	r3, #2
   15d4c:	f041 8059 	bne.w	16e02 <lv_theme_material_init+0x1eb6>
   15d50:	231f      	movs	r3, #31
   15d52:	213f      	movs	r1, #63	; 0x3f
   15d54:	461c      	mov	r4, r3
   15d56:	f04f 0200 	mov.w	r2, #0
   15d5a:	f364 0204 	bfi	r2, r4, #0, #5
   15d5e:	f361 124a 	bfi	r2, r1, #5, #6
   15d62:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15d66:	f248 0189 	movw	r1, #32905	; 0x8089
   15d6a:	4d44      	ldr	r5, [pc, #272]	; (15e7c <lv_theme_material_init+0xf30>)
   15d6c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   15d6e:	4c41      	ldr	r4, [pc, #260]	; (15e74 <lv_theme_material_init+0xf28>)
   15d70:	6820      	ldr	r0, [r4, #0]
   15d72:	f04f 32ff 	mov.w	r2, #4294967295
   15d76:	f248 1189 	movw	r1, #33161	; 0x8189
   15d7a:	3078      	adds	r0, #120	; 0x78
   15d7c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   15d7e:	6820      	ldr	r0, [r4, #0]
   15d80:	6a23      	ldr	r3, [r4, #32]
   15d82:	f013 0302 	ands.w	r3, r3, #2
   15d86:	bf14      	ite	ne
   15d88:	212a      	movne	r1, #42	; 0x2a
   15d8a:	2126      	moveq	r1, #38	; 0x26
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	bf14      	ite	ne
   15d90:	2315      	movne	r3, #21
   15d92:	2313      	moveq	r3, #19
   15d94:	f04f 0200 	mov.w	r2, #0
   15d98:	f363 0204 	bfi	r2, r3, #0, #5
   15d9c:	f361 124a 	bfi	r2, r1, #5, #6
   15da0:	f363 22cf 	bfi	r2, r3, #11, #5
   15da4:	f24a 0189 	movw	r1, #41097	; 0xa089
   15da8:	3078      	adds	r0, #120	; 0x78
   15daa:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   15dac:	6820      	ldr	r0, [r4, #0]
   15dae:	3078      	adds	r0, #120	; 0x78
   15db0:	6a23      	ldr	r3, [r4, #32]
   15db2:	f013 0f02 	tst.w	r3, #2
   15db6:	f041 8029 	bne.w	16e0c <lv_theme_material_init+0x1ec0>
   15dba:	231f      	movs	r3, #31
   15dbc:	213f      	movs	r1, #63	; 0x3f
   15dbe:	461c      	mov	r4, r3
   15dc0:	f04f 0200 	mov.w	r2, #0
   15dc4:	f364 0204 	bfi	r2, r4, #0, #5
   15dc8:	f361 124a 	bfi	r2, r1, #5, #6
   15dcc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   15dd0:	f248 01a9 	movw	r1, #32937	; 0x80a9
   15dd4:	4d29      	ldr	r5, [pc, #164]	; (15e7c <lv_theme_material_init+0xf30>)
   15dd6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   15dd8:	4c26      	ldr	r4, [pc, #152]	; (15e74 <lv_theme_material_init+0xf28>)
   15dda:	6820      	ldr	r0, [r4, #0]
   15ddc:	f04f 32ff 	mov.w	r2, #4294967295
   15de0:	f248 11a9 	movw	r1, #33193	; 0x81a9
   15de4:	3078      	adds	r0, #120	; 0x78
   15de6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   15de8:	6820      	ldr	r0, [r4, #0]
   15dea:	6a23      	ldr	r3, [r4, #32]
   15dec:	f013 0302 	ands.w	r3, r3, #2
   15df0:	bf14      	ite	ne
   15df2:	212a      	movne	r1, #42	; 0x2a
   15df4:	2126      	moveq	r1, #38	; 0x26
   15df6:	2b00      	cmp	r3, #0
   15df8:	bf14      	ite	ne
   15dfa:	2315      	movne	r3, #21
   15dfc:	2313      	moveq	r3, #19
   15dfe:	f04f 0200 	mov.w	r2, #0
   15e02:	f363 0204 	bfi	r2, r3, #0, #5
   15e06:	f361 124a 	bfi	r2, r1, #5, #6
   15e0a:	f363 22cf 	bfi	r2, r3, #11, #5
   15e0e:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   15e12:	3078      	adds	r0, #120	; 0x78
   15e14:	47a8      	blx	r5
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   15e16:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15e18:	2201      	movs	r2, #1
   15e1a:	2131      	movs	r1, #49	; 0x31
   15e1c:	3078      	adds	r0, #120	; 0x78
   15e1e:	4b14      	ldr	r3, [pc, #80]	; (15e70 <lv_theme_material_init+0xf24>)
   15e20:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   15e22:	6820      	ldr	r0, [r4, #0]
   15e24:	6a23      	ldr	r3, [r4, #32]
   15e26:	f013 0302 	ands.w	r3, r3, #2
   15e2a:	bf14      	ite	ne
   15e2c:	211a      	movne	r1, #26
   15e2e:	2110      	moveq	r1, #16
   15e30:	2b00      	cmp	r3, #0
   15e32:	bf15      	itete	ne
   15e34:	2437      	movne	r4, #55	; 0x37
   15e36:	2422      	moveq	r4, #34	; 0x22
   15e38:	231c      	movne	r3, #28
   15e3a:	2312      	moveq	r3, #18
   15e3c:	f04f 0200 	mov.w	r2, #0
   15e40:	f363 0204 	bfi	r2, r3, #0, #5
   15e44:	f364 124a 	bfi	r2, r4, #5, #6
   15e48:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15e4c:	2139      	movs	r1, #57	; 0x39
   15e4e:	3078      	adds	r0, #120	; 0x78
   15e50:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
   15e52:	4c08      	ldr	r4, [pc, #32]	; (15e74 <lv_theme_material_init+0xf28>)
   15e54:	6820      	ldr	r0, [r4, #0]
   15e56:	89a2      	ldrh	r2, [r4, #12]
   15e58:	f240 2139 	movw	r1, #569	; 0x239
   15e5c:	3078      	adds	r0, #120	; 0x78
   15e5e:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
   15e60:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15e62:	2201      	movs	r2, #1
   15e64:	2130      	movs	r1, #48	; 0x30
   15e66:	3078      	adds	r0, #120	; 0x78
   15e68:	4b01      	ldr	r3, [pc, #4]	; (15e70 <lv_theme_material_init+0xf24>)
   15e6a:	4798      	blx	r3
   15e6c:	e010      	b.n	15e90 <lv_theme_material_init+0xf44>
   15e6e:	bf00      	nop
   15e70:	00005ffd 	.word	0x00005ffd
   15e74:	2000abd4 	.word	0x2000abd4
   15e78:	00012f19 	.word	0x00012f19
   15e7c:	00006125 	.word	0x00006125
   15e80:	0000624d 	.word	0x0000624d
   15e84:	0001b518 	.word	0x0001b518
   15e88:	00010181 	.word	0x00010181
   15e8c:	00010dc7 	.word	0x00010dc7
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15e90:	6824      	ldr	r4, [r4, #0]
   15e92:	3478      	adds	r4, #120	; 0x78
   15e94:	2000      	movs	r0, #0
   15e96:	4bba      	ldr	r3, [pc, #744]	; (16180 <lv_theme_material_init+0x1234>)
   15e98:	4798      	blx	r3
   15e9a:	2801      	cmp	r0, #1
   15e9c:	f240 87bb 	bls.w	16e16 <lv_theme_material_init+0x1eca>
   15ea0:	2000      	movs	r0, #0
   15ea2:	4bb8      	ldr	r3, [pc, #736]	; (16184 <lv_theme_material_init+0x1238>)
   15ea4:	4798      	blx	r3
   15ea6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15eaa:	0040      	lsls	r0, r0, #1
   15eac:	3050      	adds	r0, #80	; 0x50
   15eae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15eb2:	f080 87ca 	bcs.w	16e4a <lv_theme_material_init+0x1efe>
   15eb6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15eb8:	2112      	movs	r1, #18
   15eba:	4620      	mov	r0, r4
   15ebc:	4bb2      	ldr	r3, [pc, #712]	; (16188 <lv_theme_material_init+0x123c>)
   15ebe:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15ec0:	4bb2      	ldr	r3, [pc, #712]	; (1618c <lv_theme_material_init+0x1240>)
   15ec2:	681c      	ldr	r4, [r3, #0]
   15ec4:	3478      	adds	r4, #120	; 0x78
   15ec6:	2000      	movs	r0, #0
   15ec8:	4bad      	ldr	r3, [pc, #692]	; (16180 <lv_theme_material_init+0x1234>)
   15eca:	4798      	blx	r3
   15ecc:	2801      	cmp	r0, #1
   15ece:	f240 87cf 	bls.w	16e70 <lv_theme_material_init+0x1f24>
   15ed2:	2000      	movs	r0, #0
   15ed4:	4bab      	ldr	r3, [pc, #684]	; (16184 <lv_theme_material_init+0x1238>)
   15ed6:	4798      	blx	r3
   15ed8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15edc:	0040      	lsls	r0, r0, #1
   15ede:	3050      	adds	r0, #80	; 0x50
   15ee0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15ee4:	f080 87de 	bcs.w	16ea4 <lv_theme_material_init+0x1f58>
   15ee8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15eea:	2113      	movs	r1, #19
   15eec:	4620      	mov	r0, r4
   15eee:	4ba6      	ldr	r3, [pc, #664]	; (16188 <lv_theme_material_init+0x123c>)
   15ef0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15ef2:	4ba6      	ldr	r3, [pc, #664]	; (1618c <lv_theme_material_init+0x1240>)
   15ef4:	681c      	ldr	r4, [r3, #0]
   15ef6:	3478      	adds	r4, #120	; 0x78
   15ef8:	2000      	movs	r0, #0
   15efa:	4ba1      	ldr	r3, [pc, #644]	; (16180 <lv_theme_material_init+0x1234>)
   15efc:	4798      	blx	r3
   15efe:	2801      	cmp	r0, #1
   15f00:	f240 87de 	bls.w	16ec0 <lv_theme_material_init+0x1f74>
   15f04:	2000      	movs	r0, #0
   15f06:	4b9f      	ldr	r3, [pc, #636]	; (16184 <lv_theme_material_init+0x1238>)
   15f08:	4798      	blx	r3
   15f0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f0e:	0040      	lsls	r0, r0, #1
   15f10:	3050      	adds	r0, #80	; 0x50
   15f12:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f16:	f080 87ed 	bcs.w	16ef4 <lv_theme_material_init+0x1fa8>
   15f1a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15f1c:	2110      	movs	r1, #16
   15f1e:	4620      	mov	r0, r4
   15f20:	4b99      	ldr	r3, [pc, #612]	; (16188 <lv_theme_material_init+0x123c>)
   15f22:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15f24:	4b99      	ldr	r3, [pc, #612]	; (1618c <lv_theme_material_init+0x1240>)
   15f26:	681c      	ldr	r4, [r3, #0]
   15f28:	3478      	adds	r4, #120	; 0x78
   15f2a:	2000      	movs	r0, #0
   15f2c:	4b94      	ldr	r3, [pc, #592]	; (16180 <lv_theme_material_init+0x1234>)
   15f2e:	4798      	blx	r3
   15f30:	2801      	cmp	r0, #1
   15f32:	f240 87ed 	bls.w	16f10 <lv_theme_material_init+0x1fc4>
   15f36:	2000      	movs	r0, #0
   15f38:	4b92      	ldr	r3, [pc, #584]	; (16184 <lv_theme_material_init+0x1238>)
   15f3a:	4798      	blx	r3
   15f3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f40:	0040      	lsls	r0, r0, #1
   15f42:	3050      	adds	r0, #80	; 0x50
   15f44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f48:	f080 87fc 	bcs.w	16f44 <lv_theme_material_init+0x1ff8>
   15f4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15f4e:	2111      	movs	r1, #17
   15f50:	4620      	mov	r0, r4
   15f52:	4b8d      	ldr	r3, [pc, #564]	; (16188 <lv_theme_material_init+0x123c>)
   15f54:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15f56:	4b8d      	ldr	r3, [pc, #564]	; (1618c <lv_theme_material_init+0x1240>)
   15f58:	681c      	ldr	r4, [r3, #0]
   15f5a:	3478      	adds	r4, #120	; 0x78
   15f5c:	2000      	movs	r0, #0
   15f5e:	4b88      	ldr	r3, [pc, #544]	; (16180 <lv_theme_material_init+0x1234>)
   15f60:	4798      	blx	r3
   15f62:	2801      	cmp	r0, #1
   15f64:	f240 87fc 	bls.w	16f60 <lv_theme_material_init+0x2014>
   15f68:	2000      	movs	r0, #0
   15f6a:	4b86      	ldr	r3, [pc, #536]	; (16184 <lv_theme_material_init+0x1238>)
   15f6c:	4798      	blx	r3
   15f6e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f72:	0040      	lsls	r0, r0, #1
   15f74:	3050      	adds	r0, #80	; 0x50
   15f76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f7a:	f081 800b 	bcs.w	16f94 <lv_theme_material_init+0x2048>
   15f7e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15f80:	2114      	movs	r1, #20
   15f82:	4620      	mov	r0, r4
   15f84:	4b80      	ldr	r3, [pc, #512]	; (16188 <lv_theme_material_init+0x123c>)
   15f86:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   15f88:	4b80      	ldr	r3, [pc, #512]	; (1618c <lv_theme_material_init+0x1240>)
   15f8a:	681c      	ldr	r4, [r3, #0]
   15f8c:	3478      	adds	r4, #120	; 0x78
   15f8e:	2000      	movs	r0, #0
   15f90:	4b7b      	ldr	r3, [pc, #492]	; (16180 <lv_theme_material_init+0x1234>)
   15f92:	4798      	blx	r3
   15f94:	2801      	cmp	r0, #1
   15f96:	f241 800b 	bls.w	16fb0 <lv_theme_material_init+0x2064>
   15f9a:	2000      	movs	r0, #0
   15f9c:	4b79      	ldr	r3, [pc, #484]	; (16184 <lv_theme_material_init+0x1238>)
   15f9e:	4798      	blx	r3
   15fa0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15fa4:	0040      	lsls	r0, r0, #1
   15fa6:	3050      	adds	r0, #80	; 0x50
   15fa8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15fac:	f081 801c 	bcs.w	16fe8 <lv_theme_material_init+0x209c>
   15fb0:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   15fb4:	2104      	movs	r1, #4
   15fb6:	4620      	mov	r0, r4
   15fb8:	4d73      	ldr	r5, [pc, #460]	; (16188 <lv_theme_material_init+0x123c>)
   15fba:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, 0);
   15fbc:	4c73      	ldr	r4, [pc, #460]	; (1618c <lv_theme_material_init+0x1240>)
   15fbe:	6820      	ldr	r0, [r4, #0]
   15fc0:	2200      	movs	r2, #0
   15fc2:	f241 0104 	movw	r1, #4100	; 0x1004
   15fc6:	3078      	adds	r0, #120	; 0x78
   15fc8:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, 0);
   15fca:	6820      	ldr	r0, [r4, #0]
   15fcc:	2200      	movs	r2, #0
   15fce:	f44f 7182 	mov.w	r1, #260	; 0x104
   15fd2:	3078      	adds	r0, #120	; 0x78
   15fd4:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, 0);
   15fd6:	6820      	ldr	r0, [r4, #0]
   15fd8:	2200      	movs	r2, #0
   15fda:	f242 0104 	movw	r1, #8196	; 0x2004
   15fde:	3078      	adds	r0, #120	; 0x78
   15fe0:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   15fe2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   15fe4:	2296      	movs	r2, #150	; 0x96
   15fe6:	21b0      	movs	r1, #176	; 0xb0
   15fe8:	3078      	adds	r0, #120	; 0x78
   15fea:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   15fec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15fee:	2229      	movs	r2, #41	; 0x29
   15ff0:	21b7      	movs	r1, #183	; 0xb7
   15ff2:	3078      	adds	r0, #120	; 0x78
   15ff4:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
   15ff6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   15ff8:	2204      	movs	r2, #4
   15ffa:	21b6      	movs	r1, #182	; 0xb6
   15ffc:	3078      	adds	r0, #120	; 0x78
   15ffe:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_page);
   16000:	6820      	ldr	r0, [r4, #0]
   16002:	3054      	adds	r0, #84	; 0x54
   16004:	4b62      	ldr	r3, [pc, #392]	; (16190 <lv_theme_material_init+0x1244>)
   16006:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   16008:	6824      	ldr	r4, [r4, #0]
   1600a:	3454      	adds	r4, #84	; 0x54
   1600c:	2000      	movs	r0, #0
   1600e:	4b5d      	ldr	r3, [pc, #372]	; (16184 <lv_theme_material_init+0x1238>)
   16010:	4798      	blx	r3
   16012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16016:	0080      	lsls	r0, r0, #2
   16018:	3050      	adds	r0, #80	; 0x50
   1601a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1601e:	f080 87f2 	bcs.w	17006 <lv_theme_material_init+0x20ba>
   16022:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   16024:	f248 0181 	movw	r1, #32897	; 0x8081
   16028:	4620      	mov	r0, r4
   1602a:	4d57      	ldr	r5, [pc, #348]	; (16188 <lv_theme_material_init+0x123c>)
   1602c:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
   1602e:	4c57      	ldr	r4, [pc, #348]	; (1618c <lv_theme_material_init+0x1240>)
   16030:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   16032:	2201      	movs	r2, #1
   16034:	2102      	movs	r1, #2
   16036:	3054      	adds	r0, #84	; 0x54
   16038:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
   1603a:	6820      	ldr	r0, [r4, #0]
   1603c:	3058      	adds	r0, #88	; 0x58
   1603e:	4b54      	ldr	r3, [pc, #336]	; (16190 <lv_theme_material_init+0x1244>)
   16040:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   16042:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16044:	22ff      	movs	r2, #255	; 0xff
   16046:	212c      	movs	r1, #44	; 0x2c
   16048:	3058      	adds	r0, #88	; 0x58
   1604a:	4b52      	ldr	r3, [pc, #328]	; (16194 <lv_theme_material_init+0x1248>)
   1604c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
   1604e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16050:	89a2      	ldrh	r2, [r4, #12]
   16052:	2129      	movs	r1, #41	; 0x29
   16054:	3058      	adds	r0, #88	; 0x58
   16056:	4d50      	ldr	r5, [pc, #320]	; (16198 <lv_theme_material_init+0x124c>)
   16058:	47a8      	blx	r5
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
   1605a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1605c:	f04f 32ff 	mov.w	r2, #4294967295
   16060:	f248 0189 	movw	r1, #32905	; 0x8089
   16064:	3058      	adds	r0, #88	; 0x58
   16066:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   16068:	6820      	ldr	r0, [r4, #0]
   1606a:	3058      	adds	r0, #88	; 0x58
   1606c:	6a23      	ldr	r3, [r4, #32]
   1606e:	f013 0f02 	tst.w	r3, #2
   16072:	f040 87d6 	bne.w	17022 <lv_theme_material_init+0x20d6>
   16076:	2309      	movs	r3, #9
   16078:	2113      	movs	r1, #19
   1607a:	240a      	movs	r4, #10
   1607c:	f04f 0200 	mov.w	r2, #0
   16080:	f364 0204 	bfi	r2, r4, #0, #5
   16084:	f361 124a 	bfi	r2, r1, #5, #6
   16088:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1608c:	f241 0129 	movw	r1, #4137	; 0x1029
   16090:	4b41      	ldr	r3, [pc, #260]	; (16198 <lv_theme_material_init+0x124c>)
   16092:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   16094:	4b3d      	ldr	r3, [pc, #244]	; (1618c <lv_theme_material_init+0x1240>)
   16096:	6818      	ldr	r0, [r3, #0]
   16098:	3058      	adds	r0, #88	; 0x58
   1609a:	6a1b      	ldr	r3, [r3, #32]
   1609c:	f013 0f02 	tst.w	r3, #2
   160a0:	f040 87c4 	bne.w	1702c <lv_theme_material_init+0x20e0>
   160a4:	231f      	movs	r3, #31
   160a6:	213f      	movs	r1, #63	; 0x3f
   160a8:	461c      	mov	r4, r3
   160aa:	f04f 0200 	mov.w	r2, #0
   160ae:	f364 0204 	bfi	r2, r4, #0, #5
   160b2:	f361 124a 	bfi	r2, r1, #5, #6
   160b6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   160ba:	f249 0189 	movw	r1, #37001	; 0x9089
   160be:	4b36      	ldr	r3, [pc, #216]	; (16198 <lv_theme_material_init+0x124c>)
   160c0:	4798      	blx	r3
    style_init_reset(&styles->roller_bg);
   160c2:	4c32      	ldr	r4, [pc, #200]	; (1618c <lv_theme_material_init+0x1240>)
   160c4:	6820      	ldr	r0, [r4, #0]
   160c6:	3088      	adds	r0, #136	; 0x88
   160c8:	4b31      	ldr	r3, [pc, #196]	; (16190 <lv_theme_material_init+0x1244>)
   160ca:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   160cc:	6824      	ldr	r4, [r4, #0]
   160ce:	3488      	adds	r4, #136	; 0x88
   160d0:	2000      	movs	r0, #0
   160d2:	4b2c      	ldr	r3, [pc, #176]	; (16184 <lv_theme_material_init+0x1238>)
   160d4:	4798      	blx	r3
   160d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   160da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   160de:	3050      	adds	r0, #80	; 0x50
   160e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   160e4:	f080 87a7 	bcs.w	17036 <lv_theme_material_init+0x20ea>
   160e8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   160ea:	f248 0181 	movw	r1, #32897	; 0x8081
   160ee:	4620      	mov	r0, r4
   160f0:	4b25      	ldr	r3, [pc, #148]	; (16188 <lv_theme_material_init+0x123c>)
   160f2:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
   160f4:	4c25      	ldr	r4, [pc, #148]	; (1618c <lv_theme_material_init+0x1240>)
   160f6:	6820      	ldr	r0, [r4, #0]
   160f8:	308c      	adds	r0, #140	; 0x8c
   160fa:	4f25      	ldr	r7, [pc, #148]	; (16190 <lv_theme_material_init+0x1244>)
   160fc:	47b8      	blx	r7
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   160fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16100:	22ff      	movs	r2, #255	; 0xff
   16102:	212c      	movs	r1, #44	; 0x2c
   16104:	308c      	adds	r0, #140	; 0x8c
   16106:	4e23      	ldr	r6, [pc, #140]	; (16194 <lv_theme_material_init+0x1248>)
   16108:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
   1610a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1610c:	89a2      	ldrh	r2, [r4, #12]
   1610e:	2129      	movs	r1, #41	; 0x29
   16110:	308c      	adds	r0, #140	; 0x8c
   16112:	4d21      	ldr	r5, [pc, #132]	; (16198 <lv_theme_material_init+0x124c>)
   16114:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   16116:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16118:	4b20      	ldr	r3, [pc, #128]	; (1619c <lv_theme_material_init+0x1250>)
   1611a:	881a      	ldrh	r2, [r3, #0]
   1611c:	f248 0189 	movw	r1, #32905	; 0x8089
   16120:	308c      	adds	r0, #140	; 0x8c
   16122:	47a8      	blx	r5
    style_init_reset(&styles->tabview_btns_bg);
   16124:	6820      	ldr	r0, [r4, #0]
   16126:	30a8      	adds	r0, #168	; 0xa8
   16128:	47b8      	blx	r7
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   1612a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1612c:	22ff      	movs	r2, #255	; 0xff
   1612e:	212c      	movs	r1, #44	; 0x2c
   16130:	30a8      	adds	r0, #168	; 0xa8
   16132:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   16134:	6820      	ldr	r0, [r4, #0]
   16136:	30a8      	adds	r0, #168	; 0xa8
   16138:	6a23      	ldr	r3, [r4, #32]
   1613a:	f013 0f02 	tst.w	r3, #2
   1613e:	f040 878a 	bne.w	17056 <lv_theme_material_init+0x210a>
   16142:	230b      	movs	r3, #11
   16144:	2118      	movs	r1, #24
   16146:	240e      	movs	r4, #14
   16148:	f04f 0200 	mov.w	r2, #0
   1614c:	f364 0204 	bfi	r2, r4, #0, #5
   16150:	f361 124a 	bfi	r2, r1, #5, #6
   16154:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16158:	2129      	movs	r1, #41	; 0x29
   1615a:	4b0f      	ldr	r3, [pc, #60]	; (16198 <lv_theme_material_init+0x124c>)
   1615c:	4798      	blx	r3
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   1615e:	4b0b      	ldr	r3, [pc, #44]	; (1618c <lv_theme_material_init+0x1240>)
   16160:	6818      	ldr	r0, [r3, #0]
                              IS_LIGHT ? lv_color_hex(0xe4eaf0) : lv_color_hex(0x3b3e42));
   16162:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   16164:	f013 0302 	ands.w	r3, r3, #2
   16168:	bf14      	ite	ne
   1616a:	211c      	movne	r1, #28
   1616c:	2107      	moveq	r1, #7
   1616e:	2b00      	cmp	r3, #0
   16170:	bf15      	itete	ne
   16172:	243a      	movne	r4, #58	; 0x3a
   16174:	240f      	moveq	r4, #15
   16176:	231e      	movne	r3, #30
   16178:	2308      	moveq	r3, #8
   1617a:	f04f 0200 	mov.w	r2, #0
   1617e:	e00f      	b.n	161a0 <lv_theme_material_init+0x1254>
   16180:	0001019d 	.word	0x0001019d
   16184:	00010181 	.word	0x00010181
   16188:	00005ffd 	.word	0x00005ffd
   1618c:	2000abd4 	.word	0x2000abd4
   16190:	00012f19 	.word	0x00012f19
   16194:	0000624d 	.word	0x0000624d
   16198:	00006125 	.word	0x00006125
   1619c:	0001b518 	.word	0x0001b518
   161a0:	f363 0204 	bfi	r2, r3, #0, #5
   161a4:	f364 124a 	bfi	r2, r4, #5, #6
   161a8:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   161ac:	2139      	movs	r1, #57	; 0x39
   161ae:	30a8      	adds	r0, #168	; 0xa8
   161b0:	4bb6      	ldr	r3, [pc, #728]	; (1648c <lv_theme_material_init+0x1540>)
   161b2:	4798      	blx	r3
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   161b4:	4bb6      	ldr	r3, [pc, #728]	; (16490 <lv_theme_material_init+0x1544>)
   161b6:	681c      	ldr	r4, [r3, #0]
   161b8:	34a8      	adds	r4, #168	; 0xa8
   161ba:	2000      	movs	r0, #0
   161bc:	4bb5      	ldr	r3, [pc, #724]	; (16494 <lv_theme_material_init+0x1548>)
   161be:	4798      	blx	r3
   161c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   161c4:	3050      	adds	r0, #80	; 0x50
   161c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   161ca:	f080 8749 	bcs.w	17060 <lv_theme_material_init+0x2114>
   161ce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   161d0:	2130      	movs	r1, #48	; 0x30
   161d2:	4620      	mov	r0, r4
   161d4:	4db0      	ldr	r5, [pc, #704]	; (16498 <lv_theme_material_init+0x154c>)
   161d6:	47a8      	blx	r5
    lv_style_set_border_side(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   161d8:	4cad      	ldr	r4, [pc, #692]	; (16490 <lv_theme_material_init+0x1544>)
   161da:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   161dc:	2201      	movs	r2, #1
   161de:	2131      	movs	r1, #49	; 0x31
   161e0:	30a8      	adds	r0, #168	; 0xa8
   161e2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   161e4:	6820      	ldr	r0, [r4, #0]
   161e6:	6a23      	ldr	r3, [r4, #32]
   161e8:	f013 0302 	ands.w	r3, r3, #2
   161ec:	bf14      	ite	ne
   161ee:	2107      	movne	r1, #7
   161f0:	211c      	moveq	r1, #28
   161f2:	2b00      	cmp	r3, #0
   161f4:	bf15      	itete	ne
   161f6:	240f      	movne	r4, #15
   161f8:	243a      	moveq	r4, #58	; 0x3a
   161fa:	2308      	movne	r3, #8
   161fc:	231d      	moveq	r3, #29
   161fe:	f04f 0200 	mov.w	r2, #0
   16202:	f363 0204 	bfi	r2, r3, #0, #5
   16206:	f364 124a 	bfi	r2, r4, #5, #6
   1620a:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1620e:	f248 0189 	movw	r1, #32905	; 0x8089
   16212:	30a8      	adds	r0, #168	; 0xa8
   16214:	4d9d      	ldr	r5, [pc, #628]	; (1648c <lv_theme_material_init+0x1540>)
   16216:	47a8      	blx	r5
    lv_style_set_text_font(&styles->tabview_btns_bg, LV_STATE_DEFAULT, theme.font_normal);
   16218:	4c9d      	ldr	r4, [pc, #628]	; (16490 <lv_theme_material_init+0x1544>)
   1621a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1621c:	6962      	ldr	r2, [r4, #20]
   1621e:	f248 018e 	movw	r1, #32910	; 0x808e
   16222:	30a8      	adds	r0, #168	; 0xa8
   16224:	4b9d      	ldr	r3, [pc, #628]	; (1649c <lv_theme_material_init+0x1550>)
   16226:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
   16228:	6820      	ldr	r0, [r4, #0]
   1622a:	f04f 0200 	mov.w	r2, #0
   1622e:	2313      	movs	r3, #19
   16230:	f363 0204 	bfi	r2, r3, #0, #5
   16234:	2326      	movs	r3, #38	; 0x26
   16236:	f363 124a 	bfi	r2, r3, #5, #6
   1623a:	2312      	movs	r3, #18
   1623c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   16240:	f248 01a9 	movw	r1, #32937	; 0x80a9
   16244:	30a8      	adds	r0, #168	; 0xa8
   16246:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   16248:	6824      	ldr	r4, [r4, #0]
   1624a:	34a8      	adds	r4, #168	; 0xa8
   1624c:	2000      	movs	r0, #0
   1624e:	4b91      	ldr	r3, [pc, #580]	; (16494 <lv_theme_material_init+0x1548>)
   16250:	4798      	blx	r3
   16252:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16256:	3050      	adds	r0, #80	; 0x50
   16258:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1625c:	f080 870e 	bcs.w	1707c <lv_theme_material_init+0x2130>
   16260:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16262:	2110      	movs	r1, #16
   16264:	4620      	mov	r0, r4
   16266:	4b8c      	ldr	r3, [pc, #560]	; (16498 <lv_theme_material_init+0x154c>)
   16268:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1626a:	4b89      	ldr	r3, [pc, #548]	; (16490 <lv_theme_material_init+0x1544>)
   1626c:	681c      	ldr	r4, [r3, #0]
   1626e:	34a8      	adds	r4, #168	; 0xa8
   16270:	2000      	movs	r0, #0
   16272:	4b88      	ldr	r3, [pc, #544]	; (16494 <lv_theme_material_init+0x1548>)
   16274:	4798      	blx	r3
   16276:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1627a:	3050      	adds	r0, #80	; 0x50
   1627c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16280:	f080 870a 	bcs.w	17098 <lv_theme_material_init+0x214c>
   16284:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16286:	2112      	movs	r1, #18
   16288:	4620      	mov	r0, r4
   1628a:	4b83      	ldr	r3, [pc, #524]	; (16498 <lv_theme_material_init+0x154c>)
   1628c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1628e:	4b80      	ldr	r3, [pc, #512]	; (16490 <lv_theme_material_init+0x1544>)
   16290:	681c      	ldr	r4, [r3, #0]
   16292:	34a8      	adds	r4, #168	; 0xa8
   16294:	2000      	movs	r0, #0
   16296:	4b7f      	ldr	r3, [pc, #508]	; (16494 <lv_theme_material_init+0x1548>)
   16298:	4798      	blx	r3
   1629a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1629e:	3050      	adds	r0, #80	; 0x50
   162a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   162a4:	f080 8706 	bcs.w	170b4 <lv_theme_material_init+0x2168>
   162a8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   162aa:	2113      	movs	r1, #19
   162ac:	4620      	mov	r0, r4
   162ae:	4b7a      	ldr	r3, [pc, #488]	; (16498 <lv_theme_material_init+0x154c>)
   162b0:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
   162b2:	4c77      	ldr	r4, [pc, #476]	; (16490 <lv_theme_material_init+0x1544>)
   162b4:	6820      	ldr	r0, [r4, #0]
   162b6:	30a4      	adds	r0, #164	; 0xa4
   162b8:	4b79      	ldr	r3, [pc, #484]	; (164a0 <lv_theme_material_init+0x1554>)
   162ba:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
   162bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   162be:	227f      	movs	r2, #127	; 0x7f
   162c0:	f241 012c 	movw	r1, #4140	; 0x102c
   162c4:	30a4      	adds	r0, #164	; 0xa4
   162c6:	4b77      	ldr	r3, [pc, #476]	; (164a4 <lv_theme_material_init+0x1558>)
   162c8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
   162ca:	6820      	ldr	r0, [r4, #0]
   162cc:	2311      	movs	r3, #17
   162ce:	f04f 0200 	mov.w	r2, #0
   162d2:	f363 0204 	bfi	r2, r3, #0, #5
   162d6:	2122      	movs	r1, #34	; 0x22
   162d8:	f361 124a 	bfi	r2, r1, #5, #6
   162dc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   162e0:	f241 0129 	movw	r1, #4137	; 0x1029
   162e4:	30a4      	adds	r0, #164	; 0xa4
   162e6:	4b69      	ldr	r3, [pc, #420]	; (1648c <lv_theme_material_init+0x1540>)
   162e8:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
   162ea:	6820      	ldr	r0, [r4, #0]
   162ec:	6a23      	ldr	r3, [r4, #32]
   162ee:	f013 0302 	ands.w	r3, r3, #2
   162f2:	bf14      	ite	ne
   162f4:	2107      	movne	r1, #7
   162f6:	211c      	moveq	r1, #28
   162f8:	2b00      	cmp	r3, #0
   162fa:	bf15      	itete	ne
   162fc:	240f      	movne	r4, #15
   162fe:	243a      	moveq	r4, #58	; 0x3a
   16300:	2308      	movne	r3, #8
   16302:	231d      	moveq	r3, #29
   16304:	f04f 0200 	mov.w	r2, #0
   16308:	f363 0204 	bfi	r2, r3, #0, #5
   1630c:	f364 124a 	bfi	r2, r4, #5, #6
   16310:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   16314:	f248 1189 	movw	r1, #33161	; 0x8189
   16318:	30a4      	adds	r0, #164	; 0xa4
   1631a:	4b5c      	ldr	r3, [pc, #368]	; (1648c <lv_theme_material_init+0x1540>)
   1631c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   1631e:	4b5c      	ldr	r3, [pc, #368]	; (16490 <lv_theme_material_init+0x1544>)
   16320:	681c      	ldr	r4, [r3, #0]
   16322:	34a4      	adds	r4, #164	; 0xa4
   16324:	2000      	movs	r0, #0
   16326:	4b5b      	ldr	r3, [pc, #364]	; (16494 <lv_theme_material_init+0x1548>)
   16328:	4798      	blx	r3
   1632a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1632e:	0080      	lsls	r0, r0, #2
   16330:	3050      	adds	r0, #80	; 0x50
   16332:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16336:	f080 86cb 	bcs.w	170d0 <lv_theme_material_init+0x2184>
   1633a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1633c:	2110      	movs	r1, #16
   1633e:	4620      	mov	r0, r4
   16340:	4b55      	ldr	r3, [pc, #340]	; (16498 <lv_theme_material_init+0x154c>)
   16342:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   16344:	4b52      	ldr	r3, [pc, #328]	; (16490 <lv_theme_material_init+0x1544>)
   16346:	681c      	ldr	r4, [r3, #0]
   16348:	34a4      	adds	r4, #164	; 0xa4
   1634a:	2000      	movs	r0, #0
   1634c:	4b51      	ldr	r3, [pc, #324]	; (16494 <lv_theme_material_init+0x1548>)
   1634e:	4798      	blx	r3
   16350:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16354:	0080      	lsls	r0, r0, #2
   16356:	3050      	adds	r0, #80	; 0x50
   16358:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1635c:	f080 86c6 	bcs.w	170ec <lv_theme_material_init+0x21a0>
   16360:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   16362:	2111      	movs	r1, #17
   16364:	4620      	mov	r0, r4
   16366:	4b4c      	ldr	r3, [pc, #304]	; (16498 <lv_theme_material_init+0x154c>)
   16368:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
   1636a:	4c49      	ldr	r4, [pc, #292]	; (16490 <lv_theme_material_init+0x1544>)
   1636c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1636e:	89a2      	ldrh	r2, [r4, #12]
   16370:	f248 2189 	movw	r1, #33417	; 0x8289
   16374:	30a4      	adds	r0, #164	; 0xa4
   16376:	4d45      	ldr	r5, [pc, #276]	; (1648c <lv_theme_material_init+0x1540>)
   16378:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
   1637a:	6820      	ldr	r0, [r4, #0]
   1637c:	89e2      	ldrh	r2, [r4, #14]
   1637e:	f248 4189 	movw	r1, #33929	; 0x8489
   16382:	30a4      	adds	r0, #164	; 0xa4
   16384:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
   16386:	6820      	ldr	r0, [r4, #0]
   16388:	30ac      	adds	r0, #172	; 0xac
   1638a:	4b45      	ldr	r3, [pc, #276]	; (164a0 <lv_theme_material_init+0x1554>)
   1638c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   1638e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16390:	22ff      	movs	r2, #255	; 0xff
   16392:	212c      	movs	r1, #44	; 0x2c
   16394:	30ac      	adds	r0, #172	; 0xac
   16396:	4b43      	ldr	r3, [pc, #268]	; (164a4 <lv_theme_material_init+0x1558>)
   16398:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
   1639a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1639c:	89a2      	ldrh	r2, [r4, #12]
   1639e:	2129      	movs	r1, #41	; 0x29
   163a0:	30ac      	adds	r0, #172	; 0xac
   163a2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
   163a4:	6820      	ldr	r0, [r4, #0]
   163a6:	89e2      	ldrh	r2, [r4, #14]
   163a8:	f240 4129 	movw	r1, #1065	; 0x429
   163ac:	30ac      	adds	r0, #172	; 0xac
   163ae:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   163b0:	6824      	ldr	r4, [r4, #0]
   163b2:	34ac      	adds	r4, #172	; 0xac
   163b4:	2000      	movs	r0, #0
   163b6:	4b37      	ldr	r3, [pc, #220]	; (16494 <lv_theme_material_init+0x1548>)
   163b8:	4798      	blx	r3
   163ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163be:	3050      	adds	r0, #80	; 0x50
   163c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   163c4:	f080 86a0 	bcs.w	17108 <lv_theme_material_init+0x21bc>
   163c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   163ca:	2103      	movs	r1, #3
   163cc:	4620      	mov	r0, r4
   163ce:	4d32      	ldr	r5, [pc, #200]	; (16498 <lv_theme_material_init+0x154c>)
   163d0:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   163d2:	4c2f      	ldr	r4, [pc, #188]	; (16490 <lv_theme_material_init+0x1544>)
   163d4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   163d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
   163da:	2101      	movs	r1, #1
   163dc:	30ac      	adds	r0, #172	; 0xac
   163de:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
   163e0:	6820      	ldr	r0, [r4, #0]
   163e2:	30b0      	adds	r0, #176	; 0xb0
   163e4:	4b2e      	ldr	r3, [pc, #184]	; (164a0 <lv_theme_material_init+0x1554>)
   163e6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   163e8:	6824      	ldr	r4, [r4, #0]
   163ea:	34b0      	adds	r4, #176	; 0xb0
   163ec:	2000      	movs	r0, #0
   163ee:	4b2e      	ldr	r3, [pc, #184]	; (164a8 <lv_theme_material_init+0x155c>)
   163f0:	4798      	blx	r3
   163f2:	2801      	cmp	r0, #1
   163f4:	f240 8696 	bls.w	17124 <lv_theme_material_init+0x21d8>
   163f8:	2000      	movs	r0, #0
   163fa:	4b26      	ldr	r3, [pc, #152]	; (16494 <lv_theme_material_init+0x1548>)
   163fc:	4798      	blx	r3
   163fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16402:	0040      	lsls	r0, r0, #1
   16404:	3050      	adds	r0, #80	; 0x50
   16406:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1640a:	f080 86a5 	bcs.w	17158 <lv_theme_material_init+0x220c>
   1640e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16410:	2110      	movs	r1, #16
   16412:	4620      	mov	r0, r4
   16414:	4b20      	ldr	r3, [pc, #128]	; (16498 <lv_theme_material_init+0x154c>)
   16416:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16418:	4b1d      	ldr	r3, [pc, #116]	; (16490 <lv_theme_material_init+0x1544>)
   1641a:	681c      	ldr	r4, [r3, #0]
   1641c:	34b0      	adds	r4, #176	; 0xb0
   1641e:	2000      	movs	r0, #0
   16420:	4b21      	ldr	r3, [pc, #132]	; (164a8 <lv_theme_material_init+0x155c>)
   16422:	4798      	blx	r3
   16424:	2801      	cmp	r0, #1
   16426:	f240 86a5 	bls.w	17174 <lv_theme_material_init+0x2228>
   1642a:	2000      	movs	r0, #0
   1642c:	4b19      	ldr	r3, [pc, #100]	; (16494 <lv_theme_material_init+0x1548>)
   1642e:	4798      	blx	r3
   16430:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16434:	0040      	lsls	r0, r0, #1
   16436:	3050      	adds	r0, #80	; 0x50
   16438:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1643c:	f080 86b8 	bcs.w	171b0 <lv_theme_material_init+0x2264>
   16440:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   16442:	2111      	movs	r1, #17
   16444:	4620      	mov	r0, r4
   16446:	4b14      	ldr	r3, [pc, #80]	; (16498 <lv_theme_material_init+0x154c>)
   16448:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1644a:	4b11      	ldr	r3, [pc, #68]	; (16490 <lv_theme_material_init+0x1544>)
   1644c:	681c      	ldr	r4, [r3, #0]
   1644e:	34b0      	adds	r4, #176	; 0xb0
   16450:	2000      	movs	r0, #0
   16452:	4b15      	ldr	r3, [pc, #84]	; (164a8 <lv_theme_material_init+0x155c>)
   16454:	4798      	blx	r3
   16456:	2801      	cmp	r0, #1
   16458:	f240 86b8 	bls.w	171cc <lv_theme_material_init+0x2280>
   1645c:	2000      	movs	r0, #0
   1645e:	4b0d      	ldr	r3, [pc, #52]	; (16494 <lv_theme_material_init+0x1548>)
   16460:	4798      	blx	r3
   16462:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16466:	0040      	lsls	r0, r0, #1
   16468:	3050      	adds	r0, #80	; 0x50
   1646a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1646e:	f080 86c7 	bcs.w	17200 <lv_theme_material_init+0x22b4>
   16472:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16474:	2112      	movs	r1, #18
   16476:	4620      	mov	r0, r4
   16478:	4b07      	ldr	r3, [pc, #28]	; (16498 <lv_theme_material_init+0x154c>)
   1647a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1647c:	4b04      	ldr	r3, [pc, #16]	; (16490 <lv_theme_material_init+0x1544>)
   1647e:	681c      	ldr	r4, [r3, #0]
   16480:	34b0      	adds	r4, #176	; 0xb0
   16482:	2000      	movs	r0, #0
   16484:	4b08      	ldr	r3, [pc, #32]	; (164a8 <lv_theme_material_init+0x155c>)
   16486:	4798      	blx	r3
   16488:	2801      	cmp	r0, #1
   1648a:	e00f      	b.n	164ac <lv_theme_material_init+0x1560>
   1648c:	00006125 	.word	0x00006125
   16490:	2000abd4 	.word	0x2000abd4
   16494:	00010181 	.word	0x00010181
   16498:	00005ffd 	.word	0x00005ffd
   1649c:	00006361 	.word	0x00006361
   164a0:	00012f19 	.word	0x00012f19
   164a4:	0000624d 	.word	0x0000624d
   164a8:	0001019d 	.word	0x0001019d
   164ac:	f240 86b6 	bls.w	1721c <lv_theme_material_init+0x22d0>
   164b0:	2000      	movs	r0, #0
   164b2:	4bbd      	ldr	r3, [pc, #756]	; (167a8 <lv_theme_material_init+0x185c>)
   164b4:	4798      	blx	r3
   164b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   164ba:	0040      	lsls	r0, r0, #1
   164bc:	3050      	adds	r0, #80	; 0x50
   164be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164c2:	f080 86c5 	bcs.w	17250 <lv_theme_material_init+0x2304>
   164c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   164c8:	2113      	movs	r1, #19
   164ca:	4620      	mov	r0, r4
   164cc:	4bb7      	ldr	r3, [pc, #732]	; (167ac <lv_theme_material_init+0x1860>)
   164ce:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   164d0:	4bb7      	ldr	r3, [pc, #732]	; (167b0 <lv_theme_material_init+0x1864>)
   164d2:	681c      	ldr	r4, [r3, #0]
   164d4:	34b0      	adds	r4, #176	; 0xb0
   164d6:	2000      	movs	r0, #0
   164d8:	4bb6      	ldr	r3, [pc, #728]	; (167b4 <lv_theme_material_init+0x1868>)
   164da:	4798      	blx	r3
   164dc:	2801      	cmp	r0, #1
   164de:	f240 86c5 	bls.w	1726c <lv_theme_material_init+0x2320>
   164e2:	2000      	movs	r0, #0
   164e4:	4bb0      	ldr	r3, [pc, #704]	; (167a8 <lv_theme_material_init+0x185c>)
   164e6:	4798      	blx	r3
   164e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   164ec:	0040      	lsls	r0, r0, #1
   164ee:	3050      	adds	r0, #80	; 0x50
   164f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164f4:	f080 86d4 	bcs.w	172a0 <lv_theme_material_init+0x2354>
   164f8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   164fa:	2114      	movs	r1, #20
   164fc:	4620      	mov	r0, r4
   164fe:	4bab      	ldr	r3, [pc, #684]	; (167ac <lv_theme_material_init+0x1860>)
   16500:	4798      	blx	r3
    style_init_reset(&styles->table_cell);
   16502:	4cab      	ldr	r4, [pc, #684]	; (167b0 <lv_theme_material_init+0x1864>)
   16504:	6820      	ldr	r0, [r4, #0]
   16506:	30a0      	adds	r0, #160	; 0xa0
   16508:	4bab      	ldr	r3, [pc, #684]	; (167b8 <lv_theme_material_init+0x186c>)
   1650a:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   1650c:	6820      	ldr	r0, [r4, #0]
   1650e:	6a23      	ldr	r3, [r4, #32]
   16510:	f013 0302 	ands.w	r3, r3, #2
   16514:	bf14      	ite	ne
   16516:	211a      	movne	r1, #26
   16518:	2110      	moveq	r1, #16
   1651a:	2b00      	cmp	r3, #0
   1651c:	bf15      	itete	ne
   1651e:	2437      	movne	r4, #55	; 0x37
   16520:	2422      	moveq	r4, #34	; 0x22
   16522:	231c      	movne	r3, #28
   16524:	2312      	moveq	r3, #18
   16526:	f04f 0200 	mov.w	r2, #0
   1652a:	f363 0204 	bfi	r2, r3, #0, #5
   1652e:	f364 124a 	bfi	r2, r4, #5, #6
   16532:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   16536:	2139      	movs	r1, #57	; 0x39
   16538:	30a0      	adds	r0, #160	; 0xa0
   1653a:	4ba0      	ldr	r3, [pc, #640]	; (167bc <lv_theme_material_init+0x1870>)
   1653c:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
   1653e:	4c9c      	ldr	r4, [pc, #624]	; (167b0 <lv_theme_material_init+0x1864>)
   16540:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   16542:	2201      	movs	r2, #1
   16544:	2130      	movs	r1, #48	; 0x30
   16546:	30a0      	adds	r0, #160	; 0xa0
   16548:	4d98      	ldr	r5, [pc, #608]	; (167ac <lv_theme_material_init+0x1860>)
   1654a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
   1654c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1654e:	2203      	movs	r2, #3
   16550:	2131      	movs	r1, #49	; 0x31
   16552:	30a0      	adds	r0, #160	; 0xa0
   16554:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   16556:	6824      	ldr	r4, [r4, #0]
   16558:	34a0      	adds	r4, #160	; 0xa0
   1655a:	2000      	movs	r0, #0
   1655c:	4b95      	ldr	r3, [pc, #596]	; (167b4 <lv_theme_material_init+0x1868>)
   1655e:	4798      	blx	r3
   16560:	2801      	cmp	r0, #1
   16562:	f240 86ab 	bls.w	172bc <lv_theme_material_init+0x2370>
   16566:	2000      	movs	r0, #0
   16568:	4b8f      	ldr	r3, [pc, #572]	; (167a8 <lv_theme_material_init+0x185c>)
   1656a:	4798      	blx	r3
   1656c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16570:	0040      	lsls	r0, r0, #1
   16572:	3050      	adds	r0, #80	; 0x50
   16574:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16578:	f080 86ba 	bcs.w	172f0 <lv_theme_material_init+0x23a4>
   1657c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1657e:	2112      	movs	r1, #18
   16580:	4620      	mov	r0, r4
   16582:	4b8a      	ldr	r3, [pc, #552]	; (167ac <lv_theme_material_init+0x1860>)
   16584:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   16586:	4b8a      	ldr	r3, [pc, #552]	; (167b0 <lv_theme_material_init+0x1864>)
   16588:	681c      	ldr	r4, [r3, #0]
   1658a:	34a0      	adds	r4, #160	; 0xa0
   1658c:	2000      	movs	r0, #0
   1658e:	4b89      	ldr	r3, [pc, #548]	; (167b4 <lv_theme_material_init+0x1868>)
   16590:	4798      	blx	r3
   16592:	2801      	cmp	r0, #1
   16594:	f240 86ba 	bls.w	1730c <lv_theme_material_init+0x23c0>
   16598:	2000      	movs	r0, #0
   1659a:	4b83      	ldr	r3, [pc, #524]	; (167a8 <lv_theme_material_init+0x185c>)
   1659c:	4798      	blx	r3
   1659e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   165a2:	0040      	lsls	r0, r0, #1
   165a4:	3050      	adds	r0, #80	; 0x50
   165a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   165aa:	f080 86c9 	bcs.w	17340 <lv_theme_material_init+0x23f4>
   165ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   165b0:	2113      	movs	r1, #19
   165b2:	4620      	mov	r0, r4
   165b4:	4b7d      	ldr	r3, [pc, #500]	; (167ac <lv_theme_material_init+0x1860>)
   165b6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   165b8:	4b7d      	ldr	r3, [pc, #500]	; (167b0 <lv_theme_material_init+0x1864>)
   165ba:	681c      	ldr	r4, [r3, #0]
   165bc:	34a0      	adds	r4, #160	; 0xa0
   165be:	2000      	movs	r0, #0
   165c0:	4b7c      	ldr	r3, [pc, #496]	; (167b4 <lv_theme_material_init+0x1868>)
   165c2:	4798      	blx	r3
   165c4:	2801      	cmp	r0, #1
   165c6:	f240 86c9 	bls.w	1735c <lv_theme_material_init+0x2410>
   165ca:	2000      	movs	r0, #0
   165cc:	4b76      	ldr	r3, [pc, #472]	; (167a8 <lv_theme_material_init+0x185c>)
   165ce:	4798      	blx	r3
   165d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   165d4:	0040      	lsls	r0, r0, #1
   165d6:	3050      	adds	r0, #80	; 0x50
   165d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   165dc:	f080 86d8 	bcs.w	17390 <lv_theme_material_init+0x2444>
   165e0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   165e2:	2110      	movs	r1, #16
   165e4:	4620      	mov	r0, r4
   165e6:	4b71      	ldr	r3, [pc, #452]	; (167ac <lv_theme_material_init+0x1860>)
   165e8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   165ea:	4b71      	ldr	r3, [pc, #452]	; (167b0 <lv_theme_material_init+0x1864>)
   165ec:	681c      	ldr	r4, [r3, #0]
   165ee:	34a0      	adds	r4, #160	; 0xa0
   165f0:	2000      	movs	r0, #0
   165f2:	4b70      	ldr	r3, [pc, #448]	; (167b4 <lv_theme_material_init+0x1868>)
   165f4:	4798      	blx	r3
   165f6:	2801      	cmp	r0, #1
   165f8:	f240 86d8 	bls.w	173ac <lv_theme_material_init+0x2460>
   165fc:	2000      	movs	r0, #0
   165fe:	4b6a      	ldr	r3, [pc, #424]	; (167a8 <lv_theme_material_init+0x185c>)
   16600:	4798      	blx	r3
   16602:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16606:	0040      	lsls	r0, r0, #1
   16608:	3050      	adds	r0, #80	; 0x50
   1660a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1660e:	f080 86e7 	bcs.w	173e0 <lv_theme_material_init+0x2494>
   16612:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   16614:	2111      	movs	r1, #17
   16616:	4620      	mov	r0, r4
   16618:	4b64      	ldr	r3, [pc, #400]	; (167ac <lv_theme_material_init+0x1860>)
   1661a:	4798      	blx	r3
    theme.apply_xcb = theme_apply;
   1661c:	4c64      	ldr	r4, [pc, #400]	; (167b0 <lv_theme_material_init+0x1864>)
   1661e:	4b68      	ldr	r3, [pc, #416]	; (167c0 <lv_theme_material_init+0x1874>)
   16620:	60a3      	str	r3, [r4, #8]
    inited = true;
   16622:	2301      	movs	r3, #1
   16624:	7123      	strb	r3, [r4, #4]
    lv_obj_report_style_mod(NULL);
   16626:	2000      	movs	r0, #0
   16628:	4b66      	ldr	r3, [pc, #408]	; (167c4 <lv_theme_material_init+0x1878>)
   1662a:	4798      	blx	r3
}
   1662c:	f104 0008 	add.w	r0, r4, #8
   16630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   16634:	20bc      	movs	r0, #188	; 0xbc
   16636:	4b64      	ldr	r3, [pc, #400]	; (167c8 <lv_theme_material_init+0x187c>)
   16638:	4798      	blx	r3
   1663a:	4b64      	ldr	r3, [pc, #400]	; (167cc <lv_theme_material_init+0x1880>)
   1663c:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
   1663e:	4b5c      	ldr	r3, [pc, #368]	; (167b0 <lv_theme_material_init+0x1864>)
   16640:	6018      	str	r0, [r3, #0]
   16642:	f7fe bc8e 	b.w	14f62 <lv_theme_material_init+0x16>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   16646:	2315      	movs	r3, #21
   16648:	212a      	movs	r1, #42	; 0x2a
   1664a:	461c      	mov	r4, r3
   1664c:	f7fe bcb3 	b.w	14fb6 <lv_theme_material_init+0x6a>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   16650:	2000      	movs	r0, #0
   16652:	4b55      	ldr	r3, [pc, #340]	; (167a8 <lv_theme_material_init+0x185c>)
   16654:	4798      	blx	r3
   16656:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1665a:	485d      	ldr	r0, [pc, #372]	; (167d0 <lv_theme_material_init+0x1884>)
   1665c:	fba0 3202 	umull	r3, r2, r0, r2
   16660:	f342 12cf 	sbfx	r2, r2, #7, #16
   16664:	f7fe bcc3 	b.w	14fee <lv_theme_material_init+0xa2>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16668:	2000      	movs	r0, #0
   1666a:	4b4f      	ldr	r3, [pc, #316]	; (167a8 <lv_theme_material_init+0x185c>)
   1666c:	4798      	blx	r3
   1666e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16672:	0042      	lsls	r2, r0, #1
   16674:	3250      	adds	r2, #80	; 0x50
   16676:	4856      	ldr	r0, [pc, #344]	; (167d0 <lv_theme_material_init+0x1884>)
   16678:	fba0 3202 	umull	r3, r2, r0, r2
   1667c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16680:	f7fe bcc8 	b.w	15014 <lv_theme_material_init+0xc8>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16684:	2000      	movs	r0, #0
   16686:	4b48      	ldr	r3, [pc, #288]	; (167a8 <lv_theme_material_init+0x185c>)
   16688:	4798      	blx	r3
   1668a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1668e:	0042      	lsls	r2, r0, #1
   16690:	3250      	adds	r2, #80	; 0x50
   16692:	484f      	ldr	r0, [pc, #316]	; (167d0 <lv_theme_material_init+0x1884>)
   16694:	fba0 3202 	umull	r3, r2, r0, r2
   16698:	f342 12cf 	sbfx	r2, r2, #7, #16
   1669c:	f7fe bccd 	b.w	1503a <lv_theme_material_init+0xee>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   166a0:	2000      	movs	r0, #0
   166a2:	4b41      	ldr	r3, [pc, #260]	; (167a8 <lv_theme_material_init+0x185c>)
   166a4:	4798      	blx	r3
   166a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   166aa:	f100 0250 	add.w	r2, r0, #80	; 0x50
   166ae:	4848      	ldr	r0, [pc, #288]	; (167d0 <lv_theme_material_init+0x1884>)
   166b0:	fba0 3202 	umull	r3, r2, r0, r2
   166b4:	f342 12cf 	sbfx	r2, r2, #7, #16
   166b8:	f7fe bcef 	b.w	1509a <lv_theme_material_init+0x14e>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   166bc:	2000      	movs	r0, #0
   166be:	4b3a      	ldr	r3, [pc, #232]	; (167a8 <lv_theme_material_init+0x185c>)
   166c0:	4798      	blx	r3
   166c2:	f100 0214 	add.w	r2, r0, #20
   166c6:	0092      	lsls	r2, r2, #2
   166c8:	4841      	ldr	r0, [pc, #260]	; (167d0 <lv_theme_material_init+0x1884>)
   166ca:	fba0 3202 	umull	r3, r2, r0, r2
   166ce:	f342 12cf 	sbfx	r2, r2, #7, #16
   166d2:	f7fe bcf3 	b.w	150bc <lv_theme_material_init+0x170>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   166d6:	2000      	movs	r0, #0
   166d8:	4b33      	ldr	r3, [pc, #204]	; (167a8 <lv_theme_material_init+0x185c>)
   166da:	4798      	blx	r3
   166dc:	f100 0228 	add.w	r2, r0, #40	; 0x28
   166e0:	0052      	lsls	r2, r2, #1
   166e2:	483b      	ldr	r0, [pc, #236]	; (167d0 <lv_theme_material_init+0x1884>)
   166e4:	fba0 3202 	umull	r3, r2, r0, r2
   166e8:	f342 12cf 	sbfx	r2, r2, #7, #16
   166ec:	f7fe bcf7 	b.w	150de <lv_theme_material_init+0x192>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   166f0:	2000      	movs	r0, #0
   166f2:	4b2d      	ldr	r3, [pc, #180]	; (167a8 <lv_theme_material_init+0x185c>)
   166f4:	4798      	blx	r3
   166f6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   166fa:	4835      	ldr	r0, [pc, #212]	; (167d0 <lv_theme_material_init+0x1884>)
   166fc:	fba0 3202 	umull	r3, r2, r0, r2
   16700:	f342 12cf 	sbfx	r2, r2, #7, #16
   16704:	f7fe bcfb 	b.w	150fe <lv_theme_material_init+0x1b2>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16708:	2000      	movs	r0, #0
   1670a:	4b27      	ldr	r3, [pc, #156]	; (167a8 <lv_theme_material_init+0x185c>)
   1670c:	4798      	blx	r3
   1670e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16712:	3050      	adds	r0, #80	; 0x50
   16714:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16718:	d202      	bcs.n	16720 <lv_theme_material_init+0x17d4>
   1671a:	2201      	movs	r2, #1
   1671c:	f7fe bd0c 	b.w	15138 <lv_theme_material_init+0x1ec>
   16720:	2000      	movs	r0, #0
   16722:	4b21      	ldr	r3, [pc, #132]	; (167a8 <lv_theme_material_init+0x185c>)
   16724:	4798      	blx	r3
   16726:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1672a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1672e:	4828      	ldr	r0, [pc, #160]	; (167d0 <lv_theme_material_init+0x1884>)
   16730:	fba0 3202 	umull	r3, r2, r0, r2
   16734:	f342 12cf 	sbfx	r2, r2, #7, #16
   16738:	f7fe bcfe 	b.w	15138 <lv_theme_material_init+0x1ec>
   1673c:	2000      	movs	r0, #0
   1673e:	4b1a      	ldr	r3, [pc, #104]	; (167a8 <lv_theme_material_init+0x185c>)
   16740:	4798      	blx	r3
   16742:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16746:	0042      	lsls	r2, r0, #1
   16748:	3250      	adds	r2, #80	; 0x50
   1674a:	4b21      	ldr	r3, [pc, #132]	; (167d0 <lv_theme_material_init+0x1884>)
   1674c:	fba3 3202 	umull	r3, r2, r3, r2
   16750:	f342 12cf 	sbfx	r2, r2, #7, #16
   16754:	f7fe bcf0 	b.w	15138 <lv_theme_material_init+0x1ec>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16758:	2000      	movs	r0, #0
   1675a:	4b13      	ldr	r3, [pc, #76]	; (167a8 <lv_theme_material_init+0x185c>)
   1675c:	4798      	blx	r3
   1675e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16762:	3050      	adds	r0, #80	; 0x50
   16764:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16768:	d202      	bcs.n	16770 <lv_theme_material_init+0x1824>
   1676a:	2201      	movs	r2, #1
   1676c:	f7fe bcfd 	b.w	1516a <lv_theme_material_init+0x21e>
   16770:	2000      	movs	r0, #0
   16772:	4b0d      	ldr	r3, [pc, #52]	; (167a8 <lv_theme_material_init+0x185c>)
   16774:	4798      	blx	r3
   16776:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1677a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1677e:	4814      	ldr	r0, [pc, #80]	; (167d0 <lv_theme_material_init+0x1884>)
   16780:	fba0 3202 	umull	r3, r2, r0, r2
   16784:	f342 12cf 	sbfx	r2, r2, #7, #16
   16788:	f7fe bcef 	b.w	1516a <lv_theme_material_init+0x21e>
   1678c:	2000      	movs	r0, #0
   1678e:	4b06      	ldr	r3, [pc, #24]	; (167a8 <lv_theme_material_init+0x185c>)
   16790:	4798      	blx	r3
   16792:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16796:	0042      	lsls	r2, r0, #1
   16798:	3250      	adds	r2, #80	; 0x50
   1679a:	4b0d      	ldr	r3, [pc, #52]	; (167d0 <lv_theme_material_init+0x1884>)
   1679c:	fba3 3202 	umull	r3, r2, r3, r2
   167a0:	f342 12cf 	sbfx	r2, r2, #7, #16
   167a4:	f7fe bce1 	b.w	1516a <lv_theme_material_init+0x21e>
   167a8:	00010181 	.word	0x00010181
   167ac:	00005ffd 	.word	0x00005ffd
   167b0:	2000abd4 	.word	0x2000abd4
   167b4:	0001019d 	.word	0x0001019d
   167b8:	00012f19 	.word	0x00012f19
   167bc:	00006125 	.word	0x00006125
   167c0:	000126b1 	.word	0x000126b1
   167c4:	00003b75 	.word	0x00003b75
   167c8:	00011539 	.word	0x00011539
   167cc:	2000ad5c 	.word	0x2000ad5c
   167d0:	cccccccd 	.word	0xcccccccd
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   167d4:	2000      	movs	r0, #0
   167d6:	4bcf      	ldr	r3, [pc, #828]	; (16b14 <lv_theme_material_init+0x1bc8>)
   167d8:	4798      	blx	r3
   167da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   167de:	3050      	adds	r0, #80	; 0x50
   167e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   167e4:	d202      	bcs.n	167ec <lv_theme_material_init+0x18a0>
   167e6:	2201      	movs	r2, #1
   167e8:	f7fe bcd8 	b.w	1519c <lv_theme_material_init+0x250>
   167ec:	2000      	movs	r0, #0
   167ee:	4bc9      	ldr	r3, [pc, #804]	; (16b14 <lv_theme_material_init+0x1bc8>)
   167f0:	4798      	blx	r3
   167f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   167f6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   167fa:	48c7      	ldr	r0, [pc, #796]	; (16b18 <lv_theme_material_init+0x1bcc>)
   167fc:	fba0 3202 	umull	r3, r2, r0, r2
   16800:	f342 12cf 	sbfx	r2, r2, #7, #16
   16804:	f7fe bcca 	b.w	1519c <lv_theme_material_init+0x250>
   16808:	2000      	movs	r0, #0
   1680a:	4bc2      	ldr	r3, [pc, #776]	; (16b14 <lv_theme_material_init+0x1bc8>)
   1680c:	4798      	blx	r3
   1680e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16812:	0042      	lsls	r2, r0, #1
   16814:	3250      	adds	r2, #80	; 0x50
   16816:	4bc0      	ldr	r3, [pc, #768]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16818:	fba3 3202 	umull	r3, r2, r3, r2
   1681c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16820:	f7fe bcbc 	b.w	1519c <lv_theme_material_init+0x250>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   16824:	2000      	movs	r0, #0
   16826:	4bbb      	ldr	r3, [pc, #748]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16828:	4798      	blx	r3
   1682a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1682e:	3050      	adds	r0, #80	; 0x50
   16830:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16834:	d202      	bcs.n	1683c <lv_theme_material_init+0x18f0>
   16836:	2201      	movs	r2, #1
   16838:	f7fe bcc9 	b.w	151ce <lv_theme_material_init+0x282>
   1683c:	2000      	movs	r0, #0
   1683e:	4bb5      	ldr	r3, [pc, #724]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16840:	4798      	blx	r3
   16842:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16846:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1684a:	48b3      	ldr	r0, [pc, #716]	; (16b18 <lv_theme_material_init+0x1bcc>)
   1684c:	fba0 3202 	umull	r3, r2, r0, r2
   16850:	f342 12cf 	sbfx	r2, r2, #7, #16
   16854:	f7fe bcbb 	b.w	151ce <lv_theme_material_init+0x282>
   16858:	2000      	movs	r0, #0
   1685a:	4bae      	ldr	r3, [pc, #696]	; (16b14 <lv_theme_material_init+0x1bc8>)
   1685c:	4798      	blx	r3
   1685e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16862:	0042      	lsls	r2, r0, #1
   16864:	3250      	adds	r2, #80	; 0x50
   16866:	4bac      	ldr	r3, [pc, #688]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16868:	fba3 3202 	umull	r3, r2, r3, r2
   1686c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16870:	f7fe bcad 	b.w	151ce <lv_theme_material_init+0x282>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   16874:	2306      	movs	r3, #6
   16876:	2110      	movs	r1, #16
   16878:	2409      	movs	r4, #9
   1687a:	f7fe bcf2 	b.w	15262 <lv_theme_material_init+0x316>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   1687e:	2000      	movs	r0, #0
   16880:	4ba4      	ldr	r3, [pc, #656]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16882:	4798      	blx	r3
   16884:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16888:	3050      	adds	r0, #80	; 0x50
   1688a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1688e:	d202      	bcs.n	16896 <lv_theme_material_init+0x194a>
   16890:	2201      	movs	r2, #1
   16892:	f7fe bd07 	b.w	152a4 <lv_theme_material_init+0x358>
   16896:	2000      	movs	r0, #0
   16898:	4b9e      	ldr	r3, [pc, #632]	; (16b14 <lv_theme_material_init+0x1bc8>)
   1689a:	4798      	blx	r3
   1689c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   168a0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   168a4:	489c      	ldr	r0, [pc, #624]	; (16b18 <lv_theme_material_init+0x1bcc>)
   168a6:	fba0 3202 	umull	r3, r2, r0, r2
   168aa:	f342 12cf 	sbfx	r2, r2, #7, #16
   168ae:	f7fe bcf9 	b.w	152a4 <lv_theme_material_init+0x358>
   168b2:	2000      	movs	r0, #0
   168b4:	4b97      	ldr	r3, [pc, #604]	; (16b14 <lv_theme_material_init+0x1bc8>)
   168b6:	4798      	blx	r3
   168b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   168bc:	0042      	lsls	r2, r0, #1
   168be:	3250      	adds	r2, #80	; 0x50
   168c0:	4b95      	ldr	r3, [pc, #596]	; (16b18 <lv_theme_material_init+0x1bcc>)
   168c2:	fba3 3202 	umull	r3, r2, r3, r2
   168c6:	f342 12cf 	sbfx	r2, r2, #7, #16
   168ca:	f7fe bceb 	b.w	152a4 <lv_theme_material_init+0x358>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   168ce:	2000      	movs	r0, #0
   168d0:	4b90      	ldr	r3, [pc, #576]	; (16b14 <lv_theme_material_init+0x1bc8>)
   168d2:	4798      	blx	r3
   168d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   168d8:	3050      	adds	r0, #80	; 0x50
   168da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   168de:	d202      	bcs.n	168e6 <lv_theme_material_init+0x199a>
   168e0:	2201      	movs	r2, #1
   168e2:	f7fe bcf8 	b.w	152d6 <lv_theme_material_init+0x38a>
   168e6:	2000      	movs	r0, #0
   168e8:	4b8a      	ldr	r3, [pc, #552]	; (16b14 <lv_theme_material_init+0x1bc8>)
   168ea:	4798      	blx	r3
   168ec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   168f0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   168f4:	4888      	ldr	r0, [pc, #544]	; (16b18 <lv_theme_material_init+0x1bcc>)
   168f6:	fba0 3202 	umull	r3, r2, r0, r2
   168fa:	f342 12cf 	sbfx	r2, r2, #7, #16
   168fe:	f7fe bcea 	b.w	152d6 <lv_theme_material_init+0x38a>
   16902:	2000      	movs	r0, #0
   16904:	4b83      	ldr	r3, [pc, #524]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16906:	4798      	blx	r3
   16908:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1690c:	0042      	lsls	r2, r0, #1
   1690e:	3250      	adds	r2, #80	; 0x50
   16910:	4b81      	ldr	r3, [pc, #516]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16912:	fba3 3202 	umull	r3, r2, r3, r2
   16916:	f342 12cf 	sbfx	r2, r2, #7, #16
   1691a:	f7fe bcdc 	b.w	152d6 <lv_theme_material_init+0x38a>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   1691e:	2000      	movs	r0, #0
   16920:	4b7c      	ldr	r3, [pc, #496]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16922:	4798      	blx	r3
   16924:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16928:	3050      	adds	r0, #80	; 0x50
   1692a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1692e:	d202      	bcs.n	16936 <lv_theme_material_init+0x19ea>
   16930:	2201      	movs	r2, #1
   16932:	f7fe bce9 	b.w	15308 <lv_theme_material_init+0x3bc>
   16936:	2000      	movs	r0, #0
   16938:	4b76      	ldr	r3, [pc, #472]	; (16b14 <lv_theme_material_init+0x1bc8>)
   1693a:	4798      	blx	r3
   1693c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16940:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16944:	4874      	ldr	r0, [pc, #464]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16946:	fba0 3202 	umull	r3, r2, r0, r2
   1694a:	f342 12cf 	sbfx	r2, r2, #7, #16
   1694e:	f7fe bcdb 	b.w	15308 <lv_theme_material_init+0x3bc>
   16952:	2000      	movs	r0, #0
   16954:	4b6f      	ldr	r3, [pc, #444]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16956:	4798      	blx	r3
   16958:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1695c:	0042      	lsls	r2, r0, #1
   1695e:	3250      	adds	r2, #80	; 0x50
   16960:	4b6d      	ldr	r3, [pc, #436]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16962:	fba3 3202 	umull	r3, r2, r3, r2
   16966:	f342 12cf 	sbfx	r2, r2, #7, #16
   1696a:	f7fe bccd 	b.w	15308 <lv_theme_material_init+0x3bc>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   1696e:	2000      	movs	r0, #0
   16970:	4b68      	ldr	r3, [pc, #416]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16972:	4798      	blx	r3
   16974:	f100 0214 	add.w	r2, r0, #20
   16978:	0092      	lsls	r2, r2, #2
   1697a:	4867      	ldr	r0, [pc, #412]	; (16b18 <lv_theme_material_init+0x1bcc>)
   1697c:	fba0 3202 	umull	r3, r2, r0, r2
   16980:	f342 12cf 	sbfx	r2, r2, #7, #16
   16984:	f7fe bcd5 	b.w	15332 <lv_theme_material_init+0x3e6>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   16988:	2306      	movs	r3, #6
   1698a:	2110      	movs	r1, #16
   1698c:	2409      	movs	r4, #9
   1698e:	f7fe bcdf 	b.w	15350 <lv_theme_material_init+0x404>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   16992:	2000      	movs	r0, #0
   16994:	4b5f      	ldr	r3, [pc, #380]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16996:	4798      	blx	r3
   16998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1699c:	f100 0250 	add.w	r2, r0, #80	; 0x50
   169a0:	485d      	ldr	r0, [pc, #372]	; (16b18 <lv_theme_material_init+0x1bcc>)
   169a2:	fba0 3202 	umull	r3, r2, r0, r2
   169a6:	f342 12cf 	sbfx	r2, r2, #7, #16
   169aa:	f7fe bd41 	b.w	15430 <lv_theme_material_init+0x4e4>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   169ae:	2000      	movs	r0, #0
   169b0:	4b58      	ldr	r3, [pc, #352]	; (16b14 <lv_theme_material_init+0x1bc8>)
   169b2:	4798      	blx	r3
   169b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169b8:	3050      	adds	r0, #80	; 0x50
   169ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   169be:	d202      	bcs.n	169c6 <lv_theme_material_init+0x1a7a>
   169c0:	2201      	movs	r2, #1
   169c2:	f7fe bd4e 	b.w	15462 <lv_theme_material_init+0x516>
   169c6:	2000      	movs	r0, #0
   169c8:	4b52      	ldr	r3, [pc, #328]	; (16b14 <lv_theme_material_init+0x1bc8>)
   169ca:	4798      	blx	r3
   169cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169d0:	f100 0250 	add.w	r2, r0, #80	; 0x50
   169d4:	4850      	ldr	r0, [pc, #320]	; (16b18 <lv_theme_material_init+0x1bcc>)
   169d6:	fba0 3202 	umull	r3, r2, r0, r2
   169da:	f342 12cf 	sbfx	r2, r2, #7, #16
   169de:	f7fe bd40 	b.w	15462 <lv_theme_material_init+0x516>
   169e2:	2000      	movs	r0, #0
   169e4:	4b4b      	ldr	r3, [pc, #300]	; (16b14 <lv_theme_material_init+0x1bc8>)
   169e6:	4798      	blx	r3
   169e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   169ec:	0042      	lsls	r2, r0, #1
   169ee:	3250      	adds	r2, #80	; 0x50
   169f0:	4b49      	ldr	r3, [pc, #292]	; (16b18 <lv_theme_material_init+0x1bcc>)
   169f2:	fba3 3202 	umull	r3, r2, r3, r2
   169f6:	f342 12cf 	sbfx	r2, r2, #7, #16
   169fa:	f7fe bd32 	b.w	15462 <lv_theme_material_init+0x516>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   169fe:	2000      	movs	r0, #0
   16a00:	4b44      	ldr	r3, [pc, #272]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16a02:	4798      	blx	r3
   16a04:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a08:	3050      	adds	r0, #80	; 0x50
   16a0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16a0e:	d202      	bcs.n	16a16 <lv_theme_material_init+0x1aca>
   16a10:	2201      	movs	r2, #1
   16a12:	f7fe bd3f 	b.w	15494 <lv_theme_material_init+0x548>
   16a16:	2000      	movs	r0, #0
   16a18:	4b3e      	ldr	r3, [pc, #248]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16a1a:	4798      	blx	r3
   16a1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a20:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16a24:	483c      	ldr	r0, [pc, #240]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16a26:	fba0 3202 	umull	r3, r2, r0, r2
   16a2a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a2e:	f7fe bd31 	b.w	15494 <lv_theme_material_init+0x548>
   16a32:	2000      	movs	r0, #0
   16a34:	4b37      	ldr	r3, [pc, #220]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16a36:	4798      	blx	r3
   16a38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a3c:	0042      	lsls	r2, r0, #1
   16a3e:	3250      	adds	r2, #80	; 0x50
   16a40:	4b35      	ldr	r3, [pc, #212]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16a42:	fba3 3202 	umull	r3, r2, r3, r2
   16a46:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a4a:	f7fe bd23 	b.w	15494 <lv_theme_material_init+0x548>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   16a4e:	2000      	movs	r0, #0
   16a50:	4b30      	ldr	r3, [pc, #192]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16a52:	4798      	blx	r3
   16a54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a58:	3050      	adds	r0, #80	; 0x50
   16a5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16a5e:	d202      	bcs.n	16a66 <lv_theme_material_init+0x1b1a>
   16a60:	2201      	movs	r2, #1
   16a62:	f7fe bd30 	b.w	154c6 <lv_theme_material_init+0x57a>
   16a66:	2000      	movs	r0, #0
   16a68:	4b2a      	ldr	r3, [pc, #168]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16a6a:	4798      	blx	r3
   16a6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a70:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16a74:	4828      	ldr	r0, [pc, #160]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16a76:	fba0 3202 	umull	r3, r2, r0, r2
   16a7a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a7e:	f7fe bd22 	b.w	154c6 <lv_theme_material_init+0x57a>
   16a82:	2000      	movs	r0, #0
   16a84:	4b23      	ldr	r3, [pc, #140]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16a86:	4798      	blx	r3
   16a88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16a8c:	0042      	lsls	r2, r0, #1
   16a8e:	3250      	adds	r2, #80	; 0x50
   16a90:	4821      	ldr	r0, [pc, #132]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16a92:	fba0 3202 	umull	r3, r2, r0, r2
   16a96:	f342 12cf 	sbfx	r2, r2, #7, #16
   16a9a:	f7fe bd14 	b.w	154c6 <lv_theme_material_init+0x57a>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   16a9e:	2000      	movs	r0, #0
   16aa0:	4b1c      	ldr	r3, [pc, #112]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16aa2:	4798      	blx	r3
   16aa4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16aa8:	0042      	lsls	r2, r0, #1
   16aaa:	3250      	adds	r2, #80	; 0x50
   16aac:	481a      	ldr	r0, [pc, #104]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16aae:	fba0 3202 	umull	r3, r2, r0, r2
   16ab2:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ab6:	f7fe bd1d 	b.w	154f4 <lv_theme_material_init+0x5a8>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   16aba:	2000      	movs	r0, #0
   16abc:	4b15      	ldr	r3, [pc, #84]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16abe:	4798      	blx	r3
   16ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16ac4:	0082      	lsls	r2, r0, #2
   16ac6:	3250      	adds	r2, #80	; 0x50
   16ac8:	4813      	ldr	r0, [pc, #76]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16aca:	fba0 3202 	umull	r3, r2, r0, r2
   16ace:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ad2:	f7fe bd54 	b.w	1557e <lv_theme_material_init+0x632>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16ad6:	2000      	movs	r0, #0
   16ad8:	4b0e      	ldr	r3, [pc, #56]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16ada:	4798      	blx	r3
   16adc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16ae0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16ae4:	3250      	adds	r2, #80	; 0x50
   16ae6:	480c      	ldr	r0, [pc, #48]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16ae8:	fba0 3202 	umull	r3, r2, r0, r2
   16aec:	f342 12cf 	sbfx	r2, r2, #7, #16
   16af0:	f7fe bd8c 	b.w	1560c <lv_theme_material_init+0x6c0>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16af4:	2000      	movs	r0, #0
   16af6:	4b07      	ldr	r3, [pc, #28]	; (16b14 <lv_theme_material_init+0x1bc8>)
   16af8:	4798      	blx	r3
   16afa:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16afe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16b02:	3250      	adds	r2, #80	; 0x50
   16b04:	4804      	ldr	r0, [pc, #16]	; (16b18 <lv_theme_material_init+0x1bcc>)
   16b06:	fba0 3202 	umull	r3, r2, r0, r2
   16b0a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b0e:	f7fe bd91 	b.w	15634 <lv_theme_material_init+0x6e8>
   16b12:	bf00      	nop
   16b14:	00010181 	.word	0x00010181
   16b18:	cccccccd 	.word	0xcccccccd
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16b1c:	2000      	movs	r0, #0
   16b1e:	4bd2      	ldr	r3, [pc, #840]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16b20:	4798      	blx	r3
   16b22:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16b26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16b2a:	3250      	adds	r2, #80	; 0x50
   16b2c:	48cf      	ldr	r0, [pc, #828]	; (16e6c <lv_theme_material_init+0x1f20>)
   16b2e:	fba0 3202 	umull	r3, r2, r0, r2
   16b32:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b36:	f7fe bd91 	b.w	1565c <lv_theme_material_init+0x710>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16b3a:	2000      	movs	r0, #0
   16b3c:	4bca      	ldr	r3, [pc, #808]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16b3e:	4798      	blx	r3
   16b40:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16b44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   16b48:	3250      	adds	r2, #80	; 0x50
   16b4a:	48c8      	ldr	r0, [pc, #800]	; (16e6c <lv_theme_material_init+0x1f20>)
   16b4c:	fba0 3202 	umull	r3, r2, r0, r2
   16b50:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b54:	f7fe bd96 	b.w	15684 <lv_theme_material_init+0x738>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   16b58:	2000      	movs	r0, #0
   16b5a:	4bc3      	ldr	r3, [pc, #780]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16b5c:	4798      	blx	r3
   16b5e:	f100 0214 	add.w	r2, r0, #20
   16b62:	0092      	lsls	r2, r2, #2
   16b64:	48c1      	ldr	r0, [pc, #772]	; (16e6c <lv_theme_material_init+0x1f20>)
   16b66:	fba0 3202 	umull	r3, r2, r0, r2
   16b6a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b6e:	f7fe bd9e 	b.w	156ae <lv_theme_material_init+0x762>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16b72:	2000      	movs	r0, #0
   16b74:	4bbc      	ldr	r3, [pc, #752]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16b76:	4798      	blx	r3
   16b78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16b7c:	0042      	lsls	r2, r0, #1
   16b7e:	3250      	adds	r2, #80	; 0x50
   16b80:	48ba      	ldr	r0, [pc, #744]	; (16e6c <lv_theme_material_init+0x1f20>)
   16b82:	fba0 3202 	umull	r3, r2, r0, r2
   16b86:	f342 12cf 	sbfx	r2, r2, #7, #16
   16b8a:	f7fe bda3 	b.w	156d4 <lv_theme_material_init+0x788>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   16b8e:	2000      	movs	r0, #0
   16b90:	4bb5      	ldr	r3, [pc, #724]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16b92:	4798      	blx	r3
   16b94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b98:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16b9c:	48b3      	ldr	r0, [pc, #716]	; (16e6c <lv_theme_material_init+0x1f20>)
   16b9e:	fba0 3202 	umull	r3, r2, r0, r2
   16ba2:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ba6:	f7fe bdb9 	b.w	1571c <lv_theme_material_init+0x7d0>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16baa:	2000      	movs	r0, #0
   16bac:	4bae      	ldr	r3, [pc, #696]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16bae:	4798      	blx	r3
   16bb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16bb4:	0042      	lsls	r2, r0, #1
   16bb6:	3250      	adds	r2, #80	; 0x50
   16bb8:	48ac      	ldr	r0, [pc, #688]	; (16e6c <lv_theme_material_init+0x1f20>)
   16bba:	fba0 3202 	umull	r3, r2, r0, r2
   16bbe:	f342 12cf 	sbfx	r2, r2, #7, #16
   16bc2:	f7fe bdbe 	b.w	15742 <lv_theme_material_init+0x7f6>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   16bc6:	2000      	movs	r0, #0
   16bc8:	4ba7      	ldr	r3, [pc, #668]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16bca:	4798      	blx	r3
   16bcc:	f100 0214 	add.w	r2, r0, #20
   16bd0:	0092      	lsls	r2, r2, #2
   16bd2:	48a6      	ldr	r0, [pc, #664]	; (16e6c <lv_theme_material_init+0x1f20>)
   16bd4:	fba0 3202 	umull	r3, r2, r0, r2
   16bd8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16bdc:	f7fe bdd7 	b.w	1578e <lv_theme_material_init+0x842>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16be0:	2000      	movs	r0, #0
   16be2:	4ba1      	ldr	r3, [pc, #644]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16be4:	4798      	blx	r3
   16be6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16bea:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16bee:	489f      	ldr	r0, [pc, #636]	; (16e6c <lv_theme_material_init+0x1f20>)
   16bf0:	fba0 3202 	umull	r3, r2, r0, r2
   16bf4:	f342 12cf 	sbfx	r2, r2, #7, #16
   16bf8:	f7fe bdf0 	b.w	157dc <lv_theme_material_init+0x890>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16bfc:	2000      	movs	r0, #0
   16bfe:	4b9a      	ldr	r3, [pc, #616]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16c00:	4798      	blx	r3
   16c02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c06:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c0a:	4898      	ldr	r0, [pc, #608]	; (16e6c <lv_theme_material_init+0x1f20>)
   16c0c:	fba0 3202 	umull	r3, r2, r0, r2
   16c10:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c14:	f7fe bdf4 	b.w	15800 <lv_theme_material_init+0x8b4>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16c18:	2000      	movs	r0, #0
   16c1a:	4b93      	ldr	r3, [pc, #588]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16c1c:	4798      	blx	r3
   16c1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c22:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c26:	4891      	ldr	r0, [pc, #580]	; (16e6c <lv_theme_material_init+0x1f20>)
   16c28:	fba0 3202 	umull	r3, r2, r0, r2
   16c2c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c30:	f7fe bdf8 	b.w	15824 <lv_theme_material_init+0x8d8>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16c34:	2000      	movs	r0, #0
   16c36:	4b8c      	ldr	r3, [pc, #560]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16c38:	4798      	blx	r3
   16c3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16c3e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c42:	488a      	ldr	r0, [pc, #552]	; (16e6c <lv_theme_material_init+0x1f20>)
   16c44:	fba0 3202 	umull	r3, r2, r0, r2
   16c48:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c4c:	f7fe bdfc 	b.w	15848 <lv_theme_material_init+0x8fc>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   16c50:	2000      	movs	r0, #0
   16c52:	4b85      	ldr	r3, [pc, #532]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16c54:	4798      	blx	r3
   16c56:	f100 0214 	add.w	r2, r0, #20
   16c5a:	0092      	lsls	r2, r2, #2
   16c5c:	4883      	ldr	r0, [pc, #524]	; (16e6c <lv_theme_material_init+0x1f20>)
   16c5e:	fba0 3202 	umull	r3, r2, r0, r2
   16c62:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c66:	f7fe be1c 	b.w	158a2 <lv_theme_material_init+0x956>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   16c6a:	2307      	movs	r3, #7
   16c6c:	210f      	movs	r1, #15
   16c6e:	2408      	movs	r4, #8
   16c70:	f7fe be2b 	b.w	158ca <lv_theme_material_init+0x97e>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   16c74:	2000      	movs	r0, #0
   16c76:	4b7c      	ldr	r3, [pc, #496]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16c78:	4798      	blx	r3
   16c7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16c7e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c82:	487a      	ldr	r0, [pc, #488]	; (16e6c <lv_theme_material_init+0x1f20>)
   16c84:	fba0 3202 	umull	r3, r2, r0, r2
   16c88:	f342 12cf 	sbfx	r2, r2, #7, #16
   16c8c:	f7fe be3c 	b.w	15908 <lv_theme_material_init+0x9bc>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   16c90:	2000      	movs	r0, #0
   16c92:	4b75      	ldr	r3, [pc, #468]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16c94:	4798      	blx	r3
   16c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16c9a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16c9e:	4873      	ldr	r0, [pc, #460]	; (16e6c <lv_theme_material_init+0x1f20>)
   16ca0:	fba0 3202 	umull	r3, r2, r0, r2
   16ca4:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ca8:	f7fe be40 	b.w	1592c <lv_theme_material_init+0x9e0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   16cac:	2000      	movs	r0, #0
   16cae:	4b6e      	ldr	r3, [pc, #440]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16cb0:	4798      	blx	r3
   16cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16cb6:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16cba:	486c      	ldr	r0, [pc, #432]	; (16e6c <lv_theme_material_init+0x1f20>)
   16cbc:	fba0 3202 	umull	r3, r2, r0, r2
   16cc0:	f342 12cf 	sbfx	r2, r2, #7, #16
   16cc4:	f7fe be44 	b.w	15950 <lv_theme_material_init+0xa04>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   16cc8:	2000      	movs	r0, #0
   16cca:	4b67      	ldr	r3, [pc, #412]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16ccc:	4798      	blx	r3
   16cce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16cd2:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16cd6:	4865      	ldr	r0, [pc, #404]	; (16e6c <lv_theme_material_init+0x1f20>)
   16cd8:	fba0 3202 	umull	r3, r2, r0, r2
   16cdc:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ce0:	f7fe be48 	b.w	15974 <lv_theme_material_init+0xa28>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   16ce4:	2000      	movs	r0, #0
   16ce6:	4b60      	ldr	r3, [pc, #384]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16ce8:	4798      	blx	r3
   16cea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16cee:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16cf2:	485e      	ldr	r0, [pc, #376]	; (16e6c <lv_theme_material_init+0x1f20>)
   16cf4:	fba0 3202 	umull	r3, r2, r0, r2
   16cf8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16cfc:	f7fe be4c 	b.w	15998 <lv_theme_material_init+0xa4c>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   16d00:	2000      	movs	r0, #0
   16d02:	4b59      	ldr	r3, [pc, #356]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16d04:	4798      	blx	r3
   16d06:	2232      	movs	r2, #50	; 0x32
   16d08:	fb02 f200 	mul.w	r2, r2, r0
   16d0c:	3250      	adds	r2, #80	; 0x50
   16d0e:	4857      	ldr	r0, [pc, #348]	; (16e6c <lv_theme_material_init+0x1f20>)
   16d10:	fba0 3202 	umull	r3, r2, r0, r2
   16d14:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d18:	f7fe be55 	b.w	159c6 <lv_theme_material_init+0xa7a>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   16d1c:	2000      	movs	r0, #0
   16d1e:	4b52      	ldr	r3, [pc, #328]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16d20:	4798      	blx	r3
   16d22:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16d26:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16d2a:	4850      	ldr	r0, [pc, #320]	; (16e6c <lv_theme_material_init+0x1f20>)
   16d2c:	fba0 3202 	umull	r3, r2, r0, r2
   16d30:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d34:	f7fe be9c 	b.w	15a70 <lv_theme_material_init+0xb24>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   16d38:	2000      	movs	r0, #0
   16d3a:	4b4b      	ldr	r3, [pc, #300]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16d3c:	4798      	blx	r3
   16d3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16d42:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16d46:	4849      	ldr	r0, [pc, #292]	; (16e6c <lv_theme_material_init+0x1f20>)
   16d48:	fba0 3202 	umull	r3, r2, r0, r2
   16d4c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d50:	f7fe bea0 	b.w	15a94 <lv_theme_material_init+0xb48>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   16d54:	2000      	movs	r0, #0
   16d56:	4b44      	ldr	r3, [pc, #272]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16d58:	4798      	blx	r3
   16d5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16d5e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16d62:	4842      	ldr	r0, [pc, #264]	; (16e6c <lv_theme_material_init+0x1f20>)
   16d64:	fba0 3202 	umull	r3, r2, r0, r2
   16d68:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d6c:	f7fe bea4 	b.w	15ab8 <lv_theme_material_init+0xb6c>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   16d70:	2000      	movs	r0, #0
   16d72:	4b3d      	ldr	r3, [pc, #244]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16d74:	4798      	blx	r3
   16d76:	f100 0228 	add.w	r2, r0, #40	; 0x28
   16d7a:	0052      	lsls	r2, r2, #1
   16d7c:	483b      	ldr	r0, [pc, #236]	; (16e6c <lv_theme_material_init+0x1f20>)
   16d7e:	fba0 3202 	umull	r3, r2, r0, r2
   16d82:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d86:	f7fe bede 	b.w	15b46 <lv_theme_material_init+0xbfa>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   16d8a:	2000      	movs	r0, #0
   16d8c:	4b36      	ldr	r3, [pc, #216]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16d8e:	4798      	blx	r3
   16d90:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16d94:	4835      	ldr	r0, [pc, #212]	; (16e6c <lv_theme_material_init+0x1f20>)
   16d96:	fba0 3202 	umull	r3, r2, r0, r2
   16d9a:	f342 12cf 	sbfx	r2, r2, #7, #16
   16d9e:	f7fe beef 	b.w	15b80 <lv_theme_material_init+0xc34>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   16da2:	2315      	movs	r3, #21
   16da4:	212a      	movs	r1, #42	; 0x2a
   16da6:	461c      	mov	r4, r3
   16da8:	f7fe bf02 	b.w	15bb0 <lv_theme_material_init+0xc64>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   16dac:	2000      	movs	r0, #0
   16dae:	4b2e      	ldr	r3, [pc, #184]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16db0:	4798      	blx	r3
   16db2:	2264      	movs	r2, #100	; 0x64
   16db4:	fb02 f200 	mul.w	r2, r2, r0
   16db8:	3250      	adds	r2, #80	; 0x50
   16dba:	482c      	ldr	r0, [pc, #176]	; (16e6c <lv_theme_material_init+0x1f20>)
   16dbc:	fba0 3202 	umull	r3, r2, r0, r2
   16dc0:	f342 12cf 	sbfx	r2, r2, #7, #16
   16dc4:	f7fe bf25 	b.w	15c12 <lv_theme_material_init+0xcc6>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   16dc8:	2000      	movs	r0, #0
   16dca:	4b27      	ldr	r3, [pc, #156]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16dcc:	4798      	blx	r3
   16dce:	2264      	movs	r2, #100	; 0x64
   16dd0:	fb02 f200 	mul.w	r2, r2, r0
   16dd4:	3250      	adds	r2, #80	; 0x50
   16dd6:	4825      	ldr	r0, [pc, #148]	; (16e6c <lv_theme_material_init+0x1f20>)
   16dd8:	fba0 3202 	umull	r3, r2, r0, r2
   16ddc:	f342 12cf 	sbfx	r2, r2, #7, #16
   16de0:	f7fe bf2a 	b.w	15c38 <lv_theme_material_init+0xcec>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   16de4:	231f      	movs	r3, #31
   16de6:	213f      	movs	r1, #63	; 0x3f
   16de8:	461c      	mov	r4, r3
   16dea:	f7fe bf5f 	b.w	15cac <lv_theme_material_init+0xd60>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   16dee:	231d      	movs	r3, #29
   16df0:	213b      	movs	r1, #59	; 0x3b
   16df2:	461c      	mov	r4, r3
   16df4:	f7fe bf70 	b.w	15cd8 <lv_theme_material_init+0xd8c>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   16df8:	231f      	movs	r3, #31
   16dfa:	213f      	movs	r1, #63	; 0x3f
   16dfc:	461c      	mov	r4, r3
   16dfe:	f7fe bf82 	b.w	15d06 <lv_theme_material_init+0xdba>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   16e02:	2307      	movs	r3, #7
   16e04:	210f      	movs	r1, #15
   16e06:	2408      	movs	r4, #8
   16e08:	f7fe bfa5 	b.w	15d56 <lv_theme_material_init+0xe0a>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   16e0c:	2307      	movs	r3, #7
   16e0e:	210f      	movs	r1, #15
   16e10:	2408      	movs	r4, #8
   16e12:	f7fe bfd5 	b.w	15dc0 <lv_theme_material_init+0xe74>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16e16:	2000      	movs	r0, #0
   16e18:	4b13      	ldr	r3, [pc, #76]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16e1a:	4798      	blx	r3
   16e1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e20:	3050      	adds	r0, #80	; 0x50
   16e22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16e26:	d202      	bcs.n	16e2e <lv_theme_material_init+0x1ee2>
   16e28:	2201      	movs	r2, #1
   16e2a:	f7ff b845 	b.w	15eb8 <lv_theme_material_init+0xf6c>
   16e2e:	2000      	movs	r0, #0
   16e30:	4b0d      	ldr	r3, [pc, #52]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16e32:	4798      	blx	r3
   16e34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e38:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16e3c:	480b      	ldr	r0, [pc, #44]	; (16e6c <lv_theme_material_init+0x1f20>)
   16e3e:	fba0 3202 	umull	r3, r2, r0, r2
   16e42:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e46:	f7ff b837 	b.w	15eb8 <lv_theme_material_init+0xf6c>
   16e4a:	2000      	movs	r0, #0
   16e4c:	4b06      	ldr	r3, [pc, #24]	; (16e68 <lv_theme_material_init+0x1f1c>)
   16e4e:	4798      	blx	r3
   16e50:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e54:	0042      	lsls	r2, r0, #1
   16e56:	3250      	adds	r2, #80	; 0x50
   16e58:	4b04      	ldr	r3, [pc, #16]	; (16e6c <lv_theme_material_init+0x1f20>)
   16e5a:	fba3 3202 	umull	r3, r2, r3, r2
   16e5e:	f342 12cf 	sbfx	r2, r2, #7, #16
   16e62:	f7ff b829 	b.w	15eb8 <lv_theme_material_init+0xf6c>
   16e66:	bf00      	nop
   16e68:	00010181 	.word	0x00010181
   16e6c:	cccccccd 	.word	0xcccccccd
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16e70:	2000      	movs	r0, #0
   16e72:	4bcd      	ldr	r3, [pc, #820]	; (171a8 <lv_theme_material_init+0x225c>)
   16e74:	4798      	blx	r3
   16e76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e7a:	3050      	adds	r0, #80	; 0x50
   16e7c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16e80:	d202      	bcs.n	16e88 <lv_theme_material_init+0x1f3c>
   16e82:	2201      	movs	r2, #1
   16e84:	f7ff b831 	b.w	15eea <lv_theme_material_init+0xf9e>
   16e88:	2000      	movs	r0, #0
   16e8a:	4bc7      	ldr	r3, [pc, #796]	; (171a8 <lv_theme_material_init+0x225c>)
   16e8c:	4798      	blx	r3
   16e8e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e92:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16e96:	48c5      	ldr	r0, [pc, #788]	; (171ac <lv_theme_material_init+0x2260>)
   16e98:	fba0 3202 	umull	r3, r2, r0, r2
   16e9c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ea0:	f7ff b823 	b.w	15eea <lv_theme_material_init+0xf9e>
   16ea4:	2000      	movs	r0, #0
   16ea6:	4bc0      	ldr	r3, [pc, #768]	; (171a8 <lv_theme_material_init+0x225c>)
   16ea8:	4798      	blx	r3
   16eaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16eae:	0042      	lsls	r2, r0, #1
   16eb0:	3250      	adds	r2, #80	; 0x50
   16eb2:	4bbe      	ldr	r3, [pc, #760]	; (171ac <lv_theme_material_init+0x2260>)
   16eb4:	fba3 3202 	umull	r3, r2, r3, r2
   16eb8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ebc:	f7ff b815 	b.w	15eea <lv_theme_material_init+0xf9e>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16ec0:	2000      	movs	r0, #0
   16ec2:	4bb9      	ldr	r3, [pc, #740]	; (171a8 <lv_theme_material_init+0x225c>)
   16ec4:	4798      	blx	r3
   16ec6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16eca:	3050      	adds	r0, #80	; 0x50
   16ecc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ed0:	d202      	bcs.n	16ed8 <lv_theme_material_init+0x1f8c>
   16ed2:	2201      	movs	r2, #1
   16ed4:	f7ff b822 	b.w	15f1c <lv_theme_material_init+0xfd0>
   16ed8:	2000      	movs	r0, #0
   16eda:	4bb3      	ldr	r3, [pc, #716]	; (171a8 <lv_theme_material_init+0x225c>)
   16edc:	4798      	blx	r3
   16ede:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16ee2:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16ee6:	48b1      	ldr	r0, [pc, #708]	; (171ac <lv_theme_material_init+0x2260>)
   16ee8:	fba0 3202 	umull	r3, r2, r0, r2
   16eec:	f342 12cf 	sbfx	r2, r2, #7, #16
   16ef0:	f7ff b814 	b.w	15f1c <lv_theme_material_init+0xfd0>
   16ef4:	2000      	movs	r0, #0
   16ef6:	4bac      	ldr	r3, [pc, #688]	; (171a8 <lv_theme_material_init+0x225c>)
   16ef8:	4798      	blx	r3
   16efa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16efe:	0042      	lsls	r2, r0, #1
   16f00:	3250      	adds	r2, #80	; 0x50
   16f02:	4baa      	ldr	r3, [pc, #680]	; (171ac <lv_theme_material_init+0x2260>)
   16f04:	fba3 3202 	umull	r3, r2, r3, r2
   16f08:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f0c:	f7ff b806 	b.w	15f1c <lv_theme_material_init+0xfd0>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16f10:	2000      	movs	r0, #0
   16f12:	4ba5      	ldr	r3, [pc, #660]	; (171a8 <lv_theme_material_init+0x225c>)
   16f14:	4798      	blx	r3
   16f16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16f1a:	3050      	adds	r0, #80	; 0x50
   16f1c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16f20:	d202      	bcs.n	16f28 <lv_theme_material_init+0x1fdc>
   16f22:	2201      	movs	r2, #1
   16f24:	f7ff b813 	b.w	15f4e <lv_theme_material_init+0x1002>
   16f28:	2000      	movs	r0, #0
   16f2a:	4b9f      	ldr	r3, [pc, #636]	; (171a8 <lv_theme_material_init+0x225c>)
   16f2c:	4798      	blx	r3
   16f2e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16f32:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f36:	489d      	ldr	r0, [pc, #628]	; (171ac <lv_theme_material_init+0x2260>)
   16f38:	fba0 3202 	umull	r3, r2, r0, r2
   16f3c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f40:	f7ff b805 	b.w	15f4e <lv_theme_material_init+0x1002>
   16f44:	2000      	movs	r0, #0
   16f46:	4b98      	ldr	r3, [pc, #608]	; (171a8 <lv_theme_material_init+0x225c>)
   16f48:	4798      	blx	r3
   16f4a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16f4e:	0042      	lsls	r2, r0, #1
   16f50:	3250      	adds	r2, #80	; 0x50
   16f52:	4b96      	ldr	r3, [pc, #600]	; (171ac <lv_theme_material_init+0x2260>)
   16f54:	fba3 3202 	umull	r3, r2, r3, r2
   16f58:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f5c:	f7fe bff7 	b.w	15f4e <lv_theme_material_init+0x1002>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16f60:	2000      	movs	r0, #0
   16f62:	4b91      	ldr	r3, [pc, #580]	; (171a8 <lv_theme_material_init+0x225c>)
   16f64:	4798      	blx	r3
   16f66:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16f6a:	3050      	adds	r0, #80	; 0x50
   16f6c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16f70:	d202      	bcs.n	16f78 <lv_theme_material_init+0x202c>
   16f72:	2201      	movs	r2, #1
   16f74:	f7ff b804 	b.w	15f80 <lv_theme_material_init+0x1034>
   16f78:	2000      	movs	r0, #0
   16f7a:	4b8b      	ldr	r3, [pc, #556]	; (171a8 <lv_theme_material_init+0x225c>)
   16f7c:	4798      	blx	r3
   16f7e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16f82:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16f86:	4889      	ldr	r0, [pc, #548]	; (171ac <lv_theme_material_init+0x2260>)
   16f88:	fba0 3202 	umull	r3, r2, r0, r2
   16f8c:	f342 12cf 	sbfx	r2, r2, #7, #16
   16f90:	f7fe bff6 	b.w	15f80 <lv_theme_material_init+0x1034>
   16f94:	2000      	movs	r0, #0
   16f96:	4b84      	ldr	r3, [pc, #528]	; (171a8 <lv_theme_material_init+0x225c>)
   16f98:	4798      	blx	r3
   16f9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16f9e:	0042      	lsls	r2, r0, #1
   16fa0:	3250      	adds	r2, #80	; 0x50
   16fa2:	4b82      	ldr	r3, [pc, #520]	; (171ac <lv_theme_material_init+0x2260>)
   16fa4:	fba3 3202 	umull	r3, r2, r3, r2
   16fa8:	f342 12cf 	sbfx	r2, r2, #7, #16
   16fac:	f7fe bfe8 	b.w	15f80 <lv_theme_material_init+0x1034>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   16fb0:	2000      	movs	r0, #0
   16fb2:	4b7d      	ldr	r3, [pc, #500]	; (171a8 <lv_theme_material_init+0x225c>)
   16fb4:	4798      	blx	r3
   16fb6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16fba:	3050      	adds	r0, #80	; 0x50
   16fbc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16fc0:	d203      	bcs.n	16fca <lv_theme_material_init+0x207e>
   16fc2:	f04f 32ff 	mov.w	r2, #4294967295
   16fc6:	f7fe bff5 	b.w	15fb4 <lv_theme_material_init+0x1068>
   16fca:	2000      	movs	r0, #0
   16fcc:	4b76      	ldr	r3, [pc, #472]	; (171a8 <lv_theme_material_init+0x225c>)
   16fce:	4798      	blx	r3
   16fd0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16fd4:	f100 0250 	add.w	r2, r0, #80	; 0x50
   16fd8:	4874      	ldr	r0, [pc, #464]	; (171ac <lv_theme_material_init+0x2260>)
   16fda:	fba0 3202 	umull	r3, r2, r0, r2
   16fde:	09d2      	lsrs	r2, r2, #7
   16fe0:	4252      	negs	r2, r2
   16fe2:	b212      	sxth	r2, r2
   16fe4:	f7fe bfe6 	b.w	15fb4 <lv_theme_material_init+0x1068>
   16fe8:	2000      	movs	r0, #0
   16fea:	4b6f      	ldr	r3, [pc, #444]	; (171a8 <lv_theme_material_init+0x225c>)
   16fec:	4798      	blx	r3
   16fee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16ff2:	0042      	lsls	r2, r0, #1
   16ff4:	3250      	adds	r2, #80	; 0x50
   16ff6:	486d      	ldr	r0, [pc, #436]	; (171ac <lv_theme_material_init+0x2260>)
   16ff8:	fba0 3202 	umull	r3, r2, r0, r2
   16ffc:	09d2      	lsrs	r2, r2, #7
   16ffe:	4252      	negs	r2, r2
   17000:	b212      	sxth	r2, r2
   17002:	f7fe bfd7 	b.w	15fb4 <lv_theme_material_init+0x1068>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   17006:	2000      	movs	r0, #0
   17008:	4b67      	ldr	r3, [pc, #412]	; (171a8 <lv_theme_material_init+0x225c>)
   1700a:	4798      	blx	r3
   1700c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17010:	0082      	lsls	r2, r0, #2
   17012:	3250      	adds	r2, #80	; 0x50
   17014:	4865      	ldr	r0, [pc, #404]	; (171ac <lv_theme_material_init+0x2260>)
   17016:	fba0 3202 	umull	r3, r2, r0, r2
   1701a:	f342 12cf 	sbfx	r2, r2, #7, #16
   1701e:	f7ff b801 	b.w	16024 <lv_theme_material_init+0x10d8>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   17022:	231d      	movs	r3, #29
   17024:	213b      	movs	r1, #59	; 0x3b
   17026:	461c      	mov	r4, r3
   17028:	f7ff b828 	b.w	1607c <lv_theme_material_init+0x1130>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   1702c:	2307      	movs	r3, #7
   1702e:	210f      	movs	r1, #15
   17030:	2408      	movs	r4, #8
   17032:	f7ff b83a 	b.w	160aa <lv_theme_material_init+0x115e>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   17036:	2000      	movs	r0, #0
   17038:	4b5b      	ldr	r3, [pc, #364]	; (171a8 <lv_theme_material_init+0x225c>)
   1703a:	4798      	blx	r3
   1703c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17040:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17044:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17048:	4858      	ldr	r0, [pc, #352]	; (171ac <lv_theme_material_init+0x2260>)
   1704a:	fba0 3202 	umull	r3, r2, r0, r2
   1704e:	f342 12cf 	sbfx	r2, r2, #7, #16
   17052:	f7ff b84a 	b.w	160ea <lv_theme_material_init+0x119e>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   17056:	231f      	movs	r3, #31
   17058:	213f      	movs	r1, #63	; 0x3f
   1705a:	461c      	mov	r4, r3
   1705c:	f7ff b874 	b.w	16148 <lv_theme_material_init+0x11fc>
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   17060:	2000      	movs	r0, #0
   17062:	4b51      	ldr	r3, [pc, #324]	; (171a8 <lv_theme_material_init+0x225c>)
   17064:	4798      	blx	r3
   17066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1706a:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1706e:	484f      	ldr	r0, [pc, #316]	; (171ac <lv_theme_material_init+0x2260>)
   17070:	fba0 3202 	umull	r3, r2, r0, r2
   17074:	f342 12cf 	sbfx	r2, r2, #7, #16
   17078:	f7ff b8aa 	b.w	161d0 <lv_theme_material_init+0x1284>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1707c:	2000      	movs	r0, #0
   1707e:	4b4a      	ldr	r3, [pc, #296]	; (171a8 <lv_theme_material_init+0x225c>)
   17080:	4798      	blx	r3
   17082:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17086:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1708a:	4848      	ldr	r0, [pc, #288]	; (171ac <lv_theme_material_init+0x2260>)
   1708c:	fba0 3202 	umull	r3, r2, r0, r2
   17090:	f342 12cf 	sbfx	r2, r2, #7, #16
   17094:	f7ff b8e5 	b.w	16262 <lv_theme_material_init+0x1316>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   17098:	2000      	movs	r0, #0
   1709a:	4b43      	ldr	r3, [pc, #268]	; (171a8 <lv_theme_material_init+0x225c>)
   1709c:	4798      	blx	r3
   1709e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   170a2:	f100 0250 	add.w	r2, r0, #80	; 0x50
   170a6:	4841      	ldr	r0, [pc, #260]	; (171ac <lv_theme_material_init+0x2260>)
   170a8:	fba0 3202 	umull	r3, r2, r0, r2
   170ac:	f342 12cf 	sbfx	r2, r2, #7, #16
   170b0:	f7ff b8e9 	b.w	16286 <lv_theme_material_init+0x133a>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   170b4:	2000      	movs	r0, #0
   170b6:	4b3c      	ldr	r3, [pc, #240]	; (171a8 <lv_theme_material_init+0x225c>)
   170b8:	4798      	blx	r3
   170ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   170be:	f100 0250 	add.w	r2, r0, #80	; 0x50
   170c2:	483a      	ldr	r0, [pc, #232]	; (171ac <lv_theme_material_init+0x2260>)
   170c4:	fba0 3202 	umull	r3, r2, r0, r2
   170c8:	f342 12cf 	sbfx	r2, r2, #7, #16
   170cc:	f7ff b8ed 	b.w	162aa <lv_theme_material_init+0x135e>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   170d0:	2000      	movs	r0, #0
   170d2:	4b35      	ldr	r3, [pc, #212]	; (171a8 <lv_theme_material_init+0x225c>)
   170d4:	4798      	blx	r3
   170d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   170da:	0082      	lsls	r2, r0, #2
   170dc:	3250      	adds	r2, #80	; 0x50
   170de:	4833      	ldr	r0, [pc, #204]	; (171ac <lv_theme_material_init+0x2260>)
   170e0:	fba0 3202 	umull	r3, r2, r0, r2
   170e4:	f342 12cf 	sbfx	r2, r2, #7, #16
   170e8:	f7ff b928 	b.w	1633c <lv_theme_material_init+0x13f0>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   170ec:	2000      	movs	r0, #0
   170ee:	4b2e      	ldr	r3, [pc, #184]	; (171a8 <lv_theme_material_init+0x225c>)
   170f0:	4798      	blx	r3
   170f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   170f6:	0082      	lsls	r2, r0, #2
   170f8:	3250      	adds	r2, #80	; 0x50
   170fa:	482c      	ldr	r0, [pc, #176]	; (171ac <lv_theme_material_init+0x2260>)
   170fc:	fba0 3202 	umull	r3, r2, r0, r2
   17100:	f342 12cf 	sbfx	r2, r2, #7, #16
   17104:	f7ff b92d 	b.w	16362 <lv_theme_material_init+0x1416>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   17108:	2000      	movs	r0, #0
   1710a:	4b27      	ldr	r3, [pc, #156]	; (171a8 <lv_theme_material_init+0x225c>)
   1710c:	4798      	blx	r3
   1710e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17112:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17116:	4825      	ldr	r0, [pc, #148]	; (171ac <lv_theme_material_init+0x2260>)
   17118:	fba0 3202 	umull	r3, r2, r0, r2
   1711c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17120:	f7ff b953 	b.w	163ca <lv_theme_material_init+0x147e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   17124:	2000      	movs	r0, #0
   17126:	4b20      	ldr	r3, [pc, #128]	; (171a8 <lv_theme_material_init+0x225c>)
   17128:	4798      	blx	r3
   1712a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1712e:	3050      	adds	r0, #80	; 0x50
   17130:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17134:	d202      	bcs.n	1713c <lv_theme_material_init+0x21f0>
   17136:	2201      	movs	r2, #1
   17138:	f7ff b96a 	b.w	16410 <lv_theme_material_init+0x14c4>
   1713c:	2000      	movs	r0, #0
   1713e:	4b1a      	ldr	r3, [pc, #104]	; (171a8 <lv_theme_material_init+0x225c>)
   17140:	4798      	blx	r3
   17142:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17146:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1714a:	4818      	ldr	r0, [pc, #96]	; (171ac <lv_theme_material_init+0x2260>)
   1714c:	fba0 3202 	umull	r3, r2, r0, r2
   17150:	f342 12cf 	sbfx	r2, r2, #7, #16
   17154:	f7ff b95c 	b.w	16410 <lv_theme_material_init+0x14c4>
   17158:	2000      	movs	r0, #0
   1715a:	4b13      	ldr	r3, [pc, #76]	; (171a8 <lv_theme_material_init+0x225c>)
   1715c:	4798      	blx	r3
   1715e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17162:	0042      	lsls	r2, r0, #1
   17164:	3250      	adds	r2, #80	; 0x50
   17166:	4b11      	ldr	r3, [pc, #68]	; (171ac <lv_theme_material_init+0x2260>)
   17168:	fba3 3202 	umull	r3, r2, r3, r2
   1716c:	f342 12cf 	sbfx	r2, r2, #7, #16
   17170:	f7ff b94e 	b.w	16410 <lv_theme_material_init+0x14c4>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   17174:	2000      	movs	r0, #0
   17176:	4b0c      	ldr	r3, [pc, #48]	; (171a8 <lv_theme_material_init+0x225c>)
   17178:	4798      	blx	r3
   1717a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1717e:	3050      	adds	r0, #80	; 0x50
   17180:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17184:	d202      	bcs.n	1718c <lv_theme_material_init+0x2240>
   17186:	2201      	movs	r2, #1
   17188:	f7ff b95b 	b.w	16442 <lv_theme_material_init+0x14f6>
   1718c:	2000      	movs	r0, #0
   1718e:	4b06      	ldr	r3, [pc, #24]	; (171a8 <lv_theme_material_init+0x225c>)
   17190:	4798      	blx	r3
   17192:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17196:	f100 0250 	add.w	r2, r0, #80	; 0x50
   1719a:	4804      	ldr	r0, [pc, #16]	; (171ac <lv_theme_material_init+0x2260>)
   1719c:	fba0 3202 	umull	r3, r2, r0, r2
   171a0:	f342 12cf 	sbfx	r2, r2, #7, #16
   171a4:	f7ff b94d 	b.w	16442 <lv_theme_material_init+0x14f6>
   171a8:	00010181 	.word	0x00010181
   171ac:	cccccccd 	.word	0xcccccccd
   171b0:	2000      	movs	r0, #0
   171b2:	4b92      	ldr	r3, [pc, #584]	; (173fc <lv_theme_material_init+0x24b0>)
   171b4:	4798      	blx	r3
   171b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   171ba:	0042      	lsls	r2, r0, #1
   171bc:	3250      	adds	r2, #80	; 0x50
   171be:	4b90      	ldr	r3, [pc, #576]	; (17400 <lv_theme_material_init+0x24b4>)
   171c0:	fba3 3202 	umull	r3, r2, r3, r2
   171c4:	f342 12cf 	sbfx	r2, r2, #7, #16
   171c8:	f7ff b93b 	b.w	16442 <lv_theme_material_init+0x14f6>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   171cc:	2000      	movs	r0, #0
   171ce:	4b8b      	ldr	r3, [pc, #556]	; (173fc <lv_theme_material_init+0x24b0>)
   171d0:	4798      	blx	r3
   171d2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   171d6:	3050      	adds	r0, #80	; 0x50
   171d8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   171dc:	d202      	bcs.n	171e4 <lv_theme_material_init+0x2298>
   171de:	2201      	movs	r2, #1
   171e0:	f7ff b948 	b.w	16474 <lv_theme_material_init+0x1528>
   171e4:	2000      	movs	r0, #0
   171e6:	4b85      	ldr	r3, [pc, #532]	; (173fc <lv_theme_material_init+0x24b0>)
   171e8:	4798      	blx	r3
   171ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   171ee:	f100 0250 	add.w	r2, r0, #80	; 0x50
   171f2:	4883      	ldr	r0, [pc, #524]	; (17400 <lv_theme_material_init+0x24b4>)
   171f4:	fba0 3202 	umull	r3, r2, r0, r2
   171f8:	f342 12cf 	sbfx	r2, r2, #7, #16
   171fc:	f7ff b93a 	b.w	16474 <lv_theme_material_init+0x1528>
   17200:	2000      	movs	r0, #0
   17202:	4b7e      	ldr	r3, [pc, #504]	; (173fc <lv_theme_material_init+0x24b0>)
   17204:	4798      	blx	r3
   17206:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1720a:	0042      	lsls	r2, r0, #1
   1720c:	3250      	adds	r2, #80	; 0x50
   1720e:	4b7c      	ldr	r3, [pc, #496]	; (17400 <lv_theme_material_init+0x24b4>)
   17210:	fba3 3202 	umull	r3, r2, r3, r2
   17214:	f342 12cf 	sbfx	r2, r2, #7, #16
   17218:	f7ff b92c 	b.w	16474 <lv_theme_material_init+0x1528>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1721c:	2000      	movs	r0, #0
   1721e:	4b77      	ldr	r3, [pc, #476]	; (173fc <lv_theme_material_init+0x24b0>)
   17220:	4798      	blx	r3
   17222:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17226:	3050      	adds	r0, #80	; 0x50
   17228:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1722c:	d202      	bcs.n	17234 <lv_theme_material_init+0x22e8>
   1722e:	2201      	movs	r2, #1
   17230:	f7ff b94a 	b.w	164c8 <lv_theme_material_init+0x157c>
   17234:	2000      	movs	r0, #0
   17236:	4b71      	ldr	r3, [pc, #452]	; (173fc <lv_theme_material_init+0x24b0>)
   17238:	4798      	blx	r3
   1723a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1723e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17242:	486f      	ldr	r0, [pc, #444]	; (17400 <lv_theme_material_init+0x24b4>)
   17244:	fba0 3202 	umull	r3, r2, r0, r2
   17248:	f342 12cf 	sbfx	r2, r2, #7, #16
   1724c:	f7ff b93c 	b.w	164c8 <lv_theme_material_init+0x157c>
   17250:	2000      	movs	r0, #0
   17252:	4b6a      	ldr	r3, [pc, #424]	; (173fc <lv_theme_material_init+0x24b0>)
   17254:	4798      	blx	r3
   17256:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1725a:	0042      	lsls	r2, r0, #1
   1725c:	3250      	adds	r2, #80	; 0x50
   1725e:	4b68      	ldr	r3, [pc, #416]	; (17400 <lv_theme_material_init+0x24b4>)
   17260:	fba3 3202 	umull	r3, r2, r3, r2
   17264:	f342 12cf 	sbfx	r2, r2, #7, #16
   17268:	f7ff b92e 	b.w	164c8 <lv_theme_material_init+0x157c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1726c:	2000      	movs	r0, #0
   1726e:	4b63      	ldr	r3, [pc, #396]	; (173fc <lv_theme_material_init+0x24b0>)
   17270:	4798      	blx	r3
   17272:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17276:	3050      	adds	r0, #80	; 0x50
   17278:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1727c:	d202      	bcs.n	17284 <lv_theme_material_init+0x2338>
   1727e:	2201      	movs	r2, #1
   17280:	f7ff b93b 	b.w	164fa <lv_theme_material_init+0x15ae>
   17284:	2000      	movs	r0, #0
   17286:	4b5d      	ldr	r3, [pc, #372]	; (173fc <lv_theme_material_init+0x24b0>)
   17288:	4798      	blx	r3
   1728a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1728e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17292:	485b      	ldr	r0, [pc, #364]	; (17400 <lv_theme_material_init+0x24b4>)
   17294:	fba0 3202 	umull	r3, r2, r0, r2
   17298:	f342 12cf 	sbfx	r2, r2, #7, #16
   1729c:	f7ff b92d 	b.w	164fa <lv_theme_material_init+0x15ae>
   172a0:	2000      	movs	r0, #0
   172a2:	4b56      	ldr	r3, [pc, #344]	; (173fc <lv_theme_material_init+0x24b0>)
   172a4:	4798      	blx	r3
   172a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   172aa:	0042      	lsls	r2, r0, #1
   172ac:	3250      	adds	r2, #80	; 0x50
   172ae:	4854      	ldr	r0, [pc, #336]	; (17400 <lv_theme_material_init+0x24b4>)
   172b0:	fba0 3202 	umull	r3, r2, r0, r2
   172b4:	f342 12cf 	sbfx	r2, r2, #7, #16
   172b8:	f7ff b91f 	b.w	164fa <lv_theme_material_init+0x15ae>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   172bc:	2000      	movs	r0, #0
   172be:	4b4f      	ldr	r3, [pc, #316]	; (173fc <lv_theme_material_init+0x24b0>)
   172c0:	4798      	blx	r3
   172c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   172c6:	3050      	adds	r0, #80	; 0x50
   172c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   172cc:	d202      	bcs.n	172d4 <lv_theme_material_init+0x2388>
   172ce:	2201      	movs	r2, #1
   172d0:	f7ff b955 	b.w	1657e <lv_theme_material_init+0x1632>
   172d4:	2000      	movs	r0, #0
   172d6:	4b49      	ldr	r3, [pc, #292]	; (173fc <lv_theme_material_init+0x24b0>)
   172d8:	4798      	blx	r3
   172da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   172de:	f100 0250 	add.w	r2, r0, #80	; 0x50
   172e2:	4847      	ldr	r0, [pc, #284]	; (17400 <lv_theme_material_init+0x24b4>)
   172e4:	fba0 3202 	umull	r3, r2, r0, r2
   172e8:	f342 12cf 	sbfx	r2, r2, #7, #16
   172ec:	f7ff b947 	b.w	1657e <lv_theme_material_init+0x1632>
   172f0:	2000      	movs	r0, #0
   172f2:	4b42      	ldr	r3, [pc, #264]	; (173fc <lv_theme_material_init+0x24b0>)
   172f4:	4798      	blx	r3
   172f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   172fa:	0042      	lsls	r2, r0, #1
   172fc:	3250      	adds	r2, #80	; 0x50
   172fe:	4b40      	ldr	r3, [pc, #256]	; (17400 <lv_theme_material_init+0x24b4>)
   17300:	fba3 3202 	umull	r3, r2, r3, r2
   17304:	f342 12cf 	sbfx	r2, r2, #7, #16
   17308:	f7ff b939 	b.w	1657e <lv_theme_material_init+0x1632>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   1730c:	2000      	movs	r0, #0
   1730e:	4b3b      	ldr	r3, [pc, #236]	; (173fc <lv_theme_material_init+0x24b0>)
   17310:	4798      	blx	r3
   17312:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17316:	3050      	adds	r0, #80	; 0x50
   17318:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1731c:	d202      	bcs.n	17324 <lv_theme_material_init+0x23d8>
   1731e:	2201      	movs	r2, #1
   17320:	f7ff b946 	b.w	165b0 <lv_theme_material_init+0x1664>
   17324:	2000      	movs	r0, #0
   17326:	4b35      	ldr	r3, [pc, #212]	; (173fc <lv_theme_material_init+0x24b0>)
   17328:	4798      	blx	r3
   1732a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1732e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17332:	4833      	ldr	r0, [pc, #204]	; (17400 <lv_theme_material_init+0x24b4>)
   17334:	fba0 3202 	umull	r3, r2, r0, r2
   17338:	f342 12cf 	sbfx	r2, r2, #7, #16
   1733c:	f7ff b938 	b.w	165b0 <lv_theme_material_init+0x1664>
   17340:	2000      	movs	r0, #0
   17342:	4b2e      	ldr	r3, [pc, #184]	; (173fc <lv_theme_material_init+0x24b0>)
   17344:	4798      	blx	r3
   17346:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1734a:	0042      	lsls	r2, r0, #1
   1734c:	3250      	adds	r2, #80	; 0x50
   1734e:	4b2c      	ldr	r3, [pc, #176]	; (17400 <lv_theme_material_init+0x24b4>)
   17350:	fba3 3202 	umull	r3, r2, r3, r2
   17354:	f342 12cf 	sbfx	r2, r2, #7, #16
   17358:	f7ff b92a 	b.w	165b0 <lv_theme_material_init+0x1664>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   1735c:	2000      	movs	r0, #0
   1735e:	4b27      	ldr	r3, [pc, #156]	; (173fc <lv_theme_material_init+0x24b0>)
   17360:	4798      	blx	r3
   17362:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17366:	3050      	adds	r0, #80	; 0x50
   17368:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1736c:	d202      	bcs.n	17374 <lv_theme_material_init+0x2428>
   1736e:	2201      	movs	r2, #1
   17370:	f7ff b937 	b.w	165e2 <lv_theme_material_init+0x1696>
   17374:	2000      	movs	r0, #0
   17376:	4b21      	ldr	r3, [pc, #132]	; (173fc <lv_theme_material_init+0x24b0>)
   17378:	4798      	blx	r3
   1737a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1737e:	f100 0250 	add.w	r2, r0, #80	; 0x50
   17382:	481f      	ldr	r0, [pc, #124]	; (17400 <lv_theme_material_init+0x24b4>)
   17384:	fba0 3202 	umull	r3, r2, r0, r2
   17388:	f342 12cf 	sbfx	r2, r2, #7, #16
   1738c:	f7ff b929 	b.w	165e2 <lv_theme_material_init+0x1696>
   17390:	2000      	movs	r0, #0
   17392:	4b1a      	ldr	r3, [pc, #104]	; (173fc <lv_theme_material_init+0x24b0>)
   17394:	4798      	blx	r3
   17396:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1739a:	0042      	lsls	r2, r0, #1
   1739c:	3250      	adds	r2, #80	; 0x50
   1739e:	4b18      	ldr	r3, [pc, #96]	; (17400 <lv_theme_material_init+0x24b4>)
   173a0:	fba3 3202 	umull	r3, r2, r3, r2
   173a4:	f342 12cf 	sbfx	r2, r2, #7, #16
   173a8:	f7ff b91b 	b.w	165e2 <lv_theme_material_init+0x1696>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   173ac:	2000      	movs	r0, #0
   173ae:	4b13      	ldr	r3, [pc, #76]	; (173fc <lv_theme_material_init+0x24b0>)
   173b0:	4798      	blx	r3
   173b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173b6:	3050      	adds	r0, #80	; 0x50
   173b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   173bc:	d202      	bcs.n	173c4 <lv_theme_material_init+0x2478>
   173be:	2201      	movs	r2, #1
   173c0:	f7ff b928 	b.w	16614 <lv_theme_material_init+0x16c8>
   173c4:	2000      	movs	r0, #0
   173c6:	4b0d      	ldr	r3, [pc, #52]	; (173fc <lv_theme_material_init+0x24b0>)
   173c8:	4798      	blx	r3
   173ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173ce:	f100 0250 	add.w	r2, r0, #80	; 0x50
   173d2:	480b      	ldr	r0, [pc, #44]	; (17400 <lv_theme_material_init+0x24b4>)
   173d4:	fba0 3202 	umull	r3, r2, r0, r2
   173d8:	f342 12cf 	sbfx	r2, r2, #7, #16
   173dc:	f7ff b91a 	b.w	16614 <lv_theme_material_init+0x16c8>
   173e0:	2000      	movs	r0, #0
   173e2:	4b06      	ldr	r3, [pc, #24]	; (173fc <lv_theme_material_init+0x24b0>)
   173e4:	4798      	blx	r3
   173e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   173ea:	0042      	lsls	r2, r0, #1
   173ec:	3250      	adds	r2, #80	; 0x50
   173ee:	4804      	ldr	r0, [pc, #16]	; (17400 <lv_theme_material_init+0x24b4>)
   173f0:	fba0 3202 	umull	r3, r2, r0, r2
   173f4:	f342 12cf 	sbfx	r2, r2, #7, #16
   173f8:	f7ff b90c 	b.w	16614 <lv_theme_material_init+0x16c8>
   173fc:	00010181 	.word	0x00010181
   17400:	cccccccd 	.word	0xcccccccd

00017404 <__libc_init_array>:
   17404:	b570      	push	{r4, r5, r6, lr}
   17406:	4e0d      	ldr	r6, [pc, #52]	; (1743c <__libc_init_array+0x38>)
   17408:	4c0d      	ldr	r4, [pc, #52]	; (17440 <__libc_init_array+0x3c>)
   1740a:	1ba4      	subs	r4, r4, r6
   1740c:	10a4      	asrs	r4, r4, #2
   1740e:	2500      	movs	r5, #0
   17410:	42a5      	cmp	r5, r4
   17412:	d109      	bne.n	17428 <__libc_init_array+0x24>
   17414:	4e0b      	ldr	r6, [pc, #44]	; (17444 <__libc_init_array+0x40>)
   17416:	4c0c      	ldr	r4, [pc, #48]	; (17448 <__libc_init_array+0x44>)
   17418:	f004 f884 	bl	1b524 <_init>
   1741c:	1ba4      	subs	r4, r4, r6
   1741e:	10a4      	asrs	r4, r4, #2
   17420:	2500      	movs	r5, #0
   17422:	42a5      	cmp	r5, r4
   17424:	d105      	bne.n	17432 <__libc_init_array+0x2e>
   17426:	bd70      	pop	{r4, r5, r6, pc}
   17428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1742c:	4798      	blx	r3
   1742e:	3501      	adds	r5, #1
   17430:	e7ee      	b.n	17410 <__libc_init_array+0xc>
   17432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   17436:	4798      	blx	r3
   17438:	3501      	adds	r5, #1
   1743a:	e7f2      	b.n	17422 <__libc_init_array+0x1e>
   1743c:	0001b530 	.word	0x0001b530
   17440:	0001b530 	.word	0x0001b530
   17444:	0001b530 	.word	0x0001b530
   17448:	0001b534 	.word	0x0001b534

0001744c <memcmp>:
   1744c:	b510      	push	{r4, lr}
   1744e:	3901      	subs	r1, #1
   17450:	4402      	add	r2, r0
   17452:	4290      	cmp	r0, r2
   17454:	d101      	bne.n	1745a <memcmp+0xe>
   17456:	2000      	movs	r0, #0
   17458:	bd10      	pop	{r4, pc}
   1745a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1745e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   17462:	42a3      	cmp	r3, r4
   17464:	d0f5      	beq.n	17452 <memcmp+0x6>
   17466:	1b18      	subs	r0, r3, r4
   17468:	bd10      	pop	{r4, pc}

0001746a <strcmp>:
   1746a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1746e:	f811 3b01 	ldrb.w	r3, [r1], #1
   17472:	2a01      	cmp	r2, #1
   17474:	bf28      	it	cs
   17476:	429a      	cmpcs	r2, r3
   17478:	d0f7      	beq.n	1746a <strcmp>
   1747a:	1ad0      	subs	r0, r2, r3
   1747c:	4770      	bx	lr

0001747e <strcpy>:
   1747e:	4603      	mov	r3, r0
   17480:	f811 2b01 	ldrb.w	r2, [r1], #1
   17484:	f803 2b01 	strb.w	r2, [r3], #1
   17488:	2a00      	cmp	r2, #0
   1748a:	d1f9      	bne.n	17480 <strcpy+0x2>
   1748c:	4770      	bx	lr

0001748e <strlen>:
   1748e:	4603      	mov	r3, r0
   17490:	f813 2b01 	ldrb.w	r2, [r3], #1
   17494:	2a00      	cmp	r2, #0
   17496:	d1fb      	bne.n	17490 <strlen+0x2>
   17498:	1a18      	subs	r0, r3, r0
   1749a:	3801      	subs	r0, #1
   1749c:	4770      	bx	lr
   1749e:	0000      	movs	r0, r0
   174a0:	682f2e2e 	.word	0x682f2e2e
   174a4:	702f6c70 	.word	0x702f6c70
   174a8:	2f74726f 	.word	0x2f74726f
   174ac:	5f6c7068 	.word	0x5f6c7068
   174b0:	6f697067 	.word	0x6f697067
   174b4:	7361625f 	.word	0x7361625f
   174b8:	00682e65 	.word	0x00682e65
   174bc:	682f2e2e 	.word	0x682f2e2e
   174c0:	732f6c61 	.word	0x732f6c61
   174c4:	682f6372 	.word	0x682f6372
   174c8:	695f6c61 	.word	0x695f6c61
   174cc:	6d5f6332 	.word	0x6d5f6332
   174d0:	6e79735f 	.word	0x6e79735f
   174d4:	00632e63 	.word	0x00632e63
   174d8:	682f2e2e 	.word	0x682f2e2e
   174dc:	732f6c61 	.word	0x732f6c61
   174e0:	682f6372 	.word	0x682f6372
   174e4:	695f6c61 	.word	0x695f6c61
   174e8:	00632e6f 	.word	0x00632e6f
   174ec:	682f2e2e 	.word	0x682f2e2e
   174f0:	732f6c61 	.word	0x732f6c61
   174f4:	682f6372 	.word	0x682f6372
   174f8:	745f6c61 	.word	0x745f6c61
   174fc:	72656d69 	.word	0x72656d69
   17500:	0000632e 	.word	0x0000632e
   17504:	682f2e2e 	.word	0x682f2e2e
   17508:	732f6c61 	.word	0x732f6c61
   1750c:	682f6372 	.word	0x682f6372
   17510:	755f6c61 	.word	0x755f6c61
   17514:	74726173 	.word	0x74726173
   17518:	7973615f 	.word	0x7973615f
   1751c:	632e636e 	.word	0x632e636e
   17520:	00000000 	.word	0x00000000
   17524:	682f2e2e 	.word	0x682f2e2e
   17528:	752f6c61 	.word	0x752f6c61
   1752c:	736c6974 	.word	0x736c6974
   17530:	6372732f 	.word	0x6372732f
   17534:	6974752f 	.word	0x6974752f
   17538:	6c5f736c 	.word	0x6c5f736c
   1753c:	2e747369 	.word	0x2e747369
   17540:	00000063 	.word	0x00000063
   17544:	682f2e2e 	.word	0x682f2e2e
   17548:	752f6c61 	.word	0x752f6c61
   1754c:	736c6974 	.word	0x736c6974
   17550:	6372732f 	.word	0x6372732f
   17554:	6974752f 	.word	0x6974752f
   17558:	725f736c 	.word	0x725f736c
   1755c:	62676e69 	.word	0x62676e69
   17560:	65666675 	.word	0x65666675
   17564:	00632e72 	.word	0x00632e72
   17568:	40003000 	.word	0x40003000
   1756c:	40003400 	.word	0x40003400
   17570:	41012000 	.word	0x41012000
   17574:	41014000 	.word	0x41014000
   17578:	43000000 	.word	0x43000000
   1757c:	43000400 	.word	0x43000400
   17580:	43000800 	.word	0x43000800
   17584:	43000c00 	.word	0x43000c00

00017588 <_i2cms>:
   17588:	00000003 00200014 00000100 000000ff     ...... .........
   17598:	00d70000 07270400 682f2e2e 732f6c70     ......'.../hpl/s
   175a8:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   175b8:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
   175c8:	4101c000 42001400 42001800 43001400     ...A...B...B...C
   175d8:	43001800                                ...C

000175dc <_tcs>:
   175dc:	006b0000 00000308 00000000 00003a97     ..k..........:..
   175ec:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   175fc:	63745f6c 0000632e 2074754f 6d20666f     l_tc.c..Out of m
   1760c:	726f6d65 00000079 0000ffff 4c4c554e     emory.......NULL
   1761c:	696f7020 7265746e 00000000 6f5f766c      pointer....lv_o
   1762c:	00006a62 0000ffff 640a6f4e 00617461     bj......No.data.

0001763c <_lv_bpp1_opa_table>:
   1763c:	0000ff00                                ....

00017640 <_lv_bpp2_opa_table>:
   17640:	ffaa5500                                .U..

00017644 <_lv_bpp4_opa_table>:
   17644:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

00017654 <_lv_bpp8_opa_table>:
   17654:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   17664:	13121110 17161514 1b1a1918 1f1e1d1c     ................
   17674:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
   17684:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
   17694:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
   176a4:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
   176b4:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
   176c4:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
   176d4:	83828180 87868584 8b8a8988 8f8e8d8c     ................
   176e4:	93929190 97969594 9b9a9998 9f9e9d9c     ................
   176f4:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
   17704:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   17714:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
   17724:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   17734:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
   17744:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00017754 <_lv_bpp3_opa_table>:
   17754:	6d492400 ffdbb692                       .$Im....

0001775c <wcorr.10355>:
   1775c:	81808080 83828281 87868584 8d8c8a89     ................
   1776c:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
   1777c:	000000b5 0000ffff 33221100 77665544     .........."3DUfw
   1778c:	bbaa9988 ffeeddcc 33221100 77665544     .........."3DUfw
   1779c:	bbaa9988 ffeeddcc 006e6962              ........bin.

000177a8 <kern_classes>:
   177a8:	000177b8 00018404 00018368 0000313d     .w......h...=1..

000177b8 <kern_class_values>:
   177b8:	00000100 00000000 00000100 00000003     ................
   177c8:	00000200 00000000 00000000 00000000     ................
   177d8:	00010000 00000000 00000000 00000000     ................
   177e8:	000c0100 0000fa07 f1f20000 04060c02     ................
   177f8:	010d02f6 0008030b 00000000 00000000     ................
   17808:	020f0000 000000fe 00000000 00000000     ................
   17818:	f8000500 00000000 0504fb00 00fd0000     ................
   17828:	fd0003fe fbfffd00 00000000 fd0000fd     ................
   17838:	fd0000fc 0000fb00 00000000 fd000000     ................
   17848:	00fc00fd 00e100f9 0500fb00 fb000008     ................
   17858:	05080303 000005fc 000000f1 00000000     ................
   17868:	00000000 000000f7 00000000 00000000     ................
   17878:	f9000000 f600f3fd 000000fe 000a0100     ................
   17888:	01fffef8 0000fc00 0000edfe 00000000     ................
   17898:	00000000 0afeec00 00000000 00000000     ................
   178a8:	00000000 000000f6 00000000 08000000     ................
   178b8:	00000300 000000fb 00000000 00000000     ................
   178c8:	00000000 020a0000 00000001 00000000     ................
	...
   178f8:	000000f7 00000000 00000000 00000000     ................
   17908:	00000000 02000000 fd080305 fd050000     ................
   17918:	0702ddf8 00fd0105 00080009 00e80008     ................
   17928:	080008fd 000305fd 00fd0100 0014fc00     ................
   17938:	00080014 0804030b f7000000 00000000     ................
   17948:	0200fe01 02fbfdfb 0000fd00 0000f600     ................
	...
   17960:	0000ef00 00000000 00000000 00000000     ................
   17970:	00f20100 000000f0 1900fe00 0303fdfd     ................
   17980:	03fd00fe 00f20000 00000000 00000000     ................
   17990:	00e70000 00000003 00000000 00000000     ................
   179a0:	0f00f000 00f70000 e7ef0008 0008fbef     ................
   179b0:	0300ef00 00fc00fa 00000000 00000000     ................
   179c0:	07000000 0000e108 00000000 00000000     ................
   179d0:	000c0000 00000002 02020000 ff00fbfd     ................
   179e0:	0000fdff 000000fe 00fe00fb fa00fbfa     ................
   179f0:	00fbf8f8 00fb00fb fe000000 00030000     ................
   17a00:	0100fd02 03000000 000000fe ff0303fe     ................
   17a10:	fb000000 0000ff00 01000000 00fe0300     ................
   17a20:	00fc00fd 0800fe00 00fd0000 00000000     ................
   17a30:	fefe01ff 00fd0000 000000fd 00000000     ................
   17a40:	ffff0000 00fdfd00 00000000 fe000001     ................
   17a50:	fdfdfd00 00000000 00000000 0000fe00     ................
   17a60:	fdfe0000 f800fc00 0005f8fe 0503fb00     ................
   17a70:	fffa0007 f4ff00fd f202fe03 01000003     ................
   17a80:	fef200f3 f300feea 00070500 00000003     ................
   17a90:	fb000100 00f800fd 00fd0000 00fd0000     ................
   17aa0:	00000000 ff00ffff 000000fd 00000000     ................
   17ab0:	fe00fdfd 0000fefd 000000fd 00000000     ................
   17ac0:	00000000 fd00fefe fb00fe00 fd000003     ................
   17ad0:	00030301 00000000 0000fe00 02000000     ................
   17ae0:	00fd0000 00fdfefd 00000000 00020000     ................
   17af0:	000000fe 00fcfd00 fe0800fb 0000f801     ................
   17b00:	f5f3f307 fe0003fb fb00fbef fb04fb00     ................
   17b10:	00f900f0 02ff0100 000300fe f300f6f8     ................
   17b20:	f8fafbfa fbfff9fd 010002f9 0000fd00     ................
   17b30:	03000200 00000000 00000000 fd000000     ................
   17b40:	ff00ff00 fafc00fd f800fffa 00000000     ................
   17b50:	00fe0000 01000000 000000fe 00000003     ................
   17b60:	00000000 00000c00 00000000 00000002     ................
   17b70:	000000fd 00000000 00000000 000300fb     ................
	...
   17b8c:	000000fe 000000fb 00f8f300 f3fc0000     ................
   17b9c:	03fd0000 0000f900 00000000 00000000     ................
   17bac:	fb0000fc 00000000 00000000 00000000     ................
   17bbc:	00fb0003 03000000 fbfb0200 fdfdfd00     ................
   17bcc:	00000000 00f80000 fdfc00fd f8fafa00     ................
   17bdc:	00fb00fe 000000f8 00001400 fd000001     ................
   17bec:	f5000300 00000000 08fbe800 00f5fe08     ................
   17bfc:	f300fc03 ee03fdff 040003fd f8f7fcf7     ................
   17c0c:	f10000f5 00000f00 000000ff f9fdffff     ................
   17c1c:	00e8fff8 00000000 00000000 00000001     ................
	...
   17c38:	ff00fd00 0000fcfd 00fd00fb 00000000     ................
	...
   17c50:	00ff0000 050000fb fa0003ff f9fffe03     ................
   17c60:	fdfd00fd fcfc00fe fffe0000 00fdfcfe     ................
   17c70:	0300fd00 00fa00fe 00fb0000 fcfc00fc     ................
   17c80:	00000003 00000000 0003fb00 fdfe00fc     ................
   17c90:	fefefef8 fffdfeff 00000000 fefefd00     ................
   17ca0:	00000000 fe00fe03 fe000000 fdfefefd     ................
   17cb0:	0a0200fe 00f900ff fd0005fe 0004fdf5     ................
   17cc0:	03fcf400 fe0002fc fc00f8fe fc000001     ................
   17cd0:	03000000 00fbfb03 fdfcfdfc 01fc00fd     ................
   17ce0:	0008fcfb 00000000 00000000 00000003     ................
	...
   17d04:	000000fc 00000000 00000000 00000000     ................
	...
   17d30:	000000fe 00000000 00000000 00000000     ................
	...
   17d4c:	fdfe0000 00000000 00000000 00000000     ................
   17d5c:	fd0000fc fdfd0000 00000000 000000fd     ................
   17d6c:	0000ff00 fe000000 00000000 00fb00fc     ................
   17d7c:	00f80000 0105fa02 0000f4fe f600fdfa     ................
   17d8c:	0000f9fa f6f6fdf5 00f900f4 00fd1102     ................
   17d9c:	fdfffdfa f7fbf9fc 00fdfaf6 0100fe00     ................
   17dac:	feee0000 f7fa0608 00f80100 05fdfef3     ................
   17dbc:	0001fde8 f3fdef00 0000edfd 010f00ee     ................
   17dcc:	0000fe00 feff0000 ef00fef6 00000000     ................
   17ddc:	00fe00f8 00f4f9ff f8fcff00 00fe00fd     ................
   17dec:	f4000000 fef8f8fd fcfdfafc f8fefb00     ................
   17dfc:	fbfd00fc 0100fbfd 00f8fe00 00fb0005     ................
   17e0c:	03000000 0afb0200 fdfdfd00 00000000     ................
   17e1c:	00f80000 fdfc00fd f8fafa00 02fb00fe     ................
   17e2c:	0000000a 00001400 fd000001 00000300     ................
   17e3c:	00000000 00ff0000 00000000 0000fbfe     ................
   17e4c:	ff000000 fd000000 fb0000fd fb0000fd     ................
   17e5c:	00ff0400 00000000 00000100 05040000     ................
   17e6c:	f800fe02 f80800fc 0afbfbf8 feea0305     ................
   17e7c:	fd00fd05 00f7fd03 fefd03fd 0000fef8     ................
   17e8c:	f9000508 07fdf200 fd01f6fd 0afdf8f8     ................
   17e9c:	00fc0003 080200f9 faf6f7fa ed010008     ................
   17eac:	fefc03fe f7fa00fa 00fefcfc fdfbfa00     ................
   17ebc:	fd060800 fcf200f2 fff1f700 f9f8fcf8     ................
   17ecc:	fd000007 00fefb00 0400fbfd 000003f8     ................
   17edc:	fafd00f2 faf8fefc f800faf8 f8fbfafd     ................
   17eec:	010000fd f800fc0c fbfd00fd f6f9f9fa     ................
   17efc:	0005fbfd fdf300fc f7f80502 fd08f8fb     ................
   17f0c:	05fbe801 00f7fcfa fdfdf5f8 f8fbfdfe     ................
   17f1c:	080000ff 00effe07 f606faf1 f5f7fbef     ................
   17f2c:	0005f8f3 fd000000 fd030000 05fb0205     ................
   17f3c:	fff80000 0100ff00 0000fe01 00000000     ................
   17f4c:	000000fd 01080200 0000fd00 fefe0000     ................
   17f5c:	000000fd 00000201 00020000 000a00fe     ................
   17f6c:	fd010105 00000500 00000200 00000000     ................
   17f7c:	00000000 07000800 00000000 00000000     ................
   17f8c:	00000000 00f10000 080004fd 03190000     ................
   17f9c:	0303fbfb 00f301fe 00f10c00 00000000     ................
   17fac:	00000000 0aef0000 00000024 00000000     ........$.......
   17fbc:	00000000 0000f100 00000000 00000000     ................
	...
   17fdc:	fb0000fc 000000fe 00000000 00000000     ................
	...
   17ff4:	00f900fe 00000100 fefb2103 03f90708     .........!......
   18004:	03030000 000000fd 00000000 00000000     ................
   18014:	000007df 00000000 00000000 00000000     ................
   18024:	f9000000 f9000000 00000000 0000fffa     ................
   18034:	fd00fa00 0000f400 00000000 00000000     ................
   18044:	0000ef00 00010000 00000000 0000fd00     ................
   18054:	00fc00fb 000000f9 00fd03fc fafdf900     ................
   18064:	00f90000 00f400fd eb0000fd f7fdf6fb     ................
   18074:	00ef0000 0000fff9 00000000 fbfc0000     ................
   18084:	0000fcfe 00fa0000 05fd03fa fefafe00     ................
   18094:	fd00fbfc f902feff 000000ff 00fcfee9     ................
   180a4:	f4fe00fa fe0000fe 000000fe fe000200     ................
   180b4:	0004fefc 00000000 00000000 00000000     ................
	...
   180e0:	00030000 00000000 fe00fa00 fb000000     ................
   180f0:	00000003 00fbfdf9 fd00f900 0000f400     ................
   18100:	00e70000 00f3f7fb fe00ef00 000000fc     ................
   18110:	00000000 fffcfd00 000001fc 0800fd04     ................
   18120:	f8fdfd0d 06040d03 030b03f9 00070607     ................
	...
   18138:	0c100000 fe00fdfb 00140b14 00030000     ................
   18148:	00000900 000000fc 00000000 00fe0000     ................
   18158:	00000000 04000000 00000000 f6fefdea     ................
   18168:	ef0000f3 00000000 00000000 00000000     ................
   18178:	00000000 0000fc00 00000000 fe000000     ................
	...
   18190:	00000004 fefdea00 0000f3f6 000000f6     ................
	...
   181b0:	000000fe fd0003fa f8030502 03feff00     ................
   181c0:	00000200 00fa0000 00fbfefe 1000f6fe     ................
   181d0:	fefa00fd 00fcfe00 fdfbf9fd fc000000     ................
	...
   181e8:	0000fe00 00000000 00040000 ea000000     ................
   181f8:	f3f6fefd 00ef0000 00000000 00000d00     ................
	...
   18210:	fdf800fc fdfe08fe 01fe01f6 0601f9fe     ................
   18220:	02010201 00fdf6fa f5f9fbf6 fbfc00f6     ................
   18230:	fefefdfd fe00fefd 040004ff 000800fe     ................
	...
   18248:	fe000000 0000fdfd 00ff00f9 000000fc     ................
	...
   18260:	000000f1 00000000 00000000 fd00fdfd     ................
   18270:	00000000 fc0000fe fc0003fd f900fefb     ................
   18280:	fdfefafe 0000fc00 00000000 00000000     ................
   18290:	0800ef00 00fb0000 fd000000 0000fd00     ................
   182a0:	fe0000ff 0000fa00 f8f8fd0b ff030302     ................
   182b0:	020402f9 fe080208 f60000f9 f9f80000     ................
   182c0:	00fb0000 fc00fcfd fe00fc00 f8fe0004     ................
   182d0:	000009fd 00fb00fe 00fa0300 0002fd03     ................
   182e0:	fe00f800 03fd00ff 000000fe 00fafdf6     ................
   182f0:	f40000f8 00fd0900 000200fb f8fd00fd     ................
   18300:	0003fd00 fe000000 fd030000 fd000001     ................
   18310:	00fd00fe 00000000 00000000 00000000     ................
   18320:	00000000 000600f0 0000fe00 00010000     ................
   18330:	0000fdfd 06000500 00000000 01f1f000     ................
   18340:	f604080b 09000b02 00000500 00000000     ................
   18350:	00000000 00000e00 00000000 00000000     ................
	...

00018368 <kern_right_class_mapping>:
   18368:	02010000 05040300 08070602 0a090a09     ................
   18378:	0e0d0c0b 0c11100f 15141312 00000015     ................
   18388:	19181716 19191917 1a191917 19191919     ................
   18398:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
   183a8:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
   183b8:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
   183c8:	00000931 00000000 00000000 00000000     1...............
	...

00018404 <kern_left_class_mapping>:
   18404:	02010000 05040300 08070602 0a090a09     ................
   18414:	0d000c0b 11100f0e 140c1312 00000014     ................
   18424:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
   18434:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
   18444:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
   18454:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
   18464:	0000093d 00000000 00000000 00000000     =...............
	...

000184a0 <cmaps>:
   184a0:	00000020 0001005f 00000000 00000000      ..._...........
   184b0:	00000000 000000b0 0060f7f3 000184c8     ..........`.....
   184c0:	00000000 0002003b                       ....;...

000184c8 <unicode_list_1>:
   184c8:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
   184d8:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
   184e8:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
   184f8:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
   18508:	efc9efc8 efe3efcb f014efe5 f017f015     ................
   18518:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
   18528:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
   18538:	f712f4aa 0000f7f2                       ........

00018540 <glyph_dsc>:
	...
   18548:	04500000 00000000 04500000 00010c03     ..P.......P.....
   18558:	06400012 07010505 0b40001f 00000c0b     ..@.......@.....
   18568:	09f00061 fe00100a 0d8000b1 00000c0d     a...............
   18578:	0b0000ff ff000d0b 03600147 07010502     ........G.`.....
   18588:	0560014c fd010f04 0570016a fd000f04     L.`.....j.p.....
   18598:	06600188 05000707 095001a1 02010808     ..`.......P.....
   185a8:	03a001c1 fe000503 062001c9 03000306     .......... .....
   185b8:	03a001d2 00000303 05a001d7 feff1008     ................
   185c8:	0ab00217 00000c0a 05f00253 00000c05     ........S.......
   185d8:	09300271 00000c09 092002a7 00000c09     q.0....... .....
   185e8:	0ab002dd 00000c0b 0930031f 00000c09     ..........0.....
   185f8:	09e00355 00000c0a 09900391 00000c09     U...............
   18608:	0a5003c7 00000c0a 09e00403 00000c0a     ..P.............
   18618:	03a0043f 00000903 03a0044d fd000c03     ?.......M.......
   18628:	0950045f 02010808 0950047f 03010608     _.P.......P.....
   18638:	09500497 02010808 093004b7 00000c09     ..P.......0.....
   18648:	109004ed fd000f10 0bb00565 00ff0c0d     ........e.......
   18658:	0c2005b3 00010c0b 0b9005f5 00000c0b     .. .............
   18668:	0d300637 00010c0c 0ac0067f 00010c09     7.0.............
   18678:	0a3006b5 00010c09 0c6006eb 00000c0c     ..0.......`.....
   18688:	0d000733 00010c0b 04f00775 00010c03     3.......u.......
   18698:	08300787 00ff0c08 0b8007b7 00010c0b     ..0.............
   186a8:	098007f9 00010c09 0f40082f 00010c0d     ......../.@.....
   186b8:	0d00087d 00010c0b 0d7008bf 00000c0d     }.........p.....
   186c8:	0b90090d 00010c0a 0d700949 fd000f0e     ........I.p.....
   186d8:	0ba009b2 00010c0a 09f009ee 00000c0a     ................
   186e8:	09600a2a 00000c0a 0ca00a66 00010c0b     *.`.....f.......
   186f8:	0b600aa8 00ff0c0d 12000af6 00000c12     ..`.............
   18708:	0ac00b62 00000c0b 0a600ba4 00ff0c0c     b.........`.....
   18718:	0a800bec 00000c0b 05500c2e fd010f05     ..........P.....
   18728:	05a00c54 feff1008 05500c94 fd000f04     T.........P.....
   18738:	09500cb2 02010708 08000cce fe000208     ..P.............
   18748:	09a00cd6 0a010205 09900cdb 00000909     ................
   18758:	0af00d04 00010c0a 09200d40 00000909     ........@. .....
   18768:	0af00d69 00000c0a 09d00da5 0000090a     i...............
   18778:	05a00dd2 00000c07 0b100dfc fd000c0a     ................
   18788:	0ae00e38 00010c09 04700e6e 00010c03     8.......n.p.....
   18798:	04900e80 fdfe0f06 09e00ead 00010c09     ................
   187a8:	04700ee3 00010c02 10f00eef 0001090f     ..p.............
   187b8:	0ae00f33 00010909 0a300f5c 0000090a     3.......\.0.....
   187c8:	0af00f89 fd010c0a 0af00fc5 fd000c0a     ................
   187d8:	06901001 00010906 0800101c 00000908     ................
   187e8:	06a01040 00000b07 0ad01067 00010909     @.......g.......
   187f8:	08f01090 00ff090a 0e6010bd 0000090f     ..........`.....
   18808:	08d01101 00000909 08f0112a fdff0c0a     ........*.......
   18818:	08501166 00000908 05a0118a fd000f06     f.P.............
   18828:	04d011b7 fd010f03 05a011ce fd000f05     ................
   18838:	095011f4 04000509 06b0120b 06000606     ..P.............
   18848:	0500121d 03010403 10001223 fe001110     ........#.......
   18858:	100012ab 00000c10 1000130b ff000e10     ................
   18868:	1000137b 00000c10 0b0013db 00000c0b     {...............
   18878:	1000141d fe001010 1000149d fe001010     ................
   18888:	1200151d ff000e12 1000159b fe001010     ................
   18898:	1200161b 00000c12 10001687 fe001010     ................
   188a8:	08001707 ff000e08 0c00173f ff000e0c     ........?.......
   188b8:	12001793 fe001012 10001823 00000c10     ........#.......
   188c8:	0e001883 fe02100a 0e0018d3 fd00120e     ................
   188d8:	0e001951 ff000f0e 0e0019ba ff000e0e     Q...............
   188e8:	0e001a1c fe02100a 0e001a6c ffff0e10     ........l.......
   188f8:	0a001adc ff000e0a 0a001b22 ff000e0a     ........".......
   18908:	0e001b68 ff000e0e 0e001bca 0400040e     h...............
   18918:	12001be6 00000c12 14001c52 fe001014     ........R.......
   18928:	12001cf2 feff1014 10001d92 fe001010     ................
   18938:	0e001e12 01000a0e 0e001e58 01000a0e     ........X.......
   18948:	14001e9e ff000e14 10001f2a 00000c10     ........*.......
   18958:	10001f8a fe001010 1000200a feff1111     ......... ......
   18968:	0e00209b ff000e0f 0e002104 fe00100e     . .......!......
   18978:	0e002174 ff000e0e 0a0021d6 feff100c     t!.......!......
   18988:	0e002236 fe00100e 0e0022a6 fe00100e     6"......."......
   18998:	12002316 00000c12 10002382 fdff1212     .#.......#......
   189a8:	0c002424 fe00100c 14002484 ff000f14     $$.......$......
   189b8:	1400251a 01000a14 1400257e 01000a14     .%......~%......
   189c8:	140025e2 01000a14 14002646 01000a14     .%......F&......
   189d8:	140026aa 01000a14 1400270e ff000e15     .&.......'......
   189e8:	0e0027a1 fe01100c 0e002801 fe00100e     .'.......(......
   189f8:	10002871 fdff1111 14002902 00000c14     q(.......)......
   18a08:	0c00297a fe00100c 102029da 01000b11     z).......) .....

00018a18 <gylph_bitmap>:
   18a18:	aff00bbf 089ee00a c0078cd0 bf100000     ................
   18a28:	1ff5e01a e4f3513f f2403e0f 00100872     ....?Q...>@.r...
   18a38:	e003c005 007a0000 0900005c 01a00780     ......z.\.......
   18a48:	ffffffff 733e03fd 0030833c 00c500f2     ......>s<.0.....
   18a58:	0e100f00 f0020030 9f00f200 ffffffff     ....0...........
   18a68:	36c33841 890030e3 00005c00 a007700a     A8.6.0...\...p..
   18a78:	79000000 00000000 00000079 20e9ff5c     ...y....y...\.. 
   18a88:	9ebcfc06 79b00e90 800f1000 0d000079     .......y....y...
   18a98:	000079f5 50fdef03 cf060000 000040fe     .y.....P.....@..
   18aa8:	00f15e79 f3057900 07790007 bce92ff1     y^...y....y../..
   18ab8:	ae03a0af 0000d7ff 00007900 00790000     .........y....y.
   18ac8:	80de0300 00d00500 01500ce4 004c00e3     ..........P...L.
   18ad8:	00a9005a c004a006 4c00004e 500d5a00     Z.......N..L.Z.P
   18ae8:	1ce40000 0000a058 e173ce03 0000e93c     ....X.....s.<...
   18af8:	400ed600 7c0000a8 d003c003 3c202e00     ...@...|...... <
   18b08:	0b003d00 09e20070 00d00680 00a0dd04     .=..p...........
   18b18:	00b1ef09 3ce40900 d90000a0 00007d00     .......<.....}..
   18b28:	a01cc00c ae3f0000 010000c1 0000c0df     ......?.........
   18b38:	708feb03 00db0018 3ff0657f ea8f0040     ...p.....e.?@...
   18b48:	0000f703 f90b70cf 40bfcf66 30eadf08     .....p..f..@...0
   18b58:	000000a5 f5000000 72e4e4f5 f205da00     ...........r....
   18b68:	700fc00b 205f403f 007f106f 205f106f     ...p?@_ o...o._ 
   18b78:	700f403f f205c00b 303fda00 f106b00c     ?@.p......?0....
   18b88:	e900f601 ad00bc00 ad00ae00 e900bc00     ................
   18b98:	f106f601 303fb00c 06004a00 2ba0a474     ......?0.J..t..+
   18ba8:	7f00e5ff 6b7b20fb a004008d 00130000     ..... {k........
   18bb8:	10050000 500f0000 500f0000 511f0100     .......P...P...Q
   18bc8:	ffffef10 744f34f3 500f0040 500f0000     .....4Ot@..P...P
   18bd8:	fd520900 0fc5a00b 10110100 04f3ff1f     ..R.............
   18be8:	12034044 00901efc 00f10500 00b00a00     D@..............
   18bf8:	00600f00 00105f00 0000ab00 0000f600     ..`.._..........
   18c08:	0000f105 0000b00a 0000600f 0000104f     .........`..O...
   18c18:	000000ac 040000f6 0a0000f1 0e0000c0     ................
   18c28:	4f000060 00000010 00c5ef08 cfa8cf00     `..O............
   18c38:	00f50770 c00df20a 1ff80100 dc000080     p...............
   18c48:	0000603f 00603fbd 801fbd00 0ddc0000     ?`...?`.........
   18c58:	f80100c0 0a00f507 a8cf00f2 080070cf     .............p..
   18c68:	ef00c5ef f37a36ff 05305f00 305f00f3     .....6z.._0..._0
   18c78:	5f00f305 00f30530 f305305f 05305f00     ..._0..._0..._0.
   18c88:	fdbe04f3 98fd0770 002890cf 0000bf00     ....p.....(.....
   18c98:	00f20700 00af0000 804f0000 c03f0000     ..........O...?.
   18ca8:	c13e0000 c12e0000 d12e0000 f82e0000     ..>.............
   18cb8:	ff467777 6ffaffff 02ffffff b09f7777     wwF....o....ww..
   18cc8:	e10c0000 f3090000 f6050000 df000000     ................
   18cd8:	040010e9 0000fd59 00f40600 643f0000     ....Y.........?d
   18ce8:	f3080040 fb8cc9bf d7ff7c00 01000000     @........|......
   18cf8:	000000eb 0010be00 506f0000 2f000000     ..........oP.../
   18d08:	00000090 0000d00c 01f30800 f80300d5     ................
   18d18:	00602f00 f72322ed ffff6f21 5581ffff     ./`.."#.!o.....U
   18d28:	52f95655 2f000000 00000060 0500f602     UV.R.../`.......
   18d38:	00ffffff 7077777f 0000e008 0000ad00     .....wwp........
   18d48:	10c20b00 ffdf0000 550430fb 0020ff68     .........0.Uh. .
   18d58:	00f80400 920f0000 f6050050 fd8ad98f     ........P.......
   18d68:	e9ef5b10 ce050010 9f0060fc 05708bc8     .[.......`....p.
   18d78:	000000f8 0000d00c 00801f00 682f0000     ............../h
   18d88:	3f10faef d08f64ee 0600f12f 00c00ef4     ...?.d../.......
   18d98:	f109f602 01f30600 b09f86de d8ef1900     ................
   18da8:	ffff8f00 77f7e8ff 008ffc77 90554f00     .......ww....OU.
   18db8:	00e00b00 00f80200 109f0000 b00f0000     ................
   18dc8:	f4060000 dd000000 3f000000 0a000070     ...........?p...
   18dd8:	010000f1 000000f9 00d7ff5c af76fc06     ........\.....v.
   18de8:	00d00ca0 c00df109 07f20700 c05e11f7     ..............^.
   18df8:	feffbf00 54f90910 802fd07e 4ff60400     .......T~./....O
   18e08:	f8000050 0500a01f 76fb09f6 6c00d0af     P..........v...l
   18e18:	0010d8ff 0080fd8e fc68f80c 00505f00     ..........h.._P.
   18e28:	008f703f 7fc00e00 f01f0030 cf13d41f     ?p......0.......
   18e38:	ffef04f1 0200f0a9 00f00a31 a00e0000     ........1.......
   18e48:	9f000000 8da70930 df0700f7 1e0040eb     ....0........@..
   18e58:	1003fc92 00000000 1efc1203 fc921e90     ................
   18e68:	00001003 01000000 a8d01fe9 00a0300e     .............0..
   18e78:	00420000 03f37d01 bf10e89f ee0000b5     ..B..}..........
   18e88:	17000081 0000b4df 00d2af04 ef820100     ................
   18e98:	45f3ffff 00515555 01000000 ef101111     ...EUUQ.........
   18ea8:	34f3ffff 50404444 ef000000 06000092     ...4DD@P........
   18eb8:	0000b5cf 00e29f03 02f36c00 bf20e99e     .........l.... .
   18ec8:	930000c6 04000000 0770fdbe a0bf77fc     ..........p..w..
   18ed8:	cf000027 09000000 010000f0 010000ea     '...............
   18ee8:	000010dd 000010ce 0000603f 00003001     ........?`...0..
   18ef8:	00000100 00f50600 405f0000 17000000     .........._@....
   18f08:	00b5fdce fb050000 c27d2353 406e0000     ........S#}...n@
   18f18:	8e000000 01f40210 493ffaae 1e900ab0     ..........?I....
   18f28:	40ef5be6 8f300fe3 40af0010 d9001f98     .[.@..0....@....
   18f38:	403f0000 e8003f6a 401f0000 d9001f5c     ..?@j?.....@\...
   18f48:	403f0000 8f300f6a 40af0010 1e900a98     ..?@j.0....@....
   18f58:	a6de5ad6 01f303f2 ee16faaf 406e0050     .Z..........P.n@
   18f68:	00000000 fb060000 00752353 17000000     ........S#u.....
   18f78:	00a3fdce 02000000 000000fd f49f0000     ................
   18f88:	00000000 00b09e0f f2060000 0000207f     ............. ..
   18f98:	f801dc00 4f000000 00e00b60 00f00b00     .......O`.......
   18fa8:	0100604f ed1111fa ff8f0000 00f3ffff     O`..............
   18fb8:	4444c40e f406a04f af000000 0000cd10     ..DDO...........
   18fc8:	5ff80200 40ebffff 5755f805 405f40df     ..._...@..UW.@_@
   18fd8:	05fa0100 0f0000f4 11515fa0 ff05f43a     ........._Q.:...
   18fe8:	00faffff 5944745f 00f405fa 5ff20800     ...._tDY......._
   18ff8:	5f000040 0000f445 855ff209 05fb6a55     @.._E....._.Uj..
   19008:	d7ffffff 8d020000 0400b4fe f99db8ff     ................
   19018:	0020fd02 20bf5008 0f000000 000000a0     .. ..P. ........
   19028:	0000f602 602f0000 00000000 000000fa     ....../`........
   19038:	00f20b00 2f000000 850000d2 89fb5f00     ......./....._..
   19048:	290080df 5f40ebdf 30eaffff 77975f00     ...)..@_...0._.w
   19058:	5f00f89e af000040 00405f60 5fe00d00     ..._@...`_@...._
   19068:	06000040 00405ff4 5ff60300 03000040     @...._@...._@...
   19078:	00405ff6 5ff40600 0d000040 00405fe0     ._@...._@...._@.
   19088:	5f60af00 f89e7797 ffff5f00 5f0030ea     ..`_.w..._...0._
   19098:	95ffffff 747777f9 0000405f 0000f405     .....wwt_@......
   190a8:	11515f00 ffff0511 745fe0ff f4054444     ._Q......._tDD..
   190b8:	5f000000 05000040 000000f4 7777975f     ..._@......._.ww
   190c8:	ffffff65 ffff5ffd 77f995ff 405f7477     e...._.....wwt_@
   190d8:	f4050000 5f000000 05000040 102222f5     ......._@...."".
   190e8:	feffff5f 5555f805 00405f40 00f40500     _.....UU@_@.....
   190f8:	405f0000 f4050000 00000000 b5fe8d01     .._@............
   19108:	fb4f0000 02b0df89 060020fd 00f20b60     ..O...... ..`...
   19118:	0f000000 000000a0 00602f00 2f000000     ........./`..../
   19128:	09000060 00a00ff0 0bf00900 090000f2     `...............
   19138:	20fd02f0 00f00a00 df89fb4f 8d0200c0     ... ....O.......
   19148:	5f00c6fe 4f000040 0000f455 405ff504     ..._@..OU....._@
   19158:	554f0000 040000f4 22525ff5 ff555f22     ..OU....._R""_U.
   19168:	f5ffffff 5555855f 00f4558f 5ff50400     ...._.UU.U....._
   19178:	4f000040 0000f455 405ff504 554f0000     @..OU....._@..OU
   19188:	040000f4 f4455ff5 5ff4455f 455ff445     ....._E._E._E._E
   19198:	f4455ff4 00f4455f 00faffff 00fa7777     ._E._E......ww..
   191a8:	00fa0000 00fa0000 00fa0000 00fa0000     ................
   191b8:	00fa0000 00fa0000 07f90000 0df60320     ............ ...
   191c8:	01f18ee9 5f30fbae eb020040 0100f405     ......0_@.......
   191d8:	405f00ec 0510de01 20ce00f4 bf405f00     .._@....... ._@.
   191e8:	f4050030 0000909f 40efcf5f 91ff0500     0......._..@....
   191f8:	5f0010ee 00fc03a0 0600f405 405f00f8     ..._.........._@
   19208:	05f50900 0c0000f4 00405ff2 00f40500     ........._@.....
   19218:	405f0000 f4050000 5f000000 05000040     .._@......._@...
   19228:	000000f4 0000405f 0000f405 00405f00     ...._@......._@.
   19238:	00f40500 975f0000 ff257777 5ff5ffff     ......_.ww%...._
   19248:	00000040 00fc951e f9080000 0000f55f     @..........._...
   19258:	fd95ff02 ae0000e0 705f5ff9 955f3f00     .........__p.?_.
   19268:	0b108ff3 315ff9c0 0ff304e9 f207f395     ......_1........
   19278:	5ff900db 20ef0d30 00f3950f f900905f     ..._0.. ...._...
   19288:	7100305f f3950f00 00000000 00505ff9     _0.q........._P.
   19298:	ff554f00 f5040020 0000fd5f f9fa554f     .OU. ..._...OU..
   192a8:	5ff50400 4f00f54a f20df455 405ff504     ..._J..OU....._@
   192b8:	554fd02f 946f00f4 00405ff5 f455afaf     /.OU..o.._@...U.
   192c8:	f5df0000 0200405f 00f455ff 00f50600     ...._@...U......
   192d8:	b5fe8d01 ff040000 00fa9eb8 0020fd02     .............. .
   192e8:	bf00f908 0a000020 00a00ff2 723f0000     .... .........?r
   192f8:	000000f6 602ff900 0f000000 0000fa90     ....../`........
   19308:	0bf70300 000000f2 d22f20af 908f0000     ......... /.....
   19318:	89fb4f00 0000a0ef 50ebdf28 ffff5f00     .O......(..P._..
   19328:	975f00d7 5fc0bf78 f6070040 0000405f     .._.x.._@..._@..
   19338:	00405ffa 405ffa00 5ff80300 f16e2362     ._@..._@..._b#n.
   19348:	fdffff5f 54855f30 405f0020 5f000000     _...0_.T ._@..._
   19358:	00000040 0000405f 8d010000 0000b5fe     @..._@..........
   19368:	89fb4e00 0200a0ef 080020fd f20a00f9     .N....... ......
   19378:	af000000 00a00f20 703f0000 0000602f     .... .....?p/`..
   19388:	2f900f00 00000060 901f900f 2f000000     .../`........../
   19398:	00f10b70 20af0000 0010fc03 0000f907     p...... ........
   193a8:	df78fa6f 030000b0 00c5ffae 00000000     o.x.............
   193b8:	b015d43e 02000000 0080ffbf 01000000     >...............
   193c8:	ff5f0031 5f00d7ff c0bf7897 0700405f     1._...._.x.._@..
   193d8:	00405ff6 405ffa00 5ffa0000 f8030040     ._@..._@..._@...
   193e8:	6e23525f ffff5fe1 855f30fc 5f00f955     _R#n._...0_.U.._
   193f8:	407f0040 0c00405f 00405fe0 5c00f902     @..@_@..._@....\
   19408:	0720d9ef 90af87fc 0100c00e 00800f10     .. .............
   19418:	f50d0000 03000000 0050eaef feae0500     ..........P.....
   19428:	00000040 0000f14e 08f30500 f2080000     @...N...........
   19438:	bf77fa2f ff9d02a0 ffff00c7 67f5ffff     /.w............g
   19448:	7277fb78 00f70100 f7010000 01000000     x.wr............
   19458:	000000f7 0000f701 00f70100 f7010000     ................
   19468:	01000000 000000f7 0000f701 00f70100     ................
   19478:	f7010000 306f0000 168f0000 080000f3     ......o0........
   19488:	00306ff1 f3168f00 f1080000 0000306f     .o0.........o0..
   19498:	00f3168f 6ff10800 8f000030 0000f405     .......o0.......
   194a8:	703ff009 00cd0000 5f0020de a8ff0480     ..?p..... ._....
   194b8:	0300d0bf 0081fdbe 0000e00c 6f306f00     .............o0o
   194c8:	0c000050 00fb00c0 00f60300 0000f209     P...............
   194d8:	2f0000ae 901f0080 00ce0000 0000f207     .../............
   194e8:	db00f605 0e000000 00504fc0 3b8f0000     .........OP....;
   194f8:	000000e0 00f8fb02 0b000000 000010ff     ................
   19508:	b04f0000 405f0000 00df0000 0ff50200     ..O..._@........
   19518:	ff020090 f0070040 0700e00b 0c0090fe     ....@...........
   19528:	00f306b0 00e0aa0c f801601f f3541f00     .........`....T.
   19538:	00106f00 107f00cd 00cc00f8 cb207f00     .o............ .
   19548:	f701ad00 712f0000 265f00f6 0d0000f2     ....../q.._&....
   19558:	0f00f1c6 0000d07b 00c0fd08 0080df0b     ....{...........
   19568:	70ff0300 30ff0600 ef000000 fe010020     ...p...0.... ...
   19578:	903f0000 00cd0000 7f00408f 10de0030     ..?......@..0...
   19588:	0300802f 00d00cfa f3fb0700 0c000000     /...............
   19598:	000000f8 00c0ef01 7fbf0000 6f000070     ............p..o
   195a8:	0020af60 ed01b02f 00f10c00 f607f804     `. ./...........
   195b8:	f3090000 0000e00c f703f207 901f0000     ................
   195c8:	0010af00 1f00109e 00f602a0 0bf30800     ................
   195d8:	000000d0 00404fec fb5f0000 00000000     .....O@..._.....
   195e8:	0000f20c f0090000 00000000 0000f009     ................
   195f8:	f0090000 00000000 0000f009 ffffff3f     ............?...
   19608:	777701fd 0090bf77 c01e0000 0c000000     ..www...........
   19618:	000000f2 0000f508 00f90400 ec010000     ................
   19628:	00000000 000020cf 00508f00 904f0000     ..... ....P...O.
   19638:	1e000000 777777f8 ffffff05 ff5ff0ff     .....www......_.
   19648:	5f50f705 00f30530 f305305f 05305f00     ..P_0..._0..._0.
   19658:	305f00f3 5f00f305 00f30530 f705305f     .._0..._0..._0..
   19668:	00ff5f50 0000007e 0000401f 0000900c     P_..~....@......
   19678:	0000e007 0000f402 0000c900 00007e00     .............~..
   19688:	00402f00 00900c00 00e00700 00f30200     ./@.............
   19698:	00d90000 007e0000 302f0000 900d0000     ......~.../0....
   196a8:	e0070000 ea35fabf ea00ea00 ea00ea00     ......5.........
   196b8:	ea00ea00 ea00ea00 ea00ea00 ea35ea00     ..............5.
   196c8:	2f00fabf 9d000080 f30000e0 d00600d5     .../............
   196d8:	600c007b 103f201f 009a800b ffffe004     {..`. ?.........
   196e8:	1111ffff f6071111 01e70300 0080fd9e     ................
   196f8:	90af87ce af000002 06000000 ffbe02f2     ................
   19708:	42ec20ff 502ff227 ec207f00 02f27f42     . .B'./P.. .B...
   19718:	206ffbbf 0000008f 00008f00 008f0000     ..o ............
   19728:	8f000000 00b3fe2b ef78ec8f 00a08f30     ....+.....x.0...
   19738:	208fc01e 8ff10700 f3050000 0700208f     ... ......... ..
   19748:	00a08ff1 ec8fd01e 8e30ef78 00b3fe2b     ........x.0.+...
   19758:	c4ef3a00 7cd84f00 00d00df4 00f61307     .:...O.|........
   19768:	304f0000 f6030000 0d000000 100600d0     ..O0............
   19778:	f47cd74f c4ef3a00 00000000 0000f701     O.|..:..........
   19788:	00f70100 f7010000 a3ff3b00 87fd04f7     .........;......
   19798:	d00ef7ce 3ff70b00 f7030060 0100304f     .......?`...O0..
   197a8:	00503ff7 c00ef703 04f70a00 f7be65fc     .?P..........e..
   197b8:	b2ff3b00 fe3b00f7 fc0400a2 0e20ee67     .;....;.....g. .
   197c8:	a01e00c0 0700503f ffff4ff0 723ff1ff     ....?P...O....?r
   197d8:	0e202222 000200c0 af87fd04 ef3a0050     "" .........P.:.
   197e8:	5d0000d6 b52f00fc 00f30470 a0ffff0c     ...]../.p.......
   197f8:	0053f748 0500305f 5f0000f3 f3050030     H.S._0....._0...
   19808:	305f0000 00f30500 00305f00 b2ff3b00     .._0....._0..;..
   19818:	87fe04e9 d10ef9cf 3ff90a00 f9010060     ...........?`...
   19828:	0000404f 00603ff9 d00ef901 04f90900     O@...?`.........
   19838:	f8cf87fd b3ff3b00 000000f7 e909f405     .....;..........
   19848:	01b0af77 00d8ff7c 0000008f 0000f008     w...|...........
   19858:	00008f00 bff20800 fb8f10ea f808fd89     ................
   19868:	8ff40600 781f0010 f80000f0 0f00008f     .......x........
   19878:	0000f088 00008ff8 00f0880f 1a9ef800     ................
   19888:	f00800f2 8ff0088f 088ff008 f0088ff0     ................
   19898:	00e20700 0000f309 f1070000 00f10700     ................
   198a8:	0700f107 f10700f1 00f10700 0700f107     ................
   198b8:	f10700f1 18f00800 fc3ec06e 00008f20     ........n.>. ...
   198c8:	00f00800 008f0000 f0080000 8fd11d00     ................
   198d8:	08e21d00 00e21df0 00f32d8f 70fffe08     .........-.....p
   198e8:	bfe28f00 01f20830 008f10ee f008fb03     ....0...........
   198f8:	8ff70700 8f8f8f8f 8f8f8f8f 8e8f8f8f     ................
   19908:	3b91fe3c ff08a2fe c6cf9f96 708fd08f     <..;...........p
   19918:	00c09f00 00f1585f 0100f605 00008ff7     ...._X..........
   19928:	0f00404f 0400f088 f80000f4 4f00008f     O@.............O
   19938:	880f0040 f40400f0 8ff80000 404f0000     @.............O@
   19948:	8e800f00 08a1fe3b d08fa6ff 6f00808f     ....;..........o
   19958:	0100f148 00008ff7 00f0880f 008ff800     H...............
   19968:	f0880f00 8ff80000 800f0000 c4ef3b00     .............;..
   19978:	87fd0400 d00e60cf 3ff10b00 f5030060     .....`.....?`...
   19988:	0100304f 00603ff7 d00ef503 04f10b00     O0...?`.........
   19998:	60cf77fd c4ef3b00 fe3b8e00 fb8f00b3     .w.`.;....;.....
   199a8:	8f30df57 c00d0090 0700108f 00008ff1     W.0.............
   199b8:	208ff305 8ff10700 d01e00a0 ef78ec8f     ... ..........x.
   199c8:	fe2b8f30 008f00b3 8f000000 00000000     0.+.............
   199d8:	0000008f ff3b0000 fd04f7a2 0ef7de87     ......;.........
   199e8:	f70b00d0 0300603f 00304ff7 603ff701     ....?`...O0...?`
   199f8:	0ef70300 f70b00d0 ce77fd04 ff3b00f7     ..........w...;.
   19a08:	0000f7a3 00f70100 f7010000 01000000     ................
   19a18:	f02b8ef7 8f90ed8f 208f00a0 00008f00     ..+........ ....
   19a28:	8f00008f 008f0000 00008f00 91fdae02     ................
   19a38:	d069d71e 0000304f 0010b42f 60fdef06     ..i.O0../......`
   19a48:	f55b0100 f7000001 f36ba75f 40ecdf19     ..[....._.k....@
   19a58:	0000f305 cf00305f 8f04faff f3053075     ...._0......u0..
   19a68:	305f0000 00f30500 00305f00 0000f404     .._0....._0.....
   19a78:	0080c61f ae10fc5d 5a2f0000 f50200e0     ....]...../Z....
   19a88:	2f0000ae 0200e05a 0000aef5 00f0592f     .../Z......./Y..
   19a98:	306ff504 ee51af00 02f5bf76 503ffbbe     ..o0..Q.v.....?P
   19aa8:	0000c00d 00f206cb f900f502 00e00900     ................
   19ab8:	800f009e 6f602f00 c00c0010 050000cb     ...../`o........
   19ac8:	0000f4f6 00d0ef00 708f0000 0000bb00     ...........p....
   19ad8:	4f00109f 0e00f116 c00900f6 fc05600f     ...O.........`..
   19ae8:	00f600b0 5fab00ac 05105f10 f7500ff1     ......._._....P.
   19af8:	0f00b00a c009f076 ac0000f5 8f4f00ba     ....v.........O.
   19b08:	ff040000 a0ef0040 e00e0000 00f40800     ....@...........
   19b18:	00704f00 308f209f cd00505f 0200902e     .Op.. .0_P......
   19b28:	0000d0ff 0000f60a 00e1fd04 c00deb01     ................
   19b38:	3f10be00 00406f80 c00d407f 06cb0000     ...?.o@..@......
   19b48:	f40200f3 0900ea00 108f00d0 1f00701f     .............p..
   19b58:	00107f70 00d9e00a f2f90300 cf000000     p...............
   19b68:	000000b0 0000406f 0000ad00 00f5791c     ....o@.......y..
   19b78:	70ee1a00 ff4f0000 5515f9ff 0000f45b     ...p..O....U[...
   19b88:	0100804f 0b0000ec 8f0000e1 f7040040     O...........@...
   19b98:	e51e0000 ff5f5355 2c00fcff 61af00f5     ....US_....,...a
   19ba8:	0000cc00 db0000db 00db0000 1f00ea02     ................
   19bb8:	fa0500f4 00db0000 0000db00 cc0000db     ................
   19bc8:	61af0000 5ff52c00 155ff115 f1155ff1     ...a.,._.._.._..
   19bd8:	5ff1155f 155ff115 f1155ff1 80be105f     _.._.._.._.._...
   19be8:	0140af03 701f00f6 1f00f701 00f90070     ..@....p....p...
   19bf8:	fb00fb0a 01701f20 701f00f7 af03f601     .... .p....p....
   19c08:	0090be40 00000000 00e43d00 f5860cb5     @........=......
   19c18:	03f0201e 000290ef 02001000 400d90ce     . .............@
   19c28:	0e003b89 0d0e003b ce028940 f8080090     .;..;...@.......
   19c38:	00f7e7ef 00000000 00000000 00000000     ................
   19c48:	00dc4900 16000000 00ffffbf ff8d0300     .I..............
   19c58:	00ffffff ffffcf00 00ffffff ffffff00     ................
   19c68:	00ffc7ff eaffff00 00ff0051 0083ff00     ........Q.......
   19c78:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   19c88:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   19c98:	00ffff2b 0000ff00 2bffffdf 0000ffff     +..........+....
   19ca8:	dffdffdf 0000ffff dfb2ff2b 0000fdff     ........+.......
   19cb8:	2b000000 0000b2ff d0000000 ffffff0f     ...+............
   19cc8:	ff0df0ff 8888c8ff f0ffff8c 0000800f     ................
   19cd8:	f00ff008 0000800f ff0ff008 000080ff     ................
   19ce8:	f0ffff08 ccccec0f f00ff0ce ccccec0f     ................
   19cf8:	ff0ff0ce 000080ff f0ffff08 0000800f     ................
   19d08:	f00ff008 0000800f ff0ff008 8888c8ff     ................
   19d18:	d0ffff8c ffffff0f df0df0ff ffff73ff     .............s..
   19d28:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   19d38:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   19d48:	df000000 ffff73ff fffdffff ffffa5ff     .....s..........
   19d58:	ffffffff ffffa5ff dfffffff ffff73ff     .............s..
   19d68:	00fdffff 00000000 df000000 ffff73ff     .............s..
   19d78:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   19d88:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   19d98:	00b10a00 00000000 00fcbf00 00000000     ................
   19da8:	00fbff0b 00000000 1bc0ffbf 0b0000a0     ................
   19db8:	cf00fcff bf0000fb bf00c0ff ff0bb0ff     ................
   19dc8:	0c0000fc ffbffbff 000000c0 fbffffcf     ................
   19dd8:	00000000 b0ffff0c 00000000 00fbbf00     ................
   19de8:	00000000 00b00b00 03000000 03000000     ................
   19df8:	0010fc08 fcfff81c f5ff1c10 ff2cfcff     ..............,.
   19e08:	ffff05f5 0500f5ff 00f5ffff fdff1d00     ................
   19e18:	ff1c0010 1c10fcff fcfff9ff 05f5ff1c     ................
   19e28:	f5dffcff d1ff0500 040000a4 000000a1     ................
   19e38:	0000e04f 10020000 1003f16f d05f0000     O.......o....._.
   19e48:	d13ff16f f1ff0300 fd5ff16f 40ff0d00     o.?.....o._....@
   19e58:	ff09f16f 00f74f70 cf00f16f 00f09fe0     o...pO..o.......
   19e68:	5f00f16f 00c0bff3 2f00f16f 00c0bff5     o.._....o../....
   19e78:	1f00e04f 00e0aff6 4f000000 00f46ff4     O..........O.o..
   19e88:	af000000 10fe0ff0 ff050000 d3ff06a0     ................
   19e98:	ff7f0000 ff9f0020 f4ffbeda ff060000     .... ...........
   19ea8:	30fdffff 17000000 0050cabd 00000000     ...0......P.....
   19eb8:	0000b88b 00000000 0000ffff 06300000     ..............0.
   19ec8:	0360ffff dffd0400 effdffff ffff0d40     ..`.........@...
   19ed8:	ffffffff ffff4fd0 ffff9ff9 ffff08f4     .....O..........
   19ee8:	ffff0220 f9ff0080 ff9f0000 f9ff0000      ...............
   19ef8:	ff9f0000 ffff0800 ffff0220 ffff4f80     ........ ....O..
   19f08:	ffff9ff9 ffff0df4 ffffffff dffe04d0     ................
   19f18:	dffdffff 06300040 0360ffff 00000000     ....@.0...`.....
   19f28:	0000ffff 00000000 0000b88b 00000000     ................
   19f38:	3f30dd03 000000f3 f5ff6f00 0000f44f     ..0?.....o..O...
   19f48:	99ff0900 00f4bfff f6bf0100 f4ff6f22     ............"o..
   19f58:	fe2d0000 ef53ff35 ff0400f4 f8ff8fc1     ..-.5.S.........
   19f68:	7f40fe2d ffff1afa f7afa1ff ffdf82cf     -.@.............
   19f78:	28fdffff ff0e14fc ffffffff 0f0041e0     ...(.........A..
   19f88:	ffffffff 0000f0ff 00f9ff0f 00f0ff8f     ................
   19f98:	f8ff0f00 f0ff8f00 ff0f0000 ff8f00f8     ................
   19fa8:	0e0000f0 6f00f6ff 0000e0ff fddf0000     .......o........
   19fb8:	00000000 ffff0000 00000000 ffff0000     ................
   19fc8:	00000000 ffff0000 00000000 ffff0000     ................
   19fd8:	00000000 ffff0000 00000000 ffffff4f     ............O...
   19fe8:	0000f4ff ffffff0b 0000b0ff ffffbf00     ................
   19ff8:	000000fb ffff0b00 000000b0 fbbf0000     ................
   1a008:	df000000 b11bfcff fffdffcf 2cc2ffff     ...............,
   1a018:	ffffffff ffffffff ffffffff ffffffff     ................
   1a028:	dfffe0f0 ffffffff 00fdffff ffffef04     ................
   1a038:	0040feff ffff1e00 e1ffffff b0af0000     ..@.............
   1a048:	0b000000 ff0500fa 00000010 1e50ff01     ..............P.
   1a058:	000000f6 e16f0000 0000b0af 0b000000     ......o.........
   1a068:	fffffffa ff080080 ffffffff 1f00f1ff     ................
   1a078:	ffffffff ffffffff ffffffff ffffffff     ................
   1a088:	ffffffff ffffffff ffffffff ff8fffff     ................
   1a098:	ffffffff 00f8ffff dabd0600 00ff0250     ............P...
   1a0a8:	ffffef05 00ff42fe 7ba7ff7f 05fff9ff     .....B.....{....
   1a0b8:	0000c1ff 0effff2c 020000fc 5fffdf22     ....,.......".._
   1a0c8:	0f0000f2 8fffffff 0f0000b0 00ffffff     ................
	...
   1a0e4:	ff000000 00f0ffff fff80b00 00f0ffff     ................
   1a0f4:	fff42f00 002022fd ffe0cf00 0000c2ff     ./..." .........
   1a104:	ff40ff2c 6ab7ff9f ff00f7ff ffffdf24     ,.@....j....$...
   1a114:	ff0050fe dbac0520 00000060 00000000     .P.. ...`.......
   1a124:	008d0000 00ff0800 dfff8f00 ffffffff     ................
   1a134:	ffffffff ffffffff ffffffff dfffffff     ................
   1a144:	00ffffff 00ff8f00 00ff0800 008d0000     ................
	...
   1a160:	0000008d 00ff0800 8f000000 cf0000ff     ................
   1a170:	01ffffff ffffff50 fff706ff 00ffffff     ....P...........
   1a180:	ffffffbe ffae00ff 05ffffff ffffdff8     ................
   1a190:	006002ff 00ff9f00 09000000 000000ff     ..`.............
   1a1a0:	009e0000 00000000 00000000 00000000     ................
   1a1b0:	00100600 00000000 d21f0000 00000000     ................
   1a1c0:	0300008d 000010ee 0a00ff08 00b02fb1     ............./..
   1a1d0:	00ff8f00 f407fc05 ffffffdf 605f5002     .............P_`
   1a1e0:	fffffff9 0df706ff ffffbdc0 ae00ffff     ................
   1a1f0:	ff9ff009 00ffffff 8ff009ae ffffffff     ................
   1a200:	c00df706 ffffdfad 5f5002ff 0000e960     ..........P_`...
   1a210:	0500ff8f 00f406fc 00ff0800 b02fb10a     ............../.
   1a220:	8d000000 ee020000 00000010 1f000000     ................
   1a230:	000000d2 00000000 8f001006 ffffffff     ................
   1a240:	fff8ffff fffffffc ffffffff ffff2f20     ............ /..
   1a250:	fcffffff ffff0c00 ffffffee feff2f20     ............ /..
   1a260:	ffffef22 e2fffffc ffff2e00 20fe4efe     "............N. 
   1a270:	ffff0200 00c202e2 ffff0000 00000020     ............ ...
   1a280:	ffff0000 00000000 ffff0000 ffffffff     ................
   1a290:	8fffffff ffffffff 00f8ffff 00000000     ................
   1a2a0:	010030ff 0040ffcc 40ffff2d ffffef03     .0....@.-..@....
   1a2b0:	ffff3f40 ffff44ff ff9fffff ffffffff     @?...D..........
   1a2c0:	ffffffff ffffffff ffffafff ff45ffff     ..............E.
   1a2d0:	40ffffff ffffff4f ffef0340 2e0040ff     ...@O...@....@..
   1a2e0:	0030ffff 0000cc01 00000000 00000000     ..0.............
   1a2f0:	918f0000 00000000 70ffff00 00000000     ...........p....
   1a300:	40fdffff ff000000 10faffff ffff0000     ...@............
   1a310:	00f7ffff ffffff00 00d5ffff ffffffff     ................
   1a320:	ffb2ffff ffffffff fffffdff ffffffff     ................
   1a330:	fffffffd b2ffffff ffffffff ff00d5ff     ................
   1a340:	f7ffffff ffff0000 0010faff fdffff00     ................
   1a350:	00000040 0070ffff 8e000000 000000a1     @.....p.........
	...
   1a370:	00f8ff8f fff8ff8f ff00ffff ffffffff     ................
   1a380:	ffff00ff ffffffff ffffff00 00ffffff     ................
   1a390:	ffffffff ff00ffff ffffffff ffff00ff     ................
   1a3a0:	ffffffff ffffff00 00ffffff ffffffff     ................
   1a3b0:	ff00ffff ffffffff ffff00ff ffffffff     ................
   1a3c0:	ffffff00 00ffffff 7fffffff 7f00f7ff     ................
   1a3d0:	ff8ff7ff ffffffff fffffff8 ffffffff     ................
   1a3e0:	ffffffff ffffffff ffffffff ffffffff     ................
   1a3f0:	ffffffff ffffffff ffffffff ffffffff     ................
   1a400:	ffffffff ffffffff ffffffff ffffffff     ................
   1a410:	ffffffff ffffffff ffffffff ffffffff     ................
   1a420:	ffffffff ffffffff ffffffff ffff8fff     ................
   1a430:	f8ffffff 00000000 0010cc00 d2ffff03     ................
   1a440:	ffff0400 ff0430fe 04f4ffff ffffffff     .....0..........
   1a450:	ffffff54 fffff9ff ffffffff ffffffff     T...............
   1a460:	ffffffff fffffff9 ffff44ff ff04f3ff     .........D......
   1a470:	0430feff 00d2ffff 10ccff04 00ff0300     ..0.............
   1a480:	00000000 2d000000 000000d2 ef010000     .......-........
   1a490:	000010fe ff1d0000 0000d1ff ffcf0000     ................
   1a4a0:	0000fcff ffff0b00 00b0ffff ffffaf00     ................
   1a4b0:	00faffff ffffff09 90ffffff ffffff0f     ................
   1a4c0:	f0ffffff ffffff08 80ffffff 00000000     ................
   1a4d0:	00000000 ffffff0c c0ffffff ffffff0f     ................
   1a4e0:	f0ffffff ffffff0f f0ffffff ffffff0c     ................
   1a4f0:	c0ffffff 1a000000 01000040 0000f0df     ........@.......
   1a500:	00a0ff1d 00fadf01 a0ff1d00 fadf0100     ................
   1a510:	ff0c0000 0d0000a0 000080ff 00f8df01     ................
   1a520:	ff1d0000 01000080 0000f8df 80ff1d00     ................
   1a530:	df010000 000000f0 a104501b 0f000000     .........P......
   1a540:	000010fd 00d1ff0a fdaf0000 0a000010     ................
   1a550:	0000d1ff 10fdaf00 ff0a0000 080000c0     ................
   1a560:	0000d0ff 0010fd8f 00d1ff08 10fd8f00     ................
   1a570:	d1ff0800 fd0f0000 05000010 000000b1     ................
   1a580:	ff040000 00000040 80ff0800 00000000     ....@...........
   1a590:	0080ff08 08000000 000080ff ff080000     ................
   1a5a0:	48000080 c8ff8c88 ffff8488 ffffffff     ...H............
   1a5b0:	ffffffff ffffffff ff8c8848 008488c8     ........H.......
   1a5c0:	80ff0800 00000000 0080ff08 08000000     ................
   1a5d0:	000080ff ff080000 00000080 40ff0400     ...............@
   1a5e0:	44140000 44444444 ffffef41 feffffff     ...DDDDDA.......
   1a5f0:	ffffffff 7bffffff bbbbbbbb 0000b7bb     .......{........
   1a600:	daffad05 00000050 88fcdf04 0040fdcf     ....P.........@.
   1a610:	40fe7f00 f7ef0400 f4ff0700 4f809e00     ...@...........O
   1a620:	ff4f70ff f8af00c0 dff4ff0c ff9a80ff     .pO.............
   1a630:	fdff08fe ef80ffdf ff08feff c0ff4ffd     .............O..
   1a640:	0cf8ff8f ff07f4ff 80ee08f4 0070ff4f     ............O.p.
   1a650:	0040fe7f 00f8ef04 fcdf0400 40fdcf88     ..@............@
   1a660:	05000000 50daffad 208c0000 00000000     .......P... ....
   1a670:	00000000 0000e4df 00000000 ff1b0000     ................
   1a680:	fddf4980 000000a5 ffff7f00 d4ff8cd8     .I..............
   1a690:	04000000 0000f8ef 0070ff4e ff1c0000     ........N.p.....
   1a6a0:	ff04e869 e30400f7 fffe9f00 40ffcf80     i..............@
   1a6b0:	0570ff0d 8fe0ffff ff0dd0ff ff2d00f7     ..p...........-.
   1a6c0:	d0ff8fe0 00fcff04 cff8af00 7f0030ff     .............0..
   1a6d0:	060040ff 00f7ffff f4ff0800 ff3e0000     .@............>.
   1a6e0:	000000a0 82c8ff4d 00f7bf01 5a000000     ....M..........Z
   1a6f0:	0810fcdf 0000a0ff 00000000 fd4e0000     ..............N.
	...
   1a708:	0000c802 d22d0000 00000000 00000000     ......-.........
   1a718:	0000fbbf 00000000 ffff0500 00000050     ............P...
   1a728:	0d000000 00d0ffff 00000000 ffff7f00     ................
   1a738:	000000f7 ff010000 10ff8dd8 00000000     ................
   1a748:	0aa0ff0a 0000a0ff ff3f0000 f3ff0bb0     ..........?.....
   1a758:	00000000 0cc0ffcf 0000fcff ffff0500     ................
   1a768:	ffff0dd0 0e000050 9ff9ffff 00e0ffff     ....P...........
   1a778:	ffff8f00 ffff2ee2 ff0200f8 0990ffff     ................
   1a788:	10ffffff ffffff0a ffff3ee3 ff0fa0ff     .........>......
   1a798:	ffffffff f0ffffff ffffff08 ffffffff     ................
   1a7a8:	000080ff 00000000 00000000 00000000     ................
   1a7b8:	000000d8 00000000 ffff80ff ff070070     ............p...
   1a7c8:	fffff8ff ff6f00f6 8e78fdff e8ff15ff     ......o...x.....
   1a7d8:	0200e2ff 20fe4fe5 000020fe 00f3ff13     .....O. . ......
   1a7e8:	00000052 0031ff3f 02000052 205ef4ef     R...?.1.R.....^ 
   1a7f8:	8e7820fe e8ff51ff ffffe2ff ff6f00f6     . x..Q........o.
   1a808:	fffffdff ff070070 0000f8ff 00000000     ....p...........
   1a818:	000080ff 00000000 000000d8 00000000     ................
	...
   1a830:	01000000 000010dd ff1d0000 000000d1     ................
   1a840:	fdffdf01 1d000010 d1ff99ff f9df0100     ................
   1a850:	10fd9f00 0090ff1d bfd1ff09 000000f9     ................
   1a860:	905ffb9f 09000000 000000f5 00000000     .._.............
   1a870:	00000000 5f000000 00000090 f9bff509     ......._........
   1a880:	9f000000 90ff1dfb d1ff0900 00f9df01     ................
   1a890:	0010fd9f ff99ff1d 010000d1 10fdffdf     ................
   1a8a0:	1d000000 0000d1ff dd010000 00000010     ................
	...
   1a8c0:	00d11d00 00000000 df010000 ffef10fd     ................
   1a8d0:	00d0ffff d1ffff1d ffffffaf cfcf00f0     ................
   1a8e0:	0000fcfc 00f00f00 b6f11f6b 0f000000     ........k.......
   1a8f0:	0f0000f0 000000f0 00f00f00 00f00f00     ................
   1a900:	0f000000 0f0000f0 000000f0 b6f11f6b     ............k...
   1a910:	00f00f00 cfcf0000 0f00fcfc faffffff     ................
   1a920:	d1ffff1d ffff0d00 df01feff 000010fd     ................
   1a930:	00000000 00d11d00 00000000 00000000     ................
   1a940:	ff8f0000 0000e2ff ffff0000 0020feff     .............. .
   1a950:	ffff0000 ffffffff fffff8ff ffffffff     ................
   1a960:	ffffffff ffffffff ffffffff ffffffff     ................
   1a970:	ffffffff ffffffff ffffffff ffffffff     ................
   1a980:	ffffffff ffffffff ffffffff ffffffff     ................
   1a990:	ffffffff ffffffff ff8fffff ffffffff     ................
   1a9a0:	0000f8ff 00b00b00 00000000 00fbbf00     ................
   1a9b0:	00000000 b0ffff0b 00000000 fbffffbf     ................
   1a9c0:	0b000000 ffffffff 4f0000b0 ffffffff     ...........O....
   1a9d0:	000000f4 00ffff00 00000000 00ffff00     ................
   1a9e0:	00000000 00ffff00 00000000 00ffff00     ................
   1a9f0:	00000000 00ffff00 ffdf0000 0ffddff0     ................
   1aa00:	fffffdff 9f0000f9 ffffffff ffffffff     ................
   1aa10:	ffffffff f0ffffff ffdfffe0 ffffffff     ................
   1aa20:	0000fdff 00000000 00000000 00000000     ................
   1aa30:	0062ea0a 00000000 f0ffff02 00000000     ..b.............
   1aa40:	ffff9f00 00000000 ffff0f00 000000d0     ................
   1aa50:	ffff0200 000000fb ef030000 000070ff     .............p..
   1aa60:	04000000 0000f2ff 00000000 0000fbbf     ................
   1aa70:	00000000 0030ff6f 00000200 0090ff4f     ....o.0.....O...
   1aa80:	00f38f02 00d0ff6f e4ffff0a 00d1ffbf     ....o...........
   1aa90:	ffffef00 00d1ffff ffff0a00 0090ffff     ................
   1aaa0:	ff6f0000 0030fbff ff020000 000072db     ..o...0......r..
   1aab0:	08000000 000080ee ff086106 2d0080ff     .........a.....-
   1aac0:	33efd0ff ff2e00fe 3ff30ef3 f3ff2ee0     ...3.......?....
   1aad0:	ffff8f00 00f3ff6e ffff8e00 0000f3ff     ....n...........
   1aae0:	ffef0200 000000f3 ffff2e00 08000030     ............0...
   1aaf0:	ffffffef ff080030 ffeff6ff 33ef0030     ....0.......0..3
   1ab00:	ffef02fe 3ff30e30 ffef02e0 f8ff8f30     ....0..?....0...
   1ab10:	fddf0200 00e88e00 10660000 ffdf0000     ..........f.....
   1ab20:	00200dff ffffff00 0000e20f 0fffffff     .. .............
   1ab30:	fff0dffd 0020ffff fffff0ff ffffffff     ...... .........
   1ab40:	fffffff0 f0ffffff ffffffff fff0ffff     ................
   1ab50:	ffffffff fffff0ff ffffffff fffffff0     ................
   1ab60:	f0ffffff ffffffff fff0ffff ffffffff     ................
   1ab70:	ffdff0ff fffdffff 000000f9 ffff0000     ................
   1ab80:	00ffffff ffffdf00 0000fdff ffffff8f     ................
   1ab90:	ff00c2ff ffffffff 00ff20fe ff010000     ......... ......
   1aba0:	0000ffe2 fcff0000 000000ff ffffff00     ................
   1abb0:	00000000 ffffffff ffffffff ffffffff     ................
   1abc0:	ffffffff 11fbffff ffffffbf 1f00f1ff     ................
   1abd0:	ffffffff ff1f00f1 fbffffff ffffbf11     ................
   1abe0:	ffffffff 8fffffff ffffffff df00f8ff     ................
   1abf0:	0000fdff fcffff01 ff030000 0000f7ff     ................
   1ac00:	f2ffff06 ff080000 0000d0ff ffffff0a     ................
   1ac10:	ff0cd0ff a0ffffff ffffff0e ff0d20ff     ............. ..
   1ac20:	00f8ffff ff0a0000 000000e0 0050ff0e     ..............P.
   1ac30:	fc2f0000 00000000 0000f35f a09f0000     ../....._.......
   1ac40:	00000000 000010df 00d70000 04000000     ................
   1ac50:	000040ee 99ffdf00 0000fdff ff99ffff     .@..............
   1ac60:	ff0000ff ffffffff ffff0000 00000090     ................
   1ac70:	0dffff00 200dffff ff0fffff ffe20fff     ....... ........
   1ac80:	ffff0fff fffffd0f 20ffff0f 0fffff00     ........... ....
   1ac90:	ffffffff ff0fffff ffffffff ffff0fff     ................
   1aca0:	ffdfffff ffffff0f 0f0000ff ffffffff     ................
   1acb0:	ff0f0000 00ffffff ffff0d00 0000fdff     ................
   1acc0:	0000cc00 02000000 000030ff ffbf0100     .........0......
   1acd0:	000020fc ffffff1e 9f0000e1 f8ffffff     . ..............
   1ace0:	ffef0000 00fdffff ffffff00 0100ffff     ................
   1acf0:	ffffffff ff0300ff ffffffff ffff0830     ............0...
   1ad00:	80ffffff ffffff1e cfe1ffff ffffffff     ................
   1ad10:	ffcffcff ffffffff 000000fc 00000000     ................
   1ad20:	ff0e0000 000000e0 40ee0400 ff8f0000     ...........@....
   1ad30:	ffffffff fff8ffff ffffffff ffffffff     ................
   1ad40:	0ff000ff 000ff000 f000ffff 0ff0000f     ................
   1ad50:	ffffff00 ffffffff ffffffff 888008f8     ................
   1ad60:	ff8f8008 8008f8ff 8f800888 ffffffff     ................
   1ad70:	ffffffff 00ffffff 000000f0 ffff000f     ................
   1ad80:	0000f000 ff000f00 ffffffff ffffffff     ................
   1ad90:	ffff8fff ffffffff 0000f8ff 00000000     ................
	...
   1ada8:	70af0300 00000000 ffcf0400 000000f0     ...p............
   1adb8:	ffdf0600 0000a0ff ffef1700 0030ffff     ..............0.
   1adc8:	ffff1800 00fcffff ffff2a00 f4ffffff     .........*......
   1add8:	ffff0800 ffffffff ff0f00d0 ffffffff     ................
   1ade8:	080060ff ffffffff 0000feff 00000000     .`..............
   1adf8:	00f7ffff 00000000 f1ffff00 00000000     ................
   1ae08:	ffff0000 00000080 ff000000 000010ff     ................
   1ae18:	00000000 0000faff 00000000 00f2ff00     ................
   1ae28:	00000000 808f0000 00000000 00000000     ................
   1ae38:	00000000 f0ffffdf ffff00d2 20fef0ff     ............... 
   1ae48:	f0ffffff ffffe2ff fdfff0ff f2ffffff     ................
   1ae58:	ffff0000 ffffffff ffffffff ffffffff     ................
   1ae68:	ffffffff ffffffff ffffffff ffffffff     ................
   1ae78:	ffffffff ffffffff ffffffff ffffffff     ................
   1ae88:	ffffffff ffffffff ffffffff ffdfffff     ................
   1ae98:	fdffffff 00000000 00000000 00000000     ................
   1aea8:	feef9c04 000040c9 ffef0700 feffffff     .....@..........
   1aeb8:	df040070 8aa8fcff 40fdffcf 00d5ff6f     p..........@o...
   1aec8:	5d000000 f6cff6ff 00000000 fc6f0000     ...]..........o.
   1aed8:	5a00301a 00a5fddf 0000a103 ffffff4d     .0.Z........M...
   1aee8:	0000d4ff feff0500 ffef8aa8 01000050     ............P...
   1aef8:	000070df 0010fd07 00120000 21000000     .p.............!
   1af08:	00000000 e44e0000 00000000 00000000     ......N.........
   1af18:	0000feef 00000000 feef0000 00000000     ................
   1af28:	00000000 0000e44e ff8f0000 ffffffff     ....N...........
   1af38:	80ffffff ffffffff ffffffff 00fff0ff     ................
   1af48:	00000000 fd0f0000 ffff0fff ffffffff     ................
   1af58:	0fffff0f ffffffff ff00ffff ffff0fff     ................
   1af68:	ffffffff 0fffff00 ffffffff ff0fffff     ................
   1af78:	000000ff 00000000 fffffd0f ffffffff     ................
   1af88:	f0ffffff ffffff8f ffffffff ff8f80ff     ................
   1af98:	ffffffff 80ffffff ffffffff ffffffff     ................
   1afa8:	00fff0ff 00000000 fd0f0000 ffff0fff     ................
   1afb8:	00f0ffff 0fffff0f ffffffff ff0000f0     ................
   1afc8:	ffff0fff 00f0ffff 0fffff00 ffffffff     ................
   1afd8:	ff0f00f0 000000ff 00000000 fffffd0f     ................
   1afe8:	ffffffff f0ffffff ffffff8f ffffffff     ................
   1aff8:	ff8f80ff ffffffff 80ffffff ffffffff     ................
   1b008:	ffffffff 00fff0ff 00000000 fd0f0000     ................
   1b018:	ffff0fff 000000ff 0fffff0f 00ffffff     ................
   1b028:	ff000000 ffff0fff 000000ff 0fffff00     ................
   1b038:	00ffffff ff0f0000 000000ff 00000000     ................
   1b048:	fffffd0f ffffffff f0ffffff ffffff8f     ................
   1b058:	ffffffff ff8f80ff ffffffff 80ffffff     ................
   1b068:	ffffffff ffffffff 00fff0ff 00000000     ................
   1b078:	fd0f0000 f0ff0fff 00000000 0fffff0f     ................
   1b088:	0000f0ff ff000000 f0ff0fff 00000000     ................
   1b098:	0fffff00 0000f0ff ff0f0000 000000ff     ................
   1b0a8:	00000000 fffffd0f ffffffff f0ffffff     ................
   1b0b8:	ffffff8f ffffffff ff8f80ff ffffffff     ................
   1b0c8:	80ffffff ffffffff ffffffff 00fff0ff     ................
   1b0d8:	00000000 fd0f0000 000000ff 00000000     ................
   1b0e8:	00ffff0f 00000000 ff000000 000000ff     ................
   1b0f8:	00000000 00ffff00 00000000 ff0f0000     ................
   1b108:	000000ff 00000000 fffffd0f ffffffff     ................
   1b118:	f0ffffff ffffff8f ffffffff 000080ff     ................
   1b128:	01000000 00000000 00000000 10fd0700     ................
   1b138:	00000000 cf010000 0000f5ff 00000000     ................
   1b148:	fe29b900 00000010 3f000000 00000210     ..)........?....
   1b158:	df030000 00900a80 70030000 77ffdf00     ...........p...w
   1b168:	555555f7 0fd38f55 dfccfdff cdccccdc     .UUUU...........
   1b178:	fe8fb0ff 00aa0010 404d0000 00104600     ..........M@.F..
   1b188:	3302f201 00000010 09000000 00f9cfb1     ...3............
   1b198:	00000000 ff0a0000 000090ff 00000000     ................
   1b1a8:	f9bf0000 00000000 00000000 00002201     ............."..
   1b1b8:	df180000 020092fd ffeffbef faff0d30     ............0...
   1b1c8:	4fe0ff2e ff03faff fafa9ff5 cffa4f35     ...O........5O..
   1b1d8:	0b3d8ac0 03fbeffd fffe8f12 ff06b0ff     ..=.............
   1b1e8:	d1ffffff efffff08 9f1011fd 59d1dfff     ...............Y
   1b1f8:	affd0b3b 1d38fad7 faff5ffb 0df7df01     ;.....8.._......
   1b208:	ff1dfaff fcef03f1 0050ffdf a3fedf18     ..........P.....
   1b218:	7f000000 0000f7ff ffffffef effeffff     ................
   1b228:	ffffffff 0000feff 00000000 ffff0f00     ................
   1b238:	f0ffffff ffffff0f 0ff0ffff f9999ff9     ................
   1b248:	f80ff09f 8ff8888f 8ff80ff0 f08ff888     ................
   1b258:	888ff80f 0ff08ff8 f8888ff8 f80ff08f     ................
   1b268:	8ff8888f 8ff80ff0 f08ff888 999ff90f     ................
   1b278:	0ff09ff9 ffffffff ff08f0ff ffffffff     ................
   1b288:	00000080 7f000000 000000a0 8f000000     ................
   1b298:	0000b0ff 0d000000 00a0ffff 8a000000     ................
   1b2a8:	00ffff1d 8f000000 70ff1dfa 8f000000     ...........p....
   1b2b8:	801dfaff 8f000000 00faffff 8f000000     ................
   1b2c8:	80ffffff 8f000000 80ffffff 8f000000     ................
   1b2d8:	80ffffff 8f000000 80ffffff 6f000000     ...............o
   1b2e8:	80ffffff 0b000000 80ffffff 00000000     ................
   1b2f8:	80ffffdf 00000000 80ffff0e 00000000     ................
   1b308:	60dbde00 00000000 00000000 00000000     ...`............
   1b318:	00000000 ffffff1b e4ffffff ffdf0100     ................
   1b328:	ffffffff 1d00feff effaffff ffffaffe     ................
   1b338:	ffffdf01 0ae22ea0 ff1dffff 02e2ffff     ................
   1b348:	ffff2e20 ffffffcf ef0220fe ffcfffff      ........ ......
   1b358:	20feffff ffffef02 ffffff1d 2e2002e2     ... .......... .
   1b368:	df01ffff 2ea0ffff ffff0ae2 ffff1d00     ................
   1b378:	affeeffa 0100ffff ffffffdf feffffff     ................
   1b388:	ff1b0000 ffffffff 0800e4ff e4ffffff     ................
   1b398:	ffff8f00 f808feff ff400b0f 0b0ff88f     ..........@.....
   1b3a8:	f8ffff40 ff400b0f ffffffff ffffffff     @.....@.........
   1b3b8:	ffffffff ffffffff ffffffff ffffffff     ................
   1b3c8:	ffffffff ffffffff ffffffff ffffffff     ................
   1b3d8:	ffffffff ffffffff ffffffff ffefffff     ................
   1b3e8:	feffffff ffffff4e 0000e4ff 00000000     ....N...........
   1b3f8:	00000100 00000000 00e00300 00001000     ................
   1b408:	10ef0200 0000bf00 f17f0000 00f1cf00     ................
   1b418:	ff070000 77ffcf11 bf777777 ffffcff1     .......wwww.....
   1b428:	ffffffff ffff17ff ffffffff ff07e0ff     ................
   1b438:	000000f1 06000000 000010ff 00000000     ................
   1b448:	0000a005 00000000                       ........

0001b450 <lv_anim_path_def>:
   1b450:	000102c5 00000000                       ........

0001b458 <sin0_90_table>:
   1b458:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
   1b468:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
   1b478:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
   1b488:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
   1b498:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
   1b4a8:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
   1b4b8:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
   1b4c8:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
   1b4d8:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
   1b4e8:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
   1b4f8:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
   1b508:	7ffa7feb 00007fff 3b2e2c20 005f2d3a     ........ ,.;:-_.
   1b518:	0000ffff 00008410 008c80ef              ............

0001b524 <_init>:
   1b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b526:	bf00      	nop
   1b528:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b52a:	bc08      	pop	{r3}
   1b52c:	469e      	mov	lr, r3
   1b52e:	4770      	bx	lr

0001b530 <__init_array_start>:
   1b530:	00000289 	.word	0x00000289

0001b534 <_fini>:
   1b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b536:	bf00      	nop
   1b538:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b53a:	bc08      	pop	{r3}
   1b53c:	469e      	mov	lr, r3
   1b53e:	4770      	bx	lr

0001b540 <__fini_array_start>:
   1b540:	00000265 	.word	0x00000265
