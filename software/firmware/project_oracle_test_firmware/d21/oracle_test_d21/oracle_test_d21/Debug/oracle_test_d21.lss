
oracle_test_d21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001ca80  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001ca80  0001ca80  0002ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000c4  20000000  0001ca88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004d70  200000c8  0001cb50  000300c4  2**3
                  ALLOC
  4 .stack        00002000  20004e38  000218c0  000300c4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
  7 .debug_info   0008aa76  00000000  00000000  00030145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000bbde  00000000  00000000  000babbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017e0  00000000  00000000  000c6799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003230  00000000  00000000  000c7f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002642b  00000000  00000000  000cb1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000310b3  00000000  00000000  000f15d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009fce7  00000000  00000000  00122687  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004794  00000000  00000000  001c2370  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0003d5da  00000000  00000000  001c6b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_gc_clear_roots(void)
{
       0:	38 6e 00 20 0d 13 00 00 09 13 00 00 09 13 00 00     8n. ............
	...
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
      2c:	09 13 00 00 00 00 00 00 00 00 00 00 09 13 00 00     ................
      3c:	45 01 00 00 09 13 00 00 09 13 00 00 09 13 00 00     E...............
      4c:	09 13 00 00 09 13 00 00 09 13 00 00 09 13 00 00     ................
      5c:	09 13 00 00 09 13 00 00 e5 0b 00 00 f5 0b 00 00     ................
}
      6c:	05 0c 00 00 15 0c 00 00 25 0c 00 00 35 0c 00 00     ........%...5...
      7c:	09 13 00 00 09 13 00 00 09 13 00 00 09 13 00 00     ................
      8c:	09 13 00 00 09 13 00 00 09 13 00 00 09 13 00 00     ................
      9c:	09 13 00 00 09 13 00 00 09 13 00 00 09 13 00 00     ................
      ac:	09 13 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c8 	.word	0x200000c8
      d4:	00000000 	.word	0x00000000
      d8:	0001ca88 	.word	0x0001ca88

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000cc 	.word	0x200000cc
     108:	0001ca88 	.word	0x0001ca88
     10c:	0001ca88 	.word	0x0001ca88
     110:	00000000 	.word	0x00000000

00000114 <p_time_init>:
#include "p_time.h"
#include "p_usart.h"
#include "lvgl.h"
static volatile uint64_t sys_time = 0;
void p_time_init(void)
{
     114:	b510      	push	{r4, lr}
	// Configure SysTick to trigger every millisecond using the CPU Clock
	SysTick->CTRL = 0;					// Disable SysTick
     116:	4a08      	ldr	r2, [pc, #32]	; (138 <p_time_init+0x24>)
     118:	2000      	movs	r0, #0
     11a:	6010      	str	r0, [r2, #0]
	SysTick->LOAD = 7999UL;				// Set reload register for 1mS interrupts
     11c:	4b07      	ldr	r3, [pc, #28]	; (13c <p_time_init+0x28>)
     11e:	6053      	str	r3, [r2, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     120:	4c07      	ldr	r4, [pc, #28]	; (140 <p_time_init+0x2c>)
     122:	6a23      	ldr	r3, [r4, #32]
     124:	021b      	lsls	r3, r3, #8
     126:	0a1b      	lsrs	r3, r3, #8
     128:	21c0      	movs	r1, #192	; 0xc0
     12a:	0609      	lsls	r1, r1, #24
     12c:	430b      	orrs	r3, r1
     12e:	6223      	str	r3, [r4, #32]
	NVIC_SetPriority(SysTick_IRQn, 3);	// Set interrupt priority to least urgency
	SysTick->VAL = 0;					// Reset the SysTick counter value
     130:	6090      	str	r0, [r2, #8]
	SysTick->CTRL = 0x00000007;			// Enable SysTick, Enable SysTick Exceptions, Use CPU Clock
     132:	2307      	movs	r3, #7
     134:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(SysTick_IRQn);		// Enable SysTick Interrupt
}
     136:	bd10      	pop	{r4, pc}
     138:	e000e010 	.word	0xe000e010
     13c:	00001f3f 	.word	0x00001f3f
     140:	e000ed00 	.word	0xe000ed00

00000144 <SysTick_Handler>:


 void SysTick_Handler(void)
 {
     144:	b570      	push	{r4, r5, r6, lr}
	 sys_time++;
     146:	4906      	ldr	r1, [pc, #24]	; (160 <SysTick_Handler+0x1c>)
     148:	680a      	ldr	r2, [r1, #0]
     14a:	684b      	ldr	r3, [r1, #4]
     14c:	2401      	movs	r4, #1
     14e:	2500      	movs	r5, #0
     150:	1912      	adds	r2, r2, r4
     152:	416b      	adcs	r3, r5
     154:	600a      	str	r2, [r1, #0]
     156:	604b      	str	r3, [r1, #4]
	 lv_tick_inc(1);
     158:	2001      	movs	r0, #1
     15a:	4b02      	ldr	r3, [pc, #8]	; (164 <SysTick_Handler+0x20>)
     15c:	4798      	blx	r3
 }
     15e:	bd70      	pop	{r4, r5, r6, pc}
     160:	200000e8 	.word	0x200000e8
     164:	0000f709 	.word	0x0000f709

00000168 <oracle_init>:
#include "p_ssd1963.h"

static lv_disp_buf_t disp_buf;
static lv_color_t buf[LV_HOR_RES_MAX * 10];                     /*Declare a buffer for 10 lines*/
void oracle_init(void)
{
     168:	b530      	push	{r4, r5, lr}
     16a:	b08d      	sub	sp, #52	; 0x34
	system_init();
     16c:	4b13      	ldr	r3, [pc, #76]	; (1bc <oracle_init+0x54>)
     16e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     170:	2201      	movs	r2, #1
     172:	4b13      	ldr	r3, [pc, #76]	; (1c0 <oracle_init+0x58>)
     174:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     176:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     17a:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	p_usart_init();
     17c:	4b11      	ldr	r3, [pc, #68]	; (1c4 <oracle_init+0x5c>)
     17e:	4798      	blx	r3
	p_i2c_init();
     180:	4b11      	ldr	r3, [pc, #68]	; (1c8 <oracle_init+0x60>)
     182:	4798      	blx	r3
	p_gpio_init();
     184:	4b11      	ldr	r3, [pc, #68]	; (1cc <oracle_init+0x64>)
     186:	4798      	blx	r3
	p_time_init();
     188:	4b11      	ldr	r3, [pc, #68]	; (1d0 <oracle_init+0x68>)
     18a:	4798      	blx	r3
	
	
	lv_init();
     18c:	4b11      	ldr	r3, [pc, #68]	; (1d4 <oracle_init+0x6c>)
     18e:	4798      	blx	r3
	
	ssd1963_init();
     190:	4b11      	ldr	r3, [pc, #68]	; (1d8 <oracle_init+0x70>)
     192:	4798      	blx	r3
	lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    /*Initialize the display buffer*/
     194:	4c11      	ldr	r4, [pc, #68]	; (1dc <oracle_init+0x74>)
     196:	2396      	movs	r3, #150	; 0x96
     198:	015b      	lsls	r3, r3, #5
     19a:	2200      	movs	r2, #0
     19c:	4910      	ldr	r1, [pc, #64]	; (1e0 <oracle_init+0x78>)
     19e:	0020      	movs	r0, r4
     1a0:	4d10      	ldr	r5, [pc, #64]	; (1e4 <oracle_init+0x7c>)
     1a2:	47a8      	blx	r5
	lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
	lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
     1a4:	a801      	add	r0, sp, #4
     1a6:	4b10      	ldr	r3, [pc, #64]	; (1e8 <oracle_init+0x80>)
     1a8:	4798      	blx	r3
	disp_drv.flush_cb = ssd1963_flush;    /*Set your driver function*/
     1aa:	4b10      	ldr	r3, [pc, #64]	; (1ec <oracle_init+0x84>)
     1ac:	9304      	str	r3, [sp, #16]
	disp_drv.buffer = &disp_buf;          /*Assign the buffer to the display*/
     1ae:	9402      	str	r4, [sp, #8]
	lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
     1b0:	a801      	add	r0, sp, #4
     1b2:	4b0f      	ldr	r3, [pc, #60]	; (1f0 <oracle_init+0x88>)
     1b4:	4798      	blx	r3
	
}
     1b6:	b00d      	add	sp, #52	; 0x34
     1b8:	bd30      	pop	{r4, r5, pc}
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	000012dd 	.word	0x000012dd
     1c0:	2000000c 	.word	0x2000000c
     1c4:	00017851 	.word	0x00017851
     1c8:	000177f1 	.word	0x000177f1
     1cc:	0001773d 	.word	0x0001773d
     1d0:	00000115 	.word	0x00000115
     1d4:	000017f9 	.word	0x000017f9
     1d8:	00016905 	.word	0x00016905
     1dc:	20002670 	.word	0x20002670
     1e0:	200000f0 	.word	0x200000f0
     1e4:	0000f459 	.word	0x0000f459
     1e8:	0000f3f5 	.word	0x0000f3f5
     1ec:	00017421 	.word	0x00017421
     1f0:	0000f479 	.word	0x0000f479

000001f4 <oracle_service>:

void oracle_service(void)
{
     1f4:	b510      	push	{r4, lr}
	delay_ms(1);
     1f6:	2000      	movs	r0, #0
     1f8:	4b08      	ldr	r3, [pc, #32]	; (21c <oracle_service+0x28>)
     1fa:	4798      	blx	r3
     1fc:	0002      	movs	r2, r0
     1fe:	2300      	movs	r3, #0
     200:	4807      	ldr	r0, [pc, #28]	; (220 <oracle_service+0x2c>)
     202:	2100      	movs	r1, #0
     204:	1880      	adds	r0, r0, r2
     206:	4159      	adcs	r1, r3
     208:	4a06      	ldr	r2, [pc, #24]	; (224 <oracle_service+0x30>)
     20a:	2300      	movs	r3, #0
     20c:	4c06      	ldr	r4, [pc, #24]	; (228 <oracle_service+0x34>)
     20e:	47a0      	blx	r4
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <oracle_service+0x38>)
     212:	4798      	blx	r3
	lv_task_handler();
     214:	4b06      	ldr	r3, [pc, #24]	; (230 <oracle_service+0x3c>)
     216:	4798      	blx	r3
     218:	bd10      	pop	{r4, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	00001065 	.word	0x00001065
     220:	00001b57 	.word	0x00001b57
     224:	00001b58 	.word	0x00001b58
     228:	00017c4d 	.word	0x00017c4d
     22c:	20000001 	.word	0x20000001
     230:	000112f5 	.word	0x000112f5

00000234 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
     236:	46de      	mov	lr, fp
     238:	4657      	mov	r7, sl
     23a:	464e      	mov	r6, r9
     23c:	4645      	mov	r5, r8
     23e:	b5e0      	push	{r5, r6, r7, lr}
     240:	b087      	sub	sp, #28
     242:	4680      	mov	r8, r0
     244:	9104      	str	r1, [sp, #16]
     246:	0016      	movs	r6, r2
     248:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     24a:	2200      	movs	r2, #0
     24c:	2300      	movs	r3, #0
     24e:	2100      	movs	r1, #0
     250:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     252:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     254:	2001      	movs	r0, #1
     256:	0021      	movs	r1, r4
     258:	9600      	str	r6, [sp, #0]
     25a:	9701      	str	r7, [sp, #4]
     25c:	465c      	mov	r4, fp
     25e:	9403      	str	r4, [sp, #12]
     260:	4644      	mov	r4, r8
     262:	9405      	str	r4, [sp, #20]
     264:	e013      	b.n	28e <long_division+0x5a>
     266:	2420      	movs	r4, #32
     268:	1a64      	subs	r4, r4, r1
     26a:	0005      	movs	r5, r0
     26c:	40e5      	lsrs	r5, r4
     26e:	46a8      	mov	r8, r5
     270:	e014      	b.n	29c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     272:	9c00      	ldr	r4, [sp, #0]
     274:	9d01      	ldr	r5, [sp, #4]
     276:	1b12      	subs	r2, r2, r4
     278:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     27a:	465c      	mov	r4, fp
     27c:	464d      	mov	r5, r9
     27e:	432c      	orrs	r4, r5
     280:	46a3      	mov	fp, r4
     282:	9c03      	ldr	r4, [sp, #12]
     284:	4645      	mov	r5, r8
     286:	432c      	orrs	r4, r5
     288:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     28a:	3901      	subs	r1, #1
     28c:	d325      	bcc.n	2da <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     28e:	2420      	movs	r4, #32
     290:	4264      	negs	r4, r4
     292:	190c      	adds	r4, r1, r4
     294:	d4e7      	bmi.n	266 <long_division+0x32>
     296:	0005      	movs	r5, r0
     298:	40a5      	lsls	r5, r4
     29a:	46a8      	mov	r8, r5
     29c:	0004      	movs	r4, r0
     29e:	408c      	lsls	r4, r1
     2a0:	46a1      	mov	r9, r4
		r = r << 1;
     2a2:	1892      	adds	r2, r2, r2
     2a4:	415b      	adcs	r3, r3
     2a6:	0014      	movs	r4, r2
     2a8:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2aa:	9e05      	ldr	r6, [sp, #20]
     2ac:	464f      	mov	r7, r9
     2ae:	403e      	ands	r6, r7
     2b0:	46b4      	mov	ip, r6
     2b2:	9e04      	ldr	r6, [sp, #16]
     2b4:	4647      	mov	r7, r8
     2b6:	403e      	ands	r6, r7
     2b8:	46b2      	mov	sl, r6
     2ba:	4666      	mov	r6, ip
     2bc:	4657      	mov	r7, sl
     2be:	433e      	orrs	r6, r7
     2c0:	d003      	beq.n	2ca <long_division+0x96>
			r |= 0x01;
     2c2:	0006      	movs	r6, r0
     2c4:	4326      	orrs	r6, r4
     2c6:	0032      	movs	r2, r6
     2c8:	002b      	movs	r3, r5
		if (r >= d) {
     2ca:	9c00      	ldr	r4, [sp, #0]
     2cc:	9d01      	ldr	r5, [sp, #4]
     2ce:	429d      	cmp	r5, r3
     2d0:	d8db      	bhi.n	28a <long_division+0x56>
     2d2:	d1ce      	bne.n	272 <long_division+0x3e>
     2d4:	4294      	cmp	r4, r2
     2d6:	d8d8      	bhi.n	28a <long_division+0x56>
     2d8:	e7cb      	b.n	272 <long_division+0x3e>
     2da:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     2dc:	4658      	mov	r0, fp
     2de:	0019      	movs	r1, r3
     2e0:	b007      	add	sp, #28
     2e2:	bc3c      	pop	{r2, r3, r4, r5}
     2e4:	4690      	mov	r8, r2
     2e6:	4699      	mov	r9, r3
     2e8:	46a2      	mov	sl, r4
     2ea:	46ab      	mov	fp, r5
     2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

000002ee <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     2ee:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     2f0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2f2:	2340      	movs	r3, #64	; 0x40
     2f4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     2f6:	4281      	cmp	r1, r0
     2f8:	d202      	bcs.n	300 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     2fa:	0018      	movs	r0, r3
     2fc:	bd10      	pop	{r4, pc}
		baud_calculated++;
     2fe:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     300:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     302:	1c63      	adds	r3, r4, #1
     304:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     306:	4288      	cmp	r0, r1
     308:	d9f9      	bls.n	2fe <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     30a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     30c:	2cff      	cmp	r4, #255	; 0xff
     30e:	d8f4      	bhi.n	2fa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     310:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     312:	2300      	movs	r3, #0
     314:	e7f1      	b.n	2fa <_sercom_get_sync_baud_val+0xc>
	...

00000318 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	b083      	sub	sp, #12
     31c:	000f      	movs	r7, r1
     31e:	0016      	movs	r6, r2
     320:	aa08      	add	r2, sp, #32
     322:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     324:	0004      	movs	r4, r0
     326:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     328:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     32a:	42bc      	cmp	r4, r7
     32c:	d902      	bls.n	334 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     32e:	0010      	movs	r0, r2
     330:	b003      	add	sp, #12
     332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     334:	2b00      	cmp	r3, #0
     336:	d114      	bne.n	362 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     338:	0002      	movs	r2, r0
     33a:	0008      	movs	r0, r1
     33c:	2100      	movs	r1, #0
     33e:	4c19      	ldr	r4, [pc, #100]	; (3a4 <_sercom_get_async_baud_val+0x8c>)
     340:	47a0      	blx	r4
     342:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     344:	003a      	movs	r2, r7
     346:	2300      	movs	r3, #0
     348:	2000      	movs	r0, #0
     34a:	4c17      	ldr	r4, [pc, #92]	; (3a8 <_sercom_get_async_baud_val+0x90>)
     34c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     34e:	2200      	movs	r2, #0
     350:	2301      	movs	r3, #1
     352:	1a12      	subs	r2, r2, r0
     354:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     356:	0c12      	lsrs	r2, r2, #16
     358:	041b      	lsls	r3, r3, #16
     35a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     35c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     35e:	2200      	movs	r2, #0
     360:	e7e5      	b.n	32e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     362:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     364:	2b01      	cmp	r3, #1
     366:	d1f9      	bne.n	35c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     368:	000a      	movs	r2, r1
     36a:	2300      	movs	r3, #0
     36c:	2100      	movs	r1, #0
     36e:	4c0d      	ldr	r4, [pc, #52]	; (3a4 <_sercom_get_async_baud_val+0x8c>)
     370:	47a0      	blx	r4
     372:	0002      	movs	r2, r0
     374:	000b      	movs	r3, r1
     376:	9200      	str	r2, [sp, #0]
     378:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     37a:	0038      	movs	r0, r7
     37c:	2100      	movs	r1, #0
     37e:	4c0a      	ldr	r4, [pc, #40]	; (3a8 <_sercom_get_async_baud_val+0x90>)
     380:	47a0      	blx	r4
     382:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     384:	2380      	movs	r3, #128	; 0x80
     386:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     388:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     38a:	4298      	cmp	r0, r3
     38c:	d8cf      	bhi.n	32e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     38e:	0f79      	lsrs	r1, r7, #29
     390:	00f8      	lsls	r0, r7, #3
     392:	9a00      	ldr	r2, [sp, #0]
     394:	9b01      	ldr	r3, [sp, #4]
     396:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     398:	00ea      	lsls	r2, r5, #3
     39a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     39c:	b2d2      	uxtb	r2, r2
     39e:	0352      	lsls	r2, r2, #13
     3a0:	432a      	orrs	r2, r5
     3a2:	e7db      	b.n	35c <_sercom_get_async_baud_val+0x44>
     3a4:	00017c8d 	.word	0x00017c8d
     3a8:	00000235 	.word	0x00000235

000003ac <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3ac:	b510      	push	{r4, lr}
     3ae:	b082      	sub	sp, #8
     3b0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3b2:	4b0e      	ldr	r3, [pc, #56]	; (3ec <sercom_set_gclk_generator+0x40>)
     3b4:	781b      	ldrb	r3, [r3, #0]
     3b6:	2b00      	cmp	r3, #0
     3b8:	d007      	beq.n	3ca <sercom_set_gclk_generator+0x1e>
     3ba:	2900      	cmp	r1, #0
     3bc:	d105      	bne.n	3ca <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <sercom_set_gclk_generator+0x40>)
     3c0:	785b      	ldrb	r3, [r3, #1]
     3c2:	4283      	cmp	r3, r0
     3c4:	d010      	beq.n	3e8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3c6:	201d      	movs	r0, #29
     3c8:	e00c      	b.n	3e4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     3ca:	a901      	add	r1, sp, #4
     3cc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3ce:	2013      	movs	r0, #19
     3d0:	4b07      	ldr	r3, [pc, #28]	; (3f0 <sercom_set_gclk_generator+0x44>)
     3d2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3d4:	2013      	movs	r0, #19
     3d6:	4b07      	ldr	r3, [pc, #28]	; (3f4 <sercom_set_gclk_generator+0x48>)
     3d8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     3da:	4b04      	ldr	r3, [pc, #16]	; (3ec <sercom_set_gclk_generator+0x40>)
     3dc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3de:	2201      	movs	r2, #1
     3e0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     3e2:	2000      	movs	r0, #0
}
     3e4:	b002      	add	sp, #8
     3e6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     3e8:	2000      	movs	r0, #0
     3ea:	e7fb      	b.n	3e4 <sercom_set_gclk_generator+0x38>
     3ec:	20002694 	.word	0x20002694
     3f0:	0000117d 	.word	0x0000117d
     3f4:	000010f1 	.word	0x000010f1

000003f8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3f8:	4b40      	ldr	r3, [pc, #256]	; (4fc <_sercom_get_default_pad+0x104>)
     3fa:	4298      	cmp	r0, r3
     3fc:	d031      	beq.n	462 <_sercom_get_default_pad+0x6a>
     3fe:	d90a      	bls.n	416 <_sercom_get_default_pad+0x1e>
     400:	4b3f      	ldr	r3, [pc, #252]	; (500 <_sercom_get_default_pad+0x108>)
     402:	4298      	cmp	r0, r3
     404:	d04d      	beq.n	4a2 <_sercom_get_default_pad+0xaa>
     406:	4b3f      	ldr	r3, [pc, #252]	; (504 <_sercom_get_default_pad+0x10c>)
     408:	4298      	cmp	r0, r3
     40a:	d05a      	beq.n	4c2 <_sercom_get_default_pad+0xca>
     40c:	4b3e      	ldr	r3, [pc, #248]	; (508 <_sercom_get_default_pad+0x110>)
     40e:	4298      	cmp	r0, r3
     410:	d037      	beq.n	482 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     412:	2000      	movs	r0, #0
}
     414:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     416:	4b3d      	ldr	r3, [pc, #244]	; (50c <_sercom_get_default_pad+0x114>)
     418:	4298      	cmp	r0, r3
     41a:	d00c      	beq.n	436 <_sercom_get_default_pad+0x3e>
     41c:	4b3c      	ldr	r3, [pc, #240]	; (510 <_sercom_get_default_pad+0x118>)
     41e:	4298      	cmp	r0, r3
     420:	d1f7      	bne.n	412 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     422:	2901      	cmp	r1, #1
     424:	d017      	beq.n	456 <_sercom_get_default_pad+0x5e>
     426:	2900      	cmp	r1, #0
     428:	d05d      	beq.n	4e6 <_sercom_get_default_pad+0xee>
     42a:	2902      	cmp	r1, #2
     42c:	d015      	beq.n	45a <_sercom_get_default_pad+0x62>
     42e:	2903      	cmp	r1, #3
     430:	d015      	beq.n	45e <_sercom_get_default_pad+0x66>
	return 0;
     432:	2000      	movs	r0, #0
     434:	e7ee      	b.n	414 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     436:	2901      	cmp	r1, #1
     438:	d007      	beq.n	44a <_sercom_get_default_pad+0x52>
     43a:	2900      	cmp	r1, #0
     43c:	d051      	beq.n	4e2 <_sercom_get_default_pad+0xea>
     43e:	2902      	cmp	r1, #2
     440:	d005      	beq.n	44e <_sercom_get_default_pad+0x56>
     442:	2903      	cmp	r1, #3
     444:	d005      	beq.n	452 <_sercom_get_default_pad+0x5a>
	return 0;
     446:	2000      	movs	r0, #0
     448:	e7e4      	b.n	414 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44a:	4832      	ldr	r0, [pc, #200]	; (514 <_sercom_get_default_pad+0x11c>)
     44c:	e7e2      	b.n	414 <_sercom_get_default_pad+0x1c>
     44e:	4832      	ldr	r0, [pc, #200]	; (518 <_sercom_get_default_pad+0x120>)
     450:	e7e0      	b.n	414 <_sercom_get_default_pad+0x1c>
     452:	4832      	ldr	r0, [pc, #200]	; (51c <_sercom_get_default_pad+0x124>)
     454:	e7de      	b.n	414 <_sercom_get_default_pad+0x1c>
     456:	4832      	ldr	r0, [pc, #200]	; (520 <_sercom_get_default_pad+0x128>)
     458:	e7dc      	b.n	414 <_sercom_get_default_pad+0x1c>
     45a:	4832      	ldr	r0, [pc, #200]	; (524 <_sercom_get_default_pad+0x12c>)
     45c:	e7da      	b.n	414 <_sercom_get_default_pad+0x1c>
     45e:	4832      	ldr	r0, [pc, #200]	; (528 <_sercom_get_default_pad+0x130>)
     460:	e7d8      	b.n	414 <_sercom_get_default_pad+0x1c>
     462:	2901      	cmp	r1, #1
     464:	d007      	beq.n	476 <_sercom_get_default_pad+0x7e>
     466:	2900      	cmp	r1, #0
     468:	d03f      	beq.n	4ea <_sercom_get_default_pad+0xf2>
     46a:	2902      	cmp	r1, #2
     46c:	d005      	beq.n	47a <_sercom_get_default_pad+0x82>
     46e:	2903      	cmp	r1, #3
     470:	d005      	beq.n	47e <_sercom_get_default_pad+0x86>
	return 0;
     472:	2000      	movs	r0, #0
     474:	e7ce      	b.n	414 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     476:	482d      	ldr	r0, [pc, #180]	; (52c <_sercom_get_default_pad+0x134>)
     478:	e7cc      	b.n	414 <_sercom_get_default_pad+0x1c>
     47a:	482d      	ldr	r0, [pc, #180]	; (530 <_sercom_get_default_pad+0x138>)
     47c:	e7ca      	b.n	414 <_sercom_get_default_pad+0x1c>
     47e:	482d      	ldr	r0, [pc, #180]	; (534 <_sercom_get_default_pad+0x13c>)
     480:	e7c8      	b.n	414 <_sercom_get_default_pad+0x1c>
     482:	2901      	cmp	r1, #1
     484:	d007      	beq.n	496 <_sercom_get_default_pad+0x9e>
     486:	2900      	cmp	r1, #0
     488:	d031      	beq.n	4ee <_sercom_get_default_pad+0xf6>
     48a:	2902      	cmp	r1, #2
     48c:	d005      	beq.n	49a <_sercom_get_default_pad+0xa2>
     48e:	2903      	cmp	r1, #3
     490:	d005      	beq.n	49e <_sercom_get_default_pad+0xa6>
	return 0;
     492:	2000      	movs	r0, #0
     494:	e7be      	b.n	414 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     496:	4828      	ldr	r0, [pc, #160]	; (538 <_sercom_get_default_pad+0x140>)
     498:	e7bc      	b.n	414 <_sercom_get_default_pad+0x1c>
     49a:	4828      	ldr	r0, [pc, #160]	; (53c <_sercom_get_default_pad+0x144>)
     49c:	e7ba      	b.n	414 <_sercom_get_default_pad+0x1c>
     49e:	4828      	ldr	r0, [pc, #160]	; (540 <_sercom_get_default_pad+0x148>)
     4a0:	e7b8      	b.n	414 <_sercom_get_default_pad+0x1c>
     4a2:	2901      	cmp	r1, #1
     4a4:	d007      	beq.n	4b6 <_sercom_get_default_pad+0xbe>
     4a6:	2900      	cmp	r1, #0
     4a8:	d023      	beq.n	4f2 <_sercom_get_default_pad+0xfa>
     4aa:	2902      	cmp	r1, #2
     4ac:	d005      	beq.n	4ba <_sercom_get_default_pad+0xc2>
     4ae:	2903      	cmp	r1, #3
     4b0:	d005      	beq.n	4be <_sercom_get_default_pad+0xc6>
	return 0;
     4b2:	2000      	movs	r0, #0
     4b4:	e7ae      	b.n	414 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b6:	4823      	ldr	r0, [pc, #140]	; (544 <_sercom_get_default_pad+0x14c>)
     4b8:	e7ac      	b.n	414 <_sercom_get_default_pad+0x1c>
     4ba:	4823      	ldr	r0, [pc, #140]	; (548 <_sercom_get_default_pad+0x150>)
     4bc:	e7aa      	b.n	414 <_sercom_get_default_pad+0x1c>
     4be:	4823      	ldr	r0, [pc, #140]	; (54c <_sercom_get_default_pad+0x154>)
     4c0:	e7a8      	b.n	414 <_sercom_get_default_pad+0x1c>
     4c2:	2901      	cmp	r1, #1
     4c4:	d007      	beq.n	4d6 <_sercom_get_default_pad+0xde>
     4c6:	2900      	cmp	r1, #0
     4c8:	d015      	beq.n	4f6 <_sercom_get_default_pad+0xfe>
     4ca:	2902      	cmp	r1, #2
     4cc:	d005      	beq.n	4da <_sercom_get_default_pad+0xe2>
     4ce:	2903      	cmp	r1, #3
     4d0:	d005      	beq.n	4de <_sercom_get_default_pad+0xe6>
	return 0;
     4d2:	2000      	movs	r0, #0
     4d4:	e79e      	b.n	414 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4d6:	481e      	ldr	r0, [pc, #120]	; (550 <_sercom_get_default_pad+0x158>)
     4d8:	e79c      	b.n	414 <_sercom_get_default_pad+0x1c>
     4da:	481e      	ldr	r0, [pc, #120]	; (554 <_sercom_get_default_pad+0x15c>)
     4dc:	e79a      	b.n	414 <_sercom_get_default_pad+0x1c>
     4de:	481e      	ldr	r0, [pc, #120]	; (558 <_sercom_get_default_pad+0x160>)
     4e0:	e798      	b.n	414 <_sercom_get_default_pad+0x1c>
     4e2:	481e      	ldr	r0, [pc, #120]	; (55c <_sercom_get_default_pad+0x164>)
     4e4:	e796      	b.n	414 <_sercom_get_default_pad+0x1c>
     4e6:	2003      	movs	r0, #3
     4e8:	e794      	b.n	414 <_sercom_get_default_pad+0x1c>
     4ea:	481d      	ldr	r0, [pc, #116]	; (560 <_sercom_get_default_pad+0x168>)
     4ec:	e792      	b.n	414 <_sercom_get_default_pad+0x1c>
     4ee:	481d      	ldr	r0, [pc, #116]	; (564 <_sercom_get_default_pad+0x16c>)
     4f0:	e790      	b.n	414 <_sercom_get_default_pad+0x1c>
     4f2:	481d      	ldr	r0, [pc, #116]	; (568 <_sercom_get_default_pad+0x170>)
     4f4:	e78e      	b.n	414 <_sercom_get_default_pad+0x1c>
     4f6:	481d      	ldr	r0, [pc, #116]	; (56c <_sercom_get_default_pad+0x174>)
     4f8:	e78c      	b.n	414 <_sercom_get_default_pad+0x1c>
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	42001000 	.word	0x42001000
     500:	42001800 	.word	0x42001800
     504:	42001c00 	.word	0x42001c00
     508:	42001400 	.word	0x42001400
     50c:	42000800 	.word	0x42000800
     510:	42000c00 	.word	0x42000c00
     514:	00050003 	.word	0x00050003
     518:	00060003 	.word	0x00060003
     51c:	00070003 	.word	0x00070003
     520:	00010003 	.word	0x00010003
     524:	001e0003 	.word	0x001e0003
     528:	001f0003 	.word	0x001f0003
     52c:	00090003 	.word	0x00090003
     530:	000a0003 	.word	0x000a0003
     534:	000b0003 	.word	0x000b0003
     538:	00110003 	.word	0x00110003
     53c:	00120003 	.word	0x00120003
     540:	00130003 	.word	0x00130003
     544:	000d0003 	.word	0x000d0003
     548:	000e0003 	.word	0x000e0003
     54c:	000f0003 	.word	0x000f0003
     550:	00170003 	.word	0x00170003
     554:	00180003 	.word	0x00180003
     558:	00190003 	.word	0x00190003
     55c:	00040003 	.word	0x00040003
     560:	00080003 	.word	0x00080003
     564:	00100003 	.word	0x00100003
     568:	000c0003 	.word	0x000c0003
     56c:	00160003 	.word	0x00160003

00000570 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     570:	b530      	push	{r4, r5, lr}
     572:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     574:	4b0b      	ldr	r3, [pc, #44]	; (5a4 <_sercom_get_sercom_inst_index+0x34>)
     576:	466a      	mov	r2, sp
     578:	cb32      	ldmia	r3!, {r1, r4, r5}
     57a:	c232      	stmia	r2!, {r1, r4, r5}
     57c:	cb32      	ldmia	r3!, {r1, r4, r5}
     57e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     580:	9b00      	ldr	r3, [sp, #0]
     582:	4283      	cmp	r3, r0
     584:	d00b      	beq.n	59e <_sercom_get_sercom_inst_index+0x2e>
     586:	2301      	movs	r3, #1
     588:	009a      	lsls	r2, r3, #2
     58a:	4669      	mov	r1, sp
     58c:	5852      	ldr	r2, [r2, r1]
     58e:	4282      	cmp	r2, r0
     590:	d006      	beq.n	5a0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     592:	3301      	adds	r3, #1
     594:	2b06      	cmp	r3, #6
     596:	d1f7      	bne.n	588 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     598:	2000      	movs	r0, #0
}
     59a:	b007      	add	sp, #28
     59c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     59e:	2300      	movs	r3, #0
			return i;
     5a0:	b2d8      	uxtb	r0, r3
     5a2:	e7fa      	b.n	59a <_sercom_get_sercom_inst_index+0x2a>
     5a4:	000187a4 	.word	0x000187a4

000005a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5aa:	46de      	mov	lr, fp
     5ac:	4657      	mov	r7, sl
     5ae:	464e      	mov	r6, r9
     5b0:	4645      	mov	r5, r8
     5b2:	b5e0      	push	{r5, r6, r7, lr}
     5b4:	b091      	sub	sp, #68	; 0x44
     5b6:	0005      	movs	r5, r0
     5b8:	000c      	movs	r4, r1
     5ba:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5bc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5be:	0008      	movs	r0, r1
     5c0:	4bba      	ldr	r3, [pc, #744]	; (8ac <usart_init+0x304>)
     5c2:	4798      	blx	r3
     5c4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5c6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5c8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ca:	07db      	lsls	r3, r3, #31
     5cc:	d506      	bpl.n	5dc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     5ce:	b011      	add	sp, #68	; 0x44
     5d0:	bc3c      	pop	{r2, r3, r4, r5}
     5d2:	4690      	mov	r8, r2
     5d4:	4699      	mov	r9, r3
     5d6:	46a2      	mov	sl, r4
     5d8:	46ab      	mov	fp, r5
     5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5dc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     5de:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5e0:	079b      	lsls	r3, r3, #30
     5e2:	d4f4      	bmi.n	5ce <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5e4:	49b2      	ldr	r1, [pc, #712]	; (8b0 <usart_init+0x308>)
     5e6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5e8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5ea:	2301      	movs	r3, #1
     5ec:	40bb      	lsls	r3, r7
     5ee:	4303      	orrs	r3, r0
     5f0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     5f2:	a90f      	add	r1, sp, #60	; 0x3c
     5f4:	272d      	movs	r7, #45	; 0x2d
     5f6:	5df3      	ldrb	r3, [r6, r7]
     5f8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5fa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5fc:	b2d3      	uxtb	r3, r2
     5fe:	9302      	str	r3, [sp, #8]
     600:	0018      	movs	r0, r3
     602:	4bac      	ldr	r3, [pc, #688]	; (8b4 <usart_init+0x30c>)
     604:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     606:	9802      	ldr	r0, [sp, #8]
     608:	4bab      	ldr	r3, [pc, #684]	; (8b8 <usart_init+0x310>)
     60a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     60c:	5df0      	ldrb	r0, [r6, r7]
     60e:	2100      	movs	r1, #0
     610:	4baa      	ldr	r3, [pc, #680]	; (8bc <usart_init+0x314>)
     612:	4798      	blx	r3
	module->character_size = config->character_size;
     614:	7af3      	ldrb	r3, [r6, #11]
     616:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     618:	2324      	movs	r3, #36	; 0x24
     61a:	5cf3      	ldrb	r3, [r6, r3]
     61c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     61e:	2325      	movs	r3, #37	; 0x25
     620:	5cf3      	ldrb	r3, [r6, r3]
     622:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     624:	7ef3      	ldrb	r3, [r6, #27]
     626:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     628:	7f33      	ldrb	r3, [r6, #28]
     62a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     62c:	682b      	ldr	r3, [r5, #0]
     62e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     630:	0018      	movs	r0, r3
     632:	4b9e      	ldr	r3, [pc, #632]	; (8ac <usart_init+0x304>)
     634:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     636:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     638:	2200      	movs	r2, #0
     63a:	230e      	movs	r3, #14
     63c:	a906      	add	r1, sp, #24
     63e:	468c      	mov	ip, r1
     640:	4463      	add	r3, ip
     642:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     644:	8a32      	ldrh	r2, [r6, #16]
     646:	9202      	str	r2, [sp, #8]
     648:	2380      	movs	r3, #128	; 0x80
     64a:	01db      	lsls	r3, r3, #7
     64c:	429a      	cmp	r2, r3
     64e:	d100      	bne.n	652 <usart_init+0xaa>
     650:	e09a      	b.n	788 <usart_init+0x1e0>
     652:	d90f      	bls.n	674 <usart_init+0xcc>
     654:	23c0      	movs	r3, #192	; 0xc0
     656:	01db      	lsls	r3, r3, #7
     658:	9a02      	ldr	r2, [sp, #8]
     65a:	429a      	cmp	r2, r3
     65c:	d100      	bne.n	660 <usart_init+0xb8>
     65e:	e08e      	b.n	77e <usart_init+0x1d6>
     660:	2380      	movs	r3, #128	; 0x80
     662:	021b      	lsls	r3, r3, #8
     664:	429a      	cmp	r2, r3
     666:	d000      	beq.n	66a <usart_init+0xc2>
     668:	e11b      	b.n	8a2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     66a:	2303      	movs	r3, #3
     66c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     66e:	2300      	movs	r3, #0
     670:	9307      	str	r3, [sp, #28]
     672:	e008      	b.n	686 <usart_init+0xde>
	switch (config->sample_rate) {
     674:	2380      	movs	r3, #128	; 0x80
     676:	019b      	lsls	r3, r3, #6
     678:	429a      	cmp	r2, r3
     67a:	d000      	beq.n	67e <usart_init+0xd6>
     67c:	e111      	b.n	8a2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     67e:	2310      	movs	r3, #16
     680:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     682:	3b0f      	subs	r3, #15
     684:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     686:	6833      	ldr	r3, [r6, #0]
     688:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     68a:	68f3      	ldr	r3, [r6, #12]
     68c:	469b      	mov	fp, r3
		config->sample_adjustment |
     68e:	6973      	ldr	r3, [r6, #20]
     690:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     692:	7e33      	ldrb	r3, [r6, #24]
     694:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     696:	2326      	movs	r3, #38	; 0x26
     698:	5cf3      	ldrb	r3, [r6, r3]
     69a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     69c:	6873      	ldr	r3, [r6, #4]
     69e:	4699      	mov	r9, r3
	switch (transfer_mode)
     6a0:	2b00      	cmp	r3, #0
     6a2:	d100      	bne.n	6a6 <usart_init+0xfe>
     6a4:	e09c      	b.n	7e0 <usart_init+0x238>
     6a6:	2380      	movs	r3, #128	; 0x80
     6a8:	055b      	lsls	r3, r3, #21
     6aa:	4599      	cmp	r9, r3
     6ac:	d100      	bne.n	6b0 <usart_init+0x108>
     6ae:	e080      	b.n	7b2 <usart_init+0x20a>
	if(config->encoding_format_enable) {
     6b0:	7e73      	ldrb	r3, [r6, #25]
     6b2:	2b00      	cmp	r3, #0
     6b4:	d002      	beq.n	6bc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     6b6:	7eb3      	ldrb	r3, [r6, #26]
     6b8:	4642      	mov	r2, r8
     6ba:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     6bc:	230e      	movs	r3, #14
     6be:	aa06      	add	r2, sp, #24
     6c0:	4694      	mov	ip, r2
     6c2:	4463      	add	r3, ip
     6c4:	881b      	ldrh	r3, [r3, #0]
     6c6:	4642      	mov	r2, r8
     6c8:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     6ca:	9b05      	ldr	r3, [sp, #20]
     6cc:	465a      	mov	r2, fp
     6ce:	4313      	orrs	r3, r2
     6d0:	9a03      	ldr	r2, [sp, #12]
     6d2:	4313      	orrs	r3, r2
     6d4:	464a      	mov	r2, r9
     6d6:	4313      	orrs	r3, r2
     6d8:	9f02      	ldr	r7, [sp, #8]
     6da:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6dc:	9b04      	ldr	r3, [sp, #16]
     6de:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     6e0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6e2:	4653      	mov	r3, sl
     6e4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     6e6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     6e8:	2327      	movs	r3, #39	; 0x27
     6ea:	5cf3      	ldrb	r3, [r6, r3]
     6ec:	2b00      	cmp	r3, #0
     6ee:	d101      	bne.n	6f4 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     6f0:	3304      	adds	r3, #4
     6f2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     6f4:	7e73      	ldrb	r3, [r6, #25]
     6f6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     6f8:	7f32      	ldrb	r2, [r6, #28]
     6fa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     6fc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     6fe:	7f72      	ldrb	r2, [r6, #29]
     700:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     702:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     704:	2224      	movs	r2, #36	; 0x24
     706:	5cb2      	ldrb	r2, [r6, r2]
     708:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     70a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     70c:	2225      	movs	r2, #37	; 0x25
     70e:	5cb2      	ldrb	r2, [r6, r2]
     710:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     712:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     714:	7ab1      	ldrb	r1, [r6, #10]
     716:	7af2      	ldrb	r2, [r6, #11]
     718:	4311      	orrs	r1, r2
     71a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     71c:	8933      	ldrh	r3, [r6, #8]
     71e:	2bff      	cmp	r3, #255	; 0xff
     720:	d100      	bne.n	724 <usart_init+0x17c>
     722:	e081      	b.n	828 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     724:	2280      	movs	r2, #128	; 0x80
     726:	0452      	lsls	r2, r2, #17
     728:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     72a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     72c:	232c      	movs	r3, #44	; 0x2c
     72e:	5cf3      	ldrb	r3, [r6, r3]
     730:	2b00      	cmp	r3, #0
     732:	d103      	bne.n	73c <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     734:	4b62      	ldr	r3, [pc, #392]	; (8c0 <usart_init+0x318>)
     736:	789b      	ldrb	r3, [r3, #2]
     738:	079b      	lsls	r3, r3, #30
     73a:	d501      	bpl.n	740 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     73c:	2380      	movs	r3, #128	; 0x80
     73e:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     740:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     742:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     744:	2b00      	cmp	r3, #0
     746:	d1fc      	bne.n	742 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     748:	4643      	mov	r3, r8
     74a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     74c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     74e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     750:	2b00      	cmp	r3, #0
     752:	d1fc      	bne.n	74e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     754:	4643      	mov	r3, r8
     756:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     758:	ab0e      	add	r3, sp, #56	; 0x38
     75a:	2280      	movs	r2, #128	; 0x80
     75c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     75e:	2200      	movs	r2, #0
     760:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     762:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     764:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     766:	6b33      	ldr	r3, [r6, #48]	; 0x30
     768:	930a      	str	r3, [sp, #40]	; 0x28
     76a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     76c:	930b      	str	r3, [sp, #44]	; 0x2c
     76e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     770:	930c      	str	r3, [sp, #48]	; 0x30
     772:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     774:	9302      	str	r3, [sp, #8]
     776:	930d      	str	r3, [sp, #52]	; 0x34
     778:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     77a:	ae0a      	add	r6, sp, #40	; 0x28
     77c:	e063      	b.n	846 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     77e:	2308      	movs	r3, #8
     780:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     782:	3b07      	subs	r3, #7
     784:	9307      	str	r3, [sp, #28]
     786:	e77e      	b.n	686 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     788:	6833      	ldr	r3, [r6, #0]
     78a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     78c:	68f3      	ldr	r3, [r6, #12]
     78e:	469b      	mov	fp, r3
		config->sample_adjustment |
     790:	6973      	ldr	r3, [r6, #20]
     792:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     794:	7e33      	ldrb	r3, [r6, #24]
     796:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     798:	2326      	movs	r3, #38	; 0x26
     79a:	5cf3      	ldrb	r3, [r6, r3]
     79c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     79e:	6873      	ldr	r3, [r6, #4]
     7a0:	4699      	mov	r9, r3
	switch (transfer_mode)
     7a2:	2b00      	cmp	r3, #0
     7a4:	d018      	beq.n	7d8 <usart_init+0x230>
     7a6:	2380      	movs	r3, #128	; 0x80
     7a8:	055b      	lsls	r3, r3, #21
     7aa:	4599      	cmp	r9, r3
     7ac:	d001      	beq.n	7b2 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     7ae:	2000      	movs	r0, #0
     7b0:	e025      	b.n	7fe <usart_init+0x256>
			if (!config->use_external_clock) {
     7b2:	2327      	movs	r3, #39	; 0x27
     7b4:	5cf3      	ldrb	r3, [r6, r3]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d000      	beq.n	7bc <usart_init+0x214>
     7ba:	e779      	b.n	6b0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     7bc:	6a33      	ldr	r3, [r6, #32]
     7be:	001f      	movs	r7, r3
     7c0:	b2c0      	uxtb	r0, r0
     7c2:	4b40      	ldr	r3, [pc, #256]	; (8c4 <usart_init+0x31c>)
     7c4:	4798      	blx	r3
     7c6:	0001      	movs	r1, r0
     7c8:	220e      	movs	r2, #14
     7ca:	ab06      	add	r3, sp, #24
     7cc:	469c      	mov	ip, r3
     7ce:	4462      	add	r2, ip
     7d0:	0038      	movs	r0, r7
     7d2:	4b3d      	ldr	r3, [pc, #244]	; (8c8 <usart_init+0x320>)
     7d4:	4798      	blx	r3
     7d6:	e012      	b.n	7fe <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     7d8:	2308      	movs	r3, #8
     7da:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7dc:	2300      	movs	r3, #0
     7de:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     7e0:	2327      	movs	r3, #39	; 0x27
     7e2:	5cf3      	ldrb	r3, [r6, r3]
     7e4:	2b00      	cmp	r3, #0
     7e6:	d00e      	beq.n	806 <usart_init+0x25e>
				status_code =
     7e8:	9b06      	ldr	r3, [sp, #24]
     7ea:	9300      	str	r3, [sp, #0]
     7ec:	9b07      	ldr	r3, [sp, #28]
     7ee:	220e      	movs	r2, #14
     7f0:	a906      	add	r1, sp, #24
     7f2:	468c      	mov	ip, r1
     7f4:	4462      	add	r2, ip
     7f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     7f8:	6a30      	ldr	r0, [r6, #32]
     7fa:	4f34      	ldr	r7, [pc, #208]	; (8cc <usart_init+0x324>)
     7fc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     7fe:	2800      	cmp	r0, #0
     800:	d000      	beq.n	804 <usart_init+0x25c>
     802:	e6e4      	b.n	5ce <usart_init+0x26>
     804:	e754      	b.n	6b0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     806:	6a33      	ldr	r3, [r6, #32]
     808:	001f      	movs	r7, r3
     80a:	b2c0      	uxtb	r0, r0
     80c:	4b2d      	ldr	r3, [pc, #180]	; (8c4 <usart_init+0x31c>)
     80e:	4798      	blx	r3
     810:	0001      	movs	r1, r0
				status_code =
     812:	9b06      	ldr	r3, [sp, #24]
     814:	9300      	str	r3, [sp, #0]
     816:	9b07      	ldr	r3, [sp, #28]
     818:	220e      	movs	r2, #14
     81a:	a806      	add	r0, sp, #24
     81c:	4684      	mov	ip, r0
     81e:	4462      	add	r2, ip
     820:	0038      	movs	r0, r7
     822:	4f2a      	ldr	r7, [pc, #168]	; (8cc <usart_init+0x324>)
     824:	47b8      	blx	r7
     826:	e7ea      	b.n	7fe <usart_init+0x256>
		if(config->lin_slave_enable) {
     828:	7ef3      	ldrb	r3, [r6, #27]
     82a:	2b00      	cmp	r3, #0
     82c:	d100      	bne.n	830 <usart_init+0x288>
     82e:	e77d      	b.n	72c <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     830:	2380      	movs	r3, #128	; 0x80
     832:	04db      	lsls	r3, r3, #19
     834:	431f      	orrs	r7, r3
     836:	e779      	b.n	72c <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     838:	0020      	movs	r0, r4
     83a:	4b25      	ldr	r3, [pc, #148]	; (8d0 <usart_init+0x328>)
     83c:	4798      	blx	r3
     83e:	e007      	b.n	850 <usart_init+0x2a8>
     840:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     842:	2f04      	cmp	r7, #4
     844:	d00d      	beq.n	862 <usart_init+0x2ba>
     846:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     848:	00bb      	lsls	r3, r7, #2
     84a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     84c:	2800      	cmp	r0, #0
     84e:	d0f3      	beq.n	838 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     850:	1c43      	adds	r3, r0, #1
     852:	d0f5      	beq.n	840 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     854:	a90e      	add	r1, sp, #56	; 0x38
     856:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     858:	0c00      	lsrs	r0, r0, #16
     85a:	b2c0      	uxtb	r0, r0
     85c:	4b1d      	ldr	r3, [pc, #116]	; (8d4 <usart_init+0x32c>)
     85e:	4798      	blx	r3
     860:	e7ee      	b.n	840 <usart_init+0x298>
		module->callback[i]            = NULL;
     862:	2300      	movs	r3, #0
     864:	60eb      	str	r3, [r5, #12]
     866:	612b      	str	r3, [r5, #16]
     868:	616b      	str	r3, [r5, #20]
     86a:	61ab      	str	r3, [r5, #24]
     86c:	61eb      	str	r3, [r5, #28]
     86e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     870:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     872:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     874:	2200      	movs	r2, #0
     876:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     878:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     87a:	3330      	adds	r3, #48	; 0x30
     87c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     87e:	3301      	adds	r3, #1
     880:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     882:	3301      	adds	r3, #1
     884:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     886:	3301      	adds	r3, #1
     888:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     88a:	6828      	ldr	r0, [r5, #0]
     88c:	4b07      	ldr	r3, [pc, #28]	; (8ac <usart_init+0x304>)
     88e:	4798      	blx	r3
     890:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     892:	4911      	ldr	r1, [pc, #68]	; (8d8 <usart_init+0x330>)
     894:	4b11      	ldr	r3, [pc, #68]	; (8dc <usart_init+0x334>)
     896:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     898:	00a4      	lsls	r4, r4, #2
     89a:	4b11      	ldr	r3, [pc, #68]	; (8e0 <usart_init+0x338>)
     89c:	50e5      	str	r5, [r4, r3]
	return status_code;
     89e:	2000      	movs	r0, #0
     8a0:	e695      	b.n	5ce <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8a2:	2310      	movs	r3, #16
     8a4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8a6:	2300      	movs	r3, #0
     8a8:	9307      	str	r3, [sp, #28]
     8aa:	e6ec      	b.n	686 <usart_init+0xde>
     8ac:	00000571 	.word	0x00000571
     8b0:	40000400 	.word	0x40000400
     8b4:	0000117d 	.word	0x0000117d
     8b8:	000010f1 	.word	0x000010f1
     8bc:	000003ad 	.word	0x000003ad
     8c0:	41002000 	.word	0x41002000
     8c4:	00001199 	.word	0x00001199
     8c8:	000002ef 	.word	0x000002ef
     8cc:	00000319 	.word	0x00000319
     8d0:	000003f9 	.word	0x000003f9
     8d4:	00001275 	.word	0x00001275
     8d8:	000009e1 	.word	0x000009e1
     8dc:	00000b79 	.word	0x00000b79
     8e0:	20004c94 	.word	0x20004c94

000008e4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8e4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     8e6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     8e8:	2a00      	cmp	r2, #0
     8ea:	d101      	bne.n	8f0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     8ec:	0018      	movs	r0, r3
     8ee:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     8f0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     8f2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     8f4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     8f6:	2a00      	cmp	r2, #0
     8f8:	d1f8      	bne.n	8ec <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     8fa:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     8fc:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     8fe:	2102      	movs	r1, #2
     900:	7e13      	ldrb	r3, [r2, #24]
     902:	420b      	tst	r3, r1
     904:	d0fc      	beq.n	900 <usart_write_wait+0x1c>
	return STATUS_OK;
     906:	2300      	movs	r3, #0
     908:	e7f0      	b.n	8ec <usart_write_wait+0x8>
	...

0000090c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     90c:	b5f0      	push	{r4, r5, r6, r7, lr}
     90e:	46ce      	mov	lr, r9
     910:	4647      	mov	r7, r8
     912:	b580      	push	{r7, lr}
     914:	b083      	sub	sp, #12
     916:	0005      	movs	r5, r0
     918:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     91a:	2017      	movs	r0, #23
	if (length == 0) {
     91c:	2a00      	cmp	r2, #0
     91e:	d104      	bne.n	92a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     920:	b003      	add	sp, #12
     922:	bc0c      	pop	{r2, r3}
     924:	4690      	mov	r8, r2
     926:	4699      	mov	r9, r3
     928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     92a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     92c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     92e:	2b00      	cmp	r3, #0
     930:	d0f6      	beq.n	920 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     932:	682c      	ldr	r4, [r5, #0]
	while (length--) {
     934:	3a01      	subs	r2, #1
     936:	b293      	uxth	r3, r2
     938:	4699      	mov	r9, r3
     93a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     93c:	2701      	movs	r7, #1
	while (length--) {
     93e:	4b20      	ldr	r3, [pc, #128]	; (9c0 <usart_write_buffer_wait+0xb4>)
     940:	4698      	mov	r8, r3
     942:	e011      	b.n	968 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
     944:	1c73      	adds	r3, r6, #1
     946:	b29b      	uxth	r3, r3
     948:	9a01      	ldr	r2, [sp, #4]
     94a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     94c:	796a      	ldrb	r2, [r5, #5]
     94e:	2a01      	cmp	r2, #1
     950:	d017      	beq.n	982 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
     952:	b289      	uxth	r1, r1
     954:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     956:	0028      	movs	r0, r5
     958:	4b1a      	ldr	r3, [pc, #104]	; (9c4 <usart_write_buffer_wait+0xb8>)
     95a:	4798      	blx	r3
	while (length--) {
     95c:	464b      	mov	r3, r9
     95e:	3b01      	subs	r3, #1
     960:	b29b      	uxth	r3, r3
     962:	4699      	mov	r9, r3
     964:	4543      	cmp	r3, r8
     966:	d013      	beq.n	990 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     968:	7e23      	ldrb	r3, [r4, #24]
     96a:	423b      	tst	r3, r7
     96c:	d1ea      	bne.n	944 <usart_write_buffer_wait+0x38>
     96e:	4b14      	ldr	r3, [pc, #80]	; (9c0 <usart_write_buffer_wait+0xb4>)
     970:	7e22      	ldrb	r2, [r4, #24]
     972:	423a      	tst	r2, r7
     974:	d1e6      	bne.n	944 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
     976:	2b01      	cmp	r3, #1
     978:	d019      	beq.n	9ae <usart_write_buffer_wait+0xa2>
     97a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     97c:	2b00      	cmp	r3, #0
     97e:	d1f7      	bne.n	970 <usart_write_buffer_wait+0x64>
     980:	e7e0      	b.n	944 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
     982:	3602      	adds	r6, #2
     984:	b2b6      	uxth	r6, r6
     986:	9a01      	ldr	r2, [sp, #4]
     988:	5cd3      	ldrb	r3, [r2, r3]
     98a:	021b      	lsls	r3, r3, #8
     98c:	4319      	orrs	r1, r3
     98e:	e7e2      	b.n	956 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     990:	7e23      	ldrb	r3, [r4, #24]
     992:	079b      	lsls	r3, r3, #30
     994:	d40d      	bmi.n	9b2 <usart_write_buffer_wait+0xa6>
     996:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <usart_write_buffer_wait+0xb4>)
     998:	2102      	movs	r1, #2
     99a:	7e22      	ldrb	r2, [r4, #24]
     99c:	420a      	tst	r2, r1
     99e:	d10a      	bne.n	9b6 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
     9a0:	2b01      	cmp	r3, #1
     9a2:	d00a      	beq.n	9ba <usart_write_buffer_wait+0xae>
     9a4:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     9a6:	2b00      	cmp	r3, #0
     9a8:	d1f7      	bne.n	99a <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
     9aa:	2000      	movs	r0, #0
     9ac:	e7b8      	b.n	920 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     9ae:	2012      	movs	r0, #18
     9b0:	e7b6      	b.n	920 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     9b2:	2000      	movs	r0, #0
     9b4:	e7b4      	b.n	920 <usart_write_buffer_wait+0x14>
     9b6:	2000      	movs	r0, #0
     9b8:	e7b2      	b.n	920 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     9ba:	2012      	movs	r0, #18
     9bc:	e7b0      	b.n	920 <usart_write_buffer_wait+0x14>
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	0000ffff 	.word	0x0000ffff
     9c4:	000008e5 	.word	0x000008e5

000009c8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     9c8:	1c93      	adds	r3, r2, #2
     9ca:	009b      	lsls	r3, r3, #2
     9cc:	18c3      	adds	r3, r0, r3
     9ce:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     9d0:	2130      	movs	r1, #48	; 0x30
     9d2:	2301      	movs	r3, #1
     9d4:	4093      	lsls	r3, r2
     9d6:	001a      	movs	r2, r3
     9d8:	5c43      	ldrb	r3, [r0, r1]
     9da:	4313      	orrs	r3, r2
     9dc:	5443      	strb	r3, [r0, r1]
}
     9de:	4770      	bx	lr

000009e0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     9e2:	0080      	lsls	r0, r0, #2
     9e4:	4b62      	ldr	r3, [pc, #392]	; (b70 <_usart_interrupt_handler+0x190>)
     9e6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     9e8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9ea:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9ec:	2b00      	cmp	r3, #0
     9ee:	d1fc      	bne.n	9ea <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9f0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9f2:	7da6      	ldrb	r6, [r4, #22]
     9f4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9f6:	2330      	movs	r3, #48	; 0x30
     9f8:	5ceb      	ldrb	r3, [r5, r3]
     9fa:	2231      	movs	r2, #49	; 0x31
     9fc:	5caf      	ldrb	r7, [r5, r2]
     9fe:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a00:	07f3      	lsls	r3, r6, #31
     a02:	d522      	bpl.n	a4a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a04:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a06:	b29b      	uxth	r3, r3
     a08:	2b00      	cmp	r3, #0
     a0a:	d01c      	beq.n	a46 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a0e:	7813      	ldrb	r3, [r2, #0]
     a10:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a12:	1c51      	adds	r1, r2, #1
     a14:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a16:	7969      	ldrb	r1, [r5, #5]
     a18:	2901      	cmp	r1, #1
     a1a:	d00e      	beq.n	a3a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a1c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a1e:	05db      	lsls	r3, r3, #23
     a20:	0ddb      	lsrs	r3, r3, #23
     a22:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a24:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a26:	3b01      	subs	r3, #1
     a28:	b29b      	uxth	r3, r3
     a2a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a2c:	2b00      	cmp	r3, #0
     a2e:	d10c      	bne.n	a4a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a30:	3301      	adds	r3, #1
     a32:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a34:	3301      	adds	r3, #1
     a36:	75a3      	strb	r3, [r4, #22]
     a38:	e007      	b.n	a4a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a3a:	7851      	ldrb	r1, [r2, #1]
     a3c:	0209      	lsls	r1, r1, #8
     a3e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     a40:	3202      	adds	r2, #2
     a42:	62aa      	str	r2, [r5, #40]	; 0x28
     a44:	e7eb      	b.n	a1e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a46:	2301      	movs	r3, #1
     a48:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a4a:	07b3      	lsls	r3, r6, #30
     a4c:	d506      	bpl.n	a5c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a4e:	2302      	movs	r3, #2
     a50:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a52:	2200      	movs	r2, #0
     a54:	3331      	adds	r3, #49	; 0x31
     a56:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a58:	07fb      	lsls	r3, r7, #31
     a5a:	d41a      	bmi.n	a92 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a5c:	0773      	lsls	r3, r6, #29
     a5e:	d565      	bpl.n	b2c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a60:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a62:	b29b      	uxth	r3, r3
     a64:	2b00      	cmp	r3, #0
     a66:	d05f      	beq.n	b28 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a68:	8b63      	ldrh	r3, [r4, #26]
     a6a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a6c:	071a      	lsls	r2, r3, #28
     a6e:	d414      	bmi.n	a9a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a70:	223f      	movs	r2, #63	; 0x3f
     a72:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a74:	2b00      	cmp	r3, #0
     a76:	d034      	beq.n	ae2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a78:	079a      	lsls	r2, r3, #30
     a7a:	d511      	bpl.n	aa0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a7c:	221a      	movs	r2, #26
     a7e:	2332      	movs	r3, #50	; 0x32
     a80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a82:	3b30      	subs	r3, #48	; 0x30
     a84:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a86:	077b      	lsls	r3, r7, #29
     a88:	d550      	bpl.n	b2c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a8a:	0028      	movs	r0, r5
     a8c:	696b      	ldr	r3, [r5, #20]
     a8e:	4798      	blx	r3
     a90:	e04c      	b.n	b2c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a92:	0028      	movs	r0, r5
     a94:	68eb      	ldr	r3, [r5, #12]
     a96:	4798      	blx	r3
     a98:	e7e0      	b.n	a5c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a9a:	2237      	movs	r2, #55	; 0x37
     a9c:	4013      	ands	r3, r2
     a9e:	e7e9      	b.n	a74 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     aa0:	075a      	lsls	r2, r3, #29
     aa2:	d505      	bpl.n	ab0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     aa4:	221e      	movs	r2, #30
     aa6:	2332      	movs	r3, #50	; 0x32
     aa8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     aaa:	3b2e      	subs	r3, #46	; 0x2e
     aac:	8363      	strh	r3, [r4, #26]
     aae:	e7ea      	b.n	a86 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ab0:	07da      	lsls	r2, r3, #31
     ab2:	d505      	bpl.n	ac0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     ab4:	2213      	movs	r2, #19
     ab6:	2332      	movs	r3, #50	; 0x32
     ab8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     aba:	3b31      	subs	r3, #49	; 0x31
     abc:	8363      	strh	r3, [r4, #26]
     abe:	e7e2      	b.n	a86 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     ac0:	06da      	lsls	r2, r3, #27
     ac2:	d505      	bpl.n	ad0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ac4:	2242      	movs	r2, #66	; 0x42
     ac6:	2332      	movs	r3, #50	; 0x32
     ac8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     aca:	3b22      	subs	r3, #34	; 0x22
     acc:	8363      	strh	r3, [r4, #26]
     ace:	e7da      	b.n	a86 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ad0:	2220      	movs	r2, #32
     ad2:	421a      	tst	r2, r3
     ad4:	d0d7      	beq.n	a86 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ad6:	3221      	adds	r2, #33	; 0x21
     ad8:	2332      	movs	r3, #50	; 0x32
     ada:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     adc:	3b12      	subs	r3, #18
     ade:	8363      	strh	r3, [r4, #26]
     ae0:	e7d1      	b.n	a86 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     ae2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ae4:	05db      	lsls	r3, r3, #23
     ae6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     ae8:	b2da      	uxtb	r2, r3
     aea:	6a69      	ldr	r1, [r5, #36]	; 0x24
     aec:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     aee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     af0:	1c51      	adds	r1, r2, #1
     af2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     af4:	7969      	ldrb	r1, [r5, #5]
     af6:	2901      	cmp	r1, #1
     af8:	d010      	beq.n	b1c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     afa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     afc:	3b01      	subs	r3, #1
     afe:	b29b      	uxth	r3, r3
     b00:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b02:	2b00      	cmp	r3, #0
     b04:	d112      	bne.n	b2c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b06:	3304      	adds	r3, #4
     b08:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b0a:	2200      	movs	r2, #0
     b0c:	332e      	adds	r3, #46	; 0x2e
     b0e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b10:	07bb      	lsls	r3, r7, #30
     b12:	d50b      	bpl.n	b2c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b14:	0028      	movs	r0, r5
     b16:	692b      	ldr	r3, [r5, #16]
     b18:	4798      	blx	r3
     b1a:	e007      	b.n	b2c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b1c:	0a1b      	lsrs	r3, r3, #8
     b1e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b22:	3301      	adds	r3, #1
     b24:	626b      	str	r3, [r5, #36]	; 0x24
     b26:	e7e8      	b.n	afa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b28:	2304      	movs	r3, #4
     b2a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b2c:	06f3      	lsls	r3, r6, #27
     b2e:	d504      	bpl.n	b3a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b30:	2310      	movs	r3, #16
     b32:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b34:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b36:	06fb      	lsls	r3, r7, #27
     b38:	d40e      	bmi.n	b58 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b3a:	06b3      	lsls	r3, r6, #26
     b3c:	d504      	bpl.n	b48 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b3e:	2320      	movs	r3, #32
     b40:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b42:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b44:	073b      	lsls	r3, r7, #28
     b46:	d40b      	bmi.n	b60 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b48:	0733      	lsls	r3, r6, #28
     b4a:	d504      	bpl.n	b56 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b4c:	2308      	movs	r3, #8
     b4e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b50:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b52:	06bb      	lsls	r3, r7, #26
     b54:	d408      	bmi.n	b68 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b58:	0028      	movs	r0, r5
     b5a:	69eb      	ldr	r3, [r5, #28]
     b5c:	4798      	blx	r3
     b5e:	e7ec      	b.n	b3a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b60:	0028      	movs	r0, r5
     b62:	69ab      	ldr	r3, [r5, #24]
     b64:	4798      	blx	r3
     b66:	e7ef      	b.n	b48 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b68:	6a2b      	ldr	r3, [r5, #32]
     b6a:	0028      	movs	r0, r5
     b6c:	4798      	blx	r3
}
     b6e:	e7f2      	b.n	b56 <_usart_interrupt_handler+0x176>
     b70:	20004c94 	.word	0x20004c94

00000b74 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b74:	4770      	bx	lr
	...

00000b78 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b78:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b7a:	4b0a      	ldr	r3, [pc, #40]	; (ba4 <_sercom_set_handler+0x2c>)
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	2b00      	cmp	r3, #0
     b80:	d10c      	bne.n	b9c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b82:	4f09      	ldr	r7, [pc, #36]	; (ba8 <_sercom_set_handler+0x30>)
     b84:	4e09      	ldr	r6, [pc, #36]	; (bac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b86:	4d0a      	ldr	r5, [pc, #40]	; (bb0 <_sercom_set_handler+0x38>)
     b88:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b8a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b8c:	195a      	adds	r2, r3, r5
     b8e:	6014      	str	r4, [r2, #0]
     b90:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b92:	2b18      	cmp	r3, #24
     b94:	d1f9      	bne.n	b8a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b96:	2201      	movs	r2, #1
     b98:	4b02      	ldr	r3, [pc, #8]	; (ba4 <_sercom_set_handler+0x2c>)
     b9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b9c:	0080      	lsls	r0, r0, #2
     b9e:	4b02      	ldr	r3, [pc, #8]	; (ba8 <_sercom_set_handler+0x30>)
     ba0:	50c1      	str	r1, [r0, r3]
}
     ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ba4:	20002696 	.word	0x20002696
     ba8:	20002698 	.word	0x20002698
     bac:	00000b75 	.word	0x00000b75
     bb0:	20004c94 	.word	0x20004c94

00000bb4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     bb4:	b500      	push	{lr}
     bb6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     bb8:	2309      	movs	r3, #9
     bba:	466a      	mov	r2, sp
     bbc:	7013      	strb	r3, [r2, #0]
     bbe:	3301      	adds	r3, #1
     bc0:	7053      	strb	r3, [r2, #1]
     bc2:	3301      	adds	r3, #1
     bc4:	7093      	strb	r3, [r2, #2]
     bc6:	3301      	adds	r3, #1
     bc8:	70d3      	strb	r3, [r2, #3]
     bca:	3301      	adds	r3, #1
     bcc:	7113      	strb	r3, [r2, #4]
     bce:	3301      	adds	r3, #1
     bd0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     bd2:	4b03      	ldr	r3, [pc, #12]	; (be0 <_sercom_get_interrupt_vector+0x2c>)
     bd4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     bd6:	466b      	mov	r3, sp
     bd8:	5618      	ldrsb	r0, [r3, r0]
}
     bda:	b003      	add	sp, #12
     bdc:	bd00      	pop	{pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	00000571 	.word	0x00000571

00000be4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     be4:	b510      	push	{r4, lr}
     be6:	4b02      	ldr	r3, [pc, #8]	; (bf0 <SERCOM0_Handler+0xc>)
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	2000      	movs	r0, #0
     bec:	4798      	blx	r3
     bee:	bd10      	pop	{r4, pc}
     bf0:	20002698 	.word	0x20002698

00000bf4 <SERCOM1_Handler>:
     bf4:	b510      	push	{r4, lr}
     bf6:	4b02      	ldr	r3, [pc, #8]	; (c00 <SERCOM1_Handler+0xc>)
     bf8:	685b      	ldr	r3, [r3, #4]
     bfa:	2001      	movs	r0, #1
     bfc:	4798      	blx	r3
     bfe:	bd10      	pop	{r4, pc}
     c00:	20002698 	.word	0x20002698

00000c04 <SERCOM2_Handler>:
     c04:	b510      	push	{r4, lr}
     c06:	4b02      	ldr	r3, [pc, #8]	; (c10 <SERCOM2_Handler+0xc>)
     c08:	689b      	ldr	r3, [r3, #8]
     c0a:	2002      	movs	r0, #2
     c0c:	4798      	blx	r3
     c0e:	bd10      	pop	{r4, pc}
     c10:	20002698 	.word	0x20002698

00000c14 <SERCOM3_Handler>:
     c14:	b510      	push	{r4, lr}
     c16:	4b02      	ldr	r3, [pc, #8]	; (c20 <SERCOM3_Handler+0xc>)
     c18:	68db      	ldr	r3, [r3, #12]
     c1a:	2003      	movs	r0, #3
     c1c:	4798      	blx	r3
     c1e:	bd10      	pop	{r4, pc}
     c20:	20002698 	.word	0x20002698

00000c24 <SERCOM4_Handler>:
     c24:	b510      	push	{r4, lr}
     c26:	4b02      	ldr	r3, [pc, #8]	; (c30 <SERCOM4_Handler+0xc>)
     c28:	691b      	ldr	r3, [r3, #16]
     c2a:	2004      	movs	r0, #4
     c2c:	4798      	blx	r3
     c2e:	bd10      	pop	{r4, pc}
     c30:	20002698 	.word	0x20002698

00000c34 <SERCOM5_Handler>:
     c34:	b510      	push	{r4, lr}
     c36:	4b02      	ldr	r3, [pc, #8]	; (c40 <SERCOM5_Handler+0xc>)
     c38:	695b      	ldr	r3, [r3, #20]
     c3a:	2005      	movs	r0, #5
     c3c:	4798      	blx	r3
     c3e:	bd10      	pop	{r4, pc}
     c40:	20002698 	.word	0x20002698

00000c44 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c44:	4b0c      	ldr	r3, [pc, #48]	; (c78 <cpu_irq_enter_critical+0x34>)
     c46:	681b      	ldr	r3, [r3, #0]
     c48:	2b00      	cmp	r3, #0
     c4a:	d106      	bne.n	c5a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c4c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c50:	2b00      	cmp	r3, #0
     c52:	d007      	beq.n	c64 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c54:	2200      	movs	r2, #0
     c56:	4b09      	ldr	r3, [pc, #36]	; (c7c <cpu_irq_enter_critical+0x38>)
     c58:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c5a:	4a07      	ldr	r2, [pc, #28]	; (c78 <cpu_irq_enter_critical+0x34>)
     c5c:	6813      	ldr	r3, [r2, #0]
     c5e:	3301      	adds	r3, #1
     c60:	6013      	str	r3, [r2, #0]
}
     c62:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c64:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     c66:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c6a:	2200      	movs	r2, #0
     c6c:	4b04      	ldr	r3, [pc, #16]	; (c80 <cpu_irq_enter_critical+0x3c>)
     c6e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c70:	3201      	adds	r2, #1
     c72:	4b02      	ldr	r3, [pc, #8]	; (c7c <cpu_irq_enter_critical+0x38>)
     c74:	701a      	strb	r2, [r3, #0]
     c76:	e7f0      	b.n	c5a <cpu_irq_enter_critical+0x16>
     c78:	200026b0 	.word	0x200026b0
     c7c:	200026b4 	.word	0x200026b4
     c80:	2000000c 	.word	0x2000000c

00000c84 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c84:	4b08      	ldr	r3, [pc, #32]	; (ca8 <cpu_irq_leave_critical+0x24>)
     c86:	681a      	ldr	r2, [r3, #0]
     c88:	3a01      	subs	r2, #1
     c8a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d109      	bne.n	ca6 <cpu_irq_leave_critical+0x22>
     c92:	4b06      	ldr	r3, [pc, #24]	; (cac <cpu_irq_leave_critical+0x28>)
     c94:	781b      	ldrb	r3, [r3, #0]
     c96:	2b00      	cmp	r3, #0
     c98:	d005      	beq.n	ca6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c9a:	2201      	movs	r2, #1
     c9c:	4b04      	ldr	r3, [pc, #16]	; (cb0 <cpu_irq_leave_critical+0x2c>)
     c9e:	701a      	strb	r2, [r3, #0]
     ca0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ca4:	b662      	cpsie	i
	}
}
     ca6:	4770      	bx	lr
     ca8:	200026b0 	.word	0x200026b0
     cac:	200026b4 	.word	0x200026b4
     cb0:	2000000c 	.word	0x2000000c

00000cb4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     cb8:	ac01      	add	r4, sp, #4
     cba:	2501      	movs	r5, #1
     cbc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     cbe:	2700      	movs	r7, #0
     cc0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     cc2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     cc4:	0021      	movs	r1, r4
     cc6:	203e      	movs	r0, #62	; 0x3e
     cc8:	4e06      	ldr	r6, [pc, #24]	; (ce4 <system_board_init+0x30>)
     cca:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ccc:	2280      	movs	r2, #128	; 0x80
     cce:	05d2      	lsls	r2, r2, #23
     cd0:	4b05      	ldr	r3, [pc, #20]	; (ce8 <system_board_init+0x34>)
     cd2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     cd4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     cd6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     cd8:	0021      	movs	r1, r4
     cda:	200f      	movs	r0, #15
     cdc:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     cde:	b003      	add	sp, #12
     ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	00000ced 	.word	0x00000ced
     ce8:	41004480 	.word	0x41004480

00000cec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     cec:	b500      	push	{lr}
     cee:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     cf0:	ab01      	add	r3, sp, #4
     cf2:	2280      	movs	r2, #128	; 0x80
     cf4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     cf6:	780a      	ldrb	r2, [r1, #0]
     cf8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     cfa:	784a      	ldrb	r2, [r1, #1]
     cfc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     cfe:	788a      	ldrb	r2, [r1, #2]
     d00:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d02:	0019      	movs	r1, r3
     d04:	4b01      	ldr	r3, [pc, #4]	; (d0c <port_pin_set_config+0x20>)
     d06:	4798      	blx	r3
}
     d08:	b003      	add	sp, #12
     d0a:	bd00      	pop	{pc}
     d0c:	00001275 	.word	0x00001275

00000d10 <port_group_set_config>:
 */
void port_group_set_config(
		PortGroup *const port,
		const uint32_t mask,
		const struct port_config *const config)
{
     d10:	b510      	push	{r4, lr}
     d12:	b082      	sub	sp, #8
     d14:	ab01      	add	r3, sp, #4
     d16:	2480      	movs	r4, #128	; 0x80
     d18:	701c      	strb	r4, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d1a:	7814      	ldrb	r4, [r2, #0]
     d1c:	705c      	strb	r4, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d1e:	7854      	ldrb	r4, [r2, #1]
     d20:	709c      	strb	r4, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d22:	7892      	ldrb	r2, [r2, #2]
     d24:	70da      	strb	r2, [r3, #3]

	system_pinmux_group_set_config(port, mask, &pinmux_config);
     d26:	001a      	movs	r2, r3
     d28:	4b01      	ldr	r3, [pc, #4]	; (d30 <port_group_set_config+0x20>)
     d2a:	4798      	blx	r3
}
     d2c:	b002      	add	sp, #8
     d2e:	bd10      	pop	{r4, pc}
     d30:	000012a5 	.word	0x000012a5

00000d34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     d34:	b510      	push	{r4, lr}
	switch (clock_source) {
     d36:	2808      	cmp	r0, #8
     d38:	d803      	bhi.n	d42 <system_clock_source_get_hz+0xe>
     d3a:	0080      	lsls	r0, r0, #2
     d3c:	4b1c      	ldr	r3, [pc, #112]	; (db0 <system_clock_source_get_hz+0x7c>)
     d3e:	581b      	ldr	r3, [r3, r0]
     d40:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     d42:	2000      	movs	r0, #0
     d44:	e032      	b.n	dac <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <system_clock_source_get_hz+0x80>)
     d48:	6918      	ldr	r0, [r3, #16]
     d4a:	e02f      	b.n	dac <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     d4c:	4b1a      	ldr	r3, [pc, #104]	; (db8 <system_clock_source_get_hz+0x84>)
     d4e:	6a1b      	ldr	r3, [r3, #32]
     d50:	059b      	lsls	r3, r3, #22
     d52:	0f9b      	lsrs	r3, r3, #30
     d54:	4819      	ldr	r0, [pc, #100]	; (dbc <system_clock_source_get_hz+0x88>)
     d56:	40d8      	lsrs	r0, r3
     d58:	e028      	b.n	dac <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     d5a:	4b16      	ldr	r3, [pc, #88]	; (db4 <system_clock_source_get_hz+0x80>)
     d5c:	6958      	ldr	r0, [r3, #20]
     d5e:	e025      	b.n	dac <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     d60:	4b14      	ldr	r3, [pc, #80]	; (db4 <system_clock_source_get_hz+0x80>)
     d62:	681b      	ldr	r3, [r3, #0]
			return 0;
     d64:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     d66:	079b      	lsls	r3, r3, #30
     d68:	d520      	bpl.n	dac <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d6a:	4913      	ldr	r1, [pc, #76]	; (db8 <system_clock_source_get_hz+0x84>)
     d6c:	2210      	movs	r2, #16
     d6e:	68cb      	ldr	r3, [r1, #12]
     d70:	421a      	tst	r2, r3
     d72:	d0fc      	beq.n	d6e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     d74:	4b0f      	ldr	r3, [pc, #60]	; (db4 <system_clock_source_get_hz+0x80>)
     d76:	681a      	ldr	r2, [r3, #0]
     d78:	2324      	movs	r3, #36	; 0x24
     d7a:	4013      	ands	r3, r2
     d7c:	2b04      	cmp	r3, #4
     d7e:	d001      	beq.n	d84 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     d80:	480f      	ldr	r0, [pc, #60]	; (dc0 <system_clock_source_get_hz+0x8c>)
     d82:	e013      	b.n	dac <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d84:	2000      	movs	r0, #0
     d86:	4b0f      	ldr	r3, [pc, #60]	; (dc4 <system_clock_source_get_hz+0x90>)
     d88:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d8a:	4b0a      	ldr	r3, [pc, #40]	; (db4 <system_clock_source_get_hz+0x80>)
     d8c:	689b      	ldr	r3, [r3, #8]
     d8e:	041b      	lsls	r3, r3, #16
     d90:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d92:	4358      	muls	r0, r3
     d94:	e00a      	b.n	dac <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d96:	2350      	movs	r3, #80	; 0x50
     d98:	4a07      	ldr	r2, [pc, #28]	; (db8 <system_clock_source_get_hz+0x84>)
     d9a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d9c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d9e:	075b      	lsls	r3, r3, #29
     da0:	d504      	bpl.n	dac <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     da2:	4b04      	ldr	r3, [pc, #16]	; (db4 <system_clock_source_get_hz+0x80>)
     da4:	68d8      	ldr	r0, [r3, #12]
     da6:	e001      	b.n	dac <system_clock_source_get_hz+0x78>
		return 32768UL;
     da8:	2080      	movs	r0, #128	; 0x80
     daa:	0200      	lsls	r0, r0, #8
	}
}
     dac:	bd10      	pop	{r4, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	000187bc 	.word	0x000187bc
     db4:	200026b8 	.word	0x200026b8
     db8:	40000800 	.word	0x40000800
     dbc:	007a1200 	.word	0x007a1200
     dc0:	02dc6c00 	.word	0x02dc6c00
     dc4:	00001199 	.word	0x00001199

00000dc8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     dc8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     dca:	490c      	ldr	r1, [pc, #48]	; (dfc <system_clock_source_osc8m_set_config+0x34>)
     dcc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     dce:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     dd0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     dd2:	7840      	ldrb	r0, [r0, #1]
     dd4:	2201      	movs	r2, #1
     dd6:	4010      	ands	r0, r2
     dd8:	0180      	lsls	r0, r0, #6
     dda:	2640      	movs	r6, #64	; 0x40
     ddc:	43b3      	bics	r3, r6
     dde:	4303      	orrs	r3, r0
     de0:	402a      	ands	r2, r5
     de2:	01d2      	lsls	r2, r2, #7
     de4:	2080      	movs	r0, #128	; 0x80
     de6:	4383      	bics	r3, r0
     de8:	4313      	orrs	r3, r2
     dea:	2203      	movs	r2, #3
     dec:	4022      	ands	r2, r4
     dee:	0212      	lsls	r2, r2, #8
     df0:	4803      	ldr	r0, [pc, #12]	; (e00 <system_clock_source_osc8m_set_config+0x38>)
     df2:	4003      	ands	r3, r0
     df4:	4313      	orrs	r3, r2
     df6:	620b      	str	r3, [r1, #32]
}
     df8:	bd70      	pop	{r4, r5, r6, pc}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	40000800 	.word	0x40000800
     e00:	fffffcff 	.word	0xfffffcff

00000e04 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     e04:	2808      	cmp	r0, #8
     e06:	d803      	bhi.n	e10 <system_clock_source_enable+0xc>
     e08:	0080      	lsls	r0, r0, #2
     e0a:	4b25      	ldr	r3, [pc, #148]	; (ea0 <system_clock_source_enable+0x9c>)
     e0c:	581b      	ldr	r3, [r3, r0]
     e0e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e10:	2017      	movs	r0, #23
     e12:	e044      	b.n	e9e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     e14:	4a23      	ldr	r2, [pc, #140]	; (ea4 <system_clock_source_enable+0xa0>)
     e16:	6a13      	ldr	r3, [r2, #32]
     e18:	2102      	movs	r1, #2
     e1a:	430b      	orrs	r3, r1
     e1c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     e1e:	2000      	movs	r0, #0
     e20:	e03d      	b.n	e9e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e22:	4a20      	ldr	r2, [pc, #128]	; (ea4 <system_clock_source_enable+0xa0>)
     e24:	6993      	ldr	r3, [r2, #24]
     e26:	2102      	movs	r1, #2
     e28:	430b      	orrs	r3, r1
     e2a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     e2c:	2000      	movs	r0, #0
		break;
     e2e:	e036      	b.n	e9e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     e30:	4a1c      	ldr	r2, [pc, #112]	; (ea4 <system_clock_source_enable+0xa0>)
     e32:	8a13      	ldrh	r3, [r2, #16]
     e34:	2102      	movs	r1, #2
     e36:	430b      	orrs	r3, r1
     e38:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     e3a:	2000      	movs	r0, #0
		break;
     e3c:	e02f      	b.n	e9e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     e3e:	4a19      	ldr	r2, [pc, #100]	; (ea4 <system_clock_source_enable+0xa0>)
     e40:	8a93      	ldrh	r3, [r2, #20]
     e42:	2102      	movs	r1, #2
     e44:	430b      	orrs	r3, r1
     e46:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     e48:	2000      	movs	r0, #0
		break;
     e4a:	e028      	b.n	e9e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e4c:	4916      	ldr	r1, [pc, #88]	; (ea8 <system_clock_source_enable+0xa4>)
     e4e:	680b      	ldr	r3, [r1, #0]
     e50:	2202      	movs	r2, #2
     e52:	4313      	orrs	r3, r2
     e54:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     e56:	4b13      	ldr	r3, [pc, #76]	; (ea4 <system_clock_source_enable+0xa0>)
     e58:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e5a:	0019      	movs	r1, r3
     e5c:	320e      	adds	r2, #14
     e5e:	68cb      	ldr	r3, [r1, #12]
     e60:	421a      	tst	r2, r3
     e62:	d0fc      	beq.n	e5e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e64:	4a10      	ldr	r2, [pc, #64]	; (ea8 <system_clock_source_enable+0xa4>)
     e66:	6891      	ldr	r1, [r2, #8]
     e68:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <system_clock_source_enable+0xa0>)
     e6a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e6c:	6852      	ldr	r2, [r2, #4]
     e6e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e70:	2200      	movs	r2, #0
     e72:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e74:	0019      	movs	r1, r3
     e76:	3210      	adds	r2, #16
     e78:	68cb      	ldr	r3, [r1, #12]
     e7a:	421a      	tst	r2, r3
     e7c:	d0fc      	beq.n	e78 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e7e:	4b0a      	ldr	r3, [pc, #40]	; (ea8 <system_clock_source_enable+0xa4>)
     e80:	681b      	ldr	r3, [r3, #0]
     e82:	b29b      	uxth	r3, r3
     e84:	4a07      	ldr	r2, [pc, #28]	; (ea4 <system_clock_source_enable+0xa0>)
     e86:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     e88:	2000      	movs	r0, #0
     e8a:	e008      	b.n	e9e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     e8c:	4905      	ldr	r1, [pc, #20]	; (ea4 <system_clock_source_enable+0xa0>)
     e8e:	2244      	movs	r2, #68	; 0x44
     e90:	5c8b      	ldrb	r3, [r1, r2]
     e92:	2002      	movs	r0, #2
     e94:	4303      	orrs	r3, r0
     e96:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e98:	2000      	movs	r0, #0
		break;
     e9a:	e000      	b.n	e9e <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e9c:	2000      	movs	r0, #0
}
     e9e:	4770      	bx	lr
     ea0:	000187e0 	.word	0x000187e0
     ea4:	40000800 	.word	0x40000800
     ea8:	200026b8 	.word	0x200026b8

00000eac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     eac:	b530      	push	{r4, r5, lr}
     eae:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     eb0:	22c2      	movs	r2, #194	; 0xc2
     eb2:	00d2      	lsls	r2, r2, #3
     eb4:	4b1a      	ldr	r3, [pc, #104]	; (f20 <system_clock_init+0x74>)
     eb6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     eb8:	4a1a      	ldr	r2, [pc, #104]	; (f24 <system_clock_init+0x78>)
     eba:	6853      	ldr	r3, [r2, #4]
     ebc:	211e      	movs	r1, #30
     ebe:	438b      	bics	r3, r1
     ec0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     ec2:	2301      	movs	r3, #1
     ec4:	466a      	mov	r2, sp
     ec6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ec8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     eca:	4d17      	ldr	r5, [pc, #92]	; (f28 <system_clock_init+0x7c>)
     ecc:	b2e0      	uxtb	r0, r4
     ece:	4669      	mov	r1, sp
     ed0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ed2:	3401      	adds	r4, #1
     ed4:	2c25      	cmp	r4, #37	; 0x25
     ed6:	d1f9      	bne.n	ecc <system_clock_init+0x20>
	config->run_in_standby  = false;
     ed8:	a803      	add	r0, sp, #12
     eda:	2400      	movs	r4, #0
     edc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     ede:	2501      	movs	r5, #1
     ee0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ee2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ee4:	4b11      	ldr	r3, [pc, #68]	; (f2c <system_clock_init+0x80>)
     ee6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ee8:	2006      	movs	r0, #6
     eea:	4b11      	ldr	r3, [pc, #68]	; (f30 <system_clock_init+0x84>)
     eec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     eee:	4b11      	ldr	r3, [pc, #68]	; (f34 <system_clock_init+0x88>)
     ef0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     ef2:	4b11      	ldr	r3, [pc, #68]	; (f38 <system_clock_init+0x8c>)
     ef4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     ef6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     ef8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     efa:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     efc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     efe:	466b      	mov	r3, sp
     f00:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     f02:	2306      	movs	r3, #6
     f04:	466a      	mov	r2, sp
     f06:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     f08:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     f0a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f0c:	4669      	mov	r1, sp
     f0e:	2000      	movs	r0, #0
     f10:	4b0a      	ldr	r3, [pc, #40]	; (f3c <system_clock_init+0x90>)
     f12:	4798      	blx	r3
     f14:	2000      	movs	r0, #0
     f16:	4b0a      	ldr	r3, [pc, #40]	; (f40 <system_clock_init+0x94>)
     f18:	4798      	blx	r3
#endif
}
     f1a:	b005      	add	sp, #20
     f1c:	bd30      	pop	{r4, r5, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	40000800 	.word	0x40000800
     f24:	41004000 	.word	0x41004000
     f28:	0000117d 	.word	0x0000117d
     f2c:	00000dc9 	.word	0x00000dc9
     f30:	00000e05 	.word	0x00000e05
     f34:	00000f45 	.word	0x00000f45
     f38:	40000400 	.word	0x40000400
     f3c:	00000f69 	.word	0x00000f69
     f40:	00001021 	.word	0x00001021

00000f44 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f44:	4a06      	ldr	r2, [pc, #24]	; (f60 <system_gclk_init+0x1c>)
     f46:	6993      	ldr	r3, [r2, #24]
     f48:	2108      	movs	r1, #8
     f4a:	430b      	orrs	r3, r1
     f4c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f4e:	2201      	movs	r2, #1
     f50:	4b04      	ldr	r3, [pc, #16]	; (f64 <system_gclk_init+0x20>)
     f52:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f54:	0019      	movs	r1, r3
     f56:	780b      	ldrb	r3, [r1, #0]
     f58:	4213      	tst	r3, r2
     f5a:	d1fc      	bne.n	f56 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     f5c:	4770      	bx	lr
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	40000400 	.word	0x40000400
     f64:	40000c00 	.word	0x40000c00

00000f68 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f68:	b570      	push	{r4, r5, r6, lr}
     f6a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f6c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f6e:	780d      	ldrb	r5, [r1, #0]
     f70:	022d      	lsls	r5, r5, #8
     f72:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     f74:	784b      	ldrb	r3, [r1, #1]
     f76:	2b00      	cmp	r3, #0
     f78:	d002      	beq.n	f80 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     f7a:	2380      	movs	r3, #128	; 0x80
     f7c:	02db      	lsls	r3, r3, #11
     f7e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     f80:	7a4b      	ldrb	r3, [r1, #9]
     f82:	2b00      	cmp	r3, #0
     f84:	d002      	beq.n	f8c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     f86:	2380      	movs	r3, #128	; 0x80
     f88:	031b      	lsls	r3, r3, #12
     f8a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     f8c:	6848      	ldr	r0, [r1, #4]
     f8e:	2801      	cmp	r0, #1
     f90:	d910      	bls.n	fb4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f92:	1e43      	subs	r3, r0, #1
     f94:	4218      	tst	r0, r3
     f96:	d134      	bne.n	1002 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f98:	2802      	cmp	r0, #2
     f9a:	d930      	bls.n	ffe <system_gclk_gen_set_config+0x96>
     f9c:	2302      	movs	r3, #2
     f9e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     fa0:	3201      	adds	r2, #1
						mask <<= 1) {
     fa2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     fa4:	4298      	cmp	r0, r3
     fa6:	d8fb      	bhi.n	fa0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     fa8:	0212      	lsls	r2, r2, #8
     faa:	4332      	orrs	r2, r6
     fac:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     fae:	2380      	movs	r3, #128	; 0x80
     fb0:	035b      	lsls	r3, r3, #13
     fb2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     fb4:	7a0b      	ldrb	r3, [r1, #8]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d002      	beq.n	fc0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     fba:	2380      	movs	r3, #128	; 0x80
     fbc:	039b      	lsls	r3, r3, #14
     fbe:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fc0:	4a13      	ldr	r2, [pc, #76]	; (1010 <system_gclk_gen_set_config+0xa8>)
     fc2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     fc4:	b25b      	sxtb	r3, r3
     fc6:	2b00      	cmp	r3, #0
     fc8:	dbfb      	blt.n	fc2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     fca:	4b12      	ldr	r3, [pc, #72]	; (1014 <system_gclk_gen_set_config+0xac>)
     fcc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     fce:	4b12      	ldr	r3, [pc, #72]	; (1018 <system_gclk_gen_set_config+0xb0>)
     fd0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fd2:	4a0f      	ldr	r2, [pc, #60]	; (1010 <system_gclk_gen_set_config+0xa8>)
     fd4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     fd6:	b25b      	sxtb	r3, r3
     fd8:	2b00      	cmp	r3, #0
     fda:	dbfb      	blt.n	fd4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     fdc:	4b0c      	ldr	r3, [pc, #48]	; (1010 <system_gclk_gen_set_config+0xa8>)
     fde:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fe0:	001a      	movs	r2, r3
     fe2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     fe4:	b25b      	sxtb	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	dbfb      	blt.n	fe2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     fea:	4a09      	ldr	r2, [pc, #36]	; (1010 <system_gclk_gen_set_config+0xa8>)
     fec:	6853      	ldr	r3, [r2, #4]
     fee:	2180      	movs	r1, #128	; 0x80
     ff0:	0249      	lsls	r1, r1, #9
     ff2:	400b      	ands	r3, r1
     ff4:	431d      	orrs	r5, r3
     ff6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     ff8:	4b08      	ldr	r3, [pc, #32]	; (101c <system_gclk_gen_set_config+0xb4>)
     ffa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ffc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     ffe:	2200      	movs	r2, #0
    1000:	e7d2      	b.n	fa8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1002:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1004:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1006:	2380      	movs	r3, #128	; 0x80
    1008:	029b      	lsls	r3, r3, #10
    100a:	431d      	orrs	r5, r3
    100c:	e7d2      	b.n	fb4 <system_gclk_gen_set_config+0x4c>
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	40000c00 	.word	0x40000c00
    1014:	00000c45 	.word	0x00000c45
    1018:	40000c08 	.word	0x40000c08
    101c:	00000c85 	.word	0x00000c85

00001020 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1020:	b510      	push	{r4, lr}
    1022:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1024:	4a0b      	ldr	r2, [pc, #44]	; (1054 <system_gclk_gen_enable+0x34>)
    1026:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1028:	b25b      	sxtb	r3, r3
    102a:	2b00      	cmp	r3, #0
    102c:	dbfb      	blt.n	1026 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    102e:	4b0a      	ldr	r3, [pc, #40]	; (1058 <system_gclk_gen_enable+0x38>)
    1030:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1032:	4b0a      	ldr	r3, [pc, #40]	; (105c <system_gclk_gen_enable+0x3c>)
    1034:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1036:	4a07      	ldr	r2, [pc, #28]	; (1054 <system_gclk_gen_enable+0x34>)
    1038:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    103a:	b25b      	sxtb	r3, r3
    103c:	2b00      	cmp	r3, #0
    103e:	dbfb      	blt.n	1038 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1040:	4a04      	ldr	r2, [pc, #16]	; (1054 <system_gclk_gen_enable+0x34>)
    1042:	6851      	ldr	r1, [r2, #4]
    1044:	2380      	movs	r3, #128	; 0x80
    1046:	025b      	lsls	r3, r3, #9
    1048:	430b      	orrs	r3, r1
    104a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    104c:	4b04      	ldr	r3, [pc, #16]	; (1060 <system_gclk_gen_enable+0x40>)
    104e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1050:	bd10      	pop	{r4, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	40000c00 	.word	0x40000c00
    1058:	00000c45 	.word	0x00000c45
    105c:	40000c04 	.word	0x40000c04
    1060:	00000c85 	.word	0x00000c85

00001064 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1064:	b570      	push	{r4, r5, r6, lr}
    1066:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1068:	4a1a      	ldr	r2, [pc, #104]	; (10d4 <system_gclk_gen_get_hz+0x70>)
    106a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    106c:	b25b      	sxtb	r3, r3
    106e:	2b00      	cmp	r3, #0
    1070:	dbfb      	blt.n	106a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1072:	4b19      	ldr	r3, [pc, #100]	; (10d8 <system_gclk_gen_get_hz+0x74>)
    1074:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1076:	4b19      	ldr	r3, [pc, #100]	; (10dc <system_gclk_gen_get_hz+0x78>)
    1078:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    107a:	4a16      	ldr	r2, [pc, #88]	; (10d4 <system_gclk_gen_get_hz+0x70>)
    107c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    107e:	b25b      	sxtb	r3, r3
    1080:	2b00      	cmp	r3, #0
    1082:	dbfb      	blt.n	107c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1084:	4e13      	ldr	r6, [pc, #76]	; (10d4 <system_gclk_gen_get_hz+0x70>)
    1086:	6870      	ldr	r0, [r6, #4]
    1088:	04c0      	lsls	r0, r0, #19
    108a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    108c:	4b14      	ldr	r3, [pc, #80]	; (10e0 <system_gclk_gen_get_hz+0x7c>)
    108e:	4798      	blx	r3
    1090:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <system_gclk_gen_get_hz+0x78>)
    1094:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1096:	6876      	ldr	r6, [r6, #4]
    1098:	02f6      	lsls	r6, r6, #11
    109a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    109c:	4b11      	ldr	r3, [pc, #68]	; (10e4 <system_gclk_gen_get_hz+0x80>)
    109e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10a0:	4a0c      	ldr	r2, [pc, #48]	; (10d4 <system_gclk_gen_get_hz+0x70>)
    10a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10a4:	b25b      	sxtb	r3, r3
    10a6:	2b00      	cmp	r3, #0
    10a8:	dbfb      	blt.n	10a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    10aa:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <system_gclk_gen_get_hz+0x70>)
    10ac:	689c      	ldr	r4, [r3, #8]
    10ae:	0224      	lsls	r4, r4, #8
    10b0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    10b2:	4b0d      	ldr	r3, [pc, #52]	; (10e8 <system_gclk_gen_get_hz+0x84>)
    10b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    10b6:	2e00      	cmp	r6, #0
    10b8:	d107      	bne.n	10ca <system_gclk_gen_get_hz+0x66>
    10ba:	2c01      	cmp	r4, #1
    10bc:	d907      	bls.n	10ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    10be:	0021      	movs	r1, r4
    10c0:	0028      	movs	r0, r5
    10c2:	4b0a      	ldr	r3, [pc, #40]	; (10ec <system_gclk_gen_get_hz+0x88>)
    10c4:	4798      	blx	r3
    10c6:	0005      	movs	r5, r0
    10c8:	e001      	b.n	10ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    10ca:	3401      	adds	r4, #1
    10cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    10ce:	0028      	movs	r0, r5
    10d0:	bd70      	pop	{r4, r5, r6, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	40000c00 	.word	0x40000c00
    10d8:	00000c45 	.word	0x00000c45
    10dc:	40000c04 	.word	0x40000c04
    10e0:	00000d35 	.word	0x00000d35
    10e4:	40000c08 	.word	0x40000c08
    10e8:	00000c85 	.word	0x00000c85
    10ec:	00017961 	.word	0x00017961

000010f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    10f0:	b510      	push	{r4, lr}
    10f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    10f4:	4b06      	ldr	r3, [pc, #24]	; (1110 <system_gclk_chan_enable+0x20>)
    10f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    10f8:	4b06      	ldr	r3, [pc, #24]	; (1114 <system_gclk_chan_enable+0x24>)
    10fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    10fc:	4a06      	ldr	r2, [pc, #24]	; (1118 <system_gclk_chan_enable+0x28>)
    10fe:	8853      	ldrh	r3, [r2, #2]
    1100:	2180      	movs	r1, #128	; 0x80
    1102:	01c9      	lsls	r1, r1, #7
    1104:	430b      	orrs	r3, r1
    1106:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1108:	4b04      	ldr	r3, [pc, #16]	; (111c <system_gclk_chan_enable+0x2c>)
    110a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    110c:	bd10      	pop	{r4, pc}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	00000c45 	.word	0x00000c45
    1114:	40000c02 	.word	0x40000c02
    1118:	40000c00 	.word	0x40000c00
    111c:	00000c85 	.word	0x00000c85

00001120 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1120:	b510      	push	{r4, lr}
    1122:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1124:	4b0f      	ldr	r3, [pc, #60]	; (1164 <system_gclk_chan_disable+0x44>)
    1126:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1128:	4b0f      	ldr	r3, [pc, #60]	; (1168 <system_gclk_chan_disable+0x48>)
    112a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    112c:	4a0f      	ldr	r2, [pc, #60]	; (116c <system_gclk_chan_disable+0x4c>)
    112e:	8853      	ldrh	r3, [r2, #2]
    1130:	051b      	lsls	r3, r3, #20
    1132:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1134:	8853      	ldrh	r3, [r2, #2]
    1136:	490e      	ldr	r1, [pc, #56]	; (1170 <system_gclk_chan_disable+0x50>)
    1138:	400b      	ands	r3, r1
    113a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    113c:	8853      	ldrh	r3, [r2, #2]
    113e:	490d      	ldr	r1, [pc, #52]	; (1174 <system_gclk_chan_disable+0x54>)
    1140:	400b      	ands	r3, r1
    1142:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1144:	0011      	movs	r1, r2
    1146:	2280      	movs	r2, #128	; 0x80
    1148:	01d2      	lsls	r2, r2, #7
    114a:	884b      	ldrh	r3, [r1, #2]
    114c:	4213      	tst	r3, r2
    114e:	d1fc      	bne.n	114a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1150:	4906      	ldr	r1, [pc, #24]	; (116c <system_gclk_chan_disable+0x4c>)
    1152:	884a      	ldrh	r2, [r1, #2]
    1154:	0203      	lsls	r3, r0, #8
    1156:	4806      	ldr	r0, [pc, #24]	; (1170 <system_gclk_chan_disable+0x50>)
    1158:	4002      	ands	r2, r0
    115a:	4313      	orrs	r3, r2
    115c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    115e:	4b06      	ldr	r3, [pc, #24]	; (1178 <system_gclk_chan_disable+0x58>)
    1160:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1162:	bd10      	pop	{r4, pc}
    1164:	00000c45 	.word	0x00000c45
    1168:	40000c02 	.word	0x40000c02
    116c:	40000c00 	.word	0x40000c00
    1170:	fffff0ff 	.word	0xfffff0ff
    1174:	ffffbfff 	.word	0xffffbfff
    1178:	00000c85 	.word	0x00000c85

0000117c <system_gclk_chan_set_config>:
{
    117c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    117e:	780c      	ldrb	r4, [r1, #0]
    1180:	0224      	lsls	r4, r4, #8
    1182:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1184:	4b02      	ldr	r3, [pc, #8]	; (1190 <system_gclk_chan_set_config+0x14>)
    1186:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1188:	b2a4      	uxth	r4, r4
    118a:	4b02      	ldr	r3, [pc, #8]	; (1194 <system_gclk_chan_set_config+0x18>)
    118c:	805c      	strh	r4, [r3, #2]
}
    118e:	bd10      	pop	{r4, pc}
    1190:	00001121 	.word	0x00001121
    1194:	40000c00 	.word	0x40000c00

00001198 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1198:	b510      	push	{r4, lr}
    119a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    119c:	4b06      	ldr	r3, [pc, #24]	; (11b8 <system_gclk_chan_get_hz+0x20>)
    119e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11a0:	4b06      	ldr	r3, [pc, #24]	; (11bc <system_gclk_chan_get_hz+0x24>)
    11a2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    11a4:	4b06      	ldr	r3, [pc, #24]	; (11c0 <system_gclk_chan_get_hz+0x28>)
    11a6:	885c      	ldrh	r4, [r3, #2]
    11a8:	0524      	lsls	r4, r4, #20
    11aa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    11ac:	4b05      	ldr	r3, [pc, #20]	; (11c4 <system_gclk_chan_get_hz+0x2c>)
    11ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    11b0:	0020      	movs	r0, r4
    11b2:	4b05      	ldr	r3, [pc, #20]	; (11c8 <system_gclk_chan_get_hz+0x30>)
    11b4:	4798      	blx	r3
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	00000c45 	.word	0x00000c45
    11bc:	40000c02 	.word	0x40000c02
    11c0:	40000c00 	.word	0x40000c00
    11c4:	00000c85 	.word	0x00000c85
    11c8:	00001065 	.word	0x00001065

000011cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11ce:	78d3      	ldrb	r3, [r2, #3]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d135      	bne.n	1240 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11d4:	7813      	ldrb	r3, [r2, #0]
    11d6:	2b80      	cmp	r3, #128	; 0x80
    11d8:	d029      	beq.n	122e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11da:	061b      	lsls	r3, r3, #24
    11dc:	2480      	movs	r4, #128	; 0x80
    11de:	0264      	lsls	r4, r4, #9
    11e0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    11e2:	7854      	ldrb	r4, [r2, #1]
    11e4:	2502      	movs	r5, #2
    11e6:	43ac      	bics	r4, r5
    11e8:	d106      	bne.n	11f8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    11ea:	7894      	ldrb	r4, [r2, #2]
    11ec:	2c00      	cmp	r4, #0
    11ee:	d120      	bne.n	1232 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    11f0:	2480      	movs	r4, #128	; 0x80
    11f2:	02a4      	lsls	r4, r4, #10
    11f4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    11f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11f8:	7854      	ldrb	r4, [r2, #1]
    11fa:	3c01      	subs	r4, #1
    11fc:	2c01      	cmp	r4, #1
    11fe:	d91c      	bls.n	123a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1200:	040d      	lsls	r5, r1, #16
    1202:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1204:	24a0      	movs	r4, #160	; 0xa0
    1206:	05e4      	lsls	r4, r4, #23
    1208:	432c      	orrs	r4, r5
    120a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    120c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    120e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1210:	24d0      	movs	r4, #208	; 0xd0
    1212:	0624      	lsls	r4, r4, #24
    1214:	432c      	orrs	r4, r5
    1216:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1218:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    121a:	78d4      	ldrb	r4, [r2, #3]
    121c:	2c00      	cmp	r4, #0
    121e:	d122      	bne.n	1266 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1220:	035b      	lsls	r3, r3, #13
    1222:	d51c      	bpl.n	125e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1224:	7893      	ldrb	r3, [r2, #2]
    1226:	2b01      	cmp	r3, #1
    1228:	d01e      	beq.n	1268 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    122a:	6141      	str	r1, [r0, #20]
    122c:	e017      	b.n	125e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    122e:	2300      	movs	r3, #0
    1230:	e7d7      	b.n	11e2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1232:	24c0      	movs	r4, #192	; 0xc0
    1234:	02e4      	lsls	r4, r4, #11
    1236:	4323      	orrs	r3, r4
    1238:	e7dd      	b.n	11f6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    123a:	4c0d      	ldr	r4, [pc, #52]	; (1270 <_system_pinmux_config+0xa4>)
    123c:	4023      	ands	r3, r4
    123e:	e7df      	b.n	1200 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1240:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1242:	040c      	lsls	r4, r1, #16
    1244:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1246:	23a0      	movs	r3, #160	; 0xa0
    1248:	05db      	lsls	r3, r3, #23
    124a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    124c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    124e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1250:	23d0      	movs	r3, #208	; 0xd0
    1252:	061b      	lsls	r3, r3, #24
    1254:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1256:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1258:	78d3      	ldrb	r3, [r2, #3]
    125a:	2b00      	cmp	r3, #0
    125c:	d103      	bne.n	1266 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    125e:	7853      	ldrb	r3, [r2, #1]
    1260:	3b01      	subs	r3, #1
    1262:	2b01      	cmp	r3, #1
    1264:	d902      	bls.n	126c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1266:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1268:	6181      	str	r1, [r0, #24]
    126a:	e7f8      	b.n	125e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    126c:	6081      	str	r1, [r0, #8]
}
    126e:	e7fa      	b.n	1266 <_system_pinmux_config+0x9a>
    1270:	fffbffff 	.word	0xfffbffff

00001274 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1274:	b510      	push	{r4, lr}
    1276:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1278:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    127a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    127c:	2900      	cmp	r1, #0
    127e:	d104      	bne.n	128a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1280:	0943      	lsrs	r3, r0, #5
    1282:	01db      	lsls	r3, r3, #7
    1284:	4905      	ldr	r1, [pc, #20]	; (129c <system_pinmux_pin_set_config+0x28>)
    1286:	468c      	mov	ip, r1
    1288:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    128a:	241f      	movs	r4, #31
    128c:	4020      	ands	r0, r4
    128e:	2101      	movs	r1, #1
    1290:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1292:	0018      	movs	r0, r3
    1294:	4b02      	ldr	r3, [pc, #8]	; (12a0 <system_pinmux_pin_set_config+0x2c>)
    1296:	4798      	blx	r3
}
    1298:	bd10      	pop	{r4, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	41004400 	.word	0x41004400
    12a0:	000011cd 	.word	0x000011cd

000012a4 <system_pinmux_group_set_config>:
 */
void system_pinmux_group_set_config(
		PortGroup *const port,
		const uint32_t mask,
		const struct system_pinmux_config *const config)
{
    12a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12a6:	b083      	sub	sp, #12
    12a8:	9000      	str	r0, [sp, #0]
    12aa:	000e      	movs	r6, r1
    12ac:	9201      	str	r2, [sp, #4]
	Assert(port);

	for (int i = 0; i < 32; i++) {
    12ae:	2400      	movs	r4, #0
		if (mask & (1UL << i)) {
    12b0:	2701      	movs	r7, #1
			_system_pinmux_config(port, (1UL << i), config);
    12b2:	4d08      	ldr	r5, [pc, #32]	; (12d4 <system_pinmux_group_set_config+0x30>)
    12b4:	e002      	b.n	12bc <system_pinmux_group_set_config+0x18>
	for (int i = 0; i < 32; i++) {
    12b6:	3401      	adds	r4, #1
    12b8:	2c20      	cmp	r4, #32
    12ba:	d009      	beq.n	12d0 <system_pinmux_group_set_config+0x2c>
		if (mask & (1UL << i)) {
    12bc:	0033      	movs	r3, r6
    12be:	40e3      	lsrs	r3, r4
    12c0:	421f      	tst	r7, r3
    12c2:	d0f8      	beq.n	12b6 <system_pinmux_group_set_config+0x12>
			_system_pinmux_config(port, (1UL << i), config);
    12c4:	9a01      	ldr	r2, [sp, #4]
    12c6:	0039      	movs	r1, r7
    12c8:	40a1      	lsls	r1, r4
    12ca:	9800      	ldr	r0, [sp, #0]
    12cc:	47a8      	blx	r5
    12ce:	e7f2      	b.n	12b6 <system_pinmux_group_set_config+0x12>
		}
	}
}
    12d0:	b003      	add	sp, #12
    12d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12d4:	000011cd 	.word	0x000011cd

000012d8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12d8:	4770      	bx	lr
	...

000012dc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12dc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12de:	4b05      	ldr	r3, [pc, #20]	; (12f4 <system_init+0x18>)
    12e0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <system_init+0x1c>)
    12e4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12e6:	4b05      	ldr	r3, [pc, #20]	; (12fc <system_init+0x20>)
    12e8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12ea:	4b05      	ldr	r3, [pc, #20]	; (1300 <system_init+0x24>)
    12ec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12ee:	4b05      	ldr	r3, [pc, #20]	; (1304 <system_init+0x28>)
    12f0:	4798      	blx	r3
}
    12f2:	bd10      	pop	{r4, pc}
    12f4:	00000ead 	.word	0x00000ead
    12f8:	00000cb5 	.word	0x00000cb5
    12fc:	000012d9 	.word	0x000012d9
    1300:	000012d9 	.word	0x000012d9
    1304:	000012d9 	.word	0x000012d9

00001308 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1308:	e7fe      	b.n	1308 <Dummy_Handler>
	...

0000130c <Reset_Handler>:
{
    130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    130e:	4a2a      	ldr	r2, [pc, #168]	; (13b8 <Reset_Handler+0xac>)
    1310:	4b2a      	ldr	r3, [pc, #168]	; (13bc <Reset_Handler+0xb0>)
    1312:	429a      	cmp	r2, r3
    1314:	d011      	beq.n	133a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1316:	001a      	movs	r2, r3
    1318:	4b29      	ldr	r3, [pc, #164]	; (13c0 <Reset_Handler+0xb4>)
    131a:	429a      	cmp	r2, r3
    131c:	d20d      	bcs.n	133a <Reset_Handler+0x2e>
    131e:	4a29      	ldr	r2, [pc, #164]	; (13c4 <Reset_Handler+0xb8>)
    1320:	3303      	adds	r3, #3
    1322:	1a9b      	subs	r3, r3, r2
    1324:	089b      	lsrs	r3, r3, #2
    1326:	3301      	adds	r3, #1
    1328:	009b      	lsls	r3, r3, #2
    132a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    132c:	4823      	ldr	r0, [pc, #140]	; (13bc <Reset_Handler+0xb0>)
    132e:	4922      	ldr	r1, [pc, #136]	; (13b8 <Reset_Handler+0xac>)
    1330:	588c      	ldr	r4, [r1, r2]
    1332:	5084      	str	r4, [r0, r2]
    1334:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1336:	429a      	cmp	r2, r3
    1338:	d1fa      	bne.n	1330 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    133a:	4a23      	ldr	r2, [pc, #140]	; (13c8 <Reset_Handler+0xbc>)
    133c:	4b23      	ldr	r3, [pc, #140]	; (13cc <Reset_Handler+0xc0>)
    133e:	429a      	cmp	r2, r3
    1340:	d20a      	bcs.n	1358 <Reset_Handler+0x4c>
    1342:	43d3      	mvns	r3, r2
    1344:	4921      	ldr	r1, [pc, #132]	; (13cc <Reset_Handler+0xc0>)
    1346:	185b      	adds	r3, r3, r1
    1348:	2103      	movs	r1, #3
    134a:	438b      	bics	r3, r1
    134c:	3304      	adds	r3, #4
    134e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1350:	2100      	movs	r1, #0
    1352:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1354:	4293      	cmp	r3, r2
    1356:	d1fc      	bne.n	1352 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1358:	4a1d      	ldr	r2, [pc, #116]	; (13d0 <Reset_Handler+0xc4>)
    135a:	21ff      	movs	r1, #255	; 0xff
    135c:	4b1d      	ldr	r3, [pc, #116]	; (13d4 <Reset_Handler+0xc8>)
    135e:	438b      	bics	r3, r1
    1360:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1362:	39fd      	subs	r1, #253	; 0xfd
    1364:	2390      	movs	r3, #144	; 0x90
    1366:	005b      	lsls	r3, r3, #1
    1368:	4a1b      	ldr	r2, [pc, #108]	; (13d8 <Reset_Handler+0xcc>)
    136a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    136c:	4a1b      	ldr	r2, [pc, #108]	; (13dc <Reset_Handler+0xd0>)
    136e:	78d3      	ldrb	r3, [r2, #3]
    1370:	2503      	movs	r5, #3
    1372:	43ab      	bics	r3, r5
    1374:	2402      	movs	r4, #2
    1376:	4323      	orrs	r3, r4
    1378:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    137a:	78d3      	ldrb	r3, [r2, #3]
    137c:	270c      	movs	r7, #12
    137e:	43bb      	bics	r3, r7
    1380:	2608      	movs	r6, #8
    1382:	4333      	orrs	r3, r6
    1384:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1386:	4b16      	ldr	r3, [pc, #88]	; (13e0 <Reset_Handler+0xd4>)
    1388:	7b98      	ldrb	r0, [r3, #14]
    138a:	2230      	movs	r2, #48	; 0x30
    138c:	4390      	bics	r0, r2
    138e:	2220      	movs	r2, #32
    1390:	4310      	orrs	r0, r2
    1392:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1394:	7b99      	ldrb	r1, [r3, #14]
    1396:	43b9      	bics	r1, r7
    1398:	4331      	orrs	r1, r6
    139a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    139c:	7b9a      	ldrb	r2, [r3, #14]
    139e:	43aa      	bics	r2, r5
    13a0:	4322      	orrs	r2, r4
    13a2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    13a4:	4a0f      	ldr	r2, [pc, #60]	; (13e4 <Reset_Handler+0xd8>)
    13a6:	6853      	ldr	r3, [r2, #4]
    13a8:	2180      	movs	r1, #128	; 0x80
    13aa:	430b      	orrs	r3, r1
    13ac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    13ae:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <Reset_Handler+0xdc>)
    13b0:	4798      	blx	r3
        main();
    13b2:	4b0e      	ldr	r3, [pc, #56]	; (13ec <Reset_Handler+0xe0>)
    13b4:	4798      	blx	r3
    13b6:	e7fe      	b.n	13b6 <Reset_Handler+0xaa>
    13b8:	0001ca88 	.word	0x0001ca88
    13bc:	20000000 	.word	0x20000000
    13c0:	200000c4 	.word	0x200000c4
    13c4:	20000004 	.word	0x20000004
    13c8:	200000c8 	.word	0x200000c8
    13cc:	20004e38 	.word	0x20004e38
    13d0:	e000ed00 	.word	0xe000ed00
    13d4:	00000000 	.word	0x00000000
    13d8:	41007000 	.word	0x41007000
    13dc:	41005000 	.word	0x41005000
    13e0:	41004800 	.word	0x41004800
    13e4:	41004000 	.word	0x41004000
    13e8:	00017eb5 	.word	0x00017eb5
    13ec:	0001794d 	.word	0x0001794d

000013f0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    13f0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    13f2:	4a06      	ldr	r2, [pc, #24]	; (140c <_sbrk+0x1c>)
    13f4:	6812      	ldr	r2, [r2, #0]
    13f6:	2a00      	cmp	r2, #0
    13f8:	d004      	beq.n	1404 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    13fa:	4a04      	ldr	r2, [pc, #16]	; (140c <_sbrk+0x1c>)
    13fc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    13fe:	18c3      	adds	r3, r0, r3
    1400:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1402:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1404:	4902      	ldr	r1, [pc, #8]	; (1410 <_sbrk+0x20>)
    1406:	4a01      	ldr	r2, [pc, #4]	; (140c <_sbrk+0x1c>)
    1408:	6011      	str	r1, [r2, #0]
    140a:	e7f6      	b.n	13fa <_sbrk+0xa>
    140c:	200026d0 	.word	0x200026d0
    1410:	20006e38 	.word	0x20006e38

00001414 <lv_debug_check_null>:
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
    if(p) return true;
    1414:	1e43      	subs	r3, r0, #1
    1416:	4198      	sbcs	r0, r3
    1418:	b2c0      	uxtb	r0, r0

    return false;
}
    141a:	4770      	bx	lr

0000141c <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
    141c:	b510      	push	{r4, lr}
    141e:	b0c0      	sub	sp, #256	; 0x100
    1420:	0004      	movs	r4, r0
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
    1422:	4b06      	ldr	r3, [pc, #24]	; (143c <lv_debug_log_error+0x20>)
    1424:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
    1426:	28e5      	cmp	r0, #229	; 0xe5
    1428:	d901      	bls.n	142e <lv_debug_log_error+0x12>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
    142a:	b040      	add	sp, #256	; 0x100
    142c:	bd10      	pop	{r4, pc}
        _lv_memcpy(bufp, msg, msg_len);
    142e:	0002      	movs	r2, r0
    1430:	0021      	movs	r1, r4
    1432:	4668      	mov	r0, sp
    1434:	4b02      	ldr	r3, [pc, #8]	; (1440 <lv_debug_log_error+0x24>)
    1436:	4798      	blx	r3
}
    1438:	e7f7      	b.n	142a <lv_debug_log_error+0xe>
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00017f61 	.word	0x00017f61
    1440:	00010c25 	.word	0x00010c25

00001444 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    1444:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
    1446:	2800      	cmp	r0, #0
    1448:	d001      	beq.n	144e <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
        return NULL;
    }

    return disp->act_scr;
    144a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
    144c:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
    144e:	4b03      	ldr	r3, [pc, #12]	; (145c <lv_disp_get_scr_act+0x18>)
    1450:	4798      	blx	r3
    if(!disp) {
    1452:	2800      	cmp	r0, #0
    1454:	d1f9      	bne.n	144a <lv_disp_get_scr_act+0x6>
        return NULL;
    1456:	2000      	movs	r0, #0
    1458:	e7f8      	b.n	144c <lv_disp_get_scr_act+0x8>
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	0000f5a1 	.word	0x0000f5a1

00001460 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    1460:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
    1462:	2800      	cmp	r0, #0
    1464:	d001      	beq.n	146a <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
    1466:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
    1468:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
    146a:	4b03      	ldr	r3, [pc, #12]	; (1478 <lv_disp_get_layer_top+0x18>)
    146c:	4798      	blx	r3
    if(!disp) {
    146e:	2800      	cmp	r0, #0
    1470:	d1f9      	bne.n	1466 <lv_disp_get_layer_top+0x6>
        return NULL;
    1472:	2000      	movs	r0, #0
    1474:	e7f8      	b.n	1468 <lv_disp_get_layer_top+0x8>
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	0000f5a1 	.word	0x0000f5a1

0000147c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    147c:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
    147e:	2800      	cmp	r0, #0
    1480:	d001      	beq.n	1486 <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
    1482:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
    1484:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
    1486:	4b03      	ldr	r3, [pc, #12]	; (1494 <lv_disp_get_layer_sys+0x18>)
    1488:	4798      	blx	r3
    if(!disp) {
    148a:	2800      	cmp	r0, #0
    148c:	d1f9      	bne.n	1482 <lv_disp_get_layer_sys+0x6>
        return NULL;
    148e:	2000      	movs	r0, #0
    1490:	e7f8      	b.n	1484 <lv_disp_get_layer_sys+0x8>
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	0000f5a1 	.word	0x0000f5a1

00001498 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
    1498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
    149a:	2800      	cmp	r0, #0
    149c:	d011      	beq.n	14c2 <obj_to_foreground+0x2a>
    149e:	2500      	movs	r5, #0
        if(i->top != 0) last_top = i;
    14a0:	2734      	movs	r7, #52	; 0x34
    14a2:	2620      	movs	r6, #32
        i = lv_obj_get_parent(i);
    14a4:	4c07      	ldr	r4, [pc, #28]	; (14c4 <obj_to_foreground+0x2c>)
    14a6:	e002      	b.n	14ae <obj_to_foreground+0x16>
    14a8:	47a0      	blx	r4
    while(i != NULL) {
    14aa:	2800      	cmp	r0, #0
    14ac:	d004      	beq.n	14b8 <obj_to_foreground+0x20>
        if(i->top != 0) last_top = i;
    14ae:	5dc3      	ldrb	r3, [r0, r7]
    14b0:	421e      	tst	r6, r3
    14b2:	d0f9      	beq.n	14a8 <obj_to_foreground+0x10>
    14b4:	0005      	movs	r5, r0
    14b6:	e7f7      	b.n	14a8 <obj_to_foreground+0x10>
    }

    if(last_top != NULL) {
    14b8:	2d00      	cmp	r5, #0
    14ba:	d002      	beq.n	14c2 <obj_to_foreground+0x2a>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
    14bc:	0028      	movs	r0, r5
    14be:	4b02      	ldr	r3, [pc, #8]	; (14c8 <obj_to_foreground+0x30>)
    14c0:	4798      	blx	r3
    }
}
    14c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14c4:	00001a39 	.word	0x00001a39
    14c8:	00001fb1 	.word	0x00001fb1

000014cc <focus_next_core>:
{
    14cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ce:	46de      	mov	lr, fp
    14d0:	4657      	mov	r7, sl
    14d2:	464e      	mov	r6, r9
    14d4:	4645      	mov	r5, r8
    14d6:	b5e0      	push	{r5, r6, r7, lr}
    14d8:	0006      	movs	r6, r0
    14da:	468a      	mov	sl, r1
    14dc:	4690      	mov	r8, r2
    if(group->frozen) return;
    14de:	7d03      	ldrb	r3, [r0, #20]
    14e0:	07db      	lsls	r3, r3, #31
    14e2:	d43c      	bmi.n	155e <focus_next_core+0x92>
    lv_obj_t ** obj_next     = group->obj_focus;
    14e4:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
    14e6:	2301      	movs	r3, #1
    14e8:	4699      	mov	r9, r3
    lv_obj_t ** obj_sentinel = NULL;
    14ea:	2500      	movs	r5, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
    14ec:	4f32      	ldr	r7, [pc, #200]	; (15b8 <focus_next_core+0xec>)
            if(group->wrap || obj_sentinel == NULL) {
    14ee:	330f      	adds	r3, #15
    14f0:	469b      	mov	fp, r3
    14f2:	e015      	b.n	1520 <focus_next_core+0x54>
    14f4:	7d33      	ldrb	r3, [r6, #20]
    14f6:	465a      	mov	r2, fp
    14f8:	421a      	tst	r2, r3
    14fa:	d101      	bne.n	1500 <focus_next_core+0x34>
    14fc:	2d00      	cmp	r5, #0
    14fe:	d12e      	bne.n	155e <focus_next_core+0x92>
                if(!can_begin) return;
    1500:	464b      	mov	r3, r9
    1502:	2b00      	cmp	r3, #0
    1504:	d02b      	beq.n	155e <focus_next_core+0x92>
                obj_next  = begin(&group->obj_ll);
    1506:	0030      	movs	r0, r6
    1508:	47d0      	blx	sl
    150a:	0004      	movs	r4, r0
        if(obj_sentinel == NULL) {
    150c:	2d00      	cmp	r5, #0
    150e:	d04c      	beq.n	15aa <focus_next_core+0xde>
                can_begin = false;
    1510:	2300      	movs	r3, #0
    1512:	4699      	mov	r9, r3
        if(obj_next == NULL) continue;
    1514:	2c00      	cmp	r4, #0
    1516:	d003      	beq.n	1520 <focus_next_core+0x54>
        if(!lv_obj_get_hidden(*obj_next)) break;
    1518:	6820      	ldr	r0, [r4, #0]
    151a:	47b8      	blx	r7
    151c:	2800      	cmp	r0, #0
    151e:	d00c      	beq.n	153a <focus_next_core+0x6e>
        if(obj_next == NULL) {
    1520:	2c00      	cmp	r4, #0
    1522:	d0e7      	beq.n	14f4 <focus_next_core+0x28>
        if(obj_sentinel == NULL) {
    1524:	2d00      	cmp	r5, #0
    1526:	d006      	beq.n	1536 <focus_next_core+0x6a>
            obj_next = move(&group->obj_ll, obj_next);
    1528:	0021      	movs	r1, r4
    152a:	0030      	movs	r0, r6
    152c:	47c0      	blx	r8
    152e:	0004      	movs	r4, r0
            if(obj_next == obj_sentinel) return;
    1530:	42a8      	cmp	r0, r5
    1532:	d1ef      	bne.n	1514 <focus_next_core+0x48>
    1534:	e013      	b.n	155e <focus_next_core+0x92>
    1536:	0025      	movs	r5, r4
    1538:	e7f6      	b.n	1528 <focus_next_core+0x5c>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
    153a:	68f3      	ldr	r3, [r6, #12]
    153c:	42a3      	cmp	r3, r4
    153e:	d00e      	beq.n	155e <focus_next_core+0x92>
    if(group->obj_focus) {
    1540:	2b00      	cmp	r3, #0
    1542:	d016      	beq.n	1572 <focus_next_core+0xa6>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    1544:	6818      	ldr	r0, [r3, #0]
    1546:	69c3      	ldr	r3, [r0, #28]
    1548:	2200      	movs	r2, #0
    154a:	2117      	movs	r1, #23
    154c:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
    154e:	68f3      	ldr	r3, [r6, #12]
    1550:	6818      	ldr	r0, [r3, #0]
    1552:	2200      	movs	r2, #0
    1554:	210e      	movs	r1, #14
    1556:	4b19      	ldr	r3, [pc, #100]	; (15bc <focus_next_core+0xf0>)
    1558:	4798      	blx	r3
        if(res != LV_RES_OK) return;
    155a:	2801      	cmp	r0, #1
    155c:	d005      	beq.n	156a <focus_next_core+0x9e>
}
    155e:	bc3c      	pop	{r2, r3, r4, r5}
    1560:	4690      	mov	r8, r2
    1562:	4699      	mov	r9, r3
    1564:	46a2      	mov	sl, r4
    1566:	46ab      	mov	fp, r5
    1568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_invalidate(*group->obj_focus);
    156a:	68f3      	ldr	r3, [r6, #12]
    156c:	6818      	ldr	r0, [r3, #0]
    156e:	4b14      	ldr	r3, [pc, #80]	; (15c0 <focus_next_core+0xf4>)
    1570:	4798      	blx	r3
    group->obj_focus = obj_next;
    1572:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
    1574:	6820      	ldr	r0, [r4, #0]
    1576:	69c3      	ldr	r3, [r0, #28]
    1578:	2200      	movs	r2, #0
    157a:	2116      	movs	r1, #22
    157c:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
    157e:	68f3      	ldr	r3, [r6, #12]
    1580:	6818      	ldr	r0, [r3, #0]
    1582:	2200      	movs	r2, #0
    1584:	210d      	movs	r1, #13
    1586:	4b0d      	ldr	r3, [pc, #52]	; (15bc <focus_next_core+0xf0>)
    1588:	4798      	blx	r3
    if(res != LV_RES_OK) return;
    158a:	2801      	cmp	r0, #1
    158c:	d1e7      	bne.n	155e <focus_next_core+0x92>
    obj_to_foreground(*group->obj_focus);
    158e:	68f3      	ldr	r3, [r6, #12]
    1590:	6818      	ldr	r0, [r3, #0]
    1592:	4b0c      	ldr	r3, [pc, #48]	; (15c4 <focus_next_core+0xf8>)
    1594:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
    1596:	68f3      	ldr	r3, [r6, #12]
    1598:	6818      	ldr	r0, [r3, #0]
    159a:	4b09      	ldr	r3, [pc, #36]	; (15c0 <focus_next_core+0xf4>)
    159c:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
    159e:	6933      	ldr	r3, [r6, #16]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d0dc      	beq.n	155e <focus_next_core+0x92>
    15a4:	0030      	movs	r0, r6
    15a6:	4798      	blx	r3
    15a8:	e7d9      	b.n	155e <focus_next_core+0x92>
            if(obj_sentinel == NULL) return; /*Group is empty*/
    15aa:	2800      	cmp	r0, #0
    15ac:	d0d7      	beq.n	155e <focus_next_core+0x92>
                obj_next  = begin(&group->obj_ll);
    15ae:	0005      	movs	r5, r0
                can_begin = false;
    15b0:	2300      	movs	r3, #0
    15b2:	4699      	mov	r9, r3
    15b4:	e7b0      	b.n	1518 <focus_next_core+0x4c>
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	00001e1d 	.word	0x00001e1d
    15bc:	000019a9 	.word	0x000019a9
    15c0:	00001f49 	.word	0x00001f49
    15c4:	00001499 	.word	0x00001499

000015c8 <_lv_group_init>:
{
    15c8:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
    15ca:	2118      	movs	r1, #24
    15cc:	4801      	ldr	r0, [pc, #4]	; (15d4 <_lv_group_init+0xc>)
    15ce:	4b02      	ldr	r3, [pc, #8]	; (15d8 <_lv_group_init+0x10>)
    15d0:	4798      	blx	r3
}
    15d2:	bd10      	pop	{r4, pc}
    15d4:	20004e18 	.word	0x20004e18
    15d8:	00010551 	.word	0x00010551

000015dc <lv_group_focus_next>:
{
    15dc:	b510      	push	{r4, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
    15de:	4a02      	ldr	r2, [pc, #8]	; (15e8 <lv_group_focus_next+0xc>)
    15e0:	4902      	ldr	r1, [pc, #8]	; (15ec <lv_group_focus_next+0x10>)
    15e2:	4b03      	ldr	r3, [pc, #12]	; (15f0 <lv_group_focus_next+0x14>)
    15e4:	4798      	blx	r3
}
    15e6:	bd10      	pop	{r4, pc}
    15e8:	0001061d 	.word	0x0001061d
    15ec:	00010605 	.word	0x00010605
    15f0:	000014cd 	.word	0x000014cd

000015f4 <lv_group_focus_prev>:
{
    15f4:	b510      	push	{r4, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
    15f6:	4a02      	ldr	r2, [pc, #8]	; (1600 <lv_group_focus_prev+0xc>)
    15f8:	4902      	ldr	r1, [pc, #8]	; (1604 <lv_group_focus_prev+0x10>)
    15fa:	4b03      	ldr	r3, [pc, #12]	; (1608 <lv_group_focus_prev+0x14>)
    15fc:	4798      	blx	r3
}
    15fe:	bd10      	pop	{r4, pc}
    1600:	00010645 	.word	0x00010645
    1604:	00010611 	.word	0x00010611
    1608:	000014cd 	.word	0x000014cd

0000160c <lv_group_refocus>:
{
    160c:	b570      	push	{r4, r5, r6, lr}
    160e:	0004      	movs	r4, r0
    uint8_t temp_wrap = g->wrap;
    1610:	7d03      	ldrb	r3, [r0, #20]
    1612:	06dd      	lsls	r5, r3, #27
    1614:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
    1616:	2210      	movs	r2, #16
    1618:	4313      	orrs	r3, r2
    161a:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
    161c:	071b      	lsls	r3, r3, #28
    161e:	d508      	bpl.n	1632 <lv_group_refocus+0x26>
        lv_group_focus_prev(g);
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <lv_group_refocus+0x2c>)
    1622:	4798      	blx	r3
    g->wrap = temp_wrap;
    1624:	012d      	lsls	r5, r5, #4
    1626:	7d23      	ldrb	r3, [r4, #20]
    1628:	2210      	movs	r2, #16
    162a:	4393      	bics	r3, r2
    162c:	432b      	orrs	r3, r5
    162e:	7523      	strb	r3, [r4, #20]
}
    1630:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_focus_next(g);
    1632:	4b02      	ldr	r3, [pc, #8]	; (163c <lv_group_refocus+0x30>)
    1634:	4798      	blx	r3
    1636:	e7f5      	b.n	1624 <lv_group_refocus+0x18>
    1638:	000015f5 	.word	0x000015f5
    163c:	000015dd 	.word	0x000015dd

00001640 <lv_group_add_obj>:
{
    1640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1642:	0005      	movs	r5, r0
    1644:	000c      	movs	r4, r1
    if(group == NULL) return;
    1646:	2800      	cmp	r0, #0
    1648:	d010      	beq.n	166c <lv_group_add_obj+0x2c>
    _LV_LL_READ(group->obj_ll, obj_i) {
    164a:	0006      	movs	r6, r0
    164c:	4b1b      	ldr	r3, [pc, #108]	; (16bc <lv_group_add_obj+0x7c>)
    164e:	4798      	blx	r3
    1650:	2800      	cmp	r0, #0
    1652:	d00c      	beq.n	166e <lv_group_add_obj+0x2e>
        if((*obj_i) == obj) {
    1654:	6803      	ldr	r3, [r0, #0]
    1656:	429c      	cmp	r4, r3
    1658:	d008      	beq.n	166c <lv_group_add_obj+0x2c>
    _LV_LL_READ(group->obj_ll, obj_i) {
    165a:	4f19      	ldr	r7, [pc, #100]	; (16c0 <lv_group_add_obj+0x80>)
    165c:	0001      	movs	r1, r0
    165e:	0030      	movs	r0, r6
    1660:	47b8      	blx	r7
    1662:	2800      	cmp	r0, #0
    1664:	d003      	beq.n	166e <lv_group_add_obj+0x2e>
        if((*obj_i) == obj) {
    1666:	6803      	ldr	r3, [r0, #0]
    1668:	42a3      	cmp	r3, r4
    166a:	d1f7      	bne.n	165c <lv_group_add_obj+0x1c>
}
    166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj->group_p) {
    166e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1670:	2b00      	cmp	r3, #0
    1672:	d007      	beq.n	1684 <lv_group_add_obj+0x44>
        if(lv_obj_is_focused(obj)) {
    1674:	0020      	movs	r0, r4
    1676:	4b13      	ldr	r3, [pc, #76]	; (16c4 <lv_group_add_obj+0x84>)
    1678:	4798      	blx	r3
    167a:	2800      	cmp	r0, #0
    167c:	d002      	beq.n	1684 <lv_group_add_obj+0x44>
            lv_group_refocus(obj->group_p);
    167e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1680:	4b11      	ldr	r3, [pc, #68]	; (16c8 <lv_group_add_obj+0x88>)
    1682:	4798      	blx	r3
    obj->group_p     = group;
    1684:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
    1686:	0028      	movs	r0, r5
    1688:	4b10      	ldr	r3, [pc, #64]	; (16cc <lv_group_add_obj+0x8c>)
    168a:	4798      	blx	r3
    168c:	0006      	movs	r6, r0
    LV_ASSERT_MEM(next);
    168e:	4b10      	ldr	r3, [pc, #64]	; (16d0 <lv_group_add_obj+0x90>)
    1690:	4798      	blx	r3
    1692:	2800      	cmp	r0, #0
    1694:	d00b      	beq.n	16ae <lv_group_add_obj+0x6e>
    if(next == NULL) return;
    1696:	2e00      	cmp	r6, #0
    1698:	d0e8      	beq.n	166c <lv_group_add_obj+0x2c>
    *next = obj;
    169a:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
    169c:	0028      	movs	r0, r5
    169e:	4b07      	ldr	r3, [pc, #28]	; (16bc <lv_group_add_obj+0x7c>)
    16a0:	4798      	blx	r3
    16a2:	4286      	cmp	r6, r0
    16a4:	d1e2      	bne.n	166c <lv_group_add_obj+0x2c>
        lv_group_refocus(group);
    16a6:	0028      	movs	r0, r5
    16a8:	4b07      	ldr	r3, [pc, #28]	; (16c8 <lv_group_add_obj+0x88>)
    16aa:	4798      	blx	r3
    16ac:	e7de      	b.n	166c <lv_group_add_obj+0x2c>
    LV_ASSERT_MEM(next);
    16ae:	0032      	movs	r2, r6
    16b0:	2300      	movs	r3, #0
    16b2:	4808      	ldr	r0, [pc, #32]	; (16d4 <lv_group_add_obj+0x94>)
    16b4:	4908      	ldr	r1, [pc, #32]	; (16d8 <lv_group_add_obj+0x98>)
    16b6:	4788      	blx	r1
    16b8:	e7fe      	b.n	16b8 <lv_group_add_obj+0x78>
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	00010605 	.word	0x00010605
    16c0:	0001061d 	.word	0x0001061d
    16c4:	000035c1 	.word	0x000035c1
    16c8:	0000160d 	.word	0x0000160d
    16cc:	000105b5 	.word	0x000105b5
    16d0:	00001415 	.word	0x00001415
    16d4:	00018804 	.word	0x00018804
    16d8:	0000141d 	.word	0x0000141d

000016dc <lv_group_get_focused>:
    if(!group) return NULL;
    16dc:	2800      	cmp	r0, #0
    16de:	d004      	beq.n	16ea <lv_group_get_focused+0xe>
    if(group->obj_focus == NULL) return NULL;
    16e0:	68c3      	ldr	r3, [r0, #12]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d003      	beq.n	16ee <lv_group_get_focused+0x12>
    return *group->obj_focus;
    16e6:	6818      	ldr	r0, [r3, #0]
}
    16e8:	4770      	bx	lr
    if(!group) return NULL;
    16ea:	2000      	movs	r0, #0
    16ec:	e7fc      	b.n	16e8 <lv_group_get_focused+0xc>
    if(group->obj_focus == NULL) return NULL;
    16ee:	2000      	movs	r0, #0
    16f0:	e7fa      	b.n	16e8 <lv_group_get_focused+0xc>

000016f2 <lv_group_get_editing>:
    if(!group) return false;
    16f2:	2800      	cmp	r0, #0
    16f4:	d003      	beq.n	16fe <lv_group_get_editing+0xc>
    return group->editing ? true : false;
    16f6:	7d00      	ldrb	r0, [r0, #20]
    16f8:	0780      	lsls	r0, r0, #30
    16fa:	0fc0      	lsrs	r0, r0, #31
}
    16fc:	4770      	bx	lr
    if(!group) return false;
    16fe:	2000      	movs	r0, #0
    1700:	e7fc      	b.n	16fc <lv_group_get_editing+0xa>
	...

00001704 <lv_indev_get_act>:
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
    1704:	4b01      	ldr	r3, [pc, #4]	; (170c <lv_indev_get_act+0x8>)
    1706:	6818      	ldr	r0, [r3, #0]
}
    1708:	4770      	bx	lr
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	200026d4 	.word	0x200026d4

00001710 <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
    1710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1712:	000c      	movs	r4, r1
    if(indev) {
    1714:	2800      	cmp	r0, #0
    1716:	d015      	beq.n	1744 <lv_indev_reset+0x34>
        indev->proc.reset_query = 1;
    1718:	2250      	movs	r2, #80	; 0x50
    171a:	5c83      	ldrb	r3, [r0, r2]
    171c:	2102      	movs	r1, #2
    171e:	430b      	orrs	r3, r1
    1720:	5483      	strb	r3, [r0, r2]
        if(indev_act == indev) indev_obj_act = NULL;
    1722:	4b18      	ldr	r3, [pc, #96]	; (1784 <lv_indev_reset+0x74>)
    1724:	681b      	ldr	r3, [r3, #0]
    1726:	4298      	cmp	r0, r3
    1728:	d005      	beq.n	1736 <lv_indev_reset+0x26>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
    172a:	2c00      	cmp	r4, #0
    172c:	d007      	beq.n	173e <lv_indev_reset+0x2e>
    172e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1730:	429c      	cmp	r4, r3
    1732:	d004      	beq.n	173e <lv_indev_reset+0x2e>
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
    1734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
    1736:	2200      	movs	r2, #0
    1738:	4b13      	ldr	r3, [pc, #76]	; (1788 <lv_indev_reset+0x78>)
    173a:	601a      	str	r2, [r3, #0]
    173c:	e7f5      	b.n	172a <lv_indev_reset+0x1a>
            indev->proc.types.pointer.last_pressed = NULL;
    173e:	2300      	movs	r3, #0
    1740:	63c3      	str	r3, [r0, #60]	; 0x3c
    1742:	e7f7      	b.n	1734 <lv_indev_reset+0x24>
        lv_indev_t * i = lv_indev_get_next(NULL);
    1744:	2000      	movs	r0, #0
    1746:	4b11      	ldr	r3, [pc, #68]	; (178c <lv_indev_reset+0x7c>)
    1748:	4798      	blx	r3
        while(i) {
    174a:	2800      	cmp	r0, #0
    174c:	d0f2      	beq.n	1734 <lv_indev_reset+0x24>
            if(indev_act == i) indev_obj_act = NULL;
    174e:	4f0d      	ldr	r7, [pc, #52]	; (1784 <lv_indev_reset+0x74>)
    1750:	4d0d      	ldr	r5, [pc, #52]	; (1788 <lv_indev_reset+0x78>)
            i = lv_indev_get_next(i);
    1752:	4e0e      	ldr	r6, [pc, #56]	; (178c <lv_indev_reset+0x7c>)
    1754:	e007      	b.n	1766 <lv_indev_reset+0x56>
            if(indev_act == i) indev_obj_act = NULL;
    1756:	2300      	movs	r3, #0
    1758:	602b      	str	r3, [r5, #0]
    175a:	e00c      	b.n	1776 <lv_indev_reset+0x66>
                i->proc.types.pointer.last_pressed = NULL;
    175c:	2300      	movs	r3, #0
    175e:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
    1760:	47b0      	blx	r6
        while(i) {
    1762:	2800      	cmp	r0, #0
    1764:	d0e6      	beq.n	1734 <lv_indev_reset+0x24>
            i->proc.reset_query = 1;
    1766:	2250      	movs	r2, #80	; 0x50
    1768:	5c83      	ldrb	r3, [r0, r2]
    176a:	2102      	movs	r1, #2
    176c:	430b      	orrs	r3, r1
    176e:	5483      	strb	r3, [r0, r2]
            if(indev_act == i) indev_obj_act = NULL;
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	4283      	cmp	r3, r0
    1774:	d0ef      	beq.n	1756 <lv_indev_reset+0x46>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
    1776:	2c00      	cmp	r4, #0
    1778:	d0f0      	beq.n	175c <lv_indev_reset+0x4c>
    177a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    177c:	429c      	cmp	r4, r3
    177e:	d1ef      	bne.n	1760 <lv_indev_reset+0x50>
    1780:	e7ec      	b.n	175c <lv_indev_reset+0x4c>
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	200026d4 	.word	0x200026d4
    1788:	200026d8 	.word	0x200026d8
    178c:	0000f6e5 	.word	0x0000f6e5

00001790 <_lv_indev_init>:
{
    1790:	b510      	push	{r4, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
    1792:	2100      	movs	r1, #0
    1794:	2000      	movs	r0, #0
    1796:	4b01      	ldr	r3, [pc, #4]	; (179c <_lv_indev_init+0xc>)
    1798:	4798      	blx	r3
}
    179a:	bd10      	pop	{r4, pc}
    179c:	00001711 	.word	0x00001711

000017a0 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
    17a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17a2:	b085      	sub	sp, #20
    17a4:	000d      	movs	r5, r1
    17a6:	9102      	str	r1, [sp, #8]
    17a8:	0016      	movs	r6, r2
    17aa:	9203      	str	r2, [sp, #12]
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
    17ac:	1d03      	adds	r3, r0, #4
    17ae:	9301      	str	r3, [sp, #4]
    17b0:	0018      	movs	r0, r3
    17b2:	4b0f      	ldr	r3, [pc, #60]	; (17f0 <refresh_children_position+0x50>)
    17b4:	4798      	blx	r3
    17b6:	1e04      	subs	r4, r0, #0
    17b8:	d018      	beq.n	17ec <refresh_children_position+0x4c>
        i->coords.x1 += x_diff;
    17ba:	b2ad      	uxth	r5, r5
        i->coords.y1 += y_diff;
    17bc:	b2b7      	uxth	r7, r6
    _LV_LL_READ(obj->child_ll, i) {
    17be:	4e0d      	ldr	r6, [pc, #52]	; (17f4 <refresh_children_position+0x54>)
        i->coords.x1 += x_diff;
    17c0:	8a23      	ldrh	r3, [r4, #16]
    17c2:	18eb      	adds	r3, r5, r3
    17c4:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
    17c6:	8a63      	ldrh	r3, [r4, #18]
    17c8:	18fb      	adds	r3, r7, r3
    17ca:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
    17cc:	8aa3      	ldrh	r3, [r4, #20]
    17ce:	18eb      	adds	r3, r5, r3
    17d0:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
    17d2:	8ae3      	ldrh	r3, [r4, #22]
    17d4:	18fb      	adds	r3, r7, r3
    17d6:	82e3      	strh	r3, [r4, #22]

        refresh_children_position(i, x_diff, y_diff);
    17d8:	9a03      	ldr	r2, [sp, #12]
    17da:	9902      	ldr	r1, [sp, #8]
    17dc:	0020      	movs	r0, r4
    17de:	f7ff ffdf 	bl	17a0 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
    17e2:	0021      	movs	r1, r4
    17e4:	9801      	ldr	r0, [sp, #4]
    17e6:	47b0      	blx	r6
    17e8:	1e04      	subs	r4, r0, #0
    17ea:	d1e9      	bne.n	17c0 <refresh_children_position+0x20>
    }
}
    17ec:	b005      	add	sp, #20
    17ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17f0:	00010605 	.word	0x00010605
    17f4:	0001061d 	.word	0x0001061d

000017f8 <lv_init>:
{
    17f8:	b530      	push	{r4, r5, lr}
    17fa:	b085      	sub	sp, #20
    if(lv_initialized) {
    17fc:	4b19      	ldr	r3, [pc, #100]	; (1864 <lv_init+0x6c>)
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	2b00      	cmp	r3, #0
    1802:	d001      	beq.n	1808 <lv_init+0x10>
}
    1804:	b005      	add	sp, #20
    1806:	bd30      	pop	{r4, r5, pc}
    _lv_mem_init();
    1808:	4b17      	ldr	r3, [pc, #92]	; (1868 <lv_init+0x70>)
    180a:	4798      	blx	r3
    _lv_task_core_init();
    180c:	4b17      	ldr	r3, [pc, #92]	; (186c <lv_init+0x74>)
    180e:	4798      	blx	r3
    _lv_fs_init();
    1810:	4b17      	ldr	r3, [pc, #92]	; (1870 <lv_init+0x78>)
    1812:	4798      	blx	r3
    _lv_anim_core_init();
    1814:	4b17      	ldr	r3, [pc, #92]	; (1874 <lv_init+0x7c>)
    1816:	4798      	blx	r3
    _lv_group_init();
    1818:	4b17      	ldr	r3, [pc, #92]	; (1878 <lv_init+0x80>)
    181a:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
    181c:	2110      	movs	r1, #16
    181e:	4817      	ldr	r0, [pc, #92]	; (187c <lv_init+0x84>)
    1820:	4c17      	ldr	r4, [pc, #92]	; (1880 <lv_init+0x88>)
    1822:	47a0      	blx	r4
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
    1824:	4b17      	ldr	r3, [pc, #92]	; (1884 <lv_init+0x8c>)
    1826:	9302      	str	r3, [sp, #8]
    1828:	9301      	str	r3, [sp, #4]
    182a:	9300      	str	r3, [sp, #0]
    182c:	2202      	movs	r2, #2
    182e:	211f      	movs	r1, #31
    1830:	4815      	ldr	r0, [pc, #84]	; (1888 <lv_init+0x90>)
    1832:	8800      	ldrh	r0, [r0, #0]
    1834:	4d15      	ldr	r5, [pc, #84]	; (188c <lv_init+0x94>)
    1836:	47a8      	blx	r5
    lv_theme_set_act(th);
    1838:	4b15      	ldr	r3, [pc, #84]	; (1890 <lv_init+0x98>)
    183a:	4798      	blx	r3
    _lv_refr_init();
    183c:	4b15      	ldr	r3, [pc, #84]	; (1894 <lv_init+0x9c>)
    183e:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    1840:	21b8      	movs	r1, #184	; 0xb8
    1842:	0049      	lsls	r1, r1, #1
    1844:	4814      	ldr	r0, [pc, #80]	; (1898 <lv_init+0xa0>)
    1846:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    1848:	2160      	movs	r1, #96	; 0x60
    184a:	4814      	ldr	r0, [pc, #80]	; (189c <lv_init+0xa4>)
    184c:	47a0      	blx	r4
    _lv_indev_init();
    184e:	4b14      	ldr	r3, [pc, #80]	; (18a0 <lv_init+0xa8>)
    1850:	4798      	blx	r3
    _lv_img_decoder_init();
    1852:	4b14      	ldr	r3, [pc, #80]	; (18a4 <lv_init+0xac>)
    1854:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    1856:	2001      	movs	r0, #1
    1858:	4b13      	ldr	r3, [pc, #76]	; (18a8 <lv_init+0xb0>)
    185a:	4798      	blx	r3
    lv_initialized = true;
    185c:	2201      	movs	r2, #1
    185e:	4b01      	ldr	r3, [pc, #4]	; (1864 <lv_init+0x6c>)
    1860:	701a      	strb	r2, [r3, #0]
    1862:	e7cf      	b.n	1804 <lv_init+0xc>
    1864:	200026e4 	.word	0x200026e4
    1868:	000109e1 	.word	0x000109e1
    186c:	00011131 	.word	0x00011131
    1870:	000102e1 	.word	0x000102e1
    1874:	0000f991 	.word	0x0000f991
    1878:	000015c9 	.word	0x000015c9
    187c:	20004d68 	.word	0x20004d68
    1880:	00010551 	.word	0x00010551
    1884:	20000030 	.word	0x20000030
    1888:	00018812 	.word	0x00018812
    188c:	00014429 	.word	0x00014429
    1890:	00011be9 	.word	0x00011be9
    1894:	00004235 	.word	0x00004235
    1898:	20004cc4 	.word	0x20004cc4
    189c:	20004cb8 	.word	0x20004cb8
    18a0:	00001791 	.word	0x00001791
    18a4:	0000e691 	.word	0x0000e691
    18a8:	0000dbf1 	.word	0x0000dbf1

000018ac <lv_obj_set_click>:
{
    18ac:	b570      	push	{r4, r5, r6, lr}
    18ae:	0004      	movs	r4, r0
    18b0:	000d      	movs	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    18b2:	4b09      	ldr	r3, [pc, #36]	; (18d8 <lv_obj_set_click+0x2c>)
    18b4:	4798      	blx	r3
    18b6:	2800      	cmp	r0, #0
    18b8:	d008      	beq.n	18cc <lv_obj_set_click+0x20>
    obj->click = (en == true ? 1 : 0);
    18ba:	2234      	movs	r2, #52	; 0x34
    18bc:	2301      	movs	r3, #1
    18be:	401d      	ands	r5, r3
    18c0:	5ca3      	ldrb	r3, [r4, r2]
    18c2:	2001      	movs	r0, #1
    18c4:	4383      	bics	r3, r0
    18c6:	432b      	orrs	r3, r5
    18c8:	54a3      	strb	r3, [r4, r2]
}
    18ca:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    18cc:	0022      	movs	r2, r4
    18ce:	2300      	movs	r3, #0
    18d0:	4802      	ldr	r0, [pc, #8]	; (18dc <lv_obj_set_click+0x30>)
    18d2:	4903      	ldr	r1, [pc, #12]	; (18e0 <lv_obj_set_click+0x34>)
    18d4:	4788      	blx	r1
    18d6:	e7fe      	b.n	18d6 <lv_obj_set_click+0x2a>
    18d8:	00001415 	.word	0x00001415
    18dc:	0001886c 	.word	0x0001886c
    18e0:	0000141d 	.word	0x0000141d

000018e4 <lv_event_send_func>:
{
    18e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e6:	b087      	sub	sp, #28
    18e8:	0007      	movs	r7, r0
    18ea:	000c      	movs	r4, r1
    18ec:	9201      	str	r2, [sp, #4]
    18ee:	001e      	movs	r6, r3
    if(obj != NULL) {
    18f0:	2900      	cmp	r1, #0
    18f2:	d004      	beq.n	18fe <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    18f4:	0008      	movs	r0, r1
    18f6:	4b25      	ldr	r3, [pc, #148]	; (198c <lv_event_send_func+0xa8>)
    18f8:	4798      	blx	r3
    18fa:	2800      	cmp	r0, #0
    18fc:	d03c      	beq.n	1978 <lv_event_send_func+0x94>
    event_temp_data.obj     = obj;
    18fe:	ab03      	add	r3, sp, #12
    1900:	9403      	str	r4, [sp, #12]
    event_temp_data.deleted = false;
    1902:	2200      	movs	r2, #0
    1904:	711a      	strb	r2, [r3, #4]
    event_temp_data.prev    = NULL;
    1906:	9205      	str	r2, [sp, #20]
    if(event_temp_data_head) {
    1908:	4b21      	ldr	r3, [pc, #132]	; (1990 <lv_event_send_func+0xac>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	d000      	beq.n	1912 <lv_event_send_func+0x2e>
        event_temp_data.prev = event_temp_data_head;
    1910:	9305      	str	r3, [sp, #20]
    event_temp_data_head = &event_temp_data;
    1912:	aa03      	add	r2, sp, #12
    1914:	4b1e      	ldr	r3, [pc, #120]	; (1990 <lv_event_send_func+0xac>)
    1916:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
    1918:	4b1e      	ldr	r3, [pc, #120]	; (1994 <lv_event_send_func+0xb0>)
    191a:	681d      	ldr	r5, [r3, #0]
    event_act_data                   = data;
    191c:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
    191e:	4b1e      	ldr	r3, [pc, #120]	; (1998 <lv_event_send_func+0xb4>)
    1920:	4798      	blx	r3
    if(indev_act) {
    1922:	2800      	cmp	r0, #0
    1924:	d004      	beq.n	1930 <lv_event_send_func+0x4c>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    1926:	6883      	ldr	r3, [r0, #8]
    1928:	2b00      	cmp	r3, #0
    192a:	d001      	beq.n	1930 <lv_event_send_func+0x4c>
    192c:	9901      	ldr	r1, [sp, #4]
    192e:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    1930:	2f00      	cmp	r7, #0
    1932:	d002      	beq.n	193a <lv_event_send_func+0x56>
    1934:	9901      	ldr	r1, [sp, #4]
    1936:	0020      	movs	r0, r4
    1938:	47b8      	blx	r7
    event_act_data = event_act_data_save;
    193a:	4b16      	ldr	r3, [pc, #88]	; (1994 <lv_event_send_func+0xb0>)
    193c:	601d      	str	r5, [r3, #0]
    event_temp_data_head = event_temp_data_head->prev;
    193e:	4b14      	ldr	r3, [pc, #80]	; (1990 <lv_event_send_func+0xac>)
    1940:	681a      	ldr	r2, [r3, #0]
    1942:	6892      	ldr	r2, [r2, #8]
    1944:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
    1946:	ab03      	add	r3, sp, #12
    1948:	791b      	ldrb	r3, [r3, #4]
        return LV_RES_INV;
    194a:	2000      	movs	r0, #0
    if(event_temp_data.deleted) {
    194c:	2b00      	cmp	r3, #0
    194e:	d111      	bne.n	1974 <lv_event_send_func+0x90>
    if(obj) {
    1950:	2c00      	cmp	r4, #0
    1952:	d017      	beq.n	1984 <lv_event_send_func+0xa0>
        if(obj->parent_event && obj->parent) {
    1954:	3334      	adds	r3, #52	; 0x34
    1956:	5ce3      	ldrb	r3, [r4, r3]
    return LV_RES_OK;
    1958:	3001      	adds	r0, #1
        if(obj->parent_event && obj->parent) {
    195a:	065b      	lsls	r3, r3, #25
    195c:	d50a      	bpl.n	1974 <lv_event_send_func+0x90>
    195e:	6820      	ldr	r0, [r4, #0]
    1960:	2800      	cmp	r0, #0
    1962:	d011      	beq.n	1988 <lv_event_send_func+0xa4>
            lv_res_t res = lv_event_send(obj->parent, event, data);
    1964:	0032      	movs	r2, r6
    1966:	9901      	ldr	r1, [sp, #4]
    1968:	4b0c      	ldr	r3, [pc, #48]	; (199c <lv_event_send_func+0xb8>)
    196a:	4798      	blx	r3
            if(res != LV_RES_OK) {
    196c:	3801      	subs	r0, #1
    196e:	4242      	negs	r2, r0
    1970:	4142      	adcs	r2, r0
        return LV_RES_INV;
    1972:	b2d0      	uxtb	r0, r2
}
    1974:	b007      	add	sp, #28
    1976:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1978:	0022      	movs	r2, r4
    197a:	2300      	movs	r3, #0
    197c:	4808      	ldr	r0, [pc, #32]	; (19a0 <lv_event_send_func+0xbc>)
    197e:	4909      	ldr	r1, [pc, #36]	; (19a4 <lv_event_send_func+0xc0>)
    1980:	4788      	blx	r1
    1982:	e7fe      	b.n	1982 <lv_event_send_func+0x9e>
    return LV_RES_OK;
    1984:	2001      	movs	r0, #1
    1986:	e7f5      	b.n	1974 <lv_event_send_func+0x90>
    1988:	2001      	movs	r0, #1
    198a:	e7f3      	b.n	1974 <lv_event_send_func+0x90>
    198c:	00001415 	.word	0x00001415
    1990:	200026e0 	.word	0x200026e0
    1994:	200026dc 	.word	0x200026dc
    1998:	00001705 	.word	0x00001705
    199c:	000019a9 	.word	0x000019a9
    19a0:	0001886c 	.word	0x0001886c
    19a4:	0000141d 	.word	0x0000141d

000019a8 <lv_event_send>:
{
    19a8:	b570      	push	{r4, r5, r6, lr}
    19aa:	0004      	movs	r4, r0
    19ac:	000d      	movs	r5, r1
    19ae:	0016      	movs	r6, r2
    if(obj == NULL) return LV_RES_OK;
    19b0:	2800      	cmp	r0, #0
    19b2:	d010      	beq.n	19d6 <lv_event_send+0x2e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    19b4:	4b09      	ldr	r3, [pc, #36]	; (19dc <lv_event_send+0x34>)
    19b6:	4798      	blx	r3
    19b8:	2800      	cmp	r0, #0
    19ba:	d105      	bne.n	19c8 <lv_event_send+0x20>
    19bc:	0022      	movs	r2, r4
    19be:	2300      	movs	r3, #0
    19c0:	4807      	ldr	r0, [pc, #28]	; (19e0 <lv_event_send+0x38>)
    19c2:	4908      	ldr	r1, [pc, #32]	; (19e4 <lv_event_send+0x3c>)
    19c4:	4788      	blx	r1
    19c6:	e7fe      	b.n	19c6 <lv_event_send+0x1e>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    19c8:	69a0      	ldr	r0, [r4, #24]
    19ca:	0033      	movs	r3, r6
    19cc:	002a      	movs	r2, r5
    19ce:	0021      	movs	r1, r4
    19d0:	4c05      	ldr	r4, [pc, #20]	; (19e8 <lv_event_send+0x40>)
    19d2:	47a0      	blx	r4
}
    19d4:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
    19d6:	2001      	movs	r0, #1
    19d8:	e7fc      	b.n	19d4 <lv_event_send+0x2c>
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	00001415 	.word	0x00001415
    19e0:	0001886c 	.word	0x0001886c
    19e4:	0000141d 	.word	0x0000141d
    19e8:	000018e5 	.word	0x000018e5

000019ec <lv_signal_send>:
{
    19ec:	b510      	push	{r4, lr}
    if(obj == NULL) return LV_RES_OK;
    19ee:	2800      	cmp	r0, #0
    19f0:	d004      	beq.n	19fc <lv_signal_send+0x10>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
    19f2:	69c3      	ldr	r3, [r0, #28]
    19f4:	2b00      	cmp	r3, #0
    19f6:	d003      	beq.n	1a00 <lv_signal_send+0x14>
    19f8:	4798      	blx	r3
}
    19fa:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
    19fc:	2001      	movs	r0, #1
    19fe:	e7fc      	b.n	19fa <lv_signal_send+0xe>
    lv_res_t res = LV_RES_OK;
    1a00:	2001      	movs	r0, #1
    1a02:	e7fa      	b.n	19fa <lv_signal_send+0xe>

00001a04 <lv_obj_refresh_ext_draw_pad>:
{
    1a04:	b510      	push	{r4, lr}
    1a06:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1a08:	4b08      	ldr	r3, [pc, #32]	; (1a2c <lv_obj_refresh_ext_draw_pad+0x28>)
    1a0a:	4798      	blx	r3
    1a0c:	2800      	cmp	r0, #0
    1a0e:	d105      	bne.n	1a1c <lv_obj_refresh_ext_draw_pad+0x18>
    1a10:	0022      	movs	r2, r4
    1a12:	2300      	movs	r3, #0
    1a14:	4806      	ldr	r0, [pc, #24]	; (1a30 <lv_obj_refresh_ext_draw_pad+0x2c>)
    1a16:	4907      	ldr	r1, [pc, #28]	; (1a34 <lv_obj_refresh_ext_draw_pad+0x30>)
    1a18:	4788      	blx	r1
    1a1a:	e7fe      	b.n	1a1a <lv_obj_refresh_ext_draw_pad+0x16>
    obj->ext_draw_pad = 0;
    1a1c:	2300      	movs	r3, #0
    1a1e:	8663      	strh	r3, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    1a20:	69e3      	ldr	r3, [r4, #28]
    1a22:	2200      	movs	r2, #0
    1a24:	2106      	movs	r1, #6
    1a26:	0020      	movs	r0, r4
    1a28:	4798      	blx	r3
}
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	00001415 	.word	0x00001415
    1a30:	0001886c 	.word	0x0001886c
    1a34:	0000141d 	.word	0x0000141d

00001a38 <lv_obj_get_parent>:
{
    1a38:	b510      	push	{r4, lr}
    1a3a:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1a3c:	4b05      	ldr	r3, [pc, #20]	; (1a54 <lv_obj_get_parent+0x1c>)
    1a3e:	4798      	blx	r3
    1a40:	2800      	cmp	r0, #0
    1a42:	d001      	beq.n	1a48 <lv_obj_get_parent+0x10>
    return obj->parent;
    1a44:	6820      	ldr	r0, [r4, #0]
}
    1a46:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1a48:	0022      	movs	r2, r4
    1a4a:	2300      	movs	r3, #0
    1a4c:	4802      	ldr	r0, [pc, #8]	; (1a58 <lv_obj_get_parent+0x20>)
    1a4e:	4903      	ldr	r1, [pc, #12]	; (1a5c <lv_obj_get_parent+0x24>)
    1a50:	4788      	blx	r1
    1a52:	e7fe      	b.n	1a52 <lv_obj_get_parent+0x1a>
    1a54:	00001415 	.word	0x00001415
    1a58:	0001886c 	.word	0x0001886c
    1a5c:	0000141d 	.word	0x0000141d

00001a60 <lv_obj_get_screen>:
{
    1a60:	b570      	push	{r4, r5, r6, lr}
    1a62:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1a64:	4b09      	ldr	r3, [pc, #36]	; (1a8c <lv_obj_get_screen+0x2c>)
    1a66:	4798      	blx	r3
    1a68:	2800      	cmp	r0, #0
    1a6a:	d001      	beq.n	1a70 <lv_obj_get_screen+0x10>
        par   = lv_obj_get_parent(act_p);
    1a6c:	4d08      	ldr	r5, [pc, #32]	; (1a90 <lv_obj_get_screen+0x30>)
    1a6e:	e006      	b.n	1a7e <lv_obj_get_screen+0x1e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1a70:	0022      	movs	r2, r4
    1a72:	2300      	movs	r3, #0
    1a74:	4807      	ldr	r0, [pc, #28]	; (1a94 <lv_obj_get_screen+0x34>)
    1a76:	4908      	ldr	r1, [pc, #32]	; (1a98 <lv_obj_get_screen+0x38>)
    1a78:	4788      	blx	r1
    1a7a:	e7fe      	b.n	1a7a <lv_obj_get_screen+0x1a>
        par   = lv_obj_get_parent(act_p);
    1a7c:	0004      	movs	r4, r0
    1a7e:	0020      	movs	r0, r4
    1a80:	47a8      	blx	r5
    } while(par != NULL);
    1a82:	2800      	cmp	r0, #0
    1a84:	d1fa      	bne.n	1a7c <lv_obj_get_screen+0x1c>
}
    1a86:	0020      	movs	r0, r4
    1a88:	bd70      	pop	{r4, r5, r6, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	00001415 	.word	0x00001415
    1a90:	00001a39 	.word	0x00001a39
    1a94:	0001886c 	.word	0x0001886c
    1a98:	0000141d 	.word	0x0000141d

00001a9c <lv_obj_get_disp>:
{
    1a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9e:	46c6      	mov	lr, r8
    1aa0:	b500      	push	{lr}
    1aa2:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1aa4:	4b19      	ldr	r3, [pc, #100]	; (1b0c <lv_obj_get_disp+0x70>)
    1aa6:	4798      	blx	r3
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d00f      	beq.n	1acc <lv_obj_get_disp+0x30>
    if(obj->parent == NULL)
    1aac:	6823      	ldr	r3, [r4, #0]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d003      	beq.n	1aba <lv_obj_get_disp+0x1e>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
    1ab2:	0020      	movs	r0, r4
    1ab4:	4b16      	ldr	r3, [pc, #88]	; (1b10 <lv_obj_get_disp+0x74>)
    1ab6:	4798      	blx	r3
    1ab8:	0004      	movs	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    1aba:	4816      	ldr	r0, [pc, #88]	; (1b14 <lv_obj_get_disp+0x78>)
    1abc:	4b16      	ldr	r3, [pc, #88]	; (1b18 <lv_obj_get_disp+0x7c>)
    1abe:	4798      	blx	r3
    1ac0:	1e07      	subs	r7, r0, #0
    1ac2:	d01e      	beq.n	1b02 <lv_obj_get_disp+0x66>
        _LV_LL_READ(d->scr_ll, s) {
    1ac4:	4b14      	ldr	r3, [pc, #80]	; (1b18 <lv_obj_get_disp+0x7c>)
    1ac6:	4698      	mov	r8, r3
    1ac8:	4e14      	ldr	r6, [pc, #80]	; (1b1c <lv_obj_get_disp+0x80>)
    1aca:	e00b      	b.n	1ae4 <lv_obj_get_disp+0x48>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1acc:	0022      	movs	r2, r4
    1ace:	2300      	movs	r3, #0
    1ad0:	4813      	ldr	r0, [pc, #76]	; (1b20 <lv_obj_get_disp+0x84>)
    1ad2:	4914      	ldr	r1, [pc, #80]	; (1b24 <lv_obj_get_disp+0x88>)
    1ad4:	4788      	blx	r1
    1ad6:	e7fe      	b.n	1ad6 <lv_obj_get_disp+0x3a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    1ad8:	0039      	movs	r1, r7
    1ada:	480e      	ldr	r0, [pc, #56]	; (1b14 <lv_obj_get_disp+0x78>)
    1adc:	4b0f      	ldr	r3, [pc, #60]	; (1b1c <lv_obj_get_disp+0x80>)
    1ade:	4798      	blx	r3
    1ae0:	1e07      	subs	r7, r0, #0
    1ae2:	d00e      	beq.n	1b02 <lv_obj_get_disp+0x66>
        _LV_LL_READ(d->scr_ll, s) {
    1ae4:	003d      	movs	r5, r7
    1ae6:	3530      	adds	r5, #48	; 0x30
    1ae8:	0028      	movs	r0, r5
    1aea:	47c0      	blx	r8
    1aec:	2800      	cmp	r0, #0
    1aee:	d0f3      	beq.n	1ad8 <lv_obj_get_disp+0x3c>
            if(s == scr) return d;
    1af0:	4284      	cmp	r4, r0
    1af2:	d006      	beq.n	1b02 <lv_obj_get_disp+0x66>
        _LV_LL_READ(d->scr_ll, s) {
    1af4:	0001      	movs	r1, r0
    1af6:	0028      	movs	r0, r5
    1af8:	47b0      	blx	r6
    1afa:	2800      	cmp	r0, #0
    1afc:	d0ec      	beq.n	1ad8 <lv_obj_get_disp+0x3c>
            if(s == scr) return d;
    1afe:	4284      	cmp	r4, r0
    1b00:	d1f8      	bne.n	1af4 <lv_obj_get_disp+0x58>
}
    1b02:	0038      	movs	r0, r7
    1b04:	bc04      	pop	{r2}
    1b06:	4690      	mov	r8, r2
    1b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	00001415 	.word	0x00001415
    1b10:	00001a61 	.word	0x00001a61
    1b14:	20004cc4 	.word	0x20004cc4
    1b18:	00010605 	.word	0x00010605
    1b1c:	0001061d 	.word	0x0001061d
    1b20:	0001886c 	.word	0x0001886c
    1b24:	0000141d 	.word	0x0000141d

00001b28 <lv_obj_get_child>:
{
    1b28:	b570      	push	{r4, r5, r6, lr}
    1b2a:	0004      	movs	r4, r0
    1b2c:	000d      	movs	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1b2e:	4b0a      	ldr	r3, [pc, #40]	; (1b58 <lv_obj_get_child+0x30>)
    1b30:	4798      	blx	r3
    1b32:	2800      	cmp	r0, #0
    1b34:	d006      	beq.n	1b44 <lv_obj_get_child+0x1c>
    if(child == NULL) {
    1b36:	2d00      	cmp	r5, #0
    1b38:	d00a      	beq.n	1b50 <lv_obj_get_child+0x28>
        result = _lv_ll_get_next(&obj->child_ll, child);
    1b3a:	1d20      	adds	r0, r4, #4
    1b3c:	0029      	movs	r1, r5
    1b3e:	4b07      	ldr	r3, [pc, #28]	; (1b5c <lv_obj_get_child+0x34>)
    1b40:	4798      	blx	r3
}
    1b42:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1b44:	0022      	movs	r2, r4
    1b46:	2300      	movs	r3, #0
    1b48:	4805      	ldr	r0, [pc, #20]	; (1b60 <lv_obj_get_child+0x38>)
    1b4a:	4906      	ldr	r1, [pc, #24]	; (1b64 <lv_obj_get_child+0x3c>)
    1b4c:	4788      	blx	r1
    1b4e:	e7fe      	b.n	1b4e <lv_obj_get_child+0x26>
        result = _lv_ll_get_head(&obj->child_ll);
    1b50:	1d20      	adds	r0, r4, #4
    1b52:	4b05      	ldr	r3, [pc, #20]	; (1b68 <lv_obj_get_child+0x40>)
    1b54:	4798      	blx	r3
    1b56:	e7f4      	b.n	1b42 <lv_obj_get_child+0x1a>
    1b58:	00001415 	.word	0x00001415
    1b5c:	0001061d 	.word	0x0001061d
    1b60:	0001886c 	.word	0x0001886c
    1b64:	0000141d 	.word	0x0000141d
    1b68:	00010605 	.word	0x00010605

00001b6c <lv_obj_get_coords>:
{
    1b6c:	b570      	push	{r4, r5, r6, lr}
    1b6e:	0004      	movs	r4, r0
    1b70:	000d      	movs	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1b72:	4b0a      	ldr	r3, [pc, #40]	; (1b9c <lv_obj_get_coords+0x30>)
    1b74:	4798      	blx	r3
    1b76:	2800      	cmp	r0, #0
    1b78:	d009      	beq.n	1b8e <lv_obj_get_coords+0x22>
    1b7a:	0020      	movs	r0, r4
    1b7c:	3018      	adds	r0, #24
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
    1b7e:	3410      	adds	r4, #16

    while(len) {
        *d8 = *s8;
    1b80:	7821      	ldrb	r1, [r4, #0]
    1b82:	7029      	strb	r1, [r5, #0]
        d8++;
    1b84:	3501      	adds	r5, #1
        s8++;
    1b86:	3401      	adds	r4, #1
    while(len) {
    1b88:	42a0      	cmp	r0, r4
    1b8a:	d1f9      	bne.n	1b80 <lv_obj_get_coords+0x14>
}
    1b8c:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1b8e:	0022      	movs	r2, r4
    1b90:	2300      	movs	r3, #0
    1b92:	4803      	ldr	r0, [pc, #12]	; (1ba0 <lv_obj_get_coords+0x34>)
    1b94:	4903      	ldr	r1, [pc, #12]	; (1ba4 <lv_obj_get_coords+0x38>)
    1b96:	4788      	blx	r1
    1b98:	e7fe      	b.n	1b98 <lv_obj_get_coords+0x2c>
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	00001415 	.word	0x00001415
    1ba0:	0001886c 	.word	0x0001886c
    1ba4:	0000141d 	.word	0x0000141d

00001ba8 <lv_obj_get_x>:
{
    1ba8:	b510      	push	{r4, lr}
    1baa:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1bac:	4b0b      	ldr	r3, [pc, #44]	; (1bdc <lv_obj_get_x+0x34>)
    1bae:	4798      	blx	r3
    1bb0:	2800      	cmp	r0, #0
    1bb2:	d105      	bne.n	1bc0 <lv_obj_get_x+0x18>
    1bb4:	0022      	movs	r2, r4
    1bb6:	2300      	movs	r3, #0
    1bb8:	4809      	ldr	r0, [pc, #36]	; (1be0 <lv_obj_get_x+0x38>)
    1bba:	490a      	ldr	r1, [pc, #40]	; (1be4 <lv_obj_get_x+0x3c>)
    1bbc:	4788      	blx	r1
    1bbe:	e7fe      	b.n	1bbe <lv_obj_get_x+0x16>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    1bc0:	0020      	movs	r0, r4
    1bc2:	4b09      	ldr	r3, [pc, #36]	; (1be8 <lv_obj_get_x+0x40>)
    1bc4:	4798      	blx	r3
    if(parent) {
    1bc6:	2800      	cmp	r0, #0
    1bc8:	d004      	beq.n	1bd4 <lv_obj_get_x+0x2c>
        rel_x             = obj->coords.x1 - parent->coords.x1;
    1bca:	8a23      	ldrh	r3, [r4, #16]
    1bcc:	8a00      	ldrh	r0, [r0, #16]
    1bce:	1a18      	subs	r0, r3, r0
    1bd0:	b200      	sxth	r0, r0
}
    1bd2:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
    1bd4:	2310      	movs	r3, #16
    1bd6:	5ee0      	ldrsh	r0, [r4, r3]
    1bd8:	e7fb      	b.n	1bd2 <lv_obj_get_x+0x2a>
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00001415 	.word	0x00001415
    1be0:	0001886c 	.word	0x0001886c
    1be4:	0000141d 	.word	0x0000141d
    1be8:	00001a39 	.word	0x00001a39

00001bec <lv_obj_get_y>:
{
    1bec:	b510      	push	{r4, lr}
    1bee:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1bf0:	4b0b      	ldr	r3, [pc, #44]	; (1c20 <lv_obj_get_y+0x34>)
    1bf2:	4798      	blx	r3
    1bf4:	2800      	cmp	r0, #0
    1bf6:	d105      	bne.n	1c04 <lv_obj_get_y+0x18>
    1bf8:	0022      	movs	r2, r4
    1bfa:	2300      	movs	r3, #0
    1bfc:	4809      	ldr	r0, [pc, #36]	; (1c24 <lv_obj_get_y+0x38>)
    1bfe:	490a      	ldr	r1, [pc, #40]	; (1c28 <lv_obj_get_y+0x3c>)
    1c00:	4788      	blx	r1
    1c02:	e7fe      	b.n	1c02 <lv_obj_get_y+0x16>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    1c04:	0020      	movs	r0, r4
    1c06:	4b09      	ldr	r3, [pc, #36]	; (1c2c <lv_obj_get_y+0x40>)
    1c08:	4798      	blx	r3
    if(parent) {
    1c0a:	2800      	cmp	r0, #0
    1c0c:	d004      	beq.n	1c18 <lv_obj_get_y+0x2c>
        rel_y             = obj->coords.y1 - parent->coords.y1;
    1c0e:	8a63      	ldrh	r3, [r4, #18]
    1c10:	8a40      	ldrh	r0, [r0, #18]
    1c12:	1a18      	subs	r0, r3, r0
    1c14:	b200      	sxth	r0, r0
}
    1c16:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
    1c18:	2312      	movs	r3, #18
    1c1a:	5ee0      	ldrsh	r0, [r4, r3]
    1c1c:	e7fb      	b.n	1c16 <lv_obj_get_y+0x2a>
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	00001415 	.word	0x00001415
    1c24:	0001886c 	.word	0x0001886c
    1c28:	0000141d 	.word	0x0000141d
    1c2c:	00001a39 	.word	0x00001a39

00001c30 <lv_obj_get_width>:
{
    1c30:	b510      	push	{r4, lr}
    1c32:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1c34:	4b07      	ldr	r3, [pc, #28]	; (1c54 <lv_obj_get_width+0x24>)
    1c36:	4798      	blx	r3
    1c38:	2800      	cmp	r0, #0
    1c3a:	d005      	beq.n	1c48 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    1c3c:	8aa0      	ldrh	r0, [r4, #20]
    1c3e:	3001      	adds	r0, #1
    1c40:	8a23      	ldrh	r3, [r4, #16]
    1c42:	1ac0      	subs	r0, r0, r3
    return lv_area_get_width(&obj->coords);
    1c44:	b200      	sxth	r0, r0
}
    1c46:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1c48:	0022      	movs	r2, r4
    1c4a:	2300      	movs	r3, #0
    1c4c:	4802      	ldr	r0, [pc, #8]	; (1c58 <lv_obj_get_width+0x28>)
    1c4e:	4903      	ldr	r1, [pc, #12]	; (1c5c <lv_obj_get_width+0x2c>)
    1c50:	4788      	blx	r1
    1c52:	e7fe      	b.n	1c52 <lv_obj_get_width+0x22>
    1c54:	00001415 	.word	0x00001415
    1c58:	0001886c 	.word	0x0001886c
    1c5c:	0000141d 	.word	0x0000141d

00001c60 <lv_obj_get_height>:
{
    1c60:	b510      	push	{r4, lr}
    1c62:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1c64:	4b07      	ldr	r3, [pc, #28]	; (1c84 <lv_obj_get_height+0x24>)
    1c66:	4798      	blx	r3
    1c68:	2800      	cmp	r0, #0
    1c6a:	d005      	beq.n	1c78 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    1c6c:	8ae0      	ldrh	r0, [r4, #22]
    1c6e:	3001      	adds	r0, #1
    1c70:	8a63      	ldrh	r3, [r4, #18]
    1c72:	1ac0      	subs	r0, r0, r3
    return lv_area_get_height(&obj->coords);
    1c74:	b200      	sxth	r0, r0
}
    1c76:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1c78:	0022      	movs	r2, r4
    1c7a:	2300      	movs	r3, #0
    1c7c:	4802      	ldr	r0, [pc, #8]	; (1c88 <lv_obj_get_height+0x28>)
    1c7e:	4903      	ldr	r1, [pc, #12]	; (1c8c <lv_obj_get_height+0x2c>)
    1c80:	4788      	blx	r1
    1c82:	e7fe      	b.n	1c82 <lv_obj_get_height+0x22>
    1c84:	00001415 	.word	0x00001415
    1c88:	0001886c 	.word	0x0001886c
    1c8c:	0000141d 	.word	0x0000141d

00001c90 <lv_obj_get_style_list>:
{
    1c90:	b500      	push	{lr}
    1c92:	b083      	sub	sp, #12
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
    1c94:	2900      	cmp	r1, #0
    1c96:	d102      	bne.n	1c9e <lv_obj_get_style_list+0xe>
    1c98:	3028      	adds	r0, #40	; 0x28
}
    1c9a:	b003      	add	sp, #12
    1c9c:	bd00      	pop	{pc}
    info.part = part;
    1c9e:	466b      	mov	r3, sp
    1ca0:	7019      	strb	r1, [r3, #0]
    info.result = NULL;
    1ca2:	2300      	movs	r3, #0
    1ca4:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
    1ca6:	466a      	mov	r2, sp
    1ca8:	2108      	movs	r1, #8
    1caa:	4b04      	ldr	r3, [pc, #16]	; (1cbc <lv_obj_get_style_list+0x2c>)
    1cac:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
    1cae:	2801      	cmp	r0, #1
    1cb0:	d101      	bne.n	1cb6 <lv_obj_get_style_list+0x26>
    return info.result;
    1cb2:	9801      	ldr	r0, [sp, #4]
    1cb4:	e7f1      	b.n	1c9a <lv_obj_get_style_list+0xa>
    if(res != LV_RES_OK) return NULL;
    1cb6:	2000      	movs	r0, #0
    1cb8:	e7ef      	b.n	1c9a <lv_obj_get_style_list+0xa>
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	000019ed 	.word	0x000019ed

00001cc0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all porpeties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	46de      	mov	lr, fp
    1cc4:	4657      	mov	r7, sl
    1cc6:	4646      	mov	r6, r8
    1cc8:	b5c0      	push	{r6, r7, lr}
    1cca:	4680      	mov	r8, r0
    1ccc:	468a      	mov	sl, r1
    1cce:	4693      	mov	fp, r2
    1cd0:	001e      	movs	r6, r3
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    1cd2:	481d      	ldr	r0, [pc, #116]	; (1d48 <trans_del+0x88>)
    1cd4:	4b1d      	ldr	r3, [pc, #116]	; (1d4c <trans_del+0x8c>)
    1cd6:	4798      	blx	r3
    1cd8:	1e04      	subs	r4, r0, #0
    while(tr != NULL) {
    1cda:	d02f      	beq.n	1d3c <trans_del+0x7c>
        if(tr == tr_limit) break;
    1cdc:	42b0      	cmp	r0, r6
    1cde:	d02d      	beq.n	1d3c <trans_del+0x7c>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    1ce0:	4f1b      	ldr	r7, [pc, #108]	; (1d50 <trans_del+0x90>)
    1ce2:	e00a      	b.n	1cfa <trans_del+0x3a>

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    1ce4:	88a3      	ldrh	r3, [r4, #4]
    1ce6:	455b      	cmp	r3, fp
    1ce8:	d015      	beq.n	1d16 <trans_del+0x56>
    1cea:	465b      	mov	r3, fp
    1cec:	2bff      	cmp	r3, #255	; 0xff
    1cee:	d012      	beq.n	1d16 <trans_del+0x56>
    while(tr != NULL) {
    1cf0:	2d00      	cmp	r5, #0
    1cf2:	d023      	beq.n	1d3c <trans_del+0x7c>
    1cf4:	002c      	movs	r4, r5
        if(tr == tr_limit) break;
    1cf6:	42ae      	cmp	r6, r5
    1cf8:	d020      	beq.n	1d3c <trans_del+0x7c>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    1cfa:	0021      	movs	r1, r4
    1cfc:	4812      	ldr	r0, [pc, #72]	; (1d48 <trans_del+0x88>)
    1cfe:	47b8      	blx	r7
    1d00:	0005      	movs	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    1d02:	6820      	ldr	r0, [r4, #0]
    1d04:	4540      	cmp	r0, r8
    1d06:	d1f3      	bne.n	1cf0 <trans_del+0x30>
    1d08:	79a1      	ldrb	r1, [r4, #6]
    1d0a:	4551      	cmp	r1, sl
    1d0c:	d0ea      	beq.n	1ce4 <trans_del+0x24>
    1d0e:	4653      	mov	r3, sl
    1d10:	2bff      	cmp	r3, #255	; 0xff
    1d12:	d1ed      	bne.n	1cf0 <trans_del+0x30>
    1d14:	e7e6      	b.n	1ce4 <trans_del+0x24>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    1d16:	4b0f      	ldr	r3, [pc, #60]	; (1d54 <trans_del+0x94>)
    1d18:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    1d1a:	4b0f      	ldr	r3, [pc, #60]	; (1d58 <trans_del+0x98>)
    1d1c:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
    1d1e:	88a1      	ldrh	r1, [r4, #4]
    1d20:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <trans_del+0x9c>)
    1d22:	4798      	blx	r3

            lv_anim_del(tr, NULL);
    1d24:	2100      	movs	r1, #0
    1d26:	0020      	movs	r0, r4
    1d28:	4b0d      	ldr	r3, [pc, #52]	; (1d60 <trans_del+0xa0>)
    1d2a:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    1d2c:	0021      	movs	r1, r4
    1d2e:	4806      	ldr	r0, [pc, #24]	; (1d48 <trans_del+0x88>)
    1d30:	4b0c      	ldr	r3, [pc, #48]	; (1d64 <trans_del+0xa4>)
    1d32:	4798      	blx	r3
            lv_mem_free(tr);
    1d34:	0020      	movs	r0, r4
    1d36:	4b0c      	ldr	r3, [pc, #48]	; (1d68 <trans_del+0xa8>)
    1d38:	4798      	blx	r3
    1d3a:	e7d9      	b.n	1cf0 <trans_del+0x30>
        }
        tr = tr_prev;
    }
}
    1d3c:	bc1c      	pop	{r2, r3, r4}
    1d3e:	4690      	mov	r8, r2
    1d40:	469a      	mov	sl, r3
    1d42:	46a3      	mov	fp, r4
    1d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	20004d68 	.word	0x20004d68
    1d4c:	00010611 	.word	0x00010611
    1d50:	00010645 	.word	0x00010645
    1d54:	00001c91 	.word	0x00001c91
    1d58:	000055b9 	.word	0x000055b9
    1d5c:	00004b69 	.word	0x00004b69
    1d60:	0000fa29 	.word	0x0000fa29
    1d64:	000106ed 	.word	0x000106ed
    1d68:	00010ad1 	.word	0x00010ad1

00001d6c <lv_obj_clean_style_list>:
{
    1d6c:	b570      	push	{r4, r5, r6, lr}
    1d6e:	0004      	movs	r4, r0
    1d70:	000d      	movs	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
    1d72:	4b06      	ldr	r3, [pc, #24]	; (1d8c <lv_obj_clean_style_list+0x20>)
    1d74:	4798      	blx	r3
    if(style_dsc == NULL) {
    1d76:	2800      	cmp	r0, #0
    1d78:	d007      	beq.n	1d8a <lv_obj_clean_style_list+0x1e>
    _lv_style_list_reset(style_dsc);
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <lv_obj_clean_style_list+0x24>)
    1d7c:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
    1d7e:	2300      	movs	r3, #0
    1d80:	22ff      	movs	r2, #255	; 0xff
    1d82:	0029      	movs	r1, r5
    1d84:	0020      	movs	r0, r4
    1d86:	4c03      	ldr	r4, [pc, #12]	; (1d94 <lv_obj_clean_style_list+0x28>)
    1d88:	47a0      	blx	r4
}
    1d8a:	bd70      	pop	{r4, r5, r6, pc}
    1d8c:	00001c91 	.word	0x00001c91
    1d90:	000055c9 	.word	0x000055c9
    1d94:	00001cc1 	.word	0x00001cc1

00001d98 <trans_anim_ready_cb>:
    tr->prop = prop_tmp;

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
    1d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_trans_t * tr = a->var;
    1d9a:	6804      	ldr	r4, [r0, #0]
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    1d9c:	4817      	ldr	r0, [pc, #92]	; (1dfc <trans_anim_ready_cb+0x64>)
    1d9e:	4b18      	ldr	r3, [pc, #96]	; (1e00 <trans_anim_ready_cb+0x68>)
    1da0:	4798      	blx	r3
    1da2:	2800      	cmp	r0, #0
    1da4:	d020      	beq.n	1de8 <trans_anim_ready_cb+0x50>
    1da6:	2600      	movs	r6, #0
    1da8:	4d14      	ldr	r5, [pc, #80]	; (1dfc <trans_anim_ready_cb+0x64>)
    1daa:	4f16      	ldr	r7, [pc, #88]	; (1e04 <trans_anim_ready_cb+0x6c>)
    1dac:	e004      	b.n	1db8 <trans_anim_ready_cb+0x20>
    1dae:	0001      	movs	r1, r0
    1db0:	0028      	movs	r0, r5
    1db2:	47b8      	blx	r7
    1db4:	2800      	cmp	r0, #0
    1db6:	d00d      	beq.n	1dd4 <trans_anim_ready_cb+0x3c>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
    1db8:	4284      	cmp	r4, r0
    1dba:	d0f8      	beq.n	1dae <trans_anim_ready_cb+0x16>
    1dbc:	6803      	ldr	r3, [r0, #0]
    1dbe:	6822      	ldr	r2, [r4, #0]
    1dc0:	4293      	cmp	r3, r2
    1dc2:	d1f4      	bne.n	1dae <trans_anim_ready_cb+0x16>
    1dc4:	6843      	ldr	r3, [r0, #4]
    1dc6:	021b      	lsls	r3, r3, #8
    1dc8:	6862      	ldr	r2, [r4, #4]
    1dca:	0212      	lsls	r2, r2, #8
    1dcc:	429a      	cmp	r2, r3
    1dce:	d1ee      	bne.n	1dae <trans_anim_ready_cb+0x16>
            running = true;
    1dd0:	2601      	movs	r6, #1
    1dd2:	e7ec      	b.n	1dae <trans_anim_ready_cb+0x16>
        }
    }

    if(!running) {
    1dd4:	2e00      	cmp	r6, #0
    1dd6:	d007      	beq.n	1de8 <trans_anim_ready_cb+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
        lv_style_remove_prop(style_trans, tr->prop);
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    1dd8:	0021      	movs	r1, r4
    1dda:	4808      	ldr	r0, [pc, #32]	; (1dfc <trans_anim_ready_cb+0x64>)
    1ddc:	4b0a      	ldr	r3, [pc, #40]	; (1e08 <trans_anim_ready_cb+0x70>)
    1dde:	4798      	blx	r3
    lv_mem_free(tr);
    1de0:	0020      	movs	r0, r4
    1de2:	4b0a      	ldr	r3, [pc, #40]	; (1e0c <trans_anim_ready_cb+0x74>)
    1de4:	4798      	blx	r3
}
    1de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    1de8:	79a1      	ldrb	r1, [r4, #6]
    1dea:	6820      	ldr	r0, [r4, #0]
    1dec:	4b08      	ldr	r3, [pc, #32]	; (1e10 <trans_anim_ready_cb+0x78>)
    1dee:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    1df0:	4b08      	ldr	r3, [pc, #32]	; (1e14 <trans_anim_ready_cb+0x7c>)
    1df2:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
    1df4:	88a1      	ldrh	r1, [r4, #4]
    1df6:	4b08      	ldr	r3, [pc, #32]	; (1e18 <trans_anim_ready_cb+0x80>)
    1df8:	4798      	blx	r3
    1dfa:	e7ed      	b.n	1dd8 <trans_anim_ready_cb+0x40>
    1dfc:	20004d68 	.word	0x20004d68
    1e00:	00010605 	.word	0x00010605
    1e04:	0001061d 	.word	0x0001061d
    1e08:	000106ed 	.word	0x000106ed
    1e0c:	00010ad1 	.word	0x00010ad1
    1e10:	00001c91 	.word	0x00001c91
    1e14:	000055b9 	.word	0x000055b9
    1e18:	00004b69 	.word	0x00004b69

00001e1c <lv_obj_get_hidden>:
{
    1e1c:	b510      	push	{r4, lr}
    1e1e:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1e20:	4b07      	ldr	r3, [pc, #28]	; (1e40 <lv_obj_get_hidden+0x24>)
    1e22:	4798      	blx	r3
    1e24:	2800      	cmp	r0, #0
    1e26:	d004      	beq.n	1e32 <lv_obj_get_hidden+0x16>
    return obj->hidden == 0 ? false : true;
    1e28:	2334      	movs	r3, #52	; 0x34
    1e2a:	5ce0      	ldrb	r0, [r4, r3]
    1e2c:	06c0      	lsls	r0, r0, #27
    1e2e:	0fc0      	lsrs	r0, r0, #31
}
    1e30:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1e32:	0022      	movs	r2, r4
    1e34:	2300      	movs	r3, #0
    1e36:	4803      	ldr	r0, [pc, #12]	; (1e44 <lv_obj_get_hidden+0x28>)
    1e38:	4903      	ldr	r1, [pc, #12]	; (1e48 <lv_obj_get_hidden+0x2c>)
    1e3a:	4788      	blx	r1
    1e3c:	e7fe      	b.n	1e3c <lv_obj_get_hidden+0x20>
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	00001415 	.word	0x00001415
    1e44:	0001886c 	.word	0x0001886c
    1e48:	0000141d 	.word	0x0000141d

00001e4c <lv_obj_invalidate_area>:
{
    1e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e4e:	b085      	sub	sp, #20
    1e50:	0004      	movs	r4, r0
    1e52:	000e      	movs	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1e54:	4b30      	ldr	r3, [pc, #192]	; (1f18 <lv_obj_invalidate_area+0xcc>)
    1e56:	4798      	blx	r3
    1e58:	2800      	cmp	r0, #0
    1e5a:	d105      	bne.n	1e68 <lv_obj_invalidate_area+0x1c>
    1e5c:	0022      	movs	r2, r4
    1e5e:	2300      	movs	r3, #0
    1e60:	482e      	ldr	r0, [pc, #184]	; (1f1c <lv_obj_invalidate_area+0xd0>)
    1e62:	492f      	ldr	r1, [pc, #188]	; (1f20 <lv_obj_invalidate_area+0xd4>)
    1e64:	4788      	blx	r1
    1e66:	e7fe      	b.n	1e66 <lv_obj_invalidate_area+0x1a>
    if(lv_obj_get_hidden(obj)) return;
    1e68:	0020      	movs	r0, r4
    1e6a:	4b2e      	ldr	r3, [pc, #184]	; (1f24 <lv_obj_invalidate_area+0xd8>)
    1e6c:	4798      	blx	r3
    1e6e:	2800      	cmp	r0, #0
    1e70:	d001      	beq.n	1e76 <lv_obj_invalidate_area+0x2a>
}
    1e72:	b005      	add	sp, #20
    1e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
    1e76:	0020      	movs	r0, r4
    1e78:	4b2b      	ldr	r3, [pc, #172]	; (1f28 <lv_obj_invalidate_area+0xdc>)
    1e7a:	4798      	blx	r3
    1e7c:	0007      	movs	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
    1e7e:	4b2b      	ldr	r3, [pc, #172]	; (1f2c <lv_obj_invalidate_area+0xe0>)
    1e80:	4798      	blx	r3
    1e82:	0005      	movs	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    1e84:	4b2a      	ldr	r3, [pc, #168]	; (1f30 <lv_obj_invalidate_area+0xe4>)
    1e86:	4798      	blx	r3
    1e88:	4287      	cmp	r7, r0
    1e8a:	d009      	beq.n	1ea0 <lv_obj_invalidate_area+0x54>
    1e8c:	0028      	movs	r0, r5
    1e8e:	4b29      	ldr	r3, [pc, #164]	; (1f34 <lv_obj_invalidate_area+0xe8>)
    1e90:	4798      	blx	r3
    1e92:	4287      	cmp	r7, r0
    1e94:	d004      	beq.n	1ea0 <lv_obj_invalidate_area+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
    1e96:	0028      	movs	r0, r5
    1e98:	4b27      	ldr	r3, [pc, #156]	; (1f38 <lv_obj_invalidate_area+0xec>)
    1e9a:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    1e9c:	4287      	cmp	r7, r0
    1e9e:	d1e8      	bne.n	1e72 <lv_obj_invalidate_area+0x26>
        lv_coord_t ext_size = obj->ext_draw_pad;
    1ea0:	2232      	movs	r2, #50	; 0x32
    1ea2:	5ea3      	ldrsh	r3, [r4, r2]
        lv_area_copy(&obj_coords, &obj->coords);
    1ea4:	0021      	movs	r1, r4
    1ea6:	3110      	adds	r1, #16
    1ea8:	2200      	movs	r2, #0
        *d8 = *s8;
    1eaa:	5c88      	ldrb	r0, [r1, r2]
    1eac:	466f      	mov	r7, sp
    1eae:	55d0      	strb	r0, [r2, r7]
    1eb0:	3201      	adds	r2, #1
    while(len) {
    1eb2:	2a08      	cmp	r2, #8
    1eb4:	d1f9      	bne.n	1eaa <lv_obj_invalidate_area+0x5e>
        obj_coords.x1 -= ext_size;
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	883a      	ldrh	r2, [r7, #0]
    1eba:	1ad2      	subs	r2, r2, r3
    1ebc:	803a      	strh	r2, [r7, #0]
        obj_coords.y1 -= ext_size;
    1ebe:	887a      	ldrh	r2, [r7, #2]
    1ec0:	1ad2      	subs	r2, r2, r3
    1ec2:	807a      	strh	r2, [r7, #2]
        obj_coords.x2 += ext_size;
    1ec4:	88ba      	ldrh	r2, [r7, #4]
    1ec6:	189a      	adds	r2, r3, r2
    1ec8:	80ba      	strh	r2, [r7, #4]
        obj_coords.y2 += ext_size;
    1eca:	88fa      	ldrh	r2, [r7, #6]
    1ecc:	189b      	adds	r3, r3, r2
    1ece:	466a      	mov	r2, sp
    1ed0:	80fb      	strh	r3, [r7, #6]
        is_common = _lv_area_intersect(&area_trunc, area, &obj_coords);
    1ed2:	0031      	movs	r1, r6
    1ed4:	a802      	add	r0, sp, #8
    1ed6:	4b19      	ldr	r3, [pc, #100]	; (1f3c <lv_obj_invalidate_area+0xf0>)
    1ed8:	4798      	blx	r3
        if(is_common == false) return;  /*The area is not on the object*/
    1eda:	2800      	cmp	r0, #0
    1edc:	d0c9      	beq.n	1e72 <lv_obj_invalidate_area+0x26>
        lv_obj_t * par = lv_obj_get_parent(obj);
    1ede:	0020      	movs	r0, r4
    1ee0:	4b17      	ldr	r3, [pc, #92]	; (1f40 <lv_obj_invalidate_area+0xf4>)
    1ee2:	4798      	blx	r3
    1ee4:	1e04      	subs	r4, r0, #0
        while(par != NULL) {
    1ee6:	d011      	beq.n	1f0c <lv_obj_invalidate_area+0xc0>
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    1ee8:	4e14      	ldr	r6, [pc, #80]	; (1f3c <lv_obj_invalidate_area+0xf0>)
    1eea:	0022      	movs	r2, r4
    1eec:	3210      	adds	r2, #16
    1eee:	a902      	add	r1, sp, #8
    1ef0:	0008      	movs	r0, r1
    1ef2:	47b0      	blx	r6
            if(is_common == false) break;       /*If no common parts with parent break;*/
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d0bc      	beq.n	1e72 <lv_obj_invalidate_area+0x26>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    1ef8:	0020      	movs	r0, r4
    1efa:	4b0a      	ldr	r3, [pc, #40]	; (1f24 <lv_obj_invalidate_area+0xd8>)
    1efc:	4798      	blx	r3
    1efe:	2800      	cmp	r0, #0
    1f00:	d1b7      	bne.n	1e72 <lv_obj_invalidate_area+0x26>
            par = lv_obj_get_parent(par);
    1f02:	0020      	movs	r0, r4
    1f04:	4b0e      	ldr	r3, [pc, #56]	; (1f40 <lv_obj_invalidate_area+0xf4>)
    1f06:	4798      	blx	r3
    1f08:	1e04      	subs	r4, r0, #0
        while(par != NULL) {
    1f0a:	d1ee      	bne.n	1eea <lv_obj_invalidate_area+0x9e>
        if(is_common) _lv_inv_area(disp, &area_trunc);
    1f0c:	a902      	add	r1, sp, #8
    1f0e:	0028      	movs	r0, r5
    1f10:	4b0c      	ldr	r3, [pc, #48]	; (1f44 <lv_obj_invalidate_area+0xf8>)
    1f12:	4798      	blx	r3
    1f14:	e7ad      	b.n	1e72 <lv_obj_invalidate_area+0x26>
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	00001415 	.word	0x00001415
    1f1c:	0001886c 	.word	0x0001886c
    1f20:	0000141d 	.word	0x0000141d
    1f24:	00001e1d 	.word	0x00001e1d
    1f28:	00001a61 	.word	0x00001a61
    1f2c:	00001a9d 	.word	0x00001a9d
    1f30:	00001445 	.word	0x00001445
    1f34:	00001461 	.word	0x00001461
    1f38:	0000147d 	.word	0x0000147d
    1f3c:	0000fba7 	.word	0x0000fba7
    1f40:	00001a39 	.word	0x00001a39
    1f44:	00004239 	.word	0x00004239

00001f48 <lv_obj_invalidate>:
{
    1f48:	b530      	push	{r4, r5, lr}
    1f4a:	b083      	sub	sp, #12
    1f4c:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1f4e:	4b14      	ldr	r3, [pc, #80]	; (1fa0 <lv_obj_invalidate+0x58>)
    1f50:	4798      	blx	r3
    1f52:	2800      	cmp	r0, #0
    1f54:	d01d      	beq.n	1f92 <lv_obj_invalidate+0x4a>
    lv_coord_t ext_size = obj->ext_draw_pad;
    1f56:	2332      	movs	r3, #50	; 0x32
    1f58:	5ee2      	ldrsh	r2, [r4, r3]
    lv_area_copy(&obj_coords, &obj->coords);
    1f5a:	0020      	movs	r0, r4
    1f5c:	3010      	adds	r0, #16
    1f5e:	2300      	movs	r3, #0
        *d8 = *s8;
    1f60:	5cc1      	ldrb	r1, [r0, r3]
    1f62:	466d      	mov	r5, sp
    1f64:	5559      	strb	r1, [r3, r5]
    1f66:	3301      	adds	r3, #1
    while(len) {
    1f68:	2b08      	cmp	r3, #8
    1f6a:	d1f9      	bne.n	1f60 <lv_obj_invalidate+0x18>
    obj_coords.x1 -= ext_size;
    1f6c:	b293      	uxth	r3, r2
    1f6e:	882a      	ldrh	r2, [r5, #0]
    1f70:	1ad2      	subs	r2, r2, r3
    1f72:	4669      	mov	r1, sp
    1f74:	802a      	strh	r2, [r5, #0]
    obj_coords.y1 -= ext_size;
    1f76:	886a      	ldrh	r2, [r5, #2]
    1f78:	1ad2      	subs	r2, r2, r3
    1f7a:	806a      	strh	r2, [r5, #2]
    obj_coords.x2 += ext_size;
    1f7c:	88aa      	ldrh	r2, [r5, #4]
    1f7e:	189a      	adds	r2, r3, r2
    1f80:	80aa      	strh	r2, [r5, #4]
    obj_coords.y2 += ext_size;
    1f82:	88ea      	ldrh	r2, [r5, #6]
    1f84:	189b      	adds	r3, r3, r2
    1f86:	80eb      	strh	r3, [r5, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
    1f88:	0020      	movs	r0, r4
    1f8a:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <lv_obj_invalidate+0x5c>)
    1f8c:	4798      	blx	r3
}
    1f8e:	b003      	add	sp, #12
    1f90:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1f92:	0022      	movs	r2, r4
    1f94:	2300      	movs	r3, #0
    1f96:	4804      	ldr	r0, [pc, #16]	; (1fa8 <lv_obj_invalidate+0x60>)
    1f98:	4904      	ldr	r1, [pc, #16]	; (1fac <lv_obj_invalidate+0x64>)
    1f9a:	4788      	blx	r1
    1f9c:	e7fe      	b.n	1f9c <lv_obj_invalidate+0x54>
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00001415 	.word	0x00001415
    1fa4:	00001e4d 	.word	0x00001e4d
    1fa8:	0001886c 	.word	0x0001886c
    1fac:	0000141d 	.word	0x0000141d

00001fb0 <lv_obj_move_foreground>:
{
    1fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fb2:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    1fb4:	4b12      	ldr	r3, [pc, #72]	; (2000 <STACK_SIZE>)
    1fb6:	4798      	blx	r3
    1fb8:	2800      	cmp	r0, #0
    1fba:	d105      	bne.n	1fc8 <lv_obj_move_foreground+0x18>
    1fbc:	0022      	movs	r2, r4
    1fbe:	2300      	movs	r3, #0
    1fc0:	4810      	ldr	r0, [pc, #64]	; (2004 <STACK_SIZE+0x4>)
    1fc2:	4911      	ldr	r1, [pc, #68]	; (2008 <STACK_SIZE+0x8>)
    1fc4:	4788      	blx	r1
    1fc6:	e7fe      	b.n	1fc6 <lv_obj_move_foreground+0x16>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    1fc8:	0020      	movs	r0, r4
    1fca:	4b10      	ldr	r3, [pc, #64]	; (200c <STACK_SIZE+0xc>)
    1fcc:	4798      	blx	r3
    1fce:	0005      	movs	r5, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
    1fd0:	1d06      	adds	r6, r0, #4
    1fd2:	0030      	movs	r0, r6
    1fd4:	4b0e      	ldr	r3, [pc, #56]	; (2010 <STACK_SIZE+0x10>)
    1fd6:	4798      	blx	r3
    1fd8:	4284      	cmp	r4, r0
    1fda:	d00f      	beq.n	1ffc <lv_obj_move_foreground+0x4c>
    lv_obj_invalidate(parent);
    1fdc:	0028      	movs	r0, r5
    1fde:	4f0d      	ldr	r7, [pc, #52]	; (2014 <STACK_SIZE+0x14>)
    1fe0:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
    1fe2:	2301      	movs	r3, #1
    1fe4:	0022      	movs	r2, r4
    1fe6:	0031      	movs	r1, r6
    1fe8:	0030      	movs	r0, r6
    1fea:	4e0b      	ldr	r6, [pc, #44]	; (2018 <STACK_SIZE+0x18>)
    1fec:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    1fee:	0022      	movs	r2, r4
    1ff0:	2101      	movs	r1, #1
    1ff2:	0028      	movs	r0, r5
    1ff4:	69eb      	ldr	r3, [r5, #28]
    1ff6:	4798      	blx	r3
    lv_obj_invalidate(parent);
    1ff8:	0028      	movs	r0, r5
    1ffa:	47b8      	blx	r7
}
    1ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	00001415 	.word	0x00001415
    2004:	0001886c 	.word	0x0001886c
    2008:	0000141d 	.word	0x0000141d
    200c:	00001a39 	.word	0x00001a39
    2010:	00010605 	.word	0x00010605
    2014:	00001f49 	.word	0x00001f49
    2018:	0001077d 	.word	0x0001077d

0000201c <lv_obj_set_pos>:
{
    201c:	b5f0      	push	{r4, r5, r6, r7, lr}
    201e:	46d6      	mov	lr, sl
    2020:	464f      	mov	r7, r9
    2022:	4646      	mov	r6, r8
    2024:	b5c0      	push	{r6, r7, lr}
    2026:	b082      	sub	sp, #8
    2028:	0004      	movs	r4, r0
    202a:	000d      	movs	r5, r1
    202c:	0017      	movs	r7, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    202e:	4b26      	ldr	r3, [pc, #152]	; (20c8 <lv_obj_set_pos+0xac>)
    2030:	4798      	blx	r3
    2032:	2800      	cmp	r0, #0
    2034:	d041      	beq.n	20ba <lv_obj_set_pos+0x9e>
    lv_obj_t * par = obj->parent;
    2036:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) {
    2038:	2e00      	cmp	r6, #0
    203a:	d038      	beq.n	20ae <lv_obj_set_pos+0x92>
    diff.x = x - obj->coords.x1;
    203c:	8a33      	ldrh	r3, [r6, #16]
    203e:	8a22      	ldrh	r2, [r4, #16]
    2040:	1a9b      	subs	r3, r3, r2
    2042:	195b      	adds	r3, r3, r5
    2044:	b29b      	uxth	r3, r3
    2046:	469a      	mov	sl, r3
    2048:	b21b      	sxth	r3, r3
    204a:	4698      	mov	r8, r3
    diff.y = y - obj->coords.y1;
    204c:	8a75      	ldrh	r5, [r6, #18]
    204e:	8a63      	ldrh	r3, [r4, #18]
    2050:	1aed      	subs	r5, r5, r3
    2052:	19ed      	adds	r5, r5, r7
    2054:	b2ad      	uxth	r5, r5
    2056:	b22b      	sxth	r3, r5
    2058:	4699      	mov	r9, r3
    if(diff.x == 0 && diff.y == 0) return;
    205a:	4643      	mov	r3, r8
    205c:	2b00      	cmp	r3, #0
    205e:	d102      	bne.n	2066 <lv_obj_set_pos+0x4a>
    2060:	464b      	mov	r3, r9
    2062:	2b00      	cmp	r3, #0
    2064:	d023      	beq.n	20ae <lv_obj_set_pos+0x92>
    lv_obj_invalidate(obj);
    2066:	0020      	movs	r0, r4
    2068:	4f18      	ldr	r7, [pc, #96]	; (20cc <lv_obj_set_pos+0xb0>)
    206a:	47b8      	blx	r7
    lv_obj_get_coords(obj, &ori);
    206c:	4669      	mov	r1, sp
    206e:	0020      	movs	r0, r4
    2070:	4b17      	ldr	r3, [pc, #92]	; (20d0 <lv_obj_set_pos+0xb4>)
    2072:	4798      	blx	r3
    obj->coords.x1 += diff.x;
    2074:	8a23      	ldrh	r3, [r4, #16]
    2076:	4453      	add	r3, sl
    2078:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
    207a:	8a63      	ldrh	r3, [r4, #18]
    207c:	18eb      	adds	r3, r5, r3
    207e:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
    2080:	8aa3      	ldrh	r3, [r4, #20]
    2082:	4453      	add	r3, sl
    2084:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
    2086:	8ae3      	ldrh	r3, [r4, #22]
    2088:	18ed      	adds	r5, r5, r3
    208a:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
    208c:	464a      	mov	r2, r9
    208e:	4641      	mov	r1, r8
    2090:	0020      	movs	r0, r4
    2092:	4b10      	ldr	r3, [pc, #64]	; (20d4 <lv_obj_set_pos+0xb8>)
    2094:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    2096:	466a      	mov	r2, sp
    2098:	2102      	movs	r1, #2
    209a:	0020      	movs	r0, r4
    209c:	69e3      	ldr	r3, [r4, #28]
    209e:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    20a0:	69f3      	ldr	r3, [r6, #28]
    20a2:	0022      	movs	r2, r4
    20a4:	2101      	movs	r1, #1
    20a6:	0030      	movs	r0, r6
    20a8:	4798      	blx	r3
    lv_obj_invalidate(obj);
    20aa:	0020      	movs	r0, r4
    20ac:	47b8      	blx	r7
}
    20ae:	b002      	add	sp, #8
    20b0:	bc1c      	pop	{r2, r3, r4}
    20b2:	4690      	mov	r8, r2
    20b4:	4699      	mov	r9, r3
    20b6:	46a2      	mov	sl, r4
    20b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    20ba:	0022      	movs	r2, r4
    20bc:	2300      	movs	r3, #0
    20be:	4806      	ldr	r0, [pc, #24]	; (20d8 <lv_obj_set_pos+0xbc>)
    20c0:	4906      	ldr	r1, [pc, #24]	; (20dc <lv_obj_set_pos+0xc0>)
    20c2:	4788      	blx	r1
    20c4:	e7fe      	b.n	20c4 <lv_obj_set_pos+0xa8>
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	00001415 	.word	0x00001415
    20cc:	00001f49 	.word	0x00001f49
    20d0:	00001b6d 	.word	0x00001b6d
    20d4:	000017a1 	.word	0x000017a1
    20d8:	0001886c 	.word	0x0001886c
    20dc:	0000141d 	.word	0x0000141d

000020e0 <lv_obj_align>:
{
    20e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e2:	46d6      	mov	lr, sl
    20e4:	464f      	mov	r7, r9
    20e6:	4646      	mov	r6, r8
    20e8:	b5c0      	push	{r6, r7, lr}
    20ea:	b084      	sub	sp, #16
    20ec:	0004      	movs	r4, r0
    20ee:	000f      	movs	r7, r1
    20f0:	9201      	str	r2, [sp, #4]
    20f2:	4699      	mov	r9, r3
    20f4:	ab0c      	add	r3, sp, #48	; 0x30
    20f6:	2200      	movs	r2, #0
    20f8:	5e9a      	ldrsh	r2, [r3, r2]
    20fa:	4690      	mov	r8, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    20fc:	4b26      	ldr	r3, [pc, #152]	; (2198 <lv_obj_align+0xb8>)
    20fe:	4798      	blx	r3
    2100:	2800      	cmp	r0, #0
    2102:	d105      	bne.n	2110 <lv_obj_align+0x30>
    2104:	0022      	movs	r2, r4
    2106:	2300      	movs	r3, #0
    2108:	4824      	ldr	r0, [pc, #144]	; (219c <lv_obj_align+0xbc>)
    210a:	4925      	ldr	r1, [pc, #148]	; (21a0 <lv_obj_align+0xc0>)
    210c:	4788      	blx	r1
    210e:	e7fe      	b.n	210e <lv_obj_align+0x2e>
    if(base == NULL) base = lv_obj_get_parent(obj);
    2110:	2f00      	cmp	r7, #0
    2112:	d00a      	beq.n	212a <lv_obj_align+0x4a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    2114:	0038      	movs	r0, r7
    2116:	4b20      	ldr	r3, [pc, #128]	; (2198 <lv_obj_align+0xb8>)
    2118:	4798      	blx	r3
    211a:	2800      	cmp	r0, #0
    211c:	d10a      	bne.n	2134 <lv_obj_align+0x54>
    211e:	003a      	movs	r2, r7
    2120:	2300      	movs	r3, #0
    2122:	481e      	ldr	r0, [pc, #120]	; (219c <lv_obj_align+0xbc>)
    2124:	491e      	ldr	r1, [pc, #120]	; (21a0 <lv_obj_align+0xc0>)
    2126:	4788      	blx	r1
    2128:	e7fe      	b.n	2128 <lv_obj_align+0x48>
    if(base == NULL) base = lv_obj_get_parent(obj);
    212a:	0020      	movs	r0, r4
    212c:	4b1d      	ldr	r3, [pc, #116]	; (21a4 <lv_obj_align+0xc4>)
    212e:	4798      	blx	r3
    2130:	0007      	movs	r7, r0
    2132:	e7ef      	b.n	2114 <lv_obj_align+0x34>
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
    2134:	ad03      	add	r5, sp, #12
    2136:	0021      	movs	r1, r4
    2138:	3110      	adds	r1, #16
    213a:	0038      	movs	r0, r7
    213c:	3010      	adds	r0, #16
    213e:	002b      	movs	r3, r5
    2140:	9a01      	ldr	r2, [sp, #4]
    2142:	4e19      	ldr	r6, [pc, #100]	; (21a8 <lv_obj_align+0xc8>)
    2144:	47b0      	blx	r6
    lv_obj_t * par        = lv_obj_get_parent(obj);
    2146:	0020      	movs	r0, r4
    2148:	4b16      	ldr	r3, [pc, #88]	; (21a4 <lv_obj_align+0xc4>)
    214a:	4798      	blx	r3
    lv_coord_t par_abs_y  = par->coords.y1;
    214c:	2212      	movs	r2, #18
    214e:	5e83      	ldrsh	r3, [r0, r2]
    new_pos.y += y_ofs;
    2150:	886a      	ldrh	r2, [r5, #2]
    2152:	4442      	add	r2, r8
    new_pos.x += x_ofs;
    2154:	8829      	ldrh	r1, [r5, #0]
    2156:	4449      	add	r1, r9
    new_pos.x -= par_abs_x;
    2158:	8a00      	ldrh	r0, [r0, #16]
    215a:	1a09      	subs	r1, r1, r0
    215c:	b209      	sxth	r1, r1
    215e:	8029      	strh	r1, [r5, #0]
    new_pos.y -= par_abs_y;
    2160:	1ad2      	subs	r2, r2, r3
    2162:	b212      	sxth	r2, r2
    2164:	806a      	strh	r2, [r5, #2]
    lv_obj_set_pos(obj, new_pos.x, new_pos.y);
    2166:	0020      	movs	r0, r4
    2168:	4b10      	ldr	r3, [pc, #64]	; (21ac <lv_obj_align+0xcc>)
    216a:	4798      	blx	r3
    obj->realign.align       = align;
    216c:	2348      	movs	r3, #72	; 0x48
    216e:	466a      	mov	r2, sp
    2170:	7912      	ldrb	r2, [r2, #4]
    2172:	54e2      	strb	r2, [r4, r3]
    obj->realign.xofs        = x_ofs;
    2174:	3b04      	subs	r3, #4
    2176:	464a      	mov	r2, r9
    2178:	52e2      	strh	r2, [r4, r3]
    obj->realign.yofs        = y_ofs;
    217a:	3302      	adds	r3, #2
    217c:	4642      	mov	r2, r8
    217e:	52e2      	strh	r2, [r4, r3]
    obj->realign.base        = base;
    2180:	6427      	str	r7, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
    2182:	2249      	movs	r2, #73	; 0x49
    2184:	5ca3      	ldrb	r3, [r4, r2]
    2186:	2102      	movs	r1, #2
    2188:	438b      	bics	r3, r1
    218a:	54a3      	strb	r3, [r4, r2]
}
    218c:	b004      	add	sp, #16
    218e:	bc1c      	pop	{r2, r3, r4}
    2190:	4690      	mov	r8, r2
    2192:	4699      	mov	r9, r3
    2194:	46a2      	mov	sl, r4
    2196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2198:	00001415 	.word	0x00001415
    219c:	0001886c 	.word	0x0001886c
    21a0:	0000141d 	.word	0x0000141d
    21a4:	00001a39 	.word	0x00001a39
    21a8:	0000fed9 	.word	0x0000fed9
    21ac:	0000201d 	.word	0x0000201d

000021b0 <lv_obj_align_origo>:
{
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b2:	46de      	mov	lr, fp
    21b4:	4657      	mov	r7, sl
    21b6:	464e      	mov	r6, r9
    21b8:	4645      	mov	r5, r8
    21ba:	b5e0      	push	{r5, r6, r7, lr}
    21bc:	b083      	sub	sp, #12
    21be:	4680      	mov	r8, r0
    21c0:	9101      	str	r1, [sp, #4]
    21c2:	4692      	mov	sl, r2
    21c4:	4699      	mov	r9, r3
    21c6:	ab0c      	add	r3, sp, #48	; 0x30
    21c8:	2200      	movs	r2, #0
    21ca:	5e9b      	ldrsh	r3, [r3, r2]
    21cc:	469b      	mov	fp, r3
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    21ce:	4ba1      	ldr	r3, [pc, #644]	; (2454 <lv_obj_align_origo+0x2a4>)
    21d0:	4798      	blx	r3
    21d2:	2800      	cmp	r0, #0
    21d4:	d105      	bne.n	21e2 <lv_obj_align_origo+0x32>
    21d6:	4642      	mov	r2, r8
    21d8:	2300      	movs	r3, #0
    21da:	489f      	ldr	r0, [pc, #636]	; (2458 <lv_obj_align_origo+0x2a8>)
    21dc:	499f      	ldr	r1, [pc, #636]	; (245c <lv_obj_align_origo+0x2ac>)
    21de:	4788      	blx	r1
    21e0:	e7fe      	b.n	21e0 <lv_obj_align_origo+0x30>
    lv_coord_t new_x = lv_obj_get_x(obj);
    21e2:	4640      	mov	r0, r8
    21e4:	4b9e      	ldr	r3, [pc, #632]	; (2460 <lv_obj_align_origo+0x2b0>)
    21e6:	4798      	blx	r3
    21e8:	0005      	movs	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    21ea:	4640      	mov	r0, r8
    21ec:	4b9d      	ldr	r3, [pc, #628]	; (2464 <lv_obj_align_origo+0x2b4>)
    21ee:	4798      	blx	r3
    21f0:	0004      	movs	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    21f2:	4640      	mov	r0, r8
    21f4:	4b9c      	ldr	r3, [pc, #624]	; (2468 <lv_obj_align_origo+0x2b8>)
    21f6:	4798      	blx	r3
    21f8:	0fc3      	lsrs	r3, r0, #31
    21fa:	181b      	adds	r3, r3, r0
    21fc:	105b      	asrs	r3, r3, #1
    21fe:	b21e      	sxth	r6, r3
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    2200:	4640      	mov	r0, r8
    2202:	4b9a      	ldr	r3, [pc, #616]	; (246c <lv_obj_align_origo+0x2bc>)
    2204:	4798      	blx	r3
    2206:	0fc7      	lsrs	r7, r0, #31
    2208:	183f      	adds	r7, r7, r0
    220a:	107f      	asrs	r7, r7, #1
    220c:	b23f      	sxth	r7, r7
    if(base == NULL) {
    220e:	9b01      	ldr	r3, [sp, #4]
    2210:	2b00      	cmp	r3, #0
    2212:	d00b      	beq.n	222c <lv_obj_align_origo+0x7c>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    2214:	9801      	ldr	r0, [sp, #4]
    2216:	4b8f      	ldr	r3, [pc, #572]	; (2454 <lv_obj_align_origo+0x2a4>)
    2218:	4798      	blx	r3
    221a:	2800      	cmp	r0, #0
    221c:	d00b      	beq.n	2236 <lv_obj_align_origo+0x86>
    switch(align) {
    221e:	4653      	mov	r3, sl
    2220:	2b14      	cmp	r3, #20
    2222:	d81f      	bhi.n	2264 <lv_obj_align_origo+0xb4>
    2224:	009b      	lsls	r3, r3, #2
    2226:	4a92      	ldr	r2, [pc, #584]	; (2470 <lv_obj_align_origo+0x2c0>)
    2228:	58d3      	ldr	r3, [r2, r3]
    222a:	469f      	mov	pc, r3
        base = lv_obj_get_parent(obj);
    222c:	4640      	mov	r0, r8
    222e:	4b91      	ldr	r3, [pc, #580]	; (2474 <lv_obj_align_origo+0x2c4>)
    2230:	4798      	blx	r3
    2232:	9001      	str	r0, [sp, #4]
    2234:	e7ee      	b.n	2214 <lv_obj_align_origo+0x64>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    2236:	9a01      	ldr	r2, [sp, #4]
    2238:	2300      	movs	r3, #0
    223a:	4887      	ldr	r0, [pc, #540]	; (2458 <lv_obj_align_origo+0x2a8>)
    223c:	4987      	ldr	r1, [pc, #540]	; (245c <lv_obj_align_origo+0x2ac>)
    223e:	4788      	blx	r1
    2240:	e7fe      	b.n	2240 <lv_obj_align_origo+0x90>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    2242:	9c01      	ldr	r4, [sp, #4]
    2244:	0020      	movs	r0, r4
    2246:	4b88      	ldr	r3, [pc, #544]	; (2468 <lv_obj_align_origo+0x2b8>)
    2248:	4798      	blx	r3
    224a:	0fc5      	lsrs	r5, r0, #31
    224c:	182d      	adds	r5, r5, r0
    224e:	106d      	asrs	r5, r5, #1
    2250:	1bad      	subs	r5, r5, r6
    2252:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    2254:	0020      	movs	r0, r4
    2256:	4b85      	ldr	r3, [pc, #532]	; (246c <lv_obj_align_origo+0x2bc>)
    2258:	4798      	blx	r3
    225a:	0fc4      	lsrs	r4, r0, #31
    225c:	1824      	adds	r4, r4, r0
    225e:	1064      	asrs	r4, r4, #1
    2260:	1be4      	subs	r4, r4, r7
    2262:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
    2264:	4640      	mov	r0, r8
    2266:	4b83      	ldr	r3, [pc, #524]	; (2474 <lv_obj_align_origo+0x2c4>)
    2268:	4798      	blx	r3
    new_x += x_ofs + base_abs_x;
    226a:	9a01      	ldr	r2, [sp, #4]
    226c:	8a13      	ldrh	r3, [r2, #16]
    226e:	444b      	add	r3, r9
    2270:	195d      	adds	r5, r3, r5
    new_x -= par_abs_x;
    2272:	8a01      	ldrh	r1, [r0, #16]
    2274:	1a69      	subs	r1, r5, r1
    new_y += y_ofs + base_abs_y;
    2276:	0015      	movs	r5, r2
    2278:	8a52      	ldrh	r2, [r2, #18]
    227a:	445a      	add	r2, fp
    227c:	1912      	adds	r2, r2, r4
    new_y -= par_abs_y;
    227e:	8a44      	ldrh	r4, [r0, #18]
    2280:	1b12      	subs	r2, r2, r4
    lv_obj_set_pos(obj, new_x, new_y);
    2282:	b212      	sxth	r2, r2
    2284:	b209      	sxth	r1, r1
    2286:	4640      	mov	r0, r8
    2288:	4b7b      	ldr	r3, [pc, #492]	; (2478 <lv_obj_align_origo+0x2c8>)
    228a:	4798      	blx	r3
    obj->realign.align       = align;
    228c:	2348      	movs	r3, #72	; 0x48
    228e:	4642      	mov	r2, r8
    2290:	4651      	mov	r1, sl
    2292:	54d1      	strb	r1, [r2, r3]
    obj->realign.xofs        = x_ofs;
    2294:	3b04      	subs	r3, #4
    2296:	4649      	mov	r1, r9
    2298:	52d1      	strh	r1, [r2, r3]
    obj->realign.yofs        = y_ofs;
    229a:	3302      	adds	r3, #2
    229c:	4659      	mov	r1, fp
    229e:	52d1      	strh	r1, [r2, r3]
    obj->realign.base        = base;
    22a0:	6415      	str	r5, [r2, #64]	; 0x40
    obj->realign.origo_align = 1;
    22a2:	2249      	movs	r2, #73	; 0x49
    22a4:	4643      	mov	r3, r8
    22a6:	5c9b      	ldrb	r3, [r3, r2]
    22a8:	2102      	movs	r1, #2
    22aa:	430b      	orrs	r3, r1
    22ac:	4641      	mov	r1, r8
    22ae:	548b      	strb	r3, [r1, r2]
}
    22b0:	b003      	add	sp, #12
    22b2:	bc3c      	pop	{r2, r3, r4, r5}
    22b4:	4690      	mov	r8, r2
    22b6:	4699      	mov	r9, r3
    22b8:	46a2      	mov	sl, r4
    22ba:	46ab      	mov	fp, r5
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            new_x = -obj_w_half;
    22be:	4275      	negs	r5, r6
    22c0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    22c2:	427c      	negs	r4, r7
    22c4:	b224      	sxth	r4, r4
            break;
    22c6:	e7cd      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    22c8:	9801      	ldr	r0, [sp, #4]
    22ca:	4b67      	ldr	r3, [pc, #412]	; (2468 <lv_obj_align_origo+0x2b8>)
    22cc:	4798      	blx	r3
    22ce:	0fc5      	lsrs	r5, r0, #31
    22d0:	182d      	adds	r5, r5, r0
    22d2:	106d      	asrs	r5, r5, #1
    22d4:	1bad      	subs	r5, r5, r6
    22d6:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    22d8:	427c      	negs	r4, r7
    22da:	b224      	sxth	r4, r4
            break;
    22dc:	e7c2      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    22de:	9801      	ldr	r0, [sp, #4]
    22e0:	4b61      	ldr	r3, [pc, #388]	; (2468 <lv_obj_align_origo+0x2b8>)
    22e2:	4798      	blx	r3
    22e4:	1b85      	subs	r5, r0, r6
    22e6:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    22e8:	427c      	negs	r4, r7
    22ea:	b224      	sxth	r4, r4
            break;
    22ec:	e7ba      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    22ee:	4275      	negs	r5, r6
    22f0:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    22f2:	9801      	ldr	r0, [sp, #4]
    22f4:	4b5d      	ldr	r3, [pc, #372]	; (246c <lv_obj_align_origo+0x2bc>)
    22f6:	4798      	blx	r3
    22f8:	1bc4      	subs	r4, r0, r7
    22fa:	b224      	sxth	r4, r4
            break;
    22fc:	e7b2      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    22fe:	9c01      	ldr	r4, [sp, #4]
    2300:	0020      	movs	r0, r4
    2302:	4b59      	ldr	r3, [pc, #356]	; (2468 <lv_obj_align_origo+0x2b8>)
    2304:	4798      	blx	r3
    2306:	0fc5      	lsrs	r5, r0, #31
    2308:	182d      	adds	r5, r5, r0
    230a:	106d      	asrs	r5, r5, #1
    230c:	1bad      	subs	r5, r5, r6
    230e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    2310:	0020      	movs	r0, r4
    2312:	4b56      	ldr	r3, [pc, #344]	; (246c <lv_obj_align_origo+0x2bc>)
    2314:	4798      	blx	r3
    2316:	1bc4      	subs	r4, r0, r7
    2318:	b224      	sxth	r4, r4
            break;
    231a:	e7a3      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    231c:	9c01      	ldr	r4, [sp, #4]
    231e:	0020      	movs	r0, r4
    2320:	4b51      	ldr	r3, [pc, #324]	; (2468 <lv_obj_align_origo+0x2b8>)
    2322:	4798      	blx	r3
    2324:	1b85      	subs	r5, r0, r6
    2326:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    2328:	0020      	movs	r0, r4
    232a:	4b50      	ldr	r3, [pc, #320]	; (246c <lv_obj_align_origo+0x2bc>)
    232c:	4798      	blx	r3
    232e:	1bc4      	subs	r4, r0, r7
    2330:	b224      	sxth	r4, r4
            break;
    2332:	e797      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    2334:	4275      	negs	r5, r6
    2336:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    2338:	9801      	ldr	r0, [sp, #4]
    233a:	4b4c      	ldr	r3, [pc, #304]	; (246c <lv_obj_align_origo+0x2bc>)
    233c:	4798      	blx	r3
    233e:	0fc4      	lsrs	r4, r0, #31
    2340:	1824      	adds	r4, r4, r0
    2342:	1064      	asrs	r4, r4, #1
    2344:	1be4      	subs	r4, r4, r7
    2346:	b224      	sxth	r4, r4
            break;
    2348:	e78c      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    234a:	9c01      	ldr	r4, [sp, #4]
    234c:	0020      	movs	r0, r4
    234e:	4b46      	ldr	r3, [pc, #280]	; (2468 <lv_obj_align_origo+0x2b8>)
    2350:	4798      	blx	r3
    2352:	1b85      	subs	r5, r0, r6
    2354:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    2356:	0020      	movs	r0, r4
    2358:	4b44      	ldr	r3, [pc, #272]	; (246c <lv_obj_align_origo+0x2bc>)
    235a:	4798      	blx	r3
    235c:	0fc4      	lsrs	r4, r0, #31
    235e:	1824      	adds	r4, r4, r0
    2360:	1064      	asrs	r4, r4, #1
    2362:	1be4      	subs	r4, r4, r7
    2364:	b224      	sxth	r4, r4
            break;
    2366:	e77d      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    2368:	4275      	negs	r5, r6
    236a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    236c:	427c      	negs	r4, r7
    236e:	b224      	sxth	r4, r4
            break;
    2370:	e778      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    2372:	9801      	ldr	r0, [sp, #4]
    2374:	4b3c      	ldr	r3, [pc, #240]	; (2468 <lv_obj_align_origo+0x2b8>)
    2376:	4798      	blx	r3
    2378:	0fc5      	lsrs	r5, r0, #31
    237a:	182d      	adds	r5, r5, r0
    237c:	106d      	asrs	r5, r5, #1
    237e:	1bad      	subs	r5, r5, r6
    2380:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    2382:	427c      	negs	r4, r7
    2384:	b224      	sxth	r4, r4
            break;
    2386:	e76d      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    2388:	9801      	ldr	r0, [sp, #4]
    238a:	4b37      	ldr	r3, [pc, #220]	; (2468 <lv_obj_align_origo+0x2b8>)
    238c:	4798      	blx	r3
    238e:	1b85      	subs	r5, r0, r6
    2390:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    2392:	427c      	negs	r4, r7
    2394:	b224      	sxth	r4, r4
            break;
    2396:	e765      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    2398:	4275      	negs	r5, r6
    239a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    239c:	9801      	ldr	r0, [sp, #4]
    239e:	4b33      	ldr	r3, [pc, #204]	; (246c <lv_obj_align_origo+0x2bc>)
    23a0:	4798      	blx	r3
    23a2:	1bc4      	subs	r4, r0, r7
    23a4:	b224      	sxth	r4, r4
            break;
    23a6:	e75d      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    23a8:	9c01      	ldr	r4, [sp, #4]
    23aa:	0020      	movs	r0, r4
    23ac:	4b2e      	ldr	r3, [pc, #184]	; (2468 <lv_obj_align_origo+0x2b8>)
    23ae:	4798      	blx	r3
    23b0:	0fc5      	lsrs	r5, r0, #31
    23b2:	182d      	adds	r5, r5, r0
    23b4:	106d      	asrs	r5, r5, #1
    23b6:	1bad      	subs	r5, r5, r6
    23b8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    23ba:	0020      	movs	r0, r4
    23bc:	4b2b      	ldr	r3, [pc, #172]	; (246c <lv_obj_align_origo+0x2bc>)
    23be:	4798      	blx	r3
    23c0:	1bc4      	subs	r4, r0, r7
    23c2:	b224      	sxth	r4, r4
            break;
    23c4:	e74e      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    23c6:	9c01      	ldr	r4, [sp, #4]
    23c8:	0020      	movs	r0, r4
    23ca:	4b27      	ldr	r3, [pc, #156]	; (2468 <lv_obj_align_origo+0x2b8>)
    23cc:	4798      	blx	r3
    23ce:	1b85      	subs	r5, r0, r6
    23d0:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    23d2:	0020      	movs	r0, r4
    23d4:	4b25      	ldr	r3, [pc, #148]	; (246c <lv_obj_align_origo+0x2bc>)
    23d6:	4798      	blx	r3
    23d8:	1bc4      	subs	r4, r0, r7
    23da:	b224      	sxth	r4, r4
            break;
    23dc:	e742      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    23de:	4275      	negs	r5, r6
    23e0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    23e2:	427c      	negs	r4, r7
    23e4:	b224      	sxth	r4, r4
            break;
    23e6:	e73d      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    23e8:	4275      	negs	r5, r6
    23ea:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    23ec:	9801      	ldr	r0, [sp, #4]
    23ee:	4b1f      	ldr	r3, [pc, #124]	; (246c <lv_obj_align_origo+0x2bc>)
    23f0:	4798      	blx	r3
    23f2:	0fc4      	lsrs	r4, r0, #31
    23f4:	1824      	adds	r4, r4, r0
    23f6:	1064      	asrs	r4, r4, #1
    23f8:	1be4      	subs	r4, r4, r7
    23fa:	b224      	sxth	r4, r4
            break;
    23fc:	e732      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = -obj_w_half;
    23fe:	4275      	negs	r5, r6
    2400:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    2402:	9801      	ldr	r0, [sp, #4]
    2404:	4b19      	ldr	r3, [pc, #100]	; (246c <lv_obj_align_origo+0x2bc>)
    2406:	4798      	blx	r3
    2408:	1bc4      	subs	r4, r0, r7
    240a:	b224      	sxth	r4, r4
            break;
    240c:	e72a      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    240e:	9801      	ldr	r0, [sp, #4]
    2410:	4b15      	ldr	r3, [pc, #84]	; (2468 <lv_obj_align_origo+0x2b8>)
    2412:	4798      	blx	r3
    2414:	1b85      	subs	r5, r0, r6
    2416:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    2418:	427c      	negs	r4, r7
    241a:	b224      	sxth	r4, r4
            break;
    241c:	e722      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    241e:	9c01      	ldr	r4, [sp, #4]
    2420:	0020      	movs	r0, r4
    2422:	4b11      	ldr	r3, [pc, #68]	; (2468 <lv_obj_align_origo+0x2b8>)
    2424:	4798      	blx	r3
    2426:	1b85      	subs	r5, r0, r6
    2428:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    242a:	0020      	movs	r0, r4
    242c:	4b0f      	ldr	r3, [pc, #60]	; (246c <lv_obj_align_origo+0x2bc>)
    242e:	4798      	blx	r3
    2430:	0fc4      	lsrs	r4, r0, #31
    2432:	1824      	adds	r4, r4, r0
    2434:	1064      	asrs	r4, r4, #1
    2436:	1be4      	subs	r4, r4, r7
    2438:	b224      	sxth	r4, r4
            break;
    243a:	e713      	b.n	2264 <lv_obj_align_origo+0xb4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    243c:	9c01      	ldr	r4, [sp, #4]
    243e:	0020      	movs	r0, r4
    2440:	4b09      	ldr	r3, [pc, #36]	; (2468 <lv_obj_align_origo+0x2b8>)
    2442:	4798      	blx	r3
    2444:	1b85      	subs	r5, r0, r6
    2446:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    2448:	0020      	movs	r0, r4
    244a:	4b08      	ldr	r3, [pc, #32]	; (246c <lv_obj_align_origo+0x2bc>)
    244c:	4798      	blx	r3
    244e:	1bc4      	subs	r4, r0, r7
    2450:	b224      	sxth	r4, r4
            break;
    2452:	e707      	b.n	2264 <lv_obj_align_origo+0xb4>
    2454:	00001415 	.word	0x00001415
    2458:	0001886c 	.word	0x0001886c
    245c:	0000141d 	.word	0x0000141d
    2460:	00001ba9 	.word	0x00001ba9
    2464:	00001bed 	.word	0x00001bed
    2468:	00001c31 	.word	0x00001c31
    246c:	00001c61 	.word	0x00001c61
    2470:	00018814 	.word	0x00018814
    2474:	00001a39 	.word	0x00001a39
    2478:	0000201d 	.word	0x0000201d

0000247c <lv_obj_realign>:
{
    247c:	b510      	push	{r4, lr}
    247e:	b082      	sub	sp, #8
    2480:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2482:	4b13      	ldr	r3, [pc, #76]	; (24d0 <lv_obj_realign+0x54>)
    2484:	4798      	blx	r3
    2486:	2800      	cmp	r0, #0
    2488:	d010      	beq.n	24ac <lv_obj_realign+0x30>
    if(obj->realign.origo_align)
    248a:	2349      	movs	r3, #73	; 0x49
    248c:	5ce3      	ldrb	r3, [r4, r3]
    248e:	079b      	lsls	r3, r3, #30
    2490:	d512      	bpl.n	24b8 <lv_obj_realign+0x3c>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    2492:	2344      	movs	r3, #68	; 0x44
    2494:	5ee3      	ldrsh	r3, [r4, r3]
    2496:	2248      	movs	r2, #72	; 0x48
    2498:	5ca2      	ldrb	r2, [r4, r2]
    249a:	2146      	movs	r1, #70	; 0x46
    249c:	5e61      	ldrsh	r1, [r4, r1]
    249e:	9100      	str	r1, [sp, #0]
    24a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    24a2:	0020      	movs	r0, r4
    24a4:	4c0b      	ldr	r4, [pc, #44]	; (24d4 <lv_obj_realign+0x58>)
    24a6:	47a0      	blx	r4
}
    24a8:	b002      	add	sp, #8
    24aa:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    24ac:	0022      	movs	r2, r4
    24ae:	2300      	movs	r3, #0
    24b0:	4809      	ldr	r0, [pc, #36]	; (24d8 <lv_obj_realign+0x5c>)
    24b2:	490a      	ldr	r1, [pc, #40]	; (24dc <lv_obj_realign+0x60>)
    24b4:	4788      	blx	r1
    24b6:	e7fe      	b.n	24b6 <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    24b8:	2344      	movs	r3, #68	; 0x44
    24ba:	5ee3      	ldrsh	r3, [r4, r3]
    24bc:	2248      	movs	r2, #72	; 0x48
    24be:	5ca2      	ldrb	r2, [r4, r2]
    24c0:	2146      	movs	r1, #70	; 0x46
    24c2:	5e61      	ldrsh	r1, [r4, r1]
    24c4:	9100      	str	r1, [sp, #0]
    24c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    24c8:	0020      	movs	r0, r4
    24ca:	4c05      	ldr	r4, [pc, #20]	; (24e0 <lv_obj_realign+0x64>)
    24cc:	47a0      	blx	r4
}
    24ce:	e7eb      	b.n	24a8 <lv_obj_realign+0x2c>
    24d0:	00001415 	.word	0x00001415
    24d4:	000021b1 	.word	0x000021b1
    24d8:	0001886c 	.word	0x0001886c
    24dc:	0000141d 	.word	0x0000141d
    24e0:	000020e1 	.word	0x000020e1

000024e4 <refresh_children_style>:
{
    24e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24e6:	0006      	movs	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    24e8:	2100      	movs	r1, #0
    24ea:	4b0c      	ldr	r3, [pc, #48]	; (251c <refresh_children_style+0x38>)
    24ec:	4798      	blx	r3
    24ee:	1e04      	subs	r4, r0, #0
    while(child != NULL) {
    24f0:	d012      	beq.n	2518 <refresh_children_style+0x34>
        lv_obj_invalidate(child);
    24f2:	4d0b      	ldr	r5, [pc, #44]	; (2520 <refresh_children_style+0x3c>)
        child = lv_obj_get_child(obj, child);
    24f4:	4f09      	ldr	r7, [pc, #36]	; (251c <refresh_children_style+0x38>)
        lv_obj_invalidate(child);
    24f6:	0020      	movs	r0, r4
    24f8:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    24fa:	2200      	movs	r2, #0
    24fc:	2104      	movs	r1, #4
    24fe:	0020      	movs	r0, r4
    2500:	69e3      	ldr	r3, [r4, #28]
    2502:	4798      	blx	r3
        lv_obj_invalidate(child);
    2504:	0020      	movs	r0, r4
    2506:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
    2508:	0020      	movs	r0, r4
    250a:	f7ff ffeb 	bl	24e4 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
    250e:	0021      	movs	r1, r4
    2510:	0030      	movs	r0, r6
    2512:	47b8      	blx	r7
    2514:	1e04      	subs	r4, r0, #0
    while(child != NULL) {
    2516:	d1ee      	bne.n	24f6 <refresh_children_style+0x12>
}
    2518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	00001b29 	.word	0x00001b29
    2520:	00001f49 	.word	0x00001f49

00002524 <lv_obj_refresh_style>:
{
    2524:	b570      	push	{r4, r5, r6, lr}
    2526:	0005      	movs	r5, r0
    2528:	000c      	movs	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    252a:	4b31      	ldr	r3, [pc, #196]	; (25f0 <lv_obj_refresh_style+0xcc>)
    252c:	4798      	blx	r3
    252e:	2800      	cmp	r0, #0
    2530:	d013      	beq.n	255a <lv_obj_refresh_style+0x36>
    switch(prop) {
    2532:	2c71      	cmp	r4, #113	; 0x71
    2534:	d83e      	bhi.n	25b4 <lv_obj_refresh_style+0x90>
    2536:	2c70      	cmp	r4, #112	; 0x70
    2538:	d21b      	bcs.n	2572 <lv_obj_refresh_style+0x4e>
    253a:	2c41      	cmp	r4, #65	; 0x41
    253c:	d813      	bhi.n	2566 <lv_obj_refresh_style+0x42>
    253e:	2c40      	cmp	r4, #64	; 0x40
    2540:	d217      	bcs.n	2572 <lv_obj_refresh_style+0x4e>
    2542:	2c02      	cmp	r4, #2
    2544:	d305      	bcc.n	2552 <lv_obj_refresh_style+0x2e>
    2546:	2c07      	cmp	r4, #7
    2548:	d913      	bls.n	2572 <lv_obj_refresh_style+0x4e>
    254a:	0023      	movs	r3, r4
    254c:	3b10      	subs	r3, #16
    254e:	2b08      	cmp	r3, #8
    2550:	d90f      	bls.n	2572 <lv_obj_refresh_style+0x4e>
        lv_obj_invalidate(obj);
    2552:	0028      	movs	r0, r5
    2554:	4b27      	ldr	r3, [pc, #156]	; (25f4 <lv_obj_refresh_style+0xd0>)
    2556:	4798      	blx	r3
}
    2558:	e028      	b.n	25ac <lv_obj_refresh_style+0x88>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    255a:	002a      	movs	r2, r5
    255c:	2300      	movs	r3, #0
    255e:	4826      	ldr	r0, [pc, #152]	; (25f8 <lv_obj_refresh_style+0xd4>)
    2560:	4926      	ldr	r1, [pc, #152]	; (25fc <lv_obj_refresh_style+0xd8>)
    2562:	4788      	blx	r1
    2564:	e7fe      	b.n	2564 <lv_obj_refresh_style+0x40>
    switch(prop) {
    2566:	2c53      	cmp	r4, #83	; 0x53
    2568:	d821      	bhi.n	25ae <lv_obj_refresh_style+0x8a>
    256a:	2c50      	cmp	r4, #80	; 0x50
    256c:	d201      	bcs.n	2572 <lv_obj_refresh_style+0x4e>
    256e:	2c4c      	cmp	r4, #76	; 0x4c
    2570:	d1ef      	bne.n	2552 <lv_obj_refresh_style+0x2e>
        lv_obj_invalidate(obj);
    2572:	0028      	movs	r0, r5
    2574:	4b1f      	ldr	r3, [pc, #124]	; (25f4 <lv_obj_refresh_style+0xd0>)
    2576:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    2578:	2200      	movs	r2, #0
    257a:	2104      	movs	r1, #4
    257c:	0028      	movs	r0, r5
    257e:	69eb      	ldr	r3, [r5, #28]
    2580:	4798      	blx	r3
        switch(prop) {
    2582:	2c15      	cmp	r4, #21
    2584:	d30a      	bcc.n	259c <lv_obj_refresh_style+0x78>
    2586:	2c18      	cmp	r4, #24
    2588:	d901      	bls.n	258e <lv_obj_refresh_style+0x6a>
    258a:	2cff      	cmp	r4, #255	; 0xff
    258c:	d106      	bne.n	259c <lv_obj_refresh_style+0x78>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
    258e:	6828      	ldr	r0, [r5, #0]
    2590:	2800      	cmp	r0, #0
    2592:	d003      	beq.n	259c <lv_obj_refresh_style+0x78>
    2594:	69c3      	ldr	r3, [r0, #28]
    2596:	2200      	movs	r2, #0
    2598:	2101      	movs	r1, #1
    259a:	4798      	blx	r3
        lv_obj_invalidate(obj);
    259c:	0028      	movs	r0, r5
    259e:	4b15      	ldr	r3, [pc, #84]	; (25f4 <lv_obj_refresh_style+0xd0>)
    25a0:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    25a2:	2cff      	cmp	r4, #255	; 0xff
    25a4:	d020      	beq.n	25e8 <lv_obj_refresh_style+0xc4>
    25a6:	b224      	sxth	r4, r4
    25a8:	2c00      	cmp	r4, #0
    25aa:	db1d      	blt.n	25e8 <lv_obj_refresh_style+0xc4>
}
    25ac:	bd70      	pop	{r4, r5, r6, pc}
    switch(prop) {
    25ae:	2c5c      	cmp	r4, #92	; 0x5c
    25b0:	d1cf      	bne.n	2552 <lv_obj_refresh_style+0x2e>
    25b2:	e7de      	b.n	2572 <lv_obj_refresh_style+0x4e>
    25b4:	2c7f      	cmp	r4, #127	; 0x7f
    25b6:	d90a      	bls.n	25ce <lv_obj_refresh_style+0xaa>
    25b8:	4b11      	ldr	r3, [pc, #68]	; (2600 <lv_obj_refresh_style+0xdc>)
    25ba:	429c      	cmp	r4, r3
    25bc:	d810      	bhi.n	25e0 <lv_obj_refresh_style+0xbc>
    25be:	4b11      	ldr	r3, [pc, #68]	; (2604 <lv_obj_refresh_style+0xe0>)
    25c0:	429c      	cmp	r4, r3
    25c2:	d2d6      	bcs.n	2572 <lv_obj_refresh_style+0x4e>
    25c4:	2c90      	cmp	r4, #144	; 0x90
    25c6:	d0d4      	beq.n	2572 <lv_obj_refresh_style+0x4e>
    25c8:	2cff      	cmp	r4, #255	; 0xff
    25ca:	d1c2      	bne.n	2552 <lv_obj_refresh_style+0x2e>
    25cc:	e7d1      	b.n	2572 <lv_obj_refresh_style+0x4e>
    25ce:	2c7e      	cmp	r4, #126	; 0x7e
    25d0:	d2cf      	bcs.n	2572 <lv_obj_refresh_style+0x4e>
    25d2:	2c73      	cmp	r4, #115	; 0x73
    25d4:	d3bd      	bcc.n	2552 <lv_obj_refresh_style+0x2e>
    25d6:	2c75      	cmp	r4, #117	; 0x75
    25d8:	d9cb      	bls.n	2572 <lv_obj_refresh_style+0x4e>
    25da:	2c7c      	cmp	r4, #124	; 0x7c
    25dc:	d1b9      	bne.n	2552 <lv_obj_refresh_style+0x2e>
    25de:	e7c8      	b.n	2572 <lv_obj_refresh_style+0x4e>
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <lv_obj_refresh_style+0xe4>)
    25e2:	429c      	cmp	r4, r3
    25e4:	d1b5      	bne.n	2552 <lv_obj_refresh_style+0x2e>
    25e6:	e7c4      	b.n	2572 <lv_obj_refresh_style+0x4e>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    25e8:	0028      	movs	r0, r5
    25ea:	4b08      	ldr	r3, [pc, #32]	; (260c <lv_obj_refresh_style+0xe8>)
    25ec:	4798      	blx	r3
    25ee:	e7dd      	b.n	25ac <lv_obj_refresh_style+0x88>
    25f0:	00001415 	.word	0x00001415
    25f4:	00001f49 	.word	0x00001f49
    25f8:	0001886c 	.word	0x0001886c
    25fc:	0000141d 	.word	0x0000141d
    2600:	00008081 	.word	0x00008081
    2604:	00008080 	.word	0x00008080
    2608:	0000808e 	.word	0x0000808e
    260c:	000024e5 	.word	0x000024e5

00002610 <lv_obj_reset_style_list>:
{
    2610:	b510      	push	{r4, lr}
    2612:	0004      	movs	r4, r0
    lv_obj_clean_style_list(obj, part);
    2614:	4b03      	ldr	r3, [pc, #12]	; (2624 <lv_obj_reset_style_list+0x14>)
    2616:	4798      	blx	r3
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    2618:	21ff      	movs	r1, #255	; 0xff
    261a:	0020      	movs	r0, r4
    261c:	4b02      	ldr	r3, [pc, #8]	; (2628 <lv_obj_reset_style_list+0x18>)
    261e:	4798      	blx	r3
}
    2620:	bd10      	pop	{r4, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	00001d6d 	.word	0x00001d6d
    2628:	00002525 	.word	0x00002525

0000262c <report_style_mod_core>:
{
    262c:	b5f0      	push	{r4, r5, r6, r7, lr}
    262e:	46c6      	mov	lr, r8
    2630:	b500      	push	{lr}
    2632:	b082      	sub	sp, #8
    2634:	0007      	movs	r7, r0
    2636:	9101      	str	r1, [sp, #4]
    for(part_sub = 0; part_sub != _LV_OBJ_PART_REAL_LAST; part_sub++) {
    2638:	2500      	movs	r5, #0
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    263a:	4b21      	ldr	r3, [pc, #132]	; (26c0 <report_style_mod_core+0x94>)
    263c:	4698      	mov	r8, r3
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    263e:	2300      	movs	r3, #0
    2640:	9300      	str	r3, [sp, #0]
    2642:	e01c      	b.n	267e <report_style_mod_core+0x52>
    if(list->has_trans && list->skip_trans) id++;
    2644:	1c5a      	adds	r2, r3, #1
    2646:	b2d2      	uxtb	r2, r2
    2648:	e00a      	b.n	2660 <report_style_mod_core+0x34>
            if(class == style || style == NULL) {
    264a:	42a7      	cmp	r7, r4
    264c:	d00f      	beq.n	266e <report_style_mod_core+0x42>
    264e:	2f00      	cmp	r7, #0
    2650:	d00d      	beq.n	266e <report_style_mod_core+0x42>
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    2652:	3301      	adds	r3, #1
    2654:	b2db      	uxtb	r3, r3
    2656:	428b      	cmp	r3, r1
    2658:	d00d      	beq.n	2676 <report_style_mod_core+0x4a>
    265a:	001a      	movs	r2, r3
    265c:	2806      	cmp	r0, #6
    265e:	d0f1      	beq.n	2644 <report_style_mod_core+0x18>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    2660:	9c00      	ldr	r4, [sp, #0]
    2662:	428a      	cmp	r2, r1
    2664:	d2f1      	bcs.n	264a <report_style_mod_core+0x1e>
    return list->style_list[id];
    2666:	0092      	lsls	r2, r2, #2
    2668:	6834      	ldr	r4, [r6, #0]
    266a:	5914      	ldr	r4, [r2, r4]
    266c:	e7ed      	b.n	264a <report_style_mod_core+0x1e>
                lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    266e:	21ff      	movs	r1, #255	; 0xff
    2670:	9801      	ldr	r0, [sp, #4]
    2672:	4b14      	ldr	r3, [pc, #80]	; (26c4 <report_style_mod_core+0x98>)
    2674:	4798      	blx	r3
    for(part_sub = 0; part_sub != _LV_OBJ_PART_REAL_LAST; part_sub++) {
    2676:	3501      	adds	r5, #1
    2678:	b2ed      	uxtb	r5, r5
    267a:	2d40      	cmp	r5, #64	; 0x40
    267c:	d00c      	beq.n	2698 <report_style_mod_core+0x6c>
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    267e:	0029      	movs	r1, r5
    2680:	9801      	ldr	r0, [sp, #4]
    2682:	47c0      	blx	r8
    2684:	1e06      	subs	r6, r0, #0
        if(dsc == NULL) break;
    2686:	d007      	beq.n	2698 <report_style_mod_core+0x6c>
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    2688:	7901      	ldrb	r1, [r0, #4]
    268a:	2900      	cmp	r1, #0
    268c:	d0f3      	beq.n	2676 <report_style_mod_core+0x4a>
    if(list->has_trans && list->skip_trans) id++;
    268e:	7943      	ldrb	r3, [r0, #5]
    2690:	2006      	movs	r0, #6
    2692:	4018      	ands	r0, r3
    2694:	2300      	movs	r3, #0
    2696:	e7e0      	b.n	265a <report_style_mod_core+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    2698:	2100      	movs	r1, #0
    269a:	9801      	ldr	r0, [sp, #4]
    269c:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <report_style_mod_core+0x9c>)
    269e:	4798      	blx	r3
    26a0:	1e04      	subs	r4, r0, #0
    while(child) {
    26a2:	d009      	beq.n	26b8 <report_style_mod_core+0x8c>
        child = lv_obj_get_child(obj, child);
    26a4:	4e08      	ldr	r6, [pc, #32]	; (26c8 <report_style_mod_core+0x9c>)
        report_style_mod_core(style, child);
    26a6:	0021      	movs	r1, r4
    26a8:	0038      	movs	r0, r7
    26aa:	f7ff ffbf 	bl	262c <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
    26ae:	0021      	movs	r1, r4
    26b0:	9801      	ldr	r0, [sp, #4]
    26b2:	47b0      	blx	r6
    26b4:	1e04      	subs	r4, r0, #0
    while(child) {
    26b6:	d1f6      	bne.n	26a6 <report_style_mod_core+0x7a>
}
    26b8:	b002      	add	sp, #8
    26ba:	bc04      	pop	{r2}
    26bc:	4690      	mov	r8, r2
    26be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26c0:	00001c91 	.word	0x00001c91
    26c4:	00002525 	.word	0x00002525
    26c8:	00001b29 	.word	0x00001b29

000026cc <lv_obj_report_style_mod>:
{
    26cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ce:	46d6      	mov	lr, sl
    26d0:	464f      	mov	r7, r9
    26d2:	b580      	push	{r7, lr}
    26d4:	b083      	sub	sp, #12
    26d6:	9001      	str	r0, [sp, #4]
    lv_disp_t * d = lv_disp_get_next(NULL);
    26d8:	2000      	movs	r0, #0
    26da:	4b11      	ldr	r3, [pc, #68]	; (2720 <lv_obj_report_style_mod+0x54>)
    26dc:	4798      	blx	r3
    26de:	4681      	mov	r9, r0
    while(d) {
    26e0:	2800      	cmp	r0, #0
    26e2:	d017      	beq.n	2714 <lv_obj_report_style_mod+0x48>
        _LV_LL_READ(d->scr_ll, i) {
    26e4:	4b0f      	ldr	r3, [pc, #60]	; (2724 <lv_obj_report_style_mod+0x58>)
    26e6:	469a      	mov	sl, r3
            report_style_mod_core(style, i);
    26e8:	4f0f      	ldr	r7, [pc, #60]	; (2728 <lv_obj_report_style_mod+0x5c>)
        _LV_LL_READ(d->scr_ll, i) {
    26ea:	4e10      	ldr	r6, [pc, #64]	; (272c <lv_obj_report_style_mod+0x60>)
    26ec:	464d      	mov	r5, r9
    26ee:	3530      	adds	r5, #48	; 0x30
    26f0:	0028      	movs	r0, r5
    26f2:	47d0      	blx	sl
    26f4:	1e04      	subs	r4, r0, #0
    26f6:	d007      	beq.n	2708 <lv_obj_report_style_mod+0x3c>
            report_style_mod_core(style, i);
    26f8:	0021      	movs	r1, r4
    26fa:	9801      	ldr	r0, [sp, #4]
    26fc:	47b8      	blx	r7
        _LV_LL_READ(d->scr_ll, i) {
    26fe:	0021      	movs	r1, r4
    2700:	0028      	movs	r0, r5
    2702:	47b0      	blx	r6
    2704:	1e04      	subs	r4, r0, #0
    2706:	d1f7      	bne.n	26f8 <lv_obj_report_style_mod+0x2c>
        d = lv_disp_get_next(d);
    2708:	4648      	mov	r0, r9
    270a:	4b05      	ldr	r3, [pc, #20]	; (2720 <lv_obj_report_style_mod+0x54>)
    270c:	4798      	blx	r3
    270e:	4681      	mov	r9, r0
    while(d) {
    2710:	2800      	cmp	r0, #0
    2712:	d1eb      	bne.n	26ec <lv_obj_report_style_mod+0x20>
}
    2714:	b003      	add	sp, #12
    2716:	bc0c      	pop	{r2, r3}
    2718:	4691      	mov	r9, r2
    271a:	469a      	mov	sl, r3
    271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	0000f67d 	.word	0x0000f67d
    2724:	00010605 	.word	0x00010605
    2728:	0000262d 	.word	0x0000262d
    272c:	0001061d 	.word	0x0001061d

00002730 <trans_anim_cb>:
{
    2730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2732:	0004      	movs	r4, r0
    2734:	000d      	movs	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    2736:	7981      	ldrb	r1, [r0, #6]
    2738:	6800      	ldr	r0, [r0, #0]
    273a:	4b3f      	ldr	r3, [pc, #252]	; (2838 <trans_anim_cb+0x108>)
    273c:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
    273e:	4b3f      	ldr	r3, [pc, #252]	; (283c <trans_anim_cb+0x10c>)
    2740:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
    2742:	88a1      	ldrh	r1, [r4, #4]
    2744:	230f      	movs	r3, #15
    2746:	400b      	ands	r3, r1
    2748:	2b08      	cmp	r3, #8
    274a:	dc19      	bgt.n	2780 <trans_anim_cb+0x50>
        if(v == 0) x = tr->start_value._int;
    274c:	2d00      	cmp	r5, #0
    274e:	d108      	bne.n	2762 <trans_anim_cb+0x32>
    2750:	2308      	movs	r3, #8
    2752:	5ee2      	ldrsh	r2, [r4, r3]
        _lv_style_set_int(style, tr->prop, x);
    2754:	4b3a      	ldr	r3, [pc, #232]	; (2840 <trans_anim_cb+0x110>)
    2756:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->prop);
    2758:	88a1      	ldrh	r1, [r4, #4]
    275a:	6820      	ldr	r0, [r4, #0]
    275c:	4b39      	ldr	r3, [pc, #228]	; (2844 <trans_anim_cb+0x114>)
    275e:	4798      	blx	r3
}
    2760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if(v == 255) x = tr->end_value._int;
    2762:	2dff      	cmp	r5, #255	; 0xff
    2764:	d009      	beq.n	277a <trans_anim_cb+0x4a>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
    2766:	2308      	movs	r3, #8
    2768:	5ee6      	ldrsh	r6, [r4, r3]
    276a:	230c      	movs	r3, #12
    276c:	5ee2      	ldrsh	r2, [r4, r3]
    276e:	1b92      	subs	r2, r2, r6
    2770:	436a      	muls	r2, r5
    2772:	1212      	asrs	r2, r2, #8
    2774:	1992      	adds	r2, r2, r6
    2776:	b212      	sxth	r2, r2
    2778:	e7ec      	b.n	2754 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
    277a:	230c      	movs	r3, #12
    277c:	5ee2      	ldrsh	r2, [r4, r3]
    277e:	e7e9      	b.n	2754 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    2780:	2b0b      	cmp	r3, #11
    2782:	dc3c      	bgt.n	27fe <trans_anim_cb+0xce>
        if(v <= 0) x = tr->start_value._color;
    2784:	2d00      	cmp	r5, #0
    2786:	dd05      	ble.n	2794 <trans_anim_cb+0x64>
        else if(v >= 255) x = tr->end_value._color;
    2788:	2dfe      	cmp	r5, #254	; 0xfe
    278a:	dd05      	ble.n	2798 <trans_anim_cb+0x68>
    278c:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
    278e:	4b2e      	ldr	r3, [pc, #184]	; (2848 <trans_anim_cb+0x118>)
    2790:	4798      	blx	r3
    2792:	e7e1      	b.n	2758 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
    2794:	8922      	ldrh	r2, [r4, #8]
    2796:	e7fa      	b.n	278e <trans_anim_cb+0x5e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    2798:	b2ed      	uxtb	r5, r5
    279a:	22ff      	movs	r2, #255	; 0xff
    279c:	1b52      	subs	r2, r2, r5
    279e:	7b63      	ldrb	r3, [r4, #13]
    27a0:	08db      	lsrs	r3, r3, #3
    27a2:	436b      	muls	r3, r5
    27a4:	7a66      	ldrb	r6, [r4, #9]
    27a6:	08f6      	lsrs	r6, r6, #3
    27a8:	4356      	muls	r6, r2
    27aa:	199e      	adds	r6, r3, r6
    27ac:	0233      	lsls	r3, r6, #8
    27ae:	199b      	adds	r3, r3, r6
    27b0:	01db      	lsls	r3, r3, #7
    27b2:	199b      	adds	r3, r3, r6
    27b4:	011b      	lsls	r3, r3, #4
    27b6:	0edb      	lsrs	r3, r3, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    27b8:	89a7      	ldrh	r7, [r4, #12]
    27ba:	057f      	lsls	r7, r7, #21
    27bc:	0ebf      	lsrs	r7, r7, #26
    27be:	436f      	muls	r7, r5
    27c0:	8926      	ldrh	r6, [r4, #8]
    27c2:	0576      	lsls	r6, r6, #21
    27c4:	0eb6      	lsrs	r6, r6, #26
    27c6:	4356      	muls	r6, r2
    27c8:	19bf      	adds	r7, r7, r6
    27ca:	023e      	lsls	r6, r7, #8
    27cc:	19f6      	adds	r6, r6, r7
    27ce:	01f6      	lsls	r6, r6, #7
    27d0:	19f6      	adds	r6, r6, r7
    27d2:	00f6      	lsls	r6, r6, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    27d4:	7b27      	ldrb	r7, [r4, #12]
    27d6:	06ff      	lsls	r7, r7, #27
    27d8:	0eff      	lsrs	r7, r7, #27
    27da:	437d      	muls	r5, r7
    27dc:	7a27      	ldrb	r7, [r4, #8]
    27de:	06ff      	lsls	r7, r7, #27
    27e0:	0eff      	lsrs	r7, r7, #27
    27e2:	437a      	muls	r2, r7
    27e4:	18ad      	adds	r5, r5, r2
    27e6:	022a      	lsls	r2, r5, #8
    27e8:	1952      	adds	r2, r2, r5
    27ea:	01d2      	lsls	r2, r2, #7
    27ec:	1952      	adds	r2, r2, r5
    27ee:	0112      	lsls	r2, r2, #4
    27f0:	0eb6      	lsrs	r6, r6, #26
    27f2:	0176      	lsls	r6, r6, #5
    27f4:	0ed2      	lsrs	r2, r2, #27
    27f6:	02db      	lsls	r3, r3, #11
    27f8:	4332      	orrs	r2, r6
    27fa:	431a      	orrs	r2, r3
    27fc:	e7c7      	b.n	278e <trans_anim_cb+0x5e>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    27fe:	2b0d      	cmp	r3, #13
    2800:	dc11      	bgt.n	2826 <trans_anim_cb+0xf6>
        if(v <= 0) x = tr->start_value._opa;
    2802:	2d00      	cmp	r5, #0
    2804:	dd05      	ble.n	2812 <trans_anim_cb+0xe2>
        else if(v >= 255) x = tr->end_value._opa;
    2806:	2dfe      	cmp	r5, #254	; 0xfe
    2808:	dd05      	ble.n	2816 <trans_anim_cb+0xe6>
    280a:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
    280c:	4b0f      	ldr	r3, [pc, #60]	; (284c <trans_anim_cb+0x11c>)
    280e:	4798      	blx	r3
    2810:	e7a2      	b.n	2758 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
    2812:	7a22      	ldrb	r2, [r4, #8]
    2814:	e7fa      	b.n	280c <trans_anim_cb+0xdc>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
    2816:	7a22      	ldrb	r2, [r4, #8]
    2818:	7b23      	ldrb	r3, [r4, #12]
    281a:	1a9b      	subs	r3, r3, r2
    281c:	435d      	muls	r5, r3
    281e:	122d      	asrs	r5, r5, #8
    2820:	1952      	adds	r2, r2, r5
    2822:	b2d2      	uxtb	r2, r2
    2824:	e7f2      	b.n	280c <trans_anim_cb+0xdc>
        if(v < 128) x = tr->start_value._ptr;
    2826:	2d7f      	cmp	r5, #127	; 0x7f
    2828:	dc03      	bgt.n	2832 <trans_anim_cb+0x102>
    282a:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
    282c:	4b08      	ldr	r3, [pc, #32]	; (2850 <trans_anim_cb+0x120>)
    282e:	4798      	blx	r3
    2830:	e792      	b.n	2758 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
    2832:	68e2      	ldr	r2, [r4, #12]
    2834:	e7fa      	b.n	282c <trans_anim_cb+0xfc>
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	00001c91 	.word	0x00001c91
    283c:	000055b9 	.word	0x000055b9
    2840:	00004c8d 	.word	0x00004c8d
    2844:	00002525 	.word	0x00002525
    2848:	00004ded 	.word	0x00004ded
    284c:	00004f4d 	.word	0x00004f4d
    2850:	000050a1 	.word	0x000050a1

00002854 <lv_obj_get_base_dir>:
{
    2854:	b510      	push	{r4, lr}
    2856:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2858:	4b05      	ldr	r3, [pc, #20]	; (2870 <lv_obj_get_base_dir+0x1c>)
    285a:	4798      	blx	r3
    285c:	2800      	cmp	r0, #0
    285e:	d001      	beq.n	2864 <lv_obj_get_base_dir+0x10>
}
    2860:	2000      	movs	r0, #0
    2862:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2864:	0022      	movs	r2, r4
    2866:	2300      	movs	r3, #0
    2868:	4802      	ldr	r0, [pc, #8]	; (2874 <lv_obj_get_base_dir+0x20>)
    286a:	4903      	ldr	r1, [pc, #12]	; (2878 <lv_obj_get_base_dir+0x24>)
    286c:	4788      	blx	r1
    286e:	e7fe      	b.n	286e <lv_obj_get_base_dir+0x1a>
    2870:	00001415 	.word	0x00001415
    2874:	0001886c 	.word	0x0001886c
    2878:	0000141d 	.word	0x0000141d

0000287c <lv_obj_create>:
{
    287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    287e:	46de      	mov	lr, fp
    2880:	4657      	mov	r7, sl
    2882:	464e      	mov	r6, r9
    2884:	4645      	mov	r5, r8
    2886:	b5e0      	push	{r5, r6, r7, lr}
    2888:	4682      	mov	sl, r0
    288a:	000d      	movs	r5, r1
    if(parent == NULL) {
    288c:	2800      	cmp	r0, #0
    288e:	d00a      	beq.n	28a6 <lv_obj_create+0x2a>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    2890:	4be9      	ldr	r3, [pc, #932]	; (2c38 <lv_obj_create+0x3bc>)
    2892:	4798      	blx	r3
    2894:	2800      	cmp	r0, #0
    2896:	d000      	beq.n	289a <lv_obj_create+0x1e>
    2898:	e13a      	b.n	2b10 <lv_obj_create+0x294>
    289a:	4652      	mov	r2, sl
    289c:	2300      	movs	r3, #0
    289e:	48e7      	ldr	r0, [pc, #924]	; (2c3c <lv_obj_create+0x3c0>)
    28a0:	49e7      	ldr	r1, [pc, #924]	; (2c40 <lv_obj_create+0x3c4>)
    28a2:	4788      	blx	r1
    28a4:	e7fe      	b.n	28a4 <lv_obj_create+0x28>
        lv_disp_t * disp = lv_disp_get_default();
    28a6:	4be7      	ldr	r3, [pc, #924]	; (2c44 <lv_obj_create+0x3c8>)
    28a8:	4798      	blx	r3
        if(!disp) {
    28aa:	2800      	cmp	r0, #0
    28ac:	d100      	bne.n	28b0 <lv_obj_create+0x34>
    28ae:	e204      	b.n	2cba <lv_obj_create+0x43e>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
    28b0:	3030      	adds	r0, #48	; 0x30
    28b2:	4be5      	ldr	r3, [pc, #916]	; (2c48 <lv_obj_create+0x3cc>)
    28b4:	4798      	blx	r3
    28b6:	0004      	movs	r4, r0
        LV_ASSERT_MEM(new_obj);
    28b8:	4bdf      	ldr	r3, [pc, #892]	; (2c38 <lv_obj_create+0x3bc>)
    28ba:	4798      	blx	r3
    28bc:	2800      	cmp	r0, #0
    28be:	d105      	bne.n	28cc <lv_obj_create+0x50>
    28c0:	0022      	movs	r2, r4
    28c2:	2300      	movs	r3, #0
    28c4:	48e1      	ldr	r0, [pc, #900]	; (2c4c <lv_obj_create+0x3d0>)
    28c6:	49de      	ldr	r1, [pc, #888]	; (2c40 <lv_obj_create+0x3c4>)
    28c8:	4788      	blx	r1
    28ca:	e7fe      	b.n	28ca <lv_obj_create+0x4e>
        if(new_obj == NULL) return NULL;
    28cc:	2c00      	cmp	r4, #0
    28ce:	d100      	bne.n	28d2 <lv_obj_create+0x56>
    28d0:	e1ec      	b.n	2cac <lv_obj_create+0x430>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    28d2:	214c      	movs	r1, #76	; 0x4c
    28d4:	0020      	movs	r0, r4
    28d6:	4bde      	ldr	r3, [pc, #888]	; (2c50 <lv_obj_create+0x3d4>)
    28d8:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    28da:	0022      	movs	r2, r4
    28dc:	3234      	adds	r2, #52	; 0x34
    28de:	7853      	ldrb	r3, [r2, #1]
    28e0:	2130      	movs	r1, #48	; 0x30
    28e2:	438b      	bics	r3, r1
    28e4:	7053      	strb	r3, [r2, #1]
        new_obj->signal_cb = lv_obj_signal;
    28e6:	4bdb      	ldr	r3, [pc, #876]	; (2c54 <lv_obj_create+0x3d8>)
    28e8:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    28ea:	4bdb      	ldr	r3, [pc, #876]	; (2c58 <lv_obj_create+0x3dc>)
    28ec:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    28ee:	2300      	movs	r3, #0
    28f0:	61a3      	str	r3, [r4, #24]
        new_obj->coords.x1    = 0;
    28f2:	8223      	strh	r3, [r4, #16]
        new_obj->coords.y1    = 0;
    28f4:	8263      	strh	r3, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    28f6:	2000      	movs	r0, #0
    28f8:	4bd8      	ldr	r3, [pc, #864]	; (2c5c <lv_obj_create+0x3e0>)
    28fa:	4798      	blx	r3
    28fc:	3801      	subs	r0, #1
    28fe:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    2900:	2000      	movs	r0, #0
    2902:	4bd7      	ldr	r3, [pc, #860]	; (2c60 <lv_obj_create+0x3e4>)
    2904:	4798      	blx	r3
    2906:	3801      	subs	r0, #1
    2908:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    290a:	1d20      	adds	r0, r4, #4
    290c:	214c      	movs	r1, #76	; 0x4c
    290e:	4bd5      	ldr	r3, [pc, #852]	; (2c64 <lv_obj_create+0x3e8>)
    2910:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
    2912:	2100      	movs	r1, #0
    2914:	2000      	movs	r0, #0
    2916:	8661      	strh	r1, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
    2918:	2300      	movs	r3, #0
    291a:	2230      	movs	r2, #48	; 0x30
    291c:	54a0      	strb	r0, [r4, r2]
    new_obj->ext_click_pad_ver = 0;
    291e:	3201      	adds	r2, #1
    2920:	54a3      	strb	r3, [r4, r2]
    new_obj->realign.align        = LV_ALIGN_CENTER;
    2922:	3217      	adds	r2, #23
    2924:	54a3      	strb	r3, [r4, r2]
    new_obj->realign.xofs         = 0;
    2926:	2344      	movs	r3, #68	; 0x44
    2928:	52e1      	strh	r1, [r4, r3]
    new_obj->realign.yofs         = 0;
    292a:	3302      	adds	r3, #2
    292c:	52e1      	strh	r1, [r4, r3]
    new_obj->realign.base         = NULL;
    292e:	6421      	str	r1, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
    2930:	3201      	adds	r2, #1
    2932:	5ca3      	ldrb	r3, [r4, r2]
    2934:	2701      	movs	r7, #1
    2936:	43bb      	bics	r3, r7
    2938:	54a3      	strb	r3, [r4, r2]
    new_obj->group_p = NULL;
    293a:	63a1      	str	r1, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
    293c:	2334      	movs	r3, #52	; 0x34
    293e:	4698      	mov	r8, r3
    2940:	5ce2      	ldrb	r2, [r4, r3]
    new_obj->click        = 1;
    2942:	334b      	adds	r3, #75	; 0x4b
    2944:	4013      	ands	r3, r2
    2946:	2201      	movs	r2, #1
    2948:	4694      	mov	ip, r2
    294a:	4662      	mov	r2, ip
    294c:	4313      	orrs	r3, r2
    new_obj->drag_throw   = 0;
    294e:	227d      	movs	r2, #125	; 0x7d
    2950:	4013      	ands	r3, r2
    new_obj->drag_parent  = 0;
    2952:	3a79      	subs	r2, #121	; 0x79
    2954:	4393      	bics	r3, r2
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
    2956:	0027      	movs	r7, r4
    2958:	3734      	adds	r7, #52	; 0x34
    295a:	787a      	ldrb	r2, [r7, #1]
    295c:	260e      	movs	r6, #14
    295e:	43b2      	bics	r2, r6
    2960:	2606      	movs	r6, #6
    2962:	46b1      	mov	r9, r6
    2964:	464e      	mov	r6, r9
    2966:	4332      	orrs	r2, r6
    new_obj->hidden       = 0;
    2968:	2608      	movs	r6, #8
    296a:	43b3      	bics	r3, r6
    new_obj->top          = 0;
    296c:	3608      	adds	r6, #8
    296e:	43b3      	bics	r3, r6
    new_obj->protect      = LV_PROTECT_NONE;
    2970:	362c      	adds	r6, #44	; 0x2c
    2972:	55a0      	strb	r0, [r4, r6]
    new_obj->parent_event = 0;
    2974:	3e1c      	subs	r6, #28
    2976:	43b3      	bics	r3, r6
    2978:	3620      	adds	r6, #32
    297a:	43b3      	bics	r3, r6
    297c:	4646      	mov	r6, r8
    297e:	55a3      	strb	r3, [r4, r6]
    new_obj->gesture_parent = 1;
    2980:	4663      	mov	r3, ip
    2982:	431a      	orrs	r2, r3
    2984:	707a      	strb	r2, [r7, #1]
    new_obj->state = LV_STATE_DEFAULT;
    2986:	233d      	movs	r3, #61	; 0x3d
    2988:	54e0      	strb	r0, [r4, r3]
    new_obj->ext_attr = NULL;
    298a:	6261      	str	r1, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
    298c:	3f0c      	subs	r7, #12
    298e:	0038      	movs	r0, r7
    2990:	4bb5      	ldr	r3, [pc, #724]	; (2c68 <lv_obj_create+0x3ec>)
    2992:	4798      	blx	r3
    if(copy == NULL) {
    2994:	2d00      	cmp	r5, #0
    2996:	d100      	bne.n	299a <lv_obj_create+0x11e>
    2998:	e140      	b.n	2c1c <lv_obj_create+0x3a0>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
    299a:	0029      	movs	r1, r5
    299c:	3128      	adds	r1, #40	; 0x28
    299e:	0038      	movs	r0, r7
    29a0:	4bb2      	ldr	r3, [pc, #712]	; (2c6c <lv_obj_create+0x3f0>)
    29a2:	4798      	blx	r3
    29a4:	0029      	movs	r1, r5
    29a6:	3118      	adds	r1, #24
    uint8_t * d8 = (uint8_t *)dst;
    29a8:	0022      	movs	r2, r4
    29aa:	3210      	adds	r2, #16
    const uint8_t * s8 = (const uint8_t *)src;
    29ac:	002b      	movs	r3, r5
    29ae:	3310      	adds	r3, #16
        *d8 = *s8;
    29b0:	7818      	ldrb	r0, [r3, #0]
    29b2:	7010      	strb	r0, [r2, #0]
        d8++;
    29b4:	3201      	adds	r2, #1
        s8++;
    29b6:	3301      	adds	r3, #1
    while(len) {
    29b8:	428b      	cmp	r3, r1
    29ba:	d1f9      	bne.n	29b0 <lv_obj_create+0x134>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    29bc:	2232      	movs	r2, #50	; 0x32
    29be:	5eab      	ldrsh	r3, [r5, r2]
    29c0:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
    29c2:	2330      	movs	r3, #48	; 0x30
    29c4:	5cea      	ldrb	r2, [r5, r3]
    29c6:	54e2      	strb	r2, [r4, r3]
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
    29c8:	3301      	adds	r3, #1
    29ca:	5cea      	ldrb	r2, [r5, r3]
    29cc:	54e2      	strb	r2, [r4, r3]
        new_obj->realign.align        = copy->realign.align;
    29ce:	3317      	adds	r3, #23
    29d0:	5cea      	ldrb	r2, [r5, r3]
    29d2:	54e2      	strb	r2, [r4, r3]
        new_obj->realign.xofs         = copy->realign.xofs;
    29d4:	3b04      	subs	r3, #4
    29d6:	5eea      	ldrsh	r2, [r5, r3]
    29d8:	52e2      	strh	r2, [r4, r3]
        new_obj->realign.yofs         = copy->realign.yofs;
    29da:	3302      	adds	r3, #2
    29dc:	5eea      	ldrsh	r2, [r5, r3]
    29de:	52e2      	strh	r2, [r4, r3]
        new_obj->realign.base         = copy->realign.base;
    29e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    29e2:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    29e4:	2249      	movs	r2, #73	; 0x49
    29e6:	5ca9      	ldrb	r1, [r5, r2]
    29e8:	2301      	movs	r3, #1
    29ea:	469b      	mov	fp, r3
    29ec:	2701      	movs	r7, #1
    29ee:	4039      	ands	r1, r7
    29f0:	5ca3      	ldrb	r3, [r4, r2]
    29f2:	4658      	mov	r0, fp
    29f4:	4383      	bics	r3, r0
    29f6:	430b      	orrs	r3, r1
    29f8:	54a3      	strb	r3, [r4, r2]
        new_obj->event_cb = copy->event_cb;
    29fa:	69ab      	ldr	r3, [r5, #24]
    29fc:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    29fe:	2334      	movs	r3, #52	; 0x34
    2a00:	5cea      	ldrb	r2, [r5, r3]
    2a02:	09d2      	lsrs	r2, r2, #7
    2a04:	01d1      	lsls	r1, r2, #7
    2a06:	5ce2      	ldrb	r2, [r4, r3]
    2a08:	4694      	mov	ip, r2
    2a0a:	227f      	movs	r2, #127	; 0x7f
    2a0c:	4666      	mov	r6, ip
    2a0e:	4032      	ands	r2, r6
    2a10:	430a      	orrs	r2, r1
    2a12:	54e2      	strb	r2, [r4, r3]
        new_obj->click        = copy->click;
    2a14:	5cea      	ldrb	r2, [r5, r3]
    2a16:	07d2      	lsls	r2, r2, #31
    2a18:	0fd2      	lsrs	r2, r2, #31
    2a1a:	5ce1      	ldrb	r1, [r4, r3]
    2a1c:	4381      	bics	r1, r0
    2a1e:	430a      	orrs	r2, r1
    2a20:	54e2      	strb	r2, [r4, r3]
        new_obj->drag         = copy->drag;
    2a22:	5cea      	ldrb	r2, [r5, r3]
    2a24:	0852      	lsrs	r2, r2, #1
    2a26:	403a      	ands	r2, r7
    2a28:	0052      	lsls	r2, r2, #1
    2a2a:	5ce1      	ldrb	r1, [r4, r3]
    2a2c:	2602      	movs	r6, #2
    2a2e:	43b1      	bics	r1, r6
    2a30:	430a      	orrs	r2, r1
    2a32:	54e2      	strb	r2, [r4, r3]
        new_obj->drag_dir     = copy->drag_dir;
    2a34:	2235      	movs	r2, #53	; 0x35
    2a36:	4694      	mov	ip, r2
    2a38:	5caa      	ldrb	r2, [r5, r2]
    2a3a:	0021      	movs	r1, r4
    2a3c:	3134      	adds	r1, #52	; 0x34
    2a3e:	360c      	adds	r6, #12
    2a40:	4016      	ands	r6, r2
    2a42:	46b0      	mov	r8, r6
    2a44:	784a      	ldrb	r2, [r1, #1]
    2a46:	260e      	movs	r6, #14
    2a48:	43b2      	bics	r2, r6
    2a4a:	4646      	mov	r6, r8
    2a4c:	4332      	orrs	r2, r6
    2a4e:	704a      	strb	r2, [r1, #1]
        new_obj->drag_throw   = copy->drag_throw;
    2a50:	5cea      	ldrb	r2, [r5, r3]
    2a52:	0892      	lsrs	r2, r2, #2
    2a54:	403a      	ands	r2, r7
    2a56:	0092      	lsls	r2, r2, #2
    2a58:	5ce6      	ldrb	r6, [r4, r3]
    2a5a:	46b0      	mov	r8, r6
    2a5c:	2604      	movs	r6, #4
    2a5e:	46b1      	mov	r9, r6
    2a60:	4646      	mov	r6, r8
    2a62:	4648      	mov	r0, r9
    2a64:	4386      	bics	r6, r0
    2a66:	4332      	orrs	r2, r6
    2a68:	54e2      	strb	r2, [r4, r3]
        new_obj->drag_parent  = copy->drag_parent;
    2a6a:	5cea      	ldrb	r2, [r5, r3]
    2a6c:	08d2      	lsrs	r2, r2, #3
    2a6e:	403a      	ands	r2, r7
    2a70:	00d2      	lsls	r2, r2, #3
    2a72:	5ce0      	ldrb	r0, [r4, r3]
    2a74:	4680      	mov	r8, r0
    2a76:	2008      	movs	r0, #8
    2a78:	4646      	mov	r6, r8
    2a7a:	4386      	bics	r6, r0
    2a7c:	4332      	orrs	r2, r6
    2a7e:	54e2      	strb	r2, [r4, r3]
        new_obj->hidden       = copy->hidden;
    2a80:	5cea      	ldrb	r2, [r5, r3]
    2a82:	0912      	lsrs	r2, r2, #4
    2a84:	403a      	ands	r2, r7
    2a86:	0112      	lsls	r2, r2, #4
    2a88:	5ce0      	ldrb	r0, [r4, r3]
    2a8a:	4680      	mov	r8, r0
    2a8c:	2010      	movs	r0, #16
    2a8e:	4646      	mov	r6, r8
    2a90:	4386      	bics	r6, r0
    2a92:	4332      	orrs	r2, r6
    2a94:	54e2      	strb	r2, [r4, r3]
        new_obj->top          = copy->top;
    2a96:	5cea      	ldrb	r2, [r5, r3]
    2a98:	0952      	lsrs	r2, r2, #5
    2a9a:	403a      	ands	r2, r7
    2a9c:	0152      	lsls	r2, r2, #5
    2a9e:	5ce0      	ldrb	r0, [r4, r3]
    2aa0:	4680      	mov	r8, r0
    2aa2:	2020      	movs	r0, #32
    2aa4:	4646      	mov	r6, r8
    2aa6:	4386      	bics	r6, r0
    2aa8:	4332      	orrs	r2, r6
    2aaa:	54e2      	strb	r2, [r4, r3]
        new_obj->parent_event = copy->parent_event;
    2aac:	5cea      	ldrb	r2, [r5, r3]
    2aae:	0992      	lsrs	r2, r2, #6
    2ab0:	403a      	ands	r2, r7
    2ab2:	0192      	lsls	r2, r2, #6
    2ab4:	5ce7      	ldrb	r7, [r4, r3]
    2ab6:	2040      	movs	r0, #64	; 0x40
    2ab8:	4387      	bics	r7, r0
    2aba:	433a      	orrs	r2, r7
    2abc:	54e2      	strb	r2, [r4, r3]
        new_obj->protect      = copy->protect;
    2abe:	3308      	adds	r3, #8
    2ac0:	5cea      	ldrb	r2, [r5, r3]
    2ac2:	54e2      	strb	r2, [r4, r3]
        new_obj->gesture_parent = copy->gesture_parent;
    2ac4:	4663      	mov	r3, ip
    2ac6:	5ceb      	ldrb	r3, [r5, r3]
    2ac8:	07db      	lsls	r3, r3, #31
    2aca:	0fdb      	lsrs	r3, r3, #31
    2acc:	784a      	ldrb	r2, [r1, #1]
    2ace:	4658      	mov	r0, fp
    2ad0:	4382      	bics	r2, r0
    2ad2:	4313      	orrs	r3, r2
    2ad4:	704b      	strb	r3, [r1, #1]
        if(copy->group_p != NULL) {
    2ad6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    2ad8:	2800      	cmp	r0, #0
    2ada:	d002      	beq.n	2ae2 <lv_obj_create+0x266>
            lv_group_add_obj(copy->group_p, new_obj);
    2adc:	0021      	movs	r1, r4
    2ade:	4b64      	ldr	r3, [pc, #400]	; (2c70 <lv_obj_create+0x3f4>)
    2ae0:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    2ae2:	0028      	movs	r0, r5
    2ae4:	4b63      	ldr	r3, [pc, #396]	; (2c74 <lv_obj_create+0x3f8>)
    2ae6:	4798      	blx	r3
    2ae8:	2800      	cmp	r0, #0
    2aea:	d100      	bne.n	2aee <lv_obj_create+0x272>
    2aec:	e0d2      	b.n	2c94 <lv_obj_create+0x418>
    2aee:	4653      	mov	r3, sl
    2af0:	2b00      	cmp	r3, #0
    2af2:	d100      	bne.n	2af6 <lv_obj_create+0x27a>
    2af4:	e0da      	b.n	2cac <lv_obj_create+0x430>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    2af6:	0028      	movs	r0, r5
    2af8:	4b5f      	ldr	r3, [pc, #380]	; (2c78 <lv_obj_create+0x3fc>)
    2afa:	4798      	blx	r3
    2afc:	0007      	movs	r7, r0
    2afe:	0028      	movs	r0, r5
    2b00:	4b5e      	ldr	r3, [pc, #376]	; (2c7c <lv_obj_create+0x400>)
    2b02:	4798      	blx	r3
    2b04:	0002      	movs	r2, r0
    2b06:	0039      	movs	r1, r7
    2b08:	0020      	movs	r0, r4
    2b0a:	4b5d      	ldr	r3, [pc, #372]	; (2c80 <lv_obj_create+0x404>)
    2b0c:	4798      	blx	r3
    2b0e:	e0c4      	b.n	2c9a <lv_obj_create+0x41e>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
    2b10:	4653      	mov	r3, sl
    2b12:	1d18      	adds	r0, r3, #4
    2b14:	4b4c      	ldr	r3, [pc, #304]	; (2c48 <lv_obj_create+0x3cc>)
    2b16:	4798      	blx	r3
    2b18:	0004      	movs	r4, r0
        LV_ASSERT_MEM(new_obj);
    2b1a:	4b47      	ldr	r3, [pc, #284]	; (2c38 <lv_obj_create+0x3bc>)
    2b1c:	4798      	blx	r3
    2b1e:	2800      	cmp	r0, #0
    2b20:	d04b      	beq.n	2bba <lv_obj_create+0x33e>
        if(new_obj == NULL) return NULL;
    2b22:	2c00      	cmp	r4, #0
    2b24:	d100      	bne.n	2b28 <lv_obj_create+0x2ac>
    2b26:	e0c1      	b.n	2cac <lv_obj_create+0x430>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    2b28:	214c      	movs	r1, #76	; 0x4c
    2b2a:	0020      	movs	r0, r4
    2b2c:	4b48      	ldr	r3, [pc, #288]	; (2c50 <lv_obj_create+0x3d4>)
    2b2e:	4798      	blx	r3
        new_obj->parent = parent;
    2b30:	4653      	mov	r3, sl
    2b32:	6023      	str	r3, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    2b34:	0022      	movs	r2, r4
    2b36:	3234      	adds	r2, #52	; 0x34
    2b38:	7853      	ldrb	r3, [r2, #1]
    2b3a:	2130      	movs	r1, #48	; 0x30
    2b3c:	438b      	bics	r3, r1
    2b3e:	7053      	strb	r3, [r2, #1]
        new_obj->signal_cb = lv_obj_signal;
    2b40:	4b44      	ldr	r3, [pc, #272]	; (2c54 <lv_obj_create+0x3d8>)
    2b42:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    2b44:	4b44      	ldr	r3, [pc, #272]	; (2c58 <lv_obj_create+0x3dc>)
    2b46:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    2b48:	2300      	movs	r3, #0
    2b4a:	61a3      	str	r3, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
    2b4c:	4653      	mov	r3, sl
    2b4e:	2212      	movs	r2, #18
    2b50:	5e9b      	ldrsh	r3, [r3, r2]
    2b52:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    2b54:	4653      	mov	r3, sl
    2b56:	8a5f      	ldrh	r7, [r3, #18]
    2b58:	2000      	movs	r0, #0
    2b5a:	4b4a      	ldr	r3, [pc, #296]	; (2c84 <lv_obj_create+0x408>)
    2b5c:	4798      	blx	r3
    2b5e:	2332      	movs	r3, #50	; 0x32
    2b60:	4343      	muls	r3, r0
    2b62:	3350      	adds	r3, #80	; 0x50
    2b64:	2240      	movs	r2, #64	; 0x40
    2b66:	32ff      	adds	r2, #255	; 0xff
    2b68:	2001      	movs	r0, #1
    2b6a:	4293      	cmp	r3, r2
    2b6c:	d82b      	bhi.n	2bc6 <lv_obj_create+0x34a>
    2b6e:	19c0      	adds	r0, r0, r7
    2b70:	82e0      	strh	r0, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
    2b72:	0020      	movs	r0, r4
    2b74:	4b44      	ldr	r3, [pc, #272]	; (2c88 <lv_obj_create+0x40c>)
    2b76:	4798      	blx	r3
    2b78:	2801      	cmp	r0, #1
    2b7a:	d030      	beq.n	2bde <lv_obj_create+0x362>
            new_obj->coords.x1    = parent->coords.x1;
    2b7c:	4653      	mov	r3, sl
    2b7e:	2210      	movs	r2, #16
    2b80:	5e9b      	ldrsh	r3, [r3, r2]
    2b82:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    2b84:	4653      	mov	r3, sl
    2b86:	8a1f      	ldrh	r7, [r3, #16]
    2b88:	2000      	movs	r0, #0
    2b8a:	4b3e      	ldr	r3, [pc, #248]	; (2c84 <lv_obj_create+0x408>)
    2b8c:	4798      	blx	r3
    2b8e:	2364      	movs	r3, #100	; 0x64
    2b90:	4343      	muls	r3, r0
    2b92:	3350      	adds	r3, #80	; 0x50
    2b94:	2240      	movs	r2, #64	; 0x40
    2b96:	32ff      	adds	r2, #255	; 0xff
    2b98:	2001      	movs	r0, #1
    2b9a:	4293      	cmp	r3, r2
    2b9c:	d90a      	bls.n	2bb4 <lv_obj_create+0x338>
    2b9e:	2000      	movs	r0, #0
    2ba0:	4b38      	ldr	r3, [pc, #224]	; (2c84 <lv_obj_create+0x408>)
    2ba2:	4798      	blx	r3
    2ba4:	0003      	movs	r3, r0
    2ba6:	2064      	movs	r0, #100	; 0x64
    2ba8:	4358      	muls	r0, r3
    2baa:	3050      	adds	r0, #80	; 0x50
    2bac:	21a0      	movs	r1, #160	; 0xa0
    2bae:	4b37      	ldr	r3, [pc, #220]	; (2c8c <lv_obj_create+0x410>)
    2bb0:	4798      	blx	r3
    2bb2:	b280      	uxth	r0, r0
    2bb4:	19c0      	adds	r0, r0, r7
    2bb6:	82a0      	strh	r0, [r4, #20]
    2bb8:	e6a7      	b.n	290a <lv_obj_create+0x8e>
        LV_ASSERT_MEM(new_obj);
    2bba:	0022      	movs	r2, r4
    2bbc:	2300      	movs	r3, #0
    2bbe:	4823      	ldr	r0, [pc, #140]	; (2c4c <lv_obj_create+0x3d0>)
    2bc0:	491f      	ldr	r1, [pc, #124]	; (2c40 <lv_obj_create+0x3c4>)
    2bc2:	4788      	blx	r1
    2bc4:	e7fe      	b.n	2bc4 <lv_obj_create+0x348>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    2bc6:	2000      	movs	r0, #0
    2bc8:	4b2e      	ldr	r3, [pc, #184]	; (2c84 <lv_obj_create+0x408>)
    2bca:	4798      	blx	r3
    2bcc:	0003      	movs	r3, r0
    2bce:	2032      	movs	r0, #50	; 0x32
    2bd0:	4358      	muls	r0, r3
    2bd2:	3050      	adds	r0, #80	; 0x50
    2bd4:	21a0      	movs	r1, #160	; 0xa0
    2bd6:	4b2d      	ldr	r3, [pc, #180]	; (2c8c <lv_obj_create+0x410>)
    2bd8:	4798      	blx	r3
    2bda:	b280      	uxth	r0, r0
    2bdc:	e7c7      	b.n	2b6e <lv_obj_create+0x2f2>
            new_obj->coords.x2    = parent->coords.x2;
    2bde:	4653      	mov	r3, sl
    2be0:	2214      	movs	r2, #20
    2be2:	5e9b      	ldrsh	r3, [r3, r2]
    2be4:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
    2be6:	4653      	mov	r3, sl
    2be8:	8a9f      	ldrh	r7, [r3, #20]
    2bea:	2000      	movs	r0, #0
    2bec:	4b25      	ldr	r3, [pc, #148]	; (2c84 <lv_obj_create+0x408>)
    2bee:	4798      	blx	r3
    2bf0:	2364      	movs	r3, #100	; 0x64
    2bf2:	4343      	muls	r3, r0
    2bf4:	3350      	adds	r3, #80	; 0x50
    2bf6:	2240      	movs	r2, #64	; 0x40
    2bf8:	32ff      	adds	r2, #255	; 0xff
    2bfa:	2001      	movs	r0, #1
    2bfc:	4293      	cmp	r3, r2
    2bfe:	d90a      	bls.n	2c16 <lv_obj_create+0x39a>
    2c00:	2000      	movs	r0, #0
    2c02:	4b20      	ldr	r3, [pc, #128]	; (2c84 <lv_obj_create+0x408>)
    2c04:	4798      	blx	r3
    2c06:	0003      	movs	r3, r0
    2c08:	2064      	movs	r0, #100	; 0x64
    2c0a:	4358      	muls	r0, r3
    2c0c:	3050      	adds	r0, #80	; 0x50
    2c0e:	21a0      	movs	r1, #160	; 0xa0
    2c10:	4b1e      	ldr	r3, [pc, #120]	; (2c8c <lv_obj_create+0x410>)
    2c12:	4798      	blx	r3
    2c14:	b280      	uxth	r0, r0
    2c16:	1a38      	subs	r0, r7, r0
    2c18:	8220      	strh	r0, [r4, #16]
    2c1a:	e676      	b.n	290a <lv_obj_create+0x8e>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
    2c1c:	4653      	mov	r3, sl
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d004      	beq.n	2c2c <lv_obj_create+0x3b0>
    2c22:	2102      	movs	r1, #2
    2c24:	0020      	movs	r0, r4
    2c26:	4b1a      	ldr	r3, [pc, #104]	; (2c90 <lv_obj_create+0x414>)
    2c28:	4798      	blx	r3
    2c2a:	e036      	b.n	2c9a <lv_obj_create+0x41e>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
    2c2c:	2101      	movs	r1, #1
    2c2e:	0020      	movs	r0, r4
    2c30:	4b17      	ldr	r3, [pc, #92]	; (2c90 <lv_obj_create+0x414>)
    2c32:	4798      	blx	r3
    2c34:	e03a      	b.n	2cac <lv_obj_create+0x430>
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	00001415 	.word	0x00001415
    2c3c:	0001886c 	.word	0x0001886c
    2c40:	0000141d 	.word	0x0000141d
    2c44:	0000f5a1 	.word	0x0000f5a1
    2c48:	00010565 	.word	0x00010565
    2c4c:	00018804 	.word	0x00018804
    2c50:	00010fe5 	.word	0x00010fe5
    2c54:	00003dd9 	.word	0x00003dd9
    2c58:	00003979 	.word	0x00003979
    2c5c:	0000f5ad 	.word	0x0000f5ad
    2c60:	0000f5d5 	.word	0x0000f5d5
    2c64:	00010551 	.word	0x00010551
    2c68:	000048f5 	.word	0x000048f5
    2c6c:	00005639 	.word	0x00005639
    2c70:	00001641 	.word	0x00001641
    2c74:	00001a39 	.word	0x00001a39
    2c78:	00001ba9 	.word	0x00001ba9
    2c7c:	00001bed 	.word	0x00001bed
    2c80:	0000201d 	.word	0x0000201d
    2c84:	0000f5fd 	.word	0x0000f5fd
    2c88:	00002855 	.word	0x00002855
    2c8c:	00017961 	.word	0x00017961
    2c90:	00011c01 	.word	0x00011c01
    if(parent != NULL) {
    2c94:	4653      	mov	r3, sl
    2c96:	2b00      	cmp	r3, #0
    2c98:	d008      	beq.n	2cac <lv_obj_create+0x430>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    2c9a:	4653      	mov	r3, sl
    2c9c:	69db      	ldr	r3, [r3, #28]
    2c9e:	0022      	movs	r2, r4
    2ca0:	2101      	movs	r1, #1
    2ca2:	4650      	mov	r0, sl
    2ca4:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    2ca6:	0020      	movs	r0, r4
    2ca8:	4b05      	ldr	r3, [pc, #20]	; (2cc0 <lv_obj_create+0x444>)
    2caa:	4798      	blx	r3
}
    2cac:	0020      	movs	r0, r4
    2cae:	bc3c      	pop	{r2, r3, r4, r5}
    2cb0:	4690      	mov	r8, r2
    2cb2:	4699      	mov	r9, r3
    2cb4:	46a2      	mov	sl, r4
    2cb6:	46ab      	mov	fp, r5
    2cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
    2cba:	4654      	mov	r4, sl
    2cbc:	e7f6      	b.n	2cac <lv_obj_create+0x430>
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	00001f49 	.word	0x00001f49

00002cc4 <lv_obj_is_protected>:
{
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	0004      	movs	r4, r0
    2cc8:	000d      	movs	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2cca:	4b08      	ldr	r3, [pc, #32]	; (2cec <lv_obj_is_protected+0x28>)
    2ccc:	4798      	blx	r3
    2cce:	2800      	cmp	r0, #0
    2cd0:	d006      	beq.n	2ce0 <lv_obj_is_protected+0x1c>
    return (obj->protect & prot) == 0 ? false : true;
    2cd2:	233c      	movs	r3, #60	; 0x3c
    2cd4:	5ce0      	ldrb	r0, [r4, r3]
    2cd6:	4028      	ands	r0, r5
    2cd8:	1e43      	subs	r3, r0, #1
    2cda:	4198      	sbcs	r0, r3
    2cdc:	b2c0      	uxtb	r0, r0
}
    2cde:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2ce0:	0022      	movs	r2, r4
    2ce2:	2300      	movs	r3, #0
    2ce4:	4802      	ldr	r0, [pc, #8]	; (2cf0 <lv_obj_is_protected+0x2c>)
    2ce6:	4903      	ldr	r1, [pc, #12]	; (2cf4 <lv_obj_is_protected+0x30>)
    2ce8:	4788      	blx	r1
    2cea:	e7fe      	b.n	2cea <lv_obj_is_protected+0x26>
    2cec:	00001415 	.word	0x00001415
    2cf0:	0001886c 	.word	0x0001886c
    2cf4:	0000141d 	.word	0x0000141d

00002cf8 <lv_obj_get_state>:
{
    2cf8:	b570      	push	{r4, r5, r6, lr}
    2cfa:	b082      	sub	sp, #8
    2cfc:	0005      	movs	r5, r0
    2cfe:	000e      	movs	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2d00:	4b0d      	ldr	r3, [pc, #52]	; (2d38 <lv_obj_get_state+0x40>)
    2d02:	4798      	blx	r3
    2d04:	2800      	cmp	r0, #0
    2d06:	d005      	beq.n	2d14 <lv_obj_get_state+0x1c>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
    2d08:	2e3f      	cmp	r6, #63	; 0x3f
    2d0a:	d809      	bhi.n	2d20 <lv_obj_get_state+0x28>
    2d0c:	233d      	movs	r3, #61	; 0x3d
    2d0e:	5ce8      	ldrb	r0, [r5, r3]
}
    2d10:	b002      	add	sp, #8
    2d12:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    2d14:	002a      	movs	r2, r5
    2d16:	2300      	movs	r3, #0
    2d18:	4808      	ldr	r0, [pc, #32]	; (2d3c <lv_obj_get_state+0x44>)
    2d1a:	4909      	ldr	r1, [pc, #36]	; (2d40 <lv_obj_get_state+0x48>)
    2d1c:	4788      	blx	r1
    2d1e:	e7fe      	b.n	2d1e <lv_obj_get_state+0x26>
    info.part = part;
    2d20:	ac01      	add	r4, sp, #4
    2d22:	7026      	strb	r6, [r4, #0]
    info.result = LV_STATE_DEFAULT;
    2d24:	2300      	movs	r3, #0
    2d26:	7063      	strb	r3, [r4, #1]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
    2d28:	0022      	movs	r2, r4
    2d2a:	2109      	movs	r1, #9
    2d2c:	0028      	movs	r0, r5
    2d2e:	4b05      	ldr	r3, [pc, #20]	; (2d44 <lv_obj_get_state+0x4c>)
    2d30:	4798      	blx	r3
    return info.result;
    2d32:	7860      	ldrb	r0, [r4, #1]
    2d34:	e7ec      	b.n	2d10 <lv_obj_get_state+0x18>
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	00001415 	.word	0x00001415
    2d3c:	0001886c 	.word	0x0001886c
    2d40:	0000141d 	.word	0x0000141d
    2d44:	000019ed 	.word	0x000019ed

00002d48 <_lv_obj_get_style_int>:
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	46de      	mov	lr, fp
    2d4c:	4657      	mov	r7, sl
    2d4e:	464e      	mov	r6, r9
    2d50:	b5c0      	push	{r6, r7, lr}
    2d52:	b084      	sub	sp, #16
    2d54:	0006      	movs	r6, r0
    2d56:	000d      	movs	r5, r1
    2d58:	0017      	movs	r7, r2
    attr.full = prop_ori >> 8;
    2d5a:	0a13      	lsrs	r3, r2, #8
    2d5c:	9301      	str	r3, [sp, #4]
    while(parent) {
    2d5e:	2800      	cmp	r0, #0
    2d60:	d030      	beq.n	2dc4 <_lv_obj_get_style_int+0x7c>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2d62:	4b24      	ldr	r3, [pc, #144]	; (2df4 <_lv_obj_get_style_int+0xac>)
    2d64:	469b      	mov	fp, r3
        lv_state_t state = lv_obj_get_state(parent, part);
    2d66:	4b24      	ldr	r3, [pc, #144]	; (2df8 <_lv_obj_get_style_int+0xb0>)
    2d68:	469a      	mov	sl, r3
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    2d6a:	4b24      	ldr	r3, [pc, #144]	; (2dfc <_lv_obj_get_style_int+0xb4>)
    2d6c:	4699      	mov	r9, r3
    2d6e:	e00c      	b.n	2d8a <_lv_obj_get_style_int+0x42>
        if(res == LV_RES_OK) return value_act;
    2d70:	ab02      	add	r3, sp, #8
    2d72:	3306      	adds	r3, #6
    2d74:	2000      	movs	r0, #0
    2d76:	5e18      	ldrsh	r0, [r3, r0]
}
    2d78:	b004      	add	sp, #16
    2d7a:	bc1c      	pop	{r2, r3, r4}
    2d7c:	4691      	mov	r9, r2
    2d7e:	469a      	mov	sl, r3
    2d80:	46a3      	mov	fp, r4
    2d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d84:	2500      	movs	r5, #0
    while(parent) {
    2d86:	2e00      	cmp	r6, #0
    2d88:	d01d      	beq.n	2dc6 <_lv_obj_get_style_int+0x7e>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2d8a:	0029      	movs	r1, r5
    2d8c:	0030      	movs	r0, r6
    2d8e:	47d8      	blx	fp
    2d90:	9000      	str	r0, [sp, #0]
        lv_state_t state = lv_obj_get_state(parent, part);
    2d92:	0029      	movs	r1, r5
    2d94:	0030      	movs	r0, r6
    2d96:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    2d98:	0204      	lsls	r4, r0, #8
    2d9a:	193c      	adds	r4, r7, r4
    2d9c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    2d9e:	ab02      	add	r3, sp, #8
    2da0:	1d9a      	adds	r2, r3, #6
    2da2:	0021      	movs	r1, r4
    2da4:	9800      	ldr	r0, [sp, #0]
    2da6:	47c8      	blx	r9
        if(res == LV_RES_OK) return value_act;
    2da8:	2801      	cmp	r0, #1
    2daa:	d0e1      	beq.n	2d70 <_lv_obj_get_style_int+0x28>
        if(attr.bits.inherit == 0) break;
    2dac:	466b      	mov	r3, sp
    2dae:	791b      	ldrb	r3, [r3, #4]
    2db0:	b25b      	sxtb	r3, r3
    2db2:	2b00      	cmp	r3, #0
    2db4:	da07      	bge.n	2dc6 <_lv_obj_get_style_int+0x7e>
        if(part != LV_OBJ_PART_MAIN) {
    2db6:	2d00      	cmp	r5, #0
    2db8:	d1e4      	bne.n	2d84 <_lv_obj_get_style_int+0x3c>
        parent = lv_obj_get_parent(parent);
    2dba:	0030      	movs	r0, r6
    2dbc:	4b10      	ldr	r3, [pc, #64]	; (2e00 <_lv_obj_get_style_int+0xb8>)
    2dbe:	4798      	blx	r3
    2dc0:	0006      	movs	r6, r0
    2dc2:	e7df      	b.n	2d84 <_lv_obj_get_style_int+0x3c>
    while(parent) {
    2dc4:	0014      	movs	r4, r2
    switch(prop) {
    2dc6:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <_lv_obj_get_style_int+0xbc>)
    2dc8:	401c      	ands	r4, r3
    2dca:	2c22      	cmp	r4, #34	; 0x22
    2dcc:	d010      	beq.n	2df0 <_lv_obj_get_style_int+0xa8>
    2dce:	d807      	bhi.n	2de0 <_lv_obj_get_style_int+0x98>
            return LV_DPI / 20;
    2dd0:	2006      	movs	r0, #6
    switch(prop) {
    2dd2:	2c03      	cmp	r4, #3
    2dd4:	d0d0      	beq.n	2d78 <_lv_obj_get_style_int+0x30>
    2dd6:	2c07      	cmp	r4, #7
    2dd8:	d108      	bne.n	2dec <_lv_obj_get_style_int+0xa4>
            return LV_IMG_ZOOM_NONE;
    2dda:	2080      	movs	r0, #128	; 0x80
    2ddc:	0040      	lsls	r0, r0, #1
    2dde:	e7cb      	b.n	2d78 <_lv_obj_get_style_int+0x30>
            return LV_BORDER_SIDE_FULL;
    2de0:	200f      	movs	r0, #15
    switch(prop) {
    2de2:	2c31      	cmp	r4, #49	; 0x31
    2de4:	d0c8      	beq.n	2d78 <_lv_obj_get_style_int+0x30>
            return LV_DPI / 8;
    2de6:	3001      	adds	r0, #1
    switch(prop) {
    2de8:	2cc0      	cmp	r4, #192	; 0xc0
    2dea:	d0c5      	beq.n	2d78 <_lv_obj_get_style_int+0x30>
    return 0;
    2dec:	2000      	movs	r0, #0
    2dee:	e7c3      	b.n	2d78 <_lv_obj_get_style_int+0x30>
            return 255;
    2df0:	20ff      	movs	r0, #255	; 0xff
    2df2:	e7c1      	b.n	2d78 <_lv_obj_get_style_int+0x30>
    2df4:	00001c91 	.word	0x00001c91
    2df8:	00002cf9 	.word	0x00002cf9
    2dfc:	00005779 	.word	0x00005779
    2e00:	00001a39 	.word	0x00001a39
    2e04:	ffff80ff 	.word	0xffff80ff

00002e08 <_lv_obj_get_style_color>:
{
    2e08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e0a:	46de      	mov	lr, fp
    2e0c:	4657      	mov	r7, sl
    2e0e:	464e      	mov	r6, r9
    2e10:	b5c0      	push	{r6, r7, lr}
    2e12:	b084      	sub	sp, #16
    2e14:	0006      	movs	r6, r0
    2e16:	000d      	movs	r5, r1
    2e18:	0017      	movs	r7, r2
    attr.full = prop_ori >> 8;
    2e1a:	0a13      	lsrs	r3, r2, #8
    2e1c:	9301      	str	r3, [sp, #4]
    while(parent) {
    2e1e:	2800      	cmp	r0, #0
    2e20:	d028      	beq.n	2e74 <_lv_obj_get_style_color+0x6c>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2e22:	4b1c      	ldr	r3, [pc, #112]	; (2e94 <_lv_obj_get_style_color+0x8c>)
    2e24:	469b      	mov	fp, r3
        lv_state_t state = lv_obj_get_state(parent, part);
    2e26:	4b1c      	ldr	r3, [pc, #112]	; (2e98 <_lv_obj_get_style_color+0x90>)
    2e28:	469a      	mov	sl, r3
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    2e2a:	4b1c      	ldr	r3, [pc, #112]	; (2e9c <_lv_obj_get_style_color+0x94>)
    2e2c:	4699      	mov	r9, r3
    2e2e:	e005      	b.n	2e3c <_lv_obj_get_style_color+0x34>
        if(res == LV_RES_OK) return value_act;
    2e30:	ab03      	add	r3, sp, #12
    2e32:	8818      	ldrh	r0, [r3, #0]
    2e34:	e025      	b.n	2e82 <_lv_obj_get_style_color+0x7a>
    2e36:	2500      	movs	r5, #0
    while(parent) {
    2e38:	2e00      	cmp	r6, #0
    2e3a:	d01c      	beq.n	2e76 <_lv_obj_get_style_color+0x6e>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2e3c:	0029      	movs	r1, r5
    2e3e:	0030      	movs	r0, r6
    2e40:	47d8      	blx	fp
    2e42:	9000      	str	r0, [sp, #0]
        lv_state_t state = lv_obj_get_state(parent, part);
    2e44:	0029      	movs	r1, r5
    2e46:	0030      	movs	r0, r6
    2e48:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    2e4a:	0204      	lsls	r4, r0, #8
    2e4c:	193c      	adds	r4, r7, r4
    2e4e:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    2e50:	aa03      	add	r2, sp, #12
    2e52:	0021      	movs	r1, r4
    2e54:	9800      	ldr	r0, [sp, #0]
    2e56:	47c8      	blx	r9
        if(res == LV_RES_OK) return value_act;
    2e58:	2801      	cmp	r0, #1
    2e5a:	d0e9      	beq.n	2e30 <_lv_obj_get_style_color+0x28>
        if(attr.bits.inherit == 0) break;
    2e5c:	466b      	mov	r3, sp
    2e5e:	791b      	ldrb	r3, [r3, #4]
    2e60:	b25b      	sxtb	r3, r3
    2e62:	2b00      	cmp	r3, #0
    2e64:	da07      	bge.n	2e76 <_lv_obj_get_style_color+0x6e>
        if(part != LV_OBJ_PART_MAIN) {
    2e66:	2d00      	cmp	r5, #0
    2e68:	d1e5      	bne.n	2e36 <_lv_obj_get_style_color+0x2e>
        parent = lv_obj_get_parent(parent);
    2e6a:	0030      	movs	r0, r6
    2e6c:	4b0c      	ldr	r3, [pc, #48]	; (2ea0 <_lv_obj_get_style_color+0x98>)
    2e6e:	4798      	blx	r3
    2e70:	0006      	movs	r6, r0
    2e72:	e7e0      	b.n	2e36 <_lv_obj_get_style_color+0x2e>
    while(parent) {
    2e74:	0014      	movs	r4, r2
    switch(prop) {
    2e76:	4b0b      	ldr	r3, [pc, #44]	; (2ea4 <_lv_obj_get_style_color+0x9c>)
    2e78:	401c      	ands	r4, r3
    2e7a:	3c29      	subs	r4, #41	; 0x29
    return LV_COLOR_BLACK;
    2e7c:	2000      	movs	r0, #0
    switch(prop) {
    2e7e:	2c01      	cmp	r4, #1
    2e80:	d905      	bls.n	2e8e <_lv_obj_get_style_color+0x86>
}
    2e82:	b004      	add	sp, #16
    2e84:	bc1c      	pop	{r2, r3, r4}
    2e86:	4691      	mov	r9, r2
    2e88:	469a      	mov	sl, r3
    2e8a:	46a3      	mov	fp, r4
    2e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return LV_COLOR_WHITE;
    2e8e:	4b06      	ldr	r3, [pc, #24]	; (2ea8 <_lv_obj_get_style_color+0xa0>)
    2e90:	8818      	ldrh	r0, [r3, #0]
    2e92:	e7f6      	b.n	2e82 <_lv_obj_get_style_color+0x7a>
    2e94:	00001c91 	.word	0x00001c91
    2e98:	00002cf9 	.word	0x00002cf9
    2e9c:	0000584d 	.word	0x0000584d
    2ea0:	00001a39 	.word	0x00001a39
    2ea4:	ffff80ff 	.word	0xffff80ff
    2ea8:	00018868 	.word	0x00018868

00002eac <_lv_obj_get_style_opa>:
{
    2eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eae:	46de      	mov	lr, fp
    2eb0:	4657      	mov	r7, sl
    2eb2:	464e      	mov	r6, r9
    2eb4:	b5c0      	push	{r6, r7, lr}
    2eb6:	b084      	sub	sp, #16
    2eb8:	0006      	movs	r6, r0
    2eba:	000d      	movs	r5, r1
    2ebc:	0017      	movs	r7, r2
    attr.full = prop_ori >> 8;
    2ebe:	0a13      	lsrs	r3, r2, #8
    2ec0:	9301      	str	r3, [sp, #4]
    while(parent) {
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d029      	beq.n	2f1a <_lv_obj_get_style_opa+0x6e>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2ec6:	4b1e      	ldr	r3, [pc, #120]	; (2f40 <_lv_obj_get_style_opa+0x94>)
    2ec8:	469b      	mov	fp, r3
        lv_state_t state = lv_obj_get_state(parent, part);
    2eca:	4b1e      	ldr	r3, [pc, #120]	; (2f44 <_lv_obj_get_style_opa+0x98>)
    2ecc:	469a      	mov	sl, r3
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    2ece:	4b1e      	ldr	r3, [pc, #120]	; (2f48 <_lv_obj_get_style_opa+0x9c>)
    2ed0:	4699      	mov	r9, r3
    2ed2:	e005      	b.n	2ee0 <_lv_obj_get_style_opa+0x34>
        if(res == LV_RES_OK) return value_act;
    2ed4:	ab02      	add	r3, sp, #8
    2ed6:	79d8      	ldrb	r0, [r3, #7]
    2ed8:	e02a      	b.n	2f30 <_lv_obj_get_style_opa+0x84>
    2eda:	2500      	movs	r5, #0
    while(parent) {
    2edc:	2e00      	cmp	r6, #0
    2ede:	d01d      	beq.n	2f1c <_lv_obj_get_style_opa+0x70>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2ee0:	0029      	movs	r1, r5
    2ee2:	0030      	movs	r0, r6
    2ee4:	47d8      	blx	fp
    2ee6:	9000      	str	r0, [sp, #0]
        lv_state_t state = lv_obj_get_state(parent, part);
    2ee8:	0029      	movs	r1, r5
    2eea:	0030      	movs	r0, r6
    2eec:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    2eee:	0204      	lsls	r4, r0, #8
    2ef0:	193c      	adds	r4, r7, r4
    2ef2:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    2ef4:	ab02      	add	r3, sp, #8
    2ef6:	1dda      	adds	r2, r3, #7
    2ef8:	0021      	movs	r1, r4
    2efa:	9800      	ldr	r0, [sp, #0]
    2efc:	47c8      	blx	r9
        if(res == LV_RES_OK) return value_act;
    2efe:	2801      	cmp	r0, #1
    2f00:	d0e8      	beq.n	2ed4 <_lv_obj_get_style_opa+0x28>
        if(attr.bits.inherit == 0) break;
    2f02:	466b      	mov	r3, sp
    2f04:	791b      	ldrb	r3, [r3, #4]
    2f06:	b25b      	sxtb	r3, r3
    2f08:	2b00      	cmp	r3, #0
    2f0a:	da07      	bge.n	2f1c <_lv_obj_get_style_opa+0x70>
        if(part != LV_OBJ_PART_MAIN) {
    2f0c:	2d00      	cmp	r5, #0
    2f0e:	d1e4      	bne.n	2eda <_lv_obj_get_style_opa+0x2e>
        parent = lv_obj_get_parent(parent);
    2f10:	0030      	movs	r0, r6
    2f12:	4b0e      	ldr	r3, [pc, #56]	; (2f4c <_lv_obj_get_style_opa+0xa0>)
    2f14:	4798      	blx	r3
    2f16:	0006      	movs	r6, r0
    2f18:	e7df      	b.n	2eda <_lv_obj_get_style_opa+0x2e>
    while(parent) {
    2f1a:	0014      	movs	r4, r2
    switch(prop) {
    2f1c:	4b0c      	ldr	r3, [pc, #48]	; (2f50 <_lv_obj_get_style_opa+0xa4>)
    2f1e:	401c      	ands	r4, r3
    2f20:	2c6d      	cmp	r4, #109	; 0x6d
    2f22:	d00b      	beq.n	2f3c <_lv_obj_get_style_opa+0x90>
    2f24:	4b0b      	ldr	r3, [pc, #44]	; (2f54 <_lv_obj_get_style_opa+0xa8>)
    2f26:	429c      	cmp	r4, r3
    2f28:	d008      	beq.n	2f3c <_lv_obj_get_style_opa+0x90>
    2f2a:	2c2c      	cmp	r4, #44	; 0x2c
    2f2c:	d006      	beq.n	2f3c <_lv_obj_get_style_opa+0x90>
    return LV_OPA_COVER;
    2f2e:	20ff      	movs	r0, #255	; 0xff
}
    2f30:	b004      	add	sp, #16
    2f32:	bc1c      	pop	{r2, r3, r4}
    2f34:	4691      	mov	r9, r2
    2f36:	469a      	mov	sl, r3
    2f38:	46a3      	mov	fp, r4
    2f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return LV_OPA_TRANSP;
    2f3c:	2000      	movs	r0, #0
    2f3e:	e7f7      	b.n	2f30 <_lv_obj_get_style_opa+0x84>
    2f40:	00001c91 	.word	0x00001c91
    2f44:	00002cf9 	.word	0x00002cf9
    2f48:	00005919 	.word	0x00005919
    2f4c:	00001a39 	.word	0x00001a39
    2f50:	ffff80ff 	.word	0xffff80ff
    2f54:	000080ad 	.word	0x000080ad

00002f58 <_lv_obj_get_style_ptr>:
{
    2f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f5a:	46de      	mov	lr, fp
    2f5c:	4657      	mov	r7, sl
    2f5e:	464e      	mov	r6, r9
    2f60:	b5c0      	push	{r6, r7, lr}
    2f62:	b084      	sub	sp, #16
    2f64:	0006      	movs	r6, r0
    2f66:	000d      	movs	r5, r1
    2f68:	0017      	movs	r7, r2
    attr.full = prop_ori >> 8;
    2f6a:	0a13      	lsrs	r3, r2, #8
    2f6c:	9301      	str	r3, [sp, #4]
    while(parent) {
    2f6e:	2800      	cmp	r0, #0
    2f70:	d02c      	beq.n	2fcc <_lv_obj_get_style_ptr+0x74>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2f72:	4b1f      	ldr	r3, [pc, #124]	; (2ff0 <_lv_obj_get_style_ptr+0x98>)
    2f74:	469b      	mov	fp, r3
        lv_state_t state = lv_obj_get_state(parent, part);
    2f76:	4b1f      	ldr	r3, [pc, #124]	; (2ff4 <_lv_obj_get_style_ptr+0x9c>)
    2f78:	469a      	mov	sl, r3
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    2f7a:	4b1f      	ldr	r3, [pc, #124]	; (2ff8 <_lv_obj_get_style_ptr+0xa0>)
    2f7c:	4699      	mov	r9, r3
    2f7e:	e009      	b.n	2f94 <_lv_obj_get_style_ptr+0x3c>
        if(res == LV_RES_OK)  return value_act;
    2f80:	9803      	ldr	r0, [sp, #12]
}
    2f82:	b004      	add	sp, #16
    2f84:	bc1c      	pop	{r2, r3, r4}
    2f86:	4691      	mov	r9, r2
    2f88:	469a      	mov	sl, r3
    2f8a:	46a3      	mov	fp, r4
    2f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f8e:	2500      	movs	r5, #0
    while(parent) {
    2f90:	2e00      	cmp	r6, #0
    2f92:	d01c      	beq.n	2fce <_lv_obj_get_style_ptr+0x76>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    2f94:	0029      	movs	r1, r5
    2f96:	0030      	movs	r0, r6
    2f98:	47d8      	blx	fp
    2f9a:	9000      	str	r0, [sp, #0]
        lv_state_t state = lv_obj_get_state(parent, part);
    2f9c:	0029      	movs	r1, r5
    2f9e:	0030      	movs	r0, r6
    2fa0:	47d0      	blx	sl
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    2fa2:	0204      	lsls	r4, r0, #8
    2fa4:	193c      	adds	r4, r7, r4
    2fa6:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    2fa8:	aa03      	add	r2, sp, #12
    2faa:	0021      	movs	r1, r4
    2fac:	9800      	ldr	r0, [sp, #0]
    2fae:	47c8      	blx	r9
        if(res == LV_RES_OK)  return value_act;
    2fb0:	2801      	cmp	r0, #1
    2fb2:	d0e5      	beq.n	2f80 <_lv_obj_get_style_ptr+0x28>
        if(attr.bits.inherit == 0) break;
    2fb4:	466b      	mov	r3, sp
    2fb6:	791b      	ldrb	r3, [r3, #4]
    2fb8:	b25b      	sxtb	r3, r3
    2fba:	2b00      	cmp	r3, #0
    2fbc:	da07      	bge.n	2fce <_lv_obj_get_style_ptr+0x76>
        if(part != LV_OBJ_PART_MAIN) {
    2fbe:	2d00      	cmp	r5, #0
    2fc0:	d1e5      	bne.n	2f8e <_lv_obj_get_style_ptr+0x36>
        parent = lv_obj_get_parent(parent);
    2fc2:	0030      	movs	r0, r6
    2fc4:	4b0d      	ldr	r3, [pc, #52]	; (2ffc <_lv_obj_get_style_ptr+0xa4>)
    2fc6:	4798      	blx	r3
    2fc8:	0006      	movs	r6, r0
    2fca:	e7e0      	b.n	2f8e <_lv_obj_get_style_ptr+0x36>
    while(parent) {
    2fcc:	0014      	movs	r4, r2
    switch(prop) {
    2fce:	4b0c      	ldr	r3, [pc, #48]	; (3000 <_lv_obj_get_style_ptr+0xa8>)
    2fd0:	401c      	ands	r4, r3
    2fd2:	2cbe      	cmp	r4, #190	; 0xbe
    2fd4:	d009      	beq.n	2fea <_lv_obj_get_style_ptr+0x92>
    2fd6:	4b0b      	ldr	r3, [pc, #44]	; (3004 <_lv_obj_get_style_ptr+0xac>)
    2fd8:	429c      	cmp	r4, r3
    2fda:	d003      	beq.n	2fe4 <_lv_obj_get_style_ptr+0x8c>
    2fdc:	2c7e      	cmp	r4, #126	; 0x7e
    2fde:	d001      	beq.n	2fe4 <_lv_obj_get_style_ptr+0x8c>
    return NULL;
    2fe0:	2000      	movs	r0, #0
    2fe2:	e7ce      	b.n	2f82 <_lv_obj_get_style_ptr+0x2a>
            return lv_theme_get_font_normal();
    2fe4:	4b08      	ldr	r3, [pc, #32]	; (3008 <_lv_obj_get_style_ptr+0xb0>)
    2fe6:	4798      	blx	r3
    2fe8:	e7cb      	b.n	2f82 <_lv_obj_get_style_ptr+0x2a>
            return &lv_anim_path_def;
    2fea:	4808      	ldr	r0, [pc, #32]	; (300c <_lv_obj_get_style_ptr+0xb4>)
    2fec:	e7c9      	b.n	2f82 <_lv_obj_get_style_ptr+0x2a>
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	00001c91 	.word	0x00001c91
    2ff4:	00002cf9 	.word	0x00002cf9
    2ff8:	000059ed 	.word	0x000059ed
    2ffc:	00001a39 	.word	0x00001a39
    3000:	ffff80ff 	.word	0xffff80ff
    3004:	0000808e 	.word	0x0000808e
    3008:	00011bf5 	.word	0x00011bf5
    300c:	0001c848 	.word	0x0001c848

00003010 <trans_anim_start_cb>:
{
    3010:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
    3012:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
    3014:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    3016:	230f      	movs	r3, #15
    3018:	402b      	ands	r3, r5
    301a:	2b08      	cmp	r3, #8
    301c:	dd13      	ble.n	3046 <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    301e:	2b0b      	cmp	r3, #11
    3020:	dd18      	ble.n	3054 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    3022:	2b0d      	cmp	r3, #13
    3024:	dd1d      	ble.n	3062 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
    3026:	79a1      	ldrb	r1, [r4, #6]
    3028:	002a      	movs	r2, r5
    302a:	6820      	ldr	r0, [r4, #0]
    302c:	4b10      	ldr	r3, [pc, #64]	; (3070 <trans_anim_start_cb+0x60>)
    302e:	4798      	blx	r3
    3030:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
    3032:	2300      	movs	r3, #0
    3034:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
    3036:	79a1      	ldrb	r1, [r4, #6]
    3038:	0023      	movs	r3, r4
    303a:	002a      	movs	r2, r5
    303c:	6820      	ldr	r0, [r4, #0]
    303e:	4e0d      	ldr	r6, [pc, #52]	; (3074 <trans_anim_start_cb+0x64>)
    3040:	47b0      	blx	r6
    tr->prop = prop_tmp;
    3042:	80a5      	strh	r5, [r4, #4]
}
    3044:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
    3046:	79a1      	ldrb	r1, [r4, #6]
    3048:	002a      	movs	r2, r5
    304a:	6820      	ldr	r0, [r4, #0]
    304c:	4b0a      	ldr	r3, [pc, #40]	; (3078 <trans_anim_start_cb+0x68>)
    304e:	4798      	blx	r3
    3050:	8120      	strh	r0, [r4, #8]
    3052:	e7ee      	b.n	3032 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
    3054:	79a1      	ldrb	r1, [r4, #6]
    3056:	002a      	movs	r2, r5
    3058:	6820      	ldr	r0, [r4, #0]
    305a:	4b08      	ldr	r3, [pc, #32]	; (307c <trans_anim_start_cb+0x6c>)
    305c:	4798      	blx	r3
    305e:	8120      	strh	r0, [r4, #8]
    3060:	e7e7      	b.n	3032 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
    3062:	79a1      	ldrb	r1, [r4, #6]
    3064:	002a      	movs	r2, r5
    3066:	6820      	ldr	r0, [r4, #0]
    3068:	4b05      	ldr	r3, [pc, #20]	; (3080 <trans_anim_start_cb+0x70>)
    306a:	4798      	blx	r3
    306c:	7220      	strb	r0, [r4, #8]
    306e:	e7e0      	b.n	3032 <trans_anim_start_cb+0x22>
    3070:	00002f59 	.word	0x00002f59
    3074:	00001cc1 	.word	0x00001cc1
    3078:	00002d49 	.word	0x00002d49
    307c:	00002e09 	.word	0x00002e09
    3080:	00002ead 	.word	0x00002ead

00003084 <lv_obj_set_state>:
{
    3084:	b5f0      	push	{r4, r5, r6, r7, lr}
    3086:	46de      	mov	lr, fp
    3088:	4657      	mov	r7, sl
    308a:	464e      	mov	r6, r9
    308c:	4645      	mov	r5, r8
    308e:	b5e0      	push	{r5, r6, r7, lr}
    3090:	b09d      	sub	sp, #116	; 0x74
    3092:	0004      	movs	r4, r0
    3094:	468b      	mov	fp, r1
    if(obj->state == new_state) return;
    3096:	233d      	movs	r3, #61	; 0x3d
    3098:	5cc3      	ldrb	r3, [r0, r3]
    309a:	428b      	cmp	r3, r1
    309c:	d100      	bne.n	30a0 <lv_obj_set_state+0x1c>
    309e:	e208      	b.n	34b2 <lv_obj_set_state+0x42e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30a0:	4bc3      	ldr	r3, [pc, #780]	; (33b0 <lv_obj_set_state+0x32c>)
    30a2:	4798      	blx	r3
    30a4:	2800      	cmp	r0, #0
    30a6:	d008      	beq.n	30ba <lv_obj_set_state+0x36>
    lv_state_t prev_state = obj->state;
    30a8:	233d      	movs	r3, #61	; 0x3d
    30aa:	5ce2      	ldrb	r2, [r4, r3]
    30ac:	4691      	mov	r9, r2
    obj->state = new_state;
    30ae:	465a      	mov	r2, fp
    30b0:	54e2      	strb	r2, [r4, r3]
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    30b2:	2300      	movs	r3, #0
    30b4:	9300      	str	r3, [sp, #0]
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    30b6:	46ca      	mov	sl, r9
    30b8:	e1b2      	b.n	3420 <lv_obj_set_state+0x39c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30ba:	0022      	movs	r2, r4
    30bc:	2300      	movs	r3, #0
    30be:	48bd      	ldr	r0, [pc, #756]	; (33b4 <lv_obj_set_state+0x330>)
    30c0:	49bd      	ldr	r1, [pc, #756]	; (33b8 <lv_obj_set_state+0x334>)
    30c2:	4788      	blx	r1
    30c4:	e7fe      	b.n	30c4 <lv_obj_set_state+0x40>
        style_list->skip_trans = 1;
    30c6:	7973      	ldrb	r3, [r6, #5]
    30c8:	2204      	movs	r2, #4
    30ca:	4313      	orrs	r3, r2
    30cc:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    30ce:	233d      	movs	r3, #61	; 0x3d
    30d0:	4699      	mov	r9, r3
    30d2:	4652      	mov	r2, sl
    30d4:	54e2      	strb	r2, [r4, r3]
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    30d6:	002a      	movs	r2, r5
    30d8:	9900      	ldr	r1, [sp, #0]
    30da:	0020      	movs	r0, r4
    30dc:	4fb7      	ldr	r7, [pc, #732]	; (33bc <lv_obj_set_state+0x338>)
    30de:	47b8      	blx	r7
    30e0:	9007      	str	r0, [sp, #28]
        obj->state = new_state;
    30e2:	464b      	mov	r3, r9
    30e4:	465a      	mov	r2, fp
    30e6:	54e2      	strb	r2, [r4, r3]
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    30e8:	002a      	movs	r2, r5
    30ea:	9900      	ldr	r1, [sp, #0]
    30ec:	0020      	movs	r0, r4
    30ee:	47b8      	blx	r7
    30f0:	4680      	mov	r8, r0
        style_list->skip_trans = 0;
    30f2:	7973      	ldrb	r3, [r6, #5]
    30f4:	2204      	movs	r2, #4
    30f6:	4393      	bics	r3, r2
    30f8:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
    30fa:	9b07      	ldr	r3, [sp, #28]
    30fc:	4283      	cmp	r3, r0
    30fe:	d04b      	beq.n	3198 <lv_obj_set_state+0x114>
        obj->state = prev_state;
    3100:	263d      	movs	r6, #61	; 0x3d
    3102:	4653      	mov	r3, sl
    3104:	55a3      	strb	r3, [r4, r6]
        int1 = _lv_obj_get_style_int(obj, part, prop);
    3106:	002a      	movs	r2, r5
    3108:	9900      	ldr	r1, [sp, #0]
    310a:	0020      	movs	r0, r4
    310c:	4bab      	ldr	r3, [pc, #684]	; (33bc <lv_obj_set_state+0x338>)
    310e:	4798      	blx	r3
    3110:	0002      	movs	r2, r0
    3112:	4681      	mov	r9, r0
        obj->state = new_state;
    3114:	465b      	mov	r3, fp
    3116:	55a3      	strb	r3, [r4, r6]
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    3118:	0029      	movs	r1, r5
    311a:	9801      	ldr	r0, [sp, #4]
    311c:	4ba8      	ldr	r3, [pc, #672]	; (33c0 <lv_obj_set_state+0x33c>)
    311e:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
    3120:	2d01      	cmp	r5, #1
    3122:	d100      	bne.n	3126 <lv_obj_set_state+0xa2>
    3124:	e094      	b.n	3250 <lv_obj_set_state+0x1cc>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    3126:	48a7      	ldr	r0, [pc, #668]	; (33c4 <lv_obj_set_state+0x340>)
    3128:	4ba7      	ldr	r3, [pc, #668]	; (33c8 <lv_obj_set_state+0x344>)
    312a:	4798      	blx	r3
    312c:	0006      	movs	r6, r0
        LV_ASSERT_MEM(tr);
    312e:	4ba0      	ldr	r3, [pc, #640]	; (33b0 <lv_obj_set_state+0x32c>)
    3130:	4798      	blx	r3
    3132:	2800      	cmp	r0, #0
    3134:	d100      	bne.n	3138 <lv_obj_set_state+0xb4>
    3136:	e0a0      	b.n	327a <lv_obj_set_state+0x1f6>
        if(tr == NULL) return NULL;
    3138:	2e00      	cmp	r6, #0
    313a:	d02d      	beq.n	3198 <lv_obj_set_state+0x114>
        tr->start_value._int = int1;
    313c:	464b      	mov	r3, r9
    313e:	8133      	strh	r3, [r6, #8]
        tr->end_value._int = int2;
    3140:	4643      	mov	r3, r8
    3142:	81b3      	strh	r3, [r6, #12]
                    tr->obj = obj;
    3144:	6034      	str	r4, [r6, #0]
                    tr->prop = props[i];
    3146:	80b5      	strh	r5, [r6, #4]
                    tr->part = part;
    3148:	466b      	mov	r3, sp
    314a:	781b      	ldrb	r3, [r3, #0]
    314c:	71b3      	strb	r3, [r6, #6]
                    lv_anim_init(&a);
    314e:	a80c      	add	r0, sp, #48	; 0x30
    3150:	4b9e      	ldr	r3, [pc, #632]	; (33cc <lv_obj_set_state+0x348>)
    3152:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
    3154:	960c      	str	r6, [sp, #48]	; 0x30
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
    3156:	4b9e      	ldr	r3, [pc, #632]	; (33d0 <lv_obj_set_state+0x34c>)
    3158:	930d      	str	r3, [sp, #52]	; 0x34
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
    315a:	4b9e      	ldr	r3, [pc, #632]	; (33d4 <lv_obj_set_state+0x350>)
    315c:	930e      	str	r3, [sp, #56]	; 0x38
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
    315e:	4b9e      	ldr	r3, [pc, #632]	; (33d8 <lv_obj_set_state+0x354>)
    3160:	930f      	str	r3, [sp, #60]	; 0x3c
    a->start = start;
    3162:	2300      	movs	r3, #0
    3164:	9312      	str	r3, [sp, #72]	; 0x48
    a->end   = end;
    3166:	33ff      	adds	r3, #255	; 0xff
    3168:	9313      	str	r3, [sp, #76]	; 0x4c
                    lv_anim_set_time(&a, time);
    316a:	9b06      	ldr	r3, [sp, #24]
    316c:	9314      	str	r3, [sp, #80]	; 0x50
    a->act_time = (int32_t)(-delay);
    316e:	9b05      	ldr	r3, [sp, #20]
    3170:	425b      	negs	r3, r3
    3172:	9315      	str	r3, [sp, #84]	; 0x54
    3174:	9b04      	ldr	r3, [sp, #16]
    3176:	0018      	movs	r0, r3
    3178:	3008      	adds	r0, #8
    uint8_t * d8 = (uint8_t *)dst;
    317a:	aa10      	add	r2, sp, #64	; 0x40
        *d8 = *s8;
    317c:	7819      	ldrb	r1, [r3, #0]
    317e:	7011      	strb	r1, [r2, #0]
        d8++;
    3180:	3201      	adds	r2, #1
        s8++;
    3182:	3301      	adds	r3, #1
    while(len) {
    3184:	4283      	cmp	r3, r0
    3186:	d1f9      	bne.n	317c <lv_obj_set_state+0xf8>
                    a.early_apply = 0;
    3188:	a80c      	add	r0, sp, #48	; 0x30
    318a:	2236      	movs	r2, #54	; 0x36
    318c:	5c83      	ldrb	r3, [r0, r2]
    318e:	2101      	movs	r1, #1
    3190:	438b      	bics	r3, r1
    3192:	5483      	strb	r3, [r0, r2]
                    lv_anim_start(&a);
    3194:	4b91      	ldr	r3, [pc, #580]	; (33dc <lv_obj_set_state+0x358>)
    3196:	4798      	blx	r3
    3198:	9b02      	ldr	r3, [sp, #8]
    319a:	3302      	adds	r3, #2
    319c:	9302      	str	r3, [sp, #8]
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
    319e:	2b0c      	cmp	r3, #12
    31a0:	d100      	bne.n	31a4 <lv_obj_set_state+0x120>
    31a2:	e137      	b.n	3414 <lv_obj_set_state+0x390>
            if(props[i] != 0) {
    31a4:	ab09      	add	r3, sp, #36	; 0x24
    31a6:	9a02      	ldr	r2, [sp, #8]
    31a8:	5ad5      	ldrh	r5, [r2, r3]
    31aa:	2d00      	cmp	r5, #0
    31ac:	d0f4      	beq.n	3198 <lv_obj_set_state+0x114>
                _lv_style_list_add_trans_style(style_list);
    31ae:	9803      	ldr	r0, [sp, #12]
    31b0:	4b8b      	ldr	r3, [pc, #556]	; (33e0 <lv_obj_set_state+0x35c>)
    31b2:	4798      	blx	r3
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    31b4:	9900      	ldr	r1, [sp, #0]
    31b6:	0020      	movs	r0, r4
    31b8:	4b8a      	ldr	r3, [pc, #552]	; (33e4 <lv_obj_set_state+0x360>)
    31ba:	4798      	blx	r3
    31bc:	0006      	movs	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    31be:	4b8a      	ldr	r3, [pc, #552]	; (33e8 <lv_obj_set_state+0x364>)
    31c0:	4798      	blx	r3
    31c2:	9001      	str	r0, [sp, #4]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    31c4:	230f      	movs	r3, #15
    31c6:	402b      	ands	r3, r5
    31c8:	2b08      	cmp	r3, #8
    31ca:	dc00      	bgt.n	31ce <lv_obj_set_state+0x14a>
    31cc:	e77b      	b.n	30c6 <lv_obj_set_state+0x42>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    31ce:	2b0b      	cmp	r3, #11
    31d0:	dd59      	ble.n	3286 <lv_obj_set_state+0x202>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    31d2:	2b0d      	cmp	r3, #13
    31d4:	dd00      	ble.n	31d8 <lv_obj_set_state+0x154>
    31d6:	e0a3      	b.n	3320 <lv_obj_set_state+0x29c>
        style_list->skip_trans = 1;
    31d8:	7973      	ldrb	r3, [r6, #5]
    31da:	2204      	movs	r2, #4
    31dc:	4313      	orrs	r3, r2
    31de:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    31e0:	233d      	movs	r3, #61	; 0x3d
    31e2:	4699      	mov	r9, r3
    31e4:	4652      	mov	r2, sl
    31e6:	54e2      	strb	r2, [r4, r3]
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    31e8:	002a      	movs	r2, r5
    31ea:	9900      	ldr	r1, [sp, #0]
    31ec:	0020      	movs	r0, r4
    31ee:	4f7f      	ldr	r7, [pc, #508]	; (33ec <lv_obj_set_state+0x368>)
    31f0:	47b8      	blx	r7
    31f2:	4680      	mov	r8, r0
        obj->state = new_state;
    31f4:	464b      	mov	r3, r9
    31f6:	465a      	mov	r2, fp
    31f8:	54e2      	strb	r2, [r4, r3]
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    31fa:	002a      	movs	r2, r5
    31fc:	9900      	ldr	r1, [sp, #0]
    31fe:	0020      	movs	r0, r4
    3200:	47b8      	blx	r7
    3202:	0007      	movs	r7, r0
        style_list->skip_trans = 0;
    3204:	7973      	ldrb	r3, [r6, #5]
    3206:	2204      	movs	r2, #4
    3208:	4393      	bics	r3, r2
    320a:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
    320c:	4643      	mov	r3, r8
    320e:	4283      	cmp	r3, r0
    3210:	d0c2      	beq.n	3198 <lv_obj_set_state+0x114>
        obj->state = prev_state;
    3212:	263d      	movs	r6, #61	; 0x3d
    3214:	4653      	mov	r3, sl
    3216:	55a3      	strb	r3, [r4, r6]
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    3218:	002a      	movs	r2, r5
    321a:	9900      	ldr	r1, [sp, #0]
    321c:	0020      	movs	r0, r4
    321e:	4b73      	ldr	r3, [pc, #460]	; (33ec <lv_obj_set_state+0x368>)
    3220:	4798      	blx	r3
    3222:	0002      	movs	r2, r0
    3224:	9007      	str	r0, [sp, #28]
        obj->state = new_state;
    3226:	465b      	mov	r3, fp
    3228:	55a3      	strb	r3, [r4, r6]
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    322a:	0029      	movs	r1, r5
    322c:	9801      	ldr	r0, [sp, #4]
    322e:	4b70      	ldr	r3, [pc, #448]	; (33f0 <lv_obj_set_state+0x36c>)
    3230:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    3232:	4864      	ldr	r0, [pc, #400]	; (33c4 <lv_obj_set_state+0x340>)
    3234:	4b64      	ldr	r3, [pc, #400]	; (33c8 <lv_obj_set_state+0x344>)
    3236:	4798      	blx	r3
    3238:	0006      	movs	r6, r0
        LV_ASSERT_MEM(tr);
    323a:	4b5d      	ldr	r3, [pc, #372]	; (33b0 <lv_obj_set_state+0x32c>)
    323c:	4798      	blx	r3
    323e:	2800      	cmp	r0, #0
    3240:	d068      	beq.n	3314 <lv_obj_set_state+0x290>
        if(tr == NULL) return NULL;
    3242:	2e00      	cmp	r6, #0
    3244:	d0a8      	beq.n	3198 <lv_obj_set_state+0x114>
        tr->start_value._opa = o1;
    3246:	466b      	mov	r3, sp
    3248:	7f1b      	ldrb	r3, [r3, #28]
    324a:	7233      	strb	r3, [r6, #8]
        tr->end_value._opa = o2;
    324c:	7337      	strb	r7, [r6, #12]
    324e:	e779      	b.n	3144 <lv_obj_set_state+0xc0>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
    3250:	4b68      	ldr	r3, [pc, #416]	; (33f4 <lv_obj_set_state+0x370>)
    3252:	4599      	cmp	r9, r3
    3254:	d100      	bne.n	3258 <lv_obj_set_state+0x1d4>
    3256:	e133      	b.n	34c0 <lv_obj_set_state+0x43c>
    3258:	4598      	cmp	r8, r3
    325a:	d000      	beq.n	325e <lv_obj_set_state+0x1da>
    325c:	e763      	b.n	3126 <lv_obj_set_state+0xa2>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    325e:	0020      	movs	r0, r4
    3260:	4f65      	ldr	r7, [pc, #404]	; (33f8 <lv_obj_set_state+0x374>)
    3262:	47b8      	blx	r7
    3264:	0fc6      	lsrs	r6, r0, #31
    3266:	1836      	adds	r6, r6, r0
    3268:	1076      	asrs	r6, r6, #1
    326a:	b236      	sxth	r6, r6
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    326c:	0020      	movs	r0, r4
    326e:	47b8      	blx	r7
    3270:	0fc3      	lsrs	r3, r0, #31
    3272:	181b      	adds	r3, r3, r0
    3274:	105b      	asrs	r3, r3, #1
    3276:	b21b      	sxth	r3, r3
    3278:	e13a      	b.n	34f0 <lv_obj_set_state+0x46c>
        LV_ASSERT_MEM(tr);
    327a:	0032      	movs	r2, r6
    327c:	2300      	movs	r3, #0
    327e:	485f      	ldr	r0, [pc, #380]	; (33fc <lv_obj_set_state+0x378>)
    3280:	494d      	ldr	r1, [pc, #308]	; (33b8 <lv_obj_set_state+0x334>)
    3282:	4788      	blx	r1
    3284:	e7fe      	b.n	3284 <lv_obj_set_state+0x200>
        style_list->skip_trans = 1;
    3286:	7973      	ldrb	r3, [r6, #5]
    3288:	2204      	movs	r2, #4
    328a:	4313      	orrs	r3, r2
    328c:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    328e:	233d      	movs	r3, #61	; 0x3d
    3290:	4699      	mov	r9, r3
    3292:	4652      	mov	r2, sl
    3294:	54e2      	strb	r2, [r4, r3]
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    3296:	002a      	movs	r2, r5
    3298:	9900      	ldr	r1, [sp, #0]
    329a:	0020      	movs	r0, r4
    329c:	4b58      	ldr	r3, [pc, #352]	; (3400 <lv_obj_set_state+0x37c>)
    329e:	4698      	mov	r8, r3
    32a0:	4798      	blx	r3
    32a2:	1c07      	adds	r7, r0, #0
        obj->state = new_state;
    32a4:	464b      	mov	r3, r9
    32a6:	465a      	mov	r2, fp
    32a8:	54e2      	strb	r2, [r4, r3]
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    32aa:	002a      	movs	r2, r5
    32ac:	9900      	ldr	r1, [sp, #0]
    32ae:	0020      	movs	r0, r4
    32b0:	47c0      	blx	r8
    32b2:	466b      	mov	r3, sp
    32b4:	8398      	strh	r0, [r3, #28]
        style_list->skip_trans = 0;
    32b6:	7973      	ldrb	r3, [r6, #5]
    32b8:	2204      	movs	r2, #4
    32ba:	4393      	bics	r3, r2
    32bc:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
    32be:	b2bf      	uxth	r7, r7
    32c0:	b283      	uxth	r3, r0
    32c2:	429f      	cmp	r7, r3
    32c4:	d100      	bne.n	32c8 <lv_obj_set_state+0x244>
    32c6:	e767      	b.n	3198 <lv_obj_set_state+0x114>
        obj->state = prev_state;
    32c8:	263d      	movs	r6, #61	; 0x3d
    32ca:	4653      	mov	r3, sl
    32cc:	55a3      	strb	r3, [r4, r6]
        c1 = _lv_obj_get_style_color(obj, part, prop);
    32ce:	002a      	movs	r2, r5
    32d0:	9900      	ldr	r1, [sp, #0]
    32d2:	0020      	movs	r0, r4
    32d4:	4b4a      	ldr	r3, [pc, #296]	; (3400 <lv_obj_set_state+0x37c>)
    32d6:	4798      	blx	r3
    32d8:	1c07      	adds	r7, r0, #0
        obj->state = new_state;
    32da:	465b      	mov	r3, fp
    32dc:	55a3      	strb	r3, [r4, r6]
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    32de:	1c02      	adds	r2, r0, #0
    32e0:	0029      	movs	r1, r5
    32e2:	9801      	ldr	r0, [sp, #4]
    32e4:	4b47      	ldr	r3, [pc, #284]	; (3404 <lv_obj_set_state+0x380>)
    32e6:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    32e8:	4836      	ldr	r0, [pc, #216]	; (33c4 <lv_obj_set_state+0x340>)
    32ea:	4b37      	ldr	r3, [pc, #220]	; (33c8 <lv_obj_set_state+0x344>)
    32ec:	4798      	blx	r3
    32ee:	0006      	movs	r6, r0
        LV_ASSERT_MEM(tr);
    32f0:	4b2f      	ldr	r3, [pc, #188]	; (33b0 <lv_obj_set_state+0x32c>)
    32f2:	4798      	blx	r3
    32f4:	2800      	cmp	r0, #0
    32f6:	d007      	beq.n	3308 <lv_obj_set_state+0x284>
        if(tr == NULL) return NULL;
    32f8:	2e00      	cmp	r6, #0
    32fa:	d100      	bne.n	32fe <lv_obj_set_state+0x27a>
    32fc:	e74c      	b.n	3198 <lv_obj_set_state+0x114>
        tr->start_value._color = c1;
    32fe:	8137      	strh	r7, [r6, #8]
        tr->end_value._color = c2;
    3300:	466b      	mov	r3, sp
    3302:	8b9b      	ldrh	r3, [r3, #28]
    3304:	81b3      	strh	r3, [r6, #12]
    3306:	e71d      	b.n	3144 <lv_obj_set_state+0xc0>
        LV_ASSERT_MEM(tr);
    3308:	0032      	movs	r2, r6
    330a:	2300      	movs	r3, #0
    330c:	483b      	ldr	r0, [pc, #236]	; (33fc <lv_obj_set_state+0x378>)
    330e:	492a      	ldr	r1, [pc, #168]	; (33b8 <lv_obj_set_state+0x334>)
    3310:	4788      	blx	r1
    3312:	e7fe      	b.n	3312 <lv_obj_set_state+0x28e>
        LV_ASSERT_MEM(tr);
    3314:	0032      	movs	r2, r6
    3316:	2300      	movs	r3, #0
    3318:	4838      	ldr	r0, [pc, #224]	; (33fc <lv_obj_set_state+0x378>)
    331a:	4927      	ldr	r1, [pc, #156]	; (33b8 <lv_obj_set_state+0x334>)
    331c:	4788      	blx	r1
    331e:	e7fe      	b.n	331e <lv_obj_set_state+0x29a>
        obj->state = prev_state;
    3320:	233d      	movs	r3, #61	; 0x3d
    3322:	4699      	mov	r9, r3
    3324:	4652      	mov	r2, sl
    3326:	54e2      	strb	r2, [r4, r3]
        style_list->skip_trans = 1;
    3328:	7973      	ldrb	r3, [r6, #5]
    332a:	2204      	movs	r2, #4
    332c:	4313      	orrs	r3, r2
    332e:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    3330:	002a      	movs	r2, r5
    3332:	9900      	ldr	r1, [sp, #0]
    3334:	0020      	movs	r0, r4
    3336:	4f34      	ldr	r7, [pc, #208]	; (3408 <lv_obj_set_state+0x384>)
    3338:	47b8      	blx	r7
    333a:	9008      	str	r0, [sp, #32]
        obj->state = new_state;
    333c:	464b      	mov	r3, r9
    333e:	465a      	mov	r2, fp
    3340:	54e2      	strb	r2, [r4, r3]
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    3342:	002a      	movs	r2, r5
    3344:	9900      	ldr	r1, [sp, #0]
    3346:	0020      	movs	r0, r4
    3348:	47b8      	blx	r7
    334a:	0007      	movs	r7, r0
    334c:	900c      	str	r0, [sp, #48]	; 0x30
        style_list->skip_trans = 0;
    334e:	7973      	ldrb	r3, [r6, #5]
    3350:	2204      	movs	r2, #4
    3352:	4393      	bics	r3, r2
    3354:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
    3356:	a90c      	add	r1, sp, #48	; 0x30
    3358:	a808      	add	r0, sp, #32
    335a:	4b2c      	ldr	r3, [pc, #176]	; (340c <lv_obj_set_state+0x388>)
    335c:	4798      	blx	r3
    335e:	2800      	cmp	r0, #0
    3360:	d100      	bne.n	3364 <lv_obj_set_state+0x2e0>
    3362:	e719      	b.n	3198 <lv_obj_set_state+0x114>
        obj->state = prev_state;
    3364:	263d      	movs	r6, #61	; 0x3d
    3366:	4653      	mov	r3, sl
    3368:	55a3      	strb	r3, [r4, r6]
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    336a:	002a      	movs	r2, r5
    336c:	9900      	ldr	r1, [sp, #0]
    336e:	0020      	movs	r0, r4
    3370:	4b25      	ldr	r3, [pc, #148]	; (3408 <lv_obj_set_state+0x384>)
    3372:	4798      	blx	r3
    3374:	4681      	mov	r9, r0
    3376:	9008      	str	r0, [sp, #32]
        obj->state = new_state;
    3378:	465b      	mov	r3, fp
    337a:	55a3      	strb	r3, [r4, r6]
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    337c:	0002      	movs	r2, r0
    337e:	0029      	movs	r1, r5
    3380:	9801      	ldr	r0, [sp, #4]
    3382:	4b23      	ldr	r3, [pc, #140]	; (3410 <lv_obj_set_state+0x38c>)
    3384:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    3386:	480f      	ldr	r0, [pc, #60]	; (33c4 <lv_obj_set_state+0x340>)
    3388:	4b0f      	ldr	r3, [pc, #60]	; (33c8 <lv_obj_set_state+0x344>)
    338a:	4798      	blx	r3
    338c:	0006      	movs	r6, r0
        LV_ASSERT_MEM(tr);
    338e:	4b08      	ldr	r3, [pc, #32]	; (33b0 <lv_obj_set_state+0x32c>)
    3390:	4798      	blx	r3
    3392:	2800      	cmp	r0, #0
    3394:	d006      	beq.n	33a4 <lv_obj_set_state+0x320>
        if(tr == NULL) return NULL;
    3396:	2e00      	cmp	r6, #0
    3398:	d100      	bne.n	339c <lv_obj_set_state+0x318>
    339a:	e6fd      	b.n	3198 <lv_obj_set_state+0x114>
        tr->start_value._ptr = p1;
    339c:	464b      	mov	r3, r9
    339e:	60b3      	str	r3, [r6, #8]
        tr->end_value._ptr = p2;
    33a0:	60f7      	str	r7, [r6, #12]
    33a2:	e6cf      	b.n	3144 <lv_obj_set_state+0xc0>
        LV_ASSERT_MEM(tr);
    33a4:	0032      	movs	r2, r6
    33a6:	2300      	movs	r3, #0
    33a8:	4814      	ldr	r0, [pc, #80]	; (33fc <lv_obj_set_state+0x378>)
    33aa:	4903      	ldr	r1, [pc, #12]	; (33b8 <lv_obj_set_state+0x334>)
    33ac:	4788      	blx	r1
    33ae:	e7fe      	b.n	33ae <lv_obj_set_state+0x32a>
    33b0:	00001415 	.word	0x00001415
    33b4:	0001886c 	.word	0x0001886c
    33b8:	0000141d 	.word	0x0000141d
    33bc:	00002d49 	.word	0x00002d49
    33c0:	00004c8d 	.word	0x00004c8d
    33c4:	20004d68 	.word	0x20004d68
    33c8:	00010565 	.word	0x00010565
    33cc:	0000f9e5 	.word	0x0000f9e5
    33d0:	00002731 	.word	0x00002731
    33d4:	00003011 	.word	0x00003011
    33d8:	00001d99 	.word	0x00001d99
    33dc:	0000faa5 	.word	0x0000faa5
    33e0:	00005701 	.word	0x00005701
    33e4:	00001c91 	.word	0x00001c91
    33e8:	000055b9 	.word	0x000055b9
    33ec:	00002ead 	.word	0x00002ead
    33f0:	00004f4d 	.word	0x00004f4d
    33f4:	00007fff 	.word	0x00007fff
    33f8:	00001c31 	.word	0x00001c31
    33fc:	00018804 	.word	0x00018804
    3400:	00002e09 	.word	0x00002e09
    3404:	00004ded 	.word	0x00004ded
    3408:	00002f59 	.word	0x00002f59
    340c:	00017efd 	.word	0x00017efd
    3410:	000050a1 	.word	0x000050a1
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    3414:	9b00      	ldr	r3, [sp, #0]
    3416:	3301      	adds	r3, #1
    3418:	b2db      	uxtb	r3, r3
    341a:	9300      	str	r3, [sp, #0]
    341c:	2b40      	cmp	r3, #64	; 0x40
    341e:	d044      	beq.n	34aa <lv_obj_set_state+0x426>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    3420:	9900      	ldr	r1, [sp, #0]
    3422:	0020      	movs	r0, r4
    3424:	4b36      	ldr	r3, [pc, #216]	; (3500 <lv_obj_set_state+0x47c>)
    3426:	4798      	blx	r3
    3428:	9003      	str	r0, [sp, #12]
        if(style_list == NULL) break;   /*No more style lists*/
    342a:	2800      	cmp	r0, #0
    342c:	d03d      	beq.n	34aa <lv_obj_set_state+0x426>
        if(style_list->ignore_trans) continue;
    342e:	7943      	ldrb	r3, [r0, #5]
    3430:	071b      	lsls	r3, r3, #28
    3432:	d4ef      	bmi.n	3414 <lv_obj_set_state+0x390>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    3434:	22b0      	movs	r2, #176	; 0xb0
    3436:	9e00      	ldr	r6, [sp, #0]
    3438:	0031      	movs	r1, r6
    343a:	0020      	movs	r0, r4
    343c:	4b31      	ldr	r3, [pc, #196]	; (3504 <lv_obj_set_state+0x480>)
    343e:	4798      	blx	r3
    3440:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    3442:	22b1      	movs	r2, #177	; 0xb1
    3444:	0031      	movs	r1, r6
    3446:	0020      	movs	r0, r4
    3448:	4b2e      	ldr	r3, [pc, #184]	; (3504 <lv_obj_set_state+0x480>)
    344a:	4798      	blx	r3
    344c:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    344e:	22be      	movs	r2, #190	; 0xbe
    3450:	0031      	movs	r1, r6
    3452:	0020      	movs	r0, r4
    3454:	4b2c      	ldr	r3, [pc, #176]	; (3508 <lv_obj_set_state+0x484>)
    3456:	4798      	blx	r3
    3458:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    345a:	22b2      	movs	r2, #178	; 0xb2
    345c:	0031      	movs	r1, r6
    345e:	0020      	movs	r0, r4
    3460:	4b28      	ldr	r3, [pc, #160]	; (3504 <lv_obj_set_state+0x480>)
    3462:	4798      	blx	r3
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
    3464:	ad09      	add	r5, sp, #36	; 0x24
    3466:	8028      	strh	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
    3468:	22b3      	movs	r2, #179	; 0xb3
    346a:	0031      	movs	r1, r6
    346c:	0020      	movs	r0, r4
    346e:	4b25      	ldr	r3, [pc, #148]	; (3504 <lv_obj_set_state+0x480>)
    3470:	4798      	blx	r3
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
    3472:	8068      	strh	r0, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
    3474:	22b4      	movs	r2, #180	; 0xb4
    3476:	0031      	movs	r1, r6
    3478:	0020      	movs	r0, r4
    347a:	4b22      	ldr	r3, [pc, #136]	; (3504 <lv_obj_set_state+0x480>)
    347c:	4798      	blx	r3
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
    347e:	80a8      	strh	r0, [r5, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
    3480:	22b5      	movs	r2, #181	; 0xb5
    3482:	0031      	movs	r1, r6
    3484:	0020      	movs	r0, r4
    3486:	4b1f      	ldr	r3, [pc, #124]	; (3504 <lv_obj_set_state+0x480>)
    3488:	4798      	blx	r3
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
    348a:	80e8      	strh	r0, [r5, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
    348c:	22b6      	movs	r2, #182	; 0xb6
    348e:	0031      	movs	r1, r6
    3490:	0020      	movs	r0, r4
    3492:	4b1c      	ldr	r3, [pc, #112]	; (3504 <lv_obj_set_state+0x480>)
    3494:	4798      	blx	r3
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
    3496:	8128      	strh	r0, [r5, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
    3498:	22b7      	movs	r2, #183	; 0xb7
    349a:	0031      	movs	r1, r6
    349c:	0020      	movs	r0, r4
    349e:	4b19      	ldr	r3, [pc, #100]	; (3504 <lv_obj_set_state+0x480>)
    34a0:	4798      	blx	r3
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
    34a2:	8168      	strh	r0, [r5, #10]
    34a4:	2300      	movs	r3, #0
    34a6:	9302      	str	r3, [sp, #8]
    34a8:	e67c      	b.n	31a4 <lv_obj_set_state+0x120>
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    34aa:	21ff      	movs	r1, #255	; 0xff
    34ac:	0020      	movs	r0, r4
    34ae:	4b17      	ldr	r3, [pc, #92]	; (350c <lv_obj_set_state+0x488>)
    34b0:	4798      	blx	r3
}
    34b2:	b01d      	add	sp, #116	; 0x74
    34b4:	bc3c      	pop	{r2, r3, r4, r5}
    34b6:	4690      	mov	r8, r2
    34b8:	4699      	mov	r9, r3
    34ba:	46a2      	mov	sl, r4
    34bc:	46ab      	mov	fp, r5
    34be:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    34c0:	0020      	movs	r0, r4
    34c2:	4f13      	ldr	r7, [pc, #76]	; (3510 <lv_obj_set_state+0x48c>)
    34c4:	47b8      	blx	r7
    34c6:	0fc6      	lsrs	r6, r0, #31
    34c8:	1836      	adds	r6, r6, r0
    34ca:	1076      	asrs	r6, r6, #1
    34cc:	b236      	sxth	r6, r6
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    34ce:	0020      	movs	r0, r4
    34d0:	47b8      	blx	r7
    34d2:	0fc3      	lsrs	r3, r0, #31
    34d4:	181b      	adds	r3, r3, r0
    34d6:	105b      	asrs	r3, r3, #1
    34d8:	b21b      	sxth	r3, r3
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    34da:	1c71      	adds	r1, r6, #1
    34dc:	1c5a      	adds	r2, r3, #1
    34de:	428a      	cmp	r2, r1
    34e0:	dd00      	ble.n	34e4 <lv_obj_set_state+0x460>
    34e2:	000a      	movs	r2, r1
    34e4:	b212      	sxth	r2, r2
    34e6:	4691      	mov	r9, r2
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    34e8:	4a0a      	ldr	r2, [pc, #40]	; (3514 <lv_obj_set_state+0x490>)
    34ea:	4590      	cmp	r8, r2
    34ec:	d000      	beq.n	34f0 <lv_obj_set_state+0x46c>
    34ee:	e61a      	b.n	3126 <lv_obj_set_state+0xa2>
    34f0:	3601      	adds	r6, #1
    34f2:	3301      	adds	r3, #1
    34f4:	42b3      	cmp	r3, r6
    34f6:	dd00      	ble.n	34fa <lv_obj_set_state+0x476>
    34f8:	0033      	movs	r3, r6
    34fa:	b21b      	sxth	r3, r3
    34fc:	4698      	mov	r8, r3
    34fe:	e612      	b.n	3126 <lv_obj_set_state+0xa2>
    3500:	00001c91 	.word	0x00001c91
    3504:	00002d49 	.word	0x00002d49
    3508:	00002f59 	.word	0x00002f59
    350c:	00002525 	.word	0x00002525
    3510:	00001c31 	.word	0x00001c31
    3514:	00007fff 	.word	0x00007fff

00003518 <lv_obj_add_state>:
{
    3518:	b570      	push	{r4, r5, r6, lr}
    351a:	0004      	movs	r4, r0
    351c:	000d      	movs	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    351e:	4b0a      	ldr	r3, [pc, #40]	; (3548 <lv_obj_add_state+0x30>)
    3520:	4798      	blx	r3
    3522:	2800      	cmp	r0, #0
    3524:	d009      	beq.n	353a <lv_obj_add_state+0x22>
    lv_state_t new_state = obj->state | state;
    3526:	233d      	movs	r3, #61	; 0x3d
    3528:	5ce3      	ldrb	r3, [r4, r3]
    352a:	0029      	movs	r1, r5
    352c:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
    352e:	428b      	cmp	r3, r1
    3530:	d002      	beq.n	3538 <lv_obj_add_state+0x20>
        lv_obj_set_state(obj, new_state);
    3532:	0020      	movs	r0, r4
    3534:	4b05      	ldr	r3, [pc, #20]	; (354c <lv_obj_add_state+0x34>)
    3536:	4798      	blx	r3
}
    3538:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    353a:	0022      	movs	r2, r4
    353c:	2300      	movs	r3, #0
    353e:	4804      	ldr	r0, [pc, #16]	; (3550 <lv_obj_add_state+0x38>)
    3540:	4904      	ldr	r1, [pc, #16]	; (3554 <lv_obj_add_state+0x3c>)
    3542:	4788      	blx	r1
    3544:	e7fe      	b.n	3544 <lv_obj_add_state+0x2c>
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	00001415 	.word	0x00001415
    354c:	00003085 	.word	0x00003085
    3550:	0001886c 	.word	0x0001886c
    3554:	0000141d 	.word	0x0000141d

00003558 <lv_obj_clear_state>:
{
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	0004      	movs	r4, r0
    355c:	000d      	movs	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    355e:	4b0a      	ldr	r3, [pc, #40]	; (3588 <lv_obj_clear_state+0x30>)
    3560:	4798      	blx	r3
    3562:	2800      	cmp	r0, #0
    3564:	d009      	beq.n	357a <lv_obj_clear_state+0x22>
    lv_state_t new_state = obj->state & (~state);
    3566:	233d      	movs	r3, #61	; 0x3d
    3568:	5ce3      	ldrb	r3, [r4, r3]
    356a:	0019      	movs	r1, r3
    356c:	43a9      	bics	r1, r5
    if(obj->state != new_state) {
    356e:	428b      	cmp	r3, r1
    3570:	d002      	beq.n	3578 <lv_obj_clear_state+0x20>
        lv_obj_set_state(obj, new_state);
    3572:	0020      	movs	r0, r4
    3574:	4b05      	ldr	r3, [pc, #20]	; (358c <lv_obj_clear_state+0x34>)
    3576:	4798      	blx	r3
}
    3578:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    357a:	0022      	movs	r2, r4
    357c:	2300      	movs	r3, #0
    357e:	4804      	ldr	r0, [pc, #16]	; (3590 <lv_obj_clear_state+0x38>)
    3580:	4904      	ldr	r1, [pc, #16]	; (3594 <lv_obj_clear_state+0x3c>)
    3582:	4788      	blx	r1
    3584:	e7fe      	b.n	3584 <lv_obj_clear_state+0x2c>
    3586:	46c0      	nop			; (mov r8, r8)
    3588:	00001415 	.word	0x00001415
    358c:	00003085 	.word	0x00003085
    3590:	0001886c 	.word	0x0001886c
    3594:	0000141d 	.word	0x0000141d

00003598 <lv_obj_get_group>:
{
    3598:	b510      	push	{r4, lr}
    359a:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    359c:	4b05      	ldr	r3, [pc, #20]	; (35b4 <lv_obj_get_group+0x1c>)
    359e:	4798      	blx	r3
    35a0:	2800      	cmp	r0, #0
    35a2:	d001      	beq.n	35a8 <lv_obj_get_group+0x10>
    return obj->group_p;
    35a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
    35a6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35a8:	0022      	movs	r2, r4
    35aa:	2300      	movs	r3, #0
    35ac:	4802      	ldr	r0, [pc, #8]	; (35b8 <lv_obj_get_group+0x20>)
    35ae:	4903      	ldr	r1, [pc, #12]	; (35bc <lv_obj_get_group+0x24>)
    35b0:	4788      	blx	r1
    35b2:	e7fe      	b.n	35b2 <lv_obj_get_group+0x1a>
    35b4:	00001415 	.word	0x00001415
    35b8:	0001886c 	.word	0x0001886c
    35bc:	0000141d 	.word	0x0000141d

000035c0 <lv_obj_is_focused>:
{
    35c0:	b510      	push	{r4, lr}
    35c2:	0004      	movs	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35c4:	4b0a      	ldr	r3, [pc, #40]	; (35f0 <lv_obj_is_focused+0x30>)
    35c6:	4798      	blx	r3
    35c8:	2800      	cmp	r0, #0
    35ca:	d009      	beq.n	35e0 <lv_obj_is_focused+0x20>
    if(obj->group_p) {
    35cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    35ce:	2800      	cmp	r0, #0
    35d0:	d00c      	beq.n	35ec <lv_obj_is_focused+0x2c>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
    35d2:	4b08      	ldr	r3, [pc, #32]	; (35f4 <lv_obj_is_focused+0x34>)
    35d4:	4798      	blx	r3
    35d6:	1a20      	subs	r0, r4, r0
    35d8:	4244      	negs	r4, r0
    35da:	4160      	adcs	r0, r4
    35dc:	b2c0      	uxtb	r0, r0
}
    35de:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35e0:	0022      	movs	r2, r4
    35e2:	2300      	movs	r3, #0
    35e4:	4804      	ldr	r0, [pc, #16]	; (35f8 <lv_obj_is_focused+0x38>)
    35e6:	4905      	ldr	r1, [pc, #20]	; (35fc <lv_obj_is_focused+0x3c>)
    35e8:	4788      	blx	r1
    35ea:	e7fe      	b.n	35ea <lv_obj_is_focused+0x2a>
    return false;
    35ec:	2000      	movs	r0, #0
    35ee:	e7f6      	b.n	35de <lv_obj_is_focused+0x1e>
    35f0:	00001415 	.word	0x00001415
    35f4:	000016dd 	.word	0x000016dd
    35f8:	0001886c 	.word	0x0001886c
    35fc:	0000141d 	.word	0x0000141d

00003600 <lv_obj_handle_get_type_signal>:
{
    3600:	b510      	push	{r4, lr}
        if(buf->type[i] == NULL) break;
    3602:	6803      	ldr	r3, [r0, #0]
    3604:	2b00      	cmp	r3, #0
    3606:	d00d      	beq.n	3624 <lv_obj_handle_get_type_signal+0x24>
    3608:	1d02      	adds	r2, r0, #4
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    360a:	2301      	movs	r3, #1
        if(buf->type[i] == NULL) break;
    360c:	6814      	ldr	r4, [r2, #0]
    360e:	2c00      	cmp	r4, #0
    3610:	d004      	beq.n	361c <lv_obj_handle_get_type_signal+0x1c>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    3612:	3301      	adds	r3, #1
    3614:	b2db      	uxtb	r3, r3
    3616:	3204      	adds	r2, #4
    3618:	2b07      	cmp	r3, #7
    361a:	d1f7      	bne.n	360c <lv_obj_handle_get_type_signal+0xc>
    buf->type[i] = name;
    361c:	009b      	lsls	r3, r3, #2
    361e:	5019      	str	r1, [r3, r0]
}
    3620:	2001      	movs	r0, #1
    3622:	bd10      	pop	{r4, pc}
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    3624:	2300      	movs	r3, #0
    3626:	e7f9      	b.n	361c <lv_obj_handle_get_type_signal+0x1c>

00003628 <lv_obj_init_draw_rect_dsc>:
{
    3628:	b5f0      	push	{r4, r5, r6, r7, lr}
    362a:	46ce      	mov	lr, r9
    362c:	b500      	push	{lr}
    362e:	b082      	sub	sp, #8
    3630:	0005      	movs	r5, r0
    3632:	000e      	movs	r6, r1
    3634:	0014      	movs	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    3636:	2201      	movs	r2, #1
    3638:	4bc8      	ldr	r3, [pc, #800]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    363a:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
    363c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    363e:	4ac8      	ldr	r2, [pc, #800]	; (3960 <lv_obj_init_draw_rect_dsc+0x338>)
    3640:	0031      	movs	r1, r6
    3642:	0028      	movs	r0, r5
    3644:	4bc7      	ldr	r3, [pc, #796]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    3646:	4798      	blx	r3
    3648:	9001      	str	r0, [sp, #4]
    364a:	0007      	movs	r7, r0
    if(opa_scale <= LV_OPA_MIN) {
    364c:	2805      	cmp	r0, #5
    364e:	d935      	bls.n	36bc <lv_obj_init_draw_rect_dsc+0x94>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
    3650:	7b23      	ldrb	r3, [r4, #12]
    3652:	2b00      	cmp	r3, #0
    3654:	d13f      	bne.n	36d6 <lv_obj_init_draw_rect_dsc+0xae>
    if(draw_dsc->border_opa != LV_OPA_TRANSP) {
    3656:	7d23      	ldrb	r3, [r4, #20]
    3658:	2b00      	cmp	r3, #0
    365a:	d000      	beq.n	365e <lv_obj_init_draw_rect_dsc+0x36>
    365c:	e06c      	b.n	3738 <lv_obj_init_draw_rect_dsc+0x110>
    if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
    365e:	7f23      	ldrb	r3, [r4, #28]
    3660:	2b00      	cmp	r3, #0
    3662:	d000      	beq.n	3666 <lv_obj_init_draw_rect_dsc+0x3e>
    3664:	e08f      	b.n	3786 <lv_obj_init_draw_rect_dsc+0x15e>
    if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
    3666:	2336      	movs	r3, #54	; 0x36
    3668:	5ce3      	ldrb	r3, [r4, r3]
    366a:	2b00      	cmp	r3, #0
    366c:	d000      	beq.n	3670 <lv_obj_init_draw_rect_dsc+0x48>
    366e:	e0af      	b.n	37d0 <lv_obj_init_draw_rect_dsc+0x1a8>
    if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    3670:	2328      	movs	r3, #40	; 0x28
    3672:	5ce3      	ldrb	r3, [r4, r3]
    3674:	2b05      	cmp	r3, #5
    3676:	d900      	bls.n	367a <lv_obj_init_draw_rect_dsc+0x52>
    3678:	e0f7      	b.n	386a <lv_obj_init_draw_rect_dsc+0x242>
    if(draw_dsc->value_opa > LV_OPA_MIN) {
    367a:	2344      	movs	r3, #68	; 0x44
    367c:	5ce3      	ldrb	r3, [r4, r3]
    367e:	2b05      	cmp	r3, #5
    3680:	d900      	bls.n	3684 <lv_obj_init_draw_rect_dsc+0x5c>
    3682:	e123      	b.n	38cc <lv_obj_init_draw_rect_dsc+0x2a4>
    if(opa_scale < LV_OPA_MAX) {
    3684:	2ff9      	cmp	r7, #249	; 0xf9
    3686:	d822      	bhi.n	36ce <lv_obj_init_draw_rect_dsc+0xa6>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
    3688:	466b      	mov	r3, sp
    368a:	889b      	ldrh	r3, [r3, #4]
    368c:	7b22      	ldrb	r2, [r4, #12]
    368e:	435a      	muls	r2, r3
    3690:	0a12      	lsrs	r2, r2, #8
    3692:	7322      	strb	r2, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
    3694:	7d22      	ldrb	r2, [r4, #20]
    3696:	435a      	muls	r2, r3
    3698:	0a12      	lsrs	r2, r2, #8
    369a:	7522      	strb	r2, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
    369c:	2128      	movs	r1, #40	; 0x28
    369e:	5c62      	ldrb	r2, [r4, r1]
    36a0:	435a      	muls	r2, r3
    36a2:	0a12      	lsrs	r2, r2, #8
    36a4:	5462      	strb	r2, [r4, r1]
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
    36a6:	310e      	adds	r1, #14
    36a8:	5c62      	ldrb	r2, [r4, r1]
    36aa:	435a      	muls	r2, r3
    36ac:	0a12      	lsrs	r2, r2, #8
    36ae:	5462      	strb	r2, [r4, r1]
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
    36b0:	2244      	movs	r2, #68	; 0x44
    36b2:	5ca7      	ldrb	r7, [r4, r2]
    36b4:	435f      	muls	r7, r3
    36b6:	0a3f      	lsrs	r7, r7, #8
    36b8:	54a7      	strb	r7, [r4, r2]
    36ba:	e008      	b.n	36ce <lv_obj_init_draw_rect_dsc+0xa6>
        draw_dsc->bg_opa = LV_OPA_TRANSP;
    36bc:	2300      	movs	r3, #0
    36be:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
    36c0:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
    36c2:	2228      	movs	r2, #40	; 0x28
    36c4:	54a3      	strb	r3, [r4, r2]
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
    36c6:	320e      	adds	r2, #14
    36c8:	54a3      	strb	r3, [r4, r2]
        draw_dsc->value_opa = LV_OPA_TRANSP;
    36ca:	320e      	adds	r2, #14
    36cc:	54a3      	strb	r3, [r4, r2]
}
    36ce:	b002      	add	sp, #8
    36d0:	bc04      	pop	{r2}
    36d2:	4691      	mov	r9, r2
    36d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    36d6:	222c      	movs	r2, #44	; 0x2c
    36d8:	0031      	movs	r1, r6
    36da:	0028      	movs	r0, r5
    36dc:	4ba1      	ldr	r3, [pc, #644]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    36de:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
    36e0:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
    36e2:	2805      	cmp	r0, #5
    36e4:	d9b7      	bls.n	3656 <lv_obj_init_draw_rect_dsc+0x2e>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
    36e6:	2229      	movs	r2, #41	; 0x29
    36e8:	0031      	movs	r1, r6
    36ea:	0028      	movs	r0, r5
    36ec:	4b9e      	ldr	r3, [pc, #632]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    36ee:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
    36f0:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
    36f2:	2223      	movs	r2, #35	; 0x23
    36f4:	0031      	movs	r1, r6
    36f6:	0028      	movs	r0, r5
    36f8:	4b98      	ldr	r3, [pc, #608]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    36fa:	4798      	blx	r3
    36fc:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
    36fe:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
    3700:	2800      	cmp	r0, #0
    3702:	d106      	bne.n	3712 <lv_obj_init_draw_rect_dsc+0xea>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    3704:	2220      	movs	r2, #32
    3706:	0031      	movs	r1, r6
    3708:	0028      	movs	r0, r5
    370a:	4b94      	ldr	r3, [pc, #592]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    370c:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
    370e:	7360      	strb	r0, [r4, #13]
    3710:	e7a1      	b.n	3656 <lv_obj_init_draw_rect_dsc+0x2e>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
    3712:	222a      	movs	r2, #42	; 0x2a
    3714:	0031      	movs	r1, r6
    3716:	0028      	movs	r0, r5
    3718:	4b93      	ldr	r3, [pc, #588]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    371a:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
    371c:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
    371e:	2221      	movs	r2, #33	; 0x21
    3720:	0031      	movs	r1, r6
    3722:	0028      	movs	r0, r5
    3724:	4b8d      	ldr	r3, [pc, #564]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    3726:	4699      	mov	r9, r3
    3728:	4798      	blx	r3
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
    372a:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
    372c:	2222      	movs	r2, #34	; 0x22
    372e:	0031      	movs	r1, r6
    3730:	0028      	movs	r0, r5
    3732:	47c8      	blx	r9
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
    3734:	8160      	strh	r0, [r4, #10]
    3736:	e7e5      	b.n	3704 <lv_obj_init_draw_rect_dsc+0xdc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
    3738:	2230      	movs	r2, #48	; 0x30
    373a:	0031      	movs	r1, r6
    373c:	0028      	movs	r0, r5
    373e:	4b87      	ldr	r3, [pc, #540]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    3740:	4798      	blx	r3
        draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
    3742:	8220      	strh	r0, [r4, #16]
        if(draw_dsc->border_width) {
    3744:	2800      	cmp	r0, #0
    3746:	d100      	bne.n	374a <lv_obj_init_draw_rect_dsc+0x122>
    3748:	e789      	b.n	365e <lv_obj_init_draw_rect_dsc+0x36>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
    374a:	223c      	movs	r2, #60	; 0x3c
    374c:	0031      	movs	r1, r6
    374e:	0028      	movs	r0, r5
    3750:	4b84      	ldr	r3, [pc, #528]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    3752:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
    3754:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
    3756:	2805      	cmp	r0, #5
    3758:	d806      	bhi.n	3768 <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    375a:	2232      	movs	r2, #50	; 0x32
    375c:	0031      	movs	r1, r6
    375e:	0028      	movs	r0, r5
    3760:	4b7e      	ldr	r3, [pc, #504]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    3762:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
    3764:	7560      	strb	r0, [r4, #21]
    3766:	e77a      	b.n	365e <lv_obj_init_draw_rect_dsc+0x36>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
    3768:	2231      	movs	r2, #49	; 0x31
    376a:	0031      	movs	r1, r6
    376c:	0028      	movs	r0, r5
    376e:	4b7b      	ldr	r3, [pc, #492]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    3770:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
    3772:	23ff      	movs	r3, #255	; 0xff
    3774:	4018      	ands	r0, r3
    3776:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
    3778:	2239      	movs	r2, #57	; 0x39
    377a:	0031      	movs	r1, r6
    377c:	0028      	movs	r0, r5
    377e:	4b7a      	ldr	r3, [pc, #488]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    3780:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
    3782:	81e0      	strh	r0, [r4, #14]
    3784:	e7e9      	b.n	375a <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    3786:	2240      	movs	r2, #64	; 0x40
    3788:	0031      	movs	r1, r6
    378a:	0028      	movs	r0, r5
    378c:	4b73      	ldr	r3, [pc, #460]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    378e:	4798      	blx	r3
        draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
    3790:	8320      	strh	r0, [r4, #24]
        if(draw_dsc->outline_width) {
    3792:	2800      	cmp	r0, #0
    3794:	d100      	bne.n	3798 <lv_obj_init_draw_rect_dsc+0x170>
    3796:	e766      	b.n	3666 <lv_obj_init_draw_rect_dsc+0x3e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    3798:	224c      	movs	r2, #76	; 0x4c
    379a:	0031      	movs	r1, r6
    379c:	0028      	movs	r0, r5
    379e:	4b71      	ldr	r3, [pc, #452]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    37a0:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
    37a2:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
    37a4:	2805      	cmp	r0, #5
    37a6:	d806      	bhi.n	37b6 <lv_obj_init_draw_rect_dsc+0x18e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
    37a8:	2242      	movs	r2, #66	; 0x42
    37aa:	0031      	movs	r1, r6
    37ac:	0028      	movs	r0, r5
    37ae:	4b6b      	ldr	r3, [pc, #428]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    37b0:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
    37b2:	7760      	strb	r0, [r4, #29]
    37b4:	e757      	b.n	3666 <lv_obj_init_draw_rect_dsc+0x3e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    37b6:	2241      	movs	r2, #65	; 0x41
    37b8:	0031      	movs	r1, r6
    37ba:	0028      	movs	r0, r5
    37bc:	4b67      	ldr	r3, [pc, #412]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    37be:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
    37c0:	8360      	strh	r0, [r4, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
    37c2:	2249      	movs	r2, #73	; 0x49
    37c4:	0031      	movs	r1, r6
    37c6:	0028      	movs	r0, r5
    37c8:	4b67      	ldr	r3, [pc, #412]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    37ca:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
    37cc:	82e0      	strh	r0, [r4, #22]
    37ce:	e7eb      	b.n	37a8 <lv_obj_init_draw_rect_dsc+0x180>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
    37d0:	226e      	movs	r2, #110	; 0x6e
    37d2:	0031      	movs	r1, r6
    37d4:	0028      	movs	r0, r5
    37d6:	4b65      	ldr	r3, [pc, #404]	; (396c <lv_obj_init_draw_rect_dsc+0x344>)
    37d8:	4798      	blx	r3
        draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
    37da:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(draw_dsc->pattern_image) {
    37dc:	2800      	cmp	r0, #0
    37de:	d100      	bne.n	37e2 <lv_obj_init_draw_rect_dsc+0x1ba>
    37e0:	e746      	b.n	3670 <lv_obj_init_draw_rect_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
    37e2:	226c      	movs	r2, #108	; 0x6c
    37e4:	0031      	movs	r1, r6
    37e6:	0028      	movs	r0, r5
    37e8:	4b5e      	ldr	r3, [pc, #376]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    37ea:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
    37ec:	2336      	movs	r3, #54	; 0x36
    37ee:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
    37f0:	2805      	cmp	r0, #5
    37f2:	d800      	bhi.n	37f6 <lv_obj_init_draw_rect_dsc+0x1ce>
    37f4:	e73c      	b.n	3670 <lv_obj_init_draw_rect_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
    37f6:	226d      	movs	r2, #109	; 0x6d
    37f8:	0031      	movs	r1, r6
    37fa:	0028      	movs	r0, r5
    37fc:	4b59      	ldr	r3, [pc, #356]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    37fe:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
    3800:	2337      	movs	r3, #55	; 0x37
    3802:	54e0      	strb	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
    3804:	2261      	movs	r2, #97	; 0x61
    3806:	0031      	movs	r1, r6
    3808:	0028      	movs	r0, r5
    380a:	4b54      	ldr	r3, [pc, #336]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    380c:	4798      	blx	r3
    380e:	0003      	movs	r3, r0
    3810:	1e58      	subs	r0, r3, #1
    3812:	4183      	sbcs	r3, r0
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
    3814:	2238      	movs	r2, #56	; 0x38
    3816:	5ca0      	ldrb	r0, [r4, r2]
    3818:	2101      	movs	r1, #1
    381a:	4388      	bics	r0, r1
    381c:	4318      	orrs	r0, r3
    381e:	54a0      	strb	r0, [r4, r2]
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
    3820:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3822:	4b53      	ldr	r3, [pc, #332]	; (3970 <lv_obj_init_draw_rect_dsc+0x348>)
    3824:	4798      	blx	r3
    3826:	2802      	cmp	r0, #2
    3828:	d00b      	beq.n	3842 <lv_obj_init_draw_rect_dsc+0x21a>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
    382a:	2337      	movs	r3, #55	; 0x37
    382c:	5ce3      	ldrb	r3, [r4, r3]
    382e:	2b05      	cmp	r3, #5
    3830:	d814      	bhi.n	385c <lv_obj_init_draw_rect_dsc+0x234>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
    3832:	2260      	movs	r2, #96	; 0x60
    3834:	0031      	movs	r1, r6
    3836:	0028      	movs	r0, r5
    3838:	4b48      	ldr	r3, [pc, #288]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    383a:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
    383c:	2339      	movs	r3, #57	; 0x39
    383e:	54e0      	strb	r0, [r4, r3]
    3840:	e716      	b.n	3670 <lv_obj_init_draw_rect_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    3842:	2269      	movs	r2, #105	; 0x69
    3844:	0031      	movs	r1, r6
    3846:	0028      	movs	r0, r5
    3848:	4b47      	ldr	r3, [pc, #284]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    384a:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    384c:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    384e:	4a49      	ldr	r2, [pc, #292]	; (3974 <lv_obj_init_draw_rect_dsc+0x34c>)
    3850:	0031      	movs	r1, r6
    3852:	0028      	movs	r0, r5
    3854:	4b45      	ldr	r3, [pc, #276]	; (396c <lv_obj_init_draw_rect_dsc+0x344>)
    3856:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
    3858:	6320      	str	r0, [r4, #48]	; 0x30
    385a:	e7ea      	b.n	3832 <lv_obj_init_draw_rect_dsc+0x20a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    385c:	2269      	movs	r2, #105	; 0x69
    385e:	0031      	movs	r1, r6
    3860:	0028      	movs	r0, r5
    3862:	4b41      	ldr	r3, [pc, #260]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    3864:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    3866:	86a0      	strh	r0, [r4, #52]	; 0x34
    3868:	e7e3      	b.n	3832 <lv_obj_init_draw_rect_dsc+0x20a>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    386a:	2250      	movs	r2, #80	; 0x50
    386c:	0031      	movs	r1, r6
    386e:	0028      	movs	r0, r5
    3870:	4b3a      	ldr	r3, [pc, #232]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    3872:	4798      	blx	r3
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
    3874:	8420      	strh	r0, [r4, #32]
        if(draw_dsc->shadow_width) {
    3876:	2800      	cmp	r0, #0
    3878:	d100      	bne.n	387c <lv_obj_init_draw_rect_dsc+0x254>
    387a:	e6fe      	b.n	367a <lv_obj_init_draw_rect_dsc+0x52>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    387c:	225c      	movs	r2, #92	; 0x5c
    387e:	0031      	movs	r1, r6
    3880:	0028      	movs	r0, r5
    3882:	4b38      	ldr	r3, [pc, #224]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    3884:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
    3886:	2328      	movs	r3, #40	; 0x28
    3888:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    388a:	2805      	cmp	r0, #5
    388c:	d800      	bhi.n	3890 <lv_obj_init_draw_rect_dsc+0x268>
    388e:	e6f4      	b.n	367a <lv_obj_init_draw_rect_dsc+0x52>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    3890:	2251      	movs	r2, #81	; 0x51
    3892:	0031      	movs	r1, r6
    3894:	0028      	movs	r0, r5
    3896:	4b31      	ldr	r3, [pc, #196]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    3898:	4699      	mov	r9, r3
    389a:	4798      	blx	r3
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
    389c:	8460      	strh	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    389e:	2252      	movs	r2, #82	; 0x52
    38a0:	0031      	movs	r1, r6
    38a2:	0028      	movs	r0, r5
    38a4:	47c8      	blx	r9
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
    38a6:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    38a8:	2253      	movs	r2, #83	; 0x53
    38aa:	0031      	movs	r1, r6
    38ac:	0028      	movs	r0, r5
    38ae:	47c8      	blx	r9
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
    38b0:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
    38b2:	2259      	movs	r2, #89	; 0x59
    38b4:	0031      	movs	r1, r6
    38b6:	0028      	movs	r0, r5
    38b8:	4b2b      	ldr	r3, [pc, #172]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    38ba:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
    38bc:	83e0      	strh	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
    38be:	2254      	movs	r2, #84	; 0x54
    38c0:	0031      	movs	r1, r6
    38c2:	0028      	movs	r0, r5
    38c4:	47c8      	blx	r9
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
    38c6:	2329      	movs	r3, #41	; 0x29
    38c8:	54e0      	strb	r0, [r4, r3]
    38ca:	e6d6      	b.n	367a <lv_obj_init_draw_rect_dsc+0x52>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    38cc:	227f      	movs	r2, #127	; 0x7f
    38ce:	0031      	movs	r1, r6
    38d0:	0028      	movs	r0, r5
    38d2:	4b26      	ldr	r3, [pc, #152]	; (396c <lv_obj_init_draw_rect_dsc+0x344>)
    38d4:	4798      	blx	r3
        draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
    38d6:	63e0      	str	r0, [r4, #60]	; 0x3c
        if(draw_dsc->value_str) {
    38d8:	2800      	cmp	r0, #0
    38da:	d100      	bne.n	38de <lv_obj_init_draw_rect_dsc+0x2b6>
    38dc:	e6d2      	b.n	3684 <lv_obj_init_draw_rect_dsc+0x5c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    38de:	227c      	movs	r2, #124	; 0x7c
    38e0:	0031      	movs	r1, r6
    38e2:	0028      	movs	r0, r5
    38e4:	4b1f      	ldr	r3, [pc, #124]	; (3964 <lv_obj_init_draw_rect_dsc+0x33c>)
    38e6:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
    38e8:	2344      	movs	r3, #68	; 0x44
    38ea:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->value_opa > LV_OPA_MIN) {
    38ec:	2805      	cmp	r0, #5
    38ee:	d800      	bhi.n	38f2 <lv_obj_init_draw_rect_dsc+0x2ca>
    38f0:	e6c8      	b.n	3684 <lv_obj_init_draw_rect_dsc+0x5c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    38f2:	2273      	movs	r2, #115	; 0x73
    38f4:	0031      	movs	r1, r6
    38f6:	0028      	movs	r0, r5
    38f8:	4b18      	ldr	r3, [pc, #96]	; (395c <lv_obj_init_draw_rect_dsc+0x334>)
    38fa:	4699      	mov	r9, r3
    38fc:	4798      	blx	r3
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
    38fe:	2348      	movs	r3, #72	; 0x48
    3900:	52e0      	strh	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    3902:	2274      	movs	r2, #116	; 0x74
    3904:	0031      	movs	r1, r6
    3906:	0028      	movs	r0, r5
    3908:	47c8      	blx	r9
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
    390a:	234a      	movs	r3, #74	; 0x4a
    390c:	52e0      	strh	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
    390e:	2279      	movs	r2, #121	; 0x79
    3910:	0031      	movs	r1, r6
    3912:	0028      	movs	r0, r5
    3914:	4b14      	ldr	r3, [pc, #80]	; (3968 <lv_obj_init_draw_rect_dsc+0x340>)
    3916:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
    3918:	2346      	movs	r3, #70	; 0x46
    391a:	52e0      	strh	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    391c:	227e      	movs	r2, #126	; 0x7e
    391e:	0031      	movs	r1, r6
    3920:	0028      	movs	r0, r5
    3922:	4b12      	ldr	r3, [pc, #72]	; (396c <lv_obj_init_draw_rect_dsc+0x344>)
    3924:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
    3926:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    3928:	2270      	movs	r2, #112	; 0x70
    392a:	0031      	movs	r1, r6
    392c:	0028      	movs	r0, r5
    392e:	47c8      	blx	r9
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
    3930:	234c      	movs	r3, #76	; 0x4c
    3932:	52e0      	strh	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
    3934:	2271      	movs	r2, #113	; 0x71
    3936:	0031      	movs	r1, r6
    3938:	0028      	movs	r0, r5
    393a:	47c8      	blx	r9
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
    393c:	234e      	movs	r3, #78	; 0x4e
    393e:	52e0      	strh	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    3940:	2275      	movs	r2, #117	; 0x75
    3942:	0031      	movs	r1, r6
    3944:	0028      	movs	r0, r5
    3946:	47c8      	blx	r9
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
    3948:	2350      	movs	r3, #80	; 0x50
    394a:	54e0      	strb	r0, [r4, r3]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
    394c:	2272      	movs	r2, #114	; 0x72
    394e:	0031      	movs	r1, r6
    3950:	0028      	movs	r0, r5
    3952:	47c8      	blx	r9
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
    3954:	2351      	movs	r3, #81	; 0x51
    3956:	54e0      	strb	r0, [r4, r3]
    3958:	e694      	b.n	3684 <lv_obj_init_draw_rect_dsc+0x5c>
    395a:	46c0      	nop			; (mov r8, r8)
    395c:	00002d49 	.word	0x00002d49
    3960:	0000800c 	.word	0x0000800c
    3964:	00002ead 	.word	0x00002ead
    3968:	00002e09 	.word	0x00002e09
    396c:	00002f59 	.word	0x00002f59
    3970:	000080f9 	.word	0x000080f9
    3974:	0000808e 	.word	0x0000808e

00003978 <lv_obj_design>:
{
    3978:	b5f0      	push	{r4, r5, r6, r7, lr}
    397a:	b09b      	sub	sp, #108	; 0x6c
    397c:	0004      	movs	r4, r0
    397e:	000e      	movs	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
    3980:	2a02      	cmp	r2, #2
    3982:	d007      	beq.n	3994 <lv_obj_design+0x1c>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    3984:	2a00      	cmp	r2, #0
    3986:	d061      	beq.n	3a4c <lv_obj_design+0xd4>
    return LV_DESIGN_RES_OK;
    3988:	2000      	movs	r0, #0
    else if(mode == LV_DESIGN_DRAW_POST) {
    398a:	2a01      	cmp	r2, #1
    398c:	d100      	bne.n	3990 <lv_obj_design+0x18>
    398e:	e0b5      	b.n	3afc <lv_obj_design+0x184>
}
    3990:	b01b      	add	sp, #108	; 0x6c
    3992:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    3994:	2100      	movs	r1, #0
    3996:	4b81      	ldr	r3, [pc, #516]	; (3b9c <lv_obj_design+0x224>)
    3998:	4798      	blx	r3
    399a:	0003      	movs	r3, r0
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
    399c:	2003      	movs	r0, #3
    399e:	2b00      	cmp	r3, #0
    39a0:	d1f6      	bne.n	3990 <lv_obj_design+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    39a2:	2201      	movs	r2, #1
    39a4:	2100      	movs	r1, #0
    39a6:	0020      	movs	r0, r4
    39a8:	4f7c      	ldr	r7, [pc, #496]	; (3b9c <lv_obj_design+0x224>)
    39aa:	47b8      	blx	r7
    39ac:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    39ae:	2204      	movs	r2, #4
    39b0:	2100      	movs	r1, #0
    39b2:	0020      	movs	r0, r4
    39b4:	47b8      	blx	r7
    39b6:	0005      	movs	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    39b8:	2205      	movs	r2, #5
    39ba:	2100      	movs	r1, #0
    39bc:	0020      	movs	r0, r4
    39be:	47b8      	blx	r7
        lv_area_copy(&coords, &obj->coords);
    39c0:	0027      	movs	r7, r4
    39c2:	3710      	adds	r7, #16
    39c4:	2300      	movs	r3, #0
        *d8 = *s8;
    39c6:	a905      	add	r1, sp, #20
    39c8:	5cfa      	ldrb	r2, [r7, r3]
    39ca:	545a      	strb	r2, [r3, r1]
    39cc:	3301      	adds	r3, #1
    while(len) {
    39ce:	2b08      	cmp	r3, #8
    39d0:	d1fa      	bne.n	39c8 <lv_obj_design+0x50>
        coords.x1 -= w;
    39d2:	b2ad      	uxth	r5, r5
    39d4:	a905      	add	r1, sp, #20
    39d6:	880b      	ldrh	r3, [r1, #0]
    39d8:	1b5b      	subs	r3, r3, r5
    39da:	800b      	strh	r3, [r1, #0]
        coords.x2 += w;
    39dc:	888b      	ldrh	r3, [r1, #4]
    39de:	18ed      	adds	r5, r5, r3
    39e0:	808d      	strh	r5, [r1, #4]
        coords.y1 -= h;
    39e2:	b280      	uxth	r0, r0
    39e4:	884b      	ldrh	r3, [r1, #2]
    39e6:	1a1b      	subs	r3, r3, r0
    39e8:	804b      	strh	r3, [r1, #2]
        coords.y2 += h;
    39ea:	88cb      	ldrh	r3, [r1, #6]
    39ec:	18c0      	adds	r0, r0, r3
    39ee:	80c8      	strh	r0, [r1, #6]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
    39f0:	9a01      	ldr	r2, [sp, #4]
    39f2:	0030      	movs	r0, r6
    39f4:	4b6a      	ldr	r3, [pc, #424]	; (3ba0 <lv_obj_design+0x228>)
    39f6:	4798      	blx	r3
    39f8:	0003      	movs	r3, r0
    39fa:	2002      	movs	r0, #2
    39fc:	2b00      	cmp	r3, #0
    39fe:	d0c7      	beq.n	3990 <lv_obj_design+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    3a00:	222c      	movs	r2, #44	; 0x2c
    3a02:	2100      	movs	r1, #0
    3a04:	0020      	movs	r0, r4
    3a06:	4b67      	ldr	r3, [pc, #412]	; (3ba4 <lv_obj_design+0x22c>)
    3a08:	4798      	blx	r3
    3a0a:	0003      	movs	r3, r0
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
    3a0c:	2002      	movs	r0, #2
    3a0e:	2bf9      	cmp	r3, #249	; 0xf9
    3a10:	d9be      	bls.n	3990 <lv_obj_design+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    3a12:	2220      	movs	r2, #32
    3a14:	2100      	movs	r1, #0
    3a16:	0020      	movs	r0, r4
    3a18:	4b60      	ldr	r3, [pc, #384]	; (3b9c <lv_obj_design+0x224>)
    3a1a:	4798      	blx	r3
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    3a1c:	b2c3      	uxtb	r3, r0
    3a1e:	2002      	movs	r0, #2
    3a20:	2b00      	cmp	r3, #0
    3a22:	d1b5      	bne.n	3990 <lv_obj_design+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    3a24:	2232      	movs	r2, #50	; 0x32
    3a26:	2100      	movs	r1, #0
    3a28:	0020      	movs	r0, r4
    3a2a:	4b5c      	ldr	r3, [pc, #368]	; (3b9c <lv_obj_design+0x224>)
    3a2c:	4798      	blx	r3
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    3a2e:	b2c3      	uxtb	r3, r0
    3a30:	2002      	movs	r0, #2
    3a32:	2b00      	cmp	r3, #0
    3a34:	d1ac      	bne.n	3990 <lv_obj_design+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    3a36:	4a5c      	ldr	r2, [pc, #368]	; (3ba8 <lv_obj_design+0x230>)
    3a38:	2100      	movs	r1, #0
    3a3a:	0020      	movs	r0, r4
    3a3c:	4b59      	ldr	r3, [pc, #356]	; (3ba4 <lv_obj_design+0x22c>)
    3a3e:	4798      	blx	r3
        return  LV_DESIGN_RES_COVER;
    3a40:	2300      	movs	r3, #0
    3a42:	22f9      	movs	r2, #249	; 0xf9
    3a44:	4282      	cmp	r2, r0
    3a46:	415b      	adcs	r3, r3
    3a48:	1c58      	adds	r0, r3, #1
    3a4a:	e7a1      	b.n	3990 <lv_obj_design+0x18>
        lv_draw_rect_dsc_init(&draw_dsc);
    3a4c:	a805      	add	r0, sp, #20
    3a4e:	4b57      	ldr	r3, [pc, #348]	; (3bac <lv_obj_design+0x234>)
    3a50:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    3a52:	2233      	movs	r2, #51	; 0x33
    3a54:	2100      	movs	r1, #0
    3a56:	0020      	movs	r0, r4
    3a58:	4b50      	ldr	r3, [pc, #320]	; (3b9c <lv_obj_design+0x224>)
    3a5a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    3a5c:	2800      	cmp	r0, #0
    3a5e:	d002      	beq.n	3a66 <lv_obj_design+0xee>
            draw_dsc.border_opa = LV_OPA_TRANSP;
    3a60:	2200      	movs	r2, #0
    3a62:	ab05      	add	r3, sp, #20
    3a64:	751a      	strb	r2, [r3, #20]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    3a66:	aa05      	add	r2, sp, #20
    3a68:	2100      	movs	r1, #0
    3a6a:	0020      	movs	r0, r4
    3a6c:	4b50      	ldr	r3, [pc, #320]	; (3bb0 <lv_obj_design+0x238>)
    3a6e:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    3a70:	2204      	movs	r2, #4
    3a72:	2100      	movs	r1, #0
    3a74:	0020      	movs	r0, r4
    3a76:	4f49      	ldr	r7, [pc, #292]	; (3b9c <lv_obj_design+0x224>)
    3a78:	47b8      	blx	r7
    3a7a:	0005      	movs	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    3a7c:	2205      	movs	r2, #5
    3a7e:	2100      	movs	r1, #0
    3a80:	0020      	movs	r0, r4
    3a82:	47b8      	blx	r7
        lv_area_copy(&coords, &obj->coords);
    3a84:	0027      	movs	r7, r4
    3a86:	3710      	adds	r7, #16
    3a88:	2300      	movs	r3, #0
        *d8 = *s8;
    3a8a:	a903      	add	r1, sp, #12
    3a8c:	5cfa      	ldrb	r2, [r7, r3]
    3a8e:	545a      	strb	r2, [r3, r1]
    3a90:	3301      	adds	r3, #1
    while(len) {
    3a92:	2b08      	cmp	r3, #8
    3a94:	d1fa      	bne.n	3a8c <lv_obj_design+0x114>
        coords.x1 -= w;
    3a96:	b2ad      	uxth	r5, r5
    3a98:	ab03      	add	r3, sp, #12
    3a9a:	881a      	ldrh	r2, [r3, #0]
    3a9c:	1b52      	subs	r2, r2, r5
    3a9e:	801a      	strh	r2, [r3, #0]
        coords.x2 += w;
    3aa0:	889a      	ldrh	r2, [r3, #4]
    3aa2:	18ad      	adds	r5, r5, r2
    3aa4:	809d      	strh	r5, [r3, #4]
        coords.y1 -= h;
    3aa6:	b280      	uxth	r0, r0
    3aa8:	885a      	ldrh	r2, [r3, #2]
    3aaa:	1a12      	subs	r2, r2, r0
    3aac:	805a      	strh	r2, [r3, #2]
        coords.y2 += h;
    3aae:	88da      	ldrh	r2, [r3, #6]
    3ab0:	1880      	adds	r0, r0, r2
    3ab2:	80d8      	strh	r0, [r3, #6]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
    3ab4:	aa05      	add	r2, sp, #20
    3ab6:	0031      	movs	r1, r6
    3ab8:	0018      	movs	r0, r3
    3aba:	4b3e      	ldr	r3, [pc, #248]	; (3bb4 <lv_obj_design+0x23c>)
    3abc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    3abe:	2202      	movs	r2, #2
    3ac0:	2100      	movs	r1, #0
    3ac2:	0020      	movs	r0, r4
    3ac4:	4b35      	ldr	r3, [pc, #212]	; (3b9c <lv_obj_design+0x224>)
    3ac6:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    3ac8:	2800      	cmp	r0, #0
    3aca:	d101      	bne.n	3ad0 <lv_obj_design+0x158>
    return LV_DESIGN_RES_OK;
    3acc:	2000      	movs	r0, #0
    3ace:	e75f      	b.n	3990 <lv_obj_design+0x18>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
    3ad0:	201c      	movs	r0, #28
    3ad2:	4b39      	ldr	r3, [pc, #228]	; (3bb8 <lv_obj_design+0x240>)
    3ad4:	4798      	blx	r3
    3ad6:	0005      	movs	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    3ad8:	2201      	movs	r2, #1
    3ada:	2100      	movs	r1, #0
    3adc:	0020      	movs	r0, r4
    3ade:	4b2f      	ldr	r3, [pc, #188]	; (3b9c <lv_obj_design+0x224>)
    3ae0:	4798      	blx	r3
    3ae2:	0002      	movs	r2, r0
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
    3ae4:	2300      	movs	r3, #0
    3ae6:	0039      	movs	r1, r7
    3ae8:	0028      	movs	r0, r5
    3aea:	4e34      	ldr	r6, [pc, #208]	; (3bbc <lv_obj_design+0x244>)
    3aec:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
    3aee:	2398      	movs	r3, #152	; 0x98
    3af0:	009b      	lsls	r3, r3, #2
    3af2:	18e1      	adds	r1, r4, r3
    3af4:	0028      	movs	r0, r5
    3af6:	4b32      	ldr	r3, [pc, #200]	; (3bc0 <lv_obj_design+0x248>)
    3af8:	4798      	blx	r3
    3afa:	e7e7      	b.n	3acc <lv_obj_design+0x154>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    3afc:	3201      	adds	r2, #1
    3afe:	2100      	movs	r1, #0
    3b00:	0020      	movs	r0, r4
    3b02:	4b26      	ldr	r3, [pc, #152]	; (3b9c <lv_obj_design+0x224>)
    3b04:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    3b06:	2800      	cmp	r0, #0
    3b08:	d140      	bne.n	3b8c <lv_obj_design+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    3b0a:	2233      	movs	r2, #51	; 0x33
    3b0c:	2100      	movs	r1, #0
    3b0e:	0020      	movs	r0, r4
    3b10:	4b22      	ldr	r3, [pc, #136]	; (3b9c <lv_obj_design+0x224>)
    3b12:	4798      	blx	r3
    3b14:	0003      	movs	r3, r0
    return LV_DESIGN_RES_OK;
    3b16:	2000      	movs	r0, #0
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    3b18:	2b00      	cmp	r3, #0
    3b1a:	d100      	bne.n	3b1e <lv_obj_design+0x1a6>
    3b1c:	e738      	b.n	3990 <lv_obj_design+0x18>
            lv_draw_rect_dsc_init(&draw_dsc);
    3b1e:	ad05      	add	r5, sp, #20
    3b20:	0028      	movs	r0, r5
    3b22:	4b22      	ldr	r3, [pc, #136]	; (3bac <lv_obj_design+0x234>)
    3b24:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
    3b26:	2300      	movs	r3, #0
    3b28:	732b      	strb	r3, [r5, #12]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
    3b2a:	2236      	movs	r2, #54	; 0x36
    3b2c:	54ab      	strb	r3, [r5, r2]
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
    3b2e:	3a0e      	subs	r2, #14
    3b30:	54ab      	strb	r3, [r5, r2]
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    3b32:	002a      	movs	r2, r5
    3b34:	2100      	movs	r1, #0
    3b36:	0020      	movs	r0, r4
    3b38:	4b1d      	ldr	r3, [pc, #116]	; (3bb0 <lv_obj_design+0x238>)
    3b3a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    3b3c:	2204      	movs	r2, #4
    3b3e:	2100      	movs	r1, #0
    3b40:	0020      	movs	r0, r4
    3b42:	4f16      	ldr	r7, [pc, #88]	; (3b9c <lv_obj_design+0x224>)
    3b44:	47b8      	blx	r7
    3b46:	0005      	movs	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    3b48:	2205      	movs	r2, #5
    3b4a:	2100      	movs	r1, #0
    3b4c:	0020      	movs	r0, r4
    3b4e:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
    3b50:	3410      	adds	r4, #16
    3b52:	2300      	movs	r3, #0
        *d8 = *s8;
    3b54:	a903      	add	r1, sp, #12
    3b56:	5ce2      	ldrb	r2, [r4, r3]
    3b58:	545a      	strb	r2, [r3, r1]
    3b5a:	3301      	adds	r3, #1
    while(len) {
    3b5c:	2b08      	cmp	r3, #8
    3b5e:	d1fa      	bne.n	3b56 <lv_obj_design+0x1de>
            coords.x1 -= w;
    3b60:	b2ad      	uxth	r5, r5
    3b62:	ab03      	add	r3, sp, #12
    3b64:	881a      	ldrh	r2, [r3, #0]
    3b66:	1b52      	subs	r2, r2, r5
    3b68:	801a      	strh	r2, [r3, #0]
            coords.x2 += w;
    3b6a:	889a      	ldrh	r2, [r3, #4]
    3b6c:	18ad      	adds	r5, r5, r2
    3b6e:	809d      	strh	r5, [r3, #4]
            coords.y1 -= h;
    3b70:	b280      	uxth	r0, r0
    3b72:	885a      	ldrh	r2, [r3, #2]
    3b74:	1a12      	subs	r2, r2, r0
    3b76:	805a      	strh	r2, [r3, #2]
            coords.y2 += h;
    3b78:	88da      	ldrh	r2, [r3, #6]
    3b7a:	1880      	adds	r0, r0, r2
    3b7c:	80d8      	strh	r0, [r3, #6]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
    3b7e:	aa05      	add	r2, sp, #20
    3b80:	0031      	movs	r1, r6
    3b82:	0018      	movs	r0, r3
    3b84:	4b0b      	ldr	r3, [pc, #44]	; (3bb4 <lv_obj_design+0x23c>)
    3b86:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
    3b88:	2000      	movs	r0, #0
    3b8a:	e701      	b.n	3990 <lv_obj_design+0x18>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
    3b8c:	2398      	movs	r3, #152	; 0x98
    3b8e:	009b      	lsls	r3, r3, #2
    3b90:	18e0      	adds	r0, r4, r3
    3b92:	4b0c      	ldr	r3, [pc, #48]	; (3bc4 <lv_obj_design+0x24c>)
    3b94:	4798      	blx	r3
            _lv_mem_buf_release(param);
    3b96:	4b0c      	ldr	r3, [pc, #48]	; (3bc8 <lv_obj_design+0x250>)
    3b98:	4798      	blx	r3
    3b9a:	e7b6      	b.n	3b0a <lv_obj_design+0x192>
    3b9c:	00002d49 	.word	0x00002d49
    3ba0:	0000fe35 	.word	0x0000fe35
    3ba4:	00002ead 	.word	0x00002ead
    3ba8:	0000800c 	.word	0x0000800c
    3bac:	0000aab9 	.word	0x0000aab9
    3bb0:	00003629 	.word	0x00003629
    3bb4:	0000ab5d 	.word	0x0000ab5d
    3bb8:	00010e59 	.word	0x00010e59
    3bbc:	0000a7ed 	.word	0x0000a7ed
    3bc0:	0000a585 	.word	0x0000a585
    3bc4:	0000a62d 	.word	0x0000a62d
    3bc8:	00010b6d 	.word	0x00010b6d

00003bcc <lv_obj_get_draw_rect_ext_pad_size>:
{
    3bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bce:	46de      	mov	lr, fp
    3bd0:	4657      	mov	r7, sl
    3bd2:	464e      	mov	r6, r9
    3bd4:	b5c0      	push	{r6, r7, lr}
    3bd6:	b08a      	sub	sp, #40	; 0x28
    3bd8:	0004      	movs	r4, r0
    3bda:	9104      	str	r1, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    3bdc:	2250      	movs	r2, #80	; 0x50
    3bde:	4b78      	ldr	r3, [pc, #480]	; (3dc0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
    3be0:	4798      	blx	r3
    3be2:	0006      	movs	r6, r0
    3be4:	1e05      	subs	r5, r0, #0
    if(sh_width) {
    3be6:	d130      	bne.n	3c4a <lv_obj_get_draw_rect_ext_pad_size+0x7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    3be8:	227f      	movs	r2, #127	; 0x7f
    3bea:	9f04      	ldr	r7, [sp, #16]
    3bec:	0039      	movs	r1, r7
    3bee:	0020      	movs	r0, r4
    3bf0:	4b74      	ldr	r3, [pc, #464]	; (3dc4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
    3bf2:	4798      	blx	r3
    3bf4:	1e06      	subs	r6, r0, #0
    if(value_str) {
    3bf6:	d006      	beq.n	3c06 <lv_obj_get_draw_rect_ext_pad_size+0x3a>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    3bf8:	227c      	movs	r2, #124	; 0x7c
    3bfa:	0039      	movs	r1, r7
    3bfc:	0020      	movs	r0, r4
    3bfe:	4b72      	ldr	r3, [pc, #456]	; (3dc8 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
    3c00:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
    3c02:	2805      	cmp	r0, #5
    3c04:	d850      	bhi.n	3ca8 <lv_obj_get_draw_rect_ext_pad_size+0xdc>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    3c06:	2240      	movs	r2, #64	; 0x40
    3c08:	9904      	ldr	r1, [sp, #16]
    3c0a:	0020      	movs	r0, r4
    3c0c:	4b6c      	ldr	r3, [pc, #432]	; (3dc0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
    3c0e:	4798      	blx	r3
    3c10:	1e06      	subs	r6, r0, #0
    if(outline_width) {
    3c12:	d000      	beq.n	3c16 <lv_obj_get_draw_rect_ext_pad_size+0x4a>
    3c14:	e0c0      	b.n	3d98 <lv_obj_get_draw_rect_ext_pad_size+0x1cc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    3c16:	2204      	movs	r2, #4
    3c18:	9904      	ldr	r1, [sp, #16]
    3c1a:	0020      	movs	r0, r4
    3c1c:	4f68      	ldr	r7, [pc, #416]	; (3dc0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
    3c1e:	47b8      	blx	r7
    3c20:	0006      	movs	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    3c22:	2205      	movs	r2, #5
    3c24:	9904      	ldr	r1, [sp, #16]
    3c26:	0020      	movs	r0, r4
    3c28:	47b8      	blx	r7
    lv_coord_t wh = LV_MATH_MAX(w, h);
    3c2a:	1c03      	adds	r3, r0, #0
    3c2c:	42b0      	cmp	r0, r6
    3c2e:	da00      	bge.n	3c32 <lv_obj_get_draw_rect_ext_pad_size+0x66>
    3c30:	1c33      	adds	r3, r6, #0
    3c32:	b21a      	sxth	r2, r3
    if(wh > 0) s += wh;
    3c34:	2a00      	cmp	r2, #0
    3c36:	dd01      	ble.n	3c3c <lv_obj_get_draw_rect_ext_pad_size+0x70>
    3c38:	18ed      	adds	r5, r5, r3
    3c3a:	b22d      	sxth	r5, r5
}
    3c3c:	0028      	movs	r0, r5
    3c3e:	b00a      	add	sp, #40	; 0x28
    3c40:	bc1c      	pop	{r2, r3, r4}
    3c42:	4691      	mov	r9, r2
    3c44:	469a      	mov	sl, r3
    3c46:	46a3      	mov	fp, r4
    3c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    3c4a:	225c      	movs	r2, #92	; 0x5c
    3c4c:	9904      	ldr	r1, [sp, #16]
    3c4e:	0020      	movs	r0, r4
    3c50:	4b5d      	ldr	r3, [pc, #372]	; (3dc8 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
    3c52:	4798      	blx	r3
    lv_coord_t s = 0;
    3c54:	2500      	movs	r5, #0
        if(sh_opa > LV_OPA_MIN) {
    3c56:	2805      	cmp	r0, #5
    3c58:	d9c6      	bls.n	3be8 <lv_obj_get_draw_rect_ext_pad_size+0x1c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    3c5a:	2253      	movs	r2, #83	; 0x53
    3c5c:	9d04      	ldr	r5, [sp, #16]
    3c5e:	0029      	movs	r1, r5
    3c60:	0020      	movs	r0, r4
    3c62:	4f57      	ldr	r7, [pc, #348]	; (3dc0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
    3c64:	47b8      	blx	r7
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
    3c66:	0ff3      	lsrs	r3, r6, #31
    3c68:	199e      	adds	r6, r3, r6
    3c6a:	1076      	asrs	r6, r6, #1
            sh_width++;
    3c6c:	3601      	adds	r6, #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
    3c6e:	1836      	adds	r6, r6, r0
    3c70:	b2b6      	uxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    3c72:	2251      	movs	r2, #81	; 0x51
    3c74:	9504      	str	r5, [sp, #16]
    3c76:	0029      	movs	r1, r5
    3c78:	0020      	movs	r0, r4
    3c7a:	47b8      	blx	r7
    3c7c:	0005      	movs	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    3c7e:	2252      	movs	r2, #82	; 0x52
    3c80:	9904      	ldr	r1, [sp, #16]
    3c82:	0020      	movs	r0, r4
    3c84:	47b8      	blx	r7
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
    3c86:	17ea      	asrs	r2, r5, #31
    3c88:	18ab      	adds	r3, r5, r2
    3c8a:	4053      	eors	r3, r2
    3c8c:	17c2      	asrs	r2, r0, #31
    3c8e:	1880      	adds	r0, r0, r2
    3c90:	4050      	eors	r0, r2
    3c92:	4298      	cmp	r0, r3
    3c94:	da00      	bge.n	3c98 <lv_obj_get_draw_rect_ext_pad_size+0xcc>
    3c96:	0018      	movs	r0, r3
    3c98:	1830      	adds	r0, r6, r0
            s = LV_MATH_MAX(s, sh_width);
    3c9a:	1c03      	adds	r3, r0, #0
    3c9c:	0402      	lsls	r2, r0, #16
    3c9e:	d401      	bmi.n	3ca4 <lv_obj_get_draw_rect_ext_pad_size+0xd8>
    3ca0:	b21d      	sxth	r5, r3
    3ca2:	e7a1      	b.n	3be8 <lv_obj_get_draw_rect_ext_pad_size+0x1c>
    3ca4:	2300      	movs	r3, #0
    3ca6:	e7fb      	b.n	3ca0 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    3ca8:	2270      	movs	r2, #112	; 0x70
    3caa:	9f04      	ldr	r7, [sp, #16]
    3cac:	0039      	movs	r1, r7
    3cae:	0020      	movs	r0, r4
    3cb0:	4b43      	ldr	r3, [pc, #268]	; (3dc0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
    3cb2:	4699      	mov	r9, r3
    3cb4:	4798      	blx	r3
    3cb6:	9005      	str	r0, [sp, #20]
    3cb8:	2270      	movs	r2, #112	; 0x70
    3cba:	0039      	movs	r1, r7
    3cbc:	0020      	movs	r0, r4
    3cbe:	47c8      	blx	r9
    3cc0:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    3cc2:	227e      	movs	r2, #126	; 0x7e
    3cc4:	9704      	str	r7, [sp, #16]
    3cc6:	0039      	movs	r1, r7
    3cc8:	0020      	movs	r0, r4
    3cca:	4b3e      	ldr	r3, [pc, #248]	; (3dc4 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
    3ccc:	4798      	blx	r3
    3cce:	0002      	movs	r2, r0
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
    3cd0:	af06      	add	r7, sp, #24
    3cd2:	2100      	movs	r1, #0
    3cd4:	468a      	mov	sl, r1
    3cd6:	9102      	str	r1, [sp, #8]
    3cd8:	4b3c      	ldr	r3, [pc, #240]	; (3dcc <lv_obj_get_draw_rect_ext_pad_size+0x200>)
    3cda:	9301      	str	r3, [sp, #4]
    3cdc:	4659      	mov	r1, fp
    3cde:	9100      	str	r1, [sp, #0]
    3ce0:	9b05      	ldr	r3, [sp, #20]
    3ce2:	0031      	movs	r1, r6
    3ce4:	0038      	movs	r0, r7
    3ce6:	4e3a      	ldr	r6, [pc, #232]	; (3dd0 <lv_obj_get_draw_rect_ext_pad_size+0x204>)
    3ce8:	47b0      	blx	r6
            value_area.x1 = 0;
    3cea:	ae08      	add	r6, sp, #32
    3cec:	4653      	mov	r3, sl
    3cee:	8033      	strh	r3, [r6, #0]
            value_area.y1 = 0;
    3cf0:	8073      	strh	r3, [r6, #2]
            value_area.x2 = txt_size.x - 1;
    3cf2:	883b      	ldrh	r3, [r7, #0]
    3cf4:	3b01      	subs	r3, #1
    3cf6:	80b3      	strh	r3, [r6, #4]
            value_area.y2 = txt_size.y - 1;
    3cf8:	887b      	ldrh	r3, [r7, #2]
    3cfa:	3b01      	subs	r3, #1
    3cfc:	80f3      	strh	r3, [r6, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    3cfe:	2275      	movs	r2, #117	; 0x75
    3d00:	9f04      	ldr	r7, [sp, #16]
    3d02:	0039      	movs	r1, r7
    3d04:	0020      	movs	r0, r4
    3d06:	47c8      	blx	r9
    3d08:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    3d0a:	2273      	movs	r2, #115	; 0x73
    3d0c:	0039      	movs	r1, r7
    3d0e:	0020      	movs	r0, r4
    3d10:	47c8      	blx	r9
    3d12:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    3d14:	2274      	movs	r2, #116	; 0x74
    3d16:	0039      	movs	r1, r7
    3d18:	0020      	movs	r0, r4
    3d1a:	47c8      	blx	r9
    3d1c:	4681      	mov	r9, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
    3d1e:	aa07      	add	r2, sp, #28
    3d20:	0013      	movs	r3, r2
    3d22:	466a      	mov	r2, sp
    3d24:	7d12      	ldrb	r2, [r2, #20]
    3d26:	0020      	movs	r0, r4
    3d28:	3010      	adds	r0, #16
    3d2a:	9305      	str	r3, [sp, #20]
    3d2c:	0031      	movs	r1, r6
    3d2e:	4f29      	ldr	r7, [pc, #164]	; (3dd4 <lv_obj_get_draw_rect_ext_pad_size+0x208>)
    3d30:	47b8      	blx	r7
            value_area.x1 += p_align.x + xofs;
    3d32:	9a05      	ldr	r2, [sp, #20]
    3d34:	8813      	ldrh	r3, [r2, #0]
    3d36:	4453      	add	r3, sl
    3d38:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
    3d3a:	8852      	ldrh	r2, [r2, #2]
    3d3c:	444a      	add	r2, r9
    3d3e:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    3d40:	2010      	movs	r0, #16
    3d42:	5e21      	ldrsh	r1, [r4, r0]
            value_area.x1 += p_align.x + xofs;
    3d44:	8836      	ldrh	r6, [r6, #0]
    3d46:	199e      	adds	r6, r3, r6
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    3d48:	b236      	sxth	r6, r6
    3d4a:	1b8e      	subs	r6, r1, r6
    3d4c:	42ae      	cmp	r6, r5
    3d4e:	da00      	bge.n	3d52 <lv_obj_get_draw_rect_ext_pad_size+0x186>
    3d50:	002e      	movs	r6, r5
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    3d52:	2112      	movs	r1, #18
    3d54:	5e60      	ldrsh	r0, [r4, r1]
            value_area.y1 += p_align.y + yofs;
    3d56:	a908      	add	r1, sp, #32
    3d58:	8849      	ldrh	r1, [r1, #2]
    3d5a:	1851      	adds	r1, r2, r1
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    3d5c:	b209      	sxth	r1, r1
    3d5e:	b236      	sxth	r6, r6
    3d60:	1a41      	subs	r1, r0, r1
    3d62:	42b1      	cmp	r1, r6
    3d64:	da00      	bge.n	3d68 <lv_obj_get_draw_rect_ext_pad_size+0x19c>
    3d66:	0031      	movs	r1, r6
            value_area.x2 += p_align.x + xofs;
    3d68:	a808      	add	r0, sp, #32
    3d6a:	8880      	ldrh	r0, [r0, #4]
    3d6c:	181b      	adds	r3, r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
    3d6e:	b21b      	sxth	r3, r3
    3d70:	2514      	movs	r5, #20
    3d72:	5f60      	ldrsh	r0, [r4, r5]
    3d74:	b209      	sxth	r1, r1
    3d76:	1a1b      	subs	r3, r3, r0
    3d78:	428b      	cmp	r3, r1
    3d7a:	da00      	bge.n	3d7e <lv_obj_get_draw_rect_ext_pad_size+0x1b2>
    3d7c:	000b      	movs	r3, r1
            value_area.y2 += p_align.y + yofs;
    3d7e:	a908      	add	r1, sp, #32
    3d80:	88c9      	ldrh	r1, [r1, #6]
    3d82:	1852      	adds	r2, r2, r1
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
    3d84:	b212      	sxth	r2, r2
    3d86:	2016      	movs	r0, #22
    3d88:	5e21      	ldrsh	r1, [r4, r0]
    3d8a:	b21b      	sxth	r3, r3
    3d8c:	1a52      	subs	r2, r2, r1
    3d8e:	429a      	cmp	r2, r3
    3d90:	da00      	bge.n	3d94 <lv_obj_get_draw_rect_ext_pad_size+0x1c8>
    3d92:	001a      	movs	r2, r3
    3d94:	b215      	sxth	r5, r2
    3d96:	e736      	b.n	3c06 <lv_obj_get_draw_rect_ext_pad_size+0x3a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    3d98:	224c      	movs	r2, #76	; 0x4c
    3d9a:	9904      	ldr	r1, [sp, #16]
    3d9c:	0020      	movs	r0, r4
    3d9e:	4b0a      	ldr	r3, [pc, #40]	; (3dc8 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
    3da0:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
    3da2:	2805      	cmp	r0, #5
    3da4:	d800      	bhi.n	3da8 <lv_obj_get_draw_rect_ext_pad_size+0x1dc>
    3da6:	e736      	b.n	3c16 <lv_obj_get_draw_rect_ext_pad_size+0x4a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    3da8:	2241      	movs	r2, #65	; 0x41
    3daa:	9904      	ldr	r1, [sp, #16]
    3dac:	0020      	movs	r0, r4
    3dae:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
    3db0:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
    3db2:	1986      	adds	r6, r0, r6
    3db4:	42ae      	cmp	r6, r5
    3db6:	da00      	bge.n	3dba <lv_obj_get_draw_rect_ext_pad_size+0x1ee>
    3db8:	002e      	movs	r6, r5
    3dba:	b235      	sxth	r5, r6
    3dbc:	e72b      	b.n	3c16 <lv_obj_get_draw_rect_ext_pad_size+0x4a>
    3dbe:	46c0      	nop			; (mov r8, r8)
    3dc0:	00002d49 	.word	0x00002d49
    3dc4:	00002f59 	.word	0x00002f59
    3dc8:	00002ead 	.word	0x00002ead
    3dcc:	00007c18 	.word	0x00007c18
    3dd0:	00011a7d 	.word	0x00011a7d
    3dd4:	0000fed9 	.word	0x0000fed9

00003dd8 <lv_obj_signal>:
{
    3dd8:	b510      	push	{r4, lr}
    3dda:	0004      	movs	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
    3ddc:	2908      	cmp	r1, #8
    3dde:	d01b      	beq.n	3e18 <lv_obj_signal+0x40>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    3de0:	2907      	cmp	r1, #7
    3de2:	d024      	beq.n	3e2e <lv_obj_signal+0x56>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    3de4:	2901      	cmp	r1, #1
    3de6:	d027      	beq.n	3e38 <lv_obj_signal+0x60>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    3de8:	2906      	cmp	r1, #6
    3dea:	d02b      	beq.n	3e44 <lv_obj_signal+0x6c>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
    3dec:	2903      	cmp	r1, #3
    3dee:	d035      	beq.n	3e5c <lv_obj_signal+0x84>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
    3df0:	2904      	cmp	r1, #4
    3df2:	d03d      	beq.n	3e70 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_PRESSED) {
    3df4:	290b      	cmp	r1, #11
    3df6:	d03f      	beq.n	3e78 <lv_obj_signal+0xa0>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    3df8:	000b      	movs	r3, r1
    3dfa:	3b0d      	subs	r3, #13
    3dfc:	2b01      	cmp	r3, #1
    3dfe:	d940      	bls.n	3e82 <lv_obj_signal+0xaa>
    else if(sign == LV_SIGNAL_FOCUS) {
    3e00:	2916      	cmp	r1, #22
    3e02:	d043      	beq.n	3e8c <lv_obj_signal+0xb4>
    else if(sign == LV_SIGNAL_DEFOCUS) {
    3e04:	2917      	cmp	r1, #23
    3e06:	d057      	beq.n	3eb8 <lv_obj_signal+0xe0>
    lv_res_t res = LV_RES_OK;
    3e08:	2001      	movs	r0, #1
    else if(sign == LV_SIGNAL_CLEANUP) {
    3e0a:	2900      	cmp	r1, #0
    3e0c:	d10a      	bne.n	3e24 <lv_obj_signal+0x4c>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
    3e0e:	0020      	movs	r0, r4
    3e10:	4b2c      	ldr	r3, [pc, #176]	; (3ec4 <lv_obj_signal+0xec>)
    3e12:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3e14:	2001      	movs	r0, #1
    3e16:	e005      	b.n	3e24 <lv_obj_signal+0x4c>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
    3e18:	7813      	ldrb	r3, [r2, #0]
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d103      	bne.n	3e26 <lv_obj_signal+0x4e>
    3e1e:	3428      	adds	r4, #40	; 0x28
    3e20:	6054      	str	r4, [r2, #4]
        return LV_RES_OK;
    3e22:	2001      	movs	r0, #1
}
    3e24:	bd10      	pop	{r4, pc}
        else info->result = NULL;
    3e26:	2300      	movs	r3, #0
    3e28:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
    3e2a:	2001      	movs	r0, #1
    3e2c:	e7fa      	b.n	3e24 <lv_obj_signal+0x4c>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    3e2e:	4926      	ldr	r1, [pc, #152]	; (3ec8 <lv_obj_signal+0xf0>)
    3e30:	0010      	movs	r0, r2
    3e32:	4b26      	ldr	r3, [pc, #152]	; (3ecc <lv_obj_signal+0xf4>)
    3e34:	4798      	blx	r3
    3e36:	e7f5      	b.n	3e24 <lv_obj_signal+0x4c>
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
    3e38:	4b25      	ldr	r3, [pc, #148]	; (3ed0 <lv_obj_signal+0xf8>)
    3e3a:	4798      	blx	r3
    3e3c:	2301      	movs	r3, #1
    3e3e:	4058      	eors	r0, r3
        return LV_RES_OK;
    3e40:	b2c0      	uxtb	r0, r0
    3e42:	e7ef      	b.n	3e24 <lv_obj_signal+0x4c>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
    3e44:	2100      	movs	r1, #0
    3e46:	4b23      	ldr	r3, [pc, #140]	; (3ed4 <lv_obj_signal+0xfc>)
    3e48:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
    3e4a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3e4c:	1c1a      	adds	r2, r3, #0
    3e4e:	b21b      	sxth	r3, r3
    3e50:	4283      	cmp	r3, r0
    3e52:	da00      	bge.n	3e56 <lv_obj_signal+0x7e>
    3e54:	1c02      	adds	r2, r0, #0
    3e56:	8662      	strh	r2, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
    3e58:	2001      	movs	r0, #1
    3e5a:	e7e3      	b.n	3e24 <lv_obj_signal+0x4c>
        if(obj->realign.auto_realign) {
    3e5c:	2349      	movs	r3, #73	; 0x49
    3e5e:	5cc3      	ldrb	r3, [r0, r3]
    lv_res_t res = LV_RES_OK;
    3e60:	2001      	movs	r0, #1
        if(obj->realign.auto_realign) {
    3e62:	07db      	lsls	r3, r3, #31
    3e64:	d5de      	bpl.n	3e24 <lv_obj_signal+0x4c>
            lv_obj_realign(obj);
    3e66:	0020      	movs	r0, r4
    3e68:	4b1b      	ldr	r3, [pc, #108]	; (3ed8 <lv_obj_signal+0x100>)
    3e6a:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3e6c:	2001      	movs	r0, #1
    3e6e:	e7d9      	b.n	3e24 <lv_obj_signal+0x4c>
        lv_obj_refresh_ext_draw_pad(obj);
    3e70:	4b1a      	ldr	r3, [pc, #104]	; (3edc <lv_obj_signal+0x104>)
    3e72:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3e74:	2001      	movs	r0, #1
    3e76:	e7d5      	b.n	3e24 <lv_obj_signal+0x4c>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
    3e78:	3105      	adds	r1, #5
    3e7a:	4b19      	ldr	r3, [pc, #100]	; (3ee0 <lv_obj_signal+0x108>)
    3e7c:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3e7e:	2001      	movs	r0, #1
    3e80:	e7d0      	b.n	3e24 <lv_obj_signal+0x4c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
    3e82:	2110      	movs	r1, #16
    3e84:	4b17      	ldr	r3, [pc, #92]	; (3ee4 <lv_obj_signal+0x10c>)
    3e86:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3e88:	2001      	movs	r0, #1
    3e8a:	e7cb      	b.n	3e24 <lv_obj_signal+0x4c>
        if(lv_group_get_editing(lv_obj_get_group(obj))) {
    3e8c:	4b16      	ldr	r3, [pc, #88]	; (3ee8 <lv_obj_signal+0x110>)
    3e8e:	4798      	blx	r3
    3e90:	4b16      	ldr	r3, [pc, #88]	; (3eec <lv_obj_signal+0x114>)
    3e92:	4798      	blx	r3
    3e94:	2800      	cmp	r0, #0
    3e96:	d005      	beq.n	3ea4 <lv_obj_signal+0xcc>
            lv_obj_add_state(obj, state);
    3e98:	2106      	movs	r1, #6
    3e9a:	0020      	movs	r0, r4
    3e9c:	4b10      	ldr	r3, [pc, #64]	; (3ee0 <lv_obj_signal+0x108>)
    3e9e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3ea0:	2001      	movs	r0, #1
    3ea2:	e7bf      	b.n	3e24 <lv_obj_signal+0x4c>
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
    3ea4:	2102      	movs	r1, #2
    3ea6:	0020      	movs	r0, r4
    3ea8:	4b0d      	ldr	r3, [pc, #52]	; (3ee0 <lv_obj_signal+0x108>)
    3eaa:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
    3eac:	2104      	movs	r1, #4
    3eae:	0020      	movs	r0, r4
    3eb0:	4b0c      	ldr	r3, [pc, #48]	; (3ee4 <lv_obj_signal+0x10c>)
    3eb2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3eb4:	2001      	movs	r0, #1
    3eb6:	e7b5      	b.n	3e24 <lv_obj_signal+0x4c>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    3eb8:	3911      	subs	r1, #17
    3eba:	4b0a      	ldr	r3, [pc, #40]	; (3ee4 <lv_obj_signal+0x10c>)
    3ebc:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    3ebe:	2001      	movs	r0, #1
    3ec0:	e7b0      	b.n	3e24 <lv_obj_signal+0x4c>
    3ec2:	46c0      	nop			; (mov r8, r8)
    3ec4:	00001d6d 	.word	0x00001d6d
    3ec8:	0001887c 	.word	0x0001887c
    3ecc:	00003601 	.word	0x00003601
    3ed0:	00002cc5 	.word	0x00002cc5
    3ed4:	00003bcd 	.word	0x00003bcd
    3ed8:	0000247d 	.word	0x0000247d
    3edc:	00001a05 	.word	0x00001a05
    3ee0:	00003519 	.word	0x00003519
    3ee4:	00003559 	.word	0x00003559
    3ee8:	00003599 	.word	0x00003599
    3eec:	000016f3 	.word	0x000016f3

00003ef0 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
    3ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ef2:	46ce      	mov	lr, r9
    3ef4:	b500      	push	{lr}
    3ef6:	b082      	sub	sp, #8
    3ef8:	0004      	movs	r4, r0
    3efa:	9001      	str	r0, [sp, #4]
    3efc:	000d      	movs	r5, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
    3efe:	3110      	adds	r1, #16
    3f00:	2200      	movs	r2, #0
    3f02:	4b1f      	ldr	r3, [pc, #124]	; (3f80 <lv_refr_get_top_obj+0x90>)
    3f04:	4798      	blx	r3
    3f06:	2800      	cmp	r0, #0
    3f08:	d027      	beq.n	3f5a <lv_refr_get_top_obj+0x6a>
    3f0a:	2334      	movs	r3, #52	; 0x34
    3f0c:	5ceb      	ldrb	r3, [r5, r3]
    3f0e:	06db      	lsls	r3, r3, #27
    3f10:	d425      	bmi.n	3f5e <lv_refr_get_top_obj+0x6e>
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    3f12:	6a2b      	ldr	r3, [r5, #32]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d028      	beq.n	3f6a <lv_refr_get_top_obj+0x7a>
    3f18:	2202      	movs	r2, #2
    3f1a:	0021      	movs	r1, r4
    3f1c:	0028      	movs	r0, r5
    3f1e:	4798      	blx	r3
    3f20:	4681      	mov	r9, r0
                                                                     LV_DESIGN_COVER_CHK) : LV_DESIGN_RES_NOT_COVER;
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    3f22:	2803      	cmp	r0, #3
    3f24:	d01d      	beq.n	3f62 <lv_refr_get_top_obj+0x72>

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
    3f26:	1d2e      	adds	r6, r5, #4
    3f28:	0030      	movs	r0, r6
    3f2a:	4b16      	ldr	r3, [pc, #88]	; (3f84 <lv_refr_get_top_obj+0x94>)
    3f2c:	4798      	blx	r3
    3f2e:	1e04      	subs	r4, r0, #0
    3f30:	d00b      	beq.n	3f4a <lv_refr_get_top_obj+0x5a>
    3f32:	4f15      	ldr	r7, [pc, #84]	; (3f88 <lv_refr_get_top_obj+0x98>)
            found_p = lv_refr_get_top_obj(area_p, i);
    3f34:	0021      	movs	r1, r4
    3f36:	9801      	ldr	r0, [sp, #4]
    3f38:	f7ff ffda 	bl	3ef0 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d108      	bne.n	3f52 <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    3f40:	0021      	movs	r1, r4
    3f42:	0030      	movs	r0, r6
    3f44:	47b8      	blx	r7
    3f46:	1e04      	subs	r4, r0, #0
    3f48:	d1f4      	bne.n	3f34 <lv_refr_get_top_obj+0x44>
    3f4a:	2000      	movs	r0, #0
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
            if(design_res == LV_DESIGN_RES_COVER) {
    3f4c:	464b      	mov	r3, r9
    3f4e:	2b01      	cmp	r3, #1
    3f50:	d009      	beq.n	3f66 <lv_refr_get_top_obj+0x76>
            }
        }
    }

    return found_p;
}
    3f52:	b002      	add	sp, #8
    3f54:	bc04      	pop	{r2}
    3f56:	4691      	mov	r9, r2
    3f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * found_p = NULL;
    3f5a:	2000      	movs	r0, #0
    3f5c:	e7f9      	b.n	3f52 <lv_refr_get_top_obj+0x62>
    3f5e:	2000      	movs	r0, #0
    3f60:	e7f7      	b.n	3f52 <lv_refr_get_top_obj+0x62>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    3f62:	2000      	movs	r0, #0
    3f64:	e7f5      	b.n	3f52 <lv_refr_get_top_obj+0x62>
                found_p = obj;
    3f66:	0028      	movs	r0, r5
    3f68:	e7f3      	b.n	3f52 <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    3f6a:	1d2e      	adds	r6, r5, #4
    3f6c:	0030      	movs	r0, r6
    3f6e:	4b05      	ldr	r3, [pc, #20]	; (3f84 <lv_refr_get_top_obj+0x94>)
    3f70:	4798      	blx	r3
    3f72:	0004      	movs	r4, r0
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    3f74:	2302      	movs	r3, #2
    3f76:	4699      	mov	r9, r3
        _LV_LL_READ(obj->child_ll, i) {
    3f78:	2800      	cmp	r0, #0
    3f7a:	d1da      	bne.n	3f32 <lv_refr_get_top_obj+0x42>
    3f7c:	e7e9      	b.n	3f52 <lv_refr_get_top_obj+0x62>
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	0000fe35 	.word	0x0000fe35
    3f84:	00010605 	.word	0x00010605
    3f88:	0001061d 	.word	0x0001061d

00003f8c <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	46d6      	mov	lr, sl
    3f90:	464f      	mov	r7, r9
    3f92:	b580      	push	{r7, lr}
    3f94:	b08d      	sub	sp, #52	; 0x34
    3f96:	0007      	movs	r7, r0
    3f98:	000d      	movs	r5, r1
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
    3f9a:	2334      	movs	r3, #52	; 0x34
    3f9c:	5cc3      	ldrb	r3, [r0, r3]
    3f9e:	06db      	lsls	r3, r3, #27
    3fa0:	d504      	bpl.n	3fac <lv_refr_obj+0x20>
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    }
}
    3fa2:	b00d      	add	sp, #52	; 0x34
    3fa4:	bc0c      	pop	{r2, r3}
    3fa6:	4691      	mov	r9, r2
    3fa8:	469a      	mov	sl, r3
    3faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_coord_t ext_size = obj->ext_draw_pad;
    3fac:	2332      	movs	r3, #50	; 0x32
    3fae:	5ec6      	ldrsh	r6, [r0, r3]
    lv_obj_get_coords(obj, &obj_area);
    3fb0:	ac06      	add	r4, sp, #24
    3fb2:	0021      	movs	r1, r4
    3fb4:	4b2e      	ldr	r3, [pc, #184]	; (4070 <lv_refr_obj+0xe4>)
    3fb6:	4798      	blx	r3
    obj_area.x1 -= ext_size;
    3fb8:	b2b3      	uxth	r3, r6
    3fba:	8822      	ldrh	r2, [r4, #0]
    3fbc:	1ad2      	subs	r2, r2, r3
    3fbe:	8022      	strh	r2, [r4, #0]
    obj_area.y1 -= ext_size;
    3fc0:	8862      	ldrh	r2, [r4, #2]
    3fc2:	1ad2      	subs	r2, r2, r3
    3fc4:	8062      	strh	r2, [r4, #2]
    obj_area.x2 += ext_size;
    3fc6:	88a2      	ldrh	r2, [r4, #4]
    3fc8:	189a      	adds	r2, r3, r2
    3fca:	80a2      	strh	r2, [r4, #4]
    obj_area.y2 += ext_size;
    3fcc:	88e2      	ldrh	r2, [r4, #6]
    3fce:	189b      	adds	r3, r3, r2
    3fd0:	80e3      	strh	r3, [r4, #6]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    3fd2:	0022      	movs	r2, r4
    3fd4:	0029      	movs	r1, r5
    3fd6:	a808      	add	r0, sp, #32
    3fd8:	4b26      	ldr	r3, [pc, #152]	; (4074 <lv_refr_obj+0xe8>)
    3fda:	4798      	blx	r3
    if(union_ok != false) {
    3fdc:	2800      	cmp	r0, #0
    3fde:	d0e0      	beq.n	3fa2 <lv_refr_obj+0x16>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
    3fe0:	6a3b      	ldr	r3, [r7, #32]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d003      	beq.n	3fee <lv_refr_obj+0x62>
    3fe6:	2200      	movs	r2, #0
    3fe8:	a908      	add	r1, sp, #32
    3fea:	0038      	movs	r0, r7
    3fec:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
    3fee:	a906      	add	r1, sp, #24
    3ff0:	0038      	movs	r0, r7
    3ff2:	4b1f      	ldr	r3, [pc, #124]	; (4070 <lv_refr_obj+0xe4>)
    3ff4:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
    3ff6:	aa06      	add	r2, sp, #24
    3ff8:	0029      	movs	r1, r5
    3ffa:	a80a      	add	r0, sp, #40	; 0x28
    3ffc:	4b1d      	ldr	r3, [pc, #116]	; (4074 <lv_refr_obj+0xe8>)
    3ffe:	4798      	blx	r3
        if(union_ok != false) {
    4000:	2800      	cmp	r0, #0
    4002:	d107      	bne.n	4014 <lv_refr_obj+0x88>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    4004:	6a3b      	ldr	r3, [r7, #32]
    4006:	2b00      	cmp	r3, #0
    4008:	d0cb      	beq.n	3fa2 <lv_refr_obj+0x16>
    400a:	2201      	movs	r2, #1
    400c:	a908      	add	r1, sp, #32
    400e:	0038      	movs	r0, r7
    4010:	4798      	blx	r3
    4012:	e7c6      	b.n	3fa2 <lv_refr_obj+0x16>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    4014:	1d3b      	adds	r3, r7, #4
    4016:	9301      	str	r3, [sp, #4]
    4018:	0018      	movs	r0, r3
    401a:	4b17      	ldr	r3, [pc, #92]	; (4078 <lv_refr_obj+0xec>)
    401c:	4798      	blx	r3
    401e:	1e05      	subs	r5, r0, #0
    4020:	d0f0      	beq.n	4004 <lv_refr_obj+0x78>
                lv_obj_get_coords(child_p, &child_area);
    4022:	4b13      	ldr	r3, [pc, #76]	; (4070 <lv_refr_obj+0xe4>)
    4024:	469a      	mov	sl, r3
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    4026:	4b13      	ldr	r3, [pc, #76]	; (4074 <lv_refr_obj+0xe8>)
    4028:	4699      	mov	r9, r3
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    402a:	4e14      	ldr	r6, [pc, #80]	; (407c <lv_refr_obj+0xf0>)
    402c:	e004      	b.n	4038 <lv_refr_obj+0xac>
    402e:	0029      	movs	r1, r5
    4030:	9801      	ldr	r0, [sp, #4]
    4032:	47b0      	blx	r6
    4034:	1e05      	subs	r5, r0, #0
    4036:	d0e5      	beq.n	4004 <lv_refr_obj+0x78>
                lv_obj_get_coords(child_p, &child_area);
    4038:	ac04      	add	r4, sp, #16
    403a:	0021      	movs	r1, r4
    403c:	0028      	movs	r0, r5
    403e:	47d0      	blx	sl
                child_area.x1 -= ext_size;
    4040:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    4042:	8822      	ldrh	r2, [r4, #0]
    4044:	1ad2      	subs	r2, r2, r3
    4046:	8022      	strh	r2, [r4, #0]
                child_area.y1 -= ext_size;
    4048:	8862      	ldrh	r2, [r4, #2]
    404a:	1ad2      	subs	r2, r2, r3
    404c:	8062      	strh	r2, [r4, #2]
                child_area.x2 += ext_size;
    404e:	88a2      	ldrh	r2, [r4, #4]
    4050:	189a      	adds	r2, r3, r2
    4052:	80a2      	strh	r2, [r4, #4]
                child_area.y2 += ext_size;
    4054:	88e2      	ldrh	r2, [r4, #6]
    4056:	189b      	adds	r3, r3, r2
    4058:	80e3      	strh	r3, [r4, #6]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    405a:	0022      	movs	r2, r4
    405c:	a90a      	add	r1, sp, #40	; 0x28
    405e:	a802      	add	r0, sp, #8
    4060:	47c8      	blx	r9
                if(union_ok) {
    4062:	2800      	cmp	r0, #0
    4064:	d0e3      	beq.n	402e <lv_refr_obj+0xa2>
                    lv_refr_obj(child_p, &mask_child);
    4066:	a902      	add	r1, sp, #8
    4068:	0028      	movs	r0, r5
    406a:	f7ff ff8f 	bl	3f8c <lv_refr_obj>
    406e:	e7de      	b.n	402e <lv_refr_obj+0xa2>
    4070:	00001b6d 	.word	0x00001b6d
    4074:	0000fba7 	.word	0x0000fba7
    4078:	00010611 	.word	0x00010611
    407c:	00010645 	.word	0x00010645

00004080 <lv_refr_obj_and_children>:
{
    4080:	b5f0      	push	{r4, r5, r6, r7, lr}
    4082:	46d6      	mov	lr, sl
    4084:	b500      	push	{lr}
    4086:	b082      	sub	sp, #8
    4088:	1e04      	subs	r4, r0, #0
    408a:	9101      	str	r1, [sp, #4]
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    408c:	d00d      	beq.n	40aa <lv_refr_obj_and_children+0x2a>
    lv_refr_obj(top_p, mask_p);
    408e:	9901      	ldr	r1, [sp, #4]
    4090:	0020      	movs	r0, r4
    4092:	4b1a      	ldr	r3, [pc, #104]	; (40fc <lv_refr_obj_and_children+0x7c>)
    4094:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
    4096:	0020      	movs	r0, r4
    4098:	4b19      	ldr	r3, [pc, #100]	; (4100 <lv_refr_obj_and_children+0x80>)
    409a:	4798      	blx	r3
    409c:	1e05      	subs	r5, r0, #0
    while(par != NULL) {
    409e:	d00a      	beq.n	40b6 <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    40a0:	4b18      	ldr	r3, [pc, #96]	; (4104 <lv_refr_obj_and_children+0x84>)
    40a2:	469a      	mov	sl, r3
            lv_refr_obj(i, mask_p);
    40a4:	4e15      	ldr	r6, [pc, #84]	; (40fc <lv_refr_obj_and_children+0x7c>)
            i = _lv_ll_get_prev(&(par->child_ll), i);
    40a6:	001f      	movs	r7, r3
    40a8:	e010      	b.n	40cc <lv_refr_obj_and_children+0x4c>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    40aa:	4b17      	ldr	r3, [pc, #92]	; (4108 <lv_refr_obj_and_children+0x88>)
    40ac:	6818      	ldr	r0, [r3, #0]
    40ae:	4b17      	ldr	r3, [pc, #92]	; (410c <lv_refr_obj_and_children+0x8c>)
    40b0:	4798      	blx	r3
    40b2:	1e04      	subs	r4, r0, #0
    if(top_p == NULL) return;  /*Shouldn't happen*/
    40b4:	d1eb      	bne.n	408e <lv_refr_obj_and_children+0xe>
}
    40b6:	b002      	add	sp, #8
    40b8:	bc04      	pop	{r2}
    40ba:	4692      	mov	sl, r2
    40bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        par = lv_obj_get_parent(par);
    40be:	0028      	movs	r0, r5
    40c0:	4b0f      	ldr	r3, [pc, #60]	; (4100 <lv_refr_obj_and_children+0x80>)
    40c2:	4798      	blx	r3
    40c4:	002c      	movs	r4, r5
    while(par != NULL) {
    40c6:	2800      	cmp	r0, #0
    40c8:	d0f5      	beq.n	40b6 <lv_refr_obj_and_children+0x36>
        par = lv_obj_get_parent(par);
    40ca:	0005      	movs	r5, r0
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    40cc:	1d2b      	adds	r3, r5, #4
    40ce:	9300      	str	r3, [sp, #0]
    40d0:	0021      	movs	r1, r4
    40d2:	0018      	movs	r0, r3
    40d4:	47d0      	blx	sl
    40d6:	1e04      	subs	r4, r0, #0
        while(i != NULL) {
    40d8:	d007      	beq.n	40ea <lv_refr_obj_and_children+0x6a>
            lv_refr_obj(i, mask_p);
    40da:	9901      	ldr	r1, [sp, #4]
    40dc:	0020      	movs	r0, r4
    40de:	47b0      	blx	r6
            i = _lv_ll_get_prev(&(par->child_ll), i);
    40e0:	0021      	movs	r1, r4
    40e2:	9800      	ldr	r0, [sp, #0]
    40e4:	47b8      	blx	r7
    40e6:	1e04      	subs	r4, r0, #0
        while(i != NULL) {
    40e8:	d1f7      	bne.n	40da <lv_refr_obj_and_children+0x5a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    40ea:	6a2b      	ldr	r3, [r5, #32]
    40ec:	2b00      	cmp	r3, #0
    40ee:	d0e6      	beq.n	40be <lv_refr_obj_and_children+0x3e>
    40f0:	2201      	movs	r2, #1
    40f2:	9901      	ldr	r1, [sp, #4]
    40f4:	0028      	movs	r0, r5
    40f6:	4798      	blx	r3
    40f8:	e7e1      	b.n	40be <lv_refr_obj_and_children+0x3e>
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	00003f8d 	.word	0x00003f8d
    4100:	00001a39 	.word	0x00001a39
    4104:	00010645 	.word	0x00010645
    4108:	200026e8 	.word	0x200026e8
    410c:	00001445 	.word	0x00001445

00004110 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    4110:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    4112:	4d1c      	ldr	r5, [pc, #112]	; (4184 <lv_refr_vdb_flush+0x74>)
    4114:	6828      	ldr	r0, [r5, #0]
    4116:	4b1c      	ldr	r3, [pc, #112]	; (4188 <lv_refr_vdb_flush+0x78>)
    4118:	4798      	blx	r3
    411a:	0004      	movs	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    411c:	6828      	ldr	r0, [r5, #0]
    411e:	4b1b      	ldr	r3, [pc, #108]	; (418c <lv_refr_vdb_flush+0x7c>)
    4120:	4798      	blx	r3
    4122:	2800      	cmp	r0, #0
    4124:	d10d      	bne.n	4142 <lv_refr_vdb_flush+0x32>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
    4126:	2301      	movs	r3, #1
    4128:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    412a:	4b16      	ldr	r3, [pc, #88]	; (4184 <lv_refr_vdb_flush+0x74>)
    412c:	6818      	ldr	r0, [r3, #0]
    412e:	6843      	ldr	r3, [r0, #4]
    4130:	6a1a      	ldr	r2, [r3, #32]
    4132:	07d2      	lsls	r2, r2, #31
    4134:	d50f      	bpl.n	4156 <lv_refr_vdb_flush+0x46>
    4136:	6a1b      	ldr	r3, [r3, #32]
    4138:	079b      	lsls	r3, r3, #30
    413a:	d50c      	bpl.n	4156 <lv_refr_vdb_flush+0x46>
    413c:	2301      	movs	r3, #1
    413e:	61e3      	str	r3, [r4, #28]
    4140:	e00b      	b.n	415a <lv_refr_vdb_flush+0x4a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    4142:	4d10      	ldr	r5, [pc, #64]	; (4184 <lv_refr_vdb_flush+0x74>)
    4144:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    4146:	69a3      	ldr	r3, [r4, #24]
    4148:	2b00      	cmp	r3, #0
    414a:	d0ec      	beq.n	4126 <lv_refr_vdb_flush+0x16>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    414c:	69c3      	ldr	r3, [r0, #28]
    414e:	2b00      	cmp	r3, #0
    4150:	d0f9      	beq.n	4146 <lv_refr_vdb_flush+0x36>
    4152:	4798      	blx	r3
    4154:	e7f6      	b.n	4144 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
    4156:	2300      	movs	r3, #0
    4158:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    415a:	68c3      	ldr	r3, [r0, #12]
    415c:	2b00      	cmp	r3, #0
    415e:	d003      	beq.n	4168 <lv_refr_vdb_flush+0x58>
    4160:	0021      	movs	r1, r4
    4162:	3110      	adds	r1, #16
    4164:	68a2      	ldr	r2, [r4, #8]
    4166:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    4168:	6823      	ldr	r3, [r4, #0]
    416a:	2b00      	cmp	r3, #0
    416c:	d006      	beq.n	417c <lv_refr_vdb_flush+0x6c>
    416e:	6862      	ldr	r2, [r4, #4]
    4170:	2a00      	cmp	r2, #0
    4172:	d003      	beq.n	417c <lv_refr_vdb_flush+0x6c>
        if(vdb->buf_act == vdb->buf1)
    4174:	68a1      	ldr	r1, [r4, #8]
    4176:	428b      	cmp	r3, r1
    4178:	d001      	beq.n	417e <lv_refr_vdb_flush+0x6e>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
    417a:	60a3      	str	r3, [r4, #8]
    }
}
    417c:	bd70      	pop	{r4, r5, r6, pc}
            vdb->buf_act = vdb->buf2;
    417e:	60a2      	str	r2, [r4, #8]
    4180:	e7fc      	b.n	417c <lv_refr_vdb_flush+0x6c>
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	200026e8 	.word	0x200026e8
    4188:	0000f6a1 	.word	0x0000f6a1
    418c:	0000f6a5 	.word	0x0000f6a5

00004190 <lv_refr_area_part>:
{
    4190:	b570      	push	{r4, r5, r6, lr}
    4192:	b082      	sub	sp, #8
    4194:	0005      	movs	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    4196:	4e1c      	ldr	r6, [pc, #112]	; (4208 <lv_refr_area_part+0x78>)
    4198:	6830      	ldr	r0, [r6, #0]
    419a:	4b1c      	ldr	r3, [pc, #112]	; (420c <lv_refr_area_part+0x7c>)
    419c:	4798      	blx	r3
    419e:	0004      	movs	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    41a0:	6830      	ldr	r0, [r6, #0]
    41a2:	4b1b      	ldr	r3, [pc, #108]	; (4210 <lv_refr_area_part+0x80>)
    41a4:	4798      	blx	r3
    41a6:	2800      	cmp	r0, #0
    41a8:	d109      	bne.n	41be <lv_refr_area_part+0x2e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    41aa:	4e17      	ldr	r6, [pc, #92]	; (4208 <lv_refr_area_part+0x78>)
    41ac:	6830      	ldr	r0, [r6, #0]
        while(vdb->flushing) {
    41ae:	69a3      	ldr	r3, [r4, #24]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d004      	beq.n	41be <lv_refr_area_part+0x2e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    41b4:	69c3      	ldr	r3, [r0, #28]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d0f9      	beq.n	41ae <lv_refr_area_part+0x1e>
    41ba:	4798      	blx	r3
    41bc:	e7f6      	b.n	41ac <lv_refr_area_part+0x1c>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
    41be:	0022      	movs	r2, r4
    41c0:	3210      	adds	r2, #16
    41c2:	0029      	movs	r1, r5
    41c4:	4668      	mov	r0, sp
    41c6:	4b13      	ldr	r3, [pc, #76]	; (4214 <lv_refr_area_part+0x84>)
    41c8:	4798      	blx	r3
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    41ca:	4c0f      	ldr	r4, [pc, #60]	; (4208 <lv_refr_area_part+0x78>)
    41cc:	6820      	ldr	r0, [r4, #0]
    41ce:	4b12      	ldr	r3, [pc, #72]	; (4218 <lv_refr_area_part+0x88>)
    41d0:	4798      	blx	r3
    41d2:	0001      	movs	r1, r0
    41d4:	4668      	mov	r0, sp
    41d6:	4b11      	ldr	r3, [pc, #68]	; (421c <lv_refr_area_part+0x8c>)
    41d8:	4798      	blx	r3
    lv_refr_obj_and_children(top_p, &start_mask);
    41da:	4669      	mov	r1, sp
    41dc:	4d10      	ldr	r5, [pc, #64]	; (4220 <lv_refr_area_part+0x90>)
    41de:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    41e0:	6820      	ldr	r0, [r4, #0]
    41e2:	4b10      	ldr	r3, [pc, #64]	; (4224 <lv_refr_area_part+0x94>)
    41e4:	4798      	blx	r3
    41e6:	4669      	mov	r1, sp
    41e8:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    41ea:	6820      	ldr	r0, [r4, #0]
    41ec:	4b0e      	ldr	r3, [pc, #56]	; (4228 <lv_refr_area_part+0x98>)
    41ee:	4798      	blx	r3
    41f0:	4669      	mov	r1, sp
    41f2:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    41f4:	6820      	ldr	r0, [r4, #0]
    41f6:	4b0d      	ldr	r3, [pc, #52]	; (422c <lv_refr_area_part+0x9c>)
    41f8:	4798      	blx	r3
    41fa:	2800      	cmp	r0, #0
    41fc:	d001      	beq.n	4202 <lv_refr_area_part+0x72>
}
    41fe:	b002      	add	sp, #8
    4200:	bd70      	pop	{r4, r5, r6, pc}
        lv_refr_vdb_flush();
    4202:	4b0b      	ldr	r3, [pc, #44]	; (4230 <lv_refr_area_part+0xa0>)
    4204:	4798      	blx	r3
}
    4206:	e7fa      	b.n	41fe <lv_refr_area_part+0x6e>
    4208:	200026e8 	.word	0x200026e8
    420c:	0000f6a1 	.word	0x0000f6a1
    4210:	0000f6a5 	.word	0x0000f6a5
    4214:	0000fba7 	.word	0x0000fba7
    4218:	00001445 	.word	0x00001445
    421c:	00003ef1 	.word	0x00003ef1
    4220:	00004081 	.word	0x00004081
    4224:	00001461 	.word	0x00001461
    4228:	0000147d 	.word	0x0000147d
    422c:	0000f6bd 	.word	0x0000f6bd
    4230:	00004111 	.word	0x00004111

00004234 <_lv_refr_init>:
}
    4234:	4770      	bx	lr
	...

00004238 <_lv_inv_area>:
{
    4238:	b5f0      	push	{r4, r5, r6, r7, lr}
    423a:	b085      	sub	sp, #20
    423c:	0005      	movs	r5, r0
    423e:	000e      	movs	r6, r1
    if(!disp) disp = lv_disp_get_default();
    4240:	2800      	cmp	r0, #0
    4242:	d057      	beq.n	42f4 <_lv_inv_area+0xbc>
    if(area_p == NULL) {
    4244:	2e00      	cmp	r6, #0
    4246:	d05a      	beq.n	42fe <_lv_inv_area+0xc6>
    scr_area.x1 = 0;
    4248:	ac02      	add	r4, sp, #8
    424a:	2300      	movs	r3, #0
    424c:	8023      	strh	r3, [r4, #0]
    scr_area.y1 = 0;
    424e:	8063      	strh	r3, [r4, #2]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    4250:	0028      	movs	r0, r5
    4252:	4b37      	ldr	r3, [pc, #220]	; (4330 <_lv_inv_area+0xf8>)
    4254:	4798      	blx	r3
    4256:	3801      	subs	r0, #1
    4258:	80a0      	strh	r0, [r4, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
    425a:	0028      	movs	r0, r5
    425c:	4b35      	ldr	r3, [pc, #212]	; (4334 <_lv_inv_area+0xfc>)
    425e:	4798      	blx	r3
    4260:	3801      	subs	r0, #1
    4262:	80e0      	strh	r0, [r4, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
    4264:	0022      	movs	r2, r4
    4266:	0031      	movs	r1, r6
    4268:	4668      	mov	r0, sp
    426a:	4b33      	ldr	r3, [pc, #204]	; (4338 <_lv_inv_area+0x100>)
    426c:	4798      	blx	r3
    if(suc != false) {
    426e:	2800      	cmp	r0, #0
    4270:	d04b      	beq.n	430a <_lv_inv_area+0xd2>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
    4272:	692b      	ldr	r3, [r5, #16]
    4274:	2b00      	cmp	r3, #0
    4276:	d002      	beq.n	427e <_lv_inv_area+0x46>
    4278:	4669      	mov	r1, sp
    427a:	0028      	movs	r0, r5
    427c:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
    427e:	23b4      	movs	r3, #180	; 0xb4
    4280:	005b      	lsls	r3, r3, #1
    4282:	5aeb      	ldrh	r3, [r5, r3]
    4284:	059b      	lsls	r3, r3, #22
    4286:	0d9b      	lsrs	r3, r3, #22
    4288:	2b00      	cmp	r3, #0
    428a:	dd14      	ble.n	42b6 <_lv_inv_area+0x7e>
    428c:	2100      	movs	r1, #0
    428e:	2400      	movs	r4, #0
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
    4290:	4e2a      	ldr	r6, [pc, #168]	; (433c <_lv_inv_area+0x104>)
        for(i = 0; i < disp->inv_p; i++) {
    4292:	27b4      	movs	r7, #180	; 0xb4
    4294:	007f      	lsls	r7, r7, #1
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
    4296:	3109      	adds	r1, #9
    4298:	00c9      	lsls	r1, r1, #3
    429a:	1869      	adds	r1, r5, r1
    429c:	2200      	movs	r2, #0
    429e:	4668      	mov	r0, sp
    42a0:	47b0      	blx	r6
    42a2:	2800      	cmp	r0, #0
    42a4:	d131      	bne.n	430a <_lv_inv_area+0xd2>
        for(i = 0; i < disp->inv_p; i++) {
    42a6:	3401      	adds	r4, #1
    42a8:	b2a4      	uxth	r4, r4
    42aa:	0021      	movs	r1, r4
    42ac:	5beb      	ldrh	r3, [r5, r7]
    42ae:	059b      	lsls	r3, r3, #22
    42b0:	0d9b      	lsrs	r3, r3, #22
    42b2:	429c      	cmp	r4, r3
    42b4:	dbef      	blt.n	4296 <_lv_inv_area+0x5e>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
    42b6:	2b1f      	cmp	r3, #31
    42b8:	dc29      	bgt.n	430e <_lv_inv_area+0xd6>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    42ba:	3309      	adds	r3, #9
    42bc:	00db      	lsls	r3, r3, #3
    42be:	18eb      	adds	r3, r5, r3
    42c0:	2200      	movs	r2, #0
        *d8 = *s8;
    42c2:	4669      	mov	r1, sp
    42c4:	5c51      	ldrb	r1, [r2, r1]
    42c6:	5499      	strb	r1, [r3, r2]
    42c8:	3201      	adds	r2, #1
    while(len) {
    42ca:	2a08      	cmp	r2, #8
    42cc:	d1f9      	bne.n	42c2 <_lv_inv_area+0x8a>
        disp->inv_p++;
    42ce:	21b4      	movs	r1, #180	; 0xb4
    42d0:	0049      	lsls	r1, r1, #1
    42d2:	5a6b      	ldrh	r3, [r5, r1]
    42d4:	059a      	lsls	r2, r3, #22
    42d6:	2080      	movs	r0, #128	; 0x80
    42d8:	03c0      	lsls	r0, r0, #15
    42da:	4684      	mov	ip, r0
    42dc:	4462      	add	r2, ip
    42de:	0d92      	lsrs	r2, r2, #22
    42e0:	0a9b      	lsrs	r3, r3, #10
    42e2:	029b      	lsls	r3, r3, #10
    42e4:	4313      	orrs	r3, r2
    42e6:	526b      	strh	r3, [r5, r1]
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
    42e8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    42ea:	3966      	subs	r1, #102	; 0x66
    42ec:	39ff      	subs	r1, #255	; 0xff
    42ee:	4b14      	ldr	r3, [pc, #80]	; (4340 <_lv_inv_area+0x108>)
    42f0:	4798      	blx	r3
    42f2:	e00a      	b.n	430a <_lv_inv_area+0xd2>
    if(!disp) disp = lv_disp_get_default();
    42f4:	4b13      	ldr	r3, [pc, #76]	; (4344 <_lv_inv_area+0x10c>)
    42f6:	4798      	blx	r3
    42f8:	1e05      	subs	r5, r0, #0
    if(!disp) return;
    42fa:	d006      	beq.n	430a <_lv_inv_area+0xd2>
    42fc:	e7a2      	b.n	4244 <_lv_inv_area+0xc>
        disp->inv_p = 0;
    42fe:	22b4      	movs	r2, #180	; 0xb4
    4300:	0052      	lsls	r2, r2, #1
    4302:	5aab      	ldrh	r3, [r5, r2]
    4304:	0a9b      	lsrs	r3, r3, #10
    4306:	029b      	lsls	r3, r3, #10
    4308:	52ab      	strh	r3, [r5, r2]
}
    430a:	b005      	add	sp, #20
    430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
    430e:	22b4      	movs	r2, #180	; 0xb4
    4310:	0052      	lsls	r2, r2, #1
    4312:	5aab      	ldrh	r3, [r5, r2]
    4314:	0a9b      	lsrs	r3, r3, #10
    4316:	029b      	lsls	r3, r3, #10
    4318:	52ab      	strh	r3, [r5, r2]
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
    431a:	0028      	movs	r0, r5
    431c:	3048      	adds	r0, #72	; 0x48
    431e:	2300      	movs	r3, #0
        *d8 = *s8;
    4320:	a902      	add	r1, sp, #8
    4322:	5c5a      	ldrb	r2, [r3, r1]
    4324:	54c2      	strb	r2, [r0, r3]
    4326:	3301      	adds	r3, #1
    while(len) {
    4328:	2b08      	cmp	r3, #8
    432a:	d1fa      	bne.n	4322 <_lv_inv_area+0xea>
    432c:	e7cf      	b.n	42ce <_lv_inv_area+0x96>
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	0000f5ad 	.word	0x0000f5ad
    4334:	0000f5d5 	.word	0x0000f5d5
    4338:	0000fba7 	.word	0x0000fba7
    433c:	0000fe35 	.word	0x0000fe35
    4340:	000114e1 	.word	0x000114e1
    4344:	0000f5a1 	.word	0x0000f5a1

00004348 <_lv_refr_get_disp_refreshing>:
    return disp_refr;
    4348:	4b01      	ldr	r3, [pc, #4]	; (4350 <_lv_refr_get_disp_refreshing+0x8>)
    434a:	6818      	ldr	r0, [r3, #0]
}
    434c:	4770      	bx	lr
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	200026e8 	.word	0x200026e8

00004354 <_lv_disp_refr_task>:
{
    4354:	b5f0      	push	{r4, r5, r6, r7, lr}
    4356:	46de      	mov	lr, fp
    4358:	4657      	mov	r7, sl
    435a:	464e      	mov	r6, r9
    435c:	4645      	mov	r5, r8
    435e:	b5e0      	push	{r5, r6, r7, lr}
    4360:	b089      	sub	sp, #36	; 0x24
    4362:	0005      	movs	r5, r0
    uint32_t start = lv_tick_get();
    4364:	4bc7      	ldr	r3, [pc, #796]	; (4684 <_lv_disp_refr_task+0x330>)
    4366:	4798      	blx	r3
    4368:	9005      	str	r0, [sp, #20]
    disp_refr = task->user_data;
    436a:	4cc7      	ldr	r4, [pc, #796]	; (4688 <_lv_disp_refr_task+0x334>)
    436c:	68eb      	ldr	r3, [r5, #12]
    436e:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
    4370:	2100      	movs	r1, #0
    4372:	0028      	movs	r0, r5
    4374:	4bc5      	ldr	r3, [pc, #788]	; (468c <_lv_disp_refr_task+0x338>)
    4376:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
    4378:	6820      	ldr	r0, [r4, #0]
    437a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    437c:	2b00      	cmp	r3, #0
    437e:	d00e      	beq.n	439e <_lv_disp_refr_task+0x4a>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    4380:	23b4      	movs	r3, #180	; 0xb4
    4382:	005b      	lsls	r3, r3, #1
    4384:	5ac3      	ldrh	r3, [r0, r3]
    4386:	059b      	lsls	r3, r3, #22
    4388:	2748      	movs	r7, #72	; 0x48
    438a:	2600      	movs	r6, #0
    438c:	2b00      	cmp	r3, #0
    438e:	d100      	bne.n	4392 <_lv_disp_refr_task+0x3e>
    4390:	e284      	b.n	489c <_lv_disp_refr_task+0x548>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    4392:	4bbd      	ldr	r3, [pc, #756]	; (4688 <_lv_disp_refr_task+0x334>)
    4394:	4698      	mov	r8, r3
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    4396:	4bbe      	ldr	r3, [pc, #760]	; (4690 <_lv_disp_refr_task+0x33c>)
    4398:	469a      	mov	sl, r3
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    439a:	46c3      	mov	fp, r8
    439c:	e056      	b.n	444c <_lv_disp_refr_task+0xf8>
        disp_refr->inv_p = 0;
    439e:	22b4      	movs	r2, #180	; 0xb4
    43a0:	0052      	lsls	r2, r2, #1
    43a2:	5a83      	ldrh	r3, [r0, r2]
    43a4:	0a9b      	lsrs	r3, r3, #10
    43a6:	029b      	lsls	r3, r3, #10
    43a8:	5283      	strh	r3, [r0, r2]
        return;
    43aa:	e26d      	b.n	4888 <_lv_disp_refr_task+0x534>
                disp_refr->inv_area_joined[join_from] = 1;
    43ac:	1900      	adds	r0, r0, r4
    43ae:	3049      	adds	r0, #73	; 0x49
    43b0:	30ff      	adds	r0, #255	; 0xff
    43b2:	3b07      	subs	r3, #7
    43b4:	7003      	strb	r3, [r0, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    43b6:	3401      	adds	r4, #1
    43b8:	4bb3      	ldr	r3, [pc, #716]	; (4688 <_lv_disp_refr_task+0x334>)
    43ba:	6818      	ldr	r0, [r3, #0]
    43bc:	23b4      	movs	r3, #180	; 0xb4
    43be:	005b      	lsls	r3, r3, #1
    43c0:	5ac3      	ldrh	r3, [r0, r3]
    43c2:	059b      	lsls	r3, r3, #22
    43c4:	0d9b      	lsrs	r3, r3, #22
    43c6:	429c      	cmp	r4, r3
    43c8:	d235      	bcs.n	4436 <_lv_disp_refr_task+0xe2>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
    43ca:	1903      	adds	r3, r0, r4
    43cc:	3349      	adds	r3, #73	; 0x49
    43ce:	33ff      	adds	r3, #255	; 0xff
    43d0:	781b      	ldrb	r3, [r3, #0]
    43d2:	2b00      	cmp	r3, #0
    43d4:	d1ef      	bne.n	43b6 <_lv_disp_refr_task+0x62>
    43d6:	42a6      	cmp	r6, r4
    43d8:	d0ed      	beq.n	43b6 <_lv_disp_refr_task+0x62>
    43da:	0025      	movs	r5, r4
    43dc:	3509      	adds	r5, #9
    43de:	00ed      	lsls	r5, r5, #3
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    43e0:	1941      	adds	r1, r0, r5
    43e2:	19c0      	adds	r0, r0, r7
    43e4:	47d0      	blx	sl
    43e6:	2800      	cmp	r0, #0
    43e8:	d0e5      	beq.n	43b6 <_lv_disp_refr_task+0x62>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    43ea:	465b      	mov	r3, fp
    43ec:	6819      	ldr	r1, [r3, #0]
    43ee:	194a      	adds	r2, r1, r5
    43f0:	19c9      	adds	r1, r1, r7
    43f2:	a806      	add	r0, sp, #24
    43f4:	4ba7      	ldr	r3, [pc, #668]	; (4694 <_lv_disp_refr_task+0x340>)
    43f6:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    43f8:	a806      	add	r0, sp, #24
    43fa:	4ba7      	ldr	r3, [pc, #668]	; (4698 <_lv_disp_refr_task+0x344>)
    43fc:	4699      	mov	r9, r3
    43fe:	4798      	blx	r3
    4400:	9000      	str	r0, [sp, #0]
    4402:	465b      	mov	r3, fp
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	19d8      	adds	r0, r3, r7
    4408:	47c8      	blx	r9
    440a:	9001      	str	r0, [sp, #4]
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
    440c:	465b      	mov	r3, fp
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	1958      	adds	r0, r3, r5
    4412:	47c8      	blx	r9
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	469c      	mov	ip, r3
    4418:	4460      	add	r0, ip
    441a:	9b00      	ldr	r3, [sp, #0]
    441c:	4283      	cmp	r3, r0
    441e:	d2ca      	bcs.n	43b6 <_lv_disp_refr_task+0x62>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
    4420:	4b99      	ldr	r3, [pc, #612]	; (4688 <_lv_disp_refr_task+0x334>)
    4422:	6818      	ldr	r0, [r3, #0]
    4424:	19c1      	adds	r1, r0, r7
    4426:	2300      	movs	r3, #0
        *d8 = *s8;
    4428:	aa06      	add	r2, sp, #24
    442a:	5c9a      	ldrb	r2, [r3, r2]
    442c:	54ca      	strb	r2, [r1, r3]
    442e:	3301      	adds	r3, #1
    while(len) {
    4430:	2b08      	cmp	r3, #8
    4432:	d1f9      	bne.n	4428 <_lv_disp_refr_task+0xd4>
    4434:	e7ba      	b.n	43ac <_lv_disp_refr_task+0x58>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    4436:	3601      	adds	r6, #1
    4438:	4b93      	ldr	r3, [pc, #588]	; (4688 <_lv_disp_refr_task+0x334>)
    443a:	6818      	ldr	r0, [r3, #0]
    443c:	23b4      	movs	r3, #180	; 0xb4
    443e:	005b      	lsls	r3, r3, #1
    4440:	5ac3      	ldrh	r3, [r0, r3]
    4442:	059b      	lsls	r3, r3, #22
    4444:	0d9b      	lsrs	r3, r3, #22
    4446:	3708      	adds	r7, #8
    4448:	429e      	cmp	r6, r3
    444a:	d20f      	bcs.n	446c <_lv_disp_refr_task+0x118>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
    444c:	1980      	adds	r0, r0, r6
    444e:	3049      	adds	r0, #73	; 0x49
    4450:	30ff      	adds	r0, #255	; 0xff
    4452:	7803      	ldrb	r3, [r0, #0]
    4454:	2b00      	cmp	r3, #0
    4456:	d1ee      	bne.n	4436 <_lv_disp_refr_task+0xe2>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    4458:	4643      	mov	r3, r8
    445a:	6818      	ldr	r0, [r3, #0]
    445c:	23b4      	movs	r3, #180	; 0xb4
    445e:	005b      	lsls	r3, r3, #1
    4460:	5ac3      	ldrh	r3, [r0, r3]
    4462:	059b      	lsls	r3, r3, #22
    4464:	d100      	bne.n	4468 <_lv_disp_refr_task+0x114>
    4466:	e1fb      	b.n	4860 <_lv_disp_refr_task+0x50c>
    4468:	2400      	movs	r4, #0
    446a:	e7ae      	b.n	43ca <_lv_disp_refr_task+0x76>
    px_num = 0;
    446c:	2100      	movs	r1, #0
    446e:	4a8b      	ldr	r2, [pc, #556]	; (469c <_lv_disp_refr_task+0x348>)
    4470:	6011      	str	r1, [r2, #0]
    if(disp_refr->inv_p == 0) return;
    4472:	22b4      	movs	r2, #180	; 0xb4
    4474:	0052      	lsls	r2, r2, #1
    4476:	5a82      	ldrh	r2, [r0, r2]
    4478:	0592      	lsls	r2, r2, #22
    447a:	d100      	bne.n	447e <_lv_disp_refr_task+0x12a>
    447c:	e1f8      	b.n	4870 <_lv_disp_refr_task+0x51c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    447e:	001a      	movs	r2, r3
    4480:	3a01      	subs	r2, #1
    4482:	9204      	str	r2, [sp, #16]
    4484:	d42d      	bmi.n	44e2 <_lv_disp_refr_task+0x18e>
        if(disp_refr->inv_area_joined[i] == 0) {
    4486:	9904      	ldr	r1, [sp, #16]
    4488:	1842      	adds	r2, r0, r1
    448a:	3249      	adds	r2, #73	; 0x49
    448c:	32ff      	adds	r2, #255	; 0xff
    448e:	7812      	ldrb	r2, [r2, #0]
    4490:	2a00      	cmp	r2, #0
    4492:	d00d      	beq.n	44b0 <_lv_disp_refr_task+0x15c>
    4494:	3347      	adds	r3, #71	; 0x47
    4496:	33ff      	adds	r3, #255	; 0xff
    4498:	18c3      	adds	r3, r0, r3
    449a:	000a      	movs	r2, r1
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    449c:	3a01      	subs	r2, #1
    449e:	d305      	bcc.n	44ac <_lv_disp_refr_task+0x158>
    44a0:	3b01      	subs	r3, #1
        if(disp_refr->inv_area_joined[i] == 0) {
    44a2:	7859      	ldrb	r1, [r3, #1]
    44a4:	2900      	cmp	r1, #0
    44a6:	d1f9      	bne.n	449c <_lv_disp_refr_task+0x148>
    44a8:	9204      	str	r2, [sp, #16]
    44aa:	e001      	b.n	44b0 <_lv_disp_refr_task+0x15c>
    int32_t last_i = 0;
    44ac:	2300      	movs	r3, #0
    44ae:	9304      	str	r3, [sp, #16]
    disp_refr->driver.buffer->last_area = 0;
    44b0:	6841      	ldr	r1, [r0, #4]
    44b2:	2320      	movs	r3, #32
    44b4:	5cca      	ldrb	r2, [r1, r3]
    44b6:	2401      	movs	r4, #1
    44b8:	43a2      	bics	r2, r4
    44ba:	54ca      	strb	r2, [r1, r3]
    disp_refr->driver.buffer->last_part = 0;
    44bc:	6841      	ldr	r1, [r0, #4]
    44be:	5cca      	ldrb	r2, [r1, r3]
    44c0:	2002      	movs	r0, #2
    44c2:	4382      	bics	r2, r0
    44c4:	54ca      	strb	r2, [r1, r3]
    for(i = 0; i < disp_refr->inv_p; i++) {
    44c6:	4b70      	ldr	r3, [pc, #448]	; (4688 <_lv_disp_refr_task+0x334>)
    44c8:	681c      	ldr	r4, [r3, #0]
    44ca:	23b4      	movs	r3, #180	; 0xb4
    44cc:	005b      	lsls	r3, r3, #1
    44ce:	5ae3      	ldrh	r3, [r4, r3]
    44d0:	059b      	lsls	r3, r3, #22
    44d2:	d100      	bne.n	44d6 <_lv_disp_refr_task+0x182>
    44d4:	e1cc      	b.n	4870 <_lv_disp_refr_task+0x51c>
    44d6:	2348      	movs	r3, #72	; 0x48
    44d8:	9301      	str	r3, [sp, #4]
    44da:	2300      	movs	r3, #0
    44dc:	469b      	mov	fp, r3
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    44de:	0027      	movs	r7, r4
    44e0:	e044      	b.n	456c <_lv_disp_refr_task+0x218>
    int32_t last_i = 0;
    44e2:	2300      	movs	r3, #0
    44e4:	9304      	str	r3, [sp, #16]
    44e6:	e7e3      	b.n	44b0 <_lv_disp_refr_task+0x15c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    44e8:	6879      	ldr	r1, [r7, #4]
    44ea:	2220      	movs	r2, #32
    44ec:	5c8b      	ldrb	r3, [r1, r2]
    44ee:	2001      	movs	r0, #1
    44f0:	4303      	orrs	r3, r0
    44f2:	548b      	strb	r3, [r1, r2]
    44f4:	e044      	b.n	4580 <_lv_disp_refr_task+0x22c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    44f6:	4c64      	ldr	r4, [pc, #400]	; (4688 <_lv_disp_refr_task+0x334>)
    44f8:	6820      	ldr	r0, [r4, #0]
    44fa:	4b69      	ldr	r3, [pc, #420]	; (46a0 <_lv_disp_refr_task+0x34c>)
    44fc:	4798      	blx	r3
    44fe:	0005      	movs	r5, r0
        vdb->area.x1        = 0;
    4500:	2600      	movs	r6, #0
    4502:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
    4504:	6820      	ldr	r0, [r4, #0]
    4506:	4b67      	ldr	r3, [pc, #412]	; (46a4 <_lv_disp_refr_task+0x350>)
    4508:	4798      	blx	r3
    450a:	3801      	subs	r0, #1
    450c:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
    450e:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
    4510:	6820      	ldr	r0, [r4, #0]
    4512:	4b65      	ldr	r3, [pc, #404]	; (46a8 <_lv_disp_refr_task+0x354>)
    4514:	4798      	blx	r3
    4516:	3801      	subs	r0, #1
    4518:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
    451a:	6823      	ldr	r3, [r4, #0]
    451c:	6859      	ldr	r1, [r3, #4]
    451e:	2220      	movs	r2, #32
    4520:	5c8b      	ldrb	r3, [r1, r2]
    4522:	2002      	movs	r0, #2
    4524:	4303      	orrs	r3, r0
    4526:	548b      	strb	r3, [r1, r2]
        lv_refr_area_part(area_p);
    4528:	9800      	ldr	r0, [sp, #0]
    452a:	4b60      	ldr	r3, [pc, #384]	; (46ac <_lv_disp_refr_task+0x358>)
    452c:	4798      	blx	r3
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    452e:	4b56      	ldr	r3, [pc, #344]	; (4688 <_lv_disp_refr_task+0x334>)
    4530:	6818      	ldr	r0, [r3, #0]
    4532:	6983      	ldr	r3, [r0, #24]
    4534:	2b00      	cmp	r3, #0
    4536:	d009      	beq.n	454c <_lv_disp_refr_task+0x1f8>
    4538:	9b01      	ldr	r3, [sp, #4]
    453a:	469c      	mov	ip, r3
    453c:	4460      	add	r0, ip
    453e:	4b56      	ldr	r3, [pc, #344]	; (4698 <_lv_disp_refr_task+0x344>)
    4540:	4798      	blx	r3
    4542:	4b56      	ldr	r3, [pc, #344]	; (469c <_lv_disp_refr_task+0x348>)
    4544:	681a      	ldr	r2, [r3, #0]
    4546:	4694      	mov	ip, r2
    4548:	4460      	add	r0, ip
    454a:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
    454c:	2301      	movs	r3, #1
    454e:	469c      	mov	ip, r3
    4550:	44e3      	add	fp, ip
    4552:	4b4d      	ldr	r3, [pc, #308]	; (4688 <_lv_disp_refr_task+0x334>)
    4554:	681f      	ldr	r7, [r3, #0]
    4556:	9b01      	ldr	r3, [sp, #4]
    4558:	3308      	adds	r3, #8
    455a:	9301      	str	r3, [sp, #4]
    455c:	23b4      	movs	r3, #180	; 0xb4
    455e:	005b      	lsls	r3, r3, #1
    4560:	5afb      	ldrh	r3, [r7, r3]
    4562:	059b      	lsls	r3, r3, #22
    4564:	0d9b      	lsrs	r3, r3, #22
    4566:	459b      	cmp	fp, r3
    4568:	db00      	blt.n	456c <_lv_disp_refr_task+0x218>
    456a:	e181      	b.n	4870 <_lv_disp_refr_task+0x51c>
        if(disp_refr->inv_area_joined[i] == 0) {
    456c:	465b      	mov	r3, fp
    456e:	18fb      	adds	r3, r7, r3
    4570:	3349      	adds	r3, #73	; 0x49
    4572:	33ff      	adds	r3, #255	; 0xff
    4574:	781b      	ldrb	r3, [r3, #0]
    4576:	2b00      	cmp	r3, #0
    4578:	d1e8      	bne.n	454c <_lv_disp_refr_task+0x1f8>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    457a:	9b04      	ldr	r3, [sp, #16]
    457c:	455b      	cmp	r3, fp
    457e:	d0b3      	beq.n	44e8 <_lv_disp_refr_task+0x194>
            disp_refr->driver.buffer->last_part = 0;
    4580:	6879      	ldr	r1, [r7, #4]
    4582:	2220      	movs	r2, #32
    4584:	5c8b      	ldrb	r3, [r1, r2]
    4586:	2002      	movs	r0, #2
    4588:	4383      	bics	r3, r0
    458a:	548b      	strb	r3, [r1, r2]
            lv_refr_area(&disp_refr->inv_areas[i]);
    458c:	9b01      	ldr	r3, [sp, #4]
    458e:	469c      	mov	ip, r3
    4590:	44bc      	add	ip, r7
    4592:	4663      	mov	r3, ip
    4594:	9300      	str	r3, [sp, #0]
    if(lv_disp_is_true_double_buf(disp_refr)) {
    4596:	0038      	movs	r0, r7
    4598:	4b45      	ldr	r3, [pc, #276]	; (46b0 <_lv_disp_refr_task+0x35c>)
    459a:	4798      	blx	r3
    459c:	2800      	cmp	r0, #0
    459e:	d1aa      	bne.n	44f6 <_lv_disp_refr_task+0x1a2>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    45a0:	4b39      	ldr	r3, [pc, #228]	; (4688 <_lv_disp_refr_task+0x334>)
    45a2:	469a      	mov	sl, r3
    45a4:	6818      	ldr	r0, [r3, #0]
    45a6:	4b3e      	ldr	r3, [pc, #248]	; (46a0 <_lv_disp_refr_task+0x34c>)
    45a8:	4798      	blx	r3
    45aa:	0006      	movs	r6, r0
    45ac:	465b      	mov	r3, fp
    45ae:	00db      	lsls	r3, r3, #3
    45b0:	18ff      	adds	r7, r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    45b2:	234c      	movs	r3, #76	; 0x4c
    45b4:	5afc      	ldrh	r4, [r7, r3]
    45b6:	3401      	adds	r4, #1
    45b8:	3b04      	subs	r3, #4
    45ba:	5afb      	ldrh	r3, [r7, r3]
    45bc:	1ae4      	subs	r4, r4, r3
    45be:	b223      	sxth	r3, r4
    45c0:	4698      	mov	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    45c2:	234e      	movs	r3, #78	; 0x4e
    45c4:	5efc      	ldrsh	r4, [r7, r3]
    45c6:	1c65      	adds	r5, r4, #1
    45c8:	234a      	movs	r3, #74	; 0x4a
    45ca:	5afb      	ldrh	r3, [r7, r3]
    45cc:	1aed      	subs	r5, r5, r3
    45ce:	b22d      	sxth	r5, r5
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    45d0:	4653      	mov	r3, sl
    45d2:	6818      	ldr	r0, [r3, #0]
    45d4:	4b34      	ldr	r3, [pc, #208]	; (46a8 <_lv_disp_refr_task+0x354>)
    45d6:	4798      	blx	r3
        lv_coord_t y2 =
    45d8:	4284      	cmp	r4, r0
    45da:	da31      	bge.n	4640 <_lv_disp_refr_task+0x2ec>
    45dc:	234e      	movs	r3, #78	; 0x4e
    45de:	5efb      	ldrsh	r3, [r7, r3]
    45e0:	4699      	mov	r9, r3
        int32_t max_row = (uint32_t)vdb->size / w;
    45e2:	4641      	mov	r1, r8
    45e4:	68f0      	ldr	r0, [r6, #12]
    45e6:	4b33      	ldr	r3, [pc, #204]	; (46b4 <_lv_disp_refr_task+0x360>)
    45e8:	4798      	blx	r3
    45ea:	46a8      	mov	r8, r5
    45ec:	4285      	cmp	r5, r0
    45ee:	dd00      	ble.n	45f2 <_lv_disp_refr_task+0x29e>
    45f0:	4680      	mov	r8, r0
        if(disp_refr->driver.rounder_cb) {
    45f2:	4b25      	ldr	r3, [pc, #148]	; (4688 <_lv_disp_refr_task+0x334>)
    45f4:	681b      	ldr	r3, [r3, #0]
    45f6:	691b      	ldr	r3, [r3, #16]
    45f8:	2b00      	cmp	r3, #0
    45fa:	d02f      	beq.n	465c <_lv_disp_refr_task+0x308>
            tmp.x1 = 0;
    45fc:	2300      	movs	r3, #0
    45fe:	aa06      	add	r2, sp, #24
    4600:	8013      	strh	r3, [r2, #0]
            tmp.x2 = 0;
    4602:	8093      	strh	r3, [r2, #4]
            tmp.y1 = 0;
    4604:	8053      	strh	r3, [r2, #2]
            lv_coord_t h_tmp = max_row;
    4606:	4643      	mov	r3, r8
    4608:	b21d      	sxth	r5, r3
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    460a:	4b1f      	ldr	r3, [pc, #124]	; (4688 <_lv_disp_refr_task+0x334>)
    460c:	469a      	mov	sl, r3
    460e:	4643      	mov	r3, r8
    4610:	46b0      	mov	r8, r6
    4612:	001e      	movs	r6, r3
    4614:	1e6c      	subs	r4, r5, #1
    4616:	b224      	sxth	r4, r4
                tmp.y2 = h_tmp - 1;
    4618:	ab06      	add	r3, sp, #24
    461a:	80dc      	strh	r4, [r3, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    461c:	4653      	mov	r3, sl
    461e:	6818      	ldr	r0, [r3, #0]
    4620:	6903      	ldr	r3, [r0, #16]
    4622:	a906      	add	r1, sp, #24
    4624:	4798      	blx	r3
    4626:	ab06      	add	r3, sp, #24
    4628:	2106      	movs	r1, #6
    462a:	5e59      	ldrsh	r1, [r3, r1]
    462c:	1c4b      	adds	r3, r1, #1
    462e:	aa06      	add	r2, sp, #24
    4630:	8852      	ldrh	r2, [r2, #2]
    4632:	1a9b      	subs	r3, r3, r2
                if(lv_area_get_height(&tmp) <= max_row) break;
    4634:	b21b      	sxth	r3, r3
    4636:	429e      	cmp	r6, r3
    4638:	da0a      	bge.n	4650 <_lv_disp_refr_task+0x2fc>
                h_tmp--;
    463a:	1e25      	subs	r5, r4, #0
            } while(h_tmp > 0);
    463c:	dcea      	bgt.n	4614 <_lv_disp_refr_task+0x2c0>
    463e:	e776      	b.n	452e <_lv_disp_refr_task+0x1da>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    4640:	4b11      	ldr	r3, [pc, #68]	; (4688 <_lv_disp_refr_task+0x334>)
    4642:	6818      	ldr	r0, [r3, #0]
    4644:	4b18      	ldr	r3, [pc, #96]	; (46a8 <_lv_disp_refr_task+0x354>)
    4646:	4798      	blx	r3
    4648:	3801      	subs	r0, #1
        lv_coord_t y2 =
    464a:	b203      	sxth	r3, r0
    464c:	4699      	mov	r9, r3
    464e:	e7c8      	b.n	45e2 <_lv_disp_refr_task+0x28e>
    4650:	4646      	mov	r6, r8
            if(h_tmp <= 0) {
    4652:	2d00      	cmp	r5, #0
    4654:	dc00      	bgt.n	4658 <_lv_disp_refr_task+0x304>
    4656:	e76a      	b.n	452e <_lv_disp_refr_task+0x1da>
                max_row = tmp.y2 + 1;
    4658:	1c4b      	adds	r3, r1, #1
    465a:	4698      	mov	r8, r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    465c:	234a      	movs	r3, #74	; 0x4a
    465e:	5efc      	ldrsh	r4, [r7, r3]
    4660:	464b      	mov	r3, r9
    4662:	9302      	str	r3, [sp, #8]
    4664:	4643      	mov	r3, r8
    4666:	18e3      	adds	r3, r4, r3
    4668:	3b01      	subs	r3, #1
    466a:	454b      	cmp	r3, r9
    466c:	dc67      	bgt.n	473e <_lv_disp_refr_task+0x3ea>
            vdb->area.y2 = row + max_row - 1;
    466e:	4643      	mov	r3, r8
    4670:	466a      	mov	r2, sp
    4672:	8193      	strh	r3, [r2, #12]
    4674:	8993      	ldrh	r3, [r2, #12]
    4676:	469a      	mov	sl, r3
    4678:	3b01      	subs	r3, #1
    467a:	9303      	str	r3, [sp, #12]
    467c:	464b      	mov	r3, r9
    467e:	46b9      	mov	r9, r7
    4680:	001f      	movs	r7, r3
    4682:	e026      	b.n	46d2 <_lv_disp_refr_task+0x37e>
    4684:	0000f725 	.word	0x0000f725
    4688:	200026e8 	.word	0x200026e8
    468c:	000114e1 	.word	0x000114e1
    4690:	0000fdf1 	.word	0x0000fdf1
    4694:	0000fc15 	.word	0x0000fc15
    4698:	0000fb8b 	.word	0x0000fb8b
    469c:	200026ec 	.word	0x200026ec
    46a0:	0000f6a1 	.word	0x0000f6a1
    46a4:	0000f5ad 	.word	0x0000f5ad
    46a8:	0000f5d5 	.word	0x0000f5d5
    46ac:	00004191 	.word	0x00004191
    46b0:	0000f6bd 	.word	0x0000f6bd
    46b4:	00017961 	.word	0x00017961
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    46b8:	42af      	cmp	r7, r5
    46ba:	d01c      	beq.n	46f6 <_lv_disp_refr_task+0x3a2>
            lv_refr_area_part(area_p);
    46bc:	9800      	ldr	r0, [sp, #0]
    46be:	4b7d      	ldr	r3, [pc, #500]	; (48b4 <_lv_disp_refr_task+0x560>)
    46c0:	4798      	blx	r3
    46c2:	4454      	add	r4, sl
    46c4:	b224      	sxth	r4, r4
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    46c6:	4643      	mov	r3, r8
    46c8:	18e3      	adds	r3, r4, r3
    46ca:	3b01      	subs	r3, #1
    46cc:	9a02      	ldr	r2, [sp, #8]
    46ce:	4293      	cmp	r3, r2
    46d0:	dc1a      	bgt.n	4708 <_lv_disp_refr_task+0x3b4>
            vdb->area.x1 = area_p->x1;
    46d2:	2348      	movs	r3, #72	; 0x48
    46d4:	464a      	mov	r2, r9
    46d6:	5ed3      	ldrsh	r3, [r2, r3]
    46d8:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    46da:	234c      	movs	r3, #76	; 0x4c
    46dc:	464a      	mov	r2, r9
    46de:	5ed3      	ldrsh	r3, [r2, r3]
    46e0:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    46e2:	8274      	strh	r4, [r6, #18]
    46e4:	b2a4      	uxth	r4, r4
    46e6:	9b03      	ldr	r3, [sp, #12]
    46e8:	18e5      	adds	r5, r4, r3
    46ea:	b22d      	sxth	r5, r5
            vdb->area.y2 = row + max_row - 1;
    46ec:	82f5      	strh	r5, [r6, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
    46ee:	42af      	cmp	r7, r5
    46f0:	dae2      	bge.n	46b8 <_lv_disp_refr_task+0x364>
    46f2:	82f7      	strh	r7, [r6, #22]
            row_last = vdb->area.y2;
    46f4:	003d      	movs	r5, r7
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    46f6:	4b70      	ldr	r3, [pc, #448]	; (48b8 <_lv_disp_refr_task+0x564>)
    46f8:	681b      	ldr	r3, [r3, #0]
    46fa:	6859      	ldr	r1, [r3, #4]
    46fc:	2220      	movs	r2, #32
    46fe:	5c8b      	ldrb	r3, [r1, r2]
    4700:	2002      	movs	r0, #2
    4702:	4303      	orrs	r3, r0
    4704:	548b      	strb	r3, [r1, r2]
    4706:	e7d9      	b.n	46bc <_lv_disp_refr_task+0x368>
    4708:	003b      	movs	r3, r7
    470a:	464f      	mov	r7, r9
    470c:	4699      	mov	r9, r3
        if(y2 != row_last) {
    470e:	45a9      	cmp	r9, r5
    4710:	d100      	bne.n	4714 <_lv_disp_refr_task+0x3c0>
    4712:	e70c      	b.n	452e <_lv_disp_refr_task+0x1da>
            vdb->area.x1 = area_p->x1;
    4714:	2348      	movs	r3, #72	; 0x48
    4716:	5efb      	ldrsh	r3, [r7, r3]
    4718:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    471a:	234c      	movs	r3, #76	; 0x4c
    471c:	5efb      	ldrsh	r3, [r7, r3]
    471e:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    4720:	8274      	strh	r4, [r6, #18]
            vdb->area.y2 = y2;
    4722:	464b      	mov	r3, r9
    4724:	82f3      	strh	r3, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
    4726:	4b64      	ldr	r3, [pc, #400]	; (48b8 <_lv_disp_refr_task+0x564>)
    4728:	681b      	ldr	r3, [r3, #0]
    472a:	6859      	ldr	r1, [r3, #4]
    472c:	2220      	movs	r2, #32
    472e:	5c8b      	ldrb	r3, [r1, r2]
    4730:	2002      	movs	r0, #2
    4732:	4303      	orrs	r3, r0
    4734:	548b      	strb	r3, [r1, r2]
            lv_refr_area_part(area_p);
    4736:	9800      	ldr	r0, [sp, #0]
    4738:	4b5e      	ldr	r3, [pc, #376]	; (48b4 <_lv_disp_refr_task+0x560>)
    473a:	4798      	blx	r3
    473c:	e6f7      	b.n	452e <_lv_disp_refr_task+0x1da>
        lv_coord_t row_last = 0;
    473e:	2500      	movs	r5, #0
    4740:	e7e5      	b.n	470e <_lv_disp_refr_task+0x3ba>
        if(lv_disp_is_true_double_buf(disp_refr) && disp_refr->driver.set_px_cb == NULL) {
    4742:	4b5e      	ldr	r3, [pc, #376]	; (48bc <_lv_disp_refr_task+0x568>)
    4744:	4798      	blx	r3
    4746:	2800      	cmp	r0, #0
    4748:	d004      	beq.n	4754 <_lv_disp_refr_task+0x400>
    474a:	4b5b      	ldr	r3, [pc, #364]	; (48b8 <_lv_disp_refr_task+0x564>)
    474c:	6818      	ldr	r0, [r3, #0]
    474e:	6943      	ldr	r3, [r0, #20]
    4750:	2b00      	cmp	r3, #0
    4752:	d01f      	beq.n	4794 <_lv_disp_refr_task+0x440>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
    4754:	4c58      	ldr	r4, [pc, #352]	; (48b8 <_lv_disp_refr_task+0x564>)
    4756:	6820      	ldr	r0, [r4, #0]
    4758:	3048      	adds	r0, #72	; 0x48
    475a:	2180      	movs	r1, #128	; 0x80
    475c:	0049      	lsls	r1, r1, #1
    475e:	4d58      	ldr	r5, [pc, #352]	; (48c0 <_lv_disp_refr_task+0x56c>)
    4760:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
    4762:	6820      	ldr	r0, [r4, #0]
    4764:	3049      	adds	r0, #73	; 0x49
    4766:	30ff      	adds	r0, #255	; 0xff
    4768:	2120      	movs	r1, #32
    476a:	47a8      	blx	r5
        disp_refr->inv_p = 0;
    476c:	6821      	ldr	r1, [r4, #0]
    476e:	22b4      	movs	r2, #180	; 0xb4
    4770:	0052      	lsls	r2, r2, #1
    4772:	5a8b      	ldrh	r3, [r1, r2]
    4774:	0a9b      	lsrs	r3, r3, #10
    4776:	029b      	lsls	r3, r3, #10
    4778:	528b      	strh	r3, [r1, r2]
        elaps = lv_tick_elaps(start);
    477a:	9805      	ldr	r0, [sp, #20]
    477c:	4b51      	ldr	r3, [pc, #324]	; (48c4 <_lv_disp_refr_task+0x570>)
    477e:	4798      	blx	r3
    4780:	0001      	movs	r1, r0
        if(disp_refr->driver.monitor_cb) {
    4782:	6820      	ldr	r0, [r4, #0]
    4784:	6983      	ldr	r3, [r0, #24]
    4786:	2b00      	cmp	r3, #0
    4788:	d100      	bne.n	478c <_lv_disp_refr_task+0x438>
    478a:	e079      	b.n	4880 <_lv_disp_refr_task+0x52c>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
    478c:	4a4e      	ldr	r2, [pc, #312]	; (48c8 <_lv_disp_refr_task+0x574>)
    478e:	6812      	ldr	r2, [r2, #0]
    4790:	4798      	blx	r3
    4792:	e075      	b.n	4880 <_lv_disp_refr_task+0x52c>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    4794:	4b4d      	ldr	r3, [pc, #308]	; (48cc <_lv_disp_refr_task+0x578>)
    4796:	4798      	blx	r3
    4798:	0004      	movs	r4, r0
            lv_refr_vdb_flush();
    479a:	4b4d      	ldr	r3, [pc, #308]	; (48d0 <_lv_disp_refr_task+0x57c>)
    479c:	4798      	blx	r3
            while(vdb->flushing)
    479e:	69a3      	ldr	r3, [r4, #24]
    47a0:	2b00      	cmp	r3, #0
    47a2:	d1fc      	bne.n	479e <_lv_disp_refr_task+0x44a>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
    47a4:	68a3      	ldr	r3, [r4, #8]
    47a6:	469b      	mov	fp, r3
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    47a8:	6823      	ldr	r3, [r4, #0]
    47aa:	4699      	mov	r9, r3
    47ac:	459b      	cmp	fp, r3
    47ae:	d101      	bne.n	47b4 <_lv_disp_refr_task+0x460>
    47b0:	6863      	ldr	r3, [r4, #4]
    47b2:	4699      	mov	r9, r3
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    47b4:	4c40      	ldr	r4, [pc, #256]	; (48b8 <_lv_disp_refr_task+0x564>)
    47b6:	6820      	ldr	r0, [r4, #0]
    47b8:	4b46      	ldr	r3, [pc, #280]	; (48d4 <_lv_disp_refr_task+0x580>)
    47ba:	4798      	blx	r3
    47bc:	9000      	str	r0, [sp, #0]
            for(a = 0; a < disp_refr->inv_p; a++) {
    47be:	6823      	ldr	r3, [r4, #0]
    47c0:	22b4      	movs	r2, #180	; 0xb4
    47c2:	0052      	lsls	r2, r2, #1
    47c4:	5a9a      	ldrh	r2, [r3, r2]
    47c6:	0592      	lsls	r2, r2, #22
    47c8:	d0c4      	beq.n	4754 <_lv_disp_refr_task+0x400>
                        start_offs += hres * sizeof(lv_color_t);
    47ca:	0042      	lsls	r2, r0, #1
    47cc:	4692      	mov	sl, r2
    47ce:	2600      	movs	r6, #0
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    47d0:	0035      	movs	r5, r6
    47d2:	e00b      	b.n	47ec <_lv_disp_refr_task+0x498>
            for(a = 0; a < disp_refr->inv_p; a++) {
    47d4:	3601      	adds	r6, #1
    47d6:	b2b6      	uxth	r6, r6
    47d8:	0035      	movs	r5, r6
    47da:	4b37      	ldr	r3, [pc, #220]	; (48b8 <_lv_disp_refr_task+0x564>)
    47dc:	681b      	ldr	r3, [r3, #0]
    47de:	22b4      	movs	r2, #180	; 0xb4
    47e0:	0052      	lsls	r2, r2, #1
    47e2:	5a9a      	ldrh	r2, [r3, r2]
    47e4:	0592      	lsls	r2, r2, #22
    47e6:	0d92      	lsrs	r2, r2, #22
    47e8:	4296      	cmp	r6, r2
    47ea:	dab3      	bge.n	4754 <_lv_disp_refr_task+0x400>
                if(disp_refr->inv_area_joined[a] == 0) {
    47ec:	195a      	adds	r2, r3, r5
    47ee:	3249      	adds	r2, #73	; 0x49
    47f0:	32ff      	adds	r2, #255	; 0xff
    47f2:	7812      	ldrb	r2, [r2, #0]
    47f4:	2a00      	cmp	r2, #0
    47f6:	d1ed      	bne.n	47d4 <_lv_disp_refr_task+0x480>
    47f8:	00ea      	lsls	r2, r5, #3
    47fa:	189b      	adds	r3, r3, r2
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
    47fc:	224a      	movs	r2, #74	; 0x4a
    47fe:	5e9f      	ldrsh	r7, [r3, r2]
    4800:	2248      	movs	r2, #72	; 0x48
    4802:	5e9a      	ldrsh	r2, [r3, r2]
    4804:	9c00      	ldr	r4, [sp, #0]
    4806:	437c      	muls	r4, r7
    4808:	18a4      	adds	r4, r4, r2
                    uint32_t start_offs =
    480a:	0064      	lsls	r4, r4, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    480c:	214c      	movs	r1, #76	; 0x4c
    480e:	5a5b      	ldrh	r3, [r3, r1]
    4810:	3301      	adds	r3, #1
    4812:	1a9b      	subs	r3, r3, r2
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    4814:	b21b      	sxth	r3, r3
    4816:	005b      	lsls	r3, r3, #1
    4818:	9301      	str	r3, [sp, #4]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    481a:	002b      	movs	r3, r5
    481c:	3309      	adds	r3, #9
    481e:	00db      	lsls	r3, r3, #3
    4820:	4a25      	ldr	r2, [pc, #148]	; (48b8 <_lv_disp_refr_task+0x564>)
    4822:	6812      	ldr	r2, [r2, #0]
    4824:	9202      	str	r2, [sp, #8]
    4826:	4694      	mov	ip, r2
    4828:	4463      	add	r3, ip
    482a:	2206      	movs	r2, #6
    482c:	5e9b      	ldrsh	r3, [r3, r2]
    482e:	42bb      	cmp	r3, r7
    4830:	dbd0      	blt.n	47d4 <_lv_disp_refr_task+0x480>
    4832:	46a0      	mov	r8, r4
    4834:	44d8      	add	r8, fp
    4836:	444c      	add	r4, r9
    4838:	3509      	adds	r5, #9
    483a:	00ed      	lsls	r5, r5, #3
                        _lv_memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    483c:	9a01      	ldr	r2, [sp, #4]
    483e:	0021      	movs	r1, r4
    4840:	4640      	mov	r0, r8
    4842:	4b25      	ldr	r3, [pc, #148]	; (48d8 <_lv_disp_refr_task+0x584>)
    4844:	4798      	blx	r3
    4846:	3701      	adds	r7, #1
    4848:	b23f      	sxth	r7, r7
    484a:	44d0      	add	r8, sl
    484c:	4454      	add	r4, sl
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    484e:	4b1a      	ldr	r3, [pc, #104]	; (48b8 <_lv_disp_refr_task+0x564>)
    4850:	681b      	ldr	r3, [r3, #0]
    4852:	9302      	str	r3, [sp, #8]
    4854:	195b      	adds	r3, r3, r5
    4856:	2206      	movs	r2, #6
    4858:	5e9b      	ldrsh	r3, [r3, r2]
    485a:	42bb      	cmp	r3, r7
    485c:	daee      	bge.n	483c <_lv_disp_refr_task+0x4e8>
    485e:	e7b9      	b.n	47d4 <_lv_disp_refr_task+0x480>
    px_num = 0;
    4860:	2200      	movs	r2, #0
    4862:	4b19      	ldr	r3, [pc, #100]	; (48c8 <_lv_disp_refr_task+0x574>)
    4864:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
    4866:	23b4      	movs	r3, #180	; 0xb4
    4868:	005b      	lsls	r3, r3, #1
    486a:	5ac3      	ldrh	r3, [r0, r3]
    486c:	059b      	lsls	r3, r3, #22
    486e:	d112      	bne.n	4896 <_lv_disp_refr_task+0x542>
    if(disp_refr->inv_p != 0) {
    4870:	4b11      	ldr	r3, [pc, #68]	; (48b8 <_lv_disp_refr_task+0x564>)
    4872:	6818      	ldr	r0, [r3, #0]
    4874:	23b4      	movs	r3, #180	; 0xb4
    4876:	005b      	lsls	r3, r3, #1
    4878:	5ac3      	ldrh	r3, [r0, r3]
    487a:	059b      	lsls	r3, r3, #22
    487c:	d000      	beq.n	4880 <_lv_disp_refr_task+0x52c>
    487e:	e760      	b.n	4742 <_lv_disp_refr_task+0x3ee>
    _lv_mem_buf_free_all();
    4880:	4b16      	ldr	r3, [pc, #88]	; (48dc <_lv_disp_refr_task+0x588>)
    4882:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
    4884:	4b16      	ldr	r3, [pc, #88]	; (48e0 <_lv_disp_refr_task+0x58c>)
    4886:	4798      	blx	r3
}
    4888:	b009      	add	sp, #36	; 0x24
    488a:	bc3c      	pop	{r2, r3, r4, r5}
    488c:	4690      	mov	r8, r2
    488e:	4699      	mov	r9, r3
    4890:	46a2      	mov	sl, r4
    4892:	46ab      	mov	fp, r5
    4894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int32_t last_i = 0;
    4896:	2300      	movs	r3, #0
    4898:	9304      	str	r3, [sp, #16]
    489a:	e609      	b.n	44b0 <_lv_disp_refr_task+0x15c>
    px_num = 0;
    489c:	2200      	movs	r2, #0
    489e:	4b0a      	ldr	r3, [pc, #40]	; (48c8 <_lv_disp_refr_task+0x574>)
    48a0:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
    48a2:	23b4      	movs	r3, #180	; 0xb4
    48a4:	005b      	lsls	r3, r3, #1
    48a6:	5ac3      	ldrh	r3, [r0, r3]
    48a8:	059b      	lsls	r3, r3, #22
    48aa:	d0e9      	beq.n	4880 <_lv_disp_refr_task+0x52c>
    int32_t last_i = 0;
    48ac:	2300      	movs	r3, #0
    48ae:	9304      	str	r3, [sp, #16]
    48b0:	e5fe      	b.n	44b0 <_lv_disp_refr_task+0x15c>
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	00004191 	.word	0x00004191
    48b8:	200026e8 	.word	0x200026e8
    48bc:	0000f6bd 	.word	0x0000f6bd
    48c0:	00010fe5 	.word	0x00010fe5
    48c4:	0000f741 	.word	0x0000f741
    48c8:	200026ec 	.word	0x200026ec
    48cc:	0000f6a1 	.word	0x0000f6a1
    48d0:	00004111 	.word	0x00004111
    48d4:	0000f5ad 	.word	0x0000f5ad
    48d8:	00010c25 	.word	0x00010c25
    48dc:	00010bcd 	.word	0x00010bcd
    48e0:	0000f3d5 	.word	0x0000f3d5

000048e4 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
    48e4:	b510      	push	{r4, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
    48e6:	2104      	movs	r1, #4
    48e8:	4b01      	ldr	r3, [pc, #4]	; (48f0 <lv_style_init+0xc>)
    48ea:	4798      	blx	r3
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_DEBUG_STYLE_SENTINEL_VALUE;
#endif
}
    48ec:	bd10      	pop	{r4, pc}
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	00010fe5 	.word	0x00010fe5

000048f4 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
    48f4:	b510      	push	{r4, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
    48f6:	2108      	movs	r1, #8
    48f8:	4b01      	ldr	r3, [pc, #4]	; (4900 <lv_style_list_init+0xc>)
    48fa:	4798      	blx	r3
#if LV_USE_ASSERT_STYLE
    list->sentinel = LV_DEBUG_STYLE_LIST_SENTINEL_VALUE;
#endif
}
    48fc:	bd10      	pop	{r4, pc}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	00010fe5 	.word	0x00010fe5

00004904 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
    4904:	b570      	push	{r4, r5, r6, lr}
    4906:	0004      	movs	r4, r0
    4908:	000d      	movs	r5, r1
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
    490a:	7906      	ldrb	r6, [r0, #4]
    490c:	2e00      	cmp	r6, #0
    490e:	d045      	beq.n	499c <_lv_style_list_remove_style+0x98>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
        if(list->style_list[i] == style) {
    4910:	6800      	ldr	r0, [r0, #0]
    4912:	6803      	ldr	r3, [r0, #0]
    4914:	4299      	cmp	r1, r3
    4916:	d00c      	beq.n	4932 <_lv_style_list_remove_style+0x2e>
    4918:	1d03      	adds	r3, r0, #4
    491a:	1e72      	subs	r2, r6, #1
    491c:	b2d2      	uxtb	r2, r2
    491e:	3201      	adds	r2, #1
    4920:	0092      	lsls	r2, r2, #2
    4922:	1882      	adds	r2, r0, r2
    for(i = 0; i < list->style_cnt; i++) {
    4924:	429a      	cmp	r2, r3
    4926:	d039      	beq.n	499c <_lv_style_list_remove_style+0x98>
    4928:	3304      	adds	r3, #4
        if(list->style_list[i] == style) {
    492a:	1f19      	subs	r1, r3, #4
    492c:	6809      	ldr	r1, [r1, #0]
    492e:	42a9      	cmp	r1, r5
    4930:	d1f8      	bne.n	4924 <_lv_style_list_remove_style+0x20>
            break;
        }
    }
    if(found == false) return;

    if(list->style_cnt == 1) {
    4932:	2e01      	cmp	r6, #1
    4934:	d010      	beq.n	4958 <_lv_style_list_remove_style+0x54>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt - 1));
    4936:	1e71      	subs	r1, r6, #1
    4938:	0089      	lsls	r1, r1, #2
    493a:	4b19      	ldr	r3, [pc, #100]	; (49a0 <_lv_style_list_remove_style+0x9c>)
    493c:	4798      	blx	r3
    493e:	0006      	movs	r6, r0
    LV_ASSERT_MEM(new_classes);
    4940:	4b18      	ldr	r3, [pc, #96]	; (49a4 <_lv_style_list_remove_style+0xa0>)
    4942:	4798      	blx	r3
    4944:	2800      	cmp	r0, #0
    4946:	d011      	beq.n	496c <_lv_style_list_remove_style+0x68>
    if(new_classes == NULL) {
    4948:	2e00      	cmp	r6, #0
    494a:	d027      	beq.n	499c <_lv_style_list_remove_style+0x98>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    494c:	7922      	ldrb	r2, [r4, #4]
    494e:	2a00      	cmp	r2, #0
    4950:	d021      	beq.n	4996 <_lv_style_list_remove_style+0x92>
    4952:	2100      	movs	r1, #0
    4954:	2300      	movs	r3, #0
    4956:	e014      	b.n	4982 <_lv_style_list_remove_style+0x7e>
        lv_mem_free(list->style_list);
    4958:	4b13      	ldr	r3, [pc, #76]	; (49a8 <_lv_style_list_remove_style+0xa4>)
    495a:	4798      	blx	r3
        list->style_list = NULL;
    495c:	2300      	movs	r3, #0
    495e:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
    4960:	7123      	strb	r3, [r4, #4]
        list->has_local = 0;
    4962:	7963      	ldrb	r3, [r4, #5]
    4964:	2201      	movs	r2, #1
    4966:	4393      	bics	r3, r2
    4968:	7163      	strb	r3, [r4, #5]
        return;
    496a:	e017      	b.n	499c <_lv_style_list_remove_style+0x98>
    LV_ASSERT_MEM(new_classes);
    496c:	0032      	movs	r2, r6
    496e:	2300      	movs	r3, #0
    4970:	480e      	ldr	r0, [pc, #56]	; (49ac <_lv_style_list_remove_style+0xa8>)
    4972:	490f      	ldr	r1, [pc, #60]	; (49b0 <_lv_style_list_remove_style+0xac>)
    4974:	4788      	blx	r1
    4976:	e7fe      	b.n	4976 <_lv_style_list_remove_style+0x72>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    4978:	3301      	adds	r3, #1
    497a:	b2db      	uxtb	r3, r3
    497c:	7922      	ldrb	r2, [r4, #4]
    497e:	429a      	cmp	r2, r3
    4980:	d909      	bls.n	4996 <_lv_style_list_remove_style+0x92>
        if(list->style_list[i] == style) continue;
    4982:	009a      	lsls	r2, r3, #2
    4984:	6820      	ldr	r0, [r4, #0]
    4986:	5812      	ldr	r2, [r2, r0]
    4988:	4295      	cmp	r5, r2
    498a:	d0f5      	beq.n	4978 <_lv_style_list_remove_style+0x74>
        new_classes[j] = list->style_list[i];
    498c:	0088      	lsls	r0, r1, #2
    498e:	5182      	str	r2, [r0, r6]
        j++;
    4990:	3101      	adds	r1, #1
    4992:	b2c9      	uxtb	r1, r1
    4994:	e7f0      	b.n	4978 <_lv_style_list_remove_style+0x74>

    }

    list->style_cnt--;
    4996:	3a01      	subs	r2, #1
    4998:	7122      	strb	r2, [r4, #4]
    list->style_list = new_classes;
    499a:	6026      	str	r6, [r4, #0]
}
    499c:	bd70      	pop	{r4, r5, r6, pc}
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	00010ddd 	.word	0x00010ddd
    49a4:	00001415 	.word	0x00001415
    49a8:	00010ad1 	.word	0x00010ad1
    49ac:	00018804 	.word	0x00018804
    49b0:	0000141d 	.word	0x0000141d

000049b4 <_lv_style_list_add_style>:
{
    49b4:	b570      	push	{r4, r5, r6, lr}
    49b6:	0005      	movs	r5, r0
    49b8:	000c      	movs	r4, r1
    if(list == NULL) return;
    49ba:	2800      	cmp	r0, #0
    49bc:	d030      	beq.n	4a20 <_lv_style_list_add_style+0x6c>
    _lv_style_list_remove_style(list, style);
    49be:	4b1f      	ldr	r3, [pc, #124]	; (4a3c <_lv_style_list_add_style+0x88>)
    49c0:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
    49c2:	792b      	ldrb	r3, [r5, #4]
    49c4:	2b00      	cmp	r3, #0
    49c6:	d12c      	bne.n	4a22 <_lv_style_list_add_style+0x6e>
    49c8:	2004      	movs	r0, #4
    49ca:	4b1d      	ldr	r3, [pc, #116]	; (4a40 <_lv_style_list_add_style+0x8c>)
    49cc:	4798      	blx	r3
    49ce:	0006      	movs	r6, r0
    LV_ASSERT_MEM(new_classes);
    49d0:	0030      	movs	r0, r6
    49d2:	4b1c      	ldr	r3, [pc, #112]	; (4a44 <_lv_style_list_add_style+0x90>)
    49d4:	4798      	blx	r3
    49d6:	2800      	cmp	r0, #0
    49d8:	d02a      	beq.n	4a30 <_lv_style_list_add_style+0x7c>
    if(new_classes == NULL) {
    49da:	2e00      	cmp	r6, #0
    49dc:	d020      	beq.n	4a20 <_lv_style_list_add_style+0x6c>
    if(list->has_trans) first_style++;
    49de:	796b      	ldrb	r3, [r5, #5]
    49e0:	0859      	lsrs	r1, r3, #1
    49e2:	2201      	movs	r2, #1
    uint8_t first_style = 0;
    49e4:	4011      	ands	r1, r2
    if(list->has_local) first_style++;
    49e6:	421a      	tst	r2, r3
    49e8:	d000      	beq.n	49ec <_lv_style_list_add_style+0x38>
    49ea:	3101      	adds	r1, #1
    for(i = list->style_cnt; i > first_style; i--) {
    49ec:	792a      	ldrb	r2, [r5, #4]
    49ee:	4291      	cmp	r1, r2
    49f0:	d210      	bcs.n	4a14 <_lv_style_list_add_style+0x60>
    49f2:	4b15      	ldr	r3, [pc, #84]	; (4a48 <_lv_style_list_add_style+0x94>)
    49f4:	18d3      	adds	r3, r2, r3
    49f6:	009b      	lsls	r3, r3, #2
    49f8:	18f3      	adds	r3, r6, r3
    49fa:	4814      	ldr	r0, [pc, #80]	; (4a4c <_lv_style_list_add_style+0x98>)
    49fc:	1810      	adds	r0, r2, r0
    49fe:	3a01      	subs	r2, #1
    4a00:	1a52      	subs	r2, r2, r1
    4a02:	b2d2      	uxtb	r2, r2
    4a04:	1a82      	subs	r2, r0, r2
    4a06:	0092      	lsls	r2, r2, #2
    4a08:	18b2      	adds	r2, r6, r2
        new_classes[i] = new_classes[i - 1];
    4a0a:	6818      	ldr	r0, [r3, #0]
    4a0c:	6058      	str	r0, [r3, #4]
    4a0e:	3b04      	subs	r3, #4
    for(i = list->style_cnt; i > first_style; i--) {
    4a10:	4293      	cmp	r3, r2
    4a12:	d1fa      	bne.n	4a0a <_lv_style_list_add_style+0x56>
    new_classes[first_style] = style;
    4a14:	0089      	lsls	r1, r1, #2
    4a16:	518c      	str	r4, [r1, r6]
    list->style_cnt++;
    4a18:	792b      	ldrb	r3, [r5, #4]
    4a1a:	3301      	adds	r3, #1
    4a1c:	712b      	strb	r3, [r5, #4]
    list->style_list = new_classes;
    4a1e:	602e      	str	r6, [r5, #0]
}
    4a20:	bd70      	pop	{r4, r5, r6, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
    4a22:	3301      	adds	r3, #1
    4a24:	0099      	lsls	r1, r3, #2
    4a26:	6828      	ldr	r0, [r5, #0]
    4a28:	4b09      	ldr	r3, [pc, #36]	; (4a50 <_lv_style_list_add_style+0x9c>)
    4a2a:	4798      	blx	r3
    4a2c:	0006      	movs	r6, r0
    4a2e:	e7cf      	b.n	49d0 <_lv_style_list_add_style+0x1c>
    LV_ASSERT_MEM(new_classes);
    4a30:	0032      	movs	r2, r6
    4a32:	2300      	movs	r3, #0
    4a34:	4807      	ldr	r0, [pc, #28]	; (4a54 <_lv_style_list_add_style+0xa0>)
    4a36:	4908      	ldr	r1, [pc, #32]	; (4a58 <_lv_style_list_add_style+0xa4>)
    4a38:	4788      	blx	r1
    4a3a:	e7fe      	b.n	4a3a <_lv_style_list_add_style+0x86>
    4a3c:	00004905 	.word	0x00004905
    4a40:	00010a09 	.word	0x00010a09
    4a44:	00001415 	.word	0x00001415
    4a48:	3fffffff 	.word	0x3fffffff
    4a4c:	3ffffffe 	.word	0x3ffffffe
    4a50:	00010ddd 	.word	0x00010ddd
    4a54:	00018804 	.word	0x00018804
    4a58:	0000141d 	.word	0x0000141d

00004a5c <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
    4a5c:	b570      	push	{r4, r5, r6, lr}
    4a5e:	0005      	movs	r5, r0
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, 0);
    4a60:	7942      	ldrb	r2, [r0, #5]
    4a62:	07d3      	lsls	r3, r2, #31
    4a64:	d50f      	bpl.n	4a86 <get_alloc_local_style+0x2a>
    4a66:	2306      	movs	r3, #6
    4a68:	4013      	ands	r3, r2
    4a6a:	3b06      	subs	r3, #6
    4a6c:	425a      	negs	r2, r3
    4a6e:	4153      	adcs	r3, r2
    4a70:	b2db      	uxtb	r3, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    4a72:	7902      	ldrb	r2, [r0, #4]
    4a74:	2a00      	cmp	r2, #0
    4a76:	d022      	beq.n	4abe <get_alloc_local_style+0x62>
    4a78:	429a      	cmp	r2, r3
    4a7a:	d922      	bls.n	4ac2 <get_alloc_local_style+0x66>
    return list->style_list[id];
    4a7c:	6802      	ldr	r2, [r0, #0]
    4a7e:	009b      	lsls	r3, r3, #2
    4a80:	589c      	ldr	r4, [r3, r2]
    /*Add the local style to the furst place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
    4a82:	0020      	movs	r0, r4
    4a84:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
    4a86:	2004      	movs	r0, #4
    4a88:	4b0f      	ldr	r3, [pc, #60]	; (4ac8 <get_alloc_local_style+0x6c>)
    4a8a:	4798      	blx	r3
    4a8c:	0004      	movs	r4, r0
    LV_ASSERT_MEM(local_style);
    4a8e:	4b0f      	ldr	r3, [pc, #60]	; (4acc <get_alloc_local_style+0x70>)
    4a90:	4798      	blx	r3
    4a92:	2800      	cmp	r0, #0
    4a94:	d00d      	beq.n	4ab2 <get_alloc_local_style+0x56>
    if(local_style == NULL) {
    4a96:	2c00      	cmp	r4, #0
    4a98:	d0f3      	beq.n	4a82 <get_alloc_local_style+0x26>
    lv_style_init(local_style);
    4a9a:	0020      	movs	r0, r4
    4a9c:	4b0c      	ldr	r3, [pc, #48]	; (4ad0 <get_alloc_local_style+0x74>)
    4a9e:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
    4aa0:	0021      	movs	r1, r4
    4aa2:	0028      	movs	r0, r5
    4aa4:	4b0b      	ldr	r3, [pc, #44]	; (4ad4 <get_alloc_local_style+0x78>)
    4aa6:	4798      	blx	r3
    list->has_local = 1;
    4aa8:	796b      	ldrb	r3, [r5, #5]
    4aaa:	2201      	movs	r2, #1
    4aac:	4313      	orrs	r3, r2
    4aae:	716b      	strb	r3, [r5, #5]
    return local_style;
    4ab0:	e7e7      	b.n	4a82 <get_alloc_local_style+0x26>
    LV_ASSERT_MEM(local_style);
    4ab2:	0022      	movs	r2, r4
    4ab4:	2300      	movs	r3, #0
    4ab6:	4808      	ldr	r0, [pc, #32]	; (4ad8 <get_alloc_local_style+0x7c>)
    4ab8:	4908      	ldr	r1, [pc, #32]	; (4adc <get_alloc_local_style+0x80>)
    4aba:	4788      	blx	r1
    4abc:	e7fe      	b.n	4abc <get_alloc_local_style+0x60>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    4abe:	2400      	movs	r4, #0
    4ac0:	e7df      	b.n	4a82 <get_alloc_local_style+0x26>
    4ac2:	2400      	movs	r4, #0
    4ac4:	e7dd      	b.n	4a82 <get_alloc_local_style+0x26>
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	00010a09 	.word	0x00010a09
    4acc:	00001415 	.word	0x00001415
    4ad0:	000048e5 	.word	0x000048e5
    4ad4:	000049b5 	.word	0x000049b5
    4ad8:	00018804 	.word	0x00018804
    4adc:	0000141d 	.word	0x0000141d

00004ae0 <lv_style_reset>:
{
    4ae0:	b510      	push	{r4, lr}
    4ae2:	0004      	movs	r4, r0
    lv_mem_free(style->map);
    4ae4:	6800      	ldr	r0, [r0, #0]
    4ae6:	4b02      	ldr	r3, [pc, #8]	; (4af0 <lv_style_reset+0x10>)
    4ae8:	4798      	blx	r3
    style->map = NULL;
    4aea:	2300      	movs	r3, #0
    4aec:	6023      	str	r3, [r4, #0]
}
    4aee:	bd10      	pop	{r4, pc}
    4af0:	00010ad1 	.word	0x00010ad1

00004af4 <_lv_style_get_mem_size>:
{
    4af4:	b510      	push	{r4, lr}
    if(style->map == NULL) return 0;
    4af6:	6801      	ldr	r1, [r0, #0]
    4af8:	2900      	cmp	r1, #0
    4afa:	d019      	beq.n	4b30 <_lv_style_get_mem_size+0x3c>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4afc:	780b      	ldrb	r3, [r1, #0]
    4afe:	2bff      	cmp	r3, #255	; 0xff
    4b00:	d012      	beq.n	4b28 <_lv_style_get_mem_size+0x34>
    4b02:	2000      	movs	r0, #0
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4b04:	240f      	movs	r4, #15
    4b06:	e003      	b.n	4b10 <_lv_style_get_mem_size+0x1c>
        i += sizeof(lv_style_property_t);
    4b08:	1c90      	adds	r0, r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4b0a:	5c0b      	ldrb	r3, [r1, r0]
    4b0c:	2bff      	cmp	r3, #255	; 0xff
    4b0e:	d00c      	beq.n	4b2a <_lv_style_get_mem_size+0x36>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4b10:	4023      	ands	r3, r4
    4b12:	1c82      	adds	r2, r0, #2
    4b14:	2b08      	cmp	r3, #8
    4b16:	ddf7      	ble.n	4b08 <_lv_style_get_mem_size+0x14>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    4b18:	1c82      	adds	r2, r0, #2
    4b1a:	2b0b      	cmp	r3, #11
    4b1c:	ddf4      	ble.n	4b08 <_lv_style_get_mem_size+0x14>
        else i += sizeof(const void *);
    4b1e:	1d02      	adds	r2, r0, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    4b20:	2b0d      	cmp	r3, #13
    4b22:	dcf1      	bgt.n	4b08 <_lv_style_get_mem_size+0x14>
    4b24:	1c42      	adds	r2, r0, #1
    4b26:	e7ef      	b.n	4b08 <_lv_style_get_mem_size+0x14>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4b28:	2000      	movs	r0, #0
    return i + sizeof(lv_style_property_t);
    4b2a:	3002      	adds	r0, #2
    4b2c:	b280      	uxth	r0, r0
}
    4b2e:	bd10      	pop	{r4, pc}
    if(style->map == NULL) return 0;
    4b30:	2000      	movs	r0, #0
    4b32:	e7fc      	b.n	4b2e <_lv_style_get_mem_size+0x3a>

00004b34 <lv_style_copy>:
{
    4b34:	b570      	push	{r4, r5, r6, lr}
    4b36:	0006      	movs	r6, r0
    4b38:	1e0c      	subs	r4, r1, #0
    if(style_src == NULL) return;
    4b3a:	d00d      	beq.n	4b58 <lv_style_copy+0x24>
    if(style_src->map == NULL) return;
    4b3c:	680b      	ldr	r3, [r1, #0]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d00a      	beq.n	4b58 <lv_style_copy+0x24>
    uint16_t size = _lv_style_get_mem_size(style_src);
    4b42:	0008      	movs	r0, r1
    4b44:	4b05      	ldr	r3, [pc, #20]	; (4b5c <lv_style_copy+0x28>)
    4b46:	4798      	blx	r3
    4b48:	0005      	movs	r5, r0
    style_dest->map = lv_mem_alloc(size);
    4b4a:	4b05      	ldr	r3, [pc, #20]	; (4b60 <lv_style_copy+0x2c>)
    4b4c:	4798      	blx	r3
    4b4e:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
    4b50:	6821      	ldr	r1, [r4, #0]
    4b52:	002a      	movs	r2, r5
    4b54:	4b03      	ldr	r3, [pc, #12]	; (4b64 <lv_style_copy+0x30>)
    4b56:	4798      	blx	r3
}
    4b58:	bd70      	pop	{r4, r5, r6, pc}
    4b5a:	46c0      	nop			; (mov r8, r8)
    4b5c:	00004af5 	.word	0x00004af5
    4b60:	00010a09 	.word	0x00010a09
    4b64:	00010c25 	.word	0x00010c25

00004b68 <lv_style_remove_prop>:
{
    4b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b6a:	46de      	mov	lr, fp
    4b6c:	4657      	mov	r7, sl
    4b6e:	464e      	mov	r6, r9
    4b70:	4645      	mov	r5, r8
    4b72:	b5e0      	push	{r5, r6, r7, lr}
    4b74:	b085      	sub	sp, #20
    4b76:	1e06      	subs	r6, r0, #0
    4b78:	9103      	str	r1, [sp, #12]
    if(style == NULL) return false;
    4b7a:	d100      	bne.n	4b7e <lv_style_remove_prop+0x16>
    4b7c:	e07b      	b.n	4c76 <lv_style_remove_prop+0x10e>
    if(style->map == NULL) return -1;
    4b7e:	6800      	ldr	r0, [r0, #0]
    4b80:	2800      	cmp	r0, #0
    4b82:	d100      	bne.n	4b86 <lv_style_remove_prop+0x1e>
    4b84:	e07b      	b.n	4c7e <lv_style_remove_prop+0x116>
    uint8_t id_to_find = prop & 0xFF;
    4b86:	b2cc      	uxtb	r4, r1
    attr.full = (prop >> 8) & 0xFF;
    4b88:	0a0b      	lsrs	r3, r1, #8
    4b8a:	4698      	mov	r8, r3
    4b8c:	1c19      	adds	r1, r3, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4b8e:	7803      	ldrb	r3, [r0, #0]
    4b90:	2bff      	cmp	r3, #255	; 0xff
    4b92:	d04e      	beq.n	4c32 <lv_style_remove_prop+0xca>
    4b94:	2201      	movs	r2, #1
    4b96:	4252      	negs	r2, r2
    4b98:	9202      	str	r2, [sp, #8]
    4b9a:	4693      	mov	fp, r2
    4b9c:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    4b9e:	257f      	movs	r5, #127	; 0x7f
    4ba0:	46aa      	mov	sl, r5
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4ba2:	0649      	lsls	r1, r1, #25
    4ba4:	0e49      	lsrs	r1, r1, #25
    4ba6:	468c      	mov	ip, r1
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4ba8:	3d70      	subs	r5, #112	; 0x70
    4baa:	46c1      	mov	r9, r8
    4bac:	46b0      	mov	r8, r6
    4bae:	e01c      	b.n	4bea <lv_style_remove_prop+0x82>
            attr_i.full = style->map[i + 1];
    4bb0:	1881      	adds	r1, r0, r2
    4bb2:	7849      	ldrb	r1, [r1, #1]
            if(attr_i.bits.state == attr.bits.state) {
    4bb4:	464f      	mov	r7, r9
    4bb6:	404f      	eors	r7, r1
    4bb8:	4656      	mov	r6, sl
    4bba:	423e      	tst	r6, r7
    4bbc:	d00d      	beq.n	4bda <lv_style_remove_prop+0x72>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4bbe:	0649      	lsls	r1, r1, #25
    4bc0:	0e49      	lsrs	r1, r1, #25
    4bc2:	9101      	str	r1, [sp, #4]
    4bc4:	000f      	movs	r7, r1
    4bc6:	4666      	mov	r6, ip
    4bc8:	43b7      	bics	r7, r6
    4bca:	d110      	bne.n	4bee <lv_style_remove_prop+0x86>
                if(attr_i.bits.state > weight) {
    4bcc:	4559      	cmp	r1, fp
    4bce:	dd0e      	ble.n	4bee <lv_style_remove_prop+0x86>
                    weight = attr_i.bits.state;
    4bd0:	b209      	sxth	r1, r1
    4bd2:	468b      	mov	fp, r1
                    id_guess = i;
    4bd4:	b211      	sxth	r1, r2
    4bd6:	9102      	str	r1, [sp, #8]
    4bd8:	e009      	b.n	4bee <lv_style_remove_prop+0x86>
    4bda:	4643      	mov	r3, r8
    4bdc:	46c8      	mov	r8, r9
    4bde:	001e      	movs	r6, r3
    4be0:	e015      	b.n	4c0e <lv_style_remove_prop+0xa6>
        i += sizeof(lv_style_property_t);
    4be2:	1c8a      	adds	r2, r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4be4:	5c83      	ldrb	r3, [r0, r2]
    4be6:	2bff      	cmp	r3, #255	; 0xff
    4be8:	d00d      	beq.n	4c06 <lv_style_remove_prop+0x9e>
        if(style->map[i] == id_to_find) {
    4bea:	429c      	cmp	r4, r3
    4bec:	d0e0      	beq.n	4bb0 <lv_style_remove_prop+0x48>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4bee:	402b      	ands	r3, r5
    4bf0:	1c91      	adds	r1, r2, #2
    4bf2:	2b08      	cmp	r3, #8
    4bf4:	ddf5      	ble.n	4be2 <lv_style_remove_prop+0x7a>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    4bf6:	1c91      	adds	r1, r2, #2
    4bf8:	2b0b      	cmp	r3, #11
    4bfa:	ddf2      	ble.n	4be2 <lv_style_remove_prop+0x7a>
        else i += sizeof(const void *);
    4bfc:	1d11      	adds	r1, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    4bfe:	2b0d      	cmp	r3, #13
    4c00:	dcef      	bgt.n	4be2 <lv_style_remove_prop+0x7a>
    4c02:	1c51      	adds	r1, r2, #1
    4c04:	e7ed      	b.n	4be2 <lv_style_remove_prop+0x7a>
    4c06:	4643      	mov	r3, r8
    4c08:	46c8      	mov	r8, r9
    4c0a:	001e      	movs	r6, r3
    return id_guess;
    4c0c:	9a02      	ldr	r2, [sp, #8]
    if(id >= 0) {
    4c0e:	2a00      	cmp	r2, #0
    4c10:	db33      	blt.n	4c7a <lv_style_remove_prop+0x112>
        attr_found.full = *(style->map + id + 1);
    4c12:	0014      	movs	r4, r2
    4c14:	1880      	adds	r0, r0, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    4c16:	7843      	ldrb	r3, [r0, #1]
    4c18:	4642      	mov	r2, r8
    4c1a:	405a      	eors	r2, r3
    4c1c:	0013      	movs	r3, r2
    return false;
    4c1e:	2000      	movs	r0, #0
        if(attr_found.bits.state == attr_goal.bits.state) {
    4c20:	065b      	lsls	r3, r3, #25
    4c22:	d00a      	beq.n	4c3a <lv_style_remove_prop+0xd2>
}
    4c24:	b005      	add	sp, #20
    4c26:	bc3c      	pop	{r2, r3, r4, r5}
    4c28:	4690      	mov	r8, r2
    4c2a:	4699      	mov	r9, r3
    4c2c:	46a2      	mov	sl, r4
    4c2e:	46ab      	mov	fp, r5
    4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    4c32:	2301      	movs	r3, #1
    4c34:	425b      	negs	r3, r3
    4c36:	9302      	str	r3, [sp, #8]
    4c38:	e7e8      	b.n	4c0c <lv_style_remove_prop+0xa4>
            uint32_t map_size = _lv_style_get_mem_size(style);
    4c3a:	0030      	movs	r0, r6
    4c3c:	4b11      	ldr	r3, [pc, #68]	; (4c84 <lv_style_remove_prop+0x11c>)
    4c3e:	4798      	blx	r3
            if((prop & 0xF) < LV_STYLE_ID_COLOR) prop_size += sizeof(lv_style_int_t);
    4c40:	230f      	movs	r3, #15
    4c42:	9a03      	ldr	r2, [sp, #12]
    4c44:	4013      	ands	r3, r2
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    4c46:	2104      	movs	r1, #4
    4c48:	2b0b      	cmp	r3, #11
    4c4a:	dd03      	ble.n	4c54 <lv_style_remove_prop+0xec>
            else if((prop & 0xF) < LV_STYLE_ID_PTR) prop_size += sizeof(lv_opa_t);
    4c4c:	3901      	subs	r1, #1
    4c4e:	2b0d      	cmp	r3, #13
    4c50:	dd00      	ble.n	4c54 <lv_style_remove_prop+0xec>
            else prop_size += sizeof(const void *);
    4c52:	3103      	adds	r1, #3
            for(i = id; i < map_size - prop_size; i++) {
    4c54:	000d      	movs	r5, r1
    4c56:	1a41      	subs	r1, r0, r1
    4c58:	428c      	cmp	r4, r1
    4c5a:	d206      	bcs.n	4c6a <lv_style_remove_prop+0x102>
                style->map[i] = style->map[i + prop_size];
    4c5c:	6833      	ldr	r3, [r6, #0]
    4c5e:	195a      	adds	r2, r3, r5
    4c60:	5d12      	ldrb	r2, [r2, r4]
    4c62:	551a      	strb	r2, [r3, r4]
            for(i = id; i < map_size - prop_size; i++) {
    4c64:	3401      	adds	r4, #1
    4c66:	428c      	cmp	r4, r1
    4c68:	d1f8      	bne.n	4c5c <lv_style_remove_prop+0xf4>
            style->map = lv_mem_realloc(style->map, map_size - prop_size);
    4c6a:	6830      	ldr	r0, [r6, #0]
    4c6c:	4b06      	ldr	r3, [pc, #24]	; (4c88 <lv_style_remove_prop+0x120>)
    4c6e:	4798      	blx	r3
    4c70:	6030      	str	r0, [r6, #0]
            return true;
    4c72:	2001      	movs	r0, #1
    4c74:	e7d6      	b.n	4c24 <lv_style_remove_prop+0xbc>
    if(style == NULL) return false;
    4c76:	2000      	movs	r0, #0
    4c78:	e7d4      	b.n	4c24 <lv_style_remove_prop+0xbc>
    return false;
    4c7a:	2000      	movs	r0, #0
    4c7c:	e7d2      	b.n	4c24 <lv_style_remove_prop+0xbc>
    4c7e:	2000      	movs	r0, #0
    4c80:	e7d0      	b.n	4c24 <lv_style_remove_prop+0xbc>
    4c82:	46c0      	nop			; (mov r8, r8)
    4c84:	00004af5 	.word	0x00004af5
    4c88:	00010ddd 	.word	0x00010ddd

00004c8c <_lv_style_set_int>:
{
    4c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c8e:	46de      	mov	lr, fp
    4c90:	4657      	mov	r7, sl
    4c92:	464e      	mov	r6, r9
    4c94:	4645      	mov	r5, r8
    4c96:	b5e0      	push	{r5, r6, r7, lr}
    4c98:	b087      	sub	sp, #28
    4c9a:	0006      	movs	r6, r0
    4c9c:	ab02      	add	r3, sp, #8
    4c9e:	80d9      	strh	r1, [r3, #6]
    4ca0:	ab03      	add	r3, sp, #12
    4ca2:	801a      	strh	r2, [r3, #0]
    if(style->map == NULL) return -1;
    4ca4:	6804      	ldr	r4, [r0, #0]
    4ca6:	2c00      	cmp	r4, #0
    4ca8:	d058      	beq.n	4d5c <_lv_style_set_int+0xd0>
    uint8_t id_to_find = prop & 0xFF;
    4caa:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    4cac:	0a0b      	lsrs	r3, r1, #8
    4cae:	469a      	mov	sl, r3
    4cb0:	1c19      	adds	r1, r3, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4cb2:	7823      	ldrb	r3, [r4, #0]
    4cb4:	2bff      	cmp	r3, #255	; 0xff
    4cb6:	d04d      	beq.n	4d54 <_lv_style_set_int+0xc8>
    4cb8:	2201      	movs	r2, #1
    4cba:	4252      	negs	r2, r2
    4cbc:	4690      	mov	r8, r2
    4cbe:	4694      	mov	ip, r2
    4cc0:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    4cc2:	207f      	movs	r0, #127	; 0x7f
    4cc4:	4683      	mov	fp, r0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4cc6:	0649      	lsls	r1, r1, #25
    4cc8:	0e49      	lsrs	r1, r1, #25
    4cca:	4689      	mov	r9, r1
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4ccc:	3870      	subs	r0, #112	; 0x70
    4cce:	9602      	str	r6, [sp, #8]
    4cd0:	e01a      	b.n	4d08 <_lv_style_set_int+0x7c>
            attr_i.full = style->map[i + 1];
    4cd2:	18a1      	adds	r1, r4, r2
    4cd4:	7849      	ldrb	r1, [r1, #1]
            if(attr_i.bits.state == attr.bits.state) {
    4cd6:	4656      	mov	r6, sl
    4cd8:	404e      	eors	r6, r1
    4cda:	465f      	mov	r7, fp
    4cdc:	4237      	tst	r7, r6
    4cde:	d00d      	beq.n	4cfc <_lv_style_set_int+0x70>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4ce0:	0649      	lsls	r1, r1, #25
    4ce2:	0e49      	lsrs	r1, r1, #25
    4ce4:	9101      	str	r1, [sp, #4]
    4ce6:	000e      	movs	r6, r1
    4ce8:	464f      	mov	r7, r9
    4cea:	43be      	bics	r6, r7
    4cec:	d10e      	bne.n	4d0c <_lv_style_set_int+0x80>
                if(attr_i.bits.state > weight) {
    4cee:	4561      	cmp	r1, ip
    4cf0:	dd0c      	ble.n	4d0c <_lv_style_set_int+0x80>
                    weight = attr_i.bits.state;
    4cf2:	b209      	sxth	r1, r1
    4cf4:	468c      	mov	ip, r1
                    id_guess = i;
    4cf6:	b211      	sxth	r1, r2
    4cf8:	4688      	mov	r8, r1
    4cfa:	e007      	b.n	4d0c <_lv_style_set_int+0x80>
    4cfc:	9e02      	ldr	r6, [sp, #8]
    4cfe:	e013      	b.n	4d28 <_lv_style_set_int+0x9c>
        i += sizeof(lv_style_property_t);
    4d00:	1c8a      	adds	r2, r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4d02:	5ca3      	ldrb	r3, [r4, r2]
    4d04:	2bff      	cmp	r3, #255	; 0xff
    4d06:	d00d      	beq.n	4d24 <_lv_style_set_int+0x98>
        if(style->map[i] == id_to_find) {
    4d08:	429d      	cmp	r5, r3
    4d0a:	d0e2      	beq.n	4cd2 <_lv_style_set_int+0x46>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4d0c:	4003      	ands	r3, r0
    4d0e:	1c91      	adds	r1, r2, #2
    4d10:	2b08      	cmp	r3, #8
    4d12:	ddf5      	ble.n	4d00 <_lv_style_set_int+0x74>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    4d14:	1c91      	adds	r1, r2, #2
    4d16:	2b0b      	cmp	r3, #11
    4d18:	ddf2      	ble.n	4d00 <_lv_style_set_int+0x74>
        else i += sizeof(const void *);
    4d1a:	1d11      	adds	r1, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    4d1c:	2b0d      	cmp	r3, #13
    4d1e:	dcef      	bgt.n	4d00 <_lv_style_set_int+0x74>
    4d20:	1c51      	adds	r1, r2, #1
    4d22:	e7ed      	b.n	4d00 <_lv_style_set_int+0x74>
    4d24:	9e02      	ldr	r6, [sp, #8]
    return id_guess;
    4d26:	4642      	mov	r2, r8
    if(id >= 0) {
    4d28:	2a00      	cmp	r2, #0
    4d2a:	db17      	blt.n	4d5c <_lv_style_set_int+0xd0>
        attr_found.full = *(style->map + id + 1);
    4d2c:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    4d2e:	785b      	ldrb	r3, [r3, #1]
    4d30:	4655      	mov	r5, sl
    4d32:	405d      	eors	r5, r3
    4d34:	066b      	lsls	r3, r5, #25
    4d36:	d111      	bne.n	4d5c <_lv_style_set_int+0xd0>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
    4d38:	3202      	adds	r2, #2
    4d3a:	18a4      	adds	r4, r4, r2
        *d8 = *s8;
    4d3c:	ab03      	add	r3, sp, #12
    4d3e:	781a      	ldrb	r2, [r3, #0]
    4d40:	7022      	strb	r2, [r4, #0]
    4d42:	785b      	ldrb	r3, [r3, #1]
    4d44:	7063      	strb	r3, [r4, #1]
}
    4d46:	b007      	add	sp, #28
    4d48:	bc3c      	pop	{r2, r3, r4, r5}
    4d4a:	4690      	mov	r8, r2
    4d4c:	4699      	mov	r9, r3
    4d4e:	46a2      	mov	sl, r4
    4d50:	46ab      	mov	fp, r5
    4d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    4d54:	2301      	movs	r3, #1
    4d56:	425b      	negs	r3, r3
    4d58:	4698      	mov	r8, r3
    4d5a:	e7e4      	b.n	4d26 <_lv_style_set_int+0x9a>
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    4d5c:	22ff      	movs	r2, #255	; 0xff
    4d5e:	230e      	movs	r3, #14
    4d60:	a902      	add	r1, sp, #8
    4d62:	468c      	mov	ip, r1
    4d64:	4463      	add	r3, ip
    4d66:	801a      	strh	r2, [r3, #0]
    uint16_t size = _lv_style_get_mem_size(style);
    4d68:	0030      	movs	r0, r6
    4d6a:	4b1b      	ldr	r3, [pc, #108]	; (4dd8 <_lv_style_set_int+0x14c>)
    4d6c:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    4d6e:	2800      	cmp	r0, #0
    4d70:	d100      	bne.n	4d74 <_lv_style_set_int+0xe8>
    4d72:	3002      	adds	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
    4d74:	3004      	adds	r0, #4
    style->map = lv_mem_realloc(style->map, size);
    4d76:	b285      	uxth	r5, r0
    4d78:	0029      	movs	r1, r5
    4d7a:	0020      	movs	r0, r4
    4d7c:	4b17      	ldr	r3, [pc, #92]	; (4ddc <_lv_style_set_int+0x150>)
    4d7e:	4798      	blx	r3
    4d80:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    4d82:	4b17      	ldr	r3, [pc, #92]	; (4de0 <_lv_style_set_int+0x154>)
    4d84:	4798      	blx	r3
    4d86:	2800      	cmp	r0, #0
    4d88:	d020      	beq.n	4dcc <_lv_style_set_int+0x140>
    if(style == NULL) return;
    4d8a:	2e00      	cmp	r6, #0
    4d8c:	d0db      	beq.n	4d46 <_lv_style_set_int+0xba>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    4d8e:	1fab      	subs	r3, r5, #6
    4d90:	6832      	ldr	r2, [r6, #0]
    4d92:	4694      	mov	ip, r2
    4d94:	4463      	add	r3, ip
    4d96:	aa02      	add	r2, sp, #8
    4d98:	7991      	ldrb	r1, [r2, #6]
    4d9a:	3206      	adds	r2, #6
    4d9c:	7019      	strb	r1, [r3, #0]
    4d9e:	7852      	ldrb	r2, [r2, #1]
    4da0:	705a      	strb	r2, [r3, #1]
    4da2:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
    4da4:	6832      	ldr	r2, [r6, #0]
    4da6:	4694      	mov	ip, r2
    4da8:	4463      	add	r3, ip
    4daa:	aa03      	add	r2, sp, #12
    4dac:	7811      	ldrb	r1, [r2, #0]
    4dae:	7019      	strb	r1, [r3, #0]
    4db0:	7852      	ldrb	r2, [r2, #1]
    4db2:	705a      	strb	r2, [r3, #1]
    4db4:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    4db6:	6833      	ldr	r3, [r6, #0]
    4db8:	195d      	adds	r5, r3, r5
    4dba:	230e      	movs	r3, #14
    4dbc:	aa02      	add	r2, sp, #8
    4dbe:	4694      	mov	ip, r2
    4dc0:	4463      	add	r3, ip
    4dc2:	781a      	ldrb	r2, [r3, #0]
    4dc4:	702a      	strb	r2, [r5, #0]
    4dc6:	785b      	ldrb	r3, [r3, #1]
    4dc8:	706b      	strb	r3, [r5, #1]
    4dca:	e7bc      	b.n	4d46 <_lv_style_set_int+0xba>
    LV_ASSERT_MEM(style->map);
    4dcc:	6832      	ldr	r2, [r6, #0]
    4dce:	2300      	movs	r3, #0
    4dd0:	4804      	ldr	r0, [pc, #16]	; (4de4 <_lv_style_set_int+0x158>)
    4dd2:	4905      	ldr	r1, [pc, #20]	; (4de8 <_lv_style_set_int+0x15c>)
    4dd4:	4788      	blx	r1
    4dd6:	e7fe      	b.n	4dd6 <_lv_style_set_int+0x14a>
    4dd8:	00004af5 	.word	0x00004af5
    4ddc:	00010ddd 	.word	0x00010ddd
    4de0:	00001415 	.word	0x00001415
    4de4:	00018804 	.word	0x00018804
    4de8:	0000141d 	.word	0x0000141d

00004dec <_lv_style_set_color>:
{
    4dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dee:	46de      	mov	lr, fp
    4df0:	4657      	mov	r7, sl
    4df2:	464e      	mov	r6, r9
    4df4:	4645      	mov	r5, r8
    4df6:	b5e0      	push	{r5, r6, r7, lr}
    4df8:	b087      	sub	sp, #28
    4dfa:	0006      	movs	r6, r0
    4dfc:	ab03      	add	r3, sp, #12
    4dfe:	801a      	strh	r2, [r3, #0]
    4e00:	ab02      	add	r3, sp, #8
    4e02:	80d9      	strh	r1, [r3, #6]
    if(style->map == NULL) return -1;
    4e04:	6804      	ldr	r4, [r0, #0]
    4e06:	2c00      	cmp	r4, #0
    4e08:	d058      	beq.n	4ebc <_lv_style_set_color+0xd0>
    uint8_t id_to_find = prop & 0xFF;
    4e0a:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    4e0c:	0a0b      	lsrs	r3, r1, #8
    4e0e:	469a      	mov	sl, r3
    4e10:	1c19      	adds	r1, r3, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4e12:	7823      	ldrb	r3, [r4, #0]
    4e14:	2bff      	cmp	r3, #255	; 0xff
    4e16:	d04d      	beq.n	4eb4 <_lv_style_set_color+0xc8>
    4e18:	2201      	movs	r2, #1
    4e1a:	4252      	negs	r2, r2
    4e1c:	4690      	mov	r8, r2
    4e1e:	4694      	mov	ip, r2
    4e20:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    4e22:	207f      	movs	r0, #127	; 0x7f
    4e24:	4683      	mov	fp, r0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4e26:	0649      	lsls	r1, r1, #25
    4e28:	0e49      	lsrs	r1, r1, #25
    4e2a:	4689      	mov	r9, r1
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4e2c:	3870      	subs	r0, #112	; 0x70
    4e2e:	9602      	str	r6, [sp, #8]
    4e30:	e01a      	b.n	4e68 <_lv_style_set_color+0x7c>
            attr_i.full = style->map[i + 1];
    4e32:	18a1      	adds	r1, r4, r2
    4e34:	7849      	ldrb	r1, [r1, #1]
            if(attr_i.bits.state == attr.bits.state) {
    4e36:	4656      	mov	r6, sl
    4e38:	404e      	eors	r6, r1
    4e3a:	465f      	mov	r7, fp
    4e3c:	4237      	tst	r7, r6
    4e3e:	d00d      	beq.n	4e5c <_lv_style_set_color+0x70>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4e40:	0649      	lsls	r1, r1, #25
    4e42:	0e49      	lsrs	r1, r1, #25
    4e44:	9101      	str	r1, [sp, #4]
    4e46:	000e      	movs	r6, r1
    4e48:	464f      	mov	r7, r9
    4e4a:	43be      	bics	r6, r7
    4e4c:	d10e      	bne.n	4e6c <_lv_style_set_color+0x80>
                if(attr_i.bits.state > weight) {
    4e4e:	4561      	cmp	r1, ip
    4e50:	dd0c      	ble.n	4e6c <_lv_style_set_color+0x80>
                    weight = attr_i.bits.state;
    4e52:	b209      	sxth	r1, r1
    4e54:	468c      	mov	ip, r1
                    id_guess = i;
    4e56:	b211      	sxth	r1, r2
    4e58:	4688      	mov	r8, r1
    4e5a:	e007      	b.n	4e6c <_lv_style_set_color+0x80>
    4e5c:	9e02      	ldr	r6, [sp, #8]
    4e5e:	e013      	b.n	4e88 <_lv_style_set_color+0x9c>
        i += sizeof(lv_style_property_t);
    4e60:	1c8a      	adds	r2, r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4e62:	5ca3      	ldrb	r3, [r4, r2]
    4e64:	2bff      	cmp	r3, #255	; 0xff
    4e66:	d00d      	beq.n	4e84 <_lv_style_set_color+0x98>
        if(style->map[i] == id_to_find) {
    4e68:	429d      	cmp	r5, r3
    4e6a:	d0e2      	beq.n	4e32 <_lv_style_set_color+0x46>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4e6c:	4003      	ands	r3, r0
    4e6e:	1c91      	adds	r1, r2, #2
    4e70:	2b08      	cmp	r3, #8
    4e72:	ddf5      	ble.n	4e60 <_lv_style_set_color+0x74>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    4e74:	1c91      	adds	r1, r2, #2
    4e76:	2b0b      	cmp	r3, #11
    4e78:	ddf2      	ble.n	4e60 <_lv_style_set_color+0x74>
        else i += sizeof(const void *);
    4e7a:	1d11      	adds	r1, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    4e7c:	2b0d      	cmp	r3, #13
    4e7e:	dcef      	bgt.n	4e60 <_lv_style_set_color+0x74>
    4e80:	1c51      	adds	r1, r2, #1
    4e82:	e7ed      	b.n	4e60 <_lv_style_set_color+0x74>
    4e84:	9e02      	ldr	r6, [sp, #8]
    return id_guess;
    4e86:	4642      	mov	r2, r8
    if(id >= 0) {
    4e88:	2a00      	cmp	r2, #0
    4e8a:	db17      	blt.n	4ebc <_lv_style_set_color+0xd0>
        attr_found.full = *(style->map + id + 1);
    4e8c:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    4e8e:	785b      	ldrb	r3, [r3, #1]
    4e90:	4655      	mov	r5, sl
    4e92:	405d      	eors	r5, r3
    4e94:	066b      	lsls	r3, r5, #25
    4e96:	d111      	bne.n	4ebc <_lv_style_set_color+0xd0>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
    4e98:	3202      	adds	r2, #2
    4e9a:	18a4      	adds	r4, r4, r2
    4e9c:	ab03      	add	r3, sp, #12
    4e9e:	781a      	ldrb	r2, [r3, #0]
    4ea0:	7022      	strb	r2, [r4, #0]
    4ea2:	785b      	ldrb	r3, [r3, #1]
    4ea4:	7063      	strb	r3, [r4, #1]
}
    4ea6:	b007      	add	sp, #28
    4ea8:	bc3c      	pop	{r2, r3, r4, r5}
    4eaa:	4690      	mov	r8, r2
    4eac:	4699      	mov	r9, r3
    4eae:	46a2      	mov	sl, r4
    4eb0:	46ab      	mov	fp, r5
    4eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    4eb4:	2301      	movs	r3, #1
    4eb6:	425b      	negs	r3, r3
    4eb8:	4698      	mov	r8, r3
    4eba:	e7e4      	b.n	4e86 <_lv_style_set_color+0x9a>
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    4ebc:	22ff      	movs	r2, #255	; 0xff
    4ebe:	230e      	movs	r3, #14
    4ec0:	a902      	add	r1, sp, #8
    4ec2:	468c      	mov	ip, r1
    4ec4:	4463      	add	r3, ip
    4ec6:	801a      	strh	r2, [r3, #0]
    uint16_t size = _lv_style_get_mem_size(style);
    4ec8:	0030      	movs	r0, r6
    4eca:	4b1b      	ldr	r3, [pc, #108]	; (4f38 <_lv_style_set_color+0x14c>)
    4ecc:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    4ece:	2800      	cmp	r0, #0
    4ed0:	d100      	bne.n	4ed4 <_lv_style_set_color+0xe8>
    4ed2:	3002      	adds	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
    4ed4:	3004      	adds	r0, #4
    style->map = lv_mem_realloc(style->map, size);
    4ed6:	b285      	uxth	r5, r0
    4ed8:	0029      	movs	r1, r5
    4eda:	0020      	movs	r0, r4
    4edc:	4b17      	ldr	r3, [pc, #92]	; (4f3c <_lv_style_set_color+0x150>)
    4ede:	4798      	blx	r3
    4ee0:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    4ee2:	4b17      	ldr	r3, [pc, #92]	; (4f40 <_lv_style_set_color+0x154>)
    4ee4:	4798      	blx	r3
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d020      	beq.n	4f2c <_lv_style_set_color+0x140>
    if(style == NULL) return;
    4eea:	2e00      	cmp	r6, #0
    4eec:	d0db      	beq.n	4ea6 <_lv_style_set_color+0xba>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    4eee:	1fab      	subs	r3, r5, #6
    4ef0:	6832      	ldr	r2, [r6, #0]
    4ef2:	4694      	mov	ip, r2
    4ef4:	4463      	add	r3, ip
    4ef6:	aa02      	add	r2, sp, #8
    4ef8:	7991      	ldrb	r1, [r2, #6]
    4efa:	3206      	adds	r2, #6
    4efc:	7019      	strb	r1, [r3, #0]
    4efe:	7852      	ldrb	r2, [r2, #1]
    4f00:	705a      	strb	r2, [r3, #1]
    4f02:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
    4f04:	6832      	ldr	r2, [r6, #0]
    4f06:	4694      	mov	ip, r2
    4f08:	4463      	add	r3, ip
    4f0a:	aa03      	add	r2, sp, #12
    4f0c:	7811      	ldrb	r1, [r2, #0]
    4f0e:	7019      	strb	r1, [r3, #0]
    4f10:	7852      	ldrb	r2, [r2, #1]
    4f12:	705a      	strb	r2, [r3, #1]
    4f14:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    4f16:	6833      	ldr	r3, [r6, #0]
    4f18:	195d      	adds	r5, r3, r5
    4f1a:	230e      	movs	r3, #14
    4f1c:	aa02      	add	r2, sp, #8
    4f1e:	4694      	mov	ip, r2
    4f20:	4463      	add	r3, ip
    4f22:	781a      	ldrb	r2, [r3, #0]
    4f24:	702a      	strb	r2, [r5, #0]
    4f26:	785b      	ldrb	r3, [r3, #1]
    4f28:	706b      	strb	r3, [r5, #1]
    4f2a:	e7bc      	b.n	4ea6 <_lv_style_set_color+0xba>
    LV_ASSERT_MEM(style->map);
    4f2c:	6832      	ldr	r2, [r6, #0]
    4f2e:	2300      	movs	r3, #0
    4f30:	4804      	ldr	r0, [pc, #16]	; (4f44 <_lv_style_set_color+0x158>)
    4f32:	4905      	ldr	r1, [pc, #20]	; (4f48 <_lv_style_set_color+0x15c>)
    4f34:	4788      	blx	r1
    4f36:	e7fe      	b.n	4f36 <_lv_style_set_color+0x14a>
    4f38:	00004af5 	.word	0x00004af5
    4f3c:	00010ddd 	.word	0x00010ddd
    4f40:	00001415 	.word	0x00001415
    4f44:	00018804 	.word	0x00018804
    4f48:	0000141d 	.word	0x0000141d

00004f4c <_lv_style_set_opa>:
{
    4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f4e:	46de      	mov	lr, fp
    4f50:	4657      	mov	r7, sl
    4f52:	464e      	mov	r6, r9
    4f54:	4645      	mov	r5, r8
    4f56:	b5e0      	push	{r5, r6, r7, lr}
    4f58:	b087      	sub	sp, #28
    4f5a:	0006      	movs	r6, r0
    4f5c:	9201      	str	r2, [sp, #4]
    4f5e:	ab02      	add	r3, sp, #8
    4f60:	80d9      	strh	r1, [r3, #6]
    if(style->map == NULL) return -1;
    4f62:	6804      	ldr	r4, [r0, #0]
    4f64:	2c00      	cmp	r4, #0
    4f66:	d055      	beq.n	5014 <_lv_style_set_opa+0xc8>
    uint8_t id_to_find = prop & 0xFF;
    4f68:	b2c8      	uxtb	r0, r1
    attr.full = (prop >> 8) & 0xFF;
    4f6a:	0a0b      	lsrs	r3, r1, #8
    4f6c:	469a      	mov	sl, r3
    4f6e:	1c19      	adds	r1, r3, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4f70:	7823      	ldrb	r3, [r4, #0]
    4f72:	2bff      	cmp	r3, #255	; 0xff
    4f74:	d04a      	beq.n	500c <_lv_style_set_opa+0xc0>
    4f76:	2201      	movs	r2, #1
    4f78:	4252      	negs	r2, r2
    4f7a:	4690      	mov	r8, r2
    4f7c:	4694      	mov	ip, r2
    4f7e:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    4f80:	257f      	movs	r5, #127	; 0x7f
    4f82:	46ab      	mov	fp, r5
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4f84:	0649      	lsls	r1, r1, #25
    4f86:	0e49      	lsrs	r1, r1, #25
    4f88:	4689      	mov	r9, r1
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4f8a:	3d70      	subs	r5, #112	; 0x70
    4f8c:	9602      	str	r6, [sp, #8]
    4f8e:	e01a      	b.n	4fc6 <_lv_style_set_opa+0x7a>
            attr_i.full = style->map[i + 1];
    4f90:	18a1      	adds	r1, r4, r2
    4f92:	7849      	ldrb	r1, [r1, #1]
            if(attr_i.bits.state == attr.bits.state) {
    4f94:	4656      	mov	r6, sl
    4f96:	404e      	eors	r6, r1
    4f98:	465f      	mov	r7, fp
    4f9a:	4237      	tst	r7, r6
    4f9c:	d00d      	beq.n	4fba <_lv_style_set_opa+0x6e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    4f9e:	0649      	lsls	r1, r1, #25
    4fa0:	0e49      	lsrs	r1, r1, #25
    4fa2:	9100      	str	r1, [sp, #0]
    4fa4:	000e      	movs	r6, r1
    4fa6:	464f      	mov	r7, r9
    4fa8:	43be      	bics	r6, r7
    4faa:	d10e      	bne.n	4fca <_lv_style_set_opa+0x7e>
                if(attr_i.bits.state > weight) {
    4fac:	4561      	cmp	r1, ip
    4fae:	dd0c      	ble.n	4fca <_lv_style_set_opa+0x7e>
                    weight = attr_i.bits.state;
    4fb0:	b209      	sxth	r1, r1
    4fb2:	468c      	mov	ip, r1
                    id_guess = i;
    4fb4:	b211      	sxth	r1, r2
    4fb6:	4688      	mov	r8, r1
    4fb8:	e007      	b.n	4fca <_lv_style_set_opa+0x7e>
    4fba:	9e02      	ldr	r6, [sp, #8]
    4fbc:	e013      	b.n	4fe6 <_lv_style_set_opa+0x9a>
        i += sizeof(lv_style_property_t);
    4fbe:	1c8a      	adds	r2, r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    4fc0:	5ca3      	ldrb	r3, [r4, r2]
    4fc2:	2bff      	cmp	r3, #255	; 0xff
    4fc4:	d00d      	beq.n	4fe2 <_lv_style_set_opa+0x96>
        if(style->map[i] == id_to_find) {
    4fc6:	4298      	cmp	r0, r3
    4fc8:	d0e2      	beq.n	4f90 <_lv_style_set_opa+0x44>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    4fca:	402b      	ands	r3, r5
    4fcc:	1c91      	adds	r1, r2, #2
    4fce:	2b08      	cmp	r3, #8
    4fd0:	ddf5      	ble.n	4fbe <_lv_style_set_opa+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    4fd2:	1c91      	adds	r1, r2, #2
    4fd4:	2b0b      	cmp	r3, #11
    4fd6:	ddf2      	ble.n	4fbe <_lv_style_set_opa+0x72>
        else i += sizeof(const void *);
    4fd8:	1d11      	adds	r1, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    4fda:	2b0d      	cmp	r3, #13
    4fdc:	dcef      	bgt.n	4fbe <_lv_style_set_opa+0x72>
    4fde:	1c51      	adds	r1, r2, #1
    4fe0:	e7ed      	b.n	4fbe <_lv_style_set_opa+0x72>
    4fe2:	9e02      	ldr	r6, [sp, #8]
    return id_guess;
    4fe4:	4642      	mov	r2, r8
    if(id >= 0) {
    4fe6:	2a00      	cmp	r2, #0
    4fe8:	db14      	blt.n	5014 <_lv_style_set_opa+0xc8>
        attr_found.full = *(style->map + id + 1);
    4fea:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    4fec:	785b      	ldrb	r3, [r3, #1]
    4fee:	4650      	mov	r0, sl
    4ff0:	4058      	eors	r0, r3
    4ff2:	0643      	lsls	r3, r0, #25
    4ff4:	d10e      	bne.n	5014 <_lv_style_set_opa+0xc8>
    4ff6:	18a2      	adds	r2, r4, r2
    4ff8:	466b      	mov	r3, sp
    4ffa:	791b      	ldrb	r3, [r3, #4]
    4ffc:	7093      	strb	r3, [r2, #2]
}
    4ffe:	b007      	add	sp, #28
    5000:	bc3c      	pop	{r2, r3, r4, r5}
    5002:	4690      	mov	r8, r2
    5004:	4699      	mov	r9, r3
    5006:	46a2      	mov	sl, r4
    5008:	46ab      	mov	fp, r5
    500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    500c:	2301      	movs	r3, #1
    500e:	425b      	negs	r3, r3
    5010:	4698      	mov	r8, r3
    5012:	e7e7      	b.n	4fe4 <_lv_style_set_opa+0x98>
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    5014:	22ff      	movs	r2, #255	; 0xff
    5016:	230e      	movs	r3, #14
    5018:	a902      	add	r1, sp, #8
    501a:	468c      	mov	ip, r1
    501c:	4463      	add	r3, ip
    501e:	801a      	strh	r2, [r3, #0]
    uint16_t size = _lv_style_get_mem_size(style);
    5020:	0030      	movs	r0, r6
    5022:	4b1a      	ldr	r3, [pc, #104]	; (508c <_lv_style_set_opa+0x140>)
    5024:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    5026:	2800      	cmp	r0, #0
    5028:	d100      	bne.n	502c <_lv_style_set_opa+0xe0>
    502a:	3002      	adds	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
    502c:	3003      	adds	r0, #3
    style->map = lv_mem_realloc(style->map, size);
    502e:	b285      	uxth	r5, r0
    5030:	0029      	movs	r1, r5
    5032:	0020      	movs	r0, r4
    5034:	4b16      	ldr	r3, [pc, #88]	; (5090 <_lv_style_set_opa+0x144>)
    5036:	4798      	blx	r3
    5038:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    503a:	4b16      	ldr	r3, [pc, #88]	; (5094 <_lv_style_set_opa+0x148>)
    503c:	4798      	blx	r3
    503e:	2800      	cmp	r0, #0
    5040:	d01d      	beq.n	507e <_lv_style_set_opa+0x132>
    if(style == NULL) return;
    5042:	2e00      	cmp	r6, #0
    5044:	d0db      	beq.n	4ffe <_lv_style_set_opa+0xb2>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    5046:	1f6b      	subs	r3, r5, #5
    5048:	6832      	ldr	r2, [r6, #0]
    504a:	4694      	mov	ip, r2
    504c:	4463      	add	r3, ip
    504e:	aa02      	add	r2, sp, #8
    5050:	7991      	ldrb	r1, [r2, #6]
    5052:	3206      	adds	r2, #6
    5054:	7019      	strb	r1, [r3, #0]
    5056:	7852      	ldrb	r2, [r2, #1]
    5058:	705a      	strb	r2, [r3, #1]
    505a:	6833      	ldr	r3, [r6, #0]
    505c:	195b      	adds	r3, r3, r5
    505e:	3b03      	subs	r3, #3
    5060:	466a      	mov	r2, sp
    5062:	7912      	ldrb	r2, [r2, #4]
    5064:	701a      	strb	r2, [r3, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
    5066:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    5068:	6833      	ldr	r3, [r6, #0]
    506a:	195d      	adds	r5, r3, r5
    506c:	230e      	movs	r3, #14
    506e:	aa02      	add	r2, sp, #8
    5070:	4694      	mov	ip, r2
    5072:	4463      	add	r3, ip
    5074:	781a      	ldrb	r2, [r3, #0]
    5076:	702a      	strb	r2, [r5, #0]
    5078:	785b      	ldrb	r3, [r3, #1]
    507a:	706b      	strb	r3, [r5, #1]
    507c:	e7bf      	b.n	4ffe <_lv_style_set_opa+0xb2>
    LV_ASSERT_MEM(style->map);
    507e:	6832      	ldr	r2, [r6, #0]
    5080:	2300      	movs	r3, #0
    5082:	4805      	ldr	r0, [pc, #20]	; (5098 <_lv_style_set_opa+0x14c>)
    5084:	4905      	ldr	r1, [pc, #20]	; (509c <_lv_style_set_opa+0x150>)
    5086:	4788      	blx	r1
    5088:	e7fe      	b.n	5088 <_lv_style_set_opa+0x13c>
    508a:	46c0      	nop			; (mov r8, r8)
    508c:	00004af5 	.word	0x00004af5
    5090:	00010ddd 	.word	0x00010ddd
    5094:	00001415 	.word	0x00001415
    5098:	00018804 	.word	0x00018804
    509c:	0000141d 	.word	0x0000141d

000050a0 <_lv_style_set_ptr>:
{
    50a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a2:	46de      	mov	lr, fp
    50a4:	4657      	mov	r7, sl
    50a6:	464e      	mov	r6, r9
    50a8:	4645      	mov	r5, r8
    50aa:	b5e0      	push	{r5, r6, r7, lr}
    50ac:	b087      	sub	sp, #28
    50ae:	0006      	movs	r6, r0
    50b0:	9202      	str	r2, [sp, #8]
    50b2:	ab02      	add	r3, sp, #8
    50b4:	80d9      	strh	r1, [r3, #6]
    if(style->map == NULL) return -1;
    50b6:	6804      	ldr	r4, [r0, #0]
    50b8:	2c00      	cmp	r4, #0
    50ba:	d05f      	beq.n	517c <_lv_style_set_ptr+0xdc>
    uint8_t id_to_find = prop & 0xFF;
    50bc:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    50be:	0a0b      	lsrs	r3, r1, #8
    50c0:	469a      	mov	sl, r3
    50c2:	1c18      	adds	r0, r3, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    50c4:	7823      	ldrb	r3, [r4, #0]
    50c6:	2bff      	cmp	r3, #255	; 0xff
    50c8:	d054      	beq.n	5174 <_lv_style_set_ptr+0xd4>
    50ca:	2201      	movs	r2, #1
    50cc:	4252      	negs	r2, r2
    50ce:	4690      	mov	r8, r2
    50d0:	4694      	mov	ip, r2
    50d2:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    50d4:	217f      	movs	r1, #127	; 0x7f
    50d6:	468b      	mov	fp, r1
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    50d8:	0640      	lsls	r0, r0, #25
    50da:	0e41      	lsrs	r1, r0, #25
    50dc:	4689      	mov	r9, r1
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    50de:	210f      	movs	r1, #15
    50e0:	9601      	str	r6, [sp, #4]
    50e2:	e01a      	b.n	511a <_lv_style_set_ptr+0x7a>
            attr_i.full = style->map[i + 1];
    50e4:	18a0      	adds	r0, r4, r2
    50e6:	7840      	ldrb	r0, [r0, #1]
            if(attr_i.bits.state == attr.bits.state) {
    50e8:	4656      	mov	r6, sl
    50ea:	4046      	eors	r6, r0
    50ec:	465f      	mov	r7, fp
    50ee:	4237      	tst	r7, r6
    50f0:	d00d      	beq.n	510e <_lv_style_set_ptr+0x6e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    50f2:	0640      	lsls	r0, r0, #25
    50f4:	0e40      	lsrs	r0, r0, #25
    50f6:	9000      	str	r0, [sp, #0]
    50f8:	0006      	movs	r6, r0
    50fa:	464f      	mov	r7, r9
    50fc:	43be      	bics	r6, r7
    50fe:	d10e      	bne.n	511e <_lv_style_set_ptr+0x7e>
                if(attr_i.bits.state > weight) {
    5100:	4560      	cmp	r0, ip
    5102:	dd0c      	ble.n	511e <_lv_style_set_ptr+0x7e>
                    weight = attr_i.bits.state;
    5104:	b200      	sxth	r0, r0
    5106:	4684      	mov	ip, r0
                    id_guess = i;
    5108:	b210      	sxth	r0, r2
    510a:	4680      	mov	r8, r0
    510c:	e007      	b.n	511e <_lv_style_set_ptr+0x7e>
    510e:	9e01      	ldr	r6, [sp, #4]
    5110:	e013      	b.n	513a <_lv_style_set_ptr+0x9a>
        i += sizeof(lv_style_property_t);
    5112:	1c82      	adds	r2, r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5114:	5ca3      	ldrb	r3, [r4, r2]
    5116:	2bff      	cmp	r3, #255	; 0xff
    5118:	d00d      	beq.n	5136 <_lv_style_set_ptr+0x96>
        if(style->map[i] == id_to_find) {
    511a:	429d      	cmp	r5, r3
    511c:	d0e2      	beq.n	50e4 <_lv_style_set_ptr+0x44>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    511e:	400b      	ands	r3, r1
    5120:	1c90      	adds	r0, r2, #2
    5122:	2b08      	cmp	r3, #8
    5124:	ddf5      	ble.n	5112 <_lv_style_set_ptr+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    5126:	1c90      	adds	r0, r2, #2
    5128:	2b0b      	cmp	r3, #11
    512a:	ddf2      	ble.n	5112 <_lv_style_set_ptr+0x72>
        else i += sizeof(const void *);
    512c:	1d10      	adds	r0, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    512e:	2b0d      	cmp	r3, #13
    5130:	dcef      	bgt.n	5112 <_lv_style_set_ptr+0x72>
    5132:	1c50      	adds	r0, r2, #1
    5134:	e7ed      	b.n	5112 <_lv_style_set_ptr+0x72>
    5136:	9e01      	ldr	r6, [sp, #4]
    return id_guess;
    5138:	4642      	mov	r2, r8
    if(id >= 0) {
    513a:	2a00      	cmp	r2, #0
    513c:	db1e      	blt.n	517c <_lv_style_set_ptr+0xdc>
        attr_found.full = *(style->map + id + 1);
    513e:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    5140:	785b      	ldrb	r3, [r3, #1]
    5142:	4655      	mov	r5, sl
    5144:	405d      	eors	r5, r3
    5146:	066b      	lsls	r3, r5, #25
    5148:	d118      	bne.n	517c <_lv_style_set_ptr+0xdc>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
    514a:	3202      	adds	r2, #2
    514c:	18a4      	adds	r4, r4, r2
    514e:	ab02      	add	r3, sp, #8
    5150:	781b      	ldrb	r3, [r3, #0]
    5152:	7023      	strb	r3, [r4, #0]
    5154:	ab02      	add	r3, sp, #8
    5156:	785b      	ldrb	r3, [r3, #1]
    5158:	7063      	strb	r3, [r4, #1]
    515a:	ab02      	add	r3, sp, #8
    515c:	789b      	ldrb	r3, [r3, #2]
    515e:	70a3      	strb	r3, [r4, #2]
    5160:	ab02      	add	r3, sp, #8
    5162:	78db      	ldrb	r3, [r3, #3]
    5164:	70e3      	strb	r3, [r4, #3]
}
    5166:	b007      	add	sp, #28
    5168:	bc3c      	pop	{r2, r3, r4, r5}
    516a:	4690      	mov	r8, r2
    516c:	4699      	mov	r9, r3
    516e:	46a2      	mov	sl, r4
    5170:	46ab      	mov	fp, r5
    5172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    5174:	2301      	movs	r3, #1
    5176:	425b      	negs	r3, r3
    5178:	4698      	mov	r8, r3
    517a:	e7dd      	b.n	5138 <_lv_style_set_ptr+0x98>
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    517c:	22ff      	movs	r2, #255	; 0xff
    517e:	230e      	movs	r3, #14
    5180:	a902      	add	r1, sp, #8
    5182:	468c      	mov	ip, r1
    5184:	4463      	add	r3, ip
    5186:	801a      	strh	r2, [r3, #0]
    uint16_t size = _lv_style_get_mem_size(style);
    5188:	0030      	movs	r0, r6
    518a:	4b1f      	ldr	r3, [pc, #124]	; (5208 <_lv_style_set_ptr+0x168>)
    518c:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    518e:	2800      	cmp	r0, #0
    5190:	d100      	bne.n	5194 <_lv_style_set_ptr+0xf4>
    5192:	3002      	adds	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
    5194:	3006      	adds	r0, #6
    style->map = lv_mem_realloc(style->map, size);
    5196:	b285      	uxth	r5, r0
    5198:	0029      	movs	r1, r5
    519a:	0020      	movs	r0, r4
    519c:	4b1b      	ldr	r3, [pc, #108]	; (520c <_lv_style_set_ptr+0x16c>)
    519e:	4798      	blx	r3
    51a0:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    51a2:	4b1b      	ldr	r3, [pc, #108]	; (5210 <_lv_style_set_ptr+0x170>)
    51a4:	4798      	blx	r3
    51a6:	2800      	cmp	r0, #0
    51a8:	d028      	beq.n	51fc <_lv_style_set_ptr+0x15c>
    if(style == NULL) return;
    51aa:	2e00      	cmp	r6, #0
    51ac:	d0db      	beq.n	5166 <_lv_style_set_ptr+0xc6>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    51ae:	002b      	movs	r3, r5
    51b0:	3b08      	subs	r3, #8
    51b2:	6832      	ldr	r2, [r6, #0]
    51b4:	4694      	mov	ip, r2
    51b6:	4463      	add	r3, ip
    51b8:	aa02      	add	r2, sp, #8
    51ba:	7991      	ldrb	r1, [r2, #6]
    51bc:	3206      	adds	r2, #6
    51be:	7019      	strb	r1, [r3, #0]
    51c0:	7852      	ldrb	r2, [r2, #1]
    51c2:	705a      	strb	r2, [r3, #1]
    51c4:	1fab      	subs	r3, r5, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
    51c6:	6832      	ldr	r2, [r6, #0]
    51c8:	4694      	mov	ip, r2
    51ca:	4463      	add	r3, ip
    51cc:	aa02      	add	r2, sp, #8
    51ce:	7812      	ldrb	r2, [r2, #0]
    51d0:	701a      	strb	r2, [r3, #0]
    51d2:	aa02      	add	r2, sp, #8
    51d4:	7852      	ldrb	r2, [r2, #1]
    51d6:	705a      	strb	r2, [r3, #1]
    51d8:	aa02      	add	r2, sp, #8
    51da:	7892      	ldrb	r2, [r2, #2]
    51dc:	709a      	strb	r2, [r3, #2]
    51de:	aa02      	add	r2, sp, #8
    51e0:	78d2      	ldrb	r2, [r2, #3]
    51e2:	70da      	strb	r2, [r3, #3]
    51e4:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    51e6:	6833      	ldr	r3, [r6, #0]
    51e8:	195d      	adds	r5, r3, r5
    51ea:	230e      	movs	r3, #14
    51ec:	aa02      	add	r2, sp, #8
    51ee:	4694      	mov	ip, r2
    51f0:	4463      	add	r3, ip
    51f2:	781a      	ldrb	r2, [r3, #0]
    51f4:	702a      	strb	r2, [r5, #0]
    51f6:	785b      	ldrb	r3, [r3, #1]
    51f8:	706b      	strb	r3, [r5, #1]
    51fa:	e7b4      	b.n	5166 <_lv_style_set_ptr+0xc6>
    LV_ASSERT_MEM(style->map);
    51fc:	6832      	ldr	r2, [r6, #0]
    51fe:	2300      	movs	r3, #0
    5200:	4804      	ldr	r0, [pc, #16]	; (5214 <_lv_style_set_ptr+0x174>)
    5202:	4905      	ldr	r1, [pc, #20]	; (5218 <_lv_style_set_ptr+0x178>)
    5204:	4788      	blx	r1
    5206:	e7fe      	b.n	5206 <_lv_style_set_ptr+0x166>
    5208:	00004af5 	.word	0x00004af5
    520c:	00010ddd 	.word	0x00010ddd
    5210:	00001415 	.word	0x00001415
    5214:	00018804 	.word	0x00018804
    5218:	0000141d 	.word	0x0000141d

0000521c <_lv_style_get_int>:
{
    521c:	b5f0      	push	{r4, r5, r6, r7, lr}
    521e:	46de      	mov	lr, fp
    5220:	4657      	mov	r7, sl
    5222:	464e      	mov	r6, r9
    5224:	4645      	mov	r5, r8
    5226:	b5e0      	push	{r5, r6, r7, lr}
    5228:	b085      	sub	sp, #20
    522a:	4681      	mov	r9, r0
    522c:	9203      	str	r2, [sp, #12]
    if(style == NULL) return -1;
    522e:	2800      	cmp	r0, #0
    5230:	d05b      	beq.n	52ea <_lv_style_get_int+0xce>
    if(style->map == NULL) return -1;
    5232:	6805      	ldr	r5, [r0, #0]
    5234:	2d00      	cmp	r5, #0
    5236:	d05b      	beq.n	52f0 <_lv_style_get_int+0xd4>
    uint8_t id_to_find = prop & 0xFF;
    5238:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    523a:	0a09      	lsrs	r1, r1, #8
    523c:	1c08      	adds	r0, r1, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    523e:	782b      	ldrb	r3, [r5, #0]
    5240:	2bff      	cmp	r3, #255	; 0xff
    5242:	d04e      	beq.n	52e2 <_lv_style_get_int+0xc6>
    5244:	2201      	movs	r2, #1
    5246:	4252      	negs	r2, r2
    5248:	9202      	str	r2, [sp, #8]
    524a:	4693      	mov	fp, r2
    524c:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    524e:	247f      	movs	r4, #127	; 0x7f
    5250:	46a2      	mov	sl, r4
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5252:	0640      	lsls	r0, r0, #25
    5254:	0e40      	lsrs	r0, r0, #25
    5256:	4684      	mov	ip, r0
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5258:	270f      	movs	r7, #15
    525a:	4688      	mov	r8, r1
    525c:	e01a      	b.n	5294 <_lv_style_get_int+0x78>
            attr_i.full = style->map[i + 1];
    525e:	18a8      	adds	r0, r5, r2
    5260:	7840      	ldrb	r0, [r0, #1]
            if(attr_i.bits.state == attr.bits.state) {
    5262:	4644      	mov	r4, r8
    5264:	4044      	eors	r4, r0
    5266:	4651      	mov	r1, sl
    5268:	4221      	tst	r1, r4
    526a:	d00d      	beq.n	5288 <_lv_style_get_int+0x6c>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    526c:	0640      	lsls	r0, r0, #25
    526e:	0e40      	lsrs	r0, r0, #25
    5270:	9001      	str	r0, [sp, #4]
    5272:	0004      	movs	r4, r0
    5274:	4661      	mov	r1, ip
    5276:	438c      	bics	r4, r1
    5278:	d10e      	bne.n	5298 <_lv_style_get_int+0x7c>
                if(attr_i.bits.state > weight) {
    527a:	4558      	cmp	r0, fp
    527c:	dd0c      	ble.n	5298 <_lv_style_get_int+0x7c>
                    weight = attr_i.bits.state;
    527e:	b201      	sxth	r1, r0
    5280:	468b      	mov	fp, r1
                    id_guess = i;
    5282:	b211      	sxth	r1, r2
    5284:	9102      	str	r1, [sp, #8]
    5286:	e007      	b.n	5298 <_lv_style_get_int+0x7c>
    5288:	4641      	mov	r1, r8
    528a:	e013      	b.n	52b4 <_lv_style_get_int+0x98>
        i += sizeof(lv_style_property_t);
    528c:	1c82      	adds	r2, r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    528e:	5cab      	ldrb	r3, [r5, r2]
    5290:	2bff      	cmp	r3, #255	; 0xff
    5292:	d00d      	beq.n	52b0 <_lv_style_get_int+0x94>
        if(style->map[i] == id_to_find) {
    5294:	429e      	cmp	r6, r3
    5296:	d0e2      	beq.n	525e <_lv_style_get_int+0x42>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5298:	403b      	ands	r3, r7
    529a:	1c90      	adds	r0, r2, #2
    529c:	2b08      	cmp	r3, #8
    529e:	ddf5      	ble.n	528c <_lv_style_get_int+0x70>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    52a0:	1c90      	adds	r0, r2, #2
    52a2:	2b0b      	cmp	r3, #11
    52a4:	ddf2      	ble.n	528c <_lv_style_get_int+0x70>
        else i += sizeof(const void *);
    52a6:	1d10      	adds	r0, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    52a8:	2b0d      	cmp	r3, #13
    52aa:	dcef      	bgt.n	528c <_lv_style_get_int+0x70>
    52ac:	1c50      	adds	r0, r2, #1
    52ae:	e7ed      	b.n	528c <_lv_style_get_int+0x70>
    52b0:	4641      	mov	r1, r8
    return id_guess;
    52b2:	9a02      	ldr	r2, [sp, #8]
    if(id < 0) {
    52b4:	2a00      	cmp	r2, #0
    52b6:	db1e      	blt.n	52f6 <_lv_style_get_int+0xda>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
    52b8:	1c93      	adds	r3, r2, #2
    52ba:	18ed      	adds	r5, r5, r3
    52bc:	782b      	ldrb	r3, [r5, #0]
    52be:	9803      	ldr	r0, [sp, #12]
    52c0:	7003      	strb	r3, [r0, #0]
    52c2:	786b      	ldrb	r3, [r5, #1]
    52c4:	7043      	strb	r3, [r0, #1]
        attr_act.full = style->map[id + 1];
    52c6:	464b      	mov	r3, r9
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	189a      	adds	r2, r3, r2
    52cc:	7850      	ldrb	r0, [r2, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    52ce:	0649      	lsls	r1, r1, #25
    52d0:	0e49      	lsrs	r1, r1, #25
    52d2:	4008      	ands	r0, r1
}
    52d4:	b005      	add	sp, #20
    52d6:	bc3c      	pop	{r2, r3, r4, r5}
    52d8:	4690      	mov	r8, r2
    52da:	4699      	mov	r9, r3
    52dc:	46a2      	mov	sl, r4
    52de:	46ab      	mov	fp, r5
    52e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    52e2:	2301      	movs	r3, #1
    52e4:	425b      	negs	r3, r3
    52e6:	9302      	str	r3, [sp, #8]
    52e8:	e7e3      	b.n	52b2 <_lv_style_get_int+0x96>
    if(style == NULL) return -1;
    52ea:	2001      	movs	r0, #1
    52ec:	4240      	negs	r0, r0
    52ee:	e7f1      	b.n	52d4 <_lv_style_get_int+0xb8>
    if(style->map == NULL) return -1;
    52f0:	2001      	movs	r0, #1
    52f2:	4240      	negs	r0, r0
    52f4:	e7ee      	b.n	52d4 <_lv_style_get_int+0xb8>
        return -1;
    52f6:	2001      	movs	r0, #1
    52f8:	4240      	negs	r0, r0
    52fa:	e7eb      	b.n	52d4 <_lv_style_get_int+0xb8>

000052fc <_lv_style_get_opa>:
{
    52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fe:	46de      	mov	lr, fp
    5300:	4657      	mov	r7, sl
    5302:	464e      	mov	r6, r9
    5304:	4645      	mov	r5, r8
    5306:	b5e0      	push	{r5, r6, r7, lr}
    5308:	b085      	sub	sp, #20
    530a:	4681      	mov	r9, r0
    530c:	9203      	str	r2, [sp, #12]
    if(style == NULL) return -1;
    530e:	2800      	cmp	r0, #0
    5310:	d058      	beq.n	53c4 <_lv_style_get_opa+0xc8>
    if(style->map == NULL) return -1;
    5312:	6805      	ldr	r5, [r0, #0]
    5314:	2d00      	cmp	r5, #0
    5316:	d058      	beq.n	53ca <_lv_style_get_opa+0xce>
    uint8_t id_to_find = prop & 0xFF;
    5318:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    531a:	0a09      	lsrs	r1, r1, #8
    531c:	1c08      	adds	r0, r1, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    531e:	782b      	ldrb	r3, [r5, #0]
    5320:	2bff      	cmp	r3, #255	; 0xff
    5322:	d04b      	beq.n	53bc <_lv_style_get_opa+0xc0>
    5324:	2201      	movs	r2, #1
    5326:	4252      	negs	r2, r2
    5328:	9202      	str	r2, [sp, #8]
    532a:	4693      	mov	fp, r2
    532c:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    532e:	247f      	movs	r4, #127	; 0x7f
    5330:	46a2      	mov	sl, r4
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5332:	0640      	lsls	r0, r0, #25
    5334:	0e40      	lsrs	r0, r0, #25
    5336:	4684      	mov	ip, r0
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5338:	270f      	movs	r7, #15
    533a:	4688      	mov	r8, r1
    533c:	e01a      	b.n	5374 <_lv_style_get_opa+0x78>
            attr_i.full = style->map[i + 1];
    533e:	18a8      	adds	r0, r5, r2
    5340:	7840      	ldrb	r0, [r0, #1]
            if(attr_i.bits.state == attr.bits.state) {
    5342:	4644      	mov	r4, r8
    5344:	4044      	eors	r4, r0
    5346:	4651      	mov	r1, sl
    5348:	4221      	tst	r1, r4
    534a:	d00d      	beq.n	5368 <_lv_style_get_opa+0x6c>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    534c:	0640      	lsls	r0, r0, #25
    534e:	0e40      	lsrs	r0, r0, #25
    5350:	9001      	str	r0, [sp, #4]
    5352:	0004      	movs	r4, r0
    5354:	4661      	mov	r1, ip
    5356:	438c      	bics	r4, r1
    5358:	d10e      	bne.n	5378 <_lv_style_get_opa+0x7c>
                if(attr_i.bits.state > weight) {
    535a:	4558      	cmp	r0, fp
    535c:	dd0c      	ble.n	5378 <_lv_style_get_opa+0x7c>
                    weight = attr_i.bits.state;
    535e:	b201      	sxth	r1, r0
    5360:	468b      	mov	fp, r1
                    id_guess = i;
    5362:	b211      	sxth	r1, r2
    5364:	9102      	str	r1, [sp, #8]
    5366:	e007      	b.n	5378 <_lv_style_get_opa+0x7c>
    5368:	4641      	mov	r1, r8
    536a:	e013      	b.n	5394 <_lv_style_get_opa+0x98>
        i += sizeof(lv_style_property_t);
    536c:	1c82      	adds	r2, r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    536e:	5cab      	ldrb	r3, [r5, r2]
    5370:	2bff      	cmp	r3, #255	; 0xff
    5372:	d00d      	beq.n	5390 <_lv_style_get_opa+0x94>
        if(style->map[i] == id_to_find) {
    5374:	429e      	cmp	r6, r3
    5376:	d0e2      	beq.n	533e <_lv_style_get_opa+0x42>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5378:	403b      	ands	r3, r7
    537a:	1c90      	adds	r0, r2, #2
    537c:	2b08      	cmp	r3, #8
    537e:	ddf5      	ble.n	536c <_lv_style_get_opa+0x70>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    5380:	1c90      	adds	r0, r2, #2
    5382:	2b0b      	cmp	r3, #11
    5384:	ddf2      	ble.n	536c <_lv_style_get_opa+0x70>
        else i += sizeof(const void *);
    5386:	1d10      	adds	r0, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5388:	2b0d      	cmp	r3, #13
    538a:	dcef      	bgt.n	536c <_lv_style_get_opa+0x70>
    538c:	1c50      	adds	r0, r2, #1
    538e:	e7ed      	b.n	536c <_lv_style_get_opa+0x70>
    5390:	4641      	mov	r1, r8
    return id_guess;
    5392:	9a02      	ldr	r2, [sp, #8]
    if(id < 0) {
    5394:	2a00      	cmp	r2, #0
    5396:	db1b      	blt.n	53d0 <_lv_style_get_opa+0xd4>
    5398:	18ad      	adds	r5, r5, r2
    539a:	78ab      	ldrb	r3, [r5, #2]
    539c:	9803      	ldr	r0, [sp, #12]
    539e:	7003      	strb	r3, [r0, #0]
        attr_act.full = style->map[id + 1];
    53a0:	464b      	mov	r3, r9
    53a2:	681b      	ldr	r3, [r3, #0]
    53a4:	189a      	adds	r2, r3, r2
    53a6:	7850      	ldrb	r0, [r2, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    53a8:	0649      	lsls	r1, r1, #25
    53aa:	0e49      	lsrs	r1, r1, #25
    53ac:	4008      	ands	r0, r1
}
    53ae:	b005      	add	sp, #20
    53b0:	bc3c      	pop	{r2, r3, r4, r5}
    53b2:	4690      	mov	r8, r2
    53b4:	4699      	mov	r9, r3
    53b6:	46a2      	mov	sl, r4
    53b8:	46ab      	mov	fp, r5
    53ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    53bc:	2301      	movs	r3, #1
    53be:	425b      	negs	r3, r3
    53c0:	9302      	str	r3, [sp, #8]
    53c2:	e7e6      	b.n	5392 <_lv_style_get_opa+0x96>
    if(style == NULL) return -1;
    53c4:	2001      	movs	r0, #1
    53c6:	4240      	negs	r0, r0
    53c8:	e7f1      	b.n	53ae <_lv_style_get_opa+0xb2>
    if(style->map == NULL) return -1;
    53ca:	2001      	movs	r0, #1
    53cc:	4240      	negs	r0, r0
    53ce:	e7ee      	b.n	53ae <_lv_style_get_opa+0xb2>
        return -1;
    53d0:	2001      	movs	r0, #1
    53d2:	4240      	negs	r0, r0
    53d4:	e7eb      	b.n	53ae <_lv_style_get_opa+0xb2>

000053d6 <_lv_style_get_color>:
{
    53d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    53d8:	46de      	mov	lr, fp
    53da:	4657      	mov	r7, sl
    53dc:	464e      	mov	r6, r9
    53de:	4645      	mov	r5, r8
    53e0:	b5e0      	push	{r5, r6, r7, lr}
    53e2:	b085      	sub	sp, #20
    53e4:	4681      	mov	r9, r0
    53e6:	9203      	str	r2, [sp, #12]
    if(style == NULL) return -1;
    53e8:	2800      	cmp	r0, #0
    53ea:	d05b      	beq.n	54a4 <_lv_style_get_color+0xce>
    if(style->map == NULL) return -1;
    53ec:	6805      	ldr	r5, [r0, #0]
    53ee:	2d00      	cmp	r5, #0
    53f0:	d05b      	beq.n	54aa <_lv_style_get_color+0xd4>
    uint8_t id_to_find = prop & 0xFF;
    53f2:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    53f4:	0a09      	lsrs	r1, r1, #8
    53f6:	1c08      	adds	r0, r1, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    53f8:	782b      	ldrb	r3, [r5, #0]
    53fa:	2bff      	cmp	r3, #255	; 0xff
    53fc:	d04e      	beq.n	549c <_lv_style_get_color+0xc6>
    53fe:	2201      	movs	r2, #1
    5400:	4252      	negs	r2, r2
    5402:	9202      	str	r2, [sp, #8]
    5404:	4693      	mov	fp, r2
    5406:	2200      	movs	r2, #0
            if(attr_i.bits.state == attr.bits.state) {
    5408:	247f      	movs	r4, #127	; 0x7f
    540a:	46a2      	mov	sl, r4
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    540c:	0640      	lsls	r0, r0, #25
    540e:	0e40      	lsrs	r0, r0, #25
    5410:	4684      	mov	ip, r0
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5412:	270f      	movs	r7, #15
    5414:	4688      	mov	r8, r1
    5416:	e01a      	b.n	544e <_lv_style_get_color+0x78>
            attr_i.full = style->map[i + 1];
    5418:	18a8      	adds	r0, r5, r2
    541a:	7840      	ldrb	r0, [r0, #1]
            if(attr_i.bits.state == attr.bits.state) {
    541c:	4644      	mov	r4, r8
    541e:	4044      	eors	r4, r0
    5420:	4651      	mov	r1, sl
    5422:	4221      	tst	r1, r4
    5424:	d00d      	beq.n	5442 <_lv_style_get_color+0x6c>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5426:	0640      	lsls	r0, r0, #25
    5428:	0e40      	lsrs	r0, r0, #25
    542a:	9001      	str	r0, [sp, #4]
    542c:	0004      	movs	r4, r0
    542e:	4661      	mov	r1, ip
    5430:	438c      	bics	r4, r1
    5432:	d10e      	bne.n	5452 <_lv_style_get_color+0x7c>
                if(attr_i.bits.state > weight) {
    5434:	4558      	cmp	r0, fp
    5436:	dd0c      	ble.n	5452 <_lv_style_get_color+0x7c>
                    weight = attr_i.bits.state;
    5438:	b201      	sxth	r1, r0
    543a:	468b      	mov	fp, r1
                    id_guess = i;
    543c:	b211      	sxth	r1, r2
    543e:	9102      	str	r1, [sp, #8]
    5440:	e007      	b.n	5452 <_lv_style_get_color+0x7c>
    5442:	4641      	mov	r1, r8
    5444:	e013      	b.n	546e <_lv_style_get_color+0x98>
        i += sizeof(lv_style_property_t);
    5446:	1c82      	adds	r2, r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    5448:	5cab      	ldrb	r3, [r5, r2]
    544a:	2bff      	cmp	r3, #255	; 0xff
    544c:	d00d      	beq.n	546a <_lv_style_get_color+0x94>
        if(style->map[i] == id_to_find) {
    544e:	429e      	cmp	r6, r3
    5450:	d0e2      	beq.n	5418 <_lv_style_get_color+0x42>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5452:	403b      	ands	r3, r7
    5454:	1c90      	adds	r0, r2, #2
    5456:	2b08      	cmp	r3, #8
    5458:	ddf5      	ble.n	5446 <_lv_style_get_color+0x70>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    545a:	1c90      	adds	r0, r2, #2
    545c:	2b0b      	cmp	r3, #11
    545e:	ddf2      	ble.n	5446 <_lv_style_get_color+0x70>
        else i += sizeof(const void *);
    5460:	1d10      	adds	r0, r2, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5462:	2b0d      	cmp	r3, #13
    5464:	dcef      	bgt.n	5446 <_lv_style_get_color+0x70>
    5466:	1c50      	adds	r0, r2, #1
    5468:	e7ed      	b.n	5446 <_lv_style_get_color+0x70>
    546a:	4641      	mov	r1, r8
    return id_guess;
    546c:	9a02      	ldr	r2, [sp, #8]
    if(id < 0) {
    546e:	2a00      	cmp	r2, #0
    5470:	db1e      	blt.n	54b0 <_lv_style_get_color+0xda>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
    5472:	1c93      	adds	r3, r2, #2
    5474:	18ed      	adds	r5, r5, r3
    5476:	782b      	ldrb	r3, [r5, #0]
    5478:	9803      	ldr	r0, [sp, #12]
    547a:	7003      	strb	r3, [r0, #0]
    547c:	786b      	ldrb	r3, [r5, #1]
    547e:	7043      	strb	r3, [r0, #1]
        attr_act.full = style->map[id + 1];
    5480:	464b      	mov	r3, r9
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	189a      	adds	r2, r3, r2
    5486:	7850      	ldrb	r0, [r2, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    5488:	0649      	lsls	r1, r1, #25
    548a:	0e49      	lsrs	r1, r1, #25
    548c:	4008      	ands	r0, r1
}
    548e:	b005      	add	sp, #20
    5490:	bc3c      	pop	{r2, r3, r4, r5}
    5492:	4690      	mov	r8, r2
    5494:	4699      	mov	r9, r3
    5496:	46a2      	mov	sl, r4
    5498:	46ab      	mov	fp, r5
    549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    549c:	2301      	movs	r3, #1
    549e:	425b      	negs	r3, r3
    54a0:	9302      	str	r3, [sp, #8]
    54a2:	e7e3      	b.n	546c <_lv_style_get_color+0x96>
    if(style == NULL) return -1;
    54a4:	2001      	movs	r0, #1
    54a6:	4240      	negs	r0, r0
    54a8:	e7f1      	b.n	548e <_lv_style_get_color+0xb8>
    if(style->map == NULL) return -1;
    54aa:	2001      	movs	r0, #1
    54ac:	4240      	negs	r0, r0
    54ae:	e7ee      	b.n	548e <_lv_style_get_color+0xb8>
        return -1;
    54b0:	2001      	movs	r0, #1
    54b2:	4240      	negs	r0, r0
    54b4:	e7eb      	b.n	548e <_lv_style_get_color+0xb8>

000054b6 <_lv_style_get_ptr>:
{
    54b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b8:	46de      	mov	lr, fp
    54ba:	4657      	mov	r7, sl
    54bc:	464e      	mov	r6, r9
    54be:	4645      	mov	r5, r8
    54c0:	b5e0      	push	{r5, r6, r7, lr}
    54c2:	b085      	sub	sp, #20
    54c4:	4681      	mov	r9, r0
    54c6:	4693      	mov	fp, r2
    if(style == NULL) return -1;
    54c8:	2800      	cmp	r0, #0
    54ca:	d05f      	beq.n	558c <_lv_style_get_ptr+0xd6>
    if(style->map == NULL) return -1;
    54cc:	6806      	ldr	r6, [r0, #0]
    54ce:	2e00      	cmp	r6, #0
    54d0:	d05f      	beq.n	5592 <_lv_style_get_ptr+0xdc>
    uint8_t id_to_find = prop & 0xFF;
    54d2:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    54d4:	0a0a      	lsrs	r2, r1, #8
    54d6:	1c11      	adds	r1, r2, #0
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    54d8:	7833      	ldrb	r3, [r6, #0]
    54da:	2bff      	cmp	r3, #255	; 0xff
    54dc:	d052      	beq.n	5584 <_lv_style_get_ptr+0xce>
    54de:	2001      	movs	r0, #1
    54e0:	4240      	negs	r0, r0
    54e2:	9003      	str	r0, [sp, #12]
    54e4:	9002      	str	r0, [sp, #8]
    54e6:	2400      	movs	r4, #0
            if(attr_i.bits.state == attr.bits.state) {
    54e8:	3080      	adds	r0, #128	; 0x80
    54ea:	4682      	mov	sl, r0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    54ec:	0649      	lsls	r1, r1, #25
    54ee:	0e49      	lsrs	r1, r1, #25
    54f0:	468c      	mov	ip, r1
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    54f2:	210f      	movs	r1, #15
    54f4:	4690      	mov	r8, r2
    54f6:	e01b      	b.n	5530 <_lv_style_get_ptr+0x7a>
            attr_i.full = style->map[i + 1];
    54f8:	1932      	adds	r2, r6, r4
    54fa:	7850      	ldrb	r0, [r2, #1]
            if(attr_i.bits.state == attr.bits.state) {
    54fc:	4642      	mov	r2, r8
    54fe:	4042      	eors	r2, r0
    5500:	4655      	mov	r5, sl
    5502:	4215      	tst	r5, r2
    5504:	d00e      	beq.n	5524 <_lv_style_get_ptr+0x6e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    5506:	0640      	lsls	r0, r0, #25
    5508:	0e40      	lsrs	r0, r0, #25
    550a:	9001      	str	r0, [sp, #4]
    550c:	0005      	movs	r5, r0
    550e:	4662      	mov	r2, ip
    5510:	4395      	bics	r5, r2
    5512:	d10f      	bne.n	5534 <_lv_style_get_ptr+0x7e>
                if(attr_i.bits.state > weight) {
    5514:	9a02      	ldr	r2, [sp, #8]
    5516:	4290      	cmp	r0, r2
    5518:	dd0c      	ble.n	5534 <_lv_style_get_ptr+0x7e>
                    weight = attr_i.bits.state;
    551a:	b202      	sxth	r2, r0
    551c:	9202      	str	r2, [sp, #8]
                    id_guess = i;
    551e:	b222      	sxth	r2, r4
    5520:	9203      	str	r2, [sp, #12]
    5522:	e007      	b.n	5534 <_lv_style_get_ptr+0x7e>
    5524:	4642      	mov	r2, r8
    5526:	e013      	b.n	5550 <_lv_style_get_ptr+0x9a>
        i += sizeof(lv_style_property_t);
    5528:	1c94      	adds	r4, r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    552a:	5d33      	ldrb	r3, [r6, r4]
    552c:	2bff      	cmp	r3, #255	; 0xff
    552e:	d00d      	beq.n	554c <_lv_style_get_ptr+0x96>
        if(style->map[i] == id_to_find) {
    5530:	429f      	cmp	r7, r3
    5532:	d0e1      	beq.n	54f8 <_lv_style_get_ptr+0x42>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    5534:	400b      	ands	r3, r1
    5536:	1ca2      	adds	r2, r4, #2
    5538:	2b08      	cmp	r3, #8
    553a:	ddf5      	ble.n	5528 <_lv_style_get_ptr+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    553c:	1ca2      	adds	r2, r4, #2
    553e:	2b0b      	cmp	r3, #11
    5540:	ddf2      	ble.n	5528 <_lv_style_get_ptr+0x72>
        else i += sizeof(const void *);
    5542:	1d22      	adds	r2, r4, #4
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    5544:	2b0d      	cmp	r3, #13
    5546:	dcef      	bgt.n	5528 <_lv_style_get_ptr+0x72>
    5548:	1c62      	adds	r2, r4, #1
    554a:	e7ed      	b.n	5528 <_lv_style_get_ptr+0x72>
    554c:	4642      	mov	r2, r8
    return id_guess;
    554e:	9c03      	ldr	r4, [sp, #12]
    if(id < 0) {
    5550:	2c00      	cmp	r4, #0
    5552:	db21      	blt.n	5598 <_lv_style_get_ptr+0xe2>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
    5554:	0020      	movs	r0, r4
    5556:	3402      	adds	r4, #2
    5558:	1936      	adds	r6, r6, r4
    555a:	2300      	movs	r3, #0
    555c:	465c      	mov	r4, fp
    555e:	5cf1      	ldrb	r1, [r6, r3]
    5560:	54e1      	strb	r1, [r4, r3]
    5562:	3301      	adds	r3, #1
    while(len) {
    5564:	2b04      	cmp	r3, #4
    5566:	d1fa      	bne.n	555e <_lv_style_get_ptr+0xa8>
        attr_act.full = style->map[id + 1];
    5568:	464b      	mov	r3, r9
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	181b      	adds	r3, r3, r0
    556e:	7858      	ldrb	r0, [r3, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    5570:	0652      	lsls	r2, r2, #25
    5572:	0e52      	lsrs	r2, r2, #25
    5574:	4010      	ands	r0, r2
}
    5576:	b005      	add	sp, #20
    5578:	bc3c      	pop	{r2, r3, r4, r5}
    557a:	4690      	mov	r8, r2
    557c:	4699      	mov	r9, r3
    557e:	46a2      	mov	sl, r4
    5580:	46ab      	mov	fp, r5
    5582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t id_guess = -1;
    5584:	2301      	movs	r3, #1
    5586:	425b      	negs	r3, r3
    5588:	9303      	str	r3, [sp, #12]
    558a:	e7e0      	b.n	554e <_lv_style_get_ptr+0x98>
    if(style == NULL) return -1;
    558c:	2001      	movs	r0, #1
    558e:	4240      	negs	r0, r0
    5590:	e7f1      	b.n	5576 <_lv_style_get_ptr+0xc0>
    if(style->map == NULL) return -1;
    5592:	2001      	movs	r0, #1
    5594:	4240      	negs	r0, r0
    5596:	e7ee      	b.n	5576 <_lv_style_get_ptr+0xc0>
        return -1;
    5598:	2001      	movs	r0, #1
    559a:	4240      	negs	r0, r0
    559c:	e7eb      	b.n	5576 <_lv_style_get_ptr+0xc0>

0000559e <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
    559e:	7943      	ldrb	r3, [r0, #5]
    55a0:	07da      	lsls	r2, r3, #31
    55a2:	d507      	bpl.n	55b4 <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
    55a4:	079b      	lsls	r3, r3, #30
    55a6:	d402      	bmi.n	55ae <lv_style_list_get_local_style+0x10>
    else return list->style_list[0];
    55a8:	6803      	ldr	r3, [r0, #0]
    55aa:	6818      	ldr	r0, [r3, #0]
}
    55ac:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
    55ae:	6803      	ldr	r3, [r0, #0]
    55b0:	6858      	ldr	r0, [r3, #4]
    55b2:	e7fb      	b.n	55ac <lv_style_list_get_local_style+0xe>
    if(!list->has_local) return NULL;
    55b4:	2000      	movs	r0, #0
    55b6:	e7f9      	b.n	55ac <lv_style_list_get_local_style+0xe>

000055b8 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
    55b8:	7943      	ldrb	r3, [r0, #5]
    55ba:	079b      	lsls	r3, r3, #30
    55bc:	d502      	bpl.n	55c4 <_lv_style_list_get_transition_style+0xc>
    return list->style_list[0];
    55be:	6803      	ldr	r3, [r0, #0]
    55c0:	6818      	ldr	r0, [r3, #0]
}
    55c2:	4770      	bx	lr
    if(!list->has_trans) return NULL;
    55c4:	2000      	movs	r0, #0
    55c6:	e7fc      	b.n	55c2 <_lv_style_list_get_transition_style+0xa>

000055c8 <_lv_style_list_reset>:
{
    55c8:	b570      	push	{r4, r5, r6, lr}
    55ca:	1e04      	subs	r4, r0, #0
    if(list == NULL) return;
    55cc:	d026      	beq.n	561c <_lv_style_list_reset+0x54>
    if(list->has_local) {
    55ce:	7943      	ldrb	r3, [r0, #5]
    55d0:	07db      	lsls	r3, r3, #31
    55d2:	d508      	bpl.n	55e6 <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
    55d4:	4b14      	ldr	r3, [pc, #80]	; (5628 <_lv_style_list_reset+0x60>)
    55d6:	4798      	blx	r3
    55d8:	1e05      	subs	r5, r0, #0
        if(local) {
    55da:	d004      	beq.n	55e6 <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
    55dc:	4b13      	ldr	r3, [pc, #76]	; (562c <_lv_style_list_reset+0x64>)
    55de:	4798      	blx	r3
            lv_mem_free(local);
    55e0:	0028      	movs	r0, r5
    55e2:	4b13      	ldr	r3, [pc, #76]	; (5630 <_lv_style_list_reset+0x68>)
    55e4:	4798      	blx	r3
    if(list->has_trans) {
    55e6:	7963      	ldrb	r3, [r4, #5]
    55e8:	079b      	lsls	r3, r3, #30
    55ea:	d509      	bpl.n	5600 <_lv_style_list_reset+0x38>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
    55ec:	0020      	movs	r0, r4
    55ee:	4b11      	ldr	r3, [pc, #68]	; (5634 <_lv_style_list_reset+0x6c>)
    55f0:	4798      	blx	r3
    55f2:	1e05      	subs	r5, r0, #0
        if(trans) {
    55f4:	d004      	beq.n	5600 <_lv_style_list_reset+0x38>
            lv_style_reset(trans);
    55f6:	4b0d      	ldr	r3, [pc, #52]	; (562c <_lv_style_list_reset+0x64>)
    55f8:	4798      	blx	r3
            lv_mem_free(trans);
    55fa:	0028      	movs	r0, r5
    55fc:	4b0c      	ldr	r3, [pc, #48]	; (5630 <_lv_style_list_reset+0x68>)
    55fe:	4798      	blx	r3
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    5600:	7923      	ldrb	r3, [r4, #4]
    5602:	2b00      	cmp	r3, #0
    5604:	d10b      	bne.n	561e <_lv_style_list_reset+0x56>
    list->style_list = NULL;
    5606:	2300      	movs	r3, #0
    5608:	6023      	str	r3, [r4, #0]
    list->style_cnt = 0;
    560a:	7123      	strb	r3, [r4, #4]
    list->has_local = 0;
    560c:	7963      	ldrb	r3, [r4, #5]
    list->has_trans = 0;
    560e:	2201      	movs	r2, #1
    5610:	4393      	bics	r3, r2
    list->skip_trans = 0;
    5612:	3201      	adds	r2, #1
    5614:	4393      	bics	r3, r2
    5616:	3202      	adds	r2, #2
    5618:	4393      	bics	r3, r2
    561a:	7163      	strb	r3, [r4, #5]
}
    561c:	bd70      	pop	{r4, r5, r6, pc}
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    561e:	6820      	ldr	r0, [r4, #0]
    5620:	4b03      	ldr	r3, [pc, #12]	; (5630 <_lv_style_list_reset+0x68>)
    5622:	4798      	blx	r3
    5624:	e7ef      	b.n	5606 <_lv_style_list_reset+0x3e>
    5626:	46c0      	nop			; (mov r8, r8)
    5628:	0000559f 	.word	0x0000559f
    562c:	00004ae1 	.word	0x00004ae1
    5630:	00010ad1 	.word	0x00010ad1
    5634:	000055b9 	.word	0x000055b9

00005638 <lv_style_list_copy>:
{
    5638:	b570      	push	{r4, r5, r6, lr}
    563a:	0005      	movs	r5, r0
    563c:	000c      	movs	r4, r1
    _lv_style_list_reset(list_dest);
    563e:	4b2b      	ldr	r3, [pc, #172]	; (56ec <lv_style_list_copy+0xb4>)
    5640:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
    5642:	6823      	ldr	r3, [r4, #0]
    5644:	2b00      	cmp	r3, #0
    5646:	d03e      	beq.n	56c6 <lv_style_list_copy+0x8e>
    if(list_src->has_local == 0) {
    5648:	7963      	ldrb	r3, [r4, #5]
    564a:	07da      	lsls	r2, r3, #31
    564c:	d41f      	bmi.n	568e <lv_style_list_copy+0x56>
        if(list_src->has_trans) {
    564e:	079b      	lsls	r3, r3, #30
    5650:	d510      	bpl.n	5674 <lv_style_list_copy+0x3c>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    5652:	7920      	ldrb	r0, [r4, #4]
    5654:	3801      	subs	r0, #1
    5656:	0080      	lsls	r0, r0, #2
    5658:	4b25      	ldr	r3, [pc, #148]	; (56f0 <lv_style_list_copy+0xb8>)
    565a:	4798      	blx	r3
    565c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    565e:	7922      	ldrb	r2, [r4, #4]
    5660:	3a01      	subs	r2, #1
    5662:	0092      	lsls	r2, r2, #2
    5664:	6823      	ldr	r3, [r4, #0]
    5666:	1d19      	adds	r1, r3, #4
    5668:	4b22      	ldr	r3, [pc, #136]	; (56f4 <lv_style_list_copy+0xbc>)
    566a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    566c:	7923      	ldrb	r3, [r4, #4]
    566e:	3b01      	subs	r3, #1
    5670:	712b      	strb	r3, [r5, #4]
    5672:	e028      	b.n	56c6 <lv_style_list_copy+0x8e>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
    5674:	7920      	ldrb	r0, [r4, #4]
    5676:	0080      	lsls	r0, r0, #2
    5678:	4b1d      	ldr	r3, [pc, #116]	; (56f0 <lv_style_list_copy+0xb8>)
    567a:	4798      	blx	r3
    567c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
    567e:	7922      	ldrb	r2, [r4, #4]
    5680:	0092      	lsls	r2, r2, #2
    5682:	6821      	ldr	r1, [r4, #0]
    5684:	4b1b      	ldr	r3, [pc, #108]	; (56f4 <lv_style_list_copy+0xbc>)
    5686:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
    5688:	7923      	ldrb	r3, [r4, #4]
    568a:	712b      	strb	r3, [r5, #4]
    568c:	e01b      	b.n	56c6 <lv_style_list_copy+0x8e>
        if(list_src->has_trans) {
    568e:	079b      	lsls	r3, r3, #30
    5690:	d51a      	bpl.n	56c8 <lv_style_list_copy+0x90>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
    5692:	7920      	ldrb	r0, [r4, #4]
    5694:	3802      	subs	r0, #2
    5696:	0080      	lsls	r0, r0, #2
    5698:	4b15      	ldr	r3, [pc, #84]	; (56f0 <lv_style_list_copy+0xb8>)
    569a:	4798      	blx	r3
    569c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
    569e:	7922      	ldrb	r2, [r4, #4]
    56a0:	3a02      	subs	r2, #2
    56a2:	0092      	lsls	r2, r2, #2
    56a4:	6821      	ldr	r1, [r4, #0]
    56a6:	3108      	adds	r1, #8
    56a8:	4b12      	ldr	r3, [pc, #72]	; (56f4 <lv_style_list_copy+0xbc>)
    56aa:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
    56ac:	7923      	ldrb	r3, [r4, #4]
    56ae:	3b02      	subs	r3, #2
    56b0:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
    56b2:	0028      	movs	r0, r5
    56b4:	4d10      	ldr	r5, [pc, #64]	; (56f8 <lv_style_list_copy+0xc0>)
    56b6:	47a8      	blx	r5
    56b8:	0006      	movs	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
    56ba:	0020      	movs	r0, r4
    56bc:	47a8      	blx	r5
    56be:	0001      	movs	r1, r0
    56c0:	0030      	movs	r0, r6
    56c2:	4b0e      	ldr	r3, [pc, #56]	; (56fc <lv_style_list_copy+0xc4>)
    56c4:	4798      	blx	r3
}
    56c6:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    56c8:	7920      	ldrb	r0, [r4, #4]
    56ca:	3801      	subs	r0, #1
    56cc:	0080      	lsls	r0, r0, #2
    56ce:	4b08      	ldr	r3, [pc, #32]	; (56f0 <lv_style_list_copy+0xb8>)
    56d0:	4798      	blx	r3
    56d2:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    56d4:	7922      	ldrb	r2, [r4, #4]
    56d6:	3a01      	subs	r2, #1
    56d8:	0092      	lsls	r2, r2, #2
    56da:	6823      	ldr	r3, [r4, #0]
    56dc:	1d19      	adds	r1, r3, #4
    56de:	4b05      	ldr	r3, [pc, #20]	; (56f4 <lv_style_list_copy+0xbc>)
    56e0:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    56e2:	7923      	ldrb	r3, [r4, #4]
    56e4:	3b01      	subs	r3, #1
    56e6:	712b      	strb	r3, [r5, #4]
    56e8:	e7e3      	b.n	56b2 <lv_style_list_copy+0x7a>
    56ea:	46c0      	nop			; (mov r8, r8)
    56ec:	000055c9 	.word	0x000055c9
    56f0:	00010a09 	.word	0x00010a09
    56f4:	00010c25 	.word	0x00010c25
    56f8:	00004a5d 	.word	0x00004a5d
    56fc:	00004b35 	.word	0x00004b35

00005700 <_lv_style_list_add_trans_style>:
{
    5700:	b570      	push	{r4, r5, r6, lr}
    5702:	0005      	movs	r5, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
    5704:	7943      	ldrb	r3, [r0, #5]
    5706:	079b      	lsls	r3, r3, #30
    5708:	d504      	bpl.n	5714 <_lv_style_list_add_trans_style+0x14>
    570a:	4b14      	ldr	r3, [pc, #80]	; (575c <_lv_style_list_add_trans_style+0x5c>)
    570c:	4798      	blx	r3
    570e:	0004      	movs	r4, r0
}
    5710:	0020      	movs	r0, r4
    5712:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
    5714:	2004      	movs	r0, #4
    5716:	4b12      	ldr	r3, [pc, #72]	; (5760 <_lv_style_list_add_trans_style+0x60>)
    5718:	4798      	blx	r3
    571a:	0004      	movs	r4, r0
    LV_ASSERT_MEM(trans_style);
    571c:	4b11      	ldr	r3, [pc, #68]	; (5764 <_lv_style_list_add_trans_style+0x64>)
    571e:	4798      	blx	r3
    5720:	2800      	cmp	r0, #0
    5722:	d015      	beq.n	5750 <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
    5724:	2c00      	cmp	r4, #0
    5726:	d0f3      	beq.n	5710 <_lv_style_list_add_trans_style+0x10>
    lv_style_init(trans_style);
    5728:	0020      	movs	r0, r4
    572a:	4b0f      	ldr	r3, [pc, #60]	; (5768 <_lv_style_list_add_trans_style+0x68>)
    572c:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
    572e:	0021      	movs	r1, r4
    5730:	0028      	movs	r0, r5
    5732:	4b0e      	ldr	r3, [pc, #56]	; (576c <_lv_style_list_add_trans_style+0x6c>)
    5734:	4798      	blx	r3
    list->has_trans = 1;
    5736:	796b      	ldrb	r3, [r5, #5]
    5738:	2202      	movs	r2, #2
    573a:	4313      	orrs	r3, r2
    573c:	716b      	strb	r3, [r5, #5]
    if(list->has_local) {
    573e:	07db      	lsls	r3, r3, #31
    5740:	d5e6      	bpl.n	5710 <_lv_style_list_add_trans_style+0x10>
        lv_style_t * tmp = list->style_list[0];
    5742:	682b      	ldr	r3, [r5, #0]
    5744:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
    5746:	6859      	ldr	r1, [r3, #4]
    5748:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
    574a:	682b      	ldr	r3, [r5, #0]
    574c:	605a      	str	r2, [r3, #4]
    574e:	e7df      	b.n	5710 <_lv_style_list_add_trans_style+0x10>
    LV_ASSERT_MEM(trans_style);
    5750:	0022      	movs	r2, r4
    5752:	2300      	movs	r3, #0
    5754:	4806      	ldr	r0, [pc, #24]	; (5770 <_lv_style_list_add_trans_style+0x70>)
    5756:	4907      	ldr	r1, [pc, #28]	; (5774 <_lv_style_list_add_trans_style+0x74>)
    5758:	4788      	blx	r1
    575a:	e7fe      	b.n	575a <_lv_style_list_add_trans_style+0x5a>
    575c:	000055b9 	.word	0x000055b9
    5760:	00010a09 	.word	0x00010a09
    5764:	00001415 	.word	0x00001415
    5768:	000048e5 	.word	0x000048e5
    576c:	000049b5 	.word	0x000049b5
    5770:	00018804 	.word	0x00018804
    5774:	0000141d 	.word	0x0000141d

00005778 <_lv_style_list_get_int>:
{
    5778:	b5f0      	push	{r4, r5, r6, r7, lr}
    577a:	46d6      	mov	lr, sl
    577c:	464f      	mov	r7, r9
    577e:	4646      	mov	r6, r8
    5780:	b5c0      	push	{r6, r7, lr}
    5782:	b084      	sub	sp, #16
    5784:	1e05      	subs	r5, r0, #0
    5786:	9101      	str	r1, [sp, #4]
    5788:	4691      	mov	r9, r2
    if(list == NULL) return LV_RES_INV;
    578a:	d058      	beq.n	583e <_lv_style_list_get_int+0xc6>
    if(list->style_list == NULL) return LV_RES_INV;
    578c:	6803      	ldr	r3, [r0, #0]
    578e:	2b00      	cmp	r3, #0
    5790:	d057      	beq.n	5842 <_lv_style_list_get_int+0xca>
    int16_t weight_goal = attr.full;
    5792:	0a0b      	lsrs	r3, r1, #8
    5794:	4698      	mov	r8, r3
    lv_style_int_t value_act = 0;
    5796:	2200      	movs	r2, #0
    5798:	ab02      	add	r3, sp, #8
    579a:	80da      	strh	r2, [r3, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
    579c:	7902      	ldrb	r2, [r0, #4]
    579e:	2a00      	cmp	r2, #0
    57a0:	dd42      	ble.n	5828 <_lv_style_list_get_int+0xb0>
    57a2:	2400      	movs	r4, #0
    57a4:	2601      	movs	r6, #1
    57a6:	4276      	negs	r6, r6
    if(list->has_trans && list->skip_trans) id++;
    57a8:	2306      	movs	r3, #6
    57aa:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
    57ac:	4f26      	ldr	r7, [pc, #152]	; (5848 <_lv_style_list_get_int+0xd0>)
    57ae:	e016      	b.n	57de <_lv_style_list_get_int+0x66>
    57b0:	3101      	adds	r1, #1
    57b2:	b2c9      	uxtb	r1, r1
    57b4:	e019      	b.n	57ea <_lv_style_list_get_int+0x72>
            *res = value_act;
    57b6:	ab02      	add	r3, sp, #8
    57b8:	3306      	adds	r3, #6
    57ba:	881b      	ldrh	r3, [r3, #0]
    57bc:	464a      	mov	r2, r9
    57be:	8013      	strh	r3, [r2, #0]
            return LV_RES_OK;
    57c0:	2001      	movs	r0, #1
    57c2:	e036      	b.n	5832 <_lv_style_list_get_int+0xba>
        else if(weight_act > weight) {
    57c4:	42b3      	cmp	r3, r6
    57c6:	dd05      	ble.n	57d4 <_lv_style_list_get_int+0x5c>
            *res = value_act;
    57c8:	ab02      	add	r3, sp, #8
    57ca:	3306      	adds	r3, #6
    57cc:	881b      	ldrh	r3, [r3, #0]
    57ce:	464a      	mov	r2, r9
    57d0:	8013      	strh	r3, [r2, #0]
            weight =  weight_act;
    57d2:	0006      	movs	r6, r0
    57d4:	3401      	adds	r4, #1
    57d6:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    57d8:	792a      	ldrb	r2, [r5, #4]
    57da:	4294      	cmp	r4, r2
    57dc:	da26      	bge.n	582c <_lv_style_list_get_int+0xb4>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    57de:	b2e1      	uxtb	r1, r4
    57e0:	796b      	ldrb	r3, [r5, #5]
    57e2:	4650      	mov	r0, sl
    57e4:	4003      	ands	r3, r0
    57e6:	2b06      	cmp	r3, #6
    57e8:	d0e2      	beq.n	57b0 <_lv_style_list_get_int+0x38>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    57ea:	2000      	movs	r0, #0
    57ec:	2a00      	cmp	r2, #0
    57ee:	d004      	beq.n	57fa <_lv_style_list_get_int+0x82>
    57f0:	4291      	cmp	r1, r2
    57f2:	d202      	bcs.n	57fa <_lv_style_list_get_int+0x82>
    return list->style_list[id];
    57f4:	0089      	lsls	r1, r1, #2
    57f6:	682b      	ldr	r3, [r5, #0]
    57f8:	58c8      	ldr	r0, [r1, r3]
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
    57fa:	ab02      	add	r3, sp, #8
    57fc:	1d9a      	adds	r2, r3, #6
    57fe:	9901      	ldr	r1, [sp, #4]
    5800:	47b8      	blx	r7
    5802:	0003      	movs	r3, r0
        if(weight_act == weight_goal) {
    5804:	4580      	cmp	r8, r0
    5806:	d0d6      	beq.n	57b6 <_lv_style_list_get_int+0x3e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    5808:	796a      	ldrb	r2, [r5, #5]
    580a:	0791      	lsls	r1, r2, #30
    580c:	d5da      	bpl.n	57c4 <_lv_style_list_get_int+0x4c>
    580e:	2800      	cmp	r0, #0
    5810:	dbd8      	blt.n	57c4 <_lv_style_list_get_int+0x4c>
    5812:	2c00      	cmp	r4, #0
    5814:	d1d6      	bne.n	57c4 <_lv_style_list_get_int+0x4c>
    5816:	0752      	lsls	r2, r2, #29
    5818:	d4d4      	bmi.n	57c4 <_lv_style_list_get_int+0x4c>
            *res = value_act;
    581a:	ab02      	add	r3, sp, #8
    581c:	3306      	adds	r3, #6
    581e:	881b      	ldrh	r3, [r3, #0]
    5820:	464a      	mov	r2, r9
    5822:	8013      	strh	r3, [r2, #0]
            return LV_RES_OK;
    5824:	2001      	movs	r0, #1
    5826:	e004      	b.n	5832 <_lv_style_list_get_int+0xba>
    int16_t weight = -1;
    5828:	2601      	movs	r6, #1
    582a:	4276      	negs	r6, r6
    if(weight >= 0) return LV_RES_OK;
    582c:	43f0      	mvns	r0, r6
    582e:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
    5830:	0bc0      	lsrs	r0, r0, #15
}
    5832:	b004      	add	sp, #16
    5834:	bc1c      	pop	{r2, r3, r4}
    5836:	4690      	mov	r8, r2
    5838:	4699      	mov	r9, r3
    583a:	46a2      	mov	sl, r4
    583c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(list == NULL) return LV_RES_INV;
    583e:	2000      	movs	r0, #0
    5840:	e7f7      	b.n	5832 <_lv_style_list_get_int+0xba>
    if(list->style_list == NULL) return LV_RES_INV;
    5842:	2000      	movs	r0, #0
    5844:	e7f5      	b.n	5832 <_lv_style_list_get_int+0xba>
    5846:	46c0      	nop			; (mov r8, r8)
    5848:	0000521d 	.word	0x0000521d

0000584c <_lv_style_list_get_color>:
{
    584c:	b5f0      	push	{r4, r5, r6, r7, lr}
    584e:	46d6      	mov	lr, sl
    5850:	464f      	mov	r7, r9
    5852:	4646      	mov	r6, r8
    5854:	b5c0      	push	{r6, r7, lr}
    5856:	b084      	sub	sp, #16
    5858:	1e05      	subs	r5, r0, #0
    585a:	9101      	str	r1, [sp, #4]
    585c:	4691      	mov	r9, r2
    if(list == NULL) return LV_RES_INV;
    585e:	d054      	beq.n	590a <_lv_style_list_get_color+0xbe>
    if(list->style_list == NULL) return LV_RES_INV;
    5860:	6803      	ldr	r3, [r0, #0]
    5862:	2b00      	cmp	r3, #0
    5864:	d053      	beq.n	590e <_lv_style_list_get_color+0xc2>
    int16_t weight_goal = attr.full;
    5866:	0a0b      	lsrs	r3, r1, #8
    5868:	4698      	mov	r8, r3
    lv_color_t value_act = { 0 };
    586a:	2200      	movs	r2, #0
    586c:	ab03      	add	r3, sp, #12
    586e:	801a      	strh	r2, [r3, #0]
    for(ci = 0; ci < list->style_cnt; ci++) {
    5870:	7902      	ldrb	r2, [r0, #4]
    5872:	2a00      	cmp	r2, #0
    5874:	dd3e      	ble.n	58f4 <_lv_style_list_get_color+0xa8>
    5876:	2400      	movs	r4, #0
    5878:	2601      	movs	r6, #1
    587a:	4276      	negs	r6, r6
    if(list->has_trans && list->skip_trans) id++;
    587c:	2306      	movs	r3, #6
    587e:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
    5880:	4f24      	ldr	r7, [pc, #144]	; (5914 <_lv_style_list_get_color+0xc8>)
    5882:	e014      	b.n	58ae <_lv_style_list_get_color+0x62>
    5884:	3101      	adds	r1, #1
    5886:	b2c9      	uxtb	r1, r1
    5888:	e017      	b.n	58ba <_lv_style_list_get_color+0x6e>
            *res = value_act;
    588a:	ab03      	add	r3, sp, #12
    588c:	881b      	ldrh	r3, [r3, #0]
    588e:	464a      	mov	r2, r9
    5890:	8013      	strh	r3, [r2, #0]
            return LV_RES_OK;
    5892:	2001      	movs	r0, #1
    5894:	e033      	b.n	58fe <_lv_style_list_get_color+0xb2>
        else if(weight_act > weight) {
    5896:	42b3      	cmp	r3, r6
    5898:	dd04      	ble.n	58a4 <_lv_style_list_get_color+0x58>
            *res = value_act;
    589a:	ab03      	add	r3, sp, #12
    589c:	881b      	ldrh	r3, [r3, #0]
    589e:	464a      	mov	r2, r9
    58a0:	8013      	strh	r3, [r2, #0]
            weight =  weight_act;
    58a2:	0006      	movs	r6, r0
    58a4:	3401      	adds	r4, #1
    58a6:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    58a8:	792a      	ldrb	r2, [r5, #4]
    58aa:	4294      	cmp	r4, r2
    58ac:	da24      	bge.n	58f8 <_lv_style_list_get_color+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    58ae:	b2e1      	uxtb	r1, r4
    58b0:	796b      	ldrb	r3, [r5, #5]
    58b2:	4650      	mov	r0, sl
    58b4:	4003      	ands	r3, r0
    58b6:	2b06      	cmp	r3, #6
    58b8:	d0e4      	beq.n	5884 <_lv_style_list_get_color+0x38>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    58ba:	2000      	movs	r0, #0
    58bc:	2a00      	cmp	r2, #0
    58be:	d004      	beq.n	58ca <_lv_style_list_get_color+0x7e>
    58c0:	4291      	cmp	r1, r2
    58c2:	d202      	bcs.n	58ca <_lv_style_list_get_color+0x7e>
    return list->style_list[id];
    58c4:	0089      	lsls	r1, r1, #2
    58c6:	682b      	ldr	r3, [r5, #0]
    58c8:	58c8      	ldr	r0, [r1, r3]
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
    58ca:	aa03      	add	r2, sp, #12
    58cc:	9901      	ldr	r1, [sp, #4]
    58ce:	47b8      	blx	r7
    58d0:	0003      	movs	r3, r0
        if(weight_act == weight_goal) {
    58d2:	4580      	cmp	r8, r0
    58d4:	d0d9      	beq.n	588a <_lv_style_list_get_color+0x3e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    58d6:	796a      	ldrb	r2, [r5, #5]
    58d8:	0791      	lsls	r1, r2, #30
    58da:	d5dc      	bpl.n	5896 <_lv_style_list_get_color+0x4a>
    58dc:	2800      	cmp	r0, #0
    58de:	dbda      	blt.n	5896 <_lv_style_list_get_color+0x4a>
    58e0:	2c00      	cmp	r4, #0
    58e2:	d1d8      	bne.n	5896 <_lv_style_list_get_color+0x4a>
    58e4:	0752      	lsls	r2, r2, #29
    58e6:	d4d6      	bmi.n	5896 <_lv_style_list_get_color+0x4a>
            *res = value_act;
    58e8:	ab03      	add	r3, sp, #12
    58ea:	881b      	ldrh	r3, [r3, #0]
    58ec:	464a      	mov	r2, r9
    58ee:	8013      	strh	r3, [r2, #0]
            return LV_RES_OK;
    58f0:	2001      	movs	r0, #1
    58f2:	e004      	b.n	58fe <_lv_style_list_get_color+0xb2>
    int16_t weight = -1;
    58f4:	2601      	movs	r6, #1
    58f6:	4276      	negs	r6, r6
    if(weight >= 0)  return LV_RES_OK;
    58f8:	43f0      	mvns	r0, r6
    58fa:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
    58fc:	0bc0      	lsrs	r0, r0, #15
}
    58fe:	b004      	add	sp, #16
    5900:	bc1c      	pop	{r2, r3, r4}
    5902:	4690      	mov	r8, r2
    5904:	4699      	mov	r9, r3
    5906:	46a2      	mov	sl, r4
    5908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(list == NULL) return LV_RES_INV;
    590a:	2000      	movs	r0, #0
    590c:	e7f7      	b.n	58fe <_lv_style_list_get_color+0xb2>
    if(list->style_list == NULL) return LV_RES_INV;
    590e:	2000      	movs	r0, #0
    5910:	e7f5      	b.n	58fe <_lv_style_list_get_color+0xb2>
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	000053d7 	.word	0x000053d7

00005918 <_lv_style_list_get_opa>:
{
    5918:	b5f0      	push	{r4, r5, r6, r7, lr}
    591a:	46d6      	mov	lr, sl
    591c:	464f      	mov	r7, r9
    591e:	4646      	mov	r6, r8
    5920:	b5c0      	push	{r6, r7, lr}
    5922:	b084      	sub	sp, #16
    5924:	1e05      	subs	r5, r0, #0
    5926:	9101      	str	r1, [sp, #4]
    5928:	4691      	mov	r9, r2
    if(list == NULL) return LV_RES_INV;
    592a:	d058      	beq.n	59de <_lv_style_list_get_opa+0xc6>
    if(list->style_list == NULL) return LV_RES_INV;
    592c:	6803      	ldr	r3, [r0, #0]
    592e:	2b00      	cmp	r3, #0
    5930:	d057      	beq.n	59e2 <_lv_style_list_get_opa+0xca>
    int16_t weight_goal = attr.full;
    5932:	0a0b      	lsrs	r3, r1, #8
    5934:	4698      	mov	r8, r3
    lv_opa_t value_act = LV_OPA_TRANSP;
    5936:	2200      	movs	r2, #0
    5938:	ab02      	add	r3, sp, #8
    593a:	71da      	strb	r2, [r3, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
    593c:	7902      	ldrb	r2, [r0, #4]
    593e:	2a00      	cmp	r2, #0
    5940:	dd42      	ble.n	59c8 <_lv_style_list_get_opa+0xb0>
    5942:	2400      	movs	r4, #0
    5944:	2601      	movs	r6, #1
    5946:	4276      	negs	r6, r6
    if(list->has_trans && list->skip_trans) id++;
    5948:	2306      	movs	r3, #6
    594a:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
    594c:	4f26      	ldr	r7, [pc, #152]	; (59e8 <_lv_style_list_get_opa+0xd0>)
    594e:	e016      	b.n	597e <_lv_style_list_get_opa+0x66>
    5950:	3101      	adds	r1, #1
    5952:	b2c9      	uxtb	r1, r1
    5954:	e019      	b.n	598a <_lv_style_list_get_opa+0x72>
            *res = value_act;
    5956:	ab02      	add	r3, sp, #8
    5958:	3307      	adds	r3, #7
    595a:	781b      	ldrb	r3, [r3, #0]
    595c:	464a      	mov	r2, r9
    595e:	7013      	strb	r3, [r2, #0]
            return LV_RES_OK;
    5960:	2001      	movs	r0, #1
    5962:	e036      	b.n	59d2 <_lv_style_list_get_opa+0xba>
        else if(weight_act > weight) {
    5964:	42b3      	cmp	r3, r6
    5966:	dd05      	ble.n	5974 <_lv_style_list_get_opa+0x5c>
            *res = value_act;
    5968:	ab02      	add	r3, sp, #8
    596a:	3307      	adds	r3, #7
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	464a      	mov	r2, r9
    5970:	7013      	strb	r3, [r2, #0]
            weight =  weight_act;
    5972:	0006      	movs	r6, r0
    5974:	3401      	adds	r4, #1
    5976:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    5978:	792a      	ldrb	r2, [r5, #4]
    597a:	4294      	cmp	r4, r2
    597c:	da26      	bge.n	59cc <_lv_style_list_get_opa+0xb4>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    597e:	b2e1      	uxtb	r1, r4
    5980:	796b      	ldrb	r3, [r5, #5]
    5982:	4650      	mov	r0, sl
    5984:	4003      	ands	r3, r0
    5986:	2b06      	cmp	r3, #6
    5988:	d0e2      	beq.n	5950 <_lv_style_list_get_opa+0x38>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    598a:	2000      	movs	r0, #0
    598c:	2a00      	cmp	r2, #0
    598e:	d004      	beq.n	599a <_lv_style_list_get_opa+0x82>
    5990:	4291      	cmp	r1, r2
    5992:	d202      	bcs.n	599a <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
    5994:	0089      	lsls	r1, r1, #2
    5996:	682b      	ldr	r3, [r5, #0]
    5998:	58c8      	ldr	r0, [r1, r3]
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
    599a:	ab02      	add	r3, sp, #8
    599c:	1dda      	adds	r2, r3, #7
    599e:	9901      	ldr	r1, [sp, #4]
    59a0:	47b8      	blx	r7
    59a2:	0003      	movs	r3, r0
        if(weight_act == weight_goal) {
    59a4:	4580      	cmp	r8, r0
    59a6:	d0d6      	beq.n	5956 <_lv_style_list_get_opa+0x3e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    59a8:	796a      	ldrb	r2, [r5, #5]
    59aa:	0791      	lsls	r1, r2, #30
    59ac:	d5da      	bpl.n	5964 <_lv_style_list_get_opa+0x4c>
    59ae:	2800      	cmp	r0, #0
    59b0:	dbd8      	blt.n	5964 <_lv_style_list_get_opa+0x4c>
    59b2:	2c00      	cmp	r4, #0
    59b4:	d1d6      	bne.n	5964 <_lv_style_list_get_opa+0x4c>
    59b6:	0752      	lsls	r2, r2, #29
    59b8:	d4d4      	bmi.n	5964 <_lv_style_list_get_opa+0x4c>
            *res = value_act;
    59ba:	ab02      	add	r3, sp, #8
    59bc:	3307      	adds	r3, #7
    59be:	781b      	ldrb	r3, [r3, #0]
    59c0:	464a      	mov	r2, r9
    59c2:	7013      	strb	r3, [r2, #0]
            return LV_RES_OK;
    59c4:	2001      	movs	r0, #1
    59c6:	e004      	b.n	59d2 <_lv_style_list_get_opa+0xba>
    int16_t weight = -1;
    59c8:	2601      	movs	r6, #1
    59ca:	4276      	negs	r6, r6
    if(weight >= 0)  return LV_RES_OK;
    59cc:	43f0      	mvns	r0, r6
    59ce:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
    59d0:	0bc0      	lsrs	r0, r0, #15
}
    59d2:	b004      	add	sp, #16
    59d4:	bc1c      	pop	{r2, r3, r4}
    59d6:	4690      	mov	r8, r2
    59d8:	4699      	mov	r9, r3
    59da:	46a2      	mov	sl, r4
    59dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(list == NULL) return LV_RES_INV;
    59de:	2000      	movs	r0, #0
    59e0:	e7f7      	b.n	59d2 <_lv_style_list_get_opa+0xba>
    if(list->style_list == NULL) return LV_RES_INV;
    59e2:	2000      	movs	r0, #0
    59e4:	e7f5      	b.n	59d2 <_lv_style_list_get_opa+0xba>
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	000052fd 	.word	0x000052fd

000059ec <_lv_style_list_get_ptr>:
{
    59ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ee:	46d6      	mov	lr, sl
    59f0:	464f      	mov	r7, r9
    59f2:	4646      	mov	r6, r8
    59f4:	b5c0      	push	{r6, r7, lr}
    59f6:	b084      	sub	sp, #16
    59f8:	0005      	movs	r5, r0
    59fa:	9101      	str	r1, [sp, #4]
    59fc:	0017      	movs	r7, r2
    if(list == NULL) return LV_RES_INV;
    59fe:	2800      	cmp	r0, #0
    5a00:	d04c      	beq.n	5a9c <_lv_style_list_get_ptr+0xb0>
    if(list->style_list == NULL) return LV_RES_INV;
    5a02:	6803      	ldr	r3, [r0, #0]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d04b      	beq.n	5aa0 <_lv_style_list_get_ptr+0xb4>
    int16_t weight_goal = attr.full;
    5a08:	0a0b      	lsrs	r3, r1, #8
    5a0a:	4698      	mov	r8, r3
    for(ci = 0; ci < list->style_cnt; ci++) {
    5a0c:	7902      	ldrb	r2, [r0, #4]
    5a0e:	2a00      	cmp	r2, #0
    5a10:	dd39      	ble.n	5a86 <_lv_style_list_get_ptr+0x9a>
    5a12:	2400      	movs	r4, #0
    5a14:	2601      	movs	r6, #1
    5a16:	4276      	negs	r6, r6
    if(list->has_trans && list->skip_trans) id++;
    5a18:	2306      	movs	r3, #6
    5a1a:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
    5a1c:	4b21      	ldr	r3, [pc, #132]	; (5aa4 <_lv_style_list_get_ptr+0xb8>)
    5a1e:	4699      	mov	r9, r3
    5a20:	e010      	b.n	5a44 <_lv_style_list_get_ptr+0x58>
    5a22:	3101      	adds	r1, #1
    5a24:	b2c9      	uxtb	r1, r1
    5a26:	e013      	b.n	5a50 <_lv_style_list_get_ptr+0x64>
            *res = value_act;
    5a28:	9b03      	ldr	r3, [sp, #12]
    5a2a:	603b      	str	r3, [r7, #0]
            return LV_RES_OK;
    5a2c:	2001      	movs	r0, #1
    5a2e:	e02f      	b.n	5a90 <_lv_style_list_get_ptr+0xa4>
        else if(weight_act > weight) {
    5a30:	42b3      	cmp	r3, r6
    5a32:	dd02      	ble.n	5a3a <_lv_style_list_get_ptr+0x4e>
            *res = value_act;
    5a34:	9b03      	ldr	r3, [sp, #12]
    5a36:	603b      	str	r3, [r7, #0]
            weight =  weight_act;
    5a38:	0006      	movs	r6, r0
    5a3a:	3401      	adds	r4, #1
    5a3c:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    5a3e:	792a      	ldrb	r2, [r5, #4]
    5a40:	4294      	cmp	r4, r2
    5a42:	da22      	bge.n	5a8a <_lv_style_list_get_ptr+0x9e>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    5a44:	b2e1      	uxtb	r1, r4
    5a46:	796b      	ldrb	r3, [r5, #5]
    5a48:	4650      	mov	r0, sl
    5a4a:	4003      	ands	r3, r0
    5a4c:	2b06      	cmp	r3, #6
    5a4e:	d0e8      	beq.n	5a22 <_lv_style_list_get_ptr+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    5a50:	2000      	movs	r0, #0
    5a52:	2a00      	cmp	r2, #0
    5a54:	d004      	beq.n	5a60 <_lv_style_list_get_ptr+0x74>
    5a56:	4291      	cmp	r1, r2
    5a58:	d202      	bcs.n	5a60 <_lv_style_list_get_ptr+0x74>
    return list->style_list[id];
    5a5a:	0089      	lsls	r1, r1, #2
    5a5c:	682b      	ldr	r3, [r5, #0]
    5a5e:	58c8      	ldr	r0, [r1, r3]
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
    5a60:	aa03      	add	r2, sp, #12
    5a62:	9901      	ldr	r1, [sp, #4]
    5a64:	47c8      	blx	r9
    5a66:	0003      	movs	r3, r0
        if(weight_act == weight_goal) {
    5a68:	4580      	cmp	r8, r0
    5a6a:	d0dd      	beq.n	5a28 <_lv_style_list_get_ptr+0x3c>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    5a6c:	796a      	ldrb	r2, [r5, #5]
    5a6e:	0791      	lsls	r1, r2, #30
    5a70:	d5de      	bpl.n	5a30 <_lv_style_list_get_ptr+0x44>
    5a72:	2800      	cmp	r0, #0
    5a74:	dbdc      	blt.n	5a30 <_lv_style_list_get_ptr+0x44>
    5a76:	2c00      	cmp	r4, #0
    5a78:	d1da      	bne.n	5a30 <_lv_style_list_get_ptr+0x44>
    5a7a:	0752      	lsls	r2, r2, #29
    5a7c:	d4d8      	bmi.n	5a30 <_lv_style_list_get_ptr+0x44>
            *res = value_act;
    5a7e:	9b03      	ldr	r3, [sp, #12]
    5a80:	603b      	str	r3, [r7, #0]
            return LV_RES_OK;
    5a82:	2001      	movs	r0, #1
    5a84:	e004      	b.n	5a90 <_lv_style_list_get_ptr+0xa4>
    int16_t weight = -1;
    5a86:	2601      	movs	r6, #1
    5a88:	4276      	negs	r6, r6
    if(weight >= 0)  return LV_RES_OK;
    5a8a:	43f0      	mvns	r0, r6
    5a8c:	b280      	uxth	r0, r0
    if(list == NULL) return LV_RES_INV;
    5a8e:	0bc0      	lsrs	r0, r0, #15
}
    5a90:	b004      	add	sp, #16
    5a92:	bc1c      	pop	{r2, r3, r4}
    5a94:	4690      	mov	r8, r2
    5a96:	4699      	mov	r9, r3
    5a98:	46a2      	mov	sl, r4
    5a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(list == NULL) return LV_RES_INV;
    5a9c:	2000      	movs	r0, #0
    5a9e:	e7f7      	b.n	5a90 <_lv_style_list_get_ptr+0xa4>
    if(list->style_list == NULL) return LV_RES_INV;
    5aa0:	2000      	movs	r0, #0
    5aa2:	e7f5      	b.n	5a90 <_lv_style_list_get_ptr+0xa4>
    5aa4:	000054b7 	.word	0x000054b7

00005aa8 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aaa:	1c05      	adds	r5, r0, #0
    5aac:	06cb      	lsls	r3, r1, #27
    5aae:	0edb      	lsrs	r3, r3, #27
    5ab0:	054f      	lsls	r7, r1, #21
    5ab2:	0ebf      	lsrs	r7, r7, #26
    5ab4:	0409      	lsls	r1, r1, #16
    5ab6:	0ec9      	lsrs	r1, r1, #27

    if(opa <= LV_OPA_MIN) return bg;
    5ab8:	2a05      	cmp	r2, #5
    5aba:	d93d      	bls.n	5b38 <color_blend_true_color_additive+0x90>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
    5abc:	0428      	lsls	r0, r5, #16
    5abe:	0ec0      	lsrs	r0, r0, #27
    5ac0:	1840      	adds	r0, r0, r1
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
    5ac2:	281f      	cmp	r0, #31
    5ac4:	d900      	bls.n	5ac8 <color_blend_true_color_additive+0x20>
    5ac6:	201f      	movs	r0, #31
    5ac8:	241f      	movs	r4, #31
    5aca:	4004      	ands	r4, r0
    5acc:	46a4      	mov	ip, r4

#if LV_COLOR_DEPTH == 8
    fg.ch.green = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    5ace:	056e      	lsls	r6, r5, #21
    5ad0:	0eb6      	lsrs	r6, r6, #26
    5ad2:	19f6      	adds	r6, r6, r7
    fg.ch.green = LV_MATH_MIN(tmp, 63);
    5ad4:	2e3f      	cmp	r6, #63	; 0x3f
    5ad6:	d900      	bls.n	5ada <color_blend_true_color_additive+0x32>
    5ad8:	263f      	movs	r6, #63	; 0x3f
    5ada:	243f      	movs	r4, #63	; 0x3f
    5adc:	4026      	ands	r6, r4

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
    5ade:	06ed      	lsls	r5, r5, #27
    5ae0:	0eed      	lsrs	r5, r5, #27
    5ae2:	18ed      	adds	r5, r5, r3
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
    5ae4:	2d1f      	cmp	r5, #31
    5ae6:	d900      	bls.n	5aea <color_blend_true_color_additive+0x42>
    5ae8:	251f      	movs	r5, #31
    5aea:	241f      	movs	r4, #31
    5aec:	402c      	ands	r4, r5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
    5aee:	2aff      	cmp	r2, #255	; 0xff
    5af0:	d027      	beq.n	5b42 <color_blend_true_color_additive+0x9a>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    5af2:	25ff      	movs	r5, #255	; 0xff
    5af4:	1aad      	subs	r5, r5, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    5af6:	4354      	muls	r4, r2
    5af8:	436b      	muls	r3, r5
    5afa:	18e3      	adds	r3, r4, r3
    5afc:	0218      	lsls	r0, r3, #8
    5afe:	18c0      	adds	r0, r0, r3
    5b00:	01c0      	lsls	r0, r0, #7
    5b02:	18c0      	adds	r0, r0, r3
    5b04:	0100      	lsls	r0, r0, #4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    5b06:	4356      	muls	r6, r2
    5b08:	436f      	muls	r7, r5
    5b0a:	19f7      	adds	r7, r6, r7
    5b0c:	023e      	lsls	r6, r7, #8
    5b0e:	19f6      	adds	r6, r6, r7
    5b10:	01f6      	lsls	r6, r6, #7
    5b12:	19f6      	adds	r6, r6, r7
    5b14:	00f6      	lsls	r6, r6, #3
    5b16:	0eb6      	lsrs	r6, r6, #26
    5b18:	0176      	lsls	r6, r6, #5
    5b1a:	0ec0      	lsrs	r0, r0, #27
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    5b1c:	4663      	mov	r3, ip
    5b1e:	435a      	muls	r2, r3
    5b20:	4369      	muls	r1, r5
    5b22:	1852      	adds	r2, r2, r1
    5b24:	0211      	lsls	r1, r2, #8
    5b26:	1889      	adds	r1, r1, r2
    5b28:	01c9      	lsls	r1, r1, #7
    5b2a:	188a      	adds	r2, r1, r2
    5b2c:	0dd2      	lsrs	r2, r2, #23
    5b2e:	b2d2      	uxtb	r2, r2
    5b30:	02d2      	lsls	r2, r2, #11
    5b32:	4330      	orrs	r0, r6
    5b34:	4310      	orrs	r0, r2

    return lv_color_mix(fg, bg, opa);
}
    5b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    5b38:	0178      	lsls	r0, r7, #5
    5b3a:	02c9      	lsls	r1, r1, #11
    5b3c:	4318      	orrs	r0, r3
    5b3e:	4308      	orrs	r0, r1
    5b40:	e7f9      	b.n	5b36 <color_blend_true_color_additive+0x8e>
    if(opa == LV_OPA_COVER) return fg;
    5b42:	0170      	lsls	r0, r6, #5
    5b44:	4663      	mov	r3, ip
    5b46:	02da      	lsls	r2, r3, #11
    5b48:	4320      	orrs	r0, r4
    5b4a:	4310      	orrs	r0, r2
    5b4c:	e7f3      	b.n	5b36 <color_blend_true_color_additive+0x8e>

00005b4e <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    5b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b50:	46c6      	mov	lr, r8
    5b52:	b500      	push	{lr}
    5b54:	1c05      	adds	r5, r0, #0
    5b56:	06c8      	lsls	r0, r1, #27
    5b58:	0ec3      	lsrs	r3, r0, #27
    5b5a:	4698      	mov	r8, r3
    5b5c:	054f      	lsls	r7, r1, #21
    5b5e:	0ebf      	lsrs	r7, r7, #26
    5b60:	0409      	lsls	r1, r1, #16
    5b62:	0ec9      	lsrs	r1, r1, #27

    if(opa <= LV_OPA_MIN) return bg;
    5b64:	2a05      	cmp	r2, #5
    5b66:	d941      	bls.n	5bec <color_blend_true_color_subtractive+0x9e>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
    5b68:	0428      	lsls	r0, r5, #16
    5b6a:	0ec0      	lsrs	r0, r0, #27
    5b6c:	1a08      	subs	r0, r1, r0
    fg.ch.red = LV_MATH_MAX(tmp, 0);
    5b6e:	43c3      	mvns	r3, r0
    5b70:	17db      	asrs	r3, r3, #31
    5b72:	4018      	ands	r0, r3
    5b74:	231f      	movs	r3, #31
    5b76:	4003      	ands	r3, r0
    5b78:	469c      	mov	ip, r3

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    5b7a:	056e      	lsls	r6, r5, #21
    5b7c:	0eb6      	lsrs	r6, r6, #26
    5b7e:	1bb8      	subs	r0, r7, r6
    fg.ch.green = LV_MATH_MAX(tmp, 0);
    5b80:	43c3      	mvns	r3, r0
    5b82:	17db      	asrs	r3, r3, #31
    5b84:	4018      	ands	r0, r3
    5b86:	263f      	movs	r6, #63	; 0x3f
    5b88:	4006      	ands	r6, r0
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    5b8a:	06ed      	lsls	r5, r5, #27
    5b8c:	0eed      	lsrs	r5, r5, #27
    5b8e:	4643      	mov	r3, r8
    5b90:	1b5d      	subs	r5, r3, r5
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
    5b92:	43e8      	mvns	r0, r5
    5b94:	17c0      	asrs	r0, r0, #31
    5b96:	4005      	ands	r5, r0
    5b98:	241f      	movs	r4, #31
    5b9a:	402c      	ands	r4, r5

    if(opa == LV_OPA_COVER) return fg;
    5b9c:	2aff      	cmp	r2, #255	; 0xff
    5b9e:	d02b      	beq.n	5bf8 <color_blend_true_color_subtractive+0xaa>
    5ba0:	25ff      	movs	r5, #255	; 0xff
    5ba2:	1aad      	subs	r5, r5, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    5ba4:	4354      	muls	r4, r2
    5ba6:	4640      	mov	r0, r8
    5ba8:	4368      	muls	r0, r5
    5baa:	1824      	adds	r4, r4, r0
    5bac:	0220      	lsls	r0, r4, #8
    5bae:	1900      	adds	r0, r0, r4
    5bb0:	01c0      	lsls	r0, r0, #7
    5bb2:	1900      	adds	r0, r0, r4
    5bb4:	0100      	lsls	r0, r0, #4
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    5bb6:	4356      	muls	r6, r2
    5bb8:	436f      	muls	r7, r5
    5bba:	19f7      	adds	r7, r6, r7
    5bbc:	023e      	lsls	r6, r7, #8
    5bbe:	19f6      	adds	r6, r6, r7
    5bc0:	01f6      	lsls	r6, r6, #7
    5bc2:	19f6      	adds	r6, r6, r7
    5bc4:	00f6      	lsls	r6, r6, #3
    5bc6:	0eb6      	lsrs	r6, r6, #26
    5bc8:	0176      	lsls	r6, r6, #5
    5bca:	0ec0      	lsrs	r0, r0, #27
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    5bcc:	4663      	mov	r3, ip
    5bce:	435a      	muls	r2, r3
    5bd0:	4369      	muls	r1, r5
    5bd2:	1852      	adds	r2, r2, r1
    5bd4:	0211      	lsls	r1, r2, #8
    5bd6:	1889      	adds	r1, r1, r2
    5bd8:	01c9      	lsls	r1, r1, #7
    5bda:	188a      	adds	r2, r1, r2
    5bdc:	0dd2      	lsrs	r2, r2, #23
    5bde:	b2d2      	uxtb	r2, r2
    5be0:	02d2      	lsls	r2, r2, #11
    5be2:	4330      	orrs	r0, r6
    5be4:	4310      	orrs	r0, r2

    return lv_color_mix(fg, bg, opa);
}
    5be6:	bc04      	pop	{r2}
    5be8:	4690      	mov	r8, r2
    5bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    5bec:	0178      	lsls	r0, r7, #5
    5bee:	02c9      	lsls	r1, r1, #11
    5bf0:	4303      	orrs	r3, r0
    5bf2:	0018      	movs	r0, r3
    5bf4:	4308      	orrs	r0, r1
    5bf6:	e7f6      	b.n	5be6 <color_blend_true_color_subtractive+0x98>
    if(opa == LV_OPA_COVER) return fg;
    5bf8:	0176      	lsls	r6, r6, #5
    5bfa:	4663      	mov	r3, ip
    5bfc:	02d8      	lsls	r0, r3, #11
    5bfe:	4334      	orrs	r4, r6
    5c00:	4320      	orrs	r0, r4
    5c02:	e7f0      	b.n	5be6 <color_blend_true_color_subtractive+0x98>

00005c04 <_lv_blend_fill>:
{
    5c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c06:	46de      	mov	lr, fp
    5c08:	4657      	mov	r7, sl
    5c0a:	464e      	mov	r6, r9
    5c0c:	4645      	mov	r5, r8
    5c0e:	b5e0      	push	{r5, r6, r7, lr}
    5c10:	b093      	sub	sp, #76	; 0x4c
    5c12:	0004      	movs	r4, r0
    5c14:	000d      	movs	r5, r1
    5c16:	4669      	mov	r1, sp
    5c18:	828a      	strh	r2, [r1, #20]
    5c1a:	9306      	str	r3, [sp, #24]
    5c1c:	ab1c      	add	r3, sp, #112	; 0x70
    5c1e:	781f      	ldrb	r7, [r3, #0]
    5c20:	ab1d      	add	r3, sp, #116	; 0x74
    5c22:	781b      	ldrb	r3, [r3, #0]
    5c24:	469b      	mov	fp, r3
    5c26:	ab1e      	add	r3, sp, #120	; 0x78
    5c28:	781e      	ldrb	r6, [r3, #0]
    if(opa < LV_OPA_MIN) return;
    5c2a:	465b      	mov	r3, fp
    5c2c:	2b04      	cmp	r3, #4
    5c2e:	d901      	bls.n	5c34 <_lv_blend_fill+0x30>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    5c30:	2f00      	cmp	r7, #0
    5c32:	d106      	bne.n	5c42 <_lv_blend_fill+0x3e>
}
    5c34:	b013      	add	sp, #76	; 0x4c
    5c36:	bc3c      	pop	{r2, r3, r4, r5}
    5c38:	4690      	mov	r8, r2
    5c3a:	4699      	mov	r9, r3
    5c3c:	46a2      	mov	sl, r4
    5c3e:	46ab      	mov	fp, r5
    5c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    5c42:	4bbf      	ldr	r3, [pc, #764]	; (5f40 <_lv_blend_fill+0x33c>)
    5c44:	4798      	blx	r3
    5c46:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    5c48:	4bbe      	ldr	r3, [pc, #760]	; (5f44 <_lv_blend_fill+0x340>)
    5c4a:	4798      	blx	r3
    5c4c:	4680      	mov	r8, r0
    lv_color_t * disp_buf = vdb->buf_act;
    5c4e:	6883      	ldr	r3, [r0, #8]
    5c50:	9304      	str	r3, [sp, #16]
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
    5c52:	002a      	movs	r2, r5
    5c54:	0021      	movs	r1, r4
    5c56:	a810      	add	r0, sp, #64	; 0x40
    5c58:	4bbb      	ldr	r3, [pc, #748]	; (5f48 <_lv_blend_fill+0x344>)
    5c5a:	4798      	blx	r3
    if(!is_common) return;
    5c5c:	2800      	cmp	r0, #0
    5c5e:	d0e9      	beq.n	5c34 <_lv_blend_fill+0x30>
    draw_area.x1 -= disp_area->x1;
    5c60:	4643      	mov	r3, r8
    5c62:	8a1a      	ldrh	r2, [r3, #16]
    5c64:	ab10      	add	r3, sp, #64	; 0x40
    5c66:	8819      	ldrh	r1, [r3, #0]
    5c68:	1a89      	subs	r1, r1, r2
    5c6a:	b289      	uxth	r1, r1
    5c6c:	910b      	str	r1, [sp, #44]	; 0x2c
    5c6e:	468c      	mov	ip, r1
    5c70:	b208      	sxth	r0, r1
    5c72:	900a      	str	r0, [sp, #40]	; 0x28
    5c74:	8018      	strh	r0, [r3, #0]
    draw_area.y1 -= disp_area->y1;
    5c76:	4640      	mov	r0, r8
    5c78:	8a41      	ldrh	r1, [r0, #18]
    5c7a:	885d      	ldrh	r5, [r3, #2]
    5c7c:	1a6d      	subs	r5, r5, r1
    5c7e:	b22d      	sxth	r5, r5
    5c80:	805d      	strh	r5, [r3, #2]
    draw_area.x2 -= disp_area->x1;
    5c82:	8898      	ldrh	r0, [r3, #4]
    5c84:	1a80      	subs	r0, r0, r2
    5c86:	b280      	uxth	r0, r0
    5c88:	8098      	strh	r0, [r3, #4]
    draw_area.y2 -= disp_area->y1;
    5c8a:	88da      	ldrh	r2, [r3, #6]
    5c8c:	1a52      	subs	r2, r2, r1
    5c8e:	b212      	sxth	r2, r2
    5c90:	4691      	mov	r9, r2
    5c92:	80da      	strh	r2, [r3, #6]
    if(mask && disp->driver.antialiasing == 0)
    5c94:	9a06      	ldr	r2, [sp, #24]
    5c96:	2a00      	cmp	r2, #0
    5c98:	d018      	beq.n	5ccc <_lv_blend_fill+0xc8>
    5c9a:	4653      	mov	r3, sl
    5c9c:	7a1b      	ldrb	r3, [r3, #8]
    5c9e:	07db      	lsls	r3, r3, #31
    5ca0:	d414      	bmi.n	5ccc <_lv_blend_fill+0xc8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    5ca2:	1c41      	adds	r1, r0, #1
    5ca4:	4663      	mov	r3, ip
    5ca6:	1ac9      	subs	r1, r1, r3
    5ca8:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    5caa:	2900      	cmp	r1, #0
    5cac:	dd0e      	ble.n	5ccc <_lv_blend_fill+0xc8>
    5cae:	0013      	movs	r3, r2
    5cb0:	4694      	mov	ip, r2
    5cb2:	4461      	add	r1, ip
    5cb4:	2480      	movs	r4, #128	; 0x80
    5cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5cb8:	4694      	mov	ip, r2
    5cba:	781a      	ldrb	r2, [r3, #0]
    5cbc:	4294      	cmp	r4, r2
    5cbe:	4192      	sbcs	r2, r2
    5cc0:	701a      	strb	r2, [r3, #0]
    5cc2:	3301      	adds	r3, #1
    5cc4:	428b      	cmp	r3, r1
    5cc6:	d1f8      	bne.n	5cba <_lv_blend_fill+0xb6>
    5cc8:	4663      	mov	r3, ip
    5cca:	930a      	str	r3, [sp, #40]	; 0x28
    if(disp->driver.set_px_cb) {
    5ccc:	4653      	mov	r3, sl
    5cce:	695b      	ldr	r3, [r3, #20]
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d100      	bne.n	5cd6 <_lv_blend_fill+0xd2>
    5cd4:	e08c      	b.n	5df0 <_lv_blend_fill+0x1ec>
    5cd6:	466b      	mov	r3, sp
    5cd8:	8a9e      	ldrh	r6, [r3, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    5cda:	4b99      	ldr	r3, [pc, #612]	; (5f40 <_lv_blend_fill+0x33c>)
    5cdc:	4798      	blx	r3
    5cde:	0005      	movs	r5, r0
    5ce0:	4643      	mov	r3, r8
    5ce2:	8a9b      	ldrh	r3, [r3, #20]
    5ce4:	3301      	adds	r3, #1
    5ce6:	4642      	mov	r2, r8
    5ce8:	8a12      	ldrh	r2, [r2, #16]
    5cea:	1a9b      	subs	r3, r3, r2
    5cec:	b21b      	sxth	r3, r3
    5cee:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    5cf0:	2f01      	cmp	r7, #1
    5cf2:	d046      	beq.n	5d82 <_lv_blend_fill+0x17e>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    5cf4:	aa10      	add	r2, sp, #64	; 0x40
    5cf6:	2300      	movs	r3, #0
    5cf8:	5ed1      	ldrsh	r1, [r2, r3]
    5cfa:	9b06      	ldr	r3, [sp, #24]
    5cfc:	1a5b      	subs	r3, r3, r1
    5cfe:	4698      	mov	r8, r3
    5d00:	8893      	ldrh	r3, [r2, #4]
    5d02:	3301      	adds	r3, #1
    5d04:	1a5b      	subs	r3, r3, r1
    5d06:	b21b      	sxth	r3, r3
    5d08:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5d0a:	2102      	movs	r1, #2
    5d0c:	5e53      	ldrsh	r3, [r2, r1]
    5d0e:	0019      	movs	r1, r3
    5d10:	9307      	str	r3, [sp, #28]
    5d12:	2306      	movs	r3, #6
    5d14:	5ed3      	ldrsh	r3, [r2, r3]
    5d16:	4299      	cmp	r1, r3
    5d18:	dd00      	ble.n	5d1c <_lv_blend_fill+0x118>
    5d1a:	e78b      	b.n	5c34 <_lv_blend_fill+0x30>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    5d1c:	af10      	add	r7, sp, #64	; 0x40
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    5d1e:	ab01      	add	r3, sp, #4
    5d20:	469a      	mov	sl, r3
    5d22:	46b1      	mov	r9, r6
    5d24:	4646      	mov	r6, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    5d26:	2300      	movs	r3, #0
    5d28:	5efc      	ldrsh	r4, [r7, r3]
    5d2a:	2204      	movs	r2, #4
    5d2c:	5ebb      	ldrsh	r3, [r7, r2]
    5d2e:	429c      	cmp	r4, r3
    5d30:	dc1b      	bgt.n	5d6a <_lv_blend_fill+0x166>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    5d32:	466b      	mov	r3, sp
    5d34:	221c      	movs	r2, #28
    5d36:	5e9b      	ldrsh	r3, [r3, r2]
    5d38:	4698      	mov	r8, r3
    5d3a:	9606      	str	r6, [sp, #24]
    5d3c:	b223      	sxth	r3, r4
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    5d3e:	9a06      	ldr	r2, [sp, #24]
    5d40:	5d12      	ldrb	r2, [r2, r4]
    5d42:	4659      	mov	r1, fp
    5d44:	434a      	muls	r2, r1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    5d46:	0a12      	lsrs	r2, r2, #8
    5d48:	9202      	str	r2, [sp, #8]
    5d4a:	4652      	mov	r2, sl
    5d4c:	4649      	mov	r1, r9
    5d4e:	8011      	strh	r1, [r2, #0]
    5d50:	4642      	mov	r2, r8
    5d52:	9200      	str	r2, [sp, #0]
    5d54:	9a05      	ldr	r2, [sp, #20]
    5d56:	9904      	ldr	r1, [sp, #16]
    5d58:	0028      	movs	r0, r5
    5d5a:	696e      	ldr	r6, [r5, #20]
    5d5c:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    5d5e:	3401      	adds	r4, #1
    5d60:	2204      	movs	r2, #4
    5d62:	5ebb      	ldrsh	r3, [r7, r2]
    5d64:	429c      	cmp	r4, r3
    5d66:	dde9      	ble.n	5d3c <_lv_blend_fill+0x138>
    5d68:	9e06      	ldr	r6, [sp, #24]
    5d6a:	9b08      	ldr	r3, [sp, #32]
    5d6c:	469c      	mov	ip, r3
    5d6e:	4466      	add	r6, ip
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5d70:	9b07      	ldr	r3, [sp, #28]
    5d72:	3301      	adds	r3, #1
    5d74:	001a      	movs	r2, r3
    5d76:	9307      	str	r3, [sp, #28]
    5d78:	2106      	movs	r1, #6
    5d7a:	5e7b      	ldrsh	r3, [r7, r1]
    5d7c:	429a      	cmp	r2, r3
    5d7e:	ddd2      	ble.n	5d26 <_lv_blend_fill+0x122>
    5d80:	e758      	b.n	5c34 <_lv_blend_fill+0x30>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5d82:	ab10      	add	r3, sp, #64	; 0x40
    5d84:	2102      	movs	r1, #2
    5d86:	5e5a      	ldrsh	r2, [r3, r1]
    5d88:	4692      	mov	sl, r2
    5d8a:	2206      	movs	r2, #6
    5d8c:	5e9b      	ldrsh	r3, [r3, r2]
    5d8e:	459a      	cmp	sl, r3
    5d90:	dd00      	ble.n	5d94 <_lv_blend_fill+0x190>
    5d92:	e74f      	b.n	5c34 <_lv_blend_fill+0x30>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    5d94:	ac10      	add	r4, sp, #64	; 0x40
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
    5d96:	ab01      	add	r3, sp, #4
    5d98:	4699      	mov	r9, r3
    5d9a:	46b0      	mov	r8, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    5d9c:	2300      	movs	r3, #0
    5d9e:	5ee7      	ldrsh	r7, [r4, r3]
    5da0:	2204      	movs	r2, #4
    5da2:	5ea3      	ldrsh	r3, [r4, r2]
    5da4:	429f      	cmp	r7, r3
    5da6:	dc1b      	bgt.n	5de0 <_lv_blend_fill+0x1dc>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
    5da8:	4653      	mov	r3, sl
    5daa:	b21e      	sxth	r6, r3
    5dac:	4642      	mov	r2, r8
    5dae:	4669      	mov	r1, sp
    5db0:	830a      	strh	r2, [r1, #24]
    5db2:	46b0      	mov	r8, r6
    5db4:	b23b      	sxth	r3, r7
    5db6:	465a      	mov	r2, fp
    5db8:	9202      	str	r2, [sp, #8]
    5dba:	464a      	mov	r2, r9
    5dbc:	4669      	mov	r1, sp
    5dbe:	8b09      	ldrh	r1, [r1, #24]
    5dc0:	8011      	strh	r1, [r2, #0]
    5dc2:	4642      	mov	r2, r8
    5dc4:	9200      	str	r2, [sp, #0]
    5dc6:	9a05      	ldr	r2, [sp, #20]
    5dc8:	9904      	ldr	r1, [sp, #16]
    5dca:	0028      	movs	r0, r5
    5dcc:	696e      	ldr	r6, [r5, #20]
    5dce:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    5dd0:	3701      	adds	r7, #1
    5dd2:	2204      	movs	r2, #4
    5dd4:	5ea3      	ldrsh	r3, [r4, r2]
    5dd6:	429f      	cmp	r7, r3
    5dd8:	ddec      	ble.n	5db4 <_lv_blend_fill+0x1b0>
    5dda:	466b      	mov	r3, sp
    5ddc:	8b1b      	ldrh	r3, [r3, #24]
    5dde:	4698      	mov	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5de0:	2301      	movs	r3, #1
    5de2:	469c      	mov	ip, r3
    5de4:	44e2      	add	sl, ip
    5de6:	2206      	movs	r2, #6
    5de8:	5ea3      	ldrsh	r3, [r4, r2]
    5dea:	459a      	cmp	sl, r3
    5dec:	ddd6      	ble.n	5d9c <_lv_blend_fill+0x198>
    5dee:	e721      	b.n	5c34 <_lv_blend_fill+0x30>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    5df0:	2e00      	cmp	r6, #0
    5df2:	d001      	beq.n	5df8 <_lv_blend_fill+0x1f4>
    5df4:	f000 fc27 	bl	6646 <_lv_blend_fill+0xa42>
    5df8:	466b      	mov	r3, sp
    5dfa:	8a9b      	ldrh	r3, [r3, #20]
    5dfc:	466a      	mov	r2, sp
    5dfe:	8413      	strh	r3, [r2, #32]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    5e00:	4b4f      	ldr	r3, [pc, #316]	; (5f40 <_lv_blend_fill+0x33c>)
    5e02:	4798      	blx	r3
    5e04:	0004      	movs	r4, r0
    5e06:	4643      	mov	r3, r8
    5e08:	8a9d      	ldrh	r5, [r3, #20]
    5e0a:	3501      	adds	r5, #1
    5e0c:	8a1b      	ldrh	r3, [r3, #16]
    5e0e:	1aed      	subs	r5, r5, r3
    5e10:	b22d      	sxth	r5, r5
    5e12:	a810      	add	r0, sp, #64	; 0x40
    5e14:	2300      	movs	r3, #0
    5e16:	5ec1      	ldrsh	r1, [r0, r3]
    5e18:	8883      	ldrh	r3, [r0, #4]
    5e1a:	3301      	adds	r3, #1
    5e1c:	1a5b      	subs	r3, r3, r1
    5e1e:	b21b      	sxth	r3, r3
    5e20:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
    5e22:	930a      	str	r3, [sp, #40]	; 0x28
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    5e24:	2306      	movs	r3, #6
    5e26:	5ec2      	ldrsh	r2, [r0, r3]
    5e28:	2302      	movs	r3, #2
    5e2a:	5ec3      	ldrsh	r3, [r0, r3]
    5e2c:	1c56      	adds	r6, r2, #1
    5e2e:	1af6      	subs	r6, r6, r3
    5e30:	b236      	sxth	r6, r6
    int32_t draw_area_h = lv_area_get_height(draw_area);
    5e32:	960e      	str	r6, [sp, #56]	; 0x38
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    5e34:	930c      	str	r3, [sp, #48]	; 0x30
    5e36:	436b      	muls	r3, r5
    5e38:	185b      	adds	r3, r3, r1
    5e3a:	005b      	lsls	r3, r3, #1
    5e3c:	9904      	ldr	r1, [sp, #16]
    5e3e:	468c      	mov	ip, r1
    5e40:	4463      	add	r3, ip
    5e42:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    5e44:	2f01      	cmp	r7, #1
    5e46:	d01e      	beq.n	5e86 <_lv_blend_fill+0x282>
        if(opa > LV_OPA_MAX) {
    5e48:	465b      	mov	r3, fp
    5e4a:	2bfa      	cmp	r3, #250	; 0xfa
    5e4c:	d900      	bls.n	5e50 <_lv_blend_fill+0x24c>
    5e4e:	e127      	b.n	60a0 <_lv_blend_fill+0x49c>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e52:	4293      	cmp	r3, r2
    5e54:	dd00      	ble.n	5e58 <_lv_blend_fill+0x254>
    5e56:	e6ed      	b.n	5c34 <_lv_blend_fill+0x30>
        last_dest_color.full = disp_buf_first[0].full;
    5e58:	9b07      	ldr	r3, [sp, #28]
    5e5a:	881a      	ldrh	r2, [r3, #0]
    5e5c:	466b      	mov	r3, sp
    5e5e:	8a99      	ldrh	r1, [r3, #20]
    5e60:	040b      	lsls	r3, r1, #16
    5e62:	0edb      	lsrs	r3, r3, #27
    5e64:	9305      	str	r3, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    5e66:	054b      	lsls	r3, r1, #21
    5e68:	0e9b      	lsrs	r3, r3, #26
    5e6a:	9308      	str	r3, [sp, #32]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    5e6c:	06cb      	lsls	r3, r1, #27
    5e6e:	0edb      	lsrs	r3, r3, #27
    5e70:	469c      	mov	ip, r3
                disp_buf_first += disp_w;
    5e72:	006b      	lsls	r3, r5, #1
    5e74:	930f      	str	r3, [sp, #60]	; 0x3c
    5e76:	0013      	movs	r3, r2
    5e78:	2600      	movs	r6, #0
    5e7a:	2000      	movs	r0, #0
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    5e7c:	b289      	uxth	r1, r1
    5e7e:	910e      	str	r1, [sp, #56]	; 0x38
    5e80:	0002      	movs	r2, r0
    5e82:	4699      	mov	r9, r3
    5e84:	e3d0      	b.n	6628 <_lv_blend_fill+0xa24>
        if(opa > LV_OPA_MAX) {
    5e86:	465b      	mov	r3, fp
    5e88:	2bfa      	cmp	r3, #250	; 0xfa
    5e8a:	d924      	bls.n	5ed6 <_lv_blend_fill+0x2d2>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    5e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d004      	beq.n	5e9c <_lv_blend_fill+0x298>
    5e92:	a810      	add	r0, sp, #64	; 0x40
    5e94:	4b2d      	ldr	r3, [pc, #180]	; (5f4c <_lv_blend_fill+0x348>)
    5e96:	4798      	blx	r3
    5e98:	28f0      	cmp	r0, #240	; 0xf0
    5e9a:	d812      	bhi.n	5ec2 <_lv_blend_fill+0x2be>
                disp_buf_first += disp_w;
    5e9c:	006d      	lsls	r5, r5, #1
    5e9e:	2400      	movs	r4, #0
            for(y = 0; y < draw_area_h; y++) {
    5ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	dc00      	bgt.n	5ea8 <_lv_blend_fill+0x2a4>
    5ea6:	e6c5      	b.n	5c34 <_lv_blend_fill+0x30>
                lv_color_fill(disp_buf_first, color, draw_area_w);
    5ea8:	4e29      	ldr	r6, [pc, #164]	; (5f50 <_lv_blend_fill+0x34c>)
    5eaa:	9f07      	ldr	r7, [sp, #28]
    5eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5eae:	466b      	mov	r3, sp
    5eb0:	8c19      	ldrh	r1, [r3, #32]
    5eb2:	0038      	movs	r0, r7
    5eb4:	47b0      	blx	r6
                disp_buf_first += disp_w;
    5eb6:	197f      	adds	r7, r7, r5
            for(y = 0; y < draw_area_h; y++) {
    5eb8:	3401      	adds	r4, #1
    5eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5ebc:	42a3      	cmp	r3, r4
    5ebe:	dcf5      	bgt.n	5eac <_lv_blend_fill+0x2a8>
    5ec0:	e6b8      	b.n	5c34 <_lv_blend_fill+0x30>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
    5ec2:	466b      	mov	r3, sp
    5ec4:	8a9a      	ldrh	r2, [r3, #20]
    5ec6:	801a      	strh	r2, [r3, #0]
    5ec8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    5eca:	ab10      	add	r3, sp, #64	; 0x40
    5ecc:	002a      	movs	r2, r5
    5ece:	9904      	ldr	r1, [sp, #16]
    5ed0:	0020      	movs	r0, r4
    5ed2:	47b0      	blx	r6
    5ed4:	e6ae      	b.n	5c34 <_lv_blend_fill+0x30>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    5ed6:	6a23      	ldr	r3, [r4, #32]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d03d      	beq.n	5f58 <_lv_blend_fill+0x354>
    5edc:	a810      	add	r0, sp, #64	; 0x40
    5ede:	4b1b      	ldr	r3, [pc, #108]	; (5f4c <_lv_blend_fill+0x348>)
    5ee0:	4798      	blx	r3
    5ee2:	28f0      	cmp	r0, #240	; 0xf0
    5ee4:	d938      	bls.n	5f58 <_lv_blend_fill+0x354>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
    5ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ee8:	2b00      	cmp	r3, #0
    5eea:	dd09      	ble.n	5f00 <_lv_blend_fill+0x2fc>
    5eec:	466b      	mov	r3, sp
    5eee:	8a9e      	ldrh	r6, [r3, #20]
    5ef0:	4b18      	ldr	r3, [pc, #96]	; (5f54 <_lv_blend_fill+0x350>)
    5ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5ef4:	0052      	lsls	r2, r2, #1
    5ef6:	189a      	adds	r2, r3, r2
    5ef8:	801e      	strh	r6, [r3, #0]
    5efa:	3302      	adds	r3, #2
    5efc:	4293      	cmp	r3, r2
    5efe:	d1fb      	bne.n	5ef8 <_lv_blend_fill+0x2f4>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5f00:	ab10      	add	r3, sp, #64	; 0x40
    5f02:	2202      	movs	r2, #2
    5f04:	5e9e      	ldrsh	r6, [r3, r2]
    5f06:	2206      	movs	r2, #6
    5f08:	5e9b      	ldrsh	r3, [r3, r2]
    5f0a:	429e      	cmp	r6, r3
    5f0c:	dd00      	ble.n	5f10 <_lv_blend_fill+0x30c>
    5f0e:	e691      	b.n	5c34 <_lv_blend_fill+0x30>
                    disp_buf_first += disp_w;
    5f10:	006d      	lsls	r5, r5, #1
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
    5f12:	4b10      	ldr	r3, [pc, #64]	; (5f54 <_lv_blend_fill+0x350>)
    5f14:	4698      	mov	r8, r3
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5f16:	af10      	add	r7, sp, #64	; 0x40
    5f18:	46aa      	mov	sl, r5
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
    5f1a:	465b      	mov	r3, fp
    5f1c:	9300      	str	r3, [sp, #0]
    5f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5f20:	4642      	mov	r2, r8
    5f22:	9907      	ldr	r1, [sp, #28]
    5f24:	4689      	mov	r9, r1
    5f26:	0020      	movs	r0, r4
    5f28:	6a25      	ldr	r5, [r4, #32]
    5f2a:	47a8      	blx	r5
                    disp_buf_first += disp_w;
    5f2c:	46cc      	mov	ip, r9
    5f2e:	44d4      	add	ip, sl
    5f30:	4663      	mov	r3, ip
    5f32:	9307      	str	r3, [sp, #28]
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    5f34:	3601      	adds	r6, #1
    5f36:	2206      	movs	r2, #6
    5f38:	5ebb      	ldrsh	r3, [r7, r2]
    5f3a:	429e      	cmp	r6, r3
    5f3c:	dded      	ble.n	5f1a <_lv_blend_fill+0x316>
    5f3e:	e679      	b.n	5c34 <_lv_blend_fill+0x30>
    5f40:	00004349 	.word	0x00004349
    5f44:	0000f6a1 	.word	0x0000f6a1
    5f48:	0000fba7 	.word	0x0000fba7
    5f4c:	0000fb8b 	.word	0x0000fb8b
    5f50:	000101cd 	.word	0x000101cd
    5f54:	200026f0 	.word	0x200026f0
            lv_color_t last_dest_color = LV_COLOR_BLACK;
    5f58:	2300      	movs	r3, #0
    5f5a:	466a      	mov	r2, sp
    5f5c:	8313      	strh	r3, [r2, #24]
    5f5e:	8a92      	ldrh	r2, [r2, #20]
    5f60:	06d3      	lsls	r3, r2, #27
    5f62:	0edb      	lsrs	r3, r3, #27
    5f64:	469c      	mov	ip, r3
    5f66:	1c13      	adds	r3, r2, #0
    5f68:	001a      	movs	r2, r3
    5f6a:	0557      	lsls	r7, r2, #21
    5f6c:	0ebf      	lsrs	r7, r7, #26
    5f6e:	041c      	lsls	r4, r3, #16
    5f70:	0ee4      	lsrs	r4, r4, #27
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    5f72:	465b      	mov	r3, fp
    5f74:	4363      	muls	r3, r4
    5f76:	0218      	lsls	r0, r3, #8
    5f78:	18c0      	adds	r0, r0, r3
    5f7a:	01c0      	lsls	r0, r0, #7
    5f7c:	18c0      	adds	r0, r0, r3
    5f7e:	0dc0      	lsrs	r0, r0, #23
    5f80:	231f      	movs	r3, #31
    5f82:	4698      	mov	r8, r3
    5f84:	4018      	ands	r0, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    5f86:	465a      	mov	r2, fp
    5f88:	437a      	muls	r2, r7
    5f8a:	0213      	lsls	r3, r2, #8
    5f8c:	189b      	adds	r3, r3, r2
    5f8e:	01db      	lsls	r3, r3, #7
    5f90:	189a      	adds	r2, r3, r2
    5f92:	00d2      	lsls	r2, r2, #3
    5f94:	0e93      	lsrs	r3, r2, #26
    5f96:	469a      	mov	sl, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    5f98:	4659      	mov	r1, fp
    5f9a:	4663      	mov	r3, ip
    5f9c:	4359      	muls	r1, r3
    5f9e:	020b      	lsls	r3, r1, #8
    5fa0:	185b      	adds	r3, r3, r1
    5fa2:	01db      	lsls	r3, r3, #7
    5fa4:	1859      	adds	r1, r3, r1
    5fa6:	0dc9      	lsrs	r1, r1, #23
    5fa8:	4643      	mov	r3, r8
    5faa:	4019      	ands	r1, r3
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    5fac:	465b      	mov	r3, fp
    5fae:	466a      	mov	r2, sp
    5fb0:	8213      	strh	r3, [r2, #16]
    5fb2:	8a13      	ldrh	r3, [r2, #16]
    5fb4:	435c      	muls	r4, r3
    5fb6:	9405      	str	r4, [sp, #20]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    5fb8:	435f      	muls	r7, r3
    5fba:	9708      	str	r7, [sp, #32]
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    5fbc:	4664      	mov	r4, ip
    5fbe:	435c      	muls	r4, r3
    5fc0:	9409      	str	r4, [sp, #36]	; 0x24
            lv_opa_t opa_inv = 255 - opa;
    5fc2:	465b      	mov	r3, fp
    5fc4:	43df      	mvns	r7, r3
    5fc6:	b2ff      	uxtb	r7, r7
            for(y = 0; y < draw_area_h; y++) {
    5fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5fca:	2b00      	cmp	r3, #0
    5fcc:	dc00      	bgt.n	5fd0 <_lv_blend_fill+0x3cc>
    5fce:	e631      	b.n	5c34 <_lv_blend_fill+0x30>
                disp_buf_first += disp_w;
    5fd0:	006b      	lsls	r3, r5, #1
    5fd2:	930e      	str	r3, [sp, #56]	; 0x38
    5fd4:	1c73      	adds	r3, r6, #1
    5fd6:	930d      	str	r3, [sp, #52]	; 0x34
    5fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5fda:	005b      	lsls	r3, r3, #1
    5fdc:	930f      	str	r3, [sp, #60]	; 0x3c
    5fde:	2301      	movs	r3, #1
    5fe0:	930c      	str	r3, [sp, #48]	; 0x30
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    5fe2:	b2bf      	uxth	r7, r7
    5fe4:	261f      	movs	r6, #31
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    5fe6:	333e      	adds	r3, #62	; 0x3e
    5fe8:	930b      	str	r3, [sp, #44]	; 0x2c
                    disp_buf_first[x] = last_res_color;
    5fea:	4b63      	ldr	r3, [pc, #396]	; (6178 <_lv_blend_fill+0x574>)
    5fec:	4698      	mov	r8, r3
    5fee:	2307      	movs	r3, #7
    5ff0:	4699      	mov	r9, r3
    5ff2:	4652      	mov	r2, sl
    5ff4:	e048      	b.n	6088 <_lv_blend_fill+0x484>
    5ff6:	782b      	ldrb	r3, [r5, #0]
    5ff8:	43b3      	bics	r3, r6
    5ffa:	430b      	orrs	r3, r1
    5ffc:	702b      	strb	r3, [r5, #0]
    5ffe:	9b04      	ldr	r3, [sp, #16]
    6000:	015b      	lsls	r3, r3, #5
    6002:	882f      	ldrh	r7, [r5, #0]
    6004:	4642      	mov	r2, r8
    6006:	4017      	ands	r7, r2
    6008:	433b      	orrs	r3, r7
    600a:	802b      	strh	r3, [r5, #0]
    600c:	00c7      	lsls	r7, r0, #3
    600e:	0a1b      	lsrs	r3, r3, #8
    6010:	464a      	mov	r2, r9
    6012:	4013      	ands	r3, r2
    6014:	431f      	orrs	r7, r3
    6016:	706f      	strb	r7, [r5, #1]
    6018:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w; x++) {
    601a:	4554      	cmp	r4, sl
    601c:	d026      	beq.n	606c <_lv_blend_fill+0x468>
                    if(last_dest_color.full != disp_buf_first[x].full) {
    601e:	0025      	movs	r5, r4
    6020:	466b      	mov	r3, sp
    6022:	8b1b      	ldrh	r3, [r3, #24]
    6024:	8827      	ldrh	r7, [r4, #0]
    6026:	42bb      	cmp	r3, r7
    6028:	d0e5      	beq.n	5ff6 <_lv_blend_fill+0x3f2>
                        last_dest_color = disp_buf_first[x];
    602a:	466b      	mov	r3, sp
    602c:	831f      	strh	r7, [r3, #24]
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    602e:	7860      	ldrb	r0, [r4, #1]
    6030:	08c0      	lsrs	r0, r0, #3
    6032:	4663      	mov	r3, ip
    6034:	4358      	muls	r0, r3
    6036:	9b05      	ldr	r3, [sp, #20]
    6038:	469b      	mov	fp, r3
    603a:	4458      	add	r0, fp
    603c:	0a00      	lsrs	r0, r0, #8
    603e:	4030      	ands	r0, r6
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    6040:	057a      	lsls	r2, r7, #21
    6042:	0e92      	lsrs	r2, r2, #26
    6044:	4663      	mov	r3, ip
    6046:	435a      	muls	r2, r3
    6048:	9b08      	ldr	r3, [sp, #32]
    604a:	469b      	mov	fp, r3
    604c:	445a      	add	r2, fp
    604e:	0a12      	lsrs	r2, r2, #8
    6050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6052:	401a      	ands	r2, r3
    6054:	9204      	str	r2, [sp, #16]
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    6056:	7821      	ldrb	r1, [r4, #0]
    6058:	06c9      	lsls	r1, r1, #27
    605a:	0ec9      	lsrs	r1, r1, #27
    605c:	4663      	mov	r3, ip
    605e:	4359      	muls	r1, r3
    6060:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6062:	469b      	mov	fp, r3
    6064:	4459      	add	r1, fp
    6066:	0a09      	lsrs	r1, r1, #8
    6068:	4031      	ands	r1, r6
    606a:	e7c4      	b.n	5ff6 <_lv_blend_fill+0x3f2>
    606c:	9a04      	ldr	r2, [sp, #16]
    606e:	4667      	mov	r7, ip
                disp_buf_first += disp_w;
    6070:	9b07      	ldr	r3, [sp, #28]
    6072:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    6074:	46a4      	mov	ip, r4
    6076:	4463      	add	r3, ip
    6078:	9307      	str	r3, [sp, #28]
    607a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    607c:	3301      	adds	r3, #1
    607e:	930c      	str	r3, [sp, #48]	; 0x30
            for(y = 0; y < draw_area_h; y++) {
    6080:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    6082:	429c      	cmp	r4, r3
    6084:	d100      	bne.n	6088 <_lv_blend_fill+0x484>
    6086:	e5d5      	b.n	5c34 <_lv_blend_fill+0x30>
                for(x = 0; x < draw_area_w; x++) {
    6088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    608a:	2b00      	cmp	r3, #0
    608c:	ddf0      	ble.n	6070 <_lv_blend_fill+0x46c>
    608e:	9b07      	ldr	r3, [sp, #28]
    6090:	001c      	movs	r4, r3
    6092:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    6094:	46aa      	mov	sl, r5
    6096:	4453      	add	r3, sl
    6098:	9204      	str	r2, [sp, #16]
    609a:	469a      	mov	sl, r3
    609c:	46bc      	mov	ip, r7
    609e:	e7be      	b.n	601e <_lv_blend_fill+0x41a>
            for(y = 0; y < draw_area_h; y++) {
    60a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    60a2:	2b00      	cmp	r3, #0
    60a4:	dc00      	bgt.n	60a8 <_lv_blend_fill+0x4a4>
    60a6:	e5c5      	b.n	5c34 <_lv_blend_fill+0x30>
        int32_t x_end4 = draw_area_w - 4;
    60a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    60aa:	3b04      	subs	r3, #4
    60ac:	9305      	str	r3, [sp, #20]
                disp_buf_first += disp_w;
    60ae:	006b      	lsls	r3, r5, #1
    60b0:	930f      	str	r3, [sp, #60]	; 0x3c
    60b2:	9b06      	ldr	r3, [sp, #24]
    60b4:	9309      	str	r3, [sp, #36]	; 0x24
    60b6:	2300      	movs	r3, #0
    60b8:	930d      	str	r3, [sp, #52]	; 0x34
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    60ba:	466b      	mov	r3, sp
    60bc:	8c1a      	ldrh	r2, [r3, #32]
    60be:	0417      	lsls	r7, r2, #16
    60c0:	0efb      	lsrs	r3, r7, #27
    60c2:	9304      	str	r3, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    60c4:	0553      	lsls	r3, r2, #21
    60c6:	0e9b      	lsrs	r3, r3, #26
    60c8:	469a      	mov	sl, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    60ca:	06d3      	lsls	r3, r2, #27
    60cc:	0edb      	lsrs	r3, r3, #27
    60ce:	469b      	mov	fp, r3
    60d0:	e213      	b.n	64fa <_lv_blend_fill+0x8f6>
                    FILL_NORMAL_MASK_PX(x, color)
    60d2:	466a      	mov	r2, sp
    60d4:	8c12      	ldrh	r2, [r2, #32]
    60d6:	8032      	strh	r2, [r6, #0]
    60d8:	3401      	adds	r4, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    60da:	3301      	adds	r3, #1
    60dc:	4598      	cmp	r8, r3
    60de:	dc01      	bgt.n	60e4 <_lv_blend_fill+0x4e0>
    60e0:	f000 fbe8 	bl	68b4 <_lv_blend_fill+0xcb0>
    60e4:	3602      	adds	r6, #2
    60e6:	07a2      	lsls	r2, r4, #30
    60e8:	d03f      	beq.n	616a <_lv_blend_fill+0x566>
                    FILL_NORMAL_MASK_PX(x, color)
    60ea:	7820      	ldrb	r0, [r4, #0]
    60ec:	2800      	cmp	r0, #0
    60ee:	d0f3      	beq.n	60d8 <_lv_blend_fill+0x4d4>
    60f0:	28ff      	cmp	r0, #255	; 0xff
    60f2:	d0ee      	beq.n	60d2 <_lv_blend_fill+0x4ce>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    60f4:	22ff      	movs	r2, #255	; 0xff
    60f6:	1a15      	subs	r5, r2, r0
    60f8:	9f04      	ldr	r7, [sp, #16]
    60fa:	4347      	muls	r7, r0
    60fc:	7871      	ldrb	r1, [r6, #1]
    60fe:	08c9      	lsrs	r1, r1, #3
    6100:	4369      	muls	r1, r5
    6102:	187f      	adds	r7, r7, r1
    6104:	023a      	lsls	r2, r7, #8
    6106:	19d2      	adds	r2, r2, r7
    6108:	01d2      	lsls	r2, r2, #7
    610a:	19d2      	adds	r2, r2, r7
    610c:	0dd2      	lsrs	r2, r2, #23
    610e:	4649      	mov	r1, r9
    6110:	400a      	ands	r2, r1
    6112:	9206      	str	r2, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6114:	4657      	mov	r7, sl
    6116:	4347      	muls	r7, r0
    6118:	8831      	ldrh	r1, [r6, #0]
    611a:	0549      	lsls	r1, r1, #21
    611c:	0e89      	lsrs	r1, r1, #26
    611e:	4369      	muls	r1, r5
    6120:	187f      	adds	r7, r7, r1
    6122:	0239      	lsls	r1, r7, #8
    6124:	19c9      	adds	r1, r1, r7
    6126:	01c9      	lsls	r1, r1, #7
    6128:	19c9      	adds	r1, r1, r7
    612a:	00c9      	lsls	r1, r1, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    612c:	465f      	mov	r7, fp
    612e:	4378      	muls	r0, r7
    6130:	7837      	ldrb	r7, [r6, #0]
    6132:	06fa      	lsls	r2, r7, #27
    6134:	0ed2      	lsrs	r2, r2, #27
    6136:	4355      	muls	r5, r2
    6138:	1945      	adds	r5, r0, r5
    613a:	0228      	lsls	r0, r5, #8
    613c:	1940      	adds	r0, r0, r5
    613e:	01c0      	lsls	r0, r0, #7
    6140:	1940      	adds	r0, r0, r5
    6142:	0dc0      	lsrs	r0, r0, #23
    6144:	464a      	mov	r2, r9
    6146:	4010      	ands	r0, r2
    6148:	4397      	bics	r7, r2
    614a:	4338      	orrs	r0, r7
    614c:	7030      	strb	r0, [r6, #0]
    614e:	0e89      	lsrs	r1, r1, #26
    6150:	0148      	lsls	r0, r1, #5
    6152:	8831      	ldrh	r1, [r6, #0]
    6154:	4d08      	ldr	r5, [pc, #32]	; (6178 <_lv_blend_fill+0x574>)
    6156:	4029      	ands	r1, r5
    6158:	4301      	orrs	r1, r0
    615a:	8031      	strh	r1, [r6, #0]
    615c:	9a06      	ldr	r2, [sp, #24]
    615e:	00d2      	lsls	r2, r2, #3
    6160:	0549      	lsls	r1, r1, #21
    6162:	0f49      	lsrs	r1, r1, #29
    6164:	430a      	orrs	r2, r1
    6166:	7072      	strb	r2, [r6, #1]
    6168:	e7b6      	b.n	60d8 <_lv_blend_fill+0x4d4>
    616a:	0022      	movs	r2, r4
                for(; x <= x_end4; x += 4) {
    616c:	9905      	ldr	r1, [sp, #20]
    616e:	4299      	cmp	r1, r3
    6170:	db00      	blt.n	6174 <_lv_blend_fill+0x570>
    6172:	e3a4      	b.n	68be <_lv_blend_fill+0xcba>
    6174:	e15e      	b.n	6434 <_lv_blend_fill+0x830>
    6176:	46c0      	nop			; (mov r8, r8)
    6178:	fffff81f 	.word	0xfffff81f
                            disp_buf_first[x] = color;
    617c:	4669      	mov	r1, sp
    617e:	8c09      	ldrh	r1, [r1, #32]
    6180:	8021      	strh	r1, [r4, #0]
                            disp_buf_first[x + 1] = color;
    6182:	8061      	strh	r1, [r4, #2]
                            disp_buf_first[x + 2] = color;
    6184:	80a1      	strh	r1, [r4, #4]
                            disp_buf_first[x + 3] = color;
    6186:	80e1      	strh	r1, [r4, #6]
                    mask32++;
    6188:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
    618a:	3304      	adds	r3, #4
    618c:	3408      	adds	r4, #8
    618e:	9905      	ldr	r1, [sp, #20]
    6190:	4299      	cmp	r1, r3
    6192:	da00      	bge.n	6196 <_lv_blend_fill+0x592>
    6194:	e149      	b.n	642a <_lv_blend_fill+0x826>
                    if(*mask32) {
    6196:	6811      	ldr	r1, [r2, #0]
    6198:	2900      	cmp	r1, #0
    619a:	d0f5      	beq.n	6188 <_lv_blend_fill+0x584>
                        if((*mask32) == 0xFFFFFFFF) {
    619c:	3101      	adds	r1, #1
    619e:	d0ed      	beq.n	617c <_lv_blend_fill+0x578>
                            FILL_NORMAL_MASK_PX(x, color)
    61a0:	7815      	ldrb	r5, [r2, #0]
    61a2:	2d00      	cmp	r5, #0
    61a4:	d046      	beq.n	6234 <_lv_blend_fill+0x630>
    61a6:	2dff      	cmp	r5, #255	; 0xff
    61a8:	d100      	bne.n	61ac <_lv_blend_fill+0x5a8>
    61aa:	e12e      	b.n	640a <_lv_blend_fill+0x806>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    61ac:	21ff      	movs	r1, #255	; 0xff
    61ae:	1b49      	subs	r1, r1, r5
    61b0:	468c      	mov	ip, r1
    61b2:	9804      	ldr	r0, [sp, #16]
    61b4:	4368      	muls	r0, r5
    61b6:	7861      	ldrb	r1, [r4, #1]
    61b8:	08c9      	lsrs	r1, r1, #3
    61ba:	4666      	mov	r6, ip
    61bc:	4371      	muls	r1, r6
    61be:	1840      	adds	r0, r0, r1
    61c0:	0201      	lsls	r1, r0, #8
    61c2:	1809      	adds	r1, r1, r0
    61c4:	01c9      	lsls	r1, r1, #7
    61c6:	1809      	adds	r1, r1, r0
    61c8:	0dc9      	lsrs	r1, r1, #23
    61ca:	4039      	ands	r1, r7
    61cc:	468a      	mov	sl, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    61ce:	0028      	movs	r0, r5
    61d0:	9906      	ldr	r1, [sp, #24]
    61d2:	4348      	muls	r0, r1
    61d4:	4681      	mov	r9, r0
    61d6:	8820      	ldrh	r0, [r4, #0]
    61d8:	0540      	lsls	r0, r0, #21
    61da:	0e80      	lsrs	r0, r0, #26
    61dc:	4370      	muls	r0, r6
    61de:	4481      	add	r9, r0
    61e0:	4648      	mov	r0, r9
    61e2:	0200      	lsls	r0, r0, #8
    61e4:	4448      	add	r0, r9
    61e6:	01c0      	lsls	r0, r0, #7
    61e8:	4448      	add	r0, r9
    61ea:	00c0      	lsls	r0, r0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    61ec:	465e      	mov	r6, fp
    61ee:	4375      	muls	r5, r6
    61f0:	7826      	ldrb	r6, [r4, #0]
    61f2:	46b0      	mov	r8, r6
    61f4:	06f6      	lsls	r6, r6, #27
    61f6:	0ef6      	lsrs	r6, r6, #27
    61f8:	46b1      	mov	r9, r6
    61fa:	4666      	mov	r6, ip
    61fc:	4649      	mov	r1, r9
    61fe:	434e      	muls	r6, r1
    6200:	46b4      	mov	ip, r6
    6202:	44ac      	add	ip, r5
    6204:	4661      	mov	r1, ip
    6206:	020d      	lsls	r5, r1, #8
    6208:	4465      	add	r5, ip
    620a:	01ed      	lsls	r5, r5, #7
    620c:	4465      	add	r5, ip
    620e:	0ded      	lsrs	r5, r5, #23
    6210:	403d      	ands	r5, r7
    6212:	4646      	mov	r6, r8
    6214:	43be      	bics	r6, r7
    6216:	4335      	orrs	r5, r6
    6218:	7025      	strb	r5, [r4, #0]
    621a:	0e80      	lsrs	r0, r0, #26
    621c:	0145      	lsls	r5, r0, #5
    621e:	8820      	ldrh	r0, [r4, #0]
    6220:	49be      	ldr	r1, [pc, #760]	; (651c <_lv_blend_fill+0x918>)
    6222:	4008      	ands	r0, r1
    6224:	4328      	orrs	r0, r5
    6226:	8020      	strh	r0, [r4, #0]
    6228:	4651      	mov	r1, sl
    622a:	00c9      	lsls	r1, r1, #3
    622c:	0540      	lsls	r0, r0, #21
    622e:	0f40      	lsrs	r0, r0, #29
    6230:	4301      	orrs	r1, r0
    6232:	7061      	strb	r1, [r4, #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
    6234:	7855      	ldrb	r5, [r2, #1]
    6236:	2d00      	cmp	r5, #0
    6238:	d04a      	beq.n	62d0 <_lv_blend_fill+0x6cc>
    623a:	2dff      	cmp	r5, #255	; 0xff
    623c:	d100      	bne.n	6240 <_lv_blend_fill+0x63c>
    623e:	e0e8      	b.n	6412 <_lv_blend_fill+0x80e>
    6240:	1ca1      	adds	r1, r4, #2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6242:	20ff      	movs	r0, #255	; 0xff
    6244:	1b40      	subs	r0, r0, r5
    6246:	4684      	mov	ip, r0
    6248:	9804      	ldr	r0, [sp, #16]
    624a:	4368      	muls	r0, r5
    624c:	4689      	mov	r9, r1
    624e:	78e1      	ldrb	r1, [r4, #3]
    6250:	08c9      	lsrs	r1, r1, #3
    6252:	4666      	mov	r6, ip
    6254:	4371      	muls	r1, r6
    6256:	1840      	adds	r0, r0, r1
    6258:	0201      	lsls	r1, r0, #8
    625a:	1809      	adds	r1, r1, r0
    625c:	01c9      	lsls	r1, r1, #7
    625e:	1809      	adds	r1, r1, r0
    6260:	0dc9      	lsrs	r1, r1, #23
    6262:	4039      	ands	r1, r7
    6264:	910c      	str	r1, [sp, #48]	; 0x30
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6266:	0028      	movs	r0, r5
    6268:	9e06      	ldr	r6, [sp, #24]
    626a:	4370      	muls	r0, r6
    626c:	4682      	mov	sl, r0
    626e:	8860      	ldrh	r0, [r4, #2]
    6270:	0540      	lsls	r0, r0, #21
    6272:	0e80      	lsrs	r0, r0, #26
    6274:	4666      	mov	r6, ip
    6276:	4370      	muls	r0, r6
    6278:	4482      	add	sl, r0
    627a:	4650      	mov	r0, sl
    627c:	0200      	lsls	r0, r0, #8
    627e:	4450      	add	r0, sl
    6280:	01c0      	lsls	r0, r0, #7
    6282:	4450      	add	r0, sl
    6284:	00c0      	lsls	r0, r0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6286:	465e      	mov	r6, fp
    6288:	4375      	muls	r5, r6
    628a:	78a6      	ldrb	r6, [r4, #2]
    628c:	46b0      	mov	r8, r6
    628e:	06f6      	lsls	r6, r6, #27
    6290:	0ef6      	lsrs	r6, r6, #27
    6292:	46b2      	mov	sl, r6
    6294:	4666      	mov	r6, ip
    6296:	4651      	mov	r1, sl
    6298:	434e      	muls	r6, r1
    629a:	46b4      	mov	ip, r6
    629c:	44ac      	add	ip, r5
    629e:	4661      	mov	r1, ip
    62a0:	020d      	lsls	r5, r1, #8
    62a2:	4465      	add	r5, ip
    62a4:	01ed      	lsls	r5, r5, #7
    62a6:	4465      	add	r5, ip
    62a8:	0ded      	lsrs	r5, r5, #23
    62aa:	403d      	ands	r5, r7
    62ac:	4646      	mov	r6, r8
    62ae:	43be      	bics	r6, r7
    62b0:	4335      	orrs	r5, r6
    62b2:	70a5      	strb	r5, [r4, #2]
    62b4:	0e80      	lsrs	r0, r0, #26
    62b6:	0140      	lsls	r0, r0, #5
    62b8:	8865      	ldrh	r5, [r4, #2]
    62ba:	4998      	ldr	r1, [pc, #608]	; (651c <_lv_blend_fill+0x918>)
    62bc:	400d      	ands	r5, r1
    62be:	4328      	orrs	r0, r5
    62c0:	8060      	strh	r0, [r4, #2]
    62c2:	990c      	ldr	r1, [sp, #48]	; 0x30
    62c4:	00c9      	lsls	r1, r1, #3
    62c6:	0540      	lsls	r0, r0, #21
    62c8:	0f40      	lsrs	r0, r0, #29
    62ca:	4301      	orrs	r1, r0
    62cc:	4648      	mov	r0, r9
    62ce:	7041      	strb	r1, [r0, #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
    62d0:	7895      	ldrb	r5, [r2, #2]
    62d2:	2d00      	cmp	r5, #0
    62d4:	d04a      	beq.n	636c <_lv_blend_fill+0x768>
    62d6:	2dff      	cmp	r5, #255	; 0xff
    62d8:	d100      	bne.n	62dc <_lv_blend_fill+0x6d8>
    62da:	e09e      	b.n	641a <_lv_blend_fill+0x816>
    62dc:	1d21      	adds	r1, r4, #4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    62de:	20ff      	movs	r0, #255	; 0xff
    62e0:	1b40      	subs	r0, r0, r5
    62e2:	4684      	mov	ip, r0
    62e4:	9804      	ldr	r0, [sp, #16]
    62e6:	4368      	muls	r0, r5
    62e8:	4689      	mov	r9, r1
    62ea:	7961      	ldrb	r1, [r4, #5]
    62ec:	08c9      	lsrs	r1, r1, #3
    62ee:	4666      	mov	r6, ip
    62f0:	4371      	muls	r1, r6
    62f2:	1840      	adds	r0, r0, r1
    62f4:	0201      	lsls	r1, r0, #8
    62f6:	1809      	adds	r1, r1, r0
    62f8:	01c9      	lsls	r1, r1, #7
    62fa:	1809      	adds	r1, r1, r0
    62fc:	0dc9      	lsrs	r1, r1, #23
    62fe:	4039      	ands	r1, r7
    6300:	910c      	str	r1, [sp, #48]	; 0x30
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6302:	0028      	movs	r0, r5
    6304:	9e06      	ldr	r6, [sp, #24]
    6306:	4370      	muls	r0, r6
    6308:	4682      	mov	sl, r0
    630a:	88a0      	ldrh	r0, [r4, #4]
    630c:	0540      	lsls	r0, r0, #21
    630e:	0e80      	lsrs	r0, r0, #26
    6310:	4666      	mov	r6, ip
    6312:	4370      	muls	r0, r6
    6314:	4482      	add	sl, r0
    6316:	4650      	mov	r0, sl
    6318:	0200      	lsls	r0, r0, #8
    631a:	4450      	add	r0, sl
    631c:	01c0      	lsls	r0, r0, #7
    631e:	4450      	add	r0, sl
    6320:	00c0      	lsls	r0, r0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6322:	465e      	mov	r6, fp
    6324:	4375      	muls	r5, r6
    6326:	7926      	ldrb	r6, [r4, #4]
    6328:	46b0      	mov	r8, r6
    632a:	06f6      	lsls	r6, r6, #27
    632c:	0ef6      	lsrs	r6, r6, #27
    632e:	46b2      	mov	sl, r6
    6330:	4666      	mov	r6, ip
    6332:	4651      	mov	r1, sl
    6334:	434e      	muls	r6, r1
    6336:	46b4      	mov	ip, r6
    6338:	44ac      	add	ip, r5
    633a:	4661      	mov	r1, ip
    633c:	020d      	lsls	r5, r1, #8
    633e:	4465      	add	r5, ip
    6340:	01ed      	lsls	r5, r5, #7
    6342:	4465      	add	r5, ip
    6344:	0ded      	lsrs	r5, r5, #23
    6346:	403d      	ands	r5, r7
    6348:	4646      	mov	r6, r8
    634a:	43be      	bics	r6, r7
    634c:	4335      	orrs	r5, r6
    634e:	7125      	strb	r5, [r4, #4]
    6350:	0e80      	lsrs	r0, r0, #26
    6352:	0140      	lsls	r0, r0, #5
    6354:	88a5      	ldrh	r5, [r4, #4]
    6356:	4971      	ldr	r1, [pc, #452]	; (651c <_lv_blend_fill+0x918>)
    6358:	400d      	ands	r5, r1
    635a:	4328      	orrs	r0, r5
    635c:	80a0      	strh	r0, [r4, #4]
    635e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6360:	00c9      	lsls	r1, r1, #3
    6362:	0540      	lsls	r0, r0, #21
    6364:	0f40      	lsrs	r0, r0, #29
    6366:	4301      	orrs	r1, r0
    6368:	4648      	mov	r0, r9
    636a:	7041      	strb	r1, [r0, #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
    636c:	78d5      	ldrb	r5, [r2, #3]
    636e:	2d00      	cmp	r5, #0
    6370:	d100      	bne.n	6374 <_lv_blend_fill+0x770>
    6372:	e709      	b.n	6188 <_lv_blend_fill+0x584>
    6374:	2dff      	cmp	r5, #255	; 0xff
    6376:	d054      	beq.n	6422 <_lv_blend_fill+0x81e>
    6378:	1da1      	adds	r1, r4, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    637a:	20ff      	movs	r0, #255	; 0xff
    637c:	1b40      	subs	r0, r0, r5
    637e:	4684      	mov	ip, r0
    6380:	9804      	ldr	r0, [sp, #16]
    6382:	4368      	muls	r0, r5
    6384:	4689      	mov	r9, r1
    6386:	79e1      	ldrb	r1, [r4, #7]
    6388:	08c9      	lsrs	r1, r1, #3
    638a:	4666      	mov	r6, ip
    638c:	4371      	muls	r1, r6
    638e:	1840      	adds	r0, r0, r1
    6390:	0201      	lsls	r1, r0, #8
    6392:	1809      	adds	r1, r1, r0
    6394:	01c9      	lsls	r1, r1, #7
    6396:	1809      	adds	r1, r1, r0
    6398:	0dc9      	lsrs	r1, r1, #23
    639a:	4039      	ands	r1, r7
    639c:	910c      	str	r1, [sp, #48]	; 0x30
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    639e:	0028      	movs	r0, r5
    63a0:	9e06      	ldr	r6, [sp, #24]
    63a2:	4370      	muls	r0, r6
    63a4:	4682      	mov	sl, r0
    63a6:	88e0      	ldrh	r0, [r4, #6]
    63a8:	0540      	lsls	r0, r0, #21
    63aa:	0e80      	lsrs	r0, r0, #26
    63ac:	4666      	mov	r6, ip
    63ae:	4370      	muls	r0, r6
    63b0:	4482      	add	sl, r0
    63b2:	4650      	mov	r0, sl
    63b4:	0200      	lsls	r0, r0, #8
    63b6:	4450      	add	r0, sl
    63b8:	01c0      	lsls	r0, r0, #7
    63ba:	4450      	add	r0, sl
    63bc:	00c0      	lsls	r0, r0, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    63be:	465e      	mov	r6, fp
    63c0:	4375      	muls	r5, r6
    63c2:	79a6      	ldrb	r6, [r4, #6]
    63c4:	46b0      	mov	r8, r6
    63c6:	06f6      	lsls	r6, r6, #27
    63c8:	0ef6      	lsrs	r6, r6, #27
    63ca:	46b2      	mov	sl, r6
    63cc:	4666      	mov	r6, ip
    63ce:	4651      	mov	r1, sl
    63d0:	434e      	muls	r6, r1
    63d2:	46b4      	mov	ip, r6
    63d4:	44ac      	add	ip, r5
    63d6:	4661      	mov	r1, ip
    63d8:	020d      	lsls	r5, r1, #8
    63da:	4465      	add	r5, ip
    63dc:	01ed      	lsls	r5, r5, #7
    63de:	4465      	add	r5, ip
    63e0:	0ded      	lsrs	r5, r5, #23
    63e2:	403d      	ands	r5, r7
    63e4:	4646      	mov	r6, r8
    63e6:	43be      	bics	r6, r7
    63e8:	4335      	orrs	r5, r6
    63ea:	71a5      	strb	r5, [r4, #6]
    63ec:	0e80      	lsrs	r0, r0, #26
    63ee:	0140      	lsls	r0, r0, #5
    63f0:	88e5      	ldrh	r5, [r4, #6]
    63f2:	494a      	ldr	r1, [pc, #296]	; (651c <_lv_blend_fill+0x918>)
    63f4:	400d      	ands	r5, r1
    63f6:	4328      	orrs	r0, r5
    63f8:	80e0      	strh	r0, [r4, #6]
    63fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    63fc:	00c9      	lsls	r1, r1, #3
    63fe:	0540      	lsls	r0, r0, #21
    6400:	0f40      	lsrs	r0, r0, #29
    6402:	4301      	orrs	r1, r0
    6404:	4648      	mov	r0, r9
    6406:	7041      	strb	r1, [r0, #1]
    6408:	e6be      	b.n	6188 <_lv_blend_fill+0x584>
                            FILL_NORMAL_MASK_PX(x, color)
    640a:	4669      	mov	r1, sp
    640c:	8c09      	ldrh	r1, [r1, #32]
    640e:	8021      	strh	r1, [r4, #0]
    6410:	e710      	b.n	6234 <_lv_blend_fill+0x630>
                            FILL_NORMAL_MASK_PX(x + 1, color)
    6412:	4669      	mov	r1, sp
    6414:	8c09      	ldrh	r1, [r1, #32]
    6416:	8061      	strh	r1, [r4, #2]
    6418:	e75a      	b.n	62d0 <_lv_blend_fill+0x6cc>
                            FILL_NORMAL_MASK_PX(x + 2, color)
    641a:	4669      	mov	r1, sp
    641c:	8c09      	ldrh	r1, [r1, #32]
    641e:	80a1      	strh	r1, [r4, #4]
    6420:	e7a4      	b.n	636c <_lv_blend_fill+0x768>
                            FILL_NORMAL_MASK_PX(x + 3, color)
    6422:	4669      	mov	r1, sp
    6424:	8c09      	ldrh	r1, [r1, #32]
    6426:	80e1      	strh	r1, [r4, #6]
    6428:	e6ae      	b.n	6188 <_lv_blend_fill+0x584>
    642a:	9906      	ldr	r1, [sp, #24]
    642c:	468a      	mov	sl, r1
                for(; x < draw_area_w ; x++) {
    642e:	990a      	ldr	r1, [sp, #40]	; 0x28
    6430:	4299      	cmp	r1, r3
    6432:	dd50      	ble.n	64d6 <_lv_blend_fill+0x8d2>
    6434:	005e      	lsls	r6, r3, #1
    6436:	9907      	ldr	r1, [sp, #28]
    6438:	468c      	mov	ip, r1
    643a:	4466      	add	r6, ip
                    FILL_NORMAL_MASK_PX(x, color)
    643c:	1ad2      	subs	r2, r2, r3
    643e:	4690      	mov	r8, r2
    6440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6442:	4691      	mov	r9, r2
    6444:	e006      	b.n	6454 <_lv_blend_fill+0x850>
    6446:	466a      	mov	r2, sp
    6448:	8c12      	ldrh	r2, [r2, #32]
    644a:	8032      	strh	r2, [r6, #0]
                for(; x < draw_area_w ; x++) {
    644c:	3301      	adds	r3, #1
    644e:	3602      	adds	r6, #2
    6450:	4599      	cmp	r9, r3
    6452:	dd40      	ble.n	64d6 <_lv_blend_fill+0x8d2>
                    FILL_NORMAL_MASK_PX(x, color)
    6454:	4642      	mov	r2, r8
    6456:	5cd0      	ldrb	r0, [r2, r3]
    6458:	2800      	cmp	r0, #0
    645a:	d0f7      	beq.n	644c <_lv_blend_fill+0x848>
    645c:	28ff      	cmp	r0, #255	; 0xff
    645e:	d0f2      	beq.n	6446 <_lv_blend_fill+0x842>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6460:	22ff      	movs	r2, #255	; 0xff
    6462:	1a14      	subs	r4, r2, r0
    6464:	9a04      	ldr	r2, [sp, #16]
    6466:	4342      	muls	r2, r0
    6468:	7871      	ldrb	r1, [r6, #1]
    646a:	08c9      	lsrs	r1, r1, #3
    646c:	4361      	muls	r1, r4
    646e:	1851      	adds	r1, r2, r1
    6470:	020a      	lsls	r2, r1, #8
    6472:	1852      	adds	r2, r2, r1
    6474:	01d2      	lsls	r2, r2, #7
    6476:	1852      	adds	r2, r2, r1
    6478:	0dd2      	lsrs	r2, r2, #23
    647a:	271f      	movs	r7, #31
    647c:	403a      	ands	r2, r7
    647e:	9206      	str	r2, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6480:	4655      	mov	r5, sl
    6482:	4345      	muls	r5, r0
    6484:	8831      	ldrh	r1, [r6, #0]
    6486:	0549      	lsls	r1, r1, #21
    6488:	0e89      	lsrs	r1, r1, #26
    648a:	4361      	muls	r1, r4
    648c:	186d      	adds	r5, r5, r1
    648e:	0229      	lsls	r1, r5, #8
    6490:	1949      	adds	r1, r1, r5
    6492:	01c9      	lsls	r1, r1, #7
    6494:	1949      	adds	r1, r1, r5
    6496:	00c9      	lsls	r1, r1, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6498:	465d      	mov	r5, fp
    649a:	4368      	muls	r0, r5
    649c:	7835      	ldrb	r5, [r6, #0]
    649e:	06ea      	lsls	r2, r5, #27
    64a0:	0ed2      	lsrs	r2, r2, #27
    64a2:	4354      	muls	r4, r2
    64a4:	1904      	adds	r4, r0, r4
    64a6:	0220      	lsls	r0, r4, #8
    64a8:	1900      	adds	r0, r0, r4
    64aa:	01c0      	lsls	r0, r0, #7
    64ac:	1900      	adds	r0, r0, r4
    64ae:	0dc0      	lsrs	r0, r0, #23
    64b0:	4007      	ands	r7, r0
    64b2:	201f      	movs	r0, #31
    64b4:	4385      	bics	r5, r0
    64b6:	432f      	orrs	r7, r5
    64b8:	7037      	strb	r7, [r6, #0]
    64ba:	0e89      	lsrs	r1, r1, #26
    64bc:	0148      	lsls	r0, r1, #5
    64be:	8831      	ldrh	r1, [r6, #0]
    64c0:	4c16      	ldr	r4, [pc, #88]	; (651c <_lv_blend_fill+0x918>)
    64c2:	4021      	ands	r1, r4
    64c4:	4301      	orrs	r1, r0
    64c6:	8031      	strh	r1, [r6, #0]
    64c8:	9a06      	ldr	r2, [sp, #24]
    64ca:	00d2      	lsls	r2, r2, #3
    64cc:	0549      	lsls	r1, r1, #21
    64ce:	0f49      	lsrs	r1, r1, #29
    64d0:	430a      	orrs	r2, r1
    64d2:	7072      	strb	r2, [r6, #1]
    64d4:	e7ba      	b.n	644c <_lv_blend_fill+0x848>
                disp_buf_first += disp_w;
    64d6:	9b07      	ldr	r3, [sp, #28]
    64d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    64da:	4694      	mov	ip, r2
    64dc:	4463      	add	r3, ip
    64de:	9307      	str	r3, [sp, #28]
    64e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    64e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    64e4:	4694      	mov	ip, r2
    64e6:	4463      	add	r3, ip
    64e8:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
    64ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    64ec:	3301      	adds	r3, #1
    64ee:	930d      	str	r3, [sp, #52]	; 0x34
    64f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    64f2:	429a      	cmp	r2, r3
    64f4:	dc01      	bgt.n	64fa <_lv_blend_fill+0x8f6>
    64f6:	f7ff fb9d 	bl	5c34 <_lv_blend_fill+0x30>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    64fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    64fc:	2a00      	cmp	r2, #0
    64fe:	dc00      	bgt.n	6502 <_lv_blend_fill+0x8fe>
    6500:	e1e5      	b.n	68ce <_lv_blend_fill+0xcca>
    6502:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6504:	0799      	lsls	r1, r3, #30
    6506:	d100      	bne.n	650a <_lv_blend_fill+0x906>
    6508:	e1e4      	b.n	68d4 <_lv_blend_fill+0xcd0>
    650a:	9e07      	ldr	r6, [sp, #28]
    650c:	4698      	mov	r8, r3
    650e:	2300      	movs	r3, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6510:	211f      	movs	r1, #31
    6512:	4689      	mov	r9, r1
    6514:	4644      	mov	r4, r8
    6516:	4690      	mov	r8, r2
    6518:	e5e7      	b.n	60ea <_lv_blend_fill+0x4e6>
    651a:	46c0      	nop			; (mov r8, r8)
    651c:	fffff81f 	.word	0xfffff81f
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    6520:	9e0d      	ldr	r6, [sp, #52]	; 0x34
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    6522:	2aff      	cmp	r2, #255	; 0xff
    6524:	d065      	beq.n	65f2 <_lv_blend_fill+0x9ee>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    6526:	2eff      	cmp	r6, #255	; 0xff
    6528:	d067      	beq.n	65fa <_lv_blend_fill+0x9f6>
    652a:	23ff      	movs	r3, #255	; 0xff
    652c:	1b9b      	subs	r3, r3, r6
    652e:	784a      	ldrb	r2, [r1, #1]
    6530:	08d2      	lsrs	r2, r2, #3
    6532:	4699      	mov	r9, r3
    6534:	435a      	muls	r2, r3
    6536:	9b05      	ldr	r3, [sp, #20]
    6538:	4373      	muls	r3, r6
    653a:	18d2      	adds	r2, r2, r3
    653c:	0213      	lsls	r3, r2, #8
    653e:	189b      	adds	r3, r3, r2
    6540:	01db      	lsls	r3, r3, #7
    6542:	189b      	adds	r3, r3, r2
    6544:	0ddb      	lsrs	r3, r3, #23
    6546:	221f      	movs	r2, #31
    6548:	401a      	ands	r2, r3
    654a:	9204      	str	r2, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    654c:	880a      	ldrh	r2, [r1, #0]
    654e:	0552      	lsls	r2, r2, #21
    6550:	0e92      	lsrs	r2, r2, #26
    6552:	464b      	mov	r3, r9
    6554:	435a      	muls	r2, r3
    6556:	9b08      	ldr	r3, [sp, #32]
    6558:	4373      	muls	r3, r6
    655a:	469a      	mov	sl, r3
    655c:	4452      	add	r2, sl
    655e:	0213      	lsls	r3, r2, #8
    6560:	469a      	mov	sl, r3
    6562:	4492      	add	sl, r2
    6564:	4653      	mov	r3, sl
    6566:	01db      	lsls	r3, r3, #7
    6568:	469a      	mov	sl, r3
    656a:	4452      	add	r2, sl
    656c:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    656e:	780b      	ldrb	r3, [r1, #0]
    6570:	06db      	lsls	r3, r3, #27
    6572:	0edb      	lsrs	r3, r3, #27
    6574:	469a      	mov	sl, r3
    6576:	464b      	mov	r3, r9
    6578:	4654      	mov	r4, sl
    657a:	4363      	muls	r3, r4
    657c:	469a      	mov	sl, r3
    657e:	4663      	mov	r3, ip
    6580:	4373      	muls	r3, r6
    6582:	4699      	mov	r9, r3
    6584:	44ca      	add	sl, r9
    6586:	4653      	mov	r3, sl
    6588:	021b      	lsls	r3, r3, #8
    658a:	4699      	mov	r9, r3
    658c:	44d1      	add	r9, sl
    658e:	464b      	mov	r3, r9
    6590:	01db      	lsls	r3, r3, #7
    6592:	4699      	mov	r9, r3
    6594:	44d1      	add	r9, sl
    6596:	464b      	mov	r3, r9
    6598:	0ddb      	lsrs	r3, r3, #23
    659a:	241f      	movs	r4, #31
    659c:	4023      	ands	r3, r4
    659e:	4699      	mov	r9, r3
    65a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    65a2:	43a3      	bics	r3, r4
    65a4:	469a      	mov	sl, r3
    65a6:	464b      	mov	r3, r9
    65a8:	4654      	mov	r4, sl
    65aa:	4323      	orrs	r3, r4
    65ac:	4699      	mov	r9, r3
    65ae:	233f      	movs	r3, #63	; 0x3f
    65b0:	401a      	ands	r2, r3
    65b2:	0152      	lsls	r2, r2, #5
    65b4:	464b      	mov	r3, r9
    65b6:	4644      	mov	r4, r8
    65b8:	4023      	ands	r3, r4
    65ba:	431a      	orrs	r2, r3
    65bc:	9b04      	ldr	r3, [sp, #16]
    65be:	02db      	lsls	r3, r3, #11
    65c0:	0552      	lsls	r2, r2, #21
    65c2:	0d52      	lsrs	r2, r2, #21
    65c4:	4313      	orrs	r3, r2
    65c6:	466a      	mov	r2, sp
    65c8:	8493      	strh	r3, [r2, #36]	; 0x24
    65ca:	b29b      	uxth	r3, r3
                            last_dest_color.full = disp_buf_first[x].full;
    65cc:	880a      	ldrh	r2, [r1, #0]
    65ce:	4691      	mov	r9, r2
                        disp_buf_first[x] = last_res_color;
    65d0:	800b      	strh	r3, [r1, #0]
    65d2:	002a      	movs	r2, r5
                    mask_tmp_x++;
    65d4:	3001      	adds	r0, #1
    65d6:	3102      	adds	r1, #2
                for(x = 0; x < draw_area_w; x++) {
    65d8:	42b8      	cmp	r0, r7
    65da:	d010      	beq.n	65fe <_lv_blend_fill+0x9fa>
                    if(*mask_tmp_x) {
    65dc:	7805      	ldrb	r5, [r0, #0]
    65de:	2d00      	cmp	r5, #0
    65e0:	d0f8      	beq.n	65d4 <_lv_blend_fill+0x9d0>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    65e2:	4295      	cmp	r5, r2
    65e4:	d005      	beq.n	65f2 <_lv_blend_fill+0x9ee>
    65e6:	2dff      	cmp	r5, #255	; 0xff
    65e8:	d09a      	beq.n	6520 <_lv_blend_fill+0x91c>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
    65ea:	465e      	mov	r6, fp
    65ec:	436e      	muls	r6, r5
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    65ee:	0a36      	lsrs	r6, r6, #8
    65f0:	e799      	b.n	6526 <_lv_blend_fill+0x922>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    65f2:	880a      	ldrh	r2, [r1, #0]
    65f4:	454a      	cmp	r2, r9
    65f6:	d196      	bne.n	6526 <_lv_blend_fill+0x922>
    65f8:	e7ea      	b.n	65d0 <_lv_blend_fill+0x9cc>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    65fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    65fc:	e7e6      	b.n	65cc <_lv_blend_fill+0x9c8>
                disp_buf_first += disp_w;
    65fe:	9907      	ldr	r1, [sp, #28]
    6600:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6602:	4680      	mov	r8, r0
    6604:	4441      	add	r1, r8
    6606:	9107      	str	r1, [sp, #28]
    6608:	9906      	ldr	r1, [sp, #24]
    660a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    660c:	4680      	mov	r8, r0
    660e:	4441      	add	r1, r8
    6610:	9106      	str	r1, [sp, #24]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6612:	990c      	ldr	r1, [sp, #48]	; 0x30
    6614:	3101      	adds	r1, #1
    6616:	0008      	movs	r0, r1
    6618:	910c      	str	r1, [sp, #48]	; 0x30
    661a:	a910      	add	r1, sp, #64	; 0x40
    661c:	2406      	movs	r4, #6
    661e:	5f09      	ldrsh	r1, [r1, r4]
    6620:	4288      	cmp	r0, r1
    6622:	dd01      	ble.n	6628 <_lv_blend_fill+0xa24>
    6624:	f7ff fb06 	bl	5c34 <_lv_blend_fill+0x30>
                for(x = 0; x < draw_area_w; x++) {
    6628:	990a      	ldr	r1, [sp, #40]	; 0x28
    662a:	2900      	cmp	r1, #0
    662c:	dde7      	ble.n	65fe <_lv_blend_fill+0x9fa>
    662e:	9907      	ldr	r1, [sp, #28]
    6630:	9806      	ldr	r0, [sp, #24]
    6632:	0004      	movs	r4, r0
    6634:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6636:	46a8      	mov	r8, r5
    6638:	4444      	add	r4, r8
    663a:	0027      	movs	r7, r4
    663c:	4ca7      	ldr	r4, [pc, #668]	; (68dc <_lv_blend_fill+0xcd8>)
    663e:	46a0      	mov	r8, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    6640:	465c      	mov	r4, fp
    6642:	940d      	str	r4, [sp, #52]	; 0x34
    6644:	e7ca      	b.n	65dc <_lv_blend_fill+0x9d8>
    6646:	466b      	mov	r3, sp
    6648:	8a9c      	ldrh	r4, [r3, #20]
    switch(mode) {
    664a:	2e01      	cmp	r6, #1
    664c:	d045      	beq.n	66da <_lv_blend_fill+0xad6>
    664e:	2e02      	cmp	r6, #2
    6650:	d001      	beq.n	6656 <_lv_blend_fill+0xa52>
    6652:	f7ff faef 	bl	5c34 <_lv_blend_fill+0x30>
            blend_fp = color_blend_true_color_subtractive;
    6656:	4ba2      	ldr	r3, [pc, #648]	; (68e0 <_lv_blend_fill+0xcdc>)
    6658:	9309      	str	r3, [sp, #36]	; 0x24
    665a:	466b      	mov	r3, sp
    665c:	8a9a      	ldrh	r2, [r3, #20]
    665e:	06d3      	lsls	r3, r2, #27
    6660:	0edb      	lsrs	r3, r3, #27
    6662:	930e      	str	r3, [sp, #56]	; 0x38
    6664:	0553      	lsls	r3, r2, #21
    6666:	0e9b      	lsrs	r3, r3, #26
    6668:	930c      	str	r3, [sp, #48]	; 0x30
    666a:	0416      	lsls	r6, r2, #16
    666c:	0ef3      	lsrs	r3, r6, #27
    666e:	930d      	str	r3, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    6670:	4643      	mov	r3, r8
    6672:	8a9b      	ldrh	r3, [r3, #20]
    6674:	3301      	adds	r3, #1
    6676:	4642      	mov	r2, r8
    6678:	8a12      	ldrh	r2, [r2, #16]
    667a:	1a9b      	subs	r3, r3, r2
    667c:	b219      	sxth	r1, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    667e:	9508      	str	r5, [sp, #32]
    6680:	434d      	muls	r5, r1
    6682:	006d      	lsls	r5, r5, #1
    6684:	9b04      	ldr	r3, [sp, #16]
    6686:	469c      	mov	ip, r3
    6688:	44ac      	add	ip, r5
    668a:	4663      	mov	r3, ip
    668c:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    668e:	2f01      	cmp	r7, #1
    6690:	d026      	beq.n	66e0 <_lv_blend_fill+0xadc>
    6692:	3001      	adds	r0, #1
    6694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6696:	1ac0      	subs	r0, r0, r3
    6698:	b203      	sxth	r3, r0
    669a:	4698      	mov	r8, r3
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    669c:	9b06      	ldr	r3, [sp, #24]
    669e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    66a0:	1a9e      	subs	r6, r3, r2
        last_dest_color.full = disp_buf_tmp[0].full;
    66a2:	9b07      	ldr	r3, [sp, #28]
    66a4:	881a      	ldrh	r2, [r3, #0]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    66a6:	9b08      	ldr	r3, [sp, #32]
    66a8:	454b      	cmp	r3, r9
    66aa:	dd01      	ble.n	66b0 <_lv_blend_fill+0xaac>
    66ac:	f7ff fac2 	bl	5c34 <_lv_blend_fill+0x30>
            disp_buf_tmp += disp_w;
    66b0:	004b      	lsls	r3, r1, #1
    66b2:	930a      	str	r3, [sp, #40]	; 0x28
    66b4:	0010      	movs	r0, r2
    66b6:	2100      	movs	r1, #0
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
    66b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    66ba:	015b      	lsls	r3, r3, #5
    66bc:	469a      	mov	sl, r3
    66be:	4643      	mov	r3, r8
    66c0:	930b      	str	r3, [sp, #44]	; 0x2c
    66c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    66c4:	4698      	mov	r8, r3
    66c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    66c8:	4699      	mov	r9, r3
    66ca:	466b      	mov	r3, sp
    66cc:	821c      	strh	r4, [r3, #16]
    66ce:	0034      	movs	r4, r6
    66d0:	465b      	mov	r3, fp
    66d2:	9306      	str	r3, [sp, #24]
    66d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    66d6:	469b      	mov	fp, r3
    66d8:	e0de      	b.n	6898 <_lv_blend_fill+0xc94>
            blend_fp = color_blend_true_color_additive;
    66da:	4b82      	ldr	r3, [pc, #520]	; (68e4 <_lv_blend_fill+0xce0>)
    66dc:	9309      	str	r3, [sp, #36]	; 0x24
    66de:	e7bc      	b.n	665a <_lv_blend_fill+0xa56>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
    66e0:	2300      	movs	r3, #0
    66e2:	466a      	mov	r2, sp
    66e4:	8293      	strh	r3, [r2, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    66e6:	465b      	mov	r3, fp
    66e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    66ea:	437b      	muls	r3, r7
    66ec:	0218      	lsls	r0, r3, #8
    66ee:	18c0      	adds	r0, r0, r3
    66f0:	01c0      	lsls	r0, r0, #7
    66f2:	18c0      	adds	r0, r0, r3
    66f4:	0dc0      	lsrs	r0, r0, #23
    66f6:	251f      	movs	r5, #31
    66f8:	4028      	ands	r0, r5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    66fa:	465a      	mov	r2, fp
    66fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    66fe:	435a      	muls	r2, r3
    6700:	0213      	lsls	r3, r2, #8
    6702:	189b      	adds	r3, r3, r2
    6704:	01db      	lsls	r3, r3, #7
    6706:	189b      	adds	r3, r3, r2
    6708:	00db      	lsls	r3, r3, #3
    670a:	0e9a      	lsrs	r2, r3, #26
    670c:	4692      	mov	sl, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    670e:	465a      	mov	r2, fp
    6710:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    6712:	4372      	muls	r2, r6
    6714:	0213      	lsls	r3, r2, #8
    6716:	189b      	adds	r3, r3, r2
    6718:	01db      	lsls	r3, r3, #7
    671a:	189b      	adds	r3, r3, r2
    671c:	0ddb      	lsrs	r3, r3, #23
    671e:	401d      	ands	r5, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6720:	9a08      	ldr	r2, [sp, #32]
    6722:	454a      	cmp	r2, r9
    6724:	dd01      	ble.n	672a <_lv_blend_fill+0xb26>
    6726:	f7ff fa85 	bl	5c34 <_lv_blend_fill+0x30>
            disp_buf_tmp += disp_w;
    672a:	004a      	lsls	r2, r1, #1
    672c:	4691      	mov	r9, r2
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
    672e:	0033      	movs	r3, r6
    6730:	221f      	movs	r2, #31
    6732:	4013      	ands	r3, r2
    6734:	4698      	mov	r8, r3
    6736:	464a      	mov	r2, r9
    6738:	920b      	str	r2, [sp, #44]	; 0x2c
    673a:	46b9      	mov	r9, r7
    673c:	466b      	mov	r3, sp
    673e:	831c      	strh	r4, [r3, #24]
    6740:	002c      	movs	r4, r5
    6742:	465a      	mov	r2, fp
    6744:	920a      	str	r2, [sp, #40]	; 0x28
    6746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6748:	469b      	mov	fp, r3
    674a:	e050      	b.n	67ee <_lv_blend_fill+0xbea>
                disp_buf_tmp[x] = last_res_color;
    674c:	782b      	ldrb	r3, [r5, #0]
    674e:	221f      	movs	r2, #31
    6750:	4393      	bics	r3, r2
    6752:	9a04      	ldr	r2, [sp, #16]
    6754:	4313      	orrs	r3, r2
    6756:	702b      	strb	r3, [r5, #0]
    6758:	017a      	lsls	r2, r7, #5
    675a:	882b      	ldrh	r3, [r5, #0]
    675c:	469c      	mov	ip, r3
    675e:	4b5f      	ldr	r3, [pc, #380]	; (68dc <_lv_blend_fill+0xcd8>)
    6760:	4661      	mov	r1, ip
    6762:	400b      	ands	r3, r1
    6764:	4313      	orrs	r3, r2
    6766:	802b      	strh	r3, [r5, #0]
    6768:	00c2      	lsls	r2, r0, #3
    676a:	055b      	lsls	r3, r3, #21
    676c:	0f5b      	lsrs	r3, r3, #29
    676e:	4313      	orrs	r3, r2
    6770:	706b      	strb	r3, [r5, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6772:	3401      	adds	r4, #1
    6774:	3602      	adds	r6, #2
    6776:	ab10      	add	r3, sp, #64	; 0x40
    6778:	2204      	movs	r2, #4
    677a:	5e9b      	ldrsh	r3, [r3, r2]
    677c:	429c      	cmp	r4, r3
    677e:	dc24      	bgt.n	67ca <_lv_blend_fill+0xbc6>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
    6780:	0035      	movs	r5, r6
    6782:	466b      	mov	r3, sp
    6784:	8a9b      	ldrh	r3, [r3, #20]
    6786:	8832      	ldrh	r2, [r6, #0]
    6788:	4293      	cmp	r3, r2
    678a:	d0df      	beq.n	674c <_lv_blend_fill+0xb48>
                    last_dest_color = disp_buf_tmp[x];
    678c:	0011      	movs	r1, r2
    678e:	466b      	mov	r3, sp
    6790:	829a      	strh	r2, [r3, #20]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
    6792:	9806      	ldr	r0, [sp, #24]
    6794:	231f      	movs	r3, #31
    6796:	4398      	bics	r0, r3
    6798:	4643      	mov	r3, r8
    679a:	4318      	orrs	r0, r3
    679c:	465b      	mov	r3, fp
    679e:	015b      	lsls	r3, r3, #5
    67a0:	4f4e      	ldr	r7, [pc, #312]	; (68dc <_lv_blend_fill+0xcd8>)
    67a2:	4038      	ands	r0, r7
    67a4:	4318      	orrs	r0, r3
    67a6:	464b      	mov	r3, r9
    67a8:	02db      	lsls	r3, r3, #11
    67aa:	0540      	lsls	r0, r0, #21
    67ac:	0d40      	lsrs	r0, r0, #21
    67ae:	4318      	orrs	r0, r3
    67b0:	466b      	mov	r3, sp
    67b2:	8318      	strh	r0, [r3, #24]
    67b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    67b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    67b8:	4798      	blx	r3
    67ba:	06c1      	lsls	r1, r0, #27
    67bc:	0ecb      	lsrs	r3, r1, #27
    67be:	9304      	str	r3, [sp, #16]
    67c0:	0547      	lsls	r7, r0, #21
    67c2:	0ebf      	lsrs	r7, r7, #26
    67c4:	0400      	lsls	r0, r0, #16
    67c6:	0ec0      	lsrs	r0, r0, #27
    67c8:	e7c0      	b.n	674c <_lv_blend_fill+0xb48>
    67ca:	9c04      	ldr	r4, [sp, #16]
    67cc:	46ba      	mov	sl, r7
            disp_buf_tmp += disp_w;
    67ce:	9b07      	ldr	r3, [sp, #28]
    67d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    67d2:	4694      	mov	ip, r2
    67d4:	4463      	add	r3, ip
    67d6:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    67d8:	9b08      	ldr	r3, [sp, #32]
    67da:	3301      	adds	r3, #1
    67dc:	001a      	movs	r2, r3
    67de:	9308      	str	r3, [sp, #32]
    67e0:	ab10      	add	r3, sp, #64	; 0x40
    67e2:	2106      	movs	r1, #6
    67e4:	5e5b      	ldrsh	r3, [r3, r1]
    67e6:	429a      	cmp	r2, r3
    67e8:	dd01      	ble.n	67ee <_lv_blend_fill+0xbea>
    67ea:	f7ff fa23 	bl	5c34 <_lv_blend_fill+0x30>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    67ee:	ab10      	add	r3, sp, #64	; 0x40
    67f0:	2200      	movs	r2, #0
    67f2:	5e9e      	ldrsh	r6, [r3, r2]
    67f4:	0037      	movs	r7, r6
    67f6:	2204      	movs	r2, #4
    67f8:	5e9b      	ldrsh	r3, [r3, r2]
    67fa:	429e      	cmp	r6, r3
    67fc:	dce7      	bgt.n	67ce <_lv_blend_fill+0xbca>
    67fe:	0076      	lsls	r6, r6, #1
    6800:	9b07      	ldr	r3, [sp, #28]
    6802:	469c      	mov	ip, r3
    6804:	4466      	add	r6, ip
    6806:	9404      	str	r4, [sp, #16]
    6808:	003c      	movs	r4, r7
    680a:	4657      	mov	r7, sl
    680c:	e7b8      	b.n	6780 <_lv_blend_fill+0xb7c>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
    680e:	883a      	ldrh	r2, [r7, #0]
    6810:	4694      	mov	ip, r2
    6812:	9a05      	ldr	r2, [sp, #20]
    6814:	4594      	cmp	ip, r2
    6816:	d124      	bne.n	6862 <_lv_blend_fill+0xc5e>
    6818:	e015      	b.n	6846 <_lv_blend_fill+0xc42>
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
    681a:	231f      	movs	r3, #31
    681c:	9804      	ldr	r0, [sp, #16]
    681e:	4398      	bics	r0, r3
    6820:	465b      	mov	r3, fp
    6822:	4318      	orrs	r0, r3
    6824:	4b2d      	ldr	r3, [pc, #180]	; (68dc <_lv_blend_fill+0xcd8>)
    6826:	4018      	ands	r0, r3
    6828:	4653      	mov	r3, sl
    682a:	4318      	orrs	r0, r3
    682c:	464b      	mov	r3, r9
    682e:	02db      	lsls	r3, r3, #11
    6830:	0540      	lsls	r0, r0, #21
    6832:	0d40      	lsrs	r0, r0, #21
    6834:	4318      	orrs	r0, r3
    6836:	466b      	mov	r3, sp
    6838:	8218      	strh	r0, [r3, #16]
    683a:	8839      	ldrh	r1, [r7, #0]
    683c:	47c0      	blx	r8
    683e:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
    6840:	5da1      	ldrb	r1, [r4, r6]
                    last_dest_color.full = disp_buf_tmp[x].full;
    6842:	883b      	ldrh	r3, [r7, #0]
    6844:	9305      	str	r3, [sp, #20]
                disp_buf_tmp[x] = last_res_color;
    6846:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6848:	3501      	adds	r5, #1
    684a:	3702      	adds	r7, #2
    684c:	ab10      	add	r3, sp, #64	; 0x40
    684e:	2604      	movs	r6, #4
    6850:	5f9b      	ldrsh	r3, [r3, r6]
    6852:	429d      	cmp	r5, r3
    6854:	dc0c      	bgt.n	6870 <_lv_blend_fill+0xc6c>
    6856:	002e      	movs	r6, r5
                if(mask_tmp[x] == 0) continue;
    6858:	5d63      	ldrb	r3, [r4, r5]
    685a:	2b00      	cmp	r3, #0
    685c:	d0f4      	beq.n	6848 <_lv_blend_fill+0xc44>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
    685e:	428b      	cmp	r3, r1
    6860:	d0d5      	beq.n	680e <_lv_blend_fill+0xc0a>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    6862:	9906      	ldr	r1, [sp, #24]
    6864:	000a      	movs	r2, r1
    6866:	2bf9      	cmp	r3, #249	; 0xf9
    6868:	d8d7      	bhi.n	681a <_lv_blend_fill+0xc16>
    686a:	435a      	muls	r2, r3
    686c:	0a12      	lsrs	r2, r2, #8
    686e:	e7d4      	b.n	681a <_lv_blend_fill+0xc16>
    6870:	9a05      	ldr	r2, [sp, #20]
            disp_buf_tmp += disp_w;
    6872:	9b07      	ldr	r3, [sp, #28]
    6874:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6876:	46ac      	mov	ip, r5
    6878:	4463      	add	r3, ip
    687a:	9307      	str	r3, [sp, #28]
    687c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    687e:	469c      	mov	ip, r3
    6880:	4464      	add	r4, ip
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6882:	9b08      	ldr	r3, [sp, #32]
    6884:	3301      	adds	r3, #1
    6886:	001d      	movs	r5, r3
    6888:	9308      	str	r3, [sp, #32]
    688a:	ab10      	add	r3, sp, #64	; 0x40
    688c:	2606      	movs	r6, #6
    688e:	5f9b      	ldrsh	r3, [r3, r6]
    6890:	429d      	cmp	r5, r3
    6892:	dd01      	ble.n	6898 <_lv_blend_fill+0xc94>
    6894:	f7ff f9ce 	bl	5c34 <_lv_blend_fill+0x30>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6898:	ab10      	add	r3, sp, #64	; 0x40
    689a:	2500      	movs	r5, #0
    689c:	5f5f      	ldrsh	r7, [r3, r5]
    689e:	003d      	movs	r5, r7
    68a0:	2604      	movs	r6, #4
    68a2:	5f9b      	ldrsh	r3, [r3, r6]
    68a4:	429f      	cmp	r7, r3
    68a6:	dce4      	bgt.n	6872 <_lv_blend_fill+0xc6e>
    68a8:	007f      	lsls	r7, r7, #1
    68aa:	9b07      	ldr	r3, [sp, #28]
    68ac:	469c      	mov	ip, r3
    68ae:	4467      	add	r7, ip
    68b0:	9205      	str	r2, [sp, #20]
    68b2:	e7d0      	b.n	6856 <_lv_blend_fill+0xc52>
                    FILL_NORMAL_MASK_PX(x, color)
    68b4:	0022      	movs	r2, r4
                for(; x <= x_end4; x += 4) {
    68b6:	9905      	ldr	r1, [sp, #20]
    68b8:	4299      	cmp	r1, r3
    68ba:	da00      	bge.n	68be <_lv_blend_fill+0xcba>
    68bc:	e60b      	b.n	64d6 <_lv_blend_fill+0x8d2>
    68be:	005c      	lsls	r4, r3, #1
    68c0:	9907      	ldr	r1, [sp, #28]
    68c2:	468c      	mov	ip, r1
    68c4:	4464      	add	r4, ip
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    68c6:	271f      	movs	r7, #31
    68c8:	4651      	mov	r1, sl
    68ca:	9106      	str	r1, [sp, #24]
    68cc:	e463      	b.n	6196 <_lv_blend_fill+0x592>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    68ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    68d0:	2300      	movs	r3, #0
    68d2:	e7f0      	b.n	68b6 <_lv_blend_fill+0xcb2>
    68d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    68d6:	2300      	movs	r3, #0
    68d8:	e448      	b.n	616c <_lv_blend_fill+0x568>
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	fffff81f 	.word	0xfffff81f
    68e0:	00005b4f 	.word	0x00005b4f
    68e4:	00005aa9 	.word	0x00005aa9

000068e8 <_lv_blend_map>:
{
    68e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68ea:	46de      	mov	lr, fp
    68ec:	4657      	mov	r7, sl
    68ee:	464e      	mov	r6, r9
    68f0:	4645      	mov	r5, r8
    68f2:	b5e0      	push	{r5, r6, r7, lr}
    68f4:	b093      	sub	sp, #76	; 0x4c
    68f6:	000c      	movs	r4, r1
    68f8:	9207      	str	r2, [sp, #28]
    68fa:	001d      	movs	r5, r3
    68fc:	ab1c      	add	r3, sp, #112	; 0x70
    68fe:	781f      	ldrb	r7, [r3, #0]
    6900:	ab1d      	add	r3, sp, #116	; 0x74
    6902:	781b      	ldrb	r3, [r3, #0]
    6904:	469b      	mov	fp, r3
    6906:	ab1e      	add	r3, sp, #120	; 0x78
    6908:	781e      	ldrb	r6, [r3, #0]
    if(opa < LV_OPA_MIN) return;
    690a:	465b      	mov	r3, fp
    690c:	2b04      	cmp	r3, #4
    690e:	d901      	bls.n	6914 <_lv_blend_map+0x2c>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    6910:	2f00      	cmp	r7, #0
    6912:	d106      	bne.n	6922 <_lv_blend_map+0x3a>
}
    6914:	b013      	add	sp, #76	; 0x4c
    6916:	bc3c      	pop	{r2, r3, r4, r5}
    6918:	4690      	mov	r8, r2
    691a:	4699      	mov	r9, r3
    691c:	46a2      	mov	sl, r4
    691e:	46ab      	mov	fp, r5
    6920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
    6922:	000a      	movs	r2, r1
    6924:	0001      	movs	r1, r0
    6926:	a810      	add	r0, sp, #64	; 0x40
    6928:	4bd7      	ldr	r3, [pc, #860]	; (6c88 <_lv_blend_map+0x3a0>)
    692a:	4798      	blx	r3
    if(!is_common) return;
    692c:	2800      	cmp	r0, #0
    692e:	d0f1      	beq.n	6914 <_lv_blend_map+0x2c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6930:	4bd6      	ldr	r3, [pc, #856]	; (6c8c <_lv_blend_map+0x3a4>)
    6932:	4798      	blx	r3
    6934:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    6936:	4bd6      	ldr	r3, [pc, #856]	; (6c90 <_lv_blend_map+0x3a8>)
    6938:	4798      	blx	r3
    693a:	4681      	mov	r9, r0
    lv_color_t * disp_buf = vdb->buf_act;
    693c:	6883      	ldr	r3, [r0, #8]
    693e:	9305      	str	r3, [sp, #20]
    draw_area.x1 -= disp_area->x1;
    6940:	8a02      	ldrh	r2, [r0, #16]
    6942:	ab10      	add	r3, sp, #64	; 0x40
    6944:	8819      	ldrh	r1, [r3, #0]
    6946:	1a89      	subs	r1, r1, r2
    6948:	b289      	uxth	r1, r1
    694a:	9109      	str	r1, [sp, #36]	; 0x24
    694c:	468c      	mov	ip, r1
    694e:	b208      	sxth	r0, r1
    6950:	4682      	mov	sl, r0
    6952:	8018      	strh	r0, [r3, #0]
    draw_area.y1 -= disp_area->y1;
    6954:	4648      	mov	r0, r9
    6956:	8a41      	ldrh	r1, [r0, #18]
    6958:	8858      	ldrh	r0, [r3, #2]
    695a:	1a40      	subs	r0, r0, r1
    695c:	b280      	uxth	r0, r0
    695e:	900a      	str	r0, [sp, #40]	; 0x28
    6960:	b200      	sxth	r0, r0
    6962:	9008      	str	r0, [sp, #32]
    6964:	8058      	strh	r0, [r3, #2]
    draw_area.x2 -= disp_area->x1;
    6966:	8898      	ldrh	r0, [r3, #4]
    6968:	1a80      	subs	r0, r0, r2
    696a:	b280      	uxth	r0, r0
    696c:	8098      	strh	r0, [r3, #4]
    draw_area.y2 -= disp_area->y1;
    696e:	88da      	ldrh	r2, [r3, #6]
    6970:	1a52      	subs	r2, r2, r1
    6972:	b292      	uxth	r2, r2
    6974:	920b      	str	r2, [sp, #44]	; 0x2c
    6976:	b212      	sxth	r2, r2
    6978:	920c      	str	r2, [sp, #48]	; 0x30
    697a:	80da      	strh	r2, [r3, #6]
    if(mask && disp->driver.antialiasing == 0)
    697c:	2d00      	cmp	r5, #0
    697e:	d014      	beq.n	69aa <_lv_blend_map+0xc2>
    6980:	4643      	mov	r3, r8
    6982:	7a1b      	ldrb	r3, [r3, #8]
    6984:	07db      	lsls	r3, r3, #31
    6986:	d410      	bmi.n	69aa <_lv_blend_map+0xc2>
    6988:	1c41      	adds	r1, r0, #1
    698a:	4663      	mov	r3, ip
    698c:	1ac9      	subs	r1, r1, r3
    698e:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    6990:	2900      	cmp	r1, #0
    6992:	dd0a      	ble.n	69aa <_lv_blend_map+0xc2>
    6994:	002b      	movs	r3, r5
    6996:	1869      	adds	r1, r5, r1
    6998:	2280      	movs	r2, #128	; 0x80
    699a:	4694      	mov	ip, r2
    699c:	781a      	ldrb	r2, [r3, #0]
    699e:	4594      	cmp	ip, r2
    69a0:	4192      	sbcs	r2, r2
    69a2:	701a      	strb	r2, [r3, #0]
    69a4:	3301      	adds	r3, #1
    69a6:	428b      	cmp	r3, r1
    69a8:	d1f8      	bne.n	699c <_lv_blend_map+0xb4>
    if(disp->driver.set_px_cb) {
    69aa:	4643      	mov	r3, r8
    69ac:	695b      	ldr	r3, [r3, #20]
    69ae:	2b00      	cmp	r3, #0
    69b0:	d100      	bne.n	69b4 <_lv_blend_map+0xcc>
    69b2:	e0c3      	b.n	6b3c <_lv_blend_map+0x254>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    69b4:	4bb5      	ldr	r3, [pc, #724]	; (6c8c <_lv_blend_map+0x3a4>)
    69b6:	4798      	blx	r3
    69b8:	900c      	str	r0, [sp, #48]	; 0x30
    69ba:	464b      	mov	r3, r9
    69bc:	2210      	movs	r2, #16
    69be:	5e9b      	ldrsh	r3, [r3, r2]
    69c0:	4698      	mov	r8, r3
    69c2:	464b      	mov	r3, r9
    69c4:	8a9b      	ldrh	r3, [r3, #20]
    69c6:	3301      	adds	r3, #1
    69c8:	4642      	mov	r2, r8
    69ca:	1a9b      	subs	r3, r3, r2
    69cc:	b21b      	sxth	r3, r3
    69ce:	9306      	str	r3, [sp, #24]
    69d0:	a910      	add	r1, sp, #64	; 0x40
    69d2:	2300      	movs	r3, #0
    69d4:	5ec8      	ldrsh	r0, [r1, r3]
    69d6:	2300      	movs	r3, #0
    69d8:	5ee2      	ldrsh	r2, [r4, r3]
    69da:	88a3      	ldrh	r3, [r4, #4]
    69dc:	3301      	adds	r3, #1
    69de:	1a9b      	subs	r3, r3, r2
    69e0:	b21b      	sxth	r3, r3
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    69e2:	2602      	movs	r6, #2
    69e4:	5f89      	ldrsh	r1, [r1, r6]
    69e6:	9109      	str	r1, [sp, #36]	; 0x24
    69e8:	2602      	movs	r6, #2
    69ea:	5fa4      	ldrsh	r4, [r4, r6]
    69ec:	46a4      	mov	ip, r4
    69ee:	464e      	mov	r6, r9
    69f0:	2412      	movs	r4, #18
    69f2:	5f36      	ldrsh	r6, [r6, r4]
    69f4:	4664      	mov	r4, ip
    69f6:	1ba4      	subs	r4, r4, r6
    69f8:	1b0c      	subs	r4, r1, r4
    69fa:	435c      	muls	r4, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    69fc:	4646      	mov	r6, r8
    69fe:	1b92      	subs	r2, r2, r6
    map_buf_tmp -= draw_area->x1;
    6a00:	1aa4      	subs	r4, r4, r2
    6a02:	0064      	lsls	r4, r4, #1
    6a04:	9a07      	ldr	r2, [sp, #28]
    6a06:	4694      	mov	ip, r2
    6a08:	44a4      	add	ip, r4
    6a0a:	4662      	mov	r2, ip
    6a0c:	9208      	str	r2, [sp, #32]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    6a0e:	2f01      	cmp	r7, #1
    6a10:	d053      	beq.n	6aba <_lv_blend_map+0x1d2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    6a12:	1a2a      	subs	r2, r5, r0
    6a14:	4690      	mov	r8, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6a16:	aa10      	add	r2, sp, #64	; 0x40
    6a18:	2406      	movs	r4, #6
    6a1a:	5f12      	ldrsh	r2, [r2, r4]
    6a1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6a1e:	4294      	cmp	r4, r2
    6a20:	dd00      	ble.n	6a24 <_lv_blend_map+0x13c>
    6a22:	e777      	b.n	6914 <_lv_blend_map+0x2c>
    6a24:	aa10      	add	r2, sp, #64	; 0x40
    6a26:	2404      	movs	r4, #4
    6a28:	5f12      	ldrsh	r2, [r2, r4]
            map_buf_tmp += map_w;
    6a2a:	005b      	lsls	r3, r3, #1
    6a2c:	930a      	str	r3, [sp, #40]	; 0x28
    6a2e:	9109      	str	r1, [sp, #36]	; 0x24
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6a30:	ab10      	add	r3, sp, #64	; 0x40
    6a32:	9307      	str	r3, [sp, #28]
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    6a34:	ab01      	add	r3, sp, #4
    6a36:	469a      	mov	sl, r3
    6a38:	3201      	adds	r2, #1
    6a3a:	1a13      	subs	r3, r2, r0
            mask_tmp += draw_area_w;
    6a3c:	b21b      	sxth	r3, r3
    6a3e:	930b      	str	r3, [sp, #44]	; 0x2c
    6a40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6a42:	9a07      	ldr	r2, [sp, #28]
    6a44:	0013      	movs	r3, r2
    6a46:	2500      	movs	r5, #0
    6a48:	5f5d      	ldrsh	r5, [r3, r5]
    6a4a:	002c      	movs	r4, r5
    6a4c:	0013      	movs	r3, r2
    6a4e:	2204      	movs	r2, #4
    6a50:	5e9b      	ldrsh	r3, [r3, r2]
    6a52:	429d      	cmp	r5, r3
    6a54:	dc1f      	bgt.n	6a96 <_lv_blend_map+0x1ae>
    6a56:	006d      	lsls	r5, r5, #1
    6a58:	9b08      	ldr	r3, [sp, #32]
    6a5a:	469c      	mov	ip, r3
    6a5c:	4465      	add	r5, ip
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    6a5e:	466b      	mov	r3, sp
    6a60:	2224      	movs	r2, #36	; 0x24
    6a62:	5e9b      	ldrsh	r3, [r3, r2]
    6a64:	4699      	mov	r9, r3
    6a66:	b223      	sxth	r3, r4
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    6a68:	4642      	mov	r2, r8
    6a6a:	5d12      	ldrb	r2, [r2, r4]
    6a6c:	4659      	mov	r1, fp
    6a6e:	434a      	muls	r2, r1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    6a70:	0a12      	lsrs	r2, r2, #8
    6a72:	9202      	str	r2, [sp, #8]
    6a74:	882a      	ldrh	r2, [r5, #0]
    6a76:	4651      	mov	r1, sl
    6a78:	800a      	strh	r2, [r1, #0]
    6a7a:	464a      	mov	r2, r9
    6a7c:	9200      	str	r2, [sp, #0]
    6a7e:	9a06      	ldr	r2, [sp, #24]
    6a80:	9905      	ldr	r1, [sp, #20]
    6a82:	0030      	movs	r0, r6
    6a84:	6977      	ldr	r7, [r6, #20]
    6a86:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6a88:	3401      	adds	r4, #1
    6a8a:	3502      	adds	r5, #2
    6a8c:	9b07      	ldr	r3, [sp, #28]
    6a8e:	2204      	movs	r2, #4
    6a90:	5e9b      	ldrsh	r3, [r3, r2]
    6a92:	429c      	cmp	r4, r3
    6a94:	dde7      	ble.n	6a66 <_lv_blend_map+0x17e>
    6a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a98:	469c      	mov	ip, r3
    6a9a:	44e0      	add	r8, ip
            map_buf_tmp += map_w;
    6a9c:	9b08      	ldr	r3, [sp, #32]
    6a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6aa0:	4694      	mov	ip, r2
    6aa2:	4463      	add	r3, ip
    6aa4:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6aa8:	3301      	adds	r3, #1
    6aaa:	001a      	movs	r2, r3
    6aac:	9309      	str	r3, [sp, #36]	; 0x24
    6aae:	9b07      	ldr	r3, [sp, #28]
    6ab0:	2106      	movs	r1, #6
    6ab2:	5e5b      	ldrsh	r3, [r3, r1]
    6ab4:	429a      	cmp	r2, r3
    6ab6:	ddc4      	ble.n	6a42 <_lv_blend_map+0x15a>
    6ab8:	e72c      	b.n	6914 <_lv_blend_map+0x2c>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6aba:	aa10      	add	r2, sp, #64	; 0x40
    6abc:	2006      	movs	r0, #6
    6abe:	5e12      	ldrsh	r2, [r2, r0]
    6ac0:	428a      	cmp	r2, r1
    6ac2:	da00      	bge.n	6ac6 <_lv_blend_map+0x1de>
    6ac4:	e726      	b.n	6914 <_lv_blend_map+0x2c>
            map_buf_tmp += map_w;
    6ac6:	005b      	lsls	r3, r3, #1
    6ac8:	9309      	str	r3, [sp, #36]	; 0x24
    6aca:	468a      	mov	sl, r1
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6acc:	ab10      	add	r3, sp, #64	; 0x40
    6ace:	9307      	str	r3, [sp, #28]
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
    6ad0:	ab01      	add	r3, sp, #4
    6ad2:	4699      	mov	r9, r3
    6ad4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6ad6:	9a07      	ldr	r2, [sp, #28]
    6ad8:	0013      	movs	r3, r2
    6ada:	2700      	movs	r7, #0
    6adc:	5fdf      	ldrsh	r7, [r3, r7]
    6ade:	003c      	movs	r4, r7
    6ae0:	0013      	movs	r3, r2
    6ae2:	2204      	movs	r2, #4
    6ae4:	5e9b      	ldrsh	r3, [r3, r2]
    6ae6:	429f      	cmp	r7, r3
    6ae8:	dc1a      	bgt.n	6b20 <_lv_blend_map+0x238>
    6aea:	007f      	lsls	r7, r7, #1
    6aec:	9b08      	ldr	r3, [sp, #32]
    6aee:	469c      	mov	ip, r3
    6af0:	4467      	add	r7, ip
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
    6af2:	4653      	mov	r3, sl
    6af4:	b21b      	sxth	r3, r3
    6af6:	4698      	mov	r8, r3
    6af8:	b223      	sxth	r3, r4
    6afa:	465a      	mov	r2, fp
    6afc:	9202      	str	r2, [sp, #8]
    6afe:	883a      	ldrh	r2, [r7, #0]
    6b00:	4649      	mov	r1, r9
    6b02:	800a      	strh	r2, [r1, #0]
    6b04:	4642      	mov	r2, r8
    6b06:	9200      	str	r2, [sp, #0]
    6b08:	9a06      	ldr	r2, [sp, #24]
    6b0a:	9905      	ldr	r1, [sp, #20]
    6b0c:	0030      	movs	r0, r6
    6b0e:	6975      	ldr	r5, [r6, #20]
    6b10:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    6b12:	3401      	adds	r4, #1
    6b14:	3702      	adds	r7, #2
    6b16:	9b07      	ldr	r3, [sp, #28]
    6b18:	2204      	movs	r2, #4
    6b1a:	5e9b      	ldrsh	r3, [r3, r2]
    6b1c:	429c      	cmp	r4, r3
    6b1e:	ddeb      	ble.n	6af8 <_lv_blend_map+0x210>
            map_buf_tmp += map_w;
    6b20:	9b08      	ldr	r3, [sp, #32]
    6b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6b24:	4694      	mov	ip, r2
    6b26:	4463      	add	r3, ip
    6b28:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6b2a:	2301      	movs	r3, #1
    6b2c:	469c      	mov	ip, r3
    6b2e:	44e2      	add	sl, ip
    6b30:	9b07      	ldr	r3, [sp, #28]
    6b32:	2206      	movs	r2, #6
    6b34:	5e9b      	ldrsh	r3, [r3, r2]
    6b36:	459a      	cmp	sl, r3
    6b38:	ddcd      	ble.n	6ad6 <_lv_blend_map+0x1ee>
    6b3a:	e6eb      	b.n	6914 <_lv_blend_map+0x2c>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    6b3c:	2e00      	cmp	r6, #0
    6b3e:	d001      	beq.n	6b44 <_lv_blend_map+0x25c>
    6b40:	f000 fbfd 	bl	733e <_lv_blend_map+0xa56>
    6b44:	464b      	mov	r3, r9
    6b46:	2210      	movs	r2, #16
    6b48:	5e9b      	ldrsh	r3, [r3, r2]
    6b4a:	001a      	movs	r2, r3
    6b4c:	464b      	mov	r3, r9
    6b4e:	8a9b      	ldrh	r3, [r3, #20]
    6b50:	3301      	adds	r3, #1
    6b52:	920d      	str	r2, [sp, #52]	; 0x34
    6b54:	1a9b      	subs	r3, r3, r2
    6b56:	b21b      	sxth	r3, r3
    6b58:	4698      	mov	r8, r3
    6b5a:	3001      	adds	r0, #1
    6b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b5e:	1ac0      	subs	r0, r0, r3
    6b60:	b203      	sxth	r3, r0
    6b62:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t draw_area_w = lv_area_get_width(draw_area);
    6b64:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    6b66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6b68:	3001      	adds	r0, #1
    6b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6b6c:	1ac0      	subs	r0, r0, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
    6b6e:	b203      	sxth	r3, r0
    6b70:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    6b72:	2300      	movs	r3, #0
    6b74:	5ee2      	ldrsh	r2, [r4, r3]
    6b76:	88a6      	ldrh	r6, [r4, #4]
    6b78:	3601      	adds	r6, #1
    6b7a:	1ab6      	subs	r6, r6, r2
    6b7c:	b236      	sxth	r6, r6
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    6b7e:	9808      	ldr	r0, [sp, #32]
    6b80:	0003      	movs	r3, r0
    6b82:	4641      	mov	r1, r8
    6b84:	434b      	muls	r3, r1
    6b86:	4453      	add	r3, sl
    6b88:	005b      	lsls	r3, r3, #1
    6b8a:	9905      	ldr	r1, [sp, #20]
    6b8c:	468c      	mov	ip, r1
    6b8e:	449c      	add	ip, r3
    6b90:	4663      	mov	r3, ip
    6b92:	9308      	str	r3, [sp, #32]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    6b94:	2102      	movs	r1, #2
    6b96:	5e63      	ldrsh	r3, [r4, r1]
    6b98:	4649      	mov	r1, r9
    6b9a:	2412      	movs	r4, #18
    6b9c:	5f09      	ldrsh	r1, [r1, r4]
    6b9e:	1a5b      	subs	r3, r3, r1
    6ba0:	1ac3      	subs	r3, r0, r3
    6ba2:	4373      	muls	r3, r6
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    6ba4:	990d      	ldr	r1, [sp, #52]	; 0x34
    6ba6:	1a52      	subs	r2, r2, r1
    6ba8:	4651      	mov	r1, sl
    6baa:	1a8a      	subs	r2, r1, r2
    6bac:	189b      	adds	r3, r3, r2
    6bae:	005b      	lsls	r3, r3, #1
    6bb0:	9a07      	ldr	r2, [sp, #28]
    6bb2:	4694      	mov	ip, r2
    6bb4:	449c      	add	ip, r3
    6bb6:	4663      	mov	r3, ip
    6bb8:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    6bba:	4b34      	ldr	r3, [pc, #208]	; (6c8c <_lv_blend_map+0x3a4>)
    6bbc:	4798      	blx	r3
    6bbe:	0004      	movs	r4, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    6bc0:	2f01      	cmp	r7, #1
    6bc2:	d015      	beq.n	6bf0 <_lv_blend_map+0x308>
        if(opa > LV_OPA_MAX) {
    6bc4:	465b      	mov	r3, fp
    6bc6:	2bfa      	cmp	r3, #250	; 0xfa
    6bc8:	d900      	bls.n	6bcc <_lv_blend_map+0x2e4>
    6bca:	e0eb      	b.n	6da4 <_lv_blend_map+0x4bc>
            for(y = 0; y < draw_area_h; y++) {
    6bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6bce:	2b00      	cmp	r3, #0
    6bd0:	dc00      	bgt.n	6bd4 <_lv_blend_map+0x2ec>
    6bd2:	e69f      	b.n	6914 <_lv_blend_map+0x2c>
                disp_buf_first += disp_w;
    6bd4:	4643      	mov	r3, r8
    6bd6:	005b      	lsls	r3, r3, #1
    6bd8:	930e      	str	r3, [sp, #56]	; 0x38
                map_buf_first += map_w;
    6bda:	0073      	lsls	r3, r6, #1
    6bdc:	930f      	str	r3, [sp, #60]	; 0x3c
    6bde:	46a9      	mov	r9, r5
    6be0:	2300      	movs	r3, #0
    6be2:	930d      	str	r3, [sp, #52]	; 0x34
    6be4:	331f      	adds	r3, #31
    6be6:	4698      	mov	r8, r3
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    6be8:	465b      	mov	r3, fp
    6bea:	9307      	str	r3, [sp, #28]
    6bec:	930a      	str	r3, [sp, #40]	; 0x28
    6bee:	e39a      	b.n	7326 <_lv_blend_map+0xa3e>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
    6bf0:	6a03      	ldr	r3, [r0, #32]
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	d02a      	beq.n	6c4c <_lv_blend_map+0x364>
    6bf6:	a810      	add	r0, sp, #64	; 0x40
    6bf8:	4b26      	ldr	r3, [pc, #152]	; (6c94 <_lv_blend_map+0x3ac>)
    6bfa:	4798      	blx	r3
    6bfc:	28f0      	cmp	r0, #240	; 0xf0
    6bfe:	d925      	bls.n	6c4c <_lv_blend_map+0x364>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6c00:	ab10      	add	r3, sp, #64	; 0x40
    6c02:	2202      	movs	r2, #2
    6c04:	5e9f      	ldrsh	r7, [r3, r2]
    6c06:	2206      	movs	r2, #6
    6c08:	5e9b      	ldrsh	r3, [r3, r2]
    6c0a:	429f      	cmp	r7, r3
    6c0c:	dd00      	ble.n	6c10 <_lv_blend_map+0x328>
    6c0e:	e681      	b.n	6914 <_lv_blend_map+0x2c>
                disp_buf_first += disp_w;
    6c10:	4643      	mov	r3, r8
    6c12:	005b      	lsls	r3, r3, #1
    6c14:	4698      	mov	r8, r3
                map_buf_first += map_w;
    6c16:	0076      	lsls	r6, r6, #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6c18:	ab10      	add	r3, sp, #64	; 0x40
    6c1a:	9305      	str	r3, [sp, #20]
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
    6c1c:	465b      	mov	r3, fp
    6c1e:	9300      	str	r3, [sp, #0]
    6c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6c24:	4692      	mov	sl, r2
    6c26:	9908      	ldr	r1, [sp, #32]
    6c28:	4689      	mov	r9, r1
    6c2a:	0020      	movs	r0, r4
    6c2c:	6a25      	ldr	r5, [r4, #32]
    6c2e:	47a8      	blx	r5
                disp_buf_first += disp_w;
    6c30:	464b      	mov	r3, r9
    6c32:	4443      	add	r3, r8
    6c34:	9308      	str	r3, [sp, #32]
                map_buf_first += map_w;
    6c36:	46d4      	mov	ip, sl
    6c38:	44b4      	add	ip, r6
    6c3a:	4663      	mov	r3, ip
    6c3c:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    6c3e:	3701      	adds	r7, #1
    6c40:	9b05      	ldr	r3, [sp, #20]
    6c42:	2206      	movs	r2, #6
    6c44:	5e9b      	ldrsh	r3, [r3, r2]
    6c46:	429f      	cmp	r7, r3
    6c48:	dde8      	ble.n	6c1c <_lv_blend_map+0x334>
    6c4a:	e663      	b.n	6914 <_lv_blend_map+0x2c>
        if(opa > LV_OPA_MAX) {
    6c4c:	465b      	mov	r3, fp
    6c4e:	2bfa      	cmp	r3, #250	; 0xfa
    6c50:	d824      	bhi.n	6c9c <_lv_blend_map+0x3b4>
            for(y = 0; y < draw_area_h; y++) {
    6c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6c54:	2b00      	cmp	r3, #0
    6c56:	dc00      	bgt.n	6c5a <_lv_blend_map+0x372>
    6c58:	e65c      	b.n	6914 <_lv_blend_map+0x2c>
                disp_buf_first += disp_w;
    6c5a:	4643      	mov	r3, r8
    6c5c:	005b      	lsls	r3, r3, #1
    6c5e:	930a      	str	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
    6c60:	0073      	lsls	r3, r6, #1
    6c62:	930d      	str	r3, [sp, #52]	; 0x34
    6c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c66:	005b      	lsls	r3, r3, #1
    6c68:	930c      	str	r3, [sp, #48]	; 0x30
    6c6a:	2300      	movs	r3, #0
    6c6c:	9307      	str	r3, [sp, #28]
    6c6e:	27ff      	movs	r7, #255	; 0xff
    6c70:	465b      	mov	r3, fp
    6c72:	1aff      	subs	r7, r7, r3
    6c74:	231f      	movs	r3, #31
    6c76:	469c      	mov	ip, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6c78:	3320      	adds	r3, #32
    6c7a:	4699      	mov	r9, r3
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
    6c7c:	4b06      	ldr	r3, [pc, #24]	; (6c98 <_lv_blend_map+0x3b0>)
    6c7e:	469a      	mov	sl, r3
    6c80:	46b8      	mov	r8, r7
    6c82:	465f      	mov	r7, fp
    6c84:	e03b      	b.n	6cfe <_lv_blend_map+0x416>
    6c86:	46c0      	nop			; (mov r8, r8)
    6c88:	0000fba7 	.word	0x0000fba7
    6c8c:	00004349 	.word	0x00004349
    6c90:	0000f6a1 	.word	0x0000f6a1
    6c94:	0000fb8b 	.word	0x0000fb8b
    6c98:	fffff81f 	.word	0xfffff81f
            for(y = 0; y < draw_area_h; y++) {
    6c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	dc00      	bgt.n	6ca4 <_lv_blend_map+0x3bc>
    6ca2:	e637      	b.n	6914 <_lv_blend_map+0x2c>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    6ca4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ca6:	005c      	lsls	r4, r3, #1
                disp_buf_first += disp_w;
    6ca8:	4643      	mov	r3, r8
    6caa:	005b      	lsls	r3, r3, #1
    6cac:	4698      	mov	r8, r3
                map_buf_first += map_w;
    6cae:	0076      	lsls	r6, r6, #1
    6cb0:	2500      	movs	r5, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    6cb2:	4f80      	ldr	r7, [pc, #512]	; (6eb4 <_lv_blend_map+0x5cc>)
    6cb4:	0022      	movs	r2, r4
    6cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6cb8:	469a      	mov	sl, r3
    6cba:	0019      	movs	r1, r3
    6cbc:	9b08      	ldr	r3, [sp, #32]
    6cbe:	4699      	mov	r9, r3
    6cc0:	0018      	movs	r0, r3
    6cc2:	47b8      	blx	r7
                disp_buf_first += disp_w;
    6cc4:	464b      	mov	r3, r9
    6cc6:	4443      	add	r3, r8
    6cc8:	9308      	str	r3, [sp, #32]
                map_buf_first += map_w;
    6cca:	46d4      	mov	ip, sl
    6ccc:	44b4      	add	ip, r6
    6cce:	4663      	mov	r3, ip
    6cd0:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
    6cd2:	3501      	adds	r5, #1
    6cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6cd6:	42ab      	cmp	r3, r5
    6cd8:	dcec      	bgt.n	6cb4 <_lv_blend_map+0x3cc>
    6cda:	e61b      	b.n	6914 <_lv_blend_map+0x2c>
                disp_buf_first += disp_w;
    6cdc:	9b08      	ldr	r3, [sp, #32]
    6cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ce0:	4693      	mov	fp, r2
    6ce2:	445b      	add	r3, fp
    6ce4:	9308      	str	r3, [sp, #32]
                map_buf_first += map_w;
    6ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6cea:	4693      	mov	fp, r2
    6cec:	445b      	add	r3, fp
    6cee:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
    6cf0:	9b07      	ldr	r3, [sp, #28]
    6cf2:	3301      	adds	r3, #1
    6cf4:	9307      	str	r3, [sp, #28]
    6cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6cf8:	429a      	cmp	r2, r3
    6cfa:	dc00      	bgt.n	6cfe <_lv_blend_map+0x416>
    6cfc:	e60a      	b.n	6914 <_lv_blend_map+0x2c>
                for(x = 0; x < draw_area_w; x++) {
    6cfe:	9b06      	ldr	r3, [sp, #24]
    6d00:	2b00      	cmp	r3, #0
    6d02:	ddeb      	ble.n	6cdc <_lv_blend_map+0x3f4>
    6d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d06:	001e      	movs	r6, r3
    6d08:	9d08      	ldr	r5, [sp, #32]
    6d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6d0c:	4693      	mov	fp, r2
    6d0e:	445b      	add	r3, fp
    6d10:	469b      	mov	fp, r3
    6d12:	4641      	mov	r1, r8
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6d14:	7873      	ldrb	r3, [r6, #1]
    6d16:	08db      	lsrs	r3, r3, #3
    6d18:	437b      	muls	r3, r7
    6d1a:	786a      	ldrb	r2, [r5, #1]
    6d1c:	08d2      	lsrs	r2, r2, #3
    6d1e:	434a      	muls	r2, r1
    6d20:	189a      	adds	r2, r3, r2
    6d22:	0213      	lsls	r3, r2, #8
    6d24:	189b      	adds	r3, r3, r2
    6d26:	01db      	lsls	r3, r3, #7
    6d28:	189b      	adds	r3, r3, r2
    6d2a:	0ddb      	lsrs	r3, r3, #23
    6d2c:	4662      	mov	r2, ip
    6d2e:	4013      	ands	r3, r2
    6d30:	9305      	str	r3, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6d32:	8832      	ldrh	r2, [r6, #0]
    6d34:	0552      	lsls	r2, r2, #21
    6d36:	0e92      	lsrs	r2, r2, #26
    6d38:	437a      	muls	r2, r7
    6d3a:	882c      	ldrh	r4, [r5, #0]
    6d3c:	0564      	lsls	r4, r4, #21
    6d3e:	0ea4      	lsrs	r4, r4, #26
    6d40:	434c      	muls	r4, r1
    6d42:	1914      	adds	r4, r2, r4
    6d44:	0222      	lsls	r2, r4, #8
    6d46:	1912      	adds	r2, r2, r4
    6d48:	01d2      	lsls	r2, r2, #7
    6d4a:	1912      	adds	r2, r2, r4
    6d4c:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6d4e:	7834      	ldrb	r4, [r6, #0]
    6d50:	06e4      	lsls	r4, r4, #27
    6d52:	0ee4      	lsrs	r4, r4, #27
    6d54:	437c      	muls	r4, r7
    6d56:	7828      	ldrb	r0, [r5, #0]
    6d58:	4680      	mov	r8, r0
    6d5a:	06c0      	lsls	r0, r0, #27
    6d5c:	0ec0      	lsrs	r0, r0, #27
    6d5e:	4348      	muls	r0, r1
    6d60:	1820      	adds	r0, r4, r0
    6d62:	0204      	lsls	r4, r0, #8
    6d64:	1824      	adds	r4, r4, r0
    6d66:	01e4      	lsls	r4, r4, #7
    6d68:	1824      	adds	r4, r4, r0
    6d6a:	0de4      	lsrs	r4, r4, #23
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
    6d6c:	4660      	mov	r0, ip
    6d6e:	4004      	ands	r4, r0
    6d70:	4640      	mov	r0, r8
    6d72:	4663      	mov	r3, ip
    6d74:	4398      	bics	r0, r3
    6d76:	4304      	orrs	r4, r0
    6d78:	702c      	strb	r4, [r5, #0]
    6d7a:	464b      	mov	r3, r9
    6d7c:	401a      	ands	r2, r3
    6d7e:	0154      	lsls	r4, r2, #5
    6d80:	882a      	ldrh	r2, [r5, #0]
    6d82:	4653      	mov	r3, sl
    6d84:	401a      	ands	r2, r3
    6d86:	4322      	orrs	r2, r4
    6d88:	802a      	strh	r2, [r5, #0]
    6d8a:	9b05      	ldr	r3, [sp, #20]
    6d8c:	00db      	lsls	r3, r3, #3
    6d8e:	0a12      	lsrs	r2, r2, #8
    6d90:	2007      	movs	r0, #7
    6d92:	4002      	ands	r2, r0
    6d94:	4313      	orrs	r3, r2
    6d96:	706b      	strb	r3, [r5, #1]
    6d98:	3602      	adds	r6, #2
    6d9a:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w; x++) {
    6d9c:	455e      	cmp	r6, fp
    6d9e:	d1b9      	bne.n	6d14 <_lv_blend_map+0x42c>
    6da0:	4688      	mov	r8, r1
    6da2:	e79b      	b.n	6cdc <_lv_blend_map+0x3f4>
            int32_t x_end4 = draw_area_w - 4;
    6da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6da6:	3b04      	subs	r3, #4
    6da8:	9307      	str	r3, [sp, #28]
            for(y = 0; y < draw_area_h; y++) {
    6daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6dac:	2b00      	cmp	r3, #0
    6dae:	dc00      	bgt.n	6db2 <_lv_blend_map+0x4ca>
    6db0:	e5b0      	b.n	6914 <_lv_blend_map+0x2c>
                disp_buf_first += disp_w;
    6db2:	4643      	mov	r3, r8
    6db4:	005b      	lsls	r3, r3, #1
    6db6:	930e      	str	r3, [sp, #56]	; 0x38
                map_buf_first += map_w;
    6db8:	0073      	lsls	r3, r6, #1
    6dba:	930f      	str	r3, [sp, #60]	; 0x3c
    6dbc:	950a      	str	r5, [sp, #40]	; 0x28
    6dbe:	2300      	movs	r3, #0
    6dc0:	930d      	str	r3, [sp, #52]	; 0x34
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6dc2:	331f      	adds	r3, #31
    6dc4:	469b      	mov	fp, r3
    6dc6:	9b06      	ldr	r3, [sp, #24]
    6dc8:	4699      	mov	r9, r3
    6dca:	e3a6      	b.n	751a <_lv_blend_map+0xc32>
                    MAP_NORMAL_MASK_PX(x)
    6dcc:	8803      	ldrh	r3, [r0, #0]
    6dce:	800b      	strh	r3, [r1, #0]
    6dd0:	3701      	adds	r7, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    6dd2:	3601      	adds	r6, #1
    6dd4:	9b05      	ldr	r3, [sp, #20]
    6dd6:	42b3      	cmp	r3, r6
    6dd8:	dc00      	bgt.n	6ddc <_lv_blend_map+0x4f4>
    6dda:	e381      	b.n	74e0 <_lv_blend_map+0xbf8>
    6ddc:	3002      	adds	r0, #2
    6dde:	3102      	adds	r1, #2
    6de0:	2303      	movs	r3, #3
    6de2:	421f      	tst	r7, r3
    6de4:	d053      	beq.n	6e8e <_lv_blend_map+0x5a6>
                    MAP_NORMAL_MASK_PX(x)
    6de6:	783d      	ldrb	r5, [r7, #0]
    6de8:	2d00      	cmp	r5, #0
    6dea:	d0f1      	beq.n	6dd0 <_lv_blend_map+0x4e8>
    6dec:	2dff      	cmp	r5, #255	; 0xff
    6dee:	d0ed      	beq.n	6dcc <_lv_blend_map+0x4e4>
    6df0:	23ff      	movs	r3, #255	; 0xff
    6df2:	1b5b      	subs	r3, r3, r5
    6df4:	4699      	mov	r9, r3
    6df6:	7843      	ldrb	r3, [r0, #1]
    6df8:	08db      	lsrs	r3, r3, #3
    6dfa:	436b      	muls	r3, r5
    6dfc:	784a      	ldrb	r2, [r1, #1]
    6dfe:	08d2      	lsrs	r2, r2, #3
    6e00:	464c      	mov	r4, r9
    6e02:	4362      	muls	r2, r4
    6e04:	189a      	adds	r2, r3, r2
    6e06:	0213      	lsls	r3, r2, #8
    6e08:	189b      	adds	r3, r3, r2
    6e0a:	01db      	lsls	r3, r3, #7
    6e0c:	189b      	adds	r3, r3, r2
    6e0e:	0ddb      	lsrs	r3, r3, #23
    6e10:	465a      	mov	r2, fp
    6e12:	4013      	ands	r3, r2
    6e14:	9306      	str	r3, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6e16:	8802      	ldrh	r2, [r0, #0]
    6e18:	0552      	lsls	r2, r2, #21
    6e1a:	0e92      	lsrs	r2, r2, #26
    6e1c:	436a      	muls	r2, r5
    6e1e:	4694      	mov	ip, r2
    6e20:	880a      	ldrh	r2, [r1, #0]
    6e22:	0552      	lsls	r2, r2, #21
    6e24:	0e92      	lsrs	r2, r2, #26
    6e26:	4362      	muls	r2, r4
    6e28:	4462      	add	r2, ip
    6e2a:	0214      	lsls	r4, r2, #8
    6e2c:	46a4      	mov	ip, r4
    6e2e:	4494      	add	ip, r2
    6e30:	4664      	mov	r4, ip
    6e32:	01e4      	lsls	r4, r4, #7
    6e34:	46a4      	mov	ip, r4
    6e36:	4462      	add	r2, ip
    6e38:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6e3a:	7804      	ldrb	r4, [r0, #0]
    6e3c:	06e4      	lsls	r4, r4, #27
    6e3e:	0ee4      	lsrs	r4, r4, #27
    6e40:	4365      	muls	r5, r4
    6e42:	780c      	ldrb	r4, [r1, #0]
    6e44:	46a4      	mov	ip, r4
    6e46:	06e4      	lsls	r4, r4, #27
    6e48:	0ee4      	lsrs	r4, r4, #27
    6e4a:	46a0      	mov	r8, r4
    6e4c:	464c      	mov	r4, r9
    6e4e:	4643      	mov	r3, r8
    6e50:	435c      	muls	r4, r3
    6e52:	46a0      	mov	r8, r4
    6e54:	44a8      	add	r8, r5
    6e56:	4643      	mov	r3, r8
    6e58:	021d      	lsls	r5, r3, #8
    6e5a:	4445      	add	r5, r8
    6e5c:	01ed      	lsls	r5, r5, #7
    6e5e:	4445      	add	r5, r8
    6e60:	0ded      	lsrs	r5, r5, #23
    6e62:	465b      	mov	r3, fp
    6e64:	401d      	ands	r5, r3
    6e66:	4664      	mov	r4, ip
    6e68:	439c      	bics	r4, r3
    6e6a:	4325      	orrs	r5, r4
    6e6c:	700d      	strb	r5, [r1, #0]
    6e6e:	233f      	movs	r3, #63	; 0x3f
    6e70:	401a      	ands	r2, r3
    6e72:	0155      	lsls	r5, r2, #5
    6e74:	880a      	ldrh	r2, [r1, #0]
    6e76:	4653      	mov	r3, sl
    6e78:	401a      	ands	r2, r3
    6e7a:	432a      	orrs	r2, r5
    6e7c:	800a      	strh	r2, [r1, #0]
    6e7e:	9b06      	ldr	r3, [sp, #24]
    6e80:	00db      	lsls	r3, r3, #3
    6e82:	0a12      	lsrs	r2, r2, #8
    6e84:	2407      	movs	r4, #7
    6e86:	4022      	ands	r2, r4
    6e88:	4313      	orrs	r3, r2
    6e8a:	704b      	strb	r3, [r1, #1]
    6e8c:	e7a0      	b.n	6dd0 <_lv_blend_map+0x4e8>
    6e8e:	9b05      	ldr	r3, [sp, #20]
    6e90:	4699      	mov	r9, r3
                for(; x < x_end4; x += 4) {
    6e92:	9b07      	ldr	r3, [sp, #28]
    6e94:	42b3      	cmp	r3, r6
    6e96:	dc00      	bgt.n	6e9a <_lv_blend_map+0x5b2>
    6e98:	e319      	b.n	74ce <_lv_blend_map+0xbe6>
    6e9a:	0070      	lsls	r0, r6, #1
    6e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6e9e:	181c      	adds	r4, r3, r0
    6ea0:	9b08      	ldr	r3, [sp, #32]
    6ea2:	469c      	mov	ip, r3
    6ea4:	4460      	add	r0, ip
                            MAP_NORMAL_MASK_PX(x + 3)
    6ea6:	4b04      	ldr	r3, [pc, #16]	; (6eb8 <_lv_blend_map+0x5d0>)
    6ea8:	469a      	mov	sl, r3
    6eaa:	464b      	mov	r3, r9
    6eac:	9306      	str	r3, [sp, #24]
    6eae:	9605      	str	r6, [sp, #20]
    6eb0:	e016      	b.n	6ee0 <_lv_blend_map+0x5f8>
    6eb2:	46c0      	nop			; (mov r8, r8)
    6eb4:	00010c25 	.word	0x00010c25
    6eb8:	fffff81f 	.word	0xfffff81f
                            disp_buf_first[x] = map_buf_first[x];
    6ebc:	8823      	ldrh	r3, [r4, #0]
    6ebe:	8003      	strh	r3, [r0, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
    6ec0:	8863      	ldrh	r3, [r4, #2]
    6ec2:	8043      	strh	r3, [r0, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
    6ec4:	88a3      	ldrh	r3, [r4, #4]
    6ec6:	8083      	strh	r3, [r0, #4]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
    6ec8:	88e3      	ldrh	r3, [r4, #6]
    6eca:	80c3      	strh	r3, [r0, #6]
                    mask32++;
    6ecc:	3704      	adds	r7, #4
                for(; x < x_end4; x += 4) {
    6ece:	9a05      	ldr	r2, [sp, #20]
    6ed0:	3204      	adds	r2, #4
    6ed2:	9205      	str	r2, [sp, #20]
    6ed4:	3408      	adds	r4, #8
    6ed6:	3008      	adds	r0, #8
    6ed8:	9b07      	ldr	r3, [sp, #28]
    6eda:	4293      	cmp	r3, r2
    6edc:	dc00      	bgt.n	6ee0 <_lv_blend_map+0x5f8>
    6ede:	e14b      	b.n	7178 <_lv_blend_map+0x890>
                    if(*mask32) {
    6ee0:	683b      	ldr	r3, [r7, #0]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d0f2      	beq.n	6ecc <_lv_blend_map+0x5e4>
                        if((*mask32) == 0xFFFFFFFF) {
    6ee6:	3301      	adds	r3, #1
    6ee8:	d0e8      	beq.n	6ebc <_lv_blend_map+0x5d4>
                            MAP_NORMAL_MASK_PX(x)
    6eea:	7839      	ldrb	r1, [r7, #0]
    6eec:	2900      	cmp	r1, #0
    6eee:	d049      	beq.n	6f84 <_lv_blend_map+0x69c>
    6ef0:	29ff      	cmp	r1, #255	; 0xff
    6ef2:	d100      	bne.n	6ef6 <_lv_blend_map+0x60e>
    6ef4:	e134      	b.n	7160 <_lv_blend_map+0x878>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6ef6:	23ff      	movs	r3, #255	; 0xff
    6ef8:	1a5d      	subs	r5, r3, r1
    6efa:	7862      	ldrb	r2, [r4, #1]
    6efc:	08d2      	lsrs	r2, r2, #3
    6efe:	0013      	movs	r3, r2
    6f00:	434b      	muls	r3, r1
    6f02:	7842      	ldrb	r2, [r0, #1]
    6f04:	08d2      	lsrs	r2, r2, #3
    6f06:	436a      	muls	r2, r5
    6f08:	189a      	adds	r2, r3, r2
    6f0a:	0213      	lsls	r3, r2, #8
    6f0c:	189b      	adds	r3, r3, r2
    6f0e:	01db      	lsls	r3, r3, #7
    6f10:	189b      	adds	r3, r3, r2
    6f12:	0ddb      	lsrs	r3, r3, #23
    6f14:	465a      	mov	r2, fp
    6f16:	4013      	ands	r3, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6f18:	8822      	ldrh	r2, [r4, #0]
    6f1a:	0552      	lsls	r2, r2, #21
    6f1c:	0e92      	lsrs	r2, r2, #26
    6f1e:	434a      	muls	r2, r1
    6f20:	4694      	mov	ip, r2
    6f22:	8802      	ldrh	r2, [r0, #0]
    6f24:	0552      	lsls	r2, r2, #21
    6f26:	0e92      	lsrs	r2, r2, #26
    6f28:	436a      	muls	r2, r5
    6f2a:	4462      	add	r2, ip
    6f2c:	0216      	lsls	r6, r2, #8
    6f2e:	46b4      	mov	ip, r6
    6f30:	4494      	add	ip, r2
    6f32:	4666      	mov	r6, ip
    6f34:	01f6      	lsls	r6, r6, #7
    6f36:	46b4      	mov	ip, r6
    6f38:	4462      	add	r2, ip
    6f3a:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6f3c:	7826      	ldrb	r6, [r4, #0]
    6f3e:	06f6      	lsls	r6, r6, #27
    6f40:	0ef6      	lsrs	r6, r6, #27
    6f42:	4371      	muls	r1, r6
    6f44:	7806      	ldrb	r6, [r0, #0]
    6f46:	46b4      	mov	ip, r6
    6f48:	06f6      	lsls	r6, r6, #27
    6f4a:	0ef6      	lsrs	r6, r6, #27
    6f4c:	4375      	muls	r5, r6
    6f4e:	194d      	adds	r5, r1, r5
    6f50:	0229      	lsls	r1, r5, #8
    6f52:	1949      	adds	r1, r1, r5
    6f54:	01c9      	lsls	r1, r1, #7
    6f56:	1949      	adds	r1, r1, r5
    6f58:	0dc9      	lsrs	r1, r1, #23
    6f5a:	465d      	mov	r5, fp
    6f5c:	4029      	ands	r1, r5
    6f5e:	4665      	mov	r5, ip
    6f60:	465e      	mov	r6, fp
    6f62:	43b5      	bics	r5, r6
    6f64:	4329      	orrs	r1, r5
    6f66:	7001      	strb	r1, [r0, #0]
    6f68:	213f      	movs	r1, #63	; 0x3f
    6f6a:	400a      	ands	r2, r1
    6f6c:	0151      	lsls	r1, r2, #5
    6f6e:	8802      	ldrh	r2, [r0, #0]
    6f70:	4655      	mov	r5, sl
    6f72:	402a      	ands	r2, r5
    6f74:	430a      	orrs	r2, r1
    6f76:	8002      	strh	r2, [r0, #0]
    6f78:	00db      	lsls	r3, r3, #3
    6f7a:	0a12      	lsrs	r2, r2, #8
    6f7c:	2107      	movs	r1, #7
    6f7e:	400a      	ands	r2, r1
    6f80:	4313      	orrs	r3, r2
    6f82:	7043      	strb	r3, [r0, #1]
                            MAP_NORMAL_MASK_PX(x + 1)
    6f84:	7879      	ldrb	r1, [r7, #1]
    6f86:	2900      	cmp	r1, #0
    6f88:	d04b      	beq.n	7022 <_lv_blend_map+0x73a>
    6f8a:	29ff      	cmp	r1, #255	; 0xff
    6f8c:	d100      	bne.n	6f90 <_lv_blend_map+0x6a8>
    6f8e:	e0ea      	b.n	7166 <_lv_blend_map+0x87e>
    6f90:	1c83      	adds	r3, r0, #2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    6f92:	22ff      	movs	r2, #255	; 0xff
    6f94:	1a55      	subs	r5, r2, r1
    6f96:	78e2      	ldrb	r2, [r4, #3]
    6f98:	08d2      	lsrs	r2, r2, #3
    6f9a:	434a      	muls	r2, r1
    6f9c:	4698      	mov	r8, r3
    6f9e:	78c3      	ldrb	r3, [r0, #3]
    6fa0:	08db      	lsrs	r3, r3, #3
    6fa2:	436b      	muls	r3, r5
    6fa4:	18d2      	adds	r2, r2, r3
    6fa6:	0213      	lsls	r3, r2, #8
    6fa8:	189b      	adds	r3, r3, r2
    6faa:	01db      	lsls	r3, r3, #7
    6fac:	189b      	adds	r3, r3, r2
    6fae:	0ddb      	lsrs	r3, r3, #23
    6fb0:	465a      	mov	r2, fp
    6fb2:	4013      	ands	r3, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    6fb4:	8862      	ldrh	r2, [r4, #2]
    6fb6:	0552      	lsls	r2, r2, #21
    6fb8:	0e92      	lsrs	r2, r2, #26
    6fba:	434a      	muls	r2, r1
    6fbc:	4694      	mov	ip, r2
    6fbe:	8842      	ldrh	r2, [r0, #2]
    6fc0:	0552      	lsls	r2, r2, #21
    6fc2:	0e92      	lsrs	r2, r2, #26
    6fc4:	436a      	muls	r2, r5
    6fc6:	4462      	add	r2, ip
    6fc8:	0216      	lsls	r6, r2, #8
    6fca:	46b4      	mov	ip, r6
    6fcc:	4494      	add	ip, r2
    6fce:	4666      	mov	r6, ip
    6fd0:	01f6      	lsls	r6, r6, #7
    6fd2:	46b4      	mov	ip, r6
    6fd4:	4462      	add	r2, ip
    6fd6:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    6fd8:	78a6      	ldrb	r6, [r4, #2]
    6fda:	06f6      	lsls	r6, r6, #27
    6fdc:	0ef6      	lsrs	r6, r6, #27
    6fde:	4371      	muls	r1, r6
    6fe0:	7886      	ldrb	r6, [r0, #2]
    6fe2:	46b4      	mov	ip, r6
    6fe4:	06f6      	lsls	r6, r6, #27
    6fe6:	0ef6      	lsrs	r6, r6, #27
    6fe8:	4375      	muls	r5, r6
    6fea:	194d      	adds	r5, r1, r5
    6fec:	0229      	lsls	r1, r5, #8
    6fee:	1949      	adds	r1, r1, r5
    6ff0:	01c9      	lsls	r1, r1, #7
    6ff2:	1949      	adds	r1, r1, r5
    6ff4:	0dc9      	lsrs	r1, r1, #23
    6ff6:	465d      	mov	r5, fp
    6ff8:	4029      	ands	r1, r5
    6ffa:	4665      	mov	r5, ip
    6ffc:	465e      	mov	r6, fp
    6ffe:	43b5      	bics	r5, r6
    7000:	4329      	orrs	r1, r5
    7002:	7081      	strb	r1, [r0, #2]
    7004:	213f      	movs	r1, #63	; 0x3f
    7006:	400a      	ands	r2, r1
    7008:	0151      	lsls	r1, r2, #5
    700a:	8842      	ldrh	r2, [r0, #2]
    700c:	4655      	mov	r5, sl
    700e:	402a      	ands	r2, r5
    7010:	430a      	orrs	r2, r1
    7012:	8042      	strh	r2, [r0, #2]
    7014:	00db      	lsls	r3, r3, #3
    7016:	0a12      	lsrs	r2, r2, #8
    7018:	2107      	movs	r1, #7
    701a:	400a      	ands	r2, r1
    701c:	4313      	orrs	r3, r2
    701e:	4642      	mov	r2, r8
    7020:	7053      	strb	r3, [r2, #1]
                            MAP_NORMAL_MASK_PX(x + 2)
    7022:	78b9      	ldrb	r1, [r7, #2]
    7024:	2900      	cmp	r1, #0
    7026:	d04b      	beq.n	70c0 <_lv_blend_map+0x7d8>
    7028:	29ff      	cmp	r1, #255	; 0xff
    702a:	d100      	bne.n	702e <_lv_blend_map+0x746>
    702c:	e09e      	b.n	716c <_lv_blend_map+0x884>
    702e:	1d03      	adds	r3, r0, #4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7030:	22ff      	movs	r2, #255	; 0xff
    7032:	1a55      	subs	r5, r2, r1
    7034:	7962      	ldrb	r2, [r4, #5]
    7036:	08d2      	lsrs	r2, r2, #3
    7038:	434a      	muls	r2, r1
    703a:	4698      	mov	r8, r3
    703c:	7943      	ldrb	r3, [r0, #5]
    703e:	08db      	lsrs	r3, r3, #3
    7040:	436b      	muls	r3, r5
    7042:	18d2      	adds	r2, r2, r3
    7044:	0213      	lsls	r3, r2, #8
    7046:	189b      	adds	r3, r3, r2
    7048:	01db      	lsls	r3, r3, #7
    704a:	189b      	adds	r3, r3, r2
    704c:	0ddb      	lsrs	r3, r3, #23
    704e:	465a      	mov	r2, fp
    7050:	4013      	ands	r3, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7052:	88a2      	ldrh	r2, [r4, #4]
    7054:	0552      	lsls	r2, r2, #21
    7056:	0e92      	lsrs	r2, r2, #26
    7058:	434a      	muls	r2, r1
    705a:	4694      	mov	ip, r2
    705c:	8882      	ldrh	r2, [r0, #4]
    705e:	0552      	lsls	r2, r2, #21
    7060:	0e92      	lsrs	r2, r2, #26
    7062:	436a      	muls	r2, r5
    7064:	4462      	add	r2, ip
    7066:	0216      	lsls	r6, r2, #8
    7068:	46b4      	mov	ip, r6
    706a:	4494      	add	ip, r2
    706c:	4666      	mov	r6, ip
    706e:	01f6      	lsls	r6, r6, #7
    7070:	46b4      	mov	ip, r6
    7072:	4462      	add	r2, ip
    7074:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7076:	7926      	ldrb	r6, [r4, #4]
    7078:	06f6      	lsls	r6, r6, #27
    707a:	0ef6      	lsrs	r6, r6, #27
    707c:	4371      	muls	r1, r6
    707e:	7906      	ldrb	r6, [r0, #4]
    7080:	46b4      	mov	ip, r6
    7082:	06f6      	lsls	r6, r6, #27
    7084:	0ef6      	lsrs	r6, r6, #27
    7086:	4375      	muls	r5, r6
    7088:	194d      	adds	r5, r1, r5
    708a:	0229      	lsls	r1, r5, #8
    708c:	1949      	adds	r1, r1, r5
    708e:	01c9      	lsls	r1, r1, #7
    7090:	1949      	adds	r1, r1, r5
    7092:	0dc9      	lsrs	r1, r1, #23
    7094:	465d      	mov	r5, fp
    7096:	4029      	ands	r1, r5
    7098:	4665      	mov	r5, ip
    709a:	465e      	mov	r6, fp
    709c:	43b5      	bics	r5, r6
    709e:	4329      	orrs	r1, r5
    70a0:	7101      	strb	r1, [r0, #4]
    70a2:	213f      	movs	r1, #63	; 0x3f
    70a4:	400a      	ands	r2, r1
    70a6:	0151      	lsls	r1, r2, #5
    70a8:	8882      	ldrh	r2, [r0, #4]
    70aa:	4655      	mov	r5, sl
    70ac:	402a      	ands	r2, r5
    70ae:	430a      	orrs	r2, r1
    70b0:	8082      	strh	r2, [r0, #4]
    70b2:	00db      	lsls	r3, r3, #3
    70b4:	0a12      	lsrs	r2, r2, #8
    70b6:	2107      	movs	r1, #7
    70b8:	400a      	ands	r2, r1
    70ba:	4313      	orrs	r3, r2
    70bc:	4642      	mov	r2, r8
    70be:	7053      	strb	r3, [r2, #1]
                            MAP_NORMAL_MASK_PX(x + 3)
    70c0:	78f9      	ldrb	r1, [r7, #3]
    70c2:	2900      	cmp	r1, #0
    70c4:	d100      	bne.n	70c8 <_lv_blend_map+0x7e0>
    70c6:	e701      	b.n	6ecc <_lv_blend_map+0x5e4>
    70c8:	29ff      	cmp	r1, #255	; 0xff
    70ca:	d052      	beq.n	7172 <_lv_blend_map+0x88a>
    70cc:	1d83      	adds	r3, r0, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    70ce:	22ff      	movs	r2, #255	; 0xff
    70d0:	1a55      	subs	r5, r2, r1
    70d2:	79e2      	ldrb	r2, [r4, #7]
    70d4:	08d2      	lsrs	r2, r2, #3
    70d6:	434a      	muls	r2, r1
    70d8:	4698      	mov	r8, r3
    70da:	79c3      	ldrb	r3, [r0, #7]
    70dc:	08db      	lsrs	r3, r3, #3
    70de:	436b      	muls	r3, r5
    70e0:	18d2      	adds	r2, r2, r3
    70e2:	0213      	lsls	r3, r2, #8
    70e4:	189b      	adds	r3, r3, r2
    70e6:	01db      	lsls	r3, r3, #7
    70e8:	189b      	adds	r3, r3, r2
    70ea:	0ddb      	lsrs	r3, r3, #23
    70ec:	465a      	mov	r2, fp
    70ee:	4013      	ands	r3, r2
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    70f0:	88e2      	ldrh	r2, [r4, #6]
    70f2:	0552      	lsls	r2, r2, #21
    70f4:	0e92      	lsrs	r2, r2, #26
    70f6:	434a      	muls	r2, r1
    70f8:	4694      	mov	ip, r2
    70fa:	88c2      	ldrh	r2, [r0, #6]
    70fc:	0552      	lsls	r2, r2, #21
    70fe:	0e92      	lsrs	r2, r2, #26
    7100:	436a      	muls	r2, r5
    7102:	4462      	add	r2, ip
    7104:	0216      	lsls	r6, r2, #8
    7106:	46b4      	mov	ip, r6
    7108:	4494      	add	ip, r2
    710a:	4666      	mov	r6, ip
    710c:	01f6      	lsls	r6, r6, #7
    710e:	46b4      	mov	ip, r6
    7110:	4462      	add	r2, ip
    7112:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7114:	79a6      	ldrb	r6, [r4, #6]
    7116:	06f6      	lsls	r6, r6, #27
    7118:	0ef6      	lsrs	r6, r6, #27
    711a:	4371      	muls	r1, r6
    711c:	7986      	ldrb	r6, [r0, #6]
    711e:	46b4      	mov	ip, r6
    7120:	06f6      	lsls	r6, r6, #27
    7122:	0ef6      	lsrs	r6, r6, #27
    7124:	4375      	muls	r5, r6
    7126:	194d      	adds	r5, r1, r5
    7128:	0229      	lsls	r1, r5, #8
    712a:	1949      	adds	r1, r1, r5
    712c:	01c9      	lsls	r1, r1, #7
    712e:	1949      	adds	r1, r1, r5
    7130:	0dc9      	lsrs	r1, r1, #23
    7132:	465d      	mov	r5, fp
    7134:	4029      	ands	r1, r5
    7136:	4665      	mov	r5, ip
    7138:	465e      	mov	r6, fp
    713a:	43b5      	bics	r5, r6
    713c:	4329      	orrs	r1, r5
    713e:	7181      	strb	r1, [r0, #6]
    7140:	213f      	movs	r1, #63	; 0x3f
    7142:	400a      	ands	r2, r1
    7144:	0151      	lsls	r1, r2, #5
    7146:	88c2      	ldrh	r2, [r0, #6]
    7148:	4655      	mov	r5, sl
    714a:	402a      	ands	r2, r5
    714c:	430a      	orrs	r2, r1
    714e:	80c2      	strh	r2, [r0, #6]
    7150:	00db      	lsls	r3, r3, #3
    7152:	0a12      	lsrs	r2, r2, #8
    7154:	2107      	movs	r1, #7
    7156:	400a      	ands	r2, r1
    7158:	4313      	orrs	r3, r2
    715a:	4642      	mov	r2, r8
    715c:	7053      	strb	r3, [r2, #1]
    715e:	e6b5      	b.n	6ecc <_lv_blend_map+0x5e4>
                            MAP_NORMAL_MASK_PX(x)
    7160:	8823      	ldrh	r3, [r4, #0]
    7162:	8003      	strh	r3, [r0, #0]
    7164:	e70e      	b.n	6f84 <_lv_blend_map+0x69c>
                            MAP_NORMAL_MASK_PX(x + 1)
    7166:	8863      	ldrh	r3, [r4, #2]
    7168:	8043      	strh	r3, [r0, #2]
    716a:	e75a      	b.n	7022 <_lv_blend_map+0x73a>
                            MAP_NORMAL_MASK_PX(x + 2)
    716c:	88a3      	ldrh	r3, [r4, #4]
    716e:	8083      	strh	r3, [r0, #4]
    7170:	e7a6      	b.n	70c0 <_lv_blend_map+0x7d8>
                            MAP_NORMAL_MASK_PX(x + 3)
    7172:	88e3      	ldrh	r3, [r4, #6]
    7174:	80c3      	strh	r3, [r0, #6]
    7176:	e6a9      	b.n	6ecc <_lv_blend_map+0x5e4>
    7178:	9b06      	ldr	r3, [sp, #24]
    717a:	4699      	mov	r9, r3
    717c:	0016      	movs	r6, r2
                for(; x < draw_area_w ; x++) {
    717e:	4293      	cmp	r3, r2
    7180:	dc00      	bgt.n	7184 <_lv_blend_map+0x89c>
    7182:	e1b3      	b.n	74ec <_lv_blend_map+0xc04>
                    mask32++;
    7184:	003b      	movs	r3, r7
    7186:	0077      	lsls	r7, r6, #1
    7188:	9a09      	ldr	r2, [sp, #36]	; 0x24
    718a:	4690      	mov	r8, r2
    718c:	44b8      	add	r8, r7
    718e:	9a08      	ldr	r2, [sp, #32]
    7190:	4694      	mov	ip, r2
    7192:	4467      	add	r7, ip
                    MAP_NORMAL_MASK_PX(x)
    7194:	1b9b      	subs	r3, r3, r6
    7196:	9305      	str	r3, [sp, #20]
    7198:	4bce      	ldr	r3, [pc, #824]	; (74d4 <_lv_blend_map+0xbec>)
    719a:	469a      	mov	sl, r3
    719c:	2307      	movs	r3, #7
    719e:	469c      	mov	ip, r3
    71a0:	4644      	mov	r4, r8
    71a2:	e007      	b.n	71b4 <_lv_blend_map+0x8cc>
    71a4:	8823      	ldrh	r3, [r4, #0]
    71a6:	803b      	strh	r3, [r7, #0]
                for(; x < draw_area_w ; x++) {
    71a8:	3601      	adds	r6, #1
    71aa:	3402      	adds	r4, #2
    71ac:	3702      	adds	r7, #2
    71ae:	45b1      	cmp	r9, r6
    71b0:	dc00      	bgt.n	71b4 <_lv_blend_map+0x8cc>
    71b2:	e19b      	b.n	74ec <_lv_blend_map+0xc04>
                    MAP_NORMAL_MASK_PX(x)
    71b4:	9b05      	ldr	r3, [sp, #20]
    71b6:	5d99      	ldrb	r1, [r3, r6]
    71b8:	2900      	cmp	r1, #0
    71ba:	d0f5      	beq.n	71a8 <_lv_blend_map+0x8c0>
    71bc:	29ff      	cmp	r1, #255	; 0xff
    71be:	d0f1      	beq.n	71a4 <_lv_blend_map+0x8bc>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    71c0:	23ff      	movs	r3, #255	; 0xff
    71c2:	1a58      	subs	r0, r3, r1
    71c4:	7862      	ldrb	r2, [r4, #1]
    71c6:	08d2      	lsrs	r2, r2, #3
    71c8:	434a      	muls	r2, r1
    71ca:	0015      	movs	r5, r2
    71cc:	787a      	ldrb	r2, [r7, #1]
    71ce:	08d2      	lsrs	r2, r2, #3
    71d0:	4342      	muls	r2, r0
    71d2:	18ad      	adds	r5, r5, r2
    71d4:	022b      	lsls	r3, r5, #8
    71d6:	195b      	adds	r3, r3, r5
    71d8:	01db      	lsls	r3, r3, #7
    71da:	195b      	adds	r3, r3, r5
    71dc:	0ddb      	lsrs	r3, r3, #23
    71de:	465a      	mov	r2, fp
    71e0:	4013      	ands	r3, r2
    71e2:	9306      	str	r3, [sp, #24]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    71e4:	8825      	ldrh	r5, [r4, #0]
    71e6:	056d      	lsls	r5, r5, #21
    71e8:	0ead      	lsrs	r5, r5, #26
    71ea:	434d      	muls	r5, r1
    71ec:	883a      	ldrh	r2, [r7, #0]
    71ee:	0552      	lsls	r2, r2, #21
    71f0:	0e92      	lsrs	r2, r2, #26
    71f2:	4342      	muls	r2, r0
    71f4:	18ad      	adds	r5, r5, r2
    71f6:	022a      	lsls	r2, r5, #8
    71f8:	1952      	adds	r2, r2, r5
    71fa:	01d2      	lsls	r2, r2, #7
    71fc:	1952      	adds	r2, r2, r5
    71fe:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7200:	7825      	ldrb	r5, [r4, #0]
    7202:	06ed      	lsls	r5, r5, #27
    7204:	0eed      	lsrs	r5, r5, #27
    7206:	4369      	muls	r1, r5
    7208:	783d      	ldrb	r5, [r7, #0]
    720a:	06eb      	lsls	r3, r5, #27
    720c:	0edb      	lsrs	r3, r3, #27
    720e:	4358      	muls	r0, r3
    7210:	1808      	adds	r0, r1, r0
    7212:	0201      	lsls	r1, r0, #8
    7214:	1809      	adds	r1, r1, r0
    7216:	01c9      	lsls	r1, r1, #7
    7218:	1809      	adds	r1, r1, r0
    721a:	0dc9      	lsrs	r1, r1, #23
    721c:	465b      	mov	r3, fp
    721e:	4019      	ands	r1, r3
    7220:	439d      	bics	r5, r3
    7222:	4329      	orrs	r1, r5
    7224:	7039      	strb	r1, [r7, #0]
    7226:	233f      	movs	r3, #63	; 0x3f
    7228:	401a      	ands	r2, r3
    722a:	0151      	lsls	r1, r2, #5
    722c:	883a      	ldrh	r2, [r7, #0]
    722e:	4653      	mov	r3, sl
    7230:	401a      	ands	r2, r3
    7232:	430a      	orrs	r2, r1
    7234:	803a      	strh	r2, [r7, #0]
    7236:	9b06      	ldr	r3, [sp, #24]
    7238:	00db      	lsls	r3, r3, #3
    723a:	0a12      	lsrs	r2, r2, #8
    723c:	4661      	mov	r1, ip
    723e:	400a      	ands	r2, r1
    7240:	4313      	orrs	r3, r2
    7242:	707b      	strb	r3, [r7, #1]
    7244:	e7b0      	b.n	71a8 <_lv_blend_map+0x8c0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7246:	23ff      	movs	r3, #255	; 0xff
    7248:	1a1d      	subs	r5, r3, r0
    724a:	784b      	ldrb	r3, [r1, #1]
    724c:	08db      	lsrs	r3, r3, #3
    724e:	4343      	muls	r3, r0
    7250:	7872      	ldrb	r2, [r6, #1]
    7252:	08d2      	lsrs	r2, r2, #3
    7254:	436a      	muls	r2, r5
    7256:	189a      	adds	r2, r3, r2
    7258:	0213      	lsls	r3, r2, #8
    725a:	189b      	adds	r3, r3, r2
    725c:	01db      	lsls	r3, r3, #7
    725e:	189b      	adds	r3, r3, r2
    7260:	0ddb      	lsrs	r3, r3, #23
    7262:	4642      	mov	r2, r8
    7264:	4013      	ands	r3, r2
    7266:	9305      	str	r3, [sp, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7268:	880a      	ldrh	r2, [r1, #0]
    726a:	0552      	lsls	r2, r2, #21
    726c:	0e92      	lsrs	r2, r2, #26
    726e:	4342      	muls	r2, r0
    7270:	4691      	mov	r9, r2
    7272:	8832      	ldrh	r2, [r6, #0]
    7274:	0552      	lsls	r2, r2, #21
    7276:	0e92      	lsrs	r2, r2, #26
    7278:	436a      	muls	r2, r5
    727a:	444a      	add	r2, r9
    727c:	0213      	lsls	r3, r2, #8
    727e:	4699      	mov	r9, r3
    7280:	4491      	add	r9, r2
    7282:	464b      	mov	r3, r9
    7284:	01db      	lsls	r3, r3, #7
    7286:	4699      	mov	r9, r3
    7288:	444a      	add	r2, r9
    728a:	0dd2      	lsrs	r2, r2, #23
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    728c:	780b      	ldrb	r3, [r1, #0]
    728e:	06db      	lsls	r3, r3, #27
    7290:	0edb      	lsrs	r3, r3, #27
    7292:	4343      	muls	r3, r0
    7294:	4699      	mov	r9, r3
    7296:	7833      	ldrb	r3, [r6, #0]
    7298:	469c      	mov	ip, r3
    729a:	06db      	lsls	r3, r3, #27
    729c:	0edb      	lsrs	r3, r3, #27
    729e:	435d      	muls	r5, r3
    72a0:	44a9      	add	r9, r5
    72a2:	464b      	mov	r3, r9
    72a4:	021d      	lsls	r5, r3, #8
    72a6:	444d      	add	r5, r9
    72a8:	01ed      	lsls	r5, r5, #7
    72aa:	444d      	add	r5, r9
    72ac:	0ded      	lsrs	r5, r5, #23
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
    72ae:	4643      	mov	r3, r8
    72b0:	401d      	ands	r5, r3
    72b2:	4663      	mov	r3, ip
    72b4:	4640      	mov	r0, r8
    72b6:	4383      	bics	r3, r0
    72b8:	431d      	orrs	r5, r3
    72ba:	7035      	strb	r5, [r6, #0]
    72bc:	233f      	movs	r3, #63	; 0x3f
    72be:	401a      	ands	r2, r3
    72c0:	0155      	lsls	r5, r2, #5
    72c2:	8832      	ldrh	r2, [r6, #0]
    72c4:	4b83      	ldr	r3, [pc, #524]	; (74d4 <_lv_blend_map+0xbec>)
    72c6:	401a      	ands	r2, r3
    72c8:	432a      	orrs	r2, r5
    72ca:	8032      	strh	r2, [r6, #0]
    72cc:	9b05      	ldr	r3, [sp, #20]
    72ce:	00db      	lsls	r3, r3, #3
    72d0:	0a12      	lsrs	r2, r2, #8
    72d2:	4658      	mov	r0, fp
    72d4:	4002      	ands	r2, r0
    72d6:	4313      	orrs	r3, r2
    72d8:	7073      	strb	r3, [r6, #1]
                for(x = 0; x < draw_area_w; x++) {
    72da:	3701      	adds	r7, #1
    72dc:	3102      	adds	r1, #2
    72de:	3602      	adds	r6, #2
    72e0:	9b06      	ldr	r3, [sp, #24]
    72e2:	42bb      	cmp	r3, r7
    72e4:	dd09      	ble.n	72fa <_lv_blend_map+0xa12>
                    if(mask[x]) {
    72e6:	5de5      	ldrb	r5, [r4, r7]
    72e8:	2d00      	cmp	r5, #0
    72ea:	d0f6      	beq.n	72da <_lv_blend_map+0x9f2>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    72ec:	9807      	ldr	r0, [sp, #28]
    72ee:	2df9      	cmp	r5, #249	; 0xf9
    72f0:	d8a9      	bhi.n	7246 <_lv_blend_map+0x95e>
    72f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72f4:	435d      	muls	r5, r3
    72f6:	0a28      	lsrs	r0, r5, #8
    72f8:	e7a5      	b.n	7246 <_lv_blend_map+0x95e>
    72fa:	46a1      	mov	r9, r4
                disp_buf_first += disp_w;
    72fc:	9b08      	ldr	r3, [sp, #32]
    72fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7300:	4694      	mov	ip, r2
    7302:	4463      	add	r3, ip
    7304:	9308      	str	r3, [sp, #32]
    7306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7308:	469c      	mov	ip, r3
    730a:	44e1      	add	r9, ip
                map_buf_first += map_w;
    730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    730e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7310:	4694      	mov	ip, r2
    7312:	4463      	add	r3, ip
    7314:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
    7316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7318:	3301      	adds	r3, #1
    731a:	930d      	str	r3, [sp, #52]	; 0x34
    731c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    731e:	429a      	cmp	r2, r3
    7320:	dc01      	bgt.n	7326 <_lv_blend_map+0xa3e>
    7322:	f7ff faf7 	bl	6914 <_lv_blend_map+0x2c>
                for(x = 0; x < draw_area_w; x++) {
    7326:	9b06      	ldr	r3, [sp, #24]
    7328:	2b00      	cmp	r3, #0
    732a:	dde7      	ble.n	72fc <_lv_blend_map+0xa14>
    732c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    732e:	469c      	mov	ip, r3
    7330:	9e08      	ldr	r6, [sp, #32]
    7332:	2700      	movs	r7, #0
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
    7334:	2307      	movs	r3, #7
    7336:	469b      	mov	fp, r3
    7338:	4661      	mov	r1, ip
    733a:	464c      	mov	r4, r9
    733c:	e7d3      	b.n	72e6 <_lv_blend_map+0x9fe>
    switch(mode) {
    733e:	2e01      	cmp	r6, #1
    7340:	d04d      	beq.n	73de <_lv_blend_map+0xaf6>
    7342:	2e02      	cmp	r6, #2
    7344:	d001      	beq.n	734a <_lv_blend_map+0xa62>
    7346:	f7ff fae5 	bl	6914 <_lv_blend_map+0x2c>
            blend_fp = color_blend_true_color_subtractive;
    734a:	4b63      	ldr	r3, [pc, #396]	; (74d8 <_lv_blend_map+0xbf0>)
    734c:	930a      	str	r3, [sp, #40]	; 0x28
    734e:	464b      	mov	r3, r9
    7350:	2210      	movs	r2, #16
    7352:	5e9b      	ldrsh	r3, [r3, r2]
    7354:	001a      	movs	r2, r3
    7356:	930b      	str	r3, [sp, #44]	; 0x2c
    7358:	464b      	mov	r3, r9
    735a:	8a9b      	ldrh	r3, [r3, #20]
    735c:	3301      	adds	r3, #1
    735e:	1a9b      	subs	r3, r3, r2
    7360:	b21b      	sxth	r3, r3
    7362:	469c      	mov	ip, r3
    7364:	2300      	movs	r3, #0
    7366:	5ee2      	ldrsh	r2, [r4, r3]
    7368:	920d      	str	r2, [sp, #52]	; 0x34
    736a:	88a3      	ldrh	r3, [r4, #4]
    736c:	3301      	adds	r3, #1
    736e:	1a9b      	subs	r3, r3, r2
    7370:	b219      	sxth	r1, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    7372:	9e08      	ldr	r6, [sp, #32]
    7374:	4662      	mov	r2, ip
    7376:	4372      	muls	r2, r6
    7378:	0053      	lsls	r3, r2, #1
    737a:	9a05      	ldr	r2, [sp, #20]
    737c:	4690      	mov	r8, r2
    737e:	4498      	add	r8, r3
    7380:	4643      	mov	r3, r8
    7382:	9306      	str	r3, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    7384:	2202      	movs	r2, #2
    7386:	5ea3      	ldrsh	r3, [r4, r2]
    7388:	464a      	mov	r2, r9
    738a:	2412      	movs	r4, #18
    738c:	5f14      	ldrsh	r4, [r2, r4]
    738e:	1b1b      	subs	r3, r3, r4
    7390:	1af3      	subs	r3, r6, r3
    7392:	434b      	muls	r3, r1
    7394:	005b      	lsls	r3, r3, #1
    7396:	9a07      	ldr	r2, [sp, #28]
    7398:	18d4      	adds	r4, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    739a:	2f01      	cmp	r7, #1
    739c:	d022      	beq.n	73e4 <_lv_blend_map+0xafc>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    739e:	4653      	mov	r3, sl
    73a0:	1aeb      	subs	r3, r5, r3
    73a2:	001a      	movs	r2, r3
        map_buf_tmp -= draw_area->x1;
    73a4:	4653      	mov	r3, sl
    73a6:	005b      	lsls	r3, r3, #1
    73a8:	1ae3      	subs	r3, r4, r3
    73aa:	4699      	mov	r9, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    73ac:	9b08      	ldr	r3, [sp, #32]
    73ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    73b0:	42a3      	cmp	r3, r4
    73b2:	dd01      	ble.n	73b8 <_lv_blend_map+0xad0>
    73b4:	f7ff faae 	bl	6914 <_lv_blend_map+0x2c>
            disp_buf_tmp += disp_w;
    73b8:	4663      	mov	r3, ip
    73ba:	005b      	lsls	r3, r3, #1
    73bc:	4698      	mov	r8, r3
            map_buf_tmp += map_w;
    73be:	004b      	lsls	r3, r1, #1
    73c0:	9307      	str	r3, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    73c2:	af10      	add	r7, sp, #64	; 0x40
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    73c4:	465b      	mov	r3, fp
    73c6:	9305      	str	r3, [sp, #20]
    73c8:	3001      	adds	r0, #1
    73ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    73cc:	1ac0      	subs	r0, r0, r3
            mask_tmp += draw_area_w;
    73ce:	b203      	sxth	r3, r0
    73d0:	9309      	str	r3, [sp, #36]	; 0x24
    73d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73d4:	469a      	mov	sl, r3
    73d6:	4643      	mov	r3, r8
    73d8:	930a      	str	r3, [sp, #40]	; 0x28
    73da:	4690      	mov	r8, r2
    73dc:	e068      	b.n	74b0 <_lv_blend_map+0xbc8>
            blend_fp = color_blend_true_color_additive;
    73de:	4b3f      	ldr	r3, [pc, #252]	; (74dc <_lv_blend_map+0xbf4>)
    73e0:	930a      	str	r3, [sp, #40]	; 0x28
    73e2:	e7b4      	b.n	734e <_lv_blend_map+0xa66>
        map_buf_tmp -= draw_area->x1;
    73e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    73e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    73e8:	1a9b      	subs	r3, r3, r2
    73ea:	005b      	lsls	r3, r3, #1
    73ec:	46a1      	mov	r9, r4
    73ee:	4499      	add	r9, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    73f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    73f2:	4296      	cmp	r6, r2
    73f4:	dd01      	ble.n	73fa <_lv_blend_map+0xb12>
    73f6:	f7ff fa8d 	bl	6914 <_lv_blend_map+0x2c>
            disp_buf_tmp += disp_w;
    73fa:	4663      	mov	r3, ip
    73fc:	005b      	lsls	r3, r3, #1
    73fe:	469a      	mov	sl, r3
            map_buf_tmp += map_w;
    7400:	004b      	lsls	r3, r1, #1
    7402:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7404:	af10      	add	r7, sp, #64	; 0x40
    7406:	465b      	mov	r3, fp
    7408:	9305      	str	r3, [sp, #20]
    740a:	46d3      	mov	fp, sl
    740c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    740e:	469a      	mov	sl, r3
    7410:	2300      	movs	r3, #0
    7412:	5efd      	ldrsh	r5, [r7, r3]
    7414:	002e      	movs	r6, r5
    7416:	2204      	movs	r2, #4
    7418:	5ebb      	ldrsh	r3, [r7, r2]
    741a:	429d      	cmp	r5, r3
    741c:	dc0f      	bgt.n	743e <_lv_blend_map+0xb56>
    741e:	006d      	lsls	r5, r5, #1
    7420:	9b06      	ldr	r3, [sp, #24]
    7422:	195c      	adds	r4, r3, r5
    7424:	444d      	add	r5, r9
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
    7426:	8821      	ldrh	r1, [r4, #0]
    7428:	8828      	ldrh	r0, [r5, #0]
    742a:	9a05      	ldr	r2, [sp, #20]
    742c:	47d0      	blx	sl
    742e:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7430:	3601      	adds	r6, #1
    7432:	3402      	adds	r4, #2
    7434:	3502      	adds	r5, #2
    7436:	2204      	movs	r2, #4
    7438:	5ebb      	ldrsh	r3, [r7, r2]
    743a:	429e      	cmp	r6, r3
    743c:	ddf3      	ble.n	7426 <_lv_blend_map+0xb3e>
            disp_buf_tmp += disp_w;
    743e:	9b06      	ldr	r3, [sp, #24]
    7440:	445b      	add	r3, fp
    7442:	9306      	str	r3, [sp, #24]
            map_buf_tmp += map_w;
    7444:	44c1      	add	r9, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7446:	9b08      	ldr	r3, [sp, #32]
    7448:	3301      	adds	r3, #1
    744a:	001a      	movs	r2, r3
    744c:	9308      	str	r3, [sp, #32]
    744e:	2106      	movs	r1, #6
    7450:	5e7b      	ldrsh	r3, [r7, r1]
    7452:	429a      	cmp	r2, r3
    7454:	dddc      	ble.n	7410 <_lv_blend_map+0xb28>
    7456:	f7ff fa5d 	bl	6914 <_lv_blend_map+0x2c>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
    745a:	8831      	ldrh	r1, [r6, #0]
    745c:	8828      	ldrh	r0, [r5, #0]
    745e:	47d0      	blx	sl
    7460:	8030      	strh	r0, [r6, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7462:	3401      	adds	r4, #1
    7464:	3602      	adds	r6, #2
    7466:	3502      	adds	r5, #2
    7468:	2204      	movs	r2, #4
    746a:	5ebb      	ldrsh	r3, [r7, r2]
    746c:	429c      	cmp	r4, r3
    746e:	dc0a      	bgt.n	7486 <_lv_blend_map+0xb9e>
                if(mask_tmp[x] == 0) continue;
    7470:	4643      	mov	r3, r8
    7472:	5d1b      	ldrb	r3, [r3, r4]
    7474:	2b00      	cmp	r3, #0
    7476:	d0f4      	beq.n	7462 <_lv_blend_map+0xb7a>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    7478:	9a05      	ldr	r2, [sp, #20]
    747a:	2bf9      	cmp	r3, #249	; 0xf9
    747c:	d8ed      	bhi.n	745a <_lv_blend_map+0xb72>
    747e:	465a      	mov	r2, fp
    7480:	4353      	muls	r3, r2
    7482:	0a1a      	lsrs	r2, r3, #8
    7484:	e7e9      	b.n	745a <_lv_blend_map+0xb72>
            disp_buf_tmp += disp_w;
    7486:	9b06      	ldr	r3, [sp, #24]
    7488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    748a:	4694      	mov	ip, r2
    748c:	4463      	add	r3, ip
    748e:	9306      	str	r3, [sp, #24]
    7490:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7492:	469c      	mov	ip, r3
    7494:	44e0      	add	r8, ip
            map_buf_tmp += map_w;
    7496:	9b07      	ldr	r3, [sp, #28]
    7498:	469c      	mov	ip, r3
    749a:	44e1      	add	r9, ip
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    749c:	9b08      	ldr	r3, [sp, #32]
    749e:	3301      	adds	r3, #1
    74a0:	001a      	movs	r2, r3
    74a2:	9308      	str	r3, [sp, #32]
    74a4:	2106      	movs	r1, #6
    74a6:	5e7b      	ldrsh	r3, [r7, r1]
    74a8:	429a      	cmp	r2, r3
    74aa:	dd01      	ble.n	74b0 <_lv_blend_map+0xbc8>
    74ac:	f7ff fa32 	bl	6914 <_lv_blend_map+0x2c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    74b0:	2300      	movs	r3, #0
    74b2:	5efd      	ldrsh	r5, [r7, r3]
    74b4:	002c      	movs	r4, r5
    74b6:	2204      	movs	r2, #4
    74b8:	5ebb      	ldrsh	r3, [r7, r2]
    74ba:	429d      	cmp	r5, r3
    74bc:	dce3      	bgt.n	7486 <_lv_blend_map+0xb9e>
    74be:	006d      	lsls	r5, r5, #1
    74c0:	9b06      	ldr	r3, [sp, #24]
    74c2:	195e      	adds	r6, r3, r5
    74c4:	444d      	add	r5, r9
    74c6:	e7d3      	b.n	7470 <_lv_blend_map+0xb88>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    74c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    74ca:	2600      	movs	r6, #0
    74cc:	e4e1      	b.n	6e92 <_lv_blend_map+0x5aa>
                for(; x < x_end4; x += 4) {
    74ce:	003b      	movs	r3, r7
    74d0:	e659      	b.n	7186 <_lv_blend_map+0x89e>
    74d2:	46c0      	nop			; (mov r8, r8)
    74d4:	fffff81f 	.word	0xfffff81f
    74d8:	00005b4f 	.word	0x00005b4f
    74dc:	00005aa9 	.word	0x00005aa9
    74e0:	9b05      	ldr	r3, [sp, #20]
    74e2:	4699      	mov	r9, r3
    74e4:	9b07      	ldr	r3, [sp, #28]
    74e6:	429e      	cmp	r6, r3
    74e8:	da00      	bge.n	74ec <_lv_blend_map+0xc04>
    74ea:	e4d6      	b.n	6e9a <_lv_blend_map+0x5b2>
                disp_buf_first += disp_w;
    74ec:	9b08      	ldr	r3, [sp, #32]
    74ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    74f0:	4694      	mov	ip, r2
    74f2:	4463      	add	r3, ip
    74f4:	9308      	str	r3, [sp, #32]
    74f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    74f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    74fa:	4694      	mov	ip, r2
    74fc:	4463      	add	r3, ip
    74fe:	930a      	str	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
    7500:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7504:	4694      	mov	ip, r2
    7506:	4463      	add	r3, ip
    7508:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < draw_area_h; y++) {
    750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    750c:	3301      	adds	r3, #1
    750e:	930d      	str	r3, [sp, #52]	; 0x34
    7510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7512:	429a      	cmp	r2, r3
    7514:	dc01      	bgt.n	751a <_lv_blend_map+0xc32>
    7516:	f7ff f9fd 	bl	6914 <_lv_blend_map+0x2c>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    751a:	464b      	mov	r3, r9
    751c:	2b00      	cmp	r3, #0
    751e:	dd0f      	ble.n	7540 <_lv_blend_map+0xc58>
    7520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7522:	2203      	movs	r2, #3
    7524:	4213      	tst	r3, r2
    7526:	d0cf      	beq.n	74c8 <_lv_blend_map+0xbe0>
    7528:	9a09      	ldr	r2, [sp, #36]	; 0x24
    752a:	4690      	mov	r8, r2
    752c:	9a08      	ldr	r2, [sp, #32]
    752e:	001f      	movs	r7, r3
    7530:	2600      	movs	r6, #0
                    MAP_NORMAL_MASK_PX(x)
    7532:	4b05      	ldr	r3, [pc, #20]	; (7548 <_lv_blend_map+0xc60>)
    7534:	469a      	mov	sl, r3
    7536:	464b      	mov	r3, r9
    7538:	9305      	str	r3, [sp, #20]
    753a:	4640      	mov	r0, r8
    753c:	0011      	movs	r1, r2
    753e:	e452      	b.n	6de6 <_lv_blend_map+0x4fe>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    7540:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7542:	2600      	movs	r6, #0
    7544:	e7ce      	b.n	74e4 <_lv_blend_map+0xbfc>
    7546:	46c0      	nop			; (mov r8, r8)
    7548:	fffff81f 	.word	0xfffff81f

0000754c <lv_draw_map>:
 * @param antialias anti-alias transformations (rotate, zoom) or not
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              lv_draw_img_dsc_t * draw_dsc, bool chroma_key, bool alpha_byte)
{
    754c:	b5f0      	push	{r4, r5, r6, r7, lr}
    754e:	46de      	mov	lr, fp
    7550:	4657      	mov	r7, sl
    7552:	464e      	mov	r6, r9
    7554:	4645      	mov	r5, r8
    7556:	b5e0      	push	{r5, r6, r7, lr}
    7558:	b0bf      	sub	sp, #252	; 0xfc
    755a:	901c      	str	r0, [sp, #112]	; 0x70
    755c:	0008      	movs	r0, r1
    755e:	9124      	str	r1, [sp, #144]	; 0x90
    7560:	4690      	mov	r8, r2
    7562:	930a      	str	r3, [sp, #40]	; 0x28
    7564:	ab48      	add	r3, sp, #288	; 0x120
    7566:	781b      	ldrb	r3, [r3, #0]
    7568:	930b      	str	r3, [sp, #44]	; 0x2c
    756a:	ab49      	add	r3, sp, #292	; 0x124
    756c:	781b      	ldrb	r3, [r3, #0]
    756e:	9307      	str	r3, [sp, #28]
    7570:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    7572:	a93c      	add	r1, sp, #240	; 0xf0
    7574:	5cc2      	ldrb	r2, [r0, r3]
    7576:	545a      	strb	r2, [r3, r1]
    7578:	3301      	adds	r3, #1
    while(len) {
    757a:	2b08      	cmp	r3, #8
    757c:	d1fa      	bne.n	7574 <lv_draw_map+0x28>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    757e:	4bb7      	ldr	r3, [pc, #732]	; (785c <lv_draw_map+0x310>)
    7580:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    7582:	4bb7      	ldr	r3, [pc, #732]	; (7860 <lv_draw_map+0x314>)
    7584:	4798      	blx	r3
    7586:	9019      	str	r0, [sp, #100]	; 0x64
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    7588:	8a04      	ldrh	r4, [r0, #16]
    758a:	ab3c      	add	r3, sp, #240	; 0xf0
    758c:	881a      	ldrh	r2, [r3, #0]
    758e:	1b12      	subs	r2, r2, r4
    7590:	801a      	strh	r2, [r3, #0]
    draw_area.y1 -= disp_area->y1;
    7592:	8a40      	ldrh	r0, [r0, #18]
    7594:	885a      	ldrh	r2, [r3, #2]
    7596:	1a12      	subs	r2, r2, r0
    7598:	805a      	strh	r2, [r3, #2]
    draw_area.x2 -= disp_area->x1;
    759a:	8899      	ldrh	r1, [r3, #4]
    759c:	1b09      	subs	r1, r1, r4
    759e:	8099      	strh	r1, [r3, #4]
    draw_area.y2 -= disp_area->y1;
    75a0:	88da      	ldrh	r2, [r3, #6]
    75a2:	1a12      	subs	r2, r2, r0
    75a4:	80da      	strh	r2, [r3, #6]

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    75a6:	4baf      	ldr	r3, [pc, #700]	; (7864 <lv_draw_map+0x318>)
    75a8:	4798      	blx	r3
    75aa:	901a      	str	r0, [sp, #104]	; 0x68

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    75ac:	2800      	cmp	r0, #0
    75ae:	d108      	bne.n	75c2 <lv_draw_map+0x76>
    75b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    75b2:	8853      	ldrh	r3, [r2, #2]
    75b4:	2b00      	cmp	r3, #0
    75b6:	d104      	bne.n	75c2 <lv_draw_map+0x76>
    75b8:	3301      	adds	r3, #1
    75ba:	33ff      	adds	r3, #255	; 0xff
    75bc:	8912      	ldrh	r2, [r2, #8]
    75be:	429a      	cmp	r2, r3
    75c0:	d072      	beq.n	76a8 <lv_draw_map+0x15c>
                      draw_dsc->blend_mode);
    }
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    75c2:	9b07      	ldr	r3, [sp, #28]
    75c4:	1e5a      	subs	r2, r3, #1
    75c6:	4193      	sbcs	r3, r2
    75c8:	3302      	adds	r3, #2
    75ca:	4699      	mov	r9, r3
    75cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    75ce:	2200      	movs	r2, #0
    75d0:	5e99      	ldrsh	r1, [r3, r2]
    75d2:	468c      	mov	ip, r1
    75d4:	889f      	ldrh	r7, [r3, #4]
    75d6:	3701      	adds	r7, #1
    75d8:	1a7f      	subs	r7, r7, r1
    75da:	b23f      	sxth	r7, r7

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    75dc:	a93c      	add	r1, sp, #240	; 0xf0
    75de:	2202      	movs	r2, #2
    75e0:	5e8d      	ldrsh	r5, [r1, r2]
    75e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    75e4:	2612      	movs	r6, #18
    75e6:	5f94      	ldrsh	r4, [r2, r6]
    75e8:	46ca      	mov	sl, r9
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    75ea:	2000      	movs	r0, #0
    75ec:	5e0e      	ldrsh	r6, [r1, r0]
    75ee:	2010      	movs	r0, #16
    75f0:	5e12      	ldrsh	r2, [r2, r0]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    75f2:	2002      	movs	r0, #2
    75f4:	5e1b      	ldrsh	r3, [r3, r0]
    75f6:	1b1b      	subs	r3, r3, r4
    75f8:	1aeb      	subs	r3, r5, r3
    75fa:	437b      	muls	r3, r7
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    75fc:	4660      	mov	r0, ip
    75fe:	1a80      	subs	r0, r0, r2
    7600:	1a30      	subs	r0, r6, r0
    7602:	18c0      	adds	r0, r0, r3
    7604:	464b      	mov	r3, r9
    7606:	4358      	muls	r0, r3
    7608:	0003      	movs	r3, r0
    760a:	4443      	add	r3, r8
    760c:	9315      	str	r3, [sp, #84]	; 0x54
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
    760e:	b2b6      	uxth	r6, r6
    7610:	18b2      	adds	r2, r6, r2
    7612:	b292      	uxth	r2, r2
    7614:	a828      	add	r0, sp, #160	; 0xa0
    7616:	8002      	strh	r2, [r0, #0]
    7618:	888b      	ldrh	r3, [r1, #4]
    761a:	3301      	adds	r3, #1
    761c:	1b9b      	subs	r3, r3, r6
    761e:	b29b      	uxth	r3, r3
    7620:	b21e      	sxth	r6, r3
    7622:	9617      	str	r6, [sp, #92]	; 0x5c
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
    7624:	3b01      	subs	r3, #1
    7626:	18d3      	adds	r3, r2, r3
    7628:	8083      	strh	r3, [r0, #4]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
    762a:	b2ad      	uxth	r5, r5
    762c:	192c      	adds	r4, r5, r4
    762e:	b224      	sxth	r4, r4
    7630:	8044      	strh	r4, [r0, #2]
        blend_area.y2 = blend_area.y1;
    7632:	80c4      	strh	r4, [r0, #6]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    7634:	88cb      	ldrh	r3, [r1, #6]
    7636:	3301      	adds	r3, #1
    7638:	1b5d      	subs	r5, r3, r5
    763a:	b22d      	sxth	r5, r5

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
    763c:	980a      	ldr	r0, [sp, #40]	; 0x28
    763e:	8843      	ldrh	r3, [r0, #2]
    7640:	2b00      	cmp	r3, #0
    7642:	d000      	beq.n	7646 <lv_draw_map+0xfa>
    7644:	e344      	b.n	7cd0 <lv_draw_map+0x784>
    7646:	8902      	ldrh	r2, [r0, #8]
    7648:	1e53      	subs	r3, r2, #1
    764a:	3bff      	subs	r3, #255	; 0xff
    764c:	1e59      	subs	r1, r3, #1
    764e:	418b      	sbcs	r3, r1
    7650:	b2db      	uxtb	r3, r3
    7652:	469b      	mov	fp, r3
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    7654:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7656:	2b00      	cmp	r3, #0
    7658:	d000      	beq.n	765c <lv_draw_map+0x110>
    765a:	e0d5      	b.n	7808 <lv_draw_map+0x2bc>
    765c:	3301      	adds	r3, #1
    765e:	33ff      	adds	r3, #255	; 0xff
    7660:	429a      	cmp	r2, r3
    7662:	d000      	beq.n	7666 <lv_draw_map+0x11a>
    7664:	e33a      	b.n	7cdc <lv_draw_map+0x790>
    7666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7668:	2b00      	cmp	r3, #0
    766a:	d105      	bne.n	7678 <lv_draw_map+0x12c>
    766c:	7a83      	ldrb	r3, [r0, #10]
    766e:	2b00      	cmp	r3, #0
    7670:	d102      	bne.n	7678 <lv_draw_map+0x12c>
    7672:	9b07      	ldr	r3, [sp, #28]
    7674:	2b00      	cmp	r3, #0
    7676:	d134      	bne.n	76e2 <lv_draw_map+0x196>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    7678:	a83c      	add	r0, sp, #240	; 0xf0
    767a:	4b7b      	ldr	r3, [pc, #492]	; (7868 <lv_draw_map+0x31c>)
    767c:	4798      	blx	r3
    767e:	23f0      	movs	r3, #240	; 0xf0
    7680:	005b      	lsls	r3, r3, #1
    7682:	4298      	cmp	r0, r3
    7684:	d800      	bhi.n	7688 <lv_draw_map+0x13c>
    7686:	e0ca      	b.n	781e <lv_draw_map+0x2d2>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    7688:	20f0      	movs	r0, #240	; 0xf0
    768a:	0080      	lsls	r0, r0, #2
    768c:	4c77      	ldr	r4, [pc, #476]	; (786c <lv_draw_map+0x320>)
    768e:	47a0      	blx	r4
    7690:	901b      	str	r0, [sp, #108]	; 0x6c
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    7692:	26f0      	movs	r6, #240	; 0xf0
    7694:	0076      	lsls	r6, r6, #1
    7696:	0030      	movs	r0, r6
    7698:	47a0      	blx	r4
    769a:	9018      	str	r0, [sp, #96]	; 0x60

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    769c:	2148      	movs	r1, #72	; 0x48
    769e:	a82a      	add	r0, sp, #168	; 0xa8
    76a0:	4b73      	ldr	r3, [pc, #460]	; (7870 <lv_draw_map+0x324>)
    76a2:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    76a4:	961d      	str	r6, [sp, #116]	; 0x74
    76a6:	e355      	b.n	7d54 <lv_draw_map+0x808>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    76a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    76aa:	2b00      	cmp	r3, #0
    76ac:	d189      	bne.n	75c2 <lv_draw_map+0x76>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
    76ae:	9b07      	ldr	r3, [sp, #28]
    76b0:	2b00      	cmp	r3, #0
    76b2:	d113      	bne.n	76dc <lv_draw_map+0x190>
    76b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    76b6:	7a9b      	ldrb	r3, [r3, #10]
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    76b8:	2202      	movs	r2, #2
    76ba:	4691      	mov	r9, r2
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
    76bc:	2b00      	cmp	r3, #0
    76be:	d185      	bne.n	75cc <lv_draw_map+0x80>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
    76c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    76c2:	7b93      	ldrb	r3, [r2, #14]
    76c4:	9302      	str	r3, [sp, #8]
    76c6:	7813      	ldrb	r3, [r2, #0]
    76c8:	9301      	str	r3, [sp, #4]
    76ca:	2301      	movs	r3, #1
    76cc:	9300      	str	r3, [sp, #0]
    76ce:	2300      	movs	r3, #0
    76d0:	4642      	mov	r2, r8
    76d2:	991c      	ldr	r1, [sp, #112]	; 0x70
    76d4:	9824      	ldr	r0, [sp, #144]	; 0x90
    76d6:	4c67      	ldr	r4, [pc, #412]	; (7874 <lv_draw_map+0x328>)
    76d8:	47a0      	blx	r4
    76da:	e2dd      	b.n	7c98 <lv_draw_map+0x74c>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    76dc:	2303      	movs	r3, #3
    76de:	4699      	mov	r9, r3
    76e0:	e774      	b.n	75cc <lv_draw_map+0x80>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    76e2:	a83c      	add	r0, sp, #240	; 0xf0
    76e4:	4b60      	ldr	r3, [pc, #384]	; (7868 <lv_draw_map+0x31c>)
    76e6:	4798      	blx	r3
    76e8:	23f0      	movs	r3, #240	; 0xf0
    76ea:	005b      	lsls	r3, r3, #1
    76ec:	4298      	cmp	r0, r3
    76ee:	d819      	bhi.n	7724 <lv_draw_map+0x1d8>
    76f0:	a83c      	add	r0, sp, #240	; 0xf0
    76f2:	4b5d      	ldr	r3, [pc, #372]	; (7868 <lv_draw_map+0x31c>)
    76f4:	4798      	blx	r3
    76f6:	9007      	str	r0, [sp, #28]
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    76f8:	9e07      	ldr	r6, [sp, #28]
    76fa:	0070      	lsls	r0, r6, #1
    76fc:	4c5b      	ldr	r4, [pc, #364]	; (786c <lv_draw_map+0x320>)
    76fe:	47a0      	blx	r4
    7700:	9005      	str	r0, [sp, #20]
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    7702:	0030      	movs	r0, r6
    7704:	47a0      	blx	r4
    7706:	9006      	str	r0, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    7708:	2d00      	cmp	r5, #0
    770a:	dd61      	ble.n	77d0 <lv_draw_map+0x284>
                map_buf_tmp += map_w * px_size_byte;
    770c:	4653      	mov	r3, sl
    770e:	437b      	muls	r3, r7
    7710:	469a      	mov	sl, r3
    7712:	1c6b      	adds	r3, r5, #1
    7714:	469b      	mov	fp, r3
    7716:	2301      	movs	r3, #1
    7718:	4698      	mov	r8, r3
    771a:	2700      	movs	r7, #0
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    771c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    771e:	003e      	movs	r6, r7
    7720:	464c      	mov	r4, r9
    7722:	e031      	b.n	7788 <lv_draw_map+0x23c>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    7724:	23f0      	movs	r3, #240	; 0xf0
    7726:	005b      	lsls	r3, r3, #1
    7728:	9307      	str	r3, [sp, #28]
    772a:	e7e5      	b.n	76f8 <lv_draw_map+0x1ac>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    772c:	3301      	adds	r3, #1
    772e:	1912      	adds	r2, r2, r4
    7730:	3702      	adds	r7, #2
    7732:	42ab      	cmp	r3, r5
    7734:	da09      	bge.n	774a <lv_draw_map+0x1fe>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    7736:	7891      	ldrb	r1, [r2, #2]
                    mask_buf[px_i] = px_opa;
    7738:	54c1      	strb	r1, [r0, r3]
                    if(px_opa) {
    773a:	2900      	cmp	r1, #0
    773c:	d0f6      	beq.n	772c <lv_draw_map+0x1e0>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
    773e:	7856      	ldrb	r6, [r2, #1]
    7740:	0236      	lsls	r6, r6, #8
    7742:	7811      	ldrb	r1, [r2, #0]
    7744:	1989      	adds	r1, r1, r6
    7746:	8039      	strh	r1, [r7, #0]
    7748:	e7f0      	b.n	772c <lv_draw_map+0x1e0>
    774a:	4666      	mov	r6, ip
    774c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    774e:	469c      	mov	ip, r3
    7750:	4466      	add	r6, ip
                map_buf_tmp += map_w * px_size_byte;
    7752:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7754:	4453      	add	r3, sl
    7756:	9315      	str	r3, [sp, #84]	; 0x54
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    7758:	ab24      	add	r3, sp, #144	; 0x90
    775a:	2264      	movs	r2, #100	; 0x64
    775c:	189b      	adds	r3, r3, r2
    775e:	881b      	ldrh	r3, [r3, #0]
    7760:	3301      	adds	r3, #1
    7762:	aa24      	add	r2, sp, #144	; 0x90
    7764:	2160      	movs	r1, #96	; 0x60
    7766:	1852      	adds	r2, r2, r1
    7768:	8812      	ldrh	r2, [r2, #0]
    776a:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    776c:	b21b      	sxth	r3, r3
    776e:	199b      	adds	r3, r3, r6
    7770:	9a07      	ldr	r2, [sp, #28]
    7772:	429a      	cmp	r2, r3
    7774:	d917      	bls.n	77a6 <lv_draw_map+0x25a>
                    blend_area.y2 ++;
    7776:	aa28      	add	r2, sp, #160	; 0xa0
    7778:	88d3      	ldrh	r3, [r2, #6]
    777a:	3301      	adds	r3, #1
    777c:	80d3      	strh	r3, [r2, #6]
    777e:	2301      	movs	r3, #1
    7780:	469c      	mov	ip, r3
    7782:	44e0      	add	r8, ip
            for(y = 0; y < draw_area_h; y++) {
    7784:	45d8      	cmp	r8, fp
    7786:	d023      	beq.n	77d0 <lv_draw_map+0x284>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    7788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    778a:	2b00      	cmp	r3, #0
    778c:	dde1      	ble.n	7752 <lv_draw_map+0x206>
    778e:	0077      	lsls	r7, r6, #1
    7790:	9b05      	ldr	r3, [sp, #20]
    7792:	469c      	mov	ip, r3
    7794:	4467      	add	r7, ip
    7796:	9a15      	ldr	r2, [sp, #84]	; 0x54
    7798:	2300      	movs	r3, #0
                    mask_buf[px_i] = px_opa;
    779a:	9906      	ldr	r1, [sp, #24]
    779c:	468c      	mov	ip, r1
    779e:	44b4      	add	ip, r6
    77a0:	4660      	mov	r0, ip
    77a2:	46b4      	mov	ip, r6
    77a4:	e7c7      	b.n	7736 <lv_draw_map+0x1ea>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    77a6:	af28      	add	r7, sp, #160	; 0xa0
    77a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    77aa:	7b93      	ldrb	r3, [r2, #14]
    77ac:	9302      	str	r3, [sp, #8]
    77ae:	7813      	ldrb	r3, [r2, #0]
    77b0:	9301      	str	r3, [sp, #4]
    77b2:	2302      	movs	r3, #2
    77b4:	9300      	str	r3, [sp, #0]
    77b6:	9b06      	ldr	r3, [sp, #24]
    77b8:	9a05      	ldr	r2, [sp, #20]
    77ba:	0039      	movs	r1, r7
    77bc:	9824      	ldr	r0, [sp, #144]	; 0x90
    77be:	4e2d      	ldr	r6, [pc, #180]	; (7874 <lv_draw_map+0x328>)
    77c0:	47b0      	blx	r6
                    blend_area.y1 = blend_area.y2 + 1;
    77c2:	88fb      	ldrh	r3, [r7, #6]
    77c4:	3301      	adds	r3, #1
    77c6:	b21b      	sxth	r3, r3
    77c8:	807b      	strh	r3, [r7, #2]
                    blend_area.y2 = blend_area.y1;
    77ca:	80fb      	strh	r3, [r7, #6]
                    px_i = 0;
    77cc:	2600      	movs	r6, #0
    77ce:	e7d6      	b.n	777e <lv_draw_map+0x232>
            if(blend_area.y1 != blend_area.y2) {
    77d0:	aa28      	add	r2, sp, #160	; 0xa0
    77d2:	2106      	movs	r1, #6
    77d4:	5e53      	ldrsh	r3, [r2, r1]
    77d6:	2102      	movs	r1, #2
    77d8:	5e52      	ldrsh	r2, [r2, r1]
    77da:	429a      	cmp	r2, r3
    77dc:	d00e      	beq.n	77fc <lv_draw_map+0x2b0>
                blend_area.y2--;
    77de:	a928      	add	r1, sp, #160	; 0xa0
    77e0:	3b01      	subs	r3, #1
    77e2:	80cb      	strh	r3, [r1, #6]
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    77e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    77e6:	7b93      	ldrb	r3, [r2, #14]
    77e8:	9302      	str	r3, [sp, #8]
    77ea:	7813      	ldrb	r3, [r2, #0]
    77ec:	9301      	str	r3, [sp, #4]
    77ee:	2302      	movs	r3, #2
    77f0:	9300      	str	r3, [sp, #0]
    77f2:	9b06      	ldr	r3, [sp, #24]
    77f4:	9a05      	ldr	r2, [sp, #20]
    77f6:	9824      	ldr	r0, [sp, #144]	; 0x90
    77f8:	4c1e      	ldr	r4, [pc, #120]	; (7874 <lv_draw_map+0x328>)
    77fa:	47a0      	blx	r4
            _lv_mem_buf_release(mask_buf);
    77fc:	9806      	ldr	r0, [sp, #24]
    77fe:	4c1e      	ldr	r4, [pc, #120]	; (7878 <lv_draw_map+0x32c>)
    7800:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    7802:	9805      	ldr	r0, [sp, #20]
    7804:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    7806:	e247      	b.n	7c98 <lv_draw_map+0x74c>
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    7808:	a83c      	add	r0, sp, #240	; 0xf0
    780a:	4b17      	ldr	r3, [pc, #92]	; (7868 <lv_draw_map+0x31c>)
    780c:	4798      	blx	r3
    780e:	23f0      	movs	r3, #240	; 0xf0
    7810:	005b      	lsls	r3, r3, #1
    7812:	4298      	cmp	r0, r3
    7814:	d903      	bls.n	781e <lv_draw_map+0x2d2>
    7816:	23f0      	movs	r3, #240	; 0xf0
    7818:	005b      	lsls	r3, r3, #1
    781a:	931d      	str	r3, [sp, #116]	; 0x74
    781c:	e003      	b.n	7826 <lv_draw_map+0x2da>
    781e:	a83c      	add	r0, sp, #240	; 0xf0
    7820:	4b11      	ldr	r3, [pc, #68]	; (7868 <lv_draw_map+0x31c>)
    7822:	4798      	blx	r3
    7824:	901d      	str	r0, [sp, #116]	; 0x74
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    7826:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    7828:	0070      	lsls	r0, r6, #1
    782a:	4c10      	ldr	r4, [pc, #64]	; (786c <lv_draw_map+0x320>)
    782c:	47a0      	blx	r4
    782e:	901b      	str	r0, [sp, #108]	; 0x6c
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    7830:	0030      	movs	r0, r6
    7832:	47a0      	blx	r4
    7834:	9018      	str	r0, [sp, #96]	; 0x60
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    7836:	2148      	movs	r1, #72	; 0x48
    7838:	a82a      	add	r0, sp, #168	; 0xa8
    783a:	4b0d      	ldr	r3, [pc, #52]	; (7870 <lv_draw_map+0x324>)
    783c:	4798      	blx	r3
            if(transform) {
    783e:	465b      	mov	r3, fp
    7840:	2b00      	cmp	r3, #0
    7842:	d100      	bne.n	7846 <lv_draw_map+0x2fa>
    7844:	e286      	b.n	7d54 <lv_draw_map+0x808>
    7846:	e260      	b.n	7d0a <lv_draw_map+0x7be>
                trans_dsc.cfg.antialias = draw_dsc->antialias;

                _lv_img_buf_transform_init(&trans_dsc);
            }
#endif
            uint16_t recolor_premult[3] = {0};
    7848:	2300      	movs	r3, #0
    784a:	9314      	str	r3, [sp, #80]	; 0x50
    784c:	9312      	str	r3, [sp, #72]	; 0x48
    784e:	9311      	str	r3, [sp, #68]	; 0x44
    7850:	e297      	b.n	7d82 <lv_draw_map+0x836>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;


            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
                _lv_memset_ff(mask_buf, mask_buf_size);
    7852:	991d      	ldr	r1, [sp, #116]	; 0x74
    7854:	9818      	ldr	r0, [sp, #96]	; 0x60
    7856:	4b09      	ldr	r3, [pc, #36]	; (787c <lv_draw_map+0x330>)
    7858:	4798      	blx	r3
    785a:	e2a9      	b.n	7db0 <lv_draw_map+0x864>
    785c:	00004349 	.word	0x00004349
    7860:	0000f6a1 	.word	0x0000f6a1
    7864:	0000a659 	.word	0x0000a659
    7868:	0000fb8b 	.word	0x0000fb8b
    786c:	00010e59 	.word	0x00010e59
    7870:	00010fe5 	.word	0x00010fe5
    7874:	000068e9 	.word	0x000068e9
    7878:	00010b6d 	.word	0x00010b6d
    787c:	00011089 	.word	0x00011089
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
    7880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7882:	18f3      	adds	r3, r6, r3
    7884:	b21b      	sxth	r3, r3
    7886:	a92a      	add	r1, sp, #168	; 0xa8
    7888:	2008      	movs	r0, #8
    788a:	5e0a      	ldrsh	r2, [r1, r0]
    788c:	1a9b      	subs	r3, r3, r2
    int32_t yt = y - dsc->cfg.pivot_y;
    788e:	200a      	movs	r0, #10
    7890:	5e0a      	ldrsh	r2, [r1, r0]
    7892:	980e      	ldr	r0, [sp, #56]	; 0x38
    7894:	1a82      	subs	r2, r0, r2

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
    7896:	2080      	movs	r0, #128	; 0x80
    7898:	0040      	lsls	r0, r0, #1
    789a:	89c9      	ldrh	r1, [r1, #14]
    789c:	4281      	cmp	r1, r0
    789e:	d059      	beq.n	7954 <lv_draw_map+0x408>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
    78a0:	a92a      	add	r1, sp, #168	; 0xa8
    78a2:	200c      	movs	r0, #12
    78a4:	5e09      	ldrsh	r1, [r1, r0]
    78a6:	2900      	cmp	r1, #0
    78a8:	d16b      	bne.n	7982 <lv_draw_map+0x436>
        xt *= dsc->tmp.zoom_inv;
    78aa:	a92a      	add	r1, sp, #168	; 0xa8
    78ac:	8ec8      	ldrh	r0, [r1, #54]	; 0x36
    78ae:	4343      	muls	r3, r0
    78b0:	001d      	movs	r5, r3
        yt *= dsc->tmp.zoom_inv;
        xs = xt + dsc->tmp.pivot_x_256;
    78b2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    78b4:	469a      	mov	sl, r3
    78b6:	44aa      	add	sl, r5
        yt *= dsc->tmp.zoom_inv;
    78b8:	4342      	muls	r2, r0
        ys = yt + dsc->tmp.pivot_y_256;
    78ba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    78bc:	18d3      	adds	r3, r2, r3
    78be:	930c      	str	r3, [sp, #48]	; 0x30
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
    78c0:	4653      	mov	r3, sl
    78c2:	121b      	asrs	r3, r3, #8
    78c4:	4698      	mov	r8, r3
    int32_t ys_int = ys >> 8;

    if(xs_int >= dsc->cfg.src_w) return false;
    78c6:	ab2a      	add	r3, sp, #168	; 0xa8
    78c8:	2204      	movs	r2, #4
    78ca:	5e9b      	ldrsh	r3, [r3, r2]
    78cc:	4598      	cmp	r8, r3
    78ce:	db00      	blt.n	78d2 <lv_draw_map+0x386>
    78d0:	e0b0      	b.n	7a34 <lv_draw_map+0x4e8>
    else if(xs_int < 0) return false;
    78d2:	4642      	mov	r2, r8
    78d4:	2a00      	cmp	r2, #0
    78d6:	da00      	bge.n	78da <lv_draw_map+0x38e>
    78d8:	e0ac      	b.n	7a34 <lv_draw_map+0x4e8>
    int32_t ys_int = ys >> 8;
    78da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    78dc:	1212      	asrs	r2, r2, #8
    78de:	0010      	movs	r0, r2
    78e0:	9216      	str	r2, [sp, #88]	; 0x58

    if(ys_int >= dsc->cfg.src_h) return false;
    78e2:	aa2a      	add	r2, sp, #168	; 0xa8
    78e4:	2106      	movs	r1, #6
    78e6:	5e52      	ldrsh	r2, [r2, r1]
    78e8:	4290      	cmp	r0, r2
    78ea:	db00      	blt.n	78ee <lv_draw_map+0x3a2>
    78ec:	e0a2      	b.n	7a34 <lv_draw_map+0x4e8>
    else if(ys_int < 0) return false;
    78ee:	2800      	cmp	r0, #0
    78f0:	da00      	bge.n	78f4 <lv_draw_map+0x3a8>
    78f2:	e09f      	b.n	7a34 <lv_draw_map+0x4e8>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
    78f4:	2234      	movs	r2, #52	; 0x34
    78f6:	a92a      	add	r1, sp, #168	; 0xa8
    78f8:	5c89      	ldrb	r1, [r1, r2]
    78fa:	074a      	lsls	r2, r1, #29
    78fc:	d56a      	bpl.n	79d4 <lv_draw_map+0x488>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
    78fe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
        if(dsc->tmp.has_alpha == 0) {
    7900:	0789      	lsls	r1, r1, #30
    7902:	d458      	bmi.n	79b6 <lv_draw_map+0x46a>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    7904:	4343      	muls	r3, r0
    7906:	4443      	add	r3, r8
    7908:	005b      	lsls	r3, r3, #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
    790a:	18d2      	adds	r2, r2, r3
        *d8 = *s8;
    790c:	7810      	ldrb	r0, [r2, #0]
    790e:	a92a      	add	r1, sp, #168	; 0xa8
    7910:	7508      	strb	r0, [r1, #20]
    7912:	7852      	ldrb	r2, [r2, #1]
    7914:	754a      	strb	r2, [r1, #21]
            px_size = LV_COLOR_SIZE >> 3;
    7916:	2102      	movs	r1, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
    7918:	2234      	movs	r2, #52	; 0x34
    791a:	a82a      	add	r0, sp, #168	; 0xa8
    791c:	5c82      	ldrb	r2, [r0, r2]
    791e:	07d2      	lsls	r2, r2, #31
    7920:	d50f      	bpl.n	7942 <lv_draw_map+0x3f6>
        lv_color_t ct = LV_COLOR_TRANSP;
    7922:	221f      	movs	r2, #31
    7924:	9822      	ldr	r0, [sp, #136]	; 0x88
    7926:	4390      	bics	r0, r2
    7928:	22fc      	movs	r2, #252	; 0xfc
    792a:	00d2      	lsls	r2, r2, #3
    792c:	4302      	orrs	r2, r0
    792e:	0552      	lsls	r2, r2, #21
    7930:	0d52      	lsrs	r2, r2, #21
    7932:	4668      	mov	r0, sp
    7934:	2588      	movs	r5, #136	; 0x88
    7936:	1940      	adds	r0, r0, r5
    7938:	8002      	strh	r2, [r0, #0]
        if(dsc->res.color.full == ct.full) return false;
    793a:	a82a      	add	r0, sp, #168	; 0xa8
    793c:	8a80      	ldrh	r0, [r0, #20]
    793e:	4290      	cmp	r0, r2
    7940:	d078      	beq.n	7a34 <lv_draw_map+0x4e8>
    }

    if(dsc->cfg.antialias == false) return true;
    7942:	aa2a      	add	r2, sp, #168	; 0xa8
    7944:	7cd2      	ldrb	r2, [r2, #19]
    7946:	2a00      	cmp	r2, #0
    7948:	d160      	bne.n	7a0c <lv_draw_map+0x4c0>
                        if(ret == false) {
                            mask_buf[px_i] = LV_OPA_TRANSP;
                            continue;
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
    794a:	ab2a      	add	r3, sp, #168	; 0xa8
    794c:	7d9a      	ldrb	r2, [r3, #22]
    794e:	7022      	strb	r2, [r4, #0]
                            c.full = trans_dsc.res.color.full;
    7950:	8a9b      	ldrh	r3, [r3, #20]
    7952:	e080      	b.n	7a56 <lv_draw_map+0x50a>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
    7954:	9936      	ldr	r1, [sp, #216]	; 0xd8
    7956:	9835      	ldr	r0, [sp, #212]	; 0xd4
    7958:	0005      	movs	r5, r0
    795a:	910c      	str	r1, [sp, #48]	; 0x30
    795c:	0008      	movs	r0, r1
    795e:	4358      	muls	r0, r3
    7960:	0029      	movs	r1, r5
    7962:	4351      	muls	r1, r2
    7964:	1a41      	subs	r1, r0, r1
    7966:	11c9      	asrs	r1, r1, #7
    7968:	9833      	ldr	r0, [sp, #204]	; 0xcc
    796a:	9016      	str	r0, [sp, #88]	; 0x58
    796c:	4682      	mov	sl, r0
    796e:	448a      	add	sl, r1
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    7970:	436b      	muls	r3, r5
    7972:	980c      	ldr	r0, [sp, #48]	; 0x30
    7974:	4342      	muls	r2, r0
    7976:	189b      	adds	r3, r3, r2
    7978:	11db      	asrs	r3, r3, #7
    797a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    797c:	189b      	adds	r3, r3, r2
    797e:	930c      	str	r3, [sp, #48]	; 0x30
    7980:	e79e      	b.n	78c0 <lv_draw_map+0x374>
        xt *= dsc->tmp.zoom_inv;
    7982:	a92a      	add	r1, sp, #168	; 0xa8
    7984:	8ec8      	ldrh	r0, [r1, #54]	; 0x36
    7986:	4343      	muls	r3, r0
    7988:	001d      	movs	r5, r3
        yt *= dsc->tmp.zoom_inv;
    798a:	4342      	muls	r2, r0
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
    798c:	9836      	ldr	r0, [sp, #216]	; 0xd8
    798e:	4358      	muls	r0, r3
    7990:	4680      	mov	r8, r0
    7992:	9835      	ldr	r0, [sp, #212]	; 0xd4
    7994:	4350      	muls	r0, r2
    7996:	4643      	mov	r3, r8
    7998:	1a18      	subs	r0, r3, r0
    799a:	13c0      	asrs	r0, r0, #15
    799c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    799e:	469a      	mov	sl, r3
    79a0:	4482      	add	sl, r0
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    79a2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    79a4:	436b      	muls	r3, r5
    79a6:	9836      	ldr	r0, [sp, #216]	; 0xd8
    79a8:	4350      	muls	r0, r2
    79aa:	181b      	adds	r3, r3, r0
    79ac:	13db      	asrs	r3, r3, #15
    79ae:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    79b0:	189b      	adds	r3, r3, r2
    79b2:	930c      	str	r3, [sp, #48]	; 0x30
    79b4:	e784      	b.n	78c0 <lv_draw_map+0x374>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    79b6:	9916      	ldr	r1, [sp, #88]	; 0x58
    79b8:	434b      	muls	r3, r1
    79ba:	4443      	add	r3, r8
    79bc:	0059      	lsls	r1, r3, #1
    79be:	18cb      	adds	r3, r1, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
    79c0:	18d2      	adds	r2, r2, r3
    79c2:	7810      	ldrb	r0, [r2, #0]
    79c4:	a92a      	add	r1, sp, #168	; 0xa8
    79c6:	7508      	strb	r0, [r1, #20]
    79c8:	7850      	ldrb	r0, [r2, #1]
    79ca:	7548      	strb	r0, [r1, #21]
            dsc->res.opa = src_u8[pxi + px_size - 1];
    79cc:	7892      	ldrb	r2, [r2, #2]
    79ce:	758a      	strb	r2, [r1, #22]
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
    79d0:	2103      	movs	r1, #3
    79d2:	e7a1      	b.n	7918 <lv_draw_map+0x3cc>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    79d4:	4643      	mov	r3, r8
    79d6:	b219      	sxth	r1, r3
    79d8:	466b      	mov	r3, sp
    79da:	2258      	movs	r2, #88	; 0x58
    79dc:	189b      	adds	r3, r3, r2
    79de:	2200      	movs	r2, #0
    79e0:	5e9a      	ldrsh	r2, [r3, r2]
    79e2:	ab24      	add	r3, sp, #144	; 0x90
    79e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    79e6:	9226      	str	r2, [sp, #152]	; 0x98
    79e8:	9125      	str	r1, [sp, #148]	; 0x94
    79ea:	a830      	add	r0, sp, #192	; 0xc0
    79ec:	4dae      	ldr	r5, [pc, #696]	; (7ca8 <lv_draw_map+0x75c>)
    79ee:	47a8      	blx	r5
    79f0:	ab24      	add	r3, sp, #144	; 0x90
    79f2:	8598      	strh	r0, [r3, #44]	; 0x2c
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    79f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    79f6:	9925      	ldr	r1, [sp, #148]	; 0x94
    79f8:	a830      	add	r0, sp, #192	; 0xc0
    79fa:	4bac      	ldr	r3, [pc, #688]	; (7cac <lv_draw_map+0x760>)
    79fc:	4798      	blx	r3
    79fe:	ab24      	add	r3, sp, #144	; 0x90
    7a00:	222e      	movs	r2, #46	; 0x2e
    7a02:	189b      	adds	r3, r3, r2
    7a04:	7018      	strb	r0, [r3, #0]
        pxi = 0; /*unused*/
    7a06:	2300      	movs	r3, #0
        px_size = 0;    /*unused*/
    7a08:	2100      	movs	r1, #0
    7a0a:	e785      	b.n	7918 <lv_draw_map+0x3cc>

    dsc->tmp.xs = xs;
    7a0c:	a82a      	add	r0, sp, #168	; 0xa8
    7a0e:	4652      	mov	r2, sl
    7a10:	8702      	strh	r2, [r0, #56]	; 0x38
    dsc->tmp.ys = ys;
    7a12:	466a      	mov	r2, sp
    7a14:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    7a16:	8742      	strh	r2, [r0, #58]	; 0x3a
    dsc->tmp.xs_int = xs_int;
    7a18:	4642      	mov	r2, r8
    7a1a:	8782      	strh	r2, [r0, #60]	; 0x3c
    dsc->tmp.ys_int = ys_int;
    7a1c:	466a      	mov	r2, sp
    7a1e:	2558      	movs	r5, #88	; 0x58
    7a20:	1952      	adds	r2, r2, r5
    7a22:	8812      	ldrh	r2, [r2, #0]
    7a24:	87c2      	strh	r2, [r0, #62]	; 0x3e
    dsc->tmp.pxi = pxi;
    7a26:	6403      	str	r3, [r0, #64]	; 0x40
    dsc->tmp.px_size = px_size;
    7a28:	2344      	movs	r3, #68	; 0x44
    7a2a:	54c1      	strb	r1, [r0, r3]

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
    7a2c:	4ba0      	ldr	r3, [pc, #640]	; (7cb0 <lv_draw_map+0x764>)
    7a2e:	4798      	blx	r3
                        if(ret == false) {
    7a30:	2800      	cmp	r0, #0
    7a32:	d18a      	bne.n	794a <lv_draw_map+0x3fe>
                            mask_buf[px_i] = LV_OPA_TRANSP;
    7a34:	2300      	movs	r3, #0
    7a36:	7023      	strb	r3, [r4, #0]
                            continue;
    7a38:	e042      	b.n	7ac0 <lv_draw_map+0x574>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
    7a3a:	23ff      	movs	r3, #255	; 0xff
    7a3c:	7023      	strb	r3, [r4, #0]
                        }

#if LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
    7a3e:	787a      	ldrb	r2, [r7, #1]
    7a40:	0212      	lsls	r2, r2, #8
    7a42:	783b      	ldrb	r3, [r7, #0]
    7a44:	189b      	adds	r3, r3, r2
    7a46:	b29b      	uxth	r3, r3
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
    7a48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7a4a:	2a00      	cmp	r2, #0
    7a4c:	d003      	beq.n	7a56 <lv_draw_map+0x50a>
                            if(c.full == chroma_keyed_color.full) {
    7a4e:	4a99      	ldr	r2, [pc, #612]	; (7cb4 <lv_draw_map+0x768>)
    7a50:	8812      	ldrh	r2, [r2, #0]
    7a52:	429a      	cmp	r2, r3
    7a54:	d04a      	beq.n	7aec <lv_draw_map+0x5a0>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
    7a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7a58:	7a92      	ldrb	r2, [r2, #10]
    7a5a:	2a00      	cmp	r2, #0
    7a5c:	d02e      	beq.n	7abc <lv_draw_map+0x570>
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    7a5e:	466a      	mov	r2, sp
    7a60:	214c      	movs	r1, #76	; 0x4c
    7a62:	1852      	adds	r2, r2, r1
    7a64:	8812      	ldrh	r2, [r2, #0]
    7a66:	0ad9      	lsrs	r1, r3, #11
    7a68:	4694      	mov	ip, r2
    7a6a:	4351      	muls	r1, r2
    7a6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7a6e:	4690      	mov	r8, r2
    7a70:	4441      	add	r1, r8
    7a72:	04c9      	lsls	r1, r1, #19
    7a74:	0ec9      	lsrs	r1, r1, #27
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    7a76:	0558      	lsls	r0, r3, #21
    7a78:	0e80      	lsrs	r0, r0, #26
    7a7a:	4662      	mov	r2, ip
    7a7c:	4350      	muls	r0, r2
    7a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7a80:	4690      	mov	r8, r2
    7a82:	4440      	add	r0, r8
    7a84:	0480      	lsls	r0, r0, #18
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    7a86:	06da      	lsls	r2, r3, #27
    7a88:	0ed2      	lsrs	r2, r2, #27
    7a8a:	4663      	mov	r3, ip
    7a8c:	435a      	muls	r2, r3
    7a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7a90:	469c      	mov	ip, r3
    7a92:	4462      	add	r2, ip
    7a94:	04d2      	lsls	r2, r2, #19
    7a96:	0ed5      	lsrs	r5, r2, #27
    7a98:	231f      	movs	r3, #31
    7a9a:	9a08      	ldr	r2, [sp, #32]
    7a9c:	439a      	bics	r2, r3
    7a9e:	0013      	movs	r3, r2
    7aa0:	002a      	movs	r2, r5
    7aa2:	431a      	orrs	r2, r3
    7aa4:	0e80      	lsrs	r0, r0, #26
    7aa6:	0140      	lsls	r0, r0, #5
    7aa8:	4b83      	ldr	r3, [pc, #524]	; (7cb8 <lv_draw_map+0x76c>)
    7aaa:	4013      	ands	r3, r2
    7aac:	4303      	orrs	r3, r0
    7aae:	02c9      	lsls	r1, r1, #11
    7ab0:	055b      	lsls	r3, r3, #21
    7ab2:	0d5b      	lsrs	r3, r3, #21
    7ab4:	430b      	orrs	r3, r1
    7ab6:	466a      	mov	r2, sp
    7ab8:	8413      	strh	r3, [r2, #32]
    7aba:	b29b      	uxth	r3, r3
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
    7abc:	9a05      	ldr	r2, [sp, #20]
    7abe:	8013      	strh	r3, [r2, #0]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    7ac0:	3601      	adds	r6, #1
    7ac2:	9b06      	ldr	r3, [sp, #24]
    7ac4:	469c      	mov	ip, r3
    7ac6:	4467      	add	r7, ip
    7ac8:	3401      	adds	r4, #1
    7aca:	9b05      	ldr	r3, [sp, #20]
    7acc:	3302      	adds	r3, #2
    7ace:	9305      	str	r3, [sp, #20]
    7ad0:	454e      	cmp	r6, r9
    7ad2:	da0e      	bge.n	7af2 <lv_draw_map+0x5a6>
                    if(transform) {
    7ad4:	465b      	mov	r3, fp
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d000      	beq.n	7adc <lv_draw_map+0x590>
    7ada:	e6d1      	b.n	7880 <lv_draw_map+0x334>
                        if(alpha_byte) {
    7adc:	9b07      	ldr	r3, [sp, #28]
    7ade:	2b00      	cmp	r3, #0
    7ae0:	d0ab      	beq.n	7a3a <lv_draw_map+0x4ee>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    7ae2:	78bb      	ldrb	r3, [r7, #2]
                            mask_buf[px_i] = px_opa;
    7ae4:	7023      	strb	r3, [r4, #0]
                            if(px_opa == 0) {
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d0ea      	beq.n	7ac0 <lv_draw_map+0x574>
    7aea:	e7a8      	b.n	7a3e <lv_draw_map+0x4f2>
                                mask_buf[px_i] = LV_OPA_TRANSP;
    7aec:	2300      	movs	r3, #0
    7aee:	7023      	strb	r3, [r4, #0]
                                continue;
    7af0:	e7e6      	b.n	7ac0 <lv_draw_map+0x574>
    7af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7af4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7af6:	4694      	mov	ip, r2
    7af8:	4463      	add	r3, ip
    7afa:	001c      	movs	r4, r3
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
    7afc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7afe:	2b00      	cmp	r3, #0
    7b00:	d148      	bne.n	7b94 <lv_draw_map+0x648>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
    7b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7b04:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    7b06:	4694      	mov	ip, r2
    7b08:	4463      	add	r3, ip
    7b0a:	9315      	str	r3, [sp, #84]	; 0x54
    7b0c:	ab24      	add	r3, sp, #144	; 0x90
    7b0e:	2264      	movs	r2, #100	; 0x64
    7b10:	189b      	adds	r3, r3, r2
    7b12:	881b      	ldrh	r3, [r3, #0]
    7b14:	3301      	adds	r3, #1
    7b16:	aa24      	add	r2, sp, #144	; 0x90
    7b18:	2160      	movs	r1, #96	; 0x60
    7b1a:	1852      	adds	r2, r2, r1
    7b1c:	8812      	ldrh	r2, [r2, #0]
    7b1e:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    7b20:	b21b      	sxth	r3, r3
    7b22:	191b      	adds	r3, r3, r4
    7b24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7b26:	429a      	cmp	r2, r3
    7b28:	d96c      	bls.n	7c04 <lv_draw_map+0x6b8>
                    blend_area.y2 ++;
    7b2a:	aa28      	add	r2, sp, #160	; 0xa0
    7b2c:	88d3      	ldrh	r3, [r2, #6]
    7b2e:	3301      	adds	r3, #1
    7b30:	80d3      	strh	r3, [r2, #6]
    7b32:	940f      	str	r4, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
    7b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b36:	3301      	adds	r3, #1
    7b38:	9310      	str	r3, [sp, #64]	; 0x40
    7b3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    7b3c:	4293      	cmp	r3, r2
    7b3e:	db00      	blt.n	7b42 <lv_draw_map+0x5f6>
    7b40:	e08f      	b.n	7c62 <lv_draw_map+0x716>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
    7b42:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7b44:	2210      	movs	r2, #16
    7b46:	5e9b      	ldrsh	r3, [r3, r2]
    7b48:	aa24      	add	r2, sp, #144	; 0x90
    7b4a:	2160      	movs	r1, #96	; 0x60
    7b4c:	1852      	adds	r2, r2, r1
    7b4e:	2100      	movs	r1, #0
    7b50:	5e52      	ldrsh	r2, [r2, r1]
    7b52:	189b      	adds	r3, r3, r2
    7b54:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7b56:	2100      	movs	r1, #0
    7b58:	5e52      	ldrsh	r2, [r2, r1]
    7b5a:	1a9b      	subs	r3, r3, r2
    7b5c:	930d      	str	r3, [sp, #52]	; 0x34
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    7b5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7b60:	4691      	mov	r9, r2
    7b62:	2a00      	cmp	r2, #0
    7b64:	dd14      	ble.n	7b90 <lv_draw_map+0x644>
    7b66:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7b68:	4698      	mov	r8, r3
    7b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7b6c:	4694      	mov	ip, r2
    7b6e:	44e0      	add	r8, ip
    7b70:	0053      	lsls	r3, r2, #1
    7b72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7b74:	4692      	mov	sl, r2
    7b76:	449a      	add	sl, r3
    7b78:	9f15      	ldr	r7, [sp, #84]	; 0x54
    7b7a:	2600      	movs	r6, #0
    int32_t yt = y - dsc->cfg.pivot_y;
    7b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    7b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7b80:	4694      	mov	ip, r2
    7b82:	4463      	add	r3, ip
    7b84:	b21b      	sxth	r3, r3
    7b86:	930e      	str	r3, [sp, #56]	; 0x38
    7b88:	4644      	mov	r4, r8
    7b8a:	4653      	mov	r3, sl
    7b8c:	9305      	str	r3, [sp, #20]
    7b8e:	e7a1      	b.n	7ad4 <lv_draw_map+0x588>
    7b90:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    7b92:	e7b3      	b.n	7afc <lv_draw_map+0x5b0>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
    7b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b96:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7b98:	4694      	mov	ip, r2
    7b9a:	4463      	add	r3, ip
    7b9c:	001d      	movs	r5, r3
    7b9e:	ab24      	add	r3, sp, #144	; 0x90
    7ba0:	2260      	movs	r2, #96	; 0x60
    7ba2:	189b      	adds	r3, r3, r2
    7ba4:	8819      	ldrh	r1, [r3, #0]
    7ba6:	ab24      	add	r3, sp, #144	; 0x90
    7ba8:	3204      	adds	r2, #4
    7baa:	189b      	adds	r3, r3, r2
    7bac:	881b      	ldrh	r3, [r3, #0]
    7bae:	3301      	adds	r3, #1
    7bb0:	1a5b      	subs	r3, r3, r1
    7bb2:	b21b      	sxth	r3, r3
    7bb4:	aa24      	add	r2, sp, #144	; 0x90
    7bb6:	2062      	movs	r0, #98	; 0x62
    7bb8:	1812      	adds	r2, r2, r0
    7bba:	8812      	ldrh	r2, [r2, #0]
    7bbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
    7bbe:	8a70      	ldrh	r0, [r6, #18]
    7bc0:	1812      	adds	r2, r2, r0
    7bc2:	9810      	ldr	r0, [sp, #64]	; 0x40
    7bc4:	4684      	mov	ip, r0
    7bc6:	4462      	add	r2, ip
    7bc8:	b212      	sxth	r2, r2
    7bca:	8a30      	ldrh	r0, [r6, #16]
    7bcc:	1809      	adds	r1, r1, r0
    7bce:	b209      	sxth	r1, r1
    7bd0:	0028      	movs	r0, r5
    7bd2:	4e3a      	ldr	r6, [pc, #232]	; (7cbc <lv_draw_map+0x770>)
    7bd4:	47b0      	blx	r6
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
    7bd6:	2800      	cmp	r0, #0
    7bd8:	d003      	beq.n	7be2 <lv_draw_map+0x696>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
    7bda:	2802      	cmp	r0, #2
    7bdc:	d191      	bne.n	7b02 <lv_draw_map+0x5b6>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    7bde:	901e      	str	r0, [sp, #120]	; 0x78
    7be0:	e78f      	b.n	7b02 <lv_draw_map+0x5b6>
    7be2:	ab24      	add	r3, sp, #144	; 0x90
    7be4:	2264      	movs	r2, #100	; 0x64
    7be6:	189b      	adds	r3, r3, r2
    7be8:	8819      	ldrh	r1, [r3, #0]
    7bea:	3101      	adds	r1, #1
    7bec:	ab24      	add	r3, sp, #144	; 0x90
    7bee:	3a04      	subs	r2, #4
    7bf0:	189b      	adds	r3, r3, r2
    7bf2:	881b      	ldrh	r3, [r3, #0]
    7bf4:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
    7bf6:	b209      	sxth	r1, r1
    7bf8:	0028      	movs	r0, r5
    7bfa:	4b31      	ldr	r3, [pc, #196]	; (7cc0 <lv_draw_map+0x774>)
    7bfc:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    7bfe:	2302      	movs	r3, #2
    7c00:	931e      	str	r3, [sp, #120]	; 0x78
    7c02:	e77e      	b.n	7b02 <lv_draw_map+0x5b6>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    7c04:	ac28      	add	r4, sp, #160	; 0xa0
    7c06:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7c08:	7bb3      	ldrb	r3, [r6, #14]
    7c0a:	9302      	str	r3, [sp, #8]
    7c0c:	7833      	ldrb	r3, [r6, #0]
    7c0e:	9301      	str	r3, [sp, #4]
    7c10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    7c12:	9300      	str	r3, [sp, #0]
    7c14:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7c16:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7c18:	0021      	movs	r1, r4
    7c1a:	9824      	ldr	r0, [sp, #144]	; 0x90
    7c1c:	4d29      	ldr	r5, [pc, #164]	; (7cc4 <lv_draw_map+0x778>)
    7c1e:	47a8      	blx	r5

                    blend_area.y1 = blend_area.y2 + 1;
    7c20:	88e3      	ldrh	r3, [r4, #6]
    7c22:	3301      	adds	r3, #1
    7c24:	b21b      	sxth	r3, r3
    7c26:	8063      	strh	r3, [r4, #2]
                    blend_area.y2 = blend_area.y1;
    7c28:	80e3      	strh	r3, [r4, #6]

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    7c2a:	2302      	movs	r3, #2
    7c2c:	931e      	str	r3, [sp, #120]	; 0x78
    7c2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    7c30:	2b00      	cmp	r3, #0
    7c32:	d109      	bne.n	7c48 <lv_draw_map+0x6fc>
    7c34:	8873      	ldrh	r3, [r6, #2]
    7c36:	2b00      	cmp	r3, #0
    7c38:	d106      	bne.n	7c48 <lv_draw_map+0x6fc>
    7c3a:	8933      	ldrh	r3, [r6, #8]
    7c3c:	3b01      	subs	r3, #1
    7c3e:	3bff      	subs	r3, #255	; 0xff
    7c40:	1e5a      	subs	r2, r3, #1
    7c42:	4193      	sbcs	r3, r2
    7c44:	3301      	adds	r3, #1
    7c46:	931e      	str	r3, [sp, #120]	; 0x78
                    px_i = 0;
    7c48:	2300      	movs	r3, #0
    7c4a:	930f      	str	r3, [sp, #60]	; 0x3c
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
    7c4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d100      	bne.n	7c54 <lv_draw_map+0x708>
    7c52:	e76f      	b.n	7b34 <lv_draw_map+0x5e8>
                        _lv_memset_ff(mask_buf, mask_buf_size);
    7c54:	991d      	ldr	r1, [sp, #116]	; 0x74
    7c56:	9818      	ldr	r0, [sp, #96]	; 0x60
    7c58:	4b1b      	ldr	r3, [pc, #108]	; (7cc8 <lv_draw_map+0x77c>)
    7c5a:	4798      	blx	r3
                    px_i = 0;
    7c5c:	2300      	movs	r3, #0
    7c5e:	930f      	str	r3, [sp, #60]	; 0x3c
    7c60:	e768      	b.n	7b34 <lv_draw_map+0x5e8>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
    7c62:	aa28      	add	r2, sp, #160	; 0xa0
    7c64:	2106      	movs	r1, #6
    7c66:	5e53      	ldrsh	r3, [r2, r1]
    7c68:	2102      	movs	r1, #2
    7c6a:	5e52      	ldrsh	r2, [r2, r1]
    7c6c:	429a      	cmp	r2, r3
    7c6e:	d00e      	beq.n	7c8e <lv_draw_map+0x742>
                blend_area.y2--;
    7c70:	a928      	add	r1, sp, #160	; 0xa0
    7c72:	3b01      	subs	r3, #1
    7c74:	80cb      	strh	r3, [r1, #6]
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    7c76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7c78:	7b93      	ldrb	r3, [r2, #14]
    7c7a:	9302      	str	r3, [sp, #8]
    7c7c:	7813      	ldrb	r3, [r2, #0]
    7c7e:	9301      	str	r3, [sp, #4]
    7c80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    7c82:	9300      	str	r3, [sp, #0]
    7c84:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7c86:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7c88:	9824      	ldr	r0, [sp, #144]	; 0x90
    7c8a:	4c0e      	ldr	r4, [pc, #56]	; (7cc4 <lv_draw_map+0x778>)
    7c8c:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
    7c8e:	9818      	ldr	r0, [sp, #96]	; 0x60
    7c90:	4c0e      	ldr	r4, [pc, #56]	; (7ccc <lv_draw_map+0x780>)
    7c92:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    7c94:	981b      	ldr	r0, [sp, #108]	; 0x6c
    7c96:	47a0      	blx	r4
        }
    }
}
    7c98:	b03f      	add	sp, #252	; 0xfc
    7c9a:	bc3c      	pop	{r2, r3, r4, r5}
    7c9c:	4690      	mov	r8, r2
    7c9e:	4699      	mov	r9, r3
    7ca0:	46a2      	mov	sl, r4
    7ca2:	46ab      	mov	fp, r5
    7ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ca6:	46c0      	nop			; (mov r8, r8)
    7ca8:	0000d085 	.word	0x0000d085
    7cac:	0000d1a5 	.word	0x0000d1a5
    7cb0:	0000d5ad 	.word	0x0000d5ad
    7cb4:	00018884 	.word	0x00018884
    7cb8:	fffff81f 	.word	0xfffff81f
    7cbc:	0000a5bd 	.word	0x0000a5bd
    7cc0:	00010fe5 	.word	0x00010fe5
    7cc4:	000068e9 	.word	0x000068e9
    7cc8:	00011089 	.word	0x00011089
    7ccc:	00010b6d 	.word	0x00010b6d
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    7cd0:	2301      	movs	r3, #1
    7cd2:	469b      	mov	fp, r3
    7cd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d000      	beq.n	7cdc <lv_draw_map+0x790>
    7cda:	e595      	b.n	7808 <lv_draw_map+0x2bc>
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    7cdc:	a83c      	add	r0, sp, #240	; 0xf0
    7cde:	4b41      	ldr	r3, [pc, #260]	; (7de4 <lv_draw_map+0x898>)
    7ce0:	4798      	blx	r3
    7ce2:	23f0      	movs	r3, #240	; 0xf0
    7ce4:	005b      	lsls	r3, r3, #1
    7ce6:	4298      	cmp	r0, r3
    7ce8:	d800      	bhi.n	7cec <lv_draw_map+0x7a0>
    7cea:	e598      	b.n	781e <lv_draw_map+0x2d2>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    7cec:	20f0      	movs	r0, #240	; 0xf0
    7cee:	0080      	lsls	r0, r0, #2
    7cf0:	4c3d      	ldr	r4, [pc, #244]	; (7de8 <lv_draw_map+0x89c>)
    7cf2:	47a0      	blx	r4
    7cf4:	901b      	str	r0, [sp, #108]	; 0x6c
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    7cf6:	26f0      	movs	r6, #240	; 0xf0
    7cf8:	0076      	lsls	r6, r6, #1
    7cfa:	0030      	movs	r0, r6
    7cfc:	47a0      	blx	r4
    7cfe:	9018      	str	r0, [sp, #96]	; 0x60
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    7d00:	2148      	movs	r1, #72	; 0x48
    7d02:	a82a      	add	r0, sp, #168	; 0xa8
    7d04:	4b39      	ldr	r3, [pc, #228]	; (7dec <lv_draw_map+0x8a0>)
    7d06:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    7d08:	961d      	str	r6, [sp, #116]	; 0x74
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    7d0a:	2205      	movs	r2, #5
    7d0c:	9b07      	ldr	r3, [sp, #28]
    7d0e:	2b00      	cmp	r3, #0
    7d10:	d104      	bne.n	7d1c <lv_draw_map+0x7d0>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
    7d12:	3a01      	subs	r2, #1
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
    7d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d16:	2b00      	cmp	r3, #0
    7d18:	d000      	beq.n	7d1c <lv_draw_map+0x7d0>
    7d1a:	3202      	adds	r2, #2
                trans_dsc.cfg.angle = draw_dsc->angle;
    7d1c:	a82a      	add	r0, sp, #168	; 0xa8
    7d1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7d20:	8863      	ldrh	r3, [r4, #2]
    7d22:	8183      	strh	r3, [r0, #12]
                trans_dsc.cfg.zoom = draw_dsc->zoom;
    7d24:	8923      	ldrh	r3, [r4, #8]
    7d26:	81c3      	strh	r3, [r0, #14]
                trans_dsc.cfg.src = map_p;
    7d28:	4643      	mov	r3, r8
    7d2a:	932a      	str	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.src_w = map_w;
    7d2c:	8087      	strh	r7, [r0, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    7d2e:	991c      	ldr	r1, [sp, #112]	; 0x70
    7d30:	88cb      	ldrh	r3, [r1, #6]
    7d32:	3301      	adds	r3, #1
    7d34:	8849      	ldrh	r1, [r1, #2]
    7d36:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
    7d38:	80c3      	strh	r3, [r0, #6]
                trans_dsc.cfg.cf = cf;
    7d3a:	7482      	strb	r2, [r0, #18]
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
    7d3c:	88a3      	ldrh	r3, [r4, #4]
    7d3e:	8103      	strh	r3, [r0, #8]
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
    7d40:	88e3      	ldrh	r3, [r4, #6]
    7d42:	8143      	strh	r3, [r0, #10]
                trans_dsc.cfg.color = draw_dsc->recolor;
    7d44:	89a3      	ldrh	r3, [r4, #12]
    7d46:	8203      	strh	r3, [r0, #16]
                trans_dsc.cfg.antialias = draw_dsc->antialias;
    7d48:	7be3      	ldrb	r3, [r4, #15]
    7d4a:	07db      	lsls	r3, r3, #31
    7d4c:	0fdb      	lsrs	r3, r3, #31
    7d4e:	74c3      	strb	r3, [r0, #19]
                _lv_img_buf_transform_init(&trans_dsc);
    7d50:	4b27      	ldr	r3, [pc, #156]	; (7df0 <lv_draw_map+0x8a4>)
    7d52:	4798      	blx	r3
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
    7d54:	990a      	ldr	r1, [sp, #40]	; 0x28
    7d56:	7a8b      	ldrb	r3, [r1, #10]
    7d58:	43da      	mvns	r2, r3
    7d5a:	b2d2      	uxtb	r2, r2
    7d5c:	9213      	str	r2, [sp, #76]	; 0x4c
            if(draw_dsc->recolor_opa != 0) {
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d100      	bne.n	7d64 <lv_draw_map+0x818>
    7d62:	e571      	b.n	7848 <lv_draw_map+0x2fc>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    7d64:	b29b      	uxth	r3, r3
    7d66:	7b4a      	ldrb	r2, [r1, #13]
    7d68:	08d2      	lsrs	r2, r2, #3
    7d6a:	435a      	muls	r2, r3
    7d6c:	9211      	str	r2, [sp, #68]	; 0x44
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    7d6e:	898a      	ldrh	r2, [r1, #12]
    7d70:	0552      	lsls	r2, r2, #21
    7d72:	0e92      	lsrs	r2, r2, #26
    7d74:	435a      	muls	r2, r3
    7d76:	9212      	str	r2, [sp, #72]	; 0x48
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    7d78:	7b0a      	ldrb	r2, [r1, #12]
    7d7a:	06d2      	lsls	r2, r2, #27
    7d7c:	0ed2      	lsrs	r2, r2, #27
    7d7e:	435a      	muls	r2, r3
    7d80:	9214      	str	r2, [sp, #80]	; 0x50
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    7d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d84:	9a07      	ldr	r2, [sp, #28]
    7d86:	4313      	orrs	r3, r2
    7d88:	9327      	str	r3, [sp, #156]	; 0x9c
    7d8a:	2202      	movs	r2, #2
    7d8c:	921e      	str	r2, [sp, #120]	; 0x78
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d10a      	bne.n	7da8 <lv_draw_map+0x85c>
    7d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7d94:	8853      	ldrh	r3, [r2, #2]
    7d96:	2b00      	cmp	r3, #0
    7d98:	d106      	bne.n	7da8 <lv_draw_map+0x85c>
    7d9a:	8913      	ldrh	r3, [r2, #8]
    7d9c:	3b01      	subs	r3, #1
    7d9e:	3bff      	subs	r3, #255	; 0xff
    7da0:	1e5a      	subs	r2, r3, #1
    7da2:	4193      	sbcs	r3, r2
    7da4:	3301      	adds	r3, #1
    7da6:	931e      	str	r3, [sp, #120]	; 0x78
            if(other_mask_cnt) {
    7da8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7daa:	2b00      	cmp	r3, #0
    7dac:	d000      	beq.n	7db0 <lv_draw_map+0x864>
    7dae:	e550      	b.n	7852 <lv_draw_map+0x306>
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
    7db0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7db2:	2212      	movs	r2, #18
    7db4:	5e9b      	ldrsh	r3, [r3, r2]
    7db6:	aa3c      	add	r2, sp, #240	; 0xf0
    7db8:	2102      	movs	r1, #2
    7dba:	5e52      	ldrsh	r2, [r2, r1]
    7dbc:	189b      	adds	r3, r3, r2
    7dbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7dc0:	2102      	movs	r1, #2
    7dc2:	5e52      	ldrsh	r2, [r2, r1]
    7dc4:	1a9b      	subs	r3, r3, r2
    7dc6:	9321      	str	r3, [sp, #132]	; 0x84
            for(y = 0; y < draw_area_h; y++) {
    7dc8:	9520      	str	r5, [sp, #128]	; 0x80
    7dca:	2d00      	cmp	r5, #0
    7dcc:	dc00      	bgt.n	7dd0 <lv_draw_map+0x884>
    7dce:	e748      	b.n	7c62 <lv_draw_map+0x716>
                map_buf_tmp += map_w * px_size_byte;
    7dd0:	4653      	mov	r3, sl
    7dd2:	437b      	muls	r3, r7
    7dd4:	931f      	str	r3, [sp, #124]	; 0x7c
    7dd6:	2300      	movs	r3, #0
    7dd8:	9310      	str	r3, [sp, #64]	; 0x40
    7dda:	930f      	str	r3, [sp, #60]	; 0x3c
    ret = _lv_img_buf_transform_anti_alias(dsc);
    7ddc:	464b      	mov	r3, r9
    7dde:	9306      	str	r3, [sp, #24]
    7de0:	e6af      	b.n	7b42 <lv_draw_map+0x5f6>
    7de2:	46c0      	nop			; (mov r8, r8)
    7de4:	0000fb8b 	.word	0x0000fb8b
    7de8:	00010e59 	.word	0x00010e59
    7dec:	00010fe5 	.word	0x00010fe5
    7df0:	0000d2a9 	.word	0x0000d2a9

00007df4 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
    7df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7df6:	b09f      	sub	sp, #124	; 0x7c
    7df8:	0005      	movs	r5, r0
    7dfa:	000e      	movs	r6, r1
    7dfc:	0017      	movs	r7, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
    7dfe:	ac09      	add	r4, sp, #36	; 0x24
    7e00:	0020      	movs	r0, r4
    7e02:	4b0b      	ldr	r3, [pc, #44]	; (7e30 <show_error+0x3c>)
    7e04:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
    7e06:	4b0b      	ldr	r3, [pc, #44]	; (7e34 <show_error+0x40>)
    7e08:	881b      	ldrh	r3, [r3, #0]
    7e0a:	8063      	strh	r3, [r4, #2]
    lv_draw_rect(coords, clip_area, &rect_dsc);
    7e0c:	0022      	movs	r2, r4
    7e0e:	0031      	movs	r1, r6
    7e10:	0028      	movs	r0, r5
    7e12:	4b09      	ldr	r3, [pc, #36]	; (7e38 <show_error+0x44>)
    7e14:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    7e16:	a802      	add	r0, sp, #8
    7e18:	4b08      	ldr	r3, [pc, #32]	; (7e3c <show_error+0x48>)
    7e1a:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
    7e1c:	2300      	movs	r3, #0
    7e1e:	9300      	str	r3, [sp, #0]
    7e20:	003b      	movs	r3, r7
    7e22:	aa02      	add	r2, sp, #8
    7e24:	0031      	movs	r1, r6
    7e26:	0028      	movs	r0, r5
    7e28:	4c05      	ldr	r4, [pc, #20]	; (7e40 <show_error+0x4c>)
    7e2a:	47a0      	blx	r4
}
    7e2c:	b01f      	add	sp, #124	; 0x7c
    7e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e30:	0000aab9 	.word	0x0000aab9
    7e34:	000188b4 	.word	0x000188b4
    7e38:	0000ab5d 	.word	0x0000ab5d
    7e3c:	0000815d 	.word	0x0000815d
    7e40:	000081ad 	.word	0x000081ad

00007e44 <lv_draw_img_dsc_init>:
{
    7e44:	b510      	push	{r4, lr}
    7e46:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
    7e48:	2110      	movs	r1, #16
    7e4a:	4b0a      	ldr	r3, [pc, #40]	; (7e74 <lv_draw_img_dsc_init+0x30>)
    7e4c:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
    7e4e:	7b23      	ldrb	r3, [r4, #12]
    7e50:	221f      	movs	r2, #31
    7e52:	4393      	bics	r3, r2
    7e54:	7323      	strb	r3, [r4, #12]
    7e56:	89a3      	ldrh	r3, [r4, #12]
    7e58:	4a07      	ldr	r2, [pc, #28]	; (7e78 <lv_draw_img_dsc_init+0x34>)
    7e5a:	4013      	ands	r3, r2
    7e5c:	81a3      	strh	r3, [r4, #12]
    7e5e:	2300      	movs	r3, #0
    7e60:	7363      	strb	r3, [r4, #13]
    dsc->opa = LV_OPA_COVER;
    7e62:	33ff      	adds	r3, #255	; 0xff
    7e64:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
    7e66:	3301      	adds	r3, #1
    7e68:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
    7e6a:	7be3      	ldrb	r3, [r4, #15]
    7e6c:	2201      	movs	r2, #1
    7e6e:	4313      	orrs	r3, r2
    7e70:	73e3      	strb	r3, [r4, #15]
}
    7e72:	bd10      	pop	{r4, pc}
    7e74:	00010fe5 	.word	0x00010fe5
    7e78:	fffff81f 	.word	0xfffff81f

00007e7c <lv_img_cf_get_px_size>:
    switch(cf) {
    7e7c:	3804      	subs	r0, #4
    7e7e:	b2c3      	uxtb	r3, r0
    7e80:	2b0a      	cmp	r3, #10
    7e82:	d80f      	bhi.n	7ea4 <lv_img_cf_get_px_size+0x28>
    7e84:	0098      	lsls	r0, r3, #2
    7e86:	4b08      	ldr	r3, [pc, #32]	; (7ea8 <lv_img_cf_get_px_size+0x2c>)
    7e88:	581b      	ldr	r3, [r3, r0]
    7e8a:	469f      	mov	pc, r3
            px_size = LV_COLOR_SIZE;
    7e8c:	2010      	movs	r0, #16
    7e8e:	e00a      	b.n	7ea6 <lv_img_cf_get_px_size+0x2a>
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
    7e90:	2018      	movs	r0, #24
            break;
    7e92:	e008      	b.n	7ea6 <lv_img_cf_get_px_size+0x2a>
            px_size = 1;
    7e94:	2001      	movs	r0, #1
            break;
    7e96:	e006      	b.n	7ea6 <lv_img_cf_get_px_size+0x2a>
            px_size = 2;
    7e98:	2002      	movs	r0, #2
            break;
    7e9a:	e004      	b.n	7ea6 <lv_img_cf_get_px_size+0x2a>
            px_size = 4;
    7e9c:	2004      	movs	r0, #4
            break;
    7e9e:	e002      	b.n	7ea6 <lv_img_cf_get_px_size+0x2a>
            px_size = 8;
    7ea0:	2008      	movs	r0, #8
            break;
    7ea2:	e000      	b.n	7ea6 <lv_img_cf_get_px_size+0x2a>
            px_size = 0;
    7ea4:	2000      	movs	r0, #0
}
    7ea6:	4770      	bx	lr
    7ea8:	00018888 	.word	0x00018888

00007eac <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
    7eac:	2803      	cmp	r0, #3
    7eae:	d005      	beq.n	7ebc <lv_img_cf_is_chroma_keyed+0x10>
    7eb0:	d302      	bcc.n	7eb8 <lv_img_cf_is_chroma_keyed+0xc>
    7eb2:	3806      	subs	r0, #6
    7eb4:	2804      	cmp	r0, #4
    7eb6:	d901      	bls.n	7ebc <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
    7eb8:	2000      	movs	r0, #0
}
    7eba:	4770      	bx	lr
            is_chroma_keyed = true;
    7ebc:	2001      	movs	r0, #1
    7ebe:	e7fc      	b.n	7eba <lv_img_cf_is_chroma_keyed+0xe>

00007ec0 <lv_img_cf_has_alpha>:
    switch(cf) {
    7ec0:	2805      	cmp	r0, #5
    7ec2:	d007      	beq.n	7ed4 <lv_img_cf_has_alpha+0x14>
    7ec4:	d803      	bhi.n	7ece <lv_img_cf_has_alpha+0xe>
    7ec6:	2802      	cmp	r0, #2
    7ec8:	d004      	beq.n	7ed4 <lv_img_cf_has_alpha+0x14>
            has_alpha = false;
    7eca:	2000      	movs	r0, #0
}
    7ecc:	4770      	bx	lr
    switch(cf) {
    7ece:	3807      	subs	r0, #7
    7ed0:	2807      	cmp	r0, #7
    7ed2:	d8fa      	bhi.n	7eca <lv_img_cf_has_alpha+0xa>
            has_alpha = true;
    7ed4:	2001      	movs	r0, #1
    7ed6:	e7f9      	b.n	7ecc <lv_img_cf_has_alpha+0xc>

00007ed8 <lv_draw_img>:
{
    7ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eda:	46de      	mov	lr, fp
    7edc:	4657      	mov	r7, sl
    7ede:	464e      	mov	r6, r9
    7ee0:	4645      	mov	r5, r8
    7ee2:	b5e0      	push	{r5, r6, r7, lr}
    7ee4:	b091      	sub	sp, #68	; 0x44
    7ee6:	0004      	movs	r4, r0
    7ee8:	9103      	str	r1, [sp, #12]
    7eea:	001e      	movs	r6, r3
    if(src == NULL) {
    7eec:	2a00      	cmp	r2, #0
    7eee:	d009      	beq.n	7f04 <lv_draw_img+0x2c>
    if(dsc->opa <= LV_OPA_MIN) return;
    7ef0:	781b      	ldrb	r3, [r3, #0]
    7ef2:	2b05      	cmp	r3, #5
    7ef4:	d80a      	bhi.n	7f0c <lv_draw_img+0x34>
}
    7ef6:	b011      	add	sp, #68	; 0x44
    7ef8:	bc3c      	pop	{r2, r3, r4, r5}
    7efa:	4690      	mov	r8, r2
    7efc:	4699      	mov	r9, r3
    7efe:	46a2      	mov	sl, r4
    7f00:	46ab      	mov	fp, r5
    7f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        show_error(coords, mask, "No\ndata");
    7f04:	4a6f      	ldr	r2, [pc, #444]	; (80c4 <lv_draw_img+0x1ec>)
    7f06:	4b70      	ldr	r3, [pc, #448]	; (80c8 <lv_draw_img+0x1f0>)
    7f08:	4798      	blx	r3
        return;
    7f0a:	e7f4      	b.n	7ef6 <lv_draw_img+0x1e>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
    7f0c:	89b1      	ldrh	r1, [r6, #12]
    7f0e:	0010      	movs	r0, r2
    7f10:	4b6e      	ldr	r3, [pc, #440]	; (80cc <lv_draw_img+0x1f4>)
    7f12:	4798      	blx	r3
    7f14:	1e07      	subs	r7, r0, #0
    if(cdsc == NULL) return LV_RES_INV;
    7f16:	d100      	bne.n	7f1a <lv_draw_img+0x42>
    7f18:	e09e      	b.n	8058 <lv_draw_img+0x180>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    7f1a:	7b05      	ldrb	r5, [r0, #12]
    7f1c:	06ed      	lsls	r5, r5, #27
    7f1e:	0eed      	lsrs	r5, r5, #27
    7f20:	0028      	movs	r0, r5
    7f22:	4b6b      	ldr	r3, [pc, #428]	; (80d0 <lv_draw_img+0x1f8>)
    7f24:	4798      	blx	r3
    7f26:	9004      	str	r0, [sp, #16]
    7f28:	9006      	str	r0, [sp, #24]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
    7f2a:	0028      	movs	r0, r5
    7f2c:	4b69      	ldr	r3, [pc, #420]	; (80d4 <lv_draw_img+0x1fc>)
    7f2e:	4798      	blx	r3
    7f30:	9005      	str	r0, [sp, #20]
    7f32:	9007      	str	r0, [sp, #28]
    if(cdsc->dec_dsc.error_msg != NULL) {
    7f34:	69ba      	ldr	r2, [r7, #24]
    7f36:	2a00      	cmp	r2, #0
    7f38:	d004      	beq.n	7f44 <lv_draw_img+0x6c>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
    7f3a:	9903      	ldr	r1, [sp, #12]
    7f3c:	0020      	movs	r0, r4
    7f3e:	4b62      	ldr	r3, [pc, #392]	; (80c8 <lv_draw_img+0x1f0>)
    7f40:	4798      	blx	r3
    7f42:	e7d8      	b.n	7ef6 <lv_draw_img+0x1e>
    else if(cdsc->dec_dsc.img_data) {
    7f44:	693b      	ldr	r3, [r7, #16]
    7f46:	2b00      	cmp	r3, #0
    7f48:	d045      	beq.n	7fd6 <lv_draw_img+0xfe>
    7f4a:	2300      	movs	r3, #0
    7f4c:	a90c      	add	r1, sp, #48	; 0x30
    7f4e:	5ce2      	ldrb	r2, [r4, r3]
    7f50:	545a      	strb	r2, [r3, r1]
    7f52:	3301      	adds	r3, #1
    while(len) {
    7f54:	2b08      	cmp	r3, #8
    7f56:	d1fa      	bne.n	7f4e <lv_draw_img+0x76>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
    7f58:	8873      	ldrh	r3, [r6, #2]
    7f5a:	2b00      	cmp	r3, #0
    7f5c:	d104      	bne.n	7f68 <lv_draw_img+0x90>
    7f5e:	2280      	movs	r2, #128	; 0x80
    7f60:	0052      	lsls	r2, r2, #1
    7f62:	8931      	ldrh	r1, [r6, #8]
    7f64:	4291      	cmp	r1, r2
    7f66:	d023      	beq.n	7fb0 <lv_draw_img+0xd8>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
    7f68:	b21b      	sxth	r3, r3
    7f6a:	88e2      	ldrh	r2, [r4, #6]
    7f6c:	3201      	adds	r2, #1
    7f6e:	8861      	ldrh	r1, [r4, #2]
    7f70:	1a52      	subs	r2, r2, r1
    7f72:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    7f74:	88a1      	ldrh	r1, [r4, #4]
    7f76:	3101      	adds	r1, #1
    7f78:	8820      	ldrh	r0, [r4, #0]
    7f7a:	1a09      	subs	r1, r1, r0
    7f7c:	b209      	sxth	r1, r1
    7f7e:	a80c      	add	r0, sp, #48	; 0x30
    7f80:	0005      	movs	r5, r0
    7f82:	1d30      	adds	r0, r6, #4
    7f84:	9001      	str	r0, [sp, #4]
    7f86:	8930      	ldrh	r0, [r6, #8]
    7f88:	9000      	str	r0, [sp, #0]
    7f8a:	9506      	str	r5, [sp, #24]
    7f8c:	0028      	movs	r0, r5
    7f8e:	4d52      	ldr	r5, [pc, #328]	; (80d8 <lv_draw_img+0x200>)
    7f90:	47a8      	blx	r5
            map_area_rot.x1 += coords->x1;
    7f92:	8822      	ldrh	r2, [r4, #0]
    7f94:	9806      	ldr	r0, [sp, #24]
    7f96:	8803      	ldrh	r3, [r0, #0]
    7f98:	18d3      	adds	r3, r2, r3
    7f9a:	8003      	strh	r3, [r0, #0]
            map_area_rot.y1 += coords->y1;
    7f9c:	8863      	ldrh	r3, [r4, #2]
    7f9e:	8841      	ldrh	r1, [r0, #2]
    7fa0:	1859      	adds	r1, r3, r1
    7fa2:	8041      	strh	r1, [r0, #2]
            map_area_rot.x2 += coords->x1;
    7fa4:	8881      	ldrh	r1, [r0, #4]
    7fa6:	1852      	adds	r2, r2, r1
    7fa8:	8082      	strh	r2, [r0, #4]
            map_area_rot.y2 += coords->y1;
    7faa:	88c2      	ldrh	r2, [r0, #6]
    7fac:	189b      	adds	r3, r3, r2
    7fae:	80c3      	strh	r3, [r0, #6]
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
    7fb0:	aa0c      	add	r2, sp, #48	; 0x30
    7fb2:	9903      	ldr	r1, [sp, #12]
    7fb4:	a80e      	add	r0, sp, #56	; 0x38
    7fb6:	4b49      	ldr	r3, [pc, #292]	; (80dc <lv_draw_img+0x204>)
    7fb8:	4798      	blx	r3
        if(union_ok == false) {
    7fba:	2800      	cmp	r0, #0
    7fbc:	d100      	bne.n	7fc0 <lv_draw_img+0xe8>
    7fbe:	e79a      	b.n	7ef6 <lv_draw_img+0x1e>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
    7fc0:	693a      	ldr	r2, [r7, #16]
    7fc2:	9b05      	ldr	r3, [sp, #20]
    7fc4:	9301      	str	r3, [sp, #4]
    7fc6:	9b04      	ldr	r3, [sp, #16]
    7fc8:	9300      	str	r3, [sp, #0]
    7fca:	0033      	movs	r3, r6
    7fcc:	a90e      	add	r1, sp, #56	; 0x38
    7fce:	0020      	movs	r0, r4
    7fd0:	4c43      	ldr	r4, [pc, #268]	; (80e0 <lv_draw_img+0x208>)
    7fd2:	47a0      	blx	r4
    7fd4:	e78f      	b.n	7ef6 <lv_draw_img+0x1e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
    7fd6:	0022      	movs	r2, r4
    7fd8:	9903      	ldr	r1, [sp, #12]
    7fda:	a80a      	add	r0, sp, #40	; 0x28
    7fdc:	4b3f      	ldr	r3, [pc, #252]	; (80dc <lv_draw_img+0x204>)
    7fde:	4798      	blx	r3
        if(union_ok == false) {
    7fe0:	2800      	cmp	r0, #0
    7fe2:	d100      	bne.n	7fe6 <lv_draw_img+0x10e>
    7fe4:	e787      	b.n	7ef6 <lv_draw_img+0x1e>
    7fe6:	aa0a      	add	r2, sp, #40	; 0x28
    7fe8:	8893      	ldrh	r3, [r2, #4]
    7fea:	3301      	adds	r3, #1
    7fec:	8812      	ldrh	r2, [r2, #0]
    7fee:	1a9b      	subs	r3, r3, r2
    7ff0:	b21b      	sxth	r3, r3
    7ff2:	9305      	str	r3, [sp, #20]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
    7ff4:	0058      	lsls	r0, r3, #1
    7ff6:	469c      	mov	ip, r3
    7ff8:	4460      	add	r0, ip
    7ffa:	4b3a      	ldr	r3, [pc, #232]	; (80e4 <lv_draw_img+0x20c>)
    7ffc:	4798      	blx	r3
    7ffe:	9004      	str	r0, [sp, #16]
    8000:	2300      	movs	r3, #0
        *d8 = *s8;
    8002:	a80c      	add	r0, sp, #48	; 0x30
    8004:	a90a      	add	r1, sp, #40	; 0x28
    8006:	5c5a      	ldrb	r2, [r3, r1]
    8008:	541a      	strb	r2, [r3, r0]
    800a:	3301      	adds	r3, #1
    while(len) {
    800c:	2b08      	cmp	r3, #8
    800e:	d1fa      	bne.n	8006 <lv_draw_img+0x12e>
        lv_area_set_height(&line, 1);
    8010:	2101      	movs	r1, #1
    8012:	a80c      	add	r0, sp, #48	; 0x30
    8014:	4b34      	ldr	r3, [pc, #208]	; (80e8 <lv_draw_img+0x210>)
    8016:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
    8018:	aa0a      	add	r2, sp, #40	; 0x28
    801a:	2100      	movs	r1, #0
    801c:	5e53      	ldrsh	r3, [r2, r1]
    801e:	469c      	mov	ip, r3
    8020:	2000      	movs	r0, #0
    8022:	5e21      	ldrsh	r1, [r4, r0]
        int32_t y = mask_com.y1 - coords->y1;
    8024:	2002      	movs	r0, #2
    8026:	5e15      	ldrsh	r5, [r2, r0]
    8028:	2302      	movs	r3, #2
    802a:	5ee0      	ldrsh	r0, [r4, r3]
    802c:	1a28      	subs	r0, r5, r0
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    802e:	2306      	movs	r3, #6
    8030:	5ed2      	ldrsh	r2, [r2, r3]
    8032:	4295      	cmp	r5, r2
    8034:	dc42      	bgt.n	80bc <lv_draw_img+0x1e4>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    8036:	4a29      	ldr	r2, [pc, #164]	; (80dc <lv_draw_img+0x204>)
    8038:	4693      	mov	fp, r2
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    803a:	4663      	mov	r3, ip
    803c:	1a5b      	subs	r3, r3, r1
    803e:	b21b      	sxth	r3, r3
    8040:	9308      	str	r3, [sp, #32]
    8042:	9409      	str	r4, [sp, #36]	; 0x24
    8044:	46b2      	mov	sl, r6
    8046:	4680      	mov	r8, r0
    8048:	e012      	b.n	8070 <lv_draw_img+0x198>
    804a:	9c09      	ldr	r4, [sp, #36]	; 0x24
                lv_img_decoder_close(&cdsc->dec_dsc);
    804c:	0038      	movs	r0, r7
    804e:	4b27      	ldr	r3, [pc, #156]	; (80ec <lv_draw_img+0x214>)
    8050:	4798      	blx	r3
                _lv_mem_buf_release(buf);
    8052:	9804      	ldr	r0, [sp, #16]
    8054:	4b26      	ldr	r3, [pc, #152]	; (80f0 <lv_draw_img+0x218>)
    8056:	4798      	blx	r3
        show_error(coords, mask, "No\ndata");
    8058:	4a1a      	ldr	r2, [pc, #104]	; (80c4 <lv_draw_img+0x1ec>)
    805a:	9903      	ldr	r1, [sp, #12]
    805c:	0020      	movs	r0, r4
    805e:	4b1a      	ldr	r3, [pc, #104]	; (80c8 <lv_draw_img+0x1f0>)
    8060:	4798      	blx	r3
        return;
    8062:	e748      	b.n	7ef6 <lv_draw_img+0x1e>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    8064:	3501      	adds	r5, #1
    8066:	ab0a      	add	r3, sp, #40	; 0x28
    8068:	2206      	movs	r2, #6
    806a:	5e9b      	ldrsh	r3, [r3, r2]
    806c:	429d      	cmp	r5, r3
    806e:	dc25      	bgt.n	80bc <lv_draw_img+0x1e4>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    8070:	aa0c      	add	r2, sp, #48	; 0x30
    8072:	9903      	ldr	r1, [sp, #12]
    8074:	a80e      	add	r0, sp, #56	; 0x38
    8076:	47d8      	blx	fp
            if(union_ok == false) continue;
    8078:	2800      	cmp	r0, #0
    807a:	d0f3      	beq.n	8064 <lv_draw_img+0x18c>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    807c:	4643      	mov	r3, r8
    807e:	b21a      	sxth	r2, r3
    8080:	9b04      	ldr	r3, [sp, #16]
    8082:	9300      	str	r3, [sp, #0]
    8084:	9b05      	ldr	r3, [sp, #20]
    8086:	9908      	ldr	r1, [sp, #32]
    8088:	0038      	movs	r0, r7
    808a:	4c1a      	ldr	r4, [pc, #104]	; (80f4 <lv_draw_img+0x21c>)
    808c:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
    808e:	2801      	cmp	r0, #1
    8090:	d1db      	bne.n	804a <lv_draw_img+0x172>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
    8092:	ac0c      	add	r4, sp, #48	; 0x30
    8094:	9b07      	ldr	r3, [sp, #28]
    8096:	9301      	str	r3, [sp, #4]
    8098:	9b06      	ldr	r3, [sp, #24]
    809a:	9300      	str	r3, [sp, #0]
    809c:	4653      	mov	r3, sl
    809e:	9a04      	ldr	r2, [sp, #16]
    80a0:	a90e      	add	r1, sp, #56	; 0x38
    80a2:	0020      	movs	r0, r4
    80a4:	4e0e      	ldr	r6, [pc, #56]	; (80e0 <lv_draw_img+0x208>)
    80a6:	47b0      	blx	r6
            line.y1++;
    80a8:	8863      	ldrh	r3, [r4, #2]
    80aa:	3301      	adds	r3, #1
    80ac:	8063      	strh	r3, [r4, #2]
            line.y2++;
    80ae:	88e3      	ldrh	r3, [r4, #6]
    80b0:	3301      	adds	r3, #1
    80b2:	80e3      	strh	r3, [r4, #6]
            y++;
    80b4:	2301      	movs	r3, #1
    80b6:	469c      	mov	ip, r3
    80b8:	44e0      	add	r8, ip
    80ba:	e7d3      	b.n	8064 <lv_draw_img+0x18c>
        _lv_mem_buf_release(buf);
    80bc:	9804      	ldr	r0, [sp, #16]
    80be:	4b0c      	ldr	r3, [pc, #48]	; (80f0 <lv_draw_img+0x218>)
    80c0:	4798      	blx	r3
    80c2:	e718      	b.n	7ef6 <lv_draw_img+0x1e>
    80c4:	000188b8 	.word	0x000188b8
    80c8:	00007df5 	.word	0x00007df5
    80cc:	0000da01 	.word	0x0000da01
    80d0:	00007ead 	.word	0x00007ead
    80d4:	00007ec1 	.word	0x00007ec1
    80d8:	0000d3dd 	.word	0x0000d3dd
    80dc:	0000fba7 	.word	0x0000fba7
    80e0:	0000754d 	.word	0x0000754d
    80e4:	00010e59 	.word	0x00010e59
    80e8:	0000fb81 	.word	0x0000fb81
    80ec:	0000e61d 	.word	0x0000e61d
    80f0:	00010b6d 	.word	0x00010b6d
    80f4:	0000e5f9 	.word	0x0000e5f9

000080f8 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
    80f8:	2800      	cmp	r0, #0
    80fa:	d008      	beq.n	810e <lv_img_src_get_type+0x16>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    80fc:	7803      	ldrb	r3, [r0, #0]
    80fe:	001a      	movs	r2, r3
    8100:	3a20      	subs	r2, #32
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    8102:	2001      	movs	r0, #1
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    8104:	2a5f      	cmp	r2, #95	; 0x5f
    8106:	d901      	bls.n	810c <lv_img_src_get_type+0x14>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
    8108:	09d8      	lsrs	r0, r3, #7
    810a:	0040      	lsls	r0, r0, #1
}
    810c:	4770      	bx	lr
    if(src == NULL) return img_src_type;
    810e:	2003      	movs	r0, #3
    8110:	e7fc      	b.n	810c <lv_img_src_get_type+0x14>
	...

00008114 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
    8114:	0003      	movs	r3, r0
    8116:	3b30      	subs	r3, #48	; 0x30
    8118:	b2db      	uxtb	r3, r3
        result = hex - '0';
    811a:	001a      	movs	r2, r3
    if(hex >= '0' && hex <= '9') {
    811c:	2b09      	cmp	r3, #9
    811e:	d918      	bls.n	8152 <hex_char_to_num+0x3e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
    8120:	2860      	cmp	r0, #96	; 0x60
    8122:	d901      	bls.n	8128 <hex_char_to_num+0x14>
    8124:	3820      	subs	r0, #32
    8126:	b2c0      	uxtb	r0, r0

        switch(hex) {
    8128:	3841      	subs	r0, #65	; 0x41
    812a:	b2c3      	uxtb	r3, r0
    812c:	2b05      	cmp	r3, #5
    812e:	d80d      	bhi.n	814c <hex_char_to_num+0x38>
    8130:	0098      	lsls	r0, r3, #2
    8132:	4b09      	ldr	r3, [pc, #36]	; (8158 <hex_char_to_num+0x44>)
    8134:	581b      	ldr	r3, [r3, r0]
    8136:	469f      	mov	pc, r3
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
    8138:	220b      	movs	r2, #11
    813a:	e00a      	b.n	8152 <hex_char_to_num+0x3e>
                break;
            case 'C':
                result = 12;
    813c:	220c      	movs	r2, #12
                break;
    813e:	e008      	b.n	8152 <hex_char_to_num+0x3e>
            case 'D':
                result = 13;
    8140:	220d      	movs	r2, #13
                break;
    8142:	e006      	b.n	8152 <hex_char_to_num+0x3e>
            case 'E':
                result = 14;
    8144:	220e      	movs	r2, #14
                break;
    8146:	e004      	b.n	8152 <hex_char_to_num+0x3e>
            case 'F':
                result = 15;
    8148:	220f      	movs	r2, #15
                break;
    814a:	e002      	b.n	8152 <hex_char_to_num+0x3e>
            default:
                result = 0;
    814c:	2200      	movs	r2, #0
                break;
    814e:	e000      	b.n	8152 <hex_char_to_num+0x3e>
                result = 10;
    8150:	220a      	movs	r2, #10
        }
    }

    return result;
}
    8152:	0010      	movs	r0, r2
    8154:	4770      	bx	lr
    8156:	46c0      	nop			; (mov r8, r8)
    8158:	000188c0 	.word	0x000188c0

0000815c <lv_draw_label_dsc_init>:
{
    815c:	b510      	push	{r4, lr}
    815e:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    8160:	211c      	movs	r1, #28
    8162:	4b0f      	ldr	r3, [pc, #60]	; (81a0 <lv_draw_label_dsc_init+0x44>)
    8164:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
    8166:	23ff      	movs	r3, #255	; 0xff
    8168:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    816a:	7823      	ldrb	r3, [r4, #0]
    816c:	221f      	movs	r2, #31
    816e:	4393      	bics	r3, r2
    8170:	7023      	strb	r3, [r4, #0]
    8172:	8822      	ldrh	r2, [r4, #0]
    8174:	490b      	ldr	r1, [pc, #44]	; (81a4 <lv_draw_label_dsc_init+0x48>)
    8176:	400a      	ands	r2, r1
    8178:	8022      	strh	r2, [r4, #0]
    817a:	2300      	movs	r3, #0
    817c:	7063      	strb	r3, [r4, #1]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
    817e:	4b0a      	ldr	r3, [pc, #40]	; (81a8 <lv_draw_label_dsc_init+0x4c>)
    8180:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    8182:	2301      	movs	r3, #1
    8184:	425b      	negs	r3, r3
    8186:	81e3      	strh	r3, [r4, #14]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    8188:	8223      	strh	r3, [r4, #16]
    dsc->sel_color = LV_COLOR_BLUE;
    818a:	78a2      	ldrb	r2, [r4, #2]
    818c:	231f      	movs	r3, #31
    818e:	431a      	orrs	r2, r3
    8190:	70a2      	strb	r2, [r4, #2]
    8192:	8863      	ldrh	r3, [r4, #2]
    8194:	400b      	ands	r3, r1
    8196:	8063      	strh	r3, [r4, #2]
    8198:	2300      	movs	r3, #0
    819a:	70e3      	strb	r3, [r4, #3]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
    819c:	75a3      	strb	r3, [r4, #22]
}
    819e:	bd10      	pop	{r4, pc}
    81a0:	00010fe5 	.word	0x00010fe5
    81a4:	fffff81f 	.word	0xfffff81f
    81a8:	20000030 	.word	0x20000030

000081ac <lv_draw_label>:
{
    81ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    81ae:	46de      	mov	lr, fp
    81b0:	4657      	mov	r7, sl
    81b2:	464e      	mov	r6, r9
    81b4:	4645      	mov	r5, r8
    81b6:	b5e0      	push	{r5, r6, r7, lr}
    81b8:	b0db      	sub	sp, #364	; 0x16c
    81ba:	9010      	str	r0, [sp, #64]	; 0x40
    81bc:	910e      	str	r1, [sp, #56]	; 0x38
    81be:	0017      	movs	r7, r2
    81c0:	001a      	movs	r2, r3
    81c2:	930d      	str	r3, [sp, #52]	; 0x34
    81c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
    81c6:	9305      	str	r3, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
    81c8:	7a3b      	ldrb	r3, [r7, #8]
    81ca:	2b05      	cmp	r3, #5
    81cc:	d902      	bls.n	81d4 <lv_draw_label+0x28>
    if(txt[0] == '\0')  return;
    81ce:	7813      	ldrb	r3, [r2, #0]
    81d0:	2b00      	cmp	r3, #0
    81d2:	d106      	bne.n	81e2 <lv_draw_label+0x36>
}
    81d4:	b05b      	add	sp, #364	; 0x16c
    81d6:	bc3c      	pop	{r2, r3, r4, r5}
    81d8:	4690      	mov	r8, r2
    81da:	4699      	mov	r9, r3
    81dc:	46a2      	mov	sl, r4
    81de:	46ab      	mov	fp, r5
    81e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const lv_font_t * font = dsc->font;
    81e2:	687b      	ldr	r3, [r7, #4]
    81e4:	9307      	str	r3, [sp, #28]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
    81e6:	000a      	movs	r2, r1
    81e8:	0004      	movs	r4, r0
    81ea:	0001      	movs	r1, r0
    81ec:	a858      	add	r0, sp, #352	; 0x160
    81ee:	4bd2      	ldr	r3, [pc, #840]	; (8538 <lv_draw_label+0x38c>)
    81f0:	4798      	blx	r3
    if(!clip_ok) return;
    81f2:	2800      	cmp	r0, #0
    81f4:	d0ee      	beq.n	81d4 <lv_draw_label+0x28>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
    81f6:	7dfa      	ldrb	r2, [r7, #23]
    81f8:	0791      	lsls	r1, r2, #30
    81fa:	d424      	bmi.n	8246 <lv_draw_label+0x9a>
    81fc:	88a3      	ldrh	r3, [r4, #4]
    81fe:	3301      	adds	r3, #1
    8200:	8822      	ldrh	r2, [r4, #0]
    8202:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
    8204:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
    8206:	9a07      	ldr	r2, [sp, #28]
    8208:	2608      	movs	r6, #8
    820a:	5f96      	ldrsh	r6, [r2, r6]
    int32_t line_height = line_height_font + dsc->line_space;
    820c:	210a      	movs	r1, #10
    820e:	5e7a      	ldrsh	r2, [r7, r1]
    8210:	4691      	mov	r9, r2
    8212:	44b1      	add	r9, r6
    pos.x = coords->x1;
    8214:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8216:	2000      	movs	r0, #0
    8218:	5e11      	ldrsh	r1, [r2, r0]
    821a:	911f      	str	r1, [sp, #124]	; 0x7c
    pos.y = coords->y1;
    821c:	2002      	movs	r0, #2
    821e:	5e10      	ldrsh	r0, [r2, r0]
    x_ofs = dsc->ofs_x;
    8220:	2112      	movs	r1, #18
    8222:	5e7a      	ldrsh	r2, [r7, r1]
    8224:	921e      	str	r2, [sp, #120]	; 0x78
    y_ofs = dsc->ofs_y;
    8226:	2214      	movs	r2, #20
    8228:	5eb9      	ldrsh	r1, [r7, r2]
    pos.y += y_ofs;
    822a:	1842      	adds	r2, r0, r1
    822c:	b292      	uxth	r2, r2
    822e:	b215      	sxth	r5, r2
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    8230:	9c05      	ldr	r4, [sp, #20]
    8232:	2c00      	cmp	r4, #0
    8234:	d052      	beq.n	82dc <lv_draw_label+0x130>
    8236:	2900      	cmp	r1, #0
    8238:	d154      	bne.n	82e4 <lv_draw_label+0x138>
    823a:	2800      	cmp	r0, #0
    823c:	db14      	blt.n	8268 <lv_draw_label+0xbc>
    pos.y += y_ofs;
    823e:	9511      	str	r5, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
    8240:	2200      	movs	r2, #0
    8242:	9208      	str	r2, [sp, #32]
    8244:	e02e      	b.n	82a4 <lv_draw_label+0xf8>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
    8246:	210c      	movs	r1, #12
    8248:	5e7b      	ldrsh	r3, [r7, r1]
    824a:	ad3c      	add	r5, sp, #240	; 0xf0
    824c:	9202      	str	r2, [sp, #8]
    824e:	4abb      	ldr	r2, [pc, #748]	; (853c <lv_draw_label+0x390>)
    8250:	9201      	str	r2, [sp, #4]
    8252:	210a      	movs	r1, #10
    8254:	5e7a      	ldrsh	r2, [r7, r1]
    8256:	9200      	str	r2, [sp, #0]
    8258:	687a      	ldr	r2, [r7, #4]
    825a:	990d      	ldr	r1, [sp, #52]	; 0x34
    825c:	0028      	movs	r0, r5
    825e:	4eb8      	ldr	r6, [pc, #736]	; (8540 <lv_draw_label+0x394>)
    8260:	47b0      	blx	r6
        w = p.x;
    8262:	2200      	movs	r2, #0
    8264:	5eab      	ldrsh	r3, [r5, r2]
    8266:	e7ce      	b.n	8206 <lv_draw_label+0x5a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
    8268:	68a1      	ldr	r1, [r4, #8]
    826a:	1a08      	subs	r0, r1, r0
    826c:	17c1      	asrs	r1, r0, #31
    826e:	1840      	adds	r0, r0, r1
    8270:	4048      	eors	r0, r1
    8272:	2180      	movs	r1, #128	; 0x80
    8274:	0089      	lsls	r1, r1, #2
    8276:	464c      	mov	r4, r9
    8278:	1b09      	subs	r1, r1, r4
    827a:	0049      	lsls	r1, r1, #1
    827c:	4288      	cmp	r0, r1
    827e:	dd07      	ble.n	8290 <lv_draw_label+0xe4>
            hint->line_start = -1;
    8280:	2201      	movs	r2, #1
    8282:	4252      	negs	r2, r2
    8284:	9905      	ldr	r1, [sp, #20]
    8286:	600a      	str	r2, [r1, #0]
    pos.y += y_ofs;
    8288:	9511      	str	r5, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
    828a:	2200      	movs	r2, #0
    828c:	9208      	str	r2, [sp, #32]
    828e:	e009      	b.n	82a4 <lv_draw_label+0xf8>
        last_line_start = hint->line_start;
    8290:	9805      	ldr	r0, [sp, #20]
    8292:	6801      	ldr	r1, [r0, #0]
    if(hint && last_line_start >= 0) {
    8294:	2900      	cmp	r1, #0
    8296:	db29      	blt.n	82ec <lv_draw_label+0x140>
        line_start = last_line_start;
    8298:	9108      	str	r1, [sp, #32]
        pos.y += hint->y;
    829a:	6841      	ldr	r1, [r0, #4]
    829c:	468c      	mov	ip, r1
    829e:	4462      	add	r2, ip
    82a0:	b212      	sxth	r2, r2
    82a2:	9211      	str	r2, [sp, #68]	; 0x44
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    82a4:	b21b      	sxth	r3, r3
    82a6:	0019      	movs	r1, r3
    82a8:	9312      	str	r3, [sp, #72]	; 0x48
    82aa:	230c      	movs	r3, #12
    82ac:	5efa      	ldrsh	r2, [r7, r3]
    82ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    82b0:	0018      	movs	r0, r3
    82b2:	9c08      	ldr	r4, [sp, #32]
    82b4:	46a4      	mov	ip, r4
    82b6:	4460      	add	r0, ip
    82b8:	7dfb      	ldrb	r3, [r7, #23]
    82ba:	9300      	str	r3, [sp, #0]
    82bc:	000b      	movs	r3, r1
    82be:	9907      	ldr	r1, [sp, #28]
    82c0:	4da0      	ldr	r5, [pc, #640]	; (8544 <lv_draw_label+0x398>)
    82c2:	47a8      	blx	r5
    82c4:	46a4      	mov	ip, r4
    82c6:	4460      	add	r0, ip
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    82c8:	4a9e      	ldr	r2, [pc, #632]	; (8544 <lv_draw_label+0x398>)
    82ca:	4692      	mov	sl, r2
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    82cc:	4a9e      	ldr	r2, [pc, #632]	; (8548 <lv_draw_label+0x39c>)
    82ce:	4690      	mov	r8, r2
    82d0:	9606      	str	r6, [sp, #24]
    82d2:	0006      	movs	r6, r0
    82d4:	9d11      	ldr	r5, [sp, #68]	; 0x44
    82d6:	46bb      	mov	fp, r7
    82d8:	9f05      	ldr	r7, [sp, #20]
    while(pos.y + line_height_font < mask->y1) {
    82da:	e011      	b.n	8300 <lv_draw_label+0x154>
    pos.y += y_ofs;
    82dc:	9511      	str	r5, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
    82de:	2200      	movs	r2, #0
    82e0:	9208      	str	r2, [sp, #32]
    82e2:	e7df      	b.n	82a4 <lv_draw_label+0xf8>
    pos.y += y_ofs;
    82e4:	9511      	str	r5, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
    82e6:	2200      	movs	r2, #0
    82e8:	9208      	str	r2, [sp, #32]
    82ea:	e7db      	b.n	82a4 <lv_draw_label+0xf8>
    pos.y += y_ofs;
    82ec:	9511      	str	r5, [sp, #68]	; 0x44
    uint32_t line_start     = 0;
    82ee:	2200      	movs	r2, #0
    82f0:	9208      	str	r2, [sp, #32]
    82f2:	e7d7      	b.n	82a4 <lv_draw_label+0xf8>
    82f4:	9608      	str	r6, [sp, #32]
        if(txt[line_start] == '\0') return;
    82f6:	7823      	ldrb	r3, [r4, #0]
    82f8:	2b00      	cmp	r3, #0
    82fa:	d100      	bne.n	82fe <lv_draw_label+0x152>
    82fc:	e76a      	b.n	81d4 <lv_draw_label+0x28>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    82fe:	0006      	movs	r6, r0
    while(pos.y + line_height_font < mask->y1) {
    8300:	9b06      	ldr	r3, [sp, #24]
    8302:	18eb      	adds	r3, r5, r3
    8304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8306:	2102      	movs	r1, #2
    8308:	5e52      	ldrsh	r2, [r2, r1]
    830a:	4293      	cmp	r3, r2
    830c:	da20      	bge.n	8350 <lv_draw_label+0x1a4>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    830e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8310:	199c      	adds	r4, r3, r6
    8312:	465b      	mov	r3, fp
    8314:	220c      	movs	r2, #12
    8316:	5e9a      	ldrsh	r2, [r3, r2]
    8318:	465b      	mov	r3, fp
    831a:	7ddb      	ldrb	r3, [r3, #23]
    831c:	9300      	str	r3, [sp, #0]
    831e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8320:	9907      	ldr	r1, [sp, #28]
    8322:	0020      	movs	r0, r4
    8324:	47d0      	blx	sl
    8326:	1980      	adds	r0, r0, r6
    8328:	444d      	add	r5, r9
    832a:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    832c:	2f00      	cmp	r7, #0
    832e:	d0e1      	beq.n	82f4 <lv_draw_label+0x148>
    8330:	4545      	cmp	r5, r8
    8332:	dbdf      	blt.n	82f4 <lv_draw_label+0x148>
    8334:	683b      	ldr	r3, [r7, #0]
    8336:	2b00      	cmp	r3, #0
    8338:	dadc      	bge.n	82f4 <lv_draw_label+0x148>
            hint->line_start = line_start;
    833a:	603e      	str	r6, [r7, #0]
            hint->y          = pos.y - coords->y1;
    833c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    833e:	2102      	movs	r1, #2
    8340:	5e53      	ldrsh	r3, [r2, r1]
    8342:	1aeb      	subs	r3, r5, r3
    8344:	607b      	str	r3, [r7, #4]
            hint->coord_y    = coords->y1;
    8346:	0013      	movs	r3, r2
    8348:	2202      	movs	r2, #2
    834a:	5e9b      	ldrsh	r3, [r3, r2]
    834c:	60bb      	str	r3, [r7, #8]
    834e:	e7d1      	b.n	82f4 <lv_draw_label+0x148>
    8350:	960b      	str	r6, [sp, #44]	; 0x2c
    8352:	9511      	str	r5, [sp, #68]	; 0x44
    8354:	465f      	mov	r7, fp
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
    8356:	7dfa      	ldrb	r2, [r7, #23]
    8358:	0753      	lsls	r3, r2, #29
    835a:	d42f      	bmi.n	83bc <lv_draw_label+0x210>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    835c:	0713      	lsls	r3, r2, #28
    835e:	d449      	bmi.n	83f4 <lv_draw_label+0x248>
    lv_opa_t opa = dsc->opa;
    8360:	7a3b      	ldrb	r3, [r7, #8]
    8362:	930f      	str	r3, [sp, #60]	; 0x3c
    uint16_t sel_start = dsc->sel_start;
    8364:	89fb      	ldrh	r3, [r7, #14]
    8366:	9306      	str	r3, [sp, #24]
    uint16_t sel_end = dsc->sel_end;
    8368:	8a3a      	ldrh	r2, [r7, #16]
    836a:	4692      	mov	sl, r2
    if(sel_start > sel_end) {
    836c:	4553      	cmp	r3, sl
    836e:	d902      	bls.n	8376 <lv_draw_label+0x1ca>
        sel_start = sel_end;
    8370:	4652      	mov	r2, sl
    8372:	9206      	str	r2, [sp, #24]
        sel_end = tmp;
    8374:	469a      	mov	sl, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
    8376:	7e3b      	ldrb	r3, [r7, #24]
    8378:	079b      	lsls	r3, r3, #30
    837a:	d155      	bne.n	8428 <lv_draw_label+0x27c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
    837c:	ac3f      	add	r4, sp, #252	; 0xfc
    837e:	0020      	movs	r0, r4
    8380:	4b72      	ldr	r3, [pc, #456]	; (854c <lv_draw_label+0x3a0>)
    8382:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_color;
    8384:	887b      	ldrh	r3, [r7, #2]
    8386:	8063      	strh	r3, [r4, #2]
    8388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    838a:	2bfa      	cmp	r3, #250	; 0xfa
    838c:	d901      	bls.n	8392 <lv_draw_label+0x1e6>
    838e:	4b70      	ldr	r3, [pc, #448]	; (8550 <lv_draw_label+0x3a4>)
    8390:	781b      	ldrb	r3, [r3, #0]
    8392:	b2db      	uxtb	r3, r3
    8394:	931c      	str	r3, [sp, #112]	; 0x70
    8396:	464b      	mov	r3, r9
    8398:	466a      	mov	r2, sp
    839a:	8293      	strh	r3, [r2, #20]
    839c:	8a93      	ldrh	r3, [r2, #20]
    839e:	9318      	str	r3, [sp, #96]	; 0x60
    83a0:	466b      	mov	r3, sp
    83a2:	2244      	movs	r2, #68	; 0x44
    83a4:	189b      	adds	r3, r3, r2
    83a6:	881b      	ldrh	r3, [r3, #0]
    83a8:	9314      	str	r3, [sp, #80]	; 0x50
    while(txt[line_start] != '\0') {
    83aa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    uint16_t par_start = 0;
    83ac:	2300      	movs	r3, #0
    83ae:	931d      	str	r3, [sp, #116]	; 0x74
    83b0:	9b08      	ldr	r3, [sp, #32]
    83b2:	469b      	mov	fp, r3
    83b4:	46d0      	mov	r8, sl
    83b6:	003e      	movs	r6, r7
    while(txt[line_start] != '\0') {
    83b8:	f000 fdd2 	bl	8f60 <lv_draw_label+0xdb4>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    83bc:	210c      	movs	r1, #12
    83be:	5e7b      	ldrsh	r3, [r7, r1]
    83c0:	9c08      	ldr	r4, [sp, #32]
    83c2:	1b31      	subs	r1, r6, r4
    83c4:	b289      	uxth	r1, r1
    83c6:	980d      	ldr	r0, [sp, #52]	; 0x34
    83c8:	46a4      	mov	ip, r4
    83ca:	4460      	add	r0, ip
    83cc:	9200      	str	r2, [sp, #0]
    83ce:	9a07      	ldr	r2, [sp, #28]
    83d0:	4c60      	ldr	r4, [pc, #384]	; (8554 <lv_draw_label+0x3a8>)
    83d2:	47a0      	blx	r4
    83d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    83d6:	8893      	ldrh	r3, [r2, #4]
    83d8:	3301      	adds	r3, #1
    83da:	8812      	ldrh	r2, [r2, #0]
    83dc:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
    83de:	b21b      	sxth	r3, r3
    83e0:	1a18      	subs	r0, r3, r0
    83e2:	0fc3      	lsrs	r3, r0, #31
    83e4:	181b      	adds	r3, r3, r0
    83e6:	105b      	asrs	r3, r3, #1
    83e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    83ea:	4694      	mov	ip, r2
    83ec:	4463      	add	r3, ip
    83ee:	b21b      	sxth	r3, r3
    83f0:	931f      	str	r3, [sp, #124]	; 0x7c
    83f2:	e7b5      	b.n	8360 <lv_draw_label+0x1b4>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    83f4:	210c      	movs	r1, #12
    83f6:	5e7b      	ldrsh	r3, [r7, r1]
    83f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    83fa:	9c08      	ldr	r4, [sp, #32]
    83fc:	1b01      	subs	r1, r0, r4
    83fe:	b289      	uxth	r1, r1
    8400:	980d      	ldr	r0, [sp, #52]	; 0x34
    8402:	46a4      	mov	ip, r4
    8404:	4460      	add	r0, ip
    8406:	9200      	str	r2, [sp, #0]
    8408:	9a07      	ldr	r2, [sp, #28]
    840a:	4c52      	ldr	r4, [pc, #328]	; (8554 <lv_draw_label+0x3a8>)
    840c:	47a0      	blx	r4
    840e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8410:	8893      	ldrh	r3, [r2, #4]
    8412:	3301      	adds	r3, #1
    8414:	8812      	ldrh	r2, [r2, #0]
    8416:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
    8418:	b21b      	sxth	r3, r3
    841a:	1a1b      	subs	r3, r3, r0
    841c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    841e:	4694      	mov	ip, r2
    8420:	4463      	add	r3, ip
    8422:	b21b      	sxth	r3, r3
    8424:	931f      	str	r3, [sp, #124]	; 0x7c
    8426:	e79b      	b.n	8360 <lv_draw_label+0x1b4>
        lv_draw_line_dsc_init(&line_dsc);
    8428:	ac55      	add	r4, sp, #340	; 0x154
    842a:	0020      	movs	r0, r4
    842c:	4b4a      	ldr	r3, [pc, #296]	; (8558 <lv_draw_label+0x3ac>)
    842e:	4798      	blx	r3
        line_dsc.color = dsc->color;
    8430:	883b      	ldrh	r3, [r7, #0]
    8432:	8023      	strh	r3, [r4, #0]
        line_dsc.width = (dsc->font->line_height + 5) / 10;    /*+5 for rounding*/
    8434:	687b      	ldr	r3, [r7, #4]
    8436:	2008      	movs	r0, #8
    8438:	5e18      	ldrsh	r0, [r3, r0]
    843a:	3005      	adds	r0, #5
    843c:	210a      	movs	r1, #10
    843e:	4b47      	ldr	r3, [pc, #284]	; (855c <lv_draw_label+0x3b0>)
    8440:	4798      	blx	r3
    8442:	8060      	strh	r0, [r4, #2]
        line_dsc.opa = dsc->opa;
    8444:	7a3b      	ldrb	r3, [r7, #8]
    8446:	7223      	strb	r3, [r4, #8]
        line_dsc.blend_mode = dsc->blend_mode;
    8448:	7e7a      	ldrb	r2, [r7, #25]
    844a:	2303      	movs	r3, #3
    844c:	401a      	ands	r2, r3
    844e:	7a63      	ldrb	r3, [r4, #9]
    8450:	2103      	movs	r1, #3
    8452:	438b      	bics	r3, r1
    8454:	4313      	orrs	r3, r2
    8456:	7263      	strb	r3, [r4, #9]
    8458:	e790      	b.n	837c <lv_draw_label+0x1d0>
            uint16_t logical_char_pos = 0;
    845a:	2500      	movs	r5, #0
    845c:	e2e2      	b.n	8a24 <lv_draw_label+0x878>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
    845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8460:	2b00      	cmp	r3, #0
    8462:	d107      	bne.n	8474 <lv_draw_label+0x2c8>
                        par_start = i;
    8464:	ab34      	add	r3, sp, #208	; 0xd0
    8466:	2280      	movs	r2, #128	; 0x80
    8468:	189b      	adds	r3, r3, r2
    846a:	881b      	ldrh	r3, [r3, #0]
    846c:	931d      	str	r3, [sp, #116]	; 0x74
                        cmd_state = CMD_STATE_PAR;
    846e:	2301      	movs	r3, #1
    8470:	9309      	str	r3, [sp, #36]	; 0x24
                        continue;
    8472:	e2c2      	b.n	89fa <lv_draw_label+0x84e>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
    8474:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8476:	2b01      	cmp	r3, #1
    8478:	d101      	bne.n	847e <lv_draw_label+0x2d2>
    847a:	f000 fe05 	bl	9088 <lv_draw_label+0xedc>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
    847e:	2b02      	cmp	r3, #2
    8480:	d101      	bne.n	8486 <lv_draw_label+0x2da>
    8482:	f000 fd32 	bl	8eea <lv_draw_label+0xd3e>
            lv_color_t color = dsc->color;
    8486:	883e      	ldrh	r6, [r7, #0]
    8488:	e2ec      	b.n	8a64 <lv_draw_label+0x8b8>
                    if(letter == ' ') {
    848a:	9b05      	ldr	r3, [sp, #20]
    848c:	2b20      	cmp	r3, #32
    848e:	d000      	beq.n	8492 <lv_draw_label+0x2e6>
    8490:	e2b3      	b.n	89fa <lv_draw_label+0x84e>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
    8492:	9b54      	ldr	r3, [sp, #336]	; 0x150
    8494:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8496:	1a9b      	subs	r3, r3, r2
    8498:	2b07      	cmp	r3, #7
    849a:	d004      	beq.n	84a6 <lv_draw_label+0x2fa>
                            recolor.full = dsc->color.full;
    849c:	883b      	ldrh	r3, [r7, #0]
    849e:	9316      	str	r3, [sp, #88]	; 0x58
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    84a0:	2302      	movs	r3, #2
    84a2:	9309      	str	r3, [sp, #36]	; 0x24
    84a4:	e2a9      	b.n	89fa <lv_draw_label+0x84e>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
    84a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    84a8:	4694      	mov	ip, r2
    84aa:	4463      	add	r3, ip
    84ac:	0018      	movs	r0, r3
    84ae:	2300      	movs	r3, #0
        *d8 = *s8;
    84b0:	a93c      	add	r1, sp, #240	; 0xf0
    84b2:	5cc2      	ldrb	r2, [r0, r3]
    84b4:	545a      	strb	r2, [r3, r1]
    84b6:	3301      	adds	r3, #1
    while(len) {
    84b8:	2b06      	cmp	r3, #6
    84ba:	d1fa      	bne.n	84b2 <lv_draw_label+0x306>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
    84bc:	ad3c      	add	r5, sp, #240	; 0xf0
    84be:	7828      	ldrb	r0, [r5, #0]
    84c0:	4e27      	ldr	r6, [pc, #156]	; (8560 <lv_draw_label+0x3b4>)
    84c2:	47b0      	blx	r6
    84c4:	4680      	mov	r8, r0
    84c6:	7868      	ldrb	r0, [r5, #1]
    84c8:	47b0      	blx	r6
    84ca:	4643      	mov	r3, r8
    84cc:	011b      	lsls	r3, r3, #4
    84ce:	4698      	mov	r8, r3
    84d0:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
    84d2:	78a8      	ldrb	r0, [r5, #2]
    84d4:	47b0      	blx	r6
    84d6:	9005      	str	r0, [sp, #20]
    84d8:	78e8      	ldrb	r0, [r5, #3]
    84da:	47b0      	blx	r6
    84dc:	9b05      	ldr	r3, [sp, #20]
    84de:	011b      	lsls	r3, r3, #4
    84e0:	181b      	adds	r3, r3, r0
    84e2:	9305      	str	r3, [sp, #20]
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
    84e4:	7928      	ldrb	r0, [r5, #4]
    84e6:	47b0      	blx	r6
    84e8:	9008      	str	r0, [sp, #32]
    84ea:	7968      	ldrb	r0, [r5, #5]
    84ec:	47b0      	blx	r6
    84ee:	9a08      	ldr	r2, [sp, #32]
    84f0:	0115      	lsls	r5, r2, #4
    84f2:	1828      	adds	r0, r5, r0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    84f4:	b2c2      	uxtb	r2, r0
    84f6:	08d2      	lsrs	r2, r2, #3
    84f8:	231f      	movs	r3, #31
    84fa:	992c      	ldr	r1, [sp, #176]	; 0xb0
    84fc:	4399      	bics	r1, r3
    84fe:	000b      	movs	r3, r1
    8500:	4313      	orrs	r3, r2
    8502:	466a      	mov	r2, sp
    8504:	7d12      	ldrb	r2, [r2, #20]
    8506:	0892      	lsrs	r2, r2, #2
    8508:	0151      	lsls	r1, r2, #5
    850a:	4a16      	ldr	r2, [pc, #88]	; (8564 <lv_draw_label+0x3b8>)
    850c:	4013      	ands	r3, r2
    850e:	430b      	orrs	r3, r1
    8510:	4642      	mov	r2, r8
    8512:	4669      	mov	r1, sp
    8514:	750a      	strb	r2, [r1, #20]
    8516:	7d0a      	ldrb	r2, [r1, #20]
    8518:	08d2      	lsrs	r2, r2, #3
    851a:	02d2      	lsls	r2, r2, #11
    851c:	055b      	lsls	r3, r3, #21
    851e:	0d5b      	lsrs	r3, r3, #21
    8520:	4313      	orrs	r3, r2
    8522:	466a      	mov	r2, sp
    8524:	21b0      	movs	r1, #176	; 0xb0
    8526:	1852      	adds	r2, r2, r1
    8528:	8013      	strh	r3, [r2, #0]
    852a:	b29b      	uxth	r3, r3
    852c:	9316      	str	r3, [sp, #88]	; 0x58
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    852e:	2302      	movs	r3, #2
    8530:	9309      	str	r3, [sp, #36]	; 0x24
    8532:	e262      	b.n	89fa <lv_draw_label+0x84e>
            if(cmd_state == CMD_STATE_IN) color = recolor;
    8534:	9e16      	ldr	r6, [sp, #88]	; 0x58
    8536:	e295      	b.n	8a64 <lv_draw_label+0x8b8>
    8538:	0000fba7 	.word	0x0000fba7
    853c:	00007c18 	.word	0x00007c18
    8540:	00011a7d 	.word	0x00011a7d
    8544:	00011761 	.word	0x00011761
    8548:	fffffc00 	.word	0xfffffc00
    854c:	0000aab9 	.word	0x0000aab9
    8550:	000188d8 	.word	0x000188d8
    8554:	000119d9 	.word	0x000119d9
    8558:	00009099 	.word	0x00009099
    855c:	00017a75 	.word	0x00017a75
    8560:	00008115 	.word	0x00008115
    8564:	fffff81f 	.word	0xfffff81f
                    sel_coords.x1 = pos.x;
    8568:	a83c      	add	r0, sp, #240	; 0xf0
    856a:	8004      	strh	r4, [r0, #0]
                    sel_coords.y1 = pos.y;
    856c:	9911      	ldr	r1, [sp, #68]	; 0x44
    856e:	8041      	strh	r1, [r0, #2]
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
    8570:	89bb      	ldrh	r3, [r7, #12]
    8572:	3b01      	subs	r3, #1
    8574:	18e3      	adds	r3, r4, r3
    8576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8578:	4694      	mov	ip, r2
    857a:	4463      	add	r3, ip
    857c:	8083      	strh	r3, [r0, #4]
                    sel_coords.y2 = pos.y + line_height - 1;
    857e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8580:	3b01      	subs	r3, #1
    8582:	468c      	mov	ip, r1
    8584:	4463      	add	r3, ip
    8586:	80c3      	strh	r3, [r0, #6]
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
    8588:	aa3f      	add	r2, sp, #252	; 0xfc
    858a:	990e      	ldr	r1, [sp, #56]	; 0x38
    858c:	4bc6      	ldr	r3, [pc, #792]	; (88a8 <lv_draw_label+0x6fc>)
    858e:	4798      	blx	r3
    8590:	e27a      	b.n	8a88 <lv_draw_label+0x8dc>
    switch(bpp) {
    8592:	2b04      	cmp	r3, #4
    8594:	d100      	bne.n	8598 <lv_draw_label+0x3ec>
    8596:	e0e9      	b.n	876c <lv_draw_label+0x5c0>
    8598:	2b08      	cmp	r3, #8
    859a:	d000      	beq.n	859e <lv_draw_label+0x3f2>
    859c:	e224      	b.n	89e8 <lv_draw_label+0x83c>
    uint32_t bpp = g->bpp;
    859e:	2608      	movs	r6, #8
            bitmask_init  = 0xFF;
    85a0:	23ff      	movs	r3, #255	; 0xff
    85a2:	9320      	str	r3, [sp, #128]	; 0x80
            bpp_opa_table = _lv_bpp8_opa_table;
    85a4:	4bc1      	ldr	r3, [pc, #772]	; (88ac <lv_draw_label+0x700>)
    85a6:	9323      	str	r3, [sp, #140]	; 0x8c
    85a8:	e003      	b.n	85b2 <lv_draw_label+0x406>
            bitmask_init  = 0xC0;
    85aa:	23c0      	movs	r3, #192	; 0xc0
    85ac:	9320      	str	r3, [sp, #128]	; 0x80
            bpp_opa_table = _lv_bpp2_opa_table;
    85ae:	4bc0      	ldr	r3, [pc, #768]	; (88b0 <lv_draw_label+0x704>)
    85b0:	9323      	str	r3, [sp, #140]	; 0x8c
    int32_t box_w = g->box_w;
    85b2:	ab3c      	add	r3, sp, #240	; 0xf0
    85b4:	885a      	ldrh	r2, [r3, #2]
    85b6:	921a      	str	r2, [sp, #104]	; 0x68
    int32_t box_h = g->box_h;
    85b8:	889b      	ldrh	r3, [r3, #4]
    85ba:	931b      	str	r3, [sp, #108]	; 0x6c
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    85bc:	4372      	muls	r2, r6
    85be:	9221      	str	r2, [sp, #132]	; 0x84
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
    85c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    85c2:	2200      	movs	r2, #0
    85c4:	5e9b      	ldrsh	r3, [r3, r2]
    85c6:	2200      	movs	r2, #0
    85c8:	922b      	str	r2, [sp, #172]	; 0xac
    85ca:	9905      	ldr	r1, [sp, #20]
    85cc:	4299      	cmp	r1, r3
    85ce:	da03      	bge.n	85d8 <lv_draw_label+0x42c>
    85d0:	1a5b      	subs	r3, r3, r1
    85d2:	005a      	lsls	r2, r3, #1
    85d4:	18d3      	adds	r3, r2, r3
    85d6:	932b      	str	r3, [sp, #172]	; 0xac
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
    85d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    85da:	2204      	movs	r2, #4
    85dc:	5e9b      	ldrsh	r3, [r3, r2]
    85de:	9322      	str	r3, [sp, #136]	; 0x88
    85e0:	2103      	movs	r1, #3
    85e2:	981a      	ldr	r0, [sp, #104]	; 0x68
    85e4:	4bb3      	ldr	r3, [pc, #716]	; (88b4 <lv_draw_label+0x708>)
    85e6:	4798      	blx	r3
    85e8:	9905      	ldr	r1, [sp, #20]
    85ea:	468c      	mov	ip, r1
    85ec:	4460      	add	r0, ip
    85ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    85f0:	9219      	str	r2, [sp, #100]	; 0x64
    85f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    85f4:	4290      	cmp	r0, r2
    85f6:	dd04      	ble.n	8602 <lv_draw_label+0x456>
    85f8:	1a53      	subs	r3, r2, r1
    85fa:	1c5a      	adds	r2, r3, #1
    85fc:	0053      	lsls	r3, r2, #1
    85fe:	189b      	adds	r3, r3, r2
    8600:	9319      	str	r3, [sp, #100]	; 0x64
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    8602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8604:	2202      	movs	r2, #2
    8606:	5e9b      	ldrsh	r3, [r3, r2]
    8608:	2200      	movs	r2, #0
    860a:	9229      	str	r2, [sp, #164]	; 0xa4
    860c:	9915      	ldr	r1, [sp, #84]	; 0x54
    860e:	4299      	cmp	r1, r3
    8610:	da01      	bge.n	8616 <lv_draw_label+0x46a>
    8612:	1a5b      	subs	r3, r3, r1
    8614:	9329      	str	r3, [sp, #164]	; 0xa4
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    8616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8618:	2206      	movs	r2, #6
    861a:	5e9b      	ldrsh	r3, [r3, r2]
    861c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    861e:	000a      	movs	r2, r1
    8620:	9815      	ldr	r0, [sp, #84]	; 0x54
    8622:	4684      	mov	ip, r0
    8624:	4462      	add	r2, ip
    8626:	912f      	str	r1, [sp, #188]	; 0xbc
    8628:	429a      	cmp	r2, r3
    862a:	dd02      	ble.n	8632 <lv_draw_label+0x486>
    862c:	1a1b      	subs	r3, r3, r0
    862e:	3301      	adds	r3, #1
    8630:	932f      	str	r3, [sp, #188]	; 0xbc
    8632:	466b      	mov	r3, sp
    8634:	2290      	movs	r2, #144	; 0x90
    8636:	189b      	adds	r3, r3, r2
    8638:	881a      	ldrh	r2, [r3, #0]
    863a:	06d3      	lsls	r3, r2, #27
    863c:	0edb      	lsrs	r3, r3, #27
    863e:	9326      	str	r3, [sp, #152]	; 0x98
    8640:	0553      	lsls	r3, r2, #21
    8642:	0e9b      	lsrs	r3, r3, #26
    8644:	9328      	str	r3, [sp, #160]	; 0xa0
    8646:	0413      	lsls	r3, r2, #16
    8648:	0edb      	lsrs	r3, r3, #27
    864a:	9327      	str	r3, [sp, #156]	; 0x9c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    864c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    864e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    8650:	4353      	muls	r3, r2
    8652:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    8654:	4372      	muls	r2, r6
    8656:	189b      	adds	r3, r3, r2
    map_p += bit_ofs >> 3;
    8658:	10da      	asrs	r2, r3, #3
    865a:	18ad      	adds	r5, r5, r2
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    865c:	2207      	movs	r2, #7
    865e:	401a      	ands	r2, r3
    8660:	9234      	str	r2, [sp, #208]	; 0xd0
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
    8662:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8664:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8666:	4353      	muls	r3, r2
    8668:	001a      	movs	r2, r3
    866a:	932e      	str	r3, [sp, #184]	; 0xb8
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    866c:	23f0      	movs	r3, #240	; 0xf0
    866e:	005b      	lsls	r3, r3, #1
    8670:	429a      	cmp	r2, r3
    8672:	dd00      	ble.n	8676 <lv_draw_label+0x4ca>
    8674:	932e      	str	r3, [sp, #184]	; 0xb8
    8676:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8678:	4b8f      	ldr	r3, [pc, #572]	; (88b8 <lv_draw_label+0x70c>)
    867a:	4798      	blx	r3
    867c:	9024      	str	r0, [sp, #144]	; 0x90
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    867e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    8680:	0058      	lsls	r0, r3, #1
    8682:	4b8d      	ldr	r3, [pc, #564]	; (88b8 <lv_draw_label+0x70c>)
    8684:	4798      	blx	r3
    8686:	9025      	str	r0, [sp, #148]	; 0x94
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    8688:	4b8c      	ldr	r3, [pc, #560]	; (88bc <lv_draw_label+0x710>)
    868a:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    868c:	4b8c      	ldr	r3, [pc, #560]	; (88c0 <lv_draw_label+0x714>)
    868e:	4798      	blx	r3
    8690:	2110      	movs	r1, #16
    8692:	5e42      	ldrsh	r2, [r0, r1]
    8694:	0011      	movs	r1, r2
    8696:	8a83      	ldrh	r3, [r0, #20]
    8698:	3301      	adds	r3, #1
    869a:	9122      	str	r1, [sp, #136]	; 0x88
    869c:	1a5b      	subs	r3, r3, r1
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
    869e:	b21b      	sxth	r3, r3
    86a0:	931b      	str	r3, [sp, #108]	; 0x6c
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    86a2:	9021      	str	r0, [sp, #132]	; 0x84
    86a4:	6880      	ldr	r0, [r0, #8]
    86a6:	902a      	str	r0, [sp, #168]	; 0xa8
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    86a8:	2103      	movs	r1, #3
    86aa:	982b      	ldr	r0, [sp, #172]	; 0xac
    86ac:	4a81      	ldr	r2, [pc, #516]	; (88b4 <lv_draw_label+0x708>)
    86ae:	4694      	mov	ip, r2
    86b0:	47e0      	blx	ip
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
    86b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    86b4:	2112      	movs	r1, #18
    86b6:	5e5b      	ldrsh	r3, [r3, r1]
    86b8:	9915      	ldr	r1, [sp, #84]	; 0x54
    86ba:	1acb      	subs	r3, r1, r3
    86bc:	991b      	ldr	r1, [sp, #108]	; 0x6c
    86be:	434b      	muls	r3, r1
    86c0:	9a05      	ldr	r2, [sp, #20]
    86c2:	4694      	mov	ip, r2
    86c4:	4463      	add	r3, ip
    86c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    86c8:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    86ca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    86cc:	434a      	muls	r2, r1
    86ce:	1812      	adds	r2, r2, r0
    86d0:	189b      	adds	r3, r3, r2
    86d2:	005b      	lsls	r3, r3, #1
    86d4:	992a      	ldr	r1, [sp, #168]	; 0xa8
    86d6:	468c      	mov	ip, r1
    86d8:	449c      	add	ip, r3
    86da:	4661      	mov	r1, ip
    86dc:	9105      	str	r1, [sp, #20]
    map_area.x1 = col_start / 3 + pos_x;
    86de:	4641      	mov	r1, r8
    86e0:	466b      	mov	r3, sp
    86e2:	2254      	movs	r2, #84	; 0x54
    86e4:	189b      	adds	r3, r3, r2
    86e6:	8019      	strh	r1, [r3, #0]
    86e8:	b289      	uxth	r1, r1
    86ea:	4688      	mov	r8, r1
    86ec:	4440      	add	r0, r8
    86ee:	a934      	add	r1, sp, #208	; 0xd0
    86f0:	8308      	strh	r0, [r1, #24]
    map_area.x2 = col_end / 3  + pos_x - 1;
    86f2:	2103      	movs	r1, #3
    86f4:	9819      	ldr	r0, [sp, #100]	; 0x64
    86f6:	4b6f      	ldr	r3, [pc, #444]	; (88b4 <lv_draw_label+0x708>)
    86f8:	4798      	blx	r3
    86fa:	4643      	mov	r3, r8
    86fc:	3b01      	subs	r3, #1
    86fe:	18c3      	adds	r3, r0, r3
    8700:	a834      	add	r0, sp, #208	; 0xd0
    8702:	8383      	strh	r3, [r0, #28]
    map_area.y1 = row_start + pos_y;
    8704:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8706:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    8708:	4694      	mov	ip, r2
    870a:	4460      	add	r0, ip
    870c:	b203      	sxth	r3, r0
    870e:	a834      	add	r0, sp, #208	; 0xd0
    8710:	8343      	strh	r3, [r0, #26]
    map_area.y2 = map_area.y1;
    8712:	83c3      	strh	r3, [r0, #30]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    8714:	4b6b      	ldr	r3, [pc, #428]	; (88c4 <lv_draw_label+0x718>)
    8716:	4798      	blx	r3
    8718:	9030      	str	r0, [sp, #192]	; 0xc0
    for(row = row_start ; row < row_end; row++) {
    871a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    871c:	982f      	ldr	r0, [sp, #188]	; 0xbc
    871e:	4282      	cmp	r2, r0
    8720:	db00      	blt.n	8724 <lv_draw_label+0x578>
    8722:	e147      	b.n	89b4 <lv_draw_label+0x808>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    8724:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8726:	982b      	ldr	r0, [sp, #172]	; 0xac
    8728:	1a11      	subs	r1, r2, r0
    872a:	0008      	movs	r0, r1
    872c:	9131      	str	r1, [sp, #196]	; 0xc4
        col_bit += ((box_w - col_end) + col_start) * bpp;
    872e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8730:	1a9b      	subs	r3, r3, r2
    8732:	992b      	ldr	r1, [sp, #172]	; 0xac
    8734:	468c      	mov	ip, r1
    8736:	4463      	add	r3, ip
    8738:	0019      	movs	r1, r3
    873a:	4371      	muls	r1, r6
    873c:	9132      	str	r1, [sp, #200]	; 0xc8
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    873e:	2103      	movs	r1, #3
    8740:	4249      	negs	r1, r1
    8742:	4b5c      	ldr	r3, [pc, #368]	; (88b4 <lv_draw_label+0x708>)
    8744:	4798      	blx	r3
    8746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8748:	18c3      	adds	r3, r0, r3
    874a:	005b      	lsls	r3, r3, #1
    874c:	9333      	str	r3, [sp, #204]	; 0xcc
    874e:	2300      	movs	r3, #0
    8750:	932a      	str	r3, [sp, #168]	; 0xa8
                color_buf[mask_p] = res_color;
    8752:	465b      	mov	r3, fp
    8754:	9335      	str	r3, [sp, #212]	; 0xd4
    8756:	4653      	mov	r3, sl
    8758:	9336      	str	r3, [sp, #216]	; 0xd8
    875a:	9b05      	ldr	r3, [sp, #20]
    875c:	469a      	mov	sl, r3
    875e:	46ab      	mov	fp, r5
    8760:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    8762:	4698      	mov	r8, r3
    8764:	9434      	str	r4, [sp, #208]	; 0xd0
    8766:	9737      	str	r7, [sp, #220]	; 0xdc
    8768:	e0d4      	b.n	8914 <lv_draw_label+0x768>
    if(bpp == 3) bpp = 4;
    876a:	2604      	movs	r6, #4
            bitmask_init  = 0xF0;
    876c:	23f0      	movs	r3, #240	; 0xf0
    876e:	9320      	str	r3, [sp, #128]	; 0x80
            bpp_opa_table = _lv_bpp4_opa_table;
    8770:	4b55      	ldr	r3, [pc, #340]	; (88c8 <lv_draw_label+0x71c>)
    8772:	9323      	str	r3, [sp, #140]	; 0x8c
    8774:	e71d      	b.n	85b2 <lv_draw_label+0x406>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    8776:	2e08      	cmp	r6, #8
    8778:	d00b      	beq.n	8792 <lv_draw_label+0x5e6>
    877a:	4663      	mov	r3, ip
    877c:	4018      	ands	r0, r3
    877e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8780:	5c1b      	ldrb	r3, [r3, r0]
    8782:	e006      	b.n	8792 <lv_draw_label+0x5e6>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    8784:	4663      	mov	r3, ip
    8786:	4003      	ands	r3, r0
    8788:	991c      	ldr	r1, [sp, #112]	; 0x70
    878a:	434b      	muls	r3, r1
    878c:	0a1b      	lsrs	r3, r3, #8
    878e:	e000      	b.n	8792 <lv_draw_label+0x5e6>
                px_opa = 0;
    8790:	2300      	movs	r3, #0
            font_rgb[subpx_cnt] = px_opa;
    8792:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8794:	548b      	strb	r3, [r1, r2]
            subpx_cnt ++;
    8796:	3201      	adds	r2, #1
            if(subpx_cnt == 3) {
    8798:	2a03      	cmp	r2, #3
    879a:	d022      	beq.n	87e2 <lv_draw_label+0x636>
            if(col_bit < 8 - bpp) {
    879c:	9815      	ldr	r0, [sp, #84]	; 0x54
    879e:	991a      	ldr	r1, [sp, #104]	; 0x68
    87a0:	4288      	cmp	r0, r1
    87a2:	d27b      	bcs.n	889c <lv_draw_label+0x6f0>
                col_bit += bpp;
    87a4:	1833      	adds	r3, r6, r0
                bitmask = bitmask >> bpp;
    87a6:	40f5      	lsrs	r5, r6
        for(col = col_start; col < col_end; col++) {
    87a8:	3401      	adds	r4, #1
    87aa:	9919      	ldr	r1, [sp, #100]	; 0x64
    87ac:	42a1      	cmp	r1, r4
    87ae:	d100      	bne.n	87b2 <lv_draw_label+0x606>
    87b0:	e08e      	b.n	88d0 <lv_draw_label+0x724>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
    87b2:	9315      	str	r3, [sp, #84]	; 0x54
    87b4:	9905      	ldr	r1, [sp, #20]
    87b6:	7808      	ldrb	r0, [r1, #0]
    87b8:	4028      	ands	r0, r5
    87ba:	2108      	movs	r1, #8
    87bc:	1acb      	subs	r3, r1, r3
    87be:	1b9b      	subs	r3, r3, r6
    87c0:	40d8      	lsrs	r0, r3
    87c2:	b2c3      	uxtb	r3, r0
            if(letter_px != 0) {
    87c4:	2b00      	cmp	r3, #0
    87c6:	d0e3      	beq.n	8790 <lv_draw_label+0x5e4>
                if(opa == LV_OPA_COVER) {
    87c8:	991c      	ldr	r1, [sp, #112]	; 0x70
    87ca:	29ff      	cmp	r1, #255	; 0xff
    87cc:	d0d3      	beq.n	8776 <lv_draw_label+0x5ca>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    87ce:	2e08      	cmp	r6, #8
    87d0:	d0d8      	beq.n	8784 <lv_draw_label+0x5d8>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
    87d2:	4663      	mov	r3, ip
    87d4:	4018      	ands	r0, r3
    87d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    87d8:	5c1b      	ldrb	r3, [r3, r0]
    87da:	991c      	ldr	r1, [sp, #112]	; 0x70
    87dc:	434b      	muls	r3, r1
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    87de:	0a1b      	lsrs	r3, r3, #8
    87e0:	e7d7      	b.n	8792 <lv_draw_label+0x5e6>
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    87e2:	7808      	ldrb	r0, [r1, #0]
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    87e4:	4653      	mov	r3, sl
    87e6:	785b      	ldrb	r3, [r3, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    87e8:	08db      	lsrs	r3, r3, #3
    87ea:	4662      	mov	r2, ip
    87ec:	1a12      	subs	r2, r2, r0
    87ee:	4353      	muls	r3, r2
    87f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    87f2:	4342      	muls	r2, r0
    87f4:	189b      	adds	r3, r3, r2
    87f6:	0a1b      	lsrs	r3, r3, #8
    87f8:	221f      	movs	r2, #31
    87fa:	401a      	ands	r2, r3
    87fc:	9221      	str	r2, [sp, #132]	; 0x84
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    87fe:	788b      	ldrb	r3, [r1, #2]
    8800:	0019      	movs	r1, r3
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    8802:	4653      	mov	r3, sl
    8804:	781a      	ldrb	r2, [r3, #0]
    8806:	06d2      	lsls	r2, r2, #27
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    8808:	0ed2      	lsrs	r2, r2, #27
    880a:	4667      	mov	r7, ip
    880c:	1a7b      	subs	r3, r7, r1
    880e:	435a      	muls	r2, r3
    8810:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8812:	434b      	muls	r3, r1
    8814:	18d2      	adds	r2, r2, r3
    8816:	0a12      	lsrs	r2, r2, #8
    8818:	231f      	movs	r3, #31
    881a:	401a      	ands	r2, r3
    881c:	9222      	str	r2, [sp, #136]	; 0x88
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    881e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8820:	785b      	ldrb	r3, [r3, #1]
    8822:	4698      	mov	r8, r3
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    8824:	4653      	mov	r3, sl
    8826:	881b      	ldrh	r3, [r3, #0]
    8828:	055b      	lsls	r3, r3, #21
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    882a:	0e9b      	lsrs	r3, r3, #26
    882c:	4662      	mov	r2, ip
    882e:	4647      	mov	r7, r8
    8830:	1bd2      	subs	r2, r2, r7
    8832:	4353      	muls	r3, r2
    8834:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    8836:	437a      	muls	r2, r7
    8838:	4693      	mov	fp, r2
    883a:	445b      	add	r3, fp
    883c:	0a1b      	lsrs	r3, r3, #8
    883e:	223f      	movs	r2, #63	; 0x3f
    8840:	4013      	ands	r3, r2
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
    8842:	2800      	cmp	r0, #0
    8844:	d107      	bne.n	8856 <lv_draw_label+0x6aa>
    8846:	2f00      	cmp	r7, #0
    8848:	d105      	bne.n	8856 <lv_draw_label+0x6aa>
    884a:	2900      	cmp	r1, #0
    884c:	d103      	bne.n	8856 <lv_draw_label+0x6aa>
    884e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8850:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8852:	5450      	strb	r0, [r2, r1]
    8854:	e003      	b.n	885e <lv_draw_label+0x6b2>
                else mask_buf[mask_p] = LV_OPA_COVER;
    8856:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8858:	991b      	ldr	r1, [sp, #108]	; 0x6c
    885a:	4660      	mov	r0, ip
    885c:	5450      	strb	r0, [r2, r1]
                color_buf[mask_p] = res_color;
    885e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8860:	0048      	lsls	r0, r1, #1
    8862:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8864:	4690      	mov	r8, r2
    8866:	4440      	add	r0, r8
    8868:	7802      	ldrb	r2, [r0, #0]
    886a:	271f      	movs	r7, #31
    886c:	43ba      	bics	r2, r7
    886e:	9f22      	ldr	r7, [sp, #136]	; 0x88
    8870:	4317      	orrs	r7, r2
    8872:	7007      	strb	r7, [r0, #0]
    8874:	015b      	lsls	r3, r3, #5
    8876:	8802      	ldrh	r2, [r0, #0]
    8878:	4f14      	ldr	r7, [pc, #80]	; (88cc <lv_draw_label+0x720>)
    887a:	403a      	ands	r2, r7
    887c:	4313      	orrs	r3, r2
    887e:	8003      	strh	r3, [r0, #0]
    8880:	9a21      	ldr	r2, [sp, #132]	; 0x84
    8882:	00d2      	lsls	r2, r2, #3
    8884:	0a1b      	lsrs	r3, r3, #8
    8886:	2707      	movs	r7, #7
    8888:	403b      	ands	r3, r7
    888a:	4313      	orrs	r3, r2
    888c:	7043      	strb	r3, [r0, #1]
                mask_p++;
    888e:	1c4b      	adds	r3, r1, #1
    8890:	931b      	str	r3, [sp, #108]	; 0x6c
                vdb_buf_tmp++;
    8892:	2302      	movs	r3, #2
    8894:	4698      	mov	r8, r3
    8896:	44c2      	add	sl, r8
                subpx_cnt = 0;
    8898:	2200      	movs	r2, #0
    889a:	e77f      	b.n	879c <lv_draw_label+0x5f0>
                map_p++;
    889c:	9b05      	ldr	r3, [sp, #20]
    889e:	3301      	adds	r3, #1
    88a0:	9305      	str	r3, [sp, #20]
                bitmask = bitmask_init;
    88a2:	9d20      	ldr	r5, [sp, #128]	; 0x80
                col_bit = 0;
    88a4:	2300      	movs	r3, #0
    88a6:	e77f      	b.n	87a8 <lv_draw_label+0x5fc>
    88a8:	0000ab5d 	.word	0x0000ab5d
    88ac:	000188f4 	.word	0x000188f4
    88b0:	000188e0 	.word	0x000188e0
    88b4:	00017a75 	.word	0x00017a75
    88b8:	00010e59 	.word	0x00010e59
    88bc:	00004349 	.word	0x00004349
    88c0:	0000f6a1 	.word	0x0000f6a1
    88c4:	0000a659 	.word	0x0000a659
    88c8:	000188e4 	.word	0x000188e4
    88cc:	fffff81f 	.word	0xfffff81f
    88d0:	9a05      	ldr	r2, [sp, #20]
    88d2:	4693      	mov	fp, r2
    88d4:	4698      	mov	r8, r3
        if(other_mask_cnt) {
    88d6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    88d8:	2b00      	cmp	r3, #0
    88da:	d133      	bne.n	8944 <lv_draw_label+0x798>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    88dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    88de:	991b      	ldr	r1, [sp, #108]	; 0x6c
    88e0:	468c      	mov	ip, r1
    88e2:	4463      	add	r3, ip
    88e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    88e6:	429a      	cmp	r2, r3
    88e8:	d949      	bls.n	897e <lv_draw_label+0x7d2>
            map_area.y2 ++;
    88ea:	aa3a      	add	r2, sp, #232	; 0xe8
    88ec:	88d3      	ldrh	r3, [r2, #6]
    88ee:	3301      	adds	r3, #1
    88f0:	80d3      	strh	r3, [r2, #6]
    88f2:	912a      	str	r1, [sp, #168]	; 0xa8
        col_bit += ((box_w - col_end) + col_start) * bpp;
    88f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    88f6:	4443      	add	r3, r8
        map_p += (col_bit >> 3);
    88f8:	10da      	asrs	r2, r3, #3
    88fa:	4493      	add	fp, r2
        col_bit = col_bit & 0x7;
    88fc:	2207      	movs	r2, #7
    88fe:	401a      	ands	r2, r3
    8900:	4690      	mov	r8, r2
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    8902:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    8904:	469c      	mov	ip, r3
    8906:	44e2      	add	sl, ip
    for(row = row_start ; row < row_end; row++) {
    8908:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    890a:	3301      	adds	r3, #1
    890c:	9329      	str	r3, [sp, #164]	; 0xa4
    890e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    8910:	4293      	cmp	r3, r2
    8912:	da49      	bge.n	89a8 <lv_draw_label+0x7fc>
        bitmask = bitmask_init >> col_bit;
    8914:	9d20      	ldr	r5, [sp, #128]	; 0x80
    8916:	4643      	mov	r3, r8
    8918:	40dd      	lsrs	r5, r3
        for(col = col_start; col < col_end; col++) {
    891a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    891c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    891e:	4294      	cmp	r4, r2
    8920:	da0d      	bge.n	893e <lv_draw_label+0x792>
    8922:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8924:	931b      	str	r3, [sp, #108]	; 0x6c
    8926:	2200      	movs	r2, #0
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
    8928:	23ff      	movs	r3, #255	; 0xff
    892a:	469c      	mov	ip, r3
            font_rgb[subpx_cnt] = px_opa;
    892c:	ab39      	add	r3, sp, #228	; 0xe4
    892e:	9317      	str	r3, [sp, #92]	; 0x5c
            if(col_bit < 8 - bpp) {
    8930:	2308      	movs	r3, #8
    8932:	1b9b      	subs	r3, r3, r6
    8934:	931a      	str	r3, [sp, #104]	; 0x68
    8936:	465b      	mov	r3, fp
    8938:	9305      	str	r3, [sp, #20]
    893a:	4643      	mov	r3, r8
    893c:	e739      	b.n	87b2 <lv_draw_label+0x606>
        for(col = col_start; col < col_end; col++) {
    893e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8940:	931b      	str	r3, [sp, #108]	; 0x6c
    8942:	e7c8      	b.n	88d6 <lv_draw_label+0x72a>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
    8944:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8946:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8948:	4694      	mov	ip, r2
    894a:	4463      	add	r3, ip
    894c:	001c      	movs	r4, r3
    894e:	aa3a      	add	r2, sp, #232	; 0xe8
    8950:	2300      	movs	r3, #0
    8952:	5ed1      	ldrsh	r1, [r2, r3]
    8954:	8893      	ldrh	r3, [r2, #4]
    8956:	3301      	adds	r3, #1
    8958:	1a5b      	subs	r3, r3, r1
    895a:	b21b      	sxth	r3, r3
    895c:	2006      	movs	r0, #6
    895e:	5e12      	ldrsh	r2, [r2, r0]
    8960:	0020      	movs	r0, r4
    8962:	4db1      	ldr	r5, [pc, #708]	; (8c28 <lv_draw_label+0xa7c>)
    8964:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    8966:	2800      	cmp	r0, #0
    8968:	d1b8      	bne.n	88dc <lv_draw_label+0x730>
    896a:	ab3a      	add	r3, sp, #232	; 0xe8
    896c:	8899      	ldrh	r1, [r3, #4]
    896e:	3101      	adds	r1, #1
    8970:	881b      	ldrh	r3, [r3, #0]
    8972:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
    8974:	b209      	sxth	r1, r1
    8976:	0020      	movs	r0, r4
    8978:	4bac      	ldr	r3, [pc, #688]	; (8c2c <lv_draw_label+0xa80>)
    897a:	4798      	blx	r3
    897c:	e7ae      	b.n	88dc <lv_draw_label+0x730>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    897e:	ac3a      	add	r4, sp, #232	; 0xe8
    8980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8982:	9302      	str	r3, [sp, #8]
    8984:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    8986:	9301      	str	r3, [sp, #4]
    8988:	2302      	movs	r3, #2
    898a:	9300      	str	r3, [sp, #0]
    898c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    898e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8990:	0021      	movs	r1, r4
    8992:	980e      	ldr	r0, [sp, #56]	; 0x38
    8994:	4da6      	ldr	r5, [pc, #664]	; (8c30 <lv_draw_label+0xa84>)
    8996:	47a8      	blx	r5
            map_area.y1 = map_area.y2 + 1;
    8998:	88e3      	ldrh	r3, [r4, #6]
    899a:	3301      	adds	r3, #1
    899c:	b21b      	sxth	r3, r3
    899e:	8063      	strh	r3, [r4, #2]
            map_area.y2 = map_area.y1;
    89a0:	80e3      	strh	r3, [r4, #6]
            mask_p = 0;
    89a2:	2300      	movs	r3, #0
    89a4:	932a      	str	r3, [sp, #168]	; 0xa8
    89a6:	e7a5      	b.n	88f4 <lv_draw_label+0x748>
    89a8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    89aa:	469b      	mov	fp, r3
    89ac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    89ae:	469a      	mov	sl, r3
    89b0:	9c34      	ldr	r4, [sp, #208]	; 0xd0
    89b2:	9f37      	ldr	r7, [sp, #220]	; 0xdc
    if(map_area.y1 != map_area.y2) {
    89b4:	aa3a      	add	r2, sp, #232	; 0xe8
    89b6:	2106      	movs	r1, #6
    89b8:	5e53      	ldrsh	r3, [r2, r1]
    89ba:	2102      	movs	r1, #2
    89bc:	5e52      	ldrsh	r2, [r2, r1]
    89be:	429a      	cmp	r2, r3
    89c0:	d00d      	beq.n	89de <lv_draw_label+0x832>
        map_area.y2--;
    89c2:	a93a      	add	r1, sp, #232	; 0xe8
    89c4:	3b01      	subs	r3, #1
    89c6:	80cb      	strh	r3, [r1, #6]
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    89c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    89ca:	9302      	str	r3, [sp, #8]
    89cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    89ce:	9301      	str	r3, [sp, #4]
    89d0:	2302      	movs	r3, #2
    89d2:	9300      	str	r3, [sp, #0]
    89d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    89d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    89d8:	980e      	ldr	r0, [sp, #56]	; 0x38
    89da:	4d95      	ldr	r5, [pc, #596]	; (8c30 <lv_draw_label+0xa84>)
    89dc:	47a8      	blx	r5
    _lv_mem_buf_release(mask_buf);
    89de:	9824      	ldr	r0, [sp, #144]	; 0x90
    89e0:	4d94      	ldr	r5, [pc, #592]	; (8c34 <lv_draw_label+0xa88>)
    89e2:	47a8      	blx	r5
    _lv_mem_buf_release(color_buf);
    89e4:	9825      	ldr	r0, [sp, #148]	; 0x94
    89e6:	47a8      	blx	r5
            if(letter_w > 0) {
    89e8:	9b08      	ldr	r3, [sp, #32]
    89ea:	2b00      	cmp	r3, #0
    89ec:	dd05      	ble.n	89fa <lv_draw_label+0x84e>
                pos.x += letter_w + dsc->letter_space;
    89ee:	89bb      	ldrh	r3, [r7, #12]
    89f0:	191b      	adds	r3, r3, r4
    89f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    89f4:	4694      	mov	ip, r2
    89f6:	4463      	add	r3, ip
    89f8:	b21c      	sxth	r4, r3
        while(i < line_end - line_start) {
    89fa:	9954      	ldr	r1, [sp, #336]	; 0x150
    89fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    89fe:	465a      	mov	r2, fp
    8a00:	1a9b      	subs	r3, r3, r2
    8a02:	428b      	cmp	r3, r1
    8a04:	d800      	bhi.n	8a08 <lv_draw_label+0x85c>
    8a06:	e273      	b.n	8ef0 <lv_draw_label+0xd44>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    8a08:	4b8b      	ldr	r3, [pc, #556]	; (8c38 <lv_draw_label+0xa8c>)
    8a0a:	9a06      	ldr	r2, [sp, #24]
    8a0c:	429a      	cmp	r2, r3
    8a0e:	d100      	bne.n	8a12 <lv_draw_label+0x866>
    8a10:	e523      	b.n	845a <lv_draw_label+0x2ae>
            uint16_t logical_char_pos = 0;
    8a12:	2500      	movs	r5, #0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    8a14:	459a      	cmp	sl, r3
    8a16:	d005      	beq.n	8a24 <lv_draw_label+0x878>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
    8a18:	4459      	add	r1, fp
    8a1a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8a1c:	464b      	mov	r3, r9
    8a1e:	681b      	ldr	r3, [r3, #0]
    8a20:	4798      	blx	r3
    8a22:	b285      	uxth	r5, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
    8a24:	4e85      	ldr	r6, [pc, #532]	; (8c3c <lv_draw_label+0xa90>)
    8a26:	a954      	add	r1, sp, #336	; 0x150
    8a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8a2a:	4698      	mov	r8, r3
    8a2c:	0018      	movs	r0, r3
    8a2e:	6833      	ldr	r3, [r6, #0]
    8a30:	4798      	blx	r3
    8a32:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
    8a34:	4642      	mov	r2, r8
    8a36:	9954      	ldr	r1, [sp, #336]	; 0x150
    8a38:	468c      	mov	ip, r1
    8a3a:	4462      	add	r2, ip
    8a3c:	0010      	movs	r0, r2
    8a3e:	6833      	ldr	r3, [r6, #0]
    8a40:	2100      	movs	r1, #0
    8a42:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
    8a44:	7dfb      	ldrb	r3, [r7, #23]
    8a46:	07da      	lsls	r2, r3, #31
    8a48:	d507      	bpl.n	8a5a <lv_draw_label+0x8ae>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    8a4a:	9b05      	ldr	r3, [sp, #20]
    8a4c:	2b23      	cmp	r3, #35	; 0x23
    8a4e:	d100      	bne.n	8a52 <lv_draw_label+0x8a6>
    8a50:	e505      	b.n	845e <lv_draw_label+0x2b2>
                if(cmd_state == CMD_STATE_PAR) {
    8a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a54:	2b01      	cmp	r3, #1
    8a56:	d100      	bne.n	8a5a <lv_draw_label+0x8ae>
    8a58:	e517      	b.n	848a <lv_draw_label+0x2de>
            lv_color_t color = dsc->color;
    8a5a:	883e      	ldrh	r6, [r7, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
    8a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a5e:	2b02      	cmp	r3, #2
    8a60:	d100      	bne.n	8a64 <lv_draw_label+0x8b8>
    8a62:	e567      	b.n	8534 <lv_draw_label+0x388>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    8a64:	0002      	movs	r2, r0
    8a66:	9905      	ldr	r1, [sp, #20]
    8a68:	9807      	ldr	r0, [sp, #28]
    8a6a:	4b75      	ldr	r3, [pc, #468]	; (8c40 <lv_draw_label+0xa94>)
    8a6c:	4798      	blx	r3
    8a6e:	900a      	str	r0, [sp, #40]	; 0x28
    8a70:	9008      	str	r0, [sp, #32]
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    8a72:	4b71      	ldr	r3, [pc, #452]	; (8c38 <lv_draw_label+0xa8c>)
    8a74:	9906      	ldr	r1, [sp, #24]
    8a76:	4299      	cmp	r1, r3
    8a78:	d006      	beq.n	8a88 <lv_draw_label+0x8dc>
    8a7a:	459a      	cmp	sl, r3
    8a7c:	d004      	beq.n	8a88 <lv_draw_label+0x8dc>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
    8a7e:	42a9      	cmp	r1, r5
    8a80:	d802      	bhi.n	8a88 <lv_draw_label+0x8dc>
    8a82:	45aa      	cmp	sl, r5
    8a84:	d900      	bls.n	8a88 <lv_draw_label+0x8dc>
    8a86:	e56f      	b.n	8568 <lv_draw_label+0x3bc>
    if(opa < LV_OPA_MIN) return;
    8a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a8a:	2b04      	cmp	r3, #4
    8a8c:	d9ac      	bls.n	89e8 <lv_draw_label+0x83c>
    if(font_p == NULL) {
    8a8e:	9807      	ldr	r0, [sp, #28]
    8a90:	2800      	cmp	r0, #0
    8a92:	d0a9      	beq.n	89e8 <lv_draw_label+0x83c>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
    8a94:	7e7b      	ldrb	r3, [r7, #25]
    8a96:	9313      	str	r3, [sp, #76]	; 0x4c
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
    8a98:	2300      	movs	r3, #0
    8a9a:	9a05      	ldr	r2, [sp, #20]
    8a9c:	a93c      	add	r1, sp, #240	; 0xf0
    8a9e:	4d69      	ldr	r5, [pc, #420]	; (8c44 <lv_draw_label+0xa98>)
    8aa0:	47a8      	blx	r5
    if(g_ret == false)  {
    8aa2:	2800      	cmp	r0, #0
    8aa4:	d0a0      	beq.n	89e8 <lv_draw_label+0x83c>
    if((g.box_h == 0) && (g.box_w == 0)) return;
    8aa6:	ab3c      	add	r3, sp, #240	; 0xf0
    8aa8:	889a      	ldrh	r2, [r3, #4]
    8aaa:	2a00      	cmp	r2, #0
    8aac:	d102      	bne.n	8ab4 <lv_draw_label+0x908>
    8aae:	885b      	ldrh	r3, [r3, #2]
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	d099      	beq.n	89e8 <lv_draw_label+0x83c>
    int32_t pos_x = pos_p->x + g.ofs_x;
    8ab4:	ab3c      	add	r3, sp, #240	; 0xf0
    8ab6:	2006      	movs	r0, #6
    8ab8:	5e19      	ldrsh	r1, [r3, r0]
    8aba:	4688      	mov	r8, r1
    8abc:	44a0      	add	r8, r4
    if(pos_x + g.box_w < clip_area->x1 ||
    8abe:	885b      	ldrh	r3, [r3, #2]
    8ac0:	4443      	add	r3, r8
    8ac2:	980e      	ldr	r0, [sp, #56]	; 0x38
    8ac4:	2500      	movs	r5, #0
    8ac6:	5f41      	ldrsh	r1, [r0, r5]
    8ac8:	428b      	cmp	r3, r1
    8aca:	db8d      	blt.n	89e8 <lv_draw_label+0x83c>
       pos_x > clip_area->x2 ||
    8acc:	0001      	movs	r1, r0
    8ace:	2304      	movs	r3, #4
    8ad0:	5ecb      	ldrsh	r3, [r1, r3]
    if(pos_x + g.box_w < clip_area->x1 ||
    8ad2:	4598      	cmp	r8, r3
    8ad4:	dc88      	bgt.n	89e8 <lv_draw_label+0x83c>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    8ad6:	9907      	ldr	r1, [sp, #28]
    8ad8:	2508      	movs	r5, #8
    8ada:	5f4b      	ldrsh	r3, [r1, r5]
    8adc:	250a      	movs	r5, #10
    8ade:	5f49      	ldrsh	r1, [r1, r5]
    8ae0:	1a5b      	subs	r3, r3, r1
    8ae2:	9911      	ldr	r1, [sp, #68]	; 0x44
    8ae4:	468c      	mov	ip, r1
    8ae6:	4463      	add	r3, ip
    8ae8:	1a9b      	subs	r3, r3, r2
    8aea:	a93c      	add	r1, sp, #240	; 0xf0
    8aec:	2508      	movs	r5, #8
    8aee:	5f49      	ldrsh	r1, [r1, r5]
    8af0:	1a5b      	subs	r3, r3, r1
    8af2:	001d      	movs	r5, r3
    8af4:	9317      	str	r3, [sp, #92]	; 0x5c
       pos_y + g.box_h < clip_area->y1 ||
    8af6:	469c      	mov	ip, r3
    8af8:	4462      	add	r2, ip
    8afa:	0001      	movs	r1, r0
    8afc:	2002      	movs	r0, #2
    8afe:	5e0b      	ldrsh	r3, [r1, r0]
       pos_x > clip_area->x2 ||
    8b00:	429a      	cmp	r2, r3
    8b02:	da00      	bge.n	8b06 <lv_draw_label+0x95a>
    8b04:	e770      	b.n	89e8 <lv_draw_label+0x83c>
       pos_y > clip_area->y2)  {
    8b06:	2206      	movs	r2, #6
    8b08:	5e8b      	ldrsh	r3, [r1, r2]
       pos_y + g.box_h < clip_area->y1 ||
    8b0a:	429d      	cmp	r5, r3
    8b0c:	dd00      	ble.n	8b10 <lv_draw_label+0x964>
    8b0e:	e76b      	b.n	89e8 <lv_draw_label+0x83c>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
    8b10:	9905      	ldr	r1, [sp, #20]
    8b12:	9807      	ldr	r0, [sp, #28]
    8b14:	4b4c      	ldr	r3, [pc, #304]	; (8c48 <lv_draw_label+0xa9c>)
    8b16:	4798      	blx	r3
    8b18:	1e05      	subs	r5, r0, #0
    if(map_p == NULL) {
    8b1a:	d100      	bne.n	8b1e <lv_draw_label+0x972>
    8b1c:	e764      	b.n	89e8 <lv_draw_label+0x83c>
    if(font_p->subpx) {
    8b1e:	9b07      	ldr	r3, [sp, #28]
    8b20:	7b1b      	ldrb	r3, [r3, #12]
    8b22:	079b      	lsls	r3, r3, #30
    8b24:	d020      	beq.n	8b68 <lv_draw_label+0x9bc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    8b26:	4643      	mov	r3, r8
    8b28:	b21b      	sxth	r3, r3
    8b2a:	9305      	str	r3, [sp, #20]
    8b2c:	466b      	mov	r3, sp
    8b2e:	225c      	movs	r2, #92	; 0x5c
    8b30:	189b      	adds	r3, r3, r2
    8b32:	2200      	movs	r2, #0
    8b34:	5e9b      	ldrsh	r3, [r3, r2]
    8b36:	9315      	str	r3, [sp, #84]	; 0x54
    8b38:	466b      	mov	r3, sp
    8b3a:	2290      	movs	r2, #144	; 0x90
    8b3c:	189b      	adds	r3, r3, r2
    8b3e:	801e      	strh	r6, [r3, #0]
    uint32_t bpp = g->bpp;
    8b40:	ab3c      	add	r3, sp, #240	; 0xf0
    8b42:	7a9b      	ldrb	r3, [r3, #10]
    8b44:	001e      	movs	r6, r3
    if(bpp == 3) bpp = 4;
    8b46:	2b03      	cmp	r3, #3
    8b48:	d100      	bne.n	8b4c <lv_draw_label+0x9a0>
    8b4a:	e60e      	b.n	876a <lv_draw_label+0x5be>
    switch(bpp) {
    8b4c:	2b02      	cmp	r3, #2
    8b4e:	d100      	bne.n	8b52 <lv_draw_label+0x9a6>
    8b50:	e52b      	b.n	85aa <lv_draw_label+0x3fe>
    8b52:	d900      	bls.n	8b56 <lv_draw_label+0x9aa>
    8b54:	e51d      	b.n	8592 <lv_draw_label+0x3e6>
    8b56:	2b01      	cmp	r3, #1
    8b58:	d000      	beq.n	8b5c <lv_draw_label+0x9b0>
    8b5a:	e745      	b.n	89e8 <lv_draw_label+0x83c>
    uint32_t bpp = g->bpp;
    8b5c:	2601      	movs	r6, #1
            bitmask_init  = 0x80;
    8b5e:	2380      	movs	r3, #128	; 0x80
    8b60:	9320      	str	r3, [sp, #128]	; 0x80
            bpp_opa_table = _lv_bpp1_opa_table;
    8b62:	4b3a      	ldr	r3, [pc, #232]	; (8c4c <lv_draw_label+0xaa0>)
    8b64:	9323      	str	r3, [sp, #140]	; 0x8c
    8b66:	e524      	b.n	85b2 <lv_draw_label+0x406>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    8b68:	4643      	mov	r3, r8
    8b6a:	b21b      	sxth	r3, r3
    8b6c:	469c      	mov	ip, r3
    8b6e:	466b      	mov	r3, sp
    8b70:	225c      	movs	r2, #92	; 0x5c
    8b72:	189b      	adds	r3, r3, r2
    8b74:	2200      	movs	r2, #0
    8b76:	5e9b      	ldrsh	r3, [r3, r2]
    8b78:	9321      	str	r3, [sp, #132]	; 0x84
    8b7a:	466b      	mov	r3, sp
    8b7c:	22a0      	movs	r2, #160	; 0xa0
    8b7e:	189b      	adds	r3, r3, r2
    8b80:	801e      	strh	r6, [r3, #0]
    uint32_t bpp = g->bpp;
    8b82:	ab3c      	add	r3, sp, #240	; 0xf0
    8b84:	7a9b      	ldrb	r3, [r3, #10]
    8b86:	9320      	str	r3, [sp, #128]	; 0x80
    if(bpp == 3) bpp = 4;
    8b88:	2b03      	cmp	r3, #3
    8b8a:	d033      	beq.n	8bf4 <lv_draw_label+0xa48>
    switch(bpp) {
    8b8c:	2b02      	cmp	r3, #2
    8b8e:	d019      	beq.n	8bc4 <lv_draw_label+0xa18>
    8b90:	d80a      	bhi.n	8ba8 <lv_draw_label+0x9fc>
    8b92:	2b01      	cmp	r3, #1
    8b94:	d000      	beq.n	8b98 <lv_draw_label+0x9ec>
    8b96:	e727      	b.n	89e8 <lv_draw_label+0x83c>
    uint32_t bpp = g->bpp;
    8b98:	2301      	movs	r3, #1
    8b9a:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 2;
    8b9c:	2102      	movs	r1, #2
            bitmask_init  = 0x80;
    8b9e:	337f      	adds	r3, #127	; 0x7f
    8ba0:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp1_opa_table;
    8ba2:	4b2a      	ldr	r3, [pc, #168]	; (8c4c <lv_draw_label+0xaa0>)
    8ba4:	9327      	str	r3, [sp, #156]	; 0x9c
    8ba6:	e012      	b.n	8bce <lv_draw_label+0xa22>
    switch(bpp) {
    8ba8:	2b04      	cmp	r3, #4
    8baa:	d025      	beq.n	8bf8 <lv_draw_label+0xa4c>
    8bac:	2b08      	cmp	r3, #8
    8bae:	d000      	beq.n	8bb2 <lv_draw_label+0xa06>
    8bb0:	e71a      	b.n	89e8 <lv_draw_label+0x83c>
    uint32_t bpp = g->bpp;
    8bb2:	2308      	movs	r3, #8
    8bb4:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 256;
    8bb6:	2180      	movs	r1, #128	; 0x80
    8bb8:	0049      	lsls	r1, r1, #1
            bitmask_init  = 0xFF;
    8bba:	33f7      	adds	r3, #247	; 0xf7
    8bbc:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp8_opa_table;
    8bbe:	4b24      	ldr	r3, [pc, #144]	; (8c50 <lv_draw_label+0xaa4>)
    8bc0:	9327      	str	r3, [sp, #156]	; 0x9c
    8bc2:	e004      	b.n	8bce <lv_draw_label+0xa22>
            shades = 4;
    8bc4:	2104      	movs	r1, #4
            bitmask_init  = 0xC0;
    8bc6:	23c0      	movs	r3, #192	; 0xc0
    8bc8:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp2_opa_table;
    8bca:	4b22      	ldr	r3, [pc, #136]	; (8c54 <lv_draw_label+0xaa8>)
    8bcc:	9327      	str	r3, [sp, #156]	; 0x9c
    if(opa < LV_OPA_MAX) {
    8bce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8bd0:	2af9      	cmp	r2, #249	; 0xf9
    8bd2:	d857      	bhi.n	8c84 <lv_draw_label+0xad8>
        if(prev_opa != opa || prev_bpp != bpp) {
    8bd4:	4b20      	ldr	r3, [pc, #128]	; (8c58 <lv_draw_label+0xaac>)
    8bd6:	781b      	ldrb	r3, [r3, #0]
    8bd8:	4293      	cmp	r3, r2
    8bda:	d013      	beq.n	8c04 <lv_draw_label+0xa58>
            for(i = 0; i < shades; i++) {
    8bdc:	2200      	movs	r2, #0
    8bde:	2900      	cmp	r1, #0
    8be0:	d045      	beq.n	8c6e <lv_draw_label+0xac2>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    8be2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    8be4:	481d      	ldr	r0, [pc, #116]	; (8c5c <lv_draw_label+0xab0>)
    8be6:	465b      	mov	r3, fp
    8be8:	9319      	str	r3, [sp, #100]	; 0x64
    8bea:	46a3      	mov	fp, r4
    8bec:	0034      	movs	r4, r6
    8bee:	9605      	str	r6, [sp, #20]
    8bf0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    8bf2:	e012      	b.n	8c1a <lv_draw_label+0xa6e>
    if(bpp == 3) bpp = 4;
    8bf4:	2304      	movs	r3, #4
    8bf6:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 16;
    8bf8:	2110      	movs	r1, #16
            bitmask_init  = 0xF0;
    8bfa:	23f0      	movs	r3, #240	; 0xf0
    8bfc:	9315      	str	r3, [sp, #84]	; 0x54
            bpp_opa_table_p = _lv_bpp4_opa_table;
    8bfe:	4b18      	ldr	r3, [pc, #96]	; (8c60 <lv_draw_label+0xab4>)
    8c00:	9327      	str	r3, [sp, #156]	; 0x9c
    8c02:	e7e4      	b.n	8bce <lv_draw_label+0xa22>
        if(prev_opa != opa || prev_bpp != bpp) {
    8c04:	4b17      	ldr	r3, [pc, #92]	; (8c64 <lv_draw_label+0xab8>)
    8c06:	681b      	ldr	r3, [r3, #0]
    8c08:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8c0a:	429a      	cmp	r2, r3
    8c0c:	d1e6      	bne.n	8bdc <lv_draw_label+0xa30>
    8c0e:	e02e      	b.n	8c6e <lv_draw_label+0xac2>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    8c10:	9b05      	ldr	r3, [sp, #20]
    8c12:	5413      	strb	r3, [r2, r0]
            for(i = 0; i < shades; i++) {
    8c14:	3201      	adds	r2, #1
    8c16:	428a      	cmp	r2, r1
    8c18:	d026      	beq.n	8c68 <lv_draw_label+0xabc>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    8c1a:	5cb3      	ldrb	r3, [r6, r2]
    8c1c:	2bff      	cmp	r3, #255	; 0xff
    8c1e:	d0f7      	beq.n	8c10 <lv_draw_label+0xa64>
    8c20:	4363      	muls	r3, r4
    8c22:	0a1b      	lsrs	r3, r3, #8
    8c24:	e7f5      	b.n	8c12 <lv_draw_label+0xa66>
    8c26:	46c0      	nop			; (mov r8, r8)
    8c28:	0000a5bd 	.word	0x0000a5bd
    8c2c:	00010fe5 	.word	0x00010fe5
    8c30:	000068e9 	.word	0x000068e9
    8c34:	00010b6d 	.word	0x00010b6d
    8c38:	0000ffff 	.word	0x0000ffff
    8c3c:	20000058 	.word	0x20000058
    8c40:	0000e701 	.word	0x0000e701
    8c44:	0000e6f9 	.word	0x0000e6f9
    8c48:	0000e6f1 	.word	0x0000e6f1
    8c4c:	000188dc 	.word	0x000188dc
    8c50:	000188f4 	.word	0x000188f4
    8c54:	000188e0 	.word	0x000188e0
    8c58:	20002bb4 	.word	0x20002bb4
    8c5c:	20002ab0 	.word	0x20002ab0
    8c60:	000188e4 	.word	0x000188e4
    8c64:	20002bb0 	.word	0x20002bb0
    8c68:	465c      	mov	r4, fp
    8c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8c6c:	469b      	mov	fp, r3
        prev_opa = opa;
    8c6e:	4bd7      	ldr	r3, [pc, #860]	; (8fcc <lv_draw_label+0xe20>)
    8c70:	466a      	mov	r2, sp
    8c72:	2170      	movs	r1, #112	; 0x70
    8c74:	1852      	adds	r2, r2, r1
    8c76:	7812      	ldrb	r2, [r2, #0]
    8c78:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
    8c7a:	4bd5      	ldr	r3, [pc, #852]	; (8fd0 <lv_draw_label+0xe24>)
    8c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8c7e:	601a      	str	r2, [r3, #0]
        bpp_opa_table_p = opa_table;
    8c80:	4bd4      	ldr	r3, [pc, #848]	; (8fd4 <lv_draw_label+0xe28>)
    8c82:	9327      	str	r3, [sp, #156]	; 0x9c
    int32_t box_w = g->box_w;
    8c84:	ab3c      	add	r3, sp, #240	; 0xf0
    8c86:	885a      	ldrh	r2, [r3, #2]
    8c88:	9205      	str	r2, [sp, #20]
    int32_t box_h = g->box_h;
    8c8a:	8899      	ldrh	r1, [r3, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    8c8c:	9820      	ldr	r0, [sp, #128]	; 0x80
    8c8e:	4350      	muls	r0, r2
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
    8c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8c92:	2200      	movs	r2, #0
    8c94:	5e9b      	ldrsh	r3, [r3, r2]
    8c96:	2200      	movs	r2, #0
    8c98:	9219      	str	r2, [sp, #100]	; 0x64
    8c9a:	459c      	cmp	ip, r3
    8c9c:	da02      	bge.n	8ca4 <lv_draw_label+0xaf8>
    8c9e:	4662      	mov	r2, ip
    8ca0:	1a9b      	subs	r3, r3, r2
    8ca2:	9319      	str	r3, [sp, #100]	; 0x64
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
    8ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8ca6:	2204      	movs	r2, #4
    8ca8:	5e9b      	ldrsh	r3, [r3, r2]
    8caa:	9e05      	ldr	r6, [sp, #20]
    8cac:	0032      	movs	r2, r6
    8cae:	4462      	add	r2, ip
    8cb0:	961b      	str	r6, [sp, #108]	; 0x6c
    8cb2:	429a      	cmp	r2, r3
    8cb4:	dd03      	ble.n	8cbe <lv_draw_label+0xb12>
    8cb6:	4662      	mov	r2, ip
    8cb8:	1a9b      	subs	r3, r3, r2
    8cba:	3301      	adds	r3, #1
    8cbc:	931b      	str	r3, [sp, #108]	; 0x6c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    8cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cc0:	2202      	movs	r2, #2
    8cc2:	5e9b      	ldrsh	r3, [r3, r2]
    8cc4:	2200      	movs	r2, #0
    8cc6:	921a      	str	r2, [sp, #104]	; 0x68
    8cc8:	9e21      	ldr	r6, [sp, #132]	; 0x84
    8cca:	429e      	cmp	r6, r3
    8ccc:	da01      	bge.n	8cd2 <lv_draw_label+0xb26>
    8cce:	1b9b      	subs	r3, r3, r6
    8cd0:	931a      	str	r3, [sp, #104]	; 0x68
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    8cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8cd4:	2206      	movs	r2, #6
    8cd6:	5e9a      	ldrsh	r2, [r3, r2]
    8cd8:	9e21      	ldr	r6, [sp, #132]	; 0x84
    8cda:	198b      	adds	r3, r1, r6
    8cdc:	9122      	str	r1, [sp, #136]	; 0x88
    8cde:	4293      	cmp	r3, r2
    8ce0:	dd02      	ble.n	8ce8 <lv_draw_label+0xb3c>
    8ce2:	1b92      	subs	r2, r2, r6
    8ce4:	1c53      	adds	r3, r2, #1
    8ce6:	9322      	str	r3, [sp, #136]	; 0x88
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    8ce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8cea:	9326      	str	r3, [sp, #152]	; 0x98
    8cec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8cee:	4350      	muls	r0, r2
    8cf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8cf2:	435a      	muls	r2, r3
    8cf4:	1880      	adds	r0, r0, r2
    map_p += bit_ofs >> 3;
    8cf6:	08c6      	lsrs	r6, r0, #3
    8cf8:	19ae      	adds	r6, r5, r6
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    8cfa:	2507      	movs	r5, #7
    8cfc:	4005      	ands	r5, r0
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
    8cfe:	9b05      	ldr	r3, [sp, #20]
    8d00:	434b      	muls	r3, r1
    8d02:	001a      	movs	r2, r3
    8d04:	9323      	str	r3, [sp, #140]	; 0x8c
    8d06:	23f0      	movs	r3, #240	; 0xf0
    8d08:	005b      	lsls	r3, r3, #1
    8d0a:	429a      	cmp	r2, r3
    8d0c:	dd00      	ble.n	8d10 <lv_draw_label+0xb64>
    8d0e:	9323      	str	r3, [sp, #140]	; 0x8c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    8d10:	9823      	ldr	r0, [sp, #140]	; 0x8c
    8d12:	4bb1      	ldr	r3, [pc, #708]	; (8fd8 <lv_draw_label+0xe2c>)
    8d14:	4798      	blx	r3
    8d16:	9021      	str	r0, [sp, #132]	; 0x84
    fill_area.x1 = col_start + pos_x;
    8d18:	4643      	mov	r3, r8
    8d1a:	466a      	mov	r2, sp
    8d1c:	2190      	movs	r1, #144	; 0x90
    8d1e:	1852      	adds	r2, r2, r1
    8d20:	8013      	strh	r3, [r2, #0]
    8d22:	466b      	mov	r3, sp
    8d24:	2290      	movs	r2, #144	; 0x90
    8d26:	189b      	adds	r3, r3, r2
    8d28:	8819      	ldrh	r1, [r3, #0]
    8d2a:	ab3a      	add	r3, sp, #232	; 0xe8
    8d2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8d2e:	188a      	adds	r2, r1, r2
    8d30:	801a      	strh	r2, [r3, #0]
    fill_area.x2 = col_end  + pos_x - 1;
    8d32:	1e4a      	subs	r2, r1, #1
    8d34:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8d36:	468c      	mov	ip, r1
    8d38:	4462      	add	r2, ip
    8d3a:	809a      	strh	r2, [r3, #4]
    fill_area.y1 = row_start + pos_y;
    8d3c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d3e:	0002      	movs	r2, r0
    8d40:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d42:	4684      	mov	ip, r0
    8d44:	4462      	add	r2, ip
    8d46:	b212      	sxth	r2, r2
    8d48:	805a      	strh	r2, [r3, #2]
    fill_area.y2 = fill_area.y1;
    8d4a:	80da      	strh	r2, [r3, #6]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    8d4c:	4ba3      	ldr	r3, [pc, #652]	; (8fdc <lv_draw_label+0xe30>)
    8d4e:	4798      	blx	r3
    8d50:	9024      	str	r0, [sp, #144]	; 0x90
    uint32_t col_bit_max = 8 - bpp;
    8d52:	2308      	movs	r3, #8
    8d54:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8d56:	1a9b      	subs	r3, r3, r2
    8d58:	4698      	mov	r8, r3
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
    8d5a:	9b05      	ldr	r3, [sp, #20]
    8d5c:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d5e:	468c      	mov	ip, r1
    8d60:	4463      	add	r3, ip
    8d62:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8d64:	1a5b      	subs	r3, r3, r1
    8d66:	0011      	movs	r1, r2
    8d68:	435a      	muls	r2, r3
    8d6a:	9225      	str	r2, [sp, #148]	; 0x94
    for(row = row_start ; row < row_end; row++) {
    8d6c:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8d70:	4298      	cmp	r0, r3
    8d72:	db00      	blt.n	8d76 <lv_draw_label+0xbca>
    8d74:	e09d      	b.n	8eb2 <lv_draw_label+0xd06>
    8d76:	2300      	movs	r3, #0
    8d78:	9317      	str	r3, [sp, #92]	; 0x5c
                mask_buf[mask_p] = 0;
    8d7a:	465b      	mov	r3, fp
    8d7c:	9329      	str	r3, [sp, #164]	; 0xa4
    8d7e:	4653      	mov	r3, sl
    8d80:	932a      	str	r3, [sp, #168]	; 0xa8
    8d82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    8d84:	469a      	mov	sl, r3
    8d86:	9427      	str	r4, [sp, #156]	; 0x9c
    8d88:	4643      	mov	r3, r8
    8d8a:	9320      	str	r3, [sp, #128]	; 0x80
    8d8c:	4688      	mov	r8, r1
    8d8e:	972b      	str	r7, [sp, #172]	; 0xac
    8d90:	e039      	b.n	8e06 <lv_draw_label+0xc5a>
    8d92:	2300      	movs	r3, #0
    8d94:	7013      	strb	r3, [r2, #0]
    8d96:	e012      	b.n	8dbe <lv_draw_label+0xc12>
                map_p++;
    8d98:	3601      	adds	r6, #1
                bitmask = bitmask_init;
    8d9a:	9915      	ldr	r1, [sp, #84]	; 0x54
                col_bit = 0;
    8d9c:	2500      	movs	r5, #0
    8d9e:	3201      	adds	r2, #1
        for(col = col_start; col < col_end; col++) {
    8da0:	9b05      	ldr	r3, [sp, #20]
    8da2:	4293      	cmp	r3, r2
    8da4:	d010      	beq.n	8dc8 <lv_draw_label+0xc1c>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
    8da6:	7833      	ldrb	r3, [r6, #0]
    8da8:	400b      	ands	r3, r1
    8daa:	1b60      	subs	r0, r4, r5
    8dac:	40c3      	lsrs	r3, r0
            if(letter_px) {
    8dae:	b2d8      	uxtb	r0, r3
    8db0:	2800      	cmp	r0, #0
    8db2:	d0ee      	beq.n	8d92 <lv_draw_label+0xbe6>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
    8db4:	4658      	mov	r0, fp
    8db6:	4003      	ands	r3, r0
    8db8:	4650      	mov	r0, sl
    8dba:	5cc3      	ldrb	r3, [r0, r3]
    8dbc:	7013      	strb	r3, [r2, #0]
            if(col_bit < col_bit_max) {
    8dbe:	42ac      	cmp	r4, r5
    8dc0:	d9ea      	bls.n	8d98 <lv_draw_label+0xbec>
                col_bit += bpp;
    8dc2:	19ed      	adds	r5, r5, r7
                bitmask = bitmask >> bpp;
    8dc4:	40f9      	lsrs	r1, r7
    8dc6:	e7ea      	b.n	8d9e <lv_draw_label+0xbf2>
    8dc8:	46b8      	mov	r8, r7
    8dca:	9420      	str	r4, [sp, #128]	; 0x80
    8dcc:	4667      	mov	r7, ip
        if(other_mask_cnt) {
    8dce:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	d133      	bne.n	8e3c <lv_draw_label+0xc90>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    8dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8dd6:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8dd8:	1a9b      	subs	r3, r3, r2
    8dda:	19db      	adds	r3, r3, r7
    8ddc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8dde:	429a      	cmp	r2, r3
    8de0:	d949      	bls.n	8e76 <lv_draw_label+0xcca>
            fill_area.y2 ++;
    8de2:	aa3a      	add	r2, sp, #232	; 0xe8
    8de4:	88d3      	ldrh	r3, [r2, #6]
    8de6:	3301      	adds	r3, #1
    8de8:	80d3      	strh	r3, [r2, #6]
    8dea:	9717      	str	r7, [sp, #92]	; 0x5c
        col_bit += col_bit_row_ofs;
    8dec:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8dee:	469c      	mov	ip, r3
    8df0:	4465      	add	r5, ip
        map_p += (col_bit >> 3);
    8df2:	08eb      	lsrs	r3, r5, #3
    8df4:	18f6      	adds	r6, r6, r3
        col_bit = col_bit & 0x7;
    8df6:	2307      	movs	r3, #7
    8df8:	401d      	ands	r5, r3
    for(row = row_start ; row < row_end; row++) {
    8dfa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8dfc:	3301      	adds	r3, #1
    8dfe:	931a      	str	r3, [sp, #104]	; 0x68
    8e00:	9a22      	ldr	r2, [sp, #136]	; 0x88
    8e02:	4293      	cmp	r3, r2
    8e04:	da4f      	bge.n	8ea6 <lv_draw_label+0xcfa>
        bitmask = bitmask_init >> col_bit;
    8e06:	9915      	ldr	r1, [sp, #84]	; 0x54
    8e08:	40e9      	lsrs	r1, r5
        for(col = col_start; col < col_end; col++) {
    8e0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8e0c:	001a      	movs	r2, r3
    8e0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8e10:	4282      	cmp	r2, r0
    8e12:	da11      	bge.n	8e38 <lv_draw_label+0xc8c>
    8e14:	9f21      	ldr	r7, [sp, #132]	; 0x84
    8e16:	003a      	movs	r2, r7
    8e18:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    8e1a:	46a4      	mov	ip, r4
    8e1c:	4462      	add	r2, ip
    8e1e:	0003      	movs	r3, r0
    8e20:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e22:	1a1b      	subs	r3, r3, r0
    8e24:	449c      	add	ip, r3
    8e26:	003b      	movs	r3, r7
    8e28:	4463      	add	r3, ip
    8e2a:	0018      	movs	r0, r3
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
    8e2c:	23ff      	movs	r3, #255	; 0xff
    8e2e:	469b      	mov	fp, r3
    8e30:	9005      	str	r0, [sp, #20]
    8e32:	4647      	mov	r7, r8
    8e34:	9c20      	ldr	r4, [sp, #128]	; 0x80
    8e36:	e7b6      	b.n	8da6 <lv_draw_label+0xbfa>
        for(col = col_start; col < col_end; col++) {
    8e38:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    8e3a:	e7c8      	b.n	8dce <lv_draw_label+0xc22>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
    8e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8e3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
    8e40:	4694      	mov	ip, r2
    8e42:	4463      	add	r3, ip
    8e44:	469b      	mov	fp, r3
    8e46:	aa3a      	add	r2, sp, #232	; 0xe8
    8e48:	2300      	movs	r3, #0
    8e4a:	5ed1      	ldrsh	r1, [r2, r3]
    8e4c:	8893      	ldrh	r3, [r2, #4]
    8e4e:	3301      	adds	r3, #1
    8e50:	1a5b      	subs	r3, r3, r1
    8e52:	b21b      	sxth	r3, r3
    8e54:	2006      	movs	r0, #6
    8e56:	5e12      	ldrsh	r2, [r2, r0]
    8e58:	4658      	mov	r0, fp
    8e5a:	4c61      	ldr	r4, [pc, #388]	; (8fe0 <lv_draw_label+0xe34>)
    8e5c:	47a0      	blx	r4
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    8e5e:	2800      	cmp	r0, #0
    8e60:	d1b8      	bne.n	8dd4 <lv_draw_label+0xc28>
    8e62:	ab3a      	add	r3, sp, #232	; 0xe8
    8e64:	8899      	ldrh	r1, [r3, #4]
    8e66:	3101      	adds	r1, #1
    8e68:	881b      	ldrh	r3, [r3, #0]
    8e6a:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
    8e6c:	b209      	sxth	r1, r1
    8e6e:	4658      	mov	r0, fp
    8e70:	4b5c      	ldr	r3, [pc, #368]	; (8fe4 <lv_draw_label+0xe38>)
    8e72:	4798      	blx	r3
    8e74:	e7ae      	b.n	8dd4 <lv_draw_label+0xc28>
            _lv_blend_fill(clip_area, &fill_area,
    8e76:	af3a      	add	r7, sp, #232	; 0xe8
    8e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8e7a:	9302      	str	r3, [sp, #8]
    8e7c:	23ff      	movs	r3, #255	; 0xff
    8e7e:	9301      	str	r3, [sp, #4]
    8e80:	3bfd      	subs	r3, #253	; 0xfd
    8e82:	9300      	str	r3, [sp, #0]
    8e84:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8e86:	466a      	mov	r2, sp
    8e88:	21a0      	movs	r1, #160	; 0xa0
    8e8a:	1852      	adds	r2, r2, r1
    8e8c:	8812      	ldrh	r2, [r2, #0]
    8e8e:	0039      	movs	r1, r7
    8e90:	980e      	ldr	r0, [sp, #56]	; 0x38
    8e92:	4c55      	ldr	r4, [pc, #340]	; (8fe8 <lv_draw_label+0xe3c>)
    8e94:	47a0      	blx	r4
            fill_area.y1 = fill_area.y2 + 1;
    8e96:	88fb      	ldrh	r3, [r7, #6]
    8e98:	3301      	adds	r3, #1
    8e9a:	b21b      	sxth	r3, r3
    8e9c:	807b      	strh	r3, [r7, #2]
            fill_area.y2 = fill_area.y1;
    8e9e:	80fb      	strh	r3, [r7, #6]
            mask_p = 0;
    8ea0:	2300      	movs	r3, #0
    8ea2:	9317      	str	r3, [sp, #92]	; 0x5c
    8ea4:	e7a2      	b.n	8dec <lv_draw_label+0xc40>
    8ea6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    8ea8:	469b      	mov	fp, r3
    8eaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8eac:	469a      	mov	sl, r3
    8eae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    8eb0:	9f2b      	ldr	r7, [sp, #172]	; 0xac
    if(fill_area.y1 != fill_area.y2) {
    8eb2:	aa3a      	add	r2, sp, #232	; 0xe8
    8eb4:	2106      	movs	r1, #6
    8eb6:	5e53      	ldrsh	r3, [r2, r1]
    8eb8:	2102      	movs	r1, #2
    8eba:	5e52      	ldrsh	r2, [r2, r1]
    8ebc:	429a      	cmp	r2, r3
    8ebe:	d010      	beq.n	8ee2 <lv_draw_label+0xd36>
        fill_area.y2--;
    8ec0:	a93a      	add	r1, sp, #232	; 0xe8
    8ec2:	3b01      	subs	r3, #1
    8ec4:	80cb      	strh	r3, [r1, #6]
        _lv_blend_fill(clip_area, &fill_area,
    8ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8ec8:	9302      	str	r3, [sp, #8]
    8eca:	23ff      	movs	r3, #255	; 0xff
    8ecc:	9301      	str	r3, [sp, #4]
    8ece:	3bfd      	subs	r3, #253	; 0xfd
    8ed0:	9300      	str	r3, [sp, #0]
    8ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8ed4:	466a      	mov	r2, sp
    8ed6:	20a0      	movs	r0, #160	; 0xa0
    8ed8:	1812      	adds	r2, r2, r0
    8eda:	8812      	ldrh	r2, [r2, #0]
    8edc:	980e      	ldr	r0, [sp, #56]	; 0x38
    8ede:	4d42      	ldr	r5, [pc, #264]	; (8fe8 <lv_draw_label+0xe3c>)
    8ee0:	47a8      	blx	r5
    _lv_mem_buf_release(mask_buf);
    8ee2:	9821      	ldr	r0, [sp, #132]	; 0x84
    8ee4:	4b41      	ldr	r3, [pc, #260]	; (8fec <lv_draw_label+0xe40>)
    8ee6:	4798      	blx	r3
    8ee8:	e57e      	b.n	89e8 <lv_draw_label+0x83c>
                        cmd_state = CMD_STATE_WAIT;
    8eea:	2300      	movs	r3, #0
    8eec:	9309      	str	r3, [sp, #36]	; 0x24
    8eee:	e584      	b.n	89fa <lv_draw_label+0x84e>
    8ef0:	46d0      	mov	r8, sl
    8ef2:	46a2      	mov	sl, r4
    8ef4:	003e      	movs	r6, r7
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
    8ef6:	7e3b      	ldrb	r3, [r7, #24]
    8ef8:	079b      	lsls	r3, r3, #30
    8efa:	d447      	bmi.n	8f8c <lv_draw_label+0xde0>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
    8efc:	7e33      	ldrb	r3, [r6, #24]
    8efe:	07db      	lsls	r3, r3, #31
    8f00:	d500      	bpl.n	8f04 <lv_draw_label+0xd58>
    8f02:	e07b      	b.n	8ffc <lv_draw_label+0xe50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    8f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8f06:	001f      	movs	r7, r3
    8f08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8f0a:	46ac      	mov	ip, r5
    8f0c:	4467      	add	r7, ip
    8f0e:	230c      	movs	r3, #12
    8f10:	5ef2      	ldrsh	r2, [r6, r3]
    8f12:	7df3      	ldrb	r3, [r6, #23]
    8f14:	9300      	str	r3, [sp, #0]
    8f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f18:	9907      	ldr	r1, [sp, #28]
    8f1a:	0038      	movs	r0, r7
    8f1c:	4c34      	ldr	r4, [pc, #208]	; (8ff0 <lv_draw_label+0xe44>)
    8f1e:	47a0      	blx	r4
    8f20:	1944      	adds	r4, r0, r5
        pos.x = coords->x1;
    8f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f24:	2500      	movs	r5, #0
    8f26:	5f5d      	ldrsh	r5, [r3, r5]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
    8f28:	7df2      	ldrb	r2, [r6, #23]
    8f2a:	0753      	lsls	r3, r2, #29
    8f2c:	d500      	bpl.n	8f30 <lv_draw_label+0xd84>
    8f2e:	e084      	b.n	903a <lv_draw_label+0xe8e>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    8f30:	0713      	lsls	r3, r2, #28
    8f32:	d500      	bpl.n	8f36 <lv_draw_label+0xd8a>
    8f34:	e096      	b.n	9064 <lv_draw_label+0xeb8>
    8f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f38:	9918      	ldr	r1, [sp, #96]	; 0x60
    8f3a:	468c      	mov	ip, r1
    8f3c:	4463      	add	r3, ip
    8f3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8f40:	4462      	add	r2, ip
    8f42:	b292      	uxth	r2, r2
    8f44:	9214      	str	r2, [sp, #80]	; 0x50
        line_start = line_end;
    8f46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8f48:	4693      	mov	fp, r2
        pos.y += line_height;
    8f4a:	b21b      	sxth	r3, r3
    8f4c:	001a      	movs	r2, r3
    8f4e:	9311      	str	r3, [sp, #68]	; 0x44
        if(pos.y > mask->y2) return;
    8f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8f52:	2106      	movs	r1, #6
    8f54:	5e5b      	ldrsh	r3, [r3, r1]
    8f56:	4293      	cmp	r3, r2
    8f58:	da01      	bge.n	8f5e <lv_draw_label+0xdb2>
    8f5a:	f7ff f93b 	bl	81d4 <lv_draw_label+0x28>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    8f5e:	940b      	str	r4, [sp, #44]	; 0x2c
    while(txt[line_start] != '\0') {
    8f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8f62:	445b      	add	r3, fp
    8f64:	930c      	str	r3, [sp, #48]	; 0x30
    8f66:	781b      	ldrb	r3, [r3, #0]
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d101      	bne.n	8f70 <lv_draw_label+0xdc4>
    8f6c:	f7ff f932 	bl	81d4 <lv_draw_label+0x28>
        pos.x += x_ofs;
    8f70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    8f72:	469c      	mov	ip, r3
    8f74:	4465      	add	r5, ip
    8f76:	b22b      	sxth	r3, r5
    8f78:	469a      	mov	sl, r3
        i         = 0;
    8f7a:	2300      	movs	r3, #0
    8f7c:	9354      	str	r3, [sp, #336]	; 0x150
        cmd_state = CMD_STATE_WAIT;
    8f7e:	9309      	str	r3, [sp, #36]	; 0x24
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
    8f80:	4b1c      	ldr	r3, [pc, #112]	; (8ff4 <lv_draw_label+0xe48>)
    8f82:	4699      	mov	r9, r3
    8f84:	4654      	mov	r4, sl
    8f86:	46c2      	mov	sl, r8
    8f88:	0037      	movs	r7, r6
        while(i < line_end - line_start) {
    8f8a:	e536      	b.n	89fa <lv_draw_label+0x84e>
            p1.x = pos_x_start;
    8f8c:	a83a      	add	r0, sp, #232	; 0xe8
    8f8e:	466b      	mov	r3, sp
    8f90:	227c      	movs	r2, #124	; 0x7c
    8f92:	189b      	adds	r3, r3, r2
    8f94:	881b      	ldrh	r3, [r3, #0]
    8f96:	8003      	strh	r3, [r0, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	2208      	movs	r2, #8
    8f9c:	5e9b      	ldrsh	r3, [r3, r2]
    8f9e:	0fda      	lsrs	r2, r3, #31
    8fa0:	18d2      	adds	r2, r2, r3
    8fa2:	1052      	asrs	r2, r2, #1
    8fa4:	ab55      	add	r3, sp, #340	; 0x154
    8fa6:	2102      	movs	r1, #2
    8fa8:	5e5c      	ldrsh	r4, [r3, r1]
    8faa:	0fe1      	lsrs	r1, r4, #31
    8fac:	1909      	adds	r1, r1, r4
    8fae:	1049      	asrs	r1, r1, #1
    8fb0:	1852      	adds	r2, r2, r1
    8fb2:	9914      	ldr	r1, [sp, #80]	; 0x50
    8fb4:	468c      	mov	ip, r1
    8fb6:	4462      	add	r2, ip
    8fb8:	b212      	sxth	r2, r2
    8fba:	8042      	strh	r2, [r0, #2]
            p2.x = pos.x;
    8fbc:	a93c      	add	r1, sp, #240	; 0xf0
    8fbe:	4654      	mov	r4, sl
    8fc0:	800c      	strh	r4, [r1, #0]
            p2.y = p1.y;
    8fc2:	804a      	strh	r2, [r1, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    8fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8fc6:	4c0c      	ldr	r4, [pc, #48]	; (8ff8 <lv_draw_label+0xe4c>)
    8fc8:	47a0      	blx	r4
    8fca:	e797      	b.n	8efc <lv_draw_label+0xd50>
    8fcc:	20002bb4 	.word	0x20002bb4
    8fd0:	20002bb0 	.word	0x20002bb0
    8fd4:	20002ab0 	.word	0x20002ab0
    8fd8:	00010e59 	.word	0x00010e59
    8fdc:	0000a659 	.word	0x0000a659
    8fe0:	0000a5bd 	.word	0x0000a5bd
    8fe4:	00010fe5 	.word	0x00010fe5
    8fe8:	00005c05 	.word	0x00005c05
    8fec:	00010b6d 	.word	0x00010b6d
    8ff0:	00011761 	.word	0x00011761
    8ff4:	20000054 	.word	0x20000054
    8ff8:	000090c9 	.word	0x000090c9
            p1.x = pos_x_start;
    8ffc:	a83a      	add	r0, sp, #232	; 0xe8
    8ffe:	466b      	mov	r3, sp
    9000:	227c      	movs	r2, #124	; 0x7c
    9002:	189b      	adds	r3, r3, r2
    9004:	881b      	ldrh	r3, [r3, #0]
    9006:	8003      	strh	r3, [r0, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line + line_dsc.width / 2 + 1;
    9008:	6871      	ldr	r1, [r6, #4]
    900a:	ab55      	add	r3, sp, #340	; 0x154
    900c:	2202      	movs	r2, #2
    900e:	5e9c      	ldrsh	r4, [r3, r2]
    9010:	0fe2      	lsrs	r2, r4, #31
    9012:	1912      	adds	r2, r2, r4
    9014:	1052      	asrs	r2, r2, #1
    9016:	3201      	adds	r2, #1
    9018:	890c      	ldrh	r4, [r1, #8]
    901a:	1912      	adds	r2, r2, r4
    901c:	8949      	ldrh	r1, [r1, #10]
    901e:	1a52      	subs	r2, r2, r1
    9020:	9914      	ldr	r1, [sp, #80]	; 0x50
    9022:	468c      	mov	ip, r1
    9024:	4462      	add	r2, ip
    9026:	b212      	sxth	r2, r2
    9028:	8042      	strh	r2, [r0, #2]
            p2.x = pos.x;
    902a:	a93c      	add	r1, sp, #240	; 0xf0
    902c:	4654      	mov	r4, sl
    902e:	800c      	strh	r4, [r1, #0]
            p2.y = p1.y;
    9030:	804a      	strh	r2, [r1, #2]
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    9032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9034:	4c16      	ldr	r4, [pc, #88]	; (9090 <lv_draw_label+0xee4>)
    9036:	47a0      	blx	r4
    9038:	e764      	b.n	8f04 <lv_draw_label+0xd58>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    903a:	210c      	movs	r1, #12
    903c:	5e73      	ldrsh	r3, [r6, r1]
    903e:	9200      	str	r2, [sp, #0]
    9040:	9a07      	ldr	r2, [sp, #28]
    9042:	0001      	movs	r1, r0
    9044:	0038      	movs	r0, r7
    9046:	4f13      	ldr	r7, [pc, #76]	; (9094 <lv_draw_label+0xee8>)
    9048:	47b8      	blx	r7
    904a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    904c:	8893      	ldrh	r3, [r2, #4]
    904e:	3301      	adds	r3, #1
    9050:	8812      	ldrh	r2, [r2, #0]
    9052:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
    9054:	b21b      	sxth	r3, r3
    9056:	1a18      	subs	r0, r3, r0
    9058:	0fc3      	lsrs	r3, r0, #31
    905a:	1818      	adds	r0, r3, r0
    905c:	1040      	asrs	r0, r0, #1
    905e:	1945      	adds	r5, r0, r5
    9060:	b22d      	sxth	r5, r5
    9062:	e768      	b.n	8f36 <lv_draw_label+0xd8a>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    9064:	210c      	movs	r1, #12
    9066:	5e73      	ldrsh	r3, [r6, r1]
    9068:	9200      	str	r2, [sp, #0]
    906a:	9a07      	ldr	r2, [sp, #28]
    906c:	0001      	movs	r1, r0
    906e:	0038      	movs	r0, r7
    9070:	4f08      	ldr	r7, [pc, #32]	; (9094 <lv_draw_label+0xee8>)
    9072:	47b8      	blx	r7
    9074:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9076:	8893      	ldrh	r3, [r2, #4]
    9078:	3301      	adds	r3, #1
    907a:	8812      	ldrh	r2, [r2, #0]
    907c:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
    907e:	b21b      	sxth	r3, r3
    9080:	1a18      	subs	r0, r3, r0
    9082:	1945      	adds	r5, r0, r5
    9084:	b22d      	sxth	r5, r5
    9086:	e756      	b.n	8f36 <lv_draw_label+0xd8a>
                        cmd_state = CMD_STATE_WAIT;
    9088:	2300      	movs	r3, #0
    908a:	9309      	str	r3, [sp, #36]	; 0x24
    908c:	f7ff f9fb 	bl	8486 <lv_draw_label+0x2da>
    9090:	000090c9 	.word	0x000090c9
    9094:	000119d9 	.word	0x000119d9

00009098 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
    9098:	b510      	push	{r4, lr}
    909a:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    909c:	210a      	movs	r1, #10
    909e:	4b08      	ldr	r3, [pc, #32]	; (90c0 <lv_draw_line_dsc_init+0x28>)
    90a0:	4798      	blx	r3
    dsc->width = 1;
    90a2:	2301      	movs	r3, #1
    90a4:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
    90a6:	33fe      	adds	r3, #254	; 0xfe
    90a8:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    90aa:	7823      	ldrb	r3, [r4, #0]
    90ac:	221f      	movs	r2, #31
    90ae:	4393      	bics	r3, r2
    90b0:	7023      	strb	r3, [r4, #0]
    90b2:	8823      	ldrh	r3, [r4, #0]
    90b4:	4a03      	ldr	r2, [pc, #12]	; (90c4 <lv_draw_line_dsc_init+0x2c>)
    90b6:	4013      	ands	r3, r2
    90b8:	8023      	strh	r3, [r4, #0]
    90ba:	2300      	movs	r3, #0
    90bc:	7063      	strb	r3, [r4, #1]
}
    90be:	bd10      	pop	{r4, pc}
    90c0:	00010fe5 	.word	0x00010fe5
    90c4:	fffff81f 	.word	0xfffff81f

000090c8 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        lv_draw_line_dsc_t * dsc)
{
    90c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ca:	46de      	mov	lr, fp
    90cc:	4657      	mov	r7, sl
    90ce:	464e      	mov	r6, r9
    90d0:	4645      	mov	r5, r8
    90d2:	b5e0      	push	{r5, r6, r7, lr}
    90d4:	b0cb      	sub	sp, #300	; 0x12c
    90d6:	9005      	str	r0, [sp, #20]
    90d8:	000e      	movs	r6, r1
    90da:	9106      	str	r1, [sp, #24]
    90dc:	9207      	str	r2, [sp, #28]
    90de:	001c      	movs	r4, r3
    if(dsc->width == 0) return;
    90e0:	2202      	movs	r2, #2
    90e2:	5e9b      	ldrsh	r3, [r3, r2]
    90e4:	2b00      	cmp	r3, #0
    90e6:	d101      	bne.n	90ec <lv_draw_line+0x24>
    90e8:	f000 fc46 	bl	9978 <lv_draw_line+0x8b0>
    if(dsc->opa <= LV_OPA_MIN) return;
    90ec:	7a22      	ldrb	r2, [r4, #8]
    90ee:	2a05      	cmp	r2, #5
    90f0:	d801      	bhi.n	90f6 <lv_draw_line+0x2e>
    90f2:	f000 fc41 	bl	9978 <lv_draw_line+0x8b0>

    if(point1->x == point2->x && point1->y == point2->y) return;
    90f6:	0002      	movs	r2, r0
    90f8:	2000      	movs	r0, #0
    90fa:	5e11      	ldrsh	r1, [r2, r0]
    90fc:	2500      	movs	r5, #0
    90fe:	5f70      	ldrsh	r0, [r6, r5]
    9100:	4281      	cmp	r1, r0
    9102:	d100      	bne.n	9106 <lv_draw_line+0x3e>
    9104:	e12b      	b.n	935e <lv_draw_line+0x296>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
    9106:	0fda      	lsrs	r2, r3, #31
    9108:	18d3      	adds	r3, r2, r3
    910a:	105b      	asrs	r3, r3, #1
    910c:	b29b      	uxth	r3, r3
    910e:	1c0a      	adds	r2, r1, #0
    9110:	4281      	cmp	r1, r0
    9112:	dd00      	ble.n	9116 <lv_draw_line+0x4e>
    9114:	1c02      	adds	r2, r0, #0
    9116:	1ad2      	subs	r2, r2, r3
    9118:	ad48      	add	r5, sp, #288	; 0x120
    911a:	802a      	strh	r2, [r5, #0]
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
    911c:	1c0a      	adds	r2, r1, #0
    911e:	4281      	cmp	r1, r0
    9120:	da00      	bge.n	9124 <lv_draw_line+0x5c>
    9122:	1c02      	adds	r2, r0, #0
    9124:	189a      	adds	r2, r3, r2
    9126:	a948      	add	r1, sp, #288	; 0x120
    9128:	808a      	strh	r2, [r1, #4]
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
    912a:	9a06      	ldr	r2, [sp, #24]
    912c:	2102      	movs	r1, #2
    912e:	5e52      	ldrsh	r2, [r2, r1]
    9130:	9905      	ldr	r1, [sp, #20]
    9132:	2002      	movs	r0, #2
    9134:	5e08      	ldrsh	r0, [r1, r0]
    9136:	1c11      	adds	r1, r2, #0
    9138:	4282      	cmp	r2, r0
    913a:	dd00      	ble.n	913e <lv_draw_line+0x76>
    913c:	1c01      	adds	r1, r0, #0
    913e:	1ac9      	subs	r1, r1, r3
    9140:	ad48      	add	r5, sp, #288	; 0x120
    9142:	8069      	strh	r1, [r5, #2]
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
    9144:	1c11      	adds	r1, r2, #0
    9146:	4282      	cmp	r2, r0
    9148:	da00      	bge.n	914c <lv_draw_line+0x84>
    914a:	1c01      	adds	r1, r0, #0
    914c:	185b      	adds	r3, r3, r1
    914e:	aa48      	add	r2, sp, #288	; 0x120
    9150:	80d3      	strh	r3, [r2, #6]

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
    9152:	9a07      	ldr	r2, [sp, #28]
    9154:	a948      	add	r1, sp, #288	; 0x120
    9156:	0008      	movs	r0, r1
    9158:	4bd5      	ldr	r3, [pc, #852]	; (94b0 <lv_draw_line+0x3e8>)
    915a:	4798      	blx	r3
    if(!is_common) return;
    915c:	2800      	cmp	r0, #0
    915e:	d101      	bne.n	9164 <lv_draw_line+0x9c>
    9160:	f000 fc0a 	bl	9978 <lv_draw_line+0x8b0>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
    9164:	9b05      	ldr	r3, [sp, #20]
    9166:	2602      	movs	r6, #2
    9168:	5f9e      	ldrsh	r6, [r3, r6]
    916a:	9b06      	ldr	r3, [sp, #24]
    916c:	2502      	movs	r5, #2
    916e:	5f5d      	ldrsh	r5, [r3, r5]
    9170:	42ae      	cmp	r6, r5
    9172:	d100      	bne.n	9176 <lv_draw_line+0xae>
    9174:	e0fc      	b.n	9370 <lv_draw_line+0x2a8>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
    9176:	9b05      	ldr	r3, [sp, #20]
    9178:	2200      	movs	r2, #0
    917a:	5e9a      	ldrsh	r2, [r3, r2]
    917c:	0011      	movs	r1, r2
    917e:	9208      	str	r2, [sp, #32]
    9180:	9b06      	ldr	r3, [sp, #24]
    9182:	2200      	movs	r2, #0
    9184:	5e9b      	ldrsh	r3, [r3, r2]
    9186:	469a      	mov	sl, r3
    9188:	4551      	cmp	r1, sl
    918a:	d100      	bne.n	918e <lv_draw_line+0xc6>
    918c:	e206      	b.n	959c <lv_draw_line+0x4d4>
                                                 lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
    918e:	42ae      	cmp	r6, r5
    9190:	db06      	blt.n	91a0 <lv_draw_line+0xd8>
    9192:	0033      	movs	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
    9194:	002e      	movs	r6, r5
        p2.y = point1->y;
    9196:	001d      	movs	r5, r3
    if(point1->y < point2->y) {
    9198:	9b08      	ldr	r3, [sp, #32]
        p1.x = point2->x;
    919a:	4652      	mov	r2, sl
    919c:	9208      	str	r2, [sp, #32]
        p2.x = point1->x;
    919e:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
    91a0:	4653      	mov	r3, sl
    91a2:	9a08      	ldr	r2, [sp, #32]
    91a4:	1a9b      	subs	r3, r3, r2
    91a6:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
    91a8:	1baa      	subs	r2, r5, r6
    91aa:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
    91ac:	17d9      	asrs	r1, r3, #31
    91ae:	185b      	adds	r3, r3, r1
    91b0:	404b      	eors	r3, r1
    91b2:	4699      	mov	r9, r3
    91b4:	17d1      	asrs	r1, r2, #31
    91b6:	1853      	adds	r3, r2, r1
    91b8:	404b      	eors	r3, r1
    91ba:	469b      	mov	fp, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
    91bc:	2202      	movs	r2, #2
    91be:	5ea3      	ldrsh	r3, [r4, r2]
    91c0:	4698      	mov	r8, r3
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    91c2:	45d9      	cmp	r9, fp
    91c4:	dc00      	bgt.n	91c8 <lv_draw_line+0x100>
    91c6:	e2d0      	b.n	976a <lv_draw_line+0x6a2>
    91c8:	465b      	mov	r3, fp
    91ca:	0158      	lsls	r0, r3, #5
    91cc:	4649      	mov	r1, r9
    91ce:	4bb9      	ldr	r3, [pc, #740]	; (94b4 <lv_draw_line+0x3ec>)
    91d0:	4798      	blx	r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
    91d2:	4bb9      	ldr	r3, [pc, #740]	; (94b8 <lv_draw_line+0x3f0>)
    91d4:	5c1b      	ldrb	r3, [r3, r0]
    91d6:	4642      	mov	r2, r8
    91d8:	435a      	muls	r2, r3
    91da:	0013      	movs	r3, r2
    91dc:	223f      	movs	r2, #63	; 0x3f
    91de:	4690      	mov	r8, r2
    91e0:	4498      	add	r8, r3
    91e2:	4643      	mov	r3, r8
    91e4:	11db      	asrs	r3, r3, #7
    91e6:	001f      	movs	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
    91e8:	b29b      	uxth	r3, r3
    91ea:	4652      	mov	r2, sl
    91ec:	9808      	ldr	r0, [sp, #32]
    91ee:	4582      	cmp	sl, r0
    91f0:	dd00      	ble.n	91f4 <lv_draw_line+0x12c>
    91f2:	1c02      	adds	r2, r0, #0
    91f4:	1ad2      	subs	r2, r2, r3
    91f6:	a90e      	add	r1, sp, #56	; 0x38
    91f8:	800a      	strh	r2, [r1, #0]
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
    91fa:	4652      	mov	r2, sl
    91fc:	9808      	ldr	r0, [sp, #32]
    91fe:	4582      	cmp	sl, r0
    9200:	da00      	bge.n	9204 <lv_draw_line+0x13c>
    9202:	1c02      	adds	r2, r0, #0
    9204:	189a      	adds	r2, r3, r2
    9206:	a90e      	add	r1, sp, #56	; 0x38
    9208:	808a      	strh	r2, [r1, #4]
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
    920a:	1c2a      	adds	r2, r5, #0
    920c:	42b5      	cmp	r5, r6
    920e:	dd00      	ble.n	9212 <lv_draw_line+0x14a>
    9210:	1c32      	adds	r2, r6, #0
    9212:	1ad2      	subs	r2, r2, r3
    9214:	a90e      	add	r1, sp, #56	; 0x38
    9216:	804a      	strh	r2, [r1, #2]
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
    9218:	1c2a      	adds	r2, r5, #0
    921a:	42b5      	cmp	r5, r6
    921c:	da00      	bge.n	9220 <lv_draw_line+0x158>
    921e:	1c32      	adds	r2, r6, #0
    9220:	189b      	adds	r3, r3, r2
    9222:	aa0e      	add	r2, sp, #56	; 0x38
    9224:	80d3      	strh	r3, [r2, #6]

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
    9226:	aa48      	add	r2, sp, #288	; 0x120
    9228:	a90e      	add	r1, sp, #56	; 0x38
    922a:	0008      	movs	r0, r1
    922c:	4ba0      	ldr	r3, [pc, #640]	; (94b0 <lv_draw_line+0x3e8>)
    922e:	4798      	blx	r3
    if(is_common == false) return;
    9230:	2800      	cmp	r0, #0
    9232:	d100      	bne.n	9236 <lv_draw_line+0x16e>
    9234:	e39c      	b.n	9970 <lv_draw_line+0x8a8>
    int32_t w_half0 = w >> 1;
    9236:	4643      	mov	r3, r8
    9238:	121b      	asrs	r3, r3, #8
    923a:	4698      	mov	r8, r3
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    923c:	2301      	movs	r3, #1
    923e:	403b      	ands	r3, r7
    9240:	4443      	add	r3, r8
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
    9244:	45d9      	cmp	r9, fp
    9246:	dc00      	bgt.n	924a <lv_draw_line+0x182>
    9248:	e2ba      	b.n	97c0 <lv_draw_line+0x6f8>
        if(xdiff > 0) {
    924a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    924c:	2a00      	cmp	r2, #0
    924e:	dc00      	bgt.n	9252 <lv_draw_line+0x18a>
    9250:	e291      	b.n	9776 <lv_draw_line+0x6ae>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    9252:	b2b2      	uxth	r2, r6
    9254:	4641      	mov	r1, r8
    9256:	466b      	mov	r3, sp
    9258:	8619      	strh	r1, [r3, #48]	; 0x30
    925a:	b28b      	uxth	r3, r1
    925c:	b2a9      	uxth	r1, r5
    925e:	4693      	mov	fp, r2
    9260:	1ad2      	subs	r2, r2, r3
    9262:	b212      	sxth	r2, r2
    9264:	2000      	movs	r0, #0
    9266:	9001      	str	r0, [sp, #4]
    9268:	4689      	mov	r9, r1
    926a:	1acb      	subs	r3, r1, r3
    926c:	b21b      	sxth	r3, r3
    926e:	9300      	str	r3, [sp, #0]
    9270:	4653      	mov	r3, sl
    9272:	9908      	ldr	r1, [sp, #32]
    9274:	a812      	add	r0, sp, #72	; 0x48
    9276:	4f91      	ldr	r7, [pc, #580]	; (94bc <lv_draw_line+0x3f4>)
    9278:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    927a:	466b      	mov	r3, sp
    927c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    927e:	465a      	mov	r2, fp
    9280:	18d2      	adds	r2, r2, r3
    9282:	b212      	sxth	r2, r2
    9284:	2101      	movs	r1, #1
    9286:	9101      	str	r1, [sp, #4]
    9288:	444b      	add	r3, r9
    928a:	b21b      	sxth	r3, r3
    928c:	9300      	str	r3, [sp, #0]
    928e:	4653      	mov	r3, sl
    9290:	9908      	ldr	r1, [sp, #32]
    9292:	a81d      	add	r0, sp, #116	; 0x74
    9294:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
    9296:	2100      	movs	r1, #0
    9298:	a812      	add	r0, sp, #72	; 0x48
    929a:	4b89      	ldr	r3, [pc, #548]	; (94c0 <lv_draw_line+0x3f8>)
    929c:	4698      	mov	r8, r3
    929e:	4798      	blx	r3
    92a0:	900b      	str	r0, [sp, #44]	; 0x2c
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
    92a2:	2100      	movs	r1, #0
    92a4:	a81d      	add	r0, sp, #116	; 0x74
    92a6:	47c0      	blx	r8
    92a8:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
    92aa:	7a63      	ldrb	r3, [r4, #9]
    92ac:	06db      	lsls	r3, r3, #27
    92ae:	d400      	bmi.n	92b2 <lv_draw_line+0x1ea>
    92b0:	e2ac      	b.n	980c <lv_draw_line+0x744>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
    92b2:	2301      	movs	r3, #1
    92b4:	425b      	negs	r3, r3
    92b6:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
    92b8:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    92ba:	4b82      	ldr	r3, [pc, #520]	; (94c4 <lv_draw_line+0x3fc>)
    92bc:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    92be:	4b82      	ldr	r3, [pc, #520]	; (94c8 <lv_draw_line+0x400>)
    92c0:	4798      	blx	r3
    92c2:	4681      	mov	r9, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    92c4:	8a02      	ldrh	r2, [r0, #16]
    92c6:	a80e      	add	r0, sp, #56	; 0x38
    92c8:	8805      	ldrh	r5, [r0, #0]
    92ca:	1aad      	subs	r5, r5, r2
    92cc:	b2ab      	uxth	r3, r5
    92ce:	8003      	strh	r3, [r0, #0]
    draw_area.y1 -= disp_area->y1;
    92d0:	4649      	mov	r1, r9
    92d2:	8a49      	ldrh	r1, [r1, #18]
    92d4:	8845      	ldrh	r5, [r0, #2]
    92d6:	1a6d      	subs	r5, r5, r1
    92d8:	8045      	strh	r5, [r0, #2]
    draw_area.x2 -= disp_area->x1;
    92da:	8885      	ldrh	r5, [r0, #4]
    92dc:	1aad      	subs	r5, r5, r2
    92de:	b2ad      	uxth	r5, r5
    92e0:	8085      	strh	r5, [r0, #4]
    draw_area.y2 -= disp_area->y1;
    92e2:	88c2      	ldrh	r2, [r0, #6]
    92e4:	1a52      	subs	r2, r2, r1
    92e6:	80c2      	strh	r2, [r0, #6]
    92e8:	3501      	adds	r5, #1
    92ea:	1aed      	subs	r5, r5, r3
    92ec:	b22d      	sxth	r5, r5
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    92ee:	4b77      	ldr	r3, [pc, #476]	; (94cc <lv_draw_line+0x404>)
    92f0:	4798      	blx	r3
    92f2:	23e0      	movs	r3, #224	; 0xe0
    92f4:	33ff      	adds	r3, #255	; 0xff
    92f6:	4298      	cmp	r0, r3
    92f8:	d800      	bhi.n	92fc <lv_draw_line+0x234>
    92fa:	e2b3      	b.n	9864 <lv_draw_line+0x79c>
    92fc:	23f0      	movs	r3, #240	; 0xf0
    92fe:	005b      	lsls	r3, r3, #1
    9300:	469b      	mov	fp, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9302:	4658      	mov	r0, fp
    9304:	4b72      	ldr	r3, [pc, #456]	; (94d0 <lv_draw_line+0x408>)
    9306:	4798      	blx	r3
    9308:	4680      	mov	r8, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
    930a:	464b      	mov	r3, r9
    930c:	8a1b      	ldrh	r3, [r3, #16]
    930e:	af0e      	add	r7, sp, #56	; 0x38
    9310:	883a      	ldrh	r2, [r7, #0]
    9312:	189a      	adds	r2, r3, r2
    9314:	b212      	sxth	r2, r2
    9316:	0011      	movs	r1, r2
    9318:	9209      	str	r2, [sp, #36]	; 0x24
    931a:	aa10      	add	r2, sp, #64	; 0x40
    931c:	8011      	strh	r1, [r2, #0]
    fill_area.x2 = draw_area.x2 + disp_area->x1;
    931e:	88b9      	ldrh	r1, [r7, #4]
    9320:	185b      	adds	r3, r3, r1
    9322:	8093      	strh	r3, [r2, #4]
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    9324:	887b      	ldrh	r3, [r7, #2]
    9326:	4649      	mov	r1, r9
    9328:	8a49      	ldrh	r1, [r1, #18]
    932a:	185b      	adds	r3, r3, r1
    932c:	b21b      	sxth	r3, r3
    932e:	8053      	strh	r3, [r2, #2]
    fill_area.y2 = fill_area.y1;
    9330:	80d3      	strh	r3, [r2, #6]

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
    9332:	4659      	mov	r1, fp
    9334:	4b67      	ldr	r3, [pc, #412]	; (94d4 <lv_draw_line+0x40c>)
    9336:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    9338:	464b      	mov	r3, r9
    933a:	2212      	movs	r2, #18
    933c:	5e9a      	ldrsh	r2, [r3, r2]
    933e:	2302      	movs	r3, #2
    9340:	5efe      	ldrsh	r6, [r7, r3]
    9342:	18b6      	adds	r6, r6, r2
    9344:	2106      	movs	r1, #6
    9346:	5e7b      	ldrsh	r3, [r7, r1]
    9348:	189b      	adds	r3, r3, r2
    934a:	429e      	cmp	r6, r3
    934c:	dd00      	ble.n	9350 <lv_draw_line+0x288>
    934e:	e2ec      	b.n	992a <lv_draw_line+0x862>
    9350:	2700      	movs	r7, #0

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
    9352:	4b61      	ldr	r3, [pc, #388]	; (94d8 <lv_draw_line+0x410>)
    9354:	469a      	mov	sl, r3
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
    9356:	0023      	movs	r3, r4
    9358:	4644      	mov	r4, r8
    935a:	4698      	mov	r8, r3
    935c:	e2d0      	b.n	9900 <lv_draw_line+0x838>
    if(point1->x == point2->x && point1->y == point2->y) return;
    935e:	2502      	movs	r5, #2
    9360:	5f55      	ldrsh	r5, [r2, r5]
    9362:	0032      	movs	r2, r6
    9364:	2602      	movs	r6, #2
    9366:	5f92      	ldrsh	r2, [r2, r6]
    9368:	4295      	cmp	r5, r2
    936a:	d000      	beq.n	936e <lv_draw_line+0x2a6>
    936c:	e6cb      	b.n	9106 <lv_draw_line+0x3e>
    936e:	e303      	b.n	9978 <lv_draw_line+0x8b0>
    lv_opa_t opa = dsc->opa;
    9370:	7a23      	ldrb	r3, [r4, #8]
    9372:	4698      	mov	r8, r3
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    9374:	4b53      	ldr	r3, [pc, #332]	; (94c4 <lv_draw_line+0x3fc>)
    9376:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    9378:	4b53      	ldr	r3, [pc, #332]	; (94c8 <lv_draw_line+0x400>)
    937a:	4798      	blx	r3
    937c:	4681      	mov	r9, r0
    int32_t w = dsc->width - 1;
    937e:	2202      	movs	r2, #2
    9380:	5ea3      	ldrsh	r3, [r4, r2]
    9382:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
    9384:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    9386:	2501      	movs	r5, #1
    9388:	401d      	ands	r5, r3
    938a:	19ad      	adds	r5, r5, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    938c:	2306      	movs	r3, #6
    938e:	5ee2      	ldrsh	r2, [r4, r3]
    9390:	2300      	movs	r3, #0
    9392:	2a00      	cmp	r2, #0
    9394:	d004      	beq.n	93a0 <lv_draw_line+0x2d8>
    9396:	2204      	movs	r2, #4
    9398:	5ea3      	ldrsh	r3, [r4, r2]
    939a:	1e5a      	subs	r2, r3, #1
    939c:	4193      	sbcs	r3, r2
    939e:	b2db      	uxtb	r3, r3
    93a0:	001f      	movs	r7, r3
    93a2:	9309      	str	r3, [sp, #36]	; 0x24
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    93a4:	4b4d      	ldr	r3, [pc, #308]	; (94dc <lv_draw_line+0x414>)
    93a6:	4798      	blx	r3
    93a8:	2100      	movs	r1, #0
    93aa:	2800      	cmp	r0, #0
    93ac:	d101      	bne.n	93b2 <lv_draw_line+0x2ea>
    else if(dashed) simple_mode = false;
    93ae:	3101      	adds	r1, #1
    93b0:	4079      	eors	r1, r7
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
    93b2:	9b06      	ldr	r3, [sp, #24]
    93b4:	2200      	movs	r2, #0
    93b6:	5e9b      	ldrsh	r3, [r3, r2]
    93b8:	9a05      	ldr	r2, [sp, #20]
    93ba:	2000      	movs	r0, #0
    93bc:	5e10      	ldrsh	r0, [r2, r0]
    93be:	1c1a      	adds	r2, r3, #0
    93c0:	4283      	cmp	r3, r0
    93c2:	dd00      	ble.n	93c6 <lv_draw_line+0x2fe>
    93c4:	1c02      	adds	r2, r0, #0
    93c6:	af28      	add	r7, sp, #160	; 0xa0
    93c8:	803a      	strh	r2, [r7, #0]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
    93ca:	1c1a      	adds	r2, r3, #0
    93cc:	4283      	cmp	r3, r0
    93ce:	da00      	bge.n	93d2 <lv_draw_line+0x30a>
    93d0:	1c02      	adds	r2, r0, #0
    93d2:	3a01      	subs	r2, #1
    93d4:	ab28      	add	r3, sp, #160	; 0xa0
    93d6:	809a      	strh	r2, [r3, #4]
    draw_area.y1 = point1->y - w_half1;
    93d8:	9b05      	ldr	r3, [sp, #20]
    93da:	885b      	ldrh	r3, [r3, #2]
    93dc:	aa28      	add	r2, sp, #160	; 0xa0
    93de:	1b5d      	subs	r5, r3, r5
    93e0:	8055      	strh	r5, [r2, #2]
    draw_area.y2 = point1->y + w_half0;
    93e2:	199e      	adds	r6, r3, r6
    93e4:	80d6      	strh	r6, [r2, #6]
    if(simple_mode) {
    93e6:	2900      	cmp	r1, #0
    93e8:	d00e      	beq.n	9408 <lv_draw_line+0x340>
        _lv_blend_fill(clip, &draw_area,
    93ea:	8822      	ldrh	r2, [r4, #0]
                       dsc->blend_mode);
    93ec:	7a63      	ldrb	r3, [r4, #9]
    93ee:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(clip, &draw_area,
    93f0:	0f9b      	lsrs	r3, r3, #30
    93f2:	9302      	str	r3, [sp, #8]
    93f4:	4643      	mov	r3, r8
    93f6:	9301      	str	r3, [sp, #4]
    93f8:	2301      	movs	r3, #1
    93fa:	9300      	str	r3, [sp, #0]
    93fc:	2300      	movs	r3, #0
    93fe:	a928      	add	r1, sp, #160	; 0xa0
    9400:	a848      	add	r0, sp, #288	; 0x120
    9402:	4d37      	ldr	r5, [pc, #220]	; (94e0 <lv_draw_line+0x418>)
    9404:	47a8      	blx	r5
    9406:	e2b3      	b.n	9970 <lv_draw_line+0x8a8>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    9408:	aa28      	add	r2, sp, #160	; 0xa0
    940a:	a948      	add	r1, sp, #288	; 0x120
    940c:	0010      	movs	r0, r2
    940e:	4b28      	ldr	r3, [pc, #160]	; (94b0 <lv_draw_line+0x3e8>)
    9410:	4798      	blx	r3
        if(!is_common) return;
    9412:	2800      	cmp	r0, #0
    9414:	d100      	bne.n	9418 <lv_draw_line+0x350>
    9416:	e2ab      	b.n	9970 <lv_draw_line+0x8a8>
        draw_area.x1 -= disp_area->x1;
    9418:	aa28      	add	r2, sp, #160	; 0xa0
    941a:	2300      	movs	r3, #0
    941c:	5ed7      	ldrsh	r7, [r2, r3]
    941e:	464b      	mov	r3, r9
    9420:	2110      	movs	r1, #16
    9422:	5e5b      	ldrsh	r3, [r3, r1]
    9424:	469b      	mov	fp, r3
    9426:	4669      	mov	r1, sp
    9428:	840b      	strh	r3, [r1, #32]
    942a:	8c0b      	ldrh	r3, [r1, #32]
    942c:	1af9      	subs	r1, r7, r3
    942e:	b289      	uxth	r1, r1
    9430:	4688      	mov	r8, r1
    9432:	b209      	sxth	r1, r1
    9434:	468a      	mov	sl, r1
    9436:	8011      	strh	r1, [r2, #0]
        draw_area.y1 -= disp_area->y1;
    9438:	2002      	movs	r0, #2
    943a:	5e11      	ldrsh	r1, [r2, r0]
    943c:	464d      	mov	r5, r9
    943e:	8a6d      	ldrh	r5, [r5, #18]
    9440:	46ac      	mov	ip, r5
    9442:	1b4d      	subs	r5, r1, r5
    9444:	8055      	strh	r5, [r2, #2]
        draw_area.x2 -= disp_area->x1;
    9446:	2004      	movs	r0, #4
    9448:	5e16      	ldrsh	r6, [r2, r0]
    944a:	1af3      	subs	r3, r6, r3
    944c:	b29b      	uxth	r3, r3
    944e:	8093      	strh	r3, [r2, #4]
        draw_area.y2 -= disp_area->y1;
    9450:	88d5      	ldrh	r5, [r2, #6]
    9452:	4660      	mov	r0, ip
    9454:	1a2d      	subs	r5, r5, r0
    9456:	80d5      	strh	r5, [r2, #6]
    9458:	3301      	adds	r3, #1
    945a:	4642      	mov	r2, r8
    945c:	1a9b      	subs	r3, r3, r2
    945e:	b21b      	sxth	r3, r3
    9460:	930b      	str	r3, [sp, #44]	; 0x2c
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    9462:	ab33      	add	r3, sp, #204	; 0xcc
    9464:	801f      	strh	r7, [r3, #0]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    9466:	809e      	strh	r6, [r3, #4]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    9468:	8059      	strh	r1, [r3, #2]
        fill_area.y2 = fill_area.y1;
    946a:	80d9      	strh	r1, [r3, #6]
        if(dashed) {
    946c:	2100      	movs	r1, #0
    946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9470:	2b00      	cmp	r3, #0
    9472:	d008      	beq.n	9486 <lv_draw_line+0x3be>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    9474:	4650      	mov	r0, sl
    9476:	4458      	add	r0, fp
    9478:	2306      	movs	r3, #6
    947a:	5ee1      	ldrsh	r1, [r4, r3]
    947c:	2204      	movs	r2, #4
    947e:	5ea3      	ldrsh	r3, [r4, r2]
    9480:	18c9      	adds	r1, r1, r3
    9482:	4b18      	ldr	r3, [pc, #96]	; (94e4 <lv_draw_line+0x41c>)
    9484:	4798      	blx	r3
    9486:	b20b      	sxth	r3, r1
    9488:	930c      	str	r3, [sp, #48]	; 0x30
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    948a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    948c:	0007      	movs	r7, r0
    948e:	4b10      	ldr	r3, [pc, #64]	; (94d0 <lv_draw_line+0x408>)
    9490:	4798      	blx	r3
    9492:	9008      	str	r0, [sp, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    9494:	ab28      	add	r3, sp, #160	; 0xa0
    9496:	2202      	movs	r2, #2
    9498:	5e9e      	ldrsh	r6, [r3, r2]
    949a:	2206      	movs	r2, #6
    949c:	5e9b      	ldrsh	r3, [r3, r2]
    949e:	42b3      	cmp	r3, r6
    94a0:	da00      	bge.n	94a4 <lv_draw_line+0x3dc>
    94a2:	e077      	b.n	9594 <lv_draw_line+0x4cc>
            _lv_memset_ff(mask_buf, draw_area_w);
    94a4:	4b0b      	ldr	r3, [pc, #44]	; (94d4 <lv_draw_line+0x40c>)
    94a6:	469b      	mov	fp, r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    94a8:	4b0b      	ldr	r3, [pc, #44]	; (94d8 <lv_draw_line+0x410>)
    94aa:	469a      	mov	sl, r3
    94ac:	970a      	str	r7, [sp, #40]	; 0x28
    94ae:	e050      	b.n	9552 <lv_draw_line+0x48a>
    94b0:	0000fba7 	.word	0x0000fba7
    94b4:	00017a75 	.word	0x00017a75
    94b8:	000189f4 	.word	0x000189f4
    94bc:	0000a67d 	.word	0x0000a67d
    94c0:	0000a585 	.word	0x0000a585
    94c4:	00004349 	.word	0x00004349
    94c8:	0000f6a1 	.word	0x0000f6a1
    94cc:	0000fb8b 	.word	0x0000fb8b
    94d0:	00010e59 	.word	0x00010e59
    94d4:	00011089 	.word	0x00011089
    94d8:	0000a5bd 	.word	0x0000a5bd
    94dc:	0000a659 	.word	0x0000a659
    94e0:	00005c05 	.word	0x00005c05
    94e4:	00017c41 	.word	0x00017c41
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    94e8:	2606      	movs	r6, #6
    94ea:	5fa5      	ldrsh	r5, [r4, r6]
    94ec:	18ed      	adds	r5, r5, r3
                            dash_cnt = 0;
    94ee:	000b      	movs	r3, r1
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    94f0:	42aa      	cmp	r2, r5
    94f2:	da02      	bge.n	94fa <lv_draw_line+0x432>
                            mask_buf[i] = 0x00;
    94f4:	9b08      	ldr	r3, [sp, #32]
    94f6:	5419      	strb	r1, [r3, r0]
    94f8:	0013      	movs	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    94fa:	3001      	adds	r0, #1
    94fc:	3301      	adds	r3, #1
    94fe:	b21a      	sxth	r2, r3
    9500:	4287      	cmp	r7, r0
    9502:	d907      	bls.n	9514 <lv_draw_line+0x44c>
                        if(dash_cnt <= dsc->dash_width) {
    9504:	2504      	movs	r5, #4
    9506:	5f63      	ldrsh	r3, [r4, r5]
    9508:	4293      	cmp	r3, r2
    950a:	dbed      	blt.n	94e8 <lv_draw_line+0x420>
                            int16_t diff = dsc->dash_width - dash_cnt;
    950c:	1a9a      	subs	r2, r3, r2
                            i += diff;
    950e:	b212      	sxth	r2, r2
    9510:	1880      	adds	r0, r0, r2
    9512:	e7f2      	b.n	94fa <lv_draw_line+0x432>
    9514:	970a      	str	r7, [sp, #40]	; 0x28
    9516:	4666      	mov	r6, ip
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    9518:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fill_area,
    951a:	8822      	ldrh	r2, [r4, #0]
    951c:	ad33      	add	r5, sp, #204	; 0xcc
                           dsc->blend_mode);
    951e:	7a63      	ldrb	r3, [r4, #9]
    9520:	079b      	lsls	r3, r3, #30
            _lv_blend_fill(clip, &fill_area,
    9522:	0f9b      	lsrs	r3, r3, #30
    9524:	9302      	str	r3, [sp, #8]
    9526:	7a23      	ldrb	r3, [r4, #8]
    9528:	9301      	str	r3, [sp, #4]
    952a:	9000      	str	r0, [sp, #0]
    952c:	9b08      	ldr	r3, [sp, #32]
    952e:	0029      	movs	r1, r5
    9530:	a848      	add	r0, sp, #288	; 0x120
    9532:	4fd1      	ldr	r7, [pc, #836]	; (9878 <lv_draw_line+0x7b0>)
    9534:	47b8      	blx	r7
            fill_area.y1++;
    9536:	886b      	ldrh	r3, [r5, #2]
    9538:	3301      	adds	r3, #1
    953a:	806b      	strh	r3, [r5, #2]
            fill_area.y2++;
    953c:	88eb      	ldrh	r3, [r5, #6]
    953e:	3301      	adds	r3, #1
    9540:	80eb      	strh	r3, [r5, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    9542:	3601      	adds	r6, #1
    9544:	ab0a      	add	r3, sp, #40	; 0x28
    9546:	227e      	movs	r2, #126	; 0x7e
    9548:	189b      	adds	r3, r3, r2
    954a:	2200      	movs	r2, #0
    954c:	5e9b      	ldrsh	r3, [r3, r2]
    954e:	429e      	cmp	r6, r3
    9550:	dc20      	bgt.n	9594 <lv_draw_line+0x4cc>
            _lv_memset_ff(mask_buf, draw_area_w);
    9552:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    9554:	0039      	movs	r1, r7
    9556:	9d08      	ldr	r5, [sp, #32]
    9558:	0028      	movs	r0, r5
    955a:	47d8      	blx	fp
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    955c:	464b      	mov	r3, r9
    955e:	8a5a      	ldrh	r2, [r3, #18]
    9560:	1992      	adds	r2, r2, r6
    9562:	b212      	sxth	r2, r2
    9564:	8a19      	ldrh	r1, [r3, #16]
    9566:	ab0a      	add	r3, sp, #40	; 0x28
    9568:	2078      	movs	r0, #120	; 0x78
    956a:	181b      	adds	r3, r3, r0
    956c:	881b      	ldrh	r3, [r3, #0]
    956e:	18c9      	adds	r1, r1, r3
    9570:	b209      	sxth	r1, r1
    9572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9574:	0028      	movs	r0, r5
    9576:	47d0      	blx	sl
            if(dashed) {
    9578:	9b09      	ldr	r3, [sp, #36]	; 0x24
    957a:	2b00      	cmp	r3, #0
    957c:	d0cd      	beq.n	951a <lv_draw_line+0x452>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    957e:	2800      	cmp	r0, #0
    9580:	d0cb      	beq.n	951a <lv_draw_line+0x452>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    9582:	2f00      	cmp	r7, #0
    9584:	d004      	beq.n	9590 <lv_draw_line+0x4c8>
    9586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9588:	2000      	movs	r0, #0
                            dash_cnt = 0;
    958a:	2100      	movs	r1, #0
    958c:	46b4      	mov	ip, r6
    958e:	e7b9      	b.n	9504 <lv_draw_line+0x43c>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    9590:	2002      	movs	r0, #2
    9592:	e7c2      	b.n	951a <lv_draw_line+0x452>
        _lv_mem_buf_release(mask_buf);
    9594:	9808      	ldr	r0, [sp, #32]
    9596:	4bb9      	ldr	r3, [pc, #740]	; (987c <lv_draw_line+0x7b4>)
    9598:	4798      	blx	r3
    959a:	e1e9      	b.n	9970 <lv_draw_line+0x8a8>
    lv_opa_t opa = dsc->opa;
    959c:	7a23      	ldrb	r3, [r4, #8]
    959e:	4698      	mov	r8, r3
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    95a0:	4bb7      	ldr	r3, [pc, #732]	; (9880 <lv_draw_line+0x7b8>)
    95a2:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    95a4:	4bb7      	ldr	r3, [pc, #732]	; (9884 <lv_draw_line+0x7bc>)
    95a6:	4798      	blx	r3
    95a8:	0007      	movs	r7, r0
    int32_t w = dsc->width - 1;
    95aa:	2202      	movs	r2, #2
    95ac:	5ea3      	ldrsh	r3, [r4, r2]
    95ae:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
    95b0:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    95b2:	2501      	movs	r5, #1
    95b4:	401d      	ands	r5, r3
    95b6:	19ad      	adds	r5, r5, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    95b8:	2306      	movs	r3, #6
    95ba:	5ee2      	ldrsh	r2, [r4, r3]
    95bc:	2300      	movs	r3, #0
    95be:	2a00      	cmp	r2, #0
    95c0:	d004      	beq.n	95cc <lv_draw_line+0x504>
    95c2:	2204      	movs	r2, #4
    95c4:	5ea3      	ldrsh	r3, [r4, r2]
    95c6:	1e5a      	subs	r2, r3, #1
    95c8:	4193      	sbcs	r3, r2
    95ca:	b2db      	uxtb	r3, r3
    95cc:	4699      	mov	r9, r3
    95ce:	930a      	str	r3, [sp, #40]	; 0x28
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    95d0:	4bad      	ldr	r3, [pc, #692]	; (9888 <lv_draw_line+0x7c0>)
    95d2:	4798      	blx	r3
    95d4:	2100      	movs	r1, #0
    95d6:	2800      	cmp	r0, #0
    95d8:	d102      	bne.n	95e0 <lv_draw_line+0x518>
    else if(dashed) simple_mode = false;
    95da:	3101      	adds	r1, #1
    95dc:	464b      	mov	r3, r9
    95de:	4059      	eors	r1, r3
    draw_area.x1 = point1->x - w_half1;
    95e0:	9805      	ldr	r0, [sp, #20]
    95e2:	8802      	ldrh	r2, [r0, #0]
    95e4:	ab28      	add	r3, sp, #160	; 0xa0
    95e6:	1b55      	subs	r5, r2, r5
    95e8:	801d      	strh	r5, [r3, #0]
    draw_area.x2 = point1->x + w_half0;
    95ea:	1996      	adds	r6, r2, r6
    95ec:	809e      	strh	r6, [r3, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    95ee:	9a06      	ldr	r2, [sp, #24]
    95f0:	2502      	movs	r5, #2
    95f2:	5f52      	ldrsh	r2, [r2, r5]
    95f4:	2502      	movs	r5, #2
    95f6:	5f45      	ldrsh	r5, [r0, r5]
    95f8:	1c10      	adds	r0, r2, #0
    95fa:	42aa      	cmp	r2, r5
    95fc:	dd00      	ble.n	9600 <lv_draw_line+0x538>
    95fe:	1c28      	adds	r0, r5, #0
    9600:	8058      	strh	r0, [r3, #2]
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
    9602:	1c13      	adds	r3, r2, #0
    9604:	42aa      	cmp	r2, r5
    9606:	da00      	bge.n	960a <lv_draw_line+0x542>
    9608:	1c2b      	adds	r3, r5, #0
    960a:	3b01      	subs	r3, #1
    960c:	aa28      	add	r2, sp, #160	; 0xa0
    960e:	80d3      	strh	r3, [r2, #6]
    if(simple_mode) {
    9610:	2900      	cmp	r1, #0
    9612:	d00e      	beq.n	9632 <lv_draw_line+0x56a>
        _lv_blend_fill(clip, &draw_area,
    9614:	8822      	ldrh	r2, [r4, #0]
                       dsc->blend_mode);
    9616:	7a63      	ldrb	r3, [r4, #9]
    9618:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(clip, &draw_area,
    961a:	0f9b      	lsrs	r3, r3, #30
    961c:	9302      	str	r3, [sp, #8]
    961e:	4643      	mov	r3, r8
    9620:	9301      	str	r3, [sp, #4]
    9622:	2301      	movs	r3, #1
    9624:	9300      	str	r3, [sp, #0]
    9626:	2300      	movs	r3, #0
    9628:	a928      	add	r1, sp, #160	; 0xa0
    962a:	a848      	add	r0, sp, #288	; 0x120
    962c:	4d92      	ldr	r5, [pc, #584]	; (9878 <lv_draw_line+0x7b0>)
    962e:	47a8      	blx	r5
    9630:	e19e      	b.n	9970 <lv_draw_line+0x8a8>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    9632:	aa28      	add	r2, sp, #160	; 0xa0
    9634:	a948      	add	r1, sp, #288	; 0x120
    9636:	0010      	movs	r0, r2
    9638:	4b94      	ldr	r3, [pc, #592]	; (988c <lv_draw_line+0x7c4>)
    963a:	4798      	blx	r3
        if(!is_common) return;
    963c:	2800      	cmp	r0, #0
    963e:	d100      	bne.n	9642 <lv_draw_line+0x57a>
    9640:	e196      	b.n	9970 <lv_draw_line+0x8a8>
        draw_area.x1 -= vdb->area.x1;
    9642:	aa28      	add	r2, sp, #160	; 0xa0
    9644:	2100      	movs	r1, #0
    9646:	5e53      	ldrsh	r3, [r2, r1]
    9648:	469c      	mov	ip, r3
    964a:	8a3b      	ldrh	r3, [r7, #16]
    964c:	4661      	mov	r1, ip
    964e:	1ac9      	subs	r1, r1, r3
    9650:	b289      	uxth	r1, r1
    9652:	8011      	strh	r1, [r2, #0]
        draw_area.y1 -= vdb->area.y1;
    9654:	2502      	movs	r5, #2
    9656:	5f50      	ldrsh	r0, [r2, r5]
    9658:	8a7d      	ldrh	r5, [r7, #18]
    965a:	46a8      	mov	r8, r5
    965c:	1b45      	subs	r5, r0, r5
    965e:	8055      	strh	r5, [r2, #2]
        draw_area.x2 -= vdb->area.x1;
    9660:	2504      	movs	r5, #4
    9662:	5f56      	ldrsh	r6, [r2, r5]
    9664:	1af3      	subs	r3, r6, r3
    9666:	b29b      	uxth	r3, r3
    9668:	4699      	mov	r9, r3
    966a:	8093      	strh	r3, [r2, #4]
        draw_area.y2 -= vdb->area.y1;
    966c:	88d5      	ldrh	r5, [r2, #6]
    966e:	4643      	mov	r3, r8
    9670:	1aed      	subs	r5, r5, r3
    9672:	80d5      	strh	r5, [r2, #6]
    9674:	464b      	mov	r3, r9
    9676:	3301      	adds	r3, #1
    9678:	1a59      	subs	r1, r3, r1
    967a:	b20b      	sxth	r3, r1
    967c:	001a      	movs	r2, r3
    967e:	930b      	str	r3, [sp, #44]	; 0x2c
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    9680:	ab33      	add	r3, sp, #204	; 0xcc
    9682:	4661      	mov	r1, ip
    9684:	8019      	strh	r1, [r3, #0]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    9686:	809e      	strh	r6, [r3, #4]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    9688:	8058      	strh	r0, [r3, #2]
        fill_area.y2 = fill_area.y1;
    968a:	80d8      	strh	r0, [r3, #6]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    968c:	920c      	str	r2, [sp, #48]	; 0x30
    968e:	0010      	movs	r0, r2
    9690:	4b7f      	ldr	r3, [pc, #508]	; (9890 <lv_draw_line+0x7c8>)
    9692:	4798      	blx	r3
    9694:	9008      	str	r0, [sp, #32]
        if(dashed) {
    9696:	2100      	movs	r1, #0
    9698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    969a:	2b00      	cmp	r3, #0
    969c:	d00c      	beq.n	96b8 <lv_draw_line+0x5f0>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    969e:	2310      	movs	r3, #16
    96a0:	5ef8      	ldrsh	r0, [r7, r3]
    96a2:	ab28      	add	r3, sp, #160	; 0xa0
    96a4:	2200      	movs	r2, #0
    96a6:	5e9b      	ldrsh	r3, [r3, r2]
    96a8:	18c0      	adds	r0, r0, r3
    96aa:	2306      	movs	r3, #6
    96ac:	5ee1      	ldrsh	r1, [r4, r3]
    96ae:	2204      	movs	r2, #4
    96b0:	5ea3      	ldrsh	r3, [r4, r2]
    96b2:	18c9      	adds	r1, r1, r3
    96b4:	4b77      	ldr	r3, [pc, #476]	; (9894 <lv_draw_line+0x7cc>)
    96b6:	4798      	blx	r3
    96b8:	b20b      	sxth	r3, r1
    96ba:	4699      	mov	r9, r3
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    96bc:	ab28      	add	r3, sp, #160	; 0xa0
    96be:	2202      	movs	r2, #2
    96c0:	5e9e      	ldrsh	r6, [r3, r2]
    96c2:	2206      	movs	r2, #6
    96c4:	5e9b      	ldrsh	r3, [r3, r2]
    96c6:	429e      	cmp	r6, r3
    96c8:	dc4b      	bgt.n	9762 <lv_draw_line+0x69a>
            _lv_memset_ff(mask_buf, draw_area_w);
    96ca:	4b73      	ldr	r3, [pc, #460]	; (9898 <lv_draw_line+0x7d0>)
    96cc:	469b      	mov	fp, r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    96ce:	4b73      	ldr	r3, [pc, #460]	; (989c <lv_draw_line+0x7d4>)
    96d0:	469a      	mov	sl, r3
    96d2:	46b8      	mov	r8, r7
    96d4:	464b      	mov	r3, r9
    96d6:	9309      	str	r3, [sp, #36]	; 0x24
    96d8:	e01d      	b.n	9716 <lv_draw_line+0x64e>
                dash_cnt ++;
    96da:	9f09      	ldr	r7, [sp, #36]	; 0x24
    96dc:	3701      	adds	r7, #1
    96de:	b23b      	sxth	r3, r7
    96e0:	9309      	str	r3, [sp, #36]	; 0x24
            _lv_blend_fill(clip, &fill_area,
    96e2:	8822      	ldrh	r2, [r4, #0]
    96e4:	ad33      	add	r5, sp, #204	; 0xcc
    96e6:	2300      	movs	r3, #0
    96e8:	9302      	str	r3, [sp, #8]
    96ea:	7a23      	ldrb	r3, [r4, #8]
    96ec:	9301      	str	r3, [sp, #4]
    96ee:	9000      	str	r0, [sp, #0]
    96f0:	9b08      	ldr	r3, [sp, #32]
    96f2:	0029      	movs	r1, r5
    96f4:	a848      	add	r0, sp, #288	; 0x120
    96f6:	4f60      	ldr	r7, [pc, #384]	; (9878 <lv_draw_line+0x7b0>)
    96f8:	47b8      	blx	r7
            fill_area.y1++;
    96fa:	886b      	ldrh	r3, [r5, #2]
    96fc:	3301      	adds	r3, #1
    96fe:	806b      	strh	r3, [r5, #2]
            fill_area.y2++;
    9700:	88eb      	ldrh	r3, [r5, #6]
    9702:	3301      	adds	r3, #1
    9704:	80eb      	strh	r3, [r5, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    9706:	3601      	adds	r6, #1
    9708:	ab0a      	add	r3, sp, #40	; 0x28
    970a:	227e      	movs	r2, #126	; 0x7e
    970c:	189b      	adds	r3, r3, r2
    970e:	2200      	movs	r2, #0
    9710:	5e9b      	ldrsh	r3, [r3, r2]
    9712:	429e      	cmp	r6, r3
    9714:	dc25      	bgt.n	9762 <lv_draw_line+0x69a>
            _lv_memset_ff(mask_buf, draw_area_w);
    9716:	990c      	ldr	r1, [sp, #48]	; 0x30
    9718:	9d08      	ldr	r5, [sp, #32]
    971a:	0028      	movs	r0, r5
    971c:	47d8      	blx	fp
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    971e:	4643      	mov	r3, r8
    9720:	8a5a      	ldrh	r2, [r3, #18]
    9722:	1992      	adds	r2, r2, r6
    9724:	b212      	sxth	r2, r2
    9726:	8a19      	ldrh	r1, [r3, #16]
    9728:	ab0a      	add	r3, sp, #40	; 0x28
    972a:	2078      	movs	r0, #120	; 0x78
    972c:	181b      	adds	r3, r3, r0
    972e:	881b      	ldrh	r3, [r3, #0]
    9730:	18c9      	adds	r1, r1, r3
    9732:	b209      	sxth	r1, r1
    9734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9736:	0028      	movs	r0, r5
    9738:	47d0      	blx	sl
            if(dashed) {
    973a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    973c:	2b00      	cmp	r3, #0
    973e:	d0d0      	beq.n	96e2 <lv_draw_line+0x61a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    9740:	2800      	cmp	r0, #0
    9742:	d0ca      	beq.n	96da <lv_draw_line+0x612>
                    if(dash_cnt > dsc->dash_width) {
    9744:	2304      	movs	r3, #4
    9746:	5ee2      	ldrsh	r2, [r4, r3]
    9748:	9b09      	ldr	r3, [sp, #36]	; 0x24
    974a:	429a      	cmp	r2, r3
    974c:	da00      	bge.n	9750 <lv_draw_line+0x688>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
    974e:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    9750:	2106      	movs	r1, #6
    9752:	5e63      	ldrsh	r3, [r4, r1]
    9754:	189b      	adds	r3, r3, r2
    9756:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9758:	429a      	cmp	r2, r3
    975a:	dbbe      	blt.n	96da <lv_draw_line+0x612>
                        dash_cnt = 0;
    975c:	2300      	movs	r3, #0
    975e:	9309      	str	r3, [sp, #36]	; 0x24
    9760:	e7bb      	b.n	96da <lv_draw_line+0x612>
        _lv_mem_buf_release(mask_buf);
    9762:	9808      	ldr	r0, [sp, #32]
    9764:	4b45      	ldr	r3, [pc, #276]	; (987c <lv_draw_line+0x7b4>)
    9766:	4798      	blx	r3
    9768:	e102      	b.n	9970 <lv_draw_line+0x8a8>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
    976a:	464b      	mov	r3, r9
    976c:	0158      	lsls	r0, r3, #5
    976e:	4659      	mov	r1, fp
    9770:	4b4b      	ldr	r3, [pc, #300]	; (98a0 <lv_draw_line+0x7d8>)
    9772:	4798      	blx	r3
    9774:	e52d      	b.n	91d2 <lv_draw_line+0x10a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    9776:	b2b2      	uxth	r2, r6
    9778:	466b      	mov	r3, sp
    977a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    977c:	b2a9      	uxth	r1, r5
    977e:	4693      	mov	fp, r2
    9780:	18d2      	adds	r2, r2, r3
    9782:	b212      	sxth	r2, r2
    9784:	2000      	movs	r0, #0
    9786:	9001      	str	r0, [sp, #4]
    9788:	910b      	str	r1, [sp, #44]	; 0x2c
    978a:	468c      	mov	ip, r1
    978c:	4463      	add	r3, ip
    978e:	b21b      	sxth	r3, r3
    9790:	9300      	str	r3, [sp, #0]
    9792:	4653      	mov	r3, sl
    9794:	9908      	ldr	r1, [sp, #32]
    9796:	a812      	add	r0, sp, #72	; 0x48
    9798:	4f42      	ldr	r7, [pc, #264]	; (98a4 <lv_draw_line+0x7dc>)
    979a:	47b8      	blx	r7
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    979c:	4643      	mov	r3, r8
    979e:	466a      	mov	r2, sp
    97a0:	8613      	strh	r3, [r2, #48]	; 0x30
    97a2:	8e13      	ldrh	r3, [r2, #48]	; 0x30
    97a4:	465a      	mov	r2, fp
    97a6:	1ad2      	subs	r2, r2, r3
    97a8:	b212      	sxth	r2, r2
    97aa:	2101      	movs	r1, #1
    97ac:	9101      	str	r1, [sp, #4]
    97ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97b0:	1acb      	subs	r3, r1, r3
    97b2:	b21b      	sxth	r3, r3
    97b4:	9300      	str	r3, [sp, #0]
    97b6:	4653      	mov	r3, sl
    97b8:	9908      	ldr	r1, [sp, #32]
    97ba:	a81d      	add	r0, sp, #116	; 0x74
    97bc:	47b8      	blx	r7
    97be:	e56a      	b.n	9296 <lv_draw_line+0x1ce>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
    97c0:	466b      	mov	r3, sp
    97c2:	8c1a      	ldrh	r2, [r3, #32]
    97c4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    97c6:	4653      	mov	r3, sl
    97c8:	4668      	mov	r0, sp
    97ca:	8583      	strh	r3, [r0, #44]	; 0x2c
    97cc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    97ce:	469b      	mov	fp, r3
    97d0:	18cb      	adds	r3, r1, r3
    97d2:	b21b      	sxth	r3, r3
    97d4:	920b      	str	r2, [sp, #44]	; 0x2c
    97d6:	4694      	mov	ip, r2
    97d8:	4461      	add	r1, ip
    97da:	b209      	sxth	r1, r1
    97dc:	2200      	movs	r2, #0
    97de:	9201      	str	r2, [sp, #4]
    97e0:	9500      	str	r5, [sp, #0]
    97e2:	0032      	movs	r2, r6
    97e4:	a812      	add	r0, sp, #72	; 0x48
    97e6:	4f2f      	ldr	r7, [pc, #188]	; (98a4 <lv_draw_line+0x7dc>)
    97e8:	47b8      	blx	r7
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
    97ea:	4643      	mov	r3, r8
    97ec:	466a      	mov	r2, sp
    97ee:	8613      	strh	r3, [r2, #48]	; 0x30
    97f0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    97f2:	465b      	mov	r3, fp
    97f4:	1a9b      	subs	r3, r3, r2
    97f6:	b21b      	sxth	r3, r3
    97f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97fa:	1a8a      	subs	r2, r1, r2
    97fc:	b211      	sxth	r1, r2
    97fe:	2201      	movs	r2, #1
    9800:	9201      	str	r2, [sp, #4]
    9802:	9500      	str	r5, [sp, #0]
    9804:	0032      	movs	r2, r6
    9806:	a81d      	add	r0, sp, #116	; 0x74
    9808:	47b8      	blx	r7
    980a:	e544      	b.n	9296 <lv_draw_line+0x1ce>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
    980c:	466b      	mov	r3, sp
    980e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9810:	4699      	mov	r9, r3
    9812:	466b      	mov	r3, sp
    9814:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9816:	4698      	mov	r8, r3
    9818:	464b      	mov	r3, r9
    981a:	9908      	ldr	r1, [sp, #32]
    981c:	1acb      	subs	r3, r1, r3
    981e:	b21b      	sxth	r3, r3
    9820:	2203      	movs	r2, #3
    9822:	9201      	str	r2, [sp, #4]
    9824:	4642      	mov	r2, r8
    9826:	1992      	adds	r2, r2, r6
    9828:	b212      	sxth	r2, r2
    982a:	9200      	str	r2, [sp, #0]
    982c:	0032      	movs	r2, r6
    982e:	a828      	add	r0, sp, #160	; 0xa0
    9830:	4e1c      	ldr	r6, [pc, #112]	; (98a4 <lv_draw_line+0x7dc>)
    9832:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
    9834:	4653      	mov	r3, sl
    9836:	464a      	mov	r2, r9
    9838:	1a9b      	subs	r3, r3, r2
    983a:	b21b      	sxth	r3, r3
    983c:	2202      	movs	r2, #2
    983e:	9201      	str	r2, [sp, #4]
    9840:	4642      	mov	r2, r8
    9842:	1952      	adds	r2, r2, r5
    9844:	b212      	sxth	r2, r2
    9846:	9200      	str	r2, [sp, #0]
    9848:	002a      	movs	r2, r5
    984a:	4651      	mov	r1, sl
    984c:	a833      	add	r0, sp, #204	; 0xcc
    984e:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
    9850:	2100      	movs	r1, #0
    9852:	a828      	add	r0, sp, #160	; 0xa0
    9854:	4d14      	ldr	r5, [pc, #80]	; (98a8 <lv_draw_line+0x7e0>)
    9856:	47a8      	blx	r5
    9858:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    985a:	2100      	movs	r1, #0
    985c:	a833      	add	r0, sp, #204	; 0xcc
    985e:	47a8      	blx	r5
    9860:	900d      	str	r0, [sp, #52]	; 0x34
    9862:	e52a      	b.n	92ba <lv_draw_line+0x1f2>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    9864:	a80e      	add	r0, sp, #56	; 0x38
    9866:	4b11      	ldr	r3, [pc, #68]	; (98ac <lv_draw_line+0x7e4>)
    9868:	4798      	blx	r3
    986a:	4683      	mov	fp, r0
    986c:	e549      	b.n	9302 <lv_draw_line+0x23a>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
    986e:	0029      	movs	r1, r5
    9870:	9808      	ldr	r0, [sp, #32]
    9872:	4b0f      	ldr	r3, [pc, #60]	; (98b0 <lv_draw_line+0x7e8>)
    9874:	4798      	blx	r3
    9876:	e04c      	b.n	9912 <lv_draw_line+0x84a>
    9878:	00005c05 	.word	0x00005c05
    987c:	00010b6d 	.word	0x00010b6d
    9880:	00004349 	.word	0x00004349
    9884:	0000f6a1 	.word	0x0000f6a1
    9888:	0000a659 	.word	0x0000a659
    988c:	0000fba7 	.word	0x0000fba7
    9890:	00010e59 	.word	0x00010e59
    9894:	00017c41 	.word	0x00017c41
    9898:	00011089 	.word	0x00011089
    989c:	0000a5bd 	.word	0x0000a5bd
    98a0:	00017a75 	.word	0x00017a75
    98a4:	0000a67d 	.word	0x0000a67d
    98a8:	0000a585 	.word	0x0000a585
    98ac:	0000fb8b 	.word	0x0000fb8b
    98b0:	00010fe5 	.word	0x00010fe5
            _lv_blend_fill(&fill_area, clip,
    98b4:	4643      	mov	r3, r8
    98b6:	881a      	ldrh	r2, [r3, #0]
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
    98b8:	7a5b      	ldrb	r3, [r3, #9]
    98ba:	079b      	lsls	r3, r3, #30
            _lv_blend_fill(&fill_area, clip,
    98bc:	0f9b      	lsrs	r3, r3, #30
    98be:	9302      	str	r3, [sp, #8]
    98c0:	4643      	mov	r3, r8
    98c2:	7a1b      	ldrb	r3, [r3, #8]
    98c4:	9301      	str	r3, [sp, #4]
    98c6:	2302      	movs	r3, #2
    98c8:	9300      	str	r3, [sp, #0]
    98ca:	0023      	movs	r3, r4
    98cc:	a948      	add	r1, sp, #288	; 0x120
    98ce:	a810      	add	r0, sp, #64	; 0x40
    98d0:	4f4d      	ldr	r7, [pc, #308]	; (9a08 <lv_draw_line+0x940>)
    98d2:	47b8      	blx	r7

            fill_area.y1 = fill_area.y2 + 1;
    98d4:	ab0a      	add	r3, sp, #40	; 0x28
    98d6:	8bdb      	ldrh	r3, [r3, #30]
    98d8:	3301      	adds	r3, #1
    98da:	b21b      	sxth	r3, r3
    98dc:	aa0a      	add	r2, sp, #40	; 0x28
    98de:	8353      	strh	r3, [r2, #26]
            fill_area.y2 = fill_area.y1;
    98e0:	83d3      	strh	r3, [r2, #30]
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
    98e2:	4659      	mov	r1, fp
    98e4:	0020      	movs	r0, r4
    98e6:	4b49      	ldr	r3, [pc, #292]	; (9a0c <lv_draw_line+0x944>)
    98e8:	4798      	blx	r3
            mask_p = 0;
    98ea:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    98ec:	3601      	adds	r6, #1
    98ee:	ab0e      	add	r3, sp, #56	; 0x38
    98f0:	2206      	movs	r2, #6
    98f2:	5e9b      	ldrsh	r3, [r3, r2]
    98f4:	464a      	mov	r2, r9
    98f6:	2112      	movs	r1, #18
    98f8:	5e52      	ldrsh	r2, [r2, r1]
    98fa:	189b      	adds	r3, r3, r2
    98fc:	429e      	cmp	r6, r3
    98fe:	dc11      	bgt.n	9924 <lv_draw_line+0x85c>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
    9900:	19e3      	adds	r3, r4, r7
    9902:	0018      	movs	r0, r3
    9904:	9308      	str	r3, [sp, #32]
    9906:	b232      	sxth	r2, r6
    9908:	002b      	movs	r3, r5
    990a:	9909      	ldr	r1, [sp, #36]	; 0x24
    990c:	47d0      	blx	sl
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    990e:	2800      	cmp	r0, #0
    9910:	d0ad      	beq.n	986e <lv_draw_line+0x7a6>
        mask_p += draw_area_w;
    9912:	197f      	adds	r7, r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
    9914:	19eb      	adds	r3, r5, r7
    9916:	459b      	cmp	fp, r3
    9918:	d9cc      	bls.n	98b4 <lv_draw_line+0x7ec>
            fill_area.y2 ++;
    991a:	aa10      	add	r2, sp, #64	; 0x40
    991c:	88d3      	ldrh	r3, [r2, #6]
    991e:	3301      	adds	r3, #1
    9920:	80d3      	strh	r3, [r2, #6]
    9922:	e7e3      	b.n	98ec <lv_draw_line+0x824>
    9924:	4643      	mov	r3, r8
    9926:	46a0      	mov	r8, r4
    9928:	001c      	movs	r4, r3
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
    992a:	aa10      	add	r2, sp, #64	; 0x40
    992c:	2106      	movs	r1, #6
    992e:	5e53      	ldrsh	r3, [r2, r1]
    9930:	2102      	movs	r1, #2
    9932:	5e52      	ldrsh	r2, [r2, r1]
    9934:	429a      	cmp	r2, r3
    9936:	d00f      	beq.n	9958 <lv_draw_line+0x890>
        fill_area.y2--;
    9938:	a810      	add	r0, sp, #64	; 0x40
    993a:	3b01      	subs	r3, #1
    993c:	80c3      	strh	r3, [r0, #6]
        _lv_blend_fill(&fill_area, clip,
    993e:	8822      	ldrh	r2, [r4, #0]
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
    9940:	7a63      	ldrb	r3, [r4, #9]
    9942:	079b      	lsls	r3, r3, #30
        _lv_blend_fill(&fill_area, clip,
    9944:	0f9b      	lsrs	r3, r3, #30
    9946:	9302      	str	r3, [sp, #8]
    9948:	7a23      	ldrb	r3, [r4, #8]
    994a:	9301      	str	r3, [sp, #4]
    994c:	2302      	movs	r3, #2
    994e:	9300      	str	r3, [sp, #0]
    9950:	4643      	mov	r3, r8
    9952:	a948      	add	r1, sp, #288	; 0x120
    9954:	4d2c      	ldr	r5, [pc, #176]	; (9a08 <lv_draw_line+0x940>)
    9956:	47a8      	blx	r5

    }

    _lv_mem_buf_release(mask_buf);
    9958:	4640      	mov	r0, r8
    995a:	4b2d      	ldr	r3, [pc, #180]	; (9a10 <lv_draw_line+0x948>)
    995c:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
    995e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9960:	4d2c      	ldr	r5, [pc, #176]	; (9a14 <lv_draw_line+0x94c>)
    9962:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
    9964:	980c      	ldr	r0, [sp, #48]	; 0x30
    9966:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
    9968:	980a      	ldr	r0, [sp, #40]	; 0x28
    996a:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
    996c:	980d      	ldr	r0, [sp, #52]	; 0x34
    996e:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
    9970:	7a63      	ldrb	r3, [r4, #9]
    9972:	220c      	movs	r2, #12
    9974:	421a      	tst	r2, r3
    9976:	d106      	bne.n	9986 <lv_draw_line+0x8be>
}
    9978:	b04b      	add	sp, #300	; 0x12c
    997a:	bc3c      	pop	{r2, r3, r4, r5}
    997c:	4690      	mov	r8, r2
    997e:	4699      	mov	r9, r3
    9980:	46a2      	mov	sl, r4
    9982:	46ab      	mov	fp, r5
    9984:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
    9986:	ad33      	add	r5, sp, #204	; 0xcc
    9988:	0028      	movs	r0, r5
    998a:	4b23      	ldr	r3, [pc, #140]	; (9a18 <lv_draw_line+0x950>)
    998c:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
    998e:	8823      	ldrh	r3, [r4, #0]
    9990:	806b      	strh	r3, [r5, #2]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
    9992:	4b22      	ldr	r3, [pc, #136]	; (9a1c <lv_draw_line+0x954>)
    9994:	802b      	strh	r3, [r5, #0]
        cir_dsc.bg_opa = dsc->opa;
    9996:	7a23      	ldrb	r3, [r4, #8]
    9998:	732b      	strb	r3, [r5, #12]
        int32_t r = (dsc->width >> 1);
    999a:	2202      	movs	r2, #2
    999c:	5ea3      	ldrsh	r3, [r4, r2]
    999e:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
    99a0:	2201      	movs	r2, #1
    99a2:	4053      	eors	r3, r2
    99a4:	2501      	movs	r5, #1
    99a6:	401d      	ands	r5, r3
        if(dsc->round_start) {
    99a8:	7a63      	ldrb	r3, [r4, #9]
    99aa:	075b      	lsls	r3, r3, #29
    99ac:	d417      	bmi.n	99de <lv_draw_line+0x916>
        if(dsc->round_end) {
    99ae:	7a63      	ldrb	r3, [r4, #9]
    99b0:	071b      	lsls	r3, r3, #28
    99b2:	d5e1      	bpl.n	9978 <lv_draw_line+0x8b0>
            cir_area.x1 = point2->x - r;
    99b4:	9906      	ldr	r1, [sp, #24]
    99b6:	880a      	ldrh	r2, [r1, #0]
    99b8:	b2b6      	uxth	r6, r6
    99ba:	a828      	add	r0, sp, #160	; 0xa0
    99bc:	1b93      	subs	r3, r2, r6
    99be:	8003      	strh	r3, [r0, #0]
            cir_area.y1 = point2->y - r;
    99c0:	8849      	ldrh	r1, [r1, #2]
    99c2:	1b8b      	subs	r3, r1, r6
    99c4:	8043      	strh	r3, [r0, #2]
            cir_area.x2 = point2->x + r - r_corr;
    99c6:	b2ad      	uxth	r5, r5
    99c8:	1992      	adds	r2, r2, r6
    99ca:	1b52      	subs	r2, r2, r5
    99cc:	8082      	strh	r2, [r0, #4]
            cir_area.y2 = point2->y + r - r_corr ;
    99ce:	1876      	adds	r6, r6, r1
    99d0:	1b76      	subs	r6, r6, r5
    99d2:	80c6      	strh	r6, [r0, #6]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    99d4:	aa33      	add	r2, sp, #204	; 0xcc
    99d6:	9907      	ldr	r1, [sp, #28]
    99d8:	4b11      	ldr	r3, [pc, #68]	; (9a20 <lv_draw_line+0x958>)
    99da:	4798      	blx	r3
    99dc:	e7cc      	b.n	9978 <lv_draw_line+0x8b0>
            cir_area.x1 = point1->x - r;
    99de:	9f05      	ldr	r7, [sp, #20]
    99e0:	883a      	ldrh	r2, [r7, #0]
    99e2:	b2b3      	uxth	r3, r6
    99e4:	a828      	add	r0, sp, #160	; 0xa0
    99e6:	1ad1      	subs	r1, r2, r3
    99e8:	8001      	strh	r1, [r0, #0]
            cir_area.y1 = point1->y - r;
    99ea:	887f      	ldrh	r7, [r7, #2]
    99ec:	1af9      	subs	r1, r7, r3
    99ee:	8041      	strh	r1, [r0, #2]
            cir_area.x2 = point1->x + r - r_corr;
    99f0:	b2a9      	uxth	r1, r5
    99f2:	18d2      	adds	r2, r2, r3
    99f4:	1a52      	subs	r2, r2, r1
    99f6:	8082      	strh	r2, [r0, #4]
            cir_area.y2 = point1->y + r - r_corr ;
    99f8:	19db      	adds	r3, r3, r7
    99fa:	1a5b      	subs	r3, r3, r1
    99fc:	80c3      	strh	r3, [r0, #6]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    99fe:	aa33      	add	r2, sp, #204	; 0xcc
    9a00:	9907      	ldr	r1, [sp, #28]
    9a02:	4b07      	ldr	r3, [pc, #28]	; (9a20 <lv_draw_line+0x958>)
    9a04:	4798      	blx	r3
    9a06:	e7d2      	b.n	99ae <lv_draw_line+0x8e6>
    9a08:	00005c05 	.word	0x00005c05
    9a0c:	00011089 	.word	0x00011089
    9a10:	00010b6d 	.word	0x00010b6d
    9a14:	0000a611 	.word	0x0000a611
    9a18:	0000aab9 	.word	0x0000aab9
    9a1c:	00007fff 	.word	0x00007fff
    9a20:	0000ab5d 	.word	0x0000ab5d

00009a24 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
    9a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a26:	46de      	mov	lr, fp
    9a28:	4657      	mov	r7, sl
    9a2a:	464e      	mov	r6, r9
    9a2c:	4645      	mov	r5, r8
    9a2e:	b5e0      	push	{r5, r6, r7, lr}
    9a30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
    9a32:	8aa5      	ldrh	r5, [r4, #20]
    9a34:	1b52      	subs	r2, r2, r5
    9a36:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
    9a38:	8a65      	ldrh	r5, [r4, #18]
    9a3a:	1b4d      	subs	r5, r1, r5
    9a3c:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
    9a3e:	6a21      	ldr	r1, [r4, #32]
    9a40:	2900      	cmp	r1, #0
    9a42:	d140      	bne.n	9ac6 <lv_draw_mask_line+0xa2>
        /*Horizontal*/
        if(p->flat) {
    9a44:	3128      	adds	r1, #40	; 0x28
    9a46:	5c61      	ldrb	r1, [r4, r1]
    9a48:	07c9      	lsls	r1, r1, #31
    9a4a:	d511      	bpl.n	9a70 <lv_draw_mask_line+0x4c>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
    9a4c:	7c21      	ldrb	r1, [r4, #16]
    9a4e:	2303      	movs	r3, #3
    9a50:	400b      	ands	r3, r1
    9a52:	2b01      	cmp	r3, #1
    9a54:	d800      	bhi.n	9a58 <lv_draw_mask_line+0x34>
    9a56:	e1c5      	b.n	9de4 <lv_draw_mask_line+0x3c0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9a58:	2b02      	cmp	r3, #2
    9a5a:	d006      	beq.n	9a6a <lv_draw_mask_line+0x46>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
            else {
                return LV_DRAW_MASK_RES_TRANSP;
    9a5c:	2400      	movs	r4, #0
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9a5e:	2b03      	cmp	r3, #3
    9a60:	d145      	bne.n	9aee <lv_draw_mask_line+0xca>
    9a62:	17d4      	asrs	r4, r2, #31
    9a64:	1aa4      	subs	r4, r4, r2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9a66:	0fe4      	lsrs	r4, r4, #31
    9a68:	e041      	b.n	9aee <lv_draw_mask_line+0xca>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9a6a:	3201      	adds	r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9a6c:	0fd4      	lsrs	r4, r2, #31
    9a6e:	e03e      	b.n	9aee <lv_draw_mask_line+0xca>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
    9a70:	7c21      	ldrb	r1, [r4, #16]
    9a72:	2203      	movs	r2, #3
    9a74:	400a      	ands	r2, r1
    9a76:	1e91      	subs	r1, r2, #2
    9a78:	2901      	cmp	r1, #1
    9a7a:	d800      	bhi.n	9a7e <lv_draw_mask_line+0x5a>
    9a7c:	e1b4      	b.n	9de8 <lv_draw_mask_line+0x3c4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9a7e:	2a01      	cmp	r2, #1
    9a80:	d00f      	beq.n	9aa2 <lv_draw_mask_line+0x7e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
    9a82:	2a00      	cmp	r2, #0
    9a84:	d110      	bne.n	9aa8 <lv_draw_mask_line+0x84>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9a86:	18e9      	adds	r1, r5, r3
    9a88:	d500      	bpl.n	9a8c <lv_draw_mask_line+0x68>
    9a8a:	e1af      	b.n	9dec <lv_draw_mask_line+0x3c8>
                else {
                    int32_t k = - abs_x;
    9a8c:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    9a8e:	2d00      	cmp	r5, #0
    9a90:	da00      	bge.n	9a94 <lv_draw_mask_line+0x70>
    9a92:	e1ad      	b.n	9df0 <lv_draw_mask_line+0x3cc>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
                    return  LV_DRAW_MASK_RES_CHANGED;
    9a94:	2402      	movs	r4, #2
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    9a96:	42ab      	cmp	r3, r5
    9a98:	dd29      	ble.n	9aee <lv_draw_mask_line+0xca>
    9a9a:	1940      	adds	r0, r0, r5
    9a9c:	4bbd      	ldr	r3, [pc, #756]	; (9d94 <lv_draw_mask_line+0x370>)
    9a9e:	4798      	blx	r3
    9aa0:	e025      	b.n	9aee <lv_draw_mask_line+0xca>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9aa2:	2401      	movs	r4, #1
    9aa4:	2d00      	cmp	r5, #0
    9aa6:	dc22      	bgt.n	9aee <lv_draw_mask_line+0xca>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    9aa8:	001a      	movs	r2, r3
    9aaa:	42dd      	cmn	r5, r3
    9aac:	d500      	bpl.n	9ab0 <lv_draw_mask_line+0x8c>
    9aae:	e1a1      	b.n	9df4 <lv_draw_mask_line+0x3d0>
                else {
                    int32_t k = - abs_x;
    9ab0:	4269      	negs	r1, r5
    9ab2:	43cb      	mvns	r3, r1
    9ab4:	17db      	asrs	r3, r3, #31
    9ab6:	4019      	ands	r1, r3
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    9ab8:	2400      	movs	r4, #0
    9aba:	428a      	cmp	r2, r1
    9abc:	dd17      	ble.n	9aee <lv_draw_mask_line+0xca>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
    9abe:	4bb5      	ldr	r3, [pc, #724]	; (9d94 <lv_draw_mask_line+0x370>)
    9ac0:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    9ac2:	3402      	adds	r4, #2
    9ac4:	e013      	b.n	9aee <lv_draw_mask_line+0xca>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
    9ac6:	2128      	movs	r1, #40	; 0x28
    9ac8:	5c61      	ldrb	r1, [r4, r1]
    9aca:	468b      	mov	fp, r1
    9acc:	07c9      	lsls	r1, r1, #31
    9ace:	d415      	bmi.n	9afc <lv_draw_mask_line+0xd8>
{
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    9ad0:	69a7      	ldr	r7, [r4, #24]
    9ad2:	0011      	movs	r1, r2
    9ad4:	4379      	muls	r1, r7
    9ad6:	1289      	asrs	r1, r1, #10
    9ad8:	468c      	mov	ip, r1
    if(p->xy_steep > 0) x_at_y++;
    9ada:	17f9      	asrs	r1, r7, #31
    9adc:	1bc9      	subs	r1, r1, r7
    9ade:	0fc9      	lsrs	r1, r1, #31
    9ae0:	4461      	add	r1, ip
    if(x_at_y < abs_x) {
    9ae2:	428d      	cmp	r5, r1
    9ae4:	dc00      	bgt.n	9ae8 <lv_draw_mask_line+0xc4>
    9ae6:	e096      	b.n	9c16 <lv_draw_mask_line+0x1f2>
        if(p->inv) {
    9ae8:	465b      	mov	r3, fp
    9aea:	079c      	lsls	r4, r3, #30
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9aec:	0fe4      	lsrs	r4, r4, #31
}
    9aee:	0020      	movs	r0, r4
    9af0:	bc3c      	pop	{r2, r3, r4, r5}
    9af2:	4690      	mov	r8, r2
    9af4:	4699      	mov	r9, r3
    9af6:	46a2      	mov	sl, r4
    9af8:	46ab      	mov	fp, r5
    9afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
    9afc:	69e1      	ldr	r1, [r4, #28]
    9afe:	002f      	movs	r7, r5
    9b00:	434f      	muls	r7, r1
    9b02:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
    9b04:	2900      	cmp	r1, #0
    9b06:	dd06      	ble.n	9b16 <lv_draw_mask_line+0xf2>
        if(y_at_x > abs_y) {
    9b08:	4297      	cmp	r7, r2
    9b0a:	dc00      	bgt.n	9b0e <lv_draw_mask_line+0xea>
    9b0c:	e176      	b.n	9dfc <lv_draw_mask_line+0x3d8>
            if(p->inv) {
    9b0e:	465b      	mov	r3, fp
    9b10:	079c      	lsls	r4, r3, #30
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9b12:	0fe4      	lsrs	r4, r4, #31
    9b14:	e7eb      	b.n	9aee <lv_draw_mask_line+0xca>
        if(y_at_x < abs_y) {
    9b16:	4297      	cmp	r7, r2
    9b18:	db00      	blt.n	9b1c <lv_draw_mask_line+0xf8>
    9b1a:	e1ab      	b.n	9e74 <lv_draw_mask_line+0x450>
            if(p->inv) {
    9b1c:	465b      	mov	r3, fp
    9b1e:	079c      	lsls	r4, r3, #30
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9b20:	0fe4      	lsrs	r4, r4, #31
    9b22:	e7e4      	b.n	9aee <lv_draw_mask_line+0xca>
            if(p->inv) {
    9b24:	465b      	mov	r3, fp
    9b26:	085e      	lsrs	r6, r3, #1
    9b28:	2401      	movs	r4, #1
    9b2a:	4066      	eors	r6, r4
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9b2c:	2401      	movs	r4, #1
    9b2e:	4034      	ands	r4, r6
    9b30:	e7dd      	b.n	9aee <lv_draw_mask_line+0xca>
            if(p->inv) {
    9b32:	465b      	mov	r3, fp
    9b34:	085e      	lsrs	r6, r3, #1
    9b36:	2401      	movs	r4, #1
    9b38:	4066      	eors	r6, r4
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9b3a:	2401      	movs	r4, #1
    9b3c:	4034      	ands	r4, r6
    9b3e:	e7d6      	b.n	9aee <lv_draw_mask_line+0xca>


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
    9b40:	2100      	movs	r1, #0
    9b42:	e190      	b.n	9e66 <lv_draw_mask_line+0x442>
    9b44:	2100      	movs	r1, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
    9b46:	464b      	mov	r3, r9
    9b48:	54c1      	strb	r1, [r0, r3]
        px_h -= p->spx;
    9b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9b4c:	1ad2      	subs	r2, r2, r3
        k++;
    9b4e:	3501      	adds	r5, #1
        if(k >= len) break;
    9b50:	42bd      	cmp	r5, r7
    9b52:	da43      	bge.n	9bdc <lv_draw_mask_line+0x1b8>
    while(px_h > p->spx) {
    9b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9b56:	429a      	cmp	r2, r3
    9b58:	dd1a      	ble.n	9b90 <lv_draw_mask_line+0x16c>
        if(k >= 0 && k < len) {
    9b5a:	2d00      	cmp	r5, #0
    9b5c:	dbf5      	blt.n	9b4a <lv_draw_mask_line+0x126>
    9b5e:	42bd      	cmp	r5, r7
    9b60:	daf3      	bge.n	9b4a <lv_draw_mask_line+0x126>
            m = px_h - (p->spx >> 1);
    9b62:	105b      	asrs	r3, r3, #1
    9b64:	1ad3      	subs	r3, r2, r3
    9b66:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
    9b68:	4641      	mov	r1, r8
    9b6a:	5c61      	ldrb	r1, [r4, r1]
    9b6c:	420e      	tst	r6, r1
    9b6e:	d001      	beq.n	9b74 <lv_draw_mask_line+0x150>
    9b70:	43db      	mvns	r3, r3
    9b72:	b2db      	uxtb	r3, r3
    9b74:	46a9      	mov	r9, r5
            mask_buf[k] = mask_mix(mask_buf[k], m);
    9b76:	5d41      	ldrb	r1, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9b78:	2bf9      	cmp	r3, #249	; 0xf9
    9b7a:	d8e4      	bhi.n	9b46 <lv_draw_mask_line+0x122>
    if(mask_new <= LV_OPA_MIN) return 0;
    9b7c:	2b05      	cmp	r3, #5
    9b7e:	d9e1      	bls.n	9b44 <lv_draw_mask_line+0x120>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9b80:	434b      	muls	r3, r1
    9b82:	0219      	lsls	r1, r3, #8
    9b84:	18c9      	adds	r1, r1, r3
    9b86:	01c9      	lsls	r1, r1, #7
    9b88:	18cb      	adds	r3, r1, r3
    9b8a:	0ddb      	lsrs	r3, r3, #23
    9b8c:	b2d9      	uxtb	r1, r3
    9b8e:	e7da      	b.n	9b46 <lv_draw_mask_line+0x122>
    if(k < len && k >= 0) {
    9b90:	42bd      	cmp	r5, r7
    9b92:	da23      	bge.n	9bdc <lv_draw_mask_line+0x1b8>
    9b94:	2d00      	cmp	r5, #0
    9b96:	db21      	blt.n	9bdc <lv_draw_mask_line+0x1b8>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
    9b98:	69a3      	ldr	r3, [r4, #24]
    9b9a:	4353      	muls	r3, r2
    9b9c:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
    9b9e:	4353      	muls	r3, r2
    9ba0:	125b      	asrs	r3, r3, #9
    9ba2:	b2db      	uxtb	r3, r3
        if(p->yx_steep < 0) m = 255 - m;
    9ba4:	69e2      	ldr	r2, [r4, #28]
    9ba6:	2a00      	cmp	r2, #0
    9ba8:	db13      	blt.n	9bd2 <lv_draw_mask_line+0x1ae>
        if(p->inv) m = 255 - m;
    9baa:	2228      	movs	r2, #40	; 0x28
    9bac:	5ca2      	ldrb	r2, [r4, r2]
    9bae:	0792      	lsls	r2, r2, #30
    9bb0:	d501      	bpl.n	9bb6 <lv_draw_mask_line+0x192>
    9bb2:	43db      	mvns	r3, r3
    9bb4:	b2db      	uxtb	r3, r3
        mask_buf[k] = mask_mix(mask_buf[k], m);
    9bb6:	1946      	adds	r6, r0, r5
    9bb8:	7832      	ldrb	r2, [r6, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9bba:	2bf9      	cmp	r3, #249	; 0xf9
    9bbc:	d80d      	bhi.n	9bda <lv_draw_mask_line+0x1b6>
    if(mask_new <= LV_OPA_MIN) return 0;
    9bbe:	2b05      	cmp	r3, #5
    9bc0:	d90a      	bls.n	9bd8 <lv_draw_mask_line+0x1b4>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9bc2:	4353      	muls	r3, r2
    9bc4:	021a      	lsls	r2, r3, #8
    9bc6:	18d2      	adds	r2, r2, r3
    9bc8:	01d2      	lsls	r2, r2, #7
    9bca:	18d3      	adds	r3, r2, r3
    9bcc:	0ddb      	lsrs	r3, r3, #23
    9bce:	b2da      	uxtb	r2, r3
    9bd0:	e003      	b.n	9bda <lv_draw_mask_line+0x1b6>
        if(p->yx_steep < 0) m = 255 - m;
    9bd2:	43db      	mvns	r3, r3
    9bd4:	b2db      	uxtb	r3, r3
    9bd6:	e7e8      	b.n	9baa <lv_draw_mask_line+0x186>
    if(mask_new <= LV_OPA_MIN) return 0;
    9bd8:	2200      	movs	r2, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
    9bda:	7032      	strb	r2, [r6, #0]
    if(p->inv) {
    9bdc:	2328      	movs	r3, #40	; 0x28
    9bde:	5ce3      	ldrb	r3, [r4, r3]
    9be0:	079b      	lsls	r3, r3, #30
    9be2:	d50c      	bpl.n	9bfe <lv_draw_mask_line+0x1da>
            return LV_DRAW_MASK_RES_TRANSP;
    9be4:	2400      	movs	r4, #0
        if(k > len) {
    9be6:	4567      	cmp	r7, ip
    9be8:	da00      	bge.n	9bec <lv_draw_mask_line+0x1c8>
    9bea:	e780      	b.n	9aee <lv_draw_mask_line+0xca>
    return LV_DRAW_MASK_RES_CHANGED;
    9bec:	3402      	adds	r4, #2
        if(k >= 0) {
    9bee:	4663      	mov	r3, ip
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	da00      	bge.n	9bf6 <lv_draw_mask_line+0x1d2>
    9bf4:	e77b      	b.n	9aee <lv_draw_mask_line+0xca>
            _lv_memset_00(&mask_buf[0], k);
    9bf6:	4661      	mov	r1, ip
    9bf8:	4b66      	ldr	r3, [pc, #408]	; (9d94 <lv_draw_mask_line+0x370>)
    9bfa:	4798      	blx	r3
    9bfc:	e777      	b.n	9aee <lv_draw_mask_line+0xca>
        if(k < 0) {
    9bfe:	3501      	adds	r5, #1
    9c00:	d500      	bpl.n	9c04 <lv_draw_mask_line+0x1e0>
    9c02:	e0f9      	b.n	9df8 <lv_draw_mask_line+0x3d4>
    return LV_DRAW_MASK_RES_CHANGED;
    9c04:	2402      	movs	r4, #2
        if(k <= len) {
    9c06:	42bd      	cmp	r5, r7
    9c08:	dd00      	ble.n	9c0c <lv_draw_mask_line+0x1e8>
    9c0a:	e770      	b.n	9aee <lv_draw_mask_line+0xca>
            _lv_memset_00(&mask_buf[k], len - k);
    9c0c:	1b79      	subs	r1, r7, r5
    9c0e:	1940      	adds	r0, r0, r5
    9c10:	4b60      	ldr	r3, [pc, #384]	; (9d94 <lv_draw_mask_line+0x370>)
    9c12:	4798      	blx	r3
    9c14:	e76b      	b.n	9aee <lv_draw_mask_line+0xca>
    if(x_at_y > abs_x + len) {
    9c16:	4698      	mov	r8, r3
    9c18:	18e9      	adds	r1, r5, r3
    9c1a:	458c      	cmp	ip, r1
    9c1c:	dd06      	ble.n	9c2c <lv_draw_mask_line+0x208>
        if(p->inv) {
    9c1e:	465b      	mov	r3, fp
    9c20:	085c      	lsrs	r4, r3, #1
    9c22:	2601      	movs	r6, #1
    9c24:	4066      	eors	r6, r4
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9c26:	2401      	movs	r4, #1
    9c28:	4034      	ands	r4, r6
    9c2a:	e760      	b.n	9aee <lv_draw_mask_line+0xca>
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
    9c2c:	0211      	lsls	r1, r2, #8
    9c2e:	4379      	muls	r1, r7
    int32_t xsi = xs >> 8;
    9c30:	148e      	asrs	r6, r1, #18
    9c32:	46b4      	mov	ip, r6
    int32_t xsf = xs & 0xFF;
    9c34:	0389      	lsls	r1, r1, #14
    9c36:	0e09      	lsrs	r1, r1, #24
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    9c38:	3201      	adds	r2, #1
    9c3a:	0212      	lsls	r2, r2, #8
    9c3c:	437a      	muls	r2, r7
    int32_t xei = xe >> 8;
    9c3e:	1496      	asrs	r6, r2, #18
    9c40:	46b2      	mov	sl, r6
    k = xsi - abs_x;
    9c42:	4666      	mov	r6, ip
    9c44:	1b76      	subs	r6, r6, r5
    9c46:	46b1      	mov	r9, r6
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    9c48:	45d4      	cmp	ip, sl
    9c4a:	d05c      	beq.n	9d06 <lv_draw_mask_line+0x2e2>
    9c4c:	2f00      	cmp	r7, #0
    9c4e:	db52      	blt.n	9cf6 <lv_draw_mask_line+0x2d2>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
    9c50:	22ff      	movs	r2, #255	; 0xff
    9c52:	1a51      	subs	r1, r2, r1
    9c54:	69e5      	ldr	r5, [r4, #28]
    9c56:	434d      	muls	r5, r1
    9c58:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
    9c5a:	2e00      	cmp	r6, #0
    9c5c:	db19      	blt.n	9c92 <lv_draw_mask_line+0x26e>
    9c5e:	45c8      	cmp	r8, r9
    9c60:	dd17      	ble.n	9c92 <lv_draw_mask_line+0x26e>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    9c62:	4369      	muls	r1, r5
    9c64:	1249      	asrs	r1, r1, #9
    9c66:	b2ca      	uxtb	r2, r1
                if(p->inv) m = 255 - m;
    9c68:	4659      	mov	r1, fp
    9c6a:	0789      	lsls	r1, r1, #30
    9c6c:	d401      	bmi.n	9c72 <lv_draw_mask_line+0x24e>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    9c6e:	43d2      	mvns	r2, r2
    9c70:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9c72:	4649      	mov	r1, r9
    9c74:	1846      	adds	r6, r0, r1
    9c76:	7831      	ldrb	r1, [r6, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9c78:	2af9      	cmp	r2, #249	; 0xf9
    9c7a:	d809      	bhi.n	9c90 <lv_draw_mask_line+0x26c>
    if(mask_new <= LV_OPA_MIN) return 0;
    9c7c:	2a05      	cmp	r2, #5
    9c7e:	d800      	bhi.n	9c82 <lv_draw_mask_line+0x25e>
    9c80:	e099      	b.n	9db6 <lv_draw_mask_line+0x392>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9c82:	434a      	muls	r2, r1
    9c84:	0211      	lsls	r1, r2, #8
    9c86:	1889      	adds	r1, r1, r2
    9c88:	01c9      	lsls	r1, r1, #7
    9c8a:	188a      	adds	r2, r1, r2
    9c8c:	0dd2      	lsrs	r2, r2, #23
    9c8e:	b2d1      	uxtb	r1, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9c90:	7031      	strb	r1, [r6, #0]
            if(k >= 0 && k < len) {
    9c92:	464a      	mov	r2, r9
    9c94:	1c51      	adds	r1, r2, #1
    9c96:	d41d      	bmi.n	9cd4 <lv_draw_mask_line+0x2b0>
    9c98:	4588      	cmp	r8, r1
    9c9a:	dd1b      	ble.n	9cd4 <lv_draw_mask_line+0x2b0>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
    9c9c:	22ff      	movs	r2, #255	; 0xff
    9c9e:	1b55      	subs	r5, r2, r5
    9ca0:	69a2      	ldr	r2, [r4, #24]
    9ca2:	436a      	muls	r2, r5
    9ca4:	1292      	asrs	r2, r2, #10
                m = ((255 - y_inters) * x_inters) >> 9;
    9ca6:	4355      	muls	r5, r2
    9ca8:	126d      	asrs	r5, r5, #9
    9caa:	b2ea      	uxtb	r2, r5
                if(p->inv) m = 255 - m;
    9cac:	2528      	movs	r5, #40	; 0x28
    9cae:	5d65      	ldrb	r5, [r4, r5]
    9cb0:	07ad      	lsls	r5, r5, #30
    9cb2:	d501      	bpl.n	9cb8 <lv_draw_mask_line+0x294>
    9cb4:	43d2      	mvns	r2, r2
    9cb6:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9cb8:	1841      	adds	r1, r0, r1
    9cba:	780d      	ldrb	r5, [r1, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9cbc:	2af9      	cmp	r2, #249	; 0xf9
    9cbe:	d808      	bhi.n	9cd2 <lv_draw_mask_line+0x2ae>
    if(mask_new <= LV_OPA_MIN) return 0;
    9cc0:	2a05      	cmp	r2, #5
    9cc2:	d97a      	bls.n	9dba <lv_draw_mask_line+0x396>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9cc4:	436a      	muls	r2, r5
    9cc6:	0215      	lsls	r5, r2, #8
    9cc8:	18ad      	adds	r5, r5, r2
    9cca:	01ed      	lsls	r5, r5, #7
    9ccc:	18aa      	adds	r2, r5, r2
    9cce:	0dd2      	lsrs	r2, r2, #23
    9cd0:	b2d5      	uxtb	r5, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9cd2:	700d      	strb	r5, [r1, #0]
            if(p->inv) {
    9cd4:	2228      	movs	r2, #40	; 0x28
    9cd6:	5ca2      	ldrb	r2, [r4, r2]
    9cd8:	0792      	lsls	r2, r2, #30
    9cda:	d570      	bpl.n	9dbe <lv_draw_mask_line+0x39a>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    9cdc:	2400      	movs	r4, #0
    9cde:	45c8      	cmp	r8, r9
    9ce0:	da00      	bge.n	9ce4 <lv_draw_mask_line+0x2c0>
    9ce2:	e704      	b.n	9aee <lv_draw_mask_line+0xca>
    return LV_DRAW_MASK_RES_CHANGED;
    9ce4:	3402      	adds	r4, #2
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
    9ce6:	464b      	mov	r3, r9
    9ce8:	2b00      	cmp	r3, #0
    9cea:	da00      	bge.n	9cee <lv_draw_mask_line+0x2ca>
    9cec:	e6ff      	b.n	9aee <lv_draw_mask_line+0xca>
    9cee:	4649      	mov	r1, r9
    9cf0:	4b28      	ldr	r3, [pc, #160]	; (9d94 <lv_draw_mask_line+0x370>)
    9cf2:	4798      	blx	r3
    9cf4:	e6fb      	b.n	9aee <lv_draw_mask_line+0xca>
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    9cf6:	2900      	cmp	r1, #0
    9cf8:	d000      	beq.n	9cfc <lv_draw_mask_line+0x2d8>
    9cfa:	e0cc      	b.n	9e96 <lv_draw_mask_line+0x472>
        k--;
    9cfc:	3901      	subs	r1, #1
    9cfe:	468c      	mov	ip, r1
    9d00:	44e1      	add	r9, ip
        xsf = 0xFF;
    9d02:	3101      	adds	r1, #1
    9d04:	31ff      	adds	r1, #255	; 0xff
        if(k >= 0 && k < len) {
    9d06:	464e      	mov	r6, r9
    9d08:	2e00      	cmp	r6, #0
    9d0a:	db1b      	blt.n	9d44 <lv_draw_mask_line+0x320>
    9d0c:	45c8      	cmp	r8, r9
    9d0e:	dd19      	ble.n	9d44 <lv_draw_mask_line+0x320>
    int32_t xef = xe & 0xFF;
    9d10:	0392      	lsls	r2, r2, #14
    9d12:	0e12      	lsrs	r2, r2, #24
            m = (xsf + xef) >> 1;
    9d14:	1852      	adds	r2, r2, r1
    9d16:	0852      	lsrs	r2, r2, #1
            if(p->inv) m = 255 - m;
    9d18:	4659      	mov	r1, fp
    9d1a:	0789      	lsls	r1, r1, #30
    9d1c:	d501      	bpl.n	9d22 <lv_draw_mask_line+0x2fe>
    9d1e:	43d2      	mvns	r2, r2
    9d20:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
    9d22:	4649      	mov	r1, r9
    9d24:	1846      	adds	r6, r0, r1
    9d26:	7831      	ldrb	r1, [r6, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9d28:	2af9      	cmp	r2, #249	; 0xf9
    9d2a:	d80a      	bhi.n	9d42 <lv_draw_mask_line+0x31e>
    if(mask_new <= LV_OPA_MIN) return 0;
    9d2c:	2a05      	cmp	r2, #5
    9d2e:	d907      	bls.n	9d40 <lv_draw_mask_line+0x31c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9d30:	434a      	muls	r2, r1
    9d32:	0211      	lsls	r1, r2, #8
    9d34:	1889      	adds	r1, r1, r2
    9d36:	01c9      	lsls	r1, r1, #7
    9d38:	188a      	adds	r2, r1, r2
    9d3a:	0dd2      	lsrs	r2, r2, #23
    9d3c:	b2d1      	uxtb	r1, r2
    9d3e:	e000      	b.n	9d42 <lv_draw_mask_line+0x31e>
    if(mask_new <= LV_OPA_MIN) return 0;
    9d40:	2100      	movs	r1, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
    9d42:	7031      	strb	r1, [r6, #0]
        if(p->inv) {
    9d44:	2228      	movs	r2, #40	; 0x28
    9d46:	5ca2      	ldrb	r2, [r4, r2]
    9d48:	0792      	lsls	r2, r2, #30
    9d4a:	d50c      	bpl.n	9d66 <lv_draw_mask_line+0x342>
            k = xsi - abs_x;
    9d4c:	4653      	mov	r3, sl
    9d4e:	1b59      	subs	r1, r3, r5
                return LV_DRAW_MASK_RES_TRANSP;
    9d50:	2400      	movs	r4, #0
            if(k >= len) {
    9d52:	4588      	cmp	r8, r1
    9d54:	dc00      	bgt.n	9d58 <lv_draw_mask_line+0x334>
    9d56:	e6ca      	b.n	9aee <lv_draw_mask_line+0xca>
    return LV_DRAW_MASK_RES_CHANGED;
    9d58:	3402      	adds	r4, #2
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
    9d5a:	2900      	cmp	r1, #0
    9d5c:	da00      	bge.n	9d60 <lv_draw_mask_line+0x33c>
    9d5e:	e6c6      	b.n	9aee <lv_draw_mask_line+0xca>
    9d60:	4b0c      	ldr	r3, [pc, #48]	; (9d94 <lv_draw_mask_line+0x370>)
    9d62:	4798      	blx	r3
    9d64:	e6c3      	b.n	9aee <lv_draw_mask_line+0xca>
        k++;
    9d66:	4649      	mov	r1, r9
    9d68:	3101      	adds	r1, #1
    9d6a:	001a      	movs	r2, r3
    9d6c:	4588      	cmp	r8, r1
    9d6e:	dd00      	ble.n	9d72 <lv_draw_mask_line+0x34e>
    9d70:	000a      	movs	r2, r1
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    9d72:	2400      	movs	r4, #0
    9d74:	2a00      	cmp	r2, #0
    9d76:	d100      	bne.n	9d7a <lv_draw_mask_line+0x356>
    9d78:	e6b9      	b.n	9aee <lv_draw_mask_line+0xca>
    return LV_DRAW_MASK_RES_CHANGED;
    9d7a:	3402      	adds	r4, #2
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    9d7c:	2a00      	cmp	r2, #0
    9d7e:	dc00      	bgt.n	9d82 <lv_draw_mask_line+0x35e>
    9d80:	e6b5      	b.n	9aee <lv_draw_mask_line+0xca>
    9d82:	1a99      	subs	r1, r3, r2
    9d84:	1880      	adds	r0, r0, r2
    9d86:	4b03      	ldr	r3, [pc, #12]	; (9d94 <lv_draw_mask_line+0x370>)
    9d88:	4798      	blx	r3
    9d8a:	e6b0      	b.n	9aee <lv_draw_mask_line+0xca>
    if(mask_new <= LV_OPA_MIN) return 0;
    9d8c:	2500      	movs	r5, #0
    9d8e:	e0a1      	b.n	9ed4 <lv_draw_mask_line+0x4b0>
    9d90:	2500      	movs	r5, #0
    9d92:	e0c2      	b.n	9f1a <lv_draw_mask_line+0x4f6>
    9d94:	00010fe5 	.word	0x00010fe5
            k += 2;
    9d98:	464a      	mov	r2, r9
    9d9a:	3201      	adds	r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    9d9c:	2401      	movs	r4, #1
    9d9e:	4590      	cmp	r8, r2
    9da0:	da00      	bge.n	9da4 <lv_draw_mask_line+0x380>
    9da2:	e6a4      	b.n	9aee <lv_draw_mask_line+0xca>
    return LV_DRAW_MASK_RES_CHANGED;
    9da4:	3401      	adds	r4, #1
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
    9da6:	2a00      	cmp	r2, #0
    9da8:	da00      	bge.n	9dac <lv_draw_mask_line+0x388>
    9daa:	e6a0      	b.n	9aee <lv_draw_mask_line+0xca>
    9dac:	1a99      	subs	r1, r3, r2
    9dae:	1880      	adds	r0, r0, r2
    9db0:	4b62      	ldr	r3, [pc, #392]	; (9f3c <lv_draw_mask_line+0x518>)
    9db2:	4798      	blx	r3
    9db4:	e69b      	b.n	9aee <lv_draw_mask_line+0xca>
    if(mask_new <= LV_OPA_MIN) return 0;
    9db6:	2100      	movs	r1, #0
    9db8:	e76a      	b.n	9c90 <lv_draw_mask_line+0x26c>
    9dba:	2500      	movs	r5, #0
    9dbc:	e789      	b.n	9cd2 <lv_draw_mask_line+0x2ae>
            k++;
    9dbe:	4649      	mov	r1, r9
    9dc0:	3102      	adds	r1, #2
    9dc2:	001a      	movs	r2, r3
    9dc4:	4588      	cmp	r8, r1
    9dc6:	dd00      	ble.n	9dca <lv_draw_mask_line+0x3a6>
    9dc8:	000a      	movs	r2, r1
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    9dca:	2400      	movs	r4, #0
    9dcc:	2a00      	cmp	r2, #0
    9dce:	d100      	bne.n	9dd2 <lv_draw_mask_line+0x3ae>
    9dd0:	e68d      	b.n	9aee <lv_draw_mask_line+0xca>
    return LV_DRAW_MASK_RES_CHANGED;
    9dd2:	3402      	adds	r4, #2
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    9dd4:	2a00      	cmp	r2, #0
    9dd6:	dc00      	bgt.n	9dda <lv_draw_mask_line+0x3b6>
    9dd8:	e689      	b.n	9aee <lv_draw_mask_line+0xca>
    9dda:	1a99      	subs	r1, r3, r2
    9ddc:	1880      	adds	r0, r0, r2
    9dde:	4b57      	ldr	r3, [pc, #348]	; (9f3c <lv_draw_mask_line+0x518>)
    9de0:	4798      	blx	r3
    9de2:	e684      	b.n	9aee <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    9de4:	2401      	movs	r4, #1
    9de6:	e682      	b.n	9aee <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
    9de8:	2401      	movs	r4, #1
    9dea:	e680      	b.n	9aee <lv_draw_mask_line+0xca>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    9dec:	2401      	movs	r4, #1
    9dee:	e67e      	b.n	9aee <lv_draw_mask_line+0xca>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    9df0:	2400      	movs	r4, #0
    9df2:	e67c      	b.n	9aee <lv_draw_mask_line+0xca>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    9df4:	2400      	movs	r4, #0
    9df6:	e67a      	b.n	9aee <lv_draw_mask_line+0xca>
            return LV_DRAW_MASK_RES_TRANSP;
    9df8:	2400      	movs	r4, #0
    9dfa:	e678      	b.n	9aee <lv_draw_mask_line+0xca>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    9dfc:	001f      	movs	r7, r3
    9dfe:	18eb      	adds	r3, r5, r3
    9e00:	4359      	muls	r1, r3
    9e02:	1289      	asrs	r1, r1, #10
        if(y_at_x < abs_y) {
    9e04:	428a      	cmp	r2, r1
    9e06:	dd00      	ble.n	9e0a <lv_draw_mask_line+0x3e6>
    9e08:	e68c      	b.n	9b24 <lv_draw_mask_line+0x100>
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
    9e0a:	0212      	lsls	r2, r2, #8
    9e0c:	69a3      	ldr	r3, [r4, #24]
    9e0e:	435a      	muls	r2, r3
    9e10:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
    9e12:	1211      	asrs	r1, r2, #8
    int32_t xef = xe & 0xFF;
    9e14:	23ff      	movs	r3, #255	; 0xff
    9e16:	401a      	ands	r2, r3
    if(xef == 0) px_h = 255;
    9e18:	d039      	beq.n	9e8e <lv_draw_mask_line+0x46a>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
    9e1a:	469c      	mov	ip, r3
    9e1c:	1a9b      	subs	r3, r3, r2
    9e1e:	4698      	mov	r8, r3
    9e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9e22:	4642      	mov	r2, r8
    9e24:	4353      	muls	r3, r2
    9e26:	121b      	asrs	r3, r3, #8
    9e28:	4662      	mov	r2, ip
    9e2a:	1ad2      	subs	r2, r2, r3
    int32_t k = xei - abs_x;
    9e2c:	1b49      	subs	r1, r1, r5
    9e2e:	468c      	mov	ip, r1
        if(k >= 0 && k < len) {
    9e30:	d41a      	bmi.n	9e68 <lv_draw_mask_line+0x444>
    9e32:	42b9      	cmp	r1, r7
    9e34:	da18      	bge.n	9e68 <lv_draw_mask_line+0x444>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    9e36:	4641      	mov	r1, r8
    9e38:	434b      	muls	r3, r1
    9e3a:	125b      	asrs	r3, r3, #9
    9e3c:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
    9e3e:	4659      	mov	r1, fp
    9e40:	0789      	lsls	r1, r1, #30
    9e42:	d401      	bmi.n	9e48 <lv_draw_mask_line+0x424>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    9e44:	43db      	mvns	r3, r3
    9e46:	b2db      	uxtb	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
    9e48:	4661      	mov	r1, ip
    9e4a:	1845      	adds	r5, r0, r1
    9e4c:	7829      	ldrb	r1, [r5, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9e4e:	2bf9      	cmp	r3, #249	; 0xf9
    9e50:	d809      	bhi.n	9e66 <lv_draw_mask_line+0x442>
    if(mask_new <= LV_OPA_MIN) return 0;
    9e52:	2b05      	cmp	r3, #5
    9e54:	d800      	bhi.n	9e58 <lv_draw_mask_line+0x434>
    9e56:	e673      	b.n	9b40 <lv_draw_mask_line+0x11c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9e58:	434b      	muls	r3, r1
    9e5a:	0219      	lsls	r1, r3, #8
    9e5c:	18c9      	adds	r1, r1, r3
    9e5e:	01c9      	lsls	r1, r1, #7
    9e60:	18cb      	adds	r3, r1, r3
    9e62:	0ddb      	lsrs	r3, r3, #23
    9e64:	b2d9      	uxtb	r1, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
    9e66:	7029      	strb	r1, [r5, #0]
        k++;
    9e68:	4663      	mov	r3, ip
    9e6a:	1c5d      	adds	r5, r3, #1
            if(p->inv) m = 255 - m;
    9e6c:	2328      	movs	r3, #40	; 0x28
    9e6e:	4698      	mov	r8, r3
    9e70:	2602      	movs	r6, #2
    9e72:	e66f      	b.n	9b54 <lv_draw_mask_line+0x130>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    9e74:	001f      	movs	r7, r3
    9e76:	195b      	adds	r3, r3, r5
    9e78:	4359      	muls	r1, r3
    9e7a:	1289      	asrs	r1, r1, #10
        if(y_at_x > abs_y) {
    9e7c:	4291      	cmp	r1, r2
    9e7e:	dd00      	ble.n	9e82 <lv_draw_mask_line+0x45e>
    9e80:	e657      	b.n	9b32 <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    9e82:	3201      	adds	r2, #1
    9e84:	0212      	lsls	r2, r2, #8
    9e86:	69a3      	ldr	r3, [r4, #24]
    9e88:	435a      	muls	r2, r3
    9e8a:	1292      	asrs	r2, r2, #10
    9e8c:	e7c1      	b.n	9e12 <lv_draw_mask_line+0x3ee>
    int32_t k = xei - abs_x;
    9e8e:	1b4d      	subs	r5, r1, r5
    9e90:	46ac      	mov	ip, r5
    if(xef == 0) px_h = 255;
    9e92:	22ff      	movs	r2, #255	; 0xff
    9e94:	e7ea      	b.n	9e6c <lv_draw_mask_line+0x448>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
    9e96:	69e2      	ldr	r2, [r4, #28]
    9e98:	4252      	negs	r2, r2
    9e9a:	434a      	muls	r2, r1
    9e9c:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
    9e9e:	2e00      	cmp	r6, #0
    9ea0:	db19      	blt.n	9ed6 <lv_draw_mask_line+0x4b2>
    9ea2:	45c8      	cmp	r8, r9
    9ea4:	dd17      	ble.n	9ed6 <lv_draw_mask_line+0x4b2>
                m = (y_inters * xsf) >> 9;
    9ea6:	4351      	muls	r1, r2
    9ea8:	1249      	asrs	r1, r1, #9
    9eaa:	b2c9      	uxtb	r1, r1
                if(p->inv) m = 255 - m;
    9eac:	465d      	mov	r5, fp
    9eae:	07ad      	lsls	r5, r5, #30
    9eb0:	d501      	bpl.n	9eb6 <lv_draw_mask_line+0x492>
    9eb2:	43c9      	mvns	r1, r1
    9eb4:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9eb6:	464d      	mov	r5, r9
    9eb8:	1946      	adds	r6, r0, r5
    9eba:	7835      	ldrb	r5, [r6, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9ebc:	29f9      	cmp	r1, #249	; 0xf9
    9ebe:	d809      	bhi.n	9ed4 <lv_draw_mask_line+0x4b0>
    if(mask_new <= LV_OPA_MIN) return 0;
    9ec0:	2905      	cmp	r1, #5
    9ec2:	d800      	bhi.n	9ec6 <lv_draw_mask_line+0x4a2>
    9ec4:	e762      	b.n	9d8c <lv_draw_mask_line+0x368>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9ec6:	4369      	muls	r1, r5
    9ec8:	020d      	lsls	r5, r1, #8
    9eca:	186d      	adds	r5, r5, r1
    9ecc:	01ed      	lsls	r5, r5, #7
    9ece:	1869      	adds	r1, r5, r1
    9ed0:	0dc9      	lsrs	r1, r1, #23
    9ed2:	b2cd      	uxtb	r5, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9ed4:	7035      	strb	r5, [r6, #0]
            if(k >= 0 && k < len) {
    9ed6:	4649      	mov	r1, r9
    9ed8:	3901      	subs	r1, #1
    9eda:	d41f      	bmi.n	9f1c <lv_draw_mask_line+0x4f8>
    9edc:	4588      	cmp	r8, r1
    9ede:	dd1d      	ble.n	9f1c <lv_draw_mask_line+0x4f8>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
    9ee0:	25ff      	movs	r5, #255	; 0xff
    9ee2:	1aaa      	subs	r2, r5, r2
    9ee4:	69a5      	ldr	r5, [r4, #24]
    9ee6:	426d      	negs	r5, r5
    9ee8:	4355      	muls	r5, r2
    9eea:	12ad      	asrs	r5, r5, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    9eec:	436a      	muls	r2, r5
    9eee:	1252      	asrs	r2, r2, #9
    9ef0:	b2d2      	uxtb	r2, r2
                if(p->inv) m = 255 - m;
    9ef2:	2528      	movs	r5, #40	; 0x28
    9ef4:	5d65      	ldrb	r5, [r4, r5]
    9ef6:	07ad      	lsls	r5, r5, #30
    9ef8:	d401      	bmi.n	9efe <lv_draw_mask_line+0x4da>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    9efa:	43d2      	mvns	r2, r2
    9efc:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9efe:	1846      	adds	r6, r0, r1
    9f00:	7835      	ldrb	r5, [r6, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    9f02:	2af9      	cmp	r2, #249	; 0xf9
    9f04:	d809      	bhi.n	9f1a <lv_draw_mask_line+0x4f6>
    if(mask_new <= LV_OPA_MIN) return 0;
    9f06:	2a05      	cmp	r2, #5
    9f08:	d800      	bhi.n	9f0c <lv_draw_mask_line+0x4e8>
    9f0a:	e741      	b.n	9d90 <lv_draw_mask_line+0x36c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    9f0c:	436a      	muls	r2, r5
    9f0e:	0215      	lsls	r5, r2, #8
    9f10:	18ad      	adds	r5, r5, r2
    9f12:	01ed      	lsls	r5, r5, #7
    9f14:	18aa      	adds	r2, r5, r2
    9f16:	0dd2      	lsrs	r2, r2, #23
    9f18:	b2d5      	uxtb	r5, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    9f1a:	7035      	strb	r5, [r6, #0]
            if(p->inv) {
    9f1c:	2228      	movs	r2, #40	; 0x28
    9f1e:	5ca2      	ldrb	r2, [r4, r2]
    9f20:	0792      	lsls	r2, r2, #30
    9f22:	d400      	bmi.n	9f26 <lv_draw_mask_line+0x502>
    9f24:	e738      	b.n	9d98 <lv_draw_mask_line+0x374>
    return LV_DRAW_MASK_RES_CHANGED;
    9f26:	2402      	movs	r4, #2
                if(k > len) k = len;
    9f28:	4588      	cmp	r8, r1
    9f2a:	da00      	bge.n	9f2e <lv_draw_mask_line+0x50a>
    9f2c:	e5df      	b.n	9aee <lv_draw_mask_line+0xca>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
    9f2e:	2900      	cmp	r1, #0
    9f30:	dc00      	bgt.n	9f34 <lv_draw_mask_line+0x510>
    9f32:	e5dc      	b.n	9aee <lv_draw_mask_line+0xca>
    9f34:	4b01      	ldr	r3, [pc, #4]	; (9f3c <lv_draw_mask_line+0x518>)
    9f36:	4798      	blx	r3
    9f38:	e5d9      	b.n	9aee <lv_draw_mask_line+0xca>
    9f3a:	46c0      	nop			; (mov r8, r8)
    9f3c:	00010fe5 	.word	0x00010fe5

00009f40 <lv_draw_mask_radius>:
{
    9f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f42:	46de      	mov	lr, fp
    9f44:	4657      	mov	r7, sl
    9f46:	464e      	mov	r6, r9
    9f48:	4645      	mov	r5, r8
    9f4a:	b5e0      	push	{r5, r6, r7, lr}
    9f4c:	b08d      	sub	sp, #52	; 0x34
    9f4e:	9001      	str	r0, [sp, #4]
    9f50:	4689      	mov	r9, r1
    9f52:	9300      	str	r3, [sp, #0]
    9f54:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
    9f56:	7cac      	ldrb	r4, [r5, #18]
    9f58:	07e4      	lsls	r4, r4, #31
    9f5a:	0fe4      	lsrs	r4, r4, #31
    int32_t radius = p->cfg.radius;
    9f5c:	2310      	movs	r3, #16
    9f5e:	5eee      	ldrsh	r6, [r5, r3]
    lv_area_copy(&rect, &p->cfg.rect);
    9f60:	002f      	movs	r7, r5
    9f62:	3708      	adds	r7, #8
    9f64:	2300      	movs	r3, #0
        *d8 = *s8;
    9f66:	a80a      	add	r0, sp, #40	; 0x28
    9f68:	5cf9      	ldrb	r1, [r7, r3]
    9f6a:	5419      	strb	r1, [r3, r0]
    9f6c:	3301      	adds	r3, #1
    while(len) {
    9f6e:	2b08      	cmp	r3, #8
    9f70:	d1fa      	bne.n	9f68 <lv_draw_mask_radius+0x28>
    if(outer == false) {
    9f72:	2c00      	cmp	r4, #0
    9f74:	d145      	bne.n	a002 <lv_draw_mask_radius+0xc2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    9f76:	ab0a      	add	r3, sp, #40	; 0x28
    9f78:	2102      	movs	r1, #2
    9f7a:	5e5b      	ldrsh	r3, [r3, r1]
            return LV_DRAW_MASK_RES_TRANSP;
    9f7c:	2000      	movs	r0, #0
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    9f7e:	4293      	cmp	r3, r2
    9f80:	dc4a      	bgt.n	a018 <lv_draw_mask_radius+0xd8>
    9f82:	ab0a      	add	r3, sp, #40	; 0x28
    9f84:	2106      	movs	r1, #6
    9f86:	5e5b      	ldrsh	r3, [r3, r1]
    9f88:	4293      	cmp	r3, r2
    9f8a:	db45      	blt.n	a018 <lv_draw_mask_radius+0xd8>
    int32_t radius = p->cfg.radius;
    9f8c:	46b4      	mov	ip, r6
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    9f8e:	ab0a      	add	r3, sp, #40	; 0x28
    9f90:	2000      	movs	r0, #0
    9f92:	5e1b      	ldrsh	r3, [r3, r0]
    9f94:	469a      	mov	sl, r3
    9f96:	18f3      	adds	r3, r6, r3
    9f98:	4599      	cmp	r9, r3
    9f9a:	db08      	blt.n	9fae <lv_draw_mask_radius+0x6e>
    9f9c:	9b00      	ldr	r3, [sp, #0]
    9f9e:	444b      	add	r3, r9
    9fa0:	0018      	movs	r0, r3
    9fa2:	ab0a      	add	r3, sp, #40	; 0x28
    9fa4:	2104      	movs	r1, #4
    9fa6:	5e5b      	ldrsh	r3, [r3, r1]
    9fa8:	1b9b      	subs	r3, r3, r6
    9faa:	4298      	cmp	r0, r3
    9fac:	dd0b      	ble.n	9fc6 <lv_draw_mask_radius+0x86>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    9fae:	a80a      	add	r0, sp, #40	; 0x28
    9fb0:	2702      	movs	r7, #2
    9fb2:	5fc0      	ldrsh	r0, [r0, r7]
    9fb4:	1987      	adds	r7, r0, r6
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    9fb6:	42ba      	cmp	r2, r7
    9fb8:	db62      	blt.n	a080 <lv_draw_mask_radius+0x140>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    9fba:	af0a      	add	r7, sp, #40	; 0x28
    9fbc:	2106      	movs	r1, #6
    9fbe:	5e7f      	ldrsh	r7, [r7, r1]
    9fc0:	1bbf      	subs	r7, r7, r6
    9fc2:	42ba      	cmp	r2, r7
    9fc4:	dc5c      	bgt.n	a080 <lv_draw_mask_radius+0x140>
        if(outer == false) {
    9fc6:	2c00      	cmp	r4, #0
    9fc8:	d13c      	bne.n	a044 <lv_draw_mask_radius+0x104>
            int32_t last =  rect.x1 - abs_x;
    9fca:	4653      	mov	r3, sl
    9fcc:	464a      	mov	r2, r9
    9fce:	1a9c      	subs	r4, r3, r2
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    9fd0:	9d00      	ldr	r5, [sp, #0]
    9fd2:	2000      	movs	r0, #0
    9fd4:	42ac      	cmp	r4, r5
    9fd6:	dc1f      	bgt.n	a018 <lv_draw_mask_radius+0xd8>
            if(last >= 0) {
    9fd8:	2c00      	cmp	r4, #0
    9fda:	db03      	blt.n	9fe4 <lv_draw_mask_radius+0xa4>
                _lv_memset_00(&mask_buf[0], last);
    9fdc:	0021      	movs	r1, r4
    9fde:	9801      	ldr	r0, [sp, #4]
    9fe0:	4ba2      	ldr	r3, [pc, #648]	; (a26c <lv_draw_mask_radius+0x32c>)
    9fe2:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
    9fe4:	ab0a      	add	r3, sp, #40	; 0x28
    9fe6:	2004      	movs	r0, #4
    9fe8:	5e18      	ldrsh	r0, [r3, r0]
    9fea:	464b      	mov	r3, r9
    9fec:	1ac0      	subs	r0, r0, r3
    9fee:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    9ff0:	2800      	cmp	r0, #0
    9ff2:	dc00      	bgt.n	9ff6 <lv_draw_mask_radius+0xb6>
    9ff4:	e20b      	b.n	a40e <lv_draw_mask_radius+0x4ce>
            else if(first < len) {
    9ff6:	4285      	cmp	r5, r0
    9ff8:	dc15      	bgt.n	a026 <lv_draw_mask_radius+0xe6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    9ffa:	2c00      	cmp	r4, #0
    9ffc:	d01e      	beq.n	a03c <lv_draw_mask_radius+0xfc>
            else return LV_DRAW_MASK_RES_CHANGED;
    9ffe:	2002      	movs	r0, #2
    a000:	e00a      	b.n	a018 <lv_draw_mask_radius+0xd8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    a002:	ab0a      	add	r3, sp, #40	; 0x28
    a004:	2102      	movs	r1, #2
    a006:	5e5b      	ldrsh	r3, [r3, r1]
            return LV_DRAW_MASK_RES_FULL_COVER;
    a008:	2001      	movs	r0, #1
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    a00a:	4293      	cmp	r3, r2
    a00c:	dc04      	bgt.n	a018 <lv_draw_mask_radius+0xd8>
    a00e:	ab0a      	add	r3, sp, #40	; 0x28
    a010:	2106      	movs	r1, #6
    a012:	5e5b      	ldrsh	r3, [r3, r1]
    a014:	4293      	cmp	r3, r2
    a016:	dab9      	bge.n	9f8c <lv_draw_mask_radius+0x4c>
}
    a018:	b00d      	add	sp, #52	; 0x34
    a01a:	bc3c      	pop	{r2, r3, r4, r5}
    a01c:	4690      	mov	r8, r2
    a01e:	4699      	mov	r9, r3
    a020:	46a2      	mov	sl, r4
    a022:	46ab      	mov	fp, r5
    a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
                _lv_memset_00(&mask_buf[first], len - first);
    a026:	9b00      	ldr	r3, [sp, #0]
    a028:	1a19      	subs	r1, r3, r0
    a02a:	9b01      	ldr	r3, [sp, #4]
    a02c:	469c      	mov	ip, r3
    a02e:	4460      	add	r0, ip
    a030:	4b8e      	ldr	r3, [pc, #568]	; (a26c <lv_draw_mask_radius+0x32c>)
    a032:	4798      	blx	r3
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    a034:	2c00      	cmp	r4, #0
    a036:	d1e2      	bne.n	9ffe <lv_draw_mask_radius+0xbe>
            else return LV_DRAW_MASK_RES_CHANGED;
    a038:	2002      	movs	r0, #2
    a03a:	e7ed      	b.n	a018 <lv_draw_mask_radius+0xd8>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    a03c:	4285      	cmp	r5, r0
    a03e:	d1de      	bne.n	9ffe <lv_draw_mask_radius+0xbe>
    a040:	2001      	movs	r0, #1
    a042:	e7e9      	b.n	a018 <lv_draw_mask_radius+0xd8>
            int32_t first = rect.x1 - abs_x;
    a044:	4653      	mov	r3, sl
    a046:	464a      	mov	r2, r9
    a048:	1a9b      	subs	r3, r3, r2
    a04a:	43da      	mvns	r2, r3
    a04c:	17d2      	asrs	r2, r2, #31
    a04e:	4013      	ands	r3, r2
            if(first <= len) {
    a050:	9a00      	ldr	r2, [sp, #0]
        return LV_DRAW_MASK_RES_CHANGED;
    a052:	2002      	movs	r0, #2
            if(first <= len) {
    a054:	4293      	cmp	r3, r2
    a056:	dcdf      	bgt.n	a018 <lv_draw_mask_radius+0xd8>
                int32_t last =  rect.x2 - abs_x - first + 1;
    a058:	a90a      	add	r1, sp, #40	; 0x28
    a05a:	2004      	movs	r0, #4
    a05c:	5e09      	ldrsh	r1, [r1, r0]
    a05e:	4648      	mov	r0, r9
    a060:	1a09      	subs	r1, r1, r0
    a062:	1ac9      	subs	r1, r1, r3
    a064:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
    a066:	1858      	adds	r0, r3, r1
    a068:	4282      	cmp	r2, r0
    a06a:	da00      	bge.n	a06e <lv_draw_mask_radius+0x12e>
    a06c:	1ad1      	subs	r1, r2, r3
        return LV_DRAW_MASK_RES_CHANGED;
    a06e:	2002      	movs	r0, #2
                if(last >= 0) {
    a070:	2900      	cmp	r1, #0
    a072:	dbd1      	blt.n	a018 <lv_draw_mask_radius+0xd8>
                    _lv_memset_00(&mask_buf[first], last);
    a074:	9a01      	ldr	r2, [sp, #4]
    a076:	18d0      	adds	r0, r2, r3
    a078:	4b7c      	ldr	r3, [pc, #496]	; (a26c <lv_draw_mask_radius+0x32c>)
    a07a:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
    a07c:	2002      	movs	r0, #2
    a07e:	e7cb      	b.n	a018 <lv_draw_mask_radius+0xd8>
    a080:	ab0a      	add	r3, sp, #40	; 0x28
    a082:	2104      	movs	r1, #4
    a084:	5e5f      	ldrsh	r7, [r3, r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    a086:	b280      	uxth	r0, r0
    a088:	88db      	ldrh	r3, [r3, #6]
    a08a:	3301      	adds	r3, #1
    a08c:	1a1b      	subs	r3, r3, r0
    int32_t h = lv_area_get_height(&rect);
    a08e:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
    a090:	1a12      	subs	r2, r2, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
    a092:	0030      	movs	r0, r6
    a094:	4370      	muls	r0, r6
    a096:	4680      	mov	r8, r0
    if(abs_y < radius || abs_y > h - radius - 1) {
    a098:	b212      	sxth	r2, r2
    a09a:	4594      	cmp	ip, r2
    a09c:	dd00      	ble.n	a0a0 <lv_draw_mask_radius+0x160>
    a09e:	e1e0      	b.n	a462 <lv_draw_mask_radius+0x522>
    a0a0:	1b98      	subs	r0, r3, r6
    a0a2:	3801      	subs	r0, #1
    a0a4:	4282      	cmp	r2, r0
    a0a6:	dd00      	ble.n	a0aa <lv_draw_mask_radius+0x16a>
    a0a8:	e1b3      	b.n	a412 <lv_draw_mask_radius+0x4d2>
    return LV_DRAW_MASK_RES_CHANGED;
    a0aa:	2002      	movs	r0, #2
    a0ac:	e7b4      	b.n	a018 <lv_draw_mask_radius+0xd8>
                x0.f = p->y_prev_x.f;
    a0ae:	8b6b      	ldrh	r3, [r5, #26]
    a0b0:	aa06      	add	r2, sp, #24
    a0b2:	8053      	strh	r3, [r2, #2]
                x0.i = p->y_prev_x.i;
    a0b4:	8b2b      	ldrh	r3, [r5, #24]
    a0b6:	8013      	strh	r3, [r2, #0]
    a0b8:	e1e9      	b.n	a48e <lv_draw_mask_radius+0x54e>
        if(radius <= 256) sqrt_mask = 0x800;
    a0ba:	2180      	movs	r1, #128	; 0x80
    a0bc:	0109      	lsls	r1, r1, #4
    a0be:	9102      	str	r1, [sp, #8]
    a0c0:	e1af      	b.n	a422 <lv_draw_mask_radius+0x4e2>
                x1.f = p->y_prev_x.f;
    a0c2:	ab07      	add	r3, sp, #28
    a0c4:	8b6a      	ldrh	r2, [r5, #26]
    a0c6:	805a      	strh	r2, [r3, #2]
                x1.i = p->y_prev_x.i;
    a0c8:	8b2a      	ldrh	r2, [r5, #24]
    a0ca:	801a      	strh	r2, [r3, #0]
    a0cc:	e1b8      	b.n	a440 <lv_draw_mask_radius+0x500>
        if(x0.i == x1.i - 1 && x1.f == 0) {
    a0ce:	a907      	add	r1, sp, #28
    a0d0:	8849      	ldrh	r1, [r1, #2]
    a0d2:	2900      	cmp	r1, #0
    a0d4:	d000      	beq.n	a0d8 <lv_draw_mask_radius+0x198>
    a0d6:	e1f5      	b.n	a4c4 <lv_draw_mask_radius+0x584>
            x1.i--;
    a0d8:	a907      	add	r1, sp, #28
    a0da:	3a01      	subs	r2, #1
    a0dc:	800a      	strh	r2, [r1, #0]
            x1.f = 0xFF;
    a0de:	22ff      	movs	r2, #255	; 0xff
    a0e0:	804a      	strh	r2, [r1, #2]
    a0e2:	e1ef      	b.n	a4c4 <lv_draw_mask_radius+0x584>
            lv_opa_t m = (x0.f + x1.f) >> 1;
    a0e4:	a906      	add	r1, sp, #24
    a0e6:	8849      	ldrh	r1, [r1, #2]
    a0e8:	ad07      	add	r5, sp, #28
    a0ea:	886d      	ldrh	r5, [r5, #2]
    a0ec:	1949      	adds	r1, r1, r5
    a0ee:	1049      	asrs	r1, r1, #1
    a0f0:	b2cf      	uxtb	r7, r1
            if(outer) m = 255 - m;
    a0f2:	2c00      	cmp	r4, #0
    a0f4:	d001      	beq.n	a0fa <lv_draw_mask_radius+0x1ba>
    a0f6:	43ff      	mvns	r7, r7
    a0f8:	b2ff      	uxtb	r7, r7
            int32_t ofs = radius - x0.i - 1;
    a0fa:	1af3      	subs	r3, r6, r3
    a0fc:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
    a0fe:	18c1      	adds	r1, r0, r3
    a100:	d412      	bmi.n	a128 <lv_draw_mask_radius+0x1e8>
    a102:	9d00      	ldr	r5, [sp, #0]
    a104:	42a9      	cmp	r1, r5
    a106:	da0f      	bge.n	a128 <lv_draw_mask_radius+0x1e8>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a108:	9d01      	ldr	r5, [sp, #4]
    a10a:	186e      	adds	r6, r5, r1
    a10c:	7835      	ldrb	r5, [r6, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a10e:	2ff9      	cmp	r7, #249	; 0xf9
    a110:	d809      	bhi.n	a126 <lv_draw_mask_radius+0x1e6>
    if(mask_new <= LV_OPA_MIN) return 0;
    a112:	2f05      	cmp	r7, #5
    a114:	d936      	bls.n	a184 <lv_draw_mask_radius+0x244>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a116:	437d      	muls	r5, r7
    a118:	46ac      	mov	ip, r5
    a11a:	022d      	lsls	r5, r5, #8
    a11c:	4465      	add	r5, ip
    a11e:	01ed      	lsls	r5, r5, #7
    a120:	4465      	add	r5, ip
    a122:	0ded      	lsrs	r5, r5, #23
    a124:	b2ed      	uxtb	r5, r5
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a126:	7035      	strb	r5, [r6, #0]
            int32_t kr = k + (w - ofs - 1);
    a128:	1ad2      	subs	r2, r2, r3
    a12a:	3a01      	subs	r2, #1
            if(kr >= 0 && kr < len) {
    a12c:	1815      	adds	r5, r2, r0
    a12e:	d411      	bmi.n	a154 <lv_draw_mask_radius+0x214>
    a130:	9b00      	ldr	r3, [sp, #0]
    a132:	429d      	cmp	r5, r3
    a134:	da0e      	bge.n	a154 <lv_draw_mask_radius+0x214>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a136:	9b01      	ldr	r3, [sp, #4]
    a138:	195a      	adds	r2, r3, r5
    a13a:	7813      	ldrb	r3, [r2, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a13c:	2ff9      	cmp	r7, #249	; 0xf9
    a13e:	d808      	bhi.n	a152 <lv_draw_mask_radius+0x212>
    if(mask_new <= LV_OPA_MIN) return 0;
    a140:	2f05      	cmp	r7, #5
    a142:	d921      	bls.n	a188 <lv_draw_mask_radius+0x248>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a144:	435f      	muls	r7, r3
    a146:	023b      	lsls	r3, r7, #8
    a148:	19db      	adds	r3, r3, r7
    a14a:	01db      	lsls	r3, r3, #7
    a14c:	19df      	adds	r7, r3, r7
    a14e:	0dff      	lsrs	r7, r7, #23
    a150:	b2fb      	uxtb	r3, r7
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a152:	7013      	strb	r3, [r2, #0]
            if(outer == false) {
    a154:	2c00      	cmp	r4, #0
    a156:	d019      	beq.n	a18c <lv_draw_mask_radius+0x24c>
                kl++;
    a158:	1c48      	adds	r0, r1, #1
    a15a:	43c3      	mvns	r3, r0
    a15c:	17db      	asrs	r3, r3, #31
    a15e:	4018      	ands	r0, r3
                if(len_tmp + first > len) len_tmp = len - first;
    a160:	9a00      	ldr	r2, [sp, #0]
    a162:	0013      	movs	r3, r2
    a164:	1a11      	subs	r1, r2, r0
    a166:	4295      	cmp	r5, r2
    a168:	dc00      	bgt.n	a16c <lv_draw_mask_radius+0x22c>
                int32_t len_tmp = kr - first;
    a16a:	1a29      	subs	r1, r5, r0
                if(first < len && len_tmp >= 0) {
    a16c:	4298      	cmp	r0, r3
    a16e:	db00      	blt.n	a172 <lv_draw_mask_radius+0x232>
    a170:	e12d      	b.n	a3ce <lv_draw_mask_radius+0x48e>
    a172:	2900      	cmp	r1, #0
    a174:	da00      	bge.n	a178 <lv_draw_mask_radius+0x238>
    a176:	e12a      	b.n	a3ce <lv_draw_mask_radius+0x48e>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    a178:	9b01      	ldr	r3, [sp, #4]
    a17a:	469c      	mov	ip, r3
    a17c:	4460      	add	r0, ip
    a17e:	4b3b      	ldr	r3, [pc, #236]	; (a26c <lv_draw_mask_radius+0x32c>)
    a180:	4798      	blx	r3
    a182:	e124      	b.n	a3ce <lv_draw_mask_radius+0x48e>
    if(mask_new <= LV_OPA_MIN) return 0;
    a184:	2500      	movs	r5, #0
    a186:	e7ce      	b.n	a126 <lv_draw_mask_radius+0x1e6>
    a188:	2300      	movs	r3, #0
    a18a:	e7e2      	b.n	a152 <lv_draw_mask_radius+0x212>
                if(kl > len)  {
    a18c:	9c00      	ldr	r4, [sp, #0]
    a18e:	42a1      	cmp	r1, r4
    a190:	dd00      	ble.n	a194 <lv_draw_mask_radius+0x254>
    a192:	e13a      	b.n	a40a <lv_draw_mask_radius+0x4ca>
                if(kl >= 0) {
    a194:	2900      	cmp	r1, #0
    a196:	db02      	blt.n	a19e <lv_draw_mask_radius+0x25e>
                    _lv_memset_00(&mask_buf[0], kl);
    a198:	9801      	ldr	r0, [sp, #4]
    a19a:	4b34      	ldr	r3, [pc, #208]	; (a26c <lv_draw_mask_radius+0x32c>)
    a19c:	4798      	blx	r3
                if(kr < 0) {
    a19e:	1c68      	adds	r0, r5, #1
    a1a0:	d500      	bpl.n	a1a4 <lv_draw_mask_radius+0x264>
    a1a2:	e132      	b.n	a40a <lv_draw_mask_radius+0x4ca>
                if(kr <= len) {
    a1a4:	42a0      	cmp	r0, r4
    a1a6:	dd00      	ble.n	a1aa <lv_draw_mask_radius+0x26a>
    a1a8:	e111      	b.n	a3ce <lv_draw_mask_radius+0x48e>
                    _lv_memset_00(&mask_buf[kr], len - kr);
    a1aa:	9b00      	ldr	r3, [sp, #0]
    a1ac:	1a19      	subs	r1, r3, r0
    a1ae:	9b01      	ldr	r3, [sp, #4]
    a1b0:	469c      	mov	ip, r3
    a1b2:	4460      	add	r0, ip
    a1b4:	4b2d      	ldr	r3, [pc, #180]	; (a26c <lv_draw_mask_radius+0x32c>)
    a1b6:	4798      	blx	r3
    a1b8:	e109      	b.n	a3ce <lv_draw_mask_radius+0x48e>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
    a1ba:	ad09      	add	r5, sp, #36	; 0x24
    a1bc:	9b05      	ldr	r3, [sp, #20]
    a1be:	0018      	movs	r0, r3
    a1c0:	4358      	muls	r0, r3
    a1c2:	4643      	mov	r3, r8
    a1c4:	1a18      	subs	r0, r3, r0
    a1c6:	9a02      	ldr	r2, [sp, #8]
    a1c8:	0029      	movs	r1, r5
    a1ca:	4b29      	ldr	r3, [pc, #164]	; (a270 <lv_draw_mask_radius+0x330>)
    a1cc:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    a1ce:	886a      	ldrh	r2, [r5, #2]
    a1d0:	ab06      	add	r3, sp, #24
    a1d2:	8859      	ldrh	r1, [r3, #2]
    a1d4:	23ff      	movs	r3, #255	; 0xff
    a1d6:	1a59      	subs	r1, r3, r1
    a1d8:	1a9b      	subs	r3, r3, r2
    a1da:	434b      	muls	r3, r1
    a1dc:	125b      	asrs	r3, r3, #9
    a1de:	b2db      	uxtb	r3, r3
                if(outer) m = 255 - m;
    a1e0:	2c00      	cmp	r4, #0
    a1e2:	d101      	bne.n	a1e8 <lv_draw_mask_radius+0x2a8>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    a1e4:	43db      	mvns	r3, r3
    a1e6:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a1e8:	9d03      	ldr	r5, [sp, #12]
    a1ea:	2d00      	cmp	r5, #0
    a1ec:	db14      	blt.n	a218 <lv_draw_mask_radius+0x2d8>
    a1ee:	9800      	ldr	r0, [sp, #0]
    a1f0:	4285      	cmp	r5, r0
    a1f2:	da11      	bge.n	a218 <lv_draw_mask_radius+0x2d8>
    a1f4:	9901      	ldr	r1, [sp, #4]
    a1f6:	0008      	movs	r0, r1
    a1f8:	46ac      	mov	ip, r5
    a1fa:	4460      	add	r0, ip
    a1fc:	7801      	ldrb	r1, [r0, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a1fe:	2bf9      	cmp	r3, #249	; 0xf9
    a200:	d809      	bhi.n	a216 <lv_draw_mask_radius+0x2d6>
    if(mask_new <= LV_OPA_MIN) return 0;
    a202:	2b05      	cmp	r3, #5
    a204:	d92b      	bls.n	a25e <lv_draw_mask_radius+0x31e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a206:	4359      	muls	r1, r3
    a208:	000d      	movs	r5, r1
    a20a:	0209      	lsls	r1, r1, #8
    a20c:	1949      	adds	r1, r1, r5
    a20e:	01c9      	lsls	r1, r1, #7
    a210:	1949      	adds	r1, r1, r5
    a212:	0dc9      	lsrs	r1, r1, #23
    a214:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a216:	7001      	strb	r1, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a218:	9d04      	ldr	r5, [sp, #16]
    a21a:	2d00      	cmp	r5, #0
    a21c:	db13      	blt.n	a246 <lv_draw_mask_radius+0x306>
    a21e:	9800      	ldr	r0, [sp, #0]
    a220:	4285      	cmp	r5, r0
    a222:	da10      	bge.n	a246 <lv_draw_mask_radius+0x306>
    a224:	9901      	ldr	r1, [sp, #4]
    a226:	0008      	movs	r0, r1
    a228:	46ac      	mov	ip, r5
    a22a:	4460      	add	r0, ip
    a22c:	7801      	ldrb	r1, [r0, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a22e:	2bf9      	cmp	r3, #249	; 0xf9
    a230:	d808      	bhi.n	a244 <lv_draw_mask_radius+0x304>
    if(mask_new <= LV_OPA_MIN) return 0;
    a232:	2b05      	cmp	r3, #5
    a234:	d915      	bls.n	a262 <lv_draw_mask_radius+0x322>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a236:	434b      	muls	r3, r1
    a238:	0219      	lsls	r1, r3, #8
    a23a:	18c9      	adds	r1, r1, r3
    a23c:	01c9      	lsls	r1, r1, #7
    a23e:	18c9      	adds	r1, r1, r3
    a240:	0dc9      	lsrs	r1, r1, #23
    a242:	b2c9      	uxtb	r1, r1
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a244:	7001      	strb	r1, [r0, #0]
                kl--;
    a246:	9b03      	ldr	r3, [sp, #12]
    a248:	3b01      	subs	r3, #1
    a24a:	9303      	str	r3, [sp, #12]
                kr++;
    a24c:	9b04      	ldr	r3, [sp, #16]
    a24e:	3301      	adds	r3, #1
    a250:	9304      	str	r3, [sp, #16]
                y_prev.f = y_next.f;
    a252:	ab08      	add	r3, sp, #32
    a254:	805a      	strh	r2, [r3, #2]
                i++;
    a256:	9b05      	ldr	r3, [sp, #20]
    a258:	3301      	adds	r3, #1
    a25a:	9305      	str	r3, [sp, #20]
    a25c:	e176      	b.n	a54c <lv_draw_mask_radius+0x60c>
    if(mask_new <= LV_OPA_MIN) return 0;
    a25e:	2100      	movs	r1, #0
    a260:	e7d9      	b.n	a216 <lv_draw_mask_radius+0x2d6>
    a262:	2100      	movs	r1, #0
    a264:	e7ee      	b.n	a244 <lv_draw_mask_radius+0x304>
    a266:	2200      	movs	r2, #0
    a268:	e03f      	b.n	a2ea <lv_draw_mask_radius+0x3aa>
    a26a:	46c0      	nop			; (mov r8, r8)
    a26c:	00010fe5 	.word	0x00010fe5
    a270:	00010941 	.word	0x00010941
    a274:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a276:	9801      	ldr	r0, [sp, #4]
    a278:	5442      	strb	r2, [r0, r1]
                kl--;
    a27a:	3c01      	subs	r4, #1
                kr++;
    a27c:	2201      	movs	r2, #1
    a27e:	4694      	mov	ip, r2
    a280:	44e2      	add	sl, ip
            for(; i <= x1.i; i++) {
    a282:	3701      	adds	r7, #1
                y_prev.f = y_next.f;
    a284:	002e      	movs	r6, r5
            for(; i <= x1.i; i++) {
    a286:	455f      	cmp	r7, fp
    a288:	d846      	bhi.n	a318 <lv_draw_mask_radius+0x3d8>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    a28a:	0935      	lsrs	r5, r6, #4
    a28c:	9b02      	ldr	r3, [sp, #8]
    a28e:	469c      	mov	ip, r3
    a290:	4465      	add	r5, ip
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
    a292:	0038      	movs	r0, r7
    a294:	4378      	muls	r0, r7
    a296:	4643      	mov	r3, r8
    a298:	1a18      	subs	r0, r3, r0
    x = x << 8; /*Upscale for extra precision*/
    a29a:	0200      	lsls	r0, r0, #8
    uint32_t raw2 = raw * raw;
    a29c:	002b      	movs	r3, r5
    a29e:	436b      	muls	r3, r5

    int32_t d = x - raw2;
    a2a0:	1ac0      	subs	r0, r0, r3
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
    a2a2:	0069      	lsls	r1, r5, #1
    a2a4:	4bb4      	ldr	r3, [pc, #720]	; (a578 <lv_draw_mask_radius+0x638>)
    a2a6:	4798      	blx	r3
    a2a8:	1945      	adds	r5, r0, r5

    q->i = d >> 4;
    a2aa:	112b      	asrs	r3, r5, #4
    a2ac:	b29b      	uxth	r3, r3
    q->f = (d & 0xF) << 4;
    a2ae:	012d      	lsls	r5, r5, #4
    a2b0:	22ff      	movs	r2, #255	; 0xff
    a2b2:	4015      	ands	r5, r2
                m = (y_prev.f + y_next.f) >> 1;
    a2b4:	1976      	adds	r6, r6, r5
    a2b6:	1076      	asrs	r6, r6, #1
    a2b8:	b2f6      	uxtb	r6, r6
                if(outer) m = 255 - m;
    a2ba:	464a      	mov	r2, r9
    a2bc:	2a00      	cmp	r2, #0
    a2be:	d001      	beq.n	a2c4 <lv_draw_mask_radius+0x384>
    a2c0:	43f6      	mvns	r6, r6
    a2c2:	b2f6      	uxtb	r6, r6
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a2c4:	2c00      	cmp	r4, #0
    a2c6:	db12      	blt.n	a2ee <lv_draw_mask_radius+0x3ae>
    a2c8:	9a00      	ldr	r2, [sp, #0]
    a2ca:	42a2      	cmp	r2, r4
    a2cc:	dd0f      	ble.n	a2ee <lv_draw_mask_radius+0x3ae>
    a2ce:	0020      	movs	r0, r4
    a2d0:	9a01      	ldr	r2, [sp, #4]
    a2d2:	5d12      	ldrb	r2, [r2, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a2d4:	2ef9      	cmp	r6, #249	; 0xf9
    a2d6:	d808      	bhi.n	a2ea <lv_draw_mask_radius+0x3aa>
    if(mask_new <= LV_OPA_MIN) return 0;
    a2d8:	2e05      	cmp	r6, #5
    a2da:	d9c4      	bls.n	a266 <lv_draw_mask_radius+0x326>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a2dc:	4372      	muls	r2, r6
    a2de:	0211      	lsls	r1, r2, #8
    a2e0:	1889      	adds	r1, r1, r2
    a2e2:	01c9      	lsls	r1, r1, #7
    a2e4:	188a      	adds	r2, r1, r2
    a2e6:	0dd2      	lsrs	r2, r2, #23
    a2e8:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a2ea:	9901      	ldr	r1, [sp, #4]
    a2ec:	540a      	strb	r2, [r1, r0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a2ee:	4652      	mov	r2, sl
    a2f0:	2a00      	cmp	r2, #0
    a2f2:	dbc2      	blt.n	a27a <lv_draw_mask_radius+0x33a>
    a2f4:	9a00      	ldr	r2, [sp, #0]
    a2f6:	4552      	cmp	r2, sl
    a2f8:	ddbf      	ble.n	a27a <lv_draw_mask_radius+0x33a>
    a2fa:	4651      	mov	r1, sl
    a2fc:	9a01      	ldr	r2, [sp, #4]
    a2fe:	5c52      	ldrb	r2, [r2, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a300:	2ef9      	cmp	r6, #249	; 0xf9
    a302:	d8b8      	bhi.n	a276 <lv_draw_mask_radius+0x336>
    if(mask_new <= LV_OPA_MIN) return 0;
    a304:	2e05      	cmp	r6, #5
    a306:	d9b5      	bls.n	a274 <lv_draw_mask_radius+0x334>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a308:	4356      	muls	r6, r2
    a30a:	0232      	lsls	r2, r6, #8
    a30c:	1992      	adds	r2, r2, r6
    a30e:	01d2      	lsls	r2, r2, #7
    a310:	1996      	adds	r6, r2, r6
    a312:	0df6      	lsrs	r6, r6, #23
    a314:	b2f2      	uxtb	r2, r6
    a316:	e7ae      	b.n	a276 <lv_draw_mask_radius+0x336>
    a318:	464c      	mov	r4, r9
    a31a:	465a      	mov	r2, fp
    a31c:	43d2      	mvns	r2, r2
    a31e:	9e05      	ldr	r6, [sp, #20]
    a320:	46b4      	mov	ip, r6
    a322:	4462      	add	r2, ip
    a324:	9903      	ldr	r1, [sp, #12]
    a326:	468c      	mov	ip, r1
    a328:	4494      	add	ip, r2
    a32a:	4662      	mov	r2, ip
    a32c:	9203      	str	r2, [sp, #12]
    a32e:	465a      	mov	r2, fp
    a330:	1c50      	adds	r0, r2, #1
    a332:	9a04      	ldr	r2, [sp, #16]
    a334:	4694      	mov	ip, r2
    a336:	4460      	add	r0, ip
    a338:	1b82      	subs	r2, r0, r6
    a33a:	9204      	str	r2, [sp, #16]
    a33c:	aa08      	add	r2, sp, #32
    a33e:	8055      	strh	r5, [r2, #2]
    a340:	aa09      	add	r2, sp, #36	; 0x24
    a342:	8013      	strh	r3, [r2, #0]
    a344:	8055      	strh	r5, [r2, #2]
            if(y_prev.f) {
    a346:	ab08      	add	r3, sp, #32
    a348:	885b      	ldrh	r3, [r3, #2]
    a34a:	2b00      	cmp	r3, #0
    a34c:	d03d      	beq.n	a3ca <lv_draw_mask_radius+0x48a>
                m = (y_prev.f * x1.f) >> 9;
    a34e:	aa07      	add	r2, sp, #28
    a350:	8852      	ldrh	r2, [r2, #2]
    a352:	4353      	muls	r3, r2
    a354:	125b      	asrs	r3, r3, #9
    a356:	b2db      	uxtb	r3, r3
                if(outer) m = 255 - m;
    a358:	2c00      	cmp	r4, #0
    a35a:	d001      	beq.n	a360 <lv_draw_mask_radius+0x420>
    a35c:	43db      	mvns	r3, r3
    a35e:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a360:	9a03      	ldr	r2, [sp, #12]
    a362:	2a00      	cmp	r2, #0
    a364:	db14      	blt.n	a390 <lv_draw_mask_radius+0x450>
    a366:	9900      	ldr	r1, [sp, #0]
    a368:	0008      	movs	r0, r1
    a36a:	4290      	cmp	r0, r2
    a36c:	dd10      	ble.n	a390 <lv_draw_mask_radius+0x450>
    a36e:	9901      	ldr	r1, [sp, #4]
    a370:	4694      	mov	ip, r2
    a372:	4461      	add	r1, ip
    a374:	0008      	movs	r0, r1
    a376:	780a      	ldrb	r2, [r1, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a378:	2bf9      	cmp	r3, #249	; 0xf9
    a37a:	d808      	bhi.n	a38e <lv_draw_mask_radius+0x44e>
    if(mask_new <= LV_OPA_MIN) return 0;
    a37c:	2b05      	cmp	r3, #5
    a37e:	d928      	bls.n	a3d2 <lv_draw_mask_radius+0x492>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a380:	435a      	muls	r2, r3
    a382:	0211      	lsls	r1, r2, #8
    a384:	1889      	adds	r1, r1, r2
    a386:	01c9      	lsls	r1, r1, #7
    a388:	188a      	adds	r2, r1, r2
    a38a:	0dd2      	lsrs	r2, r2, #23
    a38c:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    a38e:	7002      	strb	r2, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a390:	9a04      	ldr	r2, [sp, #16]
    a392:	2a00      	cmp	r2, #0
    a394:	db13      	blt.n	a3be <lv_draw_mask_radius+0x47e>
    a396:	9900      	ldr	r1, [sp, #0]
    a398:	0008      	movs	r0, r1
    a39a:	4290      	cmp	r0, r2
    a39c:	dd0f      	ble.n	a3be <lv_draw_mask_radius+0x47e>
    a39e:	9901      	ldr	r1, [sp, #4]
    a3a0:	4694      	mov	ip, r2
    a3a2:	4461      	add	r1, ip
    a3a4:	780a      	ldrb	r2, [r1, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    a3a6:	2bf9      	cmp	r3, #249	; 0xf9
    a3a8:	d808      	bhi.n	a3bc <lv_draw_mask_radius+0x47c>
    if(mask_new <= LV_OPA_MIN) return 0;
    a3aa:	2b05      	cmp	r3, #5
    a3ac:	d913      	bls.n	a3d6 <lv_draw_mask_radius+0x496>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    a3ae:	4353      	muls	r3, r2
    a3b0:	021a      	lsls	r2, r3, #8
    a3b2:	18d2      	adds	r2, r2, r3
    a3b4:	01d2      	lsls	r2, r2, #7
    a3b6:	18d3      	adds	r3, r2, r3
    a3b8:	0ddb      	lsrs	r3, r3, #23
    a3ba:	b2da      	uxtb	r2, r3
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    a3bc:	700a      	strb	r2, [r1, #0]
                kl--;
    a3be:	9b03      	ldr	r3, [sp, #12]
    a3c0:	3b01      	subs	r3, #1
    a3c2:	9303      	str	r3, [sp, #12]
                kr++;
    a3c4:	9b04      	ldr	r3, [sp, #16]
    a3c6:	3301      	adds	r3, #1
    a3c8:	9304      	str	r3, [sp, #16]
            if(outer == 0) {
    a3ca:	2c00      	cmp	r4, #0
    a3cc:	d005      	beq.n	a3da <lv_draw_mask_radius+0x49a>
    return LV_DRAW_MASK_RES_CHANGED;
    a3ce:	2002      	movs	r0, #2
    a3d0:	e622      	b.n	a018 <lv_draw_mask_radius+0xd8>
    if(mask_new <= LV_OPA_MIN) return 0;
    a3d2:	2200      	movs	r2, #0
    a3d4:	e7db      	b.n	a38e <lv_draw_mask_radius+0x44e>
    a3d6:	2200      	movs	r2, #0
    a3d8:	e7f0      	b.n	a3bc <lv_draw_mask_radius+0x47c>
                kl++;
    a3da:	9903      	ldr	r1, [sp, #12]
    a3dc:	3101      	adds	r1, #1
                if(kl > len) {
    a3de:	9c00      	ldr	r4, [sp, #0]
    a3e0:	42a1      	cmp	r1, r4
    a3e2:	dc12      	bgt.n	a40a <lv_draw_mask_radius+0x4ca>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
    a3e4:	2900      	cmp	r1, #0
    a3e6:	db02      	blt.n	a3ee <lv_draw_mask_radius+0x4ae>
    a3e8:	9801      	ldr	r0, [sp, #4]
    a3ea:	4b64      	ldr	r3, [pc, #400]	; (a57c <lv_draw_mask_radius+0x63c>)
    a3ec:	4798      	blx	r3
                if(kr < 0) {
    a3ee:	9b04      	ldr	r3, [sp, #16]
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	db0a      	blt.n	a40a <lv_draw_mask_radius+0x4ca>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
    a3f4:	42a3      	cmp	r3, r4
    a3f6:	daea      	bge.n	a3ce <lv_draw_mask_radius+0x48e>
    a3f8:	9a00      	ldr	r2, [sp, #0]
    a3fa:	1ad1      	subs	r1, r2, r3
    a3fc:	9a01      	ldr	r2, [sp, #4]
    a3fe:	469c      	mov	ip, r3
    a400:	4462      	add	r2, ip
    a402:	0010      	movs	r0, r2
    a404:	4b5d      	ldr	r3, [pc, #372]	; (a57c <lv_draw_mask_radius+0x63c>)
    a406:	4798      	blx	r3
    a408:	e7e1      	b.n	a3ce <lv_draw_mask_radius+0x48e>
                    return LV_DRAW_MASK_RES_TRANSP;
    a40a:	2000      	movs	r0, #0
    a40c:	e604      	b.n	a018 <lv_draw_mask_radius+0xd8>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    a40e:	2000      	movs	r0, #0
    a410:	e602      	b.n	a018 <lv_draw_mask_radius+0xd8>
        if(radius <= 256) sqrt_mask = 0x800;
    a412:	2080      	movs	r0, #128	; 0x80
    a414:	0040      	lsls	r0, r0, #1
    a416:	4584      	cmp	ip, r0
    a418:	dc00      	bgt.n	a41c <lv_draw_mask_radius+0x4dc>
    a41a:	e64e      	b.n	a0ba <lv_draw_mask_radius+0x17a>
    a41c:	2180      	movs	r1, #128	; 0x80
    a41e:	0209      	lsls	r1, r1, #8
    a420:	9102      	str	r1, [sp, #8]
            y = radius - (h - abs_y) + 1;
    a422:	1a9a      	subs	r2, r3, r2
    a424:	1ab0      	subs	r0, r6, r2
    a426:	1c43      	adds	r3, r0, #1
    a428:	469b      	mov	fp, r3
            if((y - 1) == p->y_prev) {
    a42a:	696b      	ldr	r3, [r5, #20]
    a42c:	4298      	cmp	r0, r3
    a42e:	d100      	bne.n	a432 <lv_draw_mask_radius+0x4f2>
    a430:	e647      	b.n	a0c2 <lv_draw_mask_radius+0x182>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    a432:	4340      	muls	r0, r0
    a434:	4643      	mov	r3, r8
    a436:	1a18      	subs	r0, r3, r0
    a438:	9a02      	ldr	r2, [sp, #8]
    a43a:	a907      	add	r1, sp, #28
    a43c:	4b50      	ldr	r3, [pc, #320]	; (a580 <lv_draw_mask_radius+0x640>)
    a43e:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    a440:	4658      	mov	r0, fp
    a442:	4340      	muls	r0, r0
    a444:	4643      	mov	r3, r8
    a446:	1a18      	subs	r0, r3, r0
    a448:	9a02      	ldr	r2, [sp, #8]
    a44a:	a906      	add	r1, sp, #24
    a44c:	4b4c      	ldr	r3, [pc, #304]	; (a580 <lv_draw_mask_radius+0x640>)
    a44e:	4798      	blx	r3
            p->y_prev = y;
    a450:	465b      	mov	r3, fp
    a452:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x0.f;
    a454:	ab06      	add	r3, sp, #24
    a456:	885b      	ldrh	r3, [r3, #2]
    a458:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x0.i;
    a45a:	ab06      	add	r3, sp, #24
    a45c:	881b      	ldrh	r3, [r3, #0]
    a45e:	832b      	strh	r3, [r5, #24]
    a460:	e028      	b.n	a4b4 <lv_draw_mask_radius+0x574>
        if(radius <= 256) sqrt_mask = 0x800;
    a462:	2380      	movs	r3, #128	; 0x80
    a464:	005b      	lsls	r3, r3, #1
    a466:	459c      	cmp	ip, r3
    a468:	dd00      	ble.n	a46c <lv_draw_mask_radius+0x52c>
    a46a:	e081      	b.n	a570 <lv_draw_mask_radius+0x630>
    a46c:	2380      	movs	r3, #128	; 0x80
    a46e:	011b      	lsls	r3, r3, #4
    a470:	9302      	str	r3, [sp, #8]
            y = radius - abs_y;
    a472:	1ab3      	subs	r3, r6, r2
    a474:	469b      	mov	fp, r3
            if(y == p->y_prev) {
    a476:	696b      	ldr	r3, [r5, #20]
    a478:	459b      	cmp	fp, r3
    a47a:	d100      	bne.n	a47e <lv_draw_mask_radius+0x53e>
    a47c:	e617      	b.n	a0ae <lv_draw_mask_radius+0x16e>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    a47e:	4658      	mov	r0, fp
    a480:	4340      	muls	r0, r0
    a482:	4643      	mov	r3, r8
    a484:	1a18      	subs	r0, r3, r0
    a486:	9a02      	ldr	r2, [sp, #8]
    a488:	a906      	add	r1, sp, #24
    a48a:	4b3d      	ldr	r3, [pc, #244]	; (a580 <lv_draw_mask_radius+0x640>)
    a48c:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    a48e:	465b      	mov	r3, fp
    a490:	3b01      	subs	r3, #1
    a492:	0018      	movs	r0, r3
    a494:	9303      	str	r3, [sp, #12]
    a496:	4358      	muls	r0, r3
    a498:	4642      	mov	r2, r8
    a49a:	1a10      	subs	r0, r2, r0
    a49c:	9a02      	ldr	r2, [sp, #8]
    a49e:	a907      	add	r1, sp, #28
    a4a0:	4b37      	ldr	r3, [pc, #220]	; (a580 <lv_draw_mask_radius+0x640>)
    a4a2:	4798      	blx	r3
            p->y_prev = y - 1;
    a4a4:	9b03      	ldr	r3, [sp, #12]
    a4a6:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x1.f;
    a4a8:	ab06      	add	r3, sp, #24
    a4aa:	88db      	ldrh	r3, [r3, #6]
    a4ac:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x1.i;
    a4ae:	ab06      	add	r3, sp, #24
    a4b0:	889b      	ldrh	r3, [r3, #4]
    a4b2:	832b      	strh	r3, [r5, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
    a4b4:	ab06      	add	r3, sp, #24
    a4b6:	881b      	ldrh	r3, [r3, #0]
    a4b8:	aa07      	add	r2, sp, #28
    a4ba:	8812      	ldrh	r2, [r2, #0]
    a4bc:	1e51      	subs	r1, r2, #1
    a4be:	428b      	cmp	r3, r1
    a4c0:	d100      	bne.n	a4c4 <lv_draw_mask_radius+0x584>
    a4c2:	e604      	b.n	a0ce <lv_draw_mask_radius+0x18e>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
    a4c4:	4652      	mov	r2, sl
    a4c6:	4649      	mov	r1, r9
    a4c8:	1a50      	subs	r0, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    a4ca:	3701      	adds	r7, #1
    a4cc:	1aba      	subs	r2, r7, r2
    int32_t w = lv_area_get_width(&rect);
    a4ce:	b212      	sxth	r2, r2
        if(x0.i == x1.i) {
    a4d0:	a907      	add	r1, sp, #28
    a4d2:	8809      	ldrh	r1, [r1, #0]
    a4d4:	4299      	cmp	r1, r3
    a4d6:	d100      	bne.n	a4da <lv_draw_mask_radius+0x59a>
    a4d8:	e604      	b.n	a0e4 <lv_draw_mask_radius+0x1a4>
            int32_t ofs = radius - (x0.i + 1);
    a4da:	3301      	adds	r3, #1
    a4dc:	1af6      	subs	r6, r6, r3
            int32_t kl = k + ofs;
    a4de:	1983      	adds	r3, r0, r6
    a4e0:	0019      	movs	r1, r3
    a4e2:	9303      	str	r3, [sp, #12]
            int32_t kr = k + (w - ofs - 1);
    a4e4:	1b96      	subs	r6, r2, r6
    a4e6:	3e01      	subs	r6, #1
    a4e8:	1833      	adds	r3, r6, r0
    a4ea:	001d      	movs	r5, r3
    a4ec:	9304      	str	r3, [sp, #16]
            if(outer) {
    a4ee:	2c00      	cmp	r4, #0
    a4f0:	d012      	beq.n	a518 <lv_draw_mask_radius+0x5d8>
                int32_t first = kl + 1;
    a4f2:	1c48      	adds	r0, r1, #1
    a4f4:	43c3      	mvns	r3, r0
    a4f6:	17db      	asrs	r3, r3, #31
    a4f8:	4018      	ands	r0, r3
                if(len_tmp + first > len) len_tmp = len - first;
    a4fa:	9e00      	ldr	r6, [sp, #0]
    a4fc:	0033      	movs	r3, r6
    a4fe:	1a31      	subs	r1, r6, r0
    a500:	42b5      	cmp	r5, r6
    a502:	dc00      	bgt.n	a506 <lv_draw_mask_radius+0x5c6>
                int32_t len_tmp = kr - first;
    a504:	1a29      	subs	r1, r5, r0
                if(first < len && len_tmp >= 0) {
    a506:	4298      	cmp	r0, r3
    a508:	da06      	bge.n	a518 <lv_draw_mask_radius+0x5d8>
    a50a:	2900      	cmp	r1, #0
    a50c:	db04      	blt.n	a518 <lv_draw_mask_radius+0x5d8>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    a50e:	9b01      	ldr	r3, [sp, #4]
    a510:	469c      	mov	ip, r3
    a512:	4460      	add	r0, ip
    a514:	4b19      	ldr	r3, [pc, #100]	; (a57c <lv_draw_mask_radius+0x63c>)
    a516:	4798      	blx	r3
            uint32_t i = x0.i + 1;
    a518:	ab06      	add	r3, sp, #24
    a51a:	8818      	ldrh	r0, [r3, #0]
    a51c:	1c43      	adds	r3, r0, #1
    a51e:	9305      	str	r3, [sp, #20]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
    a520:	ad08      	add	r5, sp, #32
    a522:	4340      	muls	r0, r0
    a524:	4643      	mov	r3, r8
    a526:	1a18      	subs	r0, r3, r0
    a528:	9a02      	ldr	r2, [sp, #8]
    a52a:	0029      	movs	r1, r5
    a52c:	4b14      	ldr	r3, [pc, #80]	; (a580 <lv_draw_mask_radius+0x640>)
    a52e:	4798      	blx	r3
            if(y_prev.f == 0) {
    a530:	886b      	ldrh	r3, [r5, #2]
    a532:	2b00      	cmp	r3, #0
    a534:	d105      	bne.n	a542 <lv_draw_mask_radius+0x602>
                y_prev.i--;
    a536:	ab08      	add	r3, sp, #32
    a538:	881a      	ldrh	r2, [r3, #0]
    a53a:	3a01      	subs	r2, #1
    a53c:	801a      	strh	r2, [r3, #0]
                y_prev.f = 0xFF;
    a53e:	22ff      	movs	r2, #255	; 0xff
    a540:	805a      	strh	r2, [r3, #2]
            if(y_prev.i >= y) {
    a542:	ab08      	add	r3, sp, #32
    a544:	881b      	ldrh	r3, [r3, #0]
    a546:	459b      	cmp	fp, r3
    a548:	dc00      	bgt.n	a54c <lv_draw_mask_radius+0x60c>
    a54a:	e636      	b.n	a1ba <lv_draw_mask_radius+0x27a>
            for(; i <= x1.i; i++) {
    a54c:	ab07      	add	r3, sp, #28
    a54e:	881b      	ldrh	r3, [r3, #0]
    a550:	469b      	mov	fp, r3
    a552:	9f05      	ldr	r7, [sp, #20]
    a554:	455f      	cmp	r7, fp
    a556:	d900      	bls.n	a55a <lv_draw_mask_radius+0x61a>
    a558:	e6f5      	b.n	a346 <lv_draw_mask_radius+0x406>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    a55a:	ab08      	add	r3, sp, #32
    a55c:	881a      	ldrh	r2, [r3, #0]
    a55e:	0112      	lsls	r2, r2, #4
    a560:	9202      	str	r2, [sp, #8]
    a562:	885e      	ldrh	r6, [r3, #2]
    a564:	9b04      	ldr	r3, [sp, #16]
    a566:	469a      	mov	sl, r3
    a568:	9b03      	ldr	r3, [sp, #12]
    if(mask_new <= LV_OPA_MIN) return 0;
    a56a:	46a1      	mov	r9, r4
    a56c:	001c      	movs	r4, r3
    a56e:	e68c      	b.n	a28a <lv_draw_mask_radius+0x34a>
        if(radius <= 256) sqrt_mask = 0x800;
    a570:	2380      	movs	r3, #128	; 0x80
    a572:	021b      	lsls	r3, r3, #8
    a574:	9302      	str	r3, [sp, #8]
    a576:	e77c      	b.n	a472 <lv_draw_mask_radius+0x532>
    a578:	00017a75 	.word	0x00017a75
    a57c:	00010fe5 	.word	0x00010fe5
    a580:	00010941 	.word	0x00010941

0000a584 <lv_draw_mask_add>:
{
    a584:	b510      	push	{r4, lr}
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    a586:	4b0c      	ldr	r3, [pc, #48]	; (a5b8 <lv_draw_mask_add+0x34>)
    a588:	681b      	ldr	r3, [r3, #0]
    a58a:	2b00      	cmp	r3, #0
    a58c:	d00c      	beq.n	a5a8 <lv_draw_mask_add+0x24>
    a58e:	4a0a      	ldr	r2, [pc, #40]	; (a5b8 <lv_draw_mask_add+0x34>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    a590:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    a592:	6894      	ldr	r4, [r2, #8]
    a594:	2c00      	cmp	r4, #0
    a596:	d008      	beq.n	a5aa <lv_draw_mask_add+0x26>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    a598:	3301      	adds	r3, #1
    a59a:	b2db      	uxtb	r3, r3
    a59c:	3208      	adds	r2, #8
    a59e:	2b10      	cmp	r3, #16
    a5a0:	d1f7      	bne.n	a592 <lv_draw_mask_add+0xe>
        return LV_MASK_ID_INV;
    a5a2:	2001      	movs	r0, #1
    a5a4:	4240      	negs	r0, r0
    a5a6:	e006      	b.n	a5b6 <lv_draw_mask_add+0x32>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    a5a8:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    a5aa:	4a03      	ldr	r2, [pc, #12]	; (a5b8 <lv_draw_mask_add+0x34>)
    a5ac:	00dc      	lsls	r4, r3, #3
    a5ae:	50a0      	str	r0, [r4, r2]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
    a5b0:	1912      	adds	r2, r2, r4
    a5b2:	6051      	str	r1, [r2, #4]
    return i;
    a5b4:	b218      	sxth	r0, r3
}
    a5b6:	bd10      	pop	{r4, pc}
    a5b8:	20004d98 	.word	0x20004d98

0000a5bc <lv_draw_mask_apply>:
{
    a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5be:	b087      	sub	sp, #28
    a5c0:	9003      	str	r0, [sp, #12]
    a5c2:	9104      	str	r1, [sp, #16]
    a5c4:	0016      	movs	r6, r2
    a5c6:	001f      	movs	r7, r3
    while(m->param) {
    a5c8:	4b10      	ldr	r3, [pc, #64]	; (a60c <lv_draw_mask_apply+0x50>)
    a5ca:	681b      	ldr	r3, [r3, #0]
    a5cc:	2b00      	cmp	r3, #0
    a5ce:	d01b      	beq.n	a608 <lv_draw_mask_apply+0x4c>
    a5d0:	4c0e      	ldr	r4, [pc, #56]	; (a60c <lv_draw_mask_apply+0x50>)
    a5d2:	2200      	movs	r2, #0
    a5d4:	9205      	str	r2, [sp, #20]
    a5d6:	e003      	b.n	a5e0 <lv_draw_mask_apply+0x24>
        m++;
    a5d8:	3408      	adds	r4, #8
    while(m->param) {
    a5da:	6823      	ldr	r3, [r4, #0]
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d00d      	beq.n	a5fc <lv_draw_mask_apply+0x40>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
    a5e0:	9300      	str	r3, [sp, #0]
    a5e2:	681d      	ldr	r5, [r3, #0]
    a5e4:	003b      	movs	r3, r7
    a5e6:	0032      	movs	r2, r6
    a5e8:	9904      	ldr	r1, [sp, #16]
    a5ea:	9803      	ldr	r0, [sp, #12]
    a5ec:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
    a5ee:	2800      	cmp	r0, #0
    a5f0:	d008      	beq.n	a604 <lv_draw_mask_apply+0x48>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
    a5f2:	2802      	cmp	r0, #2
    a5f4:	d1f0      	bne.n	a5d8 <lv_draw_mask_apply+0x1c>
    a5f6:	2301      	movs	r3, #1
    a5f8:	9305      	str	r3, [sp, #20]
    a5fa:	e7ed      	b.n	a5d8 <lv_draw_mask_apply+0x1c>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    a5fc:	9805      	ldr	r0, [sp, #20]
    a5fe:	1e43      	subs	r3, r0, #1
    a600:	4198      	sbcs	r0, r3
    a602:	3001      	adds	r0, #1
}
    a604:	b007      	add	sp, #28
    a606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    a608:	2001      	movs	r0, #1
    a60a:	e7fb      	b.n	a604 <lv_draw_mask_apply+0x48>
    a60c:	20004d98 	.word	0x20004d98

0000a610 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
    a610:	1c43      	adds	r3, r0, #1
    a612:	d007      	beq.n	a624 <lv_draw_mask_remove_id+0x14>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
    a614:	4a04      	ldr	r2, [pc, #16]	; (a628 <lv_draw_mask_remove_id+0x18>)
    a616:	00c3      	lsls	r3, r0, #3
    a618:	5898      	ldr	r0, [r3, r2]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
    a61a:	2100      	movs	r1, #0
    a61c:	5099      	str	r1, [r3, r2]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
    a61e:	18d3      	adds	r3, r2, r3
    a620:	6059      	str	r1, [r3, #4]
}
    a622:	4770      	bx	lr
    void * p = NULL;
    a624:	2000      	movs	r0, #0
    return p;
    a626:	e7fc      	b.n	a622 <lv_draw_mask_remove_id+0x12>
    a628:	20004d98 	.word	0x20004d98

0000a62c <lv_draw_mask_remove_custom>:
{
    a62c:	b530      	push	{r4, r5, lr}
    a62e:	0001      	movs	r1, r0
    a630:	4b08      	ldr	r3, [pc, #32]	; (a654 <lv_draw_mask_remove_custom+0x28>)
    a632:	001a      	movs	r2, r3
    a634:	3280      	adds	r2, #128	; 0x80
    void * p = NULL;
    a636:	2000      	movs	r0, #0
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    a638:	2400      	movs	r4, #0
    a63a:	e002      	b.n	a642 <lv_draw_mask_remove_custom+0x16>
    a63c:	3308      	adds	r3, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    a63e:	4293      	cmp	r3, r2
    a640:	d006      	beq.n	a650 <lv_draw_mask_remove_custom+0x24>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
    a642:	685d      	ldr	r5, [r3, #4]
    a644:	428d      	cmp	r5, r1
    a646:	d1f9      	bne.n	a63c <lv_draw_mask_remove_custom+0x10>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
    a648:	6818      	ldr	r0, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    a64a:	601c      	str	r4, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
    a64c:	605c      	str	r4, [r3, #4]
    a64e:	e7f5      	b.n	a63c <lv_draw_mask_remove_custom+0x10>
}
    a650:	bd30      	pop	{r4, r5, pc}
    a652:	46c0      	nop			; (mov r8, r8)
    a654:	20004d98 	.word	0x20004d98

0000a658 <lv_draw_mask_get_cnt>:
{
    a658:	4b07      	ldr	r3, [pc, #28]	; (a678 <lv_draw_mask_get_cnt+0x20>)
    a65a:	001a      	movs	r2, r3
    a65c:	3280      	adds	r2, #128	; 0x80
    uint8_t cnt = 0;
    a65e:	2000      	movs	r0, #0
    a660:	e002      	b.n	a668 <lv_draw_mask_get_cnt+0x10>
    a662:	3308      	adds	r3, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    a664:	4293      	cmp	r3, r2
    a666:	d005      	beq.n	a674 <lv_draw_mask_get_cnt+0x1c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    a668:	6819      	ldr	r1, [r3, #0]
    a66a:	2900      	cmp	r1, #0
    a66c:	d0f9      	beq.n	a662 <lv_draw_mask_get_cnt+0xa>
    a66e:	3001      	adds	r0, #1
    a670:	b2c0      	uxtb	r0, r0
    a672:	e7f6      	b.n	a662 <lv_draw_mask_get_cnt+0xa>
}
    a674:	4770      	bx	lr
    a676:	46c0      	nop			; (mov r8, r8)
    a678:	20004d98 	.word	0x20004d98

0000a67c <lv_draw_mask_line_points_init>:
{
    a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a67e:	46ce      	mov	lr, r9
    a680:	4647      	mov	r7, r8
    a682:	b580      	push	{r7, lr}
    a684:	0004      	movs	r4, r0
    a686:	000f      	movs	r7, r1
    a688:	0015      	movs	r5, r2
    a68a:	4698      	mov	r8, r3
    a68c:	ab08      	add	r3, sp, #32
    a68e:	2600      	movs	r6, #0
    a690:	5f9e      	ldrsh	r6, [r3, r6]
    a692:	ab09      	add	r3, sp, #36	; 0x24
    a694:	781b      	ldrb	r3, [r3, #0]
    a696:	4699      	mov	r9, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
    a698:	212c      	movs	r1, #44	; 0x2c
    a69a:	4b51      	ldr	r3, [pc, #324]	; (a7e0 <lv_draw_mask_line_points_init+0x164>)
    a69c:	4798      	blx	r3
    if(p1y > p2y) {
    a69e:	42b5      	cmp	r5, r6
    a6a0:	dd05      	ble.n	a6ae <lv_draw_mask_line_points_init+0x32>
    a6a2:	002b      	movs	r3, r5
        p1y = t;
    a6a4:	0035      	movs	r5, r6
        p2y = p1y;
    a6a6:	001e      	movs	r6, r3
    if(p1y > p2y) {
    a6a8:	003b      	movs	r3, r7
        p1x = t;
    a6aa:	4647      	mov	r7, r8
        p2x = p1x;
    a6ac:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
    a6ae:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
    a6b0:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
    a6b2:	4643      	mov	r3, r8
    a6b4:	81a3      	strh	r3, [r4, #12]
    param->cfg.p2.y = p2y;
    a6b6:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
    a6b8:	2303      	movs	r3, #3
    a6ba:	464a      	mov	r2, r9
    a6bc:	4013      	ands	r3, r2
    a6be:	7c22      	ldrb	r2, [r4, #16]
    a6c0:	2103      	movs	r1, #3
    a6c2:	438a      	bics	r2, r1
    a6c4:	431a      	orrs	r2, r3
    a6c6:	7422      	strb	r2, [r4, #16]
    param->origo.x = p1x;
    a6c8:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
    a6ca:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
    a6cc:	4643      	mov	r3, r8
    a6ce:	1bdf      	subs	r7, r3, r7
    a6d0:	1b76      	subs	r6, r6, r5
    a6d2:	17fb      	asrs	r3, r7, #31
    a6d4:	18fa      	adds	r2, r7, r3
    a6d6:	405a      	eors	r2, r3
    a6d8:	17f1      	asrs	r1, r6, #31
    a6da:	1873      	adds	r3, r6, r1
    a6dc:	404b      	eors	r3, r1
    a6de:	2501      	movs	r5, #1
    a6e0:	429a      	cmp	r2, r3
    a6e2:	dc00      	bgt.n	a6e6 <lv_draw_mask_line_points_init+0x6a>
    a6e4:	2500      	movs	r5, #0
    a6e6:	2128      	movs	r1, #40	; 0x28
    a6e8:	2201      	movs	r2, #1
    a6ea:	002b      	movs	r3, r5
    a6ec:	4013      	ands	r3, r2
    a6ee:	5c65      	ldrb	r5, [r4, r1]
    a6f0:	2001      	movs	r0, #1
    a6f2:	4385      	bics	r5, r0
    a6f4:	431d      	orrs	r5, r3
    a6f6:	5465      	strb	r5, [r4, r1]
    param->yx_steep = 0;
    a6f8:	2300      	movs	r3, #0
    a6fa:	61e3      	str	r3, [r4, #28]
    param->xy_steep = 0;
    a6fc:	61a3      	str	r3, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
    a6fe:	4939      	ldr	r1, [pc, #228]	; (a7e4 <lv_draw_mask_line_points_init+0x168>)
    a700:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
    a702:	7123      	strb	r3, [r4, #4]
    if(param->flat) {
    a704:	422a      	tst	r2, r5
    a706:	d027      	beq.n	a758 <lv_draw_mask_line_points_init+0xdc>
        if(dx) {
    a708:	2f00      	cmp	r7, #0
    a70a:	d007      	beq.n	a71c <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
    a70c:	0039      	movs	r1, r7
    a70e:	2080      	movs	r0, #128	; 0x80
    a710:	0340      	lsls	r0, r0, #13
    a712:	4b35      	ldr	r3, [pc, #212]	; (a7e8 <lv_draw_mask_line_points_init+0x16c>)
    a714:	4798      	blx	r3
            param->yx_steep = (m * dy) >> 10;
    a716:	4370      	muls	r0, r6
    a718:	1280      	asrs	r0, r0, #10
    a71a:	61e0      	str	r0, [r4, #28]
        if(dy) {
    a71c:	2e00      	cmp	r6, #0
    a71e:	d007      	beq.n	a730 <lv_draw_mask_line_points_init+0xb4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    a720:	0031      	movs	r1, r6
    a722:	2080      	movs	r0, #128	; 0x80
    a724:	0340      	lsls	r0, r0, #13
    a726:	4b30      	ldr	r3, [pc, #192]	; (a7e8 <lv_draw_mask_line_points_init+0x16c>)
    a728:	4798      	blx	r3
            param->xy_steep = (m * dx) >> 10;
    a72a:	4347      	muls	r7, r0
    a72c:	12bf      	asrs	r7, r7, #10
    a72e:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
    a730:	69e3      	ldr	r3, [r4, #28]
    a732:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
    a734:	7c22      	ldrb	r2, [r4, #16]
    a736:	2303      	movs	r3, #3
    a738:	4013      	ands	r3, r2
    a73a:	d124      	bne.n	a786 <lv_draw_mask_line_points_init+0x10a>
    a73c:	2228      	movs	r2, #40	; 0x28
    a73e:	5ca3      	ldrb	r3, [r4, r2]
    a740:	2102      	movs	r1, #2
    a742:	438b      	bics	r3, r1
    a744:	54a3      	strb	r3, [r4, r2]
    param->spx = param->steep >> 2;
    a746:	6a23      	ldr	r3, [r4, #32]
    a748:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
    a74a:	2b00      	cmp	r3, #0
    a74c:	db45      	blt.n	a7da <lv_draw_mask_line_points_init+0x15e>
    param->spx = param->steep >> 2;
    a74e:	6262      	str	r2, [r4, #36]	; 0x24
}
    a750:	bc0c      	pop	{r2, r3}
    a752:	4690      	mov	r8, r2
    a754:	4699      	mov	r9, r3
    a756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(dy) {
    a758:	2e00      	cmp	r6, #0
    a75a:	d007      	beq.n	a76c <lv_draw_mask_line_points_init+0xf0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    a75c:	0031      	movs	r1, r6
    a75e:	2080      	movs	r0, #128	; 0x80
    a760:	0340      	lsls	r0, r0, #13
    a762:	4b21      	ldr	r3, [pc, #132]	; (a7e8 <lv_draw_mask_line_points_init+0x16c>)
    a764:	4798      	blx	r3
            param->xy_steep = (m * dx) >> 10;
    a766:	4378      	muls	r0, r7
    a768:	1280      	asrs	r0, r0, #10
    a76a:	61a0      	str	r0, [r4, #24]
        if(dx) {
    a76c:	2f00      	cmp	r7, #0
    a76e:	d007      	beq.n	a780 <lv_draw_mask_line_points_init+0x104>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
    a770:	0039      	movs	r1, r7
    a772:	2080      	movs	r0, #128	; 0x80
    a774:	0340      	lsls	r0, r0, #13
    a776:	4b1c      	ldr	r3, [pc, #112]	; (a7e8 <lv_draw_mask_line_points_init+0x16c>)
    a778:	4798      	blx	r3
            param->yx_steep = (m * dy) >> 10;
    a77a:	4370      	muls	r0, r6
    a77c:	1280      	asrs	r0, r0, #10
    a77e:	61e0      	str	r0, [r4, #28]
        param->steep = param->xy_steep;
    a780:	69a3      	ldr	r3, [r4, #24]
    a782:	6223      	str	r3, [r4, #32]
    a784:	e7d6      	b.n	a734 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    a786:	2b01      	cmp	r3, #1
    a788:	d00c      	beq.n	a7a4 <lv_draw_mask_line_points_init+0x128>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
    a78a:	2b02      	cmp	r3, #2
    a78c:	d010      	beq.n	a7b0 <lv_draw_mask_line_points_init+0x134>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
    a78e:	2b03      	cmp	r3, #3
    a790:	d1d9      	bne.n	a746 <lv_draw_mask_line_points_init+0xca>
        if(param->steep > 0) param->inv = 0;
    a792:	6a23      	ldr	r3, [r4, #32]
    a794:	2b00      	cmp	r3, #0
    a796:	dd1a      	ble.n	a7ce <lv_draw_mask_line_points_init+0x152>
    a798:	2228      	movs	r2, #40	; 0x28
    a79a:	5ca3      	ldrb	r3, [r4, r2]
    a79c:	2102      	movs	r1, #2
    a79e:	438b      	bics	r3, r1
    a7a0:	54a3      	strb	r3, [r4, r2]
    a7a2:	e7d0      	b.n	a746 <lv_draw_mask_line_points_init+0xca>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    a7a4:	2228      	movs	r2, #40	; 0x28
    a7a6:	5ca3      	ldrb	r3, [r4, r2]
    a7a8:	2102      	movs	r1, #2
    a7aa:	430b      	orrs	r3, r1
    a7ac:	54a3      	strb	r3, [r4, r2]
    a7ae:	e7ca      	b.n	a746 <lv_draw_mask_line_points_init+0xca>
        if(param->steep > 0) param->inv = 1;
    a7b0:	6a23      	ldr	r3, [r4, #32]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	dd05      	ble.n	a7c2 <lv_draw_mask_line_points_init+0x146>
    a7b6:	2228      	movs	r2, #40	; 0x28
    a7b8:	5ca3      	ldrb	r3, [r4, r2]
    a7ba:	2102      	movs	r1, #2
    a7bc:	430b      	orrs	r3, r1
    a7be:	54a3      	strb	r3, [r4, r2]
    a7c0:	e7c1      	b.n	a746 <lv_draw_mask_line_points_init+0xca>
        else param->inv = 0;
    a7c2:	2228      	movs	r2, #40	; 0x28
    a7c4:	5ca3      	ldrb	r3, [r4, r2]
    a7c6:	2102      	movs	r1, #2
    a7c8:	438b      	bics	r3, r1
    a7ca:	54a3      	strb	r3, [r4, r2]
    a7cc:	e7bb      	b.n	a746 <lv_draw_mask_line_points_init+0xca>
        else param->inv = 1;
    a7ce:	2228      	movs	r2, #40	; 0x28
    a7d0:	5ca3      	ldrb	r3, [r4, r2]
    a7d2:	2102      	movs	r1, #2
    a7d4:	430b      	orrs	r3, r1
    a7d6:	54a3      	strb	r3, [r4, r2]
    a7d8:	e7b5      	b.n	a746 <lv_draw_mask_line_points_init+0xca>
    if(param->steep < 0) param->spx = -param->spx;
    a7da:	4252      	negs	r2, r2
    a7dc:	6262      	str	r2, [r4, #36]	; 0x24
}
    a7de:	e7b7      	b.n	a750 <lv_draw_mask_line_points_init+0xd4>
    a7e0:	00010fe5 	.word	0x00010fe5
    a7e4:	00009a25 	.word	0x00009a25
    a7e8:	00017a75 	.word	0x00017a75

0000a7ec <lv_draw_mask_radius_init>:
{
    a7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    a7ee:	88cc      	ldrh	r4, [r1, #6]
    a7f0:	3401      	adds	r4, #1
    a7f2:	884d      	ldrh	r5, [r1, #2]
    a7f4:	1b64      	subs	r4, r4, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    a7f6:	888e      	ldrh	r6, [r1, #4]
    a7f8:	3601      	adds	r6, #1
    a7fa:	880d      	ldrh	r5, [r1, #0]
    a7fc:	1b76      	subs	r6, r6, r5
    int32_t short_side = LV_MATH_MIN(w, h);
    a7fe:	1c25      	adds	r5, r4, #0
    a800:	b224      	sxth	r4, r4
    a802:	b237      	sxth	r7, r6
    a804:	42bc      	cmp	r4, r7
    a806:	dd00      	ble.n	a80a <lv_draw_mask_radius_init+0x1e>
    a808:	1c35      	adds	r5, r6, #0
    a80a:	b22d      	sxth	r5, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
    a80c:	106d      	asrs	r5, r5, #1
    a80e:	42aa      	cmp	r2, r5
    a810:	dd00      	ble.n	a814 <lv_draw_mask_radius_init+0x28>
    a812:	b22a      	sxth	r2, r5
    a814:	000e      	movs	r6, r1
    a816:	3608      	adds	r6, #8
    uint8_t * d8 = (uint8_t *)dst;
    a818:	0004      	movs	r4, r0
    a81a:	3408      	adds	r4, #8
        *d8 = *s8;
    a81c:	780d      	ldrb	r5, [r1, #0]
    a81e:	7025      	strb	r5, [r4, #0]
        d8++;
    a820:	3401      	adds	r4, #1
        s8++;
    a822:	3101      	adds	r1, #1
    while(len) {
    a824:	428e      	cmp	r6, r1
    a826:	d1f9      	bne.n	a81c <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
    a828:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
    a82a:	2201      	movs	r2, #1
    a82c:	401a      	ands	r2, r3
    a82e:	7c83      	ldrb	r3, [r0, #18]
    a830:	2101      	movs	r1, #1
    a832:	438b      	bics	r3, r1
    a834:	4313      	orrs	r3, r2
    a836:	7483      	strb	r3, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    a838:	4b05      	ldr	r3, [pc, #20]	; (a850 <lv_draw_mask_radius_init+0x64>)
    a83a:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
    a83c:	2302      	movs	r3, #2
    a83e:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
    a840:	2380      	movs	r3, #128	; 0x80
    a842:	061b      	lsls	r3, r3, #24
    a844:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
    a846:	2300      	movs	r3, #0
    a848:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
    a84a:	8303      	strh	r3, [r0, #24]
}
    a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a84e:	46c0      	nop			; (mov r8, r8)
    a850:	00009f41 	.word	0x00009f41

0000a854 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
    a854:	b5f0      	push	{r4, r5, r6, r7, lr}
    a856:	46de      	mov	lr, fp
    a858:	4657      	mov	r7, sl
    a85a:	464e      	mov	r6, r9
    a85c:	4645      	mov	r5, r8
    a85e:	b5e0      	push	{r5, r6, r7, lr}
    a860:	b091      	sub	sp, #68	; 0x44
    a862:	900d      	str	r0, [sp, #52]	; 0x34
    a864:	9102      	str	r1, [sp, #8]
    a866:	920c      	str	r2, [sp, #48]	; 0x30
    int32_t s_left = sw >> 1;
    a868:	104b      	asrs	r3, r1, #1
    a86a:	001e      	movs	r6, r3
    a86c:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
    a86e:	2301      	movs	r3, #1
    a870:	400b      	ands	r3, r1
    a872:	425a      	negs	r2, r3
    a874:	4153      	adcs	r3, r2
    a876:	1af3      	subs	r3, r6, r3
    a878:	001d      	movs	r5, r3
    a87a:	930e      	str	r3, [sp, #56]	; 0x38

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
    a87c:	0004      	movs	r4, r0
    a87e:	0047      	lsls	r7, r0, #1
    a880:	0038      	movs	r0, r7
    a882:	4b88      	ldr	r3, [pc, #544]	; (aaa4 <shadow_blur_corner+0x250>)
    a884:	4798      	blx	r3
    a886:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
    a888:	1e23      	subs	r3, r4, #0
    a88a:	dc00      	bgt.n	a88e <shadow_blur_corner+0x3a>
    a88c:	e0db      	b.n	aa46 <shadow_blur_corner+0x1f2>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    a88e:	1eb9      	subs	r1, r7, #2
    a890:	9103      	str	r1, [sp, #12]
    a892:	3b01      	subs	r3, #1
    a894:	9306      	str	r3, [sp, #24]
    a896:	468c      	mov	ip, r1
    a898:	4460      	add	r0, ip
    a89a:	9007      	str	r0, [sp, #28]
    a89c:	0019      	movs	r1, r3
    a89e:	1b49      	subs	r1, r1, r5
    a8a0:	9108      	str	r1, [sp, #32]
    a8a2:	0029      	movs	r1, r5
    a8a4:	0028      	movs	r0, r5
    a8a6:	950a      	str	r5, [sp, #40]	; 0x28
    a8a8:	4b7f      	ldr	r3, [pc, #508]	; (aaa8 <shadow_blur_corner+0x254>)
    a8aa:	46a4      	mov	ip, r4
    a8ac:	4463      	add	r3, ip
    a8ae:	1a5b      	subs	r3, r3, r1
    a8b0:	005d      	lsls	r5, r3, #1
    a8b2:	950b      	str	r5, [sp, #44]	; 0x2c
    a8b4:	0049      	lsls	r1, r1, #1
    a8b6:	000a      	movs	r2, r1
    a8b8:	9609      	str	r6, [sp, #36]	; 0x24
    a8ba:	0071      	lsls	r1, r6, #1
    a8bc:	4688      	mov	r8, r1
    a8be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a8c0:	4699      	mov	r9, r3
    a8c2:	2300      	movs	r3, #0
    a8c4:	9300      	str	r3, [sp, #0]
    a8c6:	2502      	movs	r5, #2
    a8c8:	426d      	negs	r5, r5
    a8ca:	1a2b      	subs	r3, r5, r0
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
            v += left_val;
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
    a8cc:	9701      	str	r7, [sp, #4]
    a8ce:	469b      	mov	fp, r3
    a8d0:	46ca      	mov	sl, r9
    a8d2:	4691      	mov	r9, r2
    a8d4:	e024      	b.n	a920 <shadow_blur_corner+0xcc>
            v -= right_val;
    a8d6:	1a9b      	subs	r3, r3, r2
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
    a8d8:	2e00      	cmp	r6, #0
    a8da:	db10      	blt.n	a8fe <shadow_blur_corner+0xaa>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
    a8dc:	882a      	ldrh	r2, [r5, #0]
            v += left_val;
    a8de:	18d3      	adds	r3, r2, r3
    a8e0:	3f02      	subs	r7, #2
    a8e2:	3d02      	subs	r5, #2
    a8e4:	3e01      	subs	r6, #1
        for(x = size - 1; x >= 0; x--) {
    a8e6:	455e      	cmp	r6, fp
    a8e8:	d00c      	beq.n	a904 <shadow_blur_corner+0xb0>
            sh_ups_blur_buf[x] = v;
    a8ea:	803b      	strh	r3, [r7, #0]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
    a8ec:	1981      	adds	r1, r0, r6
    a8ee:	2200      	movs	r2, #0
    a8f0:	428c      	cmp	r4, r1
    a8f2:	ddf0      	ble.n	a8d6 <shadow_blur_corner+0x82>
    a8f4:	464a      	mov	r2, r9
    a8f6:	18aa      	adds	r2, r5, r2
    a8f8:	4442      	add	r2, r8
    a8fa:	8852      	ldrh	r2, [r2, #2]
    a8fc:	e7eb      	b.n	a8d6 <shadow_blur_corner+0x82>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
    a8fe:	4652      	mov	r2, sl
    a900:	8812      	ldrh	r2, [r2, #0]
    a902:	e7ec      	b.n	a8de <shadow_blur_corner+0x8a>
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
    a904:	9d01      	ldr	r5, [sp, #4]
    a906:	002a      	movs	r2, r5
    a908:	9905      	ldr	r1, [sp, #20]
    a90a:	4650      	mov	r0, sl
    a90c:	4b67      	ldr	r3, [pc, #412]	; (aaac <shadow_blur_corner+0x258>)
    a90e:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    a910:	46ac      	mov	ip, r5
    a912:	44e2      	add	sl, ip
    for(y = 0; y < size; y++) {
    a914:	9b00      	ldr	r3, [sp, #0]
    a916:	3301      	adds	r3, #1
    a918:	9300      	str	r3, [sp, #0]
    a91a:	42a3      	cmp	r3, r4
    a91c:	db00      	blt.n	a920 <shadow_blur_corner+0xcc>
    a91e:	e0aa      	b.n	aa76 <shadow_blur_corner+0x222>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    a920:	9a02      	ldr	r2, [sp, #8]
    a922:	9204      	str	r2, [sp, #16]
    a924:	4653      	mov	r3, sl
    a926:	9903      	ldr	r1, [sp, #12]
    a928:	5a5b      	ldrh	r3, [r3, r1]
    a92a:	4353      	muls	r3, r2
        for(x = size - 1; x >= 0; x--) {
    a92c:	9a06      	ldr	r2, [sp, #24]
    a92e:	2a00      	cmp	r2, #0
    a930:	dbe8      	blt.n	a904 <shadow_blur_corner+0xb0>
    a932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a934:	4452      	add	r2, sl
    a936:	0015      	movs	r5, r2
    a938:	9a08      	ldr	r2, [sp, #32]
    a93a:	1e56      	subs	r6, r2, #1
    a93c:	9f07      	ldr	r7, [sp, #28]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
    a93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a940:	1c50      	adds	r0, r2, #1
    a942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a944:	4694      	mov	ip, r2
    a946:	4460      	add	r0, ip
    a948:	e7cf      	b.n	a8ea <shadow_blur_corner+0x96>
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    for(i = 1; i < (uint32_t)size * size; i++) {
    a94a:	3601      	adds	r6, #1
    a94c:	3502      	adds	r5, #2
    a94e:	42a6      	cmp	r6, r4
    a950:	d207      	bcs.n	a962 <shadow_blur_corner+0x10e>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
    a952:	8868      	ldrh	r0, [r5, #2]
    a954:	882b      	ldrh	r3, [r5, #0]
    a956:	4283      	cmp	r3, r0
    a958:	d0f7      	beq.n	a94a <shadow_blur_corner+0xf6>
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    a95a:	9904      	ldr	r1, [sp, #16]
    a95c:	47c8      	blx	r9
    a95e:	8068      	strh	r0, [r5, #2]
    a960:	e7f3      	b.n	a94a <shadow_blur_corner+0xf6>
    a962:	4644      	mov	r4, r8
    }

    for(x = 0; x < size; x++) {
    a964:	2c00      	cmp	r4, #0
    a966:	dc00      	bgt.n	a96a <shadow_blur_corner+0x116>
    a968:	e07b      	b.n	aa62 <shadow_blur_corner+0x20e>
    a96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a96c:	9303      	str	r3, [sp, #12]
    a96e:	980e      	ldr	r0, [sp, #56]	; 0x38
    a970:	1c42      	adds	r2, r0, #1
    a972:	0013      	movs	r3, r2
    a974:	437b      	muls	r3, r7
    a976:	9308      	str	r3, [sp, #32]
    a978:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    a97a:	426b      	negs	r3, r5
    a97c:	437b      	muls	r3, r7
    a97e:	469b      	mov	fp, r3
    a980:	990d      	ldr	r1, [sp, #52]	; 0x34
    a982:	004b      	lsls	r3, r1, #1
    a984:	425b      	negs	r3, r3
    a986:	435a      	muls	r2, r3
    a988:	9200      	str	r2, [sp, #0]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    a98a:	000b      	movs	r3, r1
    a98c:	3b01      	subs	r3, #1
    a98e:	434b      	muls	r3, r1
    a990:	005b      	lsls	r3, r3, #1
    a992:	9302      	str	r3, [sp, #8]
    a994:	2300      	movs	r3, #0
    a996:	9306      	str	r3, [sp, #24]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    a998:	0003      	movs	r3, r0
    a99a:	2201      	movs	r2, #1
    a99c:	4694      	mov	ip, r2
    a99e:	4463      	add	r3, ip
    a9a0:	469a      	mov	sl, r3
    a9a2:	46b8      	mov	r8, r7
    a9a4:	465b      	mov	r3, fp
    a9a6:	9301      	str	r3, [sp, #4]
    a9a8:	46ab      	mov	fp, r5
    a9aa:	e037      	b.n	aa1c <shadow_blur_corner+0x1c8>
    a9ac:	2100      	movs	r1, #0
    a9ae:	e00f      	b.n	a9d0 <shadow_blur_corner+0x17c>
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
    a9b0:	4648      	mov	r0, r9
    a9b2:	8800      	ldrh	r0, [r0, #0]
    a9b4:	e016      	b.n	a9e4 <shadow_blur_corner+0x190>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    a9b6:	4641      	mov	r1, r8
    a9b8:	9802      	ldr	r0, [sp, #8]
    a9ba:	5a09      	ldrh	r1, [r1, r0]
            v += bottom_val;
    a9bc:	18cb      	adds	r3, r1, r3
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
    a9be:	3201      	adds	r2, #1
    a9c0:	44b9      	add	r9, r7
    a9c2:	19f6      	adds	r6, r6, r7
    a9c4:	3402      	adds	r4, #2
    a9c6:	4562      	cmp	r2, ip
    a9c8:	da12      	bge.n	a9f0 <shadow_blur_corner+0x19c>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSACALE_SHIFT);
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	dbee      	blt.n	a9ac <shadow_blur_corner+0x158>
    a9ce:	1199      	asrs	r1, r3, #6
    a9d0:	8021      	strh	r1, [r4, #0]
    a9d2:	0011      	movs	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
    a9d4:	4658      	mov	r0, fp
    a9d6:	1a10      	subs	r0, r2, r0
    a9d8:	2800      	cmp	r0, #0
    a9da:	dde9      	ble.n	a9b0 <shadow_blur_corner+0x15c>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
    a9dc:	9801      	ldr	r0, [sp, #4]
    a9de:	1980      	adds	r0, r0, r6
    a9e0:	9d00      	ldr	r5, [sp, #0]
    a9e2:	5b40      	ldrh	r0, [r0, r5]
            v -= top_val;
    a9e4:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    a9e6:	4451      	add	r1, sl
    a9e8:	4561      	cmp	r1, ip
    a9ea:	dae4      	bge.n	a9b6 <shadow_blur_corner+0x162>
    a9ec:	8831      	ldrh	r1, [r6, #0]
    a9ee:	e7e5      	b.n	a9bc <shadow_blur_corner+0x168>
    a9f0:	4645      	mov	r5, r8
    a9f2:	46b8      	mov	r8, r7
    a9f4:	9f07      	ldr	r7, [sp, #28]
    a9f6:	4664      	mov	r4, ip
    a9f8:	2300      	movs	r3, #0
    a9fa:	4641      	mov	r1, r8
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
    a9fc:	883a      	ldrh	r2, [r7, #0]
    a9fe:	802a      	strh	r2, [r5, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
    aa00:	3301      	adds	r3, #1
    aa02:	186d      	adds	r5, r5, r1
    aa04:	3702      	adds	r7, #2
    aa06:	42a3      	cmp	r3, r4
    aa08:	dbf8      	blt.n	a9fc <shadow_blur_corner+0x1a8>
    aa0a:	4688      	mov	r8, r1
    for(x = 0; x < size; x++) {
    aa0c:	9b06      	ldr	r3, [sp, #24]
    aa0e:	3301      	adds	r3, #1
    aa10:	9306      	str	r3, [sp, #24]
    aa12:	9a03      	ldr	r2, [sp, #12]
    aa14:	3202      	adds	r2, #2
    aa16:	9203      	str	r2, [sp, #12]
    aa18:	42a3      	cmp	r3, r4
    aa1a:	da22      	bge.n	aa62 <shadow_blur_corner+0x20e>
        sh_ups_tmp_buf = &sh_ups_buf[x];
    aa1c:	9a03      	ldr	r2, [sp, #12]
    aa1e:	0015      	movs	r5, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
    aa20:	8813      	ldrh	r3, [r2, #0]
    aa22:	9904      	ldr	r1, [sp, #16]
    aa24:	434b      	muls	r3, r1
    aa26:	9908      	ldr	r1, [sp, #32]
    aa28:	000e      	movs	r6, r1
    aa2a:	4694      	mov	ip, r2
    aa2c:	4466      	add	r6, ip
    aa2e:	9a05      	ldr	r2, [sp, #20]
    aa30:	0017      	movs	r7, r2
    aa32:	4694      	mov	ip, r2
    aa34:	46a9      	mov	r9, r5
    aa36:	2200      	movs	r2, #0
    aa38:	9707      	str	r7, [sp, #28]
    aa3a:	4647      	mov	r7, r8
    aa3c:	0021      	movs	r1, r4
    aa3e:	4664      	mov	r4, ip
    aa40:	468c      	mov	ip, r1
    aa42:	46a8      	mov	r8, r5
    aa44:	e7c1      	b.n	a9ca <shadow_blur_corner+0x176>
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    aa46:	9b02      	ldr	r3, [sp, #8]
    aa48:	9304      	str	r3, [sp, #16]
    aa4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    aa4c:	8828      	ldrh	r0, [r5, #0]
    aa4e:	0019      	movs	r1, r3
    aa50:	4b17      	ldr	r3, [pc, #92]	; (aab0 <shadow_blur_corner+0x25c>)
    aa52:	4798      	blx	r3
    aa54:	8028      	strh	r0, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    aa56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aa58:	0013      	movs	r3, r2
    aa5a:	4353      	muls	r3, r2
    aa5c:	4698      	mov	r8, r3
    aa5e:	2b01      	cmp	r3, #1
    aa60:	d817      	bhi.n	aa92 <shadow_blur_corner+0x23e>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
    aa62:	9805      	ldr	r0, [sp, #20]
    aa64:	4b13      	ldr	r3, [pc, #76]	; (aab4 <shadow_blur_corner+0x260>)
    aa66:	4798      	blx	r3
}
    aa68:	b011      	add	sp, #68	; 0x44
    aa6a:	bc3c      	pop	{r2, r3, r4, r5}
    aa6c:	4690      	mov	r8, r2
    aa6e:	4699      	mov	r9, r3
    aa70:	46a2      	mov	sl, r4
    aa72:	46ab      	mov	fp, r5
    aa74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa76:	9f01      	ldr	r7, [sp, #4]
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    aa78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    aa7a:	8828      	ldrh	r0, [r5, #0]
    aa7c:	9904      	ldr	r1, [sp, #16]
    aa7e:	4b0c      	ldr	r3, [pc, #48]	; (aab0 <shadow_blur_corner+0x25c>)
    aa80:	4798      	blx	r3
    aa82:	8028      	strh	r0, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    aa84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    aa86:	0013      	movs	r3, r2
    aa88:	4353      	muls	r3, r2
    aa8a:	4698      	mov	r8, r3
    aa8c:	2b01      	cmp	r3, #1
    aa8e:	d800      	bhi.n	aa92 <shadow_blur_corner+0x23e>
    aa90:	e76b      	b.n	a96a <shadow_blur_corner+0x116>
    aa92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    aa94:	2601      	movs	r6, #1
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    aa96:	4b06      	ldr	r3, [pc, #24]	; (aab0 <shadow_blur_corner+0x25c>)
    aa98:	4699      	mov	r9, r3
    aa9a:	4643      	mov	r3, r8
    aa9c:	46a0      	mov	r8, r4
    aa9e:	001c      	movs	r4, r3
    aaa0:	e757      	b.n	a952 <shadow_blur_corner+0xfe>
    aaa2:	46c0      	nop			; (mov r8, r8)
    aaa4:	00010e59 	.word	0x00010e59
    aaa8:	7ffffffe 	.word	0x7ffffffe
    aaac:	00010c25 	.word	0x00010c25
    aab0:	00017a75 	.word	0x00017a75
    aab4:	00010b6d 	.word	0x00010b6d

0000aab8 <lv_draw_rect_dsc_init>:
{
    aab8:	b510      	push	{r4, lr}
    aaba:	0004      	movs	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    aabc:	2154      	movs	r1, #84	; 0x54
    aabe:	4b23      	ldr	r3, [pc, #140]	; (ab4c <lv_draw_rect_dsc_init+0x94>)
    aac0:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
    aac2:	4b23      	ldr	r3, [pc, #140]	; (ab50 <lv_draw_rect_dsc_init+0x98>)
    aac4:	881b      	ldrh	r3, [r3, #0]
    aac6:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
    aac8:	7923      	ldrb	r3, [r4, #4]
    aaca:	221f      	movs	r2, #31
    aacc:	4393      	bics	r3, r2
    aace:	7123      	strb	r3, [r4, #4]
    aad0:	88a1      	ldrh	r1, [r4, #4]
    aad2:	4b20      	ldr	r3, [pc, #128]	; (ab54 <lv_draw_rect_dsc_init+0x9c>)
    aad4:	4019      	ands	r1, r3
    aad6:	80a1      	strh	r1, [r4, #4]
    aad8:	2100      	movs	r1, #0
    aada:	7161      	strb	r1, [r4, #5]
    dsc->border_color = LV_COLOR_BLACK;
    aadc:	7ba1      	ldrb	r1, [r4, #14]
    aade:	4391      	bics	r1, r2
    aae0:	73a1      	strb	r1, [r4, #14]
    aae2:	89e1      	ldrh	r1, [r4, #14]
    aae4:	4019      	ands	r1, r3
    aae6:	81e1      	strh	r1, [r4, #14]
    aae8:	2100      	movs	r1, #0
    aaea:	73e1      	strb	r1, [r4, #15]
    dsc->pattern_recolor = LV_COLOR_BLACK;
    aaec:	2034      	movs	r0, #52	; 0x34
    aaee:	5c21      	ldrb	r1, [r4, r0]
    aaf0:	4391      	bics	r1, r2
    aaf2:	5421      	strb	r1, [r4, r0]
    aaf4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    aaf6:	4019      	ands	r1, r3
    aaf8:	86a1      	strh	r1, [r4, #52]	; 0x34
    aafa:	0021      	movs	r1, r4
    aafc:	3134      	adds	r1, #52	; 0x34
    aafe:	2000      	movs	r0, #0
    ab00:	7048      	strb	r0, [r1, #1]
    dsc->value_color = LV_COLOR_BLACK;
    ab02:	2146      	movs	r1, #70	; 0x46
    ab04:	5c60      	ldrb	r0, [r4, r1]
    ab06:	4390      	bics	r0, r2
    ab08:	5460      	strb	r0, [r4, r1]
    ab0a:	5a60      	ldrh	r0, [r4, r1]
    ab0c:	4018      	ands	r0, r3
    ab0e:	5260      	strh	r0, [r4, r1]
    ab10:	0021      	movs	r1, r4
    ab12:	3146      	adds	r1, #70	; 0x46
    ab14:	2000      	movs	r0, #0
    ab16:	7048      	strb	r0, [r1, #1]
    dsc->shadow_color = LV_COLOR_BLACK;
    ab18:	7fa1      	ldrb	r1, [r4, #30]
    ab1a:	4391      	bics	r1, r2
    ab1c:	77a1      	strb	r1, [r4, #30]
    ab1e:	8be2      	ldrh	r2, [r4, #30]
    ab20:	4013      	ands	r3, r2
    ab22:	83e3      	strh	r3, [r4, #30]
    ab24:	2300      	movs	r3, #0
    ab26:	77e3      	strb	r3, [r4, #31]
    dsc->bg_grad_color_stop = 0xFF;
    ab28:	33ff      	adds	r3, #255	; 0xff
    ab2a:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
    ab2c:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
    ab2e:	7723      	strb	r3, [r4, #28]
    dsc->border_opa = LV_OPA_COVER;
    ab30:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
    ab32:	2236      	movs	r2, #54	; 0x36
    ab34:	54a3      	strb	r3, [r4, r2]
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
    ab36:	4a08      	ldr	r2, [pc, #32]	; (ab58 <lv_draw_rect_dsc_init+0xa0>)
    ab38:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
    ab3a:	2144      	movs	r1, #68	; 0x44
    ab3c:	5463      	strb	r3, [r4, r1]
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    ab3e:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
    ab40:	2228      	movs	r2, #40	; 0x28
    ab42:	54a3      	strb	r3, [r4, r2]
    dsc->border_side = LV_BORDER_SIDE_FULL;
    ab44:	3bf0      	subs	r3, #240	; 0xf0
    ab46:	8263      	strh	r3, [r4, #18]
}
    ab48:	bd10      	pop	{r4, pc}
    ab4a:	46c0      	nop			; (mov r8, r8)
    ab4c:	00010fe5 	.word	0x00010fe5
    ab50:	00018a18 	.word	0x00018a18
    ab54:	fffff81f 	.word	0xfffff81f
    ab58:	20000030 	.word	0x20000030

0000ab5c <lv_draw_rect>:
{
    ab5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab5e:	46de      	mov	lr, fp
    ab60:	4657      	mov	r7, sl
    ab62:	464e      	mov	r6, r9
    ab64:	4645      	mov	r5, r8
    ab66:	b5e0      	push	{r5, r6, r7, lr}
    ab68:	b0b1      	sub	sp, #196	; 0xc4
    ab6a:	4681      	mov	r9, r0
    ab6c:	9104      	str	r1, [sp, #16]
    ab6e:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ab70:	88c4      	ldrh	r4, [r0, #6]
    ab72:	8845      	ldrh	r5, [r0, #2]
    ab74:	1c63      	adds	r3, r4, #1
    ab76:	1b5b      	subs	r3, r3, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    ab78:	b21b      	sxth	r3, r3
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	dc01      	bgt.n	ab82 <lv_draw_rect+0x26>
    ab7e:	f000 ffce 	bl	bb1e <lv_draw_rect+0xfc2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    ab82:	8886      	ldrh	r6, [r0, #4]
    ab84:	8807      	ldrh	r7, [r0, #0]
    ab86:	1c73      	adds	r3, r6, #1
    ab88:	1bdb      	subs	r3, r3, r7
    ab8a:	b21b      	sxth	r3, r3
    ab8c:	2b00      	cmp	r3, #0
    ab8e:	dc01      	bgt.n	ab94 <lv_draw_rect+0x38>
    ab90:	f000 ffc5 	bl	bb1e <lv_draw_rect+0xfc2>
    if(dsc->shadow_width == 0) return;
    ab94:	0013      	movs	r3, r2
    ab96:	2220      	movs	r2, #32
    ab98:	5e9b      	ldrsh	r3, [r3, r2]
    ab9a:	4698      	mov	r8, r3
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d101      	bne.n	aba4 <lv_draw_rect+0x48>
    aba0:	f000 fee1 	bl	b966 <lv_draw_rect+0xe0a>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
    aba4:	2328      	movs	r3, #40	; 0x28
    aba6:	465a      	mov	r2, fp
    aba8:	5cd3      	ldrb	r3, [r2, r3]
    abaa:	9306      	str	r3, [sp, #24]
    abac:	2b05      	cmp	r3, #5
    abae:	d801      	bhi.n	abb4 <lv_draw_rect+0x58>
    abb0:	f000 fed9 	bl	b966 <lv_draw_rect+0xe0a>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    abb4:	6a13      	ldr	r3, [r2, #32]
    abb6:	2b01      	cmp	r3, #1
    abb8:	d100      	bne.n	abbc <lv_draw_rect+0x60>
    abba:	e0e2      	b.n	ad82 <lv_draw_rect+0x226>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
    abbc:	465b      	mov	r3, fp
    abbe:	8c59      	ldrh	r1, [r3, #34]	; 0x22
    abc0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    abc2:	1a8b      	subs	r3, r1, r2
    abc4:	18ff      	adds	r7, r7, r3
    abc6:	b2bf      	uxth	r7, r7
    abc8:	ab14      	add	r3, sp, #80	; 0x50
    abca:	801f      	strh	r7, [r3, #0]
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
    abcc:	1889      	adds	r1, r1, r2
    abce:	1876      	adds	r6, r6, r1
    abd0:	b2b6      	uxth	r6, r6
    abd2:	809e      	strh	r6, [r3, #4]
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
    abd4:	4659      	mov	r1, fp
    abd6:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    abd8:	1a88      	subs	r0, r1, r2
    abda:	182d      	adds	r5, r5, r0
    abdc:	b2ad      	uxth	r5, r5
    abde:	805d      	strh	r5, [r3, #2]
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
    abe0:	1852      	adds	r2, r2, r1
    abe2:	18a4      	adds	r4, r4, r2
    abe4:	b2a4      	uxth	r4, r4
    abe6:	80dc      	strh	r4, [r3, #6]
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
    abe8:	4643      	mov	r3, r8
    abea:	0fdb      	lsrs	r3, r3, #31
    abec:	4443      	add	r3, r8
    abee:	1059      	asrs	r1, r3, #1
    abf0:	43c9      	mvns	r1, r1
    abf2:	b289      	uxth	r1, r1
    abf4:	aa16      	add	r2, sp, #88	; 0x58
    abf6:	1878      	adds	r0, r7, r1
    abf8:	8010      	strh	r0, [r2, #0]
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
    abfa:	105b      	asrs	r3, r3, #1
    abfc:	3301      	adds	r3, #1
    abfe:	b29b      	uxth	r3, r3
    ac00:	18f0      	adds	r0, r6, r3
    ac02:	8090      	strh	r0, [r2, #4]
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
    ac04:	1869      	adds	r1, r5, r1
    ac06:	8051      	strh	r1, [r2, #2]
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
    ac08:	18e3      	adds	r3, r4, r3
    ac0a:	80d3      	strh	r3, [r2, #6]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    ac0c:	9b06      	ldr	r3, [sp, #24]
    ac0e:	2bfa      	cmp	r3, #250	; 0xfa
    ac10:	d901      	bls.n	ac16 <lv_draw_rect+0xba>
    ac12:	23ff      	movs	r3, #255	; 0xff
    ac14:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    ac16:	4b9f      	ldr	r3, [pc, #636]	; (ae94 <lv_draw_rect+0x338>)
    ac18:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    ac1a:	4b9f      	ldr	r3, [pc, #636]	; (ae98 <lv_draw_rect+0x33c>)
    ac1c:	4798      	blx	r3
    ac1e:	4682      	mov	sl, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
    ac20:	9a04      	ldr	r2, [sp, #16]
    ac22:	a916      	add	r1, sp, #88	; 0x58
    ac24:	a818      	add	r0, sp, #96	; 0x60
    ac26:	4b9d      	ldr	r3, [pc, #628]	; (ae9c <lv_draw_rect+0x340>)
    ac28:	4798      	blx	r3
    if(is_common == false) return;
    ac2a:	2800      	cmp	r0, #0
    ac2c:	d101      	bne.n	ac32 <lv_draw_rect+0xd6>
    ac2e:	f000 fe9a 	bl	b966 <lv_draw_rect+0xe0a>
    draw_area.x1 -= disp_area->x1;
    ac32:	4653      	mov	r3, sl
    ac34:	8a1b      	ldrh	r3, [r3, #16]
    ac36:	469c      	mov	ip, r3
    ac38:	ab18      	add	r3, sp, #96	; 0x60
    ac3a:	881a      	ldrh	r2, [r3, #0]
    ac3c:	4661      	mov	r1, ip
    ac3e:	1a52      	subs	r2, r2, r1
    ac40:	801a      	strh	r2, [r3, #0]
    draw_area.y1 -= disp_area->y1;
    ac42:	4652      	mov	r2, sl
    ac44:	8a50      	ldrh	r0, [r2, #18]
    ac46:	885a      	ldrh	r2, [r3, #2]
    ac48:	1a12      	subs	r2, r2, r0
    ac4a:	805a      	strh	r2, [r3, #2]
    draw_area.x2 -= disp_area->x1;
    ac4c:	8899      	ldrh	r1, [r3, #4]
    ac4e:	4662      	mov	r2, ip
    ac50:	1a89      	subs	r1, r1, r2
    ac52:	8099      	strh	r1, [r3, #4]
    draw_area.y2 -= disp_area->y1;
    ac54:	88da      	ldrh	r2, [r3, #6]
    ac56:	1a12      	subs	r2, r2, r0
    ac58:	80da      	strh	r2, [r3, #6]
    ac5a:	2300      	movs	r3, #0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    ac5c:	a91a      	add	r1, sp, #104	; 0x68
    ac5e:	4648      	mov	r0, r9
    ac60:	5cc2      	ldrb	r2, [r0, r3]
    ac62:	545a      	strb	r2, [r3, r1]
    ac64:	3301      	adds	r3, #1
    while(len) {
    ac66:	2b08      	cmp	r3, #8
    ac68:	d1fa      	bne.n	ac60 <lv_draw_rect+0x104>
    ac6a:	4681      	mov	r9, r0
    bg_coords.x1 += 1;
    ac6c:	ab1a      	add	r3, sp, #104	; 0x68
    ac6e:	8819      	ldrh	r1, [r3, #0]
    ac70:	3101      	adds	r1, #1
    ac72:	b28a      	uxth	r2, r1
    ac74:	4694      	mov	ip, r2
    ac76:	801a      	strh	r2, [r3, #0]
    bg_coords.y1 += 1;
    ac78:	8858      	ldrh	r0, [r3, #2]
    ac7a:	3001      	adds	r0, #1
    ac7c:	b282      	uxth	r2, r0
    ac7e:	9205      	str	r2, [sp, #20]
    ac80:	466a      	mov	r2, sp
    ac82:	8a92      	ldrh	r2, [r2, #20]
    ac84:	805a      	strh	r2, [r3, #2]
    bg_coords.x2 -= 1;
    ac86:	8898      	ldrh	r0, [r3, #4]
    ac88:	1e42      	subs	r2, r0, #1
    ac8a:	809a      	strh	r2, [r3, #4]
    bg_coords.y2 -= 1;
    ac8c:	88da      	ldrh	r2, [r3, #6]
    ac8e:	1e51      	subs	r1, r2, #1
    ac90:	80d9      	strh	r1, [r3, #6]
    int32_t r_bg = dsc->radius;
    ac92:	465b      	mov	r3, fp
    ac94:	2100      	movs	r1, #0
    ac96:	5e5b      	ldrsh	r3, [r3, r1]
    ac98:	4661      	mov	r1, ip
    ac9a:	1a41      	subs	r1, r0, r1
    ac9c:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ac9e:	9805      	ldr	r0, [sp, #20]
    aca0:	1a10      	subs	r0, r2, r0
    aca2:	b200      	sxth	r0, r0
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
    aca4:	0002      	movs	r2, r0
    aca6:	4281      	cmp	r1, r0
    aca8:	da00      	bge.n	acac <lv_draw_rect+0x150>
    acaa:	000a      	movs	r2, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
    acac:	1052      	asrs	r2, r2, #1
    acae:	920f      	str	r2, [sp, #60]	; 0x3c
    acb0:	429a      	cmp	r2, r3
    acb2:	dd00      	ble.n	acb6 <lv_draw_rect+0x15a>
    acb4:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    acb6:	3601      	adds	r6, #1
    acb8:	1bf6      	subs	r6, r6, r7
    acba:	b2b2      	uxth	r2, r6
    acbc:	4692      	mov	sl, r2
    acbe:	b211      	sxth	r1, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    acc0:	3401      	adds	r4, #1
    acc2:	1b65      	subs	r5, r4, r5
    acc4:	b2ad      	uxth	r5, r5
    acc6:	b22a      	sxth	r2, r5
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
    acc8:	0014      	movs	r4, r2
    acca:	4291      	cmp	r1, r2
    accc:	da00      	bge.n	acd0 <lv_draw_rect+0x174>
    acce:	000c      	movs	r4, r1
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
    acd0:	1064      	asrs	r4, r4, #1
    acd2:	429c      	cmp	r4, r3
    acd4:	dd00      	ble.n	acd8 <lv_draw_rect+0x17c>
    acd6:	001c      	movs	r4, r3
    int32_t corner_size = sw  + r_sh;
    acd8:	44a0      	add	r8, r4
    acda:	4643      	mov	r3, r8
    acdc:	9309      	str	r3, [sp, #36]	; 0x24
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
    acde:	4640      	mov	r0, r8
    ace0:	4358      	muls	r0, r3
    ace2:	0040      	lsls	r0, r0, #1
    ace4:	4b6e      	ldr	r3, [pc, #440]	; (aea0 <lv_draw_rect+0x344>)
    ace6:	4798      	blx	r3
    ace8:	900e      	str	r0, [sp, #56]	; 0x38
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
    acea:	465b      	mov	r3, fp
    acec:	2720      	movs	r7, #32
    acee:	5fdf      	ldrsh	r7, [r3, r7]
    acf0:	b222      	sxth	r2, r4
    int32_t sw_ori = sw;
    acf2:	46b8      	mov	r8, r7
    int32_t size = sw_ori  + r;
    acf4:	19d3      	adds	r3, r2, r7
    acf6:	9307      	str	r3, [sp, #28]
    acf8:	2300      	movs	r3, #0
        *d8 = *s8;
    acfa:	a822      	add	r0, sp, #136	; 0x88
    acfc:	a914      	add	r1, sp, #80	; 0x50
    acfe:	5c5e      	ldrb	r6, [r3, r1]
    ad00:	541e      	strb	r6, [r3, r0]
    ad02:	3301      	adds	r3, #1
    while(len) {
    ad04:	2b08      	cmp	r3, #8
    ad06:	d1fa      	bne.n	acfe <lv_draw_rect+0x1a2>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
    ad08:	0ffb      	lsrs	r3, r7, #31
    ad0a:	19db      	adds	r3, r3, r7
    ad0c:	105b      	asrs	r3, r3, #1
    ad0e:	b29b      	uxth	r3, r3
    ad10:	2101      	movs	r1, #1
    ad12:	4039      	ands	r1, r7
    ad14:	000e      	movs	r6, r1
    ad16:	9110      	str	r1, [sp, #64]	; 0x40
    ad18:	1e59      	subs	r1, r3, #1
    ad1a:	4270      	negs	r0, r6
    ad1c:	4170      	adcs	r0, r6
    ad1e:	1a09      	subs	r1, r1, r0
    ad20:	190c      	adds	r4, r1, r4
    ad22:	b2a4      	uxth	r4, r4
    ad24:	a922      	add	r1, sp, #136	; 0x88
    ad26:	808c      	strh	r4, [r1, #4]
    sh_area.y1 = sw / 2 + 1;
    ad28:	3301      	adds	r3, #1
    ad2a:	b29b      	uxth	r3, r3
    ad2c:	804b      	strh	r3, [r1, #2]
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
    ad2e:	4650      	mov	r0, sl
    ad30:	1a24      	subs	r4, r4, r0
    ad32:	800c      	strh	r4, [r1, #0]
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
    ad34:	18ed      	adds	r5, r5, r3
    ad36:	80cd      	strh	r5, [r1, #6]
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
    ad38:	2300      	movs	r3, #0
    ad3a:	a829      	add	r0, sp, #164	; 0xa4
    ad3c:	4c59      	ldr	r4, [pc, #356]	; (aea4 <lv_draw_rect+0x348>)
    ad3e:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
    ad40:	4643      	mov	r3, r8
    ad42:	2b01      	cmp	r3, #1
    ad44:	d101      	bne.n	ad4a <lv_draw_rect+0x1ee>
    ad46:	f002 f95b 	bl	d000 <lv_draw_rect+0x24a4>
    ad4a:	107b      	asrs	r3, r7, #1
    ad4c:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    ad4e:	9c07      	ldr	r4, [sp, #28]
    ad50:	940c      	str	r4, [sp, #48]	; 0x30
    ad52:	0020      	movs	r0, r4
    ad54:	4b52      	ldr	r3, [pc, #328]	; (aea0 <lv_draw_rect+0x344>)
    ad56:	4798      	blx	r3
    ad58:	900a      	str	r0, [sp, #40]	; 0x28
    for(y = 0; y < size; y++) {
    ad5a:	2c00      	cmp	r4, #0
    ad5c:	dd61      	ble.n	ae22 <lv_draw_rect+0x2c6>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    ad5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ad60:	005b      	lsls	r3, r3, #1
    ad62:	930b      	str	r3, [sp, #44]	; 0x2c
    ad64:	9b07      	ldr	r3, [sp, #28]
    ad66:	4a50      	ldr	r2, [pc, #320]	; (aea8 <lv_draw_rect+0x34c>)
    ad68:	4694      	mov	ip, r2
    ad6a:	4463      	add	r3, ip
    ad6c:	005b      	lsls	r3, r3, #1
    ad6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad70:	4692      	mov	sl, r2
    ad72:	2200      	movs	r2, #0
    ad74:	4690      	mov	r8, r2
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
    ad76:	4f4d      	ldr	r7, [pc, #308]	; (aeac <lv_draw_rect+0x350>)
    ad78:	4652      	mov	r2, sl
    ad7a:	9208      	str	r2, [sp, #32]
    ad7c:	46ca      	mov	sl, r9
    ad7e:	4699      	mov	r9, r3
    ad80:	e01c      	b.n	adbc <lv_draw_rect+0x260>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    ad82:	465b      	mov	r3, fp
    ad84:	2224      	movs	r2, #36	; 0x24
    ad86:	5e9b      	ldrsh	r3, [r3, r2]
    ad88:	2b00      	cmp	r3, #0
    ad8a:	d000      	beq.n	ad8e <lv_draw_rect+0x232>
    ad8c:	e716      	b.n	abbc <lv_draw_rect+0x60>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
    ad8e:	465b      	mov	r3, fp
    ad90:	2226      	movs	r2, #38	; 0x26
    ad92:	5e9b      	ldrsh	r3, [r3, r2]
    ad94:	2b00      	cmp	r3, #0
    ad96:	dd00      	ble.n	ad9a <lv_draw_rect+0x23e>
    ad98:	e710      	b.n	abbc <lv_draw_rect+0x60>
    ad9a:	f000 fde4 	bl	b966 <lv_draw_rect+0xe0a>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    ad9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ada0:	9808      	ldr	r0, [sp, #32]
    ada2:	4b43      	ldr	r3, [pc, #268]	; (aeb0 <lv_draw_rect+0x354>)
    ada4:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    ada6:	9b08      	ldr	r3, [sp, #32]
    ada8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    adaa:	4694      	mov	ip, r2
    adac:	4463      	add	r3, ip
    adae:	9308      	str	r3, [sp, #32]
    for(y = 0; y < size; y++) {
    adb0:	2301      	movs	r3, #1
    adb2:	469c      	mov	ip, r3
    adb4:	44e0      	add	r8, ip
    adb6:	9b07      	ldr	r3, [sp, #28]
    adb8:	4543      	cmp	r3, r8
    adba:	dd31      	ble.n	ae20 <lv_draw_rect+0x2c4>
        _lv_memset_ff(mask_line, size);
    adbc:	990c      	ldr	r1, [sp, #48]	; 0x30
    adbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    adc0:	0020      	movs	r0, r4
    adc2:	4b3c      	ldr	r3, [pc, #240]	; (aeb4 <lv_draw_rect+0x358>)
    adc4:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    adc6:	466b      	mov	r3, sp
    adc8:	221c      	movs	r2, #28
    adca:	5e9b      	ldrsh	r3, [r3, r2]
    adcc:	4642      	mov	r2, r8
    adce:	b212      	sxth	r2, r2
    add0:	a929      	add	r1, sp, #164	; 0xa4
    add2:	9100      	str	r1, [sp, #0]
    add4:	2100      	movs	r1, #0
    add6:	0020      	movs	r0, r4
    add8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    adda:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    addc:	2800      	cmp	r0, #0
    adde:	d0de      	beq.n	ad9e <lv_draw_rect+0x242>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSACALE_SHIFT) / sw;
    ade0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ade2:	9305      	str	r3, [sp, #20]
    ade4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ade6:	7828      	ldrb	r0, [r5, #0]
    ade8:	0180      	lsls	r0, r0, #6
    adea:	0019      	movs	r1, r3
    adec:	4b2f      	ldr	r3, [pc, #188]	; (aeac <lv_draw_rect+0x350>)
    adee:	4798      	blx	r3
    adf0:	9b08      	ldr	r3, [sp, #32]
    adf2:	8018      	strh	r0, [r3, #0]
            for(i = 1; i < size; i++) {
    adf4:	9a07      	ldr	r2, [sp, #28]
    adf6:	2a01      	cmp	r2, #1
    adf8:	ddd5      	ble.n	ada6 <lv_draw_rect+0x24a>
    adfa:	001c      	movs	r4, r3
    adfc:	444b      	add	r3, r9
    adfe:	001e      	movs	r6, r3
    ae00:	e005      	b.n	ae0e <lv_draw_rect+0x2b2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
    ae02:	8823      	ldrh	r3, [r4, #0]
    ae04:	8063      	strh	r3, [r4, #2]
    ae06:	3501      	adds	r5, #1
    ae08:	3402      	adds	r4, #2
            for(i = 1; i < size; i++) {
    ae0a:	42a6      	cmp	r6, r4
    ae0c:	d0cb      	beq.n	ada6 <lv_draw_rect+0x24a>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
    ae0e:	7868      	ldrb	r0, [r5, #1]
    ae10:	782b      	ldrb	r3, [r5, #0]
    ae12:	4283      	cmp	r3, r0
    ae14:	d0f5      	beq.n	ae02 <lv_draw_rect+0x2a6>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
    ae16:	0180      	lsls	r0, r0, #6
    ae18:	9905      	ldr	r1, [sp, #20]
    ae1a:	47b8      	blx	r7
    ae1c:	8060      	strh	r0, [r4, #2]
    ae1e:	e7f2      	b.n	ae06 <lv_draw_rect+0x2aa>
    ae20:	46d1      	mov	r9, sl
    _lv_mem_buf_release(mask_line);
    ae22:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae24:	4b24      	ldr	r3, [pc, #144]	; (aeb8 <lv_draw_rect+0x35c>)
    ae26:	4798      	blx	r3
    if(sw == 1) {
    ae28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae2a:	2b01      	cmp	r3, #1
    ae2c:	d101      	bne.n	ae32 <lv_draw_rect+0x2d6>
    ae2e:	f002 f8f6 	bl	d01e <lv_draw_rect+0x24c2>
    shadow_blur_corner(size, sw, sh_buf);
    ae32:	466b      	mov	r3, sp
    ae34:	221c      	movs	r2, #28
    ae36:	5e9b      	ldrsh	r3, [r3, r2]
    ae38:	9308      	str	r3, [sp, #32]
    ae3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    ae3c:	0022      	movs	r2, r4
    ae3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    ae40:	0029      	movs	r1, r5
    ae42:	0018      	movs	r0, r3
    ae44:	4b1d      	ldr	r3, [pc, #116]	; (aebc <lv_draw_rect+0x360>)
    ae46:	4798      	blx	r3
    sw += sw_ori & 1;
    ae48:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ae4a:	46ac      	mov	ip, r5
    ae4c:	4463      	add	r3, ip
    ae4e:	b21f      	sxth	r7, r3
    if(sw > 1) {
    ae50:	2f01      	cmp	r7, #1
    ae52:	dd3a      	ble.n	aeca <lv_draw_rect+0x36e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
    ae54:	9705      	str	r7, [sp, #20]
    ae56:	8820      	ldrh	r0, [r4, #0]
    ae58:	0180      	lsls	r0, r0, #6
    ae5a:	0039      	movs	r1, r7
    ae5c:	4b13      	ldr	r3, [pc, #76]	; (aeac <lv_draw_rect+0x350>)
    ae5e:	4798      	blx	r3
    ae60:	8020      	strh	r0, [r4, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
    ae62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    ae64:	436d      	muls	r5, r5
    ae66:	2d01      	cmp	r5, #1
    ae68:	d92a      	bls.n	aec0 <lv_draw_rect+0x364>
    ae6a:	4a0f      	ldr	r2, [pc, #60]	; (aea8 <lv_draw_rect+0x34c>)
    ae6c:	4694      	mov	ip, r2
    ae6e:	4465      	add	r5, ip
    ae70:	006d      	lsls	r5, r5, #1
    ae72:	46a4      	mov	ip, r4
    ae74:	4465      	add	r5, ip
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
    ae76:	4e0d      	ldr	r6, [pc, #52]	; (aeac <lv_draw_rect+0x350>)
    ae78:	e002      	b.n	ae80 <lv_draw_rect+0x324>
    ae7a:	3402      	adds	r4, #2
        for(i = 1; i < (uint32_t) size * size; i++) {
    ae7c:	42a5      	cmp	r5, r4
    ae7e:	d01f      	beq.n	aec0 <lv_draw_rect+0x364>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
    ae80:	8860      	ldrh	r0, [r4, #2]
    ae82:	8823      	ldrh	r3, [r4, #0]
    ae84:	4283      	cmp	r3, r0
    ae86:	d0f8      	beq.n	ae7a <lv_draw_rect+0x31e>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
    ae88:	0180      	lsls	r0, r0, #6
    ae8a:	9905      	ldr	r1, [sp, #20]
    ae8c:	47b0      	blx	r6
    ae8e:	8060      	strh	r0, [r4, #2]
    ae90:	e7f3      	b.n	ae7a <lv_draw_rect+0x31e>
    ae92:	46c0      	nop			; (mov r8, r8)
    ae94:	00004349 	.word	0x00004349
    ae98:	0000f6a1 	.word	0x0000f6a1
    ae9c:	0000fba7 	.word	0x0000fba7
    aea0:	00010e59 	.word	0x00010e59
    aea4:	0000a7ed 	.word	0x0000a7ed
    aea8:	7fffffff 	.word	0x7fffffff
    aeac:	00017a75 	.word	0x00017a75
    aeb0:	00010fe5 	.word	0x00010fe5
    aeb4:	00011089 	.word	0x00011089
    aeb8:	00010b6d 	.word	0x00010b6d
    aebc:	0000a855 	.word	0x0000a855
        shadow_blur_corner(size, sw, sh_buf);
    aec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aec2:	0039      	movs	r1, r7
    aec4:	9808      	ldr	r0, [sp, #32]
    aec6:	4bb5      	ldr	r3, [pc, #724]	; (b19c <lv_draw_rect+0x640>)
    aec8:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
    aeca:	9f07      	ldr	r7, [sp, #28]
    aecc:	437f      	muls	r7, r7
    aece:	2f00      	cmp	r7, #0
    aed0:	d00a      	beq.n	aee8 <lv_draw_rect+0x38c>
    aed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aed4:	0013      	movs	r3, r2
    aed6:	0078      	lsls	r0, r7, #1
    aed8:	4694      	mov	ip, r2
    aeda:	4460      	add	r0, ip
        res_buf[x] = sh_buf[x];
    aedc:	8819      	ldrh	r1, [r3, #0]
    aede:	7011      	strb	r1, [r2, #0]
    aee0:	3302      	adds	r3, #2
    aee2:	3201      	adds	r2, #1
    for(x = 0; x < size * size; x++) {
    aee4:	4283      	cmp	r3, r0
    aee6:	d1f9      	bne.n	aedc <lv_draw_rect+0x380>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
    aee8:	a916      	add	r1, sp, #88	; 0x58
    aeea:	884a      	ldrh	r2, [r1, #2]
    aeec:	88cb      	ldrh	r3, [r1, #6]
    aeee:	3301      	adds	r3, #1
    aef0:	1a9b      	subs	r3, r3, r2
    aef2:	b21b      	sxth	r3, r3
    aef4:	0fd8      	lsrs	r0, r3, #31
    aef6:	18c3      	adds	r3, r0, r3
    aef8:	105b      	asrs	r3, r3, #1
    aefa:	18d3      	adds	r3, r2, r3
    aefc:	b29b      	uxth	r3, r3
    aefe:	9310      	str	r3, [sp, #64]	; 0x40
    af00:	b21b      	sxth	r3, r3
    af02:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
    af04:	880a      	ldrh	r2, [r1, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    af06:	888b      	ldrh	r3, [r1, #4]
    af08:	3301      	adds	r3, #1
    af0a:	1a9b      	subs	r3, r3, r2
    af0c:	b21b      	sxth	r3, r3
    af0e:	0fd9      	lsrs	r1, r3, #31
    af10:	18cb      	adds	r3, r1, r3
    af12:	105b      	asrs	r3, r3, #1
    af14:	18d3      	adds	r3, r2, r3
    af16:	b29b      	uxth	r3, r3
    af18:	9311      	str	r3, [sp, #68]	; 0x44
    af1a:	b21b      	sxth	r3, r3
    af1c:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    af1e:	4ba0      	ldr	r3, [pc, #640]	; (b1a0 <lv_draw_rect+0x644>)
    af20:	4798      	blx	r3
    af22:	2300      	movs	r3, #0
    af24:	9308      	str	r3, [sp, #32]
    af26:	2800      	cmp	r0, #0
    af28:	d110      	bne.n	af4c <lv_draw_rect+0x3f0>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    af2a:	465b      	mov	r3, fp
    af2c:	2222      	movs	r2, #34	; 0x22
    af2e:	5e9b      	ldrsh	r3, [r3, r2]
    af30:	2b00      	cmp	r3, #0
    af32:	d10b      	bne.n	af4c <lv_draw_rect+0x3f0>
    af34:	465b      	mov	r3, fp
    af36:	2224      	movs	r2, #36	; 0x24
    af38:	5e9b      	ldrsh	r3, [r3, r2]
    af3a:	2b00      	cmp	r3, #0
    af3c:	d106      	bne.n	af4c <lv_draw_rect+0x3f0>
    else if(dsc->shadow_spread != 0) simple_mode = false;
    af3e:	465b      	mov	r3, fp
    af40:	2226      	movs	r2, #38	; 0x26
    af42:	5e9a      	ldrsh	r2, [r3, r2]
    af44:	4253      	negs	r3, r2
    af46:	4153      	adcs	r3, r2
    af48:	b2db      	uxtb	r3, r3
    af4a:	9308      	str	r3, [sp, #32]
    af4c:	ac16      	add	r4, sp, #88	; 0x58
    af4e:	88a0      	ldrh	r0, [r4, #4]
    af50:	3001      	adds	r0, #1
    af52:	8823      	ldrh	r3, [r4, #0]
    af54:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
    af56:	b200      	sxth	r0, r0
    af58:	4b92      	ldr	r3, [pc, #584]	; (b1a4 <lv_draw_rect+0x648>)
    af5a:	4798      	blx	r3
    af5c:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
    af5e:	466b      	mov	r3, sp
    af60:	223c      	movs	r2, #60	; 0x3c
    af62:	5e9a      	ldrsh	r2, [r3, r2]
    af64:	2301      	movs	r3, #1
    af66:	a91a      	add	r1, sp, #104	; 0x68
    af68:	a829      	add	r0, sp, #164	; 0xa4
    af6a:	4d8f      	ldr	r5, [pc, #572]	; (b1a8 <lv_draw_rect+0x64c>)
    af6c:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    af6e:	2100      	movs	r1, #0
    af70:	a829      	add	r0, sp, #164	; 0xa4
    af72:	4b8e      	ldr	r3, [pc, #568]	; (b1ac <lv_draw_rect+0x650>)
    af74:	4798      	blx	r3
    af76:	900f      	str	r0, [sp, #60]	; 0x3c
    a.x2 = sh_area.x2;
    af78:	2204      	movs	r2, #4
    af7a:	5ea3      	ldrsh	r3, [r4, r2]
    af7c:	a91c      	add	r1, sp, #112	; 0x70
    af7e:	808b      	strh	r3, [r1, #4]
    a.x1 = a.x2 - corner_size + 1;
    af80:	466a      	mov	r2, sp
    af82:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    af84:	920a      	str	r2, [sp, #40]	; 0x28
    af86:	3301      	adds	r3, #1
    af88:	1a9b      	subs	r3, r3, r2
    af8a:	800b      	strh	r3, [r1, #0]
    a.y1 = sh_area.y1;
    af8c:	2002      	movs	r0, #2
    af8e:	5e23      	ldrsh	r3, [r4, r0]
    af90:	804b      	strh	r3, [r1, #2]
    a.y2 = a.y1 + corner_size - 1;
    af92:	3b01      	subs	r3, #1
    af94:	4694      	mov	ip, r2
    af96:	4463      	add	r3, ip
    af98:	80cb      	strh	r3, [r1, #6]
    bool has_com = _lv_area_intersect(&ca, &a, clip);
    af9a:	9a04      	ldr	r2, [sp, #16]
    af9c:	a81e      	add	r0, sp, #120	; 0x78
    af9e:	4b84      	ldr	r3, [pc, #528]	; (b1b0 <lv_draw_rect+0x654>)
    afa0:	4798      	blx	r3
    if(has_com) {
    afa2:	2800      	cmp	r0, #0
    afa4:	d071      	beq.n	b08a <lv_draw_rect+0x52e>
        if(ca.y2 > h_half) ca.y2 = h_half;
    afa6:	ab1e      	add	r3, sp, #120	; 0x78
    afa8:	2206      	movs	r2, #6
    afaa:	5e9b      	ldrsh	r3, [r3, r2]
    afac:	990c      	ldr	r1, [sp, #48]	; 0x30
    afae:	428b      	cmp	r3, r1
    afb0:	dd01      	ble.n	afb6 <lv_draw_rect+0x45a>
    afb2:	ab1e      	add	r3, sp, #120	; 0x78
    afb4:	80d9      	strh	r1, [r3, #6]
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    afb6:	ab1e      	add	r3, sp, #120	; 0x78
    afb8:	2200      	movs	r2, #0
    afba:	5e9b      	ldrsh	r3, [r3, r2]
    afbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    afbe:	4293      	cmp	r3, r2
    afc0:	dc03      	bgt.n	afca <lv_draw_rect+0x46e>
    afc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    afc4:	3301      	adds	r3, #1
    afc6:	aa1e      	add	r2, sp, #120	; 0x78
    afc8:	8013      	strh	r3, [r2, #0]
    afca:	ab1e      	add	r3, sp, #120	; 0x78
    afcc:	2100      	movs	r1, #0
    afce:	5e5a      	ldrsh	r2, [r3, r1]
    afd0:	889b      	ldrh	r3, [r3, #4]
    afd2:	3301      	adds	r3, #1
    afd4:	1a9b      	subs	r3, r3, r2
    afd6:	b21b      	sxth	r3, r3
    afd8:	930b      	str	r3, [sp, #44]	; 0x2c
        if(w > 0) {
    afda:	2b00      	cmp	r3, #0
    afdc:	dd55      	ble.n	b08a <lv_draw_rect+0x52e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    afde:	ab1e      	add	r3, sp, #120	; 0x78
    afe0:	2106      	movs	r1, #6
    afe2:	5e5c      	ldrsh	r4, [r3, r1]
    afe4:	2602      	movs	r6, #2
    afe6:	5f9e      	ldrsh	r6, [r3, r6]
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    afe8:	ab1c      	add	r3, sp, #112	; 0x70
    afea:	2102      	movs	r1, #2
    afec:	5e5d      	ldrsh	r5, [r3, r1]
    afee:	1b75      	subs	r5, r6, r5
    aff0:	9909      	ldr	r1, [sp, #36]	; 0x24
    aff2:	434d      	muls	r5, r1
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    aff4:	2100      	movs	r1, #0
    aff6:	5e5b      	ldrsh	r3, [r3, r1]
    aff8:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    affa:	18ad      	adds	r5, r5, r2
    affc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    affe:	469c      	mov	ip, r3
    b000:	4465      	add	r5, ip
    b002:	2300      	movs	r3, #0
        *d8 = *s8;
    b004:	a822      	add	r0, sp, #136	; 0x88
    b006:	a91e      	add	r1, sp, #120	; 0x78
    b008:	5c5a      	ldrb	r2, [r3, r1]
    b00a:	541a      	strb	r2, [r3, r0]
    b00c:	3301      	adds	r3, #1
    while(len) {
    b00e:	2b08      	cmp	r3, #8
    b010:	d1fa      	bne.n	b008 <lv_draw_rect+0x4ac>
            fa.y2 = fa.y1;
    b012:	ab22      	add	r3, sp, #136	; 0x88
    b014:	885a      	ldrh	r2, [r3, #2]
    b016:	80da      	strh	r2, [r3, #6]
    b018:	3401      	adds	r4, #1
    b01a:	1ba6      	subs	r6, r4, r6
    b01c:	b236      	sxth	r6, r6
            for(y = 0; y < h; y++) {
    b01e:	2e00      	cmp	r6, #0
    b020:	dd33      	ble.n	b08a <lv_draw_rect+0x52e>
    b022:	1c73      	adds	r3, r6, #1
    b024:	4698      	mov	r8, r3
    b026:	2601      	movs	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b028:	ac22      	add	r4, sp, #136	; 0x88
    b02a:	4b62      	ldr	r3, [pc, #392]	; (b1b4 <lv_draw_rect+0x658>)
    b02c:	469a      	mov	sl, r3
    b02e:	9507      	str	r5, [sp, #28]
    b030:	465f      	mov	r7, fp
    b032:	e019      	b.n	b068 <lv_draw_rect+0x50c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b034:	8bfa      	ldrh	r2, [r7, #30]
    b036:	2329      	movs	r3, #41	; 0x29
    b038:	5cfb      	ldrb	r3, [r7, r3]
    b03a:	9302      	str	r3, [sp, #8]
    b03c:	9b06      	ldr	r3, [sp, #24]
    b03e:	9301      	str	r3, [sp, #4]
    b040:	9000      	str	r0, [sp, #0]
    b042:	9b05      	ldr	r3, [sp, #20]
    b044:	0021      	movs	r1, r4
    b046:	9804      	ldr	r0, [sp, #16]
    b048:	4d5b      	ldr	r5, [pc, #364]	; (b1b8 <lv_draw_rect+0x65c>)
    b04a:	47a8      	blx	r5
                fa.y1++;
    b04c:	8863      	ldrh	r3, [r4, #2]
    b04e:	3301      	adds	r3, #1
    b050:	8063      	strh	r3, [r4, #2]
                fa.y2++;
    b052:	88e3      	ldrh	r3, [r4, #6]
    b054:	3301      	adds	r3, #1
    b056:	80e3      	strh	r3, [r4, #6]
    b058:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b05a:	469c      	mov	ip, r3
    b05c:	9b07      	ldr	r3, [sp, #28]
    b05e:	4463      	add	r3, ip
    b060:	9307      	str	r3, [sp, #28]
    b062:	3601      	adds	r6, #1
            for(y = 0; y < h; y++) {
    b064:	45b0      	cmp	r8, r6
    b066:	d00f      	beq.n	b088 <lv_draw_rect+0x52c>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b06a:	9907      	ldr	r1, [sp, #28]
    b06c:	9805      	ldr	r0, [sp, #20]
    b06e:	4b53      	ldr	r3, [pc, #332]	; (b1bc <lv_draw_rect+0x660>)
    b070:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b072:	2102      	movs	r1, #2
    b074:	5e62      	ldrsh	r2, [r4, r1]
    b076:	2500      	movs	r5, #0
    b078:	5f61      	ldrsh	r1, [r4, r5]
    b07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b07c:	9805      	ldr	r0, [sp, #20]
    b07e:	47d0      	blx	sl
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b080:	2801      	cmp	r0, #1
    b082:	d1d7      	bne.n	b034 <lv_draw_rect+0x4d8>
    b084:	3001      	adds	r0, #1
    b086:	e7d5      	b.n	b034 <lv_draw_rect+0x4d8>
    b088:	46bb      	mov	fp, r7
    a.x2 = sh_area.x2;
    b08a:	aa16      	add	r2, sp, #88	; 0x58
    b08c:	2104      	movs	r1, #4
    b08e:	5e53      	ldrsh	r3, [r2, r1]
    b090:	a91c      	add	r1, sp, #112	; 0x70
    b092:	808b      	strh	r3, [r1, #4]
    a.x1 = a.x2 - corner_size + 1;
    b094:	3301      	adds	r3, #1
    b096:	980a      	ldr	r0, [sp, #40]	; 0x28
    b098:	1a1b      	subs	r3, r3, r0
    b09a:	800b      	strh	r3, [r1, #0]
    a.y1 = sh_area.y2 - corner_size + 1;
    b09c:	2306      	movs	r3, #6
    b09e:	5ed2      	ldrsh	r2, [r2, r3]
    b0a0:	1c53      	adds	r3, r2, #1
    b0a2:	1a1b      	subs	r3, r3, r0
    b0a4:	804b      	strh	r3, [r1, #2]
    a.y2 = sh_area.y2;
    b0a6:	80ca      	strh	r2, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b0a8:	9a04      	ldr	r2, [sp, #16]
    b0aa:	a81e      	add	r0, sp, #120	; 0x78
    b0ac:	4b40      	ldr	r3, [pc, #256]	; (b1b0 <lv_draw_rect+0x654>)
    b0ae:	4798      	blx	r3
    if(has_com) {
    b0b0:	2800      	cmp	r0, #0
    b0b2:	d100      	bne.n	b0b6 <lv_draw_rect+0x55a>
    b0b4:	e085      	b.n	b1c2 <lv_draw_rect+0x666>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    b0b6:	ab1e      	add	r3, sp, #120	; 0x78
    b0b8:	2202      	movs	r2, #2
    b0ba:	5e9b      	ldrsh	r3, [r3, r2]
    b0bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b0be:	4293      	cmp	r3, r2
    b0c0:	dc03      	bgt.n	b0ca <lv_draw_rect+0x56e>
    b0c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b0c4:	3301      	adds	r3, #1
    b0c6:	aa1e      	add	r2, sp, #120	; 0x78
    b0c8:	8053      	strh	r3, [r2, #2]
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    b0ca:	ab1e      	add	r3, sp, #120	; 0x78
    b0cc:	2200      	movs	r2, #0
    b0ce:	5e9b      	ldrsh	r3, [r3, r2]
    b0d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b0d2:	4293      	cmp	r3, r2
    b0d4:	dc03      	bgt.n	b0de <lv_draw_rect+0x582>
    b0d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b0d8:	3301      	adds	r3, #1
    b0da:	aa1e      	add	r2, sp, #120	; 0x78
    b0dc:	8013      	strh	r3, [r2, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b0de:	ab1e      	add	r3, sp, #120	; 0x78
    b0e0:	2100      	movs	r1, #0
    b0e2:	5e5a      	ldrsh	r2, [r3, r1]
    b0e4:	889b      	ldrh	r3, [r3, #4]
    b0e6:	3301      	adds	r3, #1
    b0e8:	1a9b      	subs	r3, r3, r2
    b0ea:	b21b      	sxth	r3, r3
    b0ec:	930b      	str	r3, [sp, #44]	; 0x2c
        if(w > 0) {
    b0ee:	2b00      	cmp	r3, #0
    b0f0:	dd67      	ble.n	b1c2 <lv_draw_rect+0x666>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b0f2:	ab1e      	add	r3, sp, #120	; 0x78
    b0f4:	2106      	movs	r1, #6
    b0f6:	5e5c      	ldrsh	r4, [r3, r1]
    b0f8:	2602      	movs	r6, #2
    b0fa:	5f9e      	ldrsh	r6, [r3, r6]
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    b0fc:	ab1c      	add	r3, sp, #112	; 0x70
    b0fe:	2106      	movs	r1, #6
    b100:	5e5d      	ldrsh	r5, [r3, r1]
    b102:	1b2d      	subs	r5, r5, r4
    b104:	9909      	ldr	r1, [sp, #36]	; 0x24
    b106:	434d      	muls	r5, r1
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    b108:	2100      	movs	r1, #0
    b10a:	5e5b      	ldrsh	r3, [r3, r1]
    b10c:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    b10e:	18ad      	adds	r5, r5, r2
    b110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b112:	469c      	mov	ip, r3
    b114:	4465      	add	r5, ip
    b116:	2300      	movs	r3, #0
        *d8 = *s8;
    b118:	a822      	add	r0, sp, #136	; 0x88
    b11a:	a91e      	add	r1, sp, #120	; 0x78
    b11c:	5c5a      	ldrb	r2, [r3, r1]
    b11e:	541a      	strb	r2, [r3, r0]
    b120:	3301      	adds	r3, #1
    while(len) {
    b122:	2b08      	cmp	r3, #8
    b124:	d1fa      	bne.n	b11c <lv_draw_rect+0x5c0>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    b126:	ab22      	add	r3, sp, #136	; 0x88
    b128:	88da      	ldrh	r2, [r3, #6]
    b12a:	805a      	strh	r2, [r3, #2]
    b12c:	3401      	adds	r4, #1
    b12e:	1ba6      	subs	r6, r4, r6
    b130:	b236      	sxth	r6, r6
            for(y = 0; y < h; y++) {
    b132:	2e00      	cmp	r6, #0
    b134:	dd45      	ble.n	b1c2 <lv_draw_rect+0x666>
    b136:	1c73      	adds	r3, r6, #1
    b138:	4698      	mov	r8, r3
    b13a:	2601      	movs	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b13c:	ac22      	add	r4, sp, #136	; 0x88
    b13e:	4b1d      	ldr	r3, [pc, #116]	; (b1b4 <lv_draw_rect+0x658>)
    b140:	469a      	mov	sl, r3
    b142:	9507      	str	r5, [sp, #28]
    b144:	465f      	mov	r7, fp
    b146:	e019      	b.n	b17c <lv_draw_rect+0x620>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b148:	8bfa      	ldrh	r2, [r7, #30]
    b14a:	2329      	movs	r3, #41	; 0x29
    b14c:	5cfb      	ldrb	r3, [r7, r3]
    b14e:	9302      	str	r3, [sp, #8]
    b150:	9b06      	ldr	r3, [sp, #24]
    b152:	9301      	str	r3, [sp, #4]
    b154:	9000      	str	r0, [sp, #0]
    b156:	9b05      	ldr	r3, [sp, #20]
    b158:	0021      	movs	r1, r4
    b15a:	9804      	ldr	r0, [sp, #16]
    b15c:	4d16      	ldr	r5, [pc, #88]	; (b1b8 <lv_draw_rect+0x65c>)
    b15e:	47a8      	blx	r5
                fa.y1--;
    b160:	8863      	ldrh	r3, [r4, #2]
    b162:	3b01      	subs	r3, #1
    b164:	8063      	strh	r3, [r4, #2]
                fa.y2--;
    b166:	88e3      	ldrh	r3, [r4, #6]
    b168:	3b01      	subs	r3, #1
    b16a:	80e3      	strh	r3, [r4, #6]
    b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b16e:	469c      	mov	ip, r3
    b170:	9b07      	ldr	r3, [sp, #28]
    b172:	4463      	add	r3, ip
    b174:	9307      	str	r3, [sp, #28]
    b176:	3601      	adds	r6, #1
            for(y = 0; y < h; y++) {
    b178:	4546      	cmp	r6, r8
    b17a:	d021      	beq.n	b1c0 <lv_draw_rect+0x664>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b17c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b17e:	9907      	ldr	r1, [sp, #28]
    b180:	9805      	ldr	r0, [sp, #20]
    b182:	4b0e      	ldr	r3, [pc, #56]	; (b1bc <lv_draw_rect+0x660>)
    b184:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b186:	2102      	movs	r1, #2
    b188:	5e62      	ldrsh	r2, [r4, r1]
    b18a:	2500      	movs	r5, #0
    b18c:	5f61      	ldrsh	r1, [r4, r5]
    b18e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b190:	9805      	ldr	r0, [sp, #20]
    b192:	47d0      	blx	sl
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b194:	2801      	cmp	r0, #1
    b196:	d1d7      	bne.n	b148 <lv_draw_rect+0x5ec>
    b198:	3001      	adds	r0, #1
    b19a:	e7d5      	b.n	b148 <lv_draw_rect+0x5ec>
    b19c:	0000a855 	.word	0x0000a855
    b1a0:	0000a659 	.word	0x0000a659
    b1a4:	00010e59 	.word	0x00010e59
    b1a8:	0000a7ed 	.word	0x0000a7ed
    b1ac:	0000a585 	.word	0x0000a585
    b1b0:	0000fba7 	.word	0x0000fba7
    b1b4:	0000a5bd 	.word	0x0000a5bd
    b1b8:	00005c05 	.word	0x00005c05
    b1bc:	00010c25 	.word	0x00010c25
    b1c0:	46bb      	mov	fp, r7
    a.x2 = sh_area.x2;
    b1c2:	aa16      	add	r2, sp, #88	; 0x58
    b1c4:	2104      	movs	r1, #4
    b1c6:	5e53      	ldrsh	r3, [r2, r1]
    b1c8:	a91c      	add	r1, sp, #112	; 0x70
    b1ca:	808b      	strh	r3, [r1, #4]
    a.x1 = a.x2 - corner_size + 1;
    b1cc:	3301      	adds	r3, #1
    b1ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    b1d0:	1a1b      	subs	r3, r3, r0
    b1d2:	800b      	strh	r3, [r1, #0]
    a.y1 = sh_area.y1 + corner_size;
    b1d4:	8853      	ldrh	r3, [r2, #2]
    b1d6:	4684      	mov	ip, r0
    b1d8:	4463      	add	r3, ip
    b1da:	804b      	strh	r3, [r1, #2]
    a.y2 = sh_area.y2 - corner_size;
    b1dc:	88d3      	ldrh	r3, [r2, #6]
    b1de:	1a1b      	subs	r3, r3, r0
    b1e0:	80cb      	strh	r3, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b1e2:	9a04      	ldr	r2, [sp, #16]
    b1e4:	a81e      	add	r0, sp, #120	; 0x78
    b1e6:	4bd1      	ldr	r3, [pc, #836]	; (b52c <lv_draw_rect+0x9d0>)
    b1e8:	4798      	blx	r3
    if(has_com) {
    b1ea:	2800      	cmp	r0, #0
    b1ec:	d06c      	beq.n	b2c8 <lv_draw_rect+0x76c>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
    b1ee:	9b08      	ldr	r3, [sp, #32]
    b1f0:	2b00      	cmp	r3, #0
    b1f2:	d00a      	beq.n	b20a <lv_draw_rect+0x6ae>
    b1f4:	aa1e      	add	r2, sp, #120	; 0x78
    b1f6:	8810      	ldrh	r0, [r2, #0]
    b1f8:	464b      	mov	r3, r9
    b1fa:	889b      	ldrh	r3, [r3, #4]
    b1fc:	1c19      	adds	r1, r3, #0
    b1fe:	b21b      	sxth	r3, r3
    b200:	b204      	sxth	r4, r0
    b202:	42a3      	cmp	r3, r4
    b204:	da00      	bge.n	b208 <lv_draw_rect+0x6ac>
    b206:	1c01      	adds	r1, r0, #0
    b208:	8011      	strh	r1, [r2, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b20a:	ab1e      	add	r3, sp, #120	; 0x78
    b20c:	2100      	movs	r1, #0
    b20e:	5e5a      	ldrsh	r2, [r3, r1]
    b210:	889b      	ldrh	r3, [r3, #4]
    b212:	3301      	adds	r3, #1
    b214:	1a9b      	subs	r3, r3, r2
    b216:	b21b      	sxth	r3, r3
    b218:	9307      	str	r3, [sp, #28]
        if(w > 0) {
    b21a:	2b00      	cmp	r3, #0
    b21c:	dd54      	ble.n	b2c8 <lv_draw_rect+0x76c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b21e:	ab1e      	add	r3, sp, #120	; 0x78
    b220:	88df      	ldrh	r7, [r3, #6]
    b222:	3701      	adds	r7, #1
    b224:	885b      	ldrh	r3, [r3, #2]
    b226:	1aff      	subs	r7, r7, r3
    b228:	b23f      	sxth	r7, r7
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    b22a:	9909      	ldr	r1, [sp, #36]	; 0x24
    b22c:	000b      	movs	r3, r1
    b22e:	3b01      	subs	r3, #1
    b230:	434b      	muls	r3, r1
            sh_buf_tmp += ca.x1 - a.x1;
    b232:	a91c      	add	r1, sp, #112	; 0x70
    b234:	2000      	movs	r0, #0
    b236:	5e09      	ldrsh	r1, [r1, r0]
    b238:	1a52      	subs	r2, r2, r1
    b23a:	189a      	adds	r2, r3, r2
    b23c:	0013      	movs	r3, r2
    b23e:	990e      	ldr	r1, [sp, #56]	; 0x38
    b240:	468c      	mov	ip, r1
    b242:	4463      	add	r3, ip
    b244:	930b      	str	r3, [sp, #44]	; 0x2c
    b246:	2300      	movs	r3, #0
        *d8 = *s8;
    b248:	a822      	add	r0, sp, #136	; 0x88
    b24a:	a91e      	add	r1, sp, #120	; 0x78
    b24c:	5c5a      	ldrb	r2, [r3, r1]
    b24e:	541a      	strb	r2, [r3, r0]
    b250:	3301      	adds	r3, #1
    while(len) {
    b252:	2b08      	cmp	r3, #8
    b254:	d1fa      	bne.n	b24c <lv_draw_rect+0x6f0>
            fa.y2 = fa.y1;
    b256:	ab22      	add	r3, sp, #136	; 0x88
    b258:	885a      	ldrh	r2, [r3, #2]
    b25a:	80da      	strh	r2, [r3, #6]
            for(y = 0; y < h; y++) {
    b25c:	2f00      	cmp	r7, #0
    b25e:	dd33      	ble.n	b2c8 <lv_draw_rect+0x76c>
    b260:	2500      	movs	r5, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b262:	4bb3      	ldr	r3, [pc, #716]	; (b530 <lv_draw_rect+0x9d4>)
    b264:	4698      	mov	r8, r3
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b266:	ac22      	add	r4, sp, #136	; 0x88
    b268:	9b08      	ldr	r3, [sp, #32]
    b26a:	469a      	mov	sl, r3
    b26c:	465e      	mov	r6, fp
    b26e:	46bb      	mov	fp, r7
    b270:	e015      	b.n	b29e <lv_draw_rect+0x742>
                _lv_blend_fill(clip, &fa,
    b272:	8bf2      	ldrh	r2, [r6, #30]
    b274:	2329      	movs	r3, #41	; 0x29
    b276:	5cf3      	ldrb	r3, [r6, r3]
    b278:	9302      	str	r3, [sp, #8]
    b27a:	2328      	movs	r3, #40	; 0x28
    b27c:	5cf3      	ldrb	r3, [r6, r3]
    b27e:	9301      	str	r3, [sp, #4]
    b280:	9000      	str	r0, [sp, #0]
    b282:	9b05      	ldr	r3, [sp, #20]
    b284:	0021      	movs	r1, r4
    b286:	9804      	ldr	r0, [sp, #16]
    b288:	4faa      	ldr	r7, [pc, #680]	; (b534 <lv_draw_rect+0x9d8>)
    b28a:	47b8      	blx	r7
                fa.y1++;
    b28c:	8863      	ldrh	r3, [r4, #2]
    b28e:	3301      	adds	r3, #1
    b290:	8063      	strh	r3, [r4, #2]
                fa.y2++;
    b292:	88e3      	ldrh	r3, [r4, #6]
    b294:	3301      	adds	r3, #1
    b296:	80e3      	strh	r3, [r4, #6]
            for(y = 0; y < h; y++) {
    b298:	3501      	adds	r5, #1
    b29a:	455d      	cmp	r5, fp
    b29c:	da13      	bge.n	b2c6 <lv_draw_rect+0x76a>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b29e:	9a07      	ldr	r2, [sp, #28]
    b2a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b2a2:	9805      	ldr	r0, [sp, #20]
    b2a4:	47c0      	blx	r8
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    b2a6:	2002      	movs	r0, #2
                if(simple_mode) {
    b2a8:	4653      	mov	r3, sl
    b2aa:	2b00      	cmp	r3, #0
    b2ac:	d1e1      	bne.n	b272 <lv_draw_rect+0x716>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b2ae:	2302      	movs	r3, #2
    b2b0:	5ee2      	ldrsh	r2, [r4, r3]
    b2b2:	2300      	movs	r3, #0
    b2b4:	5ee1      	ldrsh	r1, [r4, r3]
    b2b6:	9b07      	ldr	r3, [sp, #28]
    b2b8:	9805      	ldr	r0, [sp, #20]
    b2ba:	4f9f      	ldr	r7, [pc, #636]	; (b538 <lv_draw_rect+0x9dc>)
    b2bc:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b2be:	2801      	cmp	r0, #1
    b2c0:	d1d7      	bne.n	b272 <lv_draw_rect+0x716>
    b2c2:	3001      	adds	r0, #1
    b2c4:	e7d5      	b.n	b272 <lv_draw_rect+0x716>
    b2c6:	46b3      	mov	fp, r6
    for(y = 0; y < corner_size; y++) {
    b2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2ca:	2b00      	cmp	r3, #0
    b2cc:	dd1f      	ble.n	b30e <lv_draw_rect+0x7b2>
        for(x = 0; x < corner_size / 2; x++) {
    b2ce:	0fdf      	lsrs	r7, r3, #31
    b2d0:	469c      	mov	ip, r3
    b2d2:	4467      	add	r7, ip
    b2d4:	107f      	asrs	r7, r7, #1
    b2d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b2d8:	2600      	movs	r6, #0
    b2da:	1e5a      	subs	r2, r3, #1
    b2dc:	4694      	mov	ip, r2
    b2de:	46b8      	mov	r8, r7
    b2e0:	001f      	movs	r7, r3
    b2e2:	e00b      	b.n	b2fc <lv_draw_rect+0x7a0>
            lv_opa_t tmp = sh_buf_tmp[x];
    b2e4:	7819      	ldrb	r1, [r3, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
    b2e6:	7810      	ldrb	r0, [r2, #0]
    b2e8:	7018      	strb	r0, [r3, #0]
            sh_buf_tmp[corner_size - x - 1] = tmp;
    b2ea:	7011      	strb	r1, [r2, #0]
    b2ec:	3301      	adds	r3, #1
    b2ee:	3a01      	subs	r2, #1
        for(x = 0; x < corner_size / 2; x++) {
    b2f0:	429c      	cmp	r4, r3
    b2f2:	d1f7      	bne.n	b2e4 <lv_draw_rect+0x788>
    b2f4:	19ed      	adds	r5, r5, r7
    for(y = 0; y < corner_size; y++) {
    b2f6:	3601      	adds	r6, #1
    b2f8:	42b7      	cmp	r7, r6
    b2fa:	d008      	beq.n	b30e <lv_draw_rect+0x7b2>
        for(x = 0; x < corner_size / 2; x++) {
    b2fc:	4643      	mov	r3, r8
    b2fe:	2b00      	cmp	r3, #0
    b300:	d0f8      	beq.n	b2f4 <lv_draw_rect+0x798>
    b302:	002b      	movs	r3, r5
    b304:	4662      	mov	r2, ip
    b306:	18aa      	adds	r2, r5, r2
    b308:	4641      	mov	r1, r8
    b30a:	186c      	adds	r4, r5, r1
    b30c:	e7ea      	b.n	b2e4 <lv_draw_rect+0x788>
    a.x1 = sh_area.x1;
    b30e:	aa16      	add	r2, sp, #88	; 0x58
    b310:	2100      	movs	r1, #0
    b312:	5e53      	ldrsh	r3, [r2, r1]
    b314:	a91c      	add	r1, sp, #112	; 0x70
    b316:	800b      	strh	r3, [r1, #0]
    a.x2 = a.x1 + corner_size - 1;
    b318:	3b01      	subs	r3, #1
    b31a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b31c:	46a4      	mov	ip, r4
    b31e:	4463      	add	r3, ip
    b320:	808b      	strh	r3, [r1, #4]
    a.y1 = sh_area.y1;
    b322:	2302      	movs	r3, #2
    b324:	5ed3      	ldrsh	r3, [r2, r3]
    b326:	804b      	strh	r3, [r1, #2]
    a.y2 = a.y1 + corner_size - 1;
    b328:	3b01      	subs	r3, #1
    b32a:	4463      	add	r3, ip
    b32c:	80cb      	strh	r3, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b32e:	9a04      	ldr	r2, [sp, #16]
    b330:	a81e      	add	r0, sp, #120	; 0x78
    b332:	4b7e      	ldr	r3, [pc, #504]	; (b52c <lv_draw_rect+0x9d0>)
    b334:	4798      	blx	r3
    if(has_com) {
    b336:	2800      	cmp	r0, #0
    b338:	d06f      	beq.n	b41a <lv_draw_rect+0x8be>
        if(ca.y2 > h_half) ca.y2 = h_half;
    b33a:	ab1e      	add	r3, sp, #120	; 0x78
    b33c:	2206      	movs	r2, #6
    b33e:	5e9b      	ldrsh	r3, [r3, r2]
    b340:	990c      	ldr	r1, [sp, #48]	; 0x30
    b342:	428b      	cmp	r3, r1
    b344:	dd01      	ble.n	b34a <lv_draw_rect+0x7ee>
    b346:	ab1e      	add	r3, sp, #120	; 0x78
    b348:	80d9      	strh	r1, [r3, #6]
        if(ca.x2 > w_half) ca.x2 = w_half;
    b34a:	ab1e      	add	r3, sp, #120	; 0x78
    b34c:	2204      	movs	r2, #4
    b34e:	5e9b      	ldrsh	r3, [r3, r2]
    b350:	990d      	ldr	r1, [sp, #52]	; 0x34
    b352:	428b      	cmp	r3, r1
    b354:	dd01      	ble.n	b35a <lv_draw_rect+0x7fe>
    b356:	ab1e      	add	r3, sp, #120	; 0x78
    b358:	8099      	strh	r1, [r3, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b35a:	ab1e      	add	r3, sp, #120	; 0x78
    b35c:	2100      	movs	r1, #0
    b35e:	5e5a      	ldrsh	r2, [r3, r1]
    b360:	889b      	ldrh	r3, [r3, #4]
    b362:	3301      	adds	r3, #1
    b364:	1a9b      	subs	r3, r3, r2
    b366:	b21b      	sxth	r3, r3
    b368:	930b      	str	r3, [sp, #44]	; 0x2c
        if(w > 0) {
    b36a:	2b00      	cmp	r3, #0
    b36c:	dd55      	ble.n	b41a <lv_draw_rect+0x8be>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b36e:	ab1e      	add	r3, sp, #120	; 0x78
    b370:	2106      	movs	r1, #6
    b372:	5e5c      	ldrsh	r4, [r3, r1]
    b374:	2602      	movs	r6, #2
    b376:	5f9e      	ldrsh	r6, [r3, r6]
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    b378:	ab1c      	add	r3, sp, #112	; 0x70
    b37a:	2102      	movs	r1, #2
    b37c:	5e5d      	ldrsh	r5, [r3, r1]
    b37e:	1b75      	subs	r5, r6, r5
    b380:	9909      	ldr	r1, [sp, #36]	; 0x24
    b382:	434d      	muls	r5, r1
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    b384:	2100      	movs	r1, #0
    b386:	5e5b      	ldrsh	r3, [r3, r1]
    b388:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    b38a:	18ad      	adds	r5, r5, r2
    b38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b38e:	469c      	mov	ip, r3
    b390:	4465      	add	r5, ip
    b392:	2300      	movs	r3, #0
        *d8 = *s8;
    b394:	a822      	add	r0, sp, #136	; 0x88
    b396:	a91e      	add	r1, sp, #120	; 0x78
    b398:	5c5a      	ldrb	r2, [r3, r1]
    b39a:	541a      	strb	r2, [r3, r0]
    b39c:	3301      	adds	r3, #1
    while(len) {
    b39e:	2b08      	cmp	r3, #8
    b3a0:	d1fa      	bne.n	b398 <lv_draw_rect+0x83c>
            fa.y2 = fa.y1;
    b3a2:	ab22      	add	r3, sp, #136	; 0x88
    b3a4:	885a      	ldrh	r2, [r3, #2]
    b3a6:	80da      	strh	r2, [r3, #6]
    b3a8:	3401      	adds	r4, #1
    b3aa:	1ba6      	subs	r6, r4, r6
    b3ac:	b236      	sxth	r6, r6
            for(y = 0; y < h; y++) {
    b3ae:	2e00      	cmp	r6, #0
    b3b0:	dd33      	ble.n	b41a <lv_draw_rect+0x8be>
    b3b2:	1c73      	adds	r3, r6, #1
    b3b4:	4698      	mov	r8, r3
    b3b6:	2601      	movs	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b3b8:	ac22      	add	r4, sp, #136	; 0x88
    b3ba:	4b5f      	ldr	r3, [pc, #380]	; (b538 <lv_draw_rect+0x9dc>)
    b3bc:	469a      	mov	sl, r3
    b3be:	9507      	str	r5, [sp, #28]
    b3c0:	465f      	mov	r7, fp
    b3c2:	e019      	b.n	b3f8 <lv_draw_rect+0x89c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b3c4:	8bfa      	ldrh	r2, [r7, #30]
    b3c6:	2329      	movs	r3, #41	; 0x29
    b3c8:	5cfb      	ldrb	r3, [r7, r3]
    b3ca:	9302      	str	r3, [sp, #8]
    b3cc:	9b06      	ldr	r3, [sp, #24]
    b3ce:	9301      	str	r3, [sp, #4]
    b3d0:	9000      	str	r0, [sp, #0]
    b3d2:	9b05      	ldr	r3, [sp, #20]
    b3d4:	0021      	movs	r1, r4
    b3d6:	9804      	ldr	r0, [sp, #16]
    b3d8:	4d56      	ldr	r5, [pc, #344]	; (b534 <lv_draw_rect+0x9d8>)
    b3da:	47a8      	blx	r5
                fa.y1++;
    b3dc:	8863      	ldrh	r3, [r4, #2]
    b3de:	3301      	adds	r3, #1
    b3e0:	8063      	strh	r3, [r4, #2]
                fa.y2++;
    b3e2:	88e3      	ldrh	r3, [r4, #6]
    b3e4:	3301      	adds	r3, #1
    b3e6:	80e3      	strh	r3, [r4, #6]
    b3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b3ea:	469c      	mov	ip, r3
    b3ec:	9b07      	ldr	r3, [sp, #28]
    b3ee:	4463      	add	r3, ip
    b3f0:	9307      	str	r3, [sp, #28]
    b3f2:	3601      	adds	r6, #1
            for(y = 0; y < h; y++) {
    b3f4:	4546      	cmp	r6, r8
    b3f6:	d00f      	beq.n	b418 <lv_draw_rect+0x8bc>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b3f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b3fa:	9907      	ldr	r1, [sp, #28]
    b3fc:	9805      	ldr	r0, [sp, #20]
    b3fe:	4b4c      	ldr	r3, [pc, #304]	; (b530 <lv_draw_rect+0x9d4>)
    b400:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b402:	2102      	movs	r1, #2
    b404:	5e62      	ldrsh	r2, [r4, r1]
    b406:	2500      	movs	r5, #0
    b408:	5f61      	ldrsh	r1, [r4, r5]
    b40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b40c:	9805      	ldr	r0, [sp, #20]
    b40e:	47d0      	blx	sl
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b410:	2801      	cmp	r0, #1
    b412:	d1d7      	bne.n	b3c4 <lv_draw_rect+0x868>
    b414:	3001      	adds	r0, #1
    b416:	e7d5      	b.n	b3c4 <lv_draw_rect+0x868>
    b418:	46bb      	mov	fp, r7
    a.x1 = sh_area.x1;
    b41a:	aa16      	add	r2, sp, #88	; 0x58
    b41c:	2100      	movs	r1, #0
    b41e:	5e53      	ldrsh	r3, [r2, r1]
    b420:	a91c      	add	r1, sp, #112	; 0x70
    b422:	800b      	strh	r3, [r1, #0]
    a.x2 = a.x1 + corner_size - 1;
    b424:	3b01      	subs	r3, #1
    b426:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b428:	46a4      	mov	ip, r4
    b42a:	4463      	add	r3, ip
    b42c:	808b      	strh	r3, [r1, #4]
    a.y1 = sh_area.y2 - corner_size + 1;
    b42e:	2306      	movs	r3, #6
    b430:	5ed2      	ldrsh	r2, [r2, r3]
    b432:	1c53      	adds	r3, r2, #1
    b434:	1b1b      	subs	r3, r3, r4
    b436:	804b      	strh	r3, [r1, #2]
    a.y2 = sh_area.y2;
    b438:	80ca      	strh	r2, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b43a:	9a04      	ldr	r2, [sp, #16]
    b43c:	a81e      	add	r0, sp, #120	; 0x78
    b43e:	4b3b      	ldr	r3, [pc, #236]	; (b52c <lv_draw_rect+0x9d0>)
    b440:	4798      	blx	r3
    if(has_com) {
    b442:	2800      	cmp	r0, #0
    b444:	d100      	bne.n	b448 <lv_draw_rect+0x8ec>
    b446:	e07a      	b.n	b53e <lv_draw_rect+0x9e2>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    b448:	ab1e      	add	r3, sp, #120	; 0x78
    b44a:	2202      	movs	r2, #2
    b44c:	5e9b      	ldrsh	r3, [r3, r2]
    b44e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b450:	4293      	cmp	r3, r2
    b452:	dc03      	bgt.n	b45c <lv_draw_rect+0x900>
    b454:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b456:	3301      	adds	r3, #1
    b458:	aa1e      	add	r2, sp, #120	; 0x78
    b45a:	8053      	strh	r3, [r2, #2]
        if(ca.x2 > w_half) ca.x2 = w_half;
    b45c:	ab1e      	add	r3, sp, #120	; 0x78
    b45e:	2204      	movs	r2, #4
    b460:	5e9b      	ldrsh	r3, [r3, r2]
    b462:	990d      	ldr	r1, [sp, #52]	; 0x34
    b464:	428b      	cmp	r3, r1
    b466:	dd01      	ble.n	b46c <lv_draw_rect+0x910>
    b468:	ab1e      	add	r3, sp, #120	; 0x78
    b46a:	8099      	strh	r1, [r3, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b46c:	ab1e      	add	r3, sp, #120	; 0x78
    b46e:	2100      	movs	r1, #0
    b470:	5e5a      	ldrsh	r2, [r3, r1]
    b472:	889b      	ldrh	r3, [r3, #4]
    b474:	3301      	adds	r3, #1
    b476:	1a9b      	subs	r3, r3, r2
    b478:	b21b      	sxth	r3, r3
    b47a:	930b      	str	r3, [sp, #44]	; 0x2c
        if(w > 0) {
    b47c:	2b00      	cmp	r3, #0
    b47e:	dd5e      	ble.n	b53e <lv_draw_rect+0x9e2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b480:	ab1e      	add	r3, sp, #120	; 0x78
    b482:	2106      	movs	r1, #6
    b484:	5e5c      	ldrsh	r4, [r3, r1]
    b486:	2602      	movs	r6, #2
    b488:	5f9e      	ldrsh	r6, [r3, r6]
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    b48a:	ab1c      	add	r3, sp, #112	; 0x70
    b48c:	2106      	movs	r1, #6
    b48e:	5e5d      	ldrsh	r5, [r3, r1]
    b490:	1b2d      	subs	r5, r5, r4
    b492:	9909      	ldr	r1, [sp, #36]	; 0x24
    b494:	434d      	muls	r5, r1
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    b496:	2100      	movs	r1, #0
    b498:	5e5b      	ldrsh	r3, [r3, r1]
    b49a:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    b49c:	18ad      	adds	r5, r5, r2
    b49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b4a0:	469c      	mov	ip, r3
    b4a2:	4465      	add	r5, ip
    b4a4:	2300      	movs	r3, #0
        *d8 = *s8;
    b4a6:	a822      	add	r0, sp, #136	; 0x88
    b4a8:	a91e      	add	r1, sp, #120	; 0x78
    b4aa:	5c5a      	ldrb	r2, [r3, r1]
    b4ac:	541a      	strb	r2, [r3, r0]
    b4ae:	3301      	adds	r3, #1
    while(len) {
    b4b0:	2b08      	cmp	r3, #8
    b4b2:	d1fa      	bne.n	b4aa <lv_draw_rect+0x94e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    b4b4:	ab22      	add	r3, sp, #136	; 0x88
    b4b6:	88da      	ldrh	r2, [r3, #6]
    b4b8:	805a      	strh	r2, [r3, #2]
    b4ba:	3401      	adds	r4, #1
    b4bc:	1ba6      	subs	r6, r4, r6
    b4be:	b236      	sxth	r6, r6
            for(y = 0; y < h; y++) {
    b4c0:	2e00      	cmp	r6, #0
    b4c2:	dd3c      	ble.n	b53e <lv_draw_rect+0x9e2>
    b4c4:	1c73      	adds	r3, r6, #1
    b4c6:	4698      	mov	r8, r3
    b4c8:	2601      	movs	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b4ca:	ac22      	add	r4, sp, #136	; 0x88
    b4cc:	4b1a      	ldr	r3, [pc, #104]	; (b538 <lv_draw_rect+0x9dc>)
    b4ce:	469a      	mov	sl, r3
    b4d0:	9507      	str	r5, [sp, #28]
    b4d2:	465f      	mov	r7, fp
    b4d4:	e019      	b.n	b50a <lv_draw_rect+0x9ae>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b4d6:	8bfa      	ldrh	r2, [r7, #30]
    b4d8:	2329      	movs	r3, #41	; 0x29
    b4da:	5cfb      	ldrb	r3, [r7, r3]
    b4dc:	9302      	str	r3, [sp, #8]
    b4de:	9b06      	ldr	r3, [sp, #24]
    b4e0:	9301      	str	r3, [sp, #4]
    b4e2:	9000      	str	r0, [sp, #0]
    b4e4:	9b05      	ldr	r3, [sp, #20]
    b4e6:	0021      	movs	r1, r4
    b4e8:	9804      	ldr	r0, [sp, #16]
    b4ea:	4d12      	ldr	r5, [pc, #72]	; (b534 <lv_draw_rect+0x9d8>)
    b4ec:	47a8      	blx	r5
                fa.y1--;
    b4ee:	8863      	ldrh	r3, [r4, #2]
    b4f0:	3b01      	subs	r3, #1
    b4f2:	8063      	strh	r3, [r4, #2]
                fa.y2--;
    b4f4:	88e3      	ldrh	r3, [r4, #6]
    b4f6:	3b01      	subs	r3, #1
    b4f8:	80e3      	strh	r3, [r4, #6]
    b4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4fc:	469c      	mov	ip, r3
    b4fe:	9b07      	ldr	r3, [sp, #28]
    b500:	4463      	add	r3, ip
    b502:	9307      	str	r3, [sp, #28]
    b504:	3601      	adds	r6, #1
            for(y = 0; y < h; y++) {
    b506:	4546      	cmp	r6, r8
    b508:	d018      	beq.n	b53c <lv_draw_rect+0x9e0>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b50a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b50c:	9907      	ldr	r1, [sp, #28]
    b50e:	9805      	ldr	r0, [sp, #20]
    b510:	4b07      	ldr	r3, [pc, #28]	; (b530 <lv_draw_rect+0x9d4>)
    b512:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b514:	2102      	movs	r1, #2
    b516:	5e62      	ldrsh	r2, [r4, r1]
    b518:	2500      	movs	r5, #0
    b51a:	5f61      	ldrsh	r1, [r4, r5]
    b51c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b51e:	9805      	ldr	r0, [sp, #20]
    b520:	47d0      	blx	sl
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b522:	2801      	cmp	r0, #1
    b524:	d1d7      	bne.n	b4d6 <lv_draw_rect+0x97a>
    b526:	3001      	adds	r0, #1
    b528:	e7d5      	b.n	b4d6 <lv_draw_rect+0x97a>
    b52a:	46c0      	nop			; (mov r8, r8)
    b52c:	0000fba7 	.word	0x0000fba7
    b530:	00010c25 	.word	0x00010c25
    b534:	00005c05 	.word	0x00005c05
    b538:	0000a5bd 	.word	0x0000a5bd
    b53c:	46bb      	mov	fp, r7
    a.x1 = sh_area.x1;
    b53e:	aa16      	add	r2, sp, #88	; 0x58
    b540:	2100      	movs	r1, #0
    b542:	5e53      	ldrsh	r3, [r2, r1]
    b544:	a91c      	add	r1, sp, #112	; 0x70
    b546:	800b      	strh	r3, [r1, #0]
    a.x2 = a.x1 + corner_size - 1;
    b548:	3b01      	subs	r3, #1
    b54a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b54c:	46a4      	mov	ip, r4
    b54e:	4463      	add	r3, ip
    b550:	808b      	strh	r3, [r1, #4]
    a.y1 = sh_area.y1 + corner_size;
    b552:	8853      	ldrh	r3, [r2, #2]
    b554:	4463      	add	r3, ip
    b556:	804b      	strh	r3, [r1, #2]
    a.y2 = sh_area.y2 - corner_size;
    b558:	88d3      	ldrh	r3, [r2, #6]
    b55a:	1b1b      	subs	r3, r3, r4
    b55c:	80cb      	strh	r3, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b55e:	9a04      	ldr	r2, [sp, #16]
    b560:	a81e      	add	r0, sp, #120	; 0x78
    b562:	4bc5      	ldr	r3, [pc, #788]	; (b878 <lv_draw_rect+0xd1c>)
    b564:	4798      	blx	r3
    if(has_com) {
    b566:	2800      	cmp	r0, #0
    b568:	d06c      	beq.n	b644 <lv_draw_rect+0xae8>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
    b56a:	9b08      	ldr	r3, [sp, #32]
    b56c:	2b00      	cmp	r3, #0
    b56e:	d00a      	beq.n	b586 <lv_draw_rect+0xa2a>
    b570:	aa1e      	add	r2, sp, #120	; 0x78
    b572:	464b      	mov	r3, r9
    b574:	8818      	ldrh	r0, [r3, #0]
    b576:	8893      	ldrh	r3, [r2, #4]
    b578:	1c19      	adds	r1, r3, #0
    b57a:	b21b      	sxth	r3, r3
    b57c:	b204      	sxth	r4, r0
    b57e:	42a3      	cmp	r3, r4
    b580:	dd00      	ble.n	b584 <lv_draw_rect+0xa28>
    b582:	1c01      	adds	r1, r0, #0
    b584:	8091      	strh	r1, [r2, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b586:	ab1e      	add	r3, sp, #120	; 0x78
    b588:	2100      	movs	r1, #0
    b58a:	5e5a      	ldrsh	r2, [r3, r1]
    b58c:	889b      	ldrh	r3, [r3, #4]
    b58e:	3301      	adds	r3, #1
    b590:	1a9b      	subs	r3, r3, r2
    b592:	b21b      	sxth	r3, r3
    b594:	9307      	str	r3, [sp, #28]
        if(w > 0) {
    b596:	2b00      	cmp	r3, #0
    b598:	dd54      	ble.n	b644 <lv_draw_rect+0xae8>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b59a:	ab1e      	add	r3, sp, #120	; 0x78
    b59c:	88df      	ldrh	r7, [r3, #6]
    b59e:	3701      	adds	r7, #1
    b5a0:	885b      	ldrh	r3, [r3, #2]
    b5a2:	1aff      	subs	r7, r7, r3
    b5a4:	b23f      	sxth	r7, r7
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    b5a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    b5a8:	000b      	movs	r3, r1
    b5aa:	3b01      	subs	r3, #1
    b5ac:	434b      	muls	r3, r1
            sh_buf_tmp += ca.x1 - a.x1;
    b5ae:	a91c      	add	r1, sp, #112	; 0x70
    b5b0:	2000      	movs	r0, #0
    b5b2:	5e09      	ldrsh	r1, [r1, r0]
    b5b4:	1a52      	subs	r2, r2, r1
    b5b6:	189a      	adds	r2, r3, r2
    b5b8:	0013      	movs	r3, r2
    b5ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    b5bc:	468c      	mov	ip, r1
    b5be:	4463      	add	r3, ip
    b5c0:	930b      	str	r3, [sp, #44]	; 0x2c
    b5c2:	2300      	movs	r3, #0
        *d8 = *s8;
    b5c4:	a822      	add	r0, sp, #136	; 0x88
    b5c6:	a91e      	add	r1, sp, #120	; 0x78
    b5c8:	5c5a      	ldrb	r2, [r3, r1]
    b5ca:	541a      	strb	r2, [r3, r0]
    b5cc:	3301      	adds	r3, #1
    while(len) {
    b5ce:	2b08      	cmp	r3, #8
    b5d0:	d1fa      	bne.n	b5c8 <lv_draw_rect+0xa6c>
            fa.y2 = fa.y1;
    b5d2:	ab22      	add	r3, sp, #136	; 0x88
    b5d4:	885a      	ldrh	r2, [r3, #2]
    b5d6:	80da      	strh	r2, [r3, #6]
            for(y = 0; y < h; y++) {
    b5d8:	2f00      	cmp	r7, #0
    b5da:	dd33      	ble.n	b644 <lv_draw_rect+0xae8>
    b5dc:	2500      	movs	r5, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b5de:	4ba7      	ldr	r3, [pc, #668]	; (b87c <lv_draw_rect+0xd20>)
    b5e0:	4698      	mov	r8, r3
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b5e2:	ac22      	add	r4, sp, #136	; 0x88
    b5e4:	9b08      	ldr	r3, [sp, #32]
    b5e6:	469a      	mov	sl, r3
    b5e8:	465e      	mov	r6, fp
    b5ea:	46bb      	mov	fp, r7
    b5ec:	e015      	b.n	b61a <lv_draw_rect+0xabe>
                _lv_blend_fill(clip, &fa,
    b5ee:	8bf2      	ldrh	r2, [r6, #30]
    b5f0:	2329      	movs	r3, #41	; 0x29
    b5f2:	5cf3      	ldrb	r3, [r6, r3]
    b5f4:	9302      	str	r3, [sp, #8]
    b5f6:	2328      	movs	r3, #40	; 0x28
    b5f8:	5cf3      	ldrb	r3, [r6, r3]
    b5fa:	9301      	str	r3, [sp, #4]
    b5fc:	9000      	str	r0, [sp, #0]
    b5fe:	9b05      	ldr	r3, [sp, #20]
    b600:	0021      	movs	r1, r4
    b602:	9804      	ldr	r0, [sp, #16]
    b604:	4f9e      	ldr	r7, [pc, #632]	; (b880 <lv_draw_rect+0xd24>)
    b606:	47b8      	blx	r7
                fa.y1++;
    b608:	8863      	ldrh	r3, [r4, #2]
    b60a:	3301      	adds	r3, #1
    b60c:	8063      	strh	r3, [r4, #2]
                fa.y2++;
    b60e:	88e3      	ldrh	r3, [r4, #6]
    b610:	3301      	adds	r3, #1
    b612:	80e3      	strh	r3, [r4, #6]
            for(y = 0; y < h; y++) {
    b614:	3501      	adds	r5, #1
    b616:	455d      	cmp	r5, fp
    b618:	da13      	bge.n	b642 <lv_draw_rect+0xae6>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    b61a:	9a07      	ldr	r2, [sp, #28]
    b61c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b61e:	9805      	ldr	r0, [sp, #20]
    b620:	47c0      	blx	r8
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    b622:	2002      	movs	r0, #2
                if(simple_mode) {
    b624:	4653      	mov	r3, sl
    b626:	2b00      	cmp	r3, #0
    b628:	d1e1      	bne.n	b5ee <lv_draw_rect+0xa92>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b62a:	2302      	movs	r3, #2
    b62c:	5ee2      	ldrsh	r2, [r4, r3]
    b62e:	2300      	movs	r3, #0
    b630:	5ee1      	ldrsh	r1, [r4, r3]
    b632:	9b07      	ldr	r3, [sp, #28]
    b634:	9805      	ldr	r0, [sp, #20]
    b636:	4f93      	ldr	r7, [pc, #588]	; (b884 <lv_draw_rect+0xd28>)
    b638:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b63a:	2801      	cmp	r0, #1
    b63c:	d1d7      	bne.n	b5ee <lv_draw_rect+0xa92>
    b63e:	3001      	adds	r0, #1
    b640:	e7d5      	b.n	b5ee <lv_draw_rect+0xa92>
    b642:	46b3      	mov	fp, r6
    a.x1 = sh_area.x1 + corner_size;
    b644:	a91c      	add	r1, sp, #112	; 0x70
    b646:	ab16      	add	r3, sp, #88	; 0x58
    b648:	881a      	ldrh	r2, [r3, #0]
    b64a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b64c:	46a4      	mov	ip, r4
    b64e:	4462      	add	r2, ip
    b650:	800a      	strh	r2, [r1, #0]
    a.x2 = sh_area.x2 - corner_size;
    b652:	889a      	ldrh	r2, [r3, #4]
    b654:	1b12      	subs	r2, r2, r4
    b656:	808a      	strh	r2, [r1, #4]
    a.y1 = sh_area.y1;
    b658:	2202      	movs	r2, #2
    b65a:	5e9b      	ldrsh	r3, [r3, r2]
    b65c:	804b      	strh	r3, [r1, #2]
    a.y2 = sh_area.y1 + corner_size - 1;
    b65e:	3b01      	subs	r3, #1
    b660:	4463      	add	r3, ip
    b662:	80cb      	strh	r3, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b664:	9a04      	ldr	r2, [sp, #16]
    b666:	a81e      	add	r0, sp, #120	; 0x78
    b668:	4b83      	ldr	r3, [pc, #524]	; (b878 <lv_draw_rect+0xd1c>)
    b66a:	4798      	blx	r3
    if(has_com) {
    b66c:	2800      	cmp	r0, #0
    b66e:	d076      	beq.n	b75e <lv_draw_rect+0xc02>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
    b670:	9b08      	ldr	r3, [sp, #32]
    b672:	2b00      	cmp	r3, #0
    b674:	d00a      	beq.n	b68c <lv_draw_rect+0xb30>
    b676:	aa1e      	add	r2, sp, #120	; 0x78
    b678:	88d0      	ldrh	r0, [r2, #6]
    b67a:	464b      	mov	r3, r9
    b67c:	885b      	ldrh	r3, [r3, #2]
    b67e:	1c19      	adds	r1, r3, #0
    b680:	b21b      	sxth	r3, r3
    b682:	b204      	sxth	r4, r0
    b684:	42a3      	cmp	r3, r4
    b686:	dd00      	ble.n	b68a <lv_draw_rect+0xb2e>
    b688:	1c01      	adds	r1, r0, #0
    b68a:	80d1      	strh	r1, [r2, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b68c:	aa1e      	add	r2, sp, #120	; 0x78
    b68e:	8893      	ldrh	r3, [r2, #4]
    b690:	3301      	adds	r3, #1
    b692:	8811      	ldrh	r1, [r2, #0]
    b694:	1a5b      	subs	r3, r3, r1
    b696:	b21b      	sxth	r3, r3
    b698:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b69a:	2102      	movs	r1, #2
    b69c:	5e53      	ldrsh	r3, [r2, r1]
    b69e:	88d4      	ldrh	r4, [r2, #6]
    b6a0:	3401      	adds	r4, #1
    b6a2:	1ae4      	subs	r4, r4, r3
    b6a4:	b224      	sxth	r4, r4
        sh_buf_tmp = sh_buf + corner_size - 1;
    b6a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    b6a8:	910c      	str	r1, [sp, #48]	; 0x30
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    b6aa:	aa1c      	add	r2, sp, #112	; 0x70
    b6ac:	2502      	movs	r5, #2
    b6ae:	5f55      	ldrsh	r5, [r2, r5]
    b6b0:	1b5d      	subs	r5, r3, r5
    b6b2:	434d      	muls	r5, r1
        sh_buf_tmp = sh_buf + corner_size - 1;
    b6b4:	1e4b      	subs	r3, r1, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    b6b6:	18ed      	adds	r5, r5, r3
    b6b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b6ba:	469c      	mov	ip, r3
    b6bc:	4465      	add	r5, ip
    b6be:	2300      	movs	r3, #0
        *d8 = *s8;
    b6c0:	a822      	add	r0, sp, #136	; 0x88
    b6c2:	a91e      	add	r1, sp, #120	; 0x78
    b6c4:	5c5a      	ldrb	r2, [r3, r1]
    b6c6:	541a      	strb	r2, [r3, r0]
    b6c8:	3301      	adds	r3, #1
    while(len) {
    b6ca:	2b08      	cmp	r3, #8
    b6cc:	d1fa      	bne.n	b6c4 <lv_draw_rect+0xb68>
        fa.y2 = fa.y1;
    b6ce:	ab22      	add	r3, sp, #136	; 0x88
    b6d0:	885a      	ldrh	r2, [r3, #2]
    b6d2:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
    b6d4:	2c00      	cmp	r4, #0
    b6d6:	dd42      	ble.n	b75e <lv_draw_rect+0xc02>
    b6d8:	1c63      	adds	r3, r4, #1
    b6da:	4698      	mov	r8, r3
    b6dc:	2601      	movs	r6, #1
            _lv_memset(mask_buf, opa_tmp, w);
    b6de:	4b6a      	ldr	r3, [pc, #424]	; (b888 <lv_draw_rect+0xd2c>)
    b6e0:	469a      	mov	sl, r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b6e2:	ac22      	add	r4, sp, #136	; 0x88
    b6e4:	9507      	str	r5, [sp, #28]
    b6e6:	465f      	mov	r7, fp
    b6e8:	e01e      	b.n	b728 <lv_draw_rect+0xbcc>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    b6ea:	9b06      	ldr	r3, [sp, #24]
    b6ec:	2bff      	cmp	r3, #255	; 0xff
    b6ee:	d11f      	bne.n	b730 <lv_draw_rect+0xbd4>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    b6f0:	9906      	ldr	r1, [sp, #24]
    b6f2:	e020      	b.n	b736 <lv_draw_rect+0xbda>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b6f4:	8bfa      	ldrh	r2, [r7, #30]
    b6f6:	2329      	movs	r3, #41	; 0x29
    b6f8:	5cfb      	ldrb	r3, [r7, r3]
    b6fa:	9302      	str	r3, [sp, #8]
    b6fc:	23ff      	movs	r3, #255	; 0xff
    b6fe:	9301      	str	r3, [sp, #4]
    b700:	9000      	str	r0, [sp, #0]
    b702:	9b05      	ldr	r3, [sp, #20]
    b704:	0021      	movs	r1, r4
    b706:	9804      	ldr	r0, [sp, #16]
    b708:	4d5d      	ldr	r5, [pc, #372]	; (b880 <lv_draw_rect+0xd24>)
    b70a:	47a8      	blx	r5
            fa.y1++;
    b70c:	8863      	ldrh	r3, [r4, #2]
    b70e:	3301      	adds	r3, #1
    b710:	8063      	strh	r3, [r4, #2]
            fa.y2++;
    b712:	88e3      	ldrh	r3, [r4, #6]
    b714:	3301      	adds	r3, #1
    b716:	80e3      	strh	r3, [r4, #6]
            sh_buf_tmp += corner_size;
    b718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b71a:	469c      	mov	ip, r3
    b71c:	9b07      	ldr	r3, [sp, #28]
    b71e:	4463      	add	r3, ip
    b720:	9307      	str	r3, [sp, #28]
    b722:	3601      	adds	r6, #1
        for(y = 0; y < h; y++) {
    b724:	4546      	cmp	r6, r8
    b726:	d019      	beq.n	b75c <lv_draw_rect+0xc00>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    b728:	9b07      	ldr	r3, [sp, #28]
    b72a:	7819      	ldrb	r1, [r3, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    b72c:	29ff      	cmp	r1, #255	; 0xff
    b72e:	d0dc      	beq.n	b6ea <lv_draw_rect+0xb8e>
    b730:	9b06      	ldr	r3, [sp, #24]
    b732:	4359      	muls	r1, r3
    b734:	0a09      	lsrs	r1, r1, #8
            _lv_memset(mask_buf, opa_tmp, w);
    b736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b738:	9805      	ldr	r0, [sp, #20]
    b73a:	47d0      	blx	sl
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    b73c:	2002      	movs	r0, #2
            if(simple_mode) {
    b73e:	9b08      	ldr	r3, [sp, #32]
    b740:	2b00      	cmp	r3, #0
    b742:	d1d7      	bne.n	b6f4 <lv_draw_rect+0xb98>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b744:	2302      	movs	r3, #2
    b746:	5ee2      	ldrsh	r2, [r4, r3]
    b748:	2300      	movs	r3, #0
    b74a:	5ee1      	ldrsh	r1, [r4, r3]
    b74c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b74e:	9805      	ldr	r0, [sp, #20]
    b750:	4d4c      	ldr	r5, [pc, #304]	; (b884 <lv_draw_rect+0xd28>)
    b752:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b754:	2801      	cmp	r0, #1
    b756:	d1cd      	bne.n	b6f4 <lv_draw_rect+0xb98>
    b758:	3001      	adds	r0, #1
    b75a:	e7cb      	b.n	b6f4 <lv_draw_rect+0xb98>
    b75c:	46bb      	mov	fp, r7
    a.x1 = sh_area.x1 + corner_size;
    b75e:	a91c      	add	r1, sp, #112	; 0x70
    b760:	ab16      	add	r3, sp, #88	; 0x58
    b762:	881a      	ldrh	r2, [r3, #0]
    b764:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b766:	46a4      	mov	ip, r4
    b768:	4462      	add	r2, ip
    b76a:	800a      	strh	r2, [r1, #0]
    a.x2 = sh_area.x2 - corner_size;
    b76c:	889a      	ldrh	r2, [r3, #4]
    b76e:	1b12      	subs	r2, r2, r4
    b770:	808a      	strh	r2, [r1, #4]
    a.y1 = sh_area.y2 - corner_size + 1;
    b772:	2206      	movs	r2, #6
    b774:	5e9a      	ldrsh	r2, [r3, r2]
    b776:	1c53      	adds	r3, r2, #1
    b778:	1b1b      	subs	r3, r3, r4
    b77a:	804b      	strh	r3, [r1, #2]
    a.y2 = sh_area.y2;
    b77c:	80ca      	strh	r2, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b77e:	9a04      	ldr	r2, [sp, #16]
    b780:	a81e      	add	r0, sp, #120	; 0x78
    b782:	4b3d      	ldr	r3, [pc, #244]	; (b878 <lv_draw_rect+0xd1c>)
    b784:	4798      	blx	r3
    if(has_com) {
    b786:	2800      	cmp	r0, #0
    b788:	d100      	bne.n	b78c <lv_draw_rect+0xc30>
    b78a:	e081      	b.n	b890 <lv_draw_rect+0xd34>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
    b78c:	9b08      	ldr	r3, [sp, #32]
    b78e:	2b00      	cmp	r3, #0
    b790:	d00a      	beq.n	b7a8 <lv_draw_rect+0xc4c>
    b792:	aa1e      	add	r2, sp, #120	; 0x78
    b794:	8850      	ldrh	r0, [r2, #2]
    b796:	464b      	mov	r3, r9
    b798:	88db      	ldrh	r3, [r3, #6]
    b79a:	1c19      	adds	r1, r3, #0
    b79c:	b21b      	sxth	r3, r3
    b79e:	b204      	sxth	r4, r0
    b7a0:	42a3      	cmp	r3, r4
    b7a2:	da00      	bge.n	b7a6 <lv_draw_rect+0xc4a>
    b7a4:	1c01      	adds	r1, r0, #0
    b7a6:	8051      	strh	r1, [r2, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b7a8:	aa1e      	add	r2, sp, #120	; 0x78
    b7aa:	8893      	ldrh	r3, [r2, #4]
    b7ac:	3301      	adds	r3, #1
    b7ae:	8811      	ldrh	r1, [r2, #0]
    b7b0:	1a5b      	subs	r3, r3, r1
    b7b2:	b21b      	sxth	r3, r3
    b7b4:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b7b6:	2106      	movs	r1, #6
    b7b8:	5e53      	ldrsh	r3, [r2, r1]
    b7ba:	1c5c      	adds	r4, r3, #1
    b7bc:	8852      	ldrh	r2, [r2, #2]
    b7be:	1aa4      	subs	r4, r4, r2
    b7c0:	b224      	sxth	r4, r4
        sh_buf_tmp = sh_buf + corner_size - 1;
    b7c2:	9909      	ldr	r1, [sp, #36]	; 0x24
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    b7c4:	aa1c      	add	r2, sp, #112	; 0x70
    b7c6:	2506      	movs	r5, #6
    b7c8:	5f55      	ldrsh	r5, [r2, r5]
    b7ca:	1aed      	subs	r5, r5, r3
    b7cc:	434d      	muls	r5, r1
        sh_buf_tmp = sh_buf + corner_size - 1;
    b7ce:	1e4b      	subs	r3, r1, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    b7d0:	18ed      	adds	r5, r5, r3
    b7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b7d4:	469c      	mov	ip, r3
    b7d6:	4465      	add	r5, ip
    b7d8:	2300      	movs	r3, #0
        *d8 = *s8;
    b7da:	a822      	add	r0, sp, #136	; 0x88
    b7dc:	a91e      	add	r1, sp, #120	; 0x78
    b7de:	5c5a      	ldrb	r2, [r3, r1]
    b7e0:	541a      	strb	r2, [r3, r0]
    b7e2:	3301      	adds	r3, #1
    while(len) {
    b7e4:	2b08      	cmp	r3, #8
    b7e6:	d1fa      	bne.n	b7de <lv_draw_rect+0xc82>
        fa.y1 = fa.y2;
    b7e8:	ab22      	add	r3, sp, #136	; 0x88
    b7ea:	88da      	ldrh	r2, [r3, #6]
    b7ec:	805a      	strh	r2, [r3, #2]
        for(y = 0; y < h; y++) {
    b7ee:	2c00      	cmp	r4, #0
    b7f0:	dd4e      	ble.n	b890 <lv_draw_rect+0xd34>
    b7f2:	1c63      	adds	r3, r4, #1
    b7f4:	4698      	mov	r8, r3
    b7f6:	2601      	movs	r6, #1
            _lv_memset(mask_buf, opa_tmp, w);
    b7f8:	4b23      	ldr	r3, [pc, #140]	; (b888 <lv_draw_rect+0xd2c>)
    b7fa:	469a      	mov	sl, r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b7fc:	ac22      	add	r4, sp, #136	; 0x88
    b7fe:	9507      	str	r5, [sp, #28]
    b800:	465f      	mov	r7, fp
    b802:	46cb      	mov	fp, r9
    b804:	e01e      	b.n	b844 <lv_draw_rect+0xce8>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    b806:	9b06      	ldr	r3, [sp, #24]
    b808:	2bff      	cmp	r3, #255	; 0xff
    b80a:	d11f      	bne.n	b84c <lv_draw_rect+0xcf0>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    b80c:	9906      	ldr	r1, [sp, #24]
    b80e:	e020      	b.n	b852 <lv_draw_rect+0xcf6>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b810:	8bfa      	ldrh	r2, [r7, #30]
    b812:	2329      	movs	r3, #41	; 0x29
    b814:	5cfb      	ldrb	r3, [r7, r3]
    b816:	9302      	str	r3, [sp, #8]
    b818:	23ff      	movs	r3, #255	; 0xff
    b81a:	9301      	str	r3, [sp, #4]
    b81c:	9000      	str	r0, [sp, #0]
    b81e:	9b05      	ldr	r3, [sp, #20]
    b820:	0021      	movs	r1, r4
    b822:	9804      	ldr	r0, [sp, #16]
    b824:	4d16      	ldr	r5, [pc, #88]	; (b880 <lv_draw_rect+0xd24>)
    b826:	47a8      	blx	r5
            fa.y1--;
    b828:	8863      	ldrh	r3, [r4, #2]
    b82a:	3b01      	subs	r3, #1
    b82c:	8063      	strh	r3, [r4, #2]
            fa.y2--;
    b82e:	88e3      	ldrh	r3, [r4, #6]
    b830:	3b01      	subs	r3, #1
    b832:	80e3      	strh	r3, [r4, #6]
            sh_buf_tmp += corner_size;
    b834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b836:	469c      	mov	ip, r3
    b838:	9b07      	ldr	r3, [sp, #28]
    b83a:	4463      	add	r3, ip
    b83c:	9307      	str	r3, [sp, #28]
    b83e:	3601      	adds	r6, #1
        for(y = 0; y < h; y++) {
    b840:	45b0      	cmp	r8, r6
    b842:	d023      	beq.n	b88c <lv_draw_rect+0xd30>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    b844:	9b07      	ldr	r3, [sp, #28]
    b846:	7819      	ldrb	r1, [r3, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    b848:	29ff      	cmp	r1, #255	; 0xff
    b84a:	d0dc      	beq.n	b806 <lv_draw_rect+0xcaa>
    b84c:	9b06      	ldr	r3, [sp, #24]
    b84e:	4359      	muls	r1, r3
    b850:	0a09      	lsrs	r1, r1, #8
            _lv_memset(mask_buf, opa_tmp, w);
    b852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b854:	9805      	ldr	r0, [sp, #20]
    b856:	47d0      	blx	sl
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    b858:	2002      	movs	r0, #2
            if(simple_mode) {
    b85a:	9b08      	ldr	r3, [sp, #32]
    b85c:	2b00      	cmp	r3, #0
    b85e:	d1d7      	bne.n	b810 <lv_draw_rect+0xcb4>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b860:	2302      	movs	r3, #2
    b862:	5ee2      	ldrsh	r2, [r4, r3]
    b864:	2300      	movs	r3, #0
    b866:	5ee1      	ldrsh	r1, [r4, r3]
    b868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b86a:	9805      	ldr	r0, [sp, #20]
    b86c:	4d05      	ldr	r5, [pc, #20]	; (b884 <lv_draw_rect+0xd28>)
    b86e:	47a8      	blx	r5
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b870:	2801      	cmp	r0, #1
    b872:	d1cd      	bne.n	b810 <lv_draw_rect+0xcb4>
    b874:	3001      	adds	r0, #1
    b876:	e7cb      	b.n	b810 <lv_draw_rect+0xcb4>
    b878:	0000fba7 	.word	0x0000fba7
    b87c:	00010c25 	.word	0x00010c25
    b880:	00005c05 	.word	0x00005c05
    b884:	0000a5bd 	.word	0x0000a5bd
    b888:	00010f45 	.word	0x00010f45
    b88c:	46d9      	mov	r9, fp
    b88e:	46bb      	mov	fp, r7
    a.x1 = sh_area.x1 + corner_size;
    b890:	a91c      	add	r1, sp, #112	; 0x70
    b892:	ab16      	add	r3, sp, #88	; 0x58
    b894:	881a      	ldrh	r2, [r3, #0]
    b896:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b898:	46a4      	mov	ip, r4
    b89a:	4462      	add	r2, ip
    b89c:	800a      	strh	r2, [r1, #0]
    a.x2 = sh_area.x2 - corner_size;
    b89e:	889a      	ldrh	r2, [r3, #4]
    b8a0:	1b12      	subs	r2, r2, r4
    b8a2:	808a      	strh	r2, [r1, #4]
    a.y1 = sh_area.y1 + corner_size;
    b8a4:	885a      	ldrh	r2, [r3, #2]
    b8a6:	4462      	add	r2, ip
    b8a8:	804a      	strh	r2, [r1, #2]
    a.y2 = sh_area.y2 - corner_size;
    b8aa:	88db      	ldrh	r3, [r3, #6]
    b8ac:	1b1b      	subs	r3, r3, r4
    b8ae:	80cb      	strh	r3, [r1, #6]
    has_com = _lv_area_intersect(&ca, &a, clip);
    b8b0:	9a04      	ldr	r2, [sp, #16]
    b8b2:	a81e      	add	r0, sp, #120	; 0x78
    b8b4:	4bc4      	ldr	r3, [pc, #784]	; (bbc8 <lv_draw_rect+0x106c>)
    b8b6:	4798      	blx	r3
    if(has_com && simple_mode == false) {
    b8b8:	2800      	cmp	r0, #0
    b8ba:	d04c      	beq.n	b956 <lv_draw_rect+0xdfa>
    b8bc:	9b08      	ldr	r3, [sp, #32]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d149      	bne.n	b956 <lv_draw_rect+0xdfa>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    b8c2:	aa1e      	add	r2, sp, #120	; 0x78
    b8c4:	8893      	ldrh	r3, [r2, #4]
    b8c6:	3301      	adds	r3, #1
    b8c8:	8811      	ldrh	r1, [r2, #0]
    b8ca:	1a5b      	subs	r3, r3, r1
    b8cc:	b21b      	sxth	r3, r3
    b8ce:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    b8d0:	88d7      	ldrh	r7, [r2, #6]
    b8d2:	3701      	adds	r7, #1
    b8d4:	8853      	ldrh	r3, [r2, #2]
    b8d6:	1aff      	subs	r7, r7, r3
    b8d8:	b23f      	sxth	r7, r7
    b8da:	2300      	movs	r3, #0
        *d8 = *s8;
    b8dc:	a822      	add	r0, sp, #136	; 0x88
    b8de:	0011      	movs	r1, r2
    b8e0:	5c5a      	ldrb	r2, [r3, r1]
    b8e2:	541a      	strb	r2, [r3, r0]
    b8e4:	3301      	adds	r3, #1
    while(len) {
    b8e6:	2b08      	cmp	r3, #8
    b8e8:	d1fa      	bne.n	b8e0 <lv_draw_rect+0xd84>
        fa.y2 = fa.y1;
    b8ea:	ab22      	add	r3, sp, #136	; 0x88
    b8ec:	885a      	ldrh	r2, [r3, #2]
    b8ee:	80da      	strh	r2, [r3, #6]
        for(y = 0; y < h; y++) {
    b8f0:	2f00      	cmp	r7, #0
    b8f2:	dd30      	ble.n	b956 <lv_draw_rect+0xdfa>
    b8f4:	3701      	adds	r7, #1
    b8f6:	2501      	movs	r5, #1
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    b8f8:	4bb4      	ldr	r3, [pc, #720]	; (bbcc <lv_draw_rect+0x1070>)
    b8fa:	469a      	mov	sl, r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b8fc:	ac22      	add	r4, sp, #136	; 0x88
    b8fe:	4bb4      	ldr	r3, [pc, #720]	; (bbd0 <lv_draw_rect+0x1074>)
    b900:	4698      	mov	r8, r3
    b902:	465e      	mov	r6, fp
    b904:	46bb      	mov	fp, r7
    b906:	e014      	b.n	b932 <lv_draw_rect+0xdd6>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    b908:	8bf2      	ldrh	r2, [r6, #30]
    b90a:	2329      	movs	r3, #41	; 0x29
    b90c:	5cf3      	ldrb	r3, [r6, r3]
    b90e:	9302      	str	r3, [sp, #8]
    b910:	23ff      	movs	r3, #255	; 0xff
    b912:	9301      	str	r3, [sp, #4]
    b914:	9000      	str	r0, [sp, #0]
    b916:	9b05      	ldr	r3, [sp, #20]
    b918:	0021      	movs	r1, r4
    b91a:	9804      	ldr	r0, [sp, #16]
    b91c:	4fad      	ldr	r7, [pc, #692]	; (bbd4 <lv_draw_rect+0x1078>)
    b91e:	47b8      	blx	r7
            fa.y1++;
    b920:	8863      	ldrh	r3, [r4, #2]
    b922:	3301      	adds	r3, #1
    b924:	8063      	strh	r3, [r4, #2]
            fa.y2++;
    b926:	88e3      	ldrh	r3, [r4, #6]
    b928:	3301      	adds	r3, #1
    b92a:	80e3      	strh	r3, [r4, #6]
    b92c:	3501      	adds	r5, #1
        for(y = 0; y < h; y++) {
    b92e:	45ab      	cmp	fp, r5
    b930:	d010      	beq.n	b954 <lv_draw_rect+0xdf8>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    b932:	2328      	movs	r3, #40	; 0x28
    b934:	5cf1      	ldrb	r1, [r6, r3]
    b936:	9a06      	ldr	r2, [sp, #24]
    b938:	9f05      	ldr	r7, [sp, #20]
    b93a:	0038      	movs	r0, r7
    b93c:	47d0      	blx	sl
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    b93e:	2102      	movs	r1, #2
    b940:	5e62      	ldrsh	r2, [r4, r1]
    b942:	2000      	movs	r0, #0
    b944:	5e21      	ldrsh	r1, [r4, r0]
    b946:	9b06      	ldr	r3, [sp, #24]
    b948:	0038      	movs	r0, r7
    b94a:	47c0      	blx	r8
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    b94c:	2801      	cmp	r0, #1
    b94e:	d1db      	bne.n	b908 <lv_draw_rect+0xdac>
    b950:	3001      	adds	r0, #1
    b952:	e7d9      	b.n	b908 <lv_draw_rect+0xdac>
    b954:	46b3      	mov	fp, r6
    lv_draw_mask_remove_id(mask_rout_id);
    b956:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b958:	4b9f      	ldr	r3, [pc, #636]	; (bbd8 <lv_draw_rect+0x107c>)
    b95a:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    b95c:	9805      	ldr	r0, [sp, #20]
    b95e:	4c9f      	ldr	r4, [pc, #636]	; (bbdc <lv_draw_rect+0x1080>)
    b960:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
    b962:	980e      	ldr	r0, [sp, #56]	; 0x38
    b964:	47a0      	blx	r4
    if(dsc->bg_opa <= LV_OPA_MIN) return;
    b966:	465b      	mov	r3, fp
    b968:	7b1b      	ldrb	r3, [r3, #12]
    b96a:	469a      	mov	sl, r3
    b96c:	2b05      	cmp	r3, #5
    b96e:	d93f      	bls.n	b9f0 <lv_draw_rect+0xe94>
    b970:	2300      	movs	r3, #0
        *d8 = *s8;
    b972:	a91a      	add	r1, sp, #104	; 0x68
    b974:	4648      	mov	r0, r9
    b976:	5cc2      	ldrb	r2, [r0, r3]
    b978:	545a      	strb	r2, [r3, r1]
    b97a:	3301      	adds	r3, #1
    while(len) {
    b97c:	2b08      	cmp	r3, #8
    b97e:	d1fa      	bne.n	b976 <lv_draw_rect+0xe1a>
    b980:	4681      	mov	r9, r0
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
    b982:	465b      	mov	r3, fp
    b984:	2210      	movs	r2, #16
    b986:	5e9b      	ldrsh	r3, [r3, r2]
    b988:	2b01      	cmp	r3, #1
    b98a:	dd1f      	ble.n	b9cc <lv_draw_rect+0xe70>
    b98c:	465b      	mov	r3, fp
    b98e:	7d1b      	ldrb	r3, [r3, #20]
    b990:	2bf9      	cmp	r3, #249	; 0xf9
    b992:	d91b      	bls.n	b9cc <lv_draw_rect+0xe70>
    b994:	465b      	mov	r3, fp
    b996:	2200      	movs	r2, #0
    b998:	5e9b      	ldrsh	r3, [r3, r2]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d016      	beq.n	b9cc <lv_draw_rect+0xe70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
    b99e:	465b      	mov	r3, fp
    b9a0:	8a58      	ldrh	r0, [r3, #18]
    b9a2:	ab1a      	add	r3, sp, #104	; 0x68
    b9a4:	0881      	lsrs	r1, r0, #2
    b9a6:	2201      	movs	r2, #1
    b9a8:	4011      	ands	r1, r2
    b9aa:	881c      	ldrh	r4, [r3, #0]
    b9ac:	1909      	adds	r1, r1, r4
    b9ae:	8019      	strh	r1, [r3, #0]
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
    b9b0:	0841      	lsrs	r1, r0, #1
    b9b2:	4011      	ands	r1, r2
    b9b4:	885c      	ldrh	r4, [r3, #2]
    b9b6:	1909      	adds	r1, r1, r4
    b9b8:	8059      	strh	r1, [r3, #2]
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
    b9ba:	08c4      	lsrs	r4, r0, #3
    b9bc:	4014      	ands	r4, r2
    b9be:	8899      	ldrh	r1, [r3, #4]
    b9c0:	1b09      	subs	r1, r1, r4
    b9c2:	8099      	strh	r1, [r3, #4]
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
    b9c4:	4002      	ands	r2, r0
    b9c6:	88d9      	ldrh	r1, [r3, #6]
    b9c8:	1a8a      	subs	r2, r1, r2
    b9ca:	80da      	strh	r2, [r3, #6]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    b9cc:	4653      	mov	r3, sl
    b9ce:	2bfa      	cmp	r3, #250	; 0xfa
    b9d0:	d901      	bls.n	b9d6 <lv_draw_rect+0xe7a>
    b9d2:	23ff      	movs	r3, #255	; 0xff
    b9d4:	469a      	mov	sl, r3
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    b9d6:	4b82      	ldr	r3, [pc, #520]	; (bbe0 <lv_draw_rect+0x1084>)
    b9d8:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    b9da:	4b82      	ldr	r3, [pc, #520]	; (bbe4 <lv_draw_rect+0x1088>)
    b9dc:	4798      	blx	r3
    b9de:	0007      	movs	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
    b9e0:	9a04      	ldr	r2, [sp, #16]
    b9e2:	a91a      	add	r1, sp, #104	; 0x68
    b9e4:	a81c      	add	r0, sp, #112	; 0x70
    b9e6:	4b78      	ldr	r3, [pc, #480]	; (bbc8 <lv_draw_rect+0x106c>)
    b9e8:	4798      	blx	r3
    if(is_common == false) return;
    b9ea:	2800      	cmp	r0, #0
    b9ec:	d000      	beq.n	b9f0 <lv_draw_rect+0xe94>
    b9ee:	e09d      	b.n	bb2c <lv_draw_rect+0xfd0>
    _lv_mem_buf_release(mask_buf);
}

static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->pattern_image == NULL) return;
    b9f0:	465b      	mov	r3, fp
    b9f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    b9f4:	2800      	cmp	r0, #0
    b9f6:	d006      	beq.n	ba06 <lv_draw_rect+0xeaa>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
    b9f8:	2336      	movs	r3, #54	; 0x36
    b9fa:	465a      	mov	r2, fp
    b9fc:	5cd3      	ldrb	r3, [r2, r3]
    b9fe:	2b05      	cmp	r3, #5
    ba00:	d901      	bls.n	ba06 <lv_draw_rect+0xeaa>
    ba02:	f000 fbd7 	bl	c1b4 <lv_draw_rect+0x1658>
    if(dsc->border_opa <= LV_OPA_MIN) return;
    ba06:	465b      	mov	r3, fp
    ba08:	7d1e      	ldrb	r6, [r3, #20]
    ba0a:	2e05      	cmp	r6, #5
    ba0c:	d919      	bls.n	ba42 <lv_draw_rect+0xee6>
    if(dsc->border_width == 0) return;
    ba0e:	2210      	movs	r2, #16
    ba10:	5e9b      	ldrsh	r3, [r3, r2]
    ba12:	2b00      	cmp	r3, #0
    ba14:	d015      	beq.n	ba42 <lv_draw_rect+0xee6>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
    ba16:	465b      	mov	r3, fp
    ba18:	2212      	movs	r2, #18
    ba1a:	5e9b      	ldrsh	r3, [r3, r2]
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	d010      	beq.n	ba42 <lv_draw_rect+0xee6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    ba20:	2efa      	cmp	r6, #250	; 0xfa
    ba22:	d900      	bls.n	ba26 <lv_draw_rect+0xeca>
    ba24:	26ff      	movs	r6, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    ba26:	4b6e      	ldr	r3, [pc, #440]	; (bbe0 <lv_draw_rect+0x1084>)
    ba28:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    ba2a:	4b6e      	ldr	r3, [pc, #440]	; (bbe4 <lv_draw_rect+0x1088>)
    ba2c:	4798      	blx	r3
    ba2e:	0007      	movs	r7, r0
    is_common = _lv_area_intersect(&draw_area, coords, clip);
    ba30:	9a04      	ldr	r2, [sp, #16]
    ba32:	4649      	mov	r1, r9
    ba34:	a818      	add	r0, sp, #96	; 0x60
    ba36:	4b64      	ldr	r3, [pc, #400]	; (bbc8 <lv_draw_rect+0x106c>)
    ba38:	4798      	blx	r3
    if(is_common == false) return;
    ba3a:	2800      	cmp	r0, #0
    ba3c:	d001      	beq.n	ba42 <lv_draw_rect+0xee6>
    ba3e:	f000 fd23 	bl	c488 <lv_draw_rect+0x192c>
}


static void draw_value(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->value_str == NULL) return;
    ba42:	465b      	mov	r3, fp
    ba44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    ba46:	2900      	cmp	r1, #0
    ba48:	d006      	beq.n	ba58 <lv_draw_rect+0xefc>
    if(dsc->value_opa <= LV_OPA_MIN) return;
    ba4a:	2344      	movs	r3, #68	; 0x44
    ba4c:	465a      	mov	r2, fp
    ba4e:	5cd3      	ldrb	r3, [r2, r3]
    ba50:	2b05      	cmp	r3, #5
    ba52:	d901      	bls.n	ba58 <lv_draw_rect+0xefc>
    ba54:	f001 f838 	bl	cac8 <lv_draw_rect+0x1f6c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
    ba58:	465b      	mov	r3, fp
    ba5a:	7f1b      	ldrb	r3, [r3, #28]
    ba5c:	4698      	mov	r8, r3
    ba5e:	2b05      	cmp	r3, #5
    ba60:	d95d      	bls.n	bb1e <lv_draw_rect+0xfc2>
    if(dsc->outline_width == 0) return;
    ba62:	465b      	mov	r3, fp
    ba64:	2218      	movs	r2, #24
    ba66:	5e9b      	ldrsh	r3, [r3, r2]
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d058      	beq.n	bb1e <lv_draw_rect+0xfc2>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    ba6c:	4643      	mov	r3, r8
    ba6e:	2bfa      	cmp	r3, #250	; 0xfa
    ba70:	d901      	bls.n	ba76 <lv_draw_rect+0xf1a>
    ba72:	23ff      	movs	r3, #255	; 0xff
    ba74:	4698      	mov	r8, r3
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    ba76:	4b5c      	ldr	r3, [pc, #368]	; (bbe8 <lv_draw_rect+0x108c>)
    ba78:	4798      	blx	r3
    ba7a:	900a      	str	r0, [sp, #40]	; 0x28
    ba7c:	2300      	movs	r3, #0
        *d8 = *s8;
    ba7e:	a916      	add	r1, sp, #88	; 0x58
    ba80:	4648      	mov	r0, r9
    ba82:	5cc2      	ldrb	r2, [r0, r3]
    ba84:	545a      	strb	r2, [r3, r1]
    ba86:	3301      	adds	r3, #1
    while(len) {
    ba88:	2b08      	cmp	r3, #8
    ba8a:	d1fa      	bne.n	ba82 <lv_draw_rect+0xf26>
    area_inner.x1 -= dsc->outline_pad;
    ba8c:	465b      	mov	r3, fp
    ba8e:	8b5d      	ldrh	r5, [r3, #26]
    ba90:	ab16      	add	r3, sp, #88	; 0x58
    ba92:	881a      	ldrh	r2, [r3, #0]
    ba94:	1b52      	subs	r2, r2, r5
    ba96:	b292      	uxth	r2, r2
    ba98:	4692      	mov	sl, r2
    ba9a:	801a      	strh	r2, [r3, #0]
    area_inner.y1 -= dsc->outline_pad;
    ba9c:	885a      	ldrh	r2, [r3, #2]
    ba9e:	1b52      	subs	r2, r2, r5
    baa0:	b292      	uxth	r2, r2
    baa2:	9207      	str	r2, [sp, #28]
    baa4:	805a      	strh	r2, [r3, #2]
    area_inner.x2 += dsc->outline_pad;
    baa6:	889f      	ldrh	r7, [r3, #4]
    baa8:	19ef      	adds	r7, r5, r7
    baaa:	b2bf      	uxth	r7, r7
    baac:	809f      	strh	r7, [r3, #4]
    area_inner.y2 += dsc->outline_pad;
    baae:	88da      	ldrh	r2, [r3, #6]
    bab0:	18ad      	adds	r5, r5, r2
    bab2:	b2ad      	uxth	r5, r5
    bab4:	80dd      	strh	r5, [r3, #6]
    int32_t rin = dsc->radius;
    bab6:	465b      	mov	r3, fp
    bab8:	2200      	movs	r2, #0
    baba:	5e9b      	ldrsh	r3, [r3, r2]
    babc:	9306      	str	r3, [sp, #24]
    int32_t rout = rin + dsc->outline_width;
    babe:	465b      	mov	r3, fp
    bac0:	2218      	movs	r2, #24
    bac2:	5e9b      	ldrsh	r3, [r3, r2]
    bac4:	9305      	str	r3, [sp, #20]
    bac6:	2300      	movs	r3, #0
        *d8 = *s8;
    bac8:	a818      	add	r0, sp, #96	; 0x60
    baca:	a916      	add	r1, sp, #88	; 0x58
    bacc:	5c5a      	ldrb	r2, [r3, r1]
    bace:	541a      	strb	r2, [r3, r0]
    bad0:	3301      	adds	r3, #1
    while(len) {
    bad2:	2b08      	cmp	r3, #8
    bad4:	d1fa      	bne.n	bacc <lv_draw_rect+0xf70>
    area_outer.x1 -= dsc->outline_width;
    bad6:	466b      	mov	r3, sp
    bad8:	8a9c      	ldrh	r4, [r3, #20]
    bada:	ae18      	add	r6, sp, #96	; 0x60
    badc:	8833      	ldrh	r3, [r6, #0]
    bade:	1b1b      	subs	r3, r3, r4
    bae0:	b29b      	uxth	r3, r3
    bae2:	9308      	str	r3, [sp, #32]
    bae4:	8033      	strh	r3, [r6, #0]
    area_outer.x2 += dsc->outline_width;
    bae6:	88b3      	ldrh	r3, [r6, #4]
    bae8:	18e3      	adds	r3, r4, r3
    baea:	b29b      	uxth	r3, r3
    baec:	9309      	str	r3, [sp, #36]	; 0x24
    baee:	80b3      	strh	r3, [r6, #4]
    area_outer.y1 -= dsc->outline_width;
    baf0:	8873      	ldrh	r3, [r6, #2]
    baf2:	1b1b      	subs	r3, r3, r4
    baf4:	b29b      	uxth	r3, r3
    baf6:	930b      	str	r3, [sp, #44]	; 0x2c
    baf8:	8073      	strh	r3, [r6, #2]
    area_outer.y2 += dsc->outline_width;
    bafa:	88f3      	ldrh	r3, [r6, #6]
    bafc:	18e4      	adds	r4, r4, r3
    bafe:	b2a4      	uxth	r4, r4
    bb00:	80f4      	strh	r4, [r6, #6]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    bb02:	4b37      	ldr	r3, [pc, #220]	; (bbe0 <lv_draw_rect+0x1084>)
    bb04:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    bb06:	4b37      	ldr	r3, [pc, #220]	; (bbe4 <lv_draw_rect+0x1088>)
    bb08:	4798      	blx	r3
    bb0a:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &area_outer, clip);
    bb0c:	9a04      	ldr	r2, [sp, #16]
    bb0e:	0031      	movs	r1, r6
    bb10:	a81a      	add	r0, sp, #104	; 0x68
    bb12:	4b2d      	ldr	r3, [pc, #180]	; (bbc8 <lv_draw_rect+0x106c>)
    bb14:	4798      	blx	r3
    if(is_common == false) return;
    bb16:	2800      	cmp	r0, #0
    bb18:	d001      	beq.n	bb1e <lv_draw_rect+0xfc2>
    bb1a:	f001 f831 	bl	cb80 <lv_draw_rect+0x2024>
}
    bb1e:	b031      	add	sp, #196	; 0xc4
    bb20:	bc3c      	pop	{r2, r3, r4, r5}
    bb22:	4690      	mov	r8, r2
    bb24:	4699      	mov	r9, r3
    bb26:	46a2      	mov	sl, r4
    bb28:	46ab      	mov	fp, r5
    bb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    draw_area.x1 -= disp_area->x1;
    bb2c:	8a38      	ldrh	r0, [r7, #16]
    bb2e:	aa1c      	add	r2, sp, #112	; 0x70
    bb30:	8811      	ldrh	r1, [r2, #0]
    bb32:	1a09      	subs	r1, r1, r0
    bb34:	b289      	uxth	r1, r1
    bb36:	8011      	strh	r1, [r2, #0]
    draw_area.y1 -= disp_area->y1;
    bb38:	8a7d      	ldrh	r5, [r7, #18]
    bb3a:	8854      	ldrh	r4, [r2, #2]
    bb3c:	1b64      	subs	r4, r4, r5
    bb3e:	8054      	strh	r4, [r2, #2]
    draw_area.x2 -= disp_area->x1;
    bb40:	8893      	ldrh	r3, [r2, #4]
    bb42:	1a1b      	subs	r3, r3, r0
    bb44:	b29b      	uxth	r3, r3
    bb46:	8093      	strh	r3, [r2, #4]
    draw_area.y2 -= disp_area->y1;
    bb48:	88d0      	ldrh	r0, [r2, #6]
    bb4a:	1b40      	subs	r0, r0, r5
    bb4c:	80d0      	strh	r0, [r2, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bb4e:	3301      	adds	r3, #1
    bb50:	1a5b      	subs	r3, r3, r1
    bb52:	b21b      	sxth	r3, r3
    bb54:	930a      	str	r3, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    bb56:	930b      	str	r3, [sp, #44]	; 0x2c
    bb58:	0018      	movs	r0, r3
    bb5a:	4b24      	ldr	r3, [pc, #144]	; (bbec <lv_draw_rect+0x1090>)
    bb5c:	4798      	blx	r3
    bb5e:	9006      	str	r0, [sp, #24]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
    bb60:	4b21      	ldr	r3, [pc, #132]	; (bbe8 <lv_draw_rect+0x108c>)
    bb62:	4798      	blx	r3
    bb64:	b283      	uxth	r3, r0
    bb66:	930c      	str	r3, [sp, #48]	; 0x30
    if(other_mask_cnt) simple_mode = false;
    bb68:	2200      	movs	r2, #0
    bb6a:	9207      	str	r2, [sp, #28]
    bb6c:	2b00      	cmp	r3, #0
    bb6e:	d106      	bne.n	bb7e <lv_draw_rect+0x1022>
    else if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
    bb70:	465b      	mov	r3, fp
    bb72:	799b      	ldrb	r3, [r3, #6]
    bb74:	3b02      	subs	r3, #2
    bb76:	1e5a      	subs	r2, r3, #1
    bb78:	4193      	sbcs	r3, r2
    bb7a:	b2db      	uxtb	r3, r3
    bb7c:	9307      	str	r3, [sp, #28]
    bb7e:	a91a      	add	r1, sp, #104	; 0x68
    bb80:	888c      	ldrh	r4, [r1, #4]
    bb82:	3401      	adds	r4, #1
    bb84:	880b      	ldrh	r3, [r1, #0]
    bb86:	1ae4      	subs	r4, r4, r3
    bb88:	b224      	sxth	r4, r4
    int32_t coords_w = lv_area_get_width(&coords_bg);
    bb8a:	0026      	movs	r6, r4
    int32_t rout = dsc->radius;
    bb8c:	465b      	mov	r3, fp
    bb8e:	2200      	movs	r2, #0
    bb90:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    bb92:	88cb      	ldrh	r3, [r1, #6]
    bb94:	3301      	adds	r3, #1
    bb96:	8849      	ldrh	r1, [r1, #2]
    bb98:	1a5b      	subs	r3, r3, r1
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    bb9a:	b21b      	sxth	r3, r3
    bb9c:	42a3      	cmp	r3, r4
    bb9e:	dd00      	ble.n	bba2 <lv_draw_rect+0x1046>
    bba0:	0023      	movs	r3, r4
    if(rout > short_side >> 1) rout = short_side >> 1;
    bba2:	105b      	asrs	r3, r3, #1
    bba4:	4698      	mov	r8, r3
    bba6:	4293      	cmp	r3, r2
    bba8:	dd00      	ble.n	bbac <lv_draw_rect+0x1050>
    bbaa:	4690      	mov	r8, r2
    if(simple_mode && rout == 0 && (dsc->bg_grad_dir == LV_GRAD_DIR_NONE)) {
    bbac:	9b07      	ldr	r3, [sp, #28]
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d02f      	beq.n	bc12 <lv_draw_rect+0x10b6>
    bbb2:	4643      	mov	r3, r8
    bbb4:	2b00      	cmp	r3, #0
    bbb6:	d12c      	bne.n	bc12 <lv_draw_rect+0x10b6>
    bbb8:	465b      	mov	r3, fp
    bbba:	799b      	ldrb	r3, [r3, #6]
    bbbc:	2b00      	cmp	r3, #0
    bbbe:	d017      	beq.n	bbf0 <lv_draw_rect+0x1094>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    bbc0:	2301      	movs	r3, #1
    bbc2:	425b      	negs	r3, r3
    bbc4:	930f      	str	r3, [sp, #60]	; 0x3c
    bbc6:	e033      	b.n	bc30 <lv_draw_rect+0x10d4>
    bbc8:	0000fba7 	.word	0x0000fba7
    bbcc:	00010f45 	.word	0x00010f45
    bbd0:	0000a5bd 	.word	0x0000a5bd
    bbd4:	00005c05 	.word	0x00005c05
    bbd8:	0000a611 	.word	0x0000a611
    bbdc:	00010b6d 	.word	0x00010b6d
    bbe0:	00004349 	.word	0x00004349
    bbe4:	0000f6a1 	.word	0x0000f6a1
    bbe8:	0000a659 	.word	0x0000a659
    bbec:	00010e59 	.word	0x00010e59
        _lv_blend_fill(clip, &coords_bg,
    bbf0:	465b      	mov	r3, fp
    bbf2:	885a      	ldrh	r2, [r3, #2]
    bbf4:	7b5b      	ldrb	r3, [r3, #13]
    bbf6:	9302      	str	r3, [sp, #8]
    bbf8:	4653      	mov	r3, sl
    bbfa:	9301      	str	r3, [sp, #4]
    bbfc:	2301      	movs	r3, #1
    bbfe:	9300      	str	r3, [sp, #0]
    bc00:	2300      	movs	r3, #0
    bc02:	a91a      	add	r1, sp, #104	; 0x68
    bc04:	9804      	ldr	r0, [sp, #16]
    bc06:	4cae      	ldr	r4, [pc, #696]	; (bec0 <lv_draw_rect+0x1364>)
    bc08:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
    bc0a:	2301      	movs	r3, #1
    bc0c:	425b      	negs	r3, r3
    bc0e:	930f      	str	r3, [sp, #60]	; 0x3c
    bc10:	e277      	b.n	c102 <lv_draw_rect+0x15a6>
        if(rout > 0) {
    bc12:	4643      	mov	r3, r8
    bc14:	2b00      	cmp	r3, #0
    bc16:	dd37      	ble.n	bc88 <lv_draw_rect+0x112c>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
    bc18:	4643      	mov	r3, r8
    bc1a:	b21a      	sxth	r2, r3
    bc1c:	2300      	movs	r3, #0
    bc1e:	a91a      	add	r1, sp, #104	; 0x68
    bc20:	a829      	add	r0, sp, #164	; 0xa4
    bc22:	4da8      	ldr	r5, [pc, #672]	; (bec4 <lv_draw_rect+0x1368>)
    bc24:	47a8      	blx	r5
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    bc26:	2100      	movs	r1, #0
    bc28:	a829      	add	r0, sp, #164	; 0xa4
    bc2a:	4ba7      	ldr	r3, [pc, #668]	; (bec8 <lv_draw_rect+0x136c>)
    bc2c:	4798      	blx	r3
    bc2e:	900f      	str	r0, [sp, #60]	; 0x3c
        lv_color_t grad_color = dsc->bg_color;
    bc30:	465b      	mov	r3, fp
    bc32:	885b      	ldrh	r3, [r3, #2]
    bc34:	466a      	mov	r2, sp
    bc36:	8413      	strh	r3, [r2, #32]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    bc38:	465b      	mov	r3, fp
    bc3a:	799b      	ldrb	r3, [r3, #6]
        lv_color_t * grad_map = NULL;
    bc3c:	2200      	movs	r2, #0
    bc3e:	920d      	str	r2, [sp, #52]	; 0x34
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    bc40:	2b02      	cmp	r3, #2
    bc42:	d025      	beq.n	bc90 <lv_draw_rect+0x1134>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    bc44:	ab1a      	add	r3, sp, #104	; 0x68
    bc46:	2204      	movs	r2, #4
    bc48:	5e99      	ldrsh	r1, [r3, r2]
    bc4a:	2000      	movs	r0, #0
    bc4c:	5e18      	ldrsh	r0, [r3, r0]
    bc4e:	1c4b      	adds	r3, r1, #1
    bc50:	1a1b      	subs	r3, r3, r0
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
    bc52:	b21b      	sxth	r3, r3
    bc54:	4642      	mov	r2, r8
    bc56:	0052      	lsls	r2, r2, #1
    bc58:	1a9b      	subs	r3, r3, r2
    bc5a:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = coords_bg.x1;
    bc5c:	aa1e      	add	r2, sp, #120	; 0x78
    bc5e:	8010      	strh	r0, [r2, #0]
        fill_area.x2 = coords_bg.x2;
    bc60:	8091      	strh	r1, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    bc62:	a91c      	add	r1, sp, #112	; 0x70
    bc64:	2302      	movs	r3, #2
    bc66:	5ecd      	ldrsh	r5, [r1, r3]
    bc68:	8a7b      	ldrh	r3, [r7, #18]
    bc6a:	195b      	adds	r3, r3, r5
    bc6c:	b21b      	sxth	r3, r3
    bc6e:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
    bc70:	80d3      	strh	r3, [r2, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    bc72:	2206      	movs	r2, #6
    bc74:	5e8b      	ldrsh	r3, [r1, r2]
    bc76:	429d      	cmp	r5, r3
    bc78:	dd00      	ble.n	bc7c <lv_draw_rect+0x1120>
    bc7a:	e232      	b.n	c0e2 <lv_draw_rect+0x1586>
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    bc7c:	464b      	mov	r3, r9
    bc7e:	9310      	str	r3, [sp, #64]	; 0x40
    bc80:	46b9      	mov	r9, r7
    bc82:	465e      	mov	r6, fp
    bc84:	46d3      	mov	fp, sl
    bc86:	e0e8      	b.n	be5a <lv_draw_rect+0x12fe>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    bc88:	2301      	movs	r3, #1
    bc8a:	425b      	negs	r3, r3
    bc8c:	930f      	str	r3, [sp, #60]	; 0x3c
    bc8e:	e7cf      	b.n	bc30 <lv_draw_rect+0x10d4>
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    bc90:	465b      	mov	r3, fp
    bc92:	885a      	ldrh	r2, [r3, #2]
    bc94:	889b      	ldrh	r3, [r3, #4]
    bc96:	429a      	cmp	r2, r3
    bc98:	d0d4      	beq.n	bc44 <lv_draw_rect+0x10e8>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
    bc9a:	0060      	lsls	r0, r4, #1
    bc9c:	4b8b      	ldr	r3, [pc, #556]	; (becc <lv_draw_rect+0x1370>)
    bc9e:	4798      	blx	r3
    bca0:	900d      	str	r0, [sp, #52]	; 0x34
            for(i = 0; i < coords_w; i++) {
    bca2:	2e00      	cmp	r6, #0
    bca4:	ddce      	ble.n	bc44 <lv_draw_rect+0x10e8>
    bca6:	2500      	movs	r5, #0
                grad_map[i] = grad_get(dsc, coords_w, i);
    bca8:	4642      	mov	r2, r8
    bcaa:	9209      	str	r2, [sp, #36]	; 0x24
    bcac:	46b0      	mov	r8, r6
    bcae:	002e      	movs	r6, r5
    bcb0:	465d      	mov	r5, fp
    bcb2:	46bb      	mov	fp, r7
    bcb4:	9005      	str	r0, [sp, #20]
    bcb6:	e01e      	b.n	bcf6 <lv_draw_rect+0x119a>
    if(i <= min) return dsc->bg_color;
    bcb8:	78a9      	ldrb	r1, [r5, #2]
    bcba:	06c9      	lsls	r1, r1, #27
    bcbc:	0ec8      	lsrs	r0, r1, #27
    bcbe:	886b      	ldrh	r3, [r5, #2]
    bcc0:	055b      	lsls	r3, r3, #21
    bcc2:	0e9b      	lsrs	r3, r3, #26
    bcc4:	78ea      	ldrb	r2, [r5, #3]
    bcc6:	08d2      	lsrs	r2, r2, #3
                grad_map[i] = grad_get(dsc, coords_w, i);
    bcc8:	7821      	ldrb	r1, [r4, #0]
    bcca:	271f      	movs	r7, #31
    bccc:	43b9      	bics	r1, r7
    bcce:	4301      	orrs	r1, r0
    bcd0:	7021      	strb	r1, [r4, #0]
    bcd2:	0159      	lsls	r1, r3, #5
    bcd4:	8823      	ldrh	r3, [r4, #0]
    bcd6:	487e      	ldr	r0, [pc, #504]	; (bed0 <lv_draw_rect+0x1374>)
    bcd8:	4003      	ands	r3, r0
    bcda:	430b      	orrs	r3, r1
    bcdc:	8023      	strh	r3, [r4, #0]
    bcde:	00d2      	lsls	r2, r2, #3
    bce0:	0a1b      	lsrs	r3, r3, #8
    bce2:	2107      	movs	r1, #7
    bce4:	400b      	ands	r3, r1
    bce6:	4313      	orrs	r3, r2
    bce8:	7063      	strb	r3, [r4, #1]
            for(i = 0; i < coords_w; i++) {
    bcea:	3601      	adds	r6, #1
    bcec:	9b05      	ldr	r3, [sp, #20]
    bcee:	3302      	adds	r3, #2
    bcf0:	9305      	str	r3, [sp, #20]
    bcf2:	45b0      	cmp	r8, r6
    bcf4:	dd58      	ble.n	bda8 <lv_draw_rect+0x124c>
                grad_map[i] = grad_get(dsc, coords_w, i);
    bcf6:	9c05      	ldr	r4, [sp, #20]
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    bcf8:	2308      	movs	r3, #8
    bcfa:	5ee9      	ldrsh	r1, [r5, r3]
    bcfc:	4640      	mov	r0, r8
    bcfe:	4348      	muls	r0, r1
    bd00:	1200      	asrs	r0, r0, #8
    if(i <= min) return dsc->bg_color;
    bd02:	b232      	sxth	r2, r6
    bd04:	4290      	cmp	r0, r2
    bd06:	dad7      	bge.n	bcb8 <lv_draw_rect+0x115c>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    bd08:	270a      	movs	r7, #10
    bd0a:	5feb      	ldrsh	r3, [r5, r7]
    bd0c:	4647      	mov	r7, r8
    bd0e:	435f      	muls	r7, r3
    bd10:	123f      	asrs	r7, r7, #8
    if(i >= max) return dsc->bg_grad_color;
    bd12:	42ba      	cmp	r2, r7
    bd14:	da3f      	bge.n	bd96 <lv_draw_rect+0x123a>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    bd16:	1a59      	subs	r1, r3, r1
    d = (s * d) >> 8;
    bd18:	4643      	mov	r3, r8
    bd1a:	4359      	muls	r1, r3
    i -= min;
    bd1c:	1a30      	subs	r0, r6, r0
    lv_opa_t mix = (i * 255) / d;
    bd1e:	b200      	sxth	r0, r0
    bd20:	0203      	lsls	r3, r0, #8
    bd22:	1a18      	subs	r0, r3, r0
    d = (s * d) >> 8;
    bd24:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
    bd26:	4b6b      	ldr	r3, [pc, #428]	; (bed4 <lv_draw_rect+0x1378>)
    bd28:	4798      	blx	r3
    bd2a:	23ff      	movs	r3, #255	; 0xff
    bd2c:	4018      	ands	r0, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    bd2e:	1a19      	subs	r1, r3, r0
    bd30:	796a      	ldrb	r2, [r5, #5]
    bd32:	08d2      	lsrs	r2, r2, #3
    bd34:	4342      	muls	r2, r0
    bd36:	78eb      	ldrb	r3, [r5, #3]
    bd38:	08db      	lsrs	r3, r3, #3
    bd3a:	434b      	muls	r3, r1
    bd3c:	18d3      	adds	r3, r2, r3
    bd3e:	021a      	lsls	r2, r3, #8
    bd40:	18d2      	adds	r2, r2, r3
    bd42:	01d2      	lsls	r2, r2, #7
    bd44:	18d2      	adds	r2, r2, r3
    bd46:	0dd2      	lsrs	r2, r2, #23
    bd48:	231f      	movs	r3, #31
    bd4a:	401a      	ands	r2, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    bd4c:	88ab      	ldrh	r3, [r5, #4]
    bd4e:	055b      	lsls	r3, r3, #21
    bd50:	0e9b      	lsrs	r3, r3, #26
    bd52:	4343      	muls	r3, r0
    bd54:	469c      	mov	ip, r3
    bd56:	886b      	ldrh	r3, [r5, #2]
    bd58:	055b      	lsls	r3, r3, #21
    bd5a:	0e9b      	lsrs	r3, r3, #26
    bd5c:	434b      	muls	r3, r1
    bd5e:	4463      	add	r3, ip
    bd60:	021f      	lsls	r7, r3, #8
    bd62:	46bc      	mov	ip, r7
    bd64:	449c      	add	ip, r3
    bd66:	4667      	mov	r7, ip
    bd68:	01ff      	lsls	r7, r7, #7
    bd6a:	46bc      	mov	ip, r7
    bd6c:	4463      	add	r3, ip
    bd6e:	0ddb      	lsrs	r3, r3, #23
    bd70:	273f      	movs	r7, #63	; 0x3f
    bd72:	403b      	ands	r3, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    bd74:	792f      	ldrb	r7, [r5, #4]
    bd76:	06ff      	lsls	r7, r7, #27
    bd78:	0eff      	lsrs	r7, r7, #27
    bd7a:	4378      	muls	r0, r7
    bd7c:	78af      	ldrb	r7, [r5, #2]
    bd7e:	06ff      	lsls	r7, r7, #27
    bd80:	0eff      	lsrs	r7, r7, #27
    bd82:	4379      	muls	r1, r7
    bd84:	1840      	adds	r0, r0, r1
    bd86:	0201      	lsls	r1, r0, #8
    bd88:	1809      	adds	r1, r1, r0
    bd8a:	01c9      	lsls	r1, r1, #7
    bd8c:	1809      	adds	r1, r1, r0
    bd8e:	0dc9      	lsrs	r1, r1, #23
    bd90:	201f      	movs	r0, #31
    bd92:	4008      	ands	r0, r1
    bd94:	e798      	b.n	bcc8 <lv_draw_rect+0x116c>
    if(i >= max) return dsc->bg_grad_color;
    bd96:	7929      	ldrb	r1, [r5, #4]
    bd98:	06c9      	lsls	r1, r1, #27
    bd9a:	0ec8      	lsrs	r0, r1, #27
    bd9c:	88ab      	ldrh	r3, [r5, #4]
    bd9e:	055b      	lsls	r3, r3, #21
    bda0:	0e9b      	lsrs	r3, r3, #26
    bda2:	796a      	ldrb	r2, [r5, #5]
    bda4:	08d2      	lsrs	r2, r2, #3
    bda6:	e78f      	b.n	bcc8 <lv_draw_rect+0x116c>
    bda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bdaa:	4698      	mov	r8, r3
    bdac:	465f      	mov	r7, fp
    bdae:	46ab      	mov	fp, r5
    bdb0:	e748      	b.n	bc44 <lv_draw_rect+0x10e8>
                    _lv_memset_ff(mask_buf, draw_area_w);
    bdb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bdb4:	9f06      	ldr	r7, [sp, #24]
    bdb6:	0038      	movs	r0, r7
    bdb8:	4b47      	ldr	r3, [pc, #284]	; (bed8 <lv_draw_rect+0x137c>)
    bdba:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    bdbc:	464b      	mov	r3, r9
    bdbe:	8a5a      	ldrh	r2, [r3, #18]
    bdc0:	1952      	adds	r2, r2, r5
    bdc2:	b212      	sxth	r2, r2
    bdc4:	8a19      	ldrh	r1, [r3, #16]
    bdc6:	ab0e      	add	r3, sp, #56	; 0x38
    bdc8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    bdca:	18c9      	adds	r1, r1, r3
    bdcc:	b209      	sxth	r1, r1
    bdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdd0:	0038      	movs	r0, r7
    bdd2:	4f42      	ldr	r7, [pc, #264]	; (bedc <lv_draw_rect+0x1380>)
    bdd4:	47b8      	blx	r7
    bdd6:	9005      	str	r0, [sp, #20]
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    bdd8:	79b3      	ldrb	r3, [r6, #6]
    bdda:	2b01      	cmp	r3, #1
    bddc:	d119      	bne.n	be12 <lv_draw_rect+0x12b6>
    bdde:	e081      	b.n	bee4 <lv_draw_rect+0x1388>
                _lv_memset_ff(mask_buf, draw_area_w);
    bde0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bde2:	9f06      	ldr	r7, [sp, #24]
    bde4:	0038      	movs	r0, r7
    bde6:	4b3c      	ldr	r3, [pc, #240]	; (bed8 <lv_draw_rect+0x137c>)
    bde8:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    bdea:	464b      	mov	r3, r9
    bdec:	8a5a      	ldrh	r2, [r3, #18]
    bdee:	1952      	adds	r2, r2, r5
    bdf0:	b212      	sxth	r2, r2
    bdf2:	8a19      	ldrh	r1, [r3, #16]
    bdf4:	ab0e      	add	r3, sp, #56	; 0x38
    bdf6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    bdf8:	18c9      	adds	r1, r1, r3
    bdfa:	b209      	sxth	r1, r1
    bdfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdfe:	0038      	movs	r0, r7
    be00:	4f36      	ldr	r7, [pc, #216]	; (bedc <lv_draw_rect+0x1380>)
    be02:	47b8      	blx	r7
    be04:	9005      	str	r0, [sp, #20]
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    be06:	79b3      	ldrb	r3, [r6, #6]
    be08:	2b01      	cmp	r3, #1
    be0a:	d06b      	beq.n	bee4 <lv_draw_rect+0x1388>
            if(simple_mode && split &&
    be0c:	9a07      	ldr	r2, [sp, #28]
    be0e:	2a00      	cmp	r2, #0
    be10:	d13e      	bne.n	be90 <lv_draw_rect+0x1334>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    be12:	2b02      	cmp	r3, #2
    be14:	d100      	bne.n	be18 <lv_draw_rect+0x12bc>
    be16:	e153      	b.n	c0c0 <lv_draw_rect+0x1564>
                else if(other_mask_cnt != 0 || !split) {
    be18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be1a:	2b00      	cmp	r3, #0
    be1c:	d102      	bne.n	be24 <lv_draw_rect+0x12c8>
    be1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be20:	2b32      	cmp	r3, #50	; 0x32
    be22:	dc0c      	bgt.n	be3e <lv_draw_rect+0x12e2>
                    _lv_blend_fill(clip, &fill_area,
    be24:	7b73      	ldrb	r3, [r6, #13]
    be26:	9302      	str	r3, [sp, #8]
    be28:	465b      	mov	r3, fp
    be2a:	9301      	str	r3, [sp, #4]
    be2c:	9b05      	ldr	r3, [sp, #20]
    be2e:	9300      	str	r3, [sp, #0]
    be30:	9b06      	ldr	r3, [sp, #24]
    be32:	466a      	mov	r2, sp
    be34:	8c12      	ldrh	r2, [r2, #32]
    be36:	a91e      	add	r1, sp, #120	; 0x78
    be38:	9804      	ldr	r0, [sp, #16]
    be3a:	4c21      	ldr	r4, [pc, #132]	; (bec0 <lv_draw_rect+0x1364>)
    be3c:	47a0      	blx	r4
            fill_area.y1++;
    be3e:	ab1e      	add	r3, sp, #120	; 0x78
    be40:	885a      	ldrh	r2, [r3, #2]
    be42:	3201      	adds	r2, #1
    be44:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
    be46:	88da      	ldrh	r2, [r3, #6]
    be48:	3201      	adds	r2, #1
    be4a:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    be4c:	3501      	adds	r5, #1
    be4e:	ab0e      	add	r3, sp, #56	; 0x38
    be50:	223e      	movs	r2, #62	; 0x3e
    be52:	5e9b      	ldrsh	r3, [r3, r2]
    be54:	429d      	cmp	r5, r3
    be56:	dd00      	ble.n	be5a <lv_draw_rect+0x12fe>
    be58:	e13f      	b.n	c0da <lv_draw_rect+0x157e>
            int32_t y = h + vdb->area.y1;
    be5a:	464b      	mov	r3, r9
    be5c:	2412      	movs	r4, #18
    be5e:	5f1c      	ldrsh	r4, [r3, r4]
    be60:	1964      	adds	r4, r4, r5
            if(y > coords_bg.y1 + rout + 1 &&
    be62:	ab1a      	add	r3, sp, #104	; 0x68
    be64:	2202      	movs	r2, #2
    be66:	5e9b      	ldrsh	r3, [r3, r2]
    be68:	4443      	add	r3, r8
    be6a:	3301      	adds	r3, #1
    be6c:	429c      	cmp	r4, r3
    be6e:	ddb7      	ble.n	bde0 <lv_draw_rect+0x1284>
               y < coords_bg.y2 - rout - 1) {
    be70:	ab1a      	add	r3, sp, #104	; 0x68
    be72:	2206      	movs	r2, #6
    be74:	5e9b      	ldrsh	r3, [r3, r2]
    be76:	4642      	mov	r2, r8
    be78:	1a9b      	subs	r3, r3, r2
    be7a:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
    be7c:	429c      	cmp	r4, r3
    be7e:	daaf      	bge.n	bde0 <lv_draw_rect+0x1284>
                if(simple_mode == false) {
    be80:	9b07      	ldr	r3, [sp, #28]
    be82:	2b00      	cmp	r3, #0
    be84:	d095      	beq.n	bdb2 <lv_draw_rect+0x1256>
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    be86:	79b3      	ldrb	r3, [r6, #6]
    be88:	2b01      	cmp	r3, #1
    be8a:	d029      	beq.n	bee0 <lv_draw_rect+0x1384>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    be8c:	2201      	movs	r2, #1
    be8e:	9205      	str	r2, [sp, #20]
            if(simple_mode && split &&
    be90:	9a09      	ldr	r2, [sp, #36]	; 0x24
    be92:	2a32      	cmp	r2, #50	; 0x32
    be94:	dd00      	ble.n	be98 <lv_draw_rect+0x133c>
    be96:	e0a0      	b.n	bfda <lv_draw_rect+0x147e>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    be98:	2b02      	cmp	r3, #2
    be9a:	d100      	bne.n	be9e <lv_draw_rect+0x1342>
    be9c:	e110      	b.n	c0c0 <lv_draw_rect+0x1564>
                else if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    be9e:	2b01      	cmp	r3, #1
    bea0:	d1ba      	bne.n	be18 <lv_draw_rect+0x12bc>
                    _lv_blend_fill(clip, &fill_area,
    bea2:	7b73      	ldrb	r3, [r6, #13]
    bea4:	9302      	str	r3, [sp, #8]
    bea6:	465b      	mov	r3, fp
    bea8:	9301      	str	r3, [sp, #4]
    beaa:	9b05      	ldr	r3, [sp, #20]
    beac:	9300      	str	r3, [sp, #0]
    beae:	9b06      	ldr	r3, [sp, #24]
    beb0:	466a      	mov	r2, sp
    beb2:	8c12      	ldrh	r2, [r2, #32]
    beb4:	a91e      	add	r1, sp, #120	; 0x78
    beb6:	9804      	ldr	r0, [sp, #16]
    beb8:	4c01      	ldr	r4, [pc, #4]	; (bec0 <lv_draw_rect+0x1364>)
    beba:	47a0      	blx	r4
    bebc:	e7bf      	b.n	be3e <lv_draw_rect+0x12e2>
    bebe:	46c0      	nop			; (mov r8, r8)
    bec0:	00005c05 	.word	0x00005c05
    bec4:	0000a7ed 	.word	0x0000a7ed
    bec8:	0000a585 	.word	0x0000a585
    becc:	00010e59 	.word	0x00010e59
    bed0:	fffff81f 	.word	0xfffff81f
    bed4:	00017a75 	.word	0x00017a75
    bed8:	00011089 	.word	0x00011089
    bedc:	0000a5bd 	.word	0x0000a5bd
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    bee0:	2301      	movs	r3, #1
    bee2:	9305      	str	r3, [sp, #20]
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    bee4:	8872      	ldrh	r2, [r6, #2]
    bee6:	88b3      	ldrh	r3, [r6, #4]
    bee8:	429a      	cmp	r2, r3
    beea:	d06d      	beq.n	bfc8 <lv_draw_rect+0x146c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    beec:	a91a      	add	r1, sp, #104	; 0x68
    beee:	884a      	ldrh	r2, [r1, #2]
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
    bef0:	1aa3      	subs	r3, r4, r2
    bef2:	b29b      	uxth	r3, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    bef4:	2708      	movs	r7, #8
    bef6:	5ff0      	ldrsh	r0, [r6, r7]
    bef8:	4682      	mov	sl, r0
    befa:	88c9      	ldrh	r1, [r1, #6]
    befc:	3101      	adds	r1, #1
    befe:	1a89      	subs	r1, r1, r2
    bf00:	b209      	sxth	r1, r1
    bf02:	0002      	movs	r2, r0
    bf04:	434a      	muls	r2, r1
    bf06:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
    bf08:	b218      	sxth	r0, r3
    bf0a:	4684      	mov	ip, r0
    bf0c:	4282      	cmp	r2, r0
    bf0e:	da45      	bge.n	bf9c <lv_draw_rect+0x1440>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    bf10:	270a      	movs	r7, #10
    bf12:	5ff0      	ldrsh	r0, [r6, r7]
    bf14:	0007      	movs	r7, r0
    bf16:	434f      	muls	r7, r1
    bf18:	123f      	asrs	r7, r7, #8
    if(i >= max) return dsc->bg_grad_color;
    bf1a:	45bc      	cmp	ip, r7
    bf1c:	db00      	blt.n	bf20 <lv_draw_rect+0x13c4>
    bf1e:	e0b1      	b.n	c084 <lv_draw_rect+0x1528>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    bf20:	4657      	mov	r7, sl
    bf22:	1bc0      	subs	r0, r0, r7
    d = (s * d) >> 8;
    bf24:	4341      	muls	r1, r0
    i -= min;
    bf26:	1a9b      	subs	r3, r3, r2
    lv_opa_t mix = (i * 255) / d;
    bf28:	b21b      	sxth	r3, r3
    bf2a:	0218      	lsls	r0, r3, #8
    bf2c:	1ac0      	subs	r0, r0, r3
    d = (s * d) >> 8;
    bf2e:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
    bf30:	4bb8      	ldr	r3, [pc, #736]	; (c214 <lv_draw_rect+0x16b8>)
    bf32:	4798      	blx	r3
    bf34:	21ff      	movs	r1, #255	; 0xff
    bf36:	4008      	ands	r0, r1
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    bf38:	1a09      	subs	r1, r1, r0
    bf3a:	7972      	ldrb	r2, [r6, #5]
    bf3c:	08d2      	lsrs	r2, r2, #3
    bf3e:	4342      	muls	r2, r0
    bf40:	78f3      	ldrb	r3, [r6, #3]
    bf42:	08db      	lsrs	r3, r3, #3
    bf44:	434b      	muls	r3, r1
    bf46:	18d3      	adds	r3, r2, r3
    bf48:	021a      	lsls	r2, r3, #8
    bf4a:	18d2      	adds	r2, r2, r3
    bf4c:	01d2      	lsls	r2, r2, #7
    bf4e:	18d2      	adds	r2, r2, r3
    bf50:	0dd2      	lsrs	r2, r2, #23
    bf52:	231f      	movs	r3, #31
    bf54:	469c      	mov	ip, r3
    bf56:	401a      	ands	r2, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    bf58:	88b3      	ldrh	r3, [r6, #4]
    bf5a:	055b      	lsls	r3, r3, #21
    bf5c:	0e9b      	lsrs	r3, r3, #26
    bf5e:	4343      	muls	r3, r0
    bf60:	469a      	mov	sl, r3
    bf62:	8873      	ldrh	r3, [r6, #2]
    bf64:	055b      	lsls	r3, r3, #21
    bf66:	0e9b      	lsrs	r3, r3, #26
    bf68:	434b      	muls	r3, r1
    bf6a:	449a      	add	sl, r3
    bf6c:	4653      	mov	r3, sl
    bf6e:	021b      	lsls	r3, r3, #8
    bf70:	4453      	add	r3, sl
    bf72:	01db      	lsls	r3, r3, #7
    bf74:	4453      	add	r3, sl
    bf76:	00db      	lsls	r3, r3, #3
    bf78:	0e9b      	lsrs	r3, r3, #26
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    bf7a:	7937      	ldrb	r7, [r6, #4]
    bf7c:	06ff      	lsls	r7, r7, #27
    bf7e:	0eff      	lsrs	r7, r7, #27
    bf80:	4378      	muls	r0, r7
    bf82:	78b7      	ldrb	r7, [r6, #2]
    bf84:	06ff      	lsls	r7, r7, #27
    bf86:	0eff      	lsrs	r7, r7, #27
    bf88:	4379      	muls	r1, r7
    bf8a:	1841      	adds	r1, r0, r1
    bf8c:	0208      	lsls	r0, r1, #8
    bf8e:	1840      	adds	r0, r0, r1
    bf90:	01c0      	lsls	r0, r0, #7
    bf92:	1840      	adds	r0, r0, r1
    bf94:	0dc0      	lsrs	r0, r0, #23
    bf96:	4661      	mov	r1, ip
    bf98:	4008      	ands	r0, r1
    bf9a:	e007      	b.n	bfac <lv_draw_rect+0x1450>
    if(i <= min) return dsc->bg_color;
    bf9c:	78b1      	ldrb	r1, [r6, #2]
    bf9e:	06c9      	lsls	r1, r1, #27
    bfa0:	0ec8      	lsrs	r0, r1, #27
    bfa2:	8873      	ldrh	r3, [r6, #2]
    bfa4:	055b      	lsls	r3, r3, #21
    bfa6:	0e9b      	lsrs	r3, r3, #26
    bfa8:	78f2      	ldrb	r2, [r6, #3]
    bfaa:	08d2      	lsrs	r2, r2, #3
    bfac:	211f      	movs	r1, #31
    bfae:	9f08      	ldr	r7, [sp, #32]
    bfb0:	438f      	bics	r7, r1
    bfb2:	0039      	movs	r1, r7
    bfb4:	4301      	orrs	r1, r0
    bfb6:	0158      	lsls	r0, r3, #5
    bfb8:	4b97      	ldr	r3, [pc, #604]	; (c218 <lv_draw_rect+0x16bc>)
    bfba:	400b      	ands	r3, r1
    bfbc:	4303      	orrs	r3, r0
    bfbe:	02d2      	lsls	r2, r2, #11
    bfc0:	055b      	lsls	r3, r3, #21
    bfc2:	0d5b      	lsrs	r3, r3, #21
    bfc4:	4313      	orrs	r3, r2
    bfc6:	9308      	str	r3, [sp, #32]
            if(simple_mode && split &&
    bfc8:	9b07      	ldr	r3, [sp, #28]
    bfca:	2b00      	cmp	r3, #0
    bfcc:	d100      	bne.n	bfd0 <lv_draw_rect+0x1474>
    bfce:	e768      	b.n	bea2 <lv_draw_rect+0x1346>
    bfd0:	2301      	movs	r3, #1
    bfd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bfd4:	2a32      	cmp	r2, #50	; 0x32
    bfd6:	dc00      	bgt.n	bfda <lv_draw_rect+0x147e>
    bfd8:	e763      	b.n	bea2 <lv_draw_rect+0x1346>
               (y < coords_bg.y1 + rout + 1 ||
    bfda:	aa1a      	add	r2, sp, #104	; 0x68
    bfdc:	2102      	movs	r1, #2
    bfde:	5e52      	ldrsh	r2, [r2, r1]
    bfe0:	4442      	add	r2, r8
    bfe2:	3201      	adds	r2, #1
            if(simple_mode && split &&
    bfe4:	4294      	cmp	r4, r2
    bfe6:	db08      	blt.n	bffa <lv_draw_rect+0x149e>
                y > coords_bg.y2 - rout - 1)) {
    bfe8:	aa1a      	add	r2, sp, #104	; 0x68
    bfea:	2106      	movs	r1, #6
    bfec:	5e52      	ldrsh	r2, [r2, r1]
    bfee:	4641      	mov	r1, r8
    bff0:	1a52      	subs	r2, r2, r1
    bff2:	3a01      	subs	r2, #1
               (y < coords_bg.y1 + rout + 1 ||
    bff4:	4294      	cmp	r4, r2
    bff6:	dc00      	bgt.n	bffa <lv_draw_rect+0x149e>
    bff8:	e74e      	b.n	be98 <lv_draw_rect+0x133c>
                fill_area2.x1 = coords_bg.x1;
    bffa:	ab1a      	add	r3, sp, #104	; 0x68
    bffc:	2200      	movs	r2, #0
    bffe:	5e9b      	ldrsh	r3, [r3, r2]
    c000:	a922      	add	r1, sp, #136	; 0x88
    c002:	800b      	strh	r3, [r1, #0]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
    c004:	4642      	mov	r2, r8
    c006:	4668      	mov	r0, sp
    c008:	8702      	strh	r2, [r0, #56]	; 0x38
    c00a:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    c00c:	3b01      	subs	r3, #1
    c00e:	18e3      	adds	r3, r4, r3
    c010:	808b      	strh	r3, [r1, #4]
                fill_area2.y1 = fill_area.y1;
    c012:	ab1e      	add	r3, sp, #120	; 0x78
    c014:	885a      	ldrh	r2, [r3, #2]
    c016:	804a      	strh	r2, [r1, #2]
                fill_area2.y2 = fill_area.y2;
    c018:	88db      	ldrh	r3, [r3, #6]
    c01a:	80cb      	strh	r3, [r1, #6]
                _lv_blend_fill(clip, &fill_area2,
    c01c:	7b73      	ldrb	r3, [r6, #13]
    c01e:	9302      	str	r3, [sp, #8]
    c020:	465b      	mov	r3, fp
    c022:	9301      	str	r3, [sp, #4]
    c024:	9b05      	ldr	r3, [sp, #20]
    c026:	9300      	str	r3, [sp, #0]
    c028:	9b06      	ldr	r3, [sp, #24]
    c02a:	8c02      	ldrh	r2, [r0, #32]
    c02c:	9804      	ldr	r0, [sp, #16]
    c02e:	4f7b      	ldr	r7, [pc, #492]	; (c21c <lv_draw_rect+0x16c0>)
    c030:	47b8      	blx	r7
                if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    c032:	79b3      	ldrb	r3, [r6, #6]
    c034:	2b01      	cmp	r3, #1
    c036:	d02e      	beq.n	c096 <lv_draw_rect+0x153a>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
    c038:	ab1a      	add	r3, sp, #104	; 0x68
    c03a:	2204      	movs	r2, #4
    c03c:	5e9b      	ldrsh	r3, [r3, r2]
    c03e:	a922      	add	r1, sp, #136	; 0x88
    c040:	1c5a      	adds	r2, r3, #1
    c042:	1b14      	subs	r4, r2, r4
    c044:	800c      	strh	r4, [r1, #0]
                fill_area2.x2 = coords_bg.x2;
    c046:	808b      	strh	r3, [r1, #4]
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    c048:	4642      	mov	r2, r8
    c04a:	1a9b      	subs	r3, r3, r2
    c04c:	3301      	adds	r3, #1
    c04e:	464a      	mov	r2, r9
    c050:	2110      	movs	r1, #16
    c052:	5e52      	ldrsh	r2, [r2, r1]
    c054:	a90e      	add	r1, sp, #56	; 0x38
    c056:	2038      	movs	r0, #56	; 0x38
    c058:	5e09      	ldrsh	r1, [r1, r0]
    c05a:	1852      	adds	r2, r2, r1
    c05c:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
    c05e:	43da      	mvns	r2, r3
    c060:	17d2      	asrs	r2, r2, #31
    c062:	4013      	ands	r3, r2
    c064:	9a06      	ldr	r2, [sp, #24]
    c066:	4694      	mov	ip, r2
    c068:	4463      	add	r3, ip
    c06a:	7b72      	ldrb	r2, [r6, #13]
    c06c:	9202      	str	r2, [sp, #8]
    c06e:	465a      	mov	r2, fp
    c070:	9201      	str	r2, [sp, #4]
    c072:	9a05      	ldr	r2, [sp, #20]
    c074:	9200      	str	r2, [sp, #0]
    c076:	466a      	mov	r2, sp
    c078:	8c12      	ldrh	r2, [r2, #32]
    c07a:	a922      	add	r1, sp, #136	; 0x88
    c07c:	9804      	ldr	r0, [sp, #16]
    c07e:	4c67      	ldr	r4, [pc, #412]	; (c21c <lv_draw_rect+0x16c0>)
    c080:	47a0      	blx	r4
    c082:	e6dc      	b.n	be3e <lv_draw_rect+0x12e2>
    if(i >= max) return dsc->bg_grad_color;
    c084:	7931      	ldrb	r1, [r6, #4]
    c086:	06c9      	lsls	r1, r1, #27
    c088:	0ec8      	lsrs	r0, r1, #27
    c08a:	88b3      	ldrh	r3, [r6, #4]
    c08c:	055b      	lsls	r3, r3, #21
    c08e:	0e9b      	lsrs	r3, r3, #26
    c090:	7972      	ldrb	r2, [r6, #5]
    c092:	08d2      	lsrs	r2, r2, #3
    c094:	e78a      	b.n	bfac <lv_draw_rect+0x1450>
                    fill_area2.x1 = coords_bg.x1 + rout;
    c096:	a922      	add	r1, sp, #136	; 0x88
    c098:	aa1a      	add	r2, sp, #104	; 0x68
    c09a:	8813      	ldrh	r3, [r2, #0]
    c09c:	18e3      	adds	r3, r4, r3
    c09e:	800b      	strh	r3, [r1, #0]
                    fill_area2.x2 = coords_bg.x2 - rout;
    c0a0:	8893      	ldrh	r3, [r2, #4]
    c0a2:	1b1b      	subs	r3, r3, r4
    c0a4:	808b      	strh	r3, [r1, #4]
                    _lv_blend_fill(clip, &fill_area2,
    c0a6:	7b73      	ldrb	r3, [r6, #13]
    c0a8:	9302      	str	r3, [sp, #8]
    c0aa:	465b      	mov	r3, fp
    c0ac:	9301      	str	r3, [sp, #4]
    c0ae:	2301      	movs	r3, #1
    c0b0:	9300      	str	r3, [sp, #0]
    c0b2:	2300      	movs	r3, #0
    c0b4:	466a      	mov	r2, sp
    c0b6:	8c12      	ldrh	r2, [r2, #32]
    c0b8:	9804      	ldr	r0, [sp, #16]
    c0ba:	4f58      	ldr	r7, [pc, #352]	; (c21c <lv_draw_rect+0x16c0>)
    c0bc:	47b8      	blx	r7
    c0be:	e7bb      	b.n	c038 <lv_draw_rect+0x14dc>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa, dsc->bg_blend_mode);
    c0c0:	7b73      	ldrb	r3, [r6, #13]
    c0c2:	9302      	str	r3, [sp, #8]
    c0c4:	465b      	mov	r3, fp
    c0c6:	9301      	str	r3, [sp, #4]
    c0c8:	9b05      	ldr	r3, [sp, #20]
    c0ca:	9300      	str	r3, [sp, #0]
    c0cc:	9b06      	ldr	r3, [sp, #24]
    c0ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c0d0:	a91e      	add	r1, sp, #120	; 0x78
    c0d2:	9804      	ldr	r0, [sp, #16]
    c0d4:	4c52      	ldr	r4, [pc, #328]	; (c220 <lv_draw_rect+0x16c4>)
    c0d6:	47a0      	blx	r4
    c0d8:	e6b1      	b.n	be3e <lv_draw_rect+0x12e2>
    c0da:	46da      	mov	sl, fp
    c0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0de:	4699      	mov	r9, r3
    c0e0:	46b3      	mov	fp, r6
        if(dsc->bg_grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
    c0e2:	465b      	mov	r3, fp
    c0e4:	799b      	ldrb	r3, [r3, #6]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d105      	bne.n	c0f6 <lv_draw_rect+0x159a>
    c0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	d102      	bne.n	c0f6 <lv_draw_rect+0x159a>
    c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0f2:	2b32      	cmp	r3, #50	; 0x32
    c0f4:	dc0c      	bgt.n	c110 <lv_draw_rect+0x15b4>
        if(grad_map) _lv_mem_buf_release(grad_map);
    c0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0f8:	2b00      	cmp	r3, #0
    c0fa:	d002      	beq.n	c102 <lv_draw_rect+0x15a6>
    c0fc:	0018      	movs	r0, r3
    c0fe:	4b49      	ldr	r3, [pc, #292]	; (c224 <lv_draw_rect+0x16c8>)
    c100:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
    c102:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c104:	4b48      	ldr	r3, [pc, #288]	; (c228 <lv_draw_rect+0x16cc>)
    c106:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    c108:	9806      	ldr	r0, [sp, #24]
    c10a:	4b46      	ldr	r3, [pc, #280]	; (c224 <lv_draw_rect+0x16c8>)
    c10c:	4798      	blx	r3
    c10e:	e46f      	b.n	b9f0 <lv_draw_rect+0xe94>
            fill_area.x1 = coords_bg.x1 + rout;
    c110:	4643      	mov	r3, r8
    c112:	466a      	mov	r2, sp
    c114:	8293      	strh	r3, [r2, #20]
    c116:	8a96      	ldrh	r6, [r2, #20]
    c118:	ac1e      	add	r4, sp, #120	; 0x78
    c11a:	ad1a      	add	r5, sp, #104	; 0x68
    c11c:	882b      	ldrh	r3, [r5, #0]
    c11e:	18f3      	adds	r3, r6, r3
    c120:	8023      	strh	r3, [r4, #0]
            fill_area.x2 = coords_bg.x2 - rout;
    c122:	88ab      	ldrh	r3, [r5, #4]
    c124:	1b9b      	subs	r3, r3, r6
    c126:	80a3      	strh	r3, [r4, #4]
            fill_area.y1 = coords_bg.y1;
    c128:	2202      	movs	r2, #2
    c12a:	5eab      	ldrsh	r3, [r5, r2]
    c12c:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y1 + rout;
    c12e:	18f3      	adds	r3, r6, r3
    c130:	80e3      	strh	r3, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
    c132:	465b      	mov	r3, fp
    c134:	885a      	ldrh	r2, [r3, #2]
    c136:	7b5b      	ldrb	r3, [r3, #13]
    c138:	9302      	str	r3, [sp, #8]
    c13a:	4653      	mov	r3, sl
    c13c:	9301      	str	r3, [sp, #4]
    c13e:	2301      	movs	r3, #1
    c140:	9300      	str	r3, [sp, #0]
    c142:	2300      	movs	r3, #0
    c144:	0021      	movs	r1, r4
    c146:	9804      	ldr	r0, [sp, #16]
    c148:	4f34      	ldr	r7, [pc, #208]	; (c21c <lv_draw_rect+0x16c0>)
    c14a:	47b8      	blx	r7
            fill_area.y1 = coords_bg.y2 - rout;
    c14c:	2306      	movs	r3, #6
    c14e:	5ee9      	ldrsh	r1, [r5, r3]
    c150:	1b8a      	subs	r2, r1, r6
    c152:	b212      	sxth	r2, r2
    c154:	8062      	strh	r2, [r4, #2]
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
    c156:	2006      	movs	r0, #6
    c158:	5e23      	ldrsh	r3, [r4, r0]
    c15a:	429a      	cmp	r2, r3
    c15c:	dc02      	bgt.n	c164 <lv_draw_rect+0x1608>
    c15e:	3301      	adds	r3, #1
    c160:	aa1e      	add	r2, sp, #120	; 0x78
    c162:	8053      	strh	r3, [r2, #2]
            fill_area.y2 = coords_bg.y2;
    c164:	ac1e      	add	r4, sp, #120	; 0x78
    c166:	80e1      	strh	r1, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
    c168:	465b      	mov	r3, fp
    c16a:	885a      	ldrh	r2, [r3, #2]
    c16c:	7b5b      	ldrb	r3, [r3, #13]
    c16e:	9302      	str	r3, [sp, #8]
    c170:	4653      	mov	r3, sl
    c172:	9301      	str	r3, [sp, #4]
    c174:	2701      	movs	r7, #1
    c176:	9700      	str	r7, [sp, #0]
    c178:	2300      	movs	r3, #0
    c17a:	0021      	movs	r1, r4
    c17c:	9804      	ldr	r0, [sp, #16]
    c17e:	4d27      	ldr	r5, [pc, #156]	; (c21c <lv_draw_rect+0x16c0>)
    c180:	47a8      	blx	r5
            fill_area.x1 = coords_bg.x1;
    c182:	aa1a      	add	r2, sp, #104	; 0x68
    c184:	8813      	ldrh	r3, [r2, #0]
    c186:	8023      	strh	r3, [r4, #0]
            fill_area.x2 = coords_bg.x2;
    c188:	8893      	ldrh	r3, [r2, #4]
    c18a:	80a3      	strh	r3, [r4, #4]
            fill_area.y1 = coords_bg.y1 + rout + 1;
    c18c:	8853      	ldrh	r3, [r2, #2]
    c18e:	3301      	adds	r3, #1
    c190:	18f3      	adds	r3, r6, r3
    c192:	8063      	strh	r3, [r4, #2]
            fill_area.y2 = coords_bg.y2 - rout - 1;
    c194:	88d3      	ldrh	r3, [r2, #6]
    c196:	3b01      	subs	r3, #1
    c198:	1b9e      	subs	r6, r3, r6
    c19a:	80e6      	strh	r6, [r4, #6]
            _lv_blend_fill(clip, &fill_area,
    c19c:	465b      	mov	r3, fp
    c19e:	885a      	ldrh	r2, [r3, #2]
    c1a0:	7b5b      	ldrb	r3, [r3, #13]
    c1a2:	9302      	str	r3, [sp, #8]
    c1a4:	4653      	mov	r3, sl
    c1a6:	9301      	str	r3, [sp, #4]
    c1a8:	9700      	str	r7, [sp, #0]
    c1aa:	2300      	movs	r3, #0
    c1ac:	0021      	movs	r1, r4
    c1ae:	9804      	ldr	r0, [sp, #16]
    c1b0:	47a8      	blx	r5
    c1b2:	e7a0      	b.n	c0f6 <lv_draw_rect+0x159a>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
    c1b4:	4b1d      	ldr	r3, [pc, #116]	; (c22c <lv_draw_rect+0x16d0>)
    c1b6:	4798      	blx	r3
    c1b8:	0007      	movs	r7, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
    c1ba:	2801      	cmp	r0, #1
    c1bc:	d909      	bls.n	c1d2 <lv_draw_rect+0x1676>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    c1be:	2802      	cmp	r0, #2
    c1c0:	d03c      	beq.n	c23c <lv_draw_rect+0x16e0>
        lv_draw_img(coords, clip, NULL, NULL);
    c1c2:	2300      	movs	r3, #0
    c1c4:	2200      	movs	r2, #0
    c1c6:	9904      	ldr	r1, [sp, #16]
    c1c8:	4648      	mov	r0, r9
    c1ca:	4c19      	ldr	r4, [pc, #100]	; (c230 <lv_draw_rect+0x16d4>)
    c1cc:	47a0      	blx	r4
    c1ce:	f7ff fc1a 	bl	ba06 <lv_draw_rect+0xeaa>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
    c1d2:	a929      	add	r1, sp, #164	; 0xa4
    c1d4:	465b      	mov	r3, fp
    c1d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    c1d8:	4b16      	ldr	r3, [pc, #88]	; (c234 <lv_draw_rect+0x16d8>)
    c1da:	4798      	blx	r3
        if(res != LV_RES_OK) {
    c1dc:	2801      	cmp	r0, #1
    c1de:	d001      	beq.n	c1e4 <lv_draw_rect+0x1688>
    c1e0:	f7ff fc11 	bl	ba06 <lv_draw_rect+0xeaa>
        img_w = header.w;
    c1e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    c1e6:	02dd      	lsls	r5, r3, #11
    c1e8:	0d6d      	lsrs	r5, r5, #21
        img_h = header.h;
    c1ea:	236e      	movs	r3, #110	; 0x6e
    c1ec:	aa0e      	add	r2, sp, #56	; 0x38
    c1ee:	4694      	mov	ip, r2
    c1f0:	4463      	add	r3, ip
    c1f2:	881e      	ldrh	r6, [r3, #0]
    c1f4:	0976      	lsrs	r6, r6, #5
        lv_draw_img_dsc_init(&img_dsc);
    c1f6:	ac1e      	add	r4, sp, #120	; 0x78
    c1f8:	0020      	movs	r0, r4
    c1fa:	4b0f      	ldr	r3, [pc, #60]	; (c238 <lv_draw_rect+0x16dc>)
    c1fc:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
    c1fe:	2336      	movs	r3, #54	; 0x36
    c200:	465a      	mov	r2, fp
    c202:	5cd3      	ldrb	r3, [r2, r3]
    c204:	7023      	strb	r3, [r4, #0]
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
    c206:	2337      	movs	r3, #55	; 0x37
    c208:	5cd3      	ldrb	r3, [r2, r3]
    c20a:	72a3      	strb	r3, [r4, #10]
        img_dsc.recolor = dsc->pattern_recolor;
    c20c:	8e93      	ldrh	r3, [r2, #52]	; 0x34
    c20e:	81a3      	strh	r3, [r4, #12]
    c210:	e037      	b.n	c282 <lv_draw_rect+0x1726>
    c212:	46c0      	nop			; (mov r8, r8)
    c214:	00017a75 	.word	0x00017a75
    c218:	fffff81f 	.word	0xfffff81f
    c21c:	00005c05 	.word	0x00005c05
    c220:	000068e9 	.word	0x000068e9
    c224:	00010b6d 	.word	0x00010b6d
    c228:	0000a611 	.word	0x0000a611
    c22c:	000080f9 	.word	0x000080f9
    c230:	00007ed9 	.word	0x00007ed9
    c234:	0000e4e1 	.word	0x0000e4e1
    c238:	00007e45 	.word	0x00007e45
        lv_draw_label_dsc_init(&label_dsc);
    c23c:	ac22      	add	r4, sp, #136	; 0x88
    c23e:	0020      	movs	r0, r4
    c240:	4b87      	ldr	r3, [pc, #540]	; (c460 <lv_draw_rect+0x1904>)
    c242:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
    c244:	465b      	mov	r3, fp
    c246:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    c248:	8023      	strh	r3, [r4, #0]
        label_dsc.font = dsc->pattern_font;
    c24a:	465b      	mov	r3, fp
    c24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c24e:	6063      	str	r3, [r4, #4]
        label_dsc.opa = dsc->pattern_opa;
    c250:	2336      	movs	r3, #54	; 0x36
    c252:	465a      	mov	r2, fp
    c254:	5cd3      	ldrb	r3, [r2, r3]
    c256:	7223      	strb	r3, [r4, #8]
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
    c258:	220c      	movs	r2, #12
    c25a:	5ea3      	ldrsh	r3, [r4, r2]
    c25c:	ae29      	add	r6, sp, #164	; 0xa4
    c25e:	2200      	movs	r2, #0
    c260:	9202      	str	r2, [sp, #8]
    c262:	4a80      	ldr	r2, [pc, #512]	; (c464 <lv_draw_rect+0x1908>)
    c264:	9201      	str	r2, [sp, #4]
    c266:	210a      	movs	r1, #10
    c268:	5e62      	ldrsh	r2, [r4, r1]
    c26a:	9200      	str	r2, [sp, #0]
    c26c:	465a      	mov	r2, fp
    c26e:	6b12      	ldr	r2, [r2, #48]	; 0x30
    c270:	4659      	mov	r1, fp
    c272:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c274:	0030      	movs	r0, r6
    c276:	4c7c      	ldr	r4, [pc, #496]	; (c468 <lv_draw_rect+0x190c>)
    c278:	47a0      	blx	r4
        img_w = s.x;
    c27a:	2300      	movs	r3, #0
    c27c:	5ef5      	ldrsh	r5, [r6, r3]
        img_h = s.y;
    c27e:	2302      	movs	r3, #2
    c280:	5ef6      	ldrsh	r6, [r6, r3]
    if(dsc->pattern_repeat) {
    c282:	2338      	movs	r3, #56	; 0x38
    c284:	465a      	mov	r2, fp
    c286:	5cd3      	ldrb	r3, [r2, r3]
    c288:	07db      	lsls	r3, r3, #31
    c28a:	d43d      	bmi.n	c308 <lv_draw_rect+0x17ac>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c28c:	464b      	mov	r3, r9
    c28e:	8818      	ldrh	r0, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c290:	8859      	ldrh	r1, [r3, #2]
    c292:	88db      	ldrh	r3, [r3, #6]
    c294:	3301      	adds	r3, #1
    c296:	1a5b      	subs	r3, r3, r1
        int32_t obj_h = lv_area_get_height(coords);
    c298:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c29a:	464a      	mov	r2, r9
    c29c:	8892      	ldrh	r2, [r2, #4]
    c29e:	3201      	adds	r2, #1
    c2a0:	1a12      	subs	r2, r2, r0
        int32_t obj_w = lv_area_get_width(coords);
    c2a2:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
    c2a4:	1b52      	subs	r2, r2, r5
    c2a6:	0fd4      	lsrs	r4, r2, #31
    c2a8:	18a2      	adds	r2, r4, r2
    c2aa:	1052      	asrs	r2, r2, #1
    c2ac:	1880      	adds	r0, r0, r2
    c2ae:	b280      	uxth	r0, r0
    c2b0:	aa1c      	add	r2, sp, #112	; 0x70
    c2b2:	8010      	strh	r0, [r2, #0]
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
    c2b4:	1b9c      	subs	r4, r3, r6
    c2b6:	0fe3      	lsrs	r3, r4, #31
    c2b8:	191b      	adds	r3, r3, r4
    c2ba:	105b      	asrs	r3, r3, #1
    c2bc:	18c9      	adds	r1, r1, r3
    c2be:	b289      	uxth	r1, r1
    c2c0:	8051      	strh	r1, [r2, #2]
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    c2c2:	3d01      	subs	r5, #1
    c2c4:	1945      	adds	r5, r0, r5
    c2c6:	8095      	strh	r5, [r2, #4]
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    c2c8:	1e73      	subs	r3, r6, #1
    c2ca:	18cb      	adds	r3, r1, r3
    c2cc:	b29b      	uxth	r3, r3
    c2ce:	80d3      	strh	r3, [r2, #6]
        if(src_type == LV_IMG_SRC_SYMBOL) {
    c2d0:	2f02      	cmp	r7, #2
    c2d2:	d100      	bne.n	c2d6 <lv_draw_rect+0x177a>
    c2d4:	e09a      	b.n	c40c <lv_draw_rect+0x18b0>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    c2d6:	465b      	mov	r3, fp
    c2d8:	2200      	movs	r2, #0
    c2da:	5e9a      	ldrsh	r2, [r3, r2]
    c2dc:	4649      	mov	r1, r9
    c2de:	a81c      	add	r0, sp, #112	; 0x70
    c2e0:	4b62      	ldr	r3, [pc, #392]	; (c46c <lv_draw_rect+0x1910>)
    c2e2:	4798      	blx	r3
        int16_t radius_mask_id = LV_MASK_ID_INV;
    c2e4:	2401      	movs	r4, #1
    c2e6:	4264      	negs	r4, r4
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    c2e8:	2800      	cmp	r0, #0
    c2ea:	d101      	bne.n	c2f0 <lv_draw_rect+0x1794>
    c2ec:	f000 feab 	bl	d046 <lv_draw_rect+0x24ea>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    c2f0:	ab1e      	add	r3, sp, #120	; 0x78
    c2f2:	465a      	mov	r2, fp
    c2f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c2f6:	9904      	ldr	r1, [sp, #16]
    c2f8:	a81c      	add	r0, sp, #112	; 0x70
    c2fa:	4d5d      	ldr	r5, [pc, #372]	; (c470 <lv_draw_rect+0x1914>)
    c2fc:	47a8      	blx	r5
        lv_draw_mask_remove_id(radius_mask_id);
    c2fe:	0020      	movs	r0, r4
    c300:	4b5c      	ldr	r3, [pc, #368]	; (c474 <lv_draw_rect+0x1918>)
    c302:	4798      	blx	r3
    c304:	f7ff fb7f 	bl	ba06 <lv_draw_rect+0xeaa>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    c308:	465b      	mov	r3, fp
    c30a:	2200      	movs	r2, #0
    c30c:	5e9a      	ldrsh	r2, [r3, r2]
    c30e:	2300      	movs	r3, #0
    c310:	4649      	mov	r1, r9
    c312:	a829      	add	r0, sp, #164	; 0xa4
    c314:	4c58      	ldr	r4, [pc, #352]	; (c478 <lv_draw_rect+0x191c>)
    c316:	47a0      	blx	r4
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    c318:	2100      	movs	r1, #0
    c31a:	a829      	add	r0, sp, #164	; 0xa4
    c31c:	4b57      	ldr	r3, [pc, #348]	; (c47c <lv_draw_rect+0x1920>)
    c31e:	4798      	blx	r3
    c320:	9007      	str	r0, [sp, #28]
    c322:	464b      	mov	r3, r9
    c324:	8898      	ldrh	r0, [r3, #4]
    c326:	3001      	adds	r0, #1
    c328:	881b      	ldrh	r3, [r3, #0]
    c32a:	1ac0      	subs	r0, r0, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
    c32c:	b200      	sxth	r0, r0
    c32e:	4b54      	ldr	r3, [pc, #336]	; (c480 <lv_draw_rect+0x1924>)
    c330:	4698      	mov	r8, r3
    c332:	0029      	movs	r1, r5
    c334:	4798      	blx	r3
    c336:	0fcb      	lsrs	r3, r1, #31
    c338:	1859      	adds	r1, r3, r1
    c33a:	104b      	asrs	r3, r1, #1
    c33c:	9306      	str	r3, [sp, #24]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c33e:	464b      	mov	r3, r9
    c340:	2206      	movs	r2, #6
    c342:	5e9b      	ldrsh	r3, [r3, r2]
    c344:	469a      	mov	sl, r3
    c346:	464b      	mov	r3, r9
    c348:	885c      	ldrh	r4, [r3, #2]
    c34a:	4653      	mov	r3, sl
    c34c:	1c58      	adds	r0, r3, #1
    c34e:	1b00      	subs	r0, r0, r4
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
    c350:	b200      	sxth	r0, r0
    c352:	0031      	movs	r1, r6
    c354:	47c0      	blx	r8
    c356:	0fcb      	lsrs	r3, r1, #31
    c358:	185b      	adds	r3, r3, r1
    c35a:	105b      	asrs	r3, r3, #1
        coords_tmp.y1 = coords->y1 - ofs_y;
    c35c:	1ae4      	subs	r4, r4, r3
    c35e:	b2a4      	uxth	r4, r4
    c360:	b223      	sxth	r3, r4
    c362:	aa1c      	add	r2, sp, #112	; 0x70
    c364:	8053      	strh	r3, [r2, #2]
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    c366:	b2b1      	uxth	r1, r6
    c368:	4688      	mov	r8, r1
    c36a:	3901      	subs	r1, #1
    c36c:	1864      	adds	r4, r4, r1
    c36e:	80d4      	strh	r4, [r2, #6]
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    c370:	459a      	cmp	sl, r3
    c372:	db46      	blt.n	c402 <lv_draw_rect+0x18a6>
            coords_tmp.x1 = coords->x1 - ofs_x;
    c374:	0014      	movs	r4, r2
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    c376:	b2ad      	uxth	r5, r5
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    c378:	4b42      	ldr	r3, [pc, #264]	; (c484 <lv_draw_rect+0x1928>)
    c37a:	469a      	mov	sl, r3
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    c37c:	4e3c      	ldr	r6, [pc, #240]	; (c470 <lv_draw_rect+0x1914>)
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    c37e:	9205      	str	r2, [sp, #20]
    c380:	464b      	mov	r3, r9
    c382:	46b9      	mov	r9, r7
    c384:	001f      	movs	r7, r3
    c386:	e02a      	b.n	c3de <lv_draw_rect+0x1882>
    c388:	2300      	movs	r3, #0
    c38a:	9300      	str	r3, [sp, #0]
    c38c:	465b      	mov	r3, fp
    c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c390:	aa22      	add	r2, sp, #136	; 0x88
    c392:	9904      	ldr	r1, [sp, #16]
    c394:	9805      	ldr	r0, [sp, #20]
    c396:	47d0      	blx	sl
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    c398:	8823      	ldrh	r3, [r4, #0]
    c39a:	18eb      	adds	r3, r5, r3
    c39c:	b21b      	sxth	r3, r3
    c39e:	8023      	strh	r3, [r4, #0]
    c3a0:	88a2      	ldrh	r2, [r4, #4]
    c3a2:	18aa      	adds	r2, r5, r2
    c3a4:	80a2      	strh	r2, [r4, #4]
    c3a6:	464a      	mov	r2, r9
    c3a8:	2104      	movs	r1, #4
    c3aa:	5e52      	ldrsh	r2, [r2, r1]
    c3ac:	429a      	cmp	r2, r3
    c3ae:	db08      	blt.n	c3c2 <lv_draw_rect+0x1866>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    c3b0:	2f02      	cmp	r7, #2
    c3b2:	d0e9      	beq.n	c388 <lv_draw_rect+0x182c>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    c3b4:	ab1e      	add	r3, sp, #120	; 0x78
    c3b6:	465a      	mov	r2, fp
    c3b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c3ba:	9904      	ldr	r1, [sp, #16]
    c3bc:	9805      	ldr	r0, [sp, #20]
    c3be:	47b0      	blx	r6
    c3c0:	e7ea      	b.n	c398 <lv_draw_rect+0x183c>
    c3c2:	464b      	mov	r3, r9
    c3c4:	46b9      	mov	r9, r7
    c3c6:	001f      	movs	r7, r3
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    c3c8:	8863      	ldrh	r3, [r4, #2]
    c3ca:	4443      	add	r3, r8
    c3cc:	b21b      	sxth	r3, r3
    c3ce:	8063      	strh	r3, [r4, #2]
    c3d0:	88e2      	ldrh	r2, [r4, #6]
    c3d2:	4442      	add	r2, r8
    c3d4:	80e2      	strh	r2, [r4, #6]
    c3d6:	2106      	movs	r1, #6
    c3d8:	5e7a      	ldrsh	r2, [r7, r1]
    c3da:	429a      	cmp	r2, r3
    c3dc:	db10      	blt.n	c400 <lv_draw_rect+0x18a4>
            coords_tmp.x1 = coords->x1 - ofs_x;
    c3de:	883b      	ldrh	r3, [r7, #0]
    c3e0:	9a06      	ldr	r2, [sp, #24]
    c3e2:	1a9b      	subs	r3, r3, r2
    c3e4:	b29b      	uxth	r3, r3
    c3e6:	b21a      	sxth	r2, r3
    c3e8:	8022      	strh	r2, [r4, #0]
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    c3ea:	1e69      	subs	r1, r5, #1
    c3ec:	185b      	adds	r3, r3, r1
    c3ee:	80a3      	strh	r3, [r4, #4]
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    c3f0:	2104      	movs	r1, #4
    c3f2:	5e7b      	ldrsh	r3, [r7, r1]
    c3f4:	4293      	cmp	r3, r2
    c3f6:	dbe7      	blt.n	c3c8 <lv_draw_rect+0x186c>
    c3f8:	003b      	movs	r3, r7
    c3fa:	464f      	mov	r7, r9
    c3fc:	4699      	mov	r9, r3
    c3fe:	e7d7      	b.n	c3b0 <lv_draw_rect+0x1854>
    c400:	46b9      	mov	r9, r7
        lv_draw_mask_remove_id(radius_mask_id);
    c402:	9807      	ldr	r0, [sp, #28]
    c404:	4b1b      	ldr	r3, [pc, #108]	; (c474 <lv_draw_rect+0x1918>)
    c406:	4798      	blx	r3
    c408:	f7ff fafd 	bl	ba06 <lv_draw_rect+0xeaa>
            coords_tmp.y1 += y_corr;
    c40c:	2201      	movs	r2, #1
    c40e:	4014      	ands	r4, r2
    c410:	a81c      	add	r0, sp, #112	; 0x70
    c412:	1909      	adds	r1, r1, r4
    c414:	8041      	strh	r1, [r0, #2]
            coords_tmp.y2 += y_corr;
    c416:	191b      	adds	r3, r3, r4
    c418:	80c3      	strh	r3, [r0, #6]
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    c41a:	465b      	mov	r3, fp
    c41c:	2200      	movs	r2, #0
    c41e:	5e9a      	ldrsh	r2, [r3, r2]
    c420:	4649      	mov	r1, r9
    c422:	4b12      	ldr	r3, [pc, #72]	; (c46c <lv_draw_rect+0x1910>)
    c424:	4798      	blx	r3
    c426:	2800      	cmp	r0, #0
    c428:	d116      	bne.n	c458 <lv_draw_rect+0x18fc>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    c42a:	465b      	mov	r3, fp
    c42c:	2200      	movs	r2, #0
    c42e:	5e9a      	ldrsh	r2, [r3, r2]
    c430:	2300      	movs	r3, #0
    c432:	4649      	mov	r1, r9
    c434:	a829      	add	r0, sp, #164	; 0xa4
    c436:	4c10      	ldr	r4, [pc, #64]	; (c478 <lv_draw_rect+0x191c>)
    c438:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    c43a:	2100      	movs	r1, #0
    c43c:	a829      	add	r0, sp, #164	; 0xa4
    c43e:	4b0f      	ldr	r3, [pc, #60]	; (c47c <lv_draw_rect+0x1920>)
    c440:	4798      	blx	r3
    c442:	0004      	movs	r4, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    c444:	2300      	movs	r3, #0
    c446:	9300      	str	r3, [sp, #0]
    c448:	465b      	mov	r3, fp
    c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c44c:	aa22      	add	r2, sp, #136	; 0x88
    c44e:	9904      	ldr	r1, [sp, #16]
    c450:	a81c      	add	r0, sp, #112	; 0x70
    c452:	4d0c      	ldr	r5, [pc, #48]	; (c484 <lv_draw_rect+0x1928>)
    c454:	47a8      	blx	r5
    c456:	e752      	b.n	c2fe <lv_draw_rect+0x17a2>
        int16_t radius_mask_id = LV_MASK_ID_INV;
    c458:	2401      	movs	r4, #1
    c45a:	4264      	negs	r4, r4
    c45c:	e7f2      	b.n	c444 <lv_draw_rect+0x18e8>
    c45e:	46c0      	nop			; (mov r8, r8)
    c460:	0000815d 	.word	0x0000815d
    c464:	00007c18 	.word	0x00007c18
    c468:	00011a7d 	.word	0x00011a7d
    c46c:	0000fe35 	.word	0x0000fe35
    c470:	00007ed9 	.word	0x00007ed9
    c474:	0000a611 	.word	0x0000a611
    c478:	0000a7ed 	.word	0x0000a7ed
    c47c:	0000a585 	.word	0x0000a585
    c480:	00017c41 	.word	0x00017c41
    c484:	000081ad 	.word	0x000081ad
    draw_area.x1 -= disp_area->x1;
    c488:	8a38      	ldrh	r0, [r7, #16]
    c48a:	aa18      	add	r2, sp, #96	; 0x60
    c48c:	8811      	ldrh	r1, [r2, #0]
    c48e:	1a09      	subs	r1, r1, r0
    c490:	b289      	uxth	r1, r1
    c492:	8011      	strh	r1, [r2, #0]
    draw_area.y1 -= disp_area->y1;
    c494:	8a7d      	ldrh	r5, [r7, #18]
    c496:	8854      	ldrh	r4, [r2, #2]
    c498:	1b64      	subs	r4, r4, r5
    c49a:	8054      	strh	r4, [r2, #2]
    draw_area.x2 -= disp_area->x1;
    c49c:	8893      	ldrh	r3, [r2, #4]
    c49e:	1a1b      	subs	r3, r3, r0
    c4a0:	b29b      	uxth	r3, r3
    c4a2:	8093      	strh	r3, [r2, #4]
    draw_area.y2 -= disp_area->y1;
    c4a4:	88d0      	ldrh	r0, [r2, #6]
    c4a6:	1b40      	subs	r0, r0, r5
    c4a8:	80d0      	strh	r0, [r2, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c4aa:	3301      	adds	r3, #1
    c4ac:	1a5b      	subs	r3, r3, r1
    c4ae:	b21b      	sxth	r3, r3
    c4b0:	930a      	str	r3, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    c4b2:	930b      	str	r3, [sp, #44]	; 0x2c
    c4b4:	0018      	movs	r0, r3
    c4b6:	4bb8      	ldr	r3, [pc, #736]	; (c798 <lv_draw_rect+0x1c3c>)
    c4b8:	4798      	blx	r3
    c4ba:	9005      	str	r0, [sp, #20]
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    c4bc:	4bb7      	ldr	r3, [pc, #732]	; (c79c <lv_draw_rect+0x1c40>)
    c4be:	4798      	blx	r3
    if(other_mask_cnt) simple_mode = false;
    c4c0:	2500      	movs	r5, #0
    c4c2:	2800      	cmp	r0, #0
    c4c4:	d106      	bne.n	c4d4 <lv_draw_rect+0x1978>
    else if(dsc->border_side != LV_BORDER_SIDE_FULL) simple_mode = false;
    c4c6:	465b      	mov	r3, fp
    c4c8:	2512      	movs	r5, #18
    c4ca:	5f5d      	ldrsh	r5, [r3, r5]
    c4cc:	3d0f      	subs	r5, #15
    c4ce:	426a      	negs	r2, r5
    c4d0:	416a      	adcs	r2, r5
    c4d2:	b2d5      	uxtb	r5, r2
    int32_t rout = dsc->radius;
    c4d4:	465b      	mov	r3, fp
    c4d6:	2100      	movs	r1, #0
    c4d8:	5e59      	ldrsh	r1, [r3, r1]
    c4da:	464b      	mov	r3, r9
    c4dc:	889b      	ldrh	r3, [r3, #4]
    c4de:	3301      	adds	r3, #1
    c4e0:	464a      	mov	r2, r9
    c4e2:	8812      	ldrh	r2, [r2, #0]
    c4e4:	1a9b      	subs	r3, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c4e6:	464a      	mov	r2, r9
    c4e8:	88d2      	ldrh	r2, [r2, #6]
    c4ea:	3201      	adds	r2, #1
    c4ec:	4648      	mov	r0, r9
    c4ee:	8840      	ldrh	r0, [r0, #2]
    c4f0:	1a12      	subs	r2, r2, r0
    int32_t coords_h = lv_area_get_height(coords);
    c4f2:	b212      	sxth	r2, r2
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    c4f4:	b21b      	sxth	r3, r3
    c4f6:	4293      	cmp	r3, r2
    c4f8:	dd00      	ble.n	c4fc <lv_draw_rect+0x19a0>
    c4fa:	0013      	movs	r3, r2
    if(rout > short_side >> 1) rout = short_side >> 1;
    c4fc:	105b      	asrs	r3, r3, #1
    c4fe:	9309      	str	r3, [sp, #36]	; 0x24
    c500:	428b      	cmp	r3, r1
    c502:	dd00      	ble.n	c506 <lv_draw_rect+0x19aa>
    c504:	9109      	str	r1, [sp, #36]	; 0x24
    if(rout > 0) {
    c506:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c508:	2b00      	cmp	r3, #0
    c50a:	dc00      	bgt.n	c50e <lv_draw_rect+0x19b2>
    c50c:	e084      	b.n	c618 <lv_draw_rect+0x1abc>
        lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
    c50e:	b21a      	sxth	r2, r3
    c510:	2300      	movs	r3, #0
    c512:	4649      	mov	r1, r9
    c514:	a822      	add	r0, sp, #136	; 0x88
    c516:	4ca2      	ldr	r4, [pc, #648]	; (c7a0 <lv_draw_rect+0x1c44>)
    c518:	47a0      	blx	r4
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    c51a:	2100      	movs	r1, #0
    c51c:	a822      	add	r0, sp, #136	; 0x88
    c51e:	4ba1      	ldr	r3, [pc, #644]	; (c7a4 <lv_draw_rect+0x1c48>)
    c520:	4798      	blx	r3
    c522:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t rin = rout - dsc->border_width;
    c524:	465b      	mov	r3, fp
    c526:	2010      	movs	r0, #16
    c528:	5e18      	ldrsh	r0, [r3, r0]
    c52a:	2300      	movs	r3, #0
        *d8 = *s8;
    c52c:	a91a      	add	r1, sp, #104	; 0x68
    c52e:	464c      	mov	r4, r9
    c530:	5ce2      	ldrb	r2, [r4, r3]
    c532:	545a      	strb	r2, [r3, r1]
    c534:	3301      	adds	r3, #1
    while(len) {
    c536:	2b08      	cmp	r3, #8
    c538:	d1fa      	bne.n	c530 <lv_draw_rect+0x19d4>
    c53a:	46a1      	mov	r9, r4
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    c53c:	ab1a      	add	r3, sp, #104	; 0x68
    c53e:	881a      	ldrh	r2, [r3, #0]
    c540:	465b      	mov	r3, fp
    c542:	8a5b      	ldrh	r3, [r3, #18]
    c544:	0759      	lsls	r1, r3, #29
    c546:	d56b      	bpl.n	c620 <lv_draw_rect+0x1ac4>
    c548:	b284      	uxth	r4, r0
    c54a:	a91a      	add	r1, sp, #104	; 0x68
    c54c:	1912      	adds	r2, r2, r4
    c54e:	800a      	strh	r2, [r1, #0]
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    c550:	888a      	ldrh	r2, [r1, #4]
    c552:	0719      	lsls	r1, r3, #28
    c554:	d569      	bpl.n	c62a <lv_draw_rect+0x1ace>
    c556:	b284      	uxth	r4, r0
    c558:	a91a      	add	r1, sp, #104	; 0x68
    c55a:	1b12      	subs	r2, r2, r4
    c55c:	808a      	strh	r2, [r1, #4]
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    c55e:	884a      	ldrh	r2, [r1, #2]
    c560:	0799      	lsls	r1, r3, #30
    c562:	d567      	bpl.n	c634 <lv_draw_rect+0x1ad8>
    c564:	b284      	uxth	r4, r0
    c566:	a91a      	add	r1, sp, #104	; 0x68
    c568:	1912      	adds	r2, r2, r4
    c56a:	804a      	strh	r2, [r1, #2]
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    c56c:	88ca      	ldrh	r2, [r1, #6]
    c56e:	07db      	lsls	r3, r3, #31
    c570:	d565      	bpl.n	c63e <lv_draw_rect+0x1ae2>
    c572:	b283      	uxth	r3, r0
    c574:	a91a      	add	r1, sp, #104	; 0x68
    c576:	1ad3      	subs	r3, r2, r3
    c578:	80cb      	strh	r3, [r1, #6]
    lv_draw_mask_radius_init(&mask_rin_param, &area_small, rout - dsc->border_width, true);
    c57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c57c:	4698      	mov	r8, r3
    c57e:	466a      	mov	r2, sp
    c580:	8313      	strh	r3, [r2, #24]
    c582:	8b13      	ldrh	r3, [r2, #24]
    c584:	469a      	mov	sl, r3
    c586:	1a1a      	subs	r2, r3, r0
    c588:	b212      	sxth	r2, r2
    c58a:	2301      	movs	r3, #1
    c58c:	a829      	add	r0, sp, #164	; 0xa4
    c58e:	4c84      	ldr	r4, [pc, #528]	; (c7a0 <lv_draw_rect+0x1c44>)
    c590:	47a0      	blx	r4
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    c592:	2100      	movs	r1, #0
    c594:	a829      	add	r0, sp, #164	; 0xa4
    c596:	4b83      	ldr	r3, [pc, #524]	; (c7a4 <lv_draw_rect+0x1c48>)
    c598:	4798      	blx	r3
    c59a:	9010      	str	r0, [sp, #64]	; 0x40
    int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
    c59c:	465b      	mov	r3, fp
    c59e:	2010      	movs	r0, #16
    c5a0:	5e1b      	ldrsh	r3, [r3, r0]
    c5a2:	3b01      	subs	r3, #1
    c5a4:	930d      	str	r3, [sp, #52]	; 0x34
    c5a6:	4641      	mov	r1, r8
    c5a8:	4543      	cmp	r3, r8
    c5aa:	da00      	bge.n	c5ae <lv_draw_rect+0x1a52>
    c5ac:	910d      	str	r1, [sp, #52]	; 0x34
    lv_color_t color = dsc->border_color;
    c5ae:	465b      	mov	r3, fp
    c5b0:	89db      	ldrh	r3, [r3, #14]
    c5b2:	9311      	str	r3, [sp, #68]	; 0x44
    c5b4:	466a      	mov	r2, sp
    c5b6:	8393      	strh	r3, [r2, #28]
    lv_blend_mode_t blend_mode = dsc->border_blend_mode;
    c5b8:	465b      	mov	r3, fp
    c5ba:	7d5b      	ldrb	r3, [r3, #21]
    c5bc:	9306      	str	r3, [sp, #24]
    if(simple_mode) {
    c5be:	2d00      	cmp	r5, #0
    c5c0:	d100      	bne.n	c5c4 <lv_draw_rect+0x1a68>
    c5c2:	e1bc      	b.n	c93e <lv_draw_rect+0x1de2>
        int32_t upper_corner_end = coords->y1 - disp_area->y1 + corner_size;
    c5c4:	2212      	movs	r2, #18
    c5c6:	5ebb      	ldrsh	r3, [r7, r2]
    c5c8:	464a      	mov	r2, r9
    c5ca:	2102      	movs	r1, #2
    c5cc:	5e52      	ldrsh	r2, [r2, r1]
    c5ce:	1ad2      	subs	r2, r2, r3
    c5d0:	990d      	ldr	r1, [sp, #52]	; 0x34
    c5d2:	468c      	mov	ip, r1
    c5d4:	4462      	add	r2, ip
        upper_corner_end = LV_MATH_MIN(upper_corner_end, draw_area.y2);
    c5d6:	a918      	add	r1, sp, #96	; 0x60
    c5d8:	2006      	movs	r0, #6
    c5da:	5e09      	ldrsh	r1, [r1, r0]
    c5dc:	910c      	str	r1, [sp, #48]	; 0x30
    c5de:	4291      	cmp	r1, r2
    c5e0:	dd00      	ble.n	c5e4 <lv_draw_rect+0x1a88>
    c5e2:	920c      	str	r2, [sp, #48]	; 0x30
        fill_area.x1 = coords->x1;
    c5e4:	aa1c      	add	r2, sp, #112	; 0x70
    c5e6:	4649      	mov	r1, r9
    c5e8:	8809      	ldrh	r1, [r1, #0]
    c5ea:	8011      	strh	r1, [r2, #0]
        fill_area.x2 = coords->x2;
    c5ec:	4649      	mov	r1, r9
    c5ee:	8889      	ldrh	r1, [r1, #4]
    c5f0:	8091      	strh	r1, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    c5f2:	a918      	add	r1, sp, #96	; 0x60
    c5f4:	2502      	movs	r5, #2
    c5f6:	5f4d      	ldrsh	r5, [r1, r5]
    c5f8:	195b      	adds	r3, r3, r5
    c5fa:	b21b      	sxth	r3, r3
    c5fc:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
    c5fe:	80d3      	strh	r3, [r2, #6]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    c600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c602:	42ab      	cmp	r3, r5
    c604:	da00      	bge.n	c608 <lv_draw_rect+0x1aac>
    c606:	e09f      	b.n	c748 <lv_draw_rect+0x1bec>
            fill_area2.y1 = fill_area.y1;
    c608:	ac1e      	add	r4, sp, #120	; 0x78
    c60a:	9508      	str	r5, [sp, #32]
    c60c:	464b      	mov	r3, r9
    c60e:	46b1      	mov	r9, r6
    c610:	465a      	mov	r2, fp
    c612:	920e      	str	r2, [sp, #56]	; 0x38
    c614:	001e      	movs	r6, r3
    c616:	e047      	b.n	c6a8 <lv_draw_rect+0x1b4c>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    c618:	2301      	movs	r3, #1
    c61a:	425b      	negs	r3, r3
    c61c:	930f      	str	r3, [sp, #60]	; 0x3c
    c61e:	e781      	b.n	c524 <lv_draw_rect+0x19c8>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    c620:	9909      	ldr	r1, [sp, #36]	; 0x24
    c622:	1844      	adds	r4, r0, r1
    c624:	4264      	negs	r4, r4
    c626:	b2a4      	uxth	r4, r4
    c628:	e78f      	b.n	c54a <lv_draw_rect+0x19ee>
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    c62a:	9909      	ldr	r1, [sp, #36]	; 0x24
    c62c:	1844      	adds	r4, r0, r1
    c62e:	4264      	negs	r4, r4
    c630:	b2a4      	uxth	r4, r4
    c632:	e791      	b.n	c558 <lv_draw_rect+0x19fc>
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    c634:	9909      	ldr	r1, [sp, #36]	; 0x24
    c636:	1844      	adds	r4, r0, r1
    c638:	4264      	negs	r4, r4
    c63a:	b2a4      	uxth	r4, r4
    c63c:	e793      	b.n	c566 <lv_draw_rect+0x1a0a>
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    c63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c640:	18c3      	adds	r3, r0, r3
    c642:	425b      	negs	r3, r3
    c644:	b29b      	uxth	r3, r3
    c646:	e795      	b.n	c574 <lv_draw_rect+0x1a18>
            fill_area2.x1 = coords->x2 - rout + 1;
    c648:	2204      	movs	r2, #4
    c64a:	5eb3      	ldrsh	r3, [r6, r2]
    c64c:	1c5a      	adds	r2, r3, #1
    c64e:	4651      	mov	r1, sl
    c650:	1a52      	subs	r2, r2, r1
    c652:	8022      	strh	r2, [r4, #0]
            fill_area2.x2 = coords->x2;
    c654:	80a3      	strh	r3, [r4, #4]
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    c656:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c658:	1a9a      	subs	r2, r3, r2
    c65a:	3201      	adds	r2, #1
    c65c:	2110      	movs	r1, #16
    c65e:	5e7b      	ldrsh	r3, [r7, r1]
    c660:	a90e      	add	r1, sp, #56	; 0x38
    c662:	2028      	movs	r0, #40	; 0x28
    c664:	5e09      	ldrsh	r1, [r1, r0]
    c666:	185b      	adds	r3, r3, r1
    c668:	1ad3      	subs	r3, r2, r3
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    c66a:	43da      	mvns	r2, r3
    c66c:	17d2      	asrs	r2, r2, #31
    c66e:	4013      	ands	r3, r2
    c670:	9a05      	ldr	r2, [sp, #20]
    c672:	4694      	mov	ip, r2
    c674:	4463      	add	r3, ip
    c676:	9a06      	ldr	r2, [sp, #24]
    c678:	9202      	str	r2, [sp, #8]
    c67a:	464a      	mov	r2, r9
    c67c:	9201      	str	r2, [sp, #4]
    c67e:	4642      	mov	r2, r8
    c680:	9200      	str	r2, [sp, #0]
    c682:	466a      	mov	r2, sp
    c684:	8b92      	ldrh	r2, [r2, #28]
    c686:	0021      	movs	r1, r4
    c688:	9804      	ldr	r0, [sp, #16]
    c68a:	4d47      	ldr	r5, [pc, #284]	; (c7a8 <lv_draw_rect+0x1c4c>)
    c68c:	47a8      	blx	r5
            fill_area.y1++;
    c68e:	ab1c      	add	r3, sp, #112	; 0x70
    c690:	885a      	ldrh	r2, [r3, #2]
    c692:	3201      	adds	r2, #1
    c694:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
    c696:	88da      	ldrh	r2, [r3, #6]
    c698:	3201      	adds	r2, #1
    c69a:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    c69c:	9a08      	ldr	r2, [sp, #32]
    c69e:	3201      	adds	r2, #1
    c6a0:	9208      	str	r2, [sp, #32]
    c6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c6a4:	4293      	cmp	r3, r2
    c6a6:	db4a      	blt.n	c73e <lv_draw_rect+0x1be2>
            _lv_memset_ff(mask_buf, draw_area_w);
    c6a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c6aa:	9d05      	ldr	r5, [sp, #20]
    c6ac:	0028      	movs	r0, r5
    c6ae:	4b3f      	ldr	r3, [pc, #252]	; (c7ac <lv_draw_rect+0x1c50>)
    c6b0:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    c6b2:	8a7a      	ldrh	r2, [r7, #18]
    c6b4:	9b08      	ldr	r3, [sp, #32]
    c6b6:	469c      	mov	ip, r3
    c6b8:	4462      	add	r2, ip
    c6ba:	b212      	sxth	r2, r2
    c6bc:	8a39      	ldrh	r1, [r7, #16]
    c6be:	ab0e      	add	r3, sp, #56	; 0x38
    c6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    c6c2:	18c9      	adds	r1, r1, r3
    c6c4:	b209      	sxth	r1, r1
    c6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c6c8:	9505      	str	r5, [sp, #20]
    c6ca:	0028      	movs	r0, r5
    c6cc:	4d38      	ldr	r5, [pc, #224]	; (c7b0 <lv_draw_rect+0x1c54>)
    c6ce:	47a8      	blx	r5
    c6d0:	4680      	mov	r8, r0
            fill_area2.y1 = fill_area.y1;
    c6d2:	ab1c      	add	r3, sp, #112	; 0x70
    c6d4:	885a      	ldrh	r2, [r3, #2]
    c6d6:	8062      	strh	r2, [r4, #2]
            fill_area2.y2 = fill_area.y2;
    c6d8:	88db      	ldrh	r3, [r3, #6]
    c6da:	80e3      	strh	r3, [r4, #6]
            fill_area2.x1 = coords->x1;
    c6dc:	2200      	movs	r2, #0
    c6de:	5eb3      	ldrsh	r3, [r6, r2]
    c6e0:	8023      	strh	r3, [r4, #0]
            fill_area2.x2 = coords->x1 + rout - 1;
    c6e2:	3b01      	subs	r3, #1
    c6e4:	4453      	add	r3, sl
    c6e6:	80a3      	strh	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    c6e8:	9a06      	ldr	r2, [sp, #24]
    c6ea:	9202      	str	r2, [sp, #8]
    c6ec:	464a      	mov	r2, r9
    c6ee:	9201      	str	r2, [sp, #4]
    c6f0:	9000      	str	r0, [sp, #0]
    c6f2:	9b05      	ldr	r3, [sp, #20]
    c6f4:	466a      	mov	r2, sp
    c6f6:	8b92      	ldrh	r2, [r2, #28]
    c6f8:	0021      	movs	r1, r4
    c6fa:	9804      	ldr	r0, [sp, #16]
    c6fc:	4d2a      	ldr	r5, [pc, #168]	; (c7a8 <lv_draw_rect+0x1c4c>)
    c6fe:	47a8      	blx	r5
            if(fill_area2.y2 < coords->y1 + dsc->border_width) {
    c700:	2306      	movs	r3, #6
    c702:	5ee2      	ldrsh	r2, [r4, r3]
    c704:	2102      	movs	r1, #2
    c706:	5e73      	ldrsh	r3, [r6, r1]
    c708:	990e      	ldr	r1, [sp, #56]	; 0x38
    c70a:	2010      	movs	r0, #16
    c70c:	5e09      	ldrsh	r1, [r1, r0]
    c70e:	185b      	adds	r3, r3, r1
    c710:	429a      	cmp	r2, r3
    c712:	da99      	bge.n	c648 <lv_draw_rect+0x1aec>
                fill_area2.x1 = coords->x1 + rout;
    c714:	8833      	ldrh	r3, [r6, #0]
    c716:	4453      	add	r3, sl
    c718:	8023      	strh	r3, [r4, #0]
                fill_area2.x2 = coords->x2 - rout;
    c71a:	88b3      	ldrh	r3, [r6, #4]
    c71c:	4652      	mov	r2, sl
    c71e:	1a9b      	subs	r3, r3, r2
    c720:	80a3      	strh	r3, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    c722:	9b06      	ldr	r3, [sp, #24]
    c724:	9302      	str	r3, [sp, #8]
    c726:	464b      	mov	r3, r9
    c728:	9301      	str	r3, [sp, #4]
    c72a:	2301      	movs	r3, #1
    c72c:	9300      	str	r3, [sp, #0]
    c72e:	2300      	movs	r3, #0
    c730:	466a      	mov	r2, sp
    c732:	8b92      	ldrh	r2, [r2, #28]
    c734:	0021      	movs	r1, r4
    c736:	9804      	ldr	r0, [sp, #16]
    c738:	4d1b      	ldr	r5, [pc, #108]	; (c7a8 <lv_draw_rect+0x1c4c>)
    c73a:	47a8      	blx	r5
    c73c:	e784      	b.n	c648 <lv_draw_rect+0x1aec>
    c73e:	0032      	movs	r2, r6
    c740:	464e      	mov	r6, r9
    c742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c744:	469b      	mov	fp, r3
    c746:	4691      	mov	r9, r2
        int32_t lower_corner_end = coords->y2 - disp_area->y1 - corner_size;
    c748:	2212      	movs	r2, #18
    c74a:	5ebb      	ldrsh	r3, [r7, r2]
    c74c:	464a      	mov	r2, r9
    c74e:	2106      	movs	r1, #6
    c750:	5e52      	ldrsh	r2, [r2, r1]
    c752:	1ad2      	subs	r2, r2, r3
    c754:	990d      	ldr	r1, [sp, #52]	; 0x34
    c756:	1a52      	subs	r2, r2, r1
        lower_corner_end = LV_MATH_MAX(lower_corner_end, draw_area.y1);
    c758:	a918      	add	r1, sp, #96	; 0x60
    c75a:	2502      	movs	r5, #2
    c75c:	5f4d      	ldrsh	r5, [r1, r5]
    c75e:	4295      	cmp	r5, r2
    c760:	da00      	bge.n	c764 <lv_draw_rect+0x1c08>
    c762:	0015      	movs	r5, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    c764:	990c      	ldr	r1, [sp, #48]	; 0x30
    c766:	000a      	movs	r2, r1
    c768:	42a9      	cmp	r1, r5
    c76a:	db01      	blt.n	c770 <lv_draw_rect+0x1c14>
    c76c:	3201      	adds	r2, #1
    c76e:	0015      	movs	r5, r2
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    c770:	195b      	adds	r3, r3, r5
    c772:	b21b      	sxth	r3, r3
    c774:	aa1c      	add	r2, sp, #112	; 0x70
    c776:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
    c778:	80d3      	strh	r3, [r2, #6]
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    c77a:	ab18      	add	r3, sp, #96	; 0x60
    c77c:	2206      	movs	r2, #6
    c77e:	5e9b      	ldrsh	r3, [r3, r2]
    c780:	429d      	cmp	r5, r3
    c782:	dd00      	ble.n	c786 <lv_draw_rect+0x1c2a>
    c784:	e099      	b.n	c8ba <lv_draw_rect+0x1d5e>
            fill_area2.x1 = coords->x1;
    c786:	ac1e      	add	r4, sp, #120	; 0x78
    c788:	9508      	str	r5, [sp, #32]
    c78a:	464b      	mov	r3, r9
    c78c:	46b1      	mov	r9, r6
    c78e:	465a      	mov	r2, fp
    c790:	920c      	str	r2, [sp, #48]	; 0x30
    c792:	001e      	movs	r6, r3
    c794:	e041      	b.n	c81a <lv_draw_rect+0x1cbe>
    c796:	46c0      	nop			; (mov r8, r8)
    c798:	00010e59 	.word	0x00010e59
    c79c:	0000a659 	.word	0x0000a659
    c7a0:	0000a7ed 	.word	0x0000a7ed
    c7a4:	0000a585 	.word	0x0000a585
    c7a8:	00005c05 	.word	0x00005c05
    c7ac:	00011089 	.word	0x00011089
    c7b0:	0000a5bd 	.word	0x0000a5bd
            fill_area2.x1 = coords->x2 - rout + 1;
    c7b4:	2204      	movs	r2, #4
    c7b6:	5eb3      	ldrsh	r3, [r6, r2]
    c7b8:	1c5a      	adds	r2, r3, #1
    c7ba:	4651      	mov	r1, sl
    c7bc:	1a52      	subs	r2, r2, r1
    c7be:	8022      	strh	r2, [r4, #0]
            fill_area2.x2 = coords->x2;
    c7c0:	80a3      	strh	r3, [r4, #4]
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    c7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c7c4:	1a9a      	subs	r2, r3, r2
    c7c6:	3201      	adds	r2, #1
    c7c8:	2110      	movs	r1, #16
    c7ca:	5e7b      	ldrsh	r3, [r7, r1]
    c7cc:	a90e      	add	r1, sp, #56	; 0x38
    c7ce:	2028      	movs	r0, #40	; 0x28
    c7d0:	5e09      	ldrsh	r1, [r1, r0]
    c7d2:	185b      	adds	r3, r3, r1
    c7d4:	1ad3      	subs	r3, r2, r3
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    c7d6:	43da      	mvns	r2, r3
    c7d8:	17d2      	asrs	r2, r2, #31
    c7da:	4013      	ands	r3, r2
    c7dc:	9a05      	ldr	r2, [sp, #20]
    c7de:	4694      	mov	ip, r2
    c7e0:	4463      	add	r3, ip
    c7e2:	9a06      	ldr	r2, [sp, #24]
    c7e4:	9202      	str	r2, [sp, #8]
    c7e6:	464a      	mov	r2, r9
    c7e8:	9201      	str	r2, [sp, #4]
    c7ea:	4642      	mov	r2, r8
    c7ec:	9200      	str	r2, [sp, #0]
    c7ee:	466a      	mov	r2, sp
    c7f0:	8b92      	ldrh	r2, [r2, #28]
    c7f2:	0021      	movs	r1, r4
    c7f4:	9804      	ldr	r0, [sp, #16]
    c7f6:	4daf      	ldr	r5, [pc, #700]	; (cab4 <lv_draw_rect+0x1f58>)
    c7f8:	47a8      	blx	r5
            fill_area.y1++;
    c7fa:	ab1c      	add	r3, sp, #112	; 0x70
    c7fc:	885a      	ldrh	r2, [r3, #2]
    c7fe:	3201      	adds	r2, #1
    c800:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
    c802:	88da      	ldrh	r2, [r3, #6]
    c804:	3201      	adds	r2, #1
    c806:	80da      	strh	r2, [r3, #6]
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    c808:	9a08      	ldr	r2, [sp, #32]
    c80a:	3201      	adds	r2, #1
    c80c:	0011      	movs	r1, r2
    c80e:	9208      	str	r2, [sp, #32]
    c810:	ab0e      	add	r3, sp, #56	; 0x38
    c812:	222e      	movs	r2, #46	; 0x2e
    c814:	5e9b      	ldrsh	r3, [r3, r2]
    c816:	4299      	cmp	r1, r3
    c818:	dc4a      	bgt.n	c8b0 <lv_draw_rect+0x1d54>
            _lv_memset_ff(mask_buf, draw_area_w);
    c81a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c81c:	9d05      	ldr	r5, [sp, #20]
    c81e:	0028      	movs	r0, r5
    c820:	4ba5      	ldr	r3, [pc, #660]	; (cab8 <lv_draw_rect+0x1f5c>)
    c822:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    c824:	8a7a      	ldrh	r2, [r7, #18]
    c826:	9b08      	ldr	r3, [sp, #32]
    c828:	469c      	mov	ip, r3
    c82a:	4462      	add	r2, ip
    c82c:	b212      	sxth	r2, r2
    c82e:	8a39      	ldrh	r1, [r7, #16]
    c830:	ab0e      	add	r3, sp, #56	; 0x38
    c832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    c834:	18c9      	adds	r1, r1, r3
    c836:	b209      	sxth	r1, r1
    c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c83a:	9505      	str	r5, [sp, #20]
    c83c:	0028      	movs	r0, r5
    c83e:	4d9f      	ldr	r5, [pc, #636]	; (cabc <lv_draw_rect+0x1f60>)
    c840:	47a8      	blx	r5
    c842:	4680      	mov	r8, r0
            fill_area2.x1 = coords->x1;
    c844:	2200      	movs	r2, #0
    c846:	5eb3      	ldrsh	r3, [r6, r2]
    c848:	8023      	strh	r3, [r4, #0]
            fill_area2.x2 = coords->x1 + rout - 1;
    c84a:	3b01      	subs	r3, #1
    c84c:	4453      	add	r3, sl
    c84e:	80a3      	strh	r3, [r4, #4]
            fill_area2.y1 = fill_area.y1;
    c850:	ab1c      	add	r3, sp, #112	; 0x70
    c852:	885a      	ldrh	r2, [r3, #2]
    c854:	8062      	strh	r2, [r4, #2]
            fill_area2.y2 = fill_area.y2;
    c856:	88db      	ldrh	r3, [r3, #6]
    c858:	80e3      	strh	r3, [r4, #6]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    c85a:	9a06      	ldr	r2, [sp, #24]
    c85c:	9202      	str	r2, [sp, #8]
    c85e:	464a      	mov	r2, r9
    c860:	9201      	str	r2, [sp, #4]
    c862:	9000      	str	r0, [sp, #0]
    c864:	9b05      	ldr	r3, [sp, #20]
    c866:	466a      	mov	r2, sp
    c868:	8b92      	ldrh	r2, [r2, #28]
    c86a:	0021      	movs	r1, r4
    c86c:	9804      	ldr	r0, [sp, #16]
    c86e:	4d91      	ldr	r5, [pc, #580]	; (cab4 <lv_draw_rect+0x1f58>)
    c870:	47a8      	blx	r5
            if(fill_area2.y2 > coords->y2 - dsc->border_width) {
    c872:	2306      	movs	r3, #6
    c874:	5ee2      	ldrsh	r2, [r4, r3]
    c876:	2106      	movs	r1, #6
    c878:	5e73      	ldrsh	r3, [r6, r1]
    c87a:	990c      	ldr	r1, [sp, #48]	; 0x30
    c87c:	2010      	movs	r0, #16
    c87e:	5e09      	ldrsh	r1, [r1, r0]
    c880:	1a5b      	subs	r3, r3, r1
    c882:	429a      	cmp	r2, r3
    c884:	dd96      	ble.n	c7b4 <lv_draw_rect+0x1c58>
                fill_area2.x1 = coords->x1 + rout;
    c886:	8833      	ldrh	r3, [r6, #0]
    c888:	4453      	add	r3, sl
    c88a:	8023      	strh	r3, [r4, #0]
                fill_area2.x2 = coords->x2 - rout;
    c88c:	88b3      	ldrh	r3, [r6, #4]
    c88e:	4652      	mov	r2, sl
    c890:	1a9b      	subs	r3, r3, r2
    c892:	80a3      	strh	r3, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    c894:	9b06      	ldr	r3, [sp, #24]
    c896:	9302      	str	r3, [sp, #8]
    c898:	464b      	mov	r3, r9
    c89a:	9301      	str	r3, [sp, #4]
    c89c:	2301      	movs	r3, #1
    c89e:	9300      	str	r3, [sp, #0]
    c8a0:	2300      	movs	r3, #0
    c8a2:	466a      	mov	r2, sp
    c8a4:	8b92      	ldrh	r2, [r2, #28]
    c8a6:	0021      	movs	r1, r4
    c8a8:	9804      	ldr	r0, [sp, #16]
    c8aa:	4d82      	ldr	r5, [pc, #520]	; (cab4 <lv_draw_rect+0x1f58>)
    c8ac:	47a8      	blx	r5
    c8ae:	e781      	b.n	c7b4 <lv_draw_rect+0x1c58>
    c8b0:	0032      	movs	r2, r6
    c8b2:	464e      	mov	r6, r9
    c8b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c8b6:	469b      	mov	fp, r3
    c8b8:	4691      	mov	r9, r2
        fill_area.y1 = coords->y1 + corner_size + 1;
    c8ba:	466b      	mov	r3, sp
    c8bc:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    c8be:	ac1c      	add	r4, sp, #112	; 0x70
    c8c0:	464b      	mov	r3, r9
    c8c2:	885a      	ldrh	r2, [r3, #2]
    c8c4:	3201      	adds	r2, #1
    c8c6:	188a      	adds	r2, r1, r2
    c8c8:	8062      	strh	r2, [r4, #2]
        fill_area.y2 = coords->y2 - corner_size - 1;
    c8ca:	88db      	ldrh	r3, [r3, #6]
    c8cc:	3b01      	subs	r3, #1
    c8ce:	1a5b      	subs	r3, r3, r1
    c8d0:	80e3      	strh	r3, [r4, #6]
        fill_area.x1 = coords->x1;
    c8d2:	464b      	mov	r3, r9
    c8d4:	2200      	movs	r2, #0
    c8d6:	5e9b      	ldrsh	r3, [r3, r2]
    c8d8:	8023      	strh	r3, [r4, #0]
        fill_area.x2 = coords->x1 + dsc->border_width - 1;
    c8da:	465a      	mov	r2, fp
    c8dc:	8a12      	ldrh	r2, [r2, #16]
    c8de:	3a01      	subs	r2, #1
    c8e0:	189b      	adds	r3, r3, r2
    c8e2:	80a3      	strh	r3, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    c8e4:	9b06      	ldr	r3, [sp, #24]
    c8e6:	9302      	str	r3, [sp, #8]
    c8e8:	9601      	str	r6, [sp, #4]
    c8ea:	2701      	movs	r7, #1
    c8ec:	9700      	str	r7, [sp, #0]
    c8ee:	2300      	movs	r3, #0
    c8f0:	466a      	mov	r2, sp
    c8f2:	2144      	movs	r1, #68	; 0x44
    c8f4:	1852      	adds	r2, r2, r1
    c8f6:	8812      	ldrh	r2, [r2, #0]
    c8f8:	0021      	movs	r1, r4
    c8fa:	9804      	ldr	r0, [sp, #16]
    c8fc:	4d6d      	ldr	r5, [pc, #436]	; (cab4 <lv_draw_rect+0x1f58>)
    c8fe:	47a8      	blx	r5
        fill_area.x1 = coords->x2 - dsc->border_width + 1;
    c900:	464a      	mov	r2, r9
    c902:	2104      	movs	r1, #4
    c904:	5e52      	ldrsh	r2, [r2, r1]
    c906:	4659      	mov	r1, fp
    c908:	8a0b      	ldrh	r3, [r1, #16]
    c90a:	1ad3      	subs	r3, r2, r3
    c90c:	3301      	adds	r3, #1
    c90e:	8023      	strh	r3, [r4, #0]
        fill_area.x2 = coords->x2;
    c910:	80a2      	strh	r2, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    c912:	9b06      	ldr	r3, [sp, #24]
    c914:	9302      	str	r3, [sp, #8]
    c916:	9601      	str	r6, [sp, #4]
    c918:	9700      	str	r7, [sp, #0]
    c91a:	2300      	movs	r3, #0
    c91c:	466a      	mov	r2, sp
    c91e:	2144      	movs	r1, #68	; 0x44
    c920:	1852      	adds	r2, r2, r1
    c922:	8812      	ldrh	r2, [r2, #0]
    c924:	0021      	movs	r1, r4
    c926:	9804      	ldr	r0, [sp, #16]
    c928:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
    c92a:	9810      	ldr	r0, [sp, #64]	; 0x40
    c92c:	4c64      	ldr	r4, [pc, #400]	; (cac0 <lv_draw_rect+0x1f64>)
    c92e:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    c930:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c932:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    c934:	9805      	ldr	r0, [sp, #20]
    c936:	4b63      	ldr	r3, [pc, #396]	; (cac4 <lv_draw_rect+0x1f68>)
    c938:	4798      	blx	r3
    c93a:	f7ff f882 	bl	ba42 <lv_draw_rect+0xee6>
        fill_area.x1 = coords->x1;
    c93e:	464b      	mov	r3, r9
    c940:	2100      	movs	r1, #0
    c942:	5e59      	ldrsh	r1, [r3, r1]
    c944:	a81c      	add	r0, sp, #112	; 0x70
    c946:	8001      	strh	r1, [r0, #0]
        fill_area.x2 = coords->x2;
    c948:	464b      	mov	r3, r9
    c94a:	2204      	movs	r2, #4
    c94c:	5e9a      	ldrsh	r2, [r3, r2]
    c94e:	8082      	strh	r2, [r0, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    c950:	ab18      	add	r3, sp, #96	; 0x60
    c952:	2402      	movs	r4, #2
    c954:	5f1c      	ldrsh	r4, [r3, r4]
    c956:	8a7b      	ldrh	r3, [r7, #18]
    c958:	191b      	adds	r3, r3, r4
    c95a:	b21b      	sxth	r3, r3
    c95c:	8043      	strh	r3, [r0, #2]
        fill_area.y2 = fill_area.y1;
    c95e:	80c3      	strh	r3, [r0, #6]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    c960:	465b      	mov	r3, fp
    c962:	2012      	movs	r0, #18
    c964:	5e1b      	ldrsh	r3, [r3, r0]
    c966:	2b04      	cmp	r3, #4
    c968:	d02b      	beq.n	c9c2 <lv_draw_rect+0x1e66>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    c96a:	2b08      	cmp	r3, #8
    c96c:	d045      	beq.n	c9fa <lv_draw_rect+0x1e9e>
        volatile bool top_only = false;
    c96e:	2200      	movs	r2, #0
    c970:	2116      	movs	r1, #22
    c972:	a80e      	add	r0, sp, #56	; 0x38
    c974:	4684      	mov	ip, r0
    c976:	4461      	add	r1, ip
    c978:	700a      	strb	r2, [r1, #0]
        volatile bool bottom_only = false;
    c97a:	2117      	movs	r1, #23
    c97c:	4461      	add	r1, ip
    c97e:	700a      	strb	r2, [r1, #0]
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
    c980:	2b02      	cmp	r3, #2
    c982:	d12c      	bne.n	c9de <lv_draw_rect+0x1e82>
    c984:	3201      	adds	r2, #1
    c986:	3314      	adds	r3, #20
    c988:	4463      	add	r3, ip
    c98a:	701a      	strb	r2, [r3, #0]
        volatile bool normal = !top_only && !bottom_only ? true : false;
    c98c:	2316      	movs	r3, #22
    c98e:	aa0e      	add	r2, sp, #56	; 0x38
    c990:	4694      	mov	ip, r2
    c992:	4463      	add	r3, ip
    c994:	781b      	ldrb	r3, [r3, #0]
    c996:	2b00      	cmp	r3, #0
    c998:	d104      	bne.n	c9a4 <lv_draw_rect+0x1e48>
    c99a:	3317      	adds	r3, #23
    c99c:	4463      	add	r3, ip
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	2501      	movs	r5, #1
    c9a2:	405d      	eors	r5, r3
    c9a4:	2301      	movs	r3, #1
    c9a6:	401d      	ands	r5, r3
    c9a8:	ab14      	add	r3, sp, #80	; 0x50
    c9aa:	701d      	strb	r5, [r3, #0]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    c9ac:	0025      	movs	r5, r4
    c9ae:	ab18      	add	r3, sp, #96	; 0x60
    c9b0:	2206      	movs	r2, #6
    c9b2:	5e9b      	ldrsh	r3, [r3, r2]
    c9b4:	429c      	cmp	r4, r3
    c9b6:	dcb8      	bgt.n	c92a <lv_draw_rect+0x1dce>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    c9b8:	ac1c      	add	r4, sp, #112	; 0x70
                _lv_memset_ff(mask_buf, draw_area_w);
    c9ba:	4b3f      	ldr	r3, [pc, #252]	; (cab8 <lv_draw_rect+0x1f5c>)
    c9bc:	469a      	mov	sl, r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    c9be:	46b0      	mov	r8, r6
    c9c0:	e051      	b.n	ca66 <lv_draw_rect+0x1f0a>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    c9c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c9c4:	4694      	mov	ip, r2
    c9c6:	4461      	add	r1, ip
    c9c8:	aa1c      	add	r2, sp, #112	; 0x70
    c9ca:	8091      	strh	r1, [r2, #4]
        volatile bool top_only = false;
    c9cc:	2200      	movs	r2, #0
    c9ce:	2116      	movs	r1, #22
    c9d0:	a80e      	add	r0, sp, #56	; 0x38
    c9d2:	4684      	mov	ip, r0
    c9d4:	4461      	add	r1, ip
    c9d6:	700a      	strb	r2, [r1, #0]
        volatile bool bottom_only = false;
    c9d8:	2117      	movs	r1, #23
    c9da:	4461      	add	r1, ip
    c9dc:	700a      	strb	r2, [r1, #0]
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    c9de:	2b01      	cmp	r3, #1
    c9e0:	d010      	beq.n	ca04 <lv_draw_rect+0x1ea8>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
    c9e2:	2b03      	cmp	r3, #3
    c9e4:	d1d2      	bne.n	c98c <lv_draw_rect+0x1e30>
            top_only = true;
    c9e6:	3b02      	subs	r3, #2
    c9e8:	2216      	movs	r2, #22
    c9ea:	a90e      	add	r1, sp, #56	; 0x38
    c9ec:	468c      	mov	ip, r1
    c9ee:	4462      	add	r2, ip
    c9f0:	7013      	strb	r3, [r2, #0]
            bottom_only = true;
    c9f2:	2217      	movs	r2, #23
    c9f4:	4462      	add	r2, ip
    c9f6:	7013      	strb	r3, [r2, #0]
    c9f8:	e7c8      	b.n	c98c <lv_draw_rect+0x1e30>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    c9fa:	990d      	ldr	r1, [sp, #52]	; 0x34
    c9fc:	1a52      	subs	r2, r2, r1
    c9fe:	a91c      	add	r1, sp, #112	; 0x70
    ca00:	800a      	strh	r2, [r1, #0]
    ca02:	e7e3      	b.n	c9cc <lv_draw_rect+0x1e70>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    ca04:	2201      	movs	r2, #1
    ca06:	3316      	adds	r3, #22
    ca08:	a90e      	add	r1, sp, #56	; 0x38
    ca0a:	468c      	mov	ip, r1
    ca0c:	4463      	add	r3, ip
    ca0e:	701a      	strb	r2, [r3, #0]
    ca10:	e7bc      	b.n	c98c <lv_draw_rect+0x1e30>
                _lv_memset_ff(mask_buf, draw_area_w);
    ca12:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ca14:	9e05      	ldr	r6, [sp, #20]
    ca16:	0030      	movs	r0, r6
    ca18:	47d0      	blx	sl
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    ca1a:	8a7a      	ldrh	r2, [r7, #18]
    ca1c:	1952      	adds	r2, r2, r5
    ca1e:	b212      	sxth	r2, r2
    ca20:	8a39      	ldrh	r1, [r7, #16]
    ca22:	ab0e      	add	r3, sp, #56	; 0x38
    ca24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    ca26:	18c9      	adds	r1, r1, r3
    ca28:	b209      	sxth	r1, r1
    ca2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca2c:	9605      	str	r6, [sp, #20]
    ca2e:	0030      	movs	r0, r6
    ca30:	4e22      	ldr	r6, [pc, #136]	; (cabc <lv_draw_rect+0x1f60>)
    ca32:	47b0      	blx	r6
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    ca34:	9a06      	ldr	r2, [sp, #24]
    ca36:	9202      	str	r2, [sp, #8]
    ca38:	4642      	mov	r2, r8
    ca3a:	9201      	str	r2, [sp, #4]
    ca3c:	9000      	str	r0, [sp, #0]
    ca3e:	9b05      	ldr	r3, [sp, #20]
    ca40:	466a      	mov	r2, sp
    ca42:	8b92      	ldrh	r2, [r2, #28]
    ca44:	0021      	movs	r1, r4
    ca46:	9804      	ldr	r0, [sp, #16]
    ca48:	4e1a      	ldr	r6, [pc, #104]	; (cab4 <lv_draw_rect+0x1f58>)
    ca4a:	47b0      	blx	r6
            fill_area.y1++;
    ca4c:	8863      	ldrh	r3, [r4, #2]
    ca4e:	3301      	adds	r3, #1
    ca50:	8063      	strh	r3, [r4, #2]
            fill_area.y2++;
    ca52:	88e3      	ldrh	r3, [r4, #6]
    ca54:	3301      	adds	r3, #1
    ca56:	80e3      	strh	r3, [r4, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    ca58:	3501      	adds	r5, #1
    ca5a:	ab0e      	add	r3, sp, #56	; 0x38
    ca5c:	222e      	movs	r2, #46	; 0x2e
    ca5e:	5e9b      	ldrsh	r3, [r3, r2]
    ca60:	429d      	cmp	r5, r3
    ca62:	dd00      	ble.n	ca66 <lv_draw_rect+0x1f0a>
    ca64:	e761      	b.n	c92a <lv_draw_rect+0x1dce>
            if(normal ||
    ca66:	ab14      	add	r3, sp, #80	; 0x50
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	d1d1      	bne.n	ca12 <lv_draw_rect+0x1eb6>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    ca6e:	3316      	adds	r3, #22
    ca70:	aa0e      	add	r2, sp, #56	; 0x38
    ca72:	4694      	mov	ip, r2
    ca74:	4463      	add	r3, ip
    ca76:	781b      	ldrb	r3, [r3, #0]
            if(normal ||
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d009      	beq.n	ca90 <lv_draw_rect+0x1f34>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    ca7c:	2302      	movs	r3, #2
    ca7e:	5ee2      	ldrsh	r2, [r4, r3]
    ca80:	464b      	mov	r3, r9
    ca82:	2102      	movs	r1, #2
    ca84:	5e5b      	ldrsh	r3, [r3, r1]
    ca86:	990d      	ldr	r1, [sp, #52]	; 0x34
    ca88:	468c      	mov	ip, r1
    ca8a:	4463      	add	r3, ip
    ca8c:	429a      	cmp	r2, r3
    ca8e:	ddc0      	ble.n	ca12 <lv_draw_rect+0x1eb6>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    ca90:	2317      	movs	r3, #23
    ca92:	aa0e      	add	r2, sp, #56	; 0x38
    ca94:	4694      	mov	ip, r2
    ca96:	4463      	add	r3, ip
    ca98:	781b      	ldrb	r3, [r3, #0]
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d0d6      	beq.n	ca4c <lv_draw_rect+0x1ef0>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    ca9e:	2302      	movs	r3, #2
    caa0:	5ee2      	ldrsh	r2, [r4, r3]
    caa2:	464b      	mov	r3, r9
    caa4:	2106      	movs	r1, #6
    caa6:	5e5b      	ldrsh	r3, [r3, r1]
    caa8:	990d      	ldr	r1, [sp, #52]	; 0x34
    caaa:	1a5b      	subs	r3, r3, r1
    caac:	429a      	cmp	r2, r3
    caae:	dbcd      	blt.n	ca4c <lv_draw_rect+0x1ef0>
    cab0:	e7af      	b.n	ca12 <lv_draw_rect+0x1eb6>
    cab2:	46c0      	nop			; (mov r8, r8)
    cab4:	00005c05 	.word	0x00005c05
    cab8:	00011089 	.word	0x00011089
    cabc:	0000a5bd 	.word	0x0000a5bd
    cac0:	0000a611 	.word	0x0000a611
    cac4:	00010b6d 	.word	0x00010b6d

    lv_point_t s;
    _lv_txt_get_size(&s, dsc->value_str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
    cac8:	234c      	movs	r3, #76	; 0x4c
    caca:	4698      	mov	r8, r3
    cacc:	465b      	mov	r3, fp
    cace:	4642      	mov	r2, r8
    cad0:	5e9b      	ldrsh	r3, [r3, r2]
    cad2:	ad1c      	add	r5, sp, #112	; 0x70
    cad4:	2600      	movs	r6, #0
    cad6:	9602      	str	r6, [sp, #8]
    cad8:	4abc      	ldr	r2, [pc, #752]	; (cdcc <lv_draw_rect+0x2270>)
    cada:	9201      	str	r2, [sp, #4]
    cadc:	465a      	mov	r2, fp
    cade:	204e      	movs	r0, #78	; 0x4e
    cae0:	5e12      	ldrsh	r2, [r2, r0]
    cae2:	9200      	str	r2, [sp, #0]
    cae4:	465a      	mov	r2, fp
    cae6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    cae8:	0028      	movs	r0, r5
    caea:	4cb9      	ldr	r4, [pc, #740]	; (cdd0 <lv_draw_rect+0x2274>)
    caec:	47a0      	blx	r4
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
    caee:	ac22      	add	r4, sp, #136	; 0x88
    caf0:	8026      	strh	r6, [r4, #0]
    value_area.y1 = 0;
    caf2:	8066      	strh	r6, [r4, #2]
    value_area.x2 = s.x - 1;
    caf4:	882b      	ldrh	r3, [r5, #0]
    caf6:	3b01      	subs	r3, #1
    caf8:	80a3      	strh	r3, [r4, #4]
    value_area.y2 = s.y - 1;
    cafa:	886b      	ldrh	r3, [r5, #2]
    cafc:	3b01      	subs	r3, #1
    cafe:	80e3      	strh	r3, [r4, #6]

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
    cb00:	ad1e      	add	r5, sp, #120	; 0x78
    cb02:	2350      	movs	r3, #80	; 0x50
    cb04:	465a      	mov	r2, fp
    cb06:	5cd2      	ldrb	r2, [r2, r3]
    cb08:	002b      	movs	r3, r5
    cb0a:	0021      	movs	r1, r4
    cb0c:	4648      	mov	r0, r9
    cb0e:	4fb1      	ldr	r7, [pc, #708]	; (cdd4 <lv_draw_rect+0x2278>)
    cb10:	47b8      	blx	r7

    value_area.x1 += p_align.x + dsc->value_ofs_x;
    cb12:	882a      	ldrh	r2, [r5, #0]
    cb14:	2348      	movs	r3, #72	; 0x48
    cb16:	4659      	mov	r1, fp
    cb18:	5acb      	ldrh	r3, [r1, r3]
    cb1a:	18d2      	adds	r2, r2, r3
    cb1c:	b292      	uxth	r2, r2
    cb1e:	8823      	ldrh	r3, [r4, #0]
    cb20:	18d3      	adds	r3, r2, r3
    cb22:	8023      	strh	r3, [r4, #0]
    value_area.y1 += p_align.y + dsc->value_ofs_y;
    cb24:	886b      	ldrh	r3, [r5, #2]
    cb26:	214a      	movs	r1, #74	; 0x4a
    cb28:	4658      	mov	r0, fp
    cb2a:	5a41      	ldrh	r1, [r0, r1]
    cb2c:	185b      	adds	r3, r3, r1
    cb2e:	b29b      	uxth	r3, r3
    cb30:	8861      	ldrh	r1, [r4, #2]
    cb32:	1859      	adds	r1, r3, r1
    cb34:	8061      	strh	r1, [r4, #2]
    value_area.x2 += p_align.x + dsc->value_ofs_x;
    cb36:	88a1      	ldrh	r1, [r4, #4]
    cb38:	1852      	adds	r2, r2, r1
    cb3a:	80a2      	strh	r2, [r4, #4]
    value_area.y2 += p_align.y + dsc->value_ofs_y;
    cb3c:	88e2      	ldrh	r2, [r4, #6]
    cb3e:	189b      	adds	r3, r3, r2
    cb40:	80e3      	strh	r3, [r4, #6]

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    cb42:	ad29      	add	r5, sp, #164	; 0xa4
    cb44:	0028      	movs	r0, r5
    cb46:	4ba4      	ldr	r3, [pc, #656]	; (cdd8 <lv_draw_rect+0x227c>)
    cb48:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
    cb4a:	465b      	mov	r3, fp
    cb4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cb4e:	606b      	str	r3, [r5, #4]
    label_dsc.letter_space = dsc->value_letter_space;
    cb50:	465b      	mov	r3, fp
    cb52:	4642      	mov	r2, r8
    cb54:	5a9b      	ldrh	r3, [r3, r2]
    cb56:	81ab      	strh	r3, [r5, #12]
    label_dsc.line_space = dsc->value_line_space;
    cb58:	465b      	mov	r3, fp
    cb5a:	3202      	adds	r2, #2
    cb5c:	5a9b      	ldrh	r3, [r3, r2]
    cb5e:	816b      	strh	r3, [r5, #10]
    label_dsc.color = dsc->value_color;
    cb60:	2346      	movs	r3, #70	; 0x46
    cb62:	465a      	mov	r2, fp
    cb64:	5ad3      	ldrh	r3, [r2, r3]
    cb66:	802b      	strh	r3, [r5, #0]
    label_dsc.opa = dsc->value_opa;
    cb68:	2344      	movs	r3, #68	; 0x44
    cb6a:	5cd3      	ldrb	r3, [r2, r3]
    cb6c:	722b      	strb	r3, [r5, #8]

    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
    cb6e:	9600      	str	r6, [sp, #0]
    cb70:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    cb72:	002a      	movs	r2, r5
    cb74:	9904      	ldr	r1, [sp, #16]
    cb76:	0020      	movs	r0, r4
    cb78:	4c98      	ldr	r4, [pc, #608]	; (cddc <lv_draw_rect+0x2280>)
    cb7a:	47a0      	blx	r4
    cb7c:	f7fe ff6c 	bl	ba58 <lv_draw_rect+0xefc>
    int32_t rin = dsc->radius;
    cb80:	9b06      	ldr	r3, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cb82:	3701      	adds	r7, #1
    cb84:	4652      	mov	r2, sl
    cb86:	1aba      	subs	r2, r7, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cb88:	3501      	adds	r5, #1
    cb8a:	9907      	ldr	r1, [sp, #28]
    cb8c:	1a69      	subs	r1, r5, r1
    int32_t inner_h = lv_area_get_height(&area_inner);
    cb8e:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
    cb90:	b212      	sxth	r2, r2
    cb92:	428a      	cmp	r2, r1
    cb94:	dd00      	ble.n	cb98 <lv_draw_rect+0x203c>
    cb96:	000a      	movs	r2, r1
    if(rin > short_side >> 1) rin = short_side >> 1;
    cb98:	1052      	asrs	r2, r2, #1
    cb9a:	429a      	cmp	r2, r3
    cb9c:	dd00      	ble.n	cba0 <lv_draw_rect+0x2044>
    cb9e:	9a06      	ldr	r2, [sp, #24]
    int32_t rout = rin + dsc->outline_width;
    cba0:	9b05      	ldr	r3, [sp, #20]
    cba2:	1899      	adds	r1, r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cba6:	3301      	adds	r3, #1
    cba8:	9808      	ldr	r0, [sp, #32]
    cbaa:	1a1b      	subs	r3, r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cbac:	3401      	adds	r4, #1
    cbae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cbb0:	1a20      	subs	r0, r4, r0
    int32_t coords_out_h = lv_area_get_height(&area_outer);
    cbb2:	b200      	sxth	r0, r0
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    cbb4:	b21b      	sxth	r3, r3
    cbb6:	4283      	cmp	r3, r0
    cbb8:	dd00      	ble.n	cbbc <lv_draw_rect+0x2060>
    cbba:	0003      	movs	r3, r0
    if(rout > short_side >> 1) rout = short_side >> 1;
    cbbc:	105b      	asrs	r3, r3, #1
    cbbe:	9307      	str	r3, [sp, #28]
    cbc0:	428b      	cmp	r3, r1
    cbc2:	dd00      	ble.n	cbc6 <lv_draw_rect+0x206a>
    cbc4:	9107      	str	r1, [sp, #28]
    draw_area.x1 -= disp_area->x1;
    cbc6:	464b      	mov	r3, r9
    cbc8:	8a1e      	ldrh	r6, [r3, #16]
    cbca:	a91a      	add	r1, sp, #104	; 0x68
    cbcc:	880b      	ldrh	r3, [r1, #0]
    cbce:	1b9b      	subs	r3, r3, r6
    cbd0:	b298      	uxth	r0, r3
    cbd2:	8008      	strh	r0, [r1, #0]
    draw_area.y1 -= disp_area->y1;
    cbd4:	464b      	mov	r3, r9
    cbd6:	8a5c      	ldrh	r4, [r3, #18]
    cbd8:	884d      	ldrh	r5, [r1, #2]
    cbda:	1b2d      	subs	r5, r5, r4
    cbdc:	804d      	strh	r5, [r1, #2]
    draw_area.x2 -= disp_area->x1;
    cbde:	888b      	ldrh	r3, [r1, #4]
    cbe0:	1b9b      	subs	r3, r3, r6
    cbe2:	b29b      	uxth	r3, r3
    cbe4:	808b      	strh	r3, [r1, #4]
    draw_area.y2 -= disp_area->y1;
    cbe6:	88cd      	ldrh	r5, [r1, #6]
    cbe8:	1b2c      	subs	r4, r5, r4
    cbea:	80cc      	strh	r4, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cbec:	3301      	adds	r3, #1
    cbee:	1a1b      	subs	r3, r3, r0
    cbf0:	b21b      	sxth	r3, r3
    cbf2:	001e      	movs	r6, r3
    cbf4:	9308      	str	r3, [sp, #32]
    lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rin, true);
    cbf6:	b212      	sxth	r2, r2
    cbf8:	2301      	movs	r3, #1
    cbfa:	a916      	add	r1, sp, #88	; 0x58
    cbfc:	a822      	add	r0, sp, #136	; 0x88
    cbfe:	4d78      	ldr	r5, [pc, #480]	; (cde0 <lv_draw_rect+0x2284>)
    cc00:	47a8      	blx	r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    cc02:	2100      	movs	r1, #0
    cc04:	a822      	add	r0, sp, #136	; 0x88
    cc06:	4c77      	ldr	r4, [pc, #476]	; (cde4 <lv_draw_rect+0x2288>)
    cc08:	47a0      	blx	r4
    cc0a:	900e      	str	r0, [sp, #56]	; 0x38
    lv_draw_mask_radius_init(&mask_rout_param, &area_outer, rout, false);
    cc0c:	9f07      	ldr	r7, [sp, #28]
    cc0e:	b23a      	sxth	r2, r7
    cc10:	2300      	movs	r3, #0
    cc12:	a918      	add	r1, sp, #96	; 0x60
    cc14:	a829      	add	r0, sp, #164	; 0xa4
    cc16:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    cc18:	2100      	movs	r1, #0
    cc1a:	a829      	add	r0, sp, #164	; 0xa4
    cc1c:	47a0      	blx	r4
    cc1e:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    cc20:	9609      	str	r6, [sp, #36]	; 0x24
    cc22:	0030      	movs	r0, r6
    cc24:	4b70      	ldr	r3, [pc, #448]	; (cde8 <lv_draw_rect+0x228c>)
    cc26:	4798      	blx	r3
    cc28:	9005      	str	r0, [sp, #20]
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    cc2a:	465b      	mov	r3, fp
    cc2c:	2218      	movs	r2, #24
    cc2e:	5e9b      	ldrsh	r3, [r3, r2]
    lv_color_t color = dsc->outline_color;
    cc30:	465a      	mov	r2, fp
    cc32:	8ad2      	ldrh	r2, [r2, #22]
    cc34:	9211      	str	r2, [sp, #68]	; 0x44
    cc36:	4669      	mov	r1, sp
    cc38:	830a      	strh	r2, [r1, #24]
    lv_blend_mode_t blend_mode = dsc->outline_blend_mode;
    cc3a:	465a      	mov	r2, fp
    cc3c:	7f52      	ldrb	r2, [r2, #29]
    cc3e:	4692      	mov	sl, r2
    if(simple_mode) {
    cc40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc42:	2a00      	cmp	r2, #0
    cc44:	d000      	beq.n	cc48 <lv_draw_rect+0x20ec>
    cc46:	e19b      	b.n	cf80 <lv_draw_rect+0x2424>
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    cc48:	3b01      	subs	r3, #1
    cc4a:	9310      	str	r3, [sp, #64]	; 0x40
    cc4c:	42bb      	cmp	r3, r7
    cc4e:	da00      	bge.n	cc52 <lv_draw_rect+0x20f6>
    cc50:	9710      	str	r7, [sp, #64]	; 0x40
        int32_t upper_corner_end = area_outer.y1 - disp_area->y1 + corner_size;
    cc52:	464b      	mov	r3, r9
    cc54:	2212      	movs	r2, #18
    cc56:	5e9b      	ldrsh	r3, [r3, r2]
    cc58:	a918      	add	r1, sp, #96	; 0x60
    cc5a:	2002      	movs	r0, #2
    cc5c:	5e0a      	ldrsh	r2, [r1, r0]
    cc5e:	1ad2      	subs	r2, r2, r3
    cc60:	9810      	ldr	r0, [sp, #64]	; 0x40
    cc62:	4684      	mov	ip, r0
    cc64:	4462      	add	r2, ip
    cc66:	0014      	movs	r4, r2
    cc68:	920c      	str	r2, [sp, #48]	; 0x30
        fill_area.x1 = area_outer.x1;
    cc6a:	aa1c      	add	r2, sp, #112	; 0x70
    cc6c:	8808      	ldrh	r0, [r1, #0]
    cc6e:	8010      	strh	r0, [r2, #0]
        fill_area.x2 = area_outer.x2;
    cc70:	8889      	ldrh	r1, [r1, #4]
    cc72:	8091      	strh	r1, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    cc74:	a91a      	add	r1, sp, #104	; 0x68
    cc76:	2702      	movs	r7, #2
    cc78:	5fcf      	ldrsh	r7, [r1, r7]
    cc7a:	19db      	adds	r3, r3, r7
    cc7c:	b21b      	sxth	r3, r3
    cc7e:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
    cc80:	80d3      	strh	r3, [r2, #6]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    cc82:	42bc      	cmp	r4, r7
    cc84:	da00      	bge.n	cc88 <lv_draw_rect+0x212c>
    cc86:	e082      	b.n	cd8e <lv_draw_rect+0x2232>
            fill_area2.y1 = fill_area.y1;
    cc88:	ac1e      	add	r4, sp, #120	; 0x78
    cc8a:	465b      	mov	r3, fp
    cc8c:	930d      	str	r3, [sp, #52]	; 0x34
    cc8e:	e02e      	b.n	ccee <lv_draw_rect+0x2192>
            fill_area2.x1 = area_outer.x2 - rout + 1;
    cc90:	ab18      	add	r3, sp, #96	; 0x60
    cc92:	2204      	movs	r2, #4
    cc94:	5e9b      	ldrsh	r3, [r3, r2]
    cc96:	1c5a      	adds	r2, r3, #1
    cc98:	1b55      	subs	r5, r2, r5
    cc9a:	8025      	strh	r5, [r4, #0]
            fill_area2.x2 = area_outer.x2;
    cc9c:	80a3      	strh	r3, [r4, #4]
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    cc9e:	9a07      	ldr	r2, [sp, #28]
    cca0:	1a9b      	subs	r3, r3, r2
    cca2:	3301      	adds	r3, #1
    cca4:	464a      	mov	r2, r9
    cca6:	2110      	movs	r1, #16
    cca8:	5e52      	ldrsh	r2, [r2, r1]
    ccaa:	a90e      	add	r1, sp, #56	; 0x38
    ccac:	2030      	movs	r0, #48	; 0x30
    ccae:	5e09      	ldrsh	r1, [r1, r0]
    ccb0:	1852      	adds	r2, r2, r1
    ccb2:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    ccb4:	43da      	mvns	r2, r3
    ccb6:	17d2      	asrs	r2, r2, #31
    ccb8:	4013      	ands	r3, r2
    ccba:	9a05      	ldr	r2, [sp, #20]
    ccbc:	4694      	mov	ip, r2
    ccbe:	4463      	add	r3, ip
    ccc0:	4652      	mov	r2, sl
    ccc2:	9202      	str	r2, [sp, #8]
    ccc4:	4642      	mov	r2, r8
    ccc6:	9201      	str	r2, [sp, #4]
    ccc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ccca:	9200      	str	r2, [sp, #0]
    cccc:	466a      	mov	r2, sp
    ccce:	8b12      	ldrh	r2, [r2, #24]
    ccd0:	0021      	movs	r1, r4
    ccd2:	9804      	ldr	r0, [sp, #16]
    ccd4:	4d45      	ldr	r5, [pc, #276]	; (cdec <lv_draw_rect+0x2290>)
    ccd6:	47a8      	blx	r5
            fill_area.y1++;
    ccd8:	ab1c      	add	r3, sp, #112	; 0x70
    ccda:	885a      	ldrh	r2, [r3, #2]
    ccdc:	3201      	adds	r2, #1
    ccde:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
    cce0:	88da      	ldrh	r2, [r3, #6]
    cce2:	3201      	adds	r2, #1
    cce4:	80da      	strh	r2, [r3, #6]
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    cce6:	3701      	adds	r7, #1
    cce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccea:	42bb      	cmp	r3, r7
    ccec:	db4d      	blt.n	cd8a <lv_draw_rect+0x222e>
            _lv_memset_ff(mask_buf, draw_area_w);
    ccee:	9909      	ldr	r1, [sp, #36]	; 0x24
    ccf0:	9e05      	ldr	r6, [sp, #20]
    ccf2:	0030      	movs	r0, r6
    ccf4:	4b3e      	ldr	r3, [pc, #248]	; (cdf0 <lv_draw_rect+0x2294>)
    ccf6:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    ccf8:	464b      	mov	r3, r9
    ccfa:	8a5a      	ldrh	r2, [r3, #18]
    ccfc:	19d2      	adds	r2, r2, r7
    ccfe:	b212      	sxth	r2, r2
    cd00:	8a19      	ldrh	r1, [r3, #16]
    cd02:	ab0e      	add	r3, sp, #56	; 0x38
    cd04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    cd06:	18c9      	adds	r1, r1, r3
    cd08:	b209      	sxth	r1, r1
    cd0a:	9b08      	ldr	r3, [sp, #32]
    cd0c:	0030      	movs	r0, r6
    cd0e:	4d39      	ldr	r5, [pc, #228]	; (cdf4 <lv_draw_rect+0x2298>)
    cd10:	47a8      	blx	r5
    cd12:	900a      	str	r0, [sp, #40]	; 0x28
            fill_area2.y1 = fill_area.y1;
    cd14:	ab1c      	add	r3, sp, #112	; 0x70
    cd16:	885a      	ldrh	r2, [r3, #2]
    cd18:	8062      	strh	r2, [r4, #2]
            fill_area2.y2 = fill_area.y2;
    cd1a:	88db      	ldrh	r3, [r3, #6]
    cd1c:	80e3      	strh	r3, [r4, #6]
            fill_area2.x1 = area_outer.x1;
    cd1e:	ab18      	add	r3, sp, #96	; 0x60
    cd20:	930b      	str	r3, [sp, #44]	; 0x2c
    cd22:	2100      	movs	r1, #0
    cd24:	5e5b      	ldrsh	r3, [r3, r1]
    cd26:	8023      	strh	r3, [r4, #0]
            fill_area2.x2 = area_outer.x1 + rout - 1;
    cd28:	466a      	mov	r2, sp
    cd2a:	8b95      	ldrh	r5, [r2, #28]
    cd2c:	3b01      	subs	r3, #1
    cd2e:	18eb      	adds	r3, r5, r3
    cd30:	80a3      	strh	r3, [r4, #4]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    cd32:	4652      	mov	r2, sl
    cd34:	9202      	str	r2, [sp, #8]
    cd36:	4642      	mov	r2, r8
    cd38:	9201      	str	r2, [sp, #4]
    cd3a:	9000      	str	r0, [sp, #0]
    cd3c:	0033      	movs	r3, r6
    cd3e:	466a      	mov	r2, sp
    cd40:	8b12      	ldrh	r2, [r2, #24]
    cd42:	0021      	movs	r1, r4
    cd44:	9804      	ldr	r0, [sp, #16]
    cd46:	4e29      	ldr	r6, [pc, #164]	; (cdec <lv_draw_rect+0x2290>)
    cd48:	47b0      	blx	r6
            if(fill_area2.y2 < area_outer.y1 + dsc->outline_width) {
    cd4a:	2306      	movs	r3, #6
    cd4c:	5ee2      	ldrsh	r2, [r4, r3]
    cd4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd50:	2102      	movs	r1, #2
    cd52:	5e5b      	ldrsh	r3, [r3, r1]
    cd54:	990d      	ldr	r1, [sp, #52]	; 0x34
    cd56:	2018      	movs	r0, #24
    cd58:	5e09      	ldrsh	r1, [r1, r0]
    cd5a:	185b      	adds	r3, r3, r1
    cd5c:	429a      	cmp	r2, r3
    cd5e:	da97      	bge.n	cc90 <lv_draw_rect+0x2134>
                fill_area2.x1 = area_outer.x1 + rout;
    cd60:	aa18      	add	r2, sp, #96	; 0x60
    cd62:	8813      	ldrh	r3, [r2, #0]
    cd64:	18eb      	adds	r3, r5, r3
    cd66:	8023      	strh	r3, [r4, #0]
                fill_area2.x2 = area_outer.x2 - rout;
    cd68:	8893      	ldrh	r3, [r2, #4]
    cd6a:	1b5b      	subs	r3, r3, r5
    cd6c:	80a3      	strh	r3, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    cd6e:	4653      	mov	r3, sl
    cd70:	9302      	str	r3, [sp, #8]
    cd72:	4643      	mov	r3, r8
    cd74:	9301      	str	r3, [sp, #4]
    cd76:	2301      	movs	r3, #1
    cd78:	9300      	str	r3, [sp, #0]
    cd7a:	2300      	movs	r3, #0
    cd7c:	466a      	mov	r2, sp
    cd7e:	8b12      	ldrh	r2, [r2, #24]
    cd80:	0021      	movs	r1, r4
    cd82:	9804      	ldr	r0, [sp, #16]
    cd84:	4e19      	ldr	r6, [pc, #100]	; (cdec <lv_draw_rect+0x2290>)
    cd86:	47b0      	blx	r6
    cd88:	e782      	b.n	cc90 <lv_draw_rect+0x2134>
    cd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd8c:	469b      	mov	fp, r3
        int32_t lower_corner_end = area_outer.y2 - disp_area->y1 - corner_size;
    cd8e:	464b      	mov	r3, r9
    cd90:	2212      	movs	r2, #18
    cd92:	5e9b      	ldrsh	r3, [r3, r2]
    cd94:	aa18      	add	r2, sp, #96	; 0x60
    cd96:	2706      	movs	r7, #6
    cd98:	5fd7      	ldrsh	r7, [r2, r7]
    cd9a:	1aff      	subs	r7, r7, r3
    cd9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cd9e:	1abf      	subs	r7, r7, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    cda0:	990c      	ldr	r1, [sp, #48]	; 0x30
    cda2:	000a      	movs	r2, r1
    cda4:	42b9      	cmp	r1, r7
    cda6:	db01      	blt.n	cdac <lv_draw_rect+0x2250>
    cda8:	3201      	adds	r2, #1
    cdaa:	0017      	movs	r7, r2
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    cdac:	19db      	adds	r3, r3, r7
    cdae:	b21b      	sxth	r3, r3
    cdb0:	aa1c      	add	r2, sp, #112	; 0x70
    cdb2:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
    cdb4:	80d3      	strh	r3, [r2, #6]
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    cdb6:	ab1a      	add	r3, sp, #104	; 0x68
    cdb8:	2206      	movs	r2, #6
    cdba:	5e9b      	ldrsh	r3, [r3, r2]
    cdbc:	429f      	cmp	r7, r3
    cdbe:	dd00      	ble.n	cdc2 <lv_draw_rect+0x2266>
    cdc0:	e09a      	b.n	cef8 <lv_draw_rect+0x239c>
            fill_area2.x1 = area_outer.x1;
    cdc2:	ac1e      	add	r4, sp, #120	; 0x78
    cdc4:	465b      	mov	r3, fp
    cdc6:	930b      	str	r3, [sp, #44]	; 0x2c
    cdc8:	e047      	b.n	ce5a <lv_draw_rect+0x22fe>
    cdca:	46c0      	nop			; (mov r8, r8)
    cdcc:	00007c18 	.word	0x00007c18
    cdd0:	00011a7d 	.word	0x00011a7d
    cdd4:	0000fed9 	.word	0x0000fed9
    cdd8:	0000815d 	.word	0x0000815d
    cddc:	000081ad 	.word	0x000081ad
    cde0:	0000a7ed 	.word	0x0000a7ed
    cde4:	0000a585 	.word	0x0000a585
    cde8:	00010e59 	.word	0x00010e59
    cdec:	00005c05 	.word	0x00005c05
    cdf0:	00011089 	.word	0x00011089
    cdf4:	0000a5bd 	.word	0x0000a5bd
            fill_area2.x1 = area_outer.x2 - rout + 1;
    cdf8:	ab18      	add	r3, sp, #96	; 0x60
    cdfa:	2204      	movs	r2, #4
    cdfc:	5e9b      	ldrsh	r3, [r3, r2]
    cdfe:	1c5a      	adds	r2, r3, #1
    ce00:	1b55      	subs	r5, r2, r5
    ce02:	8025      	strh	r5, [r4, #0]
            fill_area2.x2 = area_outer.x2;
    ce04:	80a3      	strh	r3, [r4, #4]
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    ce06:	9a07      	ldr	r2, [sp, #28]
    ce08:	1a9b      	subs	r3, r3, r2
    ce0a:	3301      	adds	r3, #1
    ce0c:	464a      	mov	r2, r9
    ce0e:	2110      	movs	r1, #16
    ce10:	5e52      	ldrsh	r2, [r2, r1]
    ce12:	a90e      	add	r1, sp, #56	; 0x38
    ce14:	2030      	movs	r0, #48	; 0x30
    ce16:	5e09      	ldrsh	r1, [r1, r0]
    ce18:	1852      	adds	r2, r2, r1
    ce1a:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    ce1c:	43da      	mvns	r2, r3
    ce1e:	17d2      	asrs	r2, r2, #31
    ce20:	4013      	ands	r3, r2
    ce22:	9a05      	ldr	r2, [sp, #20]
    ce24:	4694      	mov	ip, r2
    ce26:	4463      	add	r3, ip
    ce28:	4652      	mov	r2, sl
    ce2a:	9202      	str	r2, [sp, #8]
    ce2c:	4642      	mov	r2, r8
    ce2e:	9201      	str	r2, [sp, #4]
    ce30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ce32:	9200      	str	r2, [sp, #0]
    ce34:	466a      	mov	r2, sp
    ce36:	8b12      	ldrh	r2, [r2, #24]
    ce38:	0021      	movs	r1, r4
    ce3a:	9804      	ldr	r0, [sp, #16]
    ce3c:	4d89      	ldr	r5, [pc, #548]	; (d064 <lv_draw_rect+0x2508>)
    ce3e:	47a8      	blx	r5
            fill_area.y1++;
    ce40:	ab1c      	add	r3, sp, #112	; 0x70
    ce42:	885a      	ldrh	r2, [r3, #2]
    ce44:	3201      	adds	r2, #1
    ce46:	805a      	strh	r2, [r3, #2]
            fill_area.y2++;
    ce48:	88da      	ldrh	r2, [r3, #6]
    ce4a:	3201      	adds	r2, #1
    ce4c:	80da      	strh	r2, [r3, #6]
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    ce4e:	3701      	adds	r7, #1
    ce50:	ab0e      	add	r3, sp, #56	; 0x38
    ce52:	2236      	movs	r2, #54	; 0x36
    ce54:	5e9b      	ldrsh	r3, [r3, r2]
    ce56:	429f      	cmp	r7, r3
    ce58:	dc4c      	bgt.n	cef4 <lv_draw_rect+0x2398>
            _lv_memset_ff(mask_buf, draw_area_w);
    ce5a:	9909      	ldr	r1, [sp, #36]	; 0x24
    ce5c:	9e05      	ldr	r6, [sp, #20]
    ce5e:	0030      	movs	r0, r6
    ce60:	4b81      	ldr	r3, [pc, #516]	; (d068 <lv_draw_rect+0x250c>)
    ce62:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    ce64:	464b      	mov	r3, r9
    ce66:	8a5a      	ldrh	r2, [r3, #18]
    ce68:	19d2      	adds	r2, r2, r7
    ce6a:	b212      	sxth	r2, r2
    ce6c:	8a19      	ldrh	r1, [r3, #16]
    ce6e:	ab0e      	add	r3, sp, #56	; 0x38
    ce70:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    ce72:	18c9      	adds	r1, r1, r3
    ce74:	b209      	sxth	r1, r1
    ce76:	9b08      	ldr	r3, [sp, #32]
    ce78:	0030      	movs	r0, r6
    ce7a:	4d7c      	ldr	r5, [pc, #496]	; (d06c <lv_draw_rect+0x2510>)
    ce7c:	47a8      	blx	r5
    ce7e:	900a      	str	r0, [sp, #40]	; 0x28
            fill_area2.x1 = area_outer.x1;
    ce80:	ab0e      	add	r3, sp, #56	; 0x38
    ce82:	2128      	movs	r1, #40	; 0x28
    ce84:	5e5b      	ldrsh	r3, [r3, r1]
    ce86:	8023      	strh	r3, [r4, #0]
            fill_area2.x2 = area_outer.x1 + rout - 1;
    ce88:	466a      	mov	r2, sp
    ce8a:	8b95      	ldrh	r5, [r2, #28]
    ce8c:	3b01      	subs	r3, #1
    ce8e:	18eb      	adds	r3, r5, r3
    ce90:	80a3      	strh	r3, [r4, #4]
            fill_area2.y1 = fill_area.y1;
    ce92:	ab1c      	add	r3, sp, #112	; 0x70
    ce94:	885a      	ldrh	r2, [r3, #2]
    ce96:	8062      	strh	r2, [r4, #2]
            fill_area2.y2 = fill_area.y2;
    ce98:	88db      	ldrh	r3, [r3, #6]
    ce9a:	80e3      	strh	r3, [r4, #6]
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    ce9c:	4652      	mov	r2, sl
    ce9e:	9202      	str	r2, [sp, #8]
    cea0:	4642      	mov	r2, r8
    cea2:	9201      	str	r2, [sp, #4]
    cea4:	9000      	str	r0, [sp, #0]
    cea6:	0033      	movs	r3, r6
    cea8:	466a      	mov	r2, sp
    ceaa:	8b12      	ldrh	r2, [r2, #24]
    ceac:	0021      	movs	r1, r4
    ceae:	9804      	ldr	r0, [sp, #16]
    ceb0:	4e6c      	ldr	r6, [pc, #432]	; (d064 <lv_draw_rect+0x2508>)
    ceb2:	47b0      	blx	r6
            if(fill_area2.y2 > area_outer.y2 - dsc->outline_width) {
    ceb4:	2306      	movs	r3, #6
    ceb6:	5ee2      	ldrsh	r2, [r4, r3]
    ceb8:	ab0e      	add	r3, sp, #56	; 0x38
    ceba:	212e      	movs	r1, #46	; 0x2e
    cebc:	5e5b      	ldrsh	r3, [r3, r1]
    cebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cec0:	2018      	movs	r0, #24
    cec2:	5e09      	ldrsh	r1, [r1, r0]
    cec4:	1a5b      	subs	r3, r3, r1
    cec6:	429a      	cmp	r2, r3
    cec8:	dd96      	ble.n	cdf8 <lv_draw_rect+0x229c>
                fill_area2.x1 = area_outer.x1 + rout;
    ceca:	aa18      	add	r2, sp, #96	; 0x60
    cecc:	8813      	ldrh	r3, [r2, #0]
    cece:	18eb      	adds	r3, r5, r3
    ced0:	8023      	strh	r3, [r4, #0]
                fill_area2.x2 = area_outer.x2 - rout;
    ced2:	8893      	ldrh	r3, [r2, #4]
    ced4:	1b5b      	subs	r3, r3, r5
    ced6:	80a3      	strh	r3, [r4, #4]
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    ced8:	4653      	mov	r3, sl
    ceda:	9302      	str	r3, [sp, #8]
    cedc:	4643      	mov	r3, r8
    cede:	9301      	str	r3, [sp, #4]
    cee0:	2301      	movs	r3, #1
    cee2:	9300      	str	r3, [sp, #0]
    cee4:	2300      	movs	r3, #0
    cee6:	466a      	mov	r2, sp
    cee8:	8b12      	ldrh	r2, [r2, #24]
    ceea:	0021      	movs	r1, r4
    ceec:	9804      	ldr	r0, [sp, #16]
    ceee:	4e5d      	ldr	r6, [pc, #372]	; (d064 <lv_draw_rect+0x2508>)
    cef0:	47b0      	blx	r6
    cef2:	e781      	b.n	cdf8 <lv_draw_rect+0x229c>
    cef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cef6:	469b      	mov	fp, r3
        fill_area.y1 = area_outer.y1 + corner_size + 1;
    cef8:	466b      	mov	r3, sp
    cefa:	2240      	movs	r2, #64	; 0x40
    cefc:	189b      	adds	r3, r3, r2
    cefe:	881b      	ldrh	r3, [r3, #0]
    cf00:	ac1c      	add	r4, sp, #112	; 0x70
    cf02:	ad18      	add	r5, sp, #96	; 0x60
    cf04:	886a      	ldrh	r2, [r5, #2]
    cf06:	3201      	adds	r2, #1
    cf08:	189a      	adds	r2, r3, r2
    cf0a:	8062      	strh	r2, [r4, #2]
        fill_area.y2 = area_outer.y2 - corner_size - 1;
    cf0c:	88ea      	ldrh	r2, [r5, #6]
    cf0e:	3a01      	subs	r2, #1
    cf10:	1ad3      	subs	r3, r2, r3
    cf12:	80e3      	strh	r3, [r4, #6]
        fill_area.x1 = area_outer.x1;
    cf14:	2200      	movs	r2, #0
    cf16:	5eab      	ldrsh	r3, [r5, r2]
    cf18:	8023      	strh	r3, [r4, #0]
        fill_area.x2 = area_outer.x1 + dsc->outline_width - 1;
    cf1a:	3b01      	subs	r3, #1
    cf1c:	465a      	mov	r2, fp
    cf1e:	8b12      	ldrh	r2, [r2, #24]
    cf20:	18d3      	adds	r3, r2, r3
    cf22:	80a3      	strh	r3, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    cf24:	4653      	mov	r3, sl
    cf26:	9302      	str	r3, [sp, #8]
    cf28:	4643      	mov	r3, r8
    cf2a:	9301      	str	r3, [sp, #4]
    cf2c:	2701      	movs	r7, #1
    cf2e:	9700      	str	r7, [sp, #0]
    cf30:	2300      	movs	r3, #0
    cf32:	466a      	mov	r2, sp
    cf34:	2144      	movs	r1, #68	; 0x44
    cf36:	1852      	adds	r2, r2, r1
    cf38:	8812      	ldrh	r2, [r2, #0]
    cf3a:	0021      	movs	r1, r4
    cf3c:	9804      	ldr	r0, [sp, #16]
    cf3e:	4e49      	ldr	r6, [pc, #292]	; (d064 <lv_draw_rect+0x2508>)
    cf40:	47b0      	blx	r6
        fill_area.x1 = area_outer.x2 - dsc->outline_width + 1;
    cf42:	2304      	movs	r3, #4
    cf44:	5eea      	ldrsh	r2, [r5, r3]
    cf46:	1c53      	adds	r3, r2, #1
    cf48:	4659      	mov	r1, fp
    cf4a:	8b09      	ldrh	r1, [r1, #24]
    cf4c:	1a5b      	subs	r3, r3, r1
    cf4e:	8023      	strh	r3, [r4, #0]
        fill_area.x2 = area_outer.x2;
    cf50:	80a2      	strh	r2, [r4, #4]
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    cf52:	4653      	mov	r3, sl
    cf54:	9302      	str	r3, [sp, #8]
    cf56:	4643      	mov	r3, r8
    cf58:	9301      	str	r3, [sp, #4]
    cf5a:	9700      	str	r7, [sp, #0]
    cf5c:	2300      	movs	r3, #0
    cf5e:	466a      	mov	r2, sp
    cf60:	2144      	movs	r1, #68	; 0x44
    cf62:	1852      	adds	r2, r2, r1
    cf64:	8812      	ldrh	r2, [r2, #0]
    cf66:	0021      	movs	r1, r4
    cf68:	9804      	ldr	r0, [sp, #16]
    cf6a:	47b0      	blx	r6
    lv_draw_mask_remove_id(mask_rin_id);
    cf6c:	980e      	ldr	r0, [sp, #56]	; 0x38
    cf6e:	4c40      	ldr	r4, [pc, #256]	; (d070 <lv_draw_rect+0x2514>)
    cf70:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    cf72:	980f      	ldr	r0, [sp, #60]	; 0x3c
    cf74:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    cf76:	9805      	ldr	r0, [sp, #20]
    cf78:	4b3e      	ldr	r3, [pc, #248]	; (d074 <lv_draw_rect+0x2518>)
    cf7a:	4798      	blx	r3
    cf7c:	f7fe fdcf 	bl	bb1e <lv_draw_rect+0xfc2>
        fill_area.x1 = area_outer.x1;
    cf80:	aa1c      	add	r2, sp, #112	; 0x70
    cf82:	ab18      	add	r3, sp, #96	; 0x60
    cf84:	8819      	ldrh	r1, [r3, #0]
    cf86:	8011      	strh	r1, [r2, #0]
        fill_area.x2 = area_outer.x2;
    cf88:	889b      	ldrh	r3, [r3, #4]
    cf8a:	8093      	strh	r3, [r2, #4]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    cf8c:	a91a      	add	r1, sp, #104	; 0x68
    cf8e:	2302      	movs	r3, #2
    cf90:	5ece      	ldrsh	r6, [r1, r3]
    cf92:	464b      	mov	r3, r9
    cf94:	8a5b      	ldrh	r3, [r3, #18]
    cf96:	199b      	adds	r3, r3, r6
    cf98:	b21b      	sxth	r3, r3
    cf9a:	8053      	strh	r3, [r2, #2]
        fill_area.y2 = fill_area.y1;
    cf9c:	80d3      	strh	r3, [r2, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    cf9e:	2206      	movs	r2, #6
    cfa0:	5e8b      	ldrsh	r3, [r1, r2]
    cfa2:	429e      	cmp	r6, r3
    cfa4:	dce2      	bgt.n	cf6c <lv_draw_rect+0x2410>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    cfa6:	4b31      	ldr	r3, [pc, #196]	; (d06c <lv_draw_rect+0x2510>)
    cfa8:	469b      	mov	fp, r3
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    cfaa:	4f2e      	ldr	r7, [pc, #184]	; (d064 <lv_draw_rect+0x2508>)
            _lv_memset_ff(mask_buf, draw_area_w);
    cfac:	9909      	ldr	r1, [sp, #36]	; 0x24
    cfae:	9c05      	ldr	r4, [sp, #20]
    cfb0:	0020      	movs	r0, r4
    cfb2:	4b2d      	ldr	r3, [pc, #180]	; (d068 <lv_draw_rect+0x250c>)
    cfb4:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    cfb6:	464b      	mov	r3, r9
    cfb8:	8a5a      	ldrh	r2, [r3, #18]
    cfba:	1992      	adds	r2, r2, r6
    cfbc:	b212      	sxth	r2, r2
    cfbe:	ad1a      	add	r5, sp, #104	; 0x68
    cfc0:	8a19      	ldrh	r1, [r3, #16]
    cfc2:	882b      	ldrh	r3, [r5, #0]
    cfc4:	18c9      	adds	r1, r1, r3
    cfc6:	b209      	sxth	r1, r1
    cfc8:	9b08      	ldr	r3, [sp, #32]
    cfca:	9405      	str	r4, [sp, #20]
    cfcc:	0020      	movs	r0, r4
    cfce:	47d8      	blx	fp
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    cfd0:	ac1c      	add	r4, sp, #112	; 0x70
    cfd2:	4652      	mov	r2, sl
    cfd4:	9202      	str	r2, [sp, #8]
    cfd6:	4642      	mov	r2, r8
    cfd8:	9201      	str	r2, [sp, #4]
    cfda:	9000      	str	r0, [sp, #0]
    cfdc:	9b05      	ldr	r3, [sp, #20]
    cfde:	466a      	mov	r2, sp
    cfe0:	8b12      	ldrh	r2, [r2, #24]
    cfe2:	0021      	movs	r1, r4
    cfe4:	9804      	ldr	r0, [sp, #16]
    cfe6:	47b8      	blx	r7
            fill_area.y1++;
    cfe8:	8863      	ldrh	r3, [r4, #2]
    cfea:	3301      	adds	r3, #1
    cfec:	8063      	strh	r3, [r4, #2]
            fill_area.y2++;
    cfee:	88e3      	ldrh	r3, [r4, #6]
    cff0:	3301      	adds	r3, #1
    cff2:	80e3      	strh	r3, [r4, #6]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    cff4:	3601      	adds	r6, #1
    cff6:	2206      	movs	r2, #6
    cff8:	5eab      	ldrsh	r3, [r5, r2]
    cffa:	429e      	cmp	r6, r3
    cffc:	ddd6      	ble.n	cfac <lv_draw_rect+0x2450>
    cffe:	e7b5      	b.n	cf6c <lv_draw_rect+0x2410>
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    d000:	9c07      	ldr	r4, [sp, #28]
    d002:	940c      	str	r4, [sp, #48]	; 0x30
    d004:	0020      	movs	r0, r4
    d006:	4b1c      	ldr	r3, [pc, #112]	; (d078 <lv_draw_rect+0x251c>)
    d008:	4798      	blx	r3
    d00a:	900a      	str	r0, [sp, #40]	; 0x28
    for(y = 0; y < size; y++) {
    d00c:	2201      	movs	r2, #1
    d00e:	920d      	str	r2, [sp, #52]	; 0x34
    d010:	2c00      	cmp	r4, #0
    d012:	dd01      	ble.n	d018 <lv_draw_rect+0x24bc>
    d014:	f7fd fea3 	bl	ad5e <lv_draw_rect+0x202>
    _lv_mem_buf_release(mask_line);
    d018:	980a      	ldr	r0, [sp, #40]	; 0x28
    d01a:	4b16      	ldr	r3, [pc, #88]	; (d074 <lv_draw_rect+0x2518>)
    d01c:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
    d01e:	9f07      	ldr	r7, [sp, #28]
    d020:	437f      	muls	r7, r7
    d022:	2f00      	cmp	r7, #0
    d024:	d101      	bne.n	d02a <lv_draw_rect+0x24ce>
    d026:	f7fd ff5f 	bl	aee8 <lv_draw_rect+0x38c>
    d02a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d02c:	0011      	movs	r1, r2
    d02e:	0078      	lsls	r0, r7, #1
    d030:	4694      	mov	ip, r2
    d032:	4460      	add	r0, ip
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSACALE_SHIFT);
    d034:	880b      	ldrh	r3, [r1, #0]
    d036:	099b      	lsrs	r3, r3, #6
    d038:	7013      	strb	r3, [r2, #0]
    d03a:	3102      	adds	r1, #2
    d03c:	3201      	adds	r2, #1
        for(i = 0; i < size * size; i++) {
    d03e:	4281      	cmp	r1, r0
    d040:	d1f8      	bne.n	d034 <lv_draw_rect+0x24d8>
    d042:	f7fd ff51 	bl	aee8 <lv_draw_rect+0x38c>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    d046:	465b      	mov	r3, fp
    d048:	2200      	movs	r2, #0
    d04a:	5e9a      	ldrsh	r2, [r3, r2]
    d04c:	2300      	movs	r3, #0
    d04e:	4649      	mov	r1, r9
    d050:	a829      	add	r0, sp, #164	; 0xa4
    d052:	4c0a      	ldr	r4, [pc, #40]	; (d07c <lv_draw_rect+0x2520>)
    d054:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    d056:	2100      	movs	r1, #0
    d058:	a829      	add	r0, sp, #164	; 0xa4
    d05a:	4b09      	ldr	r3, [pc, #36]	; (d080 <lv_draw_rect+0x2524>)
    d05c:	4798      	blx	r3
    d05e:	0004      	movs	r4, r0
    d060:	f7ff f946 	bl	c2f0 <lv_draw_rect+0x1794>
    d064:	00005c05 	.word	0x00005c05
    d068:	00011089 	.word	0x00011089
    d06c:	0000a5bd 	.word	0x0000a5bd
    d070:	0000a611 	.word	0x0000a611
    d074:	00010b6d 	.word	0x00010b6d
    d078:	00010e59 	.word	0x00010e59
    d07c:	0000a7ed 	.word	0x0000a7ed
    d080:	0000a585 	.word	0x0000a585

0000d084 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
    d084:	b5f0      	push	{r4, r5, r6, r7, lr}
    d086:	b083      	sub	sp, #12
    d088:	0004      	movs	r4, r0
    d08a:	000e      	movs	r6, r1
    d08c:	0017      	movs	r7, r2
    lv_color_t p_color = LV_COLOR_BLACK;
    d08e:	aa01      	add	r2, sp, #4
    d090:	7811      	ldrb	r1, [r2, #0]
    d092:	201f      	movs	r0, #31
    d094:	4381      	bics	r1, r0
    d096:	7011      	strb	r1, [r2, #0]
    d098:	8811      	ldrh	r1, [r2, #0]
    d09a:	4840      	ldr	r0, [pc, #256]	; (d19c <lv_img_buf_get_px_color+0x118>)
    d09c:	4001      	ands	r1, r0
    d09e:	8011      	strh	r1, [r2, #0]
    d0a0:	2100      	movs	r1, #0
    d0a2:	7051      	strb	r1, [r2, #1]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    d0a4:	68a5      	ldr	r5, [r4, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
    d0a6:	7821      	ldrb	r1, [r4, #0]
    d0a8:	221f      	movs	r2, #31
    d0aa:	400a      	ands	r2, r1
    d0ac:	1f11      	subs	r1, r2, #4
    d0ae:	2902      	cmp	r1, #2
    d0b0:	d90d      	bls.n	d0ce <lv_img_buf_get_px_color+0x4a>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a deafult alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
    d0b2:	2a07      	cmp	r2, #7
    d0b4:	d022      	beq.n	d0fc <lv_img_buf_get_px_color+0x78>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
    d0b6:	2a08      	cmp	r2, #8
    d0b8:	d034      	beq.n	d124 <lv_img_buf_get_px_color+0xa0>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
    d0ba:	2a09      	cmp	r2, #9
    d0bc:	d048      	beq.n	d150 <lv_img_buf_get_px_color+0xcc>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    d0be:	2a0a      	cmp	r2, #10
    d0c0:	d05e      	beq.n	d180 <lv_img_buf_get_px_color+0xfc>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    d0c2:	3a0b      	subs	r2, #11
    d0c4:	2a03      	cmp	r2, #3
    d0c6:	d815      	bhi.n	d0f4 <lv_img_buf_get_px_color+0x70>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        p_color = color;
    d0c8:	aa01      	add	r2, sp, #4
    d0ca:	8013      	strh	r3, [r2, #0]
    d0cc:	e012      	b.n	d0f4 <lv_img_buf_get_px_color+0x70>
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
    d0ce:	7820      	ldrb	r0, [r4, #0]
    d0d0:	06c0      	lsls	r0, r0, #27
    d0d2:	0ec0      	lsrs	r0, r0, #27
    d0d4:	4b32      	ldr	r3, [pc, #200]	; (d1a0 <lv_img_buf_get_px_color+0x11c>)
    d0d6:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
    d0d8:	6823      	ldr	r3, [r4, #0]
    d0da:	02db      	lsls	r3, r3, #11
    d0dc:	0d5b      	lsrs	r3, r3, #21
    d0de:	435f      	muls	r7, r3
    d0e0:	19be      	adds	r6, r7, r6
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
    d0e2:	08c0      	lsrs	r0, r0, #3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
    d0e4:	b2c0      	uxtb	r0, r0
    d0e6:	4370      	muls	r0, r6
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
    d0e8:	1828      	adds	r0, r5, r0
        *d8 = *s8;
    d0ea:	ab01      	add	r3, sp, #4
    d0ec:	7802      	ldrb	r2, [r0, #0]
    d0ee:	701a      	strb	r2, [r3, #0]
    d0f0:	7842      	ldrb	r2, [r0, #1]
    d0f2:	705a      	strb	r2, [r3, #1]
    }
    return p_color;
    d0f4:	ab01      	add	r3, sp, #4
    d0f6:	8818      	ldrh	r0, [r3, #0]
}
    d0f8:	b003      	add	sp, #12
    d0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    d0fc:	4032      	ands	r2, r6
    d0fe:	2307      	movs	r3, #7
    d100:	1a9a      	subs	r2, r3, r2
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
    d102:	6820      	ldr	r0, [r4, #0]
    d104:	02c0      	lsls	r0, r0, #11
    d106:	0d40      	lsrs	r0, r0, #21
    d108:	3007      	adds	r0, #7
    d10a:	10c0      	asrs	r0, r0, #3
    d10c:	4347      	muls	r7, r0
    d10e:	10f6      	asrs	r6, r6, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    d110:	19ed      	adds	r5, r5, r7
    d112:	19ae      	adds	r6, r5, r6
    d114:	7a31      	ldrb	r1, [r6, #8]
    d116:	3b06      	subs	r3, #6
    d118:	4093      	lsls	r3, r2
    d11a:	400b      	ands	r3, r1
    d11c:	4113      	asrs	r3, r2
    d11e:	aa01      	add	r2, sp, #4
    d120:	8013      	strh	r3, [r2, #0]
    d122:	e7e7      	b.n	d0f4 <lv_img_buf_get_px_color+0x70>
        uint8_t bit = (x & 0x3) * 2;
    d124:	3a05      	subs	r2, #5
    d126:	4032      	ands	r2, r6
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    d128:	0052      	lsls	r2, r2, #1
    d12a:	2306      	movs	r3, #6
    d12c:	1a9a      	subs	r2, r3, r2
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
    d12e:	6820      	ldr	r0, [r4, #0]
    d130:	02c0      	lsls	r0, r0, #11
    d132:	0d40      	lsrs	r0, r0, #21
    d134:	3003      	adds	r0, #3
    d136:	1080      	asrs	r0, r0, #2
    d138:	4347      	muls	r7, r0
    d13a:	10b6      	asrs	r6, r6, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    d13c:	19ed      	adds	r5, r5, r7
    d13e:	19ae      	adds	r6, r5, r6
    d140:	7c31      	ldrb	r1, [r6, #16]
    d142:	3b03      	subs	r3, #3
    d144:	4093      	lsls	r3, r2
    d146:	400b      	ands	r3, r1
    d148:	4113      	asrs	r3, r2
    d14a:	aa01      	add	r2, sp, #4
    d14c:	8013      	strh	r3, [r2, #0]
    d14e:	e7d1      	b.n	d0f4 <lv_img_buf_get_px_color+0x70>
        uint8_t bit = (x & 0x1) * 4;
    d150:	2301      	movs	r3, #1
    d152:	4033      	ands	r3, r6
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    d154:	009b      	lsls	r3, r3, #2
    d156:	3a05      	subs	r2, #5
    d158:	1ad3      	subs	r3, r2, r3
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
    d15a:	6820      	ldr	r0, [r4, #0]
    d15c:	02c0      	lsls	r0, r0, #11
    d15e:	0d40      	lsrs	r0, r0, #21
    d160:	3001      	adds	r0, #1
    d162:	1040      	asrs	r0, r0, #1
    d164:	4347      	muls	r7, r0
    d166:	1076      	asrs	r6, r6, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    d168:	19ed      	adds	r5, r5, r7
    d16a:	19ad      	adds	r5, r5, r6
    d16c:	3540      	adds	r5, #64	; 0x40
    d16e:	7829      	ldrb	r1, [r5, #0]
    d170:	320b      	adds	r2, #11
    d172:	409a      	lsls	r2, r3
    d174:	400a      	ands	r2, r1
    d176:	411a      	asrs	r2, r3
    d178:	0013      	movs	r3, r2
    d17a:	aa01      	add	r2, sp, #4
    d17c:	8013      	strh	r3, [r2, #0]
    d17e:	e7b9      	b.n	d0f4 <lv_img_buf_get_px_color+0x70>
        uint32_t px  = dsc->header.w * y + x;
    d180:	6823      	ldr	r3, [r4, #0]
    d182:	02db      	lsls	r3, r3, #11
    d184:	0d5b      	lsrs	r3, r3, #21
    d186:	437b      	muls	r3, r7
        p_color.full = buf_u8[px];
    d188:	19ad      	adds	r5, r5, r6
    d18a:	18ed      	adds	r5, r5, r3
    d18c:	2380      	movs	r3, #128	; 0x80
    d18e:	00db      	lsls	r3, r3, #3
    d190:	469c      	mov	ip, r3
    d192:	4465      	add	r5, ip
    d194:	782a      	ldrb	r2, [r5, #0]
    d196:	ab01      	add	r3, sp, #4
    d198:	801a      	strh	r2, [r3, #0]
    d19a:	e7ab      	b.n	d0f4 <lv_img_buf_get_px_color+0x70>
    d19c:	fffff81f 	.word	0xfffff81f
    d1a0:	00007e7d 	.word	0x00007e7d

0000d1a4 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    d1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1a6:	b087      	sub	sp, #28
    d1a8:	0004      	movs	r4, r0
    d1aa:	9201      	str	r2, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    d1ac:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
    d1ae:	7800      	ldrb	r0, [r0, #0]
    d1b0:	231f      	movs	r3, #31
    d1b2:	4003      	ands	r3, r0
    d1b4:	2b05      	cmp	r3, #5
    d1b6:	d00a      	beq.n	d1ce <lv_img_buf_get_px_alpha+0x2a>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
    d1b8:	2b0b      	cmp	r3, #11
    d1ba:	d012      	beq.n	d1e2 <lv_img_buf_get_px_alpha+0x3e>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
    d1bc:	2b0c      	cmp	r3, #12
    d1be:	d028      	beq.n	d212 <lv_img_buf_get_px_alpha+0x6e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
    d1c0:	2b0d      	cmp	r3, #13
    d1c2:	d047      	beq.n	d254 <lv_img_buf_get_px_alpha+0xb0>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
    d1c4:	20ff      	movs	r0, #255	; 0xff
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    d1c6:	2b0e      	cmp	r3, #14
    d1c8:	d064      	beq.n	d294 <lv_img_buf_get_px_alpha+0xf0>
}
    d1ca:	b007      	add	sp, #28
    d1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
    d1ce:	6823      	ldr	r3, [r4, #0]
    d1d0:	02db      	lsls	r3, r3, #11
    d1d2:	0d5b      	lsrs	r3, r3, #21
    d1d4:	435a      	muls	r2, r3
    d1d6:	1851      	adds	r1, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    d1d8:	004a      	lsls	r2, r1, #1
    d1da:	1851      	adds	r1, r2, r1
    d1dc:	1871      	adds	r1, r6, r1
    d1de:	7888      	ldrb	r0, [r1, #2]
    d1e0:	e7f3      	b.n	d1ca <lv_img_buf_get_px_alpha+0x26>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    d1e2:	2507      	movs	r5, #7
    d1e4:	400d      	ands	r5, r1
    d1e6:	3b04      	subs	r3, #4
    d1e8:	1b5d      	subs	r5, r3, r5
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
    d1ea:	6823      	ldr	r3, [r4, #0]
    d1ec:	02db      	lsls	r3, r3, #11
    d1ee:	0d5b      	lsrs	r3, r3, #21
    d1f0:	3307      	adds	r3, #7
    d1f2:	10db      	asrs	r3, r3, #3
    d1f4:	9a01      	ldr	r2, [sp, #4]
    d1f6:	435a      	muls	r2, r3
    d1f8:	10c9      	asrs	r1, r1, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    d1fa:	18b2      	adds	r2, r6, r2
    d1fc:	5c53      	ldrb	r3, [r2, r1]
    d1fe:	2001      	movs	r0, #1
    d200:	40a8      	lsls	r0, r5
    d202:	4018      	ands	r0, r3
    d204:	4128      	asrs	r0, r5
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    d206:	b2c3      	uxtb	r3, r0
    d208:	4258      	negs	r0, r3
    d20a:	4158      	adcs	r0, r3
    d20c:	4240      	negs	r0, r0
    d20e:	b2c0      	uxtb	r0, r0
    d210:	e7db      	b.n	d1ca <lv_img_buf_get_px_alpha+0x26>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    d212:	2300      	movs	r3, #0
    d214:	a802      	add	r0, sp, #8
    d216:	7003      	strb	r3, [r0, #0]
    d218:	3355      	adds	r3, #85	; 0x55
    d21a:	7043      	strb	r3, [r0, #1]
    d21c:	3355      	adds	r3, #85	; 0x55
    d21e:	7083      	strb	r3, [r0, #2]
    d220:	20ff      	movs	r0, #255	; 0xff
    d222:	ab02      	add	r3, sp, #8
    d224:	70d8      	strb	r0, [r3, #3]
        uint8_t bit = (x & 0x3) * 2;
    d226:	2503      	movs	r5, #3
    d228:	400d      	ands	r5, r1
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    d22a:	006d      	lsls	r5, r5, #1
    d22c:	2306      	movs	r3, #6
    d22e:	1b5d      	subs	r5, r3, r5
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
    d230:	6823      	ldr	r3, [r4, #0]
    d232:	02db      	lsls	r3, r3, #11
    d234:	0d5b      	lsrs	r3, r3, #21
    d236:	3303      	adds	r3, #3
    d238:	109b      	asrs	r3, r3, #2
    d23a:	9a01      	ldr	r2, [sp, #4]
    d23c:	435a      	muls	r2, r3
    d23e:	1089      	asrs	r1, r1, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    d240:	18b2      	adds	r2, r6, r2
    d242:	5c52      	ldrb	r2, [r2, r1]
    d244:	2303      	movs	r3, #3
    d246:	40ab      	lsls	r3, r5
    d248:	4013      	ands	r3, r2
    d24a:	412b      	asrs	r3, r5
        return opa_table[px_opa];
    d24c:	4003      	ands	r3, r0
    d24e:	aa02      	add	r2, sp, #8
    d250:	5cd0      	ldrb	r0, [r2, r3]
    d252:	e7ba      	b.n	d1ca <lv_img_buf_get_px_alpha+0x26>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
    d254:	ab02      	add	r3, sp, #8
    d256:	469c      	mov	ip, r3
    d258:	4b12      	ldr	r3, [pc, #72]	; (d2a4 <lv_img_buf_get_px_alpha+0x100>)
    d25a:	4665      	mov	r5, ip
    d25c:	cb85      	ldmia	r3!, {r0, r2, r7}
    d25e:	c585      	stmia	r5!, {r0, r2, r7}
    d260:	681b      	ldr	r3, [r3, #0]
    d262:	602b      	str	r3, [r5, #0]
        uint8_t bit = (x & 0x1) * 4;
    d264:	2501      	movs	r5, #1
    d266:	400d      	ands	r5, r1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    d268:	00ad      	lsls	r5, r5, #2
    d26a:	2304      	movs	r3, #4
    d26c:	1b5d      	subs	r5, r3, r5
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
    d26e:	6823      	ldr	r3, [r4, #0]
    d270:	02db      	lsls	r3, r3, #11
    d272:	0d5b      	lsrs	r3, r3, #21
    d274:	3301      	adds	r3, #1
    d276:	105b      	asrs	r3, r3, #1
    d278:	9a01      	ldr	r2, [sp, #4]
    d27a:	435a      	muls	r2, r3
    d27c:	1049      	asrs	r1, r1, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    d27e:	18b2      	adds	r2, r6, r2
    d280:	5c52      	ldrb	r2, [r2, r1]
    d282:	230f      	movs	r3, #15
    d284:	40ab      	lsls	r3, r5
    d286:	4013      	ands	r3, r2
    d288:	412b      	asrs	r3, r5
        return opa_table[px_opa];
    d28a:	22ff      	movs	r2, #255	; 0xff
    d28c:	4013      	ands	r3, r2
    d28e:	4662      	mov	r2, ip
    d290:	5cd0      	ldrb	r0, [r2, r3]
    d292:	e79a      	b.n	d1ca <lv_img_buf_get_px_alpha+0x26>
        uint32_t px = dsc->header.w * y + x;
    d294:	6823      	ldr	r3, [r4, #0]
    d296:	02db      	lsls	r3, r3, #11
    d298:	0d5b      	lsrs	r3, r3, #21
    d29a:	9a01      	ldr	r2, [sp, #4]
    d29c:	435a      	muls	r2, r3
        return buf_u8[px];
    d29e:	1871      	adds	r1, r6, r1
    d2a0:	5c88      	ldrb	r0, [r1, r2]
    d2a2:	e792      	b.n	d1ca <lv_img_buf_get_px_alpha+0x26>
    d2a4:	00018a1c 	.word	0x00018a1c

0000d2a8 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to tranform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
    d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2aa:	46de      	mov	lr, fp
    d2ac:	4657      	mov	r7, sl
    d2ae:	464e      	mov	r6, r9
    d2b0:	4645      	mov	r5, r8
    d2b2:	b5e0      	push	{r5, r6, r7, lr}
    d2b4:	b083      	sub	sp, #12
    d2b6:	0004      	movs	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    d2b8:	2208      	movs	r2, #8
    d2ba:	5e83      	ldrsh	r3, [r0, r2]
    d2bc:	021b      	lsls	r3, r3, #8
    d2be:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
    d2c0:	220a      	movs	r2, #10
    d2c2:	5e83      	ldrsh	r3, [r0, r2]
    d2c4:	021b      	lsls	r3, r3, #8
    d2c6:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
    d2c8:	230c      	movs	r3, #12
    d2ca:	5ec7      	ldrsh	r7, [r0, r3]
    d2cc:	4b3e      	ldr	r3, [pc, #248]	; (d3c8 <_lv_img_buf_transform_init+0x120>)
    d2ce:	469b      	mov	fp, r3
    d2d0:	210a      	movs	r1, #10
    d2d2:	0038      	movs	r0, r7
    d2d4:	4798      	blx	r3
    d2d6:	b205      	sxth	r5, r0
    int32_t angle_hight = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
    d2d8:	260a      	movs	r6, #10
    d2da:	4276      	negs	r6, r6
    d2dc:	436e      	muls	r6, r5
    d2de:	19f6      	adds	r6, r6, r7

    int32_t s1 = _lv_trigo_sin(-angle_low);
    d2e0:	b2ab      	uxth	r3, r5
    d2e2:	4698      	mov	r8, r3
    d2e4:	4258      	negs	r0, r3
    d2e6:	b200      	sxth	r0, r0
    d2e8:	4b38      	ldr	r3, [pc, #224]	; (d3cc <_lv_img_buf_transform_init+0x124>)
    d2ea:	469a      	mov	sl, r3
    d2ec:	4798      	blx	r3
    d2ee:	4681      	mov	r9, r0
    int32_t angle_hight = angle_low + 1;
    d2f0:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_hight);
    d2f2:	b2ad      	uxth	r5, r5
    d2f4:	4268      	negs	r0, r5
    d2f6:	b200      	sxth	r0, r0
    d2f8:	47d0      	blx	sl
    d2fa:	9001      	str	r0, [sp, #4]

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
    d2fc:	275a      	movs	r7, #90	; 0x5a
    d2fe:	4642      	mov	r2, r8
    d300:	1ab8      	subs	r0, r7, r2
    d302:	b200      	sxth	r0, r0
    d304:	47d0      	blx	sl
    d306:	4680      	mov	r8, r0
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
    d308:	1b7d      	subs	r5, r7, r5
    d30a:	b228      	sxth	r0, r5
    d30c:	47d0      	blx	sl
    d30e:	0007      	movs	r7, r0

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    d310:	250a      	movs	r5, #10
    d312:	1bad      	subs	r5, r5, r6
    d314:	464b      	mov	r3, r9
    d316:	436b      	muls	r3, r5
    d318:	0018      	movs	r0, r3
    d31a:	9b01      	ldr	r3, [sp, #4]
    d31c:	4373      	muls	r3, r6
    d31e:	18c0      	adds	r0, r0, r3
    d320:	210a      	movs	r1, #10
    d322:	47d8      	blx	fp
    d324:	62e0      	str	r0, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    d326:	4643      	mov	r3, r8
    d328:	435d      	muls	r5, r3
    d32a:	0030      	movs	r0, r6
    d32c:	4378      	muls	r0, r7
    d32e:	1828      	adds	r0, r5, r0
    d330:	210a      	movs	r1, #10
    d332:	47d8      	blx	fp
    d334:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
    d336:	7ca0      	ldrb	r0, [r4, #18]
    d338:	4b25      	ldr	r3, [pc, #148]	; (d3d0 <_lv_img_buf_transform_init+0x128>)
    d33a:	4798      	blx	r3
    d33c:	2634      	movs	r6, #52	; 0x34
    d33e:	2501      	movs	r5, #1
    d340:	0003      	movs	r3, r0
    d342:	402b      	ands	r3, r5
    d344:	5da0      	ldrb	r0, [r4, r6]
    d346:	2201      	movs	r2, #1
    d348:	4390      	bics	r0, r2
    d34a:	4318      	orrs	r0, r3
    d34c:	55a0      	strb	r0, [r4, r6]
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
    d34e:	7ca0      	ldrb	r0, [r4, #18]
    d350:	4b20      	ldr	r3, [pc, #128]	; (d3d4 <_lv_img_buf_transform_init+0x12c>)
    d352:	4798      	blx	r3
    d354:	4005      	ands	r5, r0
    d356:	006d      	lsls	r5, r5, #1
    d358:	5da0      	ldrb	r0, [r4, r6]
    d35a:	2302      	movs	r3, #2
    d35c:	4398      	bics	r0, r3
    d35e:	4305      	orrs	r5, r0
    d360:	55a5      	strb	r5, [r4, r6]
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    d362:	7ca2      	ldrb	r2, [r4, #18]
    d364:	1f13      	subs	r3, r2, #4
    d366:	2b02      	cmp	r3, #2
    d368:	d928      	bls.n	d3bc <_lv_img_buf_transform_init+0x114>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
    d36a:	2134      	movs	r1, #52	; 0x34
    d36c:	5c63      	ldrb	r3, [r4, r1]
    d36e:	2004      	movs	r0, #4
    d370:	4383      	bics	r3, r0
    d372:	5463      	strb	r3, [r4, r1]
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    d374:	6823      	ldr	r3, [r4, #0]
    d376:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
    d378:	231f      	movs	r3, #31
    d37a:	4013      	ands	r3, r2
    d37c:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    d37e:	88a3      	ldrh	r3, [r4, #4]
    d380:	055b      	lsls	r3, r3, #21
    d382:	0ada      	lsrs	r2, r3, #11
    d384:	4b14      	ldr	r3, [pc, #80]	; (d3d8 <_lv_img_buf_transform_init+0x130>)
    d386:	69a1      	ldr	r1, [r4, #24]
    d388:	400b      	ands	r3, r1
    d38a:	4313      	orrs	r3, r2
    d38c:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
    d38e:	88e2      	ldrh	r2, [r4, #6]
    d390:	0152      	lsls	r2, r2, #5
    d392:	02db      	lsls	r3, r3, #11
    d394:	0edb      	lsrs	r3, r3, #27
    d396:	4313      	orrs	r3, r2
    d398:	8363      	strh	r3, [r4, #26]

    dsc->tmp.zoom_inv = (256 * 256) / dsc->cfg.zoom;
    d39a:	89e1      	ldrh	r1, [r4, #14]
    d39c:	2080      	movs	r0, #128	; 0x80
    d39e:	0240      	lsls	r0, r0, #9
    d3a0:	4b09      	ldr	r3, [pc, #36]	; (d3c8 <_lv_img_buf_transform_init+0x120>)
    d3a2:	4798      	blx	r3
    d3a4:	86e0      	strh	r0, [r4, #54]	; 0x36

    dsc->res.opa = LV_OPA_COVER;
    d3a6:	23ff      	movs	r3, #255	; 0xff
    d3a8:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
    d3aa:	8a23      	ldrh	r3, [r4, #16]
    d3ac:	82a3      	strh	r3, [r4, #20]
}
    d3ae:	b003      	add	sp, #12
    d3b0:	bc3c      	pop	{r2, r3, r4, r5}
    d3b2:	4690      	mov	r8, r2
    d3b4:	4699      	mov	r9, r3
    d3b6:	46a2      	mov	sl, r4
    d3b8:	46ab      	mov	fp, r5
    d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dsc->tmp.native_color = 1;
    d3bc:	2134      	movs	r1, #52	; 0x34
    d3be:	b2eb      	uxtb	r3, r5
    d3c0:	2004      	movs	r0, #4
    d3c2:	4303      	orrs	r3, r0
    d3c4:	5463      	strb	r3, [r4, r1]
    d3c6:	e7d5      	b.n	d374 <_lv_img_buf_transform_init+0xcc>
    d3c8:	00017a75 	.word	0x00017a75
    d3cc:	000108cd 	.word	0x000108cd
    d3d0:	00007ead 	.word	0x00007ead
    d3d4:	00007ec1 	.word	0x00007ec1
    d3d8:	ffe003ff 	.word	0xffe003ff

0000d3dc <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      lv_point_t * pivot)
{
    d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3de:	46de      	mov	lr, fp
    d3e0:	4657      	mov	r7, sl
    d3e2:	464e      	mov	r6, r9
    d3e4:	4645      	mov	r5, r8
    d3e6:	b5e0      	push	{r5, r6, r7, lr}
    d3e8:	b087      	sub	sp, #28
    d3ea:	9000      	str	r0, [sp, #0]
    d3ec:	9102      	str	r1, [sp, #8]
    d3ee:	9205      	str	r2, [sp, #20]
    d3f0:	001d      	movs	r5, r3
    d3f2:	ab10      	add	r3, sp, #64	; 0x40
    d3f4:	881b      	ldrh	r3, [r3, #0]
    d3f6:	469b      	mov	fp, r3
#if LV_USE_IMG_TRANSFORM
    int32_t angle_low = angle / 10;
    d3f8:	4f6a      	ldr	r7, [pc, #424]	; (d5a4 <_lv_img_buf_get_transformed_area+0x1c8>)
    d3fa:	210a      	movs	r1, #10
    d3fc:	0028      	movs	r0, r5
    d3fe:	47b8      	blx	r7
    d400:	b204      	sxth	r4, r0
    int32_t angle_hight = angle_low + 1;
    d402:	1c66      	adds	r6, r4, #1
    int32_t angle_rem = angle  - (angle_low * 10);
    d404:	200a      	movs	r0, #10
    d406:	4240      	negs	r0, r0
    d408:	4360      	muls	r0, r4
    d40a:	1945      	adds	r5, r0, r5

    int32_t s1 = _lv_trigo_sin(angle_low);
    d40c:	0020      	movs	r0, r4
    d40e:	4b66      	ldr	r3, [pc, #408]	; (d5a8 <_lv_img_buf_get_transformed_area+0x1cc>)
    d410:	4699      	mov	r9, r3
    d412:	4798      	blx	r3
    d414:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(angle_hight);
    d416:	b230      	sxth	r0, r6
    d418:	47c8      	blx	r9
    d41a:	4682      	mov	sl, r0

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
    d41c:	345a      	adds	r4, #90	; 0x5a
    d41e:	b220      	sxth	r0, r4
    d420:	47c8      	blx	r9
    d422:	0004      	movs	r4, r0
    int32_t c2 = _lv_trigo_sin(angle_hight + 90);
    d424:	365a      	adds	r6, #90	; 0x5a
    d426:	b230      	sxth	r0, r6
    d428:	47c8      	blx	r9
    d42a:	4681      	mov	r9, r0

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    d42c:	260a      	movs	r6, #10
    d42e:	1b76      	subs	r6, r6, r5
    d430:	4640      	mov	r0, r8
    d432:	4370      	muls	r0, r6
    d434:	4653      	mov	r3, sl
    d436:	436b      	muls	r3, r5
    d438:	18c0      	adds	r0, r0, r3
    d43a:	210a      	movs	r1, #10
    d43c:	47b8      	blx	r7
    d43e:	4680      	mov	r8, r0
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    d440:	4374      	muls	r4, r6
    d442:	464b      	mov	r3, r9
    d444:	435d      	muls	r5, r3
    d446:	1960      	adds	r0, r4, r5
    d448:	210a      	movs	r1, #10
    d44a:	47b8      	blx	r7

    lv_coord_t xt;
    lv_coord_t yt;

    lv_area_t a;
    a.x1 = ((-pivot->x) * zoom) >> 8;
    d44c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d44e:	2200      	movs	r2, #0
    d450:	5e9a      	ldrsh	r2, [r3, r2]
    a.y1 = ((-pivot->y) * zoom) >> 8;
    d452:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d454:	2702      	movs	r7, #2
    d456:	5fdf      	ldrsh	r7, [r3, r7]
    a.x1 = ((-pivot->x) * zoom) >> 8;
    d458:	4254      	negs	r4, r2
    d45a:	465b      	mov	r3, fp
    d45c:	435c      	muls	r4, r3
    d45e:	1224      	asrs	r4, r4, #8
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    a.y2 = ((h - pivot->y) * zoom) >> 8;

    xt = a.x1;
    yt = a.y1;
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    d460:	b224      	sxth	r4, r4
    d462:	0023      	movs	r3, r4
    d464:	4343      	muls	r3, r0
    d466:	4699      	mov	r9, r3
    a.y1 = ((-pivot->y) * zoom) >> 8;
    d468:	427b      	negs	r3, r7
    d46a:	465d      	mov	r5, fp
    d46c:	436b      	muls	r3, r5
    d46e:	121b      	asrs	r3, r3, #8
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    d470:	b21b      	sxth	r3, r3
    d472:	4641      	mov	r1, r8
    d474:	4359      	muls	r1, r3
    d476:	b296      	uxth	r6, r2
    d478:	464d      	mov	r5, r9
    d47a:	1a6d      	subs	r5, r5, r1
    d47c:	13ed      	asrs	r5, r5, #15
    d47e:	1975      	adds	r5, r6, r5
    d480:	b22d      	sxth	r5, r5
    d482:	46aa      	mov	sl, r5
    lt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    d484:	4645      	mov	r5, r8
    d486:	4365      	muls	r5, r4
    d488:	4343      	muls	r3, r0
    d48a:	b2bc      	uxth	r4, r7
    d48c:	9503      	str	r5, [sp, #12]
    d48e:	18ed      	adds	r5, r5, r3
    d490:	13ed      	asrs	r5, r5, #15
    d492:	9401      	str	r4, [sp, #4]
    d494:	46a4      	mov	ip, r4
    d496:	4465      	add	r5, ip
    d498:	b22d      	sxth	r5, r5
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    d49a:	9c02      	ldr	r4, [sp, #8]
    d49c:	1aa2      	subs	r2, r4, r2
    d49e:	465c      	mov	r4, fp
    d4a0:	4362      	muls	r2, r4
    d4a2:	1212      	asrs	r2, r2, #8

    xt = a.x2;
    yt = a.y1;
    rt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    d4a4:	b212      	sxth	r2, r2
    d4a6:	0014      	movs	r4, r2
    d4a8:	4344      	muls	r4, r0
    d4aa:	9402      	str	r4, [sp, #8]
    d4ac:	1a61      	subs	r1, r4, r1
    d4ae:	13c9      	asrs	r1, r1, #15
    d4b0:	1871      	adds	r1, r6, r1
    d4b2:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    d4b4:	4644      	mov	r4, r8
    d4b6:	4362      	muls	r2, r4
    d4b8:	9204      	str	r2, [sp, #16]
    d4ba:	4694      	mov	ip, r2
    d4bc:	4463      	add	r3, ip
    d4be:	13db      	asrs	r3, r3, #15
    d4c0:	9c01      	ldr	r4, [sp, #4]
    d4c2:	46a4      	mov	ip, r4
    d4c4:	4463      	add	r3, ip
    d4c6:	b21b      	sxth	r3, r3
    a.y2 = ((h - pivot->y) * zoom) >> 8;
    d4c8:	9c05      	ldr	r4, [sp, #20]
    d4ca:	1be7      	subs	r7, r4, r7
    d4cc:	465c      	mov	r4, fp
    d4ce:	4367      	muls	r7, r4
    d4d0:	123f      	asrs	r7, r7, #8

    xt = a.x1;
    yt = a.y2;
    lb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    d4d2:	b23f      	sxth	r7, r7
    d4d4:	4644      	mov	r4, r8
    d4d6:	437c      	muls	r4, r7
    d4d8:	46a0      	mov	r8, r4
    d4da:	464c      	mov	r4, r9
    d4dc:	4642      	mov	r2, r8
    d4de:	1aa4      	subs	r4, r4, r2
    d4e0:	13e2      	asrs	r2, r4, #15
    d4e2:	4691      	mov	r9, r2
    d4e4:	44b1      	add	r9, r6
    d4e6:	464a      	mov	r2, r9
    d4e8:	b212      	sxth	r2, r2
    d4ea:	4691      	mov	r9, r2
    lb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    d4ec:	4378      	muls	r0, r7
    d4ee:	9f03      	ldr	r7, [sp, #12]
    d4f0:	183f      	adds	r7, r7, r0
    d4f2:	13ff      	asrs	r7, r7, #15
    d4f4:	46e3      	mov	fp, ip
    d4f6:	4467      	add	r7, ip
    d4f8:	b23f      	sxth	r7, r7

    xt = a.x2;
    yt = a.y2;
    rb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    d4fa:	9a02      	ldr	r2, [sp, #8]
    d4fc:	4644      	mov	r4, r8
    d4fe:	1b12      	subs	r2, r2, r4
    d500:	13d2      	asrs	r2, r2, #15
    d502:	4690      	mov	r8, r2
    d504:	4446      	add	r6, r8
    d506:	b236      	sxth	r6, r6
    rb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    d508:	9a04      	ldr	r2, [sp, #16]
    d50a:	4694      	mov	ip, r2
    d50c:	4460      	add	r0, ip
    d50e:	13c0      	asrs	r0, r0, #15
    d510:	465a      	mov	r2, fp
    d512:	1814      	adds	r4, r2, r0
    d514:	b224      	sxth	r4, r4

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
    d516:	4652      	mov	r2, sl
    d518:	458a      	cmp	sl, r1
    d51a:	dd00      	ble.n	d51e <_lv_img_buf_get_transformed_area+0x142>
    d51c:	1c0a      	adds	r2, r1, #0
    d51e:	1c10      	adds	r0, r2, #0
    d520:	b212      	sxth	r2, r2
    d522:	454a      	cmp	r2, r9
    d524:	dd00      	ble.n	d528 <_lv_img_buf_get_transformed_area+0x14c>
    d526:	4648      	mov	r0, r9
    d528:	1c02      	adds	r2, r0, #0
    d52a:	b200      	sxth	r0, r0
    d52c:	42b0      	cmp	r0, r6
    d52e:	dd00      	ble.n	d532 <_lv_img_buf_get_transformed_area+0x156>
    d530:	1c32      	adds	r2, r6, #0
    d532:	9800      	ldr	r0, [sp, #0]
    d534:	8002      	strh	r2, [r0, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
    d536:	4650      	mov	r0, sl
    d538:	458a      	cmp	sl, r1
    d53a:	da00      	bge.n	d53e <_lv_img_buf_get_transformed_area+0x162>
    d53c:	1c08      	adds	r0, r1, #0
    d53e:	1c01      	adds	r1, r0, #0
    d540:	b200      	sxth	r0, r0
    d542:	4548      	cmp	r0, r9
    d544:	da00      	bge.n	d548 <_lv_img_buf_get_transformed_area+0x16c>
    d546:	4649      	mov	r1, r9
    d548:	1c0a      	adds	r2, r1, #0
    d54a:	b209      	sxth	r1, r1
    d54c:	42b1      	cmp	r1, r6
    d54e:	da00      	bge.n	d552 <_lv_img_buf_get_transformed_area+0x176>
    d550:	1c32      	adds	r2, r6, #0
    d552:	9900      	ldr	r1, [sp, #0]
    d554:	808a      	strh	r2, [r1, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
    d556:	1c29      	adds	r1, r5, #0
    d558:	429d      	cmp	r5, r3
    d55a:	dd00      	ble.n	d55e <_lv_img_buf_get_transformed_area+0x182>
    d55c:	1c19      	adds	r1, r3, #0
    d55e:	1c0a      	adds	r2, r1, #0
    d560:	b209      	sxth	r1, r1
    d562:	42b9      	cmp	r1, r7
    d564:	dd00      	ble.n	d568 <_lv_img_buf_get_transformed_area+0x18c>
    d566:	1c3a      	adds	r2, r7, #0
    d568:	1c11      	adds	r1, r2, #0
    d56a:	b212      	sxth	r2, r2
    d56c:	42a2      	cmp	r2, r4
    d56e:	dd00      	ble.n	d572 <_lv_img_buf_get_transformed_area+0x196>
    d570:	1c21      	adds	r1, r4, #0
    d572:	9a00      	ldr	r2, [sp, #0]
    d574:	8051      	strh	r1, [r2, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
    d576:	1c2a      	adds	r2, r5, #0
    d578:	429d      	cmp	r5, r3
    d57a:	da00      	bge.n	d57e <_lv_img_buf_get_transformed_area+0x1a2>
    d57c:	1c1a      	adds	r2, r3, #0
    d57e:	1c13      	adds	r3, r2, #0
    d580:	b212      	sxth	r2, r2
    d582:	42ba      	cmp	r2, r7
    d584:	da00      	bge.n	d588 <_lv_img_buf_get_transformed_area+0x1ac>
    d586:	1c3b      	adds	r3, r7, #0
    d588:	1c1a      	adds	r2, r3, #0
    d58a:	b21b      	sxth	r3, r3
    d58c:	42a3      	cmp	r3, r4
    d58e:	da00      	bge.n	d592 <_lv_img_buf_get_transformed_area+0x1b6>
    d590:	1c22      	adds	r2, r4, #0
    d592:	9b00      	ldr	r3, [sp, #0]
    d594:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w;
    res->y2 = h;
#endif
}
    d596:	b007      	add	sp, #28
    d598:	bc3c      	pop	{r2, r3, r4, r5}
    d59a:	4690      	mov	r8, r2
    d59c:	4699      	mov	r9, r3
    d59e:	46a2      	mov	sl, r4
    d5a0:	46ab      	mov	fp, r5
    d5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5a4:	00017a75 	.word	0x00017a75
    d5a8:	000108cd 	.word	0x000108cd

0000d5ac <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
    d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5ae:	46de      	mov	lr, fp
    d5b0:	4657      	mov	r7, sl
    d5b2:	464e      	mov	r6, r9
    d5b4:	4645      	mov	r5, r8
    d5b6:	b5e0      	push	{r5, r6, r7, lr}
    d5b8:	b08b      	sub	sp, #44	; 0x2c
    d5ba:	0004      	movs	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
    d5bc:	2338      	movs	r3, #56	; 0x38
    d5be:	5ec7      	ldrsh	r7, [r0, r3]
    d5c0:	23ff      	movs	r3, #255	; 0xff
    d5c2:	001a      	movs	r2, r3
    d5c4:	403a      	ands	r2, r7
    int ys_fract = dsc->tmp.ys & 0xff;
    d5c6:	213a      	movs	r1, #58	; 0x3a
    d5c8:	5e46      	ldrsh	r6, [r0, r1]
    d5ca:	4033      	ands	r3, r6
    int32_t xn;      /*x neightboor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
    d5cc:	2a6f      	cmp	r2, #111	; 0x6f
    d5ce:	dc7e      	bgt.n	d6ce <_lv_img_buf_transform_anti_alias+0x122>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
    d5d0:	223c      	movs	r2, #60	; 0x3c
    d5d2:	5e81      	ldrsh	r1, [r0, r2]
    d5d4:	4249      	negs	r1, r1
    d5d6:	17c9      	asrs	r1, r1, #31
        xr = xs_fract + 0x80;
    d5d8:	3f80      	subs	r7, #128	; 0x80
    d5da:	b2ff      	uxtb	r7, r7
    }

    int32_t yn;      /*x neightboor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
    d5dc:	2b6f      	cmp	r3, #111	; 0x6f
    d5de:	dd00      	ble.n	d5e2 <_lv_img_buf_transform_anti_alias+0x36>
    d5e0:	e087      	b.n	d6f2 <_lv_img_buf_transform_anti_alias+0x146>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
    d5e2:	233e      	movs	r3, #62	; 0x3e
    d5e4:	5ee2      	ldrsh	r2, [r4, r3]
    d5e6:	4252      	negs	r2, r2
    d5e8:	17d3      	asrs	r3, r2, #31
    d5ea:	4698      	mov	r8, r3

        yr = ys_fract + 0x80;
    d5ec:	3e80      	subs	r6, #128	; 0x80
    d5ee:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
    d5f0:	7d25      	ldrb	r5, [r4, #20]
    d5f2:	06ed      	lsls	r5, r5, #27
    d5f4:	0eeb      	lsrs	r3, r5, #27
    d5f6:	9300      	str	r3, [sp, #0]
    d5f8:	8aa3      	ldrh	r3, [r4, #20]
    d5fa:	055b      	lsls	r3, r3, #21
    d5fc:	0e9b      	lsrs	r3, r3, #26
    d5fe:	9301      	str	r3, [sp, #4]
    d600:	7d63      	ldrb	r3, [r4, #21]
    d602:	08db      	lsrs	r3, r3, #3
    d604:	9302      	str	r3, [sp, #8]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
    d606:	7da3      	ldrb	r3, [r4, #22]
    d608:	9303      	str	r3, [sp, #12]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
    d60a:	2334      	movs	r3, #52	; 0x34
    d60c:	5ce3      	ldrb	r3, [r4, r3]
    d60e:	4699      	mov	r9, r3
    d610:	075b      	lsls	r3, r3, #29
    d612:	d400      	bmi.n	d616 <_lv_img_buf_transform_anti_alias+0x6a>
    d614:	e081      	b.n	d71a <_lv_img_buf_transform_anti_alias+0x16e>
    const uint8_t * src_u8 = dsc->cfg.src;
    d616:	6823      	ldr	r3, [r4, #0]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
    d618:	2244      	movs	r2, #68	; 0x44
    d61a:	5ca2      	ldrb	r2, [r4, r2]
    d61c:	4694      	mov	ip, r2
    d61e:	4351      	muls	r1, r2
    d620:	6c22      	ldr	r2, [r4, #64]	; 0x40
    d622:	4692      	mov	sl, r2
    d624:	4451      	add	r1, sl
    d626:	1858      	adds	r0, r3, r1
    d628:	aa09      	add	r2, sp, #36	; 0x24
    d62a:	7805      	ldrb	r5, [r0, #0]
    d62c:	7015      	strb	r5, [r2, #0]
    d62e:	7840      	ldrb	r0, [r0, #1]
    d630:	7050      	strb	r0, [r2, #1]
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
    d632:	2004      	movs	r0, #4
    d634:	5e22      	ldrsh	r2, [r4, r0]
    d636:	4660      	mov	r0, ip
    d638:	4342      	muls	r2, r0
    d63a:	4640      	mov	r0, r8
    d63c:	4350      	muls	r0, r2
    d63e:	0002      	movs	r2, r0
    d640:	6c20      	ldr	r0, [r4, #64]	; 0x40
    d642:	4680      	mov	r8, r0
    d644:	4490      	add	r8, r2
    d646:	469a      	mov	sl, r3
    d648:	44c2      	add	sl, r8
    d64a:	a808      	add	r0, sp, #32
    d64c:	4655      	mov	r5, sl
    d64e:	782d      	ldrb	r5, [r5, #0]
    d650:	7005      	strb	r5, [r0, #0]
    d652:	4655      	mov	r5, sl
    d654:	786d      	ldrb	r5, [r5, #1]
    d656:	7045      	strb	r5, [r0, #1]
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
    d658:	188a      	adds	r2, r1, r2
    d65a:	1898      	adds	r0, r3, r2
    d65c:	4682      	mov	sl, r0
    d65e:	a807      	add	r0, sp, #28
    d660:	4655      	mov	r5, sl
    d662:	782d      	ldrb	r5, [r5, #0]
    d664:	7005      	strb	r5, [r0, #0]
    d666:	4655      	mov	r5, sl
    d668:	786d      	ldrb	r5, [r5, #1]
    d66a:	7045      	strb	r5, [r0, #1]
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
    d66c:	4648      	mov	r0, r9
    d66e:	0780      	lsls	r0, r0, #30
    d670:	d400      	bmi.n	d674 <_lv_img_buf_transform_anti_alias+0xc8>
    d672:	e084      	b.n	d77e <_lv_img_buf_transform_anti_alias+0x1d2>
    d674:	4660      	mov	r0, ip
    d676:	3801      	subs	r0, #1
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    d678:	181b      	adds	r3, r3, r0
    d67a:	5c59      	ldrb	r1, [r3, r1]
    d67c:	4689      	mov	r9, r1
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
    d67e:	4641      	mov	r1, r8
    d680:	5c59      	ldrb	r1, [r3, r1]
    d682:	468a      	mov	sl, r1
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    d684:	5c98      	ldrb	r0, [r3, r2]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
    d686:	21ff      	movs	r1, #255	; 0xff
    d688:	1bcb      	subs	r3, r1, r7
    d68a:	464a      	mov	r2, r9
    d68c:	435a      	muls	r2, r3
    d68e:	4694      	mov	ip, r2
    d690:	9a03      	ldr	r2, [sp, #12]
    d692:	437a      	muls	r2, r7
    d694:	4462      	add	r2, ip
    d696:	1212      	asrs	r2, r2, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
    d698:	4343      	muls	r3, r0
    d69a:	4655      	mov	r5, sl
    d69c:	437d      	muls	r5, r7
    d69e:	46ac      	mov	ip, r5
    d6a0:	4463      	add	r3, ip
    d6a2:	121b      	asrs	r3, r3, #8
    d6a4:	b2dd      	uxtb	r5, r3
    d6a6:	46ac      	mov	ip, r5
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
    d6a8:	400b      	ands	r3, r1
    d6aa:	1b8d      	subs	r5, r1, r6
    d6ac:	436b      	muls	r3, r5
    d6ae:	4011      	ands	r1, r2
    d6b0:	4371      	muls	r1, r6
    d6b2:	185b      	adds	r3, r3, r1
    d6b4:	121b      	asrs	r3, r3, #8
    d6b6:	75a3      	strb	r3, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    d6b8:	b2d2      	uxtb	r2, r2
    d6ba:	2a05      	cmp	r2, #5
    d6bc:	d900      	bls.n	d6c0 <_lv_img_buf_transform_anti_alias+0x114>
    d6be:	e0dc      	b.n	d87a <_lv_img_buf_transform_anti_alias+0x2ce>
    d6c0:	2300      	movs	r3, #0
    d6c2:	4662      	mov	r2, ip
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
    d6c4:	2600      	movs	r6, #0
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    d6c6:	2a05      	cmp	r2, #5
    d6c8:	d900      	bls.n	d6cc <_lv_img_buf_transform_anti_alias+0x120>
    d6ca:	e0da      	b.n	d882 <_lv_img_buf_transform_anti_alias+0x2d6>
    d6cc:	e0ab      	b.n	d826 <_lv_img_buf_transform_anti_alias+0x27a>
    else if(xs_fract > 0x90) {
    d6ce:	2a90      	cmp	r2, #144	; 0x90
    d6d0:	dd0c      	ble.n	d6ec <_lv_img_buf_transform_anti_alias+0x140>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
    d6d2:	213c      	movs	r1, #60	; 0x3c
    d6d4:	5e42      	ldrsh	r2, [r0, r1]
    d6d6:	3201      	adds	r2, #1
    d6d8:	2104      	movs	r1, #4
    d6da:	5e40      	ldrsh	r0, [r0, r1]
    d6dc:	2101      	movs	r1, #1
    d6de:	4282      	cmp	r2, r0
    d6e0:	db00      	blt.n	d6e4 <_lv_img_buf_transform_anti_alias+0x138>
    d6e2:	2100      	movs	r1, #0
        xr = (0xFF - xs_fract) + 0x80;
    d6e4:	227f      	movs	r2, #127	; 0x7f
    d6e6:	1bd7      	subs	r7, r2, r7
    d6e8:	b2ff      	uxtb	r7, r7
    d6ea:	e777      	b.n	d5dc <_lv_img_buf_transform_anti_alias+0x30>
        xr = 0xFF;
    d6ec:	27ff      	movs	r7, #255	; 0xff
        xn = 0;
    d6ee:	2100      	movs	r1, #0
    d6f0:	e774      	b.n	d5dc <_lv_img_buf_transform_anti_alias+0x30>
    else if(ys_fract > 0x90) {
    d6f2:	2b90      	cmp	r3, #144	; 0x90
    d6f4:	dd0d      	ble.n	d712 <_lv_img_buf_transform_anti_alias+0x166>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
    d6f6:	223e      	movs	r2, #62	; 0x3e
    d6f8:	5ea3      	ldrsh	r3, [r4, r2]
    d6fa:	3301      	adds	r3, #1
    d6fc:	2206      	movs	r2, #6
    d6fe:	5ea0      	ldrsh	r0, [r4, r2]
    d700:	2201      	movs	r2, #1
    d702:	4283      	cmp	r3, r0
    d704:	db00      	blt.n	d708 <_lv_img_buf_transform_anti_alias+0x15c>
    d706:	2200      	movs	r2, #0
        yn =  1;
    d708:	4690      	mov	r8, r2
        yr = (0xFF - ys_fract) + 0x80;
    d70a:	237f      	movs	r3, #127	; 0x7f
    d70c:	1b9e      	subs	r6, r3, r6
    d70e:	b2f6      	uxtb	r6, r6
    d710:	e76e      	b.n	d5f0 <_lv_img_buf_transform_anti_alias+0x44>
        yr = 0xFF;
    d712:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
    d714:	2300      	movs	r3, #0
    d716:	4698      	mov	r8, r3
    d718:	e76a      	b.n	d5f0 <_lv_img_buf_transform_anti_alias+0x44>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
    d71a:	2318      	movs	r3, #24
    d71c:	469c      	mov	ip, r3
    d71e:	44a4      	add	ip, r4
    d720:	4665      	mov	r5, ip
    d722:	b28b      	uxth	r3, r1
    d724:	469b      	mov	fp, r3
    d726:	8a23      	ldrh	r3, [r4, #16]
    d728:	213e      	movs	r1, #62	; 0x3e
    d72a:	5e62      	ldrsh	r2, [r4, r1]
    d72c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    d72e:	4459      	add	r1, fp
    d730:	b209      	sxth	r1, r1
    d732:	9504      	str	r5, [sp, #16]
    d734:	4660      	mov	r0, ip
    d736:	4daf      	ldr	r5, [pc, #700]	; (d9f4 <_lv_img_buf_transform_anti_alias+0x448>)
    d738:	46a9      	mov	r9, r5
    d73a:	47a8      	blx	r5
    d73c:	ab09      	add	r3, sp, #36	; 0x24
    d73e:	8018      	strh	r0, [r3, #0]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
    d740:	4642      	mov	r2, r8
    d742:	466b      	mov	r3, sp
    d744:	82da      	strh	r2, [r3, #22]
    d746:	b292      	uxth	r2, r2
    d748:	4690      	mov	r8, r2
    d74a:	8a23      	ldrh	r3, [r4, #16]
    d74c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d74e:	4442      	add	r2, r8
    d750:	b212      	sxth	r2, r2
    d752:	203c      	movs	r0, #60	; 0x3c
    d754:	5e21      	ldrsh	r1, [r4, r0]
    d756:	9d04      	ldr	r5, [sp, #16]
    d758:	0028      	movs	r0, r5
    d75a:	47c8      	blx	r9
    d75c:	ab08      	add	r3, sp, #32
    d75e:	8018      	strh	r0, [r3, #0]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
    d760:	8a23      	ldrh	r3, [r4, #16]
    d762:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d764:	4442      	add	r2, r8
    d766:	b212      	sxth	r2, r2
    d768:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    d76a:	4459      	add	r1, fp
    d76c:	b209      	sxth	r1, r1
    d76e:	0028      	movs	r0, r5
    d770:	47c8      	blx	r9
    d772:	ab07      	add	r3, sp, #28
    d774:	8018      	strh	r0, [r3, #0]
        if(dsc->tmp.has_alpha) {
    d776:	2334      	movs	r3, #52	; 0x34
    d778:	5ce3      	ldrb	r3, [r4, r3]
    d77a:	079b      	lsls	r3, r3, #30
    d77c:	d45b      	bmi.n	d836 <_lv_img_buf_transform_anti_alias+0x28a>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    d77e:	23ff      	movs	r3, #255	; 0xff
    d780:	75a3      	strb	r3, [r4, #22]
        xr0 = xr;
    d782:	003b      	movs	r3, r7
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
    d784:	2b00      	cmp	r3, #0
    d786:	d000      	beq.n	d78a <_lv_img_buf_transform_anti_alias+0x1de>
    d788:	e08d      	b.n	d8a6 <_lv_img_buf_transform_anti_alias+0x2fa>
    d78a:	ab09      	add	r3, sp, #36	; 0x24
    d78c:	781d      	ldrb	r5, [r3, #0]
    d78e:	06ed      	lsls	r5, r5, #27
    d790:	0eea      	lsrs	r2, r5, #27
    d792:	9200      	str	r2, [sp, #0]
    d794:	881a      	ldrh	r2, [r3, #0]
    d796:	0552      	lsls	r2, r2, #21
    d798:	0e92      	lsrs	r2, r2, #26
    d79a:	9201      	str	r2, [sp, #4]
    d79c:	785b      	ldrb	r3, [r3, #1]
    d79e:	08db      	lsrs	r3, r3, #3
    d7a0:	9302      	str	r3, [sp, #8]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
    d7a2:	2f00      	cmp	r7, #0
    d7a4:	d000      	beq.n	d7a8 <_lv_img_buf_transform_anti_alias+0x1fc>
    d7a6:	e0b7      	b.n	d918 <_lv_img_buf_transform_anti_alias+0x36c>
    d7a8:	aa07      	add	r2, sp, #28
    d7aa:	7817      	ldrb	r7, [r2, #0]
    d7ac:	06ff      	lsls	r7, r7, #27
    d7ae:	0eff      	lsrs	r7, r7, #27
    d7b0:	8813      	ldrh	r3, [r2, #0]
    d7b2:	055b      	lsls	r3, r3, #21
    d7b4:	0e9b      	lsrs	r3, r3, #26
    d7b6:	7852      	ldrb	r2, [r2, #1]
    d7b8:	08d2      	lsrs	r2, r2, #3
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    d7ba:	2e00      	cmp	r6, #0
    d7bc:	d100      	bne.n	d7c0 <_lv_img_buf_transform_anti_alias+0x214>
    d7be:	e0f1      	b.n	d9a4 <_lv_img_buf_transform_anti_alias+0x3f8>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    d7c0:	2eff      	cmp	r6, #255	; 0xff
    d7c2:	d100      	bne.n	d7c6 <_lv_img_buf_transform_anti_alias+0x21a>
    d7c4:	e100      	b.n	d9c8 <_lv_img_buf_transform_anti_alias+0x41c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    d7c6:	21ff      	movs	r1, #255	; 0xff
    d7c8:	1b89      	subs	r1, r1, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    d7ca:	9d00      	ldr	r5, [sp, #0]
    d7cc:	4375      	muls	r5, r6
    d7ce:	434f      	muls	r7, r1
    d7d0:	19ef      	adds	r7, r5, r7
    d7d2:	023d      	lsls	r5, r7, #8
    d7d4:	19ed      	adds	r5, r5, r7
    d7d6:	01ed      	lsls	r5, r5, #7
    d7d8:	19ed      	adds	r5, r5, r7
    else dsc->res.color = lv_color_mix(c0, c1, yr);
    d7da:	012d      	lsls	r5, r5, #4
    d7dc:	0eed      	lsrs	r5, r5, #27
    d7de:	7d20      	ldrb	r0, [r4, #20]
    d7e0:	271f      	movs	r7, #31
    d7e2:	43b8      	bics	r0, r7
    d7e4:	4305      	orrs	r5, r0
    d7e6:	7525      	strb	r5, [r4, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    d7e8:	9801      	ldr	r0, [sp, #4]
    d7ea:	4370      	muls	r0, r6
    d7ec:	434b      	muls	r3, r1
    d7ee:	18c0      	adds	r0, r0, r3
    d7f0:	0203      	lsls	r3, r0, #8
    d7f2:	181b      	adds	r3, r3, r0
    d7f4:	01db      	lsls	r3, r3, #7
    d7f6:	181b      	adds	r3, r3, r0
    d7f8:	00db      	lsls	r3, r3, #3
    d7fa:	0e9b      	lsrs	r3, r3, #26
    d7fc:	015b      	lsls	r3, r3, #5
    d7fe:	8aa0      	ldrh	r0, [r4, #20]
    d800:	4d7d      	ldr	r5, [pc, #500]	; (d9f8 <_lv_img_buf_transform_anti_alias+0x44c>)
    d802:	4028      	ands	r0, r5
    d804:	4303      	orrs	r3, r0
    d806:	82a3      	strh	r3, [r4, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    d808:	9802      	ldr	r0, [sp, #8]
    d80a:	4346      	muls	r6, r0
    d80c:	434a      	muls	r2, r1
    d80e:	18b6      	adds	r6, r6, r2
    d810:	0232      	lsls	r2, r6, #8
    d812:	1992      	adds	r2, r2, r6
    d814:	01d2      	lsls	r2, r2, #7
    d816:	1996      	adds	r6, r2, r6
    d818:	0df6      	lsrs	r6, r6, #23
    d81a:	00f6      	lsls	r6, r6, #3
    d81c:	055b      	lsls	r3, r3, #21
    d81e:	0f5b      	lsrs	r3, r3, #29
    d820:	431e      	orrs	r6, r3
    d822:	7566      	strb	r6, [r4, #21]

    return true;
    d824:	2301      	movs	r3, #1
}
    d826:	0018      	movs	r0, r3
    d828:	b00b      	add	sp, #44	; 0x2c
    d82a:	bc3c      	pop	{r2, r3, r4, r5}
    d82c:	4690      	mov	r8, r2
    d82e:	4699      	mov	r9, r3
    d830:	46a2      	mov	sl, r4
    d832:	46ab      	mov	fp, r5
    d834:	bdf0      	pop	{r4, r5, r6, r7, pc}
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
    d836:	233e      	movs	r3, #62	; 0x3e
    d838:	5ee2      	ldrsh	r2, [r4, r3]
    d83a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    d83c:	4459      	add	r1, fp
    d83e:	b209      	sxth	r1, r1
    d840:	9d04      	ldr	r5, [sp, #16]
    d842:	0028      	movs	r0, r5
    d844:	4b6d      	ldr	r3, [pc, #436]	; (d9fc <_lv_img_buf_transform_anti_alias+0x450>)
    d846:	4798      	blx	r3
    d848:	4681      	mov	r9, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
    d84a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d84c:	4442      	add	r2, r8
    d84e:	b212      	sxth	r2, r2
    d850:	233c      	movs	r3, #60	; 0x3c
    d852:	5ee1      	ldrsh	r1, [r4, r3]
    d854:	0028      	movs	r0, r5
    d856:	4b69      	ldr	r3, [pc, #420]	; (d9fc <_lv_img_buf_transform_anti_alias+0x450>)
    d858:	4798      	blx	r3
    d85a:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
    d85c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    d85e:	4442      	add	r2, r8
    d860:	b212      	sxth	r2, r2
    d862:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    d864:	4459      	add	r1, fp
    d866:	b209      	sxth	r1, r1
    d868:	0028      	movs	r0, r5
    d86a:	4b64      	ldr	r3, [pc, #400]	; (d9fc <_lv_img_buf_transform_anti_alias+0x450>)
    d86c:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
    d86e:	2334      	movs	r3, #52	; 0x34
    d870:	5ce3      	ldrb	r3, [r4, r3]
    d872:	079b      	lsls	r3, r3, #30
    d874:	d500      	bpl.n	d878 <_lv_img_buf_transform_anti_alias+0x2cc>
    d876:	e706      	b.n	d686 <_lv_img_buf_transform_anti_alias+0xda>
    d878:	e781      	b.n	d77e <_lv_img_buf_transform_anti_alias+0x1d2>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
    d87a:	4663      	mov	r3, ip
    d87c:	2b05      	cmp	r3, #5
    d87e:	d800      	bhi.n	d882 <_lv_img_buf_transform_anti_alias+0x2d6>
    d880:	26ff      	movs	r6, #255	; 0xff
    lv_opa_t xr0 = xr;
    d882:	003b      	movs	r3, r7
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
    d884:	9a03      	ldr	r2, [sp, #12]
    d886:	2a05      	cmp	r2, #5
    d888:	d800      	bhi.n	d88c <_lv_img_buf_transform_anti_alias+0x2e0>
    d88a:	2300      	movs	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
    d88c:	464a      	mov	r2, r9
    d88e:	2a05      	cmp	r2, #5
    d890:	d800      	bhi.n	d894 <_lv_img_buf_transform_anti_alias+0x2e8>
    d892:	23ff      	movs	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
    d894:	4652      	mov	r2, sl
    d896:	2a05      	cmp	r2, #5
    d898:	d800      	bhi.n	d89c <_lv_img_buf_transform_anti_alias+0x2f0>
    d89a:	2700      	movs	r7, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    d89c:	2805      	cmp	r0, #5
    d89e:	d900      	bls.n	d8a2 <_lv_img_buf_transform_anti_alias+0x2f6>
    d8a0:	e770      	b.n	d784 <_lv_img_buf_transform_anti_alias+0x1d8>
    d8a2:	27ff      	movs	r7, #255	; 0xff
    d8a4:	e76e      	b.n	d784 <_lv_img_buf_transform_anti_alias+0x1d8>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    d8a6:	2bff      	cmp	r3, #255	; 0xff
    d8a8:	d100      	bne.n	d8ac <_lv_img_buf_transform_anti_alias+0x300>
    d8aa:	e77a      	b.n	d7a2 <_lv_img_buf_transform_anti_alias+0x1f6>
    d8ac:	22ff      	movs	r2, #255	; 0xff
    d8ae:	1ad2      	subs	r2, r2, r3
    d8b0:	a809      	add	r0, sp, #36	; 0x24
    d8b2:	7841      	ldrb	r1, [r0, #1]
    d8b4:	08c9      	lsrs	r1, r1, #3
    d8b6:	4351      	muls	r1, r2
    d8b8:	9d02      	ldr	r5, [sp, #8]
    d8ba:	435d      	muls	r5, r3
    d8bc:	46ac      	mov	ip, r5
    d8be:	448c      	add	ip, r1
    d8c0:	4661      	mov	r1, ip
    d8c2:	0209      	lsls	r1, r1, #8
    d8c4:	4461      	add	r1, ip
    d8c6:	01c9      	lsls	r1, r1, #7
    d8c8:	4461      	add	r1, ip
    d8ca:	0dc9      	lsrs	r1, r1, #23
    d8cc:	251f      	movs	r5, #31
    d8ce:	46ac      	mov	ip, r5
    d8d0:	400d      	ands	r5, r1
    d8d2:	9502      	str	r5, [sp, #8]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    d8d4:	8801      	ldrh	r1, [r0, #0]
    d8d6:	0549      	lsls	r1, r1, #21
    d8d8:	0e89      	lsrs	r1, r1, #26
    d8da:	4351      	muls	r1, r2
    d8dc:	9d01      	ldr	r5, [sp, #4]
    d8de:	435d      	muls	r5, r3
    d8e0:	46a8      	mov	r8, r5
    d8e2:	4441      	add	r1, r8
    d8e4:	020d      	lsls	r5, r1, #8
    d8e6:	46a8      	mov	r8, r5
    d8e8:	4488      	add	r8, r1
    d8ea:	4645      	mov	r5, r8
    d8ec:	01ed      	lsls	r5, r5, #7
    d8ee:	46a8      	mov	r8, r5
    d8f0:	4441      	add	r1, r8
    d8f2:	00c9      	lsls	r1, r1, #3
    d8f4:	0e89      	lsrs	r1, r1, #26
    d8f6:	9101      	str	r1, [sp, #4]
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    d8f8:	7801      	ldrb	r1, [r0, #0]
    d8fa:	06c9      	lsls	r1, r1, #27
    d8fc:	0ec9      	lsrs	r1, r1, #27
    d8fe:	434a      	muls	r2, r1
    d900:	9d00      	ldr	r5, [sp, #0]
    d902:	435d      	muls	r5, r3
    d904:	1952      	adds	r2, r2, r5
    d906:	0215      	lsls	r5, r2, #8
    d908:	18ad      	adds	r5, r5, r2
    d90a:	01ed      	lsls	r5, r5, #7
    d90c:	18ad      	adds	r5, r5, r2
    d90e:	0ded      	lsrs	r5, r5, #23
    d910:	4663      	mov	r3, ip
    d912:	401d      	ands	r5, r3
    d914:	9500      	str	r5, [sp, #0]
    d916:	e744      	b.n	d7a2 <_lv_img_buf_transform_anti_alias+0x1f6>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    d918:	2fff      	cmp	r7, #255	; 0xff
    d91a:	d039      	beq.n	d990 <_lv_img_buf_transform_anti_alias+0x3e4>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    d91c:	23ff      	movs	r3, #255	; 0xff
    d91e:	1bdb      	subs	r3, r3, r7
    d920:	4698      	mov	r8, r3
    d922:	a808      	add	r0, sp, #32
    d924:	7842      	ldrb	r2, [r0, #1]
    d926:	08d2      	lsrs	r2, r2, #3
    d928:	437a      	muls	r2, r7
    d92a:	a907      	add	r1, sp, #28
    d92c:	784b      	ldrb	r3, [r1, #1]
    d92e:	08db      	lsrs	r3, r3, #3
    d930:	4645      	mov	r5, r8
    d932:	436b      	muls	r3, r5
    d934:	18d3      	adds	r3, r2, r3
    d936:	021a      	lsls	r2, r3, #8
    d938:	18d2      	adds	r2, r2, r3
    d93a:	01d2      	lsls	r2, r2, #7
    d93c:	18d2      	adds	r2, r2, r3
    d93e:	0dd2      	lsrs	r2, r2, #23
    d940:	231f      	movs	r3, #31
    d942:	469c      	mov	ip, r3
    d944:	401a      	ands	r2, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    d946:	8803      	ldrh	r3, [r0, #0]
    d948:	055b      	lsls	r3, r3, #21
    d94a:	0e9b      	lsrs	r3, r3, #26
    d94c:	437b      	muls	r3, r7
    d94e:	4699      	mov	r9, r3
    d950:	880b      	ldrh	r3, [r1, #0]
    d952:	055b      	lsls	r3, r3, #21
    d954:	0e9b      	lsrs	r3, r3, #26
    d956:	436b      	muls	r3, r5
    d958:	444b      	add	r3, r9
    d95a:	021d      	lsls	r5, r3, #8
    d95c:	46a9      	mov	r9, r5
    d95e:	4499      	add	r9, r3
    d960:	464d      	mov	r5, r9
    d962:	01ed      	lsls	r5, r5, #7
    d964:	46a9      	mov	r9, r5
    d966:	444b      	add	r3, r9
    d968:	00db      	lsls	r3, r3, #3
    d96a:	0e9b      	lsrs	r3, r3, #26
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    d96c:	7800      	ldrb	r0, [r0, #0]
    d96e:	06c0      	lsls	r0, r0, #27
    d970:	0ec0      	lsrs	r0, r0, #27
    d972:	4347      	muls	r7, r0
    d974:	7809      	ldrb	r1, [r1, #0]
    d976:	06c9      	lsls	r1, r1, #27
    d978:	0ec9      	lsrs	r1, r1, #27
    d97a:	4640      	mov	r0, r8
    d97c:	4341      	muls	r1, r0
    d97e:	1879      	adds	r1, r7, r1
    d980:	020f      	lsls	r7, r1, #8
    d982:	187f      	adds	r7, r7, r1
    d984:	01ff      	lsls	r7, r7, #7
    d986:	187f      	adds	r7, r7, r1
    d988:	0dff      	lsrs	r7, r7, #23
    d98a:	4661      	mov	r1, ip
    d98c:	400f      	ands	r7, r1
    d98e:	e714      	b.n	d7ba <_lv_img_buf_transform_anti_alias+0x20e>
    d990:	aa08      	add	r2, sp, #32
    d992:	7817      	ldrb	r7, [r2, #0]
    d994:	06ff      	lsls	r7, r7, #27
    d996:	0eff      	lsrs	r7, r7, #27
    d998:	8813      	ldrh	r3, [r2, #0]
    d99a:	055b      	lsls	r3, r3, #21
    d99c:	0e9b      	lsrs	r3, r3, #26
    d99e:	7852      	ldrb	r2, [r2, #1]
    d9a0:	08d2      	lsrs	r2, r2, #3
    d9a2:	e70a      	b.n	d7ba <_lv_img_buf_transform_anti_alias+0x20e>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    d9a4:	7d25      	ldrb	r5, [r4, #20]
    d9a6:	211f      	movs	r1, #31
    d9a8:	438d      	bics	r5, r1
    d9aa:	432f      	orrs	r7, r5
    d9ac:	7527      	strb	r7, [r4, #20]
    d9ae:	0159      	lsls	r1, r3, #5
    d9b0:	8aa3      	ldrh	r3, [r4, #20]
    d9b2:	4811      	ldr	r0, [pc, #68]	; (d9f8 <_lv_img_buf_transform_anti_alias+0x44c>)
    d9b4:	4003      	ands	r3, r0
    d9b6:	430b      	orrs	r3, r1
    d9b8:	82a3      	strh	r3, [r4, #20]
    d9ba:	00d2      	lsls	r2, r2, #3
    d9bc:	055b      	lsls	r3, r3, #21
    d9be:	0f5b      	lsrs	r3, r3, #29
    d9c0:	431a      	orrs	r2, r3
    d9c2:	7562      	strb	r2, [r4, #21]
    return true;
    d9c4:	2301      	movs	r3, #1
    d9c6:	e72e      	b.n	d826 <_lv_img_buf_transform_anti_alias+0x27a>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    d9c8:	7d23      	ldrb	r3, [r4, #20]
    d9ca:	221f      	movs	r2, #31
    d9cc:	4393      	bics	r3, r2
    d9ce:	9d00      	ldr	r5, [sp, #0]
    d9d0:	431d      	orrs	r5, r3
    d9d2:	7525      	strb	r5, [r4, #20]
    d9d4:	9b01      	ldr	r3, [sp, #4]
    d9d6:	015a      	lsls	r2, r3, #5
    d9d8:	8aa3      	ldrh	r3, [r4, #20]
    d9da:	4907      	ldr	r1, [pc, #28]	; (d9f8 <_lv_img_buf_transform_anti_alias+0x44c>)
    d9dc:	400b      	ands	r3, r1
    d9de:	4313      	orrs	r3, r2
    d9e0:	82a3      	strh	r3, [r4, #20]
    d9e2:	9a02      	ldr	r2, [sp, #8]
    d9e4:	00d6      	lsls	r6, r2, #3
    d9e6:	055b      	lsls	r3, r3, #21
    d9e8:	0f5b      	lsrs	r3, r3, #29
    d9ea:	4333      	orrs	r3, r6
    d9ec:	7563      	strb	r3, [r4, #21]
    return true;
    d9ee:	2301      	movs	r3, #1
    d9f0:	e719      	b.n	d826 <_lv_img_buf_transform_anti_alias+0x27a>
    d9f2:	46c0      	nop			; (mov r8, r8)
    d9f4:	0000d085 	.word	0x0000d085
    d9f8:	fffff81f 	.word	0xfffff81f
    d9fc:	0000d1a5 	.word	0x0000d1a5

0000da00 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    da00:	b5f0      	push	{r4, r5, r6, r7, lr}
    da02:	46ce      	mov	lr, r9
    da04:	4647      	mov	r7, r8
    da06:	b580      	push	{r7, lr}
    da08:	b083      	sub	sp, #12
    da0a:	4680      	mov	r8, r0
    da0c:	466b      	mov	r3, sp
    da0e:	80d9      	strh	r1, [r3, #6]
    if(entry_cnt == 0) {
    da10:	4b51      	ldr	r3, [pc, #324]	; (db58 <_lv_img_cache_open+0x158>)
    da12:	8819      	ldrh	r1, [r3, #0]
    da14:	2900      	cmp	r1, #0
    da16:	d100      	bne.n	da1a <_lv_img_cache_open+0x1a>
    da18:	e09b      	b.n	db52 <_lv_img_cache_open+0x152>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    da1a:	4b50      	ldr	r3, [pc, #320]	; (db5c <_lv_img_cache_open+0x15c>)
    da1c:	681f      	ldr	r7, [r3, #0]
    da1e:	003b      	movs	r3, r7
    da20:	3320      	adds	r3, #32
    da22:	3901      	subs	r1, #1
    da24:	b28a      	uxth	r2, r1
    da26:	00d1      	lsls	r1, r2, #3
    da28:	1889      	adds	r1, r1, r2
    da2a:	0089      	lsls	r1, r1, #2
    da2c:	3144      	adds	r1, #68	; 0x44
    da2e:	1879      	adds	r1, r7, r1

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
    da30:	484b      	ldr	r0, [pc, #300]	; (db60 <_lv_img_cache_open+0x160>)
    da32:	e002      	b.n	da3a <_lv_img_cache_open+0x3a>
    da34:	3324      	adds	r3, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
    da36:	428b      	cmp	r3, r1
    da38:	d005      	beq.n	da46 <_lv_img_cache_open+0x46>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
    da3a:	681a      	ldr	r2, [r3, #0]
    da3c:	4282      	cmp	r2, r0
    da3e:	dbf9      	blt.n	da34 <_lv_img_cache_open+0x34>
            cache[i].life -= LV_IMG_CACHE_AGING;
    da40:	3a01      	subs	r2, #1
    da42:	601a      	str	r2, [r3, #0]
    da44:	e7f6      	b.n	da34 <_lv_img_cache_open+0x34>
    da46:	2500      	movs	r5, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    da48:	4e46      	ldr	r6, [pc, #280]	; (db64 <_lv_img_cache_open+0x164>)
    for(i = 0; i < entry_cnt; i++) {
    da4a:	4b43      	ldr	r3, [pc, #268]	; (db58 <_lv_img_cache_open+0x158>)
    da4c:	4699      	mov	r9, r3
    da4e:	e007      	b.n	da60 <_lv_img_cache_open+0x60>
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
        }
        else if(src_type == LV_IMG_SRC_FILE) {
    da50:	2801      	cmp	r0, #1
    da52:	d02a      	beq.n	daaa <_lv_img_cache_open+0xaa>
    for(i = 0; i < entry_cnt; i++) {
    da54:	3501      	adds	r5, #1
    da56:	b2ad      	uxth	r5, r5
    da58:	464b      	mov	r3, r9
    da5a:	881b      	ldrh	r3, [r3, #0]
    da5c:	42ab      	cmp	r3, r5
    da5e:	d92f      	bls.n	dac0 <_lv_img_cache_open+0xc0>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    da60:	00ec      	lsls	r4, r5, #3
    da62:	1964      	adds	r4, r4, r5
    da64:	00a4      	lsls	r4, r4, #2
    da66:	193c      	adds	r4, r7, r4
    da68:	6860      	ldr	r0, [r4, #4]
    da6a:	47b0      	blx	r6
        if(src_type == LV_IMG_SRC_VARIABLE) {
    da6c:	2800      	cmp	r0, #0
    da6e:	d1ef      	bne.n	da50 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
    da70:	6863      	ldr	r3, [r4, #4]
    da72:	4543      	cmp	r3, r8
    da74:	d1ee      	bne.n	da54 <_lv_img_cache_open+0x54>
    da76:	8920      	ldrh	r0, [r4, #8]
    da78:	466b      	mov	r3, sp
    da7a:	88db      	ldrh	r3, [r3, #6]
    da7c:	1ac0      	subs	r0, r0, r3
    da7e:	4242      	negs	r2, r0
    da80:	4142      	adcs	r2, r0
    da82:	b2d0      	uxtb	r0, r2
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
    da84:	2800      	cmp	r0, #0
    da86:	d0e5      	beq.n	da54 <_lv_img_cache_open+0x54>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    da88:	6a23      	ldr	r3, [r4, #32]
    da8a:	6962      	ldr	r2, [r4, #20]
    da8c:	4694      	mov	ip, r2
    da8e:	4463      	add	r3, ip
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
    da90:	22fa      	movs	r2, #250	; 0xfa
    da92:	0092      	lsls	r2, r2, #2
    da94:	4293      	cmp	r3, r2
    da96:	dd11      	ble.n	dabc <_lv_img_cache_open+0xbc>
    da98:	6222      	str	r2, [r4, #32]
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
    da9a:	2c00      	cmp	r4, #0
    da9c:	d010      	beq.n	dac0 <_lv_img_cache_open+0xc0>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
    da9e:	0020      	movs	r0, r4
    daa0:	b003      	add	sp, #12
    daa2:	bc0c      	pop	{r2, r3}
    daa4:	4690      	mov	r8, r2
    daa6:	4699      	mov	r9, r3
    daa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    daaa:	4641      	mov	r1, r8
    daac:	6860      	ldr	r0, [r4, #4]
    daae:	4b2e      	ldr	r3, [pc, #184]	; (db68 <_lv_img_cache_open+0x168>)
    dab0:	4798      	blx	r3
    dab2:	0003      	movs	r3, r0
    dab4:	4258      	negs	r0, r3
    dab6:	4158      	adcs	r0, r3
    dab8:	b2c0      	uxtb	r0, r0
    daba:	e7e3      	b.n	da84 <_lv_img_cache_open+0x84>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    dabc:	6223      	str	r3, [r4, #32]
    dabe:	e7ec      	b.n	da9a <_lv_img_cache_open+0x9a>
        for(i = 1; i < entry_cnt; i++) {
    dac0:	4b25      	ldr	r3, [pc, #148]	; (db58 <_lv_img_cache_open+0x158>)
    dac2:	881a      	ldrh	r2, [r3, #0]
    dac4:	2a01      	cmp	r2, #1
    dac6:	d913      	bls.n	daf0 <_lv_img_cache_open+0xf0>
    dac8:	003b      	movs	r3, r7
    daca:	3324      	adds	r3, #36	; 0x24
    dacc:	3a02      	subs	r2, #2
    dace:	b291      	uxth	r1, r2
    dad0:	00ca      	lsls	r2, r1, #3
    dad2:	1852      	adds	r2, r2, r1
    dad4:	0092      	lsls	r2, r2, #2
    dad6:	3248      	adds	r2, #72	; 0x48
    dad8:	18ba      	adds	r2, r7, r2
    dada:	003c      	movs	r4, r7
    dadc:	e002      	b.n	dae4 <_lv_img_cache_open+0xe4>
    dade:	3324      	adds	r3, #36	; 0x24
    dae0:	4293      	cmp	r3, r2
    dae2:	d006      	beq.n	daf2 <_lv_img_cache_open+0xf2>
            if(cache[i].life < cached_src->life) {
    dae4:	6a19      	ldr	r1, [r3, #32]
    dae6:	6a20      	ldr	r0, [r4, #32]
    dae8:	4281      	cmp	r1, r0
    daea:	daf8      	bge.n	dade <_lv_img_cache_open+0xde>
                cached_src = &cache[i];
    daec:	001c      	movs	r4, r3
    daee:	e7f6      	b.n	dade <_lv_img_cache_open+0xde>
        for(i = 1; i < entry_cnt; i++) {
    daf0:	003c      	movs	r4, r7
        if(cached_src->dec_dsc.src) {
    daf2:	6863      	ldr	r3, [r4, #4]
    daf4:	2b00      	cmp	r3, #0
    daf6:	d002      	beq.n	dafe <_lv_img_cache_open+0xfe>
            lv_img_decoder_close(&cached_src->dec_dsc);
    daf8:	0020      	movs	r0, r4
    dafa:	4b1c      	ldr	r3, [pc, #112]	; (db6c <_lv_img_cache_open+0x16c>)
    dafc:	4798      	blx	r3
        t_start                          = lv_tick_get();
    dafe:	4b1c      	ldr	r3, [pc, #112]	; (db70 <_lv_img_cache_open+0x170>)
    db00:	4798      	blx	r3
    db02:	0005      	movs	r5, r0
        cached_src->dec_dsc.time_to_open = 0;
    db04:	2300      	movs	r3, #0
    db06:	6163      	str	r3, [r4, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
    db08:	466b      	mov	r3, sp
    db0a:	88da      	ldrh	r2, [r3, #6]
    db0c:	4641      	mov	r1, r8
    db0e:	0020      	movs	r0, r4
    db10:	4b18      	ldr	r3, [pc, #96]	; (db74 <_lv_img_cache_open+0x174>)
    db12:	4798      	blx	r3
        if(open_res == LV_RES_INV) {
    db14:	2800      	cmp	r0, #0
    db16:	d00d      	beq.n	db34 <_lv_img_cache_open+0x134>
        cached_src->life = 0;
    db18:	2300      	movs	r3, #0
    db1a:	6223      	str	r3, [r4, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
    db1c:	6963      	ldr	r3, [r4, #20]
    db1e:	2b00      	cmp	r3, #0
    db20:	d1bd      	bne.n	da9e <_lv_img_cache_open+0x9e>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    db22:	0028      	movs	r0, r5
    db24:	4b14      	ldr	r3, [pc, #80]	; (db78 <_lv_img_cache_open+0x178>)
    db26:	4798      	blx	r3
    db28:	6160      	str	r0, [r4, #20]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    db2a:	2800      	cmp	r0, #0
    db2c:	d1b7      	bne.n	da9e <_lv_img_cache_open+0x9e>
    db2e:	2301      	movs	r3, #1
    db30:	6163      	str	r3, [r4, #20]
    db32:	e7b4      	b.n	da9e <_lv_img_cache_open+0x9e>
            lv_img_decoder_close(&cached_src->dec_dsc);
    db34:	0020      	movs	r0, r4
    db36:	4b0d      	ldr	r3, [pc, #52]	; (db6c <_lv_img_cache_open+0x16c>)
    db38:	4798      	blx	r3
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
    db3a:	2120      	movs	r1, #32
    db3c:	0020      	movs	r0, r4
    db3e:	4d0f      	ldr	r5, [pc, #60]	; (db7c <_lv_img_cache_open+0x17c>)
    db40:	47a8      	blx	r5
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
    db42:	2124      	movs	r1, #36	; 0x24
    db44:	0020      	movs	r0, r4
    db46:	47a8      	blx	r5
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
    db48:	2380      	movs	r3, #128	; 0x80
    db4a:	061b      	lsls	r3, r3, #24
    db4c:	6223      	str	r3, [r4, #32]
            return NULL;
    db4e:	2400      	movs	r4, #0
    db50:	e7a5      	b.n	da9e <_lv_img_cache_open+0x9e>
        return NULL;
    db52:	2400      	movs	r4, #0
    db54:	e7a3      	b.n	da9e <_lv_img_cache_open+0x9e>
    db56:	46c0      	nop			; (mov r8, r8)
    db58:	20002bb6 	.word	0x20002bb6
    db5c:	20004d84 	.word	0x20004d84
    db60:	80000002 	.word	0x80000002
    db64:	000080f9 	.word	0x000080f9
    db68:	00017f3d 	.word	0x00017f3d
    db6c:	0000e61d 	.word	0x0000e61d
    db70:	0000f725 	.word	0x0000f725
    db74:	0000e535 	.word	0x0000e535
    db78:	0000f741 	.word	0x0000f741
    db7c:	00010fe5 	.word	0x00010fe5

0000db80 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
    db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db82:	46d6      	mov	lr, sl
    db84:	4647      	mov	r7, r8
    db86:	b580      	push	{r7, lr}
    db88:	0007      	movs	r7, r0

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    db8a:	4b15      	ldr	r3, [pc, #84]	; (dbe0 <lv_img_cache_invalidate_src+0x60>)
    db8c:	681b      	ldr	r3, [r3, #0]
    db8e:	4698      	mov	r8, r3

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
    db90:	4b14      	ldr	r3, [pc, #80]	; (dbe4 <lv_img_cache_invalidate_src+0x64>)
    db92:	881b      	ldrh	r3, [r3, #0]
    db94:	2b00      	cmp	r3, #0
    db96:	d01e      	beq.n	dbd6 <lv_img_cache_invalidate_src+0x56>
    db98:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    db9a:	4b13      	ldr	r3, [pc, #76]	; (dbe8 <lv_img_cache_invalidate_src+0x68>)
    db9c:	469a      	mov	sl, r3
    for(i = 0; i < entry_cnt; i++) {
    db9e:	4e11      	ldr	r6, [pc, #68]	; (dbe4 <lv_img_cache_invalidate_src+0x64>)
    dba0:	e00f      	b.n	dbc2 <lv_img_cache_invalidate_src+0x42>
            if(cache[i].dec_dsc.src != NULL) {
    dba2:	2b00      	cmp	r3, #0
    dba4:	d002      	beq.n	dbac <lv_img_cache_invalidate_src+0x2c>
                lv_img_decoder_close(&cache[i].dec_dsc);
    dba6:	0020      	movs	r0, r4
    dba8:	4b10      	ldr	r3, [pc, #64]	; (dbec <lv_img_cache_invalidate_src+0x6c>)
    dbaa:	4798      	blx	r3
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    dbac:	2120      	movs	r1, #32
    dbae:	0020      	movs	r0, r4
    dbb0:	47d0      	blx	sl
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
    dbb2:	2124      	movs	r1, #36	; 0x24
    dbb4:	0020      	movs	r0, r4
    dbb6:	47d0      	blx	sl
    for(i = 0; i < entry_cnt; i++) {
    dbb8:	3501      	adds	r5, #1
    dbba:	b2ad      	uxth	r5, r5
    dbbc:	8833      	ldrh	r3, [r6, #0]
    dbbe:	42ab      	cmp	r3, r5
    dbc0:	d909      	bls.n	dbd6 <lv_img_cache_invalidate_src+0x56>
        if(cache[i].dec_dsc.src == src || src == NULL) {
    dbc2:	00ec      	lsls	r4, r5, #3
    dbc4:	1964      	adds	r4, r4, r5
    dbc6:	00a4      	lsls	r4, r4, #2
    dbc8:	4444      	add	r4, r8
    dbca:	6863      	ldr	r3, [r4, #4]
    dbcc:	42bb      	cmp	r3, r7
    dbce:	d0e8      	beq.n	dba2 <lv_img_cache_invalidate_src+0x22>
    dbd0:	2f00      	cmp	r7, #0
    dbd2:	d1f1      	bne.n	dbb8 <lv_img_cache_invalidate_src+0x38>
    dbd4:	e7e5      	b.n	dba2 <lv_img_cache_invalidate_src+0x22>
        }
    }
}
    dbd6:	bc0c      	pop	{r2, r3}
    dbd8:	4690      	mov	r8, r2
    dbda:	469a      	mov	sl, r3
    dbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dbde:	46c0      	nop			; (mov r8, r8)
    dbe0:	20004d84 	.word	0x20004d84
    dbe4:	20002bb6 	.word	0x20002bb6
    dbe8:	00010fe5 	.word	0x00010fe5
    dbec:	0000e61d 	.word	0x0000e61d

0000dbf0 <lv_img_cache_set_size>:
{
    dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbf2:	46c6      	mov	lr, r8
    dbf4:	b500      	push	{lr}
    dbf6:	0004      	movs	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    dbf8:	4b20      	ldr	r3, [pc, #128]	; (dc7c <lv_img_cache_set_size+0x8c>)
    dbfa:	681b      	ldr	r3, [r3, #0]
    dbfc:	2b00      	cmp	r3, #0
    dbfe:	d006      	beq.n	dc0e <lv_img_cache_set_size+0x1e>
        lv_img_cache_invalidate_src(NULL);
    dc00:	2000      	movs	r0, #0
    dc02:	4b1f      	ldr	r3, [pc, #124]	; (dc80 <lv_img_cache_set_size+0x90>)
    dc04:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
    dc06:	4b1d      	ldr	r3, [pc, #116]	; (dc7c <lv_img_cache_set_size+0x8c>)
    dc08:	6818      	ldr	r0, [r3, #0]
    dc0a:	4b1e      	ldr	r3, [pc, #120]	; (dc84 <lv_img_cache_set_size+0x94>)
    dc0c:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
    dc0e:	00e0      	lsls	r0, r4, #3
    dc10:	1900      	adds	r0, r0, r4
    dc12:	0080      	lsls	r0, r0, #2
    dc14:	4b1c      	ldr	r3, [pc, #112]	; (dc88 <lv_img_cache_set_size+0x98>)
    dc16:	4798      	blx	r3
    dc18:	4b18      	ldr	r3, [pc, #96]	; (dc7c <lv_img_cache_set_size+0x8c>)
    dc1a:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    dc1c:	4b1b      	ldr	r3, [pc, #108]	; (dc8c <lv_img_cache_set_size+0x9c>)
    dc1e:	4798      	blx	r3
    dc20:	2800      	cmp	r0, #0
    dc22:	d01f      	beq.n	dc64 <lv_img_cache_set_size+0x74>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
    dc24:	4b15      	ldr	r3, [pc, #84]	; (dc7c <lv_img_cache_set_size+0x8c>)
    dc26:	681b      	ldr	r3, [r3, #0]
    dc28:	2b00      	cmp	r3, #0
    dc2a:	d022      	beq.n	dc72 <lv_img_cache_set_size+0x82>
    entry_cnt = new_entry_cnt;
    dc2c:	4b18      	ldr	r3, [pc, #96]	; (dc90 <lv_img_cache_set_size+0xa0>)
    dc2e:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
    dc30:	2c00      	cmp	r4, #0
    dc32:	d014      	beq.n	dc5e <lv_img_cache_set_size+0x6e>
    dc34:	2400      	movs	r4, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    dc36:	4f11      	ldr	r7, [pc, #68]	; (dc7c <lv_img_cache_set_size+0x8c>)
    dc38:	4e16      	ldr	r6, [pc, #88]	; (dc94 <lv_img_cache_set_size+0xa4>)
    for(i = 0; i < entry_cnt; i++) {
    dc3a:	4698      	mov	r8, r3
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    dc3c:	00e5      	lsls	r5, r4, #3
    dc3e:	192d      	adds	r5, r5, r4
    dc40:	00ad      	lsls	r5, r5, #2
    dc42:	683b      	ldr	r3, [r7, #0]
    dc44:	1958      	adds	r0, r3, r5
    dc46:	2120      	movs	r1, #32
    dc48:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
    dc4a:	683b      	ldr	r3, [r7, #0]
    dc4c:	1958      	adds	r0, r3, r5
    dc4e:	2124      	movs	r1, #36	; 0x24
    dc50:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
    dc52:	3401      	adds	r4, #1
    dc54:	b2a4      	uxth	r4, r4
    dc56:	4643      	mov	r3, r8
    dc58:	881b      	ldrh	r3, [r3, #0]
    dc5a:	42a3      	cmp	r3, r4
    dc5c:	d8ee      	bhi.n	dc3c <lv_img_cache_set_size+0x4c>
}
    dc5e:	bc04      	pop	{r2}
    dc60:	4690      	mov	r8, r2
    dc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    dc64:	4b05      	ldr	r3, [pc, #20]	; (dc7c <lv_img_cache_set_size+0x8c>)
    dc66:	681a      	ldr	r2, [r3, #0]
    dc68:	2300      	movs	r3, #0
    dc6a:	480b      	ldr	r0, [pc, #44]	; (dc98 <lv_img_cache_set_size+0xa8>)
    dc6c:	490b      	ldr	r1, [pc, #44]	; (dc9c <lv_img_cache_set_size+0xac>)
    dc6e:	4788      	blx	r1
    dc70:	e7fe      	b.n	dc70 <lv_img_cache_set_size+0x80>
        entry_cnt = 0;
    dc72:	2200      	movs	r2, #0
    dc74:	4b06      	ldr	r3, [pc, #24]	; (dc90 <lv_img_cache_set_size+0xa0>)
    dc76:	801a      	strh	r2, [r3, #0]
        return;
    dc78:	e7f1      	b.n	dc5e <lv_img_cache_set_size+0x6e>
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	20004d84 	.word	0x20004d84
    dc80:	0000db81 	.word	0x0000db81
    dc84:	00010ad1 	.word	0x00010ad1
    dc88:	00010a09 	.word	0x00010a09
    dc8c:	00001415 	.word	0x00001415
    dc90:	20002bb6 	.word	0x20002bb6
    dc94:	00010fe5 	.word	0x00010fe5
    dc98:	00018804 	.word	0x00018804
    dc9c:	0000141d 	.word	0x0000141d

0000dca0 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
    dca0:	b530      	push	{r4, r5, lr}
    dca2:	b085      	sub	sp, #20
    dca4:	000c      	movs	r4, r1
    dca6:	0015      	movs	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
    dca8:	0008      	movs	r0, r1
    dcaa:	4b30      	ldr	r3, [pc, #192]	; (dd6c <lv_img_decoder_built_in_info+0xcc>)
    dcac:	4798      	blx	r3
    dcae:	1e03      	subs	r3, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
    dcb0:	d122      	bne.n	dcf8 <lv_img_decoder_built_in_info+0x58>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    dcb2:	7823      	ldrb	r3, [r4, #0]
    dcb4:	06db      	lsls	r3, r3, #27
    dcb6:	0edb      	lsrs	r3, r3, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    dcb8:	3b04      	subs	r3, #4
    dcba:	b2db      	uxtb	r3, r3
    dcbc:	2000      	movs	r0, #0
    dcbe:	2b0a      	cmp	r3, #10
    dcc0:	d81f      	bhi.n	dd02 <lv_img_decoder_built_in_info+0x62>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
    dcc2:	6823      	ldr	r3, [r4, #0]
    dcc4:	02db      	lsls	r3, r3, #11
    dcc6:	0d5b      	lsrs	r3, r3, #21
    dcc8:	029b      	lsls	r3, r3, #10
    dcca:	4a29      	ldr	r2, [pc, #164]	; (dd70 <lv_img_decoder_built_in_info+0xd0>)
    dccc:	6829      	ldr	r1, [r5, #0]
    dcce:	400a      	ands	r2, r1
    dcd0:	4313      	orrs	r3, r2
    dcd2:	602b      	str	r3, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    dcd4:	8863      	ldrh	r3, [r4, #2]
    dcd6:	095b      	lsrs	r3, r3, #5
    dcd8:	015a      	lsls	r2, r3, #5
    dcda:	8869      	ldrh	r1, [r5, #2]
    dcdc:	231f      	movs	r3, #31
    dcde:	400b      	ands	r3, r1
    dce0:	4313      	orrs	r3, r2
    dce2:	806b      	strh	r3, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
    dce4:	7823      	ldrb	r3, [r4, #0]
    dce6:	06db      	lsls	r3, r3, #27
    dce8:	0eda      	lsrs	r2, r3, #27
    dcea:	782b      	ldrb	r3, [r5, #0]
    dcec:	211f      	movs	r1, #31
    dcee:	438b      	bics	r3, r1
    dcf0:	4313      	orrs	r3, r2
    dcf2:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
    dcf4:	3001      	adds	r0, #1
    dcf6:	e004      	b.n	dd02 <lv_img_decoder_built_in_info+0x62>
    else if(src_type == LV_IMG_SRC_FILE) {
    dcf8:	2801      	cmp	r0, #1
    dcfa:	d004      	beq.n	dd06 <lv_img_decoder_built_in_info+0x66>
        return LV_RES_INV;
    dcfc:	2000      	movs	r0, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    dcfe:	2b02      	cmp	r3, #2
    dd00:	d023      	beq.n	dd4a <lv_img_decoder_built_in_info+0xaa>
}
    dd02:	b005      	add	sp, #20
    dd04:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
    dd06:	2202      	movs	r2, #2
    dd08:	0021      	movs	r1, r4
    dd0a:	a802      	add	r0, sp, #8
    dd0c:	4b19      	ldr	r3, [pc, #100]	; (dd74 <lv_img_decoder_built_in_info+0xd4>)
    dd0e:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
    dd10:	2800      	cmp	r0, #0
    dd12:	d00a      	beq.n	dd2a <lv_img_decoder_built_in_info+0x8a>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    dd14:	782b      	ldrb	r3, [r5, #0]
    dd16:	06db      	lsls	r3, r3, #27
    dd18:	0edb      	lsrs	r3, r3, #27
    dd1a:	331c      	adds	r3, #28
    dd1c:	221f      	movs	r2, #31
    dd1e:	4013      	ands	r3, r2
    return LV_RES_OK;
    dd20:	2001      	movs	r0, #1
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    dd22:	2b0a      	cmp	r3, #10
    dd24:	d9ed      	bls.n	dd02 <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
    dd26:	2000      	movs	r0, #0
    dd28:	e7eb      	b.n	dd02 <lv_img_decoder_built_in_info+0x62>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
    dd2a:	ab01      	add	r3, sp, #4
    dd2c:	2204      	movs	r2, #4
    dd2e:	0029      	movs	r1, r5
    dd30:	a802      	add	r0, sp, #8
    dd32:	4c11      	ldr	r4, [pc, #68]	; (dd78 <lv_img_decoder_built_in_info+0xd8>)
    dd34:	47a0      	blx	r4
    dd36:	0004      	movs	r4, r0
            lv_fs_close(&file);
    dd38:	a802      	add	r0, sp, #8
    dd3a:	4b10      	ldr	r3, [pc, #64]	; (dd7c <lv_img_decoder_built_in_info+0xdc>)
    dd3c:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
    dd3e:	2c00      	cmp	r4, #0
    dd40:	d1f1      	bne.n	dd26 <lv_img_decoder_built_in_info+0x86>
    dd42:	9b01      	ldr	r3, [sp, #4]
    dd44:	2b04      	cmp	r3, #4
    dd46:	d1ee      	bne.n	dd26 <lv_img_decoder_built_in_info+0x86>
    dd48:	e7e4      	b.n	dd14 <lv_img_decoder_built_in_info+0x74>
        header->w = 1;
    dd4a:	4a09      	ldr	r2, [pc, #36]	; (dd70 <lv_img_decoder_built_in_info+0xd0>)
    dd4c:	682b      	ldr	r3, [r5, #0]
    dd4e:	401a      	ands	r2, r3
    dd50:	2380      	movs	r3, #128	; 0x80
    dd52:	00db      	lsls	r3, r3, #3
    dd54:	4313      	orrs	r3, r2
    dd56:	602b      	str	r3, [r5, #0]
        header->h = 1;
    dd58:	2220      	movs	r2, #32
    dd5a:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    dd5c:	32c0      	adds	r2, #192	; 0xc0
    dd5e:	4013      	ands	r3, r2
    dd60:	220b      	movs	r2, #11
    dd62:	4313      	orrs	r3, r2
    dd64:	702b      	strb	r3, [r5, #0]
    return LV_RES_OK;
    dd66:	3001      	adds	r0, #1
    dd68:	e7cb      	b.n	dd02 <lv_img_decoder_built_in_info+0x62>
    dd6a:	46c0      	nop			; (mov r8, r8)
    dd6c:	000080f9 	.word	0x000080f9
    dd70:	ffe003ff 	.word	0xffe003ff
    dd74:	000103c1 	.word	0x000103c1
    dd78:	00010325 	.word	0x00010325
    dd7c:	000102f5 	.word	0x000102f5

0000dd80 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
    dd80:	b570      	push	{r4, r5, r6, lr}
    dd82:	000d      	movs	r5, r1
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    dd84:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
    dd86:	2c00      	cmp	r4, #0
    dd88:	d016      	beq.n	ddb8 <lv_img_decoder_built_in_close+0x38>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
    dd8a:	6820      	ldr	r0, [r4, #0]
    dd8c:	2800      	cmp	r0, #0
    dd8e:	d004      	beq.n	dd9a <lv_img_decoder_built_in_close+0x1a>
            lv_fs_close(user_data->f);
    dd90:	4b0a      	ldr	r3, [pc, #40]	; (ddbc <lv_img_decoder_built_in_close+0x3c>)
    dd92:	4798      	blx	r3
            lv_mem_free(user_data->f);
    dd94:	6820      	ldr	r0, [r4, #0]
    dd96:	4b0a      	ldr	r3, [pc, #40]	; (ddc0 <lv_img_decoder_built_in_close+0x40>)
    dd98:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
    dd9a:	6860      	ldr	r0, [r4, #4]
    dd9c:	2800      	cmp	r0, #0
    dd9e:	d001      	beq.n	dda4 <lv_img_decoder_built_in_close+0x24>
    dda0:	4b07      	ldr	r3, [pc, #28]	; (ddc0 <lv_img_decoder_built_in_close+0x40>)
    dda2:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
    dda4:	68a0      	ldr	r0, [r4, #8]
    dda6:	2800      	cmp	r0, #0
    dda8:	d001      	beq.n	ddae <lv_img_decoder_built_in_close+0x2e>
    ddaa:	4b05      	ldr	r3, [pc, #20]	; (ddc0 <lv_img_decoder_built_in_close+0x40>)
    ddac:	4798      	blx	r3

        lv_mem_free(user_data);
    ddae:	0020      	movs	r0, r4
    ddb0:	4b03      	ldr	r3, [pc, #12]	; (ddc0 <lv_img_decoder_built_in_close+0x40>)
    ddb2:	4798      	blx	r3

        dsc->user_data = NULL;
    ddb4:	2300      	movs	r3, #0
    ddb6:	61eb      	str	r3, [r5, #28]
    }
}
    ddb8:	bd70      	pop	{r4, r5, r6, pc}
    ddba:	46c0      	nop			; (mov r8, r8)
    ddbc:	000102f5 	.word	0x000102f5
    ddc0:	00010ad1 	.word	0x00010ad1

0000ddc4 <lv_img_decoder_built_in_open>:
{
    ddc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddc6:	46de      	mov	lr, fp
    ddc8:	4657      	mov	r7, sl
    ddca:	464e      	mov	r6, r9
    ddcc:	4645      	mov	r5, r8
    ddce:	b5e0      	push	{r5, r6, r7, lr}
    ddd0:	b085      	sub	sp, #20
    ddd2:	0006      	movs	r6, r0
    ddd4:	000c      	movs	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    ddd6:	7a8b      	ldrb	r3, [r1, #10]
    ddd8:	2b01      	cmp	r3, #1
    ddda:	d018      	beq.n	de0e <lv_img_decoder_built_in_open+0x4a>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    dddc:	2b00      	cmp	r3, #0
    ddde:	d000      	beq.n	dde2 <lv_img_decoder_built_in_open+0x1e>
    dde0:	e14a      	b.n	e078 <lv_img_decoder_built_in_open+0x2b4>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
    dde2:	684b      	ldr	r3, [r1, #4]
    dde4:	689b      	ldr	r3, [r3, #8]
    dde6:	2b00      	cmp	r3, #0
    dde8:	d100      	bne.n	ddec <lv_img_decoder_built_in_open+0x28>
    ddea:	e143      	b.n	e074 <lv_img_decoder_built_in_open+0x2b0>
    lv_img_cf_t cf = dsc->header.cf;
    ddec:	7b08      	ldrb	r0, [r1, #12]
    ddee:	06c0      	lsls	r0, r0, #27
    ddf0:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    ddf2:	1f03      	subs	r3, r0, #4
    ddf4:	2b02      	cmp	r3, #2
    ddf6:	d85a      	bhi.n	deae <lv_img_decoder_built_in_open+0xea>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
    ddf8:	6863      	ldr	r3, [r4, #4]
    ddfa:	689b      	ldr	r3, [r3, #8]
    ddfc:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    ddfe:	2001      	movs	r0, #1
}
    de00:	b005      	add	sp, #20
    de02:	bc3c      	pop	{r2, r3, r4, r5}
    de04:	4690      	mov	r8, r2
    de06:	4699      	mov	r9, r3
    de08:	46a2      	mov	sl, r4
    de0a:	46ab      	mov	fp, r5
    de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    de0e:	6848      	ldr	r0, [r1, #4]
    de10:	4b9f      	ldr	r3, [pc, #636]	; (e090 <lv_img_decoder_built_in_open+0x2cc>)
    de12:	4798      	blx	r3
    de14:	499f      	ldr	r1, [pc, #636]	; (e094 <lv_img_decoder_built_in_open+0x2d0>)
    de16:	4ba0      	ldr	r3, [pc, #640]	; (e098 <lv_img_decoder_built_in_open+0x2d4>)
    de18:	4798      	blx	r3
    de1a:	2800      	cmp	r0, #0
    de1c:	d11a      	bne.n	de54 <lv_img_decoder_built_in_open+0x90>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
    de1e:	2202      	movs	r2, #2
    de20:	6861      	ldr	r1, [r4, #4]
    de22:	a802      	add	r0, sp, #8
    de24:	4b9d      	ldr	r3, [pc, #628]	; (e09c <lv_img_decoder_built_in_open+0x2d8>)
    de26:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
    de28:	2800      	cmp	r0, #0
    de2a:	d113      	bne.n	de54 <lv_img_decoder_built_in_open+0x90>
        if(dsc->user_data == NULL) {
    de2c:	69e3      	ldr	r3, [r4, #28]
    de2e:	2b00      	cmp	r3, #0
    de30:	d012      	beq.n	de58 <lv_img_decoder_built_in_open+0x94>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    de32:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
    de34:	2008      	movs	r0, #8
    de36:	4b9a      	ldr	r3, [pc, #616]	; (e0a0 <lv_img_decoder_built_in_open+0x2dc>)
    de38:	4798      	blx	r3
    de3a:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
    de3c:	4b99      	ldr	r3, [pc, #612]	; (e0a4 <lv_img_decoder_built_in_open+0x2e0>)
    de3e:	4798      	blx	r3
    de40:	2800      	cmp	r0, #0
    de42:	d01e      	beq.n	de82 <lv_img_decoder_built_in_open+0xbe>
        if(user_data->f == NULL) {
    de44:	682a      	ldr	r2, [r5, #0]
    de46:	2300      	movs	r3, #0
    de48:	2a00      	cmp	r2, #0
    de4a:	d120      	bne.n	de8e <lv_img_decoder_built_in_open+0xca>
            lv_img_decoder_built_in_close(decoder, dsc);
    de4c:	0021      	movs	r1, r4
    de4e:	0030      	movs	r0, r6
    de50:	4b95      	ldr	r3, [pc, #596]	; (e0a8 <lv_img_decoder_built_in_open+0x2e4>)
    de52:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    de54:	2000      	movs	r0, #0
    de56:	e7d3      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    de58:	300c      	adds	r0, #12
    de5a:	4b91      	ldr	r3, [pc, #580]	; (e0a0 <lv_img_decoder_built_in_open+0x2dc>)
    de5c:	4798      	blx	r3
    de5e:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    de60:	4b90      	ldr	r3, [pc, #576]	; (e0a4 <lv_img_decoder_built_in_open+0x2e0>)
    de62:	4798      	blx	r3
    de64:	2800      	cmp	r0, #0
    de66:	d105      	bne.n	de74 <lv_img_decoder_built_in_open+0xb0>
    de68:	69e2      	ldr	r2, [r4, #28]
    de6a:	2300      	movs	r3, #0
    de6c:	488f      	ldr	r0, [pc, #572]	; (e0ac <lv_img_decoder_built_in_open+0x2e8>)
    de6e:	4990      	ldr	r1, [pc, #576]	; (e0b0 <lv_img_decoder_built_in_open+0x2ec>)
    de70:	4788      	blx	r1
    de72:	e7fe      	b.n	de72 <lv_img_decoder_built_in_open+0xae>
            if(dsc->user_data == NULL) {
    de74:	69e0      	ldr	r0, [r4, #28]
    de76:	2800      	cmp	r0, #0
    de78:	d0ec      	beq.n	de54 <lv_img_decoder_built_in_open+0x90>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    de7a:	210c      	movs	r1, #12
    de7c:	4b8d      	ldr	r3, [pc, #564]	; (e0b4 <lv_img_decoder_built_in_open+0x2f0>)
    de7e:	4798      	blx	r3
    de80:	e7d7      	b.n	de32 <lv_img_decoder_built_in_open+0x6e>
        LV_ASSERT_MEM(user_data->f);
    de82:	682a      	ldr	r2, [r5, #0]
    de84:	2300      	movs	r3, #0
    de86:	4889      	ldr	r0, [pc, #548]	; (e0ac <lv_img_decoder_built_in_open+0x2e8>)
    de88:	4989      	ldr	r1, [pc, #548]	; (e0b0 <lv_img_decoder_built_in_open+0x2ec>)
    de8a:	4788      	blx	r1
    de8c:	e7fe      	b.n	de8c <lv_img_decoder_built_in_open+0xc8>
    de8e:	a902      	add	r1, sp, #8
    de90:	5c59      	ldrb	r1, [r3, r1]
    de92:	54d1      	strb	r1, [r2, r3]
    de94:	3301      	adds	r3, #1
    while(len) {
    de96:	2b08      	cmp	r3, #8
    de98:	d1f9      	bne.n	de8e <lv_img_decoder_built_in_open+0xca>
    lv_img_cf_t cf = dsc->header.cf;
    de9a:	7b20      	ldrb	r0, [r4, #12]
    de9c:	06c0      	lsls	r0, r0, #27
    de9e:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    dea0:	1f03      	subs	r3, r0, #4
    dea2:	2b02      	cmp	r3, #2
    dea4:	d803      	bhi.n	deae <lv_img_decoder_built_in_open+0xea>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    dea6:	7aa3      	ldrb	r3, [r4, #10]
    dea8:	2b00      	cmp	r3, #0
    deaa:	d0a5      	beq.n	ddf8 <lv_img_decoder_built_in_open+0x34>
    deac:	e0eb      	b.n	e086 <lv_img_decoder_built_in_open+0x2c2>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
    deae:	1fc3      	subs	r3, r0, #7
    deb0:	2b03      	cmp	r3, #3
    deb2:	d907      	bls.n	dec4 <lv_img_decoder_built_in_open+0x100>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
    deb4:	380b      	subs	r0, #11
    deb6:	2803      	cmp	r0, #3
    deb8:	d900      	bls.n	debc <lv_img_decoder_built_in_open+0xf8>
    deba:	e0d5      	b.n	e068 <lv_img_decoder_built_in_open+0x2a4>
        dsc->img_data = NULL;
    debc:	2300      	movs	r3, #0
    debe:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
    dec0:	2001      	movs	r0, #1
    dec2:	e79d      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
    dec4:	4b7c      	ldr	r3, [pc, #496]	; (e0b8 <lv_img_decoder_built_in_open+0x2f4>)
    dec6:	4798      	blx	r3
    dec8:	0007      	movs	r7, r0
        if(dsc->user_data == NULL) {
    deca:	69e3      	ldr	r3, [r4, #28]
    decc:	2b00      	cmp	r3, #0
    dece:	d00f      	beq.n	def0 <lv_img_decoder_built_in_open+0x12c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ded0:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
    ded2:	2002      	movs	r0, #2
    ded4:	40b8      	lsls	r0, r7
    ded6:	4b72      	ldr	r3, [pc, #456]	; (e0a0 <lv_img_decoder_built_in_open+0x2dc>)
    ded8:	4798      	blx	r3
    deda:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
    dedc:	4b71      	ldr	r3, [pc, #452]	; (e0a4 <lv_img_decoder_built_in_open+0x2e0>)
    dede:	4798      	blx	r3
    dee0:	2800      	cmp	r0, #0
    dee2:	d120      	bne.n	df26 <lv_img_decoder_built_in_open+0x162>
    dee4:	686a      	ldr	r2, [r5, #4]
    dee6:	2300      	movs	r3, #0
    dee8:	4870      	ldr	r0, [pc, #448]	; (e0ac <lv_img_decoder_built_in_open+0x2e8>)
    deea:	4971      	ldr	r1, [pc, #452]	; (e0b0 <lv_img_decoder_built_in_open+0x2ec>)
    deec:	4788      	blx	r1
    deee:	e7fe      	b.n	deee <lv_img_decoder_built_in_open+0x12a>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    def0:	200c      	movs	r0, #12
    def2:	4b6b      	ldr	r3, [pc, #428]	; (e0a0 <lv_img_decoder_built_in_open+0x2dc>)
    def4:	4798      	blx	r3
    def6:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    def8:	4b6a      	ldr	r3, [pc, #424]	; (e0a4 <lv_img_decoder_built_in_open+0x2e0>)
    defa:	4798      	blx	r3
    defc:	2800      	cmp	r0, #0
    defe:	d105      	bne.n	df0c <lv_img_decoder_built_in_open+0x148>
    df00:	69e2      	ldr	r2, [r4, #28]
    df02:	2300      	movs	r3, #0
    df04:	4869      	ldr	r0, [pc, #420]	; (e0ac <lv_img_decoder_built_in_open+0x2e8>)
    df06:	496a      	ldr	r1, [pc, #424]	; (e0b0 <lv_img_decoder_built_in_open+0x2ec>)
    df08:	4788      	blx	r1
    df0a:	e7fe      	b.n	df0a <lv_img_decoder_built_in_open+0x146>
            if(dsc->user_data == NULL) {
    df0c:	69e0      	ldr	r0, [r4, #28]
    df0e:	2800      	cmp	r0, #0
    df10:	d105      	bne.n	df1e <lv_img_decoder_built_in_open+0x15a>
                lv_img_decoder_built_in_close(decoder, dsc);
    df12:	0021      	movs	r1, r4
    df14:	0030      	movs	r0, r6
    df16:	4b64      	ldr	r3, [pc, #400]	; (e0a8 <lv_img_decoder_built_in_open+0x2e4>)
    df18:	4798      	blx	r3
                return LV_RES_INV;
    df1a:	2000      	movs	r0, #0
    df1c:	e770      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    df1e:	210c      	movs	r1, #12
    df20:	4b64      	ldr	r3, [pc, #400]	; (e0b4 <lv_img_decoder_built_in_open+0x2f0>)
    df22:	4798      	blx	r3
    df24:	e7d4      	b.n	ded0 <lv_img_decoder_built_in_open+0x10c>
        uint32_t palette_size = 1 << px_size;
    df26:	2301      	movs	r3, #1
    df28:	40bb      	lsls	r3, r7
    df2a:	001f      	movs	r7, r3
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
    df2c:	0018      	movs	r0, r3
    df2e:	4b5c      	ldr	r3, [pc, #368]	; (e0a0 <lv_img_decoder_built_in_open+0x2dc>)
    df30:	4798      	blx	r3
    df32:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
    df34:	4b5b      	ldr	r3, [pc, #364]	; (e0a4 <lv_img_decoder_built_in_open+0x2e0>)
    df36:	4798      	blx	r3
    df38:	2800      	cmp	r0, #0
    df3a:	d047      	beq.n	dfcc <lv_img_decoder_built_in_open+0x208>
        if(user_data->palette == NULL || user_data->opa == NULL) {
    df3c:	686b      	ldr	r3, [r5, #4]
    df3e:	2b00      	cmp	r3, #0
    df40:	d04a      	beq.n	dfd8 <lv_img_decoder_built_in_open+0x214>
    df42:	68ab      	ldr	r3, [r5, #8]
    df44:	2b00      	cmp	r3, #0
    df46:	d047      	beq.n	dfd8 <lv_img_decoder_built_in_open+0x214>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    df48:	7aa3      	ldrb	r3, [r4, #10]
    df4a:	2b01      	cmp	r3, #1
    df4c:	d04a      	beq.n	dfe4 <lv_img_decoder_built_in_open+0x220>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
    df4e:	6863      	ldr	r3, [r4, #4]
    df50:	6898      	ldr	r0, [r3, #8]
            for(i = 0; i < palette_size; i++) {
    df52:	2f00      	cmp	r7, #0
    df54:	d100      	bne.n	df58 <lv_img_decoder_built_in_open+0x194>
    df56:	e083      	b.n	e060 <lv_img_decoder_built_in_open+0x29c>
    df58:	2300      	movs	r3, #0
    df5a:	4698      	mov	r8, r3
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    df5c:	333f      	adds	r3, #63	; 0x3f
    df5e:	469b      	mov	fp, r3
    df60:	3b20      	subs	r3, #32
    df62:	4699      	mov	r9, r3
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
    df64:	4b55      	ldr	r3, [pc, #340]	; (e0bc <lv_img_decoder_built_in_open+0x2f8>)
    df66:	469a      	mov	sl, r3
    df68:	4641      	mov	r1, r8
    df6a:	9401      	str	r4, [sp, #4]
    df6c:	004a      	lsls	r2, r1, #1
    df6e:	686b      	ldr	r3, [r5, #4]
    df70:	469c      	mov	ip, r3
    df72:	4462      	add	r2, ip
    df74:	7843      	ldrb	r3, [r0, #1]
    df76:	089c      	lsrs	r4, r3, #2
    df78:	9400      	str	r4, [sp, #0]
    df7a:	7886      	ldrb	r6, [r0, #2]
    df7c:	08f6      	lsrs	r6, r6, #3
    df7e:	464c      	mov	r4, r9
    df80:	4026      	ands	r6, r4
    df82:	7804      	ldrb	r4, [r0, #0]
    df84:	08e4      	lsrs	r4, r4, #3
    df86:	46a4      	mov	ip, r4
    df88:	7814      	ldrb	r4, [r2, #0]
    df8a:	464b      	mov	r3, r9
    df8c:	439c      	bics	r4, r3
    df8e:	46a0      	mov	r8, r4
    df90:	4664      	mov	r4, ip
    df92:	4643      	mov	r3, r8
    df94:	431c      	orrs	r4, r3
    df96:	7014      	strb	r4, [r2, #0]
    df98:	465b      	mov	r3, fp
    df9a:	9c00      	ldr	r4, [sp, #0]
    df9c:	401c      	ands	r4, r3
    df9e:	0163      	lsls	r3, r4, #5
    dfa0:	469c      	mov	ip, r3
    dfa2:	8813      	ldrh	r3, [r2, #0]
    dfa4:	4654      	mov	r4, sl
    dfa6:	4023      	ands	r3, r4
    dfa8:	4664      	mov	r4, ip
    dfaa:	4323      	orrs	r3, r4
    dfac:	8013      	strh	r3, [r2, #0]
    dfae:	00f6      	lsls	r6, r6, #3
    dfb0:	0a1b      	lsrs	r3, r3, #8
    dfb2:	2407      	movs	r4, #7
    dfb4:	4023      	ands	r3, r4
    dfb6:	4333      	orrs	r3, r6
    dfb8:	7053      	strb	r3, [r2, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
    dfba:	78c3      	ldrb	r3, [r0, #3]
    dfbc:	68aa      	ldr	r2, [r5, #8]
    dfbe:	5453      	strb	r3, [r2, r1]
            for(i = 0; i < palette_size; i++) {
    dfc0:	3101      	adds	r1, #1
    dfc2:	3004      	adds	r0, #4
    dfc4:	428f      	cmp	r7, r1
    dfc6:	d1d1      	bne.n	df6c <lv_img_decoder_built_in_open+0x1a8>
    dfc8:	9c01      	ldr	r4, [sp, #4]
    dfca:	e049      	b.n	e060 <lv_img_decoder_built_in_open+0x29c>
        LV_ASSERT_MEM(user_data->opa);
    dfcc:	68aa      	ldr	r2, [r5, #8]
    dfce:	2300      	movs	r3, #0
    dfd0:	4836      	ldr	r0, [pc, #216]	; (e0ac <lv_img_decoder_built_in_open+0x2e8>)
    dfd2:	4937      	ldr	r1, [pc, #220]	; (e0b0 <lv_img_decoder_built_in_open+0x2ec>)
    dfd4:	4788      	blx	r1
    dfd6:	e7fe      	b.n	dfd6 <lv_img_decoder_built_in_open+0x212>
            lv_img_decoder_built_in_close(decoder, dsc);
    dfd8:	0021      	movs	r1, r4
    dfda:	0030      	movs	r0, r6
    dfdc:	4b32      	ldr	r3, [pc, #200]	; (e0a8 <lv_img_decoder_built_in_open+0x2e4>)
    dfde:	4798      	blx	r3
            return LV_RES_INV;
    dfe0:	2000      	movs	r0, #0
    dfe2:	e70d      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
    dfe4:	2104      	movs	r1, #4
    dfe6:	6828      	ldr	r0, [r5, #0]
    dfe8:	4b35      	ldr	r3, [pc, #212]	; (e0c0 <lv_img_decoder_built_in_open+0x2fc>)
    dfea:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
    dfec:	2f00      	cmp	r7, #0
    dfee:	d037      	beq.n	e060 <lv_img_decoder_built_in_open+0x29c>
    dff0:	2600      	movs	r6, #0
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
    dff2:	4b34      	ldr	r3, [pc, #208]	; (e0c4 <lv_img_decoder_built_in_open+0x300>)
    dff4:	469a      	mov	sl, r3
    dff6:	233f      	movs	r3, #63	; 0x3f
    dff8:	4699      	mov	r9, r3
    dffa:	3b20      	subs	r3, #32
    dffc:	4698      	mov	r8, r3
    dffe:	2300      	movs	r3, #0
    e000:	2204      	movs	r2, #4
    e002:	a902      	add	r1, sp, #8
    e004:	6828      	ldr	r0, [r5, #0]
    e006:	47d0      	blx	sl
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
    e008:	0072      	lsls	r2, r6, #1
    e00a:	686b      	ldr	r3, [r5, #4]
    e00c:	469c      	mov	ip, r3
    e00e:	4462      	add	r2, ip
    e010:	ab02      	add	r3, sp, #8
    e012:	785b      	ldrb	r3, [r3, #1]
    e014:	0899      	lsrs	r1, r3, #2
    e016:	9100      	str	r1, [sp, #0]
    e018:	a902      	add	r1, sp, #8
    e01a:	7889      	ldrb	r1, [r1, #2]
    e01c:	08c9      	lsrs	r1, r1, #3
    e01e:	4640      	mov	r0, r8
    e020:	4001      	ands	r1, r0
    e022:	468b      	mov	fp, r1
    e024:	a902      	add	r1, sp, #8
    e026:	7808      	ldrb	r0, [r1, #0]
    e028:	08c0      	lsrs	r0, r0, #3
    e02a:	7811      	ldrb	r1, [r2, #0]
    e02c:	4643      	mov	r3, r8
    e02e:	4399      	bics	r1, r3
    e030:	4308      	orrs	r0, r1
    e032:	7010      	strb	r0, [r2, #0]
    e034:	464b      	mov	r3, r9
    e036:	9900      	ldr	r1, [sp, #0]
    e038:	4019      	ands	r1, r3
    e03a:	0148      	lsls	r0, r1, #5
    e03c:	8813      	ldrh	r3, [r2, #0]
    e03e:	491f      	ldr	r1, [pc, #124]	; (e0bc <lv_img_decoder_built_in_open+0x2f8>)
    e040:	400b      	ands	r3, r1
    e042:	4303      	orrs	r3, r0
    e044:	8013      	strh	r3, [r2, #0]
    e046:	4659      	mov	r1, fp
    e048:	00c9      	lsls	r1, r1, #3
    e04a:	055b      	lsls	r3, r3, #21
    e04c:	0f5b      	lsrs	r3, r3, #29
    e04e:	430b      	orrs	r3, r1
    e050:	7053      	strb	r3, [r2, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
    e052:	ab02      	add	r3, sp, #8
    e054:	78db      	ldrb	r3, [r3, #3]
    e056:	68aa      	ldr	r2, [r5, #8]
    e058:	5593      	strb	r3, [r2, r6]
            for(i = 0; i < palette_size; i++) {
    e05a:	3601      	adds	r6, #1
    e05c:	42b7      	cmp	r7, r6
    e05e:	d1ce      	bne.n	dffe <lv_img_decoder_built_in_open+0x23a>
        dsc->img_data = NULL;
    e060:	2300      	movs	r3, #0
    e062:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
    e064:	2001      	movs	r0, #1
    e066:	e6cb      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
        lv_img_decoder_built_in_close(decoder, dsc);
    e068:	0021      	movs	r1, r4
    e06a:	0030      	movs	r0, r6
    e06c:	4b0e      	ldr	r3, [pc, #56]	; (e0a8 <lv_img_decoder_built_in_open+0x2e4>)
    e06e:	4798      	blx	r3
        return LV_RES_INV;
    e070:	2000      	movs	r0, #0
    e072:	e6c5      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
            return LV_RES_INV;
    e074:	2000      	movs	r0, #0
    e076:	e6c3      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
    lv_img_cf_t cf = dsc->header.cf;
    e078:	7b08      	ldrb	r0, [r1, #12]
    e07a:	06c0      	lsls	r0, r0, #27
    e07c:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    e07e:	1f03      	subs	r3, r0, #4
    e080:	2b02      	cmp	r3, #2
    e082:	d900      	bls.n	e086 <lv_img_decoder_built_in_open+0x2c2>
    e084:	e713      	b.n	deae <lv_img_decoder_built_in_open+0xea>
            dsc->img_data = NULL;
    e086:	2300      	movs	r3, #0
    e088:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    e08a:	2001      	movs	r0, #1
    e08c:	e6b8      	b.n	de00 <lv_img_decoder_built_in_open+0x3c>
    e08e:	46c0      	nop			; (mov r8, r8)
    e090:	00010489 	.word	0x00010489
    e094:	00018a3c 	.word	0x00018a3c
    e098:	00017f3d 	.word	0x00017f3d
    e09c:	000103c1 	.word	0x000103c1
    e0a0:	00010a09 	.word	0x00010a09
    e0a4:	00001415 	.word	0x00001415
    e0a8:	0000dd81 	.word	0x0000dd81
    e0ac:	00018804 	.word	0x00018804
    e0b0:	0000141d 	.word	0x0000141d
    e0b4:	00010fe5 	.word	0x00010fe5
    e0b8:	00007e7d 	.word	0x00007e7d
    e0bc:	fffff81f 	.word	0xfffff81f
    e0c0:	00010367 	.word	0x00010367
    e0c4:	00010325 	.word	0x00010325

0000e0c8 <lv_img_decoder_built_in_read_line>:
{
    e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0ca:	46de      	mov	lr, fp
    e0cc:	4657      	mov	r7, sl
    e0ce:	464e      	mov	r6, r9
    e0d0:	4645      	mov	r5, r8
    e0d2:	b5e0      	push	{r5, r6, r7, lr}
    e0d4:	b08b      	sub	sp, #44	; 0x2c
    e0d6:	000d      	movs	r5, r1
    e0d8:	0017      	movs	r7, r2
    e0da:	9301      	str	r3, [sp, #4]
    e0dc:	ab14      	add	r3, sp, #80	; 0x50
    e0de:	2600      	movs	r6, #0
    e0e0:	5f9e      	ldrsh	r6, [r3, r6]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    e0e2:	7b0a      	ldrb	r2, [r1, #12]
    e0e4:	231f      	movs	r3, #31
    e0e6:	4013      	ands	r3, r2
    e0e8:	1f1a      	subs	r2, r3, #4
    e0ea:	2a02      	cmp	r2, #2
    e0ec:	d836      	bhi.n	e15c <lv_img_decoder_built_in_read_line+0x94>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    e0ee:	7a8b      	ldrb	r3, [r1, #10]
    lv_res_t res = LV_RES_INV;
    e0f0:	2000      	movs	r0, #0
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    e0f2:	2b01      	cmp	r3, #1
    e0f4:	d006      	beq.n	e104 <lv_img_decoder_built_in_read_line+0x3c>
}
    e0f6:	b00b      	add	sp, #44	; 0x2c
    e0f8:	bc3c      	pop	{r2, r3, r4, r5}
    e0fa:	4690      	mov	r8, r2
    e0fc:	4699      	mov	r9, r3
    e0fe:	46a2      	mov	sl, r4
    e100:	46ab      	mov	fp, r5
    e102:	bdf0      	pop	{r4, r5, r6, r7, pc}

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    e104:	69cb      	ldr	r3, [r1, #28]
    e106:	4699      	mov	r9, r3
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    e108:	7b08      	ldrb	r0, [r1, #12]
    e10a:	06c0      	lsls	r0, r0, #27
    e10c:	0ec0      	lsrs	r0, r0, #27
    e10e:	4bd5      	ldr	r3, [pc, #852]	; (e464 <lv_img_decoder_built_in_read_line+0x39c>)
    e110:	4798      	blx	r3
    e112:	4680      	mov	r8, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    e114:	68e9      	ldr	r1, [r5, #12]
    e116:	02c9      	lsls	r1, r1, #11
    e118:	0d49      	lsrs	r1, r1, #21
    e11a:	9b01      	ldr	r3, [sp, #4]
    e11c:	434b      	muls	r3, r1
    e11e:	19d9      	adds	r1, r3, r7
    e120:	4341      	muls	r1, r0
    e122:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    e124:	3104      	adds	r1, #4
    res = lv_fs_seek(user_data->f, pos);
    e126:	464b      	mov	r3, r9
    e128:	6818      	ldr	r0, [r3, #0]
    e12a:	4bcf      	ldr	r3, [pc, #828]	; (e468 <lv_img_decoder_built_in_read_line+0x3a0>)
    e12c:	4798      	blx	r3
    e12e:	0003      	movs	r3, r0
    if(res != LV_FS_RES_OK) {
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    e130:	2000      	movs	r0, #0
    if(res != LV_FS_RES_OK) {
    e132:	2b00      	cmp	r3, #0
    e134:	d1df      	bne.n	e0f6 <lv_img_decoder_built_in_read_line+0x2e>
    }
    uint32_t btr = len * (px_size >> 3);
    e136:	4643      	mov	r3, r8
    e138:	08d8      	lsrs	r0, r3, #3
    e13a:	b2c0      	uxtb	r0, r0
    e13c:	4346      	muls	r6, r0
    uint32_t br  = 0;
    e13e:	2300      	movs	r3, #0
    e140:	9306      	str	r3, [sp, #24]
    lv_fs_read(user_data->f, buf, btr, &br);
    e142:	464b      	mov	r3, r9
    e144:	6818      	ldr	r0, [r3, #0]
    e146:	ab06      	add	r3, sp, #24
    e148:	0032      	movs	r2, r6
    e14a:	9915      	ldr	r1, [sp, #84]	; 0x54
    e14c:	4cc7      	ldr	r4, [pc, #796]	; (e46c <lv_img_decoder_built_in_read_line+0x3a4>)
    e14e:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
    e150:	9b06      	ldr	r3, [sp, #24]
    e152:	1b9e      	subs	r6, r3, r6
    e154:	4270      	negs	r0, r6
    e156:	4170      	adcs	r0, r6
        return LV_RES_INV;
    e158:	b2c0      	uxtb	r0, r0
    e15a:	e7cc      	b.n	e0f6 <lv_img_decoder_built_in_read_line+0x2e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    e15c:	001a      	movs	r2, r3
    e15e:	3a0b      	subs	r2, #11
    e160:	2a03      	cmp	r2, #3
    e162:	d92d      	bls.n	e1c0 <lv_img_decoder_built_in_read_line+0xf8>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
    e164:	3b07      	subs	r3, #7
        return LV_RES_INV;
    e166:	2000      	movs	r0, #0
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
    e168:	2b03      	cmp	r3, #3
    e16a:	d8c4      	bhi.n	e0f6 <lv_img_decoder_built_in_read_line+0x2e>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    e16c:	7b08      	ldrb	r0, [r1, #12]
    e16e:	06c0      	lsls	r0, r0, #27
    e170:	0ec0      	lsrs	r0, r0, #27
    e172:	4bbc      	ldr	r3, [pc, #752]	; (e464 <lv_img_decoder_built_in_read_line+0x39c>)
    e174:	4798      	blx	r3
    e176:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    e178:	2301      	movs	r3, #1
    e17a:	4083      	lsls	r3, r0
    e17c:	3b01      	subs	r3, #1
    e17e:	b29b      	uxth	r3, r3
    e180:	4698      	mov	r8, r3

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
    e182:	7b2b      	ldrb	r3, [r5, #12]
    e184:	06db      	lsls	r3, r3, #27
    e186:	0edb      	lsrs	r3, r3, #27
    e188:	b2da      	uxtb	r2, r3
    e18a:	2a08      	cmp	r2, #8
    e18c:	d100      	bne.n	e190 <lv_img_decoder_built_in_read_line+0xc8>
    e18e:	e135      	b.n	e3fc <lv_img_decoder_built_in_read_line+0x334>
    e190:	d800      	bhi.n	e194 <lv_img_decoder_built_in_read_line+0xcc>
    e192:	e0fe      	b.n	e392 <lv_img_decoder_built_in_read_line+0x2ca>
    e194:	b2da      	uxtb	r2, r3
    e196:	2a09      	cmp	r2, #9
    e198:	d100      	bne.n	e19c <lv_img_decoder_built_in_read_line+0xd4>
    e19a:	e146      	b.n	e42a <lv_img_decoder_built_in_read_line+0x362>
    e19c:	2a0a      	cmp	r2, #10
    e19e:	d000      	beq.n	e1a2 <lv_img_decoder_built_in_read_line+0xda>
    e1a0:	e15b      	b.n	e45a <lv_img_decoder_built_in_read_line+0x392>
            ofs += w * y + (x >> 1); /*First pixel*/
            ofs += 64;               /*Skip the palette*/
            pos = 4 - ((x & 0x1) * 4);
            break;
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    e1a2:	68eb      	ldr	r3, [r5, #12]
    e1a4:	02db      	lsls	r3, r3, #11
    e1a6:	0d5b      	lsrs	r3, r3, #21
    e1a8:	b29a      	uxth	r2, r3
    e1aa:	b21b      	sxth	r3, r3
    e1ac:	469a      	mov	sl, r3
            ofs += w * y + x;  /*First pixel*/
    e1ae:	9c01      	ldr	r4, [sp, #4]
    e1b0:	4354      	muls	r4, r2
    e1b2:	19e7      	adds	r7, r4, r7
            ofs += 1024;       /*Skip the palette*/
    e1b4:	2380      	movs	r3, #128	; 0x80
    e1b6:	00db      	lsls	r3, r3, #3
    e1b8:	469b      	mov	fp, r3
    e1ba:	44bb      	add	fp, r7
            pos = 0;
    e1bc:	2400      	movs	r4, #0
    e1be:	e0fe      	b.n	e3be <lv_img_decoder_built_in_read_line+0x2f6>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
    e1c0:	2100      	movs	r1, #0
    e1c2:	ab04      	add	r3, sp, #16
    e1c4:	7019      	strb	r1, [r3, #0]
    e1c6:	22ff      	movs	r2, #255	; 0xff
    e1c8:	705a      	strb	r2, [r3, #1]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    e1ca:	ab05      	add	r3, sp, #20
    e1cc:	7019      	strb	r1, [r3, #0]
    e1ce:	3155      	adds	r1, #85	; 0x55
    e1d0:	7059      	strb	r1, [r3, #1]
    e1d2:	3155      	adds	r1, #85	; 0x55
    e1d4:	7099      	strb	r1, [r3, #2]
    e1d6:	70da      	strb	r2, [r3, #3]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
    e1d8:	aa06      	add	r2, sp, #24
    e1da:	4ba5      	ldr	r3, [pc, #660]	; (e470 <lv_img_decoder_built_in_read_line+0x3a8>)
    e1dc:	cb13      	ldmia	r3!, {r0, r1, r4}
    e1de:	c213      	stmia	r2!, {r0, r1, r4}
    e1e0:	681b      	ldr	r3, [r3, #0]
    e1e2:	6013      	str	r3, [r2, #0]
    lv_color_t bg_color = dsc->color;
    e1e4:	8929      	ldrh	r1, [r5, #8]
    for(i = 0; i < len; i++) {
    e1e6:	2e00      	cmp	r6, #0
    e1e8:	dd11      	ble.n	e20e <lv_img_decoder_built_in_read_line+0x146>
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    e1ea:	0a08      	lsrs	r0, r1, #8
    e1ec:	9c15      	ldr	r4, [sp, #84]	; 0x54
    e1ee:	1e72      	subs	r2, r6, #1
    e1f0:	b292      	uxth	r2, r2
    e1f2:	3201      	adds	r2, #1
    e1f4:	4694      	mov	ip, r2
    e1f6:	0052      	lsls	r2, r2, #1
    e1f8:	4462      	add	r2, ip
    e1fa:	0023      	movs	r3, r4
    e1fc:	46a4      	mov	ip, r4
    e1fe:	4462      	add	r2, ip
    e200:	9c01      	ldr	r4, [sp, #4]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
    e202:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
    e204:	7058      	strb	r0, [r3, #1]
    e206:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
    e208:	429a      	cmp	r2, r3
    e20a:	d1fa      	bne.n	e202 <lv_img_decoder_built_in_read_line+0x13a>
    e20c:	9401      	str	r4, [sp, #4]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
    e20e:	7b28      	ldrb	r0, [r5, #12]
    e210:	06c0      	lsls	r0, r0, #27
    e212:	0ec0      	lsrs	r0, r0, #27
    e214:	4b93      	ldr	r3, [pc, #588]	; (e464 <lv_img_decoder_built_in_read_line+0x39c>)
    e216:	4798      	blx	r3
    e218:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
    e21a:	2301      	movs	r3, #1
    e21c:	4083      	lsls	r3, r0
    e21e:	3b01      	subs	r3, #1
    e220:	b29b      	uxth	r3, r3
    e222:	4698      	mov	r8, r3
    switch(dsc->header.cf) {
    e224:	7b2b      	ldrb	r3, [r5, #12]
    e226:	06db      	lsls	r3, r3, #27
    e228:	0edb      	lsrs	r3, r3, #27
    e22a:	b2da      	uxtb	r2, r3
    e22c:	2a0c      	cmp	r2, #12
    e22e:	d04b      	beq.n	e2c8 <lv_img_decoder_built_in_read_line+0x200>
    e230:	d911      	bls.n	e256 <lv_img_decoder_built_in_read_line+0x18e>
    e232:	b2da      	uxtb	r2, r3
    e234:	2a0d      	cmp	r2, #13
    e236:	d05d      	beq.n	e2f4 <lv_img_decoder_built_in_read_line+0x22c>
    e238:	2a0e      	cmp	r2, #14
    e23a:	d170      	bne.n	e31e <lv_img_decoder_built_in_read_line+0x256>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
    e23c:	68eb      	ldr	r3, [r5, #12]
    e23e:	02db      	lsls	r3, r3, #11
    e240:	0d5b      	lsrs	r3, r3, #21
    e242:	b299      	uxth	r1, r3
    e244:	b21b      	sxth	r3, r3
    e246:	9302      	str	r3, [sp, #8]
            ofs += w * y + x;  /*First pixel*/
    e248:	9c01      	ldr	r4, [sp, #4]
    e24a:	434c      	muls	r4, r1
    e24c:	19e4      	adds	r4, r4, r7
            pos = 0;
    e24e:	2700      	movs	r7, #0
    const lv_opa_t * opa_table = NULL;
    e250:	2300      	movs	r3, #0
    e252:	469a      	mov	sl, r3
    e254:	e015      	b.n	e282 <lv_img_decoder_built_in_read_line+0x1ba>
    switch(dsc->header.cf) {
    e256:	2a0b      	cmp	r2, #11
    e258:	d161      	bne.n	e31e <lv_img_decoder_built_in_read_line+0x256>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    e25a:	68eb      	ldr	r3, [r5, #12]
    e25c:	02db      	lsls	r3, r3, #11
    e25e:	0d5b      	lsrs	r3, r3, #21
    e260:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
    e262:	1c51      	adds	r1, r2, #1
    e264:	9102      	str	r1, [sp, #8]
    e266:	075b      	lsls	r3, r3, #29
    e268:	d101      	bne.n	e26e <lv_img_decoder_built_in_read_line+0x1a6>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    e26a:	b213      	sxth	r3, r2
    e26c:	9302      	str	r3, [sp, #8]
            ofs += w * y + (x >> 3); /*First pixel*/
    e26e:	9b02      	ldr	r3, [sp, #8]
    e270:	9c01      	ldr	r4, [sp, #4]
    e272:	435c      	muls	r4, r3
    e274:	10f9      	asrs	r1, r7, #3
    e276:	1864      	adds	r4, r4, r1
            pos       = 7 - (x & 0x7);
    e278:	2307      	movs	r3, #7
    e27a:	43bb      	bics	r3, r7
    e27c:	001f      	movs	r7, r3
            opa_table = alpha1_opa_table;
    e27e:	ab04      	add	r3, sp, #16
    e280:	469a      	mov	sl, r3
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    e282:	69eb      	ldr	r3, [r5, #28]
    e284:	469b      	mov	fp, r3
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    e286:	9802      	ldr	r0, [sp, #8]
    e288:	4b7a      	ldr	r3, [pc, #488]	; (e474 <lv_img_decoder_built_in_read_line+0x3ac>)
    e28a:	4798      	blx	r3
    e28c:	9003      	str	r0, [sp, #12]
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    e28e:	7aab      	ldrb	r3, [r5, #10]
    e290:	2b00      	cmp	r3, #0
    e292:	d14e      	bne.n	e332 <lv_img_decoder_built_in_read_line+0x26a>
        data_tmp = img_dsc->data + ofs;
    e294:	686b      	ldr	r3, [r5, #4]
    e296:	6899      	ldr	r1, [r3, #8]
    e298:	190c      	adds	r4, r1, r4
    for(i = 0; i < len; i++) {
    e29a:	2e00      	cmp	r6, #0
    e29c:	dd74      	ble.n	e388 <lv_img_decoder_built_in_read_line+0x2c0>
    e29e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e2a0:	1c98      	adds	r0, r3, #2
    e2a2:	3e01      	subs	r6, #1
    e2a4:	b2b6      	uxth	r6, r6
    e2a6:	0072      	lsls	r2, r6, #1
    e2a8:	1992      	adds	r2, r2, r6
    e2aa:	3205      	adds	r2, #5
    e2ac:	469c      	mov	ip, r3
    e2ae:	4462      	add	r2, ip
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
    e2b0:	211f      	movs	r1, #31
    e2b2:	23ff      	movs	r3, #255	; 0xff
    e2b4:	469b      	mov	fp, r3
            pos = 8 - px_size;
    e2b6:	2308      	movs	r3, #8
    e2b8:	464e      	mov	r6, r9
    e2ba:	1b9b      	subs	r3, r3, r6
    e2bc:	b25b      	sxtb	r3, r3
    e2be:	9301      	str	r3, [sp, #4]
    e2c0:	46ac      	mov	ip, r5
    e2c2:	0015      	movs	r5, r2
    e2c4:	46c1      	mov	r9, r8
    e2c6:	e04b      	b.n	e360 <lv_img_decoder_built_in_read_line+0x298>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    e2c8:	68eb      	ldr	r3, [r5, #12]
    e2ca:	02db      	lsls	r3, r3, #11
    e2cc:	0d5b      	lsrs	r3, r3, #21
    e2ce:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
    e2d0:	1c51      	adds	r1, r2, #1
    e2d2:	9102      	str	r1, [sp, #8]
    e2d4:	079b      	lsls	r3, r3, #30
    e2d6:	d101      	bne.n	e2dc <lv_img_decoder_built_in_read_line+0x214>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    e2d8:	b213      	sxth	r3, r2
    e2da:	9302      	str	r3, [sp, #8]
            ofs += w * y + (x >> 2); /*First pixel*/
    e2dc:	9b02      	ldr	r3, [sp, #8]
    e2de:	9c01      	ldr	r4, [sp, #4]
    e2e0:	435c      	muls	r4, r3
    e2e2:	10b9      	asrs	r1, r7, #2
    e2e4:	1864      	adds	r4, r4, r1
            pos       = 6 - ((x & 0x3) * 2);
    e2e6:	b2bb      	uxth	r3, r7
    e2e8:	2703      	movs	r7, #3
    e2ea:	439f      	bics	r7, r3
    e2ec:	007f      	lsls	r7, r7, #1
            opa_table = alpha2_opa_table;
    e2ee:	ab05      	add	r3, sp, #20
    e2f0:	469a      	mov	sl, r3
    e2f2:	e7c6      	b.n	e282 <lv_img_decoder_built_in_read_line+0x1ba>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    e2f4:	68eb      	ldr	r3, [r5, #12]
    e2f6:	02db      	lsls	r3, r3, #11
    e2f8:	0d5b      	lsrs	r3, r3, #21
    e2fa:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
    e2fc:	1c51      	adds	r1, r2, #1
    e2fe:	9102      	str	r1, [sp, #8]
    e300:	07db      	lsls	r3, r3, #31
    e302:	d401      	bmi.n	e308 <lv_img_decoder_built_in_read_line+0x240>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    e304:	b213      	sxth	r3, r2
    e306:	9302      	str	r3, [sp, #8]
            ofs += w * y + (x >> 1); /*First pixel*/
    e308:	9b02      	ldr	r3, [sp, #8]
    e30a:	9c01      	ldr	r4, [sp, #4]
    e30c:	435c      	muls	r4, r3
    e30e:	1079      	asrs	r1, r7, #1
    e310:	1864      	adds	r4, r4, r1
            pos       = 4 - ((x & 0x1) * 4);
    e312:	07fb      	lsls	r3, r7, #31
    e314:	d509      	bpl.n	e32a <lv_img_decoder_built_in_read_line+0x262>
    e316:	2700      	movs	r7, #0
            opa_table = alpha4_opa_table;
    e318:	ab06      	add	r3, sp, #24
    e31a:	469a      	mov	sl, r3
    e31c:	e7b1      	b.n	e282 <lv_img_decoder_built_in_read_line+0x1ba>
    int8_t pos   = 0;
    e31e:	2700      	movs	r7, #0
    uint32_t ofs = 0;
    e320:	2400      	movs	r4, #0
    lv_coord_t w = 0;
    e322:	2300      	movs	r3, #0
    e324:	9302      	str	r3, [sp, #8]
    const lv_opa_t * opa_table = NULL;
    e326:	469a      	mov	sl, r3
    e328:	e7ab      	b.n	e282 <lv_img_decoder_built_in_read_line+0x1ba>
            pos       = 4 - ((x & 0x1) * 4);
    e32a:	2704      	movs	r7, #4
            opa_table = alpha4_opa_table;
    e32c:	ab06      	add	r3, sp, #24
    e32e:	469a      	mov	sl, r3
    e330:	e7a7      	b.n	e282 <lv_img_decoder_built_in_read_line+0x1ba>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    e332:	1d21      	adds	r1, r4, #4
    e334:	465b      	mov	r3, fp
    e336:	6818      	ldr	r0, [r3, #0]
    e338:	4b4b      	ldr	r3, [pc, #300]	; (e468 <lv_img_decoder_built_in_read_line+0x3a0>)
    e33a:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    e33c:	465b      	mov	r3, fp
    e33e:	6818      	ldr	r0, [r3, #0]
    e340:	2300      	movs	r3, #0
    e342:	9a02      	ldr	r2, [sp, #8]
    e344:	9903      	ldr	r1, [sp, #12]
    e346:	4c49      	ldr	r4, [pc, #292]	; (e46c <lv_img_decoder_built_in_read_line+0x3a4>)
    e348:	47a0      	blx	r4
        data_tmp = fs_buf;
    e34a:	9c03      	ldr	r4, [sp, #12]
    e34c:	e7a5      	b.n	e29a <lv_img_decoder_built_in_read_line+0x1d2>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    e34e:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    e350:	7003      	strb	r3, [r0, #0]
        pos -= px_size;
    e352:	1bbf      	subs	r7, r7, r6
    e354:	b27f      	sxtb	r7, r7
        if(pos < 0) {
    e356:	2f00      	cmp	r7, #0
    e358:	db13      	blt.n	e382 <lv_img_decoder_built_in_read_line+0x2ba>
    e35a:	3003      	adds	r0, #3
    for(i = 0; i < len; i++) {
    e35c:	4285      	cmp	r5, r0
    e35e:	d013      	beq.n	e388 <lv_img_decoder_built_in_read_line+0x2c0>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    e360:	7823      	ldrb	r3, [r4, #0]
    e362:	4698      	mov	r8, r3
    e364:	464b      	mov	r3, r9
    e366:	40bb      	lsls	r3, r7
    e368:	4642      	mov	r2, r8
    e36a:	4013      	ands	r3, r2
    e36c:	413b      	asrs	r3, r7
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
    e36e:	4662      	mov	r2, ip
    e370:	7b12      	ldrb	r2, [r2, #12]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    e372:	400a      	ands	r2, r1
    e374:	2a0e      	cmp	r2, #14
    e376:	d0ea      	beq.n	e34e <lv_img_decoder_built_in_read_line+0x286>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
    e378:	465a      	mov	r2, fp
    e37a:	4013      	ands	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
    e37c:	4652      	mov	r2, sl
    e37e:	5cd3      	ldrb	r3, [r2, r3]
    e380:	e7e6      	b.n	e350 <lv_img_decoder_built_in_read_line+0x288>
            pos = 8 - px_size;
    e382:	9f01      	ldr	r7, [sp, #4]
            data_tmp++;
    e384:	3401      	adds	r4, #1
    e386:	e7e8      	b.n	e35a <lv_img_decoder_built_in_read_line+0x292>
    _lv_mem_buf_release(fs_buf);
    e388:	9803      	ldr	r0, [sp, #12]
    e38a:	4b3b      	ldr	r3, [pc, #236]	; (e478 <lv_img_decoder_built_in_read_line+0x3b0>)
    e38c:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
    e38e:	2001      	movs	r0, #1
    e390:	e6b1      	b.n	e0f6 <lv_img_decoder_built_in_read_line+0x2e>
    switch(dsc->header.cf) {
    e392:	2a07      	cmp	r2, #7
    e394:	d161      	bne.n	e45a <lv_img_decoder_built_in_read_line+0x392>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    e396:	68eb      	ldr	r3, [r5, #12]
    e398:	02db      	lsls	r3, r3, #11
    e39a:	0d5b      	lsrs	r3, r3, #21
    e39c:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
    e39e:	1c51      	adds	r1, r2, #1
    e3a0:	468a      	mov	sl, r1
    e3a2:	075b      	lsls	r3, r3, #29
    e3a4:	d101      	bne.n	e3aa <lv_img_decoder_built_in_read_line+0x2e2>
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
    e3a6:	b213      	sxth	r3, r2
    e3a8:	469a      	mov	sl, r3
            ofs += w * y + (x >> 3); /*First pixel*/
    e3aa:	4653      	mov	r3, sl
    e3ac:	9c01      	ldr	r4, [sp, #4]
    e3ae:	435c      	muls	r4, r3
    e3b0:	10fb      	asrs	r3, r7, #3
    e3b2:	18e4      	adds	r4, r4, r3
            ofs += 8;                /*Skip the palette*/
    e3b4:	2308      	movs	r3, #8
    e3b6:	469b      	mov	fp, r3
    e3b8:	44a3      	add	fp, r4
            pos = 7 - (x & 0x7);
    e3ba:	2407      	movs	r4, #7
    e3bc:	43bc      	bics	r4, r7
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    e3be:	69ef      	ldr	r7, [r5, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
    e3c0:	4650      	mov	r0, sl
    e3c2:	4b2c      	ldr	r3, [pc, #176]	; (e474 <lv_img_decoder_built_in_read_line+0x3ac>)
    e3c4:	4798      	blx	r3
    e3c6:	9002      	str	r0, [sp, #8]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    e3c8:	7aab      	ldrb	r3, [r5, #10]
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	d156      	bne.n	e47c <lv_img_decoder_built_in_read_line+0x3b4>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
    e3ce:	686b      	ldr	r3, [r5, #4]
    e3d0:	6899      	ldr	r1, [r3, #8]
    e3d2:	4459      	add	r1, fp
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
    e3d4:	2e00      	cmp	r6, #0
    e3d6:	dd78      	ble.n	e4ca <lv_img_decoder_built_in_read_line+0x402>
    e3d8:	9815      	ldr	r0, [sp, #84]	; 0x54
    e3da:	3e01      	subs	r6, #1
    e3dc:	b2b6      	uxth	r6, r6
    e3de:	3601      	adds	r6, #1
    e3e0:	0073      	lsls	r3, r6, #1
    e3e2:	199e      	adds	r6, r3, r6
    e3e4:	4684      	mov	ip, r0
    e3e6:	4466      	add	r6, ip
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        lv_color_t color = user_data->palette[val_act];
    e3e8:	23ff      	movs	r3, #255	; 0xff
    e3ea:	469a      	mov	sl, r3
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
    e3ec:	2208      	movs	r2, #8
    e3ee:	464b      	mov	r3, r9
    e3f0:	1ad2      	subs	r2, r2, r3
    e3f2:	b253      	sxtb	r3, r2
    e3f4:	9301      	str	r3, [sp, #4]
    e3f6:	46b4      	mov	ip, r6
    e3f8:	464e      	mov	r6, r9
    e3fa:	e04f      	b.n	e49c <lv_img_decoder_built_in_read_line+0x3d4>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    e3fc:	68eb      	ldr	r3, [r5, #12]
    e3fe:	02db      	lsls	r3, r3, #11
    e400:	0d5b      	lsrs	r3, r3, #21
    e402:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
    e404:	1c51      	adds	r1, r2, #1
    e406:	468a      	mov	sl, r1
    e408:	079b      	lsls	r3, r3, #30
    e40a:	d101      	bne.n	e410 <lv_img_decoder_built_in_read_line+0x348>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
    e40c:	b213      	sxth	r3, r2
    e40e:	469a      	mov	sl, r3
            ofs += w * y + (x >> 2); /*First pixel*/
    e410:	4653      	mov	r3, sl
    e412:	9c01      	ldr	r4, [sp, #4]
    e414:	435c      	muls	r4, r3
    e416:	10bb      	asrs	r3, r7, #2
    e418:	18e4      	adds	r4, r4, r3
            ofs += 16;               /*Skip the palette*/
    e41a:	2310      	movs	r3, #16
    e41c:	469b      	mov	fp, r3
    e41e:	44a3      	add	fp, r4
            pos = 6 - ((x & 0x3) * 2);
    e420:	b2bf      	uxth	r7, r7
    e422:	2403      	movs	r4, #3
    e424:	43bc      	bics	r4, r7
    e426:	0064      	lsls	r4, r4, #1
    e428:	e7c9      	b.n	e3be <lv_img_decoder_built_in_read_line+0x2f6>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    e42a:	68eb      	ldr	r3, [r5, #12]
    e42c:	02db      	lsls	r3, r3, #11
    e42e:	0d5b      	lsrs	r3, r3, #21
    e430:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
    e432:	1c51      	adds	r1, r2, #1
    e434:	468a      	mov	sl, r1
    e436:	07db      	lsls	r3, r3, #31
    e438:	d401      	bmi.n	e43e <lv_img_decoder_built_in_read_line+0x376>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
    e43a:	b213      	sxth	r3, r2
    e43c:	469a      	mov	sl, r3
            ofs += w * y + (x >> 1); /*First pixel*/
    e43e:	4653      	mov	r3, sl
    e440:	9c01      	ldr	r4, [sp, #4]
    e442:	435c      	muls	r4, r3
    e444:	107b      	asrs	r3, r7, #1
    e446:	18e4      	adds	r4, r4, r3
            ofs += 64;               /*Skip the palette*/
    e448:	2340      	movs	r3, #64	; 0x40
    e44a:	469b      	mov	fp, r3
    e44c:	44a3      	add	fp, r4
            pos = 4 - ((x & 0x1) * 4);
    e44e:	2401      	movs	r4, #1
    e450:	4027      	ands	r7, r4
    e452:	427c      	negs	r4, r7
    e454:	417c      	adcs	r4, r7
    e456:	00a4      	lsls	r4, r4, #2
    e458:	e7b1      	b.n	e3be <lv_img_decoder_built_in_read_line+0x2f6>
    uint32_t ofs = 0;
    e45a:	2300      	movs	r3, #0
    e45c:	469b      	mov	fp, r3
    int8_t pos   = 0;
    e45e:	2400      	movs	r4, #0
    lv_coord_t w = 0;
    e460:	469a      	mov	sl, r3
    e462:	e7ac      	b.n	e3be <lv_img_decoder_built_in_read_line+0x2f6>
    e464:	00007e7d 	.word	0x00007e7d
    e468:	00010367 	.word	0x00010367
    e46c:	00010325 	.word	0x00010325
    e470:	00018a2c 	.word	0x00018a2c
    e474:	00010e59 	.word	0x00010e59
    e478:	00010b6d 	.word	0x00010b6d
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
    e47c:	4659      	mov	r1, fp
    e47e:	3104      	adds	r1, #4
    e480:	6838      	ldr	r0, [r7, #0]
    e482:	4b14      	ldr	r3, [pc, #80]	; (e4d4 <lv_img_decoder_built_in_read_line+0x40c>)
    e484:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
    e486:	2300      	movs	r3, #0
    e488:	4652      	mov	r2, sl
    e48a:	9902      	ldr	r1, [sp, #8]
    e48c:	6838      	ldr	r0, [r7, #0]
    e48e:	4d12      	ldr	r5, [pc, #72]	; (e4d8 <lv_img_decoder_built_in_read_line+0x410>)
    e490:	47a8      	blx	r5
        data_tmp = fs_buf;
    e492:	9902      	ldr	r1, [sp, #8]
    e494:	e79e      	b.n	e3d4 <lv_img_decoder_built_in_read_line+0x30c>
    e496:	3003      	adds	r0, #3
    for(i = 0; i < len; i++) {
    e498:	4560      	cmp	r0, ip
    e49a:	d016      	beq.n	e4ca <lv_img_decoder_built_in_read_line+0x402>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
    e49c:	780a      	ldrb	r2, [r1, #0]
    e49e:	4643      	mov	r3, r8
    e4a0:	40a3      	lsls	r3, r4
    e4a2:	4013      	ands	r3, r2
    e4a4:	4123      	asrs	r3, r4
        lv_color_t color = user_data->palette[val_act];
    e4a6:	4652      	mov	r2, sl
    e4a8:	4013      	ands	r3, r2
    e4aa:	005a      	lsls	r2, r3, #1
    e4ac:	687d      	ldr	r5, [r7, #4]
    e4ae:	5b52      	ldrh	r2, [r2, r5]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
    e4b0:	7002      	strb	r2, [r0, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
    e4b2:	0a12      	lsrs	r2, r2, #8
    e4b4:	7042      	strb	r2, [r0, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
    e4b6:	68ba      	ldr	r2, [r7, #8]
    e4b8:	5cd3      	ldrb	r3, [r2, r3]
    e4ba:	7083      	strb	r3, [r0, #2]
        pos -= px_size;
    e4bc:	1ba4      	subs	r4, r4, r6
    e4be:	b264      	sxtb	r4, r4
        if(pos < 0) {
    e4c0:	2c00      	cmp	r4, #0
    e4c2:	dae8      	bge.n	e496 <lv_img_decoder_built_in_read_line+0x3ce>
            pos = 8 - px_size;
    e4c4:	9c01      	ldr	r4, [sp, #4]
            data_tmp++;
    e4c6:	3101      	adds	r1, #1
    e4c8:	e7e5      	b.n	e496 <lv_img_decoder_built_in_read_line+0x3ce>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
    e4ca:	9802      	ldr	r0, [sp, #8]
    e4cc:	4b03      	ldr	r3, [pc, #12]	; (e4dc <lv_img_decoder_built_in_read_line+0x414>)
    e4ce:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
    e4d0:	2001      	movs	r0, #1
    e4d2:	e610      	b.n	e0f6 <lv_img_decoder_built_in_read_line+0x2e>
    e4d4:	00010367 	.word	0x00010367
    e4d8:	00010325 	.word	0x00010325
    e4dc:	00010b6d 	.word	0x00010b6d

0000e4e0 <lv_img_decoder_get_info>:
{
    e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4e2:	b083      	sub	sp, #12
    e4e4:	9001      	str	r0, [sp, #4]
    e4e6:	000d      	movs	r5, r1
    header->always_zero = 0;
    e4e8:	780a      	ldrb	r2, [r1, #0]
    e4ea:	231f      	movs	r3, #31
    e4ec:	4013      	ands	r3, r2
    e4ee:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    e4f0:	480d      	ldr	r0, [pc, #52]	; (e528 <lv_img_decoder_get_info+0x48>)
    e4f2:	4b0e      	ldr	r3, [pc, #56]	; (e52c <lv_img_decoder_get_info+0x4c>)
    e4f4:	4798      	blx	r3
    e4f6:	1e04      	subs	r4, r0, #0
    e4f8:	d014      	beq.n	e524 <lv_img_decoder_get_info+0x44>
    e4fa:	4e0d      	ldr	r6, [pc, #52]	; (e530 <lv_img_decoder_get_info+0x50>)
    e4fc:	e005      	b.n	e50a <lv_img_decoder_get_info+0x2a>
        res = LV_RES_INV;
    e4fe:	2700      	movs	r7, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    e500:	0021      	movs	r1, r4
    e502:	4809      	ldr	r0, [pc, #36]	; (e528 <lv_img_decoder_get_info+0x48>)
    e504:	47b0      	blx	r6
    e506:	1e04      	subs	r4, r0, #0
    e508:	d009      	beq.n	e51e <lv_img_decoder_get_info+0x3e>
        if(d->info_cb) {
    e50a:	6823      	ldr	r3, [r4, #0]
    e50c:	2b00      	cmp	r3, #0
    e50e:	d0f6      	beq.n	e4fe <lv_img_decoder_get_info+0x1e>
            res = d->info_cb(d, src, header);
    e510:	002a      	movs	r2, r5
    e512:	9901      	ldr	r1, [sp, #4]
    e514:	0020      	movs	r0, r4
    e516:	4798      	blx	r3
    e518:	0007      	movs	r7, r0
            if(res == LV_RES_OK) break;
    e51a:	2801      	cmp	r0, #1
    e51c:	d1f0      	bne.n	e500 <lv_img_decoder_get_info+0x20>
}
    e51e:	0038      	movs	r0, r7
    e520:	b003      	add	sp, #12
    e522:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_res_t res = LV_RES_INV;
    e524:	2700      	movs	r7, #0
    e526:	e7fa      	b.n	e51e <lv_img_decoder_get_info+0x3e>
    e528:	20004cd0 	.word	0x20004cd0
    e52c:	00010605 	.word	0x00010605
    e530:	0001061d 	.word	0x0001061d

0000e534 <lv_img_decoder_open>:
{
    e534:	b5f0      	push	{r4, r5, r6, r7, lr}
    e536:	b083      	sub	sp, #12
    e538:	0007      	movs	r7, r0
    e53a:	9100      	str	r1, [sp, #0]
    dsc->color     = color;
    e53c:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
    e53e:	0008      	movs	r0, r1
    e540:	4b25      	ldr	r3, [pc, #148]	; (e5d8 <lv_img_decoder_open+0xa4>)
    e542:	4798      	blx	r3
    e544:	72b8      	strb	r0, [r7, #10]
    dsc->user_data = NULL;
    e546:	2300      	movs	r3, #0
    e548:	61fb      	str	r3, [r7, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    e54a:	2801      	cmp	r0, #1
    e54c:	d00e      	beq.n	e56c <lv_img_decoder_open+0x38>
        dsc->src       = src;
    e54e:	9b00      	ldr	r3, [sp, #0]
    e550:	607b      	str	r3, [r7, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    e552:	4822      	ldr	r0, [pc, #136]	; (e5dc <lv_img_decoder_open+0xa8>)
    e554:	4b22      	ldr	r3, [pc, #136]	; (e5e0 <lv_img_decoder_open+0xac>)
    e556:	4798      	blx	r3
    e558:	1e04      	subs	r4, r0, #0
    e55a:	d036      	beq.n	e5ca <lv_img_decoder_open+0x96>
    e55c:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
    e55e:	230c      	movs	r3, #12
    e560:	469c      	mov	ip, r3
    e562:	44bc      	add	ip, r7
    e564:	4663      	mov	r3, ip
    e566:	9301      	str	r3, [sp, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    e568:	4e1e      	ldr	r6, [pc, #120]	; (e5e4 <lv_img_decoder_open+0xb0>)
    e56a:	e010      	b.n	e58e <lv_img_decoder_open+0x5a>
        size_t fnlen = strlen(src);
    e56c:	9c00      	ldr	r4, [sp, #0]
    e56e:	0020      	movs	r0, r4
    e570:	4b1d      	ldr	r3, [pc, #116]	; (e5e8 <lv_img_decoder_open+0xb4>)
    e572:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
    e574:	3001      	adds	r0, #1
    e576:	4b1d      	ldr	r3, [pc, #116]	; (e5ec <lv_img_decoder_open+0xb8>)
    e578:	4798      	blx	r3
    e57a:	6078      	str	r0, [r7, #4]
        strcpy((char *)dsc->src, src);
    e57c:	0021      	movs	r1, r4
    e57e:	4b1c      	ldr	r3, [pc, #112]	; (e5f0 <lv_img_decoder_open+0xbc>)
    e580:	4798      	blx	r3
    e582:	e7e6      	b.n	e552 <lv_img_decoder_open+0x1e>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
    e584:	0021      	movs	r1, r4
    e586:	4815      	ldr	r0, [pc, #84]	; (e5dc <lv_img_decoder_open+0xa8>)
    e588:	47b0      	blx	r6
    e58a:	1e04      	subs	r4, r0, #0
    e58c:	d018      	beq.n	e5c0 <lv_img_decoder_open+0x8c>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
    e58e:	6823      	ldr	r3, [r4, #0]
    e590:	2b00      	cmp	r3, #0
    e592:	d0f7      	beq.n	e584 <lv_img_decoder_open+0x50>
    e594:	6862      	ldr	r2, [r4, #4]
    e596:	2a00      	cmp	r2, #0
    e598:	d0f4      	beq.n	e584 <lv_img_decoder_open+0x50>
        res = d->info_cb(d, src, &dsc->header);
    e59a:	9a01      	ldr	r2, [sp, #4]
    e59c:	9900      	ldr	r1, [sp, #0]
    e59e:	0020      	movs	r0, r4
    e5a0:	4798      	blx	r3
    e5a2:	0005      	movs	r5, r0
        if(res != LV_RES_OK) continue;
    e5a4:	2801      	cmp	r0, #1
    e5a6:	d1ed      	bne.n	e584 <lv_img_decoder_open+0x50>
        dsc->error_msg = NULL;
    e5a8:	2300      	movs	r3, #0
    e5aa:	61bb      	str	r3, [r7, #24]
        dsc->img_data  = NULL;
    e5ac:	613b      	str	r3, [r7, #16]
        dsc->decoder   = d;
    e5ae:	603c      	str	r4, [r7, #0]
        res = d->open_cb(d, dsc);
    e5b0:	0039      	movs	r1, r7
    e5b2:	0020      	movs	r0, r4
    e5b4:	6863      	ldr	r3, [r4, #4]
    e5b6:	4798      	blx	r3
    e5b8:	0005      	movs	r5, r0
        if(res == LV_RES_OK) break;
    e5ba:	2801      	cmp	r0, #1
    e5bc:	d1e2      	bne.n	e584 <lv_img_decoder_open+0x50>
    e5be:	e001      	b.n	e5c4 <lv_img_decoder_open+0x90>
    if(res == LV_RES_INV) {
    e5c0:	2d00      	cmp	r5, #0
    e5c2:	d003      	beq.n	e5cc <lv_img_decoder_open+0x98>
}
    e5c4:	0028      	movs	r0, r5
    e5c6:	b003      	add	sp, #12
    e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_res_t res = LV_RES_INV;
    e5ca:	2500      	movs	r5, #0
        _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
    e5cc:	2120      	movs	r1, #32
    e5ce:	0038      	movs	r0, r7
    e5d0:	4b08      	ldr	r3, [pc, #32]	; (e5f4 <lv_img_decoder_open+0xc0>)
    e5d2:	4798      	blx	r3
    e5d4:	e7f6      	b.n	e5c4 <lv_img_decoder_open+0x90>
    e5d6:	46c0      	nop			; (mov r8, r8)
    e5d8:	000080f9 	.word	0x000080f9
    e5dc:	20004cd0 	.word	0x20004cd0
    e5e0:	00010605 	.word	0x00010605
    e5e4:	0001061d 	.word	0x0001061d
    e5e8:	00017f61 	.word	0x00017f61
    e5ec:	00010a09 	.word	0x00010a09
    e5f0:	00017f51 	.word	0x00017f51
    e5f4:	00010fe5 	.word	0x00010fe5

0000e5f8 <lv_img_decoder_read_line>:
{
    e5f8:	b570      	push	{r4, r5, r6, lr}
    e5fa:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
    e5fc:	6805      	ldr	r5, [r0, #0]
    e5fe:	68ac      	ldr	r4, [r5, #8]
    e600:	2c00      	cmp	r4, #0
    e602:	d009      	beq.n	e618 <lv_img_decoder_read_line+0x20>
    e604:	9e06      	ldr	r6, [sp, #24]
    e606:	9601      	str	r6, [sp, #4]
    e608:	9300      	str	r3, [sp, #0]
    e60a:	0013      	movs	r3, r2
    e60c:	000a      	movs	r2, r1
    e60e:	0001      	movs	r1, r0
    e610:	0028      	movs	r0, r5
    e612:	47a0      	blx	r4
}
    e614:	b002      	add	sp, #8
    e616:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
    e618:	2000      	movs	r0, #0
    e61a:	e7fb      	b.n	e614 <lv_img_decoder_read_line+0x1c>

0000e61c <lv_img_decoder_close>:
{
    e61c:	b510      	push	{r4, lr}
    e61e:	0004      	movs	r4, r0
    if(dsc->decoder) {
    e620:	6800      	ldr	r0, [r0, #0]
    e622:	2800      	cmp	r0, #0
    e624:	d007      	beq.n	e636 <lv_img_decoder_close+0x1a>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
    e626:	68c3      	ldr	r3, [r0, #12]
    e628:	2b00      	cmp	r3, #0
    e62a:	d001      	beq.n	e630 <lv_img_decoder_close+0x14>
    e62c:	0021      	movs	r1, r4
    e62e:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    e630:	7aa3      	ldrb	r3, [r4, #10]
    e632:	2b01      	cmp	r3, #1
    e634:	d000      	beq.n	e638 <lv_img_decoder_close+0x1c>
}
    e636:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
    e638:	6860      	ldr	r0, [r4, #4]
    e63a:	4b02      	ldr	r3, [pc, #8]	; (e644 <lv_img_decoder_close+0x28>)
    e63c:	4798      	blx	r3
            dsc->src = NULL;
    e63e:	2300      	movs	r3, #0
    e640:	6063      	str	r3, [r4, #4]
}
    e642:	e7f8      	b.n	e636 <lv_img_decoder_close+0x1a>
    e644:	00010ad1 	.word	0x00010ad1

0000e648 <lv_img_decoder_create>:
{
    e648:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
    e64a:	480b      	ldr	r0, [pc, #44]	; (e678 <lv_img_decoder_create+0x30>)
    e64c:	4b0b      	ldr	r3, [pc, #44]	; (e67c <lv_img_decoder_create+0x34>)
    e64e:	4798      	blx	r3
    e650:	0004      	movs	r4, r0
    LV_ASSERT_MEM(decoder);
    e652:	4b0b      	ldr	r3, [pc, #44]	; (e680 <lv_img_decoder_create+0x38>)
    e654:	4798      	blx	r3
    e656:	2800      	cmp	r0, #0
    e658:	d007      	beq.n	e66a <lv_img_decoder_create+0x22>
    if(decoder == NULL) return NULL;
    e65a:	2c00      	cmp	r4, #0
    e65c:	d003      	beq.n	e666 <lv_img_decoder_create+0x1e>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
    e65e:	2110      	movs	r1, #16
    e660:	0020      	movs	r0, r4
    e662:	4b08      	ldr	r3, [pc, #32]	; (e684 <lv_img_decoder_create+0x3c>)
    e664:	4798      	blx	r3
}
    e666:	0020      	movs	r0, r4
    e668:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
    e66a:	0022      	movs	r2, r4
    e66c:	2300      	movs	r3, #0
    e66e:	4806      	ldr	r0, [pc, #24]	; (e688 <lv_img_decoder_create+0x40>)
    e670:	4906      	ldr	r1, [pc, #24]	; (e68c <lv_img_decoder_create+0x44>)
    e672:	4788      	blx	r1
    e674:	e7fe      	b.n	e674 <lv_img_decoder_create+0x2c>
    e676:	46c0      	nop			; (mov r8, r8)
    e678:	20004cd0 	.word	0x20004cd0
    e67c:	00010565 	.word	0x00010565
    e680:	00001415 	.word	0x00001415
    e684:	00010fe5 	.word	0x00010fe5
    e688:	00018804 	.word	0x00018804
    e68c:	0000141d 	.word	0x0000141d

0000e690 <_lv_img_decoder_init>:
{
    e690:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
    e692:	2110      	movs	r1, #16
    e694:	480c      	ldr	r0, [pc, #48]	; (e6c8 <_lv_img_decoder_init+0x38>)
    e696:	4b0d      	ldr	r3, [pc, #52]	; (e6cc <_lv_img_decoder_init+0x3c>)
    e698:	4798      	blx	r3
    decoder = lv_img_decoder_create();
    e69a:	4b0d      	ldr	r3, [pc, #52]	; (e6d0 <_lv_img_decoder_init+0x40>)
    e69c:	4798      	blx	r3
    if(decoder == NULL) {
    e69e:	2800      	cmp	r0, #0
    e6a0:	d008      	beq.n	e6b4 <_lv_img_decoder_init+0x24>
    decoder->info_cb = info_cb;
    e6a2:	4b0c      	ldr	r3, [pc, #48]	; (e6d4 <_lv_img_decoder_init+0x44>)
    e6a4:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
    e6a6:	4b0c      	ldr	r3, [pc, #48]	; (e6d8 <_lv_img_decoder_init+0x48>)
    e6a8:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
    e6aa:	4b0c      	ldr	r3, [pc, #48]	; (e6dc <_lv_img_decoder_init+0x4c>)
    e6ac:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
    e6ae:	4b0c      	ldr	r3, [pc, #48]	; (e6e0 <_lv_img_decoder_init+0x50>)
    e6b0:	60c3      	str	r3, [r0, #12]
}
    e6b2:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
    e6b4:	4b0b      	ldr	r3, [pc, #44]	; (e6e4 <_lv_img_decoder_init+0x54>)
    e6b6:	4798      	blx	r3
    e6b8:	2800      	cmp	r0, #0
    e6ba:	d1fa      	bne.n	e6b2 <_lv_img_decoder_init+0x22>
    e6bc:	2200      	movs	r2, #0
    e6be:	2300      	movs	r3, #0
    e6c0:	4809      	ldr	r0, [pc, #36]	; (e6e8 <_lv_img_decoder_init+0x58>)
    e6c2:	490a      	ldr	r1, [pc, #40]	; (e6ec <_lv_img_decoder_init+0x5c>)
    e6c4:	4788      	blx	r1
    e6c6:	e7fe      	b.n	e6c6 <_lv_img_decoder_init+0x36>
    e6c8:	20004cd0 	.word	0x20004cd0
    e6cc:	00010551 	.word	0x00010551
    e6d0:	0000e649 	.word	0x0000e649
    e6d4:	0000dca1 	.word	0x0000dca1
    e6d8:	0000ddc5 	.word	0x0000ddc5
    e6dc:	0000e0c9 	.word	0x0000e0c9
    e6e0:	0000dd81 	.word	0x0000dd81
    e6e4:	00001415 	.word	0x00001415
    e6e8:	00018804 	.word	0x00018804
    e6ec:	0000141d 	.word	0x0000141d

0000e6f0 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    e6f0:	b510      	push	{r4, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
    e6f2:	6843      	ldr	r3, [r0, #4]
    e6f4:	4798      	blx	r3
}
    e6f6:	bd10      	pop	{r4, pc}

0000e6f8 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
    e6f8:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
    e6fa:	6804      	ldr	r4, [r0, #0]
    e6fc:	47a0      	blx	r4
}
    e6fe:	bd10      	pop	{r4, pc}

0000e700 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    e700:	b510      	push	{r4, lr}
    e702:	b084      	sub	sp, #16
    e704:	0013      	movs	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    e706:	000a      	movs	r2, r1
    e708:	a901      	add	r1, sp, #4
    e70a:	4c05      	ldr	r4, [pc, #20]	; (e720 <lv_font_get_glyph_width+0x20>)
    e70c:	47a0      	blx	r4
    if(ret) return g.adv_w;
    else return 0;
    e70e:	2300      	movs	r3, #0
    if(ret) return g.adv_w;
    e710:	2800      	cmp	r0, #0
    e712:	d001      	beq.n	e718 <lv_font_get_glyph_width+0x18>
    e714:	ab01      	add	r3, sp, #4
    e716:	881b      	ldrh	r3, [r3, #0]
}
    e718:	0018      	movs	r0, r3
    e71a:	b004      	add	sp, #16
    e71c:	bd10      	pop	{r4, pc}
    e71e:	46c0      	nop			; (mov r8, r8)
    e720:	0000e6f9 	.word	0x0000e6f9

0000e724 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
    e724:	7803      	ldrb	r3, [r0, #0]
    e726:	780a      	ldrb	r2, [r1, #0]
    e728:	4293      	cmp	r3, r2
    e72a:	d001      	beq.n	e730 <kern_pair_8_compare+0xc>
    e72c:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
    e72e:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
    e730:	7840      	ldrb	r0, [r0, #1]
    e732:	784b      	ldrb	r3, [r1, #1]
    e734:	1ac0      	subs	r0, r0, r3
    e736:	e7fa      	b.n	e72e <kern_pair_8_compare+0xa>

0000e738 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
    e738:	8803      	ldrh	r3, [r0, #0]
    e73a:	880a      	ldrh	r2, [r1, #0]
    e73c:	4293      	cmp	r3, r2
    e73e:	d001      	beq.n	e744 <kern_pair_16_compare+0xc>
    e740:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
    e742:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
    e744:	8840      	ldrh	r0, [r0, #2]
    e746:	884b      	ldrh	r3, [r1, #2]
    e748:	1ac0      	subs	r0, r0, r3
    e74a:	e7fa      	b.n	e742 <kern_pair_16_compare+0xa>

0000e74c <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
    e74c:	8800      	ldrh	r0, [r0, #0]
    e74e:	880b      	ldrh	r3, [r1, #0]
    e750:	1ac0      	subs	r0, r0, r3
}
    e752:	4770      	bx	lr

0000e754 <get_glyph_dsc_id>:
{
    e754:	b5f0      	push	{r4, r5, r6, r7, lr}
    e756:	b087      	sub	sp, #28
    e758:	000c      	movs	r4, r1
    if(letter == '\0') return 0;
    e75a:	1e0b      	subs	r3, r1, #0
    e75c:	d018      	beq.n	e790 <get_glyph_dsc_id+0x3c>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    e75e:	6906      	ldr	r6, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    e760:	69b3      	ldr	r3, [r6, #24]
    e762:	4299      	cmp	r1, r3
    e764:	d017      	beq.n	e796 <get_glyph_dsc_id+0x42>
    for(i = 0; i < fdsc->cmap_num; i++) {
    e766:	8a72      	ldrh	r2, [r6, #18]
    e768:	0592      	lsls	r2, r2, #22
    e76a:	0d92      	lsrs	r2, r2, #22
    e76c:	2a00      	cmp	r2, #0
    e76e:	dd62      	ble.n	e836 <get_glyph_dsc_id+0xe2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    e770:	68b7      	ldr	r7, [r6, #8]
    e772:	683b      	ldr	r3, [r7, #0]
    e774:	1ac8      	subs	r0, r1, r3
    e776:	9005      	str	r0, [sp, #20]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    e778:	88bb      	ldrh	r3, [r7, #4]
    e77a:	4298      	cmp	r0, r3
    e77c:	d80d      	bhi.n	e79a <get_glyph_dsc_id+0x46>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    e77e:	2300      	movs	r3, #0
    e780:	9303      	str	r3, [sp, #12]
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
    e782:	7cba      	ldrb	r2, [r7, #18]
    e784:	2a00      	cmp	r2, #0
    e786:	d11a      	bne.n	e7be <get_glyph_dsc_id+0x6a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
    e788:	88fb      	ldrh	r3, [r7, #6]
    e78a:	181b      	adds	r3, r3, r0
        fdsc->last_letter = letter;
    e78c:	61b4      	str	r4, [r6, #24]
        fdsc->last_glyph_id = glyph_id;
    e78e:	61f3      	str	r3, [r6, #28]
}
    e790:	0018      	movs	r0, r3
    e792:	b007      	add	sp, #28
    e794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
    e796:	69f3      	ldr	r3, [r6, #28]
    e798:	e7fa      	b.n	e790 <get_glyph_dsc_id+0x3c>
        if(rcp > fdsc->cmaps[i].range_length) continue;
    e79a:	2100      	movs	r1, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
    e79c:	3101      	adds	r1, #1
    e79e:	b289      	uxth	r1, r1
    e7a0:	4291      	cmp	r1, r2
    e7a2:	da48      	bge.n	e836 <get_glyph_dsc_id+0xe2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    e7a4:	008b      	lsls	r3, r1, #2
    e7a6:	185b      	adds	r3, r3, r1
    e7a8:	009b      	lsls	r3, r3, #2
    e7aa:	9303      	str	r3, [sp, #12]
    e7ac:	18fb      	adds	r3, r7, r3
    e7ae:	6818      	ldr	r0, [r3, #0]
    e7b0:	1a20      	subs	r0, r4, r0
    e7b2:	9005      	str	r0, [sp, #20]
        if(rcp > fdsc->cmaps[i].range_length) continue;
    e7b4:	889d      	ldrh	r5, [r3, #4]
    e7b6:	42a8      	cmp	r0, r5
    e7b8:	d8f0      	bhi.n	e79c <get_glyph_dsc_id+0x48>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
    e7ba:	001f      	movs	r7, r3
    e7bc:	e7e1      	b.n	e782 <get_glyph_dsc_id+0x2e>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
    e7be:	2a01      	cmp	r2, #1
    e7c0:	d01b      	beq.n	e7fa <get_glyph_dsc_id+0xa6>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
    e7c2:	2a02      	cmp	r2, #2
    e7c4:	d01e      	beq.n	e804 <get_glyph_dsc_id+0xb0>
        uint32_t glyph_id = 0;
    e7c6:	2300      	movs	r3, #0
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
    e7c8:	2a03      	cmp	r2, #3
    e7ca:	d1df      	bne.n	e78c <get_glyph_dsc_id+0x38>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
    e7cc:	8a3a      	ldrh	r2, [r7, #16]
    e7ce:	68b9      	ldr	r1, [r7, #8]
    e7d0:	4b1b      	ldr	r3, [pc, #108]	; (e840 <get_glyph_dsc_id+0xec>)
    e7d2:	9300      	str	r3, [sp, #0]
    e7d4:	2302      	movs	r3, #2
    e7d6:	a805      	add	r0, sp, #20
    e7d8:	4f1a      	ldr	r7, [pc, #104]	; (e844 <get_glyph_dsc_id+0xf0>)
    e7da:	47b8      	blx	r7
            if(p) {
    e7dc:	2800      	cmp	r0, #0
    e7de:	d028      	beq.n	e832 <get_glyph_dsc_id+0xde>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    e7e0:	9b03      	ldr	r3, [sp, #12]
    e7e2:	68b2      	ldr	r2, [r6, #8]
    e7e4:	4694      	mov	ip, r2
    e7e6:	4463      	add	r3, ip
    e7e8:	001d      	movs	r5, r3
    e7ea:	689b      	ldr	r3, [r3, #8]
    e7ec:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
    e7ee:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
    e7f0:	68eb      	ldr	r3, [r5, #12]
    e7f2:	5c18      	ldrb	r0, [r3, r0]
    e7f4:	88eb      	ldrh	r3, [r5, #6]
    e7f6:	18c3      	adds	r3, r0, r3
    e7f8:	e7c8      	b.n	e78c <get_glyph_dsc_id+0x38>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
    e7fa:	68fb      	ldr	r3, [r7, #12]
    e7fc:	5c18      	ldrb	r0, [r3, r0]
    e7fe:	88fb      	ldrh	r3, [r7, #6]
    e800:	18c3      	adds	r3, r0, r3
    e802:	e7c3      	b.n	e78c <get_glyph_dsc_id+0x38>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
    e804:	8a3a      	ldrh	r2, [r7, #16]
    e806:	68b9      	ldr	r1, [r7, #8]
    e808:	4b0d      	ldr	r3, [pc, #52]	; (e840 <get_glyph_dsc_id+0xec>)
    e80a:	9300      	str	r3, [sp, #0]
    e80c:	2302      	movs	r3, #2
    e80e:	a805      	add	r0, sp, #20
    e810:	4f0c      	ldr	r7, [pc, #48]	; (e844 <get_glyph_dsc_id+0xf0>)
    e812:	47b8      	blx	r7
            if(p) {
    e814:	2800      	cmp	r0, #0
    e816:	d00a      	beq.n	e82e <get_glyph_dsc_id+0xda>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
    e818:	9b03      	ldr	r3, [sp, #12]
    e81a:	68b2      	ldr	r2, [r6, #8]
    e81c:	4694      	mov	ip, r2
    e81e:	4463      	add	r3, ip
    e820:	001d      	movs	r5, r3
    e822:	689b      	ldr	r3, [r3, #8]
    e824:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
    e826:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
    e828:	88eb      	ldrh	r3, [r5, #6]
    e82a:	18c3      	adds	r3, r0, r3
    e82c:	e7ae      	b.n	e78c <get_glyph_dsc_id+0x38>
        uint32_t glyph_id = 0;
    e82e:	2300      	movs	r3, #0
    e830:	e7ac      	b.n	e78c <get_glyph_dsc_id+0x38>
    e832:	2300      	movs	r3, #0
    e834:	e7aa      	b.n	e78c <get_glyph_dsc_id+0x38>
    fdsc->last_letter = letter;
    e836:	61b4      	str	r4, [r6, #24]
    fdsc->last_glyph_id = 0;
    e838:	2300      	movs	r3, #0
    e83a:	61f3      	str	r3, [r6, #28]
    return 0;
    e83c:	e7a8      	b.n	e790 <get_glyph_dsc_id+0x3c>
    e83e:	46c0      	nop			; (mov r8, r8)
    e840:	0000e74d 	.word	0x0000e74d
    e844:	00011b89 	.word	0x00011b89

0000e848 <lv_font_get_bitmap_fmt_txt>:
{
    e848:	b5f0      	push	{r4, r5, r6, r7, lr}
    e84a:	46de      	mov	lr, fp
    e84c:	4657      	mov	r7, sl
    e84e:	464e      	mov	r6, r9
    e850:	4645      	mov	r5, r8
    e852:	b5e0      	push	{r5, r6, r7, lr}
    e854:	b099      	sub	sp, #100	; 0x64
    if(unicode_letter == '\t') unicode_letter = ' ';
    e856:	2909      	cmp	r1, #9
    e858:	d01c      	beq.n	e894 <lv_font_get_bitmap_fmt_txt+0x4c>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    e85a:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    e85c:	4bcd      	ldr	r3, [pc, #820]	; (eb94 <lv_font_get_bitmap_fmt_txt+0x34c>)
    e85e:	4798      	blx	r3
    if(!gid) return NULL;
    e860:	2800      	cmp	r0, #0
    e862:	d101      	bne.n	e868 <lv_font_get_bitmap_fmt_txt+0x20>
    e864:	f000 fcdb 	bl	f21e <lv_font_get_bitmap_fmt_txt+0x9d6>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    e868:	00c0      	lsls	r0, r0, #3
    e86a:	686b      	ldr	r3, [r5, #4]
    e86c:	181e      	adds	r6, r3, r0
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
    e86e:	7d2b      	ldrb	r3, [r5, #20]
    e870:	079b      	lsls	r3, r3, #30
    e872:	d111      	bne.n	e898 <lv_font_get_bitmap_fmt_txt+0x50>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
    e874:	2e00      	cmp	r6, #0
    e876:	d101      	bne.n	e87c <lv_font_get_bitmap_fmt_txt+0x34>
    e878:	f000 fcd4 	bl	f224 <lv_font_get_bitmap_fmt_txt+0x9dc>
    e87c:	6830      	ldr	r0, [r6, #0]
    e87e:	0300      	lsls	r0, r0, #12
    e880:	0b03      	lsrs	r3, r0, #12
    e882:	6828      	ldr	r0, [r5, #0]
    e884:	18c0      	adds	r0, r0, r3
}
    e886:	b019      	add	sp, #100	; 0x64
    e888:	bc3c      	pop	{r2, r3, r4, r5}
    e88a:	4690      	mov	r8, r2
    e88c:	4699      	mov	r9, r3
    e88e:	46a2      	mov	sl, r4
    e890:	46ab      	mov	fp, r5
    e892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
    e894:	3117      	adds	r1, #23
    e896:	e7e0      	b.n	e85a <lv_font_get_bitmap_fmt_txt+0x12>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
    e898:	7933      	ldrb	r3, [r6, #4]
    e89a:	7974      	ldrb	r4, [r6, #5]
    e89c:	435c      	muls	r4, r3
        if(gsize == 0) return NULL;
    e89e:	2c00      	cmp	r4, #0
    e8a0:	d101      	bne.n	e8a6 <lv_font_get_bitmap_fmt_txt+0x5e>
    e8a2:	f000 fcc2 	bl	f22a <lv_font_get_bitmap_fmt_txt+0x9e2>
        switch(fdsc->bpp) {
    e8a6:	7ceb      	ldrb	r3, [r5, #19]
    e8a8:	069b      	lsls	r3, r3, #26
    e8aa:	0f1b      	lsrs	r3, r3, #28
    e8ac:	b2da      	uxtb	r2, r3
    e8ae:	2a02      	cmp	r2, #2
    e8b0:	d100      	bne.n	e8b4 <lv_font_get_bitmap_fmt_txt+0x6c>
    e8b2:	e08d      	b.n	e9d0 <lv_font_get_bitmap_fmt_txt+0x188>
    e8b4:	d908      	bls.n	e8c8 <lv_font_get_bitmap_fmt_txt+0x80>
    e8b6:	b2da      	uxtb	r2, r3
    e8b8:	2a03      	cmp	r2, #3
    e8ba:	d100      	bne.n	e8be <lv_font_get_bitmap_fmt_txt+0x76>
    e8bc:	e08b      	b.n	e9d6 <lv_font_get_bitmap_fmt_txt+0x18e>
    e8be:	2a04      	cmp	r2, #4
    e8c0:	d104      	bne.n	e8cc <lv_font_get_bitmap_fmt_txt+0x84>
                buf_size = (gsize + 1) >> 1;
    e8c2:	3401      	adds	r4, #1
    e8c4:	0864      	lsrs	r4, r4, #1
                break;
    e8c6:	e001      	b.n	e8cc <lv_font_get_bitmap_fmt_txt+0x84>
        switch(fdsc->bpp) {
    e8c8:	2a01      	cmp	r2, #1
    e8ca:	d07e      	beq.n	e9ca <lv_font_get_bitmap_fmt_txt+0x182>
        if(_lv_mem_get_size(decompr_buf) < buf_size) {
    e8cc:	4bb2      	ldr	r3, [pc, #712]	; (eb98 <lv_font_get_bitmap_fmt_txt+0x350>)
    e8ce:	6818      	ldr	r0, [r3, #0]
    e8d0:	4bb2      	ldr	r3, [pc, #712]	; (eb9c <lv_font_get_bitmap_fmt_txt+0x354>)
    e8d2:	4798      	blx	r3
    e8d4:	4284      	cmp	r4, r0
    e8d6:	d90f      	bls.n	e8f8 <lv_font_get_bitmap_fmt_txt+0xb0>
            decompr_buf = lv_mem_realloc(decompr_buf, buf_size);
    e8d8:	4faf      	ldr	r7, [pc, #700]	; (eb98 <lv_font_get_bitmap_fmt_txt+0x350>)
    e8da:	0021      	movs	r1, r4
    e8dc:	6838      	ldr	r0, [r7, #0]
    e8de:	4bb0      	ldr	r3, [pc, #704]	; (eba0 <lv_font_get_bitmap_fmt_txt+0x358>)
    e8e0:	4798      	blx	r3
    e8e2:	6038      	str	r0, [r7, #0]
            LV_ASSERT_MEM(decompr_buf);
    e8e4:	4baf      	ldr	r3, [pc, #700]	; (eba4 <lv_font_get_bitmap_fmt_txt+0x35c>)
    e8e6:	4798      	blx	r3
    e8e8:	2800      	cmp	r0, #0
    e8ea:	d077      	beq.n	e9dc <lv_font_get_bitmap_fmt_txt+0x194>
            if(decompr_buf == NULL) return NULL;
    e8ec:	4baa      	ldr	r3, [pc, #680]	; (eb98 <lv_font_get_bitmap_fmt_txt+0x350>)
    e8ee:	681b      	ldr	r3, [r3, #0]
    e8f0:	2b00      	cmp	r3, #0
    e8f2:	d101      	bne.n	e8f8 <lv_font_get_bitmap_fmt_txt+0xb0>
    e8f4:	f000 fc9c 	bl	f230 <lv_font_get_bitmap_fmt_txt+0x9e8>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], decompr_buf, gdsc->box_w, gdsc->box_h, (uint8_t)fdsc->bpp);
    e8f8:	6833      	ldr	r3, [r6, #0]
    e8fa:	031b      	lsls	r3, r3, #12
    e8fc:	0b1b      	lsrs	r3, r3, #12
    e8fe:	682a      	ldr	r2, [r5, #0]
    e900:	18d2      	adds	r2, r2, r3
    e902:	4ba5      	ldr	r3, [pc, #660]	; (eb98 <lv_font_get_bitmap_fmt_txt+0x350>)
    e904:	681b      	ldr	r3, [r3, #0]
    e906:	9303      	str	r3, [sp, #12]
    e908:	7933      	ldrb	r3, [r6, #4]
    e90a:	930d      	str	r3, [sp, #52]	; 0x34
    e90c:	b21b      	sxth	r3, r3
    e90e:	9311      	str	r3, [sp, #68]	; 0x44
    e910:	7973      	ldrb	r3, [r6, #5]
    e912:	9310      	str	r3, [sp, #64]	; 0x40
    e914:	b21b      	sxth	r3, r3
    e916:	930e      	str	r3, [sp, #56]	; 0x38
    e918:	7ceb      	ldrb	r3, [r5, #19]
    e91a:	069b      	lsls	r3, r3, #26
    e91c:	0f1b      	lsrs	r3, r3, #28
    e91e:	b2d9      	uxtb	r1, r3
    e920:	9100      	str	r1, [sp, #0]
    uint8_t wr_size = bpp;
    e922:	9106      	str	r1, [sp, #24]
    if(bpp == 3) wr_size = 4;
    e924:	2903      	cmp	r1, #3
    e926:	d060      	beq.n	e9ea <lv_font_get_bitmap_fmt_txt+0x1a2>
    rle_in = in;
    e928:	499f      	ldr	r1, [pc, #636]	; (eba8 <lv_font_get_bitmap_fmt_txt+0x360>)
    e92a:	600a      	str	r2, [r1, #0]
    rle_bpp = bpp;
    e92c:	4a9f      	ldr	r2, [pc, #636]	; (ebac <lv_font_get_bitmap_fmt_txt+0x364>)
    e92e:	7013      	strb	r3, [r2, #0]
    rle_state = RLE_STATE_SINGLE;
    e930:	2300      	movs	r3, #0
    e932:	4a9f      	ldr	r2, [pc, #636]	; (ebb0 <lv_font_get_bitmap_fmt_txt+0x368>)
    e934:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
    e936:	4a9f      	ldr	r2, [pc, #636]	; (ebb4 <lv_font_get_bitmap_fmt_txt+0x36c>)
    e938:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
    e93a:	4a9f      	ldr	r2, [pc, #636]	; (ebb8 <lv_font_get_bitmap_fmt_txt+0x370>)
    e93c:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
    e93e:	4a9f      	ldr	r2, [pc, #636]	; (ebbc <lv_font_get_bitmap_fmt_txt+0x374>)
    e940:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
    e942:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    e944:	0038      	movs	r0, r7
    e946:	4c9e      	ldr	r4, [pc, #632]	; (ebc0 <lv_font_get_bitmap_fmt_txt+0x378>)
    e948:	47a0      	blx	r4
    e94a:	0005      	movs	r5, r0
    e94c:	9017      	str	r0, [sp, #92]	; 0x5c
    uint8_t * line_buf2 = _lv_mem_buf_get(w);
    e94e:	0038      	movs	r0, r7
    e950:	47a0      	blx	r4
    e952:	9001      	str	r0, [sp, #4]
    for(i = 0; i < w; i++) {
    e954:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e956:	2b00      	cmp	r3, #0
    e958:	dc00      	bgt.n	e95c <lv_font_get_bitmap_fmt_txt+0x114>
    e95a:	e25e      	b.n	ee1a <lv_font_get_bitmap_fmt_txt+0x5d2>
    e95c:	4b96      	ldr	r3, [pc, #600]	; (ebb8 <lv_font_get_bitmap_fmt_txt+0x370>)
    e95e:	781b      	ldrb	r3, [r3, #0]
    e960:	9302      	str	r3, [sp, #8]
    e962:	4b96      	ldr	r3, [pc, #600]	; (ebbc <lv_font_get_bitmap_fmt_txt+0x374>)
    e964:	781b      	ldrb	r3, [r3, #0]
    e966:	469a      	mov	sl, r3
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    e968:	4b8f      	ldr	r3, [pc, #572]	; (eba8 <lv_font_get_bitmap_fmt_txt+0x360>)
    e96a:	681e      	ldr	r6, [r3, #0]
    e96c:	4b91      	ldr	r3, [pc, #580]	; (ebb4 <lv_font_get_bitmap_fmt_txt+0x36c>)
    e96e:	6818      	ldr	r0, [r3, #0]
    e970:	4b8e      	ldr	r3, [pc, #568]	; (ebac <lv_font_get_bitmap_fmt_txt+0x364>)
    e972:	781b      	ldrb	r3, [r3, #0]
    e974:	4699      	mov	r9, r3
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    e976:	2301      	movs	r3, #1
    e978:	4649      	mov	r1, r9
    e97a:	408b      	lsls	r3, r1
    e97c:	3b01      	subs	r3, #1
    e97e:	b2db      	uxtb	r3, r3
    e980:	930b      	str	r3, [sp, #44]	; 0x2c
    e982:	2308      	movs	r3, #8
    e984:	1a5b      	subs	r3, r3, r1
    e986:	930c      	str	r3, [sp, #48]	; 0x30
    e988:	2310      	movs	r3, #16
    e98a:	1a5b      	subs	r3, r3, r1
    e98c:	930a      	str	r3, [sp, #40]	; 0x28
    e98e:	4b88      	ldr	r3, [pc, #544]	; (ebb0 <lv_font_get_bitmap_fmt_txt+0x368>)
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	469c      	mov	ip, r3
    e994:	002c      	movs	r4, r5
    e996:	003b      	movs	r3, r7
    e998:	3b01      	subs	r3, #1
    e99a:	b29b      	uxth	r3, r3
    e99c:	3301      	adds	r3, #1
    e99e:	930f      	str	r3, [sp, #60]	; 0x3c
    e9a0:	002a      	movs	r2, r5
    e9a2:	469b      	mov	fp, r3
    e9a4:	445a      	add	r2, fp
    e9a6:	9209      	str	r2, [sp, #36]	; 0x24
    if(bit_pos + len >= 8) {
    e9a8:	2300      	movs	r3, #0
    e9aa:	9305      	str	r3, [sp, #20]
    e9ac:	9308      	str	r3, [sp, #32]
    e9ae:	2100      	movs	r1, #0
    e9b0:	9307      	str	r3, [sp, #28]
    switch(len) {
    e9b2:	464b      	mov	r3, r9
    e9b4:	009b      	lsls	r3, r3, #2
    e9b6:	469b      	mov	fp, r3
    e9b8:	4b82      	ldr	r3, [pc, #520]	; (ebc4 <lv_font_get_bitmap_fmt_txt+0x37c>)
    e9ba:	445b      	add	r3, fp
    e9bc:	9312      	str	r3, [sp, #72]	; 0x48
    e9be:	4653      	mov	r3, sl
    e9c0:	9304      	str	r3, [sp, #16]
    e9c2:	46a8      	mov	r8, r5
    e9c4:	4667      	mov	r7, ip
    e9c6:	464d      	mov	r5, r9
    e9c8:	e031      	b.n	ea2e <lv_font_get_bitmap_fmt_txt+0x1e6>
                buf_size = (gsize + 7) >> 3;
    e9ca:	3407      	adds	r4, #7
    e9cc:	08e4      	lsrs	r4, r4, #3
                break;
    e9ce:	e77d      	b.n	e8cc <lv_font_get_bitmap_fmt_txt+0x84>
                buf_size = (gsize + 3) >> 2;
    e9d0:	3403      	adds	r4, #3
    e9d2:	08a4      	lsrs	r4, r4, #2
                break;
    e9d4:	e77a      	b.n	e8cc <lv_font_get_bitmap_fmt_txt+0x84>
                buf_size = (gsize + 1) >> 1;
    e9d6:	3401      	adds	r4, #1
    e9d8:	0864      	lsrs	r4, r4, #1
                break;
    e9da:	e777      	b.n	e8cc <lv_font_get_bitmap_fmt_txt+0x84>
            LV_ASSERT_MEM(decompr_buf);
    e9dc:	4b6e      	ldr	r3, [pc, #440]	; (eb98 <lv_font_get_bitmap_fmt_txt+0x350>)
    e9de:	681a      	ldr	r2, [r3, #0]
    e9e0:	2300      	movs	r3, #0
    e9e2:	4879      	ldr	r0, [pc, #484]	; (ebc8 <lv_font_get_bitmap_fmt_txt+0x380>)
    e9e4:	4979      	ldr	r1, [pc, #484]	; (ebcc <lv_font_get_bitmap_fmt_txt+0x384>)
    e9e6:	4788      	blx	r1
    e9e8:	e7fe      	b.n	e9e8 <lv_font_get_bitmap_fmt_txt+0x1a0>
    if(bpp == 3) wr_size = 4;
    e9ea:	3101      	adds	r1, #1
    e9ec:	9106      	str	r1, [sp, #24]
    e9ee:	e79b      	b.n	e928 <lv_font_get_bitmap_fmt_txt+0xe0>
            bit_mask = 0x3;
    e9f0:	2303      	movs	r3, #3
    e9f2:	469c      	mov	ip, r3
    uint32_t byte_pos = bit_pos >> 3;
    e9f4:	08c3      	lsrs	r3, r0, #3
    bit_pos = bit_pos & 0x7;
    e9f6:	2107      	movs	r1, #7
    e9f8:	4001      	ands	r1, r0
    if(bit_pos + len >= 8) {
    e9fa:	194a      	adds	r2, r1, r5
    e9fc:	2a07      	cmp	r2, #7
    e9fe:	d82f      	bhi.n	ea60 <lv_font_get_bitmap_fmt_txt+0x218>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    ea00:	5cf3      	ldrb	r3, [r6, r3]
    ea02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ea04:	1a51      	subs	r1, r2, r1
    ea06:	410b      	asrs	r3, r1
    ea08:	4662      	mov	r2, ip
    ea0a:	401a      	ands	r2, r3
    ea0c:	0013      	movs	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
    ea0e:	2800      	cmp	r0, #0
    ea10:	d002      	beq.n	ea18 <lv_font_get_bitmap_fmt_txt+0x1d0>
    ea12:	9a02      	ldr	r2, [sp, #8]
    ea14:	4293      	cmp	r3, r2
    ea16:	d031      	beq.n	ea7c <lv_font_get_bitmap_fmt_txt+0x234>
        rle_rdp += rle_bpp;
    ea18:	1940      	adds	r0, r0, r5
        rle_prev_v = ret;
    ea1a:	9302      	str	r3, [sp, #8]
        rle_rdp += rle_bpp;
    ea1c:	2101      	movs	r1, #1
    ea1e:	2201      	movs	r2, #1
    ea20:	9207      	str	r2, [sp, #28]
        out[i] = rle_next();
    ea22:	7023      	strb	r3, [r4, #0]
    ea24:	3401      	adds	r4, #1
    for(i = 0; i < w; i++) {
    ea26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea28:	429c      	cmp	r4, r3
    ea2a:	d100      	bne.n	ea2e <lv_font_get_bitmap_fmt_txt+0x1e6>
    ea2c:	e14b      	b.n	ecc6 <lv_font_get_bitmap_fmt_txt+0x47e>
    if(rle_state == RLE_STATE_SINGLE) {
    ea2e:	2f00      	cmp	r7, #0
    ea30:	d12c      	bne.n	ea8c <lv_font_get_bitmap_fmt_txt+0x244>
    switch(len) {
    ea32:	464b      	mov	r3, r9
    ea34:	2b08      	cmp	r3, #8
    ea36:	d80d      	bhi.n	ea54 <lv_font_get_bitmap_fmt_txt+0x20c>
    ea38:	4b65      	ldr	r3, [pc, #404]	; (ebd0 <lv_font_get_bitmap_fmt_txt+0x388>)
    ea3a:	465a      	mov	r2, fp
    ea3c:	589b      	ldr	r3, [r3, r2]
    ea3e:	9307      	str	r3, [sp, #28]
    ea40:	469f      	mov	pc, r3
            bit_mask = 0x7;
    ea42:	2307      	movs	r3, #7
    ea44:	469c      	mov	ip, r3
    ea46:	e7d5      	b.n	e9f4 <lv_font_get_bitmap_fmt_txt+0x1ac>
            bit_mask = 0xF;
    ea48:	230f      	movs	r3, #15
    ea4a:	469c      	mov	ip, r3
    ea4c:	e7d2      	b.n	e9f4 <lv_font_get_bitmap_fmt_txt+0x1ac>
            bit_mask = 0xFF;
    ea4e:	23ff      	movs	r3, #255	; 0xff
    ea50:	469c      	mov	ip, r3
    ea52:	e7cf      	b.n	e9f4 <lv_font_get_bitmap_fmt_txt+0x1ac>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    ea54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ea56:	469c      	mov	ip, r3
    ea58:	e7cc      	b.n	e9f4 <lv_font_get_bitmap_fmt_txt+0x1ac>
            bit_mask = 0x1;
    ea5a:	2301      	movs	r3, #1
    ea5c:	469c      	mov	ip, r3
    ea5e:	e7c9      	b.n	e9f4 <lv_font_get_bitmap_fmt_txt+0x1ac>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ea60:	5cf2      	ldrb	r2, [r6, r3]
    ea62:	0212      	lsls	r2, r2, #8
    ea64:	4692      	mov	sl, r2
    ea66:	18f3      	adds	r3, r6, r3
    ea68:	785b      	ldrb	r3, [r3, #1]
    ea6a:	4453      	add	r3, sl
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    ea6c:	b29b      	uxth	r3, r3
    ea6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ea70:	1a51      	subs	r1, r2, r1
    ea72:	410b      	asrs	r3, r1
    ea74:	4662      	mov	r2, ip
    ea76:	401a      	ands	r2, r3
    ea78:	0013      	movs	r3, r2
    ea7a:	e7c8      	b.n	ea0e <lv_font_get_bitmap_fmt_txt+0x1c6>
        if(rle_rdp != 0 && rle_prev_v == ret) {
    ea7c:	2201      	movs	r2, #1
    ea7e:	9205      	str	r2, [sp, #20]
            rle_cnt = 0;
    ea80:	2200      	movs	r2, #0
    ea82:	9204      	str	r2, [sp, #16]
        if(rle_rdp != 0 && rle_prev_v == ret) {
    ea84:	3201      	adds	r2, #1
    ea86:	9208      	str	r2, [sp, #32]
            rle_state = RLE_STATE_REPEATE;
    ea88:	2701      	movs	r7, #1
    ea8a:	e7c5      	b.n	ea18 <lv_font_get_bitmap_fmt_txt+0x1d0>
    else if(rle_state == RLE_STATE_REPEATE) {
    ea8c:	2f01      	cmp	r7, #1
    ea8e:	d011      	beq.n	eab4 <lv_font_get_bitmap_fmt_txt+0x26c>
    uint8_t ret = 0;
    ea90:	2300      	movs	r3, #0
    else if(rle_state == RLE_STATE_COUNTER) {
    ea92:	2f02      	cmp	r7, #2
    ea94:	d1c5      	bne.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
        rle_cnt--;
    ea96:	9a04      	ldr	r2, [sp, #16]
    ea98:	3a01      	subs	r2, #1
    ea9a:	b2d3      	uxtb	r3, r2
    ea9c:	9304      	str	r3, [sp, #16]
        if(rle_cnt == 0) {
    ea9e:	2b00      	cmp	r3, #0
    eaa0:	d000      	beq.n	eaa4 <lv_font_get_bitmap_fmt_txt+0x25c>
    eaa2:	e10c      	b.n	ecbe <lv_font_get_bitmap_fmt_txt+0x476>
    switch(len) {
    eaa4:	464b      	mov	r3, r9
    eaa6:	2b08      	cmp	r3, #8
    eaa8:	d900      	bls.n	eaac <lv_font_get_bitmap_fmt_txt+0x264>
    eaaa:	e0f1      	b.n	ec90 <lv_font_get_bitmap_fmt_txt+0x448>
    eaac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eaae:	681b      	ldr	r3, [r3, #0]
    eab0:	9302      	str	r3, [sp, #8]
    eab2:	469f      	mov	pc, r3
    uint32_t byte_pos = bit_pos >> 3;
    eab4:	08c3      	lsrs	r3, r0, #3
    bit_pos = bit_pos & 0x7;
    eab6:	2107      	movs	r1, #7
    eab8:	4001      	ands	r1, r0
    if(bit_pos + len >= 8) {
    eaba:	1c4a      	adds	r2, r1, #1
    eabc:	2a07      	cmp	r2, #7
    eabe:	d815      	bhi.n	eaec <lv_font_get_bitmap_fmt_txt+0x2a4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    eac0:	5cf3      	ldrb	r3, [r6, r3]
    eac2:	43c9      	mvns	r1, r1
    eac4:	3108      	adds	r1, #8
    eac6:	410b      	asrs	r3, r1
    eac8:	2201      	movs	r2, #1
    eaca:	4013      	ands	r3, r2
        rle_cnt++;
    eacc:	9a04      	ldr	r2, [sp, #16]
    eace:	3201      	adds	r2, #1
    ead0:	b2d2      	uxtb	r2, r2
    ead2:	9204      	str	r2, [sp, #16]
        rle_rdp += 1;
    ead4:	1c41      	adds	r1, r0, #1
        if(v == 1) {
    ead6:	2b01      	cmp	r3, #1
    ead8:	d015      	beq.n	eb06 <lv_font_get_bitmap_fmt_txt+0x2be>
    switch(len) {
    eada:	464b      	mov	r3, r9
    eadc:	2b08      	cmp	r3, #8
    eade:	d900      	bls.n	eae2 <lv_font_get_bitmap_fmt_txt+0x29a>
    eae0:	e0ab      	b.n	ec3a <lv_font_get_bitmap_fmt_txt+0x3f2>
    eae2:	4b3c      	ldr	r3, [pc, #240]	; (ebd4 <lv_font_get_bitmap_fmt_txt+0x38c>)
    eae4:	465a      	mov	r2, fp
    eae6:	589b      	ldr	r3, [r3, r2]
    eae8:	9302      	str	r3, [sp, #8]
    eaea:	469f      	mov	pc, r3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    eaec:	5cf2      	ldrb	r2, [r6, r3]
    eaee:	0212      	lsls	r2, r2, #8
    eaf0:	4694      	mov	ip, r2
    eaf2:	18f3      	adds	r3, r6, r3
    eaf4:	785b      	ldrb	r3, [r3, #1]
    eaf6:	4463      	add	r3, ip
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    eaf8:	b29b      	uxth	r3, r3
    eafa:	43c9      	mvns	r1, r1
    eafc:	3110      	adds	r1, #16
    eafe:	410b      	asrs	r3, r1
    eb00:	2201      	movs	r2, #1
    eb02:	4013      	ands	r3, r2
    eb04:	e7e2      	b.n	eacc <lv_font_get_bitmap_fmt_txt+0x284>
            if(rle_cnt == 11) {
    eb06:	2a0b      	cmp	r2, #11
    eb08:	d005      	beq.n	eb16 <lv_font_get_bitmap_fmt_txt+0x2ce>
        rle_rdp += 1;
    eb0a:	0008      	movs	r0, r1
            ret = rle_prev_v;
    eb0c:	9b02      	ldr	r3, [sp, #8]
            if(rle_cnt == 11) {
    eb0e:	2201      	movs	r2, #1
    eb10:	9205      	str	r2, [sp, #20]
    eb12:	2101      	movs	r1, #1
    eb14:	e785      	b.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
    uint32_t byte_pos = bit_pos >> 3;
    eb16:	08cb      	lsrs	r3, r1, #3
    bit_pos = bit_pos & 0x7;
    eb18:	2207      	movs	r2, #7
    eb1a:	4011      	ands	r1, r2
    if(bit_pos + len >= 8) {
    eb1c:	1d8a      	adds	r2, r1, #6
    eb1e:	2a07      	cmp	r2, #7
    eb20:	d813      	bhi.n	eb4a <lv_font_get_bitmap_fmt_txt+0x302>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    eb22:	5cf2      	ldrb	r2, [r6, r3]
    eb24:	2302      	movs	r3, #2
    eb26:	1a59      	subs	r1, r3, r1
    eb28:	410a      	asrs	r2, r1
    eb2a:	333d      	adds	r3, #61	; 0x3d
    eb2c:	401a      	ands	r2, r3
    eb2e:	9204      	str	r2, [sp, #16]
                rle_rdp += 6;
    eb30:	3007      	adds	r0, #7
                if(rle_cnt != 0) {
    eb32:	9b04      	ldr	r3, [sp, #16]
    eb34:	2b00      	cmp	r3, #0
    eb36:	d000      	beq.n	eb3a <lv_font_get_bitmap_fmt_txt+0x2f2>
    eb38:	e0ba      	b.n	ecb0 <lv_font_get_bitmap_fmt_txt+0x468>
    switch(len) {
    eb3a:	464b      	mov	r3, r9
    eb3c:	2b08      	cmp	r3, #8
    eb3e:	d824      	bhi.n	eb8a <lv_font_get_bitmap_fmt_txt+0x342>
    eb40:	4b25      	ldr	r3, [pc, #148]	; (ebd8 <lv_font_get_bitmap_fmt_txt+0x390>)
    eb42:	465a      	mov	r2, fp
    eb44:	589b      	ldr	r3, [r3, r2]
    eb46:	9302      	str	r3, [sp, #8]
    eb48:	469f      	mov	pc, r3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    eb4a:	5cf2      	ldrb	r2, [r6, r3]
    eb4c:	0212      	lsls	r2, r2, #8
    eb4e:	18f3      	adds	r3, r6, r3
    eb50:	785b      	ldrb	r3, [r3, #1]
    eb52:	189a      	adds	r2, r3, r2
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    eb54:	b292      	uxth	r2, r2
    eb56:	230a      	movs	r3, #10
    eb58:	1a59      	subs	r1, r3, r1
    eb5a:	410a      	asrs	r2, r1
    eb5c:	3335      	adds	r3, #53	; 0x35
    eb5e:	401a      	ands	r2, r3
    eb60:	9204      	str	r2, [sp, #16]
    eb62:	e7e5      	b.n	eb30 <lv_font_get_bitmap_fmt_txt+0x2e8>
            bit_mask = 0x3;
    eb64:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
    eb66:	08c7      	lsrs	r7, r0, #3
    bit_pos = bit_pos & 0x7;
    eb68:	2107      	movs	r1, #7
    eb6a:	4001      	ands	r1, r0
    if(bit_pos + len >= 8) {
    eb6c:	194a      	adds	r2, r1, r5
    eb6e:	2a07      	cmp	r2, #7
    eb70:	d834      	bhi.n	ebdc <lv_font_get_bitmap_fmt_txt+0x394>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    eb72:	5df7      	ldrb	r7, [r6, r7]
    eb74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eb76:	1a51      	subs	r1, r2, r1
    eb78:	410f      	asrs	r7, r1
    eb7a:	403b      	ands	r3, r7
    eb7c:	e039      	b.n	ebf2 <lv_font_get_bitmap_fmt_txt+0x3aa>
            bit_mask = 0x7;
    eb7e:	2307      	movs	r3, #7
    eb80:	e7f1      	b.n	eb66 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = 0xF;
    eb82:	230f      	movs	r3, #15
    eb84:	e7ef      	b.n	eb66 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = 0xFF;
    eb86:	23ff      	movs	r3, #255	; 0xff
    eb88:	e7ed      	b.n	eb66 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    eb8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eb8c:	e7eb      	b.n	eb66 <lv_font_get_bitmap_fmt_txt+0x31e>
            bit_mask = 0x1;
    eb8e:	2301      	movs	r3, #1
    eb90:	e7e9      	b.n	eb66 <lv_font_get_bitmap_fmt_txt+0x31e>
    eb92:	46c0      	nop			; (mov r8, r8)
    eb94:	0000e755 	.word	0x0000e755
    eb98:	20002bb8 	.word	0x20002bb8
    eb9c:	00010b4d 	.word	0x00010b4d
    eba0:	00010ddd 	.word	0x00010ddd
    eba4:	00001415 	.word	0x00001415
    eba8:	20002bc0 	.word	0x20002bc0
    ebac:	20002bbc 	.word	0x20002bbc
    ebb0:	20002bcc 	.word	0x20002bcc
    ebb4:	20002bc8 	.word	0x20002bc8
    ebb8:	20002bc4 	.word	0x20002bc4
    ebbc:	20002bbd 	.word	0x20002bbd
    ebc0:	00010e59 	.word	0x00010e59
    ebc4:	00018a64 	.word	0x00018a64
    ebc8:	00018804 	.word	0x00018804
    ebcc:	0000141d 	.word	0x0000141d
    ebd0:	00018a40 	.word	0x00018a40
    ebd4:	00018a88 	.word	0x00018a88
    ebd8:	00018aac 	.word	0x00018aac
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ebdc:	5df2      	ldrb	r2, [r6, r7]
    ebde:	0212      	lsls	r2, r2, #8
    ebe0:	4694      	mov	ip, r2
    ebe2:	19f7      	adds	r7, r6, r7
    ebe4:	787f      	ldrb	r7, [r7, #1]
    ebe6:	4467      	add	r7, ip
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    ebe8:	b2bf      	uxth	r7, r7
    ebea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ebec:	1a51      	subs	r1, r2, r1
    ebee:	410f      	asrs	r7, r1
    ebf0:	403b      	ands	r3, r7
                    rle_rdp += rle_bpp;
    ebf2:	1940      	adds	r0, r0, r5
                    rle_prev_v = ret;
    ebf4:	9302      	str	r3, [sp, #8]
                    rle_rdp += rle_bpp;
    ebf6:	2201      	movs	r2, #1
    ebf8:	9205      	str	r2, [sp, #20]
    ebfa:	9208      	str	r2, [sp, #32]
                    rle_state = RLE_STATE_SINGLE;
    ebfc:	2700      	movs	r7, #0
                    rle_rdp += rle_bpp;
    ebfe:	2101      	movs	r1, #1
    ec00:	9207      	str	r2, [sp, #28]
    ec02:	e70e      	b.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
            bit_mask = 0x3;
    ec04:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
    ec06:	08cf      	lsrs	r7, r1, #3
    bit_pos = bit_pos & 0x7;
    ec08:	2007      	movs	r0, #7
    ec0a:	4008      	ands	r0, r1
    if(bit_pos + len >= 8) {
    ec0c:	1942      	adds	r2, r0, r5
    ec0e:	2a07      	cmp	r2, #7
    ec10:	d817      	bhi.n	ec42 <lv_font_get_bitmap_fmt_txt+0x3fa>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    ec12:	5df7      	ldrb	r7, [r6, r7]
    ec14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec16:	1a10      	subs	r0, r2, r0
    ec18:	4107      	asrs	r7, r0
    ec1a:	403b      	ands	r3, r7
            rle_rdp += rle_bpp;
    ec1c:	1948      	adds	r0, r1, r5
            rle_prev_v = ret;
    ec1e:	9302      	str	r3, [sp, #8]
            rle_rdp += rle_bpp;
    ec20:	2201      	movs	r2, #1
    ec22:	9205      	str	r2, [sp, #20]
    ec24:	9208      	str	r2, [sp, #32]
            rle_state = RLE_STATE_SINGLE;
    ec26:	2700      	movs	r7, #0
            rle_rdp += rle_bpp;
    ec28:	2101      	movs	r1, #1
    ec2a:	9207      	str	r2, [sp, #28]
    ec2c:	e6f9      	b.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
            bit_mask = 0x7;
    ec2e:	2307      	movs	r3, #7
    ec30:	e7e9      	b.n	ec06 <lv_font_get_bitmap_fmt_txt+0x3be>
            bit_mask = 0xF;
    ec32:	230f      	movs	r3, #15
    ec34:	e7e7      	b.n	ec06 <lv_font_get_bitmap_fmt_txt+0x3be>
            bit_mask = 0xFF;
    ec36:	23ff      	movs	r3, #255	; 0xff
    ec38:	e7e5      	b.n	ec06 <lv_font_get_bitmap_fmt_txt+0x3be>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    ec3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec3c:	e7e3      	b.n	ec06 <lv_font_get_bitmap_fmt_txt+0x3be>
            bit_mask = 0x1;
    ec3e:	2301      	movs	r3, #1
    ec40:	e7e1      	b.n	ec06 <lv_font_get_bitmap_fmt_txt+0x3be>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ec42:	5df2      	ldrb	r2, [r6, r7]
    ec44:	0212      	lsls	r2, r2, #8
    ec46:	4694      	mov	ip, r2
    ec48:	19f7      	adds	r7, r6, r7
    ec4a:	787f      	ldrb	r7, [r7, #1]
    ec4c:	4467      	add	r7, ip
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    ec4e:	b2bf      	uxth	r7, r7
    ec50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ec52:	1a10      	subs	r0, r2, r0
    ec54:	4107      	asrs	r7, r0
    ec56:	403b      	ands	r3, r7
    ec58:	e7e0      	b.n	ec1c <lv_font_get_bitmap_fmt_txt+0x3d4>
            bit_mask = 0x3;
    ec5a:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
    ec5c:	08c7      	lsrs	r7, r0, #3
    bit_pos = bit_pos & 0x7;
    ec5e:	2107      	movs	r1, #7
    ec60:	4001      	ands	r1, r0
    if(bit_pos + len >= 8) {
    ec62:	194a      	adds	r2, r1, r5
    ec64:	2a07      	cmp	r2, #7
    ec66:	d817      	bhi.n	ec98 <lv_font_get_bitmap_fmt_txt+0x450>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    ec68:	5df7      	ldrb	r7, [r6, r7]
    ec6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec6c:	1a51      	subs	r1, r2, r1
    ec6e:	410f      	asrs	r7, r1
    ec70:	403b      	ands	r3, r7
            rle_rdp += rle_bpp;
    ec72:	1940      	adds	r0, r0, r5
            rle_prev_v = ret;
    ec74:	9302      	str	r3, [sp, #8]
            rle_rdp += rle_bpp;
    ec76:	2201      	movs	r2, #1
    ec78:	9205      	str	r2, [sp, #20]
    ec7a:	9208      	str	r2, [sp, #32]
            rle_state = RLE_STATE_SINGLE;
    ec7c:	2700      	movs	r7, #0
            rle_rdp += rle_bpp;
    ec7e:	2101      	movs	r1, #1
    ec80:	9207      	str	r2, [sp, #28]
    ec82:	e6ce      	b.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
            bit_mask = 0x7;
    ec84:	2307      	movs	r3, #7
    ec86:	e7e9      	b.n	ec5c <lv_font_get_bitmap_fmt_txt+0x414>
            bit_mask = 0xF;
    ec88:	230f      	movs	r3, #15
    ec8a:	e7e7      	b.n	ec5c <lv_font_get_bitmap_fmt_txt+0x414>
            bit_mask = 0xFF;
    ec8c:	23ff      	movs	r3, #255	; 0xff
    ec8e:	e7e5      	b.n	ec5c <lv_font_get_bitmap_fmt_txt+0x414>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    ec90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec92:	e7e3      	b.n	ec5c <lv_font_get_bitmap_fmt_txt+0x414>
            bit_mask = 0x1;
    ec94:	2301      	movs	r3, #1
    ec96:	e7e1      	b.n	ec5c <lv_font_get_bitmap_fmt_txt+0x414>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ec98:	5df2      	ldrb	r2, [r6, r7]
    ec9a:	0212      	lsls	r2, r2, #8
    ec9c:	4694      	mov	ip, r2
    ec9e:	19f7      	adds	r7, r6, r7
    eca0:	787f      	ldrb	r7, [r7, #1]
    eca2:	4467      	add	r7, ip
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    eca4:	b2bf      	uxth	r7, r7
    eca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eca8:	1a51      	subs	r1, r2, r1
    ecaa:	410f      	asrs	r7, r1
    ecac:	403b      	ands	r3, r7
    ecae:	e7e0      	b.n	ec72 <lv_font_get_bitmap_fmt_txt+0x42a>
            ret = rle_prev_v;
    ecb0:	9b02      	ldr	r3, [sp, #8]
                if(rle_cnt != 0) {
    ecb2:	2201      	movs	r2, #1
    ecb4:	9205      	str	r2, [sp, #20]
    ecb6:	9208      	str	r2, [sp, #32]
                    rle_state = RLE_STATE_COUNTER;
    ecb8:	2702      	movs	r7, #2
                if(rle_cnt != 0) {
    ecba:	2101      	movs	r1, #1
    ecbc:	e6b1      	b.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
        ret = rle_prev_v;
    ecbe:	9b02      	ldr	r3, [sp, #8]
        if(rle_cnt == 0) {
    ecc0:	2201      	movs	r2, #1
    ecc2:	9205      	str	r2, [sp, #20]
    ecc4:	e6ad      	b.n	ea22 <lv_font_get_bitmap_fmt_txt+0x1da>
    ecc6:	9b04      	ldr	r3, [sp, #16]
    ecc8:	469a      	mov	sl, r3
    ecca:	4645      	mov	r5, r8
    eccc:	46bc      	mov	ip, r7
    ecce:	9b07      	ldr	r3, [sp, #28]
    ecd0:	2b00      	cmp	r3, #0
    ecd2:	d114      	bne.n	ecfe <lv_font_get_bitmap_fmt_txt+0x4b6>
    ecd4:	2900      	cmp	r1, #0
    ecd6:	d001      	beq.n	ecdc <lv_font_get_bitmap_fmt_txt+0x494>
    ecd8:	4bcc      	ldr	r3, [pc, #816]	; (f00c <lv_font_get_bitmap_fmt_txt+0x7c4>)
    ecda:	6018      	str	r0, [r3, #0]
    ecdc:	9b08      	ldr	r3, [sp, #32]
    ecde:	2b00      	cmp	r3, #0
    ece0:	d002      	beq.n	ece8 <lv_font_get_bitmap_fmt_txt+0x4a0>
    ece2:	4bcb      	ldr	r3, [pc, #812]	; (f010 <lv_font_get_bitmap_fmt_txt+0x7c8>)
    ece4:	4662      	mov	r2, ip
    ece6:	701a      	strb	r2, [r3, #0]
    ece8:	9b05      	ldr	r3, [sp, #20]
    ecea:	2b00      	cmp	r3, #0
    ecec:	d002      	beq.n	ecf4 <lv_font_get_bitmap_fmt_txt+0x4ac>
    ecee:	4bc9      	ldr	r3, [pc, #804]	; (f014 <lv_font_get_bitmap_fmt_txt+0x7cc>)
    ecf0:	4652      	mov	r2, sl
    ecf2:	701a      	strb	r2, [r3, #0]
            rle_rdp += rle_bpp;
    ecf4:	2600      	movs	r6, #0
    if(len == 3) {
    ecf6:	9b00      	ldr	r3, [sp, #0]
    ecf8:	9302      	str	r3, [sp, #8]
                val = 6;
    ecfa:	002f      	movs	r7, r5
    ecfc:	e023      	b.n	ed46 <lv_font_get_bitmap_fmt_txt+0x4fe>
    ecfe:	4bc6      	ldr	r3, [pc, #792]	; (f018 <lv_font_get_bitmap_fmt_txt+0x7d0>)
    ed00:	466a      	mov	r2, sp
    ed02:	7a12      	ldrb	r2, [r2, #8]
    ed04:	701a      	strb	r2, [r3, #0]
    ed06:	e7e5      	b.n	ecd4 <lv_font_get_bitmap_fmt_txt+0x48c>
        len = 4;
    ed08:	2304      	movs	r3, #4
                val = 0;
    ed0a:	2200      	movs	r2, #0
    bit_pos = bit_pos & 0x7;
    ed0c:	2107      	movs	r1, #7
    ed0e:	4031      	ands	r1, r6
    ed10:	2508      	movs	r5, #8
    ed12:	1a6d      	subs	r5, r5, r1
    bit_pos = 8 - bit_pos - len;
    ed14:	1aed      	subs	r5, r5, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    ed16:	0371      	lsls	r1, r6, #13
    ed18:	0c09      	lsrs	r1, r1, #16
    ed1a:	9803      	ldr	r0, [sp, #12]
    ed1c:	4684      	mov	ip, r0
    ed1e:	4461      	add	r1, ip
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    ed20:	2001      	movs	r0, #1
    ed22:	4098      	lsls	r0, r3
    ed24:	0003      	movs	r3, r0
    ed26:	3b01      	subs	r3, #1
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    ed28:	b2db      	uxtb	r3, r3
    ed2a:	43db      	mvns	r3, r3
    ed2c:	40ab      	lsls	r3, r5
    ed2e:	7808      	ldrb	r0, [r1, #0]
    ed30:	4003      	ands	r3, r0
    out[byte_pos] |= (val << bit_pos);
    ed32:	40aa      	lsls	r2, r5
    ed34:	431a      	orrs	r2, r3
    ed36:	700a      	strb	r2, [r1, #0]
        wrp += wr_size;
    ed38:	9a06      	ldr	r2, [sp, #24]
    ed3a:	0013      	movs	r3, r2
    ed3c:	4694      	mov	ip, r2
    ed3e:	4466      	add	r6, ip
    ed40:	3701      	adds	r7, #1
    for(x = 0; x < w; x++) {
    ed42:	42a7      	cmp	r7, r4
    ed44:	d021      	beq.n	ed8a <lv_font_get_bitmap_fmt_txt+0x542>
        bits_write(out, wrp, line_buf1[x], bpp);
    ed46:	783a      	ldrb	r2, [r7, #0]
    if(len == 3) {
    ed48:	9b02      	ldr	r3, [sp, #8]
    ed4a:	9900      	ldr	r1, [sp, #0]
    ed4c:	2903      	cmp	r1, #3
    ed4e:	d1dd      	bne.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        switch(val) {
    ed50:	2a07      	cmp	r2, #7
    ed52:	d818      	bhi.n	ed86 <lv_font_get_bitmap_fmt_txt+0x53e>
    ed54:	0092      	lsls	r2, r2, #2
    ed56:	4bb1      	ldr	r3, [pc, #708]	; (f01c <lv_font_get_bitmap_fmt_txt+0x7d4>)
    ed58:	589b      	ldr	r3, [r3, r2]
    ed5a:	469f      	mov	pc, r3
        len = 4;
    ed5c:	2304      	movs	r3, #4
                val = 2;
    ed5e:	2202      	movs	r2, #2
    ed60:	e7d4      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed62:	2304      	movs	r3, #4
                val = 4;
    ed64:	2204      	movs	r2, #4
    ed66:	e7d1      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed68:	2304      	movs	r3, #4
                val = 6;
    ed6a:	2206      	movs	r2, #6
    ed6c:	e7ce      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed6e:	2304      	movs	r3, #4
                val = 9;
    ed70:	2209      	movs	r2, #9
    ed72:	e7cb      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed74:	2304      	movs	r3, #4
                val = 11;
    ed76:	220b      	movs	r2, #11
    ed78:	e7c8      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed7a:	2304      	movs	r3, #4
                val = 13;
    ed7c:	220d      	movs	r2, #13
    ed7e:	e7c5      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed80:	2304      	movs	r3, #4
                val = 15;
    ed82:	220f      	movs	r2, #15
    ed84:	e7c2      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
        len = 4;
    ed86:	2304      	movs	r3, #4
    ed88:	e7c0      	b.n	ed0c <lv_font_get_bitmap_fmt_txt+0x4c4>
    ed8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ed8c:	435a      	muls	r2, r3
    ed8e:	920f      	str	r2, [sp, #60]	; 0x3c
    for(y = 1; y < h; y++) {
    ed90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed92:	2b01      	cmp	r3, #1
    ed94:	dc00      	bgt.n	ed98 <lv_font_get_bitmap_fmt_txt+0x550>
    ed96:	e234      	b.n	f202 <lv_font_get_bitmap_fmt_txt+0x9ba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
    ed98:	4ba1      	ldr	r3, [pc, #644]	; (f020 <lv_font_get_bitmap_fmt_txt+0x7d8>)
    ed9a:	681b      	ldr	r3, [r3, #0]
    ed9c:	001e      	movs	r6, r3
    ed9e:	4ba1      	ldr	r3, [pc, #644]	; (f024 <lv_font_get_bitmap_fmt_txt+0x7dc>)
    eda0:	781b      	ldrb	r3, [r3, #0]
    eda2:	001a      	movs	r2, r3
    eda4:	9309      	str	r3, [sp, #36]	; 0x24
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    eda6:	2301      	movs	r3, #1
    eda8:	4093      	lsls	r3, r2
    edaa:	3b01      	subs	r3, #1
    edac:	b2db      	uxtb	r3, r3
    edae:	9312      	str	r3, [sp, #72]	; 0x48
    if(bit_pos + len >= 8) {
    edb0:	4692      	mov	sl, r2
    edb2:	4b98      	ldr	r3, [pc, #608]	; (f014 <lv_font_get_bitmap_fmt_txt+0x7cc>)
    edb4:	781b      	ldrb	r3, [r3, #0]
    edb6:	4698      	mov	r8, r3
    edb8:	2308      	movs	r3, #8
    edba:	1a9b      	subs	r3, r3, r2
    edbc:	930c      	str	r3, [sp, #48]	; 0x30
    edbe:	2310      	movs	r3, #16
    edc0:	1a9b      	subs	r3, r3, r2
    edc2:	930e      	str	r3, [sp, #56]	; 0x38
    edc4:	4b94      	ldr	r3, [pc, #592]	; (f018 <lv_font_get_bitmap_fmt_txt+0x7d0>)
    edc6:	781b      	ldrb	r3, [r3, #0]
    edc8:	9302      	str	r3, [sp, #8]
    edca:	4b90      	ldr	r3, [pc, #576]	; (f00c <lv_font_get_bitmap_fmt_txt+0x7c4>)
    edcc:	6818      	ldr	r0, [r3, #0]
    edce:	4b90      	ldr	r3, [pc, #576]	; (f010 <lv_font_get_bitmap_fmt_txt+0x7c8>)
    edd0:	7819      	ldrb	r1, [r3, #0]
    edd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    edd4:	3b02      	subs	r3, #2
    edd6:	b29b      	uxth	r3, r3
    edd8:	3301      	adds	r3, #1
    edda:	9313      	str	r3, [sp, #76]	; 0x4c
    eddc:	9c06      	ldr	r4, [sp, #24]
    edde:	9404      	str	r4, [sp, #16]
    ede0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ede2:	3b01      	subs	r3, #1
    ede4:	b29b      	uxth	r3, r3
    ede6:	001d      	movs	r5, r3
    ede8:	9314      	str	r3, [sp, #80]	; 0x50
    edea:	0023      	movs	r3, r4
    edec:	436b      	muls	r3, r5
    edee:	9315      	str	r3, [sp, #84]	; 0x54
    edf0:	2300      	movs	r3, #0
    edf2:	9310      	str	r3, [sp, #64]	; 0x40
    edf4:	930b      	str	r3, [sp, #44]	; 0x2c
    edf6:	930d      	str	r3, [sp, #52]	; 0x34
    edf8:	9307      	str	r3, [sp, #28]
    edfa:	9308      	str	r3, [sp, #32]
    switch(len) {
    edfc:	0093      	lsls	r3, r2, #2
    edfe:	930a      	str	r3, [sp, #40]	; 0x28
    ee00:	4a89      	ldr	r2, [pc, #548]	; (f028 <lv_font_get_bitmap_fmt_txt+0x7e0>)
    ee02:	469c      	mov	ip, r3
    ee04:	4462      	add	r2, ip
    ee06:	9216      	str	r2, [sp, #88]	; 0x58
    ee08:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ee0a:	469b      	mov	fp, r3
    ee0c:	4643      	mov	r3, r8
    ee0e:	9306      	str	r3, [sp, #24]
    ee10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee12:	001d      	movs	r5, r3
    ee14:	468c      	mov	ip, r1
    ee16:	46b1      	mov	r9, r6
    ee18:	e1cf      	b.n	f1ba <lv_font_get_bitmap_fmt_txt+0x972>
    for(i = 0; i < w; i++) {
    ee1a:	2300      	movs	r3, #0
    ee1c:	930f      	str	r3, [sp, #60]	; 0x3c
    ee1e:	e7b7      	b.n	ed90 <lv_font_get_bitmap_fmt_txt+0x548>
            bit_mask = 0x3;
    ee20:	2303      	movs	r3, #3
    ee22:	e008      	b.n	ee36 <lv_font_get_bitmap_fmt_txt+0x5ee>
            bit_mask = 0x7;
    ee24:	2307      	movs	r3, #7
    ee26:	e006      	b.n	ee36 <lv_font_get_bitmap_fmt_txt+0x5ee>
            bit_mask = 0xF;
    ee28:	230f      	movs	r3, #15
    ee2a:	e004      	b.n	ee36 <lv_font_get_bitmap_fmt_txt+0x5ee>
            bit_mask = 0xFF;
    ee2c:	23ff      	movs	r3, #255	; 0xff
    ee2e:	e002      	b.n	ee36 <lv_font_get_bitmap_fmt_txt+0x5ee>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    ee30:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ee32:	e000      	b.n	ee36 <lv_font_get_bitmap_fmt_txt+0x5ee>
            bit_mask = 0x1;
    ee34:	2301      	movs	r3, #1
    uint32_t byte_pos = bit_pos >> 3;
    ee36:	08c5      	lsrs	r5, r0, #3
    bit_pos = bit_pos & 0x7;
    ee38:	2207      	movs	r2, #7
    ee3a:	4002      	ands	r2, r0
    if(bit_pos + len >= 8) {
    ee3c:	1997      	adds	r7, r2, r6
    ee3e:	2f07      	cmp	r7, #7
    ee40:	d81f      	bhi.n	ee82 <lv_font_get_bitmap_fmt_txt+0x63a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    ee42:	464f      	mov	r7, r9
    ee44:	5d7d      	ldrb	r5, [r7, r5]
    ee46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    ee48:	1aba      	subs	r2, r7, r2
    ee4a:	4115      	asrs	r5, r2
    ee4c:	402b      	ands	r3, r5
    ee4e:	b2db      	uxtb	r3, r3
        if(rle_rdp != 0 && rle_prev_v == ret) {
    ee50:	2800      	cmp	r0, #0
    ee52:	d002      	beq.n	ee5a <lv_font_get_bitmap_fmt_txt+0x612>
    ee54:	9a02      	ldr	r2, [sp, #8]
    ee56:	429a      	cmp	r2, r3
    ee58:	d021      	beq.n	ee9e <lv_font_get_bitmap_fmt_txt+0x656>
        rle_rdp += rle_bpp;
    ee5a:	1980      	adds	r0, r0, r6
        rle_prev_v = ret;
    ee5c:	9302      	str	r3, [sp, #8]
        rle_rdp += rle_bpp;
    ee5e:	2201      	movs	r2, #1
    ee60:	9207      	str	r2, [sp, #28]
    ee62:	9208      	str	r2, [sp, #32]
        out[i] = rle_next();
    ee64:	7023      	strb	r3, [r4, #0]
    ee66:	3401      	adds	r4, #1
    for(i = 0; i < w; i++) {
    ee68:	4564      	cmp	r4, ip
    ee6a:	d100      	bne.n	ee6e <lv_font_get_bitmap_fmt_txt+0x626>
    ee6c:	e141      	b.n	f0f2 <lv_font_get_bitmap_fmt_txt+0x8aa>
    if(rle_state == RLE_STATE_SINGLE) {
    ee6e:	2900      	cmp	r1, #0
    ee70:	d11d      	bne.n	eeae <lv_font_get_bitmap_fmt_txt+0x666>
    switch(len) {
    ee72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee74:	2b08      	cmp	r3, #8
    ee76:	d8db      	bhi.n	ee30 <lv_font_get_bitmap_fmt_txt+0x5e8>
    ee78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee7a:	4a6c      	ldr	r2, [pc, #432]	; (f02c <lv_font_get_bitmap_fmt_txt+0x7e4>)
    ee7c:	58d3      	ldr	r3, [r2, r3]
    ee7e:	9305      	str	r3, [sp, #20]
    ee80:	469f      	mov	pc, r3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ee82:	464f      	mov	r7, r9
    ee84:	5d7f      	ldrb	r7, [r7, r5]
    ee86:	023f      	lsls	r7, r7, #8
    ee88:	46ba      	mov	sl, r7
    ee8a:	444d      	add	r5, r9
    ee8c:	786d      	ldrb	r5, [r5, #1]
    ee8e:	4455      	add	r5, sl
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    ee90:	b2ad      	uxth	r5, r5
    ee92:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ee94:	1aba      	subs	r2, r7, r2
    ee96:	4115      	asrs	r5, r2
    ee98:	402b      	ands	r3, r5
    ee9a:	b2db      	uxtb	r3, r3
    ee9c:	e7d8      	b.n	ee50 <lv_font_get_bitmap_fmt_txt+0x608>
        if(rle_rdp != 0 && rle_prev_v == ret) {
    ee9e:	2201      	movs	r2, #1
    eea0:	920b      	str	r2, [sp, #44]	; 0x2c
            rle_cnt = 0;
    eea2:	2200      	movs	r2, #0
    eea4:	9206      	str	r2, [sp, #24]
        if(rle_rdp != 0 && rle_prev_v == ret) {
    eea6:	3201      	adds	r2, #1
    eea8:	920d      	str	r2, [sp, #52]	; 0x34
            rle_state = RLE_STATE_REPEATE;
    eeaa:	2101      	movs	r1, #1
    eeac:	e7d5      	b.n	ee5a <lv_font_get_bitmap_fmt_txt+0x612>
    else if(rle_state == RLE_STATE_REPEATE) {
    eeae:	2901      	cmp	r1, #1
    eeb0:	d011      	beq.n	eed6 <lv_font_get_bitmap_fmt_txt+0x68e>
    uint8_t ret = 0;
    eeb2:	2300      	movs	r3, #0
    else if(rle_state == RLE_STATE_COUNTER) {
    eeb4:	2902      	cmp	r1, #2
    eeb6:	d1d5      	bne.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
        rle_cnt--;
    eeb8:	9b06      	ldr	r3, [sp, #24]
    eeba:	3b01      	subs	r3, #1
    eebc:	b2db      	uxtb	r3, r3
    eebe:	9306      	str	r3, [sp, #24]
        if(rle_cnt == 0) {
    eec0:	2b00      	cmp	r3, #0
    eec2:	d000      	beq.n	eec6 <lv_font_get_bitmap_fmt_txt+0x67e>
    eec4:	e111      	b.n	f0ea <lv_font_get_bitmap_fmt_txt+0x8a2>
    switch(len) {
    eec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eec8:	2b08      	cmp	r3, #8
    eeca:	d900      	bls.n	eece <lv_font_get_bitmap_fmt_txt+0x686>
    eecc:	e0e0      	b.n	f090 <lv_font_get_bitmap_fmt_txt+0x848>
    eece:	9b16      	ldr	r3, [sp, #88]	; 0x58
    eed0:	681b      	ldr	r3, [r3, #0]
    eed2:	9302      	str	r3, [sp, #8]
    eed4:	469f      	mov	pc, r3
    uint32_t byte_pos = bit_pos >> 3;
    eed6:	08c3      	lsrs	r3, r0, #3
    bit_pos = bit_pos & 0x7;
    eed8:	2207      	movs	r2, #7
    eeda:	4002      	ands	r2, r0
    if(bit_pos + len >= 8) {
    eedc:	1c55      	adds	r5, r2, #1
    eede:	2d07      	cmp	r5, #7
    eee0:	d816      	bhi.n	ef10 <lv_font_get_bitmap_fmt_txt+0x6c8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    eee2:	464d      	mov	r5, r9
    eee4:	5ceb      	ldrb	r3, [r5, r3]
    eee6:	43d2      	mvns	r2, r2
    eee8:	3208      	adds	r2, #8
    eeea:	4113      	asrs	r3, r2
    eeec:	2201      	movs	r2, #1
    eeee:	4013      	ands	r3, r2
        rle_cnt++;
    eef0:	9a06      	ldr	r2, [sp, #24]
    eef2:	3201      	adds	r2, #1
    eef4:	b2d2      	uxtb	r2, r2
    eef6:	9206      	str	r2, [sp, #24]
        rle_rdp += 1;
    eef8:	1c45      	adds	r5, r0, #1
        if(v == 1) {
    eefa:	2b01      	cmp	r3, #1
    eefc:	d015      	beq.n	ef2a <lv_font_get_bitmap_fmt_txt+0x6e2>
    switch(len) {
    eefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef00:	2b08      	cmp	r3, #8
    ef02:	d900      	bls.n	ef06 <lv_font_get_bitmap_fmt_txt+0x6be>
    ef04:	e080      	b.n	f008 <lv_font_get_bitmap_fmt_txt+0x7c0>
    ef06:	4b4a      	ldr	r3, [pc, #296]	; (f030 <lv_font_get_bitmap_fmt_txt+0x7e8>)
    ef08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ef0a:	589b      	ldr	r3, [r3, r2]
    ef0c:	9302      	str	r3, [sp, #8]
    ef0e:	469f      	mov	pc, r3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ef10:	464d      	mov	r5, r9
    ef12:	5ced      	ldrb	r5, [r5, r3]
    ef14:	022d      	lsls	r5, r5, #8
    ef16:	444b      	add	r3, r9
    ef18:	785b      	ldrb	r3, [r3, #1]
    ef1a:	195b      	adds	r3, r3, r5
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    ef1c:	b29b      	uxth	r3, r3
    ef1e:	43d2      	mvns	r2, r2
    ef20:	3210      	adds	r2, #16
    ef22:	4113      	asrs	r3, r2
    ef24:	2201      	movs	r2, #1
    ef26:	4013      	ands	r3, r2
    ef28:	e7e2      	b.n	eef0 <lv_font_get_bitmap_fmt_txt+0x6a8>
            if(rle_cnt == 11) {
    ef2a:	2a0b      	cmp	r2, #11
    ef2c:	d005      	beq.n	ef3a <lv_font_get_bitmap_fmt_txt+0x6f2>
        rle_rdp += 1;
    ef2e:	0028      	movs	r0, r5
            ret = rle_prev_v;
    ef30:	9b02      	ldr	r3, [sp, #8]
            if(rle_cnt == 11) {
    ef32:	2201      	movs	r2, #1
    ef34:	920b      	str	r2, [sp, #44]	; 0x2c
    ef36:	9207      	str	r2, [sp, #28]
    ef38:	e794      	b.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
    uint32_t byte_pos = bit_pos >> 3;
    ef3a:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
    ef3c:	2207      	movs	r2, #7
    ef3e:	4015      	ands	r5, r2
    if(bit_pos + len >= 8) {
    ef40:	1daa      	adds	r2, r5, #6
    ef42:	2a07      	cmp	r2, #7
    ef44:	d814      	bhi.n	ef70 <lv_font_get_bitmap_fmt_txt+0x728>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    ef46:	464a      	mov	r2, r9
    ef48:	5cd3      	ldrb	r3, [r2, r3]
    ef4a:	2202      	movs	r2, #2
    ef4c:	1b55      	subs	r5, r2, r5
    ef4e:	412b      	asrs	r3, r5
    ef50:	323d      	adds	r2, #61	; 0x3d
    ef52:	401a      	ands	r2, r3
    ef54:	9206      	str	r2, [sp, #24]
                rle_rdp += 6;
    ef56:	3007      	adds	r0, #7
                if(rle_cnt != 0) {
    ef58:	9b06      	ldr	r3, [sp, #24]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	d000      	beq.n	ef60 <lv_font_get_bitmap_fmt_txt+0x718>
    ef5e:	e0bd      	b.n	f0dc <lv_font_get_bitmap_fmt_txt+0x894>
    switch(len) {
    ef60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef62:	2b08      	cmp	r3, #8
    ef64:	d834      	bhi.n	efd0 <lv_font_get_bitmap_fmt_txt+0x788>
    ef66:	4b33      	ldr	r3, [pc, #204]	; (f034 <lv_font_get_bitmap_fmt_txt+0x7ec>)
    ef68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ef6a:	589b      	ldr	r3, [r3, r2]
    ef6c:	9302      	str	r3, [sp, #8]
    ef6e:	469f      	mov	pc, r3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    ef70:	464a      	mov	r2, r9
    ef72:	5cd2      	ldrb	r2, [r2, r3]
    ef74:	0212      	lsls	r2, r2, #8
    ef76:	444b      	add	r3, r9
    ef78:	785b      	ldrb	r3, [r3, #1]
    ef7a:	189b      	adds	r3, r3, r2
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    ef7c:	b29b      	uxth	r3, r3
    ef7e:	220a      	movs	r2, #10
    ef80:	1b55      	subs	r5, r2, r5
    ef82:	412b      	asrs	r3, r5
    ef84:	3235      	adds	r2, #53	; 0x35
    ef86:	401a      	ands	r2, r3
    ef88:	9206      	str	r2, [sp, #24]
    ef8a:	e7e4      	b.n	ef56 <lv_font_get_bitmap_fmt_txt+0x70e>
            bit_mask = 0x3;
    ef8c:	2303      	movs	r3, #3
    ef8e:	469a      	mov	sl, r3
    uint32_t byte_pos = bit_pos >> 3;
    ef90:	08c5      	lsrs	r5, r0, #3
    bit_pos = bit_pos & 0x7;
    ef92:	2307      	movs	r3, #7
    ef94:	4003      	ands	r3, r0
    if(bit_pos + len >= 8) {
    ef96:	199a      	adds	r2, r3, r6
    ef98:	2a07      	cmp	r2, #7
    ef9a:	d81f      	bhi.n	efdc <lv_font_get_bitmap_fmt_txt+0x794>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    ef9c:	464a      	mov	r2, r9
    ef9e:	5d52      	ldrb	r2, [r2, r5]
    efa0:	990c      	ldr	r1, [sp, #48]	; 0x30
    efa2:	1acb      	subs	r3, r1, r3
    efa4:	411a      	asrs	r2, r3
    efa6:	4653      	mov	r3, sl
    efa8:	4013      	ands	r3, r2
    efaa:	b2db      	uxtb	r3, r3
                    rle_rdp += rle_bpp;
    efac:	1980      	adds	r0, r0, r6
                    rle_prev_v = ret;
    efae:	9302      	str	r3, [sp, #8]
                    rle_rdp += rle_bpp;
    efb0:	2201      	movs	r2, #1
    efb2:	920b      	str	r2, [sp, #44]	; 0x2c
    efb4:	920d      	str	r2, [sp, #52]	; 0x34
                    rle_state = RLE_STATE_SINGLE;
    efb6:	2100      	movs	r1, #0
                    rle_rdp += rle_bpp;
    efb8:	9207      	str	r2, [sp, #28]
    efba:	9208      	str	r2, [sp, #32]
    efbc:	e752      	b.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
            bit_mask = 0x7;
    efbe:	2307      	movs	r3, #7
    efc0:	469a      	mov	sl, r3
    efc2:	e7e5      	b.n	ef90 <lv_font_get_bitmap_fmt_txt+0x748>
            bit_mask = 0xF;
    efc4:	230f      	movs	r3, #15
    efc6:	469a      	mov	sl, r3
    efc8:	e7e2      	b.n	ef90 <lv_font_get_bitmap_fmt_txt+0x748>
            bit_mask = 0xFF;
    efca:	23ff      	movs	r3, #255	; 0xff
    efcc:	469a      	mov	sl, r3
    efce:	e7df      	b.n	ef90 <lv_font_get_bitmap_fmt_txt+0x748>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    efd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    efd2:	469a      	mov	sl, r3
    efd4:	e7dc      	b.n	ef90 <lv_font_get_bitmap_fmt_txt+0x748>
            bit_mask = 0x1;
    efd6:	2301      	movs	r3, #1
    efd8:	469a      	mov	sl, r3
    efda:	e7d9      	b.n	ef90 <lv_font_get_bitmap_fmt_txt+0x748>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    efdc:	464a      	mov	r2, r9
    efde:	5d51      	ldrb	r1, [r2, r5]
    efe0:	0209      	lsls	r1, r1, #8
    efe2:	444d      	add	r5, r9
    efe4:	786a      	ldrb	r2, [r5, #1]
    efe6:	1852      	adds	r2, r2, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    efe8:	b292      	uxth	r2, r2
    efea:	990e      	ldr	r1, [sp, #56]	; 0x38
    efec:	1acb      	subs	r3, r1, r3
    efee:	411a      	asrs	r2, r3
    eff0:	4653      	mov	r3, sl
    eff2:	4013      	ands	r3, r2
    eff4:	b2db      	uxtb	r3, r3
    eff6:	e7d9      	b.n	efac <lv_font_get_bitmap_fmt_txt+0x764>
            bit_mask = 0x3;
    eff8:	2303      	movs	r3, #3
    effa:	e01e      	b.n	f03a <lv_font_get_bitmap_fmt_txt+0x7f2>
            bit_mask = 0x7;
    effc:	2307      	movs	r3, #7
    effe:	e01c      	b.n	f03a <lv_font_get_bitmap_fmt_txt+0x7f2>
            bit_mask = 0xF;
    f000:	230f      	movs	r3, #15
    f002:	e01a      	b.n	f03a <lv_font_get_bitmap_fmt_txt+0x7f2>
            bit_mask = 0xFF;
    f004:	23ff      	movs	r3, #255	; 0xff
    f006:	e018      	b.n	f03a <lv_font_get_bitmap_fmt_txt+0x7f2>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f008:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f00a:	e016      	b.n	f03a <lv_font_get_bitmap_fmt_txt+0x7f2>
    f00c:	20002bc8 	.word	0x20002bc8
    f010:	20002bcc 	.word	0x20002bcc
    f014:	20002bbd 	.word	0x20002bbd
    f018:	20002bc4 	.word	0x20002bc4
    f01c:	00018ad0 	.word	0x00018ad0
    f020:	20002bc0 	.word	0x20002bc0
    f024:	20002bbc 	.word	0x20002bbc
    f028:	00018b14 	.word	0x00018b14
    f02c:	00018af0 	.word	0x00018af0
    f030:	00018b38 	.word	0x00018b38
    f034:	00018b5c 	.word	0x00018b5c
            bit_mask = 0x1;
    f038:	2301      	movs	r3, #1
    uint32_t byte_pos = bit_pos >> 3;
    f03a:	08e9      	lsrs	r1, r5, #3
    bit_pos = bit_pos & 0x7;
    f03c:	2207      	movs	r2, #7
    f03e:	402a      	ands	r2, r5
    if(bit_pos + len >= 8) {
    f040:	1990      	adds	r0, r2, r6
    f042:	2807      	cmp	r0, #7
    f044:	d80f      	bhi.n	f066 <lv_font_get_bitmap_fmt_txt+0x81e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f046:	4648      	mov	r0, r9
    f048:	5c41      	ldrb	r1, [r0, r1]
    f04a:	980c      	ldr	r0, [sp, #48]	; 0x30
    f04c:	1a82      	subs	r2, r0, r2
    f04e:	4111      	asrs	r1, r2
    f050:	400b      	ands	r3, r1
    f052:	b2db      	uxtb	r3, r3
            rle_rdp += rle_bpp;
    f054:	19a8      	adds	r0, r5, r6
            rle_prev_v = ret;
    f056:	9302      	str	r3, [sp, #8]
            rle_rdp += rle_bpp;
    f058:	2201      	movs	r2, #1
    f05a:	920b      	str	r2, [sp, #44]	; 0x2c
    f05c:	920d      	str	r2, [sp, #52]	; 0x34
            rle_state = RLE_STATE_SINGLE;
    f05e:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
    f060:	9207      	str	r2, [sp, #28]
    f062:	9208      	str	r2, [sp, #32]
    f064:	e6fe      	b.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f066:	4648      	mov	r0, r9
    f068:	5c40      	ldrb	r0, [r0, r1]
    f06a:	0200      	lsls	r0, r0, #8
    f06c:	4449      	add	r1, r9
    f06e:	7849      	ldrb	r1, [r1, #1]
    f070:	1809      	adds	r1, r1, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f072:	b289      	uxth	r1, r1
    f074:	980e      	ldr	r0, [sp, #56]	; 0x38
    f076:	1a82      	subs	r2, r0, r2
    f078:	4111      	asrs	r1, r2
    f07a:	400b      	ands	r3, r1
    f07c:	b2db      	uxtb	r3, r3
    f07e:	e7e9      	b.n	f054 <lv_font_get_bitmap_fmt_txt+0x80c>
            bit_mask = 0x3;
    f080:	2303      	movs	r3, #3
    f082:	e008      	b.n	f096 <lv_font_get_bitmap_fmt_txt+0x84e>
            bit_mask = 0x7;
    f084:	2307      	movs	r3, #7
    f086:	e006      	b.n	f096 <lv_font_get_bitmap_fmt_txt+0x84e>
            bit_mask = 0xF;
    f088:	230f      	movs	r3, #15
    f08a:	e004      	b.n	f096 <lv_font_get_bitmap_fmt_txt+0x84e>
            bit_mask = 0xFF;
    f08c:	23ff      	movs	r3, #255	; 0xff
    f08e:	e002      	b.n	f096 <lv_font_get_bitmap_fmt_txt+0x84e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f090:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f092:	e000      	b.n	f096 <lv_font_get_bitmap_fmt_txt+0x84e>
            bit_mask = 0x1;
    f094:	2301      	movs	r3, #1
    uint32_t byte_pos = bit_pos >> 3;
    f096:	08c1      	lsrs	r1, r0, #3
    bit_pos = bit_pos & 0x7;
    f098:	2207      	movs	r2, #7
    f09a:	4002      	ands	r2, r0
    if(bit_pos + len >= 8) {
    f09c:	1995      	adds	r5, r2, r6
    f09e:	2d07      	cmp	r5, #7
    f0a0:	d80f      	bhi.n	f0c2 <lv_font_get_bitmap_fmt_txt+0x87a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
    f0a2:	464d      	mov	r5, r9
    f0a4:	5c69      	ldrb	r1, [r5, r1]
    f0a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    f0a8:	1aaa      	subs	r2, r5, r2
    f0aa:	4111      	asrs	r1, r2
    f0ac:	400b      	ands	r3, r1
    f0ae:	b2db      	uxtb	r3, r3
            rle_rdp += rle_bpp;
    f0b0:	1980      	adds	r0, r0, r6
            rle_prev_v = ret;
    f0b2:	9302      	str	r3, [sp, #8]
            rle_rdp += rle_bpp;
    f0b4:	2201      	movs	r2, #1
    f0b6:	920b      	str	r2, [sp, #44]	; 0x2c
    f0b8:	920d      	str	r2, [sp, #52]	; 0x34
            rle_state = RLE_STATE_SINGLE;
    f0ba:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
    f0bc:	9207      	str	r2, [sp, #28]
    f0be:	9208      	str	r2, [sp, #32]
    f0c0:	e6d0      	b.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
    f0c2:	464d      	mov	r5, r9
    f0c4:	5c6d      	ldrb	r5, [r5, r1]
    f0c6:	022d      	lsls	r5, r5, #8
    f0c8:	4449      	add	r1, r9
    f0ca:	7849      	ldrb	r1, [r1, #1]
    f0cc:	1949      	adds	r1, r1, r5
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
    f0ce:	b289      	uxth	r1, r1
    f0d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f0d2:	1aaa      	subs	r2, r5, r2
    f0d4:	4111      	asrs	r1, r2
    f0d6:	400b      	ands	r3, r1
    f0d8:	b2db      	uxtb	r3, r3
    f0da:	e7e9      	b.n	f0b0 <lv_font_get_bitmap_fmt_txt+0x868>
            ret = rle_prev_v;
    f0dc:	9b02      	ldr	r3, [sp, #8]
                if(rle_cnt != 0) {
    f0de:	2201      	movs	r2, #1
    f0e0:	920b      	str	r2, [sp, #44]	; 0x2c
    f0e2:	920d      	str	r2, [sp, #52]	; 0x34
                    rle_state = RLE_STATE_COUNTER;
    f0e4:	2102      	movs	r1, #2
                if(rle_cnt != 0) {
    f0e6:	9207      	str	r2, [sp, #28]
    f0e8:	e6bc      	b.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
        ret = rle_prev_v;
    f0ea:	9b02      	ldr	r3, [sp, #8]
        if(rle_cnt == 0) {
    f0ec:	2201      	movs	r2, #1
    f0ee:	920b      	str	r2, [sp, #44]	; 0x2c
    f0f0:	e6b8      	b.n	ee64 <lv_font_get_bitmap_fmt_txt+0x61c>
    f0f2:	468c      	mov	ip, r1
    f0f4:	46b2      	mov	sl, r6
    for(i = 0; i < w; i++) {
    f0f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f0f8:	2700      	movs	r7, #0
    if(len == 3) {
    f0fa:	9b00      	ldr	r3, [sp, #0]
    f0fc:	9305      	str	r3, [sp, #20]
                val = 6;
    f0fe:	0003      	movs	r3, r0
    f100:	4640      	mov	r0, r8
    f102:	4662      	mov	r2, ip
    f104:	9211      	str	r2, [sp, #68]	; 0x44
    f106:	4698      	mov	r8, r3
    f108:	e01e      	b.n	f148 <lv_font_get_bitmap_fmt_txt+0x900>
        len = 4;
    f10a:	2304      	movs	r3, #4
                val = 0;
    f10c:	2400      	movs	r4, #0
    bit_pos = bit_pos & 0x7;
    f10e:	2207      	movs	r2, #7
    f110:	400a      	ands	r2, r1
    f112:	2608      	movs	r6, #8
    f114:	1ab6      	subs	r6, r6, r2
    bit_pos = 8 - bit_pos - len;
    f116:	1af6      	subs	r6, r6, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    f118:	034d      	lsls	r5, r1, #13
    f11a:	0c2d      	lsrs	r5, r5, #16
    f11c:	9a03      	ldr	r2, [sp, #12]
    f11e:	4694      	mov	ip, r2
    f120:	4465      	add	r5, ip
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
    f122:	2201      	movs	r2, #1
    f124:	409a      	lsls	r2, r3
    f126:	0013      	movs	r3, r2
    f128:	3b01      	subs	r3, #1
    out[byte_pos] &= ((~bit_mask) << bit_pos);
    f12a:	b2db      	uxtb	r3, r3
    f12c:	43db      	mvns	r3, r3
    f12e:	40b3      	lsls	r3, r6
    f130:	782a      	ldrb	r2, [r5, #0]
    f132:	4013      	ands	r3, r2
    out[byte_pos] |= (val << bit_pos);
    f134:	40b4      	lsls	r4, r6
    f136:	4323      	orrs	r3, r4
    f138:	702b      	strb	r3, [r5, #0]
    f13a:	9b04      	ldr	r3, [sp, #16]
    f13c:	469c      	mov	ip, r3
    f13e:	4461      	add	r1, ip
    f140:	3701      	adds	r7, #1
        for(x = 0; x < w; x++) {
    f142:	b23b      	sxth	r3, r7
    f144:	459b      	cmp	fp, r3
    f146:	dd25      	ble.n	f194 <lv_font_get_bitmap_fmt_txt+0x94c>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
    f148:	9b01      	ldr	r3, [sp, #4]
    f14a:	5ddc      	ldrb	r4, [r3, r7]
    f14c:	5dc3      	ldrb	r3, [r0, r7]
    f14e:	405c      	eors	r4, r3
    f150:	55c4      	strb	r4, [r0, r7]
    if(len == 3) {
    f152:	9b05      	ldr	r3, [sp, #20]
    f154:	9a00      	ldr	r2, [sp, #0]
    f156:	2a03      	cmp	r2, #3
    f158:	d1d9      	bne.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        switch(val) {
    f15a:	2c07      	cmp	r4, #7
    f15c:	d818      	bhi.n	f190 <lv_font_get_bitmap_fmt_txt+0x948>
    f15e:	00a4      	lsls	r4, r4, #2
    f160:	4b35      	ldr	r3, [pc, #212]	; (f238 <lv_font_get_bitmap_fmt_txt+0x9f0>)
    f162:	591b      	ldr	r3, [r3, r4]
    f164:	469f      	mov	pc, r3
        len = 4;
    f166:	2304      	movs	r3, #4
                val = 2;
    f168:	2402      	movs	r4, #2
    f16a:	e7d0      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f16c:	2304      	movs	r3, #4
                val = 4;
    f16e:	2404      	movs	r4, #4
    f170:	e7cd      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f172:	2304      	movs	r3, #4
                val = 6;
    f174:	2406      	movs	r4, #6
    f176:	e7ca      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f178:	2304      	movs	r3, #4
                val = 9;
    f17a:	2409      	movs	r4, #9
    f17c:	e7c7      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f17e:	2304      	movs	r3, #4
                val = 11;
    f180:	240b      	movs	r4, #11
    f182:	e7c4      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f184:	2304      	movs	r3, #4
                val = 13;
    f186:	240d      	movs	r4, #13
    f188:	e7c1      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f18a:	2304      	movs	r3, #4
                val = 15;
    f18c:	240f      	movs	r4, #15
    f18e:	e7be      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
        len = 4;
    f190:	2304      	movs	r3, #4
    f192:	e7bc      	b.n	f10e <lv_font_get_bitmap_fmt_txt+0x8c6>
    f194:	0005      	movs	r5, r0
    f196:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f198:	4694      	mov	ip, r2
    f19a:	4640      	mov	r0, r8
    f19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f19e:	9a04      	ldr	r2, [sp, #16]
    f1a0:	4690      	mov	r8, r2
    f1a2:	4443      	add	r3, r8
    f1a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f1a6:	4690      	mov	r8, r2
    f1a8:	4498      	add	r8, r3
    f1aa:	4643      	mov	r3, r8
    f1ac:	930f      	str	r3, [sp, #60]	; 0x3c
    f1ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f1b0:	3301      	adds	r3, #1
    f1b2:	9310      	str	r3, [sp, #64]	; 0x40
    for(y = 1; y < h; y++) {
    f1b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f1b6:	4293      	cmp	r3, r2
    f1b8:	d00d      	beq.n	f1d6 <lv_font_get_bitmap_fmt_txt+0x98e>
    for(i = 0; i < w; i++) {
    f1ba:	465b      	mov	r3, fp
    f1bc:	2b00      	cmp	r3, #0
    f1be:	ddf6      	ble.n	f1ae <lv_font_get_bitmap_fmt_txt+0x966>
    f1c0:	9b01      	ldr	r3, [sp, #4]
    f1c2:	4698      	mov	r8, r3
    f1c4:	001c      	movs	r4, r3
    f1c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f1c8:	1c5e      	adds	r6, r3, #1
    f1ca:	4446      	add	r6, r8
    f1cc:	46a8      	mov	r8, r5
    f1ce:	4661      	mov	r1, ip
    f1d0:	46b4      	mov	ip, r6
    f1d2:	4656      	mov	r6, sl
    f1d4:	e64b      	b.n	ee6e <lv_font_get_bitmap_fmt_txt+0x626>
    f1d6:	9b06      	ldr	r3, [sp, #24]
    f1d8:	4698      	mov	r8, r3
    f1da:	4661      	mov	r1, ip
    f1dc:	9b08      	ldr	r3, [sp, #32]
    f1de:	2b00      	cmp	r3, #0
    f1e0:	d118      	bne.n	f214 <lv_font_get_bitmap_fmt_txt+0x9cc>
    f1e2:	9b07      	ldr	r3, [sp, #28]
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d001      	beq.n	f1ec <lv_font_get_bitmap_fmt_txt+0x9a4>
    f1e8:	4b14      	ldr	r3, [pc, #80]	; (f23c <lv_font_get_bitmap_fmt_txt+0x9f4>)
    f1ea:	6018      	str	r0, [r3, #0]
    f1ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1ee:	2b00      	cmp	r3, #0
    f1f0:	d001      	beq.n	f1f6 <lv_font_get_bitmap_fmt_txt+0x9ae>
    f1f2:	4b13      	ldr	r3, [pc, #76]	; (f240 <lv_font_get_bitmap_fmt_txt+0x9f8>)
    f1f4:	7019      	strb	r1, [r3, #0]
    f1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d002      	beq.n	f202 <lv_font_get_bitmap_fmt_txt+0x9ba>
    f1fc:	4b11      	ldr	r3, [pc, #68]	; (f244 <lv_font_get_bitmap_fmt_txt+0x9fc>)
    f1fe:	4642      	mov	r2, r8
    f200:	701a      	strb	r2, [r3, #0]
    _lv_mem_buf_release(line_buf1);
    f202:	9817      	ldr	r0, [sp, #92]	; 0x5c
    f204:	4c10      	ldr	r4, [pc, #64]	; (f248 <lv_font_get_bitmap_fmt_txt+0xa00>)
    f206:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
    f208:	9801      	ldr	r0, [sp, #4]
    f20a:	47a0      	blx	r4
        return decompr_buf;
    f20c:	4b0f      	ldr	r3, [pc, #60]	; (f24c <lv_font_get_bitmap_fmt_txt+0xa04>)
    f20e:	6818      	ldr	r0, [r3, #0]
    f210:	f7ff fb39 	bl	e886 <lv_font_get_bitmap_fmt_txt+0x3e>
    f214:	4b0e      	ldr	r3, [pc, #56]	; (f250 <lv_font_get_bitmap_fmt_txt+0xa08>)
    f216:	466a      	mov	r2, sp
    f218:	7a12      	ldrb	r2, [r2, #8]
    f21a:	701a      	strb	r2, [r3, #0]
    f21c:	e7e1      	b.n	f1e2 <lv_font_get_bitmap_fmt_txt+0x99a>
    if(!gid) return NULL;
    f21e:	2000      	movs	r0, #0
    f220:	f7ff fb31 	bl	e886 <lv_font_get_bitmap_fmt_txt+0x3e>
    return NULL;
    f224:	2000      	movs	r0, #0
    f226:	f7ff fb2e 	bl	e886 <lv_font_get_bitmap_fmt_txt+0x3e>
        if(gsize == 0) return NULL;
    f22a:	2000      	movs	r0, #0
    f22c:	f7ff fb2b 	bl	e886 <lv_font_get_bitmap_fmt_txt+0x3e>
            if(decompr_buf == NULL) return NULL;
    f230:	2000      	movs	r0, #0
    f232:	f7ff fb28 	bl	e886 <lv_font_get_bitmap_fmt_txt+0x3e>
    f236:	46c0      	nop			; (mov r8, r8)
    f238:	00018b80 	.word	0x00018b80
    f23c:	20002bc8 	.word	0x20002bc8
    f240:	20002bcc 	.word	0x20002bcc
    f244:	20002bbd 	.word	0x20002bbd
    f248:	00010b6d 	.word	0x00010b6d
    f24c:	20002bb8 	.word	0x20002bb8
    f250:	20002bc4 	.word	0x20002bc4

0000f254 <lv_font_get_glyph_dsc_fmt_txt>:
{
    f254:	b5f0      	push	{r4, r5, r6, r7, lr}
    f256:	46de      	mov	lr, fp
    f258:	4657      	mov	r7, sl
    f25a:	464e      	mov	r6, r9
    f25c:	4645      	mov	r5, r8
    f25e:	b5e0      	push	{r5, r6, r7, lr}
    f260:	b085      	sub	sp, #20
    f262:	4681      	mov	r9, r0
    f264:	000c      	movs	r4, r1
    f266:	001f      	movs	r7, r3
    bool is_tab = false;
    f268:	2500      	movs	r5, #0
    if(unicode_letter == '\t') {
    f26a:	2a09      	cmp	r2, #9
    f26c:	d03a      	beq.n	f2e4 <lv_font_get_glyph_dsc_fmt_txt+0x90>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    f26e:	464b      	mov	r3, r9
    f270:	691e      	ldr	r6, [r3, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
    f272:	0011      	movs	r1, r2
    f274:	4648      	mov	r0, r9
    f276:	4b53      	ldr	r3, [pc, #332]	; (f3c4 <lv_font_get_glyph_dsc_fmt_txt+0x170>)
    f278:	4798      	blx	r3
    f27a:	4683      	mov	fp, r0
    if(!gid) return false;
    f27c:	2800      	cmp	r0, #0
    f27e:	d100      	bne.n	f282 <lv_font_get_glyph_dsc_fmt_txt+0x2e>
    f280:	e094      	b.n	f3ac <lv_font_get_glyph_dsc_fmt_txt+0x158>
    if(fdsc->kern_dsc) {
    f282:	68f3      	ldr	r3, [r6, #12]
    f284:	2b00      	cmp	r3, #0
    f286:	d100      	bne.n	f28a <lv_font_get_glyph_dsc_fmt_txt+0x36>
    f288:	e08e      	b.n	f3a8 <lv_font_get_glyph_dsc_fmt_txt+0x154>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
    f28a:	0039      	movs	r1, r7
    f28c:	4648      	mov	r0, r9
    f28e:	4b4d      	ldr	r3, [pc, #308]	; (f3c4 <lv_font_get_glyph_dsc_fmt_txt+0x170>)
    f290:	4798      	blx	r3
    int8_t kvalue = 0;
    f292:	2300      	movs	r3, #0
        if(gid_next) {
    f294:	2800      	cmp	r0, #0
    f296:	d128      	bne.n	f2ea <lv_font_get_glyph_dsc_fmt_txt+0x96>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
    f298:	465a      	mov	r2, fp
    f29a:	00d0      	lsls	r0, r2, #3
    f29c:	6872      	ldr	r2, [r6, #4]
    f29e:	4694      	mov	ip, r2
    f2a0:	4460      	add	r0, ip
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
    f2a2:	8a32      	ldrh	r2, [r6, #16]
    f2a4:	435a      	muls	r2, r3
    f2a6:	1112      	asrs	r2, r2, #4
    uint32_t adv_w = gdsc->adv_w;
    f2a8:	8841      	ldrh	r1, [r0, #2]
    f2aa:	0909      	lsrs	r1, r1, #4
    if(is_tab) adv_w *= 2;
    f2ac:	2d00      	cmp	r5, #0
    f2ae:	d000      	beq.n	f2b2 <lv_font_get_glyph_dsc_fmt_txt+0x5e>
    f2b0:	0049      	lsls	r1, r1, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
    f2b2:	0013      	movs	r3, r2
    f2b4:	3308      	adds	r3, #8
    f2b6:	185b      	adds	r3, r3, r1
    f2b8:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
    f2ba:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
    f2bc:	7943      	ldrb	r3, [r0, #5]
    f2be:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
    f2c0:	7902      	ldrb	r2, [r0, #4]
    f2c2:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
    f2c4:	2306      	movs	r3, #6
    f2c6:	56c3      	ldrsb	r3, [r0, r3]
    f2c8:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
    f2ca:	2307      	movs	r3, #7
    f2cc:	56c3      	ldrsb	r3, [r0, r3]
    f2ce:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
    f2d0:	7cf3      	ldrb	r3, [r6, #19]
    f2d2:	069b      	lsls	r3, r3, #26
    f2d4:	0f1b      	lsrs	r3, r3, #28
    f2d6:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
    f2d8:	2d00      	cmp	r5, #0
    f2da:	d100      	bne.n	f2de <lv_font_get_glyph_dsc_fmt_txt+0x8a>
    f2dc:	e06f      	b.n	f3be <lv_font_get_glyph_dsc_fmt_txt+0x16a>
    f2de:	0052      	lsls	r2, r2, #1
    f2e0:	8062      	strh	r2, [r4, #2]
    f2e2:	e064      	b.n	f3ae <lv_font_get_glyph_dsc_fmt_txt+0x15a>
        is_tab = true;
    f2e4:	3501      	adds	r5, #1
        unicode_letter = ' ';
    f2e6:	3217      	adds	r2, #23
    f2e8:	e7c1      	b.n	f26e <lv_font_get_glyph_dsc_fmt_txt+0x1a>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
    f2ea:	464b      	mov	r3, r9
    f2ec:	691b      	ldr	r3, [r3, #16]
    if(fdsc->kern_classes == 0) {
    f2ee:	7cda      	ldrb	r2, [r3, #19]
    f2f0:	0652      	lsls	r2, r2, #25
    f2f2:	d442      	bmi.n	f37a <lv_font_get_glyph_dsc_fmt_txt+0x126>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
    f2f4:	68db      	ldr	r3, [r3, #12]
    f2f6:	4698      	mov	r8, r3
        if(kdsc->glyph_ids_size == 0) {
    f2f8:	7adb      	ldrb	r3, [r3, #11]
    f2fa:	2203      	movs	r2, #3
    f2fc:	401a      	ands	r2, r3
    f2fe:	d01c      	beq.n	f33a <lv_font_get_glyph_dsc_fmt_txt+0xe6>
    int8_t value = 0;
    f300:	2300      	movs	r3, #0
        else if(kdsc->glyph_ids_size == 1) {
    f302:	2a01      	cmp	r2, #1
    f304:	d1c8      	bne.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
            const uint16_t * g_ids = kdsc->glyph_ids;
    f306:	4643      	mov	r3, r8
    f308:	681b      	ldr	r3, [r3, #0]
    f30a:	4699      	mov	r9, r3
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
    f30c:	0200      	lsls	r0, r0, #8
    f30e:	4458      	add	r0, fp
    f310:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
    f312:	4643      	mov	r3, r8
    f314:	689b      	ldr	r3, [r3, #8]
    f316:	021a      	lsls	r2, r3, #8
    f318:	0a12      	lsrs	r2, r2, #8
    f31a:	4b2b      	ldr	r3, [pc, #172]	; (f3c8 <lv_font_get_glyph_dsc_fmt_txt+0x174>)
    f31c:	9300      	str	r3, [sp, #0]
    f31e:	2304      	movs	r3, #4
    f320:	4649      	mov	r1, r9
    f322:	a803      	add	r0, sp, #12
    f324:	4f29      	ldr	r7, [pc, #164]	; (f3cc <lv_font_get_glyph_dsc_fmt_txt+0x178>)
    f326:	47b8      	blx	r7
            if(kid_p) {
    f328:	2800      	cmp	r0, #0
    f32a:	d024      	beq.n	f376 <lv_font_get_glyph_dsc_fmt_txt+0x122>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
    f32c:	464b      	mov	r3, r9
    f32e:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
    f330:	0900      	lsrs	r0, r0, #4
                value = kdsc->values[ofs];
    f332:	4643      	mov	r3, r8
    f334:	685b      	ldr	r3, [r3, #4]
    f336:	561b      	ldrsb	r3, [r3, r0]
    f338:	e7ae      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
            const uint8_t * g_ids = kdsc->glyph_ids;
    f33a:	4643      	mov	r3, r8
    f33c:	681b      	ldr	r3, [r3, #0]
    f33e:	4699      	mov	r9, r3
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
    f340:	ab03      	add	r3, sp, #12
    f342:	469c      	mov	ip, r3
    f344:	0200      	lsls	r0, r0, #8
    f346:	4458      	add	r0, fp
    f348:	8018      	strh	r0, [r3, #0]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
    f34a:	4643      	mov	r3, r8
    f34c:	689b      	ldr	r3, [r3, #8]
    f34e:	021a      	lsls	r2, r3, #8
    f350:	0a12      	lsrs	r2, r2, #8
    f352:	4b1f      	ldr	r3, [pc, #124]	; (f3d0 <lv_font_get_glyph_dsc_fmt_txt+0x17c>)
    f354:	9300      	str	r3, [sp, #0]
    f356:	2302      	movs	r3, #2
    f358:	4649      	mov	r1, r9
    f35a:	4660      	mov	r0, ip
    f35c:	4f1b      	ldr	r7, [pc, #108]	; (f3cc <lv_font_get_glyph_dsc_fmt_txt+0x178>)
    f35e:	47b8      	blx	r7
            if(kid_p) {
    f360:	2800      	cmp	r0, #0
    f362:	d006      	beq.n	f372 <lv_font_get_glyph_dsc_fmt_txt+0x11e>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
    f364:	464b      	mov	r3, r9
    f366:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
    f368:	0840      	lsrs	r0, r0, #1
                value = kdsc->values[ofs];
    f36a:	4643      	mov	r3, r8
    f36c:	685b      	ldr	r3, [r3, #4]
    f36e:	561b      	ldrsb	r3, [r3, r0]
    f370:	e792      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
    int8_t value = 0;
    f372:	2300      	movs	r3, #0
    f374:	e790      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
    f376:	2300      	movs	r3, #0
    f378:	e78e      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
    f37a:	68da      	ldr	r2, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
    f37c:	6853      	ldr	r3, [r2, #4]
    f37e:	4659      	mov	r1, fp
    f380:	5c59      	ldrb	r1, [r3, r1]
    int8_t value = 0;
    f382:	2300      	movs	r3, #0
        if(left_class > 0 && right_class > 0) {
    f384:	2900      	cmp	r1, #0
    f386:	d087      	beq.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
    f388:	6893      	ldr	r3, [r2, #8]
    f38a:	5c18      	ldrb	r0, [r3, r0]
    int8_t value = 0;
    f38c:	2300      	movs	r3, #0
        if(left_class > 0 && right_class > 0) {
    f38e:	2800      	cmp	r0, #0
    f390:	d100      	bne.n	f394 <lv_font_get_glyph_dsc_fmt_txt+0x140>
    f392:	e781      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
    f394:	3901      	subs	r1, #1
    f396:	7b53      	ldrb	r3, [r2, #13]
    f398:	434b      	muls	r3, r1
    f39a:	6811      	ldr	r1, [r2, #0]
    f39c:	1809      	adds	r1, r1, r0
    f39e:	18c9      	adds	r1, r1, r3
    f3a0:	3901      	subs	r1, #1
    f3a2:	2300      	movs	r3, #0
    f3a4:	56cb      	ldrsb	r3, [r1, r3]
    f3a6:	e777      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
    int8_t kvalue = 0;
    f3a8:	2300      	movs	r3, #0
    f3aa:	e775      	b.n	f298 <lv_font_get_glyph_dsc_fmt_txt+0x44>
    if(!gid) return false;
    f3ac:	2500      	movs	r5, #0
}
    f3ae:	0028      	movs	r0, r5
    f3b0:	b005      	add	sp, #20
    f3b2:	bc3c      	pop	{r2, r3, r4, r5}
    f3b4:	4690      	mov	r8, r2
    f3b6:	4699      	mov	r9, r3
    f3b8:	46a2      	mov	sl, r4
    f3ba:	46ab      	mov	fp, r5
    f3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    f3be:	2501      	movs	r5, #1
    f3c0:	e7f5      	b.n	f3ae <lv_font_get_glyph_dsc_fmt_txt+0x15a>
    f3c2:	46c0      	nop			; (mov r8, r8)
    f3c4:	0000e755 	.word	0x0000e755
    f3c8:	0000e739 	.word	0x0000e739
    f3cc:	00011b89 	.word	0x00011b89
    f3d0:	0000e725 	.word	0x0000e725

0000f3d4 <_lv_font_clean_up_fmt_txt>:
{
    f3d4:	b510      	push	{r4, lr}
    if(decompr_buf) {
    f3d6:	4b05      	ldr	r3, [pc, #20]	; (f3ec <_lv_font_clean_up_fmt_txt+0x18>)
    f3d8:	6818      	ldr	r0, [r3, #0]
    f3da:	2800      	cmp	r0, #0
    f3dc:	d004      	beq.n	f3e8 <_lv_font_clean_up_fmt_txt+0x14>
        lv_mem_free(decompr_buf);
    f3de:	4b04      	ldr	r3, [pc, #16]	; (f3f0 <_lv_font_clean_up_fmt_txt+0x1c>)
    f3e0:	4798      	blx	r3
        decompr_buf = NULL;
    f3e2:	2200      	movs	r2, #0
    f3e4:	4b01      	ldr	r3, [pc, #4]	; (f3ec <_lv_font_clean_up_fmt_txt+0x18>)
    f3e6:	601a      	str	r2, [r3, #0]
}
    f3e8:	bd10      	pop	{r4, pc}
    f3ea:	46c0      	nop			; (mov r8, r8)
    f3ec:	20002bb8 	.word	0x20002bb8
    f3f0:	00010ad1 	.word	0x00010ad1

0000f3f4 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
    f3f4:	b510      	push	{r4, lr}
    f3f6:	0004      	movs	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
    f3f8:	212c      	movs	r1, #44	; 0x2c
    f3fa:	4b15      	ldr	r3, [pc, #84]	; (f450 <lv_disp_drv_init+0x5c>)
    f3fc:	4798      	blx	r3

    driver->flush_cb         = NULL;
    f3fe:	2200      	movs	r2, #0
    f400:	60e2      	str	r2, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
    f402:	23f0      	movs	r3, #240	; 0xf0
    f404:	005b      	lsls	r3, r3, #1
    f406:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
    f408:	3ba0      	subs	r3, #160	; 0xa0
    f40a:	8063      	strh	r3, [r4, #2]
    driver->buffer           = NULL;
    f40c:	6062      	str	r2, [r4, #4]
    driver->rotated          = 0;
    f40e:	7a23      	ldrb	r3, [r4, #8]
    f410:	2102      	movs	r1, #2
    f412:	438b      	bics	r3, r1
    f414:	7223      	strb	r3, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
    f416:	3126      	adds	r1, #38	; 0x26
    f418:	5c63      	ldrb	r3, [r4, r1]
    f41a:	201f      	movs	r0, #31
    f41c:	4383      	bics	r3, r0
    f41e:	5463      	strb	r3, [r4, r1]
    f420:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    f422:	23fc      	movs	r3, #252	; 0xfc
    f424:	00db      	lsls	r3, r3, #3
    f426:	430b      	orrs	r3, r1
    f428:	8523      	strh	r3, [r4, #40]	; 0x28
    f42a:	0021      	movs	r1, r4
    f42c:	3128      	adds	r1, #40	; 0x28
    f42e:	055b      	lsls	r3, r3, #21
    f430:	0f5b      	lsrs	r3, r3, #29
    f432:	704b      	strb	r3, [r1, #1]
    driver->dpi = LV_DPI;
    f434:	8923      	ldrh	r3, [r4, #8]
    f436:	4907      	ldr	r1, [pc, #28]	; (f454 <lv_disp_drv_init+0x60>)
    f438:	4019      	ands	r1, r3
    f43a:	2382      	movs	r3, #130	; 0x82
    f43c:	009b      	lsls	r3, r3, #2
    f43e:	430b      	orrs	r3, r1
    f440:	8123      	strh	r3, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
    f442:	2101      	movs	r1, #1
    f444:	430b      	orrs	r3, r1
    f446:	7223      	strb	r3, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
    f448:	6222      	str	r2, [r4, #32]
    driver->gpu_fill_cb  = NULL;
    f44a:	6262      	str	r2, [r4, #36]	; 0x24

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
    f44c:	6162      	str	r2, [r4, #20]
}
    f44e:	bd10      	pop	{r4, pc}
    f450:	00010fe5 	.word	0x00010fe5
    f454:	fffff003 	.word	0xfffff003

0000f458 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
    f458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f45a:	0004      	movs	r4, r0
    f45c:	000d      	movs	r5, r1
    f45e:	0017      	movs	r7, r2
    f460:	001e      	movs	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
    f462:	2124      	movs	r1, #36	; 0x24
    f464:	4b03      	ldr	r3, [pc, #12]	; (f474 <lv_disp_buf_init+0x1c>)
    f466:	4798      	blx	r3

    disp_buf->buf1    = buf1;
    f468:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
    f46a:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
    f46c:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
    f46e:	60e6      	str	r6, [r4, #12]
}
    f470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f472:	46c0      	nop			; (mov r8, r8)
    f474:	00010fe5 	.word	0x00010fe5

0000f478 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
    f478:	b570      	push	{r4, r5, r6, lr}
    f47a:	0005      	movs	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
    f47c:	4838      	ldr	r0, [pc, #224]	; (f560 <lv_disp_drv_register+0xe8>)
    f47e:	4b39      	ldr	r3, [pc, #228]	; (f564 <lv_disp_drv_register+0xec>)
    f480:	4798      	blx	r3
    f482:	1e04      	subs	r4, r0, #0
    if(!disp) {
    f484:	d055      	beq.n	f532 <lv_disp_drv_register+0xba>
        LV_ASSERT_MEM(disp);
        return NULL;
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
    f486:	21b8      	movs	r1, #184	; 0xb8
    f488:	0049      	lsls	r1, r1, #1
    f48a:	4b37      	ldr	r3, [pc, #220]	; (f568 <lv_disp_drv_register+0xf0>)
    f48c:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
    f48e:	222c      	movs	r2, #44	; 0x2c
    f490:	0029      	movs	r1, r5
    f492:	0020      	movs	r0, r4
    f494:	4b35      	ldr	r3, [pc, #212]	; (f56c <lv_disp_drv_register+0xf4>)
    f496:	4798      	blx	r3

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
    f498:	0020      	movs	r0, r4
    f49a:	3030      	adds	r0, #48	; 0x30
    f49c:	214c      	movs	r1, #76	; 0x4c
    f49e:	4b34      	ldr	r3, [pc, #208]	; (f570 <lv_disp_drv_register+0xf8>)
    f4a0:	4798      	blx	r3
    disp->last_activity_time = 0;
    f4a2:	2200      	movs	r2, #0
    f4a4:	23b6      	movs	r3, #182	; 0xb6
    f4a6:	005b      	lsls	r3, r3, #1
    f4a8:	50e2      	str	r2, [r4, r3]

    if(disp_def == NULL) disp_def = disp;
    f4aa:	4b32      	ldr	r3, [pc, #200]	; (f574 <lv_disp_drv_register+0xfc>)
    f4ac:	681b      	ldr	r3, [r3, #0]
    f4ae:	2b00      	cmp	r3, #0
    f4b0:	d04a      	beq.n	f548 <lv_disp_drv_register+0xd0>

    lv_disp_t * disp_def_tmp = disp_def;
    f4b2:	4b30      	ldr	r3, [pc, #192]	; (f574 <lv_disp_drv_register+0xfc>)
    f4b4:	681e      	ldr	r6, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
    f4b6:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
    f4b8:	0023      	movs	r3, r4
    f4ba:	2203      	movs	r2, #3
    f4bc:	211e      	movs	r1, #30
    f4be:	482e      	ldr	r0, [pc, #184]	; (f578 <lv_disp_drv_register+0x100>)
    f4c0:	4d2e      	ldr	r5, [pc, #184]	; (f57c <lv_disp_drv_register+0x104>)
    f4c2:	47a8      	blx	r5
    f4c4:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MEM(disp->refr_task);
    f4c6:	4b2e      	ldr	r3, [pc, #184]	; (f580 <lv_disp_drv_register+0x108>)
    f4c8:	4798      	blx	r3
    f4ca:	2800      	cmp	r0, #0
    f4cc:	d03f      	beq.n	f54e <lv_disp_drv_register+0xd6>
    if(disp->refr_task == NULL) return NULL;
    f4ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f4d0:	2b00      	cmp	r3, #0
    f4d2:	d042      	beq.n	f55a <lv_disp_drv_register+0xe2>

    disp->inv_p = 0;
    f4d4:	22b4      	movs	r2, #180	; 0xb4
    f4d6:	0052      	lsls	r2, r2, #1
    f4d8:	5aa3      	ldrh	r3, [r4, r2]
    f4da:	0a9b      	lsrs	r3, r3, #10
    f4dc:	029b      	lsls	r3, r3, #10
    f4de:	52a3      	strh	r3, [r4, r2]
    disp->last_activity_time = 0;
    f4e0:	2200      	movs	r2, #0
    f4e2:	23b6      	movs	r3, #182	; 0xb6
    f4e4:	005b      	lsls	r3, r3, #1
    f4e6:	50e2      	str	r2, [r4, r3]

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
    f4e8:	2100      	movs	r1, #0
    f4ea:	2000      	movs	r0, #0
    f4ec:	4d25      	ldr	r5, [pc, #148]	; (f584 <lv_disp_drv_register+0x10c>)
    f4ee:	47a8      	blx	r5
    f4f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
    f4f2:	2100      	movs	r1, #0
    f4f4:	2000      	movs	r0, #0
    f4f6:	47a8      	blx	r5
    f4f8:	6420      	str	r0, [r4, #64]	; 0x40
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
    f4fa:	2100      	movs	r1, #0
    f4fc:	2000      	movs	r0, #0
    f4fe:	47a8      	blx	r5
    f500:	6460      	str	r0, [r4, #68]	; 0x44
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
    f502:	2100      	movs	r1, #0
    f504:	6c20      	ldr	r0, [r4, #64]	; 0x40
    f506:	4d20      	ldr	r5, [pc, #128]	; (f588 <lv_disp_drv_register+0x110>)
    f508:	47a8      	blx	r5
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
    f50a:	2100      	movs	r1, #0
    f50c:	6c60      	ldr	r0, [r4, #68]	; 0x44
    f50e:	47a8      	blx	r5
    lv_obj_set_click(disp->top_layer, false);
    f510:	2100      	movs	r1, #0
    f512:	6c20      	ldr	r0, [r4, #64]	; 0x40
    f514:	4d1d      	ldr	r5, [pc, #116]	; (f58c <lv_disp_drv_register+0x114>)
    f516:	47a8      	blx	r5
    lv_obj_set_click(disp->sys_layer, false);
    f518:	2100      	movs	r1, #0
    f51a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    f51c:	47a8      	blx	r5

    lv_obj_invalidate(disp->act_scr);
    f51e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    f520:	4b1b      	ldr	r3, [pc, #108]	; (f590 <lv_disp_drv_register+0x118>)
    f522:	4798      	blx	r3

    disp_def = disp_def_tmp; /*Revert the default display*/
    f524:	4b13      	ldr	r3, [pc, #76]	; (f574 <lv_disp_drv_register+0xfc>)
    f526:	601e      	str	r6, [r3, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
    f528:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f52a:	4b1a      	ldr	r3, [pc, #104]	; (f594 <lv_disp_drv_register+0x11c>)
    f52c:	4798      	blx	r3

    return disp;
}
    f52e:	0020      	movs	r0, r4
    f530:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MEM(disp);
    f532:	2000      	movs	r0, #0
    f534:	4b12      	ldr	r3, [pc, #72]	; (f580 <lv_disp_drv_register+0x108>)
    f536:	4798      	blx	r3
    f538:	2800      	cmp	r0, #0
    f53a:	d1f8      	bne.n	f52e <lv_disp_drv_register+0xb6>
    f53c:	2200      	movs	r2, #0
    f53e:	2300      	movs	r3, #0
    f540:	4815      	ldr	r0, [pc, #84]	; (f598 <lv_disp_drv_register+0x120>)
    f542:	4916      	ldr	r1, [pc, #88]	; (f59c <lv_disp_drv_register+0x124>)
    f544:	4788      	blx	r1
    f546:	e7fe      	b.n	f546 <lv_disp_drv_register+0xce>
    if(disp_def == NULL) disp_def = disp;
    f548:	4b0a      	ldr	r3, [pc, #40]	; (f574 <lv_disp_drv_register+0xfc>)
    f54a:	601c      	str	r4, [r3, #0]
    f54c:	e7b1      	b.n	f4b2 <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
    f54e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f550:	2300      	movs	r3, #0
    f552:	4811      	ldr	r0, [pc, #68]	; (f598 <lv_disp_drv_register+0x120>)
    f554:	4911      	ldr	r1, [pc, #68]	; (f59c <lv_disp_drv_register+0x124>)
    f556:	4788      	blx	r1
    f558:	e7fe      	b.n	f558 <lv_disp_drv_register+0xe0>
    if(disp->refr_task == NULL) return NULL;
    f55a:	2400      	movs	r4, #0
    f55c:	e7e7      	b.n	f52e <lv_disp_drv_register+0xb6>
    f55e:	46c0      	nop			; (mov r8, r8)
    f560:	20004cc4 	.word	0x20004cc4
    f564:	00010565 	.word	0x00010565
    f568:	00010fe5 	.word	0x00010fe5
    f56c:	00010c25 	.word	0x00010c25
    f570:	00010551 	.word	0x00010551
    f574:	20002bd0 	.word	0x20002bd0
    f578:	00004355 	.word	0x00004355
    f57c:	00011571 	.word	0x00011571
    f580:	00001415 	.word	0x00001415
    f584:	0000287d 	.word	0x0000287d
    f588:	00002611 	.word	0x00002611
    f58c:	000018ad 	.word	0x000018ad
    f590:	00001f49 	.word	0x00001f49
    f594:	000115c5 	.word	0x000115c5
    f598:	00018804 	.word	0x00018804
    f59c:	0000141d 	.word	0x0000141d

0000f5a0 <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
    f5a0:	4b01      	ldr	r3, [pc, #4]	; (f5a8 <lv_disp_get_default+0x8>)
    f5a2:	6818      	ldr	r0, [r3, #0]
}
    f5a4:	4770      	bx	lr
    f5a6:	46c0      	nop			; (mov r8, r8)
    f5a8:	20002bd0 	.word	0x20002bd0

0000f5ac <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    f5ac:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
    f5ae:	d005      	beq.n	f5bc <lv_disp_get_hor_res+0x10>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
    f5b0:	7a1a      	ldrb	r2, [r3, #8]
    f5b2:	0792      	lsls	r2, r2, #30
    f5b4:	d509      	bpl.n	f5ca <lv_disp_get_hor_res+0x1e>
    f5b6:	2002      	movs	r0, #2
    f5b8:	5e18      	ldrsh	r0, [r3, r0]
}
    f5ba:	4770      	bx	lr
    return disp_def;
    f5bc:	4b04      	ldr	r3, [pc, #16]	; (f5d0 <lv_disp_get_hor_res+0x24>)
    f5be:	681b      	ldr	r3, [r3, #0]
        return LV_HOR_RES_MAX;
    f5c0:	20f0      	movs	r0, #240	; 0xf0
    f5c2:	0040      	lsls	r0, r0, #1
    if(disp == NULL)
    f5c4:	2b00      	cmp	r3, #0
    f5c6:	d0f8      	beq.n	f5ba <lv_disp_get_hor_res+0xe>
    f5c8:	e7f2      	b.n	f5b0 <lv_disp_get_hor_res+0x4>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
    f5ca:	2000      	movs	r0, #0
    f5cc:	5e18      	ldrsh	r0, [r3, r0]
    f5ce:	e7f4      	b.n	f5ba <lv_disp_get_hor_res+0xe>
    f5d0:	20002bd0 	.word	0x20002bd0

0000f5d4 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    f5d4:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
    f5d6:	d005      	beq.n	f5e4 <lv_disp_get_ver_res+0x10>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
    f5d8:	7a1a      	ldrb	r2, [r3, #8]
    f5da:	0792      	lsls	r2, r2, #30
    f5dc:	d509      	bpl.n	f5f2 <lv_disp_get_ver_res+0x1e>
    f5de:	2000      	movs	r0, #0
    f5e0:	5e18      	ldrsh	r0, [r3, r0]
}
    f5e2:	4770      	bx	lr
    return disp_def;
    f5e4:	4b04      	ldr	r3, [pc, #16]	; (f5f8 <lv_disp_get_ver_res+0x24>)
    f5e6:	681b      	ldr	r3, [r3, #0]
        return LV_VER_RES_MAX;
    f5e8:	20a0      	movs	r0, #160	; 0xa0
    f5ea:	0040      	lsls	r0, r0, #1
    if(disp == NULL)
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d0f8      	beq.n	f5e2 <lv_disp_get_ver_res+0xe>
    f5f0:	e7f2      	b.n	f5d8 <lv_disp_get_ver_res+0x4>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
    f5f2:	2002      	movs	r0, #2
    f5f4:	5e18      	ldrsh	r0, [r3, r0]
    f5f6:	e7f4      	b.n	f5e2 <lv_disp_get_ver_res+0xe>
    f5f8:	20002bd0 	.word	0x20002bd0

0000f5fc <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
uint32_t lv_disp_get_dpi(lv_disp_t * disp)
{
    f5fc:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
    f5fe:	d003      	beq.n	f608 <lv_disp_get_dpi+0xc>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
    f600:	8918      	ldrh	r0, [r3, #8]
    f602:	0500      	lsls	r0, r0, #20
    f604:	0d80      	lsrs	r0, r0, #22
}
    f606:	4770      	bx	lr
    return disp_def;
    f608:	4b02      	ldr	r3, [pc, #8]	; (f614 <lv_disp_get_dpi+0x18>)
    f60a:	681b      	ldr	r3, [r3, #0]
    f60c:	2082      	movs	r0, #130	; 0x82
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    f60e:	2b00      	cmp	r3, #0
    f610:	d0f9      	beq.n	f606 <lv_disp_get_dpi+0xa>
    f612:	e7f5      	b.n	f600 <lv_disp_get_dpi+0x4>
    f614:	20002bd0 	.word	0x20002bd0

0000f618 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
    f618:	b570      	push	{r4, r5, r6, lr}
    f61a:	1e05      	subs	r5, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
    f61c:	d019      	beq.n	f652 <lv_disp_get_size_category+0x3a>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
    else w = lv_disp_get_hor_res(disp);
    f61e:	0028      	movs	r0, r5
    f620:	4b0f      	ldr	r3, [pc, #60]	; (f660 <lv_disp_get_size_category+0x48>)
    f622:	4798      	blx	r3
    f624:	0004      	movs	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
    f626:	0028      	movs	r0, r5
    f628:	4b0e      	ldr	r3, [pc, #56]	; (f664 <lv_disp_get_size_category+0x4c>)
    f62a:	4798      	blx	r3
    f62c:	0001      	movs	r1, r0

    w = w * 10 / dpi;
    f62e:	00a0      	lsls	r0, r4, #2
    f630:	1900      	adds	r0, r0, r4
    f632:	0040      	lsls	r0, r0, #1
    f634:	4b0c      	ldr	r3, [pc, #48]	; (f668 <lv_disp_get_size_category+0x50>)
    f636:	4798      	blx	r3
    f638:	0002      	movs	r2, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
    f63a:	2000      	movs	r0, #0
    f63c:	2a1d      	cmp	r2, #29
    f63e:	d907      	bls.n	f650 <lv_disp_get_size_category+0x38>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
    f640:	3001      	adds	r0, #1
    f642:	2a31      	cmp	r2, #49	; 0x31
    f644:	d904      	bls.n	f650 <lv_disp_get_size_category+0x38>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
    f646:	3044      	adds	r0, #68	; 0x44
    f648:	4290      	cmp	r0, r2
    f64a:	4180      	sbcs	r0, r0
    f64c:	4240      	negs	r0, r0
    f64e:	3002      	adds	r0, #2
}
    f650:	bd70      	pop	{r4, r5, r6, pc}
    return disp_def;
    f652:	4b06      	ldr	r3, [pc, #24]	; (f66c <lv_disp_get_size_category+0x54>)
    f654:	681d      	ldr	r5, [r3, #0]
    f656:	24f0      	movs	r4, #240	; 0xf0
    f658:	0064      	lsls	r4, r4, #1
    if(disp == NULL) w = LV_HOR_RES_MAX;
    f65a:	2d00      	cmp	r5, #0
    f65c:	d0e3      	beq.n	f626 <lv_disp_get_size_category+0xe>
    f65e:	e7de      	b.n	f61e <lv_disp_get_size_category+0x6>
    f660:	0000f5ad 	.word	0x0000f5ad
    f664:	0000f5fd 	.word	0x0000f5fd
    f668:	00017961 	.word	0x00017961
    f66c:	20002bd0 	.word	0x20002bd0

0000f670 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
    f670:	6842      	ldr	r2, [r0, #4]
    f672:	2300      	movs	r3, #0
    f674:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
    f676:	6842      	ldr	r2, [r0, #4]
    f678:	61d3      	str	r3, [r2, #28]
}
    f67a:	4770      	bx	lr

0000f67c <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
    f67c:	b510      	push	{r4, lr}
    if(disp == NULL)
    f67e:	2800      	cmp	r0, #0
    f680:	d004      	beq.n	f68c <lv_disp_get_next+0x10>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
    f682:	0001      	movs	r1, r0
    f684:	4803      	ldr	r0, [pc, #12]	; (f694 <lv_disp_get_next+0x18>)
    f686:	4b04      	ldr	r3, [pc, #16]	; (f698 <lv_disp_get_next+0x1c>)
    f688:	4798      	blx	r3
}
    f68a:	bd10      	pop	{r4, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    f68c:	4801      	ldr	r0, [pc, #4]	; (f694 <lv_disp_get_next+0x18>)
    f68e:	4b03      	ldr	r3, [pc, #12]	; (f69c <lv_disp_get_next+0x20>)
    f690:	4798      	blx	r3
    f692:	e7fa      	b.n	f68a <lv_disp_get_next+0xe>
    f694:	20004cc4 	.word	0x20004cc4
    f698:	0001061d 	.word	0x0001061d
    f69c:	00010605 	.word	0x00010605

0000f6a0 <lv_disp_get_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
    f6a0:	6840      	ldr	r0, [r0, #4]
}
    f6a2:	4770      	bx	lr

0000f6a4 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
    f6a4:	6843      	ldr	r3, [r0, #4]
    f6a6:	681a      	ldr	r2, [r3, #0]
    f6a8:	2a00      	cmp	r2, #0
    f6aa:	d004      	beq.n	f6b6 <lv_disp_is_double_buf+0x12>
    f6ac:	6858      	ldr	r0, [r3, #4]
    f6ae:	1e43      	subs	r3, r0, #1
    f6b0:	4198      	sbcs	r0, r3
    f6b2:	b2c0      	uxtb	r0, r0
        return true;
    else
        return false;
}
    f6b4:	4770      	bx	lr
        return false;
    f6b6:	2000      	movs	r0, #0
    f6b8:	e7fc      	b.n	f6b4 <lv_disp_is_double_buf+0x10>
	...

0000f6bc <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
    f6bc:	b510      	push	{r4, lr}
    f6be:	0004      	movs	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
    f6c0:	4b07      	ldr	r3, [pc, #28]	; (f6e0 <lv_disp_is_true_double_buf+0x24>)
    f6c2:	4798      	blx	r3
    f6c4:	2800      	cmp	r0, #0
    f6c6:	d00a      	beq.n	f6de <lv_disp_is_true_double_buf+0x22>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
    f6c8:	2200      	movs	r2, #0
    f6ca:	5ea3      	ldrsh	r3, [r4, r2]
    f6cc:	2202      	movs	r2, #2
    f6ce:	5ea0      	ldrsh	r0, [r4, r2]
    f6d0:	4358      	muls	r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
    f6d2:	6863      	ldr	r3, [r4, #4]
    f6d4:	68db      	ldr	r3, [r3, #12]
    f6d6:	1ac0      	subs	r0, r0, r3
    f6d8:	4243      	negs	r3, r0
    f6da:	4158      	adcs	r0, r3
    f6dc:	b2c0      	uxtb	r0, r0
        return true;
    }
    else {
        return false;
    }
}
    f6de:	bd10      	pop	{r4, pc}
    f6e0:	0000f6a5 	.word	0x0000f6a5

0000f6e4 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    f6e4:	b510      	push	{r4, lr}
    if(indev == NULL)
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d004      	beq.n	f6f4 <lv_indev_get_next+0x10>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
    f6ea:	0001      	movs	r1, r0
    f6ec:	4803      	ldr	r0, [pc, #12]	; (f6fc <lv_indev_get_next+0x18>)
    f6ee:	4b04      	ldr	r3, [pc, #16]	; (f700 <lv_indev_get_next+0x1c>)
    f6f0:	4798      	blx	r3
}
    f6f2:	bd10      	pop	{r4, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    f6f4:	4801      	ldr	r0, [pc, #4]	; (f6fc <lv_indev_get_next+0x18>)
    f6f6:	4b03      	ldr	r3, [pc, #12]	; (f704 <lv_indev_get_next+0x20>)
    f6f8:	4798      	blx	r3
    f6fa:	e7fa      	b.n	f6f2 <lv_indev_get_next+0xe>
    f6fc:	20004cb8 	.word	0x20004cb8
    f700:	0001061d 	.word	0x0001061d
    f704:	00010605 	.word	0x00010605

0000f708 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
    f708:	2200      	movs	r2, #0
    f70a:	4b04      	ldr	r3, [pc, #16]	; (f71c <lv_tick_inc+0x14>)
    f70c:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
    f70e:	4b04      	ldr	r3, [pc, #16]	; (f720 <lv_tick_inc+0x18>)
    f710:	681a      	ldr	r2, [r3, #0]
    f712:	4694      	mov	ip, r2
    f714:	4460      	add	r0, ip
    f716:	6018      	str	r0, [r3, #0]
}
    f718:	4770      	bx	lr
    f71a:	46c0      	nop			; (mov r8, r8)
    f71c:	20002bd8 	.word	0x20002bd8
    f720:	20002bd4 	.word	0x20002bd4

0000f724 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
    f724:	4b04      	ldr	r3, [pc, #16]	; (f738 <lv_tick_get+0x14>)
    f726:	2101      	movs	r1, #1
    f728:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
    f72a:	781a      	ldrb	r2, [r3, #0]
    f72c:	2a00      	cmp	r2, #0
    f72e:	d0fb      	beq.n	f728 <lv_tick_get+0x4>
        result        = sys_time;
    f730:	4b02      	ldr	r3, [pc, #8]	; (f73c <lv_tick_get+0x18>)
                                Continue until make a non interrupted cycle */

    return result;
    f732:	6818      	ldr	r0, [r3, #0]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
    f734:	4770      	bx	lr
    f736:	46c0      	nop			; (mov r8, r8)
    f738:	20002bd8 	.word	0x20002bd8
    f73c:	20002bd4 	.word	0x20002bd4

0000f740 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
    f740:	b510      	push	{r4, lr}
    f742:	0004      	movs	r4, r0
    uint32_t act_time = lv_tick_get();
    f744:	4b01      	ldr	r3, [pc, #4]	; (f74c <lv_tick_elaps+0xc>)
    f746:	4798      	blx	r3
    if(act_time >= prev_tick) {
        prev_tick = act_time - prev_tick;
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    f748:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
    f74a:	bd10      	pop	{r4, pc}
    f74c:	0000f725 	.word	0x0000f725

0000f750 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_path_t * path, const lv_anim_t * a)
{
    f750:	b510      	push	{r4, lr}
    f752:	000c      	movs	r4, r1
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
    f754:	6a09      	ldr	r1, [r1, #32]
    f756:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f758:	4281      	cmp	r1, r0
    f75a:	d00a      	beq.n	f772 <lv_anim_path_linear+0x22>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
    f75c:	0280      	lsls	r0, r0, #10
    f75e:	4b06      	ldr	r3, [pc, #24]	; (f778 <lv_anim_path_linear+0x28>)
    f760:	4798      	blx	r3
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
    f762:	69a3      	ldr	r3, [r4, #24]
    f764:	69e2      	ldr	r2, [r4, #28]
    f766:	1ad2      	subs	r2, r2, r3
    f768:	4350      	muls	r0, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    f76a:	1280      	asrs	r0, r0, #10
    new_value += a->start;
    f76c:	1818      	adds	r0, r3, r0

    return (lv_anim_value_t)new_value;
    f76e:	b200      	sxth	r0, r0
}
    f770:	bd10      	pop	{r4, pc}
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    f772:	2080      	movs	r0, #128	; 0x80
    f774:	00c0      	lsls	r0, r0, #3
    f776:	e7f4      	b.n	f762 <lv_anim_path_linear+0x12>
    f778:	00017961 	.word	0x00017961

0000f77c <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
    f77c:	b510      	push	{r4, lr}
    anim_list_changed = true;
    f77e:	2201      	movs	r2, #1
    f780:	4b09      	ldr	r3, [pc, #36]	; (f7a8 <anim_mark_list_change+0x2c>)
    f782:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
    f784:	4809      	ldr	r0, [pc, #36]	; (f7ac <anim_mark_list_change+0x30>)
    f786:	4b0a      	ldr	r3, [pc, #40]	; (f7b0 <anim_mark_list_change+0x34>)
    f788:	4798      	blx	r3
    f78a:	2800      	cmp	r0, #0
    f78c:	d005      	beq.n	f79a <anim_mark_list_change+0x1e>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
    f78e:	4b09      	ldr	r3, [pc, #36]	; (f7b4 <anim_mark_list_change+0x38>)
    f790:	6818      	ldr	r0, [r3, #0]
    f792:	2104      	movs	r1, #4
    f794:	4b08      	ldr	r3, [pc, #32]	; (f7b8 <anim_mark_list_change+0x3c>)
    f796:	4798      	blx	r3
}
    f798:	bd10      	pop	{r4, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    f79a:	4b06      	ldr	r3, [pc, #24]	; (f7b4 <anim_mark_list_change+0x38>)
    f79c:	6818      	ldr	r0, [r3, #0]
    f79e:	2100      	movs	r1, #0
    f7a0:	4b05      	ldr	r3, [pc, #20]	; (f7b8 <anim_mark_list_change+0x3c>)
    f7a2:	4798      	blx	r3
    f7a4:	e7f8      	b.n	f798 <anim_mark_list_change+0x1c>
    f7a6:	46c0      	nop			; (mov r8, r8)
    f7a8:	20002be0 	.word	0x20002be0
    f7ac:	20004d88 	.word	0x20004d88
    f7b0:	00010605 	.word	0x00010605
    f7b4:	20002bdc 	.word	0x20002bdc
    f7b8:	000114e1 	.word	0x000114e1

0000f7bc <anim_task>:
{
    f7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7be:	46ce      	mov	lr, r9
    f7c0:	4647      	mov	r7, r8
    f7c2:	b580      	push	{r7, lr}
    f7c4:	b091      	sub	sp, #68	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
    f7c6:	4865      	ldr	r0, [pc, #404]	; (f95c <anim_task+0x1a0>)
    f7c8:	4b65      	ldr	r3, [pc, #404]	; (f960 <anim_task+0x1a4>)
    f7ca:	4798      	blx	r3
    f7cc:	2800      	cmp	r0, #0
    f7ce:	d00b      	beq.n	f7e8 <anim_task+0x2c>
        a->has_run = 0;
    f7d0:	253c      	movs	r5, #60	; 0x3c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
    f7d2:	4c62      	ldr	r4, [pc, #392]	; (f95c <anim_task+0x1a0>)
    f7d4:	4e63      	ldr	r6, [pc, #396]	; (f964 <anim_task+0x1a8>)
        a->has_run = 0;
    f7d6:	5d43      	ldrb	r3, [r0, r5]
    f7d8:	2202      	movs	r2, #2
    f7da:	4393      	bics	r3, r2
    f7dc:	5543      	strb	r3, [r0, r5]
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
    f7de:	0001      	movs	r1, r0
    f7e0:	0020      	movs	r0, r4
    f7e2:	47b0      	blx	r6
    f7e4:	2800      	cmp	r0, #0
    f7e6:	d1f6      	bne.n	f7d6 <anim_task+0x1a>
    uint32_t elaps = lv_tick_elaps(last_task_run);
    f7e8:	4b5f      	ldr	r3, [pc, #380]	; (f968 <anim_task+0x1ac>)
    f7ea:	6818      	ldr	r0, [r3, #0]
    f7ec:	4b5f      	ldr	r3, [pc, #380]	; (f96c <anim_task+0x1b0>)
    f7ee:	4798      	blx	r3
    f7f0:	0007      	movs	r7, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    f7f2:	485a      	ldr	r0, [pc, #360]	; (f95c <anim_task+0x1a0>)
    f7f4:	4b5a      	ldr	r3, [pc, #360]	; (f960 <anim_task+0x1a4>)
    f7f6:	4798      	blx	r3
    f7f8:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
    f7fa:	d100      	bne.n	f7fe <anim_task+0x42>
    f7fc:	e08c      	b.n	f918 <anim_task+0x15c>
        anim_list_changed = false;
    f7fe:	4e5c      	ldr	r6, [pc, #368]	; (f970 <anim_task+0x1b4>)
    f800:	2500      	movs	r5, #0
        if(anim_list_changed)
    f802:	46b0      	mov	r8, r6
    f804:	e026      	b.n	f854 <anim_task+0x98>
            int32_t new_act_time = a->act_time + elaps;
    f806:	19db      	adds	r3, r3, r7
            if(a->act_time <= 0 && new_act_time >= 0) {
    f808:	2b00      	cmp	r3, #0
    f80a:	da00      	bge.n	f80e <anim_task+0x52>
    f80c:	e08d      	b.n	f92a <anim_task+0x16e>
                if(a->start_cb) a->start_cb(a);
    f80e:	68a2      	ldr	r2, [r4, #8]
    f810:	2a00      	cmp	r2, #0
    f812:	d100      	bne.n	f816 <anim_task+0x5a>
    f814:	e090      	b.n	f938 <anim_task+0x17c>
    f816:	0020      	movs	r0, r4
    f818:	4790      	blx	r2
    f81a:	e028      	b.n	f86e <anim_task+0xb2>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
    f81c:	6923      	ldr	r3, [r4, #16]
    f81e:	2b00      	cmp	r3, #0
    f820:	d02f      	beq.n	f882 <anim_task+0xc6>
    f822:	0020      	movs	r0, r4
    f824:	3010      	adds	r0, #16
    f826:	0021      	movs	r1, r4
    f828:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
    f82a:	6863      	ldr	r3, [r4, #4]
    f82c:	2b00      	cmp	r3, #0
    f82e:	d002      	beq.n	f836 <anim_task+0x7a>
    f830:	b201      	sxth	r1, r0
    f832:	6820      	ldr	r0, [r4, #0]
    f834:	4798      	blx	r3
                if(a->act_time >= a->time) {
    f836:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f838:	6a22      	ldr	r2, [r4, #32]
    f83a:	4293      	cmp	r3, r2
    f83c:	d227      	bcs.n	f88e <anim_task+0xd2>
        if(anim_list_changed)
    f83e:	4643      	mov	r3, r8
    f840:	781b      	ldrb	r3, [r3, #0]
    f842:	2b00      	cmp	r3, #0
    f844:	d100      	bne.n	f848 <anim_task+0x8c>
    f846:	e071      	b.n	f92c <anim_task+0x170>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    f848:	4844      	ldr	r0, [pc, #272]	; (f95c <anim_task+0x1a0>)
    f84a:	4b45      	ldr	r3, [pc, #276]	; (f960 <anim_task+0x1a4>)
    f84c:	4798      	blx	r3
    f84e:	0004      	movs	r4, r0
    while(a != NULL) {
    f850:	2c00      	cmp	r4, #0
    f852:	d061      	beq.n	f918 <anim_task+0x15c>
        anim_list_changed = false;
    f854:	7035      	strb	r5, [r6, #0]
        if(!a->has_run) {
    f856:	233c      	movs	r3, #60	; 0x3c
    f858:	5ce3      	ldrb	r3, [r4, r3]
    f85a:	079b      	lsls	r3, r3, #30
    f85c:	d466      	bmi.n	f92c <anim_task+0x170>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
    f85e:	223c      	movs	r2, #60	; 0x3c
    f860:	5ca3      	ldrb	r3, [r4, r2]
    f862:	2102      	movs	r1, #2
    f864:	430b      	orrs	r3, r1
    f866:	54a3      	strb	r3, [r4, r2]
            int32_t new_act_time = a->act_time + elaps;
    f868:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if(a->act_time <= 0 && new_act_time >= 0) {
    f86a:	2b00      	cmp	r3, #0
    f86c:	ddcb      	ble.n	f806 <anim_task+0x4a>
            a->act_time += elaps;
    f86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f870:	18fb      	adds	r3, r7, r3
    f872:	6263      	str	r3, [r4, #36]	; 0x24
            if(a->act_time >= 0) {
    f874:	2b00      	cmp	r3, #0
    f876:	dbe2      	blt.n	f83e <anim_task+0x82>
                if(a->act_time > a->time) a->act_time = a->time;
    f878:	6a22      	ldr	r2, [r4, #32]
    f87a:	429a      	cmp	r2, r3
    f87c:	d2ce      	bcs.n	f81c <anim_task+0x60>
    f87e:	6262      	str	r2, [r4, #36]	; 0x24
    f880:	e7cc      	b.n	f81c <anim_task+0x60>
                else new_value = lv_anim_path_linear(&a->path, a);
    f882:	0020      	movs	r0, r4
    f884:	3010      	adds	r0, #16
    f886:	0021      	movs	r1, r4
    f888:	4b3a      	ldr	r3, [pc, #232]	; (f974 <anim_task+0x1b8>)
    f88a:	4798      	blx	r3
    f88c:	e7cd      	b.n	f82a <anim_task+0x6e>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
    f88e:	233c      	movs	r3, #60	; 0x3c
    f890:	5ce3      	ldrb	r3, [r4, r3]
    f892:	2201      	movs	r2, #1
    f894:	4013      	ands	r3, r2
    f896:	1e18      	subs	r0, r3, #0
    f898:	d107      	bne.n	f8aa <anim_task+0xee>
    f89a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    f89c:	2a00      	cmp	r2, #0
    f89e:	d04d      	beq.n	f93c <anim_task+0x180>
    f8a0:	4935      	ldr	r1, [pc, #212]	; (f978 <anim_task+0x1bc>)
    f8a2:	428a      	cmp	r2, r1
    f8a4:	d051      	beq.n	f94a <anim_task+0x18e>
        a->repeat_cnt--;
    f8a6:	3a01      	subs	r2, #1
    f8a8:	86a2      	strh	r2, [r4, #52]	; 0x34
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
    f8aa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    f8ac:	2a00      	cmp	r2, #0
    f8ae:	d01a      	beq.n	f8e6 <anim_task+0x12a>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
    f8b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f8b2:	425a      	negs	r2, r3
    f8b4:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
    f8b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f8b8:	2a00      	cmp	r2, #0
    f8ba:	d0c0      	beq.n	f83e <anim_task+0x82>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
    f8bc:	2800      	cmp	r0, #0
    f8be:	d040      	beq.n	f942 <anim_task+0x186>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
    f8c0:	4243      	negs	r3, r0
    f8c2:	4143      	adcs	r3, r0
    f8c4:	4699      	mov	r9, r3
    f8c6:	203c      	movs	r0, #60	; 0x3c
    f8c8:	5c21      	ldrb	r1, [r4, r0]
    f8ca:	2301      	movs	r3, #1
    f8cc:	4399      	bics	r1, r3
    f8ce:	464b      	mov	r3, r9
    f8d0:	430b      	orrs	r3, r1
    f8d2:	5423      	strb	r3, [r4, r0]
            tmp      = a->start;
    f8d4:	69a1      	ldr	r1, [r4, #24]
            a->start = a->end;
    f8d6:	69e0      	ldr	r0, [r4, #28]
    f8d8:	61a0      	str	r0, [r4, #24]
            a->end   = tmp;
    f8da:	61e1      	str	r1, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
    f8dc:	07db      	lsls	r3, r3, #31
    f8de:	d400      	bmi.n	f8e2 <anim_task+0x126>
    f8e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f8e2:	6222      	str	r2, [r4, #32]
    f8e4:	e7ab      	b.n	f83e <anim_task+0x82>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
    f8e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f8e8:	2a00      	cmp	r2, #0
    f8ea:	d001      	beq.n	f8f0 <anim_task+0x134>
    f8ec:	2800      	cmp	r0, #0
    f8ee:	d028      	beq.n	f942 <anim_task+0x186>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
    f8f0:	2240      	movs	r2, #64	; 0x40
    f8f2:	0021      	movs	r1, r4
    f8f4:	4668      	mov	r0, sp
    f8f6:	4b21      	ldr	r3, [pc, #132]	; (f97c <anim_task+0x1c0>)
    f8f8:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
    f8fa:	0021      	movs	r1, r4
    f8fc:	4817      	ldr	r0, [pc, #92]	; (f95c <anim_task+0x1a0>)
    f8fe:	4b20      	ldr	r3, [pc, #128]	; (f980 <anim_task+0x1c4>)
    f900:	4798      	blx	r3
        lv_mem_free(a);
    f902:	0020      	movs	r0, r4
    f904:	4b1f      	ldr	r3, [pc, #124]	; (f984 <anim_task+0x1c8>)
    f906:	4798      	blx	r3
        anim_mark_list_change();
    f908:	4b1f      	ldr	r3, [pc, #124]	; (f988 <anim_task+0x1cc>)
    f90a:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
    f90c:	9b03      	ldr	r3, [sp, #12]
    f90e:	2b00      	cmp	r3, #0
    f910:	d095      	beq.n	f83e <anim_task+0x82>
    f912:	4668      	mov	r0, sp
    f914:	4798      	blx	r3
    f916:	e792      	b.n	f83e <anim_task+0x82>
    last_task_run = lv_tick_get();
    f918:	4b1c      	ldr	r3, [pc, #112]	; (f98c <anim_task+0x1d0>)
    f91a:	4798      	blx	r3
    f91c:	4b12      	ldr	r3, [pc, #72]	; (f968 <anim_task+0x1ac>)
    f91e:	6018      	str	r0, [r3, #0]
}
    f920:	b011      	add	sp, #68	; 0x44
    f922:	bc0c      	pop	{r2, r3}
    f924:	4690      	mov	r8, r2
    f926:	4699      	mov	r9, r3
    f928:	bdf0      	pop	{r4, r5, r6, r7, pc}
            a->act_time += elaps;
    f92a:	6263      	str	r3, [r4, #36]	; 0x24
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    f92c:	0021      	movs	r1, r4
    f92e:	480b      	ldr	r0, [pc, #44]	; (f95c <anim_task+0x1a0>)
    f930:	4b0c      	ldr	r3, [pc, #48]	; (f964 <anim_task+0x1a8>)
    f932:	4798      	blx	r3
    f934:	0004      	movs	r4, r0
    f936:	e78b      	b.n	f850 <anim_task+0x94>
            a->act_time += elaps;
    f938:	6263      	str	r3, [r4, #36]	; 0x24
    f93a:	e79d      	b.n	f878 <anim_task+0xbc>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
    f93c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f93e:	2a00      	cmp	r2, #0
    f940:	d0d6      	beq.n	f8f0 <anim_task+0x134>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
    f942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f944:	4259      	negs	r1, r3
    f946:	6261      	str	r1, [r4, #36]	; 0x24
    f948:	e7ba      	b.n	f8c0 <anim_task+0x104>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
    f94a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f94c:	425a      	negs	r2, r3
    f94e:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
    f950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f952:	2a00      	cmp	r2, #0
    f954:	d100      	bne.n	f958 <anim_task+0x19c>
    f956:	e772      	b.n	f83e <anim_task+0x82>
    f958:	e7f3      	b.n	f942 <anim_task+0x186>
    f95a:	46c0      	nop			; (mov r8, r8)
    f95c:	20004d88 	.word	0x20004d88
    f960:	00010605 	.word	0x00010605
    f964:	0001061d 	.word	0x0001061d
    f968:	20002be4 	.word	0x20002be4
    f96c:	0000f741 	.word	0x0000f741
    f970:	20002be0 	.word	0x20002be0
    f974:	0000f751 	.word	0x0000f751
    f978:	0000ffff 	.word	0x0000ffff
    f97c:	00010c25 	.word	0x00010c25
    f980:	000106ed 	.word	0x000106ed
    f984:	00010ad1 	.word	0x00010ad1
    f988:	0000f77d 	.word	0x0000f77d
    f98c:	0000f725 	.word	0x0000f725

0000f990 <_lv_anim_core_init>:
{
    f990:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
    f992:	2140      	movs	r1, #64	; 0x40
    f994:	480a      	ldr	r0, [pc, #40]	; (f9c0 <_lv_anim_core_init+0x30>)
    f996:	4b0b      	ldr	r3, [pc, #44]	; (f9c4 <_lv_anim_core_init+0x34>)
    f998:	4798      	blx	r3
    last_task_run = lv_tick_get();
    f99a:	4b0b      	ldr	r3, [pc, #44]	; (f9c8 <_lv_anim_core_init+0x38>)
    f99c:	4798      	blx	r3
    f99e:	4b0b      	ldr	r3, [pc, #44]	; (f9cc <_lv_anim_core_init+0x3c>)
    f9a0:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
    f9a2:	2300      	movs	r3, #0
    f9a4:	2204      	movs	r2, #4
    f9a6:	211e      	movs	r1, #30
    f9a8:	4809      	ldr	r0, [pc, #36]	; (f9d0 <_lv_anim_core_init+0x40>)
    f9aa:	4c0a      	ldr	r4, [pc, #40]	; (f9d4 <_lv_anim_core_init+0x44>)
    f9ac:	47a0      	blx	r4
    f9ae:	4b0a      	ldr	r3, [pc, #40]	; (f9d8 <_lv_anim_core_init+0x48>)
    f9b0:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
    f9b2:	4b0a      	ldr	r3, [pc, #40]	; (f9dc <_lv_anim_core_init+0x4c>)
    f9b4:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actaully changed*/
    f9b6:	2200      	movs	r2, #0
    f9b8:	4b09      	ldr	r3, [pc, #36]	; (f9e0 <_lv_anim_core_init+0x50>)
    f9ba:	701a      	strb	r2, [r3, #0]
}
    f9bc:	bd10      	pop	{r4, pc}
    f9be:	46c0      	nop			; (mov r8, r8)
    f9c0:	20004d88 	.word	0x20004d88
    f9c4:	00010551 	.word	0x00010551
    f9c8:	0000f725 	.word	0x0000f725
    f9cc:	20002be4 	.word	0x20002be4
    f9d0:	0000f7bd 	.word	0x0000f7bd
    f9d4:	00011571 	.word	0x00011571
    f9d8:	20002bdc 	.word	0x20002bdc
    f9dc:	0000f77d 	.word	0x0000f77d
    f9e0:	20002be0 	.word	0x20002be0

0000f9e4 <lv_anim_init>:
{
    f9e4:	b510      	push	{r4, lr}
    f9e6:	0004      	movs	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
    f9e8:	2140      	movs	r1, #64	; 0x40
    f9ea:	4b0d      	ldr	r3, [pc, #52]	; (fa20 <lv_anim_init+0x3c>)
    f9ec:	4798      	blx	r3
    a->time    = 500;
    f9ee:	23fa      	movs	r3, #250	; 0xfa
    f9f0:	005b      	lsls	r3, r3, #1
    f9f2:	6223      	str	r3, [r4, #32]
    a->start   = 0;
    f9f4:	2300      	movs	r3, #0
    f9f6:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
    f9f8:	3364      	adds	r3, #100	; 0x64
    f9fa:	61e3      	str	r3, [r4, #28]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    f9fc:	4b09      	ldr	r3, [pc, #36]	; (fa24 <lv_anim_init+0x40>)
    f9fe:	781a      	ldrb	r2, [r3, #0]
    fa00:	7422      	strb	r2, [r4, #16]
    fa02:	785a      	ldrb	r2, [r3, #1]
    fa04:	7462      	strb	r2, [r4, #17]
    fa06:	789a      	ldrb	r2, [r3, #2]
    fa08:	74a2      	strb	r2, [r4, #18]
    fa0a:	78db      	ldrb	r3, [r3, #3]
    fa0c:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
    fa0e:	2301      	movs	r3, #1
    fa10:	86a3      	strh	r3, [r4, #52]	; 0x34
    a->early_apply = 1;
    fa12:	2236      	movs	r2, #54	; 0x36
    fa14:	5ca3      	ldrb	r3, [r4, r2]
    fa16:	2101      	movs	r1, #1
    fa18:	430b      	orrs	r3, r1
    fa1a:	54a3      	strb	r3, [r4, r2]
}
    fa1c:	bd10      	pop	{r4, pc}
    fa1e:	46c0      	nop			; (mov r8, r8)
    fa20:	00010fe5 	.word	0x00010fe5
    fa24:	0001c848 	.word	0x0001c848

0000fa28 <lv_anim_del>:
{
    fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa2a:	46d6      	mov	lr, sl
    fa2c:	b500      	push	{lr}
    fa2e:	b082      	sub	sp, #8
    fa30:	0006      	movs	r6, r0
    fa32:	468a      	mov	sl, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
    fa34:	4815      	ldr	r0, [pc, #84]	; (fa8c <lv_anim_del+0x64>)
    fa36:	4b16      	ldr	r3, [pc, #88]	; (fa90 <lv_anim_del+0x68>)
    fa38:	4798      	blx	r3
    fa3a:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
    fa3c:	d01e      	beq.n	fa7c <lv_anim_del+0x54>
    fa3e:	2300      	movs	r3, #0
    fa40:	9301      	str	r3, [sp, #4]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    fa42:	4f14      	ldr	r7, [pc, #80]	; (fa94 <lv_anim_del+0x6c>)
    fa44:	e00c      	b.n	fa60 <lv_anim_del+0x38>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
    fa46:	0021      	movs	r1, r4
    fa48:	4810      	ldr	r0, [pc, #64]	; (fa8c <lv_anim_del+0x64>)
    fa4a:	4b13      	ldr	r3, [pc, #76]	; (fa98 <lv_anim_del+0x70>)
    fa4c:	4798      	blx	r3
            lv_mem_free(a);
    fa4e:	0020      	movs	r0, r4
    fa50:	4b12      	ldr	r3, [pc, #72]	; (fa9c <lv_anim_del+0x74>)
    fa52:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
    fa54:	4b12      	ldr	r3, [pc, #72]	; (faa0 <lv_anim_del+0x78>)
    fa56:	4798      	blx	r3
            del = true;
    fa58:	2301      	movs	r3, #1
    fa5a:	9301      	str	r3, [sp, #4]
    fa5c:	1e2c      	subs	r4, r5, #0
    while(a != NULL) {
    fa5e:	d00f      	beq.n	fa80 <lv_anim_del+0x58>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
    fa60:	0021      	movs	r1, r4
    fa62:	480a      	ldr	r0, [pc, #40]	; (fa8c <lv_anim_del+0x64>)
    fa64:	47b8      	blx	r7
    fa66:	0005      	movs	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
    fa68:	6823      	ldr	r3, [r4, #0]
    fa6a:	42b3      	cmp	r3, r6
    fa6c:	d1f6      	bne.n	fa5c <lv_anim_del+0x34>
    fa6e:	6863      	ldr	r3, [r4, #4]
    fa70:	4553      	cmp	r3, sl
    fa72:	d0e8      	beq.n	fa46 <lv_anim_del+0x1e>
    fa74:	4653      	mov	r3, sl
    fa76:	2b00      	cmp	r3, #0
    fa78:	d1f0      	bne.n	fa5c <lv_anim_del+0x34>
    fa7a:	e7e4      	b.n	fa46 <lv_anim_del+0x1e>
    bool del = false;
    fa7c:	2300      	movs	r3, #0
    fa7e:	9301      	str	r3, [sp, #4]
}
    fa80:	9801      	ldr	r0, [sp, #4]
    fa82:	b002      	add	sp, #8
    fa84:	bc04      	pop	{r2}
    fa86:	4692      	mov	sl, r2
    fa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa8a:	46c0      	nop			; (mov r8, r8)
    fa8c:	20004d88 	.word	0x20004d88
    fa90:	00010605 	.word	0x00010605
    fa94:	0001061d 	.word	0x0001061d
    fa98:	000106ed 	.word	0x000106ed
    fa9c:	00010ad1 	.word	0x00010ad1
    faa0:	0000f77d 	.word	0x0000f77d

0000faa4 <lv_anim_start>:
{
    faa4:	b570      	push	{r4, r5, r6, lr}
    faa6:	0005      	movs	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
    faa8:	6841      	ldr	r1, [r0, #4]
    faaa:	2900      	cmp	r1, #0
    faac:	d002      	beq.n	fab4 <lv_anim_start+0x10>
    faae:	6800      	ldr	r0, [r0, #0]
    fab0:	4b19      	ldr	r3, [pc, #100]	; (fb18 <lv_anim_start+0x74>)
    fab2:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
    fab4:	4819      	ldr	r0, [pc, #100]	; (fb1c <lv_anim_start+0x78>)
    fab6:	4b1a      	ldr	r3, [pc, #104]	; (fb20 <lv_anim_start+0x7c>)
    fab8:	4798      	blx	r3
    faba:	2800      	cmp	r0, #0
    fabc:	d120      	bne.n	fb00 <lv_anim_start+0x5c>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
    fabe:	4817      	ldr	r0, [pc, #92]	; (fb1c <lv_anim_start+0x78>)
    fac0:	4b18      	ldr	r3, [pc, #96]	; (fb24 <lv_anim_start+0x80>)
    fac2:	4798      	blx	r3
    fac4:	0004      	movs	r4, r0
    LV_ASSERT_MEM(new_anim);
    fac6:	4b18      	ldr	r3, [pc, #96]	; (fb28 <lv_anim_start+0x84>)
    fac8:	4798      	blx	r3
    faca:	2800      	cmp	r0, #0
    facc:	d01e      	beq.n	fb0c <lv_anim_start+0x68>
    if(new_anim == NULL) return;
    face:	2c00      	cmp	r4, #0
    fad0:	d015      	beq.n	fafe <lv_anim_start+0x5a>
    a->time_orig = a->time;
    fad2:	6a2b      	ldr	r3, [r5, #32]
    fad4:	63ab      	str	r3, [r5, #56]	; 0x38
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
    fad6:	2240      	movs	r2, #64	; 0x40
    fad8:	0029      	movs	r1, r5
    fada:	0020      	movs	r0, r4
    fadc:	4b13      	ldr	r3, [pc, #76]	; (fb2c <lv_anim_start+0x88>)
    fade:	4798      	blx	r3
    if(new_anim->early_apply) {
    fae0:	2336      	movs	r3, #54	; 0x36
    fae2:	5ce3      	ldrb	r3, [r4, r3]
    fae4:	07db      	lsls	r3, r3, #31
    fae6:	d508      	bpl.n	fafa <lv_anim_start+0x56>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
    fae8:	6863      	ldr	r3, [r4, #4]
    faea:	2b00      	cmp	r3, #0
    faec:	d005      	beq.n	fafa <lv_anim_start+0x56>
    faee:	6820      	ldr	r0, [r4, #0]
    faf0:	2800      	cmp	r0, #0
    faf2:	d002      	beq.n	fafa <lv_anim_start+0x56>
    faf4:	2218      	movs	r2, #24
    faf6:	5ea1      	ldrsh	r1, [r4, r2]
    faf8:	4798      	blx	r3
    anim_mark_list_change();
    fafa:	4b0d      	ldr	r3, [pc, #52]	; (fb30 <lv_anim_start+0x8c>)
    fafc:	4798      	blx	r3
}
    fafe:	bd70      	pop	{r4, r5, r6, pc}
        last_task_run = lv_tick_get() - 1;
    fb00:	4b0c      	ldr	r3, [pc, #48]	; (fb34 <lv_anim_start+0x90>)
    fb02:	4798      	blx	r3
    fb04:	3801      	subs	r0, #1
    fb06:	4b0c      	ldr	r3, [pc, #48]	; (fb38 <lv_anim_start+0x94>)
    fb08:	6018      	str	r0, [r3, #0]
    fb0a:	e7d8      	b.n	fabe <lv_anim_start+0x1a>
    LV_ASSERT_MEM(new_anim);
    fb0c:	0022      	movs	r2, r4
    fb0e:	2300      	movs	r3, #0
    fb10:	480a      	ldr	r0, [pc, #40]	; (fb3c <lv_anim_start+0x98>)
    fb12:	490b      	ldr	r1, [pc, #44]	; (fb40 <lv_anim_start+0x9c>)
    fb14:	4788      	blx	r1
    fb16:	e7fe      	b.n	fb16 <lv_anim_start+0x72>
    fb18:	0000fa29 	.word	0x0000fa29
    fb1c:	20004d88 	.word	0x20004d88
    fb20:	000108ad 	.word	0x000108ad
    fb24:	00010565 	.word	0x00010565
    fb28:	00001415 	.word	0x00001415
    fb2c:	00010c25 	.word	0x00010c25
    fb30:	0000f77d 	.word	0x0000f77d
    fb34:	0000f725 	.word	0x0000f725
    fb38:	20002be4 	.word	0x20002be4
    fb3c:	00018804 	.word	0x00018804
    fb40:	0000141d 	.word	0x0000141d

0000fb44 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
    fb44:	b570      	push	{r4, r5, r6, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
    fb46:	2300      	movs	r3, #0
    fb48:	5ec6      	ldrsh	r6, [r0, r3]
    fb4a:	2304      	movs	r3, #4
    fb4c:	5ec2      	ldrsh	r2, [r0, r3]
    fb4e:	1b92      	subs	r2, r2, r6
    fb50:	0fd4      	lsrs	r4, r2, #31
    fb52:	18a4      	adds	r4, r4, r2
    fb54:	1064      	asrs	r4, r4, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
    fb56:	b2a5      	uxth	r5, r4

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;

    int32_t r_sqrd = r * r;
    fb58:	b224      	sxth	r4, r4
    lv_coord_t px = p->x - cx;
    fb5a:	880b      	ldrh	r3, [r1, #0]
    fb5c:	1b9b      	subs	r3, r3, r6
    fb5e:	1b5b      	subs	r3, r3, r5
    int32_t dist = (px * px) + (py * py);
    fb60:	b21b      	sxth	r3, r3
    lv_coord_t py = p->y - cy;
    fb62:	884a      	ldrh	r2, [r1, #2]
    fb64:	8841      	ldrh	r1, [r0, #2]
    fb66:	1a52      	subs	r2, r2, r1
    fb68:	1b52      	subs	r2, r2, r5
    int32_t dist = (px * px) + (py * py);
    fb6a:	b212      	sxth	r2, r2
    int32_t r_sqrd = r * r;
    fb6c:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
    fb6e:	435b      	muls	r3, r3
    fb70:	4352      	muls	r2, r2
    fb72:	189b      	adds	r3, r3, r2

    if(dist <= r_sqrd)
    fb74:	17e0      	asrs	r0, r4, #31
    fb76:	0fda      	lsrs	r2, r3, #31
    fb78:	429c      	cmp	r4, r3
    fb7a:	4150      	adcs	r0, r2
    fb7c:	b2c0      	uxtb	r0, r0
        return true;
    else
        return false;
}
    fb7e:	bd70      	pop	{r4, r5, r6, pc}

0000fb80 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
    fb80:	1e4b      	subs	r3, r1, #1
    fb82:	8841      	ldrh	r1, [r0, #2]
    fb84:	18c9      	adds	r1, r1, r3
    fb86:	80c1      	strh	r1, [r0, #6]
}
    fb88:	4770      	bx	lr

0000fb8a <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
    fb8a:	2304      	movs	r3, #4
    fb8c:	5ec2      	ldrsh	r2, [r0, r3]
    fb8e:	2100      	movs	r1, #0
    fb90:	5e43      	ldrsh	r3, [r0, r1]
    fb92:	1ad2      	subs	r2, r2, r3
    fb94:	3201      	adds	r2, #1
    fb96:	2106      	movs	r1, #6
    fb98:	5e43      	ldrsh	r3, [r0, r1]
    fb9a:	2102      	movs	r1, #2
    fb9c:	5e40      	ldrsh	r0, [r0, r1]
    fb9e:	1a18      	subs	r0, r3, r0
    fba0:	3001      	adds	r0, #1
    fba2:	4350      	muls	r0, r2
}
    fba4:	4770      	bx	lr

0000fba6 <_lv_area_intersect>:
{
    fba6:	b5f0      	push	{r4, r5, r6, r7, lr}
    fba8:	46c6      	mov	lr, r8
    fbaa:	b500      	push	{lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
    fbac:	880d      	ldrh	r5, [r1, #0]
    fbae:	8813      	ldrh	r3, [r2, #0]
    fbb0:	1c1c      	adds	r4, r3, #0
    fbb2:	b21b      	sxth	r3, r3
    fbb4:	b22e      	sxth	r6, r5
    fbb6:	42b3      	cmp	r3, r6
    fbb8:	da00      	bge.n	fbbc <_lv_area_intersect+0x16>
    fbba:	1c2c      	adds	r4, r5, #0
    fbbc:	b226      	sxth	r6, r4
    fbbe:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
    fbc0:	884d      	ldrh	r5, [r1, #2]
    fbc2:	8853      	ldrh	r3, [r2, #2]
    fbc4:	1c1c      	adds	r4, r3, #0
    fbc6:	b21b      	sxth	r3, r3
    fbc8:	b22f      	sxth	r7, r5
    fbca:	42bb      	cmp	r3, r7
    fbcc:	da00      	bge.n	fbd0 <_lv_area_intersect+0x2a>
    fbce:	1c2c      	adds	r4, r5, #0
    fbd0:	b227      	sxth	r7, r4
    fbd2:	8044      	strh	r4, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
    fbd4:	888d      	ldrh	r5, [r1, #4]
    fbd6:	8893      	ldrh	r3, [r2, #4]
    fbd8:	1c1c      	adds	r4, r3, #0
    fbda:	b21b      	sxth	r3, r3
    fbdc:	4698      	mov	r8, r3
    fbde:	b22b      	sxth	r3, r5
    fbe0:	4598      	cmp	r8, r3
    fbe2:	dd00      	ble.n	fbe6 <_lv_area_intersect+0x40>
    fbe4:	1c2c      	adds	r4, r5, #0
    fbe6:	b225      	sxth	r5, r4
    fbe8:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
    fbea:	88c9      	ldrh	r1, [r1, #6]
    fbec:	88d3      	ldrh	r3, [r2, #6]
    fbee:	1c1a      	adds	r2, r3, #0
    fbf0:	b21b      	sxth	r3, r3
    fbf2:	b20c      	sxth	r4, r1
    fbf4:	42a3      	cmp	r3, r4
    fbf6:	dd00      	ble.n	fbfa <_lv_area_intersect+0x54>
    fbf8:	1c0a      	adds	r2, r1, #0
    fbfa:	b213      	sxth	r3, r2
    fbfc:	80c2      	strh	r2, [r0, #6]
        union_ok = false;
    fbfe:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
    fc00:	42ae      	cmp	r6, r5
    fc02:	dc04      	bgt.n	fc0e <_lv_area_intersect+0x68>
    fc04:	0ff8      	lsrs	r0, r7, #31
    fc06:	17da      	asrs	r2, r3, #31
    fc08:	42bb      	cmp	r3, r7
    fc0a:	4150      	adcs	r0, r2
    fc0c:	b2c0      	uxtb	r0, r0
}
    fc0e:	bc04      	pop	{r2}
    fc10:	4690      	mov	r8, r2
    fc12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fc14 <_lv_area_join>:
{
    fc14:	b570      	push	{r4, r5, r6, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
    fc16:	880d      	ldrh	r5, [r1, #0]
    fc18:	8813      	ldrh	r3, [r2, #0]
    fc1a:	1c1c      	adds	r4, r3, #0
    fc1c:	b21b      	sxth	r3, r3
    fc1e:	b22e      	sxth	r6, r5
    fc20:	42b3      	cmp	r3, r6
    fc22:	dd00      	ble.n	fc26 <_lv_area_join+0x12>
    fc24:	1c2c      	adds	r4, r5, #0
    fc26:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
    fc28:	884d      	ldrh	r5, [r1, #2]
    fc2a:	8853      	ldrh	r3, [r2, #2]
    fc2c:	1c1c      	adds	r4, r3, #0
    fc2e:	b21b      	sxth	r3, r3
    fc30:	b22e      	sxth	r6, r5
    fc32:	42b3      	cmp	r3, r6
    fc34:	dd00      	ble.n	fc38 <_lv_area_join+0x24>
    fc36:	1c2c      	adds	r4, r5, #0
    fc38:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
    fc3a:	888d      	ldrh	r5, [r1, #4]
    fc3c:	8893      	ldrh	r3, [r2, #4]
    fc3e:	1c1c      	adds	r4, r3, #0
    fc40:	b21b      	sxth	r3, r3
    fc42:	b22e      	sxth	r6, r5
    fc44:	42b3      	cmp	r3, r6
    fc46:	da00      	bge.n	fc4a <_lv_area_join+0x36>
    fc48:	1c2c      	adds	r4, r5, #0
    fc4a:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
    fc4c:	88c9      	ldrh	r1, [r1, #6]
    fc4e:	88d3      	ldrh	r3, [r2, #6]
    fc50:	1c1a      	adds	r2, r3, #0
    fc52:	b21b      	sxth	r3, r3
    fc54:	b20c      	sxth	r4, r1
    fc56:	42a3      	cmp	r3, r4
    fc58:	da00      	bge.n	fc5c <_lv_area_join+0x48>
    fc5a:	1c0a      	adds	r2, r1, #0
    fc5c:	80c2      	strh	r2, [r0, #6]
}
    fc5e:	bd70      	pop	{r4, r5, r6, pc}

0000fc60 <_lv_area_is_point_on>:
{
    fc60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc62:	46de      	mov	lr, fp
    fc64:	4657      	mov	r7, sl
    fc66:	464e      	mov	r6, r9
    fc68:	4645      	mov	r5, r8
    fc6a:	b5e0      	push	{r5, r6, r7, lr}
    fc6c:	b085      	sub	sp, #20
    fc6e:	000e      	movs	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
    fc70:	2300      	movs	r3, #0
    fc72:	5ecc      	ldrsh	r4, [r1, r3]
    fc74:	2300      	movs	r3, #0
    fc76:	5ec1      	ldrsh	r1, [r0, r3]
        return false;
    fc78:	2300      	movs	r3, #0
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
    fc7a:	428c      	cmp	r4, r1
    fc7c:	db5e      	blt.n	fd3c <_lv_area_is_point_on+0xdc>
    fc7e:	2504      	movs	r5, #4
    fc80:	5f43      	ldrsh	r3, [r0, r5]
    fc82:	4698      	mov	r8, r3
        return false;
    fc84:	2300      	movs	r3, #0
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
    fc86:	4544      	cmp	r4, r8
    fc88:	dc58      	bgt.n	fd3c <_lv_area_is_point_on+0xdc>
    fc8a:	2302      	movs	r3, #2
    fc8c:	5ef4      	ldrsh	r4, [r6, r3]
    fc8e:	2502      	movs	r5, #2
    fc90:	5f43      	ldrsh	r3, [r0, r5]
    fc92:	469a      	mov	sl, r3
        return false;
    fc94:	2300      	movs	r3, #0
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
    fc96:	4554      	cmp	r4, sl
    fc98:	db50      	blt.n	fd3c <_lv_area_is_point_on+0xdc>
    fc9a:	2306      	movs	r3, #6
    fc9c:	5ec3      	ldrsh	r3, [r0, r3]
    fc9e:	001d      	movs	r5, r3
    fca0:	9301      	str	r3, [sp, #4]
        return false;
    fca2:	2300      	movs	r3, #0
    if(!is_on_rect)
    fca4:	42ac      	cmp	r4, r5
    fca6:	dc49      	bgt.n	fd3c <_lv_area_is_point_on+0xdc>
    if(radius <= 0) {
    fca8:	2a00      	cmp	r2, #0
    fcaa:	dc00      	bgt.n	fcae <_lv_area_is_point_on+0x4e>
    fcac:	e09b      	b.n	fde6 <_lv_area_is_point_on+0x186>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    fcae:	4643      	mov	r3, r8
    fcb0:	4668      	mov	r0, sp
    fcb2:	8003      	strh	r3, [r0, #0]
    fcb4:	8803      	ldrh	r3, [r0, #0]
    fcb6:	4699      	mov	r9, r3
    fcb8:	b28c      	uxth	r4, r1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    fcba:	b2af      	uxth	r7, r5
    fcbc:	4653      	mov	r3, sl
    fcbe:	8003      	strh	r3, [r0, #0]
    fcc0:	8800      	ldrh	r0, [r0, #0]
    corner_area.x1 = a_p->x1;
    fcc2:	ab02      	add	r3, sp, #8
    fcc4:	8019      	strh	r1, [r3, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    fcc6:	464b      	mov	r3, r9
    fcc8:	3301      	adds	r3, #1
    fcca:	1b1b      	subs	r3, r3, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
    fccc:	b21b      	sxth	r3, r3
    fcce:	0fd9      	lsrs	r1, r3, #31
    fcd0:	18cb      	adds	r3, r1, r3
    fcd2:	105b      	asrs	r3, r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    fcd4:	1c79      	adds	r1, r7, #1
    fcd6:	1a09      	subs	r1, r1, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
    fcd8:	b209      	sxth	r1, r1
    fcda:	0fcd      	lsrs	r5, r1, #31
    fcdc:	186d      	adds	r5, r5, r1
    fcde:	106d      	asrs	r5, r5, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
    fce0:	1c19      	adds	r1, r3, #0
    fce2:	b21b      	sxth	r3, r3
    fce4:	42ab      	cmp	r3, r5
    fce6:	dd00      	ble.n	fcea <_lv_area_is_point_on+0x8a>
    fce8:	1c29      	adds	r1, r5, #0
    corner_area.x2 = a_p->x1 + radius;
    fcea:	1c0d      	adds	r5, r1, #0
    fcec:	b209      	sxth	r1, r1
    fcee:	4291      	cmp	r1, r2
    fcf0:	dd00      	ble.n	fcf4 <_lv_area_is_point_on+0x94>
    fcf2:	1c15      	adds	r5, r2, #0
    fcf4:	b2ad      	uxth	r5, r5
    fcf6:	192c      	adds	r4, r5, r4
    fcf8:	b2a4      	uxth	r4, r4
    fcfa:	ab02      	add	r3, sp, #8
    fcfc:	809c      	strh	r4, [r3, #4]
    corner_area.y1 = a_p->y1;
    fcfe:	4652      	mov	r2, sl
    fd00:	805a      	strh	r2, [r3, #2]
    corner_area.y2 = a_p->y1 + radius;
    fd02:	1828      	adds	r0, r5, r0
    fd04:	b283      	uxth	r3, r0
    fd06:	9300      	str	r3, [sp, #0]
    fd08:	466b      	mov	r3, sp
    fd0a:	2100      	movs	r1, #0
    fd0c:	5e5a      	ldrsh	r2, [r3, r1]
    fd0e:	4693      	mov	fp, r2
    fd10:	aa02      	add	r2, sp, #8
    fd12:	4659      	mov	r1, fp
    fd14:	80d1      	strh	r1, [r2, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
    fd16:	2200      	movs	r2, #0
    fd18:	0031      	movs	r1, r6
    fd1a:	a802      	add	r0, sp, #8
    fd1c:	f7ff ffa0 	bl	fc60 <_lv_area_is_point_on>
    fd20:	2800      	cmp	r0, #0
    fd22:	d013      	beq.n	fd4c <_lv_area_is_point_on+0xec>
        corner_area.x2 += radius;
    fd24:	192c      	adds	r4, r5, r4
    fd26:	aa02      	add	r2, sp, #8
    fd28:	8094      	strh	r4, [r2, #4]
        corner_area.y2 += radius;
    fd2a:	9b00      	ldr	r3, [sp, #0]
    fd2c:	469c      	mov	ip, r3
    fd2e:	4465      	add	r5, ip
    fd30:	80d5      	strh	r5, [r2, #6]
        return lv_point_within_circle(&corner_area, p_p);
    fd32:	0031      	movs	r1, r6
    fd34:	0010      	movs	r0, r2
    fd36:	4b2d      	ldr	r3, [pc, #180]	; (fdec <_lv_area_is_point_on+0x18c>)
    fd38:	4798      	blx	r3
    fd3a:	0003      	movs	r3, r0
}
    fd3c:	0018      	movs	r0, r3
    fd3e:	b005      	add	sp, #20
    fd40:	bc3c      	pop	{r2, r3, r4, r5}
    fd42:	4690      	mov	r8, r2
    fd44:	4699      	mov	r9, r3
    fd46:	46a2      	mov	sl, r4
    fd48:	46ab      	mov	fp, r5
    fd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    corner_area.y1 = a_p->y2 - radius;
    fd4c:	1b7f      	subs	r7, r7, r5
    fd4e:	b2bf      	uxth	r7, r7
    fd50:	ab02      	add	r3, sp, #8
    fd52:	805f      	strh	r7, [r3, #2]
    corner_area.y2 = a_p->y2;
    fd54:	466a      	mov	r2, sp
    fd56:	8892      	ldrh	r2, [r2, #4]
    fd58:	80da      	strh	r2, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
    fd5a:	2200      	movs	r2, #0
    fd5c:	0031      	movs	r1, r6
    fd5e:	0018      	movs	r0, r3
    fd60:	f7ff ff7e 	bl	fc60 <_lv_area_is_point_on>
    fd64:	2800      	cmp	r0, #0
    fd66:	d00a      	beq.n	fd7e <_lv_area_is_point_on+0x11e>
        corner_area.x2 += radius;
    fd68:	192c      	adds	r4, r5, r4
    fd6a:	ab02      	add	r3, sp, #8
    fd6c:	809c      	strh	r4, [r3, #4]
        corner_area.y1 -= radius;
    fd6e:	1b7d      	subs	r5, r7, r5
    fd70:	805d      	strh	r5, [r3, #2]
        return lv_point_within_circle(&corner_area, p_p);
    fd72:	0031      	movs	r1, r6
    fd74:	0018      	movs	r0, r3
    fd76:	4b1d      	ldr	r3, [pc, #116]	; (fdec <_lv_area_is_point_on+0x18c>)
    fd78:	4798      	blx	r3
    fd7a:	0003      	movs	r3, r0
    fd7c:	e7de      	b.n	fd3c <_lv_area_is_point_on+0xdc>
    corner_area.x1 = a_p->x2 - radius;
    fd7e:	464b      	mov	r3, r9
    fd80:	1b5c      	subs	r4, r3, r5
    fd82:	b2a4      	uxth	r4, r4
    fd84:	ab02      	add	r3, sp, #8
    fd86:	801c      	strh	r4, [r3, #0]
    corner_area.x2 = a_p->x2;
    fd88:	4642      	mov	r2, r8
    fd8a:	809a      	strh	r2, [r3, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
    fd8c:	2200      	movs	r2, #0
    fd8e:	0031      	movs	r1, r6
    fd90:	0018      	movs	r0, r3
    fd92:	f7ff ff65 	bl	fc60 <_lv_area_is_point_on>
    fd96:	2800      	cmp	r0, #0
    fd98:	d00a      	beq.n	fdb0 <_lv_area_is_point_on+0x150>
        corner_area.x1 -= radius;
    fd9a:	1b64      	subs	r4, r4, r5
    fd9c:	ab02      	add	r3, sp, #8
    fd9e:	801c      	strh	r4, [r3, #0]
        corner_area.y1 -= radius;
    fda0:	1b7d      	subs	r5, r7, r5
    fda2:	805d      	strh	r5, [r3, #2]
        return lv_point_within_circle(&corner_area, p_p);
    fda4:	0031      	movs	r1, r6
    fda6:	0018      	movs	r0, r3
    fda8:	4b10      	ldr	r3, [pc, #64]	; (fdec <_lv_area_is_point_on+0x18c>)
    fdaa:	4798      	blx	r3
    fdac:	0003      	movs	r3, r0
    fdae:	e7c5      	b.n	fd3c <_lv_area_is_point_on+0xdc>
    corner_area.y1 = a_p->y1;
    fdb0:	ab02      	add	r3, sp, #8
    fdb2:	4652      	mov	r2, sl
    fdb4:	805a      	strh	r2, [r3, #2]
    corner_area.y2 = a_p->y1 + radius;
    fdb6:	465a      	mov	r2, fp
    fdb8:	80da      	strh	r2, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
    fdba:	2200      	movs	r2, #0
    fdbc:	0031      	movs	r1, r6
    fdbe:	0018      	movs	r0, r3
    fdc0:	f7ff ff4e 	bl	fc60 <_lv_area_is_point_on>
    return true;
    fdc4:	2301      	movs	r3, #1
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
    fdc6:	2800      	cmp	r0, #0
    fdc8:	d0b8      	beq.n	fd3c <_lv_area_is_point_on+0xdc>
        corner_area.x1 -= radius;
    fdca:	1b64      	subs	r4, r4, r5
    fdcc:	ab02      	add	r3, sp, #8
    fdce:	801c      	strh	r4, [r3, #0]
        corner_area.y2 += radius;
    fdd0:	9b00      	ldr	r3, [sp, #0]
    fdd2:	469c      	mov	ip, r3
    fdd4:	4465      	add	r5, ip
    fdd6:	ab02      	add	r3, sp, #8
    fdd8:	80dd      	strh	r5, [r3, #6]
        return lv_point_within_circle(&corner_area, p_p);
    fdda:	0031      	movs	r1, r6
    fddc:	0018      	movs	r0, r3
    fdde:	4b03      	ldr	r3, [pc, #12]	; (fdec <_lv_area_is_point_on+0x18c>)
    fde0:	4798      	blx	r3
    fde2:	0003      	movs	r3, r0
    fde4:	e7aa      	b.n	fd3c <_lv_area_is_point_on+0xdc>
        return true;
    fde6:	2301      	movs	r3, #1
    fde8:	e7a8      	b.n	fd3c <_lv_area_is_point_on+0xdc>
    fdea:	46c0      	nop			; (mov r8, r8)
    fdec:	0000fb45 	.word	0x0000fb45

0000fdf0 <_lv_area_is_on>:
{
    fdf0:	b510      	push	{r4, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
    fdf2:	2300      	movs	r3, #0
    fdf4:	5ec4      	ldrsh	r4, [r0, r3]
    fdf6:	2304      	movs	r3, #4
    fdf8:	5eca      	ldrsh	r2, [r1, r3]
        return false;
    fdfa:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
    fdfc:	4294      	cmp	r4, r2
    fdfe:	dc16      	bgt.n	fe2e <_lv_area_is_on+0x3e>
    fe00:	2304      	movs	r3, #4
    fe02:	5ec4      	ldrsh	r4, [r0, r3]
    fe04:	2300      	movs	r3, #0
    fe06:	5eca      	ldrsh	r2, [r1, r3]
        return false;
    fe08:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
    fe0a:	4294      	cmp	r4, r2
    fe0c:	db0f      	blt.n	fe2e <_lv_area_is_on+0x3e>
    fe0e:	2302      	movs	r3, #2
    fe10:	5ec4      	ldrsh	r4, [r0, r3]
    fe12:	2306      	movs	r3, #6
    fe14:	5eca      	ldrsh	r2, [r1, r3]
        return false;
    fe16:	2300      	movs	r3, #0
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
    fe18:	4294      	cmp	r4, r2
    fe1a:	dc08      	bgt.n	fe2e <_lv_area_is_on+0x3e>
    fe1c:	2306      	movs	r3, #6
    fe1e:	5ec4      	ldrsh	r4, [r0, r3]
    fe20:	2302      	movs	r3, #2
    fe22:	5eca      	ldrsh	r2, [r1, r3]
    fe24:	17e3      	asrs	r3, r4, #31
    fe26:	0fd0      	lsrs	r0, r2, #31
    fe28:	4294      	cmp	r4, r2
    fe2a:	4143      	adcs	r3, r0
    fe2c:	b2db      	uxtb	r3, r3
}
    fe2e:	0018      	movs	r0, r3
    fe30:	bd10      	pop	{r4, pc}
	...

0000fe34 <_lv_area_is_in>:
{
    fe34:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe36:	46c6      	mov	lr, r8
    fe38:	b500      	push	{lr}
    fe3a:	b082      	sub	sp, #8
    fe3c:	0005      	movs	r5, r0
    fe3e:	000c      	movs	r4, r1
    fe40:	0016      	movs	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
    fe42:	2300      	movs	r3, #0
    fe44:	5ec7      	ldrsh	r7, [r0, r3]
    fe46:	2200      	movs	r2, #0
    fe48:	5e8b      	ldrsh	r3, [r1, r2]
    bool is_in = false;
    fe4a:	2000      	movs	r0, #0
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
    fe4c:	42bb      	cmp	r3, r7
    fe4e:	dc14      	bgt.n	fe7a <_lv_area_is_in+0x46>
    fe50:	2302      	movs	r3, #2
    fe52:	5eea      	ldrsh	r2, [r5, r3]
    fe54:	2102      	movs	r1, #2
    fe56:	5e63      	ldrsh	r3, [r4, r1]
    fe58:	429a      	cmp	r2, r3
    fe5a:	db0e      	blt.n	fe7a <_lv_area_is_in+0x46>
    fe5c:	2304      	movs	r3, #4
    fe5e:	5eea      	ldrsh	r2, [r5, r3]
    fe60:	2104      	movs	r1, #4
    fe62:	5e63      	ldrsh	r3, [r4, r1]
    fe64:	429a      	cmp	r2, r3
    fe66:	dc08      	bgt.n	fe7a <_lv_area_is_in+0x46>
    fe68:	2206      	movs	r2, #6
    fe6a:	5eab      	ldrsh	r3, [r5, r2]
    fe6c:	2106      	movs	r1, #6
    fe6e:	5e62      	ldrsh	r2, [r4, r1]
    fe70:	0fd8      	lsrs	r0, r3, #31
    fe72:	17d1      	asrs	r1, r2, #31
    fe74:	429a      	cmp	r2, r3
    fe76:	4148      	adcs	r0, r1
    fe78:	b2c0      	uxtb	r0, r0
    if(radius == 0) return is_in;
    fe7a:	2e00      	cmp	r6, #0
    fe7c:	d103      	bne.n	fe86 <_lv_area_is_in+0x52>
}
    fe7e:	b002      	add	sp, #8
    fe80:	bc04      	pop	{r2}
    fe82:	4690      	mov	r8, r2
    fe84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p.x = ain_p->x1;
    fe86:	a901      	add	r1, sp, #4
    fe88:	800f      	strh	r7, [r1, #0]
    p.y = ain_p->y1;
    fe8a:	886b      	ldrh	r3, [r5, #2]
    fe8c:	804b      	strh	r3, [r1, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
    fe8e:	0032      	movs	r2, r6
    fe90:	0020      	movs	r0, r4
    fe92:	4b10      	ldr	r3, [pc, #64]	; (fed4 <_lv_area_is_in+0xa0>)
    fe94:	4798      	blx	r3
    fe96:	2800      	cmp	r0, #0
    fe98:	d0f1      	beq.n	fe7e <_lv_area_is_in+0x4a>
    p.x = ain_p->x2;
    fe9a:	2204      	movs	r2, #4
    fe9c:	5eab      	ldrsh	r3, [r5, r2]
    fe9e:	4698      	mov	r8, r3
    fea0:	a901      	add	r1, sp, #4
    fea2:	800b      	strh	r3, [r1, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
    fea4:	0032      	movs	r2, r6
    fea6:	0020      	movs	r0, r4
    fea8:	4b0a      	ldr	r3, [pc, #40]	; (fed4 <_lv_area_is_in+0xa0>)
    feaa:	4798      	blx	r3
    feac:	2800      	cmp	r0, #0
    feae:	d0e6      	beq.n	fe7e <_lv_area_is_in+0x4a>
    p.x = ain_p->x1;
    feb0:	a901      	add	r1, sp, #4
    feb2:	800f      	strh	r7, [r1, #0]
    p.y = ain_p->y2;
    feb4:	88eb      	ldrh	r3, [r5, #6]
    feb6:	804b      	strh	r3, [r1, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
    feb8:	0032      	movs	r2, r6
    feba:	0020      	movs	r0, r4
    febc:	4b05      	ldr	r3, [pc, #20]	; (fed4 <_lv_area_is_in+0xa0>)
    febe:	4798      	blx	r3
    fec0:	2800      	cmp	r0, #0
    fec2:	d0dc      	beq.n	fe7e <_lv_area_is_in+0x4a>
    p.x = ain_p->x2;
    fec4:	a901      	add	r1, sp, #4
    fec6:	4643      	mov	r3, r8
    fec8:	800b      	strh	r3, [r1, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
    feca:	0032      	movs	r2, r6
    fecc:	0020      	movs	r0, r4
    fece:	4b01      	ldr	r3, [pc, #4]	; (fed4 <_lv_area_is_in+0xa0>)
    fed0:	4798      	blx	r3
    fed2:	e7d4      	b.n	fe7e <_lv_area_is_in+0x4a>
    fed4:	0000fc61 	.word	0x0000fc61

0000fed8 <_lv_area_align>:
{
    fed8:	b530      	push	{r4, r5, lr}
    switch(align) {
    feda:	2a14      	cmp	r2, #20
    fedc:	d827      	bhi.n	ff2e <_lv_area_align+0x56>
    fede:	0092      	lsls	r2, r2, #2
    fee0:	4cb2      	ldr	r4, [pc, #712]	; (101ac <_lv_area_align+0x2d4>)
    fee2:	58a2      	ldr	r2, [r4, r2]
    fee4:	4697      	mov	pc, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    fee6:	8882      	ldrh	r2, [r0, #4]
    fee8:	3201      	adds	r2, #1
    feea:	8804      	ldrh	r4, [r0, #0]
    feec:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
    feee:	b212      	sxth	r2, r2
    fef0:	0fd4      	lsrs	r4, r2, #31
    fef2:	18a4      	adds	r4, r4, r2
    fef4:	1064      	asrs	r4, r4, #1
    fef6:	888a      	ldrh	r2, [r1, #4]
    fef8:	3201      	adds	r2, #1
    fefa:	880d      	ldrh	r5, [r1, #0]
    fefc:	1b52      	subs	r2, r2, r5
    fefe:	b212      	sxth	r2, r2
    ff00:	0fd5      	lsrs	r5, r2, #31
    ff02:	18aa      	adds	r2, r5, r2
    ff04:	1052      	asrs	r2, r2, #1
    ff06:	1aa2      	subs	r2, r4, r2
    ff08:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ff0a:	88c2      	ldrh	r2, [r0, #6]
    ff0c:	3201      	adds	r2, #1
    ff0e:	8844      	ldrh	r4, [r0, #2]
    ff10:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
    ff12:	b212      	sxth	r2, r2
    ff14:	0fd4      	lsrs	r4, r2, #31
    ff16:	18a4      	adds	r4, r4, r2
    ff18:	1064      	asrs	r4, r4, #1
    ff1a:	88ca      	ldrh	r2, [r1, #6]
    ff1c:	3201      	adds	r2, #1
    ff1e:	8849      	ldrh	r1, [r1, #2]
    ff20:	1a52      	subs	r2, r2, r1
    ff22:	b212      	sxth	r2, r2
    ff24:	0fd1      	lsrs	r1, r2, #31
    ff26:	188a      	adds	r2, r1, r2
    ff28:	1052      	asrs	r2, r2, #1
    ff2a:	1aa2      	subs	r2, r4, r2
    ff2c:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
    ff2e:	881a      	ldrh	r2, [r3, #0]
    ff30:	8801      	ldrh	r1, [r0, #0]
    ff32:	1852      	adds	r2, r2, r1
    ff34:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
    ff36:	885a      	ldrh	r2, [r3, #2]
    ff38:	8841      	ldrh	r1, [r0, #2]
    ff3a:	1852      	adds	r2, r2, r1
    ff3c:	805a      	strh	r2, [r3, #2]
}
    ff3e:	bd30      	pop	{r4, r5, pc}
            res->x = 0;
    ff40:	2200      	movs	r2, #0
    ff42:	801a      	strh	r2, [r3, #0]
            res->y = 0;
    ff44:	805a      	strh	r2, [r3, #2]
            break;
    ff46:	e7f2      	b.n	ff2e <_lv_area_align+0x56>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    ff48:	8882      	ldrh	r2, [r0, #4]
    ff4a:	3201      	adds	r2, #1
    ff4c:	8804      	ldrh	r4, [r0, #0]
    ff4e:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
    ff50:	b212      	sxth	r2, r2
    ff52:	0fd4      	lsrs	r4, r2, #31
    ff54:	18a4      	adds	r4, r4, r2
    ff56:	1064      	asrs	r4, r4, #1
    ff58:	888a      	ldrh	r2, [r1, #4]
    ff5a:	3201      	adds	r2, #1
    ff5c:	8809      	ldrh	r1, [r1, #0]
    ff5e:	1a52      	subs	r2, r2, r1
    ff60:	b212      	sxth	r2, r2
    ff62:	0fd1      	lsrs	r1, r2, #31
    ff64:	188a      	adds	r2, r1, r2
    ff66:	1052      	asrs	r2, r2, #1
    ff68:	1aa2      	subs	r2, r4, r2
    ff6a:	801a      	strh	r2, [r3, #0]
            res->y = 0;
    ff6c:	2200      	movs	r2, #0
    ff6e:	805a      	strh	r2, [r3, #2]
            break;
    ff70:	e7dd      	b.n	ff2e <_lv_area_align+0x56>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
    ff72:	8882      	ldrh	r2, [r0, #4]
    ff74:	888c      	ldrh	r4, [r1, #4]
    ff76:	1b12      	subs	r2, r2, r4
    ff78:	8804      	ldrh	r4, [r0, #0]
    ff7a:	1b12      	subs	r2, r2, r4
    ff7c:	8809      	ldrh	r1, [r1, #0]
    ff7e:	1852      	adds	r2, r2, r1
    ff80:	801a      	strh	r2, [r3, #0]
            res->y = 0;
    ff82:	2200      	movs	r2, #0
    ff84:	805a      	strh	r2, [r3, #2]
            break;
    ff86:	e7d2      	b.n	ff2e <_lv_area_align+0x56>
            res->x = 0;
    ff88:	2200      	movs	r2, #0
    ff8a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
    ff8c:	88c2      	ldrh	r2, [r0, #6]
    ff8e:	88cc      	ldrh	r4, [r1, #6]
    ff90:	1b12      	subs	r2, r2, r4
    ff92:	8844      	ldrh	r4, [r0, #2]
    ff94:	1b12      	subs	r2, r2, r4
    ff96:	8849      	ldrh	r1, [r1, #2]
    ff98:	1852      	adds	r2, r2, r1
    ff9a:	805a      	strh	r2, [r3, #2]
            break;
    ff9c:	e7c7      	b.n	ff2e <_lv_area_align+0x56>
    ff9e:	8882      	ldrh	r2, [r0, #4]
    ffa0:	3201      	adds	r2, #1
    ffa2:	8804      	ldrh	r4, [r0, #0]
    ffa4:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
    ffa6:	b212      	sxth	r2, r2
    ffa8:	0fd4      	lsrs	r4, r2, #31
    ffaa:	18a4      	adds	r4, r4, r2
    ffac:	1064      	asrs	r4, r4, #1
    ffae:	888a      	ldrh	r2, [r1, #4]
    ffb0:	3201      	adds	r2, #1
    ffb2:	880d      	ldrh	r5, [r1, #0]
    ffb4:	1b52      	subs	r2, r2, r5
    ffb6:	b212      	sxth	r2, r2
    ffb8:	0fd5      	lsrs	r5, r2, #31
    ffba:	18aa      	adds	r2, r5, r2
    ffbc:	1052      	asrs	r2, r2, #1
    ffbe:	1aa2      	subs	r2, r4, r2
    ffc0:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
    ffc2:	88c2      	ldrh	r2, [r0, #6]
    ffc4:	88cc      	ldrh	r4, [r1, #6]
    ffc6:	1b12      	subs	r2, r2, r4
    ffc8:	8844      	ldrh	r4, [r0, #2]
    ffca:	1b12      	subs	r2, r2, r4
    ffcc:	8849      	ldrh	r1, [r1, #2]
    ffce:	1852      	adds	r2, r2, r1
    ffd0:	805a      	strh	r2, [r3, #2]
            break;
    ffd2:	e7ac      	b.n	ff2e <_lv_area_align+0x56>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
    ffd4:	8882      	ldrh	r2, [r0, #4]
    ffd6:	888c      	ldrh	r4, [r1, #4]
    ffd8:	1b12      	subs	r2, r2, r4
    ffda:	8804      	ldrh	r4, [r0, #0]
    ffdc:	1b12      	subs	r2, r2, r4
    ffde:	880c      	ldrh	r4, [r1, #0]
    ffe0:	1912      	adds	r2, r2, r4
    ffe2:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
    ffe4:	88c2      	ldrh	r2, [r0, #6]
    ffe6:	88cc      	ldrh	r4, [r1, #6]
    ffe8:	1b12      	subs	r2, r2, r4
    ffea:	8844      	ldrh	r4, [r0, #2]
    ffec:	1b12      	subs	r2, r2, r4
    ffee:	8849      	ldrh	r1, [r1, #2]
    fff0:	1852      	adds	r2, r2, r1
    fff2:	805a      	strh	r2, [r3, #2]
            break;
    fff4:	e79b      	b.n	ff2e <_lv_area_align+0x56>
            res->x = 0;
    fff6:	2200      	movs	r2, #0
    fff8:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    fffa:	88c2      	ldrh	r2, [r0, #6]
    fffc:	3201      	adds	r2, #1
    fffe:	8844      	ldrh	r4, [r0, #2]
   10000:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10002:	b212      	sxth	r2, r2
   10004:	0fd4      	lsrs	r4, r2, #31
   10006:	18a4      	adds	r4, r4, r2
   10008:	1064      	asrs	r4, r4, #1
   1000a:	88ca      	ldrh	r2, [r1, #6]
   1000c:	3201      	adds	r2, #1
   1000e:	8849      	ldrh	r1, [r1, #2]
   10010:	1a52      	subs	r2, r2, r1
   10012:	b212      	sxth	r2, r2
   10014:	0fd1      	lsrs	r1, r2, #31
   10016:	188a      	adds	r2, r1, r2
   10018:	1052      	asrs	r2, r2, #1
   1001a:	1aa2      	subs	r2, r4, r2
   1001c:	805a      	strh	r2, [r3, #2]
            break;
   1001e:	e786      	b.n	ff2e <_lv_area_align+0x56>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10020:	8882      	ldrh	r2, [r0, #4]
   10022:	888c      	ldrh	r4, [r1, #4]
   10024:	1b12      	subs	r2, r2, r4
   10026:	8804      	ldrh	r4, [r0, #0]
   10028:	1b12      	subs	r2, r2, r4
   1002a:	880c      	ldrh	r4, [r1, #0]
   1002c:	1912      	adds	r2, r2, r4
   1002e:	801a      	strh	r2, [r3, #0]
   10030:	88c2      	ldrh	r2, [r0, #6]
   10032:	3201      	adds	r2, #1
   10034:	8844      	ldrh	r4, [r0, #2]
   10036:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10038:	b212      	sxth	r2, r2
   1003a:	0fd4      	lsrs	r4, r2, #31
   1003c:	18a4      	adds	r4, r4, r2
   1003e:	1064      	asrs	r4, r4, #1
   10040:	88ca      	ldrh	r2, [r1, #6]
   10042:	3201      	adds	r2, #1
   10044:	8849      	ldrh	r1, [r1, #2]
   10046:	1a52      	subs	r2, r2, r1
   10048:	b212      	sxth	r2, r2
   1004a:	0fd1      	lsrs	r1, r2, #31
   1004c:	188a      	adds	r2, r1, r2
   1004e:	1052      	asrs	r2, r2, #1
   10050:	1aa2      	subs	r2, r4, r2
   10052:	805a      	strh	r2, [r3, #2]
            break;
   10054:	e76b      	b.n	ff2e <_lv_area_align+0x56>
            res->x = 0;
   10056:	2200      	movs	r2, #0
   10058:	801a      	strh	r2, [r3, #0]
   1005a:	88ca      	ldrh	r2, [r1, #6]
   1005c:	8849      	ldrh	r1, [r1, #2]
   1005e:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10060:	43d2      	mvns	r2, r2
   10062:	805a      	strh	r2, [r3, #2]
            break;
   10064:	e763      	b.n	ff2e <_lv_area_align+0x56>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   10066:	8882      	ldrh	r2, [r0, #4]
   10068:	3201      	adds	r2, #1
   1006a:	8804      	ldrh	r4, [r0, #0]
   1006c:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   1006e:	b212      	sxth	r2, r2
   10070:	0fd4      	lsrs	r4, r2, #31
   10072:	18a4      	adds	r4, r4, r2
   10074:	1064      	asrs	r4, r4, #1
   10076:	888a      	ldrh	r2, [r1, #4]
   10078:	3201      	adds	r2, #1
   1007a:	880d      	ldrh	r5, [r1, #0]
   1007c:	1b52      	subs	r2, r2, r5
   1007e:	b212      	sxth	r2, r2
   10080:	0fd5      	lsrs	r5, r2, #31
   10082:	18aa      	adds	r2, r5, r2
   10084:	1052      	asrs	r2, r2, #1
   10086:	1aa2      	subs	r2, r4, r2
   10088:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1008a:	88ca      	ldrh	r2, [r1, #6]
   1008c:	8849      	ldrh	r1, [r1, #2]
   1008e:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   10090:	43d2      	mvns	r2, r2
   10092:	805a      	strh	r2, [r3, #2]
            break;
   10094:	e74b      	b.n	ff2e <_lv_area_align+0x56>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   10096:	8882      	ldrh	r2, [r0, #4]
   10098:	888c      	ldrh	r4, [r1, #4]
   1009a:	1b12      	subs	r2, r2, r4
   1009c:	8804      	ldrh	r4, [r0, #0]
   1009e:	1b12      	subs	r2, r2, r4
   100a0:	880c      	ldrh	r4, [r1, #0]
   100a2:	1912      	adds	r2, r2, r4
   100a4:	801a      	strh	r2, [r3, #0]
   100a6:	88ca      	ldrh	r2, [r1, #6]
   100a8:	8849      	ldrh	r1, [r1, #2]
   100aa:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   100ac:	43d2      	mvns	r2, r2
   100ae:	805a      	strh	r2, [r3, #2]
            break;
   100b0:	e73d      	b.n	ff2e <_lv_area_align+0x56>
            res->x = 0;
   100b2:	2200      	movs	r2, #0
   100b4:	801a      	strh	r2, [r3, #0]
   100b6:	88c2      	ldrh	r2, [r0, #6]
   100b8:	3201      	adds	r2, #1
   100ba:	8841      	ldrh	r1, [r0, #2]
   100bc:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   100be:	805a      	strh	r2, [r3, #2]
            break;
   100c0:	e735      	b.n	ff2e <_lv_area_align+0x56>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   100c2:	8882      	ldrh	r2, [r0, #4]
   100c4:	3201      	adds	r2, #1
   100c6:	8804      	ldrh	r4, [r0, #0]
   100c8:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   100ca:	b212      	sxth	r2, r2
   100cc:	0fd4      	lsrs	r4, r2, #31
   100ce:	18a4      	adds	r4, r4, r2
   100d0:	1064      	asrs	r4, r4, #1
   100d2:	888a      	ldrh	r2, [r1, #4]
   100d4:	3201      	adds	r2, #1
   100d6:	8809      	ldrh	r1, [r1, #0]
   100d8:	1a52      	subs	r2, r2, r1
   100da:	b212      	sxth	r2, r2
   100dc:	0fd1      	lsrs	r1, r2, #31
   100de:	188a      	adds	r2, r1, r2
   100e0:	1052      	asrs	r2, r2, #1
   100e2:	1aa2      	subs	r2, r4, r2
   100e4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   100e6:	88c2      	ldrh	r2, [r0, #6]
   100e8:	3201      	adds	r2, #1
   100ea:	8841      	ldrh	r1, [r0, #2]
   100ec:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   100ee:	805a      	strh	r2, [r3, #2]
            break;
   100f0:	e71d      	b.n	ff2e <_lv_area_align+0x56>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   100f2:	8882      	ldrh	r2, [r0, #4]
   100f4:	888c      	ldrh	r4, [r1, #4]
   100f6:	1b12      	subs	r2, r2, r4
   100f8:	8804      	ldrh	r4, [r0, #0]
   100fa:	1b12      	subs	r2, r2, r4
   100fc:	8809      	ldrh	r1, [r1, #0]
   100fe:	1852      	adds	r2, r2, r1
   10100:	801a      	strh	r2, [r3, #0]
   10102:	88c2      	ldrh	r2, [r0, #6]
   10104:	3201      	adds	r2, #1
   10106:	8841      	ldrh	r1, [r0, #2]
   10108:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   1010a:	805a      	strh	r2, [r3, #2]
            break;
   1010c:	e70f      	b.n	ff2e <_lv_area_align+0x56>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1010e:	888a      	ldrh	r2, [r1, #4]
   10110:	8809      	ldrh	r1, [r1, #0]
   10112:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
   10114:	43d2      	mvns	r2, r2
   10116:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10118:	2200      	movs	r2, #0
   1011a:	805a      	strh	r2, [r3, #2]
            break;
   1011c:	e707      	b.n	ff2e <_lv_area_align+0x56>
   1011e:	888a      	ldrh	r2, [r1, #4]
   10120:	880c      	ldrh	r4, [r1, #0]
   10122:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   10124:	43d2      	mvns	r2, r2
   10126:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10128:	88c2      	ldrh	r2, [r0, #6]
   1012a:	3201      	adds	r2, #1
   1012c:	8844      	ldrh	r4, [r0, #2]
   1012e:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   10130:	b212      	sxth	r2, r2
   10132:	0fd4      	lsrs	r4, r2, #31
   10134:	18a4      	adds	r4, r4, r2
   10136:	1064      	asrs	r4, r4, #1
   10138:	88ca      	ldrh	r2, [r1, #6]
   1013a:	3201      	adds	r2, #1
   1013c:	8849      	ldrh	r1, [r1, #2]
   1013e:	1a52      	subs	r2, r2, r1
   10140:	b212      	sxth	r2, r2
   10142:	0fd1      	lsrs	r1, r2, #31
   10144:	188a      	adds	r2, r1, r2
   10146:	1052      	asrs	r2, r2, #1
   10148:	1aa2      	subs	r2, r4, r2
   1014a:	805a      	strh	r2, [r3, #2]
            break;
   1014c:	e6ef      	b.n	ff2e <_lv_area_align+0x56>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1014e:	888a      	ldrh	r2, [r1, #4]
   10150:	880c      	ldrh	r4, [r1, #0]
   10152:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   10154:	43d2      	mvns	r2, r2
   10156:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   10158:	88c2      	ldrh	r2, [r0, #6]
   1015a:	88cc      	ldrh	r4, [r1, #6]
   1015c:	1b12      	subs	r2, r2, r4
   1015e:	8844      	ldrh	r4, [r0, #2]
   10160:	1b12      	subs	r2, r2, r4
   10162:	8849      	ldrh	r1, [r1, #2]
   10164:	1852      	adds	r2, r2, r1
   10166:	805a      	strh	r2, [r3, #2]
            break;
   10168:	e6e1      	b.n	ff2e <_lv_area_align+0x56>
   1016a:	8882      	ldrh	r2, [r0, #4]
   1016c:	3201      	adds	r2, #1
   1016e:	8801      	ldrh	r1, [r0, #0]
   10170:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
   10172:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   10174:	2200      	movs	r2, #0
   10176:	805a      	strh	r2, [r3, #2]
            break;
   10178:	e6d9      	b.n	ff2e <_lv_area_align+0x56>
   1017a:	8882      	ldrh	r2, [r0, #4]
   1017c:	3201      	adds	r2, #1
   1017e:	8804      	ldrh	r4, [r0, #0]
   10180:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   10182:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   10184:	88c2      	ldrh	r2, [r0, #6]
   10186:	3201      	adds	r2, #1
   10188:	8844      	ldrh	r4, [r0, #2]
   1018a:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   1018c:	b212      	sxth	r2, r2
   1018e:	0fd4      	lsrs	r4, r2, #31
   10190:	18a4      	adds	r4, r4, r2
   10192:	1064      	asrs	r4, r4, #1
   10194:	88ca      	ldrh	r2, [r1, #6]
   10196:	3201      	adds	r2, #1
   10198:	8849      	ldrh	r1, [r1, #2]
   1019a:	1a52      	subs	r2, r2, r1
   1019c:	b212      	sxth	r2, r2
   1019e:	0fd1      	lsrs	r1, r2, #31
   101a0:	188a      	adds	r2, r1, r2
   101a2:	1052      	asrs	r2, r2, #1
   101a4:	1aa2      	subs	r2, r4, r2
   101a6:	805a      	strh	r2, [r3, #2]
            break;
   101a8:	e6c1      	b.n	ff2e <_lv_area_align+0x56>
   101aa:	46c0      	nop			; (mov r8, r8)
   101ac:	0001c850 	.word	0x0001c850
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   101b0:	8882      	ldrh	r2, [r0, #4]
   101b2:	3201      	adds	r2, #1
   101b4:	8804      	ldrh	r4, [r0, #0]
   101b6:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   101b8:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   101ba:	88c2      	ldrh	r2, [r0, #6]
   101bc:	88cc      	ldrh	r4, [r1, #6]
   101be:	1b12      	subs	r2, r2, r4
   101c0:	8844      	ldrh	r4, [r0, #2]
   101c2:	1b12      	subs	r2, r2, r4
   101c4:	8849      	ldrh	r1, [r1, #2]
   101c6:	1852      	adds	r2, r2, r1
   101c8:	805a      	strh	r2, [r3, #2]
            break;
   101ca:	e6b0      	b.n	ff2e <_lv_area_align+0x56>

000101cc <lv_color_fill>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
   101cc:	b530      	push	{r4, r5, lr}
   101ce:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   101d0:	0783      	lsls	r3, r0, #30
   101d2:	d002      	beq.n	101da <lv_color_fill+0xe>
        *buf = color;
   101d4:	8001      	strh	r1, [r0, #0]
        buf++;
   101d6:	3002      	adds	r0, #2
        px_num--;
   101d8:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
   101da:	0429      	lsls	r1, r5, #16
   101dc:	1949      	adds	r1, r1, r5
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   101de:	2a10      	cmp	r2, #16
   101e0:	d916      	bls.n	10210 <lv_color_fill+0x44>
   101e2:	0003      	movs	r3, r0
   101e4:	0014      	movs	r4, r2
        *buf32 = c32;
   101e6:	6019      	str	r1, [r3, #0]
        buf32++;
        *buf32 = c32;
   101e8:	6059      	str	r1, [r3, #4]
        buf32++;
        *buf32 = c32;
   101ea:	6099      	str	r1, [r3, #8]
        buf32++;
        *buf32 = c32;
   101ec:	60d9      	str	r1, [r3, #12]
        buf32++;

        *buf32 = c32;
   101ee:	6119      	str	r1, [r3, #16]
        buf32++;
        *buf32 = c32;
   101f0:	6159      	str	r1, [r3, #20]
        buf32++;
        *buf32 = c32;
   101f2:	6199      	str	r1, [r3, #24]
        buf32++;
        *buf32 = c32;
   101f4:	61d9      	str	r1, [r3, #28]
   101f6:	3320      	adds	r3, #32
        buf32++;

        px_num -= 16;
   101f8:	3c10      	subs	r4, #16
    while(px_num > 16) {
   101fa:	2c10      	cmp	r4, #16
   101fc:	d8f3      	bhi.n	101e6 <lv_color_fill+0x1a>
   101fe:	0011      	movs	r1, r2
   10200:	3911      	subs	r1, #17
   10202:	0909      	lsrs	r1, r1, #4
   10204:	1c4c      	adds	r4, r1, #1
   10206:	0164      	lsls	r4, r4, #5
   10208:	3a10      	subs	r2, #16
   1020a:	0109      	lsls	r1, r1, #4
   1020c:	1a52      	subs	r2, r2, r1
        buf32++;
   1020e:	1900      	adds	r0, r0, r4
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   10210:	2a00      	cmp	r2, #0
   10212:	d004      	beq.n	1021e <lv_color_fill+0x52>
        *buf = color;
   10214:	8005      	strh	r5, [r0, #0]
        buf++;
   10216:	3002      	adds	r0, #2
        px_num --;
   10218:	3a01      	subs	r2, #1
    while(px_num) {
   1021a:	2a00      	cmp	r2, #0
   1021c:	d1fa      	bne.n	10214 <lv_color_fill+0x48>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   1021e:	bd30      	pop	{r4, r5, pc}

00010220 <lv_color_lighten>:


lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
   10220:	b570      	push	{r4, r5, r6, lr}
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   10222:	014a      	lsls	r2, r1, #5
   10224:	1a52      	subs	r2, r2, r1
   10226:	24ff      	movs	r4, #255	; 0xff
   10228:	1a64      	subs	r4, r4, r1
   1022a:	0403      	lsls	r3, r0, #16
   1022c:	0edb      	lsrs	r3, r3, #27
   1022e:	4363      	muls	r3, r4
   10230:	189d      	adds	r5, r3, r2
   10232:	022b      	lsls	r3, r5, #8
   10234:	195b      	adds	r3, r3, r5
   10236:	01db      	lsls	r3, r3, #7
   10238:	195b      	adds	r3, r3, r5
   1023a:	011b      	lsls	r3, r3, #4
   1023c:	0edb      	lsrs	r3, r3, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   1023e:	0545      	lsls	r5, r0, #21
   10240:	0ead      	lsrs	r5, r5, #26
   10242:	4365      	muls	r5, r4
   10244:	018e      	lsls	r6, r1, #6
   10246:	1a71      	subs	r1, r6, r1
   10248:	186d      	adds	r5, r5, r1
   1024a:	0229      	lsls	r1, r5, #8
   1024c:	1949      	adds	r1, r1, r5
   1024e:	01c9      	lsls	r1, r1, #7
   10250:	1949      	adds	r1, r1, r5
   10252:	00c9      	lsls	r1, r1, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   10254:	06c0      	lsls	r0, r0, #27
   10256:	0ec0      	lsrs	r0, r0, #27
   10258:	4360      	muls	r0, r4
   1025a:	1882      	adds	r2, r0, r2
   1025c:	0210      	lsls	r0, r2, #8
   1025e:	1880      	adds	r0, r0, r2
   10260:	01c0      	lsls	r0, r0, #7
   10262:	1880      	adds	r0, r0, r2
   10264:	0100      	lsls	r0, r0, #4
   10266:	0e89      	lsrs	r1, r1, #26
   10268:	0149      	lsls	r1, r1, #5
   1026a:	0ec0      	lsrs	r0, r0, #27
   1026c:	02db      	lsls	r3, r3, #11
   1026e:	4308      	orrs	r0, r1
   10270:	4318      	orrs	r0, r3
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}
   10272:	bd70      	pop	{r4, r5, r6, pc}

00010274 <lv_color_darken>:


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
   10274:	b510      	push	{r4, lr}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   10276:	23ff      	movs	r3, #255	; 0xff
   10278:	1a59      	subs	r1, r3, r1
   1027a:	0403      	lsls	r3, r0, #16
   1027c:	0edb      	lsrs	r3, r3, #27
   1027e:	434b      	muls	r3, r1
   10280:	001a      	movs	r2, r3
   10282:	021b      	lsls	r3, r3, #8
   10284:	189b      	adds	r3, r3, r2
   10286:	01db      	lsls	r3, r3, #7
   10288:	189b      	adds	r3, r3, r2
   1028a:	011b      	lsls	r3, r3, #4
   1028c:	0edb      	lsrs	r3, r3, #27
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   1028e:	0542      	lsls	r2, r0, #21
   10290:	0e92      	lsrs	r2, r2, #26
   10292:	434a      	muls	r2, r1
   10294:	0014      	movs	r4, r2
   10296:	0212      	lsls	r2, r2, #8
   10298:	1912      	adds	r2, r2, r4
   1029a:	01d2      	lsls	r2, r2, #7
   1029c:	1912      	adds	r2, r2, r4
   1029e:	00d2      	lsls	r2, r2, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   102a0:	06c0      	lsls	r0, r0, #27
   102a2:	0ec0      	lsrs	r0, r0, #27
   102a4:	4341      	muls	r1, r0
   102a6:	0208      	lsls	r0, r1, #8
   102a8:	1840      	adds	r0, r0, r1
   102aa:	01c0      	lsls	r0, r0, #7
   102ac:	1840      	adds	r0, r0, r1
   102ae:	0100      	lsls	r0, r0, #4
   102b0:	0e92      	lsrs	r2, r2, #26
   102b2:	0152      	lsls	r2, r2, #5
   102b4:	0ec0      	lsrs	r0, r0, #27
   102b6:	02db      	lsls	r3, r3, #11
   102b8:	4310      	orrs	r0, r2
   102ba:	4318      	orrs	r0, r3
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
   102bc:	bd10      	pop	{r4, pc}

000102be <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
   102be:	1c42      	adds	r2, r0, #1

    while(*path != '\0') {
   102c0:	7843      	ldrb	r3, [r0, #1]
   102c2:	2b00      	cmp	r3, #0
   102c4:	d104      	bne.n	102d0 <lv_fs_get_real_path+0x12>
   102c6:	e009      	b.n	102dc <lv_fs_get_real_path+0x1e>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
   102c8:	3201      	adds	r2, #1
    while(*path != '\0') {
   102ca:	7813      	ldrb	r3, [r2, #0]
   102cc:	2b00      	cmp	r3, #0
   102ce:	d005      	beq.n	102dc <lv_fs_get_real_path+0x1e>
        if(*path == ':' || *path == '\\' || *path == '/') {
   102d0:	2b3a      	cmp	r3, #58	; 0x3a
   102d2:	d0f9      	beq.n	102c8 <lv_fs_get_real_path+0xa>
   102d4:	2b5c      	cmp	r3, #92	; 0x5c
   102d6:	d0f7      	beq.n	102c8 <lv_fs_get_real_path+0xa>
   102d8:	2b2f      	cmp	r3, #47	; 0x2f
   102da:	d0f5      	beq.n	102c8 <lv_fs_get_real_path+0xa>
            break;
        }
    }

    return path;
}
   102dc:	0010      	movs	r0, r2
   102de:	4770      	bx	lr

000102e0 <_lv_fs_init>:
{
   102e0:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
   102e2:	2144      	movs	r1, #68	; 0x44
   102e4:	4801      	ldr	r0, [pc, #4]	; (102ec <_lv_fs_init+0xc>)
   102e6:	4b02      	ldr	r3, [pc, #8]	; (102f0 <_lv_fs_init+0x10>)
   102e8:	4798      	blx	r3
}
   102ea:	bd10      	pop	{r4, pc}
   102ec:	20004d5c 	.word	0x20004d5c
   102f0:	00010551 	.word	0x00010551

000102f4 <lv_fs_close>:
{
   102f4:	b570      	push	{r4, r5, r6, lr}
   102f6:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
   102f8:	6840      	ldr	r0, [r0, #4]
   102fa:	2800      	cmp	r0, #0
   102fc:	d00e      	beq.n	1031c <lv_fs_close+0x28>
    if(file_p->drv->close_cb == NULL) {
   102fe:	6903      	ldr	r3, [r0, #16]
        return LV_FS_RES_NOT_IMP;
   10300:	2509      	movs	r5, #9
    if(file_p->drv->close_cb == NULL) {
   10302:	2b00      	cmp	r3, #0
   10304:	d008      	beq.n	10318 <lv_fs_close+0x24>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
   10306:	6821      	ldr	r1, [r4, #0]
   10308:	4798      	blx	r3
   1030a:	0005      	movs	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
   1030c:	6820      	ldr	r0, [r4, #0]
   1030e:	4b04      	ldr	r3, [pc, #16]	; (10320 <lv_fs_close+0x2c>)
   10310:	4798      	blx	r3
    file_p->file_d = NULL;
   10312:	2300      	movs	r3, #0
   10314:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
   10316:	6063      	str	r3, [r4, #4]
}
   10318:	0028      	movs	r0, r5
   1031a:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
   1031c:	250b      	movs	r5, #11
   1031e:	e7fb      	b.n	10318 <lv_fs_close+0x24>
   10320:	00010ad1 	.word	0x00010ad1

00010324 <lv_fs_read>:
{
   10324:	b570      	push	{r4, r5, r6, lr}
   10326:	b084      	sub	sp, #16
   10328:	1e1c      	subs	r4, r3, #0
    if(br != NULL) *br = 0;
   1032a:	d001      	beq.n	10330 <lv_fs_read+0xc>
   1032c:	2300      	movs	r3, #0
   1032e:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   10330:	6845      	ldr	r5, [r0, #4]
   10332:	2d00      	cmp	r5, #0
   10334:	d015      	beq.n	10362 <lv_fs_read+0x3e>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   10336:	69ae      	ldr	r6, [r5, #24]
   10338:	2309      	movs	r3, #9
   1033a:	2e00      	cmp	r6, #0
   1033c:	d00e      	beq.n	1035c <lv_fs_read+0x38>
    uint32_t br_tmp = 0;
   1033e:	2300      	movs	r3, #0
   10340:	9303      	str	r3, [sp, #12]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
   10342:	6800      	ldr	r0, [r0, #0]
   10344:	ab03      	add	r3, sp, #12
   10346:	9300      	str	r3, [sp, #0]
   10348:	0013      	movs	r3, r2
   1034a:	000a      	movs	r2, r1
   1034c:	0001      	movs	r1, r0
   1034e:	0028      	movs	r0, r5
   10350:	47b0      	blx	r6
   10352:	0003      	movs	r3, r0
    if(br != NULL) *br = br_tmp;
   10354:	2c00      	cmp	r4, #0
   10356:	d001      	beq.n	1035c <lv_fs_read+0x38>
   10358:	9a03      	ldr	r2, [sp, #12]
   1035a:	6022      	str	r2, [r4, #0]
}
   1035c:	0018      	movs	r0, r3
   1035e:	b004      	add	sp, #16
   10360:	bd70      	pop	{r4, r5, r6, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   10362:	230b      	movs	r3, #11
   10364:	e7fa      	b.n	1035c <lv_fs_read+0x38>

00010366 <lv_fs_seek>:
{
   10366:	b570      	push	{r4, r5, r6, lr}
   10368:	000a      	movs	r2, r1
    if(file_p->drv == NULL) {
   1036a:	6844      	ldr	r4, [r0, #4]
   1036c:	2c00      	cmp	r4, #0
   1036e:	d009      	beq.n	10384 <lv_fs_seek+0x1e>
    if(file_p->drv->seek_cb == NULL) {
   10370:	6a25      	ldr	r5, [r4, #32]
        return LV_FS_RES_NOT_IMP;
   10372:	2309      	movs	r3, #9
    if(file_p->drv->seek_cb == NULL) {
   10374:	2d00      	cmp	r5, #0
   10376:	d003      	beq.n	10380 <lv_fs_seek+0x1a>
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
   10378:	6801      	ldr	r1, [r0, #0]
   1037a:	0020      	movs	r0, r4
   1037c:	47a8      	blx	r5
   1037e:	0003      	movs	r3, r0
}
   10380:	0018      	movs	r0, r3
   10382:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
   10384:	230b      	movs	r3, #11
   10386:	e7fb      	b.n	10380 <lv_fs_seek+0x1a>

00010388 <lv_fs_get_drv>:
{
   10388:	b570      	push	{r4, r5, r6, lr}
   1038a:	0004      	movs	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   1038c:	4809      	ldr	r0, [pc, #36]	; (103b4 <lv_fs_get_drv+0x2c>)
   1038e:	4b0a      	ldr	r3, [pc, #40]	; (103b8 <lv_fs_get_drv+0x30>)
   10390:	4798      	blx	r3
   10392:	2800      	cmp	r0, #0
   10394:	d00c      	beq.n	103b0 <lv_fs_get_drv+0x28>
        if(drv->letter == letter) {
   10396:	7803      	ldrb	r3, [r0, #0]
   10398:	42a3      	cmp	r3, r4
   1039a:	d009      	beq.n	103b0 <lv_fs_get_drv+0x28>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   1039c:	4d05      	ldr	r5, [pc, #20]	; (103b4 <lv_fs_get_drv+0x2c>)
   1039e:	4e07      	ldr	r6, [pc, #28]	; (103bc <lv_fs_get_drv+0x34>)
   103a0:	0001      	movs	r1, r0
   103a2:	0028      	movs	r0, r5
   103a4:	47b0      	blx	r6
   103a6:	2800      	cmp	r0, #0
   103a8:	d002      	beq.n	103b0 <lv_fs_get_drv+0x28>
        if(drv->letter == letter) {
   103aa:	7803      	ldrb	r3, [r0, #0]
   103ac:	42a3      	cmp	r3, r4
   103ae:	d1f7      	bne.n	103a0 <lv_fs_get_drv+0x18>
}
   103b0:	bd70      	pop	{r4, r5, r6, pc}
   103b2:	46c0      	nop			; (mov r8, r8)
   103b4:	20004d5c 	.word	0x20004d5c
   103b8:	00010605 	.word	0x00010605
   103bc:	0001061d 	.word	0x0001061d

000103c0 <lv_fs_open>:
{
   103c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   103c2:	46d6      	mov	lr, sl
   103c4:	464f      	mov	r7, r9
   103c6:	b580      	push	{r7, lr}
   103c8:	b083      	sub	sp, #12
   103ca:	0004      	movs	r4, r0
   103cc:	000f      	movs	r7, r1
   103ce:	9201      	str	r2, [sp, #4]
    file_p->drv    = NULL;
   103d0:	2300      	movs	r3, #0
   103d2:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
   103d4:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   103d6:	2900      	cmp	r1, #0
   103d8:	d041      	beq.n	1045e <lv_fs_open+0x9e>
    file_p->drv = lv_fs_get_drv(letter);
   103da:	7808      	ldrb	r0, [r1, #0]
   103dc:	4b23      	ldr	r3, [pc, #140]	; (1046c <lv_fs_open+0xac>)
   103de:	4798      	blx	r3
   103e0:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
   103e2:	2800      	cmp	r0, #0
   103e4:	d00a      	beq.n	103fc <lv_fs_open+0x3c>
    if(file_p->drv->ready_cb != NULL) {
   103e6:	6883      	ldr	r3, [r0, #8]
   103e8:	2b00      	cmp	r3, #0
   103ea:	d00b      	beq.n	10404 <lv_fs_open+0x44>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
   103ec:	4798      	blx	r3
   103ee:	2800      	cmp	r0, #0
   103f0:	d108      	bne.n	10404 <lv_fs_open+0x44>
            file_p->drv    = NULL;
   103f2:	2300      	movs	r3, #0
   103f4:	6063      	str	r3, [r4, #4]
            file_p->file_d = NULL;
   103f6:	6023      	str	r3, [r4, #0]
            return LV_FS_RES_HW_ERR;
   103f8:	2501      	movs	r5, #1
   103fa:	e031      	b.n	10460 <lv_fs_open+0xa0>
        file_p->file_d = NULL;
   103fc:	2300      	movs	r3, #0
   103fe:	6023      	str	r3, [r4, #0]
        return LV_FS_RES_NOT_EX;
   10400:	2503      	movs	r5, #3
   10402:	e02d      	b.n	10460 <lv_fs_open+0xa0>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
   10404:	6863      	ldr	r3, [r4, #4]
   10406:	8858      	ldrh	r0, [r3, #2]
   10408:	4b19      	ldr	r3, [pc, #100]	; (10470 <lv_fs_open+0xb0>)
   1040a:	4798      	blx	r3
   1040c:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
   1040e:	4b19      	ldr	r3, [pc, #100]	; (10474 <lv_fs_open+0xb4>)
   10410:	4798      	blx	r3
   10412:	2800      	cmp	r0, #0
   10414:	d006      	beq.n	10424 <lv_fs_open+0x64>
    if(file_p->file_d == NULL) {
   10416:	6823      	ldr	r3, [r4, #0]
   10418:	469a      	mov	sl, r3
   1041a:	2b00      	cmp	r3, #0
   1041c:	d108      	bne.n	10430 <lv_fs_open+0x70>
        file_p->drv = NULL;
   1041e:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
   10420:	250a      	movs	r5, #10
   10422:	e01d      	b.n	10460 <lv_fs_open+0xa0>
    LV_ASSERT_MEM(file_p->file_d);
   10424:	6822      	ldr	r2, [r4, #0]
   10426:	2300      	movs	r3, #0
   10428:	4813      	ldr	r0, [pc, #76]	; (10478 <lv_fs_open+0xb8>)
   1042a:	4914      	ldr	r1, [pc, #80]	; (1047c <lv_fs_open+0xbc>)
   1042c:	4788      	blx	r1
   1042e:	e7fe      	b.n	1042e <lv_fs_open+0x6e>
    if(file_p->drv->open_cb == NULL) {
   10430:	6863      	ldr	r3, [r4, #4]
   10432:	4699      	mov	r9, r3
   10434:	68de      	ldr	r6, [r3, #12]
        return LV_FS_RES_NOT_IMP;
   10436:	2509      	movs	r5, #9
    if(file_p->drv->open_cb == NULL) {
   10438:	2e00      	cmp	r6, #0
   1043a:	d011      	beq.n	10460 <lv_fs_open+0xa0>
    const char * real_path = lv_fs_get_real_path(path);
   1043c:	0038      	movs	r0, r7
   1043e:	4b10      	ldr	r3, [pc, #64]	; (10480 <lv_fs_open+0xc0>)
   10440:	4798      	blx	r3
   10442:	0002      	movs	r2, r0
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
   10444:	9b01      	ldr	r3, [sp, #4]
   10446:	4651      	mov	r1, sl
   10448:	4648      	mov	r0, r9
   1044a:	47b0      	blx	r6
   1044c:	1e05      	subs	r5, r0, #0
    if(res != LV_FS_RES_OK) {
   1044e:	d007      	beq.n	10460 <lv_fs_open+0xa0>
        lv_mem_free(file_p->file_d);
   10450:	6820      	ldr	r0, [r4, #0]
   10452:	4b0c      	ldr	r3, [pc, #48]	; (10484 <lv_fs_open+0xc4>)
   10454:	4798      	blx	r3
        file_p->file_d = NULL;
   10456:	2300      	movs	r3, #0
   10458:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
   1045a:	6063      	str	r3, [r4, #4]
   1045c:	e000      	b.n	10460 <lv_fs_open+0xa0>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   1045e:	250b      	movs	r5, #11
}
   10460:	0028      	movs	r0, r5
   10462:	b003      	add	sp, #12
   10464:	bc0c      	pop	{r2, r3}
   10466:	4691      	mov	r9, r2
   10468:	469a      	mov	sl, r3
   1046a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1046c:	00010389 	.word	0x00010389
   10470:	00010a09 	.word	0x00010a09
   10474:	00001415 	.word	0x00001415
   10478:	00018804 	.word	0x00018804
   1047c:	0000141d 	.word	0x0000141d
   10480:	000102bf 	.word	0x000102bf
   10484:	00010ad1 	.word	0x00010ad1

00010488 <lv_fs_get_ext>:
{
   10488:	b510      	push	{r4, lr}
   1048a:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
   1048c:	4b11      	ldr	r3, [pc, #68]	; (104d4 <lv_fs_get_ext+0x4c>)
   1048e:	4798      	blx	r3
   10490:	1e03      	subs	r3, r0, #0
   10492:	d017      	beq.n	104c4 <lv_fs_get_ext+0x3c>
        if(fn[i] == '.') {
   10494:	5c22      	ldrb	r2, [r4, r0]
   10496:	2a2e      	cmp	r2, #46	; 0x2e
   10498:	d00f      	beq.n	104ba <lv_fs_get_ext+0x32>
        else if(fn[i] == '/' || fn[i] == '\\') {
   1049a:	2a2f      	cmp	r2, #47	; 0x2f
   1049c:	d014      	beq.n	104c8 <lv_fs_get_ext+0x40>
   1049e:	2a5c      	cmp	r2, #92	; 0x5c
   104a0:	d014      	beq.n	104cc <lv_fs_get_ext+0x44>
    for(i = strlen(fn); i > 0; i--) {
   104a2:	3b01      	subs	r3, #1
   104a4:	2b00      	cmp	r3, #0
   104a6:	d00b      	beq.n	104c0 <lv_fs_get_ext+0x38>
        if(fn[i] == '.') {
   104a8:	5ce2      	ldrb	r2, [r4, r3]
   104aa:	2a2e      	cmp	r2, #46	; 0x2e
   104ac:	d005      	beq.n	104ba <lv_fs_get_ext+0x32>
        else if(fn[i] == '/' || fn[i] == '\\') {
   104ae:	2a2f      	cmp	r2, #47	; 0x2f
   104b0:	d00e      	beq.n	104d0 <lv_fs_get_ext+0x48>
   104b2:	2a5c      	cmp	r2, #92	; 0x5c
   104b4:	d1f5      	bne.n	104a2 <lv_fs_get_ext+0x1a>
            return ""; /*No extension if a '\' or '/' found*/
   104b6:	4808      	ldr	r0, [pc, #32]	; (104d8 <lv_fs_get_ext+0x50>)
   104b8:	e001      	b.n	104be <lv_fs_get_ext+0x36>
            return &fn[i + 1];
   104ba:	3301      	adds	r3, #1
   104bc:	18e0      	adds	r0, r4, r3
}
   104be:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
   104c0:	4805      	ldr	r0, [pc, #20]	; (104d8 <lv_fs_get_ext+0x50>)
   104c2:	e7fc      	b.n	104be <lv_fs_get_ext+0x36>
   104c4:	4804      	ldr	r0, [pc, #16]	; (104d8 <lv_fs_get_ext+0x50>)
   104c6:	e7fa      	b.n	104be <lv_fs_get_ext+0x36>
            return ""; /*No extension if a '\' or '/' found*/
   104c8:	4803      	ldr	r0, [pc, #12]	; (104d8 <lv_fs_get_ext+0x50>)
   104ca:	e7f8      	b.n	104be <lv_fs_get_ext+0x36>
   104cc:	4802      	ldr	r0, [pc, #8]	; (104d8 <lv_fs_get_ext+0x50>)
   104ce:	e7f6      	b.n	104be <lv_fs_get_ext+0x36>
   104d0:	4801      	ldr	r0, [pc, #4]	; (104d8 <lv_fs_get_ext+0x50>)
   104d2:	e7f4      	b.n	104be <lv_fs_get_ext+0x36>
   104d4:	00017f61 	.word	0x00017f61
   104d8:	0001ca28 	.word	0x0001ca28

000104dc <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
   104dc:	b500      	push	{lr}
   104de:	b083      	sub	sp, #12
   104e0:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   104e2:	2900      	cmp	r1, #0
   104e4:	d00d      	beq.n	10502 <node_set_next+0x26>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   104e6:	2a00      	cmp	r2, #0
   104e8:	d00d      	beq.n	10506 <node_set_next+0x2a>
        _lv_memcpy_small(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   104ea:	6800      	ldr	r0, [r0, #0]
   104ec:	3004      	adds	r0, #4
   104ee:	1809      	adds	r1, r1, r0
   104f0:	ab01      	add	r3, sp, #4
   104f2:	781a      	ldrb	r2, [r3, #0]
   104f4:	700a      	strb	r2, [r1, #0]
   104f6:	785a      	ldrb	r2, [r3, #1]
   104f8:	704a      	strb	r2, [r1, #1]
   104fa:	789a      	ldrb	r2, [r3, #2]
   104fc:	708a      	strb	r2, [r1, #2]
   104fe:	78db      	ldrb	r3, [r3, #3]
   10500:	70cb      	strb	r3, [r1, #3]
    else
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
}
   10502:	b003      	add	sp, #12
   10504:	bd00      	pop	{pc}
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
   10506:	6800      	ldr	r0, [r0, #0]
   10508:	3004      	adds	r0, #4
   1050a:	1808      	adds	r0, r1, r0
   1050c:	2104      	movs	r1, #4
   1050e:	4b01      	ldr	r3, [pc, #4]	; (10514 <node_set_next+0x38>)
   10510:	4798      	blx	r3
   10512:	e7f6      	b.n	10502 <node_set_next+0x26>
   10514:	00010fe5 	.word	0x00010fe5

00010518 <node_set_prev>:
{
   10518:	b500      	push	{lr}
   1051a:	b083      	sub	sp, #12
   1051c:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   1051e:	2900      	cmp	r1, #0
   10520:	d00c      	beq.n	1053c <node_set_prev+0x24>
    if(prev)
   10522:	2a00      	cmp	r2, #0
   10524:	d00c      	beq.n	10540 <node_set_prev+0x28>
        _lv_memcpy_small(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   10526:	6800      	ldr	r0, [r0, #0]
   10528:	1809      	adds	r1, r1, r0
   1052a:	ab01      	add	r3, sp, #4
   1052c:	781a      	ldrb	r2, [r3, #0]
   1052e:	700a      	strb	r2, [r1, #0]
   10530:	785a      	ldrb	r2, [r3, #1]
   10532:	704a      	strb	r2, [r1, #1]
   10534:	789a      	ldrb	r2, [r3, #2]
   10536:	708a      	strb	r2, [r1, #2]
   10538:	78db      	ldrb	r3, [r3, #3]
   1053a:	70cb      	strb	r3, [r1, #3]
}
   1053c:	b003      	add	sp, #12
   1053e:	bd00      	pop	{pc}
        _lv_memset_00(act + LL_PREV_P_OFFSET(ll_p), node_p_size);
   10540:	6800      	ldr	r0, [r0, #0]
   10542:	1808      	adds	r0, r1, r0
   10544:	2104      	movs	r1, #4
   10546:	4b01      	ldr	r3, [pc, #4]	; (1054c <node_set_prev+0x34>)
   10548:	4798      	blx	r3
   1054a:	e7f7      	b.n	1053c <node_set_prev+0x24>
   1054c:	00010fe5 	.word	0x00010fe5

00010550 <_lv_ll_init>:
    ll_p->head = NULL;
   10550:	2300      	movs	r3, #0
   10552:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
   10554:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
   10556:	078b      	lsls	r3, r1, #30
   10558:	d002      	beq.n	10560 <_lv_ll_init+0x10>
        node_size = node_size & (~0x3);
   1055a:	2303      	movs	r3, #3
   1055c:	4399      	bics	r1, r3
        node_size += 4;
   1055e:	3104      	adds	r1, #4
    ll_p->n_size = node_size;
   10560:	6001      	str	r1, [r0, #0]
}
   10562:	4770      	bx	lr

00010564 <_lv_ll_ins_head>:
{
   10564:	b570      	push	{r4, r5, r6, lr}
   10566:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   10568:	6800      	ldr	r0, [r0, #0]
   1056a:	3008      	adds	r0, #8
   1056c:	4b0e      	ldr	r3, [pc, #56]	; (105a8 <_lv_ll_ins_head+0x44>)
   1056e:	4798      	blx	r3
   10570:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
   10572:	d014      	beq.n	1059e <_lv_ll_ins_head+0x3a>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   10574:	2200      	movs	r2, #0
   10576:	0001      	movs	r1, r0
   10578:	0020      	movs	r0, r4
   1057a:	4b0c      	ldr	r3, [pc, #48]	; (105ac <_lv_ll_ins_head+0x48>)
   1057c:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   1057e:	6862      	ldr	r2, [r4, #4]
   10580:	0029      	movs	r1, r5
   10582:	0020      	movs	r0, r4
   10584:	4b0a      	ldr	r3, [pc, #40]	; (105b0 <_lv_ll_ins_head+0x4c>)
   10586:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   10588:	6861      	ldr	r1, [r4, #4]
   1058a:	2900      	cmp	r1, #0
   1058c:	d003      	beq.n	10596 <_lv_ll_ins_head+0x32>
            node_set_prev(ll_p, ll_p->head, n_new);
   1058e:	002a      	movs	r2, r5
   10590:	0020      	movs	r0, r4
   10592:	4b06      	ldr	r3, [pc, #24]	; (105ac <_lv_ll_ins_head+0x48>)
   10594:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   10596:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   10598:	68a3      	ldr	r3, [r4, #8]
   1059a:	2b00      	cmp	r3, #0
   1059c:	d001      	beq.n	105a2 <_lv_ll_ins_head+0x3e>
}
   1059e:	0028      	movs	r0, r5
   105a0:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = n_new;
   105a2:	60a5      	str	r5, [r4, #8]
   105a4:	e7fb      	b.n	1059e <_lv_ll_ins_head+0x3a>
   105a6:	46c0      	nop			; (mov r8, r8)
   105a8:	00010a09 	.word	0x00010a09
   105ac:	00010519 	.word	0x00010519
   105b0:	000104dd 	.word	0x000104dd

000105b4 <_lv_ll_ins_tail>:
{
   105b4:	b570      	push	{r4, r5, r6, lr}
   105b6:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   105b8:	6800      	ldr	r0, [r0, #0]
   105ba:	3008      	adds	r0, #8
   105bc:	4b0e      	ldr	r3, [pc, #56]	; (105f8 <_lv_ll_ins_tail+0x44>)
   105be:	4798      	blx	r3
   105c0:	1e05      	subs	r5, r0, #0
    if(n_new != NULL) {
   105c2:	d014      	beq.n	105ee <_lv_ll_ins_tail+0x3a>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   105c4:	2200      	movs	r2, #0
   105c6:	0001      	movs	r1, r0
   105c8:	0020      	movs	r0, r4
   105ca:	4b0c      	ldr	r3, [pc, #48]	; (105fc <_lv_ll_ins_tail+0x48>)
   105cc:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   105ce:	68a2      	ldr	r2, [r4, #8]
   105d0:	0029      	movs	r1, r5
   105d2:	0020      	movs	r0, r4
   105d4:	4b0a      	ldr	r3, [pc, #40]	; (10600 <_lv_ll_ins_tail+0x4c>)
   105d6:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   105d8:	68a1      	ldr	r1, [r4, #8]
   105da:	2900      	cmp	r1, #0
   105dc:	d003      	beq.n	105e6 <_lv_ll_ins_tail+0x32>
            node_set_next(ll_p, ll_p->tail, n_new);
   105de:	002a      	movs	r2, r5
   105e0:	0020      	movs	r0, r4
   105e2:	4b06      	ldr	r3, [pc, #24]	; (105fc <_lv_ll_ins_tail+0x48>)
   105e4:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   105e6:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   105e8:	6863      	ldr	r3, [r4, #4]
   105ea:	2b00      	cmp	r3, #0
   105ec:	d001      	beq.n	105f2 <_lv_ll_ins_tail+0x3e>
}
   105ee:	0028      	movs	r0, r5
   105f0:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = n_new;
   105f2:	6065      	str	r5, [r4, #4]
   105f4:	e7fb      	b.n	105ee <_lv_ll_ins_tail+0x3a>
   105f6:	46c0      	nop			; (mov r8, r8)
   105f8:	00010a09 	.word	0x00010a09
   105fc:	000104dd 	.word	0x000104dd
   10600:	00010519 	.word	0x00010519

00010604 <_lv_ll_get_head>:
    if(ll_p != NULL) {
   10604:	2800      	cmp	r0, #0
   10606:	d001      	beq.n	1060c <_lv_ll_get_head+0x8>
        head = ll_p->head;
   10608:	6840      	ldr	r0, [r0, #4]
}
   1060a:	4770      	bx	lr
    void * head = NULL;
   1060c:	2000      	movs	r0, #0
    return head;
   1060e:	e7fc      	b.n	1060a <_lv_ll_get_head+0x6>

00010610 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   10610:	2800      	cmp	r0, #0
   10612:	d001      	beq.n	10618 <_lv_ll_get_tail+0x8>
        tail = ll_p->tail;
   10614:	6880      	ldr	r0, [r0, #8]
}
   10616:	4770      	bx	lr
    void * tail = NULL;
   10618:	2000      	movs	r0, #0
    return tail;
   1061a:	e7fc      	b.n	10616 <_lv_ll_get_tail+0x6>

0001061c <_lv_ll_get_next>:
{
   1061c:	b082      	sub	sp, #8
    void * next = NULL;
   1061e:	2300      	movs	r3, #0
   10620:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   10622:	2800      	cmp	r0, #0
   10624:	d00b      	beq.n	1063e <_lv_ll_get_next+0x22>
        _lv_memcpy_small(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   10626:	6803      	ldr	r3, [r0, #0]
   10628:	3304      	adds	r3, #4
   1062a:	18c9      	adds	r1, r1, r3
   1062c:	ab01      	add	r3, sp, #4
   1062e:	780a      	ldrb	r2, [r1, #0]
   10630:	701a      	strb	r2, [r3, #0]
   10632:	784a      	ldrb	r2, [r1, #1]
   10634:	705a      	strb	r2, [r3, #1]
   10636:	788a      	ldrb	r2, [r1, #2]
   10638:	709a      	strb	r2, [r3, #2]
   1063a:	78ca      	ldrb	r2, [r1, #3]
   1063c:	70da      	strb	r2, [r3, #3]
}
   1063e:	9801      	ldr	r0, [sp, #4]
   10640:	b002      	add	sp, #8
   10642:	4770      	bx	lr

00010644 <_lv_ll_get_prev>:
{
   10644:	b082      	sub	sp, #8
    void * prev = NULL;
   10646:	2300      	movs	r3, #0
   10648:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   1064a:	2800      	cmp	r0, #0
   1064c:	d00a      	beq.n	10664 <_lv_ll_get_prev+0x20>
        _lv_memcpy_small(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   1064e:	6803      	ldr	r3, [r0, #0]
   10650:	18c9      	adds	r1, r1, r3
   10652:	ab01      	add	r3, sp, #4
   10654:	780a      	ldrb	r2, [r1, #0]
   10656:	701a      	strb	r2, [r3, #0]
   10658:	784a      	ldrb	r2, [r1, #1]
   1065a:	705a      	strb	r2, [r3, #1]
   1065c:	788a      	ldrb	r2, [r1, #2]
   1065e:	709a      	strb	r2, [r3, #2]
   10660:	78ca      	ldrb	r2, [r1, #3]
   10662:	70da      	strb	r2, [r3, #3]
}
   10664:	9801      	ldr	r0, [sp, #4]
   10666:	b002      	add	sp, #8
   10668:	4770      	bx	lr
	...

0001066c <_lv_ll_ins_prev>:
{
   1066c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1066e:	46c6      	mov	lr, r8
   10670:	b500      	push	{lr}
   10672:	0004      	movs	r4, r0
   10674:	000e      	movs	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   10676:	2800      	cmp	r0, #0
   10678:	d029      	beq.n	106ce <_lv_ll_ins_prev+0x62>
   1067a:	2900      	cmp	r1, #0
   1067c:	d029      	beq.n	106d2 <_lv_ll_ins_prev+0x66>
    if(_lv_ll_get_head(ll_p) == n_act) {
   1067e:	6843      	ldr	r3, [r0, #4]
   10680:	4299      	cmp	r1, r3
   10682:	d021      	beq.n	106c8 <_lv_ll_ins_prev+0x5c>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   10684:	6800      	ldr	r0, [r0, #0]
   10686:	3008      	adds	r0, #8
   10688:	4b13      	ldr	r3, [pc, #76]	; (106d8 <_lv_ll_ins_prev+0x6c>)
   1068a:	4798      	blx	r3
   1068c:	1e05      	subs	r5, r0, #0
        if(n_new == NULL) return NULL;
   1068e:	d018      	beq.n	106c2 <_lv_ll_ins_prev+0x56>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   10690:	0031      	movs	r1, r6
   10692:	0020      	movs	r0, r4
   10694:	4b11      	ldr	r3, [pc, #68]	; (106dc <_lv_ll_ins_prev+0x70>)
   10696:	4798      	blx	r3
   10698:	0007      	movs	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   1069a:	002a      	movs	r2, r5
   1069c:	0001      	movs	r1, r0
   1069e:	0020      	movs	r0, r4
   106a0:	4b0f      	ldr	r3, [pc, #60]	; (106e0 <_lv_ll_ins_prev+0x74>)
   106a2:	4698      	mov	r8, r3
   106a4:	4798      	blx	r3
        node_set_prev(ll_p, n_new, n_prev);
   106a6:	003a      	movs	r2, r7
   106a8:	0029      	movs	r1, r5
   106aa:	0020      	movs	r0, r4
   106ac:	4f0d      	ldr	r7, [pc, #52]	; (106e4 <_lv_ll_ins_prev+0x78>)
   106ae:	47b8      	blx	r7
        node_set_prev(ll_p, n_act, n_new);
   106b0:	002a      	movs	r2, r5
   106b2:	0031      	movs	r1, r6
   106b4:	0020      	movs	r0, r4
   106b6:	47b8      	blx	r7
        node_set_next(ll_p, n_new, n_act);
   106b8:	0032      	movs	r2, r6
   106ba:	0029      	movs	r1, r5
   106bc:	0020      	movs	r0, r4
   106be:	47c0      	blx	r8
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   106c0:	0028      	movs	r0, r5
}
   106c2:	bc04      	pop	{r2}
   106c4:	4690      	mov	r8, r2
   106c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_new = _lv_ll_ins_head(ll_p);
   106c8:	4b07      	ldr	r3, [pc, #28]	; (106e8 <_lv_ll_ins_prev+0x7c>)
   106ca:	4798      	blx	r3
   106cc:	e7f9      	b.n	106c2 <_lv_ll_ins_prev+0x56>
    if(NULL == ll_p || NULL == n_act) return NULL;
   106ce:	2000      	movs	r0, #0
   106d0:	e7f7      	b.n	106c2 <_lv_ll_ins_prev+0x56>
   106d2:	0008      	movs	r0, r1
   106d4:	e7f5      	b.n	106c2 <_lv_ll_ins_prev+0x56>
   106d6:	46c0      	nop			; (mov r8, r8)
   106d8:	00010a09 	.word	0x00010a09
   106dc:	00010645 	.word	0x00010645
   106e0:	000104dd 	.word	0x000104dd
   106e4:	00010519 	.word	0x00010519
   106e8:	00010565 	.word	0x00010565

000106ec <_lv_ll_remove>:
{
   106ec:	b570      	push	{r4, r5, r6, lr}
   106ee:	0004      	movs	r4, r0
   106f0:	000d      	movs	r5, r1
    if(ll_p != NULL) {
   106f2:	2800      	cmp	r0, #0
   106f4:	d02b      	beq.n	1074e <_lv_ll_remove+0x62>
    if(_lv_ll_get_head(ll_p) == node_p) {
   106f6:	6843      	ldr	r3, [r0, #4]
   106f8:	4299      	cmp	r1, r3
   106fa:	d02a      	beq.n	10752 <_lv_ll_remove+0x66>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   106fc:	6883      	ldr	r3, [r0, #8]
   106fe:	4299      	cmp	r1, r3
   10700:	d017      	beq.n	10732 <_lv_ll_remove+0x46>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   10702:	0029      	movs	r1, r5
   10704:	0020      	movs	r0, r4
   10706:	4b19      	ldr	r3, [pc, #100]	; (1076c <_lv_ll_remove+0x80>)
   10708:	4798      	blx	r3
   1070a:	0006      	movs	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   1070c:	0029      	movs	r1, r5
   1070e:	0020      	movs	r0, r4
   10710:	4b17      	ldr	r3, [pc, #92]	; (10770 <_lv_ll_remove+0x84>)
   10712:	4798      	blx	r3
   10714:	0005      	movs	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   10716:	0002      	movs	r2, r0
   10718:	0031      	movs	r1, r6
   1071a:	0020      	movs	r0, r4
   1071c:	4b15      	ldr	r3, [pc, #84]	; (10774 <_lv_ll_remove+0x88>)
   1071e:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
   10720:	0032      	movs	r2, r6
   10722:	0029      	movs	r1, r5
   10724:	0020      	movs	r0, r4
   10726:	4b14      	ldr	r3, [pc, #80]	; (10778 <_lv_ll_remove+0x8c>)
   10728:	4798      	blx	r3
}
   1072a:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
   1072c:	2300      	movs	r3, #0
   1072e:	60a3      	str	r3, [r4, #8]
   10730:	e7fb      	b.n	1072a <_lv_ll_remove+0x3e>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   10732:	4b0e      	ldr	r3, [pc, #56]	; (1076c <_lv_ll_remove+0x80>)
   10734:	4798      	blx	r3
   10736:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   10738:	2800      	cmp	r0, #0
   1073a:	d005      	beq.n	10748 <_lv_ll_remove+0x5c>
            node_set_next(ll_p, ll_p->tail, NULL);
   1073c:	2200      	movs	r2, #0
   1073e:	0001      	movs	r1, r0
   10740:	0020      	movs	r0, r4
   10742:	4b0c      	ldr	r3, [pc, #48]	; (10774 <_lv_ll_remove+0x88>)
   10744:	4798      	blx	r3
   10746:	e7f0      	b.n	1072a <_lv_ll_remove+0x3e>
            ll_p->head = NULL;
   10748:	2300      	movs	r3, #0
   1074a:	6063      	str	r3, [r4, #4]
   1074c:	e7ed      	b.n	1072a <_lv_ll_remove+0x3e>
    if(_lv_ll_get_head(ll_p) == node_p) {
   1074e:	2900      	cmp	r1, #0
   10750:	d1d7      	bne.n	10702 <_lv_ll_remove+0x16>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   10752:	0029      	movs	r1, r5
   10754:	0020      	movs	r0, r4
   10756:	4b06      	ldr	r3, [pc, #24]	; (10770 <_lv_ll_remove+0x84>)
   10758:	4798      	blx	r3
   1075a:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   1075c:	2800      	cmp	r0, #0
   1075e:	d0e5      	beq.n	1072c <_lv_ll_remove+0x40>
            node_set_prev(ll_p, ll_p->head, NULL);
   10760:	2200      	movs	r2, #0
   10762:	0001      	movs	r1, r0
   10764:	0020      	movs	r0, r4
   10766:	4b04      	ldr	r3, [pc, #16]	; (10778 <_lv_ll_remove+0x8c>)
   10768:	4798      	blx	r3
   1076a:	e7de      	b.n	1072a <_lv_ll_remove+0x3e>
   1076c:	00010645 	.word	0x00010645
   10770:	0001061d 	.word	0x0001061d
   10774:	000104dd 	.word	0x000104dd
   10778:	00010519 	.word	0x00010519

0001077c <_lv_ll_chg_list>:
{
   1077c:	b570      	push	{r4, r5, r6, lr}
   1077e:	000c      	movs	r4, r1
   10780:	0015      	movs	r5, r2
   10782:	001e      	movs	r6, r3
    _lv_ll_remove(ll_ori_p, node);
   10784:	0011      	movs	r1, r2
   10786:	4b19      	ldr	r3, [pc, #100]	; (107ec <_lv_ll_chg_list+0x70>)
   10788:	4798      	blx	r3
    if(head) {
   1078a:	2e00      	cmp	r6, #0
   1078c:	d017      	beq.n	107be <_lv_ll_chg_list+0x42>
        node_set_prev(ll_new_p, node, NULL);
   1078e:	2200      	movs	r2, #0
   10790:	0029      	movs	r1, r5
   10792:	0020      	movs	r0, r4
   10794:	4b16      	ldr	r3, [pc, #88]	; (107f0 <_lv_ll_chg_list+0x74>)
   10796:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
   10798:	6862      	ldr	r2, [r4, #4]
   1079a:	0029      	movs	r1, r5
   1079c:	0020      	movs	r0, r4
   1079e:	4b15      	ldr	r3, [pc, #84]	; (107f4 <_lv_ll_chg_list+0x78>)
   107a0:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
   107a2:	6861      	ldr	r1, [r4, #4]
   107a4:	2900      	cmp	r1, #0
   107a6:	d003      	beq.n	107b0 <_lv_ll_chg_list+0x34>
            node_set_prev(ll_new_p, ll_new_p->head, node);
   107a8:	002a      	movs	r2, r5
   107aa:	0020      	movs	r0, r4
   107ac:	4b10      	ldr	r3, [pc, #64]	; (107f0 <_lv_ll_chg_list+0x74>)
   107ae:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
   107b0:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
   107b2:	68a3      	ldr	r3, [r4, #8]
   107b4:	2b00      	cmp	r3, #0
   107b6:	d000      	beq.n	107ba <_lv_ll_chg_list+0x3e>
}
   107b8:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
   107ba:	60a5      	str	r5, [r4, #8]
   107bc:	e7fc      	b.n	107b8 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
   107be:	68a2      	ldr	r2, [r4, #8]
   107c0:	0029      	movs	r1, r5
   107c2:	0020      	movs	r0, r4
   107c4:	4b0a      	ldr	r3, [pc, #40]	; (107f0 <_lv_ll_chg_list+0x74>)
   107c6:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
   107c8:	2200      	movs	r2, #0
   107ca:	0029      	movs	r1, r5
   107cc:	0020      	movs	r0, r4
   107ce:	4b09      	ldr	r3, [pc, #36]	; (107f4 <_lv_ll_chg_list+0x78>)
   107d0:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
   107d2:	68a1      	ldr	r1, [r4, #8]
   107d4:	2900      	cmp	r1, #0
   107d6:	d003      	beq.n	107e0 <_lv_ll_chg_list+0x64>
            node_set_next(ll_new_p, ll_new_p->tail, node);
   107d8:	002a      	movs	r2, r5
   107da:	0020      	movs	r0, r4
   107dc:	4b05      	ldr	r3, [pc, #20]	; (107f4 <_lv_ll_chg_list+0x78>)
   107de:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
   107e0:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
   107e2:	6863      	ldr	r3, [r4, #4]
   107e4:	2b00      	cmp	r3, #0
   107e6:	d1e7      	bne.n	107b8 <_lv_ll_chg_list+0x3c>
            ll_new_p->head = node;
   107e8:	6065      	str	r5, [r4, #4]
}
   107ea:	e7e5      	b.n	107b8 <_lv_ll_chg_list+0x3c>
   107ec:	000106ed 	.word	0x000106ed
   107f0:	00010519 	.word	0x00010519
   107f4:	000104dd 	.word	0x000104dd

000107f8 <_lv_ll_move_before>:
{
   107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107fa:	46ce      	mov	lr, r9
   107fc:	4647      	mov	r7, r8
   107fe:	b580      	push	{r7, lr}
   10800:	0005      	movs	r5, r0
   10802:	000c      	movs	r4, r1
   10804:	0016      	movs	r6, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   10806:	4291      	cmp	r1, r2
   10808:	d021      	beq.n	1084e <_lv_ll_move_before+0x56>
    if(n_after != NULL)
   1080a:	2a00      	cmp	r2, #0
   1080c:	d023      	beq.n	10856 <_lv_ll_move_before+0x5e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   1080e:	0011      	movs	r1, r2
   10810:	4b22      	ldr	r3, [pc, #136]	; (1089c <_lv_ll_move_before+0xa4>)
   10812:	4798      	blx	r3
   10814:	0007      	movs	r7, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   10816:	4284      	cmp	r4, r0
   10818:	d019      	beq.n	1084e <_lv_ll_move_before+0x56>
    _lv_ll_remove(ll_p, n_act);
   1081a:	0021      	movs	r1, r4
   1081c:	0028      	movs	r0, r5
   1081e:	4b20      	ldr	r3, [pc, #128]	; (108a0 <_lv_ll_move_before+0xa8>)
   10820:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   10822:	0022      	movs	r2, r4
   10824:	0039      	movs	r1, r7
   10826:	0028      	movs	r0, r5
   10828:	4b1e      	ldr	r3, [pc, #120]	; (108a4 <_lv_ll_move_before+0xac>)
   1082a:	4698      	mov	r8, r3
   1082c:	4798      	blx	r3
    node_set_prev(ll_p, n_act, n_before);
   1082e:	003a      	movs	r2, r7
   10830:	0021      	movs	r1, r4
   10832:	0028      	movs	r0, r5
   10834:	4b1c      	ldr	r3, [pc, #112]	; (108a8 <_lv_ll_move_before+0xb0>)
   10836:	4699      	mov	r9, r3
   10838:	4798      	blx	r3
    node_set_prev(ll_p, n_after, n_act);
   1083a:	0022      	movs	r2, r4
   1083c:	0031      	movs	r1, r6
   1083e:	0028      	movs	r0, r5
   10840:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
   10842:	0032      	movs	r2, r6
   10844:	0021      	movs	r1, r4
   10846:	0028      	movs	r0, r5
   10848:	47c0      	blx	r8
    if(n_before == NULL) ll_p->head = n_act;
   1084a:	2f00      	cmp	r7, #0
   1084c:	d021      	beq.n	10892 <_lv_ll_move_before+0x9a>
}
   1084e:	bc0c      	pop	{r2, r3}
   10850:	4690      	mov	r8, r2
   10852:	4699      	mov	r9, r3
   10854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   10856:	2800      	cmp	r0, #0
   10858:	d01d      	beq.n	10896 <_lv_ll_move_before+0x9e>
        tail = ll_p->tail;
   1085a:	6887      	ldr	r7, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
   1085c:	42bc      	cmp	r4, r7
   1085e:	d0f6      	beq.n	1084e <_lv_ll_move_before+0x56>
    _lv_ll_remove(ll_p, n_act);
   10860:	0021      	movs	r1, r4
   10862:	0028      	movs	r0, r5
   10864:	4b0e      	ldr	r3, [pc, #56]	; (108a0 <_lv_ll_move_before+0xa8>)
   10866:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   10868:	0022      	movs	r2, r4
   1086a:	0039      	movs	r1, r7
   1086c:	0028      	movs	r0, r5
   1086e:	4e0d      	ldr	r6, [pc, #52]	; (108a4 <_lv_ll_move_before+0xac>)
   10870:	47b0      	blx	r6
    node_set_prev(ll_p, n_act, n_before);
   10872:	003a      	movs	r2, r7
   10874:	0021      	movs	r1, r4
   10876:	0028      	movs	r0, r5
   10878:	4b0b      	ldr	r3, [pc, #44]	; (108a8 <_lv_ll_move_before+0xb0>)
   1087a:	4698      	mov	r8, r3
   1087c:	4798      	blx	r3
    node_set_prev(ll_p, n_after, n_act);
   1087e:	0022      	movs	r2, r4
   10880:	2100      	movs	r1, #0
   10882:	0028      	movs	r0, r5
   10884:	47c0      	blx	r8
    node_set_next(ll_p, n_act, n_after);
   10886:	2200      	movs	r2, #0
   10888:	0021      	movs	r1, r4
   1088a:	0028      	movs	r0, r5
   1088c:	47b0      	blx	r6
    if(n_after == NULL) ll_p->tail = n_act;
   1088e:	60ac      	str	r4, [r5, #8]
   10890:	e7db      	b.n	1084a <_lv_ll_move_before+0x52>
    if(n_before == NULL) ll_p->head = n_act;
   10892:	606c      	str	r4, [r5, #4]
   10894:	e7db      	b.n	1084e <_lv_ll_move_before+0x56>
    void * tail = NULL;
   10896:	0017      	movs	r7, r2
   10898:	e7e0      	b.n	1085c <_lv_ll_move_before+0x64>
   1089a:	46c0      	nop			; (mov r8, r8)
   1089c:	00010645 	.word	0x00010645
   108a0:	000106ed 	.word	0x000106ed
   108a4:	000104dd 	.word	0x000104dd
   108a8:	00010519 	.word	0x00010519

000108ac <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
   108ac:	2800      	cmp	r0, #0
   108ae:	d00a      	beq.n	108c6 <_lv_ll_is_empty+0x1a>
    return false;
   108b0:	2300      	movs	r3, #0
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   108b2:	6842      	ldr	r2, [r0, #4]
   108b4:	2a00      	cmp	r2, #0
   108b6:	d001      	beq.n	108bc <_lv_ll_is_empty+0x10>
}
   108b8:	0018      	movs	r0, r3
   108ba:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   108bc:	6882      	ldr	r2, [r0, #8]
   108be:	4253      	negs	r3, r2
   108c0:	4153      	adcs	r3, r2
   108c2:	b2db      	uxtb	r3, r3
   108c4:	e7f8      	b.n	108b8 <_lv_ll_is_empty+0xc>
    if(ll_p == NULL) return true;
   108c6:	2301      	movs	r3, #1
   108c8:	e7f6      	b.n	108b8 <_lv_ll_is_empty+0xc>
	...

000108cc <_lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
   108cc:	b510      	push	{r4, lr}
    int16_t ret = 0;
    angle       = angle % 360;
   108ce:	21b4      	movs	r1, #180	; 0xb4
   108d0:	0049      	lsls	r1, r1, #1
   108d2:	4b19      	ldr	r3, [pc, #100]	; (10938 <_lv_trigo_sin+0x6c>)
   108d4:	4798      	blx	r3
   108d6:	b209      	sxth	r1, r1

    if(angle < 0) angle = 360 + angle;
   108d8:	2900      	cmp	r1, #0
   108da:	db16      	blt.n	1090a <_lv_trigo_sin+0x3e>

    if(angle < 90) {
   108dc:	2959      	cmp	r1, #89	; 0x59
   108de:	dd18      	ble.n	10912 <_lv_trigo_sin+0x46>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
   108e0:	b289      	uxth	r1, r1
   108e2:	000b      	movs	r3, r1
   108e4:	3b5a      	subs	r3, #90	; 0x5a
   108e6:	b29b      	uxth	r3, r3
   108e8:	2b59      	cmp	r3, #89	; 0x59
   108ea:	d916      	bls.n	1091a <_lv_trigo_sin+0x4e>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
   108ec:	000b      	movs	r3, r1
   108ee:	3bb4      	subs	r3, #180	; 0xb4
   108f0:	b29b      	uxth	r3, r3
   108f2:	2b59      	cmp	r3, #89	; 0x59
   108f4:	d918      	bls.n	10928 <_lv_trigo_sin+0x5c>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
   108f6:	23b4      	movs	r3, #180	; 0xb4
   108f8:	005b      	lsls	r3, r3, #1
   108fa:	1a59      	subs	r1, r3, r1
        ret   = -sin0_90_table[angle];
   108fc:	b209      	sxth	r1, r1
   108fe:	0049      	lsls	r1, r1, #1
   10900:	4b0e      	ldr	r3, [pc, #56]	; (1093c <_lv_trigo_sin+0x70>)
   10902:	5ac8      	ldrh	r0, [r1, r3]
   10904:	4240      	negs	r0, r0
   10906:	b200      	sxth	r0, r0
   10908:	e006      	b.n	10918 <_lv_trigo_sin+0x4c>
    if(angle < 0) angle = 360 + angle;
   1090a:	3169      	adds	r1, #105	; 0x69
   1090c:	31ff      	adds	r1, #255	; 0xff
   1090e:	b209      	sxth	r1, r1
   10910:	e7e4      	b.n	108dc <_lv_trigo_sin+0x10>
        ret = sin0_90_table[angle];
   10912:	0049      	lsls	r1, r1, #1
   10914:	4b09      	ldr	r3, [pc, #36]	; (1093c <_lv_trigo_sin+0x70>)
   10916:	5ec8      	ldrsh	r0, [r1, r3]
    }

    return ret;
}
   10918:	bd10      	pop	{r4, pc}
        angle = 180 - angle;
   1091a:	23b4      	movs	r3, #180	; 0xb4
   1091c:	1a59      	subs	r1, r3, r1
        ret   = sin0_90_table[angle];
   1091e:	b209      	sxth	r1, r1
   10920:	0049      	lsls	r1, r1, #1
   10922:	4b06      	ldr	r3, [pc, #24]	; (1093c <_lv_trigo_sin+0x70>)
   10924:	5ec8      	ldrsh	r0, [r1, r3]
   10926:	e7f7      	b.n	10918 <_lv_trigo_sin+0x4c>
        ret   = -sin0_90_table[angle];
   10928:	b21b      	sxth	r3, r3
   1092a:	005b      	lsls	r3, r3, #1
   1092c:	4a03      	ldr	r2, [pc, #12]	; (1093c <_lv_trigo_sin+0x70>)
   1092e:	5a98      	ldrh	r0, [r3, r2]
   10930:	4240      	negs	r0, r0
   10932:	b200      	sxth	r0, r0
   10934:	e7f0      	b.n	10918 <_lv_trigo_sin+0x4c>
   10936:	46c0      	nop			; (mov r8, r8)
   10938:	00017c41 	.word	0x00017c41
   1093c:	0001c8a4 	.word	0x0001c8a4

00010940 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   10940:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   10942:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   10944:	2500      	movs	r5, #0
   10946:	e001      	b.n	1094c <_lv_sqrt+0xc>
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
        if((uint32_t)trial * trial <= x) root = trial;
        mask = mask >> 1;
   10948:	0852      	lsrs	r2, r2, #1
    } while(mask);
   1094a:	d006      	beq.n	1095a <_lv_sqrt+0x1a>
        trial = root + mask;
   1094c:	1953      	adds	r3, r2, r5
        if((uint32_t)trial * trial <= x) root = trial;
   1094e:	001c      	movs	r4, r3
   10950:	435c      	muls	r4, r3
   10952:	42a0      	cmp	r0, r4
   10954:	d3f8      	bcc.n	10948 <_lv_sqrt+0x8>
   10956:	001d      	movs	r5, r3
   10958:	e7f6      	b.n	10948 <_lv_sqrt+0x8>

    q->i = (uint32_t) root >> 4;
   1095a:	092b      	lsrs	r3, r5, #4
   1095c:	800b      	strh	r3, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   1095e:	012d      	lsls	r5, r5, #4
   10960:	23ff      	movs	r3, #255	; 0xff
   10962:	401d      	ands	r5, r3
   10964:	804d      	strh	r5, [r1, #2]
}
   10966:	bd30      	pop	{r4, r5, pc}

00010968 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
   10968:	2800      	cmp	r0, #0
   1096a:	d00e      	beq.n	1098a <ent_get_next+0x22>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
   1096c:	1d03      	adds	r3, r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
   1096e:	6800      	ldr	r0, [r0, #0]
   10970:	0840      	lsrs	r0, r0, #1
   10972:	1818      	adds	r0, r3, r0

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
   10974:	1d02      	adds	r2, r0, #4
   10976:	4b06      	ldr	r3, [pc, #24]	; (10990 <ent_get_next+0x28>)
   10978:	681b      	ldr	r3, [r3, #0]
   1097a:	2180      	movs	r1, #128	; 0x80
   1097c:	0189      	lsls	r1, r1, #6
   1097e:	468c      	mov	ip, r1
   10980:	4463      	add	r3, ip
   10982:	429a      	cmp	r2, r3
   10984:	419b      	sbcs	r3, r3
   10986:	4018      	ands	r0, r3
    }

    return next_e;
}
   10988:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
   1098a:	4b01      	ldr	r3, [pc, #4]	; (10990 <ent_get_next+0x28>)
   1098c:	6818      	ldr	r0, [r3, #0]
   1098e:	e7fb      	b.n	10988 <ent_get_next+0x20>
   10990:	20002c0c 	.word	0x20002c0c

00010994 <ent_trunc>:
 * Truncate the data of entry to the given size
 * @param e Pointer to an entry
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
   10994:	b530      	push	{r4, r5, lr}
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   10996:	078b      	lsls	r3, r1, #30
   10998:	d002      	beq.n	109a0 <ent_trunc+0xc>
        size = size & (~0x3);
   1099a:	2303      	movs	r3, #3
   1099c:	4399      	bics	r1, r3
        size += 4;
   1099e:	3104      	adds	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
   109a0:	6803      	ldr	r3, [r0, #0]
   109a2:	085b      	lsrs	r3, r3, #1
   109a4:	1d0a      	adds	r2, r1, #4
   109a6:	4293      	cmp	r3, r2
   109a8:	d017      	beq.n	109da <ent_trunc+0x46>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
   109aa:	4299      	cmp	r1, r3
   109ac:	d00e      	beq.n	109cc <ent_trunc+0x38>
        uint8_t * e_data             = &e->first_data;
   109ae:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
   109b0:	1852      	adds	r2, r2, r1
        after_new_e->header.s.used   = 0;
   109b2:	7813      	ldrb	r3, [r2, #0]
   109b4:	2401      	movs	r4, #1
   109b6:	43a3      	bics	r3, r4
   109b8:	7013      	strb	r3, [r2, #0]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
   109ba:	6803      	ldr	r3, [r0, #0]
   109bc:	085b      	lsrs	r3, r3, #1
   109be:	3b04      	subs	r3, #4
   109c0:	1a5b      	subs	r3, r3, r1
   109c2:	005b      	lsls	r3, r3, #1
   109c4:	6815      	ldr	r5, [r2, #0]
   109c6:	402c      	ands	r4, r5
   109c8:	4323      	orrs	r3, r4
   109ca:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
   109cc:	0049      	lsls	r1, r1, #1
   109ce:	2301      	movs	r3, #1
   109d0:	6802      	ldr	r2, [r0, #0]
   109d2:	4013      	ands	r3, r2
   109d4:	4319      	orrs	r1, r3
   109d6:	6001      	str	r1, [r0, #0]
}
   109d8:	bd30      	pop	{r4, r5, pc}
        size = e->header.s.d_size;
   109da:	0011      	movs	r1, r2
   109dc:	e7f6      	b.n	109cc <ent_trunc+0x38>
	...

000109e0 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
   109e0:	4b06      	ldr	r3, [pc, #24]	; (109fc <_lv_mem_init+0x1c>)
   109e2:	4a07      	ldr	r2, [pc, #28]	; (10a00 <_lv_mem_init+0x20>)
   109e4:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
   109e6:	7819      	ldrb	r1, [r3, #0]
   109e8:	2201      	movs	r2, #1
   109ea:	4391      	bics	r1, r2
   109ec:	7019      	strb	r1, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
   109ee:	6819      	ldr	r1, [r3, #0]
   109f0:	400a      	ands	r2, r1
   109f2:	4904      	ldr	r1, [pc, #16]	; (10a04 <_lv_mem_init+0x24>)
   109f4:	430a      	orrs	r2, r1
   109f6:	601a      	str	r2, [r3, #0]
}
   109f8:	4770      	bx	lr
   109fa:	46c0      	nop			; (mov r8, r8)
   109fc:	20002c10 	.word	0x20002c10
   10a00:	20002c0c 	.word	0x20002c0c
   10a04:	00003ff8 	.word	0x00003ff8

00010a08 <lv_mem_alloc>:
{
   10a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a0a:	46c6      	mov	lr, r8
   10a0c:	b500      	push	{lr}
   10a0e:	1e05      	subs	r5, r0, #0
    if(size == 0) {
   10a10:	d020      	beq.n	10a54 <lv_mem_alloc+0x4c>
    if(size & 0x3) {
   10a12:	0783      	lsls	r3, r0, #30
   10a14:	d002      	beq.n	10a1c <lv_mem_alloc+0x14>
        size = size & (~0x3);
   10a16:	2303      	movs	r3, #3
   10a18:	439d      	bics	r5, r3
        size += 4;
   10a1a:	3504      	adds	r5, #4
    lv_mem_ent_t * e = NULL;
   10a1c:	2400      	movs	r4, #0
        e = ent_get_next(e);
   10a1e:	4e10      	ldr	r6, [pc, #64]	; (10a60 <lv_mem_alloc+0x58>)
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
   10a20:	2301      	movs	r3, #1
   10a22:	4698      	mov	r8, r3
        ent_trunc(e, size);
   10a24:	4f0f      	ldr	r7, [pc, #60]	; (10a64 <lv_mem_alloc+0x5c>)
   10a26:	e008      	b.n	10a3a <lv_mem_alloc+0x32>
   10a28:	0029      	movs	r1, r5
   10a2a:	47b8      	blx	r7
        e->header.s.used = 1;
   10a2c:	7823      	ldrb	r3, [r4, #0]
   10a2e:	2201      	movs	r2, #1
   10a30:	4313      	orrs	r3, r2
   10a32:	7023      	strb	r3, [r4, #0]
        alloc = &e->first_data;
   10a34:	1d20      	adds	r0, r4, #4
    } while(e != NULL && alloc == NULL);
   10a36:	2800      	cmp	r0, #0
   10a38:	d10f      	bne.n	10a5a <lv_mem_alloc+0x52>
        e = ent_get_next(e);
   10a3a:	0020      	movs	r0, r4
   10a3c:	47b0      	blx	r6
   10a3e:	1e04      	subs	r4, r0, #0
        if(e != NULL) {
   10a40:	d00a      	beq.n	10a58 <lv_mem_alloc+0x50>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
   10a42:	7803      	ldrb	r3, [r0, #0]
   10a44:	4642      	mov	r2, r8
   10a46:	421a      	tst	r2, r3
   10a48:	d1f7      	bne.n	10a3a <lv_mem_alloc+0x32>
   10a4a:	6803      	ldr	r3, [r0, #0]
   10a4c:	085b      	lsrs	r3, r3, #1
   10a4e:	429d      	cmp	r5, r3
   10a50:	d9ea      	bls.n	10a28 <lv_mem_alloc+0x20>
   10a52:	e7f2      	b.n	10a3a <lv_mem_alloc+0x32>
        return &zero_mem;
   10a54:	4804      	ldr	r0, [pc, #16]	; (10a68 <lv_mem_alloc+0x60>)
   10a56:	e000      	b.n	10a5a <lv_mem_alloc+0x52>
   10a58:	2000      	movs	r0, #0
}
   10a5a:	bc04      	pop	{r2}
   10a5c:	4690      	mov	r8, r2
   10a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a60:	00010969 	.word	0x00010969
   10a64:	00010995 	.word	0x00010995
   10a68:	20004c10 	.word	0x20004c10

00010a6c <lv_mem_defrag>:
{
   10a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a6e:	46c6      	mov	lr, r8
   10a70:	b500      	push	{lr}
    e_free = ent_get_next(NULL);
   10a72:	2000      	movs	r0, #0
   10a74:	4b15      	ldr	r3, [pc, #84]	; (10acc <lv_mem_defrag+0x60>)
   10a76:	4798      	blx	r3
   10a78:	0004      	movs	r4, r0
            if(e_free->header.s.used != 0) {
   10a7a:	2501      	movs	r5, #1
        e_next = ent_get_next(e_free);
   10a7c:	4f13      	ldr	r7, [pc, #76]	; (10acc <lv_mem_defrag+0x60>)
            e_next = ent_get_next(e_next);
   10a7e:	003e      	movs	r6, r7
                e_free = ent_get_next(e_free);
   10a80:	46b8      	mov	r8, r7
   10a82:	e017      	b.n	10ab4 <lv_mem_defrag+0x48>
        e_next = ent_get_next(e_free);
   10a84:	0020      	movs	r0, r4
   10a86:	47b8      	blx	r7
        while(e_next != NULL) {
   10a88:	2800      	cmp	r0, #0
   10a8a:	d01c      	beq.n	10ac6 <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
   10a8c:	7803      	ldrb	r3, [r0, #0]
   10a8e:	421d      	tst	r5, r3
   10a90:	d10f      	bne.n	10ab2 <lv_mem_defrag+0x46>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
   10a92:	6822      	ldr	r2, [r4, #0]
   10a94:	0853      	lsrs	r3, r2, #1
   10a96:	3304      	adds	r3, #4
   10a98:	6801      	ldr	r1, [r0, #0]
   10a9a:	0849      	lsrs	r1, r1, #1
   10a9c:	185b      	adds	r3, r3, r1
   10a9e:	005b      	lsls	r3, r3, #1
   10aa0:	402a      	ands	r2, r5
   10aa2:	4313      	orrs	r3, r2
   10aa4:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
   10aa6:	47b0      	blx	r6
        while(e_next != NULL) {
   10aa8:	2800      	cmp	r0, #0
   10aaa:	d00c      	beq.n	10ac6 <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
   10aac:	7803      	ldrb	r3, [r0, #0]
   10aae:	421d      	tst	r5, r3
   10ab0:	d0ef      	beq.n	10a92 <lv_mem_defrag+0x26>
{
   10ab2:	0004      	movs	r4, r0
        while(e_free != NULL) {
   10ab4:	2c00      	cmp	r4, #0
   10ab6:	d006      	beq.n	10ac6 <lv_mem_defrag+0x5a>
            if(e_free->header.s.used != 0) {
   10ab8:	7823      	ldrb	r3, [r4, #0]
   10aba:	421d      	tst	r5, r3
   10abc:	d0e2      	beq.n	10a84 <lv_mem_defrag+0x18>
                e_free = ent_get_next(e_free);
   10abe:	0020      	movs	r0, r4
   10ac0:	47c0      	blx	r8
   10ac2:	0004      	movs	r4, r0
   10ac4:	e7f6      	b.n	10ab4 <lv_mem_defrag+0x48>
}
   10ac6:	bc04      	pop	{r2}
   10ac8:	4690      	mov	r8, r2
   10aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10acc:	00010969 	.word	0x00010969

00010ad0 <lv_mem_free>:
{
   10ad0:	b570      	push	{r4, r5, r6, lr}
   10ad2:	0004      	movs	r4, r0
    if(data == &zero_mem) return;
   10ad4:	4b19      	ldr	r3, [pc, #100]	; (10b3c <lv_mem_free+0x6c>)
   10ad6:	4298      	cmp	r0, r3
   10ad8:	d028      	beq.n	10b2c <lv_mem_free+0x5c>
    if(data == NULL) return;
   10ada:	2800      	cmp	r0, #0
   10adc:	d026      	beq.n	10b2c <lv_mem_free+0x5c>
    e->header.s.used = 0;
   10ade:	1f02      	subs	r2, r0, #4
   10ae0:	7813      	ldrb	r3, [r2, #0]
   10ae2:	2101      	movs	r1, #1
   10ae4:	438b      	bics	r3, r1
   10ae6:	7013      	strb	r3, [r2, #0]
    full_defrag_cnt++;
   10ae8:	4a15      	ldr	r2, [pc, #84]	; (10b40 <lv_mem_free+0x70>)
   10aea:	8813      	ldrh	r3, [r2, #0]
   10aec:	3301      	adds	r3, #1
   10aee:	b29b      	uxth	r3, r3
   10af0:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
   10af2:	2b0f      	cmp	r3, #15
   10af4:	d81b      	bhi.n	10b2e <lv_mem_free+0x5e>
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
   10af6:	3804      	subs	r0, #4
        e_next = ent_get_next(e);
   10af8:	4b12      	ldr	r3, [pc, #72]	; (10b44 <lv_mem_free+0x74>)
   10afa:	4798      	blx	r3
        while(e_next != NULL) {
   10afc:	2800      	cmp	r0, #0
   10afe:	d015      	beq.n	10b2c <lv_mem_free+0x5c>
            if(e_next->header.s.used == 0) {
   10b00:	7803      	ldrb	r3, [r0, #0]
   10b02:	07db      	lsls	r3, r3, #31
   10b04:	d412      	bmi.n	10b2c <lv_mem_free+0x5c>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
   10b06:	3c04      	subs	r4, #4
   10b08:	2501      	movs	r5, #1
            e_next = ent_get_next(e_next);
   10b0a:	4e0e      	ldr	r6, [pc, #56]	; (10b44 <lv_mem_free+0x74>)
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
   10b0c:	6822      	ldr	r2, [r4, #0]
   10b0e:	0853      	lsrs	r3, r2, #1
   10b10:	3304      	adds	r3, #4
   10b12:	6801      	ldr	r1, [r0, #0]
   10b14:	0849      	lsrs	r1, r1, #1
   10b16:	185b      	adds	r3, r3, r1
   10b18:	005b      	lsls	r3, r3, #1
   10b1a:	402a      	ands	r2, r5
   10b1c:	4313      	orrs	r3, r2
   10b1e:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
   10b20:	47b0      	blx	r6
        while(e_next != NULL) {
   10b22:	2800      	cmp	r0, #0
   10b24:	d002      	beq.n	10b2c <lv_mem_free+0x5c>
            if(e_next->header.s.used == 0) {
   10b26:	7803      	ldrb	r3, [r0, #0]
   10b28:	421d      	tst	r5, r3
   10b2a:	d0ef      	beq.n	10b0c <lv_mem_free+0x3c>
}
   10b2c:	bd70      	pop	{r4, r5, r6, pc}
        full_defrag_cnt = 0;
   10b2e:	2200      	movs	r2, #0
   10b30:	4b03      	ldr	r3, [pc, #12]	; (10b40 <lv_mem_free+0x70>)
   10b32:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
   10b34:	4b04      	ldr	r3, [pc, #16]	; (10b48 <lv_mem_free+0x78>)
   10b36:	4798      	blx	r3
   10b38:	e7f8      	b.n	10b2c <lv_mem_free+0x5c>
   10b3a:	46c0      	nop			; (mov r8, r8)
   10b3c:	20004c10 	.word	0x20004c10
   10b40:	20002be8 	.word	0x20002be8
   10b44:	00010969 	.word	0x00010969
   10b48:	00010a6d 	.word	0x00010a6d

00010b4c <_lv_mem_get_size>:
    if(data == NULL) return 0;
   10b4c:	2800      	cmp	r0, #0
   10b4e:	d006      	beq.n	10b5e <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
   10b50:	4b05      	ldr	r3, [pc, #20]	; (10b68 <_lv_mem_get_size+0x1c>)
   10b52:	4298      	cmp	r0, r3
   10b54:	d005      	beq.n	10b62 <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
   10b56:	3804      	subs	r0, #4
   10b58:	6800      	ldr	r0, [r0, #0]
   10b5a:	0840      	lsrs	r0, r0, #1
}
   10b5c:	4770      	bx	lr
    if(data == NULL) return 0;
   10b5e:	2000      	movs	r0, #0
   10b60:	e7fc      	b.n	10b5c <_lv_mem_get_size+0x10>
    if(data == &zero_mem) return 0;
   10b62:	2000      	movs	r0, #0
   10b64:	e7fa      	b.n	10b5c <_lv_mem_get_size+0x10>
   10b66:	46c0      	nop			; (mov r8, r8)
   10b68:	20004c10 	.word	0x20004c10

00010b6c <_lv_mem_buf_release>:
{
   10b6c:	b510      	push	{r4, lr}
        if(mem_buf_small[i].p == p) {
   10b6e:	4b15      	ldr	r3, [pc, #84]	; (10bc4 <_lv_mem_buf_release+0x58>)
   10b70:	681b      	ldr	r3, [r3, #0]
   10b72:	4298      	cmp	r0, r3
   10b74:	d013      	beq.n	10b9e <_lv_mem_buf_release+0x32>
   10b76:	4b13      	ldr	r3, [pc, #76]	; (10bc4 <_lv_mem_buf_release+0x58>)
   10b78:	689b      	ldr	r3, [r3, #8]
   10b7a:	2201      	movs	r2, #1
   10b7c:	4283      	cmp	r3, r0
   10b7e:	d00f      	beq.n	10ba0 <_lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   10b80:	4b11      	ldr	r3, [pc, #68]	; (10bc8 <_lv_mem_buf_release+0x5c>)
   10b82:	681b      	ldr	r3, [r3, #0]
   10b84:	4298      	cmp	r0, r3
   10b86:	d013      	beq.n	10bb0 <_lv_mem_buf_release+0x44>
   10b88:	2301      	movs	r3, #1
   10b8a:	4c0f      	ldr	r4, [pc, #60]	; (10bc8 <_lv_mem_buf_release+0x5c>)
   10b8c:	0019      	movs	r1, r3
   10b8e:	00da      	lsls	r2, r3, #3
   10b90:	58a2      	ldr	r2, [r4, r2]
   10b92:	4290      	cmp	r0, r2
   10b94:	d00d      	beq.n	10bb2 <_lv_mem_buf_release+0x46>
   10b96:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   10b98:	2b10      	cmp	r3, #16
   10b9a:	d1f7      	bne.n	10b8c <_lv_mem_buf_release+0x20>
}
   10b9c:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   10b9e:	2200      	movs	r2, #0
            mem_buf_small[i].used = 0;
   10ba0:	00d2      	lsls	r2, r2, #3
   10ba2:	4b08      	ldr	r3, [pc, #32]	; (10bc4 <_lv_mem_buf_release+0x58>)
   10ba4:	189b      	adds	r3, r3, r2
   10ba6:	799a      	ldrb	r2, [r3, #6]
   10ba8:	2101      	movs	r1, #1
   10baa:	438a      	bics	r2, r1
   10bac:	719a      	strb	r2, [r3, #6]
            return;
   10bae:	e7f5      	b.n	10b9c <_lv_mem_buf_release+0x30>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   10bb0:	2100      	movs	r1, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   10bb2:	00c9      	lsls	r1, r1, #3
   10bb4:	4b04      	ldr	r3, [pc, #16]	; (10bc8 <_lv_mem_buf_release+0x5c>)
   10bb6:	1859      	adds	r1, r3, r1
   10bb8:	798b      	ldrb	r3, [r1, #6]
   10bba:	2201      	movs	r2, #1
   10bbc:	4393      	bics	r3, r2
   10bbe:	718b      	strb	r3, [r1, #6]
            return;
   10bc0:	e7ec      	b.n	10b9c <_lv_mem_buf_release+0x30>
   10bc2:	46c0      	nop			; (mov r8, r8)
   10bc4:	20000044 	.word	0x20000044
   10bc8:	20004cdc 	.word	0x20004cdc

00010bcc <_lv_mem_buf_free_all>:
{
   10bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bce:	46c6      	mov	lr, r8
   10bd0:	b500      	push	{lr}
        mem_buf_small[i].used = 0;
   10bd2:	4b11      	ldr	r3, [pc, #68]	; (10c18 <_lv_mem_buf_free_all+0x4c>)
   10bd4:	799a      	ldrb	r2, [r3, #6]
   10bd6:	2101      	movs	r1, #1
   10bd8:	438a      	bics	r2, r1
   10bda:	719a      	strb	r2, [r3, #6]
   10bdc:	7b9a      	ldrb	r2, [r3, #14]
   10bde:	438a      	bics	r2, r1
   10be0:	739a      	strb	r2, [r3, #14]
   10be2:	4c0e      	ldr	r4, [pc, #56]	; (10c1c <_lv_mem_buf_free_all+0x50>)
   10be4:	2500      	movs	r5, #0
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   10be6:	4b0e      	ldr	r3, [pc, #56]	; (10c20 <_lv_mem_buf_free_all+0x54>)
   10be8:	4698      	mov	r8, r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   10bea:	2600      	movs	r6, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   10bec:	0027      	movs	r7, r4
   10bee:	e003      	b.n	10bf8 <_lv_mem_buf_free_all+0x2c>
   10bf0:	3501      	adds	r5, #1
   10bf2:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   10bf4:	2d10      	cmp	r5, #16
   10bf6:	d00c      	beq.n	10c12 <_lv_mem_buf_free_all+0x46>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   10bf8:	6820      	ldr	r0, [r4, #0]
   10bfa:	2800      	cmp	r0, #0
   10bfc:	d0f8      	beq.n	10bf0 <_lv_mem_buf_free_all+0x24>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   10bfe:	47c0      	blx	r8
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   10c00:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   10c02:	00eb      	lsls	r3, r5, #3
   10c04:	18fb      	adds	r3, r7, r3
   10c06:	799a      	ldrb	r2, [r3, #6]
   10c08:	2101      	movs	r1, #1
   10c0a:	438a      	bics	r2, r1
   10c0c:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   10c0e:	80a6      	strh	r6, [r4, #4]
   10c10:	e7ee      	b.n	10bf0 <_lv_mem_buf_free_all+0x24>
}
   10c12:	bc04      	pop	{r2}
   10c14:	4690      	mov	r8, r2
   10c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c18:	20000044 	.word	0x20000044
   10c1c:	20004cdc 	.word	0x20004cdc
   10c20:	00010ad1 	.word	0x00010ad1

00010c24 <_lv_memcpy>:
{
   10c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c26:	46c6      	mov	lr, r8
   10c28:	b500      	push	{lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
   10c2a:	2303      	movs	r3, #3
   10c2c:	001c      	movs	r4, r3
   10c2e:	4004      	ands	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
   10c30:	400b      	ands	r3, r1
    if(s_align != d_align) {
   10c32:	429c      	cmp	r4, r3
   10c34:	d067      	beq.n	10d06 <_lv_memcpy+0xe2>
        while(len > 32) {
   10c36:	2a20      	cmp	r2, #32
   10c38:	d963      	bls.n	10d02 <_lv_memcpy+0xde>
   10c3a:	2321      	movs	r3, #33	; 0x21
   10c3c:	425b      	negs	r3, r3
   10c3e:	469c      	mov	ip, r3
   10c40:	4494      	add	ip, r2
   10c42:	4663      	mov	r3, ip
   10c44:	095f      	lsrs	r7, r3, #5
   10c46:	1c7b      	adds	r3, r7, #1
   10c48:	015b      	lsls	r3, r3, #5
   10c4a:	18c5      	adds	r5, r0, r3
   10c4c:	000c      	movs	r4, r1
   10c4e:	0003      	movs	r3, r0
            REPEAT8(COPY8);
   10c50:	7826      	ldrb	r6, [r4, #0]
   10c52:	701e      	strb	r6, [r3, #0]
   10c54:	7866      	ldrb	r6, [r4, #1]
   10c56:	705e      	strb	r6, [r3, #1]
   10c58:	78a6      	ldrb	r6, [r4, #2]
   10c5a:	709e      	strb	r6, [r3, #2]
   10c5c:	78e6      	ldrb	r6, [r4, #3]
   10c5e:	70de      	strb	r6, [r3, #3]
   10c60:	7926      	ldrb	r6, [r4, #4]
   10c62:	711e      	strb	r6, [r3, #4]
   10c64:	7966      	ldrb	r6, [r4, #5]
   10c66:	715e      	strb	r6, [r3, #5]
   10c68:	79a6      	ldrb	r6, [r4, #6]
   10c6a:	719e      	strb	r6, [r3, #6]
   10c6c:	79e6      	ldrb	r6, [r4, #7]
   10c6e:	71de      	strb	r6, [r3, #7]
            REPEAT8(COPY8);
   10c70:	7a26      	ldrb	r6, [r4, #8]
   10c72:	721e      	strb	r6, [r3, #8]
   10c74:	7a66      	ldrb	r6, [r4, #9]
   10c76:	725e      	strb	r6, [r3, #9]
   10c78:	7aa6      	ldrb	r6, [r4, #10]
   10c7a:	729e      	strb	r6, [r3, #10]
   10c7c:	7ae6      	ldrb	r6, [r4, #11]
   10c7e:	72de      	strb	r6, [r3, #11]
   10c80:	7b26      	ldrb	r6, [r4, #12]
   10c82:	731e      	strb	r6, [r3, #12]
   10c84:	7b66      	ldrb	r6, [r4, #13]
   10c86:	735e      	strb	r6, [r3, #13]
   10c88:	7ba6      	ldrb	r6, [r4, #14]
   10c8a:	739e      	strb	r6, [r3, #14]
   10c8c:	7be6      	ldrb	r6, [r4, #15]
   10c8e:	73de      	strb	r6, [r3, #15]
            REPEAT8(COPY8);
   10c90:	7c26      	ldrb	r6, [r4, #16]
   10c92:	741e      	strb	r6, [r3, #16]
   10c94:	7c66      	ldrb	r6, [r4, #17]
   10c96:	745e      	strb	r6, [r3, #17]
   10c98:	7ca6      	ldrb	r6, [r4, #18]
   10c9a:	749e      	strb	r6, [r3, #18]
   10c9c:	7ce6      	ldrb	r6, [r4, #19]
   10c9e:	74de      	strb	r6, [r3, #19]
   10ca0:	7d26      	ldrb	r6, [r4, #20]
   10ca2:	751e      	strb	r6, [r3, #20]
   10ca4:	7d66      	ldrb	r6, [r4, #21]
   10ca6:	755e      	strb	r6, [r3, #21]
   10ca8:	7da6      	ldrb	r6, [r4, #22]
   10caa:	759e      	strb	r6, [r3, #22]
   10cac:	7de6      	ldrb	r6, [r4, #23]
   10cae:	75de      	strb	r6, [r3, #23]
            REPEAT8(COPY8);
   10cb0:	7e26      	ldrb	r6, [r4, #24]
   10cb2:	761e      	strb	r6, [r3, #24]
   10cb4:	7e66      	ldrb	r6, [r4, #25]
   10cb6:	765e      	strb	r6, [r3, #25]
   10cb8:	7ea6      	ldrb	r6, [r4, #26]
   10cba:	769e      	strb	r6, [r3, #26]
   10cbc:	7ee6      	ldrb	r6, [r4, #27]
   10cbe:	76de      	strb	r6, [r3, #27]
   10cc0:	7f26      	ldrb	r6, [r4, #28]
   10cc2:	771e      	strb	r6, [r3, #28]
   10cc4:	7f66      	ldrb	r6, [r4, #29]
   10cc6:	775e      	strb	r6, [r3, #29]
   10cc8:	7fa6      	ldrb	r6, [r4, #30]
   10cca:	779e      	strb	r6, [r3, #30]
   10ccc:	7fe6      	ldrb	r6, [r4, #31]
   10cce:	77de      	strb	r6, [r3, #31]
   10cd0:	3320      	adds	r3, #32
   10cd2:	3420      	adds	r4, #32
        while(len > 32) {
   10cd4:	42ab      	cmp	r3, r5
   10cd6:	d1bb      	bne.n	10c50 <_lv_memcpy+0x2c>
   10cd8:	231f      	movs	r3, #31
   10cda:	4665      	mov	r5, ip
   10cdc:	439d      	bics	r5, r3
   10cde:	3520      	adds	r5, #32
   10ce0:	1943      	adds	r3, r0, r5
   10ce2:	1949      	adds	r1, r1, r5
   10ce4:	3a20      	subs	r2, #32
   10ce6:	017f      	lsls	r7, r7, #5
   10ce8:	1bd2      	subs	r2, r2, r7
        while(len) {
   10cea:	2a00      	cmp	r2, #0
   10cec:	d006      	beq.n	10cfc <_lv_memcpy+0xd8>
   10cee:	189a      	adds	r2, r3, r2
            COPY8
   10cf0:	780c      	ldrb	r4, [r1, #0]
   10cf2:	701c      	strb	r4, [r3, #0]
   10cf4:	3301      	adds	r3, #1
   10cf6:	3101      	adds	r1, #1
        while(len) {
   10cf8:	4293      	cmp	r3, r2
   10cfa:	d1f9      	bne.n	10cf0 <_lv_memcpy+0xcc>
}
   10cfc:	bc04      	pop	{r2}
   10cfe:	4690      	mov	r8, r2
   10d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(len > 32) {
   10d02:	0003      	movs	r3, r0
   10d04:	e7f1      	b.n	10cea <_lv_memcpy+0xc6>
    uint8_t * d8 = dst;
   10d06:	0005      	movs	r5, r0
    if(d_align) {
   10d08:	2c00      	cmp	r4, #0
   10d0a:	d014      	beq.n	10d36 <_lv_memcpy+0x112>
        d_align = ALIGN_MASK + 1 - d_align;
   10d0c:	2504      	movs	r5, #4
   10d0e:	1b2d      	subs	r5, r5, r4
        while(d_align && len) {
   10d10:	d00e      	beq.n	10d30 <_lv_memcpy+0x10c>
   10d12:	2a00      	cmp	r2, #0
   10d14:	d05f      	beq.n	10dd6 <_lv_memcpy+0x1b2>
   10d16:	1945      	adds	r5, r0, r5
   10d18:	0003      	movs	r3, r0
            COPY8;
   10d1a:	780c      	ldrb	r4, [r1, #0]
   10d1c:	701c      	strb	r4, [r3, #0]
   10d1e:	3301      	adds	r3, #1
   10d20:	3101      	adds	r1, #1
            len--;
   10d22:	3a01      	subs	r2, #1
        while(d_align && len) {
   10d24:	42ab      	cmp	r3, r5
   10d26:	d005      	beq.n	10d34 <_lv_memcpy+0x110>
   10d28:	2a00      	cmp	r2, #0
   10d2a:	d1f6      	bne.n	10d1a <_lv_memcpy+0xf6>
    while(len > 4) {
   10d2c:	2200      	movs	r2, #0
   10d2e:	e048      	b.n	10dc2 <_lv_memcpy+0x19e>
    uint8_t * d8 = dst;
   10d30:	0005      	movs	r5, r0
   10d32:	e000      	b.n	10d36 <_lv_memcpy+0x112>
            COPY8;
   10d34:	001d      	movs	r5, r3
    while(len > 32) {
   10d36:	2a20      	cmp	r2, #32
   10d38:	d928      	bls.n	10d8c <_lv_memcpy+0x168>
   10d3a:	0017      	movs	r7, r2
   10d3c:	3f21      	subs	r7, #33	; 0x21
   10d3e:	46b8      	mov	r8, r7
   10d40:	097b      	lsrs	r3, r7, #5
   10d42:	469c      	mov	ip, r3
   10d44:	1c5e      	adds	r6, r3, #1
   10d46:	0176      	lsls	r6, r6, #5
   10d48:	19ae      	adds	r6, r5, r6
   10d4a:	000c      	movs	r4, r1
   10d4c:	002b      	movs	r3, r5
        REPEAT8(COPY32)
   10d4e:	6827      	ldr	r7, [r4, #0]
   10d50:	601f      	str	r7, [r3, #0]
   10d52:	6867      	ldr	r7, [r4, #4]
   10d54:	605f      	str	r7, [r3, #4]
   10d56:	68a7      	ldr	r7, [r4, #8]
   10d58:	609f      	str	r7, [r3, #8]
   10d5a:	68e7      	ldr	r7, [r4, #12]
   10d5c:	60df      	str	r7, [r3, #12]
   10d5e:	6927      	ldr	r7, [r4, #16]
   10d60:	611f      	str	r7, [r3, #16]
   10d62:	6967      	ldr	r7, [r4, #20]
   10d64:	615f      	str	r7, [r3, #20]
   10d66:	69a7      	ldr	r7, [r4, #24]
   10d68:	619f      	str	r7, [r3, #24]
   10d6a:	69e7      	ldr	r7, [r4, #28]
   10d6c:	61df      	str	r7, [r3, #28]
   10d6e:	3320      	adds	r3, #32
   10d70:	3420      	adds	r4, #32
    while(len > 32) {
   10d72:	429e      	cmp	r6, r3
   10d74:	d1eb      	bne.n	10d4e <_lv_memcpy+0x12a>
   10d76:	231f      	movs	r3, #31
   10d78:	4647      	mov	r7, r8
   10d7a:	439f      	bics	r7, r3
   10d7c:	3720      	adds	r7, #32
   10d7e:	19ed      	adds	r5, r5, r7
   10d80:	19c9      	adds	r1, r1, r7
   10d82:	0013      	movs	r3, r2
   10d84:	3b20      	subs	r3, #32
   10d86:	4662      	mov	r2, ip
   10d88:	0152      	lsls	r2, r2, #5
   10d8a:	1a9a      	subs	r2, r3, r2
    while(len > 4) {
   10d8c:	002b      	movs	r3, r5
   10d8e:	2a04      	cmp	r2, #4
   10d90:	d917      	bls.n	10dc2 <_lv_memcpy+0x19e>
   10d92:	1f53      	subs	r3, r2, #5
   10d94:	469c      	mov	ip, r3
   10d96:	089b      	lsrs	r3, r3, #2
   10d98:	4698      	mov	r8, r3
   10d9a:	3301      	adds	r3, #1
   10d9c:	009b      	lsls	r3, r3, #2
   10d9e:	18eb      	adds	r3, r5, r3
   10da0:	000e      	movs	r6, r1
   10da2:	002c      	movs	r4, r5
        COPY32;
   10da4:	ce80      	ldmia	r6!, {r7}
   10da6:	c480      	stmia	r4!, {r7}
    while(len > 4) {
   10da8:	429c      	cmp	r4, r3
   10daa:	d1fb      	bne.n	10da4 <_lv_memcpy+0x180>
   10dac:	2303      	movs	r3, #3
   10dae:	4664      	mov	r4, ip
   10db0:	439c      	bics	r4, r3
   10db2:	0023      	movs	r3, r4
   10db4:	3304      	adds	r3, #4
   10db6:	1f14      	subs	r4, r2, #4
   10db8:	4642      	mov	r2, r8
   10dba:	0092      	lsls	r2, r2, #2
   10dbc:	1aa2      	subs	r2, r4, r2
        COPY32;
   10dbe:	18c9      	adds	r1, r1, r3
   10dc0:	18eb      	adds	r3, r5, r3
    while(len) {
   10dc2:	2a00      	cmp	r2, #0
   10dc4:	d09a      	beq.n	10cfc <_lv_memcpy+0xd8>
   10dc6:	189a      	adds	r2, r3, r2
        COPY8
   10dc8:	780c      	ldrb	r4, [r1, #0]
   10dca:	701c      	strb	r4, [r3, #0]
   10dcc:	3301      	adds	r3, #1
   10dce:	3101      	adds	r1, #1
    while(len) {
   10dd0:	4293      	cmp	r3, r2
   10dd2:	d1f9      	bne.n	10dc8 <_lv_memcpy+0x1a4>
   10dd4:	e792      	b.n	10cfc <_lv_memcpy+0xd8>
    uint8_t * d8 = dst;
   10dd6:	0003      	movs	r3, r0
   10dd8:	e7a8      	b.n	10d2c <_lv_memcpy+0x108>
	...

00010ddc <lv_mem_realloc>:
{
   10ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10dde:	0005      	movs	r5, r0
   10de0:	000c      	movs	r4, r1
    if(new_size & 0x3) {
   10de2:	078b      	lsls	r3, r1, #30
   10de4:	d002      	beq.n	10dec <lv_mem_realloc+0x10>
        new_size = new_size & (~0x3);
   10de6:	2303      	movs	r3, #3
   10de8:	439c      	bics	r4, r3
        new_size += 4;
   10dea:	3404      	adds	r4, #4
    if(data_p != NULL) {
   10dec:	2d00      	cmp	r5, #0
   10dee:	d004      	beq.n	10dfa <lv_mem_realloc+0x1e>
        if(e->header.s.used == 0) {
   10df0:	1f2b      	subs	r3, r5, #4
   10df2:	781b      	ldrb	r3, [r3, #0]
            data_p = NULL;
   10df4:	07db      	lsls	r3, r3, #31
   10df6:	17db      	asrs	r3, r3, #31
   10df8:	401d      	ands	r5, r3
    uint32_t old_size = _lv_mem_get_size(data_p);
   10dfa:	0028      	movs	r0, r5
   10dfc:	4b11      	ldr	r3, [pc, #68]	; (10e44 <lv_mem_realloc+0x68>)
   10dfe:	4798      	blx	r3
   10e00:	0007      	movs	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   10e02:	4284      	cmp	r4, r0
   10e04:	d01c      	beq.n	10e40 <lv_mem_realloc+0x64>
    if(new_size < old_size) {
   10e06:	d314      	bcc.n	10e32 <lv_mem_realloc+0x56>
    new_p = lv_mem_alloc(new_size);
   10e08:	0020      	movs	r0, r4
   10e0a:	4b0f      	ldr	r3, [pc, #60]	; (10e48 <lv_mem_realloc+0x6c>)
   10e0c:	4798      	blx	r3
   10e0e:	1e06      	subs	r6, r0, #0
    if(new_p == NULL) {
   10e10:	d014      	beq.n	10e3c <lv_mem_realloc+0x60>
    if(data_p != NULL) {
   10e12:	2d00      	cmp	r5, #0
   10e14:	d012      	beq.n	10e3c <lv_mem_realloc+0x60>
        if(old_size != 0) {
   10e16:	2f00      	cmp	r7, #0
   10e18:	d010      	beq.n	10e3c <lv_mem_realloc+0x60>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   10e1a:	0022      	movs	r2, r4
   10e1c:	42bc      	cmp	r4, r7
   10e1e:	d900      	bls.n	10e22 <lv_mem_realloc+0x46>
   10e20:	003a      	movs	r2, r7
   10e22:	0029      	movs	r1, r5
   10e24:	0030      	movs	r0, r6
   10e26:	4b09      	ldr	r3, [pc, #36]	; (10e4c <lv_mem_realloc+0x70>)
   10e28:	4798      	blx	r3
            lv_mem_free(data_p);
   10e2a:	0028      	movs	r0, r5
   10e2c:	4b08      	ldr	r3, [pc, #32]	; (10e50 <lv_mem_realloc+0x74>)
   10e2e:	4798      	blx	r3
   10e30:	e004      	b.n	10e3c <lv_mem_realloc+0x60>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
   10e32:	1f28      	subs	r0, r5, #4
        ent_trunc(e, new_size);
   10e34:	0021      	movs	r1, r4
   10e36:	4b07      	ldr	r3, [pc, #28]	; (10e54 <lv_mem_realloc+0x78>)
   10e38:	4798      	blx	r3
        return &e->first_data;
   10e3a:	002e      	movs	r6, r5
}
   10e3c:	0030      	movs	r0, r6
   10e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   10e40:	002e      	movs	r6, r5
   10e42:	e7fb      	b.n	10e3c <lv_mem_realloc+0x60>
   10e44:	00010b4d 	.word	0x00010b4d
   10e48:	00010a09 	.word	0x00010a09
   10e4c:	00010c25 	.word	0x00010c25
   10e50:	00010ad1 	.word	0x00010ad1
   10e54:	00010995 	.word	0x00010995

00010e58 <_lv_mem_buf_get>:
{
   10e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
   10e5a:	2800      	cmp	r0, #0
   10e5c:	d100      	bne.n	10e60 <_lv_mem_buf_get+0x8>
   10e5e:	e068      	b.n	10f32 <_lv_mem_buf_get+0xda>
    if(size <= MEM_BUF_SMALL_SIZE) {
   10e60:	2810      	cmp	r0, #16
   10e62:	d807      	bhi.n	10e74 <_lv_mem_buf_get+0x1c>
            if(mem_buf_small[i].used == 0) {
   10e64:	4b34      	ldr	r3, [pc, #208]	; (10f38 <_lv_mem_buf_get+0xe0>)
   10e66:	799b      	ldrb	r3, [r3, #6]
   10e68:	07db      	lsls	r3, r3, #31
   10e6a:	d513      	bpl.n	10e94 <_lv_mem_buf_get+0x3c>
   10e6c:	4b32      	ldr	r3, [pc, #200]	; (10f38 <_lv_mem_buf_get+0xe0>)
   10e6e:	7b9b      	ldrb	r3, [r3, #14]
   10e70:	07db      	lsls	r3, r3, #31
   10e72:	d505      	bpl.n	10e80 <_lv_mem_buf_get+0x28>
   10e74:	4c31      	ldr	r4, [pc, #196]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10e76:	2300      	movs	r3, #0
   10e78:	2601      	movs	r6, #1
   10e7a:	4276      	negs	r6, r6
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   10e7c:	0027      	movs	r7, r4
   10e7e:	e019      	b.n	10eb4 <_lv_mem_buf_get+0x5c>
            if(mem_buf_small[i].used == 0) {
   10e80:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
   10e82:	492d      	ldr	r1, [pc, #180]	; (10f38 <_lv_mem_buf_get+0xe0>)
   10e84:	00db      	lsls	r3, r3, #3
   10e86:	18c8      	adds	r0, r1, r3
   10e88:	7982      	ldrb	r2, [r0, #6]
   10e8a:	2401      	movs	r4, #1
   10e8c:	4322      	orrs	r2, r4
   10e8e:	7182      	strb	r2, [r0, #6]
                return mem_buf_small[i].p;
   10e90:	5858      	ldr	r0, [r3, r1]
   10e92:	e02d      	b.n	10ef0 <_lv_mem_buf_get+0x98>
            if(mem_buf_small[i].used == 0) {
   10e94:	2300      	movs	r3, #0
   10e96:	e7f4      	b.n	10e82 <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   10e98:	4a28      	ldr	r2, [pc, #160]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10e9a:	00dd      	lsls	r5, r3, #3
   10e9c:	1951      	adds	r1, r2, r5
   10e9e:	798b      	ldrb	r3, [r1, #6]
   10ea0:	2001      	movs	r0, #1
   10ea2:	4303      	orrs	r3, r0
   10ea4:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   10ea6:	58a8      	ldr	r0, [r5, r2]
   10ea8:	e022      	b.n	10ef0 <_lv_mem_buf_get+0x98>
                i_guess = i;
   10eaa:	b25e      	sxtb	r6, r3
   10eac:	3301      	adds	r3, #1
   10eae:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   10eb0:	2b10      	cmp	r3, #16
   10eb2:	d013      	beq.n	10edc <_lv_mem_buf_get+0x84>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   10eb4:	00da      	lsls	r2, r3, #3
   10eb6:	18ba      	adds	r2, r7, r2
   10eb8:	7992      	ldrb	r2, [r2, #6]
   10eba:	07d2      	lsls	r2, r2, #31
   10ebc:	d4f6      	bmi.n	10eac <_lv_mem_buf_get+0x54>
   10ebe:	88a2      	ldrh	r2, [r4, #4]
   10ec0:	4290      	cmp	r0, r2
   10ec2:	d8f3      	bhi.n	10eac <_lv_mem_buf_get+0x54>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   10ec4:	d0e8      	beq.n	10e98 <_lv_mem_buf_get+0x40>
            else if(i_guess < 0) {
   10ec6:	2e00      	cmp	r6, #0
   10ec8:	dbef      	blt.n	10eaa <_lv_mem_buf_get+0x52>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   10eca:	00f1      	lsls	r1, r6, #3
   10ecc:	4d1b      	ldr	r5, [pc, #108]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10ece:	46ac      	mov	ip, r5
   10ed0:	4461      	add	r1, ip
   10ed2:	8889      	ldrh	r1, [r1, #4]
   10ed4:	4291      	cmp	r1, r2
   10ed6:	d9e9      	bls.n	10eac <_lv_mem_buf_get+0x54>
                i_guess = i;
   10ed8:	b25e      	sxtb	r6, r3
   10eda:	e7e7      	b.n	10eac <_lv_mem_buf_get+0x54>
    if(i_guess >= 0) {
   10edc:	2e00      	cmp	r6, #0
   10ede:	db08      	blt.n	10ef2 <_lv_mem_buf_get+0x9a>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   10ee0:	4916      	ldr	r1, [pc, #88]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10ee2:	00f3      	lsls	r3, r6, #3
   10ee4:	18c8      	adds	r0, r1, r3
   10ee6:	7982      	ldrb	r2, [r0, #6]
   10ee8:	2401      	movs	r4, #1
   10eea:	4322      	orrs	r2, r4
   10eec:	7182      	strb	r2, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   10eee:	5858      	ldr	r0, [r3, r1]
}
   10ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   10ef2:	4b12      	ldr	r3, [pc, #72]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10ef4:	799a      	ldrb	r2, [r3, #6]
   10ef6:	2301      	movs	r3, #1
   10ef8:	2400      	movs	r4, #0
   10efa:	07d2      	lsls	r2, r2, #31
   10efc:	d50b      	bpl.n	10f16 <_lv_mem_buf_get+0xbe>
   10efe:	490f      	ldr	r1, [pc, #60]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10f00:	001c      	movs	r4, r3
   10f02:	00da      	lsls	r2, r3, #3
   10f04:	188a      	adds	r2, r1, r2
   10f06:	7992      	ldrb	r2, [r2, #6]
   10f08:	07d2      	lsls	r2, r2, #31
   10f0a:	d504      	bpl.n	10f16 <_lv_mem_buf_get+0xbe>
   10f0c:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   10f0e:	2b10      	cmp	r3, #16
   10f10:	d1f6      	bne.n	10f00 <_lv_mem_buf_get+0xa8>
    return NULL;
   10f12:	2000      	movs	r0, #0
   10f14:	e7ec      	b.n	10ef0 <_lv_mem_buf_get+0x98>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   10f16:	4d09      	ldr	r5, [pc, #36]	; (10f3c <_lv_mem_buf_get+0xe4>)
   10f18:	00e4      	lsls	r4, r4, #3
   10f1a:	192b      	adds	r3, r5, r4
   10f1c:	799a      	ldrb	r2, [r3, #6]
   10f1e:	2101      	movs	r1, #1
   10f20:	430a      	orrs	r2, r1
   10f22:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   10f24:	8098      	strh	r0, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   10f26:	0001      	movs	r1, r0
   10f28:	5960      	ldr	r0, [r4, r5]
   10f2a:	4b05      	ldr	r3, [pc, #20]	; (10f40 <_lv_mem_buf_get+0xe8>)
   10f2c:	4798      	blx	r3
   10f2e:	5160      	str	r0, [r4, r5]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   10f30:	e7de      	b.n	10ef0 <_lv_mem_buf_get+0x98>
    if(size == 0) return NULL;
   10f32:	2000      	movs	r0, #0
   10f34:	e7dc      	b.n	10ef0 <_lv_mem_buf_get+0x98>
   10f36:	46c0      	nop			; (mov r8, r8)
   10f38:	20000044 	.word	0x20000044
   10f3c:	20004cdc 	.word	0x20004cdc
   10f40:	00010ddd 	.word	0x00010ddd

00010f44 <_lv_memset>:
{
   10f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
   10f46:	2403      	movs	r4, #3
   10f48:	4004      	ands	r4, r0
    if(d_align) {
   10f4a:	d00e      	beq.n	10f6a <_lv_memset+0x26>
        d_align = ALIGN_MASK + 1 - d_align;
   10f4c:	2304      	movs	r3, #4
   10f4e:	1b1b      	subs	r3, r3, r4
        while(d_align && len) {
   10f50:	d00b      	beq.n	10f6a <_lv_memset+0x26>
   10f52:	2a00      	cmp	r2, #0
   10f54:	d007      	beq.n	10f66 <_lv_memset+0x22>
   10f56:	18c3      	adds	r3, r0, r3
            *d8 = v;
   10f58:	7001      	strb	r1, [r0, #0]
            d8++;
   10f5a:	3001      	adds	r0, #1
            len--;
   10f5c:	3a01      	subs	r2, #1
        while(d_align && len) {
   10f5e:	4298      	cmp	r0, r3
   10f60:	d003      	beq.n	10f6a <_lv_memset+0x26>
   10f62:	2a00      	cmp	r2, #0
   10f64:	d1f8      	bne.n	10f58 <_lv_memset+0x14>
    while(len > 4) {
   10f66:	2200      	movs	r2, #0
   10f68:	e034      	b.n	10fd4 <_lv_memset+0x90>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
   10f6a:	020c      	lsls	r4, r1, #8
   10f6c:	1864      	adds	r4, r4, r1
   10f6e:	040b      	lsls	r3, r1, #16
   10f70:	18e4      	adds	r4, r4, r3
   10f72:	060b      	lsls	r3, r1, #24
   10f74:	18e4      	adds	r4, r4, r3
    while(len > 32) {
   10f76:	0006      	movs	r6, r0
   10f78:	2a20      	cmp	r2, #32
   10f7a:	d918      	bls.n	10fae <_lv_memset+0x6a>
   10f7c:	0016      	movs	r6, r2
   10f7e:	3e21      	subs	r6, #33	; 0x21
   10f80:	0977      	lsrs	r7, r6, #5
   10f82:	1c7d      	adds	r5, r7, #1
   10f84:	016d      	lsls	r5, r5, #5
   10f86:	1945      	adds	r5, r0, r5
   10f88:	0003      	movs	r3, r0
        SET32(v32);
   10f8a:	601c      	str	r4, [r3, #0]
        SET32(v32);
   10f8c:	605c      	str	r4, [r3, #4]
        SET32(v32);
   10f8e:	609c      	str	r4, [r3, #8]
        SET32(v32);
   10f90:	60dc      	str	r4, [r3, #12]
        SET32(v32);
   10f92:	611c      	str	r4, [r3, #16]
        SET32(v32);
   10f94:	615c      	str	r4, [r3, #20]
        SET32(v32);
   10f96:	619c      	str	r4, [r3, #24]
        SET32(v32);
   10f98:	61dc      	str	r4, [r3, #28]
   10f9a:	3320      	adds	r3, #32
    while(len > 32) {
   10f9c:	429d      	cmp	r5, r3
   10f9e:	d1f4      	bne.n	10f8a <_lv_memset+0x46>
   10fa0:	231f      	movs	r3, #31
   10fa2:	439e      	bics	r6, r3
   10fa4:	3620      	adds	r6, #32
   10fa6:	1986      	adds	r6, r0, r6
   10fa8:	3a20      	subs	r2, #32
   10faa:	017f      	lsls	r7, r7, #5
   10fac:	1bd2      	subs	r2, r2, r7
    while(len > 4) {
   10fae:	0030      	movs	r0, r6
   10fb0:	2a04      	cmp	r2, #4
   10fb2:	d90f      	bls.n	10fd4 <_lv_memset+0x90>
   10fb4:	1f50      	subs	r0, r2, #5
   10fb6:	0887      	lsrs	r7, r0, #2
   10fb8:	1c7d      	adds	r5, r7, #1
   10fba:	00ad      	lsls	r5, r5, #2
   10fbc:	1975      	adds	r5, r6, r5
   10fbe:	0033      	movs	r3, r6
        SET32(v32);
   10fc0:	c310      	stmia	r3!, {r4}
    while(len > 4) {
   10fc2:	42ab      	cmp	r3, r5
   10fc4:	d1fc      	bne.n	10fc0 <_lv_memset+0x7c>
   10fc6:	2303      	movs	r3, #3
   10fc8:	4398      	bics	r0, r3
   10fca:	3004      	adds	r0, #4
   10fcc:	3a04      	subs	r2, #4
   10fce:	00bf      	lsls	r7, r7, #2
   10fd0:	1bd2      	subs	r2, r2, r7
        SET32(v32);
   10fd2:	1830      	adds	r0, r6, r0
    while(len) {
   10fd4:	2a00      	cmp	r2, #0
   10fd6:	d004      	beq.n	10fe2 <_lv_memset+0x9e>
   10fd8:	1882      	adds	r2, r0, r2
        *d8 = v;
   10fda:	7001      	strb	r1, [r0, #0]
        d8++;
   10fdc:	3001      	adds	r0, #1
    while(len) {
   10fde:	4290      	cmp	r0, r2
   10fe0:	d1fb      	bne.n	10fda <_lv_memset+0x96>
}
   10fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010fe4 <_lv_memset_00>:
{
   10fe4:	b570      	push	{r4, r5, r6, lr}
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
   10fe6:	2303      	movs	r3, #3
   10fe8:	4003      	ands	r3, r0
    if(d_align) {
   10fea:	d13a      	bne.n	11062 <_lv_memset_00+0x7e>
    while(len > 32) {
   10fec:	2920      	cmp	r1, #32
   10fee:	d919      	bls.n	11024 <_lv_memset_00+0x40>
   10ff0:	000d      	movs	r5, r1
   10ff2:	3d21      	subs	r5, #33	; 0x21
   10ff4:	096e      	lsrs	r6, r5, #5
   10ff6:	1c74      	adds	r4, r6, #1
   10ff8:	0164      	lsls	r4, r4, #5
   10ffa:	1904      	adds	r4, r0, r4
   10ffc:	0003      	movs	r3, r0
        SET32(0);
   10ffe:	2200      	movs	r2, #0
   11000:	601a      	str	r2, [r3, #0]
        SET32(0);
   11002:	605a      	str	r2, [r3, #4]
        SET32(0);
   11004:	609a      	str	r2, [r3, #8]
        SET32(0);
   11006:	60da      	str	r2, [r3, #12]
        SET32(0);
   11008:	611a      	str	r2, [r3, #16]
        SET32(0);
   1100a:	615a      	str	r2, [r3, #20]
        SET32(0);
   1100c:	619a      	str	r2, [r3, #24]
        SET32(0);
   1100e:	61da      	str	r2, [r3, #28]
   11010:	3320      	adds	r3, #32
    while(len > 32) {
   11012:	429c      	cmp	r4, r3
   11014:	d1f4      	bne.n	11000 <_lv_memset_00+0x1c>
   11016:	231f      	movs	r3, #31
   11018:	439d      	bics	r5, r3
   1101a:	3520      	adds	r5, #32
   1101c:	1940      	adds	r0, r0, r5
   1101e:	3920      	subs	r1, #32
   11020:	0176      	lsls	r6, r6, #5
   11022:	1b89      	subs	r1, r1, r6
    while(len > 4) {
   11024:	0003      	movs	r3, r0
   11026:	2904      	cmp	r1, #4
   11028:	d910      	bls.n	1104c <_lv_memset_00+0x68>
   1102a:	1f4b      	subs	r3, r1, #5
   1102c:	089e      	lsrs	r6, r3, #2
   1102e:	1c74      	adds	r4, r6, #1
   11030:	00a4      	lsls	r4, r4, #2
   11032:	1904      	adds	r4, r0, r4
   11034:	0002      	movs	r2, r0
        SET32(0);
   11036:	2500      	movs	r5, #0
   11038:	c220      	stmia	r2!, {r5}
    while(len > 4) {
   1103a:	42a2      	cmp	r2, r4
   1103c:	d1fc      	bne.n	11038 <_lv_memset_00+0x54>
   1103e:	2203      	movs	r2, #3
   11040:	4393      	bics	r3, r2
   11042:	3304      	adds	r3, #4
   11044:	3904      	subs	r1, #4
   11046:	00b6      	lsls	r6, r6, #2
   11048:	1b89      	subs	r1, r1, r6
        SET32(0);
   1104a:	18c3      	adds	r3, r0, r3
    while(len) {
   1104c:	2900      	cmp	r1, #0
   1104e:	d005      	beq.n	1105c <_lv_memset_00+0x78>
   11050:	1859      	adds	r1, r3, r1
        *d8 = 0;
   11052:	2200      	movs	r2, #0
   11054:	701a      	strb	r2, [r3, #0]
        d8++;
   11056:	3301      	adds	r3, #1
    while(len) {
   11058:	428b      	cmp	r3, r1
   1105a:	d1fb      	bne.n	11054 <_lv_memset_00+0x70>
}
   1105c:	bd70      	pop	{r4, r5, r6, pc}
            d8++;
   1105e:	0018      	movs	r0, r3
   11060:	e7c4      	b.n	10fec <_lv_memset_00+0x8>
        d_align = ALIGN_MASK + 1 - d_align;
   11062:	2204      	movs	r2, #4
   11064:	1ad2      	subs	r2, r2, r3
        while(d_align && len) {
   11066:	d0c1      	beq.n	10fec <_lv_memset_00+0x8>
   11068:	2900      	cmp	r1, #0
   1106a:	d00b      	beq.n	11084 <_lv_memset_00+0xa0>
   1106c:	1882      	adds	r2, r0, r2
   1106e:	0003      	movs	r3, r0
            *d8 = 0x00;
   11070:	2000      	movs	r0, #0
   11072:	7018      	strb	r0, [r3, #0]
            d8++;
   11074:	3301      	adds	r3, #1
            len--;
   11076:	3901      	subs	r1, #1
        while(d_align && len) {
   11078:	4293      	cmp	r3, r2
   1107a:	d0f0      	beq.n	1105e <_lv_memset_00+0x7a>
   1107c:	2900      	cmp	r1, #0
   1107e:	d1f8      	bne.n	11072 <_lv_memset_00+0x8e>
    while(len > 4) {
   11080:	2100      	movs	r1, #0
   11082:	e7e3      	b.n	1104c <_lv_memset_00+0x68>
    uint8_t * d8 = (uint8_t *) dst;
   11084:	0003      	movs	r3, r0
   11086:	e7fb      	b.n	11080 <_lv_memset_00+0x9c>

00011088 <_lv_memset_ff>:
{
   11088:	b570      	push	{r4, r5, r6, lr}
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
   1108a:	2303      	movs	r3, #3
   1108c:	4003      	ands	r3, r0
    if(d_align) {
   1108e:	d13c      	bne.n	1110a <_lv_memset_ff+0x82>
    while(len > 32) {
   11090:	2920      	cmp	r1, #32
   11092:	d91a      	bls.n	110ca <_lv_memset_ff+0x42>
   11094:	000d      	movs	r5, r1
   11096:	3d21      	subs	r5, #33	; 0x21
   11098:	096e      	lsrs	r6, r5, #5
   1109a:	1c74      	adds	r4, r6, #1
   1109c:	0164      	lsls	r4, r4, #5
   1109e:	1904      	adds	r4, r0, r4
   110a0:	0003      	movs	r3, r0
        SET32(0xFFFFFFFF);
   110a2:	2201      	movs	r2, #1
   110a4:	4252      	negs	r2, r2
   110a6:	601a      	str	r2, [r3, #0]
        SET32(0xFFFFFFFF);
   110a8:	605a      	str	r2, [r3, #4]
        SET32(0xFFFFFFFF);
   110aa:	609a      	str	r2, [r3, #8]
        SET32(0xFFFFFFFF);
   110ac:	60da      	str	r2, [r3, #12]
        SET32(0xFFFFFFFF);
   110ae:	611a      	str	r2, [r3, #16]
        SET32(0xFFFFFFFF);
   110b0:	615a      	str	r2, [r3, #20]
        SET32(0xFFFFFFFF);
   110b2:	619a      	str	r2, [r3, #24]
        SET32(0xFFFFFFFF);
   110b4:	61da      	str	r2, [r3, #28]
   110b6:	3320      	adds	r3, #32
    while(len > 32) {
   110b8:	429c      	cmp	r4, r3
   110ba:	d1f4      	bne.n	110a6 <_lv_memset_ff+0x1e>
   110bc:	231f      	movs	r3, #31
   110be:	439d      	bics	r5, r3
   110c0:	3520      	adds	r5, #32
   110c2:	1940      	adds	r0, r0, r5
   110c4:	3920      	subs	r1, #32
   110c6:	0176      	lsls	r6, r6, #5
   110c8:	1b89      	subs	r1, r1, r6
    while(len > 4) {
   110ca:	0003      	movs	r3, r0
   110cc:	2904      	cmp	r1, #4
   110ce:	d911      	bls.n	110f4 <_lv_memset_ff+0x6c>
   110d0:	1f4b      	subs	r3, r1, #5
   110d2:	089e      	lsrs	r6, r3, #2
   110d4:	1c74      	adds	r4, r6, #1
   110d6:	00a4      	lsls	r4, r4, #2
   110d8:	1904      	adds	r4, r0, r4
   110da:	0002      	movs	r2, r0
        SET32(0xFFFFFFFF);
   110dc:	2501      	movs	r5, #1
   110de:	426d      	negs	r5, r5
   110e0:	c220      	stmia	r2!, {r5}
    while(len > 4) {
   110e2:	42a2      	cmp	r2, r4
   110e4:	d1fc      	bne.n	110e0 <_lv_memset_ff+0x58>
   110e6:	2203      	movs	r2, #3
   110e8:	4393      	bics	r3, r2
   110ea:	3304      	adds	r3, #4
   110ec:	3904      	subs	r1, #4
   110ee:	00b6      	lsls	r6, r6, #2
   110f0:	1b89      	subs	r1, r1, r6
        SET32(0xFFFFFFFF);
   110f2:	18c3      	adds	r3, r0, r3
    while(len) {
   110f4:	2900      	cmp	r1, #0
   110f6:	d005      	beq.n	11104 <_lv_memset_ff+0x7c>
   110f8:	1859      	adds	r1, r3, r1
        *d8 = 0xFF;
   110fa:	22ff      	movs	r2, #255	; 0xff
   110fc:	701a      	strb	r2, [r3, #0]
        d8++;
   110fe:	3301      	adds	r3, #1
    while(len) {
   11100:	428b      	cmp	r3, r1
   11102:	d1fb      	bne.n	110fc <_lv_memset_ff+0x74>
}
   11104:	bd70      	pop	{r4, r5, r6, pc}
            d8++;
   11106:	0018      	movs	r0, r3
   11108:	e7c2      	b.n	11090 <_lv_memset_ff+0x8>
        d_align = ALIGN_MASK + 1 - d_align;
   1110a:	2204      	movs	r2, #4
   1110c:	1ad2      	subs	r2, r2, r3
        while(d_align && len) {
   1110e:	d0bf      	beq.n	11090 <_lv_memset_ff+0x8>
   11110:	2900      	cmp	r1, #0
   11112:	d00b      	beq.n	1112c <_lv_memset_ff+0xa4>
   11114:	1882      	adds	r2, r0, r2
   11116:	0003      	movs	r3, r0
            *d8 = 0xFF;
   11118:	20ff      	movs	r0, #255	; 0xff
   1111a:	7018      	strb	r0, [r3, #0]
            d8++;
   1111c:	3301      	adds	r3, #1
            len--;
   1111e:	3901      	subs	r1, #1
        while(d_align && len) {
   11120:	4293      	cmp	r3, r2
   11122:	d0f0      	beq.n	11106 <_lv_memset_ff+0x7e>
   11124:	2900      	cmp	r1, #0
   11126:	d1f8      	bne.n	1111a <_lv_memset_ff+0x92>
    while(len > 4) {
   11128:	2100      	movs	r1, #0
   1112a:	e7e3      	b.n	110f4 <_lv_memset_ff+0x6c>
    uint8_t * d8 = (uint8_t *) dst;
   1112c:	0003      	movs	r3, r0
   1112e:	e7fb      	b.n	11128 <_lv_memset_ff+0xa0>

00011130 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   11130:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   11132:	2118      	movs	r1, #24
   11134:	4804      	ldr	r0, [pc, #16]	; (11148 <_lv_task_core_init+0x18>)
   11136:	4b05      	ldr	r3, [pc, #20]	; (1114c <_lv_task_core_init+0x1c>)
   11138:	4798      	blx	r3

    task_list_changed = false;
   1113a:	2200      	movs	r2, #0
   1113c:	4b04      	ldr	r3, [pc, #16]	; (11150 <_lv_task_core_init+0x20>)
   1113e:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   11140:	3201      	adds	r2, #1
   11142:	4b04      	ldr	r3, [pc, #16]	; (11154 <_lv_task_core_init+0x24>)
   11144:	701a      	strb	r2, [r3, #0]
}
   11146:	bd10      	pop	{r4, pc}
   11148:	20004cac 	.word	0x20004cac
   1114c:	00010551 	.word	0x00010551
   11150:	20004c2b 	.word	0x20004c2b
   11154:	20004c28 	.word	0x20004c28

00011158 <lv_task_create_basic>:
{
   11158:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1115a:	482f      	ldr	r0, [pc, #188]	; (11218 <lv_task_create_basic+0xc0>)
   1115c:	4b2f      	ldr	r3, [pc, #188]	; (1121c <lv_task_create_basic+0xc4>)
   1115e:	4798      	blx	r3
   11160:	1e04      	subs	r4, r0, #0
    if(NULL == tmp) {
   11162:	d018      	beq.n	11196 <lv_task_create_basic+0x3e>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   11164:	4d2e      	ldr	r5, [pc, #184]	; (11220 <lv_task_create_basic+0xc8>)
            if(tmp->prio <= DEF_PRIO) {
   11166:	7d23      	ldrb	r3, [r4, #20]
   11168:	075b      	lsls	r3, r3, #29
   1116a:	0f5b      	lsrs	r3, r3, #29
   1116c:	2b03      	cmp	r3, #3
   1116e:	dd23      	ble.n	111b8 <lv_task_create_basic+0x60>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   11170:	0021      	movs	r1, r4
   11172:	4829      	ldr	r0, [pc, #164]	; (11218 <lv_task_create_basic+0xc0>)
   11174:	47a8      	blx	r5
   11176:	1e04      	subs	r4, r0, #0
        } while(tmp != NULL);
   11178:	d1f5      	bne.n	11166 <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   1117a:	4827      	ldr	r0, [pc, #156]	; (11218 <lv_task_create_basic+0xc0>)
   1117c:	4b29      	ldr	r3, [pc, #164]	; (11224 <lv_task_create_basic+0xcc>)
   1117e:	4798      	blx	r3
   11180:	0005      	movs	r5, r0
            LV_ASSERT_MEM(new_task);
   11182:	4b29      	ldr	r3, [pc, #164]	; (11228 <lv_task_create_basic+0xd0>)
   11184:	4798      	blx	r3
   11186:	2800      	cmp	r0, #0
   11188:	d142      	bne.n	11210 <lv_task_create_basic+0xb8>
   1118a:	002a      	movs	r2, r5
   1118c:	2300      	movs	r3, #0
   1118e:	4827      	ldr	r0, [pc, #156]	; (1122c <lv_task_create_basic+0xd4>)
   11190:	4927      	ldr	r1, [pc, #156]	; (11230 <lv_task_create_basic+0xd8>)
   11192:	4788      	blx	r1
   11194:	e7fe      	b.n	11194 <lv_task_create_basic+0x3c>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   11196:	4820      	ldr	r0, [pc, #128]	; (11218 <lv_task_create_basic+0xc0>)
   11198:	4b26      	ldr	r3, [pc, #152]	; (11234 <lv_task_create_basic+0xdc>)
   1119a:	4798      	blx	r3
   1119c:	0005      	movs	r5, r0
        LV_ASSERT_MEM(new_task);
   1119e:	4b22      	ldr	r3, [pc, #136]	; (11228 <lv_task_create_basic+0xd0>)
   111a0:	4798      	blx	r3
   111a2:	2800      	cmp	r0, #0
   111a4:	d105      	bne.n	111b2 <lv_task_create_basic+0x5a>
   111a6:	002a      	movs	r2, r5
   111a8:	2300      	movs	r3, #0
   111aa:	4820      	ldr	r0, [pc, #128]	; (1122c <lv_task_create_basic+0xd4>)
   111ac:	4920      	ldr	r1, [pc, #128]	; (11230 <lv_task_create_basic+0xd8>)
   111ae:	4788      	blx	r1
   111b0:	e7fe      	b.n	111b0 <lv_task_create_basic+0x58>
        if(new_task == NULL) return NULL;
   111b2:	2d00      	cmp	r5, #0
   111b4:	d10d      	bne.n	111d2 <lv_task_create_basic+0x7a>
   111b6:	e023      	b.n	11200 <lv_task_create_basic+0xa8>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   111b8:	0021      	movs	r1, r4
   111ba:	4817      	ldr	r0, [pc, #92]	; (11218 <lv_task_create_basic+0xc0>)
   111bc:	4b1e      	ldr	r3, [pc, #120]	; (11238 <lv_task_create_basic+0xe0>)
   111be:	4798      	blx	r3
   111c0:	0005      	movs	r5, r0
                LV_ASSERT_MEM(new_task);
   111c2:	4b19      	ldr	r3, [pc, #100]	; (11228 <lv_task_create_basic+0xd0>)
   111c4:	4798      	blx	r3
   111c6:	2800      	cmp	r0, #0
   111c8:	d01c      	beq.n	11204 <lv_task_create_basic+0xac>
                if(new_task == NULL) return NULL;
   111ca:	2d00      	cmp	r5, #0
   111cc:	d018      	beq.n	11200 <lv_task_create_basic+0xa8>
        if(tmp == NULL) {
   111ce:	2c00      	cmp	r4, #0
   111d0:	d0d3      	beq.n	1117a <lv_task_create_basic+0x22>
    task_list_changed = true;
   111d2:	2401      	movs	r4, #1
   111d4:	4b19      	ldr	r3, [pc, #100]	; (1123c <lv_task_create_basic+0xe4>)
   111d6:	701c      	strb	r4, [r3, #0]
    new_task->period  = DEF_PERIOD;
   111d8:	23fa      	movs	r3, #250	; 0xfa
   111da:	005b      	lsls	r3, r3, #1
   111dc:	602b      	str	r3, [r5, #0]
    new_task->task_cb = NULL;
   111de:	2600      	movs	r6, #0
   111e0:	60ae      	str	r6, [r5, #8]
    new_task->prio    = DEF_PRIO;
   111e2:	7d2b      	ldrb	r3, [r5, #20]
   111e4:	2207      	movs	r2, #7
   111e6:	4393      	bics	r3, r2
   111e8:	2203      	movs	r2, #3
   111ea:	4313      	orrs	r3, r2
   111ec:	752b      	strb	r3, [r5, #20]
    new_task->repeat_count = -1;
   111ee:	2301      	movs	r3, #1
   111f0:	425b      	negs	r3, r3
   111f2:	612b      	str	r3, [r5, #16]
    new_task->last_run = lv_tick_get();
   111f4:	4b12      	ldr	r3, [pc, #72]	; (11240 <lv_task_create_basic+0xe8>)
   111f6:	4798      	blx	r3
   111f8:	6068      	str	r0, [r5, #4]
    new_task->user_data = NULL;
   111fa:	60ee      	str	r6, [r5, #12]
    task_created = true;
   111fc:	4b11      	ldr	r3, [pc, #68]	; (11244 <lv_task_create_basic+0xec>)
   111fe:	701c      	strb	r4, [r3, #0]
}
   11200:	0028      	movs	r0, r5
   11202:	bd70      	pop	{r4, r5, r6, pc}
                LV_ASSERT_MEM(new_task);
   11204:	002a      	movs	r2, r5
   11206:	2300      	movs	r3, #0
   11208:	4808      	ldr	r0, [pc, #32]	; (1122c <lv_task_create_basic+0xd4>)
   1120a:	4909      	ldr	r1, [pc, #36]	; (11230 <lv_task_create_basic+0xd8>)
   1120c:	4788      	blx	r1
   1120e:	e7fe      	b.n	1120e <lv_task_create_basic+0xb6>
            if(new_task == NULL) return NULL;
   11210:	2d00      	cmp	r5, #0
   11212:	d1de      	bne.n	111d2 <lv_task_create_basic+0x7a>
   11214:	e7f4      	b.n	11200 <lv_task_create_basic+0xa8>
   11216:	46c0      	nop			; (mov r8, r8)
   11218:	20004cac 	.word	0x20004cac
   1121c:	00010605 	.word	0x00010605
   11220:	0001061d 	.word	0x0001061d
   11224:	000105b5 	.word	0x000105b5
   11228:	00001415 	.word	0x00001415
   1122c:	00018804 	.word	0x00018804
   11230:	0000141d 	.word	0x0000141d
   11234:	00010565 	.word	0x00010565
   11238:	0001066d 	.word	0x0001066d
   1123c:	20004c2b 	.word	0x20004c2b
   11240:	0000f725 	.word	0x0000f725
   11244:	20004c29 	.word	0x20004c29

00011248 <lv_task_del>:
{
   11248:	b510      	push	{r4, lr}
   1124a:	0004      	movs	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   1124c:	0001      	movs	r1, r0
   1124e:	4809      	ldr	r0, [pc, #36]	; (11274 <lv_task_del+0x2c>)
   11250:	4b09      	ldr	r3, [pc, #36]	; (11278 <lv_task_del+0x30>)
   11252:	4798      	blx	r3
    task_list_changed = true;
   11254:	2201      	movs	r2, #1
   11256:	4b09      	ldr	r3, [pc, #36]	; (1127c <lv_task_del+0x34>)
   11258:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
   1125a:	0020      	movs	r0, r4
   1125c:	4b08      	ldr	r3, [pc, #32]	; (11280 <lv_task_del+0x38>)
   1125e:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   11260:	4b08      	ldr	r3, [pc, #32]	; (11284 <lv_task_del+0x3c>)
   11262:	681b      	ldr	r3, [r3, #0]
   11264:	429c      	cmp	r4, r3
   11266:	d000      	beq.n	1126a <lv_task_del+0x22>
}
   11268:	bd10      	pop	{r4, pc}
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   1126a:	2201      	movs	r2, #1
   1126c:	4b06      	ldr	r3, [pc, #24]	; (11288 <lv_task_del+0x40>)
   1126e:	701a      	strb	r2, [r3, #0]
}
   11270:	e7fa      	b.n	11268 <lv_task_del+0x20>
   11272:	46c0      	nop			; (mov r8, r8)
   11274:	20004cac 	.word	0x20004cac
   11278:	000106ed 	.word	0x000106ed
   1127c:	20004c2b 	.word	0x20004c2b
   11280:	00010ad1 	.word	0x00010ad1
   11284:	20004d78 	.word	0x20004d78
   11288:	20004c2a 	.word	0x20004c2a

0001128c <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   1128c:	b510      	push	{r4, lr}
   1128e:	0004      	movs	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   11290:	6840      	ldr	r0, [r0, #4]
   11292:	4b13      	ldr	r3, [pc, #76]	; (112e0 <lv_task_exec+0x54>)
   11294:	4798      	blx	r3
    bool exec = false;
   11296:	2300      	movs	r3, #0
    if(elp >= task->period)
   11298:	6822      	ldr	r2, [r4, #0]
   1129a:	4290      	cmp	r0, r2
   1129c:	d201      	bcs.n	112a2 <lv_task_exec+0x16>
}
   1129e:	0018      	movs	r0, r3
   112a0:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
   112a2:	4b10      	ldr	r3, [pc, #64]	; (112e4 <lv_task_exec+0x58>)
   112a4:	4798      	blx	r3
   112a6:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   112a8:	2300      	movs	r3, #0
   112aa:	4a0f      	ldr	r2, [pc, #60]	; (112e8 <lv_task_exec+0x5c>)
   112ac:	7013      	strb	r3, [r2, #0]
        task_created   = false;
   112ae:	4a0f      	ldr	r2, [pc, #60]	; (112ec <lv_task_exec+0x60>)
   112b0:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   112b2:	68a3      	ldr	r3, [r4, #8]
   112b4:	2b00      	cmp	r3, #0
   112b6:	d005      	beq.n	112c4 <lv_task_exec+0x38>
   112b8:	0020      	movs	r0, r4
   112ba:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   112bc:	4b0a      	ldr	r3, [pc, #40]	; (112e8 <lv_task_exec+0x5c>)
   112be:	781b      	ldrb	r3, [r3, #0]
   112c0:	2b00      	cmp	r3, #0
   112c2:	d1ec      	bne.n	1129e <lv_task_exec+0x12>
            if(task->repeat_count > 0) {
   112c4:	6923      	ldr	r3, [r4, #16]
   112c6:	2b00      	cmp	r3, #0
   112c8:	dd01      	ble.n	112ce <lv_task_exec+0x42>
                task->repeat_count--;
   112ca:	3b01      	subs	r3, #1
   112cc:	6123      	str	r3, [r4, #16]
        exec = true;
   112ce:	2301      	movs	r3, #1
            if(task->repeat_count == 0) {
   112d0:	6922      	ldr	r2, [r4, #16]
   112d2:	2a00      	cmp	r2, #0
   112d4:	d1e3      	bne.n	1129e <lv_task_exec+0x12>
                lv_task_del(task);
   112d6:	0020      	movs	r0, r4
   112d8:	4b05      	ldr	r3, [pc, #20]	; (112f0 <lv_task_exec+0x64>)
   112da:	4798      	blx	r3
        exec = true;
   112dc:	2301      	movs	r3, #1
   112de:	e7de      	b.n	1129e <lv_task_exec+0x12>
   112e0:	0000f741 	.word	0x0000f741
   112e4:	0000f725 	.word	0x0000f725
   112e8:	20004c2a 	.word	0x20004c2a
   112ec:	20004c29 	.word	0x20004c29
   112f0:	00011249 	.word	0x00011249

000112f4 <lv_task_handler>:
{
   112f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   112f6:	46de      	mov	lr, fp
   112f8:	4657      	mov	r7, sl
   112fa:	464e      	mov	r6, r9
   112fc:	b5c0      	push	{r6, r7, lr}
    if(already_running) return 1;
   112fe:	4b66      	ldr	r3, [pc, #408]	; (11498 <lv_task_handler+0x1a4>)
   11300:	781b      	ldrb	r3, [r3, #0]
   11302:	2001      	movs	r0, #1
   11304:	2b00      	cmp	r3, #0
   11306:	d109      	bne.n	1131c <lv_task_handler+0x28>
    already_running = true;
   11308:	2201      	movs	r2, #1
   1130a:	4b63      	ldr	r3, [pc, #396]	; (11498 <lv_task_handler+0x1a4>)
   1130c:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
   1130e:	4b63      	ldr	r3, [pc, #396]	; (1149c <lv_task_handler+0x1a8>)
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	2b00      	cmp	r3, #0
   11314:	d107      	bne.n	11326 <lv_task_handler+0x32>
        already_running = false; /*Release mutex*/
   11316:	2200      	movs	r2, #0
   11318:	4b5f      	ldr	r3, [pc, #380]	; (11498 <lv_task_handler+0x1a4>)
   1131a:	701a      	strb	r2, [r3, #0]
}
   1131c:	bc1c      	pop	{r2, r3, r4}
   1131e:	4691      	mov	r9, r2
   11320:	469a      	mov	sl, r3
   11322:	46a3      	mov	fp, r4
   11324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    handler_start = lv_tick_get();
   11326:	4b5e      	ldr	r3, [pc, #376]	; (114a0 <lv_task_handler+0x1ac>)
   11328:	4798      	blx	r3
   1132a:	4b5e      	ldr	r3, [pc, #376]	; (114a4 <lv_task_handler+0x1b0>)
   1132c:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   1132e:	2400      	movs	r4, #0
        task_deleted             = false;
   11330:	4b5d      	ldr	r3, [pc, #372]	; (114a8 <lv_task_handler+0x1b4>)
   11332:	469b      	mov	fp, r3
   11334:	2300      	movs	r3, #0
   11336:	4699      	mov	r9, r3
        task_created             = false;
   11338:	4b5c      	ldr	r3, [pc, #368]	; (114ac <lv_task_handler+0x1b8>)
   1133a:	469a      	mov	sl, r3
   1133c:	e084      	b.n	11448 <lv_task_handler+0x154>
                LV_GC_ROOT(_lv_task_act) = next;
   1133e:	4b5c      	ldr	r3, [pc, #368]	; (114b0 <lv_task_handler+0x1bc>)
   11340:	601d      	str	r5, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   11342:	2400      	movs	r4, #0
                continue; /*Load the next task*/
   11344:	e00f      	b.n	11366 <lv_task_handler+0x72>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   11346:	4b5b      	ldr	r3, [pc, #364]	; (114b4 <lv_task_handler+0x1c0>)
   11348:	4798      	blx	r3
            if(task_created || task_deleted) {
   1134a:	4b58      	ldr	r3, [pc, #352]	; (114ac <lv_task_handler+0x1b8>)
   1134c:	781b      	ldrb	r3, [r3, #0]
   1134e:	2b00      	cmp	r3, #0
   11350:	d12f      	bne.n	113b2 <lv_task_handler+0xbe>
   11352:	4b55      	ldr	r3, [pc, #340]	; (114a8 <lv_task_handler+0x1b4>)
   11354:	781b      	ldrb	r3, [r3, #0]
   11356:	2b00      	cmp	r3, #0
   11358:	d12b      	bne.n	113b2 <lv_task_handler+0xbe>
            if(task_list_changed) {
   1135a:	4b57      	ldr	r3, [pc, #348]	; (114b8 <lv_task_handler+0x1c4>)
   1135c:	781b      	ldrb	r3, [r3, #0]
   1135e:	2b00      	cmp	r3, #0
   11360:	d16e      	bne.n	11440 <lv_task_handler+0x14c>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   11362:	4b53      	ldr	r3, [pc, #332]	; (114b0 <lv_task_handler+0x1bc>)
   11364:	601d      	str	r5, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   11366:	6831      	ldr	r1, [r6, #0]
   11368:	2900      	cmp	r1, #0
   1136a:	d022      	beq.n	113b2 <lv_task_handler+0xbe>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   1136c:	4853      	ldr	r0, [pc, #332]	; (114bc <lv_task_handler+0x1c8>)
   1136e:	47b8      	blx	r7
   11370:	0005      	movs	r5, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   11372:	4b4f      	ldr	r3, [pc, #316]	; (114b0 <lv_task_handler+0x1bc>)
   11374:	6818      	ldr	r0, [r3, #0]
   11376:	7d02      	ldrb	r2, [r0, #20]
   11378:	2307      	movs	r3, #7
   1137a:	4013      	ands	r3, r2
   1137c:	d019      	beq.n	113b2 <lv_task_handler+0xbe>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   1137e:	4284      	cmp	r4, r0
   11380:	d0dd      	beq.n	1133e <lv_task_handler+0x4a>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   11382:	2b05      	cmp	r3, #5
   11384:	d0df      	beq.n	11346 <lv_task_handler+0x52>
            else if(task_interrupter) {
   11386:	2c00      	cmp	r4, #0
   11388:	d04b      	beq.n	11422 <lv_task_handler+0x12e>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   1138a:	7d02      	ldrb	r2, [r0, #20]
   1138c:	0752      	lsls	r2, r2, #29
   1138e:	0f52      	lsrs	r2, r2, #29
   11390:	7d23      	ldrb	r3, [r4, #20]
   11392:	075b      	lsls	r3, r3, #29
   11394:	0f5b      	lsrs	r3, r3, #29
   11396:	429a      	cmp	r2, r3
   11398:	ddd7      	ble.n	1134a <lv_task_handler+0x56>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   1139a:	4b46      	ldr	r3, [pc, #280]	; (114b4 <lv_task_handler+0x1c0>)
   1139c:	4798      	blx	r3
   1139e:	2800      	cmp	r0, #0
   113a0:	d0d3      	beq.n	1134a <lv_task_handler+0x56>
                        if(!task_created && !task_deleted) {
   113a2:	4b42      	ldr	r3, [pc, #264]	; (114ac <lv_task_handler+0x1b8>)
   113a4:	781b      	ldrb	r3, [r3, #0]
   113a6:	2b00      	cmp	r3, #0
   113a8:	d103      	bne.n	113b2 <lv_task_handler+0xbe>
   113aa:	4b3f      	ldr	r3, [pc, #252]	; (114a8 <lv_task_handler+0x1b4>)
   113ac:	781b      	ldrb	r3, [r3, #0]
   113ae:	2b00      	cmp	r3, #0
   113b0:	d034      	beq.n	1141c <lv_task_handler+0x128>
    busy_time += lv_tick_elaps(handler_start);
   113b2:	4b3c      	ldr	r3, [pc, #240]	; (114a4 <lv_task_handler+0x1b0>)
   113b4:	6818      	ldr	r0, [r3, #0]
   113b6:	4c42      	ldr	r4, [pc, #264]	; (114c0 <lv_task_handler+0x1cc>)
   113b8:	47a0      	blx	r4
   113ba:	4b42      	ldr	r3, [pc, #264]	; (114c4 <lv_task_handler+0x1d0>)
   113bc:	681a      	ldr	r2, [r3, #0]
   113be:	4694      	mov	ip, r2
   113c0:	4460      	add	r0, ip
   113c2:	6018      	str	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   113c4:	4b40      	ldr	r3, [pc, #256]	; (114c8 <lv_task_handler+0x1d4>)
   113c6:	6818      	ldr	r0, [r3, #0]
   113c8:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   113ca:	23f4      	movs	r3, #244	; 0xf4
   113cc:	33ff      	adds	r3, #255	; 0xff
   113ce:	4298      	cmp	r0, r3
   113d0:	d917      	bls.n	11402 <lv_task_handler+0x10e>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   113d2:	4b3c      	ldr	r3, [pc, #240]	; (114c4 <lv_task_handler+0x1d0>)
   113d4:	6818      	ldr	r0, [r3, #0]
   113d6:	2364      	movs	r3, #100	; 0x64
   113d8:	4358      	muls	r0, r3
   113da:	21fa      	movs	r1, #250	; 0xfa
   113dc:	0049      	lsls	r1, r1, #1
   113de:	4b3b      	ldr	r3, [pc, #236]	; (114cc <lv_task_handler+0x1d8>)
   113e0:	4798      	blx	r3
   113e2:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   113e4:	2300      	movs	r3, #0
   113e6:	2864      	cmp	r0, #100	; 0x64
   113e8:	d802      	bhi.n	113f0 <lv_task_handler+0xfc>
   113ea:	2364      	movs	r3, #100	; 0x64
   113ec:	1a1b      	subs	r3, r3, r0
   113ee:	b2db      	uxtb	r3, r3
   113f0:	4a37      	ldr	r2, [pc, #220]	; (114d0 <lv_task_handler+0x1dc>)
   113f2:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   113f4:	2200      	movs	r2, #0
   113f6:	4b33      	ldr	r3, [pc, #204]	; (114c4 <lv_task_handler+0x1d0>)
   113f8:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
   113fa:	4b29      	ldr	r3, [pc, #164]	; (114a0 <lv_task_handler+0x1ac>)
   113fc:	4798      	blx	r3
   113fe:	4b32      	ldr	r3, [pc, #200]	; (114c8 <lv_task_handler+0x1d4>)
   11400:	6018      	str	r0, [r3, #0]
    time_till_next = LV_NO_TASK_READY;
   11402:	2201      	movs	r2, #1
   11404:	4252      	negs	r2, r2
   11406:	4b33      	ldr	r3, [pc, #204]	; (114d4 <lv_task_handler+0x1e0>)
   11408:	601a      	str	r2, [r3, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1140a:	482c      	ldr	r0, [pc, #176]	; (114bc <lv_task_handler+0x1c8>)
   1140c:	4b32      	ldr	r3, [pc, #200]	; (114d8 <lv_task_handler+0x1e4>)
   1140e:	4798      	blx	r3
   11410:	1e04      	subs	r4, r0, #0
    while(next) {
   11412:	d03b      	beq.n	1148c <lv_task_handler+0x198>
    uint32_t elp = lv_tick_elaps(task->last_run);
   11414:	4d2a      	ldr	r5, [pc, #168]	; (114c0 <lv_task_handler+0x1cc>)
            if(delay < time_till_next)
   11416:	4f2f      	ldr	r7, [pc, #188]	; (114d4 <lv_task_handler+0x1e0>)
                time_till_next = delay;
   11418:	003e      	movs	r6, r7
   1141a:	e028      	b.n	1146e <lv_task_handler+0x17a>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
   1141c:	4b24      	ldr	r3, [pc, #144]	; (114b0 <lv_task_handler+0x1bc>)
   1141e:	681c      	ldr	r4, [r3, #0]
                            break;
   11420:	e012      	b.n	11448 <lv_task_handler+0x154>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   11422:	4b24      	ldr	r3, [pc, #144]	; (114b4 <lv_task_handler+0x1c0>)
   11424:	4798      	blx	r3
   11426:	2800      	cmp	r0, #0
   11428:	d08f      	beq.n	1134a <lv_task_handler+0x56>
                    if(!task_created && !task_deleted) {
   1142a:	4b20      	ldr	r3, [pc, #128]	; (114ac <lv_task_handler+0x1b8>)
   1142c:	781b      	ldrb	r3, [r3, #0]
   1142e:	2b00      	cmp	r3, #0
   11430:	d1bf      	bne.n	113b2 <lv_task_handler+0xbe>
   11432:	4b1d      	ldr	r3, [pc, #116]	; (114a8 <lv_task_handler+0x1b4>)
   11434:	781b      	ldrb	r3, [r3, #0]
   11436:	2b00      	cmp	r3, #0
   11438:	d1bb      	bne.n	113b2 <lv_task_handler+0xbe>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   1143a:	4b1d      	ldr	r3, [pc, #116]	; (114b0 <lv_task_handler+0x1bc>)
   1143c:	681c      	ldr	r4, [r3, #0]
                        break;
   1143e:	e003      	b.n	11448 <lv_task_handler+0x154>
                task_list_changed = false;
   11440:	4b1d      	ldr	r3, [pc, #116]	; (114b8 <lv_task_handler+0x1c4>)
   11442:	2200      	movs	r2, #0
   11444:	701a      	strb	r2, [r3, #0]
                task_interrupter = NULL;
   11446:	2400      	movs	r4, #0
        task_deleted             = false;
   11448:	465b      	mov	r3, fp
   1144a:	464a      	mov	r2, r9
   1144c:	701a      	strb	r2, [r3, #0]
        task_created             = false;
   1144e:	4653      	mov	r3, sl
   11450:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   11452:	481a      	ldr	r0, [pc, #104]	; (114bc <lv_task_handler+0x1c8>)
   11454:	4b20      	ldr	r3, [pc, #128]	; (114d8 <lv_task_handler+0x1e4>)
   11456:	4798      	blx	r3
   11458:	4b15      	ldr	r3, [pc, #84]	; (114b0 <lv_task_handler+0x1bc>)
   1145a:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   1145c:	001e      	movs	r6, r3
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   1145e:	4f1f      	ldr	r7, [pc, #124]	; (114dc <lv_task_handler+0x1e8>)
        while(LV_GC_ROOT(_lv_task_act)) {
   11460:	e781      	b.n	11366 <lv_task_handler+0x72>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   11462:	0021      	movs	r1, r4
   11464:	4815      	ldr	r0, [pc, #84]	; (114bc <lv_task_handler+0x1c8>)
   11466:	4b1d      	ldr	r3, [pc, #116]	; (114dc <lv_task_handler+0x1e8>)
   11468:	4798      	blx	r3
   1146a:	1e04      	subs	r4, r0, #0
    while(next) {
   1146c:	d00e      	beq.n	1148c <lv_task_handler+0x198>
        if(next->prio != LV_TASK_PRIO_OFF) {
   1146e:	7d23      	ldrb	r3, [r4, #20]
   11470:	075b      	lsls	r3, r3, #29
   11472:	d0f6      	beq.n	11462 <lv_task_handler+0x16e>
    uint32_t elp = lv_tick_elaps(task->last_run);
   11474:	6860      	ldr	r0, [r4, #4]
   11476:	47a8      	blx	r5
    if(elp >= task->period)
   11478:	6822      	ldr	r2, [r4, #0]
        return 0;
   1147a:	2300      	movs	r3, #0
    if(elp >= task->period)
   1147c:	4290      	cmp	r0, r2
   1147e:	d200      	bcs.n	11482 <lv_task_handler+0x18e>
    return task->period - elp;
   11480:	1a13      	subs	r3, r2, r0
            if(delay < time_till_next)
   11482:	683a      	ldr	r2, [r7, #0]
   11484:	429a      	cmp	r2, r3
   11486:	d9ec      	bls.n	11462 <lv_task_handler+0x16e>
                time_till_next = delay;
   11488:	6033      	str	r3, [r6, #0]
   1148a:	e7ea      	b.n	11462 <lv_task_handler+0x16e>
    already_running = false; /*Release the mutex*/
   1148c:	2200      	movs	r2, #0
   1148e:	4b02      	ldr	r3, [pc, #8]	; (11498 <lv_task_handler+0x1a4>)
   11490:	701a      	strb	r2, [r3, #0]
    return time_till_next;
   11492:	4b10      	ldr	r3, [pc, #64]	; (114d4 <lv_task_handler+0x1e0>)
   11494:	6818      	ldr	r0, [r3, #0]
   11496:	e741      	b.n	1131c <lv_task_handler+0x28>
   11498:	20004c14 	.word	0x20004c14
   1149c:	20004c28 	.word	0x20004c28
   114a0:	0000f725 	.word	0x0000f725
   114a4:	20004c1c 	.word	0x20004c1c
   114a8:	20004c2a 	.word	0x20004c2a
   114ac:	20004c29 	.word	0x20004c29
   114b0:	20004d78 	.word	0x20004d78
   114b4:	0001128d 	.word	0x0001128d
   114b8:	20004c2b 	.word	0x20004c2b
   114bc:	20004cac 	.word	0x20004cac
   114c0:	0000f741 	.word	0x0000f741
   114c4:	20004c18 	.word	0x20004c18
   114c8:	20004c24 	.word	0x20004c24
   114cc:	00017961 	.word	0x00017961
   114d0:	20004c20 	.word	0x20004c20
   114d4:	20004c2c 	.word	0x20004c2c
   114d8:	00010605 	.word	0x00010605
   114dc:	0001061d 	.word	0x0001061d

000114e0 <lv_task_set_prio>:
{
   114e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114e2:	46ce      	mov	lr, r9
   114e4:	b500      	push	{lr}
   114e6:	0005      	movs	r5, r0
   114e8:	4689      	mov	r9, r1
    if(task->prio == prio) return;
   114ea:	000e      	movs	r6, r1
   114ec:	7d03      	ldrb	r3, [r0, #20]
   114ee:	075b      	lsls	r3, r3, #29
   114f0:	0f5b      	lsrs	r3, r3, #29
   114f2:	428b      	cmp	r3, r1
   114f4:	d028      	beq.n	11548 <lv_task_set_prio+0x68>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   114f6:	4819      	ldr	r0, [pc, #100]	; (1155c <lv_task_set_prio+0x7c>)
   114f8:	4b19      	ldr	r3, [pc, #100]	; (11560 <lv_task_set_prio+0x80>)
   114fa:	4798      	blx	r3
   114fc:	1e04      	subs	r4, r0, #0
   114fe:	d026      	beq.n	1154e <lv_task_set_prio+0x6e>
        if(i->prio <= prio) {
   11500:	7d03      	ldrb	r3, [r0, #20]
   11502:	075b      	lsls	r3, r3, #29
   11504:	0f5b      	lsrs	r3, r3, #29
   11506:	429e      	cmp	r6, r3
   11508:	da0a      	bge.n	11520 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   1150a:	4f16      	ldr	r7, [pc, #88]	; (11564 <lv_task_set_prio+0x84>)
   1150c:	0021      	movs	r1, r4
   1150e:	4813      	ldr	r0, [pc, #76]	; (1155c <lv_task_set_prio+0x7c>)
   11510:	47b8      	blx	r7
   11512:	1e04      	subs	r4, r0, #0
   11514:	d01b      	beq.n	1154e <lv_task_set_prio+0x6e>
        if(i->prio <= prio) {
   11516:	7d23      	ldrb	r3, [r4, #20]
   11518:	075b      	lsls	r3, r3, #29
   1151a:	0f5b      	lsrs	r3, r3, #29
   1151c:	429e      	cmp	r6, r3
   1151e:	dbf5      	blt.n	1150c <lv_task_set_prio+0x2c>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   11520:	42a5      	cmp	r5, r4
   11522:	d006      	beq.n	11532 <lv_task_set_prio+0x52>
   11524:	0022      	movs	r2, r4
   11526:	0029      	movs	r1, r5
   11528:	480c      	ldr	r0, [pc, #48]	; (1155c <lv_task_set_prio+0x7c>)
   1152a:	4b0f      	ldr	r3, [pc, #60]	; (11568 <lv_task_set_prio+0x88>)
   1152c:	4798      	blx	r3
    if(i == NULL) {
   1152e:	2c00      	cmp	r4, #0
   11530:	d00d      	beq.n	1154e <lv_task_set_prio+0x6e>
    task_list_changed = true;
   11532:	2201      	movs	r2, #1
   11534:	4b0d      	ldr	r3, [pc, #52]	; (1156c <lv_task_set_prio+0x8c>)
   11536:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   11538:	3206      	adds	r2, #6
   1153a:	464b      	mov	r3, r9
   1153c:	401a      	ands	r2, r3
   1153e:	7d2b      	ldrb	r3, [r5, #20]
   11540:	2107      	movs	r1, #7
   11542:	438b      	bics	r3, r1
   11544:	4313      	orrs	r3, r2
   11546:	752b      	strb	r3, [r5, #20]
}
   11548:	bc04      	pop	{r2}
   1154a:	4691      	mov	r9, r2
   1154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   1154e:	2200      	movs	r2, #0
   11550:	0029      	movs	r1, r5
   11552:	4802      	ldr	r0, [pc, #8]	; (1155c <lv_task_set_prio+0x7c>)
   11554:	4b04      	ldr	r3, [pc, #16]	; (11568 <lv_task_set_prio+0x88>)
   11556:	4798      	blx	r3
   11558:	e7eb      	b.n	11532 <lv_task_set_prio+0x52>
   1155a:	46c0      	nop			; (mov r8, r8)
   1155c:	20004cac 	.word	0x20004cac
   11560:	00010605 	.word	0x00010605
   11564:	0001061d 	.word	0x0001061d
   11568:	000107f9 	.word	0x000107f9
   1156c:	20004c2b 	.word	0x20004c2b

00011570 <lv_task_create>:
{
   11570:	b5f0      	push	{r4, r5, r6, r7, lr}
   11572:	b083      	sub	sp, #12
   11574:	0006      	movs	r6, r0
   11576:	000f      	movs	r7, r1
   11578:	9201      	str	r2, [sp, #4]
   1157a:	001d      	movs	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   1157c:	4b0c      	ldr	r3, [pc, #48]	; (115b0 <lv_task_create+0x40>)
   1157e:	4798      	blx	r3
   11580:	0004      	movs	r4, r0
    LV_ASSERT_MEM(new_task);
   11582:	4b0c      	ldr	r3, [pc, #48]	; (115b4 <lv_task_create+0x44>)
   11584:	4798      	blx	r3
   11586:	2800      	cmp	r0, #0
   11588:	d00b      	beq.n	115a2 <lv_task_create+0x32>
    if(new_task == NULL) return NULL;
   1158a:	2c00      	cmp	r4, #0
   1158c:	d006      	beq.n	1159c <lv_task_create+0x2c>
    task->task_cb = task_cb;
   1158e:	60a6      	str	r6, [r4, #8]
    task->period = period;
   11590:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
   11592:	9901      	ldr	r1, [sp, #4]
   11594:	0020      	movs	r0, r4
   11596:	4b08      	ldr	r3, [pc, #32]	; (115b8 <lv_task_create+0x48>)
   11598:	4798      	blx	r3
    new_task->user_data = user_data;
   1159a:	60e5      	str	r5, [r4, #12]
}
   1159c:	0020      	movs	r0, r4
   1159e:	b003      	add	sp, #12
   115a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MEM(new_task);
   115a2:	0022      	movs	r2, r4
   115a4:	2300      	movs	r3, #0
   115a6:	4805      	ldr	r0, [pc, #20]	; (115bc <lv_task_create+0x4c>)
   115a8:	4905      	ldr	r1, [pc, #20]	; (115c0 <lv_task_create+0x50>)
   115aa:	4788      	blx	r1
   115ac:	e7fe      	b.n	115ac <lv_task_create+0x3c>
   115ae:	46c0      	nop			; (mov r8, r8)
   115b0:	00011159 	.word	0x00011159
   115b4:	00001415 	.word	0x00001415
   115b8:	000114e1 	.word	0x000114e1
   115bc:	00018804 	.word	0x00018804
   115c0:	0000141d 	.word	0x0000141d

000115c4 <lv_task_ready>:
{
   115c4:	b510      	push	{r4, lr}
   115c6:	0004      	movs	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   115c8:	4b03      	ldr	r3, [pc, #12]	; (115d8 <lv_task_ready+0x14>)
   115ca:	4798      	blx	r3
   115cc:	6823      	ldr	r3, [r4, #0]
   115ce:	43db      	mvns	r3, r3
   115d0:	1818      	adds	r0, r3, r0
   115d2:	6060      	str	r0, [r4, #4]
}
   115d4:	bd10      	pop	{r4, pc}
   115d6:	46c0      	nop			; (mov r8, r8)
   115d8:	0000f725 	.word	0x0000f725

000115dc <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
   115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   115de:	b083      	sub	sp, #12
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
   115e0:	2300      	movs	r3, #0
   115e2:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   115e4:	2900      	cmp	r1, #0
   115e6:	d00a      	beq.n	115fe <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
   115e8:	680b      	ldr	r3, [r1, #0]
   115ea:	5cc2      	ldrb	r2, [r0, r3]
   115ec:	b254      	sxtb	r4, r2
   115ee:	2c00      	cmp	r4, #0
   115f0:	db07      	blt.n	11602 <lv_txt_utf8_next+0x26>
        result = txt[*i];
   115f2:	0014      	movs	r4, r2
        (*i)++;
   115f4:	3301      	adds	r3, #1
   115f6:	600b      	str	r3, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
   115f8:	0020      	movs	r0, r4
   115fa:	b003      	add	sp, #12
   115fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(i == NULL) i = &i_tmp;
   115fe:	a901      	add	r1, sp, #4
   11600:	e7f2      	b.n	115e8 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
   11602:	241f      	movs	r4, #31
   11604:	0015      	movs	r5, r2
   11606:	43a5      	bics	r5, r4
   11608:	2dc0      	cmp	r5, #192	; 0xc0
   1160a:	d00d      	beq.n	11628 <lv_txt_utf8_next+0x4c>
        else if((txt[*i] & 0xF0) == 0xE0) {
   1160c:	240f      	movs	r4, #15
   1160e:	0015      	movs	r5, r2
   11610:	43a5      	bics	r5, r4
   11612:	2de0      	cmp	r5, #224	; 0xe0
   11614:	d01c      	beq.n	11650 <lv_txt_utf8_next+0x74>
        else if((txt[*i] & 0xF8) == 0xF0) {
   11616:	2407      	movs	r4, #7
   11618:	0015      	movs	r5, r2
   1161a:	43a5      	bics	r5, r4
   1161c:	2df0      	cmp	r5, #240	; 0xf0
   1161e:	d036      	beq.n	1168e <lv_txt_utf8_next+0xb2>
            (*i)++; /*Not UTF-8 char. Go the next.*/
   11620:	3301      	adds	r3, #1
   11622:	600b      	str	r3, [r1, #0]
    uint32_t result = 0;
   11624:	2400      	movs	r4, #0
   11626:	e7e7      	b.n	115f8 <lv_txt_utf8_next+0x1c>
            (*i)++;
   11628:	1c5c      	adds	r4, r3, #1
   1162a:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1162c:	5d05      	ldrb	r5, [r0, r4]
   1162e:	203f      	movs	r0, #63	; 0x3f
   11630:	002c      	movs	r4, r5
   11632:	4384      	bics	r4, r0
   11634:	0020      	movs	r0, r4
   11636:	2400      	movs	r4, #0
   11638:	2880      	cmp	r0, #128	; 0x80
   1163a:	d1dd      	bne.n	115f8 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   1163c:	0192      	lsls	r2, r2, #6
   1163e:	24f8      	movs	r4, #248	; 0xf8
   11640:	00e4      	lsls	r4, r4, #3
   11642:	4022      	ands	r2, r4
            result += (txt[*i] & 0x3F);
   11644:	243f      	movs	r4, #63	; 0x3f
   11646:	402c      	ands	r4, r5
   11648:	18a4      	adds	r4, r4, r2
            (*i)++;
   1164a:	3302      	adds	r3, #2
   1164c:	600b      	str	r3, [r1, #0]
   1164e:	e7d3      	b.n	115f8 <lv_txt_utf8_next+0x1c>
            (*i)++;
   11650:	1c5c      	adds	r4, r3, #1
   11652:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   11654:	5d05      	ldrb	r5, [r0, r4]
   11656:	243f      	movs	r4, #63	; 0x3f
   11658:	002e      	movs	r6, r5
   1165a:	43a6      	bics	r6, r4
   1165c:	2400      	movs	r4, #0
   1165e:	2e80      	cmp	r6, #128	; 0x80
   11660:	d1ca      	bne.n	115f8 <lv_txt_utf8_next+0x1c>
            (*i)++;
   11662:	1c9c      	adds	r4, r3, #2
   11664:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   11666:	5d00      	ldrb	r0, [r0, r4]
   11668:	243f      	movs	r4, #63	; 0x3f
   1166a:	0006      	movs	r6, r0
   1166c:	43a6      	bics	r6, r4
   1166e:	2400      	movs	r4, #0
   11670:	2e80      	cmp	r6, #128	; 0x80
   11672:	d1c1      	bne.n	115f8 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   11674:	0714      	lsls	r4, r2, #28
   11676:	0c24      	lsrs	r4, r4, #16
            result += (txt[*i] & 0x3F);
   11678:	223f      	movs	r2, #63	; 0x3f
   1167a:	4010      	ands	r0, r2
   1167c:	1824      	adds	r4, r4, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   1167e:	01ad      	lsls	r5, r5, #6
   11680:	20fc      	movs	r0, #252	; 0xfc
   11682:	0100      	lsls	r0, r0, #4
   11684:	4005      	ands	r5, r0
            result += (txt[*i] & 0x3F);
   11686:	192c      	adds	r4, r5, r4
            (*i)++;
   11688:	3303      	adds	r3, #3
   1168a:	600b      	str	r3, [r1, #0]
   1168c:	e7b4      	b.n	115f8 <lv_txt_utf8_next+0x1c>
            (*i)++;
   1168e:	1c5c      	adds	r4, r3, #1
   11690:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   11692:	5d05      	ldrb	r5, [r0, r4]
   11694:	243f      	movs	r4, #63	; 0x3f
   11696:	002e      	movs	r6, r5
   11698:	43a6      	bics	r6, r4
   1169a:	2400      	movs	r4, #0
   1169c:	2e80      	cmp	r6, #128	; 0x80
   1169e:	d1ab      	bne.n	115f8 <lv_txt_utf8_next+0x1c>
            (*i)++;
   116a0:	1c9c      	adds	r4, r3, #2
   116a2:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   116a4:	5d06      	ldrb	r6, [r0, r4]
   116a6:	243f      	movs	r4, #63	; 0x3f
   116a8:	0037      	movs	r7, r6
   116aa:	43a7      	bics	r7, r4
   116ac:	2400      	movs	r4, #0
   116ae:	2f80      	cmp	r7, #128	; 0x80
   116b0:	d1a2      	bne.n	115f8 <lv_txt_utf8_next+0x1c>
            (*i)++;
   116b2:	1cdc      	adds	r4, r3, #3
   116b4:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   116b6:	5d00      	ldrb	r0, [r0, r4]
   116b8:	243f      	movs	r4, #63	; 0x3f
   116ba:	0007      	movs	r7, r0
   116bc:	43a7      	bics	r7, r4
   116be:	2400      	movs	r4, #0
   116c0:	2f80      	cmp	r7, #128	; 0x80
   116c2:	d199      	bne.n	115f8 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   116c4:	0492      	lsls	r2, r2, #18
   116c6:	24e0      	movs	r4, #224	; 0xe0
   116c8:	0364      	lsls	r4, r4, #13
   116ca:	4022      	ands	r2, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   116cc:	032c      	lsls	r4, r5, #12
   116ce:	25fc      	movs	r5, #252	; 0xfc
   116d0:	02ad      	lsls	r5, r5, #10
   116d2:	402c      	ands	r4, r5
   116d4:	4322      	orrs	r2, r4
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   116d6:	01b4      	lsls	r4, r6, #6
   116d8:	26fc      	movs	r6, #252	; 0xfc
   116da:	0136      	lsls	r6, r6, #4
   116dc:	4034      	ands	r4, r6
            result += txt[*i] & 0x3F;
   116de:	253f      	movs	r5, #63	; 0x3f
   116e0:	4028      	ands	r0, r5
   116e2:	1824      	adds	r4, r4, r0
   116e4:	18a4      	adds	r4, r4, r2
            (*i)++;
   116e6:	3304      	adds	r3, #4
   116e8:	600b      	str	r3, [r1, #0]
   116ea:	e785      	b.n	115f8 <lv_txt_utf8_next+0x1c>

000116ec <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   116ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   116ee:	b083      	sub	sp, #12
   116f0:	0006      	movs	r6, r0
   116f2:	000d      	movs	r5, r1
    uint32_t i        = 0;
   116f4:	2300      	movs	r3, #0
   116f6:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
   116f8:	2900      	cmp	r1, #0
   116fa:	d00c      	beq.n	11716 <lv_txt_utf8_get_char_id+0x2a>
   116fc:	2400      	movs	r4, #0
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   116fe:	4f07      	ldr	r7, [pc, #28]	; (1171c <lv_txt_utf8_get_char_id+0x30>)
   11700:	a901      	add	r1, sp, #4
   11702:	0030      	movs	r0, r6
   11704:	683b      	ldr	r3, [r7, #0]
   11706:	4798      	blx	r3
        char_cnt++;
   11708:	3401      	adds	r4, #1
    while(i < byte_id) {
   1170a:	9b01      	ldr	r3, [sp, #4]
   1170c:	42ab      	cmp	r3, r5
   1170e:	d3f7      	bcc.n	11700 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
}
   11710:	0020      	movs	r0, r4
   11712:	b003      	add	sp, #12
   11714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
   11716:	000c      	movs	r4, r1
    return char_cnt;
   11718:	e7fa      	b.n	11710 <lv_txt_utf8_get_char_id+0x24>
   1171a:	46c0      	nop			; (mov r8, r8)
   1171c:	20000058 	.word	0x20000058

00011720 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   11720:	2923      	cmp	r1, #35	; 0x23
   11722:	d005      	beq.n	11730 <_lv_txt_is_cmd+0x10>
    if(*state == LV_TXT_CMD_STATE_PAR) {
   11724:	7802      	ldrb	r2, [r0, #0]
    bool ret = false;
   11726:	2300      	movs	r3, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
   11728:	2a01      	cmp	r2, #1
   1172a:	d012      	beq.n	11752 <_lv_txt_is_cmd+0x32>
}
   1172c:	0018      	movs	r0, r3
   1172e:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   11730:	7802      	ldrb	r2, [r0, #0]
   11732:	2a00      	cmp	r2, #0
   11734:	d102      	bne.n	1173c <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
   11736:	2301      	movs	r3, #1
   11738:	7003      	strb	r3, [r0, #0]
   1173a:	e7f7      	b.n	1172c <_lv_txt_is_cmd+0xc>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   1173c:	2a01      	cmp	r2, #1
   1173e:	d005      	beq.n	1174c <_lv_txt_is_cmd+0x2c>
    bool ret = false;
   11740:	2300      	movs	r3, #0
        else if(*state == LV_TXT_CMD_STATE_IN) {
   11742:	2a02      	cmp	r2, #2
   11744:	d1f2      	bne.n	1172c <_lv_txt_is_cmd+0xc>
            *state = LV_TXT_CMD_STATE_WAIT;
   11746:	7003      	strb	r3, [r0, #0]
            ret    = true;
   11748:	3301      	adds	r3, #1
   1174a:	e7ef      	b.n	1172c <_lv_txt_is_cmd+0xc>
            *state = LV_TXT_CMD_STATE_WAIT;
   1174c:	2300      	movs	r3, #0
   1174e:	7003      	strb	r3, [r0, #0]
   11750:	e7ec      	b.n	1172c <_lv_txt_is_cmd+0xc>
        ret = true;
   11752:	3301      	adds	r3, #1
        if(c == ' ') {
   11754:	2920      	cmp	r1, #32
   11756:	d1e9      	bne.n	1172c <_lv_txt_is_cmd+0xc>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   11758:	3301      	adds	r3, #1
   1175a:	7003      	strb	r3, [r0, #0]
        ret = true;
   1175c:	3b01      	subs	r3, #1
   1175e:	e7e5      	b.n	1172c <_lv_txt_is_cmd+0xc>

00011760 <_lv_txt_get_next_line>:
{
   11760:	b5f0      	push	{r4, r5, r6, r7, lr}
   11762:	46de      	mov	lr, fp
   11764:	4657      	mov	r7, sl
   11766:	464e      	mov	r6, r9
   11768:	4645      	mov	r5, r8
   1176a:	b5e0      	push	{r5, r6, r7, lr}
   1176c:	b091      	sub	sp, #68	; 0x44
   1176e:	9007      	str	r0, [sp, #28]
   11770:	9103      	str	r1, [sp, #12]
   11772:	4692      	mov	sl, r2
   11774:	9305      	str	r3, [sp, #20]
   11776:	ab1a      	add	r3, sp, #104	; 0x68
   11778:	781b      	ldrb	r3, [r3, #0]
   1177a:	001a      	movs	r2, r3
   1177c:	930a      	str	r3, [sp, #40]	; 0x28
    if(txt == NULL) return 0;
   1177e:	2800      	cmp	r0, #0
   11780:	d100      	bne.n	11784 <_lv_txt_get_next_line+0x24>
   11782:	e10b      	b.n	1199c <_lv_txt_get_next_line+0x23c>
    if(font == NULL) return 0;
   11784:	2900      	cmp	r1, #0
   11786:	d100      	bne.n	1178a <_lv_txt_get_next_line+0x2a>
   11788:	e10a      	b.n	119a0 <_lv_txt_get_next_line+0x240>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   1178a:	2312      	movs	r3, #18
   1178c:	4213      	tst	r3, r2
   1178e:	d016      	beq.n	117be <_lv_txt_get_next_line+0x5e>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   11790:	0002      	movs	r2, r0
   11792:	7803      	ldrb	r3, [r0, #0]
   11794:	2b0a      	cmp	r3, #10
   11796:	d100      	bne.n	1179a <_lv_txt_get_next_line+0x3a>
   11798:	e104      	b.n	119a4 <_lv_txt_get_next_line+0x244>
   1179a:	2b0d      	cmp	r3, #13
   1179c:	d100      	bne.n	117a0 <_lv_txt_get_next_line+0x40>
   1179e:	e10b      	b.n	119b8 <_lv_txt_get_next_line+0x258>
   117a0:	2b00      	cmp	r3, #0
   117a2:	d100      	bne.n	117a6 <_lv_txt_get_next_line+0x46>
   117a4:	e10a      	b.n	119bc <_lv_txt_get_next_line+0x25c>
   117a6:	2000      	movs	r0, #0
   117a8:	3001      	adds	r0, #1
   117aa:	5c13      	ldrb	r3, [r2, r0]
   117ac:	2b0a      	cmp	r3, #10
   117ae:	d100      	bne.n	117b2 <_lv_txt_get_next_line+0x52>
   117b0:	e0f9      	b.n	119a6 <_lv_txt_get_next_line+0x246>
   117b2:	2b0d      	cmp	r3, #13
   117b4:	d100      	bne.n	117b8 <_lv_txt_get_next_line+0x58>
   117b6:	e0f6      	b.n	119a6 <_lv_txt_get_next_line+0x246>
   117b8:	2b00      	cmp	r3, #0
   117ba:	d1f5      	bne.n	117a8 <_lv_txt_get_next_line+0x48>
   117bc:	e0f4      	b.n	119a8 <_lv_txt_get_next_line+0x248>
   117be:	2302      	movs	r3, #2
   117c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   117c2:	401a      	ands	r2, r3
   117c4:	920b      	str	r2, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   117c6:	d001      	beq.n	117cc <_lv_txt_get_next_line+0x6c>
   117c8:	4b7d      	ldr	r3, [pc, #500]	; (119c0 <_lv_txt_get_next_line+0x260>)
   117ca:	9305      	str	r3, [sp, #20]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   117cc:	2300      	movs	r3, #0
   117ce:	220f      	movs	r2, #15
   117d0:	a90c      	add	r1, sp, #48	; 0x30
   117d2:	468c      	mov	ip, r1
   117d4:	4462      	add	r2, ip
   117d6:	7013      	strb	r3, [r2, #0]
    uint32_t i = 0;                                        /* Iterating index into txt */
   117d8:	930e      	str	r3, [sp, #56]	; 0x38
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   117da:	4b7a      	ldr	r3, [pc, #488]	; (119c4 <_lv_txt_get_next_line+0x264>)
   117dc:	4699      	mov	r9, r3
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   117de:	4f7a      	ldr	r7, [pc, #488]	; (119c8 <_lv_txt_get_next_line+0x268>)
   117e0:	4653      	mov	r3, sl
   117e2:	9304      	str	r3, [sp, #16]
    while(txt[i] != '\0' && max_width > 0) {
   117e4:	e083      	b.n	118ee <_lv_txt_get_next_line+0x18e>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   117e6:	9a00      	ldr	r2, [sp, #0]
   117e8:	0021      	movs	r1, r4
   117ea:	9803      	ldr	r0, [sp, #12]
   117ec:	4b77      	ldr	r3, [pc, #476]	; (119cc <_lv_txt_get_next_line+0x26c>)
   117ee:	4798      	blx	r3
        cur_w += letter_w;
   117f0:	1945      	adds	r5, r0, r5
   117f2:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
   117f4:	b200      	sxth	r0, r0
   117f6:	2800      	cmp	r0, #0
   117f8:	dd03      	ble.n	11802 <_lv_txt_get_next_line+0xa2>
            cur_w += letter_space;
   117fa:	9b04      	ldr	r3, [sp, #16]
   117fc:	469c      	mov	ip, r3
   117fe:	4465      	add	r5, ip
   11800:	b2ad      	uxth	r5, r5
   11802:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   11804:	4643      	mov	r3, r8
   11806:	3301      	adds	r3, #1
   11808:	d039      	beq.n	1187e <_lv_txt_get_next_line+0x11e>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1180a:	0022      	movs	r2, r4
   1180c:	3a0a      	subs	r2, #10
   1180e:	2a16      	cmp	r2, #22
   11810:	d83c      	bhi.n	1188c <_lv_txt_get_next_line+0x12c>
   11812:	4b6f      	ldr	r3, [pc, #444]	; (119d0 <_lv_txt_get_next_line+0x270>)
   11814:	40d3      	lsrs	r3, r2
   11816:	2201      	movs	r2, #1
   11818:	421a      	tst	r2, r3
   1181a:	d13a      	bne.n	11892 <_lv_txt_get_next_line+0x132>
   1181c:	2301      	movs	r3, #1
   1181e:	322b      	adds	r2, #43	; 0x2b
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   11820:	4294      	cmp	r4, r2
   11822:	d038      	beq.n	11896 <_lv_txt_get_next_line+0x136>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   11824:	3301      	adds	r3, #1
   11826:	b2db      	uxtb	r3, r3
   11828:	5cfa      	ldrb	r2, [r7, r3]
   1182a:	2a00      	cmp	r2, #0
   1182c:	d1f8      	bne.n	11820 <_lv_txt_get_next_line+0xc0>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   1182e:	4643      	mov	r3, r8
   11830:	3301      	adds	r3, #1
   11832:	d100      	bne.n	11836 <_lv_txt_get_next_line+0xd6>
   11834:	e08d      	b.n	11952 <_lv_txt_get_next_line+0x1f2>
        i = i_next;
   11836:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
   11838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1183a:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1183c:	9b02      	ldr	r3, [sp, #8]
   1183e:	9301      	str	r3, [sp, #4]
   11840:	9c00      	ldr	r4, [sp, #0]
    while(txt[i] != '\0') {
   11842:	4653      	mov	r3, sl
   11844:	5d9b      	ldrb	r3, [r3, r6]
   11846:	2b00      	cmp	r3, #0
   11848:	d100      	bne.n	1184c <_lv_txt_get_next_line+0xec>
   1184a:	e084      	b.n	11956 <_lv_txt_get_next_line+0x1f6>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1184c:	a90d      	add	r1, sp, #52	; 0x34
   1184e:	4650      	mov	r0, sl
   11850:	464b      	mov	r3, r9
   11852:	681b      	ldr	r3, [r3, #0]
   11854:	4798      	blx	r3
   11856:	9000      	str	r0, [sp, #0]
        word_len++;
   11858:	9b01      	ldr	r3, [sp, #4]
   1185a:	3301      	adds	r3, #1
   1185c:	9302      	str	r3, [sp, #8]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1185e:	465b      	mov	r3, fp
   11860:	2b00      	cmp	r3, #0
   11862:	d0c0      	beq.n	117e6 <_lv_txt_get_next_line+0x86>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   11864:	0021      	movs	r1, r4
   11866:	200f      	movs	r0, #15
   11868:	ab0c      	add	r3, sp, #48	; 0x30
   1186a:	469c      	mov	ip, r3
   1186c:	4460      	add	r0, ip
   1186e:	4b59      	ldr	r3, [pc, #356]	; (119d4 <_lv_txt_get_next_line+0x274>)
   11870:	4798      	blx	r3
   11872:	2800      	cmp	r0, #0
   11874:	d0b7      	beq.n	117e6 <_lv_txt_get_next_line+0x86>
                i = i_next;
   11876:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
   11878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1187a:	930c      	str	r3, [sp, #48]	; 0x30
   1187c:	e7de      	b.n	1183c <_lv_txt_get_next_line+0xdc>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   1187e:	9b04      	ldr	r3, [sp, #16]
   11880:	1aeb      	subs	r3, r5, r3
   11882:	9a08      	ldr	r2, [sp, #32]
   11884:	4293      	cmp	r3, r2
   11886:	ddc0      	ble.n	1180a <_lv_txt_get_next_line+0xaa>
   11888:	46b0      	mov	r8, r6
   1188a:	e7be      	b.n	1180a <_lv_txt_get_next_line+0xaa>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1188c:	2301      	movs	r3, #1
   1188e:	222c      	movs	r2, #44	; 0x2c
   11890:	e7c6      	b.n	11820 <_lv_txt_get_next_line+0xc0>
   11892:	46b2      	mov	sl, r6
   11894:	e000      	b.n	11898 <_lv_txt_get_next_line+0x138>
   11896:	46b2      	mov	sl, r6
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   11898:	4653      	mov	r3, sl
   1189a:	2b00      	cmp	r3, #0
   1189c:	d15c      	bne.n	11958 <_lv_txt_get_next_line+0x1f8>
   1189e:	4643      	mov	r3, r8
   118a0:	3301      	adds	r3, #1
   118a2:	d15c      	bne.n	1195e <_lv_txt_get_next_line+0x1fe>
   118a4:	9506      	str	r5, [sp, #24]
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   118a6:	9b01      	ldr	r3, [sp, #4]
   118a8:	2b00      	cmp	r3, #0
   118aa:	d004      	beq.n	118b6 <_lv_txt_get_next_line+0x156>
   118ac:	2c0d      	cmp	r4, #13
   118ae:	d104      	bne.n	118ba <_lv_txt_get_next_line+0x15a>
   118b0:	9b00      	ldr	r3, [sp, #0]
   118b2:	2b0a      	cmp	r3, #10
   118b4:	d101      	bne.n	118ba <_lv_txt_get_next_line+0x15a>
   118b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   118b8:	469a      	mov	sl, r3
        return i;
   118ba:	4653      	mov	r3, sl
   118bc:	466a      	mov	r2, sp
   118be:	8013      	strh	r3, [r2, #0]
   118c0:	8816      	ldrh	r6, [r2, #0]
        max_width -= word_w;
   118c2:	9b05      	ldr	r3, [sp, #20]
   118c4:	9a06      	ldr	r2, [sp, #24]
   118c6:	1a9b      	subs	r3, r3, r2
   118c8:	b21b      	sxth	r3, r3
   118ca:	9305      	str	r3, [sp, #20]
        if(advance == 0) {
   118cc:	2e00      	cmp	r6, #0
   118ce:	d049      	beq.n	11964 <_lv_txt_get_next_line+0x204>
        i += advance;
   118d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   118d2:	469c      	mov	ip, r3
   118d4:	4466      	add	r6, ip
   118d6:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
   118d8:	9a07      	ldr	r2, [sp, #28]
   118da:	7813      	ldrb	r3, [r2, #0]
   118dc:	2b0a      	cmp	r3, #10
   118de:	d051      	beq.n	11984 <_lv_txt_get_next_line+0x224>
   118e0:	2b0d      	cmp	r3, #13
   118e2:	d04f      	beq.n	11984 <_lv_txt_get_next_line+0x224>
        if(txt[i] == '\n' || txt[i] == '\r') {
   118e4:	5d93      	ldrb	r3, [r2, r6]
   118e6:	2b0a      	cmp	r3, #10
   118e8:	d04a      	beq.n	11980 <_lv_txt_get_next_line+0x220>
   118ea:	2b0d      	cmp	r3, #13
   118ec:	d048      	beq.n	11980 <_lv_txt_get_next_line+0x220>
    while(txt[i] != '\0' && max_width > 0) {
   118ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   118f0:	9309      	str	r3, [sp, #36]	; 0x24
   118f2:	9a07      	ldr	r2, [sp, #28]
   118f4:	469c      	mov	ip, r3
   118f6:	4462      	add	r2, ip
   118f8:	0016      	movs	r6, r2
   118fa:	7813      	ldrb	r3, [r2, #0]
   118fc:	2b00      	cmp	r3, #0
   118fe:	d041      	beq.n	11984 <_lv_txt_get_next_line+0x224>
   11900:	9b05      	ldr	r3, [sp, #20]
   11902:	2b00      	cmp	r3, #0
   11904:	dd3e      	ble.n	11984 <_lv_txt_get_next_line+0x224>
    if(txt == NULL || txt[0] == '\0') return 0;
   11906:	2e00      	cmp	r6, #0
   11908:	d02c      	beq.n	11964 <_lv_txt_get_next_line+0x204>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1190a:	9b05      	ldr	r3, [sp, #20]
   1190c:	9308      	str	r3, [sp, #32]
   1190e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11910:	2b00      	cmp	r3, #0
   11912:	d001      	beq.n	11918 <_lv_txt_get_next_line+0x1b8>
   11914:	4b2a      	ldr	r3, [pc, #168]	; (119c0 <_lv_txt_get_next_line+0x260>)
   11916:	9308      	str	r3, [sp, #32]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   11918:	2300      	movs	r3, #0
   1191a:	930c      	str	r3, [sp, #48]	; 0x30
   1191c:	930d      	str	r3, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
   1191e:	a90c      	add	r1, sp, #48	; 0x30
   11920:	0030      	movs	r0, r6
   11922:	4b28      	ldr	r3, [pc, #160]	; (119c4 <_lv_txt_get_next_line+0x264>)
   11924:	681b      	ldr	r3, [r3, #0]
   11926:	9300      	str	r3, [sp, #0]
   11928:	4798      	blx	r3
   1192a:	0004      	movs	r4, r0
    i_next_next = i_next;
   1192c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1192e:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
   11930:	2300      	movs	r3, #0
   11932:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   11934:	3b01      	subs	r3, #1
   11936:	4698      	mov	r8, r3
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   11938:	2300      	movs	r3, #0
   1193a:	9301      	str	r3, [sp, #4]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   1193c:	2500      	movs	r5, #0
    uint32_t letter_next = 0; /* Letter at i_next */
   1193e:	9300      	str	r3, [sp, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   11940:	469a      	mov	sl, r3
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   11942:	3301      	adds	r3, #1
   11944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11946:	4013      	ands	r3, r2
   11948:	469b      	mov	fp, r3
   1194a:	4653      	mov	r3, sl
   1194c:	46b2      	mov	sl, r6
   1194e:	001e      	movs	r6, r3
   11950:	e777      	b.n	11842 <_lv_txt_get_next_line+0xe2>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   11952:	9506      	str	r5, [sp, #24]
   11954:	e76f      	b.n	11836 <_lv_txt_get_next_line+0xd6>
   11956:	46b2      	mov	sl, r6
    if(break_index == NO_BREAK_FOUND) {
   11958:	4643      	mov	r3, r8
   1195a:	3301      	adds	r3, #1
   1195c:	d0a3      	beq.n	118a6 <_lv_txt_get_next_line+0x146>
    if(force) return break_index;
   1195e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11960:	2b00      	cmp	r3, #0
   11962:	d008      	beq.n	11976 <_lv_txt_get_next_line+0x216>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   11964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11966:	2b00      	cmp	r3, #0
   11968:	d10f      	bne.n	1198a <_lv_txt_get_next_line+0x22a>
   1196a:	4b16      	ldr	r3, [pc, #88]	; (119c4 <_lv_txt_get_next_line+0x264>)
   1196c:	681b      	ldr	r3, [r3, #0]
   1196e:	a90e      	add	r1, sp, #56	; 0x38
   11970:	9807      	ldr	r0, [sp, #28]
   11972:	4798      	blx	r3
   11974:	e006      	b.n	11984 <_lv_txt_get_next_line+0x224>
    if(force) return break_index;
   11976:	4643      	mov	r3, r8
   11978:	466a      	mov	r2, sp
   1197a:	8013      	strh	r3, [r2, #0]
   1197c:	8816      	ldrh	r6, [r2, #0]
   1197e:	e7a0      	b.n	118c2 <_lv_txt_get_next_line+0x162>
            i++;  /* Include the following newline in the current line */
   11980:	3601      	adds	r6, #1
   11982:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
   11984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11986:	2b00      	cmp	r3, #0
   11988:	d002      	beq.n	11990 <_lv_txt_get_next_line+0x230>
    return i;
   1198a:	ab0c      	add	r3, sp, #48	; 0x30
   1198c:	8918      	ldrh	r0, [r3, #8]
   1198e:	e00c      	b.n	119aa <_lv_txt_get_next_line+0x24a>
        _lv_txt_encoded_next(txt, &i);
   11990:	4b0c      	ldr	r3, [pc, #48]	; (119c4 <_lv_txt_get_next_line+0x264>)
   11992:	681b      	ldr	r3, [r3, #0]
   11994:	a90e      	add	r1, sp, #56	; 0x38
   11996:	9807      	ldr	r0, [sp, #28]
   11998:	4798      	blx	r3
   1199a:	e7f6      	b.n	1198a <_lv_txt_get_next_line+0x22a>
    if(txt == NULL) return 0;
   1199c:	2000      	movs	r0, #0
   1199e:	e004      	b.n	119aa <_lv_txt_get_next_line+0x24a>
    if(font == NULL) return 0;
   119a0:	2000      	movs	r0, #0
   119a2:	e002      	b.n	119aa <_lv_txt_get_next_line+0x24a>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   119a4:	2000      	movs	r0, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   119a6:	3001      	adds	r0, #1
        return i;
   119a8:	b280      	uxth	r0, r0
}
   119aa:	b011      	add	sp, #68	; 0x44
   119ac:	bc3c      	pop	{r2, r3, r4, r5}
   119ae:	4690      	mov	r8, r2
   119b0:	4699      	mov	r9, r3
   119b2:	46a2      	mov	sl, r4
   119b4:	46ab      	mov	fp, r5
   119b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   119b8:	2000      	movs	r0, #0
   119ba:	e7f4      	b.n	119a6 <_lv_txt_get_next_line+0x246>
   119bc:	2000      	movs	r0, #0
   119be:	e7f3      	b.n	119a8 <_lv_txt_get_next_line+0x248>
   119c0:	00007c18 	.word	0x00007c18
   119c4:	20000058 	.word	0x20000058
   119c8:	0001c95c 	.word	0x0001c95c
   119cc:	0000e701 	.word	0x0000e701
   119d0:	00400009 	.word	0x00400009
   119d4:	00011721 	.word	0x00011721

000119d8 <_lv_txt_get_width>:
{
   119d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   119da:	46ce      	mov	lr, r9
   119dc:	4647      	mov	r7, r8
   119de:	b580      	push	{r7, lr}
   119e0:	b085      	sub	sp, #20
   119e2:	0005      	movs	r5, r0
   119e4:	4689      	mov	r9, r1
   119e6:	9201      	str	r2, [sp, #4]
   119e8:	4698      	mov	r8, r3
   119ea:	ab0c      	add	r3, sp, #48	; 0x30
   119ec:	781f      	ldrb	r7, [r3, #0]
    if(txt == NULL) return 0;
   119ee:	2800      	cmp	r0, #0
   119f0:	d03a      	beq.n	11a68 <_lv_txt_get_width+0x90>
    if(font == NULL) return 0;
   119f2:	2a00      	cmp	r2, #0
   119f4:	d03a      	beq.n	11a6c <_lv_txt_get_width+0x94>
    uint32_t i                   = 0;
   119f6:	2300      	movs	r3, #0
   119f8:	9303      	str	r3, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   119fa:	aa02      	add	r2, sp, #8
   119fc:	70d3      	strb	r3, [r2, #3]
   119fe:	2400      	movs	r4, #0
    if(length != 0) {
   11a00:	2900      	cmp	r1, #0
   11a02:	d02b      	beq.n	11a5c <_lv_txt_get_width+0x84>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   11a04:	2301      	movs	r3, #1
   11a06:	401f      	ands	r7, r3
   11a08:	e00a      	b.n	11a20 <_lv_txt_get_width+0x48>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   11a0a:	0032      	movs	r2, r6
   11a0c:	9900      	ldr	r1, [sp, #0]
   11a0e:	9801      	ldr	r0, [sp, #4]
   11a10:	4b17      	ldr	r3, [pc, #92]	; (11a70 <_lv_txt_get_width+0x98>)
   11a12:	4798      	blx	r3
            if(char_width > 0) {
   11a14:	b203      	sxth	r3, r0
   11a16:	2b00      	cmp	r3, #0
   11a18:	dd02      	ble.n	11a20 <_lv_txt_get_width+0x48>
                width += letter_space;
   11a1a:	4444      	add	r4, r8
   11a1c:	1904      	adds	r4, r0, r4
   11a1e:	b224      	sxth	r4, r4
        while(i < length) {
   11a20:	9b03      	ldr	r3, [sp, #12]
   11a22:	4599      	cmp	r9, r3
   11a24:	d915      	bls.n	11a52 <_lv_txt_get_width+0x7a>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   11a26:	4e13      	ldr	r6, [pc, #76]	; (11a74 <_lv_txt_get_width+0x9c>)
   11a28:	a903      	add	r1, sp, #12
   11a2a:	0028      	movs	r0, r5
   11a2c:	6833      	ldr	r3, [r6, #0]
   11a2e:	4798      	blx	r3
   11a30:	9000      	str	r0, [sp, #0]
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   11a32:	9b03      	ldr	r3, [sp, #12]
   11a34:	18e8      	adds	r0, r5, r3
   11a36:	6833      	ldr	r3, [r6, #0]
   11a38:	2100      	movs	r1, #0
   11a3a:	4798      	blx	r3
   11a3c:	0006      	movs	r6, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   11a3e:	2f00      	cmp	r7, #0
   11a40:	d0e3      	beq.n	11a0a <_lv_txt_get_width+0x32>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   11a42:	9900      	ldr	r1, [sp, #0]
   11a44:	ab02      	add	r3, sp, #8
   11a46:	1cd8      	adds	r0, r3, #3
   11a48:	4b0b      	ldr	r3, [pc, #44]	; (11a78 <_lv_txt_get_width+0xa0>)
   11a4a:	4798      	blx	r3
   11a4c:	2800      	cmp	r0, #0
   11a4e:	d1e7      	bne.n	11a20 <_lv_txt_get_width+0x48>
   11a50:	e7db      	b.n	11a0a <_lv_txt_get_width+0x32>
        if(width > 0) {
   11a52:	2c00      	cmp	r4, #0
   11a54:	dd02      	ble.n	11a5c <_lv_txt_get_width+0x84>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   11a56:	4643      	mov	r3, r8
   11a58:	1ae4      	subs	r4, r4, r3
   11a5a:	b224      	sxth	r4, r4
}
   11a5c:	0020      	movs	r0, r4
   11a5e:	b005      	add	sp, #20
   11a60:	bc0c      	pop	{r2, r3}
   11a62:	4690      	mov	r8, r2
   11a64:	4699      	mov	r9, r3
   11a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(txt == NULL) return 0;
   11a68:	2400      	movs	r4, #0
   11a6a:	e7f7      	b.n	11a5c <_lv_txt_get_width+0x84>
    if(font == NULL) return 0;
   11a6c:	2400      	movs	r4, #0
   11a6e:	e7f5      	b.n	11a5c <_lv_txt_get_width+0x84>
   11a70:	0000e701 	.word	0x0000e701
   11a74:	20000058 	.word	0x20000058
   11a78:	00011721 	.word	0x00011721

00011a7c <_lv_txt_get_size>:
{
   11a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a7e:	46de      	mov	lr, fp
   11a80:	4657      	mov	r7, sl
   11a82:	464e      	mov	r6, r9
   11a84:	4645      	mov	r5, r8
   11a86:	b5e0      	push	{r5, r6, r7, lr}
   11a88:	b089      	sub	sp, #36	; 0x24
   11a8a:	0004      	movs	r4, r0
   11a8c:	4689      	mov	r9, r1
   11a8e:	9202      	str	r2, [sp, #8]
   11a90:	9303      	str	r3, [sp, #12]
   11a92:	ab12      	add	r3, sp, #72	; 0x48
   11a94:	2100      	movs	r1, #0
   11a96:	5e5b      	ldrsh	r3, [r3, r1]
   11a98:	9306      	str	r3, [sp, #24]
   11a9a:	ab13      	add	r3, sp, #76	; 0x4c
   11a9c:	2100      	movs	r1, #0
   11a9e:	5e5b      	ldrsh	r3, [r3, r1]
   11aa0:	9304      	str	r3, [sp, #16]
   11aa2:	ab14      	add	r3, sp, #80	; 0x50
   11aa4:	781f      	ldrb	r7, [r3, #0]
    size_res->x = 0;
   11aa6:	2300      	movs	r3, #0
   11aa8:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
   11aaa:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
   11aac:	464b      	mov	r3, r9
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d051      	beq.n	11b56 <_lv_txt_get_size+0xda>
    if(font == NULL) return;
   11ab2:	2a00      	cmp	r2, #0
   11ab4:	d04f      	beq.n	11b56 <_lv_txt_get_size+0xda>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   11ab6:	07bb      	lsls	r3, r7, #30
   11ab8:	d501      	bpl.n	11abe <_lv_txt_get_size+0x42>
   11aba:	4b2f      	ldr	r3, [pc, #188]	; (11b78 <_lv_txt_get_size+0xfc>)
   11abc:	9304      	str	r3, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   11abe:	9b02      	ldr	r3, [sp, #8]
   11ac0:	2208      	movs	r2, #8
   11ac2:	5e9b      	ldrsh	r3, [r3, r2]
   11ac4:	9307      	str	r3, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
   11ac6:	b29a      	uxth	r2, r3
    while(text[line_start] != '\0') {
   11ac8:	464b      	mov	r3, r9
   11aca:	781b      	ldrb	r3, [r3, #0]
   11acc:	2b00      	cmp	r3, #0
   11ace:	d04f      	beq.n	11b70 <_lv_txt_get_size+0xf4>
   11ad0:	464d      	mov	r5, r9
   11ad2:	2600      	movs	r6, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   11ad4:	4b29      	ldr	r3, [pc, #164]	; (11b7c <_lv_txt_get_size+0x100>)
   11ad6:	469b      	mov	fp, r3
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   11ad8:	9b06      	ldr	r3, [sp, #24]
   11ada:	469a      	mov	sl, r3
   11adc:	4492      	add	sl, r2
   11ade:	4653      	mov	r3, sl
   11ae0:	466a      	mov	r2, sp
   11ae2:	8293      	strh	r3, [r2, #20]
   11ae4:	8a93      	ldrh	r3, [r2, #20]
   11ae6:	4698      	mov	r8, r3
   11ae8:	e005      	b.n	11af6 <_lv_txt_get_size+0x7a>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   11aea:	8022      	strh	r2, [r4, #0]
    while(text[line_start] != '\0') {
   11aec:	464b      	mov	r3, r9
   11aee:	199d      	adds	r5, r3, r6
   11af0:	782b      	ldrb	r3, [r5, #0]
   11af2:	2b00      	cmp	r3, #0
   11af4:	d01f      	beq.n	11b36 <_lv_txt_get_size+0xba>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   11af6:	9700      	str	r7, [sp, #0]
   11af8:	9b04      	ldr	r3, [sp, #16]
   11afa:	9a03      	ldr	r2, [sp, #12]
   11afc:	9902      	ldr	r1, [sp, #8]
   11afe:	0028      	movs	r0, r5
   11b00:	47d8      	blx	fp
   11b02:	1836      	adds	r6, r6, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   11b04:	2102      	movs	r1, #2
   11b06:	5e63      	ldrsh	r3, [r4, r1]
   11b08:	4651      	mov	r1, sl
   11b0a:	18c9      	adds	r1, r1, r3
   11b0c:	4a1c      	ldr	r2, [pc, #112]	; (11b80 <_lv_txt_get_size+0x104>)
   11b0e:	4291      	cmp	r1, r2
   11b10:	d821      	bhi.n	11b56 <_lv_txt_get_size+0xda>
   11b12:	4641      	mov	r1, r8
   11b14:	9105      	str	r1, [sp, #20]
            size_res->y += line_space;
   11b16:	4443      	add	r3, r8
   11b18:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   11b1a:	9700      	str	r7, [sp, #0]
   11b1c:	9b03      	ldr	r3, [sp, #12]
   11b1e:	9a02      	ldr	r2, [sp, #8]
   11b20:	0001      	movs	r1, r0
   11b22:	0028      	movs	r0, r5
   11b24:	4d17      	ldr	r5, [pc, #92]	; (11b84 <_lv_txt_get_size+0x108>)
   11b26:	47a8      	blx	r5
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   11b28:	8823      	ldrh	r3, [r4, #0]
   11b2a:	1c1a      	adds	r2, r3, #0
   11b2c:	b21b      	sxth	r3, r3
   11b2e:	4283      	cmp	r3, r0
   11b30:	dadb      	bge.n	11aea <_lv_txt_get_size+0x6e>
   11b32:	1c02      	adds	r2, r0, #0
   11b34:	e7d9      	b.n	11aea <_lv_txt_get_size+0x6e>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   11b36:	2e00      	cmp	r6, #0
   11b38:	d006      	beq.n	11b48 <_lv_txt_get_size+0xcc>
   11b3a:	002e      	movs	r6, r5
   11b3c:	3e01      	subs	r6, #1
   11b3e:	7833      	ldrb	r3, [r6, #0]
   11b40:	2b0a      	cmp	r3, #10
   11b42:	d00f      	beq.n	11b64 <_lv_txt_get_size+0xe8>
   11b44:	2b0d      	cmp	r3, #13
   11b46:	d00d      	beq.n	11b64 <_lv_txt_get_size+0xe8>
    if(size_res->y == 0)
   11b48:	2202      	movs	r2, #2
   11b4a:	5ea3      	ldrsh	r3, [r4, r2]
   11b4c:	2b00      	cmp	r3, #0
   11b4e:	d00f      	beq.n	11b70 <_lv_txt_get_size+0xf4>
        size_res->y -= line_space;
   11b50:	9a06      	ldr	r2, [sp, #24]
   11b52:	1a9b      	subs	r3, r3, r2
   11b54:	8063      	strh	r3, [r4, #2]
}
   11b56:	b009      	add	sp, #36	; 0x24
   11b58:	bc3c      	pop	{r2, r3, r4, r5}
   11b5a:	4690      	mov	r8, r2
   11b5c:	4699      	mov	r9, r3
   11b5e:	46a2      	mov	sl, r4
   11b60:	46ab      	mov	fp, r5
   11b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        size_res->y += letter_height + line_space;
   11b64:	8863      	ldrh	r3, [r4, #2]
   11b66:	9a05      	ldr	r2, [sp, #20]
   11b68:	4694      	mov	ip, r2
   11b6a:	4463      	add	r3, ip
   11b6c:	8063      	strh	r3, [r4, #2]
   11b6e:	e7eb      	b.n	11b48 <_lv_txt_get_size+0xcc>
        size_res->y = letter_height;
   11b70:	466b      	mov	r3, sp
   11b72:	8b9b      	ldrh	r3, [r3, #28]
   11b74:	8063      	strh	r3, [r4, #2]
   11b76:	e7ee      	b.n	11b56 <_lv_txt_get_size+0xda>
   11b78:	00007c18 	.word	0x00007c18
   11b7c:	00011761 	.word	0x00011761
   11b80:	00007fff 	.word	0x00007fff
   11b84:	000119d9 	.word	0x000119d9

00011b88 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   11b88:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b8a:	46d6      	mov	lr, sl
   11b8c:	464f      	mov	r7, r9
   11b8e:	4646      	mov	r6, r8
   11b90:	b5c0      	push	{r6, r7, lr}
   11b92:	b082      	sub	sp, #8
   11b94:	9001      	str	r0, [sp, #4]
   11b96:	000f      	movs	r7, r1
   11b98:	1e14      	subs	r4, r2, #0
   11b9a:	4699      	mov	r9, r3
   11b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11b9e:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   11ba0:	d01d      	beq.n	11bde <_lv_utils_bsearch+0x56>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
   11ba2:	2301      	movs	r3, #1
   11ba4:	4698      	mov	r8, r3
   11ba6:	e004      	b.n	11bb2 <_lv_utils_bsearch+0x2a>
            base = (middle += size);
        }
        else if(c < 0) {
   11ba8:	2800      	cmp	r0, #0
   11baa:	da1a      	bge.n	11be2 <_lv_utils_bsearch+0x5a>
            n /= 2;
   11bac:	0034      	movs	r4, r6
    for(middle = base; n != 0;) {
   11bae:	2c00      	cmp	r4, #0
   11bb0:	d00e      	beq.n	11bd0 <_lv_utils_bsearch+0x48>
        middle += (n / 2) * size;
   11bb2:	0866      	lsrs	r6, r4, #1
   11bb4:	464d      	mov	r5, r9
   11bb6:	4375      	muls	r5, r6
   11bb8:	197d      	adds	r5, r7, r5
        if((c = (*cmp)(key, middle)) > 0) {
   11bba:	0029      	movs	r1, r5
   11bbc:	9801      	ldr	r0, [sp, #4]
   11bbe:	47d0      	blx	sl
   11bc0:	2800      	cmp	r0, #0
   11bc2:	ddf1      	ble.n	11ba8 <_lv_utils_bsearch+0x20>
            n    = (n / 2) - ((n & 1) == 0);
   11bc4:	4643      	mov	r3, r8
   11bc6:	43a3      	bics	r3, r4
   11bc8:	1af4      	subs	r4, r6, r3
            base = (middle += size);
   11bca:	444d      	add	r5, r9
   11bcc:	002f      	movs	r7, r5
   11bce:	e7ee      	b.n	11bae <_lv_utils_bsearch+0x26>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   11bd0:	2000      	movs	r0, #0
}
   11bd2:	b002      	add	sp, #8
   11bd4:	bc1c      	pop	{r2, r3, r4}
   11bd6:	4690      	mov	r8, r2
   11bd8:	4699      	mov	r9, r3
   11bda:	46a2      	mov	sl, r4
   11bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
   11bde:	2000      	movs	r0, #0
   11be0:	e7f7      	b.n	11bd2 <_lv_utils_bsearch+0x4a>
        middle += (n / 2) * size;
   11be2:	0028      	movs	r0, r5
   11be4:	e7f5      	b.n	11bd2 <_lv_utils_bsearch+0x4a>
	...

00011be8 <lv_theme_set_act>:
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
    act_theme = th;
   11be8:	4b01      	ldr	r3, [pc, #4]	; (11bf0 <lv_theme_set_act+0x8>)
   11bea:	6018      	str	r0, [r3, #0]
}
   11bec:	4770      	bx	lr
   11bee:	46c0      	nop			; (mov r8, r8)
   11bf0:	20004c30 	.word	0x20004c30

00011bf4 <lv_theme_get_font_normal>:
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
    return act_theme->font_normal;
   11bf4:	4b01      	ldr	r3, [pc, #4]	; (11bfc <lv_theme_get_font_normal+0x8>)
   11bf6:	681b      	ldr	r3, [r3, #0]
   11bf8:	68d8      	ldr	r0, [r3, #12]
}
   11bfa:	4770      	bx	lr
   11bfc:	20004c30 	.word	0x20004c30

00011c00 <lv_theme_apply>:
{
    return act_theme->flags;
}

void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   11c00:	b510      	push	{r4, lr}
    act_theme->apply_xcb(obj, name);
   11c02:	4b02      	ldr	r3, [pc, #8]	; (11c0c <lv_theme_apply+0xc>)
   11c04:	681b      	ldr	r3, [r3, #0]
   11c06:	681b      	ldr	r3, [r3, #0]
   11c08:	4798      	blx	r3
}
   11c0a:	bd10      	pop	{r4, pc}
   11c0c:	20004c30 	.word	0x20004c30

00011c10 <theme_apply>:
    return &theme;
}


static void theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   11c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c12:	46ce      	mov	lr, r9
   11c14:	4647      	mov	r7, r8
   11c16:	b580      	push	{r7, lr}
   11c18:	b083      	sub	sp, #12
   11c1a:	0004      	movs	r4, r0
    lv_style_list_t * list;

    switch(name) {
   11c1c:	2928      	cmp	r1, #40	; 0x28
   11c1e:	d80e      	bhi.n	11c3e <theme_apply+0x2e>
   11c20:	0089      	lsls	r1, r1, #2
   11c22:	4be4      	ldr	r3, [pc, #912]	; (11fb4 <theme_apply+0x3a4>)
   11c24:	585b      	ldr	r3, [r3, r1]
   11c26:	469f      	mov	pc, r3
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   11c28:	2100      	movs	r1, #0
   11c2a:	4be3      	ldr	r3, [pc, #908]	; (11fb8 <theme_apply+0x3a8>)
   11c2c:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   11c2e:	2100      	movs	r1, #0
   11c30:	0020      	movs	r0, r4
   11c32:	4be2      	ldr	r3, [pc, #904]	; (11fbc <theme_apply+0x3ac>)
   11c34:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
   11c36:	4be2      	ldr	r3, [pc, #904]	; (11fc0 <theme_apply+0x3b0>)
   11c38:	6819      	ldr	r1, [r3, #0]
   11c3a:	4be2      	ldr	r3, [pc, #904]	; (11fc4 <theme_apply+0x3b4>)
   11c3c:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
   11c3e:	21ff      	movs	r1, #255	; 0xff
   11c40:	0020      	movs	r0, r4
   11c42:	4be1      	ldr	r3, [pc, #900]	; (11fc8 <theme_apply+0x3b8>)
   11c44:	4798      	blx	r3
}
   11c46:	b003      	add	sp, #12
   11c48:	bc0c      	pop	{r2, r3}
   11c4a:	4690      	mov	r8, r2
   11c4c:	4699      	mov	r9, r3
   11c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   11c50:	2100      	movs	r1, #0
   11c52:	4bd9      	ldr	r3, [pc, #868]	; (11fb8 <theme_apply+0x3a8>)
   11c54:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   11c56:	2100      	movs	r1, #0
   11c58:	0020      	movs	r0, r4
   11c5a:	4bd8      	ldr	r3, [pc, #864]	; (11fbc <theme_apply+0x3ac>)
   11c5c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   11c5e:	4bd8      	ldr	r3, [pc, #864]	; (11fc0 <theme_apply+0x3b0>)
   11c60:	6819      	ldr	r1, [r3, #0]
   11c62:	3104      	adds	r1, #4
   11c64:	4bd7      	ldr	r3, [pc, #860]	; (11fc4 <theme_apply+0x3b4>)
   11c66:	4798      	blx	r3
            break;
   11c68:	e7e9      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   11c6a:	2100      	movs	r1, #0
   11c6c:	4bd2      	ldr	r3, [pc, #840]	; (11fb8 <theme_apply+0x3a8>)
   11c6e:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
   11c70:	2100      	movs	r1, #0
   11c72:	0020      	movs	r0, r4
   11c74:	4bd1      	ldr	r3, [pc, #836]	; (11fbc <theme_apply+0x3ac>)
   11c76:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   11c78:	4bd1      	ldr	r3, [pc, #836]	; (11fc0 <theme_apply+0x3b0>)
   11c7a:	6819      	ldr	r1, [r3, #0]
   11c7c:	3104      	adds	r1, #4
   11c7e:	4bd1      	ldr	r3, [pc, #836]	; (11fc4 <theme_apply+0x3b4>)
   11c80:	4798      	blx	r3
            break;
   11c82:	e7dc      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   11c84:	2100      	movs	r1, #0
   11c86:	4bcc      	ldr	r3, [pc, #816]	; (11fb8 <theme_apply+0x3a8>)
   11c88:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   11c8a:	2100      	movs	r1, #0
   11c8c:	0020      	movs	r0, r4
   11c8e:	4bcb      	ldr	r3, [pc, #812]	; (11fbc <theme_apply+0x3ac>)
   11c90:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
   11c92:	4bcb      	ldr	r3, [pc, #812]	; (11fc0 <theme_apply+0x3b0>)
   11c94:	6819      	ldr	r1, [r3, #0]
   11c96:	3110      	adds	r1, #16
   11c98:	4bca      	ldr	r3, [pc, #808]	; (11fc4 <theme_apply+0x3b4>)
   11c9a:	4798      	blx	r3
            break;
   11c9c:	e7cf      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
   11c9e:	2100      	movs	r1, #0
   11ca0:	4bc5      	ldr	r3, [pc, #788]	; (11fb8 <theme_apply+0x3a8>)
   11ca2:	4699      	mov	r9, r3
   11ca4:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
   11ca6:	2100      	movs	r1, #0
   11ca8:	0020      	movs	r0, r4
   11caa:	4fc4      	ldr	r7, [pc, #784]	; (11fbc <theme_apply+0x3ac>)
   11cac:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   11cae:	4ec4      	ldr	r6, [pc, #784]	; (11fc0 <theme_apply+0x3b0>)
   11cb0:	6833      	ldr	r3, [r6, #0]
   11cb2:	1d19      	adds	r1, r3, #4
   11cb4:	9001      	str	r0, [sp, #4]
   11cb6:	4dc3      	ldr	r5, [pc, #780]	; (11fc4 <theme_apply+0x3b4>)
   11cb8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   11cba:	6831      	ldr	r1, [r6, #0]
   11cbc:	3118      	adds	r1, #24
   11cbe:	9801      	ldr	r0, [sp, #4]
   11cc0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
   11cc2:	2101      	movs	r1, #1
   11cc4:	0020      	movs	r0, r4
   11cc6:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
   11cc8:	2101      	movs	r1, #1
   11cca:	0020      	movs	r0, r4
   11ccc:	47b8      	blx	r7
   11cce:	0007      	movs	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   11cd0:	6833      	ldr	r3, [r6, #0]
   11cd2:	1d19      	adds	r1, r3, #4
   11cd4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   11cd6:	6831      	ldr	r1, [r6, #0]
   11cd8:	3108      	adds	r1, #8
   11cda:	0038      	movs	r0, r7
   11cdc:	47a8      	blx	r5
            break;
   11cde:	e7ae      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
   11ce0:	2100      	movs	r1, #0
   11ce2:	4bb5      	ldr	r3, [pc, #724]	; (11fb8 <theme_apply+0x3a8>)
   11ce4:	4699      	mov	r9, r3
   11ce6:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
   11ce8:	2100      	movs	r1, #0
   11cea:	0020      	movs	r0, r4
   11cec:	4fb3      	ldr	r7, [pc, #716]	; (11fbc <theme_apply+0x3ac>)
   11cee:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   11cf0:	4eb3      	ldr	r6, [pc, #716]	; (11fc0 <theme_apply+0x3b0>)
   11cf2:	6831      	ldr	r1, [r6, #0]
   11cf4:	9001      	str	r0, [sp, #4]
   11cf6:	4db3      	ldr	r5, [pc, #716]	; (11fc4 <theme_apply+0x3b4>)
   11cf8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
   11cfa:	6831      	ldr	r1, [r6, #0]
   11cfc:	3168      	adds	r1, #104	; 0x68
   11cfe:	9801      	ldr	r0, [sp, #4]
   11d00:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
   11d02:	2101      	movs	r1, #1
   11d04:	0020      	movs	r0, r4
   11d06:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
   11d08:	2101      	movs	r1, #1
   11d0a:	0020      	movs	r0, r4
   11d0c:	47b8      	blx	r7
   11d0e:	0007      	movs	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   11d10:	6833      	ldr	r3, [r6, #0]
   11d12:	1d19      	adds	r1, r3, #4
   11d14:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   11d16:	6831      	ldr	r1, [r6, #0]
   11d18:	3108      	adds	r1, #8
   11d1a:	0038      	movs	r0, r7
   11d1c:	47a8      	blx	r5
            break;
   11d1e:	e78e      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
   11d20:	2100      	movs	r1, #0
   11d22:	4ba5      	ldr	r3, [pc, #660]	; (11fb8 <theme_apply+0x3a8>)
   11d24:	4698      	mov	r8, r3
   11d26:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
   11d28:	2100      	movs	r1, #0
   11d2a:	0020      	movs	r0, r4
   11d2c:	4fa3      	ldr	r7, [pc, #652]	; (11fbc <theme_apply+0x3ac>)
   11d2e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   11d30:	4ea3      	ldr	r6, [pc, #652]	; (11fc0 <theme_apply+0x3b0>)
   11d32:	6831      	ldr	r1, [r6, #0]
   11d34:	3124      	adds	r1, #36	; 0x24
   11d36:	4da3      	ldr	r5, [pc, #652]	; (11fc4 <theme_apply+0x3b4>)
   11d38:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
   11d3a:	2101      	movs	r1, #1
   11d3c:	0020      	movs	r0, r4
   11d3e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
   11d40:	2101      	movs	r1, #1
   11d42:	0020      	movs	r0, r4
   11d44:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   11d46:	6831      	ldr	r1, [r6, #0]
   11d48:	3128      	adds	r1, #40	; 0x28
   11d4a:	47a8      	blx	r5
            break;
   11d4c:	e777      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
   11d4e:	2100      	movs	r1, #0
   11d50:	4b99      	ldr	r3, [pc, #612]	; (11fb8 <theme_apply+0x3a8>)
   11d52:	4698      	mov	r8, r3
   11d54:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
   11d56:	2100      	movs	r1, #0
   11d58:	0020      	movs	r0, r4
   11d5a:	4f98      	ldr	r7, [pc, #608]	; (11fbc <theme_apply+0x3ac>)
   11d5c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   11d5e:	4e98      	ldr	r6, [pc, #608]	; (11fc0 <theme_apply+0x3b0>)
   11d60:	6831      	ldr	r1, [r6, #0]
   11d62:	3124      	adds	r1, #36	; 0x24
   11d64:	4d97      	ldr	r5, [pc, #604]	; (11fc4 <theme_apply+0x3b4>)
   11d66:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
   11d68:	2101      	movs	r1, #1
   11d6a:	0020      	movs	r0, r4
   11d6c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
   11d6e:	2101      	movs	r1, #1
   11d70:	0020      	movs	r0, r4
   11d72:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   11d74:	6831      	ldr	r1, [r6, #0]
   11d76:	3128      	adds	r1, #40	; 0x28
   11d78:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
   11d7a:	2102      	movs	r1, #2
   11d7c:	0020      	movs	r0, r4
   11d7e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
   11d80:	2102      	movs	r1, #2
   11d82:	0020      	movs	r0, r4
   11d84:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
   11d86:	6831      	ldr	r1, [r6, #0]
   11d88:	319c      	adds	r1, #156	; 0x9c
   11d8a:	47a8      	blx	r5
            break;
   11d8c:	e757      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
   11d8e:	2100      	movs	r1, #0
   11d90:	4b89      	ldr	r3, [pc, #548]	; (11fb8 <theme_apply+0x3a8>)
   11d92:	4798      	blx	r3
            break;
   11d94:	e753      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   11d96:	2100      	movs	r1, #0
   11d98:	4b87      	ldr	r3, [pc, #540]	; (11fb8 <theme_apply+0x3a8>)
   11d9a:	4798      	blx	r3
            break;
   11d9c:	e74f      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   11d9e:	2100      	movs	r1, #0
   11da0:	4b85      	ldr	r3, [pc, #532]	; (11fb8 <theme_apply+0x3a8>)
   11da2:	4798      	blx	r3
            break;
   11da4:	e74b      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   11da6:	2100      	movs	r1, #0
   11da8:	4b83      	ldr	r3, [pc, #524]	; (11fb8 <theme_apply+0x3a8>)
   11daa:	4798      	blx	r3
            break;
   11dac:	e747      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   11dae:	2100      	movs	r1, #0
   11db0:	4b81      	ldr	r3, [pc, #516]	; (11fb8 <theme_apply+0x3a8>)
   11db2:	4798      	blx	r3
            break;
   11db4:	e743      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
   11db6:	2100      	movs	r1, #0
   11db8:	4b7f      	ldr	r3, [pc, #508]	; (11fb8 <theme_apply+0x3a8>)
   11dba:	4699      	mov	r9, r3
   11dbc:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
   11dbe:	2100      	movs	r1, #0
   11dc0:	0020      	movs	r0, r4
   11dc2:	4f7e      	ldr	r7, [pc, #504]	; (11fbc <theme_apply+0x3ac>)
   11dc4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   11dc6:	4e7e      	ldr	r6, [pc, #504]	; (11fc0 <theme_apply+0x3b0>)
   11dc8:	6833      	ldr	r3, [r6, #0]
   11dca:	1d19      	adds	r1, r3, #4
   11dcc:	9001      	str	r0, [sp, #4]
   11dce:	4d7d      	ldr	r5, [pc, #500]	; (11fc4 <theme_apply+0x3b4>)
   11dd0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
   11dd2:	6831      	ldr	r1, [r6, #0]
   11dd4:	3120      	adds	r1, #32
   11dd6:	9801      	ldr	r0, [sp, #4]
   11dd8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
   11dda:	2101      	movs	r1, #1
   11ddc:	0020      	movs	r0, r4
   11dde:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
   11de0:	2101      	movs	r1, #1
   11de2:	0020      	movs	r0, r4
   11de4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   11de6:	6831      	ldr	r1, [r6, #0]
   11de8:	311c      	adds	r1, #28
   11dea:	47a8      	blx	r5
            break;
   11dec:	e727      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
   11dee:	2100      	movs	r1, #0
   11df0:	4b71      	ldr	r3, [pc, #452]	; (11fb8 <theme_apply+0x3a8>)
   11df2:	4698      	mov	r8, r3
   11df4:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
   11df6:	2100      	movs	r1, #0
   11df8:	0020      	movs	r0, r4
   11dfa:	4f70      	ldr	r7, [pc, #448]	; (11fbc <theme_apply+0x3ac>)
   11dfc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
   11dfe:	4e70      	ldr	r6, [pc, #448]	; (11fc0 <theme_apply+0x3b0>)
   11e00:	6831      	ldr	r1, [r6, #0]
   11e02:	3120      	adds	r1, #32
   11e04:	4d6f      	ldr	r5, [pc, #444]	; (11fc4 <theme_apply+0x3b4>)
   11e06:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
   11e08:	2101      	movs	r1, #1
   11e0a:	0020      	movs	r0, r4
   11e0c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
   11e0e:	2101      	movs	r1, #1
   11e10:	0020      	movs	r0, r4
   11e12:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   11e14:	6831      	ldr	r1, [r6, #0]
   11e16:	311c      	adds	r1, #28
   11e18:	47a8      	blx	r5
            break;
   11e1a:	e710      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
   11e1c:	2100      	movs	r1, #0
   11e1e:	4b66      	ldr	r3, [pc, #408]	; (11fb8 <theme_apply+0x3a8>)
   11e20:	4699      	mov	r9, r3
   11e22:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
   11e24:	2100      	movs	r1, #0
   11e26:	0020      	movs	r0, r4
   11e28:	4f64      	ldr	r7, [pc, #400]	; (11fbc <theme_apply+0x3ac>)
   11e2a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   11e2c:	4e64      	ldr	r6, [pc, #400]	; (11fc0 <theme_apply+0x3b0>)
   11e2e:	6831      	ldr	r1, [r6, #0]
   11e30:	3124      	adds	r1, #36	; 0x24
   11e32:	9001      	str	r0, [sp, #4]
   11e34:	4d63      	ldr	r5, [pc, #396]	; (11fc4 <theme_apply+0x3b4>)
   11e36:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
   11e38:	6831      	ldr	r1, [r6, #0]
   11e3a:	3194      	adds	r1, #148	; 0x94
   11e3c:	9801      	ldr	r0, [sp, #4]
   11e3e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
   11e40:	2101      	movs	r1, #1
   11e42:	0020      	movs	r0, r4
   11e44:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
   11e46:	2101      	movs	r1, #1
   11e48:	0020      	movs	r0, r4
   11e4a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   11e4c:	6831      	ldr	r1, [r6, #0]
   11e4e:	3128      	adds	r1, #40	; 0x28
   11e50:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
   11e52:	2102      	movs	r1, #2
   11e54:	0020      	movs	r0, r4
   11e56:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
   11e58:	2102      	movs	r1, #2
   11e5a:	0020      	movs	r0, r4
   11e5c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
   11e5e:	6831      	ldr	r1, [r6, #0]
   11e60:	3190      	adds	r1, #144	; 0x90
   11e62:	47a8      	blx	r5
            break;
   11e64:	e6eb      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
   11e66:	2100      	movs	r1, #0
   11e68:	4b53      	ldr	r3, [pc, #332]	; (11fb8 <theme_apply+0x3a8>)
   11e6a:	4698      	mov	r8, r3
   11e6c:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
   11e6e:	2100      	movs	r1, #0
   11e70:	0020      	movs	r0, r4
   11e72:	4e52      	ldr	r6, [pc, #328]	; (11fbc <theme_apply+0x3ac>)
   11e74:	47b0      	blx	r6
            _lv_style_list_add_style(list, &styles->cb_bg);
   11e76:	4f52      	ldr	r7, [pc, #328]	; (11fc0 <theme_apply+0x3b0>)
   11e78:	6839      	ldr	r1, [r7, #0]
   11e7a:	314c      	adds	r1, #76	; 0x4c
   11e7c:	4d51      	ldr	r5, [pc, #324]	; (11fc4 <theme_apply+0x3b4>)
   11e7e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
   11e80:	2140      	movs	r1, #64	; 0x40
   11e82:	0020      	movs	r0, r4
   11e84:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
   11e86:	2140      	movs	r1, #64	; 0x40
   11e88:	0020      	movs	r0, r4
   11e8a:	47b0      	blx	r6
   11e8c:	0006      	movs	r6, r0
            _lv_style_list_add_style(list, &styles->btn);
   11e8e:	6839      	ldr	r1, [r7, #0]
   11e90:	3110      	adds	r1, #16
   11e92:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
   11e94:	6839      	ldr	r1, [r7, #0]
   11e96:	3150      	adds	r1, #80	; 0x50
   11e98:	0030      	movs	r0, r6
   11e9a:	47a8      	blx	r5
            break;
   11e9c:	e6cf      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
   11e9e:	2100      	movs	r1, #0
   11ea0:	4b45      	ldr	r3, [pc, #276]	; (11fb8 <theme_apply+0x3a8>)
   11ea2:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
   11ea4:	2100      	movs	r1, #0
   11ea6:	0020      	movs	r0, r4
   11ea8:	4b44      	ldr	r3, [pc, #272]	; (11fbc <theme_apply+0x3ac>)
   11eaa:	4798      	blx	r3
   11eac:	0005      	movs	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
   11eae:	4f44      	ldr	r7, [pc, #272]	; (11fc0 <theme_apply+0x3b0>)
   11eb0:	683b      	ldr	r3, [r7, #0]
   11eb2:	1d19      	adds	r1, r3, #4
   11eb4:	4e43      	ldr	r6, [pc, #268]	; (11fc4 <theme_apply+0x3b4>)
   11eb6:	47b0      	blx	r6
            _lv_style_list_add_style(list, &styles->mbox_bg);
   11eb8:	6839      	ldr	r1, [r7, #0]
   11eba:	317c      	adds	r1, #124	; 0x7c
   11ebc:	0028      	movs	r0, r5
   11ebe:	47b0      	blx	r6
            break;
   11ec0:	e6bd      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   11ec2:	2140      	movs	r1, #64	; 0x40
   11ec4:	4b3c      	ldr	r3, [pc, #240]	; (11fb8 <theme_apply+0x3a8>)
   11ec6:	4698      	mov	r8, r3
   11ec8:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   11eca:	2140      	movs	r1, #64	; 0x40
   11ecc:	0020      	movs	r0, r4
   11ece:	4f3b      	ldr	r7, [pc, #236]	; (11fbc <theme_apply+0x3ac>)
   11ed0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
   11ed2:	4e3b      	ldr	r6, [pc, #236]	; (11fc0 <theme_apply+0x3b0>)
   11ed4:	6831      	ldr	r1, [r6, #0]
   11ed6:	3118      	adds	r1, #24
   11ed8:	4d3a      	ldr	r5, [pc, #232]	; (11fc4 <theme_apply+0x3b4>)
   11eda:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
   11edc:	2141      	movs	r1, #65	; 0x41
   11ede:	0020      	movs	r0, r4
   11ee0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
   11ee2:	2141      	movs	r1, #65	; 0x41
   11ee4:	0020      	movs	r0, r4
   11ee6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
   11ee8:	6831      	ldr	r1, [r6, #0]
   11eea:	3110      	adds	r1, #16
   11eec:	47a8      	blx	r5
            break;
   11eee:	e6a6      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
   11ef0:	2100      	movs	r1, #0
   11ef2:	4b31      	ldr	r3, [pc, #196]	; (11fb8 <theme_apply+0x3a8>)
   11ef4:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
   11ef6:	2100      	movs	r1, #0
   11ef8:	0020      	movs	r0, r4
   11efa:	4b30      	ldr	r3, [pc, #192]	; (11fbc <theme_apply+0x3ac>)
   11efc:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
   11efe:	4b30      	ldr	r3, [pc, #192]	; (11fc0 <theme_apply+0x3b0>)
   11f00:	6819      	ldr	r1, [r3, #0]
   11f02:	316c      	adds	r1, #108	; 0x6c
   11f04:	4b2f      	ldr	r3, [pc, #188]	; (11fc4 <theme_apply+0x3b4>)
   11f06:	4798      	blx	r3
            break;
   11f08:	e699      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   11f0a:	2100      	movs	r1, #0
   11f0c:	4b2a      	ldr	r3, [pc, #168]	; (11fb8 <theme_apply+0x3a8>)
   11f0e:	4698      	mov	r8, r3
   11f10:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
   11f12:	2100      	movs	r1, #0
   11f14:	0020      	movs	r0, r4
   11f16:	4f29      	ldr	r7, [pc, #164]	; (11fbc <theme_apply+0x3ac>)
   11f18:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   11f1a:	4e29      	ldr	r6, [pc, #164]	; (11fc0 <theme_apply+0x3b0>)
   11f1c:	6833      	ldr	r3, [r6, #0]
   11f1e:	1d19      	adds	r1, r3, #4
   11f20:	4d28      	ldr	r5, [pc, #160]	; (11fc4 <theme_apply+0x3b4>)
   11f22:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   11f24:	2140      	movs	r1, #64	; 0x40
   11f26:	0020      	movs	r0, r4
   11f28:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   11f2a:	2140      	movs	r1, #64	; 0x40
   11f2c:	0020      	movs	r0, r4
   11f2e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
   11f30:	6831      	ldr	r1, [r6, #0]
   11f32:	3114      	adds	r1, #20
   11f34:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   11f36:	2101      	movs	r1, #1
   11f38:	0020      	movs	r0, r4
   11f3a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   11f3c:	2101      	movs	r1, #1
   11f3e:	0020      	movs	r0, r4
   11f40:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   11f42:	6831      	ldr	r1, [r6, #0]
   11f44:	3180      	adds	r1, #128	; 0x80
   11f46:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   11f48:	2102      	movs	r1, #2
   11f4a:	0020      	movs	r0, r4
   11f4c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   11f4e:	2102      	movs	r1, #2
   11f50:	0020      	movs	r0, r4
   11f52:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   11f54:	6831      	ldr	r1, [r6, #0]
   11f56:	3184      	adds	r1, #132	; 0x84
   11f58:	47a8      	blx	r5
            break;
   11f5a:	e670      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
   11f5c:	2100      	movs	r1, #0
   11f5e:	4d16      	ldr	r5, [pc, #88]	; (11fb8 <theme_apply+0x3a8>)
   11f60:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
   11f62:	2100      	movs	r1, #0
   11f64:	0020      	movs	r0, r4
   11f66:	4b15      	ldr	r3, [pc, #84]	; (11fbc <theme_apply+0x3ac>)
   11f68:	4698      	mov	r8, r3
   11f6a:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
   11f6c:	4f14      	ldr	r7, [pc, #80]	; (11fc0 <theme_apply+0x3b0>)
   11f6e:	6839      	ldr	r1, [r7, #0]
   11f70:	4e14      	ldr	r6, [pc, #80]	; (11fc4 <theme_apply+0x3b4>)
   11f72:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCRLLABLE);
   11f74:	2140      	movs	r1, #64	; 0x40
   11f76:	0020      	movs	r0, r4
   11f78:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   11f7a:	2141      	movs	r1, #65	; 0x41
   11f7c:	0020      	movs	r0, r4
   11f7e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   11f80:	2141      	movs	r1, #65	; 0x41
   11f82:	0020      	movs	r0, r4
   11f84:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   11f86:	6839      	ldr	r1, [r7, #0]
   11f88:	31a8      	adds	r1, #168	; 0xa8
   11f8a:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
   11f8c:	2143      	movs	r1, #67	; 0x43
   11f8e:	0020      	movs	r0, r4
   11f90:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
   11f92:	2143      	movs	r1, #67	; 0x43
   11f94:	0020      	movs	r0, r4
   11f96:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_indic);
   11f98:	6839      	ldr	r1, [r7, #0]
   11f9a:	31ac      	adds	r1, #172	; 0xac
   11f9c:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   11f9e:	2142      	movs	r1, #66	; 0x42
   11fa0:	0020      	movs	r0, r4
   11fa2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   11fa4:	2142      	movs	r1, #66	; 0x42
   11fa6:	0020      	movs	r0, r4
   11fa8:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns);
   11faa:	6839      	ldr	r1, [r7, #0]
   11fac:	31a4      	adds	r1, #164	; 0xa4
   11fae:	47b0      	blx	r6
            break;
   11fb0:	e645      	b.n	11c3e <theme_apply+0x2e>
   11fb2:	46c0      	nop			; (mov r8, r8)
   11fb4:	0001c964 	.word	0x0001c964
   11fb8:	00001d6d 	.word	0x00001d6d
   11fbc:	00001c91 	.word	0x00001c91
   11fc0:	20004c38 	.word	0x20004c38
   11fc4:	000049b5 	.word	0x000049b5
   11fc8:	00002525 	.word	0x00002525
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   11fcc:	2100      	movs	r1, #0
   11fce:	4df3      	ldr	r5, [pc, #972]	; (1239c <theme_apply+0x78c>)
   11fd0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   11fd2:	2140      	movs	r1, #64	; 0x40
   11fd4:	0020      	movs	r0, r4
   11fd6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   11fd8:	2140      	movs	r1, #64	; 0x40
   11fda:	0020      	movs	r0, r4
   11fdc:	4bf0      	ldr	r3, [pc, #960]	; (123a0 <theme_apply+0x790>)
   11fde:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   11fe0:	4bf0      	ldr	r3, [pc, #960]	; (123a4 <theme_apply+0x794>)
   11fe2:	6819      	ldr	r1, [r3, #0]
   11fe4:	31b0      	adds	r1, #176	; 0xb0
   11fe6:	4bf0      	ldr	r3, [pc, #960]	; (123a8 <theme_apply+0x798>)
   11fe8:	4798      	blx	r3
            break;
   11fea:	e628      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
   11fec:	2100      	movs	r1, #0
   11fee:	4beb      	ldr	r3, [pc, #940]	; (1239c <theme_apply+0x78c>)
   11ff0:	4698      	mov	r8, r3
   11ff2:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
   11ff4:	2100      	movs	r1, #0
   11ff6:	0020      	movs	r0, r4
   11ff8:	4fe9      	ldr	r7, [pc, #932]	; (123a0 <theme_apply+0x790>)
   11ffa:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   11ffc:	4ee9      	ldr	r6, [pc, #932]	; (123a4 <theme_apply+0x794>)
   11ffe:	6831      	ldr	r1, [r6, #0]
   12000:	4de9      	ldr	r5, [pc, #932]	; (123a8 <theme_apply+0x798>)
   12002:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   12004:	2101      	movs	r1, #1
   12006:	0020      	movs	r0, r4
   12008:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   1200a:	2101      	movs	r1, #1
   1200c:	0020      	movs	r0, r4
   1200e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   12010:	6831      	ldr	r1, [r6, #0]
   12012:	3180      	adds	r1, #128	; 0x80
   12014:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   12016:	2102      	movs	r1, #2
   12018:	0020      	movs	r0, r4
   1201a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   1201c:	2102      	movs	r1, #2
   1201e:	0020      	movs	r0, r4
   12020:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   12022:	6831      	ldr	r1, [r6, #0]
   12024:	3184      	adds	r1, #132	; 0x84
   12026:	47a8      	blx	r5
            break;
   12028:	e609      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
   1202a:	2100      	movs	r1, #0
   1202c:	4bdb      	ldr	r3, [pc, #876]	; (1239c <theme_apply+0x78c>)
   1202e:	4699      	mov	r9, r3
   12030:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
   12032:	2100      	movs	r1, #0
   12034:	0020      	movs	r0, r4
   12036:	4fda      	ldr	r7, [pc, #872]	; (123a0 <theme_apply+0x790>)
   12038:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   1203a:	4eda      	ldr	r6, [pc, #872]	; (123a4 <theme_apply+0x794>)
   1203c:	6833      	ldr	r3, [r6, #0]
   1203e:	1d19      	adds	r1, r3, #4
   12040:	9001      	str	r0, [sp, #4]
   12042:	4dd9      	ldr	r5, [pc, #868]	; (123a8 <theme_apply+0x798>)
   12044:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
   12046:	6831      	ldr	r1, [r6, #0]
   12048:	3188      	adds	r1, #136	; 0x88
   1204a:	9801      	ldr	r0, [sp, #4]
   1204c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
   1204e:	2103      	movs	r1, #3
   12050:	0020      	movs	r0, r4
   12052:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
   12054:	2103      	movs	r1, #3
   12056:	0020      	movs	r0, r4
   12058:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
   1205a:	6831      	ldr	r1, [r6, #0]
   1205c:	318c      	adds	r1, #140	; 0x8c
   1205e:	47a8      	blx	r5
            break;
   12060:	e5ed      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
   12062:	2100      	movs	r1, #0
   12064:	4bcd      	ldr	r3, [pc, #820]	; (1239c <theme_apply+0x78c>)
   12066:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
   12068:	2100      	movs	r1, #0
   1206a:	0020      	movs	r0, r4
   1206c:	4bcc      	ldr	r3, [pc, #816]	; (123a0 <theme_apply+0x790>)
   1206e:	4798      	blx	r3
            break;
   12070:	e5e5      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
   12072:	2100      	movs	r1, #0
   12074:	4bc9      	ldr	r3, [pc, #804]	; (1239c <theme_apply+0x78c>)
   12076:	4698      	mov	r8, r3
   12078:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
   1207a:	2100      	movs	r1, #0
   1207c:	0020      	movs	r0, r4
   1207e:	4fc8      	ldr	r7, [pc, #800]	; (123a0 <theme_apply+0x790>)
   12080:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12082:	4ec8      	ldr	r6, [pc, #800]	; (123a4 <theme_apply+0x794>)
   12084:	6833      	ldr	r3, [r6, #0]
   12086:	1d19      	adds	r1, r3, #4
   12088:	9001      	str	r0, [sp, #4]
   1208a:	4dc7      	ldr	r5, [pc, #796]	; (123a8 <theme_apply+0x798>)
   1208c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
   1208e:	6831      	ldr	r1, [r6, #0]
   12090:	3174      	adds	r1, #116	; 0x74
   12092:	9801      	ldr	r0, [sp, #4]
   12094:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
   12096:	2140      	movs	r1, #64	; 0x40
   12098:	0020      	movs	r0, r4
   1209a:	47c0      	blx	r8
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
   1209c:	2101      	movs	r1, #1
   1209e:	0020      	movs	r0, r4
   120a0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
   120a2:	2101      	movs	r1, #1
   120a4:	0020      	movs	r0, r4
   120a6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   120a8:	6831      	ldr	r1, [r6, #0]
   120aa:	3180      	adds	r1, #128	; 0x80
   120ac:	47a8      	blx	r5
            break;
   120ae:	e5c6      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   120b0:	2100      	movs	r1, #0
   120b2:	4bba      	ldr	r3, [pc, #744]	; (1239c <theme_apply+0x78c>)
   120b4:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   120b6:	2100      	movs	r1, #0
   120b8:	0020      	movs	r0, r4
   120ba:	4bb9      	ldr	r3, [pc, #740]	; (123a0 <theme_apply+0x790>)
   120bc:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
   120be:	4bb9      	ldr	r3, [pc, #740]	; (123a4 <theme_apply+0x794>)
   120c0:	6819      	ldr	r1, [r3, #0]
   120c2:	3178      	adds	r1, #120	; 0x78
   120c4:	4bb8      	ldr	r3, [pc, #736]	; (123a8 <theme_apply+0x798>)
   120c6:	4798      	blx	r3
            break;
   120c8:	e5b9      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
   120ca:	2100      	movs	r1, #0
   120cc:	4bb3      	ldr	r3, [pc, #716]	; (1239c <theme_apply+0x78c>)
   120ce:	4699      	mov	r9, r3
   120d0:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
   120d2:	2100      	movs	r1, #0
   120d4:	0020      	movs	r0, r4
   120d6:	4fb2      	ldr	r7, [pc, #712]	; (123a0 <theme_apply+0x790>)
   120d8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   120da:	4eb2      	ldr	r6, [pc, #712]	; (123a4 <theme_apply+0x794>)
   120dc:	6833      	ldr	r3, [r6, #0]
   120de:	1d19      	adds	r1, r3, #4
   120e0:	9001      	str	r0, [sp, #4]
   120e2:	4db1      	ldr	r5, [pc, #708]	; (123a8 <theme_apply+0x798>)
   120e4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   120e6:	6831      	ldr	r1, [r6, #0]
   120e8:	3108      	adds	r1, #8
   120ea:	9801      	ldr	r0, [sp, #4]
   120ec:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   120ee:	6831      	ldr	r1, [r6, #0]
   120f0:	3118      	adds	r1, #24
   120f2:	9801      	ldr	r0, [sp, #4]
   120f4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
   120f6:	2140      	movs	r1, #64	; 0x40
   120f8:	0020      	movs	r0, r4
   120fa:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
   120fc:	2140      	movs	r1, #64	; 0x40
   120fe:	0020      	movs	r0, r4
   12100:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12102:	6833      	ldr	r3, [r6, #0]
   12104:	1d19      	adds	r1, r3, #4
   12106:	9001      	str	r0, [sp, #4]
   12108:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
   1210a:	6831      	ldr	r1, [r6, #0]
   1210c:	3154      	adds	r1, #84	; 0x54
   1210e:	9801      	ldr	r0, [sp, #4]
   12110:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   12112:	2141      	movs	r1, #65	; 0x41
   12114:	0020      	movs	r0, r4
   12116:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   12118:	2141      	movs	r1, #65	; 0x41
   1211a:	0020      	movs	r0, r4
   1211c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   1211e:	6831      	ldr	r1, [r6, #0]
   12120:	3180      	adds	r1, #128	; 0x80
   12122:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   12124:	2142      	movs	r1, #66	; 0x42
   12126:	0020      	movs	r0, r4
   12128:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   1212a:	2142      	movs	r1, #66	; 0x42
   1212c:	0020      	movs	r0, r4
   1212e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
   12130:	6831      	ldr	r1, [r6, #0]
   12132:	3158      	adds	r1, #88	; 0x58
   12134:	47a8      	blx	r5
            break;
   12136:	e582      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
   12138:	2100      	movs	r1, #0
   1213a:	4b98      	ldr	r3, [pc, #608]	; (1239c <theme_apply+0x78c>)
   1213c:	4699      	mov	r9, r3
   1213e:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
   12140:	2100      	movs	r1, #0
   12142:	0020      	movs	r0, r4
   12144:	4f96      	ldr	r7, [pc, #600]	; (123a0 <theme_apply+0x790>)
   12146:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12148:	4e96      	ldr	r6, [pc, #600]	; (123a4 <theme_apply+0x794>)
   1214a:	6833      	ldr	r3, [r6, #0]
   1214c:	1d19      	adds	r1, r3, #4
   1214e:	9001      	str	r0, [sp, #4]
   12150:	4d95      	ldr	r5, [pc, #596]	; (123a8 <theme_apply+0x798>)
   12152:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
   12154:	6831      	ldr	r1, [r6, #0]
   12156:	3140      	adds	r1, #64	; 0x40
   12158:	9801      	ldr	r0, [sp, #4]
   1215a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   1215c:	6831      	ldr	r1, [r6, #0]
   1215e:	3118      	adds	r1, #24
   12160:	9801      	ldr	r0, [sp, #4]
   12162:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
   12164:	2101      	movs	r1, #1
   12166:	0020      	movs	r0, r4
   12168:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
   1216a:	2101      	movs	r1, #1
   1216c:	0020      	movs	r0, r4
   1216e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
   12170:	6831      	ldr	r1, [r6, #0]
   12172:	3118      	adds	r1, #24
   12174:	9001      	str	r0, [sp, #4]
   12176:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
   12178:	6831      	ldr	r1, [r6, #0]
   1217a:	3144      	adds	r1, #68	; 0x44
   1217c:	9801      	ldr	r0, [sp, #4]
   1217e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   12180:	2102      	movs	r1, #2
   12182:	0020      	movs	r0, r4
   12184:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
   12186:	2102      	movs	r1, #2
   12188:	0020      	movs	r0, r4
   1218a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
   1218c:	6831      	ldr	r1, [r6, #0]
   1218e:	3148      	adds	r1, #72	; 0x48
   12190:	47a8      	blx	r5
            break;
   12192:	e554      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
   12194:	2100      	movs	r1, #0
   12196:	4b81      	ldr	r3, [pc, #516]	; (1239c <theme_apply+0x78c>)
   12198:	4698      	mov	r8, r3
   1219a:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
   1219c:	2100      	movs	r1, #0
   1219e:	0020      	movs	r0, r4
   121a0:	4f7f      	ldr	r7, [pc, #508]	; (123a0 <theme_apply+0x790>)
   121a2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   121a4:	4e7f      	ldr	r6, [pc, #508]	; (123a4 <theme_apply+0x794>)
   121a6:	6833      	ldr	r3, [r6, #0]
   121a8:	1d19      	adds	r1, r3, #4
   121aa:	4d7f      	ldr	r5, [pc, #508]	; (123a8 <theme_apply+0x798>)
   121ac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
   121ae:	2101      	movs	r1, #1
   121b0:	0020      	movs	r0, r4
   121b2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL1);
   121b4:	2101      	movs	r1, #1
   121b6:	0020      	movs	r0, r4
   121b8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   121ba:	6831      	ldr	r1, [r6, #0]
   121bc:	31a0      	adds	r1, #160	; 0xa0
   121be:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
   121c0:	2102      	movs	r1, #2
   121c2:	0020      	movs	r0, r4
   121c4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL2);
   121c6:	2102      	movs	r1, #2
   121c8:	0020      	movs	r0, r4
   121ca:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   121cc:	6831      	ldr	r1, [r6, #0]
   121ce:	31a0      	adds	r1, #160	; 0xa0
   121d0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
   121d2:	2103      	movs	r1, #3
   121d4:	0020      	movs	r0, r4
   121d6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL3);
   121d8:	2103      	movs	r1, #3
   121da:	0020      	movs	r0, r4
   121dc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   121de:	6831      	ldr	r1, [r6, #0]
   121e0:	31a0      	adds	r1, #160	; 0xa0
   121e2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
   121e4:	2104      	movs	r1, #4
   121e6:	0020      	movs	r0, r4
   121e8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL4);
   121ea:	2104      	movs	r1, #4
   121ec:	0020      	movs	r0, r4
   121ee:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   121f0:	6831      	ldr	r1, [r6, #0]
   121f2:	31a0      	adds	r1, #160	; 0xa0
   121f4:	47a8      	blx	r5
            break;
   121f6:	e522      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
   121f8:	2100      	movs	r1, #0
   121fa:	4b68      	ldr	r3, [pc, #416]	; (1239c <theme_apply+0x78c>)
   121fc:	4698      	mov	r8, r3
   121fe:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
   12200:	2100      	movs	r1, #0
   12202:	0020      	movs	r0, r4
   12204:	4f66      	ldr	r7, [pc, #408]	; (123a0 <theme_apply+0x790>)
   12206:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   12208:	4e66      	ldr	r6, [pc, #408]	; (123a4 <theme_apply+0x794>)
   1220a:	6831      	ldr	r1, [r6, #0]
   1220c:	4d66      	ldr	r5, [pc, #408]	; (123a8 <theme_apply+0x798>)
   1220e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
   12210:	2142      	movs	r1, #66	; 0x42
   12212:	0020      	movs	r0, r4
   12214:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
   12216:	2142      	movs	r1, #66	; 0x42
   12218:	0020      	movs	r0, r4
   1221a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   1221c:	6831      	ldr	r1, [r6, #0]
   1221e:	3180      	adds	r1, #128	; 0x80
   12220:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   12222:	2141      	movs	r1, #65	; 0x41
   12224:	0020      	movs	r0, r4
   12226:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   12228:	2141      	movs	r1, #65	; 0x41
   1222a:	0020      	movs	r0, r4
   1222c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   1222e:	6831      	ldr	r1, [r6, #0]
   12230:	31b0      	adds	r1, #176	; 0xb0
   12232:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
   12234:	2140      	movs	r1, #64	; 0x40
   12236:	0020      	movs	r0, r4
   12238:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
   1223a:	2140      	movs	r1, #64	; 0x40
   1223c:	0020      	movs	r0, r4
   1223e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   12240:	6831      	ldr	r1, [r6, #0]
   12242:	31a8      	adds	r1, #168	; 0xa8
   12244:	47a8      	blx	r5
            break;
   12246:	e4fa      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   12248:	2100      	movs	r1, #0
   1224a:	4b54      	ldr	r3, [pc, #336]	; (1239c <theme_apply+0x78c>)
   1224c:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1224e:	2100      	movs	r1, #0
   12250:	0020      	movs	r0, r4
   12252:	4b53      	ldr	r3, [pc, #332]	; (123a0 <theme_apply+0x790>)
   12254:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
   12256:	4b53      	ldr	r3, [pc, #332]	; (123a4 <theme_apply+0x794>)
   12258:	6819      	ldr	r1, [r3, #0]
   1225a:	31a4      	adds	r1, #164	; 0xa4
   1225c:	4b52      	ldr	r3, [pc, #328]	; (123a8 <theme_apply+0x798>)
   1225e:	4798      	blx	r3
            break;
   12260:	e4ed      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
   12262:	2100      	movs	r1, #0
   12264:	4b4d      	ldr	r3, [pc, #308]	; (1239c <theme_apply+0x78c>)
   12266:	4699      	mov	r9, r3
   12268:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
   1226a:	2100      	movs	r1, #0
   1226c:	0020      	movs	r0, r4
   1226e:	4f4c      	ldr	r7, [pc, #304]	; (123a0 <theme_apply+0x790>)
   12270:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   12272:	4e4c      	ldr	r6, [pc, #304]	; (123a4 <theme_apply+0x794>)
   12274:	6833      	ldr	r3, [r6, #0]
   12276:	1d19      	adds	r1, r3, #4
   12278:	9001      	str	r0, [sp, #4]
   1227a:	4d4b      	ldr	r5, [pc, #300]	; (123a8 <theme_apply+0x798>)
   1227c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   1227e:	6831      	ldr	r1, [r6, #0]
   12280:	3118      	adds	r1, #24
   12282:	9801      	ldr	r0, [sp, #4]
   12284:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   12286:	2104      	movs	r1, #4
   12288:	0020      	movs	r0, r4
   1228a:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   1228c:	2104      	movs	r1, #4
   1228e:	0020      	movs	r0, r4
   12290:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
   12292:	6831      	ldr	r1, [r6, #0]
   12294:	31b8      	adds	r1, #184	; 0xb8
   12296:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   12298:	2103      	movs	r1, #3
   1229a:	0020      	movs	r0, r4
   1229c:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   1229e:	2103      	movs	r1, #3
   122a0:	0020      	movs	r0, r4
   122a2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
   122a4:	6831      	ldr	r1, [r6, #0]
   122a6:	31b4      	adds	r1, #180	; 0xb4
   122a8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   122aa:	2101      	movs	r1, #1
   122ac:	0020      	movs	r0, r4
   122ae:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   122b0:	2101      	movs	r1, #1
   122b2:	0020      	movs	r0, r4
   122b4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   122b6:	6831      	ldr	r1, [r6, #0]
   122b8:	3180      	adds	r1, #128	; 0x80
   122ba:	47a8      	blx	r5
            break;
   122bc:	e4bf      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
   122be:	2100      	movs	r1, #0
   122c0:	4b36      	ldr	r3, [pc, #216]	; (1239c <theme_apply+0x78c>)
   122c2:	4699      	mov	r9, r3
   122c4:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
   122c6:	2100      	movs	r1, #0
   122c8:	0020      	movs	r0, r4
   122ca:	4f35      	ldr	r7, [pc, #212]	; (123a0 <theme_apply+0x790>)
   122cc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   122ce:	4e35      	ldr	r6, [pc, #212]	; (123a4 <theme_apply+0x794>)
   122d0:	6833      	ldr	r3, [r6, #0]
   122d2:	1d19      	adds	r1, r3, #4
   122d4:	9001      	str	r0, [sp, #4]
   122d6:	4d34      	ldr	r5, [pc, #208]	; (123a8 <theme_apply+0x798>)
   122d8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   122da:	6831      	ldr	r1, [r6, #0]
   122dc:	3118      	adds	r1, #24
   122de:	9801      	ldr	r0, [sp, #4]
   122e0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
   122e2:	2103      	movs	r1, #3
   122e4:	0020      	movs	r0, r4
   122e6:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
   122e8:	2103      	movs	r1, #3
   122ea:	0020      	movs	r0, r4
   122ec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
   122ee:	6831      	ldr	r1, [r6, #0]
   122f0:	3198      	adds	r1, #152	; 0x98
   122f2:	47a8      	blx	r5
            break;
   122f4:	e4a3      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   122f6:	2100      	movs	r1, #0
   122f8:	4b28      	ldr	r3, [pc, #160]	; (1239c <theme_apply+0x78c>)
   122fa:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   122fc:	2100      	movs	r1, #0
   122fe:	0020      	movs	r0, r4
   12300:	4b27      	ldr	r3, [pc, #156]	; (123a0 <theme_apply+0x790>)
   12302:	4798      	blx	r3
   12304:	0005      	movs	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
   12306:	4f27      	ldr	r7, [pc, #156]	; (123a4 <theme_apply+0x794>)
   12308:	683b      	ldr	r3, [r7, #0]
   1230a:	1d19      	adds	r1, r3, #4
   1230c:	4e26      	ldr	r6, [pc, #152]	; (123a8 <theme_apply+0x798>)
   1230e:	47b0      	blx	r6
            _lv_style_list_add_style(list, &styles->bg_click);
   12310:	6839      	ldr	r1, [r7, #0]
   12312:	3108      	adds	r1, #8
   12314:	0028      	movs	r0, r5
   12316:	47b0      	blx	r6
            break;
   12318:	e491      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
   1231a:	2100      	movs	r1, #0
   1231c:	4b1f      	ldr	r3, [pc, #124]	; (1239c <theme_apply+0x78c>)
   1231e:	4698      	mov	r8, r3
   12320:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
   12322:	2100      	movs	r1, #0
   12324:	0020      	movs	r0, r4
   12326:	4f1e      	ldr	r7, [pc, #120]	; (123a0 <theme_apply+0x790>)
   12328:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   1232a:	4e1e      	ldr	r6, [pc, #120]	; (123a4 <theme_apply+0x794>)
   1232c:	6833      	ldr	r3, [r6, #0]
   1232e:	1d19      	adds	r1, r3, #4
   12330:	4d1d      	ldr	r5, [pc, #116]	; (123a8 <theme_apply+0x798>)
   12332:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
   12334:	2103      	movs	r1, #3
   12336:	0020      	movs	r0, r4
   12338:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
   1233a:	2103      	movs	r1, #3
   1233c:	0020      	movs	r0, r4
   1233e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
   12340:	6831      	ldr	r1, [r6, #0]
   12342:	312c      	adds	r1, #44	; 0x2c
   12344:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
   12346:	2101      	movs	r1, #1
   12348:	0020      	movs	r0, r4
   1234a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
   1234c:	2101      	movs	r1, #1
   1234e:	0020      	movs	r0, r4
   12350:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
   12352:	6831      	ldr	r1, [r6, #0]
   12354:	3130      	adds	r1, #48	; 0x30
   12356:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   12358:	2102      	movs	r1, #2
   1235a:	0020      	movs	r0, r4
   1235c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   1235e:	2102      	movs	r1, #2
   12360:	0020      	movs	r0, r4
   12362:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
   12364:	6831      	ldr	r1, [r6, #0]
   12366:	3134      	adds	r1, #52	; 0x34
   12368:	47a8      	blx	r5
            break;
   1236a:	e468      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
   1236c:	2100      	movs	r1, #0
   1236e:	4b0b      	ldr	r3, [pc, #44]	; (1239c <theme_apply+0x78c>)
   12370:	4698      	mov	r8, r3
   12372:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
   12374:	2100      	movs	r1, #0
   12376:	0020      	movs	r0, r4
   12378:	4f09      	ldr	r7, [pc, #36]	; (123a0 <theme_apply+0x790>)
   1237a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
   1237c:	4e09      	ldr	r6, [pc, #36]	; (123a4 <theme_apply+0x794>)
   1237e:	6831      	ldr	r1, [r6, #0]
   12380:	3138      	adds	r1, #56	; 0x38
   12382:	4d09      	ldr	r5, [pc, #36]	; (123a8 <theme_apply+0x798>)
   12384:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
   12386:	2101      	movs	r1, #1
   12388:	0020      	movs	r0, r4
   1238a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
   1238c:	2101      	movs	r1, #1
   1238e:	0020      	movs	r0, r4
   12390:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
   12392:	6831      	ldr	r1, [r6, #0]
   12394:	313c      	adds	r1, #60	; 0x3c
   12396:	47a8      	blx	r5
            break;
   12398:	e451      	b.n	11c3e <theme_apply+0x2e>
   1239a:	46c0      	nop			; (mov r8, r8)
   1239c:	00001d6d 	.word	0x00001d6d
   123a0:	00001c91 	.word	0x00001c91
   123a4:	20004c38 	.word	0x20004c38
   123a8:	000049b5 	.word	0x000049b5
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
   123ac:	2100      	movs	r1, #0
   123ae:	4b1b      	ldr	r3, [pc, #108]	; (1241c <theme_apply+0x80c>)
   123b0:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
   123b2:	2100      	movs	r1, #0
   123b4:	0020      	movs	r0, r4
   123b6:	4b1a      	ldr	r3, [pc, #104]	; (12420 <theme_apply+0x810>)
   123b8:	4798      	blx	r3
   123ba:	0005      	movs	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
   123bc:	4f19      	ldr	r7, [pc, #100]	; (12424 <theme_apply+0x814>)
   123be:	683b      	ldr	r3, [r7, #0]
   123c0:	1d19      	adds	r1, r3, #4
   123c2:	4e19      	ldr	r6, [pc, #100]	; (12428 <theme_apply+0x818>)
   123c4:	47b0      	blx	r6
            _lv_style_list_add_style(list, &styles->lmeter);
   123c6:	6839      	ldr	r1, [r7, #0]
   123c8:	3170      	adds	r1, #112	; 0x70
   123ca:	0028      	movs	r0, r5
   123cc:	47b0      	blx	r6
            break;
   123ce:	e436      	b.n	11c3e <theme_apply+0x2e>
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
   123d0:	2100      	movs	r1, #0
   123d2:	4b12      	ldr	r3, [pc, #72]	; (1241c <theme_apply+0x80c>)
   123d4:	4699      	mov	r9, r3
   123d6:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
   123d8:	2100      	movs	r1, #0
   123da:	0020      	movs	r0, r4
   123dc:	4f10      	ldr	r7, [pc, #64]	; (12420 <theme_apply+0x810>)
   123de:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   123e0:	4e10      	ldr	r6, [pc, #64]	; (12424 <theme_apply+0x814>)
   123e2:	6833      	ldr	r3, [r6, #0]
   123e4:	1d19      	adds	r1, r3, #4
   123e6:	9001      	str	r0, [sp, #4]
   123e8:	4d0f      	ldr	r5, [pc, #60]	; (12428 <theme_apply+0x818>)
   123ea:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
   123ec:	6831      	ldr	r1, [r6, #0]
   123ee:	315c      	adds	r1, #92	; 0x5c
   123f0:	9801      	ldr	r0, [sp, #4]
   123f2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
   123f4:	2101      	movs	r1, #1
   123f6:	0020      	movs	r0, r4
   123f8:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
   123fa:	2101      	movs	r1, #1
   123fc:	0020      	movs	r0, r4
   123fe:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
   12400:	6831      	ldr	r1, [r6, #0]
   12402:	3160      	adds	r1, #96	; 0x60
   12404:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
   12406:	2102      	movs	r1, #2
   12408:	0020      	movs	r0, r4
   1240a:	47c8      	blx	r9
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
   1240c:	2102      	movs	r1, #2
   1240e:	0020      	movs	r0, r4
   12410:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
   12412:	6831      	ldr	r1, [r6, #0]
   12414:	3164      	adds	r1, #100	; 0x64
   12416:	47a8      	blx	r5
            break;
   12418:	f7ff fc11 	bl	11c3e <theme_apply+0x2e>
   1241c:	00001d6d 	.word	0x00001d6d
   12420:	00001c91 	.word	0x00001c91
   12424:	20004c38 	.word	0x20004c38
   12428:	000049b5 	.word	0x000049b5

0001242c <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
   1242c:	b510      	push	{r4, lr}
    if(inited) lv_style_reset(style);
   1242e:	4b05      	ldr	r3, [pc, #20]	; (12444 <style_init_reset+0x18>)
   12430:	781b      	ldrb	r3, [r3, #0]
   12432:	2b00      	cmp	r3, #0
   12434:	d102      	bne.n	1243c <style_init_reset+0x10>
    else lv_style_init(style);
   12436:	4b04      	ldr	r3, [pc, #16]	; (12448 <style_init_reset+0x1c>)
   12438:	4798      	blx	r3
}
   1243a:	bd10      	pop	{r4, pc}
    if(inited) lv_style_reset(style);
   1243c:	4b03      	ldr	r3, [pc, #12]	; (1244c <style_init_reset+0x20>)
   1243e:	4798      	blx	r3
   12440:	e7fb      	b.n	1243a <style_init_reset+0xe>
   12442:	46c0      	nop			; (mov r8, r8)
   12444:	20004c34 	.word	0x20004c34
   12448:	000048e5 	.word	0x000048e5
   1244c:	00004ae1 	.word	0x00004ae1

00012450 <basic_init>:
{
   12450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12452:	46ce      	mov	lr, r9
   12454:	4647      	mov	r7, r8
   12456:	b580      	push	{r7, lr}
    style_init_reset(&styles->scr);
   12458:	4cf9      	ldr	r4, [pc, #996]	; (12840 <basic_init+0x3f0>)
   1245a:	6820      	ldr	r0, [r4, #0]
   1245c:	4bf9      	ldr	r3, [pc, #996]	; (12844 <basic_init+0x3f4>)
   1245e:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   12460:	22ff      	movs	r2, #255	; 0xff
   12462:	212c      	movs	r1, #44	; 0x2c
   12464:	6820      	ldr	r0, [r4, #0]
   12466:	4bf8      	ldr	r3, [pc, #992]	; (12848 <basic_init+0x3f8>)
   12468:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
   1246a:	6820      	ldr	r0, [r4, #0]
   1246c:	4bf7      	ldr	r3, [pc, #988]	; (1284c <basic_init+0x3fc>)
   1246e:	699b      	ldr	r3, [r3, #24]
   12470:	079b      	lsls	r3, r3, #30
   12472:	d501      	bpl.n	12478 <basic_init+0x28>
   12474:	f000 fe5d 	bl	13132 <basic_init+0xce2>
   12478:	2308      	movs	r3, #8
   1247a:	2112      	movs	r1, #18
   1247c:	220b      	movs	r2, #11
   1247e:	0149      	lsls	r1, r1, #5
   12480:	02db      	lsls	r3, r3, #11
   12482:	430a      	orrs	r2, r1
   12484:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   12486:	2129      	movs	r1, #41	; 0x29
   12488:	4bf1      	ldr	r3, [pc, #964]	; (12850 <basic_init+0x400>)
   1248a:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   1248c:	4bec      	ldr	r3, [pc, #944]	; (12840 <basic_init+0x3f0>)
   1248e:	6818      	ldr	r0, [r3, #0]
   12490:	4bee      	ldr	r3, [pc, #952]	; (1284c <basic_init+0x3fc>)
   12492:	699b      	ldr	r3, [r3, #24]
   12494:	079b      	lsls	r3, r3, #30
   12496:	d501      	bpl.n	1249c <basic_init+0x4c>
   12498:	f000 fe50 	bl	1313c <basic_init+0xcec>
   1249c:	231c      	movs	r3, #28
   1249e:	213a      	movs	r1, #58	; 0x3a
   124a0:	221d      	movs	r2, #29
   124a2:	0149      	lsls	r1, r1, #5
   124a4:	02db      	lsls	r3, r3, #11
   124a6:	430a      	orrs	r2, r1
   124a8:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   124aa:	49ea      	ldr	r1, [pc, #936]	; (12854 <basic_init+0x404>)
   124ac:	4be8      	ldr	r3, [pc, #928]	; (12850 <basic_init+0x400>)
   124ae:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   124b0:	4be3      	ldr	r3, [pc, #908]	; (12840 <basic_init+0x3f0>)
   124b2:	6818      	ldr	r0, [r3, #0]
   124b4:	4be5      	ldr	r3, [pc, #916]	; (1284c <basic_init+0x3fc>)
   124b6:	699b      	ldr	r3, [r3, #24]
   124b8:	079b      	lsls	r3, r3, #30
   124ba:	d501      	bpl.n	124c0 <basic_init+0x70>
   124bc:	f000 fe43 	bl	13146 <basic_init+0xcf6>
   124c0:	231c      	movs	r3, #28
   124c2:	213a      	movs	r1, #58	; 0x3a
   124c4:	221d      	movs	r2, #29
   124c6:	0149      	lsls	r1, r1, #5
   124c8:	02db      	lsls	r3, r3, #11
   124ca:	430a      	orrs	r2, r1
   124cc:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   124ce:	2179      	movs	r1, #121	; 0x79
   124d0:	4bdf      	ldr	r3, [pc, #892]	; (12850 <basic_init+0x400>)
   124d2:	4798      	blx	r3
    lv_style_set_text_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
   124d4:	4edd      	ldr	r6, [pc, #884]	; (1284c <basic_init+0x3fc>)
   124d6:	4cda      	ldr	r4, [pc, #872]	; (12840 <basic_init+0x3f0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   124d8:	68f2      	ldr	r2, [r6, #12]
   124da:	49df      	ldr	r1, [pc, #892]	; (12858 <basic_init+0x408>)
   124dc:	6820      	ldr	r0, [r4, #0]
   124de:	4ddf      	ldr	r5, [pc, #892]	; (1285c <basic_init+0x40c>)
   124e0:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   124e2:	68f2      	ldr	r2, [r6, #12]
   124e4:	217e      	movs	r1, #126	; 0x7e
   124e6:	6820      	ldr	r0, [r4, #0]
   124e8:	47a8      	blx	r5
    style_init_reset(&styles->bg);
   124ea:	6823      	ldr	r3, [r4, #0]
   124ec:	1d18      	adds	r0, r3, #4
   124ee:	4bd5      	ldr	r3, [pc, #852]	; (12844 <basic_init+0x3f4>)
   124f0:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   124f2:	6824      	ldr	r4, [r4, #0]
   124f4:	3404      	adds	r4, #4
   124f6:	2000      	movs	r0, #0
   124f8:	4bd9      	ldr	r3, [pc, #868]	; (12860 <basic_init+0x410>)
   124fa:	4798      	blx	r3
   124fc:	300a      	adds	r0, #10
   124fe:	00c0      	lsls	r0, r0, #3
   12500:	2340      	movs	r3, #64	; 0x40
   12502:	33ff      	adds	r3, #255	; 0xff
   12504:	2201      	movs	r2, #1
   12506:	4298      	cmp	r0, r3
   12508:	d901      	bls.n	1250e <basic_init+0xbe>
   1250a:	f000 fe21 	bl	13150 <basic_init+0xd00>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1250e:	2101      	movs	r1, #1
   12510:	0020      	movs	r0, r4
   12512:	4bd4      	ldr	r3, [pc, #848]	; (12864 <basic_init+0x414>)
   12514:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   12516:	4cca      	ldr	r4, [pc, #808]	; (12840 <basic_init+0x3f0>)
   12518:	6823      	ldr	r3, [r4, #0]
   1251a:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1251c:	22ff      	movs	r2, #255	; 0xff
   1251e:	212c      	movs	r1, #44	; 0x2c
   12520:	4bc9      	ldr	r3, [pc, #804]	; (12848 <basic_init+0x3f8>)
   12522:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
   12524:	6820      	ldr	r0, [r4, #0]
   12526:	3004      	adds	r0, #4
   12528:	4bc8      	ldr	r3, [pc, #800]	; (1284c <basic_init+0x3fc>)
   1252a:	699b      	ldr	r3, [r3, #24]
   1252c:	079b      	lsls	r3, r3, #30
   1252e:	d501      	bpl.n	12534 <basic_init+0xe4>
   12530:	f000 fe19 	bl	13166 <basic_init+0xd16>
   12534:	230b      	movs	r3, #11
   12536:	2118      	movs	r1, #24
   12538:	220e      	movs	r2, #14
   1253a:	0149      	lsls	r1, r1, #5
   1253c:	02db      	lsls	r3, r3, #11
   1253e:	430a      	orrs	r2, r1
   12540:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   12542:	2129      	movs	r1, #41	; 0x29
   12544:	4bc2      	ldr	r3, [pc, #776]	; (12850 <basic_init+0x400>)
   12546:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   12548:	4bbd      	ldr	r3, [pc, #756]	; (12840 <basic_init+0x3f0>)
   1254a:	6818      	ldr	r0, [r3, #0]
   1254c:	3004      	adds	r0, #4
   1254e:	4bbf      	ldr	r3, [pc, #764]	; (1284c <basic_init+0x3fc>)
   12550:	699b      	ldr	r3, [r3, #24]
   12552:	079b      	lsls	r3, r3, #30
   12554:	d501      	bpl.n	1255a <basic_init+0x10a>
   12556:	f000 fe0b 	bl	13170 <basic_init+0xd20>
   1255a:	2310      	movs	r3, #16
   1255c:	2122      	movs	r1, #34	; 0x22
   1255e:	2212      	movs	r2, #18
   12560:	0149      	lsls	r1, r1, #5
   12562:	02db      	lsls	r3, r3, #11
   12564:	430a      	orrs	r2, r1
   12566:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   12568:	2139      	movs	r1, #57	; 0x39
   1256a:	4db9      	ldr	r5, [pc, #740]	; (12850 <basic_init+0x400>)
   1256c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED, theme.color_primary);
   1256e:	4cb4      	ldr	r4, [pc, #720]	; (12840 <basic_init+0x3f0>)
   12570:	6823      	ldr	r3, [r4, #0]
   12572:	1d18      	adds	r0, r3, #4
   12574:	4eb5      	ldr	r6, [pc, #724]	; (1284c <basic_init+0x3fc>)
   12576:	88b2      	ldrh	r2, [r6, #4]
   12578:	49bb      	ldr	r1, [pc, #748]	; (12868 <basic_init+0x418>)
   1257a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
   1257c:	6823      	ldr	r3, [r4, #0]
   1257e:	1d18      	adds	r0, r3, #4
   12580:	88f2      	ldrh	r2, [r6, #6]
   12582:	49ba      	ldr	r1, [pc, #744]	; (1286c <basic_init+0x41c>)
   12584:	47a8      	blx	r5
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   12586:	6824      	ldr	r4, [r4, #0]
   12588:	3404      	adds	r4, #4
   1258a:	2000      	movs	r0, #0
   1258c:	4bb4      	ldr	r3, [pc, #720]	; (12860 <basic_init+0x410>)
   1258e:	4798      	blx	r3
   12590:	3028      	adds	r0, #40	; 0x28
   12592:	0040      	lsls	r0, r0, #1
   12594:	2340      	movs	r3, #64	; 0x40
   12596:	33ff      	adds	r3, #255	; 0xff
   12598:	2201      	movs	r2, #1
   1259a:	4298      	cmp	r0, r3
   1259c:	d901      	bls.n	125a2 <basic_init+0x152>
   1259e:	f000 fdec 	bl	1317a <basic_init+0xd2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   125a2:	2130      	movs	r1, #48	; 0x30
   125a4:	0020      	movs	r0, r4
   125a6:	4daf      	ldr	r5, [pc, #700]	; (12864 <basic_init+0x414>)
   125a8:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   125aa:	4ca5      	ldr	r4, [pc, #660]	; (12840 <basic_init+0x3f0>)
   125ac:	6823      	ldr	r3, [r4, #0]
   125ae:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   125b0:	2201      	movs	r2, #1
   125b2:	2133      	movs	r1, #51	; 0x33
   125b4:	47a8      	blx	r5
    lv_style_set_text_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   125b6:	4da5      	ldr	r5, [pc, #660]	; (1284c <basic_init+0x3fc>)
   125b8:	6823      	ldr	r3, [r4, #0]
   125ba:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   125bc:	68ea      	ldr	r2, [r5, #12]
   125be:	49a6      	ldr	r1, [pc, #664]	; (12858 <basic_init+0x408>)
   125c0:	4ba6      	ldr	r3, [pc, #664]	; (1285c <basic_init+0x40c>)
   125c2:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   125c4:	6820      	ldr	r0, [r4, #0]
   125c6:	3004      	adds	r0, #4
   125c8:	69ab      	ldr	r3, [r5, #24]
   125ca:	079b      	lsls	r3, r3, #30
   125cc:	d501      	bpl.n	125d2 <basic_init+0x182>
   125ce:	f000 fddf 	bl	13190 <basic_init+0xd40>
   125d2:	231f      	movs	r3, #31
   125d4:	213f      	movs	r1, #63	; 0x3f
   125d6:	221f      	movs	r2, #31
   125d8:	0149      	lsls	r1, r1, #5
   125da:	02db      	lsls	r3, r3, #11
   125dc:	430a      	orrs	r2, r1
   125de:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   125e0:	499c      	ldr	r1, [pc, #624]	; (12854 <basic_init+0x404>)
   125e2:	4b9b      	ldr	r3, [pc, #620]	; (12850 <basic_init+0x400>)
   125e4:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   125e6:	4c99      	ldr	r4, [pc, #612]	; (1284c <basic_init+0x3fc>)
   125e8:	4d95      	ldr	r5, [pc, #596]	; (12840 <basic_init+0x3f0>)
   125ea:	682b      	ldr	r3, [r5, #0]
   125ec:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   125ee:	68e2      	ldr	r2, [r4, #12]
   125f0:	217e      	movs	r1, #126	; 0x7e
   125f2:	4b9a      	ldr	r3, [pc, #616]	; (1285c <basic_init+0x40c>)
   125f4:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   125f6:	6828      	ldr	r0, [r5, #0]
   125f8:	3004      	adds	r0, #4
   125fa:	69a3      	ldr	r3, [r4, #24]
   125fc:	079b      	lsls	r3, r3, #30
   125fe:	d501      	bpl.n	12604 <basic_init+0x1b4>
   12600:	f000 fdcb 	bl	1319a <basic_init+0xd4a>
   12604:	231f      	movs	r3, #31
   12606:	213f      	movs	r1, #63	; 0x3f
   12608:	221f      	movs	r2, #31
   1260a:	0149      	lsls	r1, r1, #5
   1260c:	02db      	lsls	r3, r3, #11
   1260e:	430a      	orrs	r2, r1
   12610:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   12612:	2179      	movs	r1, #121	; 0x79
   12614:	4b8e      	ldr	r3, [pc, #568]	; (12850 <basic_init+0x400>)
   12616:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   12618:	4b89      	ldr	r3, [pc, #548]	; (12840 <basic_init+0x3f0>)
   1261a:	6818      	ldr	r0, [r3, #0]
   1261c:	3004      	adds	r0, #4
   1261e:	4b8b      	ldr	r3, [pc, #556]	; (1284c <basic_init+0x3fc>)
   12620:	699b      	ldr	r3, [r3, #24]
   12622:	079b      	lsls	r3, r3, #30
   12624:	d501      	bpl.n	1262a <basic_init+0x1da>
   12626:	f000 fdbd 	bl	131a4 <basic_init+0xd54>
   1262a:	231f      	movs	r3, #31
   1262c:	213f      	movs	r1, #63	; 0x3f
   1262e:	221f      	movs	r2, #31
   12630:	0149      	lsls	r1, r1, #5
   12632:	02db      	lsls	r3, r3, #11
   12634:	430a      	orrs	r2, r1
   12636:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   12638:	498d      	ldr	r1, [pc, #564]	; (12870 <basic_init+0x420>)
   1263a:	4b85      	ldr	r3, [pc, #532]	; (12850 <basic_init+0x400>)
   1263c:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1263e:	4b80      	ldr	r3, [pc, #512]	; (12840 <basic_init+0x3f0>)
   12640:	6818      	ldr	r0, [r3, #0]
   12642:	3004      	adds	r0, #4
   12644:	4b81      	ldr	r3, [pc, #516]	; (1284c <basic_init+0x3fc>)
   12646:	699b      	ldr	r3, [r3, #24]
   12648:	079b      	lsls	r3, r3, #30
   1264a:	d501      	bpl.n	12650 <basic_init+0x200>
   1264c:	f000 fdaf 	bl	131ae <basic_init+0xd5e>
   12650:	231f      	movs	r3, #31
   12652:	213f      	movs	r1, #63	; 0x3f
   12654:	221f      	movs	r2, #31
   12656:	0149      	lsls	r1, r1, #5
   12658:	02db      	lsls	r3, r3, #11
   1265a:	430a      	orrs	r2, r1
   1265c:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1265e:	2199      	movs	r1, #153	; 0x99
   12660:	4b7b      	ldr	r3, [pc, #492]	; (12850 <basic_init+0x400>)
   12662:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
   12664:	4c76      	ldr	r4, [pc, #472]	; (12840 <basic_init+0x3f0>)
   12666:	6823      	ldr	r3, [r4, #0]
   12668:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1266a:	2201      	movs	r2, #1
   1266c:	2190      	movs	r1, #144	; 0x90
   1266e:	4b7d      	ldr	r3, [pc, #500]	; (12864 <basic_init+0x414>)
   12670:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   12672:	6825      	ldr	r5, [r4, #0]
   12674:	3504      	adds	r5, #4
   12676:	2000      	movs	r0, #0
   12678:	4b7e      	ldr	r3, [pc, #504]	; (12874 <basic_init+0x424>)
   1267a:	4798      	blx	r3
   1267c:	2801      	cmp	r0, #1
   1267e:	d801      	bhi.n	12684 <basic_init+0x234>
   12680:	f000 fd9a 	bl	131b8 <basic_init+0xd68>
   12684:	2000      	movs	r0, #0
   12686:	4b76      	ldr	r3, [pc, #472]	; (12860 <basic_init+0x410>)
   12688:	4798      	blx	r3
   1268a:	0103      	lsls	r3, r0, #4
   1268c:	1a18      	subs	r0, r3, r0
   1268e:	0040      	lsls	r0, r0, #1
   12690:	3050      	adds	r0, #80	; 0x50
   12692:	2340      	movs	r3, #64	; 0x40
   12694:	33ff      	adds	r3, #255	; 0xff
   12696:	2401      	movs	r4, #1
   12698:	4298      	cmp	r0, r3
   1269a:	d901      	bls.n	126a0 <basic_init+0x250>
   1269c:	f000 fda5 	bl	131ea <basic_init+0xd9a>
   126a0:	2000      	movs	r0, #0
   126a2:	4b6f      	ldr	r3, [pc, #444]	; (12860 <basic_init+0x410>)
   126a4:	4798      	blx	r3
   126a6:	0003      	movs	r3, r0
   126a8:	3328      	adds	r3, #40	; 0x28
   126aa:	005b      	lsls	r3, r3, #1
   126ac:	2140      	movs	r1, #64	; 0x40
   126ae:	31ff      	adds	r1, #255	; 0xff
   126b0:	2201      	movs	r2, #1
   126b2:	428b      	cmp	r3, r1
   126b4:	d901      	bls.n	126ba <basic_init+0x26a>
   126b6:	f000 fda5 	bl	13204 <basic_init+0xdb4>
   126ba:	18a2      	adds	r2, r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   126bc:	b212      	sxth	r2, r2
   126be:	2112      	movs	r1, #18
   126c0:	0028      	movs	r0, r5
   126c2:	4b68      	ldr	r3, [pc, #416]	; (12864 <basic_init+0x414>)
   126c4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   126c6:	4b5e      	ldr	r3, [pc, #376]	; (12840 <basic_init+0x3f0>)
   126c8:	681d      	ldr	r5, [r3, #0]
   126ca:	3504      	adds	r5, #4
   126cc:	2000      	movs	r0, #0
   126ce:	4b69      	ldr	r3, [pc, #420]	; (12874 <basic_init+0x424>)
   126d0:	4798      	blx	r3
   126d2:	2801      	cmp	r0, #1
   126d4:	d801      	bhi.n	126da <basic_init+0x28a>
   126d6:	f000 fda0 	bl	1321a <basic_init+0xdca>
   126da:	2000      	movs	r0, #0
   126dc:	4b60      	ldr	r3, [pc, #384]	; (12860 <basic_init+0x410>)
   126de:	4798      	blx	r3
   126e0:	0103      	lsls	r3, r0, #4
   126e2:	1a18      	subs	r0, r3, r0
   126e4:	0040      	lsls	r0, r0, #1
   126e6:	3050      	adds	r0, #80	; 0x50
   126e8:	2340      	movs	r3, #64	; 0x40
   126ea:	33ff      	adds	r3, #255	; 0xff
   126ec:	2401      	movs	r4, #1
   126ee:	4298      	cmp	r0, r3
   126f0:	d901      	bls.n	126f6 <basic_init+0x2a6>
   126f2:	f000 fdab 	bl	1324c <basic_init+0xdfc>
   126f6:	2000      	movs	r0, #0
   126f8:	4b59      	ldr	r3, [pc, #356]	; (12860 <basic_init+0x410>)
   126fa:	4798      	blx	r3
   126fc:	0003      	movs	r3, r0
   126fe:	3328      	adds	r3, #40	; 0x28
   12700:	005b      	lsls	r3, r3, #1
   12702:	2140      	movs	r1, #64	; 0x40
   12704:	31ff      	adds	r1, #255	; 0xff
   12706:	2201      	movs	r2, #1
   12708:	428b      	cmp	r3, r1
   1270a:	d901      	bls.n	12710 <basic_init+0x2c0>
   1270c:	f000 fdab 	bl	13266 <basic_init+0xe16>
   12710:	18a2      	adds	r2, r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   12712:	b212      	sxth	r2, r2
   12714:	2113      	movs	r1, #19
   12716:	0028      	movs	r0, r5
   12718:	4b52      	ldr	r3, [pc, #328]	; (12864 <basic_init+0x414>)
   1271a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1271c:	4b48      	ldr	r3, [pc, #288]	; (12840 <basic_init+0x3f0>)
   1271e:	681d      	ldr	r5, [r3, #0]
   12720:	3504      	adds	r5, #4
   12722:	2000      	movs	r0, #0
   12724:	4b53      	ldr	r3, [pc, #332]	; (12874 <basic_init+0x424>)
   12726:	4798      	blx	r3
   12728:	2801      	cmp	r0, #1
   1272a:	d801      	bhi.n	12730 <basic_init+0x2e0>
   1272c:	f000 fda6 	bl	1327c <basic_init+0xe2c>
   12730:	2000      	movs	r0, #0
   12732:	4b4b      	ldr	r3, [pc, #300]	; (12860 <basic_init+0x410>)
   12734:	4798      	blx	r3
   12736:	0103      	lsls	r3, r0, #4
   12738:	1a18      	subs	r0, r3, r0
   1273a:	0040      	lsls	r0, r0, #1
   1273c:	3050      	adds	r0, #80	; 0x50
   1273e:	2340      	movs	r3, #64	; 0x40
   12740:	33ff      	adds	r3, #255	; 0xff
   12742:	2401      	movs	r4, #1
   12744:	4298      	cmp	r0, r3
   12746:	d901      	bls.n	1274c <basic_init+0x2fc>
   12748:	f000 fdb1 	bl	132ae <basic_init+0xe5e>
   1274c:	2000      	movs	r0, #0
   1274e:	4b44      	ldr	r3, [pc, #272]	; (12860 <basic_init+0x410>)
   12750:	4798      	blx	r3
   12752:	0003      	movs	r3, r0
   12754:	3328      	adds	r3, #40	; 0x28
   12756:	005b      	lsls	r3, r3, #1
   12758:	2140      	movs	r1, #64	; 0x40
   1275a:	31ff      	adds	r1, #255	; 0xff
   1275c:	2201      	movs	r2, #1
   1275e:	428b      	cmp	r3, r1
   12760:	d901      	bls.n	12766 <basic_init+0x316>
   12762:	f000 fdb1 	bl	132c8 <basic_init+0xe78>
   12766:	18a2      	adds	r2, r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   12768:	b212      	sxth	r2, r2
   1276a:	2110      	movs	r1, #16
   1276c:	0028      	movs	r0, r5
   1276e:	4b3d      	ldr	r3, [pc, #244]	; (12864 <basic_init+0x414>)
   12770:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   12772:	4b33      	ldr	r3, [pc, #204]	; (12840 <basic_init+0x3f0>)
   12774:	681d      	ldr	r5, [r3, #0]
   12776:	3504      	adds	r5, #4
   12778:	2000      	movs	r0, #0
   1277a:	4b3e      	ldr	r3, [pc, #248]	; (12874 <basic_init+0x424>)
   1277c:	4798      	blx	r3
   1277e:	2801      	cmp	r0, #1
   12780:	d801      	bhi.n	12786 <basic_init+0x336>
   12782:	f000 fdac 	bl	132de <basic_init+0xe8e>
   12786:	2000      	movs	r0, #0
   12788:	4b35      	ldr	r3, [pc, #212]	; (12860 <basic_init+0x410>)
   1278a:	4798      	blx	r3
   1278c:	0103      	lsls	r3, r0, #4
   1278e:	1a18      	subs	r0, r3, r0
   12790:	0040      	lsls	r0, r0, #1
   12792:	3050      	adds	r0, #80	; 0x50
   12794:	2340      	movs	r3, #64	; 0x40
   12796:	33ff      	adds	r3, #255	; 0xff
   12798:	2401      	movs	r4, #1
   1279a:	4298      	cmp	r0, r3
   1279c:	d901      	bls.n	127a2 <basic_init+0x352>
   1279e:	f000 fdb7 	bl	13310 <basic_init+0xec0>
   127a2:	2000      	movs	r0, #0
   127a4:	4b2e      	ldr	r3, [pc, #184]	; (12860 <basic_init+0x410>)
   127a6:	4798      	blx	r3
   127a8:	0003      	movs	r3, r0
   127aa:	3328      	adds	r3, #40	; 0x28
   127ac:	005b      	lsls	r3, r3, #1
   127ae:	2140      	movs	r1, #64	; 0x40
   127b0:	31ff      	adds	r1, #255	; 0xff
   127b2:	2201      	movs	r2, #1
   127b4:	428b      	cmp	r3, r1
   127b6:	d901      	bls.n	127bc <basic_init+0x36c>
   127b8:	f000 fdb7 	bl	1332a <basic_init+0xeda>
   127bc:	18a2      	adds	r2, r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   127be:	b212      	sxth	r2, r2
   127c0:	2111      	movs	r1, #17
   127c2:	0028      	movs	r0, r5
   127c4:	4b27      	ldr	r3, [pc, #156]	; (12864 <basic_init+0x414>)
   127c6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   127c8:	4b1d      	ldr	r3, [pc, #116]	; (12840 <basic_init+0x3f0>)
   127ca:	681c      	ldr	r4, [r3, #0]
   127cc:	3404      	adds	r4, #4
   127ce:	2000      	movs	r0, #0
   127d0:	4b28      	ldr	r3, [pc, #160]	; (12874 <basic_init+0x424>)
   127d2:	4798      	blx	r3
   127d4:	2801      	cmp	r0, #1
   127d6:	d801      	bhi.n	127dc <basic_init+0x38c>
   127d8:	f000 fdb2 	bl	13340 <basic_init+0xef0>
   127dc:	2000      	movs	r0, #0
   127de:	4b20      	ldr	r3, [pc, #128]	; (12860 <basic_init+0x410>)
   127e0:	4798      	blx	r3
   127e2:	0103      	lsls	r3, r0, #4
   127e4:	1a1b      	subs	r3, r3, r0
   127e6:	005b      	lsls	r3, r3, #1
   127e8:	3350      	adds	r3, #80	; 0x50
   127ea:	2140      	movs	r1, #64	; 0x40
   127ec:	31ff      	adds	r1, #255	; 0xff
   127ee:	2201      	movs	r2, #1
   127f0:	428b      	cmp	r3, r1
   127f2:	d901      	bls.n	127f8 <basic_init+0x3a8>
   127f4:	f000 fdbd 	bl	13372 <basic_init+0xf22>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   127f8:	2114      	movs	r1, #20
   127fa:	0020      	movs	r0, r4
   127fc:	4d19      	ldr	r5, [pc, #100]	; (12864 <basic_init+0x414>)
   127fe:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   12800:	4c0f      	ldr	r4, [pc, #60]	; (12840 <basic_init+0x3f0>)
   12802:	6823      	ldr	r3, [r4, #0]
   12804:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   12806:	2296      	movs	r2, #150	; 0x96
   12808:	21b0      	movs	r1, #176	; 0xb0
   1280a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
   1280c:	6823      	ldr	r3, [r4, #0]
   1280e:	1d18      	adds	r0, r3, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   12810:	2239      	movs	r2, #57	; 0x39
   12812:	21b7      	movs	r1, #183	; 0xb7
   12814:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
   12816:	6820      	ldr	r0, [r4, #0]
   12818:	300c      	adds	r0, #12
   1281a:	4b0a      	ldr	r3, [pc, #40]	; (12844 <basic_init+0x3f4>)
   1281c:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
   1281e:	6820      	ldr	r0, [r4, #0]
   12820:	1d01      	adds	r1, r0, #4
   12822:	300c      	adds	r0, #12
   12824:	4b14      	ldr	r3, [pc, #80]	; (12878 <basic_init+0x428>)
   12826:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
   12828:	6820      	ldr	r0, [r4, #0]
   1282a:	300c      	adds	r0, #12
   1282c:	4b07      	ldr	r3, [pc, #28]	; (1284c <basic_init+0x3fc>)
   1282e:	699b      	ldr	r3, [r3, #24]
   12830:	079b      	lsls	r3, r3, #30
   12832:	d501      	bpl.n	12838 <basic_init+0x3e8>
   12834:	f000 fdaa 	bl	1338c <basic_init+0xf3c>
   12838:	2308      	movs	r3, #8
   1283a:	2112      	movs	r1, #18
   1283c:	2209      	movs	r2, #9
   1283e:	e01d      	b.n	1287c <basic_init+0x42c>
   12840:	20004c38 	.word	0x20004c38
   12844:	0001242d 	.word	0x0001242d
   12848:	00004f4d 	.word	0x00004f4d
   1284c:	20004c3c 	.word	0x20004c3c
   12850:	00004ded 	.word	0x00004ded
   12854:	00008089 	.word	0x00008089
   12858:	0000808e 	.word	0x0000808e
   1285c:	000050a1 	.word	0x000050a1
   12860:	0000f5fd 	.word	0x0000f5fd
   12864:	00004c8d 	.word	0x00004c8d
   12868:	00000239 	.word	0x00000239
   1286c:	00000439 	.word	0x00000439
   12870:	000080a9 	.word	0x000080a9
   12874:	0000f619 	.word	0x0000f619
   12878:	00004b35 	.word	0x00004b35
   1287c:	0149      	lsls	r1, r1, #5
   1287e:	02db      	lsls	r3, r3, #11
   12880:	430a      	orrs	r2, r1
   12882:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   12884:	2129      	movs	r1, #41	; 0x29
   12886:	4bfb      	ldr	r3, [pc, #1004]	; (12c74 <basic_init+0x824>)
   12888:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
   1288a:	4bfb      	ldr	r3, [pc, #1004]	; (12c78 <basic_init+0x828>)
   1288c:	6818      	ldr	r0, [r3, #0]
   1288e:	300c      	adds	r0, #12
   12890:	4bfa      	ldr	r3, [pc, #1000]	; (12c7c <basic_init+0x82c>)
   12892:	699b      	ldr	r3, [r3, #24]
   12894:	079b      	lsls	r3, r3, #30
   12896:	d501      	bpl.n	1289c <basic_init+0x44c>
   12898:	f000 fd7d 	bl	13396 <basic_init+0xf46>
   1289c:	2308      	movs	r3, #8
   1289e:	2110      	movs	r1, #16
   128a0:	2208      	movs	r2, #8
   128a2:	0149      	lsls	r1, r1, #5
   128a4:	02db      	lsls	r3, r3, #11
   128a6:	430a      	orrs	r2, r1
   128a8:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   128aa:	2139      	movs	r1, #57	; 0x39
   128ac:	4bf1      	ldr	r3, [pc, #964]	; (12c74 <basic_init+0x824>)
   128ae:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   128b0:	4bf1      	ldr	r3, [pc, #964]	; (12c78 <basic_init+0x828>)
   128b2:	6818      	ldr	r0, [r3, #0]
   128b4:	300c      	adds	r0, #12
   128b6:	4bf1      	ldr	r3, [pc, #964]	; (12c7c <basic_init+0x82c>)
   128b8:	699b      	ldr	r3, [r3, #24]
   128ba:	079b      	lsls	r3, r3, #30
   128bc:	d501      	bpl.n	128c2 <basic_init+0x472>
   128be:	f000 fd6f 	bl	133a0 <basic_init+0xf50>
   128c2:	2314      	movs	r3, #20
   128c4:	212a      	movs	r1, #42	; 0x2a
   128c6:	2215      	movs	r2, #21
   128c8:	0149      	lsls	r1, r1, #5
   128ca:	02db      	lsls	r3, r3, #11
   128cc:	430a      	orrs	r2, r1
   128ce:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   128d0:	49eb      	ldr	r1, [pc, #940]	; (12c80 <basic_init+0x830>)
   128d2:	4be8      	ldr	r3, [pc, #928]	; (12c74 <basic_init+0x824>)
   128d4:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   128d6:	4be8      	ldr	r3, [pc, #928]	; (12c78 <basic_init+0x828>)
   128d8:	6818      	ldr	r0, [r3, #0]
   128da:	300c      	adds	r0, #12
   128dc:	4be7      	ldr	r3, [pc, #924]	; (12c7c <basic_init+0x82c>)
   128de:	699b      	ldr	r3, [r3, #24]
   128e0:	079b      	lsls	r3, r3, #30
   128e2:	d501      	bpl.n	128e8 <basic_init+0x498>
   128e4:	f000 fd61 	bl	133aa <basic_init+0xf5a>
   128e8:	2314      	movs	r3, #20
   128ea:	212a      	movs	r1, #42	; 0x2a
   128ec:	2215      	movs	r2, #21
   128ee:	0149      	lsls	r1, r1, #5
   128f0:	02db      	lsls	r3, r3, #11
   128f2:	430a      	orrs	r2, r1
   128f4:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   128f6:	2179      	movs	r1, #121	; 0x79
   128f8:	4bde      	ldr	r3, [pc, #888]	; (12c74 <basic_init+0x824>)
   128fa:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   128fc:	4bde      	ldr	r3, [pc, #888]	; (12c78 <basic_init+0x828>)
   128fe:	6818      	ldr	r0, [r3, #0]
   12900:	300c      	adds	r0, #12
   12902:	4bde      	ldr	r3, [pc, #888]	; (12c7c <basic_init+0x82c>)
   12904:	699b      	ldr	r3, [r3, #24]
   12906:	079b      	lsls	r3, r3, #30
   12908:	d501      	bpl.n	1290e <basic_init+0x4be>
   1290a:	f000 fd53 	bl	133b4 <basic_init+0xf64>
   1290e:	2314      	movs	r3, #20
   12910:	212a      	movs	r1, #42	; 0x2a
   12912:	2215      	movs	r2, #21
   12914:	0149      	lsls	r1, r1, #5
   12916:	02db      	lsls	r3, r3, #11
   12918:	430a      	orrs	r2, r1
   1291a:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1291c:	49d9      	ldr	r1, [pc, #868]	; (12c84 <basic_init+0x834>)
   1291e:	4bd5      	ldr	r3, [pc, #852]	; (12c74 <basic_init+0x824>)
   12920:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   12922:	4bd5      	ldr	r3, [pc, #852]	; (12c78 <basic_init+0x828>)
   12924:	6818      	ldr	r0, [r3, #0]
   12926:	300c      	adds	r0, #12
   12928:	4bd4      	ldr	r3, [pc, #848]	; (12c7c <basic_init+0x82c>)
   1292a:	699b      	ldr	r3, [r3, #24]
   1292c:	079b      	lsls	r3, r3, #30
   1292e:	d501      	bpl.n	12934 <basic_init+0x4e4>
   12930:	f000 fd45 	bl	133be <basic_init+0xf6e>
   12934:	2314      	movs	r3, #20
   12936:	212a      	movs	r1, #42	; 0x2a
   12938:	2215      	movs	r2, #21
   1293a:	0149      	lsls	r1, r1, #5
   1293c:	02db      	lsls	r3, r3, #11
   1293e:	430a      	orrs	r2, r1
   12940:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   12942:	2199      	movs	r1, #153	; 0x99
   12944:	4bcb      	ldr	r3, [pc, #812]	; (12c74 <basic_init+0x824>)
   12946:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
   12948:	4ccb      	ldr	r4, [pc, #812]	; (12c78 <basic_init+0x828>)
   1294a:	6820      	ldr	r0, [r4, #0]
   1294c:	3008      	adds	r0, #8
   1294e:	4bce      	ldr	r3, [pc, #824]	; (12c88 <basic_init+0x838>)
   12950:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
   12952:	6820      	ldr	r0, [r4, #0]
   12954:	3008      	adds	r0, #8
   12956:	4bc9      	ldr	r3, [pc, #804]	; (12c7c <basic_init+0x82c>)
   12958:	699b      	ldr	r3, [r3, #24]
   1295a:	079b      	lsls	r3, r3, #30
   1295c:	d501      	bpl.n	12962 <basic_init+0x512>
   1295e:	f000 fd33 	bl	133c8 <basic_init+0xf78>
   12962:	2309      	movs	r3, #9
   12964:	2113      	movs	r1, #19
   12966:	220a      	movs	r2, #10
   12968:	0149      	lsls	r1, r1, #5
   1296a:	02db      	lsls	r3, r3, #11
   1296c:	430a      	orrs	r2, r1
   1296e:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   12970:	49c6      	ldr	r1, [pc, #792]	; (12c8c <basic_init+0x83c>)
   12972:	4fc0      	ldr	r7, [pc, #768]	; (12c74 <basic_init+0x824>)
   12974:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
   12976:	4ec0      	ldr	r6, [pc, #768]	; (12c78 <basic_init+0x828>)
   12978:	6830      	ldr	r0, [r6, #0]
   1297a:	3008      	adds	r0, #8
   1297c:	4dbf      	ldr	r5, [pc, #764]	; (12c7c <basic_init+0x82c>)
   1297e:	88aa      	ldrh	r2, [r5, #4]
   12980:	212a      	movs	r1, #42	; 0x2a
   12982:	31ff      	adds	r1, #255	; 0xff
   12984:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
   12986:	6834      	ldr	r4, [r6, #0]
   12988:	3408      	adds	r4, #8
   1298a:	88a8      	ldrh	r0, [r5, #4]
   1298c:	2133      	movs	r1, #51	; 0x33
   1298e:	4bc0      	ldr	r3, [pc, #768]	; (12c90 <basic_init+0x840>)
   12990:	4798      	blx	r3
   12992:	1c02      	adds	r2, r0, #0
   12994:	49bf      	ldr	r1, [pc, #764]	; (12c94 <basic_init+0x844>)
   12996:	0020      	movs	r0, r4
   12998:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
   1299a:	6830      	ldr	r0, [r6, #0]
   1299c:	3008      	adds	r0, #8
   1299e:	69ab      	ldr	r3, [r5, #24]
   129a0:	079b      	lsls	r3, r3, #30
   129a2:	d501      	bpl.n	129a8 <basic_init+0x558>
   129a4:	f000 fd15 	bl	133d2 <basic_init+0xf82>
   129a8:	230b      	movs	r3, #11
   129aa:	2118      	movs	r1, #24
   129ac:	220e      	movs	r2, #14
   129ae:	0149      	lsls	r1, r1, #5
   129b0:	02db      	lsls	r3, r3, #11
   129b2:	430a      	orrs	r2, r1
   129b4:	431a      	orrs	r2, r3
   129b6:	49b8      	ldr	r1, [pc, #736]	; (12c98 <basic_init+0x848>)
   129b8:	4fae      	ldr	r7, [pc, #696]	; (12c74 <basic_init+0x824>)
   129ba:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
   129bc:	4dae      	ldr	r5, [pc, #696]	; (12c78 <basic_init+0x828>)
   129be:	6828      	ldr	r0, [r5, #0]
   129c0:	3008      	adds	r0, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   129c2:	2200      	movs	r2, #0
   129c4:	2198      	movs	r1, #152	; 0x98
   129c6:	0049      	lsls	r1, r1, #1
   129c8:	4bb4      	ldr	r3, [pc, #720]	; (12c9c <basic_init+0x84c>)
   129ca:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
   129cc:	682c      	ldr	r4, [r5, #0]
   129ce:	3408      	adds	r4, #8
   129d0:	4eaa      	ldr	r6, [pc, #680]	; (12c7c <basic_init+0x82c>)
   129d2:	88b0      	ldrh	r0, [r6, #4]
   129d4:	2133      	movs	r1, #51	; 0x33
   129d6:	4bae      	ldr	r3, [pc, #696]	; (12c90 <basic_init+0x840>)
   129d8:	4798      	blx	r3
   129da:	1c02      	adds	r2, r0, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   129dc:	49b0      	ldr	r1, [pc, #704]	; (12ca0 <basic_init+0x850>)
   129de:	0020      	movs	r0, r4
   129e0:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
   129e2:	6828      	ldr	r0, [r5, #0]
   129e4:	3008      	adds	r0, #8
   129e6:	69b3      	ldr	r3, [r6, #24]
   129e8:	079b      	lsls	r3, r3, #30
   129ea:	d501      	bpl.n	129f0 <basic_init+0x5a0>
   129ec:	f000 fcf6 	bl	133dc <basic_init+0xf8c>
   129f0:	230b      	movs	r3, #11
   129f2:	2119      	movs	r1, #25
   129f4:	220d      	movs	r2, #13
   129f6:	0149      	lsls	r1, r1, #5
   129f8:	02db      	lsls	r3, r3, #11
   129fa:	430a      	orrs	r2, r1
   129fc:	431a      	orrs	r2, r3
   129fe:	49a9      	ldr	r1, [pc, #676]	; (12ca4 <basic_init+0x854>)
   12a00:	4b9c      	ldr	r3, [pc, #624]	; (12c74 <basic_init+0x824>)
   12a02:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   12a04:	4b9c      	ldr	r3, [pc, #624]	; (12c78 <basic_init+0x828>)
   12a06:	6818      	ldr	r0, [r3, #0]
   12a08:	3008      	adds	r0, #8
   12a0a:	4b9c      	ldr	r3, [pc, #624]	; (12c7c <basic_init+0x82c>)
   12a0c:	699b      	ldr	r3, [r3, #24]
   12a0e:	079b      	lsls	r3, r3, #30
   12a10:	d501      	bpl.n	12a16 <basic_init+0x5c6>
   12a12:	f000 fce8 	bl	133e6 <basic_init+0xf96>
   12a16:	230b      	movs	r3, #11
   12a18:	2119      	movs	r1, #25
   12a1a:	220d      	movs	r2, #13
   12a1c:	0149      	lsls	r1, r1, #5
   12a1e:	02db      	lsls	r3, r3, #11
   12a20:	430a      	orrs	r2, r1
   12a22:	431a      	orrs	r2, r3
   12a24:	213a      	movs	r1, #58	; 0x3a
   12a26:	31ff      	adds	r1, #255	; 0xff
   12a28:	4b92      	ldr	r3, [pc, #584]	; (12c74 <basic_init+0x824>)
   12a2a:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   12a2c:	4b92      	ldr	r3, [pc, #584]	; (12c78 <basic_init+0x828>)
   12a2e:	6818      	ldr	r0, [r3, #0]
   12a30:	3008      	adds	r0, #8
   12a32:	4b92      	ldr	r3, [pc, #584]	; (12c7c <basic_init+0x82c>)
   12a34:	699b      	ldr	r3, [r3, #24]
   12a36:	079b      	lsls	r3, r3, #30
   12a38:	d501      	bpl.n	12a3e <basic_init+0x5ee>
   12a3a:	f000 fcd9 	bl	133f0 <basic_init+0xfa0>
   12a3e:	230b      	movs	r3, #11
   12a40:	2119      	movs	r1, #25
   12a42:	220d      	movs	r2, #13
   12a44:	0149      	lsls	r1, r1, #5
   12a46:	02db      	lsls	r3, r3, #11
   12a48:	430a      	orrs	r2, r1
   12a4a:	431a      	orrs	r2, r3
   12a4c:	4996      	ldr	r1, [pc, #600]	; (12ca8 <basic_init+0x858>)
   12a4e:	4b89      	ldr	r3, [pc, #548]	; (12c74 <basic_init+0x824>)
   12a50:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
   12a52:	4b89      	ldr	r3, [pc, #548]	; (12c78 <basic_init+0x828>)
   12a54:	6818      	ldr	r0, [r3, #0]
   12a56:	3008      	adds	r0, #8
   12a58:	4b88      	ldr	r3, [pc, #544]	; (12c7c <basic_init+0x82c>)
   12a5a:	699b      	ldr	r3, [r3, #24]
   12a5c:	079b      	lsls	r3, r3, #30
   12a5e:	d501      	bpl.n	12a64 <basic_init+0x614>
   12a60:	f000 fccb 	bl	133fa <basic_init+0xfaa>
   12a64:	230b      	movs	r3, #11
   12a66:	2119      	movs	r1, #25
   12a68:	220d      	movs	r2, #13
   12a6a:	0149      	lsls	r1, r1, #5
   12a6c:	02db      	lsls	r3, r3, #11
   12a6e:	430a      	orrs	r2, r1
   12a70:	431a      	orrs	r2, r3
   12a72:	498e      	ldr	r1, [pc, #568]	; (12cac <basic_init+0x85c>)
   12a74:	4b7f      	ldr	r3, [pc, #508]	; (12c74 <basic_init+0x824>)
   12a76:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   12a78:	4b7f      	ldr	r3, [pc, #508]	; (12c78 <basic_init+0x828>)
   12a7a:	6818      	ldr	r0, [r3, #0]
   12a7c:	3008      	adds	r0, #8
   12a7e:	4b7f      	ldr	r3, [pc, #508]	; (12c7c <basic_init+0x82c>)
   12a80:	699b      	ldr	r3, [r3, #24]
   12a82:	079b      	lsls	r3, r3, #30
   12a84:	d501      	bpl.n	12a8a <basic_init+0x63a>
   12a86:	f000 fcbd 	bl	13404 <basic_init+0xfb4>
   12a8a:	231f      	movs	r3, #31
   12a8c:	213f      	movs	r1, #63	; 0x3f
   12a8e:	221f      	movs	r2, #31
   12a90:	241f      	movs	r4, #31
   12a92:	46a0      	mov	r8, r4
   12a94:	0149      	lsls	r1, r1, #5
   12a96:	02db      	lsls	r3, r3, #11
   12a98:	430a      	orrs	r2, r1
   12a9a:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   12a9c:	4984      	ldr	r1, [pc, #528]	; (12cb0 <basic_init+0x860>)
   12a9e:	4f75      	ldr	r7, [pc, #468]	; (12c74 <basic_init+0x824>)
   12aa0:	47b8      	blx	r7
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   12aa2:	4e75      	ldr	r6, [pc, #468]	; (12c78 <basic_init+0x828>)
   12aa4:	6830      	ldr	r0, [r6, #0]
   12aa6:	3008      	adds	r0, #8
   12aa8:	25fc      	movs	r5, #252	; 0xfc
   12aaa:	00ed      	lsls	r5, r5, #3
   12aac:	4642      	mov	r2, r8
   12aae:	432a      	orrs	r2, r5
   12ab0:	4c80      	ldr	r4, [pc, #512]	; (12cb4 <basic_init+0x864>)
   12ab2:	4322      	orrs	r2, r4
   12ab4:	4980      	ldr	r1, [pc, #512]	; (12cb8 <basic_init+0x868>)
   12ab6:	47b8      	blx	r7
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   12ab8:	6830      	ldr	r0, [r6, #0]
   12aba:	3008      	adds	r0, #8
   12abc:	4642      	mov	r2, r8
   12abe:	432a      	orrs	r2, r5
   12ac0:	4322      	orrs	r2, r4
   12ac2:	497e      	ldr	r1, [pc, #504]	; (12cbc <basic_init+0x86c>)
   12ac4:	47b8      	blx	r7
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   12ac6:	6830      	ldr	r0, [r6, #0]
   12ac8:	3008      	adds	r0, #8
   12aca:	4b6c      	ldr	r3, [pc, #432]	; (12c7c <basic_init+0x82c>)
   12acc:	699b      	ldr	r3, [r3, #24]
   12ace:	079b      	lsls	r3, r3, #30
   12ad0:	d501      	bpl.n	12ad6 <basic_init+0x686>
   12ad2:	f000 fc9c 	bl	1340e <basic_init+0xfbe>
   12ad6:	2226      	movs	r2, #38	; 0x26
   12ad8:	2313      	movs	r3, #19
   12ada:	0152      	lsls	r2, r2, #5
   12adc:	02d9      	lsls	r1, r3, #11
   12ade:	431a      	orrs	r2, r3
   12ae0:	430a      	orrs	r2, r1
   12ae2:	4977      	ldr	r1, [pc, #476]	; (12cc0 <basic_init+0x870>)
   12ae4:	4b63      	ldr	r3, [pc, #396]	; (12c74 <basic_init+0x824>)
   12ae6:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   12ae8:	4b63      	ldr	r3, [pc, #396]	; (12c78 <basic_init+0x828>)
   12aea:	6818      	ldr	r0, [r3, #0]
   12aec:	3008      	adds	r0, #8
   12aee:	4b63      	ldr	r3, [pc, #396]	; (12c7c <basic_init+0x82c>)
   12af0:	699b      	ldr	r3, [r3, #24]
   12af2:	079b      	lsls	r3, r3, #30
   12af4:	d501      	bpl.n	12afa <basic_init+0x6aa>
   12af6:	f000 fc8e 	bl	13416 <basic_init+0xfc6>
   12afa:	231f      	movs	r3, #31
   12afc:	213f      	movs	r1, #63	; 0x3f
   12afe:	221f      	movs	r2, #31
   12b00:	241f      	movs	r4, #31
   12b02:	46a0      	mov	r8, r4
   12b04:	0149      	lsls	r1, r1, #5
   12b06:	02db      	lsls	r3, r3, #11
   12b08:	430a      	orrs	r2, r1
   12b0a:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   12b0c:	496d      	ldr	r1, [pc, #436]	; (12cc4 <basic_init+0x874>)
   12b0e:	4f59      	ldr	r7, [pc, #356]	; (12c74 <basic_init+0x824>)
   12b10:	47b8      	blx	r7
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   12b12:	4e59      	ldr	r6, [pc, #356]	; (12c78 <basic_init+0x828>)
   12b14:	6830      	ldr	r0, [r6, #0]
   12b16:	3008      	adds	r0, #8
   12b18:	25fc      	movs	r5, #252	; 0xfc
   12b1a:	00ed      	lsls	r5, r5, #3
   12b1c:	4642      	mov	r2, r8
   12b1e:	432a      	orrs	r2, r5
   12b20:	4c64      	ldr	r4, [pc, #400]	; (12cb4 <basic_init+0x864>)
   12b22:	4322      	orrs	r2, r4
   12b24:	4968      	ldr	r1, [pc, #416]	; (12cc8 <basic_init+0x878>)
   12b26:	47b8      	blx	r7
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   12b28:	6830      	ldr	r0, [r6, #0]
   12b2a:	3008      	adds	r0, #8
   12b2c:	4642      	mov	r2, r8
   12b2e:	432a      	orrs	r2, r5
   12b30:	4322      	orrs	r2, r4
   12b32:	4966      	ldr	r1, [pc, #408]	; (12ccc <basic_init+0x87c>)
   12b34:	47b8      	blx	r7
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   12b36:	6830      	ldr	r0, [r6, #0]
   12b38:	3008      	adds	r0, #8
   12b3a:	4b50      	ldr	r3, [pc, #320]	; (12c7c <basic_init+0x82c>)
   12b3c:	699b      	ldr	r3, [r3, #24]
   12b3e:	079b      	lsls	r3, r3, #30
   12b40:	d501      	bpl.n	12b46 <basic_init+0x6f6>
   12b42:	f000 fc6d 	bl	13420 <basic_init+0xfd0>
   12b46:	2226      	movs	r2, #38	; 0x26
   12b48:	2313      	movs	r3, #19
   12b4a:	0152      	lsls	r2, r2, #5
   12b4c:	02d9      	lsls	r1, r3, #11
   12b4e:	431a      	orrs	r2, r3
   12b50:	430a      	orrs	r2, r1
   12b52:	495f      	ldr	r1, [pc, #380]	; (12cd0 <basic_init+0x880>)
   12b54:	4b47      	ldr	r3, [pc, #284]	; (12c74 <basic_init+0x824>)
   12b56:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   12b58:	4c47      	ldr	r4, [pc, #284]	; (12c78 <basic_init+0x828>)
   12b5a:	6820      	ldr	r0, [r4, #0]
   12b5c:	3008      	adds	r0, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   12b5e:	2229      	movs	r2, #41	; 0x29
   12b60:	21b6      	movs	r1, #182	; 0xb6
   12b62:	4d4e      	ldr	r5, [pc, #312]	; (12c9c <basic_init+0x84c>)
   12b64:	47a8      	blx	r5
    style_init_reset(&styles->btn);
   12b66:	6820      	ldr	r0, [r4, #0]
   12b68:	3010      	adds	r0, #16
   12b6a:	4b47      	ldr	r3, [pc, #284]	; (12c88 <basic_init+0x838>)
   12b6c:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   12b6e:	6820      	ldr	r0, [r4, #0]
   12b70:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   12b72:	4a58      	ldr	r2, [pc, #352]	; (12cd4 <basic_init+0x884>)
   12b74:	2101      	movs	r1, #1
   12b76:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   12b78:	6820      	ldr	r0, [r4, #0]
   12b7a:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   12b7c:	22ff      	movs	r2, #255	; 0xff
   12b7e:	212c      	movs	r1, #44	; 0x2c
   12b80:	4b55      	ldr	r3, [pc, #340]	; (12cd8 <basic_init+0x888>)
   12b82:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
   12b84:	6820      	ldr	r0, [r4, #0]
   12b86:	3010      	adds	r0, #16
   12b88:	4b3c      	ldr	r3, [pc, #240]	; (12c7c <basic_init+0x82c>)
   12b8a:	699b      	ldr	r3, [r3, #24]
   12b8c:	079b      	lsls	r3, r3, #30
   12b8e:	d501      	bpl.n	12b94 <basic_init+0x744>
   12b90:	f000 fc4a 	bl	13428 <basic_init+0xfd8>
   12b94:	230b      	movs	r3, #11
   12b96:	2118      	movs	r1, #24
   12b98:	220e      	movs	r2, #14
   12b9a:	0149      	lsls	r1, r1, #5
   12b9c:	02db      	lsls	r3, r3, #11
   12b9e:	430a      	orrs	r2, r1
   12ba0:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   12ba2:	2129      	movs	r1, #41	; 0x29
   12ba4:	4b33      	ldr	r3, [pc, #204]	; (12c74 <basic_init+0x824>)
   12ba6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   12ba8:	4b33      	ldr	r3, [pc, #204]	; (12c78 <basic_init+0x828>)
   12baa:	6818      	ldr	r0, [r3, #0]
   12bac:	3010      	adds	r0, #16
   12bae:	4b33      	ldr	r3, [pc, #204]	; (12c7c <basic_init+0x82c>)
   12bb0:	699b      	ldr	r3, [r3, #24]
   12bb2:	079b      	lsls	r3, r3, #30
   12bb4:	d401      	bmi.n	12bba <basic_init+0x76a>
   12bb6:	f000 fc3c 	bl	13432 <basic_init+0xfe2>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   12bba:	4d30      	ldr	r5, [pc, #192]	; (12c7c <basic_init+0x82c>)
   12bbc:	796a      	ldrb	r2, [r5, #5]
   12bbe:	08d2      	lsrs	r2, r2, #3
   12bc0:	0093      	lsls	r3, r2, #2
   12bc2:	189b      	adds	r3, r3, r2
   12bc4:	009a      	lsls	r2, r3, #2
   12bc6:	189b      	adds	r3, r3, r2
   12bc8:	4a44      	ldr	r2, [pc, #272]	; (12cdc <basic_init+0x88c>)
   12bca:	4694      	mov	ip, r2
   12bcc:	4463      	add	r3, ip
   12bce:	021a      	lsls	r2, r3, #8
   12bd0:	18d2      	adds	r2, r2, r3
   12bd2:	01d2      	lsls	r2, r2, #7
   12bd4:	18d2      	adds	r2, r2, r3
   12bd6:	0dd2      	lsrs	r2, r2, #23
   12bd8:	211f      	movs	r1, #31
   12bda:	400a      	ands	r2, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   12bdc:	88ac      	ldrh	r4, [r5, #4]
   12bde:	0564      	lsls	r4, r4, #21
   12be0:	0ea3      	lsrs	r3, r4, #26
   12be2:	009c      	lsls	r4, r3, #2
   12be4:	18e4      	adds	r4, r4, r3
   12be6:	00a3      	lsls	r3, r4, #2
   12be8:	18e4      	adds	r4, r4, r3
   12bea:	4b3d      	ldr	r3, [pc, #244]	; (12ce0 <basic_init+0x890>)
   12bec:	469c      	mov	ip, r3
   12bee:	4464      	add	r4, ip
   12bf0:	0223      	lsls	r3, r4, #8
   12bf2:	191b      	adds	r3, r3, r4
   12bf4:	01db      	lsls	r3, r3, #7
   12bf6:	191b      	adds	r3, r3, r4
   12bf8:	00db      	lsls	r3, r3, #3
   12bfa:	0e9b      	lsrs	r3, r3, #26
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   12bfc:	792c      	ldrb	r4, [r5, #4]
   12bfe:	06e4      	lsls	r4, r4, #27
   12c00:	0ee5      	lsrs	r5, r4, #27
   12c02:	00ac      	lsls	r4, r5, #2
   12c04:	1964      	adds	r4, r4, r5
   12c06:	00a5      	lsls	r5, r4, #2
   12c08:	1964      	adds	r4, r4, r5
   12c0a:	4d34      	ldr	r5, [pc, #208]	; (12cdc <basic_init+0x88c>)
   12c0c:	46ac      	mov	ip, r5
   12c0e:	4464      	add	r4, ip
   12c10:	0225      	lsls	r5, r4, #8
   12c12:	192d      	adds	r5, r5, r4
   12c14:	01ed      	lsls	r5, r5, #7
   12c16:	192c      	adds	r4, r5, r4
   12c18:	0de4      	lsrs	r4, r4, #23
   12c1a:	4021      	ands	r1, r4
   12c1c:	015b      	lsls	r3, r3, #5
   12c1e:	02d2      	lsls	r2, r2, #11
   12c20:	430b      	orrs	r3, r1
   12c22:	431a      	orrs	r2, r3
   12c24:	4919      	ldr	r1, [pc, #100]	; (12c8c <basic_init+0x83c>)
   12c26:	4f13      	ldr	r7, [pc, #76]	; (12c74 <basic_init+0x824>)
   12c28:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
   12c2a:	4e13      	ldr	r6, [pc, #76]	; (12c78 <basic_init+0x828>)
   12c2c:	6830      	ldr	r0, [r6, #0]
   12c2e:	3010      	adds	r0, #16
   12c30:	4d12      	ldr	r5, [pc, #72]	; (12c7c <basic_init+0x82c>)
   12c32:	88aa      	ldrh	r2, [r5, #4]
   12c34:	212a      	movs	r1, #42	; 0x2a
   12c36:	31ff      	adds	r1, #255	; 0xff
   12c38:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
   12c3a:	6834      	ldr	r4, [r6, #0]
   12c3c:	3410      	adds	r4, #16
   12c3e:	88a8      	ldrh	r0, [r5, #4]
   12c40:	214c      	movs	r1, #76	; 0x4c
   12c42:	4b13      	ldr	r3, [pc, #76]	; (12c90 <basic_init+0x840>)
   12c44:	4798      	blx	r3
   12c46:	1c02      	adds	r2, r0, #0
   12c48:	4912      	ldr	r1, [pc, #72]	; (12c94 <basic_init+0x844>)
   12c4a:	0020      	movs	r0, r4
   12c4c:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
   12c4e:	6830      	ldr	r0, [r6, #0]
   12c50:	3010      	adds	r0, #16
   12c52:	69ab      	ldr	r3, [r5, #24]
   12c54:	079b      	lsls	r3, r3, #30
   12c56:	d501      	bpl.n	12c5c <basic_init+0x80c>
   12c58:	f000 fc15 	bl	13486 <basic_init+0x1036>
   12c5c:	230b      	movs	r3, #11
   12c5e:	2118      	movs	r1, #24
   12c60:	220e      	movs	r2, #14
   12c62:	0149      	lsls	r1, r1, #5
   12c64:	02db      	lsls	r3, r3, #11
   12c66:	430a      	orrs	r2, r1
   12c68:	431a      	orrs	r2, r3
   12c6a:	490b      	ldr	r1, [pc, #44]	; (12c98 <basic_init+0x848>)
   12c6c:	4b01      	ldr	r3, [pc, #4]	; (12c74 <basic_init+0x824>)
   12c6e:	4798      	blx	r3
   12c70:	e038      	b.n	12ce4 <basic_init+0x894>
   12c72:	46c0      	nop			; (mov r8, r8)
   12c74:	00004ded 	.word	0x00004ded
   12c78:	20004c38 	.word	0x20004c38
   12c7c:	20004c3c 	.word	0x20004c3c
   12c80:	00008089 	.word	0x00008089
   12c84:	000080a9 	.word	0x000080a9
   12c88:	0001242d 	.word	0x0001242d
   12c8c:	00001029 	.word	0x00001029
   12c90:	00010275 	.word	0x00010275
   12c94:	00001129 	.word	0x00001129
   12c98:	00002029 	.word	0x00002029
   12c9c:	00004c8d 	.word	0x00004c8d
   12ca0:	00001239 	.word	0x00001239
   12ca4:	00001039 	.word	0x00001039
   12ca8:	00001139 	.word	0x00001139
   12cac:	00002039 	.word	0x00002039
   12cb0:	00009089 	.word	0x00009089
   12cb4:	fffff800 	.word	0xfffff800
   12cb8:	00008189 	.word	0x00008189
   12cbc:	00009189 	.word	0x00009189
   12cc0:	0000a089 	.word	0x0000a089
   12cc4:	000090a9 	.word	0x000090a9
   12cc8:	000081a9 	.word	0x000081a9
   12ccc:	000091a9 	.word	0x000091a9
   12cd0:	0000a0a9 	.word	0x0000a0a9
   12cd4:	00007fff 	.word	0x00007fff
   12cd8:	00004f4d 	.word	0x00004f4d
   12cdc:	00001bda 	.word	0x00001bda
   12ce0:	0000389a 	.word	0x0000389a
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
   12ce4:	4bf1      	ldr	r3, [pc, #964]	; (130ac <basic_init+0xc5c>)
   12ce6:	6818      	ldr	r0, [r3, #0]
   12ce8:	3010      	adds	r0, #16
   12cea:	4bf1      	ldr	r3, [pc, #964]	; (130b0 <basic_init+0xc60>)
   12cec:	699b      	ldr	r3, [r3, #24]
   12cee:	079b      	lsls	r3, r3, #30
   12cf0:	d500      	bpl.n	12cf4 <basic_init+0x8a4>
   12cf2:	e3cd      	b.n	13490 <basic_init+0x1040>
   12cf4:	2222      	movs	r2, #34	; 0x22
   12cf6:	2311      	movs	r3, #17
   12cf8:	0152      	lsls	r2, r2, #5
   12cfa:	02d9      	lsls	r1, r3, #11
   12cfc:	431a      	orrs	r2, r3
   12cfe:	430a      	orrs	r2, r1
   12d00:	49ec      	ldr	r1, [pc, #944]	; (130b4 <basic_init+0xc64>)
   12d02:	4ded      	ldr	r5, [pc, #948]	; (130b8 <basic_init+0xc68>)
   12d04:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
   12d06:	4ce9      	ldr	r4, [pc, #932]	; (130ac <basic_init+0xc5c>)
   12d08:	6820      	ldr	r0, [r4, #0]
   12d0a:	3010      	adds	r0, #16
   12d0c:	4ee8      	ldr	r6, [pc, #928]	; (130b0 <basic_init+0xc60>)
   12d0e:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   12d10:	2139      	movs	r1, #57	; 0x39
   12d12:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
   12d14:	6820      	ldr	r0, [r4, #0]
   12d16:	3010      	adds	r0, #16
   12d18:	88b2      	ldrh	r2, [r6, #4]
   12d1a:	49e8      	ldr	r1, [pc, #928]	; (130bc <basic_init+0xc6c>)
   12d1c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
   12d1e:	6820      	ldr	r0, [r4, #0]
   12d20:	3010      	adds	r0, #16
   12d22:	69b3      	ldr	r3, [r6, #24]
   12d24:	079b      	lsls	r3, r3, #30
   12d26:	d500      	bpl.n	12d2a <basic_init+0x8da>
   12d28:	e3b5      	b.n	13496 <basic_init+0x1046>
   12d2a:	2210      	movs	r2, #16
   12d2c:	2308      	movs	r3, #8
   12d2e:	0152      	lsls	r2, r2, #5
   12d30:	02d9      	lsls	r1, r3, #11
   12d32:	431a      	orrs	r2, r3
   12d34:	430a      	orrs	r2, r1
   12d36:	49e2      	ldr	r1, [pc, #904]	; (130c0 <basic_init+0xc70>)
   12d38:	4bdf      	ldr	r3, [pc, #892]	; (130b8 <basic_init+0xc68>)
   12d3a:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   12d3c:	4bdb      	ldr	r3, [pc, #876]	; (130ac <basic_init+0xc5c>)
   12d3e:	681c      	ldr	r4, [r3, #0]
   12d40:	3410      	adds	r4, #16
   12d42:	2000      	movs	r0, #0
   12d44:	4bdf      	ldr	r3, [pc, #892]	; (130c4 <basic_init+0xc74>)
   12d46:	4798      	blx	r3
   12d48:	3028      	adds	r0, #40	; 0x28
   12d4a:	0040      	lsls	r0, r0, #1
   12d4c:	2340      	movs	r3, #64	; 0x40
   12d4e:	33ff      	adds	r3, #255	; 0xff
   12d50:	2201      	movs	r2, #1
   12d52:	4298      	cmp	r0, r3
   12d54:	d900      	bls.n	12d58 <basic_init+0x908>
   12d56:	e3a1      	b.n	1349c <basic_init+0x104c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   12d58:	2130      	movs	r1, #48	; 0x30
   12d5a:	0020      	movs	r0, r4
   12d5c:	4bda      	ldr	r3, [pc, #872]	; (130c8 <basic_init+0xc78>)
   12d5e:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
   12d60:	4cd2      	ldr	r4, [pc, #840]	; (130ac <basic_init+0xc5c>)
   12d62:	6820      	ldr	r0, [r4, #0]
   12d64:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   12d66:	2200      	movs	r2, #0
   12d68:	219e      	movs	r1, #158	; 0x9e
   12d6a:	0049      	lsls	r1, r1, #1
   12d6c:	4bd7      	ldr	r3, [pc, #860]	; (130cc <basic_init+0xc7c>)
   12d6e:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   12d70:	6820      	ldr	r0, [r4, #0]
   12d72:	3010      	adds	r0, #16
   12d74:	4bce      	ldr	r3, [pc, #824]	; (130b0 <basic_init+0xc60>)
   12d76:	699b      	ldr	r3, [r3, #24]
   12d78:	079b      	lsls	r3, r3, #30
   12d7a:	d500      	bpl.n	12d7e <basic_init+0x92e>
   12d7c:	e398      	b.n	134b0 <basic_init+0x1060>
   12d7e:	231f      	movs	r3, #31
   12d80:	213f      	movs	r1, #63	; 0x3f
   12d82:	221f      	movs	r2, #31
   12d84:	0149      	lsls	r1, r1, #5
   12d86:	02db      	lsls	r3, r3, #11
   12d88:	430a      	orrs	r2, r1
   12d8a:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   12d8c:	49d0      	ldr	r1, [pc, #832]	; (130d0 <basic_init+0xc80>)
   12d8e:	4bca      	ldr	r3, [pc, #808]	; (130b8 <basic_init+0xc68>)
   12d90:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   12d92:	4bc6      	ldr	r3, [pc, #792]	; (130ac <basic_init+0xc5c>)
   12d94:	6818      	ldr	r0, [r3, #0]
   12d96:	3010      	adds	r0, #16
   12d98:	4bc5      	ldr	r3, [pc, #788]	; (130b0 <basic_init+0xc60>)
   12d9a:	699b      	ldr	r3, [r3, #24]
   12d9c:	079b      	lsls	r3, r3, #30
   12d9e:	d500      	bpl.n	12da2 <basic_init+0x952>
   12da0:	e38a      	b.n	134b8 <basic_init+0x1068>
   12da2:	231f      	movs	r3, #31
   12da4:	213f      	movs	r1, #63	; 0x3f
   12da6:	221f      	movs	r2, #31
   12da8:	241f      	movs	r4, #31
   12daa:	46a0      	mov	r8, r4
   12dac:	0149      	lsls	r1, r1, #5
   12dae:	02db      	lsls	r3, r3, #11
   12db0:	430a      	orrs	r2, r1
   12db2:	431a      	orrs	r2, r3
   12db4:	49c7      	ldr	r1, [pc, #796]	; (130d4 <basic_init+0xc84>)
   12db6:	4dc0      	ldr	r5, [pc, #768]	; (130b8 <basic_init+0xc68>)
   12db8:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   12dba:	4cbc      	ldr	r4, [pc, #752]	; (130ac <basic_init+0xc5c>)
   12dbc:	6820      	ldr	r0, [r4, #0]
   12dbe:	3010      	adds	r0, #16
   12dc0:	27fc      	movs	r7, #252	; 0xfc
   12dc2:	00ff      	lsls	r7, r7, #3
   12dc4:	4642      	mov	r2, r8
   12dc6:	433a      	orrs	r2, r7
   12dc8:	4ec3      	ldr	r6, [pc, #780]	; (130d8 <basic_init+0xc88>)
   12dca:	4332      	orrs	r2, r6
   12dcc:	49c3      	ldr	r1, [pc, #780]	; (130dc <basic_init+0xc8c>)
   12dce:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   12dd0:	6820      	ldr	r0, [r4, #0]
   12dd2:	3010      	adds	r0, #16
   12dd4:	4642      	mov	r2, r8
   12dd6:	433a      	orrs	r2, r7
   12dd8:	4332      	orrs	r2, r6
   12dda:	49c1      	ldr	r1, [pc, #772]	; (130e0 <basic_init+0xc90>)
   12ddc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   12dde:	6820      	ldr	r0, [r4, #0]
   12de0:	3010      	adds	r0, #16
   12de2:	4bc0      	ldr	r3, [pc, #768]	; (130e4 <basic_init+0xc94>)
   12de4:	881a      	ldrh	r2, [r3, #0]
   12de6:	49c0      	ldr	r1, [pc, #768]	; (130e8 <basic_init+0xc98>)
   12de8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   12dea:	6820      	ldr	r0, [r4, #0]
   12dec:	3010      	adds	r0, #16
   12dee:	4bb0      	ldr	r3, [pc, #704]	; (130b0 <basic_init+0xc60>)
   12df0:	699b      	ldr	r3, [r3, #24]
   12df2:	079b      	lsls	r3, r3, #30
   12df4:	d500      	bpl.n	12df8 <basic_init+0x9a8>
   12df6:	e363      	b.n	134c0 <basic_init+0x1070>
   12df8:	231f      	movs	r3, #31
   12dfa:	213f      	movs	r1, #63	; 0x3f
   12dfc:	221f      	movs	r2, #31
   12dfe:	0149      	lsls	r1, r1, #5
   12e00:	02db      	lsls	r3, r3, #11
   12e02:	430a      	orrs	r2, r1
   12e04:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   12e06:	49b9      	ldr	r1, [pc, #740]	; (130ec <basic_init+0xc9c>)
   12e08:	4bab      	ldr	r3, [pc, #684]	; (130b8 <basic_init+0xc68>)
   12e0a:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   12e0c:	4ba7      	ldr	r3, [pc, #668]	; (130ac <basic_init+0xc5c>)
   12e0e:	6818      	ldr	r0, [r3, #0]
   12e10:	3010      	adds	r0, #16
   12e12:	4ba7      	ldr	r3, [pc, #668]	; (130b0 <basic_init+0xc60>)
   12e14:	699b      	ldr	r3, [r3, #24]
   12e16:	079b      	lsls	r3, r3, #30
   12e18:	d500      	bpl.n	12e1c <basic_init+0x9cc>
   12e1a:	e355      	b.n	134c8 <basic_init+0x1078>
   12e1c:	231f      	movs	r3, #31
   12e1e:	213f      	movs	r1, #63	; 0x3f
   12e20:	221f      	movs	r2, #31
   12e22:	261f      	movs	r6, #31
   12e24:	0149      	lsls	r1, r1, #5
   12e26:	02db      	lsls	r3, r3, #11
   12e28:	430a      	orrs	r2, r1
   12e2a:	431a      	orrs	r2, r3
   12e2c:	49b0      	ldr	r1, [pc, #704]	; (130f0 <basic_init+0xca0>)
   12e2e:	4da2      	ldr	r5, [pc, #648]	; (130b8 <basic_init+0xc68>)
   12e30:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
   12e32:	4c9e      	ldr	r4, [pc, #632]	; (130ac <basic_init+0xc5c>)
   12e34:	6820      	ldr	r0, [r4, #0]
   12e36:	3010      	adds	r0, #16
   12e38:	23fc      	movs	r3, #252	; 0xfc
   12e3a:	00db      	lsls	r3, r3, #3
   12e3c:	4699      	mov	r9, r3
   12e3e:	001a      	movs	r2, r3
   12e40:	4332      	orrs	r2, r6
   12e42:	4fa5      	ldr	r7, [pc, #660]	; (130d8 <basic_init+0xc88>)
   12e44:	433a      	orrs	r2, r7
   12e46:	49aa      	ldr	r1, [pc, #680]	; (130f0 <basic_init+0xca0>)
   12e48:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   12e4a:	6820      	ldr	r0, [r4, #0]
   12e4c:	3010      	adds	r0, #16
   12e4e:	464a      	mov	r2, r9
   12e50:	4332      	orrs	r2, r6
   12e52:	433a      	orrs	r2, r7
   12e54:	49a7      	ldr	r1, [pc, #668]	; (130f4 <basic_init+0xca4>)
   12e56:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   12e58:	6820      	ldr	r0, [r4, #0]
   12e5a:	3010      	adds	r0, #16
   12e5c:	4ba1      	ldr	r3, [pc, #644]	; (130e4 <basic_init+0xc94>)
   12e5e:	881a      	ldrh	r2, [r3, #0]
   12e60:	49a5      	ldr	r1, [pc, #660]	; (130f8 <basic_init+0xca8>)
   12e62:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   12e64:	6820      	ldr	r0, [r4, #0]
   12e66:	3010      	adds	r0, #16
   12e68:	4b91      	ldr	r3, [pc, #580]	; (130b0 <basic_init+0xc60>)
   12e6a:	699b      	ldr	r3, [r3, #24]
   12e6c:	079b      	lsls	r3, r3, #30
   12e6e:	d500      	bpl.n	12e72 <basic_init+0xa22>
   12e70:	e32e      	b.n	134d0 <basic_init+0x1080>
   12e72:	231f      	movs	r3, #31
   12e74:	213f      	movs	r1, #63	; 0x3f
   12e76:	221f      	movs	r2, #31
   12e78:	0149      	lsls	r1, r1, #5
   12e7a:	02db      	lsls	r3, r3, #11
   12e7c:	430a      	orrs	r2, r1
   12e7e:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   12e80:	2179      	movs	r1, #121	; 0x79
   12e82:	4b8d      	ldr	r3, [pc, #564]	; (130b8 <basic_init+0xc68>)
   12e84:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   12e86:	4b89      	ldr	r3, [pc, #548]	; (130ac <basic_init+0xc5c>)
   12e88:	6818      	ldr	r0, [r3, #0]
   12e8a:	3010      	adds	r0, #16
   12e8c:	4b88      	ldr	r3, [pc, #544]	; (130b0 <basic_init+0xc60>)
   12e8e:	699b      	ldr	r3, [r3, #24]
   12e90:	079b      	lsls	r3, r3, #30
   12e92:	d500      	bpl.n	12e96 <basic_init+0xa46>
   12e94:	e320      	b.n	134d8 <basic_init+0x1088>
   12e96:	231f      	movs	r3, #31
   12e98:	213f      	movs	r1, #63	; 0x3f
   12e9a:	221f      	movs	r2, #31
   12e9c:	241f      	movs	r4, #31
   12e9e:	46a0      	mov	r8, r4
   12ea0:	0149      	lsls	r1, r1, #5
   12ea2:	02db      	lsls	r3, r3, #11
   12ea4:	430a      	orrs	r2, r1
   12ea6:	431a      	orrs	r2, r3
   12ea8:	4994      	ldr	r1, [pc, #592]	; (130fc <basic_init+0xcac>)
   12eaa:	4d83      	ldr	r5, [pc, #524]	; (130b8 <basic_init+0xc68>)
   12eac:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   12eae:	4c7f      	ldr	r4, [pc, #508]	; (130ac <basic_init+0xc5c>)
   12eb0:	6820      	ldr	r0, [r4, #0]
   12eb2:	3010      	adds	r0, #16
   12eb4:	27fc      	movs	r7, #252	; 0xfc
   12eb6:	00ff      	lsls	r7, r7, #3
   12eb8:	4642      	mov	r2, r8
   12eba:	433a      	orrs	r2, r7
   12ebc:	4e86      	ldr	r6, [pc, #536]	; (130d8 <basic_init+0xc88>)
   12ebe:	4332      	orrs	r2, r6
   12ec0:	217a      	movs	r1, #122	; 0x7a
   12ec2:	31ff      	adds	r1, #255	; 0xff
   12ec4:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   12ec6:	6820      	ldr	r0, [r4, #0]
   12ec8:	3010      	adds	r0, #16
   12eca:	4642      	mov	r2, r8
   12ecc:	433a      	orrs	r2, r7
   12ece:	4332      	orrs	r2, r6
   12ed0:	498b      	ldr	r1, [pc, #556]	; (13100 <basic_init+0xcb0>)
   12ed2:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   12ed4:	6820      	ldr	r0, [r4, #0]
   12ed6:	3010      	adds	r0, #16
   12ed8:	4b82      	ldr	r3, [pc, #520]	; (130e4 <basic_init+0xc94>)
   12eda:	881a      	ldrh	r2, [r3, #0]
   12edc:	4989      	ldr	r1, [pc, #548]	; (13104 <basic_init+0xcb4>)
   12ede:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   12ee0:	6824      	ldr	r4, [r4, #0]
   12ee2:	3410      	adds	r4, #16
   12ee4:	2000      	movs	r0, #0
   12ee6:	4b77      	ldr	r3, [pc, #476]	; (130c4 <basic_init+0xc74>)
   12ee8:	4798      	blx	r3
   12eea:	0083      	lsls	r3, r0, #2
   12eec:	181b      	adds	r3, r3, r0
   12eee:	00db      	lsls	r3, r3, #3
   12ef0:	3350      	adds	r3, #80	; 0x50
   12ef2:	2140      	movs	r1, #64	; 0x40
   12ef4:	31ff      	adds	r1, #255	; 0xff
   12ef6:	2201      	movs	r2, #1
   12ef8:	428b      	cmp	r3, r1
   12efa:	d900      	bls.n	12efe <basic_init+0xaae>
   12efc:	e2f0      	b.n	134e0 <basic_init+0x1090>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   12efe:	2112      	movs	r1, #18
   12f00:	0020      	movs	r0, r4
   12f02:	4b71      	ldr	r3, [pc, #452]	; (130c8 <basic_init+0xc78>)
   12f04:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   12f06:	4b69      	ldr	r3, [pc, #420]	; (130ac <basic_init+0xc5c>)
   12f08:	681c      	ldr	r4, [r3, #0]
   12f0a:	3410      	adds	r4, #16
   12f0c:	2000      	movs	r0, #0
   12f0e:	4b6d      	ldr	r3, [pc, #436]	; (130c4 <basic_init+0xc74>)
   12f10:	4798      	blx	r3
   12f12:	0083      	lsls	r3, r0, #2
   12f14:	181b      	adds	r3, r3, r0
   12f16:	00db      	lsls	r3, r3, #3
   12f18:	3350      	adds	r3, #80	; 0x50
   12f1a:	2140      	movs	r1, #64	; 0x40
   12f1c:	31ff      	adds	r1, #255	; 0xff
   12f1e:	2201      	movs	r2, #1
   12f20:	428b      	cmp	r3, r1
   12f22:	d900      	bls.n	12f26 <basic_init+0xad6>
   12f24:	e2e9      	b.n	134fa <basic_init+0x10aa>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   12f26:	2113      	movs	r1, #19
   12f28:	0020      	movs	r0, r4
   12f2a:	4b67      	ldr	r3, [pc, #412]	; (130c8 <basic_init+0xc78>)
   12f2c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   12f2e:	4b5f      	ldr	r3, [pc, #380]	; (130ac <basic_init+0xc5c>)
   12f30:	681c      	ldr	r4, [r3, #0]
   12f32:	3410      	adds	r4, #16
   12f34:	2000      	movs	r0, #0
   12f36:	4b63      	ldr	r3, [pc, #396]	; (130c4 <basic_init+0xc74>)
   12f38:	4798      	blx	r3
   12f3a:	0103      	lsls	r3, r0, #4
   12f3c:	1a18      	subs	r0, r3, r0
   12f3e:	3050      	adds	r0, #80	; 0x50
   12f40:	2340      	movs	r3, #64	; 0x40
   12f42:	33ff      	adds	r3, #255	; 0xff
   12f44:	2201      	movs	r2, #1
   12f46:	4298      	cmp	r0, r3
   12f48:	d900      	bls.n	12f4c <basic_init+0xafc>
   12f4a:	e2e3      	b.n	13514 <basic_init+0x10c4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   12f4c:	2110      	movs	r1, #16
   12f4e:	0020      	movs	r0, r4
   12f50:	4b5d      	ldr	r3, [pc, #372]	; (130c8 <basic_init+0xc78>)
   12f52:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   12f54:	4b55      	ldr	r3, [pc, #340]	; (130ac <basic_init+0xc5c>)
   12f56:	681c      	ldr	r4, [r3, #0]
   12f58:	3410      	adds	r4, #16
   12f5a:	2000      	movs	r0, #0
   12f5c:	4b59      	ldr	r3, [pc, #356]	; (130c4 <basic_init+0xc74>)
   12f5e:	4798      	blx	r3
   12f60:	0103      	lsls	r3, r0, #4
   12f62:	1a18      	subs	r0, r3, r0
   12f64:	3050      	adds	r0, #80	; 0x50
   12f66:	2340      	movs	r3, #64	; 0x40
   12f68:	33ff      	adds	r3, #255	; 0xff
   12f6a:	2201      	movs	r2, #1
   12f6c:	4298      	cmp	r0, r3
   12f6e:	d900      	bls.n	12f72 <basic_init+0xb22>
   12f70:	e2e8      	b.n	13544 <basic_init+0x10f4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   12f72:	2111      	movs	r1, #17
   12f74:	0020      	movs	r0, r4
   12f76:	4b54      	ldr	r3, [pc, #336]	; (130c8 <basic_init+0xc78>)
   12f78:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   12f7a:	4b4c      	ldr	r3, [pc, #304]	; (130ac <basic_init+0xc5c>)
   12f7c:	681c      	ldr	r4, [r3, #0]
   12f7e:	3410      	adds	r4, #16
   12f80:	2000      	movs	r0, #0
   12f82:	4b50      	ldr	r3, [pc, #320]	; (130c4 <basic_init+0xc74>)
   12f84:	4798      	blx	r3
   12f86:	0083      	lsls	r3, r0, #2
   12f88:	181b      	adds	r3, r3, r0
   12f8a:	009b      	lsls	r3, r3, #2
   12f8c:	3350      	adds	r3, #80	; 0x50
   12f8e:	2140      	movs	r1, #64	; 0x40
   12f90:	31ff      	adds	r1, #255	; 0xff
   12f92:	2201      	movs	r2, #1
   12f94:	428b      	cmp	r3, r1
   12f96:	d900      	bls.n	12f9a <basic_init+0xb4a>
   12f98:	e2df      	b.n	1355a <basic_init+0x110a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   12f9a:	2114      	movs	r1, #20
   12f9c:	0020      	movs	r0, r4
   12f9e:	4d4a      	ldr	r5, [pc, #296]	; (130c8 <basic_init+0xc78>)
   12fa0:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, 3);
   12fa2:	4c42      	ldr	r4, [pc, #264]	; (130ac <basic_init+0xc5c>)
   12fa4:	6820      	ldr	r0, [r4, #0]
   12fa6:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   12fa8:	2203      	movs	r2, #3
   12faa:	2140      	movs	r1, #64	; 0x40
   12fac:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
   12fae:	6820      	ldr	r0, [r4, #0]
   12fb0:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   12fb2:	2200      	movs	r2, #0
   12fb4:	214c      	movs	r1, #76	; 0x4c
   12fb6:	4e45      	ldr	r6, [pc, #276]	; (130cc <basic_init+0xc7c>)
   12fb8:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
   12fba:	6820      	ldr	r0, [r4, #0]
   12fbc:	3010      	adds	r0, #16
   12fbe:	227f      	movs	r2, #127	; 0x7f
   12fc0:	2193      	movs	r1, #147	; 0x93
   12fc2:	0089      	lsls	r1, r1, #2
   12fc4:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
   12fc6:	6820      	ldr	r0, [r4, #0]
   12fc8:	3010      	adds	r0, #16
   12fca:	4f39      	ldr	r7, [pc, #228]	; (130b0 <basic_init+0xc60>)
   12fcc:	88ba      	ldrh	r2, [r7, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   12fce:	2149      	movs	r1, #73	; 0x49
   12fd0:	4e39      	ldr	r6, [pc, #228]	; (130b8 <basic_init+0xc68>)
   12fd2:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
   12fd4:	6820      	ldr	r0, [r4, #0]
   12fd6:	3010      	adds	r0, #16
   12fd8:	88fa      	ldrh	r2, [r7, #6]
   12fda:	494b      	ldr	r1, [pc, #300]	; (13108 <basic_init+0xcb8>)
   12fdc:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   12fde:	6820      	ldr	r0, [r4, #0]
   12fe0:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   12fe2:	2296      	movs	r2, #150	; 0x96
   12fe4:	21b0      	movs	r1, #176	; 0xb0
   12fe6:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
   12fe8:	6820      	ldr	r0, [r4, #0]
   12fea:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
   12fec:	223c      	movs	r2, #60	; 0x3c
   12fee:	21b5      	movs	r1, #181	; 0xb5
   12ff0:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   12ff2:	6820      	ldr	r0, [r4, #0]
   12ff4:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   12ff6:	2229      	movs	r2, #41	; 0x29
   12ff8:	21b6      	movs	r1, #182	; 0xb6
   12ffa:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   12ffc:	6820      	ldr	r0, [r4, #0]
   12ffe:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   13000:	224c      	movs	r2, #76	; 0x4c
   13002:	21b7      	movs	r1, #183	; 0xb7
   13004:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   13006:	6820      	ldr	r0, [r4, #0]
   13008:	3010      	adds	r0, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
   1300a:	2296      	movs	r2, #150	; 0x96
   1300c:	21b1      	movs	r1, #177	; 0xb1
   1300e:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
   13010:	6820      	ldr	r0, [r4, #0]
   13012:	3010      	adds	r0, #16
   13014:	2200      	movs	r2, #0
   13016:	493d      	ldr	r1, [pc, #244]	; (1310c <basic_init+0xcbc>)
   13018:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
   1301a:	6820      	ldr	r0, [r4, #0]
   1301c:	3014      	adds	r0, #20
   1301e:	4b3c      	ldr	r3, [pc, #240]	; (13110 <basic_init+0xcc0>)
   13020:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13022:	6824      	ldr	r4, [r4, #0]
   13024:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13026:	2000      	movs	r0, #0
   13028:	4b3a      	ldr	r3, [pc, #232]	; (13114 <basic_init+0xcc4>)
   1302a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1302c:	2832      	cmp	r0, #50	; 0x32
   1302e:	d900      	bls.n	13032 <basic_init+0xbe2>
   13030:	e2ad      	b.n	1358e <basic_init+0x113e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13032:	2000      	movs	r0, #0
   13034:	4b23      	ldr	r3, [pc, #140]	; (130c4 <basic_init+0xc74>)
   13036:	4798      	blx	r3
   13038:	0083      	lsls	r3, r0, #2
   1303a:	181b      	adds	r3, r3, r0
   1303c:	009b      	lsls	r3, r3, #2
   1303e:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   13040:	2140      	movs	r1, #64	; 0x40
   13042:	31ff      	adds	r1, #255	; 0xff
   13044:	2201      	movs	r2, #1
   13046:	428b      	cmp	r3, r1
   13048:	d900      	bls.n	1304c <basic_init+0xbfc>
   1304a:	e293      	b.n	13574 <basic_init+0x1124>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1304c:	2114      	movs	r1, #20
   1304e:	0020      	movs	r0, r4
   13050:	4b1d      	ldr	r3, [pc, #116]	; (130c8 <basic_init+0xc78>)
   13052:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
   13054:	4b15      	ldr	r3, [pc, #84]	; (130ac <basic_init+0xc5c>)
   13056:	6818      	ldr	r0, [r3, #0]
   13058:	3018      	adds	r0, #24
   1305a:	4b2d      	ldr	r3, [pc, #180]	; (13110 <basic_init+0xcc0>)
   1305c:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   1305e:	2000      	movs	r0, #0
   13060:	4b2c      	ldr	r3, [pc, #176]	; (13114 <basic_init+0xcc4>)
   13062:	4798      	blx	r3
   13064:	2832      	cmp	r0, #50	; 0x32
   13066:	d900      	bls.n	1306a <basic_init+0xc1a>
   13068:	e2b8      	b.n	135dc <basic_init+0x118c>
   1306a:	2000      	movs	r0, #0
   1306c:	4b15      	ldr	r3, [pc, #84]	; (130c4 <basic_init+0xc74>)
   1306e:	4798      	blx	r3
   13070:	0003      	movs	r3, r0
   13072:	0080      	lsls	r0, r0, #2
   13074:	18c0      	adds	r0, r0, r3
   13076:	0040      	lsls	r0, r0, #1
   13078:	3050      	adds	r0, #80	; 0x50
   1307a:	2340      	movs	r3, #64	; 0x40
   1307c:	33ff      	adds	r3, #255	; 0xff
   1307e:	2401      	movs	r4, #1
   13080:	4298      	cmp	r0, r3
   13082:	d900      	bls.n	13086 <basic_init+0xc36>
   13084:	e29d      	b.n	135c2 <basic_init+0x1172>
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   13086:	4e09      	ldr	r6, [pc, #36]	; (130ac <basic_init+0xc5c>)
   13088:	6830      	ldr	r0, [r6, #0]
   1308a:	3018      	adds	r0, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1308c:	0022      	movs	r2, r4
   1308e:	2112      	movs	r1, #18
   13090:	4d0d      	ldr	r5, [pc, #52]	; (130c8 <basic_init+0xc78>)
   13092:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13094:	6830      	ldr	r0, [r6, #0]
   13096:	3018      	adds	r0, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13098:	0022      	movs	r2, r4
   1309a:	2113      	movs	r1, #19
   1309c:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   1309e:	6830      	ldr	r0, [r6, #0]
   130a0:	3018      	adds	r0, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   130a2:	0022      	movs	r2, r4
   130a4:	2110      	movs	r1, #16
   130a6:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   130a8:	6830      	ldr	r0, [r6, #0]
   130aa:	e035      	b.n	13118 <basic_init+0xcc8>
   130ac:	20004c38 	.word	0x20004c38
   130b0:	20004c3c 	.word	0x20004c3c
   130b4:	00002129 	.word	0x00002129
   130b8:	00004ded 	.word	0x00004ded
   130bc:	00001039 	.word	0x00001039
   130c0:	00002039 	.word	0x00002039
   130c4:	0000f5fd 	.word	0x0000f5fd
   130c8:	00004c8d 	.word	0x00004c8d
   130cc:	00004f4d 	.word	0x00004f4d
   130d0:	00008089 	.word	0x00008089
   130d4:	00009089 	.word	0x00009089
   130d8:	fffff800 	.word	0xfffff800
   130dc:	00008189 	.word	0x00008189
   130e0:	00009189 	.word	0x00009189
   130e4:	0001ca08 	.word	0x0001ca08
   130e8:	0000a089 	.word	0x0000a089
   130ec:	000080a9 	.word	0x000080a9
   130f0:	000090a9 	.word	0x000090a9
   130f4:	000091a9 	.word	0x000091a9
   130f8:	0000a0a9 	.word	0x0000a0a9
   130fc:	00001079 	.word	0x00001079
   13100:	00001179 	.word	0x00001179
   13104:	00002079 	.word	0x00002079
   13108:	00000449 	.word	0x00000449
   1310c:	000010b1 	.word	0x000010b1
   13110:	0001242d 	.word	0x0001242d
   13114:	0000f619 	.word	0x0000f619
   13118:	3018      	adds	r0, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1311a:	0022      	movs	r2, r4
   1311c:	2111      	movs	r1, #17
   1311e:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   13120:	6830      	ldr	r0, [r6, #0]
   13122:	3018      	adds	r0, #24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13124:	0022      	movs	r2, r4
   13126:	2114      	movs	r1, #20
   13128:	47a8      	blx	r5
}
   1312a:	bc0c      	pop	{r2, r3}
   1312c:	4690      	mov	r8, r2
   1312e:	4699      	mov	r9, r3
   13130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13132:	231d      	movs	r3, #29
   13134:	213b      	movs	r1, #59	; 0x3b
   13136:	221e      	movs	r2, #30
   13138:	f7ff f9a1 	bl	1247e <basic_init+0x2e>
   1313c:	2307      	movs	r3, #7
   1313e:	210f      	movs	r1, #15
   13140:	2208      	movs	r2, #8
   13142:	f7ff f9ae 	bl	124a2 <basic_init+0x52>
   13146:	2307      	movs	r3, #7
   13148:	210f      	movs	r1, #15
   1314a:	2208      	movs	r2, #8
   1314c:	f7ff f9bb 	bl	124c6 <basic_init+0x76>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   13150:	2000      	movs	r0, #0
   13152:	4bf6      	ldr	r3, [pc, #984]	; (1352c <basic_init+0x10dc>)
   13154:	4798      	blx	r3
   13156:	300a      	adds	r0, #10
   13158:	00c0      	lsls	r0, r0, #3
   1315a:	21a0      	movs	r1, #160	; 0xa0
   1315c:	4bf4      	ldr	r3, [pc, #976]	; (13530 <basic_init+0x10e0>)
   1315e:	4798      	blx	r3
   13160:	b202      	sxth	r2, r0
   13162:	f7ff f9d4 	bl	1250e <basic_init+0xbe>
   13166:	231f      	movs	r3, #31
   13168:	213f      	movs	r1, #63	; 0x3f
   1316a:	221f      	movs	r2, #31
   1316c:	f7ff f9e5 	bl	1253a <basic_init+0xea>
   13170:	231a      	movs	r3, #26
   13172:	2137      	movs	r1, #55	; 0x37
   13174:	221c      	movs	r2, #28
   13176:	f7ff f9f3 	bl	12560 <basic_init+0x110>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   1317a:	2000      	movs	r0, #0
   1317c:	4beb      	ldr	r3, [pc, #940]	; (1352c <basic_init+0x10dc>)
   1317e:	4798      	blx	r3
   13180:	3028      	adds	r0, #40	; 0x28
   13182:	0040      	lsls	r0, r0, #1
   13184:	21a0      	movs	r1, #160	; 0xa0
   13186:	4bea      	ldr	r3, [pc, #936]	; (13530 <basic_init+0x10e0>)
   13188:	4798      	blx	r3
   1318a:	b202      	sxth	r2, r0
   1318c:	f7ff fa09 	bl	125a2 <basic_init+0x152>
   13190:	2307      	movs	r3, #7
   13192:	210f      	movs	r1, #15
   13194:	2208      	movs	r2, #8
   13196:	f7ff fa1f 	bl	125d8 <basic_init+0x188>
   1319a:	2307      	movs	r3, #7
   1319c:	210f      	movs	r1, #15
   1319e:	2208      	movs	r2, #8
   131a0:	f7ff fa33 	bl	1260a <basic_init+0x1ba>
   131a4:	2307      	movs	r3, #7
   131a6:	210f      	movs	r1, #15
   131a8:	2208      	movs	r2, #8
   131aa:	f7ff fa41 	bl	12630 <basic_init+0x1e0>
   131ae:	2307      	movs	r3, #7
   131b0:	210f      	movs	r1, #15
   131b2:	2208      	movs	r2, #8
   131b4:	f7ff fa4f 	bl	12656 <basic_init+0x206>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   131b8:	2000      	movs	r0, #0
   131ba:	4bdc      	ldr	r3, [pc, #880]	; (1352c <basic_init+0x10dc>)
   131bc:	4798      	blx	r3
   131be:	0103      	lsls	r3, r0, #4
   131c0:	1a18      	subs	r0, r3, r0
   131c2:	3050      	adds	r0, #80	; 0x50
   131c4:	2340      	movs	r3, #64	; 0x40
   131c6:	33ff      	adds	r3, #255	; 0xff
   131c8:	2401      	movs	r4, #1
   131ca:	4298      	cmp	r0, r3
   131cc:	d801      	bhi.n	131d2 <basic_init+0xd82>
   131ce:	f7ff fa67 	bl	126a0 <basic_init+0x250>
   131d2:	2000      	movs	r0, #0
   131d4:	4bd5      	ldr	r3, [pc, #852]	; (1352c <basic_init+0x10dc>)
   131d6:	4798      	blx	r3
   131d8:	0103      	lsls	r3, r0, #4
   131da:	1a18      	subs	r0, r3, r0
   131dc:	3050      	adds	r0, #80	; 0x50
   131de:	21a0      	movs	r1, #160	; 0xa0
   131e0:	4bd3      	ldr	r3, [pc, #844]	; (13530 <basic_init+0x10e0>)
   131e2:	4798      	blx	r3
   131e4:	b284      	uxth	r4, r0
   131e6:	f7ff fa5b 	bl	126a0 <basic_init+0x250>
   131ea:	2000      	movs	r0, #0
   131ec:	4bcf      	ldr	r3, [pc, #828]	; (1352c <basic_init+0x10dc>)
   131ee:	4798      	blx	r3
   131f0:	0103      	lsls	r3, r0, #4
   131f2:	1a18      	subs	r0, r3, r0
   131f4:	0040      	lsls	r0, r0, #1
   131f6:	3050      	adds	r0, #80	; 0x50
   131f8:	21a0      	movs	r1, #160	; 0xa0
   131fa:	4bcd      	ldr	r3, [pc, #820]	; (13530 <basic_init+0x10e0>)
   131fc:	4798      	blx	r3
   131fe:	b284      	uxth	r4, r0
   13200:	f7ff fa4e 	bl	126a0 <basic_init+0x250>
   13204:	2000      	movs	r0, #0
   13206:	4bc9      	ldr	r3, [pc, #804]	; (1352c <basic_init+0x10dc>)
   13208:	4798      	blx	r3
   1320a:	3028      	adds	r0, #40	; 0x28
   1320c:	0040      	lsls	r0, r0, #1
   1320e:	21a0      	movs	r1, #160	; 0xa0
   13210:	4bc7      	ldr	r3, [pc, #796]	; (13530 <basic_init+0x10e0>)
   13212:	4798      	blx	r3
   13214:	b282      	uxth	r2, r0
   13216:	f7ff fa50 	bl	126ba <basic_init+0x26a>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1321a:	2000      	movs	r0, #0
   1321c:	4bc3      	ldr	r3, [pc, #780]	; (1352c <basic_init+0x10dc>)
   1321e:	4798      	blx	r3
   13220:	0103      	lsls	r3, r0, #4
   13222:	1a18      	subs	r0, r3, r0
   13224:	3050      	adds	r0, #80	; 0x50
   13226:	2340      	movs	r3, #64	; 0x40
   13228:	33ff      	adds	r3, #255	; 0xff
   1322a:	2401      	movs	r4, #1
   1322c:	4298      	cmp	r0, r3
   1322e:	d801      	bhi.n	13234 <basic_init+0xde4>
   13230:	f7ff fa61 	bl	126f6 <basic_init+0x2a6>
   13234:	2000      	movs	r0, #0
   13236:	4bbd      	ldr	r3, [pc, #756]	; (1352c <basic_init+0x10dc>)
   13238:	4798      	blx	r3
   1323a:	0103      	lsls	r3, r0, #4
   1323c:	1a18      	subs	r0, r3, r0
   1323e:	3050      	adds	r0, #80	; 0x50
   13240:	21a0      	movs	r1, #160	; 0xa0
   13242:	4bbb      	ldr	r3, [pc, #748]	; (13530 <basic_init+0x10e0>)
   13244:	4798      	blx	r3
   13246:	b284      	uxth	r4, r0
   13248:	f7ff fa55 	bl	126f6 <basic_init+0x2a6>
   1324c:	2000      	movs	r0, #0
   1324e:	4bb7      	ldr	r3, [pc, #732]	; (1352c <basic_init+0x10dc>)
   13250:	4798      	blx	r3
   13252:	0103      	lsls	r3, r0, #4
   13254:	1a18      	subs	r0, r3, r0
   13256:	0040      	lsls	r0, r0, #1
   13258:	3050      	adds	r0, #80	; 0x50
   1325a:	21a0      	movs	r1, #160	; 0xa0
   1325c:	4bb4      	ldr	r3, [pc, #720]	; (13530 <basic_init+0x10e0>)
   1325e:	4798      	blx	r3
   13260:	b284      	uxth	r4, r0
   13262:	f7ff fa48 	bl	126f6 <basic_init+0x2a6>
   13266:	2000      	movs	r0, #0
   13268:	4bb0      	ldr	r3, [pc, #704]	; (1352c <basic_init+0x10dc>)
   1326a:	4798      	blx	r3
   1326c:	3028      	adds	r0, #40	; 0x28
   1326e:	0040      	lsls	r0, r0, #1
   13270:	21a0      	movs	r1, #160	; 0xa0
   13272:	4baf      	ldr	r3, [pc, #700]	; (13530 <basic_init+0x10e0>)
   13274:	4798      	blx	r3
   13276:	b282      	uxth	r2, r0
   13278:	f7ff fa4a 	bl	12710 <basic_init+0x2c0>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1327c:	2000      	movs	r0, #0
   1327e:	4bab      	ldr	r3, [pc, #684]	; (1352c <basic_init+0x10dc>)
   13280:	4798      	blx	r3
   13282:	0103      	lsls	r3, r0, #4
   13284:	1a18      	subs	r0, r3, r0
   13286:	3050      	adds	r0, #80	; 0x50
   13288:	2340      	movs	r3, #64	; 0x40
   1328a:	33ff      	adds	r3, #255	; 0xff
   1328c:	2401      	movs	r4, #1
   1328e:	4298      	cmp	r0, r3
   13290:	d801      	bhi.n	13296 <basic_init+0xe46>
   13292:	f7ff fa5b 	bl	1274c <basic_init+0x2fc>
   13296:	2000      	movs	r0, #0
   13298:	4ba4      	ldr	r3, [pc, #656]	; (1352c <basic_init+0x10dc>)
   1329a:	4798      	blx	r3
   1329c:	0103      	lsls	r3, r0, #4
   1329e:	1a18      	subs	r0, r3, r0
   132a0:	3050      	adds	r0, #80	; 0x50
   132a2:	21a0      	movs	r1, #160	; 0xa0
   132a4:	4ba2      	ldr	r3, [pc, #648]	; (13530 <basic_init+0x10e0>)
   132a6:	4798      	blx	r3
   132a8:	b284      	uxth	r4, r0
   132aa:	f7ff fa4f 	bl	1274c <basic_init+0x2fc>
   132ae:	2000      	movs	r0, #0
   132b0:	4b9e      	ldr	r3, [pc, #632]	; (1352c <basic_init+0x10dc>)
   132b2:	4798      	blx	r3
   132b4:	0103      	lsls	r3, r0, #4
   132b6:	1a18      	subs	r0, r3, r0
   132b8:	0040      	lsls	r0, r0, #1
   132ba:	3050      	adds	r0, #80	; 0x50
   132bc:	21a0      	movs	r1, #160	; 0xa0
   132be:	4b9c      	ldr	r3, [pc, #624]	; (13530 <basic_init+0x10e0>)
   132c0:	4798      	blx	r3
   132c2:	b284      	uxth	r4, r0
   132c4:	f7ff fa42 	bl	1274c <basic_init+0x2fc>
   132c8:	2000      	movs	r0, #0
   132ca:	4b98      	ldr	r3, [pc, #608]	; (1352c <basic_init+0x10dc>)
   132cc:	4798      	blx	r3
   132ce:	3028      	adds	r0, #40	; 0x28
   132d0:	0040      	lsls	r0, r0, #1
   132d2:	21a0      	movs	r1, #160	; 0xa0
   132d4:	4b96      	ldr	r3, [pc, #600]	; (13530 <basic_init+0x10e0>)
   132d6:	4798      	blx	r3
   132d8:	b282      	uxth	r2, r0
   132da:	f7ff fa44 	bl	12766 <basic_init+0x316>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   132de:	2000      	movs	r0, #0
   132e0:	4b92      	ldr	r3, [pc, #584]	; (1352c <basic_init+0x10dc>)
   132e2:	4798      	blx	r3
   132e4:	0103      	lsls	r3, r0, #4
   132e6:	1a18      	subs	r0, r3, r0
   132e8:	3050      	adds	r0, #80	; 0x50
   132ea:	2340      	movs	r3, #64	; 0x40
   132ec:	33ff      	adds	r3, #255	; 0xff
   132ee:	2401      	movs	r4, #1
   132f0:	4298      	cmp	r0, r3
   132f2:	d801      	bhi.n	132f8 <basic_init+0xea8>
   132f4:	f7ff fa55 	bl	127a2 <basic_init+0x352>
   132f8:	2000      	movs	r0, #0
   132fa:	4b8c      	ldr	r3, [pc, #560]	; (1352c <basic_init+0x10dc>)
   132fc:	4798      	blx	r3
   132fe:	0103      	lsls	r3, r0, #4
   13300:	1a18      	subs	r0, r3, r0
   13302:	3050      	adds	r0, #80	; 0x50
   13304:	21a0      	movs	r1, #160	; 0xa0
   13306:	4b8a      	ldr	r3, [pc, #552]	; (13530 <basic_init+0x10e0>)
   13308:	4798      	blx	r3
   1330a:	b284      	uxth	r4, r0
   1330c:	f7ff fa49 	bl	127a2 <basic_init+0x352>
   13310:	2000      	movs	r0, #0
   13312:	4b86      	ldr	r3, [pc, #536]	; (1352c <basic_init+0x10dc>)
   13314:	4798      	blx	r3
   13316:	0103      	lsls	r3, r0, #4
   13318:	1a18      	subs	r0, r3, r0
   1331a:	0040      	lsls	r0, r0, #1
   1331c:	3050      	adds	r0, #80	; 0x50
   1331e:	21a0      	movs	r1, #160	; 0xa0
   13320:	4b83      	ldr	r3, [pc, #524]	; (13530 <basic_init+0x10e0>)
   13322:	4798      	blx	r3
   13324:	b284      	uxth	r4, r0
   13326:	f7ff fa3c 	bl	127a2 <basic_init+0x352>
   1332a:	2000      	movs	r0, #0
   1332c:	4b7f      	ldr	r3, [pc, #508]	; (1352c <basic_init+0x10dc>)
   1332e:	4798      	blx	r3
   13330:	3028      	adds	r0, #40	; 0x28
   13332:	0040      	lsls	r0, r0, #1
   13334:	21a0      	movs	r1, #160	; 0xa0
   13336:	4b7e      	ldr	r3, [pc, #504]	; (13530 <basic_init+0x10e0>)
   13338:	4798      	blx	r3
   1333a:	b282      	uxth	r2, r0
   1333c:	f7ff fa3e 	bl	127bc <basic_init+0x36c>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   13340:	2000      	movs	r0, #0
   13342:	4b7a      	ldr	r3, [pc, #488]	; (1352c <basic_init+0x10dc>)
   13344:	4798      	blx	r3
   13346:	0103      	lsls	r3, r0, #4
   13348:	1a18      	subs	r0, r3, r0
   1334a:	3050      	adds	r0, #80	; 0x50
   1334c:	2340      	movs	r3, #64	; 0x40
   1334e:	33ff      	adds	r3, #255	; 0xff
   13350:	2201      	movs	r2, #1
   13352:	4298      	cmp	r0, r3
   13354:	d801      	bhi.n	1335a <basic_init+0xf0a>
   13356:	f7ff fa4f 	bl	127f8 <basic_init+0x3a8>
   1335a:	2000      	movs	r0, #0
   1335c:	4b73      	ldr	r3, [pc, #460]	; (1352c <basic_init+0x10dc>)
   1335e:	4798      	blx	r3
   13360:	0103      	lsls	r3, r0, #4
   13362:	1a18      	subs	r0, r3, r0
   13364:	3050      	adds	r0, #80	; 0x50
   13366:	21a0      	movs	r1, #160	; 0xa0
   13368:	4b71      	ldr	r3, [pc, #452]	; (13530 <basic_init+0x10e0>)
   1336a:	4798      	blx	r3
   1336c:	b202      	sxth	r2, r0
   1336e:	f7ff fa43 	bl	127f8 <basic_init+0x3a8>
   13372:	2000      	movs	r0, #0
   13374:	4b6d      	ldr	r3, [pc, #436]	; (1352c <basic_init+0x10dc>)
   13376:	4798      	blx	r3
   13378:	0103      	lsls	r3, r0, #4
   1337a:	1a18      	subs	r0, r3, r0
   1337c:	0040      	lsls	r0, r0, #1
   1337e:	3050      	adds	r0, #80	; 0x50
   13380:	21a0      	movs	r1, #160	; 0xa0
   13382:	4b6b      	ldr	r3, [pc, #428]	; (13530 <basic_init+0x10e0>)
   13384:	4798      	blx	r3
   13386:	b202      	sxth	r2, r0
   13388:	f7ff fa36 	bl	127f8 <basic_init+0x3a8>
   1338c:	231a      	movs	r3, #26
   1338e:	2135      	movs	r1, #53	; 0x35
   13390:	221b      	movs	r2, #27
   13392:	f7ff fa73 	bl	1287c <basic_init+0x42c>
   13396:	231b      	movs	r3, #27
   13398:	2139      	movs	r1, #57	; 0x39
   1339a:	221d      	movs	r2, #29
   1339c:	f7ff fa81 	bl	128a2 <basic_init+0x452>
   133a0:	2306      	movs	r3, #6
   133a2:	2110      	movs	r1, #16
   133a4:	2209      	movs	r2, #9
   133a6:	f7ff fa8f 	bl	128c8 <basic_init+0x478>
   133aa:	2306      	movs	r3, #6
   133ac:	2110      	movs	r1, #16
   133ae:	2209      	movs	r2, #9
   133b0:	f7ff fa9d 	bl	128ee <basic_init+0x49e>
   133b4:	2306      	movs	r3, #6
   133b6:	2110      	movs	r1, #16
   133b8:	2209      	movs	r2, #9
   133ba:	f7ff faab 	bl	12914 <basic_init+0x4c4>
   133be:	2306      	movs	r3, #6
   133c0:	2110      	movs	r1, #16
   133c2:	2209      	movs	r2, #9
   133c4:	f7ff fab9 	bl	1293a <basic_init+0x4ea>
   133c8:	231d      	movs	r3, #29
   133ca:	213b      	movs	r1, #59	; 0x3b
   133cc:	221d      	movs	r2, #29
   133ce:	f7ff facb 	bl	12968 <basic_init+0x518>
   133d2:	231f      	movs	r3, #31
   133d4:	213f      	movs	r1, #63	; 0x3f
   133d6:	221f      	movs	r2, #31
   133d8:	f7ff fae9 	bl	129ae <basic_init+0x55e>
   133dc:	2319      	movs	r3, #25
   133de:	2133      	movs	r1, #51	; 0x33
   133e0:	2219      	movs	r2, #25
   133e2:	f7ff fb08 	bl	129f6 <basic_init+0x5a6>
   133e6:	2307      	movs	r3, #7
   133e8:	210f      	movs	r1, #15
   133ea:	2208      	movs	r2, #8
   133ec:	f7ff fb16 	bl	12a1c <basic_init+0x5cc>
   133f0:	2307      	movs	r3, #7
   133f2:	210f      	movs	r1, #15
   133f4:	2208      	movs	r2, #8
   133f6:	f7ff fb25 	bl	12a44 <basic_init+0x5f4>
   133fa:	231a      	movs	r3, #26
   133fc:	2137      	movs	r1, #55	; 0x37
   133fe:	221c      	movs	r2, #28
   13400:	f7ff fb33 	bl	12a6a <basic_init+0x61a>
   13404:	2307      	movs	r3, #7
   13406:	210f      	movs	r1, #15
   13408:	2208      	movs	r2, #8
   1340a:	f7ff fb41 	bl	12a90 <basic_init+0x640>
   1340e:	222a      	movs	r2, #42	; 0x2a
   13410:	2315      	movs	r3, #21
   13412:	f7ff fb62 	bl	12ada <basic_init+0x68a>
   13416:	2307      	movs	r3, #7
   13418:	210f      	movs	r1, #15
   1341a:	2208      	movs	r2, #8
   1341c:	f7ff fb70 	bl	12b00 <basic_init+0x6b0>
   13420:	222a      	movs	r2, #42	; 0x2a
   13422:	2315      	movs	r3, #21
   13424:	f7ff fb91 	bl	12b4a <basic_init+0x6fa>
   13428:	231f      	movs	r3, #31
   1342a:	213f      	movs	r1, #63	; 0x3f
   1342c:	221f      	movs	r2, #31
   1342e:	f7ff fbb4 	bl	12b9a <basic_init+0x74a>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   13432:	4e40      	ldr	r6, [pc, #256]	; (13534 <basic_init+0x10e4>)
   13434:	7972      	ldrb	r2, [r6, #5]
   13436:	08d2      	lsrs	r2, r2, #3
   13438:	254c      	movs	r5, #76	; 0x4c
   1343a:	436a      	muls	r2, r5
   1343c:	4b3e      	ldr	r3, [pc, #248]	; (13538 <basic_init+0x10e8>)
   1343e:	18d3      	adds	r3, r2, r3
   13440:	021a      	lsls	r2, r3, #8
   13442:	18d2      	adds	r2, r2, r3
   13444:	01d2      	lsls	r2, r2, #7
   13446:	18d2      	adds	r2, r2, r3
   13448:	0dd2      	lsrs	r2, r2, #23
   1344a:	211f      	movs	r1, #31
   1344c:	400a      	ands	r2, r1
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   1344e:	88b4      	ldrh	r4, [r6, #4]
   13450:	0564      	lsls	r4, r4, #21
   13452:	0ea4      	lsrs	r4, r4, #26
   13454:	436c      	muls	r4, r5
   13456:	4b39      	ldr	r3, [pc, #228]	; (1353c <basic_init+0x10ec>)
   13458:	469c      	mov	ip, r3
   1345a:	4464      	add	r4, ip
   1345c:	0223      	lsls	r3, r4, #8
   1345e:	191b      	adds	r3, r3, r4
   13460:	01db      	lsls	r3, r3, #7
   13462:	191b      	adds	r3, r3, r4
   13464:	00db      	lsls	r3, r3, #3
   13466:	0e9b      	lsrs	r3, r3, #26
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   13468:	7934      	ldrb	r4, [r6, #4]
   1346a:	06e4      	lsls	r4, r4, #27
   1346c:	0ee4      	lsrs	r4, r4, #27
   1346e:	4365      	muls	r5, r4
   13470:	4c33      	ldr	r4, [pc, #204]	; (13540 <basic_init+0x10f0>)
   13472:	46a4      	mov	ip, r4
   13474:	4465      	add	r5, ip
   13476:	022c      	lsls	r4, r5, #8
   13478:	1964      	adds	r4, r4, r5
   1347a:	01e4      	lsls	r4, r4, #7
   1347c:	1964      	adds	r4, r4, r5
   1347e:	0de4      	lsrs	r4, r4, #23
   13480:	4021      	ands	r1, r4
   13482:	f7ff fbcb 	bl	12c1c <basic_init+0x7cc>
   13486:	231f      	movs	r3, #31
   13488:	213f      	movs	r1, #63	; 0x3f
   1348a:	221f      	movs	r2, #31
   1348c:	f7ff fbe9 	bl	12c62 <basic_init+0x812>
   13490:	2233      	movs	r2, #51	; 0x33
   13492:	2319      	movs	r3, #25
   13494:	e430      	b.n	12cf8 <basic_init+0x8a8>
   13496:	2222      	movs	r2, #34	; 0x22
   13498:	2311      	movs	r3, #17
   1349a:	e448      	b.n	12d2e <basic_init+0x8de>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   1349c:	2000      	movs	r0, #0
   1349e:	4b23      	ldr	r3, [pc, #140]	; (1352c <basic_init+0x10dc>)
   134a0:	4798      	blx	r3
   134a2:	3028      	adds	r0, #40	; 0x28
   134a4:	0040      	lsls	r0, r0, #1
   134a6:	21a0      	movs	r1, #160	; 0xa0
   134a8:	4b21      	ldr	r3, [pc, #132]	; (13530 <basic_init+0x10e0>)
   134aa:	4798      	blx	r3
   134ac:	b202      	sxth	r2, r0
   134ae:	e453      	b.n	12d58 <basic_init+0x908>
   134b0:	2306      	movs	r3, #6
   134b2:	2110      	movs	r1, #16
   134b4:	2209      	movs	r2, #9
   134b6:	e465      	b.n	12d84 <basic_init+0x934>
   134b8:	2306      	movs	r3, #6
   134ba:	2110      	movs	r1, #16
   134bc:	2209      	movs	r2, #9
   134be:	e473      	b.n	12da8 <basic_init+0x958>
   134c0:	2306      	movs	r3, #6
   134c2:	2110      	movs	r1, #16
   134c4:	2209      	movs	r2, #9
   134c6:	e49a      	b.n	12dfe <basic_init+0x9ae>
   134c8:	2306      	movs	r3, #6
   134ca:	2110      	movs	r1, #16
   134cc:	2209      	movs	r2, #9
   134ce:	e4a8      	b.n	12e22 <basic_init+0x9d2>
   134d0:	2306      	movs	r3, #6
   134d2:	2110      	movs	r1, #16
   134d4:	2209      	movs	r2, #9
   134d6:	e4cf      	b.n	12e78 <basic_init+0xa28>
   134d8:	2306      	movs	r3, #6
   134da:	2110      	movs	r1, #16
   134dc:	2209      	movs	r2, #9
   134de:	e4dd      	b.n	12e9c <basic_init+0xa4c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   134e0:	2000      	movs	r0, #0
   134e2:	4b12      	ldr	r3, [pc, #72]	; (1352c <basic_init+0x10dc>)
   134e4:	4798      	blx	r3
   134e6:	0003      	movs	r3, r0
   134e8:	0080      	lsls	r0, r0, #2
   134ea:	18c0      	adds	r0, r0, r3
   134ec:	00c0      	lsls	r0, r0, #3
   134ee:	3050      	adds	r0, #80	; 0x50
   134f0:	21a0      	movs	r1, #160	; 0xa0
   134f2:	4b0f      	ldr	r3, [pc, #60]	; (13530 <basic_init+0x10e0>)
   134f4:	4798      	blx	r3
   134f6:	b202      	sxth	r2, r0
   134f8:	e501      	b.n	12efe <basic_init+0xaae>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   134fa:	2000      	movs	r0, #0
   134fc:	4b0b      	ldr	r3, [pc, #44]	; (1352c <basic_init+0x10dc>)
   134fe:	4798      	blx	r3
   13500:	0003      	movs	r3, r0
   13502:	0080      	lsls	r0, r0, #2
   13504:	18c0      	adds	r0, r0, r3
   13506:	00c0      	lsls	r0, r0, #3
   13508:	3050      	adds	r0, #80	; 0x50
   1350a:	21a0      	movs	r1, #160	; 0xa0
   1350c:	4b08      	ldr	r3, [pc, #32]	; (13530 <basic_init+0x10e0>)
   1350e:	4798      	blx	r3
   13510:	b202      	sxth	r2, r0
   13512:	e508      	b.n	12f26 <basic_init+0xad6>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   13514:	2000      	movs	r0, #0
   13516:	4b05      	ldr	r3, [pc, #20]	; (1352c <basic_init+0x10dc>)
   13518:	4798      	blx	r3
   1351a:	0103      	lsls	r3, r0, #4
   1351c:	1a18      	subs	r0, r3, r0
   1351e:	3050      	adds	r0, #80	; 0x50
   13520:	21a0      	movs	r1, #160	; 0xa0
   13522:	4b03      	ldr	r3, [pc, #12]	; (13530 <basic_init+0x10e0>)
   13524:	4798      	blx	r3
   13526:	b202      	sxth	r2, r0
   13528:	e510      	b.n	12f4c <basic_init+0xafc>
   1352a:	46c0      	nop			; (mov r8, r8)
   1352c:	0000f5fd 	.word	0x0000f5fd
   13530:	00017961 	.word	0x00017961
   13534:	20004c3c 	.word	0x20004c3c
   13538:	000007b1 	.word	0x000007b1
   1353c:	000010c8 	.word	0x000010c8
   13540:	000009ca 	.word	0x000009ca
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   13544:	2000      	movs	r0, #0
   13546:	4b33      	ldr	r3, [pc, #204]	; (13614 <basic_init+0x11c4>)
   13548:	4798      	blx	r3
   1354a:	0103      	lsls	r3, r0, #4
   1354c:	1a18      	subs	r0, r3, r0
   1354e:	3050      	adds	r0, #80	; 0x50
   13550:	21a0      	movs	r1, #160	; 0xa0
   13552:	4b31      	ldr	r3, [pc, #196]	; (13618 <basic_init+0x11c8>)
   13554:	4798      	blx	r3
   13556:	b202      	sxth	r2, r0
   13558:	e50b      	b.n	12f72 <basic_init+0xb22>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   1355a:	2000      	movs	r0, #0
   1355c:	4b2d      	ldr	r3, [pc, #180]	; (13614 <basic_init+0x11c4>)
   1355e:	4798      	blx	r3
   13560:	0003      	movs	r3, r0
   13562:	0080      	lsls	r0, r0, #2
   13564:	18c0      	adds	r0, r0, r3
   13566:	0080      	lsls	r0, r0, #2
   13568:	3050      	adds	r0, #80	; 0x50
   1356a:	21a0      	movs	r1, #160	; 0xa0
   1356c:	4b2a      	ldr	r3, [pc, #168]	; (13618 <basic_init+0x11c8>)
   1356e:	4798      	blx	r3
   13570:	b202      	sxth	r2, r0
   13572:	e512      	b.n	12f9a <basic_init+0xb4a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   13574:	2000      	movs	r0, #0
   13576:	4b27      	ldr	r3, [pc, #156]	; (13614 <basic_init+0x11c4>)
   13578:	4798      	blx	r3
   1357a:	0003      	movs	r3, r0
   1357c:	0080      	lsls	r0, r0, #2
   1357e:	18c0      	adds	r0, r0, r3
   13580:	0080      	lsls	r0, r0, #2
   13582:	3050      	adds	r0, #80	; 0x50
   13584:	21a0      	movs	r1, #160	; 0xa0
   13586:	4b24      	ldr	r3, [pc, #144]	; (13618 <basic_init+0x11c8>)
   13588:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1358a:	b202      	sxth	r2, r0
   1358c:	e55e      	b.n	1304c <basic_init+0xbfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   1358e:	2000      	movs	r0, #0
   13590:	4b20      	ldr	r3, [pc, #128]	; (13614 <basic_init+0x11c4>)
   13592:	4798      	blx	r3
   13594:	0083      	lsls	r3, r0, #2
   13596:	181b      	adds	r3, r3, r0
   13598:	00db      	lsls	r3, r3, #3
   1359a:	3350      	adds	r3, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1359c:	2140      	movs	r1, #64	; 0x40
   1359e:	31ff      	adds	r1, #255	; 0xff
   135a0:	2201      	movs	r2, #1
   135a2:	428b      	cmp	r3, r1
   135a4:	d800      	bhi.n	135a8 <basic_init+0x1158>
   135a6:	e551      	b.n	1304c <basic_init+0xbfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   135a8:	2000      	movs	r0, #0
   135aa:	4b1a      	ldr	r3, [pc, #104]	; (13614 <basic_init+0x11c4>)
   135ac:	4798      	blx	r3
   135ae:	0003      	movs	r3, r0
   135b0:	0080      	lsls	r0, r0, #2
   135b2:	18c0      	adds	r0, r0, r3
   135b4:	00c0      	lsls	r0, r0, #3
   135b6:	3050      	adds	r0, #80	; 0x50
   135b8:	21a0      	movs	r1, #160	; 0xa0
   135ba:	4b17      	ldr	r3, [pc, #92]	; (13618 <basic_init+0x11c8>)
   135bc:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   135be:	b202      	sxth	r2, r0
   135c0:	e544      	b.n	1304c <basic_init+0xbfc>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   135c2:	2000      	movs	r0, #0
   135c4:	4b13      	ldr	r3, [pc, #76]	; (13614 <basic_init+0x11c4>)
   135c6:	4798      	blx	r3
   135c8:	0003      	movs	r3, r0
   135ca:	0080      	lsls	r0, r0, #2
   135cc:	18c0      	adds	r0, r0, r3
   135ce:	0040      	lsls	r0, r0, #1
   135d0:	3050      	adds	r0, #80	; 0x50
   135d2:	21a0      	movs	r1, #160	; 0xa0
   135d4:	4b10      	ldr	r3, [pc, #64]	; (13618 <basic_init+0x11c8>)
   135d6:	4798      	blx	r3
   135d8:	b204      	sxth	r4, r0
   135da:	e554      	b.n	13086 <basic_init+0xc36>
   135dc:	2000      	movs	r0, #0
   135de:	4b0d      	ldr	r3, [pc, #52]	; (13614 <basic_init+0x11c4>)
   135e0:	4798      	blx	r3
   135e2:	0003      	movs	r3, r0
   135e4:	0080      	lsls	r0, r0, #2
   135e6:	18c0      	adds	r0, r0, r3
   135e8:	0080      	lsls	r0, r0, #2
   135ea:	3050      	adds	r0, #80	; 0x50
   135ec:	2340      	movs	r3, #64	; 0x40
   135ee:	33ff      	adds	r3, #255	; 0xff
   135f0:	2401      	movs	r4, #1
   135f2:	4298      	cmp	r0, r3
   135f4:	d800      	bhi.n	135f8 <basic_init+0x11a8>
   135f6:	e546      	b.n	13086 <basic_init+0xc36>
   135f8:	2000      	movs	r0, #0
   135fa:	4b06      	ldr	r3, [pc, #24]	; (13614 <basic_init+0x11c4>)
   135fc:	4798      	blx	r3
   135fe:	0003      	movs	r3, r0
   13600:	0080      	lsls	r0, r0, #2
   13602:	18c0      	adds	r0, r0, r3
   13604:	0080      	lsls	r0, r0, #2
   13606:	3050      	adds	r0, #80	; 0x50
   13608:	21a0      	movs	r1, #160	; 0xa0
   1360a:	4b03      	ldr	r3, [pc, #12]	; (13618 <basic_init+0x11c8>)
   1360c:	4798      	blx	r3
   1360e:	b204      	sxth	r4, r0
   13610:	e539      	b.n	13086 <basic_init+0xc36>
   13612:	46c0      	nop			; (mov r8, r8)
   13614:	0000f5fd 	.word	0x0000f5fd
   13618:	00017961 	.word	0x00017961

0001361c <bar_init>:
{
   1361c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1361e:	46c6      	mov	lr, r8
   13620:	b500      	push	{lr}
    style_init_reset(&styles->bar_bg);
   13622:	4c49      	ldr	r4, [pc, #292]	; (13748 <bar_init+0x12c>)
   13624:	6820      	ldr	r0, [r4, #0]
   13626:	3024      	adds	r0, #36	; 0x24
   13628:	4b48      	ldr	r3, [pc, #288]	; (1374c <bar_init+0x130>)
   1362a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1362c:	6820      	ldr	r0, [r4, #0]
   1362e:	3024      	adds	r0, #36	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13630:	4a47      	ldr	r2, [pc, #284]	; (13750 <bar_init+0x134>)
   13632:	2101      	movs	r1, #1
   13634:	4b47      	ldr	r3, [pc, #284]	; (13754 <bar_init+0x138>)
   13636:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   13638:	6820      	ldr	r0, [r4, #0]
   1363a:	3024      	adds	r0, #36	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1363c:	22ff      	movs	r2, #255	; 0xff
   1363e:	212c      	movs	r1, #44	; 0x2c
   13640:	4b45      	ldr	r3, [pc, #276]	; (13758 <bar_init+0x13c>)
   13642:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   13644:	6820      	ldr	r0, [r4, #0]
   13646:	3024      	adds	r0, #36	; 0x24
   13648:	4b44      	ldr	r3, [pc, #272]	; (1375c <bar_init+0x140>)
   1364a:	699b      	ldr	r3, [r3, #24]
   1364c:	079b      	lsls	r3, r3, #30
   1364e:	d500      	bpl.n	13652 <bar_init+0x36>
   13650:	e06e      	b.n	13730 <bar_init+0x114>
   13652:	2308      	movs	r3, #8
   13654:	2112      	movs	r1, #18
   13656:	2209      	movs	r2, #9
   13658:	0149      	lsls	r1, r1, #5
   1365a:	02db      	lsls	r3, r3, #11
   1365c:	430a      	orrs	r2, r1
   1365e:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13660:	2129      	movs	r1, #41	; 0x29
   13662:	4b3f      	ldr	r3, [pc, #252]	; (13760 <bar_init+0x144>)
   13664:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   13666:	4b38      	ldr	r3, [pc, #224]	; (13748 <bar_init+0x12c>)
   13668:	6818      	ldr	r0, [r3, #0]
   1366a:	3024      	adds	r0, #36	; 0x24
   1366c:	4b3b      	ldr	r3, [pc, #236]	; (1375c <bar_init+0x140>)
   1366e:	699b      	ldr	r3, [r3, #24]
   13670:	079b      	lsls	r3, r3, #30
   13672:	d461      	bmi.n	13738 <bar_init+0x11c>
   13674:	231f      	movs	r3, #31
   13676:	213f      	movs	r1, #63	; 0x3f
   13678:	221f      	movs	r2, #31
   1367a:	0149      	lsls	r1, r1, #5
   1367c:	02db      	lsls	r3, r3, #11
   1367e:	430a      	orrs	r2, r1
   13680:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13682:	2179      	movs	r1, #121	; 0x79
   13684:	4d36      	ldr	r5, [pc, #216]	; (13760 <bar_init+0x144>)
   13686:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
   13688:	4c2f      	ldr	r4, [pc, #188]	; (13748 <bar_init+0x12c>)
   1368a:	6820      	ldr	r0, [r4, #0]
   1368c:	3024      	adds	r0, #36	; 0x24
   1368e:	4e33      	ldr	r6, [pc, #204]	; (1375c <bar_init+0x140>)
   13690:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   13692:	2149      	movs	r1, #73	; 0x49
   13694:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
   13696:	6820      	ldr	r0, [r4, #0]
   13698:	3024      	adds	r0, #36	; 0x24
   1369a:	88f2      	ldrh	r2, [r6, #6]
   1369c:	4931      	ldr	r1, [pc, #196]	; (13764 <bar_init+0x148>)
   1369e:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   136a0:	6820      	ldr	r0, [r4, #0]
   136a2:	3024      	adds	r0, #36	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   136a4:	2200      	movs	r2, #0
   136a6:	214c      	movs	r1, #76	; 0x4c
   136a8:	4b2b      	ldr	r3, [pc, #172]	; (13758 <bar_init+0x13c>)
   136aa:	4698      	mov	r8, r3
   136ac:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
   136ae:	6820      	ldr	r0, [r4, #0]
   136b0:	3024      	adds	r0, #36	; 0x24
   136b2:	227f      	movs	r2, #127	; 0x7f
   136b4:	2193      	movs	r1, #147	; 0x93
   136b6:	0089      	lsls	r1, r1, #2
   136b8:	47c0      	blx	r8
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, 3);
   136ba:	6820      	ldr	r0, [r4, #0]
   136bc:	3024      	adds	r0, #36	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   136be:	2203      	movs	r2, #3
   136c0:	2140      	movs	r1, #64	; 0x40
   136c2:	4f24      	ldr	r7, [pc, #144]	; (13754 <bar_init+0x138>)
   136c4:	47b8      	blx	r7
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   136c6:	6820      	ldr	r0, [r4, #0]
   136c8:	3024      	adds	r0, #36	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   136ca:	2296      	movs	r2, #150	; 0x96
   136cc:	21b0      	movs	r1, #176	; 0xb0
   136ce:	47b8      	blx	r7
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   136d0:	6820      	ldr	r0, [r4, #0]
   136d2:	3024      	adds	r0, #36	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   136d4:	224c      	movs	r2, #76	; 0x4c
   136d6:	21b7      	movs	r1, #183	; 0xb7
   136d8:	47b8      	blx	r7
    style_init_reset(&styles->bar_indic);
   136da:	6820      	ldr	r0, [r4, #0]
   136dc:	3028      	adds	r0, #40	; 0x28
   136de:	4b1b      	ldr	r3, [pc, #108]	; (1374c <bar_init+0x130>)
   136e0:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   136e2:	6820      	ldr	r0, [r4, #0]
   136e4:	3028      	adds	r0, #40	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   136e6:	22ff      	movs	r2, #255	; 0xff
   136e8:	212c      	movs	r1, #44	; 0x2c
   136ea:	47c0      	blx	r8
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   136ec:	6820      	ldr	r0, [r4, #0]
   136ee:	3028      	adds	r0, #40	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   136f0:	4a17      	ldr	r2, [pc, #92]	; (13750 <bar_init+0x134>)
   136f2:	2101      	movs	r1, #1
   136f4:	47b8      	blx	r7
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
   136f6:	6820      	ldr	r0, [r4, #0]
   136f8:	3028      	adds	r0, #40	; 0x28
   136fa:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   136fc:	2129      	movs	r1, #41	; 0x29
   136fe:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
   13700:	6820      	ldr	r0, [r4, #0]
   13702:	3028      	adds	r0, #40	; 0x28
   13704:	4b18      	ldr	r3, [pc, #96]	; (13768 <bar_init+0x14c>)
   13706:	881a      	ldrh	r2, [r3, #0]
   13708:	4918      	ldr	r1, [pc, #96]	; (1376c <bar_init+0x150>)
   1370a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
   1370c:	6820      	ldr	r0, [r4, #0]
   1370e:	3028      	adds	r0, #40	; 0x28
   13710:	69b3      	ldr	r3, [r6, #24]
   13712:	079b      	lsls	r3, r3, #30
   13714:	d414      	bmi.n	13740 <bar_init+0x124>
   13716:	231f      	movs	r3, #31
   13718:	213f      	movs	r1, #63	; 0x3f
   1371a:	221f      	movs	r2, #31
   1371c:	0149      	lsls	r1, r1, #5
   1371e:	02db      	lsls	r3, r3, #11
   13720:	430a      	orrs	r2, r1
   13722:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   13724:	2179      	movs	r1, #121	; 0x79
   13726:	4b0e      	ldr	r3, [pc, #56]	; (13760 <bar_init+0x144>)
   13728:	4798      	blx	r3
}
   1372a:	bc04      	pop	{r2}
   1372c:	4690      	mov	r8, r2
   1372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13730:	231a      	movs	r3, #26
   13732:	2135      	movs	r1, #53	; 0x35
   13734:	221b      	movs	r2, #27
   13736:	e78f      	b.n	13658 <bar_init+0x3c>
   13738:	2306      	movs	r3, #6
   1373a:	2110      	movs	r1, #16
   1373c:	2209      	movs	r2, #9
   1373e:	e79c      	b.n	1367a <bar_init+0x5e>
   13740:	2308      	movs	r3, #8
   13742:	2110      	movs	r1, #16
   13744:	2209      	movs	r2, #9
   13746:	e7e9      	b.n	1371c <bar_init+0x100>
   13748:	20004c38 	.word	0x20004c38
   1374c:	0001242d 	.word	0x0001242d
   13750:	00007fff 	.word	0x00007fff
   13754:	00004c8d 	.word	0x00004c8d
   13758:	00004f4d 	.word	0x00004f4d
   1375c:	20004c3c 	.word	0x20004c3c
   13760:	00004ded 	.word	0x00004ded
   13764:	00000449 	.word	0x00000449
   13768:	0001ca08 	.word	0x0001ca08
   1376c:	00002029 	.word	0x00002029

00013770 <slider_init>:
{
   13770:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
   13772:	4c9a      	ldr	r4, [pc, #616]	; (139dc <slider_init+0x26c>)
   13774:	6820      	ldr	r0, [r4, #0]
   13776:	3090      	adds	r0, #144	; 0x90
   13778:	4b99      	ldr	r3, [pc, #612]	; (139e0 <slider_init+0x270>)
   1377a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   1377c:	6820      	ldr	r0, [r4, #0]
   1377e:	3090      	adds	r0, #144	; 0x90
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13780:	22ff      	movs	r2, #255	; 0xff
   13782:	212c      	movs	r1, #44	; 0x2c
   13784:	4b97      	ldr	r3, [pc, #604]	; (139e4 <slider_init+0x274>)
   13786:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
   13788:	6820      	ldr	r0, [r4, #0]
   1378a:	3090      	adds	r0, #144	; 0x90
   1378c:	4b96      	ldr	r3, [pc, #600]	; (139e8 <slider_init+0x278>)
   1378e:	699b      	ldr	r3, [r3, #24]
   13790:	079b      	lsls	r3, r3, #30
   13792:	d400      	bmi.n	13796 <slider_init+0x26>
   13794:	e0bb      	b.n	1390e <slider_init+0x19e>
   13796:	4b94      	ldr	r3, [pc, #592]	; (139e8 <slider_init+0x278>)
   13798:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1379a:	2129      	movs	r1, #41	; 0x29
   1379c:	4b93      	ldr	r3, [pc, #588]	; (139ec <slider_init+0x27c>)
   1379e:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   137a0:	4b8e      	ldr	r3, [pc, #568]	; (139dc <slider_init+0x26c>)
   137a2:	6818      	ldr	r0, [r3, #0]
   137a4:	3090      	adds	r0, #144	; 0x90
   137a6:	4b90      	ldr	r3, [pc, #576]	; (139e8 <slider_init+0x278>)
   137a8:	699b      	ldr	r3, [r3, #24]
   137aa:	079b      	lsls	r3, r3, #30
   137ac:	d500      	bpl.n	137b0 <slider_init+0x40>
   137ae:	e0b1      	b.n	13914 <slider_init+0x1a4>
   137b0:	231f      	movs	r3, #31
   137b2:	213f      	movs	r1, #63	; 0x3f
   137b4:	221f      	movs	r2, #31
   137b6:	0149      	lsls	r1, r1, #5
   137b8:	02db      	lsls	r3, r3, #11
   137ba:	430a      	orrs	r2, r1
   137bc:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   137be:	2179      	movs	r1, #121	; 0x79
   137c0:	4b8a      	ldr	r3, [pc, #552]	; (139ec <slider_init+0x27c>)
   137c2:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   137c4:	4c85      	ldr	r4, [pc, #532]	; (139dc <slider_init+0x26c>)
   137c6:	6820      	ldr	r0, [r4, #0]
   137c8:	3090      	adds	r0, #144	; 0x90
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   137ca:	4a89      	ldr	r2, [pc, #548]	; (139f0 <slider_init+0x280>)
   137cc:	2101      	movs	r1, #1
   137ce:	4b89      	ldr	r3, [pc, #548]	; (139f4 <slider_init+0x284>)
   137d0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   137d2:	6824      	ldr	r4, [r4, #0]
   137d4:	3490      	adds	r4, #144	; 0x90
   137d6:	2000      	movs	r0, #0
   137d8:	4b87      	ldr	r3, [pc, #540]	; (139f8 <slider_init+0x288>)
   137da:	4798      	blx	r3
   137dc:	00c3      	lsls	r3, r0, #3
   137de:	1a18      	subs	r0, r3, r0
   137e0:	3050      	adds	r0, #80	; 0x50
   137e2:	2340      	movs	r3, #64	; 0x40
   137e4:	33ff      	adds	r3, #255	; 0xff
   137e6:	2201      	movs	r2, #1
   137e8:	4298      	cmp	r0, r3
   137ea:	d900      	bls.n	137ee <slider_init+0x7e>
   137ec:	e096      	b.n	1391c <slider_init+0x1ac>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   137ee:	2112      	movs	r1, #18
   137f0:	0020      	movs	r0, r4
   137f2:	4b80      	ldr	r3, [pc, #512]	; (139f4 <slider_init+0x284>)
   137f4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   137f6:	4b79      	ldr	r3, [pc, #484]	; (139dc <slider_init+0x26c>)
   137f8:	681c      	ldr	r4, [r3, #0]
   137fa:	3490      	adds	r4, #144	; 0x90
   137fc:	2000      	movs	r0, #0
   137fe:	4b7e      	ldr	r3, [pc, #504]	; (139f8 <slider_init+0x288>)
   13800:	4798      	blx	r3
   13802:	00c3      	lsls	r3, r0, #3
   13804:	1a18      	subs	r0, r3, r0
   13806:	3050      	adds	r0, #80	; 0x50
   13808:	2340      	movs	r3, #64	; 0x40
   1380a:	33ff      	adds	r3, #255	; 0xff
   1380c:	2201      	movs	r2, #1
   1380e:	4298      	cmp	r0, r3
   13810:	d900      	bls.n	13814 <slider_init+0xa4>
   13812:	e08e      	b.n	13932 <slider_init+0x1c2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13814:	2113      	movs	r1, #19
   13816:	0020      	movs	r0, r4
   13818:	4b76      	ldr	r3, [pc, #472]	; (139f4 <slider_init+0x284>)
   1381a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1381c:	4b6f      	ldr	r3, [pc, #444]	; (139dc <slider_init+0x26c>)
   1381e:	681c      	ldr	r4, [r3, #0]
   13820:	3490      	adds	r4, #144	; 0x90
   13822:	2000      	movs	r0, #0
   13824:	4b74      	ldr	r3, [pc, #464]	; (139f8 <slider_init+0x288>)
   13826:	4798      	blx	r3
   13828:	00c3      	lsls	r3, r0, #3
   1382a:	1a18      	subs	r0, r3, r0
   1382c:	3050      	adds	r0, #80	; 0x50
   1382e:	2340      	movs	r3, #64	; 0x40
   13830:	33ff      	adds	r3, #255	; 0xff
   13832:	2201      	movs	r2, #1
   13834:	4298      	cmp	r0, r3
   13836:	d900      	bls.n	1383a <slider_init+0xca>
   13838:	e086      	b.n	13948 <slider_init+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1383a:	2110      	movs	r1, #16
   1383c:	0020      	movs	r0, r4
   1383e:	4b6d      	ldr	r3, [pc, #436]	; (139f4 <slider_init+0x284>)
   13840:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   13842:	4b66      	ldr	r3, [pc, #408]	; (139dc <slider_init+0x26c>)
   13844:	681c      	ldr	r4, [r3, #0]
   13846:	3490      	adds	r4, #144	; 0x90
   13848:	2000      	movs	r0, #0
   1384a:	4b6b      	ldr	r3, [pc, #428]	; (139f8 <slider_init+0x288>)
   1384c:	4798      	blx	r3
   1384e:	00c3      	lsls	r3, r0, #3
   13850:	1a18      	subs	r0, r3, r0
   13852:	3050      	adds	r0, #80	; 0x50
   13854:	2340      	movs	r3, #64	; 0x40
   13856:	33ff      	adds	r3, #255	; 0xff
   13858:	2201      	movs	r2, #1
   1385a:	4298      	cmp	r0, r3
   1385c:	d900      	bls.n	13860 <slider_init+0xf0>
   1385e:	e07e      	b.n	1395e <slider_init+0x1ee>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13860:	2111      	movs	r1, #17
   13862:	0020      	movs	r0, r4
   13864:	4b63      	ldr	r3, [pc, #396]	; (139f4 <slider_init+0x284>)
   13866:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
   13868:	4c5c      	ldr	r4, [pc, #368]	; (139dc <slider_init+0x26c>)
   1386a:	6820      	ldr	r0, [r4, #0]
   1386c:	3094      	adds	r0, #148	; 0x94
   1386e:	4b5c      	ldr	r3, [pc, #368]	; (139e0 <slider_init+0x270>)
   13870:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   13872:	6824      	ldr	r4, [r4, #0]
   13874:	3494      	adds	r4, #148	; 0x94
   13876:	2000      	movs	r0, #0
   13878:	4b5f      	ldr	r3, [pc, #380]	; (139f8 <slider_init+0x288>)
   1387a:	4798      	blx	r3
   1387c:	0083      	lsls	r3, r0, #2
   1387e:	181b      	adds	r3, r3, r0
   13880:	005b      	lsls	r3, r3, #1
   13882:	3350      	adds	r3, #80	; 0x50
   13884:	2140      	movs	r1, #64	; 0x40
   13886:	31ff      	adds	r1, #255	; 0xff
   13888:	2201      	movs	r2, #1
   1388a:	428b      	cmp	r3, r1
   1388c:	d900      	bls.n	13890 <slider_init+0x120>
   1388e:	e071      	b.n	13974 <slider_init+0x204>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   13890:	2117      	movs	r1, #23
   13892:	0020      	movs	r0, r4
   13894:	4b57      	ldr	r3, [pc, #348]	; (139f4 <slider_init+0x284>)
   13896:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   13898:	4b50      	ldr	r3, [pc, #320]	; (139dc <slider_init+0x26c>)
   1389a:	681c      	ldr	r4, [r3, #0]
   1389c:	3494      	adds	r4, #148	; 0x94
   1389e:	2000      	movs	r0, #0
   138a0:	4b55      	ldr	r3, [pc, #340]	; (139f8 <slider_init+0x288>)
   138a2:	4798      	blx	r3
   138a4:	0083      	lsls	r3, r0, #2
   138a6:	181b      	adds	r3, r3, r0
   138a8:	005b      	lsls	r3, r3, #1
   138aa:	3350      	adds	r3, #80	; 0x50
   138ac:	2140      	movs	r1, #64	; 0x40
   138ae:	31ff      	adds	r1, #255	; 0xff
   138b0:	2201      	movs	r2, #1
   138b2:	428b      	cmp	r3, r1
   138b4:	d900      	bls.n	138b8 <slider_init+0x148>
   138b6:	e06a      	b.n	1398e <slider_init+0x21e>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   138b8:	2118      	movs	r1, #24
   138ba:	0020      	movs	r0, r4
   138bc:	4b4d      	ldr	r3, [pc, #308]	; (139f4 <slider_init+0x284>)
   138be:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   138c0:	4b46      	ldr	r3, [pc, #280]	; (139dc <slider_init+0x26c>)
   138c2:	681c      	ldr	r4, [r3, #0]
   138c4:	3494      	adds	r4, #148	; 0x94
   138c6:	2000      	movs	r0, #0
   138c8:	4b4b      	ldr	r3, [pc, #300]	; (139f8 <slider_init+0x288>)
   138ca:	4798      	blx	r3
   138cc:	0083      	lsls	r3, r0, #2
   138ce:	181b      	adds	r3, r3, r0
   138d0:	005b      	lsls	r3, r3, #1
   138d2:	3350      	adds	r3, #80	; 0x50
   138d4:	2140      	movs	r1, #64	; 0x40
   138d6:	31ff      	adds	r1, #255	; 0xff
   138d8:	2201      	movs	r2, #1
   138da:	428b      	cmp	r3, r1
   138dc:	d864      	bhi.n	139a8 <slider_init+0x238>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   138de:	2115      	movs	r1, #21
   138e0:	0020      	movs	r0, r4
   138e2:	4b44      	ldr	r3, [pc, #272]	; (139f4 <slider_init+0x284>)
   138e4:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   138e6:	4b3d      	ldr	r3, [pc, #244]	; (139dc <slider_init+0x26c>)
   138e8:	681c      	ldr	r4, [r3, #0]
   138ea:	3494      	adds	r4, #148	; 0x94
   138ec:	2000      	movs	r0, #0
   138ee:	4b42      	ldr	r3, [pc, #264]	; (139f8 <slider_init+0x288>)
   138f0:	4798      	blx	r3
   138f2:	0083      	lsls	r3, r0, #2
   138f4:	181b      	adds	r3, r3, r0
   138f6:	005b      	lsls	r3, r3, #1
   138f8:	3350      	adds	r3, #80	; 0x50
   138fa:	2140      	movs	r1, #64	; 0x40
   138fc:	31ff      	adds	r1, #255	; 0xff
   138fe:	2201      	movs	r2, #1
   13900:	428b      	cmp	r3, r1
   13902:	d85e      	bhi.n	139c2 <slider_init+0x252>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   13904:	2116      	movs	r1, #22
   13906:	0020      	movs	r0, r4
   13908:	4b3a      	ldr	r3, [pc, #232]	; (139f4 <slider_init+0x284>)
   1390a:	4798      	blx	r3
}
   1390c:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
   1390e:	4b3b      	ldr	r3, [pc, #236]	; (139fc <slider_init+0x28c>)
   13910:	881a      	ldrh	r2, [r3, #0]
   13912:	e742      	b.n	1379a <slider_init+0x2a>
   13914:	2306      	movs	r3, #6
   13916:	2110      	movs	r1, #16
   13918:	2209      	movs	r2, #9
   1391a:	e74c      	b.n	137b6 <slider_init+0x46>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1391c:	2000      	movs	r0, #0
   1391e:	4b36      	ldr	r3, [pc, #216]	; (139f8 <slider_init+0x288>)
   13920:	4798      	blx	r3
   13922:	00c3      	lsls	r3, r0, #3
   13924:	1a18      	subs	r0, r3, r0
   13926:	3050      	adds	r0, #80	; 0x50
   13928:	21a0      	movs	r1, #160	; 0xa0
   1392a:	4b35      	ldr	r3, [pc, #212]	; (13a00 <slider_init+0x290>)
   1392c:	4798      	blx	r3
   1392e:	b202      	sxth	r2, r0
   13930:	e75d      	b.n	137ee <slider_init+0x7e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   13932:	2000      	movs	r0, #0
   13934:	4b30      	ldr	r3, [pc, #192]	; (139f8 <slider_init+0x288>)
   13936:	4798      	blx	r3
   13938:	00c3      	lsls	r3, r0, #3
   1393a:	1a18      	subs	r0, r3, r0
   1393c:	3050      	adds	r0, #80	; 0x50
   1393e:	21a0      	movs	r1, #160	; 0xa0
   13940:	4b2f      	ldr	r3, [pc, #188]	; (13a00 <slider_init+0x290>)
   13942:	4798      	blx	r3
   13944:	b202      	sxth	r2, r0
   13946:	e765      	b.n	13814 <slider_init+0xa4>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   13948:	2000      	movs	r0, #0
   1394a:	4b2b      	ldr	r3, [pc, #172]	; (139f8 <slider_init+0x288>)
   1394c:	4798      	blx	r3
   1394e:	00c3      	lsls	r3, r0, #3
   13950:	1a18      	subs	r0, r3, r0
   13952:	3050      	adds	r0, #80	; 0x50
   13954:	21a0      	movs	r1, #160	; 0xa0
   13956:	4b2a      	ldr	r3, [pc, #168]	; (13a00 <slider_init+0x290>)
   13958:	4798      	blx	r3
   1395a:	b202      	sxth	r2, r0
   1395c:	e76d      	b.n	1383a <slider_init+0xca>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1395e:	2000      	movs	r0, #0
   13960:	4b25      	ldr	r3, [pc, #148]	; (139f8 <slider_init+0x288>)
   13962:	4798      	blx	r3
   13964:	00c3      	lsls	r3, r0, #3
   13966:	1a18      	subs	r0, r3, r0
   13968:	3050      	adds	r0, #80	; 0x50
   1396a:	21a0      	movs	r1, #160	; 0xa0
   1396c:	4b24      	ldr	r3, [pc, #144]	; (13a00 <slider_init+0x290>)
   1396e:	4798      	blx	r3
   13970:	b202      	sxth	r2, r0
   13972:	e775      	b.n	13860 <slider_init+0xf0>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   13974:	2000      	movs	r0, #0
   13976:	4b20      	ldr	r3, [pc, #128]	; (139f8 <slider_init+0x288>)
   13978:	4798      	blx	r3
   1397a:	0003      	movs	r3, r0
   1397c:	0080      	lsls	r0, r0, #2
   1397e:	18c0      	adds	r0, r0, r3
   13980:	0040      	lsls	r0, r0, #1
   13982:	3050      	adds	r0, #80	; 0x50
   13984:	21a0      	movs	r1, #160	; 0xa0
   13986:	4b1e      	ldr	r3, [pc, #120]	; (13a00 <slider_init+0x290>)
   13988:	4798      	blx	r3
   1398a:	b202      	sxth	r2, r0
   1398c:	e780      	b.n	13890 <slider_init+0x120>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1398e:	2000      	movs	r0, #0
   13990:	4b19      	ldr	r3, [pc, #100]	; (139f8 <slider_init+0x288>)
   13992:	4798      	blx	r3
   13994:	0003      	movs	r3, r0
   13996:	0080      	lsls	r0, r0, #2
   13998:	18c0      	adds	r0, r0, r3
   1399a:	0040      	lsls	r0, r0, #1
   1399c:	3050      	adds	r0, #80	; 0x50
   1399e:	21a0      	movs	r1, #160	; 0xa0
   139a0:	4b17      	ldr	r3, [pc, #92]	; (13a00 <slider_init+0x290>)
   139a2:	4798      	blx	r3
   139a4:	b202      	sxth	r2, r0
   139a6:	e787      	b.n	138b8 <slider_init+0x148>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   139a8:	2000      	movs	r0, #0
   139aa:	4b13      	ldr	r3, [pc, #76]	; (139f8 <slider_init+0x288>)
   139ac:	4798      	blx	r3
   139ae:	0003      	movs	r3, r0
   139b0:	0080      	lsls	r0, r0, #2
   139b2:	18c0      	adds	r0, r0, r3
   139b4:	0040      	lsls	r0, r0, #1
   139b6:	3050      	adds	r0, #80	; 0x50
   139b8:	21a0      	movs	r1, #160	; 0xa0
   139ba:	4b11      	ldr	r3, [pc, #68]	; (13a00 <slider_init+0x290>)
   139bc:	4798      	blx	r3
   139be:	b202      	sxth	r2, r0
   139c0:	e78d      	b.n	138de <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   139c2:	2000      	movs	r0, #0
   139c4:	4b0c      	ldr	r3, [pc, #48]	; (139f8 <slider_init+0x288>)
   139c6:	4798      	blx	r3
   139c8:	0003      	movs	r3, r0
   139ca:	0080      	lsls	r0, r0, #2
   139cc:	18c0      	adds	r0, r0, r3
   139ce:	0040      	lsls	r0, r0, #1
   139d0:	3050      	adds	r0, #80	; 0x50
   139d2:	21a0      	movs	r1, #160	; 0xa0
   139d4:	4b0a      	ldr	r3, [pc, #40]	; (13a00 <slider_init+0x290>)
   139d6:	4798      	blx	r3
   139d8:	b202      	sxth	r2, r0
   139da:	e793      	b.n	13904 <slider_init+0x194>
   139dc:	20004c38 	.word	0x20004c38
   139e0:	0001242d 	.word	0x0001242d
   139e4:	00004f4d 	.word	0x00004f4d
   139e8:	20004c3c 	.word	0x20004c3c
   139ec:	00004ded 	.word	0x00004ded
   139f0:	00007fff 	.word	0x00007fff
   139f4:	00004c8d 	.word	0x00004c8d
   139f8:	0000f5fd 	.word	0x0000f5fd
   139fc:	0001ca0c 	.word	0x0001ca0c
   13a00:	00017961 	.word	0x00017961

00013a04 <switch_init>:
{
   13a04:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
   13a06:	4c46      	ldr	r4, [pc, #280]	; (13b20 <switch_init+0x11c>)
   13a08:	6820      	ldr	r0, [r4, #0]
   13a0a:	309c      	adds	r0, #156	; 0x9c
   13a0c:	4b45      	ldr	r3, [pc, #276]	; (13b24 <switch_init+0x120>)
   13a0e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   13a10:	6820      	ldr	r0, [r4, #0]
   13a12:	309c      	adds	r0, #156	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13a14:	22ff      	movs	r2, #255	; 0xff
   13a16:	212c      	movs	r1, #44	; 0x2c
   13a18:	4b43      	ldr	r3, [pc, #268]	; (13b28 <switch_init+0x124>)
   13a1a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   13a1c:	6820      	ldr	r0, [r4, #0]
   13a1e:	309c      	adds	r0, #156	; 0x9c
   13a20:	4b42      	ldr	r3, [pc, #264]	; (13b2c <switch_init+0x128>)
   13a22:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   13a24:	2129      	movs	r1, #41	; 0x29
   13a26:	4b42      	ldr	r3, [pc, #264]	; (13b30 <switch_init+0x12c>)
   13a28:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   13a2a:	6820      	ldr	r0, [r4, #0]
   13a2c:	309c      	adds	r0, #156	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13a2e:	4a41      	ldr	r2, [pc, #260]	; (13b34 <switch_init+0x130>)
   13a30:	2101      	movs	r1, #1
   13a32:	4b41      	ldr	r3, [pc, #260]	; (13b38 <switch_init+0x134>)
   13a34:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   13a36:	6824      	ldr	r4, [r4, #0]
   13a38:	349c      	adds	r4, #156	; 0x9c
   13a3a:	2000      	movs	r0, #0
   13a3c:	4b3f      	ldr	r3, [pc, #252]	; (13b3c <switch_init+0x138>)
   13a3e:	4798      	blx	r3
   13a40:	3014      	adds	r0, #20
   13a42:	0080      	lsls	r0, r0, #2
   13a44:	2340      	movs	r3, #64	; 0x40
   13a46:	33ff      	adds	r3, #255	; 0xff
   13a48:	4298      	cmp	r0, r3
   13a4a:	d83c      	bhi.n	13ac6 <switch_init+0xc2>
   13a4c:	2201      	movs	r2, #1
   13a4e:	4252      	negs	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13a50:	2110      	movs	r1, #16
   13a52:	0020      	movs	r0, r4
   13a54:	4b38      	ldr	r3, [pc, #224]	; (13b38 <switch_init+0x134>)
   13a56:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   13a58:	4b31      	ldr	r3, [pc, #196]	; (13b20 <switch_init+0x11c>)
   13a5a:	681c      	ldr	r4, [r3, #0]
   13a5c:	349c      	adds	r4, #156	; 0x9c
   13a5e:	2000      	movs	r0, #0
   13a60:	4b36      	ldr	r3, [pc, #216]	; (13b3c <switch_init+0x138>)
   13a62:	4798      	blx	r3
   13a64:	3014      	adds	r0, #20
   13a66:	0080      	lsls	r0, r0, #2
   13a68:	2340      	movs	r3, #64	; 0x40
   13a6a:	33ff      	adds	r3, #255	; 0xff
   13a6c:	4298      	cmp	r0, r3
   13a6e:	d835      	bhi.n	13adc <switch_init+0xd8>
   13a70:	2201      	movs	r2, #1
   13a72:	4252      	negs	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   13a74:	2111      	movs	r1, #17
   13a76:	0020      	movs	r0, r4
   13a78:	4b2f      	ldr	r3, [pc, #188]	; (13b38 <switch_init+0x134>)
   13a7a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   13a7c:	4b28      	ldr	r3, [pc, #160]	; (13b20 <switch_init+0x11c>)
   13a7e:	681c      	ldr	r4, [r3, #0]
   13a80:	349c      	adds	r4, #156	; 0x9c
   13a82:	2000      	movs	r0, #0
   13a84:	4b2d      	ldr	r3, [pc, #180]	; (13b3c <switch_init+0x138>)
   13a86:	4798      	blx	r3
   13a88:	3014      	adds	r0, #20
   13a8a:	0080      	lsls	r0, r0, #2
   13a8c:	2340      	movs	r3, #64	; 0x40
   13a8e:	33ff      	adds	r3, #255	; 0xff
   13a90:	4298      	cmp	r0, r3
   13a92:	d82e      	bhi.n	13af2 <switch_init+0xee>
   13a94:	2201      	movs	r2, #1
   13a96:	4252      	negs	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13a98:	2112      	movs	r1, #18
   13a9a:	0020      	movs	r0, r4
   13a9c:	4b26      	ldr	r3, [pc, #152]	; (13b38 <switch_init+0x134>)
   13a9e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   13aa0:	4b1f      	ldr	r3, [pc, #124]	; (13b20 <switch_init+0x11c>)
   13aa2:	681c      	ldr	r4, [r3, #0]
   13aa4:	349c      	adds	r4, #156	; 0x9c
   13aa6:	2000      	movs	r0, #0
   13aa8:	4b24      	ldr	r3, [pc, #144]	; (13b3c <switch_init+0x138>)
   13aaa:	4798      	blx	r3
   13aac:	3014      	adds	r0, #20
   13aae:	0080      	lsls	r0, r0, #2
   13ab0:	2340      	movs	r3, #64	; 0x40
   13ab2:	33ff      	adds	r3, #255	; 0xff
   13ab4:	4298      	cmp	r0, r3
   13ab6:	d827      	bhi.n	13b08 <switch_init+0x104>
   13ab8:	2201      	movs	r2, #1
   13aba:	4252      	negs	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13abc:	2113      	movs	r1, #19
   13abe:	0020      	movs	r0, r4
   13ac0:	4b1d      	ldr	r3, [pc, #116]	; (13b38 <switch_init+0x134>)
   13ac2:	4798      	blx	r3
}
   13ac4:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   13ac6:	2000      	movs	r0, #0
   13ac8:	4b1c      	ldr	r3, [pc, #112]	; (13b3c <switch_init+0x138>)
   13aca:	4798      	blx	r3
   13acc:	3014      	adds	r0, #20
   13ace:	0080      	lsls	r0, r0, #2
   13ad0:	21a0      	movs	r1, #160	; 0xa0
   13ad2:	4b1b      	ldr	r3, [pc, #108]	; (13b40 <switch_init+0x13c>)
   13ad4:	4798      	blx	r3
   13ad6:	4242      	negs	r2, r0
   13ad8:	b212      	sxth	r2, r2
   13ada:	e7b9      	b.n	13a50 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   13adc:	2000      	movs	r0, #0
   13ade:	4b17      	ldr	r3, [pc, #92]	; (13b3c <switch_init+0x138>)
   13ae0:	4798      	blx	r3
   13ae2:	3014      	adds	r0, #20
   13ae4:	0080      	lsls	r0, r0, #2
   13ae6:	21a0      	movs	r1, #160	; 0xa0
   13ae8:	4b15      	ldr	r3, [pc, #84]	; (13b40 <switch_init+0x13c>)
   13aea:	4798      	blx	r3
   13aec:	4242      	negs	r2, r0
   13aee:	b212      	sxth	r2, r2
   13af0:	e7c0      	b.n	13a74 <switch_init+0x70>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   13af2:	2000      	movs	r0, #0
   13af4:	4b11      	ldr	r3, [pc, #68]	; (13b3c <switch_init+0x138>)
   13af6:	4798      	blx	r3
   13af8:	3014      	adds	r0, #20
   13afa:	0080      	lsls	r0, r0, #2
   13afc:	21a0      	movs	r1, #160	; 0xa0
   13afe:	4b10      	ldr	r3, [pc, #64]	; (13b40 <switch_init+0x13c>)
   13b00:	4798      	blx	r3
   13b02:	4242      	negs	r2, r0
   13b04:	b212      	sxth	r2, r2
   13b06:	e7c7      	b.n	13a98 <switch_init+0x94>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   13b08:	2000      	movs	r0, #0
   13b0a:	4b0c      	ldr	r3, [pc, #48]	; (13b3c <switch_init+0x138>)
   13b0c:	4798      	blx	r3
   13b0e:	3014      	adds	r0, #20
   13b10:	0080      	lsls	r0, r0, #2
   13b12:	21a0      	movs	r1, #160	; 0xa0
   13b14:	4b0a      	ldr	r3, [pc, #40]	; (13b40 <switch_init+0x13c>)
   13b16:	4798      	blx	r3
   13b18:	4242      	negs	r2, r0
   13b1a:	b212      	sxth	r2, r2
   13b1c:	e7ce      	b.n	13abc <switch_init+0xb8>
   13b1e:	46c0      	nop			; (mov r8, r8)
   13b20:	20004c38 	.word	0x20004c38
   13b24:	0001242d 	.word	0x0001242d
   13b28:	00004f4d 	.word	0x00004f4d
   13b2c:	0001ca0c 	.word	0x0001ca0c
   13b30:	00004ded 	.word	0x00004ded
   13b34:	00007fff 	.word	0x00007fff
   13b38:	00004c8d 	.word	0x00004c8d
   13b3c:	0000f5fd 	.word	0x0000f5fd
   13b40:	00017961 	.word	0x00017961

00013b44 <linemeter_init>:
{
   13b44:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
   13b46:	4c7f      	ldr	r4, [pc, #508]	; (13d44 <linemeter_init+0x200>)
   13b48:	6820      	ldr	r0, [r4, #0]
   13b4a:	3070      	adds	r0, #112	; 0x70
   13b4c:	4b7e      	ldr	r3, [pc, #504]	; (13d48 <linemeter_init+0x204>)
   13b4e:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   13b50:	6820      	ldr	r0, [r4, #0]
   13b52:	3070      	adds	r0, #112	; 0x70
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13b54:	4a7d      	ldr	r2, [pc, #500]	; (13d4c <linemeter_init+0x208>)
   13b56:	2101      	movs	r1, #1
   13b58:	4b7d      	ldr	r3, [pc, #500]	; (13d50 <linemeter_init+0x20c>)
   13b5a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   13b5c:	6824      	ldr	r4, [r4, #0]
   13b5e:	3470      	adds	r4, #112	; 0x70
   13b60:	2000      	movs	r0, #0
   13b62:	4b7c      	ldr	r3, [pc, #496]	; (13d54 <linemeter_init+0x210>)
   13b64:	4798      	blx	r3
   13b66:	0083      	lsls	r3, r0, #2
   13b68:	181b      	adds	r3, r3, r0
   13b6a:	009b      	lsls	r3, r3, #2
   13b6c:	3350      	adds	r3, #80	; 0x50
   13b6e:	2140      	movs	r1, #64	; 0x40
   13b70:	31ff      	adds	r1, #255	; 0xff
   13b72:	2201      	movs	r2, #1
   13b74:	428b      	cmp	r3, r1
   13b76:	d900      	bls.n	13b7a <linemeter_init+0x36>
   13b78:	e08c      	b.n	13c94 <linemeter_init+0x150>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13b7a:	2112      	movs	r1, #18
   13b7c:	0020      	movs	r0, r4
   13b7e:	4b74      	ldr	r3, [pc, #464]	; (13d50 <linemeter_init+0x20c>)
   13b80:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   13b82:	4b70      	ldr	r3, [pc, #448]	; (13d44 <linemeter_init+0x200>)
   13b84:	681c      	ldr	r4, [r3, #0]
   13b86:	3470      	adds	r4, #112	; 0x70
   13b88:	2000      	movs	r0, #0
   13b8a:	4b72      	ldr	r3, [pc, #456]	; (13d54 <linemeter_init+0x210>)
   13b8c:	4798      	blx	r3
   13b8e:	0083      	lsls	r3, r0, #2
   13b90:	181b      	adds	r3, r3, r0
   13b92:	009b      	lsls	r3, r3, #2
   13b94:	3350      	adds	r3, #80	; 0x50
   13b96:	2140      	movs	r1, #64	; 0x40
   13b98:	31ff      	adds	r1, #255	; 0xff
   13b9a:	2201      	movs	r2, #1
   13b9c:	428b      	cmp	r3, r1
   13b9e:	d900      	bls.n	13ba2 <linemeter_init+0x5e>
   13ba0:	e085      	b.n	13cae <linemeter_init+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13ba2:	2113      	movs	r1, #19
   13ba4:	0020      	movs	r0, r4
   13ba6:	4b6a      	ldr	r3, [pc, #424]	; (13d50 <linemeter_init+0x20c>)
   13ba8:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   13baa:	4b66      	ldr	r3, [pc, #408]	; (13d44 <linemeter_init+0x200>)
   13bac:	681c      	ldr	r4, [r3, #0]
   13bae:	3470      	adds	r4, #112	; 0x70
   13bb0:	2000      	movs	r0, #0
   13bb2:	4b68      	ldr	r3, [pc, #416]	; (13d54 <linemeter_init+0x210>)
   13bb4:	4798      	blx	r3
   13bb6:	0083      	lsls	r3, r0, #2
   13bb8:	181b      	adds	r3, r3, r0
   13bba:	009b      	lsls	r3, r3, #2
   13bbc:	3350      	adds	r3, #80	; 0x50
   13bbe:	2140      	movs	r1, #64	; 0x40
   13bc0:	31ff      	adds	r1, #255	; 0xff
   13bc2:	2201      	movs	r2, #1
   13bc4:	428b      	cmp	r3, r1
   13bc6:	d900      	bls.n	13bca <linemeter_init+0x86>
   13bc8:	e07e      	b.n	13cc8 <linemeter_init+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13bca:	2110      	movs	r1, #16
   13bcc:	0020      	movs	r0, r4
   13bce:	4b60      	ldr	r3, [pc, #384]	; (13d50 <linemeter_init+0x20c>)
   13bd0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   13bd2:	4b5c      	ldr	r3, [pc, #368]	; (13d44 <linemeter_init+0x200>)
   13bd4:	681c      	ldr	r4, [r3, #0]
   13bd6:	3470      	adds	r4, #112	; 0x70
   13bd8:	2000      	movs	r0, #0
   13bda:	4b5e      	ldr	r3, [pc, #376]	; (13d54 <linemeter_init+0x210>)
   13bdc:	4798      	blx	r3
   13bde:	0103      	lsls	r3, r0, #4
   13be0:	1a1b      	subs	r3, r3, r0
   13be2:	005b      	lsls	r3, r3, #1
   13be4:	3350      	adds	r3, #80	; 0x50
   13be6:	2140      	movs	r1, #64	; 0x40
   13be8:	31ff      	adds	r1, #255	; 0xff
   13bea:	2201      	movs	r2, #1
   13bec:	428b      	cmp	r3, r1
   13bee:	d900      	bls.n	13bf2 <linemeter_init+0xae>
   13bf0:	e077      	b.n	13ce2 <linemeter_init+0x19e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13bf2:	2114      	movs	r1, #20
   13bf4:	0020      	movs	r0, r4
   13bf6:	4b56      	ldr	r3, [pc, #344]	; (13d50 <linemeter_init+0x20c>)
   13bf8:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   13bfa:	4b52      	ldr	r3, [pc, #328]	; (13d44 <linemeter_init+0x200>)
   13bfc:	681c      	ldr	r4, [r3, #0]
   13bfe:	3470      	adds	r4, #112	; 0x70
   13c00:	2000      	movs	r0, #0
   13c02:	4b54      	ldr	r3, [pc, #336]	; (13d54 <linemeter_init+0x210>)
   13c04:	4798      	blx	r3
   13c06:	0083      	lsls	r3, r0, #2
   13c08:	1818      	adds	r0, r3, r0
   13c0a:	0083      	lsls	r3, r0, #2
   13c0c:	18c0      	adds	r0, r0, r3
   13c0e:	3050      	adds	r0, #80	; 0x50
   13c10:	2340      	movs	r3, #64	; 0x40
   13c12:	33ff      	adds	r3, #255	; 0xff
   13c14:	2201      	movs	r2, #1
   13c16:	4298      	cmp	r0, r3
   13c18:	d900      	bls.n	13c1c <linemeter_init+0xd8>
   13c1a:	e06e      	b.n	13cfa <linemeter_init+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   13c1c:	21c0      	movs	r1, #192	; 0xc0
   13c1e:	0020      	movs	r0, r4
   13c20:	4b4b      	ldr	r3, [pc, #300]	; (13d50 <linemeter_init+0x20c>)
   13c22:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   13c24:	4c47      	ldr	r4, [pc, #284]	; (13d44 <linemeter_init+0x200>)
   13c26:	6820      	ldr	r0, [r4, #0]
   13c28:	3070      	adds	r0, #112	; 0x70
   13c2a:	4e4b      	ldr	r6, [pc, #300]	; (13d58 <linemeter_init+0x214>)
   13c2c:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13c2e:	2199      	movs	r1, #153	; 0x99
   13c30:	4d4a      	ldr	r5, [pc, #296]	; (13d5c <linemeter_init+0x218>)
   13c32:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   13c34:	6820      	ldr	r0, [r4, #0]
   13c36:	3070      	adds	r0, #112	; 0x70
   13c38:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   13c3a:	21c9      	movs	r1, #201	; 0xc9
   13c3c:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   13c3e:	6820      	ldr	r0, [r4, #0]
   13c40:	3070      	adds	r0, #112	; 0x70
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   13c42:	4b47      	ldr	r3, [pc, #284]	; (13d60 <linemeter_init+0x21c>)
   13c44:	881a      	ldrh	r2, [r3, #0]
   13c46:	21ca      	movs	r1, #202	; 0xca
   13c48:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   13c4a:	6824      	ldr	r4, [r4, #0]
   13c4c:	3470      	adds	r4, #112	; 0x70
   13c4e:	2000      	movs	r0, #0
   13c50:	4b40      	ldr	r3, [pc, #256]	; (13d54 <linemeter_init+0x210>)
   13c52:	4798      	blx	r3
   13c54:	0083      	lsls	r3, r0, #2
   13c56:	181b      	adds	r3, r3, r0
   13c58:	005b      	lsls	r3, r3, #1
   13c5a:	3350      	adds	r3, #80	; 0x50
   13c5c:	2140      	movs	r1, #64	; 0x40
   13c5e:	31ff      	adds	r1, #255	; 0xff
   13c60:	2201      	movs	r2, #1
   13c62:	428b      	cmp	r3, r1
   13c64:	d856      	bhi.n	13d14 <linemeter_init+0x1d0>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   13c66:	2190      	movs	r1, #144	; 0x90
   13c68:	0020      	movs	r0, r4
   13c6a:	4b39      	ldr	r3, [pc, #228]	; (13d50 <linemeter_init+0x20c>)
   13c6c:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   13c6e:	4b35      	ldr	r3, [pc, #212]	; (13d44 <linemeter_init+0x200>)
   13c70:	681c      	ldr	r4, [r3, #0]
   13c72:	3470      	adds	r4, #112	; 0x70
   13c74:	2000      	movs	r0, #0
   13c76:	4b37      	ldr	r3, [pc, #220]	; (13d54 <linemeter_init+0x210>)
   13c78:	4798      	blx	r3
   13c7a:	00c3      	lsls	r3, r0, #3
   13c7c:	1a18      	subs	r0, r3, r0
   13c7e:	3050      	adds	r0, #80	; 0x50
   13c80:	2340      	movs	r3, #64	; 0x40
   13c82:	33ff      	adds	r3, #255	; 0xff
   13c84:	2201      	movs	r2, #1
   13c86:	4298      	cmp	r0, r3
   13c88:	d851      	bhi.n	13d2e <linemeter_init+0x1ea>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   13c8a:	21c3      	movs	r1, #195	; 0xc3
   13c8c:	0020      	movs	r0, r4
   13c8e:	4b30      	ldr	r3, [pc, #192]	; (13d50 <linemeter_init+0x20c>)
   13c90:	4798      	blx	r3
}
   13c92:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   13c94:	2000      	movs	r0, #0
   13c96:	4b2f      	ldr	r3, [pc, #188]	; (13d54 <linemeter_init+0x210>)
   13c98:	4798      	blx	r3
   13c9a:	0003      	movs	r3, r0
   13c9c:	0080      	lsls	r0, r0, #2
   13c9e:	18c0      	adds	r0, r0, r3
   13ca0:	0080      	lsls	r0, r0, #2
   13ca2:	3050      	adds	r0, #80	; 0x50
   13ca4:	21a0      	movs	r1, #160	; 0xa0
   13ca6:	4b2f      	ldr	r3, [pc, #188]	; (13d64 <linemeter_init+0x220>)
   13ca8:	4798      	blx	r3
   13caa:	b202      	sxth	r2, r0
   13cac:	e765      	b.n	13b7a <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   13cae:	2000      	movs	r0, #0
   13cb0:	4b28      	ldr	r3, [pc, #160]	; (13d54 <linemeter_init+0x210>)
   13cb2:	4798      	blx	r3
   13cb4:	0003      	movs	r3, r0
   13cb6:	0080      	lsls	r0, r0, #2
   13cb8:	18c0      	adds	r0, r0, r3
   13cba:	0080      	lsls	r0, r0, #2
   13cbc:	3050      	adds	r0, #80	; 0x50
   13cbe:	21a0      	movs	r1, #160	; 0xa0
   13cc0:	4b28      	ldr	r3, [pc, #160]	; (13d64 <linemeter_init+0x220>)
   13cc2:	4798      	blx	r3
   13cc4:	b202      	sxth	r2, r0
   13cc6:	e76c      	b.n	13ba2 <linemeter_init+0x5e>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   13cc8:	2000      	movs	r0, #0
   13cca:	4b22      	ldr	r3, [pc, #136]	; (13d54 <linemeter_init+0x210>)
   13ccc:	4798      	blx	r3
   13cce:	0003      	movs	r3, r0
   13cd0:	0080      	lsls	r0, r0, #2
   13cd2:	18c0      	adds	r0, r0, r3
   13cd4:	0080      	lsls	r0, r0, #2
   13cd6:	3050      	adds	r0, #80	; 0x50
   13cd8:	21a0      	movs	r1, #160	; 0xa0
   13cda:	4b22      	ldr	r3, [pc, #136]	; (13d64 <linemeter_init+0x220>)
   13cdc:	4798      	blx	r3
   13cde:	b202      	sxth	r2, r0
   13ce0:	e773      	b.n	13bca <linemeter_init+0x86>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   13ce2:	2000      	movs	r0, #0
   13ce4:	4b1b      	ldr	r3, [pc, #108]	; (13d54 <linemeter_init+0x210>)
   13ce6:	4798      	blx	r3
   13ce8:	0103      	lsls	r3, r0, #4
   13cea:	1a18      	subs	r0, r3, r0
   13cec:	0040      	lsls	r0, r0, #1
   13cee:	3050      	adds	r0, #80	; 0x50
   13cf0:	21a0      	movs	r1, #160	; 0xa0
   13cf2:	4b1c      	ldr	r3, [pc, #112]	; (13d64 <linemeter_init+0x220>)
   13cf4:	4798      	blx	r3
   13cf6:	b202      	sxth	r2, r0
   13cf8:	e77b      	b.n	13bf2 <linemeter_init+0xae>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   13cfa:	2000      	movs	r0, #0
   13cfc:	4b15      	ldr	r3, [pc, #84]	; (13d54 <linemeter_init+0x210>)
   13cfe:	4798      	blx	r3
   13d00:	0083      	lsls	r3, r0, #2
   13d02:	1818      	adds	r0, r3, r0
   13d04:	0083      	lsls	r3, r0, #2
   13d06:	18c0      	adds	r0, r0, r3
   13d08:	3050      	adds	r0, #80	; 0x50
   13d0a:	21a0      	movs	r1, #160	; 0xa0
   13d0c:	4b15      	ldr	r3, [pc, #84]	; (13d64 <linemeter_init+0x220>)
   13d0e:	4798      	blx	r3
   13d10:	b202      	sxth	r2, r0
   13d12:	e783      	b.n	13c1c <linemeter_init+0xd8>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   13d14:	2000      	movs	r0, #0
   13d16:	4b0f      	ldr	r3, [pc, #60]	; (13d54 <linemeter_init+0x210>)
   13d18:	4798      	blx	r3
   13d1a:	0003      	movs	r3, r0
   13d1c:	0080      	lsls	r0, r0, #2
   13d1e:	18c0      	adds	r0, r0, r3
   13d20:	0040      	lsls	r0, r0, #1
   13d22:	3050      	adds	r0, #80	; 0x50
   13d24:	21a0      	movs	r1, #160	; 0xa0
   13d26:	4b0f      	ldr	r3, [pc, #60]	; (13d64 <linemeter_init+0x220>)
   13d28:	4798      	blx	r3
   13d2a:	b202      	sxth	r2, r0
   13d2c:	e79b      	b.n	13c66 <linemeter_init+0x122>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   13d2e:	2000      	movs	r0, #0
   13d30:	4b08      	ldr	r3, [pc, #32]	; (13d54 <linemeter_init+0x210>)
   13d32:	4798      	blx	r3
   13d34:	00c3      	lsls	r3, r0, #3
   13d36:	1a18      	subs	r0, r3, r0
   13d38:	3050      	adds	r0, #80	; 0x50
   13d3a:	21a0      	movs	r1, #160	; 0xa0
   13d3c:	4b09      	ldr	r3, [pc, #36]	; (13d64 <linemeter_init+0x220>)
   13d3e:	4798      	blx	r3
   13d40:	b202      	sxth	r2, r0
   13d42:	e7a2      	b.n	13c8a <linemeter_init+0x146>
   13d44:	20004c38 	.word	0x20004c38
   13d48:	0001242d 	.word	0x0001242d
   13d4c:	00007fff 	.word	0x00007fff
   13d50:	00004c8d 	.word	0x00004c8d
   13d54:	0000f5fd 	.word	0x0000f5fd
   13d58:	20004c3c 	.word	0x20004c3c
   13d5c:	00004ded 	.word	0x00004ded
   13d60:	0001ca08 	.word	0x0001ca08
   13d64:	00017961 	.word	0x00017961

00013d68 <gauge_init>:
{
   13d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d6a:	46c6      	mov	lr, r8
   13d6c:	b500      	push	{lr}
    style_init_reset(&styles->gauge_main);
   13d6e:	4de3      	ldr	r5, [pc, #908]	; (140fc <gauge_init+0x394>)
   13d70:	6828      	ldr	r0, [r5, #0]
   13d72:	305c      	adds	r0, #92	; 0x5c
   13d74:	4be2      	ldr	r3, [pc, #904]	; (14100 <gauge_init+0x398>)
   13d76:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   13d78:	6828      	ldr	r0, [r5, #0]
   13d7a:	305c      	adds	r0, #92	; 0x5c
   13d7c:	2711      	movs	r7, #17
   13d7e:	2488      	movs	r4, #136	; 0x88
   13d80:	00e4      	lsls	r4, r4, #3
   13d82:	0022      	movs	r2, r4
   13d84:	433a      	orrs	r2, r7
   13d86:	0552      	lsls	r2, r2, #21
   13d88:	0d52      	lsrs	r2, r2, #21
   13d8a:	4ede      	ldr	r6, [pc, #888]	; (14104 <gauge_init+0x39c>)
   13d8c:	4332      	orrs	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13d8e:	2199      	movs	r1, #153	; 0x99
   13d90:	4bdd      	ldr	r3, [pc, #884]	; (14108 <gauge_init+0x3a0>)
   13d92:	4698      	mov	r8, r3
   13d94:	4798      	blx	r3
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   13d96:	6828      	ldr	r0, [r5, #0]
   13d98:	305c      	adds	r0, #92	; 0x5c
   13d9a:	0022      	movs	r2, r4
   13d9c:	433a      	orrs	r2, r7
   13d9e:	0552      	lsls	r2, r2, #21
   13da0:	0d52      	lsrs	r2, r2, #21
   13da2:	4332      	orrs	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   13da4:	21c9      	movs	r1, #201	; 0xc9
   13da6:	47c0      	blx	r8
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
   13da8:	6828      	ldr	r0, [r5, #0]
   13daa:	305c      	adds	r0, #92	; 0x5c
   13dac:	4bd7      	ldr	r3, [pc, #860]	; (1410c <gauge_init+0x3a4>)
   13dae:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   13db0:	21ca      	movs	r1, #202	; 0xca
   13db2:	47c0      	blx	r8
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   13db4:	682c      	ldr	r4, [r5, #0]
   13db6:	345c      	adds	r4, #92	; 0x5c
   13db8:	2000      	movs	r0, #0
   13dba:	4bd5      	ldr	r3, [pc, #852]	; (14110 <gauge_init+0x3a8>)
   13dbc:	4798      	blx	r3
   13dbe:	0083      	lsls	r3, r0, #2
   13dc0:	1818      	adds	r0, r3, r0
   13dc2:	3050      	adds	r0, #80	; 0x50
   13dc4:	2340      	movs	r3, #64	; 0x40
   13dc6:	33ff      	adds	r3, #255	; 0xff
   13dc8:	2201      	movs	r2, #1
   13dca:	4298      	cmp	r0, r3
   13dcc:	d900      	bls.n	13dd0 <gauge_init+0x68>
   13dce:	e15b      	b.n	14088 <gauge_init+0x320>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   13dd0:	2190      	movs	r1, #144	; 0x90
   13dd2:	0020      	movs	r0, r4
   13dd4:	4bcf      	ldr	r3, [pc, #828]	; (14114 <gauge_init+0x3ac>)
   13dd6:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   13dd8:	4bc8      	ldr	r3, [pc, #800]	; (140fc <gauge_init+0x394>)
   13dda:	681c      	ldr	r4, [r3, #0]
   13ddc:	345c      	adds	r4, #92	; 0x5c
   13dde:	2000      	movs	r0, #0
   13de0:	4bcb      	ldr	r3, [pc, #812]	; (14110 <gauge_init+0x3a8>)
   13de2:	4798      	blx	r3
   13de4:	3014      	adds	r0, #20
   13de6:	0080      	lsls	r0, r0, #2
   13de8:	2340      	movs	r3, #64	; 0x40
   13dea:	33ff      	adds	r3, #255	; 0xff
   13dec:	2201      	movs	r2, #1
   13dee:	4298      	cmp	r0, r3
   13df0:	d900      	bls.n	13df4 <gauge_init+0x8c>
   13df2:	e155      	b.n	140a0 <gauge_init+0x338>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   13df4:	21c3      	movs	r1, #195	; 0xc3
   13df6:	0020      	movs	r0, r4
   13df8:	4bc6      	ldr	r3, [pc, #792]	; (14114 <gauge_init+0x3ac>)
   13dfa:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   13dfc:	4bbf      	ldr	r3, [pc, #764]	; (140fc <gauge_init+0x394>)
   13dfe:	681c      	ldr	r4, [r3, #0]
   13e00:	345c      	adds	r4, #92	; 0x5c
   13e02:	2000      	movs	r0, #0
   13e04:	4bc2      	ldr	r3, [pc, #776]	; (14110 <gauge_init+0x3a8>)
   13e06:	4798      	blx	r3
   13e08:	300a      	adds	r0, #10
   13e0a:	00c0      	lsls	r0, r0, #3
   13e0c:	2340      	movs	r3, #64	; 0x40
   13e0e:	33ff      	adds	r3, #255	; 0xff
   13e10:	2201      	movs	r2, #1
   13e12:	4298      	cmp	r0, r3
   13e14:	d900      	bls.n	13e18 <gauge_init+0xb0>
   13e16:	e14d      	b.n	140b4 <gauge_init+0x34c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   13e18:	21c2      	movs	r1, #194	; 0xc2
   13e1a:	0020      	movs	r0, r4
   13e1c:	4bbd      	ldr	r3, [pc, #756]	; (14114 <gauge_init+0x3ac>)
   13e1e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   13e20:	4bb6      	ldr	r3, [pc, #728]	; (140fc <gauge_init+0x394>)
   13e22:	681c      	ldr	r4, [r3, #0]
   13e24:	345c      	adds	r4, #92	; 0x5c
   13e26:	2000      	movs	r0, #0
   13e28:	4bb9      	ldr	r3, [pc, #740]	; (14110 <gauge_init+0x3a8>)
   13e2a:	4798      	blx	r3
   13e2c:	0083      	lsls	r3, r0, #2
   13e2e:	181b      	adds	r3, r3, r0
   13e30:	009b      	lsls	r3, r3, #2
   13e32:	3350      	adds	r3, #80	; 0x50
   13e34:	2140      	movs	r1, #64	; 0x40
   13e36:	31ff      	adds	r1, #255	; 0xff
   13e38:	2201      	movs	r2, #1
   13e3a:	428b      	cmp	r3, r1
   13e3c:	d900      	bls.n	13e40 <gauge_init+0xd8>
   13e3e:	e143      	b.n	140c8 <gauge_init+0x360>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   13e40:	2112      	movs	r1, #18
   13e42:	0020      	movs	r0, r4
   13e44:	4bb3      	ldr	r3, [pc, #716]	; (14114 <gauge_init+0x3ac>)
   13e46:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   13e48:	4bac      	ldr	r3, [pc, #688]	; (140fc <gauge_init+0x394>)
   13e4a:	681c      	ldr	r4, [r3, #0]
   13e4c:	345c      	adds	r4, #92	; 0x5c
   13e4e:	2000      	movs	r0, #0
   13e50:	4baf      	ldr	r3, [pc, #700]	; (14110 <gauge_init+0x3a8>)
   13e52:	4798      	blx	r3
   13e54:	0083      	lsls	r3, r0, #2
   13e56:	181b      	adds	r3, r3, r0
   13e58:	009b      	lsls	r3, r3, #2
   13e5a:	3350      	adds	r3, #80	; 0x50
   13e5c:	2140      	movs	r1, #64	; 0x40
   13e5e:	31ff      	adds	r1, #255	; 0xff
   13e60:	2201      	movs	r2, #1
   13e62:	428b      	cmp	r3, r1
   13e64:	d900      	bls.n	13e68 <gauge_init+0x100>
   13e66:	e13c      	b.n	140e2 <gauge_init+0x37a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   13e68:	2113      	movs	r1, #19
   13e6a:	0020      	movs	r0, r4
   13e6c:	4ba9      	ldr	r3, [pc, #676]	; (14114 <gauge_init+0x3ac>)
   13e6e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   13e70:	4ba2      	ldr	r3, [pc, #648]	; (140fc <gauge_init+0x394>)
   13e72:	681c      	ldr	r4, [r3, #0]
   13e74:	345c      	adds	r4, #92	; 0x5c
   13e76:	2000      	movs	r0, #0
   13e78:	4ba5      	ldr	r3, [pc, #660]	; (14110 <gauge_init+0x3a8>)
   13e7a:	4798      	blx	r3
   13e7c:	0083      	lsls	r3, r0, #2
   13e7e:	181b      	adds	r3, r3, r0
   13e80:	009b      	lsls	r3, r3, #2
   13e82:	3350      	adds	r3, #80	; 0x50
   13e84:	2140      	movs	r1, #64	; 0x40
   13e86:	31ff      	adds	r1, #255	; 0xff
   13e88:	2201      	movs	r2, #1
   13e8a:	428b      	cmp	r3, r1
   13e8c:	d900      	bls.n	13e90 <gauge_init+0x128>
   13e8e:	e149      	b.n	14124 <gauge_init+0x3bc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   13e90:	2110      	movs	r1, #16
   13e92:	0020      	movs	r0, r4
   13e94:	4b9f      	ldr	r3, [pc, #636]	; (14114 <gauge_init+0x3ac>)
   13e96:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   13e98:	4b98      	ldr	r3, [pc, #608]	; (140fc <gauge_init+0x394>)
   13e9a:	681c      	ldr	r4, [r3, #0]
   13e9c:	345c      	adds	r4, #92	; 0x5c
   13e9e:	2000      	movs	r0, #0
   13ea0:	4b9b      	ldr	r3, [pc, #620]	; (14110 <gauge_init+0x3a8>)
   13ea2:	4798      	blx	r3
   13ea4:	0083      	lsls	r3, r0, #2
   13ea6:	181b      	adds	r3, r3, r0
   13ea8:	009b      	lsls	r3, r3, #2
   13eaa:	3350      	adds	r3, #80	; 0x50
   13eac:	2140      	movs	r1, #64	; 0x40
   13eae:	31ff      	adds	r1, #255	; 0xff
   13eb0:	2201      	movs	r2, #1
   13eb2:	428b      	cmp	r3, r1
   13eb4:	d900      	bls.n	13eb8 <gauge_init+0x150>
   13eb6:	e142      	b.n	1413e <gauge_init+0x3d6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   13eb8:	2114      	movs	r1, #20
   13eba:	0020      	movs	r0, r4
   13ebc:	4b95      	ldr	r3, [pc, #596]	; (14114 <gauge_init+0x3ac>)
   13ebe:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   13ec0:	4b8e      	ldr	r3, [pc, #568]	; (140fc <gauge_init+0x394>)
   13ec2:	681c      	ldr	r4, [r3, #0]
   13ec4:	345c      	adds	r4, #92	; 0x5c
   13ec6:	2000      	movs	r0, #0
   13ec8:	4b91      	ldr	r3, [pc, #580]	; (14110 <gauge_init+0x3a8>)
   13eca:	4798      	blx	r3
   13ecc:	0103      	lsls	r3, r0, #4
   13ece:	1a18      	subs	r0, r3, r0
   13ed0:	3050      	adds	r0, #80	; 0x50
   13ed2:	2340      	movs	r3, #64	; 0x40
   13ed4:	33ff      	adds	r3, #255	; 0xff
   13ed6:	2201      	movs	r2, #1
   13ed8:	4298      	cmp	r0, r3
   13eda:	d900      	bls.n	13ede <gauge_init+0x176>
   13edc:	e13c      	b.n	14158 <gauge_init+0x3f0>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   13ede:	21c0      	movs	r1, #192	; 0xc0
   13ee0:	0020      	movs	r0, r4
   13ee2:	4c8c      	ldr	r4, [pc, #560]	; (14114 <gauge_init+0x3ac>)
   13ee4:	47a0      	blx	r4
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   13ee6:	4d85      	ldr	r5, [pc, #532]	; (140fc <gauge_init+0x394>)
   13ee8:	6828      	ldr	r0, [r5, #0]
   13eea:	305c      	adds	r0, #92	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   13eec:	4a8a      	ldr	r2, [pc, #552]	; (14118 <gauge_init+0x3b0>)
   13eee:	2101      	movs	r1, #1
   13ef0:	47a0      	blx	r4
    style_init_reset(&styles->gauge_strong);
   13ef2:	6828      	ldr	r0, [r5, #0]
   13ef4:	3060      	adds	r0, #96	; 0x60
   13ef6:	4b82      	ldr	r3, [pc, #520]	; (14100 <gauge_init+0x398>)
   13ef8:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   13efa:	6828      	ldr	r0, [r5, #0]
   13efc:	3060      	adds	r0, #96	; 0x60
   13efe:	2711      	movs	r7, #17
   13f00:	2488      	movs	r4, #136	; 0x88
   13f02:	00e4      	lsls	r4, r4, #3
   13f04:	0022      	movs	r2, r4
   13f06:	433a      	orrs	r2, r7
   13f08:	0552      	lsls	r2, r2, #21
   13f0a:	0d52      	lsrs	r2, r2, #21
   13f0c:	4e7d      	ldr	r6, [pc, #500]	; (14104 <gauge_init+0x39c>)
   13f0e:	4332      	orrs	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13f10:	2199      	movs	r1, #153	; 0x99
   13f12:	4b7d      	ldr	r3, [pc, #500]	; (14108 <gauge_init+0x3a0>)
   13f14:	4698      	mov	r8, r3
   13f16:	4798      	blx	r3
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   13f18:	6828      	ldr	r0, [r5, #0]
   13f1a:	3060      	adds	r0, #96	; 0x60
   13f1c:	0022      	movs	r2, r4
   13f1e:	433a      	orrs	r2, r7
   13f20:	0552      	lsls	r2, r2, #21
   13f22:	0d52      	lsrs	r2, r2, #21
   13f24:	4332      	orrs	r2, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   13f26:	21c9      	movs	r1, #201	; 0xc9
   13f28:	47c0      	blx	r8
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
   13f2a:	6828      	ldr	r0, [r5, #0]
   13f2c:	3060      	adds	r0, #96	; 0x60
   13f2e:	4b77      	ldr	r3, [pc, #476]	; (1410c <gauge_init+0x3a4>)
   13f30:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   13f32:	21ca      	movs	r1, #202	; 0xca
   13f34:	47c0      	blx	r8
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   13f36:	682c      	ldr	r4, [r5, #0]
   13f38:	3460      	adds	r4, #96	; 0x60
   13f3a:	2000      	movs	r0, #0
   13f3c:	4b74      	ldr	r3, [pc, #464]	; (14110 <gauge_init+0x3a8>)
   13f3e:	4798      	blx	r3
   13f40:	300a      	adds	r0, #10
   13f42:	00c0      	lsls	r0, r0, #3
   13f44:	2340      	movs	r3, #64	; 0x40
   13f46:	33ff      	adds	r3, #255	; 0xff
   13f48:	2201      	movs	r2, #1
   13f4a:	4298      	cmp	r0, r3
   13f4c:	d900      	bls.n	13f50 <gauge_init+0x1e8>
   13f4e:	e10e      	b.n	1416e <gauge_init+0x406>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   13f50:	2190      	movs	r1, #144	; 0x90
   13f52:	0020      	movs	r0, r4
   13f54:	4b6f      	ldr	r3, [pc, #444]	; (14114 <gauge_init+0x3ac>)
   13f56:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   13f58:	4b68      	ldr	r3, [pc, #416]	; (140fc <gauge_init+0x394>)
   13f5a:	681c      	ldr	r4, [r3, #0]
   13f5c:	3460      	adds	r4, #96	; 0x60
   13f5e:	2000      	movs	r0, #0
   13f60:	4b6b      	ldr	r3, [pc, #428]	; (14110 <gauge_init+0x3a8>)
   13f62:	4798      	blx	r3
   13f64:	300a      	adds	r0, #10
   13f66:	00c0      	lsls	r0, r0, #3
   13f68:	2340      	movs	r3, #64	; 0x40
   13f6a:	33ff      	adds	r3, #255	; 0xff
   13f6c:	2201      	movs	r2, #1
   13f6e:	4298      	cmp	r0, r3
   13f70:	d900      	bls.n	13f74 <gauge_init+0x20c>
   13f72:	e106      	b.n	14182 <gauge_init+0x41a>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   13f74:	21c3      	movs	r1, #195	; 0xc3
   13f76:	0020      	movs	r0, r4
   13f78:	4b66      	ldr	r3, [pc, #408]	; (14114 <gauge_init+0x3ac>)
   13f7a:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   13f7c:	4b5f      	ldr	r3, [pc, #380]	; (140fc <gauge_init+0x394>)
   13f7e:	681c      	ldr	r4, [r3, #0]
   13f80:	3460      	adds	r4, #96	; 0x60
   13f82:	2000      	movs	r0, #0
   13f84:	4b62      	ldr	r3, [pc, #392]	; (14110 <gauge_init+0x3a8>)
   13f86:	4798      	blx	r3
   13f88:	0083      	lsls	r3, r0, #2
   13f8a:	1818      	adds	r0, r3, r0
   13f8c:	0083      	lsls	r3, r0, #2
   13f8e:	18c0      	adds	r0, r0, r3
   13f90:	3050      	adds	r0, #80	; 0x50
   13f92:	2340      	movs	r3, #64	; 0x40
   13f94:	33ff      	adds	r3, #255	; 0xff
   13f96:	2201      	movs	r2, #1
   13f98:	4298      	cmp	r0, r3
   13f9a:	d900      	bls.n	13f9e <gauge_init+0x236>
   13f9c:	e0fb      	b.n	14196 <gauge_init+0x42e>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   13f9e:	21c0      	movs	r1, #192	; 0xc0
   13fa0:	0020      	movs	r0, r4
   13fa2:	4b5c      	ldr	r3, [pc, #368]	; (14114 <gauge_init+0x3ac>)
   13fa4:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
   13fa6:	4c55      	ldr	r4, [pc, #340]	; (140fc <gauge_init+0x394>)
   13fa8:	6820      	ldr	r0, [r4, #0]
   13faa:	3064      	adds	r0, #100	; 0x64
   13fac:	4b54      	ldr	r3, [pc, #336]	; (14100 <gauge_init+0x398>)
   13fae:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   13fb0:	6820      	ldr	r0, [r4, #0]
   13fb2:	3064      	adds	r0, #100	; 0x64
   13fb4:	4b55      	ldr	r3, [pc, #340]	; (1410c <gauge_init+0x3a4>)
   13fb6:	699b      	ldr	r3, [r3, #24]
   13fb8:	079b      	lsls	r3, r3, #30
   13fba:	d500      	bpl.n	13fbe <gauge_init+0x256>
   13fbc:	e0f8      	b.n	141b0 <gauge_init+0x448>
   13fbe:	231f      	movs	r3, #31
   13fc0:	213f      	movs	r1, #63	; 0x3f
   13fc2:	221f      	movs	r2, #31
   13fc4:	0149      	lsls	r1, r1, #5
   13fc6:	02db      	lsls	r3, r3, #11
   13fc8:	430a      	orrs	r2, r1
   13fca:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   13fcc:	2199      	movs	r1, #153	; 0x99
   13fce:	4b4e      	ldr	r3, [pc, #312]	; (14108 <gauge_init+0x3a0>)
   13fd0:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   13fd2:	4b4a      	ldr	r3, [pc, #296]	; (140fc <gauge_init+0x394>)
   13fd4:	681c      	ldr	r4, [r3, #0]
   13fd6:	3464      	adds	r4, #100	; 0x64
   13fd8:	2000      	movs	r0, #0
   13fda:	4b4d      	ldr	r3, [pc, #308]	; (14110 <gauge_init+0x3a8>)
   13fdc:	4798      	blx	r3
   13fde:	300a      	adds	r0, #10
   13fe0:	00c0      	lsls	r0, r0, #3
   13fe2:	2340      	movs	r3, #64	; 0x40
   13fe4:	33ff      	adds	r3, #255	; 0xff
   13fe6:	2201      	movs	r2, #1
   13fe8:	4298      	cmp	r0, r3
   13fea:	d900      	bls.n	13fee <gauge_init+0x286>
   13fec:	e0e4      	b.n	141b8 <gauge_init+0x450>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   13fee:	2190      	movs	r1, #144	; 0x90
   13ff0:	0020      	movs	r0, r4
   13ff2:	4b48      	ldr	r3, [pc, #288]	; (14114 <gauge_init+0x3ac>)
   13ff4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
   13ff6:	4c41      	ldr	r4, [pc, #260]	; (140fc <gauge_init+0x394>)
   13ff8:	6820      	ldr	r0, [r4, #0]
   13ffa:	3064      	adds	r0, #100	; 0x64
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   13ffc:	22ff      	movs	r2, #255	; 0xff
   13ffe:	212c      	movs	r1, #44	; 0x2c
   14000:	4b46      	ldr	r3, [pc, #280]	; (1411c <gauge_init+0x3b4>)
   14002:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   14004:	6820      	ldr	r0, [r4, #0]
   14006:	3064      	adds	r0, #100	; 0x64
   14008:	4b40      	ldr	r3, [pc, #256]	; (1410c <gauge_init+0x3a4>)
   1400a:	699b      	ldr	r3, [r3, #24]
   1400c:	079b      	lsls	r3, r3, #30
   1400e:	d500      	bpl.n	14012 <gauge_init+0x2aa>
   14010:	e0dc      	b.n	141cc <gauge_init+0x464>
   14012:	231f      	movs	r3, #31
   14014:	213f      	movs	r1, #63	; 0x3f
   14016:	221f      	movs	r2, #31
   14018:	0149      	lsls	r1, r1, #5
   1401a:	02db      	lsls	r3, r3, #11
   1401c:	430a      	orrs	r2, r1
   1401e:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14020:	2129      	movs	r1, #41	; 0x29
   14022:	4b39      	ldr	r3, [pc, #228]	; (14108 <gauge_init+0x3a0>)
   14024:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14026:	4c35      	ldr	r4, [pc, #212]	; (140fc <gauge_init+0x394>)
   14028:	6820      	ldr	r0, [r4, #0]
   1402a:	3064      	adds	r0, #100	; 0x64
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1402c:	4a3a      	ldr	r2, [pc, #232]	; (14118 <gauge_init+0x3b0>)
   1402e:	2101      	movs	r1, #1
   14030:	4b38      	ldr	r3, [pc, #224]	; (14114 <gauge_init+0x3ac>)
   14032:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   14034:	6824      	ldr	r4, [r4, #0]
   14036:	3464      	adds	r4, #100	; 0x64
   14038:	2000      	movs	r0, #0
   1403a:	4b35      	ldr	r3, [pc, #212]	; (14110 <gauge_init+0x3a8>)
   1403c:	4798      	blx	r3
   1403e:	0103      	lsls	r3, r0, #4
   14040:	1a1b      	subs	r3, r3, r0
   14042:	005b      	lsls	r3, r3, #1
   14044:	3350      	adds	r3, #80	; 0x50
   14046:	2140      	movs	r1, #64	; 0x40
   14048:	31ff      	adds	r1, #255	; 0xff
   1404a:	2201      	movs	r2, #1
   1404c:	428b      	cmp	r3, r1
   1404e:	d900      	bls.n	14052 <gauge_init+0x2ea>
   14050:	e0c0      	b.n	141d4 <gauge_init+0x46c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   14052:	2103      	movs	r1, #3
   14054:	0020      	movs	r0, r4
   14056:	4b2f      	ldr	r3, [pc, #188]	; (14114 <gauge_init+0x3ac>)
   14058:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   1405a:	4b28      	ldr	r3, [pc, #160]	; (140fc <gauge_init+0x394>)
   1405c:	681c      	ldr	r4, [r3, #0]
   1405e:	3464      	adds	r4, #100	; 0x64
   14060:	2000      	movs	r0, #0
   14062:	4b2b      	ldr	r3, [pc, #172]	; (14110 <gauge_init+0x3a8>)
   14064:	4798      	blx	r3
   14066:	0083      	lsls	r3, r0, #2
   14068:	181b      	adds	r3, r3, r0
   1406a:	005b      	lsls	r3, r3, #1
   1406c:	3350      	adds	r3, #80	; 0x50
   1406e:	2140      	movs	r1, #64	; 0x40
   14070:	31ff      	adds	r1, #255	; 0xff
   14072:	2201      	movs	r2, #1
   14074:	428b      	cmp	r3, r1
   14076:	d900      	bls.n	1407a <gauge_init+0x312>
   14078:	e0b8      	b.n	141ec <gauge_init+0x484>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1407a:	2114      	movs	r1, #20
   1407c:	0020      	movs	r0, r4
   1407e:	4b25      	ldr	r3, [pc, #148]	; (14114 <gauge_init+0x3ac>)
   14080:	4798      	blx	r3
}
   14082:	bc04      	pop	{r2}
   14084:	4690      	mov	r8, r2
   14086:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   14088:	2000      	movs	r0, #0
   1408a:	4b21      	ldr	r3, [pc, #132]	; (14110 <gauge_init+0x3a8>)
   1408c:	4798      	blx	r3
   1408e:	0003      	movs	r3, r0
   14090:	0080      	lsls	r0, r0, #2
   14092:	18c0      	adds	r0, r0, r3
   14094:	3050      	adds	r0, #80	; 0x50
   14096:	21a0      	movs	r1, #160	; 0xa0
   14098:	4b21      	ldr	r3, [pc, #132]	; (14120 <gauge_init+0x3b8>)
   1409a:	4798      	blx	r3
   1409c:	b202      	sxth	r2, r0
   1409e:	e697      	b.n	13dd0 <gauge_init+0x68>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   140a0:	2000      	movs	r0, #0
   140a2:	4b1b      	ldr	r3, [pc, #108]	; (14110 <gauge_init+0x3a8>)
   140a4:	4798      	blx	r3
   140a6:	3014      	adds	r0, #20
   140a8:	0080      	lsls	r0, r0, #2
   140aa:	21a0      	movs	r1, #160	; 0xa0
   140ac:	4b1c      	ldr	r3, [pc, #112]	; (14120 <gauge_init+0x3b8>)
   140ae:	4798      	blx	r3
   140b0:	b202      	sxth	r2, r0
   140b2:	e69f      	b.n	13df4 <gauge_init+0x8c>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   140b4:	2000      	movs	r0, #0
   140b6:	4b16      	ldr	r3, [pc, #88]	; (14110 <gauge_init+0x3a8>)
   140b8:	4798      	blx	r3
   140ba:	300a      	adds	r0, #10
   140bc:	00c0      	lsls	r0, r0, #3
   140be:	21a0      	movs	r1, #160	; 0xa0
   140c0:	4b17      	ldr	r3, [pc, #92]	; (14120 <gauge_init+0x3b8>)
   140c2:	4798      	blx	r3
   140c4:	b202      	sxth	r2, r0
   140c6:	e6a7      	b.n	13e18 <gauge_init+0xb0>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   140c8:	2000      	movs	r0, #0
   140ca:	4b11      	ldr	r3, [pc, #68]	; (14110 <gauge_init+0x3a8>)
   140cc:	4798      	blx	r3
   140ce:	0003      	movs	r3, r0
   140d0:	0080      	lsls	r0, r0, #2
   140d2:	18c0      	adds	r0, r0, r3
   140d4:	0080      	lsls	r0, r0, #2
   140d6:	3050      	adds	r0, #80	; 0x50
   140d8:	21a0      	movs	r1, #160	; 0xa0
   140da:	4b11      	ldr	r3, [pc, #68]	; (14120 <gauge_init+0x3b8>)
   140dc:	4798      	blx	r3
   140de:	b202      	sxth	r2, r0
   140e0:	e6ae      	b.n	13e40 <gauge_init+0xd8>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   140e2:	2000      	movs	r0, #0
   140e4:	4b0a      	ldr	r3, [pc, #40]	; (14110 <gauge_init+0x3a8>)
   140e6:	4798      	blx	r3
   140e8:	0003      	movs	r3, r0
   140ea:	0080      	lsls	r0, r0, #2
   140ec:	18c0      	adds	r0, r0, r3
   140ee:	0080      	lsls	r0, r0, #2
   140f0:	3050      	adds	r0, #80	; 0x50
   140f2:	21a0      	movs	r1, #160	; 0xa0
   140f4:	4b0a      	ldr	r3, [pc, #40]	; (14120 <gauge_init+0x3b8>)
   140f6:	4798      	blx	r3
   140f8:	b202      	sxth	r2, r0
   140fa:	e6b5      	b.n	13e68 <gauge_init+0x100>
   140fc:	20004c38 	.word	0x20004c38
   14100:	0001242d 	.word	0x0001242d
   14104:	ffff8800 	.word	0xffff8800
   14108:	00004ded 	.word	0x00004ded
   1410c:	20004c3c 	.word	0x20004c3c
   14110:	0000f5fd 	.word	0x0000f5fd
   14114:	00004c8d 	.word	0x00004c8d
   14118:	00007fff 	.word	0x00007fff
   1411c:	00004f4d 	.word	0x00004f4d
   14120:	00017961 	.word	0x00017961
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   14124:	2000      	movs	r0, #0
   14126:	4b38      	ldr	r3, [pc, #224]	; (14208 <gauge_init+0x4a0>)
   14128:	4798      	blx	r3
   1412a:	0003      	movs	r3, r0
   1412c:	0080      	lsls	r0, r0, #2
   1412e:	18c0      	adds	r0, r0, r3
   14130:	0080      	lsls	r0, r0, #2
   14132:	3050      	adds	r0, #80	; 0x50
   14134:	21a0      	movs	r1, #160	; 0xa0
   14136:	4b35      	ldr	r3, [pc, #212]	; (1420c <gauge_init+0x4a4>)
   14138:	4798      	blx	r3
   1413a:	b202      	sxth	r2, r0
   1413c:	e6a8      	b.n	13e90 <gauge_init+0x128>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   1413e:	2000      	movs	r0, #0
   14140:	4b31      	ldr	r3, [pc, #196]	; (14208 <gauge_init+0x4a0>)
   14142:	4798      	blx	r3
   14144:	0003      	movs	r3, r0
   14146:	0080      	lsls	r0, r0, #2
   14148:	18c0      	adds	r0, r0, r3
   1414a:	0080      	lsls	r0, r0, #2
   1414c:	3050      	adds	r0, #80	; 0x50
   1414e:	21a0      	movs	r1, #160	; 0xa0
   14150:	4b2e      	ldr	r3, [pc, #184]	; (1420c <gauge_init+0x4a4>)
   14152:	4798      	blx	r3
   14154:	b202      	sxth	r2, r0
   14156:	e6af      	b.n	13eb8 <gauge_init+0x150>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   14158:	2000      	movs	r0, #0
   1415a:	4b2b      	ldr	r3, [pc, #172]	; (14208 <gauge_init+0x4a0>)
   1415c:	4798      	blx	r3
   1415e:	0103      	lsls	r3, r0, #4
   14160:	1a18      	subs	r0, r3, r0
   14162:	3050      	adds	r0, #80	; 0x50
   14164:	21a0      	movs	r1, #160	; 0xa0
   14166:	4b29      	ldr	r3, [pc, #164]	; (1420c <gauge_init+0x4a4>)
   14168:	4798      	blx	r3
   1416a:	b202      	sxth	r2, r0
   1416c:	e6b7      	b.n	13ede <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   1416e:	2000      	movs	r0, #0
   14170:	4b25      	ldr	r3, [pc, #148]	; (14208 <gauge_init+0x4a0>)
   14172:	4798      	blx	r3
   14174:	300a      	adds	r0, #10
   14176:	00c0      	lsls	r0, r0, #3
   14178:	21a0      	movs	r1, #160	; 0xa0
   1417a:	4b24      	ldr	r3, [pc, #144]	; (1420c <gauge_init+0x4a4>)
   1417c:	4798      	blx	r3
   1417e:	b202      	sxth	r2, r0
   14180:	e6e6      	b.n	13f50 <gauge_init+0x1e8>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   14182:	2000      	movs	r0, #0
   14184:	4b20      	ldr	r3, [pc, #128]	; (14208 <gauge_init+0x4a0>)
   14186:	4798      	blx	r3
   14188:	300a      	adds	r0, #10
   1418a:	00c0      	lsls	r0, r0, #3
   1418c:	21a0      	movs	r1, #160	; 0xa0
   1418e:	4b1f      	ldr	r3, [pc, #124]	; (1420c <gauge_init+0x4a4>)
   14190:	4798      	blx	r3
   14192:	b202      	sxth	r2, r0
   14194:	e6ee      	b.n	13f74 <gauge_init+0x20c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   14196:	2000      	movs	r0, #0
   14198:	4b1b      	ldr	r3, [pc, #108]	; (14208 <gauge_init+0x4a0>)
   1419a:	4798      	blx	r3
   1419c:	0083      	lsls	r3, r0, #2
   1419e:	1818      	adds	r0, r3, r0
   141a0:	0083      	lsls	r3, r0, #2
   141a2:	18c0      	adds	r0, r0, r3
   141a4:	3050      	adds	r0, #80	; 0x50
   141a6:	21a0      	movs	r1, #160	; 0xa0
   141a8:	4b18      	ldr	r3, [pc, #96]	; (1420c <gauge_init+0x4a4>)
   141aa:	4798      	blx	r3
   141ac:	b202      	sxth	r2, r0
   141ae:	e6f6      	b.n	13f9e <gauge_init+0x236>
   141b0:	2308      	movs	r3, #8
   141b2:	2112      	movs	r1, #18
   141b4:	220b      	movs	r2, #11
   141b6:	e705      	b.n	13fc4 <gauge_init+0x25c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   141b8:	2000      	movs	r0, #0
   141ba:	4b13      	ldr	r3, [pc, #76]	; (14208 <gauge_init+0x4a0>)
   141bc:	4798      	blx	r3
   141be:	300a      	adds	r0, #10
   141c0:	00c0      	lsls	r0, r0, #3
   141c2:	21a0      	movs	r1, #160	; 0xa0
   141c4:	4b11      	ldr	r3, [pc, #68]	; (1420c <gauge_init+0x4a4>)
   141c6:	4798      	blx	r3
   141c8:	b202      	sxth	r2, r0
   141ca:	e710      	b.n	13fee <gauge_init+0x286>
   141cc:	2308      	movs	r3, #8
   141ce:	2112      	movs	r1, #18
   141d0:	220b      	movs	r2, #11
   141d2:	e721      	b.n	14018 <gauge_init+0x2b0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   141d4:	2000      	movs	r0, #0
   141d6:	4b0c      	ldr	r3, [pc, #48]	; (14208 <gauge_init+0x4a0>)
   141d8:	4798      	blx	r3
   141da:	0103      	lsls	r3, r0, #4
   141dc:	1a18      	subs	r0, r3, r0
   141de:	0040      	lsls	r0, r0, #1
   141e0:	3050      	adds	r0, #80	; 0x50
   141e2:	21a0      	movs	r1, #160	; 0xa0
   141e4:	4b09      	ldr	r3, [pc, #36]	; (1420c <gauge_init+0x4a4>)
   141e6:	4798      	blx	r3
   141e8:	b202      	sxth	r2, r0
   141ea:	e732      	b.n	14052 <gauge_init+0x2ea>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   141ec:	2000      	movs	r0, #0
   141ee:	4b06      	ldr	r3, [pc, #24]	; (14208 <gauge_init+0x4a0>)
   141f0:	4798      	blx	r3
   141f2:	0003      	movs	r3, r0
   141f4:	0080      	lsls	r0, r0, #2
   141f6:	18c0      	adds	r0, r0, r3
   141f8:	0040      	lsls	r0, r0, #1
   141fa:	3050      	adds	r0, #80	; 0x50
   141fc:	21a0      	movs	r1, #160	; 0xa0
   141fe:	4b03      	ldr	r3, [pc, #12]	; (1420c <gauge_init+0x4a4>)
   14200:	4798      	blx	r3
   14202:	b202      	sxth	r2, r0
   14204:	e739      	b.n	1407a <gauge_init+0x312>
   14206:	46c0      	nop			; (mov r8, r8)
   14208:	0000f5fd 	.word	0x0000f5fd
   1420c:	00017961 	.word	0x00017961

00014210 <arc_init>:
{
   14210:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->arc_indic);
   14212:	4c39      	ldr	r4, [pc, #228]	; (142f8 <arc_init+0xe8>)
   14214:	6820      	ldr	r0, [r4, #0]
   14216:	301c      	adds	r0, #28
   14218:	4b38      	ldr	r3, [pc, #224]	; (142fc <arc_init+0xec>)
   1421a:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
   1421c:	6820      	ldr	r0, [r4, #0]
   1421e:	301c      	adds	r0, #28
   14220:	4b37      	ldr	r3, [pc, #220]	; (14300 <arc_init+0xf0>)
   14222:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14224:	2199      	movs	r1, #153	; 0x99
   14226:	4b37      	ldr	r3, [pc, #220]	; (14304 <arc_init+0xf4>)
   14228:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   1422a:	6824      	ldr	r4, [r4, #0]
   1422c:	341c      	adds	r4, #28
   1422e:	2000      	movs	r0, #0
   14230:	4b35      	ldr	r3, [pc, #212]	; (14308 <arc_init+0xf8>)
   14232:	4798      	blx	r3
   14234:	0083      	lsls	r3, r0, #2
   14236:	1818      	adds	r0, r3, r0
   14238:	0083      	lsls	r3, r0, #2
   1423a:	18c0      	adds	r0, r0, r3
   1423c:	3050      	adds	r0, #80	; 0x50
   1423e:	2340      	movs	r3, #64	; 0x40
   14240:	33ff      	adds	r3, #255	; 0xff
   14242:	2201      	movs	r2, #1
   14244:	4298      	cmp	r0, r3
   14246:	d838      	bhi.n	142ba <arc_init+0xaa>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14248:	2190      	movs	r1, #144	; 0x90
   1424a:	0020      	movs	r0, r4
   1424c:	4d2f      	ldr	r5, [pc, #188]	; (1430c <arc_init+0xfc>)
   1424e:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
   14250:	4c29      	ldr	r4, [pc, #164]	; (142f8 <arc_init+0xe8>)
   14252:	6820      	ldr	r0, [r4, #0]
   14254:	301c      	adds	r0, #28
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   14256:	2201      	movs	r2, #1
   14258:	2194      	movs	r1, #148	; 0x94
   1425a:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
   1425c:	6820      	ldr	r0, [r4, #0]
   1425e:	3020      	adds	r0, #32
   14260:	4b26      	ldr	r3, [pc, #152]	; (142fc <arc_init+0xec>)
   14262:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   14264:	6820      	ldr	r0, [r4, #0]
   14266:	3020      	adds	r0, #32
   14268:	4b25      	ldr	r3, [pc, #148]	; (14300 <arc_init+0xf0>)
   1426a:	699b      	ldr	r3, [r3, #24]
   1426c:	079b      	lsls	r3, r3, #30
   1426e:	d431      	bmi.n	142d4 <arc_init+0xc4>
   14270:	2308      	movs	r3, #8
   14272:	2112      	movs	r1, #18
   14274:	2209      	movs	r2, #9
   14276:	0149      	lsls	r1, r1, #5
   14278:	02db      	lsls	r3, r3, #11
   1427a:	430a      	orrs	r2, r1
   1427c:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1427e:	2199      	movs	r1, #153	; 0x99
   14280:	4b20      	ldr	r3, [pc, #128]	; (14304 <arc_init+0xf4>)
   14282:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   14284:	4b1c      	ldr	r3, [pc, #112]	; (142f8 <arc_init+0xe8>)
   14286:	681c      	ldr	r4, [r3, #0]
   14288:	3420      	adds	r4, #32
   1428a:	2000      	movs	r0, #0
   1428c:	4b1e      	ldr	r3, [pc, #120]	; (14308 <arc_init+0xf8>)
   1428e:	4798      	blx	r3
   14290:	0083      	lsls	r3, r0, #2
   14292:	1818      	adds	r0, r3, r0
   14294:	0083      	lsls	r3, r0, #2
   14296:	18c0      	adds	r0, r0, r3
   14298:	3050      	adds	r0, #80	; 0x50
   1429a:	2340      	movs	r3, #64	; 0x40
   1429c:	33ff      	adds	r3, #255	; 0xff
   1429e:	2201      	movs	r2, #1
   142a0:	4298      	cmp	r0, r3
   142a2:	d81b      	bhi.n	142dc <arc_init+0xcc>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   142a4:	2190      	movs	r1, #144	; 0x90
   142a6:	0020      	movs	r0, r4
   142a8:	4c18      	ldr	r4, [pc, #96]	; (1430c <arc_init+0xfc>)
   142aa:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
   142ac:	4b12      	ldr	r3, [pc, #72]	; (142f8 <arc_init+0xe8>)
   142ae:	6818      	ldr	r0, [r3, #0]
   142b0:	3020      	adds	r0, #32
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   142b2:	2201      	movs	r2, #1
   142b4:	2194      	movs	r1, #148	; 0x94
   142b6:	47a0      	blx	r4
}
   142b8:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   142ba:	2000      	movs	r0, #0
   142bc:	4b12      	ldr	r3, [pc, #72]	; (14308 <arc_init+0xf8>)
   142be:	4798      	blx	r3
   142c0:	0083      	lsls	r3, r0, #2
   142c2:	1818      	adds	r0, r3, r0
   142c4:	0083      	lsls	r3, r0, #2
   142c6:	18c0      	adds	r0, r0, r3
   142c8:	3050      	adds	r0, #80	; 0x50
   142ca:	21a0      	movs	r1, #160	; 0xa0
   142cc:	4b10      	ldr	r3, [pc, #64]	; (14310 <arc_init+0x100>)
   142ce:	4798      	blx	r3
   142d0:	b202      	sxth	r2, r0
   142d2:	e7b9      	b.n	14248 <arc_init+0x38>
   142d4:	231a      	movs	r3, #26
   142d6:	2135      	movs	r1, #53	; 0x35
   142d8:	221b      	movs	r2, #27
   142da:	e7cc      	b.n	14276 <arc_init+0x66>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   142dc:	2000      	movs	r0, #0
   142de:	4b0a      	ldr	r3, [pc, #40]	; (14308 <arc_init+0xf8>)
   142e0:	4798      	blx	r3
   142e2:	0083      	lsls	r3, r0, #2
   142e4:	1818      	adds	r0, r3, r0
   142e6:	0083      	lsls	r3, r0, #2
   142e8:	18c0      	adds	r0, r0, r3
   142ea:	3050      	adds	r0, #80	; 0x50
   142ec:	21a0      	movs	r1, #160	; 0xa0
   142ee:	4b08      	ldr	r3, [pc, #32]	; (14310 <arc_init+0x100>)
   142f0:	4798      	blx	r3
   142f2:	b202      	sxth	r2, r0
   142f4:	e7d6      	b.n	142a4 <arc_init+0x94>
   142f6:	46c0      	nop			; (mov r8, r8)
   142f8:	20004c38 	.word	0x20004c38
   142fc:	0001242d 	.word	0x0001242d
   14300:	20004c3c 	.word	0x20004c3c
   14304:	00004ded 	.word	0x00004ded
   14308:	0000f5fd 	.word	0x0000f5fd
   1430c:	00004c8d 	.word	0x00004c8d
   14310:	00017961 	.word	0x00017961

00014314 <led_init>:
{
   14314:	b5f0      	push	{r4, r5, r6, r7, lr}
   14316:	46c6      	mov	lr, r8
   14318:	b500      	push	{lr}
    style_init_reset(&styles->led);
   1431a:	4c39      	ldr	r4, [pc, #228]	; (14400 <led_init+0xec>)
   1431c:	6820      	ldr	r0, [r4, #0]
   1431e:	306c      	adds	r0, #108	; 0x6c
   14320:	4b38      	ldr	r3, [pc, #224]	; (14404 <led_init+0xf0>)
   14322:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
   14324:	6820      	ldr	r0, [r4, #0]
   14326:	306c      	adds	r0, #108	; 0x6c
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14328:	22ff      	movs	r2, #255	; 0xff
   1432a:	212c      	movs	r1, #44	; 0x2c
   1432c:	4d36      	ldr	r5, [pc, #216]	; (14408 <led_init+0xf4>)
   1432e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   14330:	6820      	ldr	r0, [r4, #0]
   14332:	306c      	adds	r0, #108	; 0x6c
   14334:	4b35      	ldr	r3, [pc, #212]	; (1440c <led_init+0xf8>)
   14336:	4698      	mov	r8, r3
   14338:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1433a:	2129      	movs	r1, #41	; 0x29
   1433c:	4f34      	ldr	r7, [pc, #208]	; (14410 <led_init+0xfc>)
   1433e:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
   14340:	6820      	ldr	r0, [r4, #0]
   14342:	306c      	adds	r0, #108	; 0x6c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   14344:	2202      	movs	r2, #2
   14346:	2130      	movs	r1, #48	; 0x30
   14348:	4e32      	ldr	r6, [pc, #200]	; (14414 <led_init+0x100>)
   1434a:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
   1434c:	6820      	ldr	r0, [r4, #0]
   1434e:	306c      	adds	r0, #108	; 0x6c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   14350:	227f      	movs	r2, #127	; 0x7f
   14352:	213c      	movs	r1, #60	; 0x3c
   14354:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
   14356:	6825      	ldr	r5, [r4, #0]
   14358:	356c      	adds	r5, #108	; 0x6c
   1435a:	4643      	mov	r3, r8
   1435c:	8898      	ldrh	r0, [r3, #4]
   1435e:	214c      	movs	r1, #76	; 0x4c
   14360:	4b2d      	ldr	r3, [pc, #180]	; (14418 <led_init+0x104>)
   14362:	4798      	blx	r3
   14364:	1c02      	adds	r2, r0, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   14366:	2139      	movs	r1, #57	; 0x39
   14368:	0028      	movs	r0, r5
   1436a:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1436c:	6820      	ldr	r0, [r4, #0]
   1436e:	306c      	adds	r0, #108	; 0x6c
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14370:	4a2a      	ldr	r2, [pc, #168]	; (1441c <led_init+0x108>)
   14372:	2101      	movs	r1, #1
   14374:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   14376:	6824      	ldr	r4, [r4, #0]
   14378:	346c      	adds	r4, #108	; 0x6c
   1437a:	2000      	movs	r0, #0
   1437c:	4b28      	ldr	r3, [pc, #160]	; (14420 <led_init+0x10c>)
   1437e:	4798      	blx	r3
   14380:	0103      	lsls	r3, r0, #4
   14382:	1a18      	subs	r0, r3, r0
   14384:	3050      	adds	r0, #80	; 0x50
   14386:	2340      	movs	r3, #64	; 0x40
   14388:	33ff      	adds	r3, #255	; 0xff
   1438a:	2201      	movs	r2, #1
   1438c:	4298      	cmp	r0, r3
   1438e:	d81f      	bhi.n	143d0 <led_init+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   14390:	2150      	movs	r1, #80	; 0x50
   14392:	0020      	movs	r0, r4
   14394:	4b1f      	ldr	r3, [pc, #124]	; (14414 <led_init+0x100>)
   14396:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   14398:	4c19      	ldr	r4, [pc, #100]	; (14400 <led_init+0xec>)
   1439a:	6820      	ldr	r0, [r4, #0]
   1439c:	306c      	adds	r0, #108	; 0x6c
   1439e:	4b1b      	ldr	r3, [pc, #108]	; (1440c <led_init+0xf8>)
   143a0:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   143a2:	2159      	movs	r1, #89	; 0x59
   143a4:	4b1a      	ldr	r3, [pc, #104]	; (14410 <led_init+0xfc>)
   143a6:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   143a8:	6824      	ldr	r4, [r4, #0]
   143aa:	346c      	adds	r4, #108	; 0x6c
   143ac:	2000      	movs	r0, #0
   143ae:	4b1c      	ldr	r3, [pc, #112]	; (14420 <led_init+0x10c>)
   143b0:	4798      	blx	r3
   143b2:	0083      	lsls	r3, r0, #2
   143b4:	1818      	adds	r0, r3, r0
   143b6:	3050      	adds	r0, #80	; 0x50
   143b8:	2340      	movs	r3, #64	; 0x40
   143ba:	33ff      	adds	r3, #255	; 0xff
   143bc:	2201      	movs	r2, #1
   143be:	4298      	cmp	r0, r3
   143c0:	d811      	bhi.n	143e6 <led_init+0xd2>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   143c2:	2153      	movs	r1, #83	; 0x53
   143c4:	0020      	movs	r0, r4
   143c6:	4b13      	ldr	r3, [pc, #76]	; (14414 <led_init+0x100>)
   143c8:	4798      	blx	r3
}
   143ca:	bc04      	pop	{r2}
   143cc:	4690      	mov	r8, r2
   143ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   143d0:	2000      	movs	r0, #0
   143d2:	4b13      	ldr	r3, [pc, #76]	; (14420 <led_init+0x10c>)
   143d4:	4798      	blx	r3
   143d6:	0103      	lsls	r3, r0, #4
   143d8:	1a18      	subs	r0, r3, r0
   143da:	3050      	adds	r0, #80	; 0x50
   143dc:	21a0      	movs	r1, #160	; 0xa0
   143de:	4b11      	ldr	r3, [pc, #68]	; (14424 <led_init+0x110>)
   143e0:	4798      	blx	r3
   143e2:	b202      	sxth	r2, r0
   143e4:	e7d4      	b.n	14390 <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   143e6:	2000      	movs	r0, #0
   143e8:	4b0d      	ldr	r3, [pc, #52]	; (14420 <led_init+0x10c>)
   143ea:	4798      	blx	r3
   143ec:	0003      	movs	r3, r0
   143ee:	0080      	lsls	r0, r0, #2
   143f0:	18c0      	adds	r0, r0, r3
   143f2:	3050      	adds	r0, #80	; 0x50
   143f4:	21a0      	movs	r1, #160	; 0xa0
   143f6:	4b0b      	ldr	r3, [pc, #44]	; (14424 <led_init+0x110>)
   143f8:	4798      	blx	r3
   143fa:	b202      	sxth	r2, r0
   143fc:	e7e1      	b.n	143c2 <led_init+0xae>
   143fe:	46c0      	nop			; (mov r8, r8)
   14400:	20004c38 	.word	0x20004c38
   14404:	0001242d 	.word	0x0001242d
   14408:	00004f4d 	.word	0x00004f4d
   1440c:	20004c3c 	.word	0x20004c3c
   14410:	00004ded 	.word	0x00004ded
   14414:	00004c8d 	.word	0x00004c8d
   14418:	00010221 	.word	0x00010221
   1441c:	00007fff 	.word	0x00007fff
   14420:	0000f5fd 	.word	0x0000f5fd
   14424:	00017961 	.word	0x00017961

00014428 <lv_theme_material_init>:
{
   14428:	b5f0      	push	{r4, r5, r6, r7, lr}
   1442a:	46c6      	mov	lr, r8
   1442c:	b500      	push	{lr}
   1442e:	4680      	mov	r8, r0
   14430:	1c0f      	adds	r7, r1, #0
   14432:	0015      	movs	r5, r2
   14434:	001e      	movs	r6, r3
    if(!inited) {
   14436:	4bfe      	ldr	r3, [pc, #1016]	; (14830 <lv_theme_material_init+0x408>)
   14438:	781b      	ldrb	r3, [r3, #0]
   1443a:	2b00      	cmp	r3, #0
   1443c:	d101      	bne.n	14442 <lv_theme_material_init+0x1a>
   1443e:	f001 fb9e 	bl	15b7e <lv_theme_material_init+0x1756>
    theme.color_primary = color_primary;
   14442:	4cfc      	ldr	r4, [pc, #1008]	; (14834 <lv_theme_material_init+0x40c>)
   14444:	4643      	mov	r3, r8
   14446:	80a3      	strh	r3, [r4, #4]
    theme.color_secondary = color_secondary;
   14448:	80e7      	strh	r7, [r4, #6]
    theme.font_small = font_small;
   1444a:	60a6      	str	r6, [r4, #8]
    theme.font_normal = font_normal;
   1444c:	9b06      	ldr	r3, [sp, #24]
   1444e:	60e3      	str	r3, [r4, #12]
    theme.font_subtitle = font_subtitle;
   14450:	9b07      	ldr	r3, [sp, #28]
   14452:	6123      	str	r3, [r4, #16]
    theme.font_title = font_title;
   14454:	9b08      	ldr	r3, [sp, #32]
   14456:	6163      	str	r3, [r4, #20]
    theme.flags = flags;
   14458:	61a5      	str	r5, [r4, #24]
    basic_init();
   1445a:	4bf7      	ldr	r3, [pc, #988]	; (14838 <lv_theme_material_init+0x410>)
   1445c:	4798      	blx	r3
    bar_init();
   1445e:	4bf7      	ldr	r3, [pc, #988]	; (1483c <lv_theme_material_init+0x414>)
   14460:	4798      	blx	r3
    led_init();
   14462:	4bf7      	ldr	r3, [pc, #988]	; (14840 <lv_theme_material_init+0x418>)
   14464:	4798      	blx	r3
    slider_init();
   14466:	4bf7      	ldr	r3, [pc, #988]	; (14844 <lv_theme_material_init+0x41c>)
   14468:	4798      	blx	r3
    switch_init();
   1446a:	4bf7      	ldr	r3, [pc, #988]	; (14848 <lv_theme_material_init+0x420>)
   1446c:	4798      	blx	r3
    linemeter_init();
   1446e:	4bf7      	ldr	r3, [pc, #988]	; (1484c <lv_theme_material_init+0x424>)
   14470:	4798      	blx	r3
    gauge_init();
   14472:	4bf7      	ldr	r3, [pc, #988]	; (14850 <lv_theme_material_init+0x428>)
   14474:	4798      	blx	r3
    arc_init();
   14476:	4bf7      	ldr	r3, [pc, #988]	; (14854 <lv_theme_material_init+0x42c>)
   14478:	4798      	blx	r3
    style_init_reset(&styles->chart_bg);
   1447a:	4df7      	ldr	r5, [pc, #988]	; (14858 <lv_theme_material_init+0x430>)
   1447c:	6828      	ldr	r0, [r5, #0]
   1447e:	3040      	adds	r0, #64	; 0x40
   14480:	4bf6      	ldr	r3, [pc, #984]	; (1485c <lv_theme_material_init+0x434>)
   14482:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   14484:	6828      	ldr	r0, [r5, #0]
   14486:	3040      	adds	r0, #64	; 0x40
   14488:	69a3      	ldr	r3, [r4, #24]
   1448a:	079b      	lsls	r3, r3, #30
   1448c:	d501      	bpl.n	14492 <lv_theme_material_init+0x6a>
   1448e:	f001 fb7f 	bl	15b90 <lv_theme_material_init+0x1768>
   14492:	2314      	movs	r3, #20
   14494:	212b      	movs	r1, #43	; 0x2b
   14496:	2217      	movs	r2, #23
   14498:	0149      	lsls	r1, r1, #5
   1449a:	02db      	lsls	r3, r3, #11
   1449c:	430a      	orrs	r2, r1
   1449e:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   144a0:	49ef      	ldr	r1, [pc, #956]	; (14860 <lv_theme_material_init+0x438>)
   144a2:	4bf0      	ldr	r3, [pc, #960]	; (14864 <lv_theme_material_init+0x43c>)
   144a4:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
   144a6:	4cec      	ldr	r4, [pc, #944]	; (14858 <lv_theme_material_init+0x430>)
   144a8:	6820      	ldr	r0, [r4, #0]
   144aa:	3044      	adds	r0, #68	; 0x44
   144ac:	4beb      	ldr	r3, [pc, #940]	; (1485c <lv_theme_material_init+0x434>)
   144ae:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   144b0:	6824      	ldr	r4, [r4, #0]
   144b2:	3444      	adds	r4, #68	; 0x44
   144b4:	2000      	movs	r0, #0
   144b6:	4bec      	ldr	r3, [pc, #944]	; (14868 <lv_theme_material_init+0x440>)
   144b8:	4798      	blx	r3
   144ba:	3050      	adds	r0, #80	; 0x50
   144bc:	2340      	movs	r3, #64	; 0x40
   144be:	33ff      	adds	r3, #255	; 0xff
   144c0:	2201      	movs	r2, #1
   144c2:	4298      	cmp	r0, r3
   144c4:	d901      	bls.n	144ca <lv_theme_material_init+0xa2>
   144c6:	f001 fb68 	bl	15b9a <lv_theme_material_init+0x1772>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   144ca:	2190      	movs	r1, #144	; 0x90
   144cc:	0020      	movs	r0, r4
   144ce:	4be7      	ldr	r3, [pc, #924]	; (1486c <lv_theme_material_init+0x444>)
   144d0:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   144d2:	4be1      	ldr	r3, [pc, #900]	; (14858 <lv_theme_material_init+0x430>)
   144d4:	681c      	ldr	r4, [r3, #0]
   144d6:	3444      	adds	r4, #68	; 0x44
   144d8:	2000      	movs	r0, #0
   144da:	4be3      	ldr	r3, [pc, #908]	; (14868 <lv_theme_material_init+0x440>)
   144dc:	4798      	blx	r3
   144de:	0083      	lsls	r3, r0, #2
   144e0:	181b      	adds	r3, r3, r0
   144e2:	005b      	lsls	r3, r3, #1
   144e4:	3350      	adds	r3, #80	; 0x50
   144e6:	2140      	movs	r1, #64	; 0x40
   144e8:	31ff      	adds	r1, #255	; 0xff
   144ea:	2201      	movs	r2, #1
   144ec:	428b      	cmp	r3, r1
   144ee:	d901      	bls.n	144f4 <lv_theme_material_init+0xcc>
   144f0:	f001 fb5d 	bl	15bae <lv_theme_material_init+0x1786>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   144f4:	2192      	movs	r1, #146	; 0x92
   144f6:	0020      	movs	r0, r4
   144f8:	4bdc      	ldr	r3, [pc, #880]	; (1486c <lv_theme_material_init+0x444>)
   144fa:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   144fc:	4bd6      	ldr	r3, [pc, #856]	; (14858 <lv_theme_material_init+0x430>)
   144fe:	681c      	ldr	r4, [r3, #0]
   14500:	3444      	adds	r4, #68	; 0x44
   14502:	2000      	movs	r0, #0
   14504:	4bd8      	ldr	r3, [pc, #864]	; (14868 <lv_theme_material_init+0x440>)
   14506:	4798      	blx	r3
   14508:	0083      	lsls	r3, r0, #2
   1450a:	181b      	adds	r3, r3, r0
   1450c:	005b      	lsls	r3, r3, #1
   1450e:	3350      	adds	r3, #80	; 0x50
   14510:	2140      	movs	r1, #64	; 0x40
   14512:	31ff      	adds	r1, #255	; 0xff
   14514:	2201      	movs	r2, #1
   14516:	428b      	cmp	r3, r1
   14518:	d901      	bls.n	1451e <lv_theme_material_init+0xf6>
   1451a:	f001 fb56 	bl	15bca <lv_theme_material_init+0x17a2>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   1451e:	2193      	movs	r1, #147	; 0x93
   14520:	0020      	movs	r0, r4
   14522:	4bd2      	ldr	r3, [pc, #840]	; (1486c <lv_theme_material_init+0x444>)
   14524:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   14526:	4bcc      	ldr	r3, [pc, #816]	; (14858 <lv_theme_material_init+0x430>)
   14528:	6818      	ldr	r0, [r3, #0]
   1452a:	3044      	adds	r0, #68	; 0x44
   1452c:	4bc1      	ldr	r3, [pc, #772]	; (14834 <lv_theme_material_init+0x40c>)
   1452e:	699b      	ldr	r3, [r3, #24]
   14530:	079b      	lsls	r3, r3, #30
   14532:	d501      	bpl.n	14538 <lv_theme_material_init+0x110>
   14534:	f001 fb57 	bl	15be6 <lv_theme_material_init+0x17be>
   14538:	2310      	movs	r3, #16
   1453a:	2122      	movs	r1, #34	; 0x22
   1453c:	2212      	movs	r2, #18
   1453e:	0149      	lsls	r1, r1, #5
   14540:	02db      	lsls	r3, r3, #11
   14542:	430a      	orrs	r2, r1
   14544:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   14546:	2199      	movs	r1, #153	; 0x99
   14548:	4bc6      	ldr	r3, [pc, #792]	; (14864 <lv_theme_material_init+0x43c>)
   1454a:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
   1454c:	4cc2      	ldr	r4, [pc, #776]	; (14858 <lv_theme_material_init+0x430>)
   1454e:	6820      	ldr	r0, [r4, #0]
   14550:	3048      	adds	r0, #72	; 0x48
   14552:	4bc2      	ldr	r3, [pc, #776]	; (1485c <lv_theme_material_init+0x434>)
   14554:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   14556:	6824      	ldr	r4, [r4, #0]
   14558:	3448      	adds	r4, #72	; 0x48
   1455a:	2000      	movs	r0, #0
   1455c:	4bc2      	ldr	r3, [pc, #776]	; (14868 <lv_theme_material_init+0x440>)
   1455e:	4798      	blx	r3
   14560:	0043      	lsls	r3, r0, #1
   14562:	1818      	adds	r0, r3, r0
   14564:	3050      	adds	r0, #80	; 0x50
   14566:	2340      	movs	r3, #64	; 0x40
   14568:	33ff      	adds	r3, #255	; 0xff
   1456a:	2201      	movs	r2, #1
   1456c:	4298      	cmp	r0, r3
   1456e:	d901      	bls.n	14574 <lv_theme_material_init+0x14c>
   14570:	f001 fb3e 	bl	15bf0 <lv_theme_material_init+0x17c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   14574:	2190      	movs	r1, #144	; 0x90
   14576:	0020      	movs	r0, r4
   14578:	4bbc      	ldr	r3, [pc, #752]	; (1486c <lv_theme_material_init+0x444>)
   1457a:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   1457c:	4bb6      	ldr	r3, [pc, #728]	; (14858 <lv_theme_material_init+0x430>)
   1457e:	681c      	ldr	r4, [r3, #0]
   14580:	3448      	adds	r4, #72	; 0x48
   14582:	2000      	movs	r0, #0
   14584:	4bb8      	ldr	r3, [pc, #736]	; (14868 <lv_theme_material_init+0x440>)
   14586:	4798      	blx	r3
   14588:	3014      	adds	r0, #20
   1458a:	0080      	lsls	r0, r0, #2
   1458c:	2340      	movs	r3, #64	; 0x40
   1458e:	33ff      	adds	r3, #255	; 0xff
   14590:	2201      	movs	r2, #1
   14592:	4298      	cmp	r0, r3
   14594:	d901      	bls.n	1459a <lv_theme_material_init+0x172>
   14596:	f001 fb38 	bl	15c0a <lv_theme_material_init+0x17e2>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   1459a:	2103      	movs	r1, #3
   1459c:	0020      	movs	r0, r4
   1459e:	4bb3      	ldr	r3, [pc, #716]	; (1486c <lv_theme_material_init+0x444>)
   145a0:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   145a2:	4bad      	ldr	r3, [pc, #692]	; (14858 <lv_theme_material_init+0x430>)
   145a4:	681c      	ldr	r4, [r3, #0]
   145a6:	3448      	adds	r4, #72	; 0x48
   145a8:	2000      	movs	r0, #0
   145aa:	4baf      	ldr	r3, [pc, #700]	; (14868 <lv_theme_material_init+0x440>)
   145ac:	4798      	blx	r3
   145ae:	3028      	adds	r0, #40	; 0x28
   145b0:	0040      	lsls	r0, r0, #1
   145b2:	2340      	movs	r3, #64	; 0x40
   145b4:	33ff      	adds	r3, #255	; 0xff
   145b6:	2201      	movs	r2, #1
   145b8:	4298      	cmp	r0, r3
   145ba:	d901      	bls.n	145c0 <lv_theme_material_init+0x198>
   145bc:	f001 fb30 	bl	15c20 <lv_theme_material_init+0x17f8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   145c0:	2114      	movs	r1, #20
   145c2:	0020      	movs	r0, r4
   145c4:	4ba9      	ldr	r3, [pc, #676]	; (1486c <lv_theme_material_init+0x444>)
   145c6:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   145c8:	4ba3      	ldr	r3, [pc, #652]	; (14858 <lv_theme_material_init+0x430>)
   145ca:	681c      	ldr	r4, [r3, #0]
   145cc:	3448      	adds	r4, #72	; 0x48
   145ce:	2000      	movs	r0, #0
   145d0:	4ba5      	ldr	r3, [pc, #660]	; (14868 <lv_theme_material_init+0x440>)
   145d2:	4798      	blx	r3
   145d4:	3050      	adds	r0, #80	; 0x50
   145d6:	2340      	movs	r3, #64	; 0x40
   145d8:	33ff      	adds	r3, #255	; 0xff
   145da:	2201      	movs	r2, #1
   145dc:	4298      	cmp	r0, r3
   145de:	d901      	bls.n	145e4 <lv_theme_material_init+0x1bc>
   145e0:	f001 fb29 	bl	15c36 <lv_theme_material_init+0x180e>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   145e4:	2101      	movs	r1, #1
   145e6:	0020      	movs	r0, r4
   145e8:	4ba0      	ldr	r3, [pc, #640]	; (1486c <lv_theme_material_init+0x444>)
   145ea:	4798      	blx	r3
    style_init_reset(&styles->calendar_header);
   145ec:	4c9a      	ldr	r4, [pc, #616]	; (14858 <lv_theme_material_init+0x430>)
   145ee:	6820      	ldr	r0, [r4, #0]
   145f0:	3030      	adds	r0, #48	; 0x30
   145f2:	4b9a      	ldr	r3, [pc, #616]	; (1485c <lv_theme_material_init+0x434>)
   145f4:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   145f6:	6824      	ldr	r4, [r4, #0]
   145f8:	3430      	adds	r4, #48	; 0x30
   145fa:	2000      	movs	r0, #0
   145fc:	4b9c      	ldr	r3, [pc, #624]	; (14870 <lv_theme_material_init+0x448>)
   145fe:	4798      	blx	r3
   14600:	2801      	cmp	r0, #1
   14602:	d801      	bhi.n	14608 <lv_theme_material_init+0x1e0>
   14604:	f001 fb21 	bl	15c4a <lv_theme_material_init+0x1822>
   14608:	2000      	movs	r0, #0
   1460a:	4b97      	ldr	r3, [pc, #604]	; (14868 <lv_theme_material_init+0x440>)
   1460c:	4798      	blx	r3
   1460e:	0103      	lsls	r3, r0, #4
   14610:	1a1b      	subs	r3, r3, r0
   14612:	005b      	lsls	r3, r3, #1
   14614:	3350      	adds	r3, #80	; 0x50
   14616:	2140      	movs	r1, #64	; 0x40
   14618:	31ff      	adds	r1, #255	; 0xff
   1461a:	2201      	movs	r2, #1
   1461c:	428b      	cmp	r3, r1
   1461e:	d901      	bls.n	14624 <lv_theme_material_init+0x1fc>
   14620:	f001 fb2c 	bl	15c7c <lv_theme_material_init+0x1854>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14624:	2110      	movs	r1, #16
   14626:	0020      	movs	r0, r4
   14628:	4b90      	ldr	r3, [pc, #576]	; (1486c <lv_theme_material_init+0x444>)
   1462a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   1462c:	4b8a      	ldr	r3, [pc, #552]	; (14858 <lv_theme_material_init+0x430>)
   1462e:	681c      	ldr	r4, [r3, #0]
   14630:	3430      	adds	r4, #48	; 0x30
   14632:	2000      	movs	r0, #0
   14634:	4b8e      	ldr	r3, [pc, #568]	; (14870 <lv_theme_material_init+0x448>)
   14636:	4798      	blx	r3
   14638:	2801      	cmp	r0, #1
   1463a:	d801      	bhi.n	14640 <lv_theme_material_init+0x218>
   1463c:	f001 fb2b 	bl	15c96 <lv_theme_material_init+0x186e>
   14640:	2000      	movs	r0, #0
   14642:	4b89      	ldr	r3, [pc, #548]	; (14868 <lv_theme_material_init+0x440>)
   14644:	4798      	blx	r3
   14646:	0103      	lsls	r3, r0, #4
   14648:	1a1b      	subs	r3, r3, r0
   1464a:	005b      	lsls	r3, r3, #1
   1464c:	3350      	adds	r3, #80	; 0x50
   1464e:	2140      	movs	r1, #64	; 0x40
   14650:	31ff      	adds	r1, #255	; 0xff
   14652:	2201      	movs	r2, #1
   14654:	428b      	cmp	r3, r1
   14656:	d901      	bls.n	1465c <lv_theme_material_init+0x234>
   14658:	f001 fb36 	bl	15cc8 <lv_theme_material_init+0x18a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1465c:	2112      	movs	r1, #18
   1465e:	0020      	movs	r0, r4
   14660:	4b82      	ldr	r3, [pc, #520]	; (1486c <lv_theme_material_init+0x444>)
   14662:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   14664:	4b7c      	ldr	r3, [pc, #496]	; (14858 <lv_theme_material_init+0x430>)
   14666:	681c      	ldr	r4, [r3, #0]
   14668:	3430      	adds	r4, #48	; 0x30
   1466a:	2000      	movs	r0, #0
   1466c:	4b80      	ldr	r3, [pc, #512]	; (14870 <lv_theme_material_init+0x448>)
   1466e:	4798      	blx	r3
   14670:	2801      	cmp	r0, #1
   14672:	d801      	bhi.n	14678 <lv_theme_material_init+0x250>
   14674:	f001 fb35 	bl	15ce2 <lv_theme_material_init+0x18ba>
   14678:	2000      	movs	r0, #0
   1467a:	4b7b      	ldr	r3, [pc, #492]	; (14868 <lv_theme_material_init+0x440>)
   1467c:	4798      	blx	r3
   1467e:	0103      	lsls	r3, r0, #4
   14680:	1a1b      	subs	r3, r3, r0
   14682:	005b      	lsls	r3, r3, #1
   14684:	3350      	adds	r3, #80	; 0x50
   14686:	2140      	movs	r1, #64	; 0x40
   14688:	31ff      	adds	r1, #255	; 0xff
   1468a:	2201      	movs	r2, #1
   1468c:	428b      	cmp	r3, r1
   1468e:	d901      	bls.n	14694 <lv_theme_material_init+0x26c>
   14690:	f001 fb40 	bl	15d14 <lv_theme_material_init+0x18ec>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14694:	2113      	movs	r1, #19
   14696:	0020      	movs	r0, r4
   14698:	4b74      	ldr	r3, [pc, #464]	; (1486c <lv_theme_material_init+0x444>)
   1469a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   1469c:	4b6e      	ldr	r3, [pc, #440]	; (14858 <lv_theme_material_init+0x430>)
   1469e:	681c      	ldr	r4, [r3, #0]
   146a0:	3430      	adds	r4, #48	; 0x30
   146a2:	2000      	movs	r0, #0
   146a4:	4b72      	ldr	r3, [pc, #456]	; (14870 <lv_theme_material_init+0x448>)
   146a6:	4798      	blx	r3
   146a8:	2801      	cmp	r0, #1
   146aa:	d801      	bhi.n	146b0 <lv_theme_material_init+0x288>
   146ac:	f001 fb3f 	bl	15d2e <lv_theme_material_init+0x1906>
   146b0:	2000      	movs	r0, #0
   146b2:	4b6d      	ldr	r3, [pc, #436]	; (14868 <lv_theme_material_init+0x440>)
   146b4:	4798      	blx	r3
   146b6:	0103      	lsls	r3, r0, #4
   146b8:	1a1b      	subs	r3, r3, r0
   146ba:	005b      	lsls	r3, r3, #1
   146bc:	3350      	adds	r3, #80	; 0x50
   146be:	2140      	movs	r1, #64	; 0x40
   146c0:	31ff      	adds	r1, #255	; 0xff
   146c2:	2201      	movs	r2, #1
   146c4:	428b      	cmp	r3, r1
   146c6:	d901      	bls.n	146cc <lv_theme_material_init+0x2a4>
   146c8:	f001 fb64 	bl	15d94 <lv_theme_material_init+0x196c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   146cc:	2111      	movs	r1, #17
   146ce:	0020      	movs	r0, r4
   146d0:	4b66      	ldr	r3, [pc, #408]	; (1486c <lv_theme_material_init+0x444>)
   146d2:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
   146d4:	4b60      	ldr	r3, [pc, #384]	; (14858 <lv_theme_material_init+0x430>)
   146d6:	6818      	ldr	r0, [r3, #0]
   146d8:	3030      	adds	r0, #48	; 0x30
   146da:	4b56      	ldr	r3, [pc, #344]	; (14834 <lv_theme_material_init+0x40c>)
   146dc:	699b      	ldr	r3, [r3, #24]
   146de:	079b      	lsls	r3, r3, #30
   146e0:	d501      	bpl.n	146e6 <lv_theme_material_init+0x2be>
   146e2:	f001 fb64 	bl	15dae <lv_theme_material_init+0x1986>
   146e6:	223f      	movs	r2, #63	; 0x3f
   146e8:	231f      	movs	r3, #31
   146ea:	0152      	lsls	r2, r2, #5
   146ec:	02d9      	lsls	r1, r3, #11
   146ee:	431a      	orrs	r2, r3
   146f0:	430a      	orrs	r2, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   146f2:	4960      	ldr	r1, [pc, #384]	; (14874 <lv_theme_material_init+0x44c>)
   146f4:	4b5b      	ldr	r3, [pc, #364]	; (14864 <lv_theme_material_init+0x43c>)
   146f6:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
   146f8:	4c57      	ldr	r4, [pc, #348]	; (14858 <lv_theme_material_init+0x430>)
   146fa:	6820      	ldr	r0, [r4, #0]
   146fc:	3034      	adds	r0, #52	; 0x34
   146fe:	4b57      	ldr	r3, [pc, #348]	; (1485c <lv_theme_material_init+0x434>)
   14700:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   14702:	6820      	ldr	r0, [r4, #0]
   14704:	3034      	adds	r0, #52	; 0x34
   14706:	4b4b      	ldr	r3, [pc, #300]	; (14834 <lv_theme_material_init+0x40c>)
   14708:	699b      	ldr	r3, [r3, #24]
   1470a:	079b      	lsls	r3, r3, #30
   1470c:	d501      	bpl.n	14712 <lv_theme_material_init+0x2ea>
   1470e:	f001 fb52 	bl	15db6 <lv_theme_material_init+0x198e>
   14712:	231d      	movs	r3, #29
   14714:	213b      	movs	r1, #59	; 0x3b
   14716:	221d      	movs	r2, #29
   14718:	0149      	lsls	r1, r1, #5
   1471a:	02db      	lsls	r3, r3, #11
   1471c:	430a      	orrs	r2, r1
   1471e:	431a      	orrs	r2, r3
   14720:	494f      	ldr	r1, [pc, #316]	; (14860 <lv_theme_material_init+0x438>)
   14722:	4b50      	ldr	r3, [pc, #320]	; (14864 <lv_theme_material_init+0x43c>)
   14724:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   14726:	4b4c      	ldr	r3, [pc, #304]	; (14858 <lv_theme_material_init+0x430>)
   14728:	681c      	ldr	r4, [r3, #0]
   1472a:	3434      	adds	r4, #52	; 0x34
   1472c:	2000      	movs	r0, #0
   1472e:	4b50      	ldr	r3, [pc, #320]	; (14870 <lv_theme_material_init+0x448>)
   14730:	4798      	blx	r3
   14732:	2801      	cmp	r0, #1
   14734:	d801      	bhi.n	1473a <lv_theme_material_init+0x312>
   14736:	f001 fb43 	bl	15dc0 <lv_theme_material_init+0x1998>
   1473a:	2000      	movs	r0, #0
   1473c:	4b4a      	ldr	r3, [pc, #296]	; (14868 <lv_theme_material_init+0x440>)
   1473e:	4798      	blx	r3
   14740:	0103      	lsls	r3, r0, #4
   14742:	1a1b      	subs	r3, r3, r0
   14744:	005b      	lsls	r3, r3, #1
   14746:	3350      	adds	r3, #80	; 0x50
   14748:	2140      	movs	r1, #64	; 0x40
   1474a:	31ff      	adds	r1, #255	; 0xff
   1474c:	2201      	movs	r2, #1
   1474e:	428b      	cmp	r3, r1
   14750:	d901      	bls.n	14756 <lv_theme_material_init+0x32e>
   14752:	f001 fb4e 	bl	15df2 <lv_theme_material_init+0x19ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14756:	2112      	movs	r1, #18
   14758:	0020      	movs	r0, r4
   1475a:	4b44      	ldr	r3, [pc, #272]	; (1486c <lv_theme_material_init+0x444>)
   1475c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   1475e:	4b3e      	ldr	r3, [pc, #248]	; (14858 <lv_theme_material_init+0x430>)
   14760:	681c      	ldr	r4, [r3, #0]
   14762:	3434      	adds	r4, #52	; 0x34
   14764:	2000      	movs	r0, #0
   14766:	4b42      	ldr	r3, [pc, #264]	; (14870 <lv_theme_material_init+0x448>)
   14768:	4798      	blx	r3
   1476a:	2801      	cmp	r0, #1
   1476c:	d801      	bhi.n	14772 <lv_theme_material_init+0x34a>
   1476e:	f001 fb4d 	bl	15e0c <lv_theme_material_init+0x19e4>
   14772:	2000      	movs	r0, #0
   14774:	4b3c      	ldr	r3, [pc, #240]	; (14868 <lv_theme_material_init+0x440>)
   14776:	4798      	blx	r3
   14778:	0103      	lsls	r3, r0, #4
   1477a:	1a1b      	subs	r3, r3, r0
   1477c:	005b      	lsls	r3, r3, #1
   1477e:	3350      	adds	r3, #80	; 0x50
   14780:	2140      	movs	r1, #64	; 0x40
   14782:	31ff      	adds	r1, #255	; 0xff
   14784:	2201      	movs	r2, #1
   14786:	428b      	cmp	r3, r1
   14788:	d901      	bls.n	1478e <lv_theme_material_init+0x366>
   1478a:	f001 fb58 	bl	15e3e <lv_theme_material_init+0x1a16>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1478e:	2113      	movs	r1, #19
   14790:	0020      	movs	r0, r4
   14792:	4b36      	ldr	r3, [pc, #216]	; (1486c <lv_theme_material_init+0x444>)
   14794:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   14796:	4b30      	ldr	r3, [pc, #192]	; (14858 <lv_theme_material_init+0x430>)
   14798:	681c      	ldr	r4, [r3, #0]
   1479a:	3434      	adds	r4, #52	; 0x34
   1479c:	2000      	movs	r0, #0
   1479e:	4b34      	ldr	r3, [pc, #208]	; (14870 <lv_theme_material_init+0x448>)
   147a0:	4798      	blx	r3
   147a2:	2801      	cmp	r0, #1
   147a4:	d801      	bhi.n	147aa <lv_theme_material_init+0x382>
   147a6:	f001 fb57 	bl	15e58 <lv_theme_material_init+0x1a30>
   147aa:	2000      	movs	r0, #0
   147ac:	4b2e      	ldr	r3, [pc, #184]	; (14868 <lv_theme_material_init+0x440>)
   147ae:	4798      	blx	r3
   147b0:	0103      	lsls	r3, r0, #4
   147b2:	1a1b      	subs	r3, r3, r0
   147b4:	005b      	lsls	r3, r3, #1
   147b6:	3350      	adds	r3, #80	; 0x50
   147b8:	2140      	movs	r1, #64	; 0x40
   147ba:	31ff      	adds	r1, #255	; 0xff
   147bc:	2201      	movs	r2, #1
   147be:	428b      	cmp	r3, r1
   147c0:	d901      	bls.n	147c6 <lv_theme_material_init+0x39e>
   147c2:	f001 fb62 	bl	15e8a <lv_theme_material_init+0x1a62>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   147c6:	2111      	movs	r1, #17
   147c8:	0020      	movs	r0, r4
   147ca:	4b28      	ldr	r3, [pc, #160]	; (1486c <lv_theme_material_init+0x444>)
   147cc:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
   147ce:	4c22      	ldr	r4, [pc, #136]	; (14858 <lv_theme_material_init+0x430>)
   147d0:	6820      	ldr	r0, [r4, #0]
   147d2:	302c      	adds	r0, #44	; 0x2c
   147d4:	4b21      	ldr	r3, [pc, #132]	; (1485c <lv_theme_material_init+0x434>)
   147d6:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   147d8:	6824      	ldr	r4, [r4, #0]
   147da:	342c      	adds	r4, #44	; 0x2c
   147dc:	2000      	movs	r0, #0
   147de:	4b22      	ldr	r3, [pc, #136]	; (14868 <lv_theme_material_init+0x440>)
   147e0:	4798      	blx	r3
   147e2:	3014      	adds	r0, #20
   147e4:	0080      	lsls	r0, r0, #2
   147e6:	2340      	movs	r3, #64	; 0x40
   147e8:	33ff      	adds	r3, #255	; 0xff
   147ea:	2201      	movs	r2, #1
   147ec:	4298      	cmp	r0, r3
   147ee:	d901      	bls.n	147f4 <lv_theme_material_init+0x3cc>
   147f0:	f001 fb58 	bl	15ea4 <lv_theme_material_init+0x1a7c>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   147f4:	2101      	movs	r1, #1
   147f6:	0020      	movs	r0, r4
   147f8:	4b1c      	ldr	r3, [pc, #112]	; (1486c <lv_theme_material_init+0x444>)
   147fa:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   147fc:	4b16      	ldr	r3, [pc, #88]	; (14858 <lv_theme_material_init+0x430>)
   147fe:	6818      	ldr	r0, [r3, #0]
   14800:	302c      	adds	r0, #44	; 0x2c
   14802:	4b0c      	ldr	r3, [pc, #48]	; (14834 <lv_theme_material_init+0x40c>)
   14804:	699b      	ldr	r3, [r3, #24]
   14806:	079b      	lsls	r3, r3, #30
   14808:	d501      	bpl.n	1480e <lv_theme_material_init+0x3e6>
   1480a:	f001 fb56 	bl	15eba <lv_theme_material_init+0x1a92>
   1480e:	231f      	movs	r3, #31
   14810:	213f      	movs	r1, #63	; 0x3f
   14812:	221f      	movs	r2, #31
   14814:	0149      	lsls	r1, r1, #5
   14816:	02db      	lsls	r3, r3, #11
   14818:	430a      	orrs	r2, r1
   1481a:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1481c:	4916      	ldr	r1, [pc, #88]	; (14878 <lv_theme_material_init+0x450>)
   1481e:	4b11      	ldr	r3, [pc, #68]	; (14864 <lv_theme_material_init+0x43c>)
   14820:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
   14822:	4b0d      	ldr	r3, [pc, #52]	; (14858 <lv_theme_material_init+0x430>)
   14824:	6818      	ldr	r0, [r3, #0]
   14826:	302c      	adds	r0, #44	; 0x2c
   14828:	4b02      	ldr	r3, [pc, #8]	; (14834 <lv_theme_material_init+0x40c>)
   1482a:	699b      	ldr	r3, [r3, #24]
   1482c:	2233      	movs	r2, #51	; 0x33
   1482e:	e025      	b.n	1487c <lv_theme_material_init+0x454>
   14830:	20004c34 	.word	0x20004c34
   14834:	20004c3c 	.word	0x20004c3c
   14838:	00012451 	.word	0x00012451
   1483c:	0001361d 	.word	0x0001361d
   14840:	00014315 	.word	0x00014315
   14844:	00013771 	.word	0x00013771
   14848:	00013a05 	.word	0x00013a05
   1484c:	00013b45 	.word	0x00013b45
   14850:	00013d69 	.word	0x00013d69
   14854:	00014211 	.word	0x00014211
   14858:	20004c38 	.word	0x20004c38
   1485c:	0001242d 	.word	0x0001242d
   14860:	00008089 	.word	0x00008089
   14864:	00004ded 	.word	0x00004ded
   14868:	0000f5fd 	.word	0x0000f5fd
   1486c:	00004c8d 	.word	0x00004c8d
   14870:	0000f619 	.word	0x0000f619
   14874:	00009089 	.word	0x00009089
   14878:	00008189 	.word	0x00008189
   1487c:	079b      	lsls	r3, r3, #30
   1487e:	d400      	bmi.n	14882 <lv_theme_material_init+0x45a>
   14880:	3233      	adds	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14882:	2196      	movs	r1, #150	; 0x96
   14884:	0049      	lsls	r1, r1, #1
   14886:	4dfa      	ldr	r5, [pc, #1000]	; (14c70 <lv_theme_material_init+0x848>)
   14888:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
   1488a:	4cfa      	ldr	r4, [pc, #1000]	; (14c74 <lv_theme_material_init+0x84c>)
   1488c:	6820      	ldr	r0, [r4, #0]
   1488e:	302c      	adds	r0, #44	; 0x2c
   14890:	2233      	movs	r2, #51	; 0x33
   14892:	49f9      	ldr	r1, [pc, #996]	; (14c78 <lv_theme_material_init+0x850>)
   14894:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
   14896:	6820      	ldr	r0, [r4, #0]
   14898:	302c      	adds	r0, #44	; 0x2c
   1489a:	22ff      	movs	r2, #255	; 0xff
   1489c:	218b      	movs	r1, #139	; 0x8b
   1489e:	0089      	lsls	r1, r1, #2
   148a0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
   148a2:	6820      	ldr	r0, [r4, #0]
   148a4:	302c      	adds	r0, #44	; 0x2c
   148a6:	4bf5      	ldr	r3, [pc, #980]	; (14c7c <lv_theme_material_init+0x854>)
   148a8:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   148aa:	49f5      	ldr	r1, [pc, #980]	; (14c80 <lv_theme_material_init+0x858>)
   148ac:	4ef5      	ldr	r6, [pc, #980]	; (14c84 <lv_theme_material_init+0x85c>)
   148ae:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
   148b0:	6820      	ldr	r0, [r4, #0]
   148b2:	302c      	adds	r0, #44	; 0x2c
   148b4:	4df4      	ldr	r5, [pc, #976]	; (14c88 <lv_theme_material_init+0x860>)
   148b6:	88aa      	ldrh	r2, [r5, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   148b8:	49f4      	ldr	r1, [pc, #976]	; (14c8c <lv_theme_material_init+0x864>)
   148ba:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
   148bc:	6820      	ldr	r0, [r4, #0]
   148be:	302c      	adds	r0, #44	; 0x2c
   148c0:	69ab      	ldr	r3, [r5, #24]
   148c2:	079b      	lsls	r3, r3, #30
   148c4:	d501      	bpl.n	148ca <lv_theme_material_init+0x4a2>
   148c6:	f001 fafd 	bl	15ec4 <lv_theme_material_init+0x1a9c>
   148ca:	223f      	movs	r2, #63	; 0x3f
   148cc:	231f      	movs	r3, #31
   148ce:	0152      	lsls	r2, r2, #5
   148d0:	02d9      	lsls	r1, r3, #11
   148d2:	431a      	orrs	r2, r3
   148d4:	430a      	orrs	r2, r1
   148d6:	2129      	movs	r1, #41	; 0x29
   148d8:	4eea      	ldr	r6, [pc, #936]	; (14c84 <lv_theme_material_init+0x85c>)
   148da:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   148dc:	4ce5      	ldr	r4, [pc, #916]	; (14c74 <lv_theme_material_init+0x84c>)
   148de:	6820      	ldr	r0, [r4, #0]
   148e0:	302c      	adds	r0, #44	; 0x2c
   148e2:	4fe9      	ldr	r7, [pc, #932]	; (14c88 <lv_theme_material_init+0x860>)
   148e4:	88ba      	ldrh	r2, [r7, #4]
   148e6:	212a      	movs	r1, #42	; 0x2a
   148e8:	31ff      	adds	r1, #255	; 0xff
   148ea:	47b0      	blx	r6
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
   148ec:	6820      	ldr	r0, [r4, #0]
   148ee:	302c      	adds	r0, #44	; 0x2c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   148f0:	2202      	movs	r2, #2
   148f2:	2198      	movs	r1, #152	; 0x98
   148f4:	0049      	lsls	r1, r1, #1
   148f6:	4de6      	ldr	r5, [pc, #920]	; (14c90 <lv_theme_material_init+0x868>)
   148f8:	47a8      	blx	r5
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
   148fa:	6820      	ldr	r0, [r4, #0]
   148fc:	302c      	adds	r0, #44	; 0x2c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   148fe:	2204      	movs	r2, #4
   14900:	2132      	movs	r1, #50	; 0x32
   14902:	31ff      	adds	r1, #255	; 0xff
   14904:	47a8      	blx	r5
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   14906:	6820      	ldr	r0, [r4, #0]
   14908:	302c      	adds	r0, #44	; 0x2c
   1490a:	88ba      	ldrh	r2, [r7, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1490c:	213a      	movs	r1, #58	; 0x3a
   1490e:	31ff      	adds	r1, #255	; 0xff
   14910:	47b0      	blx	r6
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   14912:	6824      	ldr	r4, [r4, #0]
   14914:	342c      	adds	r4, #44	; 0x2c
   14916:	2000      	movs	r0, #0
   14918:	4bde      	ldr	r3, [pc, #888]	; (14c94 <lv_theme_material_init+0x86c>)
   1491a:	4798      	blx	r3
   1491c:	0043      	lsls	r3, r0, #1
   1491e:	1818      	adds	r0, r3, r0
   14920:	3050      	adds	r0, #80	; 0x50
   14922:	2340      	movs	r3, #64	; 0x40
   14924:	33ff      	adds	r3, #255	; 0xff
   14926:	2201      	movs	r2, #1
   14928:	4298      	cmp	r0, r3
   1492a:	d901      	bls.n	14930 <lv_theme_material_init+0x508>
   1492c:	f001 face 	bl	15ecc <lv_theme_material_init+0x1aa4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14930:	2114      	movs	r1, #20
   14932:	0020      	movs	r0, r4
   14934:	4bd6      	ldr	r3, [pc, #856]	; (14c90 <lv_theme_material_init+0x868>)
   14936:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   14938:	4bce      	ldr	r3, [pc, #824]	; (14c74 <lv_theme_material_init+0x84c>)
   1493a:	681c      	ldr	r4, [r3, #0]
   1493c:	342c      	adds	r4, #44	; 0x2c
   1493e:	2000      	movs	r0, #0
   14940:	4bd5      	ldr	r3, [pc, #852]	; (14c98 <lv_theme_material_init+0x870>)
   14942:	4798      	blx	r3
   14944:	2801      	cmp	r0, #1
   14946:	d801      	bhi.n	1494c <lv_theme_material_init+0x524>
   14948:	f001 facd 	bl	15ee6 <lv_theme_material_init+0x1abe>
   1494c:	2000      	movs	r0, #0
   1494e:	4bd1      	ldr	r3, [pc, #836]	; (14c94 <lv_theme_material_init+0x86c>)
   14950:	4798      	blx	r3
   14952:	0103      	lsls	r3, r0, #4
   14954:	1a1b      	subs	r3, r3, r0
   14956:	005b      	lsls	r3, r3, #1
   14958:	3350      	adds	r3, #80	; 0x50
   1495a:	2140      	movs	r1, #64	; 0x40
   1495c:	31ff      	adds	r1, #255	; 0xff
   1495e:	2201      	movs	r2, #1
   14960:	428b      	cmp	r3, r1
   14962:	d901      	bls.n	14968 <lv_theme_material_init+0x540>
   14964:	f001 fad8 	bl	15f18 <lv_theme_material_init+0x1af0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14968:	2112      	movs	r1, #18
   1496a:	0020      	movs	r0, r4
   1496c:	4bc8      	ldr	r3, [pc, #800]	; (14c90 <lv_theme_material_init+0x868>)
   1496e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   14970:	4bc0      	ldr	r3, [pc, #768]	; (14c74 <lv_theme_material_init+0x84c>)
   14972:	681c      	ldr	r4, [r3, #0]
   14974:	342c      	adds	r4, #44	; 0x2c
   14976:	2000      	movs	r0, #0
   14978:	4bc7      	ldr	r3, [pc, #796]	; (14c98 <lv_theme_material_init+0x870>)
   1497a:	4798      	blx	r3
   1497c:	2801      	cmp	r0, #1
   1497e:	d801      	bhi.n	14984 <lv_theme_material_init+0x55c>
   14980:	f001 fad7 	bl	15f32 <lv_theme_material_init+0x1b0a>
   14984:	2000      	movs	r0, #0
   14986:	4bc3      	ldr	r3, [pc, #780]	; (14c94 <lv_theme_material_init+0x86c>)
   14988:	4798      	blx	r3
   1498a:	0103      	lsls	r3, r0, #4
   1498c:	1a1b      	subs	r3, r3, r0
   1498e:	005b      	lsls	r3, r3, #1
   14990:	3350      	adds	r3, #80	; 0x50
   14992:	2140      	movs	r1, #64	; 0x40
   14994:	31ff      	adds	r1, #255	; 0xff
   14996:	2201      	movs	r2, #1
   14998:	428b      	cmp	r3, r1
   1499a:	d901      	bls.n	149a0 <lv_theme_material_init+0x578>
   1499c:	f001 fae2 	bl	15f64 <lv_theme_material_init+0x1b3c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   149a0:	2113      	movs	r1, #19
   149a2:	0020      	movs	r0, r4
   149a4:	4bba      	ldr	r3, [pc, #744]	; (14c90 <lv_theme_material_init+0x868>)
   149a6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   149a8:	4bb2      	ldr	r3, [pc, #712]	; (14c74 <lv_theme_material_init+0x84c>)
   149aa:	681c      	ldr	r4, [r3, #0]
   149ac:	342c      	adds	r4, #44	; 0x2c
   149ae:	2000      	movs	r0, #0
   149b0:	4bb9      	ldr	r3, [pc, #740]	; (14c98 <lv_theme_material_init+0x870>)
   149b2:	4798      	blx	r3
   149b4:	2801      	cmp	r0, #1
   149b6:	d801      	bhi.n	149bc <lv_theme_material_init+0x594>
   149b8:	f001 fae1 	bl	15f7e <lv_theme_material_init+0x1b56>
   149bc:	2000      	movs	r0, #0
   149be:	4bb5      	ldr	r3, [pc, #724]	; (14c94 <lv_theme_material_init+0x86c>)
   149c0:	4798      	blx	r3
   149c2:	0103      	lsls	r3, r0, #4
   149c4:	1a1b      	subs	r3, r3, r0
   149c6:	005b      	lsls	r3, r3, #1
   149c8:	3350      	adds	r3, #80	; 0x50
   149ca:	2140      	movs	r1, #64	; 0x40
   149cc:	31ff      	adds	r1, #255	; 0xff
   149ce:	2201      	movs	r2, #1
   149d0:	428b      	cmp	r3, r1
   149d2:	d901      	bls.n	149d8 <lv_theme_material_init+0x5b0>
   149d4:	f001 faec 	bl	15fb0 <lv_theme_material_init+0x1b88>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   149d8:	2111      	movs	r1, #17
   149da:	0020      	movs	r0, r4
   149dc:	4bac      	ldr	r3, [pc, #688]	; (14c90 <lv_theme_material_init+0x868>)
   149de:	4798      	blx	r3
    style_init_reset(&styles->cpicker_bg);
   149e0:	4ca4      	ldr	r4, [pc, #656]	; (14c74 <lv_theme_material_init+0x84c>)
   149e2:	6820      	ldr	r0, [r4, #0]
   149e4:	3038      	adds	r0, #56	; 0x38
   149e6:	4bad      	ldr	r3, [pc, #692]	; (14c9c <lv_theme_material_init+0x874>)
   149e8:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   149ea:	6824      	ldr	r4, [r4, #0]
   149ec:	3438      	adds	r4, #56	; 0x38
   149ee:	2000      	movs	r0, #0
   149f0:	4ba8      	ldr	r3, [pc, #672]	; (14c94 <lv_theme_material_init+0x86c>)
   149f2:	4798      	blx	r3
   149f4:	0103      	lsls	r3, r0, #4
   149f6:	1a1b      	subs	r3, r3, r0
   149f8:	005b      	lsls	r3, r3, #1
   149fa:	3350      	adds	r3, #80	; 0x50
   149fc:	2140      	movs	r1, #64	; 0x40
   149fe:	31ff      	adds	r1, #255	; 0xff
   14a00:	2201      	movs	r2, #1
   14a02:	428b      	cmp	r3, r1
   14a04:	d901      	bls.n	14a0a <lv_theme_material_init+0x5e2>
   14a06:	f001 fae0 	bl	15fca <lv_theme_material_init+0x1ba2>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   14a0a:	21c0      	movs	r1, #192	; 0xc0
   14a0c:	0020      	movs	r0, r4
   14a0e:	4ba0      	ldr	r3, [pc, #640]	; (14c90 <lv_theme_material_init+0x868>)
   14a10:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   14a12:	4c98      	ldr	r4, [pc, #608]	; (14c74 <lv_theme_material_init+0x84c>)
   14a14:	6820      	ldr	r0, [r4, #0]
   14a16:	3038      	adds	r0, #56	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14a18:	22ff      	movs	r2, #255	; 0xff
   14a1a:	212c      	movs	r1, #44	; 0x2c
   14a1c:	4b94      	ldr	r3, [pc, #592]	; (14c70 <lv_theme_material_init+0x848>)
   14a1e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
   14a20:	6820      	ldr	r0, [r4, #0]
   14a22:	3038      	adds	r0, #56	; 0x38
   14a24:	4b98      	ldr	r3, [pc, #608]	; (14c88 <lv_theme_material_init+0x860>)
   14a26:	699b      	ldr	r3, [r3, #24]
   14a28:	079b      	lsls	r3, r3, #30
   14a2a:	d501      	bpl.n	14a30 <lv_theme_material_init+0x608>
   14a2c:	f001 fada 	bl	15fe4 <lv_theme_material_init+0x1bbc>
   14a30:	2308      	movs	r3, #8
   14a32:	2112      	movs	r1, #18
   14a34:	220b      	movs	r2, #11
   14a36:	0149      	lsls	r1, r1, #5
   14a38:	02db      	lsls	r3, r3, #11
   14a3a:	430a      	orrs	r2, r1
   14a3c:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14a3e:	2129      	movs	r1, #41	; 0x29
   14a40:	4b90      	ldr	r3, [pc, #576]	; (14c84 <lv_theme_material_init+0x85c>)
   14a42:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   14a44:	4b8b      	ldr	r3, [pc, #556]	; (14c74 <lv_theme_material_init+0x84c>)
   14a46:	681c      	ldr	r4, [r3, #0]
   14a48:	3438      	adds	r4, #56	; 0x38
   14a4a:	2000      	movs	r0, #0
   14a4c:	4b91      	ldr	r3, [pc, #580]	; (14c94 <lv_theme_material_init+0x86c>)
   14a4e:	4798      	blx	r3
   14a50:	0083      	lsls	r3, r0, #2
   14a52:	181b      	adds	r3, r3, r0
   14a54:	009b      	lsls	r3, r3, #2
   14a56:	3350      	adds	r3, #80	; 0x50
   14a58:	2140      	movs	r1, #64	; 0x40
   14a5a:	31ff      	adds	r1, #255	; 0xff
   14a5c:	2201      	movs	r2, #1
   14a5e:	428b      	cmp	r3, r1
   14a60:	d901      	bls.n	14a66 <lv_theme_material_init+0x63e>
   14a62:	f001 fac4 	bl	15fee <lv_theme_material_init+0x1bc6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14a66:	2114      	movs	r1, #20
   14a68:	0020      	movs	r0, r4
   14a6a:	4e89      	ldr	r6, [pc, #548]	; (14c90 <lv_theme_material_init+0x868>)
   14a6c:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14a6e:	4d8c      	ldr	r5, [pc, #560]	; (14ca0 <lv_theme_material_init+0x878>)
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14a70:	4c80      	ldr	r4, [pc, #512]	; (14c74 <lv_theme_material_init+0x84c>)
   14a72:	6820      	ldr	r0, [r4, #0]
   14a74:	3038      	adds	r0, #56	; 0x38
   14a76:	002a      	movs	r2, r5
   14a78:	2101      	movs	r1, #1
   14a7a:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
   14a7c:	6820      	ldr	r0, [r4, #0]
   14a7e:	303c      	adds	r0, #60	; 0x3c
   14a80:	4b86      	ldr	r3, [pc, #536]	; (14c9c <lv_theme_material_init+0x874>)
   14a82:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14a84:	6820      	ldr	r0, [r4, #0]
   14a86:	303c      	adds	r0, #60	; 0x3c
   14a88:	002a      	movs	r2, r5
   14a8a:	2101      	movs	r1, #1
   14a8c:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   14a8e:	6820      	ldr	r0, [r4, #0]
   14a90:	303c      	adds	r0, #60	; 0x3c
   14a92:	4f7a      	ldr	r7, [pc, #488]	; (14c7c <lv_theme_material_init+0x854>)
   14a94:	883a      	ldrh	r2, [r7, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14a96:	2129      	movs	r1, #41	; 0x29
   14a98:	4d7a      	ldr	r5, [pc, #488]	; (14c84 <lv_theme_material_init+0x85c>)
   14a9a:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   14a9c:	6820      	ldr	r0, [r4, #0]
   14a9e:	303c      	adds	r0, #60	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14aa0:	22ff      	movs	r2, #255	; 0xff
   14aa2:	212c      	movs	r1, #44	; 0x2c
   14aa4:	4b72      	ldr	r3, [pc, #456]	; (14c70 <lv_theme_material_init+0x848>)
   14aa6:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
   14aa8:	6820      	ldr	r0, [r4, #0]
   14aaa:	303c      	adds	r0, #60	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   14aac:	2202      	movs	r2, #2
   14aae:	2130      	movs	r1, #48	; 0x30
   14ab0:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
   14ab2:	6820      	ldr	r0, [r4, #0]
   14ab4:	303c      	adds	r0, #60	; 0x3c
   14ab6:	88ba      	ldrh	r2, [r7, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   14ab8:	2139      	movs	r1, #57	; 0x39
   14aba:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
   14abc:	6820      	ldr	r0, [r4, #0]
   14abe:	303c      	adds	r0, #60	; 0x3c
   14ac0:	4e71      	ldr	r6, [pc, #452]	; (14c88 <lv_theme_material_init+0x860>)
   14ac2:	88b2      	ldrh	r2, [r6, #4]
   14ac4:	4977      	ldr	r1, [pc, #476]	; (14ca4 <lv_theme_material_init+0x87c>)
   14ac6:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
   14ac8:	6820      	ldr	r0, [r4, #0]
   14aca:	303c      	adds	r0, #60	; 0x3c
   14acc:	88f2      	ldrh	r2, [r6, #6]
   14ace:	4976      	ldr	r1, [pc, #472]	; (14ca8 <lv_theme_material_init+0x880>)
   14ad0:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   14ad2:	6824      	ldr	r4, [r4, #0]
   14ad4:	343c      	adds	r4, #60	; 0x3c
   14ad6:	2000      	movs	r0, #0
   14ad8:	4b6e      	ldr	r3, [pc, #440]	; (14c94 <lv_theme_material_init+0x86c>)
   14ada:	4798      	blx	r3
   14adc:	0003      	movs	r3, r0
   14ade:	0040      	lsls	r0, r0, #1
   14ae0:	18c0      	adds	r0, r0, r3
   14ae2:	0080      	lsls	r0, r0, #2
   14ae4:	18c0      	adds	r0, r0, r3
   14ae6:	3050      	adds	r0, #80	; 0x50
   14ae8:	2340      	movs	r3, #64	; 0x40
   14aea:	33ff      	adds	r3, #255	; 0xff
   14aec:	2201      	movs	r2, #1
   14aee:	4298      	cmp	r0, r3
   14af0:	d901      	bls.n	14af6 <lv_theme_material_init+0x6ce>
   14af2:	f001 fa8a 	bl	1600a <lv_theme_material_init+0x1be2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14af6:	2112      	movs	r1, #18
   14af8:	0020      	movs	r0, r4
   14afa:	4b65      	ldr	r3, [pc, #404]	; (14c90 <lv_theme_material_init+0x868>)
   14afc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   14afe:	4b5d      	ldr	r3, [pc, #372]	; (14c74 <lv_theme_material_init+0x84c>)
   14b00:	681c      	ldr	r4, [r3, #0]
   14b02:	343c      	adds	r4, #60	; 0x3c
   14b04:	2000      	movs	r0, #0
   14b06:	4b63      	ldr	r3, [pc, #396]	; (14c94 <lv_theme_material_init+0x86c>)
   14b08:	4798      	blx	r3
   14b0a:	0003      	movs	r3, r0
   14b0c:	0040      	lsls	r0, r0, #1
   14b0e:	18c0      	adds	r0, r0, r3
   14b10:	0080      	lsls	r0, r0, #2
   14b12:	18c0      	adds	r0, r0, r3
   14b14:	3050      	adds	r0, #80	; 0x50
   14b16:	2340      	movs	r3, #64	; 0x40
   14b18:	33ff      	adds	r3, #255	; 0xff
   14b1a:	2201      	movs	r2, #1
   14b1c:	4298      	cmp	r0, r3
   14b1e:	d901      	bls.n	14b24 <lv_theme_material_init+0x6fc>
   14b20:	f001 fa82 	bl	16028 <lv_theme_material_init+0x1c00>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14b24:	2113      	movs	r1, #19
   14b26:	0020      	movs	r0, r4
   14b28:	4b59      	ldr	r3, [pc, #356]	; (14c90 <lv_theme_material_init+0x868>)
   14b2a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   14b2c:	4b51      	ldr	r3, [pc, #324]	; (14c74 <lv_theme_material_init+0x84c>)
   14b2e:	681c      	ldr	r4, [r3, #0]
   14b30:	343c      	adds	r4, #60	; 0x3c
   14b32:	2000      	movs	r0, #0
   14b34:	4b57      	ldr	r3, [pc, #348]	; (14c94 <lv_theme_material_init+0x86c>)
   14b36:	4798      	blx	r3
   14b38:	0003      	movs	r3, r0
   14b3a:	0040      	lsls	r0, r0, #1
   14b3c:	18c0      	adds	r0, r0, r3
   14b3e:	0080      	lsls	r0, r0, #2
   14b40:	18c0      	adds	r0, r0, r3
   14b42:	3050      	adds	r0, #80	; 0x50
   14b44:	2340      	movs	r3, #64	; 0x40
   14b46:	33ff      	adds	r3, #255	; 0xff
   14b48:	2201      	movs	r2, #1
   14b4a:	4298      	cmp	r0, r3
   14b4c:	d901      	bls.n	14b52 <lv_theme_material_init+0x72a>
   14b4e:	f001 fa7a 	bl	16046 <lv_theme_material_init+0x1c1e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14b52:	2110      	movs	r1, #16
   14b54:	0020      	movs	r0, r4
   14b56:	4b4e      	ldr	r3, [pc, #312]	; (14c90 <lv_theme_material_init+0x868>)
   14b58:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   14b5a:	4b46      	ldr	r3, [pc, #280]	; (14c74 <lv_theme_material_init+0x84c>)
   14b5c:	681c      	ldr	r4, [r3, #0]
   14b5e:	343c      	adds	r4, #60	; 0x3c
   14b60:	2000      	movs	r0, #0
   14b62:	4b4c      	ldr	r3, [pc, #304]	; (14c94 <lv_theme_material_init+0x86c>)
   14b64:	4798      	blx	r3
   14b66:	0003      	movs	r3, r0
   14b68:	0040      	lsls	r0, r0, #1
   14b6a:	18c0      	adds	r0, r0, r3
   14b6c:	0080      	lsls	r0, r0, #2
   14b6e:	18c0      	adds	r0, r0, r3
   14b70:	3050      	adds	r0, #80	; 0x50
   14b72:	2340      	movs	r3, #64	; 0x40
   14b74:	33ff      	adds	r3, #255	; 0xff
   14b76:	2201      	movs	r2, #1
   14b78:	4298      	cmp	r0, r3
   14b7a:	d901      	bls.n	14b80 <lv_theme_material_init+0x758>
   14b7c:	f001 fa72 	bl	16064 <lv_theme_material_init+0x1c3c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14b80:	2111      	movs	r1, #17
   14b82:	0020      	movs	r0, r4
   14b84:	4b42      	ldr	r3, [pc, #264]	; (14c90 <lv_theme_material_init+0x868>)
   14b86:	4798      	blx	r3
    style_init_reset(&styles->cb_bg);
   14b88:	4c3a      	ldr	r4, [pc, #232]	; (14c74 <lv_theme_material_init+0x84c>)
   14b8a:	6820      	ldr	r0, [r4, #0]
   14b8c:	304c      	adds	r0, #76	; 0x4c
   14b8e:	4b43      	ldr	r3, [pc, #268]	; (14c9c <lv_theme_material_init+0x874>)
   14b90:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   14b92:	6824      	ldr	r4, [r4, #0]
   14b94:	344c      	adds	r4, #76	; 0x4c
   14b96:	2000      	movs	r0, #0
   14b98:	4b3e      	ldr	r3, [pc, #248]	; (14c94 <lv_theme_material_init+0x86c>)
   14b9a:	4798      	blx	r3
   14b9c:	3014      	adds	r0, #20
   14b9e:	0080      	lsls	r0, r0, #2
   14ba0:	2340      	movs	r3, #64	; 0x40
   14ba2:	33ff      	adds	r3, #255	; 0xff
   14ba4:	2201      	movs	r2, #1
   14ba6:	4298      	cmp	r0, r3
   14ba8:	d901      	bls.n	14bae <lv_theme_material_init+0x786>
   14baa:	f001 fa6a 	bl	16082 <lv_theme_material_init+0x1c5a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14bae:	2101      	movs	r1, #1
   14bb0:	0020      	movs	r0, r4
   14bb2:	4b37      	ldr	r3, [pc, #220]	; (14c90 <lv_theme_material_init+0x868>)
   14bb4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14bb6:	4b2f      	ldr	r3, [pc, #188]	; (14c74 <lv_theme_material_init+0x84c>)
   14bb8:	681c      	ldr	r4, [r3, #0]
   14bba:	344c      	adds	r4, #76	; 0x4c
   14bbc:	2000      	movs	r0, #0
   14bbe:	4b35      	ldr	r3, [pc, #212]	; (14c94 <lv_theme_material_init+0x86c>)
   14bc0:	4798      	blx	r3
   14bc2:	0083      	lsls	r3, r0, #2
   14bc4:	181b      	adds	r3, r3, r0
   14bc6:	005b      	lsls	r3, r3, #1
   14bc8:	3350      	adds	r3, #80	; 0x50
   14bca:	2140      	movs	r1, #64	; 0x40
   14bcc:	31ff      	adds	r1, #255	; 0xff
   14bce:	2201      	movs	r2, #1
   14bd0:	428b      	cmp	r3, r1
   14bd2:	d901      	bls.n	14bd8 <lv_theme_material_init+0x7b0>
   14bd4:	f001 fa60 	bl	16098 <lv_theme_material_init+0x1c70>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14bd8:	2114      	movs	r1, #20
   14bda:	0020      	movs	r0, r4
   14bdc:	4b2c      	ldr	r3, [pc, #176]	; (14c90 <lv_theme_material_init+0x868>)
   14bde:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
   14be0:	4c24      	ldr	r4, [pc, #144]	; (14c74 <lv_theme_material_init+0x84c>)
   14be2:	6820      	ldr	r0, [r4, #0]
   14be4:	304c      	adds	r0, #76	; 0x4c
   14be6:	4b28      	ldr	r3, [pc, #160]	; (14c88 <lv_theme_material_init+0x860>)
   14be8:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   14bea:	2149      	movs	r1, #73	; 0x49
   14bec:	4b25      	ldr	r3, [pc, #148]	; (14c84 <lv_theme_material_init+0x85c>)
   14bee:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   14bf0:	6820      	ldr	r0, [r4, #0]
   14bf2:	304c      	adds	r0, #76	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   14bf4:	2200      	movs	r2, #0
   14bf6:	214c      	movs	r1, #76	; 0x4c
   14bf8:	4d1d      	ldr	r5, [pc, #116]	; (14c70 <lv_theme_material_init+0x848>)
   14bfa:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
   14bfc:	6820      	ldr	r0, [r4, #0]
   14bfe:	304c      	adds	r0, #76	; 0x4c
   14c00:	227f      	movs	r2, #127	; 0x7f
   14c02:	2193      	movs	r1, #147	; 0x93
   14c04:	0089      	lsls	r1, r1, #2
   14c06:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   14c08:	6824      	ldr	r4, [r4, #0]
   14c0a:	344c      	adds	r4, #76	; 0x4c
   14c0c:	2000      	movs	r0, #0
   14c0e:	4b21      	ldr	r3, [pc, #132]	; (14c94 <lv_theme_material_init+0x86c>)
   14c10:	4798      	blx	r3
   14c12:	0043      	lsls	r3, r0, #1
   14c14:	1818      	adds	r0, r3, r0
   14c16:	3050      	adds	r0, #80	; 0x50
   14c18:	2340      	movs	r3, #64	; 0x40
   14c1a:	33ff      	adds	r3, #255	; 0xff
   14c1c:	2201      	movs	r2, #1
   14c1e:	4298      	cmp	r0, r3
   14c20:	d901      	bls.n	14c26 <lv_theme_material_init+0x7fe>
   14c22:	f001 fa47 	bl	160b4 <lv_theme_material_init+0x1c8c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   14c26:	2140      	movs	r1, #64	; 0x40
   14c28:	0020      	movs	r0, r4
   14c2a:	4b19      	ldr	r3, [pc, #100]	; (14c90 <lv_theme_material_init+0x868>)
   14c2c:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   14c2e:	4b11      	ldr	r3, [pc, #68]	; (14c74 <lv_theme_material_init+0x84c>)
   14c30:	681c      	ldr	r4, [r3, #0]
   14c32:	344c      	adds	r4, #76	; 0x4c
   14c34:	2000      	movs	r0, #0
   14c36:	4b17      	ldr	r3, [pc, #92]	; (14c94 <lv_theme_material_init+0x86c>)
   14c38:	4798      	blx	r3
   14c3a:	0083      	lsls	r3, r0, #2
   14c3c:	181b      	adds	r3, r3, r0
   14c3e:	005b      	lsls	r3, r3, #1
   14c40:	3350      	adds	r3, #80	; 0x50
   14c42:	2140      	movs	r1, #64	; 0x40
   14c44:	31ff      	adds	r1, #255	; 0xff
   14c46:	2201      	movs	r2, #1
   14c48:	428b      	cmp	r3, r1
   14c4a:	d901      	bls.n	14c50 <lv_theme_material_init+0x828>
   14c4c:	f001 fa3f 	bl	160ce <lv_theme_material_init+0x1ca6>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   14c50:	2141      	movs	r1, #65	; 0x41
   14c52:	0020      	movs	r0, r4
   14c54:	4d0e      	ldr	r5, [pc, #56]	; (14c90 <lv_theme_material_init+0x868>)
   14c56:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   14c58:	4c06      	ldr	r4, [pc, #24]	; (14c74 <lv_theme_material_init+0x84c>)
   14c5a:	6820      	ldr	r0, [r4, #0]
   14c5c:	304c      	adds	r0, #76	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   14c5e:	2296      	movs	r2, #150	; 0x96
   14c60:	21b0      	movs	r1, #176	; 0xb0
   14c62:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   14c64:	6820      	ldr	r0, [r4, #0]
   14c66:	304c      	adds	r0, #76	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   14c68:	224c      	movs	r2, #76	; 0x4c
   14c6a:	21b7      	movs	r1, #183	; 0xb7
   14c6c:	e01e      	b.n	14cac <lv_theme_material_init+0x884>
   14c6e:	46c0      	nop			; (mov r8, r8)
   14c70:	00004f4d 	.word	0x00004f4d
   14c74:	20004c38 	.word	0x20004c38
   14c78:	0000102c 	.word	0x0000102c
   14c7c:	0001ca0c 	.word	0x0001ca0c
   14c80:	00008289 	.word	0x00008289
   14c84:	00004ded 	.word	0x00004ded
   14c88:	20004c3c 	.word	0x20004c3c
   14c8c:	00000229 	.word	0x00000229
   14c90:	00004c8d 	.word	0x00004c8d
   14c94:	0000f5fd 	.word	0x0000f5fd
   14c98:	0000f619 	.word	0x0000f619
   14c9c:	0001242d 	.word	0x0001242d
   14ca0:	00007fff 	.word	0x00007fff
   14ca4:	00000239 	.word	0x00000239
   14ca8:	00000439 	.word	0x00000439
   14cac:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
   14cae:	6820      	ldr	r0, [r4, #0]
   14cb0:	3050      	adds	r0, #80	; 0x50
   14cb2:	4bfd      	ldr	r3, [pc, #1012]	; (150a8 <lv_theme_material_init+0xc80>)
   14cb4:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
   14cb6:	6820      	ldr	r0, [r4, #0]
   14cb8:	3050      	adds	r0, #80	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   14cba:	2200      	movs	r2, #0
   14cbc:	2193      	movs	r1, #147	; 0x93
   14cbe:	0089      	lsls	r1, r1, #2
   14cc0:	4bfa      	ldr	r3, [pc, #1000]	; (150ac <lv_theme_material_init+0xc84>)
   14cc2:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   14cc4:	6824      	ldr	r4, [r4, #0]
   14cc6:	3450      	adds	r4, #80	; 0x50
   14cc8:	2000      	movs	r0, #0
   14cca:	4bf9      	ldr	r3, [pc, #996]	; (150b0 <lv_theme_material_init+0xc88>)
   14ccc:	4798      	blx	r3
   14cce:	3014      	adds	r0, #20
   14cd0:	0080      	lsls	r0, r0, #2
   14cd2:	2340      	movs	r3, #64	; 0x40
   14cd4:	33ff      	adds	r3, #255	; 0xff
   14cd6:	2201      	movs	r2, #1
   14cd8:	4298      	cmp	r0, r3
   14cda:	d901      	bls.n	14ce0 <lv_theme_material_init+0x8b8>
   14cdc:	f001 fa05 	bl	160ea <lv_theme_material_init+0x1cc2>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14ce0:	2101      	movs	r1, #1
   14ce2:	0020      	movs	r0, r4
   14ce4:	4bf3      	ldr	r3, [pc, #972]	; (150b4 <lv_theme_material_init+0xc8c>)
   14ce6:	4798      	blx	r3
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
   14ce8:	4cf3      	ldr	r4, [pc, #972]	; (150b8 <lv_theme_material_init+0xc90>)
   14cea:	6820      	ldr	r0, [r4, #0]
   14cec:	3050      	adds	r0, #80	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   14cee:	4af3      	ldr	r2, [pc, #972]	; (150bc <lv_theme_material_init+0xc94>)
   14cf0:	21b7      	movs	r1, #183	; 0xb7
   14cf2:	0049      	lsls	r1, r1, #1
   14cf4:	4df2      	ldr	r5, [pc, #968]	; (150c0 <lv_theme_material_init+0xc98>)
   14cf6:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
   14cf8:	6820      	ldr	r0, [r4, #0]
   14cfa:	3050      	adds	r0, #80	; 0x50
   14cfc:	4bf1      	ldr	r3, [pc, #964]	; (150c4 <lv_theme_material_init+0xc9c>)
   14cfe:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
   14d00:	216a      	movs	r1, #106	; 0x6a
   14d02:	31ff      	adds	r1, #255	; 0xff
   14d04:	4bf0      	ldr	r3, [pc, #960]	; (150c8 <lv_theme_material_init+0xca0>)
   14d06:	4798      	blx	r3
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
   14d08:	4bf0      	ldr	r3, [pc, #960]	; (150cc <lv_theme_material_init+0xca4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   14d0a:	689a      	ldr	r2, [r3, #8]
   14d0c:	6820      	ldr	r0, [r4, #0]
   14d0e:	3050      	adds	r0, #80	; 0x50
   14d10:	49ef      	ldr	r1, [pc, #956]	; (150d0 <lv_theme_material_init+0xca8>)
   14d12:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14d14:	6824      	ldr	r4, [r4, #0]
   14d16:	3450      	adds	r4, #80	; 0x50
   14d18:	2000      	movs	r0, #0
   14d1a:	4be5      	ldr	r3, [pc, #916]	; (150b0 <lv_theme_material_init+0xc88>)
   14d1c:	4798      	blx	r3
   14d1e:	0043      	lsls	r3, r0, #1
   14d20:	1818      	adds	r0, r3, r0
   14d22:	3050      	adds	r0, #80	; 0x50
   14d24:	2340      	movs	r3, #64	; 0x40
   14d26:	33ff      	adds	r3, #255	; 0xff
   14d28:	2201      	movs	r2, #1
   14d2a:	4298      	cmp	r0, r3
   14d2c:	d901      	bls.n	14d32 <lv_theme_material_init+0x90a>
   14d2e:	f001 f9e7 	bl	16100 <lv_theme_material_init+0x1cd8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14d32:	2112      	movs	r1, #18
   14d34:	0020      	movs	r0, r4
   14d36:	4bdf      	ldr	r3, [pc, #892]	; (150b4 <lv_theme_material_init+0xc8c>)
   14d38:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14d3a:	4bdf      	ldr	r3, [pc, #892]	; (150b8 <lv_theme_material_init+0xc90>)
   14d3c:	681c      	ldr	r4, [r3, #0]
   14d3e:	3450      	adds	r4, #80	; 0x50
   14d40:	2000      	movs	r0, #0
   14d42:	4bdb      	ldr	r3, [pc, #876]	; (150b0 <lv_theme_material_init+0xc88>)
   14d44:	4798      	blx	r3
   14d46:	0043      	lsls	r3, r0, #1
   14d48:	1818      	adds	r0, r3, r0
   14d4a:	3050      	adds	r0, #80	; 0x50
   14d4c:	2340      	movs	r3, #64	; 0x40
   14d4e:	33ff      	adds	r3, #255	; 0xff
   14d50:	2201      	movs	r2, #1
   14d52:	4298      	cmp	r0, r3
   14d54:	d901      	bls.n	14d5a <lv_theme_material_init+0x932>
   14d56:	f001 f9e0 	bl	1611a <lv_theme_material_init+0x1cf2>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14d5a:	2113      	movs	r1, #19
   14d5c:	0020      	movs	r0, r4
   14d5e:	4bd5      	ldr	r3, [pc, #852]	; (150b4 <lv_theme_material_init+0xc8c>)
   14d60:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14d62:	4bd5      	ldr	r3, [pc, #852]	; (150b8 <lv_theme_material_init+0xc90>)
   14d64:	681c      	ldr	r4, [r3, #0]
   14d66:	3450      	adds	r4, #80	; 0x50
   14d68:	2000      	movs	r0, #0
   14d6a:	4bd1      	ldr	r3, [pc, #836]	; (150b0 <lv_theme_material_init+0xc88>)
   14d6c:	4798      	blx	r3
   14d6e:	0043      	lsls	r3, r0, #1
   14d70:	1818      	adds	r0, r3, r0
   14d72:	3050      	adds	r0, #80	; 0x50
   14d74:	2340      	movs	r3, #64	; 0x40
   14d76:	33ff      	adds	r3, #255	; 0xff
   14d78:	2201      	movs	r2, #1
   14d7a:	4298      	cmp	r0, r3
   14d7c:	d901      	bls.n	14d82 <lv_theme_material_init+0x95a>
   14d7e:	f001 f9d9 	bl	16134 <lv_theme_material_init+0x1d0c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14d82:	2110      	movs	r1, #16
   14d84:	0020      	movs	r0, r4
   14d86:	4bcb      	ldr	r3, [pc, #812]	; (150b4 <lv_theme_material_init+0xc8c>)
   14d88:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   14d8a:	4bcb      	ldr	r3, [pc, #812]	; (150b8 <lv_theme_material_init+0xc90>)
   14d8c:	681c      	ldr	r4, [r3, #0]
   14d8e:	3450      	adds	r4, #80	; 0x50
   14d90:	2000      	movs	r0, #0
   14d92:	4bc7      	ldr	r3, [pc, #796]	; (150b0 <lv_theme_material_init+0xc88>)
   14d94:	4798      	blx	r3
   14d96:	0043      	lsls	r3, r0, #1
   14d98:	1818      	adds	r0, r3, r0
   14d9a:	3050      	adds	r0, #80	; 0x50
   14d9c:	2340      	movs	r3, #64	; 0x40
   14d9e:	33ff      	adds	r3, #255	; 0xff
   14da0:	2201      	movs	r2, #1
   14da2:	4298      	cmp	r0, r3
   14da4:	d901      	bls.n	14daa <lv_theme_material_init+0x982>
   14da6:	f001 f9d2 	bl	1614e <lv_theme_material_init+0x1d26>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14daa:	2111      	movs	r1, #17
   14dac:	0020      	movs	r0, r4
   14dae:	4dc1      	ldr	r5, [pc, #772]	; (150b4 <lv_theme_material_init+0xc8c>)
   14db0:	47a8      	blx	r5
    style_init_reset(&styles->kb_bg);
   14db2:	4cc1      	ldr	r4, [pc, #772]	; (150b8 <lv_theme_material_init+0xc90>)
   14db4:	6820      	ldr	r0, [r4, #0]
   14db6:	3068      	adds	r0, #104	; 0x68
   14db8:	4bbb      	ldr	r3, [pc, #748]	; (150a8 <lv_theme_material_init+0xc80>)
   14dba:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
   14dbc:	6820      	ldr	r0, [r4, #0]
   14dbe:	3068      	adds	r0, #104	; 0x68
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14dc0:	2200      	movs	r2, #0
   14dc2:	2101      	movs	r1, #1
   14dc4:	47a8      	blx	r5
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   14dc6:	6824      	ldr	r4, [r4, #0]
   14dc8:	3468      	adds	r4, #104	; 0x68
   14dca:	2000      	movs	r0, #0
   14dcc:	4bb8      	ldr	r3, [pc, #736]	; (150b0 <lv_theme_material_init+0xc88>)
   14dce:	4798      	blx	r3
   14dd0:	3014      	adds	r0, #20
   14dd2:	0080      	lsls	r0, r0, #2
   14dd4:	2340      	movs	r3, #64	; 0x40
   14dd6:	33ff      	adds	r3, #255	; 0xff
   14dd8:	2201      	movs	r2, #1
   14dda:	4298      	cmp	r0, r3
   14ddc:	d901      	bls.n	14de2 <lv_theme_material_init+0x9ba>
   14dde:	f001 f9c3 	bl	16168 <lv_theme_material_init+0x1d40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   14de2:	2130      	movs	r1, #48	; 0x30
   14de4:	0020      	movs	r0, r4
   14de6:	4db3      	ldr	r5, [pc, #716]	; (150b4 <lv_theme_material_init+0xc8c>)
   14de8:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
   14dea:	4cb3      	ldr	r4, [pc, #716]	; (150b8 <lv_theme_material_init+0xc90>)
   14dec:	6820      	ldr	r0, [r4, #0]
   14dee:	3068      	adds	r0, #104	; 0x68
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   14df0:	2202      	movs	r2, #2
   14df2:	2131      	movs	r1, #49	; 0x31
   14df4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   14df6:	6820      	ldr	r0, [r4, #0]
   14df8:	3068      	adds	r0, #104	; 0x68
   14dfa:	4bb4      	ldr	r3, [pc, #720]	; (150cc <lv_theme_material_init+0xca4>)
   14dfc:	699b      	ldr	r3, [r3, #24]
   14dfe:	079b      	lsls	r3, r3, #30
   14e00:	d501      	bpl.n	14e06 <lv_theme_material_init+0x9de>
   14e02:	f001 f9bc 	bl	1617e <lv_theme_material_init+0x1d56>
   14e06:	2300      	movs	r3, #0
   14e08:	2100      	movs	r1, #0
   14e0a:	2200      	movs	r2, #0
   14e0c:	0149      	lsls	r1, r1, #5
   14e0e:	02db      	lsls	r3, r3, #11
   14e10:	430a      	orrs	r2, r1
   14e12:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   14e14:	2139      	movs	r1, #57	; 0x39
   14e16:	4dac      	ldr	r5, [pc, #688]	; (150c8 <lv_theme_material_init+0xca0>)
   14e18:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
   14e1a:	4ca7      	ldr	r4, [pc, #668]	; (150b8 <lv_theme_material_init+0xc90>)
   14e1c:	6820      	ldr	r0, [r4, #0]
   14e1e:	3068      	adds	r0, #104	; 0x68
   14e20:	4baa      	ldr	r3, [pc, #680]	; (150cc <lv_theme_material_init+0xca4>)
   14e22:	88da      	ldrh	r2, [r3, #6]
   14e24:	49ab      	ldr	r1, [pc, #684]	; (150d4 <lv_theme_material_init+0xcac>)
   14e26:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   14e28:	6824      	ldr	r4, [r4, #0]
   14e2a:	3468      	adds	r4, #104	; 0x68
   14e2c:	2000      	movs	r0, #0
   14e2e:	4ba0      	ldr	r3, [pc, #640]	; (150b0 <lv_theme_material_init+0xc88>)
   14e30:	4798      	blx	r3
   14e32:	0083      	lsls	r3, r0, #2
   14e34:	1818      	adds	r0, r3, r0
   14e36:	3050      	adds	r0, #80	; 0x50
   14e38:	2340      	movs	r3, #64	; 0x40
   14e3a:	33ff      	adds	r3, #255	; 0xff
   14e3c:	2201      	movs	r2, #1
   14e3e:	4298      	cmp	r0, r3
   14e40:	d901      	bls.n	14e46 <lv_theme_material_init+0xa1e>
   14e42:	f001 f9a5 	bl	16190 <lv_theme_material_init+0x1d68>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   14e46:	2112      	movs	r1, #18
   14e48:	0020      	movs	r0, r4
   14e4a:	4b9a      	ldr	r3, [pc, #616]	; (150b4 <lv_theme_material_init+0xc8c>)
   14e4c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   14e4e:	4b9a      	ldr	r3, [pc, #616]	; (150b8 <lv_theme_material_init+0xc90>)
   14e50:	681c      	ldr	r4, [r3, #0]
   14e52:	3468      	adds	r4, #104	; 0x68
   14e54:	2000      	movs	r0, #0
   14e56:	4b96      	ldr	r3, [pc, #600]	; (150b0 <lv_theme_material_init+0xc88>)
   14e58:	4798      	blx	r3
   14e5a:	0083      	lsls	r3, r0, #2
   14e5c:	1818      	adds	r0, r3, r0
   14e5e:	3050      	adds	r0, #80	; 0x50
   14e60:	2340      	movs	r3, #64	; 0x40
   14e62:	33ff      	adds	r3, #255	; 0xff
   14e64:	2201      	movs	r2, #1
   14e66:	4298      	cmp	r0, r3
   14e68:	d901      	bls.n	14e6e <lv_theme_material_init+0xa46>
   14e6a:	f001 f99e 	bl	161aa <lv_theme_material_init+0x1d82>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14e6e:	2113      	movs	r1, #19
   14e70:	0020      	movs	r0, r4
   14e72:	4b90      	ldr	r3, [pc, #576]	; (150b4 <lv_theme_material_init+0xc8c>)
   14e74:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   14e76:	4b90      	ldr	r3, [pc, #576]	; (150b8 <lv_theme_material_init+0xc90>)
   14e78:	681c      	ldr	r4, [r3, #0]
   14e7a:	3468      	adds	r4, #104	; 0x68
   14e7c:	2000      	movs	r0, #0
   14e7e:	4b8c      	ldr	r3, [pc, #560]	; (150b0 <lv_theme_material_init+0xc88>)
   14e80:	4798      	blx	r3
   14e82:	0083      	lsls	r3, r0, #2
   14e84:	1818      	adds	r0, r3, r0
   14e86:	3050      	adds	r0, #80	; 0x50
   14e88:	2340      	movs	r3, #64	; 0x40
   14e8a:	33ff      	adds	r3, #255	; 0xff
   14e8c:	2201      	movs	r2, #1
   14e8e:	4298      	cmp	r0, r3
   14e90:	d901      	bls.n	14e96 <lv_theme_material_init+0xa6e>
   14e92:	f001 f997 	bl	161c4 <lv_theme_material_init+0x1d9c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   14e96:	2110      	movs	r1, #16
   14e98:	0020      	movs	r0, r4
   14e9a:	4b86      	ldr	r3, [pc, #536]	; (150b4 <lv_theme_material_init+0xc8c>)
   14e9c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   14e9e:	4b86      	ldr	r3, [pc, #536]	; (150b8 <lv_theme_material_init+0xc90>)
   14ea0:	681c      	ldr	r4, [r3, #0]
   14ea2:	3468      	adds	r4, #104	; 0x68
   14ea4:	2000      	movs	r0, #0
   14ea6:	4b82      	ldr	r3, [pc, #520]	; (150b0 <lv_theme_material_init+0xc88>)
   14ea8:	4798      	blx	r3
   14eaa:	0083      	lsls	r3, r0, #2
   14eac:	1818      	adds	r0, r3, r0
   14eae:	3050      	adds	r0, #80	; 0x50
   14eb0:	2340      	movs	r3, #64	; 0x40
   14eb2:	33ff      	adds	r3, #255	; 0xff
   14eb4:	2201      	movs	r2, #1
   14eb6:	4298      	cmp	r0, r3
   14eb8:	d901      	bls.n	14ebe <lv_theme_material_init+0xa96>
   14eba:	f001 f990 	bl	161de <lv_theme_material_init+0x1db6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14ebe:	2111      	movs	r1, #17
   14ec0:	0020      	movs	r0, r4
   14ec2:	4b7c      	ldr	r3, [pc, #496]	; (150b4 <lv_theme_material_init+0xc8c>)
   14ec4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   14ec6:	4b7c      	ldr	r3, [pc, #496]	; (150b8 <lv_theme_material_init+0xc90>)
   14ec8:	681c      	ldr	r4, [r3, #0]
   14eca:	3468      	adds	r4, #104	; 0x68
   14ecc:	2000      	movs	r0, #0
   14ece:	4b78      	ldr	r3, [pc, #480]	; (150b0 <lv_theme_material_init+0xc88>)
   14ed0:	4798      	blx	r3
   14ed2:	0043      	lsls	r3, r0, #1
   14ed4:	1818      	adds	r0, r3, r0
   14ed6:	3050      	adds	r0, #80	; 0x50
   14ed8:	2340      	movs	r3, #64	; 0x40
   14eda:	33ff      	adds	r3, #255	; 0xff
   14edc:	2201      	movs	r2, #1
   14ede:	4298      	cmp	r0, r3
   14ee0:	d901      	bls.n	14ee6 <lv_theme_material_init+0xabe>
   14ee2:	f001 f989 	bl	161f8 <lv_theme_material_init+0x1dd0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   14ee6:	2114      	movs	r1, #20
   14ee8:	0020      	movs	r0, r4
   14eea:	4b72      	ldr	r3, [pc, #456]	; (150b4 <lv_theme_material_init+0xc8c>)
   14eec:	4798      	blx	r3
    style_init_reset(&styles->mbox_bg);
   14eee:	4c72      	ldr	r4, [pc, #456]	; (150b8 <lv_theme_material_init+0xc90>)
   14ef0:	6820      	ldr	r0, [r4, #0]
   14ef2:	307c      	adds	r0, #124	; 0x7c
   14ef4:	4b6c      	ldr	r3, [pc, #432]	; (150a8 <lv_theme_material_init+0xc80>)
   14ef6:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   14ef8:	6824      	ldr	r4, [r4, #0]
   14efa:	347c      	adds	r4, #124	; 0x7c
   14efc:	2000      	movs	r0, #0
   14efe:	4b6c      	ldr	r3, [pc, #432]	; (150b0 <lv_theme_material_init+0xc88>)
   14f00:	4798      	blx	r3
   14f02:	2332      	movs	r3, #50	; 0x32
   14f04:	4358      	muls	r0, r3
   14f06:	3050      	adds	r0, #80	; 0x50
   14f08:	2340      	movs	r3, #64	; 0x40
   14f0a:	33ff      	adds	r3, #255	; 0xff
   14f0c:	2201      	movs	r2, #1
   14f0e:	4298      	cmp	r0, r3
   14f10:	d901      	bls.n	14f16 <lv_theme_material_init+0xaee>
   14f12:	f001 f97e 	bl	16212 <lv_theme_material_init+0x1dea>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   14f16:	2150      	movs	r1, #80	; 0x50
   14f18:	0020      	movs	r0, r4
   14f1a:	4b66      	ldr	r3, [pc, #408]	; (150b4 <lv_theme_material_init+0xc8c>)
   14f1c:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
   14f1e:	4b66      	ldr	r3, [pc, #408]	; (150b8 <lv_theme_material_init+0xc90>)
   14f20:	6818      	ldr	r0, [r3, #0]
   14f22:	307c      	adds	r0, #124	; 0x7c
   14f24:	4b69      	ldr	r3, [pc, #420]	; (150cc <lv_theme_material_init+0xca4>)
   14f26:	699b      	ldr	r3, [r3, #24]
   14f28:	079b      	lsls	r3, r3, #30
   14f2a:	d401      	bmi.n	14f30 <lv_theme_material_init+0xb08>
   14f2c:	f001 f97e 	bl	1622c <lv_theme_material_init+0x1e04>
   14f30:	2230      	movs	r2, #48	; 0x30
   14f32:	2318      	movs	r3, #24
   14f34:	0152      	lsls	r2, r2, #5
   14f36:	02d9      	lsls	r1, r3, #11
   14f38:	431a      	orrs	r2, r3
   14f3a:	430a      	orrs	r2, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   14f3c:	2159      	movs	r1, #89	; 0x59
   14f3e:	4b62      	ldr	r3, [pc, #392]	; (150c8 <lv_theme_material_init+0xca0>)
   14f40:	4798      	blx	r3
    style_init_reset(&styles->sb);
   14f42:	4c5d      	ldr	r4, [pc, #372]	; (150b8 <lv_theme_material_init+0xc90>)
   14f44:	6820      	ldr	r0, [r4, #0]
   14f46:	3080      	adds	r0, #128	; 0x80
   14f48:	4b57      	ldr	r3, [pc, #348]	; (150a8 <lv_theme_material_init+0xc80>)
   14f4a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
   14f4c:	6820      	ldr	r0, [r4, #0]
   14f4e:	3080      	adds	r0, #128	; 0x80
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   14f50:	22ff      	movs	r2, #255	; 0xff
   14f52:	212c      	movs	r1, #44	; 0x2c
   14f54:	4b55      	ldr	r3, [pc, #340]	; (150ac <lv_theme_material_init+0xc84>)
   14f56:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
   14f58:	6820      	ldr	r0, [r4, #0]
   14f5a:	3080      	adds	r0, #128	; 0x80
   14f5c:	4b5b      	ldr	r3, [pc, #364]	; (150cc <lv_theme_material_init+0xca4>)
   14f5e:	699b      	ldr	r3, [r3, #24]
   14f60:	079b      	lsls	r3, r3, #30
   14f62:	d501      	bpl.n	14f68 <lv_theme_material_init+0xb40>
   14f64:	f001 f966 	bl	16234 <lv_theme_material_init+0x1e0c>
   14f68:	230e      	movs	r3, #14
   14f6a:	211f      	movs	r1, #31
   14f6c:	2210      	movs	r2, #16
   14f6e:	0149      	lsls	r1, r1, #5
   14f70:	02db      	lsls	r3, r3, #11
   14f72:	430a      	orrs	r2, r1
   14f74:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   14f76:	2129      	movs	r1, #41	; 0x29
   14f78:	4b53      	ldr	r3, [pc, #332]	; (150c8 <lv_theme_material_init+0xca0>)
   14f7a:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   14f7c:	4c4e      	ldr	r4, [pc, #312]	; (150b8 <lv_theme_material_init+0xc90>)
   14f7e:	6820      	ldr	r0, [r4, #0]
   14f80:	3080      	adds	r0, #128	; 0x80
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   14f82:	4a55      	ldr	r2, [pc, #340]	; (150d8 <lv_theme_material_init+0xcb0>)
   14f84:	2101      	movs	r1, #1
   14f86:	4b4b      	ldr	r3, [pc, #300]	; (150b4 <lv_theme_material_init+0xc8c>)
   14f88:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   14f8a:	6824      	ldr	r4, [r4, #0]
   14f8c:	3480      	adds	r4, #128	; 0x80
   14f8e:	2000      	movs	r0, #0
   14f90:	4b47      	ldr	r3, [pc, #284]	; (150b0 <lv_theme_material_init+0xc88>)
   14f92:	4798      	blx	r3
   14f94:	00c3      	lsls	r3, r0, #3
   14f96:	1a18      	subs	r0, r3, r0
   14f98:	3050      	adds	r0, #80	; 0x50
   14f9a:	2340      	movs	r3, #64	; 0x40
   14f9c:	33ff      	adds	r3, #255	; 0xff
   14f9e:	2201      	movs	r2, #1
   14fa0:	4298      	cmp	r0, r3
   14fa2:	d901      	bls.n	14fa8 <lv_theme_material_init+0xb80>
   14fa4:	f001 f94b 	bl	1623e <lv_theme_material_init+0x1e16>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   14fa8:	2103      	movs	r1, #3
   14faa:	0020      	movs	r0, r4
   14fac:	4b41      	ldr	r3, [pc, #260]	; (150b4 <lv_theme_material_init+0xc8c>)
   14fae:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   14fb0:	4b41      	ldr	r3, [pc, #260]	; (150b8 <lv_theme_material_init+0xc90>)
   14fb2:	681c      	ldr	r4, [r3, #0]
   14fb4:	3480      	adds	r4, #128	; 0x80
   14fb6:	2000      	movs	r0, #0
   14fb8:	4b3d      	ldr	r3, [pc, #244]	; (150b0 <lv_theme_material_init+0xc88>)
   14fba:	4798      	blx	r3
   14fbc:	00c3      	lsls	r3, r0, #3
   14fbe:	1a18      	subs	r0, r3, r0
   14fc0:	3050      	adds	r0, #80	; 0x50
   14fc2:	2340      	movs	r3, #64	; 0x40
   14fc4:	33ff      	adds	r3, #255	; 0xff
   14fc6:	2201      	movs	r2, #1
   14fc8:	4298      	cmp	r0, r3
   14fca:	d901      	bls.n	14fd0 <lv_theme_material_init+0xba8>
   14fcc:	f001 f943 	bl	16256 <lv_theme_material_init+0x1e2e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   14fd0:	2113      	movs	r1, #19
   14fd2:	0020      	movs	r0, r4
   14fd4:	4b37      	ldr	r3, [pc, #220]	; (150b4 <lv_theme_material_init+0xc8c>)
   14fd6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   14fd8:	4b37      	ldr	r3, [pc, #220]	; (150b8 <lv_theme_material_init+0xc90>)
   14fda:	681c      	ldr	r4, [r3, #0]
   14fdc:	3480      	adds	r4, #128	; 0x80
   14fde:	2000      	movs	r0, #0
   14fe0:	4b33      	ldr	r3, [pc, #204]	; (150b0 <lv_theme_material_init+0xc88>)
   14fe2:	4798      	blx	r3
   14fe4:	00c3      	lsls	r3, r0, #3
   14fe6:	1a18      	subs	r0, r3, r0
   14fe8:	3050      	adds	r0, #80	; 0x50
   14fea:	2340      	movs	r3, #64	; 0x40
   14fec:	33ff      	adds	r3, #255	; 0xff
   14fee:	2201      	movs	r2, #1
   14ff0:	4298      	cmp	r0, r3
   14ff2:	d901      	bls.n	14ff8 <lv_theme_material_init+0xbd0>
   14ff4:	f001 f93b 	bl	1626e <lv_theme_material_init+0x1e46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   14ff8:	2111      	movs	r1, #17
   14ffa:	0020      	movs	r0, r4
   14ffc:	4b2d      	ldr	r3, [pc, #180]	; (150b4 <lv_theme_material_init+0xc8c>)
   14ffe:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
   15000:	4c2d      	ldr	r4, [pc, #180]	; (150b8 <lv_theme_material_init+0xc90>)
   15002:	6820      	ldr	r0, [r4, #0]
   15004:	3084      	adds	r0, #132	; 0x84
   15006:	4d28      	ldr	r5, [pc, #160]	; (150a8 <lv_theme_material_init+0xc80>)
   15008:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
   1500a:	6820      	ldr	r0, [r4, #0]
   1500c:	3084      	adds	r0, #132	; 0x84
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1500e:	22ff      	movs	r2, #255	; 0xff
   15010:	212c      	movs	r1, #44	; 0x2c
   15012:	4b26      	ldr	r3, [pc, #152]	; (150ac <lv_theme_material_init+0xc84>)
   15014:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
   15016:	6820      	ldr	r0, [r4, #0]
   15018:	3084      	adds	r0, #132	; 0x84
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1501a:	4b30      	ldr	r3, [pc, #192]	; (150dc <lv_theme_material_init+0xcb4>)
   1501c:	881a      	ldrh	r2, [r3, #0]
   1501e:	2129      	movs	r1, #41	; 0x29
   15020:	4b29      	ldr	r3, [pc, #164]	; (150c8 <lv_theme_material_init+0xca0>)
   15022:	4798      	blx	r3
    style_init_reset(&styles->ta_cursor);
   15024:	6820      	ldr	r0, [r4, #0]
   15026:	30b4      	adds	r0, #180	; 0xb4
   15028:	47a8      	blx	r5
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   1502a:	6820      	ldr	r0, [r4, #0]
   1502c:	30b4      	adds	r0, #180	; 0xb4
   1502e:	4b27      	ldr	r3, [pc, #156]	; (150cc <lv_theme_material_init+0xca4>)
   15030:	699b      	ldr	r3, [r3, #24]
   15032:	079b      	lsls	r3, r3, #30
   15034:	d501      	bpl.n	1503a <lv_theme_material_init+0xc12>
   15036:	f001 f926 	bl	16286 <lv_theme_material_init+0x1e5e>
   1503a:	2314      	movs	r3, #20
   1503c:	212a      	movs	r1, #42	; 0x2a
   1503e:	2215      	movs	r2, #21
   15040:	0149      	lsls	r1, r1, #5
   15042:	02db      	lsls	r3, r3, #11
   15044:	430a      	orrs	r2, r1
   15046:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15048:	2139      	movs	r1, #57	; 0x39
   1504a:	4b1f      	ldr	r3, [pc, #124]	; (150c8 <lv_theme_material_init+0xca0>)
   1504c:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   1504e:	4b1a      	ldr	r3, [pc, #104]	; (150b8 <lv_theme_material_init+0xc90>)
   15050:	681c      	ldr	r4, [r3, #0]
   15052:	34b4      	adds	r4, #180	; 0xb4
   15054:	2000      	movs	r0, #0
   15056:	4b16      	ldr	r3, [pc, #88]	; (150b0 <lv_theme_material_init+0xc88>)
   15058:	4798      	blx	r3
   1505a:	3028      	adds	r0, #40	; 0x28
   1505c:	0040      	lsls	r0, r0, #1
   1505e:	2340      	movs	r3, #64	; 0x40
   15060:	33ff      	adds	r3, #255	; 0xff
   15062:	2201      	movs	r2, #1
   15064:	4298      	cmp	r0, r3
   15066:	d901      	bls.n	1506c <lv_theme_material_init+0xc44>
   15068:	f001 f912 	bl	16290 <lv_theme_material_init+0x1e68>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1506c:	2130      	movs	r1, #48	; 0x30
   1506e:	0020      	movs	r0, r4
   15070:	4b10      	ldr	r3, [pc, #64]	; (150b4 <lv_theme_material_init+0xc8c>)
   15072:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   15074:	4b10      	ldr	r3, [pc, #64]	; (150b8 <lv_theme_material_init+0xc90>)
   15076:	681c      	ldr	r4, [r3, #0]
   15078:	34b4      	adds	r4, #180	; 0xb4
   1507a:	2000      	movs	r0, #0
   1507c:	4b0c      	ldr	r3, [pc, #48]	; (150b0 <lv_theme_material_init+0xc88>)
   1507e:	4798      	blx	r3
   15080:	3050      	adds	r0, #80	; 0x50
   15082:	2340      	movs	r3, #64	; 0x40
   15084:	33ff      	adds	r3, #255	; 0xff
   15086:	2201      	movs	r2, #1
   15088:	4298      	cmp	r0, r3
   1508a:	d901      	bls.n	15090 <lv_theme_material_init+0xc68>
   1508c:	f001 f90b 	bl	162a6 <lv_theme_material_init+0x1e7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15090:	2112      	movs	r1, #18
   15092:	0020      	movs	r0, r4
   15094:	4d07      	ldr	r5, [pc, #28]	; (150b4 <lv_theme_material_init+0xc8c>)
   15096:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
   15098:	4c07      	ldr	r4, [pc, #28]	; (150b8 <lv_theme_material_init+0xc90>)
   1509a:	6820      	ldr	r0, [r4, #0]
   1509c:	30b4      	adds	r0, #180	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1509e:	2204      	movs	r2, #4
   150a0:	2131      	movs	r1, #49	; 0x31
   150a2:	47a8      	blx	r5
   150a4:	e01c      	b.n	150e0 <lv_theme_material_init+0xcb8>
   150a6:	46c0      	nop			; (mov r8, r8)
   150a8:	0001242d 	.word	0x0001242d
   150ac:	00004f4d 	.word	0x00004f4d
   150b0:	0000f5fd 	.word	0x0000f5fd
   150b4:	00004c8d 	.word	0x00004c8d
   150b8:	20004c38 	.word	0x20004c38
   150bc:	0001ca14 	.word	0x0001ca14
   150c0:	000050a1 	.word	0x000050a1
   150c4:	0001ca0c 	.word	0x0001ca0c
   150c8:	00004ded 	.word	0x00004ded
   150cc:	20004c3c 	.word	0x20004c3c
   150d0:	0000818e 	.word	0x0000818e
   150d4:	00000439 	.word	0x00000439
   150d8:	00007fff 	.word	0x00007fff
   150dc:	0001ca08 	.word	0x0001ca08
    style_init_reset(&styles->ta_placeholder);
   150e0:	6820      	ldr	r0, [r4, #0]
   150e2:	30b8      	adds	r0, #184	; 0xb8
   150e4:	4bfb      	ldr	r3, [pc, #1004]	; (154d4 <lv_theme_material_init+0x10ac>)
   150e6:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   150e8:	6820      	ldr	r0, [r4, #0]
   150ea:	30b8      	adds	r0, #184	; 0xb8
   150ec:	4bfa      	ldr	r3, [pc, #1000]	; (154d8 <lv_theme_material_init+0x10b0>)
   150ee:	699b      	ldr	r3, [r3, #24]
   150f0:	079b      	lsls	r3, r3, #30
   150f2:	d501      	bpl.n	150f8 <lv_theme_material_init+0xcd0>
   150f4:	f001 f8e1 	bl	162ba <lv_theme_material_init+0x1e92>
   150f8:	2314      	movs	r3, #20
   150fa:	212b      	movs	r1, #43	; 0x2b
   150fc:	2217      	movs	r2, #23
   150fe:	0149      	lsls	r1, r1, #5
   15100:	02db      	lsls	r3, r3, #11
   15102:	430a      	orrs	r2, r1
   15104:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15106:	4ef5      	ldr	r6, [pc, #980]	; (154dc <lv_theme_material_init+0x10b4>)
   15108:	0031      	movs	r1, r6
   1510a:	4df5      	ldr	r5, [pc, #980]	; (154e0 <lv_theme_material_init+0x10b8>)
   1510c:	47a8      	blx	r5
    style_init_reset(&styles->spinbox_cursor);
   1510e:	4cf5      	ldr	r4, [pc, #980]	; (154e4 <lv_theme_material_init+0x10bc>)
   15110:	6820      	ldr	r0, [r4, #0]
   15112:	3098      	adds	r0, #152	; 0x98
   15114:	4bef      	ldr	r3, [pc, #956]	; (154d4 <lv_theme_material_init+0x10ac>)
   15116:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
   15118:	6820      	ldr	r0, [r4, #0]
   1511a:	3098      	adds	r0, #152	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1511c:	22ff      	movs	r2, #255	; 0xff
   1511e:	212c      	movs	r1, #44	; 0x2c
   15120:	4bf1      	ldr	r3, [pc, #964]	; (154e8 <lv_theme_material_init+0x10c0>)
   15122:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
   15124:	6820      	ldr	r0, [r4, #0]
   15126:	3098      	adds	r0, #152	; 0x98
   15128:	4beb      	ldr	r3, [pc, #940]	; (154d8 <lv_theme_material_init+0x10b0>)
   1512a:	889a      	ldrh	r2, [r3, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1512c:	2129      	movs	r1, #41	; 0x29
   1512e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   15130:	6820      	ldr	r0, [r4, #0]
   15132:	3098      	adds	r0, #152	; 0x98
   15134:	4bed      	ldr	r3, [pc, #948]	; (154ec <lv_theme_material_init+0x10c4>)
   15136:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15138:	0031      	movs	r1, r6
   1513a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   1513c:	6824      	ldr	r4, [r4, #0]
   1513e:	3498      	adds	r4, #152	; 0x98
   15140:	2000      	movs	r0, #0
   15142:	4beb      	ldr	r3, [pc, #940]	; (154f0 <lv_theme_material_init+0x10c8>)
   15144:	4798      	blx	r3
   15146:	2364      	movs	r3, #100	; 0x64
   15148:	4358      	muls	r0, r3
   1514a:	3050      	adds	r0, #80	; 0x50
   1514c:	2340      	movs	r3, #64	; 0x40
   1514e:	33ff      	adds	r3, #255	; 0xff
   15150:	2201      	movs	r2, #1
   15152:	4298      	cmp	r0, r3
   15154:	d901      	bls.n	1515a <lv_theme_material_init+0xd32>
   15156:	f001 f8b5 	bl	162c4 <lv_theme_material_init+0x1e9c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1515a:	2110      	movs	r1, #16
   1515c:	0020      	movs	r0, r4
   1515e:	4be5      	ldr	r3, [pc, #916]	; (154f4 <lv_theme_material_init+0x10cc>)
   15160:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   15162:	4be0      	ldr	r3, [pc, #896]	; (154e4 <lv_theme_material_init+0x10bc>)
   15164:	681c      	ldr	r4, [r3, #0]
   15166:	3498      	adds	r4, #152	; 0x98
   15168:	2000      	movs	r0, #0
   1516a:	4be1      	ldr	r3, [pc, #900]	; (154f0 <lv_theme_material_init+0x10c8>)
   1516c:	4798      	blx	r3
   1516e:	2364      	movs	r3, #100	; 0x64
   15170:	4358      	muls	r0, r3
   15172:	3050      	adds	r0, #80	; 0x50
   15174:	2340      	movs	r3, #64	; 0x40
   15176:	33ff      	adds	r3, #255	; 0xff
   15178:	2201      	movs	r2, #1
   1517a:	4298      	cmp	r0, r3
   1517c:	d901      	bls.n	15182 <lv_theme_material_init+0xd5a>
   1517e:	f001 f8ae 	bl	162de <lv_theme_material_init+0x1eb6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15182:	2111      	movs	r1, #17
   15184:	0020      	movs	r0, r4
   15186:	4ddb      	ldr	r5, [pc, #876]	; (154f4 <lv_theme_material_init+0x10cc>)
   15188:	47a8      	blx	r5
    style_init_reset(&styles->list_bg);
   1518a:	4cd6      	ldr	r4, [pc, #856]	; (154e4 <lv_theme_material_init+0x10bc>)
   1518c:	6820      	ldr	r0, [r4, #0]
   1518e:	3074      	adds	r0, #116	; 0x74
   15190:	4ed0      	ldr	r6, [pc, #832]	; (154d4 <lv_theme_material_init+0x10ac>)
   15192:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
   15194:	6820      	ldr	r0, [r4, #0]
   15196:	3074      	adds	r0, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   15198:	2201      	movs	r2, #1
   1519a:	2102      	movs	r1, #2
   1519c:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
   1519e:	6820      	ldr	r0, [r4, #0]
   151a0:	3074      	adds	r0, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   151a2:	2200      	movs	r2, #0
   151a4:	2112      	movs	r1, #18
   151a6:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
   151a8:	6820      	ldr	r0, [r4, #0]
   151aa:	3074      	adds	r0, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   151ac:	2200      	movs	r2, #0
   151ae:	2113      	movs	r1, #19
   151b0:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
   151b2:	6820      	ldr	r0, [r4, #0]
   151b4:	3074      	adds	r0, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   151b6:	2200      	movs	r2, #0
   151b8:	2110      	movs	r1, #16
   151ba:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
   151bc:	6820      	ldr	r0, [r4, #0]
   151be:	3074      	adds	r0, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   151c0:	2200      	movs	r2, #0
   151c2:	2111      	movs	r1, #17
   151c4:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
   151c6:	6820      	ldr	r0, [r4, #0]
   151c8:	3074      	adds	r0, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   151ca:	2200      	movs	r2, #0
   151cc:	2114      	movs	r1, #20
   151ce:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
   151d0:	6820      	ldr	r0, [r4, #0]
   151d2:	3078      	adds	r0, #120	; 0x78
   151d4:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   151d6:	6820      	ldr	r0, [r4, #0]
   151d8:	3078      	adds	r0, #120	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   151da:	22ff      	movs	r2, #255	; 0xff
   151dc:	212c      	movs	r1, #44	; 0x2c
   151de:	4bc2      	ldr	r3, [pc, #776]	; (154e8 <lv_theme_material_init+0x10c0>)
   151e0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   151e2:	6820      	ldr	r0, [r4, #0]
   151e4:	3078      	adds	r0, #120	; 0x78
   151e6:	4bbc      	ldr	r3, [pc, #752]	; (154d8 <lv_theme_material_init+0x10b0>)
   151e8:	699b      	ldr	r3, [r3, #24]
   151ea:	079b      	lsls	r3, r3, #30
   151ec:	d501      	bpl.n	151f2 <lv_theme_material_init+0xdca>
   151ee:	f001 f883 	bl	162f8 <lv_theme_material_init+0x1ed0>
   151f2:	230b      	movs	r3, #11
   151f4:	2118      	movs	r1, #24
   151f6:	220e      	movs	r2, #14
   151f8:	0149      	lsls	r1, r1, #5
   151fa:	02db      	lsls	r3, r3, #11
   151fc:	430a      	orrs	r2, r1
   151fe:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15200:	2129      	movs	r1, #41	; 0x29
   15202:	4bb7      	ldr	r3, [pc, #732]	; (154e0 <lv_theme_material_init+0x10b8>)
   15204:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   15206:	4bb7      	ldr	r3, [pc, #732]	; (154e4 <lv_theme_material_init+0x10bc>)
   15208:	6818      	ldr	r0, [r3, #0]
   1520a:	3078      	adds	r0, #120	; 0x78
   1520c:	4bb2      	ldr	r3, [pc, #712]	; (154d8 <lv_theme_material_init+0x10b0>)
   1520e:	699b      	ldr	r3, [r3, #24]
   15210:	079b      	lsls	r3, r3, #30
   15212:	d501      	bpl.n	15218 <lv_theme_material_init+0xdf0>
   15214:	f001 f875 	bl	16302 <lv_theme_material_init+0x1eda>
   15218:	2309      	movs	r3, #9
   1521a:	2113      	movs	r1, #19
   1521c:	220a      	movs	r2, #10
   1521e:	0149      	lsls	r1, r1, #5
   15220:	02db      	lsls	r3, r3, #11
   15222:	430a      	orrs	r2, r1
   15224:	431a      	orrs	r2, r3
   15226:	49b4      	ldr	r1, [pc, #720]	; (154f8 <lv_theme_material_init+0x10d0>)
   15228:	4bad      	ldr	r3, [pc, #692]	; (154e0 <lv_theme_material_init+0x10b8>)
   1522a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   1522c:	4bad      	ldr	r3, [pc, #692]	; (154e4 <lv_theme_material_init+0x10bc>)
   1522e:	6818      	ldr	r0, [r3, #0]
   15230:	3078      	adds	r0, #120	; 0x78
   15232:	4ba9      	ldr	r3, [pc, #676]	; (154d8 <lv_theme_material_init+0x10b0>)
   15234:	699b      	ldr	r3, [r3, #24]
   15236:	079b      	lsls	r3, r3, #30
   15238:	d501      	bpl.n	1523e <lv_theme_material_init+0xe16>
   1523a:	f001 f867 	bl	1630c <lv_theme_material_init+0x1ee4>
   1523e:	230b      	movs	r3, #11
   15240:	2118      	movs	r1, #24
   15242:	220e      	movs	r2, #14
   15244:	0149      	lsls	r1, r1, #5
   15246:	02db      	lsls	r3, r3, #11
   15248:	430a      	orrs	r2, r1
   1524a:	431a      	orrs	r2, r3
   1524c:	49ab      	ldr	r1, [pc, #684]	; (154fc <lv_theme_material_init+0x10d4>)
   1524e:	4ea4      	ldr	r6, [pc, #656]	; (154e0 <lv_theme_material_init+0x10b8>)
   15250:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
   15252:	4da4      	ldr	r5, [pc, #656]	; (154e4 <lv_theme_material_init+0x10bc>)
   15254:	6828      	ldr	r0, [r5, #0]
   15256:	3078      	adds	r0, #120	; 0x78
   15258:	4c9f      	ldr	r4, [pc, #636]	; (154d8 <lv_theme_material_init+0x10b0>)
   1525a:	88a2      	ldrh	r2, [r4, #4]
   1525c:	212a      	movs	r1, #42	; 0x2a
   1525e:	31ff      	adds	r1, #255	; 0xff
   15260:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
   15262:	682f      	ldr	r7, [r5, #0]
   15264:	3778      	adds	r7, #120	; 0x78
   15266:	88a0      	ldrh	r0, [r4, #4]
   15268:	2133      	movs	r1, #51	; 0x33
   1526a:	4ba5      	ldr	r3, [pc, #660]	; (15500 <lv_theme_material_init+0x10d8>)
   1526c:	4798      	blx	r3
   1526e:	1c02      	adds	r2, r0, #0
   15270:	49a4      	ldr	r1, [pc, #656]	; (15504 <lv_theme_material_init+0x10dc>)
   15272:	0038      	movs	r0, r7
   15274:	47b0      	blx	r6
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   15276:	6828      	ldr	r0, [r5, #0]
   15278:	3078      	adds	r0, #120	; 0x78
   1527a:	69a3      	ldr	r3, [r4, #24]
   1527c:	079b      	lsls	r3, r3, #30
   1527e:	d501      	bpl.n	15284 <lv_theme_material_init+0xe5c>
   15280:	f001 f849 	bl	16316 <lv_theme_material_init+0x1eee>
   15284:	231f      	movs	r3, #31
   15286:	213f      	movs	r1, #63	; 0x3f
   15288:	221f      	movs	r2, #31
   1528a:	0149      	lsls	r1, r1, #5
   1528c:	02db      	lsls	r3, r3, #11
   1528e:	430a      	orrs	r2, r1
   15290:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15292:	4992      	ldr	r1, [pc, #584]	; (154dc <lv_theme_material_init+0x10b4>)
   15294:	4d92      	ldr	r5, [pc, #584]	; (154e0 <lv_theme_material_init+0x10b8>)
   15296:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   15298:	4c92      	ldr	r4, [pc, #584]	; (154e4 <lv_theme_material_init+0x10bc>)
   1529a:	6820      	ldr	r0, [r4, #0]
   1529c:	3078      	adds	r0, #120	; 0x78
   1529e:	2201      	movs	r2, #1
   152a0:	4252      	negs	r2, r2
   152a2:	4999      	ldr	r1, [pc, #612]	; (15508 <lv_theme_material_init+0x10e0>)
   152a4:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   152a6:	6820      	ldr	r0, [r4, #0]
   152a8:	3078      	adds	r0, #120	; 0x78
   152aa:	4b8b      	ldr	r3, [pc, #556]	; (154d8 <lv_theme_material_init+0x10b0>)
   152ac:	699b      	ldr	r3, [r3, #24]
   152ae:	079b      	lsls	r3, r3, #30
   152b0:	d501      	bpl.n	152b6 <lv_theme_material_init+0xe8e>
   152b2:	f001 f835 	bl	16320 <lv_theme_material_init+0x1ef8>
   152b6:	2226      	movs	r2, #38	; 0x26
   152b8:	2313      	movs	r3, #19
   152ba:	0152      	lsls	r2, r2, #5
   152bc:	02d9      	lsls	r1, r3, #11
   152be:	431a      	orrs	r2, r3
   152c0:	430a      	orrs	r2, r1
   152c2:	4992      	ldr	r1, [pc, #584]	; (1550c <lv_theme_material_init+0x10e4>)
   152c4:	4b86      	ldr	r3, [pc, #536]	; (154e0 <lv_theme_material_init+0x10b8>)
   152c6:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   152c8:	4b86      	ldr	r3, [pc, #536]	; (154e4 <lv_theme_material_init+0x10bc>)
   152ca:	6818      	ldr	r0, [r3, #0]
   152cc:	3078      	adds	r0, #120	; 0x78
   152ce:	4b82      	ldr	r3, [pc, #520]	; (154d8 <lv_theme_material_init+0x10b0>)
   152d0:	699b      	ldr	r3, [r3, #24]
   152d2:	079b      	lsls	r3, r3, #30
   152d4:	d501      	bpl.n	152da <lv_theme_material_init+0xeb2>
   152d6:	f001 f827 	bl	16328 <lv_theme_material_init+0x1f00>
   152da:	231f      	movs	r3, #31
   152dc:	213f      	movs	r1, #63	; 0x3f
   152de:	221f      	movs	r2, #31
   152e0:	0149      	lsls	r1, r1, #5
   152e2:	02db      	lsls	r3, r3, #11
   152e4:	430a      	orrs	r2, r1
   152e6:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   152e8:	4989      	ldr	r1, [pc, #548]	; (15510 <lv_theme_material_init+0x10e8>)
   152ea:	4d7d      	ldr	r5, [pc, #500]	; (154e0 <lv_theme_material_init+0x10b8>)
   152ec:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   152ee:	4c7d      	ldr	r4, [pc, #500]	; (154e4 <lv_theme_material_init+0x10bc>)
   152f0:	6820      	ldr	r0, [r4, #0]
   152f2:	3078      	adds	r0, #120	; 0x78
   152f4:	2201      	movs	r2, #1
   152f6:	4252      	negs	r2, r2
   152f8:	4986      	ldr	r1, [pc, #536]	; (15514 <lv_theme_material_init+0x10ec>)
   152fa:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   152fc:	6820      	ldr	r0, [r4, #0]
   152fe:	3078      	adds	r0, #120	; 0x78
   15300:	4b75      	ldr	r3, [pc, #468]	; (154d8 <lv_theme_material_init+0x10b0>)
   15302:	699b      	ldr	r3, [r3, #24]
   15304:	079b      	lsls	r3, r3, #30
   15306:	d501      	bpl.n	1530c <lv_theme_material_init+0xee4>
   15308:	f001 f813 	bl	16332 <lv_theme_material_init+0x1f0a>
   1530c:	2226      	movs	r2, #38	; 0x26
   1530e:	2313      	movs	r3, #19
   15310:	0152      	lsls	r2, r2, #5
   15312:	02d9      	lsls	r1, r3, #11
   15314:	431a      	orrs	r2, r3
   15316:	430a      	orrs	r2, r1
   15318:	497f      	ldr	r1, [pc, #508]	; (15518 <lv_theme_material_init+0x10f0>)
   1531a:	4b71      	ldr	r3, [pc, #452]	; (154e0 <lv_theme_material_init+0x10b8>)
   1531c:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   1531e:	4c71      	ldr	r4, [pc, #452]	; (154e4 <lv_theme_material_init+0x10bc>)
   15320:	6820      	ldr	r0, [r4, #0]
   15322:	3078      	adds	r0, #120	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15324:	2201      	movs	r2, #1
   15326:	2131      	movs	r1, #49	; 0x31
   15328:	4b72      	ldr	r3, [pc, #456]	; (154f4 <lv_theme_material_init+0x10cc>)
   1532a:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   1532c:	6820      	ldr	r0, [r4, #0]
   1532e:	3078      	adds	r0, #120	; 0x78
   15330:	4b69      	ldr	r3, [pc, #420]	; (154d8 <lv_theme_material_init+0x10b0>)
   15332:	699b      	ldr	r3, [r3, #24]
   15334:	079b      	lsls	r3, r3, #30
   15336:	d501      	bpl.n	1533c <lv_theme_material_init+0xf14>
   15338:	f000 ffff 	bl	1633a <lv_theme_material_init+0x1f12>
   1533c:	2310      	movs	r3, #16
   1533e:	2122      	movs	r1, #34	; 0x22
   15340:	2212      	movs	r2, #18
   15342:	0149      	lsls	r1, r1, #5
   15344:	02db      	lsls	r3, r3, #11
   15346:	430a      	orrs	r2, r1
   15348:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1534a:	2139      	movs	r1, #57	; 0x39
   1534c:	4d64      	ldr	r5, [pc, #400]	; (154e0 <lv_theme_material_init+0x10b8>)
   1534e:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
   15350:	4c64      	ldr	r4, [pc, #400]	; (154e4 <lv_theme_material_init+0x10bc>)
   15352:	6820      	ldr	r0, [r4, #0]
   15354:	3078      	adds	r0, #120	; 0x78
   15356:	4b60      	ldr	r3, [pc, #384]	; (154d8 <lv_theme_material_init+0x10b0>)
   15358:	889a      	ldrh	r2, [r3, #4]
   1535a:	4970      	ldr	r1, [pc, #448]	; (1551c <lv_theme_material_init+0x10f4>)
   1535c:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
   1535e:	6820      	ldr	r0, [r4, #0]
   15360:	3078      	adds	r0, #120	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15362:	2201      	movs	r2, #1
   15364:	2130      	movs	r1, #48	; 0x30
   15366:	4b63      	ldr	r3, [pc, #396]	; (154f4 <lv_theme_material_init+0x10cc>)
   15368:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   1536a:	6824      	ldr	r4, [r4, #0]
   1536c:	3478      	adds	r4, #120	; 0x78
   1536e:	2000      	movs	r0, #0
   15370:	4b6b      	ldr	r3, [pc, #428]	; (15520 <lv_theme_material_init+0x10f8>)
   15372:	4798      	blx	r3
   15374:	2801      	cmp	r0, #1
   15376:	d801      	bhi.n	1537c <lv_theme_material_init+0xf54>
   15378:	f000 ffe4 	bl	16344 <lv_theme_material_init+0x1f1c>
   1537c:	2000      	movs	r0, #0
   1537e:	4b5c      	ldr	r3, [pc, #368]	; (154f0 <lv_theme_material_init+0x10c8>)
   15380:	4798      	blx	r3
   15382:	0103      	lsls	r3, r0, #4
   15384:	1a1b      	subs	r3, r3, r0
   15386:	005b      	lsls	r3, r3, #1
   15388:	3350      	adds	r3, #80	; 0x50
   1538a:	2140      	movs	r1, #64	; 0x40
   1538c:	31ff      	adds	r1, #255	; 0xff
   1538e:	2201      	movs	r2, #1
   15390:	428b      	cmp	r3, r1
   15392:	d901      	bls.n	15398 <lv_theme_material_init+0xf70>
   15394:	f000 ffef 	bl	16376 <lv_theme_material_init+0x1f4e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15398:	2112      	movs	r1, #18
   1539a:	0020      	movs	r0, r4
   1539c:	4b55      	ldr	r3, [pc, #340]	; (154f4 <lv_theme_material_init+0x10cc>)
   1539e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   153a0:	4b50      	ldr	r3, [pc, #320]	; (154e4 <lv_theme_material_init+0x10bc>)
   153a2:	681c      	ldr	r4, [r3, #0]
   153a4:	3478      	adds	r4, #120	; 0x78
   153a6:	2000      	movs	r0, #0
   153a8:	4b5d      	ldr	r3, [pc, #372]	; (15520 <lv_theme_material_init+0x10f8>)
   153aa:	4798      	blx	r3
   153ac:	2801      	cmp	r0, #1
   153ae:	d801      	bhi.n	153b4 <lv_theme_material_init+0xf8c>
   153b0:	f000 ffee 	bl	16390 <lv_theme_material_init+0x1f68>
   153b4:	2000      	movs	r0, #0
   153b6:	4b4e      	ldr	r3, [pc, #312]	; (154f0 <lv_theme_material_init+0x10c8>)
   153b8:	4798      	blx	r3
   153ba:	0103      	lsls	r3, r0, #4
   153bc:	1a1b      	subs	r3, r3, r0
   153be:	005b      	lsls	r3, r3, #1
   153c0:	3350      	adds	r3, #80	; 0x50
   153c2:	2140      	movs	r1, #64	; 0x40
   153c4:	31ff      	adds	r1, #255	; 0xff
   153c6:	2201      	movs	r2, #1
   153c8:	428b      	cmp	r3, r1
   153ca:	d901      	bls.n	153d0 <lv_theme_material_init+0xfa8>
   153cc:	f000 fff9 	bl	163c2 <lv_theme_material_init+0x1f9a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   153d0:	2113      	movs	r1, #19
   153d2:	0020      	movs	r0, r4
   153d4:	4b47      	ldr	r3, [pc, #284]	; (154f4 <lv_theme_material_init+0x10cc>)
   153d6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   153d8:	4b42      	ldr	r3, [pc, #264]	; (154e4 <lv_theme_material_init+0x10bc>)
   153da:	681c      	ldr	r4, [r3, #0]
   153dc:	3478      	adds	r4, #120	; 0x78
   153de:	2000      	movs	r0, #0
   153e0:	4b4f      	ldr	r3, [pc, #316]	; (15520 <lv_theme_material_init+0x10f8>)
   153e2:	4798      	blx	r3
   153e4:	2801      	cmp	r0, #1
   153e6:	d801      	bhi.n	153ec <lv_theme_material_init+0xfc4>
   153e8:	f000 fff8 	bl	163dc <lv_theme_material_init+0x1fb4>
   153ec:	2000      	movs	r0, #0
   153ee:	4b40      	ldr	r3, [pc, #256]	; (154f0 <lv_theme_material_init+0x10c8>)
   153f0:	4798      	blx	r3
   153f2:	0103      	lsls	r3, r0, #4
   153f4:	1a1b      	subs	r3, r3, r0
   153f6:	005b      	lsls	r3, r3, #1
   153f8:	3350      	adds	r3, #80	; 0x50
   153fa:	2140      	movs	r1, #64	; 0x40
   153fc:	31ff      	adds	r1, #255	; 0xff
   153fe:	2201      	movs	r2, #1
   15400:	428b      	cmp	r3, r1
   15402:	d901      	bls.n	15408 <lv_theme_material_init+0xfe0>
   15404:	f001 f803 	bl	1640e <lv_theme_material_init+0x1fe6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15408:	2110      	movs	r1, #16
   1540a:	0020      	movs	r0, r4
   1540c:	4b39      	ldr	r3, [pc, #228]	; (154f4 <lv_theme_material_init+0x10cc>)
   1540e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15410:	4b34      	ldr	r3, [pc, #208]	; (154e4 <lv_theme_material_init+0x10bc>)
   15412:	681c      	ldr	r4, [r3, #0]
   15414:	3478      	adds	r4, #120	; 0x78
   15416:	2000      	movs	r0, #0
   15418:	4b41      	ldr	r3, [pc, #260]	; (15520 <lv_theme_material_init+0x10f8>)
   1541a:	4798      	blx	r3
   1541c:	2801      	cmp	r0, #1
   1541e:	d801      	bhi.n	15424 <lv_theme_material_init+0xffc>
   15420:	f001 f802 	bl	16428 <lv_theme_material_init+0x2000>
   15424:	2000      	movs	r0, #0
   15426:	4b32      	ldr	r3, [pc, #200]	; (154f0 <lv_theme_material_init+0x10c8>)
   15428:	4798      	blx	r3
   1542a:	0103      	lsls	r3, r0, #4
   1542c:	1a1b      	subs	r3, r3, r0
   1542e:	005b      	lsls	r3, r3, #1
   15430:	3350      	adds	r3, #80	; 0x50
   15432:	2140      	movs	r1, #64	; 0x40
   15434:	31ff      	adds	r1, #255	; 0xff
   15436:	2201      	movs	r2, #1
   15438:	428b      	cmp	r3, r1
   1543a:	d901      	bls.n	15440 <lv_theme_material_init+0x1018>
   1543c:	f001 f80d 	bl	1645a <lv_theme_material_init+0x2032>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15440:	2111      	movs	r1, #17
   15442:	0020      	movs	r0, r4
   15444:	4b2b      	ldr	r3, [pc, #172]	; (154f4 <lv_theme_material_init+0x10cc>)
   15446:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   15448:	4b26      	ldr	r3, [pc, #152]	; (154e4 <lv_theme_material_init+0x10bc>)
   1544a:	681c      	ldr	r4, [r3, #0]
   1544c:	3478      	adds	r4, #120	; 0x78
   1544e:	2000      	movs	r0, #0
   15450:	4b33      	ldr	r3, [pc, #204]	; (15520 <lv_theme_material_init+0x10f8>)
   15452:	4798      	blx	r3
   15454:	2801      	cmp	r0, #1
   15456:	d801      	bhi.n	1545c <lv_theme_material_init+0x1034>
   15458:	f001 f80c 	bl	16474 <lv_theme_material_init+0x204c>
   1545c:	2000      	movs	r0, #0
   1545e:	4b24      	ldr	r3, [pc, #144]	; (154f0 <lv_theme_material_init+0x10c8>)
   15460:	4798      	blx	r3
   15462:	0103      	lsls	r3, r0, #4
   15464:	1a1b      	subs	r3, r3, r0
   15466:	005b      	lsls	r3, r3, #1
   15468:	3350      	adds	r3, #80	; 0x50
   1546a:	2140      	movs	r1, #64	; 0x40
   1546c:	31ff      	adds	r1, #255	; 0xff
   1546e:	2201      	movs	r2, #1
   15470:	428b      	cmp	r3, r1
   15472:	d901      	bls.n	15478 <lv_theme_material_init+0x1050>
   15474:	f001 f817 	bl	164a6 <lv_theme_material_init+0x207e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15478:	2114      	movs	r1, #20
   1547a:	0020      	movs	r0, r4
   1547c:	4b1d      	ldr	r3, [pc, #116]	; (154f4 <lv_theme_material_init+0x10cc>)
   1547e:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   15480:	4b18      	ldr	r3, [pc, #96]	; (154e4 <lv_theme_material_init+0x10bc>)
   15482:	681c      	ldr	r4, [r3, #0]
   15484:	3478      	adds	r4, #120	; 0x78
   15486:	2000      	movs	r0, #0
   15488:	4b25      	ldr	r3, [pc, #148]	; (15520 <lv_theme_material_init+0x10f8>)
   1548a:	4798      	blx	r3
   1548c:	2801      	cmp	r0, #1
   1548e:	d801      	bhi.n	15494 <lv_theme_material_init+0x106c>
   15490:	f001 f816 	bl	164c0 <lv_theme_material_init+0x2098>
   15494:	2000      	movs	r0, #0
   15496:	4b16      	ldr	r3, [pc, #88]	; (154f0 <lv_theme_material_init+0x10c8>)
   15498:	4798      	blx	r3
   1549a:	0103      	lsls	r3, r0, #4
   1549c:	1a18      	subs	r0, r3, r0
   1549e:	0040      	lsls	r0, r0, #1
   154a0:	3050      	adds	r0, #80	; 0x50
   154a2:	2340      	movs	r3, #64	; 0x40
   154a4:	33ff      	adds	r3, #255	; 0xff
   154a6:	4298      	cmp	r0, r3
   154a8:	d901      	bls.n	154ae <lv_theme_material_init+0x1086>
   154aa:	f001 f824 	bl	164f6 <lv_theme_material_init+0x20ce>
   154ae:	2201      	movs	r2, #1
   154b0:	4252      	negs	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   154b2:	2104      	movs	r1, #4
   154b4:	0020      	movs	r0, r4
   154b6:	4d0f      	ldr	r5, [pc, #60]	; (154f4 <lv_theme_material_init+0x10cc>)
   154b8:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, 0);
   154ba:	4c0a      	ldr	r4, [pc, #40]	; (154e4 <lv_theme_material_init+0x10bc>)
   154bc:	6820      	ldr	r0, [r4, #0]
   154be:	3078      	adds	r0, #120	; 0x78
   154c0:	2200      	movs	r2, #0
   154c2:	4918      	ldr	r1, [pc, #96]	; (15524 <lv_theme_material_init+0x10fc>)
   154c4:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, 0);
   154c6:	6820      	ldr	r0, [r4, #0]
   154c8:	3078      	adds	r0, #120	; 0x78
   154ca:	2200      	movs	r2, #0
   154cc:	2182      	movs	r1, #130	; 0x82
   154ce:	0049      	lsls	r1, r1, #1
   154d0:	47a8      	blx	r5
   154d2:	e029      	b.n	15528 <lv_theme_material_init+0x1100>
   154d4:	0001242d 	.word	0x0001242d
   154d8:	20004c3c 	.word	0x20004c3c
   154dc:	00008089 	.word	0x00008089
   154e0:	00004ded 	.word	0x00004ded
   154e4:	20004c38 	.word	0x20004c38
   154e8:	00004f4d 	.word	0x00004f4d
   154ec:	0001ca0c 	.word	0x0001ca0c
   154f0:	0000f5fd 	.word	0x0000f5fd
   154f4:	00004c8d 	.word	0x00004c8d
   154f8:	00001029 	.word	0x00001029
   154fc:	00002029 	.word	0x00002029
   15500:	00010275 	.word	0x00010275
   15504:	00001129 	.word	0x00001129
   15508:	00008189 	.word	0x00008189
   1550c:	0000a089 	.word	0x0000a089
   15510:	000080a9 	.word	0x000080a9
   15514:	000081a9 	.word	0x000081a9
   15518:	0000a0a9 	.word	0x0000a0a9
   1551c:	00000239 	.word	0x00000239
   15520:	0000f619 	.word	0x0000f619
   15524:	00001004 	.word	0x00001004
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, 0);
   15528:	6820      	ldr	r0, [r4, #0]
   1552a:	3078      	adds	r0, #120	; 0x78
   1552c:	2200      	movs	r2, #0
   1552e:	49fa      	ldr	r1, [pc, #1000]	; (15918 <lv_theme_material_init+0x14f0>)
   15530:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   15532:	6820      	ldr	r0, [r4, #0]
   15534:	3078      	adds	r0, #120	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   15536:	2296      	movs	r2, #150	; 0x96
   15538:	21b0      	movs	r1, #176	; 0xb0
   1553a:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   1553c:	6820      	ldr	r0, [r4, #0]
   1553e:	3078      	adds	r0, #120	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15540:	2229      	movs	r2, #41	; 0x29
   15542:	21b7      	movs	r1, #183	; 0xb7
   15544:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
   15546:	6820      	ldr	r0, [r4, #0]
   15548:	3078      	adds	r0, #120	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   1554a:	2204      	movs	r2, #4
   1554c:	21b6      	movs	r1, #182	; 0xb6
   1554e:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_page);
   15550:	6820      	ldr	r0, [r4, #0]
   15552:	3054      	adds	r0, #84	; 0x54
   15554:	4bf1      	ldr	r3, [pc, #964]	; (1591c <lv_theme_material_init+0x14f4>)
   15556:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   15558:	6824      	ldr	r4, [r4, #0]
   1555a:	3454      	adds	r4, #84	; 0x54
   1555c:	2000      	movs	r0, #0
   1555e:	4bf0      	ldr	r3, [pc, #960]	; (15920 <lv_theme_material_init+0x14f8>)
   15560:	4798      	blx	r3
   15562:	0083      	lsls	r3, r0, #2
   15564:	181b      	adds	r3, r3, r0
   15566:	009b      	lsls	r3, r3, #2
   15568:	3350      	adds	r3, #80	; 0x50
   1556a:	2140      	movs	r1, #64	; 0x40
   1556c:	31ff      	adds	r1, #255	; 0xff
   1556e:	2201      	movs	r2, #1
   15570:	428b      	cmp	r3, r1
   15572:	d901      	bls.n	15578 <lv_theme_material_init+0x1150>
   15574:	f000 ffcd 	bl	16512 <lv_theme_material_init+0x20ea>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   15578:	49ea      	ldr	r1, [pc, #936]	; (15924 <lv_theme_material_init+0x14fc>)
   1557a:	0020      	movs	r0, r4
   1557c:	4dea      	ldr	r5, [pc, #936]	; (15928 <lv_theme_material_init+0x1500>)
   1557e:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
   15580:	4cea      	ldr	r4, [pc, #936]	; (1592c <lv_theme_material_init+0x1504>)
   15582:	6820      	ldr	r0, [r4, #0]
   15584:	3054      	adds	r0, #84	; 0x54
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   15586:	2201      	movs	r2, #1
   15588:	2102      	movs	r1, #2
   1558a:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
   1558c:	6820      	ldr	r0, [r4, #0]
   1558e:	3058      	adds	r0, #88	; 0x58
   15590:	4be2      	ldr	r3, [pc, #904]	; (1591c <lv_theme_material_init+0x14f4>)
   15592:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   15594:	6820      	ldr	r0, [r4, #0]
   15596:	3058      	adds	r0, #88	; 0x58
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15598:	22ff      	movs	r2, #255	; 0xff
   1559a:	212c      	movs	r1, #44	; 0x2c
   1559c:	4be4      	ldr	r3, [pc, #912]	; (15930 <lv_theme_material_init+0x1508>)
   1559e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
   155a0:	6820      	ldr	r0, [r4, #0]
   155a2:	3058      	adds	r0, #88	; 0x58
   155a4:	4de3      	ldr	r5, [pc, #908]	; (15934 <lv_theme_material_init+0x150c>)
   155a6:	88aa      	ldrh	r2, [r5, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   155a8:	2129      	movs	r1, #41	; 0x29
   155aa:	4ee3      	ldr	r6, [pc, #908]	; (15938 <lv_theme_material_init+0x1510>)
   155ac:	47b0      	blx	r6
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
   155ae:	6820      	ldr	r0, [r4, #0]
   155b0:	3058      	adds	r0, #88	; 0x58
   155b2:	2201      	movs	r2, #1
   155b4:	4252      	negs	r2, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   155b6:	49e1      	ldr	r1, [pc, #900]	; (1593c <lv_theme_material_init+0x1514>)
   155b8:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   155ba:	6820      	ldr	r0, [r4, #0]
   155bc:	3058      	adds	r0, #88	; 0x58
   155be:	69ab      	ldr	r3, [r5, #24]
   155c0:	079b      	lsls	r3, r3, #30
   155c2:	d501      	bpl.n	155c8 <lv_theme_material_init+0x11a0>
   155c4:	f000 ffb3 	bl	1652e <lv_theme_material_init+0x2106>
   155c8:	2309      	movs	r3, #9
   155ca:	2113      	movs	r1, #19
   155cc:	220a      	movs	r2, #10
   155ce:	0149      	lsls	r1, r1, #5
   155d0:	02db      	lsls	r3, r3, #11
   155d2:	430a      	orrs	r2, r1
   155d4:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   155d6:	49da      	ldr	r1, [pc, #872]	; (15940 <lv_theme_material_init+0x1518>)
   155d8:	4bd7      	ldr	r3, [pc, #860]	; (15938 <lv_theme_material_init+0x1510>)
   155da:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   155dc:	4bd3      	ldr	r3, [pc, #844]	; (1592c <lv_theme_material_init+0x1504>)
   155de:	6818      	ldr	r0, [r3, #0]
   155e0:	3058      	adds	r0, #88	; 0x58
   155e2:	4bd4      	ldr	r3, [pc, #848]	; (15934 <lv_theme_material_init+0x150c>)
   155e4:	699b      	ldr	r3, [r3, #24]
   155e6:	079b      	lsls	r3, r3, #30
   155e8:	d501      	bpl.n	155ee <lv_theme_material_init+0x11c6>
   155ea:	f000 ffa5 	bl	16538 <lv_theme_material_init+0x2110>
   155ee:	231f      	movs	r3, #31
   155f0:	213f      	movs	r1, #63	; 0x3f
   155f2:	221f      	movs	r2, #31
   155f4:	0149      	lsls	r1, r1, #5
   155f6:	02db      	lsls	r3, r3, #11
   155f8:	430a      	orrs	r2, r1
   155fa:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   155fc:	49d1      	ldr	r1, [pc, #836]	; (15944 <lv_theme_material_init+0x151c>)
   155fe:	4bce      	ldr	r3, [pc, #824]	; (15938 <lv_theme_material_init+0x1510>)
   15600:	4798      	blx	r3
    style_init_reset(&styles->roller_bg);
   15602:	4cca      	ldr	r4, [pc, #808]	; (1592c <lv_theme_material_init+0x1504>)
   15604:	6820      	ldr	r0, [r4, #0]
   15606:	3088      	adds	r0, #136	; 0x88
   15608:	4bc4      	ldr	r3, [pc, #784]	; (1591c <lv_theme_material_init+0x14f4>)
   1560a:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   1560c:	6824      	ldr	r4, [r4, #0]
   1560e:	3488      	adds	r4, #136	; 0x88
   15610:	2000      	movs	r0, #0
   15612:	4bc3      	ldr	r3, [pc, #780]	; (15920 <lv_theme_material_init+0x14f8>)
   15614:	4798      	blx	r3
   15616:	0083      	lsls	r3, r0, #2
   15618:	1818      	adds	r0, r3, r0
   1561a:	0083      	lsls	r3, r0, #2
   1561c:	18c0      	adds	r0, r0, r3
   1561e:	3050      	adds	r0, #80	; 0x50
   15620:	2340      	movs	r3, #64	; 0x40
   15622:	33ff      	adds	r3, #255	; 0xff
   15624:	2201      	movs	r2, #1
   15626:	4298      	cmp	r0, r3
   15628:	d901      	bls.n	1562e <lv_theme_material_init+0x1206>
   1562a:	f000 ff8a 	bl	16542 <lv_theme_material_init+0x211a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1562e:	49bd      	ldr	r1, [pc, #756]	; (15924 <lv_theme_material_init+0x14fc>)
   15630:	0020      	movs	r0, r4
   15632:	4bbd      	ldr	r3, [pc, #756]	; (15928 <lv_theme_material_init+0x1500>)
   15634:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
   15636:	4cbd      	ldr	r4, [pc, #756]	; (1592c <lv_theme_material_init+0x1504>)
   15638:	6820      	ldr	r0, [r4, #0]
   1563a:	308c      	adds	r0, #140	; 0x8c
   1563c:	4fb7      	ldr	r7, [pc, #732]	; (1591c <lv_theme_material_init+0x14f4>)
   1563e:	47b8      	blx	r7
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   15640:	6820      	ldr	r0, [r4, #0]
   15642:	308c      	adds	r0, #140	; 0x8c
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15644:	22ff      	movs	r2, #255	; 0xff
   15646:	212c      	movs	r1, #44	; 0x2c
   15648:	4eb9      	ldr	r6, [pc, #740]	; (15930 <lv_theme_material_init+0x1508>)
   1564a:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
   1564c:	6820      	ldr	r0, [r4, #0]
   1564e:	308c      	adds	r0, #140	; 0x8c
   15650:	4db8      	ldr	r5, [pc, #736]	; (15934 <lv_theme_material_init+0x150c>)
   15652:	88aa      	ldrh	r2, [r5, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15654:	2129      	movs	r1, #41	; 0x29
   15656:	4bb8      	ldr	r3, [pc, #736]	; (15938 <lv_theme_material_init+0x1510>)
   15658:	4698      	mov	r8, r3
   1565a:	4798      	blx	r3
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   1565c:	6820      	ldr	r0, [r4, #0]
   1565e:	308c      	adds	r0, #140	; 0x8c
   15660:	4bb9      	ldr	r3, [pc, #740]	; (15948 <lv_theme_material_init+0x1520>)
   15662:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15664:	49b5      	ldr	r1, [pc, #724]	; (1593c <lv_theme_material_init+0x1514>)
   15666:	47c0      	blx	r8
    style_init_reset(&styles->tabview_btns_bg);
   15668:	6820      	ldr	r0, [r4, #0]
   1566a:	30a8      	adds	r0, #168	; 0xa8
   1566c:	47b8      	blx	r7
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   1566e:	6820      	ldr	r0, [r4, #0]
   15670:	30a8      	adds	r0, #168	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15672:	22ff      	movs	r2, #255	; 0xff
   15674:	212c      	movs	r1, #44	; 0x2c
   15676:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   15678:	6820      	ldr	r0, [r4, #0]
   1567a:	30a8      	adds	r0, #168	; 0xa8
   1567c:	69ab      	ldr	r3, [r5, #24]
   1567e:	079b      	lsls	r3, r3, #30
   15680:	d501      	bpl.n	15686 <lv_theme_material_init+0x125e>
   15682:	f000 ff6c 	bl	1655e <lv_theme_material_init+0x2136>
   15686:	230b      	movs	r3, #11
   15688:	2118      	movs	r1, #24
   1568a:	220e      	movs	r2, #14
   1568c:	0149      	lsls	r1, r1, #5
   1568e:	02db      	lsls	r3, r3, #11
   15690:	430a      	orrs	r2, r1
   15692:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15694:	2129      	movs	r1, #41	; 0x29
   15696:	4ba8      	ldr	r3, [pc, #672]	; (15938 <lv_theme_material_init+0x1510>)
   15698:	4798      	blx	r3
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   1569a:	4ba4      	ldr	r3, [pc, #656]	; (1592c <lv_theme_material_init+0x1504>)
   1569c:	6818      	ldr	r0, [r3, #0]
   1569e:	30a8      	adds	r0, #168	; 0xa8
                              IS_LIGHT ? lv_color_hex(0xe4eaf0) : lv_color_hex(0x3b3e42));
   156a0:	4ba4      	ldr	r3, [pc, #656]	; (15934 <lv_theme_material_init+0x150c>)
   156a2:	699b      	ldr	r3, [r3, #24]
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   156a4:	079b      	lsls	r3, r3, #30
   156a6:	d501      	bpl.n	156ac <lv_theme_material_init+0x1284>
   156a8:	f000 ff5e 	bl	16568 <lv_theme_material_init+0x2140>
   156ac:	2307      	movs	r3, #7
   156ae:	210f      	movs	r1, #15
   156b0:	2208      	movs	r2, #8
   156b2:	0149      	lsls	r1, r1, #5
   156b4:	02db      	lsls	r3, r3, #11
   156b6:	430a      	orrs	r2, r1
   156b8:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   156ba:	2139      	movs	r1, #57	; 0x39
   156bc:	4b9e      	ldr	r3, [pc, #632]	; (15938 <lv_theme_material_init+0x1510>)
   156be:	4798      	blx	r3
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   156c0:	4b9a      	ldr	r3, [pc, #616]	; (1592c <lv_theme_material_init+0x1504>)
   156c2:	681c      	ldr	r4, [r3, #0]
   156c4:	34a8      	adds	r4, #168	; 0xa8
   156c6:	2000      	movs	r0, #0
   156c8:	4b95      	ldr	r3, [pc, #596]	; (15920 <lv_theme_material_init+0x14f8>)
   156ca:	4798      	blx	r3
   156cc:	0083      	lsls	r3, r0, #2
   156ce:	1818      	adds	r0, r3, r0
   156d0:	3050      	adds	r0, #80	; 0x50
   156d2:	2340      	movs	r3, #64	; 0x40
   156d4:	33ff      	adds	r3, #255	; 0xff
   156d6:	2201      	movs	r2, #1
   156d8:	4298      	cmp	r0, r3
   156da:	d901      	bls.n	156e0 <lv_theme_material_init+0x12b8>
   156dc:	f000 ff4e 	bl	1657c <lv_theme_material_init+0x2154>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   156e0:	2130      	movs	r1, #48	; 0x30
   156e2:	0020      	movs	r0, r4
   156e4:	4d90      	ldr	r5, [pc, #576]	; (15928 <lv_theme_material_init+0x1500>)
   156e6:	47a8      	blx	r5
    lv_style_set_border_side(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   156e8:	4c90      	ldr	r4, [pc, #576]	; (1592c <lv_theme_material_init+0x1504>)
   156ea:	6820      	ldr	r0, [r4, #0]
   156ec:	30a8      	adds	r0, #168	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   156ee:	2201      	movs	r2, #1
   156f0:	2131      	movs	r1, #49	; 0x31
   156f2:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   156f4:	6820      	ldr	r0, [r4, #0]
   156f6:	30a8      	adds	r0, #168	; 0xa8
   156f8:	4b8e      	ldr	r3, [pc, #568]	; (15934 <lv_theme_material_init+0x150c>)
   156fa:	699b      	ldr	r3, [r3, #24]
   156fc:	079b      	lsls	r3, r3, #30
   156fe:	d501      	bpl.n	15704 <lv_theme_material_init+0x12dc>
   15700:	f000 ff49 	bl	16596 <lv_theme_material_init+0x216e>
   15704:	231c      	movs	r3, #28
   15706:	213a      	movs	r1, #58	; 0x3a
   15708:	221d      	movs	r2, #29
   1570a:	0149      	lsls	r1, r1, #5
   1570c:	02db      	lsls	r3, r3, #11
   1570e:	430a      	orrs	r2, r1
   15710:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15712:	498a      	ldr	r1, [pc, #552]	; (1593c <lv_theme_material_init+0x1514>)
   15714:	4d88      	ldr	r5, [pc, #544]	; (15938 <lv_theme_material_init+0x1510>)
   15716:	47a8      	blx	r5
    lv_style_set_text_font(&styles->tabview_btns_bg, LV_STATE_DEFAULT, theme.font_normal);
   15718:	4b86      	ldr	r3, [pc, #536]	; (15934 <lv_theme_material_init+0x150c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1571a:	68da      	ldr	r2, [r3, #12]
   1571c:	4c83      	ldr	r4, [pc, #524]	; (1592c <lv_theme_material_init+0x1504>)
   1571e:	6820      	ldr	r0, [r4, #0]
   15720:	30a8      	adds	r0, #168	; 0xa8
   15722:	498a      	ldr	r1, [pc, #552]	; (1594c <lv_theme_material_init+0x1524>)
   15724:	4b8a      	ldr	r3, [pc, #552]	; (15950 <lv_theme_material_init+0x1528>)
   15726:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
   15728:	6820      	ldr	r0, [r4, #0]
   1572a:	30a8      	adds	r0, #168	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1572c:	4b89      	ldr	r3, [pc, #548]	; (15954 <lv_theme_material_init+0x152c>)
   1572e:	881a      	ldrh	r2, [r3, #0]
   15730:	4989      	ldr	r1, [pc, #548]	; (15958 <lv_theme_material_init+0x1530>)
   15732:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   15734:	6824      	ldr	r4, [r4, #0]
   15736:	34a8      	adds	r4, #168	; 0xa8
   15738:	2000      	movs	r0, #0
   1573a:	4b79      	ldr	r3, [pc, #484]	; (15920 <lv_theme_material_init+0x14f8>)
   1573c:	4798      	blx	r3
   1573e:	00c3      	lsls	r3, r0, #3
   15740:	1a18      	subs	r0, r3, r0
   15742:	3050      	adds	r0, #80	; 0x50
   15744:	2340      	movs	r3, #64	; 0x40
   15746:	33ff      	adds	r3, #255	; 0xff
   15748:	2201      	movs	r2, #1
   1574a:	4298      	cmp	r0, r3
   1574c:	d901      	bls.n	15752 <lv_theme_material_init+0x132a>
   1574e:	f000 ff27 	bl	165a0 <lv_theme_material_init+0x2178>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15752:	2110      	movs	r1, #16
   15754:	0020      	movs	r0, r4
   15756:	4b74      	ldr	r3, [pc, #464]	; (15928 <lv_theme_material_init+0x1500>)
   15758:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1575a:	4b74      	ldr	r3, [pc, #464]	; (1592c <lv_theme_material_init+0x1504>)
   1575c:	681c      	ldr	r4, [r3, #0]
   1575e:	34a8      	adds	r4, #168	; 0xa8
   15760:	2000      	movs	r0, #0
   15762:	4b6f      	ldr	r3, [pc, #444]	; (15920 <lv_theme_material_init+0x14f8>)
   15764:	4798      	blx	r3
   15766:	00c3      	lsls	r3, r0, #3
   15768:	1a18      	subs	r0, r3, r0
   1576a:	3050      	adds	r0, #80	; 0x50
   1576c:	2340      	movs	r3, #64	; 0x40
   1576e:	33ff      	adds	r3, #255	; 0xff
   15770:	2201      	movs	r2, #1
   15772:	4298      	cmp	r0, r3
   15774:	d901      	bls.n	1577a <lv_theme_material_init+0x1352>
   15776:	f000 ff1f 	bl	165b8 <lv_theme_material_init+0x2190>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1577a:	2112      	movs	r1, #18
   1577c:	0020      	movs	r0, r4
   1577e:	4b6a      	ldr	r3, [pc, #424]	; (15928 <lv_theme_material_init+0x1500>)
   15780:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   15782:	4b6a      	ldr	r3, [pc, #424]	; (1592c <lv_theme_material_init+0x1504>)
   15784:	681c      	ldr	r4, [r3, #0]
   15786:	34a8      	adds	r4, #168	; 0xa8
   15788:	2000      	movs	r0, #0
   1578a:	4b65      	ldr	r3, [pc, #404]	; (15920 <lv_theme_material_init+0x14f8>)
   1578c:	4798      	blx	r3
   1578e:	00c3      	lsls	r3, r0, #3
   15790:	1a18      	subs	r0, r3, r0
   15792:	3050      	adds	r0, #80	; 0x50
   15794:	2340      	movs	r3, #64	; 0x40
   15796:	33ff      	adds	r3, #255	; 0xff
   15798:	2201      	movs	r2, #1
   1579a:	4298      	cmp	r0, r3
   1579c:	d901      	bls.n	157a2 <lv_theme_material_init+0x137a>
   1579e:	f000 ff17 	bl	165d0 <lv_theme_material_init+0x21a8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   157a2:	2113      	movs	r1, #19
   157a4:	0020      	movs	r0, r4
   157a6:	4b60      	ldr	r3, [pc, #384]	; (15928 <lv_theme_material_init+0x1500>)
   157a8:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
   157aa:	4c60      	ldr	r4, [pc, #384]	; (1592c <lv_theme_material_init+0x1504>)
   157ac:	6820      	ldr	r0, [r4, #0]
   157ae:	30a4      	adds	r0, #164	; 0xa4
   157b0:	4b5a      	ldr	r3, [pc, #360]	; (1591c <lv_theme_material_init+0x14f4>)
   157b2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
   157b4:	6820      	ldr	r0, [r4, #0]
   157b6:	30a4      	adds	r0, #164	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   157b8:	227f      	movs	r2, #127	; 0x7f
   157ba:	4968      	ldr	r1, [pc, #416]	; (1595c <lv_theme_material_init+0x1534>)
   157bc:	4b5c      	ldr	r3, [pc, #368]	; (15930 <lv_theme_material_init+0x1508>)
   157be:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
   157c0:	6820      	ldr	r0, [r4, #0]
   157c2:	30a4      	adds	r0, #164	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   157c4:	4b66      	ldr	r3, [pc, #408]	; (15960 <lv_theme_material_init+0x1538>)
   157c6:	881a      	ldrh	r2, [r3, #0]
   157c8:	495d      	ldr	r1, [pc, #372]	; (15940 <lv_theme_material_init+0x1518>)
   157ca:	4b5b      	ldr	r3, [pc, #364]	; (15938 <lv_theme_material_init+0x1510>)
   157cc:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
   157ce:	6820      	ldr	r0, [r4, #0]
   157d0:	30a4      	adds	r0, #164	; 0xa4
   157d2:	4b58      	ldr	r3, [pc, #352]	; (15934 <lv_theme_material_init+0x150c>)
   157d4:	699b      	ldr	r3, [r3, #24]
   157d6:	079b      	lsls	r3, r3, #30
   157d8:	d501      	bpl.n	157de <lv_theme_material_init+0x13b6>
   157da:	f000 ff05 	bl	165e8 <lv_theme_material_init+0x21c0>
   157de:	231c      	movs	r3, #28
   157e0:	213a      	movs	r1, #58	; 0x3a
   157e2:	221d      	movs	r2, #29
   157e4:	0149      	lsls	r1, r1, #5
   157e6:	02db      	lsls	r3, r3, #11
   157e8:	430a      	orrs	r2, r1
   157ea:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   157ec:	495d      	ldr	r1, [pc, #372]	; (15964 <lv_theme_material_init+0x153c>)
   157ee:	4b52      	ldr	r3, [pc, #328]	; (15938 <lv_theme_material_init+0x1510>)
   157f0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   157f2:	4b4e      	ldr	r3, [pc, #312]	; (1592c <lv_theme_material_init+0x1504>)
   157f4:	681c      	ldr	r4, [r3, #0]
   157f6:	34a4      	adds	r4, #164	; 0xa4
   157f8:	2000      	movs	r0, #0
   157fa:	4b49      	ldr	r3, [pc, #292]	; (15920 <lv_theme_material_init+0x14f8>)
   157fc:	4798      	blx	r3
   157fe:	0083      	lsls	r3, r0, #2
   15800:	181b      	adds	r3, r3, r0
   15802:	009b      	lsls	r3, r3, #2
   15804:	3350      	adds	r3, #80	; 0x50
   15806:	2140      	movs	r1, #64	; 0x40
   15808:	31ff      	adds	r1, #255	; 0xff
   1580a:	2201      	movs	r2, #1
   1580c:	428b      	cmp	r3, r1
   1580e:	d901      	bls.n	15814 <lv_theme_material_init+0x13ec>
   15810:	f000 feef 	bl	165f2 <lv_theme_material_init+0x21ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15814:	2110      	movs	r1, #16
   15816:	0020      	movs	r0, r4
   15818:	4b43      	ldr	r3, [pc, #268]	; (15928 <lv_theme_material_init+0x1500>)
   1581a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   1581c:	4b43      	ldr	r3, [pc, #268]	; (1592c <lv_theme_material_init+0x1504>)
   1581e:	681c      	ldr	r4, [r3, #0]
   15820:	34a4      	adds	r4, #164	; 0xa4
   15822:	2000      	movs	r0, #0
   15824:	4b3e      	ldr	r3, [pc, #248]	; (15920 <lv_theme_material_init+0x14f8>)
   15826:	4798      	blx	r3
   15828:	0083      	lsls	r3, r0, #2
   1582a:	181b      	adds	r3, r3, r0
   1582c:	009b      	lsls	r3, r3, #2
   1582e:	3350      	adds	r3, #80	; 0x50
   15830:	2140      	movs	r1, #64	; 0x40
   15832:	31ff      	adds	r1, #255	; 0xff
   15834:	2201      	movs	r2, #1
   15836:	428b      	cmp	r3, r1
   15838:	d901      	bls.n	1583e <lv_theme_material_init+0x1416>
   1583a:	f000 fee8 	bl	1660e <lv_theme_material_init+0x21e6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1583e:	2111      	movs	r1, #17
   15840:	0020      	movs	r0, r4
   15842:	4b39      	ldr	r3, [pc, #228]	; (15928 <lv_theme_material_init+0x1500>)
   15844:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
   15846:	4c39      	ldr	r4, [pc, #228]	; (1592c <lv_theme_material_init+0x1504>)
   15848:	6820      	ldr	r0, [r4, #0]
   1584a:	30a4      	adds	r0, #164	; 0xa4
   1584c:	4e39      	ldr	r6, [pc, #228]	; (15934 <lv_theme_material_init+0x150c>)
   1584e:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15850:	4945      	ldr	r1, [pc, #276]	; (15968 <lv_theme_material_init+0x1540>)
   15852:	4d39      	ldr	r5, [pc, #228]	; (15938 <lv_theme_material_init+0x1510>)
   15854:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
   15856:	6820      	ldr	r0, [r4, #0]
   15858:	30a4      	adds	r0, #164	; 0xa4
   1585a:	88f2      	ldrh	r2, [r6, #6]
   1585c:	4943      	ldr	r1, [pc, #268]	; (1596c <lv_theme_material_init+0x1544>)
   1585e:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
   15860:	6820      	ldr	r0, [r4, #0]
   15862:	30ac      	adds	r0, #172	; 0xac
   15864:	4b2d      	ldr	r3, [pc, #180]	; (1591c <lv_theme_material_init+0x14f4>)
   15866:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   15868:	6820      	ldr	r0, [r4, #0]
   1586a:	30ac      	adds	r0, #172	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1586c:	22ff      	movs	r2, #255	; 0xff
   1586e:	212c      	movs	r1, #44	; 0x2c
   15870:	4b2f      	ldr	r3, [pc, #188]	; (15930 <lv_theme_material_init+0x1508>)
   15872:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
   15874:	6820      	ldr	r0, [r4, #0]
   15876:	30ac      	adds	r0, #172	; 0xac
   15878:	88b2      	ldrh	r2, [r6, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1587a:	2129      	movs	r1, #41	; 0x29
   1587c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
   1587e:	6820      	ldr	r0, [r4, #0]
   15880:	30ac      	adds	r0, #172	; 0xac
   15882:	88f2      	ldrh	r2, [r6, #6]
   15884:	493a      	ldr	r1, [pc, #232]	; (15970 <lv_theme_material_init+0x1548>)
   15886:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   15888:	6824      	ldr	r4, [r4, #0]
   1588a:	34ac      	adds	r4, #172	; 0xac
   1588c:	2000      	movs	r0, #0
   1588e:	4b24      	ldr	r3, [pc, #144]	; (15920 <lv_theme_material_init+0x14f8>)
   15890:	4798      	blx	r3
   15892:	0083      	lsls	r3, r0, #2
   15894:	1818      	adds	r0, r3, r0
   15896:	3050      	adds	r0, #80	; 0x50
   15898:	2340      	movs	r3, #64	; 0x40
   1589a:	33ff      	adds	r3, #255	; 0xff
   1589c:	2201      	movs	r2, #1
   1589e:	4298      	cmp	r0, r3
   158a0:	d901      	bls.n	158a6 <lv_theme_material_init+0x147e>
   158a2:	f000 fec2 	bl	1662a <lv_theme_material_init+0x2202>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   158a6:	2103      	movs	r1, #3
   158a8:	0020      	movs	r0, r4
   158aa:	4d1f      	ldr	r5, [pc, #124]	; (15928 <lv_theme_material_init+0x1500>)
   158ac:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   158ae:	4c1f      	ldr	r4, [pc, #124]	; (1592c <lv_theme_material_init+0x1504>)
   158b0:	6820      	ldr	r0, [r4, #0]
   158b2:	30ac      	adds	r0, #172	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   158b4:	4a2f      	ldr	r2, [pc, #188]	; (15974 <lv_theme_material_init+0x154c>)
   158b6:	2101      	movs	r1, #1
   158b8:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
   158ba:	6820      	ldr	r0, [r4, #0]
   158bc:	30b0      	adds	r0, #176	; 0xb0
   158be:	4b17      	ldr	r3, [pc, #92]	; (1591c <lv_theme_material_init+0x14f4>)
   158c0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   158c2:	6824      	ldr	r4, [r4, #0]
   158c4:	34b0      	adds	r4, #176	; 0xb0
   158c6:	2000      	movs	r0, #0
   158c8:	4b2b      	ldr	r3, [pc, #172]	; (15978 <lv_theme_material_init+0x1550>)
   158ca:	4798      	blx	r3
   158cc:	2801      	cmp	r0, #1
   158ce:	d801      	bhi.n	158d4 <lv_theme_material_init+0x14ac>
   158d0:	f000 feb8 	bl	16644 <lv_theme_material_init+0x221c>
   158d4:	2000      	movs	r0, #0
   158d6:	4b12      	ldr	r3, [pc, #72]	; (15920 <lv_theme_material_init+0x14f8>)
   158d8:	4798      	blx	r3
   158da:	0103      	lsls	r3, r0, #4
   158dc:	1a1b      	subs	r3, r3, r0
   158de:	005b      	lsls	r3, r3, #1
   158e0:	3350      	adds	r3, #80	; 0x50
   158e2:	2140      	movs	r1, #64	; 0x40
   158e4:	31ff      	adds	r1, #255	; 0xff
   158e6:	2201      	movs	r2, #1
   158e8:	428b      	cmp	r3, r1
   158ea:	d901      	bls.n	158f0 <lv_theme_material_init+0x14c8>
   158ec:	f000 fec3 	bl	16676 <lv_theme_material_init+0x224e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   158f0:	2110      	movs	r1, #16
   158f2:	0020      	movs	r0, r4
   158f4:	4b0c      	ldr	r3, [pc, #48]	; (15928 <lv_theme_material_init+0x1500>)
   158f6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   158f8:	4b0c      	ldr	r3, [pc, #48]	; (1592c <lv_theme_material_init+0x1504>)
   158fa:	681c      	ldr	r4, [r3, #0]
   158fc:	34b0      	adds	r4, #176	; 0xb0
   158fe:	2000      	movs	r0, #0
   15900:	4b1d      	ldr	r3, [pc, #116]	; (15978 <lv_theme_material_init+0x1550>)
   15902:	4798      	blx	r3
   15904:	2801      	cmp	r0, #1
   15906:	d801      	bhi.n	1590c <lv_theme_material_init+0x14e4>
   15908:	f000 fec2 	bl	16690 <lv_theme_material_init+0x2268>
   1590c:	2000      	movs	r0, #0
   1590e:	4b04      	ldr	r3, [pc, #16]	; (15920 <lv_theme_material_init+0x14f8>)
   15910:	4798      	blx	r3
   15912:	0103      	lsls	r3, r0, #4
   15914:	e032      	b.n	1597c <lv_theme_material_init+0x1554>
   15916:	46c0      	nop			; (mov r8, r8)
   15918:	00002004 	.word	0x00002004
   1591c:	0001242d 	.word	0x0001242d
   15920:	0000f5fd 	.word	0x0000f5fd
   15924:	00008081 	.word	0x00008081
   15928:	00004c8d 	.word	0x00004c8d
   1592c:	20004c38 	.word	0x20004c38
   15930:	00004f4d 	.word	0x00004f4d
   15934:	20004c3c 	.word	0x20004c3c
   15938:	00004ded 	.word	0x00004ded
   1593c:	00008089 	.word	0x00008089
   15940:	00001029 	.word	0x00001029
   15944:	00009089 	.word	0x00009089
   15948:	0001ca0c 	.word	0x0001ca0c
   1594c:	0000808e 	.word	0x0000808e
   15950:	000050a1 	.word	0x000050a1
   15954:	0001ca0a 	.word	0x0001ca0a
   15958:	000080a9 	.word	0x000080a9
   1595c:	0000102c 	.word	0x0000102c
   15960:	0001ca08 	.word	0x0001ca08
   15964:	00008189 	.word	0x00008189
   15968:	00008289 	.word	0x00008289
   1596c:	00008489 	.word	0x00008489
   15970:	00000429 	.word	0x00000429
   15974:	00007fff 	.word	0x00007fff
   15978:	0000f619 	.word	0x0000f619
   1597c:	1a1b      	subs	r3, r3, r0
   1597e:	005b      	lsls	r3, r3, #1
   15980:	3350      	adds	r3, #80	; 0x50
   15982:	2140      	movs	r1, #64	; 0x40
   15984:	31ff      	adds	r1, #255	; 0xff
   15986:	2201      	movs	r2, #1
   15988:	428b      	cmp	r3, r1
   1598a:	d901      	bls.n	15990 <lv_theme_material_init+0x1568>
   1598c:	f000 fe99 	bl	166c2 <lv_theme_material_init+0x229a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15990:	2111      	movs	r1, #17
   15992:	0020      	movs	r0, r4
   15994:	4bf2      	ldr	r3, [pc, #968]	; (15d60 <lv_theme_material_init+0x1938>)
   15996:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   15998:	4bf2      	ldr	r3, [pc, #968]	; (15d64 <lv_theme_material_init+0x193c>)
   1599a:	681c      	ldr	r4, [r3, #0]
   1599c:	34b0      	adds	r4, #176	; 0xb0
   1599e:	2000      	movs	r0, #0
   159a0:	4bf1      	ldr	r3, [pc, #964]	; (15d68 <lv_theme_material_init+0x1940>)
   159a2:	4798      	blx	r3
   159a4:	2801      	cmp	r0, #1
   159a6:	d801      	bhi.n	159ac <lv_theme_material_init+0x1584>
   159a8:	f000 fe98 	bl	166dc <lv_theme_material_init+0x22b4>
   159ac:	2000      	movs	r0, #0
   159ae:	4bef      	ldr	r3, [pc, #956]	; (15d6c <lv_theme_material_init+0x1944>)
   159b0:	4798      	blx	r3
   159b2:	0103      	lsls	r3, r0, #4
   159b4:	1a1b      	subs	r3, r3, r0
   159b6:	005b      	lsls	r3, r3, #1
   159b8:	3350      	adds	r3, #80	; 0x50
   159ba:	2140      	movs	r1, #64	; 0x40
   159bc:	31ff      	adds	r1, #255	; 0xff
   159be:	2201      	movs	r2, #1
   159c0:	428b      	cmp	r3, r1
   159c2:	d901      	bls.n	159c8 <lv_theme_material_init+0x15a0>
   159c4:	f000 fea3 	bl	1670e <lv_theme_material_init+0x22e6>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   159c8:	2112      	movs	r1, #18
   159ca:	0020      	movs	r0, r4
   159cc:	4be4      	ldr	r3, [pc, #912]	; (15d60 <lv_theme_material_init+0x1938>)
   159ce:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   159d0:	4be4      	ldr	r3, [pc, #912]	; (15d64 <lv_theme_material_init+0x193c>)
   159d2:	681c      	ldr	r4, [r3, #0]
   159d4:	34b0      	adds	r4, #176	; 0xb0
   159d6:	2000      	movs	r0, #0
   159d8:	4be3      	ldr	r3, [pc, #908]	; (15d68 <lv_theme_material_init+0x1940>)
   159da:	4798      	blx	r3
   159dc:	2801      	cmp	r0, #1
   159de:	d801      	bhi.n	159e4 <lv_theme_material_init+0x15bc>
   159e0:	f000 fea2 	bl	16728 <lv_theme_material_init+0x2300>
   159e4:	2000      	movs	r0, #0
   159e6:	4be1      	ldr	r3, [pc, #900]	; (15d6c <lv_theme_material_init+0x1944>)
   159e8:	4798      	blx	r3
   159ea:	0103      	lsls	r3, r0, #4
   159ec:	1a1b      	subs	r3, r3, r0
   159ee:	005b      	lsls	r3, r3, #1
   159f0:	3350      	adds	r3, #80	; 0x50
   159f2:	2140      	movs	r1, #64	; 0x40
   159f4:	31ff      	adds	r1, #255	; 0xff
   159f6:	2201      	movs	r2, #1
   159f8:	428b      	cmp	r3, r1
   159fa:	d901      	bls.n	15a00 <lv_theme_material_init+0x15d8>
   159fc:	f000 fead 	bl	1675a <lv_theme_material_init+0x2332>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15a00:	2113      	movs	r1, #19
   15a02:	0020      	movs	r0, r4
   15a04:	4bd6      	ldr	r3, [pc, #856]	; (15d60 <lv_theme_material_init+0x1938>)
   15a06:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   15a08:	4bd6      	ldr	r3, [pc, #856]	; (15d64 <lv_theme_material_init+0x193c>)
   15a0a:	681c      	ldr	r4, [r3, #0]
   15a0c:	34b0      	adds	r4, #176	; 0xb0
   15a0e:	2000      	movs	r0, #0
   15a10:	4bd5      	ldr	r3, [pc, #852]	; (15d68 <lv_theme_material_init+0x1940>)
   15a12:	4798      	blx	r3
   15a14:	2801      	cmp	r0, #1
   15a16:	d801      	bhi.n	15a1c <lv_theme_material_init+0x15f4>
   15a18:	f000 feac 	bl	16774 <lv_theme_material_init+0x234c>
   15a1c:	2000      	movs	r0, #0
   15a1e:	4bd3      	ldr	r3, [pc, #844]	; (15d6c <lv_theme_material_init+0x1944>)
   15a20:	4798      	blx	r3
   15a22:	0103      	lsls	r3, r0, #4
   15a24:	1a1b      	subs	r3, r3, r0
   15a26:	005b      	lsls	r3, r3, #1
   15a28:	3350      	adds	r3, #80	; 0x50
   15a2a:	2140      	movs	r1, #64	; 0x40
   15a2c:	31ff      	adds	r1, #255	; 0xff
   15a2e:	2201      	movs	r2, #1
   15a30:	428b      	cmp	r3, r1
   15a32:	d901      	bls.n	15a38 <lv_theme_material_init+0x1610>
   15a34:	f000 feb7 	bl	167a6 <lv_theme_material_init+0x237e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15a38:	2114      	movs	r1, #20
   15a3a:	0020      	movs	r0, r4
   15a3c:	4bc8      	ldr	r3, [pc, #800]	; (15d60 <lv_theme_material_init+0x1938>)
   15a3e:	4798      	blx	r3
    style_init_reset(&styles->table_cell);
   15a40:	4cc8      	ldr	r4, [pc, #800]	; (15d64 <lv_theme_material_init+0x193c>)
   15a42:	6820      	ldr	r0, [r4, #0]
   15a44:	30a0      	adds	r0, #160	; 0xa0
   15a46:	4bca      	ldr	r3, [pc, #808]	; (15d70 <lv_theme_material_init+0x1948>)
   15a48:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   15a4a:	6820      	ldr	r0, [r4, #0]
   15a4c:	30a0      	adds	r0, #160	; 0xa0
   15a4e:	4bc9      	ldr	r3, [pc, #804]	; (15d74 <lv_theme_material_init+0x194c>)
   15a50:	699b      	ldr	r3, [r3, #24]
   15a52:	079b      	lsls	r3, r3, #30
   15a54:	d501      	bpl.n	15a5a <lv_theme_material_init+0x1632>
   15a56:	f000 feb3 	bl	167c0 <lv_theme_material_init+0x2398>
   15a5a:	2310      	movs	r3, #16
   15a5c:	2122      	movs	r1, #34	; 0x22
   15a5e:	2212      	movs	r2, #18
   15a60:	0149      	lsls	r1, r1, #5
   15a62:	02db      	lsls	r3, r3, #11
   15a64:	430a      	orrs	r2, r1
   15a66:	431a      	orrs	r2, r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15a68:	2139      	movs	r1, #57	; 0x39
   15a6a:	4bc3      	ldr	r3, [pc, #780]	; (15d78 <lv_theme_material_init+0x1950>)
   15a6c:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
   15a6e:	4cbd      	ldr	r4, [pc, #756]	; (15d64 <lv_theme_material_init+0x193c>)
   15a70:	6820      	ldr	r0, [r4, #0]
   15a72:	30a0      	adds	r0, #160	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   15a74:	2201      	movs	r2, #1
   15a76:	2130      	movs	r1, #48	; 0x30
   15a78:	4db9      	ldr	r5, [pc, #740]	; (15d60 <lv_theme_material_init+0x1938>)
   15a7a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
   15a7c:	6820      	ldr	r0, [r4, #0]
   15a7e:	30a0      	adds	r0, #160	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   15a80:	2203      	movs	r2, #3
   15a82:	2131      	movs	r1, #49	; 0x31
   15a84:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   15a86:	6824      	ldr	r4, [r4, #0]
   15a88:	34a0      	adds	r4, #160	; 0xa0
   15a8a:	2000      	movs	r0, #0
   15a8c:	4bb6      	ldr	r3, [pc, #728]	; (15d68 <lv_theme_material_init+0x1940>)
   15a8e:	4798      	blx	r3
   15a90:	2801      	cmp	r0, #1
   15a92:	d801      	bhi.n	15a98 <lv_theme_material_init+0x1670>
   15a94:	f000 fe99 	bl	167ca <lv_theme_material_init+0x23a2>
   15a98:	2000      	movs	r0, #0
   15a9a:	4bb4      	ldr	r3, [pc, #720]	; (15d6c <lv_theme_material_init+0x1944>)
   15a9c:	4798      	blx	r3
   15a9e:	0103      	lsls	r3, r0, #4
   15aa0:	1a1b      	subs	r3, r3, r0
   15aa2:	005b      	lsls	r3, r3, #1
   15aa4:	3350      	adds	r3, #80	; 0x50
   15aa6:	2140      	movs	r1, #64	; 0x40
   15aa8:	31ff      	adds	r1, #255	; 0xff
   15aaa:	2201      	movs	r2, #1
   15aac:	428b      	cmp	r3, r1
   15aae:	d901      	bls.n	15ab4 <lv_theme_material_init+0x168c>
   15ab0:	f000 fea4 	bl	167fc <lv_theme_material_init+0x23d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15ab4:	2112      	movs	r1, #18
   15ab6:	0020      	movs	r0, r4
   15ab8:	4ba9      	ldr	r3, [pc, #676]	; (15d60 <lv_theme_material_init+0x1938>)
   15aba:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   15abc:	4ba9      	ldr	r3, [pc, #676]	; (15d64 <lv_theme_material_init+0x193c>)
   15abe:	681c      	ldr	r4, [r3, #0]
   15ac0:	34a0      	adds	r4, #160	; 0xa0
   15ac2:	2000      	movs	r0, #0
   15ac4:	4ba8      	ldr	r3, [pc, #672]	; (15d68 <lv_theme_material_init+0x1940>)
   15ac6:	4798      	blx	r3
   15ac8:	2801      	cmp	r0, #1
   15aca:	d801      	bhi.n	15ad0 <lv_theme_material_init+0x16a8>
   15acc:	f000 fea3 	bl	16816 <lv_theme_material_init+0x23ee>
   15ad0:	2000      	movs	r0, #0
   15ad2:	4ba6      	ldr	r3, [pc, #664]	; (15d6c <lv_theme_material_init+0x1944>)
   15ad4:	4798      	blx	r3
   15ad6:	0103      	lsls	r3, r0, #4
   15ad8:	1a1b      	subs	r3, r3, r0
   15ada:	005b      	lsls	r3, r3, #1
   15adc:	3350      	adds	r3, #80	; 0x50
   15ade:	2140      	movs	r1, #64	; 0x40
   15ae0:	31ff      	adds	r1, #255	; 0xff
   15ae2:	2201      	movs	r2, #1
   15ae4:	428b      	cmp	r3, r1
   15ae6:	d901      	bls.n	15aec <lv_theme_material_init+0x16c4>
   15ae8:	f000 feae 	bl	16848 <lv_theme_material_init+0x2420>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15aec:	2113      	movs	r1, #19
   15aee:	0020      	movs	r0, r4
   15af0:	4b9b      	ldr	r3, [pc, #620]	; (15d60 <lv_theme_material_init+0x1938>)
   15af2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   15af4:	4b9b      	ldr	r3, [pc, #620]	; (15d64 <lv_theme_material_init+0x193c>)
   15af6:	681c      	ldr	r4, [r3, #0]
   15af8:	34a0      	adds	r4, #160	; 0xa0
   15afa:	2000      	movs	r0, #0
   15afc:	4b9a      	ldr	r3, [pc, #616]	; (15d68 <lv_theme_material_init+0x1940>)
   15afe:	4798      	blx	r3
   15b00:	2801      	cmp	r0, #1
   15b02:	d801      	bhi.n	15b08 <lv_theme_material_init+0x16e0>
   15b04:	f000 fead 	bl	16862 <lv_theme_material_init+0x243a>
   15b08:	2000      	movs	r0, #0
   15b0a:	4b98      	ldr	r3, [pc, #608]	; (15d6c <lv_theme_material_init+0x1944>)
   15b0c:	4798      	blx	r3
   15b0e:	0103      	lsls	r3, r0, #4
   15b10:	1a1b      	subs	r3, r3, r0
   15b12:	005b      	lsls	r3, r3, #1
   15b14:	3350      	adds	r3, #80	; 0x50
   15b16:	2140      	movs	r1, #64	; 0x40
   15b18:	31ff      	adds	r1, #255	; 0xff
   15b1a:	2201      	movs	r2, #1
   15b1c:	428b      	cmp	r3, r1
   15b1e:	d901      	bls.n	15b24 <lv_theme_material_init+0x16fc>
   15b20:	f000 feb8 	bl	16894 <lv_theme_material_init+0x246c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15b24:	2110      	movs	r1, #16
   15b26:	0020      	movs	r0, r4
   15b28:	4b8d      	ldr	r3, [pc, #564]	; (15d60 <lv_theme_material_init+0x1938>)
   15b2a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   15b2c:	4b8d      	ldr	r3, [pc, #564]	; (15d64 <lv_theme_material_init+0x193c>)
   15b2e:	681c      	ldr	r4, [r3, #0]
   15b30:	34a0      	adds	r4, #160	; 0xa0
   15b32:	2000      	movs	r0, #0
   15b34:	4b8c      	ldr	r3, [pc, #560]	; (15d68 <lv_theme_material_init+0x1940>)
   15b36:	4798      	blx	r3
   15b38:	2801      	cmp	r0, #1
   15b3a:	d801      	bhi.n	15b40 <lv_theme_material_init+0x1718>
   15b3c:	f000 feb7 	bl	168ae <lv_theme_material_init+0x2486>
   15b40:	2000      	movs	r0, #0
   15b42:	4b8a      	ldr	r3, [pc, #552]	; (15d6c <lv_theme_material_init+0x1944>)
   15b44:	4798      	blx	r3
   15b46:	0103      	lsls	r3, r0, #4
   15b48:	1a1b      	subs	r3, r3, r0
   15b4a:	005b      	lsls	r3, r3, #1
   15b4c:	3350      	adds	r3, #80	; 0x50
   15b4e:	2140      	movs	r1, #64	; 0x40
   15b50:	31ff      	adds	r1, #255	; 0xff
   15b52:	2201      	movs	r2, #1
   15b54:	428b      	cmp	r3, r1
   15b56:	d901      	bls.n	15b5c <lv_theme_material_init+0x1734>
   15b58:	f000 fec2 	bl	168e0 <lv_theme_material_init+0x24b8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15b5c:	2111      	movs	r1, #17
   15b5e:	0020      	movs	r0, r4
   15b60:	4b7f      	ldr	r3, [pc, #508]	; (15d60 <lv_theme_material_init+0x1938>)
   15b62:	4798      	blx	r3
    theme.apply_xcb = theme_apply;
   15b64:	4c83      	ldr	r4, [pc, #524]	; (15d74 <lv_theme_material_init+0x194c>)
   15b66:	4b85      	ldr	r3, [pc, #532]	; (15d7c <lv_theme_material_init+0x1954>)
   15b68:	6023      	str	r3, [r4, #0]
    inited = true;
   15b6a:	2201      	movs	r2, #1
   15b6c:	4b84      	ldr	r3, [pc, #528]	; (15d80 <lv_theme_material_init+0x1958>)
   15b6e:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
   15b70:	2000      	movs	r0, #0
   15b72:	4b84      	ldr	r3, [pc, #528]	; (15d84 <lv_theme_material_init+0x195c>)
   15b74:	4798      	blx	r3
}
   15b76:	0020      	movs	r0, r4
   15b78:	bc04      	pop	{r2}
   15b7a:	4690      	mov	r8, r2
   15b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   15b7e:	20bc      	movs	r0, #188	; 0xbc
   15b80:	4b81      	ldr	r3, [pc, #516]	; (15d88 <lv_theme_material_init+0x1960>)
   15b82:	4798      	blx	r3
   15b84:	4b81      	ldr	r3, [pc, #516]	; (15d8c <lv_theme_material_init+0x1964>)
   15b86:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
   15b88:	4b76      	ldr	r3, [pc, #472]	; (15d64 <lv_theme_material_init+0x193c>)
   15b8a:	6018      	str	r0, [r3, #0]
   15b8c:	f7fe fc59 	bl	14442 <lv_theme_material_init+0x1a>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   15b90:	2315      	movs	r3, #21
   15b92:	212a      	movs	r1, #42	; 0x2a
   15b94:	2215      	movs	r2, #21
   15b96:	f7fe fc7f 	bl	14498 <lv_theme_material_init+0x70>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   15b9a:	2000      	movs	r0, #0
   15b9c:	4b73      	ldr	r3, [pc, #460]	; (15d6c <lv_theme_material_init+0x1944>)
   15b9e:	4798      	blx	r3
   15ba0:	3050      	adds	r0, #80	; 0x50
   15ba2:	21a0      	movs	r1, #160	; 0xa0
   15ba4:	4b7a      	ldr	r3, [pc, #488]	; (15d90 <lv_theme_material_init+0x1968>)
   15ba6:	4798      	blx	r3
   15ba8:	b202      	sxth	r2, r0
   15baa:	f7fe fc8e 	bl	144ca <lv_theme_material_init+0xa2>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15bae:	2000      	movs	r0, #0
   15bb0:	4b6e      	ldr	r3, [pc, #440]	; (15d6c <lv_theme_material_init+0x1944>)
   15bb2:	4798      	blx	r3
   15bb4:	0003      	movs	r3, r0
   15bb6:	0080      	lsls	r0, r0, #2
   15bb8:	18c0      	adds	r0, r0, r3
   15bba:	0040      	lsls	r0, r0, #1
   15bbc:	3050      	adds	r0, #80	; 0x50
   15bbe:	21a0      	movs	r1, #160	; 0xa0
   15bc0:	4b73      	ldr	r3, [pc, #460]	; (15d90 <lv_theme_material_init+0x1968>)
   15bc2:	4798      	blx	r3
   15bc4:	b202      	sxth	r2, r0
   15bc6:	f7fe fc95 	bl	144f4 <lv_theme_material_init+0xcc>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   15bca:	2000      	movs	r0, #0
   15bcc:	4b67      	ldr	r3, [pc, #412]	; (15d6c <lv_theme_material_init+0x1944>)
   15bce:	4798      	blx	r3
   15bd0:	0003      	movs	r3, r0
   15bd2:	0080      	lsls	r0, r0, #2
   15bd4:	18c0      	adds	r0, r0, r3
   15bd6:	0040      	lsls	r0, r0, #1
   15bd8:	3050      	adds	r0, #80	; 0x50
   15bda:	21a0      	movs	r1, #160	; 0xa0
   15bdc:	4b6c      	ldr	r3, [pc, #432]	; (15d90 <lv_theme_material_init+0x1968>)
   15bde:	4798      	blx	r3
   15be0:	b202      	sxth	r2, r0
   15be2:	f7fe fc9c 	bl	1451e <lv_theme_material_init+0xf6>
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   15be6:	231a      	movs	r3, #26
   15be8:	2137      	movs	r1, #55	; 0x37
   15bea:	221c      	movs	r2, #28
   15bec:	f7fe fca7 	bl	1453e <lv_theme_material_init+0x116>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   15bf0:	2000      	movs	r0, #0
   15bf2:	4b5e      	ldr	r3, [pc, #376]	; (15d6c <lv_theme_material_init+0x1944>)
   15bf4:	4798      	blx	r3
   15bf6:	0003      	movs	r3, r0
   15bf8:	0040      	lsls	r0, r0, #1
   15bfa:	18c0      	adds	r0, r0, r3
   15bfc:	3050      	adds	r0, #80	; 0x50
   15bfe:	21a0      	movs	r1, #160	; 0xa0
   15c00:	4b63      	ldr	r3, [pc, #396]	; (15d90 <lv_theme_material_init+0x1968>)
   15c02:	4798      	blx	r3
   15c04:	b202      	sxth	r2, r0
   15c06:	f7fe fcb5 	bl	14574 <lv_theme_material_init+0x14c>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   15c0a:	2000      	movs	r0, #0
   15c0c:	4b57      	ldr	r3, [pc, #348]	; (15d6c <lv_theme_material_init+0x1944>)
   15c0e:	4798      	blx	r3
   15c10:	3014      	adds	r0, #20
   15c12:	0080      	lsls	r0, r0, #2
   15c14:	21a0      	movs	r1, #160	; 0xa0
   15c16:	4b5e      	ldr	r3, [pc, #376]	; (15d90 <lv_theme_material_init+0x1968>)
   15c18:	4798      	blx	r3
   15c1a:	b202      	sxth	r2, r0
   15c1c:	f7fe fcbd 	bl	1459a <lv_theme_material_init+0x172>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   15c20:	2000      	movs	r0, #0
   15c22:	4b52      	ldr	r3, [pc, #328]	; (15d6c <lv_theme_material_init+0x1944>)
   15c24:	4798      	blx	r3
   15c26:	3028      	adds	r0, #40	; 0x28
   15c28:	0040      	lsls	r0, r0, #1
   15c2a:	21a0      	movs	r1, #160	; 0xa0
   15c2c:	4b58      	ldr	r3, [pc, #352]	; (15d90 <lv_theme_material_init+0x1968>)
   15c2e:	4798      	blx	r3
   15c30:	b202      	sxth	r2, r0
   15c32:	f7fe fcc5 	bl	145c0 <lv_theme_material_init+0x198>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   15c36:	2000      	movs	r0, #0
   15c38:	4b4c      	ldr	r3, [pc, #304]	; (15d6c <lv_theme_material_init+0x1944>)
   15c3a:	4798      	blx	r3
   15c3c:	3050      	adds	r0, #80	; 0x50
   15c3e:	21a0      	movs	r1, #160	; 0xa0
   15c40:	4b53      	ldr	r3, [pc, #332]	; (15d90 <lv_theme_material_init+0x1968>)
   15c42:	4798      	blx	r3
   15c44:	b202      	sxth	r2, r0
   15c46:	f7fe fccd 	bl	145e4 <lv_theme_material_init+0x1bc>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15c4a:	2000      	movs	r0, #0
   15c4c:	4b47      	ldr	r3, [pc, #284]	; (15d6c <lv_theme_material_init+0x1944>)
   15c4e:	4798      	blx	r3
   15c50:	0103      	lsls	r3, r0, #4
   15c52:	1a18      	subs	r0, r3, r0
   15c54:	3050      	adds	r0, #80	; 0x50
   15c56:	2340      	movs	r3, #64	; 0x40
   15c58:	33ff      	adds	r3, #255	; 0xff
   15c5a:	2201      	movs	r2, #1
   15c5c:	4298      	cmp	r0, r3
   15c5e:	d801      	bhi.n	15c64 <lv_theme_material_init+0x183c>
   15c60:	f7fe fce0 	bl	14624 <lv_theme_material_init+0x1fc>
   15c64:	2000      	movs	r0, #0
   15c66:	4b41      	ldr	r3, [pc, #260]	; (15d6c <lv_theme_material_init+0x1944>)
   15c68:	4798      	blx	r3
   15c6a:	0103      	lsls	r3, r0, #4
   15c6c:	1a18      	subs	r0, r3, r0
   15c6e:	3050      	adds	r0, #80	; 0x50
   15c70:	21a0      	movs	r1, #160	; 0xa0
   15c72:	4b47      	ldr	r3, [pc, #284]	; (15d90 <lv_theme_material_init+0x1968>)
   15c74:	4798      	blx	r3
   15c76:	b202      	sxth	r2, r0
   15c78:	f7fe fcd4 	bl	14624 <lv_theme_material_init+0x1fc>
   15c7c:	2000      	movs	r0, #0
   15c7e:	4b3b      	ldr	r3, [pc, #236]	; (15d6c <lv_theme_material_init+0x1944>)
   15c80:	4798      	blx	r3
   15c82:	0103      	lsls	r3, r0, #4
   15c84:	1a18      	subs	r0, r3, r0
   15c86:	0040      	lsls	r0, r0, #1
   15c88:	3050      	adds	r0, #80	; 0x50
   15c8a:	21a0      	movs	r1, #160	; 0xa0
   15c8c:	4b40      	ldr	r3, [pc, #256]	; (15d90 <lv_theme_material_init+0x1968>)
   15c8e:	4798      	blx	r3
   15c90:	b202      	sxth	r2, r0
   15c92:	f7fe fcc7 	bl	14624 <lv_theme_material_init+0x1fc>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15c96:	2000      	movs	r0, #0
   15c98:	4b34      	ldr	r3, [pc, #208]	; (15d6c <lv_theme_material_init+0x1944>)
   15c9a:	4798      	blx	r3
   15c9c:	0103      	lsls	r3, r0, #4
   15c9e:	1a18      	subs	r0, r3, r0
   15ca0:	3050      	adds	r0, #80	; 0x50
   15ca2:	2340      	movs	r3, #64	; 0x40
   15ca4:	33ff      	adds	r3, #255	; 0xff
   15ca6:	2201      	movs	r2, #1
   15ca8:	4298      	cmp	r0, r3
   15caa:	d801      	bhi.n	15cb0 <lv_theme_material_init+0x1888>
   15cac:	f7fe fcd6 	bl	1465c <lv_theme_material_init+0x234>
   15cb0:	2000      	movs	r0, #0
   15cb2:	4b2e      	ldr	r3, [pc, #184]	; (15d6c <lv_theme_material_init+0x1944>)
   15cb4:	4798      	blx	r3
   15cb6:	0103      	lsls	r3, r0, #4
   15cb8:	1a18      	subs	r0, r3, r0
   15cba:	3050      	adds	r0, #80	; 0x50
   15cbc:	21a0      	movs	r1, #160	; 0xa0
   15cbe:	4b34      	ldr	r3, [pc, #208]	; (15d90 <lv_theme_material_init+0x1968>)
   15cc0:	4798      	blx	r3
   15cc2:	b202      	sxth	r2, r0
   15cc4:	f7fe fcca 	bl	1465c <lv_theme_material_init+0x234>
   15cc8:	2000      	movs	r0, #0
   15cca:	4b28      	ldr	r3, [pc, #160]	; (15d6c <lv_theme_material_init+0x1944>)
   15ccc:	4798      	blx	r3
   15cce:	0103      	lsls	r3, r0, #4
   15cd0:	1a18      	subs	r0, r3, r0
   15cd2:	0040      	lsls	r0, r0, #1
   15cd4:	3050      	adds	r0, #80	; 0x50
   15cd6:	21a0      	movs	r1, #160	; 0xa0
   15cd8:	4b2d      	ldr	r3, [pc, #180]	; (15d90 <lv_theme_material_init+0x1968>)
   15cda:	4798      	blx	r3
   15cdc:	b202      	sxth	r2, r0
   15cde:	f7fe fcbd 	bl	1465c <lv_theme_material_init+0x234>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15ce2:	2000      	movs	r0, #0
   15ce4:	4b21      	ldr	r3, [pc, #132]	; (15d6c <lv_theme_material_init+0x1944>)
   15ce6:	4798      	blx	r3
   15ce8:	0103      	lsls	r3, r0, #4
   15cea:	1a18      	subs	r0, r3, r0
   15cec:	3050      	adds	r0, #80	; 0x50
   15cee:	2340      	movs	r3, #64	; 0x40
   15cf0:	33ff      	adds	r3, #255	; 0xff
   15cf2:	2201      	movs	r2, #1
   15cf4:	4298      	cmp	r0, r3
   15cf6:	d801      	bhi.n	15cfc <lv_theme_material_init+0x18d4>
   15cf8:	f7fe fccc 	bl	14694 <lv_theme_material_init+0x26c>
   15cfc:	2000      	movs	r0, #0
   15cfe:	4b1b      	ldr	r3, [pc, #108]	; (15d6c <lv_theme_material_init+0x1944>)
   15d00:	4798      	blx	r3
   15d02:	0103      	lsls	r3, r0, #4
   15d04:	1a18      	subs	r0, r3, r0
   15d06:	3050      	adds	r0, #80	; 0x50
   15d08:	21a0      	movs	r1, #160	; 0xa0
   15d0a:	4b21      	ldr	r3, [pc, #132]	; (15d90 <lv_theme_material_init+0x1968>)
   15d0c:	4798      	blx	r3
   15d0e:	b202      	sxth	r2, r0
   15d10:	f7fe fcc0 	bl	14694 <lv_theme_material_init+0x26c>
   15d14:	2000      	movs	r0, #0
   15d16:	4b15      	ldr	r3, [pc, #84]	; (15d6c <lv_theme_material_init+0x1944>)
   15d18:	4798      	blx	r3
   15d1a:	0103      	lsls	r3, r0, #4
   15d1c:	1a18      	subs	r0, r3, r0
   15d1e:	0040      	lsls	r0, r0, #1
   15d20:	3050      	adds	r0, #80	; 0x50
   15d22:	21a0      	movs	r1, #160	; 0xa0
   15d24:	4b1a      	ldr	r3, [pc, #104]	; (15d90 <lv_theme_material_init+0x1968>)
   15d26:	4798      	blx	r3
   15d28:	b202      	sxth	r2, r0
   15d2a:	f7fe fcb3 	bl	14694 <lv_theme_material_init+0x26c>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   15d2e:	2000      	movs	r0, #0
   15d30:	4b0e      	ldr	r3, [pc, #56]	; (15d6c <lv_theme_material_init+0x1944>)
   15d32:	4798      	blx	r3
   15d34:	0103      	lsls	r3, r0, #4
   15d36:	1a18      	subs	r0, r3, r0
   15d38:	3050      	adds	r0, #80	; 0x50
   15d3a:	2340      	movs	r3, #64	; 0x40
   15d3c:	33ff      	adds	r3, #255	; 0xff
   15d3e:	2201      	movs	r2, #1
   15d40:	4298      	cmp	r0, r3
   15d42:	d801      	bhi.n	15d48 <lv_theme_material_init+0x1920>
   15d44:	f7fe fcc2 	bl	146cc <lv_theme_material_init+0x2a4>
   15d48:	2000      	movs	r0, #0
   15d4a:	4b08      	ldr	r3, [pc, #32]	; (15d6c <lv_theme_material_init+0x1944>)
   15d4c:	4798      	blx	r3
   15d4e:	0103      	lsls	r3, r0, #4
   15d50:	1a18      	subs	r0, r3, r0
   15d52:	3050      	adds	r0, #80	; 0x50
   15d54:	21a0      	movs	r1, #160	; 0xa0
   15d56:	4b0e      	ldr	r3, [pc, #56]	; (15d90 <lv_theme_material_init+0x1968>)
   15d58:	4798      	blx	r3
   15d5a:	b202      	sxth	r2, r0
   15d5c:	f7fe fcb6 	bl	146cc <lv_theme_material_init+0x2a4>
   15d60:	00004c8d 	.word	0x00004c8d
   15d64:	20004c38 	.word	0x20004c38
   15d68:	0000f619 	.word	0x0000f619
   15d6c:	0000f5fd 	.word	0x0000f5fd
   15d70:	0001242d 	.word	0x0001242d
   15d74:	20004c3c 	.word	0x20004c3c
   15d78:	00004ded 	.word	0x00004ded
   15d7c:	00011c11 	.word	0x00011c11
   15d80:	20004c34 	.word	0x20004c34
   15d84:	000026cd 	.word	0x000026cd
   15d88:	00010a09 	.word	0x00010a09
   15d8c:	20004d74 	.word	0x20004d74
   15d90:	00017961 	.word	0x00017961
   15d94:	2000      	movs	r0, #0
   15d96:	4bfc      	ldr	r3, [pc, #1008]	; (16188 <lv_theme_material_init+0x1d60>)
   15d98:	4798      	blx	r3
   15d9a:	0103      	lsls	r3, r0, #4
   15d9c:	1a18      	subs	r0, r3, r0
   15d9e:	0040      	lsls	r0, r0, #1
   15da0:	3050      	adds	r0, #80	; 0x50
   15da2:	21a0      	movs	r1, #160	; 0xa0
   15da4:	4bf9      	ldr	r3, [pc, #996]	; (1618c <lv_theme_material_init+0x1d64>)
   15da6:	4798      	blx	r3
   15da8:	b202      	sxth	r2, r0
   15daa:	f7fe fc8f 	bl	146cc <lv_theme_material_init+0x2a4>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
   15dae:	2222      	movs	r2, #34	; 0x22
   15db0:	2311      	movs	r3, #17
   15db2:	f7fe fc9a 	bl	146ea <lv_theme_material_init+0x2c2>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   15db6:	2306      	movs	r3, #6
   15db8:	2110      	movs	r1, #16
   15dba:	2209      	movs	r2, #9
   15dbc:	f7fe fcac 	bl	14718 <lv_theme_material_init+0x2f0>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   15dc0:	2000      	movs	r0, #0
   15dc2:	4bf1      	ldr	r3, [pc, #964]	; (16188 <lv_theme_material_init+0x1d60>)
   15dc4:	4798      	blx	r3
   15dc6:	0103      	lsls	r3, r0, #4
   15dc8:	1a18      	subs	r0, r3, r0
   15dca:	3050      	adds	r0, #80	; 0x50
   15dcc:	2340      	movs	r3, #64	; 0x40
   15dce:	33ff      	adds	r3, #255	; 0xff
   15dd0:	2201      	movs	r2, #1
   15dd2:	4298      	cmp	r0, r3
   15dd4:	d801      	bhi.n	15dda <lv_theme_material_init+0x19b2>
   15dd6:	f7fe fcbe 	bl	14756 <lv_theme_material_init+0x32e>
   15dda:	2000      	movs	r0, #0
   15ddc:	4bea      	ldr	r3, [pc, #936]	; (16188 <lv_theme_material_init+0x1d60>)
   15dde:	4798      	blx	r3
   15de0:	0103      	lsls	r3, r0, #4
   15de2:	1a18      	subs	r0, r3, r0
   15de4:	3050      	adds	r0, #80	; 0x50
   15de6:	21a0      	movs	r1, #160	; 0xa0
   15de8:	4be8      	ldr	r3, [pc, #928]	; (1618c <lv_theme_material_init+0x1d64>)
   15dea:	4798      	blx	r3
   15dec:	b202      	sxth	r2, r0
   15dee:	f7fe fcb2 	bl	14756 <lv_theme_material_init+0x32e>
   15df2:	2000      	movs	r0, #0
   15df4:	4be4      	ldr	r3, [pc, #912]	; (16188 <lv_theme_material_init+0x1d60>)
   15df6:	4798      	blx	r3
   15df8:	0103      	lsls	r3, r0, #4
   15dfa:	1a18      	subs	r0, r3, r0
   15dfc:	0040      	lsls	r0, r0, #1
   15dfe:	3050      	adds	r0, #80	; 0x50
   15e00:	21a0      	movs	r1, #160	; 0xa0
   15e02:	4be2      	ldr	r3, [pc, #904]	; (1618c <lv_theme_material_init+0x1d64>)
   15e04:	4798      	blx	r3
   15e06:	b202      	sxth	r2, r0
   15e08:	f7fe fca5 	bl	14756 <lv_theme_material_init+0x32e>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   15e0c:	2000      	movs	r0, #0
   15e0e:	4bde      	ldr	r3, [pc, #888]	; (16188 <lv_theme_material_init+0x1d60>)
   15e10:	4798      	blx	r3
   15e12:	0103      	lsls	r3, r0, #4
   15e14:	1a18      	subs	r0, r3, r0
   15e16:	3050      	adds	r0, #80	; 0x50
   15e18:	2340      	movs	r3, #64	; 0x40
   15e1a:	33ff      	adds	r3, #255	; 0xff
   15e1c:	2201      	movs	r2, #1
   15e1e:	4298      	cmp	r0, r3
   15e20:	d801      	bhi.n	15e26 <lv_theme_material_init+0x19fe>
   15e22:	f7fe fcb4 	bl	1478e <lv_theme_material_init+0x366>
   15e26:	2000      	movs	r0, #0
   15e28:	4bd7      	ldr	r3, [pc, #860]	; (16188 <lv_theme_material_init+0x1d60>)
   15e2a:	4798      	blx	r3
   15e2c:	0103      	lsls	r3, r0, #4
   15e2e:	1a18      	subs	r0, r3, r0
   15e30:	3050      	adds	r0, #80	; 0x50
   15e32:	21a0      	movs	r1, #160	; 0xa0
   15e34:	4bd5      	ldr	r3, [pc, #852]	; (1618c <lv_theme_material_init+0x1d64>)
   15e36:	4798      	blx	r3
   15e38:	b202      	sxth	r2, r0
   15e3a:	f7fe fca8 	bl	1478e <lv_theme_material_init+0x366>
   15e3e:	2000      	movs	r0, #0
   15e40:	4bd1      	ldr	r3, [pc, #836]	; (16188 <lv_theme_material_init+0x1d60>)
   15e42:	4798      	blx	r3
   15e44:	0103      	lsls	r3, r0, #4
   15e46:	1a18      	subs	r0, r3, r0
   15e48:	0040      	lsls	r0, r0, #1
   15e4a:	3050      	adds	r0, #80	; 0x50
   15e4c:	21a0      	movs	r1, #160	; 0xa0
   15e4e:	4bcf      	ldr	r3, [pc, #828]	; (1618c <lv_theme_material_init+0x1d64>)
   15e50:	4798      	blx	r3
   15e52:	b202      	sxth	r2, r0
   15e54:	f7fe fc9b 	bl	1478e <lv_theme_material_init+0x366>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   15e58:	2000      	movs	r0, #0
   15e5a:	4bcb      	ldr	r3, [pc, #812]	; (16188 <lv_theme_material_init+0x1d60>)
   15e5c:	4798      	blx	r3
   15e5e:	0103      	lsls	r3, r0, #4
   15e60:	1a18      	subs	r0, r3, r0
   15e62:	3050      	adds	r0, #80	; 0x50
   15e64:	2340      	movs	r3, #64	; 0x40
   15e66:	33ff      	adds	r3, #255	; 0xff
   15e68:	2201      	movs	r2, #1
   15e6a:	4298      	cmp	r0, r3
   15e6c:	d801      	bhi.n	15e72 <lv_theme_material_init+0x1a4a>
   15e6e:	f7fe fcaa 	bl	147c6 <lv_theme_material_init+0x39e>
   15e72:	2000      	movs	r0, #0
   15e74:	4bc4      	ldr	r3, [pc, #784]	; (16188 <lv_theme_material_init+0x1d60>)
   15e76:	4798      	blx	r3
   15e78:	0103      	lsls	r3, r0, #4
   15e7a:	1a18      	subs	r0, r3, r0
   15e7c:	3050      	adds	r0, #80	; 0x50
   15e7e:	21a0      	movs	r1, #160	; 0xa0
   15e80:	4bc2      	ldr	r3, [pc, #776]	; (1618c <lv_theme_material_init+0x1d64>)
   15e82:	4798      	blx	r3
   15e84:	b202      	sxth	r2, r0
   15e86:	f7fe fc9e 	bl	147c6 <lv_theme_material_init+0x39e>
   15e8a:	2000      	movs	r0, #0
   15e8c:	4bbe      	ldr	r3, [pc, #760]	; (16188 <lv_theme_material_init+0x1d60>)
   15e8e:	4798      	blx	r3
   15e90:	0103      	lsls	r3, r0, #4
   15e92:	1a18      	subs	r0, r3, r0
   15e94:	0040      	lsls	r0, r0, #1
   15e96:	3050      	adds	r0, #80	; 0x50
   15e98:	21a0      	movs	r1, #160	; 0xa0
   15e9a:	4bbc      	ldr	r3, [pc, #752]	; (1618c <lv_theme_material_init+0x1d64>)
   15e9c:	4798      	blx	r3
   15e9e:	b202      	sxth	r2, r0
   15ea0:	f7fe fc91 	bl	147c6 <lv_theme_material_init+0x39e>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   15ea4:	2000      	movs	r0, #0
   15ea6:	4bb8      	ldr	r3, [pc, #736]	; (16188 <lv_theme_material_init+0x1d60>)
   15ea8:	4798      	blx	r3
   15eaa:	3014      	adds	r0, #20
   15eac:	0080      	lsls	r0, r0, #2
   15eae:	21a0      	movs	r1, #160	; 0xa0
   15eb0:	4bb6      	ldr	r3, [pc, #728]	; (1618c <lv_theme_material_init+0x1d64>)
   15eb2:	4798      	blx	r3
   15eb4:	b202      	sxth	r2, r0
   15eb6:	f7fe fc9d 	bl	147f4 <lv_theme_material_init+0x3cc>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   15eba:	2306      	movs	r3, #6
   15ebc:	2110      	movs	r1, #16
   15ebe:	2209      	movs	r2, #9
   15ec0:	f7fe fca8 	bl	14814 <lv_theme_material_init+0x3ec>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
   15ec4:	2219      	movs	r2, #25
   15ec6:	230c      	movs	r3, #12
   15ec8:	f7fe fd01 	bl	148ce <lv_theme_material_init+0x4a6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   15ecc:	2000      	movs	r0, #0
   15ece:	4bae      	ldr	r3, [pc, #696]	; (16188 <lv_theme_material_init+0x1d60>)
   15ed0:	4798      	blx	r3
   15ed2:	0003      	movs	r3, r0
   15ed4:	0040      	lsls	r0, r0, #1
   15ed6:	18c0      	adds	r0, r0, r3
   15ed8:	3050      	adds	r0, #80	; 0x50
   15eda:	21a0      	movs	r1, #160	; 0xa0
   15edc:	4bab      	ldr	r3, [pc, #684]	; (1618c <lv_theme_material_init+0x1d64>)
   15ede:	4798      	blx	r3
   15ee0:	b202      	sxth	r2, r0
   15ee2:	f7fe fd25 	bl	14930 <lv_theme_material_init+0x508>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   15ee6:	2000      	movs	r0, #0
   15ee8:	4ba7      	ldr	r3, [pc, #668]	; (16188 <lv_theme_material_init+0x1d60>)
   15eea:	4798      	blx	r3
   15eec:	0103      	lsls	r3, r0, #4
   15eee:	1a18      	subs	r0, r3, r0
   15ef0:	3050      	adds	r0, #80	; 0x50
   15ef2:	2340      	movs	r3, #64	; 0x40
   15ef4:	33ff      	adds	r3, #255	; 0xff
   15ef6:	2201      	movs	r2, #1
   15ef8:	4298      	cmp	r0, r3
   15efa:	d801      	bhi.n	15f00 <lv_theme_material_init+0x1ad8>
   15efc:	f7fe fd34 	bl	14968 <lv_theme_material_init+0x540>
   15f00:	2000      	movs	r0, #0
   15f02:	4ba1      	ldr	r3, [pc, #644]	; (16188 <lv_theme_material_init+0x1d60>)
   15f04:	4798      	blx	r3
   15f06:	0103      	lsls	r3, r0, #4
   15f08:	1a18      	subs	r0, r3, r0
   15f0a:	3050      	adds	r0, #80	; 0x50
   15f0c:	21a0      	movs	r1, #160	; 0xa0
   15f0e:	4b9f      	ldr	r3, [pc, #636]	; (1618c <lv_theme_material_init+0x1d64>)
   15f10:	4798      	blx	r3
   15f12:	b202      	sxth	r2, r0
   15f14:	f7fe fd28 	bl	14968 <lv_theme_material_init+0x540>
   15f18:	2000      	movs	r0, #0
   15f1a:	4b9b      	ldr	r3, [pc, #620]	; (16188 <lv_theme_material_init+0x1d60>)
   15f1c:	4798      	blx	r3
   15f1e:	0103      	lsls	r3, r0, #4
   15f20:	1a18      	subs	r0, r3, r0
   15f22:	0040      	lsls	r0, r0, #1
   15f24:	3050      	adds	r0, #80	; 0x50
   15f26:	21a0      	movs	r1, #160	; 0xa0
   15f28:	4b98      	ldr	r3, [pc, #608]	; (1618c <lv_theme_material_init+0x1d64>)
   15f2a:	4798      	blx	r3
   15f2c:	b202      	sxth	r2, r0
   15f2e:	f7fe fd1b 	bl	14968 <lv_theme_material_init+0x540>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   15f32:	2000      	movs	r0, #0
   15f34:	4b94      	ldr	r3, [pc, #592]	; (16188 <lv_theme_material_init+0x1d60>)
   15f36:	4798      	blx	r3
   15f38:	0103      	lsls	r3, r0, #4
   15f3a:	1a18      	subs	r0, r3, r0
   15f3c:	3050      	adds	r0, #80	; 0x50
   15f3e:	2340      	movs	r3, #64	; 0x40
   15f40:	33ff      	adds	r3, #255	; 0xff
   15f42:	2201      	movs	r2, #1
   15f44:	4298      	cmp	r0, r3
   15f46:	d801      	bhi.n	15f4c <lv_theme_material_init+0x1b24>
   15f48:	f7fe fd2a 	bl	149a0 <lv_theme_material_init+0x578>
   15f4c:	2000      	movs	r0, #0
   15f4e:	4b8e      	ldr	r3, [pc, #568]	; (16188 <lv_theme_material_init+0x1d60>)
   15f50:	4798      	blx	r3
   15f52:	0103      	lsls	r3, r0, #4
   15f54:	1a18      	subs	r0, r3, r0
   15f56:	3050      	adds	r0, #80	; 0x50
   15f58:	21a0      	movs	r1, #160	; 0xa0
   15f5a:	4b8c      	ldr	r3, [pc, #560]	; (1618c <lv_theme_material_init+0x1d64>)
   15f5c:	4798      	blx	r3
   15f5e:	b202      	sxth	r2, r0
   15f60:	f7fe fd1e 	bl	149a0 <lv_theme_material_init+0x578>
   15f64:	2000      	movs	r0, #0
   15f66:	4b88      	ldr	r3, [pc, #544]	; (16188 <lv_theme_material_init+0x1d60>)
   15f68:	4798      	blx	r3
   15f6a:	0103      	lsls	r3, r0, #4
   15f6c:	1a18      	subs	r0, r3, r0
   15f6e:	0040      	lsls	r0, r0, #1
   15f70:	3050      	adds	r0, #80	; 0x50
   15f72:	21a0      	movs	r1, #160	; 0xa0
   15f74:	4b85      	ldr	r3, [pc, #532]	; (1618c <lv_theme_material_init+0x1d64>)
   15f76:	4798      	blx	r3
   15f78:	b202      	sxth	r2, r0
   15f7a:	f7fe fd11 	bl	149a0 <lv_theme_material_init+0x578>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   15f7e:	2000      	movs	r0, #0
   15f80:	4b81      	ldr	r3, [pc, #516]	; (16188 <lv_theme_material_init+0x1d60>)
   15f82:	4798      	blx	r3
   15f84:	0103      	lsls	r3, r0, #4
   15f86:	1a18      	subs	r0, r3, r0
   15f88:	3050      	adds	r0, #80	; 0x50
   15f8a:	2340      	movs	r3, #64	; 0x40
   15f8c:	33ff      	adds	r3, #255	; 0xff
   15f8e:	2201      	movs	r2, #1
   15f90:	4298      	cmp	r0, r3
   15f92:	d801      	bhi.n	15f98 <lv_theme_material_init+0x1b70>
   15f94:	f7fe fd20 	bl	149d8 <lv_theme_material_init+0x5b0>
   15f98:	2000      	movs	r0, #0
   15f9a:	4b7b      	ldr	r3, [pc, #492]	; (16188 <lv_theme_material_init+0x1d60>)
   15f9c:	4798      	blx	r3
   15f9e:	0103      	lsls	r3, r0, #4
   15fa0:	1a18      	subs	r0, r3, r0
   15fa2:	3050      	adds	r0, #80	; 0x50
   15fa4:	21a0      	movs	r1, #160	; 0xa0
   15fa6:	4b79      	ldr	r3, [pc, #484]	; (1618c <lv_theme_material_init+0x1d64>)
   15fa8:	4798      	blx	r3
   15faa:	b202      	sxth	r2, r0
   15fac:	f7fe fd14 	bl	149d8 <lv_theme_material_init+0x5b0>
   15fb0:	2000      	movs	r0, #0
   15fb2:	4b75      	ldr	r3, [pc, #468]	; (16188 <lv_theme_material_init+0x1d60>)
   15fb4:	4798      	blx	r3
   15fb6:	0103      	lsls	r3, r0, #4
   15fb8:	1a18      	subs	r0, r3, r0
   15fba:	0040      	lsls	r0, r0, #1
   15fbc:	3050      	adds	r0, #80	; 0x50
   15fbe:	21a0      	movs	r1, #160	; 0xa0
   15fc0:	4b72      	ldr	r3, [pc, #456]	; (1618c <lv_theme_material_init+0x1d64>)
   15fc2:	4798      	blx	r3
   15fc4:	b202      	sxth	r2, r0
   15fc6:	f7fe fd07 	bl	149d8 <lv_theme_material_init+0x5b0>
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   15fca:	2000      	movs	r0, #0
   15fcc:	4b6e      	ldr	r3, [pc, #440]	; (16188 <lv_theme_material_init+0x1d60>)
   15fce:	4798      	blx	r3
   15fd0:	0103      	lsls	r3, r0, #4
   15fd2:	1a18      	subs	r0, r3, r0
   15fd4:	0040      	lsls	r0, r0, #1
   15fd6:	3050      	adds	r0, #80	; 0x50
   15fd8:	21a0      	movs	r1, #160	; 0xa0
   15fda:	4b6c      	ldr	r3, [pc, #432]	; (1618c <lv_theme_material_init+0x1d64>)
   15fdc:	4798      	blx	r3
   15fde:	b202      	sxth	r2, r0
   15fe0:	f7fe fd13 	bl	14a0a <lv_theme_material_init+0x5e2>
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
   15fe4:	231d      	movs	r3, #29
   15fe6:	213b      	movs	r1, #59	; 0x3b
   15fe8:	221e      	movs	r2, #30
   15fea:	f7fe fd24 	bl	14a36 <lv_theme_material_init+0x60e>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   15fee:	2000      	movs	r0, #0
   15ff0:	4b65      	ldr	r3, [pc, #404]	; (16188 <lv_theme_material_init+0x1d60>)
   15ff2:	4798      	blx	r3
   15ff4:	0003      	movs	r3, r0
   15ff6:	0080      	lsls	r0, r0, #2
   15ff8:	18c0      	adds	r0, r0, r3
   15ffa:	0080      	lsls	r0, r0, #2
   15ffc:	3050      	adds	r0, #80	; 0x50
   15ffe:	21a0      	movs	r1, #160	; 0xa0
   16000:	4b62      	ldr	r3, [pc, #392]	; (1618c <lv_theme_material_init+0x1d64>)
   16002:	4798      	blx	r3
   16004:	b202      	sxth	r2, r0
   16006:	f7fe fd2e 	bl	14a66 <lv_theme_material_init+0x63e>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   1600a:	2000      	movs	r0, #0
   1600c:	4b5e      	ldr	r3, [pc, #376]	; (16188 <lv_theme_material_init+0x1d60>)
   1600e:	4798      	blx	r3
   16010:	0003      	movs	r3, r0
   16012:	0040      	lsls	r0, r0, #1
   16014:	18c0      	adds	r0, r0, r3
   16016:	0080      	lsls	r0, r0, #2
   16018:	18c0      	adds	r0, r0, r3
   1601a:	3050      	adds	r0, #80	; 0x50
   1601c:	21a0      	movs	r1, #160	; 0xa0
   1601e:	4b5b      	ldr	r3, [pc, #364]	; (1618c <lv_theme_material_init+0x1d64>)
   16020:	4798      	blx	r3
   16022:	b202      	sxth	r2, r0
   16024:	f7fe fd67 	bl	14af6 <lv_theme_material_init+0x6ce>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16028:	2000      	movs	r0, #0
   1602a:	4b57      	ldr	r3, [pc, #348]	; (16188 <lv_theme_material_init+0x1d60>)
   1602c:	4798      	blx	r3
   1602e:	0003      	movs	r3, r0
   16030:	0040      	lsls	r0, r0, #1
   16032:	18c0      	adds	r0, r0, r3
   16034:	0080      	lsls	r0, r0, #2
   16036:	18c0      	adds	r0, r0, r3
   16038:	3050      	adds	r0, #80	; 0x50
   1603a:	21a0      	movs	r1, #160	; 0xa0
   1603c:	4b53      	ldr	r3, [pc, #332]	; (1618c <lv_theme_material_init+0x1d64>)
   1603e:	4798      	blx	r3
   16040:	b202      	sxth	r2, r0
   16042:	f7fe fd6f 	bl	14b24 <lv_theme_material_init+0x6fc>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16046:	2000      	movs	r0, #0
   16048:	4b4f      	ldr	r3, [pc, #316]	; (16188 <lv_theme_material_init+0x1d60>)
   1604a:	4798      	blx	r3
   1604c:	0003      	movs	r3, r0
   1604e:	0040      	lsls	r0, r0, #1
   16050:	18c0      	adds	r0, r0, r3
   16052:	0080      	lsls	r0, r0, #2
   16054:	18c0      	adds	r0, r0, r3
   16056:	3050      	adds	r0, #80	; 0x50
   16058:	21a0      	movs	r1, #160	; 0xa0
   1605a:	4b4c      	ldr	r3, [pc, #304]	; (1618c <lv_theme_material_init+0x1d64>)
   1605c:	4798      	blx	r3
   1605e:	b202      	sxth	r2, r0
   16060:	f7fe fd77 	bl	14b52 <lv_theme_material_init+0x72a>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   16064:	2000      	movs	r0, #0
   16066:	4b48      	ldr	r3, [pc, #288]	; (16188 <lv_theme_material_init+0x1d60>)
   16068:	4798      	blx	r3
   1606a:	0003      	movs	r3, r0
   1606c:	0040      	lsls	r0, r0, #1
   1606e:	18c0      	adds	r0, r0, r3
   16070:	0080      	lsls	r0, r0, #2
   16072:	18c0      	adds	r0, r0, r3
   16074:	3050      	adds	r0, #80	; 0x50
   16076:	21a0      	movs	r1, #160	; 0xa0
   16078:	4b44      	ldr	r3, [pc, #272]	; (1618c <lv_theme_material_init+0x1d64>)
   1607a:	4798      	blx	r3
   1607c:	b202      	sxth	r2, r0
   1607e:	f7fe fd7f 	bl	14b80 <lv_theme_material_init+0x758>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   16082:	2000      	movs	r0, #0
   16084:	4b40      	ldr	r3, [pc, #256]	; (16188 <lv_theme_material_init+0x1d60>)
   16086:	4798      	blx	r3
   16088:	3014      	adds	r0, #20
   1608a:	0080      	lsls	r0, r0, #2
   1608c:	21a0      	movs	r1, #160	; 0xa0
   1608e:	4b3f      	ldr	r3, [pc, #252]	; (1618c <lv_theme_material_init+0x1d64>)
   16090:	4798      	blx	r3
   16092:	b202      	sxth	r2, r0
   16094:	f7fe fd8b 	bl	14bae <lv_theme_material_init+0x786>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16098:	2000      	movs	r0, #0
   1609a:	4b3b      	ldr	r3, [pc, #236]	; (16188 <lv_theme_material_init+0x1d60>)
   1609c:	4798      	blx	r3
   1609e:	0003      	movs	r3, r0
   160a0:	0080      	lsls	r0, r0, #2
   160a2:	18c0      	adds	r0, r0, r3
   160a4:	0040      	lsls	r0, r0, #1
   160a6:	3050      	adds	r0, #80	; 0x50
   160a8:	21a0      	movs	r1, #160	; 0xa0
   160aa:	4b38      	ldr	r3, [pc, #224]	; (1618c <lv_theme_material_init+0x1d64>)
   160ac:	4798      	blx	r3
   160ae:	b202      	sxth	r2, r0
   160b0:	f7fe fd92 	bl	14bd8 <lv_theme_material_init+0x7b0>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   160b4:	2000      	movs	r0, #0
   160b6:	4b34      	ldr	r3, [pc, #208]	; (16188 <lv_theme_material_init+0x1d60>)
   160b8:	4798      	blx	r3
   160ba:	0003      	movs	r3, r0
   160bc:	0040      	lsls	r0, r0, #1
   160be:	18c0      	adds	r0, r0, r3
   160c0:	3050      	adds	r0, #80	; 0x50
   160c2:	21a0      	movs	r1, #160	; 0xa0
   160c4:	4b31      	ldr	r3, [pc, #196]	; (1618c <lv_theme_material_init+0x1d64>)
   160c6:	4798      	blx	r3
   160c8:	b202      	sxth	r2, r0
   160ca:	f7fe fdac 	bl	14c26 <lv_theme_material_init+0x7fe>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   160ce:	2000      	movs	r0, #0
   160d0:	4b2d      	ldr	r3, [pc, #180]	; (16188 <lv_theme_material_init+0x1d60>)
   160d2:	4798      	blx	r3
   160d4:	0003      	movs	r3, r0
   160d6:	0080      	lsls	r0, r0, #2
   160d8:	18c0      	adds	r0, r0, r3
   160da:	0040      	lsls	r0, r0, #1
   160dc:	3050      	adds	r0, #80	; 0x50
   160de:	21a0      	movs	r1, #160	; 0xa0
   160e0:	4b2a      	ldr	r3, [pc, #168]	; (1618c <lv_theme_material_init+0x1d64>)
   160e2:	4798      	blx	r3
   160e4:	b202      	sxth	r2, r0
   160e6:	f7fe fdb3 	bl	14c50 <lv_theme_material_init+0x828>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   160ea:	2000      	movs	r0, #0
   160ec:	4b26      	ldr	r3, [pc, #152]	; (16188 <lv_theme_material_init+0x1d60>)
   160ee:	4798      	blx	r3
   160f0:	3014      	adds	r0, #20
   160f2:	0080      	lsls	r0, r0, #2
   160f4:	21a0      	movs	r1, #160	; 0xa0
   160f6:	4b25      	ldr	r3, [pc, #148]	; (1618c <lv_theme_material_init+0x1d64>)
   160f8:	4798      	blx	r3
   160fa:	b202      	sxth	r2, r0
   160fc:	f7fe fdf0 	bl	14ce0 <lv_theme_material_init+0x8b8>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16100:	2000      	movs	r0, #0
   16102:	4b21      	ldr	r3, [pc, #132]	; (16188 <lv_theme_material_init+0x1d60>)
   16104:	4798      	blx	r3
   16106:	0003      	movs	r3, r0
   16108:	0040      	lsls	r0, r0, #1
   1610a:	18c0      	adds	r0, r0, r3
   1610c:	3050      	adds	r0, #80	; 0x50
   1610e:	21a0      	movs	r1, #160	; 0xa0
   16110:	4b1e      	ldr	r3, [pc, #120]	; (1618c <lv_theme_material_init+0x1d64>)
   16112:	4798      	blx	r3
   16114:	b202      	sxth	r2, r0
   16116:	f7fe fe0c 	bl	14d32 <lv_theme_material_init+0x90a>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   1611a:	2000      	movs	r0, #0
   1611c:	4b1a      	ldr	r3, [pc, #104]	; (16188 <lv_theme_material_init+0x1d60>)
   1611e:	4798      	blx	r3
   16120:	0003      	movs	r3, r0
   16122:	0040      	lsls	r0, r0, #1
   16124:	18c0      	adds	r0, r0, r3
   16126:	3050      	adds	r0, #80	; 0x50
   16128:	21a0      	movs	r1, #160	; 0xa0
   1612a:	4b18      	ldr	r3, [pc, #96]	; (1618c <lv_theme_material_init+0x1d64>)
   1612c:	4798      	blx	r3
   1612e:	b202      	sxth	r2, r0
   16130:	f7fe fe13 	bl	14d5a <lv_theme_material_init+0x932>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   16134:	2000      	movs	r0, #0
   16136:	4b14      	ldr	r3, [pc, #80]	; (16188 <lv_theme_material_init+0x1d60>)
   16138:	4798      	blx	r3
   1613a:	0003      	movs	r3, r0
   1613c:	0040      	lsls	r0, r0, #1
   1613e:	18c0      	adds	r0, r0, r3
   16140:	3050      	adds	r0, #80	; 0x50
   16142:	21a0      	movs	r1, #160	; 0xa0
   16144:	4b11      	ldr	r3, [pc, #68]	; (1618c <lv_theme_material_init+0x1d64>)
   16146:	4798      	blx	r3
   16148:	b202      	sxth	r2, r0
   1614a:	f7fe fe1a 	bl	14d82 <lv_theme_material_init+0x95a>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   1614e:	2000      	movs	r0, #0
   16150:	4b0d      	ldr	r3, [pc, #52]	; (16188 <lv_theme_material_init+0x1d60>)
   16152:	4798      	blx	r3
   16154:	0003      	movs	r3, r0
   16156:	0040      	lsls	r0, r0, #1
   16158:	18c0      	adds	r0, r0, r3
   1615a:	3050      	adds	r0, #80	; 0x50
   1615c:	21a0      	movs	r1, #160	; 0xa0
   1615e:	4b0b      	ldr	r3, [pc, #44]	; (1618c <lv_theme_material_init+0x1d64>)
   16160:	4798      	blx	r3
   16162:	b202      	sxth	r2, r0
   16164:	f7fe fe21 	bl	14daa <lv_theme_material_init+0x982>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   16168:	2000      	movs	r0, #0
   1616a:	4b07      	ldr	r3, [pc, #28]	; (16188 <lv_theme_material_init+0x1d60>)
   1616c:	4798      	blx	r3
   1616e:	3014      	adds	r0, #20
   16170:	0080      	lsls	r0, r0, #2
   16172:	21a0      	movs	r1, #160	; 0xa0
   16174:	4b05      	ldr	r3, [pc, #20]	; (1618c <lv_theme_material_init+0x1d64>)
   16176:	4798      	blx	r3
   16178:	b202      	sxth	r2, r0
   1617a:	f7fe fe32 	bl	14de2 <lv_theme_material_init+0x9ba>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   1617e:	2307      	movs	r3, #7
   16180:	210f      	movs	r1, #15
   16182:	2208      	movs	r2, #8
   16184:	f7fe fe42 	bl	14e0c <lv_theme_material_init+0x9e4>
   16188:	0000f5fd 	.word	0x0000f5fd
   1618c:	00017961 	.word	0x00017961
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   16190:	2000      	movs	r0, #0
   16192:	4bf8      	ldr	r3, [pc, #992]	; (16574 <lv_theme_material_init+0x214c>)
   16194:	4798      	blx	r3
   16196:	0003      	movs	r3, r0
   16198:	0080      	lsls	r0, r0, #2
   1619a:	18c0      	adds	r0, r0, r3
   1619c:	3050      	adds	r0, #80	; 0x50
   1619e:	21a0      	movs	r1, #160	; 0xa0
   161a0:	4bf5      	ldr	r3, [pc, #980]	; (16578 <lv_theme_material_init+0x2150>)
   161a2:	4798      	blx	r3
   161a4:	b202      	sxth	r2, r0
   161a6:	f7fe fe4e 	bl	14e46 <lv_theme_material_init+0xa1e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   161aa:	2000      	movs	r0, #0
   161ac:	4bf1      	ldr	r3, [pc, #964]	; (16574 <lv_theme_material_init+0x214c>)
   161ae:	4798      	blx	r3
   161b0:	0003      	movs	r3, r0
   161b2:	0080      	lsls	r0, r0, #2
   161b4:	18c0      	adds	r0, r0, r3
   161b6:	3050      	adds	r0, #80	; 0x50
   161b8:	21a0      	movs	r1, #160	; 0xa0
   161ba:	4bef      	ldr	r3, [pc, #956]	; (16578 <lv_theme_material_init+0x2150>)
   161bc:	4798      	blx	r3
   161be:	b202      	sxth	r2, r0
   161c0:	f7fe fe55 	bl	14e6e <lv_theme_material_init+0xa46>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   161c4:	2000      	movs	r0, #0
   161c6:	4beb      	ldr	r3, [pc, #940]	; (16574 <lv_theme_material_init+0x214c>)
   161c8:	4798      	blx	r3
   161ca:	0003      	movs	r3, r0
   161cc:	0080      	lsls	r0, r0, #2
   161ce:	18c0      	adds	r0, r0, r3
   161d0:	3050      	adds	r0, #80	; 0x50
   161d2:	21a0      	movs	r1, #160	; 0xa0
   161d4:	4be8      	ldr	r3, [pc, #928]	; (16578 <lv_theme_material_init+0x2150>)
   161d6:	4798      	blx	r3
   161d8:	b202      	sxth	r2, r0
   161da:	f7fe fe5c 	bl	14e96 <lv_theme_material_init+0xa6e>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   161de:	2000      	movs	r0, #0
   161e0:	4be4      	ldr	r3, [pc, #912]	; (16574 <lv_theme_material_init+0x214c>)
   161e2:	4798      	blx	r3
   161e4:	0003      	movs	r3, r0
   161e6:	0080      	lsls	r0, r0, #2
   161e8:	18c0      	adds	r0, r0, r3
   161ea:	3050      	adds	r0, #80	; 0x50
   161ec:	21a0      	movs	r1, #160	; 0xa0
   161ee:	4be2      	ldr	r3, [pc, #904]	; (16578 <lv_theme_material_init+0x2150>)
   161f0:	4798      	blx	r3
   161f2:	b202      	sxth	r2, r0
   161f4:	f7fe fe63 	bl	14ebe <lv_theme_material_init+0xa96>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   161f8:	2000      	movs	r0, #0
   161fa:	4bde      	ldr	r3, [pc, #888]	; (16574 <lv_theme_material_init+0x214c>)
   161fc:	4798      	blx	r3
   161fe:	0003      	movs	r3, r0
   16200:	0040      	lsls	r0, r0, #1
   16202:	18c0      	adds	r0, r0, r3
   16204:	3050      	adds	r0, #80	; 0x50
   16206:	21a0      	movs	r1, #160	; 0xa0
   16208:	4bdb      	ldr	r3, [pc, #876]	; (16578 <lv_theme_material_init+0x2150>)
   1620a:	4798      	blx	r3
   1620c:	b202      	sxth	r2, r0
   1620e:	f7fe fe6a 	bl	14ee6 <lv_theme_material_init+0xabe>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   16212:	2000      	movs	r0, #0
   16214:	4bd7      	ldr	r3, [pc, #860]	; (16574 <lv_theme_material_init+0x214c>)
   16216:	4798      	blx	r3
   16218:	0003      	movs	r3, r0
   1621a:	2032      	movs	r0, #50	; 0x32
   1621c:	4358      	muls	r0, r3
   1621e:	3050      	adds	r0, #80	; 0x50
   16220:	21a0      	movs	r1, #160	; 0xa0
   16222:	4bd5      	ldr	r3, [pc, #852]	; (16578 <lv_theme_material_init+0x2150>)
   16224:	4798      	blx	r3
   16226:	b202      	sxth	r2, r0
   16228:	f7fe fe75 	bl	14f16 <lv_theme_material_init+0xaee>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
   1622c:	2226      	movs	r2, #38	; 0x26
   1622e:	2313      	movs	r3, #19
   16230:	f7fe fe80 	bl	14f34 <lv_theme_material_init+0xb0c>
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
   16234:	2319      	movs	r3, #25
   16236:	2133      	movs	r1, #51	; 0x33
   16238:	221a      	movs	r2, #26
   1623a:	f7fe fe98 	bl	14f6e <lv_theme_material_init+0xb46>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   1623e:	2000      	movs	r0, #0
   16240:	4bcc      	ldr	r3, [pc, #816]	; (16574 <lv_theme_material_init+0x214c>)
   16242:	4798      	blx	r3
   16244:	00c3      	lsls	r3, r0, #3
   16246:	1a18      	subs	r0, r3, r0
   16248:	3050      	adds	r0, #80	; 0x50
   1624a:	21a0      	movs	r1, #160	; 0xa0
   1624c:	4bca      	ldr	r3, [pc, #808]	; (16578 <lv_theme_material_init+0x2150>)
   1624e:	4798      	blx	r3
   16250:	b202      	sxth	r2, r0
   16252:	f7fe fea9 	bl	14fa8 <lv_theme_material_init+0xb80>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   16256:	2000      	movs	r0, #0
   16258:	4bc6      	ldr	r3, [pc, #792]	; (16574 <lv_theme_material_init+0x214c>)
   1625a:	4798      	blx	r3
   1625c:	00c3      	lsls	r3, r0, #3
   1625e:	1a18      	subs	r0, r3, r0
   16260:	3050      	adds	r0, #80	; 0x50
   16262:	21a0      	movs	r1, #160	; 0xa0
   16264:	4bc4      	ldr	r3, [pc, #784]	; (16578 <lv_theme_material_init+0x2150>)
   16266:	4798      	blx	r3
   16268:	b202      	sxth	r2, r0
   1626a:	f7fe feb1 	bl	14fd0 <lv_theme_material_init+0xba8>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   1626e:	2000      	movs	r0, #0
   16270:	4bc0      	ldr	r3, [pc, #768]	; (16574 <lv_theme_material_init+0x214c>)
   16272:	4798      	blx	r3
   16274:	00c3      	lsls	r3, r0, #3
   16276:	1a18      	subs	r0, r3, r0
   16278:	3050      	adds	r0, #80	; 0x50
   1627a:	21a0      	movs	r1, #160	; 0xa0
   1627c:	4bbe      	ldr	r3, [pc, #760]	; (16578 <lv_theme_material_init+0x2150>)
   1627e:	4798      	blx	r3
   16280:	b202      	sxth	r2, r0
   16282:	f7fe feb9 	bl	14ff8 <lv_theme_material_init+0xbd0>
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   16286:	2306      	movs	r3, #6
   16288:	2110      	movs	r1, #16
   1628a:	2209      	movs	r2, #9
   1628c:	f7fe fed8 	bl	15040 <lv_theme_material_init+0xc18>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   16290:	2000      	movs	r0, #0
   16292:	4bb8      	ldr	r3, [pc, #736]	; (16574 <lv_theme_material_init+0x214c>)
   16294:	4798      	blx	r3
   16296:	3028      	adds	r0, #40	; 0x28
   16298:	0040      	lsls	r0, r0, #1
   1629a:	21a0      	movs	r1, #160	; 0xa0
   1629c:	4bb6      	ldr	r3, [pc, #728]	; (16578 <lv_theme_material_init+0x2150>)
   1629e:	4798      	blx	r3
   162a0:	b202      	sxth	r2, r0
   162a2:	f7fe fee3 	bl	1506c <lv_theme_material_init+0xc44>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   162a6:	2000      	movs	r0, #0
   162a8:	4bb2      	ldr	r3, [pc, #712]	; (16574 <lv_theme_material_init+0x214c>)
   162aa:	4798      	blx	r3
   162ac:	3050      	adds	r0, #80	; 0x50
   162ae:	21a0      	movs	r1, #160	; 0xa0
   162b0:	4bb1      	ldr	r3, [pc, #708]	; (16578 <lv_theme_material_init+0x2150>)
   162b2:	4798      	blx	r3
   162b4:	b202      	sxth	r2, r0
   162b6:	f7fe feeb 	bl	15090 <lv_theme_material_init+0xc68>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   162ba:	2315      	movs	r3, #21
   162bc:	212a      	movs	r1, #42	; 0x2a
   162be:	2215      	movs	r2, #21
   162c0:	f7fe ff1d 	bl	150fe <lv_theme_material_init+0xcd6>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   162c4:	2000      	movs	r0, #0
   162c6:	4bab      	ldr	r3, [pc, #684]	; (16574 <lv_theme_material_init+0x214c>)
   162c8:	4798      	blx	r3
   162ca:	0003      	movs	r3, r0
   162cc:	2064      	movs	r0, #100	; 0x64
   162ce:	4358      	muls	r0, r3
   162d0:	3050      	adds	r0, #80	; 0x50
   162d2:	21a0      	movs	r1, #160	; 0xa0
   162d4:	4ba8      	ldr	r3, [pc, #672]	; (16578 <lv_theme_material_init+0x2150>)
   162d6:	4798      	blx	r3
   162d8:	b202      	sxth	r2, r0
   162da:	f7fe ff3e 	bl	1515a <lv_theme_material_init+0xd32>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   162de:	2000      	movs	r0, #0
   162e0:	4ba4      	ldr	r3, [pc, #656]	; (16574 <lv_theme_material_init+0x214c>)
   162e2:	4798      	blx	r3
   162e4:	0003      	movs	r3, r0
   162e6:	2064      	movs	r0, #100	; 0x64
   162e8:	4358      	muls	r0, r3
   162ea:	3050      	adds	r0, #80	; 0x50
   162ec:	21a0      	movs	r1, #160	; 0xa0
   162ee:	4ba2      	ldr	r3, [pc, #648]	; (16578 <lv_theme_material_init+0x2150>)
   162f0:	4798      	blx	r3
   162f2:	b202      	sxth	r2, r0
   162f4:	f7fe ff45 	bl	15182 <lv_theme_material_init+0xd5a>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   162f8:	231f      	movs	r3, #31
   162fa:	213f      	movs	r1, #63	; 0x3f
   162fc:	221f      	movs	r2, #31
   162fe:	f7fe ff7b 	bl	151f8 <lv_theme_material_init+0xdd0>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   16302:	231d      	movs	r3, #29
   16304:	213b      	movs	r1, #59	; 0x3b
   16306:	221d      	movs	r2, #29
   16308:	f7fe ff89 	bl	1521e <lv_theme_material_init+0xdf6>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   1630c:	231f      	movs	r3, #31
   1630e:	213f      	movs	r1, #63	; 0x3f
   16310:	221f      	movs	r2, #31
   16312:	f7fe ff97 	bl	15244 <lv_theme_material_init+0xe1c>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   16316:	2307      	movs	r3, #7
   16318:	210f      	movs	r1, #15
   1631a:	2208      	movs	r2, #8
   1631c:	f7fe ffb5 	bl	1528a <lv_theme_material_init+0xe62>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   16320:	222a      	movs	r2, #42	; 0x2a
   16322:	2315      	movs	r3, #21
   16324:	f7fe ffc9 	bl	152ba <lv_theme_material_init+0xe92>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   16328:	2307      	movs	r3, #7
   1632a:	210f      	movs	r1, #15
   1632c:	2208      	movs	r2, #8
   1632e:	f7fe ffd7 	bl	152e0 <lv_theme_material_init+0xeb8>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   16332:	222a      	movs	r2, #42	; 0x2a
   16334:	2315      	movs	r3, #21
   16336:	f7fe ffeb 	bl	15310 <lv_theme_material_init+0xee8>
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   1633a:	231a      	movs	r3, #26
   1633c:	2137      	movs	r1, #55	; 0x37
   1633e:	221c      	movs	r2, #28
   16340:	f7fe ffff 	bl	15342 <lv_theme_material_init+0xf1a>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16344:	2000      	movs	r0, #0
   16346:	4b8b      	ldr	r3, [pc, #556]	; (16574 <lv_theme_material_init+0x214c>)
   16348:	4798      	blx	r3
   1634a:	0103      	lsls	r3, r0, #4
   1634c:	1a18      	subs	r0, r3, r0
   1634e:	3050      	adds	r0, #80	; 0x50
   16350:	2340      	movs	r3, #64	; 0x40
   16352:	33ff      	adds	r3, #255	; 0xff
   16354:	2201      	movs	r2, #1
   16356:	4298      	cmp	r0, r3
   16358:	d801      	bhi.n	1635e <lv_theme_material_init+0x1f36>
   1635a:	f7ff f81d 	bl	15398 <lv_theme_material_init+0xf70>
   1635e:	2000      	movs	r0, #0
   16360:	4b84      	ldr	r3, [pc, #528]	; (16574 <lv_theme_material_init+0x214c>)
   16362:	4798      	blx	r3
   16364:	0103      	lsls	r3, r0, #4
   16366:	1a18      	subs	r0, r3, r0
   16368:	3050      	adds	r0, #80	; 0x50
   1636a:	21a0      	movs	r1, #160	; 0xa0
   1636c:	4b82      	ldr	r3, [pc, #520]	; (16578 <lv_theme_material_init+0x2150>)
   1636e:	4798      	blx	r3
   16370:	b202      	sxth	r2, r0
   16372:	f7ff f811 	bl	15398 <lv_theme_material_init+0xf70>
   16376:	2000      	movs	r0, #0
   16378:	4b7e      	ldr	r3, [pc, #504]	; (16574 <lv_theme_material_init+0x214c>)
   1637a:	4798      	blx	r3
   1637c:	0103      	lsls	r3, r0, #4
   1637e:	1a18      	subs	r0, r3, r0
   16380:	0040      	lsls	r0, r0, #1
   16382:	3050      	adds	r0, #80	; 0x50
   16384:	21a0      	movs	r1, #160	; 0xa0
   16386:	4b7c      	ldr	r3, [pc, #496]	; (16578 <lv_theme_material_init+0x2150>)
   16388:	4798      	blx	r3
   1638a:	b202      	sxth	r2, r0
   1638c:	f7ff f804 	bl	15398 <lv_theme_material_init+0xf70>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16390:	2000      	movs	r0, #0
   16392:	4b78      	ldr	r3, [pc, #480]	; (16574 <lv_theme_material_init+0x214c>)
   16394:	4798      	blx	r3
   16396:	0103      	lsls	r3, r0, #4
   16398:	1a18      	subs	r0, r3, r0
   1639a:	3050      	adds	r0, #80	; 0x50
   1639c:	2340      	movs	r3, #64	; 0x40
   1639e:	33ff      	adds	r3, #255	; 0xff
   163a0:	2201      	movs	r2, #1
   163a2:	4298      	cmp	r0, r3
   163a4:	d801      	bhi.n	163aa <lv_theme_material_init+0x1f82>
   163a6:	f7ff f813 	bl	153d0 <lv_theme_material_init+0xfa8>
   163aa:	2000      	movs	r0, #0
   163ac:	4b71      	ldr	r3, [pc, #452]	; (16574 <lv_theme_material_init+0x214c>)
   163ae:	4798      	blx	r3
   163b0:	0103      	lsls	r3, r0, #4
   163b2:	1a18      	subs	r0, r3, r0
   163b4:	3050      	adds	r0, #80	; 0x50
   163b6:	21a0      	movs	r1, #160	; 0xa0
   163b8:	4b6f      	ldr	r3, [pc, #444]	; (16578 <lv_theme_material_init+0x2150>)
   163ba:	4798      	blx	r3
   163bc:	b202      	sxth	r2, r0
   163be:	f7ff f807 	bl	153d0 <lv_theme_material_init+0xfa8>
   163c2:	2000      	movs	r0, #0
   163c4:	4b6b      	ldr	r3, [pc, #428]	; (16574 <lv_theme_material_init+0x214c>)
   163c6:	4798      	blx	r3
   163c8:	0103      	lsls	r3, r0, #4
   163ca:	1a18      	subs	r0, r3, r0
   163cc:	0040      	lsls	r0, r0, #1
   163ce:	3050      	adds	r0, #80	; 0x50
   163d0:	21a0      	movs	r1, #160	; 0xa0
   163d2:	4b69      	ldr	r3, [pc, #420]	; (16578 <lv_theme_material_init+0x2150>)
   163d4:	4798      	blx	r3
   163d6:	b202      	sxth	r2, r0
   163d8:	f7fe fffa 	bl	153d0 <lv_theme_material_init+0xfa8>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   163dc:	2000      	movs	r0, #0
   163de:	4b65      	ldr	r3, [pc, #404]	; (16574 <lv_theme_material_init+0x214c>)
   163e0:	4798      	blx	r3
   163e2:	0103      	lsls	r3, r0, #4
   163e4:	1a18      	subs	r0, r3, r0
   163e6:	3050      	adds	r0, #80	; 0x50
   163e8:	2340      	movs	r3, #64	; 0x40
   163ea:	33ff      	adds	r3, #255	; 0xff
   163ec:	2201      	movs	r2, #1
   163ee:	4298      	cmp	r0, r3
   163f0:	d801      	bhi.n	163f6 <lv_theme_material_init+0x1fce>
   163f2:	f7ff f809 	bl	15408 <lv_theme_material_init+0xfe0>
   163f6:	2000      	movs	r0, #0
   163f8:	4b5e      	ldr	r3, [pc, #376]	; (16574 <lv_theme_material_init+0x214c>)
   163fa:	4798      	blx	r3
   163fc:	0103      	lsls	r3, r0, #4
   163fe:	1a18      	subs	r0, r3, r0
   16400:	3050      	adds	r0, #80	; 0x50
   16402:	21a0      	movs	r1, #160	; 0xa0
   16404:	4b5c      	ldr	r3, [pc, #368]	; (16578 <lv_theme_material_init+0x2150>)
   16406:	4798      	blx	r3
   16408:	b202      	sxth	r2, r0
   1640a:	f7fe fffd 	bl	15408 <lv_theme_material_init+0xfe0>
   1640e:	2000      	movs	r0, #0
   16410:	4b58      	ldr	r3, [pc, #352]	; (16574 <lv_theme_material_init+0x214c>)
   16412:	4798      	blx	r3
   16414:	0103      	lsls	r3, r0, #4
   16416:	1a18      	subs	r0, r3, r0
   16418:	0040      	lsls	r0, r0, #1
   1641a:	3050      	adds	r0, #80	; 0x50
   1641c:	21a0      	movs	r1, #160	; 0xa0
   1641e:	4b56      	ldr	r3, [pc, #344]	; (16578 <lv_theme_material_init+0x2150>)
   16420:	4798      	blx	r3
   16422:	b202      	sxth	r2, r0
   16424:	f7fe fff0 	bl	15408 <lv_theme_material_init+0xfe0>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16428:	2000      	movs	r0, #0
   1642a:	4b52      	ldr	r3, [pc, #328]	; (16574 <lv_theme_material_init+0x214c>)
   1642c:	4798      	blx	r3
   1642e:	0103      	lsls	r3, r0, #4
   16430:	1a18      	subs	r0, r3, r0
   16432:	3050      	adds	r0, #80	; 0x50
   16434:	2340      	movs	r3, #64	; 0x40
   16436:	33ff      	adds	r3, #255	; 0xff
   16438:	2201      	movs	r2, #1
   1643a:	4298      	cmp	r0, r3
   1643c:	d801      	bhi.n	16442 <lv_theme_material_init+0x201a>
   1643e:	f7fe ffff 	bl	15440 <lv_theme_material_init+0x1018>
   16442:	2000      	movs	r0, #0
   16444:	4b4b      	ldr	r3, [pc, #300]	; (16574 <lv_theme_material_init+0x214c>)
   16446:	4798      	blx	r3
   16448:	0103      	lsls	r3, r0, #4
   1644a:	1a18      	subs	r0, r3, r0
   1644c:	3050      	adds	r0, #80	; 0x50
   1644e:	21a0      	movs	r1, #160	; 0xa0
   16450:	4b49      	ldr	r3, [pc, #292]	; (16578 <lv_theme_material_init+0x2150>)
   16452:	4798      	blx	r3
   16454:	b202      	sxth	r2, r0
   16456:	f7fe fff3 	bl	15440 <lv_theme_material_init+0x1018>
   1645a:	2000      	movs	r0, #0
   1645c:	4b45      	ldr	r3, [pc, #276]	; (16574 <lv_theme_material_init+0x214c>)
   1645e:	4798      	blx	r3
   16460:	0103      	lsls	r3, r0, #4
   16462:	1a18      	subs	r0, r3, r0
   16464:	0040      	lsls	r0, r0, #1
   16466:	3050      	adds	r0, #80	; 0x50
   16468:	21a0      	movs	r1, #160	; 0xa0
   1646a:	4b43      	ldr	r3, [pc, #268]	; (16578 <lv_theme_material_init+0x2150>)
   1646c:	4798      	blx	r3
   1646e:	b202      	sxth	r2, r0
   16470:	f7fe ffe6 	bl	15440 <lv_theme_material_init+0x1018>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   16474:	2000      	movs	r0, #0
   16476:	4b3f      	ldr	r3, [pc, #252]	; (16574 <lv_theme_material_init+0x214c>)
   16478:	4798      	blx	r3
   1647a:	0103      	lsls	r3, r0, #4
   1647c:	1a18      	subs	r0, r3, r0
   1647e:	3050      	adds	r0, #80	; 0x50
   16480:	2340      	movs	r3, #64	; 0x40
   16482:	33ff      	adds	r3, #255	; 0xff
   16484:	2201      	movs	r2, #1
   16486:	4298      	cmp	r0, r3
   16488:	d801      	bhi.n	1648e <lv_theme_material_init+0x2066>
   1648a:	f7fe fff5 	bl	15478 <lv_theme_material_init+0x1050>
   1648e:	2000      	movs	r0, #0
   16490:	4b38      	ldr	r3, [pc, #224]	; (16574 <lv_theme_material_init+0x214c>)
   16492:	4798      	blx	r3
   16494:	0103      	lsls	r3, r0, #4
   16496:	1a18      	subs	r0, r3, r0
   16498:	3050      	adds	r0, #80	; 0x50
   1649a:	21a0      	movs	r1, #160	; 0xa0
   1649c:	4b36      	ldr	r3, [pc, #216]	; (16578 <lv_theme_material_init+0x2150>)
   1649e:	4798      	blx	r3
   164a0:	b202      	sxth	r2, r0
   164a2:	f7fe ffe9 	bl	15478 <lv_theme_material_init+0x1050>
   164a6:	2000      	movs	r0, #0
   164a8:	4b32      	ldr	r3, [pc, #200]	; (16574 <lv_theme_material_init+0x214c>)
   164aa:	4798      	blx	r3
   164ac:	0103      	lsls	r3, r0, #4
   164ae:	1a18      	subs	r0, r3, r0
   164b0:	0040      	lsls	r0, r0, #1
   164b2:	3050      	adds	r0, #80	; 0x50
   164b4:	21a0      	movs	r1, #160	; 0xa0
   164b6:	4b30      	ldr	r3, [pc, #192]	; (16578 <lv_theme_material_init+0x2150>)
   164b8:	4798      	blx	r3
   164ba:	b202      	sxth	r2, r0
   164bc:	f7fe ffdc 	bl	15478 <lv_theme_material_init+0x1050>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   164c0:	2000      	movs	r0, #0
   164c2:	4b2c      	ldr	r3, [pc, #176]	; (16574 <lv_theme_material_init+0x214c>)
   164c4:	4798      	blx	r3
   164c6:	0103      	lsls	r3, r0, #4
   164c8:	1a18      	subs	r0, r3, r0
   164ca:	3050      	adds	r0, #80	; 0x50
   164cc:	2340      	movs	r3, #64	; 0x40
   164ce:	33ff      	adds	r3, #255	; 0xff
   164d0:	4298      	cmp	r0, r3
   164d2:	d803      	bhi.n	164dc <lv_theme_material_init+0x20b4>
   164d4:	2201      	movs	r2, #1
   164d6:	4252      	negs	r2, r2
   164d8:	f7fe ffeb 	bl	154b2 <lv_theme_material_init+0x108a>
   164dc:	2000      	movs	r0, #0
   164de:	4b25      	ldr	r3, [pc, #148]	; (16574 <lv_theme_material_init+0x214c>)
   164e0:	4798      	blx	r3
   164e2:	0103      	lsls	r3, r0, #4
   164e4:	1a18      	subs	r0, r3, r0
   164e6:	3050      	adds	r0, #80	; 0x50
   164e8:	21a0      	movs	r1, #160	; 0xa0
   164ea:	4b23      	ldr	r3, [pc, #140]	; (16578 <lv_theme_material_init+0x2150>)
   164ec:	4798      	blx	r3
   164ee:	4242      	negs	r2, r0
   164f0:	b212      	sxth	r2, r2
   164f2:	f7fe ffde 	bl	154b2 <lv_theme_material_init+0x108a>
   164f6:	2000      	movs	r0, #0
   164f8:	4b1e      	ldr	r3, [pc, #120]	; (16574 <lv_theme_material_init+0x214c>)
   164fa:	4798      	blx	r3
   164fc:	0103      	lsls	r3, r0, #4
   164fe:	1a18      	subs	r0, r3, r0
   16500:	0040      	lsls	r0, r0, #1
   16502:	3050      	adds	r0, #80	; 0x50
   16504:	21a0      	movs	r1, #160	; 0xa0
   16506:	4b1c      	ldr	r3, [pc, #112]	; (16578 <lv_theme_material_init+0x2150>)
   16508:	4798      	blx	r3
   1650a:	4242      	negs	r2, r0
   1650c:	b212      	sxth	r2, r2
   1650e:	f7fe ffd0 	bl	154b2 <lv_theme_material_init+0x108a>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   16512:	2000      	movs	r0, #0
   16514:	4b17      	ldr	r3, [pc, #92]	; (16574 <lv_theme_material_init+0x214c>)
   16516:	4798      	blx	r3
   16518:	0003      	movs	r3, r0
   1651a:	0080      	lsls	r0, r0, #2
   1651c:	18c0      	adds	r0, r0, r3
   1651e:	0080      	lsls	r0, r0, #2
   16520:	3050      	adds	r0, #80	; 0x50
   16522:	21a0      	movs	r1, #160	; 0xa0
   16524:	4b14      	ldr	r3, [pc, #80]	; (16578 <lv_theme_material_init+0x2150>)
   16526:	4798      	blx	r3
   16528:	b202      	sxth	r2, r0
   1652a:	f7ff f825 	bl	15578 <lv_theme_material_init+0x1150>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   1652e:	231d      	movs	r3, #29
   16530:	213b      	movs	r1, #59	; 0x3b
   16532:	221d      	movs	r2, #29
   16534:	f7ff f84b 	bl	155ce <lv_theme_material_init+0x11a6>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   16538:	2307      	movs	r3, #7
   1653a:	210f      	movs	r1, #15
   1653c:	2208      	movs	r2, #8
   1653e:	f7ff f859 	bl	155f4 <lv_theme_material_init+0x11cc>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   16542:	2000      	movs	r0, #0
   16544:	4b0b      	ldr	r3, [pc, #44]	; (16574 <lv_theme_material_init+0x214c>)
   16546:	4798      	blx	r3
   16548:	0083      	lsls	r3, r0, #2
   1654a:	1818      	adds	r0, r3, r0
   1654c:	0083      	lsls	r3, r0, #2
   1654e:	18c0      	adds	r0, r0, r3
   16550:	3050      	adds	r0, #80	; 0x50
   16552:	21a0      	movs	r1, #160	; 0xa0
   16554:	4b08      	ldr	r3, [pc, #32]	; (16578 <lv_theme_material_init+0x2150>)
   16556:	4798      	blx	r3
   16558:	b202      	sxth	r2, r0
   1655a:	f7ff f868 	bl	1562e <lv_theme_material_init+0x1206>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   1655e:	231f      	movs	r3, #31
   16560:	213f      	movs	r1, #63	; 0x3f
   16562:	221f      	movs	r2, #31
   16564:	f7ff f892 	bl	1568c <lv_theme_material_init+0x1264>
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   16568:	231c      	movs	r3, #28
   1656a:	213a      	movs	r1, #58	; 0x3a
   1656c:	221e      	movs	r2, #30
   1656e:	f7ff f8a0 	bl	156b2 <lv_theme_material_init+0x128a>
   16572:	46c0      	nop			; (mov r8, r8)
   16574:	0000f5fd 	.word	0x0000f5fd
   16578:	00017961 	.word	0x00017961
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   1657c:	2000      	movs	r0, #0
   1657e:	4bdf      	ldr	r3, [pc, #892]	; (168fc <lv_theme_material_init+0x24d4>)
   16580:	4798      	blx	r3
   16582:	0003      	movs	r3, r0
   16584:	0080      	lsls	r0, r0, #2
   16586:	18c0      	adds	r0, r0, r3
   16588:	3050      	adds	r0, #80	; 0x50
   1658a:	21a0      	movs	r1, #160	; 0xa0
   1658c:	4bdc      	ldr	r3, [pc, #880]	; (16900 <lv_theme_material_init+0x24d8>)
   1658e:	4798      	blx	r3
   16590:	b202      	sxth	r2, r0
   16592:	f7ff f8a5 	bl	156e0 <lv_theme_material_init+0x12b8>
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   16596:	2307      	movs	r3, #7
   16598:	210f      	movs	r1, #15
   1659a:	2208      	movs	r2, #8
   1659c:	f7ff f8b5 	bl	1570a <lv_theme_material_init+0x12e2>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   165a0:	2000      	movs	r0, #0
   165a2:	4bd6      	ldr	r3, [pc, #856]	; (168fc <lv_theme_material_init+0x24d4>)
   165a4:	4798      	blx	r3
   165a6:	00c3      	lsls	r3, r0, #3
   165a8:	1a18      	subs	r0, r3, r0
   165aa:	3050      	adds	r0, #80	; 0x50
   165ac:	21a0      	movs	r1, #160	; 0xa0
   165ae:	4bd4      	ldr	r3, [pc, #848]	; (16900 <lv_theme_material_init+0x24d8>)
   165b0:	4798      	blx	r3
   165b2:	b202      	sxth	r2, r0
   165b4:	f7ff f8cd 	bl	15752 <lv_theme_material_init+0x132a>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   165b8:	2000      	movs	r0, #0
   165ba:	4bd0      	ldr	r3, [pc, #832]	; (168fc <lv_theme_material_init+0x24d4>)
   165bc:	4798      	blx	r3
   165be:	00c3      	lsls	r3, r0, #3
   165c0:	1a18      	subs	r0, r3, r0
   165c2:	3050      	adds	r0, #80	; 0x50
   165c4:	21a0      	movs	r1, #160	; 0xa0
   165c6:	4bce      	ldr	r3, [pc, #824]	; (16900 <lv_theme_material_init+0x24d8>)
   165c8:	4798      	blx	r3
   165ca:	b202      	sxth	r2, r0
   165cc:	f7ff f8d5 	bl	1577a <lv_theme_material_init+0x1352>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   165d0:	2000      	movs	r0, #0
   165d2:	4bca      	ldr	r3, [pc, #808]	; (168fc <lv_theme_material_init+0x24d4>)
   165d4:	4798      	blx	r3
   165d6:	00c3      	lsls	r3, r0, #3
   165d8:	1a18      	subs	r0, r3, r0
   165da:	3050      	adds	r0, #80	; 0x50
   165dc:	21a0      	movs	r1, #160	; 0xa0
   165de:	4bc8      	ldr	r3, [pc, #800]	; (16900 <lv_theme_material_init+0x24d8>)
   165e0:	4798      	blx	r3
   165e2:	b202      	sxth	r2, r0
   165e4:	f7ff f8dd 	bl	157a2 <lv_theme_material_init+0x137a>
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
   165e8:	2307      	movs	r3, #7
   165ea:	210f      	movs	r1, #15
   165ec:	2208      	movs	r2, #8
   165ee:	f7ff f8f9 	bl	157e4 <lv_theme_material_init+0x13bc>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   165f2:	2000      	movs	r0, #0
   165f4:	4bc1      	ldr	r3, [pc, #772]	; (168fc <lv_theme_material_init+0x24d4>)
   165f6:	4798      	blx	r3
   165f8:	0003      	movs	r3, r0
   165fa:	0080      	lsls	r0, r0, #2
   165fc:	18c0      	adds	r0, r0, r3
   165fe:	0080      	lsls	r0, r0, #2
   16600:	3050      	adds	r0, #80	; 0x50
   16602:	21a0      	movs	r1, #160	; 0xa0
   16604:	4bbe      	ldr	r3, [pc, #760]	; (16900 <lv_theme_material_init+0x24d8>)
   16606:	4798      	blx	r3
   16608:	b202      	sxth	r2, r0
   1660a:	f7ff f903 	bl	15814 <lv_theme_material_init+0x13ec>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   1660e:	2000      	movs	r0, #0
   16610:	4bba      	ldr	r3, [pc, #744]	; (168fc <lv_theme_material_init+0x24d4>)
   16612:	4798      	blx	r3
   16614:	0003      	movs	r3, r0
   16616:	0080      	lsls	r0, r0, #2
   16618:	18c0      	adds	r0, r0, r3
   1661a:	0080      	lsls	r0, r0, #2
   1661c:	3050      	adds	r0, #80	; 0x50
   1661e:	21a0      	movs	r1, #160	; 0xa0
   16620:	4bb7      	ldr	r3, [pc, #732]	; (16900 <lv_theme_material_init+0x24d8>)
   16622:	4798      	blx	r3
   16624:	b202      	sxth	r2, r0
   16626:	f7ff f90a 	bl	1583e <lv_theme_material_init+0x1416>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   1662a:	2000      	movs	r0, #0
   1662c:	4bb3      	ldr	r3, [pc, #716]	; (168fc <lv_theme_material_init+0x24d4>)
   1662e:	4798      	blx	r3
   16630:	0003      	movs	r3, r0
   16632:	0080      	lsls	r0, r0, #2
   16634:	18c0      	adds	r0, r0, r3
   16636:	3050      	adds	r0, #80	; 0x50
   16638:	21a0      	movs	r1, #160	; 0xa0
   1663a:	4bb1      	ldr	r3, [pc, #708]	; (16900 <lv_theme_material_init+0x24d8>)
   1663c:	4798      	blx	r3
   1663e:	b202      	sxth	r2, r0
   16640:	f7ff f931 	bl	158a6 <lv_theme_material_init+0x147e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16644:	2000      	movs	r0, #0
   16646:	4bad      	ldr	r3, [pc, #692]	; (168fc <lv_theme_material_init+0x24d4>)
   16648:	4798      	blx	r3
   1664a:	0103      	lsls	r3, r0, #4
   1664c:	1a18      	subs	r0, r3, r0
   1664e:	3050      	adds	r0, #80	; 0x50
   16650:	2340      	movs	r3, #64	; 0x40
   16652:	33ff      	adds	r3, #255	; 0xff
   16654:	2201      	movs	r2, #1
   16656:	4298      	cmp	r0, r3
   16658:	d801      	bhi.n	1665e <lv_theme_material_init+0x2236>
   1665a:	f7ff f949 	bl	158f0 <lv_theme_material_init+0x14c8>
   1665e:	2000      	movs	r0, #0
   16660:	4ba6      	ldr	r3, [pc, #664]	; (168fc <lv_theme_material_init+0x24d4>)
   16662:	4798      	blx	r3
   16664:	0103      	lsls	r3, r0, #4
   16666:	1a18      	subs	r0, r3, r0
   16668:	3050      	adds	r0, #80	; 0x50
   1666a:	21a0      	movs	r1, #160	; 0xa0
   1666c:	4ba4      	ldr	r3, [pc, #656]	; (16900 <lv_theme_material_init+0x24d8>)
   1666e:	4798      	blx	r3
   16670:	b202      	sxth	r2, r0
   16672:	f7ff f93d 	bl	158f0 <lv_theme_material_init+0x14c8>
   16676:	2000      	movs	r0, #0
   16678:	4ba0      	ldr	r3, [pc, #640]	; (168fc <lv_theme_material_init+0x24d4>)
   1667a:	4798      	blx	r3
   1667c:	0103      	lsls	r3, r0, #4
   1667e:	1a18      	subs	r0, r3, r0
   16680:	0040      	lsls	r0, r0, #1
   16682:	3050      	adds	r0, #80	; 0x50
   16684:	21a0      	movs	r1, #160	; 0xa0
   16686:	4b9e      	ldr	r3, [pc, #632]	; (16900 <lv_theme_material_init+0x24d8>)
   16688:	4798      	blx	r3
   1668a:	b202      	sxth	r2, r0
   1668c:	f7ff f930 	bl	158f0 <lv_theme_material_init+0x14c8>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16690:	2000      	movs	r0, #0
   16692:	4b9a      	ldr	r3, [pc, #616]	; (168fc <lv_theme_material_init+0x24d4>)
   16694:	4798      	blx	r3
   16696:	0103      	lsls	r3, r0, #4
   16698:	1a18      	subs	r0, r3, r0
   1669a:	3050      	adds	r0, #80	; 0x50
   1669c:	2340      	movs	r3, #64	; 0x40
   1669e:	33ff      	adds	r3, #255	; 0xff
   166a0:	2201      	movs	r2, #1
   166a2:	4298      	cmp	r0, r3
   166a4:	d801      	bhi.n	166aa <lv_theme_material_init+0x2282>
   166a6:	f7ff f973 	bl	15990 <lv_theme_material_init+0x1568>
   166aa:	2000      	movs	r0, #0
   166ac:	4b93      	ldr	r3, [pc, #588]	; (168fc <lv_theme_material_init+0x24d4>)
   166ae:	4798      	blx	r3
   166b0:	0103      	lsls	r3, r0, #4
   166b2:	1a18      	subs	r0, r3, r0
   166b4:	3050      	adds	r0, #80	; 0x50
   166b6:	21a0      	movs	r1, #160	; 0xa0
   166b8:	4b91      	ldr	r3, [pc, #580]	; (16900 <lv_theme_material_init+0x24d8>)
   166ba:	4798      	blx	r3
   166bc:	b202      	sxth	r2, r0
   166be:	f7ff f967 	bl	15990 <lv_theme_material_init+0x1568>
   166c2:	2000      	movs	r0, #0
   166c4:	4b8d      	ldr	r3, [pc, #564]	; (168fc <lv_theme_material_init+0x24d4>)
   166c6:	4798      	blx	r3
   166c8:	0103      	lsls	r3, r0, #4
   166ca:	1a18      	subs	r0, r3, r0
   166cc:	0040      	lsls	r0, r0, #1
   166ce:	3050      	adds	r0, #80	; 0x50
   166d0:	21a0      	movs	r1, #160	; 0xa0
   166d2:	4b8b      	ldr	r3, [pc, #556]	; (16900 <lv_theme_material_init+0x24d8>)
   166d4:	4798      	blx	r3
   166d6:	b202      	sxth	r2, r0
   166d8:	f7ff f95a 	bl	15990 <lv_theme_material_init+0x1568>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   166dc:	2000      	movs	r0, #0
   166de:	4b87      	ldr	r3, [pc, #540]	; (168fc <lv_theme_material_init+0x24d4>)
   166e0:	4798      	blx	r3
   166e2:	0103      	lsls	r3, r0, #4
   166e4:	1a18      	subs	r0, r3, r0
   166e6:	3050      	adds	r0, #80	; 0x50
   166e8:	2340      	movs	r3, #64	; 0x40
   166ea:	33ff      	adds	r3, #255	; 0xff
   166ec:	2201      	movs	r2, #1
   166ee:	4298      	cmp	r0, r3
   166f0:	d801      	bhi.n	166f6 <lv_theme_material_init+0x22ce>
   166f2:	f7ff f969 	bl	159c8 <lv_theme_material_init+0x15a0>
   166f6:	2000      	movs	r0, #0
   166f8:	4b80      	ldr	r3, [pc, #512]	; (168fc <lv_theme_material_init+0x24d4>)
   166fa:	4798      	blx	r3
   166fc:	0103      	lsls	r3, r0, #4
   166fe:	1a18      	subs	r0, r3, r0
   16700:	3050      	adds	r0, #80	; 0x50
   16702:	21a0      	movs	r1, #160	; 0xa0
   16704:	4b7e      	ldr	r3, [pc, #504]	; (16900 <lv_theme_material_init+0x24d8>)
   16706:	4798      	blx	r3
   16708:	b202      	sxth	r2, r0
   1670a:	f7ff f95d 	bl	159c8 <lv_theme_material_init+0x15a0>
   1670e:	2000      	movs	r0, #0
   16710:	4b7a      	ldr	r3, [pc, #488]	; (168fc <lv_theme_material_init+0x24d4>)
   16712:	4798      	blx	r3
   16714:	0103      	lsls	r3, r0, #4
   16716:	1a18      	subs	r0, r3, r0
   16718:	0040      	lsls	r0, r0, #1
   1671a:	3050      	adds	r0, #80	; 0x50
   1671c:	21a0      	movs	r1, #160	; 0xa0
   1671e:	4b78      	ldr	r3, [pc, #480]	; (16900 <lv_theme_material_init+0x24d8>)
   16720:	4798      	blx	r3
   16722:	b202      	sxth	r2, r0
   16724:	f7ff f950 	bl	159c8 <lv_theme_material_init+0x15a0>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16728:	2000      	movs	r0, #0
   1672a:	4b74      	ldr	r3, [pc, #464]	; (168fc <lv_theme_material_init+0x24d4>)
   1672c:	4798      	blx	r3
   1672e:	0103      	lsls	r3, r0, #4
   16730:	1a18      	subs	r0, r3, r0
   16732:	3050      	adds	r0, #80	; 0x50
   16734:	2340      	movs	r3, #64	; 0x40
   16736:	33ff      	adds	r3, #255	; 0xff
   16738:	2201      	movs	r2, #1
   1673a:	4298      	cmp	r0, r3
   1673c:	d801      	bhi.n	16742 <lv_theme_material_init+0x231a>
   1673e:	f7ff f95f 	bl	15a00 <lv_theme_material_init+0x15d8>
   16742:	2000      	movs	r0, #0
   16744:	4b6d      	ldr	r3, [pc, #436]	; (168fc <lv_theme_material_init+0x24d4>)
   16746:	4798      	blx	r3
   16748:	0103      	lsls	r3, r0, #4
   1674a:	1a18      	subs	r0, r3, r0
   1674c:	3050      	adds	r0, #80	; 0x50
   1674e:	21a0      	movs	r1, #160	; 0xa0
   16750:	4b6b      	ldr	r3, [pc, #428]	; (16900 <lv_theme_material_init+0x24d8>)
   16752:	4798      	blx	r3
   16754:	b202      	sxth	r2, r0
   16756:	f7ff f953 	bl	15a00 <lv_theme_material_init+0x15d8>
   1675a:	2000      	movs	r0, #0
   1675c:	4b67      	ldr	r3, [pc, #412]	; (168fc <lv_theme_material_init+0x24d4>)
   1675e:	4798      	blx	r3
   16760:	0103      	lsls	r3, r0, #4
   16762:	1a18      	subs	r0, r3, r0
   16764:	0040      	lsls	r0, r0, #1
   16766:	3050      	adds	r0, #80	; 0x50
   16768:	21a0      	movs	r1, #160	; 0xa0
   1676a:	4b65      	ldr	r3, [pc, #404]	; (16900 <lv_theme_material_init+0x24d8>)
   1676c:	4798      	blx	r3
   1676e:	b202      	sxth	r2, r0
   16770:	f7ff f946 	bl	15a00 <lv_theme_material_init+0x15d8>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   16774:	2000      	movs	r0, #0
   16776:	4b61      	ldr	r3, [pc, #388]	; (168fc <lv_theme_material_init+0x24d4>)
   16778:	4798      	blx	r3
   1677a:	0103      	lsls	r3, r0, #4
   1677c:	1a18      	subs	r0, r3, r0
   1677e:	3050      	adds	r0, #80	; 0x50
   16780:	2340      	movs	r3, #64	; 0x40
   16782:	33ff      	adds	r3, #255	; 0xff
   16784:	2201      	movs	r2, #1
   16786:	4298      	cmp	r0, r3
   16788:	d801      	bhi.n	1678e <lv_theme_material_init+0x2366>
   1678a:	f7ff f955 	bl	15a38 <lv_theme_material_init+0x1610>
   1678e:	2000      	movs	r0, #0
   16790:	4b5a      	ldr	r3, [pc, #360]	; (168fc <lv_theme_material_init+0x24d4>)
   16792:	4798      	blx	r3
   16794:	0103      	lsls	r3, r0, #4
   16796:	1a18      	subs	r0, r3, r0
   16798:	3050      	adds	r0, #80	; 0x50
   1679a:	21a0      	movs	r1, #160	; 0xa0
   1679c:	4b58      	ldr	r3, [pc, #352]	; (16900 <lv_theme_material_init+0x24d8>)
   1679e:	4798      	blx	r3
   167a0:	b202      	sxth	r2, r0
   167a2:	f7ff f949 	bl	15a38 <lv_theme_material_init+0x1610>
   167a6:	2000      	movs	r0, #0
   167a8:	4b54      	ldr	r3, [pc, #336]	; (168fc <lv_theme_material_init+0x24d4>)
   167aa:	4798      	blx	r3
   167ac:	0103      	lsls	r3, r0, #4
   167ae:	1a18      	subs	r0, r3, r0
   167b0:	0040      	lsls	r0, r0, #1
   167b2:	3050      	adds	r0, #80	; 0x50
   167b4:	21a0      	movs	r1, #160	; 0xa0
   167b6:	4b52      	ldr	r3, [pc, #328]	; (16900 <lv_theme_material_init+0x24d8>)
   167b8:	4798      	blx	r3
   167ba:	b202      	sxth	r2, r0
   167bc:	f7ff f93c 	bl	15a38 <lv_theme_material_init+0x1610>
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   167c0:	231a      	movs	r3, #26
   167c2:	2137      	movs	r1, #55	; 0x37
   167c4:	221c      	movs	r2, #28
   167c6:	f7ff f94b 	bl	15a60 <lv_theme_material_init+0x1638>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   167ca:	2000      	movs	r0, #0
   167cc:	4b4b      	ldr	r3, [pc, #300]	; (168fc <lv_theme_material_init+0x24d4>)
   167ce:	4798      	blx	r3
   167d0:	0103      	lsls	r3, r0, #4
   167d2:	1a18      	subs	r0, r3, r0
   167d4:	3050      	adds	r0, #80	; 0x50
   167d6:	2340      	movs	r3, #64	; 0x40
   167d8:	33ff      	adds	r3, #255	; 0xff
   167da:	2201      	movs	r2, #1
   167dc:	4298      	cmp	r0, r3
   167de:	d801      	bhi.n	167e4 <lv_theme_material_init+0x23bc>
   167e0:	f7ff f968 	bl	15ab4 <lv_theme_material_init+0x168c>
   167e4:	2000      	movs	r0, #0
   167e6:	4b45      	ldr	r3, [pc, #276]	; (168fc <lv_theme_material_init+0x24d4>)
   167e8:	4798      	blx	r3
   167ea:	0103      	lsls	r3, r0, #4
   167ec:	1a18      	subs	r0, r3, r0
   167ee:	3050      	adds	r0, #80	; 0x50
   167f0:	21a0      	movs	r1, #160	; 0xa0
   167f2:	4b43      	ldr	r3, [pc, #268]	; (16900 <lv_theme_material_init+0x24d8>)
   167f4:	4798      	blx	r3
   167f6:	b202      	sxth	r2, r0
   167f8:	f7ff f95c 	bl	15ab4 <lv_theme_material_init+0x168c>
   167fc:	2000      	movs	r0, #0
   167fe:	4b3f      	ldr	r3, [pc, #252]	; (168fc <lv_theme_material_init+0x24d4>)
   16800:	4798      	blx	r3
   16802:	0103      	lsls	r3, r0, #4
   16804:	1a18      	subs	r0, r3, r0
   16806:	0040      	lsls	r0, r0, #1
   16808:	3050      	adds	r0, #80	; 0x50
   1680a:	21a0      	movs	r1, #160	; 0xa0
   1680c:	4b3c      	ldr	r3, [pc, #240]	; (16900 <lv_theme_material_init+0x24d8>)
   1680e:	4798      	blx	r3
   16810:	b202      	sxth	r2, r0
   16812:	f7ff f94f 	bl	15ab4 <lv_theme_material_init+0x168c>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   16816:	2000      	movs	r0, #0
   16818:	4b38      	ldr	r3, [pc, #224]	; (168fc <lv_theme_material_init+0x24d4>)
   1681a:	4798      	blx	r3
   1681c:	0103      	lsls	r3, r0, #4
   1681e:	1a18      	subs	r0, r3, r0
   16820:	3050      	adds	r0, #80	; 0x50
   16822:	2340      	movs	r3, #64	; 0x40
   16824:	33ff      	adds	r3, #255	; 0xff
   16826:	2201      	movs	r2, #1
   16828:	4298      	cmp	r0, r3
   1682a:	d801      	bhi.n	16830 <lv_theme_material_init+0x2408>
   1682c:	f7ff f95e 	bl	15aec <lv_theme_material_init+0x16c4>
   16830:	2000      	movs	r0, #0
   16832:	4b32      	ldr	r3, [pc, #200]	; (168fc <lv_theme_material_init+0x24d4>)
   16834:	4798      	blx	r3
   16836:	0103      	lsls	r3, r0, #4
   16838:	1a18      	subs	r0, r3, r0
   1683a:	3050      	adds	r0, #80	; 0x50
   1683c:	21a0      	movs	r1, #160	; 0xa0
   1683e:	4b30      	ldr	r3, [pc, #192]	; (16900 <lv_theme_material_init+0x24d8>)
   16840:	4798      	blx	r3
   16842:	b202      	sxth	r2, r0
   16844:	f7ff f952 	bl	15aec <lv_theme_material_init+0x16c4>
   16848:	2000      	movs	r0, #0
   1684a:	4b2c      	ldr	r3, [pc, #176]	; (168fc <lv_theme_material_init+0x24d4>)
   1684c:	4798      	blx	r3
   1684e:	0103      	lsls	r3, r0, #4
   16850:	1a18      	subs	r0, r3, r0
   16852:	0040      	lsls	r0, r0, #1
   16854:	3050      	adds	r0, #80	; 0x50
   16856:	21a0      	movs	r1, #160	; 0xa0
   16858:	4b29      	ldr	r3, [pc, #164]	; (16900 <lv_theme_material_init+0x24d8>)
   1685a:	4798      	blx	r3
   1685c:	b202      	sxth	r2, r0
   1685e:	f7ff f945 	bl	15aec <lv_theme_material_init+0x16c4>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   16862:	2000      	movs	r0, #0
   16864:	4b25      	ldr	r3, [pc, #148]	; (168fc <lv_theme_material_init+0x24d4>)
   16866:	4798      	blx	r3
   16868:	0103      	lsls	r3, r0, #4
   1686a:	1a18      	subs	r0, r3, r0
   1686c:	3050      	adds	r0, #80	; 0x50
   1686e:	2340      	movs	r3, #64	; 0x40
   16870:	33ff      	adds	r3, #255	; 0xff
   16872:	2201      	movs	r2, #1
   16874:	4298      	cmp	r0, r3
   16876:	d801      	bhi.n	1687c <lv_theme_material_init+0x2454>
   16878:	f7ff f954 	bl	15b24 <lv_theme_material_init+0x16fc>
   1687c:	2000      	movs	r0, #0
   1687e:	4b1f      	ldr	r3, [pc, #124]	; (168fc <lv_theme_material_init+0x24d4>)
   16880:	4798      	blx	r3
   16882:	0103      	lsls	r3, r0, #4
   16884:	1a18      	subs	r0, r3, r0
   16886:	3050      	adds	r0, #80	; 0x50
   16888:	21a0      	movs	r1, #160	; 0xa0
   1688a:	4b1d      	ldr	r3, [pc, #116]	; (16900 <lv_theme_material_init+0x24d8>)
   1688c:	4798      	blx	r3
   1688e:	b202      	sxth	r2, r0
   16890:	f7ff f948 	bl	15b24 <lv_theme_material_init+0x16fc>
   16894:	2000      	movs	r0, #0
   16896:	4b19      	ldr	r3, [pc, #100]	; (168fc <lv_theme_material_init+0x24d4>)
   16898:	4798      	blx	r3
   1689a:	0103      	lsls	r3, r0, #4
   1689c:	1a18      	subs	r0, r3, r0
   1689e:	0040      	lsls	r0, r0, #1
   168a0:	3050      	adds	r0, #80	; 0x50
   168a2:	21a0      	movs	r1, #160	; 0xa0
   168a4:	4b16      	ldr	r3, [pc, #88]	; (16900 <lv_theme_material_init+0x24d8>)
   168a6:	4798      	blx	r3
   168a8:	b202      	sxth	r2, r0
   168aa:	f7ff f93b 	bl	15b24 <lv_theme_material_init+0x16fc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   168ae:	2000      	movs	r0, #0
   168b0:	4b12      	ldr	r3, [pc, #72]	; (168fc <lv_theme_material_init+0x24d4>)
   168b2:	4798      	blx	r3
   168b4:	0103      	lsls	r3, r0, #4
   168b6:	1a18      	subs	r0, r3, r0
   168b8:	3050      	adds	r0, #80	; 0x50
   168ba:	2340      	movs	r3, #64	; 0x40
   168bc:	33ff      	adds	r3, #255	; 0xff
   168be:	2201      	movs	r2, #1
   168c0:	4298      	cmp	r0, r3
   168c2:	d801      	bhi.n	168c8 <lv_theme_material_init+0x24a0>
   168c4:	f7ff f94a 	bl	15b5c <lv_theme_material_init+0x1734>
   168c8:	2000      	movs	r0, #0
   168ca:	4b0c      	ldr	r3, [pc, #48]	; (168fc <lv_theme_material_init+0x24d4>)
   168cc:	4798      	blx	r3
   168ce:	0103      	lsls	r3, r0, #4
   168d0:	1a18      	subs	r0, r3, r0
   168d2:	3050      	adds	r0, #80	; 0x50
   168d4:	21a0      	movs	r1, #160	; 0xa0
   168d6:	4b0a      	ldr	r3, [pc, #40]	; (16900 <lv_theme_material_init+0x24d8>)
   168d8:	4798      	blx	r3
   168da:	b202      	sxth	r2, r0
   168dc:	f7ff f93e 	bl	15b5c <lv_theme_material_init+0x1734>
   168e0:	2000      	movs	r0, #0
   168e2:	4b06      	ldr	r3, [pc, #24]	; (168fc <lv_theme_material_init+0x24d4>)
   168e4:	4798      	blx	r3
   168e6:	0103      	lsls	r3, r0, #4
   168e8:	1a18      	subs	r0, r3, r0
   168ea:	0040      	lsls	r0, r0, #1
   168ec:	3050      	adds	r0, #80	; 0x50
   168ee:	21a0      	movs	r1, #160	; 0xa0
   168f0:	4b03      	ldr	r3, [pc, #12]	; (16900 <lv_theme_material_init+0x24d8>)
   168f2:	4798      	blx	r3
   168f4:	b202      	sxth	r2, r0
   168f6:	f7ff f931 	bl	15b5c <lv_theme_material_init+0x1734>
   168fa:	46c0      	nop			; (mov r8, r8)
   168fc:	0000f5fd 	.word	0x0000f5fd
   16900:	00017961 	.word	0x00017961

00016904 <ssd1963_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void ssd1963_init(void)
{
   16904:	b570      	push	{r4, r5, r6, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
   16906:	4de9      	ldr	r5, [pc, #932]	; (16cac <ssd1963_init+0x3a8>)
   16908:	2320      	movs	r3, #32
   1690a:	616b      	str	r3, [r5, #20]
    LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
    cmd_mode = true;
   1690c:	4ce8      	ldr	r4, [pc, #928]	; (16cb0 <ssd1963_init+0x3ac>)
   1690e:	3b1f      	subs	r3, #31
   16910:	7023      	strb	r3, [r4, #0]

    LV_DRV_DELAY_MS(250);
   16912:	2000      	movs	r0, #0
   16914:	4be7      	ldr	r3, [pc, #924]	; (16cb4 <ssd1963_init+0x3b0>)
   16916:	4798      	blx	r3
   16918:	22fa      	movs	r2, #250	; 0xfa
   1691a:	2300      	movs	r3, #0
   1691c:	2100      	movs	r1, #0
   1691e:	4ee6      	ldr	r6, [pc, #920]	; (16cb8 <ssd1963_init+0x3b4>)
   16920:	47b0      	blx	r6
   16922:	4ae6      	ldr	r2, [pc, #920]	; (16cbc <ssd1963_init+0x3b8>)
   16924:	2300      	movs	r3, #0
   16926:	1880      	adds	r0, r0, r2
   16928:	4159      	adcs	r1, r3
   1692a:	4ae5      	ldr	r2, [pc, #916]	; (16cc0 <ssd1963_init+0x3bc>)
   1692c:	2300      	movs	r3, #0
   1692e:	4ee5      	ldr	r6, [pc, #916]	; (16cc4 <ssd1963_init+0x3c0>)
   16930:	47b0      	blx	r6
   16932:	4be5      	ldr	r3, [pc, #916]	; (16cc8 <ssd1963_init+0x3c4>)
   16934:	4798      	blx	r3
   16936:	2340      	movs	r3, #64	; 0x40
   16938:	616b      	str	r3, [r5, #20]
/**
 * Command mode
 */
static inline void ssd1963_cmd_mode(void)
{
    if(cmd_mode == false) {
   1693a:	7823      	ldrb	r3, [r4, #0]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d104      	bne.n	1694a <ssd1963_init+0x46>
   16940:	2220      	movs	r2, #32
   16942:	616a      	str	r2, [r5, #20]
        LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
        cmd_mode = true;
   16944:	3a1f      	subs	r2, #31
   16946:	4bda      	ldr	r3, [pc, #872]	; (16cb0 <ssd1963_init+0x3ac>)
   16948:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_cmd(uint8_t cmd)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_cmd_mode();
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   1694a:	22e2      	movs	r2, #226	; 0xe2
   1694c:	49df      	ldr	r1, [pc, #892]	; (16ccc <ssd1963_init+0x3c8>)
   1694e:	48e0      	ldr	r0, [pc, #896]	; (16cd0 <ssd1963_init+0x3cc>)
   16950:	4be0      	ldr	r3, [pc, #896]	; (16cd4 <ssd1963_init+0x3d0>)
   16952:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16954:	4bd5      	ldr	r3, [pc, #852]	; (16cac <ssd1963_init+0x3a8>)
   16956:	2240      	movs	r2, #64	; 0x40
   16958:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1695a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   1695c:	4bd4      	ldr	r3, [pc, #848]	; (16cb0 <ssd1963_init+0x3ac>)
   1695e:	781b      	ldrb	r3, [r3, #0]
   16960:	2b00      	cmp	r3, #0
   16962:	d005      	beq.n	16970 <ssd1963_init+0x6c>
		port_base->OUTSET.reg = pin_mask;
   16964:	3a20      	subs	r2, #32
   16966:	4bd1      	ldr	r3, [pc, #836]	; (16cac <ssd1963_init+0x3a8>)
   16968:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   1696a:	2200      	movs	r2, #0
   1696c:	4bd0      	ldr	r3, [pc, #832]	; (16cb0 <ssd1963_init+0x3ac>)
   1696e:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_data(uint8_t data)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_data_mode();
    LV_DRV_DISP_PAR_WR_WORD(data);
   16970:	2223      	movs	r2, #35	; 0x23
   16972:	49d6      	ldr	r1, [pc, #856]	; (16ccc <ssd1963_init+0x3c8>)
   16974:	48d6      	ldr	r0, [pc, #856]	; (16cd0 <ssd1963_init+0x3cc>)
   16976:	4bd7      	ldr	r3, [pc, #860]	; (16cd4 <ssd1963_init+0x3d0>)
   16978:	4798      	blx	r3
   1697a:	4bcc      	ldr	r3, [pc, #816]	; (16cac <ssd1963_init+0x3a8>)
   1697c:	2240      	movs	r2, #64	; 0x40
   1697e:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16980:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16982:	4bcb      	ldr	r3, [pc, #812]	; (16cb0 <ssd1963_init+0x3ac>)
   16984:	781b      	ldrb	r3, [r3, #0]
   16986:	2b00      	cmp	r3, #0
   16988:	d005      	beq.n	16996 <ssd1963_init+0x92>
		port_base->OUTSET.reg = pin_mask;
   1698a:	3a20      	subs	r2, #32
   1698c:	4bc7      	ldr	r3, [pc, #796]	; (16cac <ssd1963_init+0x3a8>)
   1698e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16990:	2200      	movs	r2, #0
   16992:	4bc7      	ldr	r3, [pc, #796]	; (16cb0 <ssd1963_init+0x3ac>)
   16994:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16996:	2202      	movs	r2, #2
   16998:	49cc      	ldr	r1, [pc, #816]	; (16ccc <ssd1963_init+0x3c8>)
   1699a:	48cd      	ldr	r0, [pc, #820]	; (16cd0 <ssd1963_init+0x3cc>)
   1699c:	4bcd      	ldr	r3, [pc, #820]	; (16cd4 <ssd1963_init+0x3d0>)
   1699e:	4798      	blx	r3
   169a0:	4bc2      	ldr	r3, [pc, #776]	; (16cac <ssd1963_init+0x3a8>)
   169a2:	2240      	movs	r2, #64	; 0x40
   169a4:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   169a6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   169a8:	4bc1      	ldr	r3, [pc, #772]	; (16cb0 <ssd1963_init+0x3ac>)
   169aa:	781b      	ldrb	r3, [r3, #0]
   169ac:	2b00      	cmp	r3, #0
   169ae:	d005      	beq.n	169bc <ssd1963_init+0xb8>
		port_base->OUTSET.reg = pin_mask;
   169b0:	3a20      	subs	r2, #32
   169b2:	4bbe      	ldr	r3, [pc, #760]	; (16cac <ssd1963_init+0x3a8>)
   169b4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   169b6:	2200      	movs	r2, #0
   169b8:	4bbd      	ldr	r3, [pc, #756]	; (16cb0 <ssd1963_init+0x3ac>)
   169ba:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   169bc:	2204      	movs	r2, #4
   169be:	49c3      	ldr	r1, [pc, #780]	; (16ccc <ssd1963_init+0x3c8>)
   169c0:	48c3      	ldr	r0, [pc, #780]	; (16cd0 <ssd1963_init+0x3cc>)
   169c2:	4bc4      	ldr	r3, [pc, #784]	; (16cd4 <ssd1963_init+0x3d0>)
   169c4:	4798      	blx	r3
   169c6:	4bb9      	ldr	r3, [pc, #740]	; (16cac <ssd1963_init+0x3a8>)
   169c8:	2240      	movs	r2, #64	; 0x40
   169ca:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   169cc:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   169ce:	4bb8      	ldr	r3, [pc, #736]	; (16cb0 <ssd1963_init+0x3ac>)
   169d0:	781b      	ldrb	r3, [r3, #0]
   169d2:	2b00      	cmp	r3, #0
   169d4:	d105      	bne.n	169e2 <ssd1963_init+0xde>
   169d6:	3a20      	subs	r2, #32
   169d8:	4bb4      	ldr	r3, [pc, #720]	; (16cac <ssd1963_init+0x3a8>)
   169da:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   169dc:	3a1f      	subs	r2, #31
   169de:	4bb4      	ldr	r3, [pc, #720]	; (16cb0 <ssd1963_init+0x3ac>)
   169e0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   169e2:	22e0      	movs	r2, #224	; 0xe0
   169e4:	49b9      	ldr	r1, [pc, #740]	; (16ccc <ssd1963_init+0x3c8>)
   169e6:	48ba      	ldr	r0, [pc, #744]	; (16cd0 <ssd1963_init+0x3cc>)
   169e8:	4bba      	ldr	r3, [pc, #744]	; (16cd4 <ssd1963_init+0x3d0>)
   169ea:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   169ec:	4baf      	ldr	r3, [pc, #700]	; (16cac <ssd1963_init+0x3a8>)
   169ee:	2240      	movs	r2, #64	; 0x40
   169f0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   169f2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   169f4:	4bae      	ldr	r3, [pc, #696]	; (16cb0 <ssd1963_init+0x3ac>)
   169f6:	781b      	ldrb	r3, [r3, #0]
   169f8:	2b00      	cmp	r3, #0
   169fa:	d005      	beq.n	16a08 <ssd1963_init+0x104>
		port_base->OUTSET.reg = pin_mask;
   169fc:	3a20      	subs	r2, #32
   169fe:	4bab      	ldr	r3, [pc, #684]	; (16cac <ssd1963_init+0x3a8>)
   16a00:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16a02:	2200      	movs	r2, #0
   16a04:	4baa      	ldr	r3, [pc, #680]	; (16cb0 <ssd1963_init+0x3ac>)
   16a06:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16a08:	2201      	movs	r2, #1
   16a0a:	49b0      	ldr	r1, [pc, #704]	; (16ccc <ssd1963_init+0x3c8>)
   16a0c:	48b0      	ldr	r0, [pc, #704]	; (16cd0 <ssd1963_init+0x3cc>)
   16a0e:	4bb1      	ldr	r3, [pc, #708]	; (16cd4 <ssd1963_init+0x3d0>)
   16a10:	4798      	blx	r3
   16a12:	4ca6      	ldr	r4, [pc, #664]	; (16cac <ssd1963_init+0x3a8>)
   16a14:	2540      	movs	r5, #64	; 0x40
   16a16:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
   16a18:	2000      	movs	r0, #0
   16a1a:	4ba6      	ldr	r3, [pc, #664]	; (16cb4 <ssd1963_init+0x3b0>)
   16a1c:	4798      	blx	r3
   16a1e:	0002      	movs	r2, r0
   16a20:	2300      	movs	r3, #0
   16a22:	48a6      	ldr	r0, [pc, #664]	; (16cbc <ssd1963_init+0x3b8>)
   16a24:	2100      	movs	r1, #0
   16a26:	1880      	adds	r0, r0, r2
   16a28:	4159      	adcs	r1, r3
   16a2a:	4aa5      	ldr	r2, [pc, #660]	; (16cc0 <ssd1963_init+0x3bc>)
   16a2c:	2300      	movs	r3, #0
   16a2e:	4ea5      	ldr	r6, [pc, #660]	; (16cc4 <ssd1963_init+0x3c0>)
   16a30:	47b0      	blx	r6
   16a32:	4ba5      	ldr	r3, [pc, #660]	; (16cc8 <ssd1963_init+0x3c4>)
   16a34:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16a36:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
   16a38:	4b9d      	ldr	r3, [pc, #628]	; (16cb0 <ssd1963_init+0x3ac>)
   16a3a:	781b      	ldrb	r3, [r3, #0]
   16a3c:	2b00      	cmp	r3, #0
   16a3e:	d104      	bne.n	16a4a <ssd1963_init+0x146>
   16a40:	2220      	movs	r2, #32
   16a42:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
   16a44:	3a1f      	subs	r2, #31
   16a46:	4b9a      	ldr	r3, [pc, #616]	; (16cb0 <ssd1963_init+0x3ac>)
   16a48:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16a4a:	22e0      	movs	r2, #224	; 0xe0
   16a4c:	499f      	ldr	r1, [pc, #636]	; (16ccc <ssd1963_init+0x3c8>)
   16a4e:	48a0      	ldr	r0, [pc, #640]	; (16cd0 <ssd1963_init+0x3cc>)
   16a50:	4ba0      	ldr	r3, [pc, #640]	; (16cd4 <ssd1963_init+0x3d0>)
   16a52:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16a54:	4b95      	ldr	r3, [pc, #596]	; (16cac <ssd1963_init+0x3a8>)
   16a56:	2240      	movs	r2, #64	; 0x40
   16a58:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16a5a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16a5c:	4b94      	ldr	r3, [pc, #592]	; (16cb0 <ssd1963_init+0x3ac>)
   16a5e:	781b      	ldrb	r3, [r3, #0]
   16a60:	2b00      	cmp	r3, #0
   16a62:	d005      	beq.n	16a70 <ssd1963_init+0x16c>
		port_base->OUTSET.reg = pin_mask;
   16a64:	3a20      	subs	r2, #32
   16a66:	4b91      	ldr	r3, [pc, #580]	; (16cac <ssd1963_init+0x3a8>)
   16a68:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16a6a:	2200      	movs	r2, #0
   16a6c:	4b90      	ldr	r3, [pc, #576]	; (16cb0 <ssd1963_init+0x3ac>)
   16a6e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16a70:	2203      	movs	r2, #3
   16a72:	4996      	ldr	r1, [pc, #600]	; (16ccc <ssd1963_init+0x3c8>)
   16a74:	4896      	ldr	r0, [pc, #600]	; (16cd0 <ssd1963_init+0x3cc>)
   16a76:	4b97      	ldr	r3, [pc, #604]	; (16cd4 <ssd1963_init+0x3d0>)
   16a78:	4798      	blx	r3
   16a7a:	4c8c      	ldr	r4, [pc, #560]	; (16cac <ssd1963_init+0x3a8>)
   16a7c:	2540      	movs	r5, #64	; 0x40
   16a7e:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
   16a80:	2000      	movs	r0, #0
   16a82:	4b8c      	ldr	r3, [pc, #560]	; (16cb4 <ssd1963_init+0x3b0>)
   16a84:	4798      	blx	r3
   16a86:	0002      	movs	r2, r0
   16a88:	2300      	movs	r3, #0
   16a8a:	488c      	ldr	r0, [pc, #560]	; (16cbc <ssd1963_init+0x3b8>)
   16a8c:	2100      	movs	r1, #0
   16a8e:	1880      	adds	r0, r0, r2
   16a90:	4159      	adcs	r1, r3
   16a92:	4a8b      	ldr	r2, [pc, #556]	; (16cc0 <ssd1963_init+0x3bc>)
   16a94:	2300      	movs	r3, #0
   16a96:	4e8b      	ldr	r6, [pc, #556]	; (16cc4 <ssd1963_init+0x3c0>)
   16a98:	47b0      	blx	r6
   16a9a:	4b8b      	ldr	r3, [pc, #556]	; (16cc8 <ssd1963_init+0x3c4>)
   16a9c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16a9e:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
   16aa0:	4b83      	ldr	r3, [pc, #524]	; (16cb0 <ssd1963_init+0x3ac>)
   16aa2:	781b      	ldrb	r3, [r3, #0]
   16aa4:	2b00      	cmp	r3, #0
   16aa6:	d104      	bne.n	16ab2 <ssd1963_init+0x1ae>
   16aa8:	2220      	movs	r2, #32
   16aaa:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
   16aac:	3a1f      	subs	r2, #31
   16aae:	4b80      	ldr	r3, [pc, #512]	; (16cb0 <ssd1963_init+0x3ac>)
   16ab0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16ab2:	2201      	movs	r2, #1
   16ab4:	4985      	ldr	r1, [pc, #532]	; (16ccc <ssd1963_init+0x3c8>)
   16ab6:	4886      	ldr	r0, [pc, #536]	; (16cd0 <ssd1963_init+0x3cc>)
   16ab8:	4b86      	ldr	r3, [pc, #536]	; (16cd4 <ssd1963_init+0x3d0>)
   16aba:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16abc:	4c7b      	ldr	r4, [pc, #492]	; (16cac <ssd1963_init+0x3a8>)
   16abe:	2540      	movs	r5, #64	; 0x40
   16ac0:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
   16ac2:	2000      	movs	r0, #0
   16ac4:	4b7b      	ldr	r3, [pc, #492]	; (16cb4 <ssd1963_init+0x3b0>)
   16ac6:	4798      	blx	r3
   16ac8:	0002      	movs	r2, r0
   16aca:	2300      	movs	r3, #0
   16acc:	487b      	ldr	r0, [pc, #492]	; (16cbc <ssd1963_init+0x3b8>)
   16ace:	2100      	movs	r1, #0
   16ad0:	1880      	adds	r0, r0, r2
   16ad2:	4159      	adcs	r1, r3
   16ad4:	4a7a      	ldr	r2, [pc, #488]	; (16cc0 <ssd1963_init+0x3bc>)
   16ad6:	2300      	movs	r3, #0
   16ad8:	4e7a      	ldr	r6, [pc, #488]	; (16cc4 <ssd1963_init+0x3c0>)
   16ada:	47b0      	blx	r6
   16adc:	4b7a      	ldr	r3, [pc, #488]	; (16cc8 <ssd1963_init+0x3c4>)
   16ade:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16ae0:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
   16ae2:	4b73      	ldr	r3, [pc, #460]	; (16cb0 <ssd1963_init+0x3ac>)
   16ae4:	781b      	ldrb	r3, [r3, #0]
   16ae6:	2b00      	cmp	r3, #0
   16ae8:	d104      	bne.n	16af4 <ssd1963_init+0x1f0>
   16aea:	2220      	movs	r2, #32
   16aec:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
   16aee:	3a1f      	subs	r2, #31
   16af0:	4b6f      	ldr	r3, [pc, #444]	; (16cb0 <ssd1963_init+0x3ac>)
   16af2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16af4:	22e6      	movs	r2, #230	; 0xe6
   16af6:	4975      	ldr	r1, [pc, #468]	; (16ccc <ssd1963_init+0x3c8>)
   16af8:	4875      	ldr	r0, [pc, #468]	; (16cd0 <ssd1963_init+0x3cc>)
   16afa:	4b76      	ldr	r3, [pc, #472]	; (16cd4 <ssd1963_init+0x3d0>)
   16afc:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16afe:	4b6b      	ldr	r3, [pc, #428]	; (16cac <ssd1963_init+0x3a8>)
   16b00:	2240      	movs	r2, #64	; 0x40
   16b02:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16b04:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16b06:	4b6a      	ldr	r3, [pc, #424]	; (16cb0 <ssd1963_init+0x3ac>)
   16b08:	781b      	ldrb	r3, [r3, #0]
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	d005      	beq.n	16b1a <ssd1963_init+0x216>
		port_base->OUTSET.reg = pin_mask;
   16b0e:	3a20      	subs	r2, #32
   16b10:	4b66      	ldr	r3, [pc, #408]	; (16cac <ssd1963_init+0x3a8>)
   16b12:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16b14:	2200      	movs	r2, #0
   16b16:	4b66      	ldr	r3, [pc, #408]	; (16cb0 <ssd1963_init+0x3ac>)
   16b18:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16b1a:	2201      	movs	r2, #1
   16b1c:	496b      	ldr	r1, [pc, #428]	; (16ccc <ssd1963_init+0x3c8>)
   16b1e:	486c      	ldr	r0, [pc, #432]	; (16cd0 <ssd1963_init+0x3cc>)
   16b20:	4b6c      	ldr	r3, [pc, #432]	; (16cd4 <ssd1963_init+0x3d0>)
   16b22:	4798      	blx	r3
   16b24:	4b61      	ldr	r3, [pc, #388]	; (16cac <ssd1963_init+0x3a8>)
   16b26:	2240      	movs	r2, #64	; 0x40
   16b28:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16b2a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16b2c:	4b60      	ldr	r3, [pc, #384]	; (16cb0 <ssd1963_init+0x3ac>)
   16b2e:	781b      	ldrb	r3, [r3, #0]
   16b30:	2b00      	cmp	r3, #0
   16b32:	d005      	beq.n	16b40 <ssd1963_init+0x23c>
		port_base->OUTSET.reg = pin_mask;
   16b34:	3a20      	subs	r2, #32
   16b36:	4b5d      	ldr	r3, [pc, #372]	; (16cac <ssd1963_init+0x3a8>)
   16b38:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16b3a:	2200      	movs	r2, #0
   16b3c:	4b5c      	ldr	r3, [pc, #368]	; (16cb0 <ssd1963_init+0x3ac>)
   16b3e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16b40:	2233      	movs	r2, #51	; 0x33
   16b42:	4962      	ldr	r1, [pc, #392]	; (16ccc <ssd1963_init+0x3c8>)
   16b44:	4862      	ldr	r0, [pc, #392]	; (16cd0 <ssd1963_init+0x3cc>)
   16b46:	4b63      	ldr	r3, [pc, #396]	; (16cd4 <ssd1963_init+0x3d0>)
   16b48:	4798      	blx	r3
   16b4a:	4b58      	ldr	r3, [pc, #352]	; (16cac <ssd1963_init+0x3a8>)
   16b4c:	2240      	movs	r2, #64	; 0x40
   16b4e:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16b50:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16b52:	4b57      	ldr	r3, [pc, #348]	; (16cb0 <ssd1963_init+0x3ac>)
   16b54:	781b      	ldrb	r3, [r3, #0]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d005      	beq.n	16b66 <ssd1963_init+0x262>
		port_base->OUTSET.reg = pin_mask;
   16b5a:	3a20      	subs	r2, #32
   16b5c:	4b53      	ldr	r3, [pc, #332]	; (16cac <ssd1963_init+0x3a8>)
   16b5e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16b60:	2200      	movs	r2, #0
   16b62:	4b53      	ldr	r3, [pc, #332]	; (16cb0 <ssd1963_init+0x3ac>)
   16b64:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16b66:	2233      	movs	r2, #51	; 0x33
   16b68:	4958      	ldr	r1, [pc, #352]	; (16ccc <ssd1963_init+0x3c8>)
   16b6a:	4859      	ldr	r0, [pc, #356]	; (16cd0 <ssd1963_init+0x3cc>)
   16b6c:	4b59      	ldr	r3, [pc, #356]	; (16cd4 <ssd1963_init+0x3d0>)
   16b6e:	4798      	blx	r3
   16b70:	4b4e      	ldr	r3, [pc, #312]	; (16cac <ssd1963_init+0x3a8>)
   16b72:	2240      	movs	r2, #64	; 0x40
   16b74:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16b76:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   16b78:	4b4d      	ldr	r3, [pc, #308]	; (16cb0 <ssd1963_init+0x3ac>)
   16b7a:	781b      	ldrb	r3, [r3, #0]
   16b7c:	2b00      	cmp	r3, #0
   16b7e:	d105      	bne.n	16b8c <ssd1963_init+0x288>
   16b80:	3a20      	subs	r2, #32
   16b82:	4b4a      	ldr	r3, [pc, #296]	; (16cac <ssd1963_init+0x3a8>)
   16b84:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   16b86:	3a1f      	subs	r2, #31
   16b88:	4b49      	ldr	r3, [pc, #292]	; (16cb0 <ssd1963_init+0x3ac>)
   16b8a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16b8c:	22b0      	movs	r2, #176	; 0xb0
   16b8e:	494f      	ldr	r1, [pc, #316]	; (16ccc <ssd1963_init+0x3c8>)
   16b90:	484f      	ldr	r0, [pc, #316]	; (16cd0 <ssd1963_init+0x3cc>)
   16b92:	4b50      	ldr	r3, [pc, #320]	; (16cd4 <ssd1963_init+0x3d0>)
   16b94:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16b96:	4b45      	ldr	r3, [pc, #276]	; (16cac <ssd1963_init+0x3a8>)
   16b98:	2240      	movs	r2, #64	; 0x40
   16b9a:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16b9c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16b9e:	4b44      	ldr	r3, [pc, #272]	; (16cb0 <ssd1963_init+0x3ac>)
   16ba0:	781b      	ldrb	r3, [r3, #0]
   16ba2:	2b00      	cmp	r3, #0
   16ba4:	d005      	beq.n	16bb2 <ssd1963_init+0x2ae>
		port_base->OUTSET.reg = pin_mask;
   16ba6:	3a20      	subs	r2, #32
   16ba8:	4b40      	ldr	r3, [pc, #256]	; (16cac <ssd1963_init+0x3a8>)
   16baa:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16bac:	2200      	movs	r2, #0
   16bae:	4b40      	ldr	r3, [pc, #256]	; (16cb0 <ssd1963_init+0x3ac>)
   16bb0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16bb2:	2220      	movs	r2, #32
   16bb4:	4945      	ldr	r1, [pc, #276]	; (16ccc <ssd1963_init+0x3c8>)
   16bb6:	4846      	ldr	r0, [pc, #280]	; (16cd0 <ssd1963_init+0x3cc>)
   16bb8:	4b46      	ldr	r3, [pc, #280]	; (16cd4 <ssd1963_init+0x3d0>)
   16bba:	4798      	blx	r3
   16bbc:	4b3b      	ldr	r3, [pc, #236]	; (16cac <ssd1963_init+0x3a8>)
   16bbe:	2240      	movs	r2, #64	; 0x40
   16bc0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16bc2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16bc4:	4b3a      	ldr	r3, [pc, #232]	; (16cb0 <ssd1963_init+0x3ac>)
   16bc6:	781b      	ldrb	r3, [r3, #0]
   16bc8:	2b00      	cmp	r3, #0
   16bca:	d005      	beq.n	16bd8 <ssd1963_init+0x2d4>
		port_base->OUTSET.reg = pin_mask;
   16bcc:	3a20      	subs	r2, #32
   16bce:	4b37      	ldr	r3, [pc, #220]	; (16cac <ssd1963_init+0x3a8>)
   16bd0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16bd2:	2200      	movs	r2, #0
   16bd4:	4b36      	ldr	r3, [pc, #216]	; (16cb0 <ssd1963_init+0x3ac>)
   16bd6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16bd8:	2200      	movs	r2, #0
   16bda:	493c      	ldr	r1, [pc, #240]	; (16ccc <ssd1963_init+0x3c8>)
   16bdc:	483c      	ldr	r0, [pc, #240]	; (16cd0 <ssd1963_init+0x3cc>)
   16bde:	4b3d      	ldr	r3, [pc, #244]	; (16cd4 <ssd1963_init+0x3d0>)
   16be0:	4798      	blx	r3
   16be2:	4c32      	ldr	r4, [pc, #200]	; (16cac <ssd1963_init+0x3a8>)
   16be4:	2540      	movs	r5, #64	; 0x40
   16be6:	61a5      	str	r5, [r4, #24]
    ssd1963_data(((SSD1963_HOR_RES - 1) >> 8) & 0X00FF); //Set HDP
   16be8:	4b3b      	ldr	r3, [pc, #236]	; (16cd8 <ssd1963_init+0x3d4>)
   16bea:	4798      	blx	r3
   16bec:	4b3b      	ldr	r3, [pc, #236]	; (16cdc <ssd1963_init+0x3d8>)
   16bee:	4798      	blx	r3
   16bf0:	1e42      	subs	r2, r0, #1
   16bf2:	1212      	asrs	r2, r2, #8
		port_base->OUTCLR.reg = pin_mask;
   16bf4:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
   16bf6:	4b2e      	ldr	r3, [pc, #184]	; (16cb0 <ssd1963_init+0x3ac>)
   16bf8:	781b      	ldrb	r3, [r3, #0]
   16bfa:	2b00      	cmp	r3, #0
   16bfc:	d004      	beq.n	16c08 <ssd1963_init+0x304>
		port_base->OUTSET.reg = pin_mask;
   16bfe:	2120      	movs	r1, #32
   16c00:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
   16c02:	2100      	movs	r1, #0
   16c04:	4b2a      	ldr	r3, [pc, #168]	; (16cb0 <ssd1963_init+0x3ac>)
   16c06:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16c08:	20ff      	movs	r0, #255	; 0xff
   16c0a:	4002      	ands	r2, r0
   16c0c:	492f      	ldr	r1, [pc, #188]	; (16ccc <ssd1963_init+0x3c8>)
   16c0e:	4830      	ldr	r0, [pc, #192]	; (16cd0 <ssd1963_init+0x3cc>)
   16c10:	4b30      	ldr	r3, [pc, #192]	; (16cd4 <ssd1963_init+0x3d0>)
   16c12:	4798      	blx	r3
   16c14:	4c25      	ldr	r4, [pc, #148]	; (16cac <ssd1963_init+0x3a8>)
   16c16:	2540      	movs	r5, #64	; 0x40
   16c18:	61a5      	str	r5, [r4, #24]
    ssd1963_data((SSD1963_HOR_RES - 1) & 0X00FF);
   16c1a:	4b2f      	ldr	r3, [pc, #188]	; (16cd8 <ssd1963_init+0x3d4>)
   16c1c:	4798      	blx	r3
   16c1e:	4b2f      	ldr	r3, [pc, #188]	; (16cdc <ssd1963_init+0x3d8>)
   16c20:	4798      	blx	r3
   16c22:	3801      	subs	r0, #1
   16c24:	b2c2      	uxtb	r2, r0
		port_base->OUTCLR.reg = pin_mask;
   16c26:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
   16c28:	4b21      	ldr	r3, [pc, #132]	; (16cb0 <ssd1963_init+0x3ac>)
   16c2a:	781b      	ldrb	r3, [r3, #0]
   16c2c:	2b00      	cmp	r3, #0
   16c2e:	d004      	beq.n	16c3a <ssd1963_init+0x336>
		port_base->OUTSET.reg = pin_mask;
   16c30:	2120      	movs	r1, #32
   16c32:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
   16c34:	2100      	movs	r1, #0
   16c36:	4b1e      	ldr	r3, [pc, #120]	; (16cb0 <ssd1963_init+0x3ac>)
   16c38:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16c3a:	4924      	ldr	r1, [pc, #144]	; (16ccc <ssd1963_init+0x3c8>)
   16c3c:	4824      	ldr	r0, [pc, #144]	; (16cd0 <ssd1963_init+0x3cc>)
   16c3e:	4b25      	ldr	r3, [pc, #148]	; (16cd4 <ssd1963_init+0x3d0>)
   16c40:	4798      	blx	r3
   16c42:	4c1a      	ldr	r4, [pc, #104]	; (16cac <ssd1963_init+0x3a8>)
   16c44:	2540      	movs	r5, #64	; 0x40
   16c46:	61a5      	str	r5, [r4, #24]
    ssd1963_data(((SSD1963_VER_RES - 1) >> 8) & 0X00FF); //Set VDP
   16c48:	4b23      	ldr	r3, [pc, #140]	; (16cd8 <ssd1963_init+0x3d4>)
   16c4a:	4798      	blx	r3
   16c4c:	4b24      	ldr	r3, [pc, #144]	; (16ce0 <ssd1963_init+0x3dc>)
   16c4e:	4798      	blx	r3
   16c50:	1e42      	subs	r2, r0, #1
   16c52:	1212      	asrs	r2, r2, #8
		port_base->OUTCLR.reg = pin_mask;
   16c54:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
   16c56:	4b16      	ldr	r3, [pc, #88]	; (16cb0 <ssd1963_init+0x3ac>)
   16c58:	781b      	ldrb	r3, [r3, #0]
   16c5a:	2b00      	cmp	r3, #0
   16c5c:	d004      	beq.n	16c68 <ssd1963_init+0x364>
		port_base->OUTSET.reg = pin_mask;
   16c5e:	2120      	movs	r1, #32
   16c60:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
   16c62:	2100      	movs	r1, #0
   16c64:	4b12      	ldr	r3, [pc, #72]	; (16cb0 <ssd1963_init+0x3ac>)
   16c66:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16c68:	20ff      	movs	r0, #255	; 0xff
   16c6a:	4002      	ands	r2, r0
   16c6c:	4917      	ldr	r1, [pc, #92]	; (16ccc <ssd1963_init+0x3c8>)
   16c6e:	4818      	ldr	r0, [pc, #96]	; (16cd0 <ssd1963_init+0x3cc>)
   16c70:	4b18      	ldr	r3, [pc, #96]	; (16cd4 <ssd1963_init+0x3d0>)
   16c72:	4798      	blx	r3
   16c74:	4c0d      	ldr	r4, [pc, #52]	; (16cac <ssd1963_init+0x3a8>)
   16c76:	2540      	movs	r5, #64	; 0x40
   16c78:	61a5      	str	r5, [r4, #24]
    ssd1963_data((SSD1963_VER_RES - 1) & 0X00FF);
   16c7a:	4b17      	ldr	r3, [pc, #92]	; (16cd8 <ssd1963_init+0x3d4>)
   16c7c:	4798      	blx	r3
   16c7e:	4b18      	ldr	r3, [pc, #96]	; (16ce0 <ssd1963_init+0x3dc>)
   16c80:	4798      	blx	r3
   16c82:	3801      	subs	r0, #1
   16c84:	b2c2      	uxtb	r2, r0
		port_base->OUTCLR.reg = pin_mask;
   16c86:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
   16c88:	4b09      	ldr	r3, [pc, #36]	; (16cb0 <ssd1963_init+0x3ac>)
   16c8a:	781b      	ldrb	r3, [r3, #0]
   16c8c:	2b00      	cmp	r3, #0
   16c8e:	d004      	beq.n	16c9a <ssd1963_init+0x396>
		port_base->OUTSET.reg = pin_mask;
   16c90:	2120      	movs	r1, #32
   16c92:	61a1      	str	r1, [r4, #24]
        cmd_mode = false;
   16c94:	2100      	movs	r1, #0
   16c96:	4b06      	ldr	r3, [pc, #24]	; (16cb0 <ssd1963_init+0x3ac>)
   16c98:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16c9a:	490c      	ldr	r1, [pc, #48]	; (16ccc <ssd1963_init+0x3c8>)
   16c9c:	480c      	ldr	r0, [pc, #48]	; (16cd0 <ssd1963_init+0x3cc>)
   16c9e:	4b0d      	ldr	r3, [pc, #52]	; (16cd4 <ssd1963_init+0x3d0>)
   16ca0:	4798      	blx	r3
   16ca2:	4b02      	ldr	r3, [pc, #8]	; (16cac <ssd1963_init+0x3a8>)
   16ca4:	2240      	movs	r2, #64	; 0x40
   16ca6:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16ca8:	615a      	str	r2, [r3, #20]
   16caa:	e01b      	b.n	16ce4 <ssd1963_init+0x3e0>
   16cac:	41004400 	.word	0x41004400
   16cb0:	2000005c 	.word	0x2000005c
   16cb4:	00001065 	.word	0x00001065
   16cb8:	00017c8d 	.word	0x00017c8d
   16cbc:	00001b57 	.word	0x00001b57
   16cc0:	00001b58 	.word	0x00001b58
   16cc4:	00017c4d 	.word	0x00017c4d
   16cc8:	20000001 	.word	0x20000001
   16ccc:	1c03c3f7 	.word	0x1c03c3f7
   16cd0:	41004480 	.word	0x41004480
   16cd4:	000177ad 	.word	0x000177ad
   16cd8:	0000f5a1 	.word	0x0000f5a1
   16cdc:	0000f5ad 	.word	0x0000f5ad
   16ce0:	0000f5d5 	.word	0x0000f5d5
    if(cmd_mode != false) {
   16ce4:	4be5      	ldr	r3, [pc, #916]	; (1707c <ssd1963_init+0x778>)
   16ce6:	781b      	ldrb	r3, [r3, #0]
   16ce8:	2b00      	cmp	r3, #0
   16cea:	d005      	beq.n	16cf8 <ssd1963_init+0x3f4>
		port_base->OUTSET.reg = pin_mask;
   16cec:	3a20      	subs	r2, #32
   16cee:	4be4      	ldr	r3, [pc, #912]	; (17080 <ssd1963_init+0x77c>)
   16cf0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16cf2:	2200      	movs	r2, #0
   16cf4:	4be1      	ldr	r3, [pc, #900]	; (1707c <ssd1963_init+0x778>)
   16cf6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16cf8:	2200      	movs	r2, #0
   16cfa:	49e2      	ldr	r1, [pc, #904]	; (17084 <ssd1963_init+0x780>)
   16cfc:	48e2      	ldr	r0, [pc, #904]	; (17088 <ssd1963_init+0x784>)
   16cfe:	4be3      	ldr	r3, [pc, #908]	; (1708c <ssd1963_init+0x788>)
   16d00:	4798      	blx	r3
   16d02:	4cdf      	ldr	r4, [pc, #892]	; (17080 <ssd1963_init+0x77c>)
   16d04:	2540      	movs	r5, #64	; 0x40
   16d06:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);//Delay10us(5);
   16d08:	2000      	movs	r0, #0
   16d0a:	4be1      	ldr	r3, [pc, #900]	; (17090 <ssd1963_init+0x78c>)
   16d0c:	4798      	blx	r3
   16d0e:	0002      	movs	r2, r0
   16d10:	2300      	movs	r3, #0
   16d12:	48e0      	ldr	r0, [pc, #896]	; (17094 <ssd1963_init+0x790>)
   16d14:	2100      	movs	r1, #0
   16d16:	1880      	adds	r0, r0, r2
   16d18:	4159      	adcs	r1, r3
   16d1a:	4adf      	ldr	r2, [pc, #892]	; (17098 <ssd1963_init+0x794>)
   16d1c:	2300      	movs	r3, #0
   16d1e:	4edf      	ldr	r6, [pc, #892]	; (1709c <ssd1963_init+0x798>)
   16d20:	47b0      	blx	r6
   16d22:	4bdf      	ldr	r3, [pc, #892]	; (170a0 <ssd1963_init+0x79c>)
   16d24:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16d26:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
   16d28:	4bd4      	ldr	r3, [pc, #848]	; (1707c <ssd1963_init+0x778>)
   16d2a:	781b      	ldrb	r3, [r3, #0]
   16d2c:	2b00      	cmp	r3, #0
   16d2e:	d104      	bne.n	16d3a <ssd1963_init+0x436>
   16d30:	2220      	movs	r2, #32
   16d32:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
   16d34:	3a1f      	subs	r2, #31
   16d36:	4bd1      	ldr	r3, [pc, #836]	; (1707c <ssd1963_init+0x778>)
   16d38:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16d3a:	22b4      	movs	r2, #180	; 0xb4
   16d3c:	49d1      	ldr	r1, [pc, #836]	; (17084 <ssd1963_init+0x780>)
   16d3e:	48d2      	ldr	r0, [pc, #840]	; (17088 <ssd1963_init+0x784>)
   16d40:	4bd2      	ldr	r3, [pc, #840]	; (1708c <ssd1963_init+0x788>)
   16d42:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16d44:	4bce      	ldr	r3, [pc, #824]	; (17080 <ssd1963_init+0x77c>)
   16d46:	2240      	movs	r2, #64	; 0x40
   16d48:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16d4a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16d4c:	4bcb      	ldr	r3, [pc, #812]	; (1707c <ssd1963_init+0x778>)
   16d4e:	781b      	ldrb	r3, [r3, #0]
   16d50:	2b00      	cmp	r3, #0
   16d52:	d005      	beq.n	16d60 <ssd1963_init+0x45c>
		port_base->OUTSET.reg = pin_mask;
   16d54:	3a20      	subs	r2, #32
   16d56:	4bca      	ldr	r3, [pc, #808]	; (17080 <ssd1963_init+0x77c>)
   16d58:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16d5a:	2200      	movs	r2, #0
   16d5c:	4bc7      	ldr	r3, [pc, #796]	; (1707c <ssd1963_init+0x778>)
   16d5e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16d60:	2202      	movs	r2, #2
   16d62:	49c8      	ldr	r1, [pc, #800]	; (17084 <ssd1963_init+0x780>)
   16d64:	48c8      	ldr	r0, [pc, #800]	; (17088 <ssd1963_init+0x784>)
   16d66:	4bc9      	ldr	r3, [pc, #804]	; (1708c <ssd1963_init+0x788>)
   16d68:	4798      	blx	r3
   16d6a:	4bc5      	ldr	r3, [pc, #788]	; (17080 <ssd1963_init+0x77c>)
   16d6c:	2240      	movs	r2, #64	; 0x40
   16d6e:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16d70:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16d72:	4bc2      	ldr	r3, [pc, #776]	; (1707c <ssd1963_init+0x778>)
   16d74:	781b      	ldrb	r3, [r3, #0]
   16d76:	2b00      	cmp	r3, #0
   16d78:	d005      	beq.n	16d86 <ssd1963_init+0x482>
		port_base->OUTSET.reg = pin_mask;
   16d7a:	3a20      	subs	r2, #32
   16d7c:	4bc0      	ldr	r3, [pc, #768]	; (17080 <ssd1963_init+0x77c>)
   16d7e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16d80:	2200      	movs	r2, #0
   16d82:	4bbe      	ldr	r3, [pc, #760]	; (1707c <ssd1963_init+0x778>)
   16d84:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16d86:	220d      	movs	r2, #13
   16d88:	49be      	ldr	r1, [pc, #760]	; (17084 <ssd1963_init+0x780>)
   16d8a:	48bf      	ldr	r0, [pc, #764]	; (17088 <ssd1963_init+0x784>)
   16d8c:	4bbf      	ldr	r3, [pc, #764]	; (1708c <ssd1963_init+0x788>)
   16d8e:	4798      	blx	r3
   16d90:	4bbb      	ldr	r3, [pc, #748]	; (17080 <ssd1963_init+0x77c>)
   16d92:	2240      	movs	r2, #64	; 0x40
   16d94:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16d96:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16d98:	4bb8      	ldr	r3, [pc, #736]	; (1707c <ssd1963_init+0x778>)
   16d9a:	781b      	ldrb	r3, [r3, #0]
   16d9c:	2b00      	cmp	r3, #0
   16d9e:	d005      	beq.n	16dac <ssd1963_init+0x4a8>
		port_base->OUTSET.reg = pin_mask;
   16da0:	3a20      	subs	r2, #32
   16da2:	4bb7      	ldr	r3, [pc, #732]	; (17080 <ssd1963_init+0x77c>)
   16da4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16da6:	2200      	movs	r2, #0
   16da8:	4bb4      	ldr	r3, [pc, #720]	; (1707c <ssd1963_init+0x778>)
   16daa:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16dac:	2201      	movs	r2, #1
   16dae:	49b5      	ldr	r1, [pc, #724]	; (17084 <ssd1963_init+0x780>)
   16db0:	48b5      	ldr	r0, [pc, #724]	; (17088 <ssd1963_init+0x784>)
   16db2:	4bb6      	ldr	r3, [pc, #728]	; (1708c <ssd1963_init+0x788>)
   16db4:	4798      	blx	r3
   16db6:	4bb2      	ldr	r3, [pc, #712]	; (17080 <ssd1963_init+0x77c>)
   16db8:	2240      	movs	r2, #64	; 0x40
   16dba:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16dbc:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16dbe:	4baf      	ldr	r3, [pc, #700]	; (1707c <ssd1963_init+0x778>)
   16dc0:	781b      	ldrb	r3, [r3, #0]
   16dc2:	2b00      	cmp	r3, #0
   16dc4:	d005      	beq.n	16dd2 <ssd1963_init+0x4ce>
		port_base->OUTSET.reg = pin_mask;
   16dc6:	3a20      	subs	r2, #32
   16dc8:	4bad      	ldr	r3, [pc, #692]	; (17080 <ssd1963_init+0x77c>)
   16dca:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16dcc:	2200      	movs	r2, #0
   16dce:	4bab      	ldr	r3, [pc, #684]	; (1707c <ssd1963_init+0x778>)
   16dd0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16dd2:	22e0      	movs	r2, #224	; 0xe0
   16dd4:	49ab      	ldr	r1, [pc, #684]	; (17084 <ssd1963_init+0x780>)
   16dd6:	48ac      	ldr	r0, [pc, #688]	; (17088 <ssd1963_init+0x784>)
   16dd8:	4bac      	ldr	r3, [pc, #688]	; (1708c <ssd1963_init+0x788>)
   16dda:	4798      	blx	r3
   16ddc:	4ba8      	ldr	r3, [pc, #672]	; (17080 <ssd1963_init+0x77c>)
   16dde:	2240      	movs	r2, #64	; 0x40
   16de0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16de2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16de4:	4ba5      	ldr	r3, [pc, #660]	; (1707c <ssd1963_init+0x778>)
   16de6:	781b      	ldrb	r3, [r3, #0]
   16de8:	2b00      	cmp	r3, #0
   16dea:	d005      	beq.n	16df8 <ssd1963_init+0x4f4>
		port_base->OUTSET.reg = pin_mask;
   16dec:	3a20      	subs	r2, #32
   16dee:	4ba4      	ldr	r3, [pc, #656]	; (17080 <ssd1963_init+0x77c>)
   16df0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16df2:	2200      	movs	r2, #0
   16df4:	4ba1      	ldr	r3, [pc, #644]	; (1707c <ssd1963_init+0x778>)
   16df6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16df8:	2205      	movs	r2, #5
   16dfa:	49a2      	ldr	r1, [pc, #648]	; (17084 <ssd1963_init+0x780>)
   16dfc:	48a2      	ldr	r0, [pc, #648]	; (17088 <ssd1963_init+0x784>)
   16dfe:	4ba3      	ldr	r3, [pc, #652]	; (1708c <ssd1963_init+0x788>)
   16e00:	4798      	blx	r3
   16e02:	4b9f      	ldr	r3, [pc, #636]	; (17080 <ssd1963_init+0x77c>)
   16e04:	2240      	movs	r2, #64	; 0x40
   16e06:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16e08:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16e0a:	4b9c      	ldr	r3, [pc, #624]	; (1707c <ssd1963_init+0x778>)
   16e0c:	781b      	ldrb	r3, [r3, #0]
   16e0e:	2b00      	cmp	r3, #0
   16e10:	d005      	beq.n	16e1e <ssd1963_init+0x51a>
		port_base->OUTSET.reg = pin_mask;
   16e12:	3a20      	subs	r2, #32
   16e14:	4b9a      	ldr	r3, [pc, #616]	; (17080 <ssd1963_init+0x77c>)
   16e16:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16e18:	2200      	movs	r2, #0
   16e1a:	4b98      	ldr	r3, [pc, #608]	; (1707c <ssd1963_init+0x778>)
   16e1c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16e1e:	2200      	movs	r2, #0
   16e20:	4998      	ldr	r1, [pc, #608]	; (17084 <ssd1963_init+0x780>)
   16e22:	4899      	ldr	r0, [pc, #612]	; (17088 <ssd1963_init+0x784>)
   16e24:	4b99      	ldr	r3, [pc, #612]	; (1708c <ssd1963_init+0x788>)
   16e26:	4798      	blx	r3
   16e28:	4b95      	ldr	r3, [pc, #596]	; (17080 <ssd1963_init+0x77c>)
   16e2a:	2240      	movs	r2, #64	; 0x40
   16e2c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16e2e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16e30:	4b92      	ldr	r3, [pc, #584]	; (1707c <ssd1963_init+0x778>)
   16e32:	781b      	ldrb	r3, [r3, #0]
   16e34:	2b00      	cmp	r3, #0
   16e36:	d005      	beq.n	16e44 <ssd1963_init+0x540>
		port_base->OUTSET.reg = pin_mask;
   16e38:	3a20      	subs	r2, #32
   16e3a:	4b91      	ldr	r3, [pc, #580]	; (17080 <ssd1963_init+0x77c>)
   16e3c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16e3e:	2200      	movs	r2, #0
   16e40:	4b8e      	ldr	r3, [pc, #568]	; (1707c <ssd1963_init+0x778>)
   16e42:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16e44:	2228      	movs	r2, #40	; 0x28
   16e46:	498f      	ldr	r1, [pc, #572]	; (17084 <ssd1963_init+0x780>)
   16e48:	488f      	ldr	r0, [pc, #572]	; (17088 <ssd1963_init+0x784>)
   16e4a:	4b90      	ldr	r3, [pc, #576]	; (1708c <ssd1963_init+0x788>)
   16e4c:	4798      	blx	r3
   16e4e:	4b8c      	ldr	r3, [pc, #560]	; (17080 <ssd1963_init+0x77c>)
   16e50:	2240      	movs	r2, #64	; 0x40
   16e52:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16e54:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16e56:	4b89      	ldr	r3, [pc, #548]	; (1707c <ssd1963_init+0x778>)
   16e58:	781b      	ldrb	r3, [r3, #0]
   16e5a:	2b00      	cmp	r3, #0
   16e5c:	d005      	beq.n	16e6a <ssd1963_init+0x566>
		port_base->OUTSET.reg = pin_mask;
   16e5e:	3a20      	subs	r2, #32
   16e60:	4b87      	ldr	r3, [pc, #540]	; (17080 <ssd1963_init+0x77c>)
   16e62:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16e64:	2200      	movs	r2, #0
   16e66:	4b85      	ldr	r3, [pc, #532]	; (1707c <ssd1963_init+0x778>)
   16e68:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16e6a:	2200      	movs	r2, #0
   16e6c:	4985      	ldr	r1, [pc, #532]	; (17084 <ssd1963_init+0x780>)
   16e6e:	4886      	ldr	r0, [pc, #536]	; (17088 <ssd1963_init+0x784>)
   16e70:	4b86      	ldr	r3, [pc, #536]	; (1708c <ssd1963_init+0x788>)
   16e72:	4798      	blx	r3
   16e74:	4b82      	ldr	r3, [pc, #520]	; (17080 <ssd1963_init+0x77c>)
   16e76:	2240      	movs	r2, #64	; 0x40
   16e78:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16e7a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   16e7c:	4b7f      	ldr	r3, [pc, #508]	; (1707c <ssd1963_init+0x778>)
   16e7e:	781b      	ldrb	r3, [r3, #0]
   16e80:	2b00      	cmp	r3, #0
   16e82:	d105      	bne.n	16e90 <ssd1963_init+0x58c>
   16e84:	3a20      	subs	r2, #32
   16e86:	4b7e      	ldr	r3, [pc, #504]	; (17080 <ssd1963_init+0x77c>)
   16e88:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   16e8a:	3a1f      	subs	r2, #31
   16e8c:	4b7b      	ldr	r3, [pc, #492]	; (1707c <ssd1963_init+0x778>)
   16e8e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16e90:	22b6      	movs	r2, #182	; 0xb6
   16e92:	497c      	ldr	r1, [pc, #496]	; (17084 <ssd1963_init+0x780>)
   16e94:	487c      	ldr	r0, [pc, #496]	; (17088 <ssd1963_init+0x784>)
   16e96:	4b7d      	ldr	r3, [pc, #500]	; (1708c <ssd1963_init+0x788>)
   16e98:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16e9a:	4b79      	ldr	r3, [pc, #484]	; (17080 <ssd1963_init+0x77c>)
   16e9c:	2240      	movs	r2, #64	; 0x40
   16e9e:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16ea0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16ea2:	4b76      	ldr	r3, [pc, #472]	; (1707c <ssd1963_init+0x778>)
   16ea4:	781b      	ldrb	r3, [r3, #0]
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	d005      	beq.n	16eb6 <ssd1963_init+0x5b2>
		port_base->OUTSET.reg = pin_mask;
   16eaa:	3a20      	subs	r2, #32
   16eac:	4b74      	ldr	r3, [pc, #464]	; (17080 <ssd1963_init+0x77c>)
   16eae:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16eb0:	2200      	movs	r2, #0
   16eb2:	4b72      	ldr	r3, [pc, #456]	; (1707c <ssd1963_init+0x778>)
   16eb4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16eb6:	2201      	movs	r2, #1
   16eb8:	4972      	ldr	r1, [pc, #456]	; (17084 <ssd1963_init+0x780>)
   16eba:	4873      	ldr	r0, [pc, #460]	; (17088 <ssd1963_init+0x784>)
   16ebc:	4b73      	ldr	r3, [pc, #460]	; (1708c <ssd1963_init+0x788>)
   16ebe:	4798      	blx	r3
   16ec0:	4b6f      	ldr	r3, [pc, #444]	; (17080 <ssd1963_init+0x77c>)
   16ec2:	2240      	movs	r2, #64	; 0x40
   16ec4:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16ec6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16ec8:	4b6c      	ldr	r3, [pc, #432]	; (1707c <ssd1963_init+0x778>)
   16eca:	781b      	ldrb	r3, [r3, #0]
   16ecc:	2b00      	cmp	r3, #0
   16ece:	d005      	beq.n	16edc <ssd1963_init+0x5d8>
		port_base->OUTSET.reg = pin_mask;
   16ed0:	3a20      	subs	r2, #32
   16ed2:	4b6b      	ldr	r3, [pc, #428]	; (17080 <ssd1963_init+0x77c>)
   16ed4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16ed6:	2200      	movs	r2, #0
   16ed8:	4b68      	ldr	r3, [pc, #416]	; (1707c <ssd1963_init+0x778>)
   16eda:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16edc:	2220      	movs	r2, #32
   16ede:	4969      	ldr	r1, [pc, #420]	; (17084 <ssd1963_init+0x780>)
   16ee0:	4869      	ldr	r0, [pc, #420]	; (17088 <ssd1963_init+0x784>)
   16ee2:	4b6a      	ldr	r3, [pc, #424]	; (1708c <ssd1963_init+0x788>)
   16ee4:	4798      	blx	r3
   16ee6:	4b66      	ldr	r3, [pc, #408]	; (17080 <ssd1963_init+0x77c>)
   16ee8:	2240      	movs	r2, #64	; 0x40
   16eea:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16eec:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16eee:	4b63      	ldr	r3, [pc, #396]	; (1707c <ssd1963_init+0x778>)
   16ef0:	781b      	ldrb	r3, [r3, #0]
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	d005      	beq.n	16f02 <ssd1963_init+0x5fe>
		port_base->OUTSET.reg = pin_mask;
   16ef6:	3a20      	subs	r2, #32
   16ef8:	4b61      	ldr	r3, [pc, #388]	; (17080 <ssd1963_init+0x77c>)
   16efa:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16efc:	2200      	movs	r2, #0
   16efe:	4b5f      	ldr	r3, [pc, #380]	; (1707c <ssd1963_init+0x778>)
   16f00:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16f02:	2201      	movs	r2, #1
   16f04:	495f      	ldr	r1, [pc, #380]	; (17084 <ssd1963_init+0x780>)
   16f06:	4860      	ldr	r0, [pc, #384]	; (17088 <ssd1963_init+0x784>)
   16f08:	4b60      	ldr	r3, [pc, #384]	; (1708c <ssd1963_init+0x788>)
   16f0a:	4798      	blx	r3
   16f0c:	4b5c      	ldr	r3, [pc, #368]	; (17080 <ssd1963_init+0x77c>)
   16f0e:	2240      	movs	r2, #64	; 0x40
   16f10:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16f12:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16f14:	4b59      	ldr	r3, [pc, #356]	; (1707c <ssd1963_init+0x778>)
   16f16:	781b      	ldrb	r3, [r3, #0]
   16f18:	2b00      	cmp	r3, #0
   16f1a:	d005      	beq.n	16f28 <ssd1963_init+0x624>
		port_base->OUTSET.reg = pin_mask;
   16f1c:	3a20      	subs	r2, #32
   16f1e:	4b58      	ldr	r3, [pc, #352]	; (17080 <ssd1963_init+0x77c>)
   16f20:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16f22:	2200      	movs	r2, #0
   16f24:	4b55      	ldr	r3, [pc, #340]	; (1707c <ssd1963_init+0x778>)
   16f26:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16f28:	2210      	movs	r2, #16
   16f2a:	4956      	ldr	r1, [pc, #344]	; (17084 <ssd1963_init+0x780>)
   16f2c:	4856      	ldr	r0, [pc, #344]	; (17088 <ssd1963_init+0x784>)
   16f2e:	4b57      	ldr	r3, [pc, #348]	; (1708c <ssd1963_init+0x788>)
   16f30:	4798      	blx	r3
   16f32:	4b53      	ldr	r3, [pc, #332]	; (17080 <ssd1963_init+0x77c>)
   16f34:	2240      	movs	r2, #64	; 0x40
   16f36:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16f38:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16f3a:	4b50      	ldr	r3, [pc, #320]	; (1707c <ssd1963_init+0x778>)
   16f3c:	781b      	ldrb	r3, [r3, #0]
   16f3e:	2b00      	cmp	r3, #0
   16f40:	d005      	beq.n	16f4e <ssd1963_init+0x64a>
		port_base->OUTSET.reg = pin_mask;
   16f42:	3a20      	subs	r2, #32
   16f44:	4b4e      	ldr	r3, [pc, #312]	; (17080 <ssd1963_init+0x77c>)
   16f46:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16f48:	2200      	movs	r2, #0
   16f4a:	4b4c      	ldr	r3, [pc, #304]	; (1707c <ssd1963_init+0x778>)
   16f4c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16f4e:	2208      	movs	r2, #8
   16f50:	494c      	ldr	r1, [pc, #304]	; (17084 <ssd1963_init+0x780>)
   16f52:	484d      	ldr	r0, [pc, #308]	; (17088 <ssd1963_init+0x784>)
   16f54:	4b4d      	ldr	r3, [pc, #308]	; (1708c <ssd1963_init+0x788>)
   16f56:	4798      	blx	r3
   16f58:	4b49      	ldr	r3, [pc, #292]	; (17080 <ssd1963_init+0x77c>)
   16f5a:	2240      	movs	r2, #64	; 0x40
   16f5c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16f5e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16f60:	4b46      	ldr	r3, [pc, #280]	; (1707c <ssd1963_init+0x778>)
   16f62:	781b      	ldrb	r3, [r3, #0]
   16f64:	2b00      	cmp	r3, #0
   16f66:	d005      	beq.n	16f74 <ssd1963_init+0x670>
		port_base->OUTSET.reg = pin_mask;
   16f68:	3a20      	subs	r2, #32
   16f6a:	4b45      	ldr	r3, [pc, #276]	; (17080 <ssd1963_init+0x77c>)
   16f6c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16f6e:	2200      	movs	r2, #0
   16f70:	4b42      	ldr	r3, [pc, #264]	; (1707c <ssd1963_init+0x778>)
   16f72:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16f74:	2200      	movs	r2, #0
   16f76:	4943      	ldr	r1, [pc, #268]	; (17084 <ssd1963_init+0x780>)
   16f78:	4843      	ldr	r0, [pc, #268]	; (17088 <ssd1963_init+0x784>)
   16f7a:	4b44      	ldr	r3, [pc, #272]	; (1708c <ssd1963_init+0x788>)
   16f7c:	4798      	blx	r3
   16f7e:	4b40      	ldr	r3, [pc, #256]	; (17080 <ssd1963_init+0x77c>)
   16f80:	2240      	movs	r2, #64	; 0x40
   16f82:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16f84:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16f86:	4b3d      	ldr	r3, [pc, #244]	; (1707c <ssd1963_init+0x778>)
   16f88:	781b      	ldrb	r3, [r3, #0]
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	d005      	beq.n	16f9a <ssd1963_init+0x696>
		port_base->OUTSET.reg = pin_mask;
   16f8e:	3a20      	subs	r2, #32
   16f90:	4b3b      	ldr	r3, [pc, #236]	; (17080 <ssd1963_init+0x77c>)
   16f92:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16f94:	2200      	movs	r2, #0
   16f96:	4b39      	ldr	r3, [pc, #228]	; (1707c <ssd1963_init+0x778>)
   16f98:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16f9a:	2208      	movs	r2, #8
   16f9c:	4939      	ldr	r1, [pc, #228]	; (17084 <ssd1963_init+0x780>)
   16f9e:	483a      	ldr	r0, [pc, #232]	; (17088 <ssd1963_init+0x784>)
   16fa0:	4b3a      	ldr	r3, [pc, #232]	; (1708c <ssd1963_init+0x788>)
   16fa2:	4798      	blx	r3
   16fa4:	4b36      	ldr	r3, [pc, #216]	; (17080 <ssd1963_init+0x77c>)
   16fa6:	2240      	movs	r2, #64	; 0x40
   16fa8:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16faa:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   16fac:	4b33      	ldr	r3, [pc, #204]	; (1707c <ssd1963_init+0x778>)
   16fae:	781b      	ldrb	r3, [r3, #0]
   16fb0:	2b00      	cmp	r3, #0
   16fb2:	d105      	bne.n	16fc0 <ssd1963_init+0x6bc>
   16fb4:	3a20      	subs	r2, #32
   16fb6:	4b32      	ldr	r3, [pc, #200]	; (17080 <ssd1963_init+0x77c>)
   16fb8:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   16fba:	3a1f      	subs	r2, #31
   16fbc:	4b2f      	ldr	r3, [pc, #188]	; (1707c <ssd1963_init+0x778>)
   16fbe:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   16fc0:	22b8      	movs	r2, #184	; 0xb8
   16fc2:	4930      	ldr	r1, [pc, #192]	; (17084 <ssd1963_init+0x780>)
   16fc4:	4830      	ldr	r0, [pc, #192]	; (17088 <ssd1963_init+0x784>)
   16fc6:	4b31      	ldr	r3, [pc, #196]	; (1708c <ssd1963_init+0x788>)
   16fc8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   16fca:	4b2d      	ldr	r3, [pc, #180]	; (17080 <ssd1963_init+0x77c>)
   16fcc:	2240      	movs	r2, #64	; 0x40
   16fce:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16fd0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16fd2:	4b2a      	ldr	r3, [pc, #168]	; (1707c <ssd1963_init+0x778>)
   16fd4:	781b      	ldrb	r3, [r3, #0]
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d005      	beq.n	16fe6 <ssd1963_init+0x6e2>
		port_base->OUTSET.reg = pin_mask;
   16fda:	3a20      	subs	r2, #32
   16fdc:	4b28      	ldr	r3, [pc, #160]	; (17080 <ssd1963_init+0x77c>)
   16fde:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   16fe0:	2200      	movs	r2, #0
   16fe2:	4b26      	ldr	r3, [pc, #152]	; (1707c <ssd1963_init+0x778>)
   16fe4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   16fe6:	220f      	movs	r2, #15
   16fe8:	4926      	ldr	r1, [pc, #152]	; (17084 <ssd1963_init+0x780>)
   16fea:	4827      	ldr	r0, [pc, #156]	; (17088 <ssd1963_init+0x784>)
   16fec:	4b27      	ldr	r3, [pc, #156]	; (1708c <ssd1963_init+0x788>)
   16fee:	4798      	blx	r3
   16ff0:	4b23      	ldr	r3, [pc, #140]	; (17080 <ssd1963_init+0x77c>)
   16ff2:	2240      	movs	r2, #64	; 0x40
   16ff4:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   16ff6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   16ff8:	4b20      	ldr	r3, [pc, #128]	; (1707c <ssd1963_init+0x778>)
   16ffa:	781b      	ldrb	r3, [r3, #0]
   16ffc:	2b00      	cmp	r3, #0
   16ffe:	d005      	beq.n	1700c <ssd1963_init+0x708>
		port_base->OUTSET.reg = pin_mask;
   17000:	3a20      	subs	r2, #32
   17002:	4b1f      	ldr	r3, [pc, #124]	; (17080 <ssd1963_init+0x77c>)
   17004:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17006:	2200      	movs	r2, #0
   17008:	4b1c      	ldr	r3, [pc, #112]	; (1707c <ssd1963_init+0x778>)
   1700a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   1700c:	2201      	movs	r2, #1
   1700e:	491d      	ldr	r1, [pc, #116]	; (17084 <ssd1963_init+0x780>)
   17010:	481d      	ldr	r0, [pc, #116]	; (17088 <ssd1963_init+0x784>)
   17012:	4b1e      	ldr	r3, [pc, #120]	; (1708c <ssd1963_init+0x788>)
   17014:	4798      	blx	r3
   17016:	4b1a      	ldr	r3, [pc, #104]	; (17080 <ssd1963_init+0x77c>)
   17018:	2240      	movs	r2, #64	; 0x40
   1701a:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1701c:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   1701e:	4b17      	ldr	r3, [pc, #92]	; (1707c <ssd1963_init+0x778>)
   17020:	781b      	ldrb	r3, [r3, #0]
   17022:	2b00      	cmp	r3, #0
   17024:	d105      	bne.n	17032 <ssd1963_init+0x72e>
   17026:	3a20      	subs	r2, #32
   17028:	4b15      	ldr	r3, [pc, #84]	; (17080 <ssd1963_init+0x77c>)
   1702a:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   1702c:	3a1f      	subs	r2, #31
   1702e:	4b13      	ldr	r3, [pc, #76]	; (1707c <ssd1963_init+0x778>)
   17030:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   17032:	22ba      	movs	r2, #186	; 0xba
   17034:	4913      	ldr	r1, [pc, #76]	; (17084 <ssd1963_init+0x780>)
   17036:	4814      	ldr	r0, [pc, #80]	; (17088 <ssd1963_init+0x784>)
   17038:	4b14      	ldr	r3, [pc, #80]	; (1708c <ssd1963_init+0x788>)
   1703a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   1703c:	4b10      	ldr	r3, [pc, #64]	; (17080 <ssd1963_init+0x77c>)
   1703e:	2240      	movs	r2, #64	; 0x40
   17040:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17042:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17044:	4b0d      	ldr	r3, [pc, #52]	; (1707c <ssd1963_init+0x778>)
   17046:	781b      	ldrb	r3, [r3, #0]
   17048:	2b00      	cmp	r3, #0
   1704a:	d005      	beq.n	17058 <ssd1963_init+0x754>
		port_base->OUTSET.reg = pin_mask;
   1704c:	3a20      	subs	r2, #32
   1704e:	4b0c      	ldr	r3, [pc, #48]	; (17080 <ssd1963_init+0x77c>)
   17050:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17052:	2200      	movs	r2, #0
   17054:	4b09      	ldr	r3, [pc, #36]	; (1707c <ssd1963_init+0x778>)
   17056:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17058:	2201      	movs	r2, #1
   1705a:	490a      	ldr	r1, [pc, #40]	; (17084 <ssd1963_init+0x780>)
   1705c:	480a      	ldr	r0, [pc, #40]	; (17088 <ssd1963_init+0x784>)
   1705e:	4b0b      	ldr	r3, [pc, #44]	; (1708c <ssd1963_init+0x788>)
   17060:	4798      	blx	r3
   17062:	4b07      	ldr	r3, [pc, #28]	; (17080 <ssd1963_init+0x77c>)
   17064:	2240      	movs	r2, #64	; 0x40
   17066:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17068:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   1706a:	4b04      	ldr	r3, [pc, #16]	; (1707c <ssd1963_init+0x778>)
   1706c:	781b      	ldrb	r3, [r3, #0]
   1706e:	2b00      	cmp	r3, #0
   17070:	d11a      	bne.n	170a8 <ssd1963_init+0x7a4>
   17072:	3a20      	subs	r2, #32
   17074:	4b02      	ldr	r3, [pc, #8]	; (17080 <ssd1963_init+0x77c>)
   17076:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   17078:	3a1f      	subs	r2, #31
   1707a:	e013      	b.n	170a4 <ssd1963_init+0x7a0>
   1707c:	2000005c 	.word	0x2000005c
   17080:	41004400 	.word	0x41004400
   17084:	1c03c3f7 	.word	0x1c03c3f7
   17088:	41004480 	.word	0x41004480
   1708c:	000177ad 	.word	0x000177ad
   17090:	00001065 	.word	0x00001065
   17094:	00001b57 	.word	0x00001b57
   17098:	00001b58 	.word	0x00001b58
   1709c:	00017c4d 	.word	0x00017c4d
   170a0:	20000001 	.word	0x20000001
   170a4:	4bd4      	ldr	r3, [pc, #848]	; (173f8 <ssd1963_init+0xaf4>)
   170a6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   170a8:	2236      	movs	r2, #54	; 0x36
   170aa:	49d4      	ldr	r1, [pc, #848]	; (173fc <ssd1963_init+0xaf8>)
   170ac:	48d4      	ldr	r0, [pc, #848]	; (17400 <ssd1963_init+0xafc>)
   170ae:	4bd5      	ldr	r3, [pc, #852]	; (17404 <ssd1963_init+0xb00>)
   170b0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   170b2:	4bd5      	ldr	r3, [pc, #852]	; (17408 <ssd1963_init+0xb04>)
   170b4:	2240      	movs	r2, #64	; 0x40
   170b6:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   170b8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   170ba:	4bcf      	ldr	r3, [pc, #828]	; (173f8 <ssd1963_init+0xaf4>)
   170bc:	781b      	ldrb	r3, [r3, #0]
   170be:	2b00      	cmp	r3, #0
   170c0:	d005      	beq.n	170ce <ssd1963_init+0x7ca>
		port_base->OUTSET.reg = pin_mask;
   170c2:	3a20      	subs	r2, #32
   170c4:	4bd0      	ldr	r3, [pc, #832]	; (17408 <ssd1963_init+0xb04>)
   170c6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   170c8:	2200      	movs	r2, #0
   170ca:	4bcb      	ldr	r3, [pc, #812]	; (173f8 <ssd1963_init+0xaf4>)
   170cc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   170ce:	2208      	movs	r2, #8
   170d0:	49ca      	ldr	r1, [pc, #808]	; (173fc <ssd1963_init+0xaf8>)
   170d2:	48cb      	ldr	r0, [pc, #812]	; (17400 <ssd1963_init+0xafc>)
   170d4:	4bcb      	ldr	r3, [pc, #812]	; (17404 <ssd1963_init+0xb00>)
   170d6:	4798      	blx	r3
   170d8:	4bcb      	ldr	r3, [pc, #812]	; (17408 <ssd1963_init+0xb04>)
   170da:	2240      	movs	r2, #64	; 0x40
   170dc:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   170de:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   170e0:	4bc5      	ldr	r3, [pc, #788]	; (173f8 <ssd1963_init+0xaf4>)
   170e2:	781b      	ldrb	r3, [r3, #0]
   170e4:	2b00      	cmp	r3, #0
   170e6:	d105      	bne.n	170f4 <ssd1963_init+0x7f0>
   170e8:	3a20      	subs	r2, #32
   170ea:	4bc7      	ldr	r3, [pc, #796]	; (17408 <ssd1963_init+0xb04>)
   170ec:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   170ee:	3a1f      	subs	r2, #31
   170f0:	4bc1      	ldr	r3, [pc, #772]	; (173f8 <ssd1963_init+0xaf4>)
   170f2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   170f4:	223a      	movs	r2, #58	; 0x3a
   170f6:	49c1      	ldr	r1, [pc, #772]	; (173fc <ssd1963_init+0xaf8>)
   170f8:	48c1      	ldr	r0, [pc, #772]	; (17400 <ssd1963_init+0xafc>)
   170fa:	4bc2      	ldr	r3, [pc, #776]	; (17404 <ssd1963_init+0xb00>)
   170fc:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   170fe:	4bc2      	ldr	r3, [pc, #776]	; (17408 <ssd1963_init+0xb04>)
   17100:	2240      	movs	r2, #64	; 0x40
   17102:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17104:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17106:	4bbc      	ldr	r3, [pc, #752]	; (173f8 <ssd1963_init+0xaf4>)
   17108:	781b      	ldrb	r3, [r3, #0]
   1710a:	2b00      	cmp	r3, #0
   1710c:	d005      	beq.n	1711a <ssd1963_init+0x816>
		port_base->OUTSET.reg = pin_mask;
   1710e:	3a20      	subs	r2, #32
   17110:	4bbd      	ldr	r3, [pc, #756]	; (17408 <ssd1963_init+0xb04>)
   17112:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17114:	2200      	movs	r2, #0
   17116:	4bb8      	ldr	r3, [pc, #736]	; (173f8 <ssd1963_init+0xaf4>)
   17118:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   1711a:	2250      	movs	r2, #80	; 0x50
   1711c:	49b7      	ldr	r1, [pc, #732]	; (173fc <ssd1963_init+0xaf8>)
   1711e:	48b8      	ldr	r0, [pc, #736]	; (17400 <ssd1963_init+0xafc>)
   17120:	4bb8      	ldr	r3, [pc, #736]	; (17404 <ssd1963_init+0xb00>)
   17122:	4798      	blx	r3
   17124:	4bb8      	ldr	r3, [pc, #736]	; (17408 <ssd1963_init+0xb04>)
   17126:	2240      	movs	r2, #64	; 0x40
   17128:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1712a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   1712c:	4bb2      	ldr	r3, [pc, #712]	; (173f8 <ssd1963_init+0xaf4>)
   1712e:	781b      	ldrb	r3, [r3, #0]
   17130:	2b00      	cmp	r3, #0
   17132:	d105      	bne.n	17140 <ssd1963_init+0x83c>
   17134:	3a20      	subs	r2, #32
   17136:	4bb4      	ldr	r3, [pc, #720]	; (17408 <ssd1963_init+0xb04>)
   17138:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   1713a:	3a1f      	subs	r2, #31
   1713c:	4bae      	ldr	r3, [pc, #696]	; (173f8 <ssd1963_init+0xaf4>)
   1713e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   17140:	22f0      	movs	r2, #240	; 0xf0
   17142:	49ae      	ldr	r1, [pc, #696]	; (173fc <ssd1963_init+0xaf8>)
   17144:	48ae      	ldr	r0, [pc, #696]	; (17400 <ssd1963_init+0xafc>)
   17146:	4baf      	ldr	r3, [pc, #700]	; (17404 <ssd1963_init+0xb00>)
   17148:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   1714a:	4baf      	ldr	r3, [pc, #700]	; (17408 <ssd1963_init+0xb04>)
   1714c:	2240      	movs	r2, #64	; 0x40
   1714e:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17150:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17152:	4ba9      	ldr	r3, [pc, #676]	; (173f8 <ssd1963_init+0xaf4>)
   17154:	781b      	ldrb	r3, [r3, #0]
   17156:	2b00      	cmp	r3, #0
   17158:	d005      	beq.n	17166 <ssd1963_init+0x862>
		port_base->OUTSET.reg = pin_mask;
   1715a:	3a20      	subs	r2, #32
   1715c:	4baa      	ldr	r3, [pc, #680]	; (17408 <ssd1963_init+0xb04>)
   1715e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17160:	2200      	movs	r2, #0
   17162:	4ba5      	ldr	r3, [pc, #660]	; (173f8 <ssd1963_init+0xaf4>)
   17164:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17166:	2203      	movs	r2, #3
   17168:	49a4      	ldr	r1, [pc, #656]	; (173fc <ssd1963_init+0xaf8>)
   1716a:	48a5      	ldr	r0, [pc, #660]	; (17400 <ssd1963_init+0xafc>)
   1716c:	4ba5      	ldr	r3, [pc, #660]	; (17404 <ssd1963_init+0xb00>)
   1716e:	4798      	blx	r3
   17170:	4ba5      	ldr	r3, [pc, #660]	; (17408 <ssd1963_init+0xb04>)
   17172:	2240      	movs	r2, #64	; 0x40
   17174:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17176:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   17178:	4b9f      	ldr	r3, [pc, #636]	; (173f8 <ssd1963_init+0xaf4>)
   1717a:	781b      	ldrb	r3, [r3, #0]
   1717c:	2b00      	cmp	r3, #0
   1717e:	d105      	bne.n	1718c <ssd1963_init+0x888>
   17180:	3a20      	subs	r2, #32
   17182:	4ba1      	ldr	r3, [pc, #644]	; (17408 <ssd1963_init+0xb04>)
   17184:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   17186:	3a1f      	subs	r2, #31
   17188:	4b9b      	ldr	r3, [pc, #620]	; (173f8 <ssd1963_init+0xaf4>)
   1718a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   1718c:	22bc      	movs	r2, #188	; 0xbc
   1718e:	499b      	ldr	r1, [pc, #620]	; (173fc <ssd1963_init+0xaf8>)
   17190:	489b      	ldr	r0, [pc, #620]	; (17400 <ssd1963_init+0xafc>)
   17192:	4b9c      	ldr	r3, [pc, #624]	; (17404 <ssd1963_init+0xb00>)
   17194:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   17196:	4b9c      	ldr	r3, [pc, #624]	; (17408 <ssd1963_init+0xb04>)
   17198:	2240      	movs	r2, #64	; 0x40
   1719a:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1719c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   1719e:	4b96      	ldr	r3, [pc, #600]	; (173f8 <ssd1963_init+0xaf4>)
   171a0:	781b      	ldrb	r3, [r3, #0]
   171a2:	2b00      	cmp	r3, #0
   171a4:	d005      	beq.n	171b2 <ssd1963_init+0x8ae>
		port_base->OUTSET.reg = pin_mask;
   171a6:	3a20      	subs	r2, #32
   171a8:	4b97      	ldr	r3, [pc, #604]	; (17408 <ssd1963_init+0xb04>)
   171aa:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   171ac:	2200      	movs	r2, #0
   171ae:	4b92      	ldr	r3, [pc, #584]	; (173f8 <ssd1963_init+0xaf4>)
   171b0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   171b2:	2240      	movs	r2, #64	; 0x40
   171b4:	4991      	ldr	r1, [pc, #580]	; (173fc <ssd1963_init+0xaf8>)
   171b6:	4892      	ldr	r0, [pc, #584]	; (17400 <ssd1963_init+0xafc>)
   171b8:	4b92      	ldr	r3, [pc, #584]	; (17404 <ssd1963_init+0xb00>)
   171ba:	4798      	blx	r3
   171bc:	4b92      	ldr	r3, [pc, #584]	; (17408 <ssd1963_init+0xb04>)
   171be:	2240      	movs	r2, #64	; 0x40
   171c0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   171c2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   171c4:	4b8c      	ldr	r3, [pc, #560]	; (173f8 <ssd1963_init+0xaf4>)
   171c6:	781b      	ldrb	r3, [r3, #0]
   171c8:	2b00      	cmp	r3, #0
   171ca:	d005      	beq.n	171d8 <ssd1963_init+0x8d4>
		port_base->OUTSET.reg = pin_mask;
   171cc:	3a20      	subs	r2, #32
   171ce:	4b8e      	ldr	r3, [pc, #568]	; (17408 <ssd1963_init+0xb04>)
   171d0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   171d2:	2200      	movs	r2, #0
   171d4:	4b88      	ldr	r3, [pc, #544]	; (173f8 <ssd1963_init+0xaf4>)
   171d6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   171d8:	2280      	movs	r2, #128	; 0x80
   171da:	4988      	ldr	r1, [pc, #544]	; (173fc <ssd1963_init+0xaf8>)
   171dc:	4888      	ldr	r0, [pc, #544]	; (17400 <ssd1963_init+0xafc>)
   171de:	4b89      	ldr	r3, [pc, #548]	; (17404 <ssd1963_init+0xb00>)
   171e0:	4798      	blx	r3
   171e2:	4b89      	ldr	r3, [pc, #548]	; (17408 <ssd1963_init+0xb04>)
   171e4:	2240      	movs	r2, #64	; 0x40
   171e6:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   171e8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   171ea:	4b83      	ldr	r3, [pc, #524]	; (173f8 <ssd1963_init+0xaf4>)
   171ec:	781b      	ldrb	r3, [r3, #0]
   171ee:	2b00      	cmp	r3, #0
   171f0:	d005      	beq.n	171fe <ssd1963_init+0x8fa>
		port_base->OUTSET.reg = pin_mask;
   171f2:	3a20      	subs	r2, #32
   171f4:	4b84      	ldr	r3, [pc, #528]	; (17408 <ssd1963_init+0xb04>)
   171f6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   171f8:	2200      	movs	r2, #0
   171fa:	4b7f      	ldr	r3, [pc, #508]	; (173f8 <ssd1963_init+0xaf4>)
   171fc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   171fe:	2240      	movs	r2, #64	; 0x40
   17200:	497e      	ldr	r1, [pc, #504]	; (173fc <ssd1963_init+0xaf8>)
   17202:	487f      	ldr	r0, [pc, #508]	; (17400 <ssd1963_init+0xafc>)
   17204:	4b7f      	ldr	r3, [pc, #508]	; (17404 <ssd1963_init+0xb00>)
   17206:	4798      	blx	r3
   17208:	4b7f      	ldr	r3, [pc, #508]	; (17408 <ssd1963_init+0xb04>)
   1720a:	2240      	movs	r2, #64	; 0x40
   1720c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1720e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17210:	4b79      	ldr	r3, [pc, #484]	; (173f8 <ssd1963_init+0xaf4>)
   17212:	781b      	ldrb	r3, [r3, #0]
   17214:	2b00      	cmp	r3, #0
   17216:	d005      	beq.n	17224 <ssd1963_init+0x920>
		port_base->OUTSET.reg = pin_mask;
   17218:	3a20      	subs	r2, #32
   1721a:	4b7b      	ldr	r3, [pc, #492]	; (17408 <ssd1963_init+0xb04>)
   1721c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   1721e:	2200      	movs	r2, #0
   17220:	4b75      	ldr	r3, [pc, #468]	; (173f8 <ssd1963_init+0xaf4>)
   17222:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17224:	2201      	movs	r2, #1
   17226:	4975      	ldr	r1, [pc, #468]	; (173fc <ssd1963_init+0xaf8>)
   17228:	4875      	ldr	r0, [pc, #468]	; (17400 <ssd1963_init+0xafc>)
   1722a:	4b76      	ldr	r3, [pc, #472]	; (17404 <ssd1963_init+0xb00>)
   1722c:	4798      	blx	r3
   1722e:	4c76      	ldr	r4, [pc, #472]	; (17408 <ssd1963_init+0xb04>)
   17230:	2540      	movs	r5, #64	; 0x40
   17232:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(1);
   17234:	2000      	movs	r0, #0
   17236:	4b75      	ldr	r3, [pc, #468]	; (1740c <ssd1963_init+0xb08>)
   17238:	4798      	blx	r3
   1723a:	0002      	movs	r2, r0
   1723c:	2300      	movs	r3, #0
   1723e:	4874      	ldr	r0, [pc, #464]	; (17410 <ssd1963_init+0xb0c>)
   17240:	2100      	movs	r1, #0
   17242:	1880      	adds	r0, r0, r2
   17244:	4159      	adcs	r1, r3
   17246:	4a73      	ldr	r2, [pc, #460]	; (17414 <ssd1963_init+0xb10>)
   17248:	2300      	movs	r3, #0
   1724a:	4e73      	ldr	r6, [pc, #460]	; (17418 <ssd1963_init+0xb14>)
   1724c:	47b0      	blx	r6
   1724e:	4b73      	ldr	r3, [pc, #460]	; (1741c <ssd1963_init+0xb18>)
   17250:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   17252:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
   17254:	4b68      	ldr	r3, [pc, #416]	; (173f8 <ssd1963_init+0xaf4>)
   17256:	781b      	ldrb	r3, [r3, #0]
   17258:	2b00      	cmp	r3, #0
   1725a:	d104      	bne.n	17266 <ssd1963_init+0x962>
   1725c:	2220      	movs	r2, #32
   1725e:	6162      	str	r2, [r4, #20]
        cmd_mode = true;
   17260:	3a1f      	subs	r2, #31
   17262:	4b65      	ldr	r3, [pc, #404]	; (173f8 <ssd1963_init+0xaf4>)
   17264:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   17266:	2229      	movs	r2, #41	; 0x29
   17268:	4964      	ldr	r1, [pc, #400]	; (173fc <ssd1963_init+0xaf8>)
   1726a:	4865      	ldr	r0, [pc, #404]	; (17400 <ssd1963_init+0xafc>)
   1726c:	4b65      	ldr	r3, [pc, #404]	; (17404 <ssd1963_init+0xb00>)
   1726e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   17270:	4b65      	ldr	r3, [pc, #404]	; (17408 <ssd1963_init+0xb04>)
   17272:	2240      	movs	r2, #64	; 0x40
   17274:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17276:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   17278:	4b5f      	ldr	r3, [pc, #380]	; (173f8 <ssd1963_init+0xaf4>)
   1727a:	781b      	ldrb	r3, [r3, #0]
   1727c:	2b00      	cmp	r3, #0
   1727e:	d105      	bne.n	1728c <ssd1963_init+0x988>
   17280:	3a20      	subs	r2, #32
   17282:	4b61      	ldr	r3, [pc, #388]	; (17408 <ssd1963_init+0xb04>)
   17284:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   17286:	3a1f      	subs	r2, #31
   17288:	4b5b      	ldr	r3, [pc, #364]	; (173f8 <ssd1963_init+0xaf4>)
   1728a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   1728c:	22be      	movs	r2, #190	; 0xbe
   1728e:	495b      	ldr	r1, [pc, #364]	; (173fc <ssd1963_init+0xaf8>)
   17290:	485b      	ldr	r0, [pc, #364]	; (17400 <ssd1963_init+0xafc>)
   17292:	4b5c      	ldr	r3, [pc, #368]	; (17404 <ssd1963_init+0xb00>)
   17294:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   17296:	4b5c      	ldr	r3, [pc, #368]	; (17408 <ssd1963_init+0xb04>)
   17298:	2240      	movs	r2, #64	; 0x40
   1729a:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1729c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   1729e:	4b56      	ldr	r3, [pc, #344]	; (173f8 <ssd1963_init+0xaf4>)
   172a0:	781b      	ldrb	r3, [r3, #0]
   172a2:	2b00      	cmp	r3, #0
   172a4:	d005      	beq.n	172b2 <ssd1963_init+0x9ae>
		port_base->OUTSET.reg = pin_mask;
   172a6:	3a20      	subs	r2, #32
   172a8:	4b57      	ldr	r3, [pc, #348]	; (17408 <ssd1963_init+0xb04>)
   172aa:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   172ac:	2200      	movs	r2, #0
   172ae:	4b52      	ldr	r3, [pc, #328]	; (173f8 <ssd1963_init+0xaf4>)
   172b0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   172b2:	2206      	movs	r2, #6
   172b4:	4951      	ldr	r1, [pc, #324]	; (173fc <ssd1963_init+0xaf8>)
   172b6:	4852      	ldr	r0, [pc, #328]	; (17400 <ssd1963_init+0xafc>)
   172b8:	4b52      	ldr	r3, [pc, #328]	; (17404 <ssd1963_init+0xb00>)
   172ba:	4798      	blx	r3
   172bc:	4b52      	ldr	r3, [pc, #328]	; (17408 <ssd1963_init+0xb04>)
   172be:	2240      	movs	r2, #64	; 0x40
   172c0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   172c2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   172c4:	4b4c      	ldr	r3, [pc, #304]	; (173f8 <ssd1963_init+0xaf4>)
   172c6:	781b      	ldrb	r3, [r3, #0]
   172c8:	2b00      	cmp	r3, #0
   172ca:	d005      	beq.n	172d8 <ssd1963_init+0x9d4>
		port_base->OUTSET.reg = pin_mask;
   172cc:	3a20      	subs	r2, #32
   172ce:	4b4e      	ldr	r3, [pc, #312]	; (17408 <ssd1963_init+0xb04>)
   172d0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   172d2:	2200      	movs	r2, #0
   172d4:	4b48      	ldr	r3, [pc, #288]	; (173f8 <ssd1963_init+0xaf4>)
   172d6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   172d8:	2280      	movs	r2, #128	; 0x80
   172da:	4948      	ldr	r1, [pc, #288]	; (173fc <ssd1963_init+0xaf8>)
   172dc:	4848      	ldr	r0, [pc, #288]	; (17400 <ssd1963_init+0xafc>)
   172de:	4b49      	ldr	r3, [pc, #292]	; (17404 <ssd1963_init+0xb00>)
   172e0:	4798      	blx	r3
   172e2:	4b49      	ldr	r3, [pc, #292]	; (17408 <ssd1963_init+0xb04>)
   172e4:	2240      	movs	r2, #64	; 0x40
   172e6:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   172e8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   172ea:	4b43      	ldr	r3, [pc, #268]	; (173f8 <ssd1963_init+0xaf4>)
   172ec:	781b      	ldrb	r3, [r3, #0]
   172ee:	2b00      	cmp	r3, #0
   172f0:	d005      	beq.n	172fe <ssd1963_init+0x9fa>
		port_base->OUTSET.reg = pin_mask;
   172f2:	3a20      	subs	r2, #32
   172f4:	4b44      	ldr	r3, [pc, #272]	; (17408 <ssd1963_init+0xb04>)
   172f6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   172f8:	2200      	movs	r2, #0
   172fa:	4b3f      	ldr	r3, [pc, #252]	; (173f8 <ssd1963_init+0xaf4>)
   172fc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   172fe:	2201      	movs	r2, #1
   17300:	493e      	ldr	r1, [pc, #248]	; (173fc <ssd1963_init+0xaf8>)
   17302:	483f      	ldr	r0, [pc, #252]	; (17400 <ssd1963_init+0xafc>)
   17304:	4b3f      	ldr	r3, [pc, #252]	; (17404 <ssd1963_init+0xb00>)
   17306:	4798      	blx	r3
   17308:	4b3f      	ldr	r3, [pc, #252]	; (17408 <ssd1963_init+0xb04>)
   1730a:	2240      	movs	r2, #64	; 0x40
   1730c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1730e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17310:	4b39      	ldr	r3, [pc, #228]	; (173f8 <ssd1963_init+0xaf4>)
   17312:	781b      	ldrb	r3, [r3, #0]
   17314:	2b00      	cmp	r3, #0
   17316:	d005      	beq.n	17324 <ssd1963_init+0xa20>
		port_base->OUTSET.reg = pin_mask;
   17318:	3a20      	subs	r2, #32
   1731a:	4b3b      	ldr	r3, [pc, #236]	; (17408 <ssd1963_init+0xb04>)
   1731c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   1731e:	2200      	movs	r2, #0
   17320:	4b35      	ldr	r3, [pc, #212]	; (173f8 <ssd1963_init+0xaf4>)
   17322:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17324:	22f0      	movs	r2, #240	; 0xf0
   17326:	4935      	ldr	r1, [pc, #212]	; (173fc <ssd1963_init+0xaf8>)
   17328:	4835      	ldr	r0, [pc, #212]	; (17400 <ssd1963_init+0xafc>)
   1732a:	4b36      	ldr	r3, [pc, #216]	; (17404 <ssd1963_init+0xb00>)
   1732c:	4798      	blx	r3
   1732e:	4b36      	ldr	r3, [pc, #216]	; (17408 <ssd1963_init+0xb04>)
   17330:	2240      	movs	r2, #64	; 0x40
   17332:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17334:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17336:	4b30      	ldr	r3, [pc, #192]	; (173f8 <ssd1963_init+0xaf4>)
   17338:	781b      	ldrb	r3, [r3, #0]
   1733a:	2b00      	cmp	r3, #0
   1733c:	d005      	beq.n	1734a <ssd1963_init+0xa46>
		port_base->OUTSET.reg = pin_mask;
   1733e:	3a20      	subs	r2, #32
   17340:	4b31      	ldr	r3, [pc, #196]	; (17408 <ssd1963_init+0xb04>)
   17342:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17344:	2200      	movs	r2, #0
   17346:	4b2c      	ldr	r3, [pc, #176]	; (173f8 <ssd1963_init+0xaf4>)
   17348:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   1734a:	2200      	movs	r2, #0
   1734c:	492b      	ldr	r1, [pc, #172]	; (173fc <ssd1963_init+0xaf8>)
   1734e:	482c      	ldr	r0, [pc, #176]	; (17400 <ssd1963_init+0xafc>)
   17350:	4b2c      	ldr	r3, [pc, #176]	; (17404 <ssd1963_init+0xb00>)
   17352:	4798      	blx	r3
   17354:	4b2c      	ldr	r3, [pc, #176]	; (17408 <ssd1963_init+0xb04>)
   17356:	2240      	movs	r2, #64	; 0x40
   17358:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1735a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   1735c:	4b26      	ldr	r3, [pc, #152]	; (173f8 <ssd1963_init+0xaf4>)
   1735e:	781b      	ldrb	r3, [r3, #0]
   17360:	2b00      	cmp	r3, #0
   17362:	d005      	beq.n	17370 <ssd1963_init+0xa6c>
		port_base->OUTSET.reg = pin_mask;
   17364:	3a20      	subs	r2, #32
   17366:	4b28      	ldr	r3, [pc, #160]	; (17408 <ssd1963_init+0xb04>)
   17368:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   1736a:	2200      	movs	r2, #0
   1736c:	4b22      	ldr	r3, [pc, #136]	; (173f8 <ssd1963_init+0xaf4>)
   1736e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17370:	2200      	movs	r2, #0
   17372:	4922      	ldr	r1, [pc, #136]	; (173fc <ssd1963_init+0xaf8>)
   17374:	4822      	ldr	r0, [pc, #136]	; (17400 <ssd1963_init+0xafc>)
   17376:	4b23      	ldr	r3, [pc, #140]	; (17404 <ssd1963_init+0xb00>)
   17378:	4798      	blx	r3
   1737a:	4b23      	ldr	r3, [pc, #140]	; (17408 <ssd1963_init+0xb04>)
   1737c:	2240      	movs	r2, #64	; 0x40
   1737e:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17380:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   17382:	4b1d      	ldr	r3, [pc, #116]	; (173f8 <ssd1963_init+0xaf4>)
   17384:	781b      	ldrb	r3, [r3, #0]
   17386:	2b00      	cmp	r3, #0
   17388:	d105      	bne.n	17396 <ssd1963_init+0xa92>
   1738a:	3a20      	subs	r2, #32
   1738c:	4b1e      	ldr	r3, [pc, #120]	; (17408 <ssd1963_init+0xb04>)
   1738e:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   17390:	3a1f      	subs	r2, #31
   17392:	4b19      	ldr	r3, [pc, #100]	; (173f8 <ssd1963_init+0xaf4>)
   17394:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   17396:	22d0      	movs	r2, #208	; 0xd0
   17398:	4918      	ldr	r1, [pc, #96]	; (173fc <ssd1963_init+0xaf8>)
   1739a:	4819      	ldr	r0, [pc, #100]	; (17400 <ssd1963_init+0xafc>)
   1739c:	4b19      	ldr	r3, [pc, #100]	; (17404 <ssd1963_init+0xb00>)
   1739e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   173a0:	4b19      	ldr	r3, [pc, #100]	; (17408 <ssd1963_init+0xb04>)
   173a2:	2240      	movs	r2, #64	; 0x40
   173a4:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   173a6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   173a8:	4b13      	ldr	r3, [pc, #76]	; (173f8 <ssd1963_init+0xaf4>)
   173aa:	781b      	ldrb	r3, [r3, #0]
   173ac:	2b00      	cmp	r3, #0
   173ae:	d005      	beq.n	173bc <ssd1963_init+0xab8>
		port_base->OUTSET.reg = pin_mask;
   173b0:	3a20      	subs	r2, #32
   173b2:	4b15      	ldr	r3, [pc, #84]	; (17408 <ssd1963_init+0xb04>)
   173b4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   173b6:	2200      	movs	r2, #0
   173b8:	4b0f      	ldr	r3, [pc, #60]	; (173f8 <ssd1963_init+0xaf4>)
   173ba:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   173bc:	220d      	movs	r2, #13
   173be:	490f      	ldr	r1, [pc, #60]	; (173fc <ssd1963_init+0xaf8>)
   173c0:	480f      	ldr	r0, [pc, #60]	; (17400 <ssd1963_init+0xafc>)
   173c2:	4b10      	ldr	r3, [pc, #64]	; (17404 <ssd1963_init+0xb00>)
   173c4:	4798      	blx	r3
   173c6:	2240      	movs	r2, #64	; 0x40
   173c8:	4b0f      	ldr	r3, [pc, #60]	; (17408 <ssd1963_init+0xb04>)
   173ca:	619a      	str	r2, [r3, #24]
    LV_DRV_DELAY_MS(30);
   173cc:	2000      	movs	r0, #0
   173ce:	4b0f      	ldr	r3, [pc, #60]	; (1740c <ssd1963_init+0xb08>)
   173d0:	4798      	blx	r3
   173d2:	0002      	movs	r2, r0
   173d4:	2300      	movs	r3, #0
   173d6:	0f11      	lsrs	r1, r2, #28
   173d8:	0110      	lsls	r0, r2, #4
   173da:	1a80      	subs	r0, r0, r2
   173dc:	4199      	sbcs	r1, r3
   173de:	1800      	adds	r0, r0, r0
   173e0:	4149      	adcs	r1, r1
   173e2:	4a0b      	ldr	r2, [pc, #44]	; (17410 <ssd1963_init+0xb0c>)
   173e4:	2300      	movs	r3, #0
   173e6:	1880      	adds	r0, r0, r2
   173e8:	4159      	adcs	r1, r3
   173ea:	4a0a      	ldr	r2, [pc, #40]	; (17414 <ssd1963_init+0xb10>)
   173ec:	2300      	movs	r3, #0
   173ee:	4c0a      	ldr	r4, [pc, #40]	; (17418 <ssd1963_init+0xb14>)
   173f0:	47a0      	blx	r4
   173f2:	4b0a      	ldr	r3, [pc, #40]	; (1741c <ssd1963_init+0xb18>)
   173f4:	4798      	blx	r3
}
   173f6:	bd70      	pop	{r4, r5, r6, pc}
   173f8:	2000005c 	.word	0x2000005c
   173fc:	1c03c3f7 	.word	0x1c03c3f7
   17400:	41004480 	.word	0x41004480
   17404:	000177ad 	.word	0x000177ad
   17408:	41004400 	.word	0x41004400
   1740c:	00001065 	.word	0x00001065
   17410:	00001b57 	.word	0x00001b57
   17414:	00001b58 	.word	0x00001b58
   17418:	00017c4d 	.word	0x00017c4d
   1741c:	20000001 	.word	0x20000001

00017420 <ssd1963_flush>:
{
   17420:	b5f0      	push	{r4, r5, r6, r7, lr}
   17422:	46de      	mov	lr, fp
   17424:	4657      	mov	r7, sl
   17426:	464e      	mov	r6, r9
   17428:	4645      	mov	r5, r8
   1742a:	b5e0      	push	{r5, r6, r7, lr}
   1742c:	b083      	sub	sp, #12
   1742e:	9000      	str	r0, [sp, #0]
   17430:	000f      	movs	r7, r1
   17432:	0016      	movs	r6, r2
    if(area->x2 < 0) return;
   17434:	2204      	movs	r2, #4
   17436:	5e8b      	ldrsh	r3, [r1, r2]
   17438:	2b00      	cmp	r3, #0
   1743a:	db0c      	blt.n	17456 <ssd1963_flush+0x36>
    if(area->y2 < 0) return;
   1743c:	2206      	movs	r2, #6
   1743e:	5e8b      	ldrsh	r3, [r1, r2]
   17440:	2b00      	cmp	r3, #0
   17442:	db08      	blt.n	17456 <ssd1963_flush+0x36>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
   17444:	2300      	movs	r3, #0
   17446:	5ecc      	ldrsh	r4, [r1, r3]
   17448:	4bb2      	ldr	r3, [pc, #712]	; (17714 <ssd1963_flush+0x2f4>)
   1744a:	4798      	blx	r3
   1744c:	4bb2      	ldr	r3, [pc, #712]	; (17718 <ssd1963_flush+0x2f8>)
   1744e:	4798      	blx	r3
   17450:	3801      	subs	r0, #1
   17452:	4284      	cmp	r4, r0
   17454:	dd06      	ble.n	17464 <ssd1963_flush+0x44>
}
   17456:	b003      	add	sp, #12
   17458:	bc3c      	pop	{r2, r3, r4, r5}
   1745a:	4690      	mov	r8, r2
   1745c:	4699      	mov	r9, r3
   1745e:	46a2      	mov	sl, r4
   17460:	46ab      	mov	fp, r5
   17462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(area->y1 > SSD1963_VER_RES - 1) return;
   17464:	2302      	movs	r3, #2
   17466:	5efc      	ldrsh	r4, [r7, r3]
   17468:	4baa      	ldr	r3, [pc, #680]	; (17714 <ssd1963_flush+0x2f4>)
   1746a:	4798      	blx	r3
   1746c:	4bab      	ldr	r3, [pc, #684]	; (1771c <ssd1963_flush+0x2fc>)
   1746e:	4798      	blx	r3
   17470:	3801      	subs	r0, #1
   17472:	4284      	cmp	r4, r0
   17474:	dcef      	bgt.n	17456 <ssd1963_flush+0x36>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
   17476:	883b      	ldrh	r3, [r7, #0]
   17478:	1c1d      	adds	r5, r3, #0
   1747a:	b21b      	sxth	r3, r3
   1747c:	2b00      	cmp	r3, #0
   1747e:	da00      	bge.n	17482 <ssd1963_flush+0x62>
   17480:	e136      	b.n	176f0 <ssd1963_flush+0x2d0>
   17482:	b22b      	sxth	r3, r5
   17484:	4699      	mov	r9, r3
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
   17486:	887b      	ldrh	r3, [r7, #2]
   17488:	1c1c      	adds	r4, r3, #0
   1748a:	b21b      	sxth	r3, r3
   1748c:	2b00      	cmp	r3, #0
   1748e:	da00      	bge.n	17492 <ssd1963_flush+0x72>
   17490:	e130      	b.n	176f4 <ssd1963_flush+0x2d4>
   17492:	b224      	sxth	r4, r4
   17494:	46a3      	mov	fp, r4
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
   17496:	2304      	movs	r3, #4
   17498:	5efd      	ldrsh	r5, [r7, r3]
   1749a:	4b9e      	ldr	r3, [pc, #632]	; (17714 <ssd1963_flush+0x2f4>)
   1749c:	4798      	blx	r3
   1749e:	4b9e      	ldr	r3, [pc, #632]	; (17718 <ssd1963_flush+0x2f8>)
   174a0:	4798      	blx	r3
   174a2:	3801      	subs	r0, #1
   174a4:	4285      	cmp	r5, r0
   174a6:	dd00      	ble.n	174aa <ssd1963_flush+0x8a>
   174a8:	e126      	b.n	176f8 <ssd1963_flush+0x2d8>
   174aa:	2304      	movs	r3, #4
   174ac:	5efd      	ldrsh	r5, [r7, r3]
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
   174ae:	2206      	movs	r2, #6
   174b0:	5ebb      	ldrsh	r3, [r7, r2]
   174b2:	469a      	mov	sl, r3
   174b4:	4b97      	ldr	r3, [pc, #604]	; (17714 <ssd1963_flush+0x2f4>)
   174b6:	4798      	blx	r3
   174b8:	4b98      	ldr	r3, [pc, #608]	; (1771c <ssd1963_flush+0x2fc>)
   174ba:	4798      	blx	r3
   174bc:	3801      	subs	r0, #1
   174be:	4582      	cmp	sl, r0
   174c0:	dd00      	ble.n	174c4 <ssd1963_flush+0xa4>
   174c2:	e11f      	b.n	17704 <ssd1963_flush+0x2e4>
   174c4:	2206      	movs	r2, #6
   174c6:	5ebb      	ldrsh	r3, [r7, r2]
   174c8:	469a      	mov	sl, r3
		port_base->OUTCLR.reg = pin_mask;
   174ca:	2240      	movs	r2, #64	; 0x40
   174cc:	4b94      	ldr	r3, [pc, #592]	; (17720 <ssd1963_flush+0x300>)
   174ce:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   174d0:	4b94      	ldr	r3, [pc, #592]	; (17724 <ssd1963_flush+0x304>)
   174d2:	781b      	ldrb	r3, [r3, #0]
   174d4:	2b00      	cmp	r3, #0
   174d6:	d105      	bne.n	174e4 <ssd1963_flush+0xc4>
   174d8:	3a20      	subs	r2, #32
   174da:	4b91      	ldr	r3, [pc, #580]	; (17720 <ssd1963_flush+0x300>)
   174dc:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   174de:	3a1f      	subs	r2, #31
   174e0:	4b90      	ldr	r3, [pc, #576]	; (17724 <ssd1963_flush+0x304>)
   174e2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   174e4:	222a      	movs	r2, #42	; 0x2a
   174e6:	4990      	ldr	r1, [pc, #576]	; (17728 <ssd1963_flush+0x308>)
   174e8:	4890      	ldr	r0, [pc, #576]	; (1772c <ssd1963_flush+0x30c>)
   174ea:	4b91      	ldr	r3, [pc, #580]	; (17730 <ssd1963_flush+0x310>)
   174ec:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   174ee:	4b8c      	ldr	r3, [pc, #560]	; (17720 <ssd1963_flush+0x300>)
   174f0:	2140      	movs	r1, #64	; 0x40
   174f2:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x1 >> 8);
   174f4:	464a      	mov	r2, r9
   174f6:	1210      	asrs	r0, r2, #8
		port_base->OUTCLR.reg = pin_mask;
   174f8:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
   174fa:	4b8a      	ldr	r3, [pc, #552]	; (17724 <ssd1963_flush+0x304>)
   174fc:	781b      	ldrb	r3, [r3, #0]
   174fe:	2b00      	cmp	r3, #0
   17500:	d005      	beq.n	1750e <ssd1963_flush+0xee>
		port_base->OUTSET.reg = pin_mask;
   17502:	2220      	movs	r2, #32
   17504:	4b86      	ldr	r3, [pc, #536]	; (17720 <ssd1963_flush+0x300>)
   17506:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17508:	2200      	movs	r2, #0
   1750a:	4b86      	ldr	r3, [pc, #536]	; (17724 <ssd1963_flush+0x304>)
   1750c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   1750e:	22ff      	movs	r2, #255	; 0xff
   17510:	4002      	ands	r2, r0
   17512:	4985      	ldr	r1, [pc, #532]	; (17728 <ssd1963_flush+0x308>)
   17514:	4885      	ldr	r0, [pc, #532]	; (1772c <ssd1963_flush+0x30c>)
   17516:	4b86      	ldr	r3, [pc, #536]	; (17730 <ssd1963_flush+0x310>)
   17518:	4798      	blx	r3
   1751a:	4b81      	ldr	r3, [pc, #516]	; (17720 <ssd1963_flush+0x300>)
   1751c:	2140      	movs	r1, #64	; 0x40
   1751e:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_x1);
   17520:	464a      	mov	r2, r9
   17522:	4668      	mov	r0, sp
   17524:	7102      	strb	r2, [r0, #4]
   17526:	7902      	ldrb	r2, [r0, #4]
		port_base->OUTCLR.reg = pin_mask;
   17528:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
   1752a:	4b7e      	ldr	r3, [pc, #504]	; (17724 <ssd1963_flush+0x304>)
   1752c:	781b      	ldrb	r3, [r3, #0]
   1752e:	2b00      	cmp	r3, #0
   17530:	d005      	beq.n	1753e <ssd1963_flush+0x11e>
		port_base->OUTSET.reg = pin_mask;
   17532:	3920      	subs	r1, #32
   17534:	4b7a      	ldr	r3, [pc, #488]	; (17720 <ssd1963_flush+0x300>)
   17536:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
   17538:	2100      	movs	r1, #0
   1753a:	4b7a      	ldr	r3, [pc, #488]	; (17724 <ssd1963_flush+0x304>)
   1753c:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   1753e:	497a      	ldr	r1, [pc, #488]	; (17728 <ssd1963_flush+0x308>)
   17540:	487a      	ldr	r0, [pc, #488]	; (1772c <ssd1963_flush+0x30c>)
   17542:	4b7b      	ldr	r3, [pc, #492]	; (17730 <ssd1963_flush+0x310>)
   17544:	4798      	blx	r3
   17546:	4b76      	ldr	r3, [pc, #472]	; (17720 <ssd1963_flush+0x300>)
   17548:	2140      	movs	r1, #64	; 0x40
   1754a:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x2 >> 8);
   1754c:	1228      	asrs	r0, r5, #8
		port_base->OUTCLR.reg = pin_mask;
   1754e:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
   17550:	4b74      	ldr	r3, [pc, #464]	; (17724 <ssd1963_flush+0x304>)
   17552:	781b      	ldrb	r3, [r3, #0]
   17554:	2b00      	cmp	r3, #0
   17556:	d005      	beq.n	17564 <ssd1963_flush+0x144>
		port_base->OUTSET.reg = pin_mask;
   17558:	2220      	movs	r2, #32
   1755a:	4b71      	ldr	r3, [pc, #452]	; (17720 <ssd1963_flush+0x300>)
   1755c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   1755e:	2200      	movs	r2, #0
   17560:	4b70      	ldr	r3, [pc, #448]	; (17724 <ssd1963_flush+0x304>)
   17562:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17564:	22ff      	movs	r2, #255	; 0xff
   17566:	4002      	ands	r2, r0
   17568:	496f      	ldr	r1, [pc, #444]	; (17728 <ssd1963_flush+0x308>)
   1756a:	4870      	ldr	r0, [pc, #448]	; (1772c <ssd1963_flush+0x30c>)
   1756c:	4b70      	ldr	r3, [pc, #448]	; (17730 <ssd1963_flush+0x310>)
   1756e:	4798      	blx	r3
   17570:	4b6b      	ldr	r3, [pc, #428]	; (17720 <ssd1963_flush+0x300>)
   17572:	2240      	movs	r2, #64	; 0x40
   17574:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17576:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17578:	4b6a      	ldr	r3, [pc, #424]	; (17724 <ssd1963_flush+0x304>)
   1757a:	781b      	ldrb	r3, [r3, #0]
   1757c:	2b00      	cmp	r3, #0
   1757e:	d005      	beq.n	1758c <ssd1963_flush+0x16c>
		port_base->OUTSET.reg = pin_mask;
   17580:	3a20      	subs	r2, #32
   17582:	4b67      	ldr	r3, [pc, #412]	; (17720 <ssd1963_flush+0x300>)
   17584:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17586:	2200      	movs	r2, #0
   17588:	4b66      	ldr	r3, [pc, #408]	; (17724 <ssd1963_flush+0x304>)
   1758a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   1758c:	22ff      	movs	r2, #255	; 0xff
   1758e:	402a      	ands	r2, r5
   17590:	4965      	ldr	r1, [pc, #404]	; (17728 <ssd1963_flush+0x308>)
   17592:	4866      	ldr	r0, [pc, #408]	; (1772c <ssd1963_flush+0x30c>)
   17594:	4b66      	ldr	r3, [pc, #408]	; (17730 <ssd1963_flush+0x310>)
   17596:	4798      	blx	r3
   17598:	4b61      	ldr	r3, [pc, #388]	; (17720 <ssd1963_flush+0x300>)
   1759a:	2240      	movs	r2, #64	; 0x40
   1759c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1759e:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   175a0:	4b60      	ldr	r3, [pc, #384]	; (17724 <ssd1963_flush+0x304>)
   175a2:	781b      	ldrb	r3, [r3, #0]
   175a4:	2b00      	cmp	r3, #0
   175a6:	d105      	bne.n	175b4 <ssd1963_flush+0x194>
   175a8:	3a20      	subs	r2, #32
   175aa:	4b5d      	ldr	r3, [pc, #372]	; (17720 <ssd1963_flush+0x300>)
   175ac:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   175ae:	3a1f      	subs	r2, #31
   175b0:	4b5c      	ldr	r3, [pc, #368]	; (17724 <ssd1963_flush+0x304>)
   175b2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   175b4:	222b      	movs	r2, #43	; 0x2b
   175b6:	495c      	ldr	r1, [pc, #368]	; (17728 <ssd1963_flush+0x308>)
   175b8:	485c      	ldr	r0, [pc, #368]	; (1772c <ssd1963_flush+0x30c>)
   175ba:	4b5d      	ldr	r3, [pc, #372]	; (17730 <ssd1963_flush+0x310>)
   175bc:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   175be:	4b58      	ldr	r3, [pc, #352]	; (17720 <ssd1963_flush+0x300>)
   175c0:	2140      	movs	r1, #64	; 0x40
   175c2:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y1 >> 8);
   175c4:	465a      	mov	r2, fp
   175c6:	1210      	asrs	r0, r2, #8
		port_base->OUTCLR.reg = pin_mask;
   175c8:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
   175ca:	4b56      	ldr	r3, [pc, #344]	; (17724 <ssd1963_flush+0x304>)
   175cc:	781b      	ldrb	r3, [r3, #0]
   175ce:	2b00      	cmp	r3, #0
   175d0:	d005      	beq.n	175de <ssd1963_flush+0x1be>
		port_base->OUTSET.reg = pin_mask;
   175d2:	2220      	movs	r2, #32
   175d4:	4b52      	ldr	r3, [pc, #328]	; (17720 <ssd1963_flush+0x300>)
   175d6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   175d8:	2200      	movs	r2, #0
   175da:	4b52      	ldr	r3, [pc, #328]	; (17724 <ssd1963_flush+0x304>)
   175dc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   175de:	22ff      	movs	r2, #255	; 0xff
   175e0:	4002      	ands	r2, r0
   175e2:	4951      	ldr	r1, [pc, #324]	; (17728 <ssd1963_flush+0x308>)
   175e4:	4851      	ldr	r0, [pc, #324]	; (1772c <ssd1963_flush+0x30c>)
   175e6:	4b52      	ldr	r3, [pc, #328]	; (17730 <ssd1963_flush+0x310>)
   175e8:	4798      	blx	r3
   175ea:	4b4d      	ldr	r3, [pc, #308]	; (17720 <ssd1963_flush+0x300>)
   175ec:	2140      	movs	r1, #64	; 0x40
   175ee:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_y1);
   175f0:	b2e2      	uxtb	r2, r4
		port_base->OUTCLR.reg = pin_mask;
   175f2:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
   175f4:	4b4b      	ldr	r3, [pc, #300]	; (17724 <ssd1963_flush+0x304>)
   175f6:	781b      	ldrb	r3, [r3, #0]
   175f8:	2b00      	cmp	r3, #0
   175fa:	d005      	beq.n	17608 <ssd1963_flush+0x1e8>
		port_base->OUTSET.reg = pin_mask;
   175fc:	3920      	subs	r1, #32
   175fe:	4b48      	ldr	r3, [pc, #288]	; (17720 <ssd1963_flush+0x300>)
   17600:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
   17602:	2100      	movs	r1, #0
   17604:	4b47      	ldr	r3, [pc, #284]	; (17724 <ssd1963_flush+0x304>)
   17606:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17608:	4947      	ldr	r1, [pc, #284]	; (17728 <ssd1963_flush+0x308>)
   1760a:	4848      	ldr	r0, [pc, #288]	; (1772c <ssd1963_flush+0x30c>)
   1760c:	4b48      	ldr	r3, [pc, #288]	; (17730 <ssd1963_flush+0x310>)
   1760e:	4798      	blx	r3
   17610:	4b43      	ldr	r3, [pc, #268]	; (17720 <ssd1963_flush+0x300>)
   17612:	2140      	movs	r1, #64	; 0x40
   17614:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y2 >> 8);
   17616:	4652      	mov	r2, sl
   17618:	1210      	asrs	r0, r2, #8
		port_base->OUTCLR.reg = pin_mask;
   1761a:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
   1761c:	4b41      	ldr	r3, [pc, #260]	; (17724 <ssd1963_flush+0x304>)
   1761e:	781b      	ldrb	r3, [r3, #0]
   17620:	2b00      	cmp	r3, #0
   17622:	d005      	beq.n	17630 <ssd1963_flush+0x210>
		port_base->OUTSET.reg = pin_mask;
   17624:	2220      	movs	r2, #32
   17626:	4b3e      	ldr	r3, [pc, #248]	; (17720 <ssd1963_flush+0x300>)
   17628:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   1762a:	2200      	movs	r2, #0
   1762c:	4b3d      	ldr	r3, [pc, #244]	; (17724 <ssd1963_flush+0x304>)
   1762e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17630:	22ff      	movs	r2, #255	; 0xff
   17632:	4002      	ands	r2, r0
   17634:	493c      	ldr	r1, [pc, #240]	; (17728 <ssd1963_flush+0x308>)
   17636:	483d      	ldr	r0, [pc, #244]	; (1772c <ssd1963_flush+0x30c>)
   17638:	4b3d      	ldr	r3, [pc, #244]	; (17730 <ssd1963_flush+0x310>)
   1763a:	4798      	blx	r3
   1763c:	4b38      	ldr	r3, [pc, #224]	; (17720 <ssd1963_flush+0x300>)
   1763e:	2240      	movs	r2, #64	; 0x40
   17640:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   17642:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
   17644:	4b37      	ldr	r3, [pc, #220]	; (17724 <ssd1963_flush+0x304>)
   17646:	781b      	ldrb	r3, [r3, #0]
   17648:	2b00      	cmp	r3, #0
   1764a:	d005      	beq.n	17658 <ssd1963_flush+0x238>
		port_base->OUTSET.reg = pin_mask;
   1764c:	3a20      	subs	r2, #32
   1764e:	4b34      	ldr	r3, [pc, #208]	; (17720 <ssd1963_flush+0x300>)
   17650:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
   17652:	2200      	movs	r2, #0
   17654:	4b33      	ldr	r3, [pc, #204]	; (17724 <ssd1963_flush+0x304>)
   17656:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
   17658:	22ff      	movs	r2, #255	; 0xff
   1765a:	4653      	mov	r3, sl
   1765c:	401a      	ands	r2, r3
   1765e:	4932      	ldr	r1, [pc, #200]	; (17728 <ssd1963_flush+0x308>)
   17660:	4832      	ldr	r0, [pc, #200]	; (1772c <ssd1963_flush+0x30c>)
   17662:	4b33      	ldr	r3, [pc, #204]	; (17730 <ssd1963_flush+0x310>)
   17664:	4798      	blx	r3
   17666:	4b2e      	ldr	r3, [pc, #184]	; (17720 <ssd1963_flush+0x300>)
   17668:	2240      	movs	r2, #64	; 0x40
   1766a:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
   1766c:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
   1766e:	4b2d      	ldr	r3, [pc, #180]	; (17724 <ssd1963_flush+0x304>)
   17670:	781b      	ldrb	r3, [r3, #0]
   17672:	2b00      	cmp	r3, #0
   17674:	d105      	bne.n	17682 <ssd1963_flush+0x262>
   17676:	3a20      	subs	r2, #32
   17678:	4b29      	ldr	r3, [pc, #164]	; (17720 <ssd1963_flush+0x300>)
   1767a:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
   1767c:	3a1f      	subs	r2, #31
   1767e:	4b29      	ldr	r3, [pc, #164]	; (17724 <ssd1963_flush+0x304>)
   17680:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
   17682:	222c      	movs	r2, #44	; 0x2c
   17684:	4928      	ldr	r1, [pc, #160]	; (17728 <ssd1963_flush+0x308>)
   17686:	4829      	ldr	r0, [pc, #164]	; (1772c <ssd1963_flush+0x30c>)
   17688:	4b29      	ldr	r3, [pc, #164]	; (17730 <ssd1963_flush+0x310>)
   1768a:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
   1768c:	2240      	movs	r2, #64	; 0x40
   1768e:	4b24      	ldr	r3, [pc, #144]	; (17720 <ssd1963_flush+0x300>)
   17690:	619a      	str	r2, [r3, #24]
    uint16_t full_w = area->x2 - area->x1 + 1;
   17692:	88bb      	ldrh	r3, [r7, #4]
   17694:	3301      	adds	r3, #1
   17696:	883a      	ldrh	r2, [r7, #0]
   17698:	1a9b      	subs	r3, r3, r2
   1769a:	b29f      	uxth	r7, r3
    if(cmd_mode != false) {
   1769c:	4a21      	ldr	r2, [pc, #132]	; (17724 <ssd1963_flush+0x304>)
   1769e:	7812      	ldrb	r2, [r2, #0]
   176a0:	2a00      	cmp	r2, #0
   176a2:	d005      	beq.n	176b0 <ssd1963_flush+0x290>
   176a4:	2120      	movs	r1, #32
   176a6:	4a1e      	ldr	r2, [pc, #120]	; (17720 <ssd1963_flush+0x300>)
   176a8:	6191      	str	r1, [r2, #24]
        cmd_mode = false;
   176aa:	2100      	movs	r1, #0
   176ac:	4a1d      	ldr	r2, [pc, #116]	; (17724 <ssd1963_flush+0x304>)
   176ae:	7011      	strb	r1, [r2, #0]
		port_base->OUTCLR.reg = pin_mask;
   176b0:	2140      	movs	r1, #64	; 0x40
   176b2:	4a1b      	ldr	r2, [pc, #108]	; (17720 <ssd1963_flush+0x300>)
   176b4:	6151      	str	r1, [r2, #20]
    uint16_t act_w = act_x2 - act_x1 + 1;
   176b6:	464b      	mov	r3, r9
   176b8:	1aed      	subs	r5, r5, r3
   176ba:	3501      	adds	r5, #1
   176bc:	b2ad      	uxth	r5, r5
    for(i = act_y1; i <= act_y2; i++) {
   176be:	45da      	cmp	sl, fp
   176c0:	db0f      	blt.n	176e2 <ssd1963_flush+0x2c2>
        color_p += full_w;
   176c2:	007f      	lsls	r7, r7, #1
        LV_DRV_DISP_PAR_WR_ARRAY((uint16_t *)color_p, act_w);
   176c4:	4b1b      	ldr	r3, [pc, #108]	; (17734 <ssd1963_flush+0x314>)
   176c6:	4698      	mov	r8, r3
   176c8:	9501      	str	r5, [sp, #4]
   176ca:	003d      	movs	r5, r7
   176cc:	4657      	mov	r7, sl
   176ce:	9b01      	ldr	r3, [sp, #4]
   176d0:	0032      	movs	r2, r6
   176d2:	4915      	ldr	r1, [pc, #84]	; (17728 <ssd1963_flush+0x308>)
   176d4:	4815      	ldr	r0, [pc, #84]	; (1772c <ssd1963_flush+0x30c>)
   176d6:	47c0      	blx	r8
        color_p += full_w;
   176d8:	1976      	adds	r6, r6, r5
   176da:	3401      	adds	r4, #1
   176dc:	b224      	sxth	r4, r4
    for(i = act_y1; i <= act_y2; i++) {
   176de:	42a7      	cmp	r7, r4
   176e0:	daf5      	bge.n	176ce <ssd1963_flush+0x2ae>
		port_base->OUTSET.reg = pin_mask;
   176e2:	2240      	movs	r2, #64	; 0x40
   176e4:	4b0e      	ldr	r3, [pc, #56]	; (17720 <ssd1963_flush+0x300>)
   176e6:	619a      	str	r2, [r3, #24]
    lv_disp_flush_ready(disp_drv);
   176e8:	9800      	ldr	r0, [sp, #0]
   176ea:	4b13      	ldr	r3, [pc, #76]	; (17738 <ssd1963_flush+0x318>)
   176ec:	4798      	blx	r3
   176ee:	e6b2      	b.n	17456 <ssd1963_flush+0x36>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
   176f0:	2500      	movs	r5, #0
   176f2:	e6c6      	b.n	17482 <ssd1963_flush+0x62>
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
   176f4:	2400      	movs	r4, #0
   176f6:	e6cc      	b.n	17492 <ssd1963_flush+0x72>
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
   176f8:	4b06      	ldr	r3, [pc, #24]	; (17714 <ssd1963_flush+0x2f4>)
   176fa:	4798      	blx	r3
   176fc:	4b06      	ldr	r3, [pc, #24]	; (17718 <ssd1963_flush+0x2f8>)
   176fe:	4798      	blx	r3
   17700:	1e45      	subs	r5, r0, #1
   17702:	e6d4      	b.n	174ae <ssd1963_flush+0x8e>
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
   17704:	4b03      	ldr	r3, [pc, #12]	; (17714 <ssd1963_flush+0x2f4>)
   17706:	4798      	blx	r3
   17708:	4b04      	ldr	r3, [pc, #16]	; (1771c <ssd1963_flush+0x2fc>)
   1770a:	4798      	blx	r3
   1770c:	1e43      	subs	r3, r0, #1
   1770e:	469a      	mov	sl, r3
   17710:	e6db      	b.n	174ca <ssd1963_flush+0xaa>
   17712:	46c0      	nop			; (mov r8, r8)
   17714:	0000f5a1 	.word	0x0000f5a1
   17718:	0000f5ad 	.word	0x0000f5ad
   1771c:	0000f5d5 	.word	0x0000f5d5
   17720:	41004400 	.word	0x41004400
   17724:	2000005c 	.word	0x2000005c
   17728:	1c03c3f7 	.word	0x1c03c3f7
   1772c:	41004480 	.word	0x41004480
   17730:	000177ad 	.word	0x000177ad
   17734:	000177c5 	.word	0x000177c5
   17738:	0000f671 	.word	0x0000f671

0001773c <p_gpio_init>:
#include "p_gpio.h"

void p_gpio_init(void)
{
   1773c:	b530      	push	{r4, r5, lr}
   1773e:	b083      	sub	sp, #12
	config->powersave  = false;
   17740:	aa01      	add	r2, sp, #4
   17742:	2400      	movs	r4, #0
   17744:	7094      	strb	r4, [r2, #2]
	struct port_config data_port_config;
	port_get_config_defaults(&data_port_config);
	data_port_config.direction = SSD1963_TFT_DATA_DIR;
   17746:	2501      	movs	r5, #1
   17748:	7015      	strb	r5, [r2, #0]
	data_port_config.input_pull = SSD1963_TFT_DATA_PULL;
   1774a:	7054      	strb	r4, [r2, #1]
	port_group_set_config(SSD1963_TFT_DATA_PORT, SSD1963_TFT_DATA_MASK, &data_port_config);
   1774c:	4912      	ldr	r1, [pc, #72]	; (17798 <p_gpio_init+0x5c>)
   1774e:	4813      	ldr	r0, [pc, #76]	; (1779c <p_gpio_init+0x60>)
   17750:	4b13      	ldr	r3, [pc, #76]	; (177a0 <p_gpio_init+0x64>)
   17752:	4798      	blx	r3
   17754:	466b      	mov	r3, sp
   17756:	709c      	strb	r4, [r3, #2]
	
	struct port_config ssd1963_ctrl_pins_conf;
	port_get_config_defaults(&ssd1963_ctrl_pins_conf);
	ssd1963_ctrl_pins_conf.input_pull = PORT_PIN_PULL_NONE;
   17758:	705c      	strb	r4, [r3, #1]
	ssd1963_ctrl_pins_conf.direction = PORT_PIN_DIR_OUTPUT;
   1775a:	701d      	strb	r5, [r3, #0]
	
	port_pin_set_config(SSD1963_TFT_nRST, &ssd1963_ctrl_pins_conf);
   1775c:	4669      	mov	r1, sp
   1775e:	2004      	movs	r0, #4
   17760:	4c10      	ldr	r4, [pc, #64]	; (177a4 <p_gpio_init+0x68>)
   17762:	47a0      	blx	r4
	port_pin_set_config(SSD1963_TFT_RSDC, &ssd1963_ctrl_pins_conf);
   17764:	4669      	mov	r1, sp
   17766:	2005      	movs	r0, #5
   17768:	47a0      	blx	r4
	port_pin_set_config(SSD1963_TFT_nCS, &ssd1963_ctrl_pins_conf);
   1776a:	4669      	mov	r1, sp
   1776c:	2006      	movs	r0, #6
   1776e:	47a0      	blx	r4
	port_pin_set_config(SSD1963_TFT_WR, &ssd1963_ctrl_pins_conf);
   17770:	4669      	mov	r1, sp
   17772:	2007      	movs	r0, #7
   17774:	47a0      	blx	r4
	port_pin_set_config(SSD1963_TFT_RD, &ssd1963_ctrl_pins_conf);
   17776:	4669      	mov	r1, sp
   17778:	200a      	movs	r0, #10
   1777a:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
   1777c:	4b0a      	ldr	r3, [pc, #40]	; (177a8 <p_gpio_init+0x6c>)
   1777e:	2210      	movs	r2, #16
   17780:	619a      	str	r2, [r3, #24]
   17782:	3210      	adds	r2, #16
   17784:	619a      	str	r2, [r3, #24]
   17786:	3220      	adds	r2, #32
   17788:	619a      	str	r2, [r3, #24]
   1778a:	3240      	adds	r2, #64	; 0x40
   1778c:	619a      	str	r2, [r3, #24]
   1778e:	2280      	movs	r2, #128	; 0x80
   17790:	00d2      	lsls	r2, r2, #3
   17792:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1963_TFT_nRST, 1);
	port_pin_set_output_level(SSD1963_TFT_RSDC, 1);
	port_pin_set_output_level(SSD1963_TFT_nCS, 1);
	port_pin_set_output_level(SSD1963_TFT_WR, 1);
	port_pin_set_output_level(SSD1963_TFT_RD, 1);
}
   17794:	b003      	add	sp, #12
   17796:	bd30      	pop	{r4, r5, pc}
   17798:	1c03c3f7 	.word	0x1c03c3f7
   1779c:	41004480 	.word	0x41004480
   177a0:	00000d11 	.word	0x00000d11
   177a4:	00000ced 	.word	0x00000ced
   177a8:	41004400 	.word	0x41004400

000177ac <p_gpio_parallel_wr_word>:
	port->OUTSET.reg = (mask &  level_mask);
   177ac:	0013      	movs	r3, r2
   177ae:	400b      	ands	r3, r1
   177b0:	6183      	str	r3, [r0, #24]
	port->OUTCLR.reg = (mask & ~level_mask);
   177b2:	4391      	bics	r1, r2
   177b4:	6141      	str	r1, [r0, #20]
		port_base->OUTCLR.reg = pin_mask;
   177b6:	4b02      	ldr	r3, [pc, #8]	; (177c0 <p_gpio_parallel_wr_word+0x14>)
   177b8:	2280      	movs	r2, #128	; 0x80
   177ba:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
   177bc:	619a      	str	r2, [r3, #24]
void p_gpio_parallel_wr_word(PortGroup* group, uint32_t mask, uint32_t data)
{
	port_group_set_output_level(group, mask, data);
	port_pin_set_output_level(SSD1963_TFT_WR, 0);
	port_pin_set_output_level(SSD1963_TFT_WR, 1);
}
   177be:	4770      	bx	lr
   177c0:	41004400 	.word	0x41004400

000177c4 <p_gpio_parallel_wr_arr>:

void p_gpio_parallel_wr_arr(PortGroup* group, uint32_t mask, uint32_t* data, uint32_t len)
{
   177c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   177c6:	b083      	sub	sp, #12
   177c8:	9000      	str	r0, [sp, #0]
   177ca:	9101      	str	r1, [sp, #4]
	for(int ind = 0; ind < len; ind++)
   177cc:	2b00      	cmp	r3, #0
   177ce:	d00a      	beq.n	177e6 <p_gpio_parallel_wr_arr+0x22>
   177d0:	0015      	movs	r5, r2
   177d2:	001f      	movs	r7, r3
   177d4:	2400      	movs	r4, #0
	{
		p_gpio_parallel_wr_word(group, mask, data[ind]);
   177d6:	4e05      	ldr	r6, [pc, #20]	; (177ec <p_gpio_parallel_wr_arr+0x28>)
   177d8:	cd04      	ldmia	r5!, {r2}
   177da:	9901      	ldr	r1, [sp, #4]
   177dc:	9800      	ldr	r0, [sp, #0]
   177de:	47b0      	blx	r6
	for(int ind = 0; ind < len; ind++)
   177e0:	3401      	adds	r4, #1
   177e2:	42bc      	cmp	r4, r7
   177e4:	d1f8      	bne.n	177d8 <p_gpio_parallel_wr_arr+0x14>
	}
}
   177e6:	b003      	add	sp, #12
   177e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177ea:	46c0      	nop			; (mov r8, r8)
   177ec:	000177ad 	.word	0x000177ad

000177f0 <p_i2c_init>:
#include "p_i2c.h"

void p_i2c_init(void)
{
	
   177f0:	4770      	bx	lr
	...

000177f4 <p_printf>:
	
	p_printf("Hello WOrld\n");
}

void p_printf(const char* str, ...)
{
   177f4:	b40f      	push	{r0, r1, r2, r3}
   177f6:	b530      	push	{r4, r5, lr}
   177f8:	b0c3      	sub	sp, #268	; 0x10c
   177fa:	ac46      	add	r4, sp, #280	; 0x118
   177fc:	cc20      	ldmia	r4!, {r5}
	volatile uint8_t pprint_buffer[ORACLE_DEBUG_PRINT_BUFF_SIZE + 1];
	memset(pprint_buffer, '\0', ORACLE_DEBUG_PRINT_BUFF_SIZE + 1);
   177fe:	2202      	movs	r2, #2
   17800:	32ff      	adds	r2, #255	; 0xff
   17802:	2100      	movs	r1, #0
   17804:	a801      	add	r0, sp, #4
   17806:	4b0d      	ldr	r3, [pc, #52]	; (1783c <p_printf+0x48>)
   17808:	4798      	blx	r3
	va_list args;
	va_start(args, str);
   1780a:	9400      	str	r4, [sp, #0]
	vsprintf(pprint_buffer, str, args);
   1780c:	0022      	movs	r2, r4
   1780e:	0029      	movs	r1, r5
   17810:	a801      	add	r0, sp, #4
   17812:	4b0b      	ldr	r3, [pc, #44]	; (17840 <p_printf+0x4c>)
   17814:	4798      	blx	r3
	va_end(args);
	uint16_t strsize = (uint16_t)strlen(pprint_buffer);
   17816:	a801      	add	r0, sp, #4
   17818:	4b0a      	ldr	r3, [pc, #40]	; (17844 <p_printf+0x50>)
   1781a:	4798      	blx	r3
   1781c:	b282      	uxth	r2, r0
	if(strsize > ORACLE_DEBUG_PRINT_BUFF_SIZE)
   1781e:	2380      	movs	r3, #128	; 0x80
   17820:	005b      	lsls	r3, r3, #1
   17822:	429a      	cmp	r2, r3
   17824:	d904      	bls.n	17830 <p_printf+0x3c>
	{
		// return error
		return;
	}
	usart_write_buffer_wait(&p_debug_inst, pprint_buffer, strsize);
}
   17826:	b043      	add	sp, #268	; 0x10c
   17828:	bc30      	pop	{r4, r5}
   1782a:	bc08      	pop	{r3}
   1782c:	b004      	add	sp, #16
   1782e:	4718      	bx	r3
	usart_write_buffer_wait(&p_debug_inst, pprint_buffer, strsize);
   17830:	a901      	add	r1, sp, #4
   17832:	4805      	ldr	r0, [pc, #20]	; (17848 <p_printf+0x54>)
   17834:	4b05      	ldr	r3, [pc, #20]	; (1784c <p_printf+0x58>)
   17836:	4798      	blx	r3
   17838:	e7f5      	b.n	17826 <p_printf+0x32>
   1783a:	46c0      	nop			; (mov r8, r8)
   1783c:	00017f2d 	.word	0x00017f2d
   17840:	00017fa1 	.word	0x00017fa1
   17844:	00017f61 	.word	0x00017f61
   17848:	20004c58 	.word	0x20004c58
   1784c:	0000090d 	.word	0x0000090d

00017850 <p_usart_init>:
{
   17850:	b570      	push	{r4, r5, r6, lr}
   17852:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   17854:	2380      	movs	r3, #128	; 0x80
   17856:	05db      	lsls	r3, r3, #23
   17858:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1785a:	2300      	movs	r3, #0
   1785c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
   1785e:	22ff      	movs	r2, #255	; 0xff
   17860:	4669      	mov	r1, sp
   17862:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
   17864:	2200      	movs	r2, #0
   17866:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   17868:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   1786a:	2401      	movs	r4, #1
   1786c:	2124      	movs	r1, #36	; 0x24
   1786e:	4668      	mov	r0, sp
   17870:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
   17872:	3101      	adds	r1, #1
   17874:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
   17876:	3101      	adds	r1, #1
   17878:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
   1787a:	3101      	adds	r1, #1
   1787c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
   1787e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   17880:	3105      	adds	r1, #5
   17882:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
   17884:	3101      	adds	r1, #1
   17886:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   17888:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1788a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1788c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1788e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   17890:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   17892:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
   17894:	2313      	movs	r3, #19
   17896:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   17898:	7742      	strb	r2, [r0, #29]
	p_debug_conf.baudrate =		USART_DEBUG_BAUDRATE;
   1789a:	23e1      	movs	r3, #225	; 0xe1
   1789c:	025b      	lsls	r3, r3, #9
   1789e:	9308      	str	r3, [sp, #32]
	p_debug_conf.pinmux_pad0 =	USART_DEBUG_PINMUX_PAD0;
   178a0:	4b18      	ldr	r3, [pc, #96]	; (17904 <p_usart_init+0xb4>)
   178a2:	930c      	str	r3, [sp, #48]	; 0x30
	p_debug_conf.pinmux_pad1 =	USART_DEBUG_PINMUX_PAD1;
   178a4:	4b18      	ldr	r3, [pc, #96]	; (17908 <p_usart_init+0xb8>)
   178a6:	930d      	str	r3, [sp, #52]	; 0x34
	p_debug_conf.pinmux_pad2 =	USART_DEBUG_PINMUX_PAD2;
   178a8:	2301      	movs	r3, #1
   178aa:	425b      	negs	r3, r3
   178ac:	930e      	str	r3, [sp, #56]	; 0x38
	p_debug_conf.pinmux_pad3 =	USART_DEBUG_PINMUX_PAD3;
   178ae:	930f      	str	r3, [sp, #60]	; 0x3c
	p_debug_conf.mux_setting =	USART_DEBUG_MUX_SETTING;
   178b0:	2380      	movs	r3, #128	; 0x80
   178b2:	035b      	lsls	r3, r3, #13
   178b4:	9303      	str	r3, [sp, #12]
	usart_init(&p_debug_inst, USART_DEBUG_MODULE, &p_debug_conf);
   178b6:	4e15      	ldr	r6, [pc, #84]	; (1790c <p_usart_init+0xbc>)
   178b8:	466a      	mov	r2, sp
   178ba:	4915      	ldr	r1, [pc, #84]	; (17910 <p_usart_init+0xc0>)
   178bc:	0030      	movs	r0, r6
   178be:	4b15      	ldr	r3, [pc, #84]	; (17914 <p_usart_init+0xc4>)
   178c0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   178c2:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   178c4:	0028      	movs	r0, r5
   178c6:	4b14      	ldr	r3, [pc, #80]	; (17918 <p_usart_init+0xc8>)
   178c8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   178ca:	231f      	movs	r3, #31
   178cc:	4018      	ands	r0, r3
   178ce:	4084      	lsls	r4, r0
   178d0:	4b12      	ldr	r3, [pc, #72]	; (1791c <p_usart_init+0xcc>)
   178d2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   178d4:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
   178d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   178d8:	2b00      	cmp	r3, #0
   178da:	d1fc      	bne.n	178d6 <p_usart_init+0x86>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   178dc:	682b      	ldr	r3, [r5, #0]
   178de:	2202      	movs	r2, #2
   178e0:	4313      	orrs	r3, r2
   178e2:	602b      	str	r3, [r5, #0]
	usart_register_callback(&p_debug_inst, p_debug_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
   178e4:	4c09      	ldr	r4, [pc, #36]	; (1790c <p_usart_init+0xbc>)
   178e6:	3a01      	subs	r2, #1
   178e8:	490d      	ldr	r1, [pc, #52]	; (17920 <p_usart_init+0xd0>)
   178ea:	0020      	movs	r0, r4
   178ec:	4b0d      	ldr	r3, [pc, #52]	; (17924 <p_usart_init+0xd4>)
   178ee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   178f0:	2231      	movs	r2, #49	; 0x31
   178f2:	5ca3      	ldrb	r3, [r4, r2]
   178f4:	2102      	movs	r1, #2
   178f6:	430b      	orrs	r3, r1
   178f8:	54a3      	strb	r3, [r4, r2]
	p_printf("Hello WOrld\n");
   178fa:	480b      	ldr	r0, [pc, #44]	; (17928 <p_usart_init+0xd8>)
   178fc:	4b0b      	ldr	r3, [pc, #44]	; (1792c <p_usart_init+0xdc>)
   178fe:	4798      	blx	r3
}
   17900:	b010      	add	sp, #64	; 0x40
   17902:	bd70      	pop	{r4, r5, r6, pc}
   17904:	00160002 	.word	0x00160002
   17908:	00170002 	.word	0x00170002
   1790c:	20004c58 	.word	0x20004c58
   17910:	42001400 	.word	0x42001400
   17914:	000005a9 	.word	0x000005a9
   17918:	00000bb5 	.word	0x00000bb5
   1791c:	e000e100 	.word	0xe000e100
   17920:	00017931 	.word	0x00017931
   17924:	000009c9 	.word	0x000009c9
   17928:	0001ca1c 	.word	0x0001ca1c
   1792c:	000177f5 	.word	0x000177f5

00017930 <p_debug_rx_cb>:
{
   17930:	b510      	push	{r4, lr}
	p_printf("%c", (char)rx_char);
   17932:	4b03      	ldr	r3, [pc, #12]	; (17940 <p_debug_rx_cb+0x10>)
   17934:	8819      	ldrh	r1, [r3, #0]
   17936:	b2c9      	uxtb	r1, r1
   17938:	4802      	ldr	r0, [pc, #8]	; (17944 <p_debug_rx_cb+0x14>)
   1793a:	4b03      	ldr	r3, [pc, #12]	; (17948 <p_debug_rx_cb+0x18>)
   1793c:	4798      	blx	r3
}
   1793e:	bd10      	pop	{r4, pc}
   17940:	20004e30 	.word	0x20004e30
   17944:	0001ca18 	.word	0x0001ca18
   17948:	000177f5 	.word	0x000177f5

0001794c <main>:
/*
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include "oracle.h"
int main (void)
{
   1794c:	b510      	push	{r4, lr}
	oracle_init();
   1794e:	4b02      	ldr	r3, [pc, #8]	; (17958 <main+0xc>)
   17950:	4798      	blx	r3
	
	for(;;)
	{
		oracle_service();
   17952:	4c02      	ldr	r4, [pc, #8]	; (1795c <main+0x10>)
   17954:	47a0      	blx	r4
   17956:	e7fd      	b.n	17954 <main+0x8>
   17958:	00000169 	.word	0x00000169
   1795c:	000001f5 	.word	0x000001f5

00017960 <__udivsi3>:
   17960:	2200      	movs	r2, #0
   17962:	0843      	lsrs	r3, r0, #1
   17964:	428b      	cmp	r3, r1
   17966:	d374      	bcc.n	17a52 <__udivsi3+0xf2>
   17968:	0903      	lsrs	r3, r0, #4
   1796a:	428b      	cmp	r3, r1
   1796c:	d35f      	bcc.n	17a2e <__udivsi3+0xce>
   1796e:	0a03      	lsrs	r3, r0, #8
   17970:	428b      	cmp	r3, r1
   17972:	d344      	bcc.n	179fe <__udivsi3+0x9e>
   17974:	0b03      	lsrs	r3, r0, #12
   17976:	428b      	cmp	r3, r1
   17978:	d328      	bcc.n	179cc <__udivsi3+0x6c>
   1797a:	0c03      	lsrs	r3, r0, #16
   1797c:	428b      	cmp	r3, r1
   1797e:	d30d      	bcc.n	1799c <__udivsi3+0x3c>
   17980:	22ff      	movs	r2, #255	; 0xff
   17982:	0209      	lsls	r1, r1, #8
   17984:	ba12      	rev	r2, r2
   17986:	0c03      	lsrs	r3, r0, #16
   17988:	428b      	cmp	r3, r1
   1798a:	d302      	bcc.n	17992 <__udivsi3+0x32>
   1798c:	1212      	asrs	r2, r2, #8
   1798e:	0209      	lsls	r1, r1, #8
   17990:	d065      	beq.n	17a5e <__udivsi3+0xfe>
   17992:	0b03      	lsrs	r3, r0, #12
   17994:	428b      	cmp	r3, r1
   17996:	d319      	bcc.n	179cc <__udivsi3+0x6c>
   17998:	e000      	b.n	1799c <__udivsi3+0x3c>
   1799a:	0a09      	lsrs	r1, r1, #8
   1799c:	0bc3      	lsrs	r3, r0, #15
   1799e:	428b      	cmp	r3, r1
   179a0:	d301      	bcc.n	179a6 <__udivsi3+0x46>
   179a2:	03cb      	lsls	r3, r1, #15
   179a4:	1ac0      	subs	r0, r0, r3
   179a6:	4152      	adcs	r2, r2
   179a8:	0b83      	lsrs	r3, r0, #14
   179aa:	428b      	cmp	r3, r1
   179ac:	d301      	bcc.n	179b2 <__udivsi3+0x52>
   179ae:	038b      	lsls	r3, r1, #14
   179b0:	1ac0      	subs	r0, r0, r3
   179b2:	4152      	adcs	r2, r2
   179b4:	0b43      	lsrs	r3, r0, #13
   179b6:	428b      	cmp	r3, r1
   179b8:	d301      	bcc.n	179be <__udivsi3+0x5e>
   179ba:	034b      	lsls	r3, r1, #13
   179bc:	1ac0      	subs	r0, r0, r3
   179be:	4152      	adcs	r2, r2
   179c0:	0b03      	lsrs	r3, r0, #12
   179c2:	428b      	cmp	r3, r1
   179c4:	d301      	bcc.n	179ca <__udivsi3+0x6a>
   179c6:	030b      	lsls	r3, r1, #12
   179c8:	1ac0      	subs	r0, r0, r3
   179ca:	4152      	adcs	r2, r2
   179cc:	0ac3      	lsrs	r3, r0, #11
   179ce:	428b      	cmp	r3, r1
   179d0:	d301      	bcc.n	179d6 <__udivsi3+0x76>
   179d2:	02cb      	lsls	r3, r1, #11
   179d4:	1ac0      	subs	r0, r0, r3
   179d6:	4152      	adcs	r2, r2
   179d8:	0a83      	lsrs	r3, r0, #10
   179da:	428b      	cmp	r3, r1
   179dc:	d301      	bcc.n	179e2 <__udivsi3+0x82>
   179de:	028b      	lsls	r3, r1, #10
   179e0:	1ac0      	subs	r0, r0, r3
   179e2:	4152      	adcs	r2, r2
   179e4:	0a43      	lsrs	r3, r0, #9
   179e6:	428b      	cmp	r3, r1
   179e8:	d301      	bcc.n	179ee <__udivsi3+0x8e>
   179ea:	024b      	lsls	r3, r1, #9
   179ec:	1ac0      	subs	r0, r0, r3
   179ee:	4152      	adcs	r2, r2
   179f0:	0a03      	lsrs	r3, r0, #8
   179f2:	428b      	cmp	r3, r1
   179f4:	d301      	bcc.n	179fa <__udivsi3+0x9a>
   179f6:	020b      	lsls	r3, r1, #8
   179f8:	1ac0      	subs	r0, r0, r3
   179fa:	4152      	adcs	r2, r2
   179fc:	d2cd      	bcs.n	1799a <__udivsi3+0x3a>
   179fe:	09c3      	lsrs	r3, r0, #7
   17a00:	428b      	cmp	r3, r1
   17a02:	d301      	bcc.n	17a08 <__udivsi3+0xa8>
   17a04:	01cb      	lsls	r3, r1, #7
   17a06:	1ac0      	subs	r0, r0, r3
   17a08:	4152      	adcs	r2, r2
   17a0a:	0983      	lsrs	r3, r0, #6
   17a0c:	428b      	cmp	r3, r1
   17a0e:	d301      	bcc.n	17a14 <__udivsi3+0xb4>
   17a10:	018b      	lsls	r3, r1, #6
   17a12:	1ac0      	subs	r0, r0, r3
   17a14:	4152      	adcs	r2, r2
   17a16:	0943      	lsrs	r3, r0, #5
   17a18:	428b      	cmp	r3, r1
   17a1a:	d301      	bcc.n	17a20 <__udivsi3+0xc0>
   17a1c:	014b      	lsls	r3, r1, #5
   17a1e:	1ac0      	subs	r0, r0, r3
   17a20:	4152      	adcs	r2, r2
   17a22:	0903      	lsrs	r3, r0, #4
   17a24:	428b      	cmp	r3, r1
   17a26:	d301      	bcc.n	17a2c <__udivsi3+0xcc>
   17a28:	010b      	lsls	r3, r1, #4
   17a2a:	1ac0      	subs	r0, r0, r3
   17a2c:	4152      	adcs	r2, r2
   17a2e:	08c3      	lsrs	r3, r0, #3
   17a30:	428b      	cmp	r3, r1
   17a32:	d301      	bcc.n	17a38 <__udivsi3+0xd8>
   17a34:	00cb      	lsls	r3, r1, #3
   17a36:	1ac0      	subs	r0, r0, r3
   17a38:	4152      	adcs	r2, r2
   17a3a:	0883      	lsrs	r3, r0, #2
   17a3c:	428b      	cmp	r3, r1
   17a3e:	d301      	bcc.n	17a44 <__udivsi3+0xe4>
   17a40:	008b      	lsls	r3, r1, #2
   17a42:	1ac0      	subs	r0, r0, r3
   17a44:	4152      	adcs	r2, r2
   17a46:	0843      	lsrs	r3, r0, #1
   17a48:	428b      	cmp	r3, r1
   17a4a:	d301      	bcc.n	17a50 <__udivsi3+0xf0>
   17a4c:	004b      	lsls	r3, r1, #1
   17a4e:	1ac0      	subs	r0, r0, r3
   17a50:	4152      	adcs	r2, r2
   17a52:	1a41      	subs	r1, r0, r1
   17a54:	d200      	bcs.n	17a58 <__udivsi3+0xf8>
   17a56:	4601      	mov	r1, r0
   17a58:	4152      	adcs	r2, r2
   17a5a:	4610      	mov	r0, r2
   17a5c:	4770      	bx	lr
   17a5e:	e7ff      	b.n	17a60 <__udivsi3+0x100>
   17a60:	b501      	push	{r0, lr}
   17a62:	2000      	movs	r0, #0
   17a64:	f000 f8f0 	bl	17c48 <__aeabi_idiv0>
   17a68:	bd02      	pop	{r1, pc}
   17a6a:	46c0      	nop			; (mov r8, r8)

00017a6c <__aeabi_uidivmod>:
   17a6c:	2900      	cmp	r1, #0
   17a6e:	d0f7      	beq.n	17a60 <__udivsi3+0x100>
   17a70:	e776      	b.n	17960 <__udivsi3>
   17a72:	4770      	bx	lr

00017a74 <__divsi3>:
   17a74:	4603      	mov	r3, r0
   17a76:	430b      	orrs	r3, r1
   17a78:	d47f      	bmi.n	17b7a <__divsi3+0x106>
   17a7a:	2200      	movs	r2, #0
   17a7c:	0843      	lsrs	r3, r0, #1
   17a7e:	428b      	cmp	r3, r1
   17a80:	d374      	bcc.n	17b6c <__divsi3+0xf8>
   17a82:	0903      	lsrs	r3, r0, #4
   17a84:	428b      	cmp	r3, r1
   17a86:	d35f      	bcc.n	17b48 <__divsi3+0xd4>
   17a88:	0a03      	lsrs	r3, r0, #8
   17a8a:	428b      	cmp	r3, r1
   17a8c:	d344      	bcc.n	17b18 <__divsi3+0xa4>
   17a8e:	0b03      	lsrs	r3, r0, #12
   17a90:	428b      	cmp	r3, r1
   17a92:	d328      	bcc.n	17ae6 <__divsi3+0x72>
   17a94:	0c03      	lsrs	r3, r0, #16
   17a96:	428b      	cmp	r3, r1
   17a98:	d30d      	bcc.n	17ab6 <__divsi3+0x42>
   17a9a:	22ff      	movs	r2, #255	; 0xff
   17a9c:	0209      	lsls	r1, r1, #8
   17a9e:	ba12      	rev	r2, r2
   17aa0:	0c03      	lsrs	r3, r0, #16
   17aa2:	428b      	cmp	r3, r1
   17aa4:	d302      	bcc.n	17aac <__divsi3+0x38>
   17aa6:	1212      	asrs	r2, r2, #8
   17aa8:	0209      	lsls	r1, r1, #8
   17aaa:	d065      	beq.n	17b78 <__divsi3+0x104>
   17aac:	0b03      	lsrs	r3, r0, #12
   17aae:	428b      	cmp	r3, r1
   17ab0:	d319      	bcc.n	17ae6 <__divsi3+0x72>
   17ab2:	e000      	b.n	17ab6 <__divsi3+0x42>
   17ab4:	0a09      	lsrs	r1, r1, #8
   17ab6:	0bc3      	lsrs	r3, r0, #15
   17ab8:	428b      	cmp	r3, r1
   17aba:	d301      	bcc.n	17ac0 <__divsi3+0x4c>
   17abc:	03cb      	lsls	r3, r1, #15
   17abe:	1ac0      	subs	r0, r0, r3
   17ac0:	4152      	adcs	r2, r2
   17ac2:	0b83      	lsrs	r3, r0, #14
   17ac4:	428b      	cmp	r3, r1
   17ac6:	d301      	bcc.n	17acc <__divsi3+0x58>
   17ac8:	038b      	lsls	r3, r1, #14
   17aca:	1ac0      	subs	r0, r0, r3
   17acc:	4152      	adcs	r2, r2
   17ace:	0b43      	lsrs	r3, r0, #13
   17ad0:	428b      	cmp	r3, r1
   17ad2:	d301      	bcc.n	17ad8 <__divsi3+0x64>
   17ad4:	034b      	lsls	r3, r1, #13
   17ad6:	1ac0      	subs	r0, r0, r3
   17ad8:	4152      	adcs	r2, r2
   17ada:	0b03      	lsrs	r3, r0, #12
   17adc:	428b      	cmp	r3, r1
   17ade:	d301      	bcc.n	17ae4 <__divsi3+0x70>
   17ae0:	030b      	lsls	r3, r1, #12
   17ae2:	1ac0      	subs	r0, r0, r3
   17ae4:	4152      	adcs	r2, r2
   17ae6:	0ac3      	lsrs	r3, r0, #11
   17ae8:	428b      	cmp	r3, r1
   17aea:	d301      	bcc.n	17af0 <__divsi3+0x7c>
   17aec:	02cb      	lsls	r3, r1, #11
   17aee:	1ac0      	subs	r0, r0, r3
   17af0:	4152      	adcs	r2, r2
   17af2:	0a83      	lsrs	r3, r0, #10
   17af4:	428b      	cmp	r3, r1
   17af6:	d301      	bcc.n	17afc <__divsi3+0x88>
   17af8:	028b      	lsls	r3, r1, #10
   17afa:	1ac0      	subs	r0, r0, r3
   17afc:	4152      	adcs	r2, r2
   17afe:	0a43      	lsrs	r3, r0, #9
   17b00:	428b      	cmp	r3, r1
   17b02:	d301      	bcc.n	17b08 <__divsi3+0x94>
   17b04:	024b      	lsls	r3, r1, #9
   17b06:	1ac0      	subs	r0, r0, r3
   17b08:	4152      	adcs	r2, r2
   17b0a:	0a03      	lsrs	r3, r0, #8
   17b0c:	428b      	cmp	r3, r1
   17b0e:	d301      	bcc.n	17b14 <__divsi3+0xa0>
   17b10:	020b      	lsls	r3, r1, #8
   17b12:	1ac0      	subs	r0, r0, r3
   17b14:	4152      	adcs	r2, r2
   17b16:	d2cd      	bcs.n	17ab4 <__divsi3+0x40>
   17b18:	09c3      	lsrs	r3, r0, #7
   17b1a:	428b      	cmp	r3, r1
   17b1c:	d301      	bcc.n	17b22 <__divsi3+0xae>
   17b1e:	01cb      	lsls	r3, r1, #7
   17b20:	1ac0      	subs	r0, r0, r3
   17b22:	4152      	adcs	r2, r2
   17b24:	0983      	lsrs	r3, r0, #6
   17b26:	428b      	cmp	r3, r1
   17b28:	d301      	bcc.n	17b2e <__divsi3+0xba>
   17b2a:	018b      	lsls	r3, r1, #6
   17b2c:	1ac0      	subs	r0, r0, r3
   17b2e:	4152      	adcs	r2, r2
   17b30:	0943      	lsrs	r3, r0, #5
   17b32:	428b      	cmp	r3, r1
   17b34:	d301      	bcc.n	17b3a <__divsi3+0xc6>
   17b36:	014b      	lsls	r3, r1, #5
   17b38:	1ac0      	subs	r0, r0, r3
   17b3a:	4152      	adcs	r2, r2
   17b3c:	0903      	lsrs	r3, r0, #4
   17b3e:	428b      	cmp	r3, r1
   17b40:	d301      	bcc.n	17b46 <__divsi3+0xd2>
   17b42:	010b      	lsls	r3, r1, #4
   17b44:	1ac0      	subs	r0, r0, r3
   17b46:	4152      	adcs	r2, r2
   17b48:	08c3      	lsrs	r3, r0, #3
   17b4a:	428b      	cmp	r3, r1
   17b4c:	d301      	bcc.n	17b52 <__divsi3+0xde>
   17b4e:	00cb      	lsls	r3, r1, #3
   17b50:	1ac0      	subs	r0, r0, r3
   17b52:	4152      	adcs	r2, r2
   17b54:	0883      	lsrs	r3, r0, #2
   17b56:	428b      	cmp	r3, r1
   17b58:	d301      	bcc.n	17b5e <__divsi3+0xea>
   17b5a:	008b      	lsls	r3, r1, #2
   17b5c:	1ac0      	subs	r0, r0, r3
   17b5e:	4152      	adcs	r2, r2
   17b60:	0843      	lsrs	r3, r0, #1
   17b62:	428b      	cmp	r3, r1
   17b64:	d301      	bcc.n	17b6a <__divsi3+0xf6>
   17b66:	004b      	lsls	r3, r1, #1
   17b68:	1ac0      	subs	r0, r0, r3
   17b6a:	4152      	adcs	r2, r2
   17b6c:	1a41      	subs	r1, r0, r1
   17b6e:	d200      	bcs.n	17b72 <__divsi3+0xfe>
   17b70:	4601      	mov	r1, r0
   17b72:	4152      	adcs	r2, r2
   17b74:	4610      	mov	r0, r2
   17b76:	4770      	bx	lr
   17b78:	e05d      	b.n	17c36 <__divsi3+0x1c2>
   17b7a:	0fca      	lsrs	r2, r1, #31
   17b7c:	d000      	beq.n	17b80 <__divsi3+0x10c>
   17b7e:	4249      	negs	r1, r1
   17b80:	1003      	asrs	r3, r0, #32
   17b82:	d300      	bcc.n	17b86 <__divsi3+0x112>
   17b84:	4240      	negs	r0, r0
   17b86:	4053      	eors	r3, r2
   17b88:	2200      	movs	r2, #0
   17b8a:	469c      	mov	ip, r3
   17b8c:	0903      	lsrs	r3, r0, #4
   17b8e:	428b      	cmp	r3, r1
   17b90:	d32d      	bcc.n	17bee <__divsi3+0x17a>
   17b92:	0a03      	lsrs	r3, r0, #8
   17b94:	428b      	cmp	r3, r1
   17b96:	d312      	bcc.n	17bbe <__divsi3+0x14a>
   17b98:	22fc      	movs	r2, #252	; 0xfc
   17b9a:	0189      	lsls	r1, r1, #6
   17b9c:	ba12      	rev	r2, r2
   17b9e:	0a03      	lsrs	r3, r0, #8
   17ba0:	428b      	cmp	r3, r1
   17ba2:	d30c      	bcc.n	17bbe <__divsi3+0x14a>
   17ba4:	0189      	lsls	r1, r1, #6
   17ba6:	1192      	asrs	r2, r2, #6
   17ba8:	428b      	cmp	r3, r1
   17baa:	d308      	bcc.n	17bbe <__divsi3+0x14a>
   17bac:	0189      	lsls	r1, r1, #6
   17bae:	1192      	asrs	r2, r2, #6
   17bb0:	428b      	cmp	r3, r1
   17bb2:	d304      	bcc.n	17bbe <__divsi3+0x14a>
   17bb4:	0189      	lsls	r1, r1, #6
   17bb6:	d03a      	beq.n	17c2e <__divsi3+0x1ba>
   17bb8:	1192      	asrs	r2, r2, #6
   17bba:	e000      	b.n	17bbe <__divsi3+0x14a>
   17bbc:	0989      	lsrs	r1, r1, #6
   17bbe:	09c3      	lsrs	r3, r0, #7
   17bc0:	428b      	cmp	r3, r1
   17bc2:	d301      	bcc.n	17bc8 <__divsi3+0x154>
   17bc4:	01cb      	lsls	r3, r1, #7
   17bc6:	1ac0      	subs	r0, r0, r3
   17bc8:	4152      	adcs	r2, r2
   17bca:	0983      	lsrs	r3, r0, #6
   17bcc:	428b      	cmp	r3, r1
   17bce:	d301      	bcc.n	17bd4 <__divsi3+0x160>
   17bd0:	018b      	lsls	r3, r1, #6
   17bd2:	1ac0      	subs	r0, r0, r3
   17bd4:	4152      	adcs	r2, r2
   17bd6:	0943      	lsrs	r3, r0, #5
   17bd8:	428b      	cmp	r3, r1
   17bda:	d301      	bcc.n	17be0 <__divsi3+0x16c>
   17bdc:	014b      	lsls	r3, r1, #5
   17bde:	1ac0      	subs	r0, r0, r3
   17be0:	4152      	adcs	r2, r2
   17be2:	0903      	lsrs	r3, r0, #4
   17be4:	428b      	cmp	r3, r1
   17be6:	d301      	bcc.n	17bec <__divsi3+0x178>
   17be8:	010b      	lsls	r3, r1, #4
   17bea:	1ac0      	subs	r0, r0, r3
   17bec:	4152      	adcs	r2, r2
   17bee:	08c3      	lsrs	r3, r0, #3
   17bf0:	428b      	cmp	r3, r1
   17bf2:	d301      	bcc.n	17bf8 <__divsi3+0x184>
   17bf4:	00cb      	lsls	r3, r1, #3
   17bf6:	1ac0      	subs	r0, r0, r3
   17bf8:	4152      	adcs	r2, r2
   17bfa:	0883      	lsrs	r3, r0, #2
   17bfc:	428b      	cmp	r3, r1
   17bfe:	d301      	bcc.n	17c04 <__divsi3+0x190>
   17c00:	008b      	lsls	r3, r1, #2
   17c02:	1ac0      	subs	r0, r0, r3
   17c04:	4152      	adcs	r2, r2
   17c06:	d2d9      	bcs.n	17bbc <__divsi3+0x148>
   17c08:	0843      	lsrs	r3, r0, #1
   17c0a:	428b      	cmp	r3, r1
   17c0c:	d301      	bcc.n	17c12 <__divsi3+0x19e>
   17c0e:	004b      	lsls	r3, r1, #1
   17c10:	1ac0      	subs	r0, r0, r3
   17c12:	4152      	adcs	r2, r2
   17c14:	1a41      	subs	r1, r0, r1
   17c16:	d200      	bcs.n	17c1a <__divsi3+0x1a6>
   17c18:	4601      	mov	r1, r0
   17c1a:	4663      	mov	r3, ip
   17c1c:	4152      	adcs	r2, r2
   17c1e:	105b      	asrs	r3, r3, #1
   17c20:	4610      	mov	r0, r2
   17c22:	d301      	bcc.n	17c28 <__divsi3+0x1b4>
   17c24:	4240      	negs	r0, r0
   17c26:	2b00      	cmp	r3, #0
   17c28:	d500      	bpl.n	17c2c <__divsi3+0x1b8>
   17c2a:	4249      	negs	r1, r1
   17c2c:	4770      	bx	lr
   17c2e:	4663      	mov	r3, ip
   17c30:	105b      	asrs	r3, r3, #1
   17c32:	d300      	bcc.n	17c36 <__divsi3+0x1c2>
   17c34:	4240      	negs	r0, r0
   17c36:	b501      	push	{r0, lr}
   17c38:	2000      	movs	r0, #0
   17c3a:	f000 f805 	bl	17c48 <__aeabi_idiv0>
   17c3e:	bd02      	pop	{r1, pc}

00017c40 <__aeabi_idivmod>:
   17c40:	2900      	cmp	r1, #0
   17c42:	d0f8      	beq.n	17c36 <__divsi3+0x1c2>
   17c44:	e716      	b.n	17a74 <__divsi3>
   17c46:	4770      	bx	lr

00017c48 <__aeabi_idiv0>:
   17c48:	4770      	bx	lr
   17c4a:	46c0      	nop			; (mov r8, r8)

00017c4c <__aeabi_uldivmod>:
   17c4c:	2b00      	cmp	r3, #0
   17c4e:	d111      	bne.n	17c74 <__aeabi_uldivmod+0x28>
   17c50:	2a00      	cmp	r2, #0
   17c52:	d10f      	bne.n	17c74 <__aeabi_uldivmod+0x28>
   17c54:	2900      	cmp	r1, #0
   17c56:	d100      	bne.n	17c5a <__aeabi_uldivmod+0xe>
   17c58:	2800      	cmp	r0, #0
   17c5a:	d002      	beq.n	17c62 <__aeabi_uldivmod+0x16>
   17c5c:	2100      	movs	r1, #0
   17c5e:	43c9      	mvns	r1, r1
   17c60:	1c08      	adds	r0, r1, #0
   17c62:	b407      	push	{r0, r1, r2}
   17c64:	4802      	ldr	r0, [pc, #8]	; (17c70 <__aeabi_uldivmod+0x24>)
   17c66:	a102      	add	r1, pc, #8	; (adr r1, 17c70 <__aeabi_uldivmod+0x24>)
   17c68:	1840      	adds	r0, r0, r1
   17c6a:	9002      	str	r0, [sp, #8]
   17c6c:	bd03      	pop	{r0, r1, pc}
   17c6e:	46c0      	nop			; (mov r8, r8)
   17c70:	ffffffd9 	.word	0xffffffd9
   17c74:	b403      	push	{r0, r1}
   17c76:	4668      	mov	r0, sp
   17c78:	b501      	push	{r0, lr}
   17c7a:	9802      	ldr	r0, [sp, #8]
   17c7c:	f000 f830 	bl	17ce0 <__udivmoddi4>
   17c80:	9b01      	ldr	r3, [sp, #4]
   17c82:	469e      	mov	lr, r3
   17c84:	b002      	add	sp, #8
   17c86:	bc0c      	pop	{r2, r3}
   17c88:	4770      	bx	lr
   17c8a:	46c0      	nop			; (mov r8, r8)

00017c8c <__aeabi_lmul>:
   17c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c8e:	46ce      	mov	lr, r9
   17c90:	4647      	mov	r7, r8
   17c92:	0415      	lsls	r5, r2, #16
   17c94:	0c2d      	lsrs	r5, r5, #16
   17c96:	002e      	movs	r6, r5
   17c98:	b580      	push	{r7, lr}
   17c9a:	0407      	lsls	r7, r0, #16
   17c9c:	0c14      	lsrs	r4, r2, #16
   17c9e:	0c3f      	lsrs	r7, r7, #16
   17ca0:	4699      	mov	r9, r3
   17ca2:	0c03      	lsrs	r3, r0, #16
   17ca4:	437e      	muls	r6, r7
   17ca6:	435d      	muls	r5, r3
   17ca8:	4367      	muls	r7, r4
   17caa:	4363      	muls	r3, r4
   17cac:	197f      	adds	r7, r7, r5
   17cae:	0c34      	lsrs	r4, r6, #16
   17cb0:	19e4      	adds	r4, r4, r7
   17cb2:	469c      	mov	ip, r3
   17cb4:	42a5      	cmp	r5, r4
   17cb6:	d903      	bls.n	17cc0 <__aeabi_lmul+0x34>
   17cb8:	2380      	movs	r3, #128	; 0x80
   17cba:	025b      	lsls	r3, r3, #9
   17cbc:	4698      	mov	r8, r3
   17cbe:	44c4      	add	ip, r8
   17cc0:	464b      	mov	r3, r9
   17cc2:	4351      	muls	r1, r2
   17cc4:	4343      	muls	r3, r0
   17cc6:	0436      	lsls	r6, r6, #16
   17cc8:	0c36      	lsrs	r6, r6, #16
   17cca:	0c25      	lsrs	r5, r4, #16
   17ccc:	0424      	lsls	r4, r4, #16
   17cce:	4465      	add	r5, ip
   17cd0:	19a4      	adds	r4, r4, r6
   17cd2:	1859      	adds	r1, r3, r1
   17cd4:	1949      	adds	r1, r1, r5
   17cd6:	0020      	movs	r0, r4
   17cd8:	bc0c      	pop	{r2, r3}
   17cda:	4690      	mov	r8, r2
   17cdc:	4699      	mov	r9, r3
   17cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017ce0 <__udivmoddi4>:
   17ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ce2:	4657      	mov	r7, sl
   17ce4:	464e      	mov	r6, r9
   17ce6:	4645      	mov	r5, r8
   17ce8:	46de      	mov	lr, fp
   17cea:	b5e0      	push	{r5, r6, r7, lr}
   17cec:	0004      	movs	r4, r0
   17cee:	b083      	sub	sp, #12
   17cf0:	000d      	movs	r5, r1
   17cf2:	4692      	mov	sl, r2
   17cf4:	4699      	mov	r9, r3
   17cf6:	428b      	cmp	r3, r1
   17cf8:	d82f      	bhi.n	17d5a <__udivmoddi4+0x7a>
   17cfa:	d02c      	beq.n	17d56 <__udivmoddi4+0x76>
   17cfc:	4649      	mov	r1, r9
   17cfe:	4650      	mov	r0, sl
   17d00:	f000 f8cc 	bl	17e9c <__clzdi2>
   17d04:	0029      	movs	r1, r5
   17d06:	0006      	movs	r6, r0
   17d08:	0020      	movs	r0, r4
   17d0a:	f000 f8c7 	bl	17e9c <__clzdi2>
   17d0e:	1a33      	subs	r3, r6, r0
   17d10:	4698      	mov	r8, r3
   17d12:	3b20      	subs	r3, #32
   17d14:	469b      	mov	fp, r3
   17d16:	d500      	bpl.n	17d1a <__udivmoddi4+0x3a>
   17d18:	e074      	b.n	17e04 <__udivmoddi4+0x124>
   17d1a:	4653      	mov	r3, sl
   17d1c:	465a      	mov	r2, fp
   17d1e:	4093      	lsls	r3, r2
   17d20:	001f      	movs	r7, r3
   17d22:	4653      	mov	r3, sl
   17d24:	4642      	mov	r2, r8
   17d26:	4093      	lsls	r3, r2
   17d28:	001e      	movs	r6, r3
   17d2a:	42af      	cmp	r7, r5
   17d2c:	d829      	bhi.n	17d82 <__udivmoddi4+0xa2>
   17d2e:	d026      	beq.n	17d7e <__udivmoddi4+0x9e>
   17d30:	465b      	mov	r3, fp
   17d32:	1ba4      	subs	r4, r4, r6
   17d34:	41bd      	sbcs	r5, r7
   17d36:	2b00      	cmp	r3, #0
   17d38:	da00      	bge.n	17d3c <__udivmoddi4+0x5c>
   17d3a:	e079      	b.n	17e30 <__udivmoddi4+0x150>
   17d3c:	2200      	movs	r2, #0
   17d3e:	2300      	movs	r3, #0
   17d40:	9200      	str	r2, [sp, #0]
   17d42:	9301      	str	r3, [sp, #4]
   17d44:	2301      	movs	r3, #1
   17d46:	465a      	mov	r2, fp
   17d48:	4093      	lsls	r3, r2
   17d4a:	9301      	str	r3, [sp, #4]
   17d4c:	2301      	movs	r3, #1
   17d4e:	4642      	mov	r2, r8
   17d50:	4093      	lsls	r3, r2
   17d52:	9300      	str	r3, [sp, #0]
   17d54:	e019      	b.n	17d8a <__udivmoddi4+0xaa>
   17d56:	4282      	cmp	r2, r0
   17d58:	d9d0      	bls.n	17cfc <__udivmoddi4+0x1c>
   17d5a:	2200      	movs	r2, #0
   17d5c:	2300      	movs	r3, #0
   17d5e:	9200      	str	r2, [sp, #0]
   17d60:	9301      	str	r3, [sp, #4]
   17d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17d64:	2b00      	cmp	r3, #0
   17d66:	d001      	beq.n	17d6c <__udivmoddi4+0x8c>
   17d68:	601c      	str	r4, [r3, #0]
   17d6a:	605d      	str	r5, [r3, #4]
   17d6c:	9800      	ldr	r0, [sp, #0]
   17d6e:	9901      	ldr	r1, [sp, #4]
   17d70:	b003      	add	sp, #12
   17d72:	bc3c      	pop	{r2, r3, r4, r5}
   17d74:	4690      	mov	r8, r2
   17d76:	4699      	mov	r9, r3
   17d78:	46a2      	mov	sl, r4
   17d7a:	46ab      	mov	fp, r5
   17d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d7e:	42a3      	cmp	r3, r4
   17d80:	d9d6      	bls.n	17d30 <__udivmoddi4+0x50>
   17d82:	2200      	movs	r2, #0
   17d84:	2300      	movs	r3, #0
   17d86:	9200      	str	r2, [sp, #0]
   17d88:	9301      	str	r3, [sp, #4]
   17d8a:	4643      	mov	r3, r8
   17d8c:	2b00      	cmp	r3, #0
   17d8e:	d0e8      	beq.n	17d62 <__udivmoddi4+0x82>
   17d90:	07fb      	lsls	r3, r7, #31
   17d92:	0872      	lsrs	r2, r6, #1
   17d94:	431a      	orrs	r2, r3
   17d96:	4646      	mov	r6, r8
   17d98:	087b      	lsrs	r3, r7, #1
   17d9a:	e00e      	b.n	17dba <__udivmoddi4+0xda>
   17d9c:	42ab      	cmp	r3, r5
   17d9e:	d101      	bne.n	17da4 <__udivmoddi4+0xc4>
   17da0:	42a2      	cmp	r2, r4
   17da2:	d80c      	bhi.n	17dbe <__udivmoddi4+0xde>
   17da4:	1aa4      	subs	r4, r4, r2
   17da6:	419d      	sbcs	r5, r3
   17da8:	2001      	movs	r0, #1
   17daa:	1924      	adds	r4, r4, r4
   17dac:	416d      	adcs	r5, r5
   17dae:	2100      	movs	r1, #0
   17db0:	3e01      	subs	r6, #1
   17db2:	1824      	adds	r4, r4, r0
   17db4:	414d      	adcs	r5, r1
   17db6:	2e00      	cmp	r6, #0
   17db8:	d006      	beq.n	17dc8 <__udivmoddi4+0xe8>
   17dba:	42ab      	cmp	r3, r5
   17dbc:	d9ee      	bls.n	17d9c <__udivmoddi4+0xbc>
   17dbe:	3e01      	subs	r6, #1
   17dc0:	1924      	adds	r4, r4, r4
   17dc2:	416d      	adcs	r5, r5
   17dc4:	2e00      	cmp	r6, #0
   17dc6:	d1f8      	bne.n	17dba <__udivmoddi4+0xda>
   17dc8:	465b      	mov	r3, fp
   17dca:	9800      	ldr	r0, [sp, #0]
   17dcc:	9901      	ldr	r1, [sp, #4]
   17dce:	1900      	adds	r0, r0, r4
   17dd0:	4169      	adcs	r1, r5
   17dd2:	2b00      	cmp	r3, #0
   17dd4:	db22      	blt.n	17e1c <__udivmoddi4+0x13c>
   17dd6:	002b      	movs	r3, r5
   17dd8:	465a      	mov	r2, fp
   17dda:	40d3      	lsrs	r3, r2
   17ddc:	002a      	movs	r2, r5
   17dde:	4644      	mov	r4, r8
   17de0:	40e2      	lsrs	r2, r4
   17de2:	001c      	movs	r4, r3
   17de4:	465b      	mov	r3, fp
   17de6:	0015      	movs	r5, r2
   17de8:	2b00      	cmp	r3, #0
   17dea:	db2c      	blt.n	17e46 <__udivmoddi4+0x166>
   17dec:	0026      	movs	r6, r4
   17dee:	409e      	lsls	r6, r3
   17df0:	0033      	movs	r3, r6
   17df2:	0026      	movs	r6, r4
   17df4:	4647      	mov	r7, r8
   17df6:	40be      	lsls	r6, r7
   17df8:	0032      	movs	r2, r6
   17dfa:	1a80      	subs	r0, r0, r2
   17dfc:	4199      	sbcs	r1, r3
   17dfe:	9000      	str	r0, [sp, #0]
   17e00:	9101      	str	r1, [sp, #4]
   17e02:	e7ae      	b.n	17d62 <__udivmoddi4+0x82>
   17e04:	4642      	mov	r2, r8
   17e06:	2320      	movs	r3, #32
   17e08:	1a9b      	subs	r3, r3, r2
   17e0a:	4652      	mov	r2, sl
   17e0c:	40da      	lsrs	r2, r3
   17e0e:	4641      	mov	r1, r8
   17e10:	0013      	movs	r3, r2
   17e12:	464a      	mov	r2, r9
   17e14:	408a      	lsls	r2, r1
   17e16:	0017      	movs	r7, r2
   17e18:	431f      	orrs	r7, r3
   17e1a:	e782      	b.n	17d22 <__udivmoddi4+0x42>
   17e1c:	4642      	mov	r2, r8
   17e1e:	2320      	movs	r3, #32
   17e20:	1a9b      	subs	r3, r3, r2
   17e22:	002a      	movs	r2, r5
   17e24:	4646      	mov	r6, r8
   17e26:	409a      	lsls	r2, r3
   17e28:	0023      	movs	r3, r4
   17e2a:	40f3      	lsrs	r3, r6
   17e2c:	4313      	orrs	r3, r2
   17e2e:	e7d5      	b.n	17ddc <__udivmoddi4+0xfc>
   17e30:	4642      	mov	r2, r8
   17e32:	2320      	movs	r3, #32
   17e34:	2100      	movs	r1, #0
   17e36:	1a9b      	subs	r3, r3, r2
   17e38:	2200      	movs	r2, #0
   17e3a:	9100      	str	r1, [sp, #0]
   17e3c:	9201      	str	r2, [sp, #4]
   17e3e:	2201      	movs	r2, #1
   17e40:	40da      	lsrs	r2, r3
   17e42:	9201      	str	r2, [sp, #4]
   17e44:	e782      	b.n	17d4c <__udivmoddi4+0x6c>
   17e46:	4642      	mov	r2, r8
   17e48:	2320      	movs	r3, #32
   17e4a:	0026      	movs	r6, r4
   17e4c:	1a9b      	subs	r3, r3, r2
   17e4e:	40de      	lsrs	r6, r3
   17e50:	002f      	movs	r7, r5
   17e52:	46b4      	mov	ip, r6
   17e54:	4097      	lsls	r7, r2
   17e56:	4666      	mov	r6, ip
   17e58:	003b      	movs	r3, r7
   17e5a:	4333      	orrs	r3, r6
   17e5c:	e7c9      	b.n	17df2 <__udivmoddi4+0x112>
   17e5e:	46c0      	nop			; (mov r8, r8)

00017e60 <__clzsi2>:
   17e60:	211c      	movs	r1, #28
   17e62:	2301      	movs	r3, #1
   17e64:	041b      	lsls	r3, r3, #16
   17e66:	4298      	cmp	r0, r3
   17e68:	d301      	bcc.n	17e6e <__clzsi2+0xe>
   17e6a:	0c00      	lsrs	r0, r0, #16
   17e6c:	3910      	subs	r1, #16
   17e6e:	0a1b      	lsrs	r3, r3, #8
   17e70:	4298      	cmp	r0, r3
   17e72:	d301      	bcc.n	17e78 <__clzsi2+0x18>
   17e74:	0a00      	lsrs	r0, r0, #8
   17e76:	3908      	subs	r1, #8
   17e78:	091b      	lsrs	r3, r3, #4
   17e7a:	4298      	cmp	r0, r3
   17e7c:	d301      	bcc.n	17e82 <__clzsi2+0x22>
   17e7e:	0900      	lsrs	r0, r0, #4
   17e80:	3904      	subs	r1, #4
   17e82:	a202      	add	r2, pc, #8	; (adr r2, 17e8c <__clzsi2+0x2c>)
   17e84:	5c10      	ldrb	r0, [r2, r0]
   17e86:	1840      	adds	r0, r0, r1
   17e88:	4770      	bx	lr
   17e8a:	46c0      	nop			; (mov r8, r8)
   17e8c:	02020304 	.word	0x02020304
   17e90:	01010101 	.word	0x01010101
	...

00017e9c <__clzdi2>:
   17e9c:	b510      	push	{r4, lr}
   17e9e:	2900      	cmp	r1, #0
   17ea0:	d103      	bne.n	17eaa <__clzdi2+0xe>
   17ea2:	f7ff ffdd 	bl	17e60 <__clzsi2>
   17ea6:	3020      	adds	r0, #32
   17ea8:	e002      	b.n	17eb0 <__clzdi2+0x14>
   17eaa:	1c08      	adds	r0, r1, #0
   17eac:	f7ff ffd8 	bl	17e60 <__clzsi2>
   17eb0:	bd10      	pop	{r4, pc}
   17eb2:	46c0      	nop			; (mov r8, r8)

00017eb4 <__libc_init_array>:
   17eb4:	b570      	push	{r4, r5, r6, lr}
   17eb6:	2600      	movs	r6, #0
   17eb8:	4d0c      	ldr	r5, [pc, #48]	; (17eec <__libc_init_array+0x38>)
   17eba:	4c0d      	ldr	r4, [pc, #52]	; (17ef0 <__libc_init_array+0x3c>)
   17ebc:	1b64      	subs	r4, r4, r5
   17ebe:	10a4      	asrs	r4, r4, #2
   17ec0:	42a6      	cmp	r6, r4
   17ec2:	d109      	bne.n	17ed8 <__libc_init_array+0x24>
   17ec4:	2600      	movs	r6, #0
   17ec6:	f004 fdcb 	bl	1ca60 <_init>
   17eca:	4d0a      	ldr	r5, [pc, #40]	; (17ef4 <__libc_init_array+0x40>)
   17ecc:	4c0a      	ldr	r4, [pc, #40]	; (17ef8 <__libc_init_array+0x44>)
   17ece:	1b64      	subs	r4, r4, r5
   17ed0:	10a4      	asrs	r4, r4, #2
   17ed2:	42a6      	cmp	r6, r4
   17ed4:	d105      	bne.n	17ee2 <__libc_init_array+0x2e>
   17ed6:	bd70      	pop	{r4, r5, r6, pc}
   17ed8:	00b3      	lsls	r3, r6, #2
   17eda:	58eb      	ldr	r3, [r5, r3]
   17edc:	4798      	blx	r3
   17ede:	3601      	adds	r6, #1
   17ee0:	e7ee      	b.n	17ec0 <__libc_init_array+0xc>
   17ee2:	00b3      	lsls	r3, r6, #2
   17ee4:	58eb      	ldr	r3, [r5, r3]
   17ee6:	4798      	blx	r3
   17ee8:	3601      	adds	r6, #1
   17eea:	e7f2      	b.n	17ed2 <__libc_init_array+0x1e>
   17eec:	0001ca6c 	.word	0x0001ca6c
   17ef0:	0001ca6c 	.word	0x0001ca6c
   17ef4:	0001ca6c 	.word	0x0001ca6c
   17ef8:	0001ca70 	.word	0x0001ca70

00017efc <memcmp>:
   17efc:	b530      	push	{r4, r5, lr}
   17efe:	2400      	movs	r4, #0
   17f00:	42a2      	cmp	r2, r4
   17f02:	d101      	bne.n	17f08 <memcmp+0xc>
   17f04:	2000      	movs	r0, #0
   17f06:	e005      	b.n	17f14 <memcmp+0x18>
   17f08:	5d03      	ldrb	r3, [r0, r4]
   17f0a:	1c65      	adds	r5, r4, #1
   17f0c:	5d0c      	ldrb	r4, [r1, r4]
   17f0e:	42a3      	cmp	r3, r4
   17f10:	d001      	beq.n	17f16 <memcmp+0x1a>
   17f12:	1b18      	subs	r0, r3, r4
   17f14:	bd30      	pop	{r4, r5, pc}
   17f16:	002c      	movs	r4, r5
   17f18:	e7f2      	b.n	17f00 <memcmp+0x4>

00017f1a <memcpy>:
   17f1a:	2300      	movs	r3, #0
   17f1c:	b510      	push	{r4, lr}
   17f1e:	429a      	cmp	r2, r3
   17f20:	d100      	bne.n	17f24 <memcpy+0xa>
   17f22:	bd10      	pop	{r4, pc}
   17f24:	5ccc      	ldrb	r4, [r1, r3]
   17f26:	54c4      	strb	r4, [r0, r3]
   17f28:	3301      	adds	r3, #1
   17f2a:	e7f8      	b.n	17f1e <memcpy+0x4>

00017f2c <memset>:
   17f2c:	0003      	movs	r3, r0
   17f2e:	1882      	adds	r2, r0, r2
   17f30:	4293      	cmp	r3, r2
   17f32:	d100      	bne.n	17f36 <memset+0xa>
   17f34:	4770      	bx	lr
   17f36:	7019      	strb	r1, [r3, #0]
   17f38:	3301      	adds	r3, #1
   17f3a:	e7f9      	b.n	17f30 <memset+0x4>

00017f3c <strcmp>:
   17f3c:	7802      	ldrb	r2, [r0, #0]
   17f3e:	780b      	ldrb	r3, [r1, #0]
   17f40:	2a00      	cmp	r2, #0
   17f42:	d003      	beq.n	17f4c <strcmp+0x10>
   17f44:	3001      	adds	r0, #1
   17f46:	3101      	adds	r1, #1
   17f48:	429a      	cmp	r2, r3
   17f4a:	d0f7      	beq.n	17f3c <strcmp>
   17f4c:	1ad0      	subs	r0, r2, r3
   17f4e:	4770      	bx	lr

00017f50 <strcpy>:
   17f50:	1c03      	adds	r3, r0, #0
   17f52:	780a      	ldrb	r2, [r1, #0]
   17f54:	3101      	adds	r1, #1
   17f56:	701a      	strb	r2, [r3, #0]
   17f58:	3301      	adds	r3, #1
   17f5a:	2a00      	cmp	r2, #0
   17f5c:	d1f9      	bne.n	17f52 <strcpy+0x2>
   17f5e:	4770      	bx	lr

00017f60 <strlen>:
   17f60:	2300      	movs	r3, #0
   17f62:	5cc2      	ldrb	r2, [r0, r3]
   17f64:	3301      	adds	r3, #1
   17f66:	2a00      	cmp	r2, #0
   17f68:	d1fb      	bne.n	17f62 <strlen+0x2>
   17f6a:	1e58      	subs	r0, r3, #1
   17f6c:	4770      	bx	lr
	...

00017f70 <_vsiprintf_r>:
   17f70:	b530      	push	{r4, r5, lr}
   17f72:	b09b      	sub	sp, #108	; 0x6c
   17f74:	9100      	str	r1, [sp, #0]
   17f76:	9104      	str	r1, [sp, #16]
   17f78:	4908      	ldr	r1, [pc, #32]	; (17f9c <_vsiprintf_r+0x2c>)
   17f7a:	466d      	mov	r5, sp
   17f7c:	9102      	str	r1, [sp, #8]
   17f7e:	9105      	str	r1, [sp, #20]
   17f80:	2101      	movs	r1, #1
   17f82:	2482      	movs	r4, #130	; 0x82
   17f84:	4249      	negs	r1, r1
   17f86:	81e9      	strh	r1, [r5, #14]
   17f88:	00a4      	lsls	r4, r4, #2
   17f8a:	4669      	mov	r1, sp
   17f8c:	81ac      	strh	r4, [r5, #12]
   17f8e:	f000 f875 	bl	1807c <_svfiprintf_r>
   17f92:	2300      	movs	r3, #0
   17f94:	9a00      	ldr	r2, [sp, #0]
   17f96:	7013      	strb	r3, [r2, #0]
   17f98:	b01b      	add	sp, #108	; 0x6c
   17f9a:	bd30      	pop	{r4, r5, pc}
   17f9c:	7fffffff 	.word	0x7fffffff

00017fa0 <vsiprintf>:
   17fa0:	b510      	push	{r4, lr}
   17fa2:	0013      	movs	r3, r2
   17fa4:	000a      	movs	r2, r1
   17fa6:	0001      	movs	r1, r0
   17fa8:	4802      	ldr	r0, [pc, #8]	; (17fb4 <vsiprintf+0x14>)
   17faa:	6800      	ldr	r0, [r0, #0]
   17fac:	f7ff ffe0 	bl	17f70 <_vsiprintf_r>
   17fb0:	bd10      	pop	{r4, pc}
   17fb2:	46c0      	nop			; (mov r8, r8)
   17fb4:	20000060 	.word	0x20000060

00017fb8 <__ssputs_r>:
   17fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fba:	688e      	ldr	r6, [r1, #8]
   17fbc:	b085      	sub	sp, #20
   17fbe:	0007      	movs	r7, r0
   17fc0:	000c      	movs	r4, r1
   17fc2:	9203      	str	r2, [sp, #12]
   17fc4:	9301      	str	r3, [sp, #4]
   17fc6:	429e      	cmp	r6, r3
   17fc8:	d839      	bhi.n	1803e <__ssputs_r+0x86>
   17fca:	2390      	movs	r3, #144	; 0x90
   17fcc:	898a      	ldrh	r2, [r1, #12]
   17fce:	00db      	lsls	r3, r3, #3
   17fd0:	421a      	tst	r2, r3
   17fd2:	d034      	beq.n	1803e <__ssputs_r+0x86>
   17fd4:	2503      	movs	r5, #3
   17fd6:	6909      	ldr	r1, [r1, #16]
   17fd8:	6823      	ldr	r3, [r4, #0]
   17fda:	1a5b      	subs	r3, r3, r1
   17fdc:	9302      	str	r3, [sp, #8]
   17fde:	6963      	ldr	r3, [r4, #20]
   17fe0:	9802      	ldr	r0, [sp, #8]
   17fe2:	435d      	muls	r5, r3
   17fe4:	0feb      	lsrs	r3, r5, #31
   17fe6:	195d      	adds	r5, r3, r5
   17fe8:	9b01      	ldr	r3, [sp, #4]
   17fea:	106d      	asrs	r5, r5, #1
   17fec:	3301      	adds	r3, #1
   17fee:	181b      	adds	r3, r3, r0
   17ff0:	42ab      	cmp	r3, r5
   17ff2:	d900      	bls.n	17ff6 <__ssputs_r+0x3e>
   17ff4:	001d      	movs	r5, r3
   17ff6:	0553      	lsls	r3, r2, #21
   17ff8:	d532      	bpl.n	18060 <__ssputs_r+0xa8>
   17ffa:	0029      	movs	r1, r5
   17ffc:	0038      	movs	r0, r7
   17ffe:	f000 fb31 	bl	18664 <_malloc_r>
   18002:	1e06      	subs	r6, r0, #0
   18004:	d109      	bne.n	1801a <__ssputs_r+0x62>
   18006:	230c      	movs	r3, #12
   18008:	603b      	str	r3, [r7, #0]
   1800a:	2340      	movs	r3, #64	; 0x40
   1800c:	2001      	movs	r0, #1
   1800e:	89a2      	ldrh	r2, [r4, #12]
   18010:	4240      	negs	r0, r0
   18012:	4313      	orrs	r3, r2
   18014:	81a3      	strh	r3, [r4, #12]
   18016:	b005      	add	sp, #20
   18018:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1801a:	9a02      	ldr	r2, [sp, #8]
   1801c:	6921      	ldr	r1, [r4, #16]
   1801e:	f7ff ff7c 	bl	17f1a <memcpy>
   18022:	89a3      	ldrh	r3, [r4, #12]
   18024:	4a14      	ldr	r2, [pc, #80]	; (18078 <__ssputs_r+0xc0>)
   18026:	401a      	ands	r2, r3
   18028:	2380      	movs	r3, #128	; 0x80
   1802a:	4313      	orrs	r3, r2
   1802c:	81a3      	strh	r3, [r4, #12]
   1802e:	9b02      	ldr	r3, [sp, #8]
   18030:	6126      	str	r6, [r4, #16]
   18032:	18f6      	adds	r6, r6, r3
   18034:	6026      	str	r6, [r4, #0]
   18036:	6165      	str	r5, [r4, #20]
   18038:	9e01      	ldr	r6, [sp, #4]
   1803a:	1aed      	subs	r5, r5, r3
   1803c:	60a5      	str	r5, [r4, #8]
   1803e:	9b01      	ldr	r3, [sp, #4]
   18040:	42b3      	cmp	r3, r6
   18042:	d200      	bcs.n	18046 <__ssputs_r+0x8e>
   18044:	001e      	movs	r6, r3
   18046:	0032      	movs	r2, r6
   18048:	9903      	ldr	r1, [sp, #12]
   1804a:	6820      	ldr	r0, [r4, #0]
   1804c:	f000 faad 	bl	185aa <memmove>
   18050:	68a3      	ldr	r3, [r4, #8]
   18052:	2000      	movs	r0, #0
   18054:	1b9b      	subs	r3, r3, r6
   18056:	60a3      	str	r3, [r4, #8]
   18058:	6823      	ldr	r3, [r4, #0]
   1805a:	199e      	adds	r6, r3, r6
   1805c:	6026      	str	r6, [r4, #0]
   1805e:	e7da      	b.n	18016 <__ssputs_r+0x5e>
   18060:	002a      	movs	r2, r5
   18062:	0038      	movs	r0, r7
   18064:	f000 fb5c 	bl	18720 <_realloc_r>
   18068:	1e06      	subs	r6, r0, #0
   1806a:	d1e0      	bne.n	1802e <__ssputs_r+0x76>
   1806c:	6921      	ldr	r1, [r4, #16]
   1806e:	0038      	movs	r0, r7
   18070:	f000 faae 	bl	185d0 <_free_r>
   18074:	e7c7      	b.n	18006 <__ssputs_r+0x4e>
   18076:	46c0      	nop			; (mov r8, r8)
   18078:	fffffb7f 	.word	0xfffffb7f

0001807c <_svfiprintf_r>:
   1807c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1807e:	b09f      	sub	sp, #124	; 0x7c
   18080:	9002      	str	r0, [sp, #8]
   18082:	9305      	str	r3, [sp, #20]
   18084:	898b      	ldrh	r3, [r1, #12]
   18086:	000f      	movs	r7, r1
   18088:	0016      	movs	r6, r2
   1808a:	061b      	lsls	r3, r3, #24
   1808c:	d511      	bpl.n	180b2 <_svfiprintf_r+0x36>
   1808e:	690b      	ldr	r3, [r1, #16]
   18090:	2b00      	cmp	r3, #0
   18092:	d10e      	bne.n	180b2 <_svfiprintf_r+0x36>
   18094:	2140      	movs	r1, #64	; 0x40
   18096:	f000 fae5 	bl	18664 <_malloc_r>
   1809a:	6038      	str	r0, [r7, #0]
   1809c:	6138      	str	r0, [r7, #16]
   1809e:	2800      	cmp	r0, #0
   180a0:	d105      	bne.n	180ae <_svfiprintf_r+0x32>
   180a2:	230c      	movs	r3, #12
   180a4:	9a02      	ldr	r2, [sp, #8]
   180a6:	3801      	subs	r0, #1
   180a8:	6013      	str	r3, [r2, #0]
   180aa:	b01f      	add	sp, #124	; 0x7c
   180ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   180ae:	2340      	movs	r3, #64	; 0x40
   180b0:	617b      	str	r3, [r7, #20]
   180b2:	2300      	movs	r3, #0
   180b4:	ad06      	add	r5, sp, #24
   180b6:	616b      	str	r3, [r5, #20]
   180b8:	3320      	adds	r3, #32
   180ba:	766b      	strb	r3, [r5, #25]
   180bc:	3310      	adds	r3, #16
   180be:	76ab      	strb	r3, [r5, #26]
   180c0:	0034      	movs	r4, r6
   180c2:	7823      	ldrb	r3, [r4, #0]
   180c4:	2b00      	cmp	r3, #0
   180c6:	d147      	bne.n	18158 <_svfiprintf_r+0xdc>
   180c8:	1ba3      	subs	r3, r4, r6
   180ca:	9304      	str	r3, [sp, #16]
   180cc:	d00d      	beq.n	180ea <_svfiprintf_r+0x6e>
   180ce:	1ba3      	subs	r3, r4, r6
   180d0:	0032      	movs	r2, r6
   180d2:	0039      	movs	r1, r7
   180d4:	9802      	ldr	r0, [sp, #8]
   180d6:	f7ff ff6f 	bl	17fb8 <__ssputs_r>
   180da:	1c43      	adds	r3, r0, #1
   180dc:	d100      	bne.n	180e0 <_svfiprintf_r+0x64>
   180de:	e0b5      	b.n	1824c <_svfiprintf_r+0x1d0>
   180e0:	696a      	ldr	r2, [r5, #20]
   180e2:	9b04      	ldr	r3, [sp, #16]
   180e4:	4694      	mov	ip, r2
   180e6:	4463      	add	r3, ip
   180e8:	616b      	str	r3, [r5, #20]
   180ea:	7823      	ldrb	r3, [r4, #0]
   180ec:	2b00      	cmp	r3, #0
   180ee:	d100      	bne.n	180f2 <_svfiprintf_r+0x76>
   180f0:	e0ac      	b.n	1824c <_svfiprintf_r+0x1d0>
   180f2:	2201      	movs	r2, #1
   180f4:	2300      	movs	r3, #0
   180f6:	4252      	negs	r2, r2
   180f8:	606a      	str	r2, [r5, #4]
   180fa:	a902      	add	r1, sp, #8
   180fc:	3254      	adds	r2, #84	; 0x54
   180fe:	1852      	adds	r2, r2, r1
   18100:	3401      	adds	r4, #1
   18102:	602b      	str	r3, [r5, #0]
   18104:	60eb      	str	r3, [r5, #12]
   18106:	60ab      	str	r3, [r5, #8]
   18108:	7013      	strb	r3, [r2, #0]
   1810a:	65ab      	str	r3, [r5, #88]	; 0x58
   1810c:	4e58      	ldr	r6, [pc, #352]	; (18270 <_svfiprintf_r+0x1f4>)
   1810e:	2205      	movs	r2, #5
   18110:	7821      	ldrb	r1, [r4, #0]
   18112:	0030      	movs	r0, r6
   18114:	f000 fa3e 	bl	18594 <memchr>
   18118:	1c62      	adds	r2, r4, #1
   1811a:	2800      	cmp	r0, #0
   1811c:	d120      	bne.n	18160 <_svfiprintf_r+0xe4>
   1811e:	6829      	ldr	r1, [r5, #0]
   18120:	06cb      	lsls	r3, r1, #27
   18122:	d504      	bpl.n	1812e <_svfiprintf_r+0xb2>
   18124:	2353      	movs	r3, #83	; 0x53
   18126:	ae02      	add	r6, sp, #8
   18128:	3020      	adds	r0, #32
   1812a:	199b      	adds	r3, r3, r6
   1812c:	7018      	strb	r0, [r3, #0]
   1812e:	070b      	lsls	r3, r1, #28
   18130:	d504      	bpl.n	1813c <_svfiprintf_r+0xc0>
   18132:	2353      	movs	r3, #83	; 0x53
   18134:	202b      	movs	r0, #43	; 0x2b
   18136:	ae02      	add	r6, sp, #8
   18138:	199b      	adds	r3, r3, r6
   1813a:	7018      	strb	r0, [r3, #0]
   1813c:	7823      	ldrb	r3, [r4, #0]
   1813e:	2b2a      	cmp	r3, #42	; 0x2a
   18140:	d016      	beq.n	18170 <_svfiprintf_r+0xf4>
   18142:	2000      	movs	r0, #0
   18144:	210a      	movs	r1, #10
   18146:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18148:	7822      	ldrb	r2, [r4, #0]
   1814a:	3a30      	subs	r2, #48	; 0x30
   1814c:	2a09      	cmp	r2, #9
   1814e:	d955      	bls.n	181fc <_svfiprintf_r+0x180>
   18150:	2800      	cmp	r0, #0
   18152:	d015      	beq.n	18180 <_svfiprintf_r+0x104>
   18154:	9309      	str	r3, [sp, #36]	; 0x24
   18156:	e013      	b.n	18180 <_svfiprintf_r+0x104>
   18158:	2b25      	cmp	r3, #37	; 0x25
   1815a:	d0b5      	beq.n	180c8 <_svfiprintf_r+0x4c>
   1815c:	3401      	adds	r4, #1
   1815e:	e7b0      	b.n	180c2 <_svfiprintf_r+0x46>
   18160:	2301      	movs	r3, #1
   18162:	1b80      	subs	r0, r0, r6
   18164:	4083      	lsls	r3, r0
   18166:	6829      	ldr	r1, [r5, #0]
   18168:	0014      	movs	r4, r2
   1816a:	430b      	orrs	r3, r1
   1816c:	602b      	str	r3, [r5, #0]
   1816e:	e7cd      	b.n	1810c <_svfiprintf_r+0x90>
   18170:	9b05      	ldr	r3, [sp, #20]
   18172:	1d18      	adds	r0, r3, #4
   18174:	681b      	ldr	r3, [r3, #0]
   18176:	9005      	str	r0, [sp, #20]
   18178:	2b00      	cmp	r3, #0
   1817a:	db39      	blt.n	181f0 <_svfiprintf_r+0x174>
   1817c:	9309      	str	r3, [sp, #36]	; 0x24
   1817e:	0014      	movs	r4, r2
   18180:	7823      	ldrb	r3, [r4, #0]
   18182:	2b2e      	cmp	r3, #46	; 0x2e
   18184:	d10b      	bne.n	1819e <_svfiprintf_r+0x122>
   18186:	7863      	ldrb	r3, [r4, #1]
   18188:	1c62      	adds	r2, r4, #1
   1818a:	2b2a      	cmp	r3, #42	; 0x2a
   1818c:	d13e      	bne.n	1820c <_svfiprintf_r+0x190>
   1818e:	9b05      	ldr	r3, [sp, #20]
   18190:	3402      	adds	r4, #2
   18192:	1d1a      	adds	r2, r3, #4
   18194:	681b      	ldr	r3, [r3, #0]
   18196:	9205      	str	r2, [sp, #20]
   18198:	2b00      	cmp	r3, #0
   1819a:	db34      	blt.n	18206 <_svfiprintf_r+0x18a>
   1819c:	9307      	str	r3, [sp, #28]
   1819e:	4e35      	ldr	r6, [pc, #212]	; (18274 <_svfiprintf_r+0x1f8>)
   181a0:	7821      	ldrb	r1, [r4, #0]
   181a2:	2203      	movs	r2, #3
   181a4:	0030      	movs	r0, r6
   181a6:	f000 f9f5 	bl	18594 <memchr>
   181aa:	2800      	cmp	r0, #0
   181ac:	d006      	beq.n	181bc <_svfiprintf_r+0x140>
   181ae:	2340      	movs	r3, #64	; 0x40
   181b0:	1b80      	subs	r0, r0, r6
   181b2:	4083      	lsls	r3, r0
   181b4:	682a      	ldr	r2, [r5, #0]
   181b6:	3401      	adds	r4, #1
   181b8:	4313      	orrs	r3, r2
   181ba:	602b      	str	r3, [r5, #0]
   181bc:	7821      	ldrb	r1, [r4, #0]
   181be:	2206      	movs	r2, #6
   181c0:	482d      	ldr	r0, [pc, #180]	; (18278 <_svfiprintf_r+0x1fc>)
   181c2:	1c66      	adds	r6, r4, #1
   181c4:	7629      	strb	r1, [r5, #24]
   181c6:	f000 f9e5 	bl	18594 <memchr>
   181ca:	2800      	cmp	r0, #0
   181cc:	d046      	beq.n	1825c <_svfiprintf_r+0x1e0>
   181ce:	4b2b      	ldr	r3, [pc, #172]	; (1827c <_svfiprintf_r+0x200>)
   181d0:	2b00      	cmp	r3, #0
   181d2:	d12f      	bne.n	18234 <_svfiprintf_r+0x1b8>
   181d4:	6829      	ldr	r1, [r5, #0]
   181d6:	9b05      	ldr	r3, [sp, #20]
   181d8:	2207      	movs	r2, #7
   181da:	05c9      	lsls	r1, r1, #23
   181dc:	d528      	bpl.n	18230 <_svfiprintf_r+0x1b4>
   181de:	189b      	adds	r3, r3, r2
   181e0:	4393      	bics	r3, r2
   181e2:	3308      	adds	r3, #8
   181e4:	9305      	str	r3, [sp, #20]
   181e6:	696b      	ldr	r3, [r5, #20]
   181e8:	9a03      	ldr	r2, [sp, #12]
   181ea:	189b      	adds	r3, r3, r2
   181ec:	616b      	str	r3, [r5, #20]
   181ee:	e767      	b.n	180c0 <_svfiprintf_r+0x44>
   181f0:	425b      	negs	r3, r3
   181f2:	60eb      	str	r3, [r5, #12]
   181f4:	2302      	movs	r3, #2
   181f6:	430b      	orrs	r3, r1
   181f8:	602b      	str	r3, [r5, #0]
   181fa:	e7c0      	b.n	1817e <_svfiprintf_r+0x102>
   181fc:	434b      	muls	r3, r1
   181fe:	3401      	adds	r4, #1
   18200:	189b      	adds	r3, r3, r2
   18202:	2001      	movs	r0, #1
   18204:	e7a0      	b.n	18148 <_svfiprintf_r+0xcc>
   18206:	2301      	movs	r3, #1
   18208:	425b      	negs	r3, r3
   1820a:	e7c7      	b.n	1819c <_svfiprintf_r+0x120>
   1820c:	2300      	movs	r3, #0
   1820e:	0014      	movs	r4, r2
   18210:	200a      	movs	r0, #10
   18212:	001a      	movs	r2, r3
   18214:	606b      	str	r3, [r5, #4]
   18216:	7821      	ldrb	r1, [r4, #0]
   18218:	3930      	subs	r1, #48	; 0x30
   1821a:	2909      	cmp	r1, #9
   1821c:	d903      	bls.n	18226 <_svfiprintf_r+0x1aa>
   1821e:	2b00      	cmp	r3, #0
   18220:	d0bd      	beq.n	1819e <_svfiprintf_r+0x122>
   18222:	9207      	str	r2, [sp, #28]
   18224:	e7bb      	b.n	1819e <_svfiprintf_r+0x122>
   18226:	4342      	muls	r2, r0
   18228:	3401      	adds	r4, #1
   1822a:	1852      	adds	r2, r2, r1
   1822c:	2301      	movs	r3, #1
   1822e:	e7f2      	b.n	18216 <_svfiprintf_r+0x19a>
   18230:	3307      	adds	r3, #7
   18232:	e7d5      	b.n	181e0 <_svfiprintf_r+0x164>
   18234:	ab05      	add	r3, sp, #20
   18236:	9300      	str	r3, [sp, #0]
   18238:	003a      	movs	r2, r7
   1823a:	4b11      	ldr	r3, [pc, #68]	; (18280 <_svfiprintf_r+0x204>)
   1823c:	0029      	movs	r1, r5
   1823e:	9802      	ldr	r0, [sp, #8]
   18240:	e000      	b.n	18244 <_svfiprintf_r+0x1c8>
   18242:	bf00      	nop
   18244:	9003      	str	r0, [sp, #12]
   18246:	9b03      	ldr	r3, [sp, #12]
   18248:	3301      	adds	r3, #1
   1824a:	d1cc      	bne.n	181e6 <_svfiprintf_r+0x16a>
   1824c:	89bb      	ldrh	r3, [r7, #12]
   1824e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   18250:	065b      	lsls	r3, r3, #25
   18252:	d400      	bmi.n	18256 <_svfiprintf_r+0x1da>
   18254:	e729      	b.n	180aa <_svfiprintf_r+0x2e>
   18256:	2001      	movs	r0, #1
   18258:	4240      	negs	r0, r0
   1825a:	e726      	b.n	180aa <_svfiprintf_r+0x2e>
   1825c:	ab05      	add	r3, sp, #20
   1825e:	9300      	str	r3, [sp, #0]
   18260:	003a      	movs	r2, r7
   18262:	4b07      	ldr	r3, [pc, #28]	; (18280 <_svfiprintf_r+0x204>)
   18264:	0029      	movs	r1, r5
   18266:	9802      	ldr	r0, [sp, #8]
   18268:	f000 f87a 	bl	18360 <_printf_i>
   1826c:	e7ea      	b.n	18244 <_svfiprintf_r+0x1c8>
   1826e:	46c0      	nop			; (mov r8, r8)
   18270:	0001ca2c 	.word	0x0001ca2c
   18274:	0001ca32 	.word	0x0001ca32
   18278:	0001ca36 	.word	0x0001ca36
   1827c:	00000000 	.word	0x00000000
   18280:	00017fb9 	.word	0x00017fb9

00018284 <_printf_common>:
   18284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18286:	0015      	movs	r5, r2
   18288:	9301      	str	r3, [sp, #4]
   1828a:	688a      	ldr	r2, [r1, #8]
   1828c:	690b      	ldr	r3, [r1, #16]
   1828e:	9000      	str	r0, [sp, #0]
   18290:	000c      	movs	r4, r1
   18292:	4293      	cmp	r3, r2
   18294:	da00      	bge.n	18298 <_printf_common+0x14>
   18296:	0013      	movs	r3, r2
   18298:	0022      	movs	r2, r4
   1829a:	602b      	str	r3, [r5, #0]
   1829c:	3243      	adds	r2, #67	; 0x43
   1829e:	7812      	ldrb	r2, [r2, #0]
   182a0:	2a00      	cmp	r2, #0
   182a2:	d001      	beq.n	182a8 <_printf_common+0x24>
   182a4:	3301      	adds	r3, #1
   182a6:	602b      	str	r3, [r5, #0]
   182a8:	6823      	ldr	r3, [r4, #0]
   182aa:	069b      	lsls	r3, r3, #26
   182ac:	d502      	bpl.n	182b4 <_printf_common+0x30>
   182ae:	682b      	ldr	r3, [r5, #0]
   182b0:	3302      	adds	r3, #2
   182b2:	602b      	str	r3, [r5, #0]
   182b4:	2706      	movs	r7, #6
   182b6:	6823      	ldr	r3, [r4, #0]
   182b8:	401f      	ands	r7, r3
   182ba:	d027      	beq.n	1830c <_printf_common+0x88>
   182bc:	0023      	movs	r3, r4
   182be:	3343      	adds	r3, #67	; 0x43
   182c0:	781b      	ldrb	r3, [r3, #0]
   182c2:	1e5a      	subs	r2, r3, #1
   182c4:	4193      	sbcs	r3, r2
   182c6:	6822      	ldr	r2, [r4, #0]
   182c8:	0692      	lsls	r2, r2, #26
   182ca:	d430      	bmi.n	1832e <_printf_common+0xaa>
   182cc:	0022      	movs	r2, r4
   182ce:	9901      	ldr	r1, [sp, #4]
   182d0:	3243      	adds	r2, #67	; 0x43
   182d2:	9800      	ldr	r0, [sp, #0]
   182d4:	9e08      	ldr	r6, [sp, #32]
   182d6:	47b0      	blx	r6
   182d8:	1c43      	adds	r3, r0, #1
   182da:	d025      	beq.n	18328 <_printf_common+0xa4>
   182dc:	2306      	movs	r3, #6
   182de:	6820      	ldr	r0, [r4, #0]
   182e0:	682a      	ldr	r2, [r5, #0]
   182e2:	68e1      	ldr	r1, [r4, #12]
   182e4:	4003      	ands	r3, r0
   182e6:	2500      	movs	r5, #0
   182e8:	2b04      	cmp	r3, #4
   182ea:	d103      	bne.n	182f4 <_printf_common+0x70>
   182ec:	1a8d      	subs	r5, r1, r2
   182ee:	43eb      	mvns	r3, r5
   182f0:	17db      	asrs	r3, r3, #31
   182f2:	401d      	ands	r5, r3
   182f4:	68a3      	ldr	r3, [r4, #8]
   182f6:	6922      	ldr	r2, [r4, #16]
   182f8:	4293      	cmp	r3, r2
   182fa:	dd01      	ble.n	18300 <_printf_common+0x7c>
   182fc:	1a9b      	subs	r3, r3, r2
   182fe:	18ed      	adds	r5, r5, r3
   18300:	2700      	movs	r7, #0
   18302:	42bd      	cmp	r5, r7
   18304:	d120      	bne.n	18348 <_printf_common+0xc4>
   18306:	2000      	movs	r0, #0
   18308:	e010      	b.n	1832c <_printf_common+0xa8>
   1830a:	3701      	adds	r7, #1
   1830c:	68e3      	ldr	r3, [r4, #12]
   1830e:	682a      	ldr	r2, [r5, #0]
   18310:	1a9b      	subs	r3, r3, r2
   18312:	429f      	cmp	r7, r3
   18314:	dad2      	bge.n	182bc <_printf_common+0x38>
   18316:	0022      	movs	r2, r4
   18318:	2301      	movs	r3, #1
   1831a:	3219      	adds	r2, #25
   1831c:	9901      	ldr	r1, [sp, #4]
   1831e:	9800      	ldr	r0, [sp, #0]
   18320:	9e08      	ldr	r6, [sp, #32]
   18322:	47b0      	blx	r6
   18324:	1c43      	adds	r3, r0, #1
   18326:	d1f0      	bne.n	1830a <_printf_common+0x86>
   18328:	2001      	movs	r0, #1
   1832a:	4240      	negs	r0, r0
   1832c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1832e:	2030      	movs	r0, #48	; 0x30
   18330:	18e1      	adds	r1, r4, r3
   18332:	3143      	adds	r1, #67	; 0x43
   18334:	7008      	strb	r0, [r1, #0]
   18336:	0021      	movs	r1, r4
   18338:	1c5a      	adds	r2, r3, #1
   1833a:	3145      	adds	r1, #69	; 0x45
   1833c:	7809      	ldrb	r1, [r1, #0]
   1833e:	18a2      	adds	r2, r4, r2
   18340:	3243      	adds	r2, #67	; 0x43
   18342:	3302      	adds	r3, #2
   18344:	7011      	strb	r1, [r2, #0]
   18346:	e7c1      	b.n	182cc <_printf_common+0x48>
   18348:	0022      	movs	r2, r4
   1834a:	2301      	movs	r3, #1
   1834c:	321a      	adds	r2, #26
   1834e:	9901      	ldr	r1, [sp, #4]
   18350:	9800      	ldr	r0, [sp, #0]
   18352:	9e08      	ldr	r6, [sp, #32]
   18354:	47b0      	blx	r6
   18356:	1c43      	adds	r3, r0, #1
   18358:	d0e6      	beq.n	18328 <_printf_common+0xa4>
   1835a:	3701      	adds	r7, #1
   1835c:	e7d1      	b.n	18302 <_printf_common+0x7e>
	...

00018360 <_printf_i>:
   18360:	b5f0      	push	{r4, r5, r6, r7, lr}
   18362:	b08b      	sub	sp, #44	; 0x2c
   18364:	9206      	str	r2, [sp, #24]
   18366:	000a      	movs	r2, r1
   18368:	3243      	adds	r2, #67	; 0x43
   1836a:	9307      	str	r3, [sp, #28]
   1836c:	9005      	str	r0, [sp, #20]
   1836e:	9204      	str	r2, [sp, #16]
   18370:	7e0a      	ldrb	r2, [r1, #24]
   18372:	000c      	movs	r4, r1
   18374:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18376:	2a6e      	cmp	r2, #110	; 0x6e
   18378:	d100      	bne.n	1837c <_printf_i+0x1c>
   1837a:	e08f      	b.n	1849c <_printf_i+0x13c>
   1837c:	d817      	bhi.n	183ae <_printf_i+0x4e>
   1837e:	2a63      	cmp	r2, #99	; 0x63
   18380:	d02c      	beq.n	183dc <_printf_i+0x7c>
   18382:	d808      	bhi.n	18396 <_printf_i+0x36>
   18384:	2a00      	cmp	r2, #0
   18386:	d100      	bne.n	1838a <_printf_i+0x2a>
   18388:	e099      	b.n	184be <_printf_i+0x15e>
   1838a:	2a58      	cmp	r2, #88	; 0x58
   1838c:	d054      	beq.n	18438 <_printf_i+0xd8>
   1838e:	0026      	movs	r6, r4
   18390:	3642      	adds	r6, #66	; 0x42
   18392:	7032      	strb	r2, [r6, #0]
   18394:	e029      	b.n	183ea <_printf_i+0x8a>
   18396:	2a64      	cmp	r2, #100	; 0x64
   18398:	d001      	beq.n	1839e <_printf_i+0x3e>
   1839a:	2a69      	cmp	r2, #105	; 0x69
   1839c:	d1f7      	bne.n	1838e <_printf_i+0x2e>
   1839e:	6821      	ldr	r1, [r4, #0]
   183a0:	681a      	ldr	r2, [r3, #0]
   183a2:	0608      	lsls	r0, r1, #24
   183a4:	d523      	bpl.n	183ee <_printf_i+0x8e>
   183a6:	1d11      	adds	r1, r2, #4
   183a8:	6019      	str	r1, [r3, #0]
   183aa:	6815      	ldr	r5, [r2, #0]
   183ac:	e025      	b.n	183fa <_printf_i+0x9a>
   183ae:	2a73      	cmp	r2, #115	; 0x73
   183b0:	d100      	bne.n	183b4 <_printf_i+0x54>
   183b2:	e088      	b.n	184c6 <_printf_i+0x166>
   183b4:	d808      	bhi.n	183c8 <_printf_i+0x68>
   183b6:	2a6f      	cmp	r2, #111	; 0x6f
   183b8:	d029      	beq.n	1840e <_printf_i+0xae>
   183ba:	2a70      	cmp	r2, #112	; 0x70
   183bc:	d1e7      	bne.n	1838e <_printf_i+0x2e>
   183be:	2220      	movs	r2, #32
   183c0:	6809      	ldr	r1, [r1, #0]
   183c2:	430a      	orrs	r2, r1
   183c4:	6022      	str	r2, [r4, #0]
   183c6:	e003      	b.n	183d0 <_printf_i+0x70>
   183c8:	2a75      	cmp	r2, #117	; 0x75
   183ca:	d020      	beq.n	1840e <_printf_i+0xae>
   183cc:	2a78      	cmp	r2, #120	; 0x78
   183ce:	d1de      	bne.n	1838e <_printf_i+0x2e>
   183d0:	0022      	movs	r2, r4
   183d2:	2178      	movs	r1, #120	; 0x78
   183d4:	3245      	adds	r2, #69	; 0x45
   183d6:	7011      	strb	r1, [r2, #0]
   183d8:	4a6c      	ldr	r2, [pc, #432]	; (1858c <_printf_i+0x22c>)
   183da:	e030      	b.n	1843e <_printf_i+0xde>
   183dc:	000e      	movs	r6, r1
   183de:	681a      	ldr	r2, [r3, #0]
   183e0:	3642      	adds	r6, #66	; 0x42
   183e2:	1d11      	adds	r1, r2, #4
   183e4:	6019      	str	r1, [r3, #0]
   183e6:	6813      	ldr	r3, [r2, #0]
   183e8:	7033      	strb	r3, [r6, #0]
   183ea:	2301      	movs	r3, #1
   183ec:	e079      	b.n	184e2 <_printf_i+0x182>
   183ee:	0649      	lsls	r1, r1, #25
   183f0:	d5d9      	bpl.n	183a6 <_printf_i+0x46>
   183f2:	1d11      	adds	r1, r2, #4
   183f4:	6019      	str	r1, [r3, #0]
   183f6:	2300      	movs	r3, #0
   183f8:	5ed5      	ldrsh	r5, [r2, r3]
   183fa:	2d00      	cmp	r5, #0
   183fc:	da03      	bge.n	18406 <_printf_i+0xa6>
   183fe:	232d      	movs	r3, #45	; 0x2d
   18400:	9a04      	ldr	r2, [sp, #16]
   18402:	426d      	negs	r5, r5
   18404:	7013      	strb	r3, [r2, #0]
   18406:	4b62      	ldr	r3, [pc, #392]	; (18590 <_printf_i+0x230>)
   18408:	270a      	movs	r7, #10
   1840a:	9303      	str	r3, [sp, #12]
   1840c:	e02f      	b.n	1846e <_printf_i+0x10e>
   1840e:	6820      	ldr	r0, [r4, #0]
   18410:	6819      	ldr	r1, [r3, #0]
   18412:	0605      	lsls	r5, r0, #24
   18414:	d503      	bpl.n	1841e <_printf_i+0xbe>
   18416:	1d08      	adds	r0, r1, #4
   18418:	6018      	str	r0, [r3, #0]
   1841a:	680d      	ldr	r5, [r1, #0]
   1841c:	e005      	b.n	1842a <_printf_i+0xca>
   1841e:	0640      	lsls	r0, r0, #25
   18420:	d5f9      	bpl.n	18416 <_printf_i+0xb6>
   18422:	680d      	ldr	r5, [r1, #0]
   18424:	1d08      	adds	r0, r1, #4
   18426:	6018      	str	r0, [r3, #0]
   18428:	b2ad      	uxth	r5, r5
   1842a:	4b59      	ldr	r3, [pc, #356]	; (18590 <_printf_i+0x230>)
   1842c:	2708      	movs	r7, #8
   1842e:	9303      	str	r3, [sp, #12]
   18430:	2a6f      	cmp	r2, #111	; 0x6f
   18432:	d018      	beq.n	18466 <_printf_i+0x106>
   18434:	270a      	movs	r7, #10
   18436:	e016      	b.n	18466 <_printf_i+0x106>
   18438:	3145      	adds	r1, #69	; 0x45
   1843a:	700a      	strb	r2, [r1, #0]
   1843c:	4a54      	ldr	r2, [pc, #336]	; (18590 <_printf_i+0x230>)
   1843e:	9203      	str	r2, [sp, #12]
   18440:	681a      	ldr	r2, [r3, #0]
   18442:	6821      	ldr	r1, [r4, #0]
   18444:	1d10      	adds	r0, r2, #4
   18446:	6018      	str	r0, [r3, #0]
   18448:	6815      	ldr	r5, [r2, #0]
   1844a:	0608      	lsls	r0, r1, #24
   1844c:	d522      	bpl.n	18494 <_printf_i+0x134>
   1844e:	07cb      	lsls	r3, r1, #31
   18450:	d502      	bpl.n	18458 <_printf_i+0xf8>
   18452:	2320      	movs	r3, #32
   18454:	4319      	orrs	r1, r3
   18456:	6021      	str	r1, [r4, #0]
   18458:	2710      	movs	r7, #16
   1845a:	2d00      	cmp	r5, #0
   1845c:	d103      	bne.n	18466 <_printf_i+0x106>
   1845e:	2320      	movs	r3, #32
   18460:	6822      	ldr	r2, [r4, #0]
   18462:	439a      	bics	r2, r3
   18464:	6022      	str	r2, [r4, #0]
   18466:	0023      	movs	r3, r4
   18468:	2200      	movs	r2, #0
   1846a:	3343      	adds	r3, #67	; 0x43
   1846c:	701a      	strb	r2, [r3, #0]
   1846e:	6863      	ldr	r3, [r4, #4]
   18470:	60a3      	str	r3, [r4, #8]
   18472:	2b00      	cmp	r3, #0
   18474:	db5c      	blt.n	18530 <_printf_i+0x1d0>
   18476:	2204      	movs	r2, #4
   18478:	6821      	ldr	r1, [r4, #0]
   1847a:	4391      	bics	r1, r2
   1847c:	6021      	str	r1, [r4, #0]
   1847e:	2d00      	cmp	r5, #0
   18480:	d158      	bne.n	18534 <_printf_i+0x1d4>
   18482:	9e04      	ldr	r6, [sp, #16]
   18484:	2b00      	cmp	r3, #0
   18486:	d064      	beq.n	18552 <_printf_i+0x1f2>
   18488:	0026      	movs	r6, r4
   1848a:	9b03      	ldr	r3, [sp, #12]
   1848c:	3642      	adds	r6, #66	; 0x42
   1848e:	781b      	ldrb	r3, [r3, #0]
   18490:	7033      	strb	r3, [r6, #0]
   18492:	e05e      	b.n	18552 <_printf_i+0x1f2>
   18494:	0648      	lsls	r0, r1, #25
   18496:	d5da      	bpl.n	1844e <_printf_i+0xee>
   18498:	b2ad      	uxth	r5, r5
   1849a:	e7d8      	b.n	1844e <_printf_i+0xee>
   1849c:	6809      	ldr	r1, [r1, #0]
   1849e:	681a      	ldr	r2, [r3, #0]
   184a0:	0608      	lsls	r0, r1, #24
   184a2:	d505      	bpl.n	184b0 <_printf_i+0x150>
   184a4:	1d11      	adds	r1, r2, #4
   184a6:	6019      	str	r1, [r3, #0]
   184a8:	6813      	ldr	r3, [r2, #0]
   184aa:	6962      	ldr	r2, [r4, #20]
   184ac:	601a      	str	r2, [r3, #0]
   184ae:	e006      	b.n	184be <_printf_i+0x15e>
   184b0:	0649      	lsls	r1, r1, #25
   184b2:	d5f7      	bpl.n	184a4 <_printf_i+0x144>
   184b4:	1d11      	adds	r1, r2, #4
   184b6:	6019      	str	r1, [r3, #0]
   184b8:	6813      	ldr	r3, [r2, #0]
   184ba:	8aa2      	ldrh	r2, [r4, #20]
   184bc:	801a      	strh	r2, [r3, #0]
   184be:	2300      	movs	r3, #0
   184c0:	9e04      	ldr	r6, [sp, #16]
   184c2:	6123      	str	r3, [r4, #16]
   184c4:	e054      	b.n	18570 <_printf_i+0x210>
   184c6:	681a      	ldr	r2, [r3, #0]
   184c8:	1d11      	adds	r1, r2, #4
   184ca:	6019      	str	r1, [r3, #0]
   184cc:	6816      	ldr	r6, [r2, #0]
   184ce:	2100      	movs	r1, #0
   184d0:	6862      	ldr	r2, [r4, #4]
   184d2:	0030      	movs	r0, r6
   184d4:	f000 f85e 	bl	18594 <memchr>
   184d8:	2800      	cmp	r0, #0
   184da:	d001      	beq.n	184e0 <_printf_i+0x180>
   184dc:	1b80      	subs	r0, r0, r6
   184de:	6060      	str	r0, [r4, #4]
   184e0:	6863      	ldr	r3, [r4, #4]
   184e2:	6123      	str	r3, [r4, #16]
   184e4:	2300      	movs	r3, #0
   184e6:	9a04      	ldr	r2, [sp, #16]
   184e8:	7013      	strb	r3, [r2, #0]
   184ea:	e041      	b.n	18570 <_printf_i+0x210>
   184ec:	6923      	ldr	r3, [r4, #16]
   184ee:	0032      	movs	r2, r6
   184f0:	9906      	ldr	r1, [sp, #24]
   184f2:	9805      	ldr	r0, [sp, #20]
   184f4:	9d07      	ldr	r5, [sp, #28]
   184f6:	47a8      	blx	r5
   184f8:	1c43      	adds	r3, r0, #1
   184fa:	d043      	beq.n	18584 <_printf_i+0x224>
   184fc:	6823      	ldr	r3, [r4, #0]
   184fe:	2500      	movs	r5, #0
   18500:	079b      	lsls	r3, r3, #30
   18502:	d40f      	bmi.n	18524 <_printf_i+0x1c4>
   18504:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18506:	68e0      	ldr	r0, [r4, #12]
   18508:	4298      	cmp	r0, r3
   1850a:	da3d      	bge.n	18588 <_printf_i+0x228>
   1850c:	0018      	movs	r0, r3
   1850e:	e03b      	b.n	18588 <_printf_i+0x228>
   18510:	0022      	movs	r2, r4
   18512:	2301      	movs	r3, #1
   18514:	3219      	adds	r2, #25
   18516:	9906      	ldr	r1, [sp, #24]
   18518:	9805      	ldr	r0, [sp, #20]
   1851a:	9e07      	ldr	r6, [sp, #28]
   1851c:	47b0      	blx	r6
   1851e:	1c43      	adds	r3, r0, #1
   18520:	d030      	beq.n	18584 <_printf_i+0x224>
   18522:	3501      	adds	r5, #1
   18524:	68e3      	ldr	r3, [r4, #12]
   18526:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18528:	1a9b      	subs	r3, r3, r2
   1852a:	429d      	cmp	r5, r3
   1852c:	dbf0      	blt.n	18510 <_printf_i+0x1b0>
   1852e:	e7e9      	b.n	18504 <_printf_i+0x1a4>
   18530:	2d00      	cmp	r5, #0
   18532:	d0a9      	beq.n	18488 <_printf_i+0x128>
   18534:	9e04      	ldr	r6, [sp, #16]
   18536:	0028      	movs	r0, r5
   18538:	0039      	movs	r1, r7
   1853a:	f7ff fa97 	bl	17a6c <__aeabi_uidivmod>
   1853e:	9b03      	ldr	r3, [sp, #12]
   18540:	3e01      	subs	r6, #1
   18542:	5c5b      	ldrb	r3, [r3, r1]
   18544:	0028      	movs	r0, r5
   18546:	7033      	strb	r3, [r6, #0]
   18548:	0039      	movs	r1, r7
   1854a:	f7ff fa09 	bl	17960 <__udivsi3>
   1854e:	1e05      	subs	r5, r0, #0
   18550:	d1f1      	bne.n	18536 <_printf_i+0x1d6>
   18552:	2f08      	cmp	r7, #8
   18554:	d109      	bne.n	1856a <_printf_i+0x20a>
   18556:	6823      	ldr	r3, [r4, #0]
   18558:	07db      	lsls	r3, r3, #31
   1855a:	d506      	bpl.n	1856a <_printf_i+0x20a>
   1855c:	6863      	ldr	r3, [r4, #4]
   1855e:	6922      	ldr	r2, [r4, #16]
   18560:	4293      	cmp	r3, r2
   18562:	dc02      	bgt.n	1856a <_printf_i+0x20a>
   18564:	2330      	movs	r3, #48	; 0x30
   18566:	3e01      	subs	r6, #1
   18568:	7033      	strb	r3, [r6, #0]
   1856a:	9b04      	ldr	r3, [sp, #16]
   1856c:	1b9b      	subs	r3, r3, r6
   1856e:	6123      	str	r3, [r4, #16]
   18570:	9b07      	ldr	r3, [sp, #28]
   18572:	aa09      	add	r2, sp, #36	; 0x24
   18574:	9300      	str	r3, [sp, #0]
   18576:	0021      	movs	r1, r4
   18578:	9b06      	ldr	r3, [sp, #24]
   1857a:	9805      	ldr	r0, [sp, #20]
   1857c:	f7ff fe82 	bl	18284 <_printf_common>
   18580:	1c43      	adds	r3, r0, #1
   18582:	d1b3      	bne.n	184ec <_printf_i+0x18c>
   18584:	2001      	movs	r0, #1
   18586:	4240      	negs	r0, r0
   18588:	b00b      	add	sp, #44	; 0x2c
   1858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1858c:	0001ca4e 	.word	0x0001ca4e
   18590:	0001ca3d 	.word	0x0001ca3d

00018594 <memchr>:
   18594:	b2c9      	uxtb	r1, r1
   18596:	1882      	adds	r2, r0, r2
   18598:	4290      	cmp	r0, r2
   1859a:	d101      	bne.n	185a0 <memchr+0xc>
   1859c:	2000      	movs	r0, #0
   1859e:	4770      	bx	lr
   185a0:	7803      	ldrb	r3, [r0, #0]
   185a2:	428b      	cmp	r3, r1
   185a4:	d0fb      	beq.n	1859e <memchr+0xa>
   185a6:	3001      	adds	r0, #1
   185a8:	e7f6      	b.n	18598 <memchr+0x4>

000185aa <memmove>:
   185aa:	b510      	push	{r4, lr}
   185ac:	4288      	cmp	r0, r1
   185ae:	d902      	bls.n	185b6 <memmove+0xc>
   185b0:	188b      	adds	r3, r1, r2
   185b2:	4298      	cmp	r0, r3
   185b4:	d308      	bcc.n	185c8 <memmove+0x1e>
   185b6:	2300      	movs	r3, #0
   185b8:	429a      	cmp	r2, r3
   185ba:	d007      	beq.n	185cc <memmove+0x22>
   185bc:	5ccc      	ldrb	r4, [r1, r3]
   185be:	54c4      	strb	r4, [r0, r3]
   185c0:	3301      	adds	r3, #1
   185c2:	e7f9      	b.n	185b8 <memmove+0xe>
   185c4:	5c8b      	ldrb	r3, [r1, r2]
   185c6:	5483      	strb	r3, [r0, r2]
   185c8:	3a01      	subs	r2, #1
   185ca:	d2fb      	bcs.n	185c4 <memmove+0x1a>
   185cc:	bd10      	pop	{r4, pc}
	...

000185d0 <_free_r>:
   185d0:	b570      	push	{r4, r5, r6, lr}
   185d2:	0005      	movs	r5, r0
   185d4:	2900      	cmp	r1, #0
   185d6:	d010      	beq.n	185fa <_free_r+0x2a>
   185d8:	1f0c      	subs	r4, r1, #4
   185da:	6823      	ldr	r3, [r4, #0]
   185dc:	2b00      	cmp	r3, #0
   185de:	da00      	bge.n	185e2 <_free_r+0x12>
   185e0:	18e4      	adds	r4, r4, r3
   185e2:	0028      	movs	r0, r5
   185e4:	f000 f8d4 	bl	18790 <__malloc_lock>
   185e8:	4a1d      	ldr	r2, [pc, #116]	; (18660 <_free_r+0x90>)
   185ea:	6813      	ldr	r3, [r2, #0]
   185ec:	2b00      	cmp	r3, #0
   185ee:	d105      	bne.n	185fc <_free_r+0x2c>
   185f0:	6063      	str	r3, [r4, #4]
   185f2:	6014      	str	r4, [r2, #0]
   185f4:	0028      	movs	r0, r5
   185f6:	f000 f8cc 	bl	18792 <__malloc_unlock>
   185fa:	bd70      	pop	{r4, r5, r6, pc}
   185fc:	42a3      	cmp	r3, r4
   185fe:	d909      	bls.n	18614 <_free_r+0x44>
   18600:	6821      	ldr	r1, [r4, #0]
   18602:	1860      	adds	r0, r4, r1
   18604:	4283      	cmp	r3, r0
   18606:	d1f3      	bne.n	185f0 <_free_r+0x20>
   18608:	6818      	ldr	r0, [r3, #0]
   1860a:	685b      	ldr	r3, [r3, #4]
   1860c:	1841      	adds	r1, r0, r1
   1860e:	6021      	str	r1, [r4, #0]
   18610:	e7ee      	b.n	185f0 <_free_r+0x20>
   18612:	0013      	movs	r3, r2
   18614:	685a      	ldr	r2, [r3, #4]
   18616:	2a00      	cmp	r2, #0
   18618:	d001      	beq.n	1861e <_free_r+0x4e>
   1861a:	42a2      	cmp	r2, r4
   1861c:	d9f9      	bls.n	18612 <_free_r+0x42>
   1861e:	6819      	ldr	r1, [r3, #0]
   18620:	1858      	adds	r0, r3, r1
   18622:	42a0      	cmp	r0, r4
   18624:	d10b      	bne.n	1863e <_free_r+0x6e>
   18626:	6820      	ldr	r0, [r4, #0]
   18628:	1809      	adds	r1, r1, r0
   1862a:	1858      	adds	r0, r3, r1
   1862c:	6019      	str	r1, [r3, #0]
   1862e:	4282      	cmp	r2, r0
   18630:	d1e0      	bne.n	185f4 <_free_r+0x24>
   18632:	6810      	ldr	r0, [r2, #0]
   18634:	6852      	ldr	r2, [r2, #4]
   18636:	1841      	adds	r1, r0, r1
   18638:	6019      	str	r1, [r3, #0]
   1863a:	605a      	str	r2, [r3, #4]
   1863c:	e7da      	b.n	185f4 <_free_r+0x24>
   1863e:	42a0      	cmp	r0, r4
   18640:	d902      	bls.n	18648 <_free_r+0x78>
   18642:	230c      	movs	r3, #12
   18644:	602b      	str	r3, [r5, #0]
   18646:	e7d5      	b.n	185f4 <_free_r+0x24>
   18648:	6821      	ldr	r1, [r4, #0]
   1864a:	1860      	adds	r0, r4, r1
   1864c:	4282      	cmp	r2, r0
   1864e:	d103      	bne.n	18658 <_free_r+0x88>
   18650:	6810      	ldr	r0, [r2, #0]
   18652:	6852      	ldr	r2, [r2, #4]
   18654:	1841      	adds	r1, r0, r1
   18656:	6021      	str	r1, [r4, #0]
   18658:	6062      	str	r2, [r4, #4]
   1865a:	605c      	str	r4, [r3, #4]
   1865c:	e7ca      	b.n	185f4 <_free_r+0x24>
   1865e:	46c0      	nop			; (mov r8, r8)
   18660:	20004c8c 	.word	0x20004c8c

00018664 <_malloc_r>:
   18664:	2303      	movs	r3, #3
   18666:	b570      	push	{r4, r5, r6, lr}
   18668:	1ccd      	adds	r5, r1, #3
   1866a:	439d      	bics	r5, r3
   1866c:	3508      	adds	r5, #8
   1866e:	0006      	movs	r6, r0
   18670:	2d0c      	cmp	r5, #12
   18672:	d21e      	bcs.n	186b2 <_malloc_r+0x4e>
   18674:	250c      	movs	r5, #12
   18676:	42a9      	cmp	r1, r5
   18678:	d81d      	bhi.n	186b6 <_malloc_r+0x52>
   1867a:	0030      	movs	r0, r6
   1867c:	f000 f888 	bl	18790 <__malloc_lock>
   18680:	4a25      	ldr	r2, [pc, #148]	; (18718 <_malloc_r+0xb4>)
   18682:	6814      	ldr	r4, [r2, #0]
   18684:	0021      	movs	r1, r4
   18686:	2900      	cmp	r1, #0
   18688:	d119      	bne.n	186be <_malloc_r+0x5a>
   1868a:	4c24      	ldr	r4, [pc, #144]	; (1871c <_malloc_r+0xb8>)
   1868c:	6823      	ldr	r3, [r4, #0]
   1868e:	2b00      	cmp	r3, #0
   18690:	d103      	bne.n	1869a <_malloc_r+0x36>
   18692:	0030      	movs	r0, r6
   18694:	f000 f86a 	bl	1876c <_sbrk_r>
   18698:	6020      	str	r0, [r4, #0]
   1869a:	0029      	movs	r1, r5
   1869c:	0030      	movs	r0, r6
   1869e:	f000 f865 	bl	1876c <_sbrk_r>
   186a2:	1c43      	adds	r3, r0, #1
   186a4:	d12c      	bne.n	18700 <_malloc_r+0x9c>
   186a6:	230c      	movs	r3, #12
   186a8:	0030      	movs	r0, r6
   186aa:	6033      	str	r3, [r6, #0]
   186ac:	f000 f871 	bl	18792 <__malloc_unlock>
   186b0:	e003      	b.n	186ba <_malloc_r+0x56>
   186b2:	2d00      	cmp	r5, #0
   186b4:	dadf      	bge.n	18676 <_malloc_r+0x12>
   186b6:	230c      	movs	r3, #12
   186b8:	6033      	str	r3, [r6, #0]
   186ba:	2000      	movs	r0, #0
   186bc:	bd70      	pop	{r4, r5, r6, pc}
   186be:	680b      	ldr	r3, [r1, #0]
   186c0:	1b5b      	subs	r3, r3, r5
   186c2:	d41a      	bmi.n	186fa <_malloc_r+0x96>
   186c4:	2b0b      	cmp	r3, #11
   186c6:	d903      	bls.n	186d0 <_malloc_r+0x6c>
   186c8:	600b      	str	r3, [r1, #0]
   186ca:	18cc      	adds	r4, r1, r3
   186cc:	6025      	str	r5, [r4, #0]
   186ce:	e003      	b.n	186d8 <_malloc_r+0x74>
   186d0:	428c      	cmp	r4, r1
   186d2:	d10e      	bne.n	186f2 <_malloc_r+0x8e>
   186d4:	6863      	ldr	r3, [r4, #4]
   186d6:	6013      	str	r3, [r2, #0]
   186d8:	0030      	movs	r0, r6
   186da:	f000 f85a 	bl	18792 <__malloc_unlock>
   186de:	0020      	movs	r0, r4
   186e0:	2207      	movs	r2, #7
   186e2:	300b      	adds	r0, #11
   186e4:	1d23      	adds	r3, r4, #4
   186e6:	4390      	bics	r0, r2
   186e8:	1ac3      	subs	r3, r0, r3
   186ea:	d0e7      	beq.n	186bc <_malloc_r+0x58>
   186ec:	425a      	negs	r2, r3
   186ee:	50e2      	str	r2, [r4, r3]
   186f0:	e7e4      	b.n	186bc <_malloc_r+0x58>
   186f2:	684b      	ldr	r3, [r1, #4]
   186f4:	6063      	str	r3, [r4, #4]
   186f6:	000c      	movs	r4, r1
   186f8:	e7ee      	b.n	186d8 <_malloc_r+0x74>
   186fa:	000c      	movs	r4, r1
   186fc:	6849      	ldr	r1, [r1, #4]
   186fe:	e7c2      	b.n	18686 <_malloc_r+0x22>
   18700:	2303      	movs	r3, #3
   18702:	1cc4      	adds	r4, r0, #3
   18704:	439c      	bics	r4, r3
   18706:	42a0      	cmp	r0, r4
   18708:	d0e0      	beq.n	186cc <_malloc_r+0x68>
   1870a:	1a21      	subs	r1, r4, r0
   1870c:	0030      	movs	r0, r6
   1870e:	f000 f82d 	bl	1876c <_sbrk_r>
   18712:	1c43      	adds	r3, r0, #1
   18714:	d1da      	bne.n	186cc <_malloc_r+0x68>
   18716:	e7c6      	b.n	186a6 <_malloc_r+0x42>
   18718:	20004c8c 	.word	0x20004c8c
   1871c:	20004c90 	.word	0x20004c90

00018720 <_realloc_r>:
   18720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18722:	0007      	movs	r7, r0
   18724:	000d      	movs	r5, r1
   18726:	0016      	movs	r6, r2
   18728:	2900      	cmp	r1, #0
   1872a:	d105      	bne.n	18738 <_realloc_r+0x18>
   1872c:	0011      	movs	r1, r2
   1872e:	f7ff ff99 	bl	18664 <_malloc_r>
   18732:	0004      	movs	r4, r0
   18734:	0020      	movs	r0, r4
   18736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18738:	2a00      	cmp	r2, #0
   1873a:	d103      	bne.n	18744 <_realloc_r+0x24>
   1873c:	f7ff ff48 	bl	185d0 <_free_r>
   18740:	0034      	movs	r4, r6
   18742:	e7f7      	b.n	18734 <_realloc_r+0x14>
   18744:	f000 f826 	bl	18794 <_malloc_usable_size_r>
   18748:	002c      	movs	r4, r5
   1874a:	4286      	cmp	r6, r0
   1874c:	d9f2      	bls.n	18734 <_realloc_r+0x14>
   1874e:	0031      	movs	r1, r6
   18750:	0038      	movs	r0, r7
   18752:	f7ff ff87 	bl	18664 <_malloc_r>
   18756:	1e04      	subs	r4, r0, #0
   18758:	d0ec      	beq.n	18734 <_realloc_r+0x14>
   1875a:	0029      	movs	r1, r5
   1875c:	0032      	movs	r2, r6
   1875e:	f7ff fbdc 	bl	17f1a <memcpy>
   18762:	0029      	movs	r1, r5
   18764:	0038      	movs	r0, r7
   18766:	f7ff ff33 	bl	185d0 <_free_r>
   1876a:	e7e3      	b.n	18734 <_realloc_r+0x14>

0001876c <_sbrk_r>:
   1876c:	2300      	movs	r3, #0
   1876e:	b570      	push	{r4, r5, r6, lr}
   18770:	4c06      	ldr	r4, [pc, #24]	; (1878c <_sbrk_r+0x20>)
   18772:	0005      	movs	r5, r0
   18774:	0008      	movs	r0, r1
   18776:	6023      	str	r3, [r4, #0]
   18778:	f7e8 fe3a 	bl	13f0 <_sbrk>
   1877c:	1c43      	adds	r3, r0, #1
   1877e:	d103      	bne.n	18788 <_sbrk_r+0x1c>
   18780:	6823      	ldr	r3, [r4, #0]
   18782:	2b00      	cmp	r3, #0
   18784:	d000      	beq.n	18788 <_sbrk_r+0x1c>
   18786:	602b      	str	r3, [r5, #0]
   18788:	bd70      	pop	{r4, r5, r6, pc}
   1878a:	46c0      	nop			; (mov r8, r8)
   1878c:	20004e34 	.word	0x20004e34

00018790 <__malloc_lock>:
   18790:	4770      	bx	lr

00018792 <__malloc_unlock>:
   18792:	4770      	bx	lr

00018794 <_malloc_usable_size_r>:
   18794:	1f0b      	subs	r3, r1, #4
   18796:	681b      	ldr	r3, [r3, #0]
   18798:	1f18      	subs	r0, r3, #4
   1879a:	2b00      	cmp	r3, #0
   1879c:	da01      	bge.n	187a2 <_malloc_usable_size_r+0xe>
   1879e:	580b      	ldr	r3, [r1, r0]
   187a0:	18c0      	adds	r0, r0, r3
   187a2:	4770      	bx	lr
   187a4:	42000800 	.word	0x42000800
   187a8:	42000c00 	.word	0x42000c00
   187ac:	42001000 	.word	0x42001000
   187b0:	42001400 	.word	0x42001400
   187b4:	42001800 	.word	0x42001800
   187b8:	42001c00 	.word	0x42001c00
   187bc:	00000d46 	.word	0x00000d46
   187c0:	00000d42 	.word	0x00000d42
   187c4:	00000d42 	.word	0x00000d42
   187c8:	00000da8 	.word	0x00000da8
   187cc:	00000da8 	.word	0x00000da8
   187d0:	00000d5a 	.word	0x00000d5a
   187d4:	00000d4c 	.word	0x00000d4c
   187d8:	00000d60 	.word	0x00000d60
   187dc:	00000d96 	.word	0x00000d96
   187e0:	00000e30 	.word	0x00000e30
   187e4:	00000e10 	.word	0x00000e10
   187e8:	00000e10 	.word	0x00000e10
   187ec:	00000e9c 	.word	0x00000e9c
   187f0:	00000e22 	.word	0x00000e22
   187f4:	00000e3e 	.word	0x00000e3e
   187f8:	00000e14 	.word	0x00000e14
   187fc:	00000e4c 	.word	0x00000e4c
   18800:	00000e8c 	.word	0x00000e8c
   18804:	2074754f 	.word	0x2074754f
   18808:	6d20666f 	.word	0x6d20666f
   1880c:	726f6d65 	.word	0x726f6d65
   18810:	0079      	.short	0x0079
   18812:	f800      	.short	0xf800
   18814:	00002242 	.word	0x00002242
   18818:	000022be 	.word	0x000022be
   1881c:	000022c8 	.word	0x000022c8
   18820:	000022de 	.word	0x000022de
   18824:	000022ee 	.word	0x000022ee
   18828:	000022fe 	.word	0x000022fe
   1882c:	0000231c 	.word	0x0000231c
   18830:	00002334 	.word	0x00002334
   18834:	0000234a 	.word	0x0000234a
   18838:	00002368 	.word	0x00002368
   1883c:	00002372 	.word	0x00002372
   18840:	00002388 	.word	0x00002388
   18844:	00002398 	.word	0x00002398
   18848:	000023a8 	.word	0x000023a8
   1884c:	000023c6 	.word	0x000023c6
   18850:	000023de 	.word	0x000023de
   18854:	000023e8 	.word	0x000023e8
   18858:	000023fe 	.word	0x000023fe
   1885c:	0000240e 	.word	0x0000240e
   18860:	0000241e 	.word	0x0000241e
   18864:	0000243c 	.word	0x0000243c
   18868:	0000ffff 	.word	0x0000ffff
   1886c:	4c4c554e 	.word	0x4c4c554e
   18870:	696f7020 	.word	0x696f7020
   18874:	7265746e 	.word	0x7265746e
   18878:	00000000 	.word	0x00000000
   1887c:	6f5f766c 	.word	0x6f5f766c
   18880:	00006a62 	.word	0x00006a62
   18884:	000007e0 	.word	0x000007e0
   18888:	00007e8c 	.word	0x00007e8c
   1888c:	00007e90 	.word	0x00007e90
   18890:	00007e8c 	.word	0x00007e8c
   18894:	00007e94 	.word	0x00007e94
   18898:	00007e98 	.word	0x00007e98
   1889c:	00007e9c 	.word	0x00007e9c
   188a0:	00007ea0 	.word	0x00007ea0
   188a4:	00007e94 	.word	0x00007e94
   188a8:	00007e98 	.word	0x00007e98
   188ac:	00007e9c 	.word	0x00007e9c
   188b0:	00007ea0 	.word	0x00007ea0
   188b4:	0000ffff 	.word	0x0000ffff
   188b8:	640a6f4e 	.word	0x640a6f4e
   188bc:	00617461 	.word	0x00617461
   188c0:	00008150 	.word	0x00008150
   188c4:	00008138 	.word	0x00008138
   188c8:	0000813c 	.word	0x0000813c
   188cc:	00008140 	.word	0x00008140
   188d0:	00008144 	.word	0x00008144
   188d4:	00008148 	.word	0x00008148
   188d8:	000000ff 	.word	0x000000ff

000188dc <_lv_bpp1_opa_table>:
   188dc:	0000ff00                                ....

000188e0 <_lv_bpp2_opa_table>:
   188e0:	ffaa5500                                .U..

000188e4 <_lv_bpp4_opa_table>:
   188e4:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

000188f4 <_lv_bpp8_opa_table>:
   188f4:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   18904:	13121110 17161514 1b1a1918 1f1e1d1c     ................
   18914:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
   18924:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
   18934:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
   18944:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
   18954:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
   18964:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
   18974:	83828180 87868584 8b8a8988 8f8e8d8c     ................
   18984:	93929190 97969594 9b9a9998 9f9e9d9c     ................
   18994:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
   189a4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   189b4:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
   189c4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   189d4:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
   189e4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

000189f4 <wcorr.9232>:
   189f4:	81808080 83828281 87868584 8d8c8a89     ................
   18a04:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
   18a14:	000000b5 0000ffff 33221100 77665544     .........."3DUfw
   18a24:	bbaa9988 ffeeddcc 33221100 77665544     .........."3DUfw
   18a34:	bbaa9988 ffeeddcc 006e6962 0000ea54     ........bin.T...
   18a44:	0000ea5a 0000e9f0 0000ea42 0000ea48     Z.......B...H...
   18a54:	0000ea54 0000ea54 0000ea54 0000ea4e     T...T...T...N...
   18a64:	0000ec90 0000ec94 0000ec5a 0000ec84     ........Z.......
   18a74:	0000ec88 0000ec90 0000ec90 0000ec90     ................
   18a84:	0000ec8c 0000ec3a 0000ec3e 0000ec04     ....:...>.......
   18a94:	0000ec2e 0000ec32 0000ec3a 0000ec3a     ....2...:...:...
   18aa4:	0000ec3a 0000ec36 0000eb8a 0000eb8e     :...6...........
   18ab4:	0000eb64 0000eb7e 0000eb82 0000eb8a     d...~...........
   18ac4:	0000eb8a 0000eb8a 0000eb86 0000ed08     ................
   18ad4:	0000ed5c 0000ed62 0000ed68 0000ed6e     \...b...h...n...
   18ae4:	0000ed74 0000ed7a 0000ed80 0000ee30     t...z.......0...
   18af4:	0000ee34 0000ee20 0000ee24 0000ee28     4... ...$...(...
   18b04:	0000ee30 0000ee30 0000ee30 0000ee2c     0...0...0...,...
   18b14:	0000f090 0000f094 0000f080 0000f084     ................
   18b24:	0000f088 0000f090 0000f090 0000f090     ................
   18b34:	0000f08c 0000f008 0000f038 0000eff8     ........8.......
   18b44:	0000effc 0000f000 0000f008 0000f008     ................
   18b54:	0000f008 0000f004 0000efd0 0000efd6     ................
   18b64:	0000ef8c 0000efbe 0000efc4 0000efd0     ................
   18b74:	0000efd0 0000efd0 0000efca 0000f10a     ................
   18b84:	0000f166 0000f16c 0000f172 0000f178     f...l...r...x...
   18b94:	0000f17e 0000f184 0000f18a              ~...........

00018ba0 <cmaps>:
   18ba0:	00000020 0001005f 00000000 00000000      ..._...........
   18bb0:	00000000 000000b0 0060f7f3 0001c7d0     ..........`.....
   18bc0:	00000000 0002003b                       ....;...

00018bc8 <glyph_dsc>:
	...
   18bd0:	04500000 00000000 04500000 00010c03     ..P.......P.....
   18be0:	06400012 07010505 0b40001f 00000c0b     ..@.......@.....
   18bf0:	09f00061 fe00100a 0d8000b1 00000c0d     a...............
   18c00:	0b0000ff ff000d0b 03600147 07010502     ........G.`.....
   18c10:	0560014c fd010f04 0570016a fd000f04     L.`.....j.p.....
   18c20:	06600188 05000707 095001a1 02010808     ..`.......P.....
   18c30:	03a001c1 fe000503 062001c9 03000306     .......... .....
   18c40:	03a001d2 00000303 05a001d7 feff1008     ................
   18c50:	0ab00217 00000c0a 05f00253 00000c05     ........S.......
   18c60:	09300271 00000c09 092002a7 00000c09     q.0....... .....
   18c70:	0ab002dd 00000c0b 0930031f 00000c09     ..........0.....
   18c80:	09e00355 00000c0a 09900391 00000c09     U...............
   18c90:	0a5003c7 00000c0a 09e00403 00000c0a     ..P.............
   18ca0:	03a0043f 00000903 03a0044d fd000c03     ?.......M.......
   18cb0:	0950045f 02010808 0950047f 03010608     _.P.......P.....
   18cc0:	09500497 02010808 093004b7 00000c09     ..P.......0.....
   18cd0:	109004ed fd000f10 0bb00565 00ff0c0d     ........e.......
   18ce0:	0c2005b3 00010c0b 0b9005f5 00000c0b     .. .............
   18cf0:	0d300637 00010c0c 0ac0067f 00010c09     7.0.............
   18d00:	0a3006b5 00010c09 0c6006eb 00000c0c     ..0.......`.....
   18d10:	0d000733 00010c0b 04f00775 00010c03     3.......u.......
   18d20:	08300787 00ff0c08 0b8007b7 00010c0b     ..0.............
   18d30:	098007f9 00010c09 0f40082f 00010c0d     ......../.@.....
   18d40:	0d00087d 00010c0b 0d7008bf 00000c0d     }.........p.....
   18d50:	0b90090d 00010c0a 0d700949 fd000f0e     ........I.p.....
   18d60:	0ba009b2 00010c0a 09f009ee 00000c0a     ................
   18d70:	09600a2a 00000c0a 0ca00a66 00010c0b     *.`.....f.......
   18d80:	0b600aa8 00ff0c0d 12000af6 00000c12     ..`.............
   18d90:	0ac00b62 00000c0b 0a600ba4 00ff0c0c     b.........`.....
   18da0:	0a800bec 00000c0b 05500c2e fd010f05     ..........P.....
   18db0:	05a00c54 feff1008 05500c94 fd000f04     T.........P.....
   18dc0:	09500cb2 02010708 08000cce fe000208     ..P.............
   18dd0:	09a00cd6 0a010205 09900cdb 00000909     ................
   18de0:	0af00d04 00010c0a 09200d40 00000909     ........@. .....
   18df0:	0af00d69 00000c0a 09d00da5 0000090a     i...............
   18e00:	05a00dd2 00000c07 0b100dfc fd000c0a     ................
   18e10:	0ae00e38 00010c09 04700e6e 00010c03     8.......n.p.....
   18e20:	04900e80 fdfe0f06 09e00ead 00010c09     ................
   18e30:	04700ee3 00010c02 10f00eef 0001090f     ..p.............
   18e40:	0ae00f33 00010909 0a300f5c 0000090a     3.......\.0.....
   18e50:	0af00f89 fd010c0a 0af00fc5 fd000c0a     ................
   18e60:	06901001 00010906 0800101c 00000908     ................
   18e70:	06a01040 00000b07 0ad01067 00010909     @.......g.......
   18e80:	08f01090 00ff090a 0e6010bd 0000090f     ..........`.....
   18e90:	08d01101 00000909 08f0112a fdff0c0a     ........*.......
   18ea0:	08501166 00000908 05a0118a fd000f06     f.P.............
   18eb0:	04d011b7 fd010f03 05a011ce fd000f05     ................
   18ec0:	095011f4 04000509 06b0120b 06000606     ..P.............
   18ed0:	0500121d 03010403 10001223 fe001110     ........#.......
   18ee0:	100012ab 00000c10 1000130b ff000e10     ................
   18ef0:	1000137b 00000c10 0b0013db 00000c0b     {...............
   18f00:	1000141d fe001010 1000149d fe001010     ................
   18f10:	1200151d ff000e12 1000159b fe001010     ................
   18f20:	1200161b 00000c12 10001687 fe001010     ................
   18f30:	08001707 ff000e08 0c00173f ff000e0c     ........?.......
   18f40:	12001793 fe001012 10001823 00000c10     ........#.......
   18f50:	0e001883 fe02100a 0e0018d3 fd00120e     ................
   18f60:	0e001951 ff000f0e 0e0019ba ff000e0e     Q...............
   18f70:	0e001a1c fe02100a 0e001a6c ffff0e10     ........l.......
   18f80:	0a001adc ff000e0a 0a001b22 ff000e0a     ........".......
   18f90:	0e001b68 ff000e0e 0e001bca 0400040e     h...............
   18fa0:	12001be6 00000c12 14001c52 fe001014     ........R.......
   18fb0:	12001cf2 feff1014 10001d92 fe001010     ................
   18fc0:	0e001e12 01000a0e 0e001e58 01000a0e     ........X.......
   18fd0:	14001e9e ff000e14 10001f2a 00000c10     ........*.......
   18fe0:	10001f8a fe001010 1000200a feff1111     ......... ......
   18ff0:	0e00209b ff000e0f 0e002104 fe00100e     . .......!......
   19000:	0e002174 ff000e0e 0a0021d6 feff100c     t!.......!......
   19010:	0e002236 fe00100e 0e0022a6 fe00100e     6"......."......
   19020:	12002316 00000c12 10002382 fdff1212     .#.......#......
   19030:	0c002424 fe00100c 14002484 ff000f14     $$.......$......
   19040:	1400251a 01000a14 1400257e 01000a14     .%......~%......
   19050:	140025e2 01000a14 14002646 01000a14     .%......F&......
   19060:	140026aa 01000a14 1400270e ff000e15     .&.......'......
   19070:	0e0027a1 fe01100c 0e002801 fe00100e     .'.......(......
   19080:	10002871 fdff1111 14002902 00000c14     q(.......)......
   19090:	0c00297a fe00100c 102029da 01000b11     z).......) .....

000190a0 <gylph_bitmap>:
   190a0:	aff00bbf 089ee00a c0078cd0 bf100000     ................
   190b0:	1ff5e01a e4f3513f f2403e0f 00100872     ....?Q...>@.r...
   190c0:	e003c005 007a0000 0900005c 01a00780     ......z.\.......
   190d0:	ffffffff 733e03fd 0030833c 00c500f2     ......>s<.0.....
   190e0:	0e100f00 f0020030 9f00f200 ffffffff     ....0...........
   190f0:	36c33841 890030e3 00005c00 a007700a     A8.6.0...\...p..
   19100:	79000000 00000000 00000079 20e9ff5c     ...y....y...\.. 
   19110:	9ebcfc06 79b00e90 800f1000 0d000079     .......y....y...
   19120:	000079f5 50fdef03 cf060000 000040fe     .y.....P.....@..
   19130:	00f15e79 f3057900 07790007 bce92ff1     y^...y....y../..
   19140:	ae03a0af 0000d7ff 00007900 00790000     .........y....y.
   19150:	80de0300 00d00500 01500ce4 004c00e3     ..........P...L.
   19160:	00a9005a c004a006 4c00004e 500d5a00     Z.......N..L.Z.P
   19170:	1ce40000 0000a058 e173ce03 0000e93c     ....X.....s.<...
   19180:	400ed600 7c0000a8 d003c003 3c202e00     ...@...|...... <
   19190:	0b003d00 09e20070 00d00680 00a0dd04     .=..p...........
   191a0:	00b1ef09 3ce40900 d90000a0 00007d00     .......<.....}..
   191b0:	a01cc00c ae3f0000 010000c1 0000c0df     ......?.........
   191c0:	708feb03 00db0018 3ff0657f ea8f0040     ...p.....e.?@...
   191d0:	0000f703 f90b70cf 40bfcf66 30eadf08     .....p..f..@...0
   191e0:	000000a5 f5000000 72e4e4f5 f205da00     ...........r....
   191f0:	700fc00b 205f403f 007f106f 205f106f     ...p?@_ o...o._ 
   19200:	700f403f f205c00b 303fda00 f106b00c     ?@.p......?0....
   19210:	e900f601 ad00bc00 ad00ae00 e900bc00     ................
   19220:	f106f601 303fb00c 06004a00 2ba0a474     ......?0.J..t..+
   19230:	7f00e5ff 6b7b20fb a004008d 00130000     ..... {k........
   19240:	10050000 500f0000 500f0000 511f0100     .......P...P...Q
   19250:	ffffef10 744f34f3 500f0040 500f0000     .....4Ot@..P...P
   19260:	fd520900 0fc5a00b 10110100 04f3ff1f     ..R.............
   19270:	12034044 00901efc 00f10500 00b00a00     D@..............
   19280:	00600f00 00105f00 0000ab00 0000f600     ..`.._..........
   19290:	0000f105 0000b00a 0000600f 0000104f     .........`..O...
   192a0:	000000ac 040000f6 0a0000f1 0e0000c0     ................
   192b0:	4f000060 00000010 00c5ef08 cfa8cf00     `..O............
   192c0:	00f50770 c00df20a 1ff80100 dc000080     p...............
   192d0:	0000603f 00603fbd 801fbd00 0ddc0000     ?`...?`.........
   192e0:	f80100c0 0a00f507 a8cf00f2 080070cf     .............p..
   192f0:	ef00c5ef f37a36ff 05305f00 305f00f3     .....6z.._0..._0
   19300:	5f00f305 00f30530 f305305f 05305f00     ..._0..._0..._0.
   19310:	fdbe04f3 98fd0770 002890cf 0000bf00     ....p.....(.....
   19320:	00f20700 00af0000 804f0000 c03f0000     ..........O...?.
   19330:	c13e0000 c12e0000 d12e0000 f82e0000     ..>.............
   19340:	ff467777 6ffaffff 02ffffff b09f7777     wwF....o....ww..
   19350:	e10c0000 f3090000 f6050000 df000000     ................
   19360:	040010e9 0000fd59 00f40600 643f0000     ....Y.........?d
   19370:	f3080040 fb8cc9bf d7ff7c00 01000000     @........|......
   19380:	000000eb 0010be00 506f0000 2f000000     ..........oP.../
   19390:	00000090 0000d00c 01f30800 f80300d5     ................
   193a0:	00602f00 f72322ed ffff6f21 5581ffff     ./`.."#.!o.....U
   193b0:	52f95655 2f000000 00000060 0500f602     UV.R.../`.......
   193c0:	00ffffff 7077777f 0000e008 0000ad00     .....wwp........
   193d0:	10c20b00 ffdf0000 550430fb 0020ff68     .........0.Uh. .
   193e0:	00f80400 920f0000 f6050050 fd8ad98f     ........P.......
   193f0:	e9ef5b10 ce050010 9f0060fc 05708bc8     .[.......`....p.
   19400:	000000f8 0000d00c 00801f00 682f0000     ............../h
   19410:	3f10faef d08f64ee 0600f12f 00c00ef4     ...?.d../.......
   19420:	f109f602 01f30600 b09f86de d8ef1900     ................
   19430:	ffff8f00 77f7e8ff 008ffc77 90554f00     .......ww....OU.
   19440:	00e00b00 00f80200 109f0000 b00f0000     ................
   19450:	f4060000 dd000000 3f000000 0a000070     ...........?p...
   19460:	010000f1 000000f9 00d7ff5c af76fc06     ........\.....v.
   19470:	00d00ca0 c00df109 07f20700 c05e11f7     ..............^.
   19480:	feffbf00 54f90910 802fd07e 4ff60400     .......T~./....O
   19490:	f8000050 0500a01f 76fb09f6 6c00d0af     P..........v...l
   194a0:	0010d8ff 0080fd8e fc68f80c 00505f00     ..........h.._P.
   194b0:	008f703f 7fc00e00 f01f0030 cf13d41f     ?p......0.......
   194c0:	ffef04f1 0200f0a9 00f00a31 a00e0000     ........1.......
   194d0:	9f000000 8da70930 df0700f7 1e0040eb     ....0........@..
   194e0:	1003fc92 00000000 1efc1203 fc921e90     ................
   194f0:	00001003 01000000 a8d01fe9 00a0300e     .............0..
   19500:	00420000 03f37d01 bf10e89f ee0000b5     ..B..}..........
   19510:	17000081 0000b4df 00d2af04 ef820100     ................
   19520:	45f3ffff 00515555 01000000 ef101111     ...EUUQ.........
   19530:	34f3ffff 50404444 ef000000 06000092     ...4DD@P........
   19540:	0000b5cf 00e29f03 02f36c00 bf20e99e     .........l.... .
   19550:	930000c6 04000000 0770fdbe a0bf77fc     ..........p..w..
   19560:	cf000027 09000000 010000f0 010000ea     '...............
   19570:	000010dd 000010ce 0000603f 00003001     ........?`...0..
   19580:	00000100 00f50600 405f0000 17000000     .........._@....
   19590:	00b5fdce fb050000 c27d2353 406e0000     ........S#}...n@
   195a0:	8e000000 01f40210 493ffaae 1e900ab0     ..........?I....
   195b0:	40ef5be6 8f300fe3 40af0010 d9001f98     .[.@..0....@....
   195c0:	403f0000 e8003f6a 401f0000 d9001f5c     ..?@j?.....@\...
   195d0:	403f0000 8f300f6a 40af0010 1e900a98     ..?@j.0....@....
   195e0:	a6de5ad6 01f303f2 ee16faaf 406e0050     .Z..........P.n@
   195f0:	00000000 fb060000 00752353 17000000     ........S#u.....
   19600:	00a3fdce 02000000 000000fd f49f0000     ................
   19610:	00000000 00b09e0f f2060000 0000207f     ............. ..
   19620:	f801dc00 4f000000 00e00b60 00f00b00     .......O`.......
   19630:	0100604f ed1111fa ff8f0000 00f3ffff     O`..............
   19640:	4444c40e f406a04f af000000 0000cd10     ..DDO...........
   19650:	5ff80200 40ebffff 5755f805 405f40df     ..._...@..UW.@_@
   19660:	05fa0100 0f0000f4 11515fa0 ff05f43a     ........._Q.:...
   19670:	00faffff 5944745f 00f405fa 5ff20800     ...._tDY......._
   19680:	5f000040 0000f445 855ff209 05fb6a55     @.._E....._.Uj..
   19690:	d7ffffff 8d020000 0400b4fe f99db8ff     ................
   196a0:	0020fd02 20bf5008 0f000000 000000a0     .. ..P. ........
   196b0:	0000f602 602f0000 00000000 000000fa     ....../`........
   196c0:	00f20b00 2f000000 850000d2 89fb5f00     ......./....._..
   196d0:	290080df 5f40ebdf 30eaffff 77975f00     ...)..@_...0._.w
   196e0:	5f00f89e af000040 00405f60 5fe00d00     ..._@...`_@...._
   196f0:	06000040 00405ff4 5ff60300 03000040     @...._@...._@...
   19700:	00405ff6 5ff40600 0d000040 00405fe0     ._@...._@...._@.
   19710:	5f60af00 f89e7797 ffff5f00 5f0030ea     ..`_.w..._...0._
   19720:	95ffffff 747777f9 0000405f 0000f405     .....wwt_@......
   19730:	11515f00 ffff0511 745fe0ff f4054444     ._Q......._tDD..
   19740:	5f000000 05000040 000000f4 7777975f     ..._@......._.ww
   19750:	ffffff65 ffff5ffd 77f995ff 405f7477     e...._.....wwt_@
   19760:	f4050000 5f000000 05000040 102222f5     ......._@...."".
   19770:	feffff5f 5555f805 00405f40 00f40500     _.....UU@_@.....
   19780:	405f0000 f4050000 00000000 b5fe8d01     .._@............
   19790:	fb4f0000 02b0df89 060020fd 00f20b60     ..O...... ..`...
   197a0:	0f000000 000000a0 00602f00 2f000000     ........./`..../
   197b0:	09000060 00a00ff0 0bf00900 090000f2     `...............
   197c0:	20fd02f0 00f00a00 df89fb4f 8d0200c0     ... ....O.......
   197d0:	5f00c6fe 4f000040 0000f455 405ff504     ..._@..OU....._@
   197e0:	554f0000 040000f4 22525ff5 ff555f22     ..OU....._R""_U.
   197f0:	f5ffffff 5555855f 00f4558f 5ff50400     ...._.UU.U....._
   19800:	4f000040 0000f455 405ff504 554f0000     @..OU....._@..OU
   19810:	040000f4 f4455ff5 5ff4455f 455ff445     ....._E._E._E._E
   19820:	f4455ff4 00f4455f 00faffff 00fa7777     ._E._E......ww..
   19830:	00fa0000 00fa0000 00fa0000 00fa0000     ................
   19840:	00fa0000 00fa0000 07f90000 0df60320     ............ ...
   19850:	01f18ee9 5f30fbae eb020040 0100f405     ......0_@.......
   19860:	405f00ec 0510de01 20ce00f4 bf405f00     .._@....... ._@.
   19870:	f4050030 0000909f 40efcf5f 91ff0500     0......._..@....
   19880:	5f0010ee 00fc03a0 0600f405 405f00f8     ..._.........._@
   19890:	05f50900 0c0000f4 00405ff2 00f40500     ........._@.....
   198a0:	405f0000 f4050000 5f000000 05000040     .._@......._@...
   198b0:	000000f4 0000405f 0000f405 00405f00     ...._@......._@.
   198c0:	00f40500 975f0000 ff257777 5ff5ffff     ......_.ww%...._
   198d0:	00000040 00fc951e f9080000 0000f55f     @..........._...
   198e0:	fd95ff02 ae0000e0 705f5ff9 955f3f00     .........__p.?_.
   198f0:	0b108ff3 315ff9c0 0ff304e9 f207f395     ......_1........
   19900:	5ff900db 20ef0d30 00f3950f f900905f     ..._0.. ...._...
   19910:	7100305f f3950f00 00000000 00505ff9     _0.q........._P.
   19920:	ff554f00 f5040020 0000fd5f f9fa554f     .OU. ..._...OU..
   19930:	5ff50400 4f00f54a f20df455 405ff504     ..._J..OU....._@
   19940:	554fd02f 946f00f4 00405ff5 f455afaf     /.OU..o.._@...U.
   19950:	f5df0000 0200405f 00f455ff 00f50600     ...._@...U......
   19960:	b5fe8d01 ff040000 00fa9eb8 0020fd02     .............. .
   19970:	bf00f908 0a000020 00a00ff2 723f0000     .... .........?r
   19980:	000000f6 602ff900 0f000000 0000fa90     ....../`........
   19990:	0bf70300 000000f2 d22f20af 908f0000     ......... /.....
   199a0:	89fb4f00 0000a0ef 50ebdf28 ffff5f00     .O......(..P._..
   199b0:	975f00d7 5fc0bf78 f6070040 0000405f     .._.x.._@..._@..
   199c0:	00405ffa 405ffa00 5ff80300 f16e2362     ._@..._@..._b#n.
   199d0:	fdffff5f 54855f30 405f0020 5f000000     _...0_.T ._@..._
   199e0:	00000040 0000405f 8d010000 0000b5fe     @..._@..........
   199f0:	89fb4e00 0200a0ef 080020fd f20a00f9     .N....... ......
   19a00:	af000000 00a00f20 703f0000 0000602f     .... .....?p/`..
   19a10:	2f900f00 00000060 901f900f 2f000000     .../`........../
   19a20:	00f10b70 20af0000 0010fc03 0000f907     p...... ........
   19a30:	df78fa6f 030000b0 00c5ffae 00000000     o.x.............
   19a40:	b015d43e 02000000 0080ffbf 01000000     >...............
   19a50:	ff5f0031 5f00d7ff c0bf7897 0700405f     1._...._.x.._@..
   19a60:	00405ff6 405ffa00 5ffa0000 f8030040     ._@..._@..._@...
   19a70:	6e23525f ffff5fe1 855f30fc 5f00f955     _R#n._...0_.U.._
   19a80:	407f0040 0c00405f 00405fe0 5c00f902     @..@_@..._@....\
   19a90:	0720d9ef 90af87fc 0100c00e 00800f10     .. .............
   19aa0:	f50d0000 03000000 0050eaef feae0500     ..........P.....
   19ab0:	00000040 0000f14e 08f30500 f2080000     @...N...........
   19ac0:	bf77fa2f ff9d02a0 ffff00c7 67f5ffff     /.w............g
   19ad0:	7277fb78 00f70100 f7010000 01000000     x.wr............
   19ae0:	000000f7 0000f701 00f70100 f7010000     ................
   19af0:	01000000 000000f7 0000f701 00f70100     ................
   19b00:	f7010000 306f0000 168f0000 080000f3     ......o0........
   19b10:	00306ff1 f3168f00 f1080000 0000306f     .o0.........o0..
   19b20:	00f3168f 6ff10800 8f000030 0000f405     .......o0.......
   19b30:	703ff009 00cd0000 5f0020de a8ff0480     ..?p..... ._....
   19b40:	0300d0bf 0081fdbe 0000e00c 6f306f00     .............o0o
   19b50:	0c000050 00fb00c0 00f60300 0000f209     P...............
   19b60:	2f0000ae 901f0080 00ce0000 0000f207     .../............
   19b70:	db00f605 0e000000 00504fc0 3b8f0000     .........OP....;
   19b80:	000000e0 00f8fb02 0b000000 000010ff     ................
   19b90:	b04f0000 405f0000 00df0000 0ff50200     ..O..._@........
   19ba0:	ff020090 f0070040 0700e00b 0c0090fe     ....@...........
   19bb0:	00f306b0 00e0aa0c f801601f f3541f00     .........`....T.
   19bc0:	00106f00 107f00cd 00cc00f8 cb207f00     .o............ .
   19bd0:	f701ad00 712f0000 265f00f6 0d0000f2     ....../q.._&....
   19be0:	0f00f1c6 0000d07b 00c0fd08 0080df0b     ....{...........
   19bf0:	70ff0300 30ff0600 ef000000 fe010020     ...p...0.... ...
   19c00:	903f0000 00cd0000 7f00408f 10de0030     ..?......@..0...
   19c10:	0300802f 00d00cfa f3fb0700 0c000000     /...............
   19c20:	000000f8 00c0ef01 7fbf0000 6f000070     ............p..o
   19c30:	0020af60 ed01b02f 00f10c00 f607f804     `. ./...........
   19c40:	f3090000 0000e00c f703f207 901f0000     ................
   19c50:	0010af00 1f00109e 00f602a0 0bf30800     ................
   19c60:	000000d0 00404fec fb5f0000 00000000     .....O@..._.....
   19c70:	0000f20c f0090000 00000000 0000f009     ................
   19c80:	f0090000 00000000 0000f009 ffffff3f     ............?...
   19c90:	777701fd 0090bf77 c01e0000 0c000000     ..www...........
   19ca0:	000000f2 0000f508 00f90400 ec010000     ................
   19cb0:	00000000 000020cf 00508f00 904f0000     ..... ....P...O.
   19cc0:	1e000000 777777f8 ffffff05 ff5ff0ff     .....www......_.
   19cd0:	5f50f705 00f30530 f305305f 05305f00     ..P_0..._0..._0.
   19ce0:	305f00f3 5f00f305 00f30530 f705305f     .._0..._0..._0..
   19cf0:	00ff5f50 0000007e 0000401f 0000900c     P_..~....@......
   19d00:	0000e007 0000f402 0000c900 00007e00     .............~..
   19d10:	00402f00 00900c00 00e00700 00f30200     ./@.............
   19d20:	00d90000 007e0000 302f0000 900d0000     ......~.../0....
   19d30:	e0070000 ea35fabf ea00ea00 ea00ea00     ......5.........
   19d40:	ea00ea00 ea00ea00 ea00ea00 ea35ea00     ..............5.
   19d50:	2f00fabf 9d000080 f30000e0 d00600d5     .../............
   19d60:	600c007b 103f201f 009a800b ffffe004     {..`. ?.........
   19d70:	1111ffff f6071111 01e70300 0080fd9e     ................
   19d80:	90af87ce af000002 06000000 ffbe02f2     ................
   19d90:	42ec20ff 502ff227 ec207f00 02f27f42     . .B'./P.. .B...
   19da0:	206ffbbf 0000008f 00008f00 008f0000     ..o ............
   19db0:	8f000000 00b3fe2b ef78ec8f 00a08f30     ....+.....x.0...
   19dc0:	208fc01e 8ff10700 f3050000 0700208f     ... ......... ..
   19dd0:	00a08ff1 ec8fd01e 8e30ef78 00b3fe2b     ........x.0.+...
   19de0:	c4ef3a00 7cd84f00 00d00df4 00f61307     .:...O.|........
   19df0:	304f0000 f6030000 0d000000 100600d0     ..O0............
   19e00:	f47cd74f c4ef3a00 00000000 0000f701     O.|..:..........
   19e10:	00f70100 f7010000 a3ff3b00 87fd04f7     .........;......
   19e20:	d00ef7ce 3ff70b00 f7030060 0100304f     .......?`...O0..
   19e30:	00503ff7 c00ef703 04f70a00 f7be65fc     .?P..........e..
   19e40:	b2ff3b00 fe3b00f7 fc0400a2 0e20ee67     .;....;.....g. .
   19e50:	a01e00c0 0700503f ffff4ff0 723ff1ff     ....?P...O....?r
   19e60:	0e202222 000200c0 af87fd04 ef3a0050     "" .........P.:.
   19e70:	5d0000d6 b52f00fc 00f30470 a0ffff0c     ...]../.p.......
   19e80:	0053f748 0500305f 5f0000f3 f3050030     H.S._0....._0...
   19e90:	305f0000 00f30500 00305f00 b2ff3b00     .._0....._0..;..
   19ea0:	87fe04e9 d10ef9cf 3ff90a00 f9010060     ...........?`...
   19eb0:	0000404f 00603ff9 d00ef901 04f90900     O@...?`.........
   19ec0:	f8cf87fd b3ff3b00 000000f7 e909f405     .....;..........
   19ed0:	01b0af77 00d8ff7c 0000008f 0000f008     w...|...........
   19ee0:	00008f00 bff20800 fb8f10ea f808fd89     ................
   19ef0:	8ff40600 781f0010 f80000f0 0f00008f     .......x........
   19f00:	0000f088 00008ff8 00f0880f 1a9ef800     ................
   19f10:	f00800f2 8ff0088f 088ff008 f0088ff0     ................
   19f20:	00e20700 0000f309 f1070000 00f10700     ................
   19f30:	0700f107 f10700f1 00f10700 0700f107     ................
   19f40:	f10700f1 18f00800 fc3ec06e 00008f20     ........n.>. ...
   19f50:	00f00800 008f0000 f0080000 8fd11d00     ................
   19f60:	08e21d00 00e21df0 00f32d8f 70fffe08     .........-.....p
   19f70:	bfe28f00 01f20830 008f10ee f008fb03     ....0...........
   19f80:	8ff70700 8f8f8f8f 8f8f8f8f 8e8f8f8f     ................
   19f90:	3b91fe3c ff08a2fe c6cf9f96 708fd08f     <..;...........p
   19fa0:	00c09f00 00f1585f 0100f605 00008ff7     ...._X..........
   19fb0:	0f00404f 0400f088 f80000f4 4f00008f     O@.............O
   19fc0:	880f0040 f40400f0 8ff80000 404f0000     @.............O@
   19fd0:	8e800f00 08a1fe3b d08fa6ff 6f00808f     ....;..........o
   19fe0:	0100f148 00008ff7 00f0880f 008ff800     H...............
   19ff0:	f0880f00 8ff80000 800f0000 c4ef3b00     .............;..
   1a000:	87fd0400 d00e60cf 3ff10b00 f5030060     .....`.....?`...
   1a010:	0100304f 00603ff7 d00ef503 04f10b00     O0...?`.........
   1a020:	60cf77fd c4ef3b00 fe3b8e00 fb8f00b3     .w.`.;....;.....
   1a030:	8f30df57 c00d0090 0700108f 00008ff1     W.0.............
   1a040:	208ff305 8ff10700 d01e00a0 ef78ec8f     ... ..........x.
   1a050:	fe2b8f30 008f00b3 8f000000 00000000     0.+.............
   1a060:	0000008f ff3b0000 fd04f7a2 0ef7de87     ......;.........
   1a070:	f70b00d0 0300603f 00304ff7 603ff701     ....?`...O0...?`
   1a080:	0ef70300 f70b00d0 ce77fd04 ff3b00f7     ..........w...;.
   1a090:	0000f7a3 00f70100 f7010000 01000000     ................
   1a0a0:	f02b8ef7 8f90ed8f 208f00a0 00008f00     ..+........ ....
   1a0b0:	8f00008f 008f0000 00008f00 91fdae02     ................
   1a0c0:	d069d71e 0000304f 0010b42f 60fdef06     ..i.O0../......`
   1a0d0:	f55b0100 f7000001 f36ba75f 40ecdf19     ..[....._.k....@
   1a0e0:	0000f305 cf00305f 8f04faff f3053075     ...._0......u0..
   1a0f0:	305f0000 00f30500 00305f00 0000f404     .._0....._0.....
   1a100:	0080c61f ae10fc5d 5a2f0000 f50200e0     ....]...../Z....
   1a110:	2f0000ae 0200e05a 0000aef5 00f0592f     .../Z......./Y..
   1a120:	306ff504 ee51af00 02f5bf76 503ffbbe     ..o0..Q.v.....?P
   1a130:	0000c00d 00f206cb f900f502 00e00900     ................
   1a140:	800f009e 6f602f00 c00c0010 050000cb     ...../`o........
   1a150:	0000f4f6 00d0ef00 708f0000 0000bb00     ...........p....
   1a160:	4f00109f 0e00f116 c00900f6 fc05600f     ...O.........`..
   1a170:	00f600b0 5fab00ac 05105f10 f7500ff1     ......._._....P.
   1a180:	0f00b00a c009f076 ac0000f5 8f4f00ba     ....v.........O.
   1a190:	ff040000 a0ef0040 e00e0000 00f40800     ....@...........
   1a1a0:	00704f00 308f209f cd00505f 0200902e     .Op.. .0_P......
   1a1b0:	0000d0ff 0000f60a 00e1fd04 c00deb01     ................
   1a1c0:	3f10be00 00406f80 c00d407f 06cb0000     ...?.o@..@......
   1a1d0:	f40200f3 0900ea00 108f00d0 1f00701f     .............p..
   1a1e0:	00107f70 00d9e00a f2f90300 cf000000     p...............
   1a1f0:	000000b0 0000406f 0000ad00 00f5791c     ....o@.......y..
   1a200:	70ee1a00 ff4f0000 5515f9ff 0000f45b     ...p..O....U[...
   1a210:	0100804f 0b0000ec 8f0000e1 f7040040     O...........@...
   1a220:	e51e0000 ff5f5355 2c00fcff 61af00f5     ....US_....,...a
   1a230:	0000cc00 db0000db 00db0000 1f00ea02     ................
   1a240:	fa0500f4 00db0000 0000db00 cc0000db     ................
   1a250:	61af0000 5ff52c00 155ff115 f1155ff1     ...a.,._.._.._..
   1a260:	5ff1155f 155ff115 f1155ff1 80be105f     _.._.._.._.._...
   1a270:	0140af03 701f00f6 1f00f701 00f90070     ..@....p....p...
   1a280:	fb00fb0a 01701f20 701f00f7 af03f601     .... .p....p....
   1a290:	0090be40 00000000 00e43d00 f5860cb5     @........=......
   1a2a0:	03f0201e 000290ef 02001000 400d90ce     . .............@
   1a2b0:	0e003b89 0d0e003b ce028940 f8080090     .;..;...@.......
   1a2c0:	00f7e7ef 00000000 00000000 00000000     ................
   1a2d0:	00dc4900 16000000 00ffffbf ff8d0300     .I..............
   1a2e0:	00ffffff ffffcf00 00ffffff ffffff00     ................
   1a2f0:	00ffc7ff eaffff00 00ff0051 0083ff00     ........Q.......
   1a300:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   1a310:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   1a320:	00ffff2b 0000ff00 2bffffdf 0000ffff     +..........+....
   1a330:	dffdffdf 0000ffff dfb2ff2b 0000fdff     ........+.......
   1a340:	2b000000 0000b2ff d0000000 ffffff0f     ...+............
   1a350:	ff0df0ff 8888c8ff f0ffff8c 0000800f     ................
   1a360:	f00ff008 0000800f ff0ff008 000080ff     ................
   1a370:	f0ffff08 ccccec0f f00ff0ce ccccec0f     ................
   1a380:	ff0ff0ce 000080ff f0ffff08 0000800f     ................
   1a390:	f00ff008 0000800f ff0ff008 8888c8ff     ................
   1a3a0:	d0ffff8c ffffff0f df0df0ff ffff73ff     .............s..
   1a3b0:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   1a3c0:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   1a3d0:	df000000 ffff73ff fffdffff ffffa5ff     .....s..........
   1a3e0:	ffffffff ffffa5ff dfffffff ffff73ff     .............s..
   1a3f0:	00fdffff 00000000 df000000 ffff73ff     .............s..
   1a400:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   1a410:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   1a420:	00b10a00 00000000 00fcbf00 00000000     ................
   1a430:	00fbff0b 00000000 1bc0ffbf 0b0000a0     ................
   1a440:	cf00fcff bf0000fb bf00c0ff ff0bb0ff     ................
   1a450:	0c0000fc ffbffbff 000000c0 fbffffcf     ................
   1a460:	00000000 b0ffff0c 00000000 00fbbf00     ................
   1a470:	00000000 00b00b00 03000000 03000000     ................
   1a480:	0010fc08 fcfff81c f5ff1c10 ff2cfcff     ..............,.
   1a490:	ffff05f5 0500f5ff 00f5ffff fdff1d00     ................
   1a4a0:	ff1c0010 1c10fcff fcfff9ff 05f5ff1c     ................
   1a4b0:	f5dffcff d1ff0500 040000a4 000000a1     ................
   1a4c0:	0000e04f 10020000 1003f16f d05f0000     O.......o....._.
   1a4d0:	d13ff16f f1ff0300 fd5ff16f 40ff0d00     o.?.....o._....@
   1a4e0:	ff09f16f 00f74f70 cf00f16f 00f09fe0     o...pO..o.......
   1a4f0:	5f00f16f 00c0bff3 2f00f16f 00c0bff5     o.._....o../....
   1a500:	1f00e04f 00e0aff6 4f000000 00f46ff4     O..........O.o..
   1a510:	af000000 10fe0ff0 ff050000 d3ff06a0     ................
   1a520:	ff7f0000 ff9f0020 f4ffbeda ff060000     .... ...........
   1a530:	30fdffff 17000000 0050cabd 00000000     ...0......P.....
   1a540:	0000b88b 00000000 0000ffff 06300000     ..............0.
   1a550:	0360ffff dffd0400 effdffff ffff0d40     ..`.........@...
   1a560:	ffffffff ffff4fd0 ffff9ff9 ffff08f4     .....O..........
   1a570:	ffff0220 f9ff0080 ff9f0000 f9ff0000      ...............
   1a580:	ff9f0000 ffff0800 ffff0220 ffff4f80     ........ ....O..
   1a590:	ffff9ff9 ffff0df4 ffffffff dffe04d0     ................
   1a5a0:	dffdffff 06300040 0360ffff 00000000     ....@.0...`.....
   1a5b0:	0000ffff 00000000 0000b88b 00000000     ................
   1a5c0:	3f30dd03 000000f3 f5ff6f00 0000f44f     ..0?.....o..O...
   1a5d0:	99ff0900 00f4bfff f6bf0100 f4ff6f22     ............"o..
   1a5e0:	fe2d0000 ef53ff35 ff0400f4 f8ff8fc1     ..-.5.S.........
   1a5f0:	7f40fe2d ffff1afa f7afa1ff ffdf82cf     -.@.............
   1a600:	28fdffff ff0e14fc ffffffff 0f0041e0     ...(.........A..
   1a610:	ffffffff 0000f0ff 00f9ff0f 00f0ff8f     ................
   1a620:	f8ff0f00 f0ff8f00 ff0f0000 ff8f00f8     ................
   1a630:	0e0000f0 6f00f6ff 0000e0ff fddf0000     .......o........
   1a640:	00000000 ffff0000 00000000 ffff0000     ................
   1a650:	00000000 ffff0000 00000000 ffff0000     ................
   1a660:	00000000 ffff0000 00000000 ffffff4f     ............O...
   1a670:	0000f4ff ffffff0b 0000b0ff ffffbf00     ................
   1a680:	000000fb ffff0b00 000000b0 fbbf0000     ................
   1a690:	df000000 b11bfcff fffdffcf 2cc2ffff     ...............,
   1a6a0:	ffffffff ffffffff ffffffff ffffffff     ................
   1a6b0:	dfffe0f0 ffffffff 00fdffff ffffef04     ................
   1a6c0:	0040feff ffff1e00 e1ffffff b0af0000     ..@.............
   1a6d0:	0b000000 ff0500fa 00000010 1e50ff01     ..............P.
   1a6e0:	000000f6 e16f0000 0000b0af 0b000000     ......o.........
   1a6f0:	fffffffa ff080080 ffffffff 1f00f1ff     ................
   1a700:	ffffffff ffffffff ffffffff ffffffff     ................
   1a710:	ffffffff ffffffff ffffffff ff8fffff     ................
   1a720:	ffffffff 00f8ffff dabd0600 00ff0250     ............P...
   1a730:	ffffef05 00ff42fe 7ba7ff7f 05fff9ff     .....B.....{....
   1a740:	0000c1ff 0effff2c 020000fc 5fffdf22     ....,.......".._
   1a750:	0f0000f2 8fffffff 0f0000b0 00ffffff     ................
	...
   1a76c:	ff000000 00f0ffff fff80b00 00f0ffff     ................
   1a77c:	fff42f00 002022fd ffe0cf00 0000c2ff     ./..." .........
   1a78c:	ff40ff2c 6ab7ff9f ff00f7ff ffffdf24     ,.@....j....$...
   1a79c:	ff0050fe dbac0520 00000060 00000000     .P.. ...`.......
   1a7ac:	008d0000 00ff0800 dfff8f00 ffffffff     ................
   1a7bc:	ffffffff ffffffff ffffffff dfffffff     ................
   1a7cc:	00ffffff 00ff8f00 00ff0800 008d0000     ................
	...
   1a7e8:	0000008d 00ff0800 8f000000 cf0000ff     ................
   1a7f8:	01ffffff ffffff50 fff706ff 00ffffff     ....P...........
   1a808:	ffffffbe ffae00ff 05ffffff ffffdff8     ................
   1a818:	006002ff 00ff9f00 09000000 000000ff     ..`.............
   1a828:	009e0000 00000000 00000000 00000000     ................
   1a838:	00100600 00000000 d21f0000 00000000     ................
   1a848:	0300008d 000010ee 0a00ff08 00b02fb1     ............./..
   1a858:	00ff8f00 f407fc05 ffffffdf 605f5002     .............P_`
   1a868:	fffffff9 0df706ff ffffbdc0 ae00ffff     ................
   1a878:	ff9ff009 00ffffff 8ff009ae ffffffff     ................
   1a888:	c00df706 ffffdfad 5f5002ff 0000e960     ..........P_`...
   1a898:	0500ff8f 00f406fc 00ff0800 b02fb10a     ............../.
   1a8a8:	8d000000 ee020000 00000010 1f000000     ................
   1a8b8:	000000d2 00000000 8f001006 ffffffff     ................
   1a8c8:	fff8ffff fffffffc ffffffff ffff2f20     ............ /..
   1a8d8:	fcffffff ffff0c00 ffffffee feff2f20     ............ /..
   1a8e8:	ffffef22 e2fffffc ffff2e00 20fe4efe     "............N. 
   1a8f8:	ffff0200 00c202e2 ffff0000 00000020     ............ ...
   1a908:	ffff0000 00000000 ffff0000 ffffffff     ................
   1a918:	8fffffff ffffffff 00f8ffff 00000000     ................
   1a928:	010030ff 0040ffcc 40ffff2d ffffef03     .0....@.-..@....
   1a938:	ffff3f40 ffff44ff ff9fffff ffffffff     @?...D..........
   1a948:	ffffffff ffffffff ffffafff ff45ffff     ..............E.
   1a958:	40ffffff ffffff4f ffef0340 2e0040ff     ...@O...@....@..
   1a968:	0030ffff 0000cc01 00000000 00000000     ..0.............
   1a978:	918f0000 00000000 70ffff00 00000000     ...........p....
   1a988:	40fdffff ff000000 10faffff ffff0000     ...@............
   1a998:	00f7ffff ffffff00 00d5ffff ffffffff     ................
   1a9a8:	ffb2ffff ffffffff fffffdff ffffffff     ................
   1a9b8:	fffffffd b2ffffff ffffffff ff00d5ff     ................
   1a9c8:	f7ffffff ffff0000 0010faff fdffff00     ................
   1a9d8:	00000040 0070ffff 8e000000 000000a1     @.....p.........
	...
   1a9f8:	00f8ff8f fff8ff8f ff00ffff ffffffff     ................
   1aa08:	ffff00ff ffffffff ffffff00 00ffffff     ................
   1aa18:	ffffffff ff00ffff ffffffff ffff00ff     ................
   1aa28:	ffffffff ffffff00 00ffffff ffffffff     ................
   1aa38:	ff00ffff ffffffff ffff00ff ffffffff     ................
   1aa48:	ffffff00 00ffffff 7fffffff 7f00f7ff     ................
   1aa58:	ff8ff7ff ffffffff fffffff8 ffffffff     ................
   1aa68:	ffffffff ffffffff ffffffff ffffffff     ................
   1aa78:	ffffffff ffffffff ffffffff ffffffff     ................
   1aa88:	ffffffff ffffffff ffffffff ffffffff     ................
   1aa98:	ffffffff ffffffff ffffffff ffffffff     ................
   1aaa8:	ffffffff ffffffff ffffffff ffff8fff     ................
   1aab8:	f8ffffff 00000000 0010cc00 d2ffff03     ................
   1aac8:	ffff0400 ff0430fe 04f4ffff ffffffff     .....0..........
   1aad8:	ffffff54 fffff9ff ffffffff ffffffff     T...............
   1aae8:	ffffffff fffffff9 ffff44ff ff04f3ff     .........D......
   1aaf8:	0430feff 00d2ffff 10ccff04 00ff0300     ..0.............
   1ab08:	00000000 2d000000 000000d2 ef010000     .......-........
   1ab18:	000010fe ff1d0000 0000d1ff ffcf0000     ................
   1ab28:	0000fcff ffff0b00 00b0ffff ffffaf00     ................
   1ab38:	00faffff ffffff09 90ffffff ffffff0f     ................
   1ab48:	f0ffffff ffffff08 80ffffff 00000000     ................
   1ab58:	00000000 ffffff0c c0ffffff ffffff0f     ................
   1ab68:	f0ffffff ffffff0f f0ffffff ffffff0c     ................
   1ab78:	c0ffffff 1a000000 01000040 0000f0df     ........@.......
   1ab88:	00a0ff1d 00fadf01 a0ff1d00 fadf0100     ................
   1ab98:	ff0c0000 0d0000a0 000080ff 00f8df01     ................
   1aba8:	ff1d0000 01000080 0000f8df 80ff1d00     ................
   1abb8:	df010000 000000f0 a104501b 0f000000     .........P......
   1abc8:	000010fd 00d1ff0a fdaf0000 0a000010     ................
   1abd8:	0000d1ff 10fdaf00 ff0a0000 080000c0     ................
   1abe8:	0000d0ff 0010fd8f 00d1ff08 10fd8f00     ................
   1abf8:	d1ff0800 fd0f0000 05000010 000000b1     ................
   1ac08:	ff040000 00000040 80ff0800 00000000     ....@...........
   1ac18:	0080ff08 08000000 000080ff ff080000     ................
   1ac28:	48000080 c8ff8c88 ffff8488 ffffffff     ...H............
   1ac38:	ffffffff ffffffff ff8c8848 008488c8     ........H.......
   1ac48:	80ff0800 00000000 0080ff08 08000000     ................
   1ac58:	000080ff ff080000 00000080 40ff0400     ...............@
   1ac68:	44140000 44444444 ffffef41 feffffff     ...DDDDDA.......
   1ac78:	ffffffff 7bffffff bbbbbbbb 0000b7bb     .......{........
   1ac88:	daffad05 00000050 88fcdf04 0040fdcf     ....P.........@.
   1ac98:	40fe7f00 f7ef0400 f4ff0700 4f809e00     ...@...........O
   1aca8:	ff4f70ff f8af00c0 dff4ff0c ff9a80ff     .pO.............
   1acb8:	fdff08fe ef80ffdf ff08feff c0ff4ffd     .............O..
   1acc8:	0cf8ff8f ff07f4ff 80ee08f4 0070ff4f     ............O.p.
   1acd8:	0040fe7f 00f8ef04 fcdf0400 40fdcf88     ..@............@
   1ace8:	05000000 50daffad 208c0000 00000000     .......P... ....
   1acf8:	00000000 0000e4df 00000000 ff1b0000     ................
   1ad08:	fddf4980 000000a5 ffff7f00 d4ff8cd8     .I..............
   1ad18:	04000000 0000f8ef 0070ff4e ff1c0000     ........N.p.....
   1ad28:	ff04e869 e30400f7 fffe9f00 40ffcf80     i..............@
   1ad38:	0570ff0d 8fe0ffff ff0dd0ff ff2d00f7     ..p...........-.
   1ad48:	d0ff8fe0 00fcff04 cff8af00 7f0030ff     .............0..
   1ad58:	060040ff 00f7ffff f4ff0800 ff3e0000     .@............>.
   1ad68:	000000a0 82c8ff4d 00f7bf01 5a000000     ....M..........Z
   1ad78:	0810fcdf 0000a0ff 00000000 fd4e0000     ..............N.
	...
   1ad90:	0000c802 d22d0000 00000000 00000000     ......-.........
   1ada0:	0000fbbf 00000000 ffff0500 00000050     ............P...
   1adb0:	0d000000 00d0ffff 00000000 ffff7f00     ................
   1adc0:	000000f7 ff010000 10ff8dd8 00000000     ................
   1add0:	0aa0ff0a 0000a0ff ff3f0000 f3ff0bb0     ..........?.....
   1ade0:	00000000 0cc0ffcf 0000fcff ffff0500     ................
   1adf0:	ffff0dd0 0e000050 9ff9ffff 00e0ffff     ....P...........
   1ae00:	ffff8f00 ffff2ee2 ff0200f8 0990ffff     ................
   1ae10:	10ffffff ffffff0a ffff3ee3 ff0fa0ff     .........>......
   1ae20:	ffffffff f0ffffff ffffff08 ffffffff     ................
   1ae30:	000080ff 00000000 00000000 00000000     ................
   1ae40:	000000d8 00000000 ffff80ff ff070070     ............p...
   1ae50:	fffff8ff ff6f00f6 8e78fdff e8ff15ff     ......o...x.....
   1ae60:	0200e2ff 20fe4fe5 000020fe 00f3ff13     .....O. . ......
   1ae70:	00000052 0031ff3f 02000052 205ef4ef     R...?.1.R.....^ 
   1ae80:	8e7820fe e8ff51ff ffffe2ff ff6f00f6     . x..Q........o.
   1ae90:	fffffdff ff070070 0000f8ff 00000000     ....p...........
   1aea0:	000080ff 00000000 000000d8 00000000     ................
	...
   1aeb8:	01000000 000010dd ff1d0000 000000d1     ................
   1aec8:	fdffdf01 1d000010 d1ff99ff f9df0100     ................
   1aed8:	10fd9f00 0090ff1d bfd1ff09 000000f9     ................
   1aee8:	905ffb9f 09000000 000000f5 00000000     .._.............
   1aef8:	00000000 5f000000 00000090 f9bff509     ......._........
   1af08:	9f000000 90ff1dfb d1ff0900 00f9df01     ................
   1af18:	0010fd9f ff99ff1d 010000d1 10fdffdf     ................
   1af28:	1d000000 0000d1ff dd010000 00000010     ................
	...
   1af48:	00d11d00 00000000 df010000 ffef10fd     ................
   1af58:	00d0ffff d1ffff1d ffffffaf cfcf00f0     ................
   1af68:	0000fcfc 00f00f00 b6f11f6b 0f000000     ........k.......
   1af78:	0f0000f0 000000f0 00f00f00 00f00f00     ................
   1af88:	0f000000 0f0000f0 000000f0 b6f11f6b     ............k...
   1af98:	00f00f00 cfcf0000 0f00fcfc faffffff     ................
   1afa8:	d1ffff1d ffff0d00 df01feff 000010fd     ................
   1afb8:	00000000 00d11d00 00000000 00000000     ................
   1afc8:	ff8f0000 0000e2ff ffff0000 0020feff     .............. .
   1afd8:	ffff0000 ffffffff fffff8ff ffffffff     ................
   1afe8:	ffffffff ffffffff ffffffff ffffffff     ................
   1aff8:	ffffffff ffffffff ffffffff ffffffff     ................
   1b008:	ffffffff ffffffff ffffffff ffffffff     ................
   1b018:	ffffffff ffffffff ff8fffff ffffffff     ................
   1b028:	0000f8ff 00b00b00 00000000 00fbbf00     ................
   1b038:	00000000 b0ffff0b 00000000 fbffffbf     ................
   1b048:	0b000000 ffffffff 4f0000b0 ffffffff     ...........O....
   1b058:	000000f4 00ffff00 00000000 00ffff00     ................
   1b068:	00000000 00ffff00 00000000 00ffff00     ................
   1b078:	00000000 00ffff00 ffdf0000 0ffddff0     ................
   1b088:	fffffdff 9f0000f9 ffffffff ffffffff     ................
   1b098:	ffffffff f0ffffff ffdfffe0 ffffffff     ................
   1b0a8:	0000fdff 00000000 00000000 00000000     ................
   1b0b8:	0062ea0a 00000000 f0ffff02 00000000     ..b.............
   1b0c8:	ffff9f00 00000000 ffff0f00 000000d0     ................
   1b0d8:	ffff0200 000000fb ef030000 000070ff     .............p..
   1b0e8:	04000000 0000f2ff 00000000 0000fbbf     ................
   1b0f8:	00000000 0030ff6f 00000200 0090ff4f     ....o.0.....O...
   1b108:	00f38f02 00d0ff6f e4ffff0a 00d1ffbf     ....o...........
   1b118:	ffffef00 00d1ffff ffff0a00 0090ffff     ................
   1b128:	ff6f0000 0030fbff ff020000 000072db     ..o...0......r..
   1b138:	08000000 000080ee ff086106 2d0080ff     .........a.....-
   1b148:	33efd0ff ff2e00fe 3ff30ef3 f3ff2ee0     ...3.......?....
   1b158:	ffff8f00 00f3ff6e ffff8e00 0000f3ff     ....n...........
   1b168:	ffef0200 000000f3 ffff2e00 08000030     ............0...
   1b178:	ffffffef ff080030 ffeff6ff 33ef0030     ....0.......0..3
   1b188:	ffef02fe 3ff30e30 ffef02e0 f8ff8f30     ....0..?....0...
   1b198:	fddf0200 00e88e00 10660000 ffdf0000     ..........f.....
   1b1a8:	00200dff ffffff00 0000e20f 0fffffff     .. .............
   1b1b8:	fff0dffd 0020ffff fffff0ff ffffffff     ...... .........
   1b1c8:	fffffff0 f0ffffff ffffffff fff0ffff     ................
   1b1d8:	ffffffff fffff0ff ffffffff fffffff0     ................
   1b1e8:	f0ffffff ffffffff fff0ffff ffffffff     ................
   1b1f8:	ffdff0ff fffdffff 000000f9 ffff0000     ................
   1b208:	00ffffff ffffdf00 0000fdff ffffff8f     ................
   1b218:	ff00c2ff ffffffff 00ff20fe ff010000     ......... ......
   1b228:	0000ffe2 fcff0000 000000ff ffffff00     ................
   1b238:	00000000 ffffffff ffffffff ffffffff     ................
   1b248:	ffffffff 11fbffff ffffffbf 1f00f1ff     ................
   1b258:	ffffffff ff1f00f1 fbffffff ffffbf11     ................
   1b268:	ffffffff 8fffffff ffffffff df00f8ff     ................
   1b278:	0000fdff fcffff01 ff030000 0000f7ff     ................
   1b288:	f2ffff06 ff080000 0000d0ff ffffff0a     ................
   1b298:	ff0cd0ff a0ffffff ffffff0e ff0d20ff     ............. ..
   1b2a8:	00f8ffff ff0a0000 000000e0 0050ff0e     ..............P.
   1b2b8:	fc2f0000 00000000 0000f35f a09f0000     ../....._.......
   1b2c8:	00000000 000010df 00d70000 04000000     ................
   1b2d8:	000040ee 99ffdf00 0000fdff ff99ffff     .@..............
   1b2e8:	ff0000ff ffffffff ffff0000 00000090     ................
   1b2f8:	0dffff00 200dffff ff0fffff ffe20fff     ....... ........
   1b308:	ffff0fff fffffd0f 20ffff0f 0fffff00     ........... ....
   1b318:	ffffffff ff0fffff ffffffff ffff0fff     ................
   1b328:	ffdfffff ffffff0f 0f0000ff ffffffff     ................
   1b338:	ff0f0000 00ffffff ffff0d00 0000fdff     ................
   1b348:	0000cc00 02000000 000030ff ffbf0100     .........0......
   1b358:	000020fc ffffff1e 9f0000e1 f8ffffff     . ..............
   1b368:	ffef0000 00fdffff ffffff00 0100ffff     ................
   1b378:	ffffffff ff0300ff ffffffff ffff0830     ............0...
   1b388:	80ffffff ffffff1e cfe1ffff ffffffff     ................
   1b398:	ffcffcff ffffffff 000000fc 00000000     ................
   1b3a8:	ff0e0000 000000e0 40ee0400 ff8f0000     ...........@....
   1b3b8:	ffffffff fff8ffff ffffffff ffffffff     ................
   1b3c8:	0ff000ff 000ff000 f000ffff 0ff0000f     ................
   1b3d8:	ffffff00 ffffffff ffffffff 888008f8     ................
   1b3e8:	ff8f8008 8008f8ff 8f800888 ffffffff     ................
   1b3f8:	ffffffff 00ffffff 000000f0 ffff000f     ................
   1b408:	0000f000 ff000f00 ffffffff ffffffff     ................
   1b418:	ffff8fff ffffffff 0000f8ff 00000000     ................
	...
   1b430:	70af0300 00000000 ffcf0400 000000f0     ...p............
   1b440:	ffdf0600 0000a0ff ffef1700 0030ffff     ..............0.
   1b450:	ffff1800 00fcffff ffff2a00 f4ffffff     .........*......
   1b460:	ffff0800 ffffffff ff0f00d0 ffffffff     ................
   1b470:	080060ff ffffffff 0000feff 00000000     .`..............
   1b480:	00f7ffff 00000000 f1ffff00 00000000     ................
   1b490:	ffff0000 00000080 ff000000 000010ff     ................
   1b4a0:	00000000 0000faff 00000000 00f2ff00     ................
   1b4b0:	00000000 808f0000 00000000 00000000     ................
   1b4c0:	00000000 f0ffffdf ffff00d2 20fef0ff     ............... 
   1b4d0:	f0ffffff ffffe2ff fdfff0ff f2ffffff     ................
   1b4e0:	ffff0000 ffffffff ffffffff ffffffff     ................
   1b4f0:	ffffffff ffffffff ffffffff ffffffff     ................
   1b500:	ffffffff ffffffff ffffffff ffffffff     ................
   1b510:	ffffffff ffffffff ffffffff ffdfffff     ................
   1b520:	fdffffff 00000000 00000000 00000000     ................
   1b530:	feef9c04 000040c9 ffef0700 feffffff     .....@..........
   1b540:	df040070 8aa8fcff 40fdffcf 00d5ff6f     p..........@o...
   1b550:	5d000000 f6cff6ff 00000000 fc6f0000     ...]..........o.
   1b560:	5a00301a 00a5fddf 0000a103 ffffff4d     .0.Z........M...
   1b570:	0000d4ff feff0500 ffef8aa8 01000050     ............P...
   1b580:	000070df 0010fd07 00120000 21000000     .p.............!
   1b590:	00000000 e44e0000 00000000 00000000     ......N.........
   1b5a0:	0000feef 00000000 feef0000 00000000     ................
   1b5b0:	00000000 0000e44e ff8f0000 ffffffff     ....N...........
   1b5c0:	80ffffff ffffffff ffffffff 00fff0ff     ................
   1b5d0:	00000000 fd0f0000 ffff0fff ffffffff     ................
   1b5e0:	0fffff0f ffffffff ff00ffff ffff0fff     ................
   1b5f0:	ffffffff 0fffff00 ffffffff ff0fffff     ................
   1b600:	000000ff 00000000 fffffd0f ffffffff     ................
   1b610:	f0ffffff ffffff8f ffffffff ff8f80ff     ................
   1b620:	ffffffff 80ffffff ffffffff ffffffff     ................
   1b630:	00fff0ff 00000000 fd0f0000 ffff0fff     ................
   1b640:	00f0ffff 0fffff0f ffffffff ff0000f0     ................
   1b650:	ffff0fff 00f0ffff 0fffff00 ffffffff     ................
   1b660:	ff0f00f0 000000ff 00000000 fffffd0f     ................
   1b670:	ffffffff f0ffffff ffffff8f ffffffff     ................
   1b680:	ff8f80ff ffffffff 80ffffff ffffffff     ................
   1b690:	ffffffff 00fff0ff 00000000 fd0f0000     ................
   1b6a0:	ffff0fff 000000ff 0fffff0f 00ffffff     ................
   1b6b0:	ff000000 ffff0fff 000000ff 0fffff00     ................
   1b6c0:	00ffffff ff0f0000 000000ff 00000000     ................
   1b6d0:	fffffd0f ffffffff f0ffffff ffffff8f     ................
   1b6e0:	ffffffff ff8f80ff ffffffff 80ffffff     ................
   1b6f0:	ffffffff ffffffff 00fff0ff 00000000     ................
   1b700:	fd0f0000 f0ff0fff 00000000 0fffff0f     ................
   1b710:	0000f0ff ff000000 f0ff0fff 00000000     ................
   1b720:	0fffff00 0000f0ff ff0f0000 000000ff     ................
   1b730:	00000000 fffffd0f ffffffff f0ffffff     ................
   1b740:	ffffff8f ffffffff ff8f80ff ffffffff     ................
   1b750:	80ffffff ffffffff ffffffff 00fff0ff     ................
   1b760:	00000000 fd0f0000 000000ff 00000000     ................
   1b770:	00ffff0f 00000000 ff000000 000000ff     ................
   1b780:	00000000 00ffff00 00000000 ff0f0000     ................
   1b790:	000000ff 00000000 fffffd0f ffffffff     ................
   1b7a0:	f0ffffff ffffff8f ffffffff 000080ff     ................
   1b7b0:	01000000 00000000 00000000 10fd0700     ................
   1b7c0:	00000000 cf010000 0000f5ff 00000000     ................
   1b7d0:	fe29b900 00000010 3f000000 00000210     ..)........?....
   1b7e0:	df030000 00900a80 70030000 77ffdf00     ...........p...w
   1b7f0:	555555f7 0fd38f55 dfccfdff cdccccdc     .UUUU...........
   1b800:	fe8fb0ff 00aa0010 404d0000 00104600     ..........M@.F..
   1b810:	3302f201 00000010 09000000 00f9cfb1     ...3............
   1b820:	00000000 ff0a0000 000090ff 00000000     ................
   1b830:	f9bf0000 00000000 00000000 00002201     ............."..
   1b840:	df180000 020092fd ffeffbef faff0d30     ............0...
   1b850:	4fe0ff2e ff03faff fafa9ff5 cffa4f35     ...O........5O..
   1b860:	0b3d8ac0 03fbeffd fffe8f12 ff06b0ff     ..=.............
   1b870:	d1ffffff efffff08 9f1011fd 59d1dfff     ...............Y
   1b880:	affd0b3b 1d38fad7 faff5ffb 0df7df01     ;.....8.._......
   1b890:	ff1dfaff fcef03f1 0050ffdf a3fedf18     ..........P.....
   1b8a0:	7f000000 0000f7ff ffffffef effeffff     ................
   1b8b0:	ffffffff 0000feff 00000000 ffff0f00     ................
   1b8c0:	f0ffffff ffffff0f 0ff0ffff f9999ff9     ................
   1b8d0:	f80ff09f 8ff8888f 8ff80ff0 f08ff888     ................
   1b8e0:	888ff80f 0ff08ff8 f8888ff8 f80ff08f     ................
   1b8f0:	8ff8888f 8ff80ff0 f08ff888 999ff90f     ................
   1b900:	0ff09ff9 ffffffff ff08f0ff ffffffff     ................
   1b910:	00000080 7f000000 000000a0 8f000000     ................
   1b920:	0000b0ff 0d000000 00a0ffff 8a000000     ................
   1b930:	00ffff1d 8f000000 70ff1dfa 8f000000     ...........p....
   1b940:	801dfaff 8f000000 00faffff 8f000000     ................
   1b950:	80ffffff 8f000000 80ffffff 8f000000     ................
   1b960:	80ffffff 8f000000 80ffffff 6f000000     ...............o
   1b970:	80ffffff 0b000000 80ffffff 00000000     ................
   1b980:	80ffffdf 00000000 80ffff0e 00000000     ................
   1b990:	60dbde00 00000000 00000000 00000000     ...`............
   1b9a0:	00000000 ffffff1b e4ffffff ffdf0100     ................
   1b9b0:	ffffffff 1d00feff effaffff ffffaffe     ................
   1b9c0:	ffffdf01 0ae22ea0 ff1dffff 02e2ffff     ................
   1b9d0:	ffff2e20 ffffffcf ef0220fe ffcfffff      ........ ......
   1b9e0:	20feffff ffffef02 ffffff1d 2e2002e2     ... .......... .
   1b9f0:	df01ffff 2ea0ffff ffff0ae2 ffff1d00     ................
   1ba00:	affeeffa 0100ffff ffffffdf feffffff     ................
   1ba10:	ff1b0000 ffffffff 0800e4ff e4ffffff     ................
   1ba20:	ffff8f00 f808feff ff400b0f 0b0ff88f     ..........@.....
   1ba30:	f8ffff40 ff400b0f ffffffff ffffffff     @.....@.........
   1ba40:	ffffffff ffffffff ffffffff ffffffff     ................
   1ba50:	ffffffff ffffffff ffffffff ffffffff     ................
   1ba60:	ffffffff ffffffff ffffffff ffefffff     ................
   1ba70:	feffffff ffffff4e 0000e4ff 00000000     ....N...........
   1ba80:	00000100 00000000 00e00300 00001000     ................
   1ba90:	10ef0200 0000bf00 f17f0000 00f1cf00     ................
   1baa0:	ff070000 77ffcf11 bf777777 ffffcff1     .......wwww.....
   1bab0:	ffffffff ffff17ff ffffffff ff07e0ff     ................
   1bac0:	000000f1 06000000 000010ff 00000000     ................
   1bad0:	0000a005 00000000                       ........

0001bad8 <kern_class_values>:
   1bad8:	00000100 00000000 00000100 00000003     ................
   1bae8:	00000200 00000000 00000000 00000000     ................
   1baf8:	00010000 00000000 00000000 00000000     ................
   1bb08:	000c0100 0000fa07 f1f20000 04060c02     ................
   1bb18:	010d02f6 0008030b 00000000 00000000     ................
   1bb28:	020f0000 000000fe 00000000 00000000     ................
   1bb38:	f8000500 00000000 0504fb00 00fd0000     ................
   1bb48:	fd0003fe fbfffd00 00000000 fd0000fd     ................
   1bb58:	fd0000fc 0000fb00 00000000 fd000000     ................
   1bb68:	00fc00fd 00e100f9 0500fb00 fb000008     ................
   1bb78:	05080303 000005fc 000000f1 00000000     ................
   1bb88:	00000000 000000f7 00000000 00000000     ................
   1bb98:	f9000000 f600f3fd 000000fe 000a0100     ................
   1bba8:	01fffef8 0000fc00 0000edfe 00000000     ................
   1bbb8:	00000000 0afeec00 00000000 00000000     ................
   1bbc8:	00000000 000000f6 00000000 08000000     ................
   1bbd8:	00000300 000000fb 00000000 00000000     ................
   1bbe8:	00000000 020a0000 00000001 00000000     ................
	...
   1bc18:	000000f7 00000000 00000000 00000000     ................
   1bc28:	00000000 02000000 fd080305 fd050000     ................
   1bc38:	0702ddf8 00fd0105 00080009 00e80008     ................
   1bc48:	080008fd 000305fd 00fd0100 0014fc00     ................
   1bc58:	00080014 0804030b f7000000 00000000     ................
   1bc68:	0200fe01 02fbfdfb 0000fd00 0000f600     ................
	...
   1bc80:	0000ef00 00000000 00000000 00000000     ................
   1bc90:	00f20100 000000f0 1900fe00 0303fdfd     ................
   1bca0:	03fd00fe 00f20000 00000000 00000000     ................
   1bcb0:	00e70000 00000003 00000000 00000000     ................
   1bcc0:	0f00f000 00f70000 e7ef0008 0008fbef     ................
   1bcd0:	0300ef00 00fc00fa 00000000 00000000     ................
   1bce0:	07000000 0000e108 00000000 00000000     ................
   1bcf0:	000c0000 00000002 02020000 ff00fbfd     ................
   1bd00:	0000fdff 000000fe 00fe00fb fa00fbfa     ................
   1bd10:	00fbf8f8 00fb00fb fe000000 00030000     ................
   1bd20:	0100fd02 03000000 000000fe ff0303fe     ................
   1bd30:	fb000000 0000ff00 01000000 00fe0300     ................
   1bd40:	00fc00fd 0800fe00 00fd0000 00000000     ................
   1bd50:	fefe01ff 00fd0000 000000fd 00000000     ................
   1bd60:	ffff0000 00fdfd00 00000000 fe000001     ................
   1bd70:	fdfdfd00 00000000 00000000 0000fe00     ................
   1bd80:	fdfe0000 f800fc00 0005f8fe 0503fb00     ................
   1bd90:	fffa0007 f4ff00fd f202fe03 01000003     ................
   1bda0:	fef200f3 f300feea 00070500 00000003     ................
   1bdb0:	fb000100 00f800fd 00fd0000 00fd0000     ................
   1bdc0:	00000000 ff00ffff 000000fd 00000000     ................
   1bdd0:	fe00fdfd 0000fefd 000000fd 00000000     ................
   1bde0:	00000000 fd00fefe fb00fe00 fd000003     ................
   1bdf0:	00030301 00000000 0000fe00 02000000     ................
   1be00:	00fd0000 00fdfefd 00000000 00020000     ................
   1be10:	000000fe 00fcfd00 fe0800fb 0000f801     ................
   1be20:	f5f3f307 fe0003fb fb00fbef fb04fb00     ................
   1be30:	00f900f0 02ff0100 000300fe f300f6f8     ................
   1be40:	f8fafbfa fbfff9fd 010002f9 0000fd00     ................
   1be50:	03000200 00000000 00000000 fd000000     ................
   1be60:	ff00ff00 fafc00fd f800fffa 00000000     ................
   1be70:	00fe0000 01000000 000000fe 00000003     ................
   1be80:	00000000 00000c00 00000000 00000002     ................
   1be90:	000000fd 00000000 00000000 000300fb     ................
	...
   1beac:	000000fe 000000fb 00f8f300 f3fc0000     ................
   1bebc:	03fd0000 0000f900 00000000 00000000     ................
   1becc:	fb0000fc 00000000 00000000 00000000     ................
   1bedc:	00fb0003 03000000 fbfb0200 fdfdfd00     ................
   1beec:	00000000 00f80000 fdfc00fd f8fafa00     ................
   1befc:	00fb00fe 000000f8 00001400 fd000001     ................
   1bf0c:	f5000300 00000000 08fbe800 00f5fe08     ................
   1bf1c:	f300fc03 ee03fdff 040003fd f8f7fcf7     ................
   1bf2c:	f10000f5 00000f00 000000ff f9fdffff     ................
   1bf3c:	00e8fff8 00000000 00000000 00000001     ................
	...
   1bf58:	ff00fd00 0000fcfd 00fd00fb 00000000     ................
	...
   1bf70:	00ff0000 050000fb fa0003ff f9fffe03     ................
   1bf80:	fdfd00fd fcfc00fe fffe0000 00fdfcfe     ................
   1bf90:	0300fd00 00fa00fe 00fb0000 fcfc00fc     ................
   1bfa0:	00000003 00000000 0003fb00 fdfe00fc     ................
   1bfb0:	fefefef8 fffdfeff 00000000 fefefd00     ................
   1bfc0:	00000000 fe00fe03 fe000000 fdfefefd     ................
   1bfd0:	0a0200fe 00f900ff fd0005fe 0004fdf5     ................
   1bfe0:	03fcf400 fe0002fc fc00f8fe fc000001     ................
   1bff0:	03000000 00fbfb03 fdfcfdfc 01fc00fd     ................
   1c000:	0008fcfb 00000000 00000000 00000003     ................
	...
   1c024:	000000fc 00000000 00000000 00000000     ................
	...
   1c050:	000000fe 00000000 00000000 00000000     ................
	...
   1c06c:	fdfe0000 00000000 00000000 00000000     ................
   1c07c:	fd0000fc fdfd0000 00000000 000000fd     ................
   1c08c:	0000ff00 fe000000 00000000 00fb00fc     ................
   1c09c:	00f80000 0105fa02 0000f4fe f600fdfa     ................
   1c0ac:	0000f9fa f6f6fdf5 00f900f4 00fd1102     ................
   1c0bc:	fdfffdfa f7fbf9fc 00fdfaf6 0100fe00     ................
   1c0cc:	feee0000 f7fa0608 00f80100 05fdfef3     ................
   1c0dc:	0001fde8 f3fdef00 0000edfd 010f00ee     ................
   1c0ec:	0000fe00 feff0000 ef00fef6 00000000     ................
   1c0fc:	00fe00f8 00f4f9ff f8fcff00 00fe00fd     ................
   1c10c:	f4000000 fef8f8fd fcfdfafc f8fefb00     ................
   1c11c:	fbfd00fc 0100fbfd 00f8fe00 00fb0005     ................
   1c12c:	03000000 0afb0200 fdfdfd00 00000000     ................
   1c13c:	00f80000 fdfc00fd f8fafa00 02fb00fe     ................
   1c14c:	0000000a 00001400 fd000001 00000300     ................
   1c15c:	00000000 00ff0000 00000000 0000fbfe     ................
   1c16c:	ff000000 fd000000 fb0000fd fb0000fd     ................
   1c17c:	00ff0400 00000000 00000100 05040000     ................
   1c18c:	f800fe02 f80800fc 0afbfbf8 feea0305     ................
   1c19c:	fd00fd05 00f7fd03 fefd03fd 0000fef8     ................
   1c1ac:	f9000508 07fdf200 fd01f6fd 0afdf8f8     ................
   1c1bc:	00fc0003 080200f9 faf6f7fa ed010008     ................
   1c1cc:	fefc03fe f7fa00fa 00fefcfc fdfbfa00     ................
   1c1dc:	fd060800 fcf200f2 fff1f700 f9f8fcf8     ................
   1c1ec:	fd000007 00fefb00 0400fbfd 000003f8     ................
   1c1fc:	fafd00f2 faf8fefc f800faf8 f8fbfafd     ................
   1c20c:	010000fd f800fc0c fbfd00fd f6f9f9fa     ................
   1c21c:	0005fbfd fdf300fc f7f80502 fd08f8fb     ................
   1c22c:	05fbe801 00f7fcfa fdfdf5f8 f8fbfdfe     ................
   1c23c:	080000ff 00effe07 f606faf1 f5f7fbef     ................
   1c24c:	0005f8f3 fd000000 fd030000 05fb0205     ................
   1c25c:	fff80000 0100ff00 0000fe01 00000000     ................
   1c26c:	000000fd 01080200 0000fd00 fefe0000     ................
   1c27c:	000000fd 00000201 00020000 000a00fe     ................
   1c28c:	fd010105 00000500 00000200 00000000     ................
   1c29c:	00000000 07000800 00000000 00000000     ................
   1c2ac:	00000000 00f10000 080004fd 03190000     ................
   1c2bc:	0303fbfb 00f301fe 00f10c00 00000000     ................
   1c2cc:	00000000 0aef0000 00000024 00000000     ........$.......
   1c2dc:	00000000 0000f100 00000000 00000000     ................
	...
   1c2fc:	fb0000fc 000000fe 00000000 00000000     ................
	...
   1c314:	00f900fe 00000100 fefb2103 03f90708     .........!......
   1c324:	03030000 000000fd 00000000 00000000     ................
   1c334:	000007df 00000000 00000000 00000000     ................
   1c344:	f9000000 f9000000 00000000 0000fffa     ................
   1c354:	fd00fa00 0000f400 00000000 00000000     ................
   1c364:	0000ef00 00010000 00000000 0000fd00     ................
   1c374:	00fc00fb 000000f9 00fd03fc fafdf900     ................
   1c384:	00f90000 00f400fd eb0000fd f7fdf6fb     ................
   1c394:	00ef0000 0000fff9 00000000 fbfc0000     ................
   1c3a4:	0000fcfe 00fa0000 05fd03fa fefafe00     ................
   1c3b4:	fd00fbfc f902feff 000000ff 00fcfee9     ................
   1c3c4:	f4fe00fa fe0000fe 000000fe fe000200     ................
   1c3d4:	0004fefc 00000000 00000000 00000000     ................
	...
   1c400:	00030000 00000000 fe00fa00 fb000000     ................
   1c410:	00000003 00fbfdf9 fd00f900 0000f400     ................
   1c420:	00e70000 00f3f7fb fe00ef00 000000fc     ................
   1c430:	00000000 fffcfd00 000001fc 0800fd04     ................
   1c440:	f8fdfd0d 06040d03 030b03f9 00070607     ................
	...
   1c458:	0c100000 fe00fdfb 00140b14 00030000     ................
   1c468:	00000900 000000fc 00000000 00fe0000     ................
   1c478:	00000000 04000000 00000000 f6fefdea     ................
   1c488:	ef0000f3 00000000 00000000 00000000     ................
   1c498:	00000000 0000fc00 00000000 fe000000     ................
	...
   1c4b0:	00000004 fefdea00 0000f3f6 000000f6     ................
	...
   1c4d0:	000000fe fd0003fa f8030502 03feff00     ................
   1c4e0:	00000200 00fa0000 00fbfefe 1000f6fe     ................
   1c4f0:	fefa00fd 00fcfe00 fdfbf9fd fc000000     ................
	...
   1c508:	0000fe00 00000000 00040000 ea000000     ................
   1c518:	f3f6fefd 00ef0000 00000000 00000d00     ................
	...
   1c530:	fdf800fc fdfe08fe 01fe01f6 0601f9fe     ................
   1c540:	02010201 00fdf6fa f5f9fbf6 fbfc00f6     ................
   1c550:	fefefdfd fe00fefd 040004ff 000800fe     ................
	...
   1c568:	fe000000 0000fdfd 00ff00f9 000000fc     ................
	...
   1c580:	000000f1 00000000 00000000 fd00fdfd     ................
   1c590:	00000000 fc0000fe fc0003fd f900fefb     ................
   1c5a0:	fdfefafe 0000fc00 00000000 00000000     ................
   1c5b0:	0800ef00 00fb0000 fd000000 0000fd00     ................
   1c5c0:	fe0000ff 0000fa00 f8f8fd0b ff030302     ................
   1c5d0:	020402f9 fe080208 f60000f9 f9f80000     ................
   1c5e0:	00fb0000 fc00fcfd fe00fc00 f8fe0004     ................
   1c5f0:	000009fd 00fb00fe 00fa0300 0002fd03     ................
   1c600:	fe00f800 03fd00ff 000000fe 00fafdf6     ................
   1c610:	f40000f8 00fd0900 000200fb f8fd00fd     ................
   1c620:	0003fd00 fe000000 fd030000 fd000001     ................
   1c630:	00fd00fe 00000000 00000000 00000000     ................
   1c640:	00000000 000600f0 0000fe00 00010000     ................
   1c650:	0000fdfd 06000500 00000000 01f1f000     ................
   1c660:	f604080b 09000b02 00000500 00000000     ................
   1c670:	00000000 00000e00 00000000 00000000     ................
	...

0001c688 <kern_classes>:
   1c688:	0001bad8 0001c698 0001c734 0000313d     ........4...=1..

0001c698 <kern_left_class_mapping>:
   1c698:	02010000 05040300 08070602 0a090a09     ................
   1c6a8:	0d000c0b 11100f0e 140c1312 00000014     ................
   1c6b8:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
   1c6c8:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
   1c6d8:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
   1c6e8:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
   1c6f8:	0000093d 00000000 00000000 00000000     =...............
	...

0001c734 <kern_right_class_mapping>:
   1c734:	02010000 05040300 08070602 0a090a09     ................
   1c744:	0e0d0c0b 0c11100f 15141312 00000015     ................
   1c754:	19181716 19191917 1a191917 19191919     ................
   1c764:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
   1c774:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
   1c784:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
   1c794:	00000931 00000000 00000000 00000000     1...............
	...

0001c7d0 <unicode_list_1>:
   1c7d0:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
   1c7e0:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
   1c7f0:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
   1c800:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
   1c810:	efc9efc8 efe3efcb f014efe5 f017f015     ................
   1c820:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
   1c830:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
   1c840:	f712f4aa 0000f7f2                       ........

0001c848 <lv_anim_path_def>:
   1c848:	0000f751 00000000 0000fee6 0000ff40     Q...........@...
   1c858:	0000ff48 0000ff72 0000ff88 0000ff9e     H...r...........
   1c868:	0000ffd4 0000fff6 00010020 00010056     ........ ...V...
   1c878:	00010066 00010096 000100b2 000100c2     f...............
   1c888:	000100f2 0001010e 0001011e 0001014e     ............N...
   1c898:	0001016a 0001017a 000101b0              j...z.......

0001c8a4 <sin0_90_table>:
   1c8a4:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
   1c8b4:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
   1c8c4:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
   1c8d4:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
   1c8e4:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
   1c8f4:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
   1c904:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
   1c914:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
   1c924:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
   1c934:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
   1c944:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
   1c954:	7ffa7feb 00007fff 3b2e2c20 005f2d3a     ........ ,.;:-_.
   1c964:	00011c3e 00011c28 00011c50 00011db6     >...(...P.......
   1c974:	00011d20 00011c84 00011c9e 0001231a      ............#..
   1c984:	00011d8e 00011e66 00012138 00011c6a     ....f...8!..j...
   1c994:	0001236c 000120ca 000123d0 00011d96     l#... ...#......
   1c9a4:	00011d9e 00011ce0 00011da6 00011ef0     ................
   1c9b4:	00011dae 00012072 000120b0 000123ac     ....r ... ...#..
   1c9c4:	00011e9e 00011ec2 00012062 00011f0a     ........b ......
   1c9d4:	0001202a 00011e1c 000122be 000122f6     * ......."..."..
   1c9e4:	00011dee 00011d4e 00012194 00011f5c     ....N....!..\...
   1c9f4:	00011fcc 00012262 00011fec 000121f8     ....b".......!..
   1ca04:	00012248 94d38c51 0000ffff 00008410     H"..Q...........
   1ca14:	008c80ef 00006325 6c6c6548 4f57206f     ....%c..Hello WO
   1ca24:	0a646c72 00000000 2b302d23 6c680020     rld.....#-0+ .hl
   1ca34:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
   1ca44:	41393837 45444342 31300046 35343332     789ABCDEF.012345
   1ca54:	39383736 64636261 00006665              6789abcdef..

0001ca60 <_init>:
   1ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca62:	46c0      	nop			; (mov r8, r8)
   1ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1ca66:	bc08      	pop	{r3}
   1ca68:	469e      	mov	lr, r3
   1ca6a:	4770      	bx	lr

0001ca6c <__init_array_start>:
   1ca6c:	000000dd 	.word	0x000000dd

0001ca70 <_fini>:
   1ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca72:	46c0      	nop			; (mov r8, r8)
   1ca74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1ca76:	bc08      	pop	{r3}
   1ca78:	469e      	mov	lr, r3
   1ca7a:	4770      	bx	lr

0001ca7c <__fini_array_start>:
   1ca7c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <font_dsc>:
20000010:	90a0 0001 8bc8 0001 8ba0 0001 c688 0001     ................
20000020:	0010 5002 0000 0000 0000 0000 0000 0000     ...P............

20000030 <lv_font_montserrat_16>:
20000030:	f255 0000 e849 0000 0012 0003 0000 0000     U...I...........
20000040:	0010 2000                                   ... 

20000044 <mem_buf_small>:
20000044:	2bec 2000 0010 0000 2bfc 2000 0010 0000     .+. .....+. ....

20000054 <_lv_txt_encoded_get_char_id>:
20000054:	16ed 0001                                   ....

20000058 <_lv_txt_encoded_next>:
20000058:	15dd 0001                                   ....

2000005c <cmd_mode>:
2000005c:	0001 0000                                   ....

20000060 <_impure_ptr>:
20000060:	0064 2000                                   d.. 

20000064 <impure_data>:
	...
