
e54_gfx_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020d34  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00020d34  00020d34  00030d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000074  20000000  00020d3c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bkupram      00000000  47000000  47000000  00040074  2**0
                  CONTENTS
  4 .qspi         00000000  04000000  04000000  00040074  2**0
                  CONTENTS
  5 .bss          00006da8  20000078  00020db8  00040078  2**3
                  ALLOC
  6 .stack        00010000  20006e20  00027b60  00040078  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
  8 .comment      00000059  00000000  00000000  000400a2  2**0
                  CONTENTS, READONLY
  9 .debug_info   0009cf6b  00000000  00000000  000400fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c72f  00000000  00000000  000dd066  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0004cd3b  00000000  00000000  000e9795  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001fd0  00000000  00000000  001364d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003e50  00000000  00000000  001384a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003fcb4  00000000  00000000  0013c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a73b  00000000  00000000  0017bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012adf3  00000000  00000000  001b66df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006374  00000000  00000000  002e14d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_gc_clear_roots(void)
{
       0:	20 6e 01 20 f5 0e 00 00 f1 0e 00 00 f1 0e 00 00      n. ............
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
      10:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 00 00 00 00     ................
	...
      2c:	f1 0e 00 00 f1 0e 00 00 00 00 00 00 f1 0e 00 00     ................
      3c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      4c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      5c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      6c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      7c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      8c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      9c:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      ac:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      bc:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      cc:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
      dc:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 00 00 00 00     ................
	...
      f4:	21 1d 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     !...............
     104:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     114:	f1 0e 00 00 d1 25 00 00 e5 25 00 00 f9 25 00 00     .....%...%...%..
     124:	0d 26 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     .&..............
     134:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     144:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     154:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     164:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     174:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     184:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     194:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     1a4:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     1b4:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     1c4:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     1d4:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     1e4:	f1 0e 00 00 f1 0e 00 00 95 28 00 00 f1 0e 00 00     .........(......
     1f4:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     204:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     214:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     224:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     234:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     244:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................
     254:	f1 0e 00 00 f1 0e 00 00 f1 0e 00 00 f1 0e 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000078 	.word	0x20000078
     280:	00000000 	.word	0x00000000
     284:	00020d3c 	.word	0x00020d3c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00020d3c 	.word	0x00020d3c
     2c4:	2000007c 	.word	0x2000007c
     2c8:	00020d3c 	.word	0x00020d3c
     2cc:	00000000 	.word	0x00000000

000002d0 <ssd1963_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void ssd1963_init(void)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2d2:	4c8b      	ldr	r4, [pc, #556]	; (500 <ssd1963_init+0x230>)
     2d4:	2610      	movs	r6, #16
     2d6:	61a6      	str	r6, [r4, #24]

static void ssd1963_reset(void)
{
    /*Hardware reset*/
    LV_DRV_DISP_RST(1);
    LV_DRV_DELAY_MS(50);
     2d8:	2032      	movs	r0, #50	; 0x32
     2da:	4d8a      	ldr	r5, [pc, #552]	; (504 <ssd1963_init+0x234>)
     2dc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2de:	6166      	str	r6, [r4, #20]
    LV_DRV_DISP_RST(0);
    LV_DRV_DELAY_MS(50);
     2e0:	2032      	movs	r0, #50	; 0x32
     2e2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2e4:	61a6      	str	r6, [r4, #24]
    LV_DRV_DISP_RST(1);
    LV_DRV_DELAY_MS(50);
     2e6:	2032      	movs	r0, #50	; 0x32
     2e8:	47a8      	blx	r5

	asm volatile("nop");
     2ea:	bf00      	nop
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ec:	2640      	movs	r6, #64	; 0x40
     2ee:	6166      	str	r6, [r4, #20]
    /*Chip enable*/
    LV_DRV_DISP_PAR_CS(0);
    LV_DRV_DELAY_MS(10);
     2f0:	200a      	movs	r0, #10
     2f2:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2f4:	61a6      	str	r6, [r4, #24]
    LV_DRV_DISP_PAR_CS(1);
    LV_DRV_DELAY_MS(5);
     2f6:	2005      	movs	r0, #5
     2f8:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2fa:	6166      	str	r6, [r4, #20]
/**
 * Command mode
 */
static inline void ssd1963_cmd_mode(void)
{
    if(cmd_mode == false) {
     2fc:	4b82      	ldr	r3, [pc, #520]	; (508 <ssd1963_init+0x238>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	b923      	cbnz	r3, 30c <ssd1963_init+0x3c>
     302:	4623      	mov	r3, r4
     304:	615e      	str	r6, [r3, #20]
        LV_DRV_DISP_CMD_DATA(SSD1963_CMD_MODE);
        cmd_mode = true;
     306:	2201      	movs	r2, #1
     308:	4b7f      	ldr	r3, [pc, #508]	; (508 <ssd1963_init+0x238>)
     30a:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_cmd(uint8_t cmd)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_cmd_mode();
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     30c:	2201      	movs	r2, #1
     30e:	497f      	ldr	r1, [pc, #508]	; (50c <ssd1963_init+0x23c>)
     310:	487f      	ldr	r0, [pc, #508]	; (510 <ssd1963_init+0x240>)
     312:	4b80      	ldr	r3, [pc, #512]	; (514 <ssd1963_init+0x244>)
     314:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     316:	4c7a      	ldr	r4, [pc, #488]	; (500 <ssd1963_init+0x230>)
     318:	2540      	movs	r5, #64	; 0x40
     31a:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(20);
     31c:	2014      	movs	r0, #20
     31e:	4b79      	ldr	r3, [pc, #484]	; (504 <ssd1963_init+0x234>)
     320:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     322:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     324:	4b78      	ldr	r3, [pc, #480]	; (508 <ssd1963_init+0x238>)
     326:	781b      	ldrb	r3, [r3, #0]
     328:	b923      	cbnz	r3, 334 <ssd1963_init+0x64>
     32a:	4623      	mov	r3, r4
     32c:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     32e:	2201      	movs	r2, #1
     330:	4b75      	ldr	r3, [pc, #468]	; (508 <ssd1963_init+0x238>)
     332:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     334:	2201      	movs	r2, #1
     336:	4975      	ldr	r1, [pc, #468]	; (50c <ssd1963_init+0x23c>)
     338:	4875      	ldr	r0, [pc, #468]	; (510 <ssd1963_init+0x240>)
     33a:	4b76      	ldr	r3, [pc, #472]	; (514 <ssd1963_init+0x244>)
     33c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     33e:	4c70      	ldr	r4, [pc, #448]	; (500 <ssd1963_init+0x230>)
     340:	2540      	movs	r5, #64	; 0x40
     342:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(20);
     344:	2014      	movs	r0, #20
     346:	4b6f      	ldr	r3, [pc, #444]	; (504 <ssd1963_init+0x234>)
     348:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     34a:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     34c:	4b6e      	ldr	r3, [pc, #440]	; (508 <ssd1963_init+0x238>)
     34e:	781b      	ldrb	r3, [r3, #0]
     350:	b923      	cbnz	r3, 35c <ssd1963_init+0x8c>
     352:	4623      	mov	r3, r4
     354:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     356:	2201      	movs	r2, #1
     358:	4b6b      	ldr	r3, [pc, #428]	; (508 <ssd1963_init+0x238>)
     35a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     35c:	2201      	movs	r2, #1
     35e:	496b      	ldr	r1, [pc, #428]	; (50c <ssd1963_init+0x23c>)
     360:	486b      	ldr	r0, [pc, #428]	; (510 <ssd1963_init+0x240>)
     362:	4b6c      	ldr	r3, [pc, #432]	; (514 <ssd1963_init+0x244>)
     364:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     366:	4c66      	ldr	r4, [pc, #408]	; (500 <ssd1963_init+0x230>)
     368:	2540      	movs	r5, #64	; 0x40
     36a:	61a5      	str	r5, [r4, #24]
    LV_DRV_DELAY_MS(20);
     36c:	2014      	movs	r0, #20
     36e:	4b65      	ldr	r3, [pc, #404]	; (504 <ssd1963_init+0x234>)
     370:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     372:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     374:	4b64      	ldr	r3, [pc, #400]	; (508 <ssd1963_init+0x238>)
     376:	781b      	ldrb	r3, [r3, #0]
     378:	b923      	cbnz	r3, 384 <ssd1963_init+0xb4>
     37a:	4623      	mov	r3, r4
     37c:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     37e:	2201      	movs	r2, #1
     380:	4b61      	ldr	r3, [pc, #388]	; (508 <ssd1963_init+0x238>)
     382:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     384:	22e2      	movs	r2, #226	; 0xe2
     386:	4961      	ldr	r1, [pc, #388]	; (50c <ssd1963_init+0x23c>)
     388:	4861      	ldr	r0, [pc, #388]	; (510 <ssd1963_init+0x240>)
     38a:	4b62      	ldr	r3, [pc, #392]	; (514 <ssd1963_init+0x244>)
     38c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38e:	4b5c      	ldr	r3, [pc, #368]	; (500 <ssd1963_init+0x230>)
     390:	2240      	movs	r2, #64	; 0x40
     392:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     394:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     396:	4b5c      	ldr	r3, [pc, #368]	; (508 <ssd1963_init+0x238>)
     398:	781b      	ldrb	r3, [r3, #0]
     39a:	b123      	cbz	r3, 3a6 <ssd1963_init+0xd6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     39c:	4b58      	ldr	r3, [pc, #352]	; (500 <ssd1963_init+0x230>)
     39e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3a0:	2200      	movs	r2, #0
     3a2:	4b59      	ldr	r3, [pc, #356]	; (508 <ssd1963_init+0x238>)
     3a4:	701a      	strb	r2, [r3, #0]
static inline void ssd1963_data(uint8_t data)
{

    LV_DRV_DISP_PAR_CS(0);
    ssd1963_data_mode();
    LV_DRV_DISP_PAR_WR_WORD(data);
     3a6:	2223      	movs	r2, #35	; 0x23
     3a8:	4958      	ldr	r1, [pc, #352]	; (50c <ssd1963_init+0x23c>)
     3aa:	4859      	ldr	r0, [pc, #356]	; (510 <ssd1963_init+0x240>)
     3ac:	4b59      	ldr	r3, [pc, #356]	; (514 <ssd1963_init+0x244>)
     3ae:	4798      	blx	r3
     3b0:	4b53      	ldr	r3, [pc, #332]	; (500 <ssd1963_init+0x230>)
     3b2:	2240      	movs	r2, #64	; 0x40
     3b4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3b6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3b8:	4b53      	ldr	r3, [pc, #332]	; (508 <ssd1963_init+0x238>)
     3ba:	781b      	ldrb	r3, [r3, #0]
     3bc:	b123      	cbz	r3, 3c8 <ssd1963_init+0xf8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3be:	4b50      	ldr	r3, [pc, #320]	; (500 <ssd1963_init+0x230>)
     3c0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3c2:	2200      	movs	r2, #0
     3c4:	4b50      	ldr	r3, [pc, #320]	; (508 <ssd1963_init+0x238>)
     3c6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3c8:	2202      	movs	r2, #2
     3ca:	4950      	ldr	r1, [pc, #320]	; (50c <ssd1963_init+0x23c>)
     3cc:	4850      	ldr	r0, [pc, #320]	; (510 <ssd1963_init+0x240>)
     3ce:	4b51      	ldr	r3, [pc, #324]	; (514 <ssd1963_init+0x244>)
     3d0:	4798      	blx	r3
     3d2:	4b4b      	ldr	r3, [pc, #300]	; (500 <ssd1963_init+0x230>)
     3d4:	2240      	movs	r2, #64	; 0x40
     3d6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3d8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     3da:	4b4b      	ldr	r3, [pc, #300]	; (508 <ssd1963_init+0x238>)
     3dc:	781b      	ldrb	r3, [r3, #0]
     3de:	b123      	cbz	r3, 3ea <ssd1963_init+0x11a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3e0:	4b47      	ldr	r3, [pc, #284]	; (500 <ssd1963_init+0x230>)
     3e2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     3e4:	2200      	movs	r2, #0
     3e6:	4b48      	ldr	r3, [pc, #288]	; (508 <ssd1963_init+0x238>)
     3e8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     3ea:	2254      	movs	r2, #84	; 0x54
     3ec:	4947      	ldr	r1, [pc, #284]	; (50c <ssd1963_init+0x23c>)
     3ee:	4848      	ldr	r0, [pc, #288]	; (510 <ssd1963_init+0x240>)
     3f0:	4b48      	ldr	r3, [pc, #288]	; (514 <ssd1963_init+0x244>)
     3f2:	4798      	blx	r3
     3f4:	4b42      	ldr	r3, [pc, #264]	; (500 <ssd1963_init+0x230>)
     3f6:	2240      	movs	r2, #64	; 0x40
     3f8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3fa:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     3fc:	4b42      	ldr	r3, [pc, #264]	; (508 <ssd1963_init+0x238>)
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	b923      	cbnz	r3, 40c <ssd1963_init+0x13c>
     402:	4b3f      	ldr	r3, [pc, #252]	; (500 <ssd1963_init+0x230>)
     404:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     406:	2201      	movs	r2, #1
     408:	4b3f      	ldr	r3, [pc, #252]	; (508 <ssd1963_init+0x238>)
     40a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     40c:	22e0      	movs	r2, #224	; 0xe0
     40e:	493f      	ldr	r1, [pc, #252]	; (50c <ssd1963_init+0x23c>)
     410:	483f      	ldr	r0, [pc, #252]	; (510 <ssd1963_init+0x240>)
     412:	4b40      	ldr	r3, [pc, #256]	; (514 <ssd1963_init+0x244>)
     414:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     416:	4b3a      	ldr	r3, [pc, #232]	; (500 <ssd1963_init+0x230>)
     418:	2240      	movs	r2, #64	; 0x40
     41a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     41c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     41e:	4b3a      	ldr	r3, [pc, #232]	; (508 <ssd1963_init+0x238>)
     420:	781b      	ldrb	r3, [r3, #0]
     422:	b123      	cbz	r3, 42e <ssd1963_init+0x15e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     424:	4b36      	ldr	r3, [pc, #216]	; (500 <ssd1963_init+0x230>)
     426:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     428:	2200      	movs	r2, #0
     42a:	4b37      	ldr	r3, [pc, #220]	; (508 <ssd1963_init+0x238>)
     42c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     42e:	2201      	movs	r2, #1
     430:	4936      	ldr	r1, [pc, #216]	; (50c <ssd1963_init+0x23c>)
     432:	4837      	ldr	r0, [pc, #220]	; (510 <ssd1963_init+0x240>)
     434:	4b37      	ldr	r3, [pc, #220]	; (514 <ssd1963_init+0x244>)
     436:	4798      	blx	r3
     438:	4c31      	ldr	r4, [pc, #196]	; (500 <ssd1963_init+0x230>)
     43a:	2540      	movs	r5, #64	; 0x40
     43c:	61a5      	str	r5, [r4, #24]
	delay_us(100);
     43e:	2064      	movs	r0, #100	; 0x64
     440:	4b35      	ldr	r3, [pc, #212]	; (518 <ssd1963_init+0x248>)
     442:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     444:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     446:	4b30      	ldr	r3, [pc, #192]	; (508 <ssd1963_init+0x238>)
     448:	781b      	ldrb	r3, [r3, #0]
     44a:	b923      	cbnz	r3, 456 <ssd1963_init+0x186>
     44c:	4623      	mov	r3, r4
     44e:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     450:	2201      	movs	r2, #1
     452:	4b2d      	ldr	r3, [pc, #180]	; (508 <ssd1963_init+0x238>)
     454:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     456:	22e0      	movs	r2, #224	; 0xe0
     458:	492c      	ldr	r1, [pc, #176]	; (50c <ssd1963_init+0x23c>)
     45a:	482d      	ldr	r0, [pc, #180]	; (510 <ssd1963_init+0x240>)
     45c:	4b2d      	ldr	r3, [pc, #180]	; (514 <ssd1963_init+0x244>)
     45e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     460:	4b27      	ldr	r3, [pc, #156]	; (500 <ssd1963_init+0x230>)
     462:	2240      	movs	r2, #64	; 0x40
     464:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     466:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     468:	4b27      	ldr	r3, [pc, #156]	; (508 <ssd1963_init+0x238>)
     46a:	781b      	ldrb	r3, [r3, #0]
     46c:	b123      	cbz	r3, 478 <ssd1963_init+0x1a8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     46e:	4b24      	ldr	r3, [pc, #144]	; (500 <ssd1963_init+0x230>)
     470:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     472:	2200      	movs	r2, #0
     474:	4b24      	ldr	r3, [pc, #144]	; (508 <ssd1963_init+0x238>)
     476:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     478:	2203      	movs	r2, #3
     47a:	4924      	ldr	r1, [pc, #144]	; (50c <ssd1963_init+0x23c>)
     47c:	4824      	ldr	r0, [pc, #144]	; (510 <ssd1963_init+0x240>)
     47e:	4b25      	ldr	r3, [pc, #148]	; (514 <ssd1963_init+0x244>)
     480:	4798      	blx	r3
     482:	4c1f      	ldr	r4, [pc, #124]	; (500 <ssd1963_init+0x230>)
     484:	2540      	movs	r5, #64	; 0x40
     486:	61a5      	str	r5, [r4, #24]
	delay_ms(1);
     488:	2001      	movs	r0, #1
     48a:	4b1e      	ldr	r3, [pc, #120]	; (504 <ssd1963_init+0x234>)
     48c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48e:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     490:	4b1d      	ldr	r3, [pc, #116]	; (508 <ssd1963_init+0x238>)
     492:	781b      	ldrb	r3, [r3, #0]
     494:	b923      	cbnz	r3, 4a0 <ssd1963_init+0x1d0>
     496:	4623      	mov	r3, r4
     498:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     49a:	2201      	movs	r2, #1
     49c:	4b1a      	ldr	r3, [pc, #104]	; (508 <ssd1963_init+0x238>)
     49e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     4a0:	2201      	movs	r2, #1
     4a2:	491a      	ldr	r1, [pc, #104]	; (50c <ssd1963_init+0x23c>)
     4a4:	481a      	ldr	r0, [pc, #104]	; (510 <ssd1963_init+0x240>)
     4a6:	4b1b      	ldr	r3, [pc, #108]	; (514 <ssd1963_init+0x244>)
     4a8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4aa:	4c15      	ldr	r4, [pc, #84]	; (500 <ssd1963_init+0x230>)
     4ac:	2540      	movs	r5, #64	; 0x40
     4ae:	61a5      	str	r5, [r4, #24]
	delay_ms(1);
     4b0:	2001      	movs	r0, #1
     4b2:	4b14      	ldr	r3, [pc, #80]	; (504 <ssd1963_init+0x234>)
     4b4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b6:	6165      	str	r5, [r4, #20]
    if(cmd_mode == false) {
     4b8:	4b13      	ldr	r3, [pc, #76]	; (508 <ssd1963_init+0x238>)
     4ba:	781b      	ldrb	r3, [r3, #0]
     4bc:	b923      	cbnz	r3, 4c8 <ssd1963_init+0x1f8>
     4be:	4623      	mov	r3, r4
     4c0:	615d      	str	r5, [r3, #20]
        cmd_mode = true;
     4c2:	2201      	movs	r2, #1
     4c4:	4b10      	ldr	r3, [pc, #64]	; (508 <ssd1963_init+0x238>)
     4c6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     4c8:	22e6      	movs	r2, #230	; 0xe6
     4ca:	4910      	ldr	r1, [pc, #64]	; (50c <ssd1963_init+0x23c>)
     4cc:	4810      	ldr	r0, [pc, #64]	; (510 <ssd1963_init+0x240>)
     4ce:	4b11      	ldr	r3, [pc, #68]	; (514 <ssd1963_init+0x244>)
     4d0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4d2:	4b0b      	ldr	r3, [pc, #44]	; (500 <ssd1963_init+0x230>)
     4d4:	2240      	movs	r2, #64	; 0x40
     4d6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     4da:	4b0b      	ldr	r3, [pc, #44]	; (508 <ssd1963_init+0x238>)
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	b123      	cbz	r3, 4ea <ssd1963_init+0x21a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4e0:	4b07      	ldr	r3, [pc, #28]	; (500 <ssd1963_init+0x230>)
     4e2:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     4e4:	2200      	movs	r2, #0
     4e6:	4b08      	ldr	r3, [pc, #32]	; (508 <ssd1963_init+0x238>)
     4e8:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     4ea:	2204      	movs	r2, #4
     4ec:	4907      	ldr	r1, [pc, #28]	; (50c <ssd1963_init+0x23c>)
     4ee:	4808      	ldr	r0, [pc, #32]	; (510 <ssd1963_init+0x240>)
     4f0:	4b08      	ldr	r3, [pc, #32]	; (514 <ssd1963_init+0x244>)
     4f2:	4798      	blx	r3
     4f4:	4b02      	ldr	r3, [pc, #8]	; (500 <ssd1963_init+0x230>)
     4f6:	2240      	movs	r2, #64	; 0x40
     4f8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4fa:	615a      	str	r2, [r3, #20]
     4fc:	e00e      	b.n	51c <ssd1963_init+0x24c>
     4fe:	bf00      	nop
     500:	41008000 	.word	0x41008000
     504:	00001535 	.word	0x00001535
     508:	20000000 	.word	0x20000000
     50c:	1c03c3f7 	.word	0x1c03c3f7
     510:	41008080 	.word	0x41008080
     514:	00000fbd 	.word	0x00000fbd
     518:	00001515 	.word	0x00001515
    if(cmd_mode != false) {
     51c:	4b87      	ldr	r3, [pc, #540]	; (73c <ssd1963_init+0x46c>)
     51e:	781b      	ldrb	r3, [r3, #0]
     520:	b123      	cbz	r3, 52c <ssd1963_init+0x25c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     522:	4b87      	ldr	r3, [pc, #540]	; (740 <ssd1963_init+0x470>)
     524:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     526:	2200      	movs	r2, #0
     528:	4b84      	ldr	r3, [pc, #528]	; (73c <ssd1963_init+0x46c>)
     52a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     52c:	223a      	movs	r2, #58	; 0x3a
     52e:	4985      	ldr	r1, [pc, #532]	; (744 <ssd1963_init+0x474>)
     530:	4885      	ldr	r0, [pc, #532]	; (748 <ssd1963_init+0x478>)
     532:	4b86      	ldr	r3, [pc, #536]	; (74c <ssd1963_init+0x47c>)
     534:	4798      	blx	r3
     536:	4b82      	ldr	r3, [pc, #520]	; (740 <ssd1963_init+0x470>)
     538:	2240      	movs	r2, #64	; 0x40
     53a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     53c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     53e:	4b7f      	ldr	r3, [pc, #508]	; (73c <ssd1963_init+0x46c>)
     540:	781b      	ldrb	r3, [r3, #0]
     542:	b123      	cbz	r3, 54e <ssd1963_init+0x27e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     544:	4b7e      	ldr	r3, [pc, #504]	; (740 <ssd1963_init+0x470>)
     546:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     548:	2200      	movs	r2, #0
     54a:	4b7c      	ldr	r3, [pc, #496]	; (73c <ssd1963_init+0x46c>)
     54c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     54e:	22b6      	movs	r2, #182	; 0xb6
     550:	497c      	ldr	r1, [pc, #496]	; (744 <ssd1963_init+0x474>)
     552:	487d      	ldr	r0, [pc, #500]	; (748 <ssd1963_init+0x478>)
     554:	4b7d      	ldr	r3, [pc, #500]	; (74c <ssd1963_init+0x47c>)
     556:	4798      	blx	r3
     558:	4b79      	ldr	r3, [pc, #484]	; (740 <ssd1963_init+0x470>)
     55a:	2240      	movs	r2, #64	; 0x40
     55c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     55e:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     560:	4b76      	ldr	r3, [pc, #472]	; (73c <ssd1963_init+0x46c>)
     562:	781b      	ldrb	r3, [r3, #0]
     564:	b923      	cbnz	r3, 570 <ssd1963_init+0x2a0>
     566:	4b76      	ldr	r3, [pc, #472]	; (740 <ssd1963_init+0x470>)
     568:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     56a:	2201      	movs	r2, #1
     56c:	4b73      	ldr	r3, [pc, #460]	; (73c <ssd1963_init+0x46c>)
     56e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     570:	22b0      	movs	r2, #176	; 0xb0
     572:	4974      	ldr	r1, [pc, #464]	; (744 <ssd1963_init+0x474>)
     574:	4874      	ldr	r0, [pc, #464]	; (748 <ssd1963_init+0x478>)
     576:	4b75      	ldr	r3, [pc, #468]	; (74c <ssd1963_init+0x47c>)
     578:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     57a:	4b71      	ldr	r3, [pc, #452]	; (740 <ssd1963_init+0x470>)
     57c:	2240      	movs	r2, #64	; 0x40
     57e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     580:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     582:	4b6e      	ldr	r3, [pc, #440]	; (73c <ssd1963_init+0x46c>)
     584:	781b      	ldrb	r3, [r3, #0]
     586:	b123      	cbz	r3, 592 <ssd1963_init+0x2c2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     588:	4b6d      	ldr	r3, [pc, #436]	; (740 <ssd1963_init+0x470>)
     58a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     58c:	2200      	movs	r2, #0
     58e:	4b6b      	ldr	r3, [pc, #428]	; (73c <ssd1963_init+0x46c>)
     590:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     592:	2228      	movs	r2, #40	; 0x28
     594:	496b      	ldr	r1, [pc, #428]	; (744 <ssd1963_init+0x474>)
     596:	486c      	ldr	r0, [pc, #432]	; (748 <ssd1963_init+0x478>)
     598:	4b6c      	ldr	r3, [pc, #432]	; (74c <ssd1963_init+0x47c>)
     59a:	4798      	blx	r3
     59c:	4b68      	ldr	r3, [pc, #416]	; (740 <ssd1963_init+0x470>)
     59e:	2240      	movs	r2, #64	; 0x40
     5a0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     5a4:	4b65      	ldr	r3, [pc, #404]	; (73c <ssd1963_init+0x46c>)
     5a6:	781b      	ldrb	r3, [r3, #0]
     5a8:	b123      	cbz	r3, 5b4 <ssd1963_init+0x2e4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5aa:	4b65      	ldr	r3, [pc, #404]	; (740 <ssd1963_init+0x470>)
     5ac:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     5ae:	2200      	movs	r2, #0
     5b0:	4b62      	ldr	r3, [pc, #392]	; (73c <ssd1963_init+0x46c>)
     5b2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5b4:	2280      	movs	r2, #128	; 0x80
     5b6:	4963      	ldr	r1, [pc, #396]	; (744 <ssd1963_init+0x474>)
     5b8:	4863      	ldr	r0, [pc, #396]	; (748 <ssd1963_init+0x478>)
     5ba:	4b64      	ldr	r3, [pc, #400]	; (74c <ssd1963_init+0x47c>)
     5bc:	4798      	blx	r3
     5be:	4c60      	ldr	r4, [pc, #384]	; (740 <ssd1963_init+0x470>)
     5c0:	2540      	movs	r5, #64	; 0x40
     5c2:	61a5      	str	r5, [r4, #24]
	ssd1963_data((SSD1963_HOR_RES-1)>>8); //Set panel size
     5c4:	4b62      	ldr	r3, [pc, #392]	; (750 <ssd1963_init+0x480>)
     5c6:	4798      	blx	r3
     5c8:	4b62      	ldr	r3, [pc, #392]	; (754 <ssd1963_init+0x484>)
     5ca:	4798      	blx	r3
     5cc:	1e42      	subs	r2, r0, #1
     5ce:	1212      	asrs	r2, r2, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d0:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     5d2:	4b5a      	ldr	r3, [pc, #360]	; (73c <ssd1963_init+0x46c>)
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	b123      	cbz	r3, 5e2 <ssd1963_init+0x312>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5d8:	4623      	mov	r3, r4
     5da:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     5dc:	2100      	movs	r1, #0
     5de:	4b57      	ldr	r3, [pc, #348]	; (73c <ssd1963_init+0x46c>)
     5e0:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     5e2:	b2d2      	uxtb	r2, r2
     5e4:	4957      	ldr	r1, [pc, #348]	; (744 <ssd1963_init+0x474>)
     5e6:	4858      	ldr	r0, [pc, #352]	; (748 <ssd1963_init+0x478>)
     5e8:	4b58      	ldr	r3, [pc, #352]	; (74c <ssd1963_init+0x47c>)
     5ea:	4798      	blx	r3
     5ec:	4c54      	ldr	r4, [pc, #336]	; (740 <ssd1963_init+0x470>)
     5ee:	2540      	movs	r5, #64	; 0x40
     5f0:	61a5      	str	r5, [r4, #24]
	ssd1963_data(SSD1963_HOR_RES-1);
     5f2:	4b57      	ldr	r3, [pc, #348]	; (750 <ssd1963_init+0x480>)
     5f4:	4798      	blx	r3
     5f6:	4b57      	ldr	r3, [pc, #348]	; (754 <ssd1963_init+0x484>)
     5f8:	4798      	blx	r3
     5fa:	1e42      	subs	r2, r0, #1
     5fc:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fe:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     600:	4b4e      	ldr	r3, [pc, #312]	; (73c <ssd1963_init+0x46c>)
     602:	781b      	ldrb	r3, [r3, #0]
     604:	b123      	cbz	r3, 610 <ssd1963_init+0x340>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     606:	4623      	mov	r3, r4
     608:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     60a:	2100      	movs	r1, #0
     60c:	4b4b      	ldr	r3, [pc, #300]	; (73c <ssd1963_init+0x46c>)
     60e:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     610:	494c      	ldr	r1, [pc, #304]	; (744 <ssd1963_init+0x474>)
     612:	484d      	ldr	r0, [pc, #308]	; (748 <ssd1963_init+0x478>)
     614:	4b4d      	ldr	r3, [pc, #308]	; (74c <ssd1963_init+0x47c>)
     616:	4798      	blx	r3
     618:	4c49      	ldr	r4, [pc, #292]	; (740 <ssd1963_init+0x470>)
     61a:	2540      	movs	r5, #64	; 0x40
     61c:	61a5      	str	r5, [r4, #24]
	ssd1963_data((SSD1963_VER_RES-1)>>8);
     61e:	4b4c      	ldr	r3, [pc, #304]	; (750 <ssd1963_init+0x480>)
     620:	4798      	blx	r3
     622:	4b4d      	ldr	r3, [pc, #308]	; (758 <ssd1963_init+0x488>)
     624:	4798      	blx	r3
     626:	1e42      	subs	r2, r0, #1
     628:	1212      	asrs	r2, r2, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     62a:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     62c:	4b43      	ldr	r3, [pc, #268]	; (73c <ssd1963_init+0x46c>)
     62e:	781b      	ldrb	r3, [r3, #0]
     630:	b123      	cbz	r3, 63c <ssd1963_init+0x36c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     632:	4623      	mov	r3, r4
     634:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     636:	2100      	movs	r1, #0
     638:	4b40      	ldr	r3, [pc, #256]	; (73c <ssd1963_init+0x46c>)
     63a:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     63c:	b2d2      	uxtb	r2, r2
     63e:	4941      	ldr	r1, [pc, #260]	; (744 <ssd1963_init+0x474>)
     640:	4841      	ldr	r0, [pc, #260]	; (748 <ssd1963_init+0x478>)
     642:	4b42      	ldr	r3, [pc, #264]	; (74c <ssd1963_init+0x47c>)
     644:	4798      	blx	r3
     646:	4c3e      	ldr	r4, [pc, #248]	; (740 <ssd1963_init+0x470>)
     648:	2540      	movs	r5, #64	; 0x40
     64a:	61a5      	str	r5, [r4, #24]
	ssd1963_data(SSD1963_VER_RES-1);
     64c:	4b40      	ldr	r3, [pc, #256]	; (750 <ssd1963_init+0x480>)
     64e:	4798      	blx	r3
     650:	4b41      	ldr	r3, [pc, #260]	; (758 <ssd1963_init+0x488>)
     652:	4798      	blx	r3
     654:	1e42      	subs	r2, r0, #1
     656:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     658:	6165      	str	r5, [r4, #20]
    if(cmd_mode != false) {
     65a:	4b38      	ldr	r3, [pc, #224]	; (73c <ssd1963_init+0x46c>)
     65c:	781b      	ldrb	r3, [r3, #0]
     65e:	b123      	cbz	r3, 66a <ssd1963_init+0x39a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     660:	4623      	mov	r3, r4
     662:	619d      	str	r5, [r3, #24]
        cmd_mode = false;
     664:	2100      	movs	r1, #0
     666:	4b35      	ldr	r3, [pc, #212]	; (73c <ssd1963_init+0x46c>)
     668:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     66a:	4936      	ldr	r1, [pc, #216]	; (744 <ssd1963_init+0x474>)
     66c:	4836      	ldr	r0, [pc, #216]	; (748 <ssd1963_init+0x478>)
     66e:	4b37      	ldr	r3, [pc, #220]	; (74c <ssd1963_init+0x47c>)
     670:	4798      	blx	r3
     672:	4b33      	ldr	r3, [pc, #204]	; (740 <ssd1963_init+0x470>)
     674:	2240      	movs	r2, #64	; 0x40
     676:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     678:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     67a:	4b30      	ldr	r3, [pc, #192]	; (73c <ssd1963_init+0x46c>)
     67c:	781b      	ldrb	r3, [r3, #0]
     67e:	b123      	cbz	r3, 68a <ssd1963_init+0x3ba>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     680:	4b2f      	ldr	r3, [pc, #188]	; (740 <ssd1963_init+0x470>)
     682:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     684:	2200      	movs	r2, #0
     686:	4b2d      	ldr	r3, [pc, #180]	; (73c <ssd1963_init+0x46c>)
     688:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     68a:	2200      	movs	r2, #0
     68c:	492d      	ldr	r1, [pc, #180]	; (744 <ssd1963_init+0x474>)
     68e:	482e      	ldr	r0, [pc, #184]	; (748 <ssd1963_init+0x478>)
     690:	4b2e      	ldr	r3, [pc, #184]	; (74c <ssd1963_init+0x47c>)
     692:	4798      	blx	r3
     694:	4b2a      	ldr	r3, [pc, #168]	; (740 <ssd1963_init+0x470>)
     696:	2240      	movs	r2, #64	; 0x40
     698:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     69a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     69c:	4b27      	ldr	r3, [pc, #156]	; (73c <ssd1963_init+0x46c>)
     69e:	781b      	ldrb	r3, [r3, #0]
     6a0:	b923      	cbnz	r3, 6ac <ssd1963_init+0x3dc>
     6a2:	4b27      	ldr	r3, [pc, #156]	; (740 <ssd1963_init+0x470>)
     6a4:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     6a6:	2201      	movs	r2, #1
     6a8:	4b24      	ldr	r3, [pc, #144]	; (73c <ssd1963_init+0x46c>)
     6aa:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     6ac:	22f0      	movs	r2, #240	; 0xf0
     6ae:	4925      	ldr	r1, [pc, #148]	; (744 <ssd1963_init+0x474>)
     6b0:	4825      	ldr	r0, [pc, #148]	; (748 <ssd1963_init+0x478>)
     6b2:	4b26      	ldr	r3, [pc, #152]	; (74c <ssd1963_init+0x47c>)
     6b4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6b6:	4b22      	ldr	r3, [pc, #136]	; (740 <ssd1963_init+0x470>)
     6b8:	2240      	movs	r2, #64	; 0x40
     6ba:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6bc:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     6be:	4b1f      	ldr	r3, [pc, #124]	; (73c <ssd1963_init+0x46c>)
     6c0:	781b      	ldrb	r3, [r3, #0]
     6c2:	b123      	cbz	r3, 6ce <ssd1963_init+0x3fe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6c4:	4b1e      	ldr	r3, [pc, #120]	; (740 <ssd1963_init+0x470>)
     6c6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     6c8:	2200      	movs	r2, #0
     6ca:	4b1c      	ldr	r3, [pc, #112]	; (73c <ssd1963_init+0x46c>)
     6cc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     6ce:	2203      	movs	r2, #3
     6d0:	491c      	ldr	r1, [pc, #112]	; (744 <ssd1963_init+0x474>)
     6d2:	481d      	ldr	r0, [pc, #116]	; (748 <ssd1963_init+0x478>)
     6d4:	4b1d      	ldr	r3, [pc, #116]	; (74c <ssd1963_init+0x47c>)
     6d6:	4798      	blx	r3
     6d8:	4b19      	ldr	r3, [pc, #100]	; (740 <ssd1963_init+0x470>)
     6da:	2240      	movs	r2, #64	; 0x40
     6dc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6de:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     6e0:	4b16      	ldr	r3, [pc, #88]	; (73c <ssd1963_init+0x46c>)
     6e2:	781b      	ldrb	r3, [r3, #0]
     6e4:	b923      	cbnz	r3, 6f0 <ssd1963_init+0x420>
     6e6:	4b16      	ldr	r3, [pc, #88]	; (740 <ssd1963_init+0x470>)
     6e8:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     6ea:	2201      	movs	r2, #1
     6ec:	4b13      	ldr	r3, [pc, #76]	; (73c <ssd1963_init+0x46c>)
     6ee:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     6f0:	223a      	movs	r2, #58	; 0x3a
     6f2:	4914      	ldr	r1, [pc, #80]	; (744 <ssd1963_init+0x474>)
     6f4:	4814      	ldr	r0, [pc, #80]	; (748 <ssd1963_init+0x478>)
     6f6:	4b15      	ldr	r3, [pc, #84]	; (74c <ssd1963_init+0x47c>)
     6f8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6fa:	4b11      	ldr	r3, [pc, #68]	; (740 <ssd1963_init+0x470>)
     6fc:	2240      	movs	r2, #64	; 0x40
     6fe:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     700:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     702:	4b0e      	ldr	r3, [pc, #56]	; (73c <ssd1963_init+0x46c>)
     704:	781b      	ldrb	r3, [r3, #0]
     706:	b123      	cbz	r3, 712 <ssd1963_init+0x442>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     708:	4b0d      	ldr	r3, [pc, #52]	; (740 <ssd1963_init+0x470>)
     70a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     70c:	2200      	movs	r2, #0
     70e:	4b0b      	ldr	r3, [pc, #44]	; (73c <ssd1963_init+0x46c>)
     710:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     712:	2255      	movs	r2, #85	; 0x55
     714:	490b      	ldr	r1, [pc, #44]	; (744 <ssd1963_init+0x474>)
     716:	480c      	ldr	r0, [pc, #48]	; (748 <ssd1963_init+0x478>)
     718:	4b0c      	ldr	r3, [pc, #48]	; (74c <ssd1963_init+0x47c>)
     71a:	4798      	blx	r3
     71c:	4b08      	ldr	r3, [pc, #32]	; (740 <ssd1963_init+0x470>)
     71e:	2240      	movs	r2, #64	; 0x40
     720:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     722:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     724:	4b05      	ldr	r3, [pc, #20]	; (73c <ssd1963_init+0x46c>)
     726:	781b      	ldrb	r3, [r3, #0]
     728:	b923      	cbnz	r3, 734 <ssd1963_init+0x464>
     72a:	4b05      	ldr	r3, [pc, #20]	; (740 <ssd1963_init+0x470>)
     72c:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     72e:	2201      	movs	r2, #1
     730:	4b02      	ldr	r3, [pc, #8]	; (73c <ssd1963_init+0x46c>)
     732:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     734:	22b4      	movs	r2, #180	; 0xb4
     736:	4903      	ldr	r1, [pc, #12]	; (744 <ssd1963_init+0x474>)
     738:	e010      	b.n	75c <ssd1963_init+0x48c>
     73a:	bf00      	nop
     73c:	20000000 	.word	0x20000000
     740:	41008000 	.word	0x41008000
     744:	1c03c3f7 	.word	0x1c03c3f7
     748:	41008080 	.word	0x41008080
     74c:	00000fbd 	.word	0x00000fbd
     750:	00011489 	.word	0x00011489
     754:	00011495 	.word	0x00011495
     758:	000114bd 	.word	0x000114bd
     75c:	4886      	ldr	r0, [pc, #536]	; (978 <ssd1963_init+0x6a8>)
     75e:	4b87      	ldr	r3, [pc, #540]	; (97c <ssd1963_init+0x6ac>)
     760:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     762:	4b87      	ldr	r3, [pc, #540]	; (980 <ssd1963_init+0x6b0>)
     764:	2240      	movs	r2, #64	; 0x40
     766:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     768:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     76a:	4b86      	ldr	r3, [pc, #536]	; (984 <ssd1963_init+0x6b4>)
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	b123      	cbz	r3, 77a <ssd1963_init+0x4aa>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     770:	4b83      	ldr	r3, [pc, #524]	; (980 <ssd1963_init+0x6b0>)
     772:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     774:	2200      	movs	r2, #0
     776:	4b83      	ldr	r3, [pc, #524]	; (984 <ssd1963_init+0x6b4>)
     778:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     77a:	2202      	movs	r2, #2
     77c:	4982      	ldr	r1, [pc, #520]	; (988 <ssd1963_init+0x6b8>)
     77e:	487e      	ldr	r0, [pc, #504]	; (978 <ssd1963_init+0x6a8>)
     780:	4b7e      	ldr	r3, [pc, #504]	; (97c <ssd1963_init+0x6ac>)
     782:	4798      	blx	r3
     784:	4b7e      	ldr	r3, [pc, #504]	; (980 <ssd1963_init+0x6b0>)
     786:	2240      	movs	r2, #64	; 0x40
     788:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     78a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     78c:	4b7d      	ldr	r3, [pc, #500]	; (984 <ssd1963_init+0x6b4>)
     78e:	781b      	ldrb	r3, [r3, #0]
     790:	b123      	cbz	r3, 79c <ssd1963_init+0x4cc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     792:	4b7b      	ldr	r3, [pc, #492]	; (980 <ssd1963_init+0x6b0>)
     794:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     796:	2200      	movs	r2, #0
     798:	4b7a      	ldr	r3, [pc, #488]	; (984 <ssd1963_init+0x6b4>)
     79a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     79c:	220d      	movs	r2, #13
     79e:	497a      	ldr	r1, [pc, #488]	; (988 <ssd1963_init+0x6b8>)
     7a0:	4875      	ldr	r0, [pc, #468]	; (978 <ssd1963_init+0x6a8>)
     7a2:	4b76      	ldr	r3, [pc, #472]	; (97c <ssd1963_init+0x6ac>)
     7a4:	4798      	blx	r3
     7a6:	4b76      	ldr	r3, [pc, #472]	; (980 <ssd1963_init+0x6b0>)
     7a8:	2240      	movs	r2, #64	; 0x40
     7aa:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ac:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7ae:	4b75      	ldr	r3, [pc, #468]	; (984 <ssd1963_init+0x6b4>)
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	b123      	cbz	r3, 7be <ssd1963_init+0x4ee>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7b4:	4b72      	ldr	r3, [pc, #456]	; (980 <ssd1963_init+0x6b0>)
     7b6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7b8:	2200      	movs	r2, #0
     7ba:	4b72      	ldr	r3, [pc, #456]	; (984 <ssd1963_init+0x6b4>)
     7bc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7be:	2200      	movs	r2, #0
     7c0:	4971      	ldr	r1, [pc, #452]	; (988 <ssd1963_init+0x6b8>)
     7c2:	486d      	ldr	r0, [pc, #436]	; (978 <ssd1963_init+0x6a8>)
     7c4:	4b6d      	ldr	r3, [pc, #436]	; (97c <ssd1963_init+0x6ac>)
     7c6:	4798      	blx	r3
     7c8:	4b6d      	ldr	r3, [pc, #436]	; (980 <ssd1963_init+0x6b0>)
     7ca:	2240      	movs	r2, #64	; 0x40
     7cc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7ce:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7d0:	4b6c      	ldr	r3, [pc, #432]	; (984 <ssd1963_init+0x6b4>)
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	b123      	cbz	r3, 7e0 <ssd1963_init+0x510>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7d6:	4b6a      	ldr	r3, [pc, #424]	; (980 <ssd1963_init+0x6b0>)
     7d8:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7da:	2200      	movs	r2, #0
     7dc:	4b69      	ldr	r3, [pc, #420]	; (984 <ssd1963_init+0x6b4>)
     7de:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     7e0:	222b      	movs	r2, #43	; 0x2b
     7e2:	4969      	ldr	r1, [pc, #420]	; (988 <ssd1963_init+0x6b8>)
     7e4:	4864      	ldr	r0, [pc, #400]	; (978 <ssd1963_init+0x6a8>)
     7e6:	4b65      	ldr	r3, [pc, #404]	; (97c <ssd1963_init+0x6ac>)
     7e8:	4798      	blx	r3
     7ea:	4b65      	ldr	r3, [pc, #404]	; (980 <ssd1963_init+0x6b0>)
     7ec:	2240      	movs	r2, #64	; 0x40
     7ee:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7f0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     7f2:	4b64      	ldr	r3, [pc, #400]	; (984 <ssd1963_init+0x6b4>)
     7f4:	781b      	ldrb	r3, [r3, #0]
     7f6:	b123      	cbz	r3, 802 <ssd1963_init+0x532>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7f8:	4b61      	ldr	r3, [pc, #388]	; (980 <ssd1963_init+0x6b0>)
     7fa:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     7fc:	2200      	movs	r2, #0
     7fe:	4b61      	ldr	r3, [pc, #388]	; (984 <ssd1963_init+0x6b4>)
     800:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     802:	2228      	movs	r2, #40	; 0x28
     804:	4960      	ldr	r1, [pc, #384]	; (988 <ssd1963_init+0x6b8>)
     806:	485c      	ldr	r0, [pc, #368]	; (978 <ssd1963_init+0x6a8>)
     808:	4b5c      	ldr	r3, [pc, #368]	; (97c <ssd1963_init+0x6ac>)
     80a:	4798      	blx	r3
     80c:	4b5c      	ldr	r3, [pc, #368]	; (980 <ssd1963_init+0x6b0>)
     80e:	2240      	movs	r2, #64	; 0x40
     810:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     812:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     814:	4b5b      	ldr	r3, [pc, #364]	; (984 <ssd1963_init+0x6b4>)
     816:	781b      	ldrb	r3, [r3, #0]
     818:	b123      	cbz	r3, 824 <ssd1963_init+0x554>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     81a:	4b59      	ldr	r3, [pc, #356]	; (980 <ssd1963_init+0x6b0>)
     81c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     81e:	2200      	movs	r2, #0
     820:	4b58      	ldr	r3, [pc, #352]	; (984 <ssd1963_init+0x6b4>)
     822:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     824:	2200      	movs	r2, #0
     826:	4958      	ldr	r1, [pc, #352]	; (988 <ssd1963_init+0x6b8>)
     828:	4853      	ldr	r0, [pc, #332]	; (978 <ssd1963_init+0x6a8>)
     82a:	4b54      	ldr	r3, [pc, #336]	; (97c <ssd1963_init+0x6ac>)
     82c:	4798      	blx	r3
     82e:	4b54      	ldr	r3, [pc, #336]	; (980 <ssd1963_init+0x6b0>)
     830:	2240      	movs	r2, #64	; 0x40
     832:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     834:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     836:	4b53      	ldr	r3, [pc, #332]	; (984 <ssd1963_init+0x6b4>)
     838:	781b      	ldrb	r3, [r3, #0]
     83a:	b123      	cbz	r3, 846 <ssd1963_init+0x576>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     83c:	4b50      	ldr	r3, [pc, #320]	; (980 <ssd1963_init+0x6b0>)
     83e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     840:	2200      	movs	r2, #0
     842:	4b50      	ldr	r3, [pc, #320]	; (984 <ssd1963_init+0x6b4>)
     844:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     846:	2200      	movs	r2, #0
     848:	494f      	ldr	r1, [pc, #316]	; (988 <ssd1963_init+0x6b8>)
     84a:	484b      	ldr	r0, [pc, #300]	; (978 <ssd1963_init+0x6a8>)
     84c:	4b4b      	ldr	r3, [pc, #300]	; (97c <ssd1963_init+0x6ac>)
     84e:	4798      	blx	r3
     850:	4b4b      	ldr	r3, [pc, #300]	; (980 <ssd1963_init+0x6b0>)
     852:	2240      	movs	r2, #64	; 0x40
     854:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     856:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     858:	4b4a      	ldr	r3, [pc, #296]	; (984 <ssd1963_init+0x6b4>)
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	b123      	cbz	r3, 868 <ssd1963_init+0x598>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     85e:	4b48      	ldr	r3, [pc, #288]	; (980 <ssd1963_init+0x6b0>)
     860:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     862:	2200      	movs	r2, #0
     864:	4b47      	ldr	r3, [pc, #284]	; (984 <ssd1963_init+0x6b4>)
     866:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     868:	2200      	movs	r2, #0
     86a:	4947      	ldr	r1, [pc, #284]	; (988 <ssd1963_init+0x6b8>)
     86c:	4842      	ldr	r0, [pc, #264]	; (978 <ssd1963_init+0x6a8>)
     86e:	4b43      	ldr	r3, [pc, #268]	; (97c <ssd1963_init+0x6ac>)
     870:	4798      	blx	r3
     872:	4b43      	ldr	r3, [pc, #268]	; (980 <ssd1963_init+0x6b0>)
     874:	2240      	movs	r2, #64	; 0x40
     876:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     878:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     87a:	4b42      	ldr	r3, [pc, #264]	; (984 <ssd1963_init+0x6b4>)
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	b923      	cbnz	r3, 88a <ssd1963_init+0x5ba>
     880:	4b3f      	ldr	r3, [pc, #252]	; (980 <ssd1963_init+0x6b0>)
     882:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     884:	2201      	movs	r2, #1
     886:	4b3f      	ldr	r3, [pc, #252]	; (984 <ssd1963_init+0x6b4>)
     888:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     88a:	22b6      	movs	r2, #182	; 0xb6
     88c:	493e      	ldr	r1, [pc, #248]	; (988 <ssd1963_init+0x6b8>)
     88e:	483a      	ldr	r0, [pc, #232]	; (978 <ssd1963_init+0x6a8>)
     890:	4b3a      	ldr	r3, [pc, #232]	; (97c <ssd1963_init+0x6ac>)
     892:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     894:	4b3a      	ldr	r3, [pc, #232]	; (980 <ssd1963_init+0x6b0>)
     896:	2240      	movs	r2, #64	; 0x40
     898:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     89a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     89c:	4b39      	ldr	r3, [pc, #228]	; (984 <ssd1963_init+0x6b4>)
     89e:	781b      	ldrb	r3, [r3, #0]
     8a0:	b123      	cbz	r3, 8ac <ssd1963_init+0x5dc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8a2:	4b37      	ldr	r3, [pc, #220]	; (980 <ssd1963_init+0x6b0>)
     8a4:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8a6:	2200      	movs	r2, #0
     8a8:	4b36      	ldr	r3, [pc, #216]	; (984 <ssd1963_init+0x6b4>)
     8aa:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8ac:	2201      	movs	r2, #1
     8ae:	4936      	ldr	r1, [pc, #216]	; (988 <ssd1963_init+0x6b8>)
     8b0:	4831      	ldr	r0, [pc, #196]	; (978 <ssd1963_init+0x6a8>)
     8b2:	4b32      	ldr	r3, [pc, #200]	; (97c <ssd1963_init+0x6ac>)
     8b4:	4798      	blx	r3
     8b6:	4b32      	ldr	r3, [pc, #200]	; (980 <ssd1963_init+0x6b0>)
     8b8:	2240      	movs	r2, #64	; 0x40
     8ba:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8bc:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8be:	4b31      	ldr	r3, [pc, #196]	; (984 <ssd1963_init+0x6b4>)
     8c0:	781b      	ldrb	r3, [r3, #0]
     8c2:	b123      	cbz	r3, 8ce <ssd1963_init+0x5fe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8c4:	4b2e      	ldr	r3, [pc, #184]	; (980 <ssd1963_init+0x6b0>)
     8c6:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8c8:	2200      	movs	r2, #0
     8ca:	4b2e      	ldr	r3, [pc, #184]	; (984 <ssd1963_init+0x6b4>)
     8cc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8ce:	221d      	movs	r2, #29
     8d0:	492d      	ldr	r1, [pc, #180]	; (988 <ssd1963_init+0x6b8>)
     8d2:	4829      	ldr	r0, [pc, #164]	; (978 <ssd1963_init+0x6a8>)
     8d4:	4b29      	ldr	r3, [pc, #164]	; (97c <ssd1963_init+0x6ac>)
     8d6:	4798      	blx	r3
     8d8:	4b29      	ldr	r3, [pc, #164]	; (980 <ssd1963_init+0x6b0>)
     8da:	2240      	movs	r2, #64	; 0x40
     8dc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8de:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     8e0:	4b28      	ldr	r3, [pc, #160]	; (984 <ssd1963_init+0x6b4>)
     8e2:	781b      	ldrb	r3, [r3, #0]
     8e4:	b123      	cbz	r3, 8f0 <ssd1963_init+0x620>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8e6:	4b26      	ldr	r3, [pc, #152]	; (980 <ssd1963_init+0x6b0>)
     8e8:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     8ea:	2200      	movs	r2, #0
     8ec:	4b25      	ldr	r3, [pc, #148]	; (984 <ssd1963_init+0x6b4>)
     8ee:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     8f0:	2200      	movs	r2, #0
     8f2:	4925      	ldr	r1, [pc, #148]	; (988 <ssd1963_init+0x6b8>)
     8f4:	4820      	ldr	r0, [pc, #128]	; (978 <ssd1963_init+0x6a8>)
     8f6:	4b21      	ldr	r3, [pc, #132]	; (97c <ssd1963_init+0x6ac>)
     8f8:	4798      	blx	r3
     8fa:	4b21      	ldr	r3, [pc, #132]	; (980 <ssd1963_init+0x6b0>)
     8fc:	2240      	movs	r2, #64	; 0x40
     8fe:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     902:	4b20      	ldr	r3, [pc, #128]	; (984 <ssd1963_init+0x6b4>)
     904:	781b      	ldrb	r3, [r3, #0]
     906:	b123      	cbz	r3, 912 <ssd1963_init+0x642>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     908:	4b1d      	ldr	r3, [pc, #116]	; (980 <ssd1963_init+0x6b0>)
     90a:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     90c:	2200      	movs	r2, #0
     90e:	4b1d      	ldr	r3, [pc, #116]	; (984 <ssd1963_init+0x6b4>)
     910:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     912:	220c      	movs	r2, #12
     914:	491c      	ldr	r1, [pc, #112]	; (988 <ssd1963_init+0x6b8>)
     916:	4818      	ldr	r0, [pc, #96]	; (978 <ssd1963_init+0x6a8>)
     918:	4b18      	ldr	r3, [pc, #96]	; (97c <ssd1963_init+0x6ac>)
     91a:	4798      	blx	r3
     91c:	4b18      	ldr	r3, [pc, #96]	; (980 <ssd1963_init+0x6b0>)
     91e:	2240      	movs	r2, #64	; 0x40
     920:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     922:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     924:	4b17      	ldr	r3, [pc, #92]	; (984 <ssd1963_init+0x6b4>)
     926:	781b      	ldrb	r3, [r3, #0]
     928:	b123      	cbz	r3, 934 <ssd1963_init+0x664>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     92a:	4b15      	ldr	r3, [pc, #84]	; (980 <ssd1963_init+0x6b0>)
     92c:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     92e:	2200      	movs	r2, #0
     930:	4b14      	ldr	r3, [pc, #80]	; (984 <ssd1963_init+0x6b4>)
     932:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     934:	2209      	movs	r2, #9
     936:	4914      	ldr	r1, [pc, #80]	; (988 <ssd1963_init+0x6b8>)
     938:	480f      	ldr	r0, [pc, #60]	; (978 <ssd1963_init+0x6a8>)
     93a:	4b10      	ldr	r3, [pc, #64]	; (97c <ssd1963_init+0x6ac>)
     93c:	4798      	blx	r3
     93e:	4b10      	ldr	r3, [pc, #64]	; (980 <ssd1963_init+0x6b0>)
     940:	2240      	movs	r2, #64	; 0x40
     942:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     944:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     946:	4b0f      	ldr	r3, [pc, #60]	; (984 <ssd1963_init+0x6b4>)
     948:	781b      	ldrb	r3, [r3, #0]
     94a:	b123      	cbz	r3, 956 <ssd1963_init+0x686>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     94c:	4b0c      	ldr	r3, [pc, #48]	; (980 <ssd1963_init+0x6b0>)
     94e:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     950:	2200      	movs	r2, #0
     952:	4b0c      	ldr	r3, [pc, #48]	; (984 <ssd1963_init+0x6b4>)
     954:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     956:	2200      	movs	r2, #0
     958:	490b      	ldr	r1, [pc, #44]	; (988 <ssd1963_init+0x6b8>)
     95a:	4807      	ldr	r0, [pc, #28]	; (978 <ssd1963_init+0x6a8>)
     95c:	4b07      	ldr	r3, [pc, #28]	; (97c <ssd1963_init+0x6ac>)
     95e:	4798      	blx	r3
     960:	4b07      	ldr	r3, [pc, #28]	; (980 <ssd1963_init+0x6b0>)
     962:	2240      	movs	r2, #64	; 0x40
     964:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     966:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     968:	4b06      	ldr	r3, [pc, #24]	; (984 <ssd1963_init+0x6b4>)
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	b183      	cbz	r3, 990 <ssd1963_init+0x6c0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     96e:	4b04      	ldr	r3, [pc, #16]	; (980 <ssd1963_init+0x6b0>)
     970:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     972:	2200      	movs	r2, #0
     974:	e00a      	b.n	98c <ssd1963_init+0x6bc>
     976:	bf00      	nop
     978:	41008080 	.word	0x41008080
     97c:	00000fbd 	.word	0x00000fbd
     980:	41008000 	.word	0x41008000
     984:	20000000 	.word	0x20000000
     988:	1c03c3f7 	.word	0x1c03c3f7
     98c:	4b86      	ldr	r3, [pc, #536]	; (ba8 <ssd1963_init+0x8d8>)
     98e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     990:	2200      	movs	r2, #0
     992:	4986      	ldr	r1, [pc, #536]	; (bac <ssd1963_init+0x8dc>)
     994:	4886      	ldr	r0, [pc, #536]	; (bb0 <ssd1963_init+0x8e0>)
     996:	4b87      	ldr	r3, [pc, #540]	; (bb4 <ssd1963_init+0x8e4>)
     998:	4798      	blx	r3
     99a:	4b87      	ldr	r3, [pc, #540]	; (bb8 <ssd1963_init+0x8e8>)
     99c:	2240      	movs	r2, #64	; 0x40
     99e:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9a0:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     9a2:	4b81      	ldr	r3, [pc, #516]	; (ba8 <ssd1963_init+0x8d8>)
     9a4:	781b      	ldrb	r3, [r3, #0]
     9a6:	b923      	cbnz	r3, 9b2 <ssd1963_init+0x6e2>
     9a8:	4b83      	ldr	r3, [pc, #524]	; (bb8 <ssd1963_init+0x8e8>)
     9aa:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     9ac:	2201      	movs	r2, #1
     9ae:	4b7e      	ldr	r3, [pc, #504]	; (ba8 <ssd1963_init+0x8d8>)
     9b0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     9b2:	222a      	movs	r2, #42	; 0x2a
     9b4:	497d      	ldr	r1, [pc, #500]	; (bac <ssd1963_init+0x8dc>)
     9b6:	487e      	ldr	r0, [pc, #504]	; (bb0 <ssd1963_init+0x8e0>)
     9b8:	4b7e      	ldr	r3, [pc, #504]	; (bb4 <ssd1963_init+0x8e4>)
     9ba:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9bc:	4b7e      	ldr	r3, [pc, #504]	; (bb8 <ssd1963_init+0x8e8>)
     9be:	2240      	movs	r2, #64	; 0x40
     9c0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     9c4:	4b78      	ldr	r3, [pc, #480]	; (ba8 <ssd1963_init+0x8d8>)
     9c6:	781b      	ldrb	r3, [r3, #0]
     9c8:	b123      	cbz	r3, 9d4 <ssd1963_init+0x704>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9ca:	4b7b      	ldr	r3, [pc, #492]	; (bb8 <ssd1963_init+0x8e8>)
     9cc:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     9ce:	2200      	movs	r2, #0
     9d0:	4b75      	ldr	r3, [pc, #468]	; (ba8 <ssd1963_init+0x8d8>)
     9d2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9d4:	2200      	movs	r2, #0
     9d6:	4975      	ldr	r1, [pc, #468]	; (bac <ssd1963_init+0x8dc>)
     9d8:	4875      	ldr	r0, [pc, #468]	; (bb0 <ssd1963_init+0x8e0>)
     9da:	4b76      	ldr	r3, [pc, #472]	; (bb4 <ssd1963_init+0x8e4>)
     9dc:	4798      	blx	r3
     9de:	4b76      	ldr	r3, [pc, #472]	; (bb8 <ssd1963_init+0x8e8>)
     9e0:	2240      	movs	r2, #64	; 0x40
     9e2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e4:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     9e6:	4b70      	ldr	r3, [pc, #448]	; (ba8 <ssd1963_init+0x8d8>)
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	b123      	cbz	r3, 9f6 <ssd1963_init+0x726>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9ec:	4b72      	ldr	r3, [pc, #456]	; (bb8 <ssd1963_init+0x8e8>)
     9ee:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     9f0:	2200      	movs	r2, #0
     9f2:	4b6d      	ldr	r3, [pc, #436]	; (ba8 <ssd1963_init+0x8d8>)
     9f4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     9f6:	2200      	movs	r2, #0
     9f8:	496c      	ldr	r1, [pc, #432]	; (bac <ssd1963_init+0x8dc>)
     9fa:	486d      	ldr	r0, [pc, #436]	; (bb0 <ssd1963_init+0x8e0>)
     9fc:	4b6d      	ldr	r3, [pc, #436]	; (bb4 <ssd1963_init+0x8e4>)
     9fe:	4798      	blx	r3
     a00:	4b6d      	ldr	r3, [pc, #436]	; (bb8 <ssd1963_init+0x8e8>)
     a02:	2240      	movs	r2, #64	; 0x40
     a04:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a06:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a08:	4b67      	ldr	r3, [pc, #412]	; (ba8 <ssd1963_init+0x8d8>)
     a0a:	781b      	ldrb	r3, [r3, #0]
     a0c:	b123      	cbz	r3, a18 <ssd1963_init+0x748>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a0e:	4b6a      	ldr	r3, [pc, #424]	; (bb8 <ssd1963_init+0x8e8>)
     a10:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a12:	2200      	movs	r2, #0
     a14:	4b64      	ldr	r3, [pc, #400]	; (ba8 <ssd1963_init+0x8d8>)
     a16:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a18:	2201      	movs	r2, #1
     a1a:	4964      	ldr	r1, [pc, #400]	; (bac <ssd1963_init+0x8dc>)
     a1c:	4864      	ldr	r0, [pc, #400]	; (bb0 <ssd1963_init+0x8e0>)
     a1e:	4b65      	ldr	r3, [pc, #404]	; (bb4 <ssd1963_init+0x8e4>)
     a20:	4798      	blx	r3
     a22:	4b65      	ldr	r3, [pc, #404]	; (bb8 <ssd1963_init+0x8e8>)
     a24:	2240      	movs	r2, #64	; 0x40
     a26:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a28:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a2a:	4b5f      	ldr	r3, [pc, #380]	; (ba8 <ssd1963_init+0x8d8>)
     a2c:	781b      	ldrb	r3, [r3, #0]
     a2e:	b123      	cbz	r3, a3a <ssd1963_init+0x76a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a30:	4b61      	ldr	r3, [pc, #388]	; (bb8 <ssd1963_init+0x8e8>)
     a32:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a34:	2200      	movs	r2, #0
     a36:	4b5c      	ldr	r3, [pc, #368]	; (ba8 <ssd1963_init+0x8d8>)
     a38:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a3a:	22df      	movs	r2, #223	; 0xdf
     a3c:	495b      	ldr	r1, [pc, #364]	; (bac <ssd1963_init+0x8dc>)
     a3e:	485c      	ldr	r0, [pc, #368]	; (bb0 <ssd1963_init+0x8e0>)
     a40:	4b5c      	ldr	r3, [pc, #368]	; (bb4 <ssd1963_init+0x8e4>)
     a42:	4798      	blx	r3
     a44:	4b5c      	ldr	r3, [pc, #368]	; (bb8 <ssd1963_init+0x8e8>)
     a46:	2240      	movs	r2, #64	; 0x40
     a48:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a4a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     a4c:	4b56      	ldr	r3, [pc, #344]	; (ba8 <ssd1963_init+0x8d8>)
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	b923      	cbnz	r3, a5c <ssd1963_init+0x78c>
     a52:	4b59      	ldr	r3, [pc, #356]	; (bb8 <ssd1963_init+0x8e8>)
     a54:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     a56:	2201      	movs	r2, #1
     a58:	4b53      	ldr	r3, [pc, #332]	; (ba8 <ssd1963_init+0x8d8>)
     a5a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     a5c:	222b      	movs	r2, #43	; 0x2b
     a5e:	4953      	ldr	r1, [pc, #332]	; (bac <ssd1963_init+0x8dc>)
     a60:	4853      	ldr	r0, [pc, #332]	; (bb0 <ssd1963_init+0x8e0>)
     a62:	4b54      	ldr	r3, [pc, #336]	; (bb4 <ssd1963_init+0x8e4>)
     a64:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a66:	4b54      	ldr	r3, [pc, #336]	; (bb8 <ssd1963_init+0x8e8>)
     a68:	2240      	movs	r2, #64	; 0x40
     a6a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a6e:	4b4e      	ldr	r3, [pc, #312]	; (ba8 <ssd1963_init+0x8d8>)
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	b123      	cbz	r3, a7e <ssd1963_init+0x7ae>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a74:	4b50      	ldr	r3, [pc, #320]	; (bb8 <ssd1963_init+0x8e8>)
     a76:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a78:	2200      	movs	r2, #0
     a7a:	4b4b      	ldr	r3, [pc, #300]	; (ba8 <ssd1963_init+0x8d8>)
     a7c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     a7e:	2200      	movs	r2, #0
     a80:	494a      	ldr	r1, [pc, #296]	; (bac <ssd1963_init+0x8dc>)
     a82:	484b      	ldr	r0, [pc, #300]	; (bb0 <ssd1963_init+0x8e0>)
     a84:	4b4b      	ldr	r3, [pc, #300]	; (bb4 <ssd1963_init+0x8e4>)
     a86:	4798      	blx	r3
     a88:	4b4b      	ldr	r3, [pc, #300]	; (bb8 <ssd1963_init+0x8e8>)
     a8a:	2240      	movs	r2, #64	; 0x40
     a8c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a8e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     a90:	4b45      	ldr	r3, [pc, #276]	; (ba8 <ssd1963_init+0x8d8>)
     a92:	781b      	ldrb	r3, [r3, #0]
     a94:	b123      	cbz	r3, aa0 <ssd1963_init+0x7d0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a96:	4b48      	ldr	r3, [pc, #288]	; (bb8 <ssd1963_init+0x8e8>)
     a98:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     a9a:	2200      	movs	r2, #0
     a9c:	4b42      	ldr	r3, [pc, #264]	; (ba8 <ssd1963_init+0x8d8>)
     a9e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     aa0:	2200      	movs	r2, #0
     aa2:	4942      	ldr	r1, [pc, #264]	; (bac <ssd1963_init+0x8dc>)
     aa4:	4842      	ldr	r0, [pc, #264]	; (bb0 <ssd1963_init+0x8e0>)
     aa6:	4b43      	ldr	r3, [pc, #268]	; (bb4 <ssd1963_init+0x8e4>)
     aa8:	4798      	blx	r3
     aaa:	4b43      	ldr	r3, [pc, #268]	; (bb8 <ssd1963_init+0x8e8>)
     aac:	2240      	movs	r2, #64	; 0x40
     aae:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab0:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     ab2:	4b3d      	ldr	r3, [pc, #244]	; (ba8 <ssd1963_init+0x8d8>)
     ab4:	781b      	ldrb	r3, [r3, #0]
     ab6:	b123      	cbz	r3, ac2 <ssd1963_init+0x7f2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ab8:	4b3f      	ldr	r3, [pc, #252]	; (bb8 <ssd1963_init+0x8e8>)
     aba:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     abc:	2200      	movs	r2, #0
     abe:	4b3a      	ldr	r3, [pc, #232]	; (ba8 <ssd1963_init+0x8d8>)
     ac0:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     ac2:	2201      	movs	r2, #1
     ac4:	4939      	ldr	r1, [pc, #228]	; (bac <ssd1963_init+0x8dc>)
     ac6:	483a      	ldr	r0, [pc, #232]	; (bb0 <ssd1963_init+0x8e0>)
     ac8:	4b3a      	ldr	r3, [pc, #232]	; (bb4 <ssd1963_init+0x8e4>)
     aca:	4798      	blx	r3
     acc:	4b3a      	ldr	r3, [pc, #232]	; (bb8 <ssd1963_init+0x8e8>)
     ace:	2240      	movs	r2, #64	; 0x40
     ad0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ad2:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     ad4:	4b34      	ldr	r3, [pc, #208]	; (ba8 <ssd1963_init+0x8d8>)
     ad6:	781b      	ldrb	r3, [r3, #0]
     ad8:	b123      	cbz	r3, ae4 <ssd1963_init+0x814>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ada:	4b37      	ldr	r3, [pc, #220]	; (bb8 <ssd1963_init+0x8e8>)
     adc:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     ade:	2200      	movs	r2, #0
     ae0:	4b31      	ldr	r3, [pc, #196]	; (ba8 <ssd1963_init+0x8d8>)
     ae2:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     ae4:	220f      	movs	r2, #15
     ae6:	4931      	ldr	r1, [pc, #196]	; (bac <ssd1963_init+0x8dc>)
     ae8:	4831      	ldr	r0, [pc, #196]	; (bb0 <ssd1963_init+0x8e0>)
     aea:	4b32      	ldr	r3, [pc, #200]	; (bb4 <ssd1963_init+0x8e4>)
     aec:	4798      	blx	r3
     aee:	4b32      	ldr	r3, [pc, #200]	; (bb8 <ssd1963_init+0x8e8>)
     af0:	2240      	movs	r2, #64	; 0x40
     af2:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     af4:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     af6:	4b2c      	ldr	r3, [pc, #176]	; (ba8 <ssd1963_init+0x8d8>)
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	b923      	cbnz	r3, b06 <ssd1963_init+0x836>
     afc:	4b2e      	ldr	r3, [pc, #184]	; (bb8 <ssd1963_init+0x8e8>)
     afe:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     b00:	2201      	movs	r2, #1
     b02:	4b29      	ldr	r3, [pc, #164]	; (ba8 <ssd1963_init+0x8d8>)
     b04:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     b06:	2229      	movs	r2, #41	; 0x29
     b08:	4928      	ldr	r1, [pc, #160]	; (bac <ssd1963_init+0x8dc>)
     b0a:	4829      	ldr	r0, [pc, #164]	; (bb0 <ssd1963_init+0x8e0>)
     b0c:	4b29      	ldr	r3, [pc, #164]	; (bb4 <ssd1963_init+0x8e4>)
     b0e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b10:	4b29      	ldr	r3, [pc, #164]	; (bb8 <ssd1963_init+0x8e8>)
     b12:	2240      	movs	r2, #64	; 0x40
     b14:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b16:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     b18:	4b23      	ldr	r3, [pc, #140]	; (ba8 <ssd1963_init+0x8d8>)
     b1a:	781b      	ldrb	r3, [r3, #0]
     b1c:	b923      	cbnz	r3, b28 <ssd1963_init+0x858>
     b1e:	4b26      	ldr	r3, [pc, #152]	; (bb8 <ssd1963_init+0x8e8>)
     b20:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     b22:	2201      	movs	r2, #1
     b24:	4b20      	ldr	r3, [pc, #128]	; (ba8 <ssd1963_init+0x8d8>)
     b26:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     b28:	22be      	movs	r2, #190	; 0xbe
     b2a:	4920      	ldr	r1, [pc, #128]	; (bac <ssd1963_init+0x8dc>)
     b2c:	4820      	ldr	r0, [pc, #128]	; (bb0 <ssd1963_init+0x8e0>)
     b2e:	4b21      	ldr	r3, [pc, #132]	; (bb4 <ssd1963_init+0x8e4>)
     b30:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b32:	4b21      	ldr	r3, [pc, #132]	; (bb8 <ssd1963_init+0x8e8>)
     b34:	2240      	movs	r2, #64	; 0x40
     b36:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b38:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b3a:	4b1b      	ldr	r3, [pc, #108]	; (ba8 <ssd1963_init+0x8d8>)
     b3c:	781b      	ldrb	r3, [r3, #0]
     b3e:	b123      	cbz	r3, b4a <ssd1963_init+0x87a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b40:	4b1d      	ldr	r3, [pc, #116]	; (bb8 <ssd1963_init+0x8e8>)
     b42:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b44:	2200      	movs	r2, #0
     b46:	4b18      	ldr	r3, [pc, #96]	; (ba8 <ssd1963_init+0x8d8>)
     b48:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b4a:	2206      	movs	r2, #6
     b4c:	4917      	ldr	r1, [pc, #92]	; (bac <ssd1963_init+0x8dc>)
     b4e:	4818      	ldr	r0, [pc, #96]	; (bb0 <ssd1963_init+0x8e0>)
     b50:	4b18      	ldr	r3, [pc, #96]	; (bb4 <ssd1963_init+0x8e4>)
     b52:	4798      	blx	r3
     b54:	4b18      	ldr	r3, [pc, #96]	; (bb8 <ssd1963_init+0x8e8>)
     b56:	2240      	movs	r2, #64	; 0x40
     b58:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b5a:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b5c:	4b12      	ldr	r3, [pc, #72]	; (ba8 <ssd1963_init+0x8d8>)
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	b123      	cbz	r3, b6c <ssd1963_init+0x89c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b62:	4b15      	ldr	r3, [pc, #84]	; (bb8 <ssd1963_init+0x8e8>)
     b64:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b66:	2200      	movs	r2, #0
     b68:	4b0f      	ldr	r3, [pc, #60]	; (ba8 <ssd1963_init+0x8d8>)
     b6a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b6c:	22ff      	movs	r2, #255	; 0xff
     b6e:	490f      	ldr	r1, [pc, #60]	; (bac <ssd1963_init+0x8dc>)
     b70:	480f      	ldr	r0, [pc, #60]	; (bb0 <ssd1963_init+0x8e0>)
     b72:	4b10      	ldr	r3, [pc, #64]	; (bb4 <ssd1963_init+0x8e4>)
     b74:	4798      	blx	r3
     b76:	4b10      	ldr	r3, [pc, #64]	; (bb8 <ssd1963_init+0x8e8>)
     b78:	2240      	movs	r2, #64	; 0x40
     b7a:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b7c:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     b7e:	4b0a      	ldr	r3, [pc, #40]	; (ba8 <ssd1963_init+0x8d8>)
     b80:	781b      	ldrb	r3, [r3, #0]
     b82:	b123      	cbz	r3, b8e <ssd1963_init+0x8be>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b84:	4b0c      	ldr	r3, [pc, #48]	; (bb8 <ssd1963_init+0x8e8>)
     b86:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     b88:	2200      	movs	r2, #0
     b8a:	4b07      	ldr	r3, [pc, #28]	; (ba8 <ssd1963_init+0x8d8>)
     b8c:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     b8e:	2201      	movs	r2, #1
     b90:	4906      	ldr	r1, [pc, #24]	; (bac <ssd1963_init+0x8dc>)
     b92:	4807      	ldr	r0, [pc, #28]	; (bb0 <ssd1963_init+0x8e0>)
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <ssd1963_init+0x8e4>)
     b96:	4798      	blx	r3
     b98:	4b07      	ldr	r3, [pc, #28]	; (bb8 <ssd1963_init+0x8e8>)
     b9a:	2240      	movs	r2, #64	; 0x40
     b9c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b9e:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     ba0:	4b01      	ldr	r3, [pc, #4]	; (ba8 <ssd1963_init+0x8d8>)
     ba2:	781b      	ldrb	r3, [r3, #0]
     ba4:	b17b      	cbz	r3, bc6 <ssd1963_init+0x8f6>
     ba6:	e009      	b.n	bbc <ssd1963_init+0x8ec>
     ba8:	20000000 	.word	0x20000000
     bac:	1c03c3f7 	.word	0x1c03c3f7
     bb0:	41008080 	.word	0x41008080
     bb4:	00000fbd 	.word	0x00000fbd
     bb8:	41008000 	.word	0x41008000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bbc:	4b18      	ldr	r3, [pc, #96]	; (c20 <ssd1963_init+0x950>)
     bbe:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     bc0:	2200      	movs	r2, #0
     bc2:	4b18      	ldr	r3, [pc, #96]	; (c24 <ssd1963_init+0x954>)
     bc4:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     bc6:	22ff      	movs	r2, #255	; 0xff
     bc8:	4917      	ldr	r1, [pc, #92]	; (c28 <ssd1963_init+0x958>)
     bca:	4818      	ldr	r0, [pc, #96]	; (c2c <ssd1963_init+0x95c>)
     bcc:	4b18      	ldr	r3, [pc, #96]	; (c30 <ssd1963_init+0x960>)
     bce:	4798      	blx	r3
     bd0:	4b13      	ldr	r3, [pc, #76]	; (c20 <ssd1963_init+0x950>)
     bd2:	2240      	movs	r2, #64	; 0x40
     bd4:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bd6:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     bd8:	4b12      	ldr	r3, [pc, #72]	; (c24 <ssd1963_init+0x954>)
     bda:	781b      	ldrb	r3, [r3, #0]
     bdc:	b123      	cbz	r3, be8 <ssd1963_init+0x918>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bde:	4b10      	ldr	r3, [pc, #64]	; (c20 <ssd1963_init+0x950>)
     be0:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     be2:	2200      	movs	r2, #0
     be4:	4b0f      	ldr	r3, [pc, #60]	; (c24 <ssd1963_init+0x954>)
     be6:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     be8:	2200      	movs	r2, #0
     bea:	490f      	ldr	r1, [pc, #60]	; (c28 <ssd1963_init+0x958>)
     bec:	480f      	ldr	r0, [pc, #60]	; (c2c <ssd1963_init+0x95c>)
     bee:	4b10      	ldr	r3, [pc, #64]	; (c30 <ssd1963_init+0x960>)
     bf0:	4798      	blx	r3
     bf2:	4b0b      	ldr	r3, [pc, #44]	; (c20 <ssd1963_init+0x950>)
     bf4:	2240      	movs	r2, #64	; 0x40
     bf6:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bf8:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     bfa:	4b0a      	ldr	r3, [pc, #40]	; (c24 <ssd1963_init+0x954>)
     bfc:	781b      	ldrb	r3, [r3, #0]
     bfe:	b123      	cbz	r3, c0a <ssd1963_init+0x93a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c00:	4b07      	ldr	r3, [pc, #28]	; (c20 <ssd1963_init+0x950>)
     c02:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     c04:	2200      	movs	r2, #0
     c06:	4b07      	ldr	r3, [pc, #28]	; (c24 <ssd1963_init+0x954>)
     c08:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     c0a:	2201      	movs	r2, #1
     c0c:	4906      	ldr	r1, [pc, #24]	; (c28 <ssd1963_init+0x958>)
     c0e:	4807      	ldr	r0, [pc, #28]	; (c2c <ssd1963_init+0x95c>)
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <ssd1963_init+0x960>)
     c12:	4798      	blx	r3
     c14:	4b02      	ldr	r3, [pc, #8]	; (c20 <ssd1963_init+0x950>)
     c16:	2240      	movs	r2, #64	; 0x40
     c18:	619a      	str	r2, [r3, #24]
     c1a:	619a      	str	r2, [r3, #24]
     c1c:	bd70      	pop	{r4, r5, r6, pc}
     c1e:	bf00      	nop
     c20:	41008000 	.word	0x41008000
     c24:	20000000 	.word	0x20000000
     c28:	1c03c3f7 	.word	0x1c03c3f7
     c2c:	41008080 	.word	0x41008080
     c30:	00000fbd 	.word	0x00000fbd

00000c34 <ssd1963_flush>:
{
     c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(area->x2 < 0) return;
     c38:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
     c3c:	2b00      	cmp	r3, #0
     c3e:	db0f      	blt.n	c60 <ssd1963_flush+0x2c>
     c40:	4681      	mov	r9, r0
     c42:	468a      	mov	sl, r1
     c44:	4615      	mov	r5, r2
    if(area->y2 < 0) return;
     c46:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
     c4a:	2b00      	cmp	r3, #0
     c4c:	db08      	blt.n	c60 <ssd1963_flush+0x2c>
    if(area->x1 > SSD1963_HOR_RES - 1) return;
     c4e:	f9b1 4000 	ldrsh.w	r4, [r1]
     c52:	4b93      	ldr	r3, [pc, #588]	; (ea0 <ssd1963_flush+0x26c>)
     c54:	4798      	blx	r3
     c56:	4b93      	ldr	r3, [pc, #588]	; (ea4 <ssd1963_flush+0x270>)
     c58:	4798      	blx	r3
     c5a:	3801      	subs	r0, #1
     c5c:	4284      	cmp	r4, r0
     c5e:	dd01      	ble.n	c64 <ssd1963_flush+0x30>
     c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(area->y1 > SSD1963_VER_RES - 1) return;
     c64:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     c68:	4b8d      	ldr	r3, [pc, #564]	; (ea0 <ssd1963_flush+0x26c>)
     c6a:	4798      	blx	r3
     c6c:	4b8e      	ldr	r3, [pc, #568]	; (ea8 <ssd1963_flush+0x274>)
     c6e:	4798      	blx	r3
     c70:	3801      	subs	r0, #1
     c72:	4284      	cmp	r4, r0
     c74:	dcf4      	bgt.n	c60 <ssd1963_flush+0x2c>
    int32_t act_x1 = area->x1 < 0 ? 0 : area->x1;
     c76:	f9ba 6000 	ldrsh.w	r6, [sl]
     c7a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    int32_t act_y1 = area->y1 < 0 ? 0 : area->y1;
     c7e:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
     c82:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
     c86:	46a3      	mov	fp, r4
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     c88:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
     c8c:	4b84      	ldr	r3, [pc, #528]	; (ea0 <ssd1963_flush+0x26c>)
     c8e:	4798      	blx	r3
     c90:	4b84      	ldr	r3, [pc, #528]	; (ea4 <ssd1963_flush+0x270>)
     c92:	4798      	blx	r3
     c94:	3801      	subs	r0, #1
     c96:	4287      	cmp	r7, r0
     c98:	f300 8116 	bgt.w	ec8 <ssd1963_flush+0x294>
     c9c:	f9ba 7004 	ldrsh.w	r7, [sl, #4]
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     ca0:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
     ca4:	4b7e      	ldr	r3, [pc, #504]	; (ea0 <ssd1963_flush+0x26c>)
     ca6:	4798      	blx	r3
     ca8:	4b7f      	ldr	r3, [pc, #508]	; (ea8 <ssd1963_flush+0x274>)
     caa:	4798      	blx	r3
     cac:	3801      	subs	r0, #1
     cae:	4580      	cmp	r8, r0
     cb0:	f300 8110 	bgt.w	ed4 <ssd1963_flush+0x2a0>
     cb4:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cb8:	2240      	movs	r2, #64	; 0x40
     cba:	4b7c      	ldr	r3, [pc, #496]	; (eac <ssd1963_flush+0x278>)
     cbc:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     cbe:	4b7c      	ldr	r3, [pc, #496]	; (eb0 <ssd1963_flush+0x27c>)
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	b923      	cbnz	r3, cce <ssd1963_flush+0x9a>
     cc4:	4b79      	ldr	r3, [pc, #484]	; (eac <ssd1963_flush+0x278>)
     cc6:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     cc8:	2201      	movs	r2, #1
     cca:	4b79      	ldr	r3, [pc, #484]	; (eb0 <ssd1963_flush+0x27c>)
     ccc:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     cce:	222a      	movs	r2, #42	; 0x2a
     cd0:	4978      	ldr	r1, [pc, #480]	; (eb4 <ssd1963_flush+0x280>)
     cd2:	4879      	ldr	r0, [pc, #484]	; (eb8 <ssd1963_flush+0x284>)
     cd4:	4b79      	ldr	r3, [pc, #484]	; (ebc <ssd1963_flush+0x288>)
     cd6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cd8:	4b74      	ldr	r3, [pc, #464]	; (eac <ssd1963_flush+0x278>)
     cda:	2140      	movs	r1, #64	; 0x40
     cdc:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x1 >> 8);
     cde:	1232      	asrs	r2, r6, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ce0:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     ce2:	4b73      	ldr	r3, [pc, #460]	; (eb0 <ssd1963_flush+0x27c>)
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	b123      	cbz	r3, cf2 <ssd1963_flush+0xbe>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ce8:	4b70      	ldr	r3, [pc, #448]	; (eac <ssd1963_flush+0x278>)
     cea:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     cec:	2100      	movs	r1, #0
     cee:	4b70      	ldr	r3, [pc, #448]	; (eb0 <ssd1963_flush+0x27c>)
     cf0:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     cf2:	b2d2      	uxtb	r2, r2
     cf4:	496f      	ldr	r1, [pc, #444]	; (eb4 <ssd1963_flush+0x280>)
     cf6:	4870      	ldr	r0, [pc, #448]	; (eb8 <ssd1963_flush+0x284>)
     cf8:	4b70      	ldr	r3, [pc, #448]	; (ebc <ssd1963_flush+0x288>)
     cfa:	4798      	blx	r3
     cfc:	4b6b      	ldr	r3, [pc, #428]	; (eac <ssd1963_flush+0x278>)
     cfe:	2140      	movs	r1, #64	; 0x40
     d00:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_x1);
     d02:	b2f2      	uxtb	r2, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d04:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d06:	4b6a      	ldr	r3, [pc, #424]	; (eb0 <ssd1963_flush+0x27c>)
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	b123      	cbz	r3, d16 <ssd1963_flush+0xe2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d0c:	4b67      	ldr	r3, [pc, #412]	; (eac <ssd1963_flush+0x278>)
     d0e:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d10:	2100      	movs	r1, #0
     d12:	4b67      	ldr	r3, [pc, #412]	; (eb0 <ssd1963_flush+0x27c>)
     d14:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d16:	4967      	ldr	r1, [pc, #412]	; (eb4 <ssd1963_flush+0x280>)
     d18:	4867      	ldr	r0, [pc, #412]	; (eb8 <ssd1963_flush+0x284>)
     d1a:	4b68      	ldr	r3, [pc, #416]	; (ebc <ssd1963_flush+0x288>)
     d1c:	4798      	blx	r3
     d1e:	4b63      	ldr	r3, [pc, #396]	; (eac <ssd1963_flush+0x278>)
     d20:	2140      	movs	r1, #64	; 0x40
     d22:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_x2 >> 8);
     d24:	123a      	asrs	r2, r7, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d26:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d28:	4b61      	ldr	r3, [pc, #388]	; (eb0 <ssd1963_flush+0x27c>)
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	b123      	cbz	r3, d38 <ssd1963_flush+0x104>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d2e:	4b5f      	ldr	r3, [pc, #380]	; (eac <ssd1963_flush+0x278>)
     d30:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d32:	2100      	movs	r1, #0
     d34:	4b5e      	ldr	r3, [pc, #376]	; (eb0 <ssd1963_flush+0x27c>)
     d36:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d38:	b2d2      	uxtb	r2, r2
     d3a:	495e      	ldr	r1, [pc, #376]	; (eb4 <ssd1963_flush+0x280>)
     d3c:	485e      	ldr	r0, [pc, #376]	; (eb8 <ssd1963_flush+0x284>)
     d3e:	4b5f      	ldr	r3, [pc, #380]	; (ebc <ssd1963_flush+0x288>)
     d40:	4798      	blx	r3
     d42:	4b5a      	ldr	r3, [pc, #360]	; (eac <ssd1963_flush+0x278>)
     d44:	2240      	movs	r2, #64	; 0x40
     d46:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d48:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     d4a:	4b59      	ldr	r3, [pc, #356]	; (eb0 <ssd1963_flush+0x27c>)
     d4c:	781b      	ldrb	r3, [r3, #0]
     d4e:	b123      	cbz	r3, d5a <ssd1963_flush+0x126>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d50:	4b56      	ldr	r3, [pc, #344]	; (eac <ssd1963_flush+0x278>)
     d52:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     d54:	2200      	movs	r2, #0
     d56:	4b56      	ldr	r3, [pc, #344]	; (eb0 <ssd1963_flush+0x27c>)
     d58:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     d5a:	b2fa      	uxtb	r2, r7
     d5c:	4955      	ldr	r1, [pc, #340]	; (eb4 <ssd1963_flush+0x280>)
     d5e:	4856      	ldr	r0, [pc, #344]	; (eb8 <ssd1963_flush+0x284>)
     d60:	4b56      	ldr	r3, [pc, #344]	; (ebc <ssd1963_flush+0x288>)
     d62:	4798      	blx	r3
     d64:	4b51      	ldr	r3, [pc, #324]	; (eac <ssd1963_flush+0x278>)
     d66:	2240      	movs	r2, #64	; 0x40
     d68:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d6a:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     d6c:	4b50      	ldr	r3, [pc, #320]	; (eb0 <ssd1963_flush+0x27c>)
     d6e:	781b      	ldrb	r3, [r3, #0]
     d70:	b923      	cbnz	r3, d7c <ssd1963_flush+0x148>
     d72:	4b4e      	ldr	r3, [pc, #312]	; (eac <ssd1963_flush+0x278>)
     d74:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     d76:	2201      	movs	r2, #1
     d78:	4b4d      	ldr	r3, [pc, #308]	; (eb0 <ssd1963_flush+0x27c>)
     d7a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     d7c:	222b      	movs	r2, #43	; 0x2b
     d7e:	494d      	ldr	r1, [pc, #308]	; (eb4 <ssd1963_flush+0x280>)
     d80:	484d      	ldr	r0, [pc, #308]	; (eb8 <ssd1963_flush+0x284>)
     d82:	4b4e      	ldr	r3, [pc, #312]	; (ebc <ssd1963_flush+0x288>)
     d84:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d86:	4b49      	ldr	r3, [pc, #292]	; (eac <ssd1963_flush+0x278>)
     d88:	2140      	movs	r1, #64	; 0x40
     d8a:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y1 >> 8);
     d8c:	ea4f 222b 	mov.w	r2, fp, asr #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d90:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     d92:	4b47      	ldr	r3, [pc, #284]	; (eb0 <ssd1963_flush+0x27c>)
     d94:	781b      	ldrb	r3, [r3, #0]
     d96:	b123      	cbz	r3, da2 <ssd1963_flush+0x16e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d98:	4b44      	ldr	r3, [pc, #272]	; (eac <ssd1963_flush+0x278>)
     d9a:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     d9c:	2100      	movs	r1, #0
     d9e:	4b44      	ldr	r3, [pc, #272]	; (eb0 <ssd1963_flush+0x27c>)
     da0:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     da2:	b2d2      	uxtb	r2, r2
     da4:	4943      	ldr	r1, [pc, #268]	; (eb4 <ssd1963_flush+0x280>)
     da6:	4844      	ldr	r0, [pc, #272]	; (eb8 <ssd1963_flush+0x284>)
     da8:	4b44      	ldr	r3, [pc, #272]	; (ebc <ssd1963_flush+0x288>)
     daa:	4798      	blx	r3
     dac:	4b3f      	ldr	r3, [pc, #252]	; (eac <ssd1963_flush+0x278>)
     dae:	2140      	movs	r1, #64	; 0x40
     db0:	6199      	str	r1, [r3, #24]
    ssd1963_data(0x00FF & act_y1);
     db2:	b2e2      	uxtb	r2, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     db4:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     db6:	4b3e      	ldr	r3, [pc, #248]	; (eb0 <ssd1963_flush+0x27c>)
     db8:	781b      	ldrb	r3, [r3, #0]
     dba:	b123      	cbz	r3, dc6 <ssd1963_flush+0x192>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     dbc:	4b3b      	ldr	r3, [pc, #236]	; (eac <ssd1963_flush+0x278>)
     dbe:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     dc0:	2100      	movs	r1, #0
     dc2:	4b3b      	ldr	r3, [pc, #236]	; (eb0 <ssd1963_flush+0x27c>)
     dc4:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dc6:	493b      	ldr	r1, [pc, #236]	; (eb4 <ssd1963_flush+0x280>)
     dc8:	483b      	ldr	r0, [pc, #236]	; (eb8 <ssd1963_flush+0x284>)
     dca:	4b3c      	ldr	r3, [pc, #240]	; (ebc <ssd1963_flush+0x288>)
     dcc:	4798      	blx	r3
     dce:	4b37      	ldr	r3, [pc, #220]	; (eac <ssd1963_flush+0x278>)
     dd0:	2140      	movs	r1, #64	; 0x40
     dd2:	6199      	str	r1, [r3, #24]
    ssd1963_data(act_y2 >> 8);
     dd4:	ea4f 2228 	mov.w	r2, r8, asr #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dd8:	6159      	str	r1, [r3, #20]
    if(cmd_mode != false) {
     dda:	4b35      	ldr	r3, [pc, #212]	; (eb0 <ssd1963_flush+0x27c>)
     ddc:	781b      	ldrb	r3, [r3, #0]
     dde:	b123      	cbz	r3, dea <ssd1963_flush+0x1b6>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     de0:	4b32      	ldr	r3, [pc, #200]	; (eac <ssd1963_flush+0x278>)
     de2:	6199      	str	r1, [r3, #24]
        cmd_mode = false;
     de4:	2100      	movs	r1, #0
     de6:	4b32      	ldr	r3, [pc, #200]	; (eb0 <ssd1963_flush+0x27c>)
     de8:	7019      	strb	r1, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     dea:	b2d2      	uxtb	r2, r2
     dec:	4931      	ldr	r1, [pc, #196]	; (eb4 <ssd1963_flush+0x280>)
     dee:	4832      	ldr	r0, [pc, #200]	; (eb8 <ssd1963_flush+0x284>)
     df0:	4b32      	ldr	r3, [pc, #200]	; (ebc <ssd1963_flush+0x288>)
     df2:	4798      	blx	r3
     df4:	4b2d      	ldr	r3, [pc, #180]	; (eac <ssd1963_flush+0x278>)
     df6:	2240      	movs	r2, #64	; 0x40
     df8:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     dfa:	615a      	str	r2, [r3, #20]
    if(cmd_mode != false) {
     dfc:	4b2c      	ldr	r3, [pc, #176]	; (eb0 <ssd1963_flush+0x27c>)
     dfe:	781b      	ldrb	r3, [r3, #0]
     e00:	b123      	cbz	r3, e0c <ssd1963_flush+0x1d8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e02:	4b2a      	ldr	r3, [pc, #168]	; (eac <ssd1963_flush+0x278>)
     e04:	619a      	str	r2, [r3, #24]
        cmd_mode = false;
     e06:	2200      	movs	r2, #0
     e08:	4b29      	ldr	r3, [pc, #164]	; (eb0 <ssd1963_flush+0x27c>)
     e0a:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(data);
     e0c:	fa5f f288 	uxtb.w	r2, r8
     e10:	4928      	ldr	r1, [pc, #160]	; (eb4 <ssd1963_flush+0x280>)
     e12:	4829      	ldr	r0, [pc, #164]	; (eb8 <ssd1963_flush+0x284>)
     e14:	4b29      	ldr	r3, [pc, #164]	; (ebc <ssd1963_flush+0x288>)
     e16:	4798      	blx	r3
     e18:	4b24      	ldr	r3, [pc, #144]	; (eac <ssd1963_flush+0x278>)
     e1a:	2240      	movs	r2, #64	; 0x40
     e1c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e1e:	615a      	str	r2, [r3, #20]
    if(cmd_mode == false) {
     e20:	4b23      	ldr	r3, [pc, #140]	; (eb0 <ssd1963_flush+0x27c>)
     e22:	781b      	ldrb	r3, [r3, #0]
     e24:	b923      	cbnz	r3, e30 <ssd1963_flush+0x1fc>
     e26:	4b21      	ldr	r3, [pc, #132]	; (eac <ssd1963_flush+0x278>)
     e28:	615a      	str	r2, [r3, #20]
        cmd_mode = true;
     e2a:	2201      	movs	r2, #1
     e2c:	4b20      	ldr	r3, [pc, #128]	; (eb0 <ssd1963_flush+0x27c>)
     e2e:	701a      	strb	r2, [r3, #0]
    LV_DRV_DISP_PAR_WR_WORD(cmd);
     e30:	222c      	movs	r2, #44	; 0x2c
     e32:	4920      	ldr	r1, [pc, #128]	; (eb4 <ssd1963_flush+0x280>)
     e34:	4820      	ldr	r0, [pc, #128]	; (eb8 <ssd1963_flush+0x284>)
     e36:	4b21      	ldr	r3, [pc, #132]	; (ebc <ssd1963_flush+0x288>)
     e38:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e3a:	2240      	movs	r2, #64	; 0x40
     e3c:	4b1b      	ldr	r3, [pc, #108]	; (eac <ssd1963_flush+0x278>)
     e3e:	619a      	str	r2, [r3, #24]
    uint16_t full_w = area->x2 - area->x1 + 1;
     e40:	f8ba 3004 	ldrh.w	r3, [sl, #4]
     e44:	3301      	adds	r3, #1
     e46:	f8ba 2000 	ldrh.w	r2, [sl]
     e4a:	1a9b      	subs	r3, r3, r2
     e4c:	b29b      	uxth	r3, r3
    if(cmd_mode != false) {
     e4e:	4a18      	ldr	r2, [pc, #96]	; (eb0 <ssd1963_flush+0x27c>)
     e50:	7812      	ldrb	r2, [r2, #0]
     e52:	b12a      	cbz	r2, e60 <ssd1963_flush+0x22c>
     e54:	2140      	movs	r1, #64	; 0x40
     e56:	4a15      	ldr	r2, [pc, #84]	; (eac <ssd1963_flush+0x278>)
     e58:	6191      	str	r1, [r2, #24]
        cmd_mode = false;
     e5a:	2100      	movs	r1, #0
     e5c:	4a14      	ldr	r2, [pc, #80]	; (eb0 <ssd1963_flush+0x27c>)
     e5e:	7011      	strb	r1, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e60:	2140      	movs	r1, #64	; 0x40
     e62:	4a12      	ldr	r2, [pc, #72]	; (eac <ssd1963_flush+0x278>)
     e64:	6151      	str	r1, [r2, #20]
    uint16_t act_w = act_x2 - act_x1 + 1;
     e66:	f1c6 0601 	rsb	r6, r6, #1
     e6a:	443e      	add	r6, r7
     e6c:	b2b6      	uxth	r6, r6
    for(i = act_y1; i <= act_y2; i++) {
     e6e:	45d8      	cmp	r8, fp
     e70:	db0e      	blt.n	e90 <ssd1963_flush+0x25c>
        color_p += full_w;
     e72:	005f      	lsls	r7, r3, #1
        LV_DRV_DISP_PAR_WR_ARRAY((uint16_t *)color_p, act_w);
     e74:	f8df b03c 	ldr.w	fp, [pc, #60]	; eb4 <ssd1963_flush+0x280>
     e78:	f8df a048 	ldr.w	sl, [pc, #72]	; ec4 <ssd1963_flush+0x290>
     e7c:	4633      	mov	r3, r6
     e7e:	462a      	mov	r2, r5
     e80:	4659      	mov	r1, fp
     e82:	480d      	ldr	r0, [pc, #52]	; (eb8 <ssd1963_flush+0x284>)
     e84:	47d0      	blx	sl
        color_p += full_w;
     e86:	443d      	add	r5, r7
     e88:	3401      	adds	r4, #1
     e8a:	b224      	sxth	r4, r4
    for(i = act_y1; i <= act_y2; i++) {
     e8c:	45a0      	cmp	r8, r4
     e8e:	daf5      	bge.n	e7c <ssd1963_flush+0x248>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     e90:	2240      	movs	r2, #64	; 0x40
     e92:	4b06      	ldr	r3, [pc, #24]	; (eac <ssd1963_flush+0x278>)
     e94:	619a      	str	r2, [r3, #24]
    lv_disp_flush_ready(disp_drv);
     e96:	4648      	mov	r0, r9
     e98:	4b09      	ldr	r3, [pc, #36]	; (ec0 <ssd1963_flush+0x28c>)
     e9a:	4798      	blx	r3
     e9c:	e6e0      	b.n	c60 <ssd1963_flush+0x2c>
     e9e:	bf00      	nop
     ea0:	00011489 	.word	0x00011489
     ea4:	00011495 	.word	0x00011495
     ea8:	000114bd 	.word	0x000114bd
     eac:	41008000 	.word	0x41008000
     eb0:	20000000 	.word	0x20000000
     eb4:	1c03c3f7 	.word	0x1c03c3f7
     eb8:	41008080 	.word	0x41008080
     ebc:	00000fbd 	.word	0x00000fbd
     ec0:	00011555 	.word	0x00011555
     ec4:	00000fe9 	.word	0x00000fe9
    int32_t act_x2 = area->x2 > SSD1963_HOR_RES - 1 ? SSD1963_HOR_RES - 1 : area->x2;
     ec8:	4b06      	ldr	r3, [pc, #24]	; (ee4 <ssd1963_flush+0x2b0>)
     eca:	4798      	blx	r3
     ecc:	4b06      	ldr	r3, [pc, #24]	; (ee8 <ssd1963_flush+0x2b4>)
     ece:	4798      	blx	r3
     ed0:	1e47      	subs	r7, r0, #1
     ed2:	e6e5      	b.n	ca0 <ssd1963_flush+0x6c>
    int32_t act_y2 = area->y2 > SSD1963_VER_RES - 1 ? SSD1963_VER_RES - 1 : area->y2;
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <ssd1963_flush+0x2b0>)
     ed6:	4798      	blx	r3
     ed8:	4b04      	ldr	r3, [pc, #16]	; (eec <ssd1963_flush+0x2b8>)
     eda:	4798      	blx	r3
     edc:	f100 38ff 	add.w	r8, r0, #4294967295
     ee0:	e6ea      	b.n	cb8 <ssd1963_flush+0x84>
     ee2:	bf00      	nop
     ee4:	00011489 	.word	0x00011489
     ee8:	00011495 	.word	0x00011495
     eec:	000114bd 	.word	0x000114bd

00000ef0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     ef0:	e7fe      	b.n	ef0 <Dummy_Handler>
	...

00000ef4 <Reset_Handler>:
{
     ef4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     ef6:	4b1c      	ldr	r3, [pc, #112]	; (f68 <Reset_Handler+0x74>)
     ef8:	4a1c      	ldr	r2, [pc, #112]	; (f6c <Reset_Handler+0x78>)
     efa:	429a      	cmp	r2, r3
     efc:	d010      	beq.n	f20 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     efe:	4b1c      	ldr	r3, [pc, #112]	; (f70 <Reset_Handler+0x7c>)
     f00:	4a19      	ldr	r2, [pc, #100]	; (f68 <Reset_Handler+0x74>)
     f02:	429a      	cmp	r2, r3
     f04:	d20c      	bcs.n	f20 <Reset_Handler+0x2c>
     f06:	3b01      	subs	r3, #1
     f08:	1a9b      	subs	r3, r3, r2
     f0a:	f023 0303 	bic.w	r3, r3, #3
     f0e:	3304      	adds	r3, #4
     f10:	4413      	add	r3, r2
     f12:	4916      	ldr	r1, [pc, #88]	; (f6c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     f14:	f851 0b04 	ldr.w	r0, [r1], #4
     f18:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     f1c:	429a      	cmp	r2, r3
     f1e:	d1f9      	bne.n	f14 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     f20:	4b14      	ldr	r3, [pc, #80]	; (f74 <Reset_Handler+0x80>)
     f22:	4a15      	ldr	r2, [pc, #84]	; (f78 <Reset_Handler+0x84>)
     f24:	429a      	cmp	r2, r3
     f26:	d20a      	bcs.n	f3e <Reset_Handler+0x4a>
     f28:	3b01      	subs	r3, #1
     f2a:	1a9b      	subs	r3, r3, r2
     f2c:	f023 0303 	bic.w	r3, r3, #3
     f30:	3304      	adds	r3, #4
     f32:	4413      	add	r3, r2
                *pDest++ = 0;
     f34:	2100      	movs	r1, #0
     f36:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     f3a:	4293      	cmp	r3, r2
     f3c:	d1fb      	bne.n	f36 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f3e:	4b0f      	ldr	r3, [pc, #60]	; (f7c <Reset_Handler+0x88>)
     f40:	4a0f      	ldr	r2, [pc, #60]	; (f80 <Reset_Handler+0x8c>)
     f42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     f46:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     f48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     f4c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f58:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     f5c:	4b09      	ldr	r3, [pc, #36]	; (f84 <Reset_Handler+0x90>)
     f5e:	4798      	blx	r3
        main();
     f60:	4b09      	ldr	r3, [pc, #36]	; (f88 <Reset_Handler+0x94>)
     f62:	4798      	blx	r3
     f64:	e7fe      	b.n	f64 <Reset_Handler+0x70>
     f66:	bf00      	nop
     f68:	20000000 	.word	0x20000000
     f6c:	00020d3c 	.word	0x00020d3c
     f70:	20000074 	.word	0x20000074
     f74:	20006e20 	.word	0x20006e20
     f78:	20000078 	.word	0x20000078
     f7c:	e000ed00 	.word	0xe000ed00
     f80:	00000000 	.word	0x00000000
     f84:	0001aec5 	.word	0x0001aec5
     f88:	000028b5 	.word	0x000028b5

00000f8c <p_gpio_set_port_data>:
		p_gpio_parallel_write(group, mask, data);
	}
}

void p_gpio_set_port_data(PortGroup* const port, const uint32_t mask, const uint32_t data)
{
     f8c:	b410      	push	{r4}
	uint32_t dword = (uint32_t)(SSD1963_TFT_DATA_FIX(data));
     f8e:	0053      	lsls	r3, r2, #1
     f90:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
     f94:	0154      	lsls	r4, r2, #5
     f96:	f404 3470 	and.w	r4, r4, #245760	; 0x3c000
     f9a:	4323      	orrs	r3, r4
     f9c:	f002 0407 	and.w	r4, r2, #7
     fa0:	4323      	orrs	r3, r4
     fa2:	0352      	lsls	r2, r2, #13
     fa4:	f002 52e0 	and.w	r2, r2, #469762048	; 0x1c000000
     fa8:	431a      	orrs	r2, r3
	port->OUTSET.reg = (mask & dword);
     faa:	ea02 0301 	and.w	r3, r2, r1
     fae:	6183      	str	r3, [r0, #24]
	port->OUTCLR.reg = (mask & ~dword);
     fb0:	ea21 0102 	bic.w	r1, r1, r2
     fb4:	6141      	str	r1, [r0, #20]
}
     fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
     fba:	4770      	bx	lr

00000fbc <p_gpio_parallel_write>:
{
     fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fbe:	4c07      	ldr	r4, [pc, #28]	; (fdc <p_gpio_parallel_write+0x20>)
     fc0:	2540      	movs	r5, #64	; 0x40
     fc2:	6165      	str	r5, [r4, #20]
	p_gpio_set_port_data(group, mask, data);
     fc4:	4b06      	ldr	r3, [pc, #24]	; (fe0 <p_gpio_parallel_write+0x24>)
     fc6:	4798      	blx	r3
     fc8:	2780      	movs	r7, #128	; 0x80
     fca:	6167      	str	r7, [r4, #20]
	delay_us(1);
     fcc:	2001      	movs	r0, #1
     fce:	4e05      	ldr	r6, [pc, #20]	; (fe4 <p_gpio_parallel_write+0x28>)
     fd0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     fd2:	61a7      	str	r7, [r4, #24]
	delay_us(1);
     fd4:	2001      	movs	r0, #1
     fd6:	47b0      	blx	r6
     fd8:	61a5      	str	r5, [r4, #24]
     fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fdc:	41008000 	.word	0x41008000
     fe0:	00000f8d 	.word	0x00000f8d
     fe4:	00001515 	.word	0x00001515

00000fe8 <p_gpio_parallel_write_arr>:
	for(int ind = 0; ind < len; ind++)
     fe8:	b18b      	cbz	r3, 100e <p_gpio_parallel_write_arr+0x26>
{
     fea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fee:	461d      	mov	r5, r3
     ff0:	4690      	mov	r8, r2
     ff2:	460f      	mov	r7, r1
     ff4:	4606      	mov	r6, r0
	for(int ind = 0; ind < len; ind++)
     ff6:	2400      	movs	r4, #0
		p_gpio_parallel_write(group, mask, data);
     ff8:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1010 <p_gpio_parallel_write_arr+0x28>
     ffc:	4642      	mov	r2, r8
     ffe:	4639      	mov	r1, r7
    1000:	4630      	mov	r0, r6
    1002:	47c8      	blx	r9
	for(int ind = 0; ind < len; ind++)
    1004:	3401      	adds	r4, #1
    1006:	42ac      	cmp	r4, r5
    1008:	d1f8      	bne.n	ffc <p_gpio_parallel_write_arr+0x14>
    100a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    100e:	4770      	bx	lr
    1010:	00000fbd 	.word	0x00000fbd

00001014 <p_gpio_set_port_group_config>:

void p_gpio_set_port_group_config(enum gpio_port port, const uint32_t mask, p_port_config* config)
{
    1014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1018:	b083      	sub	sp, #12
    101a:	468b      	mov	fp, r1
    101c:	9200      	str	r2, [sp, #0]
	for(uint8_t i = 0; i < 32; i++)
	{
		if(mask & (1UL << i))
		{
			uint32_t _gpio_pin = GPIO(port, i);
    101e:	0140      	lsls	r0, r0, #5
    1020:	b2c3      	uxtb	r3, r0
    1022:	9301      	str	r3, [sp, #4]
    1024:	2600      	movs	r6, #0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1026:	f8df 9194 	ldr.w	r9, [pc, #404]	; 11bc <p_gpio_set_port_group_config+0x1a8>
    102a:	e065      	b.n	10f8 <p_gpio_set_port_group_config+0xe4>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    102c:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    1030:	605d      	str	r5, [r3, #4]
                                       const enum gpio_direction direction)
{
	switch (direction) {
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1032:	b2aa      	uxth	r2, r5
    1034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1038:	629a      	str	r2, [r3, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    103a:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    103c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    1040:	629a      	str	r2, [r3, #40]	; 0x28
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
	switch (pull_mode) {
    1042:	9b00      	ldr	r3, [sp, #0]
    1044:	781b      	ldrb	r3, [r3, #0]
    1046:	2b01      	cmp	r3, #1
    1048:	d077      	beq.n	113a <p_gpio_set_port_group_config+0x126>
    104a:	b323      	cbz	r3, 1096 <p_gpio_set_port_group_config+0x82>
    104c:	2b02      	cmp	r3, #2
    104e:	f000 8084 	beq.w	115a <p_gpio_set_port_group_config+0x146>
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
		break;

	default:
		ASSERT(false);
    1052:	2289      	movs	r2, #137	; 0x89
    1054:	4957      	ldr	r1, [pc, #348]	; (11b4 <p_gpio_set_port_group_config+0x1a0>)
    1056:	2000      	movs	r0, #0
    1058:	4b57      	ldr	r3, [pc, #348]	; (11b8 <p_gpio_set_port_group_config+0x1a4>)
    105a:	4798      	blx	r3
    105c:	e024      	b.n	10a8 <p_gpio_set_port_group_config+0x94>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    105e:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1062:	6055      	str	r5, [r2, #4]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    1064:	b2ab      	uxth	r3, r5
    1066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    106e:	6293      	str	r3, [r2, #40]	; 0x28
		                                | ((mask & 0xffff0000) >> 16));
    1070:	0c2b      	lsrs	r3, r5, #16
		hri_port_write_WRCONFIG_reg(PORT,
    1072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    1076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    107a:	6293      	str	r3, [r2, #40]	; 0x28
    107c:	e7e1      	b.n	1042 <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    107e:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    1082:	609d      	str	r5, [r3, #8]
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
    1084:	b2aa      	uxth	r2, r5
    1086:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    108a:	629a      	str	r2, [r3, #40]	; 0x28
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
    108c:	0c2a      	lsrs	r2, r5, #16
		hri_port_write_WRCONFIG_reg(
    108e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    1092:	629a      	str	r2, [r3, #40]	; 0x28
    1094:	e7d5      	b.n	1042 <p_gpio_set_port_group_config+0x2e>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1096:	eb09 13c7 	add.w	r3, r9, r7, lsl #7
    109a:	4443      	add	r3, r8
    109c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    10a0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    10a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			gpio_set_pin_direction(_gpio_pin, config->direction);
			gpio_set_pin_pull_mode(_gpio_pin, config->pull_mode);
			gpio_set_pin_function(_gpio_pin, config->function);
    10a8:	9b00      	ldr	r3, [sp, #0]
    10aa:	685a      	ldr	r2, [r3, #4]
/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
    10ac:	0964      	lsrs	r4, r4, #5
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    10ae:	f1b2 3fff 	cmp.w	r2, #4294967295
    10b2:	d062      	beq.n	117a <p_gpio_set_port_group_config+0x166>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    10b4:	b2e4      	uxtb	r4, r4
    10b6:	eb09 11c4 	add.w	r1, r9, r4, lsl #7
    10ba:	4441      	add	r1, r8
    10bc:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    10c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    10c4:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    10c8:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);

	} else {
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);

		if (pin & 1) {
    10cc:	f01a 0f01 	tst.w	sl, #1
    10d0:	d15e      	bne.n	1190 <p_gpio_set_port_group_config+0x17c>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    10d2:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    10d6:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    10da:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    10de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    10e2:	f002 020f 	and.w	r2, r2, #15
    10e6:	431a      	orrs	r2, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    10e8:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    10ec:	eb09 17c7 	add.w	r7, r9, r7, lsl #7
    10f0:	617d      	str	r5, [r7, #20]
    10f2:	3601      	adds	r6, #1
	for(uint8_t i = 0; i < 32; i++)
    10f4:	2e20      	cmp	r6, #32
    10f6:	d059      	beq.n	11ac <p_gpio_set_port_group_config+0x198>
    10f8:	b2f4      	uxtb	r4, r6
		if(mask & (1UL << i))
    10fa:	fa2b f306 	lsr.w	r3, fp, r6
    10fe:	f013 0f01 	tst.w	r3, #1
    1102:	d0f6      	beq.n	10f2 <p_gpio_set_port_group_config+0xde>
			uint32_t _gpio_pin = GPIO(port, i);
    1104:	f004 041f 	and.w	r4, r4, #31
    1108:	9b01      	ldr	r3, [sp, #4]
    110a:	441c      	add	r4, r3
			gpio_set_pin_direction(_gpio_pin, config->direction);
    110c:	fa5f fa84 	uxtb.w	sl, r4
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    1110:	ea4f 175a 	mov.w	r7, sl, lsr #5
    1114:	f00a 081f 	and.w	r8, sl, #31
    1118:	2501      	movs	r5, #1
    111a:	fa05 f508 	lsl.w	r5, r5, r8
	switch (direction) {
    111e:	9b00      	ldr	r3, [sp, #0]
    1120:	785b      	ldrb	r3, [r3, #1]
    1122:	2b01      	cmp	r3, #1
    1124:	d09b      	beq.n	105e <p_gpio_set_port_group_config+0x4a>
    1126:	2b00      	cmp	r3, #0
    1128:	d080      	beq.n	102c <p_gpio_set_port_group_config+0x18>
    112a:	2b02      	cmp	r3, #2
    112c:	d0a7      	beq.n	107e <p_gpio_set_port_group_config+0x6a>
		ASSERT(false);
    112e:	2246      	movs	r2, #70	; 0x46
    1130:	4920      	ldr	r1, [pc, #128]	; (11b4 <p_gpio_set_port_group_config+0x1a0>)
    1132:	2000      	movs	r0, #0
    1134:	4b20      	ldr	r3, [pc, #128]	; (11b8 <p_gpio_set_port_group_config+0x1a4>)
    1136:	4798      	blx	r3
    1138:	e783      	b.n	1042 <p_gpio_set_port_group_config+0x2e>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    113a:	2301      	movs	r3, #1
    113c:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1140:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1144:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1146:	eb02 0008 	add.w	r0, r2, r8
    114a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    114e:	f041 0104 	orr.w	r1, r1, #4
    1152:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1156:	6193      	str	r3, [r2, #24]
    1158:	e7a6      	b.n	10a8 <p_gpio_set_port_group_config+0x94>
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    115a:	2301      	movs	r3, #1
    115c:	fa03 f308 	lsl.w	r3, r3, r8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1160:	eb09 12c7 	add.w	r2, r9, r7, lsl #7
    1164:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1166:	eb02 0008 	add.w	r0, r2, r8
    116a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    116e:	f041 0104 	orr.w	r1, r1, #4
    1172:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1176:	6153      	str	r3, [r2, #20]
    1178:	e796      	b.n	10a8 <p_gpio_set_port_group_config+0x94>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    117a:	b2e4      	uxtb	r4, r4
    117c:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    1180:	44a0      	add	r8, r4
    1182:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    1186:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    118a:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
    118e:	e7ad      	b.n	10ec <p_gpio_set_port_group_config+0xd8>
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1190:	eb09 14c4 	add.w	r4, r9, r4, lsl #7
    1194:	eb04 0858 	add.w	r8, r4, r8, lsr #1
    1198:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    119c:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
    11a0:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    11a4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    11a6:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    11aa:	e79f      	b.n	10ec <p_gpio_set_port_group_config+0xd8>
			gpio_set_pin_level(_gpio_pin, 0);
		}
		
	}
}
    11ac:	b003      	add	sp, #12
    11ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b2:	bf00      	nop
    11b4:	0001af60 	.word	0x0001af60
    11b8:	00001a89 	.word	0x00001a89
    11bc:	41008000 	.word	0x41008000

000011c0 <p_gpio_init>:
{
    11c0:	b570      	push	{r4, r5, r6, lr}
    11c2:	b082      	sub	sp, #8
	memset(&data_config, 0, sizeof(data_config));
    11c4:	2300      	movs	r3, #0
    11c6:	9300      	str	r3, [sp, #0]
	data_config.direction = GPIO_DIRECTION_OUT;
    11c8:	2302      	movs	r3, #2
    11ca:	f88d 3001 	strb.w	r3, [sp, #1]
	data_config.pull_mode = GPIO_PULL_DOWN;
    11ce:	f88d 3000 	strb.w	r3, [sp]
	data_config.function = GPIO_PIN_FUNCTION_OFF;
    11d2:	f04f 33ff 	mov.w	r3, #4294967295
    11d6:	9301      	str	r3, [sp, #4]
	p_gpio_set_port_group_config(SSD1963_TFT_DATA_PORT, SSD1963_TFT_DATA_MASK, &data_config);
    11d8:	466a      	mov	r2, sp
    11da:	4943      	ldr	r1, [pc, #268]	; (12e8 <p_gpio_init+0x128>)
    11dc:	2001      	movs	r0, #1
    11de:	4b43      	ldr	r3, [pc, #268]	; (12ec <p_gpio_init+0x12c>)
    11e0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    11e2:	4b43      	ldr	r3, [pc, #268]	; (12f0 <p_gpio_init+0x130>)
    11e4:	2240      	movs	r2, #64	; 0x40
    11e6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    11e8:	4e42      	ldr	r6, [pc, #264]	; (12f4 <p_gpio_init+0x134>)
    11ea:	629e      	str	r6, [r3, #40]	; 0x28
    11ec:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    11f0:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    11f2:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    11f4:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
    11f8:	f040 0004 	orr.w	r0, r0, #4
    11fc:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1200:	615a      	str	r2, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1202:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1206:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    120a:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    120e:	2510      	movs	r5, #16
    1210:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1212:	4839      	ldr	r0, [pc, #228]	; (12f8 <p_gpio_init+0x138>)
    1214:	6298      	str	r0, [r3, #40]	; 0x28
    1216:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1218:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    121a:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
    121e:	f040 0004 	orr.w	r0, r0, #4
    1222:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1226:	615d      	str	r5, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1228:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    122c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1230:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1234:	2408      	movs	r4, #8
    1236:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1238:	4830      	ldr	r0, [pc, #192]	; (12fc <p_gpio_init+0x13c>)
    123a:	6298      	str	r0, [r3, #40]	; 0x28
    123c:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    123e:	605c      	str	r4, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1240:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
    1244:	f040 0004 	orr.w	r0, r0, #4
    1248:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    124c:	615c      	str	r4, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    124e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    1252:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1256:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    125a:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    125c:	629e      	str	r6, [r3, #40]	; 0x28
    125e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1260:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1262:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
    1266:	f040 0004 	orr.w	r0, r0, #4
    126a:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    126e:	615a      	str	r2, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1270:	f893 0046 	ldrb.w	r0, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1274:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1278:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    127c:	2080      	movs	r0, #128	; 0x80
    127e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1280:	3640      	adds	r6, #64	; 0x40
    1282:	629e      	str	r6, [r3, #40]	; 0x28
    1284:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1286:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1288:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
    128c:	f041 0104 	orr.w	r1, r1, #4
    1290:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1294:	6158      	str	r0, [r3, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1296:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    129a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    129e:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12a2:	f44f 7180 	mov.w	r1, #256	; 0x100
    12a6:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12aa:	f506 3600 	add.w	r6, r6, #131072	; 0x20000
    12ae:	3680      	adds	r6, #128	; 0x80
    12b0:	f8c3 61a8 	str.w	r6, [r3, #424]	; 0x1a8
    12b4:	4e12      	ldr	r6, [pc, #72]	; (1300 <p_gpio_init+0x140>)
    12b6:	f8c3 61a8 	str.w	r6, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12ba:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    12be:	f893 61c8 	ldrb.w	r6, [r3, #456]	; 0x1c8
    12c2:	f046 0604 	orr.w	r6, r6, #4
    12c6:	f883 61c8 	strb.w	r6, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    12ca:	f8c3 1194 	str.w	r1, [r3, #404]	; 0x194
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12ce:	f893 11c8 	ldrb.w	r1, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
    12d2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12d6:	f883 11c8 	strb.w	r1, [r3, #456]	; 0x1c8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    12da:	619a      	str	r2, [r3, #24]
    12dc:	619d      	str	r5, [r3, #24]
    12de:	619c      	str	r4, [r3, #24]
    12e0:	6198      	str	r0, [r3, #24]
}
    12e2:	b002      	add	sp, #8
    12e4:	bd70      	pop	{r4, r5, r6, pc}
    12e6:	bf00      	nop
    12e8:	1c03c3f7 	.word	0x1c03c3f7
    12ec:	00001015 	.word	0x00001015
    12f0:	41008000 	.word	0x41008000
    12f4:	40000040 	.word	0x40000040
    12f8:	40000010 	.word	0x40000010
    12fc:	40000008 	.word	0x40000008
    1300:	c0020000 	.word	0xc0020000

00001304 <p_i2c_init>:
#include "p_i2c.h"

struct i2c_m_sync_desc p_i2c_master;

void p_i2c_init(void)
{
    1304:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1306:	4b1f      	ldr	r3, [pc, #124]	; (1384 <p_i2c_init+0x80>)
    1308:	2240      	movs	r2, #64	; 0x40
    130a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    130e:	2243      	movs	r2, #67	; 0x43
    1310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM3_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    1314:	4a1c      	ldr	r2, [pc, #112]	; (1388 <p_i2c_init+0x84>)
    1316:	6993      	ldr	r3, [r2, #24]
    1318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    131c:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
	
	i2c_m_sync_init(&p_i2c_master, I2C_MASTER_SERCOM);
    131e:	491b      	ldr	r1, [pc, #108]	; (138c <p_i2c_init+0x88>)
    1320:	481b      	ldr	r0, [pc, #108]	; (1390 <p_i2c_init+0x8c>)
    1322:	4b1c      	ldr	r3, [pc, #112]	; (1394 <p_i2c_init+0x90>)
    1324:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1326:	4b1c      	ldr	r3, [pc, #112]	; (1398 <p_i2c_init+0x94>)
    1328:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    132c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1330:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1334:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    1338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    133c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1340:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1344:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1348:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    134c:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1350:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1354:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    1358:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    135c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1360:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1368:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    136c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1370:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1374:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1378:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    137c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    1380:	bd08      	pop	{r3, pc}
    1382:	bf00      	nop
    1384:	40001c00 	.word	0x40001c00
    1388:	40000800 	.word	0x40000800
    138c:	41014000 	.word	0x41014000
    1390:	20006c00 	.word	0x20006c00
    1394:	000015b5 	.word	0x000015b5
    1398:	41008000 	.word	0x41008000

0000139c <TIMER_0_task1_cb>:
static volatile uint64_t sys_time = 0;
/**
 * Example of using TIMER_0.
 */
static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
    139c:	b508      	push	{r3, lr}
	sys_time++;
    139e:	4906      	ldr	r1, [pc, #24]	; (13b8 <TIMER_0_task1_cb+0x1c>)
    13a0:	e9d1 2300 	ldrd	r2, r3, [r1]
    13a4:	3201      	adds	r2, #1
    13a6:	f143 0300 	adc.w	r3, r3, #0
    13aa:	e9c1 2300 	strd	r2, r3, [r1]
	lv_tick_inc(1);
    13ae:	2001      	movs	r0, #1
    13b0:	4b02      	ldr	r3, [pc, #8]	; (13bc <TIMER_0_task1_cb+0x20>)
    13b2:	4798      	blx	r3
    13b4:	bd08      	pop	{r3, pc}
    13b6:	bf00      	nop
    13b8:	20000098 	.word	0x20000098
    13bc:	000115ed 	.word	0x000115ed

000013c0 <p_tcc_init>:
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
}

void p_tcc_init(void)
{
    13c0:	b510      	push	{r4, lr}
	delay_init(SysTick);
    13c2:	4811      	ldr	r0, [pc, #68]	; (1408 <p_tcc_init+0x48>)
    13c4:	4b11      	ldr	r3, [pc, #68]	; (140c <p_tcc_init+0x4c>)
    13c6:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    13c8:	4a11      	ldr	r2, [pc, #68]	; (1410 <p_tcc_init+0x50>)
    13ca:	6953      	ldr	r3, [r2, #20]
    13cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    13d0:	6153      	str	r3, [r2, #20]
    13d2:	2240      	movs	r2, #64	; 0x40
    13d4:	4b0f      	ldr	r3, [pc, #60]	; (1414 <p_tcc_init+0x54>)
    13d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&p_tcc_inst, TC0, _tc_get_timer());
    13da:	4b0f      	ldr	r3, [pc, #60]	; (1418 <p_tcc_init+0x58>)
    13dc:	4798      	blx	r3
    13de:	4c0f      	ldr	r4, [pc, #60]	; (141c <p_tcc_init+0x5c>)
    13e0:	4602      	mov	r2, r0
    13e2:	490f      	ldr	r1, [pc, #60]	; (1420 <p_tcc_init+0x60>)
    13e4:	4620      	mov	r0, r4
    13e6:	4b0f      	ldr	r3, [pc, #60]	; (1424 <p_tcc_init+0x64>)
    13e8:	4798      	blx	r3
	
	TIMER_0_task1.interval = 1;
    13ea:	490f      	ldr	r1, [pc, #60]	; (1428 <p_tcc_init+0x68>)
    13ec:	2301      	movs	r3, #1
    13ee:	610b      	str	r3, [r1, #16]
	TIMER_0_task1.cb       = TIMER_0_task1_cb;
    13f0:	4a0e      	ldr	r2, [pc, #56]	; (142c <p_tcc_init+0x6c>)
    13f2:	614a      	str	r2, [r1, #20]
	TIMER_0_task1.mode     = TIMER_TASK_REPEAT;
    13f4:	760b      	strb	r3, [r1, #24]
	//TIMER_0_task2.interval = 200;
	//TIMER_0_task2.cb       = TIMER_0_task2_cb;
	//TIMER_0_task2.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&p_tcc_inst, &TIMER_0_task1);
    13f6:	3108      	adds	r1, #8
    13f8:	4620      	mov	r0, r4
    13fa:	4b0d      	ldr	r3, [pc, #52]	; (1430 <p_tcc_init+0x70>)
    13fc:	4798      	blx	r3
	//timer_add_task(&p_tcc_inst, &TIMER_0_task2);
	timer_start(&p_tcc_inst);
    13fe:	4620      	mov	r0, r4
    1400:	4b0c      	ldr	r3, [pc, #48]	; (1434 <p_tcc_init+0x74>)
    1402:	4798      	blx	r3
    1404:	bd10      	pop	{r4, pc}
    1406:	bf00      	nop
    1408:	e000e010 	.word	0xe000e010
    140c:	00001501 	.word	0x00001501
    1410:	40000800 	.word	0x40000800
    1414:	40001c00 	.word	0x40001c00
    1418:	0000284f 	.word	0x0000284f
    141c:	20006c20 	.word	0x20006c20
    1420:	40003800 	.word	0x40003800
    1424:	000016fd 	.word	0x000016fd
    1428:	20000098 	.word	0x20000098
    142c:	0000139d 	.word	0x0000139d
    1430:	00001775 	.word	0x00001775
    1434:	00001739 	.word	0x00001739

00001438 <p_usart_init>:
static uint8_t example_USART_0[12] = "Hello World!";

static uint8_t debug_buffer[DEBUG_MAX_BUFFER_SIZE];
static uint8_t debug_rx_buff[DEBUG_USART_EX_BUFF_SIZE];
void p_usart_init(void)
{
    1438:	b530      	push	{r4, r5, lr}
    143a:	b083      	sub	sp, #12
    143c:	4b1f      	ldr	r3, [pc, #124]	; (14bc <p_usart_init+0x84>)
    143e:	2240      	movs	r2, #64	; 0x40
    1440:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    1444:	2243      	movs	r2, #67	; 0x43
    1446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    144a:	4a1d      	ldr	r2, [pc, #116]	; (14c0 <p_usart_init+0x88>)
    144c:	6993      	ldr	r3, [r2, #24]
    144e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1452:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
	
	usart_async_init(&p_usart_debug_inst, USART_DEBUG_SERCOM, debug_rx_buff, DEBUG_USART_EX_BUFF_SIZE, (void*)NULL);
    1454:	4c1b      	ldr	r4, [pc, #108]	; (14c4 <p_usart_init+0x8c>)
    1456:	2300      	movs	r3, #0
    1458:	9300      	str	r3, [sp, #0]
    145a:	2310      	movs	r3, #16
    145c:	4a1a      	ldr	r2, [pc, #104]	; (14c8 <p_usart_init+0x90>)
    145e:	491b      	ldr	r1, [pc, #108]	; (14cc <p_usart_init+0x94>)
    1460:	4620      	mov	r0, r4
    1462:	4d1b      	ldr	r5, [pc, #108]	; (14d0 <p_usart_init+0x98>)
    1464:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1466:	4b1b      	ldr	r3, [pc, #108]	; (14d4 <p_usart_init+0x9c>)
    1468:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    146c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1470:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1474:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1478:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    147c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1480:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1484:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1488:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    148c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1490:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1494:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1498:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    149c:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    14a0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	
	// port init
	gpio_set_pin_function(USART_DEBUG_RX, USART_DEBUG_RX_MUX);
	gpio_set_pin_function(USART_DEBUG_TX, USART_DEBUG_TX_MUX);
	
	usart_async_enable(&p_usart_debug_inst);
    14a8:	4620      	mov	r0, r4
    14aa:	4b0b      	ldr	r3, [pc, #44]	; (14d8 <p_usart_init+0xa0>)
    14ac:	4798      	blx	r3
	
	io_write(&p_usart_debug_inst.io, example_USART_0, 12);
    14ae:	220c      	movs	r2, #12
    14b0:	490a      	ldr	r1, [pc, #40]	; (14dc <p_usart_init+0xa4>)
    14b2:	4620      	mov	r0, r4
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <p_usart_init+0xa8>)
    14b6:	4798      	blx	r3
	
	
}
    14b8:	b003      	add	sp, #12
    14ba:	bd30      	pop	{r4, r5, pc}
    14bc:	40001c00 	.word	0x40001c00
    14c0:	40000800 	.word	0x40000800
    14c4:	20006c3c 	.word	0x20006c3c
    14c8:	200000b4 	.word	0x200000b4
    14cc:	41012000 	.word	0x41012000
    14d0:	000019cd 	.word	0x000019cd
    14d4:	41008000 	.word	0x41008000
    14d8:	00001a5d 	.word	0x00001a5d
    14dc:	20000004 	.word	0x20000004
    14e0:	000015f5 	.word	0x000015f5

000014e4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    14e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    14ea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    14ec:	f3bf 8f5f 	dmb	sy
    14f0:	4770      	bx	lr

000014f2 <atomic_leave_critical>:
    14f2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    14f6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    14f8:	f383 8810 	msr	PRIMASK, r3
    14fc:	4770      	bx	lr
	...

00001500 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1500:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1502:	4b02      	ldr	r3, [pc, #8]	; (150c <delay_init+0xc>)
    1504:	6018      	str	r0, [r3, #0]
    1506:	4b02      	ldr	r3, [pc, #8]	; (1510 <delay_init+0x10>)
    1508:	4798      	blx	r3
    150a:	bd08      	pop	{r3, pc}
    150c:	200000c4 	.word	0x200000c4
    1510:	00001c3d 	.word	0x00001c3d

00001514 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1514:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1516:	4b04      	ldr	r3, [pc, #16]	; (1528 <delay_us+0x14>)
    1518:	681c      	ldr	r4, [r3, #0]
    151a:	4b04      	ldr	r3, [pc, #16]	; (152c <delay_us+0x18>)
    151c:	4798      	blx	r3
    151e:	4601      	mov	r1, r0
    1520:	4620      	mov	r0, r4
    1522:	4b03      	ldr	r3, [pc, #12]	; (1530 <delay_us+0x1c>)
    1524:	4798      	blx	r3
    1526:	bd10      	pop	{r4, pc}
    1528:	200000c4 	.word	0x200000c4
    152c:	00001c05 	.word	0x00001c05
    1530:	00001c41 	.word	0x00001c41

00001534 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1534:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1536:	4b04      	ldr	r3, [pc, #16]	; (1548 <delay_ms+0x14>)
    1538:	681c      	ldr	r4, [r3, #0]
    153a:	4b04      	ldr	r3, [pc, #16]	; (154c <delay_ms+0x18>)
    153c:	4798      	blx	r3
    153e:	4601      	mov	r1, r0
    1540:	4620      	mov	r0, r4
    1542:	4b03      	ldr	r3, [pc, #12]	; (1550 <delay_ms+0x1c>)
    1544:	4798      	blx	r3
    1546:	bd10      	pop	{r4, pc}
    1548:	200000c4 	.word	0x200000c4
    154c:	00001c1d 	.word	0x00001c1d
    1550:	00001c41 	.word	0x00001c41

00001554 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1554:	b510      	push	{r4, lr}
    1556:	b084      	sub	sp, #16
    1558:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    155a:	8903      	ldrh	r3, [r0, #8]
    155c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1560:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    1562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1566:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    156a:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    156c:	a901      	add	r1, sp, #4
    156e:	3814      	subs	r0, #20
    1570:	4b03      	ldr	r3, [pc, #12]	; (1580 <i2c_m_sync_write+0x2c>)
    1572:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
    1574:	2800      	cmp	r0, #0
    1576:	bf08      	it	eq
    1578:	4620      	moveq	r0, r4
    157a:	b004      	add	sp, #16
    157c:	bd10      	pop	{r4, pc}
    157e:	bf00      	nop
    1580:	000020b5 	.word	0x000020b5

00001584 <i2c_m_sync_read>:
{
    1584:	b510      	push	{r4, lr}
    1586:	b084      	sub	sp, #16
    1588:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    158a:	8903      	ldrh	r3, [r0, #8]
    158c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1590:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1592:	f248 0301 	movw	r3, #32769	; 0x8001
    1596:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    159a:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    159c:	a901      	add	r1, sp, #4
    159e:	3814      	subs	r0, #20
    15a0:	4b03      	ldr	r3, [pc, #12]	; (15b0 <i2c_m_sync_read+0x2c>)
    15a2:	4798      	blx	r3
}
    15a4:	2800      	cmp	r0, #0
    15a6:	bf08      	it	eq
    15a8:	4620      	moveq	r0, r4
    15aa:	b004      	add	sp, #16
    15ac:	bd10      	pop	{r4, pc}
    15ae:	bf00      	nop
    15b0:	000020b5 	.word	0x000020b5

000015b4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    15b4:	b538      	push	{r3, r4, r5, lr}
    15b6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    15b8:	4604      	mov	r4, r0
    15ba:	225e      	movs	r2, #94	; 0x5e
    15bc:	4908      	ldr	r1, [pc, #32]	; (15e0 <i2c_m_sync_init+0x2c>)
    15be:	3000      	adds	r0, #0
    15c0:	bf18      	it	ne
    15c2:	2001      	movne	r0, #1
    15c4:	4b07      	ldr	r3, [pc, #28]	; (15e4 <i2c_m_sync_init+0x30>)
    15c6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    15c8:	4629      	mov	r1, r5
    15ca:	4620      	mov	r0, r4
    15cc:	4b06      	ldr	r3, [pc, #24]	; (15e8 <i2c_m_sync_init+0x34>)
    15ce:	4798      	blx	r3
	if (init_status) {
    15d0:	4603      	mov	r3, r0
    15d2:	b918      	cbnz	r0, 15dc <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    15d4:	4a05      	ldr	r2, [pc, #20]	; (15ec <i2c_m_sync_init+0x38>)
    15d6:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    15d8:	4a05      	ldr	r2, [pc, #20]	; (15f0 <i2c_m_sync_init+0x3c>)
    15da:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
    15dc:	4618      	mov	r0, r3
    15de:	bd38      	pop	{r3, r4, r5, pc}
    15e0:	0001af7c 	.word	0x0001af7c
    15e4:	00001a89 	.word	0x00001a89
    15e8:	00002085 	.word	0x00002085
    15ec:	00001585 	.word	0x00001585
    15f0:	00001555 	.word	0x00001555

000015f4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    15f4:	b570      	push	{r4, r5, r6, lr}
    15f6:	460d      	mov	r5, r1
    15f8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    15fa:	4604      	mov	r4, r0
    15fc:	b160      	cbz	r0, 1618 <io_write+0x24>
    15fe:	1c08      	adds	r0, r1, #0
    1600:	bf18      	it	ne
    1602:	2001      	movne	r0, #1
    1604:	2234      	movs	r2, #52	; 0x34
    1606:	4905      	ldr	r1, [pc, #20]	; (161c <io_write+0x28>)
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <io_write+0x2c>)
    160a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    160c:	6823      	ldr	r3, [r4, #0]
    160e:	4632      	mov	r2, r6
    1610:	4629      	mov	r1, r5
    1612:	4620      	mov	r0, r4
    1614:	4798      	blx	r3
}
    1616:	bd70      	pop	{r4, r5, r6, pc}
    1618:	2000      	movs	r0, #0
    161a:	e7f3      	b.n	1604 <io_write+0x10>
    161c:	0001af98 	.word	0x0001af98
    1620:	00001a89 	.word	0x00001a89

00001624 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1626:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1628:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    162a:	b12f      	cbz	r7, 1638 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    162c:	688d      	ldr	r5, [r1, #8]
    162e:	463c      	mov	r4, r7
    1630:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1632:	f1c2 0e01 	rsb	lr, r2, #1
    1636:	e00b      	b.n	1650 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1638:	4b0e      	ldr	r3, [pc, #56]	; (1674 <timer_add_timer_task+0x50>)
    163a:	4798      	blx	r3
		return;
    163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    163e:	4473      	add	r3, lr
    1640:	68a0      	ldr	r0, [r4, #8]
    1642:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1644:	42ab      	cmp	r3, r5
    1646:	d20a      	bcs.n	165e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1648:	6823      	ldr	r3, [r4, #0]
    164a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    164c:	b153      	cbz	r3, 1664 <timer_add_timer_task+0x40>
    164e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1650:	6863      	ldr	r3, [r4, #4]
    1652:	4293      	cmp	r3, r2
    1654:	d8f3      	bhi.n	163e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1656:	68a0      	ldr	r0, [r4, #8]
    1658:	4403      	add	r3, r0
    165a:	1a9b      	subs	r3, r3, r2
    165c:	e7f2      	b.n	1644 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    165e:	42a7      	cmp	r7, r4
    1660:	d004      	beq.n	166c <timer_add_timer_task+0x48>
    1662:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1664:	4620      	mov	r0, r4
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <timer_add_timer_task+0x54>)
    1668:	4798      	blx	r3
    166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    166c:	4660      	mov	r0, ip
    166e:	4b01      	ldr	r3, [pc, #4]	; (1674 <timer_add_timer_task+0x50>)
    1670:	4798      	blx	r3
    1672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1674:	00001ab1 	.word	0x00001ab1
    1678:	00001add 	.word	0x00001add

0000167c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1680:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1682:	6907      	ldr	r7, [r0, #16]
    1684:	3701      	adds	r7, #1
    1686:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1688:	7e03      	ldrb	r3, [r0, #24]
    168a:	f013 0f01 	tst.w	r3, #1
    168e:	d113      	bne.n	16b8 <timer_process_counted+0x3c>
    1690:	7e03      	ldrb	r3, [r0, #24]
    1692:	f013 0f02 	tst.w	r3, #2
    1696:	d10f      	bne.n	16b8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1698:	b354      	cbz	r4, 16f0 <timer_process_counted+0x74>
    169a:	6863      	ldr	r3, [r4, #4]
    169c:	1afb      	subs	r3, r7, r3
    169e:	68a2      	ldr	r2, [r4, #8]
    16a0:	4293      	cmp	r3, r2
    16a2:	d307      	bcc.n	16b4 <timer_process_counted+0x38>
    16a4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    16a6:	f100 0814 	add.w	r8, r0, #20
    16aa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16f4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    16ae:	f8df a048 	ldr.w	sl, [pc, #72]	; 16f8 <timer_process_counted+0x7c>
    16b2:	e012      	b.n	16da <timer_process_counted+0x5e>
    16b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    16b8:	7e03      	ldrb	r3, [r0, #24]
    16ba:	f043 0302 	orr.w	r3, r3, #2
    16be:	7603      	strb	r3, [r0, #24]
		return;
    16c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16c4:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    16c6:	68e3      	ldr	r3, [r4, #12]
    16c8:	4620      	mov	r0, r4
    16ca:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    16cc:	b185      	cbz	r5, 16f0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    16ce:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    16d0:	686b      	ldr	r3, [r5, #4]
    16d2:	1afb      	subs	r3, r7, r3
    16d4:	68aa      	ldr	r2, [r5, #8]
    16d6:	4293      	cmp	r3, r2
    16d8:	d30a      	bcc.n	16f0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    16da:	4640      	mov	r0, r8
    16dc:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    16de:	7c23      	ldrb	r3, [r4, #16]
    16e0:	2b01      	cmp	r3, #1
    16e2:	d1ef      	bne.n	16c4 <timer_process_counted+0x48>
			tmp->time_label = time;
    16e4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    16e6:	463a      	mov	r2, r7
    16e8:	4621      	mov	r1, r4
    16ea:	4640      	mov	r0, r8
    16ec:	47d0      	blx	sl
    16ee:	e7e9      	b.n	16c4 <timer_process_counted+0x48>
    16f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16f4:	00001ae5 	.word	0x00001ae5
    16f8:	00001625 	.word	0x00001625

000016fc <timer_init>:
{
    16fc:	b538      	push	{r3, r4, r5, lr}
    16fe:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1700:	4604      	mov	r4, r0
    1702:	b178      	cbz	r0, 1724 <timer_init+0x28>
    1704:	1c08      	adds	r0, r1, #0
    1706:	bf18      	it	ne
    1708:	2001      	movne	r0, #1
    170a:	223b      	movs	r2, #59	; 0x3b
    170c:	4906      	ldr	r1, [pc, #24]	; (1728 <timer_init+0x2c>)
    170e:	4b07      	ldr	r3, [pc, #28]	; (172c <timer_init+0x30>)
    1710:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1712:	4629      	mov	r1, r5
    1714:	4620      	mov	r0, r4
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <timer_init+0x34>)
    1718:	4798      	blx	r3
	descr->time                           = 0;
    171a:	2000      	movs	r0, #0
    171c:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <timer_init+0x38>)
    1720:	6023      	str	r3, [r4, #0]
}
    1722:	bd38      	pop	{r3, r4, r5, pc}
    1724:	2000      	movs	r0, #0
    1726:	e7f0      	b.n	170a <timer_init+0xe>
    1728:	0001afac 	.word	0x0001afac
    172c:	00001a89 	.word	0x00001a89
    1730:	00002681 	.word	0x00002681
    1734:	0000167d 	.word	0x0000167d

00001738 <timer_start>:
{
    1738:	b510      	push	{r4, lr}
	ASSERT(descr);
    173a:	4604      	mov	r4, r0
    173c:	2253      	movs	r2, #83	; 0x53
    173e:	4909      	ldr	r1, [pc, #36]	; (1764 <timer_start+0x2c>)
    1740:	3000      	adds	r0, #0
    1742:	bf18      	it	ne
    1744:	2001      	movne	r0, #1
    1746:	4b08      	ldr	r3, [pc, #32]	; (1768 <timer_start+0x30>)
    1748:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    174a:	4620      	mov	r0, r4
    174c:	4b07      	ldr	r3, [pc, #28]	; (176c <timer_start+0x34>)
    174e:	4798      	blx	r3
    1750:	b920      	cbnz	r0, 175c <timer_start+0x24>
	_timer_start(&descr->device);
    1752:	4620      	mov	r0, r4
    1754:	4b06      	ldr	r3, [pc, #24]	; (1770 <timer_start+0x38>)
    1756:	4798      	blx	r3
	return ERR_NONE;
    1758:	2000      	movs	r0, #0
    175a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    175c:	f06f 0010 	mvn.w	r0, #16
}
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	0001afac 	.word	0x0001afac
    1768:	00001a89 	.word	0x00001a89
    176c:	0000283d 	.word	0x0000283d
    1770:	00002829 	.word	0x00002829

00001774 <timer_add_task>:
{
    1774:	b570      	push	{r4, r5, r6, lr}
    1776:	b082      	sub	sp, #8
    1778:	460d      	mov	r5, r1
	ASSERT(descr && task);
    177a:	4604      	mov	r4, r0
    177c:	b318      	cbz	r0, 17c6 <timer_add_task+0x52>
    177e:	1c08      	adds	r0, r1, #0
    1780:	bf18      	it	ne
    1782:	2001      	movne	r0, #1
    1784:	227a      	movs	r2, #122	; 0x7a
    1786:	491e      	ldr	r1, [pc, #120]	; (1800 <timer_add_task+0x8c>)
    1788:	4b1e      	ldr	r3, [pc, #120]	; (1804 <timer_add_task+0x90>)
    178a:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    178c:	7e23      	ldrb	r3, [r4, #24]
    178e:	f043 0301 	orr.w	r3, r3, #1
    1792:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    1794:	f104 0614 	add.w	r6, r4, #20
    1798:	4629      	mov	r1, r5
    179a:	4630      	mov	r0, r6
    179c:	4b1a      	ldr	r3, [pc, #104]	; (1808 <timer_add_task+0x94>)
    179e:	4798      	blx	r3
    17a0:	b998      	cbnz	r0, 17ca <timer_add_task+0x56>
	task->time_label = descr->time;
    17a2:	6923      	ldr	r3, [r4, #16]
    17a4:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    17a6:	6922      	ldr	r2, [r4, #16]
    17a8:	4629      	mov	r1, r5
    17aa:	4630      	mov	r0, r6
    17ac:	4b17      	ldr	r3, [pc, #92]	; (180c <timer_add_task+0x98>)
    17ae:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17b0:	7e23      	ldrb	r3, [r4, #24]
    17b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17b6:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    17b8:	7e23      	ldrb	r3, [r4, #24]
    17ba:	f013 0f02 	tst.w	r3, #2
    17be:	d110      	bne.n	17e2 <timer_add_task+0x6e>
	return ERR_NONE;
    17c0:	2000      	movs	r0, #0
}
    17c2:	b002      	add	sp, #8
    17c4:	bd70      	pop	{r4, r5, r6, pc}
    17c6:	2000      	movs	r0, #0
    17c8:	e7dc      	b.n	1784 <timer_add_task+0x10>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    17ca:	7e23      	ldrb	r3, [r4, #24]
    17cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    17d0:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    17d2:	227f      	movs	r2, #127	; 0x7f
    17d4:	490a      	ldr	r1, [pc, #40]	; (1800 <timer_add_task+0x8c>)
    17d6:	2000      	movs	r0, #0
    17d8:	4b0a      	ldr	r3, [pc, #40]	; (1804 <timer_add_task+0x90>)
    17da:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    17dc:	f06f 0011 	mvn.w	r0, #17
    17e0:	e7ef      	b.n	17c2 <timer_add_task+0x4e>
		CRITICAL_SECTION_ENTER()
    17e2:	a801      	add	r0, sp, #4
    17e4:	4b0a      	ldr	r3, [pc, #40]	; (1810 <timer_add_task+0x9c>)
    17e6:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    17e8:	7e23      	ldrb	r3, [r4, #24]
    17ea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    17ee:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    17f0:	4620      	mov	r0, r4
    17f2:	4b08      	ldr	r3, [pc, #32]	; (1814 <timer_add_task+0xa0>)
    17f4:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    17f6:	a801      	add	r0, sp, #4
    17f8:	4b07      	ldr	r3, [pc, #28]	; (1818 <timer_add_task+0xa4>)
    17fa:	4798      	blx	r3
	return ERR_NONE;
    17fc:	2000      	movs	r0, #0
    17fe:	e7e0      	b.n	17c2 <timer_add_task+0x4e>
    1800:	0001afac 	.word	0x0001afac
    1804:	00001a89 	.word	0x00001a89
    1808:	00001a8f 	.word	0x00001a8f
    180c:	00001625 	.word	0x00001625
    1810:	000014e5 	.word	0x000014e5
    1814:	00002855 	.word	0x00002855
    1818:	000014f3 	.word	0x000014f3

0000181c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    181c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    181e:	2300      	movs	r3, #0
    1820:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1822:	69c3      	ldr	r3, [r0, #28]
    1824:	b11b      	cbz	r3, 182e <usart_transmission_complete+0x12>
    1826:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    182a:	4610      	mov	r0, r2
    182c:	4798      	blx	r3
    182e:	bd08      	pop	{r3, pc}

00001830 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1830:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1832:	2300      	movs	r3, #0
    1834:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1836:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1838:	b11b      	cbz	r3, 1842 <usart_error+0x12>
    183a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    183e:	4610      	mov	r0, r2
    1840:	4798      	blx	r3
    1842:	bd08      	pop	{r3, pc}

00001844 <usart_fill_rx_buffer>:
{
    1844:	b538      	push	{r3, r4, r5, lr}
    1846:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1848:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    184c:	302c      	adds	r0, #44	; 0x2c
    184e:	4b03      	ldr	r3, [pc, #12]	; (185c <usart_fill_rx_buffer+0x18>)
    1850:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1852:	6a23      	ldr	r3, [r4, #32]
    1854:	b10b      	cbz	r3, 185a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1856:	4628      	mov	r0, r5
    1858:	4798      	blx	r3
    185a:	bd38      	pop	{r3, r4, r5, pc}
    185c:	00001b85 	.word	0x00001b85

00001860 <usart_async_write>:
{
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	460e      	mov	r6, r1
    1864:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1866:	4604      	mov	r4, r0
    1868:	b1e0      	cbz	r0, 18a4 <usart_async_write+0x44>
    186a:	b1e9      	cbz	r1, 18a8 <usart_async_write+0x48>
    186c:	1c10      	adds	r0, r2, #0
    186e:	bf18      	it	ne
    1870:	2001      	movne	r0, #1
    1872:	f240 123b 	movw	r2, #315	; 0x13b
    1876:	490f      	ldr	r1, [pc, #60]	; (18b4 <usart_async_write+0x54>)
    1878:	4b0f      	ldr	r3, [pc, #60]	; (18b8 <usart_async_write+0x58>)
    187a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    187c:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1880:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1884:	429a      	cmp	r2, r3
    1886:	d111      	bne.n	18ac <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1888:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    188a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    188e:	2300      	movs	r3, #0
    1890:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1894:	2301      	movs	r3, #1
    1896:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1898:	f104 0008 	add.w	r0, r4, #8
    189c:	4b07      	ldr	r3, [pc, #28]	; (18bc <usart_async_write+0x5c>)
    189e:	4798      	blx	r3
	return (int32_t)length;
    18a0:	4628      	mov	r0, r5
    18a2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    18a4:	2000      	movs	r0, #0
    18a6:	e7e4      	b.n	1872 <usart_async_write+0x12>
    18a8:	2000      	movs	r0, #0
    18aa:	e7e2      	b.n	1872 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    18ac:	f06f 001b 	mvn.w	r0, #27
}
    18b0:	bd70      	pop	{r4, r5, r6, pc}
    18b2:	bf00      	nop
    18b4:	0001afc4 	.word	0x0001afc4
    18b8:	00001a89 	.word	0x00001a89
    18bc:	00002073 	.word	0x00002073

000018c0 <usart_process_byte_sent>:
{
    18c0:	b510      	push	{r4, lr}
    18c2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    18c4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    18c6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    18ca:	429a      	cmp	r2, r3
    18cc:	d009      	beq.n	18e2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    18ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
    18d0:	1c59      	adds	r1, r3, #1
    18d2:	8781      	strh	r1, [r0, #60]	; 0x3c
    18d4:	5cd1      	ldrb	r1, [r2, r3]
    18d6:	4b04      	ldr	r3, [pc, #16]	; (18e8 <usart_process_byte_sent+0x28>)
    18d8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    18da:	4620      	mov	r0, r4
    18dc:	4b03      	ldr	r3, [pc, #12]	; (18ec <usart_process_byte_sent+0x2c>)
    18de:	4798      	blx	r3
    18e0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    18e2:	4b03      	ldr	r3, [pc, #12]	; (18f0 <usart_process_byte_sent+0x30>)
    18e4:	4798      	blx	r3
    18e6:	bd10      	pop	{r4, pc}
    18e8:	0000206d 	.word	0x0000206d
    18ec:	00002073 	.word	0x00002073
    18f0:	0000207b 	.word	0x0000207b

000018f4 <usart_async_read>:
{
    18f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18f8:	b082      	sub	sp, #8
    18fa:	460f      	mov	r7, r1
    18fc:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    18fe:	4606      	mov	r6, r0
    1900:	b1a0      	cbz	r0, 192c <usart_async_read+0x38>
    1902:	b199      	cbz	r1, 192c <usart_async_read+0x38>
    1904:	2a00      	cmp	r2, #0
    1906:	d12d      	bne.n	1964 <usart_async_read+0x70>
    1908:	f44f 72ac 	mov.w	r2, #344	; 0x158
    190c:	4929      	ldr	r1, [pc, #164]	; (19b4 <usart_async_read+0xc0>)
    190e:	2000      	movs	r0, #0
    1910:	4b29      	ldr	r3, [pc, #164]	; (19b8 <usart_async_read+0xc4>)
    1912:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1914:	a801      	add	r0, sp, #4
    1916:	4b29      	ldr	r3, [pc, #164]	; (19bc <usart_async_read+0xc8>)
    1918:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    191a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    191e:	4b28      	ldr	r3, [pc, #160]	; (19c0 <usart_async_read+0xcc>)
    1920:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1922:	a801      	add	r0, sp, #4
    1924:	4b27      	ldr	r3, [pc, #156]	; (19c4 <usart_async_read+0xd0>)
    1926:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1928:	2500      	movs	r5, #0
	return (int32_t)was_read;
    192a:	e03e      	b.n	19aa <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    192c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1930:	4920      	ldr	r1, [pc, #128]	; (19b4 <usart_async_read+0xc0>)
    1932:	2000      	movs	r0, #0
    1934:	4b20      	ldr	r3, [pc, #128]	; (19b8 <usart_async_read+0xc4>)
    1936:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1938:	a801      	add	r0, sp, #4
    193a:	4b20      	ldr	r3, [pc, #128]	; (19bc <usart_async_read+0xc8>)
    193c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    193e:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1942:	4650      	mov	r0, sl
    1944:	4b1e      	ldr	r3, [pc, #120]	; (19c0 <usart_async_read+0xcc>)
    1946:	4798      	blx	r3
    1948:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    194a:	a801      	add	r0, sp, #4
    194c:	4b1d      	ldr	r3, [pc, #116]	; (19c4 <usart_async_read+0xd0>)
    194e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1950:	f1b9 0f00 	cmp.w	r9, #0
    1954:	d004      	beq.n	1960 <usart_async_read+0x6c>
    1956:	f1b8 0f00 	cmp.w	r8, #0
    195a:	d119      	bne.n	1990 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    195c:	2500      	movs	r5, #0
    195e:	e024      	b.n	19aa <usart_async_read+0xb6>
    1960:	2500      	movs	r5, #0
    1962:	e022      	b.n	19aa <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1964:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1968:	4912      	ldr	r1, [pc, #72]	; (19b4 <usart_async_read+0xc0>)
    196a:	2001      	movs	r0, #1
    196c:	4b12      	ldr	r3, [pc, #72]	; (19b8 <usart_async_read+0xc4>)
    196e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1970:	a801      	add	r0, sp, #4
    1972:	4b12      	ldr	r3, [pc, #72]	; (19bc <usart_async_read+0xc8>)
    1974:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1976:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    197a:	4650      	mov	r0, sl
    197c:	4b10      	ldr	r3, [pc, #64]	; (19c0 <usart_async_read+0xcc>)
    197e:	4798      	blx	r3
    1980:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1982:	a801      	add	r0, sp, #4
    1984:	4b0f      	ldr	r3, [pc, #60]	; (19c4 <usart_async_read+0xd0>)
    1986:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1988:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    198a:	f1b9 0f00 	cmp.w	r9, #0
    198e:	d00c      	beq.n	19aa <usart_async_read+0xb6>
{
    1990:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1992:	4e0d      	ldr	r6, [pc, #52]	; (19c8 <usart_async_read+0xd4>)
    1994:	1c60      	adds	r0, r4, #1
    1996:	b285      	uxth	r5, r0
    1998:	1939      	adds	r1, r7, r4
    199a:	4650      	mov	r0, sl
    199c:	47b0      	blx	r6
    199e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    19a0:	454c      	cmp	r4, r9
    19a2:	d202      	bcs.n	19aa <usart_async_read+0xb6>
    19a4:	b2a3      	uxth	r3, r4
    19a6:	4598      	cmp	r8, r3
    19a8:	d8f4      	bhi.n	1994 <usart_async_read+0xa0>
}
    19aa:	4628      	mov	r0, r5
    19ac:	b002      	add	sp, #8
    19ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19b2:	bf00      	nop
    19b4:	0001afc4 	.word	0x0001afc4
    19b8:	00001a89 	.word	0x00001a89
    19bc:	000014e5 	.word	0x000014e5
    19c0:	00001bc5 	.word	0x00001bc5
    19c4:	000014f3 	.word	0x000014f3
    19c8:	00001b41 	.word	0x00001b41

000019cc <usart_async_init>:
{
    19cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19ce:	460d      	mov	r5, r1
    19d0:	4616      	mov	r6, r2
    19d2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    19d4:	4604      	mov	r4, r0
    19d6:	b320      	cbz	r0, 1a22 <usart_async_init+0x56>
    19d8:	b329      	cbz	r1, 1a26 <usart_async_init+0x5a>
    19da:	b332      	cbz	r2, 1a2a <usart_async_init+0x5e>
    19dc:	1c18      	adds	r0, r3, #0
    19de:	bf18      	it	ne
    19e0:	2001      	movne	r0, #1
    19e2:	223a      	movs	r2, #58	; 0x3a
    19e4:	4913      	ldr	r1, [pc, #76]	; (1a34 <usart_async_init+0x68>)
    19e6:	4b14      	ldr	r3, [pc, #80]	; (1a38 <usart_async_init+0x6c>)
    19e8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    19ea:	463a      	mov	r2, r7
    19ec:	4631      	mov	r1, r6
    19ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
    19f2:	4b12      	ldr	r3, [pc, #72]	; (1a3c <usart_async_init+0x70>)
    19f4:	4798      	blx	r3
    19f6:	b9d0      	cbnz	r0, 1a2e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    19f8:	4629      	mov	r1, r5
    19fa:	f104 0008 	add.w	r0, r4, #8
    19fe:	4b10      	ldr	r3, [pc, #64]	; (1a40 <usart_async_init+0x74>)
    1a00:	4798      	blx	r3
	if (init_status) {
    1a02:	4603      	mov	r3, r0
    1a04:	b958      	cbnz	r0, 1a1e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1a06:	4a0f      	ldr	r2, [pc, #60]	; (1a44 <usart_async_init+0x78>)
    1a08:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1a0a:	4a0f      	ldr	r2, [pc, #60]	; (1a48 <usart_async_init+0x7c>)
    1a0c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1a0e:	4a0f      	ldr	r2, [pc, #60]	; (1a4c <usart_async_init+0x80>)
    1a10:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1a12:	4a0f      	ldr	r2, [pc, #60]	; (1a50 <usart_async_init+0x84>)
    1a14:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1a16:	4a0f      	ldr	r2, [pc, #60]	; (1a54 <usart_async_init+0x88>)
    1a18:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1a1a:	4a0f      	ldr	r2, [pc, #60]	; (1a58 <usart_async_init+0x8c>)
    1a1c:	6162      	str	r2, [r4, #20]
}
    1a1e:	4618      	mov	r0, r3
    1a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1a22:	2000      	movs	r0, #0
    1a24:	e7dd      	b.n	19e2 <usart_async_init+0x16>
    1a26:	2000      	movs	r0, #0
    1a28:	e7db      	b.n	19e2 <usart_async_init+0x16>
    1a2a:	2000      	movs	r0, #0
    1a2c:	e7d9      	b.n	19e2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1a2e:	f06f 030c 	mvn.w	r3, #12
    1a32:	e7f4      	b.n	1a1e <usart_async_init+0x52>
    1a34:	0001afc4 	.word	0x0001afc4
    1a38:	00001a89 	.word	0x00001a89
    1a3c:	00001af1 	.word	0x00001af1
    1a40:	00001fd5 	.word	0x00001fd5
    1a44:	000018f5 	.word	0x000018f5
    1a48:	00001861 	.word	0x00001861
    1a4c:	000018c1 	.word	0x000018c1
    1a50:	00001845 	.word	0x00001845
    1a54:	0000181d 	.word	0x0000181d
    1a58:	00001831 	.word	0x00001831

00001a5c <usart_async_enable>:
{
    1a5c:	b510      	push	{r4, lr}
	ASSERT(descr);
    1a5e:	4604      	mov	r4, r0
    1a60:	2261      	movs	r2, #97	; 0x61
    1a62:	4906      	ldr	r1, [pc, #24]	; (1a7c <usart_async_enable+0x20>)
    1a64:	3000      	adds	r0, #0
    1a66:	bf18      	it	ne
    1a68:	2001      	movne	r0, #1
    1a6a:	4b05      	ldr	r3, [pc, #20]	; (1a80 <usart_async_enable+0x24>)
    1a6c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1a6e:	f104 0008 	add.w	r0, r4, #8
    1a72:	4b04      	ldr	r3, [pc, #16]	; (1a84 <usart_async_enable+0x28>)
    1a74:	4798      	blx	r3
}
    1a76:	2000      	movs	r0, #0
    1a78:	bd10      	pop	{r4, pc}
    1a7a:	bf00      	nop
    1a7c:	0001afc4 	.word	0x0001afc4
    1a80:	00001a89 	.word	0x00001a89
    1a84:	00002059 	.word	0x00002059

00001a88 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1a88:	b900      	cbnz	r0, 1a8c <assert+0x4>
		__asm("BKPT #0");
    1a8a:	be00      	bkpt	0x0000
    1a8c:	4770      	bx	lr

00001a8e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1a8e:	6803      	ldr	r3, [r0, #0]
    1a90:	b14b      	cbz	r3, 1aa6 <is_list_element+0x18>
		if (it == element) {
    1a92:	428b      	cmp	r3, r1
    1a94:	d009      	beq.n	1aaa <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	b11b      	cbz	r3, 1aa2 <is_list_element+0x14>
		if (it == element) {
    1a9a:	4299      	cmp	r1, r3
    1a9c:	d1fb      	bne.n	1a96 <is_list_element+0x8>
			return true;
    1a9e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1aa0:	4770      	bx	lr
	return false;
    1aa2:	2000      	movs	r0, #0
    1aa4:	4770      	bx	lr
    1aa6:	2000      	movs	r0, #0
    1aa8:	4770      	bx	lr
			return true;
    1aaa:	2001      	movs	r0, #1
    1aac:	4770      	bx	lr
	...

00001ab0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1ab0:	b538      	push	{r3, r4, r5, lr}
    1ab2:	4604      	mov	r4, r0
    1ab4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1ab6:	4b06      	ldr	r3, [pc, #24]	; (1ad0 <list_insert_as_head+0x20>)
    1ab8:	4798      	blx	r3
    1aba:	f080 0001 	eor.w	r0, r0, #1
    1abe:	2239      	movs	r2, #57	; 0x39
    1ac0:	4904      	ldr	r1, [pc, #16]	; (1ad4 <list_insert_as_head+0x24>)
    1ac2:	b2c0      	uxtb	r0, r0
    1ac4:	4b04      	ldr	r3, [pc, #16]	; (1ad8 <list_insert_as_head+0x28>)
    1ac6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1ac8:	6823      	ldr	r3, [r4, #0]
    1aca:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1acc:	6025      	str	r5, [r4, #0]
    1ace:	bd38      	pop	{r3, r4, r5, pc}
    1ad0:	00001a8f 	.word	0x00001a8f
    1ad4:	0001afe4 	.word	0x0001afe4
    1ad8:	00001a89 	.word	0x00001a89

00001adc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1adc:	6803      	ldr	r3, [r0, #0]
    1ade:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1ae0:	6001      	str	r1, [r0, #0]
    1ae2:	4770      	bx	lr

00001ae4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1ae4:	6803      	ldr	r3, [r0, #0]
    1ae6:	b10b      	cbz	r3, 1aec <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1ae8:	681a      	ldr	r2, [r3, #0]
    1aea:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1aec:	4618      	mov	r0, r3
    1aee:	4770      	bx	lr

00001af0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1af0:	b570      	push	{r4, r5, r6, lr}
    1af2:	460e      	mov	r6, r1
    1af4:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1af6:	4604      	mov	r4, r0
    1af8:	b178      	cbz	r0, 1b1a <ringbuffer_init+0x2a>
    1afa:	b181      	cbz	r1, 1b1e <ringbuffer_init+0x2e>
    1afc:	b1a2      	cbz	r2, 1b28 <ringbuffer_init+0x38>
    1afe:	2001      	movs	r0, #1
    1b00:	2228      	movs	r2, #40	; 0x28
    1b02:	490d      	ldr	r1, [pc, #52]	; (1b38 <ringbuffer_init+0x48>)
    1b04:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <ringbuffer_init+0x4c>)
    1b06:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1b08:	1e6b      	subs	r3, r5, #1
    1b0a:	421d      	tst	r5, r3
    1b0c:	d109      	bne.n	1b22 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1b0e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1b10:	2000      	movs	r0, #0
    1b12:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1b14:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1b16:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1b18:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1b1a:	2000      	movs	r0, #0
    1b1c:	e7f0      	b.n	1b00 <ringbuffer_init+0x10>
    1b1e:	2000      	movs	r0, #0
    1b20:	e7ee      	b.n	1b00 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1b22:	f06f 000c 	mvn.w	r0, #12
    1b26:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1b28:	2228      	movs	r2, #40	; 0x28
    1b2a:	4903      	ldr	r1, [pc, #12]	; (1b38 <ringbuffer_init+0x48>)
    1b2c:	2000      	movs	r0, #0
    1b2e:	4b03      	ldr	r3, [pc, #12]	; (1b3c <ringbuffer_init+0x4c>)
    1b30:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1b32:	1e6b      	subs	r3, r5, #1
    1b34:	e7eb      	b.n	1b0e <ringbuffer_init+0x1e>
    1b36:	bf00      	nop
    1b38:	0001b004 	.word	0x0001b004
    1b3c:	00001a89 	.word	0x00001a89

00001b40 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1b40:	b538      	push	{r3, r4, r5, lr}
    1b42:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1b44:	4604      	mov	r4, r0
    1b46:	b1a0      	cbz	r0, 1b72 <ringbuffer_get+0x32>
    1b48:	1c08      	adds	r0, r1, #0
    1b4a:	bf18      	it	ne
    1b4c:	2001      	movne	r0, #1
    1b4e:	2240      	movs	r2, #64	; 0x40
    1b50:	490a      	ldr	r1, [pc, #40]	; (1b7c <ringbuffer_get+0x3c>)
    1b52:	4b0b      	ldr	r3, [pc, #44]	; (1b80 <ringbuffer_get+0x40>)
    1b54:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1b56:	68a3      	ldr	r3, [r4, #8]
    1b58:	68e2      	ldr	r2, [r4, #12]
    1b5a:	429a      	cmp	r2, r3
    1b5c:	d00b      	beq.n	1b76 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1b5e:	6862      	ldr	r2, [r4, #4]
    1b60:	4013      	ands	r3, r2
    1b62:	6822      	ldr	r2, [r4, #0]
    1b64:	5cd3      	ldrb	r3, [r2, r3]
    1b66:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1b68:	68a3      	ldr	r3, [r4, #8]
    1b6a:	3301      	adds	r3, #1
    1b6c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1b6e:	2000      	movs	r0, #0
    1b70:	bd38      	pop	{r3, r4, r5, pc}
    1b72:	2000      	movs	r0, #0
    1b74:	e7eb      	b.n	1b4e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1b76:	f06f 0009 	mvn.w	r0, #9
}
    1b7a:	bd38      	pop	{r3, r4, r5, pc}
    1b7c:	0001b004 	.word	0x0001b004
    1b80:	00001a89 	.word	0x00001a89

00001b84 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1b84:	b538      	push	{r3, r4, r5, lr}
    1b86:	460d      	mov	r5, r1
	ASSERT(rb);
    1b88:	4604      	mov	r4, r0
    1b8a:	2251      	movs	r2, #81	; 0x51
    1b8c:	490b      	ldr	r1, [pc, #44]	; (1bbc <ringbuffer_put+0x38>)
    1b8e:	3000      	adds	r0, #0
    1b90:	bf18      	it	ne
    1b92:	2001      	movne	r0, #1
    1b94:	4b0a      	ldr	r3, [pc, #40]	; (1bc0 <ringbuffer_put+0x3c>)
    1b96:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1b98:	68e3      	ldr	r3, [r4, #12]
    1b9a:	6862      	ldr	r2, [r4, #4]
    1b9c:	4013      	ands	r3, r2
    1b9e:	6822      	ldr	r2, [r4, #0]
    1ba0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1ba2:	68e3      	ldr	r3, [r4, #12]
    1ba4:	6861      	ldr	r1, [r4, #4]
    1ba6:	68a2      	ldr	r2, [r4, #8]
    1ba8:	1a9a      	subs	r2, r3, r2
    1baa:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1bac:	bf84      	itt	hi
    1bae:	1a59      	subhi	r1, r3, r1
    1bb0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1bb2:	3301      	adds	r3, #1
    1bb4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1bb6:	2000      	movs	r0, #0
    1bb8:	bd38      	pop	{r3, r4, r5, pc}
    1bba:	bf00      	nop
    1bbc:	0001b004 	.word	0x0001b004
    1bc0:	00001a89 	.word	0x00001a89

00001bc4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1bc4:	b510      	push	{r4, lr}
	ASSERT(rb);
    1bc6:	4604      	mov	r4, r0
    1bc8:	2267      	movs	r2, #103	; 0x67
    1bca:	4905      	ldr	r1, [pc, #20]	; (1be0 <ringbuffer_num+0x1c>)
    1bcc:	3000      	adds	r0, #0
    1bce:	bf18      	it	ne
    1bd0:	2001      	movne	r0, #1
    1bd2:	4b04      	ldr	r3, [pc, #16]	; (1be4 <ringbuffer_num+0x20>)
    1bd4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1bd6:	68e0      	ldr	r0, [r4, #12]
    1bd8:	68a3      	ldr	r3, [r4, #8]
}
    1bda:	1ac0      	subs	r0, r0, r3
    1bdc:	bd10      	pop	{r4, pc}
    1bde:	bf00      	nop
    1be0:	0001b004 	.word	0x0001b004
    1be4:	00001a89 	.word	0x00001a89

00001be8 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be8:	0943      	lsrs	r3, r0, #5
    1bea:	f000 001f 	and.w	r0, r0, #31
    1bee:	2201      	movs	r2, #1
    1bf0:	fa02 f000 	lsl.w	r0, r2, r0
    1bf4:	3340      	adds	r3, #64	; 0x40
    1bf6:	4a02      	ldr	r2, [pc, #8]	; (1c00 <_irq_set+0x18>)
    1bf8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop
    1c00:	e000e100 	.word	0xe000e100

00001c04 <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) + 2) / 3;
    1c04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c08:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1c0c:	3002      	adds	r0, #2
    1c0e:	4b02      	ldr	r3, [pc, #8]	; (1c18 <_get_cycles_for_us+0x14>)
    1c10:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c14:	0840      	lsrs	r0, r0, #1
    1c16:	4770      	bx	lr
    1c18:	aaaaaaab 	.word	0xaaaaaaab

00001c1c <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
    1c1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    1c20:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    1c24:	3002      	adds	r0, #2
    1c26:	4b04      	ldr	r3, [pc, #16]	; (1c38 <_get_cycles_for_ms+0x1c>)
    1c28:	fba3 3000 	umull	r3, r0, r3, r0
    1c2c:	0840      	lsrs	r0, r0, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1c32:	fb03 f000 	mul.w	r0, r3, r0
    1c36:	4770      	bx	lr
    1c38:	aaaaaaab 	.word	0xaaaaaaab

00001c3c <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1c3c:	4770      	bx	lr
	...

00001c40 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    1c40:	3901      	subs	r1, #1
    1c42:	d8fd      	bhi.n	1c40 <_delay_cycles>
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop

00001c48 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1c48:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1c4a:	4a09      	ldr	r2, [pc, #36]	; (1c70 <_init_chip+0x28>)
    1c4c:	8813      	ldrh	r3, [r2, #0]
    1c4e:	b29b      	uxth	r3, r3
    1c50:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    1c54:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1c56:	4b07      	ldr	r3, [pc, #28]	; (1c74 <_init_chip+0x2c>)
    1c58:	4798      	blx	r3
	_oscctrl_init_sources();
    1c5a:	4b07      	ldr	r3, [pc, #28]	; (1c78 <_init_chip+0x30>)
    1c5c:	4798      	blx	r3
	_mclk_init();
    1c5e:	4b07      	ldr	r3, [pc, #28]	; (1c7c <_init_chip+0x34>)
    1c60:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1c62:	4b07      	ldr	r3, [pc, #28]	; (1c80 <_init_chip+0x38>)
    1c64:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1c66:	f640 70ff 	movw	r0, #4095	; 0xfff
    1c6a:	4b06      	ldr	r3, [pc, #24]	; (1c84 <_init_chip+0x3c>)
    1c6c:	4798      	blx	r3
    1c6e:	bd08      	pop	{r3, pc}
    1c70:	41004000 	.word	0x41004000
    1c74:	00001cb9 	.word	0x00001cb9
    1c78:	00001cd9 	.word	0x00001cd9
    1c7c:	00001cad 	.word	0x00001cad
    1c80:	00001cdd 	.word	0x00001cdd
    1c84:	00001c89 	.word	0x00001c89

00001c88 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1c88:	f010 0f01 	tst.w	r0, #1
    1c8c:	d008      	beq.n	1ca0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1c8e:	4a05      	ldr	r2, [pc, #20]	; (1ca4 <_gclk_init_generators_by_fref+0x1c>)
    1c90:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <_gclk_init_generators_by_fref+0x20>)
    1c92:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1c94:	4619      	mov	r1, r3
    1c96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    1c9a:	684b      	ldr	r3, [r1, #4]
    1c9c:	4213      	tst	r3, r2
    1c9e:	d1fc      	bne.n	1c9a <_gclk_init_generators_by_fref+0x12>
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop
    1ca4:	00010107 	.word	0x00010107
    1ca8:	40001c00 	.word	0x40001c00

00001cac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1cac:	2201      	movs	r2, #1
    1cae:	4b01      	ldr	r3, [pc, #4]	; (1cb4 <_mclk_init+0x8>)
    1cb0:	715a      	strb	r2, [r3, #5]
    1cb2:	4770      	bx	lr
    1cb4:	40000800 	.word	0x40000800

00001cb8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1cb8:	4b06      	ldr	r3, [pc, #24]	; (1cd4 <_osc32kctrl_init_sources+0x1c>)
    1cba:	f242 328e 	movw	r2, #9102	; 0x238e
    1cbe:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1cc0:	2200      	movs	r2, #0
    1cc2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1cc4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1cc6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1cc8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1ccc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1cce:	2201      	movs	r2, #1
    1cd0:	741a      	strb	r2, [r3, #16]
    1cd2:	4770      	bx	lr
    1cd4:	40001400 	.word	0x40001400

00001cd8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1cd8:	4770      	bx	lr
	...

00001cdc <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1cdc:	4a0e      	ldr	r2, [pc, #56]	; (1d18 <_oscctrl_init_referenced_generators+0x3c>)
    1cde:	4b0f      	ldr	r3, [pc, #60]	; (1d1c <_oscctrl_init_referenced_generators+0x40>)
    1ce0:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1ce2:	461a      	mov	r2, r3
    1ce4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1ce6:	f013 0f06 	tst.w	r3, #6
    1cea:	d1fb      	bne.n	1ce4 <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1cec:	4b0b      	ldr	r3, [pc, #44]	; (1d1c <_oscctrl_init_referenced_generators+0x40>)
    1cee:	f44f 6202 	mov.w	r2, #2080	; 0x820
    1cf2:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1cf4:	2202      	movs	r2, #2
    1cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1cfa:	461a      	mov	r2, r3
    1cfc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1cfe:	f013 0f02 	tst.w	r3, #2
    1d02:	d1fb      	bne.n	1cfc <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1d04:	4b05      	ldr	r3, [pc, #20]	; (1d1c <_oscctrl_init_referenced_generators+0x40>)
    1d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1d08:	f012 0f01 	tst.w	r2, #1
    1d0c:	d103      	bne.n	1d16 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1d10:	f012 0f02 	tst.w	r2, #2
    1d14:	d0f7      	beq.n	1d06 <_oscctrl_init_referenced_generators+0x2a>
    1d16:	4770      	bx	lr
    1d18:	00010e4d 	.word	0x00010e4d
    1d1c:	40001000 	.word	0x40001000

00001d20 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d20:	b500      	push	{lr}
    1d22:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d24:	4b0d      	ldr	r3, [pc, #52]	; (1d5c <RAMECC_Handler+0x3c>)
    1d26:	789b      	ldrb	r3, [r3, #2]
    1d28:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d2a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d2c:	9b01      	ldr	r3, [sp, #4]
    1d2e:	f013 0f02 	tst.w	r3, #2
    1d32:	d006      	beq.n	1d42 <RAMECC_Handler+0x22>
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <RAMECC_Handler+0x40>)
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	b11b      	cbz	r3, 1d42 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d3a:	4a08      	ldr	r2, [pc, #32]	; (1d5c <RAMECC_Handler+0x3c>)
    1d3c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d3e:	4798      	blx	r3
    1d40:	e009      	b.n	1d56 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1d42:	9b01      	ldr	r3, [sp, #4]
    1d44:	f013 0f01 	tst.w	r3, #1
    1d48:	d005      	beq.n	1d56 <RAMECC_Handler+0x36>
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <RAMECC_Handler+0x40>)
    1d4c:	685b      	ldr	r3, [r3, #4]
    1d4e:	b113      	cbz	r3, 1d56 <RAMECC_Handler+0x36>
    1d50:	4a02      	ldr	r2, [pc, #8]	; (1d5c <RAMECC_Handler+0x3c>)
    1d52:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d54:	4798      	blx	r3
	} else {
		return;
	}
}
    1d56:	b003      	add	sp, #12
    1d58:	f85d fb04 	ldr.w	pc, [sp], #4
    1d5c:	41020000 	.word	0x41020000
    1d60:	20006c8c 	.word	0x20006c8c

00001d64 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d64:	b470      	push	{r4, r5, r6}
    1d66:	b089      	sub	sp, #36	; 0x24
    1d68:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d6a:	466c      	mov	r4, sp
    1d6c:	4d0d      	ldr	r5, [pc, #52]	; (1da4 <_sercom_get_hardware_index+0x40>)
    1d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d7a:	9b00      	ldr	r3, [sp, #0]
    1d7c:	42b3      	cmp	r3, r6
    1d7e:	d00d      	beq.n	1d9c <_sercom_get_hardware_index+0x38>
    1d80:	4631      	mov	r1, r6
    1d82:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d84:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1d86:	f853 2b04 	ldr.w	r2, [r3], #4
    1d8a:	428a      	cmp	r2, r1
    1d8c:	d007      	beq.n	1d9e <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d8e:	3001      	adds	r0, #1
    1d90:	2808      	cmp	r0, #8
    1d92:	d1f8      	bne.n	1d86 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1d94:	2000      	movs	r0, #0
}
    1d96:	b009      	add	sp, #36	; 0x24
    1d98:	bc70      	pop	{r4, r5, r6}
    1d9a:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d9c:	2000      	movs	r0, #0
			return i;
    1d9e:	b2c0      	uxtb	r0, r0
    1da0:	e7f9      	b.n	1d96 <_sercom_get_hardware_index+0x32>
    1da2:	bf00      	nop
    1da4:	0001b028 	.word	0x0001b028

00001da8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    1da8:	b510      	push	{r4, lr}
	void *hw = device->hw;
    1daa:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1dac:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1dae:	f013 0f01 	tst.w	r3, #1
    1db2:	d003      	beq.n	1dbc <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1db4:	7da3      	ldrb	r3, [r4, #22]
    1db6:	f013 0f01 	tst.w	r3, #1
    1dba:	d112      	bne.n	1de2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1dbc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    1dbe:	f013 0f02 	tst.w	r3, #2
    1dc2:	d003      	beq.n	1dcc <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    1dc4:	7da3      	ldrb	r3, [r4, #22]
    1dc6:	f013 0f02 	tst.w	r3, #2
    1dca:	d10f      	bne.n	1dec <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1dcc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1dce:	f013 0f04 	tst.w	r3, #4
    1dd2:	d015      	beq.n	1e00 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1dd4:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    1dd6:	f003 0337 	and.w	r3, r3, #55	; 0x37
    1dda:	b163      	cbz	r3, 1df6 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1ddc:	23ff      	movs	r3, #255	; 0xff
    1dde:	8363      	strh	r3, [r4, #26]
    1de0:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1de2:	2301      	movs	r3, #1
    1de4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    1de6:	6803      	ldr	r3, [r0, #0]
    1de8:	4798      	blx	r3
    1dea:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1dec:	2302      	movs	r3, #2
    1dee:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1df0:	6883      	ldr	r3, [r0, #8]
    1df2:	4798      	blx	r3
    1df4:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    1df6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1df8:	6843      	ldr	r3, [r0, #4]
    1dfa:	b2c9      	uxtb	r1, r1
    1dfc:	4798      	blx	r3
    1dfe:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1e00:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1e02:	09db      	lsrs	r3, r3, #7
    1e04:	d100      	bne.n	1e08 <_sercom_usart_interrupt_handler+0x60>
    1e06:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1e08:	2380      	movs	r3, #128	; 0x80
    1e0a:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1e0c:	68c3      	ldr	r3, [r0, #12]
    1e0e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1e10:	8b63      	ldrh	r3, [r4, #26]
    1e12:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1e14:	8363      	strh	r3, [r4, #26]
    1e16:	e7f6      	b.n	1e06 <_sercom_usart_interrupt_handler+0x5e>

00001e18 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1e18:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1e1a:	4b03      	ldr	r3, [pc, #12]	; (1e28 <_sercom_get_irq_num+0x10>)
    1e1c:	4798      	blx	r3
    1e1e:	0080      	lsls	r0, r0, #2
    1e20:	302e      	adds	r0, #46	; 0x2e
}
    1e22:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1e26:	bd08      	pop	{r3, pc}
    1e28:	00001d65 	.word	0x00001d65

00001e2c <_usart_init>:
{
    1e2c:	b510      	push	{r4, lr}
    1e2e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e30:	4b21      	ldr	r3, [pc, #132]	; (1eb8 <_usart_init+0x8c>)
    1e32:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1e34:	2802      	cmp	r0, #2
    1e36:	d005      	beq.n	1e44 <_usart_init+0x18>
	ASSERT(false);
    1e38:	f240 226b 	movw	r2, #619	; 0x26b
    1e3c:	491f      	ldr	r1, [pc, #124]	; (1ebc <_usart_init+0x90>)
    1e3e:	2000      	movs	r0, #0
    1e40:	4b1f      	ldr	r3, [pc, #124]	; (1ec0 <_usart_init+0x94>)
    1e42:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e44:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e46:	f013 0f01 	tst.w	r3, #1
    1e4a:	d119      	bne.n	1e80 <_usart_init+0x54>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e4c:	69e3      	ldr	r3, [r4, #28]
    1e4e:	f013 0f03 	tst.w	r3, #3
    1e52:	d1fb      	bne.n	1e4c <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e54:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e56:	f013 0f02 	tst.w	r3, #2
    1e5a:	d00b      	beq.n	1e74 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e5c:	6823      	ldr	r3, [r4, #0]
    1e5e:	f023 0302 	bic.w	r3, r3, #2
    1e62:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e64:	69e3      	ldr	r3, [r4, #28]
    1e66:	f013 0f03 	tst.w	r3, #3
    1e6a:	d1fb      	bne.n	1e64 <_usart_init+0x38>
    1e6c:	69e3      	ldr	r3, [r4, #28]
    1e6e:	f013 0f02 	tst.w	r3, #2
    1e72:	d1fb      	bne.n	1e6c <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e74:	2305      	movs	r3, #5
    1e76:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e78:	69e3      	ldr	r3, [r4, #28]
    1e7a:	f013 0f03 	tst.w	r3, #3
    1e7e:	d1fb      	bne.n	1e78 <_usart_init+0x4c>
    1e80:	69e3      	ldr	r3, [r4, #28]
    1e82:	f013 0f01 	tst.w	r3, #1
    1e86:	d1fb      	bne.n	1e80 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e88:	4b0e      	ldr	r3, [pc, #56]	; (1ec4 <_usart_init+0x98>)
    1e8a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e8c:	69e3      	ldr	r3, [r4, #28]
    1e8e:	f013 0f03 	tst.w	r3, #3
    1e92:	d1fb      	bne.n	1e8c <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1e94:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    1e98:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e9a:	69e3      	ldr	r3, [r4, #28]
    1e9c:	f013 0f1f 	tst.w	r3, #31
    1ea0:	d1fb      	bne.n	1e9a <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1ea2:	4b09      	ldr	r3, [pc, #36]	; (1ec8 <_usart_init+0x9c>)
    1ea4:	60a3      	str	r3, [r4, #8]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1ea6:	f64f 4311 	movw	r3, #64529	; 0xfc11
    1eaa:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1eac:	2000      	movs	r0, #0
    1eae:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1eb0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
    1eb4:	bd10      	pop	{r4, pc}
    1eb6:	bf00      	nop
    1eb8:	00001d65 	.word	0x00001d65
    1ebc:	0001b060 	.word	0x0001b060
    1ec0:	00001a89 	.word	0x00001a89
    1ec4:	40100004 	.word	0x40100004
    1ec8:	00700002 	.word	0x00700002

00001ecc <_get_i2cm_index>:
{
    1ecc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1ece:	4b07      	ldr	r3, [pc, #28]	; (1eec <_get_i2cm_index+0x20>)
    1ed0:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    1ed2:	2803      	cmp	r0, #3
    1ed4:	d008      	beq.n	1ee8 <_get_i2cm_index+0x1c>
	ASSERT(false);
    1ed6:	f240 32ce 	movw	r2, #974	; 0x3ce
    1eda:	4905      	ldr	r1, [pc, #20]	; (1ef0 <_get_i2cm_index+0x24>)
    1edc:	2000      	movs	r0, #0
    1ede:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <_get_i2cm_index+0x28>)
    1ee0:	4798      	blx	r3
	return -1;
    1ee2:	f04f 30ff 	mov.w	r0, #4294967295
}
    1ee6:	bd08      	pop	{r3, pc}
			return i;
    1ee8:	2000      	movs	r0, #0
    1eea:	bd08      	pop	{r3, pc}
    1eec:	00001d65 	.word	0x00001d65
    1ef0:	0001b060 	.word	0x0001b060
    1ef4:	00001a89 	.word	0x00001a89

00001ef8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1ef8:	b538      	push	{r3, r4, r5, lr}
    1efa:	4605      	mov	r5, r0
    1efc:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1efe:	4608      	mov	r0, r1
    1f00:	4b32      	ldr	r3, [pc, #200]	; (1fcc <_i2c_m_sync_init_impl+0xd4>)
    1f02:	4798      	blx	r3
    1f04:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1f06:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1f08:	f013 0f01 	tst.w	r3, #1
    1f0c:	d122      	bne.n	1f54 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1f0e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f12:	4a2f      	ldr	r2, [pc, #188]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1f1a:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f1e:	69e3      	ldr	r3, [r4, #28]
    1f20:	f013 0f03 	tst.w	r3, #3
    1f24:	d1fb      	bne.n	1f1e <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1f26:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1f28:	f013 0f02 	tst.w	r3, #2
    1f2c:	d00b      	beq.n	1f46 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1f2e:	6823      	ldr	r3, [r4, #0]
    1f30:	f023 0302 	bic.w	r3, r3, #2
    1f34:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f36:	69e3      	ldr	r3, [r4, #28]
    1f38:	f013 0f03 	tst.w	r3, #3
    1f3c:	d1fb      	bne.n	1f36 <_i2c_m_sync_init_impl+0x3e>
    1f3e:	69e3      	ldr	r3, [r4, #28]
    1f40:	f013 0f02 	tst.w	r3, #2
    1f44:	d1fb      	bne.n	1f3e <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1f46:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f4a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f4c:	69e3      	ldr	r3, [r4, #28]
    1f4e:	f013 0f03 	tst.w	r3, #3
    1f52:	d1fb      	bne.n	1f4c <_i2c_m_sync_init_impl+0x54>
    1f54:	69e3      	ldr	r3, [r4, #28]
    1f56:	f013 0f01 	tst.w	r3, #1
    1f5a:	d1fb      	bne.n	1f54 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1f5c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f60:	4a1b      	ldr	r2, [pc, #108]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1f68:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f6a:	69e3      	ldr	r3, [r4, #28]
    1f6c:	f013 0f03 	tst.w	r3, #3
    1f70:	d1fb      	bne.n	1f6a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1f72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f76:	4916      	ldr	r1, [pc, #88]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f78:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1f7e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f80:	69e3      	ldr	r3, [r4, #28]
    1f82:	f013 0f04 	tst.w	r3, #4
    1f86:	d1fb      	bne.n	1f80 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1f88:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f8c:	4910      	ldr	r1, [pc, #64]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1f8e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1f94:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1f96:	f3c2 6301 	ubfx	r3, r2, #24, #2
    1f9a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1fa2:	2b01      	cmp	r3, #1
    1fa4:	bf94      	ite	ls
    1fa6:	2300      	movls	r3, #0
    1fa8:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1faa:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1fae:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fb0:	69e3      	ldr	r3, [r4, #28]
    1fb2:	f013 0f04 	tst.w	r3, #4
    1fb6:	d1fb      	bne.n	1fb0 <_i2c_m_sync_init_impl+0xb8>

	service->trise = _i2cms[i].trise;
    1fb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fbc:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <_i2c_m_sync_init_impl+0xd8>)
    1fbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1fc2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1fc4:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1fc6:	2000      	movs	r0, #0
    1fc8:	bd38      	pop	{r3, r4, r5, pc}
    1fca:	bf00      	nop
    1fcc:	00001ecd 	.word	0x00001ecd
    1fd0:	0001b028 	.word	0x0001b028

00001fd4 <_usart_async_init>:
{
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	460d      	mov	r5, r1
	ASSERT(device);
    1fd8:	4606      	mov	r6, r0
    1fda:	22cb      	movs	r2, #203	; 0xcb
    1fdc:	4918      	ldr	r1, [pc, #96]	; (2040 <_usart_async_init+0x6c>)
    1fde:	3000      	adds	r0, #0
    1fe0:	bf18      	it	ne
    1fe2:	2001      	movne	r0, #1
    1fe4:	4b17      	ldr	r3, [pc, #92]	; (2044 <_usart_async_init+0x70>)
    1fe6:	4798      	blx	r3
	init_status = _usart_init(hw);
    1fe8:	4628      	mov	r0, r5
    1fea:	4b17      	ldr	r3, [pc, #92]	; (2048 <_usart_async_init+0x74>)
    1fec:	4798      	blx	r3
	if (init_status) {
    1fee:	4604      	mov	r4, r0
    1ff0:	b108      	cbz	r0, 1ff6 <_usart_async_init+0x22>
}
    1ff2:	4620      	mov	r0, r4
    1ff4:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1ff6:	61b5      	str	r5, [r6, #24]
	if (hw == SERCOM2) {
    1ff8:	4b14      	ldr	r3, [pc, #80]	; (204c <_usart_async_init+0x78>)
    1ffa:	429d      	cmp	r5, r3
		_sercom2_dev = (struct _usart_async_device *)dev;
    1ffc:	bf04      	itt	eq
    1ffe:	4b14      	ldreq	r3, [pc, #80]	; (2050 <_usart_async_init+0x7c>)
    2000:	601e      	streq	r6, [r3, #0]
	uint8_t irq = _sercom_get_irq_num(hw);
    2002:	4628      	mov	r0, r5
    2004:	4b13      	ldr	r3, [pc, #76]	; (2054 <_usart_async_init+0x80>)
    2006:	4798      	blx	r3
    2008:	1d01      	adds	r1, r0, #4
    200a:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    200c:	2501      	movs	r5, #1
    200e:	f000 021f 	and.w	r2, r0, #31
    2012:	fa05 f202 	lsl.w	r2, r5, r2
    2016:	0943      	lsrs	r3, r0, #5
    2018:	009b      	lsls	r3, r3, #2
    201a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    201e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    202a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    202e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2032:	601a      	str	r2, [r3, #0]
		irq++;
    2034:	3001      	adds	r0, #1
    2036:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    2038:	4281      	cmp	r1, r0
    203a:	d1e8      	bne.n	200e <_usart_async_init+0x3a>
    203c:	e7d9      	b.n	1ff2 <_usart_async_init+0x1e>
    203e:	bf00      	nop
    2040:	0001b060 	.word	0x0001b060
    2044:	00001a89 	.word	0x00001a89
    2048:	00001e2d 	.word	0x00001e2d
    204c:	41012000 	.word	0x41012000
    2050:	200000c8 	.word	0x200000c8
    2054:	00001e19 	.word	0x00001e19

00002058 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2058:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    205a:	6813      	ldr	r3, [r2, #0]
    205c:	f043 0302 	orr.w	r3, r3, #2
    2060:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2062:	69d3      	ldr	r3, [r2, #28]
    2064:	f013 0f03 	tst.w	r3, #3
    2068:	d1fb      	bne.n	2062 <_usart_async_enable+0xa>
}
    206a:	4770      	bx	lr

0000206c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    206c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    206e:	6299      	str	r1, [r3, #40]	; 0x28
    2070:	4770      	bx	lr

00002072 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2072:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2074:	2201      	movs	r2, #1
    2076:	759a      	strb	r2, [r3, #22]
    2078:	4770      	bx	lr

0000207a <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    207a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    207c:	2202      	movs	r2, #2
    207e:	759a      	strb	r2, [r3, #22]
    2080:	4770      	bx	lr
	...

00002084 <_i2c_m_sync_init>:
{
    2084:	b538      	push	{r3, r4, r5, lr}
    2086:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    2088:	4604      	mov	r4, r0
    208a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
    208e:	4906      	ldr	r1, [pc, #24]	; (20a8 <_i2c_m_sync_init+0x24>)
    2090:	3000      	adds	r0, #0
    2092:	bf18      	it	ne
    2094:	2001      	movne	r0, #1
    2096:	4b05      	ldr	r3, [pc, #20]	; (20ac <_i2c_m_sync_init+0x28>)
    2098:	4798      	blx	r3
	i2c_dev->hw = hw;
    209a:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    209c:	4629      	mov	r1, r5
    209e:	4620      	mov	r0, r4
    20a0:	4b03      	ldr	r3, [pc, #12]	; (20b0 <_i2c_m_sync_init+0x2c>)
    20a2:	4798      	blx	r3
}
    20a4:	bd38      	pop	{r3, r4, r5, pc}
    20a6:	bf00      	nop
    20a8:	0001b060 	.word	0x0001b060
    20ac:	00001a89 	.word	0x00001a89
    20b0:	00001ef9 	.word	0x00001ef9

000020b4 <_i2c_m_sync_transfer>:
{
    20b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20b8:	4605      	mov	r5, r0
    20ba:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    20bc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    20be:	f110 0800 	adds.w	r8, r0, #0
    20c2:	bf18      	it	ne
    20c4:	f04f 0801 	movne.w	r8, #1
    20c8:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2390 <_i2c_m_sync_transfer+0x2dc>
    20cc:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
    20d0:	4649      	mov	r1, r9
    20d2:	4640      	mov	r0, r8
    20d4:	4fad      	ldr	r7, [pc, #692]	; (238c <_i2c_m_sync_transfer+0x2d8>)
    20d6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    20d8:	6928      	ldr	r0, [r5, #16]
    20da:	f240 52f9 	movw	r2, #1529	; 0x5f9
    20de:	4649      	mov	r1, r9
    20e0:	3000      	adds	r0, #0
    20e2:	bf18      	it	ne
    20e4:	2001      	movne	r0, #1
    20e6:	47b8      	blx	r7
	ASSERT(msg);
    20e8:	f240 52fa 	movw	r2, #1530	; 0x5fa
    20ec:	4649      	mov	r1, r9
    20ee:	1c30      	adds	r0, r6, #0
    20f0:	bf18      	it	ne
    20f2:	2001      	movne	r0, #1
    20f4:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    20f6:	886b      	ldrh	r3, [r5, #2]
    20f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    20fc:	f040 8218 	bne.w	2530 <_i2c_m_sync_transfer+0x47c>
	msg->flags |= I2C_M_BUSY;
    2100:	8873      	ldrh	r3, [r6, #2]
    2102:	b29b      	uxth	r3, r3
    2104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2108:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    210a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    210e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    2112:	6863      	ldr	r3, [r4, #4]
    2114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2118:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    211a:	69e3      	ldr	r3, [r4, #28]
    211c:	f013 0f04 	tst.w	r3, #4
    2120:	d1fb      	bne.n	211a <_i2c_m_sync_transfer+0x66>
	void *             hw    = i2c_dev->hw;
    2122:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2124:	f8d7 9000 	ldr.w	r9, [r7]
	ASSERT(i2c_dev);
    2128:	f240 52cd 	movw	r2, #1485	; 0x5cd
    212c:	4998      	ldr	r1, [pc, #608]	; (2390 <_i2c_m_sync_transfer+0x2dc>)
    212e:	4640      	mov	r0, r8
    2130:	4b96      	ldr	r3, [pc, #600]	; (238c <_i2c_m_sync_transfer+0x2d8>)
    2132:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    2134:	686b      	ldr	r3, [r5, #4]
    2136:	2b01      	cmp	r3, #1
    2138:	d05e      	beq.n	21f8 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    2140:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2142:	69fb      	ldr	r3, [r7, #28]
    2144:	f013 0f04 	tst.w	r3, #4
    2148:	d1fb      	bne.n	2142 <_i2c_m_sync_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    214a:	882b      	ldrh	r3, [r5, #0]
    214c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2150:	d05e      	beq.n	2210 <_i2c_m_sync_transfer+0x15c>
		if (msg->flags & I2C_M_RD) {
    2152:	886a      	ldrh	r2, [r5, #2]
    2154:	f012 0f01 	tst.w	r2, #1
    2158:	d004      	beq.n	2164 <_i2c_m_sync_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    215a:	886a      	ldrh	r2, [r5, #2]
    215c:	b292      	uxth	r2, r2
    215e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2162:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2164:	f240 72fe 	movw	r2, #2046	; 0x7fe
    2168:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    216c:	69fb      	ldr	r3, [r7, #28]
    216e:	f013 0f04 	tst.w	r3, #4
    2172:	d1fb      	bne.n	216c <_i2c_m_sync_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    217a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    217e:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2180:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2182:	69fb      	ldr	r3, [r7, #28]
    2184:	f013 0f04 	tst.w	r3, #4
    2188:	d1fb      	bne.n	2182 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
    218a:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    218c:	7e0b      	ldrb	r3, [r1, #24]
    218e:	b2db      	uxtb	r3, r3
    2190:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2194:	f013 0f03 	tst.w	r3, #3
    2198:	d103      	bne.n	21a2 <_i2c_m_sync_transfer+0xee>
    219a:	7e0b      	ldrb	r3, [r1, #24]
    219c:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    219e:	3a01      	subs	r2, #1
    21a0:	d1f8      	bne.n	2194 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    21a2:	6839      	ldr	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    21a4:	69fa      	ldr	r2, [r7, #28]
    21a6:	f012 0f04 	tst.w	r2, #4
    21aa:	d1fb      	bne.n	21a4 <_i2c_m_sync_transfer+0xf0>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    21ac:	8b7a      	ldrh	r2, [r7, #26]
    21ae:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    21b0:	f013 0f01 	tst.w	r3, #1
    21b4:	f000 80a3 	beq.w	22fe <_i2c_m_sync_transfer+0x24a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    21b8:	f012 0f02 	tst.w	r2, #2
    21bc:	d03c      	beq.n	2238 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    21be:	2301      	movs	r3, #1
    21c0:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    21c2:	886b      	ldrh	r3, [r5, #2]
    21c4:	b29b      	uxth	r3, r3
    21c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    21ca:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    21cc:	886b      	ldrh	r3, [r5, #2]
    21ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21d2:	041b      	lsls	r3, r3, #16
    21d4:	0c1b      	lsrs	r3, r3, #16
    21d6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    21d8:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    21dc:	2a00      	cmp	r2, #0
    21de:	bf14      	ite	ne
    21e0:	f06f 0004 	mvnne.w	r0, #4
    21e4:	f06f 0003 	mvneq.w	r0, #3
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    21e8:	886b      	ldrh	r3, [r5, #2]
    21ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    21ee:	041b      	lsls	r3, r3, #16
    21f0:	0c1b      	lsrs	r3, r3, #16
    21f2:	806b      	strh	r3, [r5, #2]
		return ret;
    21f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (msg->len == 1 && sclsm) {
    21f8:	f019 6f00 	tst.w	r9, #134217728	; 0x8000000
    21fc:	d09d      	beq.n	213a <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2204:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2206:	69fb      	ldr	r3, [r7, #28]
    2208:	f013 0f04 	tst.w	r3, #4
    220c:	d1fb      	bne.n	2206 <_i2c_m_sync_transfer+0x152>
    220e:	e79c      	b.n	214a <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2210:	8869      	ldrh	r1, [r5, #2]
    2212:	005a      	lsls	r2, r3, #1
    2214:	b2d2      	uxtb	r2, r2
    2216:	f001 0301 	and.w	r3, r1, #1
    221a:	431a      	orrs	r2, r3
    221c:	69fb      	ldr	r3, [r7, #28]
    221e:	f013 0f04 	tst.w	r3, #4
    2222:	d1fb      	bne.n	221c <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    222a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    222c:	627a      	str	r2, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    222e:	69fb      	ldr	r3, [r7, #28]
    2230:	f013 0f04 	tst.w	r3, #4
    2234:	d1fb      	bne.n	222e <_i2c_m_sync_transfer+0x17a>
    2236:	e7a8      	b.n	218a <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    2238:	f012 0f04 	tst.w	r2, #4
    223c:	d11d      	bne.n	227a <_i2c_m_sync_transfer+0x1c6>
			if (msg->flags & I2C_M_TEN) {
    223e:	886b      	ldrh	r3, [r5, #2]
    2240:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2244:	d037      	beq.n	22b6 <_i2c_m_sync_transfer+0x202>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    2246:	882b      	ldrh	r3, [r5, #0]
    2248:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    224a:	f003 0206 	and.w	r2, r3, #6
    224e:	69fb      	ldr	r3, [r7, #28]
    2250:	f013 0f04 	tst.w	r3, #4
    2254:	d1fb      	bne.n	224e <_i2c_m_sync_transfer+0x19a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    225c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    2260:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2262:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2264:	69fb      	ldr	r3, [r7, #28]
    2266:	f013 0f04 	tst.w	r3, #4
    226a:	d1fb      	bne.n	2264 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    226c:	886b      	ldrh	r3, [r5, #2]
    226e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2272:	041b      	lsls	r3, r3, #16
    2274:	0c1b      	lsrs	r3, r3, #16
    2276:	806b      	strh	r3, [r5, #2]
    2278:	e069      	b.n	234e <_i2c_m_sync_transfer+0x29a>
				if (msg->len > 0) {
    227a:	686b      	ldr	r3, [r5, #4]
    227c:	2b00      	cmp	r3, #0
    227e:	dd04      	ble.n	228a <_i2c_m_sync_transfer+0x1d6>
					msg->flags |= I2C_M_FAIL;
    2280:	886b      	ldrh	r3, [r5, #2]
    2282:	b29b      	uxth	r3, r3
    2284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2288:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    228a:	886b      	ldrh	r3, [r5, #2]
    228c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2290:	d108      	bne.n	22a4 <_i2c_m_sync_transfer+0x1f0>
				msg->flags &= ~I2C_M_BUSY;
    2292:	886b      	ldrh	r3, [r5, #2]
    2294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2298:	041b      	lsls	r3, r3, #16
    229a:	0c1b      	lsrs	r3, r3, #16
    229c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    229e:	f06f 0001 	mvn.w	r0, #1
    22a2:	e7a1      	b.n	21e8 <_i2c_m_sync_transfer+0x134>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22a4:	687b      	ldr	r3, [r7, #4]
    22a6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22aa:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22ac:	69fb      	ldr	r3, [r7, #28]
    22ae:	f013 0f04 	tst.w	r3, #4
    22b2:	d1fb      	bne.n	22ac <_i2c_m_sync_transfer+0x1f8>
    22b4:	e7ed      	b.n	2292 <_i2c_m_sync_transfer+0x1de>
			if (msg->len == 0) {
    22b6:	686b      	ldr	r3, [r5, #4]
    22b8:	b99b      	cbnz	r3, 22e2 <_i2c_m_sync_transfer+0x22e>
				if (msg->flags & I2C_M_STOP) {
    22ba:	886b      	ldrh	r3, [r5, #2]
    22bc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    22c0:	d106      	bne.n	22d0 <_i2c_m_sync_transfer+0x21c>
				msg->flags &= ~I2C_M_BUSY;
    22c2:	886b      	ldrh	r3, [r5, #2]
    22c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    22c8:	041b      	lsls	r3, r3, #16
    22ca:	0c1b      	lsrs	r3, r3, #16
    22cc:	806b      	strh	r3, [r5, #2]
    22ce:	e03e      	b.n	234e <_i2c_m_sync_transfer+0x29a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    22d0:	687b      	ldr	r3, [r7, #4]
    22d2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    22d6:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22d8:	69fb      	ldr	r3, [r7, #28]
    22da:	f013 0f04 	tst.w	r3, #4
    22de:	d1fb      	bne.n	22d8 <_i2c_m_sync_transfer+0x224>
    22e0:	e7ef      	b.n	22c2 <_i2c_m_sync_transfer+0x20e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    22e2:	68ab      	ldr	r3, [r5, #8]
    22e4:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    22e6:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    22e8:	69fb      	ldr	r3, [r7, #28]
    22ea:	f013 0f04 	tst.w	r3, #4
    22ee:	d1fb      	bne.n	22e8 <_i2c_m_sync_transfer+0x234>
				msg->buffer++;
    22f0:	68ab      	ldr	r3, [r5, #8]
    22f2:	3301      	adds	r3, #1
    22f4:	60ab      	str	r3, [r5, #8]
				msg->len--;
    22f6:	686b      	ldr	r3, [r5, #4]
    22f8:	3b01      	subs	r3, #1
    22fa:	606b      	str	r3, [r5, #4]
    22fc:	e027      	b.n	234e <_i2c_m_sync_transfer+0x29a>
	} else if (flags & SB_FLAG) {
    22fe:	f013 0f02 	tst.w	r3, #2
    2302:	d024      	beq.n	234e <_i2c_m_sync_transfer+0x29a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2304:	686b      	ldr	r3, [r5, #4]
    2306:	2b00      	cmp	r3, #0
    2308:	d03a      	beq.n	2380 <_i2c_m_sync_transfer+0x2cc>
    230a:	f012 0f04 	tst.w	r2, #4
    230e:	d137      	bne.n	2380 <_i2c_m_sync_transfer+0x2cc>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2310:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2314:	3b01      	subs	r3, #1
    2316:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2318:	2b00      	cmp	r3, #0
    231a:	f040 810d 	bne.w	2538 <_i2c_m_sync_transfer+0x484>
    231e:	2900      	cmp	r1, #0
    2320:	f000 8110 	beq.w	2544 <_i2c_m_sync_transfer+0x490>
				if (msg->flags & I2C_M_STOP) {
    2324:	886b      	ldrh	r3, [r5, #2]
    2326:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    232a:	d118      	bne.n	235e <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    232c:	886b      	ldrh	r3, [r5, #2]
    232e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2332:	041b      	lsls	r3, r3, #16
    2334:	0c1b      	lsrs	r3, r3, #16
    2336:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2338:	68aa      	ldr	r2, [r5, #8]
    233a:	1c53      	adds	r3, r2, #1
    233c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    233e:	69fb      	ldr	r3, [r7, #28]
    2340:	f013 0f04 	tst.w	r3, #4
    2344:	d1fb      	bne.n	233e <_i2c_m_sync_transfer+0x28a>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    2346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2348:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    234a:	2302      	movs	r3, #2
    234c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    234e:	2200      	movs	r2, #0
	return I2C_OK;
    2350:	4610      	mov	r0, r2
    2352:	2702      	movs	r7, #2
			return I2C_NACK;
    2354:	f06f 0c01 	mvn.w	ip, #1
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2358:	f04f 0e01 	mov.w	lr, #1
    235c:	e0b0      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2364:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2366:	69fb      	ldr	r3, [r7, #28]
    2368:	f013 0f04 	tst.w	r3, #4
    236c:	d1fb      	bne.n	2366 <_i2c_m_sync_transfer+0x2b2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2374:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2376:	69fb      	ldr	r3, [r7, #28]
    2378:	f013 0f04 	tst.w	r3, #4
    237c:	d1fb      	bne.n	2376 <_i2c_m_sync_transfer+0x2c2>
    237e:	e7d5      	b.n	232c <_i2c_m_sync_transfer+0x278>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2380:	2302      	movs	r3, #2
    2382:	763b      	strb	r3, [r7, #24]
    2384:	f06f 0001 	mvn.w	r0, #1
    2388:	e72e      	b.n	21e8 <_i2c_m_sync_transfer+0x134>
    238a:	bf00      	nop
    238c:	00001a89 	.word	0x00001a89
    2390:	0001b060 	.word	0x0001b060
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2394:	6863      	ldr	r3, [r4, #4]
    2396:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    239a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    239c:	69e3      	ldr	r3, [r4, #28]
    239e:	f013 0f04 	tst.w	r3, #4
    23a2:	d1fb      	bne.n	239c <_i2c_m_sync_transfer+0x2e8>
    23a4:	e0a1      	b.n	24ea <_i2c_m_sync_transfer+0x436>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    23a6:	f012 0f04 	tst.w	r2, #4
    23aa:	d11e      	bne.n	23ea <_i2c_m_sync_transfer+0x336>
			if (msg->flags & I2C_M_TEN) {
    23ac:	886b      	ldrh	r3, [r5, #2]
    23ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
    23b2:	d037      	beq.n	2424 <_i2c_m_sync_transfer+0x370>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    23b4:	882b      	ldrh	r3, [r5, #0]
    23b6:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    23b8:	f003 0206 	and.w	r2, r3, #6
    23bc:	69e3      	ldr	r3, [r4, #28]
    23be:	f013 0f04 	tst.w	r3, #4
    23c2:	d1fb      	bne.n	23bc <_i2c_m_sync_transfer+0x308>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    23c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    23ca:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    23ce:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    23d0:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    23d2:	69e3      	ldr	r3, [r4, #28]
    23d4:	f013 0f04 	tst.w	r3, #4
    23d8:	d1fb      	bne.n	23d2 <_i2c_m_sync_transfer+0x31e>
				msg->flags &= ~I2C_M_TEN;
    23da:	886b      	ldrh	r3, [r5, #2]
    23dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    23e0:	041b      	lsls	r3, r3, #16
    23e2:	0c1b      	lsrs	r3, r3, #16
    23e4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    23e6:	4602      	mov	r2, r0
    23e8:	e06a      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
				if (msg->len > 0) {
    23ea:	686b      	ldr	r3, [r5, #4]
    23ec:	2b00      	cmp	r3, #0
    23ee:	dd04      	ble.n	23fa <_i2c_m_sync_transfer+0x346>
					msg->flags |= I2C_M_FAIL;
    23f0:	886b      	ldrh	r3, [r5, #2]
    23f2:	b29b      	uxth	r3, r3
    23f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    23f8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    23fa:	886b      	ldrh	r3, [r5, #2]
    23fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2400:	d107      	bne.n	2412 <_i2c_m_sync_transfer+0x35e>
				msg->flags &= ~I2C_M_BUSY;
    2402:	886b      	ldrh	r3, [r5, #2]
    2404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2408:	041b      	lsls	r3, r3, #16
    240a:	0c1b      	lsrs	r3, r3, #16
    240c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    240e:	4662      	mov	r2, ip
    2410:	e056      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2412:	6863      	ldr	r3, [r4, #4]
    2414:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2418:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    241a:	69e3      	ldr	r3, [r4, #28]
    241c:	f013 0f04 	tst.w	r3, #4
    2420:	d1fb      	bne.n	241a <_i2c_m_sync_transfer+0x366>
    2422:	e7ee      	b.n	2402 <_i2c_m_sync_transfer+0x34e>
			if (msg->len == 0) {
    2424:	686b      	ldr	r3, [r5, #4]
    2426:	b9a3      	cbnz	r3, 2452 <_i2c_m_sync_transfer+0x39e>
				if (msg->flags & I2C_M_STOP) {
    2428:	886b      	ldrh	r3, [r5, #2]
    242a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    242e:	d107      	bne.n	2440 <_i2c_m_sync_transfer+0x38c>
				msg->flags &= ~I2C_M_BUSY;
    2430:	886b      	ldrh	r3, [r5, #2]
    2432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2436:	041b      	lsls	r3, r3, #16
    2438:	0c1b      	lsrs	r3, r3, #16
    243a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    243c:	4602      	mov	r2, r0
    243e:	e03f      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2440:	6863      	ldr	r3, [r4, #4]
    2442:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2446:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2448:	69e3      	ldr	r3, [r4, #28]
    244a:	f013 0f04 	tst.w	r3, #4
    244e:	d1fb      	bne.n	2448 <_i2c_m_sync_transfer+0x394>
    2450:	e7ee      	b.n	2430 <_i2c_m_sync_transfer+0x37c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2452:	68ab      	ldr	r3, [r5, #8]
    2454:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2456:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2458:	69e3      	ldr	r3, [r4, #28]
    245a:	f013 0f04 	tst.w	r3, #4
    245e:	d1fb      	bne.n	2458 <_i2c_m_sync_transfer+0x3a4>
				msg->buffer++;
    2460:	68ab      	ldr	r3, [r5, #8]
    2462:	3301      	adds	r3, #1
    2464:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2466:	686b      	ldr	r3, [r5, #4]
    2468:	3b01      	subs	r3, #1
    246a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    246c:	4602      	mov	r2, r0
    246e:	e027      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	} else if (flags & SB_FLAG) {
    2470:	f013 0f02 	tst.w	r3, #2
    2474:	d057      	beq.n	2526 <_i2c_m_sync_transfer+0x472>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    2476:	686b      	ldr	r3, [r5, #4]
    2478:	2b00      	cmp	r3, #0
    247a:	d051      	beq.n	2520 <_i2c_m_sync_transfer+0x46c>
    247c:	f012 0f04 	tst.w	r2, #4
    2480:	d14e      	bne.n	2520 <_i2c_m_sync_transfer+0x46c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2482:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    2486:	3b01      	subs	r3, #1
    2488:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    248a:	2b00      	cmp	r3, #0
    248c:	f040 808c 	bne.w	25a8 <_i2c_m_sync_transfer+0x4f4>
    2490:	2900      	cmp	r1, #0
    2492:	f000 808f 	beq.w	25b4 <_i2c_m_sync_transfer+0x500>
				if (msg->flags & I2C_M_STOP) {
    2496:	886b      	ldrh	r3, [r5, #2]
    2498:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    249c:	d12f      	bne.n	24fe <_i2c_m_sync_transfer+0x44a>
				msg->flags &= ~I2C_M_BUSY;
    249e:	886b      	ldrh	r3, [r5, #2]
    24a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24a4:	041b      	lsls	r3, r3, #16
    24a6:	0c1b      	lsrs	r3, r3, #16
    24a8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    24aa:	68aa      	ldr	r2, [r5, #8]
    24ac:	1c53      	adds	r3, r2, #1
    24ae:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    24b0:	69e3      	ldr	r3, [r4, #28]
    24b2:	f013 0f04 	tst.w	r3, #4
    24b6:	d1fb      	bne.n	24b0 <_i2c_m_sync_transfer+0x3fc>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    24b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ba:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    24bc:	7627      	strb	r7, [r4, #24]
	return I2C_OK;
    24be:	4602      	mov	r2, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    24c0:	886b      	ldrh	r3, [r5, #2]
    24c2:	f413 7f80 	tst.w	r3, #256	; 0x100
    24c6:	d030      	beq.n	252a <_i2c_m_sync_transfer+0x476>
	void *   hw      = i2c_dev->hw;
    24c8:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    24ca:	7e0b      	ldrb	r3, [r1, #24]
    24cc:	b2db      	uxtb	r3, r3
    24ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    24d2:	f013 0f03 	tst.w	r3, #3
    24d6:	d142      	bne.n	255e <_i2c_m_sync_transfer+0x4aa>
    24d8:	7e0b      	ldrb	r3, [r1, #24]
    24da:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    24dc:	3a01      	subs	r2, #1
    24de:	d1f8      	bne.n	24d2 <_i2c_m_sync_transfer+0x41e>
			if (msg->flags & I2C_M_STOP) {
    24e0:	8873      	ldrh	r3, [r6, #2]
    24e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    24e6:	f47f af55 	bne.w	2394 <_i2c_m_sync_transfer+0x2e0>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    24ea:	886b      	ldrh	r3, [r5, #2]
    24ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    24f0:	041b      	lsls	r3, r3, #16
    24f2:	0c1b      	lsrs	r3, r3, #16
    24f4:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    24f6:	f06f 0004 	mvn.w	r0, #4
			return ret;
    24fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    24fe:	6863      	ldr	r3, [r4, #4]
    2500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2504:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2506:	69e3      	ldr	r3, [r4, #28]
    2508:	f013 0f04 	tst.w	r3, #4
    250c:	d1fb      	bne.n	2506 <_i2c_m_sync_transfer+0x452>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    250e:	6863      	ldr	r3, [r4, #4]
    2510:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2514:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2516:	69e3      	ldr	r3, [r4, #28]
    2518:	f013 0f04 	tst.w	r3, #4
    251c:	d1fb      	bne.n	2516 <_i2c_m_sync_transfer+0x462>
    251e:	e7be      	b.n	249e <_i2c_m_sync_transfer+0x3ea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2520:	7627      	strb	r7, [r4, #24]
			return I2C_NACK;
    2522:	4662      	mov	r2, ip
    2524:	e7cc      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
	return I2C_OK;
    2526:	4602      	mov	r2, r0
    2528:	e7ca      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
    252a:	4610      	mov	r0, r2
    252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return I2C_ERR_BUSY;
    2530:	f06f 0005 	mvn.w	r0, #5
    2534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2538:	2b01      	cmp	r3, #1
    253a:	f47f aefd 	bne.w	2338 <_i2c_m_sync_transfer+0x284>
    253e:	2900      	cmp	r1, #0
    2540:	f43f aefa 	beq.w	2338 <_i2c_m_sync_transfer+0x284>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    254a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    254c:	69fb      	ldr	r3, [r7, #28]
    254e:	f013 0f04 	tst.w	r3, #4
    2552:	d1fb      	bne.n	254c <_i2c_m_sync_transfer+0x498>
			if (msg->len == 0) {
    2554:	686b      	ldr	r3, [r5, #4]
    2556:	2b00      	cmp	r3, #0
    2558:	f43f aee4 	beq.w	2324 <_i2c_m_sync_transfer+0x270>
    255c:	e6ec      	b.n	2338 <_i2c_m_sync_transfer+0x284>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    255e:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2560:	69e2      	ldr	r2, [r4, #28]
    2562:	f012 0f04 	tst.w	r2, #4
    2566:	d1fb      	bne.n	2560 <_i2c_m_sync_transfer+0x4ac>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2568:	8b62      	ldrh	r2, [r4, #26]
    256a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    256c:	f013 0f01 	tst.w	r3, #1
    2570:	f43f af7e 	beq.w	2470 <_i2c_m_sync_transfer+0x3bc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    2574:	f012 0f02 	tst.w	r2, #2
    2578:	f43f af15 	beq.w	23a6 <_i2c_m_sync_transfer+0x2f2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    257c:	f884 e018 	strb.w	lr, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    2580:	886b      	ldrh	r3, [r5, #2]
    2582:	b29b      	uxth	r3, r3
    2584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2588:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    258a:	886b      	ldrh	r3, [r5, #2]
    258c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2590:	041b      	lsls	r3, r3, #16
    2592:	0c1b      	lsrs	r3, r3, #16
    2594:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    2596:	f002 0201 	and.w	r2, r2, #1
			return I2C_ERR_BAD_ADDRESS;
    259a:	2a00      	cmp	r2, #0
    259c:	bf14      	ite	ne
    259e:	f06f 0204 	mvnne.w	r2, #4
    25a2:	f06f 0203 	mvneq.w	r2, #3
    25a6:	e78b      	b.n	24c0 <_i2c_m_sync_transfer+0x40c>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    25a8:	2b01      	cmp	r3, #1
    25aa:	f47f af7e 	bne.w	24aa <_i2c_m_sync_transfer+0x3f6>
    25ae:	2900      	cmp	r1, #0
    25b0:	f43f af7b 	beq.w	24aa <_i2c_m_sync_transfer+0x3f6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    25b4:	6863      	ldr	r3, [r4, #4]
    25b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    25ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    25bc:	69e3      	ldr	r3, [r4, #28]
    25be:	f013 0f04 	tst.w	r3, #4
    25c2:	d1fb      	bne.n	25bc <_i2c_m_sync_transfer+0x508>
			if (msg->len == 0) {
    25c4:	686b      	ldr	r3, [r5, #4]
    25c6:	2b00      	cmp	r3, #0
    25c8:	f43f af65 	beq.w	2496 <_i2c_m_sync_transfer+0x3e2>
    25cc:	e76d      	b.n	24aa <_i2c_m_sync_transfer+0x3f6>
    25ce:	bf00      	nop

000025d0 <SERCOM2_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_0_Handler(void)
{
    25d0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25d2:	4b02      	ldr	r3, [pc, #8]	; (25dc <SERCOM2_0_Handler+0xc>)
    25d4:	6818      	ldr	r0, [r3, #0]
    25d6:	4b02      	ldr	r3, [pc, #8]	; (25e0 <SERCOM2_0_Handler+0x10>)
    25d8:	4798      	blx	r3
    25da:	bd08      	pop	{r3, pc}
    25dc:	200000c8 	.word	0x200000c8
    25e0:	00001da9 	.word	0x00001da9

000025e4 <SERCOM2_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_1_Handler(void)
{
    25e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25e6:	4b02      	ldr	r3, [pc, #8]	; (25f0 <SERCOM2_1_Handler+0xc>)
    25e8:	6818      	ldr	r0, [r3, #0]
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <SERCOM2_1_Handler+0x10>)
    25ec:	4798      	blx	r3
    25ee:	bd08      	pop	{r3, pc}
    25f0:	200000c8 	.word	0x200000c8
    25f4:	00001da9 	.word	0x00001da9

000025f8 <SERCOM2_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_2_Handler(void)
{
    25f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    25fa:	4b02      	ldr	r3, [pc, #8]	; (2604 <SERCOM2_2_Handler+0xc>)
    25fc:	6818      	ldr	r0, [r3, #0]
    25fe:	4b02      	ldr	r3, [pc, #8]	; (2608 <SERCOM2_2_Handler+0x10>)
    2600:	4798      	blx	r3
    2602:	bd08      	pop	{r3, pc}
    2604:	200000c8 	.word	0x200000c8
    2608:	00001da9 	.word	0x00001da9

0000260c <SERCOM2_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM2_3_Handler(void)
{
    260c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom2_dev);
    260e:	4b02      	ldr	r3, [pc, #8]	; (2618 <SERCOM2_3_Handler+0xc>)
    2610:	6818      	ldr	r0, [r3, #0]
    2612:	4b02      	ldr	r3, [pc, #8]	; (261c <SERCOM2_3_Handler+0x10>)
    2614:	4798      	blx	r3
    2616:	bd08      	pop	{r3, pc}
    2618:	200000c8 	.word	0x200000c8
    261c:	00001da9 	.word	0x00001da9

00002620 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    2620:	b570      	push	{r4, r5, r6, lr}
    2622:	b088      	sub	sp, #32
    2624:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2626:	466c      	mov	r4, sp
    2628:	4d12      	ldr	r5, [pc, #72]	; (2674 <get_tc_index+0x54>)
    262a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    262c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    262e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2636:	9b00      	ldr	r3, [sp, #0]
    2638:	42b3      	cmp	r3, r6
    263a:	d00b      	beq.n	2654 <get_tc_index+0x34>
    263c:	4630      	mov	r0, r6
    263e:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2640:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2642:	f852 1b04 	ldr.w	r1, [r2], #4
    2646:	4281      	cmp	r1, r0
    2648:	d005      	beq.n	2656 <get_tc_index+0x36>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    264a:	3301      	adds	r3, #1
    264c:	2b08      	cmp	r3, #8
    264e:	d1f8      	bne.n	2642 <get_tc_index+0x22>
			return i;
    2650:	2000      	movs	r0, #0
    2652:	e00b      	b.n	266c <get_tc_index+0x4c>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2654:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2656:	f013 0fff 	tst.w	r3, #255	; 0xff
    265a:	d009      	beq.n	2670 <get_tc_index+0x50>
	ASSERT(false);
    265c:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2660:	4905      	ldr	r1, [pc, #20]	; (2678 <get_tc_index+0x58>)
    2662:	2000      	movs	r0, #0
    2664:	4b05      	ldr	r3, [pc, #20]	; (267c <get_tc_index+0x5c>)
    2666:	4798      	blx	r3
	return -1;
    2668:	f04f 30ff 	mov.w	r0, #4294967295
}
    266c:	b008      	add	sp, #32
    266e:	bd70      	pop	{r4, r5, r6, pc}
			return i;
    2670:	2000      	movs	r0, #0
    2672:	e7fb      	b.n	266c <get_tc_index+0x4c>
    2674:	0001b07c 	.word	0x0001b07c
    2678:	0001b0b0 	.word	0x0001b0b0
    267c:	00001a89 	.word	0x00001a89

00002680 <_timer_init>:
{
    2680:	b570      	push	{r4, r5, r6, lr}
    2682:	4606      	mov	r6, r0
    2684:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2686:	4608      	mov	r0, r1
    2688:	4b60      	ldr	r3, [pc, #384]	; (280c <_timer_init+0x18c>)
    268a:	4798      	blx	r3
    268c:	4605      	mov	r5, r0
	device->hw = hw;
    268e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2690:	228d      	movs	r2, #141	; 0x8d
    2692:	495f      	ldr	r1, [pc, #380]	; (2810 <_timer_init+0x190>)
    2694:	2001      	movs	r0, #1
    2696:	4b5f      	ldr	r3, [pc, #380]	; (2814 <_timer_init+0x194>)
    2698:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    269a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    269c:	f013 0f01 	tst.w	r3, #1
    26a0:	d119      	bne.n	26d6 <_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26a2:	6923      	ldr	r3, [r4, #16]
    26a4:	f013 0f03 	tst.w	r3, #3
    26a8:	d1fb      	bne.n	26a2 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    26aa:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    26ac:	f013 0f02 	tst.w	r3, #2
    26b0:	d00b      	beq.n	26ca <_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    26b2:	6823      	ldr	r3, [r4, #0]
    26b4:	f023 0302 	bic.w	r3, r3, #2
    26b8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26ba:	6923      	ldr	r3, [r4, #16]
    26bc:	f013 0f03 	tst.w	r3, #3
    26c0:	d1fb      	bne.n	26ba <_timer_init+0x3a>
    26c2:	6923      	ldr	r3, [r4, #16]
    26c4:	f013 0f02 	tst.w	r3, #2
    26c8:	d1fb      	bne.n	26c2 <_timer_init+0x42>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26ca:	2301      	movs	r3, #1
    26cc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26ce:	6923      	ldr	r3, [r4, #16]
    26d0:	f013 0f03 	tst.w	r3, #3
    26d4:	d1fb      	bne.n	26ce <_timer_init+0x4e>
    26d6:	6923      	ldr	r3, [r4, #16]
    26d8:	f013 0f01 	tst.w	r3, #1
    26dc:	d1fb      	bne.n	26d6 <_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    26de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26e2:	4a4d      	ldr	r2, [pc, #308]	; (2818 <_timer_init+0x198>)
    26e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    26ea:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26ec:	6923      	ldr	r3, [r4, #16]
    26ee:	f013 0f03 	tst.w	r3, #3
    26f2:	d1fb      	bne.n	26ec <_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    26f4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26f8:	4947      	ldr	r1, [pc, #284]	; (2818 <_timer_init+0x198>)
    26fa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    26fe:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2702:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2706:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2708:	2301      	movs	r3, #1
    270a:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    270c:	f002 020c 	and.w	r2, r2, #12
    2710:	2a08      	cmp	r2, #8
    2712:	d048      	beq.n	27a6 <_timer_init+0x126>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2714:	2a00      	cmp	r2, #0
    2716:	d158      	bne.n	27ca <_timer_init+0x14a>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2718:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    271c:	4a3e      	ldr	r2, [pc, #248]	; (2818 <_timer_init+0x198>)
    271e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2722:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2724:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2726:	6923      	ldr	r3, [r4, #16]
    2728:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    272c:	d1fb      	bne.n	2726 <_timer_init+0xa6>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    272e:	2300      	movs	r3, #0
    2730:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2732:	6923      	ldr	r3, [r4, #16]
    2734:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2738:	d1fb      	bne.n	2732 <_timer_init+0xb2>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    273a:	2301      	movs	r3, #1
    273c:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    273e:	4b37      	ldr	r3, [pc, #220]	; (281c <_timer_init+0x19c>)
    2740:	429c      	cmp	r4, r3
		_tc0_dev = (struct _timer_device *)dev;
    2742:	bf04      	itt	eq
    2744:	4b36      	ldreq	r3, [pc, #216]	; (2820 <_timer_init+0x1a0>)
    2746:	601e      	streq	r6, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
    2748:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    274c:	4a32      	ldr	r2, [pc, #200]	; (2818 <_timer_init+0x198>)
    274e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2752:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2756:	2b00      	cmp	r3, #0
    2758:	db23      	blt.n	27a2 <_timer_init+0x122>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    275a:	095a      	lsrs	r2, r3, #5
    275c:	f003 031f 	and.w	r3, r3, #31
    2760:	2101      	movs	r1, #1
    2762:	fa01 f303 	lsl.w	r3, r1, r3
    2766:	3220      	adds	r2, #32
    2768:	492e      	ldr	r1, [pc, #184]	; (2824 <_timer_init+0x1a4>)
    276a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    276e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2772:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2776:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    277a:	4b27      	ldr	r3, [pc, #156]	; (2818 <_timer_init+0x198>)
    277c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2780:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    2784:	2b00      	cmp	r3, #0
    2786:	db0c      	blt.n	27a2 <_timer_init+0x122>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2788:	0959      	lsrs	r1, r3, #5
    278a:	f003 031f 	and.w	r3, r3, #31
    278e:	2201      	movs	r2, #1
    2790:	fa02 f303 	lsl.w	r3, r2, r3
    2794:	4a23      	ldr	r2, [pc, #140]	; (2824 <_timer_init+0x1a4>)
    2796:	f101 0060 	add.w	r0, r1, #96	; 0x60
    279a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    279e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    27a2:	2000      	movs	r0, #0
    27a4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    27a6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27aa:	4a1b      	ldr	r2, [pc, #108]	; (2818 <_timer_init+0x198>)
    27ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27b2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27b4:	6923      	ldr	r3, [r4, #16]
    27b6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27ba:	d1fb      	bne.n	27b4 <_timer_init+0x134>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    27bc:	2300      	movs	r3, #0
    27be:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27c0:	6923      	ldr	r3, [r4, #16]
    27c2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27c6:	d1fb      	bne.n	27c0 <_timer_init+0x140>
    27c8:	e7b7      	b.n	273a <_timer_init+0xba>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    27ca:	2a04      	cmp	r2, #4
    27cc:	d1b5      	bne.n	273a <_timer_init+0xba>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    27ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27d2:	4a11      	ldr	r2, [pc, #68]	; (2818 <_timer_init+0x198>)
    27d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    27dc:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27de:	6923      	ldr	r3, [r4, #16]
    27e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27e4:	d1fb      	bne.n	27de <_timer_init+0x15e>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    27e6:	2300      	movs	r3, #0
    27e8:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27ea:	6923      	ldr	r3, [r4, #16]
    27ec:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    27f0:	d1fb      	bne.n	27ea <_timer_init+0x16a>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    27f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27f6:	4a08      	ldr	r2, [pc, #32]	; (2818 <_timer_init+0x198>)
    27f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27fc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    2800:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2802:	6923      	ldr	r3, [r4, #16]
    2804:	f013 0f20 	tst.w	r3, #32
    2808:	d1fb      	bne.n	2802 <_timer_init+0x182>
    280a:	e796      	b.n	273a <_timer_init+0xba>
    280c:	00002621 	.word	0x00002621
    2810:	0001b0b0 	.word	0x0001b0b0
    2814:	00001a89 	.word	0x00001a89
    2818:	0001b07c 	.word	0x0001b07c
    281c:	40003800 	.word	0x40003800
    2820:	200000cc 	.word	0x200000cc
    2824:	e000e100 	.word	0xe000e100

00002828 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2828:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    282a:	6813      	ldr	r3, [r2, #0]
    282c:	f043 0302 	orr.w	r3, r3, #2
    2830:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2832:	6913      	ldr	r3, [r2, #16]
    2834:	f013 0f03 	tst.w	r3, #3
    2838:	d1fb      	bne.n	2832 <_timer_start+0xa>
}
    283a:	4770      	bx	lr

0000283c <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    283c:	68c2      	ldr	r2, [r0, #12]
    283e:	6913      	ldr	r3, [r2, #16]
    2840:	f013 0f03 	tst.w	r3, #3
    2844:	d1fb      	bne.n	283e <_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2846:	6810      	ldr	r0, [r2, #0]
}
    2848:	f3c0 0040 	ubfx	r0, r0, #1, #1
    284c:	4770      	bx	lr

0000284e <_tc_get_timer>:
}
    284e:	2000      	movs	r0, #0
    2850:	4770      	bx	lr
	...

00002854 <_timer_set_irq>:
{
    2854:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2856:	68c0      	ldr	r0, [r0, #12]
    2858:	4b09      	ldr	r3, [pc, #36]	; (2880 <_timer_set_irq+0x2c>)
    285a:	4798      	blx	r3
    285c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    285e:	f240 120f 	movw	r2, #271	; 0x10f
    2862:	4908      	ldr	r1, [pc, #32]	; (2884 <_timer_set_irq+0x30>)
    2864:	2001      	movs	r0, #1
    2866:	4b08      	ldr	r3, [pc, #32]	; (2888 <_timer_set_irq+0x34>)
    2868:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    286a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    286e:	4b07      	ldr	r3, [pc, #28]	; (288c <_timer_set_irq+0x38>)
    2870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2874:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    2878:	4b05      	ldr	r3, [pc, #20]	; (2890 <_timer_set_irq+0x3c>)
    287a:	4798      	blx	r3
    287c:	bd10      	pop	{r4, pc}
    287e:	bf00      	nop
    2880:	00002621 	.word	0x00002621
    2884:	0001b0b0 	.word	0x0001b0b0
    2888:	00001a89 	.word	0x00001a89
    288c:	0001b07c 	.word	0x0001b07c
    2890:	00001be9 	.word	0x00001be9

00002894 <TC0_Handler>:
{
    2894:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    2896:	4b06      	ldr	r3, [pc, #24]	; (28b0 <TC0_Handler+0x1c>)
    2898:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    289a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    289c:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    289e:	f012 0f01 	tst.w	r2, #1
    28a2:	d100      	bne.n	28a6 <TC0_Handler+0x12>
    28a4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    28a6:	2201      	movs	r2, #1
    28a8:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    28aa:	6803      	ldr	r3, [r0, #0]
    28ac:	4798      	blx	r3
}
    28ae:	e7f9      	b.n	28a4 <TC0_Handler+0x10>
    28b0:	200000cc 	.word	0x200000cc

000028b4 <main>:
#include "oracle.h"


int main(void)
{
    28b4:	b508      	push	{r3, lr}
	oracle_init();
    28b6:	4b02      	ldr	r3, [pc, #8]	; (28c0 <main+0xc>)
    28b8:	4798      	blx	r3
	
	for(;;)
	{
		oracle_service();
    28ba:	4c02      	ldr	r4, [pc, #8]	; (28c4 <main+0x10>)
    28bc:	47a0      	blx	r4
    28be:	e7fd      	b.n	28bc <main+0x8>
    28c0:	000028c9 	.word	0x000028c9
    28c4:	00002975 	.word	0x00002975

000028c8 <oracle_init>:

static lv_disp_buf_t disp_buf;
static lv_color_t buf[LV_HOR_RES_MAX * 10];                     /*Declare a buffer for 10 lines*/
	
void oracle_init(void)
{
    28c8:	b530      	push	{r4, r5, lr}
    28ca:	b08d      	sub	sp, #52	; 0x34
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    28cc:	4b17      	ldr	r3, [pc, #92]	; (292c <oracle_init+0x64>)
    28ce:	4798      	blx	r3
	// init mcu
	init_mcu();
	// uart init
	p_usart_init();
    28d0:	4b17      	ldr	r3, [pc, #92]	; (2930 <oracle_init+0x68>)
    28d2:	4798      	blx	r3
	// i2c init
	p_i2c_init();
    28d4:	4b17      	ldr	r3, [pc, #92]	; (2934 <oracle_init+0x6c>)
    28d6:	4798      	blx	r3
	// gpio init
	p_gpio_init();
    28d8:	4b17      	ldr	r3, [pc, #92]	; (2938 <oracle_init+0x70>)
    28da:	4798      	blx	r3
	// time init
	p_tcc_init();
    28dc:	4b17      	ldr	r3, [pc, #92]	; (293c <oracle_init+0x74>)
    28de:	4798      	blx	r3
	
	
	

	// devices init
	lv_init();
    28e0:	4b17      	ldr	r3, [pc, #92]	; (2940 <oracle_init+0x78>)
    28e2:	4798      	blx	r3
	
	ssd1963_init();
    28e4:	4b17      	ldr	r3, [pc, #92]	; (2944 <oracle_init+0x7c>)
    28e6:	4798      	blx	r3
	
	
	lv_disp_buf_init(&disp_buf, buf, NULL, LV_HOR_RES_MAX * 10);    /*Initialize the display buffer*/
    28e8:	4c17      	ldr	r4, [pc, #92]	; (2948 <oracle_init+0x80>)
    28ea:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
    28ee:	2200      	movs	r2, #0
    28f0:	4916      	ldr	r1, [pc, #88]	; (294c <oracle_init+0x84>)
    28f2:	4620      	mov	r0, r4
    28f4:	4d16      	ldr	r5, [pc, #88]	; (2950 <oracle_init+0x88>)
    28f6:	47a8      	blx	r5
	lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
	lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
    28f8:	a801      	add	r0, sp, #4
    28fa:	4b16      	ldr	r3, [pc, #88]	; (2954 <oracle_init+0x8c>)
    28fc:	4798      	blx	r3
	disp_drv.flush_cb = ssd1963_flush;    /*Set your driver function*/
    28fe:	4b16      	ldr	r3, [pc, #88]	; (2958 <oracle_init+0x90>)
    2900:	9304      	str	r3, [sp, #16]
	disp_drv.buffer = &disp_buf;          /*Assign the buffer to the display*/
    2902:	9402      	str	r4, [sp, #8]
	lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
    2904:	a801      	add	r0, sp, #4
    2906:	4b15      	ldr	r3, [pc, #84]	; (295c <oracle_init+0x94>)
    2908:	4798      	blx	r3
	
	lv_obj_t* scr = lv_disp_get_scr_act(NULL);
    290a:	2000      	movs	r0, #0
    290c:	4b14      	ldr	r3, [pc, #80]	; (2960 <oracle_init+0x98>)
    290e:	4798      	blx	r3
	
	lv_obj_t* random_text = lv_label_create(scr, NULL);
    2910:	2100      	movs	r1, #0
    2912:	4b14      	ldr	r3, [pc, #80]	; (2964 <oracle_init+0x9c>)
    2914:	4798      	blx	r3
    2916:	4604      	mov	r4, r0
	lv_obj_set_pos(random_text, 90, 35);
    2918:	2223      	movs	r2, #35	; 0x23
    291a:	215a      	movs	r1, #90	; 0x5a
    291c:	4b12      	ldr	r3, [pc, #72]	; (2968 <oracle_init+0xa0>)
    291e:	4798      	blx	r3
	lv_label_set_text(random_text, "Hello World");
    2920:	4912      	ldr	r1, [pc, #72]	; (296c <oracle_init+0xa4>)
    2922:	4620      	mov	r0, r4
    2924:	4b12      	ldr	r3, [pc, #72]	; (2970 <oracle_init+0xa8>)
    2926:	4798      	blx	r3
}
    2928:	b00d      	add	sp, #52	; 0x34
    292a:	bd30      	pop	{r4, r5, pc}
    292c:	00001c49 	.word	0x00001c49
    2930:	00001439 	.word	0x00001439
    2934:	00001305 	.word	0x00001305
    2938:	000011c1 	.word	0x000011c1
    293c:	000013c1 	.word	0x000013c1
    2940:	00002f45 	.word	0x00002f45
    2944:	000002d1 	.word	0x000002d1
    2948:	20002650 	.word	0x20002650
    294c:	200000d0 	.word	0x200000d0
    2950:	00011319 	.word	0x00011319
    2954:	000112b9 	.word	0x000112b9
    2958:	00000c35 	.word	0x00000c35
    295c:	00011339 	.word	0x00011339
    2960:	00002a29 	.word	0x00002a29
    2964:	0001a535 	.word	0x0001a535
    2968:	00003ac5 	.word	0x00003ac5
    296c:	0001b0c4 	.word	0x0001b0c4
    2970:	0001a235 	.word	0x0001a235

00002974 <oracle_service>:

void oracle_service(void)
{
    2974:	b508      	push	{r3, lr}
	delay_ms(1);
    2976:	2001      	movs	r0, #1
    2978:	4b02      	ldr	r3, [pc, #8]	; (2984 <oracle_service+0x10>)
    297a:	4798      	blx	r3
	lv_task_handler();
    297c:	4b02      	ldr	r3, [pc, #8]	; (2988 <oracle_service+0x14>)
    297e:	4798      	blx	r3
    2980:	bd08      	pop	{r3, pc}
    2982:	bf00      	nop
    2984:	00001535 	.word	0x00001535
    2988:	00013d75 	.word	0x00013d75

0000298c <lv_debug_check_null>:
bool lv_debug_check_null(const void * p)
{
    if(p) return true;

    return false;
}
    298c:	3000      	adds	r0, #0
    298e:	bf18      	it	ne
    2990:	2001      	movne	r0, #1
    2992:	4770      	bx	lr

00002994 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
    2994:	b5f0      	push	{r4, r5, r6, r7, lr}
    2996:	b0c3      	sub	sp, #268	; 0x10c
    2998:	4605      	mov	r5, r0
    299a:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
    299c:	4b1c      	ldr	r3, [pc, #112]	; (2a10 <lv_debug_log_error+0x7c>)
    299e:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
    29a0:	28e5      	cmp	r0, #229	; 0xe5
    29a2:	d82c      	bhi.n	29fe <lv_debug_log_error+0x6a>
    29a4:	4606      	mov	r6, r0
        char buf[255];
        char * bufp = buf;

        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
    29a6:	af02      	add	r7, sp, #8
    29a8:	4602      	mov	r2, r0
    29aa:	4629      	mov	r1, r5
    29ac:	4638      	mov	r0, r7
    29ae:	4b19      	ldr	r3, [pc, #100]	; (2a14 <lv_debug_log_error+0x80>)
    29b0:	4798      	blx	r3
        bufp += msg_len;
    29b2:	19bd      	adds	r5, r7, r6

        /*Add value in hey*/
        *bufp = ' ';
    29b4:	2320      	movs	r3, #32
    29b6:	55bb      	strb	r3, [r7, r6]
        bufp ++;
        *bufp = '(';
    29b8:	2328      	movs	r3, #40	; 0x28
    29ba:	706b      	strb	r3, [r5, #1]
        bufp ++;
        *bufp = '0';
    29bc:	2330      	movs	r3, #48	; 0x30
    29be:	70ab      	strb	r3, [r5, #2]
        bufp ++;
        *bufp = 'x';
    29c0:	2378      	movs	r3, #120	; 0x78
    29c2:	70eb      	strb	r3, [r5, #3]
        bufp ++;
    29c4:	1d29      	adds	r1, r5, #4
    29c6:	221c      	movs	r2, #28

        int8_t i;
        for(i = value_len * 2 - 1; i >= 0; i--) {
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;

            *bufp = hex[x];
    29c8:	4813      	ldr	r0, [pc, #76]	; (2a18 <lv_debug_log_error+0x84>)
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
    29ca:	fa24 f302 	lsr.w	r3, r4, r2
            *bufp = hex[x];
    29ce:	f003 030f 	and.w	r3, r3, #15
    29d2:	4403      	add	r3, r0
    29d4:	7d1b      	ldrb	r3, [r3, #20]
    29d6:	f801 3b01 	strb.w	r3, [r1], #1
    29da:	3a04      	subs	r2, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
    29dc:	f112 0f04 	cmn.w	r2, #4
    29e0:	d1f3      	bne.n	29ca <lv_debug_log_error+0x36>
            bufp++;
        }

        *bufp = ')';
    29e2:	2329      	movs	r3, #41	; 0x29
    29e4:	732b      	strb	r3, [r5, #12]
        bufp ++;

        *bufp = '\0';
    29e6:	2300      	movs	r3, #0
    29e8:	736b      	strb	r3, [r5, #13]
        LV_LOG_ERROR(buf);
    29ea:	ab02      	add	r3, sp, #8
    29ec:	9300      	str	r3, [sp, #0]
    29ee:	4b0b      	ldr	r3, [pc, #44]	; (2a1c <lv_debug_log_error+0x88>)
    29f0:	22bc      	movs	r2, #188	; 0xbc
    29f2:	490b      	ldr	r1, [pc, #44]	; (2a20 <lv_debug_log_error+0x8c>)
    29f4:	2003      	movs	r0, #3
    29f6:	4c0b      	ldr	r4, [pc, #44]	; (2a24 <lv_debug_log_error+0x90>)
    29f8:	47a0      	blx	r4
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
    29fa:	b043      	add	sp, #268	; 0x10c
    29fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_LOG_ERROR(msg);
    29fe:	9500      	str	r5, [sp, #0]
    2a00:	4b06      	ldr	r3, [pc, #24]	; (2a1c <lv_debug_log_error+0x88>)
    2a02:	22bf      	movs	r2, #191	; 0xbf
    2a04:	4906      	ldr	r1, [pc, #24]	; (2a20 <lv_debug_log_error+0x8c>)
    2a06:	2003      	movs	r0, #3
    2a08:	4c06      	ldr	r4, [pc, #24]	; (2a24 <lv_debug_log_error+0x90>)
    2a0a:	47a0      	blx	r4
}
    2a0c:	e7f5      	b.n	29fa <lv_debug_log_error+0x66>
    2a0e:	bf00      	nop
    2a10:	0001af4f 	.word	0x0001af4f
    2a14:	00012bfd 	.word	0x00012bfd
    2a18:	0001b0d0 	.word	0x0001b0d0
    2a1c:	0001b0f8 	.word	0x0001b0f8
    2a20:	0001b10c 	.word	0x0001b10c
    2a24:	00012805 	.word	0x00012805

00002a28 <lv_disp_get_scr_act>:
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
    2a28:	b108      	cbz	r0, 2a2e <lv_disp_get_scr_act+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
        return NULL;
    }

    return disp->act_scr;
    2a2a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    2a2c:	4770      	bx	lr
{
    2a2e:	b510      	push	{r4, lr}
    2a30:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
    2a32:	4b08      	ldr	r3, [pc, #32]	; (2a54 <lv_disp_get_scr_act+0x2c>)
    2a34:	4798      	blx	r3
    if(!disp) {
    2a36:	b110      	cbz	r0, 2a3e <lv_disp_get_scr_act+0x16>
    return disp->act_scr;
    2a38:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
    2a3a:	b002      	add	sp, #8
    2a3c:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_scr_act: no display registered to get its act. screen");
    2a3e:	4b06      	ldr	r3, [pc, #24]	; (2a58 <lv_disp_get_scr_act+0x30>)
    2a40:	9300      	str	r3, [sp, #0]
    2a42:	4b06      	ldr	r3, [pc, #24]	; (2a5c <lv_disp_get_scr_act+0x34>)
    2a44:	222e      	movs	r2, #46	; 0x2e
    2a46:	4906      	ldr	r1, [pc, #24]	; (2a60 <lv_disp_get_scr_act+0x38>)
    2a48:	2002      	movs	r0, #2
    2a4a:	4c06      	ldr	r4, [pc, #24]	; (2a64 <lv_disp_get_scr_act+0x3c>)
    2a4c:	47a0      	blx	r4
        return NULL;
    2a4e:	2000      	movs	r0, #0
    2a50:	e7f3      	b.n	2a3a <lv_disp_get_scr_act+0x12>
    2a52:	bf00      	nop
    2a54:	00011489 	.word	0x00011489
    2a58:	0001b2e8 	.word	0x0001b2e8
    2a5c:	0001b214 	.word	0x0001b214
    2a60:	0001b2bc 	.word	0x0001b2bc
    2a64:	00012805 	.word	0x00012805

00002a68 <lv_disp_get_layer_top>:
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
    2a68:	b108      	cbz	r0, 2a6e <lv_disp_get_layer_top+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
    2a6a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    2a6c:	4770      	bx	lr
{
    2a6e:	b510      	push	{r4, lr}
    2a70:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
    2a72:	4b08      	ldr	r3, [pc, #32]	; (2a94 <lv_disp_get_layer_top+0x2c>)
    2a74:	4798      	blx	r3
    if(!disp) {
    2a76:	b110      	cbz	r0, 2a7e <lv_disp_get_layer_top+0x16>
    return disp->top_layer;
    2a78:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
    2a7a:	b002      	add	sp, #8
    2a7c:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
    2a7e:	4b06      	ldr	r3, [pc, #24]	; (2a98 <lv_disp_get_layer_top+0x30>)
    2a80:	9300      	str	r3, [sp, #0]
    2a82:	4b06      	ldr	r3, [pc, #24]	; (2a9c <lv_disp_get_layer_top+0x34>)
    2a84:	224b      	movs	r2, #75	; 0x4b
    2a86:	4906      	ldr	r1, [pc, #24]	; (2aa0 <lv_disp_get_layer_top+0x38>)
    2a88:	2002      	movs	r0, #2
    2a8a:	4c06      	ldr	r4, [pc, #24]	; (2aa4 <lv_disp_get_layer_top+0x3c>)
    2a8c:	47a0      	blx	r4
        return NULL;
    2a8e:	2000      	movs	r0, #0
    2a90:	e7f3      	b.n	2a7a <lv_disp_get_layer_top+0x12>
    2a92:	bf00      	nop
    2a94:	00011489 	.word	0x00011489
    2a98:	0001b324 	.word	0x0001b324
    2a9c:	0001b228 	.word	0x0001b228
    2aa0:	0001b2bc 	.word	0x0001b2bc
    2aa4:	00012805 	.word	0x00012805

00002aa8 <lv_disp_get_layer_sys>:
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
    if(!disp) disp = lv_disp_get_default();
    2aa8:	b108      	cbz	r0, 2aae <lv_disp_get_layer_sys+0x6>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
    2aaa:	6c40      	ldr	r0, [r0, #68]	; 0x44
    2aac:	4770      	bx	lr
{
    2aae:	b510      	push	{r4, lr}
    2ab0:	b082      	sub	sp, #8
    if(!disp) disp = lv_disp_get_default();
    2ab2:	4b08      	ldr	r3, [pc, #32]	; (2ad4 <lv_disp_get_layer_sys+0x2c>)
    2ab4:	4798      	blx	r3
    if(!disp) {
    2ab6:	b110      	cbz	r0, 2abe <lv_disp_get_layer_sys+0x16>
    return disp->sys_layer;
    2ab8:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
    2aba:	b002      	add	sp, #8
    2abc:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
    2abe:	4b06      	ldr	r3, [pc, #24]	; (2ad8 <lv_disp_get_layer_sys+0x30>)
    2ac0:	9300      	str	r3, [sp, #0]
    2ac2:	4b06      	ldr	r3, [pc, #24]	; (2adc <lv_disp_get_layer_sys+0x34>)
    2ac4:	225c      	movs	r2, #92	; 0x5c
    2ac6:	4906      	ldr	r1, [pc, #24]	; (2ae0 <lv_disp_get_layer_sys+0x38>)
    2ac8:	2002      	movs	r0, #2
    2aca:	4c06      	ldr	r4, [pc, #24]	; (2ae4 <lv_disp_get_layer_sys+0x3c>)
    2acc:	47a0      	blx	r4
        return NULL;
    2ace:	2000      	movs	r0, #0
    2ad0:	e7f3      	b.n	2aba <lv_disp_get_layer_sys+0x12>
    2ad2:	bf00      	nop
    2ad4:	00011489 	.word	0x00011489
    2ad8:	0001b360 	.word	0x0001b360
    2adc:	0001b240 	.word	0x0001b240
    2ae0:	0001b2bc 	.word	0x0001b2bc
    2ae4:	00012805 	.word	0x00012805

00002ae8 <obj_to_foreground>:
static void obj_to_foreground(lv_obj_t * obj)
{
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
    while(i != NULL) {
    2ae8:	b1a0      	cbz	r0, 2b14 <obj_to_foreground+0x2c>
{
    2aea:	b538      	push	{r3, r4, r5, lr}
    2aec:	4603      	mov	r3, r0
    while(i != NULL) {
    2aee:	2400      	movs	r4, #0
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
    2af0:	4d09      	ldr	r5, [pc, #36]	; (2b18 <obj_to_foreground+0x30>)
        if(i->top != 0) last_top = i;
    2af2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
    2af6:	f002 0220 	and.w	r2, r2, #32
    2afa:	2a00      	cmp	r2, #0
    2afc:	bf18      	it	ne
    2afe:	461c      	movne	r4, r3
        i = lv_obj_get_parent(i);
    2b00:	4618      	mov	r0, r3
    2b02:	47a8      	blx	r5
    while(i != NULL) {
    2b04:	4603      	mov	r3, r0
    2b06:	2800      	cmp	r0, #0
    2b08:	d1f3      	bne.n	2af2 <obj_to_foreground+0xa>
    }

    if(last_top != NULL) {
    2b0a:	b114      	cbz	r4, 2b12 <obj_to_foreground+0x2a>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
    2b0c:	4620      	mov	r0, r4
    2b0e:	4b03      	ldr	r3, [pc, #12]	; (2b1c <obj_to_foreground+0x34>)
    2b10:	4798      	blx	r3
    2b12:	bd38      	pop	{r3, r4, r5, pc}
    2b14:	4770      	bx	lr
    2b16:	bf00      	nop
    2b18:	00003305 	.word	0x00003305
    2b1c:	00003a3d 	.word	0x00003a3d

00002b20 <focus_next_core>:
{
    2b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return;
    2b24:	7d03      	ldrb	r3, [r0, #20]
    2b26:	f013 0f01 	tst.w	r3, #1
    2b2a:	d12a      	bne.n	2b82 <focus_next_core+0x62>
    2b2c:	4617      	mov	r7, r2
    2b2e:	468a      	mov	sl, r1
    2b30:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
    2b32:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
    2b34:	f04f 0901 	mov.w	r9, #1
    lv_obj_t ** obj_sentinel = NULL;
    2b38:	2500      	movs	r5, #0
        if(!lv_obj_get_hidden(*obj_next)) break;
    2b3a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2c00 <focus_next_core+0xe0>
                can_begin = false;
    2b3e:	46ab      	mov	fp, r5
    2b40:	e04a      	b.n	2bd8 <focus_next_core+0xb8>
            if(group->wrap || obj_sentinel == NULL) {
    2b42:	7d33      	ldrb	r3, [r6, #20]
    2b44:	f013 0f10 	tst.w	r3, #16
    2b48:	d100      	bne.n	2b4c <focus_next_core+0x2c>
    2b4a:	b9d5      	cbnz	r5, 2b82 <focus_next_core+0x62>
                if(!can_begin) return;
    2b4c:	f1b9 0f00 	cmp.w	r9, #0
    2b50:	d017      	beq.n	2b82 <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    2b52:	4630      	mov	r0, r6
    2b54:	47d0      	blx	sl
    2b56:	4604      	mov	r4, r0
        if(obj_sentinel == NULL) {
    2b58:	2d00      	cmp	r5, #0
    2b5a:	d035      	beq.n	2bc8 <focus_next_core+0xa8>
                can_begin = false;
    2b5c:	46d9      	mov	r9, fp
    2b5e:	e046      	b.n	2bee <focus_next_core+0xce>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
    2b60:	68f3      	ldr	r3, [r6, #12]
    2b62:	42a3      	cmp	r3, r4
    2b64:	d00d      	beq.n	2b82 <focus_next_core+0x62>
    if(group->obj_focus) {
    2b66:	b193      	cbz	r3, 2b8e <focus_next_core+0x6e>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    2b68:	6818      	ldr	r0, [r3, #0]
    2b6a:	69c3      	ldr	r3, [r0, #28]
    2b6c:	2200      	movs	r2, #0
    2b6e:	2117      	movs	r1, #23
    2b70:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
    2b72:	68f3      	ldr	r3, [r6, #12]
    2b74:	2200      	movs	r2, #0
    2b76:	210e      	movs	r1, #14
    2b78:	6818      	ldr	r0, [r3, #0]
    2b7a:	4b1e      	ldr	r3, [pc, #120]	; (2bf4 <focus_next_core+0xd4>)
    2b7c:	4798      	blx	r3
        if(res != LV_RES_OK) return;
    2b7e:	2801      	cmp	r0, #1
    2b80:	d001      	beq.n	2b86 <focus_next_core+0x66>
    2b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(*group->obj_focus);
    2b86:	68f3      	ldr	r3, [r6, #12]
    2b88:	6818      	ldr	r0, [r3, #0]
    2b8a:	4b1b      	ldr	r3, [pc, #108]	; (2bf8 <focus_next_core+0xd8>)
    2b8c:	4798      	blx	r3
    group->obj_focus = obj_next;
    2b8e:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
    2b90:	6820      	ldr	r0, [r4, #0]
    2b92:	69c3      	ldr	r3, [r0, #28]
    2b94:	2200      	movs	r2, #0
    2b96:	2116      	movs	r1, #22
    2b98:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
    2b9a:	68f3      	ldr	r3, [r6, #12]
    2b9c:	2200      	movs	r2, #0
    2b9e:	210d      	movs	r1, #13
    2ba0:	6818      	ldr	r0, [r3, #0]
    2ba2:	4b14      	ldr	r3, [pc, #80]	; (2bf4 <focus_next_core+0xd4>)
    2ba4:	4798      	blx	r3
    if(res != LV_RES_OK) return;
    2ba6:	2801      	cmp	r0, #1
    2ba8:	d1eb      	bne.n	2b82 <focus_next_core+0x62>
    obj_to_foreground(*group->obj_focus);
    2baa:	68f3      	ldr	r3, [r6, #12]
    2bac:	6818      	ldr	r0, [r3, #0]
    2bae:	4b13      	ldr	r3, [pc, #76]	; (2bfc <focus_next_core+0xdc>)
    2bb0:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
    2bb2:	68f3      	ldr	r3, [r6, #12]
    2bb4:	6818      	ldr	r0, [r3, #0]
    2bb6:	4b10      	ldr	r3, [pc, #64]	; (2bf8 <focus_next_core+0xd8>)
    2bb8:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
    2bba:	6933      	ldr	r3, [r6, #16]
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d0e0      	beq.n	2b82 <focus_next_core+0x62>
    2bc0:	4630      	mov	r0, r6
    2bc2:	4798      	blx	r3
    2bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(obj_sentinel == NULL) return; /*Group is empty*/
    2bc8:	2800      	cmp	r0, #0
    2bca:	d0da      	beq.n	2b82 <focus_next_core+0x62>
                obj_next  = begin(&group->obj_ll);
    2bcc:	4605      	mov	r5, r0
                can_begin = false;
    2bce:	46d9      	mov	r9, fp
        if(!lv_obj_get_hidden(*obj_next)) break;
    2bd0:	6820      	ldr	r0, [r4, #0]
    2bd2:	47c0      	blx	r8
    2bd4:	2800      	cmp	r0, #0
    2bd6:	d0c3      	beq.n	2b60 <focus_next_core+0x40>
        if(obj_next == NULL) {
    2bd8:	2c00      	cmp	r4, #0
    2bda:	d0b2      	beq.n	2b42 <focus_next_core+0x22>
    2bdc:	2d00      	cmp	r5, #0
    2bde:	bf08      	it	eq
    2be0:	4625      	moveq	r5, r4
            obj_next = move(&group->obj_ll, obj_next);
    2be2:	4621      	mov	r1, r4
    2be4:	4630      	mov	r0, r6
    2be6:	47b8      	blx	r7
    2be8:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
    2bea:	42a8      	cmp	r0, r5
    2bec:	d0c9      	beq.n	2b82 <focus_next_core+0x62>
        if(obj_next == NULL) continue;
    2bee:	2c00      	cmp	r4, #0
    2bf0:	d1ee      	bne.n	2bd0 <focus_next_core+0xb0>
    2bf2:	e7f1      	b.n	2bd8 <focus_next_core+0xb8>
    2bf4:	00003155 	.word	0x00003155
    2bf8:	000039a9 	.word	0x000039a9
    2bfc:	00002ae9 	.word	0x00002ae9
    2c00:	0000382d 	.word	0x0000382d

00002c04 <_lv_group_init>:
{
    2c04:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
    2c06:	2118      	movs	r1, #24
    2c08:	4801      	ldr	r0, [pc, #4]	; (2c10 <_lv_group_init+0xc>)
    2c0a:	4b02      	ldr	r3, [pc, #8]	; (2c14 <_lv_group_init+0x10>)
    2c0c:	4798      	blx	r3
    2c0e:	bd08      	pop	{r3, pc}
    2c10:	20006e08 	.word	0x20006e08
    2c14:	000124a1 	.word	0x000124a1

00002c18 <lv_group_focus_next>:
{
    2c18:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
    2c1a:	4a02      	ldr	r2, [pc, #8]	; (2c24 <lv_group_focus_next+0xc>)
    2c1c:	4902      	ldr	r1, [pc, #8]	; (2c28 <lv_group_focus_next+0x10>)
    2c1e:	4b03      	ldr	r3, [pc, #12]	; (2c2c <lv_group_focus_next+0x14>)
    2c20:	4798      	blx	r3
    2c22:	bd08      	pop	{r3, pc}
    2c24:	00012565 	.word	0x00012565
    2c28:	00012551 	.word	0x00012551
    2c2c:	00002b21 	.word	0x00002b21

00002c30 <lv_group_focus_prev>:
{
    2c30:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
    2c32:	4a02      	ldr	r2, [pc, #8]	; (2c3c <lv_group_focus_prev+0xc>)
    2c34:	4902      	ldr	r1, [pc, #8]	; (2c40 <lv_group_focus_prev+0x10>)
    2c36:	4b03      	ldr	r3, [pc, #12]	; (2c44 <lv_group_focus_prev+0x14>)
    2c38:	4798      	blx	r3
    2c3a:	bd08      	pop	{r3, pc}
    2c3c:	00012591 	.word	0x00012591
    2c40:	0001255b 	.word	0x0001255b
    2c44:	00002b21 	.word	0x00002b21

00002c48 <lv_group_refocus>:
{
    2c48:	b538      	push	{r3, r4, r5, lr}
    2c4a:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
    2c4c:	7d03      	ldrb	r3, [r0, #20]
    2c4e:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
    2c52:	f043 0310 	orr.w	r3, r3, #16
    2c56:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
    2c58:	f013 0f08 	tst.w	r3, #8
        lv_group_focus_next(g);
    2c5c:	bf0c      	ite	eq
    2c5e:	4b04      	ldreq	r3, [pc, #16]	; (2c70 <lv_group_refocus+0x28>)
        lv_group_focus_prev(g);
    2c60:	4b04      	ldrne	r3, [pc, #16]	; (2c74 <lv_group_refocus+0x2c>)
    2c62:	4798      	blx	r3
    g->wrap = temp_wrap;
    2c64:	7d23      	ldrb	r3, [r4, #20]
    2c66:	f365 1304 	bfi	r3, r5, #4, #1
    2c6a:	7523      	strb	r3, [r4, #20]
    2c6c:	bd38      	pop	{r3, r4, r5, pc}
    2c6e:	bf00      	nop
    2c70:	00002c19 	.word	0x00002c19
    2c74:	00002c31 	.word	0x00002c31

00002c78 <lv_group_add_obj>:
    if(group == NULL) return;
    2c78:	2800      	cmp	r0, #0
    2c7a:	d04f      	beq.n	2d1c <lv_group_add_obj+0xa4>
{
    2c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7e:	b083      	sub	sp, #12
    2c80:	4605      	mov	r5, r0
    2c82:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
    2c84:	4607      	mov	r7, r0
    2c86:	4b26      	ldr	r3, [pc, #152]	; (2d20 <lv_group_add_obj+0xa8>)
    2c88:	4798      	blx	r3
    2c8a:	4601      	mov	r1, r0
    2c8c:	b1a0      	cbz	r0, 2cb8 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
    2c8e:	6803      	ldr	r3, [r0, #0]
    2c90:	429c      	cmp	r4, r3
    2c92:	d007      	beq.n	2ca4 <lv_group_add_obj+0x2c>
    _LV_LL_READ(group->obj_ll, obj_i) {
    2c94:	4e23      	ldr	r6, [pc, #140]	; (2d24 <lv_group_add_obj+0xac>)
    2c96:	4638      	mov	r0, r7
    2c98:	47b0      	blx	r6
    2c9a:	4601      	mov	r1, r0
    2c9c:	b160      	cbz	r0, 2cb8 <lv_group_add_obj+0x40>
        if((*obj_i) == obj) {
    2c9e:	680b      	ldr	r3, [r1, #0]
    2ca0:	42a3      	cmp	r3, r4
    2ca2:	d1f8      	bne.n	2c96 <lv_group_add_obj+0x1e>
            LV_LOG_INFO("lv_group_add_obj: the object is already added to this group");
    2ca4:	4b20      	ldr	r3, [pc, #128]	; (2d28 <lv_group_add_obj+0xb0>)
    2ca6:	9300      	str	r3, [sp, #0]
    2ca8:	4b20      	ldr	r3, [pc, #128]	; (2d2c <lv_group_add_obj+0xb4>)
    2caa:	2275      	movs	r2, #117	; 0x75
    2cac:	4920      	ldr	r1, [pc, #128]	; (2d30 <lv_group_add_obj+0xb8>)
    2cae:	2001      	movs	r0, #1
    2cb0:	4c20      	ldr	r4, [pc, #128]	; (2d34 <lv_group_add_obj+0xbc>)
    2cb2:	47a0      	blx	r4
}
    2cb4:	b003      	add	sp, #12
    2cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(obj->group_p) {
    2cb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2cba:	b173      	cbz	r3, 2cda <lv_group_add_obj+0x62>
        if(lv_obj_is_focused(obj)) {
    2cbc:	4620      	mov	r0, r4
    2cbe:	4b1e      	ldr	r3, [pc, #120]	; (2d38 <lv_group_add_obj+0xc0>)
    2cc0:	4798      	blx	r3
    2cc2:	b150      	cbz	r0, 2cda <lv_group_add_obj+0x62>
            lv_group_refocus(obj->group_p);
    2cc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2cc6:	4b1d      	ldr	r3, [pc, #116]	; (2d3c <lv_group_add_obj+0xc4>)
    2cc8:	4798      	blx	r3
            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
    2cca:	4b1d      	ldr	r3, [pc, #116]	; (2d40 <lv_group_add_obj+0xc8>)
    2ccc:	9300      	str	r3, [sp, #0]
    2cce:	4b17      	ldr	r3, [pc, #92]	; (2d2c <lv_group_add_obj+0xb4>)
    2cd0:	227f      	movs	r2, #127	; 0x7f
    2cd2:	4917      	ldr	r1, [pc, #92]	; (2d30 <lv_group_add_obj+0xb8>)
    2cd4:	2001      	movs	r0, #1
    2cd6:	4e17      	ldr	r6, [pc, #92]	; (2d34 <lv_group_add_obj+0xbc>)
    2cd8:	47b0      	blx	r6
    obj->group_p     = group;
    2cda:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
    2cdc:	4628      	mov	r0, r5
    2cde:	4b19      	ldr	r3, [pc, #100]	; (2d44 <lv_group_add_obj+0xcc>)
    2ce0:	4798      	blx	r3
    2ce2:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
    2ce4:	4b18      	ldr	r3, [pc, #96]	; (2d48 <lv_group_add_obj+0xd0>)
    2ce6:	4798      	blx	r3
    2ce8:	b158      	cbz	r0, 2d02 <lv_group_add_obj+0x8a>
    if(next == NULL) return;
    2cea:	2e00      	cmp	r6, #0
    2cec:	d0e2      	beq.n	2cb4 <lv_group_add_obj+0x3c>
    *next = obj;
    2cee:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
    2cf0:	4628      	mov	r0, r5
    2cf2:	4b0b      	ldr	r3, [pc, #44]	; (2d20 <lv_group_add_obj+0xa8>)
    2cf4:	4798      	blx	r3
    2cf6:	4286      	cmp	r6, r0
    2cf8:	d1dc      	bne.n	2cb4 <lv_group_add_obj+0x3c>
        lv_group_refocus(group);
    2cfa:	4628      	mov	r0, r5
    2cfc:	4b0f      	ldr	r3, [pc, #60]	; (2d3c <lv_group_add_obj+0xc4>)
    2cfe:	4798      	blx	r3
    2d00:	e7d8      	b.n	2cb4 <lv_group_add_obj+0x3c>
    LV_ASSERT_MEM(next);
    2d02:	4b0a      	ldr	r3, [pc, #40]	; (2d2c <lv_group_add_obj+0xb4>)
    2d04:	9300      	str	r3, [sp, #0]
    2d06:	2285      	movs	r2, #133	; 0x85
    2d08:	4909      	ldr	r1, [pc, #36]	; (2d30 <lv_group_add_obj+0xb8>)
    2d0a:	2003      	movs	r0, #3
    2d0c:	4c09      	ldr	r4, [pc, #36]	; (2d34 <lv_group_add_obj+0xbc>)
    2d0e:	47a0      	blx	r4
    2d10:	4632      	mov	r2, r6
    2d12:	2300      	movs	r3, #0
    2d14:	480d      	ldr	r0, [pc, #52]	; (2d4c <lv_group_add_obj+0xd4>)
    2d16:	490e      	ldr	r1, [pc, #56]	; (2d50 <lv_group_add_obj+0xd8>)
    2d18:	4788      	blx	r1
    2d1a:	e7fe      	b.n	2d1a <lv_group_add_obj+0xa2>
    2d1c:	4770      	bx	lr
    2d1e:	bf00      	nop
    2d20:	00012551 	.word	0x00012551
    2d24:	00012565 	.word	0x00012565
    2d28:	0001b4cc 	.word	0x0001b4cc
    2d2c:	0001b47c 	.word	0x0001b47c
    2d30:	0001b490 	.word	0x0001b490
    2d34:	00012805 	.word	0x00012805
    2d38:	00005681 	.word	0x00005681
    2d3c:	00002c49 	.word	0x00002c49
    2d40:	0001b508 	.word	0x0001b508
    2d44:	00012505 	.word	0x00012505
    2d48:	0000298d 	.word	0x0000298d
    2d4c:	0001b4bc 	.word	0x0001b4bc
    2d50:	00002995 	.word	0x00002995

00002d54 <lv_group_remove_obj>:
{
    2d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    lv_group_t * g = obj->group_p;
    2d58:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    if(g == NULL) return;
    2d5c:	f1b8 0f00 	cmp.w	r8, #0
    2d60:	d051      	beq.n	2e06 <lv_group_remove_obj+0xb2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
    2d62:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d04d      	beq.n	2e06 <lv_group_remove_obj+0xb2>
    2d6a:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
    2d6c:	681b      	ldr	r3, [r3, #0]
    2d6e:	4298      	cmp	r0, r3
    2d70:	d01e      	beq.n	2db0 <lv_group_remove_obj+0x5c>
    _LV_LL_READ(g->obj_ll, i) {
    2d72:	4646      	mov	r6, r8
    2d74:	4640      	mov	r0, r8
    2d76:	4b25      	ldr	r3, [pc, #148]	; (2e0c <lv_group_remove_obj+0xb8>)
    2d78:	4798      	blx	r3
    2d7a:	4604      	mov	r4, r0
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d042      	beq.n	2e06 <lv_group_remove_obj+0xb2>
        if(*i == obj) {
    2d80:	6803      	ldr	r3, [r0, #0]
    2d82:	429d      	cmp	r5, r3
    2d84:	d009      	beq.n	2d9a <lv_group_remove_obj+0x46>
    _LV_LL_READ(g->obj_ll, i) {
    2d86:	4f22      	ldr	r7, [pc, #136]	; (2e10 <lv_group_remove_obj+0xbc>)
    2d88:	4621      	mov	r1, r4
    2d8a:	4630      	mov	r0, r6
    2d8c:	47b8      	blx	r7
    2d8e:	4604      	mov	r4, r0
    2d90:	2800      	cmp	r0, #0
    2d92:	d038      	beq.n	2e06 <lv_group_remove_obj+0xb2>
        if(*i == obj) {
    2d94:	6823      	ldr	r3, [r4, #0]
    2d96:	429d      	cmp	r5, r3
    2d98:	d1f6      	bne.n	2d88 <lv_group_remove_obj+0x34>
            _lv_ll_remove(&g->obj_ll, i);
    2d9a:	4621      	mov	r1, r4
    2d9c:	4640      	mov	r0, r8
    2d9e:	4b1d      	ldr	r3, [pc, #116]	; (2e14 <lv_group_remove_obj+0xc0>)
    2da0:	4798      	blx	r3
            lv_mem_free(i);
    2da2:	4620      	mov	r0, r4
    2da4:	4b1c      	ldr	r3, [pc, #112]	; (2e18 <lv_group_remove_obj+0xc4>)
    2da6:	4798      	blx	r3
            obj->group_p = NULL;
    2da8:	2300      	movs	r3, #0
    2daa:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
    2dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(g->frozen) g->frozen = 0;
    2db0:	f898 3014 	ldrb.w	r3, [r8, #20]
    2db4:	f013 0f01 	tst.w	r3, #1
    2db8:	d005      	beq.n	2dc6 <lv_group_remove_obj+0x72>
    2dba:	f898 3014 	ldrb.w	r3, [r8, #20]
    2dbe:	f36f 0300 	bfc	r3, #0, #1
    2dc2:	f888 3014 	strb.w	r3, [r8, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
    2dc6:	4640      	mov	r0, r8
    2dc8:	4b10      	ldr	r3, [pc, #64]	; (2e0c <lv_group_remove_obj+0xb8>)
    2dca:	4798      	blx	r3
    2dcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2dd0:	4283      	cmp	r3, r0
    2dd2:	d00b      	beq.n	2dec <lv_group_remove_obj+0x98>
            lv_group_refocus(g);
    2dd4:	4640      	mov	r0, r8
    2dd6:	4b11      	ldr	r3, [pc, #68]	; (2e1c <lv_group_remove_obj+0xc8>)
    2dd8:	4798      	blx	r3
    if(*g->obj_focus == obj) {
    2dda:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	429d      	cmp	r5, r3
        g->obj_focus = NULL;
    2de2:	bf04      	itt	eq
    2de4:	2300      	moveq	r3, #0
    2de6:	f8c8 300c 	streq.w	r3, [r8, #12]
    2dea:	e7c2      	b.n	2d72 <lv_group_remove_obj+0x1e>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
    2dec:	4640      	mov	r0, r8
    2dee:	4b0c      	ldr	r3, [pc, #48]	; (2e20 <lv_group_remove_obj+0xcc>)
    2df0:	4798      	blx	r3
    2df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2df6:	4298      	cmp	r0, r3
    2df8:	d1ec      	bne.n	2dd4 <lv_group_remove_obj+0x80>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
    2dfa:	6800      	ldr	r0, [r0, #0]
    2dfc:	69c3      	ldr	r3, [r0, #28]
    2dfe:	2200      	movs	r2, #0
    2e00:	2117      	movs	r1, #23
    2e02:	4798      	blx	r3
    2e04:	e7e9      	b.n	2dda <lv_group_remove_obj+0x86>
    2e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e0a:	bf00      	nop
    2e0c:	00012551 	.word	0x00012551
    2e10:	00012565 	.word	0x00012565
    2e14:	0001263d 	.word	0x0001263d
    2e18:	00012a6d 	.word	0x00012a6d
    2e1c:	00002c49 	.word	0x00002c49
    2e20:	0001255b 	.word	0x0001255b

00002e24 <lv_group_get_focused>:
    if(!group) return NULL;
    2e24:	b118      	cbz	r0, 2e2e <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
    2e26:	68c3      	ldr	r3, [r0, #12]
    2e28:	b11b      	cbz	r3, 2e32 <lv_group_get_focused+0xe>
    return *group->obj_focus;
    2e2a:	6818      	ldr	r0, [r3, #0]
    2e2c:	4770      	bx	lr
    if(!group) return NULL;
    2e2e:	2000      	movs	r0, #0
    2e30:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
    2e32:	2000      	movs	r0, #0
}
    2e34:	4770      	bx	lr

00002e36 <lv_group_get_editing>:
    if(!group) return false;
    2e36:	b118      	cbz	r0, 2e40 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
    2e38:	7d00      	ldrb	r0, [r0, #20]
    2e3a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2e3e:	4770      	bx	lr
    if(!group) return false;
    2e40:	2000      	movs	r0, #0
}
    2e42:	4770      	bx	lr

00002e44 <lv_indev_get_act>:
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
    2e44:	4b01      	ldr	r3, [pc, #4]	; (2e4c <lv_indev_get_act+0x8>)
    2e46:	6858      	ldr	r0, [r3, #4]
    2e48:	4770      	bx	lr
    2e4a:	bf00      	nop
    2e4c:	20002674 	.word	0x20002674

00002e50 <lv_indev_reset>:
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
    2e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(indev) {
    2e52:	b1b0      	cbz	r0, 2e82 <lv_indev_reset+0x32>
    2e54:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
    2e56:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    2e5a:	f042 0202 	orr.w	r2, r2, #2
    2e5e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
    2e62:	4a18      	ldr	r2, [pc, #96]	; (2ec4 <lv_indev_reset+0x74>)
    2e64:	6852      	ldr	r2, [r2, #4]
    2e66:	4290      	cmp	r0, r2
    2e68:	d004      	beq.n	2e74 <lv_indev_reset+0x24>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
    2e6a:	b139      	cbz	r1, 2e7c <lv_indev_reset+0x2c>
    2e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2e6e:	4291      	cmp	r1, r2
    2e70:	d004      	beq.n	2e7c <lv_indev_reset+0x2c>
    2e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(indev_act == indev) indev_obj_act = NULL;
    2e74:	2000      	movs	r0, #0
    2e76:	4a13      	ldr	r2, [pc, #76]	; (2ec4 <lv_indev_reset+0x74>)
    2e78:	6010      	str	r0, [r2, #0]
    2e7a:	e7f6      	b.n	2e6a <lv_indev_reset+0x1a>
            indev->proc.types.pointer.last_pressed = NULL;
    2e7c:	2200      	movs	r2, #0
    2e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    2e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e82:	460c      	mov	r4, r1
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
    2e84:	2000      	movs	r0, #0
    2e86:	4b10      	ldr	r3, [pc, #64]	; (2ec8 <lv_indev_reset+0x78>)
    2e88:	4798      	blx	r3
        while(i) {
    2e8a:	4603      	mov	r3, r0
    2e8c:	2800      	cmp	r0, #0
    2e8e:	d0f0      	beq.n	2e72 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
    2e90:	4d0c      	ldr	r5, [pc, #48]	; (2ec4 <lv_indev_reset+0x74>)
    2e92:	2700      	movs	r7, #0
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
    2e94:	4e0c      	ldr	r6, [pc, #48]	; (2ec8 <lv_indev_reset+0x78>)
    2e96:	e005      	b.n	2ea4 <lv_indev_reset+0x54>
                i->proc.types.pointer.last_pressed = NULL;
    2e98:	63df      	str	r7, [r3, #60]	; 0x3c
            i = lv_indev_get_next(i);
    2e9a:	4618      	mov	r0, r3
    2e9c:	47b0      	blx	r6
        while(i) {
    2e9e:	4603      	mov	r3, r0
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d0e6      	beq.n	2e72 <lv_indev_reset+0x22>
            i->proc.reset_query = 1;
    2ea4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    2ea8:	f042 0202 	orr.w	r2, r2, #2
    2eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
    2eb0:	686a      	ldr	r2, [r5, #4]
    2eb2:	429a      	cmp	r2, r3
    2eb4:	bf08      	it	eq
    2eb6:	602f      	streq	r7, [r5, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
    2eb8:	2c00      	cmp	r4, #0
    2eba:	d0ed      	beq.n	2e98 <lv_indev_reset+0x48>
    2ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2ebe:	4294      	cmp	r4, r2
    2ec0:	d1eb      	bne.n	2e9a <lv_indev_reset+0x4a>
    2ec2:	e7e9      	b.n	2e98 <lv_indev_reset+0x48>
    2ec4:	20002674 	.word	0x20002674
    2ec8:	000115c9 	.word	0x000115c9

00002ecc <_lv_indev_init>:
{
    2ecc:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
    2ece:	2100      	movs	r1, #0
    2ed0:	4608      	mov	r0, r1
    2ed2:	4b01      	ldr	r3, [pc, #4]	; (2ed8 <_lv_indev_init+0xc>)
    2ed4:	4798      	blx	r3
    2ed6:	bd08      	pop	{r3, pc}
    2ed8:	00002e51 	.word	0x00002e51

00002edc <lv_indev_get_obj_act>:
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
    2edc:	4b01      	ldr	r3, [pc, #4]	; (2ee4 <lv_indev_get_obj_act+0x8>)
    2ede:	6818      	ldr	r0, [r3, #0]
    2ee0:	4770      	bx	lr
    2ee2:	bf00      	nop
    2ee4:	20002674 	.word	0x20002674

00002ee8 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
    2ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2eec:	4689      	mov	r9, r1
    2eee:	4690      	mov	r8, r2
    lv_obj_t * i;
    _LV_LL_READ(obj->child_ll, i) {
    2ef0:	f100 0a04 	add.w	sl, r0, #4
    2ef4:	4650      	mov	r0, sl
    2ef6:	4b11      	ldr	r3, [pc, #68]	; (2f3c <refresh_children_position+0x54>)
    2ef8:	4798      	blx	r3
    2efa:	b1e0      	cbz	r0, 2f36 <refresh_children_position+0x4e>
    2efc:	4604      	mov	r4, r0
        i->coords.x1 += x_diff;
    2efe:	fa1f f689 	uxth.w	r6, r9
        i->coords.y1 += y_diff;
    2f02:	fa1f f588 	uxth.w	r5, r8
    _LV_LL_READ(obj->child_ll, i) {
    2f06:	4f0e      	ldr	r7, [pc, #56]	; (2f40 <refresh_children_position+0x58>)
        i->coords.x1 += x_diff;
    2f08:	8a23      	ldrh	r3, [r4, #16]
    2f0a:	4433      	add	r3, r6
    2f0c:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
    2f0e:	8a63      	ldrh	r3, [r4, #18]
    2f10:	442b      	add	r3, r5
    2f12:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
    2f14:	8aa3      	ldrh	r3, [r4, #20]
    2f16:	4433      	add	r3, r6
    2f18:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
    2f1a:	8ae3      	ldrh	r3, [r4, #22]
    2f1c:	442b      	add	r3, r5
    2f1e:	82e3      	strh	r3, [r4, #22]

        refresh_children_position(i, x_diff, y_diff);
    2f20:	4642      	mov	r2, r8
    2f22:	4649      	mov	r1, r9
    2f24:	4620      	mov	r0, r4
    2f26:	f7ff ffdf 	bl	2ee8 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
    2f2a:	4621      	mov	r1, r4
    2f2c:	4650      	mov	r0, sl
    2f2e:	47b8      	blx	r7
    2f30:	4604      	mov	r4, r0
    2f32:	2800      	cmp	r0, #0
    2f34:	d1e8      	bne.n	2f08 <refresh_children_position+0x20>
    2f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f3a:	bf00      	nop
    2f3c:	00012551 	.word	0x00012551
    2f40:	00012565 	.word	0x00012565

00002f44 <lv_init>:
{
    2f44:	b530      	push	{r4, r5, lr}
    2f46:	b085      	sub	sp, #20
    if(lv_initialized) {
    2f48:	4b21      	ldr	r3, [pc, #132]	; (2fd0 <lv_init+0x8c>)
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d136      	bne.n	2fbe <lv_init+0x7a>
    _lv_mem_init();
    2f50:	4b20      	ldr	r3, [pc, #128]	; (2fd4 <lv_init+0x90>)
    2f52:	4798      	blx	r3
    _lv_task_core_init();
    2f54:	4b20      	ldr	r3, [pc, #128]	; (2fd8 <lv_init+0x94>)
    2f56:	4798      	blx	r3
    _lv_fs_init();
    2f58:	4b20      	ldr	r3, [pc, #128]	; (2fdc <lv_init+0x98>)
    2f5a:	4798      	blx	r3
    _lv_anim_core_init();
    2f5c:	4b20      	ldr	r3, [pc, #128]	; (2fe0 <lv_init+0x9c>)
    2f5e:	4798      	blx	r3
    _lv_group_init();
    2f60:	4b20      	ldr	r3, [pc, #128]	; (2fe4 <lv_init+0xa0>)
    2f62:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
    2f64:	2110      	movs	r1, #16
    2f66:	4820      	ldr	r0, [pc, #128]	; (2fe8 <lv_init+0xa4>)
    2f68:	4c20      	ldr	r4, [pc, #128]	; (2fec <lv_init+0xa8>)
    2f6a:	47a0      	blx	r4
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
    2f6c:	4b20      	ldr	r3, [pc, #128]	; (2ff0 <lv_init+0xac>)
    2f6e:	9302      	str	r3, [sp, #8]
    2f70:	9301      	str	r3, [sp, #4]
    2f72:	9300      	str	r3, [sp, #0]
    2f74:	2202      	movs	r2, #2
    2f76:	f04f 011f 	mov.w	r1, #31
    2f7a:	f64f 0000 	movw	r0, #63488	; 0xf800
    2f7e:	4d1d      	ldr	r5, [pc, #116]	; (2ff4 <lv_init+0xb0>)
    2f80:	47a8      	blx	r5
    lv_theme_set_act(th);
    2f82:	4b1d      	ldr	r3, [pc, #116]	; (2ff8 <lv_init+0xb4>)
    2f84:	4798      	blx	r3
    _lv_refr_init();
    2f86:	4b1d      	ldr	r3, [pc, #116]	; (2ffc <lv_init+0xb8>)
    2f88:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
    2f8a:	f44f 71b8 	mov.w	r1, #368	; 0x170
    2f8e:	481c      	ldr	r0, [pc, #112]	; (3000 <lv_init+0xbc>)
    2f90:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
    2f92:	2160      	movs	r1, #96	; 0x60
    2f94:	481b      	ldr	r0, [pc, #108]	; (3004 <lv_init+0xc0>)
    2f96:	47a0      	blx	r4
    _lv_indev_init();
    2f98:	4b1b      	ldr	r3, [pc, #108]	; (3008 <lv_init+0xc4>)
    2f9a:	4798      	blx	r3
    _lv_img_decoder_init();
    2f9c:	4b1b      	ldr	r3, [pc, #108]	; (300c <lv_init+0xc8>)
    2f9e:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
    2fa0:	2001      	movs	r0, #1
    2fa2:	4b1b      	ldr	r3, [pc, #108]	; (3010 <lv_init+0xcc>)
    2fa4:	4798      	blx	r3
    lv_initialized = true;
    2fa6:	2001      	movs	r0, #1
    2fa8:	4b09      	ldr	r3, [pc, #36]	; (2fd0 <lv_init+0x8c>)
    2faa:	7018      	strb	r0, [r3, #0]
    LV_LOG_INFO("lv_init ready");
    2fac:	4b19      	ldr	r3, [pc, #100]	; (3014 <lv_init+0xd0>)
    2fae:	9300      	str	r3, [sp, #0]
    2fb0:	4b19      	ldr	r3, [pc, #100]	; (3018 <lv_init+0xd4>)
    2fb2:	22a2      	movs	r2, #162	; 0xa2
    2fb4:	4919      	ldr	r1, [pc, #100]	; (301c <lv_init+0xd8>)
    2fb6:	4c1a      	ldr	r4, [pc, #104]	; (3020 <lv_init+0xdc>)
    2fb8:	47a0      	blx	r4
}
    2fba:	b005      	add	sp, #20
    2fbc:	bd30      	pop	{r4, r5, pc}
        LV_LOG_WARN("lv_init: already inited");
    2fbe:	4b19      	ldr	r3, [pc, #100]	; (3024 <lv_init+0xe0>)
    2fc0:	9300      	str	r3, [sp, #0]
    2fc2:	4b15      	ldr	r3, [pc, #84]	; (3018 <lv_init+0xd4>)
    2fc4:	2278      	movs	r2, #120	; 0x78
    2fc6:	4915      	ldr	r1, [pc, #84]	; (301c <lv_init+0xd8>)
    2fc8:	2002      	movs	r0, #2
    2fca:	4c15      	ldr	r4, [pc, #84]	; (3020 <lv_init+0xdc>)
    2fcc:	47a0      	blx	r4
        return;
    2fce:	e7f4      	b.n	2fba <lv_init+0x76>
    2fd0:	2000267c 	.word	0x2000267c
    2fd4:	00012965 	.word	0x00012965
    2fd8:	00013b95 	.word	0x00013b95
    2fdc:	00012221 	.word	0x00012221
    2fe0:	00011845 	.word	0x00011845
    2fe4:	00002c05 	.word	0x00002c05
    2fe8:	20006d58 	.word	0x20006d58
    2fec:	000124a1 	.word	0x000124a1
    2ff0:	20000010 	.word	0x20000010
    2ff4:	000170f1 	.word	0x000170f1
    2ff8:	00014779 	.word	0x00014779
    2ffc:	000063fd 	.word	0x000063fd
    3000:	20006cb4 	.word	0x20006cb4
    3004:	20006ca8 	.word	0x20006ca8
    3008:	00002ecd 	.word	0x00002ecd
    300c:	00010569 	.word	0x00010569
    3010:	0000f9d5 	.word	0x0000f9d5
    3014:	0001bd00 	.word	0x0001bd00
    3018:	0001b53c 	.word	0x0001b53c
    301c:	0001bcc0 	.word	0x0001bcc0
    3020:	00012805 	.word	0x00012805
    3024:	0001bce8 	.word	0x0001bce8

00003028 <lv_obj_set_click>:
{
    3028:	b530      	push	{r4, r5, lr}
    302a:	b083      	sub	sp, #12
    302c:	4604      	mov	r4, r0
    302e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3030:	4b0c      	ldr	r3, [pc, #48]	; (3064 <lv_obj_set_click+0x3c>)
    3032:	4798      	blx	r3
    3034:	b138      	cbz	r0, 3046 <lv_obj_set_click+0x1e>
    obj->click = (en == true ? 1 : 0);
    3036:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    303a:	f365 0300 	bfi	r3, r5, #0, #1
    303e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
    3042:	b003      	add	sp, #12
    3044:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3046:	4b08      	ldr	r3, [pc, #32]	; (3068 <lv_obj_set_click+0x40>)
    3048:	9300      	str	r3, [sp, #0]
    304a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
    304e:	4907      	ldr	r1, [pc, #28]	; (306c <lv_obj_set_click+0x44>)
    3050:	2003      	movs	r0, #3
    3052:	4d07      	ldr	r5, [pc, #28]	; (3070 <lv_obj_set_click+0x48>)
    3054:	47a8      	blx	r5
    3056:	4622      	mov	r2, r4
    3058:	2300      	movs	r3, #0
    305a:	4806      	ldr	r0, [pc, #24]	; (3074 <lv_obj_set_click+0x4c>)
    305c:	4906      	ldr	r1, [pc, #24]	; (3078 <lv_obj_set_click+0x50>)
    305e:	4788      	blx	r1
    3060:	e7fe      	b.n	3060 <lv_obj_set_click+0x38>
    3062:	bf00      	nop
    3064:	0000298d 	.word	0x0000298d
    3068:	0001b5b0 	.word	0x0001b5b0
    306c:	0001bcc0 	.word	0x0001bcc0
    3070:	00012805 	.word	0x00012805
    3074:	0001bd20 	.word	0x0001bd20
    3078:	00002995 	.word	0x00002995

0000307c <lv_event_send_func>:
{
    307c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3080:	b086      	sub	sp, #24
    3082:	4607      	mov	r7, r0
    3084:	4615      	mov	r5, r2
    3086:	461e      	mov	r6, r3
    if(obj != NULL) {
    3088:	460c      	mov	r4, r1
    308a:	b121      	cbz	r1, 3096 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    308c:	4608      	mov	r0, r1
    308e:	4b28      	ldr	r3, [pc, #160]	; (3130 <lv_event_send_func+0xb4>)
    3090:	4798      	blx	r3
    3092:	2800      	cmp	r0, #0
    3094:	d033      	beq.n	30fe <lv_event_send_func+0x82>
    event_temp_data.obj     = obj;
    3096:	9403      	str	r4, [sp, #12]
    event_temp_data.deleted = false;
    3098:	2300      	movs	r3, #0
    309a:	f88d 3010 	strb.w	r3, [sp, #16]
    event_temp_data.prev    = NULL;
    309e:	9305      	str	r3, [sp, #20]
    if(event_temp_data_head) {
    30a0:	4b24      	ldr	r3, [pc, #144]	; (3134 <lv_event_send_func+0xb8>)
    30a2:	685b      	ldr	r3, [r3, #4]
    30a4:	b103      	cbz	r3, 30a8 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
    30a6:	9305      	str	r3, [sp, #20]
    event_temp_data_head = &event_temp_data;
    30a8:	4b22      	ldr	r3, [pc, #136]	; (3134 <lv_event_send_func+0xb8>)
    30aa:	aa03      	add	r2, sp, #12
    30ac:	605a      	str	r2, [r3, #4]
    const void * event_act_data_save = event_act_data;
    30ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
    event_act_data                   = data;
    30b2:	609e      	str	r6, [r3, #8]
    lv_indev_t * indev_act = lv_indev_get_act();
    30b4:	4b20      	ldr	r3, [pc, #128]	; (3138 <lv_event_send_func+0xbc>)
    30b6:	4798      	blx	r3
    if(indev_act) {
    30b8:	b118      	cbz	r0, 30c2 <lv_event_send_func+0x46>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
    30ba:	6883      	ldr	r3, [r0, #8]
    30bc:	b10b      	cbz	r3, 30c2 <lv_event_send_func+0x46>
    30be:	4629      	mov	r1, r5
    30c0:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
    30c2:	b117      	cbz	r7, 30ca <lv_event_send_func+0x4e>
    30c4:	4629      	mov	r1, r5
    30c6:	4620      	mov	r0, r4
    30c8:	47b8      	blx	r7
    event_act_data = event_act_data_save;
    30ca:	4b1a      	ldr	r3, [pc, #104]	; (3134 <lv_event_send_func+0xb8>)
    30cc:	f8c3 8008 	str.w	r8, [r3, #8]
    event_temp_data_head = event_temp_data_head->prev;
    30d0:	685a      	ldr	r2, [r3, #4]
    30d2:	6892      	ldr	r2, [r2, #8]
    30d4:	605a      	str	r2, [r3, #4]
    if(event_temp_data.deleted) {
    30d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    30da:	b9f3      	cbnz	r3, 311a <lv_event_send_func+0x9e>
    if(obj) {
    30dc:	b30c      	cbz	r4, 3122 <lv_event_send_func+0xa6>
        if(obj->parent_event && obj->parent) {
    30de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    30e2:	f013 0f40 	tst.w	r3, #64	; 0x40
    30e6:	d01e      	beq.n	3126 <lv_event_send_func+0xaa>
    30e8:	6820      	ldr	r0, [r4, #0]
    30ea:	b1f0      	cbz	r0, 312a <lv_event_send_func+0xae>
            lv_res_t res = lv_event_send(obj->parent, event, data);
    30ec:	4632      	mov	r2, r6
    30ee:	4629      	mov	r1, r5
    30f0:	4b12      	ldr	r3, [pc, #72]	; (313c <lv_event_send_func+0xc0>)
    30f2:	4798      	blx	r3
        return LV_RES_INV;
    30f4:	2801      	cmp	r0, #1
    30f6:	bf14      	ite	ne
    30f8:	2000      	movne	r0, #0
    30fa:	2001      	moveq	r0, #1
    30fc:	e00e      	b.n	311c <lv_event_send_func+0xa0>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    30fe:	4b10      	ldr	r3, [pc, #64]	; (3140 <lv_event_send_func+0xc4>)
    3100:	9300      	str	r3, [sp, #0]
    3102:	f44f 62db 	mov.w	r2, #1752	; 0x6d8
    3106:	490f      	ldr	r1, [pc, #60]	; (3144 <lv_event_send_func+0xc8>)
    3108:	2003      	movs	r0, #3
    310a:	4d0f      	ldr	r5, [pc, #60]	; (3148 <lv_event_send_func+0xcc>)
    310c:	47a8      	blx	r5
    310e:	4622      	mov	r2, r4
    3110:	2300      	movs	r3, #0
    3112:	480e      	ldr	r0, [pc, #56]	; (314c <lv_event_send_func+0xd0>)
    3114:	490e      	ldr	r1, [pc, #56]	; (3150 <lv_event_send_func+0xd4>)
    3116:	4788      	blx	r1
    3118:	e7fe      	b.n	3118 <lv_event_send_func+0x9c>
        return LV_RES_INV;
    311a:	2000      	movs	r0, #0
}
    311c:	b006      	add	sp, #24
    311e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
    3122:	2001      	movs	r0, #1
    3124:	e7fa      	b.n	311c <lv_event_send_func+0xa0>
    3126:	2001      	movs	r0, #1
    3128:	e7f8      	b.n	311c <lv_event_send_func+0xa0>
    312a:	2001      	movs	r0, #1
    312c:	e7f6      	b.n	311c <lv_event_send_func+0xa0>
    312e:	bf00      	nop
    3130:	0000298d 	.word	0x0000298d
    3134:	2000267c 	.word	0x2000267c
    3138:	00002e45 	.word	0x00002e45
    313c:	00003155 	.word	0x00003155
    3140:	0001b680 	.word	0x0001b680
    3144:	0001bcc0 	.word	0x0001bcc0
    3148:	00012805 	.word	0x00012805
    314c:	0001bd20 	.word	0x0001bd20
    3150:	00002995 	.word	0x00002995

00003154 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
    3154:	b1e8      	cbz	r0, 3192 <lv_event_send+0x3e>
{
    3156:	b570      	push	{r4, r5, r6, lr}
    3158:	b082      	sub	sp, #8
    315a:	4604      	mov	r4, r0
    315c:	4616      	mov	r6, r2
    315e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3160:	4b0d      	ldr	r3, [pc, #52]	; (3198 <lv_event_send+0x44>)
    3162:	4798      	blx	r3
    3164:	b968      	cbnz	r0, 3182 <lv_event_send+0x2e>
    3166:	4b0d      	ldr	r3, [pc, #52]	; (319c <lv_event_send+0x48>)
    3168:	9300      	str	r3, [sp, #0]
    316a:	f240 62c4 	movw	r2, #1732	; 0x6c4
    316e:	490c      	ldr	r1, [pc, #48]	; (31a0 <lv_event_send+0x4c>)
    3170:	2003      	movs	r0, #3
    3172:	4d0c      	ldr	r5, [pc, #48]	; (31a4 <lv_event_send+0x50>)
    3174:	47a8      	blx	r5
    3176:	4622      	mov	r2, r4
    3178:	2300      	movs	r3, #0
    317a:	480b      	ldr	r0, [pc, #44]	; (31a8 <lv_event_send+0x54>)
    317c:	490b      	ldr	r1, [pc, #44]	; (31ac <lv_event_send+0x58>)
    317e:	4788      	blx	r1
    3180:	e7fe      	b.n	3180 <lv_event_send+0x2c>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
    3182:	4633      	mov	r3, r6
    3184:	462a      	mov	r2, r5
    3186:	4621      	mov	r1, r4
    3188:	69a0      	ldr	r0, [r4, #24]
    318a:	4c09      	ldr	r4, [pc, #36]	; (31b0 <lv_event_send+0x5c>)
    318c:	47a0      	blx	r4
}
    318e:	b002      	add	sp, #8
    3190:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
    3192:	2001      	movs	r0, #1
    3194:	4770      	bx	lr
    3196:	bf00      	nop
    3198:	0000298d 	.word	0x0000298d
    319c:	0001b694 	.word	0x0001b694
    31a0:	0001bcc0 	.word	0x0001bcc0
    31a4:	00012805 	.word	0x00012805
    31a8:	0001bd20 	.word	0x0001bd20
    31ac:	00002995 	.word	0x00002995
    31b0:	0000307d 	.word	0x0000307d

000031b4 <lv_obj_set_signal_cb>:
{
    31b4:	b530      	push	{r4, r5, lr}
    31b6:	b083      	sub	sp, #12
    31b8:	4604      	mov	r4, r0
    31ba:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    31bc:	4b09      	ldr	r3, [pc, #36]	; (31e4 <lv_obj_set_signal_cb+0x30>)
    31be:	4798      	blx	r3
    31c0:	b110      	cbz	r0, 31c8 <lv_obj_set_signal_cb+0x14>
    obj->signal_cb = signal_cb;
    31c2:	61e5      	str	r5, [r4, #28]
}
    31c4:	b003      	add	sp, #12
    31c6:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    31c8:	4b07      	ldr	r3, [pc, #28]	; (31e8 <lv_obj_set_signal_cb+0x34>)
    31ca:	9300      	str	r3, [sp, #0]
    31cc:	f240 721b 	movw	r2, #1819	; 0x71b
    31d0:	4906      	ldr	r1, [pc, #24]	; (31ec <lv_obj_set_signal_cb+0x38>)
    31d2:	2003      	movs	r0, #3
    31d4:	4d06      	ldr	r5, [pc, #24]	; (31f0 <lv_obj_set_signal_cb+0x3c>)
    31d6:	47a8      	blx	r5
    31d8:	4622      	mov	r2, r4
    31da:	2300      	movs	r3, #0
    31dc:	4805      	ldr	r0, [pc, #20]	; (31f4 <lv_obj_set_signal_cb+0x40>)
    31de:	4906      	ldr	r1, [pc, #24]	; (31f8 <lv_obj_set_signal_cb+0x44>)
    31e0:	4788      	blx	r1
    31e2:	e7fe      	b.n	31e2 <lv_obj_set_signal_cb+0x2e>
    31e4:	0000298d 	.word	0x0000298d
    31e8:	0001b6a4 	.word	0x0001b6a4
    31ec:	0001bcc0 	.word	0x0001bcc0
    31f0:	00012805 	.word	0x00012805
    31f4:	0001bd20 	.word	0x0001bd20
    31f8:	00002995 	.word	0x00002995

000031fc <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
    31fc:	b120      	cbz	r0, 3208 <lv_signal_send+0xc>
{
    31fe:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
    3200:	69c4      	ldr	r4, [r0, #28]
    3202:	b11c      	cbz	r4, 320c <lv_signal_send+0x10>
    3204:	47a0      	blx	r4
    3206:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
    3208:	2001      	movs	r0, #1
    320a:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
    320c:	2001      	movs	r0, #1
}
    320e:	bd10      	pop	{r4, pc}

00003210 <lv_obj_set_design_cb>:
{
    3210:	b530      	push	{r4, r5, lr}
    3212:	b083      	sub	sp, #12
    3214:	4604      	mov	r4, r0
    3216:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3218:	4b09      	ldr	r3, [pc, #36]	; (3240 <lv_obj_set_design_cb+0x30>)
    321a:	4798      	blx	r3
    321c:	b110      	cbz	r0, 3224 <lv_obj_set_design_cb+0x14>
    obj->design_cb = design_cb;
    321e:	6225      	str	r5, [r4, #32]
}
    3220:	b003      	add	sp, #12
    3222:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3224:	4b07      	ldr	r3, [pc, #28]	; (3244 <lv_obj_set_design_cb+0x34>)
    3226:	9300      	str	r3, [sp, #0]
    3228:	f240 7237 	movw	r2, #1847	; 0x737
    322c:	4906      	ldr	r1, [pc, #24]	; (3248 <lv_obj_set_design_cb+0x38>)
    322e:	2003      	movs	r0, #3
    3230:	4d06      	ldr	r5, [pc, #24]	; (324c <lv_obj_set_design_cb+0x3c>)
    3232:	47a8      	blx	r5
    3234:	4622      	mov	r2, r4
    3236:	2300      	movs	r3, #0
    3238:	4805      	ldr	r0, [pc, #20]	; (3250 <lv_obj_set_design_cb+0x40>)
    323a:	4906      	ldr	r1, [pc, #24]	; (3254 <lv_obj_set_design_cb+0x44>)
    323c:	4788      	blx	r1
    323e:	e7fe      	b.n	323e <lv_obj_set_design_cb+0x2e>
    3240:	0000298d 	.word	0x0000298d
    3244:	0001b6bc 	.word	0x0001b6bc
    3248:	0001bcc0 	.word	0x0001bcc0
    324c:	00012805 	.word	0x00012805
    3250:	0001bd20 	.word	0x0001bd20
    3254:	00002995 	.word	0x00002995

00003258 <lv_obj_allocate_ext_attr>:
{
    3258:	b530      	push	{r4, r5, lr}
    325a:	b083      	sub	sp, #12
    325c:	4604      	mov	r4, r0
    325e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3260:	4b0d      	ldr	r3, [pc, #52]	; (3298 <lv_obj_allocate_ext_attr+0x40>)
    3262:	4798      	blx	r3
    3264:	b968      	cbnz	r0, 3282 <lv_obj_allocate_ext_attr+0x2a>
    3266:	4b0d      	ldr	r3, [pc, #52]	; (329c <lv_obj_allocate_ext_attr+0x44>)
    3268:	9300      	str	r3, [sp, #0]
    326a:	f240 7249 	movw	r2, #1865	; 0x749
    326e:	490c      	ldr	r1, [pc, #48]	; (32a0 <lv_obj_allocate_ext_attr+0x48>)
    3270:	2003      	movs	r0, #3
    3272:	4d0c      	ldr	r5, [pc, #48]	; (32a4 <lv_obj_allocate_ext_attr+0x4c>)
    3274:	47a8      	blx	r5
    3276:	4622      	mov	r2, r4
    3278:	2300      	movs	r3, #0
    327a:	480b      	ldr	r0, [pc, #44]	; (32a8 <lv_obj_allocate_ext_attr+0x50>)
    327c:	490b      	ldr	r1, [pc, #44]	; (32ac <lv_obj_allocate_ext_attr+0x54>)
    327e:	4788      	blx	r1
    3280:	e7fe      	b.n	3280 <lv_obj_allocate_ext_attr+0x28>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
    3282:	4629      	mov	r1, r5
    3284:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3286:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <lv_obj_allocate_ext_attr+0x58>)
    3288:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
    328a:	4603      	mov	r3, r0
    328c:	b100      	cbz	r0, 3290 <lv_obj_allocate_ext_attr+0x38>
    obj->ext_attr = new_ext;
    328e:	6260      	str	r0, [r4, #36]	; 0x24
}
    3290:	4618      	mov	r0, r3
    3292:	b003      	add	sp, #12
    3294:	bd30      	pop	{r4, r5, pc}
    3296:	bf00      	nop
    3298:	0000298d 	.word	0x0000298d
    329c:	0001b6d4 	.word	0x0001b6d4
    32a0:	0001bcc0 	.word	0x0001bcc0
    32a4:	00012805 	.word	0x00012805
    32a8:	0001bd20 	.word	0x0001bd20
    32ac:	00002995 	.word	0x00002995
    32b0:	00012e41 	.word	0x00012e41

000032b4 <lv_obj_refresh_ext_draw_pad>:
{
    32b4:	b530      	push	{r4, r5, lr}
    32b6:	b083      	sub	sp, #12
    32b8:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    32ba:	4b0c      	ldr	r3, [pc, #48]	; (32ec <lv_obj_refresh_ext_draw_pad+0x38>)
    32bc:	4798      	blx	r3
    32be:	b968      	cbnz	r0, 32dc <lv_obj_refresh_ext_draw_pad+0x28>
    32c0:	4b0b      	ldr	r3, [pc, #44]	; (32f0 <lv_obj_refresh_ext_draw_pad+0x3c>)
    32c2:	9300      	str	r3, [sp, #0]
    32c4:	f240 7259 	movw	r2, #1881	; 0x759
    32c8:	490a      	ldr	r1, [pc, #40]	; (32f4 <lv_obj_refresh_ext_draw_pad+0x40>)
    32ca:	2003      	movs	r0, #3
    32cc:	4d0a      	ldr	r5, [pc, #40]	; (32f8 <lv_obj_refresh_ext_draw_pad+0x44>)
    32ce:	47a8      	blx	r5
    32d0:	4622      	mov	r2, r4
    32d2:	2300      	movs	r3, #0
    32d4:	4809      	ldr	r0, [pc, #36]	; (32fc <lv_obj_refresh_ext_draw_pad+0x48>)
    32d6:	490a      	ldr	r1, [pc, #40]	; (3300 <lv_obj_refresh_ext_draw_pad+0x4c>)
    32d8:	4788      	blx	r1
    32da:	e7fe      	b.n	32da <lv_obj_refresh_ext_draw_pad+0x26>
    obj->ext_draw_pad = 0;
    32dc:	2200      	movs	r2, #0
    32de:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
    32e0:	69e3      	ldr	r3, [r4, #28]
    32e2:	2106      	movs	r1, #6
    32e4:	4620      	mov	r0, r4
    32e6:	4798      	blx	r3
}
    32e8:	b003      	add	sp, #12
    32ea:	bd30      	pop	{r4, r5, pc}
    32ec:	0000298d 	.word	0x0000298d
    32f0:	0001b6f0 	.word	0x0001b6f0
    32f4:	0001bcc0 	.word	0x0001bcc0
    32f8:	00012805 	.word	0x00012805
    32fc:	0001bd20 	.word	0x0001bd20
    3300:	00002995 	.word	0x00002995

00003304 <lv_obj_get_parent>:
{
    3304:	b530      	push	{r4, r5, lr}
    3306:	b083      	sub	sp, #12
    3308:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    330a:	4b0a      	ldr	r3, [pc, #40]	; (3334 <lv_obj_get_parent+0x30>)
    330c:	4798      	blx	r3
    330e:	b110      	cbz	r0, 3316 <lv_obj_get_parent+0x12>
}
    3310:	6820      	ldr	r0, [r4, #0]
    3312:	b003      	add	sp, #12
    3314:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3316:	4b08      	ldr	r3, [pc, #32]	; (3338 <lv_obj_get_parent+0x34>)
    3318:	9300      	str	r3, [sp, #0]
    331a:	f240 729f 	movw	r2, #1951	; 0x79f
    331e:	4907      	ldr	r1, [pc, #28]	; (333c <lv_obj_get_parent+0x38>)
    3320:	2003      	movs	r0, #3
    3322:	4d07      	ldr	r5, [pc, #28]	; (3340 <lv_obj_get_parent+0x3c>)
    3324:	47a8      	blx	r5
    3326:	4622      	mov	r2, r4
    3328:	2300      	movs	r3, #0
    332a:	4806      	ldr	r0, [pc, #24]	; (3344 <lv_obj_get_parent+0x40>)
    332c:	4906      	ldr	r1, [pc, #24]	; (3348 <lv_obj_get_parent+0x44>)
    332e:	4788      	blx	r1
    3330:	e7fe      	b.n	3330 <lv_obj_get_parent+0x2c>
    3332:	bf00      	nop
    3334:	0000298d 	.word	0x0000298d
    3338:	0001b70c 	.word	0x0001b70c
    333c:	0001bcc0 	.word	0x0001bcc0
    3340:	00012805 	.word	0x00012805
    3344:	0001bd20 	.word	0x0001bd20
    3348:	00002995 	.word	0x00002995

0000334c <lv_obj_get_screen>:
{
    334c:	b530      	push	{r4, r5, lr}
    334e:	b083      	sub	sp, #12
    3350:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3352:	4b0e      	ldr	r3, [pc, #56]	; (338c <lv_obj_get_screen+0x40>)
    3354:	4798      	blx	r3
    3356:	b108      	cbz	r0, 335c <lv_obj_get_screen+0x10>
        par   = lv_obj_get_parent(act_p);
    3358:	4d0d      	ldr	r5, [pc, #52]	; (3390 <lv_obj_get_screen+0x44>)
    335a:	e00e      	b.n	337a <lv_obj_get_screen+0x2e>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    335c:	4b0d      	ldr	r3, [pc, #52]	; (3394 <lv_obj_get_screen+0x48>)
    335e:	9300      	str	r3, [sp, #0]
    3360:	f240 726b 	movw	r2, #1899	; 0x76b
    3364:	490c      	ldr	r1, [pc, #48]	; (3398 <lv_obj_get_screen+0x4c>)
    3366:	2003      	movs	r0, #3
    3368:	4d0c      	ldr	r5, [pc, #48]	; (339c <lv_obj_get_screen+0x50>)
    336a:	47a8      	blx	r5
    336c:	4622      	mov	r2, r4
    336e:	2300      	movs	r3, #0
    3370:	480b      	ldr	r0, [pc, #44]	; (33a0 <lv_obj_get_screen+0x54>)
    3372:	490c      	ldr	r1, [pc, #48]	; (33a4 <lv_obj_get_screen+0x58>)
    3374:	4788      	blx	r1
    3376:	e7fe      	b.n	3376 <lv_obj_get_screen+0x2a>
        par   = lv_obj_get_parent(act_p);
    3378:	461c      	mov	r4, r3
    337a:	4620      	mov	r0, r4
    337c:	47a8      	blx	r5
    } while(par != NULL);
    337e:	4603      	mov	r3, r0
    3380:	2800      	cmp	r0, #0
    3382:	d1f9      	bne.n	3378 <lv_obj_get_screen+0x2c>
}
    3384:	4620      	mov	r0, r4
    3386:	b003      	add	sp, #12
    3388:	bd30      	pop	{r4, r5, pc}
    338a:	bf00      	nop
    338c:	0000298d 	.word	0x0000298d
    3390:	00003305 	.word	0x00003305
    3394:	0001b720 	.word	0x0001b720
    3398:	0001bcc0 	.word	0x0001bcc0
    339c:	00012805 	.word	0x00012805
    33a0:	0001bd20 	.word	0x0001bd20
    33a4:	00002995 	.word	0x00002995

000033a8 <lv_obj_get_disp>:
{
    33a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    33ac:	b083      	sub	sp, #12
    33ae:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    33b0:	4b22      	ldr	r3, [pc, #136]	; (343c <lv_obj_get_disp+0x94>)
    33b2:	4798      	blx	r3
    33b4:	b180      	cbz	r0, 33d8 <lv_obj_get_disp+0x30>
    if(obj->parent == NULL)
    33b6:	6823      	ldr	r3, [r4, #0]
    33b8:	b11b      	cbz	r3, 33c2 <lv_obj_get_disp+0x1a>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
    33ba:	4620      	mov	r0, r4
    33bc:	4b20      	ldr	r3, [pc, #128]	; (3440 <lv_obj_get_disp+0x98>)
    33be:	4798      	blx	r3
    33c0:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    33c2:	4820      	ldr	r0, [pc, #128]	; (3444 <lv_obj_get_disp+0x9c>)
    33c4:	4b20      	ldr	r3, [pc, #128]	; (3448 <lv_obj_get_disp+0xa0>)
    33c6:	4798      	blx	r3
    33c8:	4605      	mov	r5, r0
    33ca:	b360      	cbz	r0, 3426 <lv_obj_get_disp+0x7e>
        _LV_LL_READ(d->scr_ll, s) {
    33cc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 3448 <lv_obj_get_disp+0xa0>
    33d0:	4e1e      	ldr	r6, [pc, #120]	; (344c <lv_obj_get_disp+0xa4>)
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    33d2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 3444 <lv_obj_get_disp+0x9c>
    33d6:	e012      	b.n	33fe <lv_obj_get_disp+0x56>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    33d8:	4b1d      	ldr	r3, [pc, #116]	; (3450 <lv_obj_get_disp+0xa8>)
    33da:	9300      	str	r3, [sp, #0]
    33dc:	f240 727f 	movw	r2, #1919	; 0x77f
    33e0:	491c      	ldr	r1, [pc, #112]	; (3454 <lv_obj_get_disp+0xac>)
    33e2:	2003      	movs	r0, #3
    33e4:	4d1c      	ldr	r5, [pc, #112]	; (3458 <lv_obj_get_disp+0xb0>)
    33e6:	47a8      	blx	r5
    33e8:	4622      	mov	r2, r4
    33ea:	2300      	movs	r3, #0
    33ec:	481b      	ldr	r0, [pc, #108]	; (345c <lv_obj_get_disp+0xb4>)
    33ee:	491c      	ldr	r1, [pc, #112]	; (3460 <lv_obj_get_disp+0xb8>)
    33f0:	4788      	blx	r1
    33f2:	e7fe      	b.n	33f2 <lv_obj_get_disp+0x4a>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
    33f4:	4629      	mov	r1, r5
    33f6:	4640      	mov	r0, r8
    33f8:	47b0      	blx	r6
    33fa:	4605      	mov	r5, r0
    33fc:	b198      	cbz	r0, 3426 <lv_obj_get_disp+0x7e>
        _LV_LL_READ(d->scr_ll, s) {
    33fe:	f105 0730 	add.w	r7, r5, #48	; 0x30
    3402:	4638      	mov	r0, r7
    3404:	47c8      	blx	r9
    3406:	4601      	mov	r1, r0
    3408:	2800      	cmp	r0, #0
    340a:	d0f3      	beq.n	33f4 <lv_obj_get_disp+0x4c>
            if(s == scr) return d;
    340c:	4284      	cmp	r4, r0
    340e:	d006      	beq.n	341e <lv_obj_get_disp+0x76>
        _LV_LL_READ(d->scr_ll, s) {
    3410:	4638      	mov	r0, r7
    3412:	47b0      	blx	r6
    3414:	4601      	mov	r1, r0
    3416:	2800      	cmp	r0, #0
    3418:	d0ec      	beq.n	33f4 <lv_obj_get_disp+0x4c>
            if(s == scr) return d;
    341a:	428c      	cmp	r4, r1
    341c:	d1f8      	bne.n	3410 <lv_obj_get_disp+0x68>
}
    341e:	4628      	mov	r0, r5
    3420:	b003      	add	sp, #12
    3422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    3426:	4b0f      	ldr	r3, [pc, #60]	; (3464 <lv_obj_get_disp+0xbc>)
    3428:	9300      	str	r3, [sp, #0]
    342a:	4b09      	ldr	r3, [pc, #36]	; (3450 <lv_obj_get_disp+0xa8>)
    342c:	f44f 62f2 	mov.w	r2, #1936	; 0x790
    3430:	4908      	ldr	r1, [pc, #32]	; (3454 <lv_obj_get_disp+0xac>)
    3432:	2002      	movs	r0, #2
    3434:	4c08      	ldr	r4, [pc, #32]	; (3458 <lv_obj_get_disp+0xb0>)
    3436:	47a0      	blx	r4
    return NULL;
    3438:	2500      	movs	r5, #0
    343a:	e7f0      	b.n	341e <lv_obj_get_disp+0x76>
    343c:	0000298d 	.word	0x0000298d
    3440:	0000334d 	.word	0x0000334d
    3444:	20006cb4 	.word	0x20006cb4
    3448:	00012551 	.word	0x00012551
    344c:	00012565 	.word	0x00012565
    3450:	0001b734 	.word	0x0001b734
    3454:	0001bcc0 	.word	0x0001bcc0
    3458:	00012805 	.word	0x00012805
    345c:	0001bd20 	.word	0x0001bd20
    3460:	00002995 	.word	0x00002995
    3464:	0001bd30 	.word	0x0001bd30

00003468 <lv_obj_get_child>:
{
    3468:	b530      	push	{r4, r5, lr}
    346a:	b083      	sub	sp, #12
    346c:	4604      	mov	r4, r0
    346e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3470:	4b0d      	ldr	r3, [pc, #52]	; (34a8 <lv_obj_get_child+0x40>)
    3472:	4798      	blx	r3
    3474:	b130      	cbz	r0, 3484 <lv_obj_get_child+0x1c>
    if(child == NULL) {
    3476:	b19d      	cbz	r5, 34a0 <lv_obj_get_child+0x38>
        result = _lv_ll_get_next(&obj->child_ll, child);
    3478:	4629      	mov	r1, r5
    347a:	1d20      	adds	r0, r4, #4
    347c:	4b0b      	ldr	r3, [pc, #44]	; (34ac <lv_obj_get_child+0x44>)
    347e:	4798      	blx	r3
}
    3480:	b003      	add	sp, #12
    3482:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3484:	4b0a      	ldr	r3, [pc, #40]	; (34b0 <lv_obj_get_child+0x48>)
    3486:	9300      	str	r3, [sp, #0]
    3488:	f240 72ad 	movw	r2, #1965	; 0x7ad
    348c:	4909      	ldr	r1, [pc, #36]	; (34b4 <lv_obj_get_child+0x4c>)
    348e:	2003      	movs	r0, #3
    3490:	4d09      	ldr	r5, [pc, #36]	; (34b8 <lv_obj_get_child+0x50>)
    3492:	47a8      	blx	r5
    3494:	4622      	mov	r2, r4
    3496:	2300      	movs	r3, #0
    3498:	4808      	ldr	r0, [pc, #32]	; (34bc <lv_obj_get_child+0x54>)
    349a:	4909      	ldr	r1, [pc, #36]	; (34c0 <lv_obj_get_child+0x58>)
    349c:	4788      	blx	r1
    349e:	e7fe      	b.n	349e <lv_obj_get_child+0x36>
        result = _lv_ll_get_head(&obj->child_ll);
    34a0:	1d20      	adds	r0, r4, #4
    34a2:	4b08      	ldr	r3, [pc, #32]	; (34c4 <lv_obj_get_child+0x5c>)
    34a4:	4798      	blx	r3
    34a6:	e7eb      	b.n	3480 <lv_obj_get_child+0x18>
    34a8:	0000298d 	.word	0x0000298d
    34ac:	00012565 	.word	0x00012565
    34b0:	0001b744 	.word	0x0001b744
    34b4:	0001bcc0 	.word	0x0001bcc0
    34b8:	00012805 	.word	0x00012805
    34bc:	0001bd20 	.word	0x0001bd20
    34c0:	00002995 	.word	0x00002995
    34c4:	00012551 	.word	0x00012551

000034c8 <lv_obj_get_coords>:
{
    34c8:	b530      	push	{r4, r5, lr}
    34ca:	b083      	sub	sp, #12
    34cc:	4605      	mov	r5, r0
    34ce:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    34d0:	4b0e      	ldr	r3, [pc, #56]	; (350c <lv_obj_get_coords+0x44>)
    34d2:	4798      	blx	r3
    34d4:	b160      	cbz	r0, 34f0 <lv_obj_get_coords+0x28>
    34d6:	f105 020f 	add.w	r2, r5, #15
    34da:	f104 0008 	add.w	r0, r4, #8
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    34de:	4623      	mov	r3, r4
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    34e0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    34e4:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    34e8:	4283      	cmp	r3, r0
    34ea:	d1f9      	bne.n	34e0 <lv_obj_get_coords+0x18>
}
    34ec:	b003      	add	sp, #12
    34ee:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    34f0:	4b07      	ldr	r3, [pc, #28]	; (3510 <lv_obj_get_coords+0x48>)
    34f2:	9300      	str	r3, [sp, #0]
    34f4:	f640 0201 	movw	r2, #2049	; 0x801
    34f8:	4906      	ldr	r1, [pc, #24]	; (3514 <lv_obj_get_coords+0x4c>)
    34fa:	2003      	movs	r0, #3
    34fc:	4c06      	ldr	r4, [pc, #24]	; (3518 <lv_obj_get_coords+0x50>)
    34fe:	47a0      	blx	r4
    3500:	462a      	mov	r2, r5
    3502:	2300      	movs	r3, #0
    3504:	4805      	ldr	r0, [pc, #20]	; (351c <lv_obj_get_coords+0x54>)
    3506:	4906      	ldr	r1, [pc, #24]	; (3520 <lv_obj_get_coords+0x58>)
    3508:	4788      	blx	r1
    350a:	e7fe      	b.n	350a <lv_obj_get_coords+0x42>
    350c:	0000298d 	.word	0x0000298d
    3510:	0001b7bc 	.word	0x0001b7bc
    3514:	0001bcc0 	.word	0x0001bcc0
    3518:	00012805 	.word	0x00012805
    351c:	0001bd20 	.word	0x0001bd20
    3520:	00002995 	.word	0x00002995

00003524 <lv_obj_get_x>:
{
    3524:	b530      	push	{r4, r5, lr}
    3526:	b083      	sub	sp, #12
    3528:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    352a:	4b0f      	ldr	r3, [pc, #60]	; (3568 <lv_obj_get_x+0x44>)
    352c:	4798      	blx	r3
    352e:	b968      	cbnz	r0, 354c <lv_obj_get_x+0x28>
    3530:	4b0e      	ldr	r3, [pc, #56]	; (356c <lv_obj_get_x+0x48>)
    3532:	9300      	str	r3, [sp, #0]
    3534:	f640 0222 	movw	r2, #2082	; 0x822
    3538:	490d      	ldr	r1, [pc, #52]	; (3570 <lv_obj_get_x+0x4c>)
    353a:	2003      	movs	r0, #3
    353c:	4d0d      	ldr	r5, [pc, #52]	; (3574 <lv_obj_get_x+0x50>)
    353e:	47a8      	blx	r5
    3540:	4622      	mov	r2, r4
    3542:	2300      	movs	r3, #0
    3544:	480c      	ldr	r0, [pc, #48]	; (3578 <lv_obj_get_x+0x54>)
    3546:	490d      	ldr	r1, [pc, #52]	; (357c <lv_obj_get_x+0x58>)
    3548:	4788      	blx	r1
    354a:	e7fe      	b.n	354a <lv_obj_get_x+0x26>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    354c:	4620      	mov	r0, r4
    354e:	4b0c      	ldr	r3, [pc, #48]	; (3580 <lv_obj_get_x+0x5c>)
    3550:	4798      	blx	r3
    if(parent) {
    3552:	4603      	mov	r3, r0
    3554:	b128      	cbz	r0, 3562 <lv_obj_get_x+0x3e>
        rel_x             = obj->coords.x1 - parent->coords.x1;
    3556:	8a20      	ldrh	r0, [r4, #16]
    3558:	8a1b      	ldrh	r3, [r3, #16]
    355a:	1ac0      	subs	r0, r0, r3
    355c:	b200      	sxth	r0, r0
}
    355e:	b003      	add	sp, #12
    3560:	bd30      	pop	{r4, r5, pc}
        rel_x = obj->coords.x1;
    3562:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
    3566:	e7fa      	b.n	355e <lv_obj_get_x+0x3a>
    3568:	0000298d 	.word	0x0000298d
    356c:	0001b7d0 	.word	0x0001b7d0
    3570:	0001bcc0 	.word	0x0001bcc0
    3574:	00012805 	.word	0x00012805
    3578:	0001bd20 	.word	0x0001bd20
    357c:	00002995 	.word	0x00002995
    3580:	00003305 	.word	0x00003305

00003584 <lv_obj_get_y>:
{
    3584:	b530      	push	{r4, r5, lr}
    3586:	b083      	sub	sp, #12
    3588:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    358a:	4b0f      	ldr	r3, [pc, #60]	; (35c8 <lv_obj_get_y+0x44>)
    358c:	4798      	blx	r3
    358e:	b968      	cbnz	r0, 35ac <lv_obj_get_y+0x28>
    3590:	4b0e      	ldr	r3, [pc, #56]	; (35cc <lv_obj_get_y+0x48>)
    3592:	9300      	str	r3, [sp, #0]
    3594:	f640 0236 	movw	r2, #2102	; 0x836
    3598:	490d      	ldr	r1, [pc, #52]	; (35d0 <lv_obj_get_y+0x4c>)
    359a:	2003      	movs	r0, #3
    359c:	4d0d      	ldr	r5, [pc, #52]	; (35d4 <lv_obj_get_y+0x50>)
    359e:	47a8      	blx	r5
    35a0:	4622      	mov	r2, r4
    35a2:	2300      	movs	r3, #0
    35a4:	480c      	ldr	r0, [pc, #48]	; (35d8 <lv_obj_get_y+0x54>)
    35a6:	490d      	ldr	r1, [pc, #52]	; (35dc <lv_obj_get_y+0x58>)
    35a8:	4788      	blx	r1
    35aa:	e7fe      	b.n	35aa <lv_obj_get_y+0x26>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    35ac:	4620      	mov	r0, r4
    35ae:	4b0c      	ldr	r3, [pc, #48]	; (35e0 <lv_obj_get_y+0x5c>)
    35b0:	4798      	blx	r3
    if(parent) {
    35b2:	4603      	mov	r3, r0
    35b4:	b128      	cbz	r0, 35c2 <lv_obj_get_y+0x3e>
        rel_y             = obj->coords.y1 - parent->coords.y1;
    35b6:	8a60      	ldrh	r0, [r4, #18]
    35b8:	8a5b      	ldrh	r3, [r3, #18]
    35ba:	1ac0      	subs	r0, r0, r3
    35bc:	b200      	sxth	r0, r0
}
    35be:	b003      	add	sp, #12
    35c0:	bd30      	pop	{r4, r5, pc}
        rel_y = obj->coords.y1;
    35c2:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
    35c6:	e7fa      	b.n	35be <lv_obj_get_y+0x3a>
    35c8:	0000298d 	.word	0x0000298d
    35cc:	0001b7e0 	.word	0x0001b7e0
    35d0:	0001bcc0 	.word	0x0001bcc0
    35d4:	00012805 	.word	0x00012805
    35d8:	0001bd20 	.word	0x0001bd20
    35dc:	00002995 	.word	0x00002995
    35e0:	00003305 	.word	0x00003305

000035e4 <lv_obj_get_width>:
{
    35e4:	b530      	push	{r4, r5, lr}
    35e6:	b083      	sub	sp, #12
    35e8:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35ea:	4b0c      	ldr	r3, [pc, #48]	; (361c <lv_obj_get_width+0x38>)
    35ec:	4798      	blx	r3
    35ee:	b130      	cbz	r0, 35fe <lv_obj_get_width+0x1a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    35f0:	8aa0      	ldrh	r0, [r4, #20]
    35f2:	3001      	adds	r0, #1
    35f4:	8a23      	ldrh	r3, [r4, #16]
    35f6:	1ac0      	subs	r0, r0, r3
}
    35f8:	b200      	sxth	r0, r0
    35fa:	b003      	add	sp, #12
    35fc:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    35fe:	4b08      	ldr	r3, [pc, #32]	; (3620 <lv_obj_get_width+0x3c>)
    3600:	9300      	str	r3, [sp, #0]
    3602:	f640 024a 	movw	r2, #2122	; 0x84a
    3606:	4907      	ldr	r1, [pc, #28]	; (3624 <lv_obj_get_width+0x40>)
    3608:	2003      	movs	r0, #3
    360a:	4d07      	ldr	r5, [pc, #28]	; (3628 <lv_obj_get_width+0x44>)
    360c:	47a8      	blx	r5
    360e:	4622      	mov	r2, r4
    3610:	2300      	movs	r3, #0
    3612:	4806      	ldr	r0, [pc, #24]	; (362c <lv_obj_get_width+0x48>)
    3614:	4906      	ldr	r1, [pc, #24]	; (3630 <lv_obj_get_width+0x4c>)
    3616:	4788      	blx	r1
    3618:	e7fe      	b.n	3618 <lv_obj_get_width+0x34>
    361a:	bf00      	nop
    361c:	0000298d 	.word	0x0000298d
    3620:	0001b7f0 	.word	0x0001b7f0
    3624:	0001bcc0 	.word	0x0001bcc0
    3628:	00012805 	.word	0x00012805
    362c:	0001bd20 	.word	0x0001bd20
    3630:	00002995 	.word	0x00002995

00003634 <lv_obj_get_height>:
{
    3634:	b530      	push	{r4, r5, lr}
    3636:	b083      	sub	sp, #12
    3638:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    363a:	4b0c      	ldr	r3, [pc, #48]	; (366c <lv_obj_get_height+0x38>)
    363c:	4798      	blx	r3
    363e:	b130      	cbz	r0, 364e <lv_obj_get_height+0x1a>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    3640:	8ae0      	ldrh	r0, [r4, #22]
    3642:	3001      	adds	r0, #1
    3644:	8a63      	ldrh	r3, [r4, #18]
    3646:	1ac0      	subs	r0, r0, r3
}
    3648:	b200      	sxth	r0, r0
    364a:	b003      	add	sp, #12
    364c:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    364e:	4b08      	ldr	r3, [pc, #32]	; (3670 <lv_obj_get_height+0x3c>)
    3650:	9300      	str	r3, [sp, #0]
    3652:	f640 0256 	movw	r2, #2134	; 0x856
    3656:	4907      	ldr	r1, [pc, #28]	; (3674 <lv_obj_get_height+0x40>)
    3658:	2003      	movs	r0, #3
    365a:	4d07      	ldr	r5, [pc, #28]	; (3678 <lv_obj_get_height+0x44>)
    365c:	47a8      	blx	r5
    365e:	4622      	mov	r2, r4
    3660:	2300      	movs	r3, #0
    3662:	4806      	ldr	r0, [pc, #24]	; (367c <lv_obj_get_height+0x48>)
    3664:	4906      	ldr	r1, [pc, #24]	; (3680 <lv_obj_get_height+0x4c>)
    3666:	4788      	blx	r1
    3668:	e7fe      	b.n	3668 <lv_obj_get_height+0x34>
    366a:	bf00      	nop
    366c:	0000298d 	.word	0x0000298d
    3670:	0001b804 	.word	0x0001b804
    3674:	0001bcc0 	.word	0x0001bcc0
    3678:	00012805 	.word	0x00012805
    367c:	0001bd20 	.word	0x0001bd20
    3680:	00002995 	.word	0x00002995

00003684 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
    3684:	b909      	cbnz	r1, 368a <lv_obj_get_style_list+0x6>
    3686:	3028      	adds	r0, #40	; 0x28
    3688:	4770      	bx	lr
{
    368a:	b500      	push	{lr}
    368c:	b083      	sub	sp, #12
    info.part = part;
    368e:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
    3692:	2300      	movs	r3, #0
    3694:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
    3696:	466a      	mov	r2, sp
    3698:	2108      	movs	r1, #8
    369a:	4b04      	ldr	r3, [pc, #16]	; (36ac <lv_obj_get_style_list+0x28>)
    369c:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
    369e:	2801      	cmp	r0, #1
    return info.result;
    36a0:	bf0c      	ite	eq
    36a2:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
    36a4:	2000      	movne	r0, #0
}
    36a6:	b003      	add	sp, #12
    36a8:	f85d fb04 	ldr.w	pc, [sp], #4
    36ac:	000031fd 	.word	0x000031fd

000036b0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all porpeties
 * @param tr_limit delete transitions only "older" then this. `NULL` is not used
 */
static void trans_del(lv_obj_t * obj, uint8_t part, lv_style_property_t prop, lv_style_trans_t * tr_limit)
{
    36b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36b4:	4680      	mov	r8, r0
    36b6:	468a      	mov	sl, r1
    36b8:	4693      	mov	fp, r2
    36ba:	461e      	mov	r6, r3
    lv_style_trans_t * tr;
    lv_style_trans_t * tr_prev;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    36bc:	481c      	ldr	r0, [pc, #112]	; (3730 <trans_del+0x80>)
    36be:	4b1d      	ldr	r3, [pc, #116]	; (3734 <trans_del+0x84>)
    36c0:	4798      	blx	r3
    while(tr != NULL) {
    36c2:	2800      	cmp	r0, #0
    36c4:	d031      	beq.n	372a <trans_del+0x7a>
    36c6:	4605      	mov	r5, r0
        if(tr == tr_limit) break;
    36c8:	42b0      	cmp	r0, r6
    36ca:	d02e      	beq.n	372a <trans_del+0x7a>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    36cc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 3730 <trans_del+0x80>
    36d0:	4f19      	ldr	r7, [pc, #100]	; (3738 <trans_del+0x88>)
    36d2:	e009      	b.n	36e8 <trans_del+0x38>

        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    36d4:	88ab      	ldrh	r3, [r5, #4]
    36d6:	455b      	cmp	r3, fp
    36d8:	d014      	beq.n	3704 <trans_del+0x54>
    36da:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    36de:	d011      	beq.n	3704 <trans_del+0x54>
    while(tr != NULL) {
    36e0:	b31c      	cbz	r4, 372a <trans_del+0x7a>
    36e2:	4625      	mov	r5, r4
        if(tr == tr_limit) break;
    36e4:	42a6      	cmp	r6, r4
    36e6:	d020      	beq.n	372a <trans_del+0x7a>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    36e8:	4629      	mov	r1, r5
    36ea:	4648      	mov	r0, r9
    36ec:	47b8      	blx	r7
    36ee:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
    36f0:	6828      	ldr	r0, [r5, #0]
    36f2:	4540      	cmp	r0, r8
    36f4:	d1f4      	bne.n	36e0 <trans_del+0x30>
    36f6:	79a9      	ldrb	r1, [r5, #6]
    36f8:	4551      	cmp	r1, sl
    36fa:	d0eb      	beq.n	36d4 <trans_del+0x24>
    36fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3700:	d1ee      	bne.n	36e0 <trans_del+0x30>
    3702:	e7e7      	b.n	36d4 <trans_del+0x24>
            /* Remove the transitioned property from trans. style
             * to allow changing it by normal styles*/
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    3704:	4b0d      	ldr	r3, [pc, #52]	; (373c <trans_del+0x8c>)
    3706:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    3708:	4b0d      	ldr	r3, [pc, #52]	; (3740 <trans_del+0x90>)
    370a:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
    370c:	88a9      	ldrh	r1, [r5, #4]
    370e:	4b0d      	ldr	r3, [pc, #52]	; (3744 <trans_del+0x94>)
    3710:	4798      	blx	r3

            lv_anim_del(tr, NULL);
    3712:	2100      	movs	r1, #0
    3714:	4628      	mov	r0, r5
    3716:	4b0c      	ldr	r3, [pc, #48]	; (3748 <trans_del+0x98>)
    3718:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    371a:	4629      	mov	r1, r5
    371c:	4648      	mov	r0, r9
    371e:	4b0b      	ldr	r3, [pc, #44]	; (374c <trans_del+0x9c>)
    3720:	4798      	blx	r3
            lv_mem_free(tr);
    3722:	4628      	mov	r0, r5
    3724:	4b0a      	ldr	r3, [pc, #40]	; (3750 <trans_del+0xa0>)
    3726:	4798      	blx	r3
    3728:	e7da      	b.n	36e0 <trans_del+0x30>
    372a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    372e:	bf00      	nop
    3730:	20006d58 	.word	0x20006d58
    3734:	0001255b 	.word	0x0001255b
    3738:	00012591 	.word	0x00012591
    373c:	00003685 	.word	0x00003685
    3740:	0000768f 	.word	0x0000768f
    3744:	00006d95 	.word	0x00006d95
    3748:	000118d1 	.word	0x000118d1
    374c:	0001263d 	.word	0x0001263d
    3750:	00012a6d 	.word	0x00012a6d

00003754 <lv_obj_clean_style_list>:
{
    3754:	b530      	push	{r4, r5, lr}
    3756:	b083      	sub	sp, #12
    3758:	4604      	mov	r4, r0
    375a:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
    375c:	4b0b      	ldr	r3, [pc, #44]	; (378c <lv_obj_clean_style_list+0x38>)
    375e:	4798      	blx	r3
    if(style_dsc == NULL) {
    3760:	b148      	cbz	r0, 3776 <lv_obj_clean_style_list+0x22>
    _lv_style_list_reset(style_dsc);
    3762:	4b0b      	ldr	r3, [pc, #44]	; (3790 <lv_obj_clean_style_list+0x3c>)
    3764:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
    3766:	2300      	movs	r3, #0
    3768:	22ff      	movs	r2, #255	; 0xff
    376a:	4629      	mov	r1, r5
    376c:	4620      	mov	r0, r4
    376e:	4c09      	ldr	r4, [pc, #36]	; (3794 <lv_obj_clean_style_list+0x40>)
    3770:	47a0      	blx	r4
}
    3772:	b003      	add	sp, #12
    3774:	bd30      	pop	{r4, r5, pc}
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
    3776:	4b08      	ldr	r3, [pc, #32]	; (3798 <lv_obj_clean_style_list+0x44>)
    3778:	9300      	str	r3, [sp, #0]
    377a:	4b08      	ldr	r3, [pc, #32]	; (379c <lv_obj_clean_style_list+0x48>)
    377c:	f240 4292 	movw	r2, #1170	; 0x492
    3780:	4907      	ldr	r1, [pc, #28]	; (37a0 <lv_obj_clean_style_list+0x4c>)
    3782:	2002      	movs	r0, #2
    3784:	4c07      	ldr	r4, [pc, #28]	; (37a4 <lv_obj_clean_style_list+0x50>)
    3786:	47a0      	blx	r4
        return;
    3788:	e7f3      	b.n	3772 <lv_obj_clean_style_list+0x1e>
    378a:	bf00      	nop
    378c:	00003685 	.word	0x00003685
    3790:	000076a1 	.word	0x000076a1
    3794:	000036b1 	.word	0x000036b1
    3798:	0001bd7c 	.word	0x0001bd7c
    379c:	0001b8c8 	.word	0x0001b8c8
    37a0:	0001bcc0 	.word	0x0001bcc0
    37a4:	00012805 	.word	0x00012805

000037a8 <trans_anim_ready_cb>:
    tr->prop = prop_tmp;

}

static void trans_anim_ready_cb(lv_anim_t * a)
{
    37a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_trans_t * tr = a->var;
    37aa:	6804      	ldr	r4, [r0, #0]
     * if there no more transitions for this property
     * It allows changing it by normal styles*/

    bool running = false;
    lv_style_trans_t * tr_i;
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
    37ac:	4817      	ldr	r0, [pc, #92]	; (380c <trans_anim_ready_cb+0x64>)
    37ae:	4b18      	ldr	r3, [pc, #96]	; (3810 <trans_anim_ready_cb+0x68>)
    37b0:	4798      	blx	r3
    37b2:	b308      	cbz	r0, 37f8 <trans_anim_ready_cb+0x50>
    37b4:	4601      	mov	r1, r0
    37b6:	2700      	movs	r7, #0
    37b8:	4e14      	ldr	r6, [pc, #80]	; (380c <trans_anim_ready_cb+0x64>)
    37ba:	4d16      	ldr	r5, [pc, #88]	; (3814 <trans_anim_ready_cb+0x6c>)
    37bc:	e003      	b.n	37c6 <trans_anim_ready_cb+0x1e>
    37be:	4630      	mov	r0, r6
    37c0:	47a8      	blx	r5
    37c2:	4601      	mov	r1, r0
    37c4:	b178      	cbz	r0, 37e6 <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
    37c6:	428c      	cmp	r4, r1
    37c8:	d0f9      	beq.n	37be <trans_anim_ready_cb+0x16>
    37ca:	680a      	ldr	r2, [r1, #0]
    37cc:	6823      	ldr	r3, [r4, #0]
    37ce:	429a      	cmp	r2, r3
    37d0:	d1f5      	bne.n	37be <trans_anim_ready_cb+0x16>
    37d2:	684b      	ldr	r3, [r1, #4]
    37d4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    37d8:	6863      	ldr	r3, [r4, #4]
    37da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
            running = true;
    37de:	429a      	cmp	r2, r3
    37e0:	bf08      	it	eq
    37e2:	2701      	moveq	r7, #1
    37e4:	e7eb      	b.n	37be <trans_anim_ready_cb+0x16>
        }
    }

    if(!running) {
    37e6:	b13f      	cbz	r7, 37f8 <trans_anim_ready_cb+0x50>
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
        lv_style_remove_prop(style_trans, tr->prop);
    }

    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
    37e8:	4621      	mov	r1, r4
    37ea:	4808      	ldr	r0, [pc, #32]	; (380c <trans_anim_ready_cb+0x64>)
    37ec:	4b0a      	ldr	r3, [pc, #40]	; (3818 <trans_anim_ready_cb+0x70>)
    37ee:	4798      	blx	r3
    lv_mem_free(tr);
    37f0:	4620      	mov	r0, r4
    37f2:	4b0a      	ldr	r3, [pc, #40]	; (381c <trans_anim_ready_cb+0x74>)
    37f4:	4798      	blx	r3
    37f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    37f8:	79a1      	ldrb	r1, [r4, #6]
    37fa:	6820      	ldr	r0, [r4, #0]
    37fc:	4b08      	ldr	r3, [pc, #32]	; (3820 <trans_anim_ready_cb+0x78>)
    37fe:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
    3800:	4b08      	ldr	r3, [pc, #32]	; (3824 <trans_anim_ready_cb+0x7c>)
    3802:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
    3804:	88a1      	ldrh	r1, [r4, #4]
    3806:	4b08      	ldr	r3, [pc, #32]	; (3828 <trans_anim_ready_cb+0x80>)
    3808:	4798      	blx	r3
    380a:	e7ed      	b.n	37e8 <trans_anim_ready_cb+0x40>
    380c:	20006d58 	.word	0x20006d58
    3810:	00012551 	.word	0x00012551
    3814:	00012565 	.word	0x00012565
    3818:	0001263d 	.word	0x0001263d
    381c:	00012a6d 	.word	0x00012a6d
    3820:	00003685 	.word	0x00003685
    3824:	0000768f 	.word	0x0000768f
    3828:	00006d95 	.word	0x00006d95

0000382c <lv_obj_get_hidden>:
{
    382c:	b530      	push	{r4, r5, lr}
    382e:	b083      	sub	sp, #12
    3830:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3832:	4b0b      	ldr	r3, [pc, #44]	; (3860 <lv_obj_get_hidden+0x34>)
    3834:	4798      	blx	r3
    3836:	b128      	cbz	r0, 3844 <lv_obj_get_hidden+0x18>
    return obj->hidden == 0 ? false : true;
    3838:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
    383c:	f3c0 1000 	ubfx	r0, r0, #4, #1
    3840:	b003      	add	sp, #12
    3842:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3844:	4b07      	ldr	r3, [pc, #28]	; (3864 <lv_obj_get_hidden+0x38>)
    3846:	9300      	str	r3, [sp, #0]
    3848:	f640 2241 	movw	r2, #2625	; 0xa41
    384c:	4906      	ldr	r1, [pc, #24]	; (3868 <lv_obj_get_hidden+0x3c>)
    384e:	2003      	movs	r0, #3
    3850:	4d06      	ldr	r5, [pc, #24]	; (386c <lv_obj_get_hidden+0x40>)
    3852:	47a8      	blx	r5
    3854:	4622      	mov	r2, r4
    3856:	2300      	movs	r3, #0
    3858:	4805      	ldr	r0, [pc, #20]	; (3870 <lv_obj_get_hidden+0x44>)
    385a:	4906      	ldr	r1, [pc, #24]	; (3874 <lv_obj_get_hidden+0x48>)
    385c:	4788      	blx	r1
    385e:	e7fe      	b.n	385e <lv_obj_get_hidden+0x32>
    3860:	0000298d 	.word	0x0000298d
    3864:	0001b918 	.word	0x0001b918
    3868:	0001bcc0 	.word	0x0001bcc0
    386c:	00012805 	.word	0x00012805
    3870:	0001bd20 	.word	0x0001bd20
    3874:	00002995 	.word	0x00002995

00003878 <lv_obj_invalidate_area>:
{
    3878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    387c:	b086      	sub	sp, #24
    387e:	4604      	mov	r4, r0
    3880:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3882:	4b3a      	ldr	r3, [pc, #232]	; (396c <lv_obj_invalidate_area+0xf4>)
    3884:	4798      	blx	r3
    3886:	b968      	cbnz	r0, 38a4 <lv_obj_invalidate_area+0x2c>
    3888:	4b39      	ldr	r3, [pc, #228]	; (3970 <lv_obj_invalidate_area+0xf8>)
    388a:	9300      	str	r3, [sp, #0]
    388c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    3890:	4938      	ldr	r1, [pc, #224]	; (3974 <lv_obj_invalidate_area+0xfc>)
    3892:	2003      	movs	r0, #3
    3894:	4d38      	ldr	r5, [pc, #224]	; (3978 <lv_obj_invalidate_area+0x100>)
    3896:	47a8      	blx	r5
    3898:	4622      	mov	r2, r4
    389a:	2300      	movs	r3, #0
    389c:	4837      	ldr	r0, [pc, #220]	; (397c <lv_obj_invalidate_area+0x104>)
    389e:	4938      	ldr	r1, [pc, #224]	; (3980 <lv_obj_invalidate_area+0x108>)
    38a0:	4788      	blx	r1
    38a2:	e7fe      	b.n	38a2 <lv_obj_invalidate_area+0x2a>
    if(lv_obj_get_hidden(obj)) return;
    38a4:	4620      	mov	r0, r4
    38a6:	4b37      	ldr	r3, [pc, #220]	; (3984 <lv_obj_invalidate_area+0x10c>)
    38a8:	4798      	blx	r3
    38aa:	b110      	cbz	r0, 38b2 <lv_obj_invalidate_area+0x3a>
}
    38ac:	b006      	add	sp, #24
    38ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
    38b2:	4620      	mov	r0, r4
    38b4:	4b34      	ldr	r3, [pc, #208]	; (3988 <lv_obj_invalidate_area+0x110>)
    38b6:	4798      	blx	r3
    38b8:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
    38ba:	4b34      	ldr	r3, [pc, #208]	; (398c <lv_obj_invalidate_area+0x114>)
    38bc:	4798      	blx	r3
    38be:	4605      	mov	r5, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    38c0:	4b33      	ldr	r3, [pc, #204]	; (3990 <lv_obj_invalidate_area+0x118>)
    38c2:	4798      	blx	r3
    38c4:	4287      	cmp	r7, r0
    38c6:	d009      	beq.n	38dc <lv_obj_invalidate_area+0x64>
    38c8:	4628      	mov	r0, r5
    38ca:	4b32      	ldr	r3, [pc, #200]	; (3994 <lv_obj_invalidate_area+0x11c>)
    38cc:	4798      	blx	r3
    38ce:	4287      	cmp	r7, r0
    38d0:	d004      	beq.n	38dc <lv_obj_invalidate_area+0x64>
       obj_scr == lv_disp_get_layer_sys(disp)) {
    38d2:	4628      	mov	r0, r5
    38d4:	4b30      	ldr	r3, [pc, #192]	; (3998 <lv_obj_invalidate_area+0x120>)
    38d6:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
    38d8:	4287      	cmp	r7, r0
    38da:	d1e7      	bne.n	38ac <lv_obj_invalidate_area+0x34>
        lv_coord_t ext_size = obj->ext_draw_pad;
    38dc:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    38e0:	f104 020f 	add.w	r2, r4, #15
    38e4:	f104 0017 	add.w	r0, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    38e8:	a902      	add	r1, sp, #8
        *d8 = *s8;
    38ea:	f812 7f01 	ldrb.w	r7, [r2, #1]!
    38ee:	f801 7b01 	strb.w	r7, [r1], #1
    while(len) {
    38f2:	4282      	cmp	r2, r0
    38f4:	d1f9      	bne.n	38ea <lv_obj_invalidate_area+0x72>
        obj_coords.x1 -= ext_size;
    38f6:	b29b      	uxth	r3, r3
    38f8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    38fc:	1ad2      	subs	r2, r2, r3
    38fe:	f8ad 2008 	strh.w	r2, [sp, #8]
        obj_coords.y1 -= ext_size;
    3902:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    3906:	1ad2      	subs	r2, r2, r3
    3908:	f8ad 200a 	strh.w	r2, [sp, #10]
        obj_coords.x2 += ext_size;
    390c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    3910:	441a      	add	r2, r3
    3912:	f8ad 200c 	strh.w	r2, [sp, #12]
        obj_coords.y2 += ext_size;
    3916:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    391a:	4413      	add	r3, r2
    391c:	f8ad 300e 	strh.w	r3, [sp, #14]
        is_common = _lv_area_intersect(&area_trunc, area, &obj_coords);
    3920:	aa02      	add	r2, sp, #8
    3922:	4631      	mov	r1, r6
    3924:	a804      	add	r0, sp, #16
    3926:	4b1d      	ldr	r3, [pc, #116]	; (399c <lv_obj_invalidate_area+0x124>)
    3928:	4798      	blx	r3
        if(is_common == false) return;  /*The area is not on the object*/
    392a:	2800      	cmp	r0, #0
    392c:	d0be      	beq.n	38ac <lv_obj_invalidate_area+0x34>
        lv_obj_t * par = lv_obj_get_parent(obj);
    392e:	4620      	mov	r0, r4
    3930:	4b1b      	ldr	r3, [pc, #108]	; (39a0 <lv_obj_invalidate_area+0x128>)
    3932:	4798      	blx	r3
        while(par != NULL) {
    3934:	4604      	mov	r4, r0
    3936:	b198      	cbz	r0, 3960 <lv_obj_invalidate_area+0xe8>
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    3938:	f8df 8060 	ldr.w	r8, [pc, #96]	; 399c <lv_obj_invalidate_area+0x124>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    393c:	4f11      	ldr	r7, [pc, #68]	; (3984 <lv_obj_invalidate_area+0x10c>)
            par = lv_obj_get_parent(par);
    393e:	4e18      	ldr	r6, [pc, #96]	; (39a0 <lv_obj_invalidate_area+0x128>)
            is_common = _lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
    3940:	f104 0210 	add.w	r2, r4, #16
    3944:	a904      	add	r1, sp, #16
    3946:	4608      	mov	r0, r1
    3948:	47c0      	blx	r8
            if(is_common == false) break;       /*If no common parts with parent break;*/
    394a:	2800      	cmp	r0, #0
    394c:	d0ae      	beq.n	38ac <lv_obj_invalidate_area+0x34>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
    394e:	4620      	mov	r0, r4
    3950:	47b8      	blx	r7
    3952:	2800      	cmp	r0, #0
    3954:	d1aa      	bne.n	38ac <lv_obj_invalidate_area+0x34>
            par = lv_obj_get_parent(par);
    3956:	4620      	mov	r0, r4
    3958:	47b0      	blx	r6
        while(par != NULL) {
    395a:	4604      	mov	r4, r0
    395c:	2800      	cmp	r0, #0
    395e:	d1ef      	bne.n	3940 <lv_obj_invalidate_area+0xc8>
        if(is_common) _lv_inv_area(disp, &area_trunc);
    3960:	a904      	add	r1, sp, #16
    3962:	4628      	mov	r0, r5
    3964:	4b0f      	ldr	r3, [pc, #60]	; (39a4 <lv_obj_invalidate_area+0x12c>)
    3966:	4798      	blx	r3
    3968:	e7a0      	b.n	38ac <lv_obj_invalidate_area+0x34>
    396a:	bf00      	nop
    396c:	0000298d 	.word	0x0000298d
    3970:	0001b92c 	.word	0x0001b92c
    3974:	0001bcc0 	.word	0x0001bcc0
    3978:	00012805 	.word	0x00012805
    397c:	0001bd20 	.word	0x0001bd20
    3980:	00002995 	.word	0x00002995
    3984:	0000382d 	.word	0x0000382d
    3988:	0000334d 	.word	0x0000334d
    398c:	000033a9 	.word	0x000033a9
    3990:	00002a29 	.word	0x00002a29
    3994:	00002a69 	.word	0x00002a69
    3998:	00002aa9 	.word	0x00002aa9
    399c:	00011ac1 	.word	0x00011ac1
    39a0:	00003305 	.word	0x00003305
    39a4:	00006401 	.word	0x00006401

000039a8 <lv_obj_invalidate>:
{
    39a8:	b530      	push	{r4, r5, lr}
    39aa:	b085      	sub	sp, #20
    39ac:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    39ae:	4b1c      	ldr	r3, [pc, #112]	; (3a20 <lv_obj_invalidate+0x78>)
    39b0:	4798      	blx	r3
    39b2:	b338      	cbz	r0, 3a04 <lv_obj_invalidate+0x5c>
    lv_coord_t ext_size = obj->ext_draw_pad;
    39b4:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    39b8:	f104 020f 	add.w	r2, r4, #15
    39bc:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    39c0:	a902      	add	r1, sp, #8
        *d8 = *s8;
    39c2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    39c6:	f801 0b01 	strb.w	r0, [r1], #1
    while(len) {
    39ca:	42aa      	cmp	r2, r5
    39cc:	d1f9      	bne.n	39c2 <lv_obj_invalidate+0x1a>
    obj_coords.x1 -= ext_size;
    39ce:	b29b      	uxth	r3, r3
    39d0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    39d4:	1ad2      	subs	r2, r2, r3
    39d6:	f8ad 2008 	strh.w	r2, [sp, #8]
    obj_coords.y1 -= ext_size;
    39da:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    39de:	1ad2      	subs	r2, r2, r3
    39e0:	f8ad 200a 	strh.w	r2, [sp, #10]
    obj_coords.x2 += ext_size;
    39e4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    39e8:	441a      	add	r2, r3
    39ea:	f8ad 200c 	strh.w	r2, [sp, #12]
    obj_coords.y2 += ext_size;
    39ee:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    39f2:	4413      	add	r3, r2
    39f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_invalidate_area(obj, &obj_coords);
    39f8:	a902      	add	r1, sp, #8
    39fa:	4620      	mov	r0, r4
    39fc:	4b09      	ldr	r3, [pc, #36]	; (3a24 <lv_obj_invalidate+0x7c>)
    39fe:	4798      	blx	r3
}
    3a00:	b005      	add	sp, #20
    3a02:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a04:	4b08      	ldr	r3, [pc, #32]	; (3a28 <lv_obj_invalidate+0x80>)
    3a06:	9300      	str	r3, [sp, #0]
    3a08:	f240 220d 	movw	r2, #525	; 0x20d
    3a0c:	4907      	ldr	r1, [pc, #28]	; (3a2c <lv_obj_invalidate+0x84>)
    3a0e:	2003      	movs	r0, #3
    3a10:	4d07      	ldr	r5, [pc, #28]	; (3a30 <lv_obj_invalidate+0x88>)
    3a12:	47a8      	blx	r5
    3a14:	4622      	mov	r2, r4
    3a16:	2300      	movs	r3, #0
    3a18:	4806      	ldr	r0, [pc, #24]	; (3a34 <lv_obj_invalidate+0x8c>)
    3a1a:	4907      	ldr	r1, [pc, #28]	; (3a38 <lv_obj_invalidate+0x90>)
    3a1c:	4788      	blx	r1
    3a1e:	e7fe      	b.n	3a1e <lv_obj_invalidate+0x76>
    3a20:	0000298d 	.word	0x0000298d
    3a24:	00003879 	.word	0x00003879
    3a28:	0001b944 	.word	0x0001b944
    3a2c:	0001bcc0 	.word	0x0001bcc0
    3a30:	00012805 	.word	0x00012805
    3a34:	0001bd20 	.word	0x0001bd20
    3a38:	00002995 	.word	0x00002995

00003a3c <lv_obj_move_foreground>:
{
    3a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3e:	b083      	sub	sp, #12
    3a40:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3a42:	4b16      	ldr	r3, [pc, #88]	; (3a9c <lv_obj_move_foreground+0x60>)
    3a44:	4798      	blx	r3
    3a46:	b968      	cbnz	r0, 3a64 <lv_obj_move_foreground+0x28>
    3a48:	4b15      	ldr	r3, [pc, #84]	; (3aa0 <lv_obj_move_foreground+0x64>)
    3a4a:	9300      	str	r3, [sp, #0]
    3a4c:	f240 2262 	movw	r2, #610	; 0x262
    3a50:	4914      	ldr	r1, [pc, #80]	; (3aa4 <lv_obj_move_foreground+0x68>)
    3a52:	2003      	movs	r0, #3
    3a54:	4c14      	ldr	r4, [pc, #80]	; (3aa8 <lv_obj_move_foreground+0x6c>)
    3a56:	47a0      	blx	r4
    3a58:	462a      	mov	r2, r5
    3a5a:	2300      	movs	r3, #0
    3a5c:	4813      	ldr	r0, [pc, #76]	; (3aac <lv_obj_move_foreground+0x70>)
    3a5e:	4914      	ldr	r1, [pc, #80]	; (3ab0 <lv_obj_move_foreground+0x74>)
    3a60:	4788      	blx	r1
    3a62:	e7fe      	b.n	3a62 <lv_obj_move_foreground+0x26>
    lv_obj_t * parent = lv_obj_get_parent(obj);
    3a64:	4628      	mov	r0, r5
    3a66:	4b13      	ldr	r3, [pc, #76]	; (3ab4 <lv_obj_move_foreground+0x78>)
    3a68:	4798      	blx	r3
    3a6a:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
    3a6c:	1d06      	adds	r6, r0, #4
    3a6e:	4630      	mov	r0, r6
    3a70:	4b11      	ldr	r3, [pc, #68]	; (3ab8 <lv_obj_move_foreground+0x7c>)
    3a72:	4798      	blx	r3
    3a74:	4285      	cmp	r5, r0
    3a76:	d00f      	beq.n	3a98 <lv_obj_move_foreground+0x5c>
    lv_obj_invalidate(parent);
    3a78:	4620      	mov	r0, r4
    3a7a:	4f10      	ldr	r7, [pc, #64]	; (3abc <lv_obj_move_foreground+0x80>)
    3a7c:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
    3a7e:	2301      	movs	r3, #1
    3a80:	462a      	mov	r2, r5
    3a82:	4631      	mov	r1, r6
    3a84:	4630      	mov	r0, r6
    3a86:	4e0e      	ldr	r6, [pc, #56]	; (3ac0 <lv_obj_move_foreground+0x84>)
    3a88:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
    3a8a:	69e3      	ldr	r3, [r4, #28]
    3a8c:	462a      	mov	r2, r5
    3a8e:	2101      	movs	r1, #1
    3a90:	4620      	mov	r0, r4
    3a92:	4798      	blx	r3
    lv_obj_invalidate(parent);
    3a94:	4620      	mov	r0, r4
    3a96:	47b8      	blx	r7
}
    3a98:	b003      	add	sp, #12
    3a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a9c:	0000298d 	.word	0x0000298d
    3aa0:	0001b958 	.word	0x0001b958
    3aa4:	0001bcc0 	.word	0x0001bcc0
    3aa8:	00012805 	.word	0x00012805
    3aac:	0001bd20 	.word	0x0001bd20
    3ab0:	00002995 	.word	0x00002995
    3ab4:	00003305 	.word	0x00003305
    3ab8:	00012551 	.word	0x00012551
    3abc:	000039a9 	.word	0x000039a9
    3ac0:	000126c9 	.word	0x000126c9

00003ac4 <lv_obj_set_pos>:
{
    3ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ac8:	b084      	sub	sp, #16
    3aca:	4604      	mov	r4, r0
    3acc:	468a      	mov	sl, r1
    3ace:	4617      	mov	r7, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3ad0:	4b2d      	ldr	r3, [pc, #180]	; (3b88 <lv_obj_set_pos+0xc4>)
    3ad2:	4798      	blx	r3
    3ad4:	2800      	cmp	r0, #0
    3ad6:	d03e      	beq.n	3b56 <lv_obj_set_pos+0x92>
    lv_obj_t * par = obj->parent;
    3ad8:	6826      	ldr	r6, [r4, #0]
    if(par == NULL) {
    3ada:	2e00      	cmp	r6, #0
    3adc:	d049      	beq.n	3b72 <lv_obj_set_pos+0xae>
    diff.x = x - obj->coords.x1;
    3ade:	8a33      	ldrh	r3, [r6, #16]
    3ae0:	8a22      	ldrh	r2, [r4, #16]
    3ae2:	1a9b      	subs	r3, r3, r2
    3ae4:	4453      	add	r3, sl
    3ae6:	fa1f fa83 	uxth.w	sl, r3
    3aea:	fa0f f88a 	sxth.w	r8, sl
    diff.y = y - obj->coords.y1;
    3aee:	8a75      	ldrh	r5, [r6, #18]
    3af0:	8a63      	ldrh	r3, [r4, #18]
    3af2:	1aed      	subs	r5, r5, r3
    3af4:	443d      	add	r5, r7
    3af6:	b2ad      	uxth	r5, r5
    3af8:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
    3afc:	f1b8 0f00 	cmp.w	r8, #0
    3b00:	d102      	bne.n	3b08 <lv_obj_set_pos+0x44>
    3b02:	f1b9 0f00 	cmp.w	r9, #0
    3b06:	d023      	beq.n	3b50 <lv_obj_set_pos+0x8c>
    lv_obj_invalidate(obj);
    3b08:	4620      	mov	r0, r4
    3b0a:	4f20      	ldr	r7, [pc, #128]	; (3b8c <lv_obj_set_pos+0xc8>)
    3b0c:	47b8      	blx	r7
    lv_obj_get_coords(obj, &ori);
    3b0e:	a902      	add	r1, sp, #8
    3b10:	4620      	mov	r0, r4
    3b12:	4b1f      	ldr	r3, [pc, #124]	; (3b90 <lv_obj_set_pos+0xcc>)
    3b14:	4798      	blx	r3
    obj->coords.x1 += diff.x;
    3b16:	8a23      	ldrh	r3, [r4, #16]
    3b18:	4453      	add	r3, sl
    3b1a:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
    3b1c:	8a63      	ldrh	r3, [r4, #18]
    3b1e:	442b      	add	r3, r5
    3b20:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
    3b22:	8aa3      	ldrh	r3, [r4, #20]
    3b24:	4453      	add	r3, sl
    3b26:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
    3b28:	8ae3      	ldrh	r3, [r4, #22]
    3b2a:	441d      	add	r5, r3
    3b2c:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
    3b2e:	464a      	mov	r2, r9
    3b30:	4641      	mov	r1, r8
    3b32:	4620      	mov	r0, r4
    3b34:	4b17      	ldr	r3, [pc, #92]	; (3b94 <lv_obj_set_pos+0xd0>)
    3b36:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    3b38:	69e3      	ldr	r3, [r4, #28]
    3b3a:	aa02      	add	r2, sp, #8
    3b3c:	2102      	movs	r1, #2
    3b3e:	4620      	mov	r0, r4
    3b40:	4798      	blx	r3
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    3b42:	69f3      	ldr	r3, [r6, #28]
    3b44:	4622      	mov	r2, r4
    3b46:	2101      	movs	r1, #1
    3b48:	4630      	mov	r0, r6
    3b4a:	4798      	blx	r3
    lv_obj_invalidate(obj);
    3b4c:	4620      	mov	r0, r4
    3b4e:	47b8      	blx	r7
}
    3b50:	b004      	add	sp, #16
    3b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3b56:	4b10      	ldr	r3, [pc, #64]	; (3b98 <lv_obj_set_pos+0xd4>)
    3b58:	9300      	str	r3, [sp, #0]
    3b5a:	f240 2296 	movw	r2, #662	; 0x296
    3b5e:	490f      	ldr	r1, [pc, #60]	; (3b9c <lv_obj_set_pos+0xd8>)
    3b60:	2003      	movs	r0, #3
    3b62:	4d0f      	ldr	r5, [pc, #60]	; (3ba0 <lv_obj_set_pos+0xdc>)
    3b64:	47a8      	blx	r5
    3b66:	4622      	mov	r2, r4
    3b68:	2300      	movs	r3, #0
    3b6a:	480e      	ldr	r0, [pc, #56]	; (3ba4 <lv_obj_set_pos+0xe0>)
    3b6c:	490e      	ldr	r1, [pc, #56]	; (3ba8 <lv_obj_set_pos+0xe4>)
    3b6e:	4788      	blx	r1
    3b70:	e7fe      	b.n	3b70 <lv_obj_set_pos+0xac>
        LV_LOG_WARN("lv_obj_set_pos: not changing position of screen object");
    3b72:	4b0e      	ldr	r3, [pc, #56]	; (3bac <lv_obj_set_pos+0xe8>)
    3b74:	9300      	str	r3, [sp, #0]
    3b76:	4b08      	ldr	r3, [pc, #32]	; (3b98 <lv_obj_set_pos+0xd4>)
    3b78:	f44f 7227 	mov.w	r2, #668	; 0x29c
    3b7c:	4907      	ldr	r1, [pc, #28]	; (3b9c <lv_obj_set_pos+0xd8>)
    3b7e:	2002      	movs	r0, #2
    3b80:	4c07      	ldr	r4, [pc, #28]	; (3ba0 <lv_obj_set_pos+0xdc>)
    3b82:	47a0      	blx	r4
        return;
    3b84:	e7e4      	b.n	3b50 <lv_obj_set_pos+0x8c>
    3b86:	bf00      	nop
    3b88:	0000298d 	.word	0x0000298d
    3b8c:	000039a9 	.word	0x000039a9
    3b90:	000034c9 	.word	0x000034c9
    3b94:	00002ee9 	.word	0x00002ee9
    3b98:	0001b988 	.word	0x0001b988
    3b9c:	0001bcc0 	.word	0x0001bcc0
    3ba0:	00012805 	.word	0x00012805
    3ba4:	0001bd20 	.word	0x0001bd20
    3ba8:	00002995 	.word	0x00002995
    3bac:	0001bdb4 	.word	0x0001bdb4

00003bb0 <lv_obj_set_x>:
{
    3bb0:	b530      	push	{r4, r5, lr}
    3bb2:	b083      	sub	sp, #12
    3bb4:	4604      	mov	r4, r0
    3bb6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3bb8:	4b0d      	ldr	r3, [pc, #52]	; (3bf0 <lv_obj_set_x+0x40>)
    3bba:	4798      	blx	r3
    3bbc:	b968      	cbnz	r0, 3bda <lv_obj_set_x+0x2a>
    3bbe:	4b0d      	ldr	r3, [pc, #52]	; (3bf4 <lv_obj_set_x+0x44>)
    3bc0:	9300      	str	r3, [sp, #0]
    3bc2:	f44f 7233 	mov.w	r2, #716	; 0x2cc
    3bc6:	490c      	ldr	r1, [pc, #48]	; (3bf8 <lv_obj_set_x+0x48>)
    3bc8:	2003      	movs	r0, #3
    3bca:	4d0c      	ldr	r5, [pc, #48]	; (3bfc <lv_obj_set_x+0x4c>)
    3bcc:	47a8      	blx	r5
    3bce:	4622      	mov	r2, r4
    3bd0:	2300      	movs	r3, #0
    3bd2:	480b      	ldr	r0, [pc, #44]	; (3c00 <lv_obj_set_x+0x50>)
    3bd4:	490b      	ldr	r1, [pc, #44]	; (3c04 <lv_obj_set_x+0x54>)
    3bd6:	4788      	blx	r1
    3bd8:	e7fe      	b.n	3bd8 <lv_obj_set_x+0x28>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
    3bda:	4620      	mov	r0, r4
    3bdc:	4b0a      	ldr	r3, [pc, #40]	; (3c08 <lv_obj_set_x+0x58>)
    3bde:	4798      	blx	r3
    3be0:	4602      	mov	r2, r0
    3be2:	4629      	mov	r1, r5
    3be4:	4620      	mov	r0, r4
    3be6:	4b09      	ldr	r3, [pc, #36]	; (3c0c <lv_obj_set_x+0x5c>)
    3be8:	4798      	blx	r3
}
    3bea:	b003      	add	sp, #12
    3bec:	bd30      	pop	{r4, r5, pc}
    3bee:	bf00      	nop
    3bf0:	0000298d 	.word	0x0000298d
    3bf4:	0001b998 	.word	0x0001b998
    3bf8:	0001bcc0 	.word	0x0001bcc0
    3bfc:	00012805 	.word	0x00012805
    3c00:	0001bd20 	.word	0x0001bd20
    3c04:	00002995 	.word	0x00002995
    3c08:	00003585 	.word	0x00003585
    3c0c:	00003ac5 	.word	0x00003ac5

00003c10 <lv_obj_set_y>:
{
    3c10:	b530      	push	{r4, r5, lr}
    3c12:	b083      	sub	sp, #12
    3c14:	4604      	mov	r4, r0
    3c16:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3c18:	4b0d      	ldr	r3, [pc, #52]	; (3c50 <lv_obj_set_y+0x40>)
    3c1a:	4798      	blx	r3
    3c1c:	b968      	cbnz	r0, 3c3a <lv_obj_set_y+0x2a>
    3c1e:	4b0d      	ldr	r3, [pc, #52]	; (3c54 <lv_obj_set_y+0x44>)
    3c20:	9300      	str	r3, [sp, #0]
    3c22:	f44f 7236 	mov.w	r2, #728	; 0x2d8
    3c26:	490c      	ldr	r1, [pc, #48]	; (3c58 <lv_obj_set_y+0x48>)
    3c28:	2003      	movs	r0, #3
    3c2a:	4d0c      	ldr	r5, [pc, #48]	; (3c5c <lv_obj_set_y+0x4c>)
    3c2c:	47a8      	blx	r5
    3c2e:	4622      	mov	r2, r4
    3c30:	2300      	movs	r3, #0
    3c32:	480b      	ldr	r0, [pc, #44]	; (3c60 <lv_obj_set_y+0x50>)
    3c34:	490b      	ldr	r1, [pc, #44]	; (3c64 <lv_obj_set_y+0x54>)
    3c36:	4788      	blx	r1
    3c38:	e7fe      	b.n	3c38 <lv_obj_set_y+0x28>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
    3c3a:	4620      	mov	r0, r4
    3c3c:	4b0a      	ldr	r3, [pc, #40]	; (3c68 <lv_obj_set_y+0x58>)
    3c3e:	4798      	blx	r3
    3c40:	462a      	mov	r2, r5
    3c42:	4601      	mov	r1, r0
    3c44:	4620      	mov	r0, r4
    3c46:	4b09      	ldr	r3, [pc, #36]	; (3c6c <lv_obj_set_y+0x5c>)
    3c48:	4798      	blx	r3
}
    3c4a:	b003      	add	sp, #12
    3c4c:	bd30      	pop	{r4, r5, pc}
    3c4e:	bf00      	nop
    3c50:	0000298d 	.word	0x0000298d
    3c54:	0001b9a8 	.word	0x0001b9a8
    3c58:	0001bcc0 	.word	0x0001bcc0
    3c5c:	00012805 	.word	0x00012805
    3c60:	0001bd20 	.word	0x0001bd20
    3c64:	00002995 	.word	0x00002995
    3c68:	00003525 	.word	0x00003525
    3c6c:	00003ac5 	.word	0x00003ac5

00003c70 <lv_obj_align>:
{
    3c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c74:	b085      	sub	sp, #20
    3c76:	4604      	mov	r4, r0
    3c78:	460d      	mov	r5, r1
    3c7a:	4690      	mov	r8, r2
    3c7c:	461f      	mov	r7, r3
    3c7e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3c82:	4b2c      	ldr	r3, [pc, #176]	; (3d34 <lv_obj_align+0xc4>)
    3c84:	4798      	blx	r3
    3c86:	b968      	cbnz	r0, 3ca4 <lv_obj_align+0x34>
    3c88:	4b2b      	ldr	r3, [pc, #172]	; (3d38 <lv_obj_align+0xc8>)
    3c8a:	9300      	str	r3, [sp, #0]
    3c8c:	f240 326d 	movw	r2, #877	; 0x36d
    3c90:	492a      	ldr	r1, [pc, #168]	; (3d3c <lv_obj_align+0xcc>)
    3c92:	2003      	movs	r0, #3
    3c94:	4d2a      	ldr	r5, [pc, #168]	; (3d40 <lv_obj_align+0xd0>)
    3c96:	47a8      	blx	r5
    3c98:	4622      	mov	r2, r4
    3c9a:	2300      	movs	r3, #0
    3c9c:	4829      	ldr	r0, [pc, #164]	; (3d44 <lv_obj_align+0xd4>)
    3c9e:	492a      	ldr	r1, [pc, #168]	; (3d48 <lv_obj_align+0xd8>)
    3ca0:	4788      	blx	r1
    3ca2:	e7fe      	b.n	3ca2 <lv_obj_align+0x32>
    if(base == NULL) base = lv_obj_get_parent(obj);
    3ca4:	b18d      	cbz	r5, 3cca <lv_obj_align+0x5a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3ca6:	4628      	mov	r0, r5
    3ca8:	4b22      	ldr	r3, [pc, #136]	; (3d34 <lv_obj_align+0xc4>)
    3caa:	4798      	blx	r3
    3cac:	b990      	cbnz	r0, 3cd4 <lv_obj_align+0x64>
    3cae:	4b22      	ldr	r3, [pc, #136]	; (3d38 <lv_obj_align+0xc8>)
    3cb0:	9300      	str	r3, [sp, #0]
    3cb2:	f240 3271 	movw	r2, #881	; 0x371
    3cb6:	4921      	ldr	r1, [pc, #132]	; (3d3c <lv_obj_align+0xcc>)
    3cb8:	2003      	movs	r0, #3
    3cba:	4c21      	ldr	r4, [pc, #132]	; (3d40 <lv_obj_align+0xd0>)
    3cbc:	47a0      	blx	r4
    3cbe:	462a      	mov	r2, r5
    3cc0:	2300      	movs	r3, #0
    3cc2:	4820      	ldr	r0, [pc, #128]	; (3d44 <lv_obj_align+0xd4>)
    3cc4:	4920      	ldr	r1, [pc, #128]	; (3d48 <lv_obj_align+0xd8>)
    3cc6:	4788      	blx	r1
    3cc8:	e7fe      	b.n	3cc8 <lv_obj_align+0x58>
    if(base == NULL) base = lv_obj_get_parent(obj);
    3cca:	4620      	mov	r0, r4
    3ccc:	4b1f      	ldr	r3, [pc, #124]	; (3d4c <lv_obj_align+0xdc>)
    3cce:	4798      	blx	r3
    3cd0:	4605      	mov	r5, r0
    3cd2:	e7e8      	b.n	3ca6 <lv_obj_align+0x36>
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
    3cd4:	ab03      	add	r3, sp, #12
    3cd6:	4642      	mov	r2, r8
    3cd8:	f104 0110 	add.w	r1, r4, #16
    3cdc:	f105 0010 	add.w	r0, r5, #16
    3ce0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 3d54 <lv_obj_align+0xe4>
    3ce4:	47c8      	blx	r9
    lv_obj_t * par        = lv_obj_get_parent(obj);
    3ce6:	4620      	mov	r0, r4
    3ce8:	4b18      	ldr	r3, [pc, #96]	; (3d4c <lv_obj_align+0xdc>)
    3cea:	4798      	blx	r3
    lv_coord_t par_abs_y  = par->coords.y1;
    3cec:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.y += y_ofs;
    3cf0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    3cf4:	4432      	add	r2, r6
    new_pos.x += x_ofs;
    3cf6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    3cfa:	4439      	add	r1, r7
    new_pos.x -= par_abs_x;
    3cfc:	8a00      	ldrh	r0, [r0, #16]
    3cfe:	1a09      	subs	r1, r1, r0
    3d00:	b209      	sxth	r1, r1
    3d02:	f8ad 100c 	strh.w	r1, [sp, #12]
    new_pos.y -= par_abs_y;
    3d06:	1ad2      	subs	r2, r2, r3
    3d08:	b212      	sxth	r2, r2
    3d0a:	f8ad 200e 	strh.w	r2, [sp, #14]
    lv_obj_set_pos(obj, new_pos.x, new_pos.y);
    3d0e:	4620      	mov	r0, r4
    3d10:	4b0f      	ldr	r3, [pc, #60]	; (3d50 <lv_obj_align+0xe0>)
    3d12:	4798      	blx	r3
    obj->realign.align       = align;
    3d14:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    3d18:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    3d1c:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
    3d20:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.origo_align = 0;
    3d22:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    3d26:	f36f 0341 	bfc	r3, #1, #1
    3d2a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
    3d2e:	b005      	add	sp, #20
    3d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d34:	0000298d 	.word	0x0000298d
    3d38:	0001b9b8 	.word	0x0001b9b8
    3d3c:	0001bcc0 	.word	0x0001bcc0
    3d40:	00012805 	.word	0x00012805
    3d44:	0001bd20 	.word	0x0001bd20
    3d48:	00002995 	.word	0x00002995
    3d4c:	00003305 	.word	0x00003305
    3d50:	00003ac5 	.word	0x00003ac5
    3d54:	00011dcd 	.word	0x00011dcd

00003d58 <lv_obj_align_origo>:
{
    3d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d5c:	b085      	sub	sp, #20
    3d5e:	4681      	mov	r9, r0
    3d60:	460e      	mov	r6, r1
    3d62:	4692      	mov	sl, r2
    3d64:	9303      	str	r3, [sp, #12]
    3d66:	f9bd b038 	ldrsh.w	fp, [sp, #56]	; 0x38
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    3d6a:	4ba3      	ldr	r3, [pc, #652]	; (3ff8 <lv_obj_align_origo+0x2a0>)
    3d6c:	4798      	blx	r3
    3d6e:	b968      	cbnz	r0, 3d8c <lv_obj_align_origo+0x34>
    3d70:	4ba2      	ldr	r3, [pc, #648]	; (3ffc <lv_obj_align_origo+0x2a4>)
    3d72:	9300      	str	r3, [sp, #0]
    3d74:	f240 3295 	movw	r2, #917	; 0x395
    3d78:	49a1      	ldr	r1, [pc, #644]	; (4000 <lv_obj_align_origo+0x2a8>)
    3d7a:	2003      	movs	r0, #3
    3d7c:	4ca1      	ldr	r4, [pc, #644]	; (4004 <lv_obj_align_origo+0x2ac>)
    3d7e:	47a0      	blx	r4
    3d80:	464a      	mov	r2, r9
    3d82:	2300      	movs	r3, #0
    3d84:	48a0      	ldr	r0, [pc, #640]	; (4008 <lv_obj_align_origo+0x2b0>)
    3d86:	49a1      	ldr	r1, [pc, #644]	; (400c <lv_obj_align_origo+0x2b4>)
    3d88:	4788      	blx	r1
    3d8a:	e7fe      	b.n	3d8a <lv_obj_align_origo+0x32>
    lv_coord_t new_x = lv_obj_get_x(obj);
    3d8c:	4648      	mov	r0, r9
    3d8e:	4ba0      	ldr	r3, [pc, #640]	; (4010 <lv_obj_align_origo+0x2b8>)
    3d90:	4798      	blx	r3
    3d92:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
    3d94:	4648      	mov	r0, r9
    3d96:	4b9f      	ldr	r3, [pc, #636]	; (4014 <lv_obj_align_origo+0x2bc>)
    3d98:	4798      	blx	r3
    3d9a:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
    3d9c:	4648      	mov	r0, r9
    3d9e:	4b9e      	ldr	r3, [pc, #632]	; (4018 <lv_obj_align_origo+0x2c0>)
    3da0:	4798      	blx	r3
    3da2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3da6:	f340 084f 	sbfx	r8, r0, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
    3daa:	4648      	mov	r0, r9
    3dac:	4b9b      	ldr	r3, [pc, #620]	; (401c <lv_obj_align_origo+0x2c4>)
    3dae:	4798      	blx	r3
    3db0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3db4:	f340 074f 	sbfx	r7, r0, #1, #16
    if(base == NULL) {
    3db8:	b1ee      	cbz	r6, 3df6 <lv_obj_align_origo+0x9e>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3dba:	4630      	mov	r0, r6
    3dbc:	4b8e      	ldr	r3, [pc, #568]	; (3ff8 <lv_obj_align_origo+0x2a0>)
    3dbe:	4798      	blx	r3
    3dc0:	b1f0      	cbz	r0, 3e00 <lv_obj_align_origo+0xa8>
    switch(align) {
    3dc2:	f1ba 0f14 	cmp.w	sl, #20
    3dc6:	d839      	bhi.n	3e3c <lv_obj_align_origo+0xe4>
    3dc8:	e8df f01a 	tbh	[pc, sl, lsl #1]
    3dcc:	005c0028 	.word	0x005c0028
    3dd0:	006d0062 	.word	0x006d0062
    3dd4:	007f0076 	.word	0x007f0076
    3dd8:	0099008d 	.word	0x0099008d
    3ddc:	00b400a5 	.word	0x00b400a5
    3de0:	00c500ba 	.word	0x00c500ba
    3de4:	00d700ce 	.word	0x00d700ce
    3de8:	00f100e5 	.word	0x00f100e5
    3dec:	010300f7 	.word	0x010300f7
    3df0:	012e010c 	.word	0x012e010c
    3df4:	013d      	.short	0x013d
        base = lv_obj_get_parent(obj);
    3df6:	4648      	mov	r0, r9
    3df8:	4b89      	ldr	r3, [pc, #548]	; (4020 <lv_obj_align_origo+0x2c8>)
    3dfa:	4798      	blx	r3
    3dfc:	4606      	mov	r6, r0
    3dfe:	e7dc      	b.n	3dba <lv_obj_align_origo+0x62>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
    3e00:	4b7e      	ldr	r3, [pc, #504]	; (3ffc <lv_obj_align_origo+0x2a4>)
    3e02:	9300      	str	r3, [sp, #0]
    3e04:	f240 32a1 	movw	r2, #929	; 0x3a1
    3e08:	497d      	ldr	r1, [pc, #500]	; (4000 <lv_obj_align_origo+0x2a8>)
    3e0a:	2003      	movs	r0, #3
    3e0c:	4c7d      	ldr	r4, [pc, #500]	; (4004 <lv_obj_align_origo+0x2ac>)
    3e0e:	47a0      	blx	r4
    3e10:	4632      	mov	r2, r6
    3e12:	2300      	movs	r3, #0
    3e14:	487c      	ldr	r0, [pc, #496]	; (4008 <lv_obj_align_origo+0x2b0>)
    3e16:	497d      	ldr	r1, [pc, #500]	; (400c <lv_obj_align_origo+0x2b4>)
    3e18:	4788      	blx	r1
    3e1a:	e7fe      	b.n	3e1a <lv_obj_align_origo+0xc2>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3e1c:	4630      	mov	r0, r6
    3e1e:	4b7e      	ldr	r3, [pc, #504]	; (4018 <lv_obj_align_origo+0x2c0>)
    3e20:	4798      	blx	r3
    3e22:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3e26:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3e2a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3e2c:	4630      	mov	r0, r6
    3e2e:	4b7b      	ldr	r3, [pc, #492]	; (401c <lv_obj_align_origo+0x2c4>)
    3e30:	4798      	blx	r3
    3e32:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3e36:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3e3a:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
    3e3c:	4648      	mov	r0, r9
    3e3e:	4b78      	ldr	r3, [pc, #480]	; (4020 <lv_obj_align_origo+0x2c8>)
    3e40:	4798      	blx	r3
    new_x += x_ofs + base_abs_x;
    3e42:	8a31      	ldrh	r1, [r6, #16]
    3e44:	9f03      	ldr	r7, [sp, #12]
    3e46:	4439      	add	r1, r7
    3e48:	4429      	add	r1, r5
    new_x -= par_abs_x;
    3e4a:	8a03      	ldrh	r3, [r0, #16]
    3e4c:	1ac9      	subs	r1, r1, r3
    new_y += y_ofs + base_abs_y;
    3e4e:	8a72      	ldrh	r2, [r6, #18]
    3e50:	445a      	add	r2, fp
    3e52:	4422      	add	r2, r4
    new_y -= par_abs_y;
    3e54:	8a43      	ldrh	r3, [r0, #18]
    3e56:	1ad2      	subs	r2, r2, r3
    lv_obj_set_pos(obj, new_x, new_y);
    3e58:	b212      	sxth	r2, r2
    3e5a:	b209      	sxth	r1, r1
    3e5c:	4648      	mov	r0, r9
    3e5e:	4b71      	ldr	r3, [pc, #452]	; (4024 <lv_obj_align_origo+0x2cc>)
    3e60:	4798      	blx	r3
    obj->realign.align       = align;
    3e62:	f889 a048 	strb.w	sl, [r9, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
    3e66:	f8a9 7044 	strh.w	r7, [r9, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
    3e6a:	f8a9 b046 	strh.w	fp, [r9, #70]	; 0x46
    obj->realign.base        = base;
    3e6e:	f8c9 6040 	str.w	r6, [r9, #64]	; 0x40
    obj->realign.origo_align = 1;
    3e72:	f899 3049 	ldrb.w	r3, [r9, #73]	; 0x49
    3e76:	f043 0302 	orr.w	r3, r3, #2
    3e7a:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
}
    3e7e:	b005      	add	sp, #20
    3e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = -obj_w_half;
    3e84:	f1c8 0500 	rsb	r5, r8, #0
    3e88:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3e8a:	427c      	negs	r4, r7
    3e8c:	b224      	sxth	r4, r4
            break;
    3e8e:	e7d5      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3e90:	4630      	mov	r0, r6
    3e92:	4b61      	ldr	r3, [pc, #388]	; (4018 <lv_obj_align_origo+0x2c0>)
    3e94:	4798      	blx	r3
    3e96:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3e9a:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3e9e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3ea0:	427c      	negs	r4, r7
    3ea2:	b224      	sxth	r4, r4
            break;
    3ea4:	e7ca      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3ea6:	4630      	mov	r0, r6
    3ea8:	4b5b      	ldr	r3, [pc, #364]	; (4018 <lv_obj_align_origo+0x2c0>)
    3eaa:	4798      	blx	r3
    3eac:	eba0 0008 	sub.w	r0, r0, r8
    3eb0:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3eb2:	427c      	negs	r4, r7
    3eb4:	b224      	sxth	r4, r4
            break;
    3eb6:	e7c1      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3eb8:	f1c8 0500 	rsb	r5, r8, #0
    3ebc:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3ebe:	4630      	mov	r0, r6
    3ec0:	4b56      	ldr	r3, [pc, #344]	; (401c <lv_obj_align_origo+0x2c4>)
    3ec2:	4798      	blx	r3
    3ec4:	1bc0      	subs	r0, r0, r7
    3ec6:	b204      	sxth	r4, r0
            break;
    3ec8:	e7b8      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3eca:	4630      	mov	r0, r6
    3ecc:	4b52      	ldr	r3, [pc, #328]	; (4018 <lv_obj_align_origo+0x2c0>)
    3ece:	4798      	blx	r3
    3ed0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3ed4:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3ed8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3eda:	4630      	mov	r0, r6
    3edc:	4b4f      	ldr	r3, [pc, #316]	; (401c <lv_obj_align_origo+0x2c4>)
    3ede:	4798      	blx	r3
    3ee0:	1bc0      	subs	r0, r0, r7
    3ee2:	b204      	sxth	r4, r0
            break;
    3ee4:	e7aa      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3ee6:	4630      	mov	r0, r6
    3ee8:	4b4b      	ldr	r3, [pc, #300]	; (4018 <lv_obj_align_origo+0x2c0>)
    3eea:	4798      	blx	r3
    3eec:	eba0 0008 	sub.w	r0, r0, r8
    3ef0:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    3ef2:	4630      	mov	r0, r6
    3ef4:	4b49      	ldr	r3, [pc, #292]	; (401c <lv_obj_align_origo+0x2c4>)
    3ef6:	4798      	blx	r3
    3ef8:	1bc0      	subs	r0, r0, r7
    3efa:	b204      	sxth	r4, r0
            break;
    3efc:	e79e      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3efe:	f1c8 0500 	rsb	r5, r8, #0
    3f02:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3f04:	4630      	mov	r0, r6
    3f06:	4b45      	ldr	r3, [pc, #276]	; (401c <lv_obj_align_origo+0x2c4>)
    3f08:	4798      	blx	r3
    3f0a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3f0e:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3f12:	b224      	sxth	r4, r4
            break;
    3f14:	e792      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3f16:	4630      	mov	r0, r6
    3f18:	4b3f      	ldr	r3, [pc, #252]	; (4018 <lv_obj_align_origo+0x2c0>)
    3f1a:	4798      	blx	r3
    3f1c:	eba0 0008 	sub.w	r0, r0, r8
    3f20:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3f22:	4630      	mov	r0, r6
    3f24:	4b3d      	ldr	r3, [pc, #244]	; (401c <lv_obj_align_origo+0x2c4>)
    3f26:	4798      	blx	r3
    3f28:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3f2c:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3f30:	b224      	sxth	r4, r4
            break;
    3f32:	e783      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3f34:	f1c8 0500 	rsb	r5, r8, #0
    3f38:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3f3a:	427c      	negs	r4, r7
    3f3c:	b224      	sxth	r4, r4
            break;
    3f3e:	e77d      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3f40:	4630      	mov	r0, r6
    3f42:	4b35      	ldr	r3, [pc, #212]	; (4018 <lv_obj_align_origo+0x2c0>)
    3f44:	4798      	blx	r3
    3f46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3f4a:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3f4e:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3f50:	427c      	negs	r4, r7
    3f52:	b224      	sxth	r4, r4
            break;
    3f54:	e772      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3f56:	4630      	mov	r0, r6
    3f58:	4b2f      	ldr	r3, [pc, #188]	; (4018 <lv_obj_align_origo+0x2c0>)
    3f5a:	4798      	blx	r3
    3f5c:	eba0 0008 	sub.w	r0, r0, r8
    3f60:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3f62:	427c      	negs	r4, r7
    3f64:	b224      	sxth	r4, r4
            break;
    3f66:	e769      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3f68:	f1c8 0500 	rsb	r5, r8, #0
    3f6c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3f6e:	4630      	mov	r0, r6
    3f70:	4b2a      	ldr	r3, [pc, #168]	; (401c <lv_obj_align_origo+0x2c4>)
    3f72:	4798      	blx	r3
    3f74:	1bc0      	subs	r0, r0, r7
    3f76:	b204      	sxth	r4, r0
            break;
    3f78:	e760      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
    3f7a:	4630      	mov	r0, r6
    3f7c:	4b26      	ldr	r3, [pc, #152]	; (4018 <lv_obj_align_origo+0x2c0>)
    3f7e:	4798      	blx	r3
    3f80:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3f84:	ebc8 0560 	rsb	r5, r8, r0, asr #1
    3f88:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3f8a:	4630      	mov	r0, r6
    3f8c:	4b23      	ldr	r3, [pc, #140]	; (401c <lv_obj_align_origo+0x2c4>)
    3f8e:	4798      	blx	r3
    3f90:	1bc0      	subs	r0, r0, r7
    3f92:	b204      	sxth	r4, r0
            break;
    3f94:	e752      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3f96:	4630      	mov	r0, r6
    3f98:	4b1f      	ldr	r3, [pc, #124]	; (4018 <lv_obj_align_origo+0x2c0>)
    3f9a:	4798      	blx	r3
    3f9c:	eba0 0008 	sub.w	r0, r0, r8
    3fa0:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    3fa2:	4630      	mov	r0, r6
    3fa4:	4b1d      	ldr	r3, [pc, #116]	; (401c <lv_obj_align_origo+0x2c4>)
    3fa6:	4798      	blx	r3
    3fa8:	1bc0      	subs	r0, r0, r7
    3faa:	b204      	sxth	r4, r0
            break;
    3fac:	e746      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3fae:	f1c8 0500 	rsb	r5, r8, #0
    3fb2:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
    3fb4:	427c      	negs	r4, r7
    3fb6:	b224      	sxth	r4, r4
            break;
    3fb8:	e740      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3fba:	f1c8 0500 	rsb	r5, r8, #0
    3fbe:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    3fc0:	4630      	mov	r0, r6
    3fc2:	4b16      	ldr	r3, [pc, #88]	; (401c <lv_obj_align_origo+0x2c4>)
    3fc4:	4798      	blx	r3
    3fc6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    3fca:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    3fce:	b224      	sxth	r4, r4
            break;
    3fd0:	e734      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = -obj_w_half;
    3fd2:	f1c8 0500 	rsb	r5, r8, #0
    3fd6:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
    3fd8:	4630      	mov	r0, r6
    3fda:	4b10      	ldr	r3, [pc, #64]	; (401c <lv_obj_align_origo+0x2c4>)
    3fdc:	4798      	blx	r3
    3fde:	1bc0      	subs	r0, r0, r7
    3fe0:	b204      	sxth	r4, r0
            break;
    3fe2:	e72b      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    3fe4:	4630      	mov	r0, r6
    3fe6:	4b0c      	ldr	r3, [pc, #48]	; (4018 <lv_obj_align_origo+0x2c0>)
    3fe8:	4798      	blx	r3
    3fea:	eba0 0008 	sub.w	r0, r0, r8
    3fee:	b205      	sxth	r5, r0
            new_y = -obj_h_half;
    3ff0:	427c      	negs	r4, r7
    3ff2:	b224      	sxth	r4, r4
            break;
    3ff4:	e722      	b.n	3e3c <lv_obj_align_origo+0xe4>
    3ff6:	bf00      	nop
    3ff8:	0000298d 	.word	0x0000298d
    3ffc:	0001b9c8 	.word	0x0001b9c8
    4000:	0001bcc0 	.word	0x0001bcc0
    4004:	00012805 	.word	0x00012805
    4008:	0001bd20 	.word	0x0001bd20
    400c:	00002995 	.word	0x00002995
    4010:	00003525 	.word	0x00003525
    4014:	00003585 	.word	0x00003585
    4018:	000035e5 	.word	0x000035e5
    401c:	00003635 	.word	0x00003635
    4020:	00003305 	.word	0x00003305
    4024:	00003ac5 	.word	0x00003ac5
            new_x = lv_obj_get_width(base) - obj_w_half;
    4028:	4630      	mov	r0, r6
    402a:	4b0d      	ldr	r3, [pc, #52]	; (4060 <lv_obj_align_origo+0x308>)
    402c:	4798      	blx	r3
    402e:	eba0 0008 	sub.w	r0, r0, r8
    4032:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
    4034:	4630      	mov	r0, r6
    4036:	4b0b      	ldr	r3, [pc, #44]	; (4064 <lv_obj_align_origo+0x30c>)
    4038:	4798      	blx	r3
    403a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    403e:	ebc7 0460 	rsb	r4, r7, r0, asr #1
    4042:	b224      	sxth	r4, r4
            break;
    4044:	e6fa      	b.n	3e3c <lv_obj_align_origo+0xe4>
            new_x = lv_obj_get_width(base) - obj_w_half;
    4046:	4630      	mov	r0, r6
    4048:	4b05      	ldr	r3, [pc, #20]	; (4060 <lv_obj_align_origo+0x308>)
    404a:	4798      	blx	r3
    404c:	eba0 0008 	sub.w	r0, r0, r8
    4050:	b205      	sxth	r5, r0
            new_y = lv_obj_get_height(base) - obj_h_half;
    4052:	4630      	mov	r0, r6
    4054:	4b03      	ldr	r3, [pc, #12]	; (4064 <lv_obj_align_origo+0x30c>)
    4056:	4798      	blx	r3
    4058:	1bc0      	subs	r0, r0, r7
    405a:	b204      	sxth	r4, r0
            break;
    405c:	e6ee      	b.n	3e3c <lv_obj_align_origo+0xe4>
    405e:	bf00      	nop
    4060:	000035e5 	.word	0x000035e5
    4064:	00003635 	.word	0x00003635

00004068 <lv_obj_realign>:
{
    4068:	b530      	push	{r4, r5, lr}
    406a:	b083      	sub	sp, #12
    406c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    406e:	4b12      	ldr	r3, [pc, #72]	; (40b8 <lv_obj_realign+0x50>)
    4070:	4798      	blx	r3
    4072:	b190      	cbz	r0, 409a <lv_obj_realign+0x32>
    if(obj->realign.origo_align)
    4074:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    4078:	f013 0f02 	tst.w	r3, #2
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    407c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    4080:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    4084:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
    4088:	9100      	str	r1, [sp, #0]
    408a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    408c:	4620      	mov	r0, r4
    408e:	bf14      	ite	ne
    4090:	4c0a      	ldrne	r4, [pc, #40]	; (40bc <lv_obj_realign+0x54>)
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
    4092:	4c0b      	ldreq	r4, [pc, #44]	; (40c0 <lv_obj_realign+0x58>)
    4094:	47a0      	blx	r4
}
    4096:	b003      	add	sp, #12
    4098:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    409a:	4b0a      	ldr	r3, [pc, #40]	; (40c4 <lv_obj_realign+0x5c>)
    409c:	9300      	str	r3, [sp, #0]
    409e:	f240 422a 	movw	r2, #1066	; 0x42a
    40a2:	4909      	ldr	r1, [pc, #36]	; (40c8 <lv_obj_realign+0x60>)
    40a4:	2003      	movs	r0, #3
    40a6:	4d09      	ldr	r5, [pc, #36]	; (40cc <lv_obj_realign+0x64>)
    40a8:	47a8      	blx	r5
    40aa:	4622      	mov	r2, r4
    40ac:	2300      	movs	r3, #0
    40ae:	4808      	ldr	r0, [pc, #32]	; (40d0 <lv_obj_realign+0x68>)
    40b0:	4908      	ldr	r1, [pc, #32]	; (40d4 <lv_obj_realign+0x6c>)
    40b2:	4788      	blx	r1
    40b4:	e7fe      	b.n	40b4 <lv_obj_realign+0x4c>
    40b6:	bf00      	nop
    40b8:	0000298d 	.word	0x0000298d
    40bc:	00003d59 	.word	0x00003d59
    40c0:	00003c71 	.word	0x00003c71
    40c4:	0001b9dc 	.word	0x0001b9dc
    40c8:	0001bcc0 	.word	0x0001bcc0
    40cc:	00012805 	.word	0x00012805
    40d0:	0001bd20 	.word	0x0001bd20
    40d4:	00002995 	.word	0x00002995

000040d8 <refresh_children_style>:
{
    40d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40dc:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    40de:	2100      	movs	r1, #0
    40e0:	4b0d      	ldr	r3, [pc, #52]	; (4118 <refresh_children_style+0x40>)
    40e2:	4798      	blx	r3
    while(child != NULL) {
    40e4:	b1b0      	cbz	r0, 4114 <refresh_children_style+0x3c>
    40e6:	4604      	mov	r4, r0
        lv_obj_invalidate(child);
    40e8:	4d0c      	ldr	r5, [pc, #48]	; (411c <refresh_children_style+0x44>)
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    40ea:	f04f 0800 	mov.w	r8, #0
        child = lv_obj_get_child(obj, child);
    40ee:	4f0a      	ldr	r7, [pc, #40]	; (4118 <refresh_children_style+0x40>)
        lv_obj_invalidate(child);
    40f0:	4620      	mov	r0, r4
    40f2:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
    40f4:	69e3      	ldr	r3, [r4, #28]
    40f6:	4642      	mov	r2, r8
    40f8:	2104      	movs	r1, #4
    40fa:	4620      	mov	r0, r4
    40fc:	4798      	blx	r3
        lv_obj_invalidate(child);
    40fe:	4620      	mov	r0, r4
    4100:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
    4102:	4620      	mov	r0, r4
    4104:	f7ff ffe8 	bl	40d8 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
    4108:	4621      	mov	r1, r4
    410a:	4630      	mov	r0, r6
    410c:	47b8      	blx	r7
    while(child != NULL) {
    410e:	4604      	mov	r4, r0
    4110:	2800      	cmp	r0, #0
    4112:	d1ed      	bne.n	40f0 <refresh_children_style+0x18>
    4114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4118:	00003469 	.word	0x00003469
    411c:	000039a9 	.word	0x000039a9

00004120 <lv_obj_refresh_style>:
{
    4120:	b530      	push	{r4, r5, lr}
    4122:	b083      	sub	sp, #12
    4124:	4605      	mov	r5, r0
    4126:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4128:	4b36      	ldr	r3, [pc, #216]	; (4204 <lv_obj_refresh_style+0xe4>)
    412a:	4798      	blx	r3
    412c:	b198      	cbz	r0, 4156 <lv_obj_refresh_style+0x36>
    switch(prop) {
    412e:	2c71      	cmp	r4, #113	; 0x71
    4130:	d846      	bhi.n	41c0 <lv_obj_refresh_style+0xa0>
    4132:	2c70      	cmp	r4, #112	; 0x70
    4134:	d223      	bcs.n	417e <lv_obj_refresh_style+0x5e>
    4136:	2c41      	cmp	r4, #65	; 0x41
    4138:	d81b      	bhi.n	4172 <lv_obj_refresh_style+0x52>
    413a:	2c40      	cmp	r4, #64	; 0x40
    413c:	d21f      	bcs.n	417e <lv_obj_refresh_style+0x5e>
    413e:	2c02      	cmp	r4, #2
    4140:	d305      	bcc.n	414e <lv_obj_refresh_style+0x2e>
    4142:	2c07      	cmp	r4, #7
    4144:	d91b      	bls.n	417e <lv_obj_refresh_style+0x5e>
    4146:	f1a4 0310 	sub.w	r3, r4, #16
    414a:	2b08      	cmp	r3, #8
    414c:	d917      	bls.n	417e <lv_obj_refresh_style+0x5e>
        lv_obj_invalidate(obj);
    414e:	4628      	mov	r0, r5
    4150:	4b2d      	ldr	r3, [pc, #180]	; (4208 <lv_obj_refresh_style+0xe8>)
    4152:	4798      	blx	r3
}
    4154:	e02f      	b.n	41b6 <lv_obj_refresh_style+0x96>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4156:	4b2d      	ldr	r3, [pc, #180]	; (420c <lv_obj_refresh_style+0xec>)
    4158:	9300      	str	r3, [sp, #0]
    415a:	f240 521d 	movw	r2, #1309	; 0x51d
    415e:	492c      	ldr	r1, [pc, #176]	; (4210 <lv_obj_refresh_style+0xf0>)
    4160:	2003      	movs	r0, #3
    4162:	4c2c      	ldr	r4, [pc, #176]	; (4214 <lv_obj_refresh_style+0xf4>)
    4164:	47a0      	blx	r4
    4166:	462a      	mov	r2, r5
    4168:	2300      	movs	r3, #0
    416a:	482b      	ldr	r0, [pc, #172]	; (4218 <lv_obj_refresh_style+0xf8>)
    416c:	492b      	ldr	r1, [pc, #172]	; (421c <lv_obj_refresh_style+0xfc>)
    416e:	4788      	blx	r1
    4170:	e7fe      	b.n	4170 <lv_obj_refresh_style+0x50>
    switch(prop) {
    4172:	2c53      	cmp	r4, #83	; 0x53
    4174:	d821      	bhi.n	41ba <lv_obj_refresh_style+0x9a>
    4176:	2c50      	cmp	r4, #80	; 0x50
    4178:	d201      	bcs.n	417e <lv_obj_refresh_style+0x5e>
    417a:	2c4c      	cmp	r4, #76	; 0x4c
    417c:	d1e7      	bne.n	414e <lv_obj_refresh_style+0x2e>
        lv_obj_invalidate(obj);
    417e:	4628      	mov	r0, r5
    4180:	4b21      	ldr	r3, [pc, #132]	; (4208 <lv_obj_refresh_style+0xe8>)
    4182:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
    4184:	69eb      	ldr	r3, [r5, #28]
    4186:	2200      	movs	r2, #0
    4188:	2104      	movs	r1, #4
    418a:	4628      	mov	r0, r5
    418c:	4798      	blx	r3
        switch(prop) {
    418e:	2c15      	cmp	r4, #21
    4190:	d309      	bcc.n	41a6 <lv_obj_refresh_style+0x86>
    4192:	2c18      	cmp	r4, #24
    4194:	d901      	bls.n	419a <lv_obj_refresh_style+0x7a>
    4196:	2cff      	cmp	r4, #255	; 0xff
    4198:	d105      	bne.n	41a6 <lv_obj_refresh_style+0x86>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
    419a:	6828      	ldr	r0, [r5, #0]
    419c:	b118      	cbz	r0, 41a6 <lv_obj_refresh_style+0x86>
    419e:	69c3      	ldr	r3, [r0, #28]
    41a0:	2200      	movs	r2, #0
    41a2:	2101      	movs	r1, #1
    41a4:	4798      	blx	r3
        lv_obj_invalidate(obj);
    41a6:	4628      	mov	r0, r5
    41a8:	4b17      	ldr	r3, [pc, #92]	; (4208 <lv_obj_refresh_style+0xe8>)
    41aa:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    41ac:	2cff      	cmp	r4, #255	; 0xff
    41ae:	d024      	beq.n	41fa <lv_obj_refresh_style+0xda>
    41b0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    41b4:	d121      	bne.n	41fa <lv_obj_refresh_style+0xda>
}
    41b6:	b003      	add	sp, #12
    41b8:	bd30      	pop	{r4, r5, pc}
    switch(prop) {
    41ba:	2c5c      	cmp	r4, #92	; 0x5c
    41bc:	d1c7      	bne.n	414e <lv_obj_refresh_style+0x2e>
    41be:	e7de      	b.n	417e <lv_obj_refresh_style+0x5e>
    41c0:	2c7f      	cmp	r4, #127	; 0x7f
    41c2:	d90c      	bls.n	41de <lv_obj_refresh_style+0xbe>
    41c4:	f248 0381 	movw	r3, #32897	; 0x8081
    41c8:	429c      	cmp	r4, r3
    41ca:	d811      	bhi.n	41f0 <lv_obj_refresh_style+0xd0>
    41cc:	f248 0380 	movw	r3, #32896	; 0x8080
    41d0:	429c      	cmp	r4, r3
    41d2:	d2d4      	bcs.n	417e <lv_obj_refresh_style+0x5e>
    41d4:	2c90      	cmp	r4, #144	; 0x90
    41d6:	d0d2      	beq.n	417e <lv_obj_refresh_style+0x5e>
    41d8:	2cff      	cmp	r4, #255	; 0xff
    41da:	d1b8      	bne.n	414e <lv_obj_refresh_style+0x2e>
    41dc:	e7cf      	b.n	417e <lv_obj_refresh_style+0x5e>
    41de:	2c7e      	cmp	r4, #126	; 0x7e
    41e0:	d2cd      	bcs.n	417e <lv_obj_refresh_style+0x5e>
    41e2:	2c73      	cmp	r4, #115	; 0x73
    41e4:	d3b3      	bcc.n	414e <lv_obj_refresh_style+0x2e>
    41e6:	2c75      	cmp	r4, #117	; 0x75
    41e8:	d9c9      	bls.n	417e <lv_obj_refresh_style+0x5e>
    41ea:	2c7c      	cmp	r4, #124	; 0x7c
    41ec:	d1af      	bne.n	414e <lv_obj_refresh_style+0x2e>
    41ee:	e7c6      	b.n	417e <lv_obj_refresh_style+0x5e>
    41f0:	f248 038e 	movw	r3, #32910	; 0x808e
    41f4:	429c      	cmp	r4, r3
    41f6:	d1aa      	bne.n	414e <lv_obj_refresh_style+0x2e>
    41f8:	e7c1      	b.n	417e <lv_obj_refresh_style+0x5e>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
    41fa:	4628      	mov	r0, r5
    41fc:	4b08      	ldr	r3, [pc, #32]	; (4220 <lv_obj_refresh_style+0x100>)
    41fe:	4798      	blx	r3
    4200:	e7d9      	b.n	41b6 <lv_obj_refresh_style+0x96>
    4202:	bf00      	nop
    4204:	0000298d 	.word	0x0000298d
    4208:	000039a9 	.word	0x000039a9
    420c:	0001b9ec 	.word	0x0001b9ec
    4210:	0001bcc0 	.word	0x0001bcc0
    4214:	00012805 	.word	0x00012805
    4218:	0001bd20 	.word	0x0001bd20
    421c:	00002995 	.word	0x00002995
    4220:	000040d9 	.word	0x000040d9

00004224 <lv_obj_reset_style_list>:
{
    4224:	b510      	push	{r4, lr}
    4226:	4604      	mov	r4, r0
    lv_obj_clean_style_list(obj, part);
    4228:	4b03      	ldr	r3, [pc, #12]	; (4238 <lv_obj_reset_style_list+0x14>)
    422a:	4798      	blx	r3
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    422c:	21ff      	movs	r1, #255	; 0xff
    422e:	4620      	mov	r0, r4
    4230:	4b02      	ldr	r3, [pc, #8]	; (423c <lv_obj_reset_style_list+0x18>)
    4232:	4798      	blx	r3
    4234:	bd10      	pop	{r4, pc}
    4236:	bf00      	nop
    4238:	00003755 	.word	0x00003755
    423c:	00004121 	.word	0x00004121

00004240 <report_style_mod_core>:
{
    4240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4244:	4604      	mov	r4, r0
    4246:	460f      	mov	r7, r1
    4248:	2600      	movs	r6, #0
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    424a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 42d4 <report_style_mod_core+0x94>
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    424e:	4635      	mov	r5, r6
                lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    4250:	f8df 9084 	ldr.w	r9, [pc, #132]	; 42d8 <report_style_mod_core+0x98>
    4254:	e005      	b.n	4262 <report_style_mod_core+0x22>
    4256:	21ff      	movs	r1, #255	; 0xff
    4258:	4638      	mov	r0, r7
    425a:	47c8      	blx	r9
    425c:	3601      	adds	r6, #1
    for(part_sub = 0; part_sub != _LV_OBJ_PART_REAL_LAST; part_sub++) {
    425e:	2e40      	cmp	r6, #64	; 0x40
    4260:	d022      	beq.n	42a8 <report_style_mod_core+0x68>
        lv_style_list_t * dsc = lv_obj_get_style_list(obj, part_sub);
    4262:	b2f1      	uxtb	r1, r6
    4264:	4638      	mov	r0, r7
    4266:	47c0      	blx	r8
        if(dsc == NULL) break;
    4268:	4686      	mov	lr, r0
    426a:	b1e8      	cbz	r0, 42a8 <report_style_mod_core+0x68>
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    426c:	7901      	ldrb	r1, [r0, #4]
    426e:	2900      	cmp	r1, #0
    4270:	d0f4      	beq.n	425c <report_style_mod_core+0x1c>
    if(list->has_trans && list->skip_trans) id++;
    4272:	f890 c005 	ldrb.w	ip, [r0, #5]
    4276:	f00c 0c06 	and.w	ip, ip, #6
    427a:	2300      	movs	r3, #0
    427c:	b2da      	uxtb	r2, r3
    427e:	f1bc 0f06 	cmp.w	ip, #6
    4282:	bf04      	itt	eq
    4284:	3201      	addeq	r2, #1
    4286:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    4288:	428a      	cmp	r2, r1
    return list->style_list[id];
    428a:	bf3a      	itte	cc
    428c:	f8de 0000 	ldrcc.w	r0, [lr]
    4290:	f850 2022 	ldrcc.w	r2, [r0, r2, lsl #2]
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    4294:	462a      	movcs	r2, r5
            if(class == style || style == NULL) {
    4296:	4294      	cmp	r4, r2
    4298:	d0dd      	beq.n	4256 <report_style_mod_core+0x16>
    429a:	2c00      	cmp	r4, #0
    429c:	d0db      	beq.n	4256 <report_style_mod_core+0x16>
    429e:	3301      	adds	r3, #1
        for(ci = 0; ci < dsc->style_cnt; ci++) {
    42a0:	b2da      	uxtb	r2, r3
    42a2:	428a      	cmp	r2, r1
    42a4:	d3ea      	bcc.n	427c <report_style_mod_core+0x3c>
    42a6:	e7d9      	b.n	425c <report_style_mod_core+0x1c>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    42a8:	2100      	movs	r1, #0
    42aa:	4638      	mov	r0, r7
    42ac:	4b08      	ldr	r3, [pc, #32]	; (42d0 <report_style_mod_core+0x90>)
    42ae:	4798      	blx	r3
    while(child) {
    42b0:	4605      	mov	r5, r0
    42b2:	b150      	cbz	r0, 42ca <report_style_mod_core+0x8a>
        child = lv_obj_get_child(obj, child);
    42b4:	4e06      	ldr	r6, [pc, #24]	; (42d0 <report_style_mod_core+0x90>)
        report_style_mod_core(style, child);
    42b6:	4629      	mov	r1, r5
    42b8:	4620      	mov	r0, r4
    42ba:	f7ff ffc1 	bl	4240 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
    42be:	4629      	mov	r1, r5
    42c0:	4638      	mov	r0, r7
    42c2:	47b0      	blx	r6
    while(child) {
    42c4:	4605      	mov	r5, r0
    42c6:	2800      	cmp	r0, #0
    42c8:	d1f5      	bne.n	42b6 <report_style_mod_core+0x76>
    42ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42ce:	bf00      	nop
    42d0:	00003469 	.word	0x00003469
    42d4:	00003685 	.word	0x00003685
    42d8:	00004121 	.word	0x00004121

000042dc <lv_obj_report_style_mod>:
{
    42dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42e0:	4680      	mov	r8, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
    42e2:	2000      	movs	r0, #0
    42e4:	4b0f      	ldr	r3, [pc, #60]	; (4324 <lv_obj_report_style_mod+0x48>)
    42e6:	4798      	blx	r3
    while(d) {
    42e8:	b1c8      	cbz	r0, 431e <lv_obj_report_style_mod+0x42>
    42ea:	4681      	mov	r9, r0
        _LV_LL_READ(d->scr_ll, i) {
    42ec:	f8df a040 	ldr.w	sl, [pc, #64]	; 4330 <lv_obj_report_style_mod+0x54>
            report_style_mod_core(style, i);
    42f0:	4f0d      	ldr	r7, [pc, #52]	; (4328 <lv_obj_report_style_mod+0x4c>)
        _LV_LL_READ(d->scr_ll, i) {
    42f2:	4e0e      	ldr	r6, [pc, #56]	; (432c <lv_obj_report_style_mod+0x50>)
    42f4:	f109 0530 	add.w	r5, r9, #48	; 0x30
    42f8:	4628      	mov	r0, r5
    42fa:	47d0      	blx	sl
    42fc:	4604      	mov	r4, r0
    42fe:	b140      	cbz	r0, 4312 <lv_obj_report_style_mod+0x36>
            report_style_mod_core(style, i);
    4300:	4621      	mov	r1, r4
    4302:	4640      	mov	r0, r8
    4304:	47b8      	blx	r7
        _LV_LL_READ(d->scr_ll, i) {
    4306:	4621      	mov	r1, r4
    4308:	4628      	mov	r0, r5
    430a:	47b0      	blx	r6
    430c:	4604      	mov	r4, r0
    430e:	2800      	cmp	r0, #0
    4310:	d1f6      	bne.n	4300 <lv_obj_report_style_mod+0x24>
        d = lv_disp_get_next(d);
    4312:	4648      	mov	r0, r9
    4314:	4b03      	ldr	r3, [pc, #12]	; (4324 <lv_obj_report_style_mod+0x48>)
    4316:	4798      	blx	r3
    while(d) {
    4318:	4681      	mov	r9, r0
    431a:	2800      	cmp	r0, #0
    431c:	d1ea      	bne.n	42f4 <lv_obj_report_style_mod+0x18>
    431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4322:	bf00      	nop
    4324:	00011561 	.word	0x00011561
    4328:	00004241 	.word	0x00004241
    432c:	00012565 	.word	0x00012565
    4330:	00012551 	.word	0x00012551

00004334 <trans_anim_cb>:
{
    4334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4336:	4604      	mov	r4, r0
    4338:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
    433a:	7981      	ldrb	r1, [r0, #6]
    433c:	6800      	ldr	r0, [r0, #0]
    433e:	4b42      	ldr	r3, [pc, #264]	; (4448 <trans_anim_cb+0x114>)
    4340:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
    4342:	4b42      	ldr	r3, [pc, #264]	; (444c <trans_anim_cb+0x118>)
    4344:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
    4346:	88a1      	ldrh	r1, [r4, #4]
    4348:	f001 030f 	and.w	r3, r1, #15
    434c:	2b08      	cmp	r3, #8
    434e:	dc19      	bgt.n	4384 <trans_anim_cb+0x50>
        if(v == 0) x = tr->start_value._int;
    4350:	b945      	cbnz	r5, 4364 <trans_anim_cb+0x30>
    4352:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
    4356:	4b3e      	ldr	r3, [pc, #248]	; (4450 <trans_anim_cb+0x11c>)
    4358:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->prop);
    435a:	88a1      	ldrh	r1, [r4, #4]
    435c:	6820      	ldr	r0, [r4, #0]
    435e:	4b3d      	ldr	r3, [pc, #244]	; (4454 <trans_anim_cb+0x120>)
    4360:	4798      	blx	r3
    4362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else if(v == 255) x = tr->end_value._int;
    4364:	2dff      	cmp	r5, #255	; 0xff
    4366:	d00a      	beq.n	437e <trans_anim_cb+0x4a>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
    4368:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    436c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    4370:	1a9b      	subs	r3, r3, r2
    4372:	fb05 f503 	mul.w	r5, r5, r3
    4376:	eb02 2225 	add.w	r2, r2, r5, asr #8
    437a:	b212      	sxth	r2, r2
    437c:	e7eb      	b.n	4356 <trans_anim_cb+0x22>
        else if(v == 255) x = tr->end_value._int;
    437e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    4382:	e7e8      	b.n	4356 <trans_anim_cb+0x22>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    4384:	2b0b      	cmp	r3, #11
    4386:	dc43      	bgt.n	4410 <trans_anim_cb+0xdc>
        if(v <= 0) x = tr->start_value._color;
    4388:	2d00      	cmp	r5, #0
    438a:	dd05      	ble.n	4398 <trans_anim_cb+0x64>
        else if(v >= 255) x = tr->end_value._color;
    438c:	2dfe      	cmp	r5, #254	; 0xfe
    438e:	dd05      	ble.n	439c <trans_anim_cb+0x68>
    4390:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
    4392:	4b31      	ldr	r3, [pc, #196]	; (4458 <trans_anim_cb+0x124>)
    4394:	4798      	blx	r3
    4396:	e7e0      	b.n	435a <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._color;
    4398:	8922      	ldrh	r2, [r4, #8]
    439a:	e7fa      	b.n	4392 <trans_anim_cb+0x5e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    439c:	b2ed      	uxtb	r5, r5
    439e:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    43a2:	7b63      	ldrb	r3, [r4, #13]
    43a4:	08db      	lsrs	r3, r3, #3
    43a6:	7a66      	ldrb	r6, [r4, #9]
    43a8:	08f6      	lsrs	r6, r6, #3
    43aa:	fb02 f606 	mul.w	r6, r2, r6
    43ae:	fb05 6303 	mla	r3, r5, r3, r6
    43b2:	eb03 2703 	add.w	r7, r3, r3, lsl #8
    43b6:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
    43ba:	f3c3 57c4 	ubfx	r7, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    43be:	89a3      	ldrh	r3, [r4, #12]
    43c0:	f3c3 1345 	ubfx	r3, r3, #5, #6
    43c4:	8926      	ldrh	r6, [r4, #8]
    43c6:	f3c6 1645 	ubfx	r6, r6, #5, #6
    43ca:	fb02 f606 	mul.w	r6, r2, r6
    43ce:	fb05 6303 	mla	r3, r5, r3, r6
    43d2:	eb03 2603 	add.w	r6, r3, r3, lsl #8
    43d6:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    43da:	f3c3 56c5 	ubfx	r6, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    43de:	7b23      	ldrb	r3, [r4, #12]
    43e0:	f003 031f 	and.w	r3, r3, #31
    43e4:	f894 e008 	ldrb.w	lr, [r4, #8]
    43e8:	f00e 0e1f 	and.w	lr, lr, #31
    43ec:	fb02 f20e 	mul.w	r2, r2, lr
    43f0:	fb05 2503 	mla	r5, r5, r3, r2
    43f4:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    43f8:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
    43fc:	0ded      	lsrs	r5, r5, #23
    43fe:	f04f 0200 	mov.w	r2, #0
    4402:	f365 0204 	bfi	r2, r5, #0, #5
    4406:	f366 124a 	bfi	r2, r6, #5, #6
    440a:	f367 22cf 	bfi	r2, r7, #11, #5
    440e:	e7c0      	b.n	4392 <trans_anim_cb+0x5e>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    4410:	2b0d      	cmp	r3, #13
    4412:	dc12      	bgt.n	443a <trans_anim_cb+0x106>
        if(v <= 0) x = tr->start_value._opa;
    4414:	2d00      	cmp	r5, #0
    4416:	dd05      	ble.n	4424 <trans_anim_cb+0xf0>
        else if(v >= 255) x = tr->end_value._opa;
    4418:	2dfe      	cmp	r5, #254	; 0xfe
    441a:	dd05      	ble.n	4428 <trans_anim_cb+0xf4>
    441c:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
    441e:	4b0f      	ldr	r3, [pc, #60]	; (445c <trans_anim_cb+0x128>)
    4420:	4798      	blx	r3
    4422:	e79a      	b.n	435a <trans_anim_cb+0x26>
        if(v <= 0) x = tr->start_value._opa;
    4424:	7a22      	ldrb	r2, [r4, #8]
    4426:	e7fa      	b.n	441e <trans_anim_cb+0xea>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
    4428:	7a22      	ldrb	r2, [r4, #8]
    442a:	7b23      	ldrb	r3, [r4, #12]
    442c:	1a9b      	subs	r3, r3, r2
    442e:	fb05 f503 	mul.w	r5, r5, r3
    4432:	eb02 2225 	add.w	r2, r2, r5, asr #8
    4436:	b2d2      	uxtb	r2, r2
    4438:	e7f1      	b.n	441e <trans_anim_cb+0xea>
        if(v < 128) x = tr->start_value._ptr;
    443a:	2d7f      	cmp	r5, #127	; 0x7f
    443c:	bfd4      	ite	le
    443e:	68a2      	ldrle	r2, [r4, #8]
        else x = tr->end_value._ptr;
    4440:	68e2      	ldrgt	r2, [r4, #12]
        _lv_style_set_ptr(style, tr->prop, x);
    4442:	4b07      	ldr	r3, [pc, #28]	; (4460 <trans_anim_cb+0x12c>)
    4444:	4798      	blx	r3
    4446:	e788      	b.n	435a <trans_anim_cb+0x26>
    4448:	00003685 	.word	0x00003685
    444c:	0000768f 	.word	0x0000768f
    4450:	00006e89 	.word	0x00006e89
    4454:	00004121 	.word	0x00004121
    4458:	00006fcd 	.word	0x00006fcd
    445c:	00007111 	.word	0x00007111
    4460:	00007241 	.word	0x00007241

00004464 <lv_obj_get_base_dir>:
{
    4464:	b530      	push	{r4, r5, lr}
    4466:	b083      	sub	sp, #12
    4468:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    446a:	4b0a      	ldr	r3, [pc, #40]	; (4494 <lv_obj_get_base_dir+0x30>)
    446c:	4798      	blx	r3
    446e:	b110      	cbz	r0, 4476 <lv_obj_get_base_dir+0x12>
}
    4470:	2000      	movs	r0, #0
    4472:	b003      	add	sp, #12
    4474:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4476:	4b08      	ldr	r3, [pc, #32]	; (4498 <lv_obj_get_base_dir+0x34>)
    4478:	9300      	str	r3, [sp, #0]
    447a:	f640 22b1 	movw	r2, #2737	; 0xab1
    447e:	4907      	ldr	r1, [pc, #28]	; (449c <lv_obj_get_base_dir+0x38>)
    4480:	2003      	movs	r0, #3
    4482:	4d07      	ldr	r5, [pc, #28]	; (44a0 <lv_obj_get_base_dir+0x3c>)
    4484:	47a8      	blx	r5
    4486:	4622      	mov	r2, r4
    4488:	2300      	movs	r3, #0
    448a:	4806      	ldr	r0, [pc, #24]	; (44a4 <lv_obj_get_base_dir+0x40>)
    448c:	4906      	ldr	r1, [pc, #24]	; (44a8 <lv_obj_get_base_dir+0x44>)
    448e:	4788      	blx	r1
    4490:	e7fe      	b.n	4490 <lv_obj_get_base_dir+0x2c>
    4492:	bf00      	nop
    4494:	0000298d 	.word	0x0000298d
    4498:	0001babc 	.word	0x0001babc
    449c:	0001bcc0 	.word	0x0001bcc0
    44a0:	00012805 	.word	0x00012805
    44a4:	0001bd20 	.word	0x0001bd20
    44a8:	00002995 	.word	0x00002995

000044ac <lv_obj_create>:
{
    44ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ae:	b083      	sub	sp, #12
    44b0:	460d      	mov	r5, r1
    if(parent == NULL) {
    44b2:	4606      	mov	r6, r0
    44b4:	b188      	cbz	r0, 44da <lv_obj_create+0x2e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
    44b6:	4b9d      	ldr	r3, [pc, #628]	; (472c <lv_obj_create+0x280>)
    44b8:	4798      	blx	r3
    44ba:	2800      	cmp	r0, #0
    44bc:	f040 8164 	bne.w	4788 <lv_obj_create+0x2dc>
    44c0:	4b9b      	ldr	r3, [pc, #620]	; (4730 <lv_obj_create+0x284>)
    44c2:	9300      	str	r3, [sp, #0]
    44c4:	22ed      	movs	r2, #237	; 0xed
    44c6:	499b      	ldr	r1, [pc, #620]	; (4734 <lv_obj_create+0x288>)
    44c8:	2003      	movs	r0, #3
    44ca:	4c9b      	ldr	r4, [pc, #620]	; (4738 <lv_obj_create+0x28c>)
    44cc:	47a0      	blx	r4
    44ce:	4632      	mov	r2, r6
    44d0:	2300      	movs	r3, #0
    44d2:	489a      	ldr	r0, [pc, #616]	; (473c <lv_obj_create+0x290>)
    44d4:	499a      	ldr	r1, [pc, #616]	; (4740 <lv_obj_create+0x294>)
    44d6:	4788      	blx	r1
    44d8:	e7fe      	b.n	44d8 <lv_obj_create+0x2c>
        lv_disp_t * disp = lv_disp_get_default();
    44da:	4b9a      	ldr	r3, [pc, #616]	; (4744 <lv_obj_create+0x298>)
    44dc:	4798      	blx	r3
        if(!disp) {
    44de:	b948      	cbnz	r0, 44f4 <lv_obj_create+0x48>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
    44e0:	4b99      	ldr	r3, [pc, #612]	; (4748 <lv_obj_create+0x29c>)
    44e2:	9300      	str	r3, [sp, #0]
    44e4:	4b92      	ldr	r3, [pc, #584]	; (4730 <lv_obj_create+0x284>)
    44e6:	22cf      	movs	r2, #207	; 0xcf
    44e8:	4992      	ldr	r1, [pc, #584]	; (4734 <lv_obj_create+0x288>)
    44ea:	2002      	movs	r0, #2
    44ec:	4c92      	ldr	r4, [pc, #584]	; (4738 <lv_obj_create+0x28c>)
    44ee:	47a0      	blx	r4
            return NULL;
    44f0:	4634      	mov	r4, r6
    44f2:	e1f5      	b.n	48e0 <lv_obj_create+0x434>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
    44f4:	3030      	adds	r0, #48	; 0x30
    44f6:	4b95      	ldr	r3, [pc, #596]	; (474c <lv_obj_create+0x2a0>)
    44f8:	4798      	blx	r3
    44fa:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    44fc:	4b8b      	ldr	r3, [pc, #556]	; (472c <lv_obj_create+0x280>)
    44fe:	4798      	blx	r3
    4500:	b960      	cbnz	r0, 451c <lv_obj_create+0x70>
    4502:	4b8b      	ldr	r3, [pc, #556]	; (4730 <lv_obj_create+0x284>)
    4504:	9300      	str	r3, [sp, #0]
    4506:	22d4      	movs	r2, #212	; 0xd4
    4508:	498a      	ldr	r1, [pc, #552]	; (4734 <lv_obj_create+0x288>)
    450a:	2003      	movs	r0, #3
    450c:	4d8a      	ldr	r5, [pc, #552]	; (4738 <lv_obj_create+0x28c>)
    450e:	47a8      	blx	r5
    4510:	4622      	mov	r2, r4
    4512:	2300      	movs	r3, #0
    4514:	488e      	ldr	r0, [pc, #568]	; (4750 <lv_obj_create+0x2a4>)
    4516:	498a      	ldr	r1, [pc, #552]	; (4740 <lv_obj_create+0x294>)
    4518:	4788      	blx	r1
    451a:	e7fe      	b.n	451a <lv_obj_create+0x6e>
        if(new_obj == NULL) return NULL;
    451c:	2c00      	cmp	r4, #0
    451e:	f000 81df 	beq.w	48e0 <lv_obj_create+0x434>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    4522:	214c      	movs	r1, #76	; 0x4c
    4524:	4620      	mov	r0, r4
    4526:	4b8b      	ldr	r3, [pc, #556]	; (4754 <lv_obj_create+0x2a8>)
    4528:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    452a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    452e:	f36f 1305 	bfc	r3, #4, #2
    4532:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    4536:	4b88      	ldr	r3, [pc, #544]	; (4758 <lv_obj_create+0x2ac>)
    4538:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    453a:	4b88      	ldr	r3, [pc, #544]	; (475c <lv_obj_create+0x2b0>)
    453c:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    453e:	2700      	movs	r7, #0
    4540:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
    4542:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
    4544:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
    4546:	4638      	mov	r0, r7
    4548:	4b85      	ldr	r3, [pc, #532]	; (4760 <lv_obj_create+0x2b4>)
    454a:	4798      	blx	r3
    454c:	3801      	subs	r0, #1
    454e:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
    4550:	4638      	mov	r0, r7
    4552:	4b84      	ldr	r3, [pc, #528]	; (4764 <lv_obj_create+0x2b8>)
    4554:	4798      	blx	r3
    4556:	3801      	subs	r0, #1
    4558:	82e0      	strh	r0, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
    455a:	214c      	movs	r1, #76	; 0x4c
    455c:	1d20      	adds	r0, r4, #4
    455e:	4b82      	ldr	r3, [pc, #520]	; (4768 <lv_obj_create+0x2bc>)
    4560:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
    4562:	2300      	movs	r3, #0
    4564:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
    4566:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
    456a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
    456e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
    4572:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
    4576:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
    457a:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
    457c:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
    4580:	f363 0200 	bfi	r2, r3, #0, #1
    4584:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
    4588:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
    458a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    new_obj->click        = 1;
    458e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    new_obj->drag         = 0;
    4592:	f042 0201 	orr.w	r2, r2, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
    4596:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
    459a:	2003      	movs	r0, #3
    459c:	f360 0143 	bfi	r1, r0, #1, #3
    new_obj->protect      = LV_PROTECT_NONE;
    45a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
    45a4:	f002 02c1 	and.w	r2, r2, #193	; 0xc1
    45a8:	f363 1286 	bfi	r2, r3, #6, #1
    45ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    new_obj->gesture_parent = 1;
    45b0:	f041 0101 	orr.w	r1, r1, #1
    45b4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
    45b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
    45bc:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
    45be:	f104 0728 	add.w	r7, r4, #40	; 0x28
    45c2:	4638      	mov	r0, r7
    45c4:	4b69      	ldr	r3, [pc, #420]	; (476c <lv_obj_create+0x2c0>)
    45c6:	4798      	blx	r3
    if(copy == NULL) {
    45c8:	2d00      	cmp	r5, #0
    45ca:	f000 816c 	beq.w	48a6 <lv_obj_create+0x3fa>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
    45ce:	f105 0128 	add.w	r1, r5, #40	; 0x28
    45d2:	4638      	mov	r0, r7
    45d4:	4b66      	ldr	r3, [pc, #408]	; (4770 <lv_obj_create+0x2c4>)
    45d6:	4798      	blx	r3
    45d8:	f105 020f 	add.w	r2, r5, #15
    45dc:	f104 0118 	add.w	r1, r4, #24
    uint8_t * d8 = (uint8_t *)dst;
    45e0:	f104 0310 	add.w	r3, r4, #16
        *d8 = *s8;
    45e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    45e8:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    45ec:	428b      	cmp	r3, r1
    45ee:	d1f9      	bne.n	45e4 <lv_obj_create+0x138>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
    45f0:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    45f4:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
    45f6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    45fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
    45fe:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    4602:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->realign.align        = copy->realign.align;
    4606:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    460a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
    460e:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
    4612:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
    4616:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
    461a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
    461e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    4620:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
    4622:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
    4626:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    462a:	f362 0300 	bfi	r3, r2, #0, #1
    462e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
    4632:	69ab      	ldr	r3, [r5, #24]
    4634:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
    4636:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    463a:	09db      	lsrs	r3, r3, #7
    463c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    4640:	f363 12c7 	bfi	r2, r3, #7, #1
    4644:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
    4648:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
    464c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    4650:	f362 0300 	bfi	r3, r2, #0, #1
    4654:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
    4658:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    465c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4660:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    4664:	f363 0241 	bfi	r2, r3, #1, #1
    4668:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
    466c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
    4670:	f3c3 0342 	ubfx	r3, r3, #1, #3
    4674:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    4678:	f363 0243 	bfi	r2, r3, #1, #3
    467c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
    4680:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    4684:	f3c3 0380 	ubfx	r3, r3, #2, #1
    4688:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    468c:	f363 0282 	bfi	r2, r3, #2, #1
    4690:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
    4694:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    4698:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    469c:	b2d2      	uxtb	r2, r2
    469e:	f363 02c3 	bfi	r2, r3, #3, #1
    46a2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
    46a6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    46aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
    46ae:	b2d2      	uxtb	r2, r2
    46b0:	f363 1204 	bfi	r2, r3, #4, #1
    46b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
    46b8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    46bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    46c0:	b2d2      	uxtb	r2, r2
    46c2:	f363 1245 	bfi	r2, r3, #5, #1
    46c6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
    46ca:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    46ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
    46d2:	b2d2      	uxtb	r2, r2
    46d4:	f363 1286 	bfi	r2, r3, #6, #1
    46d8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
    46dc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    46e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
    46e4:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
    46e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    46ec:	f362 0300 	bfi	r3, r2, #0, #1
    46f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
    46f4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    46f6:	b110      	cbz	r0, 46fe <lv_obj_create+0x252>
            lv_group_add_obj(copy->group_p, new_obj);
    46f8:	4621      	mov	r1, r4
    46fa:	4b1e      	ldr	r3, [pc, #120]	; (4774 <lv_obj_create+0x2c8>)
    46fc:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
    46fe:	4628      	mov	r0, r5
    4700:	4b1d      	ldr	r3, [pc, #116]	; (4778 <lv_obj_create+0x2cc>)
    4702:	4798      	blx	r3
    4704:	2800      	cmp	r0, #0
    4706:	f000 80d9 	beq.w	48bc <lv_obj_create+0x410>
    470a:	2e00      	cmp	r6, #0
    470c:	f000 80df 	beq.w	48ce <lv_obj_create+0x422>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
    4710:	4628      	mov	r0, r5
    4712:	4b1a      	ldr	r3, [pc, #104]	; (477c <lv_obj_create+0x2d0>)
    4714:	4798      	blx	r3
    4716:	4607      	mov	r7, r0
    4718:	4628      	mov	r0, r5
    471a:	4b19      	ldr	r3, [pc, #100]	; (4780 <lv_obj_create+0x2d4>)
    471c:	4798      	blx	r3
    471e:	4602      	mov	r2, r0
    4720:	4639      	mov	r1, r7
    4722:	4620      	mov	r0, r4
    4724:	4b17      	ldr	r3, [pc, #92]	; (4784 <lv_obj_create+0x2d8>)
    4726:	4798      	blx	r3
    4728:	e0c9      	b.n	48be <lv_obj_create+0x412>
    472a:	bf00      	nop
    472c:	0000298d 	.word	0x0000298d
    4730:	0001bad0 	.word	0x0001bad0
    4734:	0001bcc0 	.word	0x0001bcc0
    4738:	00012805 	.word	0x00012805
    473c:	0001bd20 	.word	0x0001bd20
    4740:	00002995 	.word	0x00002995
    4744:	00011489 	.word	0x00011489
    4748:	0001be1c 	.word	0x0001be1c
    474c:	000124b9 	.word	0x000124b9
    4750:	0001b4bc 	.word	0x0001b4bc
    4754:	000130df 	.word	0x000130df
    4758:	00005fad 	.word	0x00005fad
    475c:	00005a71 	.word	0x00005a71
    4760:	00011495 	.word	0x00011495
    4764:	000114bd 	.word	0x000114bd
    4768:	000124a1 	.word	0x000124a1
    476c:	00006a91 	.word	0x00006a91
    4770:	00007711 	.word	0x00007711
    4774:	00002c79 	.word	0x00002c79
    4778:	00003305 	.word	0x00003305
    477c:	00003525 	.word	0x00003525
    4780:	00003585 	.word	0x00003585
    4784:	00003ac5 	.word	0x00003ac5
        new_obj = _lv_ll_ins_head(&parent->child_ll);
    4788:	1d30      	adds	r0, r6, #4
    478a:	4b57      	ldr	r3, [pc, #348]	; (48e8 <lv_obj_create+0x43c>)
    478c:	4798      	blx	r3
    478e:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
    4790:	4b56      	ldr	r3, [pc, #344]	; (48ec <lv_obj_create+0x440>)
    4792:	4798      	blx	r3
    4794:	2800      	cmp	r0, #0
    4796:	d047      	beq.n	4828 <lv_obj_create+0x37c>
        if(new_obj == NULL) return NULL;
    4798:	2c00      	cmp	r4, #0
    479a:	f000 80a1 	beq.w	48e0 <lv_obj_create+0x434>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
    479e:	214c      	movs	r1, #76	; 0x4c
    47a0:	4620      	mov	r0, r4
    47a2:	4b53      	ldr	r3, [pc, #332]	; (48f0 <lv_obj_create+0x444>)
    47a4:	4798      	blx	r3
        new_obj->parent = parent;
    47a6:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
    47a8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    47ac:	f36f 1305 	bfc	r3, #4, #2
    47b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
    47b4:	4b4f      	ldr	r3, [pc, #316]	; (48f4 <lv_obj_create+0x448>)
    47b6:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
    47b8:	4b4f      	ldr	r3, [pc, #316]	; (48f8 <lv_obj_create+0x44c>)
    47ba:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
    47bc:	2000      	movs	r0, #0
    47be:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
    47c0:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
    47c4:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    47c6:	8a77      	ldrh	r7, [r6, #18]
    47c8:	4b4c      	ldr	r3, [pc, #304]	; (48fc <lv_obj_create+0x450>)
    47ca:	4798      	blx	r3
    47cc:	2332      	movs	r3, #50	; 0x32
    47ce:	fb03 f300 	mul.w	r3, r3, r0
    47d2:	3350      	adds	r3, #80	; 0x50
    47d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    47d8:	da33      	bge.n	4842 <lv_obj_create+0x396>
    47da:	2301      	movs	r3, #1
    47dc:	443b      	add	r3, r7
    47de:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
    47e0:	4620      	mov	r0, r4
    47e2:	4b47      	ldr	r3, [pc, #284]	; (4900 <lv_obj_create+0x454>)
    47e4:	4798      	blx	r3
    47e6:	2801      	cmp	r0, #1
    47e8:	d03a      	beq.n	4860 <lv_obj_create+0x3b4>
            new_obj->coords.x1    = parent->coords.x1;
    47ea:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    47ee:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    47f0:	8a37      	ldrh	r7, [r6, #16]
    47f2:	2000      	movs	r0, #0
    47f4:	4b41      	ldr	r3, [pc, #260]	; (48fc <lv_obj_create+0x450>)
    47f6:	4798      	blx	r3
    47f8:	2364      	movs	r3, #100	; 0x64
    47fa:	fb03 f300 	mul.w	r3, r3, r0
    47fe:	3350      	adds	r3, #80	; 0x50
    4800:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    4804:	db4d      	blt.n	48a2 <lv_obj_create+0x3f6>
    4806:	2000      	movs	r0, #0
    4808:	4b3c      	ldr	r3, [pc, #240]	; (48fc <lv_obj_create+0x450>)
    480a:	4798      	blx	r3
    480c:	2364      	movs	r3, #100	; 0x64
    480e:	fb03 f300 	mul.w	r3, r3, r0
    4812:	3350      	adds	r3, #80	; 0x50
    4814:	4a3b      	ldr	r2, [pc, #236]	; (4904 <lv_obj_create+0x458>)
    4816:	fb82 1203 	smull	r1, r2, r2, r3
    481a:	17db      	asrs	r3, r3, #31
    481c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    4820:	b29b      	uxth	r3, r3
    4822:	443b      	add	r3, r7
    4824:	82a3      	strh	r3, [r4, #20]
    4826:	e698      	b.n	455a <lv_obj_create+0xae>
        LV_ASSERT_MEM(new_obj);
    4828:	4b37      	ldr	r3, [pc, #220]	; (4908 <lv_obj_create+0x45c>)
    482a:	9300      	str	r3, [sp, #0]
    482c:	22f0      	movs	r2, #240	; 0xf0
    482e:	4937      	ldr	r1, [pc, #220]	; (490c <lv_obj_create+0x460>)
    4830:	2003      	movs	r0, #3
    4832:	4d37      	ldr	r5, [pc, #220]	; (4910 <lv_obj_create+0x464>)
    4834:	47a8      	blx	r5
    4836:	4622      	mov	r2, r4
    4838:	2300      	movs	r3, #0
    483a:	4836      	ldr	r0, [pc, #216]	; (4914 <lv_obj_create+0x468>)
    483c:	4936      	ldr	r1, [pc, #216]	; (4918 <lv_obj_create+0x46c>)
    483e:	4788      	blx	r1
    4840:	e7fe      	b.n	4840 <lv_obj_create+0x394>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
    4842:	2000      	movs	r0, #0
    4844:	4b2d      	ldr	r3, [pc, #180]	; (48fc <lv_obj_create+0x450>)
    4846:	4798      	blx	r3
    4848:	2332      	movs	r3, #50	; 0x32
    484a:	fb03 f300 	mul.w	r3, r3, r0
    484e:	3350      	adds	r3, #80	; 0x50
    4850:	4a2c      	ldr	r2, [pc, #176]	; (4904 <lv_obj_create+0x458>)
    4852:	fb82 1203 	smull	r1, r2, r2, r3
    4856:	17db      	asrs	r3, r3, #31
    4858:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    485c:	b29b      	uxth	r3, r3
    485e:	e7bd      	b.n	47dc <lv_obj_create+0x330>
            new_obj->coords.x2    = parent->coords.x2;
    4860:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
    4864:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
    4866:	8ab7      	ldrh	r7, [r6, #20]
    4868:	2000      	movs	r0, #0
    486a:	4b24      	ldr	r3, [pc, #144]	; (48fc <lv_obj_create+0x450>)
    486c:	4798      	blx	r3
    486e:	2364      	movs	r3, #100	; 0x64
    4870:	fb03 f300 	mul.w	r3, r3, r0
    4874:	3350      	adds	r3, #80	; 0x50
    4876:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
    487a:	db10      	blt.n	489e <lv_obj_create+0x3f2>
    487c:	2000      	movs	r0, #0
    487e:	4b1f      	ldr	r3, [pc, #124]	; (48fc <lv_obj_create+0x450>)
    4880:	4798      	blx	r3
    4882:	2364      	movs	r3, #100	; 0x64
    4884:	fb03 f300 	mul.w	r3, r3, r0
    4888:	3350      	adds	r3, #80	; 0x50
    488a:	4a1e      	ldr	r2, [pc, #120]	; (4904 <lv_obj_create+0x458>)
    488c:	fb82 1203 	smull	r1, r2, r2, r3
    4890:	17db      	asrs	r3, r3, #31
    4892:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    4896:	b29b      	uxth	r3, r3
    4898:	1afb      	subs	r3, r7, r3
    489a:	8223      	strh	r3, [r4, #16]
    489c:	e65d      	b.n	455a <lv_obj_create+0xae>
    489e:	2301      	movs	r3, #1
    48a0:	e7fa      	b.n	4898 <lv_obj_create+0x3ec>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
    48a2:	2301      	movs	r3, #1
    48a4:	e7bd      	b.n	4822 <lv_obj_create+0x376>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
    48a6:	b126      	cbz	r6, 48b2 <lv_obj_create+0x406>
    48a8:	2102      	movs	r1, #2
    48aa:	4620      	mov	r0, r4
    48ac:	4b1b      	ldr	r3, [pc, #108]	; (491c <lv_obj_create+0x470>)
    48ae:	4798      	blx	r3
    48b0:	e005      	b.n	48be <lv_obj_create+0x412>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
    48b2:	2101      	movs	r1, #1
    48b4:	4620      	mov	r0, r4
    48b6:	4b19      	ldr	r3, [pc, #100]	; (491c <lv_obj_create+0x470>)
    48b8:	4798      	blx	r3
    48ba:	e008      	b.n	48ce <lv_obj_create+0x422>
    if(parent != NULL) {
    48bc:	b13e      	cbz	r6, 48ce <lv_obj_create+0x422>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
    48be:	69f3      	ldr	r3, [r6, #28]
    48c0:	4622      	mov	r2, r4
    48c2:	2101      	movs	r1, #1
    48c4:	4630      	mov	r0, r6
    48c6:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
    48c8:	4620      	mov	r0, r4
    48ca:	4b15      	ldr	r3, [pc, #84]	; (4920 <lv_obj_create+0x474>)
    48cc:	4798      	blx	r3
    LV_LOG_INFO("Object create ready");
    48ce:	4b15      	ldr	r3, [pc, #84]	; (4924 <lv_obj_create+0x478>)
    48d0:	9300      	str	r3, [sp, #0]
    48d2:	4b0d      	ldr	r3, [pc, #52]	; (4908 <lv_obj_create+0x45c>)
    48d4:	f240 1287 	movw	r2, #391	; 0x187
    48d8:	490c      	ldr	r1, [pc, #48]	; (490c <lv_obj_create+0x460>)
    48da:	2001      	movs	r0, #1
    48dc:	4d0c      	ldr	r5, [pc, #48]	; (4910 <lv_obj_create+0x464>)
    48de:	47a8      	blx	r5
}
    48e0:	4620      	mov	r0, r4
    48e2:	b003      	add	sp, #12
    48e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48e6:	bf00      	nop
    48e8:	000124b9 	.word	0x000124b9
    48ec:	0000298d 	.word	0x0000298d
    48f0:	000130df 	.word	0x000130df
    48f4:	00005fad 	.word	0x00005fad
    48f8:	00005a71 	.word	0x00005a71
    48fc:	000114e5 	.word	0x000114e5
    4900:	00004465 	.word	0x00004465
    4904:	66666667 	.word	0x66666667
    4908:	0001bad0 	.word	0x0001bad0
    490c:	0001bcc0 	.word	0x0001bcc0
    4910:	00012805 	.word	0x00012805
    4914:	0001b4bc 	.word	0x0001b4bc
    4918:	00002995 	.word	0x00002995
    491c:	00014791 	.word	0x00014791
    4920:	000039a9 	.word	0x000039a9
    4924:	0001be6c 	.word	0x0001be6c

00004928 <lv_obj_set_size>:
{
    4928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    492c:	b084      	sub	sp, #16
    492e:	4604      	mov	r4, r0
    4930:	460d      	mov	r5, r1
    4932:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4934:	4b32      	ldr	r3, [pc, #200]	; (4a00 <lv_obj_set_size+0xd8>)
    4936:	4798      	blx	r3
    4938:	b968      	cbnz	r0, 4956 <lv_obj_set_size+0x2e>
    493a:	4b32      	ldr	r3, [pc, #200]	; (4a04 <lv_obj_set_size+0xdc>)
    493c:	9300      	str	r3, [sp, #0]
    493e:	f240 22e5 	movw	r2, #741	; 0x2e5
    4942:	4931      	ldr	r1, [pc, #196]	; (4a08 <lv_obj_set_size+0xe0>)
    4944:	2003      	movs	r0, #3
    4946:	4d31      	ldr	r5, [pc, #196]	; (4a0c <lv_obj_set_size+0xe4>)
    4948:	47a8      	blx	r5
    494a:	4622      	mov	r2, r4
    494c:	2300      	movs	r3, #0
    494e:	4830      	ldr	r0, [pc, #192]	; (4a10 <lv_obj_set_size+0xe8>)
    4950:	4930      	ldr	r1, [pc, #192]	; (4a14 <lv_obj_set_size+0xec>)
    4952:	4788      	blx	r1
    4954:	e7fe      	b.n	4954 <lv_obj_set_size+0x2c>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
    4956:	4620      	mov	r0, r4
    4958:	4b2f      	ldr	r3, [pc, #188]	; (4a18 <lv_obj_set_size+0xf0>)
    495a:	4798      	blx	r3
    495c:	42a8      	cmp	r0, r5
    495e:	d03f      	beq.n	49e0 <lv_obj_set_size+0xb8>
    lv_obj_invalidate(obj);
    4960:	4620      	mov	r0, r4
    4962:	4b2e      	ldr	r3, [pc, #184]	; (4a1c <lv_obj_set_size+0xf4>)
    4964:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
    4966:	a902      	add	r1, sp, #8
    4968:	4620      	mov	r0, r4
    496a:	4b2d      	ldr	r3, [pc, #180]	; (4a20 <lv_obj_set_size+0xf8>)
    496c:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
    496e:	1e73      	subs	r3, r6, #1
    4970:	8a62      	ldrh	r2, [r4, #18]
    4972:	4413      	add	r3, r2
    4974:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
    4976:	4620      	mov	r0, r4
    4978:	4b2a      	ldr	r3, [pc, #168]	; (4a24 <lv_obj_set_size+0xfc>)
    497a:	4798      	blx	r3
    497c:	2801      	cmp	r0, #1
    497e:	d035      	beq.n	49ec <lv_obj_set_size+0xc4>
        obj->coords.x2 = obj->coords.x1 + w - 1;
    4980:	1e6b      	subs	r3, r5, #1
    4982:	8a22      	ldrh	r2, [r4, #16]
    4984:	4413      	add	r3, r2
    4986:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
    4988:	69e3      	ldr	r3, [r4, #28]
    498a:	aa02      	add	r2, sp, #8
    498c:	2102      	movs	r1, #2
    498e:	4620      	mov	r0, r4
    4990:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    4992:	4620      	mov	r0, r4
    4994:	4b24      	ldr	r3, [pc, #144]	; (4a28 <lv_obj_set_size+0x100>)
    4996:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
    4998:	b118      	cbz	r0, 49a2 <lv_obj_set_size+0x7a>
    499a:	69c5      	ldr	r5, [r0, #28]
    499c:	4622      	mov	r2, r4
    499e:	2101      	movs	r1, #1
    49a0:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
    49a2:	1d26      	adds	r6, r4, #4
    49a4:	4630      	mov	r0, r6
    49a6:	4b21      	ldr	r3, [pc, #132]	; (4a2c <lv_obj_set_size+0x104>)
    49a8:	4798      	blx	r3
    49aa:	4605      	mov	r5, r0
    49ac:	b168      	cbz	r0, 49ca <lv_obj_set_size+0xa2>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
    49ae:	f04f 0803 	mov.w	r8, #3
    _LV_LL_READ(obj->child_ll, i) {
    49b2:	4f1f      	ldr	r7, [pc, #124]	; (4a30 <lv_obj_set_size+0x108>)
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
    49b4:	69eb      	ldr	r3, [r5, #28]
    49b6:	aa02      	add	r2, sp, #8
    49b8:	4641      	mov	r1, r8
    49ba:	4628      	mov	r0, r5
    49bc:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
    49be:	4629      	mov	r1, r5
    49c0:	4630      	mov	r0, r6
    49c2:	47b8      	blx	r7
    49c4:	4605      	mov	r5, r0
    49c6:	2800      	cmp	r0, #0
    49c8:	d1f4      	bne.n	49b4 <lv_obj_set_size+0x8c>
    lv_obj_invalidate(obj);
    49ca:	4620      	mov	r0, r4
    49cc:	4b13      	ldr	r3, [pc, #76]	; (4a1c <lv_obj_set_size+0xf4>)
    49ce:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
    49d0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    49d4:	f013 0f01 	tst.w	r3, #1
    49d8:	d10e      	bne.n	49f8 <lv_obj_set_size+0xd0>
}
    49da:	b004      	add	sp, #16
    49dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
    49e0:	4620      	mov	r0, r4
    49e2:	4b14      	ldr	r3, [pc, #80]	; (4a34 <lv_obj_set_size+0x10c>)
    49e4:	4798      	blx	r3
    49e6:	42b0      	cmp	r0, r6
    49e8:	d1ba      	bne.n	4960 <lv_obj_set_size+0x38>
    49ea:	e7f6      	b.n	49da <lv_obj_set_size+0xb2>
        obj->coords.x1 = obj->coords.x2 - w + 1;
    49ec:	f1c5 0301 	rsb	r3, r5, #1
    49f0:	8aa2      	ldrh	r2, [r4, #20]
    49f2:	4413      	add	r3, r2
    49f4:	8223      	strh	r3, [r4, #16]
    49f6:	e7c7      	b.n	4988 <lv_obj_set_size+0x60>
    if(obj->realign.auto_realign) lv_obj_realign(obj);
    49f8:	4620      	mov	r0, r4
    49fa:	4b0f      	ldr	r3, [pc, #60]	; (4a38 <lv_obj_set_size+0x110>)
    49fc:	4798      	blx	r3
    49fe:	e7ec      	b.n	49da <lv_obj_set_size+0xb2>
    4a00:	0000298d 	.word	0x0000298d
    4a04:	0001baf4 	.word	0x0001baf4
    4a08:	0001bcc0 	.word	0x0001bcc0
    4a0c:	00012805 	.word	0x00012805
    4a10:	0001bd20 	.word	0x0001bd20
    4a14:	00002995 	.word	0x00002995
    4a18:	000035e5 	.word	0x000035e5
    4a1c:	000039a9 	.word	0x000039a9
    4a20:	000034c9 	.word	0x000034c9
    4a24:	00004465 	.word	0x00004465
    4a28:	00003305 	.word	0x00003305
    4a2c:	00012551 	.word	0x00012551
    4a30:	00012565 	.word	0x00012565
    4a34:	00003635 	.word	0x00003635
    4a38:	00004069 	.word	0x00004069

00004a3c <lv_obj_set_height>:
{
    4a3c:	b530      	push	{r4, r5, lr}
    4a3e:	b083      	sub	sp, #12
    4a40:	4604      	mov	r4, r0
    4a42:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4a44:	4b0d      	ldr	r3, [pc, #52]	; (4a7c <lv_obj_set_height+0x40>)
    4a46:	4798      	blx	r3
    4a48:	b968      	cbnz	r0, 4a66 <lv_obj_set_height+0x2a>
    4a4a:	4b0d      	ldr	r3, [pc, #52]	; (4a80 <lv_obj_set_height+0x44>)
    4a4c:	9300      	str	r3, [sp, #0]
    4a4e:	f240 3227 	movw	r2, #807	; 0x327
    4a52:	490c      	ldr	r1, [pc, #48]	; (4a84 <lv_obj_set_height+0x48>)
    4a54:	2003      	movs	r0, #3
    4a56:	4d0c      	ldr	r5, [pc, #48]	; (4a88 <lv_obj_set_height+0x4c>)
    4a58:	47a8      	blx	r5
    4a5a:	4622      	mov	r2, r4
    4a5c:	2300      	movs	r3, #0
    4a5e:	480b      	ldr	r0, [pc, #44]	; (4a8c <lv_obj_set_height+0x50>)
    4a60:	490b      	ldr	r1, [pc, #44]	; (4a90 <lv_obj_set_height+0x54>)
    4a62:	4788      	blx	r1
    4a64:	e7fe      	b.n	4a64 <lv_obj_set_height+0x28>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
    4a66:	4620      	mov	r0, r4
    4a68:	4b0a      	ldr	r3, [pc, #40]	; (4a94 <lv_obj_set_height+0x58>)
    4a6a:	4798      	blx	r3
    4a6c:	462a      	mov	r2, r5
    4a6e:	4601      	mov	r1, r0
    4a70:	4620      	mov	r0, r4
    4a72:	4b09      	ldr	r3, [pc, #36]	; (4a98 <lv_obj_set_height+0x5c>)
    4a74:	4798      	blx	r3
}
    4a76:	b003      	add	sp, #12
    4a78:	bd30      	pop	{r4, r5, pc}
    4a7a:	bf00      	nop
    4a7c:	0000298d 	.word	0x0000298d
    4a80:	0001bb18 	.word	0x0001bb18
    4a84:	0001bcc0 	.word	0x0001bcc0
    4a88:	00012805 	.word	0x00012805
    4a8c:	0001bd20 	.word	0x0001bd20
    4a90:	00002995 	.word	0x00002995
    4a94:	000035e5 	.word	0x000035e5
    4a98:	00004929 	.word	0x00004929

00004a9c <lv_obj_is_protected>:
{
    4a9c:	b530      	push	{r4, r5, lr}
    4a9e:	b083      	sub	sp, #12
    4aa0:	4604      	mov	r4, r0
    4aa2:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4aa4:	4b0c      	ldr	r3, [pc, #48]	; (4ad8 <lv_obj_is_protected+0x3c>)
    4aa6:	4798      	blx	r3
    4aa8:	b138      	cbz	r0, 4aba <lv_obj_is_protected+0x1e>
    return (obj->protect & prot) == 0 ? false : true;
    4aaa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    4aae:	421d      	tst	r5, r3
}
    4ab0:	bf14      	ite	ne
    4ab2:	2001      	movne	r0, #1
    4ab4:	2000      	moveq	r0, #0
    4ab6:	b003      	add	sp, #12
    4ab8:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4aba:	4b08      	ldr	r3, [pc, #32]	; (4adc <lv_obj_is_protected+0x40>)
    4abc:	9300      	str	r3, [sp, #0]
    4abe:	f640 22d7 	movw	r2, #2775	; 0xad7
    4ac2:	4907      	ldr	r1, [pc, #28]	; (4ae0 <lv_obj_is_protected+0x44>)
    4ac4:	2003      	movs	r0, #3
    4ac6:	4d07      	ldr	r5, [pc, #28]	; (4ae4 <lv_obj_is_protected+0x48>)
    4ac8:	47a8      	blx	r5
    4aca:	4622      	mov	r2, r4
    4acc:	2300      	movs	r3, #0
    4ace:	4806      	ldr	r0, [pc, #24]	; (4ae8 <lv_obj_is_protected+0x4c>)
    4ad0:	4906      	ldr	r1, [pc, #24]	; (4aec <lv_obj_is_protected+0x50>)
    4ad2:	4788      	blx	r1
    4ad4:	e7fe      	b.n	4ad4 <lv_obj_is_protected+0x38>
    4ad6:	bf00      	nop
    4ad8:	0000298d 	.word	0x0000298d
    4adc:	0001bb40 	.word	0x0001bb40
    4ae0:	0001bcc0 	.word	0x0001bcc0
    4ae4:	00012805 	.word	0x00012805
    4ae8:	0001bd20 	.word	0x0001bd20
    4aec:	00002995 	.word	0x00002995

00004af0 <lv_obj_get_state>:
{
    4af0:	b530      	push	{r4, r5, lr}
    4af2:	b085      	sub	sp, #20
    4af4:	4604      	mov	r4, r0
    4af6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4af8:	4b11      	ldr	r3, [pc, #68]	; (4b40 <lv_obj_get_state+0x50>)
    4afa:	4798      	blx	r3
    4afc:	b128      	cbz	r0, 4b0a <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
    4afe:	2d3f      	cmp	r5, #63	; 0x3f
    4b00:	d811      	bhi.n	4b26 <lv_obj_get_state+0x36>
    4b02:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
    4b06:	b005      	add	sp, #20
    4b08:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4b0a:	4b0e      	ldr	r3, [pc, #56]	; (4b44 <lv_obj_get_state+0x54>)
    4b0c:	9300      	str	r3, [sp, #0]
    4b0e:	f640 22de 	movw	r2, #2782	; 0xade
    4b12:	490d      	ldr	r1, [pc, #52]	; (4b48 <lv_obj_get_state+0x58>)
    4b14:	2003      	movs	r0, #3
    4b16:	4d0d      	ldr	r5, [pc, #52]	; (4b4c <lv_obj_get_state+0x5c>)
    4b18:	47a8      	blx	r5
    4b1a:	4622      	mov	r2, r4
    4b1c:	2300      	movs	r3, #0
    4b1e:	480c      	ldr	r0, [pc, #48]	; (4b50 <lv_obj_get_state+0x60>)
    4b20:	490c      	ldr	r1, [pc, #48]	; (4b54 <lv_obj_get_state+0x64>)
    4b22:	4788      	blx	r1
    4b24:	e7fe      	b.n	4b24 <lv_obj_get_state+0x34>
    info.part = part;
    4b26:	f88d 500c 	strb.w	r5, [sp, #12]
    info.result = LV_STATE_DEFAULT;
    4b2a:	2300      	movs	r3, #0
    4b2c:	f88d 300d 	strb.w	r3, [sp, #13]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
    4b30:	aa03      	add	r2, sp, #12
    4b32:	2109      	movs	r1, #9
    4b34:	4620      	mov	r0, r4
    4b36:	4b08      	ldr	r3, [pc, #32]	; (4b58 <lv_obj_get_state+0x68>)
    4b38:	4798      	blx	r3
    return info.result;
    4b3a:	f89d 000d 	ldrb.w	r0, [sp, #13]
    4b3e:	e7e2      	b.n	4b06 <lv_obj_get_state+0x16>
    4b40:	0000298d 	.word	0x0000298d
    4b44:	0001bb54 	.word	0x0001bb54
    4b48:	0001bcc0 	.word	0x0001bcc0
    4b4c:	00012805 	.word	0x00012805
    4b50:	0001bd20 	.word	0x0001bd20
    4b54:	00002995 	.word	0x00002995
    4b58:	000031fd 	.word	0x000031fd

00004b5c <_lv_obj_get_style_int>:
{
    4b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b60:	b085      	sub	sp, #20
    4b62:	4617      	mov	r7, r2
    while(parent) {
    4b64:	b360      	cbz	r0, 4bc0 <_lv_obj_get_style_int+0x64>
    4b66:	460d      	mov	r5, r1
    4b68:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4b6c:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4b6e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 4bfc <_lv_obj_get_style_int+0xa0>
        lv_state_t state = lv_obj_get_state(parent, part);
    4b72:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4c00 <_lv_obj_get_style_int+0xa4>
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    4b76:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4c04 <_lv_obj_get_style_int+0xa8>
    4b7a:	e006      	b.n	4b8a <_lv_obj_get_style_int+0x2e>
        if(res == LV_RES_OK) return value_act;
    4b7c:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
    4b80:	b005      	add	sp, #20
    4b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b86:	2500      	movs	r5, #0
    while(parent) {
    4b88:	b1de      	cbz	r6, 4bc2 <_lv_obj_get_style_int+0x66>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4b8a:	4629      	mov	r1, r5
    4b8c:	4630      	mov	r0, r6
    4b8e:	47d0      	blx	sl
    4b90:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4b92:	4629      	mov	r1, r5
    4b94:	4630      	mov	r0, r6
    4b96:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4b98:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4b9c:	b284      	uxth	r4, r0
        res = _lv_style_list_get_int(dsc, prop, &value_act);
    4b9e:	f10d 020e 	add.w	r2, sp, #14
    4ba2:	4621      	mov	r1, r4
    4ba4:	9801      	ldr	r0, [sp, #4]
    4ba6:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4ba8:	2801      	cmp	r0, #1
    4baa:	d0e7      	beq.n	4b7c <_lv_obj_get_style_int+0x20>
        if(attr.bits.inherit == 0) break;
    4bac:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4bb0:	d007      	beq.n	4bc2 <_lv_obj_get_style_int+0x66>
        if(part != LV_OBJ_PART_MAIN) {
    4bb2:	2d00      	cmp	r5, #0
    4bb4:	d1e7      	bne.n	4b86 <_lv_obj_get_style_int+0x2a>
        parent = lv_obj_get_parent(parent);
    4bb6:	4630      	mov	r0, r6
    4bb8:	4b0f      	ldr	r3, [pc, #60]	; (4bf8 <_lv_obj_get_style_int+0x9c>)
    4bba:	4798      	blx	r3
    4bbc:	4606      	mov	r6, r0
    4bbe:	e7e2      	b.n	4b86 <_lv_obj_get_style_int+0x2a>
    while(parent) {
    4bc0:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4bc2:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4bc6:	b2a4      	uxth	r4, r4
    4bc8:	2c22      	cmp	r4, #34	; 0x22
    4bca:	d00f      	beq.n	4bec <_lv_obj_get_style_int+0x90>
    4bcc:	d806      	bhi.n	4bdc <_lv_obj_get_style_int+0x80>
    4bce:	2c03      	cmp	r4, #3
    4bd0:	d00a      	beq.n	4be8 <_lv_obj_get_style_int+0x8c>
    4bd2:	2c07      	cmp	r4, #7
    4bd4:	d10c      	bne.n	4bf0 <_lv_obj_get_style_int+0x94>
            return LV_IMG_ZOOM_NONE;
    4bd6:	f44f 7080 	mov.w	r0, #256	; 0x100
    4bda:	e7d1      	b.n	4b80 <_lv_obj_get_style_int+0x24>
    switch(prop) {
    4bdc:	2c31      	cmp	r4, #49	; 0x31
    4bde:	d009      	beq.n	4bf4 <_lv_obj_get_style_int+0x98>
    4be0:	2cc0      	cmp	r4, #192	; 0xc0
    4be2:	d105      	bne.n	4bf0 <_lv_obj_get_style_int+0x94>
            return LV_DPI / 8;
    4be4:	2010      	movs	r0, #16
    4be6:	e7cb      	b.n	4b80 <_lv_obj_get_style_int+0x24>
            return LV_DPI / 20;
    4be8:	2006      	movs	r0, #6
    4bea:	e7c9      	b.n	4b80 <_lv_obj_get_style_int+0x24>
            return 255;
    4bec:	20ff      	movs	r0, #255	; 0xff
    4bee:	e7c7      	b.n	4b80 <_lv_obj_get_style_int+0x24>
    return 0;
    4bf0:	2000      	movs	r0, #0
    4bf2:	e7c5      	b.n	4b80 <_lv_obj_get_style_int+0x24>
            return LV_BORDER_SIDE_FULL;
    4bf4:	200f      	movs	r0, #15
    4bf6:	e7c3      	b.n	4b80 <_lv_obj_get_style_int+0x24>
    4bf8:	00003305 	.word	0x00003305
    4bfc:	00003685 	.word	0x00003685
    4c00:	00004af1 	.word	0x00004af1
    4c04:	0000788d 	.word	0x0000788d

00004c08 <_lv_obj_get_style_color>:
{
    4c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c0c:	b085      	sub	sp, #20
    4c0e:	4617      	mov	r7, r2
    while(parent) {
    4c10:	b348      	cbz	r0, 4c66 <_lv_obj_get_style_color+0x5e>
    4c12:	460d      	mov	r5, r1
    4c14:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4c18:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4c1a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4c88 <_lv_obj_get_style_color+0x80>
        lv_state_t state = lv_obj_get_state(parent, part);
    4c1e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4c8c <_lv_obj_get_style_color+0x84>
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    4c22:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4c90 <_lv_obj_get_style_color+0x88>
    4c26:	e004      	b.n	4c32 <_lv_obj_get_style_color+0x2a>
        if(res == LV_RES_OK) return value_act;
    4c28:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    4c2c:	e025      	b.n	4c7a <_lv_obj_get_style_color+0x72>
    4c2e:	2500      	movs	r5, #0
    while(parent) {
    4c30:	b1d6      	cbz	r6, 4c68 <_lv_obj_get_style_color+0x60>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4c32:	4629      	mov	r1, r5
    4c34:	4630      	mov	r0, r6
    4c36:	47d0      	blx	sl
    4c38:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4c3a:	4629      	mov	r1, r5
    4c3c:	4630      	mov	r0, r6
    4c3e:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4c40:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4c44:	b284      	uxth	r4, r0
        res = _lv_style_list_get_color(dsc, prop, &value_act);
    4c46:	aa03      	add	r2, sp, #12
    4c48:	4621      	mov	r1, r4
    4c4a:	9801      	ldr	r0, [sp, #4]
    4c4c:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4c4e:	2801      	cmp	r0, #1
    4c50:	d0ea      	beq.n	4c28 <_lv_obj_get_style_color+0x20>
        if(attr.bits.inherit == 0) break;
    4c52:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4c56:	d007      	beq.n	4c68 <_lv_obj_get_style_color+0x60>
        if(part != LV_OBJ_PART_MAIN) {
    4c58:	2d00      	cmp	r5, #0
    4c5a:	d1e8      	bne.n	4c2e <_lv_obj_get_style_color+0x26>
        parent = lv_obj_get_parent(parent);
    4c5c:	4630      	mov	r0, r6
    4c5e:	4b08      	ldr	r3, [pc, #32]	; (4c80 <_lv_obj_get_style_color+0x78>)
    4c60:	4798      	blx	r3
    4c62:	4606      	mov	r6, r0
    4c64:	e7e3      	b.n	4c2e <_lv_obj_get_style_color+0x26>
    while(parent) {
    4c66:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4c68:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4c6c:	3c29      	subs	r4, #41	; 0x29
    4c6e:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
    4c70:	bf9a      	itte	ls
    4c72:	4b04      	ldrls	r3, [pc, #16]	; (4c84 <_lv_obj_get_style_color+0x7c>)
    4c74:	f8b3 0674 	ldrhls.w	r0, [r3, #1652]	; 0x674
    return LV_COLOR_BLACK;
    4c78:	2000      	movhi	r0, #0
}
    4c7a:	b005      	add	sp, #20
    4c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c80:	00003305 	.word	0x00003305
    4c84:	0001b53c 	.word	0x0001b53c
    4c88:	00003685 	.word	0x00003685
    4c8c:	00004af1 	.word	0x00004af1
    4c90:	00007951 	.word	0x00007951

00004c94 <_lv_obj_get_style_opa>:
{
    4c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c98:	b085      	sub	sp, #20
    4c9a:	4617      	mov	r7, r2
    while(parent) {
    4c9c:	b350      	cbz	r0, 4cf4 <_lv_obj_get_style_opa+0x60>
    4c9e:	460d      	mov	r5, r1
    4ca0:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4ca4:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4ca6:	f8df a074 	ldr.w	sl, [pc, #116]	; 4d1c <_lv_obj_get_style_opa+0x88>
        lv_state_t state = lv_obj_get_state(parent, part);
    4caa:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4d20 <_lv_obj_get_style_opa+0x8c>
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    4cae:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4d24 <_lv_obj_get_style_opa+0x90>
    4cb2:	e004      	b.n	4cbe <_lv_obj_get_style_opa+0x2a>
        if(res == LV_RES_OK) return value_act;
    4cb4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    4cb8:	e029      	b.n	4d0e <_lv_obj_get_style_opa+0x7a>
    4cba:	2500      	movs	r5, #0
    while(parent) {
    4cbc:	b1de      	cbz	r6, 4cf6 <_lv_obj_get_style_opa+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4cbe:	4629      	mov	r1, r5
    4cc0:	4630      	mov	r0, r6
    4cc2:	47d0      	blx	sl
    4cc4:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4cc6:	4629      	mov	r1, r5
    4cc8:	4630      	mov	r0, r6
    4cca:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4ccc:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4cd0:	b284      	uxth	r4, r0
        res = _lv_style_list_get_opa(dsc, prop, &value_act);
    4cd2:	f10d 020f 	add.w	r2, sp, #15
    4cd6:	4621      	mov	r1, r4
    4cd8:	9801      	ldr	r0, [sp, #4]
    4cda:	47c0      	blx	r8
        if(res == LV_RES_OK) return value_act;
    4cdc:	2801      	cmp	r0, #1
    4cde:	d0e9      	beq.n	4cb4 <_lv_obj_get_style_opa+0x20>
        if(attr.bits.inherit == 0) break;
    4ce0:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4ce4:	d007      	beq.n	4cf6 <_lv_obj_get_style_opa+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    4ce6:	2d00      	cmp	r5, #0
    4ce8:	d1e7      	bne.n	4cba <_lv_obj_get_style_opa+0x26>
        parent = lv_obj_get_parent(parent);
    4cea:	4630      	mov	r0, r6
    4cec:	4b0a      	ldr	r3, [pc, #40]	; (4d18 <_lv_obj_get_style_opa+0x84>)
    4cee:	4798      	blx	r3
    4cf0:	4606      	mov	r6, r0
    4cf2:	e7e2      	b.n	4cba <_lv_obj_get_style_opa+0x26>
    while(parent) {
    4cf4:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4cf6:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4cfa:	b2a4      	uxth	r4, r4
    4cfc:	2c6d      	cmp	r4, #109	; 0x6d
    4cfe:	d009      	beq.n	4d14 <_lv_obj_get_style_opa+0x80>
    4d00:	f248 03ad 	movw	r3, #32941	; 0x80ad
    4d04:	429c      	cmp	r4, r3
    4d06:	d005      	beq.n	4d14 <_lv_obj_get_style_opa+0x80>
    4d08:	2c2c      	cmp	r4, #44	; 0x2c
    4d0a:	d003      	beq.n	4d14 <_lv_obj_get_style_opa+0x80>
    return LV_OPA_COVER;
    4d0c:	20ff      	movs	r0, #255	; 0xff
}
    4d0e:	b005      	add	sp, #20
    4d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_OPA_TRANSP;
    4d14:	2000      	movs	r0, #0
    4d16:	e7fa      	b.n	4d0e <_lv_obj_get_style_opa+0x7a>
    4d18:	00003305 	.word	0x00003305
    4d1c:	00003685 	.word	0x00003685
    4d20:	00004af1 	.word	0x00004af1
    4d24:	00007a15 	.word	0x00007a15

00004d28 <_lv_obj_get_style_ptr>:
{
    4d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d2c:	b085      	sub	sp, #20
    4d2e:	4617      	mov	r7, r2
    while(parent) {
    4d30:	b350      	cbz	r0, 4d88 <_lv_obj_get_style_ptr+0x60>
    4d32:	460d      	mov	r5, r1
    4d34:	ea4f 2b12 	mov.w	fp, r2, lsr #8
    4d38:	4606      	mov	r6, r0
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4d3a:	f8df a080 	ldr.w	sl, [pc, #128]	; 4dbc <_lv_obj_get_style_ptr+0x94>
        lv_state_t state = lv_obj_get_state(parent, part);
    4d3e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 4dc0 <_lv_obj_get_style_ptr+0x98>
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    4d42:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4dc4 <_lv_obj_get_style_ptr+0x9c>
    4d46:	e005      	b.n	4d54 <_lv_obj_get_style_ptr+0x2c>
        if(res == LV_RES_OK)  return value_act;
    4d48:	9803      	ldr	r0, [sp, #12]
}
    4d4a:	b005      	add	sp, #20
    4d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d50:	2500      	movs	r5, #0
    while(parent) {
    4d52:	b1d6      	cbz	r6, 4d8a <_lv_obj_get_style_ptr+0x62>
        lv_style_list_t * dsc = lv_obj_get_style_list(parent, part);
    4d54:	4629      	mov	r1, r5
    4d56:	4630      	mov	r0, r6
    4d58:	47d0      	blx	sl
    4d5a:	9001      	str	r0, [sp, #4]
        lv_state_t state = lv_obj_get_state(parent, part);
    4d5c:	4629      	mov	r1, r5
    4d5e:	4630      	mov	r0, r6
    4d60:	47c8      	blx	r9
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
    4d62:	eb07 2000 	add.w	r0, r7, r0, lsl #8
    4d66:	b284      	uxth	r4, r0
        res = _lv_style_list_get_ptr(dsc, prop, &value_act);
    4d68:	aa03      	add	r2, sp, #12
    4d6a:	4621      	mov	r1, r4
    4d6c:	9801      	ldr	r0, [sp, #4]
    4d6e:	47c0      	blx	r8
        if(res == LV_RES_OK)  return value_act;
    4d70:	2801      	cmp	r0, #1
    4d72:	d0e9      	beq.n	4d48 <_lv_obj_get_style_ptr+0x20>
        if(attr.bits.inherit == 0) break;
    4d74:	f01b 0f80 	tst.w	fp, #128	; 0x80
    4d78:	d007      	beq.n	4d8a <_lv_obj_get_style_ptr+0x62>
        if(part != LV_OBJ_PART_MAIN) {
    4d7a:	2d00      	cmp	r5, #0
    4d7c:	d1e8      	bne.n	4d50 <_lv_obj_get_style_ptr+0x28>
        parent = lv_obj_get_parent(parent);
    4d7e:	4630      	mov	r0, r6
    4d80:	4b0b      	ldr	r3, [pc, #44]	; (4db0 <_lv_obj_get_style_ptr+0x88>)
    4d82:	4798      	blx	r3
    4d84:	4606      	mov	r6, r0
    4d86:	e7e3      	b.n	4d50 <_lv_obj_get_style_ptr+0x28>
    while(parent) {
    4d88:	4614      	mov	r4, r2
    prop = prop & (~LV_STYLE_STATE_MASK);
    4d8a:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
    4d8e:	b2a4      	uxth	r4, r4
    4d90:	2cbe      	cmp	r4, #190	; 0xbe
    4d92:	d00a      	beq.n	4daa <_lv_obj_get_style_ptr+0x82>
    4d94:	f248 038e 	movw	r3, #32910	; 0x808e
    4d98:	429c      	cmp	r4, r3
    4d9a:	d003      	beq.n	4da4 <_lv_obj_get_style_ptr+0x7c>
    4d9c:	2c7e      	cmp	r4, #126	; 0x7e
    4d9e:	d001      	beq.n	4da4 <_lv_obj_get_style_ptr+0x7c>
    return NULL;
    4da0:	2000      	movs	r0, #0
    4da2:	e7d2      	b.n	4d4a <_lv_obj_get_style_ptr+0x22>
            return lv_theme_get_font_normal();
    4da4:	4b03      	ldr	r3, [pc, #12]	; (4db4 <_lv_obj_get_style_ptr+0x8c>)
    4da6:	4798      	blx	r3
    4da8:	e7cf      	b.n	4d4a <_lv_obj_get_style_ptr+0x22>
            return &lv_anim_path_def;
    4daa:	4803      	ldr	r0, [pc, #12]	; (4db8 <_lv_obj_get_style_ptr+0x90>)
    4dac:	e7cd      	b.n	4d4a <_lv_obj_get_style_ptr+0x22>
    4dae:	bf00      	nop
    4db0:	00003305 	.word	0x00003305
    4db4:	00014785 	.word	0x00014785
    4db8:	000206e4 	.word	0x000206e4
    4dbc:	00003685 	.word	0x00003685
    4dc0:	00004af1 	.word	0x00004af1
    4dc4:	00007ad9 	.word	0x00007ad9

00004dc8 <trans_anim_start_cb>:
{
    4dc8:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
    4dca:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
    4dcc:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    4dce:	f005 030f 	and.w	r3, r5, #15
    4dd2:	2b08      	cmp	r3, #8
    4dd4:	dd13      	ble.n	4dfe <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    4dd6:	2b0b      	cmp	r3, #11
    4dd8:	dd18      	ble.n	4e0c <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    4dda:	2b0d      	cmp	r3, #13
    4ddc:	dd1d      	ble.n	4e1a <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
    4dde:	462a      	mov	r2, r5
    4de0:	79a1      	ldrb	r1, [r4, #6]
    4de2:	6820      	ldr	r0, [r4, #0]
    4de4:	4b10      	ldr	r3, [pc, #64]	; (4e28 <trans_anim_start_cb+0x60>)
    4de6:	4798      	blx	r3
    4de8:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
    4dea:	2300      	movs	r3, #0
    4dec:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
    4dee:	4623      	mov	r3, r4
    4df0:	462a      	mov	r2, r5
    4df2:	79a1      	ldrb	r1, [r4, #6]
    4df4:	6820      	ldr	r0, [r4, #0]
    4df6:	4e0d      	ldr	r6, [pc, #52]	; (4e2c <trans_anim_start_cb+0x64>)
    4df8:	47b0      	blx	r6
    tr->prop = prop_tmp;
    4dfa:	80a5      	strh	r5, [r4, #4]
    4dfc:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
    4dfe:	462a      	mov	r2, r5
    4e00:	79a1      	ldrb	r1, [r4, #6]
    4e02:	6820      	ldr	r0, [r4, #0]
    4e04:	4b0a      	ldr	r3, [pc, #40]	; (4e30 <trans_anim_start_cb+0x68>)
    4e06:	4798      	blx	r3
    4e08:	8120      	strh	r0, [r4, #8]
    4e0a:	e7ee      	b.n	4dea <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
    4e0c:	462a      	mov	r2, r5
    4e0e:	79a1      	ldrb	r1, [r4, #6]
    4e10:	6820      	ldr	r0, [r4, #0]
    4e12:	4b08      	ldr	r3, [pc, #32]	; (4e34 <trans_anim_start_cb+0x6c>)
    4e14:	4798      	blx	r3
    4e16:	8120      	strh	r0, [r4, #8]
    4e18:	e7e7      	b.n	4dea <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
    4e1a:	462a      	mov	r2, r5
    4e1c:	79a1      	ldrb	r1, [r4, #6]
    4e1e:	6820      	ldr	r0, [r4, #0]
    4e20:	4b05      	ldr	r3, [pc, #20]	; (4e38 <trans_anim_start_cb+0x70>)
    4e22:	4798      	blx	r3
    4e24:	7220      	strb	r0, [r4, #8]
    4e26:	e7e0      	b.n	4dea <trans_anim_start_cb+0x22>
    4e28:	00004d29 	.word	0x00004d29
    4e2c:	000036b1 	.word	0x000036b1
    4e30:	00004b5d 	.word	0x00004b5d
    4e34:	00004c09 	.word	0x00004c09
    4e38:	00004c95 	.word	0x00004c95

00004e3c <lv_obj_set_state>:
    if(obj->state == new_state) return;
    4e3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    4e40:	428b      	cmp	r3, r1
    4e42:	f000 8252 	beq.w	52ea <lv_obj_set_state+0x4ae>
{
    4e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e4a:	b0a1      	sub	sp, #132	; 0x84
    4e4c:	4689      	mov	r9, r1
    4e4e:	4682      	mov	sl, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4e50:	4bab      	ldr	r3, [pc, #684]	; (5100 <lv_obj_set_state+0x2c4>)
    4e52:	4798      	blx	r3
    4e54:	b140      	cbz	r0, 4e68 <lv_obj_set_state+0x2c>
    lv_state_t prev_state = obj->state;
    4e56:	f89a b03d 	ldrb.w	fp, [sl, #61]	; 0x3d
    obj->state = new_state;
    4e5a:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
    4e5e:	2300      	movs	r3, #0
    4e60:	9306      	str	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
    4e62:	4da8      	ldr	r5, [pc, #672]	; (5104 <lv_obj_set_state+0x2c8>)
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    4e64:	46d8      	mov	r8, fp
    4e66:	e1d2      	b.n	520e <lv_obj_set_state+0x3d2>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    4e68:	4ba7      	ldr	r3, [pc, #668]	; (5108 <lv_obj_set_state+0x2cc>)
    4e6a:	9300      	str	r3, [sp, #0]
    4e6c:	f240 6237 	movw	r2, #1591	; 0x637
    4e70:	49a6      	ldr	r1, [pc, #664]	; (510c <lv_obj_set_state+0x2d0>)
    4e72:	2003      	movs	r0, #3
    4e74:	4ca6      	ldr	r4, [pc, #664]	; (5110 <lv_obj_set_state+0x2d4>)
    4e76:	47a0      	blx	r4
    4e78:	4652      	mov	r2, sl
    4e7a:	2300      	movs	r3, #0
    4e7c:	48a5      	ldr	r0, [pc, #660]	; (5114 <lv_obj_set_state+0x2d8>)
    4e7e:	49a6      	ldr	r1, [pc, #664]	; (5118 <lv_obj_set_state+0x2dc>)
    4e80:	4788      	blx	r1
    4e82:	e7fe      	b.n	4e82 <lv_obj_set_state+0x46>
        style_list->skip_trans = 1;
    4e84:	7973      	ldrb	r3, [r6, #5]
    4e86:	f043 0304 	orr.w	r3, r3, #4
    4e8a:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    4e8c:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
    4e90:	4622      	mov	r2, r4
    4e92:	f8dd b00c 	ldr.w	fp, [sp, #12]
    4e96:	4659      	mov	r1, fp
    4e98:	4650      	mov	r0, sl
    4e9a:	47a8      	blx	r5
    4e9c:	4607      	mov	r7, r0
        obj->state = new_state;
    4e9e:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
    4ea2:	4622      	mov	r2, r4
    4ea4:	f8cd b00c 	str.w	fp, [sp, #12]
    4ea8:	4659      	mov	r1, fp
    4eaa:	4650      	mov	r0, sl
    4eac:	47a8      	blx	r5
    4eae:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    4eb0:	7973      	ldrb	r3, [r6, #5]
    4eb2:	f36f 0382 	bfc	r3, #2, #1
    4eb6:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
    4eb8:	4287      	cmp	r7, r0
    4eba:	d04a      	beq.n	4f52 <lv_obj_set_state+0x116>
        obj->state = prev_state;
    4ebc:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
    4ec0:	4622      	mov	r2, r4
    4ec2:	9903      	ldr	r1, [sp, #12]
    4ec4:	4650      	mov	r0, sl
    4ec6:	47a8      	blx	r5
    4ec8:	4606      	mov	r6, r0
        obj->state = new_state;
    4eca:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
    4ece:	4602      	mov	r2, r0
    4ed0:	4621      	mov	r1, r4
    4ed2:	9804      	ldr	r0, [sp, #16]
    4ed4:	4b91      	ldr	r3, [pc, #580]	; (511c <lv_obj_set_state+0x2e0>)
    4ed6:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
    4ed8:	2c01      	cmp	r4, #1
    4eda:	f000 8094 	beq.w	5006 <lv_obj_set_state+0x1ca>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4ede:	4890      	ldr	r0, [pc, #576]	; (5120 <lv_obj_set_state+0x2e4>)
    4ee0:	4b90      	ldr	r3, [pc, #576]	; (5124 <lv_obj_set_state+0x2e8>)
    4ee2:	4798      	blx	r3
    4ee4:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4ee6:	4b86      	ldr	r3, [pc, #536]	; (5100 <lv_obj_set_state+0x2c4>)
    4ee8:	4798      	blx	r3
    4eea:	2800      	cmp	r0, #0
    4eec:	f000 80a2 	beq.w	5034 <lv_obj_set_state+0x1f8>
        if(tr == NULL) return NULL;
    4ef0:	2f00      	cmp	r7, #0
    4ef2:	d02e      	beq.n	4f52 <lv_obj_set_state+0x116>
        tr->start_value._int = int1;
    4ef4:	813e      	strh	r6, [r7, #8]
        tr->end_value._int = int2;
    4ef6:	f8a7 b00c 	strh.w	fp, [r7, #12]
                    tr->obj = obj;
    4efa:	f8c7 a000 	str.w	sl, [r7]
                    tr->prop = props[i];
    4efe:	80bc      	strh	r4, [r7, #4]
                    tr->part = part;
    4f00:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4f04:	71bb      	strb	r3, [r7, #6]
                    lv_anim_init(&a);
    4f06:	a810      	add	r0, sp, #64	; 0x40
    4f08:	4b87      	ldr	r3, [pc, #540]	; (5128 <lv_obj_set_state+0x2ec>)
    4f0a:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
    4f0c:	9710      	str	r7, [sp, #64]	; 0x40
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
    4f0e:	4b87      	ldr	r3, [pc, #540]	; (512c <lv_obj_set_state+0x2f0>)
    4f10:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
    4f12:	4b87      	ldr	r3, [pc, #540]	; (5130 <lv_obj_set_state+0x2f4>)
    4f14:	9312      	str	r3, [sp, #72]	; 0x48
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
    4f16:	4b87      	ldr	r3, [pc, #540]	; (5134 <lv_obj_set_state+0x2f8>)
    4f18:	9313      	str	r3, [sp, #76]	; 0x4c
    a->start = start;
    4f1a:	2300      	movs	r3, #0
    4f1c:	9316      	str	r3, [sp, #88]	; 0x58
    a->end   = end;
    4f1e:	23ff      	movs	r3, #255	; 0xff
    4f20:	9317      	str	r3, [sp, #92]	; 0x5c
    a->time     = duration;
    4f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4f24:	9318      	str	r3, [sp, #96]	; 0x60
    a->act_time = (int32_t)(-delay);
    4f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f28:	425b      	negs	r3, r3
    4f2a:	9319      	str	r3, [sp, #100]	; 0x64
    4f2c:	9a08      	ldr	r2, [sp, #32]
    4f2e:	1e53      	subs	r3, r2, #1
    4f30:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    4f32:	aa14      	add	r2, sp, #80	; 0x50
        *d8 = *s8;
    4f34:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    4f38:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    4f3c:	4283      	cmp	r3, r0
    4f3e:	d1f9      	bne.n	4f34 <lv_obj_set_state+0xf8>
                    a.early_apply = 0;
    4f40:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
    4f44:	f36f 0300 	bfc	r3, #0, #1
    4f48:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
                    lv_anim_start(&a);
    4f4c:	a810      	add	r0, sp, #64	; 0x40
    4f4e:	4b7a      	ldr	r3, [pc, #488]	; (5138 <lv_obj_set_state+0x2fc>)
    4f50:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
    4f52:	9b05      	ldr	r3, [sp, #20]
    4f54:	aa10      	add	r2, sp, #64	; 0x40
    4f56:	4293      	cmp	r3, r2
    4f58:	f000 8154 	beq.w	5204 <lv_obj_set_state+0x3c8>
            if(props[i] != 0) {
    4f5c:	9b05      	ldr	r3, [sp, #20]
    4f5e:	f833 4b02 	ldrh.w	r4, [r3], #2
    4f62:	9305      	str	r3, [sp, #20]
    4f64:	2c00      	cmp	r4, #0
    4f66:	d0f4      	beq.n	4f52 <lv_obj_set_state+0x116>
                _lv_style_list_add_trans_style(style_list);
    4f68:	9807      	ldr	r0, [sp, #28]
    4f6a:	4b74      	ldr	r3, [pc, #464]	; (513c <lv_obj_set_state+0x300>)
    4f6c:	4798      	blx	r3
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    4f6e:	9903      	ldr	r1, [sp, #12]
    4f70:	4650      	mov	r0, sl
    4f72:	4b73      	ldr	r3, [pc, #460]	; (5140 <lv_obj_set_state+0x304>)
    4f74:	4798      	blx	r3
    4f76:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
    4f78:	4b72      	ldr	r3, [pc, #456]	; (5144 <lv_obj_set_state+0x308>)
    4f7a:	4798      	blx	r3
    4f7c:	9004      	str	r0, [sp, #16]
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
    4f7e:	f004 030f 	and.w	r3, r4, #15
    4f82:	2b08      	cmp	r3, #8
    4f84:	f77f af7e 	ble.w	4e84 <lv_obj_set_state+0x48>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
    4f88:	2b0b      	cmp	r3, #11
    4f8a:	dd61      	ble.n	5050 <lv_obj_set_state+0x214>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
    4f8c:	2b0d      	cmp	r3, #13
    4f8e:	f300 80e9 	bgt.w	5164 <lv_obj_set_state+0x328>
        style_list->skip_trans = 1;
    4f92:	7973      	ldrb	r3, [r6, #5]
    4f94:	f043 0304 	orr.w	r3, r3, #4
    4f98:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    4f9a:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
    4f9e:	4622      	mov	r2, r4
    4fa0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    4fa4:	4659      	mov	r1, fp
    4fa6:	4650      	mov	r0, sl
    4fa8:	4f67      	ldr	r7, [pc, #412]	; (5148 <lv_obj_set_state+0x30c>)
    4faa:	47b8      	blx	r7
    4fac:	900b      	str	r0, [sp, #44]	; 0x2c
        obj->state = new_state;
    4fae:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
    4fb2:	4622      	mov	r2, r4
    4fb4:	f8cd b00c 	str.w	fp, [sp, #12]
    4fb8:	4659      	mov	r1, fp
    4fba:	4650      	mov	r0, sl
    4fbc:	47b8      	blx	r7
    4fbe:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
    4fc0:	7973      	ldrb	r3, [r6, #5]
    4fc2:	f36f 0382 	bfc	r3, #2, #1
    4fc6:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
    4fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4fca:	4283      	cmp	r3, r0
    4fcc:	d0c1      	beq.n	4f52 <lv_obj_set_state+0x116>
        obj->state = prev_state;
    4fce:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
    4fd2:	4622      	mov	r2, r4
    4fd4:	9903      	ldr	r1, [sp, #12]
    4fd6:	4650      	mov	r0, sl
    4fd8:	47b8      	blx	r7
    4fda:	4606      	mov	r6, r0
        obj->state = new_state;
    4fdc:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
    4fe0:	4602      	mov	r2, r0
    4fe2:	4621      	mov	r1, r4
    4fe4:	9804      	ldr	r0, [sp, #16]
    4fe6:	4b59      	ldr	r3, [pc, #356]	; (514c <lv_obj_set_state+0x310>)
    4fe8:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    4fea:	484d      	ldr	r0, [pc, #308]	; (5120 <lv_obj_set_state+0x2e4>)
    4fec:	4b4d      	ldr	r3, [pc, #308]	; (5124 <lv_obj_set_state+0x2e8>)
    4fee:	4798      	blx	r3
    4ff0:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    4ff2:	4b43      	ldr	r3, [pc, #268]	; (5100 <lv_obj_set_state+0x2c4>)
    4ff4:	4798      	blx	r3
    4ff6:	2800      	cmp	r0, #0
    4ff8:	d074      	beq.n	50e4 <lv_obj_set_state+0x2a8>
        if(tr == NULL) return NULL;
    4ffa:	2f00      	cmp	r7, #0
    4ffc:	d0a9      	beq.n	4f52 <lv_obj_set_state+0x116>
        tr->start_value._opa = o1;
    4ffe:	723e      	strb	r6, [r7, #8]
        tr->end_value._opa = o2;
    5000:	f887 b00c 	strb.w	fp, [r7, #12]
    5004:	e779      	b.n	4efa <lv_obj_set_state+0xbe>
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
    5006:	f647 73ff 	movw	r3, #32767	; 0x7fff
    500a:	429e      	cmp	r6, r3
    500c:	f000 814c 	beq.w	52a8 <lv_obj_set_state+0x46c>
    5010:	459b      	cmp	fp, r3
    5012:	f47f af64 	bne.w	4ede <lv_obj_set_state+0xa2>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    5016:	4650      	mov	r0, sl
    5018:	f8df b144 	ldr.w	fp, [pc, #324]	; 5160 <lv_obj_set_state+0x324>
    501c:	47d8      	blx	fp
    501e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    5022:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    5026:	4650      	mov	r0, sl
    5028:	47d8      	blx	fp
    502a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    502e:	f340 034f 	sbfx	r3, r0, #1, #16
    5032:	e151      	b.n	52d8 <lv_obj_set_state+0x49c>
        LV_ASSERT_MEM(tr);
    5034:	4b46      	ldr	r3, [pc, #280]	; (5150 <lv_obj_set_state+0x314>)
    5036:	9300      	str	r3, [sp, #0]
    5038:	f640 62b2 	movw	r2, #3762	; 0xeb2
    503c:	4933      	ldr	r1, [pc, #204]	; (510c <lv_obj_set_state+0x2d0>)
    503e:	2003      	movs	r0, #3
    5040:	4c33      	ldr	r4, [pc, #204]	; (5110 <lv_obj_set_state+0x2d4>)
    5042:	47a0      	blx	r4
    5044:	463a      	mov	r2, r7
    5046:	2300      	movs	r3, #0
    5048:	4842      	ldr	r0, [pc, #264]	; (5154 <lv_obj_set_state+0x318>)
    504a:	4933      	ldr	r1, [pc, #204]	; (5118 <lv_obj_set_state+0x2dc>)
    504c:	4788      	blx	r1
    504e:	e7fe      	b.n	504e <lv_obj_set_state+0x212>
        style_list->skip_trans = 1;
    5050:	7973      	ldrb	r3, [r6, #5]
    5052:	f043 0304 	orr.w	r3, r3, #4
    5056:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
    5058:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
    505c:	4622      	mov	r2, r4
    505e:	9903      	ldr	r1, [sp, #12]
    5060:	4650      	mov	r0, sl
    5062:	4f3d      	ldr	r7, [pc, #244]	; (5158 <lv_obj_set_state+0x31c>)
    5064:	47b8      	blx	r7
    5066:	4683      	mov	fp, r0
        obj->state = new_state;
    5068:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
    506c:	4622      	mov	r2, r4
    506e:	9903      	ldr	r1, [sp, #12]
    5070:	4650      	mov	r0, sl
    5072:	47b8      	blx	r7
    5074:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
        style_list->skip_trans = 0;
    5078:	7973      	ldrb	r3, [r6, #5]
    507a:	f36f 0382 	bfc	r3, #2, #1
    507e:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
    5080:	fa1f fb8b 	uxth.w	fp, fp
    5084:	b283      	uxth	r3, r0
    5086:	459b      	cmp	fp, r3
    5088:	f43f af63 	beq.w	4f52 <lv_obj_set_state+0x116>
        obj->state = prev_state;
    508c:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
    5090:	4622      	mov	r2, r4
    5092:	9903      	ldr	r1, [sp, #12]
    5094:	4650      	mov	r0, sl
    5096:	47b8      	blx	r7
    5098:	4683      	mov	fp, r0
        obj->state = new_state;
    509a:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
    509e:	4602      	mov	r2, r0
    50a0:	4621      	mov	r1, r4
    50a2:	9804      	ldr	r0, [sp, #16]
    50a4:	4b2d      	ldr	r3, [pc, #180]	; (515c <lv_obj_set_state+0x320>)
    50a6:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    50a8:	481d      	ldr	r0, [pc, #116]	; (5120 <lv_obj_set_state+0x2e4>)
    50aa:	4b1e      	ldr	r3, [pc, #120]	; (5124 <lv_obj_set_state+0x2e8>)
    50ac:	4798      	blx	r3
    50ae:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    50b0:	4b13      	ldr	r3, [pc, #76]	; (5100 <lv_obj_set_state+0x2c4>)
    50b2:	4798      	blx	r3
    50b4:	b140      	cbz	r0, 50c8 <lv_obj_set_state+0x28c>
        if(tr == NULL) return NULL;
    50b6:	2f00      	cmp	r7, #0
    50b8:	f43f af4b 	beq.w	4f52 <lv_obj_set_state+0x116>
        tr->start_value._color = c1;
    50bc:	f8a7 b008 	strh.w	fp, [r7, #8]
        tr->end_value._color = c2;
    50c0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    50c4:	81bb      	strh	r3, [r7, #12]
    50c6:	e718      	b.n	4efa <lv_obj_set_state+0xbe>
        LV_ASSERT_MEM(tr);
    50c8:	4b21      	ldr	r3, [pc, #132]	; (5150 <lv_obj_set_state+0x314>)
    50ca:	9300      	str	r3, [sp, #0]
    50cc:	f640 62c6 	movw	r2, #3782	; 0xec6
    50d0:	490e      	ldr	r1, [pc, #56]	; (510c <lv_obj_set_state+0x2d0>)
    50d2:	2003      	movs	r0, #3
    50d4:	4c0e      	ldr	r4, [pc, #56]	; (5110 <lv_obj_set_state+0x2d4>)
    50d6:	47a0      	blx	r4
    50d8:	463a      	mov	r2, r7
    50da:	2300      	movs	r3, #0
    50dc:	481d      	ldr	r0, [pc, #116]	; (5154 <lv_obj_set_state+0x318>)
    50de:	490e      	ldr	r1, [pc, #56]	; (5118 <lv_obj_set_state+0x2dc>)
    50e0:	4788      	blx	r1
    50e2:	e7fe      	b.n	50e2 <lv_obj_set_state+0x2a6>
        LV_ASSERT_MEM(tr);
    50e4:	4b1a      	ldr	r3, [pc, #104]	; (5150 <lv_obj_set_state+0x314>)
    50e6:	9300      	str	r3, [sp, #0]
    50e8:	f640 62db 	movw	r2, #3803	; 0xedb
    50ec:	4907      	ldr	r1, [pc, #28]	; (510c <lv_obj_set_state+0x2d0>)
    50ee:	2003      	movs	r0, #3
    50f0:	4c07      	ldr	r4, [pc, #28]	; (5110 <lv_obj_set_state+0x2d4>)
    50f2:	47a0      	blx	r4
    50f4:	463a      	mov	r2, r7
    50f6:	2300      	movs	r3, #0
    50f8:	4816      	ldr	r0, [pc, #88]	; (5154 <lv_obj_set_state+0x318>)
    50fa:	4907      	ldr	r1, [pc, #28]	; (5118 <lv_obj_set_state+0x2dc>)
    50fc:	4788      	blx	r1
    50fe:	e7fe      	b.n	50fe <lv_obj_set_state+0x2c2>
    5100:	0000298d 	.word	0x0000298d
    5104:	00004b5d 	.word	0x00004b5d
    5108:	0001bbb4 	.word	0x0001bbb4
    510c:	0001bcc0 	.word	0x0001bcc0
    5110:	00012805 	.word	0x00012805
    5114:	0001bd20 	.word	0x0001bd20
    5118:	00002995 	.word	0x00002995
    511c:	00006e89 	.word	0x00006e89
    5120:	20006d58 	.word	0x20006d58
    5124:	000124b9 	.word	0x000124b9
    5128:	0001188d 	.word	0x0001188d
    512c:	00004335 	.word	0x00004335
    5130:	00004dc9 	.word	0x00004dc9
    5134:	000037a9 	.word	0x000037a9
    5138:	00011949 	.word	0x00011949
    513c:	000077dd 	.word	0x000077dd
    5140:	00003685 	.word	0x00003685
    5144:	0000768f 	.word	0x0000768f
    5148:	00004c95 	.word	0x00004c95
    514c:	00007111 	.word	0x00007111
    5150:	0001bbc8 	.word	0x0001bbc8
    5154:	0001b4bc 	.word	0x0001b4bc
    5158:	00004c09 	.word	0x00004c09
    515c:	00006fcd 	.word	0x00006fcd
    5160:	000035e5 	.word	0x000035e5
        obj->state = prev_state;
    5164:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        style_list->skip_trans = 1;
    5168:	7973      	ldrb	r3, [r6, #5]
    516a:	f043 0304 	orr.w	r3, r3, #4
    516e:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
    5170:	4622      	mov	r2, r4
    5172:	f8dd b00c 	ldr.w	fp, [sp, #12]
    5176:	4659      	mov	r1, fp
    5178:	4650      	mov	r0, sl
    517a:	4f5c      	ldr	r7, [pc, #368]	; (52ec <lv_obj_set_state+0x4b0>)
    517c:	47b8      	blx	r7
    517e:	900c      	str	r0, [sp, #48]	; 0x30
        obj->state = new_state;
    5180:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
    5184:	4622      	mov	r2, r4
    5186:	f8cd b00c 	str.w	fp, [sp, #12]
    518a:	4659      	mov	r1, fp
    518c:	4650      	mov	r0, sl
    518e:	47b8      	blx	r7
    5190:	4683      	mov	fp, r0
    5192:	a920      	add	r1, sp, #128	; 0x80
    5194:	f841 0d40 	str.w	r0, [r1, #-64]!
        style_list->skip_trans = 0;
    5198:	7973      	ldrb	r3, [r6, #5]
    519a:	f36f 0382 	bfc	r3, #2, #1
    519e:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
    51a0:	2204      	movs	r2, #4
    51a2:	a80c      	add	r0, sp, #48	; 0x30
    51a4:	4b52      	ldr	r3, [pc, #328]	; (52f0 <lv_obj_set_state+0x4b4>)
    51a6:	4798      	blx	r3
    51a8:	2800      	cmp	r0, #0
    51aa:	f43f aed2 	beq.w	4f52 <lv_obj_set_state+0x116>
        obj->state = prev_state;
    51ae:	f88a 803d 	strb.w	r8, [sl, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
    51b2:	4622      	mov	r2, r4
    51b4:	9903      	ldr	r1, [sp, #12]
    51b6:	4650      	mov	r0, sl
    51b8:	47b8      	blx	r7
    51ba:	4606      	mov	r6, r0
    51bc:	900c      	str	r0, [sp, #48]	; 0x30
        obj->state = new_state;
    51be:	f88a 903d 	strb.w	r9, [sl, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
    51c2:	4602      	mov	r2, r0
    51c4:	4621      	mov	r1, r4
    51c6:	9804      	ldr	r0, [sp, #16]
    51c8:	4b4a      	ldr	r3, [pc, #296]	; (52f4 <lv_obj_set_state+0x4b8>)
    51ca:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
    51cc:	484a      	ldr	r0, [pc, #296]	; (52f8 <lv_obj_set_state+0x4bc>)
    51ce:	4b4b      	ldr	r3, [pc, #300]	; (52fc <lv_obj_set_state+0x4c0>)
    51d0:	4798      	blx	r3
    51d2:	4607      	mov	r7, r0
        LV_ASSERT_MEM(tr);
    51d4:	4b4a      	ldr	r3, [pc, #296]	; (5300 <lv_obj_set_state+0x4c4>)
    51d6:	4798      	blx	r3
    51d8:	b130      	cbz	r0, 51e8 <lv_obj_set_state+0x3ac>
        if(tr == NULL) return NULL;
    51da:	2f00      	cmp	r7, #0
    51dc:	f43f aeb9 	beq.w	4f52 <lv_obj_set_state+0x116>
        tr->start_value._ptr = p1;
    51e0:	60be      	str	r6, [r7, #8]
        tr->end_value._ptr = p2;
    51e2:	f8c7 b00c 	str.w	fp, [r7, #12]
    51e6:	e688      	b.n	4efa <lv_obj_set_state+0xbe>
        LV_ASSERT_MEM(tr);
    51e8:	4b46      	ldr	r3, [pc, #280]	; (5304 <lv_obj_set_state+0x4c8>)
    51ea:	9300      	str	r3, [sp, #0]
    51ec:	f640 62ef 	movw	r2, #3823	; 0xeef
    51f0:	4945      	ldr	r1, [pc, #276]	; (5308 <lv_obj_set_state+0x4cc>)
    51f2:	2003      	movs	r0, #3
    51f4:	4c45      	ldr	r4, [pc, #276]	; (530c <lv_obj_set_state+0x4d0>)
    51f6:	47a0      	blx	r4
    51f8:	463a      	mov	r2, r7
    51fa:	2300      	movs	r3, #0
    51fc:	4844      	ldr	r0, [pc, #272]	; (5310 <lv_obj_set_state+0x4d4>)
    51fe:	4945      	ldr	r1, [pc, #276]	; (5314 <lv_obj_set_state+0x4d8>)
    5200:	4788      	blx	r1
    5202:	e7fe      	b.n	5202 <lv_obj_set_state+0x3c6>
    5204:	9b06      	ldr	r3, [sp, #24]
    5206:	3301      	adds	r3, #1
    5208:	9306      	str	r3, [sp, #24]
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
    520a:	2b40      	cmp	r3, #64	; 0x40
    520c:	d045      	beq.n	529a <lv_obj_set_state+0x45e>
    520e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5212:	9303      	str	r3, [sp, #12]
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
    5214:	4619      	mov	r1, r3
    5216:	4650      	mov	r0, sl
    5218:	4b3f      	ldr	r3, [pc, #252]	; (5318 <lv_obj_set_state+0x4dc>)
    521a:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
    521c:	9007      	str	r0, [sp, #28]
    521e:	2800      	cmp	r0, #0
    5220:	d03b      	beq.n	529a <lv_obj_set_state+0x45e>
        if(style_list->ignore_trans) continue;
    5222:	7943      	ldrb	r3, [r0, #5]
    5224:	f013 0f08 	tst.w	r3, #8
    5228:	d1ec      	bne.n	5204 <lv_obj_set_state+0x3c8>
    522a:	22b0      	movs	r2, #176	; 0xb0
    522c:	9c03      	ldr	r4, [sp, #12]
    522e:	4621      	mov	r1, r4
    5230:	4650      	mov	r0, sl
    5232:	47a8      	blx	r5
    5234:	900a      	str	r0, [sp, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
    5236:	22b1      	movs	r2, #177	; 0xb1
    5238:	4621      	mov	r1, r4
    523a:	4650      	mov	r0, sl
    523c:	47a8      	blx	r5
    523e:	9009      	str	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
#if LV_USE_ANIMATION
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
    5240:	22be      	movs	r2, #190	; 0xbe
    5242:	4621      	mov	r1, r4
    5244:	4650      	mov	r0, sl
    5246:	4b29      	ldr	r3, [pc, #164]	; (52ec <lv_obj_set_state+0x4b0>)
    5248:	4798      	blx	r3
    524a:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
    524c:	22b2      	movs	r2, #178	; 0xb2
    524e:	4621      	mov	r1, r4
    5250:	4650      	mov	r0, sl
    5252:	47a8      	blx	r5
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
    5254:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
    5258:	22b3      	movs	r2, #179	; 0xb3
    525a:	4621      	mov	r1, r4
    525c:	4650      	mov	r0, sl
    525e:	47a8      	blx	r5
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
    5260:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
    5264:	22b4      	movs	r2, #180	; 0xb4
    5266:	4621      	mov	r1, r4
    5268:	4650      	mov	r0, sl
    526a:	47a8      	blx	r5
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
    526c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
    5270:	22b5      	movs	r2, #181	; 0xb5
    5272:	4621      	mov	r1, r4
    5274:	4650      	mov	r0, sl
    5276:	47a8      	blx	r5
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
    5278:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
    527c:	22b6      	movs	r2, #182	; 0xb6
    527e:	4621      	mov	r1, r4
    5280:	4650      	mov	r0, sl
    5282:	47a8      	blx	r5
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
    5284:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
    5288:	22b7      	movs	r2, #183	; 0xb7
    528a:	4621      	mov	r1, r4
    528c:	4650      	mov	r0, sl
    528e:	47a8      	blx	r5
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
    5290:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    5294:	ab0d      	add	r3, sp, #52	; 0x34
    5296:	9305      	str	r3, [sp, #20]
    5298:	e660      	b.n	4f5c <lv_obj_set_state+0x120>
    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
    529a:	21ff      	movs	r1, #255	; 0xff
    529c:	4650      	mov	r0, sl
    529e:	4b1f      	ldr	r3, [pc, #124]	; (531c <lv_obj_set_state+0x4e0>)
    52a0:	4798      	blx	r3
}
    52a2:	b021      	add	sp, #132	; 0x84
    52a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
    52a8:	4650      	mov	r0, sl
    52aa:	4e1d      	ldr	r6, [pc, #116]	; (5320 <lv_obj_set_state+0x4e4>)
    52ac:	47b0      	blx	r6
    52ae:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    52b2:	f340 074f 	sbfx	r7, r0, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
    52b6:	4650      	mov	r0, sl
    52b8:	47b0      	blx	r6
    52ba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    52be:	f340 034f 	sbfx	r3, r0, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    52c2:	1c5e      	adds	r6, r3, #1
    52c4:	1c7a      	adds	r2, r7, #1
    52c6:	4296      	cmp	r6, r2
    52c8:	bfa8      	it	ge
    52ca:	4616      	movge	r6, r2
    52cc:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
    52ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
    52d2:	4593      	cmp	fp, r2
    52d4:	f47f ae03 	bne.w	4ede <lv_obj_set_state+0xa2>
    52d8:	f103 0b01 	add.w	fp, r3, #1
    52dc:	3701      	adds	r7, #1
    52de:	45bb      	cmp	fp, r7
    52e0:	bfa8      	it	ge
    52e2:	46bb      	movge	fp, r7
    52e4:	fa0f fb8b 	sxth.w	fp, fp
    52e8:	e5f9      	b.n	4ede <lv_obj_set_state+0xa2>
    52ea:	4770      	bx	lr
    52ec:	00004d29 	.word	0x00004d29
    52f0:	0001af0d 	.word	0x0001af0d
    52f4:	00007241 	.word	0x00007241
    52f8:	20006d58 	.word	0x20006d58
    52fc:	000124b9 	.word	0x000124b9
    5300:	0000298d 	.word	0x0000298d
    5304:	0001bbc8 	.word	0x0001bbc8
    5308:	0001bcc0 	.word	0x0001bcc0
    530c:	00012805 	.word	0x00012805
    5310:	0001b4bc 	.word	0x0001b4bc
    5314:	00002995 	.word	0x00002995
    5318:	00003685 	.word	0x00003685
    531c:	00004121 	.word	0x00004121
    5320:	000035e5 	.word	0x000035e5

00005324 <lv_obj_add_state>:
{
    5324:	b530      	push	{r4, r5, lr}
    5326:	b083      	sub	sp, #12
    5328:	4605      	mov	r5, r0
    532a:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    532c:	4b0d      	ldr	r3, [pc, #52]	; (5364 <lv_obj_add_state+0x40>)
    532e:	4798      	blx	r3
    5330:	b150      	cbz	r0, 5348 <lv_obj_add_state+0x24>
    lv_state_t new_state = obj->state | state;
    5332:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    5336:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
    533a:	428b      	cmp	r3, r1
    533c:	d002      	beq.n	5344 <lv_obj_add_state+0x20>
        lv_obj_set_state(obj, new_state);
    533e:	4628      	mov	r0, r5
    5340:	4b09      	ldr	r3, [pc, #36]	; (5368 <lv_obj_add_state+0x44>)
    5342:	4798      	blx	r3
}
    5344:	b003      	add	sp, #12
    5346:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    5348:	4b08      	ldr	r3, [pc, #32]	; (536c <lv_obj_add_state+0x48>)
    534a:	9300      	str	r3, [sp, #0]
    534c:	f240 627e 	movw	r2, #1662	; 0x67e
    5350:	4907      	ldr	r1, [pc, #28]	; (5370 <lv_obj_add_state+0x4c>)
    5352:	2003      	movs	r0, #3
    5354:	4c07      	ldr	r4, [pc, #28]	; (5374 <lv_obj_add_state+0x50>)
    5356:	47a0      	blx	r4
    5358:	462a      	mov	r2, r5
    535a:	2300      	movs	r3, #0
    535c:	4806      	ldr	r0, [pc, #24]	; (5378 <lv_obj_add_state+0x54>)
    535e:	4907      	ldr	r1, [pc, #28]	; (537c <lv_obj_add_state+0x58>)
    5360:	4788      	blx	r1
    5362:	e7fe      	b.n	5362 <lv_obj_add_state+0x3e>
    5364:	0000298d 	.word	0x0000298d
    5368:	00004e3d 	.word	0x00004e3d
    536c:	0001bbd8 	.word	0x0001bbd8
    5370:	0001bcc0 	.word	0x0001bcc0
    5374:	00012805 	.word	0x00012805
    5378:	0001bd20 	.word	0x0001bd20
    537c:	00002995 	.word	0x00002995

00005380 <lv_obj_clear_state>:
{
    5380:	b530      	push	{r4, r5, lr}
    5382:	b083      	sub	sp, #12
    5384:	4605      	mov	r5, r0
    5386:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    5388:	4b0d      	ldr	r3, [pc, #52]	; (53c0 <lv_obj_clear_state+0x40>)
    538a:	4798      	blx	r3
    538c:	b150      	cbz	r0, 53a4 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
    538e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    5392:	ea23 0104 	bic.w	r1, r3, r4
    if(obj->state != new_state) {
    5396:	428b      	cmp	r3, r1
    5398:	d002      	beq.n	53a0 <lv_obj_clear_state+0x20>
        lv_obj_set_state(obj, new_state);
    539a:	4628      	mov	r0, r5
    539c:	4b09      	ldr	r3, [pc, #36]	; (53c4 <lv_obj_clear_state+0x44>)
    539e:	4798      	blx	r3
}
    53a0:	b003      	add	sp, #12
    53a2:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    53a4:	4b08      	ldr	r3, [pc, #32]	; (53c8 <lv_obj_clear_state+0x48>)
    53a6:	9300      	str	r3, [sp, #0]
    53a8:	f240 628f 	movw	r2, #1679	; 0x68f
    53ac:	4907      	ldr	r1, [pc, #28]	; (53cc <lv_obj_clear_state+0x4c>)
    53ae:	2003      	movs	r0, #3
    53b0:	4c07      	ldr	r4, [pc, #28]	; (53d0 <lv_obj_clear_state+0x50>)
    53b2:	47a0      	blx	r4
    53b4:	462a      	mov	r2, r5
    53b6:	2300      	movs	r3, #0
    53b8:	4806      	ldr	r0, [pc, #24]	; (53d4 <lv_obj_clear_state+0x54>)
    53ba:	4907      	ldr	r1, [pc, #28]	; (53d8 <lv_obj_clear_state+0x58>)
    53bc:	4788      	blx	r1
    53be:	e7fe      	b.n	53be <lv_obj_clear_state+0x3e>
    53c0:	0000298d 	.word	0x0000298d
    53c4:	00004e3d 	.word	0x00004e3d
    53c8:	0001bbec 	.word	0x0001bbec
    53cc:	0001bcc0 	.word	0x0001bcc0
    53d0:	00012805 	.word	0x00012805
    53d4:	0001bd20 	.word	0x0001bd20
    53d8:	00002995 	.word	0x00002995

000053dc <lv_obj_get_signal_cb>:
{
    53dc:	b530      	push	{r4, r5, lr}
    53de:	b083      	sub	sp, #12
    53e0:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    53e2:	4b0a      	ldr	r3, [pc, #40]	; (540c <lv_obj_get_signal_cb+0x30>)
    53e4:	4798      	blx	r3
    53e6:	b110      	cbz	r0, 53ee <lv_obj_get_signal_cb+0x12>
}
    53e8:	69e0      	ldr	r0, [r4, #28]
    53ea:	b003      	add	sp, #12
    53ec:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    53ee:	4b08      	ldr	r3, [pc, #32]	; (5410 <lv_obj_get_signal_cb+0x34>)
    53f0:	9300      	str	r3, [sp, #0]
    53f2:	f640 22f5 	movw	r2, #2805	; 0xaf5
    53f6:	4907      	ldr	r1, [pc, #28]	; (5414 <lv_obj_get_signal_cb+0x38>)
    53f8:	2003      	movs	r0, #3
    53fa:	4d07      	ldr	r5, [pc, #28]	; (5418 <lv_obj_get_signal_cb+0x3c>)
    53fc:	47a8      	blx	r5
    53fe:	4622      	mov	r2, r4
    5400:	2300      	movs	r3, #0
    5402:	4806      	ldr	r0, [pc, #24]	; (541c <lv_obj_get_signal_cb+0x40>)
    5404:	4906      	ldr	r1, [pc, #24]	; (5420 <lv_obj_get_signal_cb+0x44>)
    5406:	4788      	blx	r1
    5408:	e7fe      	b.n	5408 <lv_obj_get_signal_cb+0x2c>
    540a:	bf00      	nop
    540c:	0000298d 	.word	0x0000298d
    5410:	0001bc00 	.word	0x0001bc00
    5414:	0001bcc0 	.word	0x0001bcc0
    5418:	00012805 	.word	0x00012805
    541c:	0001bd20 	.word	0x0001bd20
    5420:	00002995 	.word	0x00002995

00005424 <lv_obj_get_ext_attr>:
{
    5424:	b530      	push	{r4, r5, lr}
    5426:	b083      	sub	sp, #12
    5428:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    542a:	4b0a      	ldr	r3, [pc, #40]	; (5454 <lv_obj_get_ext_attr+0x30>)
    542c:	4798      	blx	r3
    542e:	b110      	cbz	r0, 5436 <lv_obj_get_ext_attr+0x12>
}
    5430:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5432:	b003      	add	sp, #12
    5434:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    5436:	4b08      	ldr	r3, [pc, #32]	; (5458 <lv_obj_get_ext_attr+0x34>)
    5438:	9300      	str	r3, [sp, #0]
    543a:	f640 321e 	movw	r2, #2846	; 0xb1e
    543e:	4907      	ldr	r1, [pc, #28]	; (545c <lv_obj_get_ext_attr+0x38>)
    5440:	2003      	movs	r0, #3
    5442:	4d07      	ldr	r5, [pc, #28]	; (5460 <lv_obj_get_ext_attr+0x3c>)
    5444:	47a8      	blx	r5
    5446:	4622      	mov	r2, r4
    5448:	2300      	movs	r3, #0
    544a:	4806      	ldr	r0, [pc, #24]	; (5464 <lv_obj_get_ext_attr+0x40>)
    544c:	4906      	ldr	r1, [pc, #24]	; (5468 <lv_obj_get_ext_attr+0x44>)
    544e:	4788      	blx	r1
    5450:	e7fe      	b.n	5450 <lv_obj_get_ext_attr+0x2c>
    5452:	bf00      	nop
    5454:	0000298d 	.word	0x0000298d
    5458:	0001bc44 	.word	0x0001bc44
    545c:	0001bcc0 	.word	0x0001bcc0
    5460:	00012805 	.word	0x00012805
    5464:	0001bd20 	.word	0x0001bd20
    5468:	00002995 	.word	0x00002995

0000546c <lv_obj_get_group>:
{
    546c:	b530      	push	{r4, r5, lr}
    546e:	b083      	sub	sp, #12
    5470:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    5472:	4b0a      	ldr	r3, [pc, #40]	; (549c <lv_obj_get_group+0x30>)
    5474:	4798      	blx	r3
    5476:	b110      	cbz	r0, 547e <lv_obj_get_group+0x12>
}
    5478:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    547a:	b003      	add	sp, #12
    547c:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    547e:	4b08      	ldr	r3, [pc, #32]	; (54a0 <lv_obj_get_group+0x34>)
    5480:	9300      	str	r3, [sp, #0]
    5482:	f640 326f 	movw	r2, #2927	; 0xb6f
    5486:	4907      	ldr	r1, [pc, #28]	; (54a4 <lv_obj_get_group+0x38>)
    5488:	2003      	movs	r0, #3
    548a:	4d07      	ldr	r5, [pc, #28]	; (54a8 <lv_obj_get_group+0x3c>)
    548c:	47a8      	blx	r5
    548e:	4622      	mov	r2, r4
    5490:	2300      	movs	r3, #0
    5492:	4806      	ldr	r0, [pc, #24]	; (54ac <lv_obj_get_group+0x40>)
    5494:	4906      	ldr	r1, [pc, #24]	; (54b0 <lv_obj_get_group+0x44>)
    5496:	4788      	blx	r1
    5498:	e7fe      	b.n	5498 <lv_obj_get_group+0x2c>
    549a:	bf00      	nop
    549c:	0000298d 	.word	0x0000298d
    54a0:	0001bc68 	.word	0x0001bc68
    54a4:	0001bcc0 	.word	0x0001bcc0
    54a8:	00012805 	.word	0x00012805
    54ac:	0001bd20 	.word	0x0001bd20
    54b0:	00002995 	.word	0x00002995

000054b4 <obj_del_core>:
{
    54b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54b8:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
    54ba:	2200      	movs	r2, #0
    54bc:	2115      	movs	r1, #21
    54be:	4b3c      	ldr	r3, [pc, #240]	; (55b0 <obj_del_core+0xfc>)
    54c0:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
    54c2:	4628      	mov	r0, r5
    54c4:	4b3b      	ldr	r3, [pc, #236]	; (55b4 <obj_del_core+0x100>)
    54c6:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
    54c8:	4607      	mov	r7, r0
    54ca:	b110      	cbz	r0, 54d2 <obj_del_core+0x1e>
    54cc:	4628      	mov	r0, r5
    54ce:	4b3a      	ldr	r3, [pc, #232]	; (55b8 <obj_del_core+0x104>)
    54d0:	4798      	blx	r3
    lv_anim_del(obj, NULL);
    54d2:	2100      	movs	r1, #0
    54d4:	4628      	mov	r0, r5
    54d6:	4b39      	ldr	r3, [pc, #228]	; (55bc <obj_del_core+0x108>)
    54d8:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
    54da:	2300      	movs	r3, #0
    54dc:	22ff      	movs	r2, #255	; 0xff
    54de:	4611      	mov	r1, r2
    54e0:	4628      	mov	r0, r5
    54e2:	4c37      	ldr	r4, [pc, #220]	; (55c0 <obj_del_core+0x10c>)
    54e4:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
    54e6:	f105 0804 	add.w	r8, r5, #4
    54ea:	4640      	mov	r0, r8
    54ec:	4b35      	ldr	r3, [pc, #212]	; (55c4 <obj_del_core+0x110>)
    54ee:	4798      	blx	r3
    while(i != NULL) {
    54f0:	4604      	mov	r4, r0
    54f2:	b158      	cbz	r0, 550c <obj_del_core+0x58>
        i_next = _lv_ll_get_next(&(obj->child_ll), i);
    54f4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 55e0 <obj_del_core+0x12c>
    54f8:	4621      	mov	r1, r4
    54fa:	4640      	mov	r0, r8
    54fc:	47c8      	blx	r9
    54fe:	4606      	mov	r6, r0
        obj_del_core(i);
    5500:	4620      	mov	r0, r4
    5502:	f7ff ffd7 	bl	54b4 <obj_del_core>
        i = i_next;
    5506:	4634      	mov	r4, r6
    while(i != NULL) {
    5508:	2e00      	cmp	r6, #0
    550a:	d1f5      	bne.n	54f8 <obj_del_core+0x44>

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
    550c:	4b2e      	ldr	r3, [pc, #184]	; (55c8 <obj_del_core+0x114>)
    550e:	685b      	ldr	r3, [r3, #4]

    while(t) {
    5510:	b13b      	cbz	r3, 5522 <obj_del_core+0x6e>
        if(t->obj == obj) t->deleted = true;
    5512:	2101      	movs	r1, #1
    5514:	681a      	ldr	r2, [r3, #0]
    5516:	4295      	cmp	r5, r2
    5518:	bf08      	it	eq
    551a:	7119      	strbeq	r1, [r3, #4]
        t = t->prev;
    551c:	689b      	ldr	r3, [r3, #8]
    while(t) {
    551e:	2b00      	cmp	r3, #0
    5520:	d1f8      	bne.n	5514 <obj_del_core+0x60>
    lv_indev_t * indev = lv_indev_get_next(NULL);
    5522:	2000      	movs	r0, #0
    5524:	4b29      	ldr	r3, [pc, #164]	; (55cc <obj_del_core+0x118>)
    5526:	4798      	blx	r3
    while(indev) {
    5528:	4604      	mov	r4, r0
    552a:	b310      	cbz	r0, 5572 <obj_del_core+0xbe>
            lv_indev_reset(indev, obj);
    552c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 55e4 <obj_del_core+0x130>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
    5530:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 55e8 <obj_del_core+0x134>
        indev = lv_indev_get_next(indev);
    5534:	4e25      	ldr	r6, [pc, #148]	; (55cc <obj_del_core+0x118>)
    5536:	e00e      	b.n	5556 <obj_del_core+0xa2>
            lv_indev_reset(indev, obj);
    5538:	4629      	mov	r1, r5
    553a:	4620      	mov	r0, r4
    553c:	47c0      	blx	r8
        if(indev->proc.types.pointer.last_pressed == obj) {
    553e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5540:	429d      	cmp	r5, r3
            indev->proc.types.pointer.last_pressed = NULL;
    5542:	bf04      	itt	eq
    5544:	2300      	moveq	r3, #0
    5546:	63e3      	streq	r3, [r4, #60]	; 0x3c
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
    5548:	6da3      	ldr	r3, [r4, #88]	; 0x58
    554a:	429f      	cmp	r7, r3
    554c:	d00a      	beq.n	5564 <obj_del_core+0xb0>
        indev = lv_indev_get_next(indev);
    554e:	4620      	mov	r0, r4
    5550:	47b0      	blx	r6
    while(indev) {
    5552:	4604      	mov	r4, r0
    5554:	b168      	cbz	r0, 5572 <obj_del_core+0xbe>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
    5556:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5558:	429d      	cmp	r5, r3
    555a:	d0ed      	beq.n	5538 <obj_del_core+0x84>
    555c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    555e:	429d      	cmp	r5, r3
    5560:	d1ed      	bne.n	553e <obj_del_core+0x8a>
    5562:	e7e9      	b.n	5538 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
    5564:	47c8      	blx	r9
    5566:	4285      	cmp	r5, r0
    5568:	d1f1      	bne.n	554e <obj_del_core+0x9a>
            lv_indev_reset(indev, obj);
    556a:	4629      	mov	r1, r5
    556c:	4620      	mov	r0, r4
    556e:	47c0      	blx	r8
    5570:	e7ed      	b.n	554e <obj_del_core+0x9a>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
    5572:	69eb      	ldr	r3, [r5, #28]
    5574:	2200      	movs	r2, #0
    5576:	4611      	mov	r1, r2
    5578:	4628      	mov	r0, r5
    557a:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    557c:	4628      	mov	r0, r5
    557e:	4b14      	ldr	r3, [pc, #80]	; (55d0 <obj_del_core+0x11c>)
    5580:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
    5582:	b160      	cbz	r0, 559e <obj_del_core+0xea>
        _lv_ll_remove(&(par->child_ll), obj);
    5584:	4629      	mov	r1, r5
    5586:	3004      	adds	r0, #4
    5588:	4b12      	ldr	r3, [pc, #72]	; (55d4 <obj_del_core+0x120>)
    558a:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
    558c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    558e:	b108      	cbz	r0, 5594 <obj_del_core+0xe0>
    5590:	4b11      	ldr	r3, [pc, #68]	; (55d8 <obj_del_core+0x124>)
    5592:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
    5594:	4628      	mov	r0, r5
    5596:	4b10      	ldr	r3, [pc, #64]	; (55d8 <obj_del_core+0x124>)
    5598:	4798      	blx	r3
    559a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
    559e:	4628      	mov	r0, r5
    55a0:	4b0e      	ldr	r3, [pc, #56]	; (55dc <obj_del_core+0x128>)
    55a2:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
    55a4:	4629      	mov	r1, r5
    55a6:	3030      	adds	r0, #48	; 0x30
    55a8:	4b0a      	ldr	r3, [pc, #40]	; (55d4 <obj_del_core+0x120>)
    55aa:	4798      	blx	r3
    55ac:	e7ee      	b.n	558c <obj_del_core+0xd8>
    55ae:	bf00      	nop
    55b0:	00003155 	.word	0x00003155
    55b4:	0000546d 	.word	0x0000546d
    55b8:	00002d55 	.word	0x00002d55
    55bc:	000118d1 	.word	0x000118d1
    55c0:	000036b1 	.word	0x000036b1
    55c4:	00012551 	.word	0x00012551
    55c8:	2000267c 	.word	0x2000267c
    55cc:	000115c9 	.word	0x000115c9
    55d0:	00003305 	.word	0x00003305
    55d4:	0001263d 	.word	0x0001263d
    55d8:	00012a6d 	.word	0x00012a6d
    55dc:	000033a9 	.word	0x000033a9
    55e0:	00012565 	.word	0x00012565
    55e4:	00002e51 	.word	0x00002e51
    55e8:	00002edd 	.word	0x00002edd

000055ec <lv_obj_del>:
{
    55ec:	b570      	push	{r4, r5, r6, lr}
    55ee:	b082      	sub	sp, #8
    55f0:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    55f2:	4b19      	ldr	r3, [pc, #100]	; (5658 <lv_obj_del+0x6c>)
    55f4:	4798      	blx	r3
    55f6:	b968      	cbnz	r0, 5614 <lv_obj_del+0x28>
    55f8:	4b18      	ldr	r3, [pc, #96]	; (565c <lv_obj_del+0x70>)
    55fa:	9300      	str	r3, [sp, #0]
    55fc:	f240 1293 	movw	r2, #403	; 0x193
    5600:	4917      	ldr	r1, [pc, #92]	; (5660 <lv_obj_del+0x74>)
    5602:	2003      	movs	r0, #3
    5604:	4d17      	ldr	r5, [pc, #92]	; (5664 <lv_obj_del+0x78>)
    5606:	47a8      	blx	r5
    5608:	4622      	mov	r2, r4
    560a:	2300      	movs	r3, #0
    560c:	4816      	ldr	r0, [pc, #88]	; (5668 <lv_obj_del+0x7c>)
    560e:	4917      	ldr	r1, [pc, #92]	; (566c <lv_obj_del+0x80>)
    5610:	4788      	blx	r1
    5612:	e7fe      	b.n	5612 <lv_obj_del+0x26>
    lv_obj_invalidate(obj);
    5614:	4620      	mov	r0, r4
    5616:	4b16      	ldr	r3, [pc, #88]	; (5670 <lv_obj_del+0x84>)
    5618:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
    561a:	4620      	mov	r0, r4
    561c:	4b15      	ldr	r3, [pc, #84]	; (5674 <lv_obj_del+0x88>)
    561e:	4798      	blx	r3
    if(par == NULL) {
    5620:	4605      	mov	r5, r0
    5622:	b140      	cbz	r0, 5636 <lv_obj_del+0x4a>
    obj_del_core(obj);
    5624:	4620      	mov	r0, r4
    5626:	4b14      	ldr	r3, [pc, #80]	; (5678 <lv_obj_del+0x8c>)
    5628:	4798      	blx	r3
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
    562a:	69eb      	ldr	r3, [r5, #28]
    562c:	2200      	movs	r2, #0
    562e:	2101      	movs	r1, #1
    5630:	4628      	mov	r0, r5
    5632:	4798      	blx	r3
    5634:	e00c      	b.n	5650 <lv_obj_del+0x64>
        disp = lv_obj_get_disp(obj);
    5636:	4620      	mov	r0, r4
    5638:	4b10      	ldr	r3, [pc, #64]	; (567c <lv_obj_del+0x90>)
    563a:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
    563c:	4605      	mov	r5, r0
    563e:	b138      	cbz	r0, 5650 <lv_obj_del+0x64>
        if(disp->act_scr == obj) act_scr_del = true;
    5640:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    obj_del_core(obj);
    5642:	4620      	mov	r0, r4
    5644:	4b0c      	ldr	r3, [pc, #48]	; (5678 <lv_obj_del+0x8c>)
    5646:	4798      	blx	r3
    if(act_scr_del)  {
    5648:	42b4      	cmp	r4, r6
    564a:	d101      	bne.n	5650 <lv_obj_del+0x64>
        disp->act_scr = NULL;
    564c:	2300      	movs	r3, #0
    564e:	63eb      	str	r3, [r5, #60]	; 0x3c
}
    5650:	2000      	movs	r0, #0
    5652:	b002      	add	sp, #8
    5654:	bd70      	pop	{r4, r5, r6, pc}
    5656:	bf00      	nop
    5658:	0000298d 	.word	0x0000298d
    565c:	0001bc7c 	.word	0x0001bc7c
    5660:	0001bcc0 	.word	0x0001bcc0
    5664:	00012805 	.word	0x00012805
    5668:	0001bd20 	.word	0x0001bd20
    566c:	00002995 	.word	0x00002995
    5670:	000039a9 	.word	0x000039a9
    5674:	00003305 	.word	0x00003305
    5678:	000054b5 	.word	0x000054b5
    567c:	000033a9 	.word	0x000033a9

00005680 <lv_obj_is_focused>:
{
    5680:	b530      	push	{r4, r5, lr}
    5682:	b083      	sub	sp, #12
    5684:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    5686:	4b0e      	ldr	r3, [pc, #56]	; (56c0 <lv_obj_is_focused+0x40>)
    5688:	4798      	blx	r3
    568a:	b148      	cbz	r0, 56a0 <lv_obj_is_focused+0x20>
    if(obj->group_p) {
    568c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    568e:	b1a8      	cbz	r0, 56bc <lv_obj_is_focused+0x3c>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
    5690:	4b0c      	ldr	r3, [pc, #48]	; (56c4 <lv_obj_is_focused+0x44>)
    5692:	4798      	blx	r3
    5694:	4284      	cmp	r4, r0
    5696:	bf14      	ite	ne
    5698:	2000      	movne	r0, #0
    569a:	2001      	moveq	r0, #1
}
    569c:	b003      	add	sp, #12
    569e:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
    56a0:	4b09      	ldr	r3, [pc, #36]	; (56c8 <lv_obj_is_focused+0x48>)
    56a2:	9300      	str	r3, [sp, #0]
    56a4:	f44f 6238 	mov.w	r2, #2944	; 0xb80
    56a8:	4908      	ldr	r1, [pc, #32]	; (56cc <lv_obj_is_focused+0x4c>)
    56aa:	2003      	movs	r0, #3
    56ac:	4d08      	ldr	r5, [pc, #32]	; (56d0 <lv_obj_is_focused+0x50>)
    56ae:	47a8      	blx	r5
    56b0:	4622      	mov	r2, r4
    56b2:	2300      	movs	r3, #0
    56b4:	4807      	ldr	r0, [pc, #28]	; (56d4 <lv_obj_is_focused+0x54>)
    56b6:	4908      	ldr	r1, [pc, #32]	; (56d8 <lv_obj_is_focused+0x58>)
    56b8:	4788      	blx	r1
    56ba:	e7fe      	b.n	56ba <lv_obj_is_focused+0x3a>
    return false;
    56bc:	2000      	movs	r0, #0
    56be:	e7ed      	b.n	569c <lv_obj_is_focused+0x1c>
    56c0:	0000298d 	.word	0x0000298d
    56c4:	00002e25 	.word	0x00002e25
    56c8:	0001bcac 	.word	0x0001bcac
    56cc:	0001bcc0 	.word	0x0001bcc0
    56d0:	00012805 	.word	0x00012805
    56d4:	0001bd20 	.word	0x0001bd20
    56d8:	00002995 	.word	0x00002995

000056dc <lv_obj_handle_get_type_signal>:
        if(buf->type[i] == NULL) break;
    56dc:	6803      	ldr	r3, [r0, #0]
    56de:	b17b      	cbz	r3, 5700 <lv_obj_handle_get_type_signal+0x24>
{
    56e0:	b410      	push	{r4}
    56e2:	1d02      	adds	r2, r0, #4
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    56e4:	2301      	movs	r3, #1
        if(buf->type[i] == NULL) break;
    56e6:	f852 4b04 	ldr.w	r4, [r2], #4
    56ea:	b11c      	cbz	r4, 56f4 <lv_obj_handle_get_type_signal+0x18>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    56ec:	3301      	adds	r3, #1
    56ee:	b2db      	uxtb	r3, r3
    56f0:	2b07      	cmp	r3, #7
    56f2:	d1f8      	bne.n	56e6 <lv_obj_handle_get_type_signal+0xa>
    buf->type[i] = name;
    56f4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    56f8:	2001      	movs	r0, #1
    56fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    56fe:	4770      	bx	lr
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
    5700:	2300      	movs	r3, #0
    buf->type[i] = name;
    5702:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
    5706:	2001      	movs	r0, #1
    5708:	4770      	bx	lr
	...

0000570c <lv_obj_init_draw_rect_dsc>:
{
    570c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5710:	4605      	mov	r5, r0
    5712:	460e      	mov	r6, r1
    5714:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    5716:	2201      	movs	r2, #1
    5718:	4ba8      	ldr	r3, [pc, #672]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    571a:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
    571c:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    571e:	f248 020c 	movw	r2, #32780	; 0x800c
    5722:	4631      	mov	r1, r6
    5724:	4628      	mov	r0, r5
    5726:	4ba6      	ldr	r3, [pc, #664]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    5728:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
    572a:	2805      	cmp	r0, #5
    572c:	d942      	bls.n	57b4 <lv_obj_init_draw_rect_dsc+0xa8>
    572e:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
    5730:	7b23      	ldrb	r3, [r4, #12]
    5732:	2b00      	cmp	r3, #0
    5734:	d149      	bne.n	57ca <lv_obj_init_draw_rect_dsc+0xbe>
    if(draw_dsc->border_opa != LV_OPA_TRANSP) {
    5736:	7d23      	ldrb	r3, [r4, #20]
    5738:	2b00      	cmp	r3, #0
    573a:	d176      	bne.n	582a <lv_obj_init_draw_rect_dsc+0x11e>
    if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
    573c:	7f23      	ldrb	r3, [r4, #28]
    573e:	2b00      	cmp	r3, #0
    5740:	f040 8098 	bne.w	5874 <lv_obj_init_draw_rect_dsc+0x168>
    if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
    5744:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    5748:	2b00      	cmp	r3, #0
    574a:	f040 80b8 	bne.w	58be <lv_obj_init_draw_rect_dsc+0x1b2>
    if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    574e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5752:	2b05      	cmp	r3, #5
    5754:	f200 8101 	bhi.w	595a <lv_obj_init_draw_rect_dsc+0x24e>
    if(draw_dsc->value_opa > LV_OPA_MIN) {
    5758:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    575c:	2b05      	cmp	r3, #5
    575e:	f200 8137 	bhi.w	59d0 <lv_obj_init_draw_rect_dsc+0x2c4>
    if(opa_scale < LV_OPA_MAX) {
    5762:	2ff9      	cmp	r7, #249	; 0xf9
    5764:	d824      	bhi.n	57b0 <lv_obj_init_draw_rect_dsc+0xa4>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
    5766:	b2bf      	uxth	r7, r7
    5768:	7b23      	ldrb	r3, [r4, #12]
    576a:	fb13 f307 	smulbb	r3, r3, r7
    576e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5772:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
    5774:	7d23      	ldrb	r3, [r4, #20]
    5776:	fb13 f307 	smulbb	r3, r3, r7
    577a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    577e:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
    5780:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5784:	fb13 f307 	smulbb	r3, r3, r7
    5788:	f3c3 2307 	ubfx	r3, r3, #8, #8
    578c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
    5790:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    5794:	fb13 f307 	smulbb	r3, r3, r7
    5798:	f3c3 2307 	ubfx	r3, r3, #8, #8
    579c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
    57a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    57a4:	fb13 f707 	smulbb	r7, r3, r7
    57a8:	f3c7 2707 	ubfx	r7, r7, #8, #8
    57ac:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    57b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
    57b4:	2300      	movs	r3, #0
    57b6:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
    57b8:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
    57ba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
    57be:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
    57c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
    57c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    57ca:	222c      	movs	r2, #44	; 0x2c
    57cc:	4631      	mov	r1, r6
    57ce:	4628      	mov	r0, r5
    57d0:	4b7b      	ldr	r3, [pc, #492]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    57d2:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
    57d4:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
    57d6:	2805      	cmp	r0, #5
    57d8:	d9ad      	bls.n	5736 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
    57da:	2229      	movs	r2, #41	; 0x29
    57dc:	4631      	mov	r1, r6
    57de:	4628      	mov	r0, r5
    57e0:	4b78      	ldr	r3, [pc, #480]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    57e2:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
    57e4:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
    57e6:	2223      	movs	r2, #35	; 0x23
    57e8:	4631      	mov	r1, r6
    57ea:	4628      	mov	r0, r5
    57ec:	4b73      	ldr	r3, [pc, #460]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    57ee:	4798      	blx	r3
    57f0:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
    57f2:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
    57f4:	b930      	cbnz	r0, 5804 <lv_obj_init_draw_rect_dsc+0xf8>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    57f6:	2220      	movs	r2, #32
    57f8:	4631      	mov	r1, r6
    57fa:	4628      	mov	r0, r5
    57fc:	4b6f      	ldr	r3, [pc, #444]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    57fe:	4798      	blx	r3
    5800:	7360      	strb	r0, [r4, #13]
    5802:	e798      	b.n	5736 <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
    5804:	222a      	movs	r2, #42	; 0x2a
    5806:	4631      	mov	r1, r6
    5808:	4628      	mov	r0, r5
    580a:	4b6e      	ldr	r3, [pc, #440]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    580c:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
    580e:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
    5810:	2221      	movs	r2, #33	; 0x21
    5812:	4631      	mov	r1, r6
    5814:	4628      	mov	r0, r5
    5816:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 59bc <lv_obj_init_draw_rect_dsc+0x2b0>
    581a:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
    581c:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
    581e:	2222      	movs	r2, #34	; 0x22
    5820:	4631      	mov	r1, r6
    5822:	4628      	mov	r0, r5
    5824:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
    5826:	8160      	strh	r0, [r4, #10]
    5828:	e7e5      	b.n	57f6 <lv_obj_init_draw_rect_dsc+0xea>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
    582a:	2230      	movs	r2, #48	; 0x30
    582c:	4631      	mov	r1, r6
    582e:	4628      	mov	r0, r5
    5830:	4b62      	ldr	r3, [pc, #392]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    5832:	4798      	blx	r3
        draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
    5834:	8220      	strh	r0, [r4, #16]
        if(draw_dsc->border_width) {
    5836:	2800      	cmp	r0, #0
    5838:	d080      	beq.n	573c <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
    583a:	223c      	movs	r2, #60	; 0x3c
    583c:	4631      	mov	r1, r6
    583e:	4628      	mov	r0, r5
    5840:	4b5f      	ldr	r3, [pc, #380]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    5842:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
    5844:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
    5846:	2805      	cmp	r0, #5
    5848:	d806      	bhi.n	5858 <lv_obj_init_draw_rect_dsc+0x14c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    584a:	2232      	movs	r2, #50	; 0x32
    584c:	4631      	mov	r1, r6
    584e:	4628      	mov	r0, r5
    5850:	4b5a      	ldr	r3, [pc, #360]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    5852:	4798      	blx	r3
    5854:	7560      	strb	r0, [r4, #21]
    5856:	e771      	b.n	573c <lv_obj_init_draw_rect_dsc+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
    5858:	2231      	movs	r2, #49	; 0x31
    585a:	4631      	mov	r1, r6
    585c:	4628      	mov	r0, r5
    585e:	4b57      	ldr	r3, [pc, #348]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    5860:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
    5862:	b2c0      	uxtb	r0, r0
    5864:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
    5866:	2239      	movs	r2, #57	; 0x39
    5868:	4631      	mov	r1, r6
    586a:	4628      	mov	r0, r5
    586c:	4b55      	ldr	r3, [pc, #340]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    586e:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
    5870:	81e0      	strh	r0, [r4, #14]
    5872:	e7ea      	b.n	584a <lv_obj_init_draw_rect_dsc+0x13e>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    5874:	2240      	movs	r2, #64	; 0x40
    5876:	4631      	mov	r1, r6
    5878:	4628      	mov	r0, r5
    587a:	4b50      	ldr	r3, [pc, #320]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    587c:	4798      	blx	r3
        draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
    587e:	8320      	strh	r0, [r4, #24]
        if(draw_dsc->outline_width) {
    5880:	2800      	cmp	r0, #0
    5882:	f43f af5f 	beq.w	5744 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    5886:	224c      	movs	r2, #76	; 0x4c
    5888:	4631      	mov	r1, r6
    588a:	4628      	mov	r0, r5
    588c:	4b4c      	ldr	r3, [pc, #304]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    588e:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
    5890:	7720      	strb	r0, [r4, #28]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
    5892:	2805      	cmp	r0, #5
    5894:	d806      	bhi.n	58a4 <lv_obj_init_draw_rect_dsc+0x198>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
    5896:	2242      	movs	r2, #66	; 0x42
    5898:	4631      	mov	r1, r6
    589a:	4628      	mov	r0, r5
    589c:	4b47      	ldr	r3, [pc, #284]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    589e:	4798      	blx	r3
    58a0:	7760      	strb	r0, [r4, #29]
    58a2:	e74f      	b.n	5744 <lv_obj_init_draw_rect_dsc+0x38>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    58a4:	2241      	movs	r2, #65	; 0x41
    58a6:	4631      	mov	r1, r6
    58a8:	4628      	mov	r0, r5
    58aa:	4b44      	ldr	r3, [pc, #272]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    58ac:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
    58ae:	8360      	strh	r0, [r4, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
    58b0:	2249      	movs	r2, #73	; 0x49
    58b2:	4631      	mov	r1, r6
    58b4:	4628      	mov	r0, r5
    58b6:	4b43      	ldr	r3, [pc, #268]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    58b8:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
    58ba:	82e0      	strh	r0, [r4, #22]
    58bc:	e7eb      	b.n	5896 <lv_obj_init_draw_rect_dsc+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
    58be:	226e      	movs	r2, #110	; 0x6e
    58c0:	4631      	mov	r1, r6
    58c2:	4628      	mov	r0, r5
    58c4:	4b40      	ldr	r3, [pc, #256]	; (59c8 <lv_obj_init_draw_rect_dsc+0x2bc>)
    58c6:	4798      	blx	r3
        draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
    58c8:	62e0      	str	r0, [r4, #44]	; 0x2c
        if(draw_dsc->pattern_image) {
    58ca:	2800      	cmp	r0, #0
    58cc:	f43f af3f 	beq.w	574e <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
    58d0:	226c      	movs	r2, #108	; 0x6c
    58d2:	4631      	mov	r1, r6
    58d4:	4628      	mov	r0, r5
    58d6:	4b3a      	ldr	r3, [pc, #232]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    58d8:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
    58da:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
    58de:	2805      	cmp	r0, #5
    58e0:	f67f af35 	bls.w	574e <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
    58e4:	226d      	movs	r2, #109	; 0x6d
    58e6:	4631      	mov	r1, r6
    58e8:	4628      	mov	r0, r5
    58ea:	4b35      	ldr	r3, [pc, #212]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    58ec:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
    58ee:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
    58f2:	2261      	movs	r2, #97	; 0x61
    58f4:	4631      	mov	r1, r6
    58f6:	4628      	mov	r0, r5
    58f8:	4b30      	ldr	r3, [pc, #192]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    58fa:	4798      	blx	r3
    58fc:	3000      	adds	r0, #0
    58fe:	bf18      	it	ne
    5900:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
    5902:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    5906:	f360 0300 	bfi	r3, r0, #0, #1
    590a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
    590e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5910:	4b2e      	ldr	r3, [pc, #184]	; (59cc <lv_obj_init_draw_rect_dsc+0x2c0>)
    5912:	4798      	blx	r3
    5914:	2802      	cmp	r0, #2
    5916:	d00b      	beq.n	5930 <lv_obj_init_draw_rect_dsc+0x224>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
    5918:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    591c:	2b05      	cmp	r3, #5
    591e:	d815      	bhi.n	594c <lv_obj_init_draw_rect_dsc+0x240>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
    5920:	2260      	movs	r2, #96	; 0x60
    5922:	4631      	mov	r1, r6
    5924:	4628      	mov	r0, r5
    5926:	4b25      	ldr	r3, [pc, #148]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    5928:	4798      	blx	r3
    592a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    592e:	e70e      	b.n	574e <lv_obj_init_draw_rect_dsc+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    5930:	2269      	movs	r2, #105	; 0x69
    5932:	4631      	mov	r1, r6
    5934:	4628      	mov	r0, r5
    5936:	4b23      	ldr	r3, [pc, #140]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    5938:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    593a:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    593c:	f248 028e 	movw	r2, #32910	; 0x808e
    5940:	4631      	mov	r1, r6
    5942:	4628      	mov	r0, r5
    5944:	4b20      	ldr	r3, [pc, #128]	; (59c8 <lv_obj_init_draw_rect_dsc+0x2bc>)
    5946:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
    5948:	6320      	str	r0, [r4, #48]	; 0x30
    594a:	e7e9      	b.n	5920 <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
    594c:	2269      	movs	r2, #105	; 0x69
    594e:	4631      	mov	r1, r6
    5950:	4628      	mov	r0, r5
    5952:	4b1c      	ldr	r3, [pc, #112]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    5954:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
    5956:	86a0      	strh	r0, [r4, #52]	; 0x34
    5958:	e7e2      	b.n	5920 <lv_obj_init_draw_rect_dsc+0x214>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    595a:	2250      	movs	r2, #80	; 0x50
    595c:	4631      	mov	r1, r6
    595e:	4628      	mov	r0, r5
    5960:	4b16      	ldr	r3, [pc, #88]	; (59bc <lv_obj_init_draw_rect_dsc+0x2b0>)
    5962:	4798      	blx	r3
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
    5964:	8420      	strh	r0, [r4, #32]
        if(draw_dsc->shadow_width) {
    5966:	2800      	cmp	r0, #0
    5968:	f43f aef6 	beq.w	5758 <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    596c:	225c      	movs	r2, #92	; 0x5c
    596e:	4631      	mov	r1, r6
    5970:	4628      	mov	r0, r5
    5972:	4b13      	ldr	r3, [pc, #76]	; (59c0 <lv_obj_init_draw_rect_dsc+0x2b4>)
    5974:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
    5976:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
    597a:	2805      	cmp	r0, #5
    597c:	f67f aeec 	bls.w	5758 <lv_obj_init_draw_rect_dsc+0x4c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    5980:	2251      	movs	r2, #81	; 0x51
    5982:	4631      	mov	r1, r6
    5984:	4628      	mov	r0, r5
    5986:	f8df 8034 	ldr.w	r8, [pc, #52]	; 59bc <lv_obj_init_draw_rect_dsc+0x2b0>
    598a:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
    598c:	8460      	strh	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    598e:	2252      	movs	r2, #82	; 0x52
    5990:	4631      	mov	r1, r6
    5992:	4628      	mov	r0, r5
    5994:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
    5996:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    5998:	2253      	movs	r2, #83	; 0x53
    599a:	4631      	mov	r1, r6
    599c:	4628      	mov	r0, r5
    599e:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
    59a0:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
    59a2:	2259      	movs	r2, #89	; 0x59
    59a4:	4631      	mov	r1, r6
    59a6:	4628      	mov	r0, r5
    59a8:	4b06      	ldr	r3, [pc, #24]	; (59c4 <lv_obj_init_draw_rect_dsc+0x2b8>)
    59aa:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
    59ac:	83e0      	strh	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
    59ae:	2254      	movs	r2, #84	; 0x54
    59b0:	4631      	mov	r1, r6
    59b2:	4628      	mov	r0, r5
    59b4:	47c0      	blx	r8
    59b6:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    59ba:	e6cd      	b.n	5758 <lv_obj_init_draw_rect_dsc+0x4c>
    59bc:	00004b5d 	.word	0x00004b5d
    59c0:	00004c95 	.word	0x00004c95
    59c4:	00004c09 	.word	0x00004c09
    59c8:	00004d29 	.word	0x00004d29
    59cc:	00009f11 	.word	0x00009f11
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    59d0:	227f      	movs	r2, #127	; 0x7f
    59d2:	4631      	mov	r1, r6
    59d4:	4628      	mov	r0, r5
    59d6:	4b22      	ldr	r3, [pc, #136]	; (5a60 <lv_obj_init_draw_rect_dsc+0x354>)
    59d8:	4798      	blx	r3
        draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
    59da:	63e0      	str	r0, [r4, #60]	; 0x3c
        if(draw_dsc->value_str) {
    59dc:	2800      	cmp	r0, #0
    59de:	f43f aec0 	beq.w	5762 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    59e2:	227c      	movs	r2, #124	; 0x7c
    59e4:	4631      	mov	r1, r6
    59e6:	4628      	mov	r0, r5
    59e8:	4b1e      	ldr	r3, [pc, #120]	; (5a64 <lv_obj_init_draw_rect_dsc+0x358>)
    59ea:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
    59ec:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
    59f0:	2805      	cmp	r0, #5
    59f2:	f67f aeb6 	bls.w	5762 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    59f6:	2273      	movs	r2, #115	; 0x73
    59f8:	4631      	mov	r1, r6
    59fa:	4628      	mov	r0, r5
    59fc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 5a6c <lv_obj_init_draw_rect_dsc+0x360>
    5a00:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
    5a02:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    5a06:	2274      	movs	r2, #116	; 0x74
    5a08:	4631      	mov	r1, r6
    5a0a:	4628      	mov	r0, r5
    5a0c:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
    5a0e:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
    5a12:	2279      	movs	r2, #121	; 0x79
    5a14:	4631      	mov	r1, r6
    5a16:	4628      	mov	r0, r5
    5a18:	4b13      	ldr	r3, [pc, #76]	; (5a68 <lv_obj_init_draw_rect_dsc+0x35c>)
    5a1a:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
    5a1c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    5a20:	227e      	movs	r2, #126	; 0x7e
    5a22:	4631      	mov	r1, r6
    5a24:	4628      	mov	r0, r5
    5a26:	4b0e      	ldr	r3, [pc, #56]	; (5a60 <lv_obj_init_draw_rect_dsc+0x354>)
    5a28:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
    5a2a:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    5a2c:	2270      	movs	r2, #112	; 0x70
    5a2e:	4631      	mov	r1, r6
    5a30:	4628      	mov	r0, r5
    5a32:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
    5a34:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
    5a38:	2271      	movs	r2, #113	; 0x71
    5a3a:	4631      	mov	r1, r6
    5a3c:	4628      	mov	r0, r5
    5a3e:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
    5a40:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    5a44:	2275      	movs	r2, #117	; 0x75
    5a46:	4631      	mov	r1, r6
    5a48:	4628      	mov	r0, r5
    5a4a:	47c0      	blx	r8
    5a4c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
    5a50:	2272      	movs	r2, #114	; 0x72
    5a52:	4631      	mov	r1, r6
    5a54:	4628      	mov	r0, r5
    5a56:	47c0      	blx	r8
    5a58:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    5a5c:	e681      	b.n	5762 <lv_obj_init_draw_rect_dsc+0x56>
    5a5e:	bf00      	nop
    5a60:	00004d29 	.word	0x00004d29
    5a64:	00004c95 	.word	0x00004c95
    5a68:	00004c09 	.word	0x00004c09
    5a6c:	00004b5d 	.word	0x00004b5d

00005a70 <lv_obj_design>:
{
    5a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a74:	b098      	sub	sp, #96	; 0x60
    5a76:	4604      	mov	r4, r0
    5a78:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
    5a7a:	2a02      	cmp	r2, #2
    5a7c:	d008      	beq.n	5a90 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
    5a7e:	2a00      	cmp	r2, #0
    5a80:	d06c      	beq.n	5b5c <lv_obj_design+0xec>
    else if(mode == LV_DESIGN_DRAW_POST) {
    5a82:	2a01      	cmp	r2, #1
    5a84:	f000 80cc 	beq.w	5c20 <lv_obj_design+0x1b0>
    return LV_DESIGN_RES_OK;
    5a88:	2000      	movs	r0, #0
}
    5a8a:	b018      	add	sp, #96	; 0x60
    5a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    5a90:	2100      	movs	r1, #0
    5a92:	4b8e      	ldr	r3, [pc, #568]	; (5ccc <lv_obj_design+0x25c>)
    5a94:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
    5a96:	b108      	cbz	r0, 5a9c <lv_obj_design+0x2c>
    5a98:	2003      	movs	r0, #3
    5a9a:	e7f6      	b.n	5a8a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    5a9c:	2201      	movs	r2, #1
    5a9e:	2100      	movs	r1, #0
    5aa0:	4620      	mov	r0, r4
    5aa2:	4d8a      	ldr	r5, [pc, #552]	; (5ccc <lv_obj_design+0x25c>)
    5aa4:	47a8      	blx	r5
    5aa6:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    5aa8:	2204      	movs	r2, #4
    5aaa:	2100      	movs	r1, #0
    5aac:	4620      	mov	r0, r4
    5aae:	47a8      	blx	r5
    5ab0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    5ab2:	2205      	movs	r2, #5
    5ab4:	2100      	movs	r1, #0
    5ab6:	4620      	mov	r0, r4
    5ab8:	47a8      	blx	r5
    5aba:	f104 030f 	add.w	r3, r4, #15
    5abe:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    5ac2:	aa03      	add	r2, sp, #12
        *d8 = *s8;
    5ac4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5ac8:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    5acc:	429d      	cmp	r5, r3
    5ace:	d1f9      	bne.n	5ac4 <lv_obj_design+0x54>
        coords.x1 -= w;
    5ad0:	fa1f f888 	uxth.w	r8, r8
    5ad4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5ad8:	eba3 0308 	sub.w	r3, r3, r8
    5adc:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.x2 += w;
    5ae0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5ae4:	4498      	add	r8, r3
    5ae6:	f8ad 8010 	strh.w	r8, [sp, #16]
        coords.y1 -= h;
    5aea:	b280      	uxth	r0, r0
    5aec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5af0:	1a1b      	subs	r3, r3, r0
    5af2:	f8ad 300e 	strh.w	r3, [sp, #14]
        coords.y2 += h;
    5af6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    5afa:	4418      	add	r0, r3
    5afc:	f8ad 0012 	strh.w	r0, [sp, #18]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
    5b00:	463a      	mov	r2, r7
    5b02:	a903      	add	r1, sp, #12
    5b04:	4630      	mov	r0, r6
    5b06:	4b72      	ldr	r3, [pc, #456]	; (5cd0 <lv_obj_design+0x260>)
    5b08:	4798      	blx	r3
    5b0a:	b908      	cbnz	r0, 5b10 <lv_obj_design+0xa0>
    5b0c:	2002      	movs	r0, #2
    5b0e:	e7bc      	b.n	5a8a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
    5b10:	222c      	movs	r2, #44	; 0x2c
    5b12:	2100      	movs	r1, #0
    5b14:	4620      	mov	r0, r4
    5b16:	4b6f      	ldr	r3, [pc, #444]	; (5cd4 <lv_obj_design+0x264>)
    5b18:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
    5b1a:	28f9      	cmp	r0, #249	; 0xf9
    5b1c:	d801      	bhi.n	5b22 <lv_obj_design+0xb2>
    5b1e:	2002      	movs	r0, #2
    5b20:	e7b3      	b.n	5a8a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
    5b22:	2220      	movs	r2, #32
    5b24:	2100      	movs	r1, #0
    5b26:	4620      	mov	r0, r4
    5b28:	4b68      	ldr	r3, [pc, #416]	; (5ccc <lv_obj_design+0x25c>)
    5b2a:	4798      	blx	r3
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    5b2c:	b2c0      	uxtb	r0, r0
    5b2e:	b108      	cbz	r0, 5b34 <lv_obj_design+0xc4>
    5b30:	2002      	movs	r0, #2
    5b32:	e7aa      	b.n	5a8a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
    5b34:	2232      	movs	r2, #50	; 0x32
    5b36:	2100      	movs	r1, #0
    5b38:	4620      	mov	r0, r4
    5b3a:	4b64      	ldr	r3, [pc, #400]	; (5ccc <lv_obj_design+0x25c>)
    5b3c:	4798      	blx	r3
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
    5b3e:	b2c0      	uxtb	r0, r0
    5b40:	b108      	cbz	r0, 5b46 <lv_obj_design+0xd6>
    5b42:	2002      	movs	r0, #2
    5b44:	e7a1      	b.n	5a8a <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    5b46:	f248 020c 	movw	r2, #32780	; 0x800c
    5b4a:	2100      	movs	r1, #0
    5b4c:	4620      	mov	r0, r4
    5b4e:	4b61      	ldr	r3, [pc, #388]	; (5cd4 <lv_obj_design+0x264>)
    5b50:	4798      	blx	r3
        return  LV_DESIGN_RES_COVER;
    5b52:	28fa      	cmp	r0, #250	; 0xfa
    5b54:	bf34      	ite	cc
    5b56:	2002      	movcc	r0, #2
    5b58:	2001      	movcs	r0, #1
    5b5a:	e796      	b.n	5a8a <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
    5b5c:	a803      	add	r0, sp, #12
    5b5e:	4b5e      	ldr	r3, [pc, #376]	; (5cd8 <lv_obj_design+0x268>)
    5b60:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    5b62:	2233      	movs	r2, #51	; 0x33
    5b64:	2100      	movs	r1, #0
    5b66:	4620      	mov	r0, r4
    5b68:	4b58      	ldr	r3, [pc, #352]	; (5ccc <lv_obj_design+0x25c>)
    5b6a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    5b6c:	b110      	cbz	r0, 5b74 <lv_obj_design+0x104>
            draw_dsc.border_opa = LV_OPA_TRANSP;
    5b6e:	2300      	movs	r3, #0
    5b70:	f88d 3020 	strb.w	r3, [sp, #32]
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    5b74:	aa03      	add	r2, sp, #12
    5b76:	2100      	movs	r1, #0
    5b78:	4620      	mov	r0, r4
    5b7a:	4b58      	ldr	r3, [pc, #352]	; (5cdc <lv_obj_design+0x26c>)
    5b7c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    5b7e:	2204      	movs	r2, #4
    5b80:	2100      	movs	r1, #0
    5b82:	4620      	mov	r0, r4
    5b84:	4d51      	ldr	r5, [pc, #324]	; (5ccc <lv_obj_design+0x25c>)
    5b86:	47a8      	blx	r5
    5b88:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    5b8a:	2205      	movs	r2, #5
    5b8c:	2100      	movs	r1, #0
    5b8e:	4620      	mov	r0, r4
    5b90:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
    5b92:	f104 0710 	add.w	r7, r4, #16
    5b96:	f104 030f 	add.w	r3, r4, #15
    5b9a:	f104 0517 	add.w	r5, r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    5b9e:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    5ba0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5ba4:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    5ba8:	42ab      	cmp	r3, r5
    5baa:	d1f9      	bne.n	5ba0 <lv_obj_design+0x130>
        coords.x1 -= w;
    5bac:	fa1f f888 	uxth.w	r8, r8
    5bb0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5bb4:	eba3 0308 	sub.w	r3, r3, r8
    5bb8:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
    5bbc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5bc0:	4498      	add	r8, r3
    5bc2:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
    5bc6:	b280      	uxth	r0, r0
    5bc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5bcc:	1a1b      	subs	r3, r3, r0
    5bce:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
    5bd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5bd6:	4418      	add	r0, r3
    5bd8:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
    5bdc:	aa03      	add	r2, sp, #12
    5bde:	4631      	mov	r1, r6
    5be0:	a801      	add	r0, sp, #4
    5be2:	4b3f      	ldr	r3, [pc, #252]	; (5ce0 <lv_obj_design+0x270>)
    5be4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    5be6:	2202      	movs	r2, #2
    5be8:	2100      	movs	r1, #0
    5bea:	4620      	mov	r0, r4
    5bec:	4b37      	ldr	r3, [pc, #220]	; (5ccc <lv_obj_design+0x25c>)
    5bee:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    5bf0:	b908      	cbnz	r0, 5bf6 <lv_obj_design+0x186>
    return LV_DESIGN_RES_OK;
    5bf2:	2000      	movs	r0, #0
    5bf4:	e749      	b.n	5a8a <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
    5bf6:	201c      	movs	r0, #28
    5bf8:	4b3a      	ldr	r3, [pc, #232]	; (5ce4 <lv_obj_design+0x274>)
    5bfa:	4798      	blx	r3
    5bfc:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
    5bfe:	2201      	movs	r2, #1
    5c00:	2100      	movs	r1, #0
    5c02:	4620      	mov	r0, r4
    5c04:	4b31      	ldr	r3, [pc, #196]	; (5ccc <lv_obj_design+0x25c>)
    5c06:	4798      	blx	r3
            lv_draw_mask_radius_init(mp, &obj->coords, r, false);
    5c08:	2300      	movs	r3, #0
    5c0a:	4602      	mov	r2, r0
    5c0c:	4639      	mov	r1, r7
    5c0e:	4628      	mov	r0, r5
    5c10:	4e35      	ldr	r6, [pc, #212]	; (5ce8 <lv_obj_design+0x278>)
    5c12:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
    5c14:	f504 7118 	add.w	r1, r4, #608	; 0x260
    5c18:	4628      	mov	r0, r5
    5c1a:	4b34      	ldr	r3, [pc, #208]	; (5cec <lv_obj_design+0x27c>)
    5c1c:	4798      	blx	r3
    5c1e:	e7e8      	b.n	5bf2 <lv_obj_design+0x182>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
    5c20:	2202      	movs	r2, #2
    5c22:	2100      	movs	r1, #0
    5c24:	4b29      	ldr	r3, [pc, #164]	; (5ccc <lv_obj_design+0x25c>)
    5c26:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
    5c28:	b938      	cbnz	r0, 5c3a <lv_obj_design+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
    5c2a:	2233      	movs	r2, #51	; 0x33
    5c2c:	2100      	movs	r1, #0
    5c2e:	4620      	mov	r0, r4
    5c30:	4b26      	ldr	r3, [pc, #152]	; (5ccc <lv_obj_design+0x25c>)
    5c32:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
    5c34:	b940      	cbnz	r0, 5c48 <lv_obj_design+0x1d8>
    return LV_DESIGN_RES_OK;
    5c36:	2000      	movs	r0, #0
    5c38:	e727      	b.n	5a8a <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
    5c3a:	f504 7018 	add.w	r0, r4, #608	; 0x260
    5c3e:	4b2c      	ldr	r3, [pc, #176]	; (5cf0 <lv_obj_design+0x280>)
    5c40:	4798      	blx	r3
            _lv_mem_buf_release(param);
    5c42:	4b2c      	ldr	r3, [pc, #176]	; (5cf4 <lv_obj_design+0x284>)
    5c44:	4798      	blx	r3
    5c46:	e7f0      	b.n	5c2a <lv_obj_design+0x1ba>
            lv_draw_rect_dsc_init(&draw_dsc);
    5c48:	a803      	add	r0, sp, #12
    5c4a:	4b23      	ldr	r3, [pc, #140]	; (5cd8 <lv_obj_design+0x268>)
    5c4c:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
    5c4e:	2700      	movs	r7, #0
    5c50:	f88d 7018 	strb.w	r7, [sp, #24]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
    5c54:	f88d 7042 	strb.w	r7, [sp, #66]	; 0x42
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
    5c58:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
    5c5c:	aa03      	add	r2, sp, #12
    5c5e:	4639      	mov	r1, r7
    5c60:	4620      	mov	r0, r4
    5c62:	4b1e      	ldr	r3, [pc, #120]	; (5cdc <lv_obj_design+0x26c>)
    5c64:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    5c66:	2204      	movs	r2, #4
    5c68:	4639      	mov	r1, r7
    5c6a:	4620      	mov	r0, r4
    5c6c:	4d17      	ldr	r5, [pc, #92]	; (5ccc <lv_obj_design+0x25c>)
    5c6e:	47a8      	blx	r5
    5c70:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    5c72:	2205      	movs	r2, #5
    5c74:	4639      	mov	r1, r7
    5c76:	4620      	mov	r0, r4
    5c78:	47a8      	blx	r5
    5c7a:	f104 030f 	add.w	r3, r4, #15
    5c7e:	3417      	adds	r4, #23
    uint8_t * d8 = (uint8_t *)dst;
    5c80:	aa01      	add	r2, sp, #4
        *d8 = *s8;
    5c82:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    5c86:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    5c8a:	42a3      	cmp	r3, r4
    5c8c:	d1f9      	bne.n	5c82 <lv_obj_design+0x212>
            coords.x1 -= w;
    5c8e:	fa1f f388 	uxth.w	r3, r8
    5c92:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5c96:	1ad2      	subs	r2, r2, r3
    5c98:	f8ad 2004 	strh.w	r2, [sp, #4]
            coords.x2 += w;
    5c9c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    5ca0:	4413      	add	r3, r2
    5ca2:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 -= h;
    5ca6:	b280      	uxth	r0, r0
    5ca8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5cac:	1a1b      	subs	r3, r3, r0
    5cae:	f8ad 3006 	strh.w	r3, [sp, #6]
            coords.y2 += h;
    5cb2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5cb6:	4418      	add	r0, r3
    5cb8:	f8ad 000a 	strh.w	r0, [sp, #10]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
    5cbc:	aa03      	add	r2, sp, #12
    5cbe:	4631      	mov	r1, r6
    5cc0:	a801      	add	r0, sp, #4
    5cc2:	4b07      	ldr	r3, [pc, #28]	; (5ce0 <lv_obj_design+0x270>)
    5cc4:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
    5cc6:	2000      	movs	r0, #0
    5cc8:	e6df      	b.n	5a8a <lv_obj_design+0x1a>
    5cca:	bf00      	nop
    5ccc:	00004b5d 	.word	0x00004b5d
    5cd0:	00011d15 	.word	0x00011d15
    5cd4:	00004c95 	.word	0x00004c95
    5cd8:	0000c811 	.word	0x0000c811
    5cdc:	0000570d 	.word	0x0000570d
    5ce0:	0000c8d9 	.word	0x0000c8d9
    5ce4:	00012ee5 	.word	0x00012ee5
    5ce8:	0000c5d5 	.word	0x0000c5d5
    5cec:	0000c369 	.word	0x0000c369
    5cf0:	0000c439 	.word	0x0000c439
    5cf4:	00012b19 	.word	0x00012b19

00005cf8 <lv_obj_init_draw_label_dsc>:
{
    5cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cfa:	4605      	mov	r5, r0
    5cfc:	460e      	mov	r6, r1
    5cfe:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
    5d00:	f248 028c 	movw	r2, #32908	; 0x808c
    5d04:	4b26      	ldr	r3, [pc, #152]	; (5da0 <lv_obj_init_draw_label_dsc+0xa8>)
    5d06:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
    5d08:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
    5d0a:	2805      	cmp	r0, #5
    5d0c:	d800      	bhi.n	5d10 <lv_obj_init_draw_label_dsc+0x18>
    5d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
    5d10:	f248 020c 	movw	r2, #32780	; 0x800c
    5d14:	4631      	mov	r1, r6
    5d16:	4628      	mov	r0, r5
    5d18:	4b21      	ldr	r3, [pc, #132]	; (5da0 <lv_obj_init_draw_label_dsc+0xa8>)
    5d1a:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
    5d1c:	28f9      	cmp	r0, #249	; 0xf9
    5d1e:	d805      	bhi.n	5d2c <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
    5d20:	7a23      	ldrb	r3, [r4, #8]
    5d22:	fb13 f000 	smulbb	r0, r3, r0
    5d26:	f3c0 2007 	ubfx	r0, r0, #8, #8
    5d2a:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
    5d2c:	7a23      	ldrb	r3, [r4, #8]
    5d2e:	2b05      	cmp	r3, #5
    5d30:	d9ed      	bls.n	5d0e <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
    5d32:	f248 0289 	movw	r2, #32905	; 0x8089
    5d36:	4631      	mov	r1, r6
    5d38:	4628      	mov	r0, r5
    5d3a:	4b1a      	ldr	r3, [pc, #104]	; (5da4 <lv_obj_init_draw_label_dsc+0xac>)
    5d3c:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
    5d3e:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
    5d40:	f248 0280 	movw	r2, #32896	; 0x8080
    5d44:	4631      	mov	r1, r6
    5d46:	4628      	mov	r0, r5
    5d48:	4f17      	ldr	r7, [pc, #92]	; (5da8 <lv_obj_init_draw_label_dsc+0xb0>)
    5d4a:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
    5d4c:	81a0      	strh	r0, [r4, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
    5d4e:	f248 0281 	movw	r2, #32897	; 0x8081
    5d52:	4631      	mov	r1, r6
    5d54:	4628      	mov	r0, r5
    5d56:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
    5d58:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
    5d5a:	f248 0282 	movw	r2, #32898	; 0x8082
    5d5e:	4631      	mov	r1, r6
    5d60:	4628      	mov	r0, r5
    5d62:	47b8      	blx	r7
    5d64:	7620      	strb	r0, [r4, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
    5d66:	f248 0283 	movw	r2, #32899	; 0x8083
    5d6a:	4631      	mov	r1, r6
    5d6c:	4628      	mov	r0, r5
    5d6e:	47b8      	blx	r7
    5d70:	7660      	strb	r0, [r4, #25]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
    5d72:	f248 028e 	movw	r2, #32910	; 0x808e
    5d76:	4631      	mov	r1, r6
    5d78:	4628      	mov	r0, r5
    5d7a:	4b0c      	ldr	r3, [pc, #48]	; (5dac <lv_obj_init_draw_label_dsc+0xb4>)
    5d7c:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
    5d7e:	6060      	str	r0, [r4, #4]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
    5d80:	89e2      	ldrh	r2, [r4, #14]
    5d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5d86:	429a      	cmp	r2, r3
    5d88:	d0c1      	beq.n	5d0e <lv_obj_init_draw_label_dsc+0x16>
    5d8a:	8a22      	ldrh	r2, [r4, #16]
    5d8c:	429a      	cmp	r2, r3
    5d8e:	d0be      	beq.n	5d0e <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
    5d90:	f248 028a 	movw	r2, #32906	; 0x808a
    5d94:	4631      	mov	r1, r6
    5d96:	4628      	mov	r0, r5
    5d98:	4b02      	ldr	r3, [pc, #8]	; (5da4 <lv_obj_init_draw_label_dsc+0xac>)
    5d9a:	4798      	blx	r3
        draw_dsc->color = lv_obj_get_style_text_sel_color(obj, part);
    5d9c:	8020      	strh	r0, [r4, #0]
    5d9e:	e7b6      	b.n	5d0e <lv_obj_init_draw_label_dsc+0x16>
    5da0:	00004c95 	.word	0x00004c95
    5da4:	00004c09 	.word	0x00004c09
    5da8:	00004b5d 	.word	0x00004b5d
    5dac:	00004d29 	.word	0x00004d29

00005db0 <lv_obj_get_draw_rect_ext_pad_size>:
{
    5db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5db4:	b089      	sub	sp, #36	; 0x24
    5db6:	4604      	mov	r4, r0
    5db8:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
    5dba:	2250      	movs	r2, #80	; 0x50
    5dbc:	4b76      	ldr	r3, [pc, #472]	; (5f98 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5dbe:	4798      	blx	r3
    if(sh_width) {
    5dc0:	4607      	mov	r7, r0
    5dc2:	bb68      	cbnz	r0, 5e20 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
    5dc4:	227f      	movs	r2, #127	; 0x7f
    5dc6:	4631      	mov	r1, r6
    5dc8:	4620      	mov	r0, r4
    5dca:	4b74      	ldr	r3, [pc, #464]	; (5f9c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    5dcc:	4798      	blx	r3
    if(value_str) {
    5dce:	4680      	mov	r8, r0
    5dd0:	b130      	cbz	r0, 5de0 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
    5dd2:	227c      	movs	r2, #124	; 0x7c
    5dd4:	4631      	mov	r1, r6
    5dd6:	4620      	mov	r0, r4
    5dd8:	4b71      	ldr	r3, [pc, #452]	; (5fa0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5dda:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
    5ddc:	2805      	cmp	r0, #5
    5dde:	d84c      	bhi.n	5e7a <lv_obj_get_draw_rect_ext_pad_size+0xca>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
    5de0:	2240      	movs	r2, #64	; 0x40
    5de2:	4631      	mov	r1, r6
    5de4:	4620      	mov	r0, r4
    5de6:	4b6c      	ldr	r3, [pc, #432]	; (5f98 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5de8:	4798      	blx	r3
    if(outline_width) {
    5dea:	4605      	mov	r5, r0
    5dec:	2800      	cmp	r0, #0
    5dee:	f040 80bf 	bne.w	5f70 <lv_obj_get_draw_rect_ext_pad_size+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
    5df2:	2204      	movs	r2, #4
    5df4:	4631      	mov	r1, r6
    5df6:	4620      	mov	r0, r4
    5df8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 5f98 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>
    5dfc:	47c0      	blx	r8
    5dfe:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
    5e00:	2205      	movs	r2, #5
    5e02:	4631      	mov	r1, r6
    5e04:	4620      	mov	r0, r4
    5e06:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
    5e08:	42a8      	cmp	r0, r5
    5e0a:	bfb8      	it	lt
    5e0c:	4628      	movlt	r0, r5
    5e0e:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
    5e10:	2800      	cmp	r0, #0
    5e12:	bfc4      	itt	gt
    5e14:	19c0      	addgt	r0, r0, r7
    5e16:	b207      	sxthgt	r7, r0
}
    5e18:	4638      	mov	r0, r7
    5e1a:	b009      	add	sp, #36	; 0x24
    5e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
    5e20:	225c      	movs	r2, #92	; 0x5c
    5e22:	4631      	mov	r1, r6
    5e24:	4620      	mov	r0, r4
    5e26:	4b5e      	ldr	r3, [pc, #376]	; (5fa0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5e28:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
    5e2a:	2805      	cmp	r0, #5
    5e2c:	d801      	bhi.n	5e32 <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
    5e2e:	2700      	movs	r7, #0
    5e30:	e7c8      	b.n	5dc4 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
    5e32:	2253      	movs	r2, #83	; 0x53
    5e34:	4631      	mov	r1, r6
    5e36:	4620      	mov	r0, r4
    5e38:	4d57      	ldr	r5, [pc, #348]	; (5f98 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5e3a:	47a8      	blx	r5
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
    5e3c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            sh_width++;
    5e40:	eb00 0767 	add.w	r7, r0, r7, asr #1
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
    5e44:	3701      	adds	r7, #1
    5e46:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
    5e48:	2251      	movs	r2, #81	; 0x51
    5e4a:	4631      	mov	r1, r6
    5e4c:	4620      	mov	r0, r4
    5e4e:	47a8      	blx	r5
    5e50:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
    5e52:	2252      	movs	r2, #82	; 0x52
    5e54:	4631      	mov	r1, r6
    5e56:	4620      	mov	r0, r4
    5e58:	47a8      	blx	r5
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
    5e5a:	2800      	cmp	r0, #0
    5e5c:	bfb8      	it	lt
    5e5e:	4240      	neglt	r0, r0
    5e60:	f1b8 0f00 	cmp.w	r8, #0
    5e64:	bfb8      	it	lt
    5e66:	f1c8 0800 	rsblt	r8, r8, #0
    5e6a:	4540      	cmp	r0, r8
    5e6c:	bfac      	ite	ge
    5e6e:	183f      	addge	r7, r7, r0
    5e70:	4447      	addlt	r7, r8
            s = LV_MATH_MAX(s, sh_width);
    5e72:	b238      	sxth	r0, r7
    5e74:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
    5e78:	e7a4      	b.n	5dc4 <lv_obj_get_draw_rect_ext_pad_size+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
    5e7a:	2270      	movs	r2, #112	; 0x70
    5e7c:	4631      	mov	r1, r6
    5e7e:	4620      	mov	r0, r4
    5e80:	4d45      	ldr	r5, [pc, #276]	; (5f98 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5e82:	47a8      	blx	r5
    5e84:	4682      	mov	sl, r0
    5e86:	2270      	movs	r2, #112	; 0x70
    5e88:	4631      	mov	r1, r6
    5e8a:	4620      	mov	r0, r4
    5e8c:	47a8      	blx	r5
    5e8e:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
    5e90:	227e      	movs	r2, #126	; 0x7e
    5e92:	4631      	mov	r1, r6
    5e94:	4620      	mov	r0, r4
    5e96:	4b41      	ldr	r3, [pc, #260]	; (5f9c <lv_obj_get_draw_rect_ext_pad_size+0x1ec>)
    5e98:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
    5e9a:	f04f 0900 	mov.w	r9, #0
    5e9e:	f8cd 9008 	str.w	r9, [sp, #8]
    5ea2:	f647 4318 	movw	r3, #31768	; 0x7c18
    5ea6:	9301      	str	r3, [sp, #4]
    5ea8:	f8cd b000 	str.w	fp, [sp]
    5eac:	4653      	mov	r3, sl
    5eae:	4602      	mov	r2, r0
    5eb0:	4641      	mov	r1, r8
    5eb2:	a804      	add	r0, sp, #16
    5eb4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 5fa4 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>
    5eb8:	47c0      	blx	r8
            value_area.x1 = 0;
    5eba:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
    5ebe:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
    5ec2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5ec6:	3b01      	subs	r3, #1
    5ec8:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
    5ecc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    5ed0:	3b01      	subs	r3, #1
    5ed2:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
    5ed6:	2275      	movs	r2, #117	; 0x75
    5ed8:	4631      	mov	r1, r6
    5eda:	4620      	mov	r0, r4
    5edc:	47a8      	blx	r5
    5ede:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
    5ee0:	2273      	movs	r2, #115	; 0x73
    5ee2:	4631      	mov	r1, r6
    5ee4:	4620      	mov	r0, r4
    5ee6:	47a8      	blx	r5
    5ee8:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
    5eea:	2274      	movs	r2, #116	; 0x74
    5eec:	4631      	mov	r1, r6
    5eee:	4620      	mov	r0, r4
    5ef0:	47a8      	blx	r5
    5ef2:	4605      	mov	r5, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
    5ef4:	ab05      	add	r3, sp, #20
    5ef6:	fa5f f289 	uxtb.w	r2, r9
    5efa:	a906      	add	r1, sp, #24
    5efc:	f104 0010 	add.w	r0, r4, #16
    5f00:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5fa8 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>
    5f04:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
    5f06:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5f0a:	4443      	add	r3, r8
    5f0c:	b29b      	uxth	r3, r3
            value_area.y1 += p_align.y + yofs;
    5f0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5f12:	442a      	add	r2, r5
    5f14:	b292      	uxth	r2, r2
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    5f16:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
            value_area.x1 += p_align.x + xofs;
    5f1a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    5f1e:	4419      	add	r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
    5f20:	b209      	sxth	r1, r1
    5f22:	1a40      	subs	r0, r0, r1
    5f24:	42b8      	cmp	r0, r7
    5f26:	bfb8      	it	lt
    5f28:	4638      	movlt	r0, r7
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    5f2a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
            value_area.y1 += p_align.y + yofs;
    5f2e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
    5f32:	4417      	add	r7, r2
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
    5f34:	b23f      	sxth	r7, r7
    5f36:	1bcf      	subs	r7, r1, r7
    5f38:	b200      	sxth	r0, r0
    5f3a:	4287      	cmp	r7, r0
    5f3c:	bfb8      	it	lt
    5f3e:	4607      	movlt	r7, r0
            value_area.x2 += p_align.x + xofs;
    5f40:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    5f44:	4403      	add	r3, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
    5f46:	b21b      	sxth	r3, r3
    5f48:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
    5f4c:	1a18      	subs	r0, r3, r0
    5f4e:	b23b      	sxth	r3, r7
    5f50:	4283      	cmp	r3, r0
    5f52:	bfb8      	it	lt
    5f54:	4603      	movlt	r3, r0
            value_area.y2 += p_align.y + yofs;
    5f56:	f8bd 001e 	ldrh.w	r0, [sp, #30]
    5f5a:	4410      	add	r0, r2
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
    5f5c:	b200      	sxth	r0, r0
    5f5e:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
    5f62:	1bc7      	subs	r7, r0, r7
    5f64:	b218      	sxth	r0, r3
    5f66:	42b8      	cmp	r0, r7
    5f68:	bfb8      	it	lt
    5f6a:	4638      	movlt	r0, r7
    5f6c:	b207      	sxth	r7, r0
    5f6e:	e737      	b.n	5de0 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
    5f70:	224c      	movs	r2, #76	; 0x4c
    5f72:	4631      	mov	r1, r6
    5f74:	4620      	mov	r0, r4
    5f76:	4b0a      	ldr	r3, [pc, #40]	; (5fa0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
    5f78:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
    5f7a:	2805      	cmp	r0, #5
    5f7c:	f67f af39 	bls.w	5df2 <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
    5f80:	2241      	movs	r2, #65	; 0x41
    5f82:	4631      	mov	r1, r6
    5f84:	4620      	mov	r0, r4
    5f86:	4b04      	ldr	r3, [pc, #16]	; (5f98 <lv_obj_get_draw_rect_ext_pad_size+0x1e8>)
    5f88:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
    5f8a:	4428      	add	r0, r5
    5f8c:	42b8      	cmp	r0, r7
    5f8e:	bfb8      	it	lt
    5f90:	4638      	movlt	r0, r7
    5f92:	b207      	sxth	r7, r0
    5f94:	e72d      	b.n	5df2 <lv_obj_get_draw_rect_ext_pad_size+0x42>
    5f96:	bf00      	nop
    5f98:	00004b5d 	.word	0x00004b5d
    5f9c:	00004d29 	.word	0x00004d29
    5fa0:	00004c95 	.word	0x00004c95
    5fa4:	00014625 	.word	0x00014625
    5fa8:	00011dcd 	.word	0x00011dcd

00005fac <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
    5fac:	2908      	cmp	r1, #8
    5fae:	d01a      	beq.n	5fe6 <lv_obj_signal+0x3a>
{
    5fb0:	b510      	push	{r4, lr}
    5fb2:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    5fb4:	2907      	cmp	r1, #7
    5fb6:	d020      	beq.n	5ffa <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
    5fb8:	2901      	cmp	r1, #1
    5fba:	d023      	beq.n	6004 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
    5fbc:	2906      	cmp	r1, #6
    5fbe:	d027      	beq.n	6010 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
    5fc0:	2903      	cmp	r1, #3
    5fc2:	d030      	beq.n	6026 <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
    5fc4:	2904      	cmp	r1, #4
    5fc6:	d039      	beq.n	603c <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
    5fc8:	290b      	cmp	r1, #11
    5fca:	d03b      	beq.n	6044 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
    5fcc:	f1a1 030d 	sub.w	r3, r1, #13
    5fd0:	b2db      	uxtb	r3, r3
    5fd2:	2b01      	cmp	r3, #1
    5fd4:	d93b      	bls.n	604e <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
    5fd6:	2916      	cmp	r1, #22
    5fd8:	d03e      	beq.n	6058 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
    5fda:	2917      	cmp	r1, #23
    5fdc:	d051      	beq.n	6082 <lv_obj_signal+0xd6>
    else if(sign == LV_SIGNAL_CLEANUP) {
    5fde:	2900      	cmp	r1, #0
    5fe0:	d054      	beq.n	608c <lv_obj_signal+0xe0>
    lv_res_t res = LV_RES_OK;
    5fe2:	2001      	movs	r0, #1
}
    5fe4:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
    5fe6:	7813      	ldrb	r3, [r2, #0]
    5fe8:	b91b      	cbnz	r3, 5ff2 <lv_obj_signal+0x46>
    5fea:	3028      	adds	r0, #40	; 0x28
    5fec:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
    5fee:	2001      	movs	r0, #1
    5ff0:	4770      	bx	lr
        else info->result = NULL;
    5ff2:	2300      	movs	r3, #0
    5ff4:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
    5ff6:	2001      	movs	r0, #1
    5ff8:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
    5ffa:	4926      	ldr	r1, [pc, #152]	; (6094 <lv_obj_signal+0xe8>)
    5ffc:	4610      	mov	r0, r2
    5ffe:	4b26      	ldr	r3, [pc, #152]	; (6098 <lv_obj_signal+0xec>)
    6000:	4798      	blx	r3
    6002:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
    6004:	4b25      	ldr	r3, [pc, #148]	; (609c <lv_obj_signal+0xf0>)
    6006:	4798      	blx	r3
    6008:	f080 0001 	eor.w	r0, r0, #1
        return LV_RES_OK;
    600c:	b2c0      	uxtb	r0, r0
    600e:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
    6010:	2100      	movs	r1, #0
    6012:	4b23      	ldr	r3, [pc, #140]	; (60a0 <lv_obj_signal+0xf4>)
    6014:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
    6016:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    601a:	4298      	cmp	r0, r3
    601c:	bfb8      	it	lt
    601e:	4618      	movlt	r0, r3
    6020:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
    6022:	2001      	movs	r0, #1
    6024:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
    6026:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    602a:	f013 0f01 	tst.w	r3, #1
    602e:	d101      	bne.n	6034 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
    6030:	2001      	movs	r0, #1
    6032:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
    6034:	4b1b      	ldr	r3, [pc, #108]	; (60a4 <lv_obj_signal+0xf8>)
    6036:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    6038:	2001      	movs	r0, #1
    603a:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
    603c:	4b1a      	ldr	r3, [pc, #104]	; (60a8 <lv_obj_signal+0xfc>)
    603e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    6040:	2001      	movs	r0, #1
    6042:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
    6044:	2110      	movs	r1, #16
    6046:	4b19      	ldr	r3, [pc, #100]	; (60ac <lv_obj_signal+0x100>)
    6048:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    604a:	2001      	movs	r0, #1
    604c:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
    604e:	2110      	movs	r1, #16
    6050:	4b17      	ldr	r3, [pc, #92]	; (60b0 <lv_obj_signal+0x104>)
    6052:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    6054:	2001      	movs	r0, #1
    6056:	bd10      	pop	{r4, pc}
        if(lv_group_get_editing(lv_obj_get_group(obj))) {
    6058:	4b16      	ldr	r3, [pc, #88]	; (60b4 <lv_obj_signal+0x108>)
    605a:	4798      	blx	r3
    605c:	4b16      	ldr	r3, [pc, #88]	; (60b8 <lv_obj_signal+0x10c>)
    605e:	4798      	blx	r3
    6060:	b128      	cbz	r0, 606e <lv_obj_signal+0xc2>
            lv_obj_add_state(obj, state);
    6062:	2106      	movs	r1, #6
    6064:	4620      	mov	r0, r4
    6066:	4b11      	ldr	r3, [pc, #68]	; (60ac <lv_obj_signal+0x100>)
    6068:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    606a:	2001      	movs	r0, #1
    606c:	bd10      	pop	{r4, pc}
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
    606e:	2102      	movs	r1, #2
    6070:	4620      	mov	r0, r4
    6072:	4b0e      	ldr	r3, [pc, #56]	; (60ac <lv_obj_signal+0x100>)
    6074:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
    6076:	2104      	movs	r1, #4
    6078:	4620      	mov	r0, r4
    607a:	4b0d      	ldr	r3, [pc, #52]	; (60b0 <lv_obj_signal+0x104>)
    607c:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    607e:	2001      	movs	r0, #1
    6080:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
    6082:	2106      	movs	r1, #6
    6084:	4b0a      	ldr	r3, [pc, #40]	; (60b0 <lv_obj_signal+0x104>)
    6086:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    6088:	2001      	movs	r0, #1
    608a:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
    608c:	4b0b      	ldr	r3, [pc, #44]	; (60bc <lv_obj_signal+0x110>)
    608e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
    6090:	2001      	movs	r0, #1
    6092:	bd10      	pop	{r4, pc}
    6094:	0001becc 	.word	0x0001becc
    6098:	000056dd 	.word	0x000056dd
    609c:	00004a9d 	.word	0x00004a9d
    60a0:	00005db1 	.word	0x00005db1
    60a4:	00004069 	.word	0x00004069
    60a8:	000032b5 	.word	0x000032b5
    60ac:	00005325 	.word	0x00005325
    60b0:	00005381 	.word	0x00005381
    60b4:	0000546d 	.word	0x0000546d
    60b8:	00002e37 	.word	0x00002e37
    60bc:	00003755 	.word	0x00003755

000060c0 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
    60c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60c4:	4605      	mov	r5, r0
    60c6:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
    60c8:	2200      	movs	r2, #0
    60ca:	3110      	adds	r1, #16
    60cc:	4b1f      	ldr	r3, [pc, #124]	; (614c <lv_refr_get_top_obj+0x8c>)
    60ce:	4798      	blx	r3
    60d0:	b350      	cbz	r0, 6128 <lv_refr_get_top_obj+0x68>
    60d2:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
    60d6:	f013 0f10 	tst.w	r3, #16
    60da:	d127      	bne.n	612c <lv_refr_get_top_obj+0x6c>
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    60dc:	f8d8 3020 	ldr.w	r3, [r8, #32]
    60e0:	b343      	cbz	r3, 6134 <lv_refr_get_top_obj+0x74>
    60e2:	2202      	movs	r2, #2
    60e4:	4629      	mov	r1, r5
    60e6:	4640      	mov	r0, r8
    60e8:	4798      	blx	r3
    60ea:	4681      	mov	r9, r0
                                                                     LV_DESIGN_COVER_CHK) : LV_DESIGN_RES_NOT_COVER;
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    60ec:	2803      	cmp	r0, #3
    60ee:	d01f      	beq.n	6130 <lv_refr_get_top_obj+0x70>

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
    60f0:	f108 0604 	add.w	r6, r8, #4
    60f4:	4630      	mov	r0, r6
    60f6:	4b16      	ldr	r3, [pc, #88]	; (6150 <lv_refr_get_top_obj+0x90>)
    60f8:	4798      	blx	r3
    60fa:	4604      	mov	r4, r0
    60fc:	b160      	cbz	r0, 6118 <lv_refr_get_top_obj+0x58>
    60fe:	4f15      	ldr	r7, [pc, #84]	; (6154 <lv_refr_get_top_obj+0x94>)
            found_p = lv_refr_get_top_obj(area_p, i);
    6100:	4621      	mov	r1, r4
    6102:	4628      	mov	r0, r5
    6104:	f7ff ffdc 	bl	60c0 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
    6108:	4603      	mov	r3, r0
    610a:	b950      	cbnz	r0, 6122 <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    610c:	4621      	mov	r1, r4
    610e:	4630      	mov	r0, r6
    6110:	47b8      	blx	r7
    6112:	4604      	mov	r4, r0
    6114:	2800      	cmp	r0, #0
    6116:	d1f3      	bne.n	6100 <lv_refr_get_top_obj+0x40>
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
            if(design_res == LV_DESIGN_RES_COVER) {
                found_p = obj;
    6118:	f1b9 0f01 	cmp.w	r9, #1
    611c:	bf0c      	ite	eq
    611e:	4643      	moveq	r3, r8
    6120:	2300      	movne	r3, #0
            }
        }
    }

    return found_p;
}
    6122:	4618      	mov	r0, r3
    6124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_obj_t * found_p = NULL;
    6128:	2300      	movs	r3, #0
    612a:	e7fa      	b.n	6122 <lv_refr_get_top_obj+0x62>
    612c:	2300      	movs	r3, #0
    612e:	e7f8      	b.n	6122 <lv_refr_get_top_obj+0x62>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
    6130:	2300      	movs	r3, #0
    6132:	e7f6      	b.n	6122 <lv_refr_get_top_obj+0x62>
        _LV_LL_READ(obj->child_ll, i) {
    6134:	f108 0604 	add.w	r6, r8, #4
    6138:	4630      	mov	r0, r6
    613a:	4b05      	ldr	r3, [pc, #20]	; (6150 <lv_refr_get_top_obj+0x90>)
    613c:	4798      	blx	r3
    613e:	4604      	mov	r4, r0
        lv_design_res_t design_res = obj->design_cb ? obj->design_cb(obj, area_p,
    6140:	f04f 0902 	mov.w	r9, #2
        _LV_LL_READ(obj->child_ll, i) {
    6144:	2800      	cmp	r0, #0
    6146:	d1da      	bne.n	60fe <lv_refr_get_top_obj+0x3e>
    6148:	4603      	mov	r3, r0
    614a:	e7ea      	b.n	6122 <lv_refr_get_top_obj+0x62>
    614c:	00011d15 	.word	0x00011d15
    6150:	00012551 	.word	0x00012551
    6154:	00012565 	.word	0x00012565

00006158 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
    6158:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    615c:	f013 0f10 	tst.w	r3, #16
    6160:	d000      	beq.n	6164 <lv_refr_obj+0xc>
    6162:	4770      	bx	lr
{
    6164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6168:	b08b      	sub	sp, #44	; 0x2c
    616a:	460e      	mov	r6, r1
    616c:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
    616e:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
    6172:	a904      	add	r1, sp, #16
    6174:	4b35      	ldr	r3, [pc, #212]	; (624c <lv_refr_obj+0xf4>)
    6176:	4798      	blx	r3
    obj_area.x1 -= ext_size;
    6178:	b2a3      	uxth	r3, r4
    617a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    617e:	1ad2      	subs	r2, r2, r3
    6180:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
    6184:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    6188:	1ad2      	subs	r2, r2, r3
    618a:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
    618e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    6192:	441a      	add	r2, r3
    6194:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
    6198:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    619c:	4413      	add	r3, r2
    619e:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
    61a2:	aa04      	add	r2, sp, #16
    61a4:	4631      	mov	r1, r6
    61a6:	a806      	add	r0, sp, #24
    61a8:	4b29      	ldr	r3, [pc, #164]	; (6250 <lv_refr_obj+0xf8>)
    61aa:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
    61ac:	b1a8      	cbz	r0, 61da <lv_refr_obj+0x82>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
    61ae:	6a2b      	ldr	r3, [r5, #32]
    61b0:	b11b      	cbz	r3, 61ba <lv_refr_obj+0x62>
    61b2:	2200      	movs	r2, #0
    61b4:	a906      	add	r1, sp, #24
    61b6:	4628      	mov	r0, r5
    61b8:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
    61ba:	a904      	add	r1, sp, #16
    61bc:	4628      	mov	r0, r5
    61be:	4b23      	ldr	r3, [pc, #140]	; (624c <lv_refr_obj+0xf4>)
    61c0:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
    61c2:	aa04      	add	r2, sp, #16
    61c4:	4631      	mov	r1, r6
    61c6:	a808      	add	r0, sp, #32
    61c8:	4b21      	ldr	r3, [pc, #132]	; (6250 <lv_refr_obj+0xf8>)
    61ca:	4798      	blx	r3
        if(union_ok != false) {
    61cc:	b940      	cbnz	r0, 61e0 <lv_refr_obj+0x88>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
    61ce:	6a2b      	ldr	r3, [r5, #32]
    61d0:	b11b      	cbz	r3, 61da <lv_refr_obj+0x82>
    61d2:	2201      	movs	r2, #1
    61d4:	a906      	add	r1, sp, #24
    61d6:	4628      	mov	r0, r5
    61d8:	4798      	blx	r3
    }
}
    61da:	b00b      	add	sp, #44	; 0x2c
    61dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    61e0:	f105 0804 	add.w	r8, r5, #4
    61e4:	4640      	mov	r0, r8
    61e6:	4b1b      	ldr	r3, [pc, #108]	; (6254 <lv_refr_obj+0xfc>)
    61e8:	4798      	blx	r3
    61ea:	4604      	mov	r4, r0
    61ec:	2800      	cmp	r0, #0
    61ee:	d0ee      	beq.n	61ce <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    61f0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 624c <lv_refr_obj+0xf4>
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    61f4:	4e16      	ldr	r6, [pc, #88]	; (6250 <lv_refr_obj+0xf8>)
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
    61f6:	4f18      	ldr	r7, [pc, #96]	; (6258 <lv_refr_obj+0x100>)
    61f8:	e005      	b.n	6206 <lv_refr_obj+0xae>
    61fa:	4621      	mov	r1, r4
    61fc:	4640      	mov	r0, r8
    61fe:	47b8      	blx	r7
    6200:	4604      	mov	r4, r0
    6202:	2800      	cmp	r0, #0
    6204:	d0e3      	beq.n	61ce <lv_refr_obj+0x76>
                lv_obj_get_coords(child_p, &child_area);
    6206:	a902      	add	r1, sp, #8
    6208:	4620      	mov	r0, r4
    620a:	47c8      	blx	r9
                child_area.x1 -= ext_size;
    620c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    620e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    6212:	1ad2      	subs	r2, r2, r3
    6214:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
    6218:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    621c:	1ad2      	subs	r2, r2, r3
    621e:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
    6222:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    6226:	441a      	add	r2, r3
    6228:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
    622c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6230:	4413      	add	r3, r2
    6232:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
    6236:	aa02      	add	r2, sp, #8
    6238:	a908      	add	r1, sp, #32
    623a:	4668      	mov	r0, sp
    623c:	47b0      	blx	r6
                if(union_ok) {
    623e:	2800      	cmp	r0, #0
    6240:	d0db      	beq.n	61fa <lv_refr_obj+0xa2>
                    lv_refr_obj(child_p, &mask_child);
    6242:	4669      	mov	r1, sp
    6244:	4620      	mov	r0, r4
    6246:	f7ff ff87 	bl	6158 <lv_refr_obj>
    624a:	e7d6      	b.n	61fa <lv_refr_obj+0xa2>
    624c:	000034c9 	.word	0x000034c9
    6250:	00011ac1 	.word	0x00011ac1
    6254:	0001255b 	.word	0x0001255b
    6258:	00012591 	.word	0x00012591

0000625c <lv_refr_obj_and_children>:
{
    625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6260:	460f      	mov	r7, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    6262:	4604      	mov	r4, r0
    6264:	b170      	cbz	r0, 6284 <lv_refr_obj_and_children+0x28>
    lv_refr_obj(top_p, mask_p);
    6266:	4639      	mov	r1, r7
    6268:	4620      	mov	r0, r4
    626a:	4b1a      	ldr	r3, [pc, #104]	; (62d4 <lv_refr_obj_and_children+0x78>)
    626c:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
    626e:	4620      	mov	r0, r4
    6270:	4b19      	ldr	r3, [pc, #100]	; (62d8 <lv_refr_obj_and_children+0x7c>)
    6272:	4798      	blx	r3
    while(par != NULL) {
    6274:	4681      	mov	r9, r0
    6276:	b160      	cbz	r0, 6292 <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    6278:	4e18      	ldr	r6, [pc, #96]	; (62dc <lv_refr_obj_and_children+0x80>)
            lv_refr_obj(i, mask_p);
    627a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 62d4 <lv_refr_obj_and_children+0x78>
        par = lv_obj_get_parent(par);
    627e:	f8df a058 	ldr.w	sl, [pc, #88]	; 62d8 <lv_refr_obj_and_children+0x7c>
    6282:	e00e      	b.n	62a2 <lv_refr_obj_and_children+0x46>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
    6284:	4b16      	ldr	r3, [pc, #88]	; (62e0 <lv_refr_obj_and_children+0x84>)
    6286:	6818      	ldr	r0, [r3, #0]
    6288:	4b16      	ldr	r3, [pc, #88]	; (62e4 <lv_refr_obj_and_children+0x88>)
    628a:	4798      	blx	r3
    if(top_p == NULL) return;  /*Shouldn't happen*/
    628c:	4604      	mov	r4, r0
    628e:	2800      	cmp	r0, #0
    6290:	d1e9      	bne.n	6266 <lv_refr_obj_and_children+0xa>
    6292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        par = lv_obj_get_parent(par);
    6296:	4648      	mov	r0, r9
    6298:	47d0      	blx	sl
    629a:	464c      	mov	r4, r9
    while(par != NULL) {
    629c:	4681      	mov	r9, r0
    629e:	2800      	cmp	r0, #0
    62a0:	d0f7      	beq.n	6292 <lv_refr_obj_and_children+0x36>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
    62a2:	f109 0504 	add.w	r5, r9, #4
    62a6:	4621      	mov	r1, r4
    62a8:	4628      	mov	r0, r5
    62aa:	47b0      	blx	r6
        while(i != NULL) {
    62ac:	4604      	mov	r4, r0
    62ae:	b140      	cbz	r0, 62c2 <lv_refr_obj_and_children+0x66>
            lv_refr_obj(i, mask_p);
    62b0:	4639      	mov	r1, r7
    62b2:	4620      	mov	r0, r4
    62b4:	47c0      	blx	r8
            i = _lv_ll_get_prev(&(par->child_ll), i);
    62b6:	4621      	mov	r1, r4
    62b8:	4628      	mov	r0, r5
    62ba:	47b0      	blx	r6
        while(i != NULL) {
    62bc:	4604      	mov	r4, r0
    62be:	2800      	cmp	r0, #0
    62c0:	d1f6      	bne.n	62b0 <lv_refr_obj_and_children+0x54>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
    62c2:	f8d9 3020 	ldr.w	r3, [r9, #32]
    62c6:	2b00      	cmp	r3, #0
    62c8:	d0e5      	beq.n	6296 <lv_refr_obj_and_children+0x3a>
    62ca:	2201      	movs	r2, #1
    62cc:	4639      	mov	r1, r7
    62ce:	4648      	mov	r0, r9
    62d0:	4798      	blx	r3
    62d2:	e7e0      	b.n	6296 <lv_refr_obj_and_children+0x3a>
    62d4:	00006159 	.word	0x00006159
    62d8:	00003305 	.word	0x00003305
    62dc:	00012591 	.word	0x00012591
    62e0:	20002688 	.word	0x20002688
    62e4:	00002a29 	.word	0x00002a29

000062e8 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
    62e8:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    62ea:	4d1a      	ldr	r5, [pc, #104]	; (6354 <lv_refr_vdb_flush+0x6c>)
    62ec:	6828      	ldr	r0, [r5, #0]
    62ee:	4b1a      	ldr	r3, [pc, #104]	; (6358 <lv_refr_vdb_flush+0x70>)
    62f0:	4798      	blx	r3
    62f2:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
    62f4:	6828      	ldr	r0, [r5, #0]
    62f6:	4b19      	ldr	r3, [pc, #100]	; (635c <lv_refr_vdb_flush+0x74>)
    62f8:	4798      	blx	r3
    62fa:	b978      	cbnz	r0, 631c <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
    62fc:	2301      	movs	r3, #1
    62fe:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
    6300:	4b14      	ldr	r3, [pc, #80]	; (6354 <lv_refr_vdb_flush+0x6c>)
    6302:	6818      	ldr	r0, [r3, #0]
    6304:	6843      	ldr	r3, [r0, #4]
    6306:	6a1a      	ldr	r2, [r3, #32]
    6308:	f012 0f01 	tst.w	r2, #1
    630c:	d010      	beq.n	6330 <lv_refr_vdb_flush+0x48>
    630e:	6a1b      	ldr	r3, [r3, #32]
    6310:	f013 0f02 	tst.w	r3, #2
    6314:	d00c      	beq.n	6330 <lv_refr_vdb_flush+0x48>
    6316:	2301      	movs	r3, #1
    6318:	61e3      	str	r3, [r4, #28]
    631a:	e00b      	b.n	6334 <lv_refr_vdb_flush+0x4c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    631c:	4d0d      	ldr	r5, [pc, #52]	; (6354 <lv_refr_vdb_flush+0x6c>)
    631e:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    6320:	69a3      	ldr	r3, [r4, #24]
    6322:	2b00      	cmp	r3, #0
    6324:	d0ea      	beq.n	62fc <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    6326:	69c3      	ldr	r3, [r0, #28]
    6328:	2b00      	cmp	r3, #0
    632a:	d0f9      	beq.n	6320 <lv_refr_vdb_flush+0x38>
    632c:	4798      	blx	r3
    632e:	e7f6      	b.n	631e <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
    6330:	2300      	movs	r3, #0
    6332:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
    6334:	68c3      	ldr	r3, [r0, #12]
    6336:	b11b      	cbz	r3, 6340 <lv_refr_vdb_flush+0x58>
    6338:	68a2      	ldr	r2, [r4, #8]
    633a:	f104 0110 	add.w	r1, r4, #16
    633e:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
    6340:	6823      	ldr	r3, [r4, #0]
    6342:	b133      	cbz	r3, 6352 <lv_refr_vdb_flush+0x6a>
    6344:	6862      	ldr	r2, [r4, #4]
    6346:	b122      	cbz	r2, 6352 <lv_refr_vdb_flush+0x6a>
        if(vdb->buf_act == vdb->buf1)
    6348:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
    634a:	428b      	cmp	r3, r1
    634c:	bf08      	it	eq
    634e:	4613      	moveq	r3, r2
    6350:	60a3      	str	r3, [r4, #8]
    6352:	bd38      	pop	{r3, r4, r5, pc}
    6354:	20002688 	.word	0x20002688
    6358:	00011585 	.word	0x00011585
    635c:	00011589 	.word	0x00011589

00006360 <lv_refr_area_part>:
{
    6360:	b570      	push	{r4, r5, r6, lr}
    6362:	b082      	sub	sp, #8
    6364:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    6366:	4d1a      	ldr	r5, [pc, #104]	; (63d0 <lv_refr_area_part+0x70>)
    6368:	6828      	ldr	r0, [r5, #0]
    636a:	4b1a      	ldr	r3, [pc, #104]	; (63d4 <lv_refr_area_part+0x74>)
    636c:	4798      	blx	r3
    636e:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
    6370:	6828      	ldr	r0, [r5, #0]
    6372:	4b19      	ldr	r3, [pc, #100]	; (63d8 <lv_refr_area_part+0x78>)
    6374:	4798      	blx	r3
    6376:	b938      	cbnz	r0, 6388 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    6378:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
    637a:	69a3      	ldr	r3, [r4, #24]
    637c:	b123      	cbz	r3, 6388 <lv_refr_area_part+0x28>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
    637e:	69c3      	ldr	r3, [r0, #28]
    6380:	2b00      	cmp	r3, #0
    6382:	d0fa      	beq.n	637a <lv_refr_area_part+0x1a>
    6384:	4798      	blx	r3
    6386:	e7f7      	b.n	6378 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
    6388:	f104 0210 	add.w	r2, r4, #16
    638c:	4631      	mov	r1, r6
    638e:	4668      	mov	r0, sp
    6390:	4b12      	ldr	r3, [pc, #72]	; (63dc <lv_refr_area_part+0x7c>)
    6392:	4798      	blx	r3
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
    6394:	4c0e      	ldr	r4, [pc, #56]	; (63d0 <lv_refr_area_part+0x70>)
    6396:	6820      	ldr	r0, [r4, #0]
    6398:	4b11      	ldr	r3, [pc, #68]	; (63e0 <lv_refr_area_part+0x80>)
    639a:	4798      	blx	r3
    639c:	4601      	mov	r1, r0
    639e:	4668      	mov	r0, sp
    63a0:	4b10      	ldr	r3, [pc, #64]	; (63e4 <lv_refr_area_part+0x84>)
    63a2:	4798      	blx	r3
    lv_refr_obj_and_children(top_p, &start_mask);
    63a4:	4669      	mov	r1, sp
    63a6:	4d10      	ldr	r5, [pc, #64]	; (63e8 <lv_refr_area_part+0x88>)
    63a8:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
    63aa:	6820      	ldr	r0, [r4, #0]
    63ac:	4b0f      	ldr	r3, [pc, #60]	; (63ec <lv_refr_area_part+0x8c>)
    63ae:	4798      	blx	r3
    63b0:	4669      	mov	r1, sp
    63b2:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
    63b4:	6820      	ldr	r0, [r4, #0]
    63b6:	4b0e      	ldr	r3, [pc, #56]	; (63f0 <lv_refr_area_part+0x90>)
    63b8:	4798      	blx	r3
    63ba:	4669      	mov	r1, sp
    63bc:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
    63be:	6820      	ldr	r0, [r4, #0]
    63c0:	4b0c      	ldr	r3, [pc, #48]	; (63f4 <lv_refr_area_part+0x94>)
    63c2:	4798      	blx	r3
    63c4:	b108      	cbz	r0, 63ca <lv_refr_area_part+0x6a>
}
    63c6:	b002      	add	sp, #8
    63c8:	bd70      	pop	{r4, r5, r6, pc}
        lv_refr_vdb_flush();
    63ca:	4b0b      	ldr	r3, [pc, #44]	; (63f8 <lv_refr_area_part+0x98>)
    63cc:	4798      	blx	r3
}
    63ce:	e7fa      	b.n	63c6 <lv_refr_area_part+0x66>
    63d0:	20002688 	.word	0x20002688
    63d4:	00011585 	.word	0x00011585
    63d8:	00011589 	.word	0x00011589
    63dc:	00011ac1 	.word	0x00011ac1
    63e0:	00002a29 	.word	0x00002a29
    63e4:	000060c1 	.word	0x000060c1
    63e8:	0000625d 	.word	0x0000625d
    63ec:	00002a69 	.word	0x00002a69
    63f0:	00002aa9 	.word	0x00002aa9
    63f4:	0001159d 	.word	0x0001159d
    63f8:	000062e9 	.word	0x000062e9

000063fc <_lv_refr_init>:
{
    63fc:	4770      	bx	lr
	...

00006400 <_lv_inv_area>:
{
    6400:	b5f0      	push	{r4, r5, r6, r7, lr}
    6402:	b085      	sub	sp, #20
    6404:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
    6406:	4605      	mov	r5, r0
    6408:	2800      	cmp	r0, #0
    640a:	d054      	beq.n	64b6 <_lv_inv_area+0xb6>
    if(area_p == NULL) {
    640c:	2c00      	cmp	r4, #0
    640e:	d057      	beq.n	64c0 <_lv_inv_area+0xc0>
    scr_area.x1 = 0;
    6410:	2300      	movs	r3, #0
    6412:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
    6416:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
    641a:	4628      	mov	r0, r5
    641c:	4b36      	ldr	r3, [pc, #216]	; (64f8 <_lv_inv_area+0xf8>)
    641e:	4798      	blx	r3
    6420:	3801      	subs	r0, #1
    6422:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
    6426:	4628      	mov	r0, r5
    6428:	4b34      	ldr	r3, [pc, #208]	; (64fc <_lv_inv_area+0xfc>)
    642a:	4798      	blx	r3
    642c:	3801      	subs	r0, #1
    642e:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
    6432:	aa02      	add	r2, sp, #8
    6434:	4621      	mov	r1, r4
    6436:	4668      	mov	r0, sp
    6438:	4b31      	ldr	r3, [pc, #196]	; (6500 <_lv_inv_area+0x100>)
    643a:	4798      	blx	r3
    if(suc != false) {
    643c:	2800      	cmp	r0, #0
    643e:	d045      	beq.n	64cc <_lv_inv_area+0xcc>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
    6440:	692b      	ldr	r3, [r5, #16]
    6442:	b113      	cbz	r3, 644a <_lv_inv_area+0x4a>
    6444:	4669      	mov	r1, sp
    6446:	4628      	mov	r0, r5
    6448:	4798      	blx	r3
        for(i = 0; i < disp->inv_p; i++) {
    644a:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    644e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6452:	b19b      	cbz	r3, 647c <_lv_inv_area+0x7c>
    6454:	2100      	movs	r1, #0
    6456:	460c      	mov	r4, r1
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
    6458:	460f      	mov	r7, r1
    645a:	4e2a      	ldr	r6, [pc, #168]	; (6504 <_lv_inv_area+0x104>)
    645c:	3109      	adds	r1, #9
    645e:	463a      	mov	r2, r7
    6460:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    6464:	4668      	mov	r0, sp
    6466:	47b0      	blx	r6
    6468:	bb80      	cbnz	r0, 64cc <_lv_inv_area+0xcc>
        for(i = 0; i < disp->inv_p; i++) {
    646a:	3401      	adds	r4, #1
    646c:	b2a4      	uxth	r4, r4
    646e:	4621      	mov	r1, r4
    6470:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    6474:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6478:	429c      	cmp	r4, r3
    647a:	dbef      	blt.n	645c <_lv_inv_area+0x5c>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
    647c:	2b1f      	cmp	r3, #31
    647e:	dc27      	bgt.n	64d0 <_lv_inv_area+0xd0>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
    6480:	3309      	adds	r3, #9
    6482:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    6486:	f10d 32ff 	add.w	r2, sp, #4294967295
    648a:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    648e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6492:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    6496:	4283      	cmp	r3, r0
    6498:	d1f9      	bne.n	648e <_lv_inv_area+0x8e>
        disp->inv_p++;
    649a:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    649e:	f3c3 0209 	ubfx	r2, r3, #0, #10
    64a2:	3201      	adds	r2, #1
    64a4:	f362 0309 	bfi	r3, r2, #0, #10
    64a8:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
    64ac:	2103      	movs	r1, #3
    64ae:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    64b0:	4b15      	ldr	r3, [pc, #84]	; (6508 <_lv_inv_area+0x108>)
    64b2:	4798      	blx	r3
    64b4:	e00a      	b.n	64cc <_lv_inv_area+0xcc>
    if(!disp) disp = lv_disp_get_default();
    64b6:	4b15      	ldr	r3, [pc, #84]	; (650c <_lv_inv_area+0x10c>)
    64b8:	4798      	blx	r3
    if(!disp) return;
    64ba:	4605      	mov	r5, r0
    64bc:	b130      	cbz	r0, 64cc <_lv_inv_area+0xcc>
    64be:	e7a5      	b.n	640c <_lv_inv_area+0xc>
        disp->inv_p = 0;
    64c0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    64c4:	f36f 0309 	bfc	r3, #0, #10
    64c8:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
}
    64cc:	b005      	add	sp, #20
    64ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            disp->inv_p = 0;
    64d0:	f8b5 3168 	ldrh.w	r3, [r5, #360]	; 0x168
    64d4:	f36f 0309 	bfc	r3, #0, #10
    64d8:	f8a5 3168 	strh.w	r3, [r5, #360]	; 0x168
    64dc:	f10d 0207 	add.w	r2, sp, #7
    64e0:	f105 0050 	add.w	r0, r5, #80	; 0x50
    uint8_t * d8 = (uint8_t *)dst;
    64e4:	f105 0348 	add.w	r3, r5, #72	; 0x48
        *d8 = *s8;
    64e8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    64ec:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    64f0:	4283      	cmp	r3, r0
    64f2:	d1f9      	bne.n	64e8 <_lv_inv_area+0xe8>
    64f4:	e7d1      	b.n	649a <_lv_inv_area+0x9a>
    64f6:	bf00      	nop
    64f8:	00011495 	.word	0x00011495
    64fc:	000114bd 	.word	0x000114bd
    6500:	00011ac1 	.word	0x00011ac1
    6504:	00011d15 	.word	0x00011d15
    6508:	00013f01 	.word	0x00013f01
    650c:	00011489 	.word	0x00011489

00006510 <_lv_refr_get_disp_refreshing>:
}
    6510:	4b01      	ldr	r3, [pc, #4]	; (6518 <_lv_refr_get_disp_refreshing+0x8>)
    6512:	6818      	ldr	r0, [r3, #0]
    6514:	4770      	bx	lr
    6516:	bf00      	nop
    6518:	20002688 	.word	0x20002688

0000651c <_lv_disp_refr_task>:
{
    651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6520:	b08d      	sub	sp, #52	; 0x34
    6522:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
    6524:	4bb7      	ldr	r3, [pc, #732]	; (6804 <_lv_disp_refr_task+0x2e8>)
    6526:	4798      	blx	r3
    6528:	9009      	str	r0, [sp, #36]	; 0x24
    disp_refr = task->user_data;
    652a:	4cb7      	ldr	r4, [pc, #732]	; (6808 <_lv_disp_refr_task+0x2ec>)
    652c:	68eb      	ldr	r3, [r5, #12]
    652e:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
    6530:	2100      	movs	r1, #0
    6532:	4628      	mov	r0, r5
    6534:	4bb5      	ldr	r3, [pc, #724]	; (680c <_lv_disp_refr_task+0x2f0>)
    6536:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
    6538:	6820      	ldr	r0, [r4, #0]
    653a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    653c:	b17b      	cbz	r3, 655e <_lv_disp_refr_task+0x42>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    653e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6542:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6546:	2b00      	cmp	r3, #0
    6548:	f000 8278 	beq.w	6a3c <_lv_disp_refr_task+0x520>
    654c:	f04f 0848 	mov.w	r8, #72	; 0x48
    6550:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    6552:	4dad      	ldr	r5, [pc, #692]	; (6808 <_lv_disp_refr_task+0x2ec>)
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    6554:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 683c <_lv_disp_refr_task+0x320>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    6558:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 6824 <_lv_disp_refr_task+0x308>
    655c:	e04d      	b.n	65fa <_lv_disp_refr_task+0xde>
        disp_refr->inv_p = 0;
    655e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6562:	f36f 0309 	bfc	r3, #0, #10
    6566:	f8a0 3168 	strh.w	r3, [r0, #360]	; 0x168
        return;
    656a:	e262      	b.n	6a32 <_lv_disp_refr_task+0x516>
                disp_refr->inv_area_joined[join_from] = 1;
    656c:	4426      	add	r6, r4
    656e:	2301      	movs	r3, #1
    6570:	f886 3148 	strb.w	r3, [r6, #328]	; 0x148
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    6574:	3401      	adds	r4, #1
    6576:	6828      	ldr	r0, [r5, #0]
    6578:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    657c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6580:	429c      	cmp	r4, r3
    6582:	d230      	bcs.n	65e6 <_lv_disp_refr_task+0xca>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
    6584:	1903      	adds	r3, r0, r4
    6586:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    658a:	2b00      	cmp	r3, #0
    658c:	d1f2      	bne.n	6574 <_lv_disp_refr_task+0x58>
    658e:	42a7      	cmp	r7, r4
    6590:	d0f0      	beq.n	6574 <_lv_disp_refr_task+0x58>
    6592:	f104 0609 	add.w	r6, r4, #9
    6596:	00f6      	lsls	r6, r6, #3
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
    6598:	1981      	adds	r1, r0, r6
    659a:	4440      	add	r0, r8
    659c:	47d0      	blx	sl
    659e:	2800      	cmp	r0, #0
    65a0:	d0e8      	beq.n	6574 <_lv_disp_refr_task+0x58>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
    65a2:	6829      	ldr	r1, [r5, #0]
    65a4:	198a      	adds	r2, r1, r6
    65a6:	4441      	add	r1, r8
    65a8:	a80a      	add	r0, sp, #40	; 0x28
    65aa:	4b99      	ldr	r3, [pc, #612]	; (6810 <_lv_disp_refr_task+0x2f4>)
    65ac:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    65ae:	a80a      	add	r0, sp, #40	; 0x28
    65b0:	47d8      	blx	fp
    65b2:	9003      	str	r0, [sp, #12]
    65b4:	6828      	ldr	r0, [r5, #0]
    65b6:	4440      	add	r0, r8
    65b8:	47d8      	blx	fp
    65ba:	4681      	mov	r9, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
    65bc:	6828      	ldr	r0, [r5, #0]
    65be:	4430      	add	r0, r6
    65c0:	47d8      	blx	fp
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
    65c2:	4448      	add	r0, r9
    65c4:	9b03      	ldr	r3, [sp, #12]
    65c6:	4283      	cmp	r3, r0
    65c8:	d2d4      	bcs.n	6574 <_lv_disp_refr_task+0x58>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
    65ca:	682e      	ldr	r6, [r5, #0]
    65cc:	eb06 0308 	add.w	r3, r6, r8
    65d0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    65d4:	f103 0008 	add.w	r0, r3, #8
        *d8 = *s8;
    65d8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    65dc:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    65e0:	4283      	cmp	r3, r0
    65e2:	d1f9      	bne.n	65d8 <_lv_disp_refr_task+0xbc>
    65e4:	e7c2      	b.n	656c <_lv_disp_refr_task+0x50>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
    65e6:	3701      	adds	r7, #1
    65e8:	6828      	ldr	r0, [r5, #0]
    65ea:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    65ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    65f2:	f108 0808 	add.w	r8, r8, #8
    65f6:	429f      	cmp	r7, r3
    65f8:	d20e      	bcs.n	6618 <_lv_disp_refr_task+0xfc>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
    65fa:	4438      	add	r0, r7
    65fc:	f890 3148 	ldrb.w	r3, [r0, #328]	; 0x148
    6600:	2b00      	cmp	r3, #0
    6602:	d1f0      	bne.n	65e6 <_lv_disp_refr_task+0xca>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
    6604:	6828      	ldr	r0, [r5, #0]
    6606:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    660a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    660e:	2b00      	cmp	r3, #0
    6610:	f000 81fa 	beq.w	6a08 <_lv_disp_refr_task+0x4ec>
    6614:	2400      	movs	r4, #0
    6616:	e7b5      	b.n	6584 <_lv_disp_refr_task+0x68>
    px_num = 0;
    6618:	2100      	movs	r1, #0
    661a:	4a7b      	ldr	r2, [pc, #492]	; (6808 <_lv_disp_refr_task+0x2ec>)
    661c:	6051      	str	r1, [r2, #4]
    if(disp_refr->inv_p == 0) return;
    661e:	2b00      	cmp	r3, #0
    6620:	f000 81fa 	beq.w	6a18 <_lv_disp_refr_task+0x4fc>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    6624:	1e5a      	subs	r2, r3, #1
    6626:	4611      	mov	r1, r2
    6628:	9207      	str	r2, [sp, #28]
    662a:	d432      	bmi.n	6692 <_lv_disp_refr_task+0x176>
        if(disp_refr->inv_area_joined[i] == 0) {
    662c:	1882      	adds	r2, r0, r2
    662e:	f892 2148 	ldrb.w	r2, [r2, #328]	; 0x148
    6632:	b17a      	cbz	r2, 6654 <_lv_disp_refr_task+0x138>
    6634:	f203 1347 	addw	r3, r3, #327	; 0x147
    6638:	4403      	add	r3, r0
    663a:	460a      	mov	r2, r1
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
    663c:	3a01      	subs	r2, #1
    663e:	f1b2 3fff 	cmp.w	r2, #4294967295
    6642:	d005      	beq.n	6650 <_lv_disp_refr_task+0x134>
        if(disp_refr->inv_area_joined[i] == 0) {
    6644:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    6648:	2900      	cmp	r1, #0
    664a:	d1f7      	bne.n	663c <_lv_disp_refr_task+0x120>
    664c:	9207      	str	r2, [sp, #28]
    664e:	e001      	b.n	6654 <_lv_disp_refr_task+0x138>
    int32_t last_i = 0;
    6650:	2300      	movs	r3, #0
    6652:	9307      	str	r3, [sp, #28]
    disp_refr->driver.buffer->last_area = 0;
    6654:	6842      	ldr	r2, [r0, #4]
    6656:	f892 3020 	ldrb.w	r3, [r2, #32]
    665a:	f36f 0300 	bfc	r3, #0, #1
    665e:	f882 3020 	strb.w	r3, [r2, #32]
    disp_refr->driver.buffer->last_part = 0;
    6662:	6842      	ldr	r2, [r0, #4]
    6664:	f892 3020 	ldrb.w	r3, [r2, #32]
    6668:	f36f 0341 	bfc	r3, #1, #1
    666c:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
    6670:	4b65      	ldr	r3, [pc, #404]	; (6808 <_lv_disp_refr_task+0x2ec>)
    6672:	681c      	ldr	r4, [r3, #0]
    6674:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
    6678:	f3c3 0309 	ubfx	r3, r3, #0, #10
    667c:	2b00      	cmp	r3, #0
    667e:	f000 81cb 	beq.w	6a18 <_lv_disp_refr_task+0x4fc>
    6682:	2348      	movs	r3, #72	; 0x48
    6684:	9306      	str	r3, [sp, #24]
    6686:	f04f 0a00 	mov.w	sl, #0
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    668a:	f8df b17c 	ldr.w	fp, [pc, #380]	; 6808 <_lv_disp_refr_task+0x2ec>
    668e:	4627      	mov	r7, r4
    6690:	e045      	b.n	671e <_lv_disp_refr_task+0x202>
    int32_t last_i = 0;
    6692:	2300      	movs	r3, #0
    6694:	9307      	str	r3, [sp, #28]
    6696:	e7dd      	b.n	6654 <_lv_disp_refr_task+0x138>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    6698:	687a      	ldr	r2, [r7, #4]
    669a:	f892 3020 	ldrb.w	r3, [r2, #32]
    669e:	f043 0301 	orr.w	r3, r3, #1
    66a2:	f882 3020 	strb.w	r3, [r2, #32]
    66a6:	e043      	b.n	6730 <_lv_disp_refr_task+0x214>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    66a8:	f8db 0000 	ldr.w	r0, [fp]
    66ac:	4b59      	ldr	r3, [pc, #356]	; (6814 <_lv_disp_refr_task+0x2f8>)
    66ae:	4798      	blx	r3
    66b0:	4604      	mov	r4, r0
        vdb->area.x1        = 0;
    66b2:	2500      	movs	r5, #0
    66b4:	8205      	strh	r5, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
    66b6:	f8db 0000 	ldr.w	r0, [fp]
    66ba:	4b57      	ldr	r3, [pc, #348]	; (6818 <_lv_disp_refr_task+0x2fc>)
    66bc:	4798      	blx	r3
    66be:	3801      	subs	r0, #1
    66c0:	82a0      	strh	r0, [r4, #20]
        vdb->area.y1        = 0;
    66c2:	8265      	strh	r5, [r4, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
    66c4:	f8db 0000 	ldr.w	r0, [fp]
    66c8:	4b54      	ldr	r3, [pc, #336]	; (681c <_lv_disp_refr_task+0x300>)
    66ca:	4798      	blx	r3
    66cc:	3801      	subs	r0, #1
    66ce:	82e0      	strh	r0, [r4, #22]
        disp_refr->driver.buffer->last_part = 1;
    66d0:	f8db 3000 	ldr.w	r3, [fp]
    66d4:	685a      	ldr	r2, [r3, #4]
    66d6:	f892 3020 	ldrb.w	r3, [r2, #32]
    66da:	f043 0302 	orr.w	r3, r3, #2
    66de:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
    66e2:	9803      	ldr	r0, [sp, #12]
    66e4:	4b4e      	ldr	r3, [pc, #312]	; (6820 <_lv_disp_refr_task+0x304>)
    66e6:	4798      	blx	r3
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
    66e8:	f8db 0000 	ldr.w	r0, [fp]
    66ec:	6983      	ldr	r3, [r0, #24]
    66ee:	b143      	cbz	r3, 6702 <_lv_disp_refr_task+0x1e6>
    66f0:	9b06      	ldr	r3, [sp, #24]
    66f2:	4418      	add	r0, r3
    66f4:	4b4b      	ldr	r3, [pc, #300]	; (6824 <_lv_disp_refr_task+0x308>)
    66f6:	4798      	blx	r3
    66f8:	f8db 3004 	ldr.w	r3, [fp, #4]
    66fc:	4403      	add	r3, r0
    66fe:	f8cb 3004 	str.w	r3, [fp, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
    6702:	f10a 0a01 	add.w	sl, sl, #1
    6706:	f8db 7000 	ldr.w	r7, [fp]
    670a:	9b06      	ldr	r3, [sp, #24]
    670c:	3308      	adds	r3, #8
    670e:	9306      	str	r3, [sp, #24]
    6710:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
    6714:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6718:	459a      	cmp	sl, r3
    671a:	f280 817d 	bge.w	6a18 <_lv_disp_refr_task+0x4fc>
        if(disp_refr->inv_area_joined[i] == 0) {
    671e:	eb07 030a 	add.w	r3, r7, sl
    6722:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
    6726:	2b00      	cmp	r3, #0
    6728:	d1eb      	bne.n	6702 <_lv_disp_refr_task+0x1e6>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
    672a:	9b07      	ldr	r3, [sp, #28]
    672c:	4553      	cmp	r3, sl
    672e:	d0b3      	beq.n	6698 <_lv_disp_refr_task+0x17c>
            disp_refr->driver.buffer->last_part = 0;
    6730:	687a      	ldr	r2, [r7, #4]
    6732:	f892 3020 	ldrb.w	r3, [r2, #32]
    6736:	f36f 0341 	bfc	r3, #1, #1
    673a:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
    673e:	9b06      	ldr	r3, [sp, #24]
    6740:	18fb      	adds	r3, r7, r3
    6742:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
    6744:	4638      	mov	r0, r7
    6746:	4b38      	ldr	r3, [pc, #224]	; (6828 <_lv_disp_refr_task+0x30c>)
    6748:	4798      	blx	r3
    674a:	2800      	cmp	r0, #0
    674c:	d1ac      	bne.n	66a8 <_lv_disp_refr_task+0x18c>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    674e:	f8db 0000 	ldr.w	r0, [fp]
    6752:	4b30      	ldr	r3, [pc, #192]	; (6814 <_lv_disp_refr_task+0x2f8>)
    6754:	4798      	blx	r3
    6756:	4606      	mov	r6, r0
    6758:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    675c:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
    6760:	3401      	adds	r4, #1
    6762:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    6766:	1ae4      	subs	r4, r4, r3
    6768:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    676a:	f9b7 504e 	ldrsh.w	r5, [r7, #78]	; 0x4e
    676e:	f105 0801 	add.w	r8, r5, #1
    6772:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    6776:	eba8 0803 	sub.w	r8, r8, r3
    677a:	fa0f f888 	sxth.w	r8, r8
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    677e:	f8db 0000 	ldr.w	r0, [fp]
    6782:	4b26      	ldr	r3, [pc, #152]	; (681c <_lv_disp_refr_task+0x300>)
    6784:	4798      	blx	r3
        lv_coord_t y2 =
    6786:	4285      	cmp	r5, r0
    6788:	da34      	bge.n	67f4 <_lv_disp_refr_task+0x2d8>
    678a:	f9b7 904e 	ldrsh.w	r9, [r7, #78]	; 0x4e
        int32_t max_row = (uint32_t)vdb->size / w;
    678e:	68f3      	ldr	r3, [r6, #12]
    6790:	fbb3 f3f4 	udiv	r3, r3, r4
    6794:	4598      	cmp	r8, r3
    6796:	bfa8      	it	ge
    6798:	4698      	movge	r8, r3
        if(disp_refr->driver.rounder_cb) {
    679a:	f8db 3000 	ldr.w	r3, [fp]
    679e:	691b      	ldr	r3, [r3, #16]
    67a0:	2b00      	cmp	r3, #0
    67a2:	d052      	beq.n	684a <_lv_disp_refr_task+0x32e>
            tmp.x1 = 0;
    67a4:	2300      	movs	r3, #0
    67a6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            tmp.x2 = 0;
    67aa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            tmp.y1 = 0;
    67ae:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            lv_coord_t h_tmp = max_row;
    67b2:	fa0f f588 	sxth.w	r5, r8
    67b6:	1e6c      	subs	r4, r5, #1
    67b8:	b224      	sxth	r4, r4
                tmp.y2 = h_tmp - 1;
    67ba:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
    67be:	f8db 0000 	ldr.w	r0, [fp]
    67c2:	6903      	ldr	r3, [r0, #16]
    67c4:	a90a      	add	r1, sp, #40	; 0x28
    67c6:	4798      	blx	r3
    67c8:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    67cc:	1c4b      	adds	r3, r1, #1
    67ce:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
    67d2:	1a9b      	subs	r3, r3, r2
                if(lv_area_get_height(&tmp) <= max_row) break;
    67d4:	b21b      	sxth	r3, r3
    67d6:	4598      	cmp	r8, r3
    67d8:	da32      	bge.n	6840 <_lv_disp_refr_task+0x324>
                h_tmp--;
    67da:	4625      	mov	r5, r4
            } while(h_tmp > 0);
    67dc:	2c00      	cmp	r4, #0
    67de:	dcea      	bgt.n	67b6 <_lv_disp_refr_task+0x29a>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
    67e0:	4b12      	ldr	r3, [pc, #72]	; (682c <_lv_disp_refr_task+0x310>)
    67e2:	9300      	str	r3, [sp, #0]
    67e4:	4b12      	ldr	r3, [pc, #72]	; (6830 <_lv_disp_refr_task+0x314>)
    67e6:	f240 129f 	movw	r2, #415	; 0x19f
    67ea:	4912      	ldr	r1, [pc, #72]	; (6834 <_lv_disp_refr_task+0x318>)
    67ec:	2002      	movs	r0, #2
    67ee:	4c12      	ldr	r4, [pc, #72]	; (6838 <_lv_disp_refr_task+0x31c>)
    67f0:	47a0      	blx	r4
    67f2:	e779      	b.n	66e8 <_lv_disp_refr_task+0x1cc>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
    67f4:	f8db 0000 	ldr.w	r0, [fp]
    67f8:	4b08      	ldr	r3, [pc, #32]	; (681c <_lv_disp_refr_task+0x300>)
    67fa:	4798      	blx	r3
    67fc:	3801      	subs	r0, #1
        lv_coord_t y2 =
    67fe:	fa0f f980 	sxth.w	r9, r0
    6802:	e7c4      	b.n	678e <_lv_disp_refr_task+0x272>
    6804:	00011601 	.word	0x00011601
    6808:	20002688 	.word	0x20002688
    680c:	00013f01 	.word	0x00013f01
    6810:	00011b17 	.word	0x00011b17
    6814:	00011585 	.word	0x00011585
    6818:	00011495 	.word	0x00011495
    681c:	000114bd 	.word	0x000114bd
    6820:	00006361 	.word	0x00006361
    6824:	00011aa5 	.word	0x00011aa5
    6828:	0001159d 	.word	0x0001159d
    682c:	0001bf10 	.word	0x0001bf10
    6830:	0001bed4 	.word	0x0001bed4
    6834:	0001bee4 	.word	0x0001bee4
    6838:	00012805 	.word	0x00012805
    683c:	00011cd1 	.word	0x00011cd1
            if(h_tmp <= 0) {
    6840:	2d00      	cmp	r5, #0
                max_row = tmp.y2 + 1;
    6842:	bfc8      	it	gt
    6844:	f101 0801 	addgt.w	r8, r1, #1
            if(h_tmp <= 0) {
    6848:	ddca      	ble.n	67e0 <_lv_disp_refr_task+0x2c4>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    684a:	f9b7 404a 	ldrsh.w	r4, [r7, #74]	; 0x4a
    684e:	f8cd 9010 	str.w	r9, [sp, #16]
    6852:	eb04 0308 	add.w	r3, r4, r8
    6856:	3b01      	subs	r3, #1
    6858:	454b      	cmp	r3, r9
    685a:	dc4b      	bgt.n	68f4 <_lv_disp_refr_task+0x3d8>
            vdb->area.y2 = row + max_row - 1;
    685c:	fa1f f388 	uxth.w	r3, r8
    6860:	9305      	str	r3, [sp, #20]
    6862:	3b01      	subs	r3, #1
    6864:	f8cd a020 	str.w	sl, [sp, #32]
    6868:	469a      	mov	sl, r3
    686a:	e00d      	b.n	6888 <_lv_disp_refr_task+0x36c>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    686c:	45a9      	cmp	r9, r5
    686e:	d01c      	beq.n	68aa <_lv_disp_refr_task+0x38e>
            lv_refr_area_part(area_p);
    6870:	9803      	ldr	r0, [sp, #12]
    6872:	4b78      	ldr	r3, [pc, #480]	; (6a54 <_lv_disp_refr_task+0x538>)
    6874:	4798      	blx	r3
    6876:	9b05      	ldr	r3, [sp, #20]
    6878:	441c      	add	r4, r3
    687a:	b224      	sxth	r4, r4
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
    687c:	eb04 0308 	add.w	r3, r4, r8
    6880:	3b01      	subs	r3, #1
    6882:	9a04      	ldr	r2, [sp, #16]
    6884:	4293      	cmp	r3, r2
    6886:	dc1a      	bgt.n	68be <_lv_disp_refr_task+0x3a2>
            vdb->area.x1 = area_p->x1;
    6888:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    688c:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    688e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    6892:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    6894:	8274      	strh	r4, [r6, #18]
    6896:	b2a4      	uxth	r4, r4
    6898:	eb04 050a 	add.w	r5, r4, sl
    689c:	b22d      	sxth	r5, r5
            vdb->area.y2 = row + max_row - 1;
    689e:	82f5      	strh	r5, [r6, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
    68a0:	45a9      	cmp	r9, r5
    68a2:	dae3      	bge.n	686c <_lv_disp_refr_task+0x350>
    68a4:	f8a6 9016 	strh.w	r9, [r6, #22]
            row_last = vdb->area.y2;
    68a8:	464d      	mov	r5, r9
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
    68aa:	f8db 3000 	ldr.w	r3, [fp]
    68ae:	685a      	ldr	r2, [r3, #4]
    68b0:	f892 3020 	ldrb.w	r3, [r2, #32]
    68b4:	f043 0302 	orr.w	r3, r3, #2
    68b8:	f882 3020 	strb.w	r3, [r2, #32]
    68bc:	e7d8      	b.n	6870 <_lv_disp_refr_task+0x354>
    68be:	f8dd a020 	ldr.w	sl, [sp, #32]
        if(y2 != row_last) {
    68c2:	45a9      	cmp	r9, r5
    68c4:	f43f af10 	beq.w	66e8 <_lv_disp_refr_task+0x1cc>
            vdb->area.x1 = area_p->x1;
    68c8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    68cc:	8233      	strh	r3, [r6, #16]
            vdb->area.x2 = area_p->x2;
    68ce:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    68d2:	82b3      	strh	r3, [r6, #20]
            vdb->area.y1 = row;
    68d4:	8274      	strh	r4, [r6, #18]
            vdb->area.y2 = y2;
    68d6:	f8a6 9016 	strh.w	r9, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
    68da:	f8db 3000 	ldr.w	r3, [fp]
    68de:	685a      	ldr	r2, [r3, #4]
    68e0:	f892 3020 	ldrb.w	r3, [r2, #32]
    68e4:	f043 0302 	orr.w	r3, r3, #2
    68e8:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
    68ec:	9803      	ldr	r0, [sp, #12]
    68ee:	4b59      	ldr	r3, [pc, #356]	; (6a54 <_lv_disp_refr_task+0x538>)
    68f0:	4798      	blx	r3
    68f2:	e6f9      	b.n	66e8 <_lv_disp_refr_task+0x1cc>
        lv_coord_t row_last = 0;
    68f4:	2500      	movs	r5, #0
    68f6:	e7e4      	b.n	68c2 <_lv_disp_refr_task+0x3a6>
        if(lv_disp_is_true_double_buf(disp_refr) && disp_refr->driver.set_px_cb == NULL) {
    68f8:	4b57      	ldr	r3, [pc, #348]	; (6a58 <_lv_disp_refr_task+0x53c>)
    68fa:	4798      	blx	r3
    68fc:	b118      	cbz	r0, 6906 <_lv_disp_refr_task+0x3ea>
    68fe:	4b57      	ldr	r3, [pc, #348]	; (6a5c <_lv_disp_refr_task+0x540>)
    6900:	6818      	ldr	r0, [r3, #0]
    6902:	6943      	ldr	r3, [r0, #20]
    6904:	b1eb      	cbz	r3, 6942 <_lv_disp_refr_task+0x426>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
    6906:	4c55      	ldr	r4, [pc, #340]	; (6a5c <_lv_disp_refr_task+0x540>)
    6908:	6820      	ldr	r0, [r4, #0]
    690a:	f44f 7180 	mov.w	r1, #256	; 0x100
    690e:	3048      	adds	r0, #72	; 0x48
    6910:	4d53      	ldr	r5, [pc, #332]	; (6a60 <_lv_disp_refr_task+0x544>)
    6912:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
    6914:	6820      	ldr	r0, [r4, #0]
    6916:	2120      	movs	r1, #32
    6918:	f500 70a4 	add.w	r0, r0, #328	; 0x148
    691c:	47a8      	blx	r5
        disp_refr->inv_p = 0;
    691e:	6823      	ldr	r3, [r4, #0]
    6920:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    6924:	f36f 0209 	bfc	r2, #0, #10
    6928:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
        elaps = lv_tick_elaps(start);
    692c:	9809      	ldr	r0, [sp, #36]	; 0x24
    692e:	4b4d      	ldr	r3, [pc, #308]	; (6a64 <_lv_disp_refr_task+0x548>)
    6930:	4798      	blx	r3
    6932:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
    6934:	6820      	ldr	r0, [r4, #0]
    6936:	6983      	ldr	r3, [r0, #24]
    6938:	2b00      	cmp	r3, #0
    693a:	d076      	beq.n	6a2a <_lv_disp_refr_task+0x50e>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
    693c:	6862      	ldr	r2, [r4, #4]
    693e:	4798      	blx	r3
    6940:	e073      	b.n	6a2a <_lv_disp_refr_task+0x50e>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
    6942:	4b49      	ldr	r3, [pc, #292]	; (6a68 <_lv_disp_refr_task+0x54c>)
    6944:	4798      	blx	r3
    6946:	4604      	mov	r4, r0
            lv_refr_vdb_flush();
    6948:	4b48      	ldr	r3, [pc, #288]	; (6a6c <_lv_disp_refr_task+0x550>)
    694a:	4798      	blx	r3
            while(vdb->flushing)
    694c:	69a3      	ldr	r3, [r4, #24]
    694e:	2b00      	cmp	r3, #0
    6950:	d1fc      	bne.n	694c <_lv_disp_refr_task+0x430>
            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
    6952:	68a3      	ldr	r3, [r4, #8]
    6954:	9303      	str	r3, [sp, #12]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
    6956:	f8d4 a000 	ldr.w	sl, [r4]
    695a:	4553      	cmp	r3, sl
    695c:	bf08      	it	eq
    695e:	f8d4 a004 	ldreq.w	sl, [r4, #4]
            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
    6962:	4c3e      	ldr	r4, [pc, #248]	; (6a5c <_lv_disp_refr_task+0x540>)
    6964:	6820      	ldr	r0, [r4, #0]
    6966:	4b42      	ldr	r3, [pc, #264]	; (6a70 <_lv_disp_refr_task+0x554>)
    6968:	4798      	blx	r3
    696a:	9004      	str	r0, [sp, #16]
            for(a = 0; a < disp_refr->inv_p; a++) {
    696c:	6823      	ldr	r3, [r4, #0]
    696e:	f8b3 2168 	ldrh.w	r2, [r3, #360]	; 0x168
    6972:	f3c2 0209 	ubfx	r2, r2, #0, #10
    6976:	2a00      	cmp	r2, #0
    6978:	d0c5      	beq.n	6906 <_lv_disp_refr_task+0x3ea>
                        start_offs += hres * sizeof(lv_color_t);
    697a:	0045      	lsls	r5, r0, #1
    697c:	2200      	movs	r2, #0
    697e:	4690      	mov	r8, r2
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    6980:	46a1      	mov	r9, r4
    6982:	e00c      	b.n	699e <_lv_disp_refr_task+0x482>
            for(a = 0; a < disp_refr->inv_p; a++) {
    6984:	f108 0801 	add.w	r8, r8, #1
    6988:	fa1f f888 	uxth.w	r8, r8
    698c:	4642      	mov	r2, r8
    698e:	f8d9 3000 	ldr.w	r3, [r9]
    6992:	f8b3 1168 	ldrh.w	r1, [r3, #360]	; 0x168
    6996:	f3c1 0109 	ubfx	r1, r1, #0, #10
    699a:	4588      	cmp	r8, r1
    699c:	dab3      	bge.n	6906 <_lv_disp_refr_task+0x3ea>
                if(disp_refr->inv_area_joined[a] == 0) {
    699e:	1899      	adds	r1, r3, r2
    69a0:	f891 1148 	ldrb.w	r1, [r1, #328]	; 0x148
    69a4:	2900      	cmp	r1, #0
    69a6:	d1ed      	bne.n	6984 <_lv_disp_refr_task+0x468>
    69a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
    69ac:	f9b3 704a 	ldrsh.w	r7, [r3, #74]	; 0x4a
    69b0:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	; 0x48
    69b4:	9804      	ldr	r0, [sp, #16]
    69b6:	fb07 1600 	mla	r6, r7, r0, r1
                    uint32_t start_offs =
    69ba:	0076      	lsls	r6, r6, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    69bc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    69c0:	3301      	adds	r3, #1
    69c2:	1a5b      	subs	r3, r3, r1
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
    69c4:	b21b      	sxth	r3, r3
    69c6:	005b      	lsls	r3, r3, #1
    69c8:	9305      	str	r3, [sp, #20]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    69ca:	f8d9 3000 	ldr.w	r3, [r9]
    69ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    69d2:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
    69d6:	42bb      	cmp	r3, r7
    69d8:	dbd4      	blt.n	6984 <_lv_disp_refr_task+0x468>
    69da:	9b03      	ldr	r3, [sp, #12]
    69dc:	eb03 0b06 	add.w	fp, r3, r6
    69e0:	4456      	add	r6, sl
    69e2:	3209      	adds	r2, #9
    69e4:	00d4      	lsls	r4, r2, #3
                        _lv_memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
    69e6:	9a05      	ldr	r2, [sp, #20]
    69e8:	4631      	mov	r1, r6
    69ea:	4658      	mov	r0, fp
    69ec:	4b21      	ldr	r3, [pc, #132]	; (6a74 <_lv_disp_refr_task+0x558>)
    69ee:	4798      	blx	r3
    69f0:	3701      	adds	r7, #1
    69f2:	b23f      	sxth	r7, r7
    69f4:	44ab      	add	fp, r5
    69f6:	442e      	add	r6, r5
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
    69f8:	f8d9 3000 	ldr.w	r3, [r9]
    69fc:	4423      	add	r3, r4
    69fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    6a02:	42bb      	cmp	r3, r7
    6a04:	daef      	bge.n	69e6 <_lv_disp_refr_task+0x4ca>
    6a06:	e7bd      	b.n	6984 <_lv_disp_refr_task+0x468>
    px_num = 0;
    6a08:	2200      	movs	r2, #0
    6a0a:	4b14      	ldr	r3, [pc, #80]	; (6a5c <_lv_disp_refr_task+0x540>)
    6a0c:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    6a0e:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6a16:	b97b      	cbnz	r3, 6a38 <_lv_disp_refr_task+0x51c>
    if(disp_refr->inv_p != 0) {
    6a18:	4b10      	ldr	r3, [pc, #64]	; (6a5c <_lv_disp_refr_task+0x540>)
    6a1a:	6818      	ldr	r0, [r3, #0]
    6a1c:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6a24:	2b00      	cmp	r3, #0
    6a26:	f47f af67 	bne.w	68f8 <_lv_disp_refr_task+0x3dc>
    _lv_mem_buf_free_all();
    6a2a:	4b13      	ldr	r3, [pc, #76]	; (6a78 <_lv_disp_refr_task+0x55c>)
    6a2c:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
    6a2e:	4b13      	ldr	r3, [pc, #76]	; (6a7c <_lv_disp_refr_task+0x560>)
    6a30:	4798      	blx	r3
}
    6a32:	b00d      	add	sp, #52	; 0x34
    6a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t last_i = 0;
    6a38:	9207      	str	r2, [sp, #28]
    6a3a:	e60b      	b.n	6654 <_lv_disp_refr_task+0x138>
    px_num = 0;
    6a3c:	2200      	movs	r2, #0
    6a3e:	4b07      	ldr	r3, [pc, #28]	; (6a5c <_lv_disp_refr_task+0x540>)
    6a40:	605a      	str	r2, [r3, #4]
    if(disp_refr->inv_p == 0) return;
    6a42:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
    6a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d0ed      	beq.n	6a2a <_lv_disp_refr_task+0x50e>
    int32_t last_i = 0;
    6a4e:	9207      	str	r2, [sp, #28]
    6a50:	e600      	b.n	6654 <_lv_disp_refr_task+0x138>
    6a52:	bf00      	nop
    6a54:	00006361 	.word	0x00006361
    6a58:	0001159d 	.word	0x0001159d
    6a5c:	20002688 	.word	0x20002688
    6a60:	000130df 	.word	0x000130df
    6a64:	00011619 	.word	0x00011619
    6a68:	00011585 	.word	0x00011585
    6a6c:	000062e9 	.word	0x000062e9
    6a70:	00011495 	.word	0x00011495
    6a74:	00012bfd 	.word	0x00012bfd
    6a78:	00012ba1 	.word	0x00012ba1
    6a7c:	0001129d 	.word	0x0001129d

00006a80 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
    6a80:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
    6a82:	2104      	movs	r1, #4
    6a84:	4b01      	ldr	r3, [pc, #4]	; (6a8c <lv_style_init+0xc>)
    6a86:	4798      	blx	r3
    6a88:	bd08      	pop	{r3, pc}
    6a8a:	bf00      	nop
    6a8c:	000130df 	.word	0x000130df

00006a90 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
    6a90:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
    6a92:	2108      	movs	r1, #8
    6a94:	4b01      	ldr	r3, [pc, #4]	; (6a9c <lv_style_list_init+0xc>)
    6a96:	4798      	blx	r3
    6a98:	bd08      	pop	{r3, pc}
    6a9a:	bf00      	nop
    6a9c:	000130df 	.word	0x000130df

00006aa0 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
    6aa0:	b570      	push	{r4, r5, r6, lr}
    6aa2:	b082      	sub	sp, #8
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
    6aa4:	7906      	ldrb	r6, [r0, #4]
    6aa6:	2e00      	cmp	r6, #0
    6aa8:	d055      	beq.n	6b56 <_lv_style_list_remove_style+0xb6>
    6aaa:	4604      	mov	r4, r0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
        if(list->style_list[i] == style) {
    6aac:	6800      	ldr	r0, [r0, #0]
    6aae:	6803      	ldr	r3, [r0, #0]
    6ab0:	4299      	cmp	r1, r3
    6ab2:	d00a      	beq.n	6aca <_lv_style_list_remove_style+0x2a>
    6ab4:	4603      	mov	r3, r0
    6ab6:	1e75      	subs	r5, r6, #1
    6ab8:	b2ed      	uxtb	r5, r5
    6aba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    for(i = 0; i < list->style_cnt; i++) {
    6abe:	429d      	cmp	r5, r3
    6ac0:	d049      	beq.n	6b56 <_lv_style_list_remove_style+0xb6>
        if(list->style_list[i] == style) {
    6ac2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6ac6:	428a      	cmp	r2, r1
    6ac8:	d1f9      	bne.n	6abe <_lv_style_list_remove_style+0x1e>
    6aca:	460d      	mov	r5, r1
            break;
        }
    }
    if(found == false) return;

    if(list->style_cnt == 1) {
    6acc:	2e01      	cmp	r6, #1
    6ace:	d00e      	beq.n	6aee <_lv_style_list_remove_style+0x4e>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt - 1));
    6ad0:	1e71      	subs	r1, r6, #1
    6ad2:	0089      	lsls	r1, r1, #2
    6ad4:	4b21      	ldr	r3, [pc, #132]	; (6b5c <_lv_style_list_remove_style+0xbc>)
    6ad6:	4798      	blx	r3
    6ad8:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
    6ada:	4b21      	ldr	r3, [pc, #132]	; (6b60 <_lv_style_list_remove_style+0xc0>)
    6adc:	4798      	blx	r3
    6ade:	b180      	cbz	r0, 6b02 <_lv_style_list_remove_style+0x62>
    if(new_classes == NULL) {
    6ae0:	b1ee      	cbz	r6, 6b1e <_lv_style_list_remove_style+0x7e>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    6ae2:	7921      	ldrb	r1, [r4, #4]
    6ae4:	2900      	cmp	r1, #0
    6ae6:	d033      	beq.n	6b50 <_lv_style_list_remove_style+0xb0>
    6ae8:	2200      	movs	r2, #0
    6aea:	4613      	mov	r3, r2
    6aec:	e026      	b.n	6b3c <_lv_style_list_remove_style+0x9c>
        lv_mem_free(list->style_list);
    6aee:	4b1d      	ldr	r3, [pc, #116]	; (6b64 <_lv_style_list_remove_style+0xc4>)
    6af0:	4798      	blx	r3
        list->style_list = NULL;
    6af2:	2300      	movs	r3, #0
    6af4:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
    6af6:	7123      	strb	r3, [r4, #4]
        list->has_local = 0;
    6af8:	7962      	ldrb	r2, [r4, #5]
    6afa:	f363 0200 	bfi	r2, r3, #0, #1
    6afe:	7162      	strb	r2, [r4, #5]
        return;
    6b00:	e029      	b.n	6b56 <_lv_style_list_remove_style+0xb6>
    LV_ASSERT_MEM(new_classes);
    6b02:	4b19      	ldr	r3, [pc, #100]	; (6b68 <_lv_style_list_remove_style+0xc8>)
    6b04:	9300      	str	r3, [sp, #0]
    6b06:	f44f 7282 	mov.w	r2, #260	; 0x104
    6b0a:	4918      	ldr	r1, [pc, #96]	; (6b6c <_lv_style_list_remove_style+0xcc>)
    6b0c:	2003      	movs	r0, #3
    6b0e:	4c18      	ldr	r4, [pc, #96]	; (6b70 <_lv_style_list_remove_style+0xd0>)
    6b10:	47a0      	blx	r4
    6b12:	4632      	mov	r2, r6
    6b14:	2300      	movs	r3, #0
    6b16:	4817      	ldr	r0, [pc, #92]	; (6b74 <_lv_style_list_remove_style+0xd4>)
    6b18:	4917      	ldr	r1, [pc, #92]	; (6b78 <_lv_style_list_remove_style+0xd8>)
    6b1a:	4788      	blx	r1
    6b1c:	e7fe      	b.n	6b1c <_lv_style_list_remove_style+0x7c>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
    6b1e:	4b17      	ldr	r3, [pc, #92]	; (6b7c <_lv_style_list_remove_style+0xdc>)
    6b20:	9300      	str	r3, [sp, #0]
    6b22:	4b11      	ldr	r3, [pc, #68]	; (6b68 <_lv_style_list_remove_style+0xc8>)
    6b24:	f44f 7283 	mov.w	r2, #262	; 0x106
    6b28:	4910      	ldr	r1, [pc, #64]	; (6b6c <_lv_style_list_remove_style+0xcc>)
    6b2a:	2002      	movs	r0, #2
    6b2c:	4c10      	ldr	r4, [pc, #64]	; (6b70 <_lv_style_list_remove_style+0xd0>)
    6b2e:	47a0      	blx	r4
        return;
    6b30:	e011      	b.n	6b56 <_lv_style_list_remove_style+0xb6>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
    6b32:	3301      	adds	r3, #1
    6b34:	b2db      	uxtb	r3, r3
    6b36:	7921      	ldrb	r1, [r4, #4]
    6b38:	4299      	cmp	r1, r3
    6b3a:	d909      	bls.n	6b50 <_lv_style_list_remove_style+0xb0>
        if(list->style_list[i] == style) continue;
    6b3c:	6821      	ldr	r1, [r4, #0]
    6b3e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6b42:	428d      	cmp	r5, r1
    6b44:	d0f5      	beq.n	6b32 <_lv_style_list_remove_style+0x92>
        new_classes[j] = list->style_list[i];
    6b46:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        j++;
    6b4a:	3201      	adds	r2, #1
    6b4c:	b2d2      	uxtb	r2, r2
    6b4e:	e7f0      	b.n	6b32 <_lv_style_list_remove_style+0x92>

    }

    list->style_cnt--;
    6b50:	3901      	subs	r1, #1
    6b52:	7121      	strb	r1, [r4, #4]
    list->style_list = new_classes;
    6b54:	6026      	str	r6, [r4, #0]
}
    6b56:	b002      	add	sp, #8
    6b58:	bd70      	pop	{r4, r5, r6, pc}
    6b5a:	bf00      	nop
    6b5c:	00012e41 	.word	0x00012e41
    6b60:	0000298d 	.word	0x0000298d
    6b64:	00012a6d 	.word	0x00012a6d
    6b68:	0001bf60 	.word	0x0001bf60
    6b6c:	0001c020 	.word	0x0001c020
    6b70:	00012805 	.word	0x00012805
    6b74:	0001b4bc 	.word	0x0001b4bc
    6b78:	00002995 	.word	0x00002995
    6b7c:	0001c04c 	.word	0x0001c04c

00006b80 <_lv_style_list_add_style>:
    if(list == NULL) return;
    6b80:	2800      	cmp	r0, #0
    6b82:	d051      	beq.n	6c28 <_lv_style_list_add_style+0xa8>
{
    6b84:	b570      	push	{r4, r5, r6, lr}
    6b86:	b082      	sub	sp, #8
    6b88:	4604      	mov	r4, r0
    6b8a:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
    6b8c:	4b27      	ldr	r3, [pc, #156]	; (6c2c <_lv_style_list_add_style+0xac>)
    6b8e:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
    6b90:	7923      	ldrb	r3, [r4, #4]
    6b92:	bb63      	cbnz	r3, 6bee <_lv_style_list_add_style+0x6e>
    6b94:	2004      	movs	r0, #4
    6b96:	4b26      	ldr	r3, [pc, #152]	; (6c30 <_lv_style_list_add_style+0xb0>)
    6b98:	4798      	blx	r3
    6b9a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
    6b9c:	4628      	mov	r0, r5
    6b9e:	4b25      	ldr	r3, [pc, #148]	; (6c34 <_lv_style_list_add_style+0xb4>)
    6ba0:	4798      	blx	r3
    6ba2:	b358      	cbz	r0, 6bfc <_lv_style_list_add_style+0x7c>
    if(new_classes == NULL) {
    6ba4:	2d00      	cmp	r5, #0
    6ba6:	d036      	beq.n	6c16 <_lv_style_list_add_style+0x96>
    if(list->has_trans) first_style++;
    6ba8:	7963      	ldrb	r3, [r4, #5]
    uint8_t first_style = 0;
    6baa:	f3c3 0040 	ubfx	r0, r3, #1, #1
    if(list->has_local) first_style++;
    6bae:	f013 0f01 	tst.w	r3, #1
    6bb2:	bf18      	it	ne
    6bb4:	3001      	addne	r0, #1
    for(i = list->style_cnt; i > first_style; i--) {
    6bb6:	7923      	ldrb	r3, [r4, #4]
    6bb8:	4298      	cmp	r0, r3
    6bba:	d210      	bcs.n	6bde <_lv_style_list_add_style+0x5e>
    6bbc:	eb05 0183 	add.w	r1, r5, r3, lsl #2
    6bc0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6bc4:	3a01      	subs	r2, #1
    6bc6:	3b01      	subs	r3, #1
    6bc8:	1a1b      	subs	r3, r3, r0
    6bca:	b2db      	uxtb	r3, r3
    6bcc:	1ad3      	subs	r3, r2, r3
    6bce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
        new_classes[i] = new_classes[i - 1];
    6bd2:	f851 2c04 	ldr.w	r2, [r1, #-4]
    6bd6:	f841 2904 	str.w	r2, [r1], #-4
    for(i = list->style_cnt; i > first_style; i--) {
    6bda:	4299      	cmp	r1, r3
    6bdc:	d1f9      	bne.n	6bd2 <_lv_style_list_add_style+0x52>
    new_classes[first_style] = style;
    6bde:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
    list->style_cnt++;
    6be2:	7923      	ldrb	r3, [r4, #4]
    6be4:	3301      	adds	r3, #1
    6be6:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
    6be8:	6025      	str	r5, [r4, #0]
}
    6bea:	b002      	add	sp, #8
    6bec:	bd70      	pop	{r4, r5, r6, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
    6bee:	3301      	adds	r3, #1
    6bf0:	0099      	lsls	r1, r3, #2
    6bf2:	6820      	ldr	r0, [r4, #0]
    6bf4:	4b10      	ldr	r3, [pc, #64]	; (6c38 <_lv_style_list_add_style+0xb8>)
    6bf6:	4798      	blx	r3
    6bf8:	4605      	mov	r5, r0
    6bfa:	e7cf      	b.n	6b9c <_lv_style_list_add_style+0x1c>
    LV_ASSERT_MEM(new_classes);
    6bfc:	4b0f      	ldr	r3, [pc, #60]	; (6c3c <_lv_style_list_add_style+0xbc>)
    6bfe:	9300      	str	r3, [sp, #0]
    6c00:	22d0      	movs	r2, #208	; 0xd0
    6c02:	490f      	ldr	r1, [pc, #60]	; (6c40 <_lv_style_list_add_style+0xc0>)
    6c04:	2003      	movs	r0, #3
    6c06:	4c0f      	ldr	r4, [pc, #60]	; (6c44 <_lv_style_list_add_style+0xc4>)
    6c08:	47a0      	blx	r4
    6c0a:	462a      	mov	r2, r5
    6c0c:	2300      	movs	r3, #0
    6c0e:	480e      	ldr	r0, [pc, #56]	; (6c48 <_lv_style_list_add_style+0xc8>)
    6c10:	490e      	ldr	r1, [pc, #56]	; (6c4c <_lv_style_list_add_style+0xcc>)
    6c12:	4788      	blx	r1
    6c14:	e7fe      	b.n	6c14 <_lv_style_list_add_style+0x94>
        LV_LOG_WARN("lv_style_list_add_style: couldn't add the class");
    6c16:	4b0e      	ldr	r3, [pc, #56]	; (6c50 <_lv_style_list_add_style+0xd0>)
    6c18:	9300      	str	r3, [sp, #0]
    6c1a:	4b08      	ldr	r3, [pc, #32]	; (6c3c <_lv_style_list_add_style+0xbc>)
    6c1c:	22d2      	movs	r2, #210	; 0xd2
    6c1e:	4908      	ldr	r1, [pc, #32]	; (6c40 <_lv_style_list_add_style+0xc0>)
    6c20:	2002      	movs	r0, #2
    6c22:	4c08      	ldr	r4, [pc, #32]	; (6c44 <_lv_style_list_add_style+0xc4>)
    6c24:	47a0      	blx	r4
        return;
    6c26:	e7e0      	b.n	6bea <_lv_style_list_add_style+0x6a>
    6c28:	4770      	bx	lr
    6c2a:	bf00      	nop
    6c2c:	00006aa1 	.word	0x00006aa1
    6c30:	00012985 	.word	0x00012985
    6c34:	0000298d 	.word	0x0000298d
    6c38:	00012e41 	.word	0x00012e41
    6c3c:	0001bf7c 	.word	0x0001bf7c
    6c40:	0001c020 	.word	0x0001c020
    6c44:	00012805 	.word	0x00012805
    6c48:	0001b4bc 	.word	0x0001b4bc
    6c4c:	00002995 	.word	0x00002995
    6c50:	0001c088 	.word	0x0001c088

00006c54 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
    6c54:	b530      	push	{r4, r5, lr}
    6c56:	b083      	sub	sp, #12
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, 0);
    6c58:	7943      	ldrb	r3, [r0, #5]
    6c5a:	f013 0f01 	tst.w	r3, #1
    6c5e:	d010      	beq.n	6c82 <get_alloc_local_style+0x2e>
    if(list->has_trans && list->skip_trans) id++;
    6c60:	f003 0306 	and.w	r3, r3, #6
    6c64:	2b06      	cmp	r3, #6
    6c66:	bf14      	ite	ne
    6c68:	2300      	movne	r3, #0
    6c6a:	2301      	moveq	r3, #1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6c6c:	7902      	ldrb	r2, [r0, #4]
    6c6e:	2a00      	cmp	r2, #0
    6c70:	d034      	beq.n	6cdc <get_alloc_local_style+0x88>
    6c72:	429a      	cmp	r2, r3
    6c74:	d934      	bls.n	6ce0 <get_alloc_local_style+0x8c>
    return list->style_list[id];
    6c76:	6802      	ldr	r2, [r0, #0]
    6c78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    /*Add the local style to the furst place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
    6c7c:	4620      	mov	r0, r4
    6c7e:	b003      	add	sp, #12
    6c80:	bd30      	pop	{r4, r5, pc}
    6c82:	4605      	mov	r5, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
    6c84:	2004      	movs	r0, #4
    6c86:	4b17      	ldr	r3, [pc, #92]	; (6ce4 <get_alloc_local_style+0x90>)
    6c88:	4798      	blx	r3
    6c8a:	4604      	mov	r4, r0
    LV_ASSERT_MEM(local_style);
    6c8c:	4b16      	ldr	r3, [pc, #88]	; (6ce8 <get_alloc_local_style+0x94>)
    6c8e:	4798      	blx	r3
    6c90:	b160      	cbz	r0, 6cac <get_alloc_local_style+0x58>
    if(local_style == NULL) {
    6c92:	b1cc      	cbz	r4, 6cc8 <get_alloc_local_style+0x74>
    lv_style_init(local_style);
    6c94:	4620      	mov	r0, r4
    6c96:	4b15      	ldr	r3, [pc, #84]	; (6cec <get_alloc_local_style+0x98>)
    6c98:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
    6c9a:	4621      	mov	r1, r4
    6c9c:	4628      	mov	r0, r5
    6c9e:	4b14      	ldr	r3, [pc, #80]	; (6cf0 <get_alloc_local_style+0x9c>)
    6ca0:	4798      	blx	r3
    list->has_local = 1;
    6ca2:	796b      	ldrb	r3, [r5, #5]
    6ca4:	f043 0301 	orr.w	r3, r3, #1
    6ca8:	716b      	strb	r3, [r5, #5]
    return local_style;
    6caa:	e7e7      	b.n	6c7c <get_alloc_local_style+0x28>
    LV_ASSERT_MEM(local_style);
    6cac:	4b11      	ldr	r3, [pc, #68]	; (6cf4 <get_alloc_local_style+0xa0>)
    6cae:	9300      	str	r3, [sp, #0]
    6cb0:	f240 4235 	movw	r2, #1077	; 0x435
    6cb4:	4910      	ldr	r1, [pc, #64]	; (6cf8 <get_alloc_local_style+0xa4>)
    6cb6:	2003      	movs	r0, #3
    6cb8:	4d10      	ldr	r5, [pc, #64]	; (6cfc <get_alloc_local_style+0xa8>)
    6cba:	47a8      	blx	r5
    6cbc:	4622      	mov	r2, r4
    6cbe:	2300      	movs	r3, #0
    6cc0:	480f      	ldr	r0, [pc, #60]	; (6d00 <get_alloc_local_style+0xac>)
    6cc2:	4910      	ldr	r1, [pc, #64]	; (6d04 <get_alloc_local_style+0xb0>)
    6cc4:	4788      	blx	r1
    6cc6:	e7fe      	b.n	6cc6 <get_alloc_local_style+0x72>
        LV_LOG_WARN("get_local_style: couldn't create local style");
    6cc8:	4b0f      	ldr	r3, [pc, #60]	; (6d08 <get_alloc_local_style+0xb4>)
    6cca:	9300      	str	r3, [sp, #0]
    6ccc:	4b09      	ldr	r3, [pc, #36]	; (6cf4 <get_alloc_local_style+0xa0>)
    6cce:	f240 4237 	movw	r2, #1079	; 0x437
    6cd2:	4909      	ldr	r1, [pc, #36]	; (6cf8 <get_alloc_local_style+0xa4>)
    6cd4:	2002      	movs	r0, #2
    6cd6:	4d09      	ldr	r5, [pc, #36]	; (6cfc <get_alloc_local_style+0xa8>)
    6cd8:	47a8      	blx	r5
        return NULL;
    6cda:	e7cf      	b.n	6c7c <get_alloc_local_style+0x28>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    6cdc:	2400      	movs	r4, #0
    6cde:	e7cd      	b.n	6c7c <get_alloc_local_style+0x28>
    6ce0:	2400      	movs	r4, #0
    6ce2:	e7cb      	b.n	6c7c <get_alloc_local_style+0x28>
    6ce4:	00012985 	.word	0x00012985
    6ce8:	0000298d 	.word	0x0000298d
    6cec:	00006a81 	.word	0x00006a81
    6cf0:	00006b81 	.word	0x00006b81
    6cf4:	0001bf98 	.word	0x0001bf98
    6cf8:	0001c020 	.word	0x0001c020
    6cfc:	00012805 	.word	0x00012805
    6d00:	0001b4bc 	.word	0x0001b4bc
    6d04:	00002995 	.word	0x00002995
    6d08:	0001c0b8 	.word	0x0001c0b8

00006d0c <lv_style_reset>:
{
    6d0c:	b510      	push	{r4, lr}
    6d0e:	4604      	mov	r4, r0
    lv_mem_free(style->map);
    6d10:	6800      	ldr	r0, [r0, #0]
    6d12:	4b02      	ldr	r3, [pc, #8]	; (6d1c <lv_style_reset+0x10>)
    6d14:	4798      	blx	r3
    style->map = NULL;
    6d16:	2300      	movs	r3, #0
    6d18:	6023      	str	r3, [r4, #0]
    6d1a:	bd10      	pop	{r4, pc}
    6d1c:	00012a6d 	.word	0x00012a6d

00006d20 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
    6d20:	6802      	ldr	r2, [r0, #0]
    6d22:	b1d2      	cbz	r2, 6d5a <_lv_style_get_mem_size+0x3a>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6d24:	7813      	ldrb	r3, [r2, #0]
    6d26:	2bff      	cmp	r3, #255	; 0xff
    6d28:	d013      	beq.n	6d52 <_lv_style_get_mem_size+0x32>
    6d2a:	2000      	movs	r0, #0
    6d2c:	e006      	b.n	6d3c <_lv_style_get_mem_size+0x1c>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6d2e:	2b0b      	cmp	r3, #11
    6d30:	dc0a      	bgt.n	6d48 <_lv_style_get_mem_size+0x28>
    6d32:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    6d34:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6d36:	5c13      	ldrb	r3, [r2, r0]
    6d38:	2bff      	cmp	r3, #255	; 0xff
    6d3a:	d00b      	beq.n	6d54 <_lv_style_get_mem_size+0x34>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6d3c:	f003 030f 	and.w	r3, r3, #15
    6d40:	2b08      	cmp	r3, #8
    6d42:	dcf4      	bgt.n	6d2e <_lv_style_get_mem_size+0xe>
    6d44:	3002      	adds	r0, #2
    6d46:	e7f5      	b.n	6d34 <_lv_style_get_mem_size+0x14>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6d48:	2b0d      	cmp	r3, #13
    6d4a:	bfd4      	ite	le
    6d4c:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    6d4e:	3004      	addgt	r0, #4
    6d50:	e7f0      	b.n	6d34 <_lv_style_get_mem_size+0x14>
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6d52:	2000      	movs	r0, #0
    return i + sizeof(lv_style_property_t);
    6d54:	3002      	adds	r0, #2
    6d56:	b280      	uxth	r0, r0
    6d58:	4770      	bx	lr
    if(style->map == NULL) return 0;
    6d5a:	2000      	movs	r0, #0
}
    6d5c:	4770      	bx	lr
	...

00006d60 <lv_style_copy>:
    if(style_src == NULL) return;
    6d60:	b181      	cbz	r1, 6d84 <lv_style_copy+0x24>
{
    6d62:	b570      	push	{r4, r5, r6, lr}
    6d64:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
    6d66:	680a      	ldr	r2, [r1, #0]
    6d68:	b15a      	cbz	r2, 6d82 <lv_style_copy+0x22>
    6d6a:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
    6d6c:	4608      	mov	r0, r1
    6d6e:	4b06      	ldr	r3, [pc, #24]	; (6d88 <lv_style_copy+0x28>)
    6d70:	4798      	blx	r3
    6d72:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
    6d74:	4b05      	ldr	r3, [pc, #20]	; (6d8c <lv_style_copy+0x2c>)
    6d76:	4798      	blx	r3
    6d78:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
    6d7a:	4632      	mov	r2, r6
    6d7c:	6821      	ldr	r1, [r4, #0]
    6d7e:	4b04      	ldr	r3, [pc, #16]	; (6d90 <lv_style_copy+0x30>)
    6d80:	4798      	blx	r3
    6d82:	bd70      	pop	{r4, r5, r6, pc}
    6d84:	4770      	bx	lr
    6d86:	bf00      	nop
    6d88:	00006d21 	.word	0x00006d21
    6d8c:	00012985 	.word	0x00012985
    6d90:	00012bfd 	.word	0x00012bfd

00006d94 <lv_style_remove_prop>:
    if(style == NULL) return false;
    6d94:	2800      	cmp	r0, #0
    6d96:	d06b      	beq.n	6e70 <lv_style_remove_prop+0xdc>
{
    6d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d9c:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    6d9e:	6800      	ldr	r0, [r0, #0]
    6da0:	2800      	cmp	r0, #0
    6da2:	d06a      	beq.n	6e7a <lv_style_remove_prop+0xe6>
    uint8_t id_to_find = prop & 0xFF;
    6da4:	b2cd      	uxtb	r5, r1
    attr.full = (prop >> 8) & 0xFF;
    6da6:	0a0e      	lsrs	r6, r1, #8
    6da8:	46b4      	mov	ip, r6
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6daa:	7803      	ldrb	r3, [r0, #0]
    6dac:	2bff      	cmp	r3, #255	; 0xff
    6dae:	d03b      	beq.n	6e28 <lv_style_remove_prop+0x94>
    6db0:	f04f 3eff 	mov.w	lr, #4294967295
    6db4:	46f0      	mov	r8, lr
    6db6:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6db8:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    6dbc:	e027      	b.n	6e0e <lv_style_remove_prop+0x7a>
            attr_i.full = style->map[i + 1];
    6dbe:	1884      	adds	r4, r0, r2
    6dc0:	7864      	ldrb	r4, [r4, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6dc2:	ea86 0904 	eor.w	r9, r6, r4
    6dc6:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    6dca:	d00b      	beq.n	6de4 <lv_style_remove_prop+0x50>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6dcc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6dd0:	ea34 090c 	bics.w	r9, r4, ip
    6dd4:	d11d      	bne.n	6e12 <lv_style_remove_prop+0x7e>
                if(attr_i.bits.state > weight) {
    6dd6:	4544      	cmp	r4, r8
                    weight = attr_i.bits.state;
    6dd8:	bfc4      	itt	gt
    6dda:	fa0f f884 	sxthgt.w	r8, r4
                    id_guess = i;
    6dde:	fa0f fe82 	sxthgt.w	lr, r2
    6de2:	e016      	b.n	6e12 <lv_style_remove_prop+0x7e>
                return i;
    6de4:	4696      	mov	lr, r2
    if(id >= 0) {
    6de6:	f1be 0f00 	cmp.w	lr, #0
    6dea:	db43      	blt.n	6e74 <lv_style_remove_prop+0xe0>
        attr_found.full = *(style->map + id + 1);
    6dec:	4674      	mov	r4, lr
    6dee:	4470      	add	r0, lr
        if(attr_found.bits.state == attr_goal.bits.state) {
    6df0:	7843      	ldrb	r3, [r0, #1]
    6df2:	405e      	eors	r6, r3
    6df4:	f016 0f7f 	tst.w	r6, #127	; 0x7f
    6df8:	d019      	beq.n	6e2e <lv_style_remove_prop+0x9a>
    return false;
    6dfa:	2000      	movs	r0, #0
    6dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6e00:	2b0b      	cmp	r3, #11
    6e02:	dc0c      	bgt.n	6e1e <lv_style_remove_prop+0x8a>
    6e04:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6e06:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6e08:	5c83      	ldrb	r3, [r0, r2]
    6e0a:	2bff      	cmp	r3, #255	; 0xff
    6e0c:	d0eb      	beq.n	6de6 <lv_style_remove_prop+0x52>
        if(style->map[i] == id_to_find) {
    6e0e:	429d      	cmp	r5, r3
    6e10:	d0d5      	beq.n	6dbe <lv_style_remove_prop+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6e12:	f003 030f 	and.w	r3, r3, #15
    6e16:	2b08      	cmp	r3, #8
    6e18:	dcf2      	bgt.n	6e00 <lv_style_remove_prop+0x6c>
    6e1a:	3202      	adds	r2, #2
    6e1c:	e7f3      	b.n	6e06 <lv_style_remove_prop+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6e1e:	2b0d      	cmp	r3, #13
    6e20:	bfd4      	ite	le
    6e22:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6e24:	3204      	addgt	r2, #4
    6e26:	e7ee      	b.n	6e06 <lv_style_remove_prop+0x72>
    int16_t id_guess = -1;
    6e28:	f04f 3eff 	mov.w	lr, #4294967295
    6e2c:	e7db      	b.n	6de6 <lv_style_remove_prop+0x52>
    6e2e:	460d      	mov	r5, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
    6e30:	4638      	mov	r0, r7
    6e32:	4b13      	ldr	r3, [pc, #76]	; (6e80 <lv_style_remove_prop+0xec>)
    6e34:	4798      	blx	r3
            if((prop & 0xF) < LV_STYLE_ID_COLOR) prop_size += sizeof(lv_style_int_t);
    6e36:	f005 010f 	and.w	r1, r5, #15
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    6e3a:	290b      	cmp	r1, #11
    6e3c:	dd04      	ble.n	6e48 <lv_style_remove_prop+0xb4>
            else prop_size += sizeof(const void *);
    6e3e:	290e      	cmp	r1, #14
    6e40:	bfb4      	ite	lt
    6e42:	2103      	movlt	r1, #3
    6e44:	2106      	movge	r1, #6
    6e46:	e000      	b.n	6e4a <lv_style_remove_prop+0xb6>
            else if((prop & 0xF) < LV_STYLE_ID_OPA) prop_size += sizeof(lv_color_t);
    6e48:	2104      	movs	r1, #4
            for(i = id; i < map_size - prop_size; i++) {
    6e4a:	460d      	mov	r5, r1
    6e4c:	1a41      	subs	r1, r0, r1
    6e4e:	428c      	cmp	r4, r1
    6e50:	d207      	bcs.n	6e62 <lv_style_remove_prop+0xce>
    6e52:	4623      	mov	r3, r4
                style->map[i] = style->map[i + prop_size];
    6e54:	683a      	ldr	r2, [r7, #0]
    6e56:	1954      	adds	r4, r2, r5
    6e58:	5ce4      	ldrb	r4, [r4, r3]
    6e5a:	54d4      	strb	r4, [r2, r3]
            for(i = id; i < map_size - prop_size; i++) {
    6e5c:	3301      	adds	r3, #1
    6e5e:	428b      	cmp	r3, r1
    6e60:	d1f8      	bne.n	6e54 <lv_style_remove_prop+0xc0>
            style->map = lv_mem_realloc(style->map, map_size - prop_size);
    6e62:	6838      	ldr	r0, [r7, #0]
    6e64:	4b07      	ldr	r3, [pc, #28]	; (6e84 <lv_style_remove_prop+0xf0>)
    6e66:	4798      	blx	r3
    6e68:	6038      	str	r0, [r7, #0]
            return true;
    6e6a:	2001      	movs	r0, #1
    6e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return false;
    6e70:	2000      	movs	r0, #0
    6e72:	4770      	bx	lr
    return false;
    6e74:	2000      	movs	r0, #0
    6e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e7a:	2000      	movs	r0, #0
}
    6e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e80:	00006d21 	.word	0x00006d21
    6e84:	00012e41 	.word	0x00012e41

00006e88 <_lv_style_set_int>:
{
    6e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e8c:	b086      	sub	sp, #24
    6e8e:	f8ad 100e 	strh.w	r1, [sp, #14]
    6e92:	f8ad 200c 	strh.w	r2, [sp, #12]
    if(style->map == NULL) return -1;
    6e96:	6804      	ldr	r4, [r0, #0]
    6e98:	2c00      	cmp	r4, #0
    6e9a:	d048      	beq.n	6f2e <_lv_style_set_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6e9c:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6e9e:	0a0d      	lsrs	r5, r1, #8
    6ea0:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6ea2:	7823      	ldrb	r3, [r4, #0]
    6ea4:	2bff      	cmp	r3, #255	; 0xff
    6ea6:	d02c      	beq.n	6f02 <_lv_style_set_int+0x7a>
    6ea8:	f04f 31ff 	mov.w	r1, #4294967295
    6eac:	4688      	mov	r8, r1
    6eae:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6eb0:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6eb4:	e018      	b.n	6ee8 <_lv_style_set_int+0x60>
            attr_i.full = style->map[i + 1];
    6eb6:	18a6      	adds	r6, r4, r2
    6eb8:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6eba:	ea85 0c06 	eor.w	ip, r5, r6
    6ebe:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    6ec2:	d021      	beq.n	6f08 <_lv_style_set_int+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6ec4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    6ec8:	ea36 0c0e 	bics.w	ip, r6, lr
    6ecc:	d10e      	bne.n	6eec <_lv_style_set_int+0x64>
                if(attr_i.bits.state > weight) {
    6ece:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    6ed0:	bfc4      	itt	gt
    6ed2:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    6ed6:	b211      	sxthgt	r1, r2
    6ed8:	e008      	b.n	6eec <_lv_style_set_int+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    6eda:	2b0b      	cmp	r3, #11
    6edc:	dc0c      	bgt.n	6ef8 <_lv_style_set_int+0x70>
    6ede:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    6ee0:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6ee2:	5ca3      	ldrb	r3, [r4, r2]
    6ee4:	2bff      	cmp	r3, #255	; 0xff
    6ee6:	d00e      	beq.n	6f06 <_lv_style_set_int+0x7e>
        if(style->map[i] == id_to_find) {
    6ee8:	429f      	cmp	r7, r3
    6eea:	d0e4      	beq.n	6eb6 <_lv_style_set_int+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    6eec:	f003 030f 	and.w	r3, r3, #15
    6ef0:	2b08      	cmp	r3, #8
    6ef2:	dcf2      	bgt.n	6eda <_lv_style_set_int+0x52>
    6ef4:	3202      	adds	r2, #2
    6ef6:	e7f3      	b.n	6ee0 <_lv_style_set_int+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    6ef8:	2b0d      	cmp	r3, #13
    6efa:	bfd4      	ite	le
    6efc:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    6efe:	3204      	addgt	r2, #4
    6f00:	e7ee      	b.n	6ee0 <_lv_style_set_int+0x58>
    int16_t id_guess = -1;
    6f02:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    6f06:	460a      	mov	r2, r1
    if(id >= 0) {
    6f08:	2a00      	cmp	r2, #0
    6f0a:	db10      	blt.n	6f2e <_lv_style_set_int+0xa6>
        attr_found.full = *(style->map + id + 1);
    6f0c:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    6f0e:	785b      	ldrb	r3, [r3, #1]
    6f10:	405d      	eors	r5, r3
    6f12:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    6f16:	d10a      	bne.n	6f2e <_lv_style_set_int+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
    6f18:	3202      	adds	r2, #2
    6f1a:	18a3      	adds	r3, r4, r2
        *d8 = *s8;
    6f1c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6f20:	54a1      	strb	r1, [r4, r2]
    6f22:	f89d 200d 	ldrb.w	r2, [sp, #13]
    6f26:	705a      	strb	r2, [r3, #1]
}
    6f28:	b006      	add	sp, #24
    6f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f2e:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    6f30:	23ff      	movs	r3, #255	; 0xff
    6f32:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    6f36:	4b1d      	ldr	r3, [pc, #116]	; (6fac <_lv_style_set_int+0x124>)
    6f38:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    6f3a:	2800      	cmp	r0, #0
    6f3c:	bf08      	it	eq
    6f3e:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
    6f40:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    6f42:	b2ad      	uxth	r5, r5
    6f44:	4629      	mov	r1, r5
    6f46:	4620      	mov	r0, r4
    6f48:	4b19      	ldr	r3, [pc, #100]	; (6fb0 <_lv_style_set_int+0x128>)
    6f4a:	4798      	blx	r3
    6f4c:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    6f4e:	4b19      	ldr	r3, [pc, #100]	; (6fb4 <_lv_style_set_int+0x12c>)
    6f50:	4798      	blx	r3
    6f52:	b1e8      	cbz	r0, 6f90 <_lv_style_set_int+0x108>
    if(style == NULL) return;
    6f54:	2e00      	cmp	r6, #0
    6f56:	d0e7      	beq.n	6f28 <_lv_style_set_int+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    6f58:	1fab      	subs	r3, r5, #6
    6f5a:	6832      	ldr	r2, [r6, #0]
    6f5c:	18d1      	adds	r1, r2, r3
    6f5e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    6f62:	54d0      	strb	r0, [r2, r3]
    6f64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f68:	704b      	strb	r3, [r1, #1]
    6f6a:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
    6f6c:	6832      	ldr	r2, [r6, #0]
    6f6e:	18d1      	adds	r1, r2, r3
    6f70:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6f74:	54d0      	strb	r0, [r2, r3]
    6f76:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6f7a:	704b      	strb	r3, [r1, #1]
    6f7c:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    6f7e:	6833      	ldr	r3, [r6, #0]
    6f80:	195a      	adds	r2, r3, r5
    6f82:	f89d 1016 	ldrb.w	r1, [sp, #22]
    6f86:	5559      	strb	r1, [r3, r5]
    6f88:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6f8c:	7053      	strb	r3, [r2, #1]
    6f8e:	e7cb      	b.n	6f28 <_lv_style_set_int+0xa0>
    LV_ASSERT_MEM(style->map);
    6f90:	4b09      	ldr	r3, [pc, #36]	; (6fb8 <_lv_style_set_int+0x130>)
    6f92:	9300      	str	r3, [sp, #0]
    6f94:	f44f 72c3 	mov.w	r2, #390	; 0x186
    6f98:	4908      	ldr	r1, [pc, #32]	; (6fbc <_lv_style_set_int+0x134>)
    6f9a:	2003      	movs	r0, #3
    6f9c:	4c08      	ldr	r4, [pc, #32]	; (6fc0 <_lv_style_set_int+0x138>)
    6f9e:	47a0      	blx	r4
    6fa0:	6832      	ldr	r2, [r6, #0]
    6fa2:	2300      	movs	r3, #0
    6fa4:	4807      	ldr	r0, [pc, #28]	; (6fc4 <_lv_style_set_int+0x13c>)
    6fa6:	4908      	ldr	r1, [pc, #32]	; (6fc8 <_lv_style_set_int+0x140>)
    6fa8:	4788      	blx	r1
    6faa:	e7fe      	b.n	6faa <_lv_style_set_int+0x122>
    6fac:	00006d21 	.word	0x00006d21
    6fb0:	00012e41 	.word	0x00012e41
    6fb4:	0000298d 	.word	0x0000298d
    6fb8:	0001bfb0 	.word	0x0001bfb0
    6fbc:	0001c020 	.word	0x0001c020
    6fc0:	00012805 	.word	0x00012805
    6fc4:	0001b4bc 	.word	0x0001b4bc
    6fc8:	00002995 	.word	0x00002995

00006fcc <_lv_style_set_color>:
{
    6fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fd0:	b086      	sub	sp, #24
    6fd2:	f8ad 200c 	strh.w	r2, [sp, #12]
    6fd6:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(style->map == NULL) return -1;
    6fda:	6804      	ldr	r4, [r0, #0]
    6fdc:	2c00      	cmp	r4, #0
    6fde:	d048      	beq.n	7072 <_lv_style_set_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    6fe0:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    6fe2:	0a0d      	lsrs	r5, r1, #8
    6fe4:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    6fe6:	7823      	ldrb	r3, [r4, #0]
    6fe8:	2bff      	cmp	r3, #255	; 0xff
    6fea:	d02c      	beq.n	7046 <_lv_style_set_color+0x7a>
    6fec:	f04f 31ff 	mov.w	r1, #4294967295
    6ff0:	4688      	mov	r8, r1
    6ff2:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    6ff4:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    6ff8:	e018      	b.n	702c <_lv_style_set_color+0x60>
            attr_i.full = style->map[i + 1];
    6ffa:	18a6      	adds	r6, r4, r2
    6ffc:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    6ffe:	ea85 0c06 	eor.w	ip, r5, r6
    7002:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    7006:	d021      	beq.n	704c <_lv_style_set_color+0x80>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    7008:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    700c:	ea36 0c0e 	bics.w	ip, r6, lr
    7010:	d10e      	bne.n	7030 <_lv_style_set_color+0x64>
                if(attr_i.bits.state > weight) {
    7012:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    7014:	bfc4      	itt	gt
    7016:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    701a:	b211      	sxthgt	r1, r2
    701c:	e008      	b.n	7030 <_lv_style_set_color+0x64>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    701e:	2b0b      	cmp	r3, #11
    7020:	dc0c      	bgt.n	703c <_lv_style_set_color+0x70>
    7022:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    7024:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7026:	5ca3      	ldrb	r3, [r4, r2]
    7028:	2bff      	cmp	r3, #255	; 0xff
    702a:	d00e      	beq.n	704a <_lv_style_set_color+0x7e>
        if(style->map[i] == id_to_find) {
    702c:	429f      	cmp	r7, r3
    702e:	d0e4      	beq.n	6ffa <_lv_style_set_color+0x2e>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    7030:	f003 030f 	and.w	r3, r3, #15
    7034:	2b08      	cmp	r3, #8
    7036:	dcf2      	bgt.n	701e <_lv_style_set_color+0x52>
    7038:	3202      	adds	r2, #2
    703a:	e7f3      	b.n	7024 <_lv_style_set_color+0x58>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    703c:	2b0d      	cmp	r3, #13
    703e:	bfd4      	ite	le
    7040:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    7042:	3204      	addgt	r2, #4
    7044:	e7ee      	b.n	7024 <_lv_style_set_color+0x58>
    int16_t id_guess = -1;
    7046:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    704a:	460a      	mov	r2, r1
    if(id >= 0) {
    704c:	2a00      	cmp	r2, #0
    704e:	db10      	blt.n	7072 <_lv_style_set_color+0xa6>
        attr_found.full = *(style->map + id + 1);
    7050:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    7052:	785b      	ldrb	r3, [r3, #1]
    7054:	405d      	eors	r5, r3
    7056:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    705a:	d10a      	bne.n	7072 <_lv_style_set_color+0xa6>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
    705c:	3202      	adds	r2, #2
    705e:	18a3      	adds	r3, r4, r2
    7060:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7064:	54a1      	strb	r1, [r4, r2]
    7066:	f89d 200d 	ldrb.w	r2, [sp, #13]
    706a:	705a      	strb	r2, [r3, #1]
}
    706c:	b006      	add	sp, #24
    706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7072:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    7074:	23ff      	movs	r3, #255	; 0xff
    7076:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    707a:	4b1d      	ldr	r3, [pc, #116]	; (70f0 <_lv_style_set_color+0x124>)
    707c:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    707e:	2800      	cmp	r0, #0
    7080:	bf08      	it	eq
    7082:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
    7084:	1d05      	adds	r5, r0, #4
    style->map = lv_mem_realloc(style->map, size);
    7086:	b2ad      	uxth	r5, r5
    7088:	4629      	mov	r1, r5
    708a:	4620      	mov	r0, r4
    708c:	4b19      	ldr	r3, [pc, #100]	; (70f4 <_lv_style_set_color+0x128>)
    708e:	4798      	blx	r3
    7090:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    7092:	4b19      	ldr	r3, [pc, #100]	; (70f8 <_lv_style_set_color+0x12c>)
    7094:	4798      	blx	r3
    7096:	b1e8      	cbz	r0, 70d4 <_lv_style_set_color+0x108>
    if(style == NULL) return;
    7098:	2e00      	cmp	r6, #0
    709a:	d0e7      	beq.n	706c <_lv_style_set_color+0xa0>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    709c:	1fab      	subs	r3, r5, #6
    709e:	6832      	ldr	r2, [r6, #0]
    70a0:	18d1      	adds	r1, r2, r3
    70a2:	f89d 000e 	ldrb.w	r0, [sp, #14]
    70a6:	54d0      	strb	r0, [r2, r3]
    70a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70ac:	704b      	strb	r3, [r1, #1]
    70ae:	1f2b      	subs	r3, r5, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
    70b0:	6832      	ldr	r2, [r6, #0]
    70b2:	18d1      	adds	r1, r2, r3
    70b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    70b8:	54d0      	strb	r0, [r2, r3]
    70ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
    70be:	704b      	strb	r3, [r1, #1]
    70c0:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    70c2:	6833      	ldr	r3, [r6, #0]
    70c4:	195a      	adds	r2, r3, r5
    70c6:	f89d 1016 	ldrb.w	r1, [sp, #22]
    70ca:	5559      	strb	r1, [r3, r5]
    70cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    70d0:	7053      	strb	r3, [r2, #1]
    70d2:	e7cb      	b.n	706c <_lv_style_set_color+0xa0>
    LV_ASSERT_MEM(style->map);
    70d4:	4b09      	ldr	r3, [pc, #36]	; (70fc <_lv_style_set_color+0x130>)
    70d6:	9300      	str	r3, [sp, #0]
    70d8:	f240 12b5 	movw	r2, #437	; 0x1b5
    70dc:	4908      	ldr	r1, [pc, #32]	; (7100 <_lv_style_set_color+0x134>)
    70de:	2003      	movs	r0, #3
    70e0:	4c08      	ldr	r4, [pc, #32]	; (7104 <_lv_style_set_color+0x138>)
    70e2:	47a0      	blx	r4
    70e4:	6832      	ldr	r2, [r6, #0]
    70e6:	2300      	movs	r3, #0
    70e8:	4807      	ldr	r0, [pc, #28]	; (7108 <_lv_style_set_color+0x13c>)
    70ea:	4908      	ldr	r1, [pc, #32]	; (710c <_lv_style_set_color+0x140>)
    70ec:	4788      	blx	r1
    70ee:	e7fe      	b.n	70ee <_lv_style_set_color+0x122>
    70f0:	00006d21 	.word	0x00006d21
    70f4:	00012e41 	.word	0x00012e41
    70f8:	0000298d 	.word	0x0000298d
    70fc:	0001bfc4 	.word	0x0001bfc4
    7100:	0001c020 	.word	0x0001c020
    7104:	00012805 	.word	0x00012805
    7108:	0001b4bc 	.word	0x0001b4bc
    710c:	00002995 	.word	0x00002995

00007110 <_lv_style_set_opa>:
{
    7110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7114:	b087      	sub	sp, #28
    7116:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(style->map == NULL) return -1;
    711a:	6804      	ldr	r4, [r0, #0]
    711c:	2c00      	cmp	r4, #0
    711e:	d043      	beq.n	71a8 <_lv_style_set_opa+0x98>
    uint8_t id_to_find = prop & 0xFF;
    7120:	fa5f fe81 	uxtb.w	lr, r1
    attr.full = (prop >> 8) & 0xFF;
    7124:	0a0d      	lsrs	r5, r1, #8
    7126:	46ac      	mov	ip, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7128:	7823      	ldrb	r3, [r4, #0]
    712a:	2bff      	cmp	r3, #255	; 0xff
    712c:	d02c      	beq.n	7188 <_lv_style_set_opa+0x78>
    712e:	f04f 37ff 	mov.w	r7, #4294967295
    7132:	46b8      	mov	r8, r7
    7134:	2100      	movs	r1, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    7136:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    713a:	e018      	b.n	716e <_lv_style_set_opa+0x5e>
            attr_i.full = style->map[i + 1];
    713c:	1866      	adds	r6, r4, r1
    713e:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    7140:	ea85 0906 	eor.w	r9, r5, r6
    7144:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    7148:	d021      	beq.n	718e <_lv_style_set_opa+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    714a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    714e:	ea36 090c 	bics.w	r9, r6, ip
    7152:	d10e      	bne.n	7172 <_lv_style_set_opa+0x62>
                if(attr_i.bits.state > weight) {
    7154:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    7156:	bfc4      	itt	gt
    7158:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    715c:	b20f      	sxthgt	r7, r1
    715e:	e008      	b.n	7172 <_lv_style_set_opa+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    7160:	2b0b      	cmp	r3, #11
    7162:	dc0c      	bgt.n	717e <_lv_style_set_opa+0x6e>
    7164:	3102      	adds	r1, #2
        i += sizeof(lv_style_property_t);
    7166:	3102      	adds	r1, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7168:	5c63      	ldrb	r3, [r4, r1]
    716a:	2bff      	cmp	r3, #255	; 0xff
    716c:	d00e      	beq.n	718c <_lv_style_set_opa+0x7c>
        if(style->map[i] == id_to_find) {
    716e:	459e      	cmp	lr, r3
    7170:	d0e4      	beq.n	713c <_lv_style_set_opa+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    7172:	f003 030f 	and.w	r3, r3, #15
    7176:	2b08      	cmp	r3, #8
    7178:	dcf2      	bgt.n	7160 <_lv_style_set_opa+0x50>
    717a:	3102      	adds	r1, #2
    717c:	e7f3      	b.n	7166 <_lv_style_set_opa+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    717e:	2b0d      	cmp	r3, #13
    7180:	bfd4      	ite	le
    7182:	3101      	addle	r1, #1
        else i += sizeof(const void *);
    7184:	3104      	addgt	r1, #4
    7186:	e7ee      	b.n	7166 <_lv_style_set_opa+0x56>
    int16_t id_guess = -1;
    7188:	f04f 37ff 	mov.w	r7, #4294967295
    return id_guess;
    718c:	4639      	mov	r1, r7
    if(id >= 0) {
    718e:	2900      	cmp	r1, #0
    7190:	db0a      	blt.n	71a8 <_lv_style_set_opa+0x98>
        attr_found.full = *(style->map + id + 1);
    7192:	1863      	adds	r3, r4, r1
        if(attr_found.bits.state == attr_goal.bits.state) {
    7194:	785b      	ldrb	r3, [r3, #1]
    7196:	405d      	eors	r5, r3
    7198:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    719c:	d104      	bne.n	71a8 <_lv_style_set_opa+0x98>
    719e:	4421      	add	r1, r4
    71a0:	708a      	strb	r2, [r1, #2]
}
    71a2:	b007      	add	sp, #28
    71a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    71a8:	4617      	mov	r7, r2
    71aa:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    71ac:	23ff      	movs	r3, #255	; 0xff
    71ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    71b2:	4b1b      	ldr	r3, [pc, #108]	; (7220 <_lv_style_set_opa+0x110>)
    71b4:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    71b6:	2800      	cmp	r0, #0
    71b8:	bf08      	it	eq
    71ba:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
    71bc:	1cc5      	adds	r5, r0, #3
    style->map = lv_mem_realloc(style->map, size);
    71be:	b2ad      	uxth	r5, r5
    71c0:	4629      	mov	r1, r5
    71c2:	4620      	mov	r0, r4
    71c4:	4b17      	ldr	r3, [pc, #92]	; (7224 <_lv_style_set_opa+0x114>)
    71c6:	4798      	blx	r3
    71c8:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    71ca:	4b17      	ldr	r3, [pc, #92]	; (7228 <_lv_style_set_opa+0x118>)
    71cc:	4798      	blx	r3
    71ce:	b1c0      	cbz	r0, 7202 <_lv_style_set_opa+0xf2>
    if(style == NULL) return;
    71d0:	2e00      	cmp	r6, #0
    71d2:	d0e6      	beq.n	71a2 <_lv_style_set_opa+0x92>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    71d4:	1f6b      	subs	r3, r5, #5
    71d6:	6832      	ldr	r2, [r6, #0]
    71d8:	18d1      	adds	r1, r2, r3
    71da:	f89d 000e 	ldrb.w	r0, [sp, #14]
    71de:	54d0      	strb	r0, [r2, r3]
    71e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71e4:	704b      	strb	r3, [r1, #1]
    71e6:	6833      	ldr	r3, [r6, #0]
    71e8:	442b      	add	r3, r5
    71ea:	f803 7c03 	strb.w	r7, [r3, #-3]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
    71ee:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    71f0:	6833      	ldr	r3, [r6, #0]
    71f2:	195a      	adds	r2, r3, r5
    71f4:	f89d 1016 	ldrb.w	r1, [sp, #22]
    71f8:	5559      	strb	r1, [r3, r5]
    71fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71fe:	7053      	strb	r3, [r2, #1]
    7200:	e7cf      	b.n	71a2 <_lv_style_set_opa+0x92>
    LV_ASSERT_MEM(style->map);
    7202:	4b0a      	ldr	r3, [pc, #40]	; (722c <_lv_style_set_opa+0x11c>)
    7204:	9300      	str	r3, [sp, #0]
    7206:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
    720a:	4909      	ldr	r1, [pc, #36]	; (7230 <_lv_style_set_opa+0x120>)
    720c:	2003      	movs	r0, #3
    720e:	4c09      	ldr	r4, [pc, #36]	; (7234 <_lv_style_set_opa+0x124>)
    7210:	47a0      	blx	r4
    7212:	6832      	ldr	r2, [r6, #0]
    7214:	2300      	movs	r3, #0
    7216:	4808      	ldr	r0, [pc, #32]	; (7238 <_lv_style_set_opa+0x128>)
    7218:	4908      	ldr	r1, [pc, #32]	; (723c <_lv_style_set_opa+0x12c>)
    721a:	4788      	blx	r1
    721c:	e7fe      	b.n	721c <_lv_style_set_opa+0x10c>
    721e:	bf00      	nop
    7220:	00006d21 	.word	0x00006d21
    7224:	00012e41 	.word	0x00012e41
    7228:	0000298d 	.word	0x0000298d
    722c:	0001bfd8 	.word	0x0001bfd8
    7230:	0001c020 	.word	0x0001c020
    7234:	00012805 	.word	0x00012805
    7238:	0001b4bc 	.word	0x0001b4bc
    723c:	00002995 	.word	0x00002995

00007240 <_lv_style_set_ptr>:
{
    7240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7244:	b086      	sub	sp, #24
    7246:	9202      	str	r2, [sp, #8]
    7248:	f8ad 100e 	strh.w	r1, [sp, #14]
    if(style->map == NULL) return -1;
    724c:	6804      	ldr	r4, [r0, #0]
    724e:	2c00      	cmp	r4, #0
    7250:	d04e      	beq.n	72f0 <_lv_style_set_ptr+0xb0>
    uint8_t id_to_find = prop & 0xFF;
    7252:	b2cf      	uxtb	r7, r1
    attr.full = (prop >> 8) & 0xFF;
    7254:	0a0d      	lsrs	r5, r1, #8
    7256:	46ae      	mov	lr, r5
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7258:	7823      	ldrb	r3, [r4, #0]
    725a:	2bff      	cmp	r3, #255	; 0xff
    725c:	d02c      	beq.n	72b8 <_lv_style_set_ptr+0x78>
    725e:	f04f 31ff 	mov.w	r1, #4294967295
    7262:	4688      	mov	r8, r1
    7264:	2200      	movs	r2, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    7266:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    726a:	e018      	b.n	729e <_lv_style_set_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    726c:	18a6      	adds	r6, r4, r2
    726e:	7876      	ldrb	r6, [r6, #1]
            if(attr_i.bits.state == attr.bits.state) {
    7270:	ea85 0c06 	eor.w	ip, r5, r6
    7274:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
    7278:	d021      	beq.n	72be <_lv_style_set_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    727a:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    727e:	ea36 0c0e 	bics.w	ip, r6, lr
    7282:	d10e      	bne.n	72a2 <_lv_style_set_ptr+0x62>
                if(attr_i.bits.state > weight) {
    7284:	4546      	cmp	r6, r8
                    weight = attr_i.bits.state;
    7286:	bfc4      	itt	gt
    7288:	fa0f f886 	sxthgt.w	r8, r6
                    id_guess = i;
    728c:	b211      	sxthgt	r1, r2
    728e:	e008      	b.n	72a2 <_lv_style_set_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    7290:	2b0b      	cmp	r3, #11
    7292:	dc0c      	bgt.n	72ae <_lv_style_set_ptr+0x6e>
    7294:	3202      	adds	r2, #2
        i += sizeof(lv_style_property_t);
    7296:	3202      	adds	r2, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7298:	5ca3      	ldrb	r3, [r4, r2]
    729a:	2bff      	cmp	r3, #255	; 0xff
    729c:	d00e      	beq.n	72bc <_lv_style_set_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    729e:	429f      	cmp	r7, r3
    72a0:	d0e4      	beq.n	726c <_lv_style_set_ptr+0x2c>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    72a2:	f003 030f 	and.w	r3, r3, #15
    72a6:	2b08      	cmp	r3, #8
    72a8:	dcf2      	bgt.n	7290 <_lv_style_set_ptr+0x50>
    72aa:	3202      	adds	r2, #2
    72ac:	e7f3      	b.n	7296 <_lv_style_set_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    72ae:	2b0d      	cmp	r3, #13
    72b0:	bfd4      	ite	le
    72b2:	3201      	addle	r2, #1
        else i += sizeof(const void *);
    72b4:	3204      	addgt	r2, #4
    72b6:	e7ee      	b.n	7296 <_lv_style_set_ptr+0x56>
    int16_t id_guess = -1;
    72b8:	f04f 31ff 	mov.w	r1, #4294967295
    return id_guess;
    72bc:	460a      	mov	r2, r1
    if(id >= 0) {
    72be:	2a00      	cmp	r2, #0
    72c0:	db16      	blt.n	72f0 <_lv_style_set_ptr+0xb0>
        attr_found.full = *(style->map + id + 1);
    72c2:	18a3      	adds	r3, r4, r2
        if(attr_found.bits.state == attr_goal.bits.state) {
    72c4:	785b      	ldrb	r3, [r3, #1]
    72c6:	405d      	eors	r5, r3
    72c8:	f015 0f7f 	tst.w	r5, #127	; 0x7f
    72cc:	d110      	bne.n	72f0 <_lv_style_set_ptr+0xb0>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
    72ce:	3202      	adds	r2, #2
    72d0:	18a3      	adds	r3, r4, r2
    72d2:	f89d 1008 	ldrb.w	r1, [sp, #8]
    72d6:	54a1      	strb	r1, [r4, r2]
    72d8:	f89d 2009 	ldrb.w	r2, [sp, #9]
    72dc:	705a      	strb	r2, [r3, #1]
    72de:	f89d 200a 	ldrb.w	r2, [sp, #10]
    72e2:	709a      	strb	r2, [r3, #2]
    72e4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    72e8:	70da      	strb	r2, [r3, #3]
}
    72ea:	b006      	add	sp, #24
    72ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72f0:	4606      	mov	r6, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
    72f2:	23ff      	movs	r3, #255	; 0xff
    72f4:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint16_t size = _lv_style_get_mem_size(style);
    72f8:	4b20      	ldr	r3, [pc, #128]	; (737c <_lv_style_set_ptr+0x13c>)
    72fa:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
    72fc:	2800      	cmp	r0, #0
    72fe:	bf08      	it	eq
    7300:	2002      	moveq	r0, #2
    size += sizeof(lv_style_property_t) + sizeof(const void *);
    7302:	1d85      	adds	r5, r0, #6
    style->map = lv_mem_realloc(style->map, size);
    7304:	b2ad      	uxth	r5, r5
    7306:	4629      	mov	r1, r5
    7308:	4620      	mov	r0, r4
    730a:	4b1d      	ldr	r3, [pc, #116]	; (7380 <_lv_style_set_ptr+0x140>)
    730c:	4798      	blx	r3
    730e:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MEM(style->map);
    7310:	4b1c      	ldr	r3, [pc, #112]	; (7384 <_lv_style_set_ptr+0x144>)
    7312:	4798      	blx	r3
    7314:	b320      	cbz	r0, 7360 <_lv_style_set_ptr+0x120>
    if(style == NULL) return;
    7316:	2e00      	cmp	r6, #0
    7318:	d0e7      	beq.n	72ea <_lv_style_set_ptr+0xaa>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
    731a:	f1a5 0308 	sub.w	r3, r5, #8
    731e:	6832      	ldr	r2, [r6, #0]
    7320:	18d1      	adds	r1, r2, r3
    7322:	f89d 000e 	ldrb.w	r0, [sp, #14]
    7326:	54d0      	strb	r0, [r2, r3]
    7328:	f89d 300f 	ldrb.w	r3, [sp, #15]
    732c:	704b      	strb	r3, [r1, #1]
    732e:	1faa      	subs	r2, r5, #6
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
    7330:	6831      	ldr	r1, [r6, #0]
    7332:	188b      	adds	r3, r1, r2
    7334:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7338:	5488      	strb	r0, [r1, r2]
    733a:	f89d 2009 	ldrb.w	r2, [sp, #9]
    733e:	705a      	strb	r2, [r3, #1]
    7340:	f89d 200a 	ldrb.w	r2, [sp, #10]
    7344:	709a      	strb	r2, [r3, #2]
    7346:	f89d 200b 	ldrb.w	r2, [sp, #11]
    734a:	70da      	strb	r2, [r3, #3]
    734c:	3d02      	subs	r5, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
    734e:	6833      	ldr	r3, [r6, #0]
    7350:	195a      	adds	r2, r3, r5
    7352:	f89d 1016 	ldrb.w	r1, [sp, #22]
    7356:	5559      	strb	r1, [r3, r5]
    7358:	f89d 3017 	ldrb.w	r3, [sp, #23]
    735c:	7053      	strb	r3, [r2, #1]
    735e:	e7c4      	b.n	72ea <_lv_style_set_ptr+0xaa>
    LV_ASSERT_MEM(style->map);
    7360:	4b09      	ldr	r3, [pc, #36]	; (7388 <_lv_style_set_ptr+0x148>)
    7362:	9300      	str	r3, [sp, #0]
    7364:	f240 2213 	movw	r2, #531	; 0x213
    7368:	4908      	ldr	r1, [pc, #32]	; (738c <_lv_style_set_ptr+0x14c>)
    736a:	2003      	movs	r0, #3
    736c:	4c08      	ldr	r4, [pc, #32]	; (7390 <_lv_style_set_ptr+0x150>)
    736e:	47a0      	blx	r4
    7370:	6832      	ldr	r2, [r6, #0]
    7372:	2300      	movs	r3, #0
    7374:	4807      	ldr	r0, [pc, #28]	; (7394 <_lv_style_set_ptr+0x154>)
    7376:	4908      	ldr	r1, [pc, #32]	; (7398 <_lv_style_set_ptr+0x158>)
    7378:	4788      	blx	r1
    737a:	e7fe      	b.n	737a <_lv_style_set_ptr+0x13a>
    737c:	00006d21 	.word	0x00006d21
    7380:	00012e41 	.word	0x00012e41
    7384:	0000298d 	.word	0x0000298d
    7388:	0001bfec 	.word	0x0001bfec
    738c:	0001c020 	.word	0x0001c020
    7390:	00012805 	.word	0x00012805
    7394:	0001b4bc 	.word	0x0001b4bc
    7398:	00002995 	.word	0x00002995

0000739c <_lv_style_get_int>:
    if(style == NULL) return -1;
    739c:	2800      	cmp	r0, #0
    739e:	d04d      	beq.n	743c <_lv_style_get_int+0xa0>
{
    73a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    73a4:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    73a6:	6804      	ldr	r4, [r0, #0]
    73a8:	2c00      	cmp	r4, #0
    73aa:	d04a      	beq.n	7442 <_lv_style_get_int+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    73ac:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    73ae:	0a09      	lsrs	r1, r1, #8
    73b0:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    73b2:	7823      	ldrb	r3, [r4, #0]
    73b4:	2bff      	cmp	r3, #255	; 0xff
    73b6:	d03e      	beq.n	7436 <_lv_style_get_int+0x9a>
    73b8:	f04f 37ff 	mov.w	r7, #4294967295
    73bc:	46b8      	mov	r8, r7
    73be:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    73c0:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    73c4:	e02a      	b.n	741c <_lv_style_get_int+0x80>
            attr_i.full = style->map[i + 1];
    73c6:	1825      	adds	r5, r4, r0
    73c8:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    73ca:	ea81 0905 	eor.w	r9, r1, r5
    73ce:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    73d2:	d00a      	beq.n	73ea <_lv_style_get_int+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    73d4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    73d8:	ea35 090e 	bics.w	r9, r5, lr
    73dc:	d120      	bne.n	7420 <_lv_style_get_int+0x84>
                if(attr_i.bits.state > weight) {
    73de:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    73e0:	bfc4      	itt	gt
    73e2:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    73e6:	b207      	sxthgt	r7, r0
    73e8:	e01a      	b.n	7420 <_lv_style_get_int+0x84>
                return i;
    73ea:	4607      	mov	r7, r0
    if(id < 0) {
    73ec:	2f00      	cmp	r7, #0
    73ee:	db2c      	blt.n	744a <_lv_style_get_int+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
    73f0:	1cbb      	adds	r3, r7, #2
    73f2:	18e0      	adds	r0, r4, r3
    73f4:	5ce3      	ldrb	r3, [r4, r3]
    73f6:	7013      	strb	r3, [r2, #0]
    73f8:	7843      	ldrb	r3, [r0, #1]
    73fa:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    73fc:	f8dc 0000 	ldr.w	r0, [ip]
    7400:	4407      	add	r7, r0
    7402:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    7404:	f3c1 0106 	ubfx	r1, r1, #0, #7
    7408:	4008      	ands	r0, r1
    740a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    740e:	2b0b      	cmp	r3, #11
    7410:	dc0c      	bgt.n	742c <_lv_style_get_int+0x90>
    7412:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    7414:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7416:	5c23      	ldrb	r3, [r4, r0]
    7418:	2bff      	cmp	r3, #255	; 0xff
    741a:	d0e7      	beq.n	73ec <_lv_style_get_int+0x50>
        if(style->map[i] == id_to_find) {
    741c:	429e      	cmp	r6, r3
    741e:	d0d2      	beq.n	73c6 <_lv_style_get_int+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    7420:	f003 030f 	and.w	r3, r3, #15
    7424:	2b08      	cmp	r3, #8
    7426:	dcf2      	bgt.n	740e <_lv_style_get_int+0x72>
    7428:	3002      	adds	r0, #2
    742a:	e7f3      	b.n	7414 <_lv_style_get_int+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    742c:	2b0d      	cmp	r3, #13
    742e:	bfd4      	ite	le
    7430:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    7432:	3004      	addgt	r0, #4
    7434:	e7ee      	b.n	7414 <_lv_style_get_int+0x78>
    int16_t id_guess = -1;
    7436:	f04f 37ff 	mov.w	r7, #4294967295
    743a:	e7d7      	b.n	73ec <_lv_style_get_int+0x50>
    if(style == NULL) return -1;
    743c:	f04f 30ff 	mov.w	r0, #4294967295
    7440:	4770      	bx	lr
    if(style->map == NULL) return -1;
    7442:	f04f 30ff 	mov.w	r0, #4294967295
    7446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    744a:	f04f 30ff 	mov.w	r0, #4294967295
}
    744e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007452 <_lv_style_get_opa>:
    if(style == NULL) return -1;
    7452:	2800      	cmp	r0, #0
    7454:	d04a      	beq.n	74ec <_lv_style_get_opa+0x9a>
{
    7456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    745a:	4686      	mov	lr, r0
    if(style->map == NULL) return -1;
    745c:	6804      	ldr	r4, [r0, #0]
    745e:	2c00      	cmp	r4, #0
    7460:	d047      	beq.n	74f2 <_lv_style_get_opa+0xa0>
    uint8_t id_to_find = prop & 0xFF;
    7462:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    7464:	0a09      	lsrs	r1, r1, #8
    7466:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7468:	7823      	ldrb	r3, [r4, #0]
    746a:	2bff      	cmp	r3, #255	; 0xff
    746c:	d03b      	beq.n	74e6 <_lv_style_get_opa+0x94>
    746e:	f04f 37ff 	mov.w	r7, #4294967295
    7472:	46b8      	mov	r8, r7
    7474:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    7476:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    747a:	e027      	b.n	74cc <_lv_style_get_opa+0x7a>
            attr_i.full = style->map[i + 1];
    747c:	1825      	adds	r5, r4, r0
    747e:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    7480:	ea81 0905 	eor.w	r9, r1, r5
    7484:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    7488:	d00a      	beq.n	74a0 <_lv_style_get_opa+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    748a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    748e:	ea35 090c 	bics.w	r9, r5, ip
    7492:	d11d      	bne.n	74d0 <_lv_style_get_opa+0x7e>
                if(attr_i.bits.state > weight) {
    7494:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    7496:	bfc4      	itt	gt
    7498:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    749c:	b207      	sxthgt	r7, r0
    749e:	e017      	b.n	74d0 <_lv_style_get_opa+0x7e>
                return i;
    74a0:	4607      	mov	r7, r0
    if(id < 0) {
    74a2:	2f00      	cmp	r7, #0
    74a4:	db29      	blt.n	74fa <_lv_style_get_opa+0xa8>
    74a6:	443c      	add	r4, r7
    74a8:	78a3      	ldrb	r3, [r4, #2]
    74aa:	7013      	strb	r3, [r2, #0]
        attr_act.full = style->map[id + 1];
    74ac:	f8de 0000 	ldr.w	r0, [lr]
    74b0:	4407      	add	r7, r0
    74b2:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    74b4:	f3c1 0106 	ubfx	r1, r1, #0, #7
    74b8:	4008      	ands	r0, r1
    74ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    74be:	2b0b      	cmp	r3, #11
    74c0:	dc0c      	bgt.n	74dc <_lv_style_get_opa+0x8a>
    74c2:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    74c4:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    74c6:	5c23      	ldrb	r3, [r4, r0]
    74c8:	2bff      	cmp	r3, #255	; 0xff
    74ca:	d0ea      	beq.n	74a2 <_lv_style_get_opa+0x50>
        if(style->map[i] == id_to_find) {
    74cc:	429e      	cmp	r6, r3
    74ce:	d0d5      	beq.n	747c <_lv_style_get_opa+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    74d0:	f003 030f 	and.w	r3, r3, #15
    74d4:	2b08      	cmp	r3, #8
    74d6:	dcf2      	bgt.n	74be <_lv_style_get_opa+0x6c>
    74d8:	3002      	adds	r0, #2
    74da:	e7f3      	b.n	74c4 <_lv_style_get_opa+0x72>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    74dc:	2b0d      	cmp	r3, #13
    74de:	bfd4      	ite	le
    74e0:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    74e2:	3004      	addgt	r0, #4
    74e4:	e7ee      	b.n	74c4 <_lv_style_get_opa+0x72>
    int16_t id_guess = -1;
    74e6:	f04f 37ff 	mov.w	r7, #4294967295
    74ea:	e7da      	b.n	74a2 <_lv_style_get_opa+0x50>
    if(style == NULL) return -1;
    74ec:	f04f 30ff 	mov.w	r0, #4294967295
    74f0:	4770      	bx	lr
    if(style->map == NULL) return -1;
    74f2:	f04f 30ff 	mov.w	r0, #4294967295
    74f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    74fa:	f04f 30ff 	mov.w	r0, #4294967295
}
    74fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007502 <_lv_style_get_color>:
    if(style == NULL) return -1;
    7502:	2800      	cmp	r0, #0
    7504:	d04d      	beq.n	75a2 <_lv_style_get_color+0xa0>
{
    7506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    750a:	4684      	mov	ip, r0
    if(style->map == NULL) return -1;
    750c:	6804      	ldr	r4, [r0, #0]
    750e:	2c00      	cmp	r4, #0
    7510:	d04a      	beq.n	75a8 <_lv_style_get_color+0xa6>
    uint8_t id_to_find = prop & 0xFF;
    7512:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    7514:	0a09      	lsrs	r1, r1, #8
    7516:	468e      	mov	lr, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7518:	7823      	ldrb	r3, [r4, #0]
    751a:	2bff      	cmp	r3, #255	; 0xff
    751c:	d03e      	beq.n	759c <_lv_style_get_color+0x9a>
    751e:	f04f 37ff 	mov.w	r7, #4294967295
    7522:	46b8      	mov	r8, r7
    7524:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    7526:	f3ce 0e06 	ubfx	lr, lr, #0, #7
    752a:	e02a      	b.n	7582 <_lv_style_get_color+0x80>
            attr_i.full = style->map[i + 1];
    752c:	1825      	adds	r5, r4, r0
    752e:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    7530:	ea81 0905 	eor.w	r9, r1, r5
    7534:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    7538:	d00a      	beq.n	7550 <_lv_style_get_color+0x4e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    753a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    753e:	ea35 090e 	bics.w	r9, r5, lr
    7542:	d120      	bne.n	7586 <_lv_style_get_color+0x84>
                if(attr_i.bits.state > weight) {
    7544:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    7546:	bfc4      	itt	gt
    7548:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    754c:	b207      	sxthgt	r7, r0
    754e:	e01a      	b.n	7586 <_lv_style_get_color+0x84>
                return i;
    7550:	4607      	mov	r7, r0
    if(id < 0) {
    7552:	2f00      	cmp	r7, #0
    7554:	db2c      	blt.n	75b0 <_lv_style_get_color+0xae>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
    7556:	1cbb      	adds	r3, r7, #2
    7558:	18e0      	adds	r0, r4, r3
    755a:	5ce3      	ldrb	r3, [r4, r3]
    755c:	7013      	strb	r3, [r2, #0]
    755e:	7843      	ldrb	r3, [r0, #1]
    7560:	7053      	strb	r3, [r2, #1]
        attr_act.full = style->map[id + 1];
    7562:	f8dc 0000 	ldr.w	r0, [ip]
    7566:	4407      	add	r7, r0
    7568:	7878      	ldrb	r0, [r7, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    756a:	f3c1 0106 	ubfx	r1, r1, #0, #7
    756e:	4008      	ands	r0, r1
    7570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    7574:	2b0b      	cmp	r3, #11
    7576:	dc0c      	bgt.n	7592 <_lv_style_get_color+0x90>
    7578:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    757a:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    757c:	5c23      	ldrb	r3, [r4, r0]
    757e:	2bff      	cmp	r3, #255	; 0xff
    7580:	d0e7      	beq.n	7552 <_lv_style_get_color+0x50>
        if(style->map[i] == id_to_find) {
    7582:	429e      	cmp	r6, r3
    7584:	d0d2      	beq.n	752c <_lv_style_get_color+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    7586:	f003 030f 	and.w	r3, r3, #15
    758a:	2b08      	cmp	r3, #8
    758c:	dcf2      	bgt.n	7574 <_lv_style_get_color+0x72>
    758e:	3002      	adds	r0, #2
    7590:	e7f3      	b.n	757a <_lv_style_get_color+0x78>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    7592:	2b0d      	cmp	r3, #13
    7594:	bfd4      	ite	le
    7596:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    7598:	3004      	addgt	r0, #4
    759a:	e7ee      	b.n	757a <_lv_style_get_color+0x78>
    int16_t id_guess = -1;
    759c:	f04f 37ff 	mov.w	r7, #4294967295
    75a0:	e7d7      	b.n	7552 <_lv_style_get_color+0x50>
    if(style == NULL) return -1;
    75a2:	f04f 30ff 	mov.w	r0, #4294967295
    75a6:	4770      	bx	lr
    if(style->map == NULL) return -1;
    75a8:	f04f 30ff 	mov.w	r0, #4294967295
    75ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    75b0:	f04f 30ff 	mov.w	r0, #4294967295
}
    75b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000075b8 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
    75b8:	2800      	cmp	r0, #0
    75ba:	d050      	beq.n	765e <_lv_style_get_ptr+0xa6>
{
    75bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75c0:	4607      	mov	r7, r0
    if(style->map == NULL) return -1;
    75c2:	6804      	ldr	r4, [r0, #0]
    75c4:	2c00      	cmp	r4, #0
    75c6:	d04d      	beq.n	7664 <_lv_style_get_ptr+0xac>
    uint8_t id_to_find = prop & 0xFF;
    75c8:	b2ce      	uxtb	r6, r1
    attr.full = (prop >> 8) & 0xFF;
    75ca:	0a09      	lsrs	r1, r1, #8
    75cc:	468c      	mov	ip, r1
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    75ce:	7823      	ldrb	r3, [r4, #0]
    75d0:	2bff      	cmp	r3, #255	; 0xff
    75d2:	d02d      	beq.n	7630 <_lv_style_get_ptr+0x78>
    75d4:	f04f 3eff 	mov.w	lr, #4294967295
    75d8:	46f0      	mov	r8, lr
    75da:	2000      	movs	r0, #0
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    75dc:	f3cc 0c06 	ubfx	ip, ip, #0, #7
    75e0:	e019      	b.n	7616 <_lv_style_get_ptr+0x5e>
            attr_i.full = style->map[i + 1];
    75e2:	1825      	adds	r5, r4, r0
    75e4:	786d      	ldrb	r5, [r5, #1]
            if(attr_i.bits.state == attr.bits.state) {
    75e6:	ea81 0905 	eor.w	r9, r1, r5
    75ea:	f019 0f7f 	tst.w	r9, #127	; 0x7f
    75ee:	d022      	beq.n	7636 <_lv_style_get_ptr+0x7e>
            else if((attr_i.bits.state & (~attr.bits.state)) == 0) {
    75f0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    75f4:	ea35 090c 	bics.w	r9, r5, ip
    75f8:	d10f      	bne.n	761a <_lv_style_get_ptr+0x62>
                if(attr_i.bits.state > weight) {
    75fa:	4545      	cmp	r5, r8
                    weight = attr_i.bits.state;
    75fc:	bfc4      	itt	gt
    75fe:	fa0f f885 	sxthgt.w	r8, r5
                    id_guess = i;
    7602:	fa0f fe80 	sxthgt.w	lr, r0
    7606:	e008      	b.n	761a <_lv_style_get_ptr+0x62>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_OPA) i += sizeof(lv_color_t);
    7608:	2b0b      	cmp	r3, #11
    760a:	dc0c      	bgt.n	7626 <_lv_style_get_ptr+0x6e>
    760c:	3002      	adds	r0, #2
        i += sizeof(lv_style_property_t);
    760e:	3002      	adds	r0, #2
    while(style->map[i] != _LV_STYLE_CLOSEING_PROP) {
    7610:	5c23      	ldrb	r3, [r4, r0]
    7612:	2bff      	cmp	r3, #255	; 0xff
    7614:	d00e      	beq.n	7634 <_lv_style_get_ptr+0x7c>
        if(style->map[i] == id_to_find) {
    7616:	429e      	cmp	r6, r3
    7618:	d0e3      	beq.n	75e2 <_lv_style_get_ptr+0x2a>
        if((style->map[i] & 0xF) < LV_STYLE_ID_COLOR) i += sizeof(lv_style_int_t);
    761a:	f003 030f 	and.w	r3, r3, #15
    761e:	2b08      	cmp	r3, #8
    7620:	dcf2      	bgt.n	7608 <_lv_style_get_ptr+0x50>
    7622:	3002      	adds	r0, #2
    7624:	e7f3      	b.n	760e <_lv_style_get_ptr+0x56>
        else if((style->map[i] & 0xF) < LV_STYLE_ID_PTR) i += sizeof(lv_opa_t);
    7626:	2b0d      	cmp	r3, #13
    7628:	bfd4      	ite	le
    762a:	3001      	addle	r0, #1
        else i += sizeof(const void *);
    762c:	3004      	addgt	r0, #4
    762e:	e7ee      	b.n	760e <_lv_style_get_ptr+0x56>
    int16_t id_guess = -1;
    7630:	f04f 3eff 	mov.w	lr, #4294967295
    return id_guess;
    7634:	4670      	mov	r0, lr
    if(id < 0) {
    7636:	2800      	cmp	r0, #0
    7638:	db18      	blt.n	766c <_lv_style_get_ptr+0xb4>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
    763a:	4605      	mov	r5, r0
    763c:	3001      	adds	r0, #1
    763e:	1823      	adds	r3, r4, r0
    7640:	1d14      	adds	r4, r2, #4
    7642:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    7646:	f802 0b01 	strb.w	r0, [r2], #1
    while(len) {
    764a:	4294      	cmp	r4, r2
    764c:	d1f9      	bne.n	7642 <_lv_style_get_ptr+0x8a>
        attr_act.full = style->map[id + 1];
    764e:	683b      	ldr	r3, [r7, #0]
    7650:	442b      	add	r3, r5
    7652:	7858      	ldrb	r0, [r3, #1]
        return attr_act.bits.state & attr_goal.bits.state;
    7654:	f3c1 0106 	ubfx	r1, r1, #0, #7
    7658:	4008      	ands	r0, r1
    765a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(style == NULL) return -1;
    765e:	f04f 30ff 	mov.w	r0, #4294967295
    7662:	4770      	bx	lr
    if(style->map == NULL) return -1;
    7664:	f04f 30ff 	mov.w	r0, #4294967295
    7668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    766c:	f04f 30ff 	mov.w	r0, #4294967295
}
    7670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007674 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
    7674:	7943      	ldrb	r3, [r0, #5]
    7676:	f013 0f01 	tst.w	r3, #1
    767a:	d006      	beq.n	768a <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
    767c:	f013 0f02 	tst.w	r3, #2
    7680:	6803      	ldr	r3, [r0, #0]
    7682:	bf14      	ite	ne
    7684:	6858      	ldrne	r0, [r3, #4]
    else return list->style_list[0];
    7686:	6818      	ldreq	r0, [r3, #0]
    7688:	4770      	bx	lr
    if(!list->has_local) return NULL;
    768a:	2000      	movs	r0, #0
}
    768c:	4770      	bx	lr

0000768e <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
    768e:	7943      	ldrb	r3, [r0, #5]
    7690:	f013 0f02 	tst.w	r3, #2
    return list->style_list[0];
    7694:	bf1a      	itte	ne
    7696:	6803      	ldrne	r3, [r0, #0]
    7698:	6818      	ldrne	r0, [r3, #0]
    if(!list->has_trans) return NULL;
    769a:	2000      	moveq	r0, #0
}
    769c:	4770      	bx	lr
	...

000076a0 <_lv_style_list_reset>:
    if(list == NULL) return;
    76a0:	2800      	cmp	r0, #0
    76a2:	d02c      	beq.n	76fe <_lv_style_list_reset+0x5e>
{
    76a4:	b538      	push	{r3, r4, r5, lr}
    76a6:	4604      	mov	r4, r0
    if(list->has_local) {
    76a8:	7943      	ldrb	r3, [r0, #5]
    76aa:	f013 0f01 	tst.w	r3, #1
    76ae:	d008      	beq.n	76c2 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
    76b0:	4b13      	ldr	r3, [pc, #76]	; (7700 <_lv_style_list_reset+0x60>)
    76b2:	4798      	blx	r3
        if(local) {
    76b4:	4605      	mov	r5, r0
    76b6:	b120      	cbz	r0, 76c2 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
    76b8:	4b12      	ldr	r3, [pc, #72]	; (7704 <_lv_style_list_reset+0x64>)
    76ba:	4798      	blx	r3
            lv_mem_free(local);
    76bc:	4628      	mov	r0, r5
    76be:	4b12      	ldr	r3, [pc, #72]	; (7708 <_lv_style_list_reset+0x68>)
    76c0:	4798      	blx	r3
    if(list->has_trans) {
    76c2:	7963      	ldrb	r3, [r4, #5]
    76c4:	f013 0f02 	tst.w	r3, #2
    76c8:	d009      	beq.n	76de <_lv_style_list_reset+0x3e>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
    76ca:	4620      	mov	r0, r4
    76cc:	4b0f      	ldr	r3, [pc, #60]	; (770c <_lv_style_list_reset+0x6c>)
    76ce:	4798      	blx	r3
        if(trans) {
    76d0:	4605      	mov	r5, r0
    76d2:	b120      	cbz	r0, 76de <_lv_style_list_reset+0x3e>
            lv_style_reset(trans);
    76d4:	4b0b      	ldr	r3, [pc, #44]	; (7704 <_lv_style_list_reset+0x64>)
    76d6:	4798      	blx	r3
            lv_mem_free(trans);
    76d8:	4628      	mov	r0, r5
    76da:	4b0b      	ldr	r3, [pc, #44]	; (7708 <_lv_style_list_reset+0x68>)
    76dc:	4798      	blx	r3
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    76de:	7923      	ldrb	r3, [r4, #4]
    76e0:	b94b      	cbnz	r3, 76f6 <_lv_style_list_reset+0x56>
    list->style_list = NULL;
    76e2:	2200      	movs	r2, #0
    76e4:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
    76e6:	7122      	strb	r2, [r4, #4]
    list->has_local = 0;
    76e8:	7963      	ldrb	r3, [r4, #5]
    list->skip_trans = 0;
    76ea:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    76ee:	f362 0382 	bfi	r3, r2, #2, #1
    76f2:	7163      	strb	r3, [r4, #5]
    76f4:	bd38      	pop	{r3, r4, r5, pc}
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
    76f6:	6820      	ldr	r0, [r4, #0]
    76f8:	4b03      	ldr	r3, [pc, #12]	; (7708 <_lv_style_list_reset+0x68>)
    76fa:	4798      	blx	r3
    76fc:	e7f1      	b.n	76e2 <_lv_style_list_reset+0x42>
    76fe:	4770      	bx	lr
    7700:	00007675 	.word	0x00007675
    7704:	00006d0d 	.word	0x00006d0d
    7708:	00012a6d 	.word	0x00012a6d
    770c:	0000768f 	.word	0x0000768f

00007710 <lv_style_list_copy>:
{
    7710:	b570      	push	{r4, r5, r6, lr}
    7712:	4605      	mov	r5, r0
    7714:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
    7716:	4b2c      	ldr	r3, [pc, #176]	; (77c8 <lv_style_list_copy+0xb8>)
    7718:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
    771a:	6823      	ldr	r3, [r4, #0]
    771c:	2b00      	cmp	r3, #0
    771e:	d041      	beq.n	77a4 <lv_style_list_copy+0x94>
    if(list_src->has_local == 0) {
    7720:	7963      	ldrb	r3, [r4, #5]
    7722:	f013 0f01 	tst.w	r3, #1
    7726:	d120      	bne.n	776a <lv_style_list_copy+0x5a>
        if(list_src->has_trans) {
    7728:	f013 0f02 	tst.w	r3, #2
    772c:	d010      	beq.n	7750 <lv_style_list_copy+0x40>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    772e:	7920      	ldrb	r0, [r4, #4]
    7730:	3801      	subs	r0, #1
    7732:	0080      	lsls	r0, r0, #2
    7734:	4b25      	ldr	r3, [pc, #148]	; (77cc <lv_style_list_copy+0xbc>)
    7736:	4798      	blx	r3
    7738:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    773a:	7922      	ldrb	r2, [r4, #4]
    773c:	3a01      	subs	r2, #1
    773e:	6821      	ldr	r1, [r4, #0]
    7740:	0092      	lsls	r2, r2, #2
    7742:	3104      	adds	r1, #4
    7744:	4b22      	ldr	r3, [pc, #136]	; (77d0 <lv_style_list_copy+0xc0>)
    7746:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    7748:	7923      	ldrb	r3, [r4, #4]
    774a:	3b01      	subs	r3, #1
    774c:	712b      	strb	r3, [r5, #4]
    774e:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
    7750:	7920      	ldrb	r0, [r4, #4]
    7752:	0080      	lsls	r0, r0, #2
    7754:	4b1d      	ldr	r3, [pc, #116]	; (77cc <lv_style_list_copy+0xbc>)
    7756:	4798      	blx	r3
    7758:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
    775a:	7922      	ldrb	r2, [r4, #4]
    775c:	0092      	lsls	r2, r2, #2
    775e:	6821      	ldr	r1, [r4, #0]
    7760:	4b1b      	ldr	r3, [pc, #108]	; (77d0 <lv_style_list_copy+0xc0>)
    7762:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
    7764:	7923      	ldrb	r3, [r4, #4]
    7766:	712b      	strb	r3, [r5, #4]
    7768:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
    776a:	f013 0f02 	tst.w	r3, #2
    776e:	d01a      	beq.n	77a6 <lv_style_list_copy+0x96>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
    7770:	7920      	ldrb	r0, [r4, #4]
    7772:	3802      	subs	r0, #2
    7774:	0080      	lsls	r0, r0, #2
    7776:	4b15      	ldr	r3, [pc, #84]	; (77cc <lv_style_list_copy+0xbc>)
    7778:	4798      	blx	r3
    777a:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
    777c:	7922      	ldrb	r2, [r4, #4]
    777e:	3a02      	subs	r2, #2
    7780:	6821      	ldr	r1, [r4, #0]
    7782:	0092      	lsls	r2, r2, #2
    7784:	3108      	adds	r1, #8
    7786:	4b12      	ldr	r3, [pc, #72]	; (77d0 <lv_style_list_copy+0xc0>)
    7788:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
    778a:	7923      	ldrb	r3, [r4, #4]
    778c:	3b02      	subs	r3, #2
    778e:	712b      	strb	r3, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
    7790:	4628      	mov	r0, r5
    7792:	4d10      	ldr	r5, [pc, #64]	; (77d4 <lv_style_list_copy+0xc4>)
    7794:	47a8      	blx	r5
    7796:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
    7798:	4620      	mov	r0, r4
    779a:	47a8      	blx	r5
    779c:	4601      	mov	r1, r0
    779e:	4630      	mov	r0, r6
    77a0:	4b0d      	ldr	r3, [pc, #52]	; (77d8 <lv_style_list_copy+0xc8>)
    77a2:	4798      	blx	r3
    77a4:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
    77a6:	7920      	ldrb	r0, [r4, #4]
    77a8:	3801      	subs	r0, #1
    77aa:	0080      	lsls	r0, r0, #2
    77ac:	4b07      	ldr	r3, [pc, #28]	; (77cc <lv_style_list_copy+0xbc>)
    77ae:	4798      	blx	r3
    77b0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
    77b2:	7922      	ldrb	r2, [r4, #4]
    77b4:	3a01      	subs	r2, #1
    77b6:	6821      	ldr	r1, [r4, #0]
    77b8:	0092      	lsls	r2, r2, #2
    77ba:	3104      	adds	r1, #4
    77bc:	4b04      	ldr	r3, [pc, #16]	; (77d0 <lv_style_list_copy+0xc0>)
    77be:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
    77c0:	7923      	ldrb	r3, [r4, #4]
    77c2:	3b01      	subs	r3, #1
    77c4:	712b      	strb	r3, [r5, #4]
    77c6:	e7e3      	b.n	7790 <lv_style_list_copy+0x80>
    77c8:	000076a1 	.word	0x000076a1
    77cc:	00012985 	.word	0x00012985
    77d0:	00012bfd 	.word	0x00012bfd
    77d4:	00006c55 	.word	0x00006c55
    77d8:	00006d61 	.word	0x00006d61

000077dc <_lv_style_list_add_trans_style>:
{
    77dc:	b530      	push	{r4, r5, lr}
    77de:	b083      	sub	sp, #12
    77e0:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
    77e2:	7943      	ldrb	r3, [r0, #5]
    77e4:	f013 0f02 	tst.w	r3, #2
    77e8:	d005      	beq.n	77f6 <_lv_style_list_add_trans_style+0x1a>
    77ea:	4b1d      	ldr	r3, [pc, #116]	; (7860 <_lv_style_list_add_trans_style+0x84>)
    77ec:	4798      	blx	r3
    77ee:	4605      	mov	r5, r0
}
    77f0:	4628      	mov	r0, r5
    77f2:	b003      	add	sp, #12
    77f4:	bd30      	pop	{r4, r5, pc}
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
    77f6:	2004      	movs	r0, #4
    77f8:	4b1a      	ldr	r3, [pc, #104]	; (7864 <_lv_style_list_add_trans_style+0x88>)
    77fa:	4798      	blx	r3
    77fc:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
    77fe:	4b1a      	ldr	r3, [pc, #104]	; (7868 <_lv_style_list_add_trans_style+0x8c>)
    7800:	4798      	blx	r3
    7802:	b1a8      	cbz	r0, 7830 <_lv_style_list_add_trans_style+0x54>
    if(trans_style == NULL) {
    7804:	b315      	cbz	r5, 784c <_lv_style_list_add_trans_style+0x70>
    lv_style_init(trans_style);
    7806:	4628      	mov	r0, r5
    7808:	4b18      	ldr	r3, [pc, #96]	; (786c <_lv_style_list_add_trans_style+0x90>)
    780a:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
    780c:	4629      	mov	r1, r5
    780e:	4620      	mov	r0, r4
    7810:	4b17      	ldr	r3, [pc, #92]	; (7870 <_lv_style_list_add_trans_style+0x94>)
    7812:	4798      	blx	r3
    list->has_trans = 1;
    7814:	7963      	ldrb	r3, [r4, #5]
    7816:	f043 0302 	orr.w	r3, r3, #2
    781a:	7163      	strb	r3, [r4, #5]
    if(list->has_local) {
    781c:	f013 0f01 	tst.w	r3, #1
    7820:	d0e6      	beq.n	77f0 <_lv_style_list_add_trans_style+0x14>
        lv_style_t * tmp = list->style_list[0];
    7822:	6823      	ldr	r3, [r4, #0]
    7824:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
    7826:	6859      	ldr	r1, [r3, #4]
    7828:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
    782a:	6823      	ldr	r3, [r4, #0]
    782c:	605a      	str	r2, [r3, #4]
    782e:	e7df      	b.n	77f0 <_lv_style_list_add_trans_style+0x14>
    LV_ASSERT_MEM(trans_style);
    7830:	4b10      	ldr	r3, [pc, #64]	; (7874 <_lv_style_list_add_trans_style+0x98>)
    7832:	9300      	str	r3, [sp, #0]
    7834:	f240 22cd 	movw	r2, #717	; 0x2cd
    7838:	490f      	ldr	r1, [pc, #60]	; (7878 <_lv_style_list_add_trans_style+0x9c>)
    783a:	2003      	movs	r0, #3
    783c:	4c0f      	ldr	r4, [pc, #60]	; (787c <_lv_style_list_add_trans_style+0xa0>)
    783e:	47a0      	blx	r4
    7840:	462a      	mov	r2, r5
    7842:	2300      	movs	r3, #0
    7844:	480e      	ldr	r0, [pc, #56]	; (7880 <_lv_style_list_add_trans_style+0xa4>)
    7846:	490f      	ldr	r1, [pc, #60]	; (7884 <_lv_style_list_add_trans_style+0xa8>)
    7848:	4788      	blx	r1
    784a:	e7fe      	b.n	784a <_lv_style_list_add_trans_style+0x6e>
        LV_LOG_WARN("lv_style_list_add_trans_style: couldn't create transition style");
    784c:	4b0e      	ldr	r3, [pc, #56]	; (7888 <_lv_style_list_add_trans_style+0xac>)
    784e:	9300      	str	r3, [sp, #0]
    7850:	4b08      	ldr	r3, [pc, #32]	; (7874 <_lv_style_list_add_trans_style+0x98>)
    7852:	f240 22cf 	movw	r2, #719	; 0x2cf
    7856:	4908      	ldr	r1, [pc, #32]	; (7878 <_lv_style_list_add_trans_style+0x9c>)
    7858:	2002      	movs	r0, #2
    785a:	4c08      	ldr	r4, [pc, #32]	; (787c <_lv_style_list_add_trans_style+0xa0>)
    785c:	47a0      	blx	r4
        return NULL;
    785e:	e7c7      	b.n	77f0 <_lv_style_list_add_trans_style+0x14>
    7860:	0000768f 	.word	0x0000768f
    7864:	00012985 	.word	0x00012985
    7868:	0000298d 	.word	0x0000298d
    786c:	00006a81 	.word	0x00006a81
    7870:	00006b81 	.word	0x00006b81
    7874:	0001c000 	.word	0x0001c000
    7878:	0001c020 	.word	0x0001c020
    787c:	00012805 	.word	0x00012805
    7880:	0001b4bc 	.word	0x0001b4bc
    7884:	00002995 	.word	0x00002995
    7888:	0001c0e8 	.word	0x0001c0e8

0000788c <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
    788c:	2800      	cmp	r0, #0
    788e:	d059      	beq.n	7944 <_lv_style_list_get_int+0xb8>
{
    7890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7894:	b083      	sub	sp, #12
    7896:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    7898:	6803      	ldr	r3, [r0, #0]
    789a:	2b00      	cmp	r3, #0
    789c:	d054      	beq.n	7948 <_lv_style_list_get_int+0xbc>
    int16_t weight_goal = attr.full;
    789e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
    78a2:	2300      	movs	r3, #0
    78a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    for(ci = 0; ci < list->style_cnt; ci++) {
    78a8:	7900      	ldrb	r0, [r0, #4]
    78aa:	2800      	cmp	r0, #0
    78ac:	d042      	beq.n	7934 <_lv_style_list_get_int+0xa8>
    78ae:	4693      	mov	fp, r2
    78b0:	4689      	mov	r9, r1
    78b2:	461c      	mov	r4, r3
    78b4:	f04f 36ff 	mov.w	r6, #4294967295
    78b8:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
    78ba:	4f24      	ldr	r7, [pc, #144]	; (794c <_lv_style_list_get_int+0xc0>)
    78bc:	e01c      	b.n	78f8 <_lv_style_list_get_int+0x6c>
    78be:	4650      	mov	r0, sl
    78c0:	f10d 0206 	add.w	r2, sp, #6
    78c4:	4649      	mov	r1, r9
    78c6:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    78c8:	4580      	cmp	r8, r0
    78ca:	d027      	beq.n	791c <_lv_style_list_get_int+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    78cc:	796b      	ldrb	r3, [r5, #5]
    78ce:	f013 0f02 	tst.w	r3, #2
    78d2:	d005      	beq.n	78e0 <_lv_style_list_get_int+0x54>
    78d4:	2800      	cmp	r0, #0
    78d6:	db03      	blt.n	78e0 <_lv_style_list_get_int+0x54>
    78d8:	b914      	cbnz	r4, 78e0 <_lv_style_list_get_int+0x54>
    78da:	f013 0f04 	tst.w	r3, #4
    78de:	d023      	beq.n	7928 <_lv_style_list_get_int+0x9c>
        else if(weight_act > weight) {
    78e0:	42b0      	cmp	r0, r6
    78e2:	dd04      	ble.n	78ee <_lv_style_list_get_int+0x62>
            *res = value_act;
    78e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    78e8:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    78ec:	4606      	mov	r6, r0
    78ee:	3401      	adds	r4, #1
    78f0:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    78f2:	7928      	ldrb	r0, [r5, #4]
    78f4:	4284      	cmp	r4, r0
    78f6:	da1f      	bge.n	7938 <_lv_style_list_get_int+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    78f8:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    78fa:	796b      	ldrb	r3, [r5, #5]
    78fc:	f003 0306 	and.w	r3, r3, #6
    7900:	2b06      	cmp	r3, #6
    7902:	bf04      	itt	eq
    7904:	3201      	addeq	r2, #1
    7906:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7908:	2800      	cmp	r0, #0
    790a:	d0d8      	beq.n	78be <_lv_style_list_get_int+0x32>
    790c:	4282      	cmp	r2, r0
    790e:	d203      	bcs.n	7918 <_lv_style_list_get_int+0x8c>
    return list->style_list[id];
    7910:	682b      	ldr	r3, [r5, #0]
    7912:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7916:	e7d3      	b.n	78c0 <_lv_style_list_get_int+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7918:	4650      	mov	r0, sl
    791a:	e7d1      	b.n	78c0 <_lv_style_list_get_int+0x34>
            *res = value_act;
    791c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7920:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    7924:	2001      	movs	r0, #1
    7926:	e00a      	b.n	793e <_lv_style_list_get_int+0xb2>
            *res = value_act;
    7928:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    792c:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    7930:	2001      	movs	r0, #1
    7932:	e004      	b.n	793e <_lv_style_list_get_int+0xb2>
    int16_t weight = -1;
    7934:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0) return LV_RES_OK;
    7938:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    793a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    793e:	b003      	add	sp, #12
    7940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7944:	2000      	movs	r0, #0
    7946:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    7948:	2000      	movs	r0, #0
    794a:	e7f8      	b.n	793e <_lv_style_list_get_int+0xb2>
    794c:	0000739d 	.word	0x0000739d

00007950 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
    7950:	2800      	cmp	r0, #0
    7952:	d058      	beq.n	7a06 <_lv_style_list_get_color+0xb6>
{
    7954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7958:	b083      	sub	sp, #12
    795a:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    795c:	6803      	ldr	r3, [r0, #0]
    795e:	2b00      	cmp	r3, #0
    7960:	d053      	beq.n	7a0a <_lv_style_list_get_color+0xba>
    int16_t weight_goal = attr.full;
    7962:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_color_t value_act = { 0 };
    7966:	2300      	movs	r3, #0
    7968:	f8ad 3004 	strh.w	r3, [sp, #4]
    for(ci = 0; ci < list->style_cnt; ci++) {
    796c:	7900      	ldrb	r0, [r0, #4]
    796e:	2800      	cmp	r0, #0
    7970:	d041      	beq.n	79f6 <_lv_style_list_get_color+0xa6>
    7972:	4693      	mov	fp, r2
    7974:	4689      	mov	r9, r1
    7976:	461c      	mov	r4, r3
    7978:	f04f 36ff 	mov.w	r6, #4294967295
    797c:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
    797e:	4f24      	ldr	r7, [pc, #144]	; (7a10 <_lv_style_list_get_color+0xc0>)
    7980:	e01b      	b.n	79ba <_lv_style_list_get_color+0x6a>
    7982:	4650      	mov	r0, sl
    7984:	aa01      	add	r2, sp, #4
    7986:	4649      	mov	r1, r9
    7988:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    798a:	4580      	cmp	r8, r0
    798c:	d027      	beq.n	79de <_lv_style_list_get_color+0x8e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    798e:	796b      	ldrb	r3, [r5, #5]
    7990:	f013 0f02 	tst.w	r3, #2
    7994:	d005      	beq.n	79a2 <_lv_style_list_get_color+0x52>
    7996:	2800      	cmp	r0, #0
    7998:	db03      	blt.n	79a2 <_lv_style_list_get_color+0x52>
    799a:	b914      	cbnz	r4, 79a2 <_lv_style_list_get_color+0x52>
    799c:	f013 0f04 	tst.w	r3, #4
    79a0:	d023      	beq.n	79ea <_lv_style_list_get_color+0x9a>
        else if(weight_act > weight) {
    79a2:	42b0      	cmp	r0, r6
    79a4:	dd04      	ble.n	79b0 <_lv_style_list_get_color+0x60>
            *res = value_act;
    79a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    79aa:	f8ab 3000 	strh.w	r3, [fp]
            weight =  weight_act;
    79ae:	4606      	mov	r6, r0
    79b0:	3401      	adds	r4, #1
    79b2:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    79b4:	7928      	ldrb	r0, [r5, #4]
    79b6:	4284      	cmp	r4, r0
    79b8:	da1f      	bge.n	79fa <_lv_style_list_get_color+0xaa>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    79ba:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    79bc:	796b      	ldrb	r3, [r5, #5]
    79be:	f003 0306 	and.w	r3, r3, #6
    79c2:	2b06      	cmp	r3, #6
    79c4:	bf04      	itt	eq
    79c6:	3201      	addeq	r2, #1
    79c8:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    79ca:	2800      	cmp	r0, #0
    79cc:	d0d9      	beq.n	7982 <_lv_style_list_get_color+0x32>
    79ce:	4282      	cmp	r2, r0
    79d0:	d203      	bcs.n	79da <_lv_style_list_get_color+0x8a>
    return list->style_list[id];
    79d2:	682b      	ldr	r3, [r5, #0]
    79d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    79d8:	e7d4      	b.n	7984 <_lv_style_list_get_color+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    79da:	4650      	mov	r0, sl
    79dc:	e7d2      	b.n	7984 <_lv_style_list_get_color+0x34>
            *res = value_act;
    79de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    79e2:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    79e6:	2001      	movs	r0, #1
    79e8:	e00a      	b.n	7a00 <_lv_style_list_get_color+0xb0>
            *res = value_act;
    79ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    79ee:	f8ab 3000 	strh.w	r3, [fp]
            return LV_RES_OK;
    79f2:	2001      	movs	r0, #1
    79f4:	e004      	b.n	7a00 <_lv_style_list_get_color+0xb0>
    int16_t weight = -1;
    79f6:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    79fa:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    79fc:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    7a00:	b003      	add	sp, #12
    7a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7a06:	2000      	movs	r0, #0
    7a08:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    7a0a:	2000      	movs	r0, #0
    7a0c:	e7f8      	b.n	7a00 <_lv_style_list_get_color+0xb0>
    7a0e:	bf00      	nop
    7a10:	00007503 	.word	0x00007503

00007a14 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
    7a14:	2800      	cmp	r0, #0
    7a16:	d059      	beq.n	7acc <_lv_style_list_get_opa+0xb8>
{
    7a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a1c:	b083      	sub	sp, #12
    7a1e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    7a20:	6803      	ldr	r3, [r0, #0]
    7a22:	2b00      	cmp	r3, #0
    7a24:	d054      	beq.n	7ad0 <_lv_style_list_get_opa+0xbc>
    int16_t weight_goal = attr.full;
    7a26:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
    7a2a:	2300      	movs	r3, #0
    7a2c:	f88d 3007 	strb.w	r3, [sp, #7]
    for(ci = 0; ci < list->style_cnt; ci++) {
    7a30:	7900      	ldrb	r0, [r0, #4]
    7a32:	2800      	cmp	r0, #0
    7a34:	d042      	beq.n	7abc <_lv_style_list_get_opa+0xa8>
    7a36:	4693      	mov	fp, r2
    7a38:	4689      	mov	r9, r1
    7a3a:	461c      	mov	r4, r3
    7a3c:	f04f 36ff 	mov.w	r6, #4294967295
    7a40:	469a      	mov	sl, r3
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
    7a42:	4f24      	ldr	r7, [pc, #144]	; (7ad4 <_lv_style_list_get_opa+0xc0>)
    7a44:	e01c      	b.n	7a80 <_lv_style_list_get_opa+0x6c>
    7a46:	4650      	mov	r0, sl
    7a48:	f10d 0207 	add.w	r2, sp, #7
    7a4c:	4649      	mov	r1, r9
    7a4e:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    7a50:	4580      	cmp	r8, r0
    7a52:	d027      	beq.n	7aa4 <_lv_style_list_get_opa+0x90>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    7a54:	796b      	ldrb	r3, [r5, #5]
    7a56:	f013 0f02 	tst.w	r3, #2
    7a5a:	d005      	beq.n	7a68 <_lv_style_list_get_opa+0x54>
    7a5c:	2800      	cmp	r0, #0
    7a5e:	db03      	blt.n	7a68 <_lv_style_list_get_opa+0x54>
    7a60:	b914      	cbnz	r4, 7a68 <_lv_style_list_get_opa+0x54>
    7a62:	f013 0f04 	tst.w	r3, #4
    7a66:	d023      	beq.n	7ab0 <_lv_style_list_get_opa+0x9c>
        else if(weight_act > weight) {
    7a68:	42b0      	cmp	r0, r6
    7a6a:	dd04      	ble.n	7a76 <_lv_style_list_get_opa+0x62>
            *res = value_act;
    7a6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a70:	f88b 3000 	strb.w	r3, [fp]
            weight =  weight_act;
    7a74:	4606      	mov	r6, r0
    7a76:	3401      	adds	r4, #1
    7a78:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    7a7a:	7928      	ldrb	r0, [r5, #4]
    7a7c:	4284      	cmp	r4, r0
    7a7e:	da1f      	bge.n	7ac0 <_lv_style_list_get_opa+0xac>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    7a80:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    7a82:	796b      	ldrb	r3, [r5, #5]
    7a84:	f003 0306 	and.w	r3, r3, #6
    7a88:	2b06      	cmp	r3, #6
    7a8a:	bf04      	itt	eq
    7a8c:	3201      	addeq	r2, #1
    7a8e:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7a90:	2800      	cmp	r0, #0
    7a92:	d0d8      	beq.n	7a46 <_lv_style_list_get_opa+0x32>
    7a94:	4282      	cmp	r2, r0
    7a96:	d203      	bcs.n	7aa0 <_lv_style_list_get_opa+0x8c>
    return list->style_list[id];
    7a98:	682b      	ldr	r3, [r5, #0]
    7a9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7a9e:	e7d3      	b.n	7a48 <_lv_style_list_get_opa+0x34>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7aa0:	4650      	mov	r0, sl
    7aa2:	e7d1      	b.n	7a48 <_lv_style_list_get_opa+0x34>
            *res = value_act;
    7aa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7aa8:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    7aac:	2001      	movs	r0, #1
    7aae:	e00a      	b.n	7ac6 <_lv_style_list_get_opa+0xb2>
            *res = value_act;
    7ab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ab4:	f88b 3000 	strb.w	r3, [fp]
            return LV_RES_OK;
    7ab8:	2001      	movs	r0, #1
    7aba:	e004      	b.n	7ac6 <_lv_style_list_get_opa+0xb2>
    int16_t weight = -1;
    7abc:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    7ac0:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    7ac2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    7ac6:	b003      	add	sp, #12
    7ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7acc:	2000      	movs	r0, #0
    7ace:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    7ad0:	2000      	movs	r0, #0
    7ad2:	e7f8      	b.n	7ac6 <_lv_style_list_get_opa+0xb2>
    7ad4:	00007453 	.word	0x00007453

00007ad8 <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
    7ad8:	2800      	cmp	r0, #0
    7ada:	d052      	beq.n	7b82 <_lv_style_list_get_ptr+0xaa>
{
    7adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ae0:	b083      	sub	sp, #12
    7ae2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
    7ae4:	6803      	ldr	r3, [r0, #0]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d04d      	beq.n	7b86 <_lv_style_list_get_ptr+0xae>
    int16_t weight_goal = attr.full;
    7aea:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
    7aee:	7900      	ldrb	r0, [r0, #4]
    7af0:	2800      	cmp	r0, #0
    7af2:	d03e      	beq.n	7b72 <_lv_style_list_get_ptr+0x9a>
    7af4:	4693      	mov	fp, r2
    7af6:	4689      	mov	r9, r1
    7af8:	2400      	movs	r4, #0
    7afa:	f04f 36ff 	mov.w	r6, #4294967295
    7afe:	46a2      	mov	sl, r4
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
    7b00:	4f22      	ldr	r7, [pc, #136]	; (7b8c <_lv_style_list_get_ptr+0xb4>)
    7b02:	e01a      	b.n	7b3a <_lv_style_list_get_ptr+0x62>
    7b04:	4650      	mov	r0, sl
    7b06:	aa01      	add	r2, sp, #4
    7b08:	4649      	mov	r1, r9
    7b0a:	47b8      	blx	r7
        if(weight_act == weight_goal) {
    7b0c:	4580      	cmp	r8, r0
    7b0e:	d026      	beq.n	7b5e <_lv_style_list_get_ptr+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
    7b10:	796b      	ldrb	r3, [r5, #5]
    7b12:	f013 0f02 	tst.w	r3, #2
    7b16:	d005      	beq.n	7b24 <_lv_style_list_get_ptr+0x4c>
    7b18:	2800      	cmp	r0, #0
    7b1a:	db03      	blt.n	7b24 <_lv_style_list_get_ptr+0x4c>
    7b1c:	b914      	cbnz	r4, 7b24 <_lv_style_list_get_ptr+0x4c>
    7b1e:	f013 0f04 	tst.w	r3, #4
    7b22:	d021      	beq.n	7b68 <_lv_style_list_get_ptr+0x90>
        else if(weight_act > weight) {
    7b24:	42b0      	cmp	r0, r6
    7b26:	dd03      	ble.n	7b30 <_lv_style_list_get_ptr+0x58>
            *res = value_act;
    7b28:	9b01      	ldr	r3, [sp, #4]
    7b2a:	f8cb 3000 	str.w	r3, [fp]
            weight =  weight_act;
    7b2e:	4606      	mov	r6, r0
    7b30:	3401      	adds	r4, #1
    7b32:	b224      	sxth	r4, r4
    for(ci = 0; ci < list->style_cnt; ci++) {
    7b34:	7928      	ldrb	r0, [r5, #4]
    7b36:	4284      	cmp	r4, r0
    7b38:	da1d      	bge.n	7b76 <_lv_style_list_get_ptr+0x9e>
        lv_style_t * class = lv_style_list_get_style(list, ci);
    7b3a:	b2e2      	uxtb	r2, r4
    if(list->has_trans && list->skip_trans) id++;
    7b3c:	796b      	ldrb	r3, [r5, #5]
    7b3e:	f003 0306 	and.w	r3, r3, #6
    7b42:	2b06      	cmp	r3, #6
    7b44:	bf04      	itt	eq
    7b46:	3201      	addeq	r2, #1
    7b48:	b2d2      	uxtbeq	r2, r2
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d0da      	beq.n	7b04 <_lv_style_list_get_ptr+0x2c>
    7b4e:	4282      	cmp	r2, r0
    7b50:	d203      	bcs.n	7b5a <_lv_style_list_get_ptr+0x82>
    return list->style_list[id];
    7b52:	682b      	ldr	r3, [r5, #0]
    7b54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7b58:	e7d5      	b.n	7b06 <_lv_style_list_get_ptr+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
    7b5a:	4650      	mov	r0, sl
    7b5c:	e7d3      	b.n	7b06 <_lv_style_list_get_ptr+0x2e>
            *res = value_act;
    7b5e:	9b01      	ldr	r3, [sp, #4]
    7b60:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    7b64:	2001      	movs	r0, #1
    7b66:	e009      	b.n	7b7c <_lv_style_list_get_ptr+0xa4>
            *res = value_act;
    7b68:	9b01      	ldr	r3, [sp, #4]
    7b6a:	f8cb 3000 	str.w	r3, [fp]
            return LV_RES_OK;
    7b6e:	2001      	movs	r0, #1
    7b70:	e004      	b.n	7b7c <_lv_style_list_get_ptr+0xa4>
    int16_t weight = -1;
    7b72:	f04f 36ff 	mov.w	r6, #4294967295
    if(weight >= 0)  return LV_RES_OK;
    7b76:	43f0      	mvns	r0, r6
    if(list == NULL) return LV_RES_INV;
    7b78:	f3c0 30c0 	ubfx	r0, r0, #15, #1
}
    7b7c:	b003      	add	sp, #12
    7b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(list == NULL) return LV_RES_INV;
    7b82:	2000      	movs	r0, #0
    7b84:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
    7b86:	2000      	movs	r0, #0
    7b88:	e7f8      	b.n	7b7c <_lv_style_list_get_ptr+0xa4>
    7b8a:	bf00      	nop
    7b8c:	000075b9 	.word	0x000075b9

00007b90 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    7b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b92:	f001 0e1f 	and.w	lr, r1, #31
    7b96:	f3c1 1645 	ubfx	r6, r1, #5, #6
    7b9a:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    7b9e:	2a05      	cmp	r2, #5
    7ba0:	d93f      	bls.n	7c22 <color_blend_true_color_additive+0x92>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
    7ba2:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    7ba6:	440c      	add	r4, r1
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
    7ba8:	2c1f      	cmp	r4, #31
    7baa:	bf28      	it	cs
    7bac:	241f      	movcs	r4, #31
    7bae:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_DEPTH == 8
    fg.ch.green = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    7bb2:	f3c0 1345 	ubfx	r3, r0, #5, #6
    7bb6:	4433      	add	r3, r6
    fg.ch.green = LV_MATH_MIN(tmp, 63);
    7bb8:	2b3f      	cmp	r3, #63	; 0x3f
    7bba:	bf28      	it	cs
    7bbc:	233f      	movcs	r3, #63	; 0x3f
    7bbe:	f003 053f 	and.w	r5, r3, #63	; 0x3f

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
    7bc2:	f000 001f 	and.w	r0, r0, #31
    7bc6:	4470      	add	r0, lr
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
    7bc8:	281f      	cmp	r0, #31
    7bca:	bf28      	it	cs
    7bcc:	201f      	movcs	r0, #31
    7bce:	f000 031f 	and.w	r3, r0, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
    7bd2:	2aff      	cmp	r2, #255	; 0xff
    7bd4:	d02e      	beq.n	7c34 <color_blend_true_color_additive+0xa4>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7bd6:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7bda:	fb07 f00e 	mul.w	r0, r7, lr
    7bde:	fb02 0003 	mla	r0, r2, r3, r0
    7be2:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    7be6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    7bea:	0dc3      	lsrs	r3, r0, #23
    7bec:	f04f 0000 	mov.w	r0, #0
    7bf0:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7bf4:	fb07 f306 	mul.w	r3, r7, r6
    7bf8:	fb02 3305 	mla	r3, r2, r5, r3
    7bfc:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    7c00:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    7c04:	0ddb      	lsrs	r3, r3, #23
    7c06:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7c0a:	fb07 f101 	mul.w	r1, r7, r1
    7c0e:	fb02 1204 	mla	r2, r2, r4, r1
    7c12:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    7c16:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    7c1a:	0dd2      	lsrs	r2, r2, #23
    7c1c:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    7c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    7c22:	f04f 0000 	mov.w	r0, #0
    7c26:	f36e 0004 	bfi	r0, lr, #0, #5
    7c2a:	f366 104a 	bfi	r0, r6, #5, #6
    7c2e:	f361 20cf 	bfi	r0, r1, #11, #5
    7c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    7c34:	f04f 0000 	mov.w	r0, #0
    7c38:	f363 0004 	bfi	r0, r3, #0, #5
    7c3c:	f365 104a 	bfi	r0, r5, #5, #6
    7c40:	f364 20cf 	bfi	r0, r4, #11, #5
    7c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007c46 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    7c46:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c48:	f001 0e1f 	and.w	lr, r1, #31
    7c4c:	f3c1 1645 	ubfx	r6, r1, #5, #6
    7c50:	f3c1 21c4 	ubfx	r1, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
    7c54:	2a05      	cmp	r2, #5
    7c56:	d93d      	bls.n	7cd4 <color_blend_true_color_subtractive+0x8e>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
    7c58:	f3c0 24c4 	ubfx	r4, r0, #11, #5
    7c5c:	1b0c      	subs	r4, r1, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
    7c5e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    7c62:	f004 041f 	and.w	r4, r4, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    7c66:	f3c0 1345 	ubfx	r3, r0, #5, #6
    7c6a:	1af3      	subs	r3, r6, r3
    fg.ch.green = LV_MATH_MAX(tmp, 0);
    7c6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7c70:	f003 053f 	and.w	r5, r3, #63	; 0x3f
    tmp = LV_MATH_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
    7c74:	f000 001f 	and.w	r0, r0, #31
    7c78:	ebae 0000 	sub.w	r0, lr, r0
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
    7c7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7c80:	f000 031f 	and.w	r3, r0, #31

    if(opa == LV_OPA_COVER) return fg;
    7c84:	2aff      	cmp	r2, #255	; 0xff
    7c86:	d02e      	beq.n	7ce6 <color_blend_true_color_subtractive+0xa0>
    7c88:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7c8c:	fb07 f00e 	mul.w	r0, r7, lr
    7c90:	fb02 0003 	mla	r0, r2, r3, r0
    7c94:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    7c98:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    7c9c:	0dc3      	lsrs	r3, r0, #23
    7c9e:	f04f 0000 	mov.w	r0, #0
    7ca2:	f363 0004 	bfi	r0, r3, #0, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7ca6:	fb07 f306 	mul.w	r3, r7, r6
    7caa:	fb02 3305 	mla	r3, r2, r5, r3
    7cae:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    7cb2:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    7cb6:	0ddb      	lsrs	r3, r3, #23
    7cb8:	f363 104a 	bfi	r0, r3, #5, #6
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    7cbc:	fb07 f101 	mul.w	r1, r7, r1
    7cc0:	fb02 1204 	mla	r2, r2, r4, r1
    7cc4:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    7cc8:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    7ccc:	0dd2      	lsrs	r2, r2, #23
    7cce:	f362 20cf 	bfi	r0, r2, #11, #5

    return lv_color_mix(fg, bg, opa);
}
    7cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa <= LV_OPA_MIN) return bg;
    7cd4:	f04f 0000 	mov.w	r0, #0
    7cd8:	f36e 0004 	bfi	r0, lr, #0, #5
    7cdc:	f366 104a 	bfi	r0, r6, #5, #6
    7ce0:	f361 20cf 	bfi	r0, r1, #11, #5
    7ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(opa == LV_OPA_COVER) return fg;
    7ce6:	f04f 0000 	mov.w	r0, #0
    7cea:	f363 0004 	bfi	r0, r3, #0, #5
    7cee:	f365 104a 	bfi	r0, r5, #5, #6
    7cf2:	f364 20cf 	bfi	r0, r4, #11, #5
    7cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007cf8 <_lv_blend_fill>:
{
    7cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cfc:	b093      	sub	sp, #76	; 0x4c
    7cfe:	f89d 4070 	ldrb.w	r4, [sp, #112]	; 0x70
    7d02:	f89d b074 	ldrb.w	fp, [sp, #116]	; 0x74
    7d06:	f89d 9078 	ldrb.w	r9, [sp, #120]	; 0x78
    if(opa < LV_OPA_MIN) return;
    7d0a:	f1bb 0f04 	cmp.w	fp, #4
    7d0e:	d900      	bls.n	7d12 <_lv_blend_fill+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    7d10:	b914      	cbnz	r4, 7d18 <_lv_blend_fill+0x20>
}
    7d12:	b013      	add	sp, #76	; 0x4c
    7d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d18:	9308      	str	r3, [sp, #32]
    7d1a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    7d1e:	460e      	mov	r6, r1
    7d20:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7d22:	4bba      	ldr	r3, [pc, #744]	; (800c <_lv_blend_fill+0x314>)
    7d24:	4798      	blx	r3
    7d26:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    7d28:	4bb9      	ldr	r3, [pc, #740]	; (8010 <_lv_blend_fill+0x318>)
    7d2a:	4798      	blx	r3
    7d2c:	4607      	mov	r7, r0
    lv_color_t * disp_buf = vdb->buf_act;
    7d2e:	6882      	ldr	r2, [r0, #8]
    7d30:	9206      	str	r2, [sp, #24]
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
    7d32:	4632      	mov	r2, r6
    7d34:	4629      	mov	r1, r5
    7d36:	a810      	add	r0, sp, #64	; 0x40
    7d38:	4bb6      	ldr	r3, [pc, #728]	; (8014 <_lv_blend_fill+0x31c>)
    7d3a:	4798      	blx	r3
    if(!is_common) return;
    7d3c:	2800      	cmp	r0, #0
    7d3e:	d0e8      	beq.n	7d12 <_lv_blend_fill+0x1a>
    draw_area.x1 -= disp_area->x1;
    7d40:	8a3a      	ldrh	r2, [r7, #16]
    7d42:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    7d46:	1a9b      	subs	r3, r3, r2
    7d48:	b299      	uxth	r1, r3
    7d4a:	460d      	mov	r5, r1
    7d4c:	910a      	str	r1, [sp, #40]	; 0x28
    7d4e:	b208      	sxth	r0, r1
    7d50:	900b      	str	r0, [sp, #44]	; 0x2c
    7d52:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    draw_area.y1 -= disp_area->y1;
    7d56:	8a7b      	ldrh	r3, [r7, #18]
    7d58:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
    7d5c:	1ac9      	subs	r1, r1, r3
    7d5e:	fa0f fc81 	sxth.w	ip, r1
    7d62:	f8ad c042 	strh.w	ip, [sp, #66]	; 0x42
    draw_area.x2 -= disp_area->x1;
    7d66:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
    7d6a:	1a80      	subs	r0, r0, r2
    7d6c:	b280      	uxth	r0, r0
    7d6e:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    draw_area.y2 -= disp_area->y1;
    7d72:	f8bd e046 	ldrh.w	lr, [sp, #70]	; 0x46
    7d76:	ebae 0e03 	sub.w	lr, lr, r3
    7d7a:	fa0f fe8e 	sxth.w	lr, lr
    7d7e:	f8ad e046 	strh.w	lr, [sp, #70]	; 0x46
    if(mask && disp->driver.antialiasing == 0)
    7d82:	9a08      	ldr	r2, [sp, #32]
    7d84:	b1aa      	cbz	r2, 7db2 <_lv_blend_fill+0xba>
    7d86:	f898 3008 	ldrb.w	r3, [r8, #8]
    7d8a:	f013 0f01 	tst.w	r3, #1
    7d8e:	d110      	bne.n	7db2 <_lv_blend_fill+0xba>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    7d90:	1c41      	adds	r1, r0, #1
    7d92:	1b49      	subs	r1, r1, r5
    7d94:	b209      	sxth	r1, r1
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    7d96:	2900      	cmp	r1, #0
    7d98:	dd0b      	ble.n	7db2 <_lv_blend_fill+0xba>
    7d9a:	4613      	mov	r3, r2
    7d9c:	4411      	add	r1, r2
    7d9e:	781a      	ldrb	r2, [r3, #0]
    7da0:	2a80      	cmp	r2, #128	; 0x80
    7da2:	f04f 32ff 	mov.w	r2, #4294967295
    7da6:	bf98      	it	ls
    7da8:	2200      	movls	r2, #0
    7daa:	f803 2b01 	strb.w	r2, [r3], #1
    7dae:	428b      	cmp	r3, r1
    7db0:	d1f5      	bne.n	7d9e <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
    7db2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    7db6:	2b00      	cmp	r3, #0
    7db8:	d077      	beq.n	7eaa <_lv_blend_fill+0x1b2>
    7dba:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7dbe:	4b93      	ldr	r3, [pc, #588]	; (800c <_lv_blend_fill+0x314>)
    7dc0:	4798      	blx	r3
    7dc2:	4605      	mov	r5, r0
    7dc4:	8abb      	ldrh	r3, [r7, #20]
    7dc6:	3301      	adds	r3, #1
    7dc8:	8a3a      	ldrh	r2, [r7, #16]
    7dca:	1a9b      	subs	r3, r3, r2
    7dcc:	b21b      	sxth	r3, r3
    7dce:	9307      	str	r3, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7dd0:	2c01      	cmp	r4, #1
    7dd2:	d03e      	beq.n	7e52 <_lv_blend_fill+0x15a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    7dd4:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    7dd8:	9b08      	ldr	r3, [sp, #32]
    7dda:	1a9f      	subs	r7, r3, r2
    7ddc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    7de0:	3301      	adds	r3, #1
    7de2:	1a9b      	subs	r3, r3, r2
    7de4:	b21b      	sxth	r3, r3
    7de6:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7de8:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
    7dec:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7df0:	459a      	cmp	sl, r3
    7df2:	dc8e      	bgt.n	7d12 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7df4:	f9bd 6040 	ldrsh.w	r6, [sp, #64]	; 0x40
    7df8:	4634      	mov	r4, r6
    7dfa:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7dfe:	429e      	cmp	r6, r3
    7e00:	dc1e      	bgt.n	7e40 <_lv_blend_fill+0x148>
    7e02:	443e      	add	r6, r7
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    7e04:	fa0f f98a 	sxth.w	r9, sl
    7e08:	9605      	str	r6, [sp, #20]
    7e0a:	464b      	mov	r3, r9
    7e0c:	46b9      	mov	r9, r7
    7e0e:	461f      	mov	r7, r3
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    7e10:	9a05      	ldr	r2, [sp, #20]
    7e12:	f812 3b01 	ldrb.w	r3, [r2], #1
    7e16:	9205      	str	r2, [sp, #20]
    7e18:	fb03 f30b 	mul.w	r3, r3, fp
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
    7e1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    7e20:	9302      	str	r3, [sp, #8]
    7e22:	f8ad 8004 	strh.w	r8, [sp, #4]
    7e26:	9700      	str	r7, [sp, #0]
    7e28:	b223      	sxth	r3, r4
    7e2a:	9a07      	ldr	r2, [sp, #28]
    7e2c:	9906      	ldr	r1, [sp, #24]
    7e2e:	4628      	mov	r0, r5
    7e30:	696e      	ldr	r6, [r5, #20]
    7e32:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7e34:	3401      	adds	r4, #1
    7e36:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7e3a:	429c      	cmp	r4, r3
    7e3c:	dde8      	ble.n	7e10 <_lv_blend_fill+0x118>
    7e3e:	464f      	mov	r7, r9
    7e40:	9b08      	ldr	r3, [sp, #32]
    7e42:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7e44:	f10a 0a01 	add.w	sl, sl, #1
    7e48:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7e4c:	459a      	cmp	sl, r3
    7e4e:	ddd1      	ble.n	7df4 <_lv_blend_fill+0xfc>
    7e50:	e75f      	b.n	7d12 <_lv_blend_fill+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7e52:	f9bd 9042 	ldrsh.w	r9, [sp, #66]	; 0x42
    7e56:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7e5a:	4599      	cmp	r9, r3
    7e5c:	f73f af59 	bgt.w	7d12 <_lv_blend_fill+0x1a>
    7e60:	f8dd a01c 	ldr.w	sl, [sp, #28]
    7e64:	465e      	mov	r6, fp
    7e66:	f8dd b018 	ldr.w	fp, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7e6a:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    7e6e:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7e72:	429c      	cmp	r4, r3
    7e74:	dc12      	bgt.n	7e9c <_lv_blend_fill+0x1a4>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
    7e76:	fa0f f789 	sxth.w	r7, r9
    7e7a:	9705      	str	r7, [sp, #20]
    7e7c:	9602      	str	r6, [sp, #8]
    7e7e:	f8ad 8004 	strh.w	r8, [sp, #4]
    7e82:	9b05      	ldr	r3, [sp, #20]
    7e84:	9300      	str	r3, [sp, #0]
    7e86:	b223      	sxth	r3, r4
    7e88:	4652      	mov	r2, sl
    7e8a:	4659      	mov	r1, fp
    7e8c:	4628      	mov	r0, r5
    7e8e:	696f      	ldr	r7, [r5, #20]
    7e90:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    7e92:	3401      	adds	r4, #1
    7e94:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    7e98:	429c      	cmp	r4, r3
    7e9a:	ddef      	ble.n	7e7c <_lv_blend_fill+0x184>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7e9c:	f109 0901 	add.w	r9, r9, #1
    7ea0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7ea4:	4599      	cmp	r9, r3
    7ea6:	dde0      	ble.n	7e6a <_lv_blend_fill+0x172>
    7ea8:	e733      	b.n	7d12 <_lv_blend_fill+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    7eaa:	f1b9 0f00 	cmp.w	r9, #0
    7eae:	f040 83a0 	bne.w	85f2 <_lv_blend_fill+0x8fa>
    7eb2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7eb6:	f8ad 301c 	strh.w	r3, [sp, #28]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    7eba:	4b54      	ldr	r3, [pc, #336]	; (800c <_lv_blend_fill+0x314>)
    7ebc:	4798      	blx	r3
    7ebe:	4606      	mov	r6, r0
    7ec0:	8abb      	ldrh	r3, [r7, #20]
    7ec2:	3301      	adds	r3, #1
    7ec4:	8a3f      	ldrh	r7, [r7, #16]
    7ec6:	1bdf      	subs	r7, r3, r7
    7ec8:	b23f      	sxth	r7, r7
    7eca:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
    7ece:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    7ed2:	3301      	adds	r3, #1
    7ed4:	1a9b      	subs	r3, r3, r2
    7ed6:	b21b      	sxth	r3, r3
    7ed8:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t draw_area_w = lv_area_get_width(draw_area);
    7eda:	461d      	mov	r5, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    7edc:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    7ee0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
    7ee4:	1c41      	adds	r1, r0, #1
    7ee6:	1ac9      	subs	r1, r1, r3
    int32_t draw_area_h = lv_area_get_height(draw_area);
    7ee8:	b209      	sxth	r1, r1
    7eea:	910c      	str	r1, [sp, #48]	; 0x30
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    7eec:	930a      	str	r3, [sp, #40]	; 0x28
    7eee:	fb03 2207 	mla	r2, r3, r7, r2
    7ef2:	9906      	ldr	r1, [sp, #24]
    7ef4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    7ef8:	9105      	str	r1, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    7efa:	2c01      	cmp	r4, #1
    7efc:	d029      	beq.n	7f52 <_lv_blend_fill+0x25a>
        if(opa > LV_OPA_MAX) {
    7efe:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    7f02:	f200 8108 	bhi.w	8116 <_lv_blend_fill+0x41e>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7f06:	4283      	cmp	r3, r0
    7f08:	f73f af03 	bgt.w	7d12 <_lv_blend_fill+0x1a>
        last_dest_color.full = disp_buf_first[0].full;
    7f0c:	9b06      	ldr	r3, [sp, #24]
    7f0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7f12:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    7f16:	f3c6 2cc4 	ubfx	ip, r6, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    7f1a:	f3c6 1245 	ubfx	r2, r6, #5, #6
    7f1e:	4610      	mov	r0, r2
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    7f20:	f006 021f 	and.w	r2, r6, #31
    7f24:	4614      	mov	r4, r2
                disp_buf_first += disp_w;
    7f26:	007a      	lsls	r2, r7, #1
    7f28:	920c      	str	r2, [sp, #48]	; 0x30
    7f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f2c:	9908      	ldr	r1, [sp, #32]
    7f2e:	3901      	subs	r1, #1
    7f30:	9106      	str	r1, [sp, #24]
    7f32:	0052      	lsls	r2, r2, #1
    7f34:	920e      	str	r2, [sp, #56]	; 0x38
    7f36:	4619      	mov	r1, r3
    7f38:	f04f 0e00 	mov.w	lr, #0
    7f3c:	4672      	mov	r2, lr
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    7f3e:	b2b6      	uxth	r6, r6
    7f40:	9608      	str	r6, [sp, #32]
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    7f42:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    7f46:	950d      	str	r5, [sp, #52]	; 0x34
    7f48:	46a1      	mov	r9, r4
    7f4a:	f8cd b01c 	str.w	fp, [sp, #28]
    7f4e:	4683      	mov	fp, r0
    7f50:	e345      	b.n	85de <_lv_blend_fill+0x8e6>
        if(opa > LV_OPA_MAX) {
    7f52:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
    7f56:	d925      	bls.n	7fa4 <_lv_blend_fill+0x2ac>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    7f58:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7f5a:	b123      	cbz	r3, 7f66 <_lv_blend_fill+0x26e>
    7f5c:	a810      	add	r0, sp, #64	; 0x40
    7f5e:	4b2e      	ldr	r3, [pc, #184]	; (8018 <_lv_blend_fill+0x320>)
    7f60:	4798      	blx	r3
    7f62:	28f0      	cmp	r0, #240	; 0xf0
    7f64:	d813      	bhi.n	7f8e <_lv_blend_fill+0x296>
            for(y = 0; y < draw_area_h; y++) {
    7f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f68:	2b00      	cmp	r3, #0
    7f6a:	f77f aed2 	ble.w	7d12 <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    7f6e:	007f      	lsls	r7, r7, #1
    7f70:	2400      	movs	r4, #0
                lv_color_fill(disp_buf_first, color, draw_area_w);
    7f72:	4d2a      	ldr	r5, [pc, #168]	; (801c <_lv_blend_fill+0x324>)
    7f74:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    7f78:	9e05      	ldr	r6, [sp, #20]
    7f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7f7c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    7f80:	4630      	mov	r0, r6
    7f82:	47a8      	blx	r5
                disp_buf_first += disp_w;
    7f84:	443e      	add	r6, r7
            for(y = 0; y < draw_area_h; y++) {
    7f86:	3401      	adds	r4, #1
    7f88:	45a0      	cmp	r8, r4
    7f8a:	d1f6      	bne.n	7f7a <_lv_blend_fill+0x282>
    7f8c:	e6c1      	b.n	7d12 <_lv_blend_fill+0x1a>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
    7f8e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7f92:	f8ad 3000 	strh.w	r3, [sp]
    7f96:	6a74      	ldr	r4, [r6, #36]	; 0x24
    7f98:	ab10      	add	r3, sp, #64	; 0x40
    7f9a:	463a      	mov	r2, r7
    7f9c:	9906      	ldr	r1, [sp, #24]
    7f9e:	4630      	mov	r0, r6
    7fa0:	47a0      	blx	r4
    7fa2:	e6b6      	b.n	7d12 <_lv_blend_fill+0x1a>
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
    7fa4:	6a33      	ldr	r3, [r6, #32]
    7fa6:	2b00      	cmp	r3, #0
    7fa8:	d03c      	beq.n	8024 <_lv_blend_fill+0x32c>
    7faa:	a810      	add	r0, sp, #64	; 0x40
    7fac:	4b1a      	ldr	r3, [pc, #104]	; (8018 <_lv_blend_fill+0x320>)
    7fae:	4798      	blx	r3
    7fb0:	28f0      	cmp	r0, #240	; 0xf0
    7fb2:	d937      	bls.n	8024 <_lv_blend_fill+0x32c>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
    7fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7fb6:	2900      	cmp	r1, #0
    7fb8:	dd0c      	ble.n	7fd4 <_lv_blend_fill+0x2dc>
    7fba:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    7fbe:	4a18      	ldr	r2, [pc, #96]	; (8020 <_lv_blend_fill+0x328>)
    7fc0:	1e93      	subs	r3, r2, #2
    7fc2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    7fc6:	3901      	subs	r1, #1
    7fc8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    7fcc:	f823 8f02 	strh.w	r8, [r3, #2]!
    7fd0:	429a      	cmp	r2, r3
    7fd2:	d1fb      	bne.n	7fcc <_lv_blend_fill+0x2d4>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    7fd4:	f9bd 5042 	ldrsh.w	r5, [sp, #66]	; 0x42
    7fd8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    7fdc:	429d      	cmp	r5, r3
    7fde:	f73f ae98 	bgt.w	7d12 <_lv_blend_fill+0x1a>
                    disp_buf_first += disp_w;
    7fe2:	ea4f 0847 	mov.w	r8, r7, lsl #1
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
    7fe6:	f8df a038 	ldr.w	sl, [pc, #56]	; 8020 <_lv_blend_fill+0x328>
    7fea:	f8dd 9014 	ldr.w	r9, [sp, #20]
    7fee:	465c      	mov	r4, fp
    7ff0:	9400      	str	r4, [sp, #0]
    7ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7ff4:	4652      	mov	r2, sl
    7ff6:	4649      	mov	r1, r9
    7ff8:	4630      	mov	r0, r6
    7ffa:	6a37      	ldr	r7, [r6, #32]
    7ffc:	47b8      	blx	r7
                    disp_buf_first += disp_w;
    7ffe:	44c1      	add	r9, r8
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8000:	3501      	adds	r5, #1
    8002:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    8006:	429d      	cmp	r5, r3
    8008:	ddf2      	ble.n	7ff0 <_lv_blend_fill+0x2f8>
    800a:	e682      	b.n	7d12 <_lv_blend_fill+0x1a>
    800c:	00006511 	.word	0x00006511
    8010:	00011585 	.word	0x00011585
    8014:	00011ac1 	.word	0x00011ac1
    8018:	00011aa5 	.word	0x00011aa5
    801c:	000120e3 	.word	0x000120e3
    8020:	20002690 	.word	0x20002690
            lv_color_t last_dest_color = LV_COLOR_BLACK;
    8024:	f04f 0e00 	mov.w	lr, #0
    8028:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    802c:	f002 091f 	and.w	r9, r2, #31
    8030:	f3c2 1845 	ubfx	r8, r2, #5, #6
    8034:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8038:	fb0b f30c 	mul.w	r3, fp, ip
    803c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    8040:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    8044:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8048:	fb0b f308 	mul.w	r3, fp, r8
    804c:	eb03 2403 	add.w	r4, r3, r3, lsl #8
    8050:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
    8054:	f3c3 54c5 	ubfx	r4, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8058:	fb0b f309 	mul.w	r3, fp, r9
    805c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8060:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8064:	f3c3 52c4 	ubfx	r2, r3, #23, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    8068:	fa1f f38b 	uxth.w	r3, fp
    806c:	fb0c fc03 	mul.w	ip, ip, r3
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    8070:	fb08 f803 	mul.w	r8, r8, r3
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    8074:	fb09 f903 	mul.w	r9, r9, r3
            lv_opa_t opa_inv = 255 - opa;
    8078:	ea6f 030b 	mvn.w	r3, fp
    807c:	b2db      	uxtb	r3, r3
            for(y = 0; y < draw_area_h; y++) {
    807e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8080:	2800      	cmp	r0, #0
    8082:	f77f ae46 	ble.w	7d12 <_lv_blend_fill+0x1a>
                disp_buf_first += disp_w;
    8086:	0078      	lsls	r0, r7, #1
    8088:	9007      	str	r0, [sp, #28]
    808a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    808c:	0040      	lsls	r0, r0, #1
    808e:	9008      	str	r0, [sp, #32]
    8090:	2000      	movs	r0, #0
    8092:	9006      	str	r0, [sp, #24]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    8094:	b29f      	uxth	r7, r3
    8096:	e036      	b.n	8106 <_lv_blend_fill+0x40e>
                    disp_buf_first[x] = last_res_color;
    8098:	7830      	ldrb	r0, [r6, #0]
    809a:	f362 0004 	bfi	r0, r2, #0, #5
    809e:	7030      	strb	r0, [r6, #0]
    80a0:	8830      	ldrh	r0, [r6, #0]
    80a2:	f364 104a 	bfi	r0, r4, #5, #6
    80a6:	8030      	strh	r0, [r6, #0]
    80a8:	0a00      	lsrs	r0, r0, #8
    80aa:	f361 00c7 	bfi	r0, r1, #3, #5
    80ae:	7070      	strb	r0, [r6, #1]
    80b0:	3302      	adds	r3, #2
                for(x = 0; x < draw_area_w; x++) {
    80b2:	459b      	cmp	fp, r3
    80b4:	d01c      	beq.n	80f0 <_lv_blend_fill+0x3f8>
                    if(last_dest_color.full != disp_buf_first[x].full) {
    80b6:	461e      	mov	r6, r3
    80b8:	fa1f f08e 	uxth.w	r0, lr
    80bc:	f8b3 a000 	ldrh.w	sl, [r3]
    80c0:	4550      	cmp	r0, sl
    80c2:	d0e9      	beq.n	8098 <_lv_blend_fill+0x3a0>
                        last_dest_color = disp_buf_first[x];
    80c4:	f8b3 e000 	ldrh.w	lr, [r3]
    80c8:	7859      	ldrb	r1, [r3, #1]
    80ca:	08c9      	lsrs	r1, r1, #3
    80cc:	fb01 c107 	mla	r1, r1, r7, ip
    80d0:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    80d4:	f3ce 1445 	ubfx	r4, lr, #5, #6
    80d8:	fb04 8407 	mla	r4, r4, r7, r8
    80dc:	f3c4 2405 	ubfx	r4, r4, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    80e0:	781a      	ldrb	r2, [r3, #0]
    80e2:	f002 021f 	and.w	r2, r2, #31
    80e6:	fb02 9207 	mla	r2, r2, r7, r9
    80ea:	f3c2 2204 	ubfx	r2, r2, #8, #5
    80ee:	e7d3      	b.n	8098 <_lv_blend_fill+0x3a0>
                disp_buf_first += disp_w;
    80f0:	9b05      	ldr	r3, [sp, #20]
    80f2:	9807      	ldr	r0, [sp, #28]
    80f4:	4403      	add	r3, r0
    80f6:	9305      	str	r3, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
    80f8:	9b06      	ldr	r3, [sp, #24]
    80fa:	3301      	adds	r3, #1
    80fc:	9306      	str	r3, [sp, #24]
    80fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    8100:	4298      	cmp	r0, r3
    8102:	f43f ae06 	beq.w	7d12 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    8106:	2d00      	cmp	r5, #0
    8108:	ddf2      	ble.n	80f0 <_lv_blend_fill+0x3f8>
    810a:	9805      	ldr	r0, [sp, #20]
    810c:	4603      	mov	r3, r0
    810e:	9e08      	ldr	r6, [sp, #32]
    8110:	eb00 0b06 	add.w	fp, r0, r6
    8114:	e7cf      	b.n	80b6 <_lv_blend_fill+0x3be>
            for(y = 0; y < draw_area_h; y++) {
    8116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8118:	2b00      	cmp	r3, #0
    811a:	f77f adfa 	ble.w	7d12 <_lv_blend_fill+0x1a>
        int32_t x_end4 = draw_area_w - 4;
    811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8120:	3b04      	subs	r3, #4
    8122:	930d      	str	r3, [sp, #52]	; 0x34
                disp_buf_first += disp_w;
    8124:	007b      	lsls	r3, r7, #1
    8126:	930f      	str	r3, [sp, #60]	; 0x3c
    8128:	2300      	movs	r3, #0
    812a:	930a      	str	r3, [sp, #40]	; 0x28
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    812c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    8130:	f3c2 2cc4 	ubfx	ip, r2, #11, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8134:	f3c2 1e45 	ubfx	lr, r2, #5, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8138:	f3c2 0304 	ubfx	r3, r2, #0, #5
    813c:	9306      	str	r3, [sp, #24]
    813e:	e1de      	b.n	84fe <_lv_blend_fill+0x806>
                    FILL_NORMAL_MASK_PX(x, color)
    8140:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    8144:	803b      	strh	r3, [r7, #0]
    8146:	4643      	mov	r3, r8
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8148:	3101      	adds	r1, #1
    814a:	428d      	cmp	r5, r1
    814c:	f000 834c 	beq.w	87e8 <_lv_blend_fill+0xaf0>
    8150:	3702      	adds	r7, #2
    8152:	f018 0f03 	tst.w	r8, #3
    8156:	f000 8355 	beq.w	8804 <_lv_blend_fill+0xb0c>
                    FILL_NORMAL_MASK_PX(x, color)
    815a:	f818 3b01 	ldrb.w	r3, [r8], #1
    815e:	2b00      	cmp	r3, #0
    8160:	d0f1      	beq.n	8146 <_lv_blend_fill+0x44e>
    8162:	2bff      	cmp	r3, #255	; 0xff
    8164:	d0ec      	beq.n	8140 <_lv_blend_fill+0x448>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8166:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    816a:	787a      	ldrb	r2, [r7, #1]
    816c:	08d2      	lsrs	r2, r2, #3
    816e:	fb09 f202 	mul.w	r2, r9, r2
    8172:	fb03 220c 	mla	r2, r3, ip, r2
    8176:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    817a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    817e:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8182:	8838      	ldrh	r0, [r7, #0]
    8184:	f3c0 1045 	ubfx	r0, r0, #5, #6
    8188:	fb09 f000 	mul.w	r0, r9, r0
    818c:	fb03 000e 	mla	r0, r3, lr, r0
    8190:	eb00 2600 	add.w	r6, r0, r0, lsl #8
    8194:	eb00 10c6 	add.w	r0, r0, r6, lsl #7
    8198:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    819c:	783e      	ldrb	r6, [r7, #0]
    819e:	f006 0a1f 	and.w	sl, r6, #31
    81a2:	fb09 f90a 	mul.w	r9, r9, sl
    81a6:	fb03 9304 	mla	r3, r3, r4, r9
    81aa:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    81ae:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    81b2:	0ddb      	lsrs	r3, r3, #23
    81b4:	f363 0604 	bfi	r6, r3, #0, #5
    81b8:	703e      	strb	r6, [r7, #0]
    81ba:	883b      	ldrh	r3, [r7, #0]
    81bc:	f360 134a 	bfi	r3, r0, #5, #6
    81c0:	803b      	strh	r3, [r7, #0]
    81c2:	0a1b      	lsrs	r3, r3, #8
    81c4:	f362 03c7 	bfi	r3, r2, #3, #5
    81c8:	707b      	strb	r3, [r7, #1]
    81ca:	e7bc      	b.n	8146 <_lv_blend_fill+0x44e>
                            disp_buf_first[x] = color;
    81cc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    81d0:	f820 4c06 	strh.w	r4, [r0, #-6]
                            disp_buf_first[x + 1] = color;
    81d4:	f820 4c04 	strh.w	r4, [r0, #-4]
                            disp_buf_first[x + 2] = color;
    81d8:	f820 4c02 	strh.w	r4, [r0, #-2]
                            disp_buf_first[x + 3] = color;
    81dc:	8004      	strh	r4, [r0, #0]
                for(; x <= x_end4; x += 4) {
    81de:	3104      	adds	r1, #4
    81e0:	3304      	adds	r3, #4
    81e2:	3008      	adds	r0, #8
    81e4:	428f      	cmp	r7, r1
    81e6:	f2c0 8129 	blt.w	843c <_lv_blend_fill+0x744>
    81ea:	461a      	mov	r2, r3
                    if(*mask32) {
    81ec:	f853 4c04 	ldr.w	r4, [r3, #-4]
    81f0:	2c00      	cmp	r4, #0
    81f2:	d0f4      	beq.n	81de <_lv_blend_fill+0x4e6>
                        if((*mask32) == 0xFFFFFFFF) {
    81f4:	f1b4 3fff 	cmp.w	r4, #4294967295
    81f8:	d0e8      	beq.n	81cc <_lv_blend_fill+0x4d4>
                            FILL_NORMAL_MASK_PX(x, color)
    81fa:	f813 8c04 	ldrb.w	r8, [r3, #-4]
    81fe:	f1b8 0f00 	cmp.w	r8, #0
    8202:	d03f      	beq.n	8284 <_lv_blend_fill+0x58c>
    8204:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8208:	f000 8105 	beq.w	8416 <_lv_blend_fill+0x71e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    820c:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    8210:	f810 4c05 	ldrb.w	r4, [r0, #-5]
    8214:	08e4      	lsrs	r4, r4, #3
    8216:	fb06 f404 	mul.w	r4, r6, r4
    821a:	fb08 440c 	mla	r4, r8, ip, r4
    821e:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    8222:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    8226:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    822a:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    822c:	f830 5c06 	ldrh.w	r5, [r0, #-6]
    8230:	f3c5 1545 	ubfx	r5, r5, #5, #6
    8234:	fb06 f505 	mul.w	r5, r6, r5
    8238:	fb08 550e 	mla	r5, r8, lr, r5
    823c:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    8240:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    8244:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8248:	f810 9c06 	ldrb.w	r9, [r0, #-6]
    824c:	f009 0b1f 	and.w	fp, r9, #31
    8250:	fb06 f60b 	mul.w	r6, r6, fp
    8254:	9c06      	ldr	r4, [sp, #24]
    8256:	fb08 6804 	mla	r8, r8, r4, r6
    825a:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    825e:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    8262:	0df6      	lsrs	r6, r6, #23
    8264:	f366 0904 	bfi	r9, r6, #0, #5
    8268:	f800 9c06 	strb.w	r9, [r0, #-6]
    826c:	f830 6c06 	ldrh.w	r6, [r0, #-6]
    8270:	f365 164a 	bfi	r6, r5, #5, #6
    8274:	f820 6c06 	strh.w	r6, [r0, #-6]
    8278:	0a36      	lsrs	r6, r6, #8
    827a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    827c:	f364 06c7 	bfi	r6, r4, #3, #5
    8280:	f800 6c05 	strb.w	r6, [r0, #-5]
                            FILL_NORMAL_MASK_PX(x + 1, color)
    8284:	f812 8c03 	ldrb.w	r8, [r2, #-3]
    8288:	f1b8 0f00 	cmp.w	r8, #0
    828c:	d03f      	beq.n	830e <_lv_blend_fill+0x616>
    828e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8292:	f000 80c5 	beq.w	8420 <_lv_blend_fill+0x728>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8296:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    829a:	f810 4c03 	ldrb.w	r4, [r0, #-3]
    829e:	08e4      	lsrs	r4, r4, #3
    82a0:	fb06 f404 	mul.w	r4, r6, r4
    82a4:	fb08 440c 	mla	r4, r8, ip, r4
    82a8:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    82ac:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    82b0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    82b4:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    82b6:	f830 5c04 	ldrh.w	r5, [r0, #-4]
    82ba:	f3c5 1545 	ubfx	r5, r5, #5, #6
    82be:	fb06 f505 	mul.w	r5, r6, r5
    82c2:	fb08 550e 	mla	r5, r8, lr, r5
    82c6:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    82ca:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    82ce:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    82d2:	f810 9c04 	ldrb.w	r9, [r0, #-4]
    82d6:	f009 0b1f 	and.w	fp, r9, #31
    82da:	fb06 f60b 	mul.w	r6, r6, fp
    82de:	9c06      	ldr	r4, [sp, #24]
    82e0:	fb08 6804 	mla	r8, r8, r4, r6
    82e4:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    82e8:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    82ec:	0df6      	lsrs	r6, r6, #23
    82ee:	f366 0904 	bfi	r9, r6, #0, #5
    82f2:	f800 9c04 	strb.w	r9, [r0, #-4]
    82f6:	f830 6c04 	ldrh.w	r6, [r0, #-4]
    82fa:	f365 164a 	bfi	r6, r5, #5, #6
    82fe:	f820 6c04 	strh.w	r6, [r0, #-4]
    8302:	0a36      	lsrs	r6, r6, #8
    8304:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8306:	f364 06c7 	bfi	r6, r4, #3, #5
    830a:	f800 6c03 	strb.w	r6, [r0, #-3]
                            FILL_NORMAL_MASK_PX(x + 2, color)
    830e:	f812 8c02 	ldrb.w	r8, [r2, #-2]
    8312:	f1b8 0f00 	cmp.w	r8, #0
    8316:	d03f      	beq.n	8398 <_lv_blend_fill+0x6a0>
    8318:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    831c:	f000 8085 	beq.w	842a <_lv_blend_fill+0x732>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8320:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    8324:	f810 4c01 	ldrb.w	r4, [r0, #-1]
    8328:	08e4      	lsrs	r4, r4, #3
    832a:	fb06 f404 	mul.w	r4, r6, r4
    832e:	fb08 440c 	mla	r4, r8, ip, r4
    8332:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    8336:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    833a:	f3c4 54c4 	ubfx	r4, r4, #23, #5
    833e:	9409      	str	r4, [sp, #36]	; 0x24
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8340:	f830 5c02 	ldrh.w	r5, [r0, #-2]
    8344:	f3c5 1545 	ubfx	r5, r5, #5, #6
    8348:	fb06 f505 	mul.w	r5, r6, r5
    834c:	fb08 550e 	mla	r5, r8, lr, r5
    8350:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    8354:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    8358:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    835c:	f810 9c02 	ldrb.w	r9, [r0, #-2]
    8360:	f009 0b1f 	and.w	fp, r9, #31
    8364:	fb06 f60b 	mul.w	r6, r6, fp
    8368:	9c06      	ldr	r4, [sp, #24]
    836a:	fb08 6804 	mla	r8, r8, r4, r6
    836e:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    8372:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    8376:	0df6      	lsrs	r6, r6, #23
    8378:	f366 0904 	bfi	r9, r6, #0, #5
    837c:	f800 9c02 	strb.w	r9, [r0, #-2]
    8380:	f830 6c02 	ldrh.w	r6, [r0, #-2]
    8384:	f365 164a 	bfi	r6, r5, #5, #6
    8388:	f820 6c02 	strh.w	r6, [r0, #-2]
    838c:	0a36      	lsrs	r6, r6, #8
    838e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8390:	f364 06c7 	bfi	r6, r4, #3, #5
    8394:	f800 6c01 	strb.w	r6, [r0, #-1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
    8398:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    839c:	f1b8 0f00 	cmp.w	r8, #0
    83a0:	f43f af1d 	beq.w	81de <_lv_blend_fill+0x4e6>
    83a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    83a8:	d044      	beq.n	8434 <_lv_blend_fill+0x73c>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    83aa:	f1c8 06ff 	rsb	r6, r8, #255	; 0xff
    83ae:	7844      	ldrb	r4, [r0, #1]
    83b0:	08e4      	lsrs	r4, r4, #3
    83b2:	fb06 f404 	mul.w	r4, r6, r4
    83b6:	fb08 440c 	mla	r4, r8, ip, r4
    83ba:	eb04 2504 	add.w	r5, r4, r4, lsl #8
    83be:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
    83c2:	f3c4 5bc4 	ubfx	fp, r4, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    83c6:	8805      	ldrh	r5, [r0, #0]
    83c8:	f3c5 1545 	ubfx	r5, r5, #5, #6
    83cc:	fb06 f505 	mul.w	r5, r6, r5
    83d0:	fb08 550e 	mla	r5, r8, lr, r5
    83d4:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    83d8:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    83dc:	f3c5 55c5 	ubfx	r5, r5, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    83e0:	f890 9000 	ldrb.w	r9, [r0]
    83e4:	f009 0a1f 	and.w	sl, r9, #31
    83e8:	fb06 f60a 	mul.w	r6, r6, sl
    83ec:	9c06      	ldr	r4, [sp, #24]
    83ee:	fb08 6804 	mla	r8, r8, r4, r6
    83f2:	eb08 2608 	add.w	r6, r8, r8, lsl #8
    83f6:	eb08 16c6 	add.w	r6, r8, r6, lsl #7
    83fa:	0df6      	lsrs	r6, r6, #23
    83fc:	f366 0904 	bfi	r9, r6, #0, #5
    8400:	f880 9000 	strb.w	r9, [r0]
    8404:	8806      	ldrh	r6, [r0, #0]
    8406:	f365 164a 	bfi	r6, r5, #5, #6
    840a:	8006      	strh	r6, [r0, #0]
    840c:	0a36      	lsrs	r6, r6, #8
    840e:	f36b 06c7 	bfi	r6, fp, #3, #5
    8412:	7046      	strb	r6, [r0, #1]
    8414:	e6e3      	b.n	81de <_lv_blend_fill+0x4e6>
                            FILL_NORMAL_MASK_PX(x, color)
    8416:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    841a:	f820 4c06 	strh.w	r4, [r0, #-6]
    841e:	e731      	b.n	8284 <_lv_blend_fill+0x58c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
    8420:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    8424:	f820 4c04 	strh.w	r4, [r0, #-4]
    8428:	e771      	b.n	830e <_lv_blend_fill+0x616>
                            FILL_NORMAL_MASK_PX(x + 2, color)
    842a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    842e:	f820 4c02 	strh.w	r4, [r0, #-2]
    8432:	e7b1      	b.n	8398 <_lv_blend_fill+0x6a0>
                            FILL_NORMAL_MASK_PX(x + 3, color)
    8434:	f8bd 401c 	ldrh.w	r4, [sp, #28]
    8438:	8004      	strh	r4, [r0, #0]
    843a:	e6d0      	b.n	81de <_lv_blend_fill+0x4e6>
    843c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                for(; x < draw_area_w ; x++) {
    843e:	428d      	cmp	r5, r1
    8440:	dd4e      	ble.n	84e0 <_lv_blend_fill+0x7e8>
    8442:	1e54      	subs	r4, r2, #1
    8444:	9b05      	ldr	r3, [sp, #20]
    8446:	eb03 0841 	add.w	r8, r3, r1, lsl #1
    844a:	9e06      	ldr	r6, [sp, #24]
    844c:	e008      	b.n	8460 <_lv_blend_fill+0x768>
                    FILL_NORMAL_MASK_PX(x, color)
    844e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    8452:	f8a8 3000 	strh.w	r3, [r8]
                for(; x < draw_area_w ; x++) {
    8456:	3101      	adds	r1, #1
    8458:	f108 0802 	add.w	r8, r8, #2
    845c:	428d      	cmp	r5, r1
    845e:	dd3f      	ble.n	84e0 <_lv_blend_fill+0x7e8>
                    FILL_NORMAL_MASK_PX(x, color)
    8460:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8464:	2b00      	cmp	r3, #0
    8466:	d0f6      	beq.n	8456 <_lv_blend_fill+0x75e>
    8468:	2bff      	cmp	r3, #255	; 0xff
    846a:	d0f0      	beq.n	844e <_lv_blend_fill+0x756>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    846c:	f1c3 09ff 	rsb	r9, r3, #255	; 0xff
    8470:	f898 2001 	ldrb.w	r2, [r8, #1]
    8474:	08d2      	lsrs	r2, r2, #3
    8476:	fb09 f202 	mul.w	r2, r9, r2
    847a:	fb03 220c 	mla	r2, r3, ip, r2
    847e:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    8482:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    8486:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    848a:	f8b8 0000 	ldrh.w	r0, [r8]
    848e:	f3c0 1045 	ubfx	r0, r0, #5, #6
    8492:	fb09 f000 	mul.w	r0, r9, r0
    8496:	fb03 000e 	mla	r0, r3, lr, r0
    849a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    849e:	eb00 10c7 	add.w	r0, r0, r7, lsl #7
    84a2:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    84a6:	f898 7000 	ldrb.w	r7, [r8]
    84aa:	f007 0a1f 	and.w	sl, r7, #31
    84ae:	fb09 f90a 	mul.w	r9, r9, sl
    84b2:	fb03 9306 	mla	r3, r3, r6, r9
    84b6:	eb03 2903 	add.w	r9, r3, r3, lsl #8
    84ba:	eb03 13c9 	add.w	r3, r3, r9, lsl #7
    84be:	0ddb      	lsrs	r3, r3, #23
    84c0:	f363 0704 	bfi	r7, r3, #0, #5
    84c4:	f888 7000 	strb.w	r7, [r8]
    84c8:	f8b8 3000 	ldrh.w	r3, [r8]
    84cc:	f360 134a 	bfi	r3, r0, #5, #6
    84d0:	f8a8 3000 	strh.w	r3, [r8]
    84d4:	0a1b      	lsrs	r3, r3, #8
    84d6:	f362 03c7 	bfi	r3, r2, #3, #5
    84da:	f888 3001 	strb.w	r3, [r8, #1]
    84de:	e7ba      	b.n	8456 <_lv_blend_fill+0x75e>
                disp_buf_first += disp_w;
    84e0:	9b05      	ldr	r3, [sp, #20]
    84e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    84e4:	4413      	add	r3, r2
    84e6:	9305      	str	r3, [sp, #20]
    84e8:	9b08      	ldr	r3, [sp, #32]
    84ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    84ec:	4413      	add	r3, r2
    84ee:	9308      	str	r3, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
    84f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    84f2:	3301      	adds	r3, #1
    84f4:	930a      	str	r3, [sp, #40]	; 0x28
    84f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    84f8:	429a      	cmp	r2, r3
    84fa:	f43f ac0a 	beq.w	7d12 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    84fe:	2d00      	cmp	r5, #0
    8500:	f340 8170 	ble.w	87e4 <_lv_blend_fill+0xaec>
    8504:	9a08      	ldr	r2, [sp, #32]
    8506:	f012 0f03 	tst.w	r2, #3
    850a:	f000 8179 	beq.w	8800 <_lv_blend_fill+0xb08>
    850e:	9f05      	ldr	r7, [sp, #20]
    8510:	4690      	mov	r8, r2
    8512:	2100      	movs	r1, #0
    8514:	9c06      	ldr	r4, [sp, #24]
    8516:	e620      	b.n	815a <_lv_blend_fill+0x462>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    8518:	2aff      	cmp	r2, #255	; 0xff
    851a:	d002      	beq.n	8522 <_lv_blend_fill+0x82a>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    851c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    8520:	e004      	b.n	852c <_lv_blend_fill+0x834>
    8522:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
    8526:	882a      	ldrh	r2, [r5, #0]
    8528:	429a      	cmp	r2, r3
    852a:	d032      	beq.n	8592 <_lv_blend_fill+0x89a>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    852c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    8530:	d042      	beq.n	85b8 <_lv_blend_fill+0x8c0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8532:	f1ce 04ff 	rsb	r4, lr, #255	; 0xff
    8536:	786b      	ldrb	r3, [r5, #1]
    8538:	08db      	lsrs	r3, r3, #3
    853a:	fb0e f20c 	mul.w	r2, lr, ip
    853e:	fb04 2303 	mla	r3, r4, r3, r2
    8542:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8546:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    854a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    854e:	882a      	ldrh	r2, [r5, #0]
    8550:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8554:	fb0b f10e 	mul.w	r1, fp, lr
    8558:	fb04 1202 	mla	r2, r4, r2, r1
    855c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    8560:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    8564:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8568:	7829      	ldrb	r1, [r5, #0]
    856a:	f001 011f 	and.w	r1, r1, #31
    856e:	fb09 f60e 	mul.w	r6, r9, lr
    8572:	fb04 6101 	mla	r1, r4, r1, r6
    8576:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    857a:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    857e:	0dc9      	lsrs	r1, r1, #23
    8580:	f361 0a04 	bfi	sl, r1, #0, #5
    8584:	f362 1a4a 	bfi	sl, r2, #5, #6
    8588:	f363 2acf 	bfi	sl, r3, #11, #5
    858c:	fa1f f18a 	uxth.w	r1, sl
                            last_dest_color.full = disp_buf_first[x].full;
    8590:	882b      	ldrh	r3, [r5, #0]
                        disp_buf_first[x] = last_res_color;
    8592:	8029      	strh	r1, [r5, #0]
    8594:	4602      	mov	r2, r0
    8596:	3502      	adds	r5, #2
                for(x = 0; x < draw_area_w; x++) {
    8598:	45a8      	cmp	r8, r5
    859a:	d00f      	beq.n	85bc <_lv_blend_fill+0x8c4>
                    if(*mask_tmp_x) {
    859c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    85a0:	2800      	cmp	r0, #0
    85a2:	d0f8      	beq.n	8596 <_lv_blend_fill+0x89e>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    85a4:	4290      	cmp	r0, r2
    85a6:	d0be      	beq.n	8526 <_lv_blend_fill+0x82e>
    85a8:	28ff      	cmp	r0, #255	; 0xff
    85aa:	d0b5      	beq.n	8518 <_lv_blend_fill+0x820>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
    85ac:	9b07      	ldr	r3, [sp, #28]
    85ae:	fb03 fe00 	mul.w	lr, r3, r0
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
    85b2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    85b6:	e7b9      	b.n	852c <_lv_blend_fill+0x834>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
    85b8:	9908      	ldr	r1, [sp, #32]
    85ba:	e7e9      	b.n	8590 <_lv_blend_fill+0x898>
                disp_buf_first += disp_w;
    85bc:	9805      	ldr	r0, [sp, #20]
    85be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    85c0:	4420      	add	r0, r4
    85c2:	9005      	str	r0, [sp, #20]
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    85c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    85c6:	3001      	adds	r0, #1
    85c8:	4604      	mov	r4, r0
    85ca:	900a      	str	r0, [sp, #40]	; 0x28
    85cc:	9806      	ldr	r0, [sp, #24]
    85ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    85d0:	4428      	add	r0, r5
    85d2:	9006      	str	r0, [sp, #24]
    85d4:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
    85d8:	4284      	cmp	r4, r0
    85da:	f73f ab9a 	bgt.w	7d12 <_lv_blend_fill+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    85de:	980d      	ldr	r0, [sp, #52]	; 0x34
    85e0:	2800      	cmp	r0, #0
    85e2:	ddeb      	ble.n	85bc <_lv_blend_fill+0x8c4>
    85e4:	9805      	ldr	r0, [sp, #20]
    85e6:	4605      	mov	r5, r0
    85e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    85ea:	eb00 0804 	add.w	r8, r0, r4
    85ee:	9f06      	ldr	r7, [sp, #24]
    85f0:	e7d4      	b.n	859c <_lv_blend_fill+0x8a4>
    85f2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
    switch(mode) {
    85f6:	f1b9 0f01 	cmp.w	r9, #1
    85fa:	d040      	beq.n	867e <_lv_blend_fill+0x986>
    85fc:	f1b9 0f02 	cmp.w	r9, #2
    8600:	d132      	bne.n	8668 <_lv_blend_fill+0x970>
            blend_fp = color_blend_true_color_subtractive;
    8602:	4b83      	ldr	r3, [pc, #524]	; (8810 <_lv_blend_fill+0xb18>)
    8604:	9305      	str	r3, [sp, #20]
    8606:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    860a:	f002 081f 	and.w	r8, r2, #31
    860e:	f3c2 1645 	ubfx	r6, r2, #5, #6
    8612:	f3c2 23c4 	ubfx	r3, r2, #11, #5
    8616:	4699      	mov	r9, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8618:	8aba      	ldrh	r2, [r7, #20]
    861a:	3201      	adds	r2, #1
    861c:	8a3b      	ldrh	r3, [r7, #16]
    861e:	1ad3      	subs	r3, r2, r3
    8620:	b21f      	sxth	r7, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    8622:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    8626:	fb0c f307 	mul.w	r3, ip, r7
    862a:	9a06      	ldr	r2, [sp, #24]
    862c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    8630:	9207      	str	r2, [sp, #28]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    8632:	2c01      	cmp	r4, #1
    8634:	d026      	beq.n	8684 <_lv_blend_fill+0x98c>
    8636:	3001      	adds	r0, #1
    8638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    863a:	1a80      	subs	r0, r0, r2
    863c:	b202      	sxth	r2, r0
    863e:	920c      	str	r2, [sp, #48]	; 0x30
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    8640:	9a08      	ldr	r2, [sp, #32]
    8642:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8644:	1a52      	subs	r2, r2, r1
    8646:	9208      	str	r2, [sp, #32]
        last_dest_color.full = disp_buf_tmp[0].full;
    8648:	9a06      	ldr	r2, [sp, #24]
    864a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    864e:	45f4      	cmp	ip, lr
    8650:	f73f ab5f 	bgt.w	7d12 <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    8654:	007b      	lsls	r3, r7, #1
    8656:	930b      	str	r3, [sp, #44]	; 0x2c
    8658:	4610      	mov	r0, r2
    865a:	2100      	movs	r1, #0
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    865c:	f8cd b018 	str.w	fp, [sp, #24]
    8660:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    8664:	46cb      	mov	fp, r9
    8666:	e0b0      	b.n	87ca <_lv_blend_fill+0xad2>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
    8668:	4b6a      	ldr	r3, [pc, #424]	; (8814 <_lv_blend_fill+0xb1c>)
    866a:	9300      	str	r3, [sp, #0]
    866c:	4b6a      	ldr	r3, [pc, #424]	; (8818 <_lv_blend_fill+0xb20>)
    866e:	f44f 7204 	mov.w	r2, #528	; 0x210
    8672:	496a      	ldr	r1, [pc, #424]	; (881c <_lv_blend_fill+0xb24>)
    8674:	2002      	movs	r0, #2
    8676:	4c6a      	ldr	r4, [pc, #424]	; (8820 <_lv_blend_fill+0xb28>)
    8678:	47a0      	blx	r4
    867a:	f7ff bb4a 	b.w	7d12 <_lv_blend_fill+0x1a>
            blend_fp = color_blend_true_color_additive;
    867e:	4b69      	ldr	r3, [pc, #420]	; (8824 <_lv_blend_fill+0xb2c>)
    8680:	9305      	str	r3, [sp, #20]
    8682:	e7c0      	b.n	8606 <_lv_blend_fill+0x90e>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
    8684:	f04f 0a00 	mov.w	sl, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8688:	fb0b f309 	mul.w	r3, fp, r9
    868c:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    8690:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    8694:	f3c3 50c4 	ubfx	r0, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8698:	fb0b f306 	mul.w	r3, fp, r6
    869c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    86a0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    86a4:	f3c3 52c5 	ubfx	r2, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    86a8:	fb0b f308 	mul.w	r3, fp, r8
    86ac:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    86b0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    86b4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    86b8:	45f4      	cmp	ip, lr
    86ba:	f73f ab2a 	bgt.w	7d12 <_lv_blend_fill+0x1a>
            disp_buf_tmp += disp_w;
    86be:	0079      	lsls	r1, r7, #1
    86c0:	9108      	str	r1, [sp, #32]
    86c2:	f8cd b018 	str.w	fp, [sp, #24]
    86c6:	46cb      	mov	fp, r9
    86c8:	e03a      	b.n	8740 <_lv_blend_fill+0xa48>
                disp_buf_tmp[x] = last_res_color;
    86ca:	7821      	ldrb	r1, [r4, #0]
    86cc:	f363 0104 	bfi	r1, r3, #0, #5
    86d0:	7021      	strb	r1, [r4, #0]
    86d2:	8821      	ldrh	r1, [r4, #0]
    86d4:	f362 114a 	bfi	r1, r2, #5, #6
    86d8:	8021      	strh	r1, [r4, #0]
    86da:	0a09      	lsrs	r1, r1, #8
    86dc:	f360 01c7 	bfi	r1, r0, #3, #5
    86e0:	7061      	strb	r1, [r4, #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    86e2:	f109 0901 	add.w	r9, r9, #1
    86e6:	3702      	adds	r7, #2
    86e8:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    86ec:	4589      	cmp	r9, r1
    86ee:	dc1a      	bgt.n	8726 <_lv_blend_fill+0xa2e>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
    86f0:	463c      	mov	r4, r7
    86f2:	fa1f f18a 	uxth.w	r1, sl
    86f6:	f8b7 e000 	ldrh.w	lr, [r7]
    86fa:	4571      	cmp	r1, lr
    86fc:	d0e5      	beq.n	86ca <_lv_blend_fill+0x9d2>
                    last_dest_color = disp_buf_tmp[x];
    86fe:	f8b7 a000 	ldrh.w	sl, [r7]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
    8702:	f368 0504 	bfi	r5, r8, #0, #5
    8706:	f366 154a 	bfi	r5, r6, #5, #6
    870a:	f36b 25cf 	bfi	r5, fp, #11, #5
    870e:	9a06      	ldr	r2, [sp, #24]
    8710:	4651      	mov	r1, sl
    8712:	4628      	mov	r0, r5
    8714:	9b05      	ldr	r3, [sp, #20]
    8716:	4798      	blx	r3
    8718:	f000 031f 	and.w	r3, r0, #31
    871c:	f3c0 1245 	ubfx	r2, r0, #5, #6
    8720:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    8724:	e7d1      	b.n	86ca <_lv_blend_fill+0x9d2>
            disp_buf_tmp += disp_w;
    8726:	9907      	ldr	r1, [sp, #28]
    8728:	9c08      	ldr	r4, [sp, #32]
    872a:	4421      	add	r1, r4
    872c:	9107      	str	r1, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    872e:	9909      	ldr	r1, [sp, #36]	; 0x24
    8730:	3101      	adds	r1, #1
    8732:	460c      	mov	r4, r1
    8734:	9109      	str	r1, [sp, #36]	; 0x24
    8736:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
    873a:	428c      	cmp	r4, r1
    873c:	f73f aae9 	bgt.w	7d12 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8740:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
    8744:	46b9      	mov	r9, r7
    8746:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
    874a:	428f      	cmp	r7, r1
    874c:	dceb      	bgt.n	8726 <_lv_blend_fill+0xa2e>
    874e:	9907      	ldr	r1, [sp, #28]
    8750:	eb01 0747 	add.w	r7, r1, r7, lsl #1
    8754:	e7cc      	b.n	86f0 <_lv_blend_fill+0x9f8>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
    8756:	2bf9      	cmp	r3, #249	; 0xf9
    8758:	bf9d      	ittte	ls
    875a:	9a0a      	ldrls	r2, [sp, #40]	; 0x28
    875c:	4353      	mulls	r3, r2
    875e:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    8762:	9a06      	ldrhi	r2, [sp, #24]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
    8764:	f368 0504 	bfi	r5, r8, #0, #5
    8768:	f366 154a 	bfi	r5, r6, #5, #6
    876c:	f36b 25cf 	bfi	r5, fp, #11, #5
    8770:	8821      	ldrh	r1, [r4, #0]
    8772:	4628      	mov	r0, r5
    8774:	9b05      	ldr	r3, [sp, #20]
    8776:	4798      	blx	r3
    8778:	b280      	uxth	r0, r0
                    last_mask = mask_tmp[x];
    877a:	f89a 1000 	ldrb.w	r1, [sl]
                    last_dest_color.full = disp_buf_tmp[x].full;
    877e:	8822      	ldrh	r2, [r4, #0]
                disp_buf_tmp[x] = last_res_color;
    8780:	8020      	strh	r0, [r4, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8782:	f109 0901 	add.w	r9, r9, #1
    8786:	3701      	adds	r7, #1
    8788:	3402      	adds	r4, #2
    878a:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    878e:	4599      	cmp	r9, r3
    8790:	dc0a      	bgt.n	87a8 <_lv_blend_fill+0xab0>
    8792:	46ba      	mov	sl, r7
                if(mask_tmp[x] == 0) continue;
    8794:	783b      	ldrb	r3, [r7, #0]
    8796:	2b00      	cmp	r3, #0
    8798:	d0f3      	beq.n	8782 <_lv_blend_fill+0xa8a>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
    879a:	428b      	cmp	r3, r1
    879c:	d1db      	bne.n	8756 <_lv_blend_fill+0xa5e>
    879e:	f8b4 e000 	ldrh.w	lr, [r4]
    87a2:	4596      	cmp	lr, r2
    87a4:	d1d7      	bne.n	8756 <_lv_blend_fill+0xa5e>
    87a6:	e7eb      	b.n	8780 <_lv_blend_fill+0xa88>
            disp_buf_tmp += disp_w;
    87a8:	9b07      	ldr	r3, [sp, #28]
    87aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    87ac:	4423      	add	r3, r4
    87ae:	9307      	str	r3, [sp, #28]
    87b0:	9b08      	ldr	r3, [sp, #32]
    87b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    87b4:	4423      	add	r3, r4
    87b6:	9308      	str	r3, [sp, #32]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    87b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    87ba:	3301      	adds	r3, #1
    87bc:	461c      	mov	r4, r3
    87be:	9309      	str	r3, [sp, #36]	; 0x24
    87c0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    87c4:	429c      	cmp	r4, r3
    87c6:	f73f aaa4 	bgt.w	7d12 <_lv_blend_fill+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    87ca:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
    87ce:	46a1      	mov	r9, r4
    87d0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    87d4:	429c      	cmp	r4, r3
    87d6:	dce7      	bgt.n	87a8 <_lv_blend_fill+0xab0>
    87d8:	9b08      	ldr	r3, [sp, #32]
    87da:	191f      	adds	r7, r3, r4
    87dc:	9b07      	ldr	r3, [sp, #28]
    87de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    87e2:	e7d6      	b.n	8792 <_lv_blend_fill+0xa9a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    87e4:	9b08      	ldr	r3, [sp, #32]
    87e6:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    87e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    87ea:	428a      	cmp	r2, r1
    87ec:	f6ff ae78 	blt.w	84e0 <_lv_blend_fill+0x7e8>
    87f0:	3304      	adds	r3, #4
    87f2:	1cc8      	adds	r0, r1, #3
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    87fa:	950e      	str	r5, [sp, #56]	; 0x38
    87fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    87fe:	e4f4      	b.n	81ea <_lv_blend_fill+0x4f2>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8800:	9b08      	ldr	r3, [sp, #32]
    8802:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
    8804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8806:	428a      	cmp	r2, r1
    8808:	daf2      	bge.n	87f0 <_lv_blend_fill+0xaf8>
    880a:	461a      	mov	r2, r3
    880c:	e619      	b.n	8442 <_lv_blend_fill+0x74a>
    880e:	bf00      	nop
    8810:	00007c47 	.word	0x00007c47
    8814:	0001c174 	.word	0x0001c174
    8818:	0001c128 	.word	0x0001c128
    881c:	0001c144 	.word	0x0001c144
    8820:	00012805 	.word	0x00012805
    8824:	00007b91 	.word	0x00007b91

00008828 <_lv_blend_map>:
{
    8828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    882c:	b091      	sub	sp, #68	; 0x44
    882e:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
    8832:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
    8836:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70
    if(opa < LV_OPA_MIN) return;
    883a:	f1ba 0f04 	cmp.w	sl, #4
    883e:	d900      	bls.n	8842 <_lv_blend_map+0x1a>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
    8840:	b914      	cbnz	r4, 8848 <_lv_blend_map+0x20>
}
    8842:	b011      	add	sp, #68	; 0x44
    8844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8848:	9304      	str	r3, [sp, #16]
    884a:	9207      	str	r2, [sp, #28]
    884c:	460f      	mov	r7, r1
    884e:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
    8850:	463a      	mov	r2, r7
    8852:	a80e      	add	r0, sp, #56	; 0x38
    8854:	4bbc      	ldr	r3, [pc, #752]	; (8b48 <_lv_blend_map+0x320>)
    8856:	4798      	blx	r3
    if(!is_common) return;
    8858:	2800      	cmp	r0, #0
    885a:	d0f2      	beq.n	8842 <_lv_blend_map+0x1a>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    885c:	4bbb      	ldr	r3, [pc, #748]	; (8b4c <_lv_blend_map+0x324>)
    885e:	4798      	blx	r3
    8860:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    8862:	4bbb      	ldr	r3, [pc, #748]	; (8b50 <_lv_blend_map+0x328>)
    8864:	4798      	blx	r3
    8866:	4606      	mov	r6, r0
    lv_color_t * disp_buf = vdb->buf_act;
    8868:	6883      	ldr	r3, [r0, #8]
    886a:	9305      	str	r3, [sp, #20]
    draw_area.x1 -= disp_area->x1;
    886c:	8a02      	ldrh	r2, [r0, #16]
    886e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    8872:	1a9b      	subs	r3, r3, r2
    8874:	b29b      	uxth	r3, r3
    8876:	9306      	str	r3, [sp, #24]
    8878:	f9bd c018 	ldrsh.w	ip, [sp, #24]
    887c:	f8ad c038 	strh.w	ip, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    8880:	8a43      	ldrh	r3, [r0, #18]
    8882:	f8bd b03a 	ldrh.w	fp, [sp, #58]	; 0x3a
    8886:	ebab 0b03 	sub.w	fp, fp, r3
    888a:	fa1f fb8b 	uxth.w	fp, fp
    888e:	fa0f fe8b 	sxth.w	lr, fp
    8892:	f8ad e03a 	strh.w	lr, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    8896:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
    889a:	1a89      	subs	r1, r1, r2
    889c:	b289      	uxth	r1, r1
    889e:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    88a2:	f8bd 003e 	ldrh.w	r0, [sp, #62]	; 0x3e
    88a6:	1ac0      	subs	r0, r0, r3
    88a8:	b280      	uxth	r0, r0
    88aa:	b202      	sxth	r2, r0
    88ac:	9208      	str	r2, [sp, #32]
    88ae:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    if(mask && disp->driver.antialiasing == 0)
    88b2:	9a04      	ldr	r2, [sp, #16]
    88b4:	b1d2      	cbz	r2, 88ec <_lv_blend_map+0xc4>
    88b6:	f898 3008 	ldrb.w	r3, [r8, #8]
    88ba:	f013 0f01 	tst.w	r3, #1
    88be:	d115      	bne.n	88ec <_lv_blend_map+0xc4>
    88c0:	f101 0901 	add.w	r9, r1, #1
    88c4:	9b06      	ldr	r3, [sp, #24]
    88c6:	eba9 0903 	sub.w	r9, r9, r3
    88ca:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    88ce:	f1b9 0f00 	cmp.w	r9, #0
    88d2:	dd0b      	ble.n	88ec <_lv_blend_map+0xc4>
    88d4:	4613      	mov	r3, r2
    88d6:	4491      	add	r9, r2
    88d8:	781a      	ldrb	r2, [r3, #0]
    88da:	2a80      	cmp	r2, #128	; 0x80
    88dc:	f04f 32ff 	mov.w	r2, #4294967295
    88e0:	bf98      	it	ls
    88e2:	2200      	movls	r2, #0
    88e4:	f803 2b01 	strb.w	r2, [r3], #1
    88e8:	454b      	cmp	r3, r9
    88ea:	d1f5      	bne.n	88d8 <_lv_blend_map+0xb0>
    if(disp->driver.set_px_cb) {
    88ec:	f8d8 3014 	ldr.w	r3, [r8, #20]
    88f0:	2b00      	cmp	r3, #0
    88f2:	f000 80a9 	beq.w	8a48 <_lv_blend_map+0x220>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    88f6:	4b95      	ldr	r3, [pc, #596]	; (8b4c <_lv_blend_map+0x324>)
    88f8:	4798      	blx	r3
    88fa:	4605      	mov	r5, r0
    88fc:	f9b6 0010 	ldrsh.w	r0, [r6, #16]
    8900:	8ab3      	ldrh	r3, [r6, #20]
    8902:	3301      	adds	r3, #1
    8904:	1a1b      	subs	r3, r3, r0
    8906:	b21b      	sxth	r3, r3
    8908:	9306      	str	r3, [sp, #24]
    890a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
    890e:	f9b7 2000 	ldrsh.w	r2, [r7]
    8912:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    8916:	f109 0901 	add.w	r9, r9, #1
    891a:	eba9 0902 	sub.w	r9, r9, r2
    891e:	fa0f f989 	sxth.w	r9, r9
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    8922:	f9bd e03a 	ldrsh.w	lr, [sp, #58]	; 0x3a
    8926:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    892a:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    892e:	1b9b      	subs	r3, r3, r6
    8930:	ebae 0303 	sub.w	r3, lr, r3
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    8934:	1a12      	subs	r2, r2, r0
    8936:	1a8a      	subs	r2, r1, r2
    map_buf_tmp -= draw_area->x1;
    8938:	fb09 2303 	mla	r3, r9, r3, r2
    893c:	ea4f 0b41 	mov.w	fp, r1, lsl #1
    8940:	ebcb 0b43 	rsb	fp, fp, r3, lsl #1
    8944:	9b07      	ldr	r3, [sp, #28]
    8946:	445b      	add	r3, fp
    8948:	469b      	mov	fp, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    894a:	2c01      	cmp	r4, #1
    894c:	d046      	beq.n	89dc <_lv_blend_map+0x1b4>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    894e:	9b04      	ldr	r3, [sp, #16]
    8950:	1a5b      	subs	r3, r3, r1
    8952:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8954:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8958:	459e      	cmp	lr, r3
    895a:	f73f af72 	bgt.w	8842 <_lv_blend_map+0x1a>
    895e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
            map_buf_tmp += map_w;
    8962:	ea4f 0249 	mov.w	r2, r9, lsl #1
    8966:	9208      	str	r2, [sp, #32]
    8968:	3301      	adds	r3, #1
    896a:	1a59      	subs	r1, r3, r1
            mask_tmp += draw_area_w;
    896c:	b20b      	sxth	r3, r1
    896e:	9309      	str	r3, [sp, #36]	; 0x24
    8970:	46f1      	mov	r9, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8972:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    8976:	4634      	mov	r4, r6
    8978:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    897c:	429e      	cmp	r6, r3
    897e:	dc20      	bgt.n	89c2 <_lv_blend_map+0x19a>
    8980:	9b07      	ldr	r3, [sp, #28]
    8982:	eb03 0806 	add.w	r8, r3, r6
    8986:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    898a:	fa0f f789 	sxth.w	r7, r9
    898e:	9604      	str	r6, [sp, #16]
                                       (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
    8990:	f818 3b01 	ldrb.w	r3, [r8], #1
    8994:	fb03 f30a 	mul.w	r3, r3, sl
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
    8998:	f3c3 2307 	ubfx	r3, r3, #8, #8
    899c:	9302      	str	r3, [sp, #8]
    899e:	9a04      	ldr	r2, [sp, #16]
    89a0:	f832 3b02 	ldrh.w	r3, [r2], #2
    89a4:	9204      	str	r2, [sp, #16]
    89a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    89aa:	9700      	str	r7, [sp, #0]
    89ac:	b223      	sxth	r3, r4
    89ae:	9a06      	ldr	r2, [sp, #24]
    89b0:	9905      	ldr	r1, [sp, #20]
    89b2:	4628      	mov	r0, r5
    89b4:	696e      	ldr	r6, [r5, #20]
    89b6:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    89b8:	3401      	adds	r4, #1
    89ba:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    89be:	429c      	cmp	r4, r3
    89c0:	dde6      	ble.n	8990 <_lv_blend_map+0x168>
    89c2:	9b07      	ldr	r3, [sp, #28]
    89c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    89c6:	4413      	add	r3, r2
    89c8:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    89ca:	9b08      	ldr	r3, [sp, #32]
    89cc:	449b      	add	fp, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    89ce:	f109 0901 	add.w	r9, r9, #1
    89d2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    89d6:	4599      	cmp	r9, r3
    89d8:	ddcb      	ble.n	8972 <_lv_blend_map+0x14a>
    89da:	e732      	b.n	8842 <_lv_blend_map+0x1a>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    89dc:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    89e0:	4573      	cmp	r3, lr
    89e2:	f6ff af2e 	blt.w	8842 <_lv_blend_map+0x1a>
            map_buf_tmp += map_w;
    89e6:	ea4f 0949 	mov.w	r9, r9, lsl #1
    89ea:	46f0      	mov	r8, lr
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    89ec:	f9bd 7038 	ldrsh.w	r7, [sp, #56]	; 0x38
    89f0:	463c      	mov	r4, r7
    89f2:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    89f6:	429f      	cmp	r7, r3
    89f8:	dc1e      	bgt.n	8a38 <_lv_blend_map+0x210>
    89fa:	eb0b 0747 	add.w	r7, fp, r7, lsl #1
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
    89fe:	fa0f f688 	sxth.w	r6, r8
    8a02:	9704      	str	r7, [sp, #16]
    8a04:	4633      	mov	r3, r6
    8a06:	4656      	mov	r6, sl
    8a08:	46ca      	mov	sl, r9
    8a0a:	4699      	mov	r9, r3
    8a0c:	9602      	str	r6, [sp, #8]
    8a0e:	9a04      	ldr	r2, [sp, #16]
    8a10:	f832 3b02 	ldrh.w	r3, [r2], #2
    8a14:	9204      	str	r2, [sp, #16]
    8a16:	f8ad 3004 	strh.w	r3, [sp, #4]
    8a1a:	f8cd 9000 	str.w	r9, [sp]
    8a1e:	b223      	sxth	r3, r4
    8a20:	9a06      	ldr	r2, [sp, #24]
    8a22:	9905      	ldr	r1, [sp, #20]
    8a24:	4628      	mov	r0, r5
    8a26:	696f      	ldr	r7, [r5, #20]
    8a28:	47b8      	blx	r7
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    8a2a:	3401      	adds	r4, #1
    8a2c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    8a30:	429c      	cmp	r4, r3
    8a32:	ddeb      	ble.n	8a0c <_lv_blend_map+0x1e4>
    8a34:	46d1      	mov	r9, sl
    8a36:	46b2      	mov	sl, r6
            map_buf_tmp += map_w;
    8a38:	44cb      	add	fp, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8a3a:	f108 0801 	add.w	r8, r8, #1
    8a3e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8a42:	4598      	cmp	r8, r3
    8a44:	ddd2      	ble.n	89ec <_lv_blend_map+0x1c4>
    8a46:	e6fc      	b.n	8842 <_lv_blend_map+0x1a>
    else if(mode == LV_BLEND_MODE_NORMAL) {
    8a48:	2d00      	cmp	r5, #0
    8a4a:	f040 8399 	bne.w	9180 <_lv_blend_map+0x958>
    8a4e:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    8a52:	f8b6 8014 	ldrh.w	r8, [r6, #20]
    8a56:	f108 0801 	add.w	r8, r8, #1
    8a5a:	eba8 0803 	sub.w	r8, r8, r3
    8a5e:	fa0f f888 	sxth.w	r8, r8
    8a62:	3101      	adds	r1, #1
    8a64:	9a06      	ldr	r2, [sp, #24]
    8a66:	1a89      	subs	r1, r1, r2
    8a68:	b20a      	sxth	r2, r1
    8a6a:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
    8a6c:	4615      	mov	r5, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    8a6e:	3001      	adds	r0, #1
    8a70:	eba0 0b0b 	sub.w	fp, r0, fp
    int32_t draw_area_h = lv_area_get_height(draw_area);
    8a74:	fa0f f28b 	sxth.w	r2, fp
    8a78:	9208      	str	r2, [sp, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    8a7a:	f9b7 1000 	ldrsh.w	r1, [r7]
    8a7e:	f8b7 9004 	ldrh.w	r9, [r7, #4]
    8a82:	f109 0901 	add.w	r9, r9, #1
    8a86:	eba9 0901 	sub.w	r9, r9, r1
    8a8a:	fa0f f989 	sxth.w	r9, r9
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
    8a8e:	fb0e c208 	mla	r2, lr, r8, ip
    8a92:	9805      	ldr	r0, [sp, #20]
    8a94:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    8a98:	9205      	str	r2, [sp, #20]
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    8a9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    8a9e:	f9b6 0012 	ldrsh.w	r0, [r6, #18]
    8aa2:	1a12      	subs	r2, r2, r0
    8aa4:	ebae 0e02 	sub.w	lr, lr, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
    8aa8:	1acb      	subs	r3, r1, r3
    8aaa:	ebac 0303 	sub.w	r3, ip, r3
    8aae:	fb09 330e 	mla	r3, r9, lr, r3
    8ab2:	9a07      	ldr	r2, [sp, #28]
    8ab4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    8ab8:	9306      	str	r3, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    8aba:	4b24      	ldr	r3, [pc, #144]	; (8b4c <_lv_blend_map+0x324>)
    8abc:	4798      	blx	r3
    8abe:	4606      	mov	r6, r0
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    8ac0:	2c01      	cmp	r4, #1
    8ac2:	d01b      	beq.n	8afc <_lv_blend_map+0x2d4>
        if(opa > LV_OPA_MAX) {
    8ac4:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    8ac8:	f200 80c5 	bhi.w	8c56 <_lv_blend_map+0x42e>
            for(y = 0; y < draw_area_h; y++) {
    8acc:	9b08      	ldr	r3, [sp, #32]
    8ace:	2b00      	cmp	r3, #0
    8ad0:	f77f aeb7 	ble.w	8842 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8ad4:	ea4f 0348 	mov.w	r3, r8, lsl #1
    8ad8:	930a      	str	r3, [sp, #40]	; 0x28
                map_buf_first += map_w;
    8ada:	ea4f 0349 	mov.w	r3, r9, lsl #1
    8ade:	930b      	str	r3, [sp, #44]	; 0x2c
    8ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ae2:	9a04      	ldr	r2, [sp, #16]
    8ae4:	3a01      	subs	r2, #1
    8ae6:	9204      	str	r2, [sp, #16]
    8ae8:	005b      	lsls	r3, r3, #1
    8aea:	930d      	str	r3, [sp, #52]	; 0x34
    8aec:	f04f 0b00 	mov.w	fp, #0
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    8af0:	f8cd a01c 	str.w	sl, [sp, #28]
    8af4:	950c      	str	r5, [sp, #48]	; 0x30
    8af6:	f8dd 9018 	ldr.w	r9, [sp, #24]
    8afa:	e336      	b.n	916a <_lv_blend_map+0x942>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
    8afc:	6a03      	ldr	r3, [r0, #32]
    8afe:	b35b      	cbz	r3, 8b58 <_lv_blend_map+0x330>
    8b00:	a80e      	add	r0, sp, #56	; 0x38
    8b02:	4b14      	ldr	r3, [pc, #80]	; (8b54 <_lv_blend_map+0x32c>)
    8b04:	4798      	blx	r3
    8b06:	28f0      	cmp	r0, #240	; 0xf0
    8b08:	d926      	bls.n	8b58 <_lv_blend_map+0x330>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8b0a:	f9bd 503a 	ldrsh.w	r5, [sp, #58]	; 0x3a
    8b0e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8b12:	429d      	cmp	r5, r3
    8b14:	f73f ae95 	bgt.w	8842 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8b18:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    8b1c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    8b20:	f8dd b014 	ldr.w	fp, [sp, #20]
    8b24:	9f06      	ldr	r7, [sp, #24]
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
    8b26:	f8cd a000 	str.w	sl, [sp]
    8b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b2c:	463a      	mov	r2, r7
    8b2e:	4659      	mov	r1, fp
    8b30:	4630      	mov	r0, r6
    8b32:	6a34      	ldr	r4, [r6, #32]
    8b34:	47a0      	blx	r4
                disp_buf_first += disp_w;
    8b36:	44c3      	add	fp, r8
                map_buf_first += map_w;
    8b38:	444f      	add	r7, r9
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
    8b3a:	3501      	adds	r5, #1
    8b3c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    8b40:	429d      	cmp	r5, r3
    8b42:	ddf0      	ble.n	8b26 <_lv_blend_map+0x2fe>
    8b44:	e67d      	b.n	8842 <_lv_blend_map+0x1a>
    8b46:	bf00      	nop
    8b48:	00011ac1 	.word	0x00011ac1
    8b4c:	00006511 	.word	0x00006511
    8b50:	00011585 	.word	0x00011585
    8b54:	00011aa5 	.word	0x00011aa5
        if(opa > LV_OPA_MAX) {
    8b58:	f1ba 0ffa 	cmp.w	sl, #250	; 0xfa
    8b5c:	d810      	bhi.n	8b80 <_lv_blend_map+0x358>
            for(y = 0; y < draw_area_h; y++) {
    8b5e:	9b08      	ldr	r3, [sp, #32]
    8b60:	2b00      	cmp	r3, #0
    8b62:	f77f ae6e 	ble.w	8842 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8b66:	ea4f 0348 	mov.w	r3, r8, lsl #1
    8b6a:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    8b6c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    8b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b72:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    8b76:	f04f 0800 	mov.w	r8, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8b7a:	f1ca 0eff 	rsb	lr, sl, #255	; 0xff
    8b7e:	e026      	b.n	8bce <_lv_blend_map+0x3a6>
            for(y = 0; y < draw_area_h; y++) {
    8b80:	9b08      	ldr	r3, [sp, #32]
    8b82:	2b00      	cmp	r3, #0
    8b84:	f77f ae5d 	ble.w	8842 <_lv_blend_map+0x1a>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    8b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b8a:	0056      	lsls	r6, r2, #1
                disp_buf_first += disp_w;
    8b8c:	ea4f 0848 	mov.w	r8, r8, lsl #1
                map_buf_first += map_w;
    8b90:	ea4f 0949 	mov.w	r9, r9, lsl #1
    8b94:	2400      	movs	r4, #0
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
    8b96:	4d66      	ldr	r5, [pc, #408]	; (8d30 <_lv_blend_map+0x508>)
    8b98:	469b      	mov	fp, r3
    8b9a:	9f05      	ldr	r7, [sp, #20]
    8b9c:	f8dd a018 	ldr.w	sl, [sp, #24]
    8ba0:	4632      	mov	r2, r6
    8ba2:	4651      	mov	r1, sl
    8ba4:	4638      	mov	r0, r7
    8ba6:	47a8      	blx	r5
                disp_buf_first += disp_w;
    8ba8:	4447      	add	r7, r8
                map_buf_first += map_w;
    8baa:	44ca      	add	sl, r9
            for(y = 0; y < draw_area_h; y++) {
    8bac:	3401      	adds	r4, #1
    8bae:	45a3      	cmp	fp, r4
    8bb0:	d1f6      	bne.n	8ba0 <_lv_blend_map+0x378>
    8bb2:	e646      	b.n	8842 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8bb4:	9b05      	ldr	r3, [sp, #20]
    8bb6:	9a04      	ldr	r2, [sp, #16]
    8bb8:	4413      	add	r3, r2
    8bba:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    8bbc:	9b06      	ldr	r3, [sp, #24]
    8bbe:	444b      	add	r3, r9
    8bc0:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    8bc2:	f108 0801 	add.w	r8, r8, #1
    8bc6:	9b08      	ldr	r3, [sp, #32]
    8bc8:	4543      	cmp	r3, r8
    8bca:	f43f ae3a 	beq.w	8842 <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    8bce:	2d00      	cmp	r5, #0
    8bd0:	ddf0      	ble.n	8bb4 <_lv_blend_map+0x38c>
    8bd2:	9b06      	ldr	r3, [sp, #24]
    8bd4:	461f      	mov	r7, r3
    8bd6:	9c05      	ldr	r4, [sp, #20]
    8bd8:	eb03 0c0b 	add.w	ip, r3, fp
    8bdc:	787b      	ldrb	r3, [r7, #1]
    8bde:	08db      	lsrs	r3, r3, #3
    8be0:	7862      	ldrb	r2, [r4, #1]
    8be2:	08d2      	lsrs	r2, r2, #3
    8be4:	fb0e f202 	mul.w	r2, lr, r2
    8be8:	fb0a 2303 	mla	r3, sl, r3, r2
    8bec:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8bf0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8bf4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8bf8:	883a      	ldrh	r2, [r7, #0]
    8bfa:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8bfe:	8821      	ldrh	r1, [r4, #0]
    8c00:	f3c1 1145 	ubfx	r1, r1, #5, #6
    8c04:	fb0e f101 	mul.w	r1, lr, r1
    8c08:	fb0a 1202 	mla	r2, sl, r2, r1
    8c0c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    8c10:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    8c14:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8c18:	f817 1b02 	ldrb.w	r1, [r7], #2
    8c1c:	f001 011f 	and.w	r1, r1, #31
    8c20:	7820      	ldrb	r0, [r4, #0]
    8c22:	f000 061f 	and.w	r6, r0, #31
    8c26:	fb0e f606 	mul.w	r6, lr, r6
    8c2a:	fb0a 6101 	mla	r1, sl, r1, r6
    8c2e:	eb01 2601 	add.w	r6, r1, r1, lsl #8
    8c32:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
    8c36:	0dc9      	lsrs	r1, r1, #23
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
    8c38:	f361 0004 	bfi	r0, r1, #0, #5
    8c3c:	7020      	strb	r0, [r4, #0]
    8c3e:	8821      	ldrh	r1, [r4, #0]
    8c40:	f362 114a 	bfi	r1, r2, #5, #6
    8c44:	8021      	strh	r1, [r4, #0]
    8c46:	0a09      	lsrs	r1, r1, #8
    8c48:	f363 01c7 	bfi	r1, r3, #3, #5
    8c4c:	7061      	strb	r1, [r4, #1]
    8c4e:	3402      	adds	r4, #2
                for(x = 0; x < draw_area_w; x++) {
    8c50:	45bc      	cmp	ip, r7
    8c52:	d1c3      	bne.n	8bdc <_lv_blend_map+0x3b4>
    8c54:	e7ae      	b.n	8bb4 <_lv_blend_map+0x38c>
            int32_t x_end4 = draw_area_w - 4;
    8c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c58:	3b04      	subs	r3, #4
    8c5a:	930a      	str	r3, [sp, #40]	; 0x28
            for(y = 0; y < draw_area_h; y++) {
    8c5c:	9b08      	ldr	r3, [sp, #32]
    8c5e:	2b00      	cmp	r3, #0
    8c60:	f77f adef 	ble.w	8842 <_lv_blend_map+0x1a>
                disp_buf_first += disp_w;
    8c64:	ea4f 0348 	mov.w	r3, r8, lsl #1
    8c68:	930c      	str	r3, [sp, #48]	; 0x30
                map_buf_first += map_w;
    8c6a:	ea4f 0349 	mov.w	r3, r9, lsl #1
    8c6e:	930d      	str	r3, [sp, #52]	; 0x34
    8c70:	2300      	movs	r3, #0
    8c72:	9307      	str	r3, [sp, #28]
    8c74:	e365      	b.n	9342 <_lv_blend_map+0xb1a>
                    MAP_NORMAL_MASK_PX(x)
    8c76:	f8b8 3000 	ldrh.w	r3, [r8]
    8c7a:	f8ae 3000 	strh.w	r3, [lr]
    8c7e:	4663      	mov	r3, ip
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    8c80:	3101      	adds	r1, #1
    8c82:	428d      	cmp	r5, r1
    8c84:	f000 8347 	beq.w	9316 <_lv_blend_map+0xaee>
    8c88:	f108 0802 	add.w	r8, r8, #2
    8c8c:	f10e 0e02 	add.w	lr, lr, #2
    8c90:	f01c 0f03 	tst.w	ip, #3
    8c94:	f000 832d 	beq.w	92f2 <_lv_blend_map+0xaca>
                    MAP_NORMAL_MASK_PX(x)
    8c98:	f81c 4b01 	ldrb.w	r4, [ip], #1
    8c9c:	2c00      	cmp	r4, #0
    8c9e:	d0ee      	beq.n	8c7e <_lv_blend_map+0x456>
    8ca0:	2cff      	cmp	r4, #255	; 0xff
    8ca2:	d0e8      	beq.n	8c76 <_lv_blend_map+0x44e>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8ca4:	f1c4 06ff 	rsb	r6, r4, #255	; 0xff
    8ca8:	f898 3001 	ldrb.w	r3, [r8, #1]
    8cac:	08db      	lsrs	r3, r3, #3
    8cae:	f89e 2001 	ldrb.w	r2, [lr, #1]
    8cb2:	08d2      	lsrs	r2, r2, #3
    8cb4:	fb06 f202 	mul.w	r2, r6, r2
    8cb8:	fb04 2303 	mla	r3, r4, r3, r2
    8cbc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    8cc0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    8cc4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8cc8:	f8b8 0000 	ldrh.w	r0, [r8]
    8ccc:	f3c0 1045 	ubfx	r0, r0, #5, #6
    8cd0:	f8be 2000 	ldrh.w	r2, [lr]
    8cd4:	f3c2 1245 	ubfx	r2, r2, #5, #6
    8cd8:	fb06 f202 	mul.w	r2, r6, r2
    8cdc:	fb04 2000 	mla	r0, r4, r0, r2
    8ce0:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    8ce4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    8ce8:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8cec:	f898 2000 	ldrb.w	r2, [r8]
    8cf0:	f002 021f 	and.w	r2, r2, #31
    8cf4:	f89e 7000 	ldrb.w	r7, [lr]
    8cf8:	f007 091f 	and.w	r9, r7, #31
    8cfc:	fb06 f609 	mul.w	r6, r6, r9
    8d00:	fb04 6202 	mla	r2, r4, r2, r6
    8d04:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    8d08:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    8d0c:	0dd2      	lsrs	r2, r2, #23
    8d0e:	463c      	mov	r4, r7
    8d10:	f362 0404 	bfi	r4, r2, #0, #5
    8d14:	f88e 4000 	strb.w	r4, [lr]
    8d18:	f8be 2000 	ldrh.w	r2, [lr]
    8d1c:	f360 124a 	bfi	r2, r0, #5, #6
    8d20:	f8ae 2000 	strh.w	r2, [lr]
    8d24:	0a12      	lsrs	r2, r2, #8
    8d26:	f363 02c7 	bfi	r2, r3, #3, #5
    8d2a:	f88e 2001 	strb.w	r2, [lr, #1]
    8d2e:	e7a6      	b.n	8c7e <_lv_blend_map+0x456>
    8d30:	00012bfd 	.word	0x00012bfd
                            disp_buf_first[x] = map_buf_first[x];
    8d34:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    8d38:	f820 5c06 	strh.w	r5, [r0, #-6]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
    8d3c:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    8d40:	f820 5c04 	strh.w	r5, [r0, #-4]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
    8d44:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    8d48:	f820 5c02 	strh.w	r5, [r0, #-2]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
    8d4c:	8825      	ldrh	r5, [r4, #0]
    8d4e:	8005      	strh	r5, [r0, #0]
                for(; x < x_end4; x += 4) {
    8d50:	3104      	adds	r1, #4
    8d52:	3304      	adds	r3, #4
    8d54:	3408      	adds	r4, #8
    8d56:	3008      	adds	r0, #8
    8d58:	458e      	cmp	lr, r1
    8d5a:	f340 8147 	ble.w	8fec <_lv_blend_map+0x7c4>
    8d5e:	461a      	mov	r2, r3
                    if(*mask32) {
    8d60:	f853 5c04 	ldr.w	r5, [r3, #-4]
    8d64:	2d00      	cmp	r5, #0
    8d66:	d0f3      	beq.n	8d50 <_lv_blend_map+0x528>
                        if((*mask32) == 0xFFFFFFFF) {
    8d68:	f1b5 3fff 	cmp.w	r5, #4294967295
    8d6c:	d0e2      	beq.n	8d34 <_lv_blend_map+0x50c>
                            MAP_NORMAL_MASK_PX(x)
    8d6e:	f813 cc04 	ldrb.w	ip, [r3, #-4]
    8d72:	f1bc 0f00 	cmp.w	ip, #0
    8d76:	d047      	beq.n	8e08 <_lv_blend_map+0x5e0>
    8d78:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8d7c:	f000 8124 	beq.w	8fc8 <_lv_blend_map+0x7a0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8d80:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    8d84:	f814 5c05 	ldrb.w	r5, [r4, #-5]
    8d88:	08ed      	lsrs	r5, r5, #3
    8d8a:	f810 6c05 	ldrb.w	r6, [r0, #-5]
    8d8e:	08f6      	lsrs	r6, r6, #3
    8d90:	fb09 f606 	mul.w	r6, r9, r6
    8d94:	fb0c 6505 	mla	r5, ip, r5, r6
    8d98:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    8d9c:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8da0:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8da4:	f834 6c06 	ldrh.w	r6, [r4, #-6]
    8da8:	f3c6 1645 	ubfx	r6, r6, #5, #6
    8dac:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    8db0:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8db4:	fb09 f707 	mul.w	r7, r9, r7
    8db8:	fb0c 7606 	mla	r6, ip, r6, r7
    8dbc:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    8dc0:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8dc4:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8dc8:	f814 7c06 	ldrb.w	r7, [r4, #-6]
    8dcc:	f007 071f 	and.w	r7, r7, #31
    8dd0:	f810 8c06 	ldrb.w	r8, [r0, #-6]
    8dd4:	f008 0b1f 	and.w	fp, r8, #31
    8dd8:	fb09 f90b 	mul.w	r9, r9, fp
    8ddc:	fb0c 9707 	mla	r7, ip, r7, r9
    8de0:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    8de4:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    8de8:	0dff      	lsrs	r7, r7, #23
    8dea:	f367 0804 	bfi	r8, r7, #0, #5
    8dee:	f800 8c06 	strb.w	r8, [r0, #-6]
    8df2:	f830 7c06 	ldrh.w	r7, [r0, #-6]
    8df6:	f366 174a 	bfi	r7, r6, #5, #6
    8dfa:	f820 7c06 	strh.w	r7, [r0, #-6]
    8dfe:	0a3f      	lsrs	r7, r7, #8
    8e00:	f365 07c7 	bfi	r7, r5, #3, #5
    8e04:	f800 7c05 	strb.w	r7, [r0, #-5]
                            MAP_NORMAL_MASK_PX(x + 1)
    8e08:	f812 cc03 	ldrb.w	ip, [r2, #-3]
    8e0c:	f1bc 0f00 	cmp.w	ip, #0
    8e10:	d047      	beq.n	8ea2 <_lv_blend_map+0x67a>
    8e12:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8e16:	f000 80dc 	beq.w	8fd2 <_lv_blend_map+0x7aa>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8e1a:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    8e1e:	f814 5c03 	ldrb.w	r5, [r4, #-3]
    8e22:	08ed      	lsrs	r5, r5, #3
    8e24:	f810 6c03 	ldrb.w	r6, [r0, #-3]
    8e28:	08f6      	lsrs	r6, r6, #3
    8e2a:	fb09 f606 	mul.w	r6, r9, r6
    8e2e:	fb0c 6505 	mla	r5, ip, r5, r6
    8e32:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    8e36:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8e3a:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8e3e:	f834 6c04 	ldrh.w	r6, [r4, #-4]
    8e42:	f3c6 1645 	ubfx	r6, r6, #5, #6
    8e46:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    8e4a:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8e4e:	fb09 f707 	mul.w	r7, r9, r7
    8e52:	fb0c 7606 	mla	r6, ip, r6, r7
    8e56:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    8e5a:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8e5e:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8e62:	f814 7c04 	ldrb.w	r7, [r4, #-4]
    8e66:	f007 071f 	and.w	r7, r7, #31
    8e6a:	f810 8c04 	ldrb.w	r8, [r0, #-4]
    8e6e:	f008 0b1f 	and.w	fp, r8, #31
    8e72:	fb09 f90b 	mul.w	r9, r9, fp
    8e76:	fb0c 9707 	mla	r7, ip, r7, r9
    8e7a:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    8e7e:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    8e82:	0dff      	lsrs	r7, r7, #23
    8e84:	f367 0804 	bfi	r8, r7, #0, #5
    8e88:	f800 8c04 	strb.w	r8, [r0, #-4]
    8e8c:	f830 7c04 	ldrh.w	r7, [r0, #-4]
    8e90:	f366 174a 	bfi	r7, r6, #5, #6
    8e94:	f820 7c04 	strh.w	r7, [r0, #-4]
    8e98:	0a3f      	lsrs	r7, r7, #8
    8e9a:	f365 07c7 	bfi	r7, r5, #3, #5
    8e9e:	f800 7c03 	strb.w	r7, [r0, #-3]
                            MAP_NORMAL_MASK_PX(x + 2)
    8ea2:	f812 cc02 	ldrb.w	ip, [r2, #-2]
    8ea6:	f1bc 0f00 	cmp.w	ip, #0
    8eaa:	d047      	beq.n	8f3c <_lv_blend_map+0x714>
    8eac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8eb0:	f000 8094 	beq.w	8fdc <_lv_blend_map+0x7b4>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8eb4:	f1cc 09ff 	rsb	r9, ip, #255	; 0xff
    8eb8:	f814 5c01 	ldrb.w	r5, [r4, #-1]
    8ebc:	08ed      	lsrs	r5, r5, #3
    8ebe:	f810 6c01 	ldrb.w	r6, [r0, #-1]
    8ec2:	08f6      	lsrs	r6, r6, #3
    8ec4:	fb09 f606 	mul.w	r6, r9, r6
    8ec8:	fb0c 6505 	mla	r5, ip, r5, r6
    8ecc:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    8ed0:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8ed4:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8ed8:	f834 6c02 	ldrh.w	r6, [r4, #-2]
    8edc:	f3c6 1645 	ubfx	r6, r6, #5, #6
    8ee0:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    8ee4:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8ee8:	fb09 f707 	mul.w	r7, r9, r7
    8eec:	fb0c 7606 	mla	r6, ip, r6, r7
    8ef0:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    8ef4:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8ef8:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8efc:	f814 7c02 	ldrb.w	r7, [r4, #-2]
    8f00:	f007 071f 	and.w	r7, r7, #31
    8f04:	f810 8c02 	ldrb.w	r8, [r0, #-2]
    8f08:	f008 0b1f 	and.w	fp, r8, #31
    8f0c:	fb09 f90b 	mul.w	r9, r9, fp
    8f10:	fb0c 9707 	mla	r7, ip, r7, r9
    8f14:	eb07 2c07 	add.w	ip, r7, r7, lsl #8
    8f18:	eb07 17cc 	add.w	r7, r7, ip, lsl #7
    8f1c:	0dff      	lsrs	r7, r7, #23
    8f1e:	f367 0804 	bfi	r8, r7, #0, #5
    8f22:	f800 8c02 	strb.w	r8, [r0, #-2]
    8f26:	f830 7c02 	ldrh.w	r7, [r0, #-2]
    8f2a:	f366 174a 	bfi	r7, r6, #5, #6
    8f2e:	f820 7c02 	strh.w	r7, [r0, #-2]
    8f32:	0a3f      	lsrs	r7, r7, #8
    8f34:	f365 07c7 	bfi	r7, r5, #3, #5
    8f38:	f800 7c01 	strb.w	r7, [r0, #-1]
                            MAP_NORMAL_MASK_PX(x + 3)
    8f3c:	f812 8c01 	ldrb.w	r8, [r2, #-1]
    8f40:	f1b8 0f00 	cmp.w	r8, #0
    8f44:	f43f af04 	beq.w	8d50 <_lv_blend_map+0x528>
    8f48:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8f4c:	d04b      	beq.n	8fe6 <_lv_blend_map+0x7be>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    8f4e:	f1c8 09ff 	rsb	r9, r8, #255	; 0xff
    8f52:	7865      	ldrb	r5, [r4, #1]
    8f54:	08ed      	lsrs	r5, r5, #3
    8f56:	7846      	ldrb	r6, [r0, #1]
    8f58:	08f6      	lsrs	r6, r6, #3
    8f5a:	fb09 f606 	mul.w	r6, r9, r6
    8f5e:	fb08 6505 	mla	r5, r8, r5, r6
    8f62:	eb05 2605 	add.w	r6, r5, r5, lsl #8
    8f66:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
    8f6a:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    8f6e:	8826      	ldrh	r6, [r4, #0]
    8f70:	f3c6 1645 	ubfx	r6, r6, #5, #6
    8f74:	8807      	ldrh	r7, [r0, #0]
    8f76:	f3c7 1745 	ubfx	r7, r7, #5, #6
    8f7a:	fb09 f707 	mul.w	r7, r9, r7
    8f7e:	fb08 7606 	mla	r6, r8, r6, r7
    8f82:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    8f86:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    8f8a:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    8f8e:	7827      	ldrb	r7, [r4, #0]
    8f90:	f007 071f 	and.w	r7, r7, #31
    8f94:	f890 c000 	ldrb.w	ip, [r0]
    8f98:	f00c 0a1f 	and.w	sl, ip, #31
    8f9c:	fb09 f90a 	mul.w	r9, r9, sl
    8fa0:	fb08 9707 	mla	r7, r8, r7, r9
    8fa4:	eb07 2807 	add.w	r8, r7, r7, lsl #8
    8fa8:	eb07 17c8 	add.w	r7, r7, r8, lsl #7
    8fac:	0dff      	lsrs	r7, r7, #23
    8fae:	f367 0c04 	bfi	ip, r7, #0, #5
    8fb2:	f880 c000 	strb.w	ip, [r0]
    8fb6:	8807      	ldrh	r7, [r0, #0]
    8fb8:	f366 174a 	bfi	r7, r6, #5, #6
    8fbc:	8007      	strh	r7, [r0, #0]
    8fbe:	0a3f      	lsrs	r7, r7, #8
    8fc0:	f365 07c7 	bfi	r7, r5, #3, #5
    8fc4:	7047      	strb	r7, [r0, #1]
    8fc6:	e6c3      	b.n	8d50 <_lv_blend_map+0x528>
                            MAP_NORMAL_MASK_PX(x)
    8fc8:	f834 5c06 	ldrh.w	r5, [r4, #-6]
    8fcc:	f820 5c06 	strh.w	r5, [r0, #-6]
    8fd0:	e71a      	b.n	8e08 <_lv_blend_map+0x5e0>
                            MAP_NORMAL_MASK_PX(x + 1)
    8fd2:	f834 5c04 	ldrh.w	r5, [r4, #-4]
    8fd6:	f820 5c04 	strh.w	r5, [r0, #-4]
    8fda:	e762      	b.n	8ea2 <_lv_blend_map+0x67a>
                            MAP_NORMAL_MASK_PX(x + 2)
    8fdc:	f834 5c02 	ldrh.w	r5, [r4, #-2]
    8fe0:	f820 5c02 	strh.w	r5, [r0, #-2]
    8fe4:	e7aa      	b.n	8f3c <_lv_blend_map+0x714>
                            MAP_NORMAL_MASK_PX(x + 3)
    8fe6:	8825      	ldrh	r5, [r4, #0]
    8fe8:	8005      	strh	r5, [r0, #0]
    8fea:	e6b1      	b.n	8d50 <_lv_blend_map+0x528>
    8fec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
                for(; x < draw_area_w ; x++) {
    8fee:	428d      	cmp	r5, r1
    8ff0:	f340 8194 	ble.w	931c <_lv_blend_map+0xaf4>
    8ff4:	1e56      	subs	r6, r2, #1
    8ff6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8ffa:	9b06      	ldr	r3, [sp, #24]
    8ffc:	eb03 080c 	add.w	r8, r3, ip
    9000:	9b05      	ldr	r3, [sp, #20]
    9002:	449c      	add	ip, r3
    9004:	e00b      	b.n	901e <_lv_blend_map+0x7f6>
                    MAP_NORMAL_MASK_PX(x)
    9006:	f8b8 3000 	ldrh.w	r3, [r8]
    900a:	f8ac 3000 	strh.w	r3, [ip]
                for(; x < draw_area_w ; x++) {
    900e:	3101      	adds	r1, #1
    9010:	f108 0802 	add.w	r8, r8, #2
    9014:	f10c 0c02 	add.w	ip, ip, #2
    9018:	428d      	cmp	r5, r1
    901a:	f340 817f 	ble.w	931c <_lv_blend_map+0xaf4>
                    MAP_NORMAL_MASK_PX(x)
    901e:	f816 4f01 	ldrb.w	r4, [r6, #1]!
    9022:	2c00      	cmp	r4, #0
    9024:	d0f3      	beq.n	900e <_lv_blend_map+0x7e6>
    9026:	2cff      	cmp	r4, #255	; 0xff
    9028:	d0ed      	beq.n	9006 <_lv_blend_map+0x7de>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    902a:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
    902e:	f898 3001 	ldrb.w	r3, [r8, #1]
    9032:	08db      	lsrs	r3, r3, #3
    9034:	f89c 2001 	ldrb.w	r2, [ip, #1]
    9038:	08d2      	lsrs	r2, r2, #3
    903a:	fb07 f202 	mul.w	r2, r7, r2
    903e:	fb04 2303 	mla	r3, r4, r3, r2
    9042:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    9046:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    904a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    904e:	f8b8 0000 	ldrh.w	r0, [r8]
    9052:	f3c0 1045 	ubfx	r0, r0, #5, #6
    9056:	f8bc 2000 	ldrh.w	r2, [ip]
    905a:	f3c2 1245 	ubfx	r2, r2, #5, #6
    905e:	fb07 f202 	mul.w	r2, r7, r2
    9062:	fb04 2000 	mla	r0, r4, r0, r2
    9066:	eb00 2200 	add.w	r2, r0, r0, lsl #8
    906a:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
    906e:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    9072:	f898 2000 	ldrb.w	r2, [r8]
    9076:	f002 021f 	and.w	r2, r2, #31
    907a:	f89c e000 	ldrb.w	lr, [ip]
    907e:	f00e 091f 	and.w	r9, lr, #31
    9082:	fb07 f709 	mul.w	r7, r7, r9
    9086:	fb04 7202 	mla	r2, r4, r2, r7
    908a:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    908e:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    9092:	0dd2      	lsrs	r2, r2, #23
    9094:	4674      	mov	r4, lr
    9096:	f362 0404 	bfi	r4, r2, #0, #5
    909a:	f88c 4000 	strb.w	r4, [ip]
    909e:	f8bc 2000 	ldrh.w	r2, [ip]
    90a2:	f360 124a 	bfi	r2, r0, #5, #6
    90a6:	f8ac 2000 	strh.w	r2, [ip]
    90aa:	0a12      	lsrs	r2, r2, #8
    90ac:	f363 02c7 	bfi	r2, r3, #3, #5
    90b0:	f88c 2001 	strb.w	r2, [ip, #1]
    90b4:	e7ab      	b.n	900e <_lv_blend_map+0x7e6>
    90b6:	3702      	adds	r7, #2
    90b8:	3602      	adds	r6, #2
                for(x = 0; x < draw_area_w; x++) {
    90ba:	4547      	cmp	r7, r8
    90bc:	d045      	beq.n	914a <_lv_blend_map+0x922>
                    if(mask[x]) {
    90be:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    90c2:	2900      	cmp	r1, #0
    90c4:	d0f7      	beq.n	90b6 <_lv_blend_map+0x88e>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
    90c6:	29f9      	cmp	r1, #249	; 0xf9
    90c8:	bf9a      	itte	ls
    90ca:	fb01 f10a 	mulls.w	r1, r1, sl
    90ce:	f3c1 2407 	ubfxls	r4, r1, #8, #8
    90d2:	9c07      	ldrhi	r4, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    90d4:	f1c4 05ff 	rsb	r5, r4, #255	; 0xff
    90d8:	787b      	ldrb	r3, [r7, #1]
    90da:	08db      	lsrs	r3, r3, #3
    90dc:	7872      	ldrb	r2, [r6, #1]
    90de:	08d2      	lsrs	r2, r2, #3
    90e0:	fb05 f202 	mul.w	r2, r5, r2
    90e4:	fb04 2303 	mla	r3, r4, r3, r2
    90e8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    90ec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    90f0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    90f4:	883a      	ldrh	r2, [r7, #0]
    90f6:	f3c2 1245 	ubfx	r2, r2, #5, #6
    90fa:	8831      	ldrh	r1, [r6, #0]
    90fc:	f3c1 1145 	ubfx	r1, r1, #5, #6
    9100:	fb05 f101 	mul.w	r1, r5, r1
    9104:	fb04 1202 	mla	r2, r4, r2, r1
    9108:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    910c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    9110:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    9114:	7839      	ldrb	r1, [r7, #0]
    9116:	f001 011f 	and.w	r1, r1, #31
    911a:	7830      	ldrb	r0, [r6, #0]
    911c:	f000 0e1f 	and.w	lr, r0, #31
    9120:	fb05 f50e 	mul.w	r5, r5, lr
    9124:	fb04 5101 	mla	r1, r4, r1, r5
    9128:	eb01 2401 	add.w	r4, r1, r1, lsl #8
    912c:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    9130:	0dc9      	lsrs	r1, r1, #23
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
    9132:	f361 0004 	bfi	r0, r1, #0, #5
    9136:	7030      	strb	r0, [r6, #0]
    9138:	8831      	ldrh	r1, [r6, #0]
    913a:	f362 114a 	bfi	r1, r2, #5, #6
    913e:	8031      	strh	r1, [r6, #0]
    9140:	0a09      	lsrs	r1, r1, #8
    9142:	f363 01c7 	bfi	r1, r3, #3, #5
    9146:	7071      	strb	r1, [r6, #1]
    9148:	e7b5      	b.n	90b6 <_lv_blend_map+0x88e>
                disp_buf_first += disp_w;
    914a:	9b05      	ldr	r3, [sp, #20]
    914c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    914e:	4413      	add	r3, r2
    9150:	9305      	str	r3, [sp, #20]
                map_buf_first += map_w;
    9152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9154:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
    9156:	f10b 0b01 	add.w	fp, fp, #1
    915a:	9b04      	ldr	r3, [sp, #16]
    915c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    915e:	4413      	add	r3, r2
    9160:	9304      	str	r3, [sp, #16]
    9162:	9b08      	ldr	r3, [sp, #32]
    9164:	455b      	cmp	r3, fp
    9166:	f43f ab6c 	beq.w	8842 <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w; x++) {
    916a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    916c:	2b00      	cmp	r3, #0
    916e:	ddec      	ble.n	914a <_lv_blend_map+0x922>
    9170:	464f      	mov	r7, r9
    9172:	9e05      	ldr	r6, [sp, #20]
    9174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9176:	eb09 0803 	add.w	r8, r9, r3
    917a:	f8dd c010 	ldr.w	ip, [sp, #16]
    917e:	e79e      	b.n	90be <_lv_blend_map+0x896>
    switch(mode) {
    9180:	2d01      	cmp	r5, #1
    9182:	d049      	beq.n	9218 <_lv_blend_map+0x9f0>
    9184:	2d02      	cmp	r5, #2
    9186:	d13c      	bne.n	9202 <_lv_blend_map+0x9da>
            blend_fp = color_blend_true_color_subtractive;
    9188:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 936c <_lv_blend_map+0xb44>
    918c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
    9190:	9309      	str	r3, [sp, #36]	; 0x24
    9192:	8ab0      	ldrh	r0, [r6, #20]
    9194:	3001      	adds	r0, #1
    9196:	1ac0      	subs	r0, r0, r3
    9198:	b200      	sxth	r0, r0
    919a:	f9b7 2000 	ldrsh.w	r2, [r7]
    919e:	88bb      	ldrh	r3, [r7, #4]
    91a0:	3301      	adds	r3, #1
    91a2:	1a9b      	subs	r3, r3, r2
    91a4:	b21d      	sxth	r5, r3
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
    91a6:	46f1      	mov	r9, lr
    91a8:	fb0e fb00 	mul.w	fp, lr, r0
    91ac:	9b05      	ldr	r3, [sp, #20]
    91ae:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
    91b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    91b6:	f9b6 6012 	ldrsh.w	r6, [r6, #18]
    91ba:	1b9f      	subs	r7, r3, r6
    91bc:	ebae 0707 	sub.w	r7, lr, r7
    91c0:	fb05 f707 	mul.w	r7, r5, r7
    91c4:	9b07      	ldr	r3, [sp, #28]
    91c6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
    91ca:	2c01      	cmp	r4, #1
    91cc:	d027      	beq.n	921e <_lv_blend_map+0x9f6>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
    91ce:	9b04      	ldr	r3, [sp, #16]
    91d0:	eba3 030c 	sub.w	r3, r3, ip
    91d4:	461a      	mov	r2, r3
        map_buf_tmp -= draw_area->x1;
    91d6:	eba7 034c 	sub.w	r3, r7, ip, lsl #1
    91da:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    91dc:	9b08      	ldr	r3, [sp, #32]
    91de:	459e      	cmp	lr, r3
    91e0:	f73f ab2f 	bgt.w	8842 <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    91e4:	0043      	lsls	r3, r0, #1
    91e6:	9307      	str	r3, [sp, #28]
            map_buf_tmp += map_w;
    91e8:	006b      	lsls	r3, r5, #1
    91ea:	9308      	str	r3, [sp, #32]
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    91ec:	f8cd a014 	str.w	sl, [sp, #20]
    91f0:	1c4b      	adds	r3, r1, #1
    91f2:	9906      	ldr	r1, [sp, #24]
    91f4:	1a5b      	subs	r3, r3, r1
            mask_tmp += draw_area_w;
    91f6:	b21b      	sxth	r3, r3
    91f8:	9309      	str	r3, [sp, #36]	; 0x24
    91fa:	f8cd a018 	str.w	sl, [sp, #24]
    91fe:	4692      	mov	sl, r2
    9200:	e066      	b.n	92d0 <_lv_blend_map+0xaa8>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
    9202:	4b56      	ldr	r3, [pc, #344]	; (935c <_lv_blend_map+0xb34>)
    9204:	9300      	str	r3, [sp, #0]
    9206:	4b56      	ldr	r3, [pc, #344]	; (9360 <_lv_blend_map+0xb38>)
    9208:	f240 3253 	movw	r2, #851	; 0x353
    920c:	4955      	ldr	r1, [pc, #340]	; (9364 <_lv_blend_map+0xb3c>)
    920e:	2002      	movs	r0, #2
    9210:	4c55      	ldr	r4, [pc, #340]	; (9368 <_lv_blend_map+0xb40>)
    9212:	47a0      	blx	r4
    9214:	f7ff bb15 	b.w	8842 <_lv_blend_map+0x1a>
            blend_fp = color_blend_true_color_additive;
    9218:	f8df 8154 	ldr.w	r8, [pc, #340]	; 9370 <_lv_blend_map+0xb48>
    921c:	e7b6      	b.n	918c <_lv_blend_map+0x964>
        map_buf_tmp -= draw_area->x1;
    921e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9220:	1a9b      	subs	r3, r3, r2
    9222:	eb07 0743 	add.w	r7, r7, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    9226:	9b08      	ldr	r3, [sp, #32]
    9228:	459e      	cmp	lr, r3
    922a:	f73f ab0a 	bgt.w	8842 <_lv_blend_map+0x1a>
            disp_buf_tmp += disp_w;
    922e:	0043      	lsls	r3, r0, #1
    9230:	9304      	str	r3, [sp, #16]
            map_buf_tmp += map_w;
    9232:	006b      	lsls	r3, r5, #1
    9234:	9305      	str	r3, [sp, #20]
    9236:	463b      	mov	r3, r7
    9238:	4647      	mov	r7, r8
    923a:	4698      	mov	r8, r3
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    923c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    9240:	461c      	mov	r4, r3
    9242:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    9246:	4293      	cmp	r3, r2
    9248:	dc10      	bgt.n	926c <_lv_blend_map+0xa44>
    924a:	005b      	lsls	r3, r3, #1
    924c:	eb0b 0503 	add.w	r5, fp, r3
    9250:	eb08 0603 	add.w	r6, r8, r3
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
    9254:	4652      	mov	r2, sl
    9256:	8829      	ldrh	r1, [r5, #0]
    9258:	f836 0b02 	ldrh.w	r0, [r6], #2
    925c:	47b8      	blx	r7
    925e:	f825 0b02 	strh.w	r0, [r5], #2
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    9262:	3401      	adds	r4, #1
    9264:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    9268:	429c      	cmp	r4, r3
    926a:	ddf3      	ble.n	9254 <_lv_blend_map+0xa2c>
            disp_buf_tmp += disp_w;
    926c:	9b04      	ldr	r3, [sp, #16]
    926e:	449b      	add	fp, r3
            map_buf_tmp += map_w;
    9270:	9b05      	ldr	r3, [sp, #20]
    9272:	4498      	add	r8, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    9274:	f109 0901 	add.w	r9, r9, #1
    9278:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    927c:	4599      	cmp	r9, r3
    927e:	dddd      	ble.n	923c <_lv_blend_map+0xa14>
    9280:	f7ff badf 	b.w	8842 <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    9284:	3501      	adds	r5, #1
    9286:	3602      	adds	r6, #2
    9288:	3402      	adds	r4, #2
    928a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
    928e:	429d      	cmp	r5, r3
    9290:	dc0f      	bgt.n	92b2 <_lv_blend_map+0xa8a>
                if(mask_tmp[x] == 0) continue;
    9292:	f817 3b01 	ldrb.w	r3, [r7], #1
    9296:	2b00      	cmp	r3, #0
    9298:	d0f4      	beq.n	9284 <_lv_blend_map+0xa5c>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
    929a:	2bf9      	cmp	r3, #249	; 0xf9
    929c:	bf9d      	ittte	ls
    929e:	9a06      	ldrls	r2, [sp, #24]
    92a0:	4353      	mulls	r3, r2
    92a2:	f3c3 2207 	ubfxls	r2, r3, #8, #8
    92a6:	9a05      	ldrhi	r2, [sp, #20]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
    92a8:	8831      	ldrh	r1, [r6, #0]
    92aa:	8820      	ldrh	r0, [r4, #0]
    92ac:	47c0      	blx	r8
    92ae:	8030      	strh	r0, [r6, #0]
    92b0:	e7e8      	b.n	9284 <_lv_blend_map+0xa5c>
            disp_buf_tmp += disp_w;
    92b2:	9b07      	ldr	r3, [sp, #28]
    92b4:	449b      	add	fp, r3
    92b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    92b8:	449a      	add	sl, r3
            map_buf_tmp += map_w;
    92ba:	9b04      	ldr	r3, [sp, #16]
    92bc:	9a08      	ldr	r2, [sp, #32]
    92be:	4413      	add	r3, r2
    92c0:	9304      	str	r3, [sp, #16]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
    92c2:	f109 0901 	add.w	r9, r9, #1
    92c6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    92ca:	4599      	cmp	r9, r3
    92cc:	f73f aab9 	bgt.w	8842 <_lv_blend_map+0x1a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
    92d0:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
    92d4:	461d      	mov	r5, r3
    92d6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
    92da:	4293      	cmp	r3, r2
    92dc:	dce9      	bgt.n	92b2 <_lv_blend_map+0xa8a>
    92de:	eb0a 0703 	add.w	r7, sl, r3
    92e2:	005b      	lsls	r3, r3, #1
    92e4:	eb0b 0603 	add.w	r6, fp, r3
    92e8:	9a04      	ldr	r2, [sp, #16]
    92ea:	18d4      	adds	r4, r2, r3
    92ec:	e7d1      	b.n	9292 <_lv_blend_map+0xa6a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    92ee:	9b04      	ldr	r3, [sp, #16]
    92f0:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    92f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    92f4:	428a      	cmp	r2, r1
    92f6:	dd0a      	ble.n	930e <_lv_blend_map+0xae6>
    92f8:	3304      	adds	r3, #4
    92fa:	1cc8      	adds	r0, r1, #3
    92fc:	0040      	lsls	r0, r0, #1
    92fe:	9a06      	ldr	r2, [sp, #24]
    9300:	1814      	adds	r4, r2, r0
    9302:	9a05      	ldr	r2, [sp, #20]
    9304:	4410      	add	r0, r2
    9306:	950b      	str	r5, [sp, #44]	; 0x2c
    9308:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    930c:	e527      	b.n	8d5e <_lv_blend_map+0x536>
    930e:	461a      	mov	r2, r3
    9310:	e670      	b.n	8ff4 <_lv_blend_map+0x7cc>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    9312:	9b04      	ldr	r3, [sp, #16]
    9314:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
    9316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9318:	4291      	cmp	r1, r2
    931a:	dbed      	blt.n	92f8 <_lv_blend_map+0xad0>
                disp_buf_first += disp_w;
    931c:	9b05      	ldr	r3, [sp, #20]
    931e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9320:	4413      	add	r3, r2
    9322:	9305      	str	r3, [sp, #20]
    9324:	9b04      	ldr	r3, [sp, #16]
    9326:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9328:	4413      	add	r3, r2
    932a:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
    932c:	9b06      	ldr	r3, [sp, #24]
    932e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9330:	4413      	add	r3, r2
    9332:	9306      	str	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
    9334:	9b07      	ldr	r3, [sp, #28]
    9336:	3301      	adds	r3, #1
    9338:	9307      	str	r3, [sp, #28]
    933a:	9a08      	ldr	r2, [sp, #32]
    933c:	429a      	cmp	r2, r3
    933e:	f43f aa80 	beq.w	8842 <_lv_blend_map+0x1a>
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
    9342:	2d00      	cmp	r5, #0
    9344:	dde5      	ble.n	9312 <_lv_blend_map+0xaea>
    9346:	9a04      	ldr	r2, [sp, #16]
    9348:	f012 0f03 	tst.w	r2, #3
    934c:	d0cf      	beq.n	92ee <_lv_blend_map+0xac6>
    934e:	f8dd 8018 	ldr.w	r8, [sp, #24]
    9352:	f8dd e014 	ldr.w	lr, [sp, #20]
    9356:	4694      	mov	ip, r2
    9358:	2100      	movs	r1, #0
    935a:	e49d      	b.n	8c98 <_lv_blend_map+0x470>
    935c:	0001c174 	.word	0x0001c174
    9360:	0001c138 	.word	0x0001c138
    9364:	0001c144 	.word	0x0001c144
    9368:	00012805 	.word	0x00012805
    936c:	00007c47 	.word	0x00007c47
    9370:	00007b91 	.word	0x00007b91

00009374 <lv_draw_map>:
 * @param antialias anti-alias transformations (rotate, zoom) or not
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              lv_draw_img_dsc_t * draw_dsc, bool chroma_key, bool alpha_byte)
{
    9374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9378:	b0bd      	sub	sp, #244	; 0xf4
    937a:	901b      	str	r0, [sp, #108]	; 0x6c
    937c:	9123      	str	r1, [sp, #140]	; 0x8c
    937e:	4617      	mov	r7, r2
    9380:	9308      	str	r3, [sp, #32]
    9382:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
    9386:	930a      	str	r3, [sp, #40]	; 0x28
    9388:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
    938c:	9306      	str	r3, [sp, #24]
    938e:	1e4b      	subs	r3, r1, #1
    9390:	1dc8      	adds	r0, r1, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    9392:	aa3a      	add	r2, sp, #232	; 0xe8
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    9394:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    9398:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    939c:	4283      	cmp	r3, r0
    939e:	d1f9      	bne.n	9394 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    93a0:	4ba3      	ldr	r3, [pc, #652]	; (9630 <lv_draw_map+0x2bc>)
    93a2:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    93a4:	4ba3      	ldr	r3, [pc, #652]	; (9634 <lv_draw_map+0x2c0>)
    93a6:	4798      	blx	r3
    93a8:	9018      	str	r0, [sp, #96]	; 0x60
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    93aa:	8a01      	ldrh	r1, [r0, #16]
    93ac:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    93b0:	1a5b      	subs	r3, r3, r1
    93b2:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
    93b6:	8a42      	ldrh	r2, [r0, #18]
    93b8:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    93bc:	1a9b      	subs	r3, r3, r2
    93be:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
    93c2:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    93c6:	1a5b      	subs	r3, r3, r1
    93c8:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
    93cc:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
    93d0:	1a9b      	subs	r3, r3, r2
    93d2:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    93d6:	4b98      	ldr	r3, [pc, #608]	; (9638 <lv_draw_map+0x2c4>)
    93d8:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    93da:	9019      	str	r0, [sp, #100]	; 0x64
    93dc:	b930      	cbnz	r0, 93ec <lv_draw_map+0x78>
    93de:	9a08      	ldr	r2, [sp, #32]
    93e0:	8853      	ldrh	r3, [r2, #2]
    93e2:	b91b      	cbnz	r3, 93ec <lv_draw_map+0x78>
    93e4:	8913      	ldrh	r3, [r2, #8]
    93e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    93ea:	d071      	beq.n	94d0 <lv_draw_map+0x15c>
                      draw_dsc->blend_mode);
    }
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    93ec:	9b06      	ldr	r3, [sp, #24]
    93ee:	2b00      	cmp	r3, #0
    93f0:	bf14      	ite	ne
    93f2:	f04f 0b03 	movne.w	fp, #3
    93f6:	f04f 0b02 	moveq.w	fp, #2
    93fa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    93fc:	460b      	mov	r3, r1
    93fe:	f9b1 2000 	ldrsh.w	r2, [r1]
    9402:	888d      	ldrh	r5, [r1, #4]
    9404:	3501      	adds	r5, #1
    9406:	1aad      	subs	r5, r5, r2
    9408:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    940a:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
    940e:	9e18      	ldr	r6, [sp, #96]	; 0x60
    9410:	f9b6 1012 	ldrsh.w	r1, [r6, #18]
    9414:	46d8      	mov	r8, fp
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    9416:	f9bd 40e8 	ldrsh.w	r4, [sp, #232]	; 0xe8
    941a:	f9b6 6010 	ldrsh.w	r6, [r6, #16]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
    941e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    9422:	1a5b      	subs	r3, r3, r1
    9424:	1ac3      	subs	r3, r0, r3
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
    9426:	1b92      	subs	r2, r2, r6
    9428:	1aa2      	subs	r2, r4, r2
    942a:	fb05 2303 	mla	r3, r5, r3, r2
    942e:	fb03 730b 	mla	r3, r3, fp, r7
    9432:	9314      	str	r3, [sp, #80]	; 0x50
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
    9434:	b2a4      	uxth	r4, r4
    9436:	19a2      	adds	r2, r4, r6
    9438:	b292      	uxth	r2, r2
    943a:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    943e:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    9442:	3301      	adds	r3, #1
    9444:	1b1b      	subs	r3, r3, r4
    9446:	b29b      	uxth	r3, r3
    9448:	b21c      	sxth	r4, r3
    944a:	9416      	str	r4, [sp, #88]	; 0x58
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
    944c:	3b01      	subs	r3, #1
    944e:	4413      	add	r3, r2
    9450:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        blend_area.y1 = disp_area->y1 + draw_area.y1;
    9454:	b280      	uxth	r0, r0
    9456:	1843      	adds	r3, r0, r1
    9458:	b21b      	sxth	r3, r3
    945a:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
        blend_area.y2 = blend_area.y1;
    945e:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    9462:	f8bd 60ee 	ldrh.w	r6, [sp, #238]	; 0xee
    9466:	3601      	adds	r6, #1
    9468:	1a36      	subs	r6, r6, r0
    946a:	b236      	sxth	r6, r6

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
    946c:	9908      	ldr	r1, [sp, #32]
    946e:	884b      	ldrh	r3, [r1, #2]
    9470:	2b00      	cmp	r3, #0
    9472:	f040 8353 	bne.w	9b1c <lv_draw_map+0x7a8>
    9476:	890b      	ldrh	r3, [r1, #8]
    9478:	f5b3 7280 	subs.w	r2, r3, #256	; 0x100
    947c:	bf18      	it	ne
    947e:	2201      	movne	r2, #1
    9480:	9205      	str	r2, [sp, #20]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    9482:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9484:	2a00      	cmp	r2, #0
    9486:	f040 8370 	bne.w	9b6a <lv_draw_map+0x7f6>
    948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    948e:	f040 8349 	bne.w	9b24 <lv_draw_map+0x7b0>
    9492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9494:	b923      	cbnz	r3, 94a0 <lv_draw_map+0x12c>
    9496:	7a8b      	ldrb	r3, [r1, #10]
    9498:	b913      	cbnz	r3, 94a0 <lv_draw_map+0x12c>
    949a:	9b06      	ldr	r3, [sp, #24]
    949c:	2b00      	cmp	r3, #0
    949e:	d131      	bne.n	9504 <lv_draw_map+0x190>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    94a0:	a83a      	add	r0, sp, #232	; 0xe8
    94a2:	4b66      	ldr	r3, [pc, #408]	; (963c <lv_draw_map+0x2c8>)
    94a4:	4798      	blx	r3
    94a6:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    94aa:	f240 80ac 	bls.w	9606 <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    94ae:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    94b2:	4c63      	ldr	r4, [pc, #396]	; (9640 <lv_draw_map+0x2cc>)
    94b4:	47a0      	blx	r4
    94b6:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    94b8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    94bc:	47a0      	blx	r4
    94be:	9017      	str	r0, [sp, #92]	; 0x5c

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    94c0:	2148      	movs	r1, #72	; 0x48
    94c2:	a828      	add	r0, sp, #160	; 0xa0
    94c4:	4b5f      	ldr	r3, [pc, #380]	; (9644 <lv_draw_map+0x2d0>)
    94c6:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    94c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    94cc:	931c      	str	r3, [sp, #112]	; 0x70
    94ce:	e0e4      	b.n	969a <lv_draw_map+0x326>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
    94d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    94d2:	2b00      	cmp	r3, #0
    94d4:	d18a      	bne.n	93ec <lv_draw_map+0x78>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
    94d6:	9b06      	ldr	r3, [sp, #24]
    94d8:	b98b      	cbnz	r3, 94fe <lv_draw_map+0x18a>
    94da:	7a93      	ldrb	r3, [r2, #10]
    94dc:	b113      	cbz	r3, 94e4 <lv_draw_map+0x170>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    94de:	f04f 0b02 	mov.w	fp, #2
    94e2:	e78a      	b.n	93fa <lv_draw_map+0x86>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
    94e4:	7b93      	ldrb	r3, [r2, #14]
    94e6:	9302      	str	r3, [sp, #8]
    94e8:	7813      	ldrb	r3, [r2, #0]
    94ea:	9301      	str	r3, [sp, #4]
    94ec:	2301      	movs	r3, #1
    94ee:	9300      	str	r3, [sp, #0]
    94f0:	2300      	movs	r3, #0
    94f2:	463a      	mov	r2, r7
    94f4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    94f6:	9823      	ldr	r0, [sp, #140]	; 0x8c
    94f8:	4c53      	ldr	r4, [pc, #332]	; (9648 <lv_draw_map+0x2d4>)
    94fa:	47a0      	blx	r4
    94fc:	e30b      	b.n	9b16 <lv_draw_map+0x7a2>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    94fe:	f04f 0b03 	mov.w	fp, #3
    9502:	e77a      	b.n	93fa <lv_draw_map+0x86>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9504:	a83a      	add	r0, sp, #232	; 0xe8
    9506:	4b4d      	ldr	r3, [pc, #308]	; (963c <lv_draw_map+0x2c8>)
    9508:	4798      	blx	r3
    950a:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    950e:	d814      	bhi.n	953a <lv_draw_map+0x1c6>
    9510:	a83a      	add	r0, sp, #232	; 0xe8
    9512:	4b4a      	ldr	r3, [pc, #296]	; (963c <lv_draw_map+0x2c8>)
    9514:	4798      	blx	r3
    9516:	4681      	mov	r9, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    9518:	ea4f 0049 	mov.w	r0, r9, lsl #1
    951c:	4c48      	ldr	r4, [pc, #288]	; (9640 <lv_draw_map+0x2cc>)
    951e:	47a0      	blx	r4
    9520:	4682      	mov	sl, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9522:	4648      	mov	r0, r9
    9524:	47a0      	blx	r4
    9526:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
    9528:	9605      	str	r6, [sp, #20]
    952a:	2e00      	cmp	r6, #0
    952c:	dd4f      	ble.n	95ce <lv_draw_map+0x25a>
                map_buf_tmp += map_w * px_size_byte;
    952e:	fb08 f805 	mul.w	r8, r8, r5
    9532:	2500      	movs	r5, #0
    9534:	46ac      	mov	ip, r5
    9536:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9538:	e025      	b.n	9586 <lv_draw_map+0x212>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    953a:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
    953e:	e7eb      	b.n	9518 <lv_draw_map+0x1a4>
    9540:	445b      	add	r3, fp
    9542:	3702      	adds	r7, #2
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    9544:	4596      	cmp	lr, r2
    9546:	d00a      	beq.n	955e <lv_draw_map+0x1ea>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    9548:	7899      	ldrb	r1, [r3, #2]
                    mask_buf[px_i] = px_opa;
    954a:	f802 1b01 	strb.w	r1, [r2], #1
                    if(px_opa) {
    954e:	2900      	cmp	r1, #0
    9550:	d0f6      	beq.n	9540 <lv_draw_map+0x1cc>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
    9552:	7858      	ldrb	r0, [r3, #1]
    9554:	7819      	ldrb	r1, [r3, #0]
    9556:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    955a:	8039      	strh	r1, [r7, #0]
    955c:	e7f0      	b.n	9540 <lv_draw_map+0x1cc>
                map_buf_tmp += map_w * px_size_byte;
    955e:	4446      	add	r6, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    9560:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    9564:	3301      	adds	r3, #1
    9566:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    956a:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    956c:	fa0c f383 	sxtah	r3, ip, r3
    9570:	4599      	cmp	r9, r3
    9572:	d914      	bls.n	959e <lv_draw_map+0x22a>
                    blend_area.y2 ++;
    9574:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    9578:	3301      	adds	r3, #1
    957a:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
            for(y = 0; y < draw_area_h; y++) {
    957e:	3501      	adds	r5, #1
    9580:	9b05      	ldr	r3, [sp, #20]
    9582:	429d      	cmp	r5, r3
    9584:	d023      	beq.n	95ce <lv_draw_map+0x25a>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    9586:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9588:	2b00      	cmp	r3, #0
    958a:	dde8      	ble.n	955e <lv_draw_map+0x1ea>
    958c:	eb04 020c 	add.w	r2, r4, ip
    9590:	eb0a 074c 	add.w	r7, sl, ip, lsl #1
    9594:	449c      	add	ip, r3
    9596:	eb04 0e0c 	add.w	lr, r4, ip
    959a:	4633      	mov	r3, r6
    959c:	e7d4      	b.n	9548 <lv_draw_map+0x1d4>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    959e:	9a08      	ldr	r2, [sp, #32]
    95a0:	7b93      	ldrb	r3, [r2, #14]
    95a2:	9302      	str	r3, [sp, #8]
    95a4:	7813      	ldrb	r3, [r2, #0]
    95a6:	9301      	str	r3, [sp, #4]
    95a8:	2302      	movs	r3, #2
    95aa:	9300      	str	r3, [sp, #0]
    95ac:	4623      	mov	r3, r4
    95ae:	4652      	mov	r2, sl
    95b0:	a926      	add	r1, sp, #152	; 0x98
    95b2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    95b4:	4f24      	ldr	r7, [pc, #144]	; (9648 <lv_draw_map+0x2d4>)
    95b6:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
    95b8:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    95bc:	3301      	adds	r3, #1
    95be:	b21b      	sxth	r3, r3
    95c0:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    95c4:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                    px_i = 0;
    95c8:	f04f 0c00 	mov.w	ip, #0
    95cc:	e7d7      	b.n	957e <lv_draw_map+0x20a>
            if(blend_area.y1 != blend_area.y2) {
    95ce:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    95d2:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    95d6:	429a      	cmp	r2, r3
    95d8:	d00f      	beq.n	95fa <lv_draw_map+0x286>
                blend_area.y2--;
    95da:	3b01      	subs	r3, #1
    95dc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
    95e0:	9a08      	ldr	r2, [sp, #32]
    95e2:	7b93      	ldrb	r3, [r2, #14]
    95e4:	9302      	str	r3, [sp, #8]
    95e6:	7813      	ldrb	r3, [r2, #0]
    95e8:	9301      	str	r3, [sp, #4]
    95ea:	2302      	movs	r3, #2
    95ec:	9300      	str	r3, [sp, #0]
    95ee:	4623      	mov	r3, r4
    95f0:	4652      	mov	r2, sl
    95f2:	a926      	add	r1, sp, #152	; 0x98
    95f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
    95f6:	4d14      	ldr	r5, [pc, #80]	; (9648 <lv_draw_map+0x2d4>)
    95f8:	47a8      	blx	r5
            _lv_mem_buf_release(mask_buf);
    95fa:	4620      	mov	r0, r4
    95fc:	4c13      	ldr	r4, [pc, #76]	; (964c <lv_draw_map+0x2d8>)
    95fe:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    9600:	4650      	mov	r0, sl
    9602:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    9604:	e287      	b.n	9b16 <lv_draw_map+0x7a2>
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9606:	a83a      	add	r0, sp, #232	; 0xe8
    9608:	4b0c      	ldr	r3, [pc, #48]	; (963c <lv_draw_map+0x2c8>)
    960a:	4798      	blx	r3
    960c:	901c      	str	r0, [sp, #112]	; 0x70
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    960e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9610:	0058      	lsls	r0, r3, #1
    9612:	4c0b      	ldr	r4, [pc, #44]	; (9640 <lv_draw_map+0x2cc>)
    9614:	47a0      	blx	r4
    9616:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9618:	981c      	ldr	r0, [sp, #112]	; 0x70
    961a:	47a0      	blx	r4
    961c:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    961e:	2148      	movs	r1, #72	; 0x48
    9620:	a828      	add	r0, sp, #160	; 0xa0
    9622:	4b08      	ldr	r3, [pc, #32]	; (9644 <lv_draw_map+0x2d0>)
    9624:	4798      	blx	r3
            if(transform) {
    9626:	9b05      	ldr	r3, [sp, #20]
    9628:	2b00      	cmp	r3, #0
    962a:	d036      	beq.n	969a <lv_draw_map+0x326>
    962c:	e291      	b.n	9b52 <lv_draw_map+0x7de>
    962e:	bf00      	nop
    9630:	00006511 	.word	0x00006511
    9634:	00011585 	.word	0x00011585
    9638:	0000c46d 	.word	0x0000c46d
    963c:	00011aa5 	.word	0x00011aa5
    9640:	00012ee5 	.word	0x00012ee5
    9644:	000130df 	.word	0x000130df
    9648:	00008829 	.word	0x00008829
    964c:	00012b19 	.word	0x00012b19
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    9650:	2205      	movs	r2, #5
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;

                trans_dsc.cfg.angle = draw_dsc->angle;
    9652:	9808      	ldr	r0, [sp, #32]
    9654:	8843      	ldrh	r3, [r0, #2]
    9656:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.zoom = draw_dsc->zoom;
    965a:	8903      	ldrh	r3, [r0, #8]
    965c:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
                trans_dsc.cfg.src = map_p;
    9660:	9728      	str	r7, [sp, #160]	; 0xa0
                trans_dsc.cfg.src_w = map_w;
    9662:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    9666:	991b      	ldr	r1, [sp, #108]	; 0x6c
    9668:	88cb      	ldrh	r3, [r1, #6]
    966a:	3301      	adds	r3, #1
    966c:	8849      	ldrh	r1, [r1, #2]
    966e:	1a5b      	subs	r3, r3, r1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
    9670:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.cf = cf;
    9674:	f88d 20b2 	strb.w	r2, [sp, #178]	; 0xb2
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
    9678:	8883      	ldrh	r3, [r0, #4]
    967a:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
    967e:	88c3      	ldrh	r3, [r0, #6]
    9680:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.color = draw_dsc->recolor;
    9684:	8983      	ldrh	r3, [r0, #12]
    9686:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
                trans_dsc.cfg.antialias = draw_dsc->antialias;
    968a:	7bc3      	ldrb	r3, [r0, #15]
    968c:	f3c3 0300 	ubfx	r3, r3, #0, #1
    9690:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3

                _lv_img_buf_transform_init(&trans_dsc);
    9694:	a828      	add	r0, sp, #160	; 0xa0
    9696:	4b93      	ldr	r3, [pc, #588]	; (98e4 <lv_draw_map+0x570>)
    9698:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
    969a:	9808      	ldr	r0, [sp, #32]
    969c:	7a83      	ldrb	r3, [r0, #10]
    969e:	43da      	mvns	r2, r3
    96a0:	b2d2      	uxtb	r2, r2
    96a2:	9212      	str	r2, [sp, #72]	; 0x48
            if(draw_dsc->recolor_opa != 0) {
    96a4:	b303      	cbz	r3, 96e8 <lv_draw_map+0x374>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
    96a6:	b29b      	uxth	r3, r3
    96a8:	7b42      	ldrb	r2, [r0, #13]
    96aa:	08d2      	lsrs	r2, r2, #3
    96ac:	fb02 f203 	mul.w	r2, r2, r3
    96b0:	9210      	str	r2, [sp, #64]	; 0x40
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
    96b2:	8982      	ldrh	r2, [r0, #12]
    96b4:	f3c2 1245 	ubfx	r2, r2, #5, #6
    96b8:	fb02 f203 	mul.w	r2, r2, r3
    96bc:	9211      	str	r2, [sp, #68]	; 0x44
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
    96be:	7b02      	ldrb	r2, [r0, #12]
    96c0:	f002 021f 	and.w	r2, r2, #31
    96c4:	fb02 f303 	mul.w	r3, r2, r3
    96c8:	9313      	str	r3, [sp, #76]	; 0x4c
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    96ca:	9b06      	ldr	r3, [sp, #24]
    96cc:	b98b      	cbnz	r3, 96f2 <lv_draw_map+0x37e>
    96ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96d0:	bb53      	cbnz	r3, 9728 <lv_draw_map+0x3b4>
    96d2:	9a08      	ldr	r2, [sp, #32]
    96d4:	8853      	ldrh	r3, [r2, #2]
    96d6:	bb53      	cbnz	r3, 972e <lv_draw_map+0x3ba>
    96d8:	8913      	ldrh	r3, [r2, #8]
    96da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    96de:	bf14      	ite	ne
    96e0:	2302      	movne	r3, #2
    96e2:	2301      	moveq	r3, #1
    96e4:	931d      	str	r3, [sp, #116]	; 0x74
    96e6:	e006      	b.n	96f6 <lv_draw_map+0x382>
            uint16_t recolor_premult[3] = {0};
    96e8:	2300      	movs	r3, #0
    96ea:	9313      	str	r3, [sp, #76]	; 0x4c
    96ec:	9311      	str	r3, [sp, #68]	; 0x44
    96ee:	9310      	str	r3, [sp, #64]	; 0x40
    96f0:	e7eb      	b.n	96ca <lv_draw_map+0x356>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    96f2:	2302      	movs	r3, #2
    96f4:	931d      	str	r3, [sp, #116]	; 0x74
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;


            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
    96f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    96f8:	b9e3      	cbnz	r3, 9734 <lv_draw_map+0x3c0>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
    96fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    96fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    9700:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
    9704:	4413      	add	r3, r2
    9706:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9708:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    970c:	1a9b      	subs	r3, r3, r2
    970e:	9322      	str	r3, [sp, #136]	; 0x88
#endif
            for(y = 0; y < draw_area_h; y++) {
    9710:	961f      	str	r6, [sp, #124]	; 0x7c
    9712:	2e00      	cmp	r6, #0
    9714:	f340 81e4 	ble.w	9ae0 <lv_draw_map+0x76c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
    9718:	fb08 f305 	mul.w	r3, r8, r5
    971c:	931e      	str	r3, [sp, #120]	; 0x78
    971e:	2300      	movs	r3, #0
    9720:	930e      	str	r3, [sp, #56]	; 0x38
    9722:	930f      	str	r3, [sp, #60]	; 0x3c
        }
    }
    else {
        pxi = 0; /*unused*/
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    9724:	46d1      	mov	r9, sl
    9726:	e154      	b.n	99d2 <lv_draw_map+0x65e>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    9728:	2302      	movs	r3, #2
    972a:	931d      	str	r3, [sp, #116]	; 0x74
    972c:	e7e3      	b.n	96f6 <lv_draw_map+0x382>
    972e:	2302      	movs	r3, #2
    9730:	931d      	str	r3, [sp, #116]	; 0x74
    9732:	e7e0      	b.n	96f6 <lv_draw_map+0x382>
                _lv_memset_ff(mask_buf, mask_buf_size);
    9734:	991c      	ldr	r1, [sp, #112]	; 0x70
    9736:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9738:	4b6b      	ldr	r3, [pc, #428]	; (98e8 <lv_draw_map+0x574>)
    973a:	4798      	blx	r3
    973c:	e7dd      	b.n	96fa <lv_draw_map+0x386>
    int32_t xt = x - dsc->cfg.pivot_x;
    973e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9740:	442b      	add	r3, r5
    9742:	b21b      	sxth	r3, r3
    9744:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
    9748:	1a9b      	subs	r3, r3, r2
    int32_t yt = y - dsc->cfg.pivot_y;
    974a:	f9bd 20aa 	ldrsh.w	r2, [sp, #170]	; 0xaa
    974e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9750:	1a8a      	subs	r2, r1, r2
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
    9752:	f8bd 10ae 	ldrh.w	r1, [sp, #174]	; 0xae
    9756:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    975a:	d056      	beq.n	980a <lv_draw_map+0x496>
    else if(dsc->cfg.angle == 0) {
    975c:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
    9760:	2900      	cmp	r1, #0
    9762:	d165      	bne.n	9830 <lv_draw_map+0x4bc>
        xt *= dsc->tmp.zoom_inv;
    9764:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
        xs = xt + dsc->tmp.pivot_x_256;
    9768:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    976a:	fb01 4303 	mla	r3, r1, r3, r4
    976e:	9309      	str	r3, [sp, #36]	; 0x24
        ys = yt + dsc->tmp.pivot_y_256;
    9770:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    9772:	fb01 3302 	mla	r3, r1, r2, r3
    9776:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t xs_int = xs >> 8;
    9778:	9b09      	ldr	r3, [sp, #36]	; 0x24
    977a:	121f      	asrs	r7, r3, #8
    if(xs_int >= dsc->cfg.src_w) return false;
    977c:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
    9780:	429f      	cmp	r7, r3
    9782:	f280 80ab 	bge.w	98dc <lv_draw_map+0x568>
    else if(xs_int < 0) return false;
    9786:	2f00      	cmp	r7, #0
    9788:	f2c0 80a8 	blt.w	98dc <lv_draw_map+0x568>
    int32_t ys_int = ys >> 8;
    978c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    978e:	1212      	asrs	r2, r2, #8
    9790:	4610      	mov	r0, r2
    9792:	9215      	str	r2, [sp, #84]	; 0x54
    if(ys_int >= dsc->cfg.src_h) return false;
    9794:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
    9798:	4290      	cmp	r0, r2
    979a:	f280 809f 	bge.w	98dc <lv_draw_map+0x568>
    else if(ys_int < 0) return false;
    979e:	2800      	cmp	r0, #0
    97a0:	f2c0 809c 	blt.w	98dc <lv_draw_map+0x568>
    if(dsc->tmp.native_color) {
    97a4:	f89d 20d4 	ldrb.w	r2, [sp, #212]	; 0xd4
    97a8:	f012 0f04 	tst.w	r2, #4
    97ac:	d06a      	beq.n	9884 <lv_draw_map+0x510>
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
    97ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
        if(dsc->tmp.has_alpha == 0) {
    97b0:	f012 0f02 	tst.w	r2, #2
    97b4:	d155      	bne.n	9862 <lv_draw_map+0x4ee>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    97b6:	fb03 7300 	mla	r3, r3, r0, r7
    97ba:	005a      	lsls	r2, r3, #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
    97bc:	1888      	adds	r0, r1, r2
        *d8 = *s8;
    97be:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
    97c2:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
    97c6:	7843      	ldrb	r3, [r0, #1]
    97c8:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
            px_size = LV_COLOR_SIZE >> 3;
    97cc:	2102      	movs	r1, #2
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
    97ce:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
    97d2:	f013 0f01 	tst.w	r3, #1
    97d6:	d00d      	beq.n	97f4 <lv_draw_map+0x480>
        lv_color_t ct = LV_COLOR_TRANSP;
    97d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    97da:	f36f 0304 	bfc	r3, #0, #5
    97de:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
    97e2:	f36f 23cf 	bfc	r3, #11, #5
    97e6:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
        if(dsc->res.color.full == ct.full) return false;
    97ea:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	; 0xb4
    97ee:	b29b      	uxth	r3, r3
    97f0:	4298      	cmp	r0, r3
    97f2:	d073      	beq.n	98dc <lv_draw_map+0x568>
    }

    if(dsc->cfg.antialias == false) return true;
    97f4:	f89d 30b3 	ldrb.w	r3, [sp, #179]	; 0xb3
    97f8:	2b00      	cmp	r3, #0
    97fa:	d159      	bne.n	98b0 <lv_draw_map+0x53c>
                            mask_buf[px_i] = trans_dsc.res.opa;
    97fc:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
    9800:	f88a 3000 	strb.w	r3, [sl]
                            c.full = trans_dsc.res.color.full;
    9804:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
    9808:	e086      	b.n	9918 <lv_draw_map+0x5a4>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
    980a:	9834      	ldr	r0, [sp, #208]	; 0xd0
    980c:	9933      	ldr	r1, [sp, #204]	; 0xcc
    980e:	fb00 f403 	mul.w	r4, r0, r3
    9812:	fb01 4712 	mls	r7, r1, r2, r4
    9816:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    9818:	eb04 14e7 	add.w	r4, r4, r7, asr #7
    981c:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    981e:	fb00 f202 	mul.w	r2, r0, r2
    9822:	fb01 2303 	mla	r3, r1, r3, r2
    9826:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    9828:	eb02 13e3 	add.w	r3, r2, r3, asr #7
    982c:	930b      	str	r3, [sp, #44]	; 0x2c
    982e:	e7a3      	b.n	9778 <lv_draw_map+0x404>
        xt *= dsc->tmp.zoom_inv;
    9830:	f8bd 10d6 	ldrh.w	r1, [sp, #214]	; 0xd6
    9834:	fb01 f303 	mul.w	r3, r1, r3
        yt *= dsc->tmp.zoom_inv;
    9838:	fb01 f202 	mul.w	r2, r1, r2
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
    983c:	9934      	ldr	r1, [sp, #208]	; 0xd0
    983e:	9833      	ldr	r0, [sp, #204]	; 0xcc
    9840:	fb01 f403 	mul.w	r4, r1, r3
    9844:	fb00 4712 	mls	r7, r0, r2, r4
    9848:	9c31      	ldr	r4, [sp, #196]	; 0xc4
    984a:	eb04 34e7 	add.w	r4, r4, r7, asr #15
    984e:	9409      	str	r4, [sp, #36]	; 0x24
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (LV_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    9850:	fb01 f202 	mul.w	r2, r1, r2
    9854:	fb00 2303 	mla	r3, r0, r3, r2
    9858:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    985a:	eb02 33e3 	add.w	r3, r2, r3, asr #15
    985e:	930b      	str	r3, [sp, #44]	; 0x2c
    9860:	e78a      	b.n	9778 <lv_draw_map+0x404>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
    9862:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9864:	fb03 7302 	mla	r3, r3, r2, r7
    9868:	eb03 0243 	add.w	r2, r3, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
    986c:	188b      	adds	r3, r1, r2
    986e:	5c89      	ldrb	r1, [r1, r2]
    9870:	f88d 10b4 	strb.w	r1, [sp, #180]	; 0xb4
    9874:	7859      	ldrb	r1, [r3, #1]
    9876:	f88d 10b5 	strb.w	r1, [sp, #181]	; 0xb5
            dsc->res.opa = src_u8[pxi + px_size - 1];
    987a:	789b      	ldrb	r3, [r3, #2]
    987c:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
    9880:	2103      	movs	r1, #3
    9882:	e7a4      	b.n	97ce <lv_draw_map+0x45a>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
    9884:	b239      	sxth	r1, r7
    9886:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
    988a:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
    988e:	9225      	str	r2, [sp, #148]	; 0x94
    9890:	9124      	str	r1, [sp, #144]	; 0x90
    9892:	a82e      	add	r0, sp, #184	; 0xb8
    9894:	4c15      	ldr	r4, [pc, #84]	; (98ec <lv_draw_map+0x578>)
    9896:	47a0      	blx	r4
    9898:	f8ad 00b4 	strh.w	r0, [sp, #180]	; 0xb4
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    989c:	9a25      	ldr	r2, [sp, #148]	; 0x94
    989e:	9924      	ldr	r1, [sp, #144]	; 0x90
    98a0:	a82e      	add	r0, sp, #184	; 0xb8
    98a2:	4b13      	ldr	r3, [pc, #76]	; (98f0 <lv_draw_map+0x57c>)
    98a4:	4798      	blx	r3
    98a6:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
        pxi = 0; /*unused*/
    98aa:	2200      	movs	r2, #0
        px_size = 0;    /*unused*/
    98ac:	4611      	mov	r1, r2
    98ae:	e78e      	b.n	97ce <lv_draw_map+0x45a>

    dsc->tmp.xs = xs;
    98b0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    98b4:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
    98b8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    98bc:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
    98c0:	f8ad 70dc 	strh.w	r7, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
    98c4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
    98c8:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
    98cc:	9238      	str	r2, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
    98ce:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
    98d2:	a828      	add	r0, sp, #160	; 0xa0
    98d4:	4b07      	ldr	r3, [pc, #28]	; (98f4 <lv_draw_map+0x580>)
    98d6:	4798      	blx	r3
                        if(ret == false) {
    98d8:	2800      	cmp	r0, #0
    98da:	d18f      	bne.n	97fc <lv_draw_map+0x488>
                            mask_buf[px_i] = LV_OPA_TRANSP;
    98dc:	2300      	movs	r3, #0
    98de:	f88a 3000 	strb.w	r3, [sl]
                            continue;
    98e2:	e03d      	b.n	9960 <lv_draw_map+0x5ec>
    98e4:	0000f0f5 	.word	0x0000f0f5
    98e8:	00013195 	.word	0x00013195
    98ec:	0000eec1 	.word	0x0000eec1
    98f0:	0000eff1 	.word	0x0000eff1
    98f4:	0000f3a5 	.word	0x0000f3a5
    98f8:	000007e0 	.word	0x000007e0
                            mask_buf[px_i] = 0xFF;
    98fc:	23ff      	movs	r3, #255	; 0xff
    98fe:	f88a 3000 	strb.w	r3, [sl]
                        c.full =  map_px[0] + (map_px[1] << 8);
    9902:	7872      	ldrb	r2, [r6, #1]
    9904:	7833      	ldrb	r3, [r6, #0]
    9906:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    990a:	b29b      	uxth	r3, r3
                        if(chroma_key) {
    990c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    990e:	b11a      	cbz	r2, 9918 <lv_draw_map+0x5a4>
                            if(c.full == chroma_keyed_color.full) {
    9910:	f83f 201c 	ldrh.w	r2, [pc, #-28]	; 98f8 <lv_draw_map+0x584>
    9914:	429a      	cmp	r2, r3
    9916:	d036      	beq.n	9986 <lv_draw_map+0x612>
                    if(draw_dsc->recolor_opa != 0) {
    9918:	9a08      	ldr	r2, [sp, #32]
    991a:	7a92      	ldrb	r2, [r2, #10]
    991c:	b1ea      	cbz	r2, 995a <lv_draw_map+0x5e6>
    LV_COLOR_SET_R(ret, (uint16_t)((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix) >> 8);
    991e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    9922:	0ad9      	lsrs	r1, r3, #11
    9924:	9810      	ldr	r0, [sp, #64]	; 0x40
    9926:	fb01 0102 	mla	r1, r1, r2, r0
    992a:	f3c1 2104 	ubfx	r1, r1, #8, #5
    LV_COLOR_SET_G(ret, (uint16_t)((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix) >> 8);
    992e:	f3c3 1045 	ubfx	r0, r3, #5, #6
    9932:	9c11      	ldr	r4, [sp, #68]	; 0x44
    9934:	fb00 4002 	mla	r0, r0, r2, r4
    9938:	f3c0 2005 	ubfx	r0, r0, #8, #6
    LV_COLOR_SET_B(ret, (uint16_t)((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix) >> 8);
    993c:	f003 031f 	and.w	r3, r3, #31
    9940:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    9942:	fb03 4302 	mla	r3, r3, r2, r4
    9946:	f3c3 2307 	ubfx	r3, r3, #8, #8
    994a:	f363 0904 	bfi	r9, r3, #0, #5
    994e:	f360 194a 	bfi	r9, r0, #5, #6
    9952:	f361 29cf 	bfi	r9, r1, #11, #5
    9956:	fa1f f389 	uxth.w	r3, r9
                    map2[px_i].full = c.full;
    995a:	9a07      	ldr	r2, [sp, #28]
    995c:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    9960:	3501      	adds	r5, #1
    9962:	445e      	add	r6, fp
    9964:	f10a 0a01 	add.w	sl, sl, #1
    9968:	4545      	cmp	r5, r8
    996a:	d010      	beq.n	998e <lv_draw_map+0x61a>
                    if(transform) {
    996c:	9b05      	ldr	r3, [sp, #20]
    996e:	2b00      	cmp	r3, #0
    9970:	f47f aee5 	bne.w	973e <lv_draw_map+0x3ca>
                        if(alpha_byte) {
    9974:	9b06      	ldr	r3, [sp, #24]
    9976:	2b00      	cmp	r3, #0
    9978:	d0c0      	beq.n	98fc <lv_draw_map+0x588>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    997a:	78b3      	ldrb	r3, [r6, #2]
                            mask_buf[px_i] = px_opa;
    997c:	f88a 3000 	strb.w	r3, [sl]
                            if(px_opa == 0) {
    9980:	2b00      	cmp	r3, #0
    9982:	d0ed      	beq.n	9960 <lv_draw_map+0x5ec>
    9984:	e7bd      	b.n	9902 <lv_draw_map+0x58e>
                                mask_buf[px_i] = LV_OPA_TRANSP;
    9986:	2300      	movs	r3, #0
    9988:	f88a 3000 	strb.w	r3, [sl]
                                continue;
    998c:	e7e8      	b.n	9960 <lv_draw_map+0x5ec>
    998e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9992:	189c      	adds	r4, r3, r2
                if(other_mask_cnt) {
    9994:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9996:	2b00      	cmp	r3, #0
    9998:	d13e      	bne.n	9a18 <lv_draw_map+0x6a4>
                map_buf_tmp += map_w * px_size_byte;
    999a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    999c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    999e:	4413      	add	r3, r2
    99a0:	9314      	str	r3, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    99a2:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    99a6:	3301      	adds	r3, #1
    99a8:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
    99ac:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
    99ae:	fa04 f383 	sxtah	r3, r4, r3
    99b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    99b4:	429a      	cmp	r2, r3
    99b6:	d95c      	bls.n	9a72 <lv_draw_map+0x6fe>
                    blend_area.y2 ++;
    99b8:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    99bc:	3301      	adds	r3, #1
    99be:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    99c2:	940f      	str	r4, [sp, #60]	; 0x3c
            for(y = 0; y < draw_area_h; y++) {
    99c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    99c6:	3301      	adds	r3, #1
    99c8:	930e      	str	r3, [sp, #56]	; 0x38
    99ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    99cc:	4293      	cmp	r3, r2
    99ce:	f000 8087 	beq.w	9ae0 <lv_draw_map+0x76c>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
    99d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    99d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    99d8:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
    99dc:	4413      	add	r3, r2
    99de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    99e0:	f9b2 2000 	ldrsh.w	r2, [r2]
    99e4:	1a9b      	subs	r3, r3, r2
    99e6:	930c      	str	r3, [sp, #48]	; 0x30
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
    99e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    99ea:	4698      	mov	r8, r3
    99ec:	2b00      	cmp	r3, #0
    99ee:	dd11      	ble.n	9a14 <lv_draw_map+0x6a0>
    99f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    99f2:	4619      	mov	r1, r3
    99f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    99f6:	eb01 0a02 	add.w	sl, r1, r2
    99fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    99fc:	4619      	mov	r1, r3
    99fe:	eb01 0342 	add.w	r3, r1, r2, lsl #1
    9a02:	9307      	str	r3, [sp, #28]
    9a04:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9a06:	2500      	movs	r5, #0
    int32_t yt = y - dsc->cfg.pivot_y;
    9a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9a0c:	4413      	add	r3, r2
    9a0e:	b21b      	sxth	r3, r3
    9a10:	930d      	str	r3, [sp, #52]	; 0x34
    9a12:	e7ab      	b.n	996c <lv_draw_map+0x5f8>
    9a14:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    9a16:	e7bd      	b.n	9994 <lv_draw_map+0x620>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
    9a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9a1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a1c:	4413      	add	r3, r2
    9a1e:	461e      	mov	r6, r3
    9a20:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
    9a24:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
    9a28:	3301      	adds	r3, #1
    9a2a:	1a5b      	subs	r3, r3, r1
    9a2c:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
    9a30:	9d18      	ldr	r5, [sp, #96]	; 0x60
    9a32:	8a68      	ldrh	r0, [r5, #18]
    9a34:	4402      	add	r2, r0
    9a36:	980e      	ldr	r0, [sp, #56]	; 0x38
    9a38:	4402      	add	r2, r0
    9a3a:	8a28      	ldrh	r0, [r5, #16]
    9a3c:	4401      	add	r1, r0
    9a3e:	b21b      	sxth	r3, r3
    9a40:	b212      	sxth	r2, r2
    9a42:	b209      	sxth	r1, r1
    9a44:	4630      	mov	r0, r6
    9a46:	4d4e      	ldr	r5, [pc, #312]	; (9b80 <lv_draw_map+0x80c>)
    9a48:	47a8      	blx	r5
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
    9a4a:	b128      	cbz	r0, 9a58 <lv_draw_map+0x6e4>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    9a4c:	2802      	cmp	r0, #2
    9a4e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9a50:	bf08      	it	eq
    9a52:	4602      	moveq	r2, r0
    9a54:	921d      	str	r2, [sp, #116]	; 0x74
    9a56:	e7a0      	b.n	999a <lv_draw_map+0x626>
    9a58:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    9a5c:	3101      	adds	r1, #1
    9a5e:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
    9a62:	1ac9      	subs	r1, r1, r3
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
    9a64:	b209      	sxth	r1, r1
    9a66:	4630      	mov	r0, r6
    9a68:	4b46      	ldr	r3, [pc, #280]	; (9b84 <lv_draw_map+0x810>)
    9a6a:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
    9a6c:	2302      	movs	r3, #2
    9a6e:	931d      	str	r3, [sp, #116]	; 0x74
    9a70:	e793      	b.n	999a <lv_draw_map+0x626>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    9a72:	9d08      	ldr	r5, [sp, #32]
    9a74:	7bab      	ldrb	r3, [r5, #14]
    9a76:	9302      	str	r3, [sp, #8]
    9a78:	782b      	ldrb	r3, [r5, #0]
    9a7a:	9301      	str	r3, [sp, #4]
    9a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9a7e:	9300      	str	r3, [sp, #0]
    9a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9a82:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9a84:	a926      	add	r1, sp, #152	; 0x98
    9a86:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9a88:	4c3f      	ldr	r4, [pc, #252]	; (9b88 <lv_draw_map+0x814>)
    9a8a:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
    9a8c:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
    9a90:	3301      	adds	r3, #1
    9a92:	b21b      	sxth	r3, r3
    9a94:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    blend_area.y2 = blend_area.y1;
    9a98:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    9a9c:	9b06      	ldr	r3, [sp, #24]
    9a9e:	b95b      	cbnz	r3, 9ab8 <lv_draw_map+0x744>
    9aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9aa2:	b983      	cbnz	r3, 9ac6 <lv_draw_map+0x752>
    9aa4:	886b      	ldrh	r3, [r5, #2]
    9aa6:	b98b      	cbnz	r3, 9acc <lv_draw_map+0x758>
    9aa8:	892b      	ldrh	r3, [r5, #8]
    9aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9aae:	bf14      	ite	ne
    9ab0:	2302      	movne	r3, #2
    9ab2:	2301      	moveq	r3, #1
    9ab4:	931d      	str	r3, [sp, #116]	; 0x74
    9ab6:	e001      	b.n	9abc <lv_draw_map+0x748>
    9ab8:	2302      	movs	r3, #2
    9aba:	931d      	str	r3, [sp, #116]	; 0x74
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
    9abc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9abe:	b943      	cbnz	r3, 9ad2 <lv_draw_map+0x75e>
                    px_i = 0;
    9ac0:	2300      	movs	r3, #0
    9ac2:	930f      	str	r3, [sp, #60]	; 0x3c
    9ac4:	e77e      	b.n	99c4 <lv_draw_map+0x650>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
    9ac6:	2302      	movs	r3, #2
    9ac8:	931d      	str	r3, [sp, #116]	; 0x74
    9aca:	e7f7      	b.n	9abc <lv_draw_map+0x748>
    9acc:	2302      	movs	r3, #2
    9ace:	931d      	str	r3, [sp, #116]	; 0x74
    9ad0:	e7f4      	b.n	9abc <lv_draw_map+0x748>
                        _lv_memset_ff(mask_buf, mask_buf_size);
    9ad2:	991c      	ldr	r1, [sp, #112]	; 0x70
    9ad4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9ad6:	4b2d      	ldr	r3, [pc, #180]	; (9b8c <lv_draw_map+0x818>)
    9ad8:	4798      	blx	r3
                    px_i = 0;
    9ada:	2300      	movs	r3, #0
    9adc:	930f      	str	r3, [sp, #60]	; 0x3c
    9ade:	e771      	b.n	99c4 <lv_draw_map+0x650>
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
    9ae0:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
    9ae4:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
    9ae8:	429a      	cmp	r2, r3
    9aea:	d00f      	beq.n	9b0c <lv_draw_map+0x798>
                blend_area.y2--;
    9aec:	3b01      	subs	r3, #1
    9aee:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
    9af2:	9a08      	ldr	r2, [sp, #32]
    9af4:	7b93      	ldrb	r3, [r2, #14]
    9af6:	9302      	str	r3, [sp, #8]
    9af8:	7813      	ldrb	r3, [r2, #0]
    9afa:	9301      	str	r3, [sp, #4]
    9afc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9afe:	9300      	str	r3, [sp, #0]
    9b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9b02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9b04:	a926      	add	r1, sp, #152	; 0x98
    9b06:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9b08:	4c1f      	ldr	r4, [pc, #124]	; (9b88 <lv_draw_map+0x814>)
    9b0a:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
    9b0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9b0e:	4c20      	ldr	r4, [pc, #128]	; (9b90 <lv_draw_map+0x81c>)
    9b10:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
    9b12:	981a      	ldr	r0, [sp, #104]	; 0x68
    9b14:	47a0      	blx	r4
        }
    }
}
    9b16:	b03d      	add	sp, #244	; 0xf4
    9b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    9b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9b1e:	bb13      	cbnz	r3, 9b66 <lv_draw_map+0x7f2>
    9b20:	2301      	movs	r3, #1
    9b22:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9b24:	a83a      	add	r0, sp, #232	; 0xe8
    9b26:	4b1b      	ldr	r3, [pc, #108]	; (9b94 <lv_draw_map+0x820>)
    9b28:	4798      	blx	r3
    9b2a:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    9b2e:	f67f ad6a 	bls.w	9606 <lv_draw_map+0x292>
             lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    9b32:	f44f 7070 	mov.w	r0, #960	; 0x3c0
    9b36:	4c18      	ldr	r4, [pc, #96]	; (9b98 <lv_draw_map+0x824>)
    9b38:	47a0      	blx	r4
    9b3a:	901a      	str	r0, [sp, #104]	; 0x68
             lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    9b3c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    9b40:	47a0      	blx	r4
    9b42:	9017      	str	r0, [sp, #92]	; 0x5c
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
    9b44:	2148      	movs	r1, #72	; 0x48
    9b46:	a828      	add	r0, sp, #160	; 0xa0
    9b48:	4b0e      	ldr	r3, [pc, #56]	; (9b84 <lv_draw_map+0x810>)
    9b4a:	4798      	blx	r3
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9b4c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    9b50:	931c      	str	r3, [sp, #112]	; 0x70
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
    9b52:	9b06      	ldr	r3, [sp, #24]
    9b54:	2b00      	cmp	r3, #0
    9b56:	f47f ad7b 	bne.w	9650 <lv_draw_map+0x2dc>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
    9b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	bf0c      	ite	eq
    9b60:	2204      	moveq	r2, #4
    9b62:	2206      	movne	r2, #6
    9b64:	e575      	b.n	9652 <lv_draw_map+0x2de>
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
    9b66:	2301      	movs	r3, #1
    9b68:	9305      	str	r3, [sp, #20]
             uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
    9b6a:	a83a      	add	r0, sp, #232	; 0xe8
    9b6c:	4b09      	ldr	r3, [pc, #36]	; (9b94 <lv_draw_map+0x820>)
    9b6e:	4798      	blx	r3
    9b70:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    9b74:	f67f ad47 	bls.w	9606 <lv_draw_map+0x292>
    9b78:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    9b7c:	931c      	str	r3, [sp, #112]	; 0x70
    9b7e:	e546      	b.n	960e <lv_draw_map+0x29a>
    9b80:	0000c3c5 	.word	0x0000c3c5
    9b84:	000130df 	.word	0x000130df
    9b88:	00008829 	.word	0x00008829
    9b8c:	00013195 	.word	0x00013195
    9b90:	00012b19 	.word	0x00012b19
    9b94:	00011aa5 	.word	0x00011aa5
    9b98:	00012ee5 	.word	0x00012ee5

00009b9c <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
    9b9c:	b570      	push	{r4, r5, r6, lr}
    9b9e:	b09e      	sub	sp, #120	; 0x78
    9ba0:	4604      	mov	r4, r0
    9ba2:	460d      	mov	r5, r1
    9ba4:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
    9ba6:	a809      	add	r0, sp, #36	; 0x24
    9ba8:	4b0b      	ldr	r3, [pc, #44]	; (9bd8 <show_error+0x3c>)
    9baa:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
    9bac:	4b0b      	ldr	r3, [pc, #44]	; (9bdc <show_error+0x40>)
    9bae:	881b      	ldrh	r3, [r3, #0]
    9bb0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    lv_draw_rect(coords, clip_area, &rect_dsc);
    9bb4:	aa09      	add	r2, sp, #36	; 0x24
    9bb6:	4629      	mov	r1, r5
    9bb8:	4620      	mov	r0, r4
    9bba:	4b09      	ldr	r3, [pc, #36]	; (9be0 <show_error+0x44>)
    9bbc:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    9bbe:	a802      	add	r0, sp, #8
    9bc0:	4b08      	ldr	r3, [pc, #32]	; (9be4 <show_error+0x48>)
    9bc2:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
    9bc4:	2300      	movs	r3, #0
    9bc6:	9300      	str	r3, [sp, #0]
    9bc8:	4633      	mov	r3, r6
    9bca:	aa02      	add	r2, sp, #8
    9bcc:	4629      	mov	r1, r5
    9bce:	4620      	mov	r0, r4
    9bd0:	4c05      	ldr	r4, [pc, #20]	; (9be8 <show_error+0x4c>)
    9bd2:	47a0      	blx	r4
}
    9bd4:	b01e      	add	sp, #120	; 0x78
    9bd6:	bd70      	pop	{r4, r5, r6, pc}
    9bd8:	0000c811 	.word	0x0000c811
    9bdc:	0001c19c 	.word	0x0001c19c
    9be0:	0000c8d9 	.word	0x0000c8d9
    9be4:	00009f75 	.word	0x00009f75
    9be8:	00009fcd 	.word	0x00009fcd

00009bec <lv_draw_img_dsc_init>:
{
    9bec:	b510      	push	{r4, lr}
    9bee:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
    9bf0:	2110      	movs	r1, #16
    9bf2:	4b0c      	ldr	r3, [pc, #48]	; (9c24 <lv_draw_img_dsc_init+0x38>)
    9bf4:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
    9bf6:	7b23      	ldrb	r3, [r4, #12]
    9bf8:	f36f 0304 	bfc	r3, #0, #5
    9bfc:	7323      	strb	r3, [r4, #12]
    9bfe:	89a3      	ldrh	r3, [r4, #12]
    9c00:	f36f 134a 	bfc	r3, #5, #6
    9c04:	81a3      	strh	r3, [r4, #12]
    9c06:	0a1b      	lsrs	r3, r3, #8
    9c08:	f36f 03c7 	bfc	r3, #3, #5
    9c0c:	7363      	strb	r3, [r4, #13]
    dsc->opa = LV_OPA_COVER;
    9c0e:	23ff      	movs	r3, #255	; 0xff
    9c10:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
    9c12:	f44f 7380 	mov.w	r3, #256	; 0x100
    9c16:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
    9c18:	7be3      	ldrb	r3, [r4, #15]
    9c1a:	f043 0301 	orr.w	r3, r3, #1
    9c1e:	73e3      	strb	r3, [r4, #15]
    9c20:	bd10      	pop	{r4, pc}
    9c22:	bf00      	nop
    9c24:	000130df 	.word	0x000130df

00009c28 <lv_img_cf_get_px_size>:
    switch(cf) {
    9c28:	3804      	subs	r0, #4
    9c2a:	280a      	cmp	r0, #10
    9c2c:	d813      	bhi.n	9c56 <lv_img_cf_get_px_size+0x2e>
    9c2e:	e8df f000 	tbb	[pc, r0]
    9c32:	0806      	.short	0x0806
    9c34:	0e0c0a06 	.word	0x0e0c0a06
    9c38:	0e0c0a10 	.word	0x0e0c0a10
    9c3c:	10          	.byte	0x10
    9c3d:	00          	.byte	0x00
            px_size = LV_COLOR_SIZE;
    9c3e:	2010      	movs	r0, #16
    9c40:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
    9c42:	2018      	movs	r0, #24
            break;
    9c44:	4770      	bx	lr
            px_size = 1;
    9c46:	2001      	movs	r0, #1
            break;
    9c48:	4770      	bx	lr
            px_size = 2;
    9c4a:	2002      	movs	r0, #2
            break;
    9c4c:	4770      	bx	lr
            px_size = 4;
    9c4e:	2004      	movs	r0, #4
            break;
    9c50:	4770      	bx	lr
            px_size = 8;
    9c52:	2008      	movs	r0, #8
            break;
    9c54:	4770      	bx	lr
            px_size = 0;
    9c56:	2000      	movs	r0, #0
}
    9c58:	4770      	bx	lr

00009c5a <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
    9c5a:	2803      	cmp	r0, #3
    9c5c:	d005      	beq.n	9c6a <lv_img_cf_is_chroma_keyed+0x10>
    9c5e:	d302      	bcc.n	9c66 <lv_img_cf_is_chroma_keyed+0xc>
    9c60:	3806      	subs	r0, #6
    9c62:	2804      	cmp	r0, #4
    9c64:	d901      	bls.n	9c6a <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
    9c66:	2000      	movs	r0, #0
    9c68:	4770      	bx	lr
            is_chroma_keyed = true;
    9c6a:	2001      	movs	r0, #1
}
    9c6c:	4770      	bx	lr

00009c6e <lv_img_cf_has_alpha>:
    switch(cf) {
    9c6e:	3802      	subs	r0, #2
    9c70:	280c      	cmp	r0, #12
    9c72:	d808      	bhi.n	9c86 <lv_img_cf_has_alpha+0x18>
    9c74:	e8df f000 	tbb	[pc, r0]
    9c78:	09070709 	.word	0x09070709
    9c7c:	09090907 	.word	0x09090907
    9c80:	09090909 	.word	0x09090909
    9c84:	09          	.byte	0x09
    9c85:	00          	.byte	0x00
            has_alpha = false;
    9c86:	2000      	movs	r0, #0
    9c88:	4770      	bx	lr
            has_alpha = true;
    9c8a:	2001      	movs	r0, #1
}
    9c8c:	4770      	bx	lr
	...

00009c90 <lv_draw_img>:
{
    9c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c94:	b08f      	sub	sp, #60	; 0x3c
    9c96:	4605      	mov	r5, r0
    9c98:	460e      	mov	r6, r1
    if(src == NULL) {
    9c9a:	b13a      	cbz	r2, 9cac <lv_draw_img+0x1c>
    9c9c:	461c      	mov	r4, r3
    9c9e:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	2b05      	cmp	r3, #5
    9ca4:	d810      	bhi.n	9cc8 <lv_draw_img+0x38>
}
    9ca6:	b00f      	add	sp, #60	; 0x3c
    9ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LV_LOG_WARN("Image draw: src is NULL");
    9cac:	4b84      	ldr	r3, [pc, #528]	; (9ec0 <lv_draw_img+0x230>)
    9cae:	9300      	str	r3, [sp, #0]
    9cb0:	4b84      	ldr	r3, [pc, #528]	; (9ec4 <lv_draw_img+0x234>)
    9cb2:	224d      	movs	r2, #77	; 0x4d
    9cb4:	4984      	ldr	r1, [pc, #528]	; (9ec8 <lv_draw_img+0x238>)
    9cb6:	2002      	movs	r0, #2
    9cb8:	4c84      	ldr	r4, [pc, #528]	; (9ecc <lv_draw_img+0x23c>)
    9cba:	47a0      	blx	r4
        show_error(coords, mask, "No\ndata");
    9cbc:	4a84      	ldr	r2, [pc, #528]	; (9ed0 <lv_draw_img+0x240>)
    9cbe:	4631      	mov	r1, r6
    9cc0:	4628      	mov	r0, r5
    9cc2:	4b84      	ldr	r3, [pc, #528]	; (9ed4 <lv_draw_img+0x244>)
    9cc4:	4798      	blx	r3
        return;
    9cc6:	e7ee      	b.n	9ca6 <lv_draw_img+0x16>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
    9cc8:	89a1      	ldrh	r1, [r4, #12]
    9cca:	4b83      	ldr	r3, [pc, #524]	; (9ed8 <lv_draw_img+0x248>)
    9ccc:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
    9cce:	4607      	mov	r7, r0
    9cd0:	2800      	cmp	r0, #0
    9cd2:	f000 80b5 	beq.w	9e40 <lv_draw_img+0x1b0>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
    9cd6:	f890 900c 	ldrb.w	r9, [r0, #12]
    9cda:	f009 091f 	and.w	r9, r9, #31
    9cde:	4648      	mov	r0, r9
    9ce0:	4b7e      	ldr	r3, [pc, #504]	; (9edc <lv_draw_img+0x24c>)
    9ce2:	4798      	blx	r3
    9ce4:	4680      	mov	r8, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
    9ce6:	4648      	mov	r0, r9
    9ce8:	4b7d      	ldr	r3, [pc, #500]	; (9ee0 <lv_draw_img+0x250>)
    9cea:	4798      	blx	r3
    9cec:	4681      	mov	r9, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
    9cee:	69bb      	ldr	r3, [r7, #24]
    9cf0:	b16b      	cbz	r3, 9d0e <lv_draw_img+0x7e>
        LV_LOG_WARN("Image draw error");
    9cf2:	4b7c      	ldr	r3, [pc, #496]	; (9ee4 <lv_draw_img+0x254>)
    9cf4:	9300      	str	r3, [sp, #0]
    9cf6:	4b7c      	ldr	r3, [pc, #496]	; (9ee8 <lv_draw_img+0x258>)
    9cf8:	22f7      	movs	r2, #247	; 0xf7
    9cfa:	4973      	ldr	r1, [pc, #460]	; (9ec8 <lv_draw_img+0x238>)
    9cfc:	2002      	movs	r0, #2
    9cfe:	4c73      	ldr	r4, [pc, #460]	; (9ecc <lv_draw_img+0x23c>)
    9d00:	47a0      	blx	r4
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
    9d02:	69ba      	ldr	r2, [r7, #24]
    9d04:	4631      	mov	r1, r6
    9d06:	4628      	mov	r0, r5
    9d08:	4b72      	ldr	r3, [pc, #456]	; (9ed4 <lv_draw_img+0x244>)
    9d0a:	4798      	blx	r3
    9d0c:	e7cb      	b.n	9ca6 <lv_draw_img+0x16>
    else if(cdsc->dec_dsc.img_data) {
    9d0e:	693b      	ldr	r3, [r7, #16]
    9d10:	2b00      	cmp	r3, #0
    9d12:	d049      	beq.n	9da8 <lv_draw_img+0x118>
    9d14:	1e6b      	subs	r3, r5, #1
    9d16:	1de8      	adds	r0, r5, #7
    9d18:	aa0a      	add	r2, sp, #40	; 0x28
    9d1a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    9d1e:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    9d22:	4298      	cmp	r0, r3
    9d24:	d1f9      	bne.n	9d1a <lv_draw_img+0x8a>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
    9d26:	8863      	ldrh	r3, [r4, #2]
    9d28:	b91b      	cbnz	r3, 9d32 <lv_draw_img+0xa2>
    9d2a:	8922      	ldrh	r2, [r4, #8]
    9d2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    9d30:	d028      	beq.n	9d84 <lv_draw_img+0xf4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    9d32:	88ea      	ldrh	r2, [r5, #6]
    9d34:	3201      	adds	r2, #1
    9d36:	8869      	ldrh	r1, [r5, #2]
    9d38:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    9d3a:	88a9      	ldrh	r1, [r5, #4]
    9d3c:	3101      	adds	r1, #1
    9d3e:	8828      	ldrh	r0, [r5, #0]
    9d40:	1a09      	subs	r1, r1, r0
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
    9d42:	1d20      	adds	r0, r4, #4
    9d44:	9001      	str	r0, [sp, #4]
    9d46:	8920      	ldrh	r0, [r4, #8]
    9d48:	9000      	str	r0, [sp, #0]
    9d4a:	b21b      	sxth	r3, r3
    9d4c:	b212      	sxth	r2, r2
    9d4e:	b209      	sxth	r1, r1
    9d50:	a80a      	add	r0, sp, #40	; 0x28
    9d52:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 9f0c <lv_draw_img+0x27c>
    9d56:	47d0      	blx	sl
            map_area_rot.x1 += coords->x1;
    9d58:	882a      	ldrh	r2, [r5, #0]
    9d5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9d5e:	4413      	add	r3, r2
    9d60:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
    9d64:	886b      	ldrh	r3, [r5, #2]
    9d66:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    9d6a:	4419      	add	r1, r3
    9d6c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
    9d70:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    9d74:	440a      	add	r2, r1
    9d76:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
    9d7a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    9d7e:	4413      	add	r3, r2
    9d80:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
    9d84:	aa0a      	add	r2, sp, #40	; 0x28
    9d86:	4631      	mov	r1, r6
    9d88:	a80c      	add	r0, sp, #48	; 0x30
    9d8a:	4b58      	ldr	r3, [pc, #352]	; (9eec <lv_draw_img+0x25c>)
    9d8c:	4798      	blx	r3
        if(union_ok == false) {
    9d8e:	2800      	cmp	r0, #0
    9d90:	d089      	beq.n	9ca6 <lv_draw_img+0x16>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
    9d92:	693a      	ldr	r2, [r7, #16]
    9d94:	f8cd 9004 	str.w	r9, [sp, #4]
    9d98:	f8cd 8000 	str.w	r8, [sp]
    9d9c:	4623      	mov	r3, r4
    9d9e:	a90c      	add	r1, sp, #48	; 0x30
    9da0:	4628      	mov	r0, r5
    9da2:	4c53      	ldr	r4, [pc, #332]	; (9ef0 <lv_draw_img+0x260>)
    9da4:	47a0      	blx	r4
    9da6:	e77e      	b.n	9ca6 <lv_draw_img+0x16>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
    9da8:	462a      	mov	r2, r5
    9daa:	4631      	mov	r1, r6
    9dac:	a808      	add	r0, sp, #32
    9dae:	4b4f      	ldr	r3, [pc, #316]	; (9eec <lv_draw_img+0x25c>)
    9db0:	4798      	blx	r3
        if(union_ok == false) {
    9db2:	2800      	cmp	r0, #0
    9db4:	f43f af77 	beq.w	9ca6 <lv_draw_img+0x16>
    9db8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9dbc:	3301      	adds	r3, #1
    9dbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    9dc2:	1a9b      	subs	r3, r3, r2
    9dc4:	b21b      	sxth	r3, r3
    9dc6:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
    9dc8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9dcc:	4b49      	ldr	r3, [pc, #292]	; (9ef4 <lv_draw_img+0x264>)
    9dce:	4798      	blx	r3
    9dd0:	9002      	str	r0, [sp, #8]
    9dd2:	f10d 021f 	add.w	r2, sp, #31
    uint8_t * d8 = (uint8_t *)dst;
    9dd6:	ab0a      	add	r3, sp, #40	; 0x28
    while(len) {
    9dd8:	a80c      	add	r0, sp, #48	; 0x30
        *d8 = *s8;
    9dda:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9dde:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    9de2:	4283      	cmp	r3, r0
    9de4:	d1f9      	bne.n	9dda <lv_draw_img+0x14a>
        lv_area_set_height(&line, 1);
    9de6:	2101      	movs	r1, #1
    9de8:	a80a      	add	r0, sp, #40	; 0x28
    9dea:	4b43      	ldr	r3, [pc, #268]	; (9ef8 <lv_draw_img+0x268>)
    9dec:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
    9dee:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
    9df2:	f9b5 2000 	ldrsh.w	r2, [r5]
        int32_t y = mask_com.y1 - coords->y1;
    9df6:	f9bd a022 	ldrsh.w	sl, [sp, #34]	; 0x22
    9dfa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    9dfe:	ebaa 0101 	sub.w	r1, sl, r1
    9e02:	4608      	mov	r0, r1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    9e04:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
    9e08:	458a      	cmp	sl, r1
    9e0a:	dc55      	bgt.n	9eb8 <lv_draw_img+0x228>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    9e0c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 9eec <lv_draw_img+0x25c>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    9e10:	1a9b      	subs	r3, r3, r2
    9e12:	b21b      	sxth	r3, r3
    9e14:	9305      	str	r3, [sp, #20]
    9e16:	9507      	str	r5, [sp, #28]
    9e18:	9406      	str	r4, [sp, #24]
    9e1a:	4644      	mov	r4, r8
    9e1c:	4680      	mov	r8, r0
    9e1e:	e023      	b.n	9e68 <lv_draw_img+0x1d8>
    9e20:	9d07      	ldr	r5, [sp, #28]
                lv_img_decoder_close(&cdsc->dec_dsc);
    9e22:	9804      	ldr	r0, [sp, #16]
    9e24:	4b35      	ldr	r3, [pc, #212]	; (9efc <lv_draw_img+0x26c>)
    9e26:	4798      	blx	r3
                LV_LOG_WARN("Image draw can't read the line");
    9e28:	4b35      	ldr	r3, [pc, #212]	; (9f00 <lv_draw_img+0x270>)
    9e2a:	9300      	str	r3, [sp, #0]
    9e2c:	4b2e      	ldr	r3, [pc, #184]	; (9ee8 <lv_draw_img+0x258>)
    9e2e:	f44f 729a 	mov.w	r2, #308	; 0x134
    9e32:	4925      	ldr	r1, [pc, #148]	; (9ec8 <lv_draw_img+0x238>)
    9e34:	2002      	movs	r0, #2
    9e36:	4c25      	ldr	r4, [pc, #148]	; (9ecc <lv_draw_img+0x23c>)
    9e38:	47a0      	blx	r4
                _lv_mem_buf_release(buf);
    9e3a:	9802      	ldr	r0, [sp, #8]
    9e3c:	4b31      	ldr	r3, [pc, #196]	; (9f04 <lv_draw_img+0x274>)
    9e3e:	4798      	blx	r3
        LV_LOG_WARN("Image draw error");
    9e40:	4b28      	ldr	r3, [pc, #160]	; (9ee4 <lv_draw_img+0x254>)
    9e42:	9300      	str	r3, [sp, #0]
    9e44:	4b1f      	ldr	r3, [pc, #124]	; (9ec4 <lv_draw_img+0x234>)
    9e46:	2258      	movs	r2, #88	; 0x58
    9e48:	491f      	ldr	r1, [pc, #124]	; (9ec8 <lv_draw_img+0x238>)
    9e4a:	2002      	movs	r0, #2
    9e4c:	4c1f      	ldr	r4, [pc, #124]	; (9ecc <lv_draw_img+0x23c>)
    9e4e:	47a0      	blx	r4
        show_error(coords, mask, "No\ndata");
    9e50:	4a1f      	ldr	r2, [pc, #124]	; (9ed0 <lv_draw_img+0x240>)
    9e52:	4631      	mov	r1, r6
    9e54:	4628      	mov	r0, r5
    9e56:	4b1f      	ldr	r3, [pc, #124]	; (9ed4 <lv_draw_img+0x244>)
    9e58:	4798      	blx	r3
        return;
    9e5a:	e724      	b.n	9ca6 <lv_draw_img+0x16>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
    9e5c:	f10a 0a01 	add.w	sl, sl, #1
    9e60:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    9e64:	459a      	cmp	sl, r3
    9e66:	dc27      	bgt.n	9eb8 <lv_draw_img+0x228>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
    9e68:	aa0a      	add	r2, sp, #40	; 0x28
    9e6a:	4631      	mov	r1, r6
    9e6c:	a80c      	add	r0, sp, #48	; 0x30
    9e6e:	47d8      	blx	fp
            if(union_ok == false) continue;
    9e70:	2800      	cmp	r0, #0
    9e72:	d0f3      	beq.n	9e5c <lv_draw_img+0x1cc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
    9e74:	9704      	str	r7, [sp, #16]
    9e76:	9b02      	ldr	r3, [sp, #8]
    9e78:	9300      	str	r3, [sp, #0]
    9e7a:	9b03      	ldr	r3, [sp, #12]
    9e7c:	fa0f f288 	sxth.w	r2, r8
    9e80:	9905      	ldr	r1, [sp, #20]
    9e82:	4638      	mov	r0, r7
    9e84:	4d20      	ldr	r5, [pc, #128]	; (9f08 <lv_draw_img+0x278>)
    9e86:	47a8      	blx	r5
            if(read_res != LV_RES_OK) {
    9e88:	2801      	cmp	r0, #1
    9e8a:	d1c9      	bne.n	9e20 <lv_draw_img+0x190>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
    9e8c:	f8cd 9004 	str.w	r9, [sp, #4]
    9e90:	9400      	str	r4, [sp, #0]
    9e92:	9b06      	ldr	r3, [sp, #24]
    9e94:	9a02      	ldr	r2, [sp, #8]
    9e96:	a90c      	add	r1, sp, #48	; 0x30
    9e98:	a80a      	add	r0, sp, #40	; 0x28
    9e9a:	4d15      	ldr	r5, [pc, #84]	; (9ef0 <lv_draw_img+0x260>)
    9e9c:	47a8      	blx	r5
            line.y1++;
    9e9e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    9ea2:	3301      	adds	r3, #1
    9ea4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
    9ea8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    9eac:	3301      	adds	r3, #1
    9eae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
    9eb2:	f108 0801 	add.w	r8, r8, #1
    9eb6:	e7d1      	b.n	9e5c <lv_draw_img+0x1cc>
        _lv_mem_buf_release(buf);
    9eb8:	9802      	ldr	r0, [sp, #8]
    9eba:	4b12      	ldr	r3, [pc, #72]	; (9f04 <lv_draw_img+0x274>)
    9ebc:	4798      	blx	r3
    9ebe:	e6f2      	b.n	9ca6 <lv_draw_img+0x16>
    9ec0:	0001c1f0 	.word	0x0001c1f0
    9ec4:	0001c1a0 	.word	0x0001c1a0
    9ec8:	0001c1c0 	.word	0x0001c1c0
    9ecc:	00012805 	.word	0x00012805
    9ed0:	0001c208 	.word	0x0001c208
    9ed4:	00009b9d 	.word	0x00009b9d
    9ed8:	0000f7a9 	.word	0x0000f7a9
    9edc:	00009c5b 	.word	0x00009c5b
    9ee0:	00009c6f 	.word	0x00009c6f
    9ee4:	0001c210 	.word	0x0001c210
    9ee8:	0001c1ac 	.word	0x0001c1ac
    9eec:	00011ac1 	.word	0x00011ac1
    9ef0:	00009375 	.word	0x00009375
    9ef4:	00012ee5 	.word	0x00012ee5
    9ef8:	00011a9b 	.word	0x00011a9b
    9efc:	000104dd 	.word	0x000104dd
    9f00:	0001c224 	.word	0x0001c224
    9f04:	00012b19 	.word	0x00012b19
    9f08:	000104b9 	.word	0x000104b9
    9f0c:	0000f20d 	.word	0x0000f20d

00009f10 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
    9f10:	b158      	cbz	r0, 9f2a <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
    9f12:	7802      	ldrb	r2, [r0, #0]
    9f14:	f1a2 0320 	sub.w	r3, r2, #32
    9f18:	b2db      	uxtb	r3, r3
    9f1a:	2b5f      	cmp	r3, #95	; 0x5f
    9f1c:	d907      	bls.n	9f2e <lv_img_src_get_type+0x1e>
    else if(u8_p[0] >= 0x80) {
    9f1e:	b252      	sxtb	r2, r2
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
    9f20:	2a00      	cmp	r2, #0
    9f22:	bfb4      	ite	lt
    9f24:	2002      	movlt	r0, #2
    9f26:	2000      	movge	r0, #0
    9f28:	4770      	bx	lr
    if(src == NULL) return img_src_type;
    9f2a:	2003      	movs	r0, #3
    9f2c:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
    9f2e:	2001      	movs	r0, #1
}
    9f30:	4770      	bx	lr

00009f32 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
    9f32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    9f36:	b2db      	uxtb	r3, r3
    9f38:	2b09      	cmp	r3, #9
    9f3a:	d917      	bls.n	9f6c <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
    9f3c:	2860      	cmp	r0, #96	; 0x60
    9f3e:	bf84      	itt	hi
    9f40:	3820      	subhi	r0, #32
    9f42:	b2c0      	uxtbhi	r0, r0

        switch(hex) {
    9f44:	3841      	subs	r0, #65	; 0x41
    9f46:	2805      	cmp	r0, #5
    9f48:	d80e      	bhi.n	9f68 <hex_char_to_num+0x36>
    9f4a:	e8df f000 	tbb	[pc, r0]
    9f4e:	0311      	.short	0x0311
    9f50:	0b090705 	.word	0x0b090705
            case 'A':
                result = 10;
                break;
            case 'B':
                result = 11;
    9f54:	200b      	movs	r0, #11
    9f56:	4770      	bx	lr
                break;
            case 'C':
                result = 12;
    9f58:	200c      	movs	r0, #12
                break;
    9f5a:	4770      	bx	lr
            case 'D':
                result = 13;
    9f5c:	200d      	movs	r0, #13
                break;
    9f5e:	4770      	bx	lr
            case 'E':
                result = 14;
    9f60:	200e      	movs	r0, #14
                break;
    9f62:	4770      	bx	lr
            case 'F':
                result = 15;
    9f64:	200f      	movs	r0, #15
                break;
    9f66:	4770      	bx	lr
            default:
                result = 0;
    9f68:	2000      	movs	r0, #0
                break;
    9f6a:	4770      	bx	lr
        result = hex - '0';
    9f6c:	4618      	mov	r0, r3
    9f6e:	4770      	bx	lr
                result = 10;
    9f70:	200a      	movs	r0, #10
        }
    }

    return result;
}
    9f72:	4770      	bx	lr

00009f74 <lv_draw_label_dsc_init>:
{
    9f74:	b510      	push	{r4, lr}
    9f76:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
    9f78:	211c      	movs	r1, #28
    9f7a:	4b12      	ldr	r3, [pc, #72]	; (9fc4 <lv_draw_label_dsc_init+0x50>)
    9f7c:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
    9f7e:	23ff      	movs	r3, #255	; 0xff
    9f80:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    9f82:	7823      	ldrb	r3, [r4, #0]
    9f84:	f36f 0304 	bfc	r3, #0, #5
    9f88:	7023      	strb	r3, [r4, #0]
    9f8a:	8823      	ldrh	r3, [r4, #0]
    9f8c:	f36f 134a 	bfc	r3, #5, #6
    9f90:	8023      	strh	r3, [r4, #0]
    9f92:	0a1b      	lsrs	r3, r3, #8
    9f94:	f36f 03c7 	bfc	r3, #3, #5
    9f98:	7063      	strb	r3, [r4, #1]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
    9f9a:	4b0b      	ldr	r3, [pc, #44]	; (9fc8 <lv_draw_label_dsc_init+0x54>)
    9f9c:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
    9f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9fa2:	81e3      	strh	r3, [r4, #14]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    9fa4:	8223      	strh	r3, [r4, #16]
    dsc->sel_color = LV_COLOR_BLUE;
    9fa6:	78a3      	ldrb	r3, [r4, #2]
    9fa8:	f043 031f 	orr.w	r3, r3, #31
    9fac:	70a3      	strb	r3, [r4, #2]
    9fae:	8863      	ldrh	r3, [r4, #2]
    9fb0:	f36f 134a 	bfc	r3, #5, #6
    9fb4:	8063      	strh	r3, [r4, #2]
    9fb6:	0a1b      	lsrs	r3, r3, #8
    9fb8:	f36f 03c7 	bfc	r3, #3, #5
    9fbc:	70e3      	strb	r3, [r4, #3]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
    9fbe:	2300      	movs	r3, #0
    9fc0:	75a3      	strb	r3, [r4, #22]
    9fc2:	bd10      	pop	{r4, pc}
    9fc4:	000130df 	.word	0x000130df
    9fc8:	20000010 	.word	0x20000010

00009fcc <lv_draw_label>:
{
    9fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fd0:	b0d9      	sub	sp, #356	; 0x164
    9fd2:	9c62      	ldr	r4, [sp, #392]	; 0x188
    if(dsc->opa <= LV_OPA_MIN) return;
    9fd4:	7a15      	ldrb	r5, [r2, #8]
    9fd6:	2d05      	cmp	r5, #5
    9fd8:	d901      	bls.n	9fde <lv_draw_label+0x12>
    if(txt[0] == '\0')  return;
    9fda:	781d      	ldrb	r5, [r3, #0]
    9fdc:	b915      	cbnz	r5, 9fe4 <lv_draw_label+0x18>
}
    9fde:	b059      	add	sp, #356	; 0x164
    9fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fe4:	930a      	str	r3, [sp, #40]	; 0x28
    9fe6:	4693      	mov	fp, r2
    9fe8:	460a      	mov	r2, r1
    9fea:	910d      	str	r1, [sp, #52]	; 0x34
    9fec:	4605      	mov	r5, r0
    9fee:	9013      	str	r0, [sp, #76]	; 0x4c
    const lv_font_t * font = dsc->font;
    9ff0:	f8db 3004 	ldr.w	r3, [fp, #4]
    9ff4:	9305      	str	r3, [sp, #20]
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
    9ff6:	4601      	mov	r1, r0
    9ff8:	a856      	add	r0, sp, #344	; 0x158
    9ffa:	4baa      	ldr	r3, [pc, #680]	; (a2a4 <lv_draw_label+0x2d8>)
    9ffc:	4798      	blx	r3
    if(!clip_ok) return;
    9ffe:	2800      	cmp	r0, #0
    a000:	d0ed      	beq.n	9fde <lv_draw_label+0x12>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
    a002:	f89b 2017 	ldrb.w	r2, [fp, #23]
    a006:	f012 0f02 	tst.w	r2, #2
    a00a:	d121      	bne.n	a050 <lv_draw_label+0x84>
    a00c:	88ab      	ldrh	r3, [r5, #4]
    a00e:	3301      	adds	r3, #1
    a010:	882a      	ldrh	r2, [r5, #0]
    a012:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
    a014:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
    a016:	9a05      	ldr	r2, [sp, #20]
    a018:	f9b2 a008 	ldrsh.w	sl, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
    a01c:	f9bb 900a 	ldrsh.w	r9, [fp, #10]
    a020:	44d1      	add	r9, sl
    pos.x = coords->x1;
    a022:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a024:	f9b1 2000 	ldrsh.w	r2, [r1]
    a028:	921f      	str	r2, [sp, #124]	; 0x7c
    pos.y = coords->y1;
    a02a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
    a02e:	f9bb 2012 	ldrsh.w	r2, [fp, #18]
    a032:	921a      	str	r2, [sp, #104]	; 0x68
    y_ofs = dsc->ofs_y;
    a034:	f9bb 1014 	ldrsh.w	r1, [fp, #20]
    pos.y += y_ofs;
    a038:	1842      	adds	r2, r0, r1
    a03a:	b292      	uxth	r2, r2
    a03c:	b215      	sxth	r5, r2
    if(hint && y_ofs == 0 && coords->y1 < 0) {
    a03e:	2c00      	cmp	r4, #0
    a040:	d04a      	beq.n	a0d8 <lv_draw_label+0x10c>
    a042:	2900      	cmp	r1, #0
    a044:	d14b      	bne.n	a0de <lv_draw_label+0x112>
    a046:	2800      	cmp	r0, #0
    a048:	db14      	blt.n	a074 <lv_draw_label+0xa8>
    pos.y += y_ofs;
    a04a:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    a04c:	2600      	movs	r6, #0
    a04e:	e029      	b.n	a0a4 <lv_draw_label+0xd8>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
    a050:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    a054:	9202      	str	r2, [sp, #8]
    a056:	f647 4218 	movw	r2, #31768	; 0x7c18
    a05a:	9201      	str	r2, [sp, #4]
    a05c:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
    a060:	9200      	str	r2, [sp, #0]
    a062:	f8db 2004 	ldr.w	r2, [fp, #4]
    a066:	990a      	ldr	r1, [sp, #40]	; 0x28
    a068:	a83a      	add	r0, sp, #232	; 0xe8
    a06a:	4d8f      	ldr	r5, [pc, #572]	; (a2a8 <lv_draw_label+0x2dc>)
    a06c:	47a8      	blx	r5
        w = p.x;
    a06e:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
    a072:	e7d0      	b.n	a016 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
    a074:	68a1      	ldr	r1, [r4, #8]
    a076:	1a08      	subs	r0, r1, r0
    a078:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
    a07c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
    a080:	f5c9 7000 	rsb	r0, r9, #512	; 0x200
    a084:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
    a088:	dd05      	ble.n	a096 <lv_draw_label+0xca>
            hint->line_start = -1;
    a08a:	f04f 32ff 	mov.w	r2, #4294967295
    a08e:	6022      	str	r2, [r4, #0]
    pos.y += y_ofs;
    a090:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    a092:	2600      	movs	r6, #0
    a094:	e006      	b.n	a0a4 <lv_draw_label+0xd8>
        last_line_start = hint->line_start;
    a096:	6826      	ldr	r6, [r4, #0]
    if(hint && last_line_start >= 0) {
    a098:	2e00      	cmp	r6, #0
    a09a:	db23      	blt.n	a0e4 <lv_draw_label+0x118>
        pos.y += hint->y;
    a09c:	6861      	ldr	r1, [r4, #4]
    a09e:	440a      	add	r2, r1
    a0a0:	b212      	sxth	r2, r2
    a0a2:	920e      	str	r2, [sp, #56]	; 0x38
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    a0a4:	b21b      	sxth	r3, r3
    a0a6:	4619      	mov	r1, r3
    a0a8:	9310      	str	r3, [sp, #64]	; 0x40
    a0aa:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    a0ae:	f89b 3017 	ldrb.w	r3, [fp, #23]
    a0b2:	9300      	str	r3, [sp, #0]
    a0b4:	460b      	mov	r3, r1
    a0b6:	9905      	ldr	r1, [sp, #20]
    a0b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a0ba:	4430      	add	r0, r6
    a0bc:	4d7b      	ldr	r5, [pc, #492]	; (a2ac <lv_draw_label+0x2e0>)
    a0be:	47a8      	blx	r5
    a0c0:	1983      	adds	r3, r0, r6
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    a0c2:	462f      	mov	r7, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    a0c4:	f8df 81f8 	ldr.w	r8, [pc, #504]	; a2c0 <lv_draw_label+0x2f4>
    a0c8:	4631      	mov	r1, r6
    a0ca:	f8cd 9018 	str.w	r9, [sp, #24]
    a0ce:	46d1      	mov	r9, sl
    a0d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a0d2:	4626      	mov	r6, r4
    a0d4:	461c      	mov	r4, r3
    while(pos.y + line_height_font < mask->y1) {
    a0d6:	e00f      	b.n	a0f8 <lv_draw_label+0x12c>
    pos.y += y_ofs;
    a0d8:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    a0da:	2600      	movs	r6, #0
    a0dc:	e7e2      	b.n	a0a4 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    a0de:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    a0e0:	2600      	movs	r6, #0
    a0e2:	e7df      	b.n	a0a4 <lv_draw_label+0xd8>
    pos.y += y_ofs;
    a0e4:	950e      	str	r5, [sp, #56]	; 0x38
    uint32_t line_start     = 0;
    a0e6:	2600      	movs	r6, #0
    a0e8:	e7dc      	b.n	a0a4 <lv_draw_label+0xd8>
    a0ea:	4621      	mov	r1, r4
        if(txt[line_start] == '\0') return;
    a0ec:	f89a 3000 	ldrb.w	r3, [sl]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	f43f af74 	beq.w	9fde <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    a0f6:	4604      	mov	r4, r0
    while(pos.y + line_height_font < mask->y1) {
    a0f8:	eb05 0309 	add.w	r3, r5, r9
    a0fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a0fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    a102:	4293      	cmp	r3, r2
    a104:	da20      	bge.n	a148 <lv_draw_label+0x17c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    a106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a108:	eb03 0a04 	add.w	sl, r3, r4
    a10c:	f9bb 200c 	ldrsh.w	r2, [fp, #12]
    a110:	f89b 3017 	ldrb.w	r3, [fp, #23]
    a114:	9300      	str	r3, [sp, #0]
    a116:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a118:	9905      	ldr	r1, [sp, #20]
    a11a:	4650      	mov	r0, sl
    a11c:	47b8      	blx	r7
    a11e:	4420      	add	r0, r4
    a120:	9b06      	ldr	r3, [sp, #24]
    a122:	441d      	add	r5, r3
    a124:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
    a126:	2e00      	cmp	r6, #0
    a128:	d0df      	beq.n	a0ea <lv_draw_label+0x11e>
    a12a:	4545      	cmp	r5, r8
    a12c:	dbdd      	blt.n	a0ea <lv_draw_label+0x11e>
    a12e:	6833      	ldr	r3, [r6, #0]
    a130:	2b00      	cmp	r3, #0
    a132:	dada      	bge.n	a0ea <lv_draw_label+0x11e>
            hint->line_start = line_start;
    a134:	6034      	str	r4, [r6, #0]
            hint->y          = pos.y - coords->y1;
    a136:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a138:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    a13c:	1aeb      	subs	r3, r5, r3
    a13e:	6073      	str	r3, [r6, #4]
            hint->coord_y    = coords->y1;
    a140:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
    a144:	60b3      	str	r3, [r6, #8]
    a146:	e7d0      	b.n	a0ea <lv_draw_label+0x11e>
    a148:	460e      	mov	r6, r1
    a14a:	9407      	str	r4, [sp, #28]
    a14c:	f8dd 9018 	ldr.w	r9, [sp, #24]
    a150:	950e      	str	r5, [sp, #56]	; 0x38
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
    a152:	f89b 2017 	ldrb.w	r2, [fp, #23]
    a156:	f012 0f04 	tst.w	r2, #4
    a15a:	d12f      	bne.n	a1bc <lv_draw_label+0x1f0>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    a15c:	f012 0f08 	tst.w	r2, #8
    a160:	d145      	bne.n	a1ee <lv_draw_label+0x222>
    lv_opa_t opa = dsc->opa;
    a162:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a166:	930b      	str	r3, [sp, #44]	; 0x2c
    uint16_t sel_start = dsc->sel_start;
    a168:	f8bb 700e 	ldrh.w	r7, [fp, #14]
    uint16_t sel_end = dsc->sel_end;
    a16c:	f8bb 3010 	ldrh.w	r3, [fp, #16]
    a170:	4619      	mov	r1, r3
    a172:	9308      	str	r3, [sp, #32]
    if(sel_start > sel_end) {
    a174:	429f      	cmp	r7, r3
    a176:	d902      	bls.n	a17e <lv_draw_label+0x1b2>
    a178:	463b      	mov	r3, r7
        sel_start = sel_end;
    a17a:	460f      	mov	r7, r1
        sel_end = tmp;
    a17c:	9308      	str	r3, [sp, #32]
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
    a17e:	f89b 3018 	ldrb.w	r3, [fp, #24]
    a182:	f013 0f03 	tst.w	r3, #3
    a186:	d149      	bne.n	a21c <lv_draw_label+0x250>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
    a188:	a83d      	add	r0, sp, #244	; 0xf4
    a18a:	4b49      	ldr	r3, [pc, #292]	; (a2b0 <lv_draw_label+0x2e4>)
    a18c:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_color;
    a18e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
    a192:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    a196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a198:	2bfa      	cmp	r3, #250	; 0xfa
    a19a:	bf88      	it	hi
    a19c:	23ff      	movhi	r3, #255	; 0xff
    a19e:	9316      	str	r3, [sp, #88]	; 0x58
    a1a0:	fa1f f389 	uxth.w	r3, r9
    a1a4:	9317      	str	r3, [sp, #92]	; 0x5c
    a1a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a1aa:	9311      	str	r3, [sp, #68]	; 0x44
    while(txt[line_start] != '\0') {
    a1ac:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    uint16_t par_start = 0;
    a1ae:	2300      	movs	r3, #0
    a1b0:	9319      	str	r3, [sp, #100]	; 0x64
    a1b2:	46ba      	mov	sl, r7
    a1b4:	46d8      	mov	r8, fp
    a1b6:	46b3      	mov	fp, r6
    while(txt[line_start] != '\0') {
    a1b8:	f000 bdd3 	b.w	ad62 <lv_draw_label+0xd96>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    a1bc:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    a1c0:	1ba1      	subs	r1, r4, r6
    a1c2:	9200      	str	r2, [sp, #0]
    a1c4:	9a05      	ldr	r2, [sp, #20]
    a1c6:	b289      	uxth	r1, r1
    a1c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1ca:	4430      	add	r0, r6
    a1cc:	4c39      	ldr	r4, [pc, #228]	; (a2b4 <lv_draw_label+0x2e8>)
    a1ce:	47a0      	blx	r4
    a1d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a1d2:	8893      	ldrh	r3, [r2, #4]
    a1d4:	3301      	adds	r3, #1
    a1d6:	8812      	ldrh	r2, [r2, #0]
    a1d8:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
    a1da:	b21b      	sxth	r3, r3
    a1dc:	1a18      	subs	r0, r3, r0
    a1de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    a1e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a1e4:	eb03 0360 	add.w	r3, r3, r0, asr #1
    a1e8:	b21b      	sxth	r3, r3
    a1ea:	931f      	str	r3, [sp, #124]	; 0x7c
    a1ec:	e7b9      	b.n	a162 <lv_draw_label+0x196>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    a1ee:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
    a1f2:	9907      	ldr	r1, [sp, #28]
    a1f4:	1b89      	subs	r1, r1, r6
    a1f6:	9200      	str	r2, [sp, #0]
    a1f8:	9a05      	ldr	r2, [sp, #20]
    a1fa:	b289      	uxth	r1, r1
    a1fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1fe:	4430      	add	r0, r6
    a200:	4c2c      	ldr	r4, [pc, #176]	; (a2b4 <lv_draw_label+0x2e8>)
    a202:	47a0      	blx	r4
    a204:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a206:	8893      	ldrh	r3, [r2, #4]
    a208:	3301      	adds	r3, #1
    a20a:	8812      	ldrh	r2, [r2, #0]
    a20c:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
    a20e:	b21b      	sxth	r3, r3
    a210:	1a1b      	subs	r3, r3, r0
    a212:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a214:	4413      	add	r3, r2
    a216:	b21b      	sxth	r3, r3
    a218:	931f      	str	r3, [sp, #124]	; 0x7c
    a21a:	e7a2      	b.n	a162 <lv_draw_label+0x196>
        lv_draw_line_dsc_init(&line_dsc);
    a21c:	a853      	add	r0, sp, #332	; 0x14c
    a21e:	4b26      	ldr	r3, [pc, #152]	; (a2b8 <lv_draw_label+0x2ec>)
    a220:	4798      	blx	r3
        line_dsc.color = dsc->color;
    a222:	f8bb 3000 	ldrh.w	r3, [fp]
    a226:	f8ad 314c 	strh.w	r3, [sp, #332]	; 0x14c
        line_dsc.width = (dsc->font->line_height + 5) / 10;    /*+5 for rounding*/
    a22a:	f8db 3004 	ldr.w	r3, [fp, #4]
    a22e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    a232:	3305      	adds	r3, #5
    a234:	4a21      	ldr	r2, [pc, #132]	; (a2bc <lv_draw_label+0x2f0>)
    a236:	fb82 1203 	smull	r1, r2, r2, r3
    a23a:	17db      	asrs	r3, r3, #31
    a23c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    a240:	f8ad 314e 	strh.w	r3, [sp, #334]	; 0x14e
        line_dsc.opa = dsc->opa;
    a244:	f89b 3008 	ldrb.w	r3, [fp, #8]
    a248:	f88d 3154 	strb.w	r3, [sp, #340]	; 0x154
        line_dsc.blend_mode = dsc->blend_mode;
    a24c:	f89d 3155 	ldrb.w	r3, [sp, #341]	; 0x155
    a250:	f89b 2019 	ldrb.w	r2, [fp, #25]
    a254:	f362 0301 	bfi	r3, r2, #0, #2
    a258:	f88d 3155 	strb.w	r3, [sp, #341]	; 0x155
    a25c:	e794      	b.n	a188 <lv_draw_label+0x1bc>
            uint16_t logical_char_pos = 0;
    a25e:	2500      	movs	r5, #0
    a260:	e0aa      	b.n	a3b8 <lv_draw_label+0x3ec>
    a262:	2500      	movs	r5, #0
    a264:	e0a8      	b.n	a3b8 <lv_draw_label+0x3ec>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
    a266:	9b06      	ldr	r3, [sp, #24]
    a268:	b92b      	cbnz	r3, a276 <lv_draw_label+0x2aa>
                        par_start = i;
    a26a:	f8bd 3148 	ldrh.w	r3, [sp, #328]	; 0x148
    a26e:	9319      	str	r3, [sp, #100]	; 0x64
                        cmd_state = CMD_STATE_PAR;
    a270:	2301      	movs	r3, #1
    a272:	9306      	str	r3, [sp, #24]
                        continue;
    a274:	e08a      	b.n	a38c <lv_draw_label+0x3c0>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
    a276:	9b06      	ldr	r3, [sp, #24]
    a278:	2b01      	cmp	r3, #1
    a27a:	f000 85f1 	beq.w	ae60 <lv_draw_label+0xe94>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
    a27e:	2b02      	cmp	r3, #2
    a280:	f000 8533 	beq.w	acea <lv_draw_label+0xd1e>
            lv_color_t color = dsc->color;
    a284:	f8b8 6000 	ldrh.w	r6, [r8]
    a288:	e0b5      	b.n	a3f6 <lv_draw_label+0x42a>
                    if(letter == ' ') {
    a28a:	2c20      	cmp	r4, #32
    a28c:	d17e      	bne.n	a38c <lv_draw_label+0x3c0>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
    a28e:	9b52      	ldr	r3, [sp, #328]	; 0x148
    a290:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a292:	1a9b      	subs	r3, r3, r2
    a294:	2b07      	cmp	r3, #7
    a296:	d015      	beq.n	a2c4 <lv_draw_label+0x2f8>
                            recolor.full = dsc->color.full;
    a298:	f8b8 3000 	ldrh.w	r3, [r8]
    a29c:	930c      	str	r3, [sp, #48]	; 0x30
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    a29e:	2302      	movs	r3, #2
    a2a0:	9306      	str	r3, [sp, #24]
    a2a2:	e073      	b.n	a38c <lv_draw_label+0x3c0>
    a2a4:	00011ac1 	.word	0x00011ac1
    a2a8:	00014625 	.word	0x00014625
    a2ac:	00014359 	.word	0x00014359
    a2b0:	0000c811 	.word	0x0000c811
    a2b4:	00014585 	.word	0x00014585
    a2b8:	0000ae89 	.word	0x0000ae89
    a2bc:	66666667 	.word	0x66666667
    a2c0:	fffffc00 	.word	0xfffffc00
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
    a2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2c6:	1898      	adds	r0, r3, r2
    a2c8:	1e43      	subs	r3, r0, #1
    a2ca:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
    a2cc:	aa3a      	add	r2, sp, #232	; 0xe8
        *d8 = *s8;
    a2ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    a2d2:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    a2d6:	4283      	cmp	r3, r0
    a2d8:	d1f9      	bne.n	a2ce <lv_draw_label+0x302>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
    a2da:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
    a2de:	4c8c      	ldr	r4, [pc, #560]	; (a510 <lv_draw_label+0x544>)
    a2e0:	47a0      	blx	r4
    a2e2:	4605      	mov	r5, r0
    a2e4:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
    a2e8:	47a0      	blx	r4
    a2ea:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
    a2ee:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
    a2f2:	47a0      	blx	r4
    a2f4:	4606      	mov	r6, r0
    a2f6:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
    a2fa:	47a0      	blx	r4
    a2fc:	eb00 1606 	add.w	r6, r0, r6, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
    a300:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
    a304:	47a0      	blx	r4
    a306:	4607      	mov	r7, r0
    a308:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
    a30c:	47a0      	blx	r4
    a30e:	eb00 1307 	add.w	r3, r0, r7, lsl #4
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    a312:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    a316:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a318:	f363 0204 	bfi	r2, r3, #0, #5
    a31c:	4613      	mov	r3, r2
    a31e:	f3c6 0685 	ubfx	r6, r6, #2, #6
    a322:	f366 134a 	bfi	r3, r6, #5, #6
    a326:	f3c5 05c4 	ubfx	r5, r5, #3, #5
    a32a:	f365 23cf 	bfi	r3, r5, #11, #5
    a32e:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
    a332:	b29b      	uxth	r3, r3
    a334:	930c      	str	r3, [sp, #48]	; 0x30
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
    a336:	2302      	movs	r3, #2
    a338:	9306      	str	r3, [sp, #24]
    a33a:	e027      	b.n	a38c <lv_draw_label+0x3c0>
                    sel_coords.x1 = pos.x;
    a33c:	f8ad a0e8 	strh.w	sl, [sp, #232]	; 0xe8
                    sel_coords.y1 = pos.y;
    a340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a342:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
    a346:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    a34a:	3b01      	subs	r3, #1
    a34c:	4453      	add	r3, sl
    a34e:	4403      	add	r3, r0
    a350:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
                    sel_coords.y2 = pos.y + line_height - 1;
    a354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a356:	3b01      	subs	r3, #1
    a358:	4413      	add	r3, r2
    a35a:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
    a35e:	aa3d      	add	r2, sp, #244	; 0xf4
    a360:	990d      	ldr	r1, [sp, #52]	; 0x34
    a362:	a83a      	add	r0, sp, #232	; 0xe8
    a364:	4b6b      	ldr	r3, [pc, #428]	; (a514 <lv_draw_label+0x548>)
    a366:	4798      	blx	r3
    a368:	e056      	b.n	a418 <lv_draw_label+0x44c>
        LV_LOG_WARN("lv_draw_letter: font is NULL");
    a36a:	4b6b      	ldr	r3, [pc, #428]	; (a518 <lv_draw_label+0x54c>)
    a36c:	9300      	str	r3, [sp, #0]
    a36e:	4b6b      	ldr	r3, [pc, #428]	; (a51c <lv_draw_label+0x550>)
    a370:	f240 1297 	movw	r2, #407	; 0x197
    a374:	496a      	ldr	r1, [pc, #424]	; (a520 <lv_draw_label+0x554>)
    a376:	2002      	movs	r0, #2
    a378:	4c6a      	ldr	r4, [pc, #424]	; (a524 <lv_draw_label+0x558>)
    a37a:	47a0      	blx	r4
            if(letter_w > 0) {
    a37c:	2f00      	cmp	r7, #0
    a37e:	dd05      	ble.n	a38c <lv_draw_label+0x3c0>
                pos.x += letter_w + dsc->letter_space;
    a380:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    a384:	4453      	add	r3, sl
    a386:	443b      	add	r3, r7
    a388:	fa0f fa83 	sxth.w	sl, r3
        while(i < line_end - line_start) {
    a38c:	9952      	ldr	r1, [sp, #328]	; 0x148
    a38e:	9b07      	ldr	r3, [sp, #28]
    a390:	eba3 030b 	sub.w	r3, r3, fp
    a394:	428b      	cmp	r3, r1
    a396:	f240 84ac 	bls.w	acf2 <lv_draw_label+0xd26>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    a39a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a39e:	4599      	cmp	r9, r3
    a3a0:	f43f af5d 	beq.w	a25e <lv_draw_label+0x292>
    a3a4:	9a08      	ldr	r2, [sp, #32]
    a3a6:	429a      	cmp	r2, r3
    a3a8:	f43f af5b 	beq.w	a262 <lv_draw_label+0x296>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
    a3ac:	4459      	add	r1, fp
    a3ae:	980a      	ldr	r0, [sp, #40]	; 0x28
    a3b0:	4b5d      	ldr	r3, [pc, #372]	; (a528 <lv_draw_label+0x55c>)
    a3b2:	681b      	ldr	r3, [r3, #0]
    a3b4:	4798      	blx	r3
    a3b6:	b285      	uxth	r5, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
    a3b8:	4e5c      	ldr	r6, [pc, #368]	; (a52c <lv_draw_label+0x560>)
    a3ba:	6833      	ldr	r3, [r6, #0]
    a3bc:	a952      	add	r1, sp, #328	; 0x148
    a3be:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a3c0:	4638      	mov	r0, r7
    a3c2:	4798      	blx	r3
    a3c4:	4604      	mov	r4, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
    a3c6:	6833      	ldr	r3, [r6, #0]
    a3c8:	2100      	movs	r1, #0
    a3ca:	9852      	ldr	r0, [sp, #328]	; 0x148
    a3cc:	4438      	add	r0, r7
    a3ce:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
    a3d0:	f898 3017 	ldrb.w	r3, [r8, #23]
    a3d4:	f013 0f01 	tst.w	r3, #1
    a3d8:	d006      	beq.n	a3e8 <lv_draw_label+0x41c>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
    a3da:	2c23      	cmp	r4, #35	; 0x23
    a3dc:	f43f af43 	beq.w	a266 <lv_draw_label+0x29a>
                if(cmd_state == CMD_STATE_PAR) {
    a3e0:	9b06      	ldr	r3, [sp, #24]
    a3e2:	2b01      	cmp	r3, #1
    a3e4:	f43f af51 	beq.w	a28a <lv_draw_label+0x2be>
            lv_color_t color = dsc->color;
    a3e8:	f8b8 6000 	ldrh.w	r6, [r8]
            if(cmd_state == CMD_STATE_IN) color = recolor;
    a3ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a3ee:	9a06      	ldr	r2, [sp, #24]
    a3f0:	2a02      	cmp	r2, #2
    a3f2:	bf08      	it	eq
    a3f4:	461e      	moveq	r6, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
    a3f6:	4602      	mov	r2, r0
    a3f8:	4621      	mov	r1, r4
    a3fa:	9805      	ldr	r0, [sp, #20]
    a3fc:	4b4c      	ldr	r3, [pc, #304]	; (a530 <lv_draw_label+0x564>)
    a3fe:	4798      	blx	r3
    a400:	4607      	mov	r7, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
    a402:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a406:	4599      	cmp	r9, r3
    a408:	d006      	beq.n	a418 <lv_draw_label+0x44c>
    a40a:	9908      	ldr	r1, [sp, #32]
    a40c:	4299      	cmp	r1, r3
    a40e:	d003      	beq.n	a418 <lv_draw_label+0x44c>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
    a410:	45a9      	cmp	r9, r5
    a412:	d801      	bhi.n	a418 <lv_draw_label+0x44c>
    a414:	42a9      	cmp	r1, r5
    a416:	d891      	bhi.n	a33c <lv_draw_label+0x370>
    if(opa < LV_OPA_MIN) return;
    a418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a41a:	2b04      	cmp	r3, #4
    a41c:	d9ae      	bls.n	a37c <lv_draw_label+0x3b0>
    if(font_p == NULL) {
    a41e:	9b05      	ldr	r3, [sp, #20]
    a420:	2b00      	cmp	r3, #0
    a422:	d0a2      	beq.n	a36a <lv_draw_label+0x39e>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
    a424:	f898 3019 	ldrb.w	r3, [r8, #25]
    a428:	930f      	str	r3, [sp, #60]	; 0x3c
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
    a42a:	2300      	movs	r3, #0
    a42c:	4622      	mov	r2, r4
    a42e:	a93a      	add	r1, sp, #232	; 0xe8
    a430:	9805      	ldr	r0, [sp, #20]
    a432:	4d40      	ldr	r5, [pc, #256]	; (a534 <lv_draw_label+0x568>)
    a434:	47a8      	blx	r5
    if(g_ret == false)  {
    a436:	b958      	cbnz	r0, a450 <lv_draw_label+0x484>
        if(letter >= 0x20) {
    a438:	2c1f      	cmp	r4, #31
    a43a:	d99f      	bls.n	a37c <lv_draw_label+0x3b0>
            LV_LOG_WARN("lv_draw_letter: glyph dsc. not found");
    a43c:	4b3e      	ldr	r3, [pc, #248]	; (a538 <lv_draw_label+0x56c>)
    a43e:	9300      	str	r3, [sp, #0]
    a440:	4b36      	ldr	r3, [pc, #216]	; (a51c <lv_draw_label+0x550>)
    a442:	f240 12a1 	movw	r2, #417	; 0x1a1
    a446:	4936      	ldr	r1, [pc, #216]	; (a520 <lv_draw_label+0x554>)
    a448:	2002      	movs	r0, #2
    a44a:	4c36      	ldr	r4, [pc, #216]	; (a524 <lv_draw_label+0x558>)
    a44c:	47a0      	blx	r4
    a44e:	e795      	b.n	a37c <lv_draw_label+0x3b0>
    if((g.box_h == 0) && (g.box_w == 0)) return;
    a450:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    a454:	b91a      	cbnz	r2, a45e <lv_draw_label+0x492>
    a456:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    a45a:	2b00      	cmp	r3, #0
    a45c:	d08e      	beq.n	a37c <lv_draw_label+0x3b0>
    int32_t pos_x = pos_p->x + g.ofs_x;
    a45e:	f9bd 50ee 	ldrsh.w	r5, [sp, #238]	; 0xee
    a462:	4455      	add	r5, sl
    if(pos_x + g.box_w < clip_area->x1 ||
    a464:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    a468:	442b      	add	r3, r5
    a46a:	980d      	ldr	r0, [sp, #52]	; 0x34
    a46c:	f9b0 1000 	ldrsh.w	r1, [r0]
    a470:	428b      	cmp	r3, r1
    a472:	db83      	blt.n	a37c <lv_draw_label+0x3b0>
       pos_x > clip_area->x2 ||
    a474:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
    a478:	429d      	cmp	r5, r3
    a47a:	f73f af7f 	bgt.w	a37c <lv_draw_label+0x3b0>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
    a47e:	9b05      	ldr	r3, [sp, #20]
    a480:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
    a484:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    a488:	1acb      	subs	r3, r1, r3
    a48a:	990e      	ldr	r1, [sp, #56]	; 0x38
    a48c:	440b      	add	r3, r1
    a48e:	1a99      	subs	r1, r3, r2
    a490:	f9bd 30f0 	ldrsh.w	r3, [sp, #240]	; 0xf0
    a494:	1acb      	subs	r3, r1, r3
       pos_y + g.box_h < clip_area->y1 ||
    a496:	9315      	str	r3, [sp, #84]	; 0x54
    a498:	441a      	add	r2, r3
    a49a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
       pos_x > clip_area->x2 ||
    a49e:	429a      	cmp	r2, r3
    a4a0:	f6ff af6c 	blt.w	a37c <lv_draw_label+0x3b0>
       pos_y > clip_area->y2)  {
    a4a4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
       pos_y + g.box_h < clip_area->y1 ||
    a4a8:	9915      	ldr	r1, [sp, #84]	; 0x54
    a4aa:	4299      	cmp	r1, r3
    a4ac:	f73f af66 	bgt.w	a37c <lv_draw_label+0x3b0>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
    a4b0:	4621      	mov	r1, r4
    a4b2:	9805      	ldr	r0, [sp, #20]
    a4b4:	4b21      	ldr	r3, [pc, #132]	; (a53c <lv_draw_label+0x570>)
    a4b6:	4798      	blx	r3
    if(map_p == NULL) {
    a4b8:	4686      	mov	lr, r0
    a4ba:	b1f0      	cbz	r0, a4fa <lv_draw_label+0x52e>
    if(font_p->subpx) {
    a4bc:	9b05      	ldr	r3, [sp, #20]
    a4be:	7b1b      	ldrb	r3, [r3, #12]
    a4c0:	f013 0f03 	tst.w	r3, #3
    a4c4:	f000 825e 	beq.w	a984 <lv_draw_label+0x9b8>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    a4c8:	b22b      	sxth	r3, r5
    a4ca:	9318      	str	r3, [sp, #96]	; 0x60
    a4cc:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
    a4d0:	931d      	str	r3, [sp, #116]	; 0x74
    uint32_t bpp = g->bpp;
    a4d2:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    a4d6:	9312      	str	r3, [sp, #72]	; 0x48
    if(bpp == 3) bpp = 4;
    a4d8:	2b03      	cmp	r3, #3
    a4da:	f000 80ff 	beq.w	a6dc <lv_draw_label+0x710>
    switch(bpp) {
    a4de:	3b01      	subs	r3, #1
    a4e0:	2b07      	cmp	r3, #7
    a4e2:	f200 8102 	bhi.w	a6ea <lv_draw_label+0x71e>
    a4e6:	e8df f013 	tbh	[pc, r3, lsl #1]
    a4ea:	010a      	.short	0x010a
    a4ec:	0100002d 	.word	0x0100002d
    a4f0:	010000fb 	.word	0x010000fb
    a4f4:	01000100 	.word	0x01000100
    a4f8:	0111      	.short	0x0111
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
    a4fa:	4b11      	ldr	r3, [pc, #68]	; (a540 <lv_draw_label+0x574>)
    a4fc:	9300      	str	r3, [sp, #0]
    a4fe:	4b07      	ldr	r3, [pc, #28]	; (a51c <lv_draw_label+0x550>)
    a500:	f240 12b7 	movw	r2, #439	; 0x1b7
    a504:	4906      	ldr	r1, [pc, #24]	; (a520 <lv_draw_label+0x554>)
    a506:	2002      	movs	r0, #2
    a508:	4c06      	ldr	r4, [pc, #24]	; (a524 <lv_draw_label+0x558>)
    a50a:	47a0      	blx	r4
    a50c:	e736      	b.n	a37c <lv_draw_label+0x3b0>
    a50e:	bf00      	nop
    a510:	00009f33 	.word	0x00009f33
    a514:	0000c8d9 	.word	0x0000c8d9
    a518:	0001c3cc 	.word	0x0001c3cc
    a51c:	0001c35c 	.word	0x0001c35c
    a520:	0001c39c 	.word	0x0001c39c
    a524:	00012805 	.word	0x00012805
    a528:	20000064 	.word	0x20000064
    a52c:	20000058 	.word	0x20000058
    a530:	00010609 	.word	0x00010609
    a534:	00010601 	.word	0x00010601
    a538:	0001c3ec 	.word	0x0001c3ec
    a53c:	000105f9 	.word	0x000105f9
    a540:	0001c414 	.word	0x0001c414
            bitmask_init  = 0xC0;
    a544:	23c0      	movs	r3, #192	; 0xc0
    a546:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp2_opa_table;
    a548:	4bac      	ldr	r3, [pc, #688]	; (a7fc <lv_draw_label+0x830>)
    a54a:	9320      	str	r3, [sp, #128]	; 0x80
    int32_t box_w = g->box_w;
    a54c:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    a550:	931e      	str	r3, [sp, #120]	; 0x78
    int32_t box_h = g->box_h;
    a552:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    a556:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a558:	fb02 f203 	mul.w	r2, r2, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
    a55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a55e:	f9b3 3000 	ldrsh.w	r3, [r3]
    a562:	9c18      	ldr	r4, [sp, #96]	; 0x60
    a564:	429c      	cmp	r4, r3
    a566:	bfba      	itte	lt
    a568:	1b1b      	sublt	r3, r3, r4
    a56a:	eb03 0343 	addlt.w	r3, r3, r3, lsl #1
    a56e:	2300      	movge	r3, #0
    a570:	9327      	str	r3, [sp, #156]	; 0x9c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
    a572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a574:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    a578:	981e      	ldr	r0, [sp, #120]	; 0x78
    a57a:	4604      	mov	r4, r0
    a57c:	48a0      	ldr	r0, [pc, #640]	; (a800 <lv_draw_label+0x834>)
    a57e:	fb80 4004 	smull	r4, r0, r0, r4
    a582:	9c18      	ldr	r4, [sp, #96]	; 0x60
    a584:	4420      	add	r0, r4
    a586:	4298      	cmp	r0, r3
    a588:	bfc3      	ittte	gt
    a58a:	1b1b      	subgt	r3, r3, r4
    a58c:	3301      	addgt	r3, #1
    a58e:	eb03 0343 	addgt.w	r3, r3, r3, lsl #1
    a592:	9b1e      	ldrle	r3, [sp, #120]	; 0x78
    a594:	9314      	str	r3, [sp, #80]	; 0x50
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    a596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a598:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    a59c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    a59e:	429c      	cmp	r4, r3
    a5a0:	bfb4      	ite	lt
    a5a2:	1b1b      	sublt	r3, r3, r4
    a5a4:	2300      	movge	r3, #0
    a5a6:	9325      	str	r3, [sp, #148]	; 0x94
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    a5a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    a5ae:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    a5b0:	1908      	adds	r0, r1, r4
    a5b2:	4298      	cmp	r0, r3
    a5b4:	f340 80b1 	ble.w	a71a <lv_draw_label+0x74e>
    a5b8:	1b1b      	subs	r3, r3, r4
    a5ba:	3301      	adds	r3, #1
    a5bc:	9328      	str	r3, [sp, #160]	; 0xa0
    a5be:	f006 031f 	and.w	r3, r6, #31
    a5c2:	9322      	str	r3, [sp, #136]	; 0x88
    a5c4:	f3c6 1345 	ubfx	r3, r6, #5, #6
    a5c8:	9324      	str	r3, [sp, #144]	; 0x90
    a5ca:	f3c6 23c4 	ubfx	r3, r6, #11, #5
    a5ce:	9323      	str	r3, [sp, #140]	; 0x8c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    a5d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a5d2:	4618      	mov	r0, r3
    a5d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a5d6:	fb00 f303 	mul.w	r3, r0, r3
    a5da:	9825      	ldr	r0, [sp, #148]	; 0x94
    a5dc:	fb00 3202 	mla	r2, r0, r2, r3
    map_p += bit_ofs >> 3;
    a5e0:	eb0e 06e2 	add.w	r6, lr, r2, asr #3
    a5e4:	9631      	str	r6, [sp, #196]	; 0xc4
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    a5e6:	f002 0607 	and.w	r6, r2, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
    a5ea:	981e      	ldr	r0, [sp, #120]	; 0x78
    a5ec:	fb01 f100 	mul.w	r1, r1, r0
    a5f0:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
    a5f4:	bfa8      	it	ge
    a5f6:	f44f 71f0 	movge.w	r1, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    a5fa:	9129      	str	r1, [sp, #164]	; 0xa4
    a5fc:	4608      	mov	r0, r1
    a5fe:	4c81      	ldr	r4, [pc, #516]	; (a804 <lv_draw_label+0x838>)
    a600:	47a0      	blx	r4
    a602:	9021      	str	r0, [sp, #132]	; 0x84
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
    a604:	9929      	ldr	r1, [sp, #164]	; 0xa4
    a606:	0048      	lsls	r0, r1, #1
    a608:	47a0      	blx	r4
    a60a:	9030      	str	r0, [sp, #192]	; 0xc0
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    a60c:	4b7e      	ldr	r3, [pc, #504]	; (a808 <lv_draw_label+0x83c>)
    a60e:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    a610:	4b7e      	ldr	r3, [pc, #504]	; (a80c <lv_draw_label+0x840>)
    a612:	4798      	blx	r3
    a614:	f9b0 4010 	ldrsh.w	r4, [r0, #16]
    a618:	8a83      	ldrh	r3, [r0, #20]
    a61a:	3301      	adds	r3, #1
    a61c:	1b1b      	subs	r3, r3, r4
    int32_t vdb_width     = lv_area_get_width(&vdb->area);
    a61e:	b219      	sxth	r1, r3
    a620:	9126      	str	r1, [sp, #152]	; 0x98
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
    a622:	6881      	ldr	r1, [r0, #8]
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    a624:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    a626:	4a76      	ldr	r2, [pc, #472]	; (a800 <lv_draw_label+0x834>)
    a628:	fb82 e203 	smull	lr, r2, r2, r3
    a62c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
    a630:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    a634:	981d      	ldr	r0, [sp, #116]	; 0x74
    a636:	1ac3      	subs	r3, r0, r3
    a638:	9826      	ldr	r0, [sp, #152]	; 0x98
    a63a:	4686      	mov	lr, r0
    a63c:	9818      	ldr	r0, [sp, #96]	; 0x60
    a63e:	fb0e 0303 	mla	r3, lr, r3, r0
    a642:	1b1b      	subs	r3, r3, r4
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
    a644:	9c25      	ldr	r4, [sp, #148]	; 0x94
    a646:	fb0e 2004 	mla	r0, lr, r4, r2
    a64a:	4403      	add	r3, r0
    a64c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    a650:	9118      	str	r1, [sp, #96]	; 0x60
    map_area.x1 = col_start / 3 + pos_x;
    a652:	b2ad      	uxth	r5, r5
    a654:	442a      	add	r2, r5
    a656:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    map_area.x2 = col_end / 3  + pos_x - 1;
    a65a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a65c:	4696      	mov	lr, r2
    a65e:	4968      	ldr	r1, [pc, #416]	; (a800 <lv_draw_label+0x834>)
    a660:	fb81 e30e 	smull	lr, r3, r1, lr
    a664:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    a668:	3d01      	subs	r5, #1
    a66a:	442b      	add	r3, r5
    a66c:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    map_area.y1 = row_start + pos_y;
    a670:	9d15      	ldr	r5, [sp, #84]	; 0x54
    a672:	4425      	add	r5, r4
    a674:	b22b      	sxth	r3, r5
    a676:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    map_area.y2 = map_area.y1;
    a67a:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    a67e:	4b64      	ldr	r3, [pc, #400]	; (a810 <lv_draw_label+0x844>)
    a680:	4798      	blx	r3
    a682:	902a      	str	r0, [sp, #168]	; 0xa8
    for(row = row_start ; row < row_end; row++) {
    a684:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    a686:	42ac      	cmp	r4, r5
    a688:	f280 8161 	bge.w	a94e <lv_draw_label+0x982>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    a68c:	9914      	ldr	r1, [sp, #80]	; 0x50
    a68e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    a690:	1a8c      	subs	r4, r1, r2
    a692:	942b      	str	r4, [sp, #172]	; 0xac
        col_bit += ((box_w - col_end) + col_start) * bpp;
    a694:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    a696:	1a6b      	subs	r3, r5, r1
    a698:	4413      	add	r3, r2
    a69a:	9912      	ldr	r1, [sp, #72]	; 0x48
    a69c:	fb01 f303 	mul.w	r3, r1, r3
    a6a0:	932c      	str	r3, [sp, #176]	; 0xb0
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    a6a2:	4a57      	ldr	r2, [pc, #348]	; (a800 <lv_draw_label+0x834>)
    a6a4:	fb82 2304 	smull	r2, r3, r2, r4
    a6a8:	ebc3 73e4 	rsb	r3, r3, r4, asr #31
    a6ac:	9826      	ldr	r0, [sp, #152]	; 0x98
    a6ae:	4403      	add	r3, r0
    a6b0:	005b      	lsls	r3, r3, #1
    a6b2:	932d      	str	r3, [sp, #180]	; 0xb4
    a6b4:	2300      	movs	r3, #0
    a6b6:	9326      	str	r3, [sp, #152]	; 0x98
                col_bit = 0;
    a6b8:	9315      	str	r3, [sp, #84]	; 0x54
    a6ba:	f8cd b0c8 	str.w	fp, [sp, #200]	; 0xc8
    a6be:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
    a6c2:	9734      	str	r7, [sp, #208]	; 0xd0
    a6c4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    a6c8:	f8dd b0c4 	ldr.w	fp, [sp, #196]	; 0xc4
    a6cc:	f8cd a0c4 	str.w	sl, [sp, #196]	; 0xc4
    a6d0:	f8dd a0c0 	ldr.w	sl, [sp, #192]	; 0xc0
    a6d4:	f8cd 80d4 	str.w	r8, [sp, #212]	; 0xd4
    a6d8:	4688      	mov	r8, r1
    a6da:	e0ea      	b.n	a8b2 <lv_draw_label+0x8e6>
    if(bpp == 3) bpp = 4;
    a6dc:	2304      	movs	r3, #4
    a6de:	9312      	str	r3, [sp, #72]	; 0x48
            bitmask_init  = 0xF0;
    a6e0:	23f0      	movs	r3, #240	; 0xf0
    a6e2:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp4_opa_table;
    a6e4:	4b4b      	ldr	r3, [pc, #300]	; (a814 <lv_draw_label+0x848>)
    a6e6:	9320      	str	r3, [sp, #128]	; 0x80
    a6e8:	e730      	b.n	a54c <lv_draw_label+0x580>
            LV_LOG_WARN("lv_draw_letter: invalid bpp not found");
    a6ea:	4b4b      	ldr	r3, [pc, #300]	; (a818 <lv_draw_label+0x84c>)
    a6ec:	9300      	str	r3, [sp, #0]
    a6ee:	4b4b      	ldr	r3, [pc, #300]	; (a81c <lv_draw_label+0x850>)
    a6f0:	f240 227a 	movw	r2, #634	; 0x27a
    a6f4:	494a      	ldr	r1, [pc, #296]	; (a820 <lv_draw_label+0x854>)
    a6f6:	2002      	movs	r0, #2
    a6f8:	4c4a      	ldr	r4, [pc, #296]	; (a824 <lv_draw_label+0x858>)
    a6fa:	47a0      	blx	r4
    a6fc:	e63e      	b.n	a37c <lv_draw_label+0x3b0>
    uint32_t bpp = g->bpp;
    a6fe:	2301      	movs	r3, #1
    a700:	9312      	str	r3, [sp, #72]	; 0x48
            bitmask_init  = 0x80;
    a702:	2380      	movs	r3, #128	; 0x80
    a704:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp1_opa_table;
    a706:	4b48      	ldr	r3, [pc, #288]	; (a828 <lv_draw_label+0x85c>)
    a708:	9320      	str	r3, [sp, #128]	; 0x80
    a70a:	e71f      	b.n	a54c <lv_draw_label+0x580>
    uint32_t bpp = g->bpp;
    a70c:	2308      	movs	r3, #8
    a70e:	9312      	str	r3, [sp, #72]	; 0x48
            bitmask_init  = 0xFF;
    a710:	23ff      	movs	r3, #255	; 0xff
    a712:	931b      	str	r3, [sp, #108]	; 0x6c
            bpp_opa_table = _lv_bpp8_opa_table;
    a714:	4b45      	ldr	r3, [pc, #276]	; (a82c <lv_draw_label+0x860>)
    a716:	9320      	str	r3, [sp, #128]	; 0x80
    a718:	e718      	b.n	a54c <lv_draw_label+0x580>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    a71a:	9128      	str	r1, [sp, #160]	; 0xa0
    a71c:	e74f      	b.n	a5be <lv_draw_label+0x5f2>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
    a71e:	f1b8 0f08 	cmp.w	r8, #8
    a722:	d004      	beq.n	a72e <lv_draw_label+0x762>
    a724:	b2db      	uxtb	r3, r3
    a726:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a728:	5cd2      	ldrb	r2, [r2, r3]
    a72a:	e000      	b.n	a72e <lv_draw_label+0x762>
                px_opa = 0;
    a72c:	9a15      	ldr	r2, [sp, #84]	; 0x54
            font_rgb[subpx_cnt] = px_opa;
    a72e:	ab58      	add	r3, sp, #352	; 0x160
    a730:	440b      	add	r3, r1
    a732:	f803 2c84 	strb.w	r2, [r3, #-132]
            subpx_cnt ++;
    a736:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
    a738:	2903      	cmp	r1, #3
    a73a:	d028      	beq.n	a78e <lv_draw_label+0x7c2>
            if(col_bit < (int32_t) (8 - bpp)) {
    a73c:	45b4      	cmp	ip, r6
    a73e:	f340 8094 	ble.w	a86a <lv_draw_label+0x89e>
                col_bit += bpp;
    a742:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a744:	4443      	add	r3, r8
    a746:	461e      	mov	r6, r3
                bitmask = bitmask >> bpp;
    a748:	fa2e fe08 	lsr.w	lr, lr, r8
        for(col = col_start; col < col_end; col++) {
    a74c:	3501      	adds	r5, #1
    a74e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a750:	42ab      	cmp	r3, r5
    a752:	f000 8090 	beq.w	a876 <lv_draw_label+0x8aa>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
    a756:	9612      	str	r6, [sp, #72]	; 0x48
    a758:	f89b 3000 	ldrb.w	r3, [fp]
    a75c:	ea03 020e 	and.w	r2, r3, lr
    a760:	ebac 0306 	sub.w	r3, ip, r6
    a764:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
    a768:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    a76c:	d0de      	beq.n	a72c <lv_draw_label+0x760>
                if(opa == LV_OPA_COVER) {
    a76e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a770:	28ff      	cmp	r0, #255	; 0xff
    a772:	d0d4      	beq.n	a71e <lv_draw_label+0x752>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    a774:	f1b8 0f08 	cmp.w	r8, #8
    a778:	bf0f      	iteee	eq
    a77a:	b2da      	uxtbeq	r2, r3
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
    a77c:	b2db      	uxtbne	r3, r3
    a77e:	9a20      	ldrne	r2, [sp, #128]	; 0x80
    a780:	5cd2      	ldrbne	r2, [r2, r3]
    a782:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a784:	fb03 f202 	mul.w	r2, r3, r2
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
    a788:	f3c2 2207 	ubfx	r2, r2, #8, #8
    a78c:	e7cf      	b.n	a72e <lv_draw_label+0x762>
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    a78e:	f89d 10dc 	ldrb.w	r1, [sp, #220]	; 0xdc
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    a792:	f89a 3001 	ldrb.w	r3, [sl, #1]
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
    a796:	08db      	lsrs	r3, r3, #3
    a798:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
    a79c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a79e:	fb01 f202 	mul.w	r2, r1, r2
    a7a2:	fb00 2303 	mla	r3, r0, r3, r2
    a7a6:	f3c3 2304 	ubfx	r3, r3, #8, #5
    a7aa:	931d      	str	r3, [sp, #116]	; 0x74
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    a7ac:	f89d 30de 	ldrb.w	r3, [sp, #222]	; 0xde
    a7b0:	9318      	str	r3, [sp, #96]	; 0x60
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    a7b2:	f89a 2000 	ldrb.w	r2, [sl]
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
    a7b6:	f002 021f 	and.w	r2, r2, #31
    a7ba:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
    a7be:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a7c0:	9c18      	ldr	r4, [sp, #96]	; 0x60
    a7c2:	fb04 f303 	mul.w	r3, r4, r3
    a7c6:	fb00 3202 	mla	r2, r0, r2, r3
    a7ca:	f3c2 2304 	ubfx	r3, r2, #8, #5
    a7ce:	931e      	str	r3, [sp, #120]	; 0x78
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    a7d0:	f89d 00dd 	ldrb.w	r0, [sp, #221]	; 0xdd
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red, vdb_buf_tmp->ch.green, vdb_buf_tmp->ch.blue};
    a7d4:	f8ba 3000 	ldrh.w	r3, [sl]
                res_color.ch.green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
    a7d8:	f3c3 1445 	ubfx	r4, r3, #5, #6
    a7dc:	f1c0 03ff 	rsb	r3, r0, #255	; 0xff
    a7e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a7e2:	fb00 f202 	mul.w	r2, r0, r2
    a7e6:	fb03 2304 	mla	r3, r3, r4, r2
    a7ea:	f3c3 2305 	ubfx	r3, r3, #8, #6
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
    a7ee:	b9f9      	cbnz	r1, a830 <lv_draw_label+0x864>
    a7f0:	b9f0      	cbnz	r0, a830 <lv_draw_label+0x864>
    a7f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a7f4:	b9e2      	cbnz	r2, a830 <lv_draw_label+0x864>
    a7f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a7f8:	55d1      	strb	r1, [r2, r7]
    a7fa:	e01d      	b.n	a838 <lv_draw_label+0x86c>
    a7fc:	0001c248 	.word	0x0001c248
    a800:	55555556 	.word	0x55555556
    a804:	00012ee5 	.word	0x00012ee5
    a808:	00006511 	.word	0x00006511
    a80c:	00011585 	.word	0x00011585
    a810:	0000c46d 	.word	0x0000c46d
    a814:	0001c24c 	.word	0x0001c24c
    a818:	0001c444 	.word	0x0001c444
    a81c:	0001c36c 	.word	0x0001c36c
    a820:	0001c39c 	.word	0x0001c39c
    a824:	00012805 	.word	0x00012805
    a828:	0001c244 	.word	0x0001c244
    a82c:	0001c25c 	.word	0x0001c25c
                else mask_buf[mask_p] = LV_OPA_COVER;
    a830:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a832:	f04f 31ff 	mov.w	r1, #4294967295
    a836:	55d1      	strb	r1, [r2, r7]
                color_buf[mask_p] = res_color;
    a838:	eb09 0047 	add.w	r0, r9, r7, lsl #1
    a83c:	f819 1017 	ldrb.w	r1, [r9, r7, lsl #1]
    a840:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    a842:	f362 0104 	bfi	r1, r2, #0, #5
    a846:	f809 1017 	strb.w	r1, [r9, r7, lsl #1]
    a84a:	f839 2017 	ldrh.w	r2, [r9, r7, lsl #1]
    a84e:	f363 124a 	bfi	r2, r3, #5, #6
    a852:	f829 2017 	strh.w	r2, [r9, r7, lsl #1]
    a856:	0a12      	lsrs	r2, r2, #8
    a858:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a85a:	f363 02c7 	bfi	r2, r3, #3, #5
    a85e:	7042      	strb	r2, [r0, #1]
                mask_p++;
    a860:	3701      	adds	r7, #1
                vdb_buf_tmp++;
    a862:	f10a 0a02 	add.w	sl, sl, #2
                subpx_cnt = 0;
    a866:	2100      	movs	r1, #0
    a868:	e768      	b.n	a73c <lv_draw_label+0x770>
                map_p++;
    a86a:	f10b 0b01 	add.w	fp, fp, #1
                bitmask = bitmask_init;
    a86e:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
                col_bit = 0;
    a872:	9e15      	ldr	r6, [sp, #84]	; 0x54
    a874:	e76a      	b.n	a74c <lv_draw_label+0x780>
    a876:	4653      	mov	r3, sl
    a878:	46ca      	mov	sl, r9
    a87a:	4699      	mov	r9, r3
        if(other_mask_cnt) {
    a87c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    a87e:	bb4b      	cbnz	r3, a8d4 <lv_draw_label+0x908>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    a880:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    a882:	443b      	add	r3, r7
    a884:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    a886:	429a      	cmp	r2, r3
    a888:	dd41      	ble.n	a90e <lv_draw_label+0x942>
            map_area.y2 ++;
    a88a:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    a88e:	3301      	adds	r3, #1
    a890:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    a894:	9726      	str	r7, [sp, #152]	; 0x98
        col_bit += ((box_w - col_end) + col_start) * bpp;
    a896:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a898:	441e      	add	r6, r3
        map_p += (col_bit >> 3);
    a89a:	eb0b 0be6 	add.w	fp, fp, r6, asr #3
        col_bit = col_bit & 0x7;
    a89e:	f006 0607 	and.w	r6, r6, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
    a8a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    a8a4:	4499      	add	r9, r3
    for(row = row_start ; row < row_end; row++) {
    a8a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a8a8:	3301      	adds	r3, #1
    a8aa:	9325      	str	r3, [sp, #148]	; 0x94
    a8ac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a8ae:	4293      	cmp	r3, r2
    a8b0:	da44      	bge.n	a93c <lv_draw_label+0x970>
        bitmask = bitmask_init >> col_bit;
    a8b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a8b4:	fa23 fe06 	lsr.w	lr, r3, r6
        for(col = col_start; col < col_end; col++) {
    a8b8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
    a8ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a8bc:	4295      	cmp	r5, r2
    a8be:	da07      	bge.n	a8d0 <lv_draw_label+0x904>
    a8c0:	9f26      	ldr	r7, [sp, #152]	; 0x98
    a8c2:	2100      	movs	r1, #0
    a8c4:	f1c8 0c08 	rsb	ip, r8, #8
                else mask_buf[mask_p] = LV_OPA_COVER;
    a8c8:	464b      	mov	r3, r9
    a8ca:	46d1      	mov	r9, sl
    a8cc:	469a      	mov	sl, r3
    a8ce:	e742      	b.n	a756 <lv_draw_label+0x78a>
        for(col = col_start; col < col_end; col++) {
    a8d0:	9f26      	ldr	r7, [sp, #152]	; 0x98
    a8d2:	e7d3      	b.n	a87c <lv_draw_label+0x8b0>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
    a8d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a8d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
    a8d8:	4413      	add	r3, r2
    a8da:	461c      	mov	r4, r3
    a8dc:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    a8e0:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    a8e4:	3301      	adds	r3, #1
    a8e6:	1a5b      	subs	r3, r3, r1
    a8e8:	b21b      	sxth	r3, r3
    a8ea:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    a8ee:	4620      	mov	r0, r4
    a8f0:	4dab      	ldr	r5, [pc, #684]	; (aba0 <lv_draw_label+0xbd4>)
    a8f2:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    a8f4:	2800      	cmp	r0, #0
    a8f6:	d1c3      	bne.n	a880 <lv_draw_label+0x8b4>
    a8f8:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    a8fc:	3101      	adds	r1, #1
    a8fe:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    a902:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
    a904:	b209      	sxth	r1, r1
    a906:	4620      	mov	r0, r4
    a908:	4ba6      	ldr	r3, [pc, #664]	; (aba4 <lv_draw_label+0xbd8>)
    a90a:	4798      	blx	r3
    a90c:	e7b8      	b.n	a880 <lv_draw_label+0x8b4>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    a90e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a910:	9302      	str	r3, [sp, #8]
    a912:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a914:	9301      	str	r3, [sp, #4]
    a916:	2302      	movs	r3, #2
    a918:	9300      	str	r3, [sp, #0]
    a91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a91c:	4652      	mov	r2, sl
    a91e:	a938      	add	r1, sp, #224	; 0xe0
    a920:	980d      	ldr	r0, [sp, #52]	; 0x34
    a922:	4ca1      	ldr	r4, [pc, #644]	; (aba8 <lv_draw_label+0xbdc>)
    a924:	47a0      	blx	r4
            map_area.y1 = map_area.y2 + 1;
    a926:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    a92a:	3301      	adds	r3, #1
    a92c:	b21b      	sxth	r3, r3
    a92e:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            map_area.y2 = map_area.y1;
    a932:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    a936:	2300      	movs	r3, #0
    a938:	9326      	str	r3, [sp, #152]	; 0x98
    a93a:	e7ac      	b.n	a896 <lv_draw_label+0x8ca>
    a93c:	f8dd b0c8 	ldr.w	fp, [sp, #200]	; 0xc8
    a940:	f8dd 90cc 	ldr.w	r9, [sp, #204]	; 0xcc
    a944:	9f34      	ldr	r7, [sp, #208]	; 0xd0
    a946:	f8dd a0c4 	ldr.w	sl, [sp, #196]	; 0xc4
    a94a:	f8dd 80d4 	ldr.w	r8, [sp, #212]	; 0xd4
    if(map_area.y1 != map_area.y2) {
    a94e:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    a952:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    a956:	429a      	cmp	r2, r3
    a958:	d00e      	beq.n	a978 <lv_draw_label+0x9ac>
        map_area.y2--;
    a95a:	3b01      	subs	r3, #1
    a95c:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
    a960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a962:	9302      	str	r3, [sp, #8]
    a964:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a966:	9301      	str	r3, [sp, #4]
    a968:	2302      	movs	r3, #2
    a96a:	9300      	str	r3, [sp, #0]
    a96c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a96e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    a970:	a938      	add	r1, sp, #224	; 0xe0
    a972:	980d      	ldr	r0, [sp, #52]	; 0x34
    a974:	4c8c      	ldr	r4, [pc, #560]	; (aba8 <lv_draw_label+0xbdc>)
    a976:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    a978:	9821      	ldr	r0, [sp, #132]	; 0x84
    a97a:	4c8c      	ldr	r4, [pc, #560]	; (abac <lv_draw_label+0xbe0>)
    a97c:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
    a97e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    a980:	47a0      	blx	r4
    a982:	e4fb      	b.n	a37c <lv_draw_label+0x3b0>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
    a984:	b22c      	sxth	r4, r5
    a986:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
    a98a:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
    uint32_t bpp = g->bpp;
    a98e:	f89d 30f2 	ldrb.w	r3, [sp, #242]	; 0xf2
    a992:	9320      	str	r3, [sp, #128]	; 0x80
    if(bpp == 3) bpp = 4;
    a994:	2b03      	cmp	r3, #3
    a996:	f000 80c1 	beq.w	ab1c <lv_draw_label+0xb50>
    switch(bpp) {
    a99a:	3b01      	subs	r3, #1
    a99c:	2b07      	cmp	r3, #7
    a99e:	f200 80c5 	bhi.w	ab2c <lv_draw_label+0xb60>
    a9a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    a9a6:	00cd      	.short	0x00cd
    a9a8:	00c30008 	.word	0x00c30008
    a9ac:	00c300bd 	.word	0x00c300bd
    a9b0:	00c300c3 	.word	0x00c300c3
    a9b4:	00d5      	.short	0x00d5
            shades = 4;
    a9b6:	2304      	movs	r3, #4
            bitmask_init  = 0xC0;
    a9b8:	22c0      	movs	r2, #192	; 0xc0
    a9ba:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp2_opa_table;
    a9bc:	4a7c      	ldr	r2, [pc, #496]	; (abb0 <lv_draw_label+0xbe4>)
    a9be:	9222      	str	r2, [sp, #136]	; 0x88
    if(opa < LV_OPA_MAX) {
    a9c0:	9916      	ldr	r1, [sp, #88]	; 0x58
    a9c2:	29f9      	cmp	r1, #249	; 0xf9
    a9c4:	d82b      	bhi.n	aa1e <lv_draw_label+0xa52>
        if(prev_opa != opa || prev_bpp != bpp) {
    a9c6:	4a7b      	ldr	r2, [pc, #492]	; (abb4 <lv_draw_label+0xbe8>)
    a9c8:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
    a9cc:	428a      	cmp	r2, r1
    a9ce:	f000 80c8 	beq.w	ab62 <lv_draw_label+0xb96>
            for(i = 0; i < shades; i++) {
    a9d2:	b1d3      	cbz	r3, aa0a <lv_draw_label+0xa3e>
    a9d4:	9e22      	ldr	r6, [sp, #136]	; 0x88
    a9d6:	1e72      	subs	r2, r6, #1
    a9d8:	4976      	ldr	r1, [pc, #472]	; (abb4 <lv_draw_label+0xbe8>)
    a9da:	3901      	subs	r1, #1
    a9dc:	3b01      	subs	r3, #1
    a9de:	eb06 0c03 	add.w	ip, r6, r3
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
    a9e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a9e4:	461e      	mov	r6, r3
    a9e6:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
    a9ea:	469b      	mov	fp, r3
    a9ec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    a9f0:	2bff      	cmp	r3, #255	; 0xff
    a9f2:	bf1a      	itte	ne
    a9f4:	fb0b f303 	mulne.w	r3, fp, r3
    a9f8:	f3c3 2307 	ubfxne	r3, r3, #8, #8
    a9fc:	4633      	moveq	r3, r6
    a9fe:	f801 3f01 	strb.w	r3, [r1, #1]!
            for(i = 0; i < shades; i++) {
    aa02:	4594      	cmp	ip, r2
    aa04:	d1f2      	bne.n	a9ec <lv_draw_label+0xa20>
    aa06:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
        prev_opa = opa;
    aa0a:	4b6a      	ldr	r3, [pc, #424]	; (abb4 <lv_draw_label+0xbe8>)
    aa0c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    aa10:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        prev_bpp = bpp;
    aa14:	9a20      	ldr	r2, [sp, #128]	; 0x80
    aa16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        bpp_opa_table_p = opa_table;
    aa1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    aa1c:	9322      	str	r3, [sp, #136]	; 0x88
    int32_t box_w = g->box_w;
    aa1e:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
    aa22:	9324      	str	r3, [sp, #144]	; 0x90
    int32_t box_h = g->box_h;
    aa24:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
    aa28:	9920      	ldr	r1, [sp, #128]	; 0x80
    aa2a:	fb01 fc03 	mul.w	ip, r1, r3
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
    aa2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa30:	f9b3 3000 	ldrsh.w	r3, [r3]
    aa34:	429c      	cmp	r4, r3
    aa36:	bfb4      	ite	lt
    aa38:	1b1b      	sublt	r3, r3, r4
    aa3a:	2300      	movge	r3, #0
    aa3c:	9314      	str	r3, [sp, #80]	; 0x50
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
    aa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    aa44:	9924      	ldr	r1, [sp, #144]	; 0x90
    aa46:	4421      	add	r1, r4
    aa48:	4299      	cmp	r1, r3
    aa4a:	bfc6      	itte	gt
    aa4c:	1b1b      	subgt	r3, r3, r4
    aa4e:	3301      	addgt	r3, #1
    aa50:	9b24      	ldrle	r3, [sp, #144]	; 0x90
    aa52:	9325      	str	r3, [sp, #148]	; 0x94
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
    aa54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    aa5a:	4298      	cmp	r0, r3
    aa5c:	bfb4      	ite	lt
    aa5e:	1a1b      	sublt	r3, r3, r0
    aa60:	2300      	movge	r3, #0
    aa62:	9326      	str	r3, [sp, #152]	; 0x98
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
    aa64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aa66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    aa6a:	1811      	adds	r1, r2, r0
    aa6c:	4299      	cmp	r1, r3
    aa6e:	bfc3      	ittte	gt
    aa70:	1a1b      	subgt	r3, r3, r0
    aa72:	3301      	addgt	r3, #1
    aa74:	931b      	strgt	r3, [sp, #108]	; 0x6c
    aa76:	921b      	strle	r2, [sp, #108]	; 0x6c
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
    aa78:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aa7a:	9321      	str	r3, [sp, #132]	; 0x84
    aa7c:	9920      	ldr	r1, [sp, #128]	; 0x80
    aa7e:	fb03 f401 	mul.w	r4, r3, r1
    aa82:	9826      	ldr	r0, [sp, #152]	; 0x98
    aa84:	fb00 440c 	mla	r4, r0, ip, r4
    map_p += bit_ofs >> 3;
    aa88:	eb0e 06d4 	add.w	r6, lr, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
    aa8c:	f004 0407 	and.w	r4, r4, #7
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
    aa90:	9924      	ldr	r1, [sp, #144]	; 0x90
    aa92:	fb02 fe01 	mul.w	lr, r2, r1
    aa96:	4672      	mov	r2, lr
    aa98:	f5be 7ff0 	cmp.w	lr, #480	; 0x1e0
    aa9c:	bfa8      	it	ge
    aa9e:	f44f 72f0 	movge.w	r2, #480	; 0x1e0
    aaa2:	921d      	str	r2, [sp, #116]	; 0x74
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    aaa4:	4610      	mov	r0, r2
    aaa6:	4b44      	ldr	r3, [pc, #272]	; (abb8 <lv_draw_label+0xbec>)
    aaa8:	4798      	blx	r3
    aaaa:	9018      	str	r0, [sp, #96]	; 0x60
    fill_area.x1 = col_start + pos_x;
    aaac:	b2ad      	uxth	r5, r5
    aaae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aab0:	18eb      	adds	r3, r5, r3
    aab2:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    fill_area.x2 = col_end  + pos_x - 1;
    aab6:	3d01      	subs	r5, #1
    aab8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    aaba:	18ab      	adds	r3, r5, r2
    aabc:	f8ad 30e4 	strh.w	r3, [sp, #228]	; 0xe4
    fill_area.y1 = row_start + pos_y;
    aac0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    aac2:	9826      	ldr	r0, [sp, #152]	; 0x98
    aac4:	4405      	add	r5, r0
    aac6:	b22b      	sxth	r3, r5
    aac8:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    fill_area.y2 = fill_area.y1;
    aacc:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    aad0:	4b3a      	ldr	r3, [pc, #232]	; (abbc <lv_draw_label+0xbf0>)
    aad2:	4798      	blx	r3
    aad4:	901e      	str	r0, [sp, #120]	; 0x78
    uint32_t col_bit_max = 8 - bpp;
    aad6:	9920      	ldr	r1, [sp, #128]	; 0x80
    aad8:	f1c1 0508 	rsb	r5, r1, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
    aadc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aade:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aae0:	18d3      	adds	r3, r2, r3
    aae2:	9a25      	ldr	r2, [sp, #148]	; 0x94
    aae4:	1a9b      	subs	r3, r3, r2
    aae6:	fb01 f303 	mul.w	r3, r1, r3
    aaea:	9320      	str	r3, [sp, #128]	; 0x80
    for(row = row_start ; row < row_end; row++) {
    aaec:	9826      	ldr	r0, [sp, #152]	; 0x98
    aaee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aaf0:	4298      	cmp	r0, r3
    aaf2:	f280 80df 	bge.w	acb4 <lv_draw_label+0xce8>
    aaf6:	f04f 0e00 	mov.w	lr, #0
                mask_buf[mask_p] = 0;
    aafa:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    aafe:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    ab02:	9727      	str	r7, [sp, #156]	; 0x9c
    ab04:	460f      	mov	r7, r1
    ab06:	9515      	str	r5, [sp, #84]	; 0x54
    ab08:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
    ab0c:	f8dd a094 	ldr.w	sl, [sp, #148]	; 0x94
    ab10:	4681      	mov	r9, r0
    ab12:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
    ab16:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
    ab1a:	e07a      	b.n	ac12 <lv_draw_label+0xc46>
    if(bpp == 3) bpp = 4;
    ab1c:	2304      	movs	r3, #4
    ab1e:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 16;
    ab20:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
    ab22:	22f0      	movs	r2, #240	; 0xf0
    ab24:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp4_opa_table;
    ab26:	4a26      	ldr	r2, [pc, #152]	; (abc0 <lv_draw_label+0xbf4>)
    ab28:	9222      	str	r2, [sp, #136]	; 0x88
    ab2a:	e749      	b.n	a9c0 <lv_draw_label+0x9f4>
            LV_LOG_WARN("lv_draw_letter: invalid bpp");
    ab2c:	4b25      	ldr	r3, [pc, #148]	; (abc4 <lv_draw_label+0xbf8>)
    ab2e:	9300      	str	r3, [sp, #0]
    ab30:	4b25      	ldr	r3, [pc, #148]	; (abc8 <lv_draw_label+0xbfc>)
    ab32:	f240 12e5 	movw	r2, #485	; 0x1e5
    ab36:	4925      	ldr	r1, [pc, #148]	; (abcc <lv_draw_label+0xc00>)
    ab38:	2002      	movs	r0, #2
    ab3a:	4c25      	ldr	r4, [pc, #148]	; (abd0 <lv_draw_label+0xc04>)
    ab3c:	47a0      	blx	r4
    ab3e:	e41d      	b.n	a37c <lv_draw_label+0x3b0>
    uint32_t bpp = g->bpp;
    ab40:	2301      	movs	r3, #1
    ab42:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 2;
    ab44:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
    ab46:	2280      	movs	r2, #128	; 0x80
    ab48:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp1_opa_table;
    ab4a:	4a22      	ldr	r2, [pc, #136]	; (abd4 <lv_draw_label+0xc08>)
    ab4c:	9222      	str	r2, [sp, #136]	; 0x88
    ab4e:	e737      	b.n	a9c0 <lv_draw_label+0x9f4>
    uint32_t bpp = g->bpp;
    ab50:	2308      	movs	r3, #8
    ab52:	9320      	str	r3, [sp, #128]	; 0x80
            shades = 256;
    ab54:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
    ab58:	22ff      	movs	r2, #255	; 0xff
    ab5a:	9212      	str	r2, [sp, #72]	; 0x48
            bpp_opa_table_p = _lv_bpp8_opa_table;
    ab5c:	4a1e      	ldr	r2, [pc, #120]	; (abd8 <lv_draw_label+0xc0c>)
    ab5e:	9222      	str	r2, [sp, #136]	; 0x88
    ab60:	e72e      	b.n	a9c0 <lv_draw_label+0x9f4>
        if(prev_opa != opa || prev_bpp != bpp) {
    ab62:	4a14      	ldr	r2, [pc, #80]	; (abb4 <lv_draw_label+0xbe8>)
    ab64:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    ab68:	9920      	ldr	r1, [sp, #128]	; 0x80
    ab6a:	4291      	cmp	r1, r2
    ab6c:	f47f af31 	bne.w	a9d2 <lv_draw_label+0xa06>
    ab70:	e74b      	b.n	aa0a <lv_draw_label+0xa3e>
                map_p++;
    ab72:	3601      	adds	r6, #1
                bitmask = bitmask_init;
    ab74:	9812      	ldr	r0, [sp, #72]	; 0x48
                col_bit = 0;
    ab76:	2400      	movs	r4, #0
    ab78:	3101      	adds	r1, #1
        for(col = col_start; col < col_end; col++) {
    ab7a:	458c      	cmp	ip, r1
    ab7c:	d02e      	beq.n	abdc <lv_draw_label+0xc10>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
    ab7e:	7833      	ldrb	r3, [r6, #0]
    ab80:	4003      	ands	r3, r0
    ab82:	1b2a      	subs	r2, r5, r4
    ab84:	40d3      	lsrs	r3, r2
            if(letter_px) {
    ab86:	f013 0fff 	tst.w	r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
    ab8a:	bf1a      	itte	ne
    ab8c:	b2db      	uxtbne	r3, r3
    ab8e:	f818 3003 	ldrbne.w	r3, [r8, r3]
                mask_buf[mask_p] = 0;
    ab92:	2300      	moveq	r3, #0
    ab94:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
    ab96:	42a5      	cmp	r5, r4
    ab98:	d9eb      	bls.n	ab72 <lv_draw_label+0xba6>
                col_bit += bpp;
    ab9a:	443c      	add	r4, r7
                bitmask = bitmask >> bpp;
    ab9c:	40f8      	lsrs	r0, r7
    ab9e:	e7eb      	b.n	ab78 <lv_draw_label+0xbac>
    aba0:	0000c3c5 	.word	0x0000c3c5
    aba4:	000130df 	.word	0x000130df
    aba8:	00008829 	.word	0x00008829
    abac:	00012b19 	.word	0x00012b19
    abb0:	0001c248 	.word	0x0001c248
    abb4:	20002a50 	.word	0x20002a50
    abb8:	00012ee5 	.word	0x00012ee5
    abbc:	0000c46d 	.word	0x0000c46d
    abc0:	0001c24c 	.word	0x0001c24c
    abc4:	0001c46c 	.word	0x0001c46c
    abc8:	0001c380 	.word	0x0001c380
    abcc:	0001c39c 	.word	0x0001c39c
    abd0:	00012805 	.word	0x00012805
    abd4:	0001c244 	.word	0x0001c244
    abd8:	0001c25c 	.word	0x0001c25c
    abdc:	9515      	str	r5, [sp, #84]	; 0x54
        if(other_mask_cnt) {
    abde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    abe0:	bb53      	cbnz	r3, ac38 <lv_draw_label+0xc6c>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
    abe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    abe4:	ebaa 0303 	sub.w	r3, sl, r3
    abe8:	445b      	add	r3, fp
    abea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    abec:	429a      	cmp	r2, r3
    abee:	d93f      	bls.n	ac70 <lv_draw_label+0xca4>
            fill_area.y2 ++;
    abf0:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    abf4:	3301      	adds	r3, #1
    abf6:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
    abfa:	46de      	mov	lr, fp
        col_bit += col_bit_row_ofs;
    abfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abfe:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
    ac00:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
    ac04:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
    ac08:	f109 0901 	add.w	r9, r9, #1
    ac0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ac0e:	4599      	cmp	r9, r3
    ac10:	da47      	bge.n	aca2 <lv_draw_label+0xcd6>
        bitmask = bitmask_init >> col_bit;
    ac12:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ac14:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
    ac18:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ac1a:	4553      	cmp	r3, sl
    ac1c:	da0a      	bge.n	ac34 <lv_draw_label+0xc68>
    ac1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    ac20:	eb02 010e 	add.w	r1, r2, lr
    ac24:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac26:	ebaa 0b03 	sub.w	fp, sl, r3
    ac2a:	44f3      	add	fp, lr
    ac2c:	eb02 0c0b 	add.w	ip, r2, fp
    ac30:	9d15      	ldr	r5, [sp, #84]	; 0x54
    ac32:	e7a4      	b.n	ab7e <lv_draw_label+0xbb2>
    ac34:	46f3      	mov	fp, lr
    ac36:	e7d2      	b.n	abde <lv_draw_label+0xc12>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
    ac38:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac3a:	4473      	add	r3, lr
    ac3c:	4618      	mov	r0, r3
    ac3e:	9322      	str	r3, [sp, #136]	; 0x88
    ac40:	f9bd 10e0 	ldrsh.w	r1, [sp, #224]	; 0xe0
    ac44:	f8bd 30e4 	ldrh.w	r3, [sp, #228]	; 0xe4
    ac48:	3301      	adds	r3, #1
    ac4a:	1a5b      	subs	r3, r3, r1
    ac4c:	b21b      	sxth	r3, r3
    ac4e:	f9bd 20e6 	ldrsh.w	r2, [sp, #230]	; 0xe6
    ac52:	4d85      	ldr	r5, [pc, #532]	; (ae68 <lv_draw_label+0xe9c>)
    ac54:	47a8      	blx	r5
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    ac56:	2800      	cmp	r0, #0
    ac58:	d1c3      	bne.n	abe2 <lv_draw_label+0xc16>
    ac5a:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
    ac5e:	3101      	adds	r1, #1
    ac60:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
    ac64:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
    ac66:	b209      	sxth	r1, r1
    ac68:	9822      	ldr	r0, [sp, #136]	; 0x88
    ac6a:	4b80      	ldr	r3, [pc, #512]	; (ae6c <lv_draw_label+0xea0>)
    ac6c:	4798      	blx	r3
    ac6e:	e7b8      	b.n	abe2 <lv_draw_label+0xc16>
            _lv_blend_fill(clip_area, &fill_area,
    ac70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ac72:	9302      	str	r3, [sp, #8]
    ac74:	23ff      	movs	r3, #255	; 0xff
    ac76:	9301      	str	r3, [sp, #4]
    ac78:	2302      	movs	r3, #2
    ac7a:	9300      	str	r3, [sp, #0]
    ac7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac7e:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
    ac82:	a938      	add	r1, sp, #224	; 0xe0
    ac84:	980d      	ldr	r0, [sp, #52]	; 0x34
    ac86:	f8df b1e8 	ldr.w	fp, [pc, #488]	; ae70 <lv_draw_label+0xea4>
    ac8a:	47d8      	blx	fp
            fill_area.y1 = fill_area.y2 + 1;
    ac8c:	f8bd 30e6 	ldrh.w	r3, [sp, #230]	; 0xe6
    ac90:	3301      	adds	r3, #1
    ac92:	b21b      	sxth	r3, r3
    ac94:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            fill_area.y2 = fill_area.y1;
    ac98:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
            mask_p = 0;
    ac9c:	f04f 0e00 	mov.w	lr, #0
    aca0:	e7ac      	b.n	abfc <lv_draw_label+0xc30>
    aca2:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    aca6:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
    acaa:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    acac:	f8dd a0a0 	ldr.w	sl, [sp, #160]	; 0xa0
    acb0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    if(fill_area.y1 != fill_area.y2) {
    acb4:	f9bd 30e6 	ldrsh.w	r3, [sp, #230]	; 0xe6
    acb8:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	; 0xe2
    acbc:	429a      	cmp	r2, r3
    acbe:	d00f      	beq.n	ace0 <lv_draw_label+0xd14>
        fill_area.y2--;
    acc0:	3b01      	subs	r3, #1
    acc2:	f8ad 30e6 	strh.w	r3, [sp, #230]	; 0xe6
        _lv_blend_fill(clip_area, &fill_area,
    acc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    acc8:	9302      	str	r3, [sp, #8]
    acca:	23ff      	movs	r3, #255	; 0xff
    accc:	9301      	str	r3, [sp, #4]
    acce:	2302      	movs	r3, #2
    acd0:	9300      	str	r3, [sp, #0]
    acd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    acd4:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
    acd8:	a938      	add	r1, sp, #224	; 0xe0
    acda:	980d      	ldr	r0, [sp, #52]	; 0x34
    acdc:	4c64      	ldr	r4, [pc, #400]	; (ae70 <lv_draw_label+0xea4>)
    acde:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    ace0:	9818      	ldr	r0, [sp, #96]	; 0x60
    ace2:	4b64      	ldr	r3, [pc, #400]	; (ae74 <lv_draw_label+0xea8>)
    ace4:	4798      	blx	r3
    ace6:	f7ff bb49 	b.w	a37c <lv_draw_label+0x3b0>
                        cmd_state = CMD_STATE_WAIT;
    acea:	2300      	movs	r3, #0
    acec:	9306      	str	r3, [sp, #24]
    acee:	f7ff bb4d 	b.w	a38c <lv_draw_label+0x3c0>
    acf2:	4653      	mov	r3, sl
    acf4:	46ca      	mov	sl, r9
    acf6:	4699      	mov	r9, r3
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
    acf8:	f898 3018 	ldrb.w	r3, [r8, #24]
    acfc:	f013 0f02 	tst.w	r3, #2
    ad00:	d146      	bne.n	ad90 <lv_draw_label+0xdc4>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
    ad02:	f898 3018 	ldrb.w	r3, [r8, #24]
    ad06:	f013 0f01 	tst.w	r3, #1
    ad0a:	d162      	bne.n	add2 <lv_draw_label+0xe06>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    ad0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad0e:	9d07      	ldr	r5, [sp, #28]
    ad10:	1956      	adds	r6, r2, r5
    ad12:	f9b8 200c 	ldrsh.w	r2, [r8, #12]
    ad16:	f898 3017 	ldrb.w	r3, [r8, #23]
    ad1a:	9300      	str	r3, [sp, #0]
    ad1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ad1e:	9905      	ldr	r1, [sp, #20]
    ad20:	4630      	mov	r0, r6
    ad22:	4c55      	ldr	r4, [pc, #340]	; (ae78 <lv_draw_label+0xeac>)
    ad24:	47a0      	blx	r4
    ad26:	1944      	adds	r4, r0, r5
        pos.x = coords->x1;
    ad28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ad2a:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
    ad2e:	f898 2017 	ldrb.w	r2, [r8, #23]
    ad32:	f012 0f04 	tst.w	r2, #4
    ad36:	d16c      	bne.n	ae12 <lv_draw_label+0xe46>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
    ad38:	f012 0f08 	tst.w	r2, #8
    ad3c:	d17e      	bne.n	ae3c <lv_draw_label+0xe70>
    ad3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad40:	9917      	ldr	r1, [sp, #92]	; 0x5c
    ad42:	440b      	add	r3, r1
    ad44:	b21b      	sxth	r3, r3
    ad46:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ad48:	440a      	add	r2, r1
    ad4a:	b292      	uxth	r2, r2
    ad4c:	9211      	str	r2, [sp, #68]	; 0x44
        line_start = line_end;
    ad4e:	f8dd b01c 	ldr.w	fp, [sp, #28]
        pos.y += line_height;
    ad52:	930e      	str	r3, [sp, #56]	; 0x38
        if(pos.y > mask->y2) return;
    ad54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ad56:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    ad5a:	429a      	cmp	r2, r3
    ad5c:	f6ff a93f 	blt.w	9fde <lv_draw_label+0x12>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
    ad60:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
    ad62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad64:	4613      	mov	r3, r2
    ad66:	445b      	add	r3, fp
    ad68:	9309      	str	r3, [sp, #36]	; 0x24
    ad6a:	f812 300b 	ldrb.w	r3, [r2, fp]
    ad6e:	2b00      	cmp	r3, #0
    ad70:	f43f a935 	beq.w	9fde <lv_draw_label+0x12>
        pos.x += x_ofs;
    ad74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ad76:	441d      	add	r5, r3
    ad78:	fa0f f985 	sxth.w	r9, r5
        i         = 0;
    ad7c:	2300      	movs	r3, #0
    ad7e:	9352      	str	r3, [sp, #328]	; 0x148
        cmd_state = CMD_STATE_WAIT;
    ad80:	9306      	str	r3, [sp, #24]
        bpp_opa_table_p = opa_table;
    ad82:	4b3e      	ldr	r3, [pc, #248]	; (ae7c <lv_draw_label+0xeb0>)
    ad84:	931c      	str	r3, [sp, #112]	; 0x70
    ad86:	464b      	mov	r3, r9
    ad88:	46d1      	mov	r9, sl
    ad8a:	469a      	mov	sl, r3
        while(i < line_end - line_start) {
    ad8c:	f7ff bafe 	b.w	a38c <lv_draw_label+0x3c0>
            p1.x = pos_x_start;
    ad90:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    ad94:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
    ad98:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ad9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    ada0:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
    ada4:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    ada8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    adac:	105b      	asrs	r3, r3, #1
    adae:	eb03 0362 	add.w	r3, r3, r2, asr #1
    adb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    adb4:	4413      	add	r3, r2
    adb6:	b21b      	sxth	r3, r3
    adb8:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    adbc:	f8ad 90e8 	strh.w	r9, [sp, #232]	; 0xe8
            p2.y = p1.y;
    adc0:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    adc4:	ab53      	add	r3, sp, #332	; 0x14c
    adc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    adc8:	a93a      	add	r1, sp, #232	; 0xe8
    adca:	a838      	add	r0, sp, #224	; 0xe0
    adcc:	4c2c      	ldr	r4, [pc, #176]	; (ae80 <lv_draw_label+0xeb4>)
    adce:	47a0      	blx	r4
    add0:	e797      	b.n	ad02 <lv_draw_label+0xd36>
            p1.x = pos_x_start;
    add2:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    add6:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line + line_dsc.width / 2 + 1;
    adda:	f8d8 2004 	ldr.w	r2, [r8, #4]
    adde:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
    ade2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    ade6:	105b      	asrs	r3, r3, #1
    ade8:	3301      	adds	r3, #1
    adea:	8911      	ldrh	r1, [r2, #8]
    adec:	440b      	add	r3, r1
    adee:	8952      	ldrh	r2, [r2, #10]
    adf0:	1a9b      	subs	r3, r3, r2
    adf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    adf4:	4413      	add	r3, r2
    adf6:	b21b      	sxth	r3, r3
    adf8:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            p2.x = pos.x;
    adfc:	f8ad 90e8 	strh.w	r9, [sp, #232]	; 0xe8
            p2.y = p1.y;
    ae00:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
            lv_draw_line(&p1, &p2, mask, &line_dsc);
    ae04:	ab53      	add	r3, sp, #332	; 0x14c
    ae06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ae08:	a93a      	add	r1, sp, #232	; 0xe8
    ae0a:	a838      	add	r0, sp, #224	; 0xe0
    ae0c:	4c1c      	ldr	r4, [pc, #112]	; (ae80 <lv_draw_label+0xeb4>)
    ae0e:	47a0      	blx	r4
    ae10:	e77c      	b.n	ad0c <lv_draw_label+0xd40>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    ae12:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
    ae16:	9200      	str	r2, [sp, #0]
    ae18:	9a05      	ldr	r2, [sp, #20]
    ae1a:	4601      	mov	r1, r0
    ae1c:	4630      	mov	r0, r6
    ae1e:	4e19      	ldr	r6, [pc, #100]	; (ae84 <lv_draw_label+0xeb8>)
    ae20:	47b0      	blx	r6
    ae22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ae24:	8893      	ldrh	r3, [r2, #4]
    ae26:	3301      	adds	r3, #1
    ae28:	8812      	ldrh	r2, [r2, #0]
    ae2a:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
    ae2c:	b21b      	sxth	r3, r3
    ae2e:	1a18      	subs	r0, r3, r0
    ae30:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    ae34:	eb05 0560 	add.w	r5, r5, r0, asr #1
    ae38:	b22d      	sxth	r5, r5
    ae3a:	e780      	b.n	ad3e <lv_draw_label+0xd72>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
    ae3c:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
    ae40:	9200      	str	r2, [sp, #0]
    ae42:	9a05      	ldr	r2, [sp, #20]
    ae44:	4601      	mov	r1, r0
    ae46:	4630      	mov	r0, r6
    ae48:	4e0e      	ldr	r6, [pc, #56]	; (ae84 <lv_draw_label+0xeb8>)
    ae4a:	47b0      	blx	r6
    ae4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ae4e:	8893      	ldrh	r3, [r2, #4]
    ae50:	3301      	adds	r3, #1
    ae52:	8812      	ldrh	r2, [r2, #0]
    ae54:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
    ae56:	b21b      	sxth	r3, r3
    ae58:	1a18      	subs	r0, r3, r0
    ae5a:	4405      	add	r5, r0
    ae5c:	b22d      	sxth	r5, r5
    ae5e:	e76e      	b.n	ad3e <lv_draw_label+0xd72>
                        cmd_state = CMD_STATE_WAIT;
    ae60:	2300      	movs	r3, #0
    ae62:	9306      	str	r3, [sp, #24]
    ae64:	f7ff ba0e 	b.w	a284 <lv_draw_label+0x2b8>
    ae68:	0000c3c5 	.word	0x0000c3c5
    ae6c:	000130df 	.word	0x000130df
    ae70:	00007cf9 	.word	0x00007cf9
    ae74:	00012b19 	.word	0x00012b19
    ae78:	00014359 	.word	0x00014359
    ae7c:	20002a50 	.word	0x20002a50
    ae80:	0000aeb9 	.word	0x0000aeb9
    ae84:	00014585 	.word	0x00014585

0000ae88 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
    ae88:	b510      	push	{r4, lr}
    ae8a:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
    ae8c:	210a      	movs	r1, #10
    ae8e:	4b09      	ldr	r3, [pc, #36]	; (aeb4 <lv_draw_line_dsc_init+0x2c>)
    ae90:	4798      	blx	r3
    dsc->width = 1;
    ae92:	2301      	movs	r3, #1
    ae94:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
    ae96:	23ff      	movs	r3, #255	; 0xff
    ae98:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    ae9a:	7823      	ldrb	r3, [r4, #0]
    ae9c:	f36f 0304 	bfc	r3, #0, #5
    aea0:	7023      	strb	r3, [r4, #0]
    aea2:	8823      	ldrh	r3, [r4, #0]
    aea4:	f36f 134a 	bfc	r3, #5, #6
    aea8:	8023      	strh	r3, [r4, #0]
    aeaa:	0a1b      	lsrs	r3, r3, #8
    aeac:	f36f 03c7 	bfc	r3, #3, #5
    aeb0:	7063      	strb	r3, [r4, #1]
    aeb2:	bd10      	pop	{r4, pc}
    aeb4:	000130df 	.word	0x000130df

0000aeb8 <lv_draw_line>:
 * @param style pointer to a line's style
 * @param opa_scale scale down all opacities by the factor
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        lv_draw_line_dsc_t * dsc)
{
    aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aebc:	b0cb      	sub	sp, #300	; 0x12c
    if(dsc->width == 0) return;
    aebe:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
    aec2:	2d00      	cmp	r5, #0
    aec4:	f000 8418 	beq.w	b6f8 <lv_draw_line+0x840>
    if(dsc->opa <= LV_OPA_MIN) return;
    aec8:	7a1c      	ldrb	r4, [r3, #8]
    aeca:	2c05      	cmp	r4, #5
    aecc:	f240 8414 	bls.w	b6f8 <lv_draw_line+0x840>

    if(point1->x == point2->x && point1->y == point2->y) return;
    aed0:	f9b0 6000 	ldrsh.w	r6, [r0]
    aed4:	f9b1 7000 	ldrsh.w	r7, [r1]
    aed8:	42be      	cmp	r6, r7
    aeda:	f000 8130 	beq.w	b13e <lv_draw_line+0x286>
    aede:	461c      	mov	r4, r3
    aee0:	4696      	mov	lr, r2
    aee2:	9208      	str	r2, [sp, #32]
    aee4:	9107      	str	r1, [sp, #28]
    aee6:	9006      	str	r0, [sp, #24]

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
    aee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    aeec:	f3c5 054f 	ubfx	r5, r5, #1, #16
    aef0:	42be      	cmp	r6, r7
    aef2:	bfd4      	ite	le
    aef4:	ebc5 0306 	rsble	r3, r5, r6
    aef8:	ebc5 0307 	rsbgt	r3, r5, r7
    aefc:	f8ad 3120 	strh.w	r3, [sp, #288]	; 0x120
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
    af00:	42be      	cmp	r6, r7
    af02:	bfac      	ite	ge
    af04:	19ab      	addge	r3, r5, r6
    af06:	19eb      	addlt	r3, r5, r7
    af08:	f8ad 3124 	strh.w	r3, [sp, #292]	; 0x124
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
    af0c:	460f      	mov	r7, r1
    af0e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
    af12:	4606      	mov	r6, r0
    af14:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    af18:	429a      	cmp	r2, r3
    af1a:	bfd4      	ite	le
    af1c:	ebc5 0102 	rsble	r1, r5, r2
    af20:	ebc5 0103 	rsbgt	r1, r5, r3
    af24:	f8ad 1122 	strh.w	r1, [sp, #290]	; 0x122
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
    af28:	429a      	cmp	r2, r3
    af2a:	bfac      	ite	ge
    af2c:	18ad      	addge	r5, r5, r2
    af2e:	18ed      	addlt	r5, r5, r3
    af30:	f8ad 5126 	strh.w	r5, [sp, #294]	; 0x126

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
    af34:	4672      	mov	r2, lr
    af36:	a948      	add	r1, sp, #288	; 0x120
    af38:	4608      	mov	r0, r1
    af3a:	4bab      	ldr	r3, [pc, #684]	; (b1e8 <lv_draw_line+0x330>)
    af3c:	4798      	blx	r3
    if(!is_common) return;
    af3e:	2800      	cmp	r0, #0
    af40:	f000 83da 	beq.w	b6f8 <lv_draw_line+0x840>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
    af44:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
    af48:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
    af4c:	42ae      	cmp	r6, r5
    af4e:	f000 80fe 	beq.w	b14e <lv_draw_line+0x296>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
    af52:	9b06      	ldr	r3, [sp, #24]
    af54:	f9b3 3000 	ldrsh.w	r3, [r3]
    af58:	461a      	mov	r2, r3
    af5a:	9305      	str	r3, [sp, #20]
    af5c:	9b07      	ldr	r3, [sp, #28]
    af5e:	f9b3 a000 	ldrsh.w	sl, [r3]
    af62:	4552      	cmp	r2, sl
    af64:	f000 8201 	beq.w	b36a <lv_draw_line+0x4b2>
                                                 lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
    af68:	42ae      	cmp	r6, r5
    af6a:	db06      	blt.n	af7a <lv_draw_line+0xc2>
    af6c:	4633      	mov	r3, r6
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
    af6e:	462e      	mov	r6, r5
        p2.y = point1->y;
    af70:	461d      	mov	r5, r3
    if(point1->y < point2->y) {
    af72:	9b05      	ldr	r3, [sp, #20]
        p1.x = point2->x;
    af74:	f8cd a014 	str.w	sl, [sp, #20]
        p2.x = point1->x;
    af78:	469a      	mov	sl, r3
    }

    int32_t xdiff = p2.x - p1.x;
    af7a:	9b05      	ldr	r3, [sp, #20]
    af7c:	ebaa 0303 	sub.w	r3, sl, r3
    af80:	9309      	str	r3, [sp, #36]	; 0x24
    int32_t ydiff = p2.y - p1.y;
    af82:	1baa      	subs	r2, r5, r6
    af84:	920a      	str	r2, [sp, #40]	; 0x28
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
    af86:	2b00      	cmp	r3, #0
    af88:	bfb8      	it	lt
    af8a:	425b      	neglt	r3, r3
    af8c:	469b      	mov	fp, r3
    af8e:	2a00      	cmp	r2, #0
    af90:	bfb8      	it	lt
    af92:	4252      	neglt	r2, r2
    af94:	4690      	mov	r8, r2
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
    af96:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
    af9a:	4293      	cmp	r3, r2
    af9c:	bfc7      	ittee	gt
    af9e:	0153      	lslgt	r3, r2, #5
    afa0:	fb93 f3fb 	sdivgt	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
    afa4:	ea4f 134b 	movle.w	r3, fp, lsl #5
    afa8:	fb93 f3f2 	sdivle	r3, r3, r2

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
    afac:	4a8f      	ldr	r2, [pc, #572]	; (b1ec <lv_draw_line+0x334>)
    afae:	5cd3      	ldrb	r3, [r2, r3]
    afb0:	fb09 f903 	mul.w	r9, r9, r3
    afb4:	f109 093f 	add.w	r9, r9, #63	; 0x3f
    afb8:	ea4f 13e9 	mov.w	r3, r9, asr #7
    afbc:	461f      	mov	r7, r3
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
    afbe:	b29b      	uxth	r3, r3
    afc0:	9805      	ldr	r0, [sp, #20]
    afc2:	4582      	cmp	sl, r0
    afc4:	bfd4      	ite	le
    afc6:	ebc3 020a 	rsble	r2, r3, sl
    afca:	ebc3 0200 	rsbgt	r2, r3, r0
    afce:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
    afd2:	4582      	cmp	sl, r0
    afd4:	bfac      	ite	ge
    afd6:	eb03 020a 	addge.w	r2, r3, sl
    afda:	181a      	addlt	r2, r3, r0
    afdc:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
    afe0:	42b5      	cmp	r5, r6
    afe2:	bfd4      	ite	le
    afe4:	ebc3 0205 	rsble	r2, r3, r5
    afe8:	ebc3 0206 	rsbgt	r2, r3, r6
    afec:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
    aff0:	42b5      	cmp	r5, r6
    aff2:	bfac      	ite	ge
    aff4:	195b      	addge	r3, r3, r5
    aff6:	199b      	addlt	r3, r3, r6
    aff8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
    affc:	aa48      	add	r2, sp, #288	; 0x120
    affe:	a90e      	add	r1, sp, #56	; 0x38
    b000:	4608      	mov	r0, r1
    b002:	4b79      	ldr	r3, [pc, #484]	; (b1e8 <lv_draw_line+0x330>)
    b004:	4798      	blx	r3
    if(is_common == false) return;
    b006:	2800      	cmp	r0, #0
    b008:	f000 8372 	beq.w	b6f0 <lv_draw_line+0x838>
    int32_t w_half0 = w >> 1;
    b00c:	ea4f 2929 	mov.w	r9, r9, asr #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    b010:	f007 0301 	and.w	r3, r7, #1
    b014:	444b      	add	r3, r9
    b016:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
    b018:	45c3      	cmp	fp, r8
    b01a:	f340 82b6 	ble.w	b58a <lv_draw_line+0x6d2>
        if(xdiff > 0) {
    b01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b020:	2a00      	cmp	r2, #0
    b022:	f340 828e 	ble.w	b542 <lv_draw_line+0x68a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    b026:	fa1f fb86 	uxth.w	fp, r6
    b02a:	fa1f f389 	uxth.w	r3, r9
    b02e:	fa1f f985 	uxth.w	r9, r5
    b032:	ebab 0203 	sub.w	r2, fp, r3
    b036:	2100      	movs	r1, #0
    b038:	9101      	str	r1, [sp, #4]
    b03a:	eba9 0303 	sub.w	r3, r9, r3
    b03e:	b21b      	sxth	r3, r3
    b040:	9300      	str	r3, [sp, #0]
    b042:	4653      	mov	r3, sl
    b044:	b212      	sxth	r2, r2
    b046:	9905      	ldr	r1, [sp, #20]
    b048:	a812      	add	r0, sp, #72	; 0x48
    b04a:	4f69      	ldr	r7, [pc, #420]	; (b1f0 <lv_draw_line+0x338>)
    b04c:	47b8      	blx	r7
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    b04e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    b052:	eb0b 0208 	add.w	r2, fp, r8
    b056:	2301      	movs	r3, #1
    b058:	9301      	str	r3, [sp, #4]
    b05a:	44c1      	add	r9, r8
    b05c:	fa0f f389 	sxth.w	r3, r9
    b060:	9300      	str	r3, [sp, #0]
    b062:	4653      	mov	r3, sl
    b064:	b212      	sxth	r2, r2
    b066:	9905      	ldr	r1, [sp, #20]
    b068:	a81d      	add	r0, sp, #116	; 0x74
    b06a:	47b8      	blx	r7
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
    b06c:	2100      	movs	r1, #0
    b06e:	a812      	add	r0, sp, #72	; 0x48
    b070:	f8df 819c 	ldr.w	r8, [pc, #412]	; b210 <lv_draw_line+0x358>
    b074:	47c0      	blx	r8
    b076:	900b      	str	r0, [sp, #44]	; 0x2c
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
    b078:	2100      	movs	r1, #0
    b07a:	a81d      	add	r0, sp, #116	; 0x74
    b07c:	47c0      	blx	r8
    b07e:	900c      	str	r0, [sp, #48]	; 0x30
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
    b080:	7a63      	ldrb	r3, [r4, #9]
    b082:	f013 0f10 	tst.w	r3, #16
    b086:	f000 82a4 	beq.w	b5d2 <lv_draw_line+0x71a>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
    b08a:	f04f 33ff 	mov.w	r3, #4294967295
    b08e:	930d      	str	r3, [sp, #52]	; 0x34
    int16_t mask_top_id = LV_MASK_ID_INV;
    b090:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    b092:	4b58      	ldr	r3, [pc, #352]	; (b1f4 <lv_draw_line+0x33c>)
    b094:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    b096:	4b58      	ldr	r3, [pc, #352]	; (b1f8 <lv_draw_line+0x340>)
    b098:	4798      	blx	r3
    b09a:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
    b09c:	8a06      	ldrh	r6, [r0, #16]
    b09e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
    b0a2:	1bad      	subs	r5, r5, r6
    b0a4:	b2aa      	uxth	r2, r5
    b0a6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    draw_area.y1 -= disp_area->y1;
    b0aa:	8a40      	ldrh	r0, [r0, #18]
    b0ac:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
    b0b0:	1a09      	subs	r1, r1, r0
    b0b2:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
    b0b6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    b0ba:	1b9b      	subs	r3, r3, r6
    b0bc:	b29b      	uxth	r3, r3
    b0be:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
    b0c2:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
    b0c6:	1a09      	subs	r1, r1, r0
    b0c8:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    b0cc:	1c5d      	adds	r5, r3, #1
    b0ce:	1aad      	subs	r5, r5, r2
    b0d0:	b22d      	sxth	r5, r5
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    b0d2:	a80e      	add	r0, sp, #56	; 0x38
    b0d4:	4b49      	ldr	r3, [pc, #292]	; (b1fc <lv_draw_line+0x344>)
    b0d6:	4798      	blx	r3
    b0d8:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
    b0dc:	f0c0 82a2 	bcc.w	b624 <lv_draw_line+0x76c>
    b0e0:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
    b0e4:	4658      	mov	r0, fp
    b0e6:	4b46      	ldr	r3, [pc, #280]	; (b200 <lv_draw_line+0x348>)
    b0e8:	4798      	blx	r3
    b0ea:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
    b0ec:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    b0f0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    b0f4:	441a      	add	r2, r3
    b0f6:	b212      	sxth	r2, r2
    b0f8:	9205      	str	r2, [sp, #20]
    b0fa:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
    b0fe:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    b102:	4413      	add	r3, r2
    b104:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
    b108:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    b10c:	f8ba 2012 	ldrh.w	r2, [sl, #18]
    b110:	4413      	add	r3, r2
    b112:	b21b      	sxth	r3, r3
    b114:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
    b118:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
    b11c:	4659      	mov	r1, fp
    b11e:	4b39      	ldr	r3, [pc, #228]	; (b204 <lv_draw_line+0x34c>)
    b120:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    b122:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    b126:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
    b12a:	4416      	add	r6, r2
    b12c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    b130:	4413      	add	r3, r2
    b132:	429e      	cmp	r6, r3
    b134:	f300 82b9 	bgt.w	b6aa <lv_draw_line+0x7f2>
    b138:	2700      	movs	r7, #0
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
    b13a:	9409      	str	r4, [sp, #36]	; 0x24
    b13c:	e2a0      	b.n	b680 <lv_draw_line+0x7c8>
    if(point1->x == point2->x && point1->y == point2->y) return;
    b13e:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
    b142:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
    b146:	45a6      	cmp	lr, r4
    b148:	f47f aec9 	bne.w	aede <lv_draw_line+0x26>
    b14c:	e2d4      	b.n	b6f8 <lv_draw_line+0x840>
    lv_opa_t opa = dsc->opa;
    b14e:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    b152:	4b28      	ldr	r3, [pc, #160]	; (b1f4 <lv_draw_line+0x33c>)
    b154:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    b156:	4b28      	ldr	r3, [pc, #160]	; (b1f8 <lv_draw_line+0x340>)
    b158:	4798      	blx	r3
    b15a:	4607      	mov	r7, r0
    int32_t w = dsc->width - 1;
    b15c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    b160:	3b01      	subs	r3, #1
    int32_t w_half0 = w >> 1;
    b162:	105e      	asrs	r6, r3, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    b164:	f003 0301 	and.w	r3, r3, #1
    b168:	199d      	adds	r5, r3, r6
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    b16a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    b16e:	2b00      	cmp	r3, #0
    b170:	d035      	beq.n	b1de <lv_draw_line+0x326>
    b172:	f9b4 8004 	ldrsh.w	r8, [r4, #4]
    b176:	f118 0800 	adds.w	r8, r8, #0
    b17a:	bf18      	it	ne
    b17c:	f04f 0801 	movne.w	r8, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    b180:	4b21      	ldr	r3, [pc, #132]	; (b208 <lv_draw_line+0x350>)
    b182:	4798      	blx	r3
    b184:	bb70      	cbnz	r0, b1e4 <lv_draw_line+0x32c>
    else if(dashed) simple_mode = false;
    b186:	f088 0201 	eor.w	r2, r8, #1
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
    b18a:	9b07      	ldr	r3, [sp, #28]
    b18c:	f9b3 3000 	ldrsh.w	r3, [r3]
    b190:	9906      	ldr	r1, [sp, #24]
    b192:	f9b1 1000 	ldrsh.w	r1, [r1]
    b196:	4618      	mov	r0, r3
    b198:	428b      	cmp	r3, r1
    b19a:	bfa8      	it	ge
    b19c:	4608      	movge	r0, r1
    b19e:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
    b1a2:	428b      	cmp	r3, r1
    b1a4:	bfb8      	it	lt
    b1a6:	460b      	movlt	r3, r1
    b1a8:	3b01      	subs	r3, #1
    b1aa:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
    b1ae:	9906      	ldr	r1, [sp, #24]
    b1b0:	884b      	ldrh	r3, [r1, #2]
    b1b2:	1b5d      	subs	r5, r3, r5
    b1b4:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
    b1b8:	4433      	add	r3, r6
    b1ba:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    b1be:	b34a      	cbz	r2, b214 <lv_draw_line+0x35c>
                       dsc->blend_mode);
    b1c0:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    b1c2:	f003 0303 	and.w	r3, r3, #3
    b1c6:	9302      	str	r3, [sp, #8]
    b1c8:	f8cd 9004 	str.w	r9, [sp, #4]
    b1cc:	2301      	movs	r3, #1
    b1ce:	9300      	str	r3, [sp, #0]
    b1d0:	2300      	movs	r3, #0
    b1d2:	8822      	ldrh	r2, [r4, #0]
    b1d4:	a928      	add	r1, sp, #160	; 0xa0
    b1d6:	a848      	add	r0, sp, #288	; 0x120
    b1d8:	4d0c      	ldr	r5, [pc, #48]	; (b20c <lv_draw_line+0x354>)
    b1da:	47a8      	blx	r5
    b1dc:	e288      	b.n	b6f0 <lv_draw_line+0x838>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    b1de:	f04f 0800 	mov.w	r8, #0
    b1e2:	e7cd      	b.n	b180 <lv_draw_line+0x2c8>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    b1e4:	2200      	movs	r2, #0
    b1e6:	e7d0      	b.n	b18a <lv_draw_line+0x2d2>
    b1e8:	00011ac1 	.word	0x00011ac1
    b1ec:	0001c488 	.word	0x0001c488
    b1f0:	0000c491 	.word	0x0000c491
    b1f4:	00006511 	.word	0x00006511
    b1f8:	00011585 	.word	0x00011585
    b1fc:	00011aa5 	.word	0x00011aa5
    b200:	00012ee5 	.word	0x00012ee5
    b204:	00013195 	.word	0x00013195
    b208:	0000c46d 	.word	0x0000c46d
    b20c:	00007cf9 	.word	0x00007cf9
    b210:	0000c369 	.word	0x0000c369
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    b214:	aa28      	add	r2, sp, #160	; 0xa0
    b216:	a948      	add	r1, sp, #288	; 0x120
    b218:	4610      	mov	r0, r2
    b21a:	4ba1      	ldr	r3, [pc, #644]	; (b4a0 <lv_draw_line+0x5e8>)
    b21c:	4798      	blx	r3
        if(!is_common) return;
    b21e:	2800      	cmp	r0, #0
    b220:	f000 8266 	beq.w	b6f0 <lv_draw_line+0x838>
        draw_area.x1 -= disp_area->x1;
    b224:	f9bd e0a0 	ldrsh.w	lr, [sp, #160]	; 0xa0
    b228:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
    b22c:	b28b      	uxth	r3, r1
    b22e:	ebae 0203 	sub.w	r2, lr, r3
    b232:	b292      	uxth	r2, r2
    b234:	fa0f fc82 	sxth.w	ip, r2
    b238:	f8ad c0a0 	strh.w	ip, [sp, #160]	; 0xa0
        draw_area.y1 -= disp_area->y1;
    b23c:	f9bd 00a2 	ldrsh.w	r0, [sp, #162]	; 0xa2
    b240:	f8b7 9012 	ldrh.w	r9, [r7, #18]
    b244:	eba0 0509 	sub.w	r5, r0, r9
    b248:	f8ad 50a2 	strh.w	r5, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
    b24c:	f9bd 60a4 	ldrsh.w	r6, [sp, #164]	; 0xa4
    b250:	1af3      	subs	r3, r6, r3
    b252:	b29b      	uxth	r3, r3
    b254:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
    b258:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
    b25c:	eba5 0509 	sub.w	r5, r5, r9
    b260:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
    b264:	3301      	adds	r3, #1
    b266:	1a9a      	subs	r2, r3, r2
    b268:	b215      	sxth	r5, r2
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    b26a:	f8ad e0cc 	strh.w	lr, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    b26e:	f8ad 60d0 	strh.w	r6, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    b272:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    b276:	f8ad 00d2 	strh.w	r0, [sp, #210]	; 0xd2
        if(dashed) {
    b27a:	f1b8 0f00 	cmp.w	r8, #0
    b27e:	d01c      	beq.n	b2ba <lv_draw_line+0x402>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    b280:	4461      	add	r1, ip
    b282:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    b286:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    b28a:	441a      	add	r2, r3
    b28c:	fb91 f3f2 	sdiv	r3, r1, r2
    b290:	fb02 1113 	mls	r1, r2, r3, r1
    b294:	b20b      	sxth	r3, r1
    b296:	930a      	str	r3, [sp, #40]	; 0x28
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    b298:	9509      	str	r5, [sp, #36]	; 0x24
    b29a:	4628      	mov	r0, r5
    b29c:	4b81      	ldr	r3, [pc, #516]	; (b4a4 <lv_draw_line+0x5ec>)
    b29e:	4798      	blx	r3
    b2a0:	4682      	mov	sl, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    b2a2:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
    b2a6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    b2aa:	42b3      	cmp	r3, r6
    b2ac:	db59      	blt.n	b362 <lv_draw_line+0x4aa>
            _lv_memset_ff(mask_buf, draw_area_w);
    b2ae:	f8df 9210 	ldr.w	r9, [pc, #528]	; b4c0 <lv_draw_line+0x608>
            _lv_blend_fill(clip, &fill_area,
    b2b2:	f8df b208 	ldr.w	fp, [pc, #520]	; b4bc <lv_draw_line+0x604>
    b2b6:	9505      	str	r5, [sp, #20]
    b2b8:	e035      	b.n	b326 <lv_draw_line+0x46e>
        if(dashed) {
    b2ba:	2100      	movs	r1, #0
    b2bc:	e7ea      	b.n	b294 <lv_draw_line+0x3dc>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    b2be:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
    b2c2:	4473      	add	r3, lr
    b2c4:	429a      	cmp	r2, r3
                            mask_buf[i] = 0x00;
    b2c6:	bfba      	itte	lt
    b2c8:	f80a 1000 	strblt.w	r1, [sl, r0]
    b2cc:	4613      	movlt	r3, r2
                            dash_cnt = 0;
    b2ce:	460b      	movge	r3, r1
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    b2d0:	3001      	adds	r0, #1
    b2d2:	b200      	sxth	r0, r0
    b2d4:	3301      	adds	r3, #1
    b2d6:	b21a      	sxth	r2, r3
    b2d8:	4285      	cmp	r5, r0
    b2da:	dd07      	ble.n	b2ec <lv_draw_line+0x434>
                        if(dash_cnt <= dsc->dash_width) {
    b2dc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
    b2e0:	4293      	cmp	r3, r2
    b2e2:	dbec      	blt.n	b2be <lv_draw_line+0x406>
                            i += diff;
    b2e4:	4418      	add	r0, r3
    b2e6:	1a80      	subs	r0, r0, r2
    b2e8:	b200      	sxth	r0, r0
    b2ea:	e7f1      	b.n	b2d0 <lv_draw_line+0x418>
    b2ec:	9505      	str	r5, [sp, #20]
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    b2ee:	2002      	movs	r0, #2
                           dsc->blend_mode);
    b2f0:	7a63      	ldrb	r3, [r4, #9]
            _lv_blend_fill(clip, &fill_area,
    b2f2:	f003 0303 	and.w	r3, r3, #3
    b2f6:	9302      	str	r3, [sp, #8]
    b2f8:	7a23      	ldrb	r3, [r4, #8]
    b2fa:	9301      	str	r3, [sp, #4]
    b2fc:	9000      	str	r0, [sp, #0]
    b2fe:	4653      	mov	r3, sl
    b300:	8822      	ldrh	r2, [r4, #0]
    b302:	a933      	add	r1, sp, #204	; 0xcc
    b304:	a848      	add	r0, sp, #288	; 0x120
    b306:	47d8      	blx	fp
            fill_area.y1++;
    b308:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    b30c:	3301      	adds	r3, #1
    b30e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    b312:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    b316:	3301      	adds	r3, #1
    b318:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    b31c:	3601      	adds	r6, #1
    b31e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    b322:	429e      	cmp	r6, r3
    b324:	dc1d      	bgt.n	b362 <lv_draw_line+0x4aa>
            _lv_memset_ff(mask_buf, draw_area_w);
    b326:	9909      	ldr	r1, [sp, #36]	; 0x24
    b328:	4650      	mov	r0, sl
    b32a:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    b32c:	8a7a      	ldrh	r2, [r7, #18]
    b32e:	4432      	add	r2, r6
    b330:	8a39      	ldrh	r1, [r7, #16]
    b332:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    b336:	4419      	add	r1, r3
    b338:	9b05      	ldr	r3, [sp, #20]
    b33a:	b212      	sxth	r2, r2
    b33c:	b209      	sxth	r1, r1
    b33e:	4650      	mov	r0, sl
    b340:	4d59      	ldr	r5, [pc, #356]	; (b4a8 <lv_draw_line+0x5f0>)
    b342:	47a8      	blx	r5
            if(dashed) {
    b344:	f1b8 0f00 	cmp.w	r8, #0
    b348:	d0d2      	beq.n	b2f0 <lv_draw_line+0x438>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    b34a:	2800      	cmp	r0, #0
    b34c:	d0d0      	beq.n	b2f0 <lv_draw_line+0x438>
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
    b34e:	9b05      	ldr	r3, [sp, #20]
    b350:	2b00      	cmp	r3, #0
    b352:	dd04      	ble.n	b35e <lv_draw_line+0x4a6>
    b354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b356:	2000      	movs	r0, #0
                            dash_cnt = 0;
    b358:	4601      	mov	r1, r0
    b35a:	461d      	mov	r5, r3
    b35c:	e7be      	b.n	b2dc <lv_draw_line+0x424>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    b35e:	2002      	movs	r0, #2
    b360:	e7c6      	b.n	b2f0 <lv_draw_line+0x438>
        _lv_mem_buf_release(mask_buf);
    b362:	4650      	mov	r0, sl
    b364:	4b51      	ldr	r3, [pc, #324]	; (b4ac <lv_draw_line+0x5f4>)
    b366:	4798      	blx	r3
    b368:	e1c2      	b.n	b6f0 <lv_draw_line+0x838>
    lv_opa_t opa = dsc->opa;
    b36a:	f894 9008 	ldrb.w	r9, [r4, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    b36e:	4b50      	ldr	r3, [pc, #320]	; (b4b0 <lv_draw_line+0x5f8>)
    b370:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    b372:	4b50      	ldr	r3, [pc, #320]	; (b4b4 <lv_draw_line+0x5fc>)
    b374:	4798      	blx	r3
    b376:	4680      	mov	r8, r0
    int32_t w = dsc->width - 1;
    b378:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
    b37c:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
    b37e:	106f      	asrs	r7, r5, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
    b380:	f005 0501 	and.w	r5, r5, #1
    b384:	443d      	add	r5, r7
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
    b386:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    b38a:	b12b      	cbz	r3, b398 <lv_draw_line+0x4e0>
    b38c:	f9b4 6004 	ldrsh.w	r6, [r4, #4]
    b390:	3600      	adds	r6, #0
    b392:	bf18      	it	ne
    b394:	2601      	movne	r6, #1
    b396:	e000      	b.n	b39a <lv_draw_line+0x4e2>
    b398:	2600      	movs	r6, #0
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    b39a:	4b47      	ldr	r3, [pc, #284]	; (b4b8 <lv_draw_line+0x600>)
    b39c:	4798      	blx	r3
    b39e:	b910      	cbnz	r0, b3a6 <lv_draw_line+0x4ee>
    else if(dashed) simple_mode = false;
    b3a0:	f086 0201 	eor.w	r2, r6, #1
    b3a4:	e000      	b.n	b3a8 <lv_draw_line+0x4f0>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
    b3a6:	2200      	movs	r2, #0
    draw_area.x1 = point1->x - w_half1;
    b3a8:	9906      	ldr	r1, [sp, #24]
    b3aa:	880b      	ldrh	r3, [r1, #0]
    b3ac:	1b5d      	subs	r5, r3, r5
    b3ae:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    draw_area.x2 = point1->x + w_half0;
    b3b2:	441f      	add	r7, r3
    b3b4:	f8ad 70a4 	strh.w	r7, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    b3b8:	9b07      	ldr	r3, [sp, #28]
    b3ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    b3be:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    b3c2:	4618      	mov	r0, r3
    b3c4:	428b      	cmp	r3, r1
    b3c6:	bfa8      	it	ge
    b3c8:	4608      	movge	r0, r1
    b3ca:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
    b3ce:	428b      	cmp	r3, r1
    b3d0:	bfb8      	it	lt
    b3d2:	460b      	movlt	r3, r1
    b3d4:	3b01      	subs	r3, #1
    b3d6:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
    b3da:	b172      	cbz	r2, b3fa <lv_draw_line+0x542>
                       dsc->blend_mode);
    b3dc:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(clip, &draw_area,
    b3de:	f003 0303 	and.w	r3, r3, #3
    b3e2:	9302      	str	r3, [sp, #8]
    b3e4:	f8cd 9004 	str.w	r9, [sp, #4]
    b3e8:	2301      	movs	r3, #1
    b3ea:	9300      	str	r3, [sp, #0]
    b3ec:	2300      	movs	r3, #0
    b3ee:	8822      	ldrh	r2, [r4, #0]
    b3f0:	a928      	add	r1, sp, #160	; 0xa0
    b3f2:	a848      	add	r0, sp, #288	; 0x120
    b3f4:	4d31      	ldr	r5, [pc, #196]	; (b4bc <lv_draw_line+0x604>)
    b3f6:	47a8      	blx	r5
    b3f8:	e17a      	b.n	b6f0 <lv_draw_line+0x838>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
    b3fa:	aa28      	add	r2, sp, #160	; 0xa0
    b3fc:	a948      	add	r1, sp, #288	; 0x120
    b3fe:	4610      	mov	r0, r2
    b400:	4b27      	ldr	r3, [pc, #156]	; (b4a0 <lv_draw_line+0x5e8>)
    b402:	4798      	blx	r3
        if(!is_common) return;
    b404:	2800      	cmp	r0, #0
    b406:	f000 8173 	beq.w	b6f0 <lv_draw_line+0x838>
        draw_area.x1 -= vdb->area.x1;
    b40a:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
    b40e:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    b412:	1ac5      	subs	r5, r0, r3
    b414:	b2ad      	uxth	r5, r5
    b416:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
    b41a:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
    b41e:	f8b8 7012 	ldrh.w	r7, [r8, #18]
    b422:	1bd1      	subs	r1, r2, r7
    b424:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
    b428:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
    b42c:	1acb      	subs	r3, r1, r3
    b42e:	b29b      	uxth	r3, r3
    b430:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
        draw_area.y2 -= vdb->area.y1;
    b434:	f8bd e0a6 	ldrh.w	lr, [sp, #166]	; 0xa6
    b438:	ebae 0707 	sub.w	r7, lr, r7
    b43c:	f8ad 70a6 	strh.w	r7, [sp, #166]	; 0xa6
    b440:	3301      	adds	r3, #1
    b442:	1b5b      	subs	r3, r3, r5
    b444:	b21b      	sxth	r3, r3
    b446:	9309      	str	r3, [sp, #36]	; 0x24
        fill_area.x1 = draw_area.x1 + disp_area->x1;
    b448:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        fill_area.x2 = draw_area.x2 + disp_area->x1;
    b44c:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        fill_area.y1 = draw_area.y1 + disp_area->y1;
    b450:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        fill_area.y2 = fill_area.y1;
    b454:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    b458:	930a      	str	r3, [sp, #40]	; 0x28
    b45a:	4618      	mov	r0, r3
    b45c:	4b11      	ldr	r3, [pc, #68]	; (b4a4 <lv_draw_line+0x5ec>)
    b45e:	4798      	blx	r3
    b460:	9005      	str	r0, [sp, #20]
        if(dashed) {
    b462:	b176      	cbz	r6, b482 <lv_draw_line+0x5ca>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
    b464:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    b468:	f9bd 70a0 	ldrsh.w	r7, [sp, #160]	; 0xa0
    b46c:	443a      	add	r2, r7
    b46e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    b472:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
    b476:	443b      	add	r3, r7
    b478:	fb92 f7f3 	sdiv	r7, r2, r3
    b47c:	fb03 2717 	mls	r7, r3, r7, r2
    b480:	e000      	b.n	b484 <lv_draw_line+0x5cc>
        if(dashed) {
    b482:	2700      	movs	r7, #0
    b484:	b23f      	sxth	r7, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    b486:	f9bd 50a2 	ldrsh.w	r5, [sp, #162]	; 0xa2
    b48a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    b48e:	429d      	cmp	r5, r3
    b490:	dc53      	bgt.n	b53a <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    b492:	f8df 902c 	ldr.w	r9, [pc, #44]	; b4c0 <lv_draw_line+0x608>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    b496:	f8df a010 	ldr.w	sl, [pc, #16]	; b4a8 <lv_draw_line+0x5f0>
            _lv_blend_fill(clip, &fill_area,
    b49a:	f8df b020 	ldr.w	fp, [pc, #32]	; b4bc <lv_draw_line+0x604>
    b49e:	e02c      	b.n	b4fa <lv_draw_line+0x642>
    b4a0:	00011ac1 	.word	0x00011ac1
    b4a4:	00012ee5 	.word	0x00012ee5
    b4a8:	0000c3c5 	.word	0x0000c3c5
    b4ac:	00012b19 	.word	0x00012b19
    b4b0:	00006511 	.word	0x00006511
    b4b4:	00011585 	.word	0x00011585
    b4b8:	0000c46d 	.word	0x0000c46d
    b4bc:	00007cf9 	.word	0x00007cf9
    b4c0:	00013195 	.word	0x00013195
                dash_cnt ++;
    b4c4:	3701      	adds	r7, #1
    b4c6:	b23f      	sxth	r7, r7
            _lv_blend_fill(clip, &fill_area,
    b4c8:	2300      	movs	r3, #0
    b4ca:	9302      	str	r3, [sp, #8]
    b4cc:	7a23      	ldrb	r3, [r4, #8]
    b4ce:	9301      	str	r3, [sp, #4]
    b4d0:	9000      	str	r0, [sp, #0]
    b4d2:	9b05      	ldr	r3, [sp, #20]
    b4d4:	8822      	ldrh	r2, [r4, #0]
    b4d6:	a933      	add	r1, sp, #204	; 0xcc
    b4d8:	a848      	add	r0, sp, #288	; 0x120
    b4da:	47d8      	blx	fp
            fill_area.y1++;
    b4dc:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    b4e0:	3301      	adds	r3, #1
    b4e2:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
    b4e6:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
    b4ea:	3301      	adds	r3, #1
    b4ec:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    b4f0:	3501      	adds	r5, #1
    b4f2:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
    b4f6:	429d      	cmp	r5, r3
    b4f8:	dc1f      	bgt.n	b53a <lv_draw_line+0x682>
            _lv_memset_ff(mask_buf, draw_area_w);
    b4fa:	990a      	ldr	r1, [sp, #40]	; 0x28
    b4fc:	9805      	ldr	r0, [sp, #20]
    b4fe:	47c8      	blx	r9
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    b500:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    b504:	442a      	add	r2, r5
    b506:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    b50a:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
    b50e:	4419      	add	r1, r3
    b510:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b512:	b212      	sxth	r2, r2
    b514:	b209      	sxth	r1, r1
    b516:	9805      	ldr	r0, [sp, #20]
    b518:	47d0      	blx	sl
            if(dashed) {
    b51a:	2e00      	cmp	r6, #0
    b51c:	d0d4      	beq.n	b4c8 <lv_draw_line+0x610>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
    b51e:	2800      	cmp	r0, #0
    b520:	d0d0      	beq.n	b4c4 <lv_draw_line+0x60c>
                    if(dash_cnt > dsc->dash_width) {
    b522:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
    b526:	42ba      	cmp	r2, r7
    b528:	bfb8      	it	lt
    b52a:	2000      	movlt	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
    b52c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
    b530:	4413      	add	r3, r2
                        dash_cnt = 0;
    b532:	429f      	cmp	r7, r3
    b534:	bfa8      	it	ge
    b536:	2700      	movge	r7, #0
    b538:	e7c4      	b.n	b4c4 <lv_draw_line+0x60c>
        _lv_mem_buf_release(mask_buf);
    b53a:	9805      	ldr	r0, [sp, #20]
    b53c:	4b97      	ldr	r3, [pc, #604]	; (b79c <lv_draw_line+0x8e4>)
    b53e:	4798      	blx	r3
    b540:	e0d6      	b.n	b6f0 <lv_draw_line+0x838>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
    b542:	fa1f fb86 	uxth.w	fp, r6
    b546:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    b54a:	b2a9      	uxth	r1, r5
    b54c:	eb0b 0208 	add.w	r2, fp, r8
    b550:	2300      	movs	r3, #0
    b552:	9301      	str	r3, [sp, #4]
    b554:	460f      	mov	r7, r1
    b556:	4488      	add	r8, r1
    b558:	fa0f f388 	sxth.w	r3, r8
    b55c:	9300      	str	r3, [sp, #0]
    b55e:	4653      	mov	r3, sl
    b560:	b212      	sxth	r2, r2
    b562:	9905      	ldr	r1, [sp, #20]
    b564:	a812      	add	r0, sp, #72	; 0x48
    b566:	f8df 8238 	ldr.w	r8, [pc, #568]	; b7a0 <lv_draw_line+0x8e8>
    b56a:	47c0      	blx	r8
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
    b56c:	fa1f f389 	uxth.w	r3, r9
    b570:	ebab 0203 	sub.w	r2, fp, r3
    b574:	2101      	movs	r1, #1
    b576:	9101      	str	r1, [sp, #4]
    b578:	1afb      	subs	r3, r7, r3
    b57a:	b21b      	sxth	r3, r3
    b57c:	9300      	str	r3, [sp, #0]
    b57e:	4653      	mov	r3, sl
    b580:	b212      	sxth	r2, r2
    b582:	9905      	ldr	r1, [sp, #20]
    b584:	a81d      	add	r0, sp, #116	; 0x74
    b586:	47c0      	blx	r8
    b588:	e570      	b.n	b06c <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
    b58a:	f8bd b014 	ldrh.w	fp, [sp, #20]
    b58e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    b592:	fa1f f38a 	uxth.w	r3, sl
    b596:	461f      	mov	r7, r3
    b598:	4443      	add	r3, r8
    b59a:	44d8      	add	r8, fp
    b59c:	2200      	movs	r2, #0
    b59e:	9201      	str	r2, [sp, #4]
    b5a0:	9500      	str	r5, [sp, #0]
    b5a2:	b21b      	sxth	r3, r3
    b5a4:	4632      	mov	r2, r6
    b5a6:	fa0f f188 	sxth.w	r1, r8
    b5aa:	a812      	add	r0, sp, #72	; 0x48
    b5ac:	f8df 81f0 	ldr.w	r8, [pc, #496]	; b7a0 <lv_draw_line+0x8e8>
    b5b0:	47c0      	blx	r8
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
    b5b2:	fa1f f989 	uxth.w	r9, r9
    b5b6:	eba7 0309 	sub.w	r3, r7, r9
    b5ba:	ebab 0909 	sub.w	r9, fp, r9
    b5be:	2201      	movs	r2, #1
    b5c0:	9201      	str	r2, [sp, #4]
    b5c2:	9500      	str	r5, [sp, #0]
    b5c4:	b21b      	sxth	r3, r3
    b5c6:	4632      	mov	r2, r6
    b5c8:	fa0f f189 	sxth.w	r1, r9
    b5cc:	a81d      	add	r0, sp, #116	; 0x74
    b5ce:	47c0      	blx	r8
    b5d0:	e54c      	b.n	b06c <lv_draw_line+0x1b4>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
    b5d2:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    b5d6:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    b5da:	9905      	ldr	r1, [sp, #20]
    b5dc:	eba1 0308 	sub.w	r3, r1, r8
    b5e0:	2203      	movs	r2, #3
    b5e2:	9201      	str	r2, [sp, #4]
    b5e4:	eb09 0206 	add.w	r2, r9, r6
    b5e8:	b212      	sxth	r2, r2
    b5ea:	9200      	str	r2, [sp, #0]
    b5ec:	b21b      	sxth	r3, r3
    b5ee:	4632      	mov	r2, r6
    b5f0:	a828      	add	r0, sp, #160	; 0xa0
    b5f2:	4e6b      	ldr	r6, [pc, #428]	; (b7a0 <lv_draw_line+0x8e8>)
    b5f4:	47b0      	blx	r6
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
    b5f6:	ebaa 0308 	sub.w	r3, sl, r8
    b5fa:	2202      	movs	r2, #2
    b5fc:	9201      	str	r2, [sp, #4]
    b5fe:	eb09 0205 	add.w	r2, r9, r5
    b602:	b212      	sxth	r2, r2
    b604:	9200      	str	r2, [sp, #0]
    b606:	b21b      	sxth	r3, r3
    b608:	462a      	mov	r2, r5
    b60a:	4651      	mov	r1, sl
    b60c:	a833      	add	r0, sp, #204	; 0xcc
    b60e:	47b0      	blx	r6
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
    b610:	2100      	movs	r1, #0
    b612:	a828      	add	r0, sp, #160	; 0xa0
    b614:	4d63      	ldr	r5, [pc, #396]	; (b7a4 <lv_draw_line+0x8ec>)
    b616:	47a8      	blx	r5
    b618:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    b61a:	2100      	movs	r1, #0
    b61c:	a833      	add	r0, sp, #204	; 0xcc
    b61e:	47a8      	blx	r5
    b620:	900d      	str	r0, [sp, #52]	; 0x34
    b622:	e536      	b.n	b092 <lv_draw_line+0x1da>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
    b624:	a80e      	add	r0, sp, #56	; 0x38
    b626:	4b60      	ldr	r3, [pc, #384]	; (b7a8 <lv_draw_line+0x8f0>)
    b628:	4798      	blx	r3
    b62a:	4683      	mov	fp, r0
    b62c:	e55a      	b.n	b0e4 <lv_draw_line+0x22c>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
    b62e:	4629      	mov	r1, r5
    b630:	4640      	mov	r0, r8
    b632:	4b5e      	ldr	r3, [pc, #376]	; (b7ac <lv_draw_line+0x8f4>)
    b634:	4798      	blx	r3
    b636:	e02d      	b.n	b694 <lv_draw_line+0x7dc>
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
    b638:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b63a:	7a53      	ldrb	r3, [r2, #9]
            _lv_blend_fill(&fill_area, clip,
    b63c:	f003 0303 	and.w	r3, r3, #3
    b640:	9302      	str	r3, [sp, #8]
    b642:	7a13      	ldrb	r3, [r2, #8]
    b644:	9301      	str	r3, [sp, #4]
    b646:	2302      	movs	r3, #2
    b648:	9300      	str	r3, [sp, #0]
    b64a:	464b      	mov	r3, r9
    b64c:	8812      	ldrh	r2, [r2, #0]
    b64e:	a948      	add	r1, sp, #288	; 0x120
    b650:	a810      	add	r0, sp, #64	; 0x40
    b652:	4c57      	ldr	r4, [pc, #348]	; (b7b0 <lv_draw_line+0x8f8>)
    b654:	47a0      	blx	r4

            fill_area.y1 = fill_area.y2 + 1;
    b656:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    b65a:	3301      	adds	r3, #1
    b65c:	b21b      	sxth	r3, r3
    b65e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
    b662:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
    b666:	4659      	mov	r1, fp
    b668:	4648      	mov	r0, r9
    b66a:	4b52      	ldr	r3, [pc, #328]	; (b7b4 <lv_draw_line+0x8fc>)
    b66c:	4798      	blx	r3
            mask_p = 0;
    b66e:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
    b670:	3601      	adds	r6, #1
    b672:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
    b676:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
    b67a:	4413      	add	r3, r2
    b67c:	429e      	cmp	r6, r3
    b67e:	dc13      	bgt.n	b6a8 <lv_draw_line+0x7f0>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
    b680:	eb09 0807 	add.w	r8, r9, r7
    b684:	462b      	mov	r3, r5
    b686:	b232      	sxth	r2, r6
    b688:	9905      	ldr	r1, [sp, #20]
    b68a:	4640      	mov	r0, r8
    b68c:	4c4a      	ldr	r4, [pc, #296]	; (b7b8 <lv_draw_line+0x900>)
    b68e:	47a0      	blx	r4
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    b690:	2800      	cmp	r0, #0
    b692:	d0cc      	beq.n	b62e <lv_draw_line+0x776>
        mask_p += draw_area_w;
    b694:	442f      	add	r7, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
    b696:	19eb      	adds	r3, r5, r7
    b698:	459b      	cmp	fp, r3
    b69a:	d9cd      	bls.n	b638 <lv_draw_line+0x780>
            fill_area.y2 ++;
    b69c:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
    b6a0:	3301      	adds	r3, #1
    b6a2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    b6a6:	e7e3      	b.n	b670 <lv_draw_line+0x7b8>
    b6a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
    b6aa:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
    b6ae:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
    b6b2:	429a      	cmp	r2, r3
    b6b4:	d010      	beq.n	b6d8 <lv_draw_line+0x820>
        fill_area.y2--;
    b6b6:	3b01      	subs	r3, #1
    b6b8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
    b6bc:	7a63      	ldrb	r3, [r4, #9]
        _lv_blend_fill(&fill_area, clip,
    b6be:	f003 0303 	and.w	r3, r3, #3
    b6c2:	9302      	str	r3, [sp, #8]
    b6c4:	7a23      	ldrb	r3, [r4, #8]
    b6c6:	9301      	str	r3, [sp, #4]
    b6c8:	2302      	movs	r3, #2
    b6ca:	9300      	str	r3, [sp, #0]
    b6cc:	464b      	mov	r3, r9
    b6ce:	8822      	ldrh	r2, [r4, #0]
    b6d0:	a948      	add	r1, sp, #288	; 0x120
    b6d2:	a810      	add	r0, sp, #64	; 0x40
    b6d4:	4d36      	ldr	r5, [pc, #216]	; (b7b0 <lv_draw_line+0x8f8>)
    b6d6:	47a8      	blx	r5

    }

    _lv_mem_buf_release(mask_buf);
    b6d8:	4648      	mov	r0, r9
    b6da:	4b30      	ldr	r3, [pc, #192]	; (b79c <lv_draw_line+0x8e4>)
    b6dc:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
    b6de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b6e0:	4d36      	ldr	r5, [pc, #216]	; (b7bc <lv_draw_line+0x904>)
    b6e2:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_right_id);
    b6e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    b6e6:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_top_id);
    b6e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    b6ea:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_bottom_id);
    b6ec:	980d      	ldr	r0, [sp, #52]	; 0x34
    b6ee:	47a8      	blx	r5
    if(dsc->round_end || dsc->round_start) {
    b6f0:	7a63      	ldrb	r3, [r4, #9]
    b6f2:	f013 0f0c 	tst.w	r3, #12
    b6f6:	d102      	bne.n	b6fe <lv_draw_line+0x846>
}
    b6f8:	b04b      	add	sp, #300	; 0x12c
    b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_rect_dsc_init(&cir_dsc);
    b6fe:	a833      	add	r0, sp, #204	; 0xcc
    b700:	4b2f      	ldr	r3, [pc, #188]	; (b7c0 <lv_draw_line+0x908>)
    b702:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
    b704:	8823      	ldrh	r3, [r4, #0]
    b706:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
    b70a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b70e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
    b712:	7a23      	ldrb	r3, [r4, #8]
    b714:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        int32_t r = (dsc->width >> 1);
    b718:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    b71c:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
    b71e:	f083 0301 	eor.w	r3, r3, #1
    b722:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
    b726:	7a63      	ldrb	r3, [r4, #9]
    b728:	f013 0f04 	tst.w	r3, #4
    b72c:	d11c      	bne.n	b768 <lv_draw_line+0x8b0>
        if(dsc->round_end) {
    b72e:	7a63      	ldrb	r3, [r4, #9]
    b730:	f013 0f08 	tst.w	r3, #8
    b734:	d0e0      	beq.n	b6f8 <lv_draw_line+0x840>
            cir_area.x1 = point2->x - r;
    b736:	9907      	ldr	r1, [sp, #28]
    b738:	880a      	ldrh	r2, [r1, #0]
    b73a:	b2b6      	uxth	r6, r6
    b73c:	1b93      	subs	r3, r2, r6
    b73e:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
    b742:	8849      	ldrh	r1, [r1, #2]
    b744:	1b8b      	subs	r3, r1, r6
    b746:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
    b74a:	b2ab      	uxth	r3, r5
    b74c:	4432      	add	r2, r6
    b74e:	1ad2      	subs	r2, r2, r3
    b750:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point2->y + r - r_corr ;
    b754:	440e      	add	r6, r1
    b756:	1af3      	subs	r3, r6, r3
    b758:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    b75c:	aa33      	add	r2, sp, #204	; 0xcc
    b75e:	9908      	ldr	r1, [sp, #32]
    b760:	a828      	add	r0, sp, #160	; 0xa0
    b762:	4b18      	ldr	r3, [pc, #96]	; (b7c4 <lv_draw_line+0x90c>)
    b764:	4798      	blx	r3
    b766:	e7c7      	b.n	b6f8 <lv_draw_line+0x840>
            cir_area.x1 = point1->x - r;
    b768:	9806      	ldr	r0, [sp, #24]
    b76a:	8802      	ldrh	r2, [r0, #0]
    b76c:	b2b3      	uxth	r3, r6
    b76e:	1ad1      	subs	r1, r2, r3
    b770:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
    b774:	8840      	ldrh	r0, [r0, #2]
    b776:	1ac1      	subs	r1, r0, r3
    b778:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
    b77c:	b2a9      	uxth	r1, r5
    b77e:	441a      	add	r2, r3
    b780:	1a52      	subs	r2, r2, r1
    b782:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
    b786:	4403      	add	r3, r0
    b788:	1a5b      	subs	r3, r3, r1
    b78a:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
    b78e:	aa33      	add	r2, sp, #204	; 0xcc
    b790:	9908      	ldr	r1, [sp, #32]
    b792:	a828      	add	r0, sp, #160	; 0xa0
    b794:	4b0b      	ldr	r3, [pc, #44]	; (b7c4 <lv_draw_line+0x90c>)
    b796:	4798      	blx	r3
    b798:	e7c9      	b.n	b72e <lv_draw_line+0x876>
    b79a:	bf00      	nop
    b79c:	00012b19 	.word	0x00012b19
    b7a0:	0000c491 	.word	0x0000c491
    b7a4:	0000c369 	.word	0x0000c369
    b7a8:	00011aa5 	.word	0x00011aa5
    b7ac:	000130df 	.word	0x000130df
    b7b0:	00007cf9 	.word	0x00007cf9
    b7b4:	00013195 	.word	0x00013195
    b7b8:	0000c3c5 	.word	0x0000c3c5
    b7bc:	0000c415 	.word	0x0000c415
    b7c0:	0000c811 	.word	0x0000c811
    b7c4:	0000c8d9 	.word	0x0000c8d9

0000b7c8 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
    b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7cc:	9c06      	ldr	r4, [sp, #24]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
    b7ce:	8aa5      	ldrh	r5, [r4, #20]
    b7d0:	1b52      	subs	r2, r2, r5
    b7d2:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
    b7d4:	8a65      	ldrh	r5, [r4, #18]
    b7d6:	1b4d      	subs	r5, r1, r5
    b7d8:	b22d      	sxth	r5, r5

    /*Handle special cases*/
    if(p->steep == 0) {
    b7da:	6a21      	ldr	r1, [r4, #32]
    b7dc:	2900      	cmp	r1, #0
    b7de:	d14b      	bne.n	b878 <lv_draw_mask_line+0xb0>
        /*Horizontal*/
        if(p->flat) {
    b7e0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    b7e4:	f011 0f01 	tst.w	r1, #1
    b7e8:	d016      	beq.n	b818 <lv_draw_mask_line+0x50>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
    b7ea:	7c23      	ldrb	r3, [r4, #16]
    b7ec:	f003 0303 	and.w	r3, r3, #3
    b7f0:	2b01      	cmp	r3, #1
    b7f2:	f240 81db 	bls.w	bbac <lv_draw_mask_line+0x3e4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b7f6:	2b02      	cmp	r3, #2
    b7f8:	d004      	beq.n	b804 <lv_draw_mask_line+0x3c>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b7fa:	2b03      	cmp	r3, #3
    b7fc:	d006      	beq.n	b80c <lv_draw_mask_line+0x44>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
    b7fe:	2000      	movs	r0, #0
    b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b804:	3201      	adds	r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b806:	0fd0      	lsrs	r0, r2, #31
    b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b80c:	2a00      	cmp	r2, #0
    b80e:	bfd4      	ite	le
    b810:	2000      	movle	r0, #0
    b812:	2001      	movgt	r0, #1
    b814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
    b818:	7c22      	ldrb	r2, [r4, #16]
    b81a:	f002 0203 	and.w	r2, r2, #3
    b81e:	1e91      	subs	r1, r2, #2
    b820:	b2c9      	uxtb	r1, r1
    b822:	2901      	cmp	r1, #1
    b824:	f240 81c5 	bls.w	bbb2 <lv_draw_mask_line+0x3ea>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b828:	2a01      	cmp	r2, #1
    b82a:	d00c      	beq.n	b846 <lv_draw_mask_line+0x7e>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
    b82c:	b9b2      	cbnz	r2, b85c <lv_draw_mask_line+0x94>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b82e:	18e9      	adds	r1, r5, r3
    b830:	f100 81c2 	bmi.w	bbb8 <lv_draw_mask_line+0x3f0>
                else {
                    int32_t k = - abs_x;
    b834:	426d      	negs	r5, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    b836:	2d00      	cmp	r5, #0
    b838:	f2c0 81c1 	blt.w	bbbe <lv_draw_mask_line+0x3f6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    b83c:	42ab      	cmp	r3, r5
    b83e:	dc07      	bgt.n	b850 <lv_draw_mask_line+0x88>
                    return  LV_DRAW_MASK_RES_CHANGED;
    b840:	2002      	movs	r0, #2
    b842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
    b846:	2d00      	cmp	r5, #0
    b848:	dd08      	ble.n	b85c <lv_draw_mask_line+0x94>
    b84a:	2001      	movs	r0, #1
    b84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
    b850:	4428      	add	r0, r5
    b852:	4bcd      	ldr	r3, [pc, #820]	; (bb88 <lv_draw_mask_line+0x3c0>)
    b854:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    b856:	2002      	movs	r0, #2
    b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    b85c:	42dd      	cmn	r5, r3
    b85e:	f100 81b1 	bmi.w	bbc4 <lv_draw_mask_line+0x3fc>
                else {
                    int32_t k = - abs_x;
    b862:	4269      	negs	r1, r5
    b864:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k < 0) k = 0;
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    b868:	428b      	cmp	r3, r1
    b86a:	f340 81ae 	ble.w	bbca <lv_draw_mask_line+0x402>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
    b86e:	4bc6      	ldr	r3, [pc, #792]	; (bb88 <lv_draw_mask_line+0x3c0>)
    b870:	4798      	blx	r3
                    return  LV_DRAW_MASK_RES_CHANGED;
    b872:	2002      	movs	r0, #2
    b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
    b878:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    b87c:	f016 0f01 	tst.w	r6, #1
    b880:	d10f      	bne.n	b8a2 <lv_draw_mask_line+0xda>
{
    int32_t k;
    int32_t x_at_y;
    /* At the beginning of the mask if the limit line is greater then the mask's y.
     * Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    b882:	69a7      	ldr	r7, [r4, #24]
    b884:	fb02 f107 	mul.w	r1, r2, r7
    b888:	1289      	asrs	r1, r1, #10
    if(p->xy_steep > 0) x_at_y++;
    b88a:	2f00      	cmp	r7, #0
    b88c:	bfcc      	ite	gt
    b88e:	f101 0e01 	addgt.w	lr, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
    b892:	468e      	movle	lr, r1
    if(x_at_y < abs_x) {
    b894:	4575      	cmp	r5, lr
    b896:	f340 8098 	ble.w	b9ca <lv_draw_mask_line+0x202>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b89a:	f3c6 0040 	ubfx	r0, r6, #1, #1
    b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
    b8a2:	69e1      	ldr	r1, [r4, #28]
    b8a4:	fb05 f701 	mul.w	r7, r5, r1
    b8a8:	12bf      	asrs	r7, r7, #10
    if(p->yx_steep > 0) {
    b8aa:	2900      	cmp	r1, #0
    b8ac:	dd06      	ble.n	b8bc <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
    b8ae:	4297      	cmp	r7, r2
    b8b0:	f340 81b8 	ble.w	bc24 <lv_draw_mask_line+0x45c>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b8b4:	f3c6 0040 	ubfx	r0, r6, #1, #1
    b8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(y_at_x < abs_y) {
    b8bc:	4297      	cmp	r7, r2
    b8be:	f280 81ed 	bge.w	bc9c <lv_draw_mask_line+0x4d4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b8c2:	f3c6 0040 	ubfx	r0, r6, #1, #1
    b8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    b8ca:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b8ce:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(p->inv) {
    b8d6:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b8da:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
    b8e2:	2500      	movs	r5, #0
    b8e4:	e1d4      	b.n	bc90 <lv_draw_mask_line+0x4c8>
    b8e6:	46f4      	mov	ip, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b8e8:	f888 c000 	strb.w	ip, [r8]
        px_h -= p->spx;
    b8ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b8ee:	1ad2      	subs	r2, r2, r3
        k++;
    b8f0:	3501      	adds	r5, #1
    b8f2:	3601      	adds	r6, #1
        if(k >= len) break;
    b8f4:	42bd      	cmp	r5, r7
    b8f6:	da49      	bge.n	b98c <lv_draw_mask_line+0x1c4>
    while(px_h > p->spx) {
    b8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b8fa:	429a      	cmp	r2, r3
    b8fc:	dd1d      	ble.n	b93a <lv_draw_mask_line+0x172>
        if(k >= 0 && k < len) {
    b8fe:	2d00      	cmp	r5, #0
    b900:	dbf4      	blt.n	b8ec <lv_draw_mask_line+0x124>
    b902:	42bd      	cmp	r5, r7
    b904:	daf2      	bge.n	b8ec <lv_draw_mask_line+0x124>
            m = px_h - (p->spx >> 1);
    b906:	eba2 0363 	sub.w	r3, r2, r3, asr #1
    b90a:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
    b90c:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
    b910:	f01c 0f02 	tst.w	ip, #2
    b914:	bf1c      	itt	ne
    b916:	43db      	mvnne	r3, r3
    b918:	b2db      	uxtbne	r3, r3
    b91a:	46b0      	mov	r8, r6
            mask_buf[k] = mask_mix(mask_buf[k], m);
    b91c:	f896 c000 	ldrb.w	ip, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b920:	2bf9      	cmp	r3, #249	; 0xf9
    b922:	d8e1      	bhi.n	b8e8 <lv_draw_mask_line+0x120>
    if(mask_new <= LV_OPA_MIN) return 0;
    b924:	2b05      	cmp	r3, #5
    b926:	d9de      	bls.n	b8e6 <lv_draw_mask_line+0x11e>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b928:	fb03 f30c 	mul.w	r3, r3, ip
    b92c:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
    b930:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
    b934:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
    b938:	e7d6      	b.n	b8e8 <lv_draw_mask_line+0x120>
    if(k < len && k >= 0) {
    b93a:	42bd      	cmp	r5, r7
    b93c:	da26      	bge.n	b98c <lv_draw_mask_line+0x1c4>
    b93e:	2d00      	cmp	r5, #0
    b940:	db24      	blt.n	b98c <lv_draw_mask_line+0x1c4>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
    b942:	69a3      	ldr	r3, [r4, #24]
    b944:	fb03 f302 	mul.w	r3, r3, r2
    b948:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
    b94a:	fb02 f203 	mul.w	r2, r2, r3
    b94e:	f3c2 2247 	ubfx	r2, r2, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
    b952:	69e3      	ldr	r3, [r4, #28]
    b954:	2b00      	cmp	r3, #0
    b956:	bfbc      	itt	lt
    b958:	43d2      	mvnlt	r2, r2
    b95a:	b2d2      	uxtblt	r2, r2
        if(p->inv) m = 255 - m;
    b95c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b960:	f013 0f02 	tst.w	r3, #2
    b964:	bf1c      	itt	ne
    b966:	43d2      	mvnne	r2, r2
    b968:	b2d2      	uxtbne	r2, r2
        mask_buf[k] = mask_mix(mask_buf[k], m);
    b96a:	1946      	adds	r6, r0, r5
    b96c:	5d43      	ldrb	r3, [r0, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    b96e:	2af9      	cmp	r2, #249	; 0xf9
    b970:	d80b      	bhi.n	b98a <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    b972:	2a05      	cmp	r2, #5
    b974:	d908      	bls.n	b988 <lv_draw_mask_line+0x1c0>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    b976:	fb02 f203 	mul.w	r2, r2, r3
    b97a:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    b97e:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    b982:	f3c2 53c7 	ubfx	r3, r2, #23, #8
    b986:	e000      	b.n	b98a <lv_draw_mask_line+0x1c2>
    if(mask_new <= LV_OPA_MIN) return 0;
    b988:	2300      	movs	r3, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
    b98a:	7033      	strb	r3, [r6, #0]
    if(p->inv) {
    b98c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b990:	f013 0f02 	tst.w	r3, #2
    b994:	d00a      	beq.n	b9ac <lv_draw_mask_line+0x1e4>
        if(k > len) {
    b996:	428f      	cmp	r7, r1
    b998:	f2c0 811a 	blt.w	bbd0 <lv_draw_mask_line+0x408>
        if(k >= 0) {
    b99c:	2900      	cmp	r1, #0
    b99e:	f2c0 811a 	blt.w	bbd6 <lv_draw_mask_line+0x40e>
            _lv_memset_00(&mask_buf[0], k);
    b9a2:	4b79      	ldr	r3, [pc, #484]	; (bb88 <lv_draw_mask_line+0x3c0>)
    b9a4:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b9a6:	2002      	movs	r0, #2
    b9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(k < 0) {
    b9ac:	3501      	adds	r5, #1
    b9ae:	f100 8115 	bmi.w	bbdc <lv_draw_mask_line+0x414>
        if(k <= len) {
    b9b2:	42bd      	cmp	r5, r7
    b9b4:	dd02      	ble.n	b9bc <lv_draw_mask_line+0x1f4>
    return LV_DRAW_MASK_RES_CHANGED;
    b9b6:	2002      	movs	r0, #2
    b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            _lv_memset_00(&mask_buf[k], len - k);
    b9bc:	1b79      	subs	r1, r7, r5
    b9be:	4428      	add	r0, r5
    b9c0:	4b71      	ldr	r3, [pc, #452]	; (bb88 <lv_draw_mask_line+0x3c0>)
    b9c2:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    b9c4:	2002      	movs	r0, #2
    b9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(x_at_y > abs_x + len) {
    b9ca:	eb05 0e03 	add.w	lr, r5, r3
    b9ce:	4571      	cmp	r1, lr
    b9d0:	dd05      	ble.n	b9de <lv_draw_mask_line+0x216>
        if(p->inv) {
    b9d2:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    b9d6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
    b9de:	0211      	lsls	r1, r2, #8
    b9e0:	fb07 f101 	mul.w	r1, r7, r1
    int32_t xsi = xs >> 8;
    b9e4:	ea4f 48a1 	mov.w	r8, r1, asr #18
    int32_t xsf = xs & 0xFF;
    b9e8:	f3c1 2187 	ubfx	r1, r1, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    b9ec:	3201      	adds	r2, #1
    b9ee:	0212      	lsls	r2, r2, #8
    b9f0:	fb07 f202 	mul.w	r2, r7, r2
    int32_t xei = xe >> 8;
    b9f4:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    k = xsi - abs_x;
    b9f8:	eba8 0e05 	sub.w	lr, r8, r5
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    b9fc:	45e0      	cmp	r8, ip
    b9fe:	d063      	beq.n	bac8 <lv_draw_mask_line+0x300>
    ba00:	2f00      	cmp	r7, #0
    ba02:	db5b      	blt.n	babc <lv_draw_mask_line+0x2f4>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
    ba04:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
    ba08:	69e2      	ldr	r2, [r4, #28]
    ba0a:	fb02 f201 	mul.w	r2, r2, r1
    ba0e:	1295      	asrs	r5, r2, #10
            if(k >= 0 && k < len) {
    ba10:	f1be 0f00 	cmp.w	lr, #0
    ba14:	db1c      	blt.n	ba50 <lv_draw_mask_line+0x288>
    ba16:	4573      	cmp	r3, lr
    ba18:	dd1a      	ble.n	ba50 <lv_draw_mask_line+0x288>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    ba1a:	fb05 f101 	mul.w	r1, r5, r1
    ba1e:	f3c1 2247 	ubfx	r2, r1, #9, #8
                if(p->inv) m = 255 - m;
    ba22:	f016 0f02 	tst.w	r6, #2
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
    ba26:	bf04      	itt	eq
    ba28:	43d2      	mvneq	r2, r2
    ba2a:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ba2c:	eb00 060e 	add.w	r6, r0, lr
    ba30:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ba34:	2af9      	cmp	r2, #249	; 0xf9
    ba36:	d80a      	bhi.n	ba4e <lv_draw_mask_line+0x286>
    if(mask_new <= LV_OPA_MIN) return 0;
    ba38:	2a05      	cmp	r2, #5
    ba3a:	f240 80a1 	bls.w	bb80 <lv_draw_mask_line+0x3b8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ba3e:	fb02 f201 	mul.w	r2, r2, r1
    ba42:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    ba46:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    ba4a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ba4e:	7031      	strb	r1, [r6, #0]
            if(k >= 0 && k < len) {
    ba50:	f11e 0101 	adds.w	r1, lr, #1
    ba54:	d420      	bmi.n	ba98 <lv_draw_mask_line+0x2d0>
    ba56:	428b      	cmp	r3, r1
    ba58:	dd1e      	ble.n	ba98 <lv_draw_mask_line+0x2d0>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
    ba5a:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
    ba5e:	69a5      	ldr	r5, [r4, #24]
    ba60:	fb05 f502 	mul.w	r5, r5, r2
    ba64:	12ad      	asrs	r5, r5, #10
                m = ((255 - y_inters) * x_inters) >> 9;
    ba66:	fb02 f205 	mul.w	r2, r2, r5
    ba6a:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    ba6e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    ba72:	f015 0f02 	tst.w	r5, #2
    ba76:	bf1c      	itt	ne
    ba78:	43d2      	mvnne	r2, r2
    ba7a:	b2d2      	uxtbne	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ba7c:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    ba7e:	2af9      	cmp	r2, #249	; 0xf9
    ba80:	d809      	bhi.n	ba96 <lv_draw_mask_line+0x2ce>
    if(mask_new <= LV_OPA_MIN) return 0;
    ba82:	2a05      	cmp	r2, #5
    ba84:	d97e      	bls.n	bb84 <lv_draw_mask_line+0x3bc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    ba86:	fb02 f205 	mul.w	r2, r2, r5
    ba8a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    ba8e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    ba92:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    ba96:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    ba98:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    ba9c:	f012 0f02 	tst.w	r2, #2
    baa0:	d074      	beq.n	bb8c <lv_draw_mask_line+0x3c4>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    baa2:	4573      	cmp	r3, lr
    baa4:	f2c0 80b2 	blt.w	bc0c <lv_draw_mask_line+0x444>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
    baa8:	f1be 0f00 	cmp.w	lr, #0
    baac:	f2c0 80b1 	blt.w	bc12 <lv_draw_mask_line+0x44a>
    bab0:	4671      	mov	r1, lr
    bab2:	4b35      	ldr	r3, [pc, #212]	; (bb88 <lv_draw_mask_line+0x3c0>)
    bab4:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    bab6:	2002      	movs	r0, #2
    bab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
    babc:	2900      	cmp	r1, #0
    babe:	f040 8100 	bne.w	bcc2 <lv_draw_mask_line+0x4fa>
        k--;
    bac2:	f10e 3eff 	add.w	lr, lr, #4294967295
        xsf = 0xFF;
    bac6:	21ff      	movs	r1, #255	; 0xff
        if(k >= 0 && k < len) {
    bac8:	f1be 0f00 	cmp.w	lr, #0
    bacc:	db1e      	blt.n	bb0c <lv_draw_mask_line+0x344>
    bace:	4573      	cmp	r3, lr
    bad0:	dd1c      	ble.n	bb0c <lv_draw_mask_line+0x344>
    int32_t xef = xe & 0xFF;
    bad2:	f3c2 2287 	ubfx	r2, r2, #10, #8
            m = (xsf + xef) >> 1;
    bad6:	440a      	add	r2, r1
    bad8:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
    badc:	f016 0f02 	tst.w	r6, #2
    bae0:	bf1c      	itt	ne
    bae2:	43d2      	mvnne	r2, r2
    bae4:	b2d2      	uxtbne	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
    bae6:	eb00 060e 	add.w	r6, r0, lr
    baea:	f810 100e 	ldrb.w	r1, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    baee:	2af9      	cmp	r2, #249	; 0xf9
    baf0:	d80b      	bhi.n	bb0a <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    baf2:	2a05      	cmp	r2, #5
    baf4:	d908      	bls.n	bb08 <lv_draw_mask_line+0x340>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    baf6:	fb02 f201 	mul.w	r2, r2, r1
    bafa:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    bafe:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    bb02:	f3c2 51c7 	ubfx	r1, r2, #23, #8
    bb06:	e000      	b.n	bb0a <lv_draw_mask_line+0x342>
    if(mask_new <= LV_OPA_MIN) return 0;
    bb08:	2100      	movs	r1, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
    bb0a:	7031      	strb	r1, [r6, #0]
        if(p->inv) {
    bb0c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bb10:	f012 0f02 	tst.w	r2, #2
    bb14:	d00a      	beq.n	bb2c <lv_draw_mask_line+0x364>
            k = xsi - abs_x;
    bb16:	ebac 0105 	sub.w	r1, ip, r5
            if(k >= len) {
    bb1a:	428b      	cmp	r3, r1
    bb1c:	dd61      	ble.n	bbe2 <lv_draw_mask_line+0x41a>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
    bb1e:	2900      	cmp	r1, #0
    bb20:	db62      	blt.n	bbe8 <lv_draw_mask_line+0x420>
    bb22:	4b19      	ldr	r3, [pc, #100]	; (bb88 <lv_draw_mask_line+0x3c0>)
    bb24:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    bb26:	2002      	movs	r0, #2
    bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        k++;
    bb2c:	f10e 0201 	add.w	r2, lr, #1
    bb30:	429a      	cmp	r2, r3
    bb32:	bfa8      	it	ge
    bb34:	461a      	movge	r2, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    bb36:	2a00      	cmp	r2, #0
    bb38:	d059      	beq.n	bbee <lv_draw_mask_line+0x426>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    bb3a:	2a00      	cmp	r2, #0
    bb3c:	dd5a      	ble.n	bbf4 <lv_draw_mask_line+0x42c>
    bb3e:	1a99      	subs	r1, r3, r2
    bb40:	4410      	add	r0, r2
    bb42:	4b11      	ldr	r3, [pc, #68]	; (bb88 <lv_draw_mask_line+0x3c0>)
    bb44:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    bb46:	2002      	movs	r0, #2
    bb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    bb4c:	2500      	movs	r5, #0
    bb4e:	e0dc      	b.n	bd0a <lv_draw_mask_line+0x542>
    bb50:	2500      	movs	r5, #0
    bb52:	e100      	b.n	bd56 <lv_draw_mask_line+0x58e>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
    bb54:	2900      	cmp	r1, #0
    bb56:	dd50      	ble.n	bbfa <lv_draw_mask_line+0x432>
    bb58:	4b0b      	ldr	r3, [pc, #44]	; (bb88 <lv_draw_mask_line+0x3c0>)
    bb5a:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    bb5c:	2002      	movs	r0, #2
    bb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            k += 2;
    bb62:	f10e 0e01 	add.w	lr, lr, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    bb66:	4573      	cmp	r3, lr
    bb68:	db4a      	blt.n	bc00 <lv_draw_mask_line+0x438>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
    bb6a:	f1be 0f00 	cmp.w	lr, #0
    bb6e:	db4a      	blt.n	bc06 <lv_draw_mask_line+0x43e>
    bb70:	eba3 010e 	sub.w	r1, r3, lr
    bb74:	4470      	add	r0, lr
    bb76:	4b04      	ldr	r3, [pc, #16]	; (bb88 <lv_draw_mask_line+0x3c0>)
    bb78:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    bb7a:	2002      	movs	r0, #2
    bb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
    bb80:	2100      	movs	r1, #0
    bb82:	e764      	b.n	ba4e <lv_draw_mask_line+0x286>
    bb84:	2500      	movs	r5, #0
    bb86:	e786      	b.n	ba96 <lv_draw_mask_line+0x2ce>
    bb88:	000130df 	.word	0x000130df
            k++;
    bb8c:	f10e 0202 	add.w	r2, lr, #2
    bb90:	429a      	cmp	r2, r3
    bb92:	bfa8      	it	ge
    bb94:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    bb96:	2a00      	cmp	r2, #0
    bb98:	d03e      	beq.n	bc18 <lv_draw_mask_line+0x450>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
    bb9a:	2a00      	cmp	r2, #0
    bb9c:	dd3f      	ble.n	bc1e <lv_draw_mask_line+0x456>
    bb9e:	1a99      	subs	r1, r3, r2
    bba0:	4410      	add	r0, r2
    bba2:	4b73      	ldr	r3, [pc, #460]	; (bd70 <lv_draw_mask_line+0x5a8>)
    bba4:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
    bba6:	2002      	movs	r0, #2
    bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
    bbac:	2001      	movs	r0, #1
    bbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
    bbb2:	2001      	movs	r0, #1
    bbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
    bbb8:	2001      	movs	r0, #1
    bbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
    bbbe:	2000      	movs	r0, #0
    bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
    bbc4:	2000      	movs	r0, #0
    bbc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
    bbca:	2000      	movs	r0, #0
    bbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    bbd0:	2000      	movs	r0, #0
    bbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    bbd6:	2002      	movs	r0, #2
    bbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    bbdc:	2000      	movs	r0, #0
    bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return LV_DRAW_MASK_RES_TRANSP;
    bbe2:	2000      	movs	r0, #0
    bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    bbe8:	2002      	movs	r0, #2
    bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    bbee:	2000      	movs	r0, #0
    bbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    bbf4:	2002      	movs	r0, #2
    bbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbfa:	2002      	movs	r0, #2
    bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
    bc00:	2001      	movs	r0, #1
    bc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    bc06:	2002      	movs	r0, #2
    bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
    bc0c:	2000      	movs	r0, #0
    bc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    bc12:	2002      	movs	r0, #2
    bc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
    bc18:	2000      	movs	r0, #0
    bc1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_DRAW_MASK_RES_CHANGED;
    bc1e:	2002      	movs	r0, #2
    bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    bc24:	461f      	mov	r7, r3
    bc26:	442b      	add	r3, r5
    bc28:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x < abs_y) {
    bc2c:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    bc30:	f73f ae4b 	bgt.w	b8ca <lv_draw_mask_line+0x102>
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
    bc34:	0212      	lsls	r2, r2, #8
    bc36:	69a3      	ldr	r3, [r4, #24]
    bc38:	fb03 f302 	mul.w	r3, r3, r2
    bc3c:	129b      	asrs	r3, r3, #10
    int32_t xei = xe >> 8;
    bc3e:	1219      	asrs	r1, r3, #8
    if(xef == 0) px_h = 255;
    bc40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    bc44:	d039      	beq.n	bcba <lv_draw_mask_line+0x4f2>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
    bc46:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
    bc4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    bc4c:	fb02 f203 	mul.w	r2, r2, r3
    bc50:	ea4f 2e22 	mov.w	lr, r2, asr #8
    bc54:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
        if(k >= 0 && k < len) {
    bc58:	1b49      	subs	r1, r1, r5
    bc5a:	d41a      	bmi.n	bc92 <lv_draw_mask_line+0x4ca>
    bc5c:	42b9      	cmp	r1, r7
    bc5e:	da18      	bge.n	bc92 <lv_draw_mask_line+0x4ca>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    bc60:	fb0e f303 	mul.w	r3, lr, r3
    bc64:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
    bc68:	f016 0f02 	tst.w	r6, #2
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
    bc6c:	bf04      	itt	eq
    bc6e:	43db      	mvneq	r3, r3
    bc70:	b2db      	uxtbeq	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
    bc72:	1846      	adds	r6, r0, r1
    bc74:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bc76:	2bf9      	cmp	r3, #249	; 0xf9
    bc78:	d80a      	bhi.n	bc90 <lv_draw_mask_line+0x4c8>
    if(mask_new <= LV_OPA_MIN) return 0;
    bc7a:	2b05      	cmp	r3, #5
    bc7c:	f67f ae31 	bls.w	b8e2 <lv_draw_mask_line+0x11a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bc80:	fb03 f305 	mul.w	r3, r3, r5
    bc84:	eb03 2503 	add.w	r5, r3, r3, lsl #8
    bc88:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
    bc8c:	f3c3 55c7 	ubfx	r5, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
    bc90:	7035      	strb	r5, [r6, #0]
        k++;
    bc92:	1c4d      	adds	r5, r1, #1
    bc94:	1946      	adds	r6, r0, r5
    if(mask_new <= LV_OPA_MIN) return 0;
    bc96:	f04f 0e00 	mov.w	lr, #0
    bc9a:	e62d      	b.n	b8f8 <lv_draw_mask_line+0x130>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
    bc9c:	461f      	mov	r7, r3
    bc9e:	442b      	add	r3, r5
    bca0:	fb01 f103 	mul.w	r1, r1, r3
        if(y_at_x > abs_y) {
    bca4:	ebb2 2fa1 	cmp.w	r2, r1, asr #10
    bca8:	f6ff ae15 	blt.w	b8d6 <lv_draw_mask_line+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
    bcac:	3201      	adds	r2, #1
    bcae:	0212      	lsls	r2, r2, #8
    bcb0:	69a3      	ldr	r3, [r4, #24]
    bcb2:	fb03 f302 	mul.w	r3, r3, r2
    bcb6:	129b      	asrs	r3, r3, #10
    bcb8:	e7c1      	b.n	bc3e <lv_draw_mask_line+0x476>
    int32_t k = xei - abs_x;
    bcba:	1b4d      	subs	r5, r1, r5
    bcbc:	4629      	mov	r1, r5
    if(xef == 0) px_h = 255;
    bcbe:	22ff      	movs	r2, #255	; 0xff
    bcc0:	e7e8      	b.n	bc94 <lv_draw_mask_line+0x4cc>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
    bcc2:	69e2      	ldr	r2, [r4, #28]
    bcc4:	4252      	negs	r2, r2
    bcc6:	fb01 f202 	mul.w	r2, r1, r2
    bcca:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
    bccc:	f1be 0f00 	cmp.w	lr, #0
    bcd0:	db1c      	blt.n	bd0c <lv_draw_mask_line+0x544>
    bcd2:	4573      	cmp	r3, lr
    bcd4:	dd1a      	ble.n	bd0c <lv_draw_mask_line+0x544>
                m = (y_inters * xsf) >> 9;
    bcd6:	fb02 f101 	mul.w	r1, r2, r1
    bcda:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
    bcde:	f016 0f02 	tst.w	r6, #2
    bce2:	bf1c      	itt	ne
    bce4:	43c9      	mvnne	r1, r1
    bce6:	b2c9      	uxtbne	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
    bce8:	eb00 060e 	add.w	r6, r0, lr
    bcec:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bcf0:	29f9      	cmp	r1, #249	; 0xf9
    bcf2:	d80a      	bhi.n	bd0a <lv_draw_mask_line+0x542>
    if(mask_new <= LV_OPA_MIN) return 0;
    bcf4:	2905      	cmp	r1, #5
    bcf6:	f67f af29 	bls.w	bb4c <lv_draw_mask_line+0x384>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bcfa:	fb01 f105 	mul.w	r1, r1, r5
    bcfe:	eb01 2501 	add.w	r5, r1, r1, lsl #8
    bd02:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    bd06:	f3c1 55c7 	ubfx	r5, r1, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    bd0a:	7035      	strb	r5, [r6, #0]
            if(k >= 0 && k < len) {
    bd0c:	f1be 0101 	subs.w	r1, lr, #1
    bd10:	d422      	bmi.n	bd58 <lv_draw_mask_line+0x590>
    bd12:	428b      	cmp	r3, r1
    bd14:	dd20      	ble.n	bd58 <lv_draw_mask_line+0x590>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
    bd16:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
    bd1a:	69a5      	ldr	r5, [r4, #24]
    bd1c:	426d      	negs	r5, r5
    bd1e:	fb02 f505 	mul.w	r5, r2, r5
    bd22:	12ad      	asrs	r5, r5, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    bd24:	fb02 f205 	mul.w	r2, r2, r5
    bd28:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
    bd2c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    bd30:	f015 0f02 	tst.w	r5, #2
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
    bd34:	bf04      	itt	eq
    bd36:	43d2      	mvneq	r2, r2
    bd38:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
    bd3a:	5c45      	ldrb	r5, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bd3c:	2af9      	cmp	r2, #249	; 0xf9
    bd3e:	d80a      	bhi.n	bd56 <lv_draw_mask_line+0x58e>
    if(mask_new <= LV_OPA_MIN) return 0;
    bd40:	2a05      	cmp	r2, #5
    bd42:	f67f af05 	bls.w	bb50 <lv_draw_mask_line+0x388>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bd46:	fb02 f205 	mul.w	r2, r2, r5
    bd4a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
    bd4e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    bd52:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
    bd56:	5445      	strb	r5, [r0, r1]
            if(p->inv) {
    bd58:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bd5c:	f012 0f02 	tst.w	r2, #2
    bd60:	f43f aeff 	beq.w	bb62 <lv_draw_mask_line+0x39a>
                if(k > len) k = len;
    bd64:	428b      	cmp	r3, r1
    bd66:	f6bf aef5 	bge.w	bb54 <lv_draw_mask_line+0x38c>
    return LV_DRAW_MASK_RES_CHANGED;
    bd6a:	2002      	movs	r0, #2
    bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd70:	000130df 	.word	0x000130df

0000bd74 <lv_draw_mask_radius>:
{
    bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd78:	b08d      	sub	sp, #52	; 0x34
    bd7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
    bd7c:	7cae      	ldrb	r6, [r5, #18]
    bd7e:	f006 0601 	and.w	r6, r6, #1
    int32_t radius = p->cfg.radius;
    bd82:	f9b5 8010 	ldrsh.w	r8, [r5, #16]
    bd86:	1dec      	adds	r4, r5, #7
    bd88:	f105 090f 	add.w	r9, r5, #15
    uint8_t * d8 = (uint8_t *)dst;
    bd8c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
        *d8 = *s8;
    bd90:	f814 7f01 	ldrb.w	r7, [r4, #1]!
    bd94:	f80e 7b01 	strb.w	r7, [lr], #1
    while(len) {
    bd98:	454c      	cmp	r4, r9
    bd9a:	d1f9      	bne.n	bd90 <lv_draw_mask_radius+0x1c>
    if(outer == false) {
    bd9c:	2e00      	cmp	r6, #0
    bd9e:	d13d      	bne.n	be1c <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    bda0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    bda4:	4294      	cmp	r4, r2
    bda6:	f300 822b 	bgt.w	c200 <lv_draw_mask_radius+0x48c>
    bdaa:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    bdae:	4294      	cmp	r4, r2
    bdb0:	f2c0 822a 	blt.w	c208 <lv_draw_mask_radius+0x494>
    bdb4:	469b      	mov	fp, r3
    bdb6:	460f      	mov	r7, r1
    bdb8:	9002      	str	r0, [sp, #8]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    bdba:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    bdbe:	eb08 0309 	add.w	r3, r8, r9
    bdc2:	4299      	cmp	r1, r3
    bdc4:	db06      	blt.n	bdd4 <lv_draw_mask_radius+0x60>
    bdc6:	4459      	add	r1, fp
    bdc8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    bdcc:	eba3 0308 	sub.w	r3, r3, r8
    bdd0:	4299      	cmp	r1, r3
    bdd2:	dd0b      	ble.n	bdec <lv_draw_mask_radius+0x78>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    bdd4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
    bdd8:	eb03 0108 	add.w	r1, r3, r8
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
    bddc:	428a      	cmp	r2, r1
    bdde:	db53      	blt.n	be88 <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
    bde0:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    bde4:	eba1 0108 	sub.w	r1, r1, r8
    bde8:	428a      	cmp	r2, r1
    bdea:	dc4d      	bgt.n	be88 <lv_draw_mask_radius+0x114>
        if(outer == false) {
    bdec:	bb86      	cbnz	r6, be50 <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
    bdee:	eba9 0407 	sub.w	r4, r9, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    bdf2:	455c      	cmp	r4, fp
    bdf4:	f300 820c 	bgt.w	c210 <lv_draw_mask_radius+0x49c>
            if(last >= 0) {
    bdf8:	2c00      	cmp	r4, #0
    bdfa:	db03      	blt.n	be04 <lv_draw_mask_radius+0x90>
                _lv_memset_00(&mask_buf[0], last);
    bdfc:	4621      	mov	r1, r4
    bdfe:	9802      	ldr	r0, [sp, #8]
    be00:	4b9f      	ldr	r3, [pc, #636]	; (c080 <lv_draw_mask_radius+0x30c>)
    be02:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
    be04:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
    be08:	1bc0      	subs	r0, r0, r7
    be0a:	3001      	adds	r0, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    be0c:	2800      	cmp	r0, #0
    be0e:	f340 8201 	ble.w	c214 <lv_draw_mask_radius+0x4a0>
            else if(first < len) {
    be12:	4583      	cmp	fp, r0
    be14:	dc0d      	bgt.n	be32 <lv_draw_mask_radius+0xbe>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    be16:	b1bc      	cbz	r4, be48 <lv_draw_mask_radius+0xd4>
            else return LV_DRAW_MASK_RES_CHANGED;
    be18:	2002      	movs	r0, #2
    be1a:	e1f2      	b.n	c202 <lv_draw_mask_radius+0x48e>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
    be1c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
    be20:	4294      	cmp	r4, r2
    be22:	f300 81f3 	bgt.w	c20c <lv_draw_mask_radius+0x498>
    be26:	f9bd 402e 	ldrsh.w	r4, [sp, #46]	; 0x2e
    be2a:	4294      	cmp	r4, r2
    be2c:	dac2      	bge.n	bdb4 <lv_draw_mask_radius+0x40>
            return LV_DRAW_MASK_RES_FULL_COVER;
    be2e:	2001      	movs	r0, #1
    be30:	e1e7      	b.n	c202 <lv_draw_mask_radius+0x48e>
                _lv_memset_00(&mask_buf[first], len - first);
    be32:	ebab 0100 	sub.w	r1, fp, r0
    be36:	9b02      	ldr	r3, [sp, #8]
    be38:	4403      	add	r3, r0
    be3a:	4618      	mov	r0, r3
    be3c:	4b90      	ldr	r3, [pc, #576]	; (c080 <lv_draw_mask_radius+0x30c>)
    be3e:	4798      	blx	r3
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    be40:	2c00      	cmp	r4, #0
    be42:	d1e9      	bne.n	be18 <lv_draw_mask_radius+0xa4>
            else return LV_DRAW_MASK_RES_CHANGED;
    be44:	2002      	movs	r0, #2
    be46:	e1dc      	b.n	c202 <lv_draw_mask_radius+0x48e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
    be48:	4583      	cmp	fp, r0
    be4a:	d1e5      	bne.n	be18 <lv_draw_mask_radius+0xa4>
    be4c:	2001      	movs	r0, #1
    be4e:	e1d8      	b.n	c202 <lv_draw_mask_radius+0x48e>
            int32_t first = rect.x1 - abs_x;
    be50:	eba9 0007 	sub.w	r0, r9, r7
    be54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
    be58:	4558      	cmp	r0, fp
    be5a:	dd01      	ble.n	be60 <lv_draw_mask_radius+0xec>
        return LV_DRAW_MASK_RES_CHANGED;
    be5c:	2002      	movs	r0, #2
    be5e:	e1d0      	b.n	c202 <lv_draw_mask_radius+0x48e>
                int32_t last =  rect.x2 - abs_x - first + 1;
    be60:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
    be64:	1bc9      	subs	r1, r1, r7
    be66:	1a09      	subs	r1, r1, r0
    be68:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
    be6a:	1843      	adds	r3, r0, r1
    be6c:	459b      	cmp	fp, r3
    be6e:	bfb8      	it	lt
    be70:	ebab 0100 	sublt.w	r1, fp, r0
                if(last >= 0) {
    be74:	2900      	cmp	r1, #0
    be76:	f2c0 81cf 	blt.w	c218 <lv_draw_mask_radius+0x4a4>
                    _lv_memset_00(&mask_buf[first], last);
    be7a:	9b02      	ldr	r3, [sp, #8]
    be7c:	4403      	add	r3, r0
    be7e:	4618      	mov	r0, r3
    be80:	4b7f      	ldr	r3, [pc, #508]	; (c080 <lv_draw_mask_radius+0x30c>)
    be82:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
    be84:	2002      	movs	r0, #2
    be86:	e1bc      	b.n	c202 <lv_draw_mask_radius+0x48e>
    be88:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    be8c:	b29b      	uxth	r3, r3
    be8e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    be92:	3101      	adds	r1, #1
    be94:	1ac9      	subs	r1, r1, r3
    int32_t h = lv_area_get_height(&rect);
    be96:	b209      	sxth	r1, r1
    abs_y -= rect.y1;
    be98:	1ad2      	subs	r2, r2, r3
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
    be9a:	fb08 f308 	mul.w	r3, r8, r8
    be9e:	9301      	str	r3, [sp, #4]
    if(abs_y < radius || abs_y > h - radius - 1) {
    bea0:	b212      	sxth	r2, r2
    bea2:	4590      	cmp	r8, r2
    bea4:	f300 81d1 	bgt.w	c24a <lv_draw_mask_radius+0x4d6>
    bea8:	eba1 0308 	sub.w	r3, r1, r8
    beac:	3b01      	subs	r3, #1
    beae:	429a      	cmp	r2, r3
    beb0:	f300 81b4 	bgt.w	c21c <lv_draw_mask_radius+0x4a8>
    return LV_DRAW_MASK_RES_CHANGED;
    beb4:	2002      	movs	r0, #2
    beb6:	e1a4      	b.n	c202 <lv_draw_mask_radius+0x48e>
                x0.f = p->y_prev_x.f;
    beb8:	8b6b      	ldrh	r3, [r5, #26]
    beba:	f8ad 301a 	strh.w	r3, [sp, #26]
                x0.i = p->y_prev_x.i;
    bebe:	8b2b      	ldrh	r3, [r5, #24]
    bec0:	f8ad 3018 	strh.w	r3, [sp, #24]
    bec4:	e1d6      	b.n	c274 <lv_draw_mask_radius+0x500>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    bec6:	9a04      	ldr	r2, [sp, #16]
    bec8:	a907      	add	r1, sp, #28
    beca:	9b01      	ldr	r3, [sp, #4]
    becc:	fb00 3010 	mls	r0, r0, r0, r3
    bed0:	4b6c      	ldr	r3, [pc, #432]	; (c084 <lv_draw_mask_radius+0x310>)
    bed2:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    bed4:	9a04      	ldr	r2, [sp, #16]
    bed6:	a906      	add	r1, sp, #24
    bed8:	9b01      	ldr	r3, [sp, #4]
    beda:	fb04 3014 	mls	r0, r4, r4, r3
    bede:	4b69      	ldr	r3, [pc, #420]	; (c084 <lv_draw_mask_radius+0x310>)
    bee0:	4798      	blx	r3
            p->y_prev = y;
    bee2:	616c      	str	r4, [r5, #20]
            p->y_prev_x.f = x0.f;
    bee4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    bee8:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x0.i;
    beea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    beee:	832b      	strh	r3, [r5, #24]
    bef0:	e1d1      	b.n	c296 <lv_draw_mask_radius+0x522>
        if(x0.i == x1.i - 1 && x1.f == 0) {
    bef2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    bef6:	2900      	cmp	r1, #0
    bef8:	f040 81d5 	bne.w	c2a6 <lv_draw_mask_radius+0x532>
            x1.i--;
    befc:	3a01      	subs	r2, #1
    befe:	f8ad 201c 	strh.w	r2, [sp, #28]
            x1.f = 0xFF;
    bf02:	22ff      	movs	r2, #255	; 0xff
    bf04:	f8ad 201e 	strh.w	r2, [sp, #30]
    bf08:	e1cd      	b.n	c2a6 <lv_draw_mask_radius+0x532>
            lv_opa_t m = (x0.f + x1.f) >> 1;
    bf0a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    bf0e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    bf12:	440a      	add	r2, r1
    bf14:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
    bf18:	b10e      	cbz	r6, bf1e <lv_draw_mask_radius+0x1aa>
    bf1a:	43d2      	mvns	r2, r2
    bf1c:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
    bf1e:	eba8 0303 	sub.w	r3, r8, r3
    bf22:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
    bf24:	18f9      	adds	r1, r7, r3
    bf26:	d411      	bmi.n	bf4c <lv_draw_mask_radius+0x1d8>
    bf28:	4559      	cmp	r1, fp
    bf2a:	da0f      	bge.n	bf4c <lv_draw_mask_radius+0x1d8>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    bf2c:	9802      	ldr	r0, [sp, #8]
    bf2e:	5c40      	ldrb	r0, [r0, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bf30:	2af9      	cmp	r2, #249	; 0xf9
    bf32:	d809      	bhi.n	bf48 <lv_draw_mask_radius+0x1d4>
    if(mask_new <= LV_OPA_MIN) return 0;
    bf34:	2a05      	cmp	r2, #5
    bf36:	d935      	bls.n	bfa4 <lv_draw_mask_radius+0x230>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bf38:	fb02 f000 	mul.w	r0, r2, r0
    bf3c:	eb00 2400 	add.w	r4, r0, r0, lsl #8
    bf40:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    bf44:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
    bf48:	9c02      	ldr	r4, [sp, #8]
    bf4a:	5460      	strb	r0, [r4, r1]
            int32_t kr = k + (w - ofs - 1);
    bf4c:	eba9 0303 	sub.w	r3, r9, r3
    bf50:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
    bf52:	19df      	adds	r7, r3, r7
    bf54:	d411      	bmi.n	bf7a <lv_draw_mask_radius+0x206>
    bf56:	455f      	cmp	r7, fp
    bf58:	da0f      	bge.n	bf7a <lv_draw_mask_radius+0x206>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    bf5a:	9b02      	ldr	r3, [sp, #8]
    bf5c:	5ddb      	ldrb	r3, [r3, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    bf5e:	2af9      	cmp	r2, #249	; 0xf9
    bf60:	d809      	bhi.n	bf76 <lv_draw_mask_radius+0x202>
    if(mask_new <= LV_OPA_MIN) return 0;
    bf62:	2a05      	cmp	r2, #5
    bf64:	d920      	bls.n	bfa8 <lv_draw_mask_radius+0x234>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    bf66:	fb02 f203 	mul.w	r2, r2, r3
    bf6a:	eb02 2302 	add.w	r3, r2, r2, lsl #8
    bf6e:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
    bf72:	f3c2 53c7 	ubfx	r3, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
    bf76:	9a02      	ldr	r2, [sp, #8]
    bf78:	55d3      	strb	r3, [r2, r7]
            if(outer == false) {
    bf7a:	b1be      	cbz	r6, bfac <lv_draw_mask_radius+0x238>
                kl++;
    bf7c:	1c48      	adds	r0, r1, #1
    bf7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    bf82:	455f      	cmp	r7, fp
                int32_t len_tmp = kr - first;
    bf84:	bfd4      	ite	le
    bf86:	1a39      	suble	r1, r7, r0
                if(len_tmp + first > len) len_tmp = len - first;
    bf88:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    bf8c:	4558      	cmp	r0, fp
    bf8e:	f280 8119 	bge.w	c1c4 <lv_draw_mask_radius+0x450>
    bf92:	2900      	cmp	r1, #0
    bf94:	f2c0 8116 	blt.w	c1c4 <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    bf98:	9b02      	ldr	r3, [sp, #8]
    bf9a:	4403      	add	r3, r0
    bf9c:	4618      	mov	r0, r3
    bf9e:	4b38      	ldr	r3, [pc, #224]	; (c080 <lv_draw_mask_radius+0x30c>)
    bfa0:	4798      	blx	r3
    bfa2:	e10f      	b.n	c1c4 <lv_draw_mask_radius+0x450>
    if(mask_new <= LV_OPA_MIN) return 0;
    bfa4:	2000      	movs	r0, #0
    bfa6:	e7cf      	b.n	bf48 <lv_draw_mask_radius+0x1d4>
    bfa8:	2300      	movs	r3, #0
    bfaa:	e7e4      	b.n	bf76 <lv_draw_mask_radius+0x202>
                if(kl > len)  {
    bfac:	4559      	cmp	r1, fp
    bfae:	f300 8125 	bgt.w	c1fc <lv_draw_mask_radius+0x488>
                if(kl >= 0) {
    bfb2:	2900      	cmp	r1, #0
    bfb4:	db02      	blt.n	bfbc <lv_draw_mask_radius+0x248>
                    _lv_memset_00(&mask_buf[0], kl);
    bfb6:	9802      	ldr	r0, [sp, #8]
    bfb8:	4b31      	ldr	r3, [pc, #196]	; (c080 <lv_draw_mask_radius+0x30c>)
    bfba:	4798      	blx	r3
                if(kr < 0) {
    bfbc:	3701      	adds	r7, #1
    bfbe:	f100 811d 	bmi.w	c1fc <lv_draw_mask_radius+0x488>
                if(kr <= len) {
    bfc2:	455f      	cmp	r7, fp
    bfc4:	f300 80fe 	bgt.w	c1c4 <lv_draw_mask_radius+0x450>
                    _lv_memset_00(&mask_buf[kr], len - kr);
    bfc8:	ebab 0107 	sub.w	r1, fp, r7
    bfcc:	9b02      	ldr	r3, [sp, #8]
    bfce:	443b      	add	r3, r7
    bfd0:	4618      	mov	r0, r3
    bfd2:	4b2b      	ldr	r3, [pc, #172]	; (c080 <lv_draw_mask_radius+0x30c>)
    bfd4:	4798      	blx	r3
    bfd6:	e0f5      	b.n	c1c4 <lv_draw_mask_radius+0x450>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
    bfd8:	9a04      	ldr	r2, [sp, #16]
    bfda:	a909      	add	r1, sp, #36	; 0x24
    bfdc:	9b01      	ldr	r3, [sp, #4]
    bfde:	fb08 3018 	mls	r0, r8, r8, r3
    bfe2:	4b28      	ldr	r3, [pc, #160]	; (c084 <lv_draw_mask_radius+0x310>)
    bfe4:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    bfe6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    bfea:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    bfee:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
    bff2:	f1c1 03ff 	rsb	r3, r1, #255	; 0xff
    bff6:	fb03 f302 	mul.w	r3, r3, r2
    bffa:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    bffe:	b90e      	cbnz	r6, c004 <lv_draw_mask_radius+0x290>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
    c000:	43db      	mvns	r3, r3
    c002:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    c004:	9803      	ldr	r0, [sp, #12]
    c006:	4602      	mov	r2, r0
    c008:	2800      	cmp	r0, #0
    c00a:	db11      	blt.n	c030 <lv_draw_mask_radius+0x2bc>
    c00c:	4558      	cmp	r0, fp
    c00e:	da0f      	bge.n	c030 <lv_draw_mask_radius+0x2bc>
    c010:	9c02      	ldr	r4, [sp, #8]
    c012:	1820      	adds	r0, r4, r0
    c014:	5ca2      	ldrb	r2, [r4, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    c016:	2bf9      	cmp	r3, #249	; 0xf9
    c018:	d809      	bhi.n	c02e <lv_draw_mask_radius+0x2ba>
    if(mask_new <= LV_OPA_MIN) return 0;
    c01a:	2b05      	cmp	r3, #5
    c01c:	d929      	bls.n	c072 <lv_draw_mask_radius+0x2fe>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    c01e:	fb03 f202 	mul.w	r2, r3, r2
    c022:	eb02 2402 	add.w	r4, r2, r2, lsl #8
    c026:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
    c02a:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    c02e:	7002      	strb	r2, [r0, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    c030:	f1ba 0f00 	cmp.w	sl, #0
    c034:	db13      	blt.n	c05e <lv_draw_mask_radius+0x2ea>
    c036:	45da      	cmp	sl, fp
    c038:	da11      	bge.n	c05e <lv_draw_mask_radius+0x2ea>
    c03a:	9c02      	ldr	r4, [sp, #8]
    c03c:	eb04 000a 	add.w	r0, r4, sl
    c040:	f814 200a 	ldrb.w	r2, [r4, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    c044:	2bf9      	cmp	r3, #249	; 0xf9
    c046:	d809      	bhi.n	c05c <lv_draw_mask_radius+0x2e8>
    if(mask_new <= LV_OPA_MIN) return 0;
    c048:	2b05      	cmp	r3, #5
    c04a:	d914      	bls.n	c076 <lv_draw_mask_radius+0x302>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    c04c:	fb03 f302 	mul.w	r3, r3, r2
    c050:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    c054:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c058:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    c05c:	7002      	strb	r2, [r0, #0]
                kl--;
    c05e:	9b03      	ldr	r3, [sp, #12]
    c060:	3b01      	subs	r3, #1
    c062:	9303      	str	r3, [sp, #12]
                kr++;
    c064:	f10a 0a01 	add.w	sl, sl, #1
                y_prev.f = y_next.f;
    c068:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
                i++;
    c06c:	f108 0801 	add.w	r8, r8, #1
    c070:	e15e      	b.n	c330 <lv_draw_mask_radius+0x5bc>
    if(mask_new <= LV_OPA_MIN) return 0;
    c072:	2200      	movs	r2, #0
    c074:	e7db      	b.n	c02e <lv_draw_mask_radius+0x2ba>
    c076:	2200      	movs	r2, #0
    c078:	e7f0      	b.n	c05c <lv_draw_mask_radius+0x2e8>
    c07a:	2700      	movs	r7, #0
    c07c:	e039      	b.n	c0f2 <lv_draw_mask_radius+0x37e>
    c07e:	bf00      	nop
    c080:	000130df 	.word	0x000130df
    c084:	000128c5 	.word	0x000128c5
    c088:	2700      	movs	r7, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    c08a:	f80e 7008 	strb.w	r7, [lr, r8]
                kl--;
    c08e:	3801      	subs	r0, #1
                kr++;
    c090:	3401      	adds	r4, #1
            for(; i <= x1.i; i++) {
    c092:	3101      	adds	r1, #1
                y_prev.f = y_next.f;
    c094:	461a      	mov	r2, r3
            for(; i <= x1.i; i++) {
    c096:	9d01      	ldr	r5, [sp, #4]
    c098:	42a9      	cmp	r1, r5
    c09a:	d840      	bhi.n	c11e <lv_draw_mask_radius+0x3aa>
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    c09c:	eb09 1712 	add.w	r7, r9, r2, lsr #4
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
    c0a0:	fb01 a311 	mls	r3, r1, r1, sl
    uint32_t raw2 = raw * raw;
    c0a4:	fb07 fc07 	mul.w	ip, r7, r7

    int32_t d = x - raw2;
    c0a8:	ebcc 2303 	rsb	r3, ip, r3, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
    c0ac:	ea4f 0c47 	mov.w	ip, r7, lsl #1
    c0b0:	fb93 f3fc 	sdiv	r3, r3, ip
    c0b4:	441f      	add	r7, r3

    q->i = d >> 4;
    c0b6:	f3c7 1c0f 	ubfx	ip, r7, #4, #16
    q->f = (d & 0xF) << 4;
    c0ba:	013f      	lsls	r7, r7, #4
    c0bc:	f007 03f0 	and.w	r3, r7, #240	; 0xf0
                m = (y_prev.f + y_next.f) >> 1;
    c0c0:	441a      	add	r2, r3
    c0c2:	f3c2 0247 	ubfx	r2, r2, #1, #8
                if(outer) m = 255 - m;
    c0c6:	b10e      	cbz	r6, c0cc <lv_draw_mask_radius+0x358>
    c0c8:	43d2      	mvns	r2, r2
    c0ca:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    c0cc:	2800      	cmp	r0, #0
    c0ce:	db12      	blt.n	c0f6 <lv_draw_mask_radius+0x382>
    c0d0:	4583      	cmp	fp, r0
    c0d2:	dd10      	ble.n	c0f6 <lv_draw_mask_radius+0x382>
    c0d4:	4680      	mov	r8, r0
    c0d6:	f81e 7000 	ldrb.w	r7, [lr, r0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    c0da:	2af9      	cmp	r2, #249	; 0xf9
    c0dc:	d809      	bhi.n	c0f2 <lv_draw_mask_radius+0x37e>
    if(mask_new <= LV_OPA_MIN) return 0;
    c0de:	2a05      	cmp	r2, #5
    c0e0:	d9cb      	bls.n	c07a <lv_draw_mask_radius+0x306>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    c0e2:	fb02 f507 	mul.w	r5, r2, r7
    c0e6:	eb05 2705 	add.w	r7, r5, r5, lsl #8
    c0ea:	eb05 17c7 	add.w	r7, r5, r7, lsl #7
    c0ee:	f3c7 57c7 	ubfx	r7, r7, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    c0f2:	f80e 7008 	strb.w	r7, [lr, r8]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    c0f6:	2c00      	cmp	r4, #0
    c0f8:	dbc9      	blt.n	c08e <lv_draw_mask_radius+0x31a>
    c0fa:	45a3      	cmp	fp, r4
    c0fc:	ddc7      	ble.n	c08e <lv_draw_mask_radius+0x31a>
    c0fe:	46a0      	mov	r8, r4
    c100:	f81e 7004 	ldrb.w	r7, [lr, r4]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    c104:	2af9      	cmp	r2, #249	; 0xf9
    c106:	d8c0      	bhi.n	c08a <lv_draw_mask_radius+0x316>
    if(mask_new <= LV_OPA_MIN) return 0;
    c108:	2a05      	cmp	r2, #5
    c10a:	d9bd      	bls.n	c088 <lv_draw_mask_radius+0x314>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    c10c:	fb02 f207 	mul.w	r2, r2, r7
    c110:	eb02 2702 	add.w	r7, r2, r2, lsl #8
    c114:	eb02 17c7 	add.w	r7, r2, r7, lsl #7
    c118:	f3c7 57c7 	ubfx	r7, r7, #23, #8
    c11c:	e7b5      	b.n	c08a <lv_draw_mask_radius+0x316>
    c11e:	f8dd 8010 	ldr.w	r8, [sp, #16]
    c122:	f8dd a014 	ldr.w	sl, [sp, #20]
    c126:	43ea      	mvns	r2, r5
    c128:	4442      	add	r2, r8
    c12a:	9903      	ldr	r1, [sp, #12]
    c12c:	4411      	add	r1, r2
    c12e:	9103      	str	r1, [sp, #12]
    c130:	3501      	adds	r5, #1
    c132:	44aa      	add	sl, r5
    c134:	ebaa 0a08 	sub.w	sl, sl, r8
    c138:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    c13c:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
    c140:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            if(y_prev.f) {
    c144:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c148:	2b00      	cmp	r3, #0
    c14a:	d03a      	beq.n	c1c2 <lv_draw_mask_radius+0x44e>
                m = (y_prev.f * x1.f) >> 9;
    c14c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    c150:	fb03 f302 	mul.w	r3, r3, r2
    c154:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
    c158:	b10e      	cbz	r6, c15e <lv_draw_mask_radius+0x3ea>
    c15a:	43db      	mvns	r3, r3
    c15c:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    c15e:	9a03      	ldr	r2, [sp, #12]
    c160:	2a00      	cmp	r2, #0
    c162:	db12      	blt.n	c18a <lv_draw_mask_radius+0x416>
    c164:	4593      	cmp	fp, r2
    c166:	dd10      	ble.n	c18a <lv_draw_mask_radius+0x416>
    c168:	9802      	ldr	r0, [sp, #8]
    c16a:	4601      	mov	r1, r0
    c16c:	4411      	add	r1, r2
    c16e:	5c82      	ldrb	r2, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    c170:	2bf9      	cmp	r3, #249	; 0xf9
    c172:	d809      	bhi.n	c188 <lv_draw_mask_radius+0x414>
    if(mask_new <= LV_OPA_MIN) return 0;
    c174:	2b05      	cmp	r3, #5
    c176:	d927      	bls.n	c1c8 <lv_draw_mask_radius+0x454>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    c178:	fb03 f202 	mul.w	r2, r3, r2
    c17c:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    c180:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    c184:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
    c188:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    c18a:	f1ba 0f00 	cmp.w	sl, #0
    c18e:	db13      	blt.n	c1b8 <lv_draw_mask_radius+0x444>
    c190:	45d3      	cmp	fp, sl
    c192:	dd11      	ble.n	c1b8 <lv_draw_mask_radius+0x444>
    c194:	9802      	ldr	r0, [sp, #8]
    c196:	eb00 010a 	add.w	r1, r0, sl
    c19a:	f810 200a 	ldrb.w	r2, [r0, sl]
    if(mask_new >= LV_OPA_MAX) return mask_act;
    c19e:	2bf9      	cmp	r3, #249	; 0xf9
    c1a0:	d809      	bhi.n	c1b6 <lv_draw_mask_radius+0x442>
    if(mask_new <= LV_OPA_MIN) return 0;
    c1a2:	2b05      	cmp	r3, #5
    c1a4:	d912      	bls.n	c1cc <lv_draw_mask_radius+0x458>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
    c1a6:	fb03 f302 	mul.w	r3, r3, r2
    c1aa:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    c1ae:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c1b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
    c1b6:	700a      	strb	r2, [r1, #0]
                kl--;
    c1b8:	9b03      	ldr	r3, [sp, #12]
    c1ba:	3b01      	subs	r3, #1
    c1bc:	9303      	str	r3, [sp, #12]
                kr++;
    c1be:	f10a 0a01 	add.w	sl, sl, #1
            if(outer == 0) {
    c1c2:	b12e      	cbz	r6, c1d0 <lv_draw_mask_radius+0x45c>
    return LV_DRAW_MASK_RES_CHANGED;
    c1c4:	2002      	movs	r0, #2
    c1c6:	e01c      	b.n	c202 <lv_draw_mask_radius+0x48e>
    if(mask_new <= LV_OPA_MIN) return 0;
    c1c8:	2200      	movs	r2, #0
    c1ca:	e7dd      	b.n	c188 <lv_draw_mask_radius+0x414>
    c1cc:	2200      	movs	r2, #0
    c1ce:	e7f2      	b.n	c1b6 <lv_draw_mask_radius+0x442>
                kl++;
    c1d0:	9903      	ldr	r1, [sp, #12]
    c1d2:	3101      	adds	r1, #1
                if(kl > len) {
    c1d4:	4559      	cmp	r1, fp
    c1d6:	dc11      	bgt.n	c1fc <lv_draw_mask_radius+0x488>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
    c1d8:	2900      	cmp	r1, #0
    c1da:	db02      	blt.n	c1e2 <lv_draw_mask_radius+0x46e>
    c1dc:	9802      	ldr	r0, [sp, #8]
    c1de:	4b60      	ldr	r3, [pc, #384]	; (c360 <lv_draw_mask_radius+0x5ec>)
    c1e0:	4798      	blx	r3
                if(kr < 0) {
    c1e2:	f1ba 0f00 	cmp.w	sl, #0
    c1e6:	db09      	blt.n	c1fc <lv_draw_mask_radius+0x488>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
    c1e8:	45da      	cmp	sl, fp
    c1ea:	daeb      	bge.n	c1c4 <lv_draw_mask_radius+0x450>
    c1ec:	ebab 010a 	sub.w	r1, fp, sl
    c1f0:	9b02      	ldr	r3, [sp, #8]
    c1f2:	4453      	add	r3, sl
    c1f4:	4618      	mov	r0, r3
    c1f6:	4b5a      	ldr	r3, [pc, #360]	; (c360 <lv_draw_mask_radius+0x5ec>)
    c1f8:	4798      	blx	r3
    c1fa:	e7e3      	b.n	c1c4 <lv_draw_mask_radius+0x450>
                    return LV_DRAW_MASK_RES_TRANSP;
    c1fc:	2000      	movs	r0, #0
    c1fe:	e000      	b.n	c202 <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_TRANSP;
    c200:	2000      	movs	r0, #0
}
    c202:	b00d      	add	sp, #52	; 0x34
    c204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
    c208:	2000      	movs	r0, #0
    c20a:	e7fa      	b.n	c202 <lv_draw_mask_radius+0x48e>
            return LV_DRAW_MASK_RES_FULL_COVER;
    c20c:	2001      	movs	r0, #1
    c20e:	e7f8      	b.n	c202 <lv_draw_mask_radius+0x48e>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
    c210:	2000      	movs	r0, #0
    c212:	e7f6      	b.n	c202 <lv_draw_mask_radius+0x48e>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
    c214:	2000      	movs	r0, #0
    c216:	e7f4      	b.n	c202 <lv_draw_mask_radius+0x48e>
        return LV_DRAW_MASK_RES_CHANGED;
    c218:	2002      	movs	r0, #2
    c21a:	e7f2      	b.n	c202 <lv_draw_mask_radius+0x48e>
        if(radius <= 256) sqrt_mask = 0x800;
    c21c:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    c220:	bfd4      	ite	le
    c222:	f44f 6300 	movle.w	r3, #2048	; 0x800
    c226:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    c22a:	9304      	str	r3, [sp, #16]
            y = radius - (h - abs_y) + 1;
    c22c:	1a89      	subs	r1, r1, r2
    c22e:	eba8 0001 	sub.w	r0, r8, r1
    c232:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
    c234:	696b      	ldr	r3, [r5, #20]
    c236:	4298      	cmp	r0, r3
    c238:	f47f ae45 	bne.w	bec6 <lv_draw_mask_radius+0x152>
                x1.f = p->y_prev_x.f;
    c23c:	8b6b      	ldrh	r3, [r5, #26]
    c23e:	f8ad 301e 	strh.w	r3, [sp, #30]
                x1.i = p->y_prev_x.i;
    c242:	8b2b      	ldrh	r3, [r5, #24]
    c244:	f8ad 301c 	strh.w	r3, [sp, #28]
    c248:	e644      	b.n	bed4 <lv_draw_mask_radius+0x160>
        if(radius <= 256) sqrt_mask = 0x800;
    c24a:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    c24e:	bfd4      	ite	le
    c250:	f44f 6300 	movle.w	r3, #2048	; 0x800
    c254:	f44f 4300 	movgt.w	r3, #32768	; 0x8000
    c258:	9304      	str	r3, [sp, #16]
            y = radius - abs_y;
    c25a:	eba8 0402 	sub.w	r4, r8, r2
            if(y == p->y_prev) {
    c25e:	696b      	ldr	r3, [r5, #20]
    c260:	429c      	cmp	r4, r3
    c262:	f43f ae29 	beq.w	beb8 <lv_draw_mask_radius+0x144>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
    c266:	9a04      	ldr	r2, [sp, #16]
    c268:	a906      	add	r1, sp, #24
    c26a:	9b01      	ldr	r3, [sp, #4]
    c26c:	fb04 3014 	mls	r0, r4, r4, r3
    c270:	4b3c      	ldr	r3, [pc, #240]	; (c364 <lv_draw_mask_radius+0x5f0>)
    c272:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
    c274:	1e63      	subs	r3, r4, #1
    c276:	9a04      	ldr	r2, [sp, #16]
    c278:	a907      	add	r1, sp, #28
    c27a:	9303      	str	r3, [sp, #12]
    c27c:	9801      	ldr	r0, [sp, #4]
    c27e:	fb03 0013 	mls	r0, r3, r3, r0
    c282:	4b38      	ldr	r3, [pc, #224]	; (c364 <lv_draw_mask_radius+0x5f0>)
    c284:	4798      	blx	r3
            p->y_prev = y - 1;
    c286:	9b03      	ldr	r3, [sp, #12]
    c288:	616b      	str	r3, [r5, #20]
            p->y_prev_x.f = x1.f;
    c28a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    c28e:	836b      	strh	r3, [r5, #26]
            p->y_prev_x.i = x1.i;
    c290:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c294:	832b      	strh	r3, [r5, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
    c296:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c29a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c29e:	1e51      	subs	r1, r2, #1
    c2a0:	428b      	cmp	r3, r1
    c2a2:	f43f ae26 	beq.w	bef2 <lv_draw_mask_radius+0x17e>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
    c2a6:	eba9 0707 	sub.w	r7, r9, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c2aa:	f10a 0a01 	add.w	sl, sl, #1
    c2ae:	ebaa 0909 	sub.w	r9, sl, r9
    int32_t w = lv_area_get_width(&rect);
    c2b2:	fa0f f989 	sxth.w	r9, r9
        if(x0.i == x1.i) {
    c2b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c2ba:	429a      	cmp	r2, r3
    c2bc:	f43f ae25 	beq.w	bf0a <lv_draw_mask_radius+0x196>
            int32_t ofs = radius - (x0.i + 1);
    c2c0:	3301      	adds	r3, #1
    c2c2:	eba8 0803 	sub.w	r8, r8, r3
            int32_t kl = k + ofs;
    c2c6:	eb07 0308 	add.w	r3, r7, r8
    c2ca:	9303      	str	r3, [sp, #12]
            int32_t kr = k + (w - ofs - 1);
    c2cc:	eba9 0808 	sub.w	r8, r9, r8
    c2d0:	f108 3aff 	add.w	sl, r8, #4294967295
    c2d4:	44ba      	add	sl, r7
            if(outer) {
    c2d6:	b186      	cbz	r6, c2fa <lv_draw_mask_radius+0x586>
                int32_t first = kl + 1;
    c2d8:	1c58      	adds	r0, r3, #1
    c2da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
    c2de:	45da      	cmp	sl, fp
                int32_t len_tmp = kr - first;
    c2e0:	bfd4      	ite	le
    c2e2:	ebaa 0100 	suble.w	r1, sl, r0
                if(len_tmp + first > len) len_tmp = len - first;
    c2e6:	ebab 0100 	subgt.w	r1, fp, r0
                if(first < len && len_tmp >= 0) {
    c2ea:	4558      	cmp	r0, fp
    c2ec:	da05      	bge.n	c2fa <lv_draw_mask_radius+0x586>
    c2ee:	2900      	cmp	r1, #0
    c2f0:	db03      	blt.n	c2fa <lv_draw_mask_radius+0x586>
                    _lv_memset_00(&mask_buf[first], len_tmp);
    c2f2:	9b02      	ldr	r3, [sp, #8]
    c2f4:	4418      	add	r0, r3
    c2f6:	4b1a      	ldr	r3, [pc, #104]	; (c360 <lv_draw_mask_radius+0x5ec>)
    c2f8:	4798      	blx	r3
            uint32_t i = x0.i + 1;
    c2fa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    c2fe:	f100 0801 	add.w	r8, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
    c302:	9a04      	ldr	r2, [sp, #16]
    c304:	a908      	add	r1, sp, #32
    c306:	9b01      	ldr	r3, [sp, #4]
    c308:	fb00 3010 	mls	r0, r0, r0, r3
    c30c:	4b15      	ldr	r3, [pc, #84]	; (c364 <lv_draw_mask_radius+0x5f0>)
    c30e:	4798      	blx	r3
            if(y_prev.f == 0) {
    c310:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    c314:	b93b      	cbnz	r3, c326 <lv_draw_mask_radius+0x5b2>
                y_prev.i--;
    c316:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    c31a:	3b01      	subs	r3, #1
    c31c:	f8ad 3020 	strh.w	r3, [sp, #32]
                y_prev.f = 0xFF;
    c320:	23ff      	movs	r3, #255	; 0xff
    c322:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
    c326:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    c32a:	429c      	cmp	r4, r3
    c32c:	f77f ae54 	ble.w	bfd8 <lv_draw_mask_radius+0x264>
            for(; i <= x1.i; i++) {
    c330:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    c334:	45a8      	cmp	r8, r5
    c336:	f63f af05 	bhi.w	c144 <lv_draw_mask_radius+0x3d0>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
    c33a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    c33e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    c342:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
    c346:	4641      	mov	r1, r8
    c348:	4654      	mov	r4, sl
    c34a:	9803      	ldr	r0, [sp, #12]
    if(mask_new <= LV_OPA_MIN) return 0;
    c34c:	f8cd 8010 	str.w	r8, [sp, #16]
    c350:	f8cd a014 	str.w	sl, [sp, #20]
    c354:	f8dd a004 	ldr.w	sl, [sp, #4]
    c358:	9501      	str	r5, [sp, #4]
    c35a:	f8dd e008 	ldr.w	lr, [sp, #8]
    c35e:	e69d      	b.n	c09c <lv_draw_mask_radius+0x328>
    c360:	000130df 	.word	0x000130df
    c364:	000128c5 	.word	0x000128c5

0000c368 <lv_draw_mask_add>:
{
    c368:	b510      	push	{r4, lr}
    c36a:	b082      	sub	sp, #8
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    c36c:	4b10      	ldr	r3, [pc, #64]	; (c3b0 <lv_draw_mask_add+0x48>)
    c36e:	681b      	ldr	r3, [r3, #0]
    c370:	b19b      	cbz	r3, c39a <lv_draw_mask_add+0x32>
    c372:	4a0f      	ldr	r2, [pc, #60]	; (c3b0 <lv_draw_mask_add+0x48>)
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    c374:	2301      	movs	r3, #1
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
    c376:	6894      	ldr	r4, [r2, #8]
    c378:	b184      	cbz	r4, c39c <lv_draw_mask_add+0x34>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    c37a:	3301      	adds	r3, #1
    c37c:	b2db      	uxtb	r3, r3
    c37e:	3208      	adds	r2, #8
    c380:	2b10      	cmp	r3, #16
    c382:	d1f8      	bne.n	c376 <lv_draw_mask_add+0xe>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
    c384:	4b0b      	ldr	r3, [pc, #44]	; (c3b4 <lv_draw_mask_add+0x4c>)
    c386:	9300      	str	r3, [sp, #0]
    c388:	4b0b      	ldr	r3, [pc, #44]	; (c3b8 <lv_draw_mask_add+0x50>)
    c38a:	2257      	movs	r2, #87	; 0x57
    c38c:	490b      	ldr	r1, [pc, #44]	; (c3bc <lv_draw_mask_add+0x54>)
    c38e:	2002      	movs	r0, #2
    c390:	4c0b      	ldr	r4, [pc, #44]	; (c3c0 <lv_draw_mask_add+0x58>)
    c392:	47a0      	blx	r4
        return LV_MASK_ID_INV;
    c394:	f04f 30ff 	mov.w	r0, #4294967295
    c398:	e007      	b.n	c3aa <lv_draw_mask_add+0x42>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    c39a:	2300      	movs	r3, #0
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    c39c:	4a04      	ldr	r2, [pc, #16]	; (c3b0 <lv_draw_mask_add+0x48>)
    c39e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
    c3a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    c3a6:	6051      	str	r1, [r2, #4]
    return i;
    c3a8:	b218      	sxth	r0, r3
}
    c3aa:	b002      	add	sp, #8
    c3ac:	bd10      	pop	{r4, pc}
    c3ae:	bf00      	nop
    c3b0:	20006d88 	.word	0x20006d88
    c3b4:	0001c508 	.word	0x0001c508
    c3b8:	0001c4ac 	.word	0x0001c4ac
    c3bc:	0001c4d8 	.word	0x0001c4d8
    c3c0:	00012805 	.word	0x00012805

0000c3c4 <lv_draw_mask_apply>:
{
    c3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3c8:	b082      	sub	sp, #8
    while(m->param) {
    c3ca:	4c11      	ldr	r4, [pc, #68]	; (c410 <lv_draw_mask_apply+0x4c>)
    c3cc:	6824      	ldr	r4, [r4, #0]
    c3ce:	b1ec      	cbz	r4, c40c <lv_draw_mask_apply+0x48>
    c3d0:	469a      	mov	sl, r3
    c3d2:	4691      	mov	r9, r2
    c3d4:	4688      	mov	r8, r1
    c3d6:	4607      	mov	r7, r0
    c3d8:	4e0d      	ldr	r6, [pc, #52]	; (c410 <lv_draw_mask_apply+0x4c>)
    c3da:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
    c3dc:	9400      	str	r4, [sp, #0]
    c3de:	6824      	ldr	r4, [r4, #0]
    c3e0:	4653      	mov	r3, sl
    c3e2:	464a      	mov	r2, r9
    c3e4:	4641      	mov	r1, r8
    c3e6:	4638      	mov	r0, r7
    c3e8:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
    c3ea:	4604      	mov	r4, r0
    c3ec:	b150      	cbz	r0, c404 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
    c3ee:	2802      	cmp	r0, #2
    c3f0:	bf08      	it	eq
    c3f2:	2501      	moveq	r5, #1
    while(m->param) {
    c3f4:	f856 4f08 	ldr.w	r4, [r6, #8]!
    c3f8:	2c00      	cmp	r4, #0
    c3fa:	d1ef      	bne.n	c3dc <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    c3fc:	2d00      	cmp	r5, #0
    c3fe:	bf14      	ite	ne
    c400:	2402      	movne	r4, #2
    c402:	2401      	moveq	r4, #1
}
    c404:	4620      	mov	r0, r4
    c406:	b002      	add	sp, #8
    c408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
    c40c:	2401      	movs	r4, #1
    c40e:	e7f9      	b.n	c404 <lv_draw_mask_apply+0x40>
    c410:	20006d88 	.word	0x20006d88

0000c414 <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
    c414:	f1b0 3fff 	cmp.w	r0, #4294967295
    c418:	d00a      	beq.n	c430 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
    c41a:	4b06      	ldr	r3, [pc, #24]	; (c434 <lv_draw_mask_remove_id+0x20>)
    c41c:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
    c420:	2200      	movs	r2, #0
    c422:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
    c426:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    c42a:	605a      	str	r2, [r3, #4]
}
    c42c:	4608      	mov	r0, r1
    c42e:	4770      	bx	lr
    void * p = NULL;
    c430:	2100      	movs	r1, #0
    return p;
    c432:	e7fb      	b.n	c42c <lv_draw_mask_remove_id+0x18>
    c434:	20006d88 	.word	0x20006d88

0000c438 <lv_draw_mask_remove_custom>:
{
    c438:	b470      	push	{r4, r5, r6}
    c43a:	4b0b      	ldr	r3, [pc, #44]	; (c468 <lv_draw_mask_remove_custom+0x30>)
    c43c:	1d1a      	adds	r2, r3, #4
    c43e:	f103 0480 	add.w	r4, r3, #128	; 0x80
    void * p = NULL;
    c442:	2600      	movs	r6, #0
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    c444:	4635      	mov	r5, r6
    c446:	e003      	b.n	c450 <lv_draw_mask_remove_custom+0x18>
    c448:	3308      	adds	r3, #8
    c44a:	3208      	adds	r2, #8
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    c44c:	42a3      	cmp	r3, r4
    c44e:	d008      	beq.n	c462 <lv_draw_mask_remove_custom+0x2a>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
    c450:	6859      	ldr	r1, [r3, #4]
    c452:	4281      	cmp	r1, r0
    c454:	d1f8      	bne.n	c448 <lv_draw_mask_remove_custom+0x10>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
    c456:	f852 6c04 	ldr.w	r6, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
    c45a:	f842 5c04 	str.w	r5, [r2, #-4]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
    c45e:	605d      	str	r5, [r3, #4]
    c460:	e7f2      	b.n	c448 <lv_draw_mask_remove_custom+0x10>
}
    c462:	4630      	mov	r0, r6
    c464:	bc70      	pop	{r4, r5, r6}
    c466:	4770      	bx	lr
    c468:	20006d88 	.word	0x20006d88

0000c46c <lv_draw_mask_get_cnt>:
{
    c46c:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    c46e:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    c470:	4906      	ldr	r1, [pc, #24]	; (c48c <lv_draw_mask_get_cnt+0x20>)
    c472:	e002      	b.n	c47a <lv_draw_mask_get_cnt+0xe>
    c474:	3301      	adds	r3, #1
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
    c476:	2b10      	cmp	r3, #16
    c478:	d006      	beq.n	c488 <lv_draw_mask_get_cnt+0x1c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
    c47a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
    c47e:	2a00      	cmp	r2, #0
    c480:	d0f8      	beq.n	c474 <lv_draw_mask_get_cnt+0x8>
    c482:	3001      	adds	r0, #1
    c484:	b2c0      	uxtb	r0, r0
    c486:	e7f5      	b.n	c474 <lv_draw_mask_get_cnt+0x8>
}
    c488:	4770      	bx	lr
    c48a:	bf00      	nop
    c48c:	20006d88 	.word	0x20006d88

0000c490 <lv_draw_mask_line_points_init>:
{
    c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c494:	4604      	mov	r4, r0
    c496:	460f      	mov	r7, r1
    c498:	4615      	mov	r5, r2
    c49a:	4698      	mov	r8, r3
    c49c:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
    c4a0:	212c      	movs	r1, #44	; 0x2c
    c4a2:	4b4a      	ldr	r3, [pc, #296]	; (c5cc <lv_draw_mask_line_points_init+0x13c>)
    c4a4:	4798      	blx	r3
    if(p1y > p2y) {
    c4a6:	42b5      	cmp	r5, r6
    c4a8:	dd05      	ble.n	c4b6 <lv_draw_mask_line_points_init+0x26>
    c4aa:	462b      	mov	r3, r5
        p1y = t;
    c4ac:	4635      	mov	r5, r6
        p2y = p1y;
    c4ae:	461e      	mov	r6, r3
    if(p1y > p2y) {
    c4b0:	463b      	mov	r3, r7
        p1x = t;
    c4b2:	4647      	mov	r7, r8
        p2x = p1x;
    c4b4:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
    c4b6:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
    c4b8:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
    c4ba:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
    c4be:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
    c4c0:	7c23      	ldrb	r3, [r4, #16]
    c4c2:	f89d 201c 	ldrb.w	r2, [sp, #28]
    c4c6:	f362 0301 	bfi	r3, r2, #0, #2
    c4ca:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
    c4cc:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
    c4ce:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
    c4d0:	eba8 0707 	sub.w	r7, r8, r7
    c4d4:	1b75      	subs	r5, r6, r5
    c4d6:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
    c4da:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
    c4de:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
    c4e2:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
    c4e6:	4299      	cmp	r1, r3
    c4e8:	bfd4      	ite	le
    c4ea:	2100      	movle	r1, #0
    c4ec:	2101      	movgt	r1, #1
    c4ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    c4f2:	f361 0200 	bfi	r2, r1, #0, #1
    c4f6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    param->yx_steep = 0;
    c4fa:	2100      	movs	r1, #0
    c4fc:	61e1      	str	r1, [r4, #28]
    param->xy_steep = 0;
    c4fe:	61a1      	str	r1, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
    c500:	4b33      	ldr	r3, [pc, #204]	; (c5d0 <lv_draw_mask_line_points_init+0x140>)
    c502:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
    c504:	7121      	strb	r1, [r4, #4]
    if(param->flat) {
    c506:	f012 0f01 	tst.w	r2, #1
    c50a:	d025      	beq.n	c558 <lv_draw_mask_line_points_init+0xc8>
        if(dx) {
    c50c:	b13f      	cbz	r7, c51e <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
    c50e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    c512:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
    c516:	fb05 f303 	mul.w	r3, r5, r3
    c51a:	129b      	asrs	r3, r3, #10
    c51c:	61e3      	str	r3, [r4, #28]
        if(dy) {
    c51e:	b13d      	cbz	r5, c530 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    c520:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    c524:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
    c528:	fb07 f705 	mul.w	r7, r7, r5
    c52c:	12bf      	asrs	r7, r7, #10
    c52e:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
    c530:	69e3      	ldr	r3, [r4, #28]
    c532:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
    c534:	7c23      	ldrb	r3, [r4, #16]
    c536:	f013 0303 	ands.w	r3, r3, #3
    c53a:	d122      	bne.n	c582 <lv_draw_mask_line_points_init+0xf2>
    c53c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c540:	f36f 0341 	bfc	r3, #1, #1
    c544:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
    c548:	6a23      	ldr	r3, [r4, #32]
    c54a:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
    c54c:	2b00      	cmp	r3, #0
    c54e:	bfb8      	it	lt
    c550:	4252      	neglt	r2, r2
    c552:	6262      	str	r2, [r4, #36]	; 0x24
    c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
    c558:	b13d      	cbz	r5, c56a <lv_draw_mask_line_points_init+0xda>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
    c55a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    c55e:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
    c562:	fb07 f303 	mul.w	r3, r7, r3
    c566:	129b      	asrs	r3, r3, #10
    c568:	61a3      	str	r3, [r4, #24]
        if(dx) {
    c56a:	b13f      	cbz	r7, c57c <lv_draw_mask_line_points_init+0xec>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
    c56c:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
    c570:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
    c574:	fb05 f507 	mul.w	r5, r5, r7
    c578:	12ad      	asrs	r5, r5, #10
    c57a:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
    c57c:	69a3      	ldr	r3, [r4, #24]
    c57e:	6223      	str	r3, [r4, #32]
    c580:	e7d8      	b.n	c534 <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    c582:	2b01      	cmp	r3, #1
    c584:	d00f      	beq.n	c5a6 <lv_draw_mask_line_points_init+0x116>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
    c586:	2b02      	cmp	r3, #2
    c588:	d014      	beq.n	c5b4 <lv_draw_mask_line_points_init+0x124>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
    c58a:	2b03      	cmp	r3, #3
    c58c:	d1dc      	bne.n	c548 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
    c58e:	6a23      	ldr	r3, [r4, #32]
    c590:	2b00      	cmp	r3, #0
    c592:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c596:	bfcc      	ite	gt
    c598:	f36f 0341 	bfcgt	r3, #1, #1
        else param->inv = 1;
    c59c:	f043 0302 	orrle.w	r3, r3, #2
    c5a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c5a4:	e7d0      	b.n	c548 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
    c5a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c5aa:	f043 0302 	orr.w	r3, r3, #2
    c5ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c5b2:	e7c9      	b.n	c548 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
    c5b4:	6a23      	ldr	r3, [r4, #32]
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c5bc:	bfcc      	ite	gt
    c5be:	f043 0302 	orrgt.w	r3, r3, #2
        else param->inv = 0;
    c5c2:	f36f 0341 	bfcle	r3, #1, #1
    c5c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c5ca:	e7bd      	b.n	c548 <lv_draw_mask_line_points_init+0xb8>
    c5cc:	000130df 	.word	0x000130df
    c5d0:	0000b7c9 	.word	0x0000b7c9

0000c5d4 <lv_draw_mask_radius_init>:
{
    c5d4:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c5d6:	88cc      	ldrh	r4, [r1, #6]
    c5d8:	3401      	adds	r4, #1
    c5da:	884d      	ldrh	r5, [r1, #2]
    c5dc:	1b64      	subs	r4, r4, r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c5de:	888d      	ldrh	r5, [r1, #4]
    c5e0:	3501      	adds	r5, #1
    c5e2:	880e      	ldrh	r6, [r1, #0]
    c5e4:	1bad      	subs	r5, r5, r6
    int32_t short_side = LV_MATH_MIN(w, h);
    c5e6:	b224      	sxth	r4, r4
    c5e8:	b22d      	sxth	r5, r5
    c5ea:	42ac      	cmp	r4, r5
    c5ec:	bfa8      	it	ge
    c5ee:	462c      	movge	r4, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
    c5f0:	1064      	asrs	r4, r4, #1
    c5f2:	42a2      	cmp	r2, r4
    c5f4:	bfc8      	it	gt
    c5f6:	b222      	sxthgt	r2, r4
    c5f8:	3901      	subs	r1, #1
    c5fa:	f100 0610 	add.w	r6, r0, #16
    uint8_t * d8 = (uint8_t *)dst;
    c5fe:	f100 0408 	add.w	r4, r0, #8
        *d8 = *s8;
    c602:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    c606:	f804 5b01 	strb.w	r5, [r4], #1
    while(len) {
    c60a:	42b4      	cmp	r4, r6
    c60c:	d1f9      	bne.n	c602 <lv_draw_mask_radius_init+0x2e>
    param->cfg.radius = radius;
    c60e:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
    c610:	7c82      	ldrb	r2, [r0, #18]
    c612:	f363 0200 	bfi	r2, r3, #0, #1
    c616:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
    c618:	4b05      	ldr	r3, [pc, #20]	; (c630 <lv_draw_mask_radius_init+0x5c>)
    c61a:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
    c61c:	2302      	movs	r3, #2
    c61e:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
    c620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c624:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
    c626:	2300      	movs	r3, #0
    c628:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
    c62a:	8303      	strh	r3, [r0, #24]
}
    c62c:	bc70      	pop	{r4, r5, r6}
    c62e:	4770      	bx	lr
    c630:	0000bd75 	.word	0x0000bd75

0000c634 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
    c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c638:	b08b      	sub	sp, #44	; 0x2c
    c63a:	9006      	str	r0, [sp, #24]
    c63c:	4689      	mov	r9, r1
    c63e:	9207      	str	r2, [sp, #28]
    int32_t s_left = sw >> 1;
    c640:	ea4f 0b61 	mov.w	fp, r1, asr #1
    c644:	f8cd b008 	str.w	fp, [sp, #8]
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
    c648:	f011 0f01 	tst.w	r1, #1
    c64c:	bf06      	itte	eq
    c64e:	f10b 33ff 	addeq.w	r3, fp, #4294967295
    c652:	9308      	streq	r3, [sp, #32]
    int32_t s_left = sw >> 1;
    c654:	f8cd b020 	strne.w	fp, [sp, #32]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
    c658:	9c06      	ldr	r4, [sp, #24]
    c65a:	0067      	lsls	r7, r4, #1
    c65c:	4638      	mov	r0, r7
    c65e:	4b69      	ldr	r3, [pc, #420]	; (c804 <shadow_blur_corner+0x1d0>)
    c660:	4798      	blx	r3
    c662:	9005      	str	r0, [sp, #20]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
    c664:	2c00      	cmp	r4, #0
    c666:	f340 80be 	ble.w	c7e6 <shadow_blur_corner+0x1b2>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    c66a:	1eba      	subs	r2, r7, #2
    c66c:	19c1      	adds	r1, r0, r7
    c66e:	9103      	str	r1, [sp, #12]
    c670:	9d07      	ldr	r5, [sp, #28]
    c672:	f04f 0800 	mov.w	r8, #0
        for(x = size - 1; x >= 0; x--) {
    c676:	f104 3aff 	add.w	sl, r4, #4294967295
    c67a:	9908      	ldr	r1, [sp, #32]
    c67c:	ebaa 0101 	sub.w	r1, sl, r1
    c680:	9104      	str	r1, [sp, #16]
    c682:	4606      	mov	r6, r0
    c684:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    c688:	4693      	mov	fp, r2
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
    c68a:	f8cd 9004 	str.w	r9, [sp, #4]
    c68e:	f835 300b 	ldrh.w	r3, [r5, fp]
    c692:	fb09 f303 	mul.w	r3, r9, r3
        for(x = size - 1; x >= 0; x--) {
    c696:	f1ba 0f00 	cmp.w	sl, #0
    c69a:	db1b      	blt.n	c6d4 <shadow_blur_corner+0xa0>
    c69c:	9a02      	ldr	r2, [sp, #8]
    c69e:	eb02 010a 	add.w	r1, r2, sl
    c6a2:	9a04      	ldr	r2, [sp, #16]
    c6a4:	3a01      	subs	r2, #1
    c6a6:	9803      	ldr	r0, [sp, #12]
    c6a8:	f04f 0e00 	mov.w	lr, #0
            sh_ups_blur_buf[x] = v;
    c6ac:	f820 3d02 	strh.w	r3, [r0, #-2]!

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
    c6b0:	428c      	cmp	r4, r1
    c6b2:	bfcc      	ite	gt
    c6b4:	f835 c011 	ldrhgt.w	ip, [r5, r1, lsl #1]
    c6b8:	46f4      	movle	ip, lr
            v -= right_val;
    c6ba:	eba3 030c 	sub.w	r3, r3, ip

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
    c6be:	2a00      	cmp	r2, #0
    c6c0:	bfb4      	ite	lt
    c6c2:	f8b5 c000 	ldrhlt.w	ip, [r5]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
    c6c6:	f835 c012 	ldrhge.w	ip, [r5, r2, lsl #1]
            v += left_val;
    c6ca:	4463      	add	r3, ip
    c6cc:	3901      	subs	r1, #1
    c6ce:	3a01      	subs	r2, #1
        for(x = size - 1; x >= 0; x--) {
    c6d0:	42b0      	cmp	r0, r6
    c6d2:	d1eb      	bne.n	c6ac <shadow_blur_corner+0x78>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
    c6d4:	463a      	mov	r2, r7
    c6d6:	4631      	mov	r1, r6
    c6d8:	4628      	mov	r0, r5
    c6da:	4b4b      	ldr	r3, [pc, #300]	; (c808 <shadow_blur_corner+0x1d4>)
    c6dc:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    c6de:	443d      	add	r5, r7
    for(y = 0; y < size; y++) {
    c6e0:	f108 0801 	add.w	r8, r8, #1
    c6e4:	45a0      	cmp	r8, r4
    c6e6:	d1d0      	bne.n	c68a <shadow_blur_corner+0x56>
    c6e8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    c6ec:	9a07      	ldr	r2, [sp, #28]
    c6ee:	8813      	ldrh	r3, [r2, #0]
    c6f0:	9901      	ldr	r1, [sp, #4]
    c6f2:	fb93 f3f1 	sdiv	r3, r3, r1
    c6f6:	8013      	strh	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    c6f8:	9b06      	ldr	r3, [sp, #24]
    c6fa:	fb03 f503 	mul.w	r5, r3, r3
    c6fe:	2d01      	cmp	r5, #1
    c700:	d911      	bls.n	c726 <shadow_blur_corner+0xf2>
    c702:	9a07      	ldr	r2, [sp, #28]
    c704:	2101      	movs	r1, #1
    c706:	9e01      	ldr	r6, [sp, #4]
    c708:	4610      	mov	r0, r2
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
    c70a:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    c70e:	8800      	ldrh	r0, [r0, #0]
    c710:	4298      	cmp	r0, r3
        else  sh_ups_buf[i] = sh_ups_buf[i] / sw;
    c712:	bf1c      	itt	ne
    c714:	fb93 f3f6 	sdivne	r3, r3, r6
    c718:	8013      	strhne	r3, [r2, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
    c71a:	3101      	adds	r1, #1
    c71c:	42a9      	cmp	r1, r5
    c71e:	d3f3      	bcc.n	c708 <shadow_blur_corner+0xd4>
    }

    for(x = 0; x < size; x++) {
    c720:	9b06      	ldr	r3, [sp, #24]
    c722:	2b00      	cmp	r3, #0
    c724:	dd59      	ble.n	c7da <shadow_blur_corner+0x1a6>
    c726:	9e07      	ldr	r6, [sp, #28]
    c728:	9602      	str	r6, [sp, #8]
    c72a:	9908      	ldr	r1, [sp, #32]
    c72c:	fb01 7207 	mla	r2, r1, r7, r7
    c730:	ea6f 030b 	mvn.w	r3, fp
    c734:	1a5b      	subs	r3, r3, r1
    c736:	9d06      	ldr	r5, [sp, #24]
    c738:	fb05 f303 	mul.w	r3, r5, r3
    c73c:	9306      	str	r3, [sp, #24]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    c73e:	1e6b      	subs	r3, r5, #1
    c740:	fb05 f303 	mul.w	r3, r5, r3
    c744:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    c748:	9307      	str	r3, [sp, #28]
    c74a:	f04f 0a00 	mov.w	sl, #0
    c74e:	1e93      	subs	r3, r2, #2
    c750:	9308      	str	r3, [sp, #32]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    c752:	f101 0901 	add.w	r9, r1, #1
        sh_ups_tmp_buf = &sh_ups_buf[x];
    c756:	9b02      	ldr	r3, [sp, #8]
    c758:	461e      	mov	r6, r3
    c75a:	3302      	adds	r3, #2
    c75c:	461a      	mov	r2, r3
    c75e:	9302      	str	r3, [sp, #8]
        int32_t v = sh_ups_tmp_buf[0] * sw;
    c760:	8833      	ldrh	r3, [r6, #0]
    c762:	9901      	ldr	r1, [sp, #4]
    c764:	fb01 f303 	mul.w	r3, r1, r3
    c768:	9908      	ldr	r1, [sp, #32]
    c76a:	188d      	adds	r5, r1, r2
    c76c:	9a05      	ldr	r2, [sp, #20]
    c76e:	f1a2 0c02 	sub.w	ip, r2, #2
    c772:	46e0      	mov	r8, ip
    c774:	46b6      	mov	lr, r6
    c776:	2200      	movs	r2, #0
    c778:	f8cd c00c 	str.w	ip, [sp, #12]
    c77c:	9604      	str	r6, [sp, #16]
    c77e:	9e06      	ldr	r6, [sp, #24]
    c780:	f8dd c01c 	ldr.w	ip, [sp, #28]
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSACALE_SHIFT);
    c784:	2b00      	cmp	r3, #0
    c786:	bfac      	ite	ge
    c788:	1199      	asrge	r1, r3, #6
    c78a:	2100      	movlt	r1, #0
    c78c:	f828 1f02 	strh.w	r1, [r8, #2]!
    c790:	4611      	mov	r1, r2
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
    c792:	eba2 000b 	sub.w	r0, r2, fp
    c796:	2800      	cmp	r0, #0
    c798:	bfd4      	ite	le
    c79a:	f8be 0000 	ldrhle.w	r0, [lr]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
    c79e:	f835 0016 	ldrhgt.w	r0, [r5, r6, lsl #1]
            v -= top_val;
    c7a2:	1a1b      	subs	r3, r3, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
    c7a4:	4449      	add	r1, r9
    c7a6:	428c      	cmp	r4, r1
    c7a8:	bfcc      	ite	gt
    c7aa:	8829      	ldrhgt	r1, [r5, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
    c7ac:	f83c 101a 	ldrhle.w	r1, [ip, sl, lsl #1]
            v += bottom_val;
    c7b0:	440b      	add	r3, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
    c7b2:	3201      	adds	r2, #1
    c7b4:	44be      	add	lr, r7
    c7b6:	443d      	add	r5, r7
    c7b8:	42a2      	cmp	r2, r4
    c7ba:	dbe3      	blt.n	c784 <shadow_blur_corner+0x150>
    c7bc:	f8dd c00c 	ldr.w	ip, [sp, #12]
    c7c0:	9e04      	ldr	r6, [sp, #16]
    c7c2:	2300      	movs	r3, #0
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
    c7c4:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
    c7c8:	8032      	strh	r2, [r6, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
    c7ca:	3301      	adds	r3, #1
    c7cc:	443e      	add	r6, r7
    c7ce:	42a3      	cmp	r3, r4
    c7d0:	dbf8      	blt.n	c7c4 <shadow_blur_corner+0x190>
    for(x = 0; x < size; x++) {
    c7d2:	f10a 0a01 	add.w	sl, sl, #1
    c7d6:	45a2      	cmp	sl, r4
    c7d8:	dbbd      	blt.n	c756 <shadow_blur_corner+0x122>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
    c7da:	9805      	ldr	r0, [sp, #20]
    c7dc:	4b0b      	ldr	r3, [pc, #44]	; (c80c <shadow_blur_corner+0x1d8>)
    c7de:	4798      	blx	r3
}
    c7e0:	b00b      	add	sp, #44	; 0x2c
    c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
    c7e6:	f8cd 9004 	str.w	r9, [sp, #4]
    c7ea:	9a07      	ldr	r2, [sp, #28]
    c7ec:	8813      	ldrh	r3, [r2, #0]
    c7ee:	fb93 f9f9 	sdiv	r9, r3, r9
    c7f2:	f8a2 9000 	strh.w	r9, [r2]
    for(i = 1; i < (uint32_t)size * size; i++) {
    c7f6:	9b06      	ldr	r3, [sp, #24]
    c7f8:	fb03 f503 	mul.w	r5, r3, r3
    c7fc:	2d01      	cmp	r5, #1
    c7fe:	d880      	bhi.n	c702 <shadow_blur_corner+0xce>
    c800:	e7eb      	b.n	c7da <shadow_blur_corner+0x1a6>
    c802:	bf00      	nop
    c804:	00012ee5 	.word	0x00012ee5
    c808:	00012bfd 	.word	0x00012bfd
    c80c:	00012b19 	.word	0x00012b19

0000c810 <lv_draw_rect_dsc_init>:
{
    c810:	b510      	push	{r4, lr}
    c812:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    c814:	2154      	movs	r1, #84	; 0x54
    c816:	4b2d      	ldr	r3, [pc, #180]	; (c8cc <lv_draw_rect_dsc_init+0xbc>)
    c818:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
    c81a:	4b2d      	ldr	r3, [pc, #180]	; (c8d0 <lv_draw_rect_dsc_init+0xc0>)
    c81c:	881b      	ldrh	r3, [r3, #0]
    c81e:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
    c820:	7923      	ldrb	r3, [r4, #4]
    c822:	f36f 0304 	bfc	r3, #0, #5
    c826:	7123      	strb	r3, [r4, #4]
    c828:	88a3      	ldrh	r3, [r4, #4]
    c82a:	f36f 134a 	bfc	r3, #5, #6
    c82e:	80a3      	strh	r3, [r4, #4]
    c830:	0a1b      	lsrs	r3, r3, #8
    c832:	f36f 03c7 	bfc	r3, #3, #5
    c836:	7163      	strb	r3, [r4, #5]
    dsc->border_color = LV_COLOR_BLACK;
    c838:	7ba3      	ldrb	r3, [r4, #14]
    c83a:	f36f 0304 	bfc	r3, #0, #5
    c83e:	73a3      	strb	r3, [r4, #14]
    c840:	89e3      	ldrh	r3, [r4, #14]
    c842:	f36f 134a 	bfc	r3, #5, #6
    c846:	81e3      	strh	r3, [r4, #14]
    c848:	0a1b      	lsrs	r3, r3, #8
    c84a:	f36f 03c7 	bfc	r3, #3, #5
    c84e:	73e3      	strb	r3, [r4, #15]
    dsc->pattern_recolor = LV_COLOR_BLACK;
    c850:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    c854:	f36f 0304 	bfc	r3, #0, #5
    c858:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    c85c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    c85e:	f36f 134a 	bfc	r3, #5, #6
    c862:	86a3      	strh	r3, [r4, #52]	; 0x34
    c864:	0a1b      	lsrs	r3, r3, #8
    c866:	f36f 03c7 	bfc	r3, #3, #5
    c86a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    dsc->value_color = LV_COLOR_BLACK;
    c86e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    c872:	f36f 0304 	bfc	r3, #0, #5
    c876:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    c87a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    c87e:	f36f 134a 	bfc	r3, #5, #6
    c882:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    c886:	0a1b      	lsrs	r3, r3, #8
    c888:	f36f 03c7 	bfc	r3, #3, #5
    c88c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    dsc->shadow_color = LV_COLOR_BLACK;
    c890:	7fa3      	ldrb	r3, [r4, #30]
    c892:	f36f 0304 	bfc	r3, #0, #5
    c896:	77a3      	strb	r3, [r4, #30]
    c898:	8be3      	ldrh	r3, [r4, #30]
    c89a:	f36f 134a 	bfc	r3, #5, #6
    c89e:	83e3      	strh	r3, [r4, #30]
    c8a0:	0a1b      	lsrs	r3, r3, #8
    c8a2:	f36f 03c7 	bfc	r3, #3, #5
    c8a6:	77e3      	strb	r3, [r4, #31]
    dsc->bg_grad_color_stop = 0xFF;
    c8a8:	23ff      	movs	r3, #255	; 0xff
    c8aa:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
    c8ac:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
    c8ae:	7723      	strb	r3, [r4, #28]
    dsc->border_opa = LV_OPA_COVER;
    c8b0:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
    c8b2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
    c8b6:	4a07      	ldr	r2, [pc, #28]	; (c8d4 <lv_draw_rect_dsc_init+0xc4>)
    c8b8:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
    c8ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    c8be:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
    c8c0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    dsc->border_side = LV_BORDER_SIDE_FULL;
    c8c4:	230f      	movs	r3, #15
    c8c6:	8263      	strh	r3, [r4, #18]
    c8c8:	bd10      	pop	{r4, pc}
    c8ca:	bf00      	nop
    c8cc:	000130df 	.word	0x000130df
    c8d0:	0001c560 	.word	0x0001c560
    c8d4:	20000010 	.word	0x20000010

0000c8d8 <lv_draw_rect>:
{
    c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8dc:	b0b1      	sub	sp, #196	; 0xc4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    c8de:	88c4      	ldrh	r4, [r0, #6]
    c8e0:	8845      	ldrh	r5, [r0, #2]
    c8e2:	1c63      	adds	r3, r4, #1
    c8e4:	1b5b      	subs	r3, r3, r5
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
    c8e6:	b21b      	sxth	r3, r3
    c8e8:	2b00      	cmp	r3, #0
    c8ea:	f341 800f 	ble.w	d90c <lv_draw_rect+0x1034>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    c8ee:	8886      	ldrh	r6, [r0, #4]
    c8f0:	f8b0 8000 	ldrh.w	r8, [r0]
    c8f4:	1c73      	adds	r3, r6, #1
    c8f6:	eba3 0308 	sub.w	r3, r3, r8
    c8fa:	b21b      	sxth	r3, r3
    c8fc:	2b00      	cmp	r3, #0
    c8fe:	f341 8005 	ble.w	d90c <lv_draw_rect+0x1034>
    c902:	4692      	mov	sl, r2
    c904:	9104      	str	r1, [sp, #16]
    c906:	9006      	str	r0, [sp, #24]
    if(dsc->shadow_width == 0) return;
    c908:	f9b2 7020 	ldrsh.w	r7, [r2, #32]
    c90c:	2f00      	cmp	r7, #0
    c90e:	f000 8719 	beq.w	d744 <lv_draw_rect+0xe6c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
    c912:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    c916:	9309      	str	r3, [sp, #36]	; 0x24
    c918:	2b05      	cmp	r3, #5
    c91a:	f240 8713 	bls.w	d744 <lv_draw_rect+0xe6c>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    c91e:	6a13      	ldr	r3, [r2, #32]
    c920:	2b01      	cmp	r3, #1
    c922:	f000 80f6 	beq.w	cb12 <lv_draw_rect+0x23a>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
    c926:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
    c92a:	f8ba 3026 	ldrh.w	r3, [sl, #38]	; 0x26
    c92e:	1ad1      	subs	r1, r2, r3
    c930:	4488      	add	r8, r1
    c932:	fa1f f888 	uxth.w	r8, r8
    c936:	f8ad 8050 	strh.w	r8, [sp, #80]	; 0x50
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
    c93a:	441a      	add	r2, r3
    c93c:	4416      	add	r6, r2
    c93e:	b2b6      	uxth	r6, r6
    c940:	f8ad 6054 	strh.w	r6, [sp, #84]	; 0x54
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
    c944:	f8ba 2024 	ldrh.w	r2, [sl, #36]	; 0x24
    c948:	1ad1      	subs	r1, r2, r3
    c94a:	440d      	add	r5, r1
    c94c:	b2ad      	uxth	r5, r5
    c94e:	f8ad 5052 	strh.w	r5, [sp, #82]	; 0x52
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
    c952:	4413      	add	r3, r2
    c954:	441c      	add	r4, r3
    c956:	b2a4      	uxth	r4, r4
    c958:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
    c95c:	eb07 73d7 	add.w	r3, r7, r7, lsr #31
    c960:	ea6f 0263 	mvn.w	r2, r3, asr #1
    c964:	b292      	uxth	r2, r2
    c966:	eb08 0102 	add.w	r1, r8, r2
    c96a:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
    c96e:	105b      	asrs	r3, r3, #1
    c970:	3301      	adds	r3, #1
    c972:	b29b      	uxth	r3, r3
    c974:	18f1      	adds	r1, r6, r3
    c976:	f8ad 105c 	strh.w	r1, [sp, #92]	; 0x5c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
    c97a:	442a      	add	r2, r5
    c97c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
    c980:	4423      	add	r3, r4
    c982:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    c986:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c988:	2bfb      	cmp	r3, #251	; 0xfb
    c98a:	bf28      	it	cs
    c98c:	23ff      	movcs	r3, #255	; 0xff
    c98e:	9309      	str	r3, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    c990:	4bbe      	ldr	r3, [pc, #760]	; (cc8c <lv_draw_rect+0x3b4>)
    c992:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    c994:	4bbe      	ldr	r3, [pc, #760]	; (cc90 <lv_draw_rect+0x3b8>)
    c996:	4798      	blx	r3
    c998:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
    c99a:	9a04      	ldr	r2, [sp, #16]
    c99c:	a916      	add	r1, sp, #88	; 0x58
    c99e:	a818      	add	r0, sp, #96	; 0x60
    c9a0:	4bbc      	ldr	r3, [pc, #752]	; (cc94 <lv_draw_rect+0x3bc>)
    c9a2:	4798      	blx	r3
    if(is_common == false) return;
    c9a4:	2800      	cmp	r0, #0
    c9a6:	f000 86cd 	beq.w	d744 <lv_draw_rect+0xe6c>
    draw_area.x1 -= disp_area->x1;
    c9aa:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    c9ae:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    c9b2:	1a5b      	subs	r3, r3, r1
    c9b4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    c9b8:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    c9bc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    c9c0:	1a9b      	subs	r3, r3, r2
    c9c2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    c9c6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    c9ca:	1a5b      	subs	r3, r3, r1
    c9cc:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    c9d0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    c9d4:	1a9b      	subs	r3, r3, r2
    c9d6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    c9da:	9a06      	ldr	r2, [sp, #24]
    c9dc:	1e53      	subs	r3, r2, #1
    c9de:	1dd0      	adds	r0, r2, #7
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    c9e0:	aa1a      	add	r2, sp, #104	; 0x68
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
    c9e2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    c9e6:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    c9ea:	4298      	cmp	r0, r3
    c9ec:	d1f9      	bne.n	c9e2 <lv_draw_rect+0x10a>
    bg_coords.x1 += 1;
    c9ee:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    c9f2:	3301      	adds	r3, #1
    c9f4:	fa1f fe83 	uxth.w	lr, r3
    c9f8:	f8ad e068 	strh.w	lr, [sp, #104]	; 0x68
    bg_coords.y1 += 1;
    c9fc:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    ca00:	3101      	adds	r1, #1
    ca02:	b288      	uxth	r0, r1
    ca04:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
    bg_coords.x2 -= 1;
    ca08:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    ca0c:	1e5a      	subs	r2, r3, #1
    ca0e:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    bg_coords.y2 -= 1;
    ca12:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    ca16:	1e4a      	subs	r2, r1, #1
    ca18:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
    int32_t r_bg = dsc->radius;
    ca1c:	f9ba 2000 	ldrsh.w	r2, [sl]
    ca20:	eba3 030e 	sub.w	r3, r3, lr
    ca24:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ca26:	1a09      	subs	r1, r1, r0
    ca28:	b209      	sxth	r1, r1
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
    ca2a:	428b      	cmp	r3, r1
    ca2c:	bfa8      	it	ge
    ca2e:	460b      	movge	r3, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
    ca30:	105b      	asrs	r3, r3, #1
    ca32:	4293      	cmp	r3, r2
    ca34:	bfa8      	it	ge
    ca36:	4613      	movge	r3, r2
    ca38:	930e      	str	r3, [sp, #56]	; 0x38
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    ca3a:	3601      	adds	r6, #1
    ca3c:	eba6 0608 	sub.w	r6, r6, r8
    ca40:	b2b6      	uxth	r6, r6
    ca42:	b233      	sxth	r3, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ca44:	3401      	adds	r4, #1
    ca46:	1b64      	subs	r4, r4, r5
    ca48:	b2a4      	uxth	r4, r4
    ca4a:	b225      	sxth	r5, r4
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
    ca4c:	429d      	cmp	r5, r3
    ca4e:	bfa8      	it	ge
    ca50:	461d      	movge	r5, r3
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
    ca52:	106d      	asrs	r5, r5, #1
    ca54:	4295      	cmp	r5, r2
    ca56:	bfa8      	it	ge
    ca58:	4615      	movge	r5, r2
    int32_t corner_size = sw  + r_sh;
    ca5a:	eb07 0905 	add.w	r9, r7, r5
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
    ca5e:	fb09 f009 	mul.w	r0, r9, r9
    ca62:	0040      	lsls	r0, r0, #1
    ca64:	4b8c      	ldr	r3, [pc, #560]	; (cc98 <lv_draw_rect+0x3c0>)
    ca66:	4798      	blx	r3
    ca68:	900a      	str	r0, [sp, #40]	; 0x28
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
    ca6a:	f9ba b020 	ldrsh.w	fp, [sl, #32]
    ca6e:	b22a      	sxth	r2, r5
    int32_t size = sw_ori  + r;
    ca70:	eb02 070b 	add.w	r7, r2, fp
    ca74:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
    uint8_t * d8 = (uint8_t *)dst;
    ca78:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    ca7a:	f10d 0e90 	add.w	lr, sp, #144	; 0x90
        *d8 = *s8;
    ca7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ca82:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    ca86:	4573      	cmp	r3, lr
    ca88:	d1f9      	bne.n	ca7e <lv_draw_rect+0x1a6>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
    ca8a:	eb0b 71db 	add.w	r1, fp, fp, lsr #31
    ca8e:	f3c1 014f 	ubfx	r1, r1, #1, #16
    ca92:	1e4b      	subs	r3, r1, #1
    ca94:	f01b 0001 	ands.w	r0, fp, #1
    ca98:	9010      	str	r0, [sp, #64]	; 0x40
    ca9a:	bf0c      	ite	eq
    ca9c:	2001      	moveq	r0, #1
    ca9e:	2000      	movne	r0, #0
    caa0:	1a1b      	subs	r3, r3, r0
    caa2:	442b      	add	r3, r5
    caa4:	b29b      	uxth	r3, r3
    caa6:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    sh_area.y1 = sw / 2 + 1;
    caaa:	3101      	adds	r1, #1
    caac:	b289      	uxth	r1, r1
    caae:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
    cab2:	1b9b      	subs	r3, r3, r6
    cab4:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
    cab8:	4421      	add	r1, r4
    caba:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
    cabe:	2300      	movs	r3, #0
    cac0:	a922      	add	r1, sp, #136	; 0x88
    cac2:	a829      	add	r0, sp, #164	; 0xa4
    cac4:	4c75      	ldr	r4, [pc, #468]	; (cc9c <lv_draw_rect+0x3c4>)
    cac6:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
    cac8:	f1bb 0f01 	cmp.w	fp, #1
    cacc:	f002 81d8 	beq.w	ee80 <lv_draw_rect+0x25a8>
    cad0:	ea4f 036b 	mov.w	r3, fp, asr #1
    cad4:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    cad6:	9707      	str	r7, [sp, #28]
    cad8:	4638      	mov	r0, r7
    cada:	4b6f      	ldr	r3, [pc, #444]	; (cc98 <lv_draw_rect+0x3c0>)
    cadc:	4798      	blx	r3
    cade:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    cae0:	2f00      	cmp	r7, #0
    cae2:	dd5c      	ble.n	cb9e <lv_draw_rect+0x2c6>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    cae4:	9b07      	ldr	r3, [sp, #28]
    cae6:	ea4f 0b43 	mov.w	fp, r3, lsl #1
    caea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    caee:	3b01      	subs	r3, #1
    caf0:	005b      	lsls	r3, r3, #1
    caf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    caf4:	2500      	movs	r5, #0
        _lv_memset_ff(mask_line, size);
    caf6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; ccb0 <lv_draw_rect+0x3d8>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    cafa:	b23a      	sxth	r2, r7
    cafc:	9208      	str	r2, [sp, #32]
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    cafe:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    cb02:	9705      	str	r7, [sp, #20]
    cb04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    cb06:	4699      	mov	r9, r3
    cb08:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
    cb0c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    cb10:	e014      	b.n	cb3c <lv_draw_rect+0x264>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
    cb12:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
    cb16:	2b00      	cmp	r3, #0
    cb18:	f47f af05 	bne.w	c926 <lv_draw_rect+0x4e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
    cb1c:	f9b2 3026 	ldrsh.w	r3, [r2, #38]	; 0x26
    cb20:	2b00      	cmp	r3, #0
    cb22:	f73f af00 	bgt.w	c926 <lv_draw_rect+0x4e>
    cb26:	f000 be0d 	b.w	d744 <lv_draw_rect+0xe6c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
    cb2a:	4659      	mov	r1, fp
    cb2c:	4620      	mov	r0, r4
    cb2e:	4b5c      	ldr	r3, [pc, #368]	; (cca0 <lv_draw_rect+0x3c8>)
    cb30:	4798      	blx	r3
        sh_ups_tmp_buf += size;
    cb32:	445c      	add	r4, fp
    for(y = 0; y < size; y++) {
    cb34:	3501      	adds	r5, #1
    cb36:	9b05      	ldr	r3, [sp, #20]
    cb38:	42ab      	cmp	r3, r5
    cb3a:	dd2b      	ble.n	cb94 <lv_draw_rect+0x2bc>
        _lv_memset_ff(mask_line, size);
    cb3c:	9907      	ldr	r1, [sp, #28]
    cb3e:	4630      	mov	r0, r6
    cb40:	47c0      	blx	r8
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
    cb42:	ab29      	add	r3, sp, #164	; 0xa4
    cb44:	9300      	str	r3, [sp, #0]
    cb46:	9b08      	ldr	r3, [sp, #32]
    cb48:	b22a      	sxth	r2, r5
    cb4a:	2100      	movs	r1, #0
    cb4c:	4630      	mov	r0, r6
    cb4e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    cb50:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
    cb52:	2800      	cmp	r0, #0
    cb54:	d0e9      	beq.n	cb2a <lv_draw_rect+0x252>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSACALE_SHIFT) / sw;
    cb56:	46d6      	mov	lr, sl
    cb58:	7833      	ldrb	r3, [r6, #0]
    cb5a:	019b      	lsls	r3, r3, #6
    cb5c:	fb93 f3fa 	sdiv	r3, r3, sl
    cb60:	8023      	strh	r3, [r4, #0]
            for(i = 1; i < size; i++) {
    cb62:	9b05      	ldr	r3, [sp, #20]
    cb64:	2b01      	cmp	r3, #1
    cb66:	dde4      	ble.n	cb32 <lv_draw_rect+0x25a>
    cb68:	4631      	mov	r1, r6
    cb6a:	4622      	mov	r2, r4
    cb6c:	eb04 0009 	add.w	r0, r4, r9
    cb70:	461f      	mov	r7, r3
    cb72:	468c      	mov	ip, r1
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
    cb74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    cb78:	f89c c000 	ldrb.w	ip, [ip]
    cb7c:	459c      	cmp	ip, r3
    cb7e:	bf0e      	itee	eq
    cb80:	8813      	ldrheq	r3, [r2, #0]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSACALE_SHIFT) / sw;
    cb82:	019b      	lslne	r3, r3, #6
    cb84:	fb93 f3fe 	sdivne	r3, r3, lr
    cb88:	8053      	strh	r3, [r2, #2]
    cb8a:	3202      	adds	r2, #2
            for(i = 1; i < size; i++) {
    cb8c:	4290      	cmp	r0, r2
    cb8e:	d1f0      	bne.n	cb72 <lv_draw_rect+0x29a>
    cb90:	9705      	str	r7, [sp, #20]
    cb92:	e7ce      	b.n	cb32 <lv_draw_rect+0x25a>
    cb94:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    cb98:	461f      	mov	r7, r3
    cb9a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    _lv_mem_buf_release(mask_line);
    cb9e:	980c      	ldr	r0, [sp, #48]	; 0x30
    cba0:	4b40      	ldr	r3, [pc, #256]	; (cca4 <lv_draw_rect+0x3cc>)
    cba2:	4798      	blx	r3
    if(sw == 1) {
    cba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cba6:	2b01      	cmp	r3, #1
    cba8:	f002 814d 	beq.w	ee46 <lv_draw_rect+0x256e>
    shadow_blur_corner(size, sw, sh_buf);
    cbac:	b23c      	sxth	r4, r7
    cbae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    cbb0:	4632      	mov	r2, r6
    cbb2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cbb4:	4629      	mov	r1, r5
    cbb6:	4620      	mov	r0, r4
    cbb8:	4b3b      	ldr	r3, [pc, #236]	; (cca8 <lv_draw_rect+0x3d0>)
    cbba:	4798      	blx	r3
    sw += sw_ori & 1;
    cbbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cbbe:	442a      	add	r2, r5
    cbc0:	b211      	sxth	r1, r2
    if(sw > 1) {
    cbc2:	2901      	cmp	r1, #1
    cbc4:	dd22      	ble.n	cc0c <lv_draw_rect+0x334>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSACALE_SHIFT) / sw;
    cbc6:	460d      	mov	r5, r1
    cbc8:	8833      	ldrh	r3, [r6, #0]
    cbca:	019b      	lsls	r3, r3, #6
    cbcc:	fb93 f3f1 	sdiv	r3, r3, r1
    cbd0:	4632      	mov	r2, r6
    cbd2:	8033      	strh	r3, [r6, #0]
        for(i = 1; i < (uint32_t) size * size; i++) {
    cbd4:	9807      	ldr	r0, [sp, #28]
    cbd6:	fb00 f000 	mul.w	r0, r0, r0
    cbda:	2801      	cmp	r0, #1
    cbdc:	d912      	bls.n	cc04 <lv_draw_rect+0x32c>
    cbde:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    cbe2:	3801      	subs	r0, #1
    cbe4:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    cbe8:	e001      	b.n	cbee <lv_draw_rect+0x316>
    cbea:	4282      	cmp	r2, r0
    cbec:	d00a      	beq.n	cc04 <lv_draw_rect+0x32c>
    cbee:	4616      	mov	r6, r2
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
    cbf0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    cbf4:	8836      	ldrh	r6, [r6, #0]
    cbf6:	429e      	cmp	r6, r3
    cbf8:	d0f7      	beq.n	cbea <lv_draw_rect+0x312>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSACALE_SHIFT) / sw;
    cbfa:	019b      	lsls	r3, r3, #6
    cbfc:	fb93 f3f5 	sdiv	r3, r3, r5
    cc00:	8013      	strh	r3, [r2, #0]
    cc02:	e7f2      	b.n	cbea <lv_draw_rect+0x312>
        shadow_blur_corner(size, sw, sh_buf);
    cc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cc06:	4620      	mov	r0, r4
    cc08:	4b27      	ldr	r3, [pc, #156]	; (cca8 <lv_draw_rect+0x3d0>)
    cc0a:	4798      	blx	r3
    for(x = 0; x < size * size; x++) {
    cc0c:	fb07 f707 	mul.w	r7, r7, r7
    cc10:	b157      	cbz	r7, cc28 <lv_draw_rect+0x350>
    cc12:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc14:	460b      	mov	r3, r1
    cc16:	1e4a      	subs	r2, r1, #1
    cc18:	eb01 0047 	add.w	r0, r1, r7, lsl #1
        res_buf[x] = sh_buf[x];
    cc1c:	f833 1b02 	ldrh.w	r1, [r3], #2
    cc20:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
    cc24:	4283      	cmp	r3, r0
    cc26:	d1f9      	bne.n	cc1c <lv_draw_rect+0x344>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
    cc28:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    cc2c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    cc30:	3301      	adds	r3, #1
    cc32:	1a9b      	subs	r3, r3, r2
    cc34:	b21b      	sxth	r3, r3
    cc36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    cc3a:	eb02 0363 	add.w	r3, r2, r3, asr #1
    cc3e:	b29b      	uxth	r3, r3
    cc40:	930f      	str	r3, [sp, #60]	; 0x3c
    cc42:	b21b      	sxth	r3, r3
    cc44:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
    cc46:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cc4a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    cc4e:	3301      	adds	r3, #1
    cc50:	1a9b      	subs	r3, r3, r2
    cc52:	b21b      	sxth	r3, r3
    cc54:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    cc58:	eb02 0363 	add.w	r3, r2, r3, asr #1
    cc5c:	b29b      	uxth	r3, r3
    cc5e:	9310      	str	r3, [sp, #64]	; 0x40
    cc60:	b21b      	sxth	r3, r3
    cc62:	930d      	str	r3, [sp, #52]	; 0x34
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    cc64:	4b11      	ldr	r3, [pc, #68]	; (ccac <lv_draw_rect+0x3d4>)
    cc66:	4798      	blx	r3
    cc68:	bb20      	cbnz	r0, ccb4 <lv_draw_rect+0x3dc>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    cc6a:	f9ba 3022 	ldrsh.w	r3, [sl, #34]	; 0x22
    cc6e:	2b00      	cmp	r3, #0
    cc70:	f040 81bc 	bne.w	cfec <lv_draw_rect+0x714>
    cc74:	f9ba 3024 	ldrsh.w	r3, [sl, #36]	; 0x24
    cc78:	2b00      	cmp	r3, #0
    cc7a:	f040 81ba 	bne.w	cff2 <lv_draw_rect+0x71a>
    else if(dsc->shadow_spread != 0) simple_mode = false;
    cc7e:	f9ba 3026 	ldrsh.w	r3, [sl, #38]	; 0x26
    cc82:	fab3 f383 	clz	r3, r3
    cc86:	095b      	lsrs	r3, r3, #5
    cc88:	9307      	str	r3, [sp, #28]
    cc8a:	e015      	b.n	ccb8 <lv_draw_rect+0x3e0>
    cc8c:	00006511 	.word	0x00006511
    cc90:	00011585 	.word	0x00011585
    cc94:	00011ac1 	.word	0x00011ac1
    cc98:	00012ee5 	.word	0x00012ee5
    cc9c:	0000c5d5 	.word	0x0000c5d5
    cca0:	000130df 	.word	0x000130df
    cca4:	00012b19 	.word	0x00012b19
    cca8:	0000c635 	.word	0x0000c635
    ccac:	0000c46d 	.word	0x0000c46d
    ccb0:	00013195 	.word	0x00013195
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
    ccb4:	2300      	movs	r3, #0
    ccb6:	9307      	str	r3, [sp, #28]
    ccb8:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    ccbc:	3001      	adds	r0, #1
    ccbe:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    ccc2:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
    ccc4:	b200      	sxth	r0, r0
    ccc6:	4bc2      	ldr	r3, [pc, #776]	; (cfd0 <lv_draw_rect+0x6f8>)
    ccc8:	4798      	blx	r3
    ccca:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
    cccc:	2301      	movs	r3, #1
    ccce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ccd0:	a91a      	add	r1, sp, #104	; 0x68
    ccd2:	a829      	add	r0, sp, #164	; 0xa4
    ccd4:	4cbf      	ldr	r4, [pc, #764]	; (cfd4 <lv_draw_rect+0x6fc>)
    ccd6:	47a0      	blx	r4
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    ccd8:	2100      	movs	r1, #0
    ccda:	a829      	add	r0, sp, #164	; 0xa4
    ccdc:	4bbe      	ldr	r3, [pc, #760]	; (cfd8 <lv_draw_rect+0x700>)
    ccde:	4798      	blx	r3
    cce0:	900e      	str	r0, [sp, #56]	; 0x38
    a.x2 = sh_area.x2;
    cce2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    cce6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    ccea:	fa1f fb89 	uxth.w	fp, r9
    ccee:	3301      	adds	r3, #1
    ccf0:	eba3 030b 	sub.w	r3, r3, fp
    ccf4:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1;
    ccf8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    ccfc:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    cd00:	3b01      	subs	r3, #1
    cd02:	445b      	add	r3, fp
    cd04:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    bool has_com = _lv_area_intersect(&ca, &a, clip);
    cd08:	9a04      	ldr	r2, [sp, #16]
    cd0a:	a91c      	add	r1, sp, #112	; 0x70
    cd0c:	a81e      	add	r0, sp, #120	; 0x78
    cd0e:	4bb3      	ldr	r3, [pc, #716]	; (cfdc <lv_draw_rect+0x704>)
    cd10:	4798      	blx	r3
    if(has_com) {
    cd12:	2800      	cmp	r0, #0
    cd14:	d072      	beq.n	cdfc <lv_draw_rect+0x524>
        if(ca.y2 > h_half) ca.y2 = h_half;
    cd16:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    cd1a:	990c      	ldr	r1, [sp, #48]	; 0x30
    cd1c:	428b      	cmp	r3, r1
    cd1e:	bfc4      	itt	gt
    cd20:	460b      	movgt	r3, r1
    cd22:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    cd26:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    cd2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cd2c:	4293      	cmp	r3, r2
    cd2e:	dc03      	bgt.n	cd38 <lv_draw_rect+0x460>
    cd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd32:	3301      	adds	r3, #1
    cd34:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    cd38:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    cd3c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    cd40:	3301      	adds	r3, #1
    cd42:	1a9b      	subs	r3, r3, r2
    cd44:	b21b      	sxth	r3, r3
    cd46:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    cd48:	2b00      	cmp	r3, #0
    cd4a:	dd57      	ble.n	cdfc <lv_draw_rect+0x524>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cd4c:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    cd50:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    cd54:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    cd58:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    cd5a:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    cd5e:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    cd60:	fb09 2505 	mla	r5, r9, r5, r2
    cd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd66:	441d      	add	r5, r3
    cd68:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    cd6c:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cd6e:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cd70:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cd74:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cd78:	4283      	cmp	r3, r0
    cd7a:	d1f9      	bne.n	cd70 <lv_draw_rect+0x498>
            fa.y2 = fa.y1;
    cd7c:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cd80:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    cd84:	3701      	adds	r7, #1
    cd86:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    cd88:	b23f      	sxth	r7, r7
    cd8a:	2f00      	cmp	r7, #0
    cd8c:	dd36      	ble.n	cdfc <lv_draw_rect+0x524>
    cd8e:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cd90:	f8df 8254 	ldr.w	r8, [pc, #596]	; cfe8 <lv_draw_rect+0x710>
    cd94:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    cd98:	46bb      	mov	fp, r7
    cd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd9c:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    cd9e:	9a08      	ldr	r2, [sp, #32]
    cda0:	4629      	mov	r1, r5
    cda2:	9f05      	ldr	r7, [sp, #20]
    cda4:	4638      	mov	r0, r7
    cda6:	4c8e      	ldr	r4, [pc, #568]	; (cfe0 <lv_draw_rect+0x708>)
    cda8:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    cdaa:	ac30      	add	r4, sp, #192	; 0xc0
    cdac:	9b08      	ldr	r3, [sp, #32]
    cdae:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    cdb2:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    cdb6:	9705      	str	r7, [sp, #20]
    cdb8:	4638      	mov	r0, r7
    cdba:	4f8a      	ldr	r7, [pc, #552]	; (cfe4 <lv_draw_rect+0x70c>)
    cdbc:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    cdbe:	2801      	cmp	r0, #1
    cdc0:	bf08      	it	eq
    cdc2:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cdc4:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    cdc8:	9302      	str	r3, [sp, #8]
    cdca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdcc:	9201      	str	r2, [sp, #4]
    cdce:	9000      	str	r0, [sp, #0]
    cdd0:	9b05      	ldr	r3, [sp, #20]
    cdd2:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    cdd6:	4621      	mov	r1, r4
    cdd8:	9804      	ldr	r0, [sp, #16]
    cdda:	47c0      	blx	r8
                fa.y1++;
    cddc:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cde0:	3301      	adds	r3, #1
    cde2:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    cde6:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    cdea:	3301      	adds	r3, #1
    cdec:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    cdf0:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    cdf2:	3601      	adds	r6, #1
    cdf4:	455e      	cmp	r6, fp
    cdf6:	d1d2      	bne.n	cd9e <lv_draw_rect+0x4c6>
    cdf8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    a.x2 = sh_area.x2;
    cdfc:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    ce00:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    ce04:	3301      	adds	r3, #1
    ce06:	eba3 030b 	sub.w	r3, r3, fp
    ce0a:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y2 - corner_size + 1;
    ce0e:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    ce12:	1c53      	adds	r3, r2, #1
    ce14:	eba3 030b 	sub.w	r3, r3, fp
    ce18:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    ce1c:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    ce20:	9a04      	ldr	r2, [sp, #16]
    ce22:	a91c      	add	r1, sp, #112	; 0x70
    ce24:	a81e      	add	r0, sp, #120	; 0x78
    ce26:	4b6d      	ldr	r3, [pc, #436]	; (cfdc <lv_draw_rect+0x704>)
    ce28:	4798      	blx	r3
    if(has_com) {
    ce2a:	2800      	cmp	r0, #0
    ce2c:	d073      	beq.n	cf16 <lv_draw_rect+0x63e>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    ce2e:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    ce32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ce34:	4293      	cmp	r3, r2
    ce36:	dc03      	bgt.n	ce40 <lv_draw_rect+0x568>
    ce38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce3a:	3301      	adds	r3, #1
    ce3c:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
    ce40:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    ce44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce46:	4293      	cmp	r3, r2
    ce48:	dc03      	bgt.n	ce52 <lv_draw_rect+0x57a>
    ce4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce4c:	3301      	adds	r3, #1
    ce4e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    ce52:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    ce56:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    ce5a:	3301      	adds	r3, #1
    ce5c:	1a9b      	subs	r3, r3, r2
    ce5e:	b21b      	sxth	r3, r3
    ce60:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    ce62:	2b00      	cmp	r3, #0
    ce64:	dd57      	ble.n	cf16 <lv_draw_rect+0x63e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    ce66:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    ce6a:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    ce6e:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    ce72:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    ce74:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    ce78:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    ce7a:	fb09 2505 	mla	r5, r9, r5, r2
    ce7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce80:	441d      	add	r5, r3
    ce82:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    ce86:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    ce88:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    ce8a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    ce8e:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    ce92:	4283      	cmp	r3, r0
    ce94:	d1f9      	bne.n	ce8a <lv_draw_rect+0x5b2>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    ce96:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    ce9a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    ce9e:	1c67      	adds	r7, r4, #1
    cea0:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    cea2:	b23f      	sxth	r7, r7
    cea4:	2f00      	cmp	r7, #0
    cea6:	dd36      	ble.n	cf16 <lv_draw_rect+0x63e>
    cea8:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    ceaa:	f8df 813c 	ldr.w	r8, [pc, #316]	; cfe8 <lv_draw_rect+0x710>
    ceae:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    ceb2:	46bb      	mov	fp, r7
    ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ceb6:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    ceb8:	9a08      	ldr	r2, [sp, #32]
    ceba:	4629      	mov	r1, r5
    cebc:	9f05      	ldr	r7, [sp, #20]
    cebe:	4638      	mov	r0, r7
    cec0:	4c47      	ldr	r4, [pc, #284]	; (cfe0 <lv_draw_rect+0x708>)
    cec2:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    cec4:	ac30      	add	r4, sp, #192	; 0xc0
    cec6:	9b08      	ldr	r3, [sp, #32]
    cec8:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    cecc:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    ced0:	9705      	str	r7, [sp, #20]
    ced2:	4638      	mov	r0, r7
    ced4:	4f43      	ldr	r7, [pc, #268]	; (cfe4 <lv_draw_rect+0x70c>)
    ced6:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    ced8:	2801      	cmp	r0, #1
    ceda:	bf08      	it	eq
    cedc:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    cede:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    cee2:	9302      	str	r3, [sp, #8]
    cee4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cee6:	9201      	str	r2, [sp, #4]
    cee8:	9000      	str	r0, [sp, #0]
    ceea:	9b05      	ldr	r3, [sp, #20]
    ceec:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    cef0:	4621      	mov	r1, r4
    cef2:	9804      	ldr	r0, [sp, #16]
    cef4:	47c0      	blx	r8
                fa.y1--;
    cef6:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cefa:	3b01      	subs	r3, #1
    cefc:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    cf00:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    cf04:	3b01      	subs	r3, #1
    cf06:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    cf0a:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    cf0c:	3601      	adds	r6, #1
    cf0e:	455e      	cmp	r6, fp
    cf10:	d1d2      	bne.n	ceb8 <lv_draw_rect+0x5e0>
    cf12:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x2 = sh_area.x2;
    cf16:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    cf1a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.x1 = a.x2 - corner_size + 1;
    cf1e:	3301      	adds	r3, #1
    cf20:	eba3 030b 	sub.w	r3, r3, fp
    cf24:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.y1 = sh_area.y1 + corner_size;
    cf28:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    cf2c:	445b      	add	r3, fp
    cf2e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    cf32:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    cf36:	eba3 030b 	sub.w	r3, r3, fp
    cf3a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    cf3e:	9a04      	ldr	r2, [sp, #16]
    cf40:	a91c      	add	r1, sp, #112	; 0x70
    cf42:	a81e      	add	r0, sp, #120	; 0x78
    cf44:	4b25      	ldr	r3, [pc, #148]	; (cfdc <lv_draw_rect+0x704>)
    cf46:	4798      	blx	r3
    if(has_com) {
    cf48:	2800      	cmp	r0, #0
    cf4a:	f000 8085 	beq.w	d058 <lv_draw_rect+0x780>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
    cf4e:	9b07      	ldr	r3, [sp, #28]
    cf50:	b14b      	cbz	r3, cf66 <lv_draw_rect+0x68e>
    cf52:	9b06      	ldr	r3, [sp, #24]
    cf54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    cf58:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    cf5c:	4293      	cmp	r3, r2
    cf5e:	bfb8      	it	lt
    cf60:	4613      	movlt	r3, r2
    cf62:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    cf66:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    cf6a:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    cf6e:	3201      	adds	r2, #1
    cf70:	1ad2      	subs	r2, r2, r3
    cf72:	fa0f f882 	sxth.w	r8, r2
        if(w > 0) {
    cf76:	f1b8 0f00 	cmp.w	r8, #0
    cf7a:	dd6d      	ble.n	d058 <lv_draw_rect+0x780>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    cf7c:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    cf80:	3401      	adds	r4, #1
    cf82:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    cf86:	1aa4      	subs	r4, r4, r2
    cf88:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    cf8a:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    cf8e:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    cf92:	1a9b      	subs	r3, r3, r2
    cf94:	fb09 3301 	mla	r3, r9, r1, r3
    cf98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cf9a:	18d3      	adds	r3, r2, r3
    cf9c:	9308      	str	r3, [sp, #32]
    cf9e:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    cfa2:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    cfa4:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    cfa6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    cfaa:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    cfae:	4283      	cmp	r3, r0
    cfb0:	d1f9      	bne.n	cfa6 <lv_draw_rect+0x6ce>
            fa.y2 = fa.y1;
    cfb2:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    cfb6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    cfba:	4625      	mov	r5, r4
    cfbc:	2c00      	cmp	r4, #0
    cfbe:	dd4b      	ble.n	d058 <lv_draw_rect+0x780>
    cfc0:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    cfc2:	4f07      	ldr	r7, [pc, #28]	; (cfe0 <lv_draw_rect+0x708>)
                _lv_blend_fill(clip, &fa,
    cfc4:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    cfc8:	46a9      	mov	r9, r5
    cfca:	9d07      	ldr	r5, [sp, #28]
    cfcc:	e03a      	b.n	d044 <lv_draw_rect+0x76c>
    cfce:	bf00      	nop
    cfd0:	00012ee5 	.word	0x00012ee5
    cfd4:	0000c5d5 	.word	0x0000c5d5
    cfd8:	0000c369 	.word	0x0000c369
    cfdc:	00011ac1 	.word	0x00011ac1
    cfe0:	00012bfd 	.word	0x00012bfd
    cfe4:	0000c3c5 	.word	0x0000c3c5
    cfe8:	00007cf9 	.word	0x00007cf9
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
    cfec:	2300      	movs	r3, #0
    cfee:	9307      	str	r3, [sp, #28]
    cff0:	e662      	b.n	ccb8 <lv_draw_rect+0x3e0>
    cff2:	2300      	movs	r3, #0
    cff4:	9307      	str	r3, [sp, #28]
    cff6:	e65f      	b.n	ccb8 <lv_draw_rect+0x3e0>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    cff8:	4643      	mov	r3, r8
    cffa:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    cffe:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    d002:	9805      	ldr	r0, [sp, #20]
    d004:	4e23      	ldr	r6, [pc, #140]	; (d094 <lv_draw_rect+0x7bc>)
    d006:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d008:	2801      	cmp	r0, #1
    d00a:	bf08      	it	eq
    d00c:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    d00e:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d012:	9302      	str	r3, [sp, #8]
    d014:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    d018:	9301      	str	r3, [sp, #4]
    d01a:	9000      	str	r0, [sp, #0]
    d01c:	9b05      	ldr	r3, [sp, #20]
    d01e:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d022:	a922      	add	r1, sp, #136	; 0x88
    d024:	9804      	ldr	r0, [sp, #16]
    d026:	4e1c      	ldr	r6, [pc, #112]	; (d098 <lv_draw_rect+0x7c0>)
    d028:	47b0      	blx	r6
                fa.y1++;
    d02a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d02e:	3301      	adds	r3, #1
    d030:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    d034:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d038:	3301      	adds	r3, #1
    d03a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    d03e:	3401      	adds	r4, #1
    d040:	454c      	cmp	r4, r9
    d042:	d007      	beq.n	d054 <lv_draw_rect+0x77c>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    d044:	4642      	mov	r2, r8
    d046:	9908      	ldr	r1, [sp, #32]
    d048:	9805      	ldr	r0, [sp, #20]
    d04a:	47b8      	blx	r7
                if(simple_mode) {
    d04c:	2d00      	cmp	r5, #0
    d04e:	d0d3      	beq.n	cff8 <lv_draw_rect+0x720>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    d050:	2002      	movs	r0, #2
    d052:	e7dc      	b.n	d00e <lv_draw_rect+0x736>
    d054:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    for(y = 0; y < corner_size; y++) {
    d058:	f1b9 0f00 	cmp.w	r9, #0
    d05c:	dd1e      	ble.n	d09c <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    d05e:	eb09 77d9 	add.w	r7, r9, r9, lsr #31
    d062:	107f      	asrs	r7, r7, #1
    d064:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    d066:	2600      	movs	r6, #0
    d068:	e00c      	b.n	d084 <lv_draw_rect+0x7ac>
            lv_opa_t tmp = sh_buf_tmp[x];
    d06a:	7819      	ldrb	r1, [r3, #0]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
    d06c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
    d070:	f803 0b01 	strb.w	r0, [r3], #1
            sh_buf_tmp[corner_size - x - 1] = tmp;
    d074:	f802 1d01 	strb.w	r1, [r2, #-1]!
        for(x = 0; x < corner_size / 2; x++) {
    d078:	42a3      	cmp	r3, r4
    d07a:	d1f6      	bne.n	d06a <lv_draw_rect+0x792>
    d07c:	444d      	add	r5, r9
    for(y = 0; y < corner_size; y++) {
    d07e:	3601      	adds	r6, #1
    d080:	45b1      	cmp	r9, r6
    d082:	d00b      	beq.n	d09c <lv_draw_rect+0x7c4>
        for(x = 0; x < corner_size / 2; x++) {
    d084:	2f00      	cmp	r7, #0
    d086:	ddf9      	ble.n	d07c <lv_draw_rect+0x7a4>
    d088:	462b      	mov	r3, r5
    d08a:	eb05 0209 	add.w	r2, r5, r9
    d08e:	19ec      	adds	r4, r5, r7
    d090:	e7eb      	b.n	d06a <lv_draw_rect+0x792>
    d092:	bf00      	nop
    d094:	0000c3c5 	.word	0x0000c3c5
    d098:	00007cf9 	.word	0x00007cf9
    a.x1 = sh_area.x1;
    d09c:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    d0a0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    d0a4:	3b01      	subs	r3, #1
    d0a6:	445b      	add	r3, fp
    d0a8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    d0ac:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    d0b0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = a.y1 + corner_size - 1;
    d0b4:	3b01      	subs	r3, #1
    d0b6:	445b      	add	r3, fp
    d0b8:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d0bc:	9a04      	ldr	r2, [sp, #16]
    d0be:	a91c      	add	r1, sp, #112	; 0x70
    d0c0:	a81e      	add	r0, sp, #120	; 0x78
    d0c2:	4bae      	ldr	r3, [pc, #696]	; (d37c <lv_draw_rect+0xaa4>)
    d0c4:	4798      	blx	r3
    if(has_com) {
    d0c6:	2800      	cmp	r0, #0
    d0c8:	d071      	beq.n	d1ae <lv_draw_rect+0x8d6>
        if(ca.y2 > h_half) ca.y2 = h_half;
    d0ca:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    d0ce:	990c      	ldr	r1, [sp, #48]	; 0x30
    d0d0:	428b      	cmp	r3, r1
    d0d2:	bfc4      	itt	gt
    d0d4:	460b      	movgt	r3, r1
    d0d6:	f8ad 307e 	strhgt.w	r3, [sp, #126]	; 0x7e
        if(ca.x2 > w_half) ca.x2 = w_half;
    d0da:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    d0de:	990d      	ldr	r1, [sp, #52]	; 0x34
    d0e0:	428b      	cmp	r3, r1
    d0e2:	bfc4      	itt	gt
    d0e4:	460b      	movgt	r3, r1
    d0e6:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d0ea:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    d0ee:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    d0f2:	3301      	adds	r3, #1
    d0f4:	1a9b      	subs	r3, r3, r2
    d0f6:	b21b      	sxth	r3, r3
    d0f8:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	dd57      	ble.n	d1ae <lv_draw_rect+0x8d6>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d0fe:	f9bd 707e 	ldrsh.w	r7, [sp, #126]	; 0x7e
    d102:	f9bd 407a 	ldrsh.w	r4, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    d106:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
    d10a:	1b65      	subs	r5, r4, r5
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    d10c:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    d110:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    d112:	fb09 2505 	mla	r5, r9, r5, r2
    d116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d118:	441d      	add	r5, r3
    d11a:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d11e:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d120:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d122:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d126:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d12a:	4283      	cmp	r3, r0
    d12c:	d1f9      	bne.n	d122 <lv_draw_rect+0x84a>
            fa.y2 = fa.y1;
    d12e:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d132:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    d136:	3701      	adds	r7, #1
    d138:	1b3f      	subs	r7, r7, r4
            for(y = 0; y < h; y++) {
    d13a:	b23f      	sxth	r7, r7
    d13c:	2f00      	cmp	r7, #0
    d13e:	dd36      	ble.n	d1ae <lv_draw_rect+0x8d6>
    d140:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d142:	f8df 8244 	ldr.w	r8, [pc, #580]	; d388 <lv_draw_rect+0xab0>
    d146:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    d14a:	46bb      	mov	fp, r7
    d14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d14e:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    d150:	9a08      	ldr	r2, [sp, #32]
    d152:	4629      	mov	r1, r5
    d154:	9f05      	ldr	r7, [sp, #20]
    d156:	4638      	mov	r0, r7
    d158:	4c89      	ldr	r4, [pc, #548]	; (d380 <lv_draw_rect+0xaa8>)
    d15a:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d15c:	ac30      	add	r4, sp, #192	; 0xc0
    d15e:	9b08      	ldr	r3, [sp, #32]
    d160:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d164:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    d168:	9705      	str	r7, [sp, #20]
    d16a:	4638      	mov	r0, r7
    d16c:	4f85      	ldr	r7, [pc, #532]	; (d384 <lv_draw_rect+0xaac>)
    d16e:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d170:	2801      	cmp	r0, #1
    d172:	bf08      	it	eq
    d174:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d176:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d17a:	9302      	str	r3, [sp, #8]
    d17c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d17e:	9201      	str	r2, [sp, #4]
    d180:	9000      	str	r0, [sp, #0]
    d182:	9b05      	ldr	r3, [sp, #20]
    d184:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d188:	4621      	mov	r1, r4
    d18a:	9804      	ldr	r0, [sp, #16]
    d18c:	47c0      	blx	r8
                fa.y1++;
    d18e:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d192:	3301      	adds	r3, #1
    d194:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    d198:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d19c:	3301      	adds	r3, #1
    d19e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    d1a2:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    d1a4:	3601      	adds	r6, #1
    d1a6:	455e      	cmp	r6, fp
    d1a8:	d1d2      	bne.n	d150 <lv_draw_rect+0x878>
    d1aa:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    a.x1 = sh_area.x1;
    d1ae:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    d1b2:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    d1b6:	3b01      	subs	r3, #1
    d1b8:	445b      	add	r3, fp
    d1ba:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    d1be:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    d1c2:	1c53      	adds	r3, r2, #1
    d1c4:	eba3 030b 	sub.w	r3, r3, fp
    d1c8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    d1cc:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d1d0:	9a04      	ldr	r2, [sp, #16]
    d1d2:	a91c      	add	r1, sp, #112	; 0x70
    d1d4:	a81e      	add	r0, sp, #120	; 0x78
    d1d6:	4b69      	ldr	r3, [pc, #420]	; (d37c <lv_draw_rect+0xaa4>)
    d1d8:	4798      	blx	r3
    if(has_com) {
    d1da:	2800      	cmp	r0, #0
    d1dc:	d072      	beq.n	d2c4 <lv_draw_rect+0x9ec>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
    d1de:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    d1e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1e4:	4293      	cmp	r3, r2
    d1e6:	dc03      	bgt.n	d1f0 <lv_draw_rect+0x918>
    d1e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d1ea:	3301      	adds	r3, #1
    d1ec:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        if(ca.x2 > w_half) ca.x2 = w_half;
    d1f0:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    d1f4:	990d      	ldr	r1, [sp, #52]	; 0x34
    d1f6:	428b      	cmp	r3, r1
    d1f8:	bfc4      	itt	gt
    d1fa:	460b      	movgt	r3, r1
    d1fc:	f8ad 307c 	strhgt.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d200:	f9bd 2078 	ldrsh.w	r2, [sp, #120]	; 0x78
    d204:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    d208:	3301      	adds	r3, #1
    d20a:	1a9b      	subs	r3, r3, r2
    d20c:	b21b      	sxth	r3, r3
    d20e:	9308      	str	r3, [sp, #32]
        if(w > 0) {
    d210:	2b00      	cmp	r3, #0
    d212:	dd57      	ble.n	d2c4 <lv_draw_rect+0x9ec>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d214:	f9bd 407e 	ldrsh.w	r4, [sp, #126]	; 0x7e
    d218:	f9bd 607a 	ldrsh.w	r6, [sp, #122]	; 0x7a
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    d21c:	f9bd 5076 	ldrsh.w	r5, [sp, #118]	; 0x76
    d220:	1b2d      	subs	r5, r5, r4
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
    d222:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
    d226:	1ad2      	subs	r2, r2, r3
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    d228:	fb09 2505 	mla	r5, r9, r5, r2
    d22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d22e:	441d      	add	r5, r3
    d230:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d234:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d236:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d238:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d23c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d240:	4283      	cmp	r3, r0
    d242:	d1f9      	bne.n	d238 <lv_draw_rect+0x960>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
    d244:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d248:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    d24c:	1c67      	adds	r7, r4, #1
    d24e:	1bbf      	subs	r7, r7, r6
            for(y = 0; y < h; y++) {
    d250:	b23f      	sxth	r7, r7
    d252:	2f00      	cmp	r7, #0
    d254:	dd36      	ble.n	d2c4 <lv_draw_rect+0x9ec>
    d256:	2600      	movs	r6, #0
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d258:	f8df 812c 	ldr.w	r8, [pc, #300]	; d388 <lv_draw_rect+0xab0>
    d25c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    d260:	46bb      	mov	fp, r7
    d262:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d264:	930b      	str	r3, [sp, #44]	; 0x2c
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    d266:	9a08      	ldr	r2, [sp, #32]
    d268:	4629      	mov	r1, r5
    d26a:	9f05      	ldr	r7, [sp, #20]
    d26c:	4638      	mov	r0, r7
    d26e:	4c44      	ldr	r4, [pc, #272]	; (d380 <lv_draw_rect+0xaa8>)
    d270:	47a0      	blx	r4
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d272:	ac30      	add	r4, sp, #192	; 0xc0
    d274:	9b08      	ldr	r3, [sp, #32]
    d276:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d27a:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    d27e:	9705      	str	r7, [sp, #20]
    d280:	4638      	mov	r0, r7
    d282:	4f40      	ldr	r7, [pc, #256]	; (d384 <lv_draw_rect+0xaac>)
    d284:	47b8      	blx	r7
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d286:	2801      	cmp	r0, #1
    d288:	bf08      	it	eq
    d28a:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d28c:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d290:	9302      	str	r3, [sp, #8]
    d292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d294:	9201      	str	r2, [sp, #4]
    d296:	9000      	str	r0, [sp, #0]
    d298:	9b05      	ldr	r3, [sp, #20]
    d29a:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d29e:	4621      	mov	r1, r4
    d2a0:	9804      	ldr	r0, [sp, #16]
    d2a2:	47c0      	blx	r8
                fa.y1--;
    d2a4:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d2a8:	3b01      	subs	r3, #1
    d2aa:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2--;
    d2ae:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d2b2:	3b01      	subs	r3, #1
    d2b4:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    d2b8:	444d      	add	r5, r9
            for(y = 0; y < h; y++) {
    d2ba:	3601      	adds	r6, #1
    d2bc:	455e      	cmp	r6, fp
    d2be:	d1d2      	bne.n	d266 <lv_draw_rect+0x98e>
    d2c0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1;
    d2c4:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
    d2c8:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = a.x1 + corner_size - 1;
    d2cc:	3b01      	subs	r3, #1
    d2ce:	445b      	add	r3, fp
    d2d0:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    d2d4:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    d2d8:	445b      	add	r3, fp
    d2da:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    d2de:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    d2e2:	eba3 030b 	sub.w	r3, r3, fp
    d2e6:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d2ea:	9a04      	ldr	r2, [sp, #16]
    d2ec:	a91c      	add	r1, sp, #112	; 0x70
    d2ee:	a81e      	add	r0, sp, #120	; 0x78
    d2f0:	4b22      	ldr	r3, [pc, #136]	; (d37c <lv_draw_rect+0xaa4>)
    d2f2:	4798      	blx	r3
    if(has_com) {
    d2f4:	2800      	cmp	r0, #0
    d2f6:	d079      	beq.n	d3ec <lv_draw_rect+0xb14>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
    d2f8:	9b07      	ldr	r3, [sp, #28]
    d2fa:	b14b      	cbz	r3, d310 <lv_draw_rect+0xa38>
    d2fc:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
    d300:	9a06      	ldr	r2, [sp, #24]
    d302:	f9b2 2000 	ldrsh.w	r2, [r2]
    d306:	4293      	cmp	r3, r2
    d308:	bfa8      	it	ge
    d30a:	4613      	movge	r3, r2
    d30c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d310:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
    d314:	f8bd 807c 	ldrh.w	r8, [sp, #124]	; 0x7c
    d318:	f108 0801 	add.w	r8, r8, #1
    d31c:	eba8 0803 	sub.w	r8, r8, r3
    d320:	fa0f f888 	sxth.w	r8, r8
        if(w > 0) {
    d324:	f1b8 0f00 	cmp.w	r8, #0
    d328:	dd60      	ble.n	d3ec <lv_draw_rect+0xb14>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d32a:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    d32e:	3401      	adds	r4, #1
    d330:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    d334:	1aa4      	subs	r4, r4, r2
    d336:	b224      	sxth	r4, r4
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
    d338:	f109 31ff 	add.w	r1, r9, #4294967295
            sh_buf_tmp += ca.x1 - a.x1;
    d33c:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	; 0x70
    d340:	1a9b      	subs	r3, r3, r2
    d342:	fb09 3301 	mla	r3, r9, r1, r3
    d346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d348:	18d3      	adds	r3, r2, r3
    d34a:	9308      	str	r3, [sp, #32]
    d34c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d350:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d352:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d354:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d358:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d35c:	4283      	cmp	r3, r0
    d35e:	d1f9      	bne.n	d354 <lv_draw_rect+0xa7c>
            fa.y2 = fa.y1;
    d360:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d364:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    d368:	4625      	mov	r5, r4
    d36a:	2c00      	cmp	r4, #0
    d36c:	dd3e      	ble.n	d3ec <lv_draw_rect+0xb14>
    d36e:	2400      	movs	r4, #0
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    d370:	4f03      	ldr	r7, [pc, #12]	; (d380 <lv_draw_rect+0xaa8>)
                _lv_blend_fill(clip, &fa,
    d372:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    d376:	46a9      	mov	r9, r5
    d378:	9d07      	ldr	r5, [sp, #28]
    d37a:	e02d      	b.n	d3d8 <lv_draw_rect+0xb00>
    d37c:	00011ac1 	.word	0x00011ac1
    d380:	00012bfd 	.word	0x00012bfd
    d384:	0000c3c5 	.word	0x0000c3c5
    d388:	00007cf9 	.word	0x00007cf9
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d38c:	4643      	mov	r3, r8
    d38e:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d392:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    d396:	9805      	ldr	r0, [sp, #20]
    d398:	4eaa      	ldr	r6, [pc, #680]	; (d644 <lv_draw_rect+0xd6c>)
    d39a:	47b0      	blx	r6
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d39c:	2801      	cmp	r0, #1
    d39e:	bf08      	it	eq
    d3a0:	2002      	moveq	r0, #2
                _lv_blend_fill(clip, &fa,
    d3a2:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d3a6:	9302      	str	r3, [sp, #8]
    d3a8:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    d3ac:	9301      	str	r3, [sp, #4]
    d3ae:	9000      	str	r0, [sp, #0]
    d3b0:	9b05      	ldr	r3, [sp, #20]
    d3b2:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d3b6:	a922      	add	r1, sp, #136	; 0x88
    d3b8:	9804      	ldr	r0, [sp, #16]
    d3ba:	4ea3      	ldr	r6, [pc, #652]	; (d648 <lv_draw_rect+0xd70>)
    d3bc:	47b0      	blx	r6
                fa.y1++;
    d3be:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d3c2:	3301      	adds	r3, #1
    d3c4:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fa.y2++;
    d3c8:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d3cc:	3301      	adds	r3, #1
    d3ce:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            for(y = 0; y < h; y++) {
    d3d2:	3401      	adds	r4, #1
    d3d4:	454c      	cmp	r4, r9
    d3d6:	d007      	beq.n	d3e8 <lv_draw_rect+0xb10>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
    d3d8:	4642      	mov	r2, r8
    d3da:	9908      	ldr	r1, [sp, #32]
    d3dc:	9805      	ldr	r0, [sp, #20]
    d3de:	47b8      	blx	r7
                if(simple_mode) {
    d3e0:	2d00      	cmp	r5, #0
    d3e2:	d0d3      	beq.n	d38c <lv_draw_rect+0xab4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
    d3e4:	2002      	movs	r0, #2
    d3e6:	e7dc      	b.n	d3a2 <lv_draw_rect+0xaca>
    d3e8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    d3ec:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    d3f0:	445b      	add	r3, fp
    d3f2:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    d3f6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    d3fa:	eba3 030b 	sub.w	r3, r3, fp
    d3fe:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1;
    d402:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
    d406:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y1 + corner_size - 1;
    d40a:	3b01      	subs	r3, #1
    d40c:	445b      	add	r3, fp
    d40e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d412:	9a04      	ldr	r2, [sp, #16]
    d414:	a91c      	add	r1, sp, #112	; 0x70
    d416:	a81e      	add	r0, sp, #120	; 0x78
    d418:	4b8c      	ldr	r3, [pc, #560]	; (d64c <lv_draw_rect+0xd74>)
    d41a:	4798      	blx	r3
    if(has_com) {
    d41c:	2800      	cmp	r0, #0
    d41e:	d07d      	beq.n	d51c <lv_draw_rect+0xc44>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
    d420:	9b07      	ldr	r3, [sp, #28]
    d422:	b14b      	cbz	r3, d438 <lv_draw_rect+0xb60>
    d424:	9b06      	ldr	r3, [sp, #24]
    d426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d42a:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    d42e:	4293      	cmp	r3, r2
    d430:	bfa8      	it	ge
    d432:	4613      	movge	r3, r2
    d434:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d438:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    d43c:	3301      	adds	r3, #1
    d43e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    d442:	1a9b      	subs	r3, r3, r2
    d444:	b21b      	sxth	r3, r3
    d446:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d448:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
    d44c:	f8bd 507e 	ldrh.w	r5, [sp, #126]	; 0x7e
    d450:	3501      	adds	r5, #1
    d452:	1aed      	subs	r5, r5, r3
    d454:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    d456:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    d458:	f9bd 4072 	ldrsh.w	r4, [sp, #114]	; 0x72
    d45c:	1b1c      	subs	r4, r3, r4
        sh_buf_tmp = sh_buf + corner_size - 1;
    d45e:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
    d462:	fb09 3404 	mla	r4, r9, r4, r3
    d466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d468:	441c      	add	r4, r3
    d46a:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d46e:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d470:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d472:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d476:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d47a:	4283      	cmp	r3, r0
    d47c:	d1f9      	bne.n	d472 <lv_draw_rect+0xb9a>
        fa.y2 = fa.y1;
    d47e:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d482:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    d486:	462b      	mov	r3, r5
    d488:	2d00      	cmp	r5, #0
    d48a:	dd47      	ble.n	d51c <lv_draw_rect+0xc44>
    d48c:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    d48e:	4f70      	ldr	r7, [pc, #448]	; (d650 <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d490:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    d494:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    d498:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    d49c:	469b      	mov	fp, r3
    d49e:	e02a      	b.n	d4f6 <lv_draw_rect+0xc1e>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    d4a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    d4a4:	d12a      	bne.n	d4fc <lv_draw_rect+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    d4a6:	4649      	mov	r1, r9
    d4a8:	e02c      	b.n	d504 <lv_draw_rect+0xc2c>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d4aa:	9b08      	ldr	r3, [sp, #32]
    d4ac:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d4b0:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    d4b4:	9805      	ldr	r0, [sp, #20]
    d4b6:	4e63      	ldr	r6, [pc, #396]	; (d644 <lv_draw_rect+0xd6c>)
    d4b8:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d4ba:	2801      	cmp	r0, #1
    d4bc:	bf08      	it	eq
    d4be:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d4c0:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d4c4:	9302      	str	r3, [sp, #8]
    d4c6:	23ff      	movs	r3, #255	; 0xff
    d4c8:	9301      	str	r3, [sp, #4]
    d4ca:	9000      	str	r0, [sp, #0]
    d4cc:	9b05      	ldr	r3, [sp, #20]
    d4ce:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d4d2:	a922      	add	r1, sp, #136	; 0x88
    d4d4:	9804      	ldr	r0, [sp, #16]
    d4d6:	4e5c      	ldr	r6, [pc, #368]	; (d648 <lv_draw_rect+0xd70>)
    d4d8:	47b0      	blx	r6
            fa.y1++;
    d4da:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d4de:	3301      	adds	r3, #1
    d4e0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    d4e4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d4e8:	3301      	adds	r3, #1
    d4ea:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    d4ee:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    d4f0:	3501      	adds	r5, #1
    d4f2:	455d      	cmp	r5, fp
    d4f4:	d00e      	beq.n	d514 <lv_draw_rect+0xc3c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    d4f6:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    d4f8:	2bff      	cmp	r3, #255	; 0xff
    d4fa:	d0d1      	beq.n	d4a0 <lv_draw_rect+0xbc8>
    d4fc:	fb03 f309 	mul.w	r3, r3, r9
    d500:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    d504:	9a08      	ldr	r2, [sp, #32]
    d506:	9805      	ldr	r0, [sp, #20]
    d508:	47b8      	blx	r7
            if(simple_mode) {
    d50a:	9b07      	ldr	r3, [sp, #28]
    d50c:	2b00      	cmp	r3, #0
    d50e:	d0cc      	beq.n	d4aa <lv_draw_rect+0xbd2>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    d510:	2002      	movs	r0, #2
    d512:	e7d5      	b.n	d4c0 <lv_draw_rect+0xbe8>
    d514:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    d518:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    a.x1 = sh_area.x1 + corner_size;
    d51c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    d520:	445b      	add	r3, fp
    d522:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    d526:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    d52a:	eba3 030b 	sub.w	r3, r3, fp
    d52e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y2 - corner_size + 1;
    d532:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    d536:	1c53      	adds	r3, r2, #1
    d538:	eba3 030b 	sub.w	r3, r3, fp
    d53c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2;
    d540:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d544:	9a04      	ldr	r2, [sp, #16]
    d546:	a91c      	add	r1, sp, #112	; 0x70
    d548:	a81e      	add	r0, sp, #120	; 0x78
    d54a:	4b40      	ldr	r3, [pc, #256]	; (d64c <lv_draw_rect+0xd74>)
    d54c:	4798      	blx	r3
    if(has_com) {
    d54e:	2800      	cmp	r0, #0
    d550:	f000 8082 	beq.w	d658 <lv_draw_rect+0xd80>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
    d554:	9b07      	ldr	r3, [sp, #28]
    d556:	b14b      	cbz	r3, d56c <lv_draw_rect+0xc94>
    d558:	9b06      	ldr	r3, [sp, #24]
    d55a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    d55e:	f9bd 207a 	ldrsh.w	r2, [sp, #122]	; 0x7a
    d562:	4293      	cmp	r3, r2
    d564:	bfb8      	it	lt
    d566:	4613      	movlt	r3, r2
    d568:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d56c:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
    d570:	3301      	adds	r3, #1
    d572:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    d576:	1a9b      	subs	r3, r3, r2
    d578:	b21b      	sxth	r3, r3
    d57a:	9308      	str	r3, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d57c:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    d580:	1c5d      	adds	r5, r3, #1
    d582:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
    d586:	1aad      	subs	r5, r5, r2
    d588:	b22d      	sxth	r5, r5
        sh_buf_tmp = sh_buf + corner_size - 1;
    d58a:	46c8      	mov	r8, r9
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    d58c:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
    d590:	1ae4      	subs	r4, r4, r3
        sh_buf_tmp = sh_buf + corner_size - 1;
    d592:	f109 33ff 	add.w	r3, r9, #4294967295
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
    d596:	fb09 3404 	mla	r4, r9, r4, r3
    d59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d59c:	441c      	add	r4, r3
    d59e:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d5a2:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d5a4:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d5a6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d5aa:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d5ae:	4283      	cmp	r3, r0
    d5b0:	d1f9      	bne.n	d5a6 <lv_draw_rect+0xcce>
        fa.y1 = fa.y2;
    d5b2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d5b6:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
        for(y = 0; y < h; y++) {
    d5ba:	46a9      	mov	r9, r5
    d5bc:	2d00      	cmp	r5, #0
    d5be:	dd4b      	ble.n	d658 <lv_draw_rect+0xd80>
    d5c0:	2500      	movs	r5, #0
            _lv_memset(mask_buf, opa_tmp, w);
    d5c2:	4f23      	ldr	r7, [pc, #140]	; (d650 <lv_draw_rect+0xd78>)
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d5c4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    d5c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    d5cc:	e02a      	b.n	d624 <lv_draw_rect+0xd4c>
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    d5ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    d5d2:	d12a      	bne.n	d62a <lv_draw_rect+0xd52>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    d5d4:	4659      	mov	r1, fp
    d5d6:	e02c      	b.n	d632 <lv_draw_rect+0xd5a>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d5d8:	9b08      	ldr	r3, [sp, #32]
    d5da:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d5de:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
    d5e2:	9805      	ldr	r0, [sp, #20]
    d5e4:	4e17      	ldr	r6, [pc, #92]	; (d644 <lv_draw_rect+0xd6c>)
    d5e6:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d5e8:	2801      	cmp	r0, #1
    d5ea:	bf08      	it	eq
    d5ec:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d5ee:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d5f2:	9302      	str	r3, [sp, #8]
    d5f4:	23ff      	movs	r3, #255	; 0xff
    d5f6:	9301      	str	r3, [sp, #4]
    d5f8:	9000      	str	r0, [sp, #0]
    d5fa:	9b05      	ldr	r3, [sp, #20]
    d5fc:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d600:	a922      	add	r1, sp, #136	; 0x88
    d602:	9804      	ldr	r0, [sp, #16]
    d604:	4e10      	ldr	r6, [pc, #64]	; (d648 <lv_draw_rect+0xd70>)
    d606:	47b0      	blx	r6
            fa.y1--;
    d608:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d60c:	3b01      	subs	r3, #1
    d60e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2--;
    d612:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d616:	3b01      	subs	r3, #1
    d618:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            sh_buf_tmp += corner_size;
    d61c:	4444      	add	r4, r8
        for(y = 0; y < h; y++) {
    d61e:	3501      	adds	r5, #1
    d620:	454d      	cmp	r5, r9
    d622:	d017      	beq.n	d654 <lv_draw_rect+0xd7c>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
    d624:	7823      	ldrb	r3, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
    d626:	2bff      	cmp	r3, #255	; 0xff
    d628:	d0d1      	beq.n	d5ce <lv_draw_rect+0xcf6>
    d62a:	fb03 f30b 	mul.w	r3, r3, fp
    d62e:	f3c3 2107 	ubfx	r1, r3, #8, #8
            _lv_memset(mask_buf, opa_tmp, w);
    d632:	9a08      	ldr	r2, [sp, #32]
    d634:	9805      	ldr	r0, [sp, #20]
    d636:	47b8      	blx	r7
            if(simple_mode) {
    d638:	9b07      	ldr	r3, [sp, #28]
    d63a:	2b00      	cmp	r3, #0
    d63c:	d0cc      	beq.n	d5d8 <lv_draw_rect+0xd00>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
    d63e:	2002      	movs	r0, #2
    d640:	e7d5      	b.n	d5ee <lv_draw_rect+0xd16>
    d642:	bf00      	nop
    d644:	0000c3c5 	.word	0x0000c3c5
    d648:	00007cf9 	.word	0x00007cf9
    d64c:	00011ac1 	.word	0x00011ac1
    d650:	00013029 	.word	0x00013029
    d654:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    a.x1 = sh_area.x1 + corner_size;
    d658:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    d65c:	445b      	add	r3, fp
    d65e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    a.x2 = sh_area.x2 - corner_size;
    d662:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    d666:	eba3 030b 	sub.w	r3, r3, fp
    d66a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    a.y1 = sh_area.y1 + corner_size;
    d66e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    d672:	445b      	add	r3, fp
    d674:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    a.y2 = sh_area.y2 - corner_size;
    d678:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    d67c:	eba3 0b0b 	sub.w	fp, r3, fp
    d680:	f8ad b076 	strh.w	fp, [sp, #118]	; 0x76
    has_com = _lv_area_intersect(&ca, &a, clip);
    d684:	9a04      	ldr	r2, [sp, #16]
    d686:	a91c      	add	r1, sp, #112	; 0x70
    d688:	a81e      	add	r0, sp, #120	; 0x78
    d68a:	4ba2      	ldr	r3, [pc, #648]	; (d914 <lv_draw_rect+0x103c>)
    d68c:	4798      	blx	r3
    if(has_com && simple_mode == false) {
    d68e:	2800      	cmp	r0, #0
    d690:	d050      	beq.n	d734 <lv_draw_rect+0xe5c>
    d692:	9b07      	ldr	r3, [sp, #28]
    d694:	2b00      	cmp	r3, #0
    d696:	d14d      	bne.n	d734 <lv_draw_rect+0xe5c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d698:	f8bd 607c 	ldrh.w	r6, [sp, #124]	; 0x7c
    d69c:	3601      	adds	r6, #1
    d69e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
    d6a2:	1af6      	subs	r6, r6, r3
    d6a4:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d6a6:	f8bd 407e 	ldrh.w	r4, [sp, #126]	; 0x7e
    d6aa:	3401      	adds	r4, #1
    d6ac:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    d6b0:	1ae4      	subs	r4, r4, r3
    d6b2:	b224      	sxth	r4, r4
    d6b4:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    uint8_t * d8 = (uint8_t *)dst;
    d6b8:	ab22      	add	r3, sp, #136	; 0x88
    while(len) {
    d6ba:	a824      	add	r0, sp, #144	; 0x90
        *d8 = *s8;
    d6bc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d6c0:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d6c4:	4283      	cmp	r3, r0
    d6c6:	d1f9      	bne.n	d6bc <lv_draw_rect+0xde4>
        fa.y2 = fa.y1;
    d6c8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d6cc:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    d6d0:	46a3      	mov	fp, r4
    d6d2:	2c00      	cmp	r4, #0
    d6d4:	dd2e      	ble.n	d734 <lv_draw_rect+0xe5c>
    d6d6:	2500      	movs	r5, #0
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    d6d8:	f8df 9254 	ldr.w	r9, [pc, #596]	; d930 <lv_draw_rect+0x1058>
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d6dc:	f8df 8254 	ldr.w	r8, [pc, #596]	; d934 <lv_draw_rect+0x105c>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d6e0:	4f8d      	ldr	r7, [pc, #564]	; (d918 <lv_draw_rect+0x1040>)
            _lv_memset(mask_buf, dsc->shadow_opa, w);
    d6e2:	4632      	mov	r2, r6
    d6e4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    d6e8:	9805      	ldr	r0, [sp, #20]
    d6ea:	47c8      	blx	r9
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
    d6ec:	ac30      	add	r4, sp, #192	; 0xc0
    d6ee:	4633      	mov	r3, r6
    d6f0:	f9bd 208a 	ldrsh.w	r2, [sp, #138]	; 0x8a
    d6f4:	f934 1d38 	ldrsh.w	r1, [r4, #-56]!
    d6f8:	9805      	ldr	r0, [sp, #20]
    d6fa:	47c0      	blx	r8
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
    d6fc:	2801      	cmp	r0, #1
    d6fe:	bf08      	it	eq
    d700:	2002      	moveq	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
    d702:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    d706:	9302      	str	r3, [sp, #8]
    d708:	23ff      	movs	r3, #255	; 0xff
    d70a:	9301      	str	r3, [sp, #4]
    d70c:	9000      	str	r0, [sp, #0]
    d70e:	9b05      	ldr	r3, [sp, #20]
    d710:	f8ba 201e 	ldrh.w	r2, [sl, #30]
    d714:	4621      	mov	r1, r4
    d716:	9804      	ldr	r0, [sp, #16]
    d718:	47b8      	blx	r7
            fa.y1++;
    d71a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
    d71e:	3301      	adds	r3, #1
    d720:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
            fa.y2++;
    d724:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
    d728:	3301      	adds	r3, #1
    d72a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        for(y = 0; y < h; y++) {
    d72e:	3501      	adds	r5, #1
    d730:	455d      	cmp	r5, fp
    d732:	d1d6      	bne.n	d6e2 <lv_draw_rect+0xe0a>
    lv_draw_mask_remove_id(mask_rout_id);
    d734:	980e      	ldr	r0, [sp, #56]	; 0x38
    d736:	4b79      	ldr	r3, [pc, #484]	; (d91c <lv_draw_rect+0x1044>)
    d738:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    d73a:	9805      	ldr	r0, [sp, #20]
    d73c:	4c78      	ldr	r4, [pc, #480]	; (d920 <lv_draw_rect+0x1048>)
    d73e:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
    d740:	980a      	ldr	r0, [sp, #40]	; 0x28
    d742:	47a0      	blx	r4
    if(dsc->bg_opa <= LV_OPA_MIN) return;
    d744:	f89a 700c 	ldrb.w	r7, [sl, #12]
    d748:	2f05      	cmp	r7, #5
    d74a:	d942      	bls.n	d7d2 <lv_draw_rect+0xefa>
    d74c:	9a06      	ldr	r2, [sp, #24]
    d74e:	1e53      	subs	r3, r2, #1
    d750:	1dd0      	adds	r0, r2, #7
    d752:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    d754:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d758:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    d75c:	4298      	cmp	r0, r3
    d75e:	d1f9      	bne.n	d754 <lv_draw_rect+0xe7c>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
    d760:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    d764:	2b01      	cmp	r3, #1
    d766:	dd24      	ble.n	d7b2 <lv_draw_rect+0xeda>
    d768:	f89a 3014 	ldrb.w	r3, [sl, #20]
    d76c:	2bf9      	cmp	r3, #249	; 0xf9
    d76e:	d920      	bls.n	d7b2 <lv_draw_rect+0xeda>
    d770:	f9ba 3000 	ldrsh.w	r3, [sl]
    d774:	b1eb      	cbz	r3, d7b2 <lv_draw_rect+0xeda>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
    d776:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    d77a:	f3c3 0280 	ubfx	r2, r3, #2, #1
    d77e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
    d782:	440a      	add	r2, r1
    d784:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
    d788:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d78c:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
    d790:	440a      	add	r2, r1
    d792:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
    d796:	f3c3 01c0 	ubfx	r1, r3, #3, #1
    d79a:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    d79e:	1a52      	subs	r2, r2, r1
    d7a0:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
    d7a4:	f003 0301 	and.w	r3, r3, #1
    d7a8:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    d7ac:	1ad3      	subs	r3, r2, r3
    d7ae:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    d7b2:	2ffb      	cmp	r7, #251	; 0xfb
    d7b4:	bf28      	it	cs
    d7b6:	27ff      	movcs	r7, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    d7b8:	4b5a      	ldr	r3, [pc, #360]	; (d924 <lv_draw_rect+0x104c>)
    d7ba:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    d7bc:	4b5a      	ldr	r3, [pc, #360]	; (d928 <lv_draw_rect+0x1050>)
    d7be:	4798      	blx	r3
    d7c0:	4680      	mov	r8, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
    d7c2:	9a04      	ldr	r2, [sp, #16]
    d7c4:	a91a      	add	r1, sp, #104	; 0x68
    d7c6:	a81c      	add	r0, sp, #112	; 0x70
    d7c8:	4b52      	ldr	r3, [pc, #328]	; (d914 <lv_draw_rect+0x103c>)
    d7ca:	4798      	blx	r3
    if(is_common == false) return;
    d7cc:	2800      	cmp	r0, #0
    d7ce:	f040 80b3 	bne.w	d938 <lv_draw_rect+0x1060>
    _lv_mem_buf_release(mask_buf);
}

static void draw_pattern(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->pattern_image == NULL) return;
    d7d2:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    d7d6:	b120      	cbz	r0, d7e2 <lv_draw_rect+0xf0a>
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
    d7d8:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    d7dc:	2b05      	cmp	r3, #5
    d7de:	f200 83eb 	bhi.w	dfb8 <lv_draw_rect+0x16e0>
    if(dsc->border_opa <= LV_OPA_MIN) return;
    d7e2:	f89a 4014 	ldrb.w	r4, [sl, #20]
    d7e6:	2c05      	cmp	r4, #5
    d7e8:	d915      	bls.n	d816 <lv_draw_rect+0xf3e>
    if(dsc->border_width == 0) return;
    d7ea:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    d7ee:	b193      	cbz	r3, d816 <lv_draw_rect+0xf3e>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
    d7f0:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    d7f4:	b17b      	cbz	r3, d816 <lv_draw_rect+0xf3e>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    d7f6:	2cfb      	cmp	r4, #251	; 0xfb
    d7f8:	bf28      	it	cs
    d7fa:	24ff      	movcs	r4, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    d7fc:	4b49      	ldr	r3, [pc, #292]	; (d924 <lv_draw_rect+0x104c>)
    d7fe:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    d800:	4b49      	ldr	r3, [pc, #292]	; (d928 <lv_draw_rect+0x1050>)
    d802:	4798      	blx	r3
    d804:	4605      	mov	r5, r0
    is_common = _lv_area_intersect(&draw_area, coords, clip);
    d806:	9a04      	ldr	r2, [sp, #16]
    d808:	9906      	ldr	r1, [sp, #24]
    d80a:	a818      	add	r0, sp, #96	; 0x60
    d80c:	4b41      	ldr	r3, [pc, #260]	; (d914 <lv_draw_rect+0x103c>)
    d80e:	4798      	blx	r3
    if(is_common == false) return;
    d810:	2800      	cmp	r0, #0
    d812:	f040 8546 	bne.w	e2a2 <lv_draw_rect+0x19ca>
}


static void draw_value(const lv_area_t * coords, const lv_area_t * clip, lv_draw_rect_dsc_t * dsc)
{
    if(dsc->value_str == NULL) return;
    d816:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
    d81a:	b121      	cbz	r1, d826 <lv_draw_rect+0xf4e>
    if(dsc->value_opa <= LV_OPA_MIN) return;
    d81c:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    d820:	2b05      	cmp	r3, #5
    d822:	f201 8053 	bhi.w	e8cc <lv_draw_rect+0x1ff4>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
    d826:	f89a b01c 	ldrb.w	fp, [sl, #28]
    d82a:	f1bb 0f05 	cmp.w	fp, #5
    d82e:	d96d      	bls.n	d90c <lv_draw_rect+0x1034>
    if(dsc->outline_width == 0) return;
    d830:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    d834:	2b00      	cmp	r3, #0
    d836:	d069      	beq.n	d90c <lv_draw_rect+0x1034>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
    d838:	f1bb 0ffb 	cmp.w	fp, #251	; 0xfb
    d83c:	bf28      	it	cs
    d83e:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    d842:	4b3a      	ldr	r3, [pc, #232]	; (d92c <lv_draw_rect+0x1054>)
    d844:	4798      	blx	r3
    d846:	9009      	str	r0, [sp, #36]	; 0x24
    d848:	9a06      	ldr	r2, [sp, #24]
    d84a:	1e53      	subs	r3, r2, #1
    d84c:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    d84e:	aa16      	add	r2, sp, #88	; 0x58
        *d8 = *s8;
    d850:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d854:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    d858:	4283      	cmp	r3, r0
    d85a:	d1f9      	bne.n	d850 <lv_draw_rect+0xf78>
    area_inner.x1 -= dsc->outline_pad;
    d85c:	f8ba 501a 	ldrh.w	r5, [sl, #26]
    d860:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    d864:	1b5b      	subs	r3, r3, r5
    d866:	b29b      	uxth	r3, r3
    d868:	9306      	str	r3, [sp, #24]
    d86a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    area_inner.y1 -= dsc->outline_pad;
    d86e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    d872:	1b5b      	subs	r3, r3, r5
    d874:	b29b      	uxth	r3, r3
    d876:	9307      	str	r3, [sp, #28]
    d878:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    area_inner.x2 += dsc->outline_pad;
    d87c:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
    d880:	442e      	add	r6, r5
    d882:	b2b6      	uxth	r6, r6
    d884:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
    area_inner.y2 += dsc->outline_pad;
    d888:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    d88c:	441d      	add	r5, r3
    d88e:	b2ad      	uxth	r5, r5
    d890:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
    int32_t rin = dsc->radius;
    d894:	f9ba 3000 	ldrsh.w	r3, [sl]
    d898:	9308      	str	r3, [sp, #32]
    int32_t rout = rin + dsc->outline_width;
    d89a:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    d89e:	9305      	str	r3, [sp, #20]
    d8a0:	f10d 0257 	add.w	r2, sp, #87	; 0x57
    uint8_t * d8 = (uint8_t *)dst;
    d8a4:	ab18      	add	r3, sp, #96	; 0x60
    while(len) {
    d8a6:	a81a      	add	r0, sp, #104	; 0x68
        *d8 = *s8;
    d8a8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    d8ac:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
    d8b0:	4283      	cmp	r3, r0
    d8b2:	d1f9      	bne.n	d8a8 <lv_draw_rect+0xfd0>
    area_outer.x1 -= dsc->outline_width;
    d8b4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    d8b8:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
    d8bc:	eba9 0904 	sub.w	r9, r9, r4
    d8c0:	fa1f f389 	uxth.w	r3, r9
    d8c4:	930a      	str	r3, [sp, #40]	; 0x28
    d8c6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    area_outer.x2 += dsc->outline_width;
    d8ca:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
    d8ce:	4427      	add	r7, r4
    d8d0:	b2bf      	uxth	r7, r7
    d8d2:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
    area_outer.y1 -= dsc->outline_width;
    d8d6:	f8bd 8062 	ldrh.w	r8, [sp, #98]	; 0x62
    d8da:	eba8 0804 	sub.w	r8, r8, r4
    d8de:	fa1f f888 	uxth.w	r8, r8
    d8e2:	f8ad 8062 	strh.w	r8, [sp, #98]	; 0x62
    area_outer.y2 += dsc->outline_width;
    d8e6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d8ea:	441c      	add	r4, r3
    d8ec:	b2a4      	uxth	r4, r4
    d8ee:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
    d8f2:	4b0c      	ldr	r3, [pc, #48]	; (d924 <lv_draw_rect+0x104c>)
    d8f4:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
    d8f6:	4b0c      	ldr	r3, [pc, #48]	; (d928 <lv_draw_rect+0x1050>)
    d8f8:	4798      	blx	r3
    d8fa:	4681      	mov	r9, r0
    is_common = _lv_area_intersect(&draw_area, &area_outer, clip);
    d8fc:	9a04      	ldr	r2, [sp, #16]
    d8fe:	a918      	add	r1, sp, #96	; 0x60
    d900:	a81a      	add	r0, sp, #104	; 0x68
    d902:	4b04      	ldr	r3, [pc, #16]	; (d914 <lv_draw_rect+0x103c>)
    d904:	4798      	blx	r3
    if(is_common == false) return;
    d906:	2800      	cmp	r0, #0
    d908:	f041 8044 	bne.w	e994 <lv_draw_rect+0x20bc>
}
    d90c:	b031      	add	sp, #196	; 0xc4
    d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d912:	bf00      	nop
    d914:	00011ac1 	.word	0x00011ac1
    d918:	00007cf9 	.word	0x00007cf9
    d91c:	0000c415 	.word	0x0000c415
    d920:	00012b19 	.word	0x00012b19
    d924:	00006511 	.word	0x00006511
    d928:	00011585 	.word	0x00011585
    d92c:	0000c46d 	.word	0x0000c46d
    d930:	00013029 	.word	0x00013029
    d934:	0000c3c5 	.word	0x0000c3c5
    draw_area.x1 -= disp_area->x1;
    d938:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    d93c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    d940:	1a5b      	subs	r3, r3, r1
    d942:	b29a      	uxth	r2, r3
    d944:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    draw_area.y1 -= disp_area->y1;
    d948:	f8b8 0012 	ldrh.w	r0, [r8, #18]
    d94c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    d950:	1a1b      	subs	r3, r3, r0
    d952:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    draw_area.x2 -= disp_area->x1;
    d956:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
    d95a:	1a5b      	subs	r3, r3, r1
    d95c:	b29b      	uxth	r3, r3
    d95e:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    draw_area.y2 -= disp_area->y1;
    d962:	f8bd 1076 	ldrh.w	r1, [sp, #118]	; 0x76
    d966:	1a09      	subs	r1, r1, r0
    d968:	f8ad 1076 	strh.w	r1, [sp, #118]	; 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    d96c:	3301      	adds	r3, #1
    d96e:	1a9b      	subs	r3, r3, r2
    d970:	b21b      	sxth	r3, r3
    d972:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    d974:	930a      	str	r3, [sp, #40]	; 0x28
    d976:	4618      	mov	r0, r3
    d978:	4b93      	ldr	r3, [pc, #588]	; (dbc8 <lv_draw_rect+0x12f0>)
    d97a:	4798      	blx	r3
    d97c:	9005      	str	r0, [sp, #20]
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
    d97e:	4b93      	ldr	r3, [pc, #588]	; (dbcc <lv_draw_rect+0x12f4>)
    d980:	4798      	blx	r3
    d982:	b283      	uxth	r3, r0
    d984:	930b      	str	r3, [sp, #44]	; 0x2c
    if(other_mask_cnt) simple_mode = false;
    d986:	bb43      	cbnz	r3, d9da <lv_draw_rect+0x1102>
    else if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
    d988:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d98c:	3b02      	subs	r3, #2
    d98e:	bf18      	it	ne
    d990:	2301      	movne	r3, #1
    d992:	9307      	str	r3, [sp, #28]
    d994:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
    d998:	3501      	adds	r5, #1
    d99a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    d99e:	1aed      	subs	r5, r5, r3
    d9a0:	b22d      	sxth	r5, r5
    int32_t coords_w = lv_area_get_width(&coords_bg);
    d9a2:	462c      	mov	r4, r5
    int32_t rout = dsc->radius;
    d9a4:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    d9a8:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    d9ac:	3301      	adds	r3, #1
    d9ae:	f8bd 606a 	ldrh.w	r6, [sp, #106]	; 0x6a
    d9b2:	1b9b      	subs	r3, r3, r6
    int32_t coords_h = lv_area_get_height(&coords_bg);
    d9b4:	b21e      	sxth	r6, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    d9b6:	4633      	mov	r3, r6
    d9b8:	42ae      	cmp	r6, r5
    d9ba:	bfa8      	it	ge
    d9bc:	462b      	movge	r3, r5
    if(rout > short_side >> 1) rout = short_side >> 1;
    d9be:	105e      	asrs	r6, r3, #1
    d9c0:	4296      	cmp	r6, r2
    d9c2:	bfa8      	it	ge
    d9c4:	4616      	movge	r6, r2
    if(simple_mode && rout == 0 && (dsc->bg_grad_dir == LV_GRAD_DIR_NONE)) {
    d9c6:	9b07      	ldr	r3, [sp, #28]
    d9c8:	b1db      	cbz	r3, da02 <lv_draw_rect+0x112a>
    d9ca:	b9d6      	cbnz	r6, da02 <lv_draw_rect+0x112a>
    d9cc:	f89a 3006 	ldrb.w	r3, [sl, #6]
    d9d0:	b133      	cbz	r3, d9e0 <lv_draw_rect+0x1108>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d9d2:	f04f 33ff 	mov.w	r3, #4294967295
    d9d6:	930e      	str	r3, [sp, #56]	; 0x38
    d9d8:	e021      	b.n	da1e <lv_draw_rect+0x1146>
    if(other_mask_cnt) simple_mode = false;
    d9da:	2300      	movs	r3, #0
    d9dc:	9307      	str	r3, [sp, #28]
    d9de:	e7d9      	b.n	d994 <lv_draw_rect+0x10bc>
        _lv_blend_fill(clip, &coords_bg,
    d9e0:	f89a 300d 	ldrb.w	r3, [sl, #13]
    d9e4:	9302      	str	r3, [sp, #8]
    d9e6:	9701      	str	r7, [sp, #4]
    d9e8:	2301      	movs	r3, #1
    d9ea:	9300      	str	r3, [sp, #0]
    d9ec:	2300      	movs	r3, #0
    d9ee:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    d9f2:	a91a      	add	r1, sp, #104	; 0x68
    d9f4:	9804      	ldr	r0, [sp, #16]
    d9f6:	4c76      	ldr	r4, [pc, #472]	; (dbd0 <lv_draw_rect+0x12f8>)
    d9f8:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
    d9fa:	f04f 33ff 	mov.w	r3, #4294967295
    d9fe:	930e      	str	r3, [sp, #56]	; 0x38
    da00:	e276      	b.n	def0 <lv_draw_rect+0x1618>
        if(rout > 0) {
    da02:	2e00      	cmp	r6, #0
    da04:	dd32      	ble.n	da6c <lv_draw_rect+0x1194>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
    da06:	2300      	movs	r3, #0
    da08:	4632      	mov	r2, r6
    da0a:	a91a      	add	r1, sp, #104	; 0x68
    da0c:	a829      	add	r0, sp, #164	; 0xa4
    da0e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; dbe0 <lv_draw_rect+0x1308>
    da12:	47c8      	blx	r9
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    da14:	2100      	movs	r1, #0
    da16:	a829      	add	r0, sp, #164	; 0xa4
    da18:	4b6e      	ldr	r3, [pc, #440]	; (dbd4 <lv_draw_rect+0x12fc>)
    da1a:	4798      	blx	r3
    da1c:	900e      	str	r0, [sp, #56]	; 0x38
        lv_color_t grad_color = dsc->bg_color;
    da1e:	f8ba b002 	ldrh.w	fp, [sl, #2]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    da22:	f89a 3006 	ldrb.w	r3, [sl, #6]
    da26:	2b02      	cmp	r3, #2
    da28:	d024      	beq.n	da74 <lv_draw_rect+0x119c>
        lv_color_t * grad_map = NULL;
    da2a:	2300      	movs	r3, #0
    da2c:	930d      	str	r3, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    da2e:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
    da32:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    da36:	1c53      	adds	r3, r2, #1
    da38:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
    da3a:	b21b      	sxth	r3, r3
    da3c:	eba3 0946 	sub.w	r9, r3, r6, lsl #1
        fill_area.x1 = coords_bg.x1;
    da40:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
        fill_area.x2 = coords_bg.x2;
    da44:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    da48:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    da4c:	f8b8 3012 	ldrh.w	r3, [r8, #18]
    da50:	4413      	add	r3, r2
    da52:	b21b      	sxth	r3, r3
    da54:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
        fill_area.y2 = fill_area.y1;
    da58:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    da5c:	4615      	mov	r5, r2
    da5e:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    da62:	429a      	cmp	r2, r3
    da64:	f300 8237 	bgt.w	ded6 <lv_draw_rect+0x15fe>
                _lv_blend_fill(clip, &fill_area2,
    da68:	9708      	str	r7, [sp, #32]
    da6a:	e0fa      	b.n	dc62 <lv_draw_rect+0x138a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    da6c:	f04f 33ff 	mov.w	r3, #4294967295
    da70:	930e      	str	r3, [sp, #56]	; 0x38
    da72:	e7d4      	b.n	da1e <lv_draw_rect+0x1146>
        if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR && dsc->bg_color.full != dsc->bg_grad_color.full) {
    da74:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    da78:	459b      	cmp	fp, r3
    da7a:	f000 8089 	beq.w	db90 <lv_draw_rect+0x12b8>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
    da7e:	0068      	lsls	r0, r5, #1
    da80:	4b51      	ldr	r3, [pc, #324]	; (dbc8 <lv_draw_rect+0x12f0>)
    da82:	4798      	blx	r3
    da84:	900d      	str	r0, [sp, #52]	; 0x34
            for(i = 0; i < coords_w; i++) {
    da86:	2d00      	cmp	r5, #0
    da88:	ddd1      	ble.n	da2e <lv_draw_rect+0x1156>
    da8a:	f04f 0900 	mov.w	r9, #0
    da8e:	9608      	str	r6, [sp, #32]
    da90:	4606      	mov	r6, r0
    da92:	e01b      	b.n	dacc <lv_draw_rect+0x11f4>
    if(i <= min) return dsc->bg_color;
    da94:	f89a 3002 	ldrb.w	r3, [sl, #2]
    da98:	f003 031f 	and.w	r3, r3, #31
    da9c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    daa0:	f3c1 1145 	ubfx	r1, r1, #5, #6
    daa4:	f89a 2003 	ldrb.w	r2, [sl, #3]
    daa8:	08d2      	lsrs	r2, r2, #3
                grad_map[i] = grad_get(dsc, coords_w, i);
    daaa:	7828      	ldrb	r0, [r5, #0]
    daac:	f363 0004 	bfi	r0, r3, #0, #5
    dab0:	7028      	strb	r0, [r5, #0]
    dab2:	882b      	ldrh	r3, [r5, #0]
    dab4:	f361 134a 	bfi	r3, r1, #5, #6
    dab8:	802b      	strh	r3, [r5, #0]
    daba:	0a1b      	lsrs	r3, r3, #8
    dabc:	f362 03c7 	bfi	r3, r2, #3, #5
    dac0:	706b      	strb	r3, [r5, #1]
            for(i = 0; i < coords_w; i++) {
    dac2:	f109 0901 	add.w	r9, r9, #1
    dac6:	3602      	adds	r6, #2
    dac8:	454c      	cmp	r4, r9
    daca:	d05f      	beq.n	db8c <lv_draw_rect+0x12b4>
                grad_map[i] = grad_get(dsc, coords_w, i);
    dacc:	4635      	mov	r5, r6
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    dace:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
    dad2:	fb00 f304 	mul.w	r3, r0, r4
    dad6:	121b      	asrs	r3, r3, #8
    if(i <= min) return dsc->bg_color;
    dad8:	fa0f f189 	sxth.w	r1, r9
    dadc:	428b      	cmp	r3, r1
    dade:	dad9      	bge.n	da94 <lv_draw_rect+0x11bc>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    dae0:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
    dae4:	fb02 fe04 	mul.w	lr, r2, r4
    if(i >= max) return dsc->bg_grad_color;
    dae8:	ebb1 2f2e 	cmp.w	r1, lr, asr #8
    daec:	da42      	bge.n	db74 <lv_draw_rect+0x129c>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    daee:	1a12      	subs	r2, r2, r0
    d = (s * d) >> 8;
    daf0:	fb04 f202 	mul.w	r2, r4, r2
    i -= min;
    daf4:	eba9 0303 	sub.w	r3, r9, r3
    lv_opa_t mix = (i * 255) / d;
    daf8:	b21b      	sxth	r3, r3
    dafa:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    d = (s * d) >> 8;
    dafe:	1212      	asrs	r2, r2, #8
    lv_opa_t mix = (i * 255) / d;
    db00:	fb93 f3f2 	sdiv	r3, r3, r2
    db04:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    db06:	f1c3 0eff 	rsb	lr, r3, #255	; 0xff
    db0a:	f89a 2005 	ldrb.w	r2, [sl, #5]
    db0e:	08d2      	lsrs	r2, r2, #3
    db10:	f89a 1003 	ldrb.w	r1, [sl, #3]
    db14:	08c9      	lsrs	r1, r1, #3
    db16:	fb0e f101 	mul.w	r1, lr, r1
    db1a:	fb03 1202 	mla	r2, r3, r2, r1
    db1e:	eb02 2102 	add.w	r1, r2, r2, lsl #8
    db22:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    db26:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    db2a:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    db2e:	f3c1 1145 	ubfx	r1, r1, #5, #6
    db32:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    db36:	f3c0 1045 	ubfx	r0, r0, #5, #6
    db3a:	fb0e f000 	mul.w	r0, lr, r0
    db3e:	fb03 0101 	mla	r1, r3, r1, r0
    db42:	eb01 2001 	add.w	r0, r1, r1, lsl #8
    db46:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
    db4a:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    db4e:	f89a 0004 	ldrb.w	r0, [sl, #4]
    db52:	f000 001f 	and.w	r0, r0, #31
    db56:	f89a c002 	ldrb.w	ip, [sl, #2]
    db5a:	f00c 0c1f 	and.w	ip, ip, #31
    db5e:	fb0e fe0c 	mul.w	lr, lr, ip
    db62:	fb03 e300 	mla	r3, r3, r0, lr
    db66:	eb03 2003 	add.w	r0, r3, r3, lsl #8
    db6a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
    db6e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    db72:	e79a      	b.n	daaa <lv_draw_rect+0x11d2>
    if(i >= max) return dsc->bg_grad_color;
    db74:	f89a 3004 	ldrb.w	r3, [sl, #4]
    db78:	f003 031f 	and.w	r3, r3, #31
    db7c:	f8ba 1004 	ldrh.w	r1, [sl, #4]
    db80:	f3c1 1145 	ubfx	r1, r1, #5, #6
    db84:	f89a 2005 	ldrb.w	r2, [sl, #5]
    db88:	08d2      	lsrs	r2, r2, #3
    db8a:	e78e      	b.n	daaa <lv_draw_rect+0x11d2>
    db8c:	9e08      	ldr	r6, [sp, #32]
    db8e:	e74e      	b.n	da2e <lv_draw_rect+0x1156>
        lv_color_t * grad_map = NULL;
    db90:	2300      	movs	r3, #0
    db92:	930d      	str	r3, [sp, #52]	; 0x34
    db94:	e74b      	b.n	da2e <lv_draw_rect+0x1156>
                    _lv_memset_ff(mask_buf, draw_area_w);
    db96:	990a      	ldr	r1, [sp, #40]	; 0x28
    db98:	9f05      	ldr	r7, [sp, #20]
    db9a:	4638      	mov	r0, r7
    db9c:	4b0e      	ldr	r3, [pc, #56]	; (dbd8 <lv_draw_rect+0x1300>)
    db9e:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dba0:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    dba4:	442a      	add	r2, r5
    dba6:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    dbaa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    dbae:	4419      	add	r1, r3
    dbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dbb2:	b212      	sxth	r2, r2
    dbb4:	b209      	sxth	r1, r1
    dbb6:	4638      	mov	r0, r7
    dbb8:	4f08      	ldr	r7, [pc, #32]	; (dbdc <lv_draw_rect+0x1304>)
    dbba:	47b8      	blx	r7
    dbbc:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    dbbe:	f89a 3006 	ldrb.w	r3, [sl, #6]
    dbc2:	2b01      	cmp	r3, #1
    dbc4:	d129      	bne.n	dc1a <lv_draw_rect+0x1342>
    dbc6:	e07a      	b.n	dcbe <lv_draw_rect+0x13e6>
    dbc8:	00012ee5 	.word	0x00012ee5
    dbcc:	0000c46d 	.word	0x0000c46d
    dbd0:	00007cf9 	.word	0x00007cf9
    dbd4:	0000c369 	.word	0x0000c369
    dbd8:	00013195 	.word	0x00013195
    dbdc:	0000c3c5 	.word	0x0000c3c5
    dbe0:	0000c5d5 	.word	0x0000c5d5
                _lv_memset_ff(mask_buf, draw_area_w);
    dbe4:	990a      	ldr	r1, [sp, #40]	; 0x28
    dbe6:	9f05      	ldr	r7, [sp, #20]
    dbe8:	4638      	mov	r0, r7
    dbea:	4bb6      	ldr	r3, [pc, #728]	; (dec4 <lv_draw_rect+0x15ec>)
    dbec:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    dbee:	f8b8 2012 	ldrh.w	r2, [r8, #18]
    dbf2:	442a      	add	r2, r5
    dbf4:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    dbf8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    dbfc:	4419      	add	r1, r3
    dbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dc00:	b212      	sxth	r2, r2
    dc02:	b209      	sxth	r1, r1
    dc04:	4638      	mov	r0, r7
    dc06:	4fb0      	ldr	r7, [pc, #704]	; (dec8 <lv_draw_rect+0x15f0>)
    dc08:	47b8      	blx	r7
    dc0a:	4607      	mov	r7, r0
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    dc0c:	f89a 3006 	ldrb.w	r3, [sl, #6]
    dc10:	2b01      	cmp	r3, #1
    dc12:	d054      	beq.n	dcbe <lv_draw_rect+0x13e6>
            if(simple_mode && split &&
    dc14:	9a07      	ldr	r2, [sp, #28]
    dc16:	2a00      	cmp	r2, #0
    dc18:	d13a      	bne.n	dc90 <lv_draw_rect+0x13b8>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    dc1a:	2b02      	cmp	r3, #2
    dc1c:	f000 8144 	beq.w	dea8 <lv_draw_rect+0x15d0>
                else if(other_mask_cnt != 0 || !split) {
    dc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc22:	b913      	cbnz	r3, dc2a <lv_draw_rect+0x1352>
    dc24:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    dc28:	dc0b      	bgt.n	dc42 <lv_draw_rect+0x136a>
                    _lv_blend_fill(clip, &fill_area,
    dc2a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    dc2e:	9302      	str	r3, [sp, #8]
    dc30:	9b08      	ldr	r3, [sp, #32]
    dc32:	9301      	str	r3, [sp, #4]
    dc34:	9700      	str	r7, [sp, #0]
    dc36:	9b05      	ldr	r3, [sp, #20]
    dc38:	465a      	mov	r2, fp
    dc3a:	a91e      	add	r1, sp, #120	; 0x78
    dc3c:	9804      	ldr	r0, [sp, #16]
    dc3e:	4ca3      	ldr	r4, [pc, #652]	; (decc <lv_draw_rect+0x15f4>)
    dc40:	47a0      	blx	r4
            fill_area.y1++;
    dc42:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    dc46:	3301      	adds	r3, #1
    dc48:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2++;
    dc4c:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    dc50:	3301      	adds	r3, #1
    dc52:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    dc56:	3501      	adds	r5, #1
    dc58:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
    dc5c:	429d      	cmp	r5, r3
    dc5e:	f300 8139 	bgt.w	ded4 <lv_draw_rect+0x15fc>
            int32_t y = h + vdb->area.y1;
    dc62:	f9b8 4012 	ldrsh.w	r4, [r8, #18]
    dc66:	442c      	add	r4, r5
            if(y > coords_bg.y1 + rout + 1 &&
    dc68:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    dc6c:	4433      	add	r3, r6
    dc6e:	3301      	adds	r3, #1
    dc70:	429c      	cmp	r4, r3
    dc72:	ddb7      	ble.n	dbe4 <lv_draw_rect+0x130c>
               y < coords_bg.y2 - rout - 1) {
    dc74:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    dc78:	1b9b      	subs	r3, r3, r6
    dc7a:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
    dc7c:	429c      	cmp	r4, r3
    dc7e:	dab1      	bge.n	dbe4 <lv_draw_rect+0x130c>
                if(simple_mode == false) {
    dc80:	9b07      	ldr	r3, [sp, #28]
    dc82:	2b00      	cmp	r3, #0
    dc84:	d087      	beq.n	db96 <lv_draw_rect+0x12be>
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    dc86:	f89a 3006 	ldrb.w	r3, [sl, #6]
    dc8a:	2b01      	cmp	r3, #1
    dc8c:	d016      	beq.n	dcbc <lv_draw_rect+0x13e4>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    dc8e:	2701      	movs	r7, #1
            if(simple_mode && split &&
    dc90:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    dc94:	f300 8093 	bgt.w	ddbe <lv_draw_rect+0x14e6>
                if(dsc->bg_grad_dir == LV_GRAD_DIR_HOR) {
    dc98:	2b02      	cmp	r3, #2
    dc9a:	f000 8105 	beq.w	dea8 <lv_draw_rect+0x15d0>
                else if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    dc9e:	2b01      	cmp	r3, #1
    dca0:	d1be      	bne.n	dc20 <lv_draw_rect+0x1348>
                    _lv_blend_fill(clip, &fill_area,
    dca2:	f89a 300d 	ldrb.w	r3, [sl, #13]
    dca6:	9302      	str	r3, [sp, #8]
    dca8:	9b08      	ldr	r3, [sp, #32]
    dcaa:	9301      	str	r3, [sp, #4]
    dcac:	9700      	str	r7, [sp, #0]
    dcae:	9b05      	ldr	r3, [sp, #20]
    dcb0:	465a      	mov	r2, fp
    dcb2:	a91e      	add	r1, sp, #120	; 0x78
    dcb4:	9804      	ldr	r0, [sp, #16]
    dcb6:	4c85      	ldr	r4, [pc, #532]	; (decc <lv_draw_rect+0x15f4>)
    dcb8:	47a0      	blx	r4
    dcba:	e7c2      	b.n	dc42 <lv_draw_rect+0x136a>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
    dcbc:	2701      	movs	r7, #1
            if(dsc->bg_grad_dir == LV_GRAD_DIR_VER && dsc->bg_color.full != dsc->bg_grad_color.full) {
    dcbe:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    dcc2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    dcc6:	429a      	cmp	r2, r3
    dcc8:	d06f      	beq.n	ddaa <lv_draw_rect+0x14d2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    dcca:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
    dcce:	1a62      	subs	r2, r4, r1
    dcd0:	b293      	uxth	r3, r2
    dcd2:	461a      	mov	r2, r3
    dcd4:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
    dcd6:	f9ba e008 	ldrsh.w	lr, [sl, #8]
    dcda:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    dcde:	3301      	adds	r3, #1
    dce0:	1a5b      	subs	r3, r3, r1
    dce2:	b21b      	sxth	r3, r3
    dce4:	fb03 f10e 	mul.w	r1, r3, lr
    dce8:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
    dcea:	b210      	sxth	r0, r2
    dcec:	4281      	cmp	r1, r0
    dcee:	da4b      	bge.n	dd88 <lv_draw_rect+0x14b0>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
    dcf0:	f9ba c00a 	ldrsh.w	ip, [sl, #10]
    dcf4:	fb0c f203 	mul.w	r2, ip, r3
    if(i >= max) return dsc->bg_grad_color;
    dcf8:	ebb0 2f22 	cmp.w	r0, r2, asr #8
    dcfc:	f280 80b0 	bge.w	de60 <lv_draw_rect+0x1588>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    dd00:	ebac 0e0e 	sub.w	lr, ip, lr
    d = (s * d) >> 8;
    dd04:	fb03 f30e 	mul.w	r3, r3, lr
    i -= min;
    dd08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dd0a:	1a52      	subs	r2, r2, r1
    lv_opa_t mix = (i * 255) / d;
    dd0c:	b212      	sxth	r2, r2
    dd0e:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    d = (s * d) >> 8;
    dd12:	121b      	asrs	r3, r3, #8
    lv_opa_t mix = (i * 255) / d;
    dd14:	fb92 f3f3 	sdiv	r3, r2, r3
    dd18:	b2db      	uxtb	r3, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    dd1a:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    dd1e:	f89a 2005 	ldrb.w	r2, [sl, #5]
    dd22:	08d2      	lsrs	r2, r2, #3
    dd24:	f89a 0003 	ldrb.w	r0, [sl, #3]
    dd28:	08c0      	lsrs	r0, r0, #3
    dd2a:	fb01 f000 	mul.w	r0, r1, r0
    dd2e:	fb03 0202 	mla	r2, r3, r2, r0
    dd32:	eb02 2002 	add.w	r0, r2, r2, lsl #8
    dd36:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    dd3a:	f3c2 52c4 	ubfx	r2, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    dd3e:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    dd42:	f3c0 1045 	ubfx	r0, r0, #5, #6
    dd46:	f8ba e002 	ldrh.w	lr, [sl, #2]
    dd4a:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    dd4e:	fb01 fe0e 	mul.w	lr, r1, lr
    dd52:	fb03 e000 	mla	r0, r3, r0, lr
    dd56:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
    dd5a:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
    dd5e:	f3c0 50c5 	ubfx	r0, r0, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    dd62:	f89a e004 	ldrb.w	lr, [sl, #4]
    dd66:	f00e 0e1f 	and.w	lr, lr, #31
    dd6a:	f89a c002 	ldrb.w	ip, [sl, #2]
    dd6e:	f00c 0c1f 	and.w	ip, ip, #31
    dd72:	fb01 f10c 	mul.w	r1, r1, ip
    dd76:	fb03 130e 	mla	r3, r3, lr, r1
    dd7a:	eb03 2103 	add.w	r1, r3, r3, lsl #8
    dd7e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
    dd82:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    dd86:	e00a      	b.n	dd9e <lv_draw_rect+0x14c6>
    if(i <= min) return dsc->bg_color;
    dd88:	f89a 3002 	ldrb.w	r3, [sl, #2]
    dd8c:	f003 031f 	and.w	r3, r3, #31
    dd90:	f8ba 0002 	ldrh.w	r0, [sl, #2]
    dd94:	f3c0 1045 	ubfx	r0, r0, #5, #6
    dd98:	f89a 2003 	ldrb.w	r2, [sl, #3]
    dd9c:	08d2      	lsrs	r2, r2, #3
    dd9e:	f363 0b04 	bfi	fp, r3, #0, #5
    dda2:	f360 1b4a 	bfi	fp, r0, #5, #6
    dda6:	f362 2bcf 	bfi	fp, r2, #11, #5
            if(simple_mode && split &&
    ddaa:	9b07      	ldr	r3, [sp, #28]
    ddac:	2b00      	cmp	r3, #0
    ddae:	f43f af78 	beq.w	dca2 <lv_draw_rect+0x13ca>
    ddb2:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    ddb6:	bfc8      	it	gt
    ddb8:	2301      	movgt	r3, #1
    ddba:	f77f af72 	ble.w	dca2 <lv_draw_rect+0x13ca>
               (y < coords_bg.y1 + rout + 1 ||
    ddbe:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    ddc2:	4432      	add	r2, r6
    ddc4:	3201      	adds	r2, #1
            if(simple_mode && split &&
    ddc6:	4294      	cmp	r4, r2
    ddc8:	db06      	blt.n	ddd8 <lv_draw_rect+0x1500>
                y > coords_bg.y2 - rout - 1)) {
    ddca:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
    ddce:	1b92      	subs	r2, r2, r6
    ddd0:	3a01      	subs	r2, #1
               (y < coords_bg.y1 + rout + 1 ||
    ddd2:	4294      	cmp	r4, r2
    ddd4:	f77f af60 	ble.w	dc98 <lv_draw_rect+0x13c0>
                fill_area2.x1 = coords_bg.x1;
    ddd8:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    dddc:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x1 + rout - 1;
    dde0:	b2b2      	uxth	r2, r6
    dde2:	920c      	str	r2, [sp, #48]	; 0x30
    dde4:	3b01      	subs	r3, #1
    dde6:	4413      	add	r3, r2
    dde8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                fill_area2.y1 = fill_area.y1;
    ddec:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    ddf0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
                fill_area2.y2 = fill_area.y2;
    ddf4:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    ddf8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
                _lv_blend_fill(clip, &fill_area2,
    ddfc:	f89a 300d 	ldrb.w	r3, [sl, #13]
    de00:	9302      	str	r3, [sp, #8]
    de02:	9b08      	ldr	r3, [sp, #32]
    de04:	9301      	str	r3, [sp, #4]
    de06:	9700      	str	r7, [sp, #0]
    de08:	9b05      	ldr	r3, [sp, #20]
    de0a:	465a      	mov	r2, fp
    de0c:	a922      	add	r1, sp, #136	; 0x88
    de0e:	9804      	ldr	r0, [sp, #16]
    de10:	4c2e      	ldr	r4, [pc, #184]	; (decc <lv_draw_rect+0x15f4>)
    de12:	47a0      	blx	r4
                if(dsc->bg_grad_dir == LV_GRAD_DIR_VER) {
    de14:	f89a 3006 	ldrb.w	r3, [sl, #6]
    de18:	2b01      	cmp	r3, #1
    de1a:	d02d      	beq.n	de78 <lv_draw_rect+0x15a0>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
    de1c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
    de20:	1c5a      	adds	r2, r3, #1
    de22:	990c      	ldr	r1, [sp, #48]	; 0x30
    de24:	1a54      	subs	r4, r2, r1
    de26:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
                fill_area2.x2 = coords_bg.x2;
    de2a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    de2e:	1b9b      	subs	r3, r3, r6
    de30:	3301      	adds	r3, #1
    de32:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
    de36:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	; 0x70
    de3a:	440a      	add	r2, r1
    de3c:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
    de3e:	f89a 200d 	ldrb.w	r2, [sl, #13]
    de42:	9202      	str	r2, [sp, #8]
    de44:	9a08      	ldr	r2, [sp, #32]
    de46:	9201      	str	r2, [sp, #4]
    de48:	9700      	str	r7, [sp, #0]
    de4a:	9a05      	ldr	r2, [sp, #20]
    de4c:	2b00      	cmp	r3, #0
    de4e:	bfa8      	it	ge
    de50:	18d2      	addge	r2, r2, r3
    de52:	4613      	mov	r3, r2
    de54:	465a      	mov	r2, fp
    de56:	a922      	add	r1, sp, #136	; 0x88
    de58:	9804      	ldr	r0, [sp, #16]
    de5a:	4c1c      	ldr	r4, [pc, #112]	; (decc <lv_draw_rect+0x15f4>)
    de5c:	47a0      	blx	r4
    de5e:	e6f0      	b.n	dc42 <lv_draw_rect+0x136a>
    if(i >= max) return dsc->bg_grad_color;
    de60:	f89a 3004 	ldrb.w	r3, [sl, #4]
    de64:	f003 031f 	and.w	r3, r3, #31
    de68:	f8ba 0004 	ldrh.w	r0, [sl, #4]
    de6c:	f3c0 1045 	ubfx	r0, r0, #5, #6
    de70:	f89a 2005 	ldrb.w	r2, [sl, #5]
    de74:	08d2      	lsrs	r2, r2, #3
    de76:	e792      	b.n	dd9e <lv_draw_rect+0x14c6>
                    fill_area2.x1 = coords_bg.x1 + rout;
    de78:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    de7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    de7e:	4413      	add	r3, r2
    de80:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
                    fill_area2.x2 = coords_bg.x2 - rout;
    de84:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    de88:	1a9b      	subs	r3, r3, r2
    de8a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
                    _lv_blend_fill(clip, &fill_area2,
    de8e:	f89a 300d 	ldrb.w	r3, [sl, #13]
    de92:	9302      	str	r3, [sp, #8]
    de94:	9b08      	ldr	r3, [sp, #32]
    de96:	9301      	str	r3, [sp, #4]
    de98:	2301      	movs	r3, #1
    de9a:	9300      	str	r3, [sp, #0]
    de9c:	2300      	movs	r3, #0
    de9e:	465a      	mov	r2, fp
    dea0:	a922      	add	r1, sp, #136	; 0x88
    dea2:	9804      	ldr	r0, [sp, #16]
    dea4:	47a0      	blx	r4
    dea6:	e7b9      	b.n	de1c <lv_draw_rect+0x1544>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa, dsc->bg_blend_mode);
    dea8:	f89a 300d 	ldrb.w	r3, [sl, #13]
    deac:	9302      	str	r3, [sp, #8]
    deae:	9b08      	ldr	r3, [sp, #32]
    deb0:	9301      	str	r3, [sp, #4]
    deb2:	9700      	str	r7, [sp, #0]
    deb4:	9b05      	ldr	r3, [sp, #20]
    deb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    deb8:	a91e      	add	r1, sp, #120	; 0x78
    deba:	9804      	ldr	r0, [sp, #16]
    debc:	4c04      	ldr	r4, [pc, #16]	; (ded0 <lv_draw_rect+0x15f8>)
    debe:	47a0      	blx	r4
    dec0:	e6bf      	b.n	dc42 <lv_draw_rect+0x136a>
    dec2:	bf00      	nop
    dec4:	00013195 	.word	0x00013195
    dec8:	0000c3c5 	.word	0x0000c3c5
    decc:	00007cf9 	.word	0x00007cf9
    ded0:	00008829 	.word	0x00008829
    ded4:	9f08      	ldr	r7, [sp, #32]
        if(dsc->bg_grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
    ded6:	f89a 3006 	ldrb.w	r3, [sl, #6]
    deda:	b923      	cbnz	r3, dee6 <lv_draw_rect+0x160e>
    dedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dede:	b913      	cbnz	r3, dee6 <lv_draw_rect+0x160e>
    dee0:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
    dee4:	dc0b      	bgt.n	defe <lv_draw_rect+0x1626>
        if(grad_map) _lv_mem_buf_release(grad_map);
    dee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dee8:	b113      	cbz	r3, def0 <lv_draw_rect+0x1618>
    deea:	4618      	mov	r0, r3
    deec:	4bb3      	ldr	r3, [pc, #716]	; (e1bc <lv_draw_rect+0x18e4>)
    deee:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
    def0:	980e      	ldr	r0, [sp, #56]	; 0x38
    def2:	4bb3      	ldr	r3, [pc, #716]	; (e1c0 <lv_draw_rect+0x18e8>)
    def4:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
    def6:	9805      	ldr	r0, [sp, #20]
    def8:	4bb0      	ldr	r3, [pc, #704]	; (e1bc <lv_draw_rect+0x18e4>)
    defa:	4798      	blx	r3
    defc:	e469      	b.n	d7d2 <lv_draw_rect+0xefa>
            fill_area.x1 = coords_bg.x1 + rout;
    defe:	b2b6      	uxth	r6, r6
    df00:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    df04:	4433      	add	r3, r6
    df06:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2 - rout;
    df0a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    df0e:	1b9b      	subs	r3, r3, r6
    df10:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1;
    df14:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
    df18:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y1 + rout;
    df1c:	4433      	add	r3, r6
    df1e:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    df22:	f89a 300d 	ldrb.w	r3, [sl, #13]
    df26:	9302      	str	r3, [sp, #8]
    df28:	9701      	str	r7, [sp, #4]
    df2a:	2301      	movs	r3, #1
    df2c:	9300      	str	r3, [sp, #0]
    df2e:	2300      	movs	r3, #0
    df30:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    df34:	a91e      	add	r1, sp, #120	; 0x78
    df36:	9804      	ldr	r0, [sp, #16]
    df38:	4ca2      	ldr	r4, [pc, #648]	; (e1c4 <lv_draw_rect+0x18ec>)
    df3a:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
    df3c:	f9bd 106e 	ldrsh.w	r1, [sp, #110]	; 0x6e
    df40:	1b8a      	subs	r2, r1, r6
    df42:	b212      	sxth	r2, r2
    df44:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
    df48:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	; 0x7e
    df4c:	429a      	cmp	r2, r3
    df4e:	bfdc      	itt	le
    df50:	3301      	addle	r3, #1
    df52:	f8ad 307a 	strhle.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2;
    df56:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    df5a:	f89a 300d 	ldrb.w	r3, [sl, #13]
    df5e:	9302      	str	r3, [sp, #8]
    df60:	9701      	str	r7, [sp, #4]
    df62:	2501      	movs	r5, #1
    df64:	9500      	str	r5, [sp, #0]
    df66:	2300      	movs	r3, #0
    df68:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    df6c:	a91e      	add	r1, sp, #120	; 0x78
    df6e:	f8dd 8010 	ldr.w	r8, [sp, #16]
    df72:	4640      	mov	r0, r8
    df74:	4c93      	ldr	r4, [pc, #588]	; (e1c4 <lv_draw_rect+0x18ec>)
    df76:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
    df78:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    df7c:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area.x2 = coords_bg.x2;
    df80:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    df84:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area.y1 = coords_bg.y1 + rout + 1;
    df88:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    df8c:	442b      	add	r3, r5
    df8e:	4433      	add	r3, r6
    df90:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area.y2 = coords_bg.y2 - rout - 1;
    df94:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    df98:	3b01      	subs	r3, #1
    df9a:	1b9e      	subs	r6, r3, r6
    df9c:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area,
    dfa0:	f89a 300d 	ldrb.w	r3, [sl, #13]
    dfa4:	9302      	str	r3, [sp, #8]
    dfa6:	9701      	str	r7, [sp, #4]
    dfa8:	9500      	str	r5, [sp, #0]
    dfaa:	2300      	movs	r3, #0
    dfac:	f8ba 2002 	ldrh.w	r2, [sl, #2]
    dfb0:	a91e      	add	r1, sp, #120	; 0x78
    dfb2:	4640      	mov	r0, r8
    dfb4:	47a0      	blx	r4
    dfb6:	e796      	b.n	dee6 <lv_draw_rect+0x160e>
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
    dfb8:	4b83      	ldr	r3, [pc, #524]	; (e1c8 <lv_draw_rect+0x18f0>)
    dfba:	4798      	blx	r3
    dfbc:	4605      	mov	r5, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
    dfbe:	2801      	cmp	r0, #1
    dfc0:	d912      	bls.n	dfe8 <lv_draw_rect+0x1710>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    dfc2:	2802      	cmp	r0, #2
    dfc4:	d039      	beq.n	e03a <lv_draw_rect+0x1762>
        LV_LOG_WARN("lv_img_design: image source type is unknown");
    dfc6:	4b81      	ldr	r3, [pc, #516]	; (e1cc <lv_draw_rect+0x18f4>)
    dfc8:	9300      	str	r3, [sp, #0]
    dfca:	4b81      	ldr	r3, [pc, #516]	; (e1d0 <lv_draw_rect+0x18f8>)
    dfcc:	f240 52ae 	movw	r2, #1454	; 0x5ae
    dfd0:	4980      	ldr	r1, [pc, #512]	; (e1d4 <lv_draw_rect+0x18fc>)
    dfd2:	2002      	movs	r0, #2
    dfd4:	4c80      	ldr	r4, [pc, #512]	; (e1d8 <lv_draw_rect+0x1900>)
    dfd6:	47a0      	blx	r4
        lv_draw_img(coords, clip, NULL, NULL);
    dfd8:	2300      	movs	r3, #0
    dfda:	461a      	mov	r2, r3
    dfdc:	9904      	ldr	r1, [sp, #16]
    dfde:	9806      	ldr	r0, [sp, #24]
    dfe0:	4c7e      	ldr	r4, [pc, #504]	; (e1dc <lv_draw_rect+0x1904>)
    dfe2:	47a0      	blx	r4
    dfe4:	f7ff bbfd 	b.w	d7e2 <lv_draw_rect+0xf0a>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
    dfe8:	a929      	add	r1, sp, #164	; 0xa4
    dfea:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    dfee:	4b7c      	ldr	r3, [pc, #496]	; (e1e0 <lv_draw_rect+0x1908>)
    dff0:	4798      	blx	r3
        if(res != LV_RES_OK) {
    dff2:	2801      	cmp	r0, #1
    dff4:	d00a      	beq.n	e00c <lv_draw_rect+0x1734>
            LV_LOG_WARN("draw_img: can't get image info");
    dff6:	4b7b      	ldr	r3, [pc, #492]	; (e1e4 <lv_draw_rect+0x190c>)
    dff8:	9300      	str	r3, [sp, #0]
    dffa:	4b75      	ldr	r3, [pc, #468]	; (e1d0 <lv_draw_rect+0x18f8>)
    dffc:	f240 5294 	movw	r2, #1428	; 0x594
    e000:	4974      	ldr	r1, [pc, #464]	; (e1d4 <lv_draw_rect+0x18fc>)
    e002:	2002      	movs	r0, #2
    e004:	4c74      	ldr	r4, [pc, #464]	; (e1d8 <lv_draw_rect+0x1900>)
    e006:	47a0      	blx	r4
    e008:	f7ff bbeb 	b.w	d7e2 <lv_draw_rect+0xf0a>
        img_w = header.w;
    e00c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    e00e:	f3c3 298a 	ubfx	r9, r3, #10, #11
        img_h = header.h;
    e012:	f8bd 70a6 	ldrh.w	r7, [sp, #166]	; 0xa6
    e016:	f3c7 174a 	ubfx	r7, r7, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
    e01a:	a81e      	add	r0, sp, #120	; 0x78
    e01c:	4b72      	ldr	r3, [pc, #456]	; (e1e8 <lv_draw_rect+0x1910>)
    e01e:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
    e020:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    e024:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
    e028:	f89a 3037 	ldrb.w	r3, [sl, #55]	; 0x37
    e02c:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
        img_dsc.recolor = dsc->pattern_recolor;
    e030:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    e034:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    e038:	e020      	b.n	e07c <lv_draw_rect+0x17a4>
        lv_draw_label_dsc_init(&label_dsc);
    e03a:	a822      	add	r0, sp, #136	; 0x88
    e03c:	4b6b      	ldr	r3, [pc, #428]	; (e1ec <lv_draw_rect+0x1914>)
    e03e:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
    e040:	f8ba 3034 	ldrh.w	r3, [sl, #52]	; 0x34
    e044:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        label_dsc.font = dsc->pattern_font;
    e048:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
    e04c:	9223      	str	r2, [sp, #140]	; 0x8c
        label_dsc.opa = dsc->pattern_opa;
    e04e:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
    e052:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
    e056:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
    e05a:	2100      	movs	r1, #0
    e05c:	9102      	str	r1, [sp, #8]
    e05e:	f647 4118 	movw	r1, #31768	; 0x7c18
    e062:	9101      	str	r1, [sp, #4]
    e064:	f9bd 1092 	ldrsh.w	r1, [sp, #146]	; 0x92
    e068:	9100      	str	r1, [sp, #0]
    e06a:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
    e06e:	a829      	add	r0, sp, #164	; 0xa4
    e070:	4c5f      	ldr	r4, [pc, #380]	; (e1f0 <lv_draw_rect+0x1918>)
    e072:	47a0      	blx	r4
        img_w = s.x;
    e074:	f9bd 90a4 	ldrsh.w	r9, [sp, #164]	; 0xa4
        img_h = s.y;
    e078:	f9bd 70a6 	ldrsh.w	r7, [sp, #166]	; 0xa6
    if(dsc->pattern_repeat) {
    e07c:	f89a 3038 	ldrb.w	r3, [sl, #56]	; 0x38
    e080:	f013 0f01 	tst.w	r3, #1
    e084:	d13f      	bne.n	e106 <lv_draw_rect+0x182e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e086:	9c06      	ldr	r4, [sp, #24]
    e088:	8821      	ldrh	r1, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e08a:	8860      	ldrh	r0, [r4, #2]
    e08c:	88e2      	ldrh	r2, [r4, #6]
    e08e:	3201      	adds	r2, #1
    e090:	1a12      	subs	r2, r2, r0
        int32_t obj_h = lv_area_get_height(coords);
    e092:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e094:	88a3      	ldrh	r3, [r4, #4]
    e096:	3301      	adds	r3, #1
    e098:	1a5b      	subs	r3, r3, r1
        int32_t obj_w = lv_area_get_width(coords);
    e09a:	b21b      	sxth	r3, r3
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
    e09c:	eba3 0309 	sub.w	r3, r3, r9
    e0a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    e0a4:	eb01 0363 	add.w	r3, r1, r3, asr #1
    e0a8:	b29b      	uxth	r3, r3
    e0aa:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
    e0ae:	1bd2      	subs	r2, r2, r7
    e0b0:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
    e0b4:	eb00 0161 	add.w	r1, r0, r1, asr #1
    e0b8:	b289      	uxth	r1, r1
    e0ba:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    e0be:	f109 39ff 	add.w	r9, r9, #4294967295
    e0c2:	4499      	add	r9, r3
    e0c4:	f8ad 9074 	strh.w	r9, [sp, #116]	; 0x74
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    e0c8:	1e7b      	subs	r3, r7, #1
    e0ca:	440b      	add	r3, r1
    e0cc:	b29b      	uxth	r3, r3
    e0ce:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(src_type == LV_IMG_SRC_SYMBOL) {
    e0d2:	2d02      	cmp	r5, #2
    e0d4:	f000 80bd 	beq.w	e252 <lv_draw_rect+0x197a>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    e0d8:	f9ba 2000 	ldrsh.w	r2, [sl]
    e0dc:	9906      	ldr	r1, [sp, #24]
    e0de:	a81c      	add	r0, sp, #112	; 0x70
    e0e0:	4b44      	ldr	r3, [pc, #272]	; (e1f4 <lv_draw_rect+0x191c>)
    e0e2:	4798      	blx	r3
        int16_t radius_mask_id = LV_MASK_ID_INV;
    e0e4:	f04f 34ff 	mov.w	r4, #4294967295
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    e0e8:	2800      	cmp	r0, #0
    e0ea:	f000 86d4 	beq.w	ee96 <lv_draw_rect+0x25be>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    e0ee:	ab1e      	add	r3, sp, #120	; 0x78
    e0f0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    e0f4:	9904      	ldr	r1, [sp, #16]
    e0f6:	a81c      	add	r0, sp, #112	; 0x70
    e0f8:	4d38      	ldr	r5, [pc, #224]	; (e1dc <lv_draw_rect+0x1904>)
    e0fa:	47a8      	blx	r5
        lv_draw_mask_remove_id(radius_mask_id);
    e0fc:	4620      	mov	r0, r4
    e0fe:	4b30      	ldr	r3, [pc, #192]	; (e1c0 <lv_draw_rect+0x18e8>)
    e100:	4798      	blx	r3
    e102:	f7ff bb6e 	b.w	d7e2 <lv_draw_rect+0xf0a>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    e106:	2300      	movs	r3, #0
    e108:	f9ba 2000 	ldrsh.w	r2, [sl]
    e10c:	9e06      	ldr	r6, [sp, #24]
    e10e:	4631      	mov	r1, r6
    e110:	a829      	add	r0, sp, #164	; 0xa4
    e112:	4c39      	ldr	r4, [pc, #228]	; (e1f8 <lv_draw_rect+0x1920>)
    e114:	47a0      	blx	r4
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    e116:	2100      	movs	r1, #0
    e118:	a829      	add	r0, sp, #164	; 0xa4
    e11a:	4b38      	ldr	r3, [pc, #224]	; (e1fc <lv_draw_rect+0x1924>)
    e11c:	4798      	blx	r3
    e11e:	9007      	str	r0, [sp, #28]
    e120:	88b3      	ldrh	r3, [r6, #4]
    e122:	3301      	adds	r3, #1
    e124:	4634      	mov	r4, r6
    e126:	8832      	ldrh	r2, [r6, #0]
    e128:	1a9b      	subs	r3, r3, r2
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
    e12a:	b21b      	sxth	r3, r3
    e12c:	fb93 f2f9 	sdiv	r2, r3, r9
    e130:	fb09 3312 	mls	r3, r9, r2, r3
    e134:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    e138:	ea4f 0b63 	mov.w	fp, r3, asr #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e13c:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
    e140:	8873      	ldrh	r3, [r6, #2]
    e142:	1c4a      	adds	r2, r1, #1
    e144:	1ad2      	subs	r2, r2, r3
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
    e146:	b210      	sxth	r0, r2
    e148:	fb90 f2f7 	sdiv	r2, r0, r7
    e14c:	fb07 0212 	mls	r2, r7, r2, r0
    e150:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
        coords_tmp.y1 = coords->y1 - ofs_y;
    e154:	eba3 0362 	sub.w	r3, r3, r2, asr #1
    e158:	b29b      	uxth	r3, r3
    e15a:	b21a      	sxth	r2, r3
    e15c:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
    e160:	b2bf      	uxth	r7, r7
    e162:	1e78      	subs	r0, r7, #1
    e164:	4403      	add	r3, r0
    e166:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    e16a:	4291      	cmp	r1, r2
    e16c:	db6c      	blt.n	e248 <lv_draw_rect+0x1970>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    e16e:	f8df 8090 	ldr.w	r8, [pc, #144]	; e200 <lv_draw_rect+0x1928>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    e172:	4e1a      	ldr	r6, [pc, #104]	; (e1dc <lv_draw_rect+0x1904>)
    e174:	f8cd 9014 	str.w	r9, [sp, #20]
    e178:	46a1      	mov	r9, r4
    e17a:	e052      	b.n	e222 <lv_draw_rect+0x194a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    e17c:	2300      	movs	r3, #0
    e17e:	9300      	str	r3, [sp, #0]
    e180:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    e184:	aa22      	add	r2, sp, #136	; 0x88
    e186:	9904      	ldr	r1, [sp, #16]
    e188:	a81c      	add	r0, sp, #112	; 0x70
    e18a:	47c0      	blx	r8
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    e18c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    e190:	4423      	add	r3, r4
    e192:	b21b      	sxth	r3, r3
    e194:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    e198:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    e19c:	4422      	add	r2, r4
    e19e:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
    e1a2:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    e1a6:	429a      	cmp	r2, r3
    e1a8:	db2c      	blt.n	e204 <lv_draw_rect+0x192c>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    e1aa:	2d02      	cmp	r5, #2
    e1ac:	d0e6      	beq.n	e17c <lv_draw_rect+0x18a4>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
    e1ae:	ab1e      	add	r3, sp, #120	; 0x78
    e1b0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    e1b4:	9904      	ldr	r1, [sp, #16]
    e1b6:	a81c      	add	r0, sp, #112	; 0x70
    e1b8:	47b0      	blx	r6
    e1ba:	e7e7      	b.n	e18c <lv_draw_rect+0x18b4>
    e1bc:	00012b19 	.word	0x00012b19
    e1c0:	0000c415 	.word	0x0000c415
    e1c4:	00007cf9 	.word	0x00007cf9
    e1c8:	00009f11 	.word	0x00009f11
    e1cc:	0001c5c4 	.word	0x0001c5c4
    e1d0:	0001c564 	.word	0x0001c564
    e1d4:	0001c574 	.word	0x0001c574
    e1d8:	00012805 	.word	0x00012805
    e1dc:	00009c91 	.word	0x00009c91
    e1e0:	00010395 	.word	0x00010395
    e1e4:	0001c5a4 	.word	0x0001c5a4
    e1e8:	00009bed 	.word	0x00009bed
    e1ec:	00009f75 	.word	0x00009f75
    e1f0:	00014625 	.word	0x00014625
    e1f4:	00011d15 	.word	0x00011d15
    e1f8:	0000c5d5 	.word	0x0000c5d5
    e1fc:	0000c369 	.word	0x0000c369
    e200:	00009fcd 	.word	0x00009fcd
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
    e204:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e208:	443b      	add	r3, r7
    e20a:	b21b      	sxth	r3, r3
    e20c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
    e210:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
    e214:	443a      	add	r2, r7
    e216:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    e21a:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
    e21e:	429a      	cmp	r2, r3
    e220:	db12      	blt.n	e248 <lv_draw_rect+0x1970>
            coords_tmp.x1 = coords->x1 - ofs_x;
    e222:	f8b9 3000 	ldrh.w	r3, [r9]
    e226:	eba3 030b 	sub.w	r3, r3, fp
    e22a:	b29b      	uxth	r3, r3
    e22c:	b21a      	sxth	r2, r3
    e22e:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
    e232:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    e236:	1e61      	subs	r1, r4, #1
    e238:	440b      	add	r3, r1
    e23a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
    e23e:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
    e242:	4293      	cmp	r3, r2
    e244:	dab1      	bge.n	e1aa <lv_draw_rect+0x18d2>
    e246:	e7dd      	b.n	e204 <lv_draw_rect+0x192c>
        lv_draw_mask_remove_id(radius_mask_id);
    e248:	9807      	ldr	r0, [sp, #28]
    e24a:	4b8a      	ldr	r3, [pc, #552]	; (e474 <lv_draw_rect+0x1b9c>)
    e24c:	4798      	blx	r3
    e24e:	f7ff bac8 	b.w	d7e2 <lv_draw_rect+0xf0a>
            coords_tmp.y1 += y_corr;
    e252:	f002 0201 	and.w	r2, r2, #1
    e256:	4411      	add	r1, r2
    e258:	f8ad 1072 	strh.w	r1, [sp, #114]	; 0x72
            coords_tmp.y2 += y_corr;
    e25c:	4413      	add	r3, r2
    e25e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
    e262:	f9ba 2000 	ldrsh.w	r2, [sl]
    e266:	4621      	mov	r1, r4
    e268:	a81c      	add	r0, sp, #112	; 0x70
    e26a:	4b83      	ldr	r3, [pc, #524]	; (e478 <lv_draw_rect+0x1ba0>)
    e26c:	4798      	blx	r3
    e26e:	b9a8      	cbnz	r0, e29c <lv_draw_rect+0x19c4>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    e270:	2300      	movs	r3, #0
    e272:	f9ba 2000 	ldrsh.w	r2, [sl]
    e276:	9906      	ldr	r1, [sp, #24]
    e278:	a829      	add	r0, sp, #164	; 0xa4
    e27a:	4c80      	ldr	r4, [pc, #512]	; (e47c <lv_draw_rect+0x1ba4>)
    e27c:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    e27e:	2100      	movs	r1, #0
    e280:	a829      	add	r0, sp, #164	; 0xa4
    e282:	4b7f      	ldr	r3, [pc, #508]	; (e480 <lv_draw_rect+0x1ba8>)
    e284:	4798      	blx	r3
    e286:	4604      	mov	r4, r0
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
    e288:	2300      	movs	r3, #0
    e28a:	9300      	str	r3, [sp, #0]
    e28c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    e290:	aa22      	add	r2, sp, #136	; 0x88
    e292:	9904      	ldr	r1, [sp, #16]
    e294:	a81c      	add	r0, sp, #112	; 0x70
    e296:	4d7b      	ldr	r5, [pc, #492]	; (e484 <lv_draw_rect+0x1bac>)
    e298:	47a8      	blx	r5
    e29a:	e72f      	b.n	e0fc <lv_draw_rect+0x1824>
        int16_t radius_mask_id = LV_MASK_ID_INV;
    e29c:	f04f 34ff 	mov.w	r4, #4294967295
    e2a0:	e7f2      	b.n	e288 <lv_draw_rect+0x19b0>
    draw_area.x1 -= disp_area->x1;
    e2a2:	8a29      	ldrh	r1, [r5, #16]
    e2a4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e2a8:	1a5b      	subs	r3, r3, r1
    e2aa:	b29a      	uxth	r2, r3
    e2ac:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
    e2b0:	8a68      	ldrh	r0, [r5, #18]
    e2b2:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    e2b6:	1a1b      	subs	r3, r3, r0
    e2b8:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    draw_area.x2 -= disp_area->x1;
    e2bc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    e2c0:	1a5b      	subs	r3, r3, r1
    e2c2:	b29b      	uxth	r3, r3
    e2c4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    draw_area.y2 -= disp_area->y1;
    e2c8:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
    e2cc:	1a09      	subs	r1, r1, r0
    e2ce:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e2d2:	3301      	adds	r3, #1
    e2d4:	1a9b      	subs	r3, r3, r2
    e2d6:	b21b      	sxth	r3, r3
    e2d8:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    e2da:	9309      	str	r3, [sp, #36]	; 0x24
    e2dc:	4618      	mov	r0, r3
    e2de:	4b6a      	ldr	r3, [pc, #424]	; (e488 <lv_draw_rect+0x1bb0>)
    e2e0:	4798      	blx	r3
    e2e2:	4683      	mov	fp, r0
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
    e2e4:	4b69      	ldr	r3, [pc, #420]	; (e48c <lv_draw_rect+0x1bb4>)
    e2e6:	4798      	blx	r3
    if(other_mask_cnt) simple_mode = false;
    e2e8:	b948      	cbnz	r0, e2fe <lv_draw_rect+0x1a26>
    else if(dsc->border_side != LV_BORDER_SIDE_FULL) simple_mode = false;
    e2ea:	f9ba 8012 	ldrsh.w	r8, [sl, #18]
    e2ee:	f1b8 0f0f 	cmp.w	r8, #15
    e2f2:	bf14      	ite	ne
    e2f4:	f04f 0800 	movne.w	r8, #0
    e2f8:	f04f 0801 	moveq.w	r8, #1
    e2fc:	e001      	b.n	e302 <lv_draw_rect+0x1a2a>
    if(other_mask_cnt) simple_mode = false;
    e2fe:	f04f 0800 	mov.w	r8, #0
    int32_t rout = dsc->radius;
    e302:	f9ba 2000 	ldrsh.w	r2, [sl]
    e306:	9e06      	ldr	r6, [sp, #24]
    e308:	88b3      	ldrh	r3, [r6, #4]
    e30a:	3301      	adds	r3, #1
    e30c:	8831      	ldrh	r1, [r6, #0]
    e30e:	1a5b      	subs	r3, r3, r1
    int32_t coords_w = lv_area_get_width(coords);
    e310:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e312:	88f3      	ldrh	r3, [r6, #6]
    e314:	3301      	adds	r3, #1
    e316:	8870      	ldrh	r0, [r6, #2]
    e318:	1a1b      	subs	r3, r3, r0
    int32_t coords_h = lv_area_get_height(coords);
    e31a:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
    e31c:	428b      	cmp	r3, r1
    e31e:	bfa8      	it	ge
    e320:	460b      	movge	r3, r1
    if(rout > short_side >> 1) rout = short_side >> 1;
    e322:	105b      	asrs	r3, r3, #1
    e324:	4293      	cmp	r3, r2
    e326:	bfa8      	it	ge
    e328:	4613      	movge	r3, r2
    e32a:	461a      	mov	r2, r3
    e32c:	930a      	str	r3, [sp, #40]	; 0x28
    if(rout > 0) {
    e32e:	2b00      	cmp	r3, #0
    e330:	f340 8088 	ble.w	e444 <lv_draw_rect+0x1b6c>
        lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
    e334:	2300      	movs	r3, #0
    e336:	4631      	mov	r1, r6
    e338:	a822      	add	r0, sp, #136	; 0x88
    e33a:	4e50      	ldr	r6, [pc, #320]	; (e47c <lv_draw_rect+0x1ba4>)
    e33c:	47b0      	blx	r6
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    e33e:	2100      	movs	r1, #0
    e340:	a822      	add	r0, sp, #136	; 0x88
    e342:	4b4f      	ldr	r3, [pc, #316]	; (e480 <lv_draw_rect+0x1ba8>)
    e344:	4798      	blx	r3
    e346:	900e      	str	r0, [sp, #56]	; 0x38
    int32_t rin = rout - dsc->border_width;
    e348:	f9ba 6010 	ldrsh.w	r6, [sl, #16]
    e34c:	9a06      	ldr	r2, [sp, #24]
    e34e:	1e53      	subs	r3, r2, #1
    e350:	1dd0      	adds	r0, r2, #7
    uint8_t * d8 = (uint8_t *)dst;
    e352:	aa1a      	add	r2, sp, #104	; 0x68
        *d8 = *s8;
    e354:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    e358:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
    e35c:	4283      	cmp	r3, r0
    e35e:	d1f9      	bne.n	e354 <lv_draw_rect+0x1a7c>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    e360:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
    e364:	f8ba 3012 	ldrh.w	r3, [sl, #18]
    e368:	f013 0f04 	tst.w	r3, #4
    e36c:	d06e      	beq.n	e44c <lv_draw_rect+0x1b74>
    e36e:	b2b1      	uxth	r1, r6
    e370:	440a      	add	r2, r1
    e372:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    e376:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
    e37a:	f013 0f08 	tst.w	r3, #8
    e37e:	d06a      	beq.n	e456 <lv_draw_rect+0x1b7e>
    e380:	b2b1      	uxth	r1, r6
    e382:	1a52      	subs	r2, r2, r1
    e384:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    e388:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
    e38c:	f013 0f02 	tst.w	r3, #2
    e390:	d066      	beq.n	e460 <lv_draw_rect+0x1b88>
    e392:	b2b1      	uxth	r1, r6
    e394:	440a      	add	r2, r1
    e396:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    e39a:	f8bd 206e 	ldrh.w	r2, [sp, #110]	; 0x6e
    e39e:	f013 0f01 	tst.w	r3, #1
    e3a2:	d062      	beq.n	e46a <lv_draw_rect+0x1b92>
    e3a4:	b2b3      	uxth	r3, r6
    e3a6:	1ad3      	subs	r3, r2, r3
    e3a8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    lv_draw_mask_radius_init(&mask_rin_param, &area_small, rout - dsc->border_width, true);
    e3ac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    e3b0:	fa1f f789 	uxth.w	r7, r9
    e3b4:	1bba      	subs	r2, r7, r6
    e3b6:	2301      	movs	r3, #1
    e3b8:	b212      	sxth	r2, r2
    e3ba:	a91a      	add	r1, sp, #104	; 0x68
    e3bc:	a829      	add	r0, sp, #164	; 0xa4
    e3be:	4e2f      	ldr	r6, [pc, #188]	; (e47c <lv_draw_rect+0x1ba4>)
    e3c0:	47b0      	blx	r6
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    e3c2:	2100      	movs	r1, #0
    e3c4:	a829      	add	r0, sp, #164	; 0xa4
    e3c6:	4b2e      	ldr	r3, [pc, #184]	; (e480 <lv_draw_rect+0x1ba8>)
    e3c8:	4798      	blx	r3
    e3ca:	900f      	str	r0, [sp, #60]	; 0x3c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
    e3cc:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
    e3d0:	3b01      	subs	r3, #1
    e3d2:	454b      	cmp	r3, r9
    e3d4:	bfb8      	it	lt
    e3d6:	464b      	movlt	r3, r9
    e3d8:	4619      	mov	r1, r3
    e3da:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t color = dsc->border_color;
    e3dc:	f8ba 300e 	ldrh.w	r3, [sl, #14]
    e3e0:	f8ad 3014 	strh.w	r3, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->border_blend_mode;
    e3e4:	f89a 6015 	ldrb.w	r6, [sl, #21]
    if(simple_mode) {
    e3e8:	f1b8 0f00 	cmp.w	r8, #0
    e3ec:	f000 81bf 	beq.w	e76e <lv_draw_rect+0x1e96>
        int32_t upper_corner_end = coords->y1 - disp_area->y1 + corner_size;
    e3f0:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    e3f4:	9806      	ldr	r0, [sp, #24]
    e3f6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    e3fa:	1ad2      	subs	r2, r2, r3
    e3fc:	440a      	add	r2, r1
        upper_corner_end = LV_MATH_MIN(upper_corner_end, draw_area.y2);
    e3fe:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
    e402:	4291      	cmp	r1, r2
    e404:	bfa8      	it	ge
    e406:	4611      	movge	r1, r2
    e408:	910b      	str	r1, [sp, #44]	; 0x2c
        fill_area.x1 = coords->x1;
    e40a:	8802      	ldrh	r2, [r0, #0]
    e40c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    e410:	8882      	ldrh	r2, [r0, #4]
    e412:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    e416:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    e41a:	4413      	add	r3, r2
    e41c:	b21b      	sxth	r3, r3
    e41e:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e422:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    e426:	4690      	mov	r8, r2
    e428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e42a:	4293      	cmp	r3, r2
    e42c:	f2c0 80b3 	blt.w	e596 <lv_draw_rect+0x1cbe>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e430:	f8df 905c 	ldr.w	r9, [pc, #92]	; e490 <lv_draw_rect+0x1bb8>
    e434:	f8cd b01c 	str.w	fp, [sp, #28]
    e438:	46b3      	mov	fp, r6
    e43a:	4626      	mov	r6, r4
    e43c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    e440:	4682      	mov	sl, r0
    e442:	e055      	b.n	e4f0 <lv_draw_rect+0x1c18>
    int16_t mask_rout_id = LV_MASK_ID_INV;
    e444:	f04f 33ff 	mov.w	r3, #4294967295
    e448:	930e      	str	r3, [sp, #56]	; 0x38
    e44a:	e77d      	b.n	e348 <lv_draw_rect+0x1a70>
    area_small.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
    e44c:	990a      	ldr	r1, [sp, #40]	; 0x28
    e44e:	1871      	adds	r1, r6, r1
    e450:	4249      	negs	r1, r1
    e452:	b289      	uxth	r1, r1
    e454:	e78c      	b.n	e370 <lv_draw_rect+0x1a98>
    area_small.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
    e456:	990a      	ldr	r1, [sp, #40]	; 0x28
    e458:	1871      	adds	r1, r6, r1
    e45a:	4249      	negs	r1, r1
    e45c:	b289      	uxth	r1, r1
    e45e:	e790      	b.n	e382 <lv_draw_rect+0x1aaa>
    area_small.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
    e460:	990a      	ldr	r1, [sp, #40]	; 0x28
    e462:	1871      	adds	r1, r6, r1
    e464:	4249      	negs	r1, r1
    e466:	b289      	uxth	r1, r1
    e468:	e794      	b.n	e394 <lv_draw_rect+0x1abc>
    area_small.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
    e46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e46c:	18f3      	adds	r3, r6, r3
    e46e:	425b      	negs	r3, r3
    e470:	b29b      	uxth	r3, r3
    e472:	e798      	b.n	e3a6 <lv_draw_rect+0x1ace>
    e474:	0000c415 	.word	0x0000c415
    e478:	00011d15 	.word	0x00011d15
    e47c:	0000c5d5 	.word	0x0000c5d5
    e480:	0000c369 	.word	0x0000c369
    e484:	00009fcd 	.word	0x00009fcd
    e488:	00012ee5 	.word	0x00012ee5
    e48c:	0000c46d 	.word	0x0000c46d
    e490:	00007cf9 	.word	0x00007cf9
            fill_area2.x1 = coords->x2 - rout + 1;
    e494:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    e498:	1c5a      	adds	r2, r3, #1
    e49a:	1bd2      	subs	r2, r2, r7
    e49c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    e4a0:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    e4a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e4a6:	1a9b      	subs	r3, r3, r2
    e4a8:	3301      	adds	r3, #1
    e4aa:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    e4ae:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    e4b2:	440a      	add	r2, r1
    e4b4:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    e4b6:	f8cd b008 	str.w	fp, [sp, #8]
    e4ba:	9601      	str	r6, [sp, #4]
    e4bc:	9400      	str	r4, [sp, #0]
    e4be:	9a07      	ldr	r2, [sp, #28]
    e4c0:	2b00      	cmp	r3, #0
    e4c2:	bfa8      	it	ge
    e4c4:	18d2      	addge	r2, r2, r3
    e4c6:	4613      	mov	r3, r2
    e4c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e4cc:	a91e      	add	r1, sp, #120	; 0x78
    e4ce:	9804      	ldr	r0, [sp, #16]
    e4d0:	47c8      	blx	r9
            fill_area.y1++;
    e4d2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e4d6:	3301      	adds	r3, #1
    e4d8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e4dc:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e4e0:	3301      	adds	r3, #1
    e4e2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    e4e6:	f108 0801 	add.w	r8, r8, #1
    e4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e4ec:	4543      	cmp	r3, r8
    e4ee:	db4c      	blt.n	e58a <lv_draw_rect+0x1cb2>
            _lv_memset_ff(mask_buf, draw_area_w);
    e4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    e4f2:	9c07      	ldr	r4, [sp, #28]
    e4f4:	4620      	mov	r0, r4
    e4f6:	4bc7      	ldr	r3, [pc, #796]	; (e814 <lv_draw_rect+0x1f3c>)
    e4f8:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e4fa:	8a6a      	ldrh	r2, [r5, #18]
    e4fc:	4442      	add	r2, r8
    e4fe:	8a29      	ldrh	r1, [r5, #16]
    e500:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e504:	4419      	add	r1, r3
    e506:	9b08      	ldr	r3, [sp, #32]
    e508:	b212      	sxth	r2, r2
    e50a:	b209      	sxth	r1, r1
    e50c:	9407      	str	r4, [sp, #28]
    e50e:	4620      	mov	r0, r4
    e510:	4cc1      	ldr	r4, [pc, #772]	; (e818 <lv_draw_rect+0x1f40>)
    e512:	47a0      	blx	r4
    e514:	4604      	mov	r4, r0
            fill_area2.y1 = fill_area.y1;
    e516:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e51a:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    e51e:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e522:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = coords->x1;
    e526:	f9ba 3000 	ldrsh.w	r3, [sl]
    e52a:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    e52e:	3b01      	subs	r3, #1
    e530:	443b      	add	r3, r7
    e532:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e536:	f8cd b008 	str.w	fp, [sp, #8]
    e53a:	9601      	str	r6, [sp, #4]
    e53c:	9000      	str	r0, [sp, #0]
    e53e:	9b07      	ldr	r3, [sp, #28]
    e540:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e544:	a91e      	add	r1, sp, #120	; 0x78
    e546:	9804      	ldr	r0, [sp, #16]
    e548:	47c8      	blx	r9
            if(fill_area2.y2 < coords->y1 + dsc->border_width) {
    e54a:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    e54e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
    e552:	990c      	ldr	r1, [sp, #48]	; 0x30
    e554:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    e558:	440b      	add	r3, r1
    e55a:	429a      	cmp	r2, r3
    e55c:	da9a      	bge.n	e494 <lv_draw_rect+0x1bbc>
                fill_area2.x1 = coords->x1 + rout;
    e55e:	f8ba 3000 	ldrh.w	r3, [sl]
    e562:	443b      	add	r3, r7
    e564:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    e568:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    e56c:	1bdb      	subs	r3, r3, r7
    e56e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e572:	f8cd b008 	str.w	fp, [sp, #8]
    e576:	9601      	str	r6, [sp, #4]
    e578:	2301      	movs	r3, #1
    e57a:	9300      	str	r3, [sp, #0]
    e57c:	2300      	movs	r3, #0
    e57e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e582:	a91e      	add	r1, sp, #120	; 0x78
    e584:	9804      	ldr	r0, [sp, #16]
    e586:	47c8      	blx	r9
    e588:	e784      	b.n	e494 <lv_draw_rect+0x1bbc>
    e58a:	4634      	mov	r4, r6
    e58c:	465e      	mov	r6, fp
    e58e:	f8dd b01c 	ldr.w	fp, [sp, #28]
    e592:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
        int32_t lower_corner_end = coords->y2 - disp_area->y1 - corner_size;
    e596:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
    e59a:	9a06      	ldr	r2, [sp, #24]
    e59c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
    e5a0:	1ad2      	subs	r2, r2, r3
    e5a2:	990d      	ldr	r1, [sp, #52]	; 0x34
    e5a4:	1a52      	subs	r2, r2, r1
        lower_corner_end = LV_MATH_MAX(lower_corner_end, draw_area.y1);
    e5a6:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
    e5aa:	4590      	cmp	r8, r2
    e5ac:	bfb8      	it	lt
    e5ae:	4690      	movlt	r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    e5b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e5b2:	4541      	cmp	r1, r8
    e5b4:	bfa8      	it	ge
    e5b6:	f101 0801 	addge.w	r8, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    e5ba:	4443      	add	r3, r8
    e5bc:	b21b      	sxth	r3, r3
    e5be:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e5c2:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    e5c6:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e5ca:	4598      	cmp	r8, r3
    e5cc:	f300 808d 	bgt.w	e6ea <lv_draw_rect+0x1e12>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e5d0:	f8df 9248 	ldr.w	r9, [pc, #584]	; e81c <lv_draw_rect+0x1f44>
    e5d4:	f8cd b01c 	str.w	fp, [sp, #28]
    e5d8:	46b3      	mov	fp, r6
    e5da:	4626      	mov	r6, r4
    e5dc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    e5e0:	f8dd a018 	ldr.w	sl, [sp, #24]
    e5e4:	e02e      	b.n	e644 <lv_draw_rect+0x1d6c>
            fill_area2.x1 = coords->x2 - rout + 1;
    e5e6:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
    e5ea:	1c5a      	adds	r2, r3, #1
    e5ec:	1bd2      	subs	r2, r2, r7
    e5ee:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x2;
    e5f2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (coords->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    e5f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e5f8:	1a9b      	subs	r3, r3, r2
    e5fa:	3301      	adds	r3, #1
    e5fc:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
    e600:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
    e604:	440a      	add	r2, r1
    e606:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    e608:	f8cd b008 	str.w	fp, [sp, #8]
    e60c:	9601      	str	r6, [sp, #4]
    e60e:	9400      	str	r4, [sp, #0]
    e610:	9a07      	ldr	r2, [sp, #28]
    e612:	2b00      	cmp	r3, #0
    e614:	bfa8      	it	ge
    e616:	18d2      	addge	r2, r2, r3
    e618:	4613      	mov	r3, r2
    e61a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e61e:	a91e      	add	r1, sp, #120	; 0x78
    e620:	9804      	ldr	r0, [sp, #16]
    e622:	47c8      	blx	r9
            fill_area.y1++;
    e624:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e628:	3301      	adds	r3, #1
    e62a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e62e:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e632:	3301      	adds	r3, #1
    e634:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    e638:	f108 0801 	add.w	r8, r8, #1
    e63c:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e640:	4598      	cmp	r8, r3
    e642:	dc4c      	bgt.n	e6de <lv_draw_rect+0x1e06>
            _lv_memset_ff(mask_buf, draw_area_w);
    e644:	9909      	ldr	r1, [sp, #36]	; 0x24
    e646:	9c07      	ldr	r4, [sp, #28]
    e648:	4620      	mov	r0, r4
    e64a:	4b72      	ldr	r3, [pc, #456]	; (e814 <lv_draw_rect+0x1f3c>)
    e64c:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e64e:	8a6a      	ldrh	r2, [r5, #18]
    e650:	4442      	add	r2, r8
    e652:	8a29      	ldrh	r1, [r5, #16]
    e654:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e658:	4419      	add	r1, r3
    e65a:	9b08      	ldr	r3, [sp, #32]
    e65c:	b212      	sxth	r2, r2
    e65e:	b209      	sxth	r1, r1
    e660:	9407      	str	r4, [sp, #28]
    e662:	4620      	mov	r0, r4
    e664:	4c6c      	ldr	r4, [pc, #432]	; (e818 <lv_draw_rect+0x1f40>)
    e666:	47a0      	blx	r4
    e668:	4604      	mov	r4, r0
            fill_area2.x1 = coords->x1;
    e66a:	f9ba 3000 	ldrsh.w	r3, [sl]
    e66e:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = coords->x1 + rout - 1;
    e672:	3b01      	subs	r3, #1
    e674:	443b      	add	r3, r7
    e676:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    e67a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e67e:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    e682:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e686:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    e68a:	f8cd b008 	str.w	fp, [sp, #8]
    e68e:	9601      	str	r6, [sp, #4]
    e690:	9000      	str	r0, [sp, #0]
    e692:	9b07      	ldr	r3, [sp, #28]
    e694:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e698:	a91e      	add	r1, sp, #120	; 0x78
    e69a:	9804      	ldr	r0, [sp, #16]
    e69c:	47c8      	blx	r9
            if(fill_area2.y2 > coords->y2 - dsc->border_width) {
    e69e:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    e6a2:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
    e6a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e6a8:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
    e6ac:	1a5b      	subs	r3, r3, r1
    e6ae:	429a      	cmp	r2, r3
    e6b0:	dd99      	ble.n	e5e6 <lv_draw_rect+0x1d0e>
                fill_area2.x1 = coords->x1 + rout;
    e6b2:	f8ba 3000 	ldrh.w	r3, [sl]
    e6b6:	443b      	add	r3, r7
    e6b8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = coords->x2 - rout;
    e6bc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    e6c0:	1bdb      	subs	r3, r3, r7
    e6c2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e6c6:	f8cd b008 	str.w	fp, [sp, #8]
    e6ca:	9601      	str	r6, [sp, #4]
    e6cc:	2301      	movs	r3, #1
    e6ce:	9300      	str	r3, [sp, #0]
    e6d0:	2300      	movs	r3, #0
    e6d2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e6d6:	a91e      	add	r1, sp, #120	; 0x78
    e6d8:	9804      	ldr	r0, [sp, #16]
    e6da:	47c8      	blx	r9
    e6dc:	e783      	b.n	e5e6 <lv_draw_rect+0x1d0e>
    e6de:	4634      	mov	r4, r6
    e6e0:	465e      	mov	r6, fp
    e6e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
    e6e6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
        fill_area.y1 = coords->y1 + corner_size + 1;
    e6ea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    e6ee:	9906      	ldr	r1, [sp, #24]
    e6f0:	884b      	ldrh	r3, [r1, #2]
    e6f2:	3301      	adds	r3, #1
    e6f4:	4413      	add	r3, r2
    e6f6:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = coords->y2 - corner_size - 1;
    e6fa:	88cb      	ldrh	r3, [r1, #6]
    e6fc:	3b01      	subs	r3, #1
    e6fe:	1a9b      	subs	r3, r3, r2
    e700:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = coords->x1;
    e704:	f9b1 3000 	ldrsh.w	r3, [r1]
    e708:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x1 + dsc->border_width - 1;
    e70c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
    e710:	3a01      	subs	r2, #1
    e712:	4413      	add	r3, r2
    e714:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e718:	9602      	str	r6, [sp, #8]
    e71a:	9401      	str	r4, [sp, #4]
    e71c:	2701      	movs	r7, #1
    e71e:	9700      	str	r7, [sp, #0]
    e720:	2300      	movs	r3, #0
    e722:	f8bd 9014 	ldrh.w	r9, [sp, #20]
    e726:	464a      	mov	r2, r9
    e728:	a91c      	add	r1, sp, #112	; 0x70
    e72a:	f8dd 8010 	ldr.w	r8, [sp, #16]
    e72e:	4640      	mov	r0, r8
    e730:	4d3a      	ldr	r5, [pc, #232]	; (e81c <lv_draw_rect+0x1f44>)
    e732:	47a8      	blx	r5
        fill_area.x1 = coords->x2 - dsc->border_width + 1;
    e734:	9b06      	ldr	r3, [sp, #24]
    e736:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    e73a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    e73e:	1afb      	subs	r3, r7, r3
    e740:	4413      	add	r3, r2
    e742:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    e746:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    e74a:	9602      	str	r6, [sp, #8]
    e74c:	9401      	str	r4, [sp, #4]
    e74e:	9700      	str	r7, [sp, #0]
    e750:	2300      	movs	r3, #0
    e752:	464a      	mov	r2, r9
    e754:	a91c      	add	r1, sp, #112	; 0x70
    e756:	4640      	mov	r0, r8
    e758:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
    e75a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e75c:	4c30      	ldr	r4, [pc, #192]	; (e820 <lv_draw_rect+0x1f48>)
    e75e:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    e760:	980e      	ldr	r0, [sp, #56]	; 0x38
    e762:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    e764:	4658      	mov	r0, fp
    e766:	4b2f      	ldr	r3, [pc, #188]	; (e824 <lv_draw_rect+0x1f4c>)
    e768:	4798      	blx	r3
    e76a:	f7ff b854 	b.w	d816 <lv_draw_rect+0xf3e>
        fill_area.x1 = coords->x1;
    e76e:	9a06      	ldr	r2, [sp, #24]
    e770:	f9b2 1000 	ldrsh.w	r1, [r2]
    e774:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
        fill_area.x2 = coords->x2;
    e778:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
    e77c:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    e780:	f9bd 0062 	ldrsh.w	r0, [sp, #98]	; 0x62
    e784:	8a6b      	ldrh	r3, [r5, #18]
    e786:	4403      	add	r3, r0
    e788:	b21b      	sxth	r3, r3
    e78a:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    e78e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    e792:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
    e796:	2b04      	cmp	r3, #4
    e798:	d029      	beq.n	e7ee <lv_draw_rect+0x1f16>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    e79a:	2b08      	cmp	r3, #8
    e79c:	d044      	beq.n	e828 <lv_draw_rect+0x1f50>
        volatile bool top_only = false;
    e79e:	2200      	movs	r2, #0
    e7a0:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    e7a4:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
    e7a8:	2b02      	cmp	r3, #2
    e7aa:	d129      	bne.n	e800 <lv_draw_rect+0x1f28>
    e7ac:	2301      	movs	r3, #1
    e7ae:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
    e7b2:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
    e7b6:	b91b      	cbnz	r3, e7c0 <lv_draw_rect+0x1ee8>
    e7b8:	f89d 804f 	ldrb.w	r8, [sp, #79]	; 0x4f
    e7bc:	f088 0801 	eor.w	r8, r8, #1
    e7c0:	f008 0801 	and.w	r8, r8, #1
    e7c4:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    e7c8:	4607      	mov	r7, r0
    e7ca:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e7ce:	4298      	cmp	r0, r3
    e7d0:	dcc3      	bgt.n	e75a <lv_draw_rect+0x1e82>
                _lv_memset_ff(mask_buf, draw_area_w);
    e7d2:	f8df 8040 	ldr.w	r8, [pc, #64]	; e814 <lv_draw_rect+0x1f3c>
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    e7d6:	f8df 9044 	ldr.w	r9, [pc, #68]	; e81c <lv_draw_rect+0x1f44>
    e7da:	940a      	str	r4, [sp, #40]	; 0x28
    e7dc:	f8cd b01c 	str.w	fp, [sp, #28]
    e7e0:	f8dd b018 	ldr.w	fp, [sp, #24]
    e7e4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
    e7e8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    e7ec:	e04e      	b.n	e88c <lv_draw_rect+0x1fb4>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
    e7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e7f0:	4411      	add	r1, r2
    e7f2:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
        volatile bool top_only = false;
    e7f6:	2200      	movs	r2, #0
    e7f8:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
    e7fc:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    e800:	2b01      	cmp	r3, #1
    e802:	d016      	beq.n	e832 <lv_draw_rect+0x1f5a>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
    e804:	2b03      	cmp	r3, #3
    e806:	d1d4      	bne.n	e7b2 <lv_draw_rect+0x1eda>
            top_only = true;
    e808:	2301      	movs	r3, #1
    e80a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
    e80e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    e812:	e7ce      	b.n	e7b2 <lv_draw_rect+0x1eda>
    e814:	00013195 	.word	0x00013195
    e818:	0000c3c5 	.word	0x0000c3c5
    e81c:	00007cf9 	.word	0x00007cf9
    e820:	0000c415 	.word	0x0000c415
    e824:	00012b19 	.word	0x00012b19
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) fill_area.x1 = coords->x2 - corner_size;
    e828:	990d      	ldr	r1, [sp, #52]	; 0x34
    e82a:	1a52      	subs	r2, r2, r1
    e82c:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
    e830:	e7e1      	b.n	e7f6 <lv_draw_rect+0x1f1e>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
    e832:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    e836:	e7bc      	b.n	e7b2 <lv_draw_rect+0x1eda>
                _lv_memset_ff(mask_buf, draw_area_w);
    e838:	9909      	ldr	r1, [sp, #36]	; 0x24
    e83a:	9c07      	ldr	r4, [sp, #28]
    e83c:	4620      	mov	r0, r4
    e83e:	47c0      	blx	r8
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    e840:	8a6a      	ldrh	r2, [r5, #18]
    e842:	443a      	add	r2, r7
    e844:	8a29      	ldrh	r1, [r5, #16]
    e846:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    e84a:	4419      	add	r1, r3
    e84c:	9b08      	ldr	r3, [sp, #32]
    e84e:	b212      	sxth	r2, r2
    e850:	b209      	sxth	r1, r1
    e852:	9407      	str	r4, [sp, #28]
    e854:	4620      	mov	r0, r4
    e856:	4c98      	ldr	r4, [pc, #608]	; (eab8 <lv_draw_rect+0x21e0>)
    e858:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    e85a:	9602      	str	r6, [sp, #8]
    e85c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e85e:	9201      	str	r2, [sp, #4]
    e860:	9000      	str	r0, [sp, #0]
    e862:	9b07      	ldr	r3, [sp, #28]
    e864:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e868:	a91c      	add	r1, sp, #112	; 0x70
    e86a:	9804      	ldr	r0, [sp, #16]
    e86c:	47c8      	blx	r9
            fill_area.y1++;
    e86e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e872:	3301      	adds	r3, #1
    e874:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    e878:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    e87c:	3301      	adds	r3, #1
    e87e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    e882:	3701      	adds	r7, #1
    e884:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    e888:	429f      	cmp	r7, r3
    e88a:	dc1a      	bgt.n	e8c2 <lv_draw_rect+0x1fea>
            if(normal ||
    e88c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    e890:	2b00      	cmp	r3, #0
    e892:	d1d1      	bne.n	e838 <lv_draw_rect+0x1f60>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    e894:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
            if(normal ||
    e898:	b133      	cbz	r3, e8a8 <lv_draw_rect+0x1fd0>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    e89a:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    e89e:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
    e8a2:	4453      	add	r3, sl
    e8a4:	429a      	cmp	r2, r3
    e8a6:	ddc7      	ble.n	e838 <lv_draw_rect+0x1f60>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    e8a8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d0de      	beq.n	e86e <lv_draw_rect+0x1f96>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
    e8b0:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
    e8b4:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
    e8b8:	eba3 030a 	sub.w	r3, r3, sl
    e8bc:	429a      	cmp	r2, r3
    e8be:	dbd6      	blt.n	e86e <lv_draw_rect+0x1f96>
    e8c0:	e7ba      	b.n	e838 <lv_draw_rect+0x1f60>
    e8c2:	f8dd b01c 	ldr.w	fp, [sp, #28]
    e8c6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    e8ca:	e746      	b.n	e75a <lv_draw_rect+0x1e82>

    lv_point_t s;
    _lv_txt_get_size(&s, dsc->value_str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
    e8cc:	f9ba 304c 	ldrsh.w	r3, [sl, #76]	; 0x4c
    e8d0:	2400      	movs	r4, #0
    e8d2:	9402      	str	r4, [sp, #8]
    e8d4:	f647 4218 	movw	r2, #31768	; 0x7c18
    e8d8:	9201      	str	r2, [sp, #4]
    e8da:	f9ba 204e 	ldrsh.w	r2, [sl, #78]	; 0x4e
    e8de:	9200      	str	r2, [sp, #0]
    e8e0:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
    e8e4:	a81c      	add	r0, sp, #112	; 0x70
    e8e6:	4d75      	ldr	r5, [pc, #468]	; (eabc <lv_draw_rect+0x21e4>)
    e8e8:	47a8      	blx	r5
                     LV_TXT_FLAG_NONE);

    lv_area_t value_area;
    value_area.x1 = 0;
    e8ea:	f8ad 4088 	strh.w	r4, [sp, #136]	; 0x88
    value_area.y1 = 0;
    e8ee:	f8ad 408a 	strh.w	r4, [sp, #138]	; 0x8a
    value_area.x2 = s.x - 1;
    e8f2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    e8f6:	3b01      	subs	r3, #1
    e8f8:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    value_area.y2 = s.y - 1;
    e8fc:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    e900:	3b01      	subs	r3, #1
    e902:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_point_t p_align;
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
    e906:	ab1e      	add	r3, sp, #120	; 0x78
    e908:	f89a 2050 	ldrb.w	r2, [sl, #80]	; 0x50
    e90c:	a922      	add	r1, sp, #136	; 0x88
    e90e:	9806      	ldr	r0, [sp, #24]
    e910:	4d6b      	ldr	r5, [pc, #428]	; (eac0 <lv_draw_rect+0x21e8>)
    e912:	47a8      	blx	r5

    value_area.x1 += p_align.x + dsc->value_ofs_x;
    e914:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    e918:	f8ba 3048 	ldrh.w	r3, [sl, #72]	; 0x48
    e91c:	441a      	add	r2, r3
    e91e:	b292      	uxth	r2, r2
    e920:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
    e924:	4413      	add	r3, r2
    e926:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    value_area.y1 += p_align.y + dsc->value_ofs_y;
    e92a:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    e92e:	f8ba 104a 	ldrh.w	r1, [sl, #74]	; 0x4a
    e932:	440b      	add	r3, r1
    e934:	b29b      	uxth	r3, r3
    e936:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
    e93a:	4419      	add	r1, r3
    e93c:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    value_area.x2 += p_align.x + dsc->value_ofs_x;
    e940:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
    e944:	440a      	add	r2, r1
    e946:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
    value_area.y2 += p_align.y + dsc->value_ofs_y;
    e94a:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
    e94e:	4413      	add	r3, r2
    e950:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
    e954:	a829      	add	r0, sp, #164	; 0xa4
    e956:	4b5b      	ldr	r3, [pc, #364]	; (eac4 <lv_draw_rect+0x21ec>)
    e958:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
    e95a:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
    e95e:	932a      	str	r3, [sp, #168]	; 0xa8
    label_dsc.letter_space = dsc->value_letter_space;
    e960:	f8ba 304c 	ldrh.w	r3, [sl, #76]	; 0x4c
    e964:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    label_dsc.line_space = dsc->value_line_space;
    e968:	f8ba 304e 	ldrh.w	r3, [sl, #78]	; 0x4e
    e96c:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    label_dsc.color = dsc->value_color;
    e970:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    e974:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    label_dsc.opa = dsc->value_opa;
    e978:	f89a 3044 	ldrb.w	r3, [sl, #68]	; 0x44
    e97c:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac

    lv_draw_label(&value_area, clip, &label_dsc, dsc->value_str, NULL);
    e980:	9400      	str	r4, [sp, #0]
    e982:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    e986:	aa29      	add	r2, sp, #164	; 0xa4
    e988:	9904      	ldr	r1, [sp, #16]
    e98a:	a822      	add	r0, sp, #136	; 0x88
    e98c:	4c4e      	ldr	r4, [pc, #312]	; (eac8 <lv_draw_rect+0x21f0>)
    e98e:	47a0      	blx	r4
    e990:	f7fe bf49 	b.w	d826 <lv_draw_rect+0xf4e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e994:	1c72      	adds	r2, r6, #1
    e996:	9b06      	ldr	r3, [sp, #24]
    e998:	1ad2      	subs	r2, r2, r3
    int32_t inner_w = lv_area_get_width(&area_inner);
    e99a:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e99c:	1c6b      	adds	r3, r5, #1
    e99e:	9907      	ldr	r1, [sp, #28]
    e9a0:	1a5b      	subs	r3, r3, r1
    int32_t inner_h = lv_area_get_height(&area_inner);
    e9a2:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
    e9a4:	429a      	cmp	r2, r3
    e9a6:	bfa8      	it	ge
    e9a8:	461a      	movge	r2, r3
    if(rin > short_side >> 1) rin = short_side >> 1;
    e9aa:	1052      	asrs	r2, r2, #1
    e9ac:	9b08      	ldr	r3, [sp, #32]
    e9ae:	429a      	cmp	r2, r3
    e9b0:	bfa8      	it	ge
    e9b2:	461a      	movge	r2, r3
    int32_t rout = rin + dsc->outline_width;
    e9b4:	9b05      	ldr	r3, [sp, #20]
    e9b6:	4413      	add	r3, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    e9b8:	3701      	adds	r7, #1
    e9ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    e9bc:	1a79      	subs	r1, r7, r1
    int32_t coords_out_w = lv_area_get_width(&area_outer);
    e9be:	b208      	sxth	r0, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
    e9c0:	1c61      	adds	r1, r4, #1
    e9c2:	eba1 0108 	sub.w	r1, r1, r8
    int32_t coords_out_h = lv_area_get_height(&area_outer);
    e9c6:	b209      	sxth	r1, r1
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    e9c8:	4281      	cmp	r1, r0
    e9ca:	bfa8      	it	ge
    e9cc:	4601      	movge	r1, r0
    if(rout > short_side >> 1) rout = short_side >> 1;
    e9ce:	1049      	asrs	r1, r1, #1
    e9d0:	4299      	cmp	r1, r3
    e9d2:	bfa8      	it	ge
    e9d4:	4619      	movge	r1, r3
    e9d6:	460f      	mov	r7, r1
    e9d8:	9106      	str	r1, [sp, #24]
    draw_area.x1 -= disp_area->x1;
    e9da:	f8b9 0010 	ldrh.w	r0, [r9, #16]
    e9de:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    e9e2:	1a1b      	subs	r3, r3, r0
    e9e4:	b299      	uxth	r1, r3
    e9e6:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    draw_area.y1 -= disp_area->y1;
    e9ea:	f8b9 4012 	ldrh.w	r4, [r9, #18]
    e9ee:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
    e9f2:	1b1b      	subs	r3, r3, r4
    e9f4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    draw_area.x2 -= disp_area->x1;
    e9f8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
    e9fc:	1a1b      	subs	r3, r3, r0
    e9fe:	b29b      	uxth	r3, r3
    ea00:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    draw_area.y2 -= disp_area->y1;
    ea04:	f8bd 006e 	ldrh.w	r0, [sp, #110]	; 0x6e
    ea08:	1b00      	subs	r0, r0, r4
    ea0a:	f8ad 006e 	strh.w	r0, [sp, #110]	; 0x6e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
    ea0e:	3301      	adds	r3, #1
    ea10:	1a5b      	subs	r3, r3, r1
    ea12:	b21b      	sxth	r3, r3
    ea14:	461e      	mov	r6, r3
    ea16:	9307      	str	r3, [sp, #28]
    lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rin, true);
    ea18:	2301      	movs	r3, #1
    ea1a:	a916      	add	r1, sp, #88	; 0x58
    ea1c:	a822      	add	r0, sp, #136	; 0x88
    ea1e:	4d2b      	ldr	r5, [pc, #172]	; (eacc <lv_draw_rect+0x21f4>)
    ea20:	47a8      	blx	r5
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
    ea22:	2100      	movs	r1, #0
    ea24:	a822      	add	r0, sp, #136	; 0x88
    ea26:	4c2a      	ldr	r4, [pc, #168]	; (ead0 <lv_draw_rect+0x21f8>)
    ea28:	47a0      	blx	r4
    ea2a:	900c      	str	r0, [sp, #48]	; 0x30
    lv_draw_mask_radius_init(&mask_rout_param, &area_outer, rout, false);
    ea2c:	2300      	movs	r3, #0
    ea2e:	b23a      	sxth	r2, r7
    ea30:	a918      	add	r1, sp, #96	; 0x60
    ea32:	a829      	add	r0, sp, #164	; 0xa4
    ea34:	47a8      	blx	r5
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
    ea36:	2100      	movs	r1, #0
    ea38:	a829      	add	r0, sp, #164	; 0xa4
    ea3a:	47a0      	blx	r4
    ea3c:	900d      	str	r0, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
    ea3e:	9608      	str	r6, [sp, #32]
    ea40:	4630      	mov	r0, r6
    ea42:	4b24      	ldr	r3, [pc, #144]	; (ead4 <lv_draw_rect+0x21fc>)
    ea44:	4798      	blx	r3
    ea46:	900b      	str	r0, [sp, #44]	; 0x2c
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    ea48:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
    lv_color_t color = dsc->outline_color;
    ea4c:	f8ba 2016 	ldrh.w	r2, [sl, #22]
    ea50:	f8ad 2014 	strh.w	r2, [sp, #20]
    lv_blend_mode_t blend_mode = dsc->outline_blend_mode;
    ea54:	f89a 501d 	ldrb.w	r5, [sl, #29]
    if(simple_mode) {
    ea58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ea5a:	2a00      	cmp	r2, #0
    ea5c:	f040 81a6 	bne.w	edac <lv_draw_rect+0x24d4>
    int32_t corner_size = LV_MATH_MAX(rout, dsc->outline_width - 1);
    ea60:	3b01      	subs	r3, #1
    ea62:	42bb      	cmp	r3, r7
    ea64:	bfb8      	it	lt
    ea66:	463b      	movlt	r3, r7
    ea68:	4619      	mov	r1, r3
    ea6a:	930e      	str	r3, [sp, #56]	; 0x38
        int32_t upper_corner_end = area_outer.y1 - disp_area->y1 + corner_size;
    ea6c:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    ea70:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
    ea74:	1ad2      	subs	r2, r2, r3
    ea76:	440a      	add	r2, r1
    ea78:	4611      	mov	r1, r2
    ea7a:	9209      	str	r2, [sp, #36]	; 0x24
        fill_area.x1 = area_outer.x1;
    ea7c:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
    ea80:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    ea84:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
    ea88:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    ea8c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    ea90:	4413      	add	r3, r2
    ea92:	b21b      	sxth	r3, r3
    ea94:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    ea98:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    ea9c:	4616      	mov	r6, r2
    ea9e:	4291      	cmp	r1, r2
    eaa0:	f2c0 809d 	blt.w	ebde <lv_draw_rect+0x2306>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    eaa4:	f8df 8030 	ldr.w	r8, [pc, #48]	; ead8 <lv_draw_rect+0x2200>
    eaa8:	462b      	mov	r3, r5
    eaaa:	465d      	mov	r5, fp
    eaac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    eab0:	4682      	mov	sl, r0
    eab2:	469b      	mov	fp, r3
    eab4:	e03f      	b.n	eb36 <lv_draw_rect+0x225e>
    eab6:	bf00      	nop
    eab8:	0000c3c5 	.word	0x0000c3c5
    eabc:	00014625 	.word	0x00014625
    eac0:	00011dcd 	.word	0x00011dcd
    eac4:	00009f75 	.word	0x00009f75
    eac8:	00009fcd 	.word	0x00009fcd
    eacc:	0000c5d5 	.word	0x0000c5d5
    ead0:	0000c369 	.word	0x0000c369
    ead4:	00012ee5 	.word	0x00012ee5
    ead8:	00007cf9 	.word	0x00007cf9
            fill_area2.x1 = area_outer.x2 - rout + 1;
    eadc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    eae0:	1c5a      	adds	r2, r3, #1
    eae2:	1b14      	subs	r4, r2, r4
    eae4:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    eae8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    eaec:	9a06      	ldr	r2, [sp, #24]
    eaee:	1a9b      	subs	r3, r3, r2
    eaf0:	3301      	adds	r3, #1
    eaf2:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    eaf6:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    eafa:	440a      	add	r2, r1
    eafc:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    eafe:	f8cd b008 	str.w	fp, [sp, #8]
    eb02:	9501      	str	r5, [sp, #4]
    eb04:	9700      	str	r7, [sp, #0]
    eb06:	2b00      	cmp	r3, #0
    eb08:	bfac      	ite	ge
    eb0a:	4453      	addge	r3, sl
    eb0c:	f10a 0300 	addlt.w	r3, sl, #0
    eb10:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    eb14:	a91e      	add	r1, sp, #120	; 0x78
    eb16:	9804      	ldr	r0, [sp, #16]
    eb18:	47c0      	blx	r8
            fill_area.y1++;
    eb1a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    eb1e:	3301      	adds	r3, #1
    eb20:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    eb24:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    eb28:	3301      	adds	r3, #1
    eb2a:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
    eb2e:	3601      	adds	r6, #1
    eb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb32:	42b3      	cmp	r3, r6
    eb34:	db4e      	blt.n	ebd4 <lv_draw_rect+0x22fc>
            _lv_memset_ff(mask_buf, draw_area_w);
    eb36:	9908      	ldr	r1, [sp, #32]
    eb38:	4650      	mov	r0, sl
    eb3a:	4bcc      	ldr	r3, [pc, #816]	; (ee6c <lv_draw_rect+0x2594>)
    eb3c:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    eb3e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    eb42:	4432      	add	r2, r6
    eb44:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    eb48:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    eb4c:	4419      	add	r1, r3
    eb4e:	9b07      	ldr	r3, [sp, #28]
    eb50:	b212      	sxth	r2, r2
    eb52:	b209      	sxth	r1, r1
    eb54:	4650      	mov	r0, sl
    eb56:	4cc6      	ldr	r4, [pc, #792]	; (ee70 <lv_draw_rect+0x2598>)
    eb58:	47a0      	blx	r4
    eb5a:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
    eb5c:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    eb60:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    eb64:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    eb68:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            fill_area2.x1 = area_outer.x1;
    eb6c:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    eb70:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    eb74:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    eb78:	3b01      	subs	r3, #1
    eb7a:	4423      	add	r3, r4
    eb7c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    eb80:	f8cd b008 	str.w	fp, [sp, #8]
    eb84:	9501      	str	r5, [sp, #4]
    eb86:	9000      	str	r0, [sp, #0]
    eb88:	4653      	mov	r3, sl
    eb8a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    eb8e:	a91e      	add	r1, sp, #120	; 0x78
    eb90:	9804      	ldr	r0, [sp, #16]
    eb92:	47c0      	blx	r8
            if(fill_area2.y2 < area_outer.y1 + dsc->outline_width) {
    eb94:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    eb98:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
    eb9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    eb9e:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    eba2:	440b      	add	r3, r1
    eba4:	429a      	cmp	r2, r3
    eba6:	da99      	bge.n	eadc <lv_draw_rect+0x2204>
                fill_area2.x1 = area_outer.x1 + rout;
    eba8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    ebac:	4423      	add	r3, r4
    ebae:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    ebb2:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    ebb6:	1b1b      	subs	r3, r3, r4
    ebb8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    ebbc:	f8cd b008 	str.w	fp, [sp, #8]
    ebc0:	9501      	str	r5, [sp, #4]
    ebc2:	2301      	movs	r3, #1
    ebc4:	9300      	str	r3, [sp, #0]
    ebc6:	2300      	movs	r3, #0
    ebc8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    ebcc:	a91e      	add	r1, sp, #120	; 0x78
    ebce:	9804      	ldr	r0, [sp, #16]
    ebd0:	47c0      	blx	r8
    ebd2:	e783      	b.n	eadc <lv_draw_rect+0x2204>
    ebd4:	465b      	mov	r3, fp
    ebd6:	46ab      	mov	fp, r5
    ebd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    ebdc:	461d      	mov	r5, r3
        int32_t lower_corner_end = area_outer.y2 - disp_area->y1 - corner_size;
    ebde:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    ebe2:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
    ebe6:	1af6      	subs	r6, r6, r3
    ebe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ebea:	1ab6      	subs	r6, r6, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
    ebec:	9909      	ldr	r1, [sp, #36]	; 0x24
    ebee:	460a      	mov	r2, r1
    ebf0:	42b1      	cmp	r1, r6
    ebf2:	bfa4      	itt	ge
    ebf4:	3201      	addge	r2, #1
    ebf6:	4616      	movge	r6, r2
        fill_area.y1 = disp_area->y1 + lower_corner_end;
    ebf8:	4433      	add	r3, r6
    ebfa:	b21b      	sxth	r3, r3
    ebfc:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    ec00:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    ec04:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    ec08:	429e      	cmp	r6, r3
    ec0a:	f300 808c 	bgt.w	ed26 <lv_draw_rect+0x244e>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    ec0e:	f8df 8264 	ldr.w	r8, [pc, #612]	; ee74 <lv_draw_rect+0x259c>
    ec12:	462b      	mov	r3, r5
    ec14:	465d      	mov	r5, fp
    ec16:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    ec1a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    ec1e:	469b      	mov	fp, r3
    ec20:	e02d      	b.n	ec7e <lv_draw_rect+0x23a6>
            fill_area2.x1 = area_outer.x2 - rout + 1;
    ec22:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
    ec26:	1c5a      	adds	r2, r3, #1
    ec28:	1b14      	subs	r4, r2, r4
    ec2a:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x2;
    ec2e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            int32_t mask_ofs = (area_outer.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
    ec32:	9a06      	ldr	r2, [sp, #24]
    ec34:	1a9b      	subs	r3, r3, r2
    ec36:	3301      	adds	r3, #1
    ec38:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
    ec3c:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
    ec40:	440a      	add	r2, r1
    ec42:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
    ec44:	f8cd b008 	str.w	fp, [sp, #8]
    ec48:	9501      	str	r5, [sp, #4]
    ec4a:	9700      	str	r7, [sp, #0]
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	bfac      	ite	ge
    ec50:	4453      	addge	r3, sl
    ec52:	f10a 0300 	addlt.w	r3, sl, #0
    ec56:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    ec5a:	a91e      	add	r1, sp, #120	; 0x78
    ec5c:	9804      	ldr	r0, [sp, #16]
    ec5e:	47c0      	blx	r8
            fill_area.y1++;
    ec60:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    ec64:	3301      	adds	r3, #1
    ec66:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    ec6a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    ec6e:	3301      	adds	r3, #1
    ec70:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
    ec74:	3601      	adds	r6, #1
    ec76:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    ec7a:	429e      	cmp	r6, r3
    ec7c:	dc4e      	bgt.n	ed1c <lv_draw_rect+0x2444>
            _lv_memset_ff(mask_buf, draw_area_w);
    ec7e:	9908      	ldr	r1, [sp, #32]
    ec80:	4650      	mov	r0, sl
    ec82:	4b7a      	ldr	r3, [pc, #488]	; (ee6c <lv_draw_rect+0x2594>)
    ec84:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    ec86:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    ec8a:	4432      	add	r2, r6
    ec8c:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    ec90:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    ec94:	4419      	add	r1, r3
    ec96:	9b07      	ldr	r3, [sp, #28]
    ec98:	b212      	sxth	r2, r2
    ec9a:	b209      	sxth	r1, r1
    ec9c:	4650      	mov	r0, sl
    ec9e:	4c74      	ldr	r4, [pc, #464]	; (ee70 <lv_draw_rect+0x2598>)
    eca0:	47a0      	blx	r4
    eca2:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer.x1;
    eca4:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    eca8:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
            fill_area2.x2 = area_outer.x1 + rout - 1;
    ecac:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    ecb0:	3b01      	subs	r3, #1
    ecb2:	4423      	add	r3, r4
    ecb4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            fill_area2.y1 = fill_area.y1;
    ecb8:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    ecbc:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            fill_area2.y2 = fill_area.y2;
    ecc0:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    ecc4:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
    ecc8:	f8cd b008 	str.w	fp, [sp, #8]
    eccc:	9501      	str	r5, [sp, #4]
    ecce:	9000      	str	r0, [sp, #0]
    ecd0:	4653      	mov	r3, sl
    ecd2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    ecd6:	a91e      	add	r1, sp, #120	; 0x78
    ecd8:	9804      	ldr	r0, [sp, #16]
    ecda:	47c0      	blx	r8
            if(fill_area2.y2 > area_outer.y2 - dsc->outline_width) {
    ecdc:	f9bd 207e 	ldrsh.w	r2, [sp, #126]	; 0x7e
    ece0:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
    ece4:	9909      	ldr	r1, [sp, #36]	; 0x24
    ece6:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
    ecea:	1a5b      	subs	r3, r3, r1
    ecec:	429a      	cmp	r2, r3
    ecee:	dd98      	ble.n	ec22 <lv_draw_rect+0x234a>
                fill_area2.x1 = area_outer.x1 + rout;
    ecf0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    ecf4:	4423      	add	r3, r4
    ecf6:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
                fill_area2.x2 = area_outer.x2 - rout;
    ecfa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    ecfe:	1b1b      	subs	r3, r3, r4
    ed00:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    ed04:	f8cd b008 	str.w	fp, [sp, #8]
    ed08:	9501      	str	r5, [sp, #4]
    ed0a:	2301      	movs	r3, #1
    ed0c:	9300      	str	r3, [sp, #0]
    ed0e:	2300      	movs	r3, #0
    ed10:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    ed14:	a91e      	add	r1, sp, #120	; 0x78
    ed16:	9804      	ldr	r0, [sp, #16]
    ed18:	47c0      	blx	r8
    ed1a:	e782      	b.n	ec22 <lv_draw_rect+0x234a>
    ed1c:	465b      	mov	r3, fp
    ed1e:	46ab      	mov	fp, r5
    ed20:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    ed24:	461d      	mov	r5, r3
        fill_area.y1 = area_outer.y1 + corner_size + 1;
    ed26:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    ed2a:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
    ed2e:	3201      	adds	r2, #1
    ed30:	441a      	add	r2, r3
    ed32:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
        fill_area.y2 = area_outer.y2 - corner_size - 1;
    ed36:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    ed3a:	3a01      	subs	r2, #1
    ed3c:	1ad3      	subs	r3, r2, r3
    ed3e:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        fill_area.x1 = area_outer.x1;
    ed42:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
    ed46:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x1 + dsc->outline_width - 1;
    ed4a:	3b01      	subs	r3, #1
    ed4c:	f8ba 2018 	ldrh.w	r2, [sl, #24]
    ed50:	4413      	add	r3, r2
    ed52:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    ed56:	9502      	str	r5, [sp, #8]
    ed58:	f8cd b004 	str.w	fp, [sp, #4]
    ed5c:	2601      	movs	r6, #1
    ed5e:	9600      	str	r6, [sp, #0]
    ed60:	2300      	movs	r3, #0
    ed62:	f8bd 8014 	ldrh.w	r8, [sp, #20]
    ed66:	4642      	mov	r2, r8
    ed68:	a91c      	add	r1, sp, #112	; 0x70
    ed6a:	9f04      	ldr	r7, [sp, #16]
    ed6c:	4638      	mov	r0, r7
    ed6e:	4c41      	ldr	r4, [pc, #260]	; (ee74 <lv_draw_rect+0x259c>)
    ed70:	47a0      	blx	r4
        fill_area.x1 = area_outer.x2 - dsc->outline_width + 1;
    ed72:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
    ed76:	1993      	adds	r3, r2, r6
    ed78:	f8ba 1018 	ldrh.w	r1, [sl, #24]
    ed7c:	1a5b      	subs	r3, r3, r1
    ed7e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    ed82:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
    ed86:	9502      	str	r5, [sp, #8]
    ed88:	f8cd b004 	str.w	fp, [sp, #4]
    ed8c:	9600      	str	r6, [sp, #0]
    ed8e:	2300      	movs	r3, #0
    ed90:	4642      	mov	r2, r8
    ed92:	a91c      	add	r1, sp, #112	; 0x70
    ed94:	4638      	mov	r0, r7
    ed96:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rin_id);
    ed98:	980c      	ldr	r0, [sp, #48]	; 0x30
    ed9a:	4c37      	ldr	r4, [pc, #220]	; (ee78 <lv_draw_rect+0x25a0>)
    ed9c:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
    ed9e:	980d      	ldr	r0, [sp, #52]	; 0x34
    eda0:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
    eda2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eda4:	4b35      	ldr	r3, [pc, #212]	; (ee7c <lv_draw_rect+0x25a4>)
    eda6:	4798      	blx	r3
    eda8:	f7fe bdb0 	b.w	d90c <lv_draw_rect+0x1034>
        fill_area.x1 = area_outer.x1;
    edac:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    edb0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        fill_area.x2 = area_outer.x2;
    edb4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
    edb8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        fill_area.y1 = disp_area->y1 + draw_area.y1;
    edbc:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
    edc0:	f8b9 3012 	ldrh.w	r3, [r9, #18]
    edc4:	4413      	add	r3, r2
    edc6:	b21b      	sxth	r3, r3
    edc8:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        fill_area.y2 = fill_area.y1;
    edcc:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    edd0:	4614      	mov	r4, r2
    edd2:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    edd6:	429a      	cmp	r2, r3
    edd8:	dcde      	bgt.n	ed98 <lv_draw_rect+0x24c0>
            _lv_memset_ff(mask_buf, draw_area_w);
    edda:	f8df 8090 	ldr.w	r8, [pc, #144]	; ee6c <lv_draw_rect+0x2594>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    edde:	4f24      	ldr	r7, [pc, #144]	; (ee70 <lv_draw_rect+0x2598>)
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    ede0:	4e24      	ldr	r6, [pc, #144]	; (ee74 <lv_draw_rect+0x259c>)
    ede2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    ede6:	462b      	mov	r3, r5
    ede8:	465d      	mov	r5, fp
    edea:	469b      	mov	fp, r3
            _lv_memset_ff(mask_buf, draw_area_w);
    edec:	9908      	ldr	r1, [sp, #32]
    edee:	4650      	mov	r0, sl
    edf0:	47c0      	blx	r8
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
    edf2:	f8b9 2012 	ldrh.w	r2, [r9, #18]
    edf6:	4422      	add	r2, r4
    edf8:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    edfc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
    ee00:	4419      	add	r1, r3
    ee02:	9b07      	ldr	r3, [sp, #28]
    ee04:	b212      	sxth	r2, r2
    ee06:	b209      	sxth	r1, r1
    ee08:	4650      	mov	r0, sl
    ee0a:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
    ee0c:	f8cd b008 	str.w	fp, [sp, #8]
    ee10:	9501      	str	r5, [sp, #4]
    ee12:	9000      	str	r0, [sp, #0]
    ee14:	4653      	mov	r3, sl
    ee16:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    ee1a:	a91c      	add	r1, sp, #112	; 0x70
    ee1c:	9804      	ldr	r0, [sp, #16]
    ee1e:	47b0      	blx	r6
            fill_area.y1++;
    ee20:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    ee24:	3301      	adds	r3, #1
    ee26:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            fill_area.y2++;
    ee2a:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    ee2e:	3301      	adds	r3, #1
    ee30:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
    ee34:	3401      	adds	r4, #1
    ee36:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
    ee3a:	429c      	cmp	r4, r3
    ee3c:	ddd6      	ble.n	edec <lv_draw_rect+0x2514>
    ee3e:	e7ab      	b.n	ed98 <lv_draw_rect+0x24c0>
    _lv_mem_buf_release(mask_line);
    ee40:	980c      	ldr	r0, [sp, #48]	; 0x30
    ee42:	4b0e      	ldr	r3, [pc, #56]	; (ee7c <lv_draw_rect+0x25a4>)
    ee44:	4798      	blx	r3
        for(i = 0; i < size * size; i++) {
    ee46:	fb07 f707 	mul.w	r7, r7, r7
    ee4a:	2f00      	cmp	r7, #0
    ee4c:	f43d aeec 	beq.w	cc28 <lv_draw_rect+0x350>
    ee50:	980a      	ldr	r0, [sp, #40]	; 0x28
    ee52:	4602      	mov	r2, r0
    ee54:	1e41      	subs	r1, r0, #1
    ee56:	eb00 0047 	add.w	r0, r0, r7, lsl #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSACALE_SHIFT);
    ee5a:	f832 3b02 	ldrh.w	r3, [r2], #2
    ee5e:	099b      	lsrs	r3, r3, #6
    ee60:	f801 3f01 	strb.w	r3, [r1, #1]!
        for(i = 0; i < size * size; i++) {
    ee64:	4290      	cmp	r0, r2
    ee66:	d1f8      	bne.n	ee5a <lv_draw_rect+0x2582>
    ee68:	f7fd bede 	b.w	cc28 <lv_draw_rect+0x350>
    ee6c:	00013195 	.word	0x00013195
    ee70:	0000c3c5 	.word	0x0000c3c5
    ee74:	00007cf9 	.word	0x00007cf9
    ee78:	0000c415 	.word	0x0000c415
    ee7c:	00012b19 	.word	0x00012b19
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
    ee80:	9707      	str	r7, [sp, #28]
    ee82:	4638      	mov	r0, r7
    ee84:	4b0b      	ldr	r3, [pc, #44]	; (eeb4 <lv_draw_rect+0x25dc>)
    ee86:	4798      	blx	r3
    ee88:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < size; y++) {
    ee8a:	2f00      	cmp	r7, #0
    ee8c:	ddd8      	ble.n	ee40 <lv_draw_rect+0x2568>
    ee8e:	2301      	movs	r3, #1
    ee90:	930b      	str	r3, [sp, #44]	; 0x2c
    ee92:	f7fd be27 	b.w	cae4 <lv_draw_rect+0x20c>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
    ee96:	2300      	movs	r3, #0
    ee98:	f9ba 2000 	ldrsh.w	r2, [sl]
    ee9c:	9906      	ldr	r1, [sp, #24]
    ee9e:	a829      	add	r0, sp, #164	; 0xa4
    eea0:	4c05      	ldr	r4, [pc, #20]	; (eeb8 <lv_draw_rect+0x25e0>)
    eea2:	47a0      	blx	r4
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
    eea4:	2100      	movs	r1, #0
    eea6:	a829      	add	r0, sp, #164	; 0xa4
    eea8:	4b04      	ldr	r3, [pc, #16]	; (eebc <lv_draw_rect+0x25e4>)
    eeaa:	4798      	blx	r3
    eeac:	4604      	mov	r4, r0
    eeae:	f7ff b91e 	b.w	e0ee <lv_draw_rect+0x1816>
    eeb2:	bf00      	nop
    eeb4:	00012ee5 	.word	0x00012ee5
    eeb8:	0000c5d5 	.word	0x0000c5d5
    eebc:	0000c369 	.word	0x0000c369

0000eec0 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
    eec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eec2:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
    eec4:	f89d 4004 	ldrb.w	r4, [sp, #4]
    eec8:	f36f 0404 	bfc	r4, #0, #5
    eecc:	f88d 4004 	strb.w	r4, [sp, #4]
    eed0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    eed4:	f36f 144a 	bfc	r4, #5, #6
    eed8:	f8ad 4004 	strh.w	r4, [sp, #4]
    eedc:	0a24      	lsrs	r4, r4, #8
    eede:	f36f 04c7 	bfc	r4, #3, #5
    eee2:	f88d 4005 	strb.w	r4, [sp, #5]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    eee6:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
    eee8:	7804      	ldrb	r4, [r0, #0]
    eeea:	f004 041f 	and.w	r4, r4, #31
    eeee:	1f25      	subs	r5, r4, #4
    eef0:	b2ed      	uxtb	r5, r5
    eef2:	2d02      	cmp	r5, #2
    eef4:	d90e      	bls.n	ef14 <lv_img_buf_get_px_color+0x54>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a deafult alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
    eef6:	2c07      	cmp	r4, #7
    eef8:	d028      	beq.n	ef4c <lv_img_buf_get_px_color+0x8c>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
    eefa:	2c08      	cmp	r4, #8
    eefc:	d03b      	beq.n	ef76 <lv_img_buf_get_px_color+0xb6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
    eefe:	2c09      	cmp	r4, #9
    ef00:	d050      	beq.n	efa4 <lv_img_buf_get_px_color+0xe4>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
    ef02:	2c0a      	cmp	r4, #10
    ef04:	d066      	beq.n	efd4 <lv_img_buf_get_px_color+0x114>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    ef06:	3c0b      	subs	r4, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
    ef08:	b2e4      	uxtb	r4, r4
    ef0a:	2c03      	cmp	r4, #3
        p_color = color;
    ef0c:	bf98      	it	ls
    ef0e:	f8ad 3004 	strhls.w	r3, [sp, #4]
    ef12:	e017      	b.n	ef44 <lv_img_buf_get_px_color+0x84>
    ef14:	4614      	mov	r4, r2
    ef16:	460f      	mov	r7, r1
    ef18:	4605      	mov	r5, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
    ef1a:	7800      	ldrb	r0, [r0, #0]
    ef1c:	f000 001f 	and.w	r0, r0, #31
    ef20:	4b32      	ldr	r3, [pc, #200]	; (efec <lv_img_buf_get_px_color+0x12c>)
    ef22:	4798      	blx	r3
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
    ef24:	682b      	ldr	r3, [r5, #0]
    ef26:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ef2a:	fb04 7203 	mla	r2, r4, r3, r7
    ef2e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    ef32:	fb00 f202 	mul.w	r2, r0, r2
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
    ef36:	18b3      	adds	r3, r6, r2
        *d8 = *s8;
    ef38:	5cb2      	ldrb	r2, [r6, r2]
    ef3a:	f88d 2004 	strb.w	r2, [sp, #4]
    ef3e:	785b      	ldrb	r3, [r3, #1]
    ef40:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    return p_color;
}
    ef44:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ef48:	b003      	add	sp, #12
    ef4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    ef4c:	f001 0307 	and.w	r3, r1, #7
    ef50:	f1c3 0407 	rsb	r4, r3, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
    ef54:	6803      	ldr	r3, [r0, #0]
    ef56:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ef5a:	3307      	adds	r3, #7
    ef5c:	10db      	asrs	r3, r3, #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    ef5e:	fb02 6603 	mla	r6, r2, r3, r6
    ef62:	eb06 01e1 	add.w	r1, r6, r1, asr #3
    ef66:	7a0b      	ldrb	r3, [r1, #8]
    ef68:	2201      	movs	r2, #1
    ef6a:	40a2      	lsls	r2, r4
    ef6c:	4013      	ands	r3, r2
    ef6e:	4123      	asrs	r3, r4
    ef70:	f8ad 3004 	strh.w	r3, [sp, #4]
    ef74:	e7e6      	b.n	ef44 <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x3) * 2;
    ef76:	f001 0403 	and.w	r4, r1, #3
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    ef7a:	0064      	lsls	r4, r4, #1
    ef7c:	f1c4 0406 	rsb	r4, r4, #6
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
    ef80:	6803      	ldr	r3, [r0, #0]
    ef82:	f3c3 238a 	ubfx	r3, r3, #10, #11
    ef86:	3303      	adds	r3, #3
    ef88:	109b      	asrs	r3, r3, #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    ef8a:	fb02 6603 	mla	r6, r2, r3, r6
    ef8e:	eb06 01a1 	add.w	r1, r6, r1, asr #2
    ef92:	7c0b      	ldrb	r3, [r1, #16]
    ef94:	2203      	movs	r2, #3
    ef96:	40a2      	lsls	r2, r4
    ef98:	4013      	ands	r3, r2
    ef9a:	fa43 f404 	asr.w	r4, r3, r4
    ef9e:	f8ad 4004 	strh.w	r4, [sp, #4]
    efa2:	e7cf      	b.n	ef44 <lv_img_buf_get_px_color+0x84>
        uint8_t bit = (x & 0x1) * 4;
    efa4:	f001 0401 	and.w	r4, r1, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    efa8:	00a4      	lsls	r4, r4, #2
    efaa:	f1c4 0404 	rsb	r4, r4, #4
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
    efae:	6803      	ldr	r3, [r0, #0]
    efb0:	f3c3 238a 	ubfx	r3, r3, #10, #11
    efb4:	3301      	adds	r3, #1
    efb6:	105b      	asrs	r3, r3, #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    efb8:	fb02 6603 	mla	r6, r2, r3, r6
    efbc:	eb06 0161 	add.w	r1, r6, r1, asr #1
    efc0:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    efc4:	220f      	movs	r2, #15
    efc6:	40a2      	lsls	r2, r4
    efc8:	4013      	ands	r3, r2
    efca:	fa43 f404 	asr.w	r4, r3, r4
    efce:	f8ad 4004 	strh.w	r4, [sp, #4]
    efd2:	e7b7      	b.n	ef44 <lv_img_buf_get_px_color+0x84>
        uint32_t px  = dsc->header.w * y + x;
    efd4:	6803      	ldr	r3, [r0, #0]
    efd6:	f3c3 238a 	ubfx	r3, r3, #10, #11
        p_color.full = buf_u8[px];
    efda:	4431      	add	r1, r6
    efdc:	fb02 1103 	mla	r1, r2, r3, r1
    efe0:	f891 3400 	ldrb.w	r3, [r1, #1024]	; 0x400
    efe4:	f8ad 3004 	strh.w	r3, [sp, #4]
    efe8:	e7ac      	b.n	ef44 <lv_img_buf_get_px_color+0x84>
    efea:	bf00      	nop
    efec:	00009c29 	.word	0x00009c29

0000eff0 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eff2:	b085      	sub	sp, #20
    eff4:	4604      	mov	r4, r0
    eff6:	460d      	mov	r5, r1
    eff8:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
    effa:	6886      	ldr	r6, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
    effc:	7803      	ldrb	r3, [r0, #0]
    effe:	f003 031f 	and.w	r3, r3, #31
    f002:	2b05      	cmp	r3, #5
    f004:	d00a      	beq.n	f01c <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
    f006:	2b0b      	cmp	r3, #11
    f008:	d012      	beq.n	f030 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
    f00a:	2b0c      	cmp	r3, #12
    f00c:	d027      	beq.n	f05e <lv_img_buf_get_px_alpha+0x6e>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
    f00e:	2b0d      	cmp	r3, #13
    f010:	d049      	beq.n	f0a6 <lv_img_buf_get_px_alpha+0xb6>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
    f012:	2b0e      	cmp	r3, #14
    f014:	d064      	beq.n	f0e0 <lv_img_buf_get_px_alpha+0xf0>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
    f016:	20ff      	movs	r0, #255	; 0xff
}
    f018:	b005      	add	sp, #20
    f01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
    f01c:	6802      	ldr	r2, [r0, #0]
    f01e:	f3c2 228a 	ubfx	r2, r2, #10, #11
    f022:	fb07 1502 	mla	r5, r7, r2, r1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    f026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    f02a:	4435      	add	r5, r6
    f02c:	78a8      	ldrb	r0, [r5, #2]
    f02e:	e7f3      	b.n	f018 <lv_img_buf_get_px_alpha+0x28>
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    f030:	f001 0307 	and.w	r3, r1, #7
    f034:	f1c3 0107 	rsb	r1, r3, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
    f038:	6802      	ldr	r2, [r0, #0]
    f03a:	f3c2 228a 	ubfx	r2, r2, #10, #11
    f03e:	3207      	adds	r2, #7
    f040:	10d2      	asrs	r2, r2, #3
    f042:	10ed      	asrs	r5, r5, #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    f044:	fb07 6202 	mla	r2, r7, r2, r6
    f048:	5d53      	ldrb	r3, [r2, r5]
    f04a:	2201      	movs	r2, #1
    f04c:	408a      	lsls	r2, r1
    f04e:	4013      	ands	r3, r2
    f050:	410b      	asrs	r3, r1
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    f052:	f013 0fff 	tst.w	r3, #255	; 0xff
    f056:	bf0c      	ite	eq
    f058:	20ff      	moveq	r0, #255	; 0xff
    f05a:	2000      	movne	r0, #0
    f05c:	e7dc      	b.n	f018 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
    f05e:	2300      	movs	r3, #0
    f060:	f88d 3000 	strb.w	r3, [sp]
    f064:	2355      	movs	r3, #85	; 0x55
    f066:	f88d 3001 	strb.w	r3, [sp, #1]
    f06a:	23aa      	movs	r3, #170	; 0xaa
    f06c:	f88d 3002 	strb.w	r3, [sp, #2]
    f070:	23ff      	movs	r3, #255	; 0xff
    f072:	f88d 3003 	strb.w	r3, [sp, #3]
        uint8_t bit = (x & 0x3) * 2;
    f076:	f001 0303 	and.w	r3, r1, #3
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    f07a:	005b      	lsls	r3, r3, #1
    f07c:	f1c3 0106 	rsb	r1, r3, #6
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
    f080:	6802      	ldr	r2, [r0, #0]
    f082:	f3c2 228a 	ubfx	r2, r2, #10, #11
    f086:	3203      	adds	r2, #3
    f088:	1092      	asrs	r2, r2, #2
    f08a:	10ad      	asrs	r5, r5, #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    f08c:	fb07 6202 	mla	r2, r7, r2, r6
    f090:	5d53      	ldrb	r3, [r2, r5]
    f092:	2203      	movs	r2, #3
    f094:	408a      	lsls	r2, r1
    f096:	4013      	ands	r3, r2
    f098:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    f09a:	aa04      	add	r2, sp, #16
    f09c:	fa52 f383 	uxtab	r3, r2, r3
    f0a0:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    f0a4:	e7b8      	b.n	f018 <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
    f0a6:	4b12      	ldr	r3, [pc, #72]	; (f0f0 <lv_img_buf_get_px_alpha+0x100>)
    f0a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f0aa:	f10d 0e10 	add.w	lr, sp, #16
    f0ae:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
    f0b2:	f005 0301 	and.w	r3, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    f0b6:	009b      	lsls	r3, r3, #2
    f0b8:	f1c3 0104 	rsb	r1, r3, #4
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
    f0bc:	6822      	ldr	r2, [r4, #0]
    f0be:	f3c2 228a 	ubfx	r2, r2, #10, #11
    f0c2:	3201      	adds	r2, #1
    f0c4:	1052      	asrs	r2, r2, #1
    f0c6:	106d      	asrs	r5, r5, #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    f0c8:	fb07 6202 	mla	r2, r7, r2, r6
    f0cc:	5d53      	ldrb	r3, [r2, r5]
    f0ce:	220f      	movs	r2, #15
    f0d0:	408a      	lsls	r2, r1
    f0d2:	4013      	ands	r3, r2
    f0d4:	410b      	asrs	r3, r1
        return opa_table[px_opa];
    f0d6:	fa5e f383 	uxtab	r3, lr, r3
    f0da:	f813 0c10 	ldrb.w	r0, [r3, #-16]
    f0de:	e79b      	b.n	f018 <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
    f0e0:	6802      	ldr	r2, [r0, #0]
    f0e2:	f3c2 228a 	ubfx	r2, r2, #10, #11
        return buf_u8[px];
    f0e6:	fb07 6202 	mla	r2, r7, r2, r6
    f0ea:	5c50      	ldrb	r0, [r2, r1]
    f0ec:	e794      	b.n	f018 <lv_img_buf_get_px_alpha+0x28>
    f0ee:	bf00      	nop
    f0f0:	0001c5f0 	.word	0x0001c5f0

0000f0f4 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to tranform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
    f0f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0f8:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
    f0fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    f0fe:	021b      	lsls	r3, r3, #8
    f100:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
    f102:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    f106:	021b      	lsls	r3, r3, #8
    f108:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
    f10a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
    f10e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f204 <_lv_img_buf_transform_init+0x110>
    f112:	fb88 2300 	smull	r2, r3, r8, r0
    f116:	17c5      	asrs	r5, r0, #31
    f118:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
    f11c:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
    f11e:	f06f 0709 	mvn.w	r7, #9
    f122:	fb07 0705 	mla	r7, r7, r5, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
    f126:	fa1f fa85 	uxth.w	sl, r5
    f12a:	f1ca 0000 	rsb	r0, sl, #0
    f12e:	b200      	sxth	r0, r0
    f130:	f8df 90d4 	ldr.w	r9, [pc, #212]	; f208 <_lv_img_buf_transform_init+0x114>
    f134:	47c8      	blx	r9
    f136:	4606      	mov	r6, r0
    int32_t angle_hight = angle_low + 1;
    f138:	3501      	adds	r5, #1
    int32_t s2 = _lv_trigo_sin(-angle_hight);
    f13a:	b2ad      	uxth	r5, r5
    f13c:	4268      	negs	r0, r5
    f13e:	b200      	sxth	r0, r0
    f140:	47c8      	blx	r9
    f142:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
    f144:	f1ca 005a 	rsb	r0, sl, #90	; 0x5a
    f148:	b200      	sxth	r0, r0
    f14a:	47c8      	blx	r9
    f14c:	4682      	mov	sl, r0
    int32_t c2 = _lv_trigo_sin(-angle_hight + 90);
    f14e:	f1c5 055a 	rsb	r5, r5, #90	; 0x5a
    f152:	b228      	sxth	r0, r5
    f154:	47c8      	blx	r9

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    f156:	f1c7 030a 	rsb	r3, r7, #10
    f15a:	fb07 fb0b 	mul.w	fp, r7, fp
    f15e:	fb03 b606 	mla	r6, r3, r6, fp
    f162:	fb88 2b06 	smull	r2, fp, r8, r6
    f166:	17f6      	asrs	r6, r6, #31
    f168:	ebc6 06ab 	rsb	r6, r6, fp, asr #2
    f16c:	62e6      	str	r6, [r4, #44]	; 0x2c
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    f16e:	fb07 f000 	mul.w	r0, r7, r0
    f172:	fb03 000a 	mla	r0, r3, sl, r0
    f176:	fb88 3800 	smull	r3, r8, r8, r0
    f17a:	17c0      	asrs	r0, r0, #31
    f17c:	ebc0 00a8 	rsb	r0, r0, r8, asr #2
    f180:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
    f182:	7ca0      	ldrb	r0, [r4, #18]
    f184:	4b1d      	ldr	r3, [pc, #116]	; (f1fc <_lv_img_buf_transform_init+0x108>)
    f186:	4798      	blx	r3
    f188:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f18c:	f360 0300 	bfi	r3, r0, #0, #1
    f190:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
    f194:	7ca0      	ldrb	r0, [r4, #18]
    f196:	4b1a      	ldr	r3, [pc, #104]	; (f200 <_lv_img_buf_transform_init+0x10c>)
    f198:	4798      	blx	r3
    f19a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f19e:	f360 0341 	bfi	r3, r0, #1, #1
    f1a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    f1a6:	7ca2      	ldrb	r2, [r4, #18]
    f1a8:	1f13      	subs	r3, r2, #4
    f1aa:	b2db      	uxtb	r3, r3
    f1ac:	2b02      	cmp	r3, #2
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    f1ae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f1b2:	bf94      	ite	ls
    f1b4:	f043 0304 	orrls.w	r3, r3, #4
    }
    else {
        dsc->tmp.native_color = 0;
    f1b8:	f36f 0382 	bfchi	r3, #2, #1
    f1bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
    f1c0:	6823      	ldr	r3, [r4, #0]
    f1c2:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
    f1c4:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
    f1c6:	f003 031f 	and.w	r3, r3, #31
    f1ca:	f362 0304 	bfi	r3, r2, #0, #5
    f1ce:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
    f1d0:	69a3      	ldr	r3, [r4, #24]
    f1d2:	88a2      	ldrh	r2, [r4, #4]
    f1d4:	f362 2394 	bfi	r3, r2, #10, #11
    f1d8:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
    f1da:	0c1b      	lsrs	r3, r3, #16
    f1dc:	88e2      	ldrh	r2, [r4, #6]
    f1de:	f362 134f 	bfi	r3, r2, #5, #11
    f1e2:	8363      	strh	r3, [r4, #26]

    dsc->tmp.zoom_inv = (256 * 256) / dsc->cfg.zoom;
    f1e4:	89e2      	ldrh	r2, [r4, #14]
    f1e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f1ea:	fb93 f3f2 	sdiv	r3, r3, r2
    f1ee:	86e3      	strh	r3, [r4, #54]	; 0x36

    dsc->res.opa = LV_OPA_COVER;
    f1f0:	23ff      	movs	r3, #255	; 0xff
    f1f2:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
    f1f4:	8a23      	ldrh	r3, [r4, #16]
    f1f6:	82a3      	strh	r3, [r4, #20]
    f1f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1fc:	00009c5b 	.word	0x00009c5b
    f200:	00009c6f 	.word	0x00009c6f
    f204:	66666667 	.word	0x66666667
    f208:	0001284d 	.word	0x0001284d

0000f20c <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      lv_point_t * pivot)
{
    f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f210:	b087      	sub	sp, #28
    f212:	9003      	str	r0, [sp, #12]
    f214:	9104      	str	r1, [sp, #16]
    f216:	9205      	str	r2, [sp, #20]
    f218:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
    f21c:	9401      	str	r4, [sp, #4]
    f21e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
#if LV_USE_IMG_TRANSFORM
    int32_t angle_low = angle / 10;
    f222:	4f5e      	ldr	r7, [pc, #376]	; (f39c <_lv_img_buf_get_transformed_area+0x190>)
    f224:	fb87 6003 	smull	r6, r0, r7, r3
    f228:	17dd      	asrs	r5, r3, #31
    f22a:	ebc5 05a0 	rsb	r5, r5, r0, asr #2
    f22e:	b22d      	sxth	r5, r5
    int32_t angle_hight = angle_low + 1;
    f230:	f105 0901 	add.w	r9, r5, #1
    int32_t angle_rem = angle  - (angle_low * 10);
    f234:	f06f 0609 	mvn.w	r6, #9
    f238:	fb06 3605 	mla	r6, r6, r5, r3

    int32_t s1 = _lv_trigo_sin(angle_low);
    f23c:	4628      	mov	r0, r5
    f23e:	f8df 8160 	ldr.w	r8, [pc, #352]	; f3a0 <_lv_img_buf_get_transformed_area+0x194>
    f242:	47c0      	blx	r8
    f244:	4604      	mov	r4, r0
    int32_t s2 = _lv_trigo_sin(angle_hight);
    f246:	fa0f f089 	sxth.w	r0, r9
    f24a:	47c0      	blx	r8
    f24c:	4682      	mov	sl, r0

    int32_t c1 = _lv_trigo_sin(angle_low + 90);
    f24e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
    f252:	b200      	sxth	r0, r0
    f254:	47c0      	blx	r8
    f256:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(angle_hight + 90);
    f258:	f109 005a 	add.w	r0, r9, #90	; 0x5a
    f25c:	b200      	sxth	r0, r0
    f25e:	47c0      	blx	r8

    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
    f260:	f1c6 030a 	rsb	r3, r6, #10
    f264:	fb06 fa0a 	mul.w	sl, r6, sl
    f268:	fb03 a404 	mla	r4, r3, r4, sl
    f26c:	fb87 ea04 	smull	lr, sl, r7, r4
    f270:	17e4      	asrs	r4, r4, #31
    f272:	ebc4 04aa 	rsb	r4, r4, sl, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
    f276:	fb06 f000 	mul.w	r0, r6, r0
    f27a:	fb03 0505 	mla	r5, r3, r5, r0
    f27e:	fb87 3705 	smull	r3, r7, r7, r5
    f282:	17ed      	asrs	r5, r5, #31
    f284:	ebc5 07a7 	rsb	r7, r5, r7, asr #2

    lv_coord_t xt;
    lv_coord_t yt;

    lv_area_t a;
    a.x1 = ((-pivot->x) * zoom) >> 8;
    f288:	f9bb c000 	ldrsh.w	ip, [fp]
    a.y1 = ((-pivot->y) * zoom) >> 8;
    f28c:	f9bb 8002 	ldrsh.w	r8, [fp, #2]
    a.x1 = ((-pivot->x) * zoom) >> 8;
    f290:	f1cc 0300 	rsb	r3, ip, #0
    f294:	9d01      	ldr	r5, [sp, #4]
    f296:	fb05 f303 	mul.w	r3, r5, r3
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    a.y2 = ((h - pivot->y) * zoom) >> 8;

    xt = a.x1;
    yt = a.y1;
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    f29a:	f343 230f 	sbfx	r3, r3, #8, #16
    f29e:	fb03 fa07 	mul.w	sl, r3, r7
    a.y1 = ((-pivot->y) * zoom) >> 8;
    f2a2:	f1c8 0200 	rsb	r2, r8, #0
    f2a6:	fb05 f202 	mul.w	r2, r5, r2
    lt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    f2aa:	f342 220f 	sbfx	r2, r2, #8, #16
    f2ae:	fb02 fe04 	mul.w	lr, r2, r4
    f2b2:	fa1f f68c 	uxth.w	r6, ip
    f2b6:	ebaa 0b0e 	sub.w	fp, sl, lr
    f2ba:	eb06 3beb 	add.w	fp, r6, fp, asr #15
    f2be:	fa0f fb8b 	sxth.w	fp, fp
    lt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    f2c2:	fb03 f304 	mul.w	r3, r3, r4
    f2c6:	fb02 f207 	mul.w	r2, r2, r7
    f2ca:	fa1f f088 	uxth.w	r0, r8
    f2ce:	1899      	adds	r1, r3, r2
    f2d0:	eb00 31e1 	add.w	r1, r0, r1, asr #15
    f2d4:	b209      	sxth	r1, r1
    f2d6:	9102      	str	r1, [sp, #8]
    a.x2 = ((w - pivot->x) * zoom) >> 8;
    f2d8:	9904      	ldr	r1, [sp, #16]
    f2da:	eba1 0c0c 	sub.w	ip, r1, ip
    f2de:	fb05 fc0c 	mul.w	ip, r5, ip

    xt = a.x2;
    yt = a.y1;
    rt.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    f2e2:	f34c 2c0f 	sbfx	ip, ip, #8, #16
    f2e6:	fb0c f907 	mul.w	r9, ip, r7
    f2ea:	eba9 0e0e 	sub.w	lr, r9, lr
    f2ee:	eb06 3eee 	add.w	lr, r6, lr, asr #15
    f2f2:	fa0f fe8e 	sxth.w	lr, lr
    rt.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    f2f6:	fb0c fc04 	mul.w	ip, ip, r4
    f2fa:	4462      	add	r2, ip
    f2fc:	eb00 32e2 	add.w	r2, r0, r2, asr #15
    f300:	b212      	sxth	r2, r2
    a.y2 = ((h - pivot->y) * zoom) >> 8;
    f302:	9905      	ldr	r1, [sp, #20]
    f304:	eba1 0808 	sub.w	r8, r1, r8
    f308:	fb05 f808 	mul.w	r8, r5, r8

    xt = a.x1;
    yt = a.y2;
    lb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    f30c:	f348 280f 	sbfx	r8, r8, #8, #16
    f310:	fb08 f404 	mul.w	r4, r8, r4
    f314:	ebaa 0504 	sub.w	r5, sl, r4
    f318:	eb06 35e5 	add.w	r5, r6, r5, asr #15
    f31c:	b22d      	sxth	r5, r5
    lb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    f31e:	fb08 f707 	mul.w	r7, r8, r7
    f322:	443b      	add	r3, r7
    f324:	eb00 33e3 	add.w	r3, r0, r3, asr #15
    f328:	b21b      	sxth	r3, r3

    xt = a.x2;
    yt = a.y2;
    rb.x = ((cosma * xt - sinma * yt) >> LV_TRIGO_SHIFT) + pivot->x;
    f32a:	eba9 0404 	sub.w	r4, r9, r4
    f32e:	eb06 36e4 	add.w	r6, r6, r4, asr #15
    f332:	b236      	sxth	r6, r6
    rb.y = ((sinma * xt + cosma * yt) >> LV_TRIGO_SHIFT) + pivot->y;
    f334:	44bc      	add	ip, r7
    f336:	eb00 30ec 	add.w	r0, r0, ip, asr #15
    f33a:	b200      	sxth	r0, r0

    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
    f33c:	465c      	mov	r4, fp
    f33e:	45f3      	cmp	fp, lr
    f340:	bfa8      	it	ge
    f342:	4674      	movge	r4, lr
    f344:	42ac      	cmp	r4, r5
    f346:	bfa8      	it	ge
    f348:	462c      	movge	r4, r5
    f34a:	42b4      	cmp	r4, r6
    f34c:	bfa8      	it	ge
    f34e:	4634      	movge	r4, r6
    f350:	9903      	ldr	r1, [sp, #12]
    f352:	460f      	mov	r7, r1
    f354:	800c      	strh	r4, [r1, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
    f356:	45de      	cmp	lr, fp
    f358:	bfb8      	it	lt
    f35a:	46de      	movlt	lr, fp
    f35c:	4575      	cmp	r5, lr
    f35e:	bfb8      	it	lt
    f360:	4675      	movlt	r5, lr
    f362:	42ae      	cmp	r6, r5
    f364:	bfb8      	it	lt
    f366:	462e      	movlt	r6, r5
    f368:	808e      	strh	r6, [r1, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
    f36a:	9902      	ldr	r1, [sp, #8]
    f36c:	460c      	mov	r4, r1
    f36e:	4291      	cmp	r1, r2
    f370:	bfa8      	it	ge
    f372:	4614      	movge	r4, r2
    f374:	429c      	cmp	r4, r3
    f376:	bfa8      	it	ge
    f378:	461c      	movge	r4, r3
    f37a:	4284      	cmp	r4, r0
    f37c:	bfa8      	it	ge
    f37e:	4604      	movge	r4, r0
    f380:	807c      	strh	r4, [r7, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
    f382:	4291      	cmp	r1, r2
    f384:	bfb8      	it	lt
    f386:	4611      	movlt	r1, r2
    f388:	428b      	cmp	r3, r1
    f38a:	bfb8      	it	lt
    f38c:	460b      	movlt	r3, r1
    f38e:	4298      	cmp	r0, r3
    f390:	bfb8      	it	lt
    f392:	4618      	movlt	r0, r3
    f394:	80f8      	strh	r0, [r7, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w;
    res->y2 = h;
#endif
}
    f396:	b007      	add	sp, #28
    f398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f39c:	66666667 	.word	0x66666667
    f3a0:	0001284d 	.word	0x0001284d

0000f3a4 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
    f3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3a8:	b089      	sub	sp, #36	; 0x24
    f3aa:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
    f3ac:	f9b0 5038 	ldrsh.w	r5, [r0, #56]	; 0x38
    f3b0:	b2ea      	uxtb	r2, r5
    int ys_fract = dsc->tmp.ys & 0xff;
    f3b2:	f9b0 603a 	ldrsh.w	r6, [r0, #58]	; 0x3a
    f3b6:	b2f3      	uxtb	r3, r6
    int32_t xn;      /*x neightboor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
    f3b8:	2a6f      	cmp	r2, #111	; 0x6f
    f3ba:	dc74      	bgt.n	f4a6 <_lv_img_buf_transform_anti_alias+0x102>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
    f3bc:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    f3c0:	4249      	negs	r1, r1
    f3c2:	17c9      	asrs	r1, r1, #31
        xr = xs_fract + 0x80;
    f3c4:	3d80      	subs	r5, #128	; 0x80
    f3c6:	b2ed      	uxtb	r5, r5
    }

    int32_t yn;      /*x neightboor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
    f3c8:	2b6f      	cmp	r3, #111	; 0x6f
    f3ca:	dc7e      	bgt.n	f4ca <_lv_img_buf_transform_anti_alias+0x126>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
    f3cc:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    f3d0:	f1cb 0b00 	rsb	fp, fp, #0
    f3d4:	ea4f 7beb 	mov.w	fp, fp, asr #31

        yr = ys_fract + 0x80;
    f3d8:	3e80      	subs	r6, #128	; 0x80
    f3da:	b2f6      	uxtb	r6, r6
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
    f3dc:	f894 9014 	ldrb.w	r9, [r4, #20]
    f3e0:	f009 091f 	and.w	r9, r9, #31
    f3e4:	f8b4 8014 	ldrh.w	r8, [r4, #20]
    f3e8:	f3c8 1845 	ubfx	r8, r8, #5, #6
    f3ec:	7d67      	ldrb	r7, [r4, #21]
    f3ee:	08ff      	lsrs	r7, r7, #3
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
    f3f0:	7da3      	ldrb	r3, [r4, #22]
    f3f2:	9300      	str	r3, [sp, #0]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
    f3f4:	f894 c034 	ldrb.w	ip, [r4, #52]	; 0x34
    f3f8:	f01c 0f04 	tst.w	ip, #4
    f3fc:	d07b      	beq.n	f4f6 <_lv_img_buf_transform_anti_alias+0x152>
    const uint8_t * src_u8 = dsc->cfg.src;
    f3fe:	6823      	ldr	r3, [r4, #0]
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
    f400:	6c20      	ldr	r0, [r4, #64]	; 0x40
    f402:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
    f406:	fb0e 0101 	mla	r1, lr, r1, r0
    f40a:	185a      	adds	r2, r3, r1
    f40c:	f813 a001 	ldrb.w	sl, [r3, r1]
    f410:	f88d a01c 	strb.w	sl, [sp, #28]
    f414:	7852      	ldrb	r2, [r2, #1]
    f416:	f88d 201d 	strb.w	r2, [sp, #29]
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
    f41a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    f41e:	fb0e f202 	mul.w	r2, lr, r2
    f422:	fb0b fb02 	mul.w	fp, fp, r2
    f426:	4458      	add	r0, fp
    f428:	181a      	adds	r2, r3, r0
    f42a:	f813 a000 	ldrb.w	sl, [r3, r0]
    f42e:	f88d a018 	strb.w	sl, [sp, #24]
    f432:	7852      	ldrb	r2, [r2, #1]
    f434:	f88d 2019 	strb.w	r2, [sp, #25]
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
    f438:	eb01 020b 	add.w	r2, r1, fp
    f43c:	eb03 0a02 	add.w	sl, r3, r2
    f440:	f813 b002 	ldrb.w	fp, [r3, r2]
    f444:	f88d b014 	strb.w	fp, [sp, #20]
    f448:	f89a a001 	ldrb.w	sl, [sl, #1]
    f44c:	f88d a015 	strb.w	sl, [sp, #21]
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
    f450:	f01c 0f02 	tst.w	ip, #2
    f454:	f000 8081 	beq.w	f55a <_lv_img_buf_transform_anti_alias+0x1b6>
    f458:	f10e 3eff 	add.w	lr, lr, #4294967295
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    f45c:	4473      	add	r3, lr
    f45e:	f813 b001 	ldrb.w	fp, [r3, r1]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
    f462:	f813 a000 	ldrb.w	sl, [r3, r0]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
    f466:	5c98      	ldrb	r0, [r3, r2]
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
    f468:	f1c5 03ff 	rsb	r3, r5, #255	; 0xff
    f46c:	fb03 f10b 	mul.w	r1, r3, fp
    f470:	9a00      	ldr	r2, [sp, #0]
    f472:	fb05 1102 	mla	r1, r5, r2, r1
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
    f476:	fb03 f300 	mul.w	r3, r3, r0
    f47a:	fb05 330a 	mla	r3, r5, sl, r3
    f47e:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
    f482:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    f486:	f3c1 2107 	ubfx	r1, r1, #8, #8
    f48a:	fb06 fe01 	mul.w	lr, r6, r1
    f48e:	fb02 e203 	mla	r2, r2, r3, lr
    f492:	1212      	asrs	r2, r2, #8
    f494:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    f496:	2905      	cmp	r1, #5
    f498:	f200 80dc 	bhi.w	f654 <_lv_img_buf_transform_anti_alias+0x2b0>
    f49c:	2b05      	cmp	r3, #5
    f49e:	f240 817d 	bls.w	f79c <_lv_img_buf_transform_anti_alias+0x3f8>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
    f4a2:	2600      	movs	r6, #0
    f4a4:	e0d9      	b.n	f65a <_lv_img_buf_transform_anti_alias+0x2b6>
    else if(xs_fract > 0x90) {
    f4a6:	2a90      	cmp	r2, #144	; 0x90
    f4a8:	dd0c      	ble.n	f4c4 <_lv_img_buf_transform_anti_alias+0x120>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
    f4aa:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    f4ae:	3101      	adds	r1, #1
    f4b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    f4b4:	4291      	cmp	r1, r2
    f4b6:	bfac      	ite	ge
    f4b8:	2100      	movge	r1, #0
    f4ba:	2101      	movlt	r1, #1
        xr = (0xFF - xs_fract) + 0x80;
    f4bc:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
    f4c0:	b2ed      	uxtb	r5, r5
    f4c2:	e781      	b.n	f3c8 <_lv_img_buf_transform_anti_alias+0x24>
        xr = 0xFF;
    f4c4:	25ff      	movs	r5, #255	; 0xff
        xn = 0;
    f4c6:	2100      	movs	r1, #0
    f4c8:	e77e      	b.n	f3c8 <_lv_img_buf_transform_anti_alias+0x24>
    else if(ys_fract > 0x90) {
    f4ca:	2b90      	cmp	r3, #144	; 0x90
    f4cc:	dd0f      	ble.n	f4ee <_lv_img_buf_transform_anti_alias+0x14a>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
    f4ce:	f9b4 b03e 	ldrsh.w	fp, [r4, #62]	; 0x3e
    f4d2:	f10b 0b01 	add.w	fp, fp, #1
    f4d6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
    f4da:	4593      	cmp	fp, r2
    f4dc:	bfac      	ite	ge
    f4de:	f04f 0b00 	movge.w	fp, #0
    f4e2:	f04f 0b01 	movlt.w	fp, #1
        yr = (0xFF - ys_fract) + 0x80;
    f4e6:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
    f4ea:	b2f6      	uxtb	r6, r6
    f4ec:	e776      	b.n	f3dc <_lv_img_buf_transform_anti_alias+0x38>
        yr = 0xFF;
    f4ee:	26ff      	movs	r6, #255	; 0xff
        yn = 0;
    f4f0:	f04f 0b00 	mov.w	fp, #0
    f4f4:	e772      	b.n	f3dc <_lv_img_buf_transform_anti_alias+0x38>
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
    f4f6:	f104 0318 	add.w	r3, r4, #24
    f4fa:	4618      	mov	r0, r3
    f4fc:	b28b      	uxth	r3, r1
    f4fe:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    f500:	9302      	str	r3, [sp, #8]
    f502:	4419      	add	r1, r3
    f504:	8a23      	ldrh	r3, [r4, #16]
    f506:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    f50a:	b209      	sxth	r1, r1
    f50c:	9001      	str	r0, [sp, #4]
    f50e:	f8df a294 	ldr.w	sl, [pc, #660]	; f7a4 <_lv_img_buf_transform_anti_alias+0x400>
    f512:	47d0      	blx	sl
    f514:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
    f518:	fa1f f18b 	uxth.w	r1, fp
    f51c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    f51e:	9103      	str	r1, [sp, #12]
    f520:	440a      	add	r2, r1
    f522:	8a23      	ldrh	r3, [r4, #16]
    f524:	b212      	sxth	r2, r2
    f526:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    f52a:	f8dd b004 	ldr.w	fp, [sp, #4]
    f52e:	4658      	mov	r0, fp
    f530:	47d0      	blx	sl
    f532:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
    f536:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    f538:	9903      	ldr	r1, [sp, #12]
    f53a:	440a      	add	r2, r1
    f53c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    f53e:	9b02      	ldr	r3, [sp, #8]
    f540:	4419      	add	r1, r3
    f542:	8a23      	ldrh	r3, [r4, #16]
    f544:	b212      	sxth	r2, r2
    f546:	b209      	sxth	r1, r1
    f548:	4658      	mov	r0, fp
    f54a:	47d0      	blx	sl
    f54c:	f8ad 0014 	strh.w	r0, [sp, #20]
        if(dsc->tmp.has_alpha) {
    f550:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f554:	f013 0f02 	tst.w	r3, #2
    f558:	d152      	bne.n	f600 <_lv_img_buf_transform_anti_alias+0x25c>
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
    f55a:	23ff      	movs	r3, #255	; 0xff
    f55c:	75a3      	strb	r3, [r4, #22]
        xr0 = xr;
    f55e:	462b      	mov	r3, r5
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
    f560:	2b00      	cmp	r3, #0
    f562:	f040 808b 	bne.w	f67c <_lv_img_buf_transform_anti_alias+0x2d8>
    f566:	f89d 901c 	ldrb.w	r9, [sp, #28]
    f56a:	f009 091f 	and.w	r9, r9, #31
    f56e:	f8bd 801c 	ldrh.w	r8, [sp, #28]
    f572:	f3c8 1845 	ubfx	r8, r8, #5, #6
    f576:	f89d 701d 	ldrb.w	r7, [sp, #29]
    f57a:	08ff      	lsrs	r7, r7, #3
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
    f57c:	2d00      	cmp	r5, #0
    f57e:	f040 80ac 	bne.w	f6da <_lv_img_buf_transform_anti_alias+0x336>
    f582:	f89d 5014 	ldrb.w	r5, [sp, #20]
    f586:	f005 051f 	and.w	r5, r5, #31
    f58a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    f58e:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f592:	f89d 1015 	ldrb.w	r1, [sp, #21]
    f596:	08c9      	lsrs	r1, r1, #3
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    f598:	2e00      	cmp	r6, #0
    f59a:	f000 80e3 	beq.w	f764 <_lv_img_buf_transform_anti_alias+0x3c0>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    f59e:	2eff      	cmp	r6, #255	; 0xff
    f5a0:	f000 80ee 	beq.w	f780 <_lv_img_buf_transform_anti_alias+0x3dc>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    f5a4:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    f5a8:	fb02 f505 	mul.w	r5, r2, r5
    f5ac:	fb06 5509 	mla	r5, r6, r9, r5
    f5b0:	eb05 2905 	add.w	r9, r5, r5, lsl #8
    f5b4:	eb05 15c9 	add.w	r5, r5, r9, lsl #7
    f5b8:	0ded      	lsrs	r5, r5, #23
    else dsc->res.color = lv_color_mix(c0, c1, yr);
    f5ba:	7d20      	ldrb	r0, [r4, #20]
    f5bc:	f365 0004 	bfi	r0, r5, #0, #5
    f5c0:	7520      	strb	r0, [r4, #20]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    f5c2:	fb02 f303 	mul.w	r3, r2, r3
    f5c6:	fb06 3808 	mla	r8, r6, r8, r3
    f5ca:	eb08 2308 	add.w	r3, r8, r8, lsl #8
    f5ce:	eb08 18c3 	add.w	r8, r8, r3, lsl #7
    f5d2:	ea4f 58d8 	mov.w	r8, r8, lsr #23
    f5d6:	8aa3      	ldrh	r3, [r4, #20]
    f5d8:	f368 134a 	bfi	r3, r8, #5, #6
    f5dc:	82a3      	strh	r3, [r4, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    f5de:	fb02 f101 	mul.w	r1, r2, r1
    f5e2:	fb06 1607 	mla	r6, r6, r7, r1
    f5e6:	eb06 2706 	add.w	r7, r6, r6, lsl #8
    f5ea:	eb06 16c7 	add.w	r6, r6, r7, lsl #7
    f5ee:	0df6      	lsrs	r6, r6, #23
    f5f0:	0a1b      	lsrs	r3, r3, #8
    f5f2:	f366 03c7 	bfi	r3, r6, #3, #5
    f5f6:	7563      	strb	r3, [r4, #21]

    return true;
    f5f8:	2001      	movs	r0, #1
}
    f5fa:	b009      	add	sp, #36	; 0x24
    f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
    f600:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    f602:	9b02      	ldr	r3, [sp, #8]
    f604:	4419      	add	r1, r3
    f606:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
    f60a:	b209      	sxth	r1, r1
    f60c:	f8dd a004 	ldr.w	sl, [sp, #4]
    f610:	4650      	mov	r0, sl
    f612:	4b63      	ldr	r3, [pc, #396]	; (f7a0 <_lv_img_buf_transform_anti_alias+0x3fc>)
    f614:	4798      	blx	r3
    f616:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
    f618:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    f61a:	9903      	ldr	r1, [sp, #12]
    f61c:	440a      	add	r2, r1
    f61e:	b212      	sxth	r2, r2
    f620:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
    f624:	f8cd a004 	str.w	sl, [sp, #4]
    f628:	4650      	mov	r0, sl
    f62a:	4b5d      	ldr	r3, [pc, #372]	; (f7a0 <_lv_img_buf_transform_anti_alias+0x3fc>)
    f62c:	4798      	blx	r3
    f62e:	4682      	mov	sl, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
    f630:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    f632:	9903      	ldr	r1, [sp, #12]
    f634:	440a      	add	r2, r1
    f636:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    f638:	9b02      	ldr	r3, [sp, #8]
    f63a:	4419      	add	r1, r3
    f63c:	b212      	sxth	r2, r2
    f63e:	b209      	sxth	r1, r1
    f640:	9801      	ldr	r0, [sp, #4]
    f642:	4b57      	ldr	r3, [pc, #348]	; (f7a0 <_lv_img_buf_transform_anti_alias+0x3fc>)
    f644:	4798      	blx	r3
    if(dsc->tmp.has_alpha) {
    f646:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f64a:	f013 0f02 	tst.w	r3, #2
    f64e:	f47f af0b 	bne.w	f468 <_lv_img_buf_transform_anti_alias+0xc4>
    f652:	e782      	b.n	f55a <_lv_img_buf_transform_anti_alias+0x1b6>
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
    f654:	2b05      	cmp	r3, #5
    f656:	bf98      	it	ls
    f658:	26ff      	movls	r6, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
    f65a:	9b00      	ldr	r3, [sp, #0]
    f65c:	2b05      	cmp	r3, #5
    f65e:	bf8c      	ite	hi
    f660:	462b      	movhi	r3, r5
    f662:	2300      	movls	r3, #0
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
    f664:	f1bb 0f05 	cmp.w	fp, #5
    f668:	bf98      	it	ls
    f66a:	23ff      	movls	r3, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
    f66c:	f1ba 0f05 	cmp.w	sl, #5
    f670:	bf98      	it	ls
    f672:	2500      	movls	r5, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
    f674:	2805      	cmp	r0, #5
    f676:	bf98      	it	ls
    f678:	25ff      	movls	r5, #255	; 0xff
    f67a:	e771      	b.n	f560 <_lv_img_buf_transform_anti_alias+0x1bc>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    f67c:	2bff      	cmp	r3, #255	; 0xff
    f67e:	f43f af7d 	beq.w	f57c <_lv_img_buf_transform_anti_alias+0x1d8>
    f682:	f1c3 01ff 	rsb	r1, r3, #255	; 0xff
    f686:	f89d 201d 	ldrb.w	r2, [sp, #29]
    f68a:	08d2      	lsrs	r2, r2, #3
    f68c:	fb03 f707 	mul.w	r7, r3, r7
    f690:	fb01 7702 	mla	r7, r1, r2, r7
    f694:	eb07 2207 	add.w	r2, r7, r7, lsl #8
    f698:	eb07 17c2 	add.w	r7, r7, r2, lsl #7
    f69c:	f3c7 57c4 	ubfx	r7, r7, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    f6a0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    f6a4:	f3c2 1245 	ubfx	r2, r2, #5, #6
    f6a8:	fb03 f808 	mul.w	r8, r3, r8
    f6ac:	fb01 8802 	mla	r8, r1, r2, r8
    f6b0:	eb08 2208 	add.w	r2, r8, r8, lsl #8
    f6b4:	eb08 18c2 	add.w	r8, r8, r2, lsl #7
    f6b8:	f3c8 58c5 	ubfx	r8, r8, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    f6bc:	f89d 201c 	ldrb.w	r2, [sp, #28]
    f6c0:	f002 021f 	and.w	r2, r2, #31
    f6c4:	fb03 f909 	mul.w	r9, r3, r9
    f6c8:	fb01 9902 	mla	r9, r1, r2, r9
    f6cc:	eb09 2309 	add.w	r3, r9, r9, lsl #8
    f6d0:	eb09 19c3 	add.w	r9, r9, r3, lsl #7
    f6d4:	f3c9 59c4 	ubfx	r9, r9, #23, #5
    f6d8:	e750      	b.n	f57c <_lv_img_buf_transform_anti_alias+0x1d8>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    f6da:	2dff      	cmp	r5, #255	; 0xff
    f6dc:	d036      	beq.n	f74c <_lv_img_buf_transform_anti_alias+0x3a8>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
    f6de:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
    f6e2:	f89d 1019 	ldrb.w	r1, [sp, #25]
    f6e6:	08c9      	lsrs	r1, r1, #3
    f6e8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f6ec:	08db      	lsrs	r3, r3, #3
    f6ee:	fb00 f303 	mul.w	r3, r0, r3
    f6f2:	fb05 3101 	mla	r1, r5, r1, r3
    f6f6:	eb01 2301 	add.w	r3, r1, r1, lsl #8
    f6fa:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    f6fe:	f3c1 51c4 	ubfx	r1, r1, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
    f702:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f706:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f70a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    f70e:	f3c2 1245 	ubfx	r2, r2, #5, #6
    f712:	fb00 f202 	mul.w	r2, r0, r2
    f716:	fb05 2303 	mla	r3, r5, r3, r2
    f71a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
    f71e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    f722:	f3c3 53c5 	ubfx	r3, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
    f726:	f89d 2018 	ldrb.w	r2, [sp, #24]
    f72a:	f002 021f 	and.w	r2, r2, #31
    f72e:	f89d e014 	ldrb.w	lr, [sp, #20]
    f732:	f00e 0e1f 	and.w	lr, lr, #31
    f736:	fb00 f00e 	mul.w	r0, r0, lr
    f73a:	fb05 0502 	mla	r5, r5, r2, r0
    f73e:	eb05 2205 	add.w	r2, r5, r5, lsl #8
    f742:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
    f746:	f3c5 55c4 	ubfx	r5, r5, #23, #5
    f74a:	e725      	b.n	f598 <_lv_img_buf_transform_anti_alias+0x1f4>
    f74c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    f750:	f005 051f 	and.w	r5, r5, #31
    f754:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    f758:	f3c3 1345 	ubfx	r3, r3, #5, #6
    f75c:	f89d 1019 	ldrb.w	r1, [sp, #25]
    f760:	08c9      	lsrs	r1, r1, #3
    f762:	e719      	b.n	f598 <_lv_img_buf_transform_anti_alias+0x1f4>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
    f764:	7d22      	ldrb	r2, [r4, #20]
    f766:	f365 0204 	bfi	r2, r5, #0, #5
    f76a:	7522      	strb	r2, [r4, #20]
    f76c:	8aa2      	ldrh	r2, [r4, #20]
    f76e:	f363 124a 	bfi	r2, r3, #5, #6
    f772:	82a2      	strh	r2, [r4, #20]
    f774:	0a12      	lsrs	r2, r2, #8
    f776:	f361 02c7 	bfi	r2, r1, #3, #5
    f77a:	7562      	strb	r2, [r4, #21]
    return true;
    f77c:	2001      	movs	r0, #1
    f77e:	e73c      	b.n	f5fa <_lv_img_buf_transform_anti_alias+0x256>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
    f780:	7d23      	ldrb	r3, [r4, #20]
    f782:	f369 0304 	bfi	r3, r9, #0, #5
    f786:	7523      	strb	r3, [r4, #20]
    f788:	8aa3      	ldrh	r3, [r4, #20]
    f78a:	f368 134a 	bfi	r3, r8, #5, #6
    f78e:	82a3      	strh	r3, [r4, #20]
    f790:	0a1b      	lsrs	r3, r3, #8
    f792:	f367 03c7 	bfi	r3, r7, #3, #5
    f796:	7563      	strb	r3, [r4, #21]
    return true;
    f798:	2001      	movs	r0, #1
    f79a:	e72e      	b.n	f5fa <_lv_img_buf_transform_anti_alias+0x256>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
    f79c:	2000      	movs	r0, #0
    f79e:	e72c      	b.n	f5fa <_lv_img_buf_transform_anti_alias+0x256>
    f7a0:	0000eff1 	.word	0x0000eff1
    f7a4:	0000eec1 	.word	0x0000eec1

0000f7a8 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param style style of the image
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7ac:	b083      	sub	sp, #12
    f7ae:	4688      	mov	r8, r1
    if(entry_cnt == 0) {
    f7b0:	4b5d      	ldr	r3, [pc, #372]	; (f928 <_lv_img_cache_open+0x180>)
    f7b2:	8819      	ldrh	r1, [r3, #0]
    f7b4:	b1e1      	cbz	r1, f7f0 <_lv_img_cache_open+0x48>
    f7b6:	4607      	mov	r7, r0
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    f7b8:	4b5c      	ldr	r3, [pc, #368]	; (f92c <_lv_img_cache_open+0x184>)
    f7ba:	681e      	ldr	r6, [r3, #0]
    f7bc:	4633      	mov	r3, r6
    f7be:	3901      	subs	r1, #1
    f7c0:	b289      	uxth	r1, r1
    f7c2:	3101      	adds	r1, #1
    f7c4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    f7c8:	eb06 0181 	add.w	r1, r6, r1, lsl #2

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
    f7cc:	4858      	ldr	r0, [pc, #352]	; (f930 <_lv_img_cache_open+0x188>)
    f7ce:	6a1a      	ldr	r2, [r3, #32]
    f7d0:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
    f7d2:	bfa4      	itt	ge
    f7d4:	f102 32ff 	addge.w	r2, r2, #4294967295
    f7d8:	621a      	strge	r2, [r3, #32]
    f7da:	3324      	adds	r3, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
    f7dc:	428b      	cmp	r3, r1
    f7de:	d1f6      	bne.n	f7ce <_lv_img_cache_open+0x26>
    f7e0:	2400      	movs	r4, #0

    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;
    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    f7e2:	f8df 9180 	ldr.w	r9, [pc, #384]	; f964 <_lv_img_cache_open+0x1bc>
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
        }
        else if(src_type == LV_IMG_SRC_FILE) {
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    f7e6:	f8df b180 	ldr.w	fp, [pc, #384]	; f968 <_lv_img_cache_open+0x1c0>
    for(i = 0; i < entry_cnt; i++) {
    f7ea:	f8df a13c 	ldr.w	sl, [pc, #316]	; f928 <_lv_img_cache_open+0x180>
    f7ee:	e011      	b.n	f814 <_lv_img_cache_open+0x6c>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
    f7f0:	4b50      	ldr	r3, [pc, #320]	; (f934 <_lv_img_cache_open+0x18c>)
    f7f2:	9300      	str	r3, [sp, #0]
    f7f4:	4b50      	ldr	r3, [pc, #320]	; (f938 <_lv_img_cache_open+0x190>)
    f7f6:	2244      	movs	r2, #68	; 0x44
    f7f8:	4950      	ldr	r1, [pc, #320]	; (f93c <_lv_img_cache_open+0x194>)
    f7fa:	2002      	movs	r0, #2
    f7fc:	4c50      	ldr	r4, [pc, #320]	; (f940 <_lv_img_cache_open+0x198>)
    f7fe:	47a0      	blx	r4
        return NULL;
    f800:	2500      	movs	r5, #0
    f802:	e025      	b.n	f850 <_lv_img_cache_open+0xa8>
        else if(src_type == LV_IMG_SRC_FILE) {
    f804:	2801      	cmp	r0, #1
    f806:	d027      	beq.n	f858 <_lv_img_cache_open+0xb0>
    for(i = 0; i < entry_cnt; i++) {
    f808:	3401      	adds	r4, #1
    f80a:	b2a4      	uxth	r4, r4
    f80c:	f8ba 3000 	ldrh.w	r3, [sl]
    f810:	42a3      	cmp	r3, r4
    f812:	d92a      	bls.n	f86a <_lv_img_cache_open+0xc2>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
    f814:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    f818:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    f81c:	6868      	ldr	r0, [r5, #4]
    f81e:	47c8      	blx	r9
        if(src_type == LV_IMG_SRC_VARIABLE) {
    f820:	2800      	cmp	r0, #0
    f822:	d1ef      	bne.n	f804 <_lv_img_cache_open+0x5c>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
    f824:	686b      	ldr	r3, [r5, #4]
    f826:	42bb      	cmp	r3, r7
    f828:	d1ee      	bne.n	f808 <_lv_img_cache_open+0x60>
    f82a:	8928      	ldrh	r0, [r5, #8]
    f82c:	fa1f f388 	uxth.w	r3, r8
    f830:	4298      	cmp	r0, r3
    f832:	bf14      	ite	ne
    f834:	2000      	movne	r0, #0
    f836:	2001      	moveq	r0, #1
        }

        if(match) {
    f838:	2800      	cmp	r0, #0
    f83a:	d0e5      	beq.n	f808 <_lv_img_cache_open+0x60>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    f83c:	6a2b      	ldr	r3, [r5, #32]
    f83e:	696a      	ldr	r2, [r5, #20]
    f840:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
    f842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    f846:	dd0e      	ble.n	f866 <_lv_img_cache_open+0xbe>
    f848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f84c:	622b      	str	r3, [r5, #32]
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src == NULL) {
    f84e:	b165      	cbz	r5, f86a <_lv_img_cache_open+0xc2>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
    f850:	4628      	mov	r0, r5
    f852:	b003      	add	sp, #12
    f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
    f858:	4639      	mov	r1, r7
    f85a:	6868      	ldr	r0, [r5, #4]
    f85c:	47d8      	blx	fp
    f85e:	fab0 f080 	clz	r0, r0
    f862:	0940      	lsrs	r0, r0, #5
    f864:	e7e8      	b.n	f838 <_lv_img_cache_open+0x90>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
    f866:	622b      	str	r3, [r5, #32]
    f868:	e7f1      	b.n	f84e <_lv_img_cache_open+0xa6>
        for(i = 1; i < entry_cnt; i++) {
    f86a:	4b2f      	ldr	r3, [pc, #188]	; (f928 <_lv_img_cache_open+0x180>)
    f86c:	881a      	ldrh	r2, [r3, #0]
    f86e:	2a01      	cmp	r2, #1
    f870:	d937      	bls.n	f8e2 <_lv_img_cache_open+0x13a>
    f872:	f106 0324 	add.w	r3, r6, #36	; 0x24
    f876:	3a02      	subs	r2, #2
    f878:	b292      	uxth	r2, r2
    f87a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    f87e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    f882:	3248      	adds	r2, #72	; 0x48
    f884:	4635      	mov	r5, r6
            if(cache[i].life < cached_src->life) {
    f886:	6a18      	ldr	r0, [r3, #32]
    f888:	6a29      	ldr	r1, [r5, #32]
                cached_src = &cache[i];
    f88a:	4288      	cmp	r0, r1
    f88c:	bfb8      	it	lt
    f88e:	461d      	movlt	r5, r3
    f890:	3324      	adds	r3, #36	; 0x24
        for(i = 1; i < entry_cnt; i++) {
    f892:	4293      	cmp	r3, r2
    f894:	d1f7      	bne.n	f886 <_lv_img_cache_open+0xde>
        if(cached_src->dec_dsc.src) {
    f896:	686b      	ldr	r3, [r5, #4]
    f898:	b32b      	cbz	r3, f8e6 <_lv_img_cache_open+0x13e>
            lv_img_decoder_close(&cached_src->dec_dsc);
    f89a:	4628      	mov	r0, r5
    f89c:	4b29      	ldr	r3, [pc, #164]	; (f944 <_lv_img_cache_open+0x19c>)
    f89e:	4798      	blx	r3
            LV_LOG_INFO("image draw: cache miss, close and reuse an entry");
    f8a0:	4b29      	ldr	r3, [pc, #164]	; (f948 <_lv_img_cache_open+0x1a0>)
    f8a2:	9300      	str	r3, [sp, #0]
    f8a4:	4b24      	ldr	r3, [pc, #144]	; (f938 <_lv_img_cache_open+0x190>)
    f8a6:	2277      	movs	r2, #119	; 0x77
    f8a8:	4924      	ldr	r1, [pc, #144]	; (f93c <_lv_img_cache_open+0x194>)
    f8aa:	2001      	movs	r0, #1
    f8ac:	4c24      	ldr	r4, [pc, #144]	; (f940 <_lv_img_cache_open+0x198>)
    f8ae:	47a0      	blx	r4
        t_start                          = lv_tick_get();
    f8b0:	4b26      	ldr	r3, [pc, #152]	; (f94c <_lv_img_cache_open+0x1a4>)
    f8b2:	4798      	blx	r3
    f8b4:	4604      	mov	r4, r0
        cached_src->dec_dsc.time_to_open = 0;
    f8b6:	2300      	movs	r3, #0
    f8b8:	616b      	str	r3, [r5, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
    f8ba:	4642      	mov	r2, r8
    f8bc:	4639      	mov	r1, r7
    f8be:	4628      	mov	r0, r5
    f8c0:	4b23      	ldr	r3, [pc, #140]	; (f950 <_lv_img_cache_open+0x1a8>)
    f8c2:	4798      	blx	r3
        if(open_res == LV_RES_INV) {
    f8c4:	b1c0      	cbz	r0, f8f8 <_lv_img_cache_open+0x150>
        cached_src->life = 0;
    f8c6:	2300      	movs	r3, #0
    f8c8:	622b      	str	r3, [r5, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
    f8ca:	696b      	ldr	r3, [r5, #20]
    f8cc:	2b00      	cmp	r3, #0
    f8ce:	d1bf      	bne.n	f850 <_lv_img_cache_open+0xa8>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    f8d0:	4620      	mov	r0, r4
    f8d2:	4b20      	ldr	r3, [pc, #128]	; (f954 <_lv_img_cache_open+0x1ac>)
    f8d4:	4798      	blx	r3
    f8d6:	6168      	str	r0, [r5, #20]
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    f8d8:	2800      	cmp	r0, #0
    f8da:	d1b9      	bne.n	f850 <_lv_img_cache_open+0xa8>
    f8dc:	2301      	movs	r3, #1
    f8de:	616b      	str	r3, [r5, #20]
    f8e0:	e7b6      	b.n	f850 <_lv_img_cache_open+0xa8>
        for(i = 1; i < entry_cnt; i++) {
    f8e2:	4635      	mov	r5, r6
    f8e4:	e7d7      	b.n	f896 <_lv_img_cache_open+0xee>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    f8e6:	4b1c      	ldr	r3, [pc, #112]	; (f958 <_lv_img_cache_open+0x1b0>)
    f8e8:	9300      	str	r3, [sp, #0]
    f8ea:	4b13      	ldr	r3, [pc, #76]	; (f938 <_lv_img_cache_open+0x190>)
    f8ec:	227a      	movs	r2, #122	; 0x7a
    f8ee:	4913      	ldr	r1, [pc, #76]	; (f93c <_lv_img_cache_open+0x194>)
    f8f0:	2001      	movs	r0, #1
    f8f2:	4c13      	ldr	r4, [pc, #76]	; (f940 <_lv_img_cache_open+0x198>)
    f8f4:	47a0      	blx	r4
    f8f6:	e7db      	b.n	f8b0 <_lv_img_cache_open+0x108>
            LV_LOG_WARN("Image draw cannot open the image resource");
    f8f8:	4b18      	ldr	r3, [pc, #96]	; (f95c <_lv_img_cache_open+0x1b4>)
    f8fa:	9300      	str	r3, [sp, #0]
    f8fc:	4b0e      	ldr	r3, [pc, #56]	; (f938 <_lv_img_cache_open+0x190>)
    f8fe:	2283      	movs	r2, #131	; 0x83
    f900:	490e      	ldr	r1, [pc, #56]	; (f93c <_lv_img_cache_open+0x194>)
    f902:	2002      	movs	r0, #2
    f904:	4c0e      	ldr	r4, [pc, #56]	; (f940 <_lv_img_cache_open+0x198>)
    f906:	47a0      	blx	r4
            lv_img_decoder_close(&cached_src->dec_dsc);
    f908:	4628      	mov	r0, r5
    f90a:	4b0e      	ldr	r3, [pc, #56]	; (f944 <_lv_img_cache_open+0x19c>)
    f90c:	4798      	blx	r3
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f90e:	2120      	movs	r1, #32
    f910:	4628      	mov	r0, r5
    f912:	4c13      	ldr	r4, [pc, #76]	; (f960 <_lv_img_cache_open+0x1b8>)
    f914:	47a0      	blx	r4
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
    f916:	2124      	movs	r1, #36	; 0x24
    f918:	4628      	mov	r0, r5
    f91a:	47a0      	blx	r4
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
    f91c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f920:	622b      	str	r3, [r5, #32]
            return NULL;
    f922:	2500      	movs	r5, #0
    f924:	e794      	b.n	f850 <_lv_img_cache_open+0xa8>
    f926:	bf00      	nop
    f928:	20002b58 	.word	0x20002b58
    f92c:	20006d74 	.word	0x20006d74
    f930:	80000002 	.word	0x80000002
    f934:	0001c674 	.word	0x0001c674
    f938:	0001c618 	.word	0x0001c618
    f93c:	0001c644 	.word	0x0001c644
    f940:	00012805 	.word	0x00012805
    f944:	000104dd 	.word	0x000104dd
    f948:	0001c69c 	.word	0x0001c69c
    f94c:	00011601 	.word	0x00011601
    f950:	000103f1 	.word	0x000103f1
    f954:	00011619 	.word	0x00011619
    f958:	0001c6d0 	.word	0x0001c6d0
    f95c:	0001c704 	.word	0x0001c704
    f960:	000130df 	.word	0x000130df
    f964:	00009f11 	.word	0x00009f11
    f968:	0001af2b 	.word	0x0001af2b

0000f96c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
    f96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
    f970:	4b14      	ldr	r3, [pc, #80]	; (f9c4 <lv_img_cache_invalidate_src+0x58>)
    f972:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
    f974:	4b14      	ldr	r3, [pc, #80]	; (f9c8 <lv_img_cache_invalidate_src+0x5c>)
    f976:	881b      	ldrh	r3, [r3, #0]
    f978:	b30b      	cbz	r3, f9be <lv_img_cache_invalidate_src+0x52>
    f97a:	4606      	mov	r6, r0
    f97c:	2400      	movs	r4, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
                lv_img_decoder_close(&cache[i].dec_dsc);
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f97e:	f8df 904c 	ldr.w	r9, [pc, #76]	; f9cc <lv_img_cache_invalidate_src+0x60>
                lv_img_decoder_close(&cache[i].dec_dsc);
    f982:	f8df a04c 	ldr.w	sl, [pc, #76]	; f9d0 <lv_img_cache_invalidate_src+0x64>
    for(i = 0; i < entry_cnt; i++) {
    f986:	f8df 8040 	ldr.w	r8, [pc, #64]	; f9c8 <lv_img_cache_invalidate_src+0x5c>
    f98a:	e00e      	b.n	f9aa <lv_img_cache_invalidate_src+0x3e>
            if(cache[i].dec_dsc.src != NULL) {
    f98c:	b10b      	cbz	r3, f992 <lv_img_cache_invalidate_src+0x26>
                lv_img_decoder_close(&cache[i].dec_dsc);
    f98e:	4628      	mov	r0, r5
    f990:	47d0      	blx	sl
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    f992:	2120      	movs	r1, #32
    f994:	4628      	mov	r0, r5
    f996:	47c8      	blx	r9
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
    f998:	2124      	movs	r1, #36	; 0x24
    f99a:	4628      	mov	r0, r5
    f99c:	47c8      	blx	r9
    for(i = 0; i < entry_cnt; i++) {
    f99e:	3401      	adds	r4, #1
    f9a0:	b2a4      	uxth	r4, r4
    f9a2:	f8b8 3000 	ldrh.w	r3, [r8]
    f9a6:	42a3      	cmp	r3, r4
    f9a8:	d909      	bls.n	f9be <lv_img_cache_invalidate_src+0x52>
        if(cache[i].dec_dsc.src == src || src == NULL) {
    f9aa:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    f9ae:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    f9b2:	686b      	ldr	r3, [r5, #4]
    f9b4:	42b3      	cmp	r3, r6
    f9b6:	d0e9      	beq.n	f98c <lv_img_cache_invalidate_src+0x20>
    f9b8:	2e00      	cmp	r6, #0
    f9ba:	d1f0      	bne.n	f99e <lv_img_cache_invalidate_src+0x32>
    f9bc:	e7e6      	b.n	f98c <lv_img_cache_invalidate_src+0x20>
    f9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f9c2:	bf00      	nop
    f9c4:	20006d74 	.word	0x20006d74
    f9c8:	20002b58 	.word	0x20002b58
    f9cc:	000130df 	.word	0x000130df
    f9d0:	000104dd 	.word	0x000104dd

0000f9d4 <lv_img_cache_set_size>:
{
    f9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9d8:	b082      	sub	sp, #8
    f9da:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
    f9dc:	4b21      	ldr	r3, [pc, #132]	; (fa64 <lv_img_cache_set_size+0x90>)
    f9de:	681b      	ldr	r3, [r3, #0]
    f9e0:	b133      	cbz	r3, f9f0 <lv_img_cache_set_size+0x1c>
        lv_img_cache_invalidate_src(NULL);
    f9e2:	2000      	movs	r0, #0
    f9e4:	4b20      	ldr	r3, [pc, #128]	; (fa68 <lv_img_cache_set_size+0x94>)
    f9e6:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
    f9e8:	4b1e      	ldr	r3, [pc, #120]	; (fa64 <lv_img_cache_set_size+0x90>)
    f9ea:	6818      	ldr	r0, [r3, #0]
    f9ec:	4b1f      	ldr	r3, [pc, #124]	; (fa6c <lv_img_cache_set_size+0x98>)
    f9ee:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
    f9f0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    f9f4:	0080      	lsls	r0, r0, #2
    f9f6:	4b1e      	ldr	r3, [pc, #120]	; (fa70 <lv_img_cache_set_size+0x9c>)
    f9f8:	4798      	blx	r3
    f9fa:	4b1a      	ldr	r3, [pc, #104]	; (fa64 <lv_img_cache_set_size+0x90>)
    f9fc:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    f9fe:	4b1d      	ldr	r3, [pc, #116]	; (fa74 <lv_img_cache_set_size+0xa0>)
    fa00:	4798      	blx	r3
    fa02:	b1e8      	cbz	r0, fa40 <lv_img_cache_set_size+0x6c>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
    fa04:	4b17      	ldr	r3, [pc, #92]	; (fa64 <lv_img_cache_set_size+0x90>)
    fa06:	681b      	ldr	r3, [r3, #0]
    fa08:	b343      	cbz	r3, fa5c <lv_img_cache_set_size+0x88>
    entry_cnt = new_entry_cnt;
    fa0a:	4b1b      	ldr	r3, [pc, #108]	; (fa78 <lv_img_cache_set_size+0xa4>)
    fa0c:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
    fa0e:	b1a4      	cbz	r4, fa3a <lv_img_cache_set_size+0x66>
    fa10:	2400      	movs	r4, #0
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    fa12:	4f14      	ldr	r7, [pc, #80]	; (fa64 <lv_img_cache_set_size+0x90>)
    fa14:	4e19      	ldr	r6, [pc, #100]	; (fa7c <lv_img_cache_set_size+0xa8>)
    for(i = 0; i < entry_cnt; i++) {
    fa16:	4698      	mov	r8, r3
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
    fa18:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
    fa1c:	00ad      	lsls	r5, r5, #2
    fa1e:	6838      	ldr	r0, [r7, #0]
    fa20:	2120      	movs	r1, #32
    fa22:	4428      	add	r0, r5
    fa24:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
    fa26:	6838      	ldr	r0, [r7, #0]
    fa28:	2124      	movs	r1, #36	; 0x24
    fa2a:	4428      	add	r0, r5
    fa2c:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
    fa2e:	3401      	adds	r4, #1
    fa30:	b2a4      	uxth	r4, r4
    fa32:	f8b8 3000 	ldrh.w	r3, [r8]
    fa36:	42a3      	cmp	r3, r4
    fa38:	d8ee      	bhi.n	fa18 <lv_img_cache_set_size+0x44>
}
    fa3a:	b002      	add	sp, #8
    fa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
    fa40:	4b0f      	ldr	r3, [pc, #60]	; (fa80 <lv_img_cache_set_size+0xac>)
    fa42:	9300      	str	r3, [sp, #0]
    fa44:	22a8      	movs	r2, #168	; 0xa8
    fa46:	490f      	ldr	r1, [pc, #60]	; (fa84 <lv_img_cache_set_size+0xb0>)
    fa48:	2003      	movs	r0, #3
    fa4a:	4c0f      	ldr	r4, [pc, #60]	; (fa88 <lv_img_cache_set_size+0xb4>)
    fa4c:	47a0      	blx	r4
    fa4e:	4b05      	ldr	r3, [pc, #20]	; (fa64 <lv_img_cache_set_size+0x90>)
    fa50:	681a      	ldr	r2, [r3, #0]
    fa52:	2300      	movs	r3, #0
    fa54:	480d      	ldr	r0, [pc, #52]	; (fa8c <lv_img_cache_set_size+0xb8>)
    fa56:	490e      	ldr	r1, [pc, #56]	; (fa90 <lv_img_cache_set_size+0xbc>)
    fa58:	4788      	blx	r1
    fa5a:	e7fe      	b.n	fa5a <lv_img_cache_set_size+0x86>
        entry_cnt = 0;
    fa5c:	2200      	movs	r2, #0
    fa5e:	4b06      	ldr	r3, [pc, #24]	; (fa78 <lv_img_cache_set_size+0xa4>)
    fa60:	801a      	strh	r2, [r3, #0]
        return;
    fa62:	e7ea      	b.n	fa3a <lv_img_cache_set_size+0x66>
    fa64:	20006d74 	.word	0x20006d74
    fa68:	0000f96d 	.word	0x0000f96d
    fa6c:	00012a6d 	.word	0x00012a6d
    fa70:	00012985 	.word	0x00012985
    fa74:	0000298d 	.word	0x0000298d
    fa78:	20002b58 	.word	0x20002b58
    fa7c:	000130df 	.word	0x000130df
    fa80:	0001c62c 	.word	0x0001c62c
    fa84:	0001c644 	.word	0x0001c644
    fa88:	00012805 	.word	0x00012805
    fa8c:	0001b4bc 	.word	0x0001b4bc
    fa90:	00002995 	.word	0x00002995

0000fa94 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
    fa94:	b530      	push	{r4, r5, lr}
    fa96:	b087      	sub	sp, #28
    fa98:	460c      	mov	r4, r1
    fa9a:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
    fa9c:	4608      	mov	r0, r1
    fa9e:	4b33      	ldr	r3, [pc, #204]	; (fb6c <lv_img_decoder_built_in_info+0xd8>)
    faa0:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
    faa2:	b9d8      	cbnz	r0, fadc <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
    faa4:	7823      	ldrb	r3, [r4, #0]
    faa6:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    faaa:	3b04      	subs	r3, #4
    faac:	b2db      	uxtb	r3, r3
    faae:	2b0a      	cmp	r3, #10
    fab0:	d859      	bhi.n	fb66 <lv_img_decoder_built_in_info+0xd2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
    fab2:	6823      	ldr	r3, [r4, #0]
    fab4:	f3c3 238a 	ubfx	r3, r3, #10, #11
    fab8:	682a      	ldr	r2, [r5, #0]
    faba:	f363 2294 	bfi	r2, r3, #10, #11
    fabe:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
    fac0:	8863      	ldrh	r3, [r4, #2]
    fac2:	f3c3 134a 	ubfx	r3, r3, #5, #11
    fac6:	886a      	ldrh	r2, [r5, #2]
    fac8:	f363 124f 	bfi	r2, r3, #5, #11
    facc:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
    face:	7822      	ldrb	r2, [r4, #0]
    fad0:	782b      	ldrb	r3, [r5, #0]
    fad2:	f362 0304 	bfi	r3, r2, #0, #5
    fad6:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
    fad8:	2001      	movs	r0, #1
    fada:	e00d      	b.n	faf8 <lv_img_decoder_built_in_info+0x64>
    else if(src_type == LV_IMG_SRC_FILE) {
    fadc:	2801      	cmp	r0, #1
    fade:	d00d      	beq.n	fafc <lv_img_decoder_built_in_info+0x68>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
    fae0:	2802      	cmp	r0, #2
    fae2:	d032      	beq.n	fb4a <lv_img_decoder_built_in_info+0xb6>
        LV_LOG_WARN("Image get info found unknown src type");
    fae4:	4b22      	ldr	r3, [pc, #136]	; (fb70 <lv_img_decoder_built_in_info+0xdc>)
    fae6:	9300      	str	r3, [sp, #0]
    fae8:	4b22      	ldr	r3, [pc, #136]	; (fb74 <lv_img_decoder_built_in_info+0xe0>)
    faea:	f44f 729a 	mov.w	r2, #308	; 0x134
    faee:	4922      	ldr	r1, [pc, #136]	; (fb78 <lv_img_decoder_built_in_info+0xe4>)
    faf0:	2002      	movs	r0, #2
    faf2:	4c22      	ldr	r4, [pc, #136]	; (fb7c <lv_img_decoder_built_in_info+0xe8>)
    faf4:	47a0      	blx	r4
        return LV_RES_INV;
    faf6:	2000      	movs	r0, #0
}
    faf8:	b007      	add	sp, #28
    fafa:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
    fafc:	2202      	movs	r2, #2
    fafe:	4621      	mov	r1, r4
    fb00:	a804      	add	r0, sp, #16
    fb02:	4b1f      	ldr	r3, [pc, #124]	; (fb80 <lv_img_decoder_built_in_info+0xec>)
    fb04:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
    fb06:	b138      	cbz	r0, fb18 <lv_img_decoder_built_in_info+0x84>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    fb08:	782b      	ldrb	r3, [r5, #0]
    fb0a:	331c      	adds	r3, #28
    fb0c:	f003 031f 	and.w	r3, r3, #31
    fb10:	2b0a      	cmp	r3, #10
    fb12:	d818      	bhi.n	fb46 <lv_img_decoder_built_in_info+0xb2>
    return LV_RES_OK;
    fb14:	2001      	movs	r0, #1
    fb16:	e7ef      	b.n	faf8 <lv_img_decoder_built_in_info+0x64>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
    fb18:	ab03      	add	r3, sp, #12
    fb1a:	2204      	movs	r2, #4
    fb1c:	4629      	mov	r1, r5
    fb1e:	a804      	add	r0, sp, #16
    fb20:	4c18      	ldr	r4, [pc, #96]	; (fb84 <lv_img_decoder_built_in_info+0xf0>)
    fb22:	47a0      	blx	r4
    fb24:	4604      	mov	r4, r0
            lv_fs_close(&file);
    fb26:	a804      	add	r0, sp, #16
    fb28:	4b17      	ldr	r3, [pc, #92]	; (fb88 <lv_img_decoder_built_in_info+0xf4>)
    fb2a:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
    fb2c:	b914      	cbnz	r4, fb34 <lv_img_decoder_built_in_info+0xa0>
    fb2e:	9b03      	ldr	r3, [sp, #12]
    fb30:	2b04      	cmp	r3, #4
    fb32:	d0e9      	beq.n	fb08 <lv_img_decoder_built_in_info+0x74>
                LV_LOG_WARN("Image get info get read file header");
    fb34:	4b15      	ldr	r3, [pc, #84]	; (fb8c <lv_img_decoder_built_in_info+0xf8>)
    fb36:	9300      	str	r3, [sp, #0]
    fb38:	4b0e      	ldr	r3, [pc, #56]	; (fb74 <lv_img_decoder_built_in_info+0xe0>)
    fb3a:	f240 1221 	movw	r2, #289	; 0x121
    fb3e:	490e      	ldr	r1, [pc, #56]	; (fb78 <lv_img_decoder_built_in_info+0xe4>)
    fb40:	2002      	movs	r0, #2
    fb42:	4c0e      	ldr	r4, [pc, #56]	; (fb7c <lv_img_decoder_built_in_info+0xe8>)
    fb44:	47a0      	blx	r4
                return LV_RES_INV;
    fb46:	2000      	movs	r0, #0
    fb48:	e7d6      	b.n	faf8 <lv_img_decoder_built_in_info+0x64>
        header->w = 1;
    fb4a:	682b      	ldr	r3, [r5, #0]
    fb4c:	2001      	movs	r0, #1
    fb4e:	f360 2394 	bfi	r3, r0, #10, #11
    fb52:	602b      	str	r3, [r5, #0]
        header->h = 1;
    fb54:	0c1a      	lsrs	r2, r3, #16
    fb56:	f360 124f 	bfi	r2, r0, #5, #11
    fb5a:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
    fb5c:	220b      	movs	r2, #11
    fb5e:	f362 0304 	bfi	r3, r2, #0, #5
    fb62:	702b      	strb	r3, [r5, #0]
    fb64:	e7c8      	b.n	faf8 <lv_img_decoder_built_in_info+0x64>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
    fb66:	2000      	movs	r0, #0
    fb68:	e7c6      	b.n	faf8 <lv_img_decoder_built_in_info+0x64>
    fb6a:	bf00      	nop
    fb6c:	00009f11 	.word	0x00009f11
    fb70:	0001c850 	.word	0x0001c850
    fb74:	0001c730 	.word	0x0001c730
    fb78:	0001c7fc 	.word	0x0001c7fc
    fb7c:	00012805 	.word	0x00012805
    fb80:	000122f5 	.word	0x000122f5
    fb84:	00012265 	.word	0x00012265
    fb88:	00012235 	.word	0x00012235
    fb8c:	0001c82c 	.word	0x0001c82c

0000fb90 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
    fb90:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    fb92:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
    fb94:	b1a4      	cbz	r4, fbc0 <lv_img_decoder_built_in_close+0x30>
    fb96:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
    fb98:	6820      	ldr	r0, [r4, #0]
    fb9a:	b120      	cbz	r0, fba6 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
    fb9c:	4b09      	ldr	r3, [pc, #36]	; (fbc4 <lv_img_decoder_built_in_close+0x34>)
    fb9e:	4798      	blx	r3
            lv_mem_free(user_data->f);
    fba0:	6820      	ldr	r0, [r4, #0]
    fba2:	4b09      	ldr	r3, [pc, #36]	; (fbc8 <lv_img_decoder_built_in_close+0x38>)
    fba4:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
    fba6:	6860      	ldr	r0, [r4, #4]
    fba8:	b108      	cbz	r0, fbae <lv_img_decoder_built_in_close+0x1e>
    fbaa:	4b07      	ldr	r3, [pc, #28]	; (fbc8 <lv_img_decoder_built_in_close+0x38>)
    fbac:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
    fbae:	68a0      	ldr	r0, [r4, #8]
    fbb0:	b108      	cbz	r0, fbb6 <lv_img_decoder_built_in_close+0x26>
    fbb2:	4b05      	ldr	r3, [pc, #20]	; (fbc8 <lv_img_decoder_built_in_close+0x38>)
    fbb4:	4798      	blx	r3

        lv_mem_free(user_data);
    fbb6:	4620      	mov	r0, r4
    fbb8:	4b03      	ldr	r3, [pc, #12]	; (fbc8 <lv_img_decoder_built_in_close+0x38>)
    fbba:	4798      	blx	r3

        dsc->user_data = NULL;
    fbbc:	2300      	movs	r3, #0
    fbbe:	61eb      	str	r3, [r5, #28]
    fbc0:	bd38      	pop	{r3, r4, r5, pc}
    fbc2:	bf00      	nop
    fbc4:	00012235 	.word	0x00012235
    fbc8:	00012a6d 	.word	0x00012a6d

0000fbcc <lv_img_decoder_built_in_open>:
{
    fbcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fbd0:	b085      	sub	sp, #20
    fbd2:	4605      	mov	r5, r0
    fbd4:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
    fbd6:	7a8b      	ldrb	r3, [r1, #10]
    fbd8:	2b01      	cmp	r3, #1
    fbda:	d016      	beq.n	fc0a <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    fbdc:	2b00      	cmp	r3, #0
    fbde:	f040 81aa 	bne.w	ff36 <lv_img_decoder_built_in_open+0x36a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
    fbe2:	684b      	ldr	r3, [r1, #4]
    fbe4:	689b      	ldr	r3, [r3, #8]
    fbe6:	2b00      	cmp	r3, #0
    fbe8:	f000 81a3 	beq.w	ff32 <lv_img_decoder_built_in_open+0x366>
    lv_img_cf_t cf = dsc->header.cf;
    fbec:	7b08      	ldrb	r0, [r1, #12]
    fbee:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    fbf2:	1f03      	subs	r3, r0, #4
    fbf4:	b2db      	uxtb	r3, r3
    fbf6:	2b02      	cmp	r3, #2
    fbf8:	f200 8085 	bhi.w	fd06 <lv_img_decoder_built_in_open+0x13a>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
    fbfc:	6863      	ldr	r3, [r4, #4]
    fbfe:	689b      	ldr	r3, [r3, #8]
    fc00:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    fc02:	2001      	movs	r0, #1
}
    fc04:	b005      	add	sp, #20
    fc06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    fc0a:	6848      	ldr	r0, [r1, #4]
    fc0c:	4b96      	ldr	r3, [pc, #600]	; (fe68 <lv_img_decoder_built_in_open+0x29c>)
    fc0e:	4798      	blx	r3
    fc10:	4996      	ldr	r1, [pc, #600]	; (fe6c <lv_img_decoder_built_in_open+0x2a0>)
    fc12:	4b97      	ldr	r3, [pc, #604]	; (fe70 <lv_img_decoder_built_in_open+0x2a4>)
    fc14:	4798      	blx	r3
    fc16:	2800      	cmp	r0, #0
    fc18:	d12a      	bne.n	fc70 <lv_img_decoder_built_in_open+0xa4>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
    fc1a:	2202      	movs	r2, #2
    fc1c:	6861      	ldr	r1, [r4, #4]
    fc1e:	a802      	add	r0, sp, #8
    fc20:	4b94      	ldr	r3, [pc, #592]	; (fe74 <lv_img_decoder_built_in_open+0x2a8>)
    fc22:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
    fc24:	b9d8      	cbnz	r0, fc5e <lv_img_decoder_built_in_open+0x92>
        if(dsc->user_data == NULL) {
    fc26:	69e3      	ldr	r3, [r4, #28]
    fc28:	b323      	cbz	r3, fc74 <lv_img_decoder_built_in_open+0xa8>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    fc2a:	69e6      	ldr	r6, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
    fc2c:	2008      	movs	r0, #8
    fc2e:	4b92      	ldr	r3, [pc, #584]	; (fe78 <lv_img_decoder_built_in_open+0x2ac>)
    fc30:	4798      	blx	r3
    fc32:	6030      	str	r0, [r6, #0]
        LV_ASSERT_MEM(user_data->f);
    fc34:	4b91      	ldr	r3, [pc, #580]	; (fe7c <lv_img_decoder_built_in_open+0x2b0>)
    fc36:	4798      	blx	r3
    fc38:	2800      	cmp	r0, #0
    fc3a:	d040      	beq.n	fcbe <lv_img_decoder_built_in_open+0xf2>
        if(user_data->f == NULL) {
    fc3c:	6833      	ldr	r3, [r6, #0]
    fc3e:	2b00      	cmp	r3, #0
    fc40:	d14b      	bne.n	fcda <lv_img_decoder_built_in_open+0x10e>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    fc42:	4b8f      	ldr	r3, [pc, #572]	; (fe80 <lv_img_decoder_built_in_open+0x2b4>)
    fc44:	9300      	str	r3, [sp, #0]
    fc46:	4b8f      	ldr	r3, [pc, #572]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fc48:	f240 125f 	movw	r2, #351	; 0x15f
    fc4c:	498e      	ldr	r1, [pc, #568]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fc4e:	2003      	movs	r0, #3
    fc50:	4e8e      	ldr	r6, [pc, #568]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fc52:	47b0      	blx	r6
            lv_img_decoder_built_in_close(decoder, dsc);
    fc54:	4621      	mov	r1, r4
    fc56:	4628      	mov	r0, r5
    fc58:	4b8d      	ldr	r3, [pc, #564]	; (fe90 <lv_img_decoder_built_in_open+0x2c4>)
    fc5a:	4798      	blx	r3
            return LV_RES_INV;
    fc5c:	e008      	b.n	fc70 <lv_img_decoder_built_in_open+0xa4>
            LV_LOG_WARN("Built-in image decoder can't open the file");
    fc5e:	4b8d      	ldr	r3, [pc, #564]	; (fe94 <lv_img_decoder_built_in_open+0x2c8>)
    fc60:	9300      	str	r3, [sp, #0]
    fc62:	4b88      	ldr	r3, [pc, #544]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fc64:	f44f 72a6 	mov.w	r2, #332	; 0x14c
    fc68:	4987      	ldr	r1, [pc, #540]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fc6a:	2002      	movs	r0, #2
    fc6c:	4c87      	ldr	r4, [pc, #540]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fc6e:	47a0      	blx	r4
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
    fc70:	2000      	movs	r0, #0
    fc72:	e7c7      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    fc74:	200c      	movs	r0, #12
    fc76:	4b80      	ldr	r3, [pc, #512]	; (fe78 <lv_img_decoder_built_in_open+0x2ac>)
    fc78:	4798      	blx	r3
    fc7a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    fc7c:	4b7f      	ldr	r3, [pc, #508]	; (fe7c <lv_img_decoder_built_in_open+0x2b0>)
    fc7e:	4798      	blx	r3
    fc80:	b968      	cbnz	r0, fc9e <lv_img_decoder_built_in_open+0xd2>
    fc82:	4b80      	ldr	r3, [pc, #512]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fc84:	9300      	str	r3, [sp, #0]
    fc86:	f240 1253 	movw	r2, #339	; 0x153
    fc8a:	497f      	ldr	r1, [pc, #508]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fc8c:	2003      	movs	r0, #3
    fc8e:	4d7f      	ldr	r5, [pc, #508]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fc90:	47a8      	blx	r5
    fc92:	69e2      	ldr	r2, [r4, #28]
    fc94:	2300      	movs	r3, #0
    fc96:	4880      	ldr	r0, [pc, #512]	; (fe98 <lv_img_decoder_built_in_open+0x2cc>)
    fc98:	4980      	ldr	r1, [pc, #512]	; (fe9c <lv_img_decoder_built_in_open+0x2d0>)
    fc9a:	4788      	blx	r1
    fc9c:	e7fe      	b.n	fc9c <lv_img_decoder_built_in_open+0xd0>
            if(dsc->user_data == NULL) {
    fc9e:	69e0      	ldr	r0, [r4, #28]
    fca0:	b948      	cbnz	r0, fcb6 <lv_img_decoder_built_in_open+0xea>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    fca2:	4b77      	ldr	r3, [pc, #476]	; (fe80 <lv_img_decoder_built_in_open+0x2b4>)
    fca4:	9300      	str	r3, [sp, #0]
    fca6:	4b77      	ldr	r3, [pc, #476]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fca8:	f240 1255 	movw	r2, #341	; 0x155
    fcac:	4976      	ldr	r1, [pc, #472]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fcae:	2003      	movs	r0, #3
    fcb0:	4c76      	ldr	r4, [pc, #472]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fcb2:	47a0      	blx	r4
                return LV_RES_INV;
    fcb4:	e7dc      	b.n	fc70 <lv_img_decoder_built_in_open+0xa4>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    fcb6:	210c      	movs	r1, #12
    fcb8:	4b79      	ldr	r3, [pc, #484]	; (fea0 <lv_img_decoder_built_in_open+0x2d4>)
    fcba:	4798      	blx	r3
    fcbc:	e7b5      	b.n	fc2a <lv_img_decoder_built_in_open+0x5e>
        LV_ASSERT_MEM(user_data->f);
    fcbe:	4b71      	ldr	r3, [pc, #452]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fcc0:	9300      	str	r3, [sp, #0]
    fcc2:	f240 125d 	movw	r2, #349	; 0x15d
    fcc6:	4970      	ldr	r1, [pc, #448]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fcc8:	2003      	movs	r0, #3
    fcca:	4c70      	ldr	r4, [pc, #448]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fccc:	47a0      	blx	r4
    fcce:	6832      	ldr	r2, [r6, #0]
    fcd0:	2300      	movs	r3, #0
    fcd2:	4871      	ldr	r0, [pc, #452]	; (fe98 <lv_img_decoder_built_in_open+0x2cc>)
    fcd4:	4971      	ldr	r1, [pc, #452]	; (fe9c <lv_img_decoder_built_in_open+0x2d0>)
    fcd6:	4788      	blx	r1
    fcd8:	e7fe      	b.n	fcd8 <lv_img_decoder_built_in_open+0x10c>
    fcda:	f10d 0207 	add.w	r2, sp, #7
    fcde:	f103 0108 	add.w	r1, r3, #8
    fce2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    fce6:	f803 0b01 	strb.w	r0, [r3], #1
    while(len) {
    fcea:	428b      	cmp	r3, r1
    fcec:	d1f9      	bne.n	fce2 <lv_img_decoder_built_in_open+0x116>
    lv_img_cf_t cf = dsc->header.cf;
    fcee:	7b20      	ldrb	r0, [r4, #12]
    fcf0:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    fcf4:	1f03      	subs	r3, r0, #4
    fcf6:	b2db      	uxtb	r3, r3
    fcf8:	2b02      	cmp	r3, #2
    fcfa:	d804      	bhi.n	fd06 <lv_img_decoder_built_in_open+0x13a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
    fcfc:	7aa3      	ldrb	r3, [r4, #10]
    fcfe:	2b00      	cmp	r3, #0
    fd00:	f43f af7c 	beq.w	fbfc <lv_img_decoder_built_in_open+0x30>
    fd04:	e11f      	b.n	ff46 <lv_img_decoder_built_in_open+0x37a>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
    fd06:	1fc3      	subs	r3, r0, #7
    fd08:	b2db      	uxtb	r3, r3
    fd0a:	2b03      	cmp	r3, #3
    fd0c:	d909      	bls.n	fd22 <lv_img_decoder_built_in_open+0x156>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
    fd0e:	f1a0 030b 	sub.w	r3, r0, #11
    fd12:	b2db      	uxtb	r3, r3
    fd14:	2b03      	cmp	r3, #3
    fd16:	f200 80fd 	bhi.w	ff14 <lv_img_decoder_built_in_open+0x348>
        dsc->img_data = NULL;
    fd1a:	2300      	movs	r3, #0
    fd1c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
    fd1e:	2001      	movs	r0, #1
    fd20:	e770      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
    fd22:	4b60      	ldr	r3, [pc, #384]	; (fea4 <lv_img_decoder_built_in_open+0x2d8>)
    fd24:	4798      	blx	r3
    fd26:	4607      	mov	r7, r0
        if(dsc->user_data == NULL) {
    fd28:	69e3      	ldr	r3, [r4, #28]
    fd2a:	b1bb      	cbz	r3, fd5c <lv_img_decoder_built_in_open+0x190>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    fd2c:	69e6      	ldr	r6, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
    fd2e:	2002      	movs	r0, #2
    fd30:	40b8      	lsls	r0, r7
    fd32:	4b51      	ldr	r3, [pc, #324]	; (fe78 <lv_img_decoder_built_in_open+0x2ac>)
    fd34:	4798      	blx	r3
    fd36:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MEM(user_data->palette);
    fd38:	4b50      	ldr	r3, [pc, #320]	; (fe7c <lv_img_decoder_built_in_open+0x2b0>)
    fd3a:	4798      	blx	r3
    fd3c:	2800      	cmp	r0, #0
    fd3e:	d137      	bne.n	fdb0 <lv_img_decoder_built_in_open+0x1e4>
    fd40:	4b50      	ldr	r3, [pc, #320]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fd42:	9300      	str	r3, [sp, #0]
    fd44:	f240 1297 	movw	r2, #407	; 0x197
    fd48:	494f      	ldr	r1, [pc, #316]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fd4a:	2003      	movs	r0, #3
    fd4c:	4c4f      	ldr	r4, [pc, #316]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fd4e:	47a0      	blx	r4
    fd50:	6872      	ldr	r2, [r6, #4]
    fd52:	2300      	movs	r3, #0
    fd54:	4850      	ldr	r0, [pc, #320]	; (fe98 <lv_img_decoder_built_in_open+0x2cc>)
    fd56:	4951      	ldr	r1, [pc, #324]	; (fe9c <lv_img_decoder_built_in_open+0x2d0>)
    fd58:	4788      	blx	r1
    fd5a:	e7fe      	b.n	fd5a <lv_img_decoder_built_in_open+0x18e>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
    fd5c:	200c      	movs	r0, #12
    fd5e:	4b46      	ldr	r3, [pc, #280]	; (fe78 <lv_img_decoder_built_in_open+0x2ac>)
    fd60:	4798      	blx	r3
    fd62:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
    fd64:	4b45      	ldr	r3, [pc, #276]	; (fe7c <lv_img_decoder_built_in_open+0x2b0>)
    fd66:	4798      	blx	r3
    fd68:	b968      	cbnz	r0, fd86 <lv_img_decoder_built_in_open+0x1ba>
    fd6a:	4b46      	ldr	r3, [pc, #280]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fd6c:	9300      	str	r3, [sp, #0]
    fd6e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    fd72:	4945      	ldr	r1, [pc, #276]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fd74:	2003      	movs	r0, #3
    fd76:	4d45      	ldr	r5, [pc, #276]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fd78:	47a8      	blx	r5
    fd7a:	69e2      	ldr	r2, [r4, #28]
    fd7c:	2300      	movs	r3, #0
    fd7e:	4846      	ldr	r0, [pc, #280]	; (fe98 <lv_img_decoder_built_in_open+0x2cc>)
    fd80:	4946      	ldr	r1, [pc, #280]	; (fe9c <lv_img_decoder_built_in_open+0x2d0>)
    fd82:	4788      	blx	r1
    fd84:	e7fe      	b.n	fd84 <lv_img_decoder_built_in_open+0x1b8>
            if(dsc->user_data == NULL) {
    fd86:	69e0      	ldr	r0, [r4, #28]
    fd88:	b970      	cbnz	r0, fda8 <lv_img_decoder_built_in_open+0x1dc>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    fd8a:	4b3d      	ldr	r3, [pc, #244]	; (fe80 <lv_img_decoder_built_in_open+0x2b4>)
    fd8c:	9300      	str	r3, [sp, #0]
    fd8e:	4b3d      	ldr	r3, [pc, #244]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fd90:	f44f 72c7 	mov.w	r2, #398	; 0x18e
    fd94:	493c      	ldr	r1, [pc, #240]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fd96:	2003      	movs	r0, #3
    fd98:	4e3c      	ldr	r6, [pc, #240]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fd9a:	47b0      	blx	r6
                lv_img_decoder_built_in_close(decoder, dsc);
    fd9c:	4621      	mov	r1, r4
    fd9e:	4628      	mov	r0, r5
    fda0:	4b3b      	ldr	r3, [pc, #236]	; (fe90 <lv_img_decoder_built_in_open+0x2c4>)
    fda2:	4798      	blx	r3
                return LV_RES_INV;
    fda4:	2000      	movs	r0, #0
    fda6:	e72d      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
    fda8:	210c      	movs	r1, #12
    fdaa:	4b3d      	ldr	r3, [pc, #244]	; (fea0 <lv_img_decoder_built_in_open+0x2d4>)
    fdac:	4798      	blx	r3
    fdae:	e7bd      	b.n	fd2c <lv_img_decoder_built_in_open+0x160>
        uint32_t palette_size = 1 << px_size;
    fdb0:	2301      	movs	r3, #1
    fdb2:	fa03 f707 	lsl.w	r7, r3, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
    fdb6:	4638      	mov	r0, r7
    fdb8:	4b2f      	ldr	r3, [pc, #188]	; (fe78 <lv_img_decoder_built_in_open+0x2ac>)
    fdba:	4798      	blx	r3
    fdbc:	60b0      	str	r0, [r6, #8]
        LV_ASSERT_MEM(user_data->opa);
    fdbe:	4b2f      	ldr	r3, [pc, #188]	; (fe7c <lv_img_decoder_built_in_open+0x2b0>)
    fdc0:	4798      	blx	r3
    fdc2:	2800      	cmp	r0, #0
    fdc4:	d032      	beq.n	fe2c <lv_img_decoder_built_in_open+0x260>
        if(user_data->palette == NULL || user_data->opa == NULL) {
    fdc6:	6873      	ldr	r3, [r6, #4]
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d03d      	beq.n	fe48 <lv_img_decoder_built_in_open+0x27c>
    fdcc:	68b3      	ldr	r3, [r6, #8]
    fdce:	2b00      	cmp	r3, #0
    fdd0:	d03a      	beq.n	fe48 <lv_img_decoder_built_in_open+0x27c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    fdd2:	7aa3      	ldrb	r3, [r4, #10]
    fdd4:	2b01      	cmp	r3, #1
    fdd6:	d067      	beq.n	fea8 <lv_img_decoder_built_in_open+0x2dc>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
    fdd8:	6863      	ldr	r3, [r4, #4]
    fdda:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
    fddc:	2f00      	cmp	r7, #0
    fdde:	f000 8095 	beq.w	ff0c <lv_img_decoder_built_in_open+0x340>
    fde2:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
    fde4:	6870      	ldr	r0, [r6, #4]
    fde6:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
    fdea:	f892 e001 	ldrb.w	lr, [r2, #1]
    fdee:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    fdf2:	7895      	ldrb	r5, [r2, #2]
    fdf4:	08ed      	lsrs	r5, r5, #3
    fdf6:	7811      	ldrb	r1, [r2, #0]
    fdf8:	08c9      	lsrs	r1, r1, #3
    fdfa:	f810 8013 	ldrb.w	r8, [r0, r3, lsl #1]
    fdfe:	f361 0804 	bfi	r8, r1, #0, #5
    fe02:	f800 8013 	strb.w	r8, [r0, r3, lsl #1]
    fe06:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    fe0a:	f36e 114a 	bfi	r1, lr, #5, #6
    fe0e:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    fe12:	0a09      	lsrs	r1, r1, #8
    fe14:	f365 01c7 	bfi	r1, r5, #3, #5
    fe18:	f88c 1001 	strb.w	r1, [ip, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
    fe1c:	78d0      	ldrb	r0, [r2, #3]
    fe1e:	68b1      	ldr	r1, [r6, #8]
    fe20:	54c8      	strb	r0, [r1, r3]
            for(i = 0; i < palette_size; i++) {
    fe22:	3301      	adds	r3, #1
    fe24:	3204      	adds	r2, #4
    fe26:	429f      	cmp	r7, r3
    fe28:	d1dc      	bne.n	fde4 <lv_img_decoder_built_in_open+0x218>
    fe2a:	e06f      	b.n	ff0c <lv_img_decoder_built_in_open+0x340>
        LV_ASSERT_MEM(user_data->opa);
    fe2c:	4b15      	ldr	r3, [pc, #84]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fe2e:	9300      	str	r3, [sp, #0]
    fe30:	f240 1299 	movw	r2, #409	; 0x199
    fe34:	4914      	ldr	r1, [pc, #80]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fe36:	2003      	movs	r0, #3
    fe38:	4c14      	ldr	r4, [pc, #80]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fe3a:	47a0      	blx	r4
    fe3c:	68b2      	ldr	r2, [r6, #8]
    fe3e:	2300      	movs	r3, #0
    fe40:	4815      	ldr	r0, [pc, #84]	; (fe98 <lv_img_decoder_built_in_open+0x2cc>)
    fe42:	4916      	ldr	r1, [pc, #88]	; (fe9c <lv_img_decoder_built_in_open+0x2d0>)
    fe44:	4788      	blx	r1
    fe46:	e7fe      	b.n	fe46 <lv_img_decoder_built_in_open+0x27a>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
    fe48:	4b0d      	ldr	r3, [pc, #52]	; (fe80 <lv_img_decoder_built_in_open+0x2b4>)
    fe4a:	9300      	str	r3, [sp, #0]
    fe4c:	4b0d      	ldr	r3, [pc, #52]	; (fe84 <lv_img_decoder_built_in_open+0x2b8>)
    fe4e:	f240 129b 	movw	r2, #411	; 0x19b
    fe52:	490d      	ldr	r1, [pc, #52]	; (fe88 <lv_img_decoder_built_in_open+0x2bc>)
    fe54:	2003      	movs	r0, #3
    fe56:	4e0d      	ldr	r6, [pc, #52]	; (fe8c <lv_img_decoder_built_in_open+0x2c0>)
    fe58:	47b0      	blx	r6
            lv_img_decoder_built_in_close(decoder, dsc);
    fe5a:	4621      	mov	r1, r4
    fe5c:	4628      	mov	r0, r5
    fe5e:	4b0c      	ldr	r3, [pc, #48]	; (fe90 <lv_img_decoder_built_in_open+0x2c4>)
    fe60:	4798      	blx	r3
            return LV_RES_INV;
    fe62:	2000      	movs	r0, #0
    fe64:	e6ce      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
    fe66:	bf00      	nop
    fe68:	000123c9 	.word	0x000123c9
    fe6c:	0001c878 	.word	0x0001c878
    fe70:	0001af2b 	.word	0x0001af2b
    fe74:	000122f5 	.word	0x000122f5
    fe78:	00012985 	.word	0x00012985
    fe7c:	0000298d 	.word	0x0000298d
    fe80:	0001c8a8 	.word	0x0001c8a8
    fe84:	0001c750 	.word	0x0001c750
    fe88:	0001c7fc 	.word	0x0001c7fc
    fe8c:	00012805 	.word	0x00012805
    fe90:	0000fb91 	.word	0x0000fb91
    fe94:	0001c87c 	.word	0x0001c87c
    fe98:	0001b4bc 	.word	0x0001b4bc
    fe9c:	00002995 	.word	0x00002995
    fea0:	000130df 	.word	0x000130df
    fea4:	00009c29 	.word	0x00009c29
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
    fea8:	2104      	movs	r1, #4
    feaa:	6830      	ldr	r0, [r6, #0]
    feac:	4b28      	ldr	r3, [pc, #160]	; (ff50 <lv_img_decoder_built_in_open+0x384>)
    feae:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
    feb0:	b367      	cbz	r7, ff0c <lv_img_decoder_built_in_open+0x340>
    feb2:	2500      	movs	r5, #0
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
    feb4:	46a9      	mov	r9, r5
    feb6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; ff68 <lv_img_decoder_built_in_open+0x39c>
    feba:	464b      	mov	r3, r9
    febc:	2204      	movs	r2, #4
    febe:	a902      	add	r1, sp, #8
    fec0:	6830      	ldr	r0, [r6, #0]
    fec2:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
    fec4:	6872      	ldr	r2, [r6, #4]
    fec6:	eb02 0e45 	add.w	lr, r2, r5, lsl #1
    feca:	f89d 0009 	ldrb.w	r0, [sp, #9]
    fece:	0880      	lsrs	r0, r0, #2
    fed0:	f89d 100a 	ldrb.w	r1, [sp, #10]
    fed4:	08c9      	lsrs	r1, r1, #3
    fed6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    feda:	08db      	lsrs	r3, r3, #3
    fedc:	f812 c015 	ldrb.w	ip, [r2, r5, lsl #1]
    fee0:	f363 0c04 	bfi	ip, r3, #0, #5
    fee4:	f802 c015 	strb.w	ip, [r2, r5, lsl #1]
    fee8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    feec:	f360 134a 	bfi	r3, r0, #5, #6
    fef0:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    fef4:	0a1b      	lsrs	r3, r3, #8
    fef6:	f361 03c7 	bfi	r3, r1, #3, #5
    fefa:	f88e 3001 	strb.w	r3, [lr, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
    fefe:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ff02:	68b3      	ldr	r3, [r6, #8]
    ff04:	555a      	strb	r2, [r3, r5]
            for(i = 0; i < palette_size; i++) {
    ff06:	3501      	adds	r5, #1
    ff08:	42af      	cmp	r7, r5
    ff0a:	d1d6      	bne.n	feba <lv_img_decoder_built_in_open+0x2ee>
        dsc->img_data = NULL;
    ff0c:	2300      	movs	r3, #0
    ff0e:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
    ff10:	2001      	movs	r0, #1
    ff12:	e677      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
    ff14:	4621      	mov	r1, r4
    ff16:	4628      	mov	r0, r5
    ff18:	4b0e      	ldr	r3, [pc, #56]	; (ff54 <lv_img_decoder_built_in_open+0x388>)
    ff1a:	4798      	blx	r3
        LV_LOG_WARN("Image decoder open: unknown color format")
    ff1c:	4b0e      	ldr	r3, [pc, #56]	; (ff58 <lv_img_decoder_built_in_open+0x38c>)
    ff1e:	9300      	str	r3, [sp, #0]
    ff20:	4b0e      	ldr	r3, [pc, #56]	; (ff5c <lv_img_decoder_built_in_open+0x390>)
    ff22:	f240 12d3 	movw	r2, #467	; 0x1d3
    ff26:	490e      	ldr	r1, [pc, #56]	; (ff60 <lv_img_decoder_built_in_open+0x394>)
    ff28:	2002      	movs	r0, #2
    ff2a:	4c0e      	ldr	r4, [pc, #56]	; (ff64 <lv_img_decoder_built_in_open+0x398>)
    ff2c:	47a0      	blx	r4
        return LV_RES_INV;
    ff2e:	2000      	movs	r0, #0
    ff30:	e668      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
    ff32:	2000      	movs	r0, #0
    ff34:	e666      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
    lv_img_cf_t cf = dsc->header.cf;
    ff36:	7b08      	ldrb	r0, [r1, #12]
    ff38:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
    ff3c:	1f03      	subs	r3, r0, #4
    ff3e:	b2db      	uxtb	r3, r3
    ff40:	2b02      	cmp	r3, #2
    ff42:	f63f aee0 	bhi.w	fd06 <lv_img_decoder_built_in_open+0x13a>
            dsc->img_data = NULL;
    ff46:	2300      	movs	r3, #0
    ff48:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
    ff4a:	2001      	movs	r0, #1
    ff4c:	e65a      	b.n	fc04 <lv_img_decoder_built_in_open+0x38>
    ff4e:	bf00      	nop
    ff50:	000122a1 	.word	0x000122a1
    ff54:	0000fb91 	.word	0x0000fb91
    ff58:	0001c8d4 	.word	0x0001c8d4
    ff5c:	0001c750 	.word	0x0001c750
    ff60:	0001c7fc 	.word	0x0001c7fc
    ff64:	00012805 	.word	0x00012805
    ff68:	00012265 	.word	0x00012265

0000ff6c <lv_img_decoder_built_in_read_line>:
{
    ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff70:	b08b      	sub	sp, #44	; 0x2c
    ff72:	460d      	mov	r5, r1
    ff74:	4614      	mov	r4, r2
    ff76:	469a      	mov	sl, r3
    ff78:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
    ff7c:	7b0b      	ldrb	r3, [r1, #12]
    ff7e:	f003 031f 	and.w	r3, r3, #31
    ff82:	1f1a      	subs	r2, r3, #4
    ff84:	b2d2      	uxtb	r2, r2
    ff86:	2a02      	cmp	r2, #2
    ff88:	d845      	bhi.n	10016 <STACK_SIZE+0x16>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
    ff8a:	7a8b      	ldrb	r3, [r1, #10]
    ff8c:	2b01      	cmp	r3, #1
    ff8e:	d003      	beq.n	ff98 <lv_img_decoder_built_in_read_line+0x2c>
    lv_res_t res = LV_RES_INV;
    ff90:	2000      	movs	r0, #0
}
    ff92:	b00b      	add	sp, #44	; 0x2c
    ff94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    ff98:	f8d1 801c 	ldr.w	r8, [r1, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
    ff9c:	7b08      	ldrb	r0, [r1, #12]
    ff9e:	f000 001f 	and.w	r0, r0, #31
    ffa2:	4b9e      	ldr	r3, [pc, #632]	; (1021c <STACK_SIZE+0x21c>)
    ffa4:	4798      	blx	r3
    ffa6:	4607      	mov	r7, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
    ffa8:	68e9      	ldr	r1, [r5, #12]
    ffaa:	f3c1 218a 	ubfx	r1, r1, #10, #11
    ffae:	fb0a 4101 	mla	r1, sl, r1, r4
    ffb2:	fb00 f101 	mul.w	r1, r0, r1
    ffb6:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
    ffb8:	3104      	adds	r1, #4
    ffba:	f8d8 0000 	ldr.w	r0, [r8]
    ffbe:	4b98      	ldr	r3, [pc, #608]	; (10220 <STACK_SIZE+0x220>)
    ffc0:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
    ffc2:	b9d8      	cbnz	r0, fffc <lv_img_decoder_built_in_read_line+0x90>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
    }
    uint32_t btr = len * (px_size >> 3);
    ffc4:	f3c7 07c7 	ubfx	r7, r7, #3, #8
    ffc8:	fb06 f607 	mul.w	r6, r6, r7
    uint32_t br  = 0;
    ffcc:	ab0a      	add	r3, sp, #40	; 0x28
    ffce:	2200      	movs	r2, #0
    ffd0:	f843 2d10 	str.w	r2, [r3, #-16]!
    lv_fs_read(user_data->f, buf, btr, &br);
    ffd4:	4632      	mov	r2, r6
    ffd6:	9915      	ldr	r1, [sp, #84]	; 0x54
    ffd8:	f8d8 0000 	ldr.w	r0, [r8]
    ffdc:	4c91      	ldr	r4, [pc, #580]	; (10224 <STACK_SIZE+0x224>)
    ffde:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
    ffe0:	9b06      	ldr	r3, [sp, #24]
    ffe2:	429e      	cmp	r6, r3
    ffe4:	d015      	beq.n	10012 <STACK_SIZE+0x12>
        LV_LOG_WARN("Built-in image decoder read failed");
    ffe6:	4b90      	ldr	r3, [pc, #576]	; (10228 <STACK_SIZE+0x228>)
    ffe8:	9300      	str	r3, [sp, #0]
    ffea:	4b90      	ldr	r3, [pc, #576]	; (1022c <STACK_SIZE+0x22c>)
    ffec:	f240 2235 	movw	r2, #565	; 0x235
    fff0:	498f      	ldr	r1, [pc, #572]	; (10230 <STACK_SIZE+0x230>)
    fff2:	2002      	movs	r0, #2
    fff4:	4c8f      	ldr	r4, [pc, #572]	; (10234 <STACK_SIZE+0x234>)
    fff6:	47a0      	blx	r4
        return LV_RES_INV;
    fff8:	2000      	movs	r0, #0
    fffa:	e7ca      	b.n	ff92 <lv_img_decoder_built_in_read_line+0x26>
        LV_LOG_WARN("Built-in image decoder seek failed");
    fffc:	4b8e      	ldr	r3, [pc, #568]	; (10238 <STACK_SIZE+0x238>)
    fffe:	9300      	str	r3, [sp, #0]
   10000:	4b8a      	ldr	r3, [pc, #552]	; (1022c <STACK_SIZE+0x22c>)
   10002:	f240 222e 	movw	r2, #558	; 0x22e
   10006:	498a      	ldr	r1, [pc, #552]	; (10230 <STACK_SIZE+0x230>)
   10008:	2002      	movs	r0, #2
   1000a:	4c8a      	ldr	r4, [pc, #552]	; (10234 <STACK_SIZE+0x234>)
   1000c:	47a0      	blx	r4
        return LV_RES_INV;
   1000e:	2000      	movs	r0, #0
   10010:	e7bf      	b.n	ff92 <lv_img_decoder_built_in_read_line+0x26>
    }

    return LV_RES_OK;
   10012:	2001      	movs	r0, #1
   10014:	e7bd      	b.n	ff92 <lv_img_decoder_built_in_read_line+0x26>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
   10016:	f1a3 020b 	sub.w	r2, r3, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   1001a:	b2d2      	uxtb	r2, r2
   1001c:	2a03      	cmp	r2, #3
   1001e:	d90f      	bls.n	10040 <STACK_SIZE+0x40>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
   10020:	3b07      	subs	r3, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   10022:	b2db      	uxtb	r3, r3
   10024:	2b03      	cmp	r3, #3
   10026:	f240 80df 	bls.w	101e8 <STACK_SIZE+0x1e8>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1002a:	4b84      	ldr	r3, [pc, #528]	; (1023c <STACK_SIZE+0x23c>)
   1002c:	9300      	str	r3, [sp, #0]
   1002e:	4b84      	ldr	r3, [pc, #528]	; (10240 <STACK_SIZE+0x240>)
   10030:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
   10034:	497e      	ldr	r1, [pc, #504]	; (10230 <STACK_SIZE+0x230>)
   10036:	2002      	movs	r0, #2
   10038:	4c7e      	ldr	r4, [pc, #504]	; (10234 <STACK_SIZE+0x234>)
   1003a:	47a0      	blx	r4
        return LV_RES_INV;
   1003c:	2000      	movs	r0, #0
   1003e:	e7a8      	b.n	ff92 <lv_img_decoder_built_in_read_line+0x26>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   10040:	2200      	movs	r2, #0
   10042:	f88d 2010 	strb.w	r2, [sp, #16]
   10046:	23ff      	movs	r3, #255	; 0xff
   10048:	f88d 3011 	strb.w	r3, [sp, #17]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   1004c:	f88d 2014 	strb.w	r2, [sp, #20]
   10050:	2255      	movs	r2, #85	; 0x55
   10052:	f88d 2015 	strb.w	r2, [sp, #21]
   10056:	22aa      	movs	r2, #170	; 0xaa
   10058:	f88d 2016 	strb.w	r2, [sp, #22]
   1005c:	f88d 3017 	strb.w	r3, [sp, #23]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   10060:	4b78      	ldr	r3, [pc, #480]	; (10244 <STACK_SIZE+0x244>)
   10062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10064:	af0a      	add	r7, sp, #40	; 0x28
   10066:	e907 000f 	stmdb	r7, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
   1006a:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
   1006c:	2e00      	cmp	r6, #0
   1006e:	dd0c      	ble.n	1008a <STACK_SIZE+0x8a>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
   10070:	0a08      	lsrs	r0, r1, #8
   10072:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10074:	1e72      	subs	r2, r6, #1
   10076:	b292      	uxth	r2, r2
   10078:	3201      	adds	r2, #1
   1007a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1007e:	441a      	add	r2, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
   10080:	7019      	strb	r1, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
   10082:	7058      	strb	r0, [r3, #1]
   10084:	3303      	adds	r3, #3
    for(i = 0; i < len; i++) {
   10086:	429a      	cmp	r2, r3
   10088:	d1fa      	bne.n	10080 <STACK_SIZE+0x80>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
   1008a:	7b28      	ldrb	r0, [r5, #12]
   1008c:	f000 001f 	and.w	r0, r0, #31
   10090:	4b62      	ldr	r3, [pc, #392]	; (1021c <STACK_SIZE+0x21c>)
   10092:	4798      	blx	r3
   10094:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   10096:	2701      	movs	r7, #1
   10098:	4087      	lsls	r7, r0
   1009a:	3f01      	subs	r7, #1
   1009c:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
   1009e:	7b2b      	ldrb	r3, [r5, #12]
   100a0:	f003 031f 	and.w	r3, r3, #31
   100a4:	3b0b      	subs	r3, #11
   100a6:	2b03      	cmp	r3, #3
   100a8:	f200 8083 	bhi.w	101b2 <STACK_SIZE+0x1b2>
   100ac:	e8df f003 	tbb	[pc, r3]
   100b0:	76614c02 	.word	0x76614c02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   100b4:	68eb      	ldr	r3, [r5, #12]
   100b6:	f3c3 238a 	ubfx	r3, r3, #10, #11
   100ba:	10da      	asrs	r2, r3, #3
            if(dsc->header.w & 0x7) w++;
   100bc:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   100c0:	bf0c      	ite	eq
   100c2:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x7) w++;
   100c6:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   100ca:	10e3      	asrs	r3, r4, #3
   100cc:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 7 - (x & 0x7);
   100d0:	43e4      	mvns	r4, r4
   100d2:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   100d6:	f10d 0910 	add.w	r9, sp, #16
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   100da:	69eb      	ldr	r3, [r5, #28]
   100dc:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
   100de:	4658      	mov	r0, fp
   100e0:	4b59      	ldr	r3, [pc, #356]	; (10248 <STACK_SIZE+0x248>)
   100e2:	4798      	blx	r3
   100e4:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   100e6:	7aab      	ldrb	r3, [r5, #10]
   100e8:	2b00      	cmp	r3, #0
   100ea:	d16b      	bne.n	101c4 <STACK_SIZE+0x1c4>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
   100ec:	686b      	ldr	r3, [r5, #4]
   100ee:	689b      	ldr	r3, [r3, #8]
   100f0:	449a      	add	sl, r3
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    for(i = 0; i < len; i++) {
   100f2:	2e00      	cmp	r6, #0
   100f4:	dd23      	ble.n	1013e <STACK_SIZE+0x13e>
   100f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   100f8:	1e71      	subs	r1, r6, #1
   100fa:	b289      	uxth	r1, r1
   100fc:	3101      	adds	r1, #1
   100fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10102:	4411      	add	r1, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
   10104:	f1c8 0008 	rsb	r0, r8, #8
   10108:	b240      	sxtb	r0, r0
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1010a:	f89a 3000 	ldrb.w	r3, [sl]
   1010e:	fa07 f604 	lsl.w	r6, r7, r4
   10112:	4033      	ands	r3, r6
   10114:	4123      	asrs	r3, r4
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   10116:	7b2e      	ldrb	r6, [r5, #12]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   10118:	f006 061f 	and.w	r6, r6, #31
   1011c:	2e0e      	cmp	r6, #14
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1011e:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   10120:	bf18      	it	ne
   10122:	f819 3003 	ldrbne.w	r3, [r9, r3]
   10126:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
   10128:	eba4 0408 	sub.w	r4, r4, r8
   1012c:	b264      	sxtb	r4, r4
        if(pos < 0) {
   1012e:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   10130:	bfbc      	itt	lt
   10132:	4604      	movlt	r4, r0
            data_tmp++;
   10134:	f10a 0a01 	addlt.w	sl, sl, #1
   10138:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
   1013a:	428a      	cmp	r2, r1
   1013c:	d1e5      	bne.n	1010a <STACK_SIZE+0x10a>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
   1013e:	9802      	ldr	r0, [sp, #8]
   10140:	4b42      	ldr	r3, [pc, #264]	; (1024c <STACK_SIZE+0x24c>)
   10142:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
   10144:	2001      	movs	r0, #1
   10146:	e724      	b.n	ff92 <lv_img_decoder_built_in_read_line+0x26>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   10148:	68eb      	ldr	r3, [r5, #12]
   1014a:	f3c3 238a 	ubfx	r3, r3, #10, #11
   1014e:	109a      	asrs	r2, r3, #2
            if(dsc->header.w & 0x3) w++;
   10150:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   10154:	bf0c      	ite	eq
   10156:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x3) w++;
   1015a:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   1015e:	10a3      	asrs	r3, r4, #2
   10160:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 6 - ((x & 0x3) * 2);
   10164:	43e4      	mvns	r4, r4
   10166:	f004 0403 	and.w	r4, r4, #3
   1016a:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   1016c:	f10d 0914 	add.w	r9, sp, #20
   10170:	e7b3      	b.n	100da <STACK_SIZE+0xda>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   10172:	68eb      	ldr	r3, [r5, #12]
   10174:	f3c3 238a 	ubfx	r3, r3, #10, #11
   10178:	105a      	asrs	r2, r3, #1
            if(dsc->header.w & 0x1) w++;
   1017a:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1017e:	bf0c      	ite	eq
   10180:	fa0f fb82 	sxtheq.w	fp, r2
            if(dsc->header.w & 0x1) w++;
   10184:	f102 0b01 	addne.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   10188:	1063      	asrs	r3, r4, #1
   1018a:	fb0a 3a0b 	mla	sl, sl, fp, r3
            pos       = 4 - ((x & 0x1) * 4);
   1018e:	f014 0f01 	tst.w	r4, #1
   10192:	d013      	beq.n	101bc <STACK_SIZE+0x1bc>
   10194:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
   10196:	f10d 0918 	add.w	r9, sp, #24
   1019a:	e79e      	b.n	100da <STACK_SIZE+0xda>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1019c:	68eb      	ldr	r3, [r5, #12]
   1019e:	f3c3 238a 	ubfx	r3, r3, #10, #11
   101a2:	b29a      	uxth	r2, r3
   101a4:	fa0f fb83 	sxth.w	fp, r3
            ofs += w * y + x;  /*First pixel*/
   101a8:	fb0a 4a02 	mla	sl, sl, r2, r4
            pos = 0;
   101ac:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
   101ae:	46a1      	mov	r9, r4
   101b0:	e793      	b.n	100da <STACK_SIZE+0xda>
    int8_t pos   = 0;
   101b2:	2400      	movs	r4, #0
    uint32_t ofs = 0;
   101b4:	46a2      	mov	sl, r4
    lv_coord_t w = 0;
   101b6:	46a3      	mov	fp, r4
    const lv_opa_t * opa_table = NULL;
   101b8:	46a1      	mov	r9, r4
   101ba:	e78e      	b.n	100da <STACK_SIZE+0xda>
            pos       = 4 - ((x & 0x1) * 4);
   101bc:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
   101be:	f10d 0918 	add.w	r9, sp, #24
   101c2:	e78a      	b.n	100da <STACK_SIZE+0xda>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
   101c4:	f10a 0104 	add.w	r1, sl, #4
   101c8:	9b03      	ldr	r3, [sp, #12]
   101ca:	6818      	ldr	r0, [r3, #0]
   101cc:	4b14      	ldr	r3, [pc, #80]	; (10220 <STACK_SIZE+0x220>)
   101ce:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
   101d0:	2300      	movs	r3, #0
   101d2:	465a      	mov	r2, fp
   101d4:	f8dd b008 	ldr.w	fp, [sp, #8]
   101d8:	4659      	mov	r1, fp
   101da:	9803      	ldr	r0, [sp, #12]
   101dc:	6800      	ldr	r0, [r0, #0]
   101de:	f8df a044 	ldr.w	sl, [pc, #68]	; 10224 <STACK_SIZE+0x224>
   101e2:	47d0      	blx	sl
        data_tmp = fs_buf;
   101e4:	46da      	mov	sl, fp
   101e6:	e784      	b.n	100f2 <STACK_SIZE+0xf2>
static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
   101e8:	7b08      	ldrb	r0, [r1, #12]
   101ea:	f000 001f 	and.w	r0, r0, #31
   101ee:	4b0b      	ldr	r3, [pc, #44]	; (1021c <STACK_SIZE+0x21c>)
   101f0:	4798      	blx	r3
   101f2:	4681      	mov	r9, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   101f4:	f04f 0801 	mov.w	r8, #1
   101f8:	fa08 f800 	lsl.w	r8, r8, r0
   101fc:	f108 38ff 	add.w	r8, r8, #4294967295
   10200:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
   10204:	7b2b      	ldrb	r3, [r5, #12]
   10206:	f003 031f 	and.w	r3, r3, #31
   1020a:	3b07      	subs	r3, #7
   1020c:	2b03      	cmp	r3, #3
   1020e:	f200 80a5 	bhi.w	1035c <STACK_SIZE+0x35c>
   10212:	e8df f003 	tbb	[pc, r3]
   10216:	681d      	.short	0x681d
   10218:	967e      	.short	0x967e
   1021a:	bf00      	nop
   1021c:	00009c29 	.word	0x00009c29
   10220:	000122a1 	.word	0x000122a1
   10224:	00012265 	.word	0x00012265
   10228:	0001c924 	.word	0x0001c924
   1022c:	0001c770 	.word	0x0001c770
   10230:	0001c7fc 	.word	0x0001c7fc
   10234:	00012805 	.word	0x00012805
   10238:	0001c900 	.word	0x0001c900
   1023c:	0001c948 	.word	0x0001c948
   10240:	0001c7a8 	.word	0x0001c7a8
   10244:	0001c798 	.word	0x0001c798
   10248:	00012ee5 	.word	0x00012ee5
   1024c:	00012b19 	.word	0x00012b19
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   10250:	68eb      	ldr	r3, [r5, #12]
   10252:	f3c3 238a 	ubfx	r3, r3, #10, #11
   10256:	ea4f 0be3 	mov.w	fp, r3, asr #3
            if(dsc->header.w & 0x7) w++;
   1025a:	f013 0f07 	tst.w	r3, #7
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1025e:	bf0c      	ite	eq
   10260:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x7) w++;
   10264:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   10268:	10e3      	asrs	r3, r4, #3
   1026a:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 8;                /*Skip the palette*/
   1026e:	f10a 0a08 	add.w	sl, sl, #8
            pos = 7 - (x & 0x7);
   10272:	43e4      	mvns	r4, r4
   10274:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   10278:	69ef      	ldr	r7, [r5, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
   1027a:	4658      	mov	r0, fp
   1027c:	4b41      	ldr	r3, [pc, #260]	; (10384 <STACK_SIZE+0x384>)
   1027e:	4798      	blx	r3
   10280:	9002      	str	r0, [sp, #8]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   10282:	7aab      	ldrb	r3, [r5, #10]
   10284:	2b00      	cmp	r3, #0
   10286:	d16e      	bne.n	10366 <STACK_SIZE+0x366>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
   10288:	686b      	ldr	r3, [r5, #4]
   1028a:	689b      	ldr	r3, [r3, #8]
   1028c:	449a      	add	sl, r3
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
   1028e:	2e00      	cmp	r6, #0
   10290:	dd24      	ble.n	102dc <STACK_SIZE+0x2dc>
   10292:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10294:	1e71      	subs	r1, r6, #1
   10296:	b289      	uxth	r1, r1
   10298:	3101      	adds	r1, #1
   1029a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1029e:	4411      	add	r1, r2
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
   102a0:	f1c9 0508 	rsb	r5, r9, #8
   102a4:	b26d      	sxtb	r5, r5
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   102a6:	f89a 3000 	ldrb.w	r3, [sl]
   102aa:	fa08 f004 	lsl.w	r0, r8, r4
   102ae:	4003      	ands	r3, r0
   102b0:	4123      	asrs	r3, r4
        lv_color_t color = user_data->palette[val_act];
   102b2:	b2db      	uxtb	r3, r3
   102b4:	6878      	ldr	r0, [r7, #4]
   102b6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
   102ba:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
   102bc:	0a00      	lsrs	r0, r0, #8
   102be:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   102c0:	68b8      	ldr	r0, [r7, #8]
   102c2:	5cc3      	ldrb	r3, [r0, r3]
   102c4:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
   102c6:	eba4 0409 	sub.w	r4, r4, r9
   102ca:	b264      	sxtb	r4, r4
        if(pos < 0) {
   102cc:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   102ce:	bfbc      	itt	lt
   102d0:	462c      	movlt	r4, r5
            data_tmp++;
   102d2:	f10a 0a01 	addlt.w	sl, sl, #1
   102d6:	3203      	adds	r2, #3
    for(i = 0; i < len; i++) {
   102d8:	428a      	cmp	r2, r1
   102da:	d1e4      	bne.n	102a6 <STACK_SIZE+0x2a6>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
   102dc:	9802      	ldr	r0, [sp, #8]
   102de:	4b2a      	ldr	r3, [pc, #168]	; (10388 <STACK_SIZE+0x388>)
   102e0:	4798      	blx	r3
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
   102e2:	2001      	movs	r0, #1
   102e4:	e655      	b.n	ff92 <lv_img_decoder_built_in_read_line+0x26>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   102e6:	68eb      	ldr	r3, [r5, #12]
   102e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
   102ec:	ea4f 0ba3 	mov.w	fp, r3, asr #2
            if(dsc->header.w & 0x3) w++;
   102f0:	f013 0f03 	tst.w	r3, #3
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   102f4:	bf0c      	ite	eq
   102f6:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x3) w++;
   102fa:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   102fe:	10a3      	asrs	r3, r4, #2
   10300:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 16;               /*Skip the palette*/
   10304:	f10a 0a10 	add.w	sl, sl, #16
            pos = 6 - ((x & 0x3) * 2);
   10308:	43e4      	mvns	r4, r4
   1030a:	f004 0403 	and.w	r4, r4, #3
   1030e:	0064      	lsls	r4, r4, #1
   10310:	e7b2      	b.n	10278 <STACK_SIZE+0x278>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   10312:	68eb      	ldr	r3, [r5, #12]
   10314:	f3c3 238a 	ubfx	r3, r3, #10, #11
   10318:	ea4f 0b63 	mov.w	fp, r3, asr #1
            if(dsc->header.w & 0x1) w++;
   1031c:	f013 0f01 	tst.w	r3, #1
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   10320:	bf0c      	ite	eq
   10322:	fa0f fb8b 	sxtheq.w	fp, fp
            if(dsc->header.w & 0x1) w++;
   10326:	f10b 0b01 	addne.w	fp, fp, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1032a:	1063      	asrs	r3, r4, #1
   1032c:	fb0a 3a0b 	mla	sl, sl, fp, r3
            ofs += 64;               /*Skip the palette*/
   10330:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   10334:	f004 0401 	and.w	r4, r4, #1
   10338:	2c00      	cmp	r4, #0
   1033a:	bf0c      	ite	eq
   1033c:	2404      	moveq	r4, #4
   1033e:	2400      	movne	r4, #0
   10340:	e79a      	b.n	10278 <STACK_SIZE+0x278>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   10342:	68eb      	ldr	r3, [r5, #12]
   10344:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
   10348:	fa1f f38b 	uxth.w	r3, fp
   1034c:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
   10350:	fb0a 4a03 	mla	sl, sl, r3, r4
            ofs += 1024;       /*Skip the palette*/
   10354:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
            pos = 0;
   10358:	2400      	movs	r4, #0
   1035a:	e78d      	b.n	10278 <STACK_SIZE+0x278>
    uint32_t ofs = 0;
   1035c:	f04f 0a00 	mov.w	sl, #0
    int8_t pos   = 0;
   10360:	4654      	mov	r4, sl
    lv_coord_t w = 0;
   10362:	46d3      	mov	fp, sl
   10364:	e788      	b.n	10278 <STACK_SIZE+0x278>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
   10366:	f10a 0104 	add.w	r1, sl, #4
   1036a:	6838      	ldr	r0, [r7, #0]
   1036c:	4b07      	ldr	r3, [pc, #28]	; (1038c <STACK_SIZE+0x38c>)
   1036e:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
   10370:	2300      	movs	r3, #0
   10372:	465a      	mov	r2, fp
   10374:	f8dd a008 	ldr.w	sl, [sp, #8]
   10378:	4651      	mov	r1, sl
   1037a:	6838      	ldr	r0, [r7, #0]
   1037c:	4d04      	ldr	r5, [pc, #16]	; (10390 <STACK_SIZE+0x390>)
   1037e:	47a8      	blx	r5
   10380:	e785      	b.n	1028e <STACK_SIZE+0x28e>
   10382:	bf00      	nop
   10384:	00012ee5 	.word	0x00012ee5
   10388:	00012b19 	.word	0x00012b19
   1038c:	000122a1 	.word	0x000122a1
   10390:	00012265 	.word	0x00012265

00010394 <lv_img_decoder_get_info>:
{
   10394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10398:	4681      	mov	r9, r0
   1039a:	460e      	mov	r6, r1
    header->always_zero = 0;
   1039c:	780b      	ldrb	r3, [r1, #0]
   1039e:	f36f 1347 	bfc	r3, #5, #3
   103a2:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   103a4:	480f      	ldr	r0, [pc, #60]	; (103e4 <lv_img_decoder_get_info+0x50>)
   103a6:	4b10      	ldr	r3, [pc, #64]	; (103e8 <lv_img_decoder_get_info+0x54>)
   103a8:	4798      	blx	r3
   103aa:	b1c8      	cbz	r0, 103e0 <lv_img_decoder_get_info+0x4c>
   103ac:	4604      	mov	r4, r0
        res = LV_RES_INV;
   103ae:	f04f 0a00 	mov.w	sl, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   103b2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 103e4 <lv_img_decoder_get_info+0x50>
   103b6:	4f0d      	ldr	r7, [pc, #52]	; (103ec <lv_img_decoder_get_info+0x58>)
   103b8:	e005      	b.n	103c6 <lv_img_decoder_get_info+0x32>
        res = LV_RES_INV;
   103ba:	4655      	mov	r5, sl
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   103bc:	4621      	mov	r1, r4
   103be:	4640      	mov	r0, r8
   103c0:	47b8      	blx	r7
   103c2:	4604      	mov	r4, r0
   103c4:	b148      	cbz	r0, 103da <lv_img_decoder_get_info+0x46>
        if(d->info_cb) {
   103c6:	6823      	ldr	r3, [r4, #0]
   103c8:	2b00      	cmp	r3, #0
   103ca:	d0f6      	beq.n	103ba <lv_img_decoder_get_info+0x26>
            res = d->info_cb(d, src, header);
   103cc:	4632      	mov	r2, r6
   103ce:	4649      	mov	r1, r9
   103d0:	4620      	mov	r0, r4
   103d2:	4798      	blx	r3
   103d4:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
   103d6:	2801      	cmp	r0, #1
   103d8:	d1f0      	bne.n	103bc <lv_img_decoder_get_info+0x28>
}
   103da:	4628      	mov	r0, r5
   103dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
   103e0:	2500      	movs	r5, #0
   103e2:	e7fa      	b.n	103da <lv_img_decoder_get_info+0x46>
   103e4:	20006cc0 	.word	0x20006cc0
   103e8:	00012551 	.word	0x00012551
   103ec:	00012565 	.word	0x00012565

000103f0 <lv_img_decoder_open>:
{
   103f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103f4:	4682      	mov	sl, r0
   103f6:	4688      	mov	r8, r1
    dsc->color     = color;
   103f8:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
   103fa:	4608      	mov	r0, r1
   103fc:	4b26      	ldr	r3, [pc, #152]	; (10498 <lv_img_decoder_open+0xa8>)
   103fe:	4798      	blx	r3
   10400:	f88a 000a 	strb.w	r0, [sl, #10]
    dsc->user_data = NULL;
   10404:	2300      	movs	r3, #0
   10406:	f8ca 301c 	str.w	r3, [sl, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1040a:	2801      	cmp	r0, #1
   1040c:	d00d      	beq.n	1042a <lv_img_decoder_open+0x3a>
        dsc->src       = src;
   1040e:	f8ca 8004 	str.w	r8, [sl, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   10412:	4822      	ldr	r0, [pc, #136]	; (1049c <lv_img_decoder_open+0xac>)
   10414:	4b22      	ldr	r3, [pc, #136]	; (104a0 <lv_img_decoder_open+0xb0>)
   10416:	4798      	blx	r3
   10418:	4604      	mov	r4, r0
   1041a:	2800      	cmp	r0, #0
   1041c:	d036      	beq.n	1048c <lv_img_decoder_open+0x9c>
   1041e:	2500      	movs	r5, #0
        res = d->info_cb(d, src, &dsc->header);
   10420:	f10a 090c 	add.w	r9, sl, #12
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   10424:	4f1d      	ldr	r7, [pc, #116]	; (1049c <lv_img_decoder_open+0xac>)
   10426:	4e1f      	ldr	r6, [pc, #124]	; (104a4 <lv_img_decoder_open+0xb4>)
   10428:	e010      	b.n	1044c <lv_img_decoder_open+0x5c>
        size_t fnlen = strlen(src);
   1042a:	4640      	mov	r0, r8
   1042c:	4b1e      	ldr	r3, [pc, #120]	; (104a8 <lv_img_decoder_open+0xb8>)
   1042e:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
   10430:	3001      	adds	r0, #1
   10432:	4b1e      	ldr	r3, [pc, #120]	; (104ac <lv_img_decoder_open+0xbc>)
   10434:	4798      	blx	r3
   10436:	f8ca 0004 	str.w	r0, [sl, #4]
        strcpy((char *)dsc->src, src);
   1043a:	4641      	mov	r1, r8
   1043c:	4b1c      	ldr	r3, [pc, #112]	; (104b0 <lv_img_decoder_open+0xc0>)
   1043e:	4798      	blx	r3
   10440:	e7e7      	b.n	10412 <lv_img_decoder_open+0x22>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   10442:	4621      	mov	r1, r4
   10444:	4638      	mov	r0, r7
   10446:	47b0      	blx	r6
   10448:	4604      	mov	r4, r0
   1044a:	b1d8      	cbz	r0, 10484 <lv_img_decoder_open+0x94>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
   1044c:	6823      	ldr	r3, [r4, #0]
   1044e:	2b00      	cmp	r3, #0
   10450:	d0f7      	beq.n	10442 <lv_img_decoder_open+0x52>
   10452:	6862      	ldr	r2, [r4, #4]
   10454:	2a00      	cmp	r2, #0
   10456:	d0f4      	beq.n	10442 <lv_img_decoder_open+0x52>
        res = d->info_cb(d, src, &dsc->header);
   10458:	464a      	mov	r2, r9
   1045a:	4641      	mov	r1, r8
   1045c:	4620      	mov	r0, r4
   1045e:	4798      	blx	r3
   10460:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
   10462:	2801      	cmp	r0, #1
   10464:	d1ed      	bne.n	10442 <lv_img_decoder_open+0x52>
        dsc->error_msg = NULL;
   10466:	2300      	movs	r3, #0
   10468:	f8ca 3018 	str.w	r3, [sl, #24]
        dsc->img_data  = NULL;
   1046c:	f8ca 3010 	str.w	r3, [sl, #16]
        dsc->decoder   = d;
   10470:	f8ca 4000 	str.w	r4, [sl]
        res = d->open_cb(d, dsc);
   10474:	6863      	ldr	r3, [r4, #4]
   10476:	4651      	mov	r1, sl
   10478:	4620      	mov	r0, r4
   1047a:	4798      	blx	r3
   1047c:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
   1047e:	2801      	cmp	r0, #1
   10480:	d1df      	bne.n	10442 <lv_img_decoder_open+0x52>
   10482:	e000      	b.n	10486 <lv_img_decoder_open+0x96>
    if(res == LV_RES_INV) {
   10484:	b11d      	cbz	r5, 1048e <lv_img_decoder_open+0x9e>
}
   10486:	4628      	mov	r0, r5
   10488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_res_t res = LV_RES_INV;
   1048c:	2500      	movs	r5, #0
        _lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
   1048e:	2120      	movs	r1, #32
   10490:	4650      	mov	r0, sl
   10492:	4b08      	ldr	r3, [pc, #32]	; (104b4 <lv_img_decoder_open+0xc4>)
   10494:	4798      	blx	r3
   10496:	e7f6      	b.n	10486 <lv_img_decoder_open+0x96>
   10498:	00009f11 	.word	0x00009f11
   1049c:	20006cc0 	.word	0x20006cc0
   104a0:	00012551 	.word	0x00012551
   104a4:	00012565 	.word	0x00012565
   104a8:	0001af4f 	.word	0x0001af4f
   104ac:	00012985 	.word	0x00012985
   104b0:	0001af3f 	.word	0x0001af3f
   104b4:	000130df 	.word	0x000130df

000104b8 <lv_img_decoder_read_line>:
{
   104b8:	b570      	push	{r4, r5, r6, lr}
   104ba:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
   104bc:	6806      	ldr	r6, [r0, #0]
   104be:	68b4      	ldr	r4, [r6, #8]
   104c0:	b154      	cbz	r4, 104d8 <lv_img_decoder_read_line+0x20>
   104c2:	461d      	mov	r5, r3
   104c4:	4613      	mov	r3, r2
   104c6:	460a      	mov	r2, r1
   104c8:	4601      	mov	r1, r0
   104ca:	9806      	ldr	r0, [sp, #24]
   104cc:	9001      	str	r0, [sp, #4]
   104ce:	9500      	str	r5, [sp, #0]
   104d0:	4630      	mov	r0, r6
   104d2:	47a0      	blx	r4
}
   104d4:	b002      	add	sp, #8
   104d6:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
   104d8:	2000      	movs	r0, #0
   104da:	e7fb      	b.n	104d4 <lv_img_decoder_read_line+0x1c>

000104dc <lv_img_decoder_close>:
    if(dsc->decoder) {
   104dc:	6803      	ldr	r3, [r0, #0]
   104de:	b183      	cbz	r3, 10502 <lv_img_decoder_close+0x26>
{
   104e0:	b510      	push	{r4, lr}
   104e2:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   104e4:	68da      	ldr	r2, [r3, #12]
   104e6:	b112      	cbz	r2, 104ee <lv_img_decoder_close+0x12>
   104e8:	4601      	mov	r1, r0
   104ea:	4618      	mov	r0, r3
   104ec:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   104ee:	7aa3      	ldrb	r3, [r4, #10]
   104f0:	2b01      	cmp	r3, #1
   104f2:	d000      	beq.n	104f6 <lv_img_decoder_close+0x1a>
   104f4:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
   104f6:	6860      	ldr	r0, [r4, #4]
   104f8:	4b02      	ldr	r3, [pc, #8]	; (10504 <lv_img_decoder_close+0x28>)
   104fa:	4798      	blx	r3
            dsc->src = NULL;
   104fc:	2300      	movs	r3, #0
   104fe:	6063      	str	r3, [r4, #4]
}
   10500:	e7f8      	b.n	104f4 <lv_img_decoder_close+0x18>
   10502:	4770      	bx	lr
   10504:	00012a6d 	.word	0x00012a6d

00010508 <lv_img_decoder_create>:
{
   10508:	b530      	push	{r4, r5, lr}
   1050a:	b083      	sub	sp, #12
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   1050c:	480d      	ldr	r0, [pc, #52]	; (10544 <lv_img_decoder_create+0x3c>)
   1050e:	4b0e      	ldr	r3, [pc, #56]	; (10548 <lv_img_decoder_create+0x40>)
   10510:	4798      	blx	r3
   10512:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
   10514:	4b0d      	ldr	r3, [pc, #52]	; (1054c <lv_img_decoder_create+0x44>)
   10516:	4798      	blx	r3
   10518:	b138      	cbz	r0, 1052a <lv_img_decoder_create+0x22>
    if(decoder == NULL) return NULL;
   1051a:	b11c      	cbz	r4, 10524 <lv_img_decoder_create+0x1c>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
   1051c:	2110      	movs	r1, #16
   1051e:	4620      	mov	r0, r4
   10520:	4b0b      	ldr	r3, [pc, #44]	; (10550 <lv_img_decoder_create+0x48>)
   10522:	4798      	blx	r3
}
   10524:	4620      	mov	r0, r4
   10526:	b003      	add	sp, #12
   10528:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_MEM(decoder);
   1052a:	4b0a      	ldr	r3, [pc, #40]	; (10554 <lv_img_decoder_create+0x4c>)
   1052c:	9300      	str	r3, [sp, #0]
   1052e:	22c9      	movs	r2, #201	; 0xc9
   10530:	4909      	ldr	r1, [pc, #36]	; (10558 <lv_img_decoder_create+0x50>)
   10532:	2003      	movs	r0, #3
   10534:	4d09      	ldr	r5, [pc, #36]	; (1055c <lv_img_decoder_create+0x54>)
   10536:	47a8      	blx	r5
   10538:	4622      	mov	r2, r4
   1053a:	2300      	movs	r3, #0
   1053c:	4808      	ldr	r0, [pc, #32]	; (10560 <lv_img_decoder_create+0x58>)
   1053e:	4909      	ldr	r1, [pc, #36]	; (10564 <lv_img_decoder_create+0x5c>)
   10540:	4788      	blx	r1
   10542:	e7fe      	b.n	10542 <lv_img_decoder_create+0x3a>
   10544:	20006cc0 	.word	0x20006cc0
   10548:	000124b9 	.word	0x000124b9
   1054c:	0000298d 	.word	0x0000298d
   10550:	000130df 	.word	0x000130df
   10554:	0001c7cc 	.word	0x0001c7cc
   10558:	0001c7fc 	.word	0x0001c7fc
   1055c:	00012805 	.word	0x00012805
   10560:	0001b4bc 	.word	0x0001b4bc
   10564:	00002995 	.word	0x00002995

00010568 <_lv_img_decoder_init>:
{
   10568:	b510      	push	{r4, lr}
   1056a:	b082      	sub	sp, #8
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   1056c:	2110      	movs	r1, #16
   1056e:	4814      	ldr	r0, [pc, #80]	; (105c0 <_lv_img_decoder_init+0x58>)
   10570:	4b14      	ldr	r3, [pc, #80]	; (105c4 <_lv_img_decoder_init+0x5c>)
   10572:	4798      	blx	r3
    decoder = lv_img_decoder_create();
   10574:	4b14      	ldr	r3, [pc, #80]	; (105c8 <_lv_img_decoder_init+0x60>)
   10576:	4798      	blx	r3
    if(decoder == NULL) {
   10578:	b148      	cbz	r0, 1058e <_lv_img_decoder_init+0x26>
    decoder->info_cb = info_cb;
   1057a:	4a14      	ldr	r2, [pc, #80]	; (105cc <_lv_img_decoder_init+0x64>)
   1057c:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
   1057e:	4a14      	ldr	r2, [pc, #80]	; (105d0 <_lv_img_decoder_init+0x68>)
   10580:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   10582:	4a14      	ldr	r2, [pc, #80]	; (105d4 <_lv_img_decoder_init+0x6c>)
   10584:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
   10586:	4a14      	ldr	r2, [pc, #80]	; (105d8 <_lv_img_decoder_init+0x70>)
   10588:	60c2      	str	r2, [r0, #12]
}
   1058a:	b002      	add	sp, #8
   1058c:	bd10      	pop	{r4, pc}
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   1058e:	4b13      	ldr	r3, [pc, #76]	; (105dc <_lv_img_decoder_init+0x74>)
   10590:	9300      	str	r3, [sp, #0]
   10592:	4b13      	ldr	r3, [pc, #76]	; (105e0 <_lv_img_decoder_init+0x78>)
   10594:	2247      	movs	r2, #71	; 0x47
   10596:	4913      	ldr	r1, [pc, #76]	; (105e4 <_lv_img_decoder_init+0x7c>)
   10598:	2002      	movs	r0, #2
   1059a:	4c13      	ldr	r4, [pc, #76]	; (105e8 <_lv_img_decoder_init+0x80>)
   1059c:	47a0      	blx	r4
        LV_ASSERT_MEM(decoder);
   1059e:	2000      	movs	r0, #0
   105a0:	4b12      	ldr	r3, [pc, #72]	; (105ec <_lv_img_decoder_init+0x84>)
   105a2:	4798      	blx	r3
   105a4:	2800      	cmp	r0, #0
   105a6:	d1f0      	bne.n	1058a <_lv_img_decoder_init+0x22>
   105a8:	4b0d      	ldr	r3, [pc, #52]	; (105e0 <_lv_img_decoder_init+0x78>)
   105aa:	9300      	str	r3, [sp, #0]
   105ac:	2248      	movs	r2, #72	; 0x48
   105ae:	490d      	ldr	r1, [pc, #52]	; (105e4 <_lv_img_decoder_init+0x7c>)
   105b0:	2003      	movs	r0, #3
   105b2:	47a0      	blx	r4
   105b4:	2200      	movs	r2, #0
   105b6:	2300      	movs	r3, #0
   105b8:	480d      	ldr	r0, [pc, #52]	; (105f0 <_lv_img_decoder_init+0x88>)
   105ba:	490e      	ldr	r1, [pc, #56]	; (105f4 <_lv_img_decoder_init+0x8c>)
   105bc:	4788      	blx	r1
   105be:	e7fe      	b.n	105be <_lv_img_decoder_init+0x56>
   105c0:	20006cc0 	.word	0x20006cc0
   105c4:	000124a1 	.word	0x000124a1
   105c8:	00010509 	.word	0x00010509
   105cc:	0000fa95 	.word	0x0000fa95
   105d0:	0000fbcd 	.word	0x0000fbcd
   105d4:	0000ff6d 	.word	0x0000ff6d
   105d8:	0000fb91 	.word	0x0000fb91
   105dc:	0001c984 	.word	0x0001c984
   105e0:	0001c7e4 	.word	0x0001c7e4
   105e4:	0001c7fc 	.word	0x0001c7fc
   105e8:	00012805 	.word	0x00012805
   105ec:	0000298d 	.word	0x0000298d
   105f0:	0001b4bc 	.word	0x0001b4bc
   105f4:	00002995 	.word	0x00002995

000105f8 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
   105f8:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
   105fa:	6843      	ldr	r3, [r0, #4]
   105fc:	4798      	blx	r3
}
   105fe:	bd08      	pop	{r3, pc}

00010600 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
   10600:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   10602:	6804      	ldr	r4, [r0, #0]
   10604:	47a0      	blx	r4
}
   10606:	bd10      	pop	{r4, pc}

00010608 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   10608:	b510      	push	{r4, lr}
   1060a:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   1060c:	4613      	mov	r3, r2
   1060e:	460a      	mov	r2, r1
   10610:	a901      	add	r1, sp, #4
   10612:	4c04      	ldr	r4, [pc, #16]	; (10624 <lv_font_get_glyph_width+0x1c>)
   10614:	47a0      	blx	r4
    if(ret) return g.adv_w;
   10616:	b118      	cbz	r0, 10620 <lv_font_get_glyph_width+0x18>
   10618:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
   1061c:	b004      	add	sp, #16
   1061e:	bd10      	pop	{r4, pc}
    else return 0;
   10620:	2000      	movs	r0, #0
   10622:	e7fb      	b.n	1061c <lv_font_get_glyph_width+0x14>
   10624:	00010601 	.word	0x00010601

00010628 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   10628:	7803      	ldrb	r3, [r0, #0]
   1062a:	780a      	ldrb	r2, [r1, #0]
   1062c:	4293      	cmp	r3, r2
   1062e:	bf11      	iteee	ne
   10630:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   10632:	7840      	ldrbeq	r0, [r0, #1]
   10634:	784b      	ldrbeq	r3, [r1, #1]
   10636:	1ac0      	subeq	r0, r0, r3

}
   10638:	4770      	bx	lr

0001063a <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   1063a:	8803      	ldrh	r3, [r0, #0]
   1063c:	880a      	ldrh	r2, [r1, #0]
   1063e:	4293      	cmp	r3, r2
   10640:	bf11      	iteee	ne
   10642:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   10644:	8840      	ldrheq	r0, [r0, #2]
   10646:	884b      	ldrheq	r3, [r1, #2]
   10648:	1ac0      	subeq	r0, r0, r3
}
   1064a:	4770      	bx	lr

0001064c <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
   1064c:	8800      	ldrh	r0, [r0, #0]
   1064e:	880b      	ldrh	r3, [r1, #0]
}
   10650:	1ac0      	subs	r0, r0, r3
   10652:	4770      	bx	lr

00010654 <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
   10654:	460b      	mov	r3, r1
   10656:	2900      	cmp	r1, #0
   10658:	d06c      	beq.n	10734 <get_glyph_dsc_id+0xe0>
{
   1065a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1065c:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1065e:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   10660:	69a2      	ldr	r2, [r4, #24]
   10662:	4291      	cmp	r1, r2
   10664:	d015      	beq.n	10692 <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
   10666:	8a67      	ldrh	r7, [r4, #18]
   10668:	f3c7 0709 	ubfx	r7, r7, #0, #10
   1066c:	2f00      	cmp	r7, #0
   1066e:	d05d      	beq.n	1072c <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   10670:	68a1      	ldr	r1, [r4, #8]
   10672:	6808      	ldr	r0, [r1, #0]
   10674:	1a1a      	subs	r2, r3, r0
   10676:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   10678:	8888      	ldrh	r0, [r1, #4]
   1067a:	4282      	cmp	r2, r0
   1067c:	d80b      	bhi.n	10696 <get_glyph_dsc_id+0x42>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1067e:	2600      	movs	r6, #0
   10680:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   10682:	7c8b      	ldrb	r3, [r1, #18]
   10684:	b9e3      	cbnz	r3, 106c0 <get_glyph_dsc_id+0x6c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   10686:	88c8      	ldrh	r0, [r1, #6]
   10688:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   1068a:	61a5      	str	r5, [r4, #24]
        fdsc->last_glyph_id = glyph_id;
   1068c:	61e0      	str	r0, [r4, #28]
}
   1068e:	b005      	add	sp, #20
   10690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   10692:	69e0      	ldr	r0, [r4, #28]
   10694:	e7fb      	b.n	1068e <get_glyph_dsc_id+0x3a>
        if(rcp > fdsc->cmaps[i].range_length) continue;
   10696:	2500      	movs	r5, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
   10698:	3501      	adds	r5, #1
   1069a:	b2ad      	uxth	r5, r5
   1069c:	42bd      	cmp	r5, r7
   1069e:	da45      	bge.n	1072c <get_glyph_dsc_id+0xd8>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   106a0:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   106a4:	0082      	lsls	r2, r0, #2
   106a6:	4616      	mov	r6, r2
   106a8:	eb01 0e02 	add.w	lr, r1, r2
   106ac:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   106b0:	1a9a      	subs	r2, r3, r2
   106b2:	9203      	str	r2, [sp, #12]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   106b4:	f8be 0004 	ldrh.w	r0, [lr, #4]
   106b8:	4282      	cmp	r2, r0
   106ba:	d8ed      	bhi.n	10698 <get_glyph_dsc_id+0x44>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   106bc:	4671      	mov	r1, lr
   106be:	e7df      	b.n	10680 <get_glyph_dsc_id+0x2c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   106c0:	2b01      	cmp	r3, #1
   106c2:	d005      	beq.n	106d0 <get_glyph_dsc_id+0x7c>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   106c4:	2b02      	cmp	r3, #2
   106c6:	d008      	beq.n	106da <get_glyph_dsc_id+0x86>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   106c8:	2b03      	cmp	r3, #3
   106ca:	d018      	beq.n	106fe <get_glyph_dsc_id+0xaa>
        uint32_t glyph_id = 0;
   106cc:	2000      	movs	r0, #0
   106ce:	e7dc      	b.n	1068a <get_glyph_dsc_id+0x36>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   106d0:	68cb      	ldr	r3, [r1, #12]
   106d2:	5c9b      	ldrb	r3, [r3, r2]
   106d4:	88c8      	ldrh	r0, [r1, #6]
   106d6:	4418      	add	r0, r3
   106d8:	e7d7      	b.n	1068a <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   106da:	8a0a      	ldrh	r2, [r1, #16]
   106dc:	6889      	ldr	r1, [r1, #8]
   106de:	4b16      	ldr	r3, [pc, #88]	; (10738 <get_glyph_dsc_id+0xe4>)
   106e0:	9300      	str	r3, [sp, #0]
   106e2:	2302      	movs	r3, #2
   106e4:	a803      	add	r0, sp, #12
   106e6:	4f15      	ldr	r7, [pc, #84]	; (1073c <get_glyph_dsc_id+0xe8>)
   106e8:	47b8      	blx	r7
            if(p) {
   106ea:	4603      	mov	r3, r0
   106ec:	b1d0      	cbz	r0, 10724 <get_glyph_dsc_id+0xd0>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   106ee:	68a2      	ldr	r2, [r4, #8]
   106f0:	4416      	add	r6, r2
   106f2:	68b0      	ldr	r0, [r6, #8]
   106f4:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   106f6:	88f3      	ldrh	r3, [r6, #6]
   106f8:	eb03 0050 	add.w	r0, r3, r0, lsr #1
   106fc:	e7c5      	b.n	1068a <get_glyph_dsc_id+0x36>
            uint8_t * p = _lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   106fe:	8a0a      	ldrh	r2, [r1, #16]
   10700:	6889      	ldr	r1, [r1, #8]
   10702:	4b0d      	ldr	r3, [pc, #52]	; (10738 <get_glyph_dsc_id+0xe4>)
   10704:	9300      	str	r3, [sp, #0]
   10706:	2302      	movs	r3, #2
   10708:	a803      	add	r0, sp, #12
   1070a:	4f0c      	ldr	r7, [pc, #48]	; (1073c <get_glyph_dsc_id+0xe8>)
   1070c:	47b8      	blx	r7
            if(p) {
   1070e:	b158      	cbz	r0, 10728 <get_glyph_dsc_id+0xd4>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   10710:	68a2      	ldr	r2, [r4, #8]
   10712:	4416      	add	r6, r2
   10714:	68b2      	ldr	r2, [r6, #8]
   10716:	1a83      	subs	r3, r0, r2
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   10718:	085b      	lsrs	r3, r3, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1071a:	68f2      	ldr	r2, [r6, #12]
   1071c:	5cd3      	ldrb	r3, [r2, r3]
   1071e:	88f0      	ldrh	r0, [r6, #6]
   10720:	4418      	add	r0, r3
   10722:	e7b2      	b.n	1068a <get_glyph_dsc_id+0x36>
        uint32_t glyph_id = 0;
   10724:	2000      	movs	r0, #0
   10726:	e7b0      	b.n	1068a <get_glyph_dsc_id+0x36>
   10728:	2000      	movs	r0, #0
   1072a:	e7ae      	b.n	1068a <get_glyph_dsc_id+0x36>
    fdsc->last_letter = letter;
   1072c:	61a3      	str	r3, [r4, #24]
    fdsc->last_glyph_id = 0;
   1072e:	2000      	movs	r0, #0
   10730:	61e0      	str	r0, [r4, #28]
    return 0;
   10732:	e7ac      	b.n	1068e <get_glyph_dsc_id+0x3a>
    if(letter == '\0') return 0;
   10734:	4608      	mov	r0, r1
   10736:	4770      	bx	lr
   10738:	0001064d 	.word	0x0001064d
   1073c:	0001472d 	.word	0x0001472d

00010740 <lv_font_get_bitmap_fmt_txt>:
{
   10740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10744:	b09f      	sub	sp, #124	; 0x7c
    if(unicode_letter == '\t') unicode_letter = ' ';
   10746:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   10748:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
   1074a:	bf08      	it	eq
   1074c:	2120      	moveq	r1, #32
   1074e:	4ba0      	ldr	r3, [pc, #640]	; (109d0 <lv_font_get_bitmap_fmt_txt+0x290>)
   10750:	4798      	blx	r3
    if(!gid) return NULL;
   10752:	2800      	cmp	r0, #0
   10754:	f000 84ea 	beq.w	1112c <lv_font_get_bitmap_fmt_txt+0x9ec>
   10758:	4680      	mov	r8, r0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1075a:	686f      	ldr	r7, [r5, #4]
   1075c:	eb07 06c0 	add.w	r6, r7, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   10760:	7d2b      	ldrb	r3, [r5, #20]
   10762:	f013 0f03 	tst.w	r3, #3
   10766:	d10b      	bne.n	10780 <lv_font_get_bitmap_fmt_txt+0x40>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   10768:	2e00      	cmp	r6, #0
   1076a:	f000 84e2 	beq.w	11132 <lv_font_get_bitmap_fmt_txt+0x9f2>
   1076e:	f857 3030 	ldr.w	r3, [r7, r0, lsl #3]
   10772:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10776:	6828      	ldr	r0, [r5, #0]
   10778:	4418      	add	r0, r3
}
   1077a:	b01f      	add	sp, #124	; 0x7c
   1077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
   10780:	7933      	ldrb	r3, [r6, #4]
   10782:	7974      	ldrb	r4, [r6, #5]
   10784:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
   10788:	2c00      	cmp	r4, #0
   1078a:	f000 84d5 	beq.w	11138 <lv_font_get_bitmap_fmt_txt+0x9f8>
        switch(fdsc->bpp) {
   1078e:	7ceb      	ldrb	r3, [r5, #19]
   10790:	f3c3 0383 	ubfx	r3, r3, #2, #4
   10794:	3b01      	subs	r3, #1
   10796:	2b03      	cmp	r3, #3
   10798:	d805      	bhi.n	107a6 <lv_font_get_bitmap_fmt_txt+0x66>
   1079a:	e8df f003 	tbb	[pc, r3]
   1079e:	7502      	.short	0x7502
   107a0:	7b78      	.short	0x7b78
                buf_size = (gsize + 7) >> 3;
   107a2:	3407      	adds	r4, #7
   107a4:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(decompr_buf) < buf_size) {
   107a6:	4b8b      	ldr	r3, [pc, #556]	; (109d4 <lv_font_get_bitmap_fmt_txt+0x294>)
   107a8:	6818      	ldr	r0, [r3, #0]
   107aa:	4b8b      	ldr	r3, [pc, #556]	; (109d8 <lv_font_get_bitmap_fmt_txt+0x298>)
   107ac:	4798      	blx	r3
   107ae:	4284      	cmp	r4, r0
   107b0:	d911      	bls.n	107d6 <lv_font_get_bitmap_fmt_txt+0x96>
            decompr_buf = lv_mem_realloc(decompr_buf, buf_size);
   107b2:	f8df 9220 	ldr.w	r9, [pc, #544]	; 109d4 <lv_font_get_bitmap_fmt_txt+0x294>
   107b6:	4621      	mov	r1, r4
   107b8:	f8d9 0000 	ldr.w	r0, [r9]
   107bc:	4b87      	ldr	r3, [pc, #540]	; (109dc <lv_font_get_bitmap_fmt_txt+0x29c>)
   107be:	4798      	blx	r3
   107c0:	f8c9 0000 	str.w	r0, [r9]
            LV_ASSERT_MEM(decompr_buf);
   107c4:	4b86      	ldr	r3, [pc, #536]	; (109e0 <lv_font_get_bitmap_fmt_txt+0x2a0>)
   107c6:	4798      	blx	r3
   107c8:	2800      	cmp	r0, #0
   107ca:	d066      	beq.n	1089a <lv_font_get_bitmap_fmt_txt+0x15a>
            if(decompr_buf == NULL) return NULL;
   107cc:	4b81      	ldr	r3, [pc, #516]	; (109d4 <lv_font_get_bitmap_fmt_txt+0x294>)
   107ce:	681b      	ldr	r3, [r3, #0]
   107d0:	2b00      	cmp	r3, #0
   107d2:	f000 84b4 	beq.w	1113e <lv_font_get_bitmap_fmt_txt+0x9fe>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], decompr_buf, gdsc->box_w, gdsc->box_h, (uint8_t)fdsc->bpp);
   107d6:	f857 1038 	ldr.w	r1, [r7, r8, lsl #3]
   107da:	f3c1 0113 	ubfx	r1, r1, #0, #20
   107de:	682b      	ldr	r3, [r5, #0]
   107e0:	4419      	add	r1, r3
   107e2:	4b7c      	ldr	r3, [pc, #496]	; (109d4 <lv_font_get_bitmap_fmt_txt+0x294>)
   107e4:	f8d3 9000 	ldr.w	r9, [r3]
   107e8:	7933      	ldrb	r3, [r6, #4]
   107ea:	930c      	str	r3, [sp, #48]	; 0x30
   107ec:	469b      	mov	fp, r3
   107ee:	b21a      	sxth	r2, r3
   107f0:	4617      	mov	r7, r2
   107f2:	9218      	str	r2, [sp, #96]	; 0x60
   107f4:	7972      	ldrb	r2, [r6, #5]
   107f6:	9215      	str	r2, [sp, #84]	; 0x54
   107f8:	7cea      	ldrb	r2, [r5, #19]
   107fa:	f3c2 0283 	ubfx	r2, r2, #2, #4
   107fe:	b2d3      	uxtb	r3, r2
   10800:	930f      	str	r3, [sp, #60]	; 0x3c
    if(bpp == 3) wr_size = 4;
   10802:	2b03      	cmp	r3, #3
   10804:	bf14      	ite	ne
   10806:	4618      	movne	r0, r3
   10808:	2004      	moveq	r0, #4
   1080a:	9008      	str	r0, [sp, #32]
    rle_in = in;
   1080c:	4b71      	ldr	r3, [pc, #452]	; (109d4 <lv_font_get_bitmap_fmt_txt+0x294>)
   1080e:	6059      	str	r1, [r3, #4]
    rle_bpp = bpp;
   10810:	721a      	strb	r2, [r3, #8]
    rle_state = RLE_STATE_SINGLE;
   10812:	2200      	movs	r2, #0
   10814:	725a      	strb	r2, [r3, #9]
    rle_rdp = 0;
   10816:	60da      	str	r2, [r3, #12]
    rle_prev_v = 0;
   10818:	741a      	strb	r2, [r3, #16]
    rle_cnt = 0;
   1081a:	745a      	strb	r2, [r3, #17]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
   1081c:	4658      	mov	r0, fp
   1081e:	4c71      	ldr	r4, [pc, #452]	; (109e4 <lv_font_get_bitmap_fmt_txt+0x2a4>)
   10820:	47a0      	blx	r4
   10822:	9016      	str	r0, [sp, #88]	; 0x58
    uint8_t * line_buf2 = _lv_mem_buf_get(w);
   10824:	4658      	mov	r0, fp
   10826:	47a0      	blx	r4
   10828:	9017      	str	r0, [sp, #92]	; 0x5c
    for(i = 0; i < w; i++) {
   1082a:	2f00      	cmp	r7, #0
   1082c:	f000 8251 	beq.w	10cd2 <lv_font_get_bitmap_fmt_txt+0x592>
   10830:	4b68      	ldr	r3, [pc, #416]	; (109d4 <lv_font_get_bitmap_fmt_txt+0x294>)
   10832:	7c19      	ldrb	r1, [r3, #16]
   10834:	9103      	str	r1, [sp, #12]
   10836:	7c5c      	ldrb	r4, [r3, #17]
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   10838:	685f      	ldr	r7, [r3, #4]
   1083a:	68dd      	ldr	r5, [r3, #12]
   1083c:	f893 a008 	ldrb.w	sl, [r3, #8]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10840:	2201      	movs	r2, #1
   10842:	fa02 f20a 	lsl.w	r2, r2, sl
   10846:	1e51      	subs	r1, r2, #1
    if(bit_pos + len >= 8) {
   10848:	46d0      	mov	r8, sl
   1084a:	f1ca 0608 	rsb	r6, sl, #8
   1084e:	960a      	str	r6, [sp, #40]	; 0x28
   10850:	f1ca 0610 	rsb	r6, sl, #16
   10854:	9609      	str	r6, [sp, #36]	; 0x24
   10856:	f893 c009 	ldrb.w	ip, [r3, #9]
   1085a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1085c:	f100 3eff 	add.w	lr, r0, #4294967295
   10860:	f10b 33ff 	add.w	r3, fp, #4294967295
   10864:	b29b      	uxth	r3, r3
   10866:	930d      	str	r3, [sp, #52]	; 0x34
   10868:	eb00 0b03 	add.w	fp, r0, r3
   1086c:	4676      	mov	r6, lr
   1086e:	2300      	movs	r3, #0
   10870:	9305      	str	r3, [sp, #20]
   10872:	9307      	str	r3, [sp, #28]
   10874:	461a      	mov	r2, r3
    switch(len) {
   10876:	f10a 3aff 	add.w	sl, sl, #4294967295
            rle_rdp += rle_bpp;
   1087a:	2301      	movs	r3, #1
   1087c:	9304      	str	r3, [sp, #16]
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1087e:	b2cb      	uxtb	r3, r1
   10880:	930b      	str	r3, [sp, #44]	; 0x2c
            bit_mask = 0x3;
   10882:	9206      	str	r2, [sp, #24]
   10884:	4661      	mov	r1, ip
   10886:	e034      	b.n	108f2 <lv_font_get_bitmap_fmt_txt+0x1b2>
                buf_size = (gsize + 3) >> 2;
   10888:	3403      	adds	r4, #3
   1088a:	08a4      	lsrs	r4, r4, #2
                break;
   1088c:	e78b      	b.n	107a6 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
   1088e:	3401      	adds	r4, #1
   10890:	0864      	lsrs	r4, r4, #1
                break;
   10892:	e788      	b.n	107a6 <lv_font_get_bitmap_fmt_txt+0x66>
                buf_size = (gsize + 1) >> 1;
   10894:	3401      	adds	r4, #1
   10896:	0864      	lsrs	r4, r4, #1
                break;
   10898:	e785      	b.n	107a6 <lv_font_get_bitmap_fmt_txt+0x66>
            LV_ASSERT_MEM(decompr_buf);
   1089a:	4b53      	ldr	r3, [pc, #332]	; (109e8 <lv_font_get_bitmap_fmt_txt+0x2a8>)
   1089c:	9300      	str	r3, [sp, #0]
   1089e:	2272      	movs	r2, #114	; 0x72
   108a0:	4952      	ldr	r1, [pc, #328]	; (109ec <lv_font_get_bitmap_fmt_txt+0x2ac>)
   108a2:	2003      	movs	r0, #3
   108a4:	4c52      	ldr	r4, [pc, #328]	; (109f0 <lv_font_get_bitmap_fmt_txt+0x2b0>)
   108a6:	47a0      	blx	r4
   108a8:	f8d9 2000 	ldr.w	r2, [r9]
   108ac:	2300      	movs	r3, #0
   108ae:	4851      	ldr	r0, [pc, #324]	; (109f4 <lv_font_get_bitmap_fmt_txt+0x2b4>)
   108b0:	4951      	ldr	r1, [pc, #324]	; (109f8 <lv_font_get_bitmap_fmt_txt+0x2b8>)
   108b2:	4788      	blx	r1
   108b4:	e7fe      	b.n	108b4 <lv_font_get_bitmap_fmt_txt+0x174>
            bit_mask = 0x3;
   108b6:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   108b8:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
   108ba:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
   108be:	eb02 0c08 	add.w	ip, r2, r8
   108c2:	f1bc 0f07 	cmp.w	ip, #7
   108c6:	d835      	bhi.n	10934 <lv_font_get_bitmap_fmt_txt+0x1f4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   108c8:	f817 c003 	ldrb.w	ip, [r7, r3]
   108cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108ce:	1a9a      	subs	r2, r3, r2
   108d0:	fa4c f302 	asr.w	r3, ip, r2
   108d4:	4003      	ands	r3, r0
        if(rle_rdp != 0 && rle_prev_v == ret) {
   108d6:	b115      	cbz	r5, 108de <lv_font_get_bitmap_fmt_txt+0x19e>
   108d8:	9a03      	ldr	r2, [sp, #12]
   108da:	4293      	cmp	r3, r2
   108dc:	d038      	beq.n	10950 <lv_font_get_bitmap_fmt_txt+0x210>
        rle_rdp += rle_bpp;
   108de:	4445      	add	r5, r8
        rle_prev_v = ret;
   108e0:	9303      	str	r3, [sp, #12]
        rle_rdp += rle_bpp;
   108e2:	2201      	movs	r2, #1
   108e4:	9804      	ldr	r0, [sp, #16]
   108e6:	9006      	str	r0, [sp, #24]
        out[i] = rle_next();
   108e8:	f806 3f01 	strb.w	r3, [r6, #1]!
    for(i = 0; i < w; i++) {
   108ec:	455e      	cmp	r6, fp
   108ee:	f000 814e 	beq.w	10b8e <lv_font_get_bitmap_fmt_txt+0x44e>
    if(rle_state == RLE_STATE_SINGLE) {
   108f2:	bba1      	cbnz	r1, 1095e <lv_font_get_bitmap_fmt_txt+0x21e>
    switch(len) {
   108f4:	f1ba 0f07 	cmp.w	sl, #7
   108f8:	d818      	bhi.n	1092c <lv_font_get_bitmap_fmt_txt+0x1ec>
   108fa:	a301      	add	r3, pc, #4	; (adr r3, 10900 <lv_font_get_bitmap_fmt_txt+0x1c0>)
   108fc:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   10900:	00010931 	.word	0x00010931
   10904:	000108b7 	.word	0x000108b7
   10908:	00010921 	.word	0x00010921
   1090c:	00010925 	.word	0x00010925
   10910:	0001092d 	.word	0x0001092d
   10914:	0001092d 	.word	0x0001092d
   10918:	0001092d 	.word	0x0001092d
   1091c:	00010929 	.word	0x00010929
            bit_mask = 0x7;
   10920:	2007      	movs	r0, #7
   10922:	e7c9      	b.n	108b8 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = 0xF;
   10924:	200f      	movs	r0, #15
   10926:	e7c7      	b.n	108b8 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = 0xFF;
   10928:	20ff      	movs	r0, #255	; 0xff
   1092a:	e7c5      	b.n	108b8 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   1092c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1092e:	e7c3      	b.n	108b8 <lv_font_get_bitmap_fmt_txt+0x178>
            bit_mask = 0x1;
   10930:	2001      	movs	r0, #1
   10932:	e7c1      	b.n	108b8 <lv_font_get_bitmap_fmt_txt+0x178>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10934:	f817 c003 	ldrb.w	ip, [r7, r3]
   10938:	443b      	add	r3, r7
   1093a:	785b      	ldrb	r3, [r3, #1]
   1093c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10940:	fa1f fc83 	uxth.w	ip, r3
   10944:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10946:	1a9a      	subs	r2, r3, r2
   10948:	fa4c f302 	asr.w	r3, ip, r2
   1094c:	4003      	ands	r3, r0
   1094e:	e7c2      	b.n	108d6 <lv_font_get_bitmap_fmt_txt+0x196>
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10950:	2201      	movs	r2, #1
   10952:	9205      	str	r2, [sp, #20]
            rle_cnt = 0;
   10954:	2400      	movs	r4, #0
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10956:	9a04      	ldr	r2, [sp, #16]
   10958:	9207      	str	r2, [sp, #28]
            rle_state = RLE_STATE_REPEATE;
   1095a:	4611      	mov	r1, r2
   1095c:	e7bf      	b.n	108de <lv_font_get_bitmap_fmt_txt+0x19e>
    else if(rle_state == RLE_STATE_REPEATE) {
   1095e:	2901      	cmp	r1, #1
   10960:	d004      	beq.n	1096c <lv_font_get_bitmap_fmt_txt+0x22c>
    else if(rle_state == RLE_STATE_COUNTER) {
   10962:	2902      	cmp	r1, #2
   10964:	f000 80cd 	beq.w	10b02 <lv_font_get_bitmap_fmt_txt+0x3c2>
    uint8_t ret = 0;
   10968:	2300      	movs	r3, #0
   1096a:	e7bd      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
    uint32_t byte_pos = bit_pos >> 3;
   1096c:	08eb      	lsrs	r3, r5, #3
    bit_pos = bit_pos & 0x7;
   1096e:	f005 0207 	and.w	r2, r5, #7
    if(bit_pos + len >= 8) {
   10972:	f102 0c01 	add.w	ip, r2, #1
   10976:	f1bc 0f07 	cmp.w	ip, #7
   1097a:	d813      	bhi.n	109a4 <lv_font_get_bitmap_fmt_txt+0x264>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   1097c:	5cfb      	ldrb	r3, [r7, r3]
   1097e:	43d2      	mvns	r2, r2
   10980:	3208      	adds	r2, #8
   10982:	4113      	asrs	r3, r2
   10984:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
   10988:	3401      	adds	r4, #1
   1098a:	b2e4      	uxtb	r4, r4
        rle_rdp += 1;
   1098c:	1c6a      	adds	r2, r5, #1
        if(v == 1) {
   1098e:	b9b3      	cbnz	r3, 109be <lv_font_get_bitmap_fmt_txt+0x27e>
    switch(len) {
   10990:	f1ba 0f07 	cmp.w	sl, #7
   10994:	f200 80a5 	bhi.w	10ae2 <lv_font_get_bitmap_fmt_txt+0x3a2>
   10998:	e8df f00a 	tbb	[pc, sl]
   1099c:	9f9d84a5 	.word	0x9f9d84a5
   109a0:	a1a3a3a3 	.word	0xa1a3a3a3
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   109a4:	f817 c003 	ldrb.w	ip, [r7, r3]
   109a8:	443b      	add	r3, r7
   109aa:	785b      	ldrb	r3, [r3, #1]
   109ac:	eb03 230c 	add.w	r3, r3, ip, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   109b0:	b29b      	uxth	r3, r3
   109b2:	43d2      	mvns	r2, r2
   109b4:	3210      	adds	r2, #16
   109b6:	4113      	asrs	r3, r2
   109b8:	f003 0301 	and.w	r3, r3, #1
   109bc:	e7e4      	b.n	10988 <lv_font_get_bitmap_fmt_txt+0x248>
            if(rle_cnt == 11) {
   109be:	2c0b      	cmp	r4, #11
   109c0:	d01c      	beq.n	109fc <lv_font_get_bitmap_fmt_txt+0x2bc>
        rle_rdp += 1;
   109c2:	4615      	mov	r5, r2
            ret = rle_prev_v;
   109c4:	9b03      	ldr	r3, [sp, #12]
            if(rle_cnt == 11) {
   109c6:	2201      	movs	r2, #1
   109c8:	9205      	str	r2, [sp, #20]
   109ca:	9a04      	ldr	r2, [sp, #16]
   109cc:	e78c      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
   109ce:	bf00      	nop
   109d0:	00010655 	.word	0x00010655
   109d4:	20002b5c 	.word	0x20002b5c
   109d8:	00012af9 	.word	0x00012af9
   109dc:	00012e41 	.word	0x00012e41
   109e0:	0000298d 	.word	0x0000298d
   109e4:	00012ee5 	.word	0x00012ee5
   109e8:	0001c9a8 	.word	0x0001c9a8
   109ec:	0001c9c4 	.word	0x0001c9c4
   109f0:	00012805 	.word	0x00012805
   109f4:	0001b4bc 	.word	0x0001b4bc
   109f8:	00002995 	.word	0x00002995
    uint32_t byte_pos = bit_pos >> 3;
   109fc:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
   109fe:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
   10a02:	1d91      	adds	r1, r2, #6
   10a04:	2907      	cmp	r1, #7
   10a06:	d813      	bhi.n	10a30 <lv_font_get_bitmap_fmt_txt+0x2f0>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10a08:	5cfc      	ldrb	r4, [r7, r3]
   10a0a:	f1c2 0202 	rsb	r2, r2, #2
   10a0e:	fa44 f202 	asr.w	r2, r4, r2
   10a12:	f002 043f 	and.w	r4, r2, #63	; 0x3f
                rle_rdp += 6;
   10a16:	3507      	adds	r5, #7
                if(rle_cnt != 0) {
   10a18:	2c00      	cmp	r4, #0
   10a1a:	f040 80ad 	bne.w	10b78 <lv_font_get_bitmap_fmt_txt+0x438>
    switch(len) {
   10a1e:	f1ba 0f07 	cmp.w	sl, #7
   10a22:	d826      	bhi.n	10a72 <lv_font_get_bitmap_fmt_txt+0x332>
   10a24:	e8df f00a 	tbb	[pc, sl]
   10a28:	211f1027 	.word	0x211f1027
   10a2c:	23252525 	.word	0x23252525
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10a30:	5cf9      	ldrb	r1, [r7, r3]
   10a32:	443b      	add	r3, r7
   10a34:	785c      	ldrb	r4, [r3, #1]
   10a36:	eb04 2401 	add.w	r4, r4, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10a3a:	b2a4      	uxth	r4, r4
   10a3c:	f1c2 020a 	rsb	r2, r2, #10
   10a40:	4114      	asrs	r4, r2
   10a42:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   10a46:	e7e6      	b.n	10a16 <lv_font_get_bitmap_fmt_txt+0x2d6>
            bit_mask = 0x3;
   10a48:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   10a4a:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
   10a4c:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
   10a50:	eb03 0108 	add.w	r1, r3, r8
   10a54:	2907      	cmp	r1, #7
   10a56:	d810      	bhi.n	10a7a <lv_font_get_bitmap_fmt_txt+0x33a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10a58:	5cba      	ldrb	r2, [r7, r2]
   10a5a:	990a      	ldr	r1, [sp, #40]	; 0x28
   10a5c:	1acb      	subs	r3, r1, r3
   10a5e:	fa42 f303 	asr.w	r3, r2, r3
   10a62:	4003      	ands	r3, r0
   10a64:	e014      	b.n	10a90 <lv_font_get_bitmap_fmt_txt+0x350>
            bit_mask = 0x7;
   10a66:	2007      	movs	r0, #7
   10a68:	e7ef      	b.n	10a4a <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = 0xF;
   10a6a:	200f      	movs	r0, #15
   10a6c:	e7ed      	b.n	10a4a <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = 0xFF;
   10a6e:	20ff      	movs	r0, #255	; 0xff
   10a70:	e7eb      	b.n	10a4a <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10a72:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a74:	e7e9      	b.n	10a4a <lv_font_get_bitmap_fmt_txt+0x30a>
            bit_mask = 0x1;
   10a76:	2001      	movs	r0, #1
   10a78:	e7e7      	b.n	10a4a <lv_font_get_bitmap_fmt_txt+0x30a>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10a7a:	5cb9      	ldrb	r1, [r7, r2]
   10a7c:	443a      	add	r2, r7
   10a7e:	7852      	ldrb	r2, [r2, #1]
   10a80:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10a84:	b292      	uxth	r2, r2
   10a86:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a88:	1acb      	subs	r3, r1, r3
   10a8a:	fa42 f303 	asr.w	r3, r2, r3
   10a8e:	4003      	ands	r3, r0
                    rle_rdp += rle_bpp;
   10a90:	4445      	add	r5, r8
                    rle_prev_v = ret;
   10a92:	9303      	str	r3, [sp, #12]
                    rle_rdp += rle_bpp;
   10a94:	2201      	movs	r2, #1
   10a96:	9205      	str	r2, [sp, #20]
   10a98:	9804      	ldr	r0, [sp, #16]
   10a9a:	4602      	mov	r2, r0
   10a9c:	9007      	str	r0, [sp, #28]
                    rle_state = RLE_STATE_SINGLE;
   10a9e:	2100      	movs	r1, #0
                    rle_rdp += rle_bpp;
   10aa0:	9006      	str	r0, [sp, #24]
   10aa2:	e721      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
            bit_mask = 0x3;
   10aa4:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   10aa6:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
   10aa8:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
   10aac:	eb03 0508 	add.w	r5, r3, r8
   10ab0:	2d07      	cmp	r5, #7
   10ab2:	d81a      	bhi.n	10aea <lv_font_get_bitmap_fmt_txt+0x3aa>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10ab4:	5c79      	ldrb	r1, [r7, r1]
   10ab6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10ab8:	1aeb      	subs	r3, r5, r3
   10aba:	fa41 f303 	asr.w	r3, r1, r3
   10abe:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
   10ac0:	eb02 0508 	add.w	r5, r2, r8
            rle_prev_v = ret;
   10ac4:	9303      	str	r3, [sp, #12]
            rle_rdp += rle_bpp;
   10ac6:	2201      	movs	r2, #1
   10ac8:	9205      	str	r2, [sp, #20]
   10aca:	9804      	ldr	r0, [sp, #16]
   10acc:	4602      	mov	r2, r0
   10ace:	9007      	str	r0, [sp, #28]
            rle_state = RLE_STATE_SINGLE;
   10ad0:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
   10ad2:	9006      	str	r0, [sp, #24]
   10ad4:	e708      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
            bit_mask = 0x7;
   10ad6:	2007      	movs	r0, #7
   10ad8:	e7e5      	b.n	10aa6 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = 0xF;
   10ada:	200f      	movs	r0, #15
   10adc:	e7e3      	b.n	10aa6 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = 0xFF;
   10ade:	20ff      	movs	r0, #255	; 0xff
   10ae0:	e7e1      	b.n	10aa6 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10ae2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10ae4:	e7df      	b.n	10aa6 <lv_font_get_bitmap_fmt_txt+0x366>
            bit_mask = 0x1;
   10ae6:	2001      	movs	r0, #1
   10ae8:	e7dd      	b.n	10aa6 <lv_font_get_bitmap_fmt_txt+0x366>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10aea:	5c7d      	ldrb	r5, [r7, r1]
   10aec:	4439      	add	r1, r7
   10aee:	7849      	ldrb	r1, [r1, #1]
   10af0:	eb01 2105 	add.w	r1, r1, r5, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10af4:	b289      	uxth	r1, r1
   10af6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   10af8:	1aeb      	subs	r3, r5, r3
   10afa:	fa41 f303 	asr.w	r3, r1, r3
   10afe:	4003      	ands	r3, r0
   10b00:	e7de      	b.n	10ac0 <lv_font_get_bitmap_fmt_txt+0x380>
        rle_cnt--;
   10b02:	3c01      	subs	r4, #1
        if(rle_cnt == 0) {
   10b04:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10b08:	d13d      	bne.n	10b86 <lv_font_get_bitmap_fmt_txt+0x446>
    switch(len) {
   10b0a:	f1ba 0f07 	cmp.w	sl, #7
   10b0e:	d823      	bhi.n	10b58 <lv_font_get_bitmap_fmt_txt+0x418>
   10b10:	e8df f00a 	tbb	[pc, sl]
   10b14:	1e1c0424 	.word	0x1e1c0424
   10b18:	20222222 	.word	0x20222222
            bit_mask = 0x3;
   10b1c:	2003      	movs	r0, #3
    uint32_t byte_pos = bit_pos >> 3;
   10b1e:	08ea      	lsrs	r2, r5, #3
    bit_pos = bit_pos & 0x7;
   10b20:	f005 0307 	and.w	r3, r5, #7
    if(bit_pos + len >= 8) {
   10b24:	eb03 0108 	add.w	r1, r3, r8
   10b28:	2907      	cmp	r1, #7
   10b2a:	d819      	bhi.n	10b60 <lv_font_get_bitmap_fmt_txt+0x420>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10b2c:	5cba      	ldrb	r2, [r7, r2]
   10b2e:	990a      	ldr	r1, [sp, #40]	; 0x28
   10b30:	1acb      	subs	r3, r1, r3
   10b32:	fa42 f303 	asr.w	r3, r2, r3
   10b36:	4003      	ands	r3, r0
            rle_rdp += rle_bpp;
   10b38:	4445      	add	r5, r8
            rle_prev_v = ret;
   10b3a:	9303      	str	r3, [sp, #12]
            rle_rdp += rle_bpp;
   10b3c:	2201      	movs	r2, #1
   10b3e:	9205      	str	r2, [sp, #20]
   10b40:	9804      	ldr	r0, [sp, #16]
   10b42:	4602      	mov	r2, r0
   10b44:	9007      	str	r0, [sp, #28]
            rle_state = RLE_STATE_SINGLE;
   10b46:	2100      	movs	r1, #0
            rle_rdp += rle_bpp;
   10b48:	9006      	str	r0, [sp, #24]
   10b4a:	e6cd      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
            bit_mask = 0x7;
   10b4c:	2007      	movs	r0, #7
   10b4e:	e7e6      	b.n	10b1e <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = 0xF;
   10b50:	200f      	movs	r0, #15
   10b52:	e7e4      	b.n	10b1e <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = 0xFF;
   10b54:	20ff      	movs	r0, #255	; 0xff
   10b56:	e7e2      	b.n	10b1e <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10b58:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b5a:	e7e0      	b.n	10b1e <lv_font_get_bitmap_fmt_txt+0x3de>
            bit_mask = 0x1;
   10b5c:	2001      	movs	r0, #1
   10b5e:	e7de      	b.n	10b1e <lv_font_get_bitmap_fmt_txt+0x3de>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10b60:	5cb9      	ldrb	r1, [r7, r2]
   10b62:	443a      	add	r2, r7
   10b64:	7852      	ldrb	r2, [r2, #1]
   10b66:	eb02 2201 	add.w	r2, r2, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10b6a:	b292      	uxth	r2, r2
   10b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   10b6e:	1acb      	subs	r3, r1, r3
   10b70:	fa42 f303 	asr.w	r3, r2, r3
   10b74:	4003      	ands	r3, r0
   10b76:	e7df      	b.n	10b38 <lv_font_get_bitmap_fmt_txt+0x3f8>
            ret = rle_prev_v;
   10b78:	9b03      	ldr	r3, [sp, #12]
                if(rle_cnt != 0) {
   10b7a:	2201      	movs	r2, #1
   10b7c:	9205      	str	r2, [sp, #20]
   10b7e:	9a04      	ldr	r2, [sp, #16]
   10b80:	9207      	str	r2, [sp, #28]
                    rle_state = RLE_STATE_COUNTER;
   10b82:	2102      	movs	r1, #2
   10b84:	e6b0      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
        ret = rle_prev_v;
   10b86:	9b03      	ldr	r3, [sp, #12]
        if(rle_cnt == 0) {
   10b88:	2001      	movs	r0, #1
   10b8a:	9005      	str	r0, [sp, #20]
   10b8c:	e6ac      	b.n	108e8 <lv_font_get_bitmap_fmt_txt+0x1a8>
   10b8e:	9806      	ldr	r0, [sp, #24]
   10b90:	468c      	mov	ip, r1
   10b92:	b9c8      	cbnz	r0, 10bc8 <lv_font_get_bitmap_fmt_txt+0x488>
   10b94:	b10a      	cbz	r2, 10b9a <lv_font_get_bitmap_fmt_txt+0x45a>
   10b96:	4b9f      	ldr	r3, [pc, #636]	; (10e14 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   10b98:	60dd      	str	r5, [r3, #12]
   10b9a:	9b07      	ldr	r3, [sp, #28]
   10b9c:	b113      	cbz	r3, 10ba4 <lv_font_get_bitmap_fmt_txt+0x464>
   10b9e:	4b9d      	ldr	r3, [pc, #628]	; (10e14 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   10ba0:	f883 c009 	strb.w	ip, [r3, #9]
   10ba4:	9b05      	ldr	r3, [sp, #20]
   10ba6:	b10b      	cbz	r3, 10bac <lv_font_get_bitmap_fmt_txt+0x46c>
   10ba8:	4b9a      	ldr	r3, [pc, #616]	; (10e14 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   10baa:	745c      	strb	r4, [r3, #17]
            rle_rdp += rle_bpp;
   10bac:	2000      	movs	r0, #0
    if(len == 3) {
   10bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10bb0:	9303      	str	r3, [sp, #12]
        len = 4;
   10bb2:	2704      	movs	r7, #4
                val = 15;
   10bb4:	f04f 0c0f 	mov.w	ip, #15
                val = 13;
   10bb8:	f04f 080d 	mov.w	r8, #13
                val = 11;
   10bbc:	f04f 0a0b 	mov.w	sl, #11
                val = 9;
   10bc0:	f04f 0b09 	mov.w	fp, #9
                val = 4;
   10bc4:	9704      	str	r7, [sp, #16]
   10bc6:	e028      	b.n	10c1a <lv_font_get_bitmap_fmt_txt+0x4da>
   10bc8:	4b92      	ldr	r3, [pc, #584]	; (10e14 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   10bca:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10bce:	7419      	strb	r1, [r3, #16]
   10bd0:	e7e0      	b.n	10b94 <lv_font_get_bitmap_fmt_txt+0x454>
        switch(val) {
   10bd2:	2907      	cmp	r1, #7
   10bd4:	d83d      	bhi.n	10c52 <lv_font_get_bitmap_fmt_txt+0x512>
   10bd6:	e8df f001 	tbb	[pc, r1]
   10bda:	2704      	.short	0x2704
   10bdc:	33302d2a 	.word	0x33302d2a
   10be0:	3936      	.short	0x3936
        len = 4;
   10be2:	463d      	mov	r5, r7
                val = 0;
   10be4:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
   10be6:	f000 0207 	and.w	r2, r0, #7
   10bea:	f1c2 0208 	rsb	r2, r2, #8
    bit_pos = 8 - bit_pos - len;
   10bee:	1b52      	subs	r2, r2, r5
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   10bf0:	f3c0 04cf 	ubfx	r4, r0, #3, #16
   10bf4:	f04f 33ff 	mov.w	r3, #4294967295
   10bf8:	40ab      	lsls	r3, r5
   10bfa:	f063 03ff 	orn	r3, r3, #255	; 0xff
   10bfe:	4093      	lsls	r3, r2
   10c00:	f819 5004 	ldrb.w	r5, [r9, r4]
   10c04:	402b      	ands	r3, r5
    out[byte_pos] |= (val << bit_pos);
   10c06:	fa01 f202 	lsl.w	r2, r1, r2
   10c0a:	4313      	orrs	r3, r2
   10c0c:	f809 3004 	strb.w	r3, [r9, r4]
        wrp += wr_size;
   10c10:	9a08      	ldr	r2, [sp, #32]
   10c12:	4613      	mov	r3, r2
   10c14:	4410      	add	r0, r2
    for(x = 0; x < w; x++) {
   10c16:	45b6      	cmp	lr, r6
   10c18:	d01d      	beq.n	10c56 <lv_font_get_bitmap_fmt_txt+0x516>
        bits_write(out, wrp, line_buf1[x], bpp);
   10c1a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    if(len == 3) {
   10c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10c20:	2b03      	cmp	r3, #3
   10c22:	d0d6      	beq.n	10bd2 <lv_font_get_bitmap_fmt_txt+0x492>
   10c24:	9d03      	ldr	r5, [sp, #12]
   10c26:	e7de      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c28:	463d      	mov	r5, r7
                val = 2;
   10c2a:	2102      	movs	r1, #2
   10c2c:	e7db      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c2e:	463d      	mov	r5, r7
                val = 4;
   10c30:	9904      	ldr	r1, [sp, #16]
   10c32:	e7d8      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c34:	463d      	mov	r5, r7
                val = 6;
   10c36:	2106      	movs	r1, #6
   10c38:	e7d5      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c3a:	463d      	mov	r5, r7
                val = 9;
   10c3c:	4659      	mov	r1, fp
   10c3e:	e7d2      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c40:	463d      	mov	r5, r7
                val = 11;
   10c42:	4651      	mov	r1, sl
   10c44:	e7cf      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c46:	463d      	mov	r5, r7
                val = 13;
   10c48:	4641      	mov	r1, r8
   10c4a:	e7cc      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c4c:	463d      	mov	r5, r7
                val = 15;
   10c4e:	4661      	mov	r1, ip
   10c50:	e7c9      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
        len = 4;
   10c52:	463d      	mov	r5, r7
   10c54:	e7c7      	b.n	10be6 <lv_font_get_bitmap_fmt_txt+0x4a6>
   10c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10c58:	fb02 3303 	mla	r3, r2, r3, r3
   10c5c:	930e      	str	r3, [sp, #56]	; 0x38
    for(y = 1; y < h; y++) {
   10c5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10c60:	2b01      	cmp	r3, #1
   10c62:	f340 8255 	ble.w	11110 <lv_font_get_bitmap_fmt_txt+0x9d0>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
   10c66:	4b6b      	ldr	r3, [pc, #428]	; (10e14 <lv_font_get_bitmap_fmt_txt+0x6d4>)
   10c68:	f8d3 8004 	ldr.w	r8, [r3, #4]
   10c6c:	7a1a      	ldrb	r2, [r3, #8]
   10c6e:	4610      	mov	r0, r2
   10c70:	9219      	str	r2, [sp, #100]	; 0x64
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10c72:	2201      	movs	r2, #1
   10c74:	fa02 f100 	lsl.w	r1, r2, r0
   10c78:	3901      	subs	r1, #1
   10c7a:	b2c9      	uxtb	r1, r1
   10c7c:	911b      	str	r1, [sp, #108]	; 0x6c
    if(bit_pos + len >= 8) {
   10c7e:	4601      	mov	r1, r0
   10c80:	4682      	mov	sl, r0
   10c82:	7c58      	ldrb	r0, [r3, #17]
   10c84:	9007      	str	r0, [sp, #28]
   10c86:	f1c1 0108 	rsb	r1, r1, #8
   10c8a:	910b      	str	r1, [sp, #44]	; 0x2c
   10c8c:	f1ca 0110 	rsb	r1, sl, #16
   10c90:	910d      	str	r1, [sp, #52]	; 0x34
   10c92:	7c19      	ldrb	r1, [r3, #16]
   10c94:	9103      	str	r1, [sp, #12]
   10c96:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   10c9a:	f893 b009 	ldrb.w	fp, [r3, #9]
   10c9e:	9908      	ldr	r1, [sp, #32]
   10ca0:	9112      	str	r1, [sp, #72]	; 0x48
   10ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ca4:	3b01      	subs	r3, #1
   10ca6:	b29b      	uxth	r3, r3
   10ca8:	fb01 f103 	mul.w	r1, r1, r3
   10cac:	911a      	str	r1, [sp, #104]	; 0x68
   10cae:	2100      	movs	r1, #0
   10cb0:	910a      	str	r1, [sp, #40]	; 0x28
   10cb2:	910c      	str	r1, [sp, #48]	; 0x30
   10cb4:	9106      	str	r1, [sp, #24]
   10cb6:	9108      	str	r1, [sp, #32]
   10cb8:	9210      	str	r2, [sp, #64]	; 0x40
   10cba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10cbc:	18d3      	adds	r3, r2, r3
   10cbe:	931c      	str	r3, [sp, #112]	; 0x70
            rle_rdp += rle_bpp;
   10cc0:	2301      	movs	r3, #1
   10cc2:	9304      	str	r3, [sp, #16]
    if(len == 3) {
   10cc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10cc6:	9209      	str	r2, [sp, #36]	; 0x24
                val = 4;
   10cc8:	2204      	movs	r2, #4
   10cca:	921d      	str	r2, [sp, #116]	; 0x74
            rle_rdp += rle_bpp;
   10ccc:	9305      	str	r3, [sp, #20]
   10cce:	4666      	mov	r6, ip
   10cd0:	e1f5      	b.n	110be <lv_font_get_bitmap_fmt_txt+0x97e>
    for(i = 0; i < w; i++) {
   10cd2:	2300      	movs	r3, #0
   10cd4:	930e      	str	r3, [sp, #56]	; 0x38
   10cd6:	e7c2      	b.n	10c5e <lv_font_get_bitmap_fmt_txt+0x51e>
            bit_mask = 0x3;
   10cd8:	f04f 0903 	mov.w	r9, #3
   10cdc:	e00c      	b.n	10cf8 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0x7;
   10cde:	f04f 0907 	mov.w	r9, #7
   10ce2:	e009      	b.n	10cf8 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0xF;
   10ce4:	f04f 090f 	mov.w	r9, #15
   10ce8:	e006      	b.n	10cf8 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0xFF;
   10cea:	46e1      	mov	r9, ip
   10cec:	e004      	b.n	10cf8 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10cee:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   10cf2:	e001      	b.n	10cf8 <lv_font_get_bitmap_fmt_txt+0x5b8>
            bit_mask = 0x1;
   10cf4:	f8dd 9010 	ldr.w	r9, [sp, #16]
    uint32_t byte_pos = bit_pos >> 3;
   10cf8:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   10cfa:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   10cfe:	eb02 0b0a 	add.w	fp, r2, sl
   10d02:	f1bb 0f07 	cmp.w	fp, #7
   10d06:	d831      	bhi.n	10d6c <lv_font_get_bitmap_fmt_txt+0x62c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10d08:	f818 3003 	ldrb.w	r3, [r8, r3]
   10d0c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10d0e:	1aaa      	subs	r2, r5, r2
   10d10:	fa43 f202 	asr.w	r2, r3, r2
   10d14:	ea02 0909 	and.w	r9, r2, r9
   10d18:	fa5f f989 	uxtb.w	r9, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10d1c:	b116      	cbz	r6, 10d24 <lv_font_get_bitmap_fmt_txt+0x5e4>
   10d1e:	9b03      	ldr	r3, [sp, #12]
   10d20:	454b      	cmp	r3, r9
   10d22:	d033      	beq.n	10d8c <lv_font_get_bitmap_fmt_txt+0x64c>
        rle_rdp += rle_bpp;
   10d24:	4456      	add	r6, sl
        rle_prev_v = ret;
   10d26:	f8cd 900c 	str.w	r9, [sp, #12]
        rle_rdp += rle_bpp;
   10d2a:	9b04      	ldr	r3, [sp, #16]
   10d2c:	9306      	str	r3, [sp, #24]
   10d2e:	9b05      	ldr	r3, [sp, #20]
   10d30:	9308      	str	r3, [sp, #32]
        out[i] = rle_next();
   10d32:	f804 9f01 	strb.w	r9, [r4, #1]!
    for(i = 0; i < w; i++) {
   10d36:	42a0      	cmp	r0, r4
   10d38:	f000 815d 	beq.w	10ff6 <lv_font_get_bitmap_fmt_txt+0x8b6>
    if(rle_state == RLE_STATE_SINGLE) {
   10d3c:	bb69      	cbnz	r1, 10d9a <lv_font_get_bitmap_fmt_txt+0x65a>
    switch(len) {
   10d3e:	9b07      	ldr	r3, [sp, #28]
   10d40:	461a      	mov	r2, r3
   10d42:	2a07      	cmp	r2, #7
   10d44:	d8d3      	bhi.n	10cee <lv_font_get_bitmap_fmt_txt+0x5ae>
   10d46:	a301      	add	r3, pc, #4	; (adr r3, 10d4c <lv_font_get_bitmap_fmt_txt+0x60c>)
   10d48:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   10d4c:	00010cf5 	.word	0x00010cf5
   10d50:	00010cd9 	.word	0x00010cd9
   10d54:	00010cdf 	.word	0x00010cdf
   10d58:	00010ce5 	.word	0x00010ce5
   10d5c:	00010cef 	.word	0x00010cef
   10d60:	00010cef 	.word	0x00010cef
   10d64:	00010cef 	.word	0x00010cef
   10d68:	00010ceb 	.word	0x00010ceb
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10d6c:	f818 b003 	ldrb.w	fp, [r8, r3]
   10d70:	4443      	add	r3, r8
   10d72:	785b      	ldrb	r3, [r3, #1]
   10d74:	eb03 230b 	add.w	r3, r3, fp, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10d78:	b29b      	uxth	r3, r3
   10d7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10d7c:	1aaa      	subs	r2, r5, r2
   10d7e:	fa43 f202 	asr.w	r2, r3, r2
   10d82:	ea02 0209 	and.w	r2, r2, r9
   10d86:	fa5f f982 	uxtb.w	r9, r2
   10d8a:	e7c7      	b.n	10d1c <lv_font_get_bitmap_fmt_txt+0x5dc>
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10d8c:	9b04      	ldr	r3, [sp, #16]
   10d8e:	930a      	str	r3, [sp, #40]	; 0x28
            rle_cnt = 0;
   10d90:	4677      	mov	r7, lr
        if(rle_rdp != 0 && rle_prev_v == ret) {
   10d92:	9b05      	ldr	r3, [sp, #20]
   10d94:	930c      	str	r3, [sp, #48]	; 0x30
            rle_state = RLE_STATE_REPEATE;
   10d96:	4619      	mov	r1, r3
   10d98:	e7c4      	b.n	10d24 <lv_font_get_bitmap_fmt_txt+0x5e4>
    else if(rle_state == RLE_STATE_REPEATE) {
   10d9a:	2901      	cmp	r1, #1
   10d9c:	d004      	beq.n	10da8 <lv_font_get_bitmap_fmt_txt+0x668>
    else if(rle_state == RLE_STATE_COUNTER) {
   10d9e:	2902      	cmp	r1, #2
   10da0:	f000 80d7 	beq.w	10f52 <lv_font_get_bitmap_fmt_txt+0x812>
    uint8_t ret = 0;
   10da4:	46f1      	mov	r9, lr
   10da6:	e7c4      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
    uint32_t byte_pos = bit_pos >> 3;
   10da8:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   10daa:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   10dae:	f102 0901 	add.w	r9, r2, #1
   10db2:	f1b9 0f07 	cmp.w	r9, #7
   10db6:	d815      	bhi.n	10de4 <lv_font_get_bitmap_fmt_txt+0x6a4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10db8:	f818 3003 	ldrb.w	r3, [r8, r3]
   10dbc:	43d2      	mvns	r2, r2
   10dbe:	3208      	adds	r2, #8
   10dc0:	4113      	asrs	r3, r2
   10dc2:	f003 0301 	and.w	r3, r3, #1
        rle_cnt++;
   10dc6:	1c7a      	adds	r2, r7, #1
   10dc8:	b2d7      	uxtb	r7, r2
        rle_rdp += 1;
   10dca:	1c72      	adds	r2, r6, #1
        if(v == 1) {
   10dcc:	b9bb      	cbnz	r3, 10dfe <lv_font_get_bitmap_fmt_txt+0x6be>
    switch(len) {
   10dce:	9b07      	ldr	r3, [sp, #28]
   10dd0:	4619      	mov	r1, r3
   10dd2:	2907      	cmp	r1, #7
   10dd4:	f200 808e 	bhi.w	10ef4 <lv_font_get_bitmap_fmt_txt+0x7b4>
   10dd8:	e8df f001 	tbb	[pc, r1]
   10ddc:	8886848e 	.word	0x8886848e
   10de0:	8a8c8c8c 	.word	0x8a8c8c8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10de4:	f818 9003 	ldrb.w	r9, [r8, r3]
   10de8:	4443      	add	r3, r8
   10dea:	785b      	ldrb	r3, [r3, #1]
   10dec:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10df0:	b29b      	uxth	r3, r3
   10df2:	43d2      	mvns	r2, r2
   10df4:	3210      	adds	r2, #16
   10df6:	4113      	asrs	r3, r2
   10df8:	f003 0301 	and.w	r3, r3, #1
   10dfc:	e7e3      	b.n	10dc6 <lv_font_get_bitmap_fmt_txt+0x686>
            if(rle_cnt == 11) {
   10dfe:	2f0b      	cmp	r7, #11
   10e00:	d00a      	beq.n	10e18 <lv_font_get_bitmap_fmt_txt+0x6d8>
        rle_rdp += 1;
   10e02:	4616      	mov	r6, r2
            ret = rle_prev_v;
   10e04:	f8dd 900c 	ldr.w	r9, [sp, #12]
            if(rle_cnt == 11) {
   10e08:	9b04      	ldr	r3, [sp, #16]
   10e0a:	930a      	str	r3, [sp, #40]	; 0x28
   10e0c:	9b05      	ldr	r3, [sp, #20]
   10e0e:	9306      	str	r3, [sp, #24]
   10e10:	e78f      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
   10e12:	bf00      	nop
   10e14:	20002b5c 	.word	0x20002b5c
    uint32_t byte_pos = bit_pos >> 3;
   10e18:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
   10e1a:	f002 0207 	and.w	r2, r2, #7
    if(bit_pos + len >= 8) {
   10e1e:	1d91      	adds	r1, r2, #6
   10e20:	2907      	cmp	r1, #7
   10e22:	d815      	bhi.n	10e50 <lv_font_get_bitmap_fmt_txt+0x710>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10e24:	f818 3003 	ldrb.w	r3, [r8, r3]
   10e28:	f1c2 0202 	rsb	r2, r2, #2
   10e2c:	fa43 f202 	asr.w	r2, r3, r2
   10e30:	f002 073f 	and.w	r7, r2, #63	; 0x3f
                rle_rdp += 6;
   10e34:	3607      	adds	r6, #7
                if(rle_cnt != 0) {
   10e36:	2f00      	cmp	r7, #0
   10e38:	f040 80cf 	bne.w	10fda <lv_font_get_bitmap_fmt_txt+0x89a>
    switch(len) {
   10e3c:	9b07      	ldr	r3, [sp, #28]
   10e3e:	461a      	mov	r2, r3
   10e40:	2a07      	cmp	r2, #7
   10e42:	d839      	bhi.n	10eb8 <lv_font_get_bitmap_fmt_txt+0x778>
   10e44:	e8df f002 	tbb	[pc, r2]
   10e48:	3330123b 	.word	0x3330123b
   10e4c:	36383838 	.word	0x36383838
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10e50:	f818 1003 	ldrb.w	r1, [r8, r3]
   10e54:	4443      	add	r3, r8
   10e56:	785b      	ldrb	r3, [r3, #1]
   10e58:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10e5c:	b29b      	uxth	r3, r3
   10e5e:	f1c2 020a 	rsb	r2, r2, #10
   10e62:	fa43 f202 	asr.w	r2, r3, r2
   10e66:	f002 073f 	and.w	r7, r2, #63	; 0x3f
   10e6a:	e7e3      	b.n	10e34 <lv_font_get_bitmap_fmt_txt+0x6f4>
            bit_mask = 0x3;
   10e6c:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
   10e70:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   10e72:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   10e76:	eb02 010a 	add.w	r1, r2, sl
   10e7a:	2907      	cmp	r1, #7
   10e7c:	d822      	bhi.n	10ec4 <lv_font_get_bitmap_fmt_txt+0x784>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10e7e:	f818 3003 	ldrb.w	r3, [r8, r3]
   10e82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10e84:	1a8a      	subs	r2, r1, r2
   10e86:	fa43 f202 	asr.w	r2, r3, r2
   10e8a:	ea02 0209 	and.w	r2, r2, r9
   10e8e:	fa5f f982 	uxtb.w	r9, r2
                    rle_rdp += rle_bpp;
   10e92:	4456      	add	r6, sl
                    rle_prev_v = ret;
   10e94:	f8cd 900c 	str.w	r9, [sp, #12]
                    rle_rdp += rle_bpp;
   10e98:	9b04      	ldr	r3, [sp, #16]
   10e9a:	930a      	str	r3, [sp, #40]	; 0x28
   10e9c:	9b05      	ldr	r3, [sp, #20]
   10e9e:	930c      	str	r3, [sp, #48]	; 0x30
                    rle_state = RLE_STATE_SINGLE;
   10ea0:	4671      	mov	r1, lr
                    rle_rdp += rle_bpp;
   10ea2:	9306      	str	r3, [sp, #24]
   10ea4:	9308      	str	r3, [sp, #32]
   10ea6:	e744      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
            bit_mask = 0x7;
   10ea8:	f04f 0907 	mov.w	r9, #7
   10eac:	e7e0      	b.n	10e70 <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = 0xF;
   10eae:	f04f 090f 	mov.w	r9, #15
   10eb2:	e7dd      	b.n	10e70 <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = 0xFF;
   10eb4:	46e1      	mov	r9, ip
   10eb6:	e7db      	b.n	10e70 <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10eb8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   10ebc:	e7d8      	b.n	10e70 <lv_font_get_bitmap_fmt_txt+0x730>
            bit_mask = 0x1;
   10ebe:	f8dd 9010 	ldr.w	r9, [sp, #16]
   10ec2:	e7d5      	b.n	10e70 <lv_font_get_bitmap_fmt_txt+0x730>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10ec4:	f818 1003 	ldrb.w	r1, [r8, r3]
   10ec8:	4443      	add	r3, r8
   10eca:	785b      	ldrb	r3, [r3, #1]
   10ecc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10ed0:	b29b      	uxth	r3, r3
   10ed2:	990d      	ldr	r1, [sp, #52]	; 0x34
   10ed4:	1a8a      	subs	r2, r1, r2
   10ed6:	fa43 f202 	asr.w	r2, r3, r2
   10eda:	ea02 0209 	and.w	r2, r2, r9
   10ede:	fa5f f982 	uxtb.w	r9, r2
   10ee2:	e7d6      	b.n	10e92 <lv_font_get_bitmap_fmt_txt+0x752>
            bit_mask = 0x3;
   10ee4:	2603      	movs	r6, #3
   10ee6:	e008      	b.n	10efa <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0x7;
   10ee8:	2607      	movs	r6, #7
   10eea:	e006      	b.n	10efa <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0xF;
   10eec:	260f      	movs	r6, #15
   10eee:	e004      	b.n	10efa <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0xFF;
   10ef0:	4666      	mov	r6, ip
   10ef2:	e002      	b.n	10efa <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10ef4:	9e11      	ldr	r6, [sp, #68]	; 0x44
   10ef6:	e000      	b.n	10efa <lv_font_get_bitmap_fmt_txt+0x7ba>
            bit_mask = 0x1;
   10ef8:	9e04      	ldr	r6, [sp, #16]
    uint32_t byte_pos = bit_pos >> 3;
   10efa:	08d3      	lsrs	r3, r2, #3
    bit_pos = bit_pos & 0x7;
   10efc:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
   10f00:	eb01 090a 	add.w	r9, r1, sl
   10f04:	f1b9 0f07 	cmp.w	r9, #7
   10f08:	d814      	bhi.n	10f34 <lv_font_get_bitmap_fmt_txt+0x7f4>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10f0a:	f818 3003 	ldrb.w	r3, [r8, r3]
   10f0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f10:	1a69      	subs	r1, r5, r1
   10f12:	fa43 f101 	asr.w	r1, r3, r1
   10f16:	4031      	ands	r1, r6
   10f18:	fa5f f981 	uxtb.w	r9, r1
            rle_rdp += rle_bpp;
   10f1c:	eb02 060a 	add.w	r6, r2, sl
            rle_prev_v = ret;
   10f20:	f8cd 900c 	str.w	r9, [sp, #12]
            rle_rdp += rle_bpp;
   10f24:	9b04      	ldr	r3, [sp, #16]
   10f26:	930a      	str	r3, [sp, #40]	; 0x28
   10f28:	9b05      	ldr	r3, [sp, #20]
   10f2a:	930c      	str	r3, [sp, #48]	; 0x30
            rle_state = RLE_STATE_SINGLE;
   10f2c:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
   10f2e:	9306      	str	r3, [sp, #24]
   10f30:	9308      	str	r3, [sp, #32]
   10f32:	e6fe      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10f34:	f818 9003 	ldrb.w	r9, [r8, r3]
   10f38:	4443      	add	r3, r8
   10f3a:	785b      	ldrb	r3, [r3, #1]
   10f3c:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10f40:	b29b      	uxth	r3, r3
   10f42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10f44:	1a69      	subs	r1, r5, r1
   10f46:	fa43 f101 	asr.w	r1, r3, r1
   10f4a:	4031      	ands	r1, r6
   10f4c:	fa5f f981 	uxtb.w	r9, r1
   10f50:	e7e4      	b.n	10f1c <lv_font_get_bitmap_fmt_txt+0x7dc>
        rle_cnt--;
   10f52:	1e7b      	subs	r3, r7, #1
        if(rle_cnt == 0) {
   10f54:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
   10f58:	d148      	bne.n	10fec <lv_font_get_bitmap_fmt_txt+0x8ac>
    switch(len) {
   10f5a:	9b07      	ldr	r3, [sp, #28]
   10f5c:	461a      	mov	r2, r3
   10f5e:	2a07      	cmp	r2, #7
   10f60:	d80d      	bhi.n	10f7e <lv_font_get_bitmap_fmt_txt+0x83e>
   10f62:	e8df f002 	tbb	[pc, r2]
   10f66:	040e      	.short	0x040e
   10f68:	0c0c0806 	.word	0x0c0c0806
   10f6c:	0a0c      	.short	0x0a0c
            bit_mask = 0x3;
   10f6e:	2103      	movs	r1, #3
   10f70:	e008      	b.n	10f84 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0x7;
   10f72:	2107      	movs	r1, #7
   10f74:	e006      	b.n	10f84 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0xF;
   10f76:	210f      	movs	r1, #15
   10f78:	e004      	b.n	10f84 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0xFF;
   10f7a:	4661      	mov	r1, ip
   10f7c:	e002      	b.n	10f84 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   10f7e:	9911      	ldr	r1, [sp, #68]	; 0x44
   10f80:	e000      	b.n	10f84 <lv_font_get_bitmap_fmt_txt+0x844>
            bit_mask = 0x1;
   10f82:	9904      	ldr	r1, [sp, #16]
    uint32_t byte_pos = bit_pos >> 3;
   10f84:	08f3      	lsrs	r3, r6, #3
    bit_pos = bit_pos & 0x7;
   10f86:	f006 0207 	and.w	r2, r6, #7
    if(bit_pos + len >= 8) {
   10f8a:	eb02 090a 	add.w	r9, r2, sl
   10f8e:	f1b9 0f07 	cmp.w	r9, #7
   10f92:	d813      	bhi.n	10fbc <lv_font_get_bitmap_fmt_txt+0x87c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
   10f94:	f818 3003 	ldrb.w	r3, [r8, r3]
   10f98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10f9a:	1aaa      	subs	r2, r5, r2
   10f9c:	fa43 f202 	asr.w	r2, r3, r2
   10fa0:	400a      	ands	r2, r1
   10fa2:	fa5f f982 	uxtb.w	r9, r2
            rle_rdp += rle_bpp;
   10fa6:	4456      	add	r6, sl
            rle_prev_v = ret;
   10fa8:	f8cd 900c 	str.w	r9, [sp, #12]
            rle_rdp += rle_bpp;
   10fac:	9b04      	ldr	r3, [sp, #16]
   10fae:	930a      	str	r3, [sp, #40]	; 0x28
   10fb0:	9b05      	ldr	r3, [sp, #20]
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
            rle_state = RLE_STATE_SINGLE;
   10fb4:	4671      	mov	r1, lr
            rle_rdp += rle_bpp;
   10fb6:	9306      	str	r3, [sp, #24]
   10fb8:	9308      	str	r3, [sp, #32]
   10fba:	e6ba      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
   10fbc:	f818 9003 	ldrb.w	r9, [r8, r3]
   10fc0:	4443      	add	r3, r8
   10fc2:	785b      	ldrb	r3, [r3, #1]
   10fc4:	eb03 2309 	add.w	r3, r3, r9, lsl #8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
   10fc8:	b29b      	uxth	r3, r3
   10fca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   10fcc:	1aaa      	subs	r2, r5, r2
   10fce:	fa43 f202 	asr.w	r2, r3, r2
   10fd2:	400a      	ands	r2, r1
   10fd4:	fa5f f982 	uxtb.w	r9, r2
   10fd8:	e7e5      	b.n	10fa6 <lv_font_get_bitmap_fmt_txt+0x866>
            ret = rle_prev_v;
   10fda:	f8dd 900c 	ldr.w	r9, [sp, #12]
                if(rle_cnt != 0) {
   10fde:	9b04      	ldr	r3, [sp, #16]
   10fe0:	930a      	str	r3, [sp, #40]	; 0x28
   10fe2:	9b05      	ldr	r3, [sp, #20]
   10fe4:	930c      	str	r3, [sp, #48]	; 0x30
                    rle_state = RLE_STATE_COUNTER;
   10fe6:	2102      	movs	r1, #2
                if(rle_cnt != 0) {
   10fe8:	9306      	str	r3, [sp, #24]
   10fea:	e6a2      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
        ret = rle_prev_v;
   10fec:	f8dd 900c 	ldr.w	r9, [sp, #12]
        if(rle_cnt == 0) {
   10ff0:	9b04      	ldr	r3, [sp, #16]
   10ff2:	930a      	str	r3, [sp, #40]	; 0x28
   10ff4:	e69d      	b.n	10d32 <lv_font_get_bitmap_fmt_txt+0x5f2>
   10ff6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10ffa:	9707      	str	r7, [sp, #28]
   10ffc:	9f14      	ldr	r7, [sp, #80]	; 0x50
   10ffe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11000:	f103 3eff 	add.w	lr, r3, #4294967295
    for(i = 0; i < w; i++) {
   11004:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                val = 2;
   11006:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   1100a:	9611      	str	r6, [sp, #68]	; 0x44
   1100c:	9113      	str	r1, [sp, #76]	; 0x4c
   1100e:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   11012:	e021      	b.n	11058 <lv_font_get_bitmap_fmt_txt+0x918>
        switch(val) {
   11014:	2a07      	cmp	r2, #7
   11016:	d840      	bhi.n	1109a <lv_font_get_bitmap_fmt_txt+0x95a>
   11018:	e8df f002 	tbb	[pc, r2]
   1101c:	302d2a04 	.word	0x302d2a04
   11020:	3c393633 	.word	0x3c393633
        len = 4;
   11024:	2304      	movs	r3, #4
                val = 0;
   11026:	2200      	movs	r2, #0
    bit_pos = bit_pos & 0x7;
   11028:	f005 0107 	and.w	r1, r5, #7
   1102c:	f1c1 0108 	rsb	r1, r1, #8
    bit_pos = 8 - bit_pos - len;
   11030:	1ac9      	subs	r1, r1, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   11032:	f3c5 00cf 	ubfx	r0, r5, #3, #16
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   11036:	2601      	movs	r6, #1
   11038:	fa06 f303 	lsl.w	r3, r6, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
   1103c:	425b      	negs	r3, r3
   1103e:	f063 03ff 	orn	r3, r3, #255	; 0xff
   11042:	408b      	lsls	r3, r1
   11044:	f819 6000 	ldrb.w	r6, [r9, r0]
   11048:	4033      	ands	r3, r6
    out[byte_pos] |= (val << bit_pos);
   1104a:	408a      	lsls	r2, r1
   1104c:	4313      	orrs	r3, r2
   1104e:	f809 3000 	strb.w	r3, [r9, r0]
   11052:	445d      	add	r5, fp
        for(x = 0; x < w; x++) {
   11054:	42bc      	cmp	r4, r7
   11056:	d022      	beq.n	1109e <lv_font_get_bitmap_fmt_txt+0x95e>
            line_buf1[x] = line_buf2[x] ^ line_buf1[x];
   11058:	f817 2f01 	ldrb.w	r2, [r7, #1]!
   1105c:	f89e 3001 	ldrb.w	r3, [lr, #1]
   11060:	405a      	eors	r2, r3
   11062:	f80e 2f01 	strb.w	r2, [lr, #1]!
    if(len == 3) {
   11066:	f1bc 0f03 	cmp.w	ip, #3
   1106a:	d0d3      	beq.n	11014 <lv_font_get_bitmap_fmt_txt+0x8d4>
   1106c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1106e:	e7db      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   11070:	2304      	movs	r3, #4
                val = 2;
   11072:	2202      	movs	r2, #2
   11074:	e7d8      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   11076:	2304      	movs	r3, #4
                val = 4;
   11078:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1107a:	e7d5      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   1107c:	2304      	movs	r3, #4
                val = 6;
   1107e:	2206      	movs	r2, #6
   11080:	e7d2      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   11082:	2304      	movs	r3, #4
                val = 9;
   11084:	2209      	movs	r2, #9
   11086:	e7cf      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   11088:	2304      	movs	r3, #4
                val = 11;
   1108a:	220b      	movs	r2, #11
   1108c:	e7cc      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   1108e:	2304      	movs	r3, #4
                val = 13;
   11090:	220d      	movs	r2, #13
   11092:	e7c9      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   11094:	2304      	movs	r3, #4
                val = 15;
   11096:	220f      	movs	r2, #15
   11098:	e7c6      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
        len = 4;
   1109a:	2304      	movs	r3, #4
   1109c:	e7c4      	b.n	11028 <lv_font_get_bitmap_fmt_txt+0x8e8>
   1109e:	9e11      	ldr	r6, [sp, #68]	; 0x44
   110a0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
   110a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   110a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   110a8:	4413      	add	r3, r2
   110aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   110ac:	441a      	add	r2, r3
   110ae:	920e      	str	r2, [sp, #56]	; 0x38
   110b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   110b2:	3301      	adds	r3, #1
   110b4:	b21b      	sxth	r3, r3
   110b6:	9310      	str	r3, [sp, #64]	; 0x40
    for(y = 1; y < h; y++) {
   110b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   110ba:	429a      	cmp	r2, r3
   110bc:	d015      	beq.n	110ea <lv_font_get_bitmap_fmt_txt+0x9aa>
    for(i = 0; i < w; i++) {
   110be:	9b18      	ldr	r3, [sp, #96]	; 0x60
   110c0:	2b00      	cmp	r3, #0
   110c2:	d0f5      	beq.n	110b0 <lv_font_get_bitmap_fmt_txt+0x970>
   110c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   110c6:	1e5f      	subs	r7, r3, #1
   110c8:	463c      	mov	r4, r7
    uint8_t ret = 0;
   110ca:	f04f 0e00 	mov.w	lr, #0
    switch(len) {
   110ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
   110d0:	1e5d      	subs	r5, r3, #1
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
   110d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   110d4:	9311      	str	r3, [sp, #68]	; 0x44
            bit_mask = 0xFF;
   110d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   110da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   110de:	4659      	mov	r1, fp
   110e0:	9714      	str	r7, [sp, #80]	; 0x50
   110e2:	9f07      	ldr	r7, [sp, #28]
   110e4:	9507      	str	r5, [sp, #28]
   110e6:	981c      	ldr	r0, [sp, #112]	; 0x70
   110e8:	e628      	b.n	10d3c <lv_font_get_bitmap_fmt_txt+0x5fc>
   110ea:	46b4      	mov	ip, r6
   110ec:	9b08      	ldr	r3, [sp, #32]
   110ee:	b9c3      	cbnz	r3, 11122 <lv_font_get_bitmap_fmt_txt+0x9e2>
   110f0:	9b06      	ldr	r3, [sp, #24]
   110f2:	b113      	cbz	r3, 110fa <lv_font_get_bitmap_fmt_txt+0x9ba>
   110f4:	4b13      	ldr	r3, [pc, #76]	; (11144 <lv_font_get_bitmap_fmt_txt+0xa04>)
   110f6:	f8c3 c00c 	str.w	ip, [r3, #12]
   110fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   110fc:	b113      	cbz	r3, 11104 <lv_font_get_bitmap_fmt_txt+0x9c4>
   110fe:	4b11      	ldr	r3, [pc, #68]	; (11144 <lv_font_get_bitmap_fmt_txt+0xa04>)
   11100:	f883 b009 	strb.w	fp, [r3, #9]
   11104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11106:	b11b      	cbz	r3, 11110 <lv_font_get_bitmap_fmt_txt+0x9d0>
   11108:	4b0e      	ldr	r3, [pc, #56]	; (11144 <lv_font_get_bitmap_fmt_txt+0xa04>)
   1110a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1110e:	745a      	strb	r2, [r3, #17]
    _lv_mem_buf_release(line_buf1);
   11110:	9816      	ldr	r0, [sp, #88]	; 0x58
   11112:	4c0d      	ldr	r4, [pc, #52]	; (11148 <lv_font_get_bitmap_fmt_txt+0xa08>)
   11114:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
   11116:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11118:	47a0      	blx	r4
        return decompr_buf;
   1111a:	4b0a      	ldr	r3, [pc, #40]	; (11144 <lv_font_get_bitmap_fmt_txt+0xa04>)
   1111c:	6818      	ldr	r0, [r3, #0]
   1111e:	f7ff bb2c 	b.w	1077a <lv_font_get_bitmap_fmt_txt+0x3a>
   11122:	4b08      	ldr	r3, [pc, #32]	; (11144 <lv_font_get_bitmap_fmt_txt+0xa04>)
   11124:	f89d 200c 	ldrb.w	r2, [sp, #12]
   11128:	741a      	strb	r2, [r3, #16]
   1112a:	e7e1      	b.n	110f0 <lv_font_get_bitmap_fmt_txt+0x9b0>
    if(!gid) return NULL;
   1112c:	2000      	movs	r0, #0
   1112e:	f7ff bb24 	b.w	1077a <lv_font_get_bitmap_fmt_txt+0x3a>
    return NULL;
   11132:	2000      	movs	r0, #0
   11134:	f7ff bb21 	b.w	1077a <lv_font_get_bitmap_fmt_txt+0x3a>
        if(gsize == 0) return NULL;
   11138:	2000      	movs	r0, #0
   1113a:	f7ff bb1e 	b.w	1077a <lv_font_get_bitmap_fmt_txt+0x3a>
            if(decompr_buf == NULL) return NULL;
   1113e:	2000      	movs	r0, #0
   11140:	f7ff bb1b 	b.w	1077a <lv_font_get_bitmap_fmt_txt+0x3a>
   11144:	20002b5c 	.word	0x20002b5c
   11148:	00012b19 	.word	0x00012b19

0001114c <lv_font_get_glyph_dsc_fmt_txt>:
{
   1114c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11150:	b084      	sub	sp, #16
   11152:	4607      	mov	r7, r0
   11154:	460c      	mov	r4, r1
   11156:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
   11158:	2a09      	cmp	r2, #9
        is_tab = true;
   1115a:	bf06      	itte	eq
   1115c:	2501      	moveq	r5, #1
        unicode_letter = ' ';
   1115e:	2220      	moveq	r2, #32
    bool is_tab = false;
   11160:	2500      	movne	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   11162:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
   11164:	4611      	mov	r1, r2
   11166:	4b49      	ldr	r3, [pc, #292]	; (1128c <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   11168:	4798      	blx	r3
    if(!gid) return false;
   1116a:	4680      	mov	r8, r0
   1116c:	2800      	cmp	r0, #0
   1116e:	f000 8086 	beq.w	1127e <lv_font_get_glyph_dsc_fmt_txt+0x132>
    if(fdsc->kern_dsc) {
   11172:	68f3      	ldr	r3, [r6, #12]
   11174:	2b00      	cmp	r3, #0
   11176:	d07c      	beq.n	11272 <lv_font_get_glyph_dsc_fmt_txt+0x126>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
   11178:	4649      	mov	r1, r9
   1117a:	4638      	mov	r0, r7
   1117c:	4b43      	ldr	r3, [pc, #268]	; (1128c <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   1117e:	4798      	blx	r3
        if(gid_next) {
   11180:	4603      	mov	r3, r0
   11182:	bb18      	cbnz	r0, 111cc <lv_font_get_glyph_dsc_fmt_txt+0x80>
    int8_t kvalue = 0;
   11184:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   11186:	6870      	ldr	r0, [r6, #4]
   11188:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1118c:	8a32      	ldrh	r2, [r6, #16]
   1118e:	fb03 f302 	mul.w	r3, r3, r2
   11192:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
   11194:	8842      	ldrh	r2, [r0, #2]
   11196:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
   1119a:	b105      	cbz	r5, 1119e <lv_font_get_glyph_dsc_fmt_txt+0x52>
   1119c:	0052      	lsls	r2, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
   1119e:	3308      	adds	r3, #8
   111a0:	4413      	add	r3, r2
   111a2:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
   111a4:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   111a6:	7943      	ldrb	r3, [r0, #5]
   111a8:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
   111aa:	7902      	ldrb	r2, [r0, #4]
   111ac:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   111ae:	f990 3006 	ldrsb.w	r3, [r0, #6]
   111b2:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
   111b4:	f990 3007 	ldrsb.w	r3, [r0, #7]
   111b8:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   111ba:	7cf3      	ldrb	r3, [r6, #19]
   111bc:	f3c3 0383 	ubfx	r3, r3, #2, #4
   111c0:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
   111c2:	2d00      	cmp	r5, #0
   111c4:	d060      	beq.n	11288 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
   111c6:	0052      	lsls	r2, r2, #1
   111c8:	8062      	strh	r2, [r4, #2]
   111ca:	e059      	b.n	11280 <lv_font_get_glyph_dsc_fmt_txt+0x134>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   111cc:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
   111ce:	7cd1      	ldrb	r1, [r2, #19]
   111d0:	f011 0f40 	tst.w	r1, #64	; 0x40
   111d4:	d13c      	bne.n	11250 <lv_font_get_glyph_dsc_fmt_txt+0x104>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
   111d6:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
   111d8:	7afa      	ldrb	r2, [r7, #11]
   111da:	f012 0203 	ands.w	r2, r2, #3
   111de:	d003      	beq.n	111e8 <lv_font_get_glyph_dsc_fmt_txt+0x9c>
        else if(kdsc->glyph_ids_size == 1) {
   111e0:	2a01      	cmp	r2, #1
   111e2:	d01b      	beq.n	1121c <lv_font_get_glyph_dsc_fmt_txt+0xd0>
    int8_t value = 0;
   111e4:	2300      	movs	r3, #0
   111e6:	e7ce      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint8_t * g_ids = kdsc->glyph_ids;
   111e8:	f8d7 9000 	ldr.w	r9, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   111ec:	eb08 2300 	add.w	r3, r8, r0, lsl #8
   111f0:	a804      	add	r0, sp, #16
   111f2:	f820 3d04 	strh.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   111f6:	68ba      	ldr	r2, [r7, #8]
   111f8:	4b25      	ldr	r3, [pc, #148]	; (11290 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
   111fa:	9300      	str	r3, [sp, #0]
   111fc:	2302      	movs	r3, #2
   111fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   11202:	4649      	mov	r1, r9
   11204:	f8df a090 	ldr.w	sl, [pc, #144]	; 11298 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
   11208:	47d0      	blx	sl
            if(kid_p) {
   1120a:	b128      	cbz	r0, 11218 <lv_font_get_glyph_dsc_fmt_txt+0xcc>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   1120c:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   11210:	085b      	lsrs	r3, r3, #1
                value = kdsc->values[ofs];
   11212:	687a      	ldr	r2, [r7, #4]
   11214:	56d3      	ldrsb	r3, [r2, r3]
   11216:	e7b6      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
   11218:	2300      	movs	r3, #0
   1121a:	e7b4      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
            const uint16_t * g_ids = kdsc->glyph_ids;
   1121c:	f8d7 9000 	ldr.w	r9, [r7]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   11220:	eb08 2300 	add.w	r3, r8, r0, lsl #8
   11224:	a804      	add	r0, sp, #16
   11226:	f840 3d04 	str.w	r3, [r0, #-4]!
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1122a:	68ba      	ldr	r2, [r7, #8]
   1122c:	4b19      	ldr	r3, [pc, #100]	; (11294 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
   1122e:	9300      	str	r3, [sp, #0]
   11230:	2304      	movs	r3, #4
   11232:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   11236:	4649      	mov	r1, r9
   11238:	f8df a05c 	ldr.w	sl, [pc, #92]	; 11298 <lv_font_get_glyph_dsc_fmt_txt+0x14c>
   1123c:	47d0      	blx	sl
            if(kid_p) {
   1123e:	b128      	cbz	r0, 1124c <lv_font_get_glyph_dsc_fmt_txt+0x100>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
   11240:	eba0 0309 	sub.w	r3, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   11244:	091b      	lsrs	r3, r3, #4
                value = kdsc->values[ofs];
   11246:	687a      	ldr	r2, [r7, #4]
   11248:	56d3      	ldrsb	r3, [r2, r3]
   1124a:	e79c      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
   1124c:	2300      	movs	r3, #0
   1124e:	e79a      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
   11250:	68d1      	ldr	r1, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   11252:	684a      	ldr	r2, [r1, #4]
   11254:	f812 2008 	ldrb.w	r2, [r2, r8]
        if(left_class > 0 && right_class > 0) {
   11258:	b16a      	cbz	r2, 11276 <lv_font_get_glyph_dsc_fmt_txt+0x12a>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
   1125a:	6888      	ldr	r0, [r1, #8]
   1125c:	5cc3      	ldrb	r3, [r0, r3]
        if(left_class > 0 && right_class > 0) {
   1125e:	b163      	cbz	r3, 1127a <lv_font_get_glyph_dsc_fmt_txt+0x12e>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
   11260:	3a01      	subs	r2, #1
   11262:	7b48      	ldrb	r0, [r1, #13]
   11264:	6809      	ldr	r1, [r1, #0]
   11266:	440b      	add	r3, r1
   11268:	fb00 3202 	mla	r2, r0, r2, r3
   1126c:	f912 3c01 	ldrsb.w	r3, [r2, #-1]
   11270:	e789      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t kvalue = 0;
   11272:	2300      	movs	r3, #0
   11274:	e787      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    int8_t value = 0;
   11276:	2300      	movs	r3, #0
   11278:	e785      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
   1127a:	2300      	movs	r3, #0
   1127c:	e783      	b.n	11186 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    if(!gid) return false;
   1127e:	2500      	movs	r5, #0
}
   11280:	4628      	mov	r0, r5
   11282:	b004      	add	sp, #16
   11284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return true;
   11288:	2501      	movs	r5, #1
   1128a:	e7f9      	b.n	11280 <lv_font_get_glyph_dsc_fmt_txt+0x134>
   1128c:	00010655 	.word	0x00010655
   11290:	00010629 	.word	0x00010629
   11294:	0001063b 	.word	0x0001063b
   11298:	0001472d 	.word	0x0001472d

0001129c <_lv_font_clean_up_fmt_txt>:
{
   1129c:	b508      	push	{r3, lr}
    if(decompr_buf) {
   1129e:	4b04      	ldr	r3, [pc, #16]	; (112b0 <_lv_font_clean_up_fmt_txt+0x14>)
   112a0:	6818      	ldr	r0, [r3, #0]
   112a2:	b120      	cbz	r0, 112ae <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(decompr_buf);
   112a4:	4b03      	ldr	r3, [pc, #12]	; (112b4 <_lv_font_clean_up_fmt_txt+0x18>)
   112a6:	4798      	blx	r3
        decompr_buf = NULL;
   112a8:	2200      	movs	r2, #0
   112aa:	4b01      	ldr	r3, [pc, #4]	; (112b0 <_lv_font_clean_up_fmt_txt+0x14>)
   112ac:	601a      	str	r2, [r3, #0]
   112ae:	bd08      	pop	{r3, pc}
   112b0:	20002b5c 	.word	0x20002b5c
   112b4:	00012a6d 	.word	0x00012a6d

000112b8 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
   112b8:	b510      	push	{r4, lr}
   112ba:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   112bc:	212c      	movs	r1, #44	; 0x2c
   112be:	4b15      	ldr	r3, [pc, #84]	; (11314 <lv_disp_drv_init+0x5c>)
   112c0:	4798      	blx	r3

    driver->flush_cb         = NULL;
   112c2:	2300      	movs	r3, #0
   112c4:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
   112c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   112ca:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
   112cc:	f44f 7288 	mov.w	r2, #272	; 0x110
   112d0:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
   112d2:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
   112d4:	7a22      	ldrb	r2, [r4, #8]
   112d6:	f363 0241 	bfi	r2, r3, #1, #1
   112da:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
   112dc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   112e0:	f363 0204 	bfi	r2, r3, #0, #5
   112e4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   112e8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   112ea:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
   112ee:	8522      	strh	r2, [r4, #40]	; 0x28
   112f0:	0a12      	lsrs	r2, r2, #8
   112f2:	f363 02c7 	bfi	r2, r3, #3, #5
   112f6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    driver->dpi = LV_DPI;
   112fa:	8922      	ldrh	r2, [r4, #8]
   112fc:	2182      	movs	r1, #130	; 0x82
   112fe:	f361 028b 	bfi	r2, r1, #2, #10
   11302:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
   11304:	f042 0201 	orr.w	r2, r2, #1
   11308:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
   1130a:	6223      	str	r3, [r4, #32]
    driver->gpu_fill_cb  = NULL;
   1130c:	6263      	str	r3, [r4, #36]	; 0x24

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
   1130e:	6163      	str	r3, [r4, #20]
   11310:	bd10      	pop	{r4, pc}
   11312:	bf00      	nop
   11314:	000130df 	.word	0x000130df

00011318 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
   11318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1131a:	4604      	mov	r4, r0
   1131c:	460d      	mov	r5, r1
   1131e:	4617      	mov	r7, r2
   11320:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
   11322:	2124      	movs	r1, #36	; 0x24
   11324:	4b03      	ldr	r3, [pc, #12]	; (11334 <lv_disp_buf_init+0x1c>)
   11326:	4798      	blx	r3

    disp_buf->buf1    = buf1;
   11328:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
   1132a:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
   1132c:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
   1132e:	60e6      	str	r6, [r4, #12]
   11330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11332:	bf00      	nop
   11334:	000130df 	.word	0x000130df

00011338 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
   11338:	b5f0      	push	{r4, r5, r6, r7, lr}
   1133a:	b083      	sub	sp, #12
   1133c:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   1133e:	483f      	ldr	r0, [pc, #252]	; (1143c <lv_disp_drv_register+0x104>)
   11340:	4b3f      	ldr	r3, [pc, #252]	; (11440 <lv_disp_drv_register+0x108>)
   11342:	4798      	blx	r3
    if(!disp) {
   11344:	4604      	mov	r4, r0
   11346:	2800      	cmp	r0, #0
   11348:	d054      	beq.n	113f4 <lv_disp_drv_register+0xbc>
        LV_ASSERT_MEM(disp);
        return NULL;
    }

    _lv_memset_00(disp, sizeof(lv_disp_t));
   1134a:	f44f 71b8 	mov.w	r1, #368	; 0x170
   1134e:	4b3d      	ldr	r3, [pc, #244]	; (11444 <lv_disp_drv_register+0x10c>)
   11350:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
   11352:	222c      	movs	r2, #44	; 0x2c
   11354:	4629      	mov	r1, r5
   11356:	4620      	mov	r0, r4
   11358:	4b3b      	ldr	r3, [pc, #236]	; (11448 <lv_disp_drv_register+0x110>)
   1135a:	4798      	blx	r3

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   1135c:	214c      	movs	r1, #76	; 0x4c
   1135e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11362:	4b3a      	ldr	r3, [pc, #232]	; (1144c <lv_disp_drv_register+0x114>)
   11364:	4798      	blx	r3
    disp->last_activity_time = 0;
   11366:	2300      	movs	r3, #0
   11368:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c

    if(disp_def == NULL) disp_def = disp;
   1136c:	4b38      	ldr	r3, [pc, #224]	; (11450 <lv_disp_drv_register+0x118>)
   1136e:	681b      	ldr	r3, [r3, #0]
   11370:	2b00      	cmp	r3, #0
   11372:	d050      	beq.n	11416 <lv_disp_drv_register+0xde>

    lv_disp_t * disp_def_tmp = disp_def;
   11374:	4b36      	ldr	r3, [pc, #216]	; (11450 <lv_disp_drv_register+0x118>)
   11376:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   11378:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh task*/
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1137a:	4623      	mov	r3, r4
   1137c:	2203      	movs	r2, #3
   1137e:	211e      	movs	r1, #30
   11380:	4834      	ldr	r0, [pc, #208]	; (11454 <lv_disp_drv_register+0x11c>)
   11382:	4d35      	ldr	r5, [pc, #212]	; (11458 <lv_disp_drv_register+0x120>)
   11384:	47a8      	blx	r5
   11386:	62e0      	str	r0, [r4, #44]	; 0x2c
    LV_ASSERT_MEM(disp->refr_task);
   11388:	4b34      	ldr	r3, [pc, #208]	; (1145c <lv_disp_drv_register+0x124>)
   1138a:	4798      	blx	r3
   1138c:	2800      	cmp	r0, #0
   1138e:	d045      	beq.n	1141c <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
   11390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11392:	2b00      	cmp	r3, #0
   11394:	d04f      	beq.n	11436 <lv_disp_drv_register+0xfe>

    disp->inv_p = 0;
   11396:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   1139a:	f36f 0309 	bfc	r3, #0, #10
   1139e:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
    disp->last_activity_time = 0;
   113a2:	2500      	movs	r5, #0
   113a4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   113a8:	4629      	mov	r1, r5
   113aa:	4628      	mov	r0, r5
   113ac:	4e2c      	ldr	r6, [pc, #176]	; (11460 <lv_disp_drv_register+0x128>)
   113ae:	47b0      	blx	r6
   113b0:	63e0      	str	r0, [r4, #60]	; 0x3c
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   113b2:	4629      	mov	r1, r5
   113b4:	4628      	mov	r0, r5
   113b6:	47b0      	blx	r6
   113b8:	6420      	str	r0, [r4, #64]	; 0x40
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   113ba:	4629      	mov	r1, r5
   113bc:	4628      	mov	r0, r5
   113be:	47b0      	blx	r6
   113c0:	6460      	str	r0, [r4, #68]	; 0x44
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   113c2:	4629      	mov	r1, r5
   113c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   113c6:	4e27      	ldr	r6, [pc, #156]	; (11464 <lv_disp_drv_register+0x12c>)
   113c8:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   113ca:	4629      	mov	r1, r5
   113cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
   113ce:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
   113d0:	4629      	mov	r1, r5
   113d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   113d4:	4e24      	ldr	r6, [pc, #144]	; (11468 <lv_disp_drv_register+0x130>)
   113d6:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
   113d8:	4629      	mov	r1, r5
   113da:	6c60      	ldr	r0, [r4, #68]	; 0x44
   113dc:	47b0      	blx	r6

    lv_obj_invalidate(disp->act_scr);
   113de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   113e0:	4b22      	ldr	r3, [pc, #136]	; (1146c <lv_disp_drv_register+0x134>)
   113e2:	4798      	blx	r3

    disp_def = disp_def_tmp; /*Revert the default display*/
   113e4:	4b1a      	ldr	r3, [pc, #104]	; (11450 <lv_disp_drv_register+0x118>)
   113e6:	601f      	str	r7, [r3, #0]

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   113e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   113ea:	4b21      	ldr	r3, [pc, #132]	; (11470 <lv_disp_drv_register+0x138>)
   113ec:	4798      	blx	r3

    return disp;
}
   113ee:	4620      	mov	r0, r4
   113f0:	b003      	add	sp, #12
   113f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
   113f4:	4b19      	ldr	r3, [pc, #100]	; (1145c <lv_disp_drv_register+0x124>)
   113f6:	4798      	blx	r3
   113f8:	2800      	cmp	r0, #0
   113fa:	d1f8      	bne.n	113ee <lv_disp_drv_register+0xb6>
   113fc:	4b1d      	ldr	r3, [pc, #116]	; (11474 <lv_disp_drv_register+0x13c>)
   113fe:	9300      	str	r3, [sp, #0]
   11400:	227c      	movs	r2, #124	; 0x7c
   11402:	491d      	ldr	r1, [pc, #116]	; (11478 <lv_disp_drv_register+0x140>)
   11404:	2003      	movs	r0, #3
   11406:	4c1d      	ldr	r4, [pc, #116]	; (1147c <lv_disp_drv_register+0x144>)
   11408:	47a0      	blx	r4
   1140a:	2200      	movs	r2, #0
   1140c:	2300      	movs	r3, #0
   1140e:	481c      	ldr	r0, [pc, #112]	; (11480 <lv_disp_drv_register+0x148>)
   11410:	491c      	ldr	r1, [pc, #112]	; (11484 <lv_disp_drv_register+0x14c>)
   11412:	4788      	blx	r1
   11414:	e7fe      	b.n	11414 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
   11416:	4b0e      	ldr	r3, [pc, #56]	; (11450 <lv_disp_drv_register+0x118>)
   11418:	601c      	str	r4, [r3, #0]
   1141a:	e7ab      	b.n	11374 <lv_disp_drv_register+0x3c>
    LV_ASSERT_MEM(disp->refr_task);
   1141c:	4b15      	ldr	r3, [pc, #84]	; (11474 <lv_disp_drv_register+0x13c>)
   1141e:	9300      	str	r3, [sp, #0]
   11420:	228d      	movs	r2, #141	; 0x8d
   11422:	4915      	ldr	r1, [pc, #84]	; (11478 <lv_disp_drv_register+0x140>)
   11424:	2003      	movs	r0, #3
   11426:	4d15      	ldr	r5, [pc, #84]	; (1147c <lv_disp_drv_register+0x144>)
   11428:	47a8      	blx	r5
   1142a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1142c:	2300      	movs	r3, #0
   1142e:	4814      	ldr	r0, [pc, #80]	; (11480 <lv_disp_drv_register+0x148>)
   11430:	4914      	ldr	r1, [pc, #80]	; (11484 <lv_disp_drv_register+0x14c>)
   11432:	4788      	blx	r1
   11434:	e7fe      	b.n	11434 <lv_disp_drv_register+0xfc>
    if(disp->refr_task == NULL) return NULL;
   11436:	2400      	movs	r4, #0
   11438:	e7d9      	b.n	113ee <lv_disp_drv_register+0xb6>
   1143a:	bf00      	nop
   1143c:	20006cb4 	.word	0x20006cb4
   11440:	000124b9 	.word	0x000124b9
   11444:	000130df 	.word	0x000130df
   11448:	00012bfd 	.word	0x00012bfd
   1144c:	000124a1 	.word	0x000124a1
   11450:	20002b70 	.word	0x20002b70
   11454:	0000651d 	.word	0x0000651d
   11458:	00013f8d 	.word	0x00013f8d
   1145c:	0000298d 	.word	0x0000298d
   11460:	000044ad 	.word	0x000044ad
   11464:	00004225 	.word	0x00004225
   11468:	00003029 	.word	0x00003029
   1146c:	000039a9 	.word	0x000039a9
   11470:	00013ffd 	.word	0x00013ffd
   11474:	000206a0 	.word	0x000206a0
   11478:	000206b8 	.word	0x000206b8
   1147c:	00012805 	.word	0x00012805
   11480:	0001b4bc 	.word	0x0001b4bc
   11484:	00002995 	.word	0x00002995

00011488 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   11488:	4b01      	ldr	r3, [pc, #4]	; (11490 <lv_disp_get_default+0x8>)
   1148a:	6818      	ldr	r0, [r3, #0]
   1148c:	4770      	bx	lr
   1148e:	bf00      	nop
   11490:	20002b70 	.word	0x20002b70

00011494 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   11494:	4603      	mov	r3, r0
   11496:	b140      	cbz	r0, 114aa <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   11498:	7a1a      	ldrb	r2, [r3, #8]
   1149a:	f012 0f02 	tst.w	r2, #2
   1149e:	bf0c      	ite	eq
   114a0:	f9b3 0000 	ldrsheq.w	r0, [r3]
   114a4:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
   114a8:	4770      	bx	lr
    return disp_def;
   114aa:	4b03      	ldr	r3, [pc, #12]	; (114b8 <lv_disp_get_hor_res+0x24>)
   114ac:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   114ae:	2b00      	cmp	r3, #0
   114b0:	d1f2      	bne.n	11498 <lv_disp_get_hor_res+0x4>
        return LV_HOR_RES_MAX;
   114b2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
}
   114b6:	4770      	bx	lr
   114b8:	20002b70 	.word	0x20002b70

000114bc <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   114bc:	4603      	mov	r3, r0
   114be:	b140      	cbz	r0, 114d2 <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   114c0:	7a1a      	ldrb	r2, [r3, #8]
   114c2:	f012 0f02 	tst.w	r2, #2
   114c6:	bf0c      	ite	eq
   114c8:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
   114cc:	f9b3 0000 	ldrshne.w	r0, [r3]
   114d0:	4770      	bx	lr
    return disp_def;
   114d2:	4b03      	ldr	r3, [pc, #12]	; (114e0 <lv_disp_get_ver_res+0x24>)
   114d4:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL)
   114d6:	2b00      	cmp	r3, #0
   114d8:	d1f2      	bne.n	114c0 <lv_disp_get_ver_res+0x4>
        return LV_VER_RES_MAX;
   114da:	f44f 7088 	mov.w	r0, #272	; 0x110
}
   114de:	4770      	bx	lr
   114e0:	20002b70 	.word	0x20002b70

000114e4 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   114e4:	4603      	mov	r3, r0
   114e6:	b118      	cbz	r0, 114f0 <lv_disp_get_dpi+0xc>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
    return disp->driver.dpi;
   114e8:	8918      	ldrh	r0, [r3, #8]
   114ea:	f3c0 0089 	ubfx	r0, r0, #2, #10
   114ee:	4770      	bx	lr
    return disp_def;
   114f0:	4b02      	ldr	r3, [pc, #8]	; (114fc <lv_disp_get_dpi+0x18>)
   114f2:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   114f4:	2b00      	cmp	r3, #0
   114f6:	d1f7      	bne.n	114e8 <lv_disp_get_dpi+0x4>
   114f8:	2082      	movs	r0, #130	; 0x82
}
   114fa:	4770      	bx	lr
   114fc:	20002b70 	.word	0x20002b70

00011500 <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
   11500:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
   11502:	4605      	mov	r5, r0
   11504:	b1a0      	cbz	r0, 11530 <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
    else w = lv_disp_get_hor_res(disp);
   11506:	4628      	mov	r0, r5
   11508:	4b0f      	ldr	r3, [pc, #60]	; (11548 <lv_disp_get_size_category+0x48>)
   1150a:	4798      	blx	r3
   1150c:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
   1150e:	4628      	mov	r0, r5
   11510:	4b0e      	ldr	r3, [pc, #56]	; (1154c <lv_disp_get_size_category+0x4c>)
   11512:	4798      	blx	r3

    w = w * 10 / dpi;
   11514:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   11518:	0064      	lsls	r4, r4, #1
   1151a:	fbb4 f0f0 	udiv	r0, r4, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   1151e:	281d      	cmp	r0, #29
   11520:	d90d      	bls.n	1153e <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   11522:	2831      	cmp	r0, #49	; 0x31
   11524:	d90d      	bls.n	11542 <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
    else return LV_DISP_SIZE_EXTRA_LARGE;
   11526:	2846      	cmp	r0, #70	; 0x46
   11528:	bf34      	ite	cc
   1152a:	2002      	movcc	r0, #2
   1152c:	2003      	movcs	r0, #3
   1152e:	bd38      	pop	{r3, r4, r5, pc}
    return disp_def;
   11530:	4b07      	ldr	r3, [pc, #28]	; (11550 <lv_disp_get_size_category+0x50>)
   11532:	681d      	ldr	r5, [r3, #0]
   11534:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    if(disp == NULL) w = LV_HOR_RES_MAX;
   11538:	2d00      	cmp	r5, #0
   1153a:	d0e8      	beq.n	1150e <lv_disp_get_size_category+0xe>
   1153c:	e7e3      	b.n	11506 <lv_disp_get_size_category+0x6>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
   1153e:	2000      	movs	r0, #0
   11540:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
   11542:	2001      	movs	r0, #1
}
   11544:	bd38      	pop	{r3, r4, r5, pc}
   11546:	bf00      	nop
   11548:	00011495 	.word	0x00011495
   1154c:	000114e5 	.word	0x000114e5
   11550:	20002b70 	.word	0x20002b70

00011554 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   11554:	6842      	ldr	r2, [r0, #4]
   11556:	2300      	movs	r3, #0
   11558:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
   1155a:	6842      	ldr	r2, [r0, #4]
   1155c:	61d3      	str	r3, [r2, #28]
   1155e:	4770      	bx	lr

00011560 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
   11560:	b508      	push	{r3, lr}
    if(disp == NULL)
   11562:	b120      	cbz	r0, 1156e <lv_disp_get_next+0xe>
   11564:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
   11566:	4804      	ldr	r0, [pc, #16]	; (11578 <lv_disp_get_next+0x18>)
   11568:	4b04      	ldr	r3, [pc, #16]	; (1157c <lv_disp_get_next+0x1c>)
   1156a:	4798      	blx	r3
}
   1156c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
   1156e:	4802      	ldr	r0, [pc, #8]	; (11578 <lv_disp_get_next+0x18>)
   11570:	4b03      	ldr	r3, [pc, #12]	; (11580 <lv_disp_get_next+0x20>)
   11572:	4798      	blx	r3
   11574:	bd08      	pop	{r3, pc}
   11576:	bf00      	nop
   11578:	20006cb4 	.word	0x20006cb4
   1157c:	00012565 	.word	0x00012565
   11580:	00012551 	.word	0x00012551

00011584 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   11584:	6840      	ldr	r0, [r0, #4]
   11586:	4770      	bx	lr

00011588 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   11588:	6843      	ldr	r3, [r0, #4]
   1158a:	681a      	ldr	r2, [r3, #0]
   1158c:	b122      	cbz	r2, 11598 <lv_disp_is_double_buf+0x10>
   1158e:	6858      	ldr	r0, [r3, #4]
   11590:	3000      	adds	r0, #0
   11592:	bf18      	it	ne
   11594:	2001      	movne	r0, #1
   11596:	4770      	bx	lr
        return true;
    else
        return false;
   11598:	2000      	movs	r0, #0
}
   1159a:	4770      	bx	lr

0001159c <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   1159c:	b510      	push	{r4, lr}
   1159e:	4604      	mov	r4, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   115a0:	4b08      	ldr	r3, [pc, #32]	; (115c4 <lv_disp_is_true_double_buf+0x28>)
   115a2:	4798      	blx	r3
   115a4:	4603      	mov	r3, r0
   115a6:	b158      	cbz	r0, 115c0 <lv_disp_is_true_double_buf+0x24>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   115a8:	f9b4 2000 	ldrsh.w	r2, [r4]
   115ac:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   115b0:	fb03 f302 	mul.w	r3, r3, r2
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   115b4:	6862      	ldr	r2, [r4, #4]
   115b6:	68d2      	ldr	r2, [r2, #12]
   115b8:	4293      	cmp	r3, r2
   115ba:	bf14      	ite	ne
   115bc:	2300      	movne	r3, #0
   115be:	2301      	moveq	r3, #1
        return true;
    }
    else {
        return false;
    }
}
   115c0:	4618      	mov	r0, r3
   115c2:	bd10      	pop	{r4, pc}
   115c4:	00011589 	.word	0x00011589

000115c8 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
   115c8:	b508      	push	{r3, lr}
    if(indev == NULL)
   115ca:	b120      	cbz	r0, 115d6 <lv_indev_get_next+0xe>
   115cc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   115ce:	4804      	ldr	r0, [pc, #16]	; (115e0 <lv_indev_get_next+0x18>)
   115d0:	4b04      	ldr	r3, [pc, #16]	; (115e4 <lv_indev_get_next+0x1c>)
   115d2:	4798      	blx	r3
}
   115d4:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   115d6:	4802      	ldr	r0, [pc, #8]	; (115e0 <lv_indev_get_next+0x18>)
   115d8:	4b03      	ldr	r3, [pc, #12]	; (115e8 <lv_indev_get_next+0x20>)
   115da:	4798      	blx	r3
   115dc:	bd08      	pop	{r3, pc}
   115de:	bf00      	nop
   115e0:	20006ca8 	.word	0x20006ca8
   115e4:	00012565 	.word	0x00012565
   115e8:	00012551 	.word	0x00012551

000115ec <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
   115ec:	4b03      	ldr	r3, [pc, #12]	; (115fc <lv_tick_inc+0x10>)
   115ee:	2200      	movs	r2, #0
   115f0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
   115f2:	685a      	ldr	r2, [r3, #4]
   115f4:	4410      	add	r0, r2
   115f6:	6058      	str	r0, [r3, #4]
   115f8:	4770      	bx	lr
   115fa:	bf00      	nop
   115fc:	20002b74 	.word	0x20002b74

00011600 <lv_tick_get>:
uint32_t lv_tick_get(void)
{
#if LV_TICK_CUSTOM == 0
    uint32_t result;
    do {
        tick_irq_flag = 1;
   11600:	4b04      	ldr	r3, [pc, #16]	; (11614 <lv_tick_get+0x14>)
   11602:	f04f 0101 	mov.w	r1, #1
   11606:	7019      	strb	r1, [r3, #0]
        result        = sys_time;
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
   11608:	781a      	ldrb	r2, [r3, #0]
   1160a:	2a00      	cmp	r2, #0
   1160c:	d0fb      	beq.n	11606 <lv_tick_get+0x6>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   1160e:	4b01      	ldr	r3, [pc, #4]	; (11614 <lv_tick_get+0x14>)
   11610:	6858      	ldr	r0, [r3, #4]
   11612:	4770      	bx	lr
   11614:	20002b74 	.word	0x20002b74

00011618 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   11618:	b510      	push	{r4, lr}
   1161a:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
   1161c:	4b01      	ldr	r3, [pc, #4]	; (11624 <lv_tick_elaps+0xc>)
   1161e:	4798      	blx	r3
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   11620:	1b00      	subs	r0, r0, r4
   11622:	bd10      	pop	{r4, pc}
   11624:	00011601 	.word	0x00011601

00011628 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
   11628:	6a0a      	ldr	r2, [r1, #32]
   1162a:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1162c:	4282      	cmp	r2, r0
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
   1162e:	bf1a      	itte	ne
   11630:	0280      	lslne	r0, r0, #10
   11632:	fb90 f0f2 	sdivne	r0, r0, r2
   11636:	f44f 6080 	moveq.w	r0, #1024	; 0x400
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
   1163a:	698a      	ldr	r2, [r1, #24]
   1163c:	69cb      	ldr	r3, [r1, #28]
   1163e:	1a9b      	subs	r3, r3, r2
   11640:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
   11644:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
   11648:	b200      	sxth	r0, r0
   1164a:	4770      	bx	lr

0001164c <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
   1164c:	b508      	push	{r3, lr}
    anim_list_changed = true;
   1164e:	2201      	movs	r2, #1
   11650:	4b08      	ldr	r3, [pc, #32]	; (11674 <anim_mark_list_change+0x28>)
   11652:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
   11654:	4808      	ldr	r0, [pc, #32]	; (11678 <anim_mark_list_change+0x2c>)
   11656:	4b09      	ldr	r3, [pc, #36]	; (1167c <anim_mark_list_change+0x30>)
   11658:	4798      	blx	r3
   1165a:	b128      	cbz	r0, 11668 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
   1165c:	2104      	movs	r1, #4
   1165e:	4b05      	ldr	r3, [pc, #20]	; (11674 <anim_mark_list_change+0x28>)
   11660:	6858      	ldr	r0, [r3, #4]
   11662:	4b07      	ldr	r3, [pc, #28]	; (11680 <anim_mark_list_change+0x34>)
   11664:	4798      	blx	r3
   11666:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
   11668:	2100      	movs	r1, #0
   1166a:	4b02      	ldr	r3, [pc, #8]	; (11674 <anim_mark_list_change+0x28>)
   1166c:	6858      	ldr	r0, [r3, #4]
   1166e:	4b04      	ldr	r3, [pc, #16]	; (11680 <anim_mark_list_change+0x34>)
   11670:	4798      	blx	r3
   11672:	bd08      	pop	{r3, pc}
   11674:	20002b7c 	.word	0x20002b7c
   11678:	20006d78 	.word	0x20006d78
   1167c:	00012551 	.word	0x00012551
   11680:	00013f01 	.word	0x00013f01

00011684 <anim_task>:
{
   11684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11688:	b091      	sub	sp, #68	; 0x44
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   1168a:	4863      	ldr	r0, [pc, #396]	; (11818 <anim_task+0x194>)
   1168c:	4b63      	ldr	r3, [pc, #396]	; (1181c <anim_task+0x198>)
   1168e:	4798      	blx	r3
   11690:	b168      	cbz	r0, 116ae <anim_task+0x2a>
   11692:	4601      	mov	r1, r0
   11694:	4d60      	ldr	r5, [pc, #384]	; (11818 <anim_task+0x194>)
   11696:	4c62      	ldr	r4, [pc, #392]	; (11820 <anim_task+0x19c>)
        a->has_run = 0;
   11698:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
   1169c:	f36f 0341 	bfc	r3, #1, #1
   116a0:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   116a4:	4628      	mov	r0, r5
   116a6:	47a0      	blx	r4
   116a8:	4601      	mov	r1, r0
   116aa:	2800      	cmp	r0, #0
   116ac:	d1f4      	bne.n	11698 <anim_task+0x14>
    uint32_t elaps = lv_tick_elaps(last_task_run);
   116ae:	4b5d      	ldr	r3, [pc, #372]	; (11824 <anim_task+0x1a0>)
   116b0:	6898      	ldr	r0, [r3, #8]
   116b2:	4b5d      	ldr	r3, [pc, #372]	; (11828 <anim_task+0x1a4>)
   116b4:	4798      	blx	r3
   116b6:	4680      	mov	r8, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   116b8:	4857      	ldr	r0, [pc, #348]	; (11818 <anim_task+0x194>)
   116ba:	4b58      	ldr	r3, [pc, #352]	; (1181c <anim_task+0x198>)
   116bc:	4798      	blx	r3
    while(a != NULL) {
   116be:	4604      	mov	r4, r0
   116c0:	2800      	cmp	r0, #0
   116c2:	f000 8089 	beq.w	117d8 <anim_task+0x154>
        anim_list_changed = false;
   116c6:	4d57      	ldr	r5, [pc, #348]	; (11824 <anim_task+0x1a0>)
   116c8:	f04f 0700 	mov.w	r7, #0
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   116cc:	4e52      	ldr	r6, [pc, #328]	; (11818 <anim_task+0x194>)
   116ce:	f8df 914c 	ldr.w	r9, [pc, #332]	; 1181c <anim_task+0x198>
   116d2:	e01c      	b.n	1170e <anim_task+0x8a>
            if(a->act_time <= 0 && new_act_time >= 0) {
   116d4:	eb13 0308 	adds.w	r3, r3, r8
   116d8:	f100 8085 	bmi.w	117e6 <anim_task+0x162>
                if(a->start_cb) a->start_cb(a);
   116dc:	68a2      	ldr	r2, [r4, #8]
   116de:	2a00      	cmp	r2, #0
   116e0:	f000 8088 	beq.w	117f4 <anim_task+0x170>
   116e4:	4620      	mov	r0, r4
   116e6:	4790      	blx	r2
   116e8:	e01e      	b.n	11728 <anim_task+0xa4>
                else new_value = lv_anim_path_linear(&a->path, a);
   116ea:	4621      	mov	r1, r4
   116ec:	f104 0010 	add.w	r0, r4, #16
   116f0:	4b4e      	ldr	r3, [pc, #312]	; (1182c <anim_task+0x1a8>)
   116f2:	4798      	blx	r3
   116f4:	e028      	b.n	11748 <anim_task+0xc4>
                if(a->act_time >= a->time) {
   116f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   116f8:	6a23      	ldr	r3, [r4, #32]
   116fa:	429a      	cmp	r2, r3
   116fc:	da2b      	bge.n	11756 <anim_task+0xd2>
        if(anim_list_changed)
   116fe:	782b      	ldrb	r3, [r5, #0]
   11700:	2b00      	cmp	r3, #0
   11702:	d071      	beq.n	117e8 <anim_task+0x164>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   11704:	4630      	mov	r0, r6
   11706:	47c8      	blx	r9
   11708:	4604      	mov	r4, r0
    while(a != NULL) {
   1170a:	2c00      	cmp	r4, #0
   1170c:	d064      	beq.n	117d8 <anim_task+0x154>
        anim_list_changed = false;
   1170e:	702f      	strb	r7, [r5, #0]
        if(!a->has_run) {
   11710:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   11714:	f013 0f02 	tst.w	r3, #2
   11718:	d166      	bne.n	117e8 <anim_task+0x164>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
   1171a:	f043 0302 	orr.w	r3, r3, #2
   1171e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            int32_t new_act_time = a->act_time + elaps;
   11722:	6a63      	ldr	r3, [r4, #36]	; 0x24
            if(a->act_time <= 0 && new_act_time >= 0) {
   11724:	2b00      	cmp	r3, #0
   11726:	ddd5      	ble.n	116d4 <anim_task+0x50>
            a->act_time += elaps;
   11728:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1172a:	4443      	add	r3, r8
   1172c:	6263      	str	r3, [r4, #36]	; 0x24
            if(a->act_time >= 0) {
   1172e:	2b00      	cmp	r3, #0
   11730:	dbe5      	blt.n	116fe <anim_task+0x7a>
                if(a->act_time > a->time) a->act_time = a->time;
   11732:	6a22      	ldr	r2, [r4, #32]
   11734:	429a      	cmp	r2, r3
   11736:	bfb8      	it	lt
   11738:	6262      	strlt	r2, [r4, #36]	; 0x24
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
   1173a:	6923      	ldr	r3, [r4, #16]
   1173c:	2b00      	cmp	r3, #0
   1173e:	d0d4      	beq.n	116ea <anim_task+0x66>
   11740:	4621      	mov	r1, r4
   11742:	f104 0010 	add.w	r0, r4, #16
   11746:	4798      	blx	r3
                if(a->exec_cb) a->exec_cb(a->var, new_value);
   11748:	6863      	ldr	r3, [r4, #4]
   1174a:	2b00      	cmp	r3, #0
   1174c:	d0d3      	beq.n	116f6 <anim_task+0x72>
   1174e:	b201      	sxth	r1, r0
   11750:	6820      	ldr	r0, [r4, #0]
   11752:	4798      	blx	r3
   11754:	e7cf      	b.n	116f6 <anim_task+0x72>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
   11756:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1175a:	f013 0301 	ands.w	r3, r3, #1
   1175e:	d108      	bne.n	11772 <anim_task+0xee>
   11760:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   11762:	2a00      	cmp	r2, #0
   11764:	d048      	beq.n	117f8 <anim_task+0x174>
   11766:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1176a:	428a      	cmp	r2, r1
   1176c:	d04b      	beq.n	11806 <anim_task+0x182>
        a->repeat_cnt--;
   1176e:	3a01      	subs	r2, #1
   11770:	86a2      	strh	r2, [r4, #52]	; 0x34
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   11772:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   11774:	b1ca      	cbz	r2, 117aa <anim_task+0x126>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   11776:	6b22      	ldr	r2, [r4, #48]	; 0x30
   11778:	4252      	negs	r2, r2
   1177a:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   1177c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1177e:	2a00      	cmp	r2, #0
   11780:	d0bd      	beq.n	116fe <anim_task+0x7a>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   11782:	2b00      	cmp	r3, #0
   11784:	d03b      	beq.n	117fe <anim_task+0x17a>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
   11786:	f083 0301 	eor.w	r3, r3, #1
   1178a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   1178e:	f363 0100 	bfi	r1, r3, #0, #1
   11792:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
            tmp      = a->start;
   11796:	69a3      	ldr	r3, [r4, #24]
            a->start = a->end;
   11798:	69e0      	ldr	r0, [r4, #28]
   1179a:	61a0      	str	r0, [r4, #24]
            a->end   = tmp;
   1179c:	61e3      	str	r3, [r4, #28]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
   1179e:	f011 0f01 	tst.w	r1, #1
   117a2:	bf08      	it	eq
   117a4:	6ba2      	ldreq	r2, [r4, #56]	; 0x38
   117a6:	6222      	str	r2, [r4, #32]
   117a8:	e7a9      	b.n	116fe <anim_task+0x7a>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   117aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   117ac:	b102      	cbz	r2, 117b0 <anim_task+0x12c>
   117ae:	b333      	cbz	r3, 117fe <anim_task+0x17a>
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
   117b0:	2240      	movs	r2, #64	; 0x40
   117b2:	4621      	mov	r1, r4
   117b4:	4668      	mov	r0, sp
   117b6:	4b1e      	ldr	r3, [pc, #120]	; (11830 <anim_task+0x1ac>)
   117b8:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   117ba:	4621      	mov	r1, r4
   117bc:	4630      	mov	r0, r6
   117be:	4b1d      	ldr	r3, [pc, #116]	; (11834 <anim_task+0x1b0>)
   117c0:	4798      	blx	r3
        lv_mem_free(a);
   117c2:	4620      	mov	r0, r4
   117c4:	4b1c      	ldr	r3, [pc, #112]	; (11838 <anim_task+0x1b4>)
   117c6:	4798      	blx	r3
        anim_mark_list_change();
   117c8:	4b1c      	ldr	r3, [pc, #112]	; (1183c <anim_task+0x1b8>)
   117ca:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
   117cc:	9b03      	ldr	r3, [sp, #12]
   117ce:	2b00      	cmp	r3, #0
   117d0:	d095      	beq.n	116fe <anim_task+0x7a>
   117d2:	4668      	mov	r0, sp
   117d4:	4798      	blx	r3
   117d6:	e792      	b.n	116fe <anim_task+0x7a>
    last_task_run = lv_tick_get();
   117d8:	4b19      	ldr	r3, [pc, #100]	; (11840 <anim_task+0x1bc>)
   117da:	4798      	blx	r3
   117dc:	4b11      	ldr	r3, [pc, #68]	; (11824 <anim_task+0x1a0>)
   117de:	6098      	str	r0, [r3, #8]
}
   117e0:	b011      	add	sp, #68	; 0x44
   117e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            a->act_time += elaps;
   117e6:	6263      	str	r3, [r4, #36]	; 0x24
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   117e8:	4621      	mov	r1, r4
   117ea:	4630      	mov	r0, r6
   117ec:	4b0c      	ldr	r3, [pc, #48]	; (11820 <anim_task+0x19c>)
   117ee:	4798      	blx	r3
   117f0:	4604      	mov	r4, r0
   117f2:	e78a      	b.n	1170a <anim_task+0x86>
            a->act_time += elaps;
   117f4:	6263      	str	r3, [r4, #36]	; 0x24
   117f6:	e79c      	b.n	11732 <anim_task+0xae>
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
   117f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   117fa:	2a00      	cmp	r2, #0
   117fc:	d0d8      	beq.n	117b0 <anim_task+0x12c>
            if(a->playback_now == 0) a->act_time = -a->playback_delay;
   117fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11800:	4249      	negs	r1, r1
   11802:	6261      	str	r1, [r4, #36]	; 0x24
   11804:	e7bf      	b.n	11786 <anim_task+0x102>
        a->act_time = -a->repeat_delay; /*Restart the animation*/
   11806:	6b22      	ldr	r2, [r4, #48]	; 0x30
   11808:	4252      	negs	r2, r2
   1180a:	6262      	str	r2, [r4, #36]	; 0x24
        if(a->playback_time != 0) {
   1180c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1180e:	2a00      	cmp	r2, #0
   11810:	f43f af75 	beq.w	116fe <anim_task+0x7a>
   11814:	e7f3      	b.n	117fe <anim_task+0x17a>
   11816:	bf00      	nop
   11818:	20006d78 	.word	0x20006d78
   1181c:	00012551 	.word	0x00012551
   11820:	00012565 	.word	0x00012565
   11824:	20002b7c 	.word	0x20002b7c
   11828:	00011619 	.word	0x00011619
   1182c:	00011629 	.word	0x00011629
   11830:	00012bfd 	.word	0x00012bfd
   11834:	0001263d 	.word	0x0001263d
   11838:	00012a6d 	.word	0x00012a6d
   1183c:	0001164d 	.word	0x0001164d
   11840:	00011601 	.word	0x00011601

00011844 <_lv_anim_core_init>:
{
   11844:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
   11846:	2140      	movs	r1, #64	; 0x40
   11848:	4809      	ldr	r0, [pc, #36]	; (11870 <_lv_anim_core_init+0x2c>)
   1184a:	4b0a      	ldr	r3, [pc, #40]	; (11874 <_lv_anim_core_init+0x30>)
   1184c:	4798      	blx	r3
    last_task_run = lv_tick_get();
   1184e:	4b0a      	ldr	r3, [pc, #40]	; (11878 <_lv_anim_core_init+0x34>)
   11850:	4798      	blx	r3
   11852:	4c0a      	ldr	r4, [pc, #40]	; (1187c <_lv_anim_core_init+0x38>)
   11854:	60a0      	str	r0, [r4, #8]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
   11856:	2300      	movs	r3, #0
   11858:	2204      	movs	r2, #4
   1185a:	211e      	movs	r1, #30
   1185c:	4808      	ldr	r0, [pc, #32]	; (11880 <_lv_anim_core_init+0x3c>)
   1185e:	4d09      	ldr	r5, [pc, #36]	; (11884 <_lv_anim_core_init+0x40>)
   11860:	47a8      	blx	r5
   11862:	6060      	str	r0, [r4, #4]
    anim_mark_list_change(); /*Turn off the animation task*/
   11864:	4b08      	ldr	r3, [pc, #32]	; (11888 <_lv_anim_core_init+0x44>)
   11866:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actaully changed*/
   11868:	2300      	movs	r3, #0
   1186a:	7023      	strb	r3, [r4, #0]
   1186c:	bd38      	pop	{r3, r4, r5, pc}
   1186e:	bf00      	nop
   11870:	20006d78 	.word	0x20006d78
   11874:	000124a1 	.word	0x000124a1
   11878:	00011601 	.word	0x00011601
   1187c:	20002b7c 	.word	0x20002b7c
   11880:	00011685 	.word	0x00011685
   11884:	00013f8d 	.word	0x00013f8d
   11888:	0001164d 	.word	0x0001164d

0001188c <lv_anim_init>:
{
   1188c:	b510      	push	{r4, lr}
   1188e:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
   11890:	2140      	movs	r1, #64	; 0x40
   11892:	4b0d      	ldr	r3, [pc, #52]	; (118c8 <lv_anim_init+0x3c>)
   11894:	4798      	blx	r3
    a->time    = 500;
   11896:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1189a:	6223      	str	r3, [r4, #32]
    a->start   = 0;
   1189c:	2300      	movs	r3, #0
   1189e:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
   118a0:	2364      	movs	r3, #100	; 0x64
   118a2:	61e3      	str	r3, [r4, #28]
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
   118a4:	4b09      	ldr	r3, [pc, #36]	; (118cc <lv_anim_init+0x40>)
   118a6:	781a      	ldrb	r2, [r3, #0]
   118a8:	7422      	strb	r2, [r4, #16]
   118aa:	785a      	ldrb	r2, [r3, #1]
   118ac:	7462      	strb	r2, [r4, #17]
   118ae:	789a      	ldrb	r2, [r3, #2]
   118b0:	74a2      	strb	r2, [r4, #18]
   118b2:	78db      	ldrb	r3, [r3, #3]
   118b4:	74e3      	strb	r3, [r4, #19]
    a->repeat_cnt = 1;
   118b6:	2301      	movs	r3, #1
   118b8:	86a3      	strh	r3, [r4, #52]	; 0x34
    a->early_apply = 1;
   118ba:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   118be:	f043 0301 	orr.w	r3, r3, #1
   118c2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   118c6:	bd10      	pop	{r4, pc}
   118c8:	000130df 	.word	0x000130df
   118cc:	000206e4 	.word	0x000206e4

000118d0 <lv_anim_del>:
{
   118d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d4:	4607      	mov	r7, r0
   118d6:	4689      	mov	r9, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
   118d8:	4815      	ldr	r0, [pc, #84]	; (11930 <lv_anim_del+0x60>)
   118da:	4b16      	ldr	r3, [pc, #88]	; (11934 <lv_anim_del+0x64>)
   118dc:	4798      	blx	r3
    while(a != NULL) {
   118de:	b310      	cbz	r0, 11926 <lv_anim_del+0x56>
   118e0:	4604      	mov	r4, r0
   118e2:	f04f 0a00 	mov.w	sl, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   118e6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 11930 <lv_anim_del+0x60>
   118ea:	4e13      	ldr	r6, [pc, #76]	; (11938 <lv_anim_del+0x68>)
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
   118ec:	f8df b054 	ldr.w	fp, [pc, #84]	; 11944 <lv_anim_del+0x74>
   118f0:	e00b      	b.n	1190a <lv_anim_del+0x3a>
   118f2:	4621      	mov	r1, r4
   118f4:	4640      	mov	r0, r8
   118f6:	47d8      	blx	fp
            lv_mem_free(a);
   118f8:	4620      	mov	r0, r4
   118fa:	4b10      	ldr	r3, [pc, #64]	; (1193c <lv_anim_del+0x6c>)
   118fc:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
   118fe:	4b10      	ldr	r3, [pc, #64]	; (11940 <lv_anim_del+0x70>)
   11900:	4798      	blx	r3
            del = true;
   11902:	f04f 0a01 	mov.w	sl, #1
   11906:	462c      	mov	r4, r5
    while(a != NULL) {
   11908:	b17d      	cbz	r5, 1192a <lv_anim_del+0x5a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
   1190a:	4621      	mov	r1, r4
   1190c:	4640      	mov	r0, r8
   1190e:	47b0      	blx	r6
   11910:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
   11912:	6823      	ldr	r3, [r4, #0]
   11914:	42bb      	cmp	r3, r7
   11916:	d1f6      	bne.n	11906 <lv_anim_del+0x36>
   11918:	6863      	ldr	r3, [r4, #4]
   1191a:	454b      	cmp	r3, r9
   1191c:	d0e9      	beq.n	118f2 <lv_anim_del+0x22>
   1191e:	f1b9 0f00 	cmp.w	r9, #0
   11922:	d1f0      	bne.n	11906 <lv_anim_del+0x36>
   11924:	e7e5      	b.n	118f2 <lv_anim_del+0x22>
    bool del = false;
   11926:	f04f 0a00 	mov.w	sl, #0
}
   1192a:	4650      	mov	r0, sl
   1192c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11930:	20006d78 	.word	0x20006d78
   11934:	00012551 	.word	0x00012551
   11938:	00012565 	.word	0x00012565
   1193c:	00012a6d 	.word	0x00012a6d
   11940:	0001164d 	.word	0x0001164d
   11944:	0001263d 	.word	0x0001263d

00011948 <lv_anim_start>:
{
   11948:	b530      	push	{r4, r5, lr}
   1194a:	b083      	sub	sp, #12
   1194c:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
   1194e:	6841      	ldr	r1, [r0, #4]
   11950:	b111      	cbz	r1, 11958 <lv_anim_start+0x10>
   11952:	6800      	ldr	r0, [r0, #0]
   11954:	4b1b      	ldr	r3, [pc, #108]	; (119c4 <lv_anim_start+0x7c>)
   11956:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
   11958:	481b      	ldr	r0, [pc, #108]	; (119c8 <lv_anim_start+0x80>)
   1195a:	4b1c      	ldr	r3, [pc, #112]	; (119cc <lv_anim_start+0x84>)
   1195c:	4798      	blx	r3
   1195e:	b9f0      	cbnz	r0, 1199e <lv_anim_start+0x56>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
   11960:	4819      	ldr	r0, [pc, #100]	; (119c8 <lv_anim_start+0x80>)
   11962:	4b1b      	ldr	r3, [pc, #108]	; (119d0 <lv_anim_start+0x88>)
   11964:	4798      	blx	r3
   11966:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
   11968:	4b1a      	ldr	r3, [pc, #104]	; (119d4 <lv_anim_start+0x8c>)
   1196a:	4798      	blx	r3
   1196c:	b1e8      	cbz	r0, 119aa <lv_anim_start+0x62>
    if(new_anim == NULL) return;
   1196e:	b1a4      	cbz	r4, 1199a <lv_anim_start+0x52>
    a->time_orig = a->time;
   11970:	6a2b      	ldr	r3, [r5, #32]
   11972:	63ab      	str	r3, [r5, #56]	; 0x38
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
   11974:	2240      	movs	r2, #64	; 0x40
   11976:	4629      	mov	r1, r5
   11978:	4620      	mov	r0, r4
   1197a:	4b17      	ldr	r3, [pc, #92]	; (119d8 <lv_anim_start+0x90>)
   1197c:	4798      	blx	r3
    if(new_anim->early_apply) {
   1197e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   11982:	f013 0f01 	tst.w	r3, #1
   11986:	d006      	beq.n	11996 <lv_anim_start+0x4e>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
   11988:	6863      	ldr	r3, [r4, #4]
   1198a:	b123      	cbz	r3, 11996 <lv_anim_start+0x4e>
   1198c:	6820      	ldr	r0, [r4, #0]
   1198e:	b110      	cbz	r0, 11996 <lv_anim_start+0x4e>
   11990:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
   11994:	4798      	blx	r3
    anim_mark_list_change();
   11996:	4b11      	ldr	r3, [pc, #68]	; (119dc <lv_anim_start+0x94>)
   11998:	4798      	blx	r3
}
   1199a:	b003      	add	sp, #12
   1199c:	bd30      	pop	{r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
   1199e:	4b10      	ldr	r3, [pc, #64]	; (119e0 <lv_anim_start+0x98>)
   119a0:	4798      	blx	r3
   119a2:	3801      	subs	r0, #1
   119a4:	4b0f      	ldr	r3, [pc, #60]	; (119e4 <lv_anim_start+0x9c>)
   119a6:	6098      	str	r0, [r3, #8]
   119a8:	e7da      	b.n	11960 <lv_anim_start+0x18>
    LV_ASSERT_MEM(new_anim);
   119aa:	4b0f      	ldr	r3, [pc, #60]	; (119e8 <lv_anim_start+0xa0>)
   119ac:	9300      	str	r3, [sp, #0]
   119ae:	226a      	movs	r2, #106	; 0x6a
   119b0:	490e      	ldr	r1, [pc, #56]	; (119ec <lv_anim_start+0xa4>)
   119b2:	2003      	movs	r0, #3
   119b4:	4d0e      	ldr	r5, [pc, #56]	; (119f0 <lv_anim_start+0xa8>)
   119b6:	47a8      	blx	r5
   119b8:	4622      	mov	r2, r4
   119ba:	2300      	movs	r3, #0
   119bc:	480d      	ldr	r0, [pc, #52]	; (119f4 <lv_anim_start+0xac>)
   119be:	490e      	ldr	r1, [pc, #56]	; (119f8 <lv_anim_start+0xb0>)
   119c0:	4788      	blx	r1
   119c2:	e7fe      	b.n	119c2 <lv_anim_start+0x7a>
   119c4:	000118d1 	.word	0x000118d1
   119c8:	20006d78 	.word	0x20006d78
   119cc:	000127ed 	.word	0x000127ed
   119d0:	000124b9 	.word	0x000124b9
   119d4:	0000298d 	.word	0x0000298d
   119d8:	00012bfd 	.word	0x00012bfd
   119dc:	0001164d 	.word	0x0001164d
   119e0:	00011601 	.word	0x00011601
   119e4:	20002b7c 	.word	0x20002b7c
   119e8:	000206ec 	.word	0x000206ec
   119ec:	000206fc 	.word	0x000206fc
   119f0:	00012805 	.word	0x00012805
   119f4:	0001b4bc 	.word	0x0001b4bc
   119f8:	00002995 	.word	0x00002995

000119fc <lv_anim_get>:
{
   119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119fe:	4604      	mov	r4, r0
   11a00:	460f      	mov	r7, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
   11a02:	480a      	ldr	r0, [pc, #40]	; (11a2c <lv_anim_get+0x30>)
   11a04:	4b0a      	ldr	r3, [pc, #40]	; (11a30 <lv_anim_get+0x34>)
   11a06:	4798      	blx	r3
   11a08:	4601      	mov	r1, r0
   11a0a:	b160      	cbz	r0, 11a26 <lv_anim_get+0x2a>
   11a0c:	4e07      	ldr	r6, [pc, #28]	; (11a2c <lv_anim_get+0x30>)
   11a0e:	4d09      	ldr	r5, [pc, #36]	; (11a34 <lv_anim_get+0x38>)
   11a10:	e003      	b.n	11a1a <lv_anim_get+0x1e>
   11a12:	4630      	mov	r0, r6
   11a14:	47a8      	blx	r5
   11a16:	4601      	mov	r1, r0
   11a18:	b128      	cbz	r0, 11a26 <lv_anim_get+0x2a>
        if(a->var == var && a->exec_cb == exec_cb) {
   11a1a:	680b      	ldr	r3, [r1, #0]
   11a1c:	42a3      	cmp	r3, r4
   11a1e:	d1f8      	bne.n	11a12 <lv_anim_get+0x16>
   11a20:	684b      	ldr	r3, [r1, #4]
   11a22:	42bb      	cmp	r3, r7
   11a24:	d1f5      	bne.n	11a12 <lv_anim_get+0x16>
}
   11a26:	4608      	mov	r0, r1
   11a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a2a:	bf00      	nop
   11a2c:	20006d78 	.word	0x20006d78
   11a30:	00012551 	.word	0x00012551
   11a34:	00012565 	.word	0x00012565

00011a38 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
   11a38:	1a89      	subs	r1, r1, r2
   11a3a:	2900      	cmp	r1, #0
   11a3c:	bfb8      	it	lt
   11a3e:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
   11a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11a44:	fb02 f201 	mul.w	r2, r2, r1
   11a48:	fb92 f0f0 	sdiv	r0, r2, r0
   11a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11a50:	4290      	cmp	r0, r2
   11a52:	bf28      	it	cs
   11a54:	4610      	movcs	r0, r2
        time++;
   11a56:	2800      	cmp	r0, #0
   11a58:	bf08      	it	eq
   11a5a:	2001      	moveq	r0, #1
}
   11a5c:	b280      	uxth	r0, r0
   11a5e:	4770      	bx	lr

00011a60 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   11a60:	b430      	push	{r4, r5}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   11a62:	f9b0 5000 	ldrsh.w	r5, [r0]
   11a66:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   11a6a:	1b5b      	subs	r3, r3, r5
   11a6c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   11a70:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
   11a72:	b29c      	uxth	r4, r3
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   11a74:	880a      	ldrh	r2, [r1, #0]
   11a76:	1b52      	subs	r2, r2, r5
   11a78:	1b12      	subs	r2, r2, r4
    lv_coord_t py = p->y - cy;
   11a7a:	8849      	ldrh	r1, [r1, #2]
   11a7c:	8840      	ldrh	r0, [r0, #2]
   11a7e:	1a08      	subs	r0, r1, r0
   11a80:	1b00      	subs	r0, r0, r4

    int32_t r_sqrd = r * r;
   11a82:	fb13 f303 	smulbb	r3, r3, r3
    int32_t dist = (px * px) + (py * py);
   11a86:	fb10 f000 	smulbb	r0, r0, r0
   11a8a:	fb12 0202 	smlabb	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   11a8e:	4293      	cmp	r3, r2
   11a90:	bfb4      	ite	lt
   11a92:	2000      	movlt	r0, #0
   11a94:	2001      	movge	r0, #1
   11a96:	bc30      	pop	{r4, r5}
   11a98:	4770      	bx	lr

00011a9a <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   11a9a:	3901      	subs	r1, #1
   11a9c:	8843      	ldrh	r3, [r0, #2]
   11a9e:	4419      	add	r1, r3
   11aa0:	80c1      	strh	r1, [r0, #6]
   11aa2:	4770      	bx	lr

00011aa4 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   11aa4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   11aa8:	f9b0 3000 	ldrsh.w	r3, [r0]
   11aac:	1ad2      	subs	r2, r2, r3
   11aae:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   11ab2:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   11ab6:	1a18      	subs	r0, r3, r0
   11ab8:	3001      	adds	r0, #1
}
   11aba:	fb02 0000 	mla	r0, r2, r0, r0
   11abe:	4770      	bx	lr

00011ac0 <_lv_area_intersect>:
{
   11ac0:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   11ac2:	f9b2 5000 	ldrsh.w	r5, [r2]
   11ac6:	f9b1 3000 	ldrsh.w	r3, [r1]
   11aca:	429d      	cmp	r5, r3
   11acc:	bfb8      	it	lt
   11ace:	461d      	movlt	r5, r3
   11ad0:	8005      	strh	r5, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   11ad2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   11ad6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   11ada:	42a3      	cmp	r3, r4
   11adc:	bfb8      	it	lt
   11ade:	4623      	movlt	r3, r4
   11ae0:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   11ae2:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
   11ae6:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   11aea:	42b4      	cmp	r4, r6
   11aec:	bfa8      	it	ge
   11aee:	4634      	movge	r4, r6
   11af0:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   11af2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
   11af6:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   11afa:	428a      	cmp	r2, r1
   11afc:	bfa8      	it	ge
   11afe:	460a      	movge	r2, r1
   11b00:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   11b02:	42a5      	cmp	r5, r4
   11b04:	dc05      	bgt.n	11b12 <_lv_area_intersect+0x52>
   11b06:	4293      	cmp	r3, r2
   11b08:	bfcc      	ite	gt
   11b0a:	2000      	movgt	r0, #0
   11b0c:	2001      	movle	r0, #1
}
   11b0e:	bc70      	pop	{r4, r5, r6}
   11b10:	4770      	bx	lr
        union_ok = false;
   11b12:	2000      	movs	r0, #0
   11b14:	e7fb      	b.n	11b0e <_lv_area_intersect+0x4e>

00011b16 <_lv_area_join>:
{
   11b16:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   11b18:	f9b2 3000 	ldrsh.w	r3, [r2]
   11b1c:	f9b1 4000 	ldrsh.w	r4, [r1]
   11b20:	42a3      	cmp	r3, r4
   11b22:	bfa8      	it	ge
   11b24:	4623      	movge	r3, r4
   11b26:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   11b28:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   11b2c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   11b30:	42a3      	cmp	r3, r4
   11b32:	bfa8      	it	ge
   11b34:	4623      	movge	r3, r4
   11b36:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   11b38:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   11b3c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   11b40:	42a3      	cmp	r3, r4
   11b42:	bfb8      	it	lt
   11b44:	4623      	movlt	r3, r4
   11b46:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   11b48:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   11b4c:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   11b50:	4293      	cmp	r3, r2
   11b52:	bfb8      	it	lt
   11b54:	4613      	movlt	r3, r2
   11b56:	80c3      	strh	r3, [r0, #6]
}
   11b58:	f85d 4b04 	ldr.w	r4, [sp], #4
   11b5c:	4770      	bx	lr
	...

00011b60 <_lv_area_is_point_on>:
{
   11b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b64:	b085      	sub	sp, #20
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   11b66:	f9b1 5000 	ldrsh.w	r5, [r1]
   11b6a:	f9b0 e000 	ldrsh.w	lr, [r0]
   11b6e:	4575      	cmp	r5, lr
   11b70:	f2c0 809d 	blt.w	11cae <_lv_area_is_point_on+0x14e>
   11b74:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   11b78:	4545      	cmp	r5, r8
   11b7a:	f300 809c 	bgt.w	11cb6 <_lv_area_is_point_on+0x156>
   11b7e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   11b82:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
   11b86:	4553      	cmp	r3, sl
   11b88:	f2c0 8097 	blt.w	11cba <_lv_area_is_point_on+0x15a>
   11b8c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   11b90:	9001      	str	r0, [sp, #4]
    if(!is_on_rect)
   11b92:	4283      	cmp	r3, r0
   11b94:	f300 8093 	bgt.w	11cbe <_lv_area_is_point_on+0x15e>
    if(radius <= 0) {
   11b98:	2a00      	cmp	r2, #0
   11b9a:	f340 8092 	ble.w	11cc2 <_lv_area_is_point_on+0x162>
   11b9e:	468c      	mov	ip, r1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11ba0:	fa1f f988 	uxth.w	r9, r8
   11ba4:	fa1f f68e 	uxth.w	r6, lr
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11ba8:	b287      	uxth	r7, r0
   11baa:	fa1f f58a 	uxth.w	r5, sl
    corner_area.x1 = a_p->x1;
   11bae:	f8ad e008 	strh.w	lr, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11bb2:	f109 0301 	add.w	r3, r9, #1
   11bb6:	1b9b      	subs	r3, r3, r6
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   11bb8:	b21b      	sxth	r3, r3
   11bba:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11bbe:	1c7b      	adds	r3, r7, #1
   11bc0:	1b5b      	subs	r3, r3, r5
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   11bc2:	b21b      	sxth	r3, r3
   11bc4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   11bc8:	1064      	asrs	r4, r4, #1
   11bca:	104b      	asrs	r3, r1, #1
    corner_area.x2 = a_p->x1 + radius;
   11bcc:	42a3      	cmp	r3, r4
   11bce:	bfa8      	it	ge
   11bd0:	4623      	movge	r3, r4
   11bd2:	4293      	cmp	r3, r2
   11bd4:	bfa8      	it	ge
   11bd6:	4613      	movge	r3, r2
   11bd8:	b29c      	uxth	r4, r3
   11bda:	4426      	add	r6, r4
   11bdc:	b2b6      	uxth	r6, r6
   11bde:	f8ad 600c 	strh.w	r6, [sp, #12]
    corner_area.y1 = a_p->y1;
   11be2:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   11be6:	4425      	add	r5, r4
   11be8:	b2ad      	uxth	r5, r5
   11bea:	fa0f fb85 	sxth.w	fp, r5
   11bee:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   11bf2:	2200      	movs	r2, #0
   11bf4:	f8cd c000 	str.w	ip, [sp]
   11bf8:	4661      	mov	r1, ip
   11bfa:	a802      	add	r0, sp, #8
   11bfc:	f7ff ffb0 	bl	11b60 <_lv_area_is_point_on>
   11c00:	b150      	cbz	r0, 11c18 <_lv_area_is_point_on+0xb8>
        corner_area.x2 += radius;
   11c02:	4426      	add	r6, r4
   11c04:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y2 += radius;
   11c08:	442c      	add	r4, r5
   11c0a:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   11c0e:	9900      	ldr	r1, [sp, #0]
   11c10:	a802      	add	r0, sp, #8
   11c12:	4b2e      	ldr	r3, [pc, #184]	; (11ccc <_lv_area_is_point_on+0x16c>)
   11c14:	4798      	blx	r3
   11c16:	e04b      	b.n	11cb0 <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y2 - radius;
   11c18:	1b3f      	subs	r7, r7, r4
   11c1a:	b2bf      	uxth	r7, r7
   11c1c:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y2;
   11c20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11c24:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   11c28:	2200      	movs	r2, #0
   11c2a:	9900      	ldr	r1, [sp, #0]
   11c2c:	a802      	add	r0, sp, #8
   11c2e:	f7ff ff97 	bl	11b60 <_lv_area_is_point_on>
   11c32:	b150      	cbz	r0, 11c4a <_lv_area_is_point_on+0xea>
        corner_area.x2 += radius;
   11c34:	4426      	add	r6, r4
   11c36:	f8ad 600c 	strh.w	r6, [sp, #12]
        corner_area.y1 -= radius;
   11c3a:	1b3c      	subs	r4, r7, r4
   11c3c:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   11c40:	9900      	ldr	r1, [sp, #0]
   11c42:	a802      	add	r0, sp, #8
   11c44:	4b21      	ldr	r3, [pc, #132]	; (11ccc <_lv_area_is_point_on+0x16c>)
   11c46:	4798      	blx	r3
   11c48:	e032      	b.n	11cb0 <_lv_area_is_point_on+0x150>
    corner_area.x1 = a_p->x2 - radius;
   11c4a:	eba9 0904 	sub.w	r9, r9, r4
   11c4e:	fa1f f989 	uxth.w	r9, r9
   11c52:	f8ad 9008 	strh.w	r9, [sp, #8]
    corner_area.x2 = a_p->x2;
   11c56:	f8ad 800c 	strh.w	r8, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   11c5a:	2200      	movs	r2, #0
   11c5c:	9e00      	ldr	r6, [sp, #0]
   11c5e:	4631      	mov	r1, r6
   11c60:	a802      	add	r0, sp, #8
   11c62:	f7ff ff7d 	bl	11b60 <_lv_area_is_point_on>
   11c66:	b158      	cbz	r0, 11c80 <_lv_area_is_point_on+0x120>
        corner_area.x1 -= radius;
   11c68:	eba9 0904 	sub.w	r9, r9, r4
   11c6c:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y1 -= radius;
   11c70:	1b3c      	subs	r4, r7, r4
   11c72:	f8ad 400a 	strh.w	r4, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
   11c76:	4631      	mov	r1, r6
   11c78:	a802      	add	r0, sp, #8
   11c7a:	4b14      	ldr	r3, [pc, #80]	; (11ccc <_lv_area_is_point_on+0x16c>)
   11c7c:	4798      	blx	r3
   11c7e:	e017      	b.n	11cb0 <_lv_area_is_point_on+0x150>
    corner_area.y1 = a_p->y1;
   11c80:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
   11c84:	f8ad b00e 	strh.w	fp, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   11c88:	2200      	movs	r2, #0
   11c8a:	9e00      	ldr	r6, [sp, #0]
   11c8c:	4631      	mov	r1, r6
   11c8e:	a802      	add	r0, sp, #8
   11c90:	f7ff ff66 	bl	11b60 <_lv_area_is_point_on>
   11c94:	b1b8      	cbz	r0, 11cc6 <_lv_area_is_point_on+0x166>
        corner_area.x1 -= radius;
   11c96:	eba9 0904 	sub.w	r9, r9, r4
   11c9a:	f8ad 9008 	strh.w	r9, [sp, #8]
        corner_area.y2 += radius;
   11c9e:	442c      	add	r4, r5
   11ca0:	f8ad 400e 	strh.w	r4, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
   11ca4:	4631      	mov	r1, r6
   11ca6:	a802      	add	r0, sp, #8
   11ca8:	4b08      	ldr	r3, [pc, #32]	; (11ccc <_lv_area_is_point_on+0x16c>)
   11caa:	4798      	blx	r3
   11cac:	e000      	b.n	11cb0 <_lv_area_is_point_on+0x150>
        return false;
   11cae:	2000      	movs	r0, #0
}
   11cb0:	b005      	add	sp, #20
   11cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
   11cb6:	2000      	movs	r0, #0
   11cb8:	e7fa      	b.n	11cb0 <_lv_area_is_point_on+0x150>
   11cba:	2000      	movs	r0, #0
   11cbc:	e7f8      	b.n	11cb0 <_lv_area_is_point_on+0x150>
   11cbe:	2000      	movs	r0, #0
   11cc0:	e7f6      	b.n	11cb0 <_lv_area_is_point_on+0x150>
        return true;
   11cc2:	2001      	movs	r0, #1
   11cc4:	e7f4      	b.n	11cb0 <_lv_area_is_point_on+0x150>
    return true;
   11cc6:	2001      	movs	r0, #1
   11cc8:	e7f2      	b.n	11cb0 <_lv_area_is_point_on+0x150>
   11cca:	bf00      	nop
   11ccc:	00011a61 	.word	0x00011a61

00011cd0 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   11cd0:	f9b0 2000 	ldrsh.w	r2, [r0]
   11cd4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   11cd8:	429a      	cmp	r2, r3
   11cda:	dc14      	bgt.n	11d06 <_lv_area_is_on+0x36>
   11cdc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   11ce0:	f9b1 3000 	ldrsh.w	r3, [r1]
   11ce4:	429a      	cmp	r2, r3
   11ce6:	db10      	blt.n	11d0a <_lv_area_is_on+0x3a>
   11ce8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   11cec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   11cf0:	429a      	cmp	r2, r3
   11cf2:	dc0c      	bgt.n	11d0e <_lv_area_is_on+0x3e>
   11cf4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   11cf8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   11cfc:	4298      	cmp	r0, r3
   11cfe:	bfb4      	ite	lt
   11d00:	2000      	movlt	r0, #0
   11d02:	2001      	movge	r0, #1
   11d04:	4770      	bx	lr
        return false;
   11d06:	2000      	movs	r0, #0
   11d08:	4770      	bx	lr
   11d0a:	2000      	movs	r0, #0
   11d0c:	4770      	bx	lr
   11d0e:	2000      	movs	r0, #0
}
   11d10:	4770      	bx	lr
	...

00011d14 <_lv_area_is_in>:
{
   11d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d18:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   11d1a:	f9b0 5000 	ldrsh.w	r5, [r0]
   11d1e:	f9b1 3000 	ldrsh.w	r3, [r1]
   11d22:	42ab      	cmp	r3, r5
   11d24:	dc14      	bgt.n	11d50 <_lv_area_is_in+0x3c>
   11d26:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   11d2a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   11d2e:	429c      	cmp	r4, r3
   11d30:	db14      	blt.n	11d5c <_lv_area_is_in+0x48>
   11d32:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
   11d36:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   11d3a:	429c      	cmp	r4, r3
   11d3c:	dc10      	bgt.n	11d60 <_lv_area_is_in+0x4c>
   11d3e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   11d42:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
   11d46:	42a3      	cmp	r3, r4
   11d48:	bfcc      	ite	gt
   11d4a:	2300      	movgt	r3, #0
   11d4c:	2301      	movle	r3, #1
   11d4e:	e000      	b.n	11d52 <_lv_area_is_in+0x3e>
    bool is_in = false;
   11d50:	2300      	movs	r3, #0
    if(radius == 0) return is_in;
   11d52:	b93a      	cbnz	r2, 11d64 <_lv_area_is_in+0x50>
}
   11d54:	4618      	mov	r0, r3
   11d56:	b002      	add	sp, #8
   11d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   11d5c:	2300      	movs	r3, #0
   11d5e:	e7f8      	b.n	11d52 <_lv_area_is_in+0x3e>
   11d60:	2300      	movs	r3, #0
   11d62:	e7f6      	b.n	11d52 <_lv_area_is_in+0x3e>
   11d64:	4617      	mov	r7, r2
   11d66:	460c      	mov	r4, r1
   11d68:	4606      	mov	r6, r0
    p.x = ain_p->x1;
   11d6a:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
   11d6e:	8843      	ldrh	r3, [r0, #2]
   11d70:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   11d74:	a901      	add	r1, sp, #4
   11d76:	4620      	mov	r0, r4
   11d78:	4b13      	ldr	r3, [pc, #76]	; (11dc8 <_lv_area_is_in+0xb4>)
   11d7a:	4798      	blx	r3
   11d7c:	4603      	mov	r3, r0
   11d7e:	2800      	cmp	r0, #0
   11d80:	d0e8      	beq.n	11d54 <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   11d82:	f9b6 8004 	ldrsh.w	r8, [r6, #4]
   11d86:	a902      	add	r1, sp, #8
   11d88:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   11d8c:	463a      	mov	r2, r7
   11d8e:	4620      	mov	r0, r4
   11d90:	4b0d      	ldr	r3, [pc, #52]	; (11dc8 <_lv_area_is_in+0xb4>)
   11d92:	4798      	blx	r3
   11d94:	4603      	mov	r3, r0
   11d96:	2800      	cmp	r0, #0
   11d98:	d0dc      	beq.n	11d54 <_lv_area_is_in+0x40>
    p.x = ain_p->x1;
   11d9a:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y2;
   11d9e:	88f3      	ldrh	r3, [r6, #6]
   11da0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   11da4:	463a      	mov	r2, r7
   11da6:	a901      	add	r1, sp, #4
   11da8:	4620      	mov	r0, r4
   11daa:	4b07      	ldr	r3, [pc, #28]	; (11dc8 <_lv_area_is_in+0xb4>)
   11dac:	4798      	blx	r3
   11dae:	4603      	mov	r3, r0
   11db0:	2800      	cmp	r0, #0
   11db2:	d0cf      	beq.n	11d54 <_lv_area_is_in+0x40>
    p.x = ain_p->x2;
   11db4:	a902      	add	r1, sp, #8
   11db6:	f821 8d04 	strh.w	r8, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   11dba:	463a      	mov	r2, r7
   11dbc:	4620      	mov	r0, r4
   11dbe:	4b02      	ldr	r3, [pc, #8]	; (11dc8 <_lv_area_is_in+0xb4>)
   11dc0:	4798      	blx	r3
   11dc2:	4603      	mov	r3, r0
   11dc4:	e7c6      	b.n	11d54 <_lv_area_is_in+0x40>
   11dc6:	bf00      	nop
   11dc8:	00011b61 	.word	0x00011b61

00011dcc <_lv_area_align>:
{
   11dcc:	b430      	push	{r4, r5}
    switch(align) {
   11dce:	2a14      	cmp	r2, #20
   11dd0:	d83a      	bhi.n	11e48 <_lv_area_align+0x7c>
   11dd2:	e8df f012 	tbh	[pc, r2, lsl #1]
   11dd6:	0015      	.short	0x0015
   11dd8:	00470043 	.word	0x00470043
   11ddc:	0067005c 	.word	0x0067005c
   11de0:	008d0072 	.word	0x008d0072
   11de4:	00b3009e 	.word	0x00b3009e
   11de8:	00d600ce 	.word	0x00d600ce
   11dec:	00fc00ee 	.word	0x00fc00ee
   11df0:	011c0104 	.word	0x011c0104
   11df4:	0132012a 	.word	0x0132012a
   11df8:	0158014a 	.word	0x0158014a
   11dfc:	01780160 	.word	0x01780160
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11e00:	8882      	ldrh	r2, [r0, #4]
   11e02:	3201      	adds	r2, #1
   11e04:	8804      	ldrh	r4, [r0, #0]
   11e06:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11e08:	b212      	sxth	r2, r2
   11e0a:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11e0e:	888a      	ldrh	r2, [r1, #4]
   11e10:	3201      	adds	r2, #1
   11e12:	880d      	ldrh	r5, [r1, #0]
   11e14:	1b52      	subs	r2, r2, r5
   11e16:	b212      	sxth	r2, r2
   11e18:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11e1c:	1052      	asrs	r2, r2, #1
   11e1e:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11e22:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11e24:	88c2      	ldrh	r2, [r0, #6]
   11e26:	3201      	adds	r2, #1
   11e28:	8844      	ldrh	r4, [r0, #2]
   11e2a:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   11e2c:	b212      	sxth	r2, r2
   11e2e:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11e32:	88ca      	ldrh	r2, [r1, #6]
   11e34:	3201      	adds	r2, #1
   11e36:	8849      	ldrh	r1, [r1, #2]
   11e38:	1a52      	subs	r2, r2, r1
   11e3a:	b212      	sxth	r2, r2
   11e3c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11e40:	1052      	asrs	r2, r2, #1
   11e42:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11e46:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   11e48:	881a      	ldrh	r2, [r3, #0]
   11e4a:	8801      	ldrh	r1, [r0, #0]
   11e4c:	440a      	add	r2, r1
   11e4e:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
   11e50:	885a      	ldrh	r2, [r3, #2]
   11e52:	8841      	ldrh	r1, [r0, #2]
   11e54:	440a      	add	r2, r1
   11e56:	805a      	strh	r2, [r3, #2]
}
   11e58:	bc30      	pop	{r4, r5}
   11e5a:	4770      	bx	lr
            res->x = 0;
   11e5c:	2200      	movs	r2, #0
   11e5e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   11e60:	805a      	strh	r2, [r3, #2]
            break;
   11e62:	e7f1      	b.n	11e48 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11e64:	8882      	ldrh	r2, [r0, #4]
   11e66:	3201      	adds	r2, #1
   11e68:	8804      	ldrh	r4, [r0, #0]
   11e6a:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11e6c:	b212      	sxth	r2, r2
   11e6e:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11e72:	888a      	ldrh	r2, [r1, #4]
   11e74:	3201      	adds	r2, #1
   11e76:	8809      	ldrh	r1, [r1, #0]
   11e78:	1a52      	subs	r2, r2, r1
   11e7a:	b212      	sxth	r2, r2
   11e7c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11e80:	1052      	asrs	r2, r2, #1
   11e82:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11e86:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   11e88:	2200      	movs	r2, #0
   11e8a:	805a      	strh	r2, [r3, #2]
            break;
   11e8c:	e7dc      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   11e8e:	8882      	ldrh	r2, [r0, #4]
   11e90:	888c      	ldrh	r4, [r1, #4]
   11e92:	1b12      	subs	r2, r2, r4
   11e94:	8804      	ldrh	r4, [r0, #0]
   11e96:	1b12      	subs	r2, r2, r4
   11e98:	8809      	ldrh	r1, [r1, #0]
   11e9a:	440a      	add	r2, r1
   11e9c:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   11e9e:	2200      	movs	r2, #0
   11ea0:	805a      	strh	r2, [r3, #2]
            break;
   11ea2:	e7d1      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = 0;
   11ea4:	2200      	movs	r2, #0
   11ea6:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   11ea8:	88c2      	ldrh	r2, [r0, #6]
   11eaa:	88cc      	ldrh	r4, [r1, #6]
   11eac:	1b12      	subs	r2, r2, r4
   11eae:	8844      	ldrh	r4, [r0, #2]
   11eb0:	1b12      	subs	r2, r2, r4
   11eb2:	8849      	ldrh	r1, [r1, #2]
   11eb4:	440a      	add	r2, r1
   11eb6:	805a      	strh	r2, [r3, #2]
            break;
   11eb8:	e7c6      	b.n	11e48 <_lv_area_align+0x7c>
   11eba:	8882      	ldrh	r2, [r0, #4]
   11ebc:	3201      	adds	r2, #1
   11ebe:	8804      	ldrh	r4, [r0, #0]
   11ec0:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11ec2:	b212      	sxth	r2, r2
   11ec4:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11ec8:	888a      	ldrh	r2, [r1, #4]
   11eca:	3201      	adds	r2, #1
   11ecc:	880d      	ldrh	r5, [r1, #0]
   11ece:	1b52      	subs	r2, r2, r5
   11ed0:	b212      	sxth	r2, r2
   11ed2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11ed6:	1052      	asrs	r2, r2, #1
   11ed8:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11edc:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   11ede:	88c2      	ldrh	r2, [r0, #6]
   11ee0:	88cc      	ldrh	r4, [r1, #6]
   11ee2:	1b12      	subs	r2, r2, r4
   11ee4:	8844      	ldrh	r4, [r0, #2]
   11ee6:	1b12      	subs	r2, r2, r4
   11ee8:	8849      	ldrh	r1, [r1, #2]
   11eea:	440a      	add	r2, r1
   11eec:	805a      	strh	r2, [r3, #2]
            break;
   11eee:	e7ab      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   11ef0:	8882      	ldrh	r2, [r0, #4]
   11ef2:	888c      	ldrh	r4, [r1, #4]
   11ef4:	1b12      	subs	r2, r2, r4
   11ef6:	8804      	ldrh	r4, [r0, #0]
   11ef8:	1b12      	subs	r2, r2, r4
   11efa:	880c      	ldrh	r4, [r1, #0]
   11efc:	4422      	add	r2, r4
   11efe:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   11f00:	88c2      	ldrh	r2, [r0, #6]
   11f02:	88cc      	ldrh	r4, [r1, #6]
   11f04:	1b12      	subs	r2, r2, r4
   11f06:	8844      	ldrh	r4, [r0, #2]
   11f08:	1b12      	subs	r2, r2, r4
   11f0a:	8849      	ldrh	r1, [r1, #2]
   11f0c:	440a      	add	r2, r1
   11f0e:	805a      	strh	r2, [r3, #2]
            break;
   11f10:	e79a      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = 0;
   11f12:	2200      	movs	r2, #0
   11f14:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11f16:	88c2      	ldrh	r2, [r0, #6]
   11f18:	3201      	adds	r2, #1
   11f1a:	8844      	ldrh	r4, [r0, #2]
   11f1c:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   11f1e:	b212      	sxth	r2, r2
   11f20:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11f24:	88ca      	ldrh	r2, [r1, #6]
   11f26:	3201      	adds	r2, #1
   11f28:	8849      	ldrh	r1, [r1, #2]
   11f2a:	1a52      	subs	r2, r2, r1
   11f2c:	b212      	sxth	r2, r2
   11f2e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11f32:	1052      	asrs	r2, r2, #1
   11f34:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11f38:	805a      	strh	r2, [r3, #2]
            break;
   11f3a:	e785      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   11f3c:	8882      	ldrh	r2, [r0, #4]
   11f3e:	888c      	ldrh	r4, [r1, #4]
   11f40:	1b12      	subs	r2, r2, r4
   11f42:	8804      	ldrh	r4, [r0, #0]
   11f44:	1b12      	subs	r2, r2, r4
   11f46:	880c      	ldrh	r4, [r1, #0]
   11f48:	4422      	add	r2, r4
   11f4a:	801a      	strh	r2, [r3, #0]
   11f4c:	88c2      	ldrh	r2, [r0, #6]
   11f4e:	3201      	adds	r2, #1
   11f50:	8844      	ldrh	r4, [r0, #2]
   11f52:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   11f54:	b212      	sxth	r2, r2
   11f56:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11f5a:	88ca      	ldrh	r2, [r1, #6]
   11f5c:	3201      	adds	r2, #1
   11f5e:	8849      	ldrh	r1, [r1, #2]
   11f60:	1a52      	subs	r2, r2, r1
   11f62:	b212      	sxth	r2, r2
   11f64:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11f68:	1052      	asrs	r2, r2, #1
   11f6a:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11f6e:	805a      	strh	r2, [r3, #2]
            break;
   11f70:	e76a      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = 0;
   11f72:	2200      	movs	r2, #0
   11f74:	801a      	strh	r2, [r3, #0]
   11f76:	88ca      	ldrh	r2, [r1, #6]
   11f78:	8849      	ldrh	r1, [r1, #2]
   11f7a:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   11f7c:	43d2      	mvns	r2, r2
   11f7e:	805a      	strh	r2, [r3, #2]
            break;
   11f80:	e762      	b.n	11e48 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11f82:	8882      	ldrh	r2, [r0, #4]
   11f84:	3201      	adds	r2, #1
   11f86:	8804      	ldrh	r4, [r0, #0]
   11f88:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11f8a:	b212      	sxth	r2, r2
   11f8c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11f90:	888a      	ldrh	r2, [r1, #4]
   11f92:	3201      	adds	r2, #1
   11f94:	880d      	ldrh	r5, [r1, #0]
   11f96:	1b52      	subs	r2, r2, r5
   11f98:	b212      	sxth	r2, r2
   11f9a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11f9e:	1052      	asrs	r2, r2, #1
   11fa0:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   11fa4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   11fa6:	88ca      	ldrh	r2, [r1, #6]
   11fa8:	8849      	ldrh	r1, [r1, #2]
   11faa:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   11fac:	43d2      	mvns	r2, r2
   11fae:	805a      	strh	r2, [r3, #2]
            break;
   11fb0:	e74a      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   11fb2:	8882      	ldrh	r2, [r0, #4]
   11fb4:	888c      	ldrh	r4, [r1, #4]
   11fb6:	1b12      	subs	r2, r2, r4
   11fb8:	8804      	ldrh	r4, [r0, #0]
   11fba:	1b12      	subs	r2, r2, r4
   11fbc:	880c      	ldrh	r4, [r1, #0]
   11fbe:	4422      	add	r2, r4
   11fc0:	801a      	strh	r2, [r3, #0]
   11fc2:	88ca      	ldrh	r2, [r1, #6]
   11fc4:	8849      	ldrh	r1, [r1, #2]
   11fc6:	1a52      	subs	r2, r2, r1
            res->y = -lv_area_get_height(to_align);
   11fc8:	43d2      	mvns	r2, r2
   11fca:	805a      	strh	r2, [r3, #2]
            break;
   11fcc:	e73c      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = 0;
   11fce:	2200      	movs	r2, #0
   11fd0:	801a      	strh	r2, [r3, #0]
   11fd2:	88c2      	ldrh	r2, [r0, #6]
   11fd4:	3201      	adds	r2, #1
   11fd6:	8841      	ldrh	r1, [r0, #2]
   11fd8:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   11fda:	805a      	strh	r2, [r3, #2]
            break;
   11fdc:	e734      	b.n	11e48 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   11fde:	8882      	ldrh	r2, [r0, #4]
   11fe0:	3201      	adds	r2, #1
   11fe2:	8804      	ldrh	r4, [r0, #0]
   11fe4:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   11fe6:	b212      	sxth	r2, r2
   11fe8:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   11fec:	888a      	ldrh	r2, [r1, #4]
   11fee:	3201      	adds	r2, #1
   11ff0:	8809      	ldrh	r1, [r1, #0]
   11ff2:	1a52      	subs	r2, r2, r1
   11ff4:	b212      	sxth	r2, r2
   11ff6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11ffa:	1052      	asrs	r2, r2, #1
   11ffc:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   12000:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   12002:	88c2      	ldrh	r2, [r0, #6]
   12004:	3201      	adds	r2, #1
   12006:	8841      	ldrh	r1, [r0, #2]
   12008:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   1200a:	805a      	strh	r2, [r3, #2]
            break;
   1200c:	e71c      	b.n	11e48 <_lv_area_align+0x7c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   1200e:	8882      	ldrh	r2, [r0, #4]
   12010:	888c      	ldrh	r4, [r1, #4]
   12012:	1b12      	subs	r2, r2, r4
   12014:	8804      	ldrh	r4, [r0, #0]
   12016:	1b12      	subs	r2, r2, r4
   12018:	8809      	ldrh	r1, [r1, #0]
   1201a:	440a      	add	r2, r1
   1201c:	801a      	strh	r2, [r3, #0]
   1201e:	88c2      	ldrh	r2, [r0, #6]
   12020:	3201      	adds	r2, #1
   12022:	8841      	ldrh	r1, [r0, #2]
   12024:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base);
   12026:	805a      	strh	r2, [r3, #2]
            break;
   12028:	e70e      	b.n	11e48 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1202a:	888a      	ldrh	r2, [r1, #4]
   1202c:	8809      	ldrh	r1, [r1, #0]
   1202e:	1a52      	subs	r2, r2, r1
            res->x = -lv_area_get_width(to_align);
   12030:	43d2      	mvns	r2, r2
   12032:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   12034:	2200      	movs	r2, #0
   12036:	805a      	strh	r2, [r3, #2]
            break;
   12038:	e706      	b.n	11e48 <_lv_area_align+0x7c>
   1203a:	888a      	ldrh	r2, [r1, #4]
   1203c:	880c      	ldrh	r4, [r1, #0]
   1203e:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   12040:	43d2      	mvns	r2, r2
   12042:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   12044:	88c2      	ldrh	r2, [r0, #6]
   12046:	3201      	adds	r2, #1
   12048:	8844      	ldrh	r4, [r0, #2]
   1204a:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   1204c:	b212      	sxth	r2, r2
   1204e:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   12052:	88ca      	ldrh	r2, [r1, #6]
   12054:	3201      	adds	r2, #1
   12056:	8849      	ldrh	r1, [r1, #2]
   12058:	1a52      	subs	r2, r2, r1
   1205a:	b212      	sxth	r2, r2
   1205c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   12060:	1052      	asrs	r2, r2, #1
   12062:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   12066:	805a      	strh	r2, [r3, #2]
            break;
   12068:	e6ee      	b.n	11e48 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1206a:	888a      	ldrh	r2, [r1, #4]
   1206c:	880c      	ldrh	r4, [r1, #0]
   1206e:	1b12      	subs	r2, r2, r4
            res->x = -lv_area_get_width(to_align);
   12070:	43d2      	mvns	r2, r2
   12072:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   12074:	88c2      	ldrh	r2, [r0, #6]
   12076:	88cc      	ldrh	r4, [r1, #6]
   12078:	1b12      	subs	r2, r2, r4
   1207a:	8844      	ldrh	r4, [r0, #2]
   1207c:	1b12      	subs	r2, r2, r4
   1207e:	8849      	ldrh	r1, [r1, #2]
   12080:	440a      	add	r2, r1
   12082:	805a      	strh	r2, [r3, #2]
            break;
   12084:	e6e0      	b.n	11e48 <_lv_area_align+0x7c>
   12086:	8882      	ldrh	r2, [r0, #4]
   12088:	3201      	adds	r2, #1
   1208a:	8801      	ldrh	r1, [r0, #0]
   1208c:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base);
   1208e:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   12090:	2200      	movs	r2, #0
   12092:	805a      	strh	r2, [r3, #2]
            break;
   12094:	e6d8      	b.n	11e48 <_lv_area_align+0x7c>
   12096:	8882      	ldrh	r2, [r0, #4]
   12098:	3201      	adds	r2, #1
   1209a:	8804      	ldrh	r4, [r0, #0]
   1209c:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   1209e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   120a0:	88c2      	ldrh	r2, [r0, #6]
   120a2:	3201      	adds	r2, #1
   120a4:	8844      	ldrh	r4, [r0, #2]
   120a6:	1b12      	subs	r2, r2, r4
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   120a8:	b212      	sxth	r2, r2
   120aa:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   120ae:	88ca      	ldrh	r2, [r1, #6]
   120b0:	3201      	adds	r2, #1
   120b2:	8849      	ldrh	r1, [r1, #2]
   120b4:	1a52      	subs	r2, r2, r1
   120b6:	b212      	sxth	r2, r2
   120b8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   120bc:	1052      	asrs	r2, r2, #1
   120be:	ebc2 0264 	rsb	r2, r2, r4, asr #1
   120c2:	805a      	strh	r2, [r3, #2]
            break;
   120c4:	e6c0      	b.n	11e48 <_lv_area_align+0x7c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   120c6:	8882      	ldrh	r2, [r0, #4]
   120c8:	3201      	adds	r2, #1
   120ca:	8804      	ldrh	r4, [r0, #0]
   120cc:	1b12      	subs	r2, r2, r4
            res->x = lv_area_get_width(base);
   120ce:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   120d0:	88c2      	ldrh	r2, [r0, #6]
   120d2:	88cc      	ldrh	r4, [r1, #6]
   120d4:	1b12      	subs	r2, r2, r4
   120d6:	8844      	ldrh	r4, [r0, #2]
   120d8:	1b12      	subs	r2, r2, r4
   120da:	8849      	ldrh	r1, [r1, #2]
   120dc:	440a      	add	r2, r1
   120de:	805a      	strh	r2, [r3, #2]
            break;
   120e0:	e6b2      	b.n	11e48 <_lv_area_align+0x7c>

000120e2 <lv_color_fill>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
   120e2:	b430      	push	{r4, r5}
   120e4:	b28d      	uxth	r5, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   120e6:	f010 0f03 	tst.w	r0, #3
        *buf = color;
   120ea:	bf1c      	itt	ne
   120ec:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
   120f0:	f102 32ff 	addne.w	r2, r2, #4294967295
    }

    uint32_t c32 = color.full + (color.full << 16);
   120f4:	eb05 4105 	add.w	r1, r5, r5, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   120f8:	2a10      	cmp	r2, #16
   120fa:	d921      	bls.n	12140 <lv_color_fill+0x5e>
   120fc:	f100 0320 	add.w	r3, r0, #32
   12100:	4614      	mov	r4, r2
        *buf32 = c32;
   12102:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
   12106:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
   1210a:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
   1210e:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
   12112:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
   12116:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
   1211a:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
   1211e:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
   12122:	3c10      	subs	r4, #16
   12124:	3320      	adds	r3, #32
    while(px_num > 16) {
   12126:	2c10      	cmp	r4, #16
   12128:	d8eb      	bhi.n	12102 <lv_color_fill+0x20>
   1212a:	f1a2 0311 	sub.w	r3, r2, #17
   1212e:	091b      	lsrs	r3, r3, #4
   12130:	1c59      	adds	r1, r3, #1
   12132:	3a10      	subs	r2, #16
   12134:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
   12138:	eb02 1203 	add.w	r2, r2, r3, lsl #4
        buf32++;
   1213c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   12140:	b11a      	cbz	r2, 1214a <lv_color_fill+0x68>
        *buf = color;
   12142:	f820 5b02 	strh.w	r5, [r0], #2
    while(px_num) {
   12146:	3a01      	subs	r2, #1
   12148:	d1fb      	bne.n	12142 <lv_color_fill+0x60>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   1214a:	bc30      	pop	{r4, r5}
   1214c:	4770      	bx	lr

0001214e <lv_color_lighten>:


lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
   1214e:	b430      	push	{r4, r5}
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   12150:	ebc1 1541 	rsb	r5, r1, r1, lsl #5
   12154:	f1c1 04ff 	rsb	r4, r1, #255	; 0xff
   12158:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   1215c:	fb04 5303 	mla	r3, r4, r3, r5
   12160:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   12164:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   12168:	f3c3 52c4 	ubfx	r2, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   1216c:	f3c0 1345 	ubfx	r3, r0, #5, #6
   12170:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
   12174:	fb04 1103 	mla	r1, r4, r3, r1
   12178:	eb01 2301 	add.w	r3, r1, r1, lsl #8
   1217c:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
   12180:	f3c1 51c5 	ubfx	r1, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   12184:	f000 001f 	and.w	r0, r0, #31
   12188:	fb04 5000 	mla	r0, r4, r0, r5
   1218c:	eb00 2300 	add.w	r3, r0, r0, lsl #8
   12190:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
   12194:	0dc3      	lsrs	r3, r0, #23
   12196:	f04f 0000 	mov.w	r0, #0
   1219a:	f363 0004 	bfi	r0, r3, #0, #5
   1219e:	f361 104a 	bfi	r0, r1, #5, #6
   121a2:	f362 20cf 	bfi	r0, r2, #11, #5
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
}
   121a6:	bc30      	pop	{r4, r5}
   121a8:	4770      	bx	lr

000121aa <lv_color_darken>:


lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
   121aa:	b410      	push	{r4}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   121ac:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
   121b0:	f3c0 23c4 	ubfx	r3, r0, #11, #5
   121b4:	fb01 f303 	mul.w	r3, r1, r3
   121b8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   121bc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   121c0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   121c4:	f3c0 1245 	ubfx	r2, r0, #5, #6
   121c8:	fb01 f202 	mul.w	r2, r1, r2
   121cc:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   121d0:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   121d4:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   121d8:	f000 001f 	and.w	r0, r0, #31
   121dc:	fb01 f100 	mul.w	r1, r1, r0
   121e0:	eb01 2001 	add.w	r0, r1, r1, lsl #8
   121e4:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   121e8:	0dc9      	lsrs	r1, r1, #23
   121ea:	f04f 0000 	mov.w	r0, #0
   121ee:	f361 0004 	bfi	r0, r1, #0, #5
   121f2:	f362 104a 	bfi	r0, r2, #5, #6
   121f6:	f363 20cf 	bfi	r0, r3, #11, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
   121fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   121fe:	4770      	bx	lr

00012200 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
   12200:	1c42      	adds	r2, r0, #1

    while(*path != '\0') {
   12202:	7843      	ldrb	r3, [r0, #1]
   12204:	b91b      	cbnz	r3, 1220e <lv_fs_get_real_path+0xe>
   12206:	e008      	b.n	1221a <lv_fs_get_real_path+0x1a>
   12208:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1220c:	b12b      	cbz	r3, 1221a <lv_fs_get_real_path+0x1a>
        if(*path == ':' || *path == '\\' || *path == '/') {
   1220e:	2b3a      	cmp	r3, #58	; 0x3a
   12210:	d0fa      	beq.n	12208 <lv_fs_get_real_path+0x8>
   12212:	2b5c      	cmp	r3, #92	; 0x5c
   12214:	d0f8      	beq.n	12208 <lv_fs_get_real_path+0x8>
   12216:	2b2f      	cmp	r3, #47	; 0x2f
   12218:	d0f6      	beq.n	12208 <lv_fs_get_real_path+0x8>
            break;
        }
    }

    return path;
}
   1221a:	4610      	mov	r0, r2
   1221c:	4770      	bx	lr
	...

00012220 <_lv_fs_init>:
{
   12220:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
   12222:	2144      	movs	r1, #68	; 0x44
   12224:	4801      	ldr	r0, [pc, #4]	; (1222c <_lv_fs_init+0xc>)
   12226:	4b02      	ldr	r3, [pc, #8]	; (12230 <_lv_fs_init+0x10>)
   12228:	4798      	blx	r3
   1222a:	bd08      	pop	{r3, pc}
   1222c:	20006d4c 	.word	0x20006d4c
   12230:	000124a1 	.word	0x000124a1

00012234 <lv_fs_close>:
{
   12234:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   12236:	6843      	ldr	r3, [r0, #4]
   12238:	b173      	cbz	r3, 12258 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
   1223a:	691a      	ldr	r2, [r3, #16]
   1223c:	b172      	cbz	r2, 1225c <lv_fs_close+0x28>
   1223e:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
   12240:	6801      	ldr	r1, [r0, #0]
   12242:	4618      	mov	r0, r3
   12244:	4790      	blx	r2
   12246:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
   12248:	6820      	ldr	r0, [r4, #0]
   1224a:	4b05      	ldr	r3, [pc, #20]	; (12260 <lv_fs_close+0x2c>)
   1224c:	4798      	blx	r3
    file_p->file_d = NULL;
   1224e:	2300      	movs	r3, #0
   12250:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
   12252:	6063      	str	r3, [r4, #4]
}
   12254:	4628      	mov	r0, r5
   12256:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   12258:	250b      	movs	r5, #11
   1225a:	e7fb      	b.n	12254 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
   1225c:	2509      	movs	r5, #9
   1225e:	e7f9      	b.n	12254 <lv_fs_close+0x20>
   12260:	00012a6d 	.word	0x00012a6d

00012264 <lv_fs_read>:
{
   12264:	b5f0      	push	{r4, r5, r6, r7, lr}
   12266:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
   12268:	461e      	mov	r6, r3
   1226a:	b10b      	cbz	r3, 12270 <lv_fs_read+0xc>
   1226c:	2300      	movs	r3, #0
   1226e:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   12270:	6845      	ldr	r5, [r0, #4]
   12272:	b18d      	cbz	r5, 12298 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   12274:	69af      	ldr	r7, [r5, #24]
   12276:	b18f      	cbz	r7, 1229c <lv_fs_read+0x38>
   12278:	4613      	mov	r3, r2
   1227a:	460a      	mov	r2, r1
   1227c:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
   1227e:	a804      	add	r0, sp, #16
   12280:	2100      	movs	r1, #0
   12282:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
   12286:	6821      	ldr	r1, [r4, #0]
   12288:	9000      	str	r0, [sp, #0]
   1228a:	4628      	mov	r0, r5
   1228c:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
   1228e:	b10e      	cbz	r6, 12294 <lv_fs_read+0x30>
   12290:	9b03      	ldr	r3, [sp, #12]
   12292:	6033      	str	r3, [r6, #0]
}
   12294:	b005      	add	sp, #20
   12296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
   12298:	200b      	movs	r0, #11
   1229a:	e7fb      	b.n	12294 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
   1229c:	2009      	movs	r0, #9
   1229e:	e7f9      	b.n	12294 <lv_fs_read+0x30>

000122a0 <lv_fs_seek>:
{
   122a0:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
   122a2:	6844      	ldr	r4, [r0, #4]
   122a4:	b134      	cbz	r4, 122b4 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
   122a6:	6a25      	ldr	r5, [r4, #32]
   122a8:	b135      	cbz	r5, 122b8 <lv_fs_seek+0x18>
   122aa:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
   122ac:	6801      	ldr	r1, [r0, #0]
   122ae:	4620      	mov	r0, r4
   122b0:	47a8      	blx	r5
    return res;
   122b2:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
   122b4:	200b      	movs	r0, #11
   122b6:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
   122b8:	2009      	movs	r0, #9
}
   122ba:	bd38      	pop	{r3, r4, r5, pc}

000122bc <lv_fs_get_drv>:
{
   122bc:	b570      	push	{r4, r5, r6, lr}
   122be:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   122c0:	4809      	ldr	r0, [pc, #36]	; (122e8 <lv_fs_get_drv+0x2c>)
   122c2:	4b0a      	ldr	r3, [pc, #40]	; (122ec <lv_fs_get_drv+0x30>)
   122c4:	4798      	blx	r3
   122c6:	4601      	mov	r1, r0
   122c8:	b158      	cbz	r0, 122e2 <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   122ca:	7803      	ldrb	r3, [r0, #0]
   122cc:	42a3      	cmp	r3, r4
   122ce:	d008      	beq.n	122e2 <lv_fs_get_drv+0x26>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
   122d0:	4e05      	ldr	r6, [pc, #20]	; (122e8 <lv_fs_get_drv+0x2c>)
   122d2:	4d07      	ldr	r5, [pc, #28]	; (122f0 <lv_fs_get_drv+0x34>)
   122d4:	4630      	mov	r0, r6
   122d6:	47a8      	blx	r5
   122d8:	4601      	mov	r1, r0
   122da:	b110      	cbz	r0, 122e2 <lv_fs_get_drv+0x26>
        if(drv->letter == letter) {
   122dc:	780b      	ldrb	r3, [r1, #0]
   122de:	42a3      	cmp	r3, r4
   122e0:	d1f8      	bne.n	122d4 <lv_fs_get_drv+0x18>
}
   122e2:	4608      	mov	r0, r1
   122e4:	bd70      	pop	{r4, r5, r6, pc}
   122e6:	bf00      	nop
   122e8:	20006d4c 	.word	0x20006d4c
   122ec:	00012551 	.word	0x00012551
   122f0:	00012565 	.word	0x00012565

000122f4 <lv_fs_open>:
{
   122f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122f8:	b083      	sub	sp, #12
    file_p->drv    = NULL;
   122fa:	2300      	movs	r3, #0
   122fc:	6043      	str	r3, [r0, #4]
    file_p->file_d = NULL;
   122fe:	6003      	str	r3, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   12300:	2900      	cmp	r1, #0
   12302:	d045      	beq.n	12390 <lv_fs_open+0x9c>
   12304:	460d      	mov	r5, r1
   12306:	4691      	mov	r9, r2
   12308:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
   1230a:	7808      	ldrb	r0, [r1, #0]
   1230c:	4b24      	ldr	r3, [pc, #144]	; (123a0 <lv_fs_open+0xac>)
   1230e:	4798      	blx	r3
   12310:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
   12312:	b140      	cbz	r0, 12326 <lv_fs_open+0x32>
    if(file_p->drv->ready_cb != NULL) {
   12314:	6883      	ldr	r3, [r0, #8]
   12316:	b153      	cbz	r3, 1232e <lv_fs_open+0x3a>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
   12318:	4798      	blx	r3
   1231a:	b940      	cbnz	r0, 1232e <lv_fs_open+0x3a>
            file_p->drv    = NULL;
   1231c:	2300      	movs	r3, #0
   1231e:	6063      	str	r3, [r4, #4]
            file_p->file_d = NULL;
   12320:	6023      	str	r3, [r4, #0]
            return LV_FS_RES_HW_ERR;
   12322:	2501      	movs	r5, #1
   12324:	e035      	b.n	12392 <lv_fs_open+0x9e>
        file_p->file_d = NULL;
   12326:	2300      	movs	r3, #0
   12328:	6023      	str	r3, [r4, #0]
        return LV_FS_RES_NOT_EX;
   1232a:	2503      	movs	r5, #3
   1232c:	e031      	b.n	12392 <lv_fs_open+0x9e>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
   1232e:	6863      	ldr	r3, [r4, #4]
   12330:	8858      	ldrh	r0, [r3, #2]
   12332:	4b1c      	ldr	r3, [pc, #112]	; (123a4 <lv_fs_open+0xb0>)
   12334:	4798      	blx	r3
   12336:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
   12338:	4b1b      	ldr	r3, [pc, #108]	; (123a8 <lv_fs_open+0xb4>)
   1233a:	4798      	blx	r3
   1233c:	b128      	cbz	r0, 1234a <lv_fs_open+0x56>
    if(file_p->file_d == NULL) {
   1233e:	6826      	ldr	r6, [r4, #0]
   12340:	b986      	cbnz	r6, 12364 <lv_fs_open+0x70>
        file_p->drv = NULL;
   12342:	2300      	movs	r3, #0
   12344:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
   12346:	250a      	movs	r5, #10
   12348:	e023      	b.n	12392 <lv_fs_open+0x9e>
    LV_ASSERT_MEM(file_p->file_d);
   1234a:	4b18      	ldr	r3, [pc, #96]	; (123ac <lv_fs_open+0xb8>)
   1234c:	9300      	str	r3, [sp, #0]
   1234e:	226f      	movs	r2, #111	; 0x6f
   12350:	4917      	ldr	r1, [pc, #92]	; (123b0 <lv_fs_open+0xbc>)
   12352:	2003      	movs	r0, #3
   12354:	4d17      	ldr	r5, [pc, #92]	; (123b4 <lv_fs_open+0xc0>)
   12356:	47a8      	blx	r5
   12358:	6822      	ldr	r2, [r4, #0]
   1235a:	2300      	movs	r3, #0
   1235c:	4816      	ldr	r0, [pc, #88]	; (123b8 <lv_fs_open+0xc4>)
   1235e:	4917      	ldr	r1, [pc, #92]	; (123bc <lv_fs_open+0xc8>)
   12360:	4788      	blx	r1
   12362:	e7fe      	b.n	12362 <lv_fs_open+0x6e>
    if(file_p->drv->open_cb == NULL) {
   12364:	f8d4 8004 	ldr.w	r8, [r4, #4]
   12368:	f8d8 700c 	ldr.w	r7, [r8, #12]
   1236c:	b1af      	cbz	r7, 1239a <lv_fs_open+0xa6>
    const char * real_path = lv_fs_get_real_path(path);
   1236e:	4628      	mov	r0, r5
   12370:	4b13      	ldr	r3, [pc, #76]	; (123c0 <lv_fs_open+0xcc>)
   12372:	4798      	blx	r3
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
   12374:	464b      	mov	r3, r9
   12376:	4602      	mov	r2, r0
   12378:	4631      	mov	r1, r6
   1237a:	4640      	mov	r0, r8
   1237c:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
   1237e:	4605      	mov	r5, r0
   12380:	b138      	cbz	r0, 12392 <lv_fs_open+0x9e>
        lv_mem_free(file_p->file_d);
   12382:	6820      	ldr	r0, [r4, #0]
   12384:	4b0f      	ldr	r3, [pc, #60]	; (123c4 <lv_fs_open+0xd0>)
   12386:	4798      	blx	r3
        file_p->file_d = NULL;
   12388:	2300      	movs	r3, #0
   1238a:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
   1238c:	6063      	str	r3, [r4, #4]
   1238e:	e000      	b.n	12392 <lv_fs_open+0x9e>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
   12390:	250b      	movs	r5, #11
}
   12392:	4628      	mov	r0, r5
   12394:	b003      	add	sp, #12
   12396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LV_FS_RES_NOT_IMP;
   1239a:	2509      	movs	r5, #9
   1239c:	e7f9      	b.n	12392 <lv_fs_open+0x9e>
   1239e:	bf00      	nop
   123a0:	000122bd 	.word	0x000122bd
   123a4:	00012985 	.word	0x00012985
   123a8:	0000298d 	.word	0x0000298d
   123ac:	0002073c 	.word	0x0002073c
   123b0:	00020758 	.word	0x00020758
   123b4:	00012805 	.word	0x00012805
   123b8:	0001b4bc 	.word	0x0001b4bc
   123bc:	00002995 	.word	0x00002995
   123c0:	00012201 	.word	0x00012201
   123c4:	00012a6d 	.word	0x00012a6d

000123c8 <lv_fs_get_ext>:
{
   123c8:	b510      	push	{r4, lr}
   123ca:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
   123cc:	4b12      	ldr	r3, [pc, #72]	; (12418 <lv_fs_get_ext+0x50>)
   123ce:	4798      	blx	r3
   123d0:	b1c8      	cbz	r0, 12406 <lv_fs_get_ext+0x3e>
   123d2:	4602      	mov	r2, r0
        if(fn[i] == '.') {
   123d4:	1821      	adds	r1, r4, r0
   123d6:	5c23      	ldrb	r3, [r4, r0]
   123d8:	2b2e      	cmp	r3, #46	; 0x2e
   123da:	d00f      	beq.n	123fc <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   123dc:	2b2f      	cmp	r3, #47	; 0x2f
   123de:	d014      	beq.n	1240a <lv_fs_get_ext+0x42>
   123e0:	2b5c      	cmp	r3, #92	; 0x5c
   123e2:	d014      	beq.n	1240e <lv_fs_get_ext+0x46>
    for(i = strlen(fn); i > 0; i--) {
   123e4:	3a01      	subs	r2, #1
   123e6:	d00c      	beq.n	12402 <lv_fs_get_ext+0x3a>
        if(fn[i] == '.') {
   123e8:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   123ec:	2b2e      	cmp	r3, #46	; 0x2e
   123ee:	d005      	beq.n	123fc <lv_fs_get_ext+0x34>
        else if(fn[i] == '/' || fn[i] == '\\') {
   123f0:	2b2f      	cmp	r3, #47	; 0x2f
   123f2:	d00e      	beq.n	12412 <lv_fs_get_ext+0x4a>
   123f4:	2b5c      	cmp	r3, #92	; 0x5c
   123f6:	d1f5      	bne.n	123e4 <lv_fs_get_ext+0x1c>
            return ""; /*No extension if a '\' or '/' found*/
   123f8:	4808      	ldr	r0, [pc, #32]	; (1241c <lv_fs_get_ext+0x54>)
}
   123fa:	bd10      	pop	{r4, pc}
            return &fn[i + 1];
   123fc:	3201      	adds	r2, #1
   123fe:	18a0      	adds	r0, r4, r2
   12400:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
   12402:	4806      	ldr	r0, [pc, #24]	; (1241c <lv_fs_get_ext+0x54>)
   12404:	bd10      	pop	{r4, pc}
   12406:	4805      	ldr	r0, [pc, #20]	; (1241c <lv_fs_get_ext+0x54>)
   12408:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
   1240a:	4804      	ldr	r0, [pc, #16]	; (1241c <lv_fs_get_ext+0x54>)
   1240c:	bd10      	pop	{r4, pc}
   1240e:	4803      	ldr	r0, [pc, #12]	; (1241c <lv_fs_get_ext+0x54>)
   12410:	bd10      	pop	{r4, pc}
   12412:	4802      	ldr	r0, [pc, #8]	; (1241c <lv_fs_get_ext+0x54>)
   12414:	bd10      	pop	{r4, pc}
   12416:	bf00      	nop
   12418:	0001af4f 	.word	0x0001af4f
   1241c:	0001c3e8 	.word	0x0001c3e8

00012420 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
   12420:	b510      	push	{r4, lr}
   12422:	b082      	sub	sp, #8
   12424:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   12426:	b181      	cbz	r1, 1244a <node_set_next+0x2a>
   12428:	460c      	mov	r4, r1

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
    if(next)
   1242a:	b182      	cbz	r2, 1244e <node_set_next+0x2e>
        _lv_memcpy_small(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
   1242c:	6803      	ldr	r3, [r0, #0]
   1242e:	3304      	adds	r3, #4
   12430:	18ca      	adds	r2, r1, r3
   12432:	f89d 1004 	ldrb.w	r1, [sp, #4]
   12436:	54e1      	strb	r1, [r4, r3]
   12438:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1243c:	7053      	strb	r3, [r2, #1]
   1243e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12442:	7093      	strb	r3, [r2, #2]
   12444:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12448:	70d3      	strb	r3, [r2, #3]
    else
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
}
   1244a:	b002      	add	sp, #8
   1244c:	bd10      	pop	{r4, pc}
        _lv_memset_00(act + LL_NEXT_P_OFFSET(ll_p), node_p_size);
   1244e:	6800      	ldr	r0, [r0, #0]
   12450:	3004      	adds	r0, #4
   12452:	2104      	movs	r1, #4
   12454:	4420      	add	r0, r4
   12456:	4b01      	ldr	r3, [pc, #4]	; (1245c <node_set_next+0x3c>)
   12458:	4798      	blx	r3
   1245a:	e7f6      	b.n	1244a <node_set_next+0x2a>
   1245c:	000130df 	.word	0x000130df

00012460 <node_set_prev>:
{
   12460:	b500      	push	{lr}
   12462:	b083      	sub	sp, #12
   12464:	9201      	str	r2, [sp, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   12466:	b181      	cbz	r1, 1248a <node_set_prev+0x2a>
   12468:	460a      	mov	r2, r1
    if(prev)
   1246a:	9b01      	ldr	r3, [sp, #4]
   1246c:	b183      	cbz	r3, 12490 <node_set_prev+0x30>
        _lv_memcpy_small(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
   1246e:	6801      	ldr	r1, [r0, #0]
   12470:	1853      	adds	r3, r2, r1
   12472:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12476:	5450      	strb	r0, [r2, r1]
   12478:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1247c:	705a      	strb	r2, [r3, #1]
   1247e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   12482:	709a      	strb	r2, [r3, #2]
   12484:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12488:	70da      	strb	r2, [r3, #3]
}
   1248a:	b003      	add	sp, #12
   1248c:	f85d fb04 	ldr.w	pc, [sp], #4
        _lv_memset_00(act + LL_PREV_P_OFFSET(ll_p), node_p_size);
   12490:	6800      	ldr	r0, [r0, #0]
   12492:	2104      	movs	r1, #4
   12494:	4410      	add	r0, r2
   12496:	4b01      	ldr	r3, [pc, #4]	; (1249c <node_set_prev+0x3c>)
   12498:	4798      	blx	r3
   1249a:	e7f6      	b.n	1248a <node_set_prev+0x2a>
   1249c:	000130df 	.word	0x000130df

000124a0 <_lv_ll_init>:
    ll_p->head = NULL;
   124a0:	2300      	movs	r3, #0
   124a2:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
   124a4:	6083      	str	r3, [r0, #8]
    if(node_size & 0x3) {
   124a6:	f011 0f03 	tst.w	r1, #3
        node_size = node_size & (~0x3);
   124aa:	bf1c      	itt	ne
   124ac:	f021 0103 	bicne.w	r1, r1, #3
        node_size += 4;
   124b0:	3104      	addne	r1, #4
    ll_p->n_size = node_size;
   124b2:	6001      	str	r1, [r0, #0]
   124b4:	4770      	bx	lr
	...

000124b8 <_lv_ll_ins_head>:
{
   124b8:	b538      	push	{r3, r4, r5, lr}
   124ba:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   124bc:	6800      	ldr	r0, [r0, #0]
   124be:	3008      	adds	r0, #8
   124c0:	4b0d      	ldr	r3, [pc, #52]	; (124f8 <_lv_ll_ins_head+0x40>)
   124c2:	4798      	blx	r3
    if(n_new != NULL) {
   124c4:	4605      	mov	r5, r0
   124c6:	b190      	cbz	r0, 124ee <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   124c8:	2200      	movs	r2, #0
   124ca:	4601      	mov	r1, r0
   124cc:	4620      	mov	r0, r4
   124ce:	4b0b      	ldr	r3, [pc, #44]	; (124fc <_lv_ll_ins_head+0x44>)
   124d0:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   124d2:	6862      	ldr	r2, [r4, #4]
   124d4:	4629      	mov	r1, r5
   124d6:	4620      	mov	r0, r4
   124d8:	4b09      	ldr	r3, [pc, #36]	; (12500 <_lv_ll_ins_head+0x48>)
   124da:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   124dc:	6861      	ldr	r1, [r4, #4]
   124de:	b119      	cbz	r1, 124e8 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
   124e0:	462a      	mov	r2, r5
   124e2:	4620      	mov	r0, r4
   124e4:	4b05      	ldr	r3, [pc, #20]	; (124fc <_lv_ll_ins_head+0x44>)
   124e6:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   124e8:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   124ea:	68a3      	ldr	r3, [r4, #8]
   124ec:	b10b      	cbz	r3, 124f2 <_lv_ll_ins_head+0x3a>
}
   124ee:	4628      	mov	r0, r5
   124f0:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
   124f2:	60a5      	str	r5, [r4, #8]
   124f4:	e7fb      	b.n	124ee <_lv_ll_ins_head+0x36>
   124f6:	bf00      	nop
   124f8:	00012985 	.word	0x00012985
   124fc:	00012461 	.word	0x00012461
   12500:	00012421 	.word	0x00012421

00012504 <_lv_ll_ins_tail>:
{
   12504:	b538      	push	{r3, r4, r5, lr}
   12506:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   12508:	6800      	ldr	r0, [r0, #0]
   1250a:	3008      	adds	r0, #8
   1250c:	4b0d      	ldr	r3, [pc, #52]	; (12544 <_lv_ll_ins_tail+0x40>)
   1250e:	4798      	blx	r3
    if(n_new != NULL) {
   12510:	4605      	mov	r5, r0
   12512:	b190      	cbz	r0, 1253a <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   12514:	2200      	movs	r2, #0
   12516:	4601      	mov	r1, r0
   12518:	4620      	mov	r0, r4
   1251a:	4b0b      	ldr	r3, [pc, #44]	; (12548 <_lv_ll_ins_tail+0x44>)
   1251c:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
   1251e:	68a2      	ldr	r2, [r4, #8]
   12520:	4629      	mov	r1, r5
   12522:	4620      	mov	r0, r4
   12524:	4b09      	ldr	r3, [pc, #36]	; (1254c <_lv_ll_ins_tail+0x48>)
   12526:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   12528:	68a1      	ldr	r1, [r4, #8]
   1252a:	b119      	cbz	r1, 12534 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
   1252c:	462a      	mov	r2, r5
   1252e:	4620      	mov	r0, r4
   12530:	4b05      	ldr	r3, [pc, #20]	; (12548 <_lv_ll_ins_tail+0x44>)
   12532:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   12534:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   12536:	6863      	ldr	r3, [r4, #4]
   12538:	b10b      	cbz	r3, 1253e <_lv_ll_ins_tail+0x3a>
}
   1253a:	4628      	mov	r0, r5
   1253c:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
   1253e:	6065      	str	r5, [r4, #4]
   12540:	e7fb      	b.n	1253a <_lv_ll_ins_tail+0x36>
   12542:	bf00      	nop
   12544:	00012985 	.word	0x00012985
   12548:	00012421 	.word	0x00012421
   1254c:	00012461 	.word	0x00012461

00012550 <_lv_ll_get_head>:
    if(ll_p != NULL) {
   12550:	b108      	cbz	r0, 12556 <_lv_ll_get_head+0x6>
        head = ll_p->head;
   12552:	6840      	ldr	r0, [r0, #4]
   12554:	4770      	bx	lr
    void * head = NULL;
   12556:	2000      	movs	r0, #0
}
   12558:	4770      	bx	lr

0001255a <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   1255a:	b108      	cbz	r0, 12560 <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
   1255c:	6880      	ldr	r0, [r0, #8]
   1255e:	4770      	bx	lr
    void * tail = NULL;
   12560:	2000      	movs	r0, #0
}
   12562:	4770      	bx	lr

00012564 <_lv_ll_get_next>:
{
   12564:	b082      	sub	sp, #8
    void * next = NULL;
   12566:	2300      	movs	r3, #0
   12568:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   1256a:	b170      	cbz	r0, 1258a <_lv_ll_get_next+0x26>
        _lv_memcpy_small(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
   1256c:	6803      	ldr	r3, [r0, #0]
   1256e:	3304      	adds	r3, #4
   12570:	18ca      	adds	r2, r1, r3
   12572:	5ccb      	ldrb	r3, [r1, r3]
   12574:	f88d 3004 	strb.w	r3, [sp, #4]
   12578:	7853      	ldrb	r3, [r2, #1]
   1257a:	f88d 3005 	strb.w	r3, [sp, #5]
   1257e:	7893      	ldrb	r3, [r2, #2]
   12580:	f88d 3006 	strb.w	r3, [sp, #6]
   12584:	78d3      	ldrb	r3, [r2, #3]
   12586:	f88d 3007 	strb.w	r3, [sp, #7]
}
   1258a:	9801      	ldr	r0, [sp, #4]
   1258c:	b002      	add	sp, #8
   1258e:	4770      	bx	lr

00012590 <_lv_ll_get_prev>:
{
   12590:	b082      	sub	sp, #8
    void * prev = NULL;
   12592:	2300      	movs	r3, #0
   12594:	9301      	str	r3, [sp, #4]
    if(ll_p != NULL) {
   12596:	b168      	cbz	r0, 125b4 <_lv_ll_get_prev+0x24>
        _lv_memcpy_small(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
   12598:	6802      	ldr	r2, [r0, #0]
   1259a:	188b      	adds	r3, r1, r2
   1259c:	5c8a      	ldrb	r2, [r1, r2]
   1259e:	f88d 2004 	strb.w	r2, [sp, #4]
   125a2:	785a      	ldrb	r2, [r3, #1]
   125a4:	f88d 2005 	strb.w	r2, [sp, #5]
   125a8:	789a      	ldrb	r2, [r3, #2]
   125aa:	f88d 2006 	strb.w	r2, [sp, #6]
   125ae:	78db      	ldrb	r3, [r3, #3]
   125b0:	f88d 3007 	strb.w	r3, [sp, #7]
}
   125b4:	9801      	ldr	r0, [sp, #4]
   125b6:	b002      	add	sp, #8
   125b8:	4770      	bx	lr
	...

000125bc <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
   125bc:	b360      	cbz	r0, 12618 <_lv_ll_ins_prev+0x5c>
{
   125be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125c2:	4604      	mov	r4, r0
    if(NULL == ll_p || NULL == n_act) return NULL;
   125c4:	b351      	cbz	r1, 1261c <_lv_ll_ins_prev+0x60>
   125c6:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
   125c8:	6843      	ldr	r3, [r0, #4]
   125ca:	4299      	cmp	r1, r3
   125cc:	d020      	beq.n	12610 <_lv_ll_ins_prev+0x54>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   125ce:	6800      	ldr	r0, [r0, #0]
   125d0:	3008      	adds	r0, #8
   125d2:	4b15      	ldr	r3, [pc, #84]	; (12628 <_lv_ll_ins_prev+0x6c>)
   125d4:	4798      	blx	r3
        if(n_new == NULL) return NULL;
   125d6:	4606      	mov	r6, r0
   125d8:	b318      	cbz	r0, 12622 <_lv_ll_ins_prev+0x66>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   125da:	4629      	mov	r1, r5
   125dc:	4620      	mov	r0, r4
   125de:	4b13      	ldr	r3, [pc, #76]	; (1262c <_lv_ll_ins_prev+0x70>)
   125e0:	4798      	blx	r3
   125e2:	4680      	mov	r8, r0
        node_set_next(ll_p, n_prev, n_new);
   125e4:	4632      	mov	r2, r6
   125e6:	4601      	mov	r1, r0
   125e8:	4620      	mov	r0, r4
   125ea:	4f11      	ldr	r7, [pc, #68]	; (12630 <_lv_ll_ins_prev+0x74>)
   125ec:	47b8      	blx	r7
        node_set_prev(ll_p, n_new, n_prev);
   125ee:	4642      	mov	r2, r8
   125f0:	4631      	mov	r1, r6
   125f2:	4620      	mov	r0, r4
   125f4:	f8df 8040 	ldr.w	r8, [pc, #64]	; 12638 <_lv_ll_ins_prev+0x7c>
   125f8:	47c0      	blx	r8
        node_set_prev(ll_p, n_act, n_new);
   125fa:	4632      	mov	r2, r6
   125fc:	4629      	mov	r1, r5
   125fe:	4620      	mov	r0, r4
   12600:	47c0      	blx	r8
        node_set_next(ll_p, n_new, n_act);
   12602:	462a      	mov	r2, r5
   12604:	4631      	mov	r1, r6
   12606:	4620      	mov	r0, r4
   12608:	47b8      	blx	r7
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   1260a:	4630      	mov	r0, r6
   1260c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
   12610:	4b08      	ldr	r3, [pc, #32]	; (12634 <_lv_ll_ins_prev+0x78>)
   12612:	4798      	blx	r3
   12614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
   12618:	2000      	movs	r0, #0
   1261a:	4770      	bx	lr
   1261c:	4608      	mov	r0, r1
   1261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
   12622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12626:	bf00      	nop
   12628:	00012985 	.word	0x00012985
   1262c:	00012591 	.word	0x00012591
   12630:	00012421 	.word	0x00012421
   12634:	000124b9 	.word	0x000124b9
   12638:	00012461 	.word	0x00012461

0001263c <_lv_ll_remove>:
{
   1263c:	b570      	push	{r4, r5, r6, lr}
   1263e:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   12640:	4604      	mov	r4, r0
   12642:	b350      	cbz	r0, 1269a <_lv_ll_remove+0x5e>
    if(_lv_ll_get_head(ll_p) == node_p) {
   12644:	6843      	ldr	r3, [r0, #4]
   12646:	4299      	cmp	r1, r3
   12648:	d029      	beq.n	1269e <_lv_ll_remove+0x62>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   1264a:	6883      	ldr	r3, [r0, #8]
   1264c:	4299      	cmp	r1, r3
   1264e:	d017      	beq.n	12680 <_lv_ll_remove+0x44>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   12650:	4629      	mov	r1, r5
   12652:	4620      	mov	r0, r4
   12654:	4b18      	ldr	r3, [pc, #96]	; (126b8 <_lv_ll_remove+0x7c>)
   12656:	4798      	blx	r3
   12658:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   1265a:	4629      	mov	r1, r5
   1265c:	4620      	mov	r0, r4
   1265e:	4b17      	ldr	r3, [pc, #92]	; (126bc <_lv_ll_remove+0x80>)
   12660:	4798      	blx	r3
   12662:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   12664:	4602      	mov	r2, r0
   12666:	4631      	mov	r1, r6
   12668:	4620      	mov	r0, r4
   1266a:	4b15      	ldr	r3, [pc, #84]	; (126c0 <_lv_ll_remove+0x84>)
   1266c:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
   1266e:	4632      	mov	r2, r6
   12670:	4629      	mov	r1, r5
   12672:	4620      	mov	r0, r4
   12674:	4b13      	ldr	r3, [pc, #76]	; (126c4 <_lv_ll_remove+0x88>)
   12676:	4798      	blx	r3
}
   12678:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
   1267a:	2300      	movs	r3, #0
   1267c:	60a3      	str	r3, [r4, #8]
   1267e:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   12680:	4b0d      	ldr	r3, [pc, #52]	; (126b8 <_lv_ll_remove+0x7c>)
   12682:	4798      	blx	r3
   12684:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   12686:	b128      	cbz	r0, 12694 <_lv_ll_remove+0x58>
            node_set_next(ll_p, ll_p->tail, NULL);
   12688:	2200      	movs	r2, #0
   1268a:	4601      	mov	r1, r0
   1268c:	4620      	mov	r0, r4
   1268e:	4b0c      	ldr	r3, [pc, #48]	; (126c0 <_lv_ll_remove+0x84>)
   12690:	4798      	blx	r3
   12692:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
   12694:	2300      	movs	r3, #0
   12696:	6063      	str	r3, [r4, #4]
   12698:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_ll_get_head(ll_p) == node_p) {
   1269a:	2900      	cmp	r1, #0
   1269c:	d1d8      	bne.n	12650 <_lv_ll_remove+0x14>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   1269e:	4629      	mov	r1, r5
   126a0:	4620      	mov	r0, r4
   126a2:	4b06      	ldr	r3, [pc, #24]	; (126bc <_lv_ll_remove+0x80>)
   126a4:	4798      	blx	r3
   126a6:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   126a8:	2800      	cmp	r0, #0
   126aa:	d0e6      	beq.n	1267a <_lv_ll_remove+0x3e>
            node_set_prev(ll_p, ll_p->head, NULL);
   126ac:	2200      	movs	r2, #0
   126ae:	4601      	mov	r1, r0
   126b0:	4620      	mov	r0, r4
   126b2:	4b04      	ldr	r3, [pc, #16]	; (126c4 <_lv_ll_remove+0x88>)
   126b4:	4798      	blx	r3
   126b6:	bd70      	pop	{r4, r5, r6, pc}
   126b8:	00012591 	.word	0x00012591
   126bc:	00012565 	.word	0x00012565
   126c0:	00012421 	.word	0x00012421
   126c4:	00012461 	.word	0x00012461

000126c8 <_lv_ll_chg_list>:
{
   126c8:	b570      	push	{r4, r5, r6, lr}
   126ca:	460c      	mov	r4, r1
   126cc:	4615      	mov	r5, r2
   126ce:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
   126d0:	4611      	mov	r1, r2
   126d2:	4b17      	ldr	r3, [pc, #92]	; (12730 <_lv_ll_chg_list+0x68>)
   126d4:	4798      	blx	r3
    if(head) {
   126d6:	b1ae      	cbz	r6, 12704 <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
   126d8:	2200      	movs	r2, #0
   126da:	4629      	mov	r1, r5
   126dc:	4620      	mov	r0, r4
   126de:	4b15      	ldr	r3, [pc, #84]	; (12734 <_lv_ll_chg_list+0x6c>)
   126e0:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
   126e2:	6862      	ldr	r2, [r4, #4]
   126e4:	4629      	mov	r1, r5
   126e6:	4620      	mov	r0, r4
   126e8:	4b13      	ldr	r3, [pc, #76]	; (12738 <_lv_ll_chg_list+0x70>)
   126ea:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
   126ec:	6861      	ldr	r1, [r4, #4]
   126ee:	b119      	cbz	r1, 126f8 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
   126f0:	462a      	mov	r2, r5
   126f2:	4620      	mov	r0, r4
   126f4:	4b0f      	ldr	r3, [pc, #60]	; (12734 <_lv_ll_chg_list+0x6c>)
   126f6:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
   126f8:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
   126fa:	68a3      	ldr	r3, [r4, #8]
   126fc:	b103      	cbz	r3, 12700 <_lv_ll_chg_list+0x38>
   126fe:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
   12700:	60a5      	str	r5, [r4, #8]
   12702:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
   12704:	68a2      	ldr	r2, [r4, #8]
   12706:	4629      	mov	r1, r5
   12708:	4620      	mov	r0, r4
   1270a:	4b0a      	ldr	r3, [pc, #40]	; (12734 <_lv_ll_chg_list+0x6c>)
   1270c:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
   1270e:	2200      	movs	r2, #0
   12710:	4629      	mov	r1, r5
   12712:	4620      	mov	r0, r4
   12714:	4b08      	ldr	r3, [pc, #32]	; (12738 <_lv_ll_chg_list+0x70>)
   12716:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
   12718:	68a1      	ldr	r1, [r4, #8]
   1271a:	b119      	cbz	r1, 12724 <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
   1271c:	462a      	mov	r2, r5
   1271e:	4620      	mov	r0, r4
   12720:	4b05      	ldr	r3, [pc, #20]	; (12738 <_lv_ll_chg_list+0x70>)
   12722:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
   12724:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
   12726:	6863      	ldr	r3, [r4, #4]
   12728:	2b00      	cmp	r3, #0
   1272a:	d1e8      	bne.n	126fe <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
   1272c:	6065      	str	r5, [r4, #4]
}
   1272e:	e7e6      	b.n	126fe <_lv_ll_chg_list+0x36>
   12730:	0001263d 	.word	0x0001263d
   12734:	00012461 	.word	0x00012461
   12738:	00012421 	.word	0x00012421

0001273c <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   1273c:	4291      	cmp	r1, r2
   1273e:	d04c      	beq.n	127da <_lv_ll_move_before+0x9e>
{
   12740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12744:	4617      	mov	r7, r2
   12746:	460c      	mov	r4, r1
   12748:	4605      	mov	r5, r0
    if(n_after != NULL)
   1274a:	b312      	cbz	r2, 12792 <_lv_ll_move_before+0x56>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   1274c:	4611      	mov	r1, r2
   1274e:	4b23      	ldr	r3, [pc, #140]	; (127dc <_lv_ll_move_before+0xa0>)
   12750:	4798      	blx	r3
   12752:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   12754:	4284      	cmp	r4, r0
   12756:	d01a      	beq.n	1278e <_lv_ll_move_before+0x52>
    _lv_ll_remove(ll_p, n_act);
   12758:	4621      	mov	r1, r4
   1275a:	4628      	mov	r0, r5
   1275c:	4b20      	ldr	r3, [pc, #128]	; (127e0 <_lv_ll_move_before+0xa4>)
   1275e:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   12760:	4622      	mov	r2, r4
   12762:	4631      	mov	r1, r6
   12764:	4628      	mov	r0, r5
   12766:	f8df 807c 	ldr.w	r8, [pc, #124]	; 127e4 <_lv_ll_move_before+0xa8>
   1276a:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
   1276c:	4632      	mov	r2, r6
   1276e:	4621      	mov	r1, r4
   12770:	4628      	mov	r0, r5
   12772:	f8df 9074 	ldr.w	r9, [pc, #116]	; 127e8 <_lv_ll_move_before+0xac>
   12776:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
   12778:	4622      	mov	r2, r4
   1277a:	4639      	mov	r1, r7
   1277c:	4628      	mov	r0, r5
   1277e:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
   12780:	463a      	mov	r2, r7
   12782:	4621      	mov	r1, r4
   12784:	4628      	mov	r0, r5
   12786:	47c0      	blx	r8
    if(n_before == NULL) ll_p->head = n_act;
   12788:	b306      	cbz	r6, 127cc <_lv_ll_move_before+0x90>
   1278a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(ll_p != NULL) {
   12792:	b1f0      	cbz	r0, 127d2 <_lv_ll_move_before+0x96>
        tail = ll_p->tail;
   12794:	6886      	ldr	r6, [r0, #8]
    if(n_act == n_before) return; /*Already before `n_after`*/
   12796:	42b4      	cmp	r4, r6
   12798:	d01d      	beq.n	127d6 <_lv_ll_move_before+0x9a>
    _lv_ll_remove(ll_p, n_act);
   1279a:	4621      	mov	r1, r4
   1279c:	4628      	mov	r0, r5
   1279e:	4b10      	ldr	r3, [pc, #64]	; (127e0 <_lv_ll_move_before+0xa4>)
   127a0:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
   127a2:	4622      	mov	r2, r4
   127a4:	4631      	mov	r1, r6
   127a6:	4628      	mov	r0, r5
   127a8:	4f0e      	ldr	r7, [pc, #56]	; (127e4 <_lv_ll_move_before+0xa8>)
   127aa:	47b8      	blx	r7
    node_set_prev(ll_p, n_act, n_before);
   127ac:	4632      	mov	r2, r6
   127ae:	4621      	mov	r1, r4
   127b0:	4628      	mov	r0, r5
   127b2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 127e8 <_lv_ll_move_before+0xac>
   127b6:	47c0      	blx	r8
    node_set_prev(ll_p, n_after, n_act);
   127b8:	4622      	mov	r2, r4
   127ba:	2100      	movs	r1, #0
   127bc:	4628      	mov	r0, r5
   127be:	47c0      	blx	r8
    node_set_next(ll_p, n_act, n_after);
   127c0:	2200      	movs	r2, #0
   127c2:	4621      	mov	r1, r4
   127c4:	4628      	mov	r0, r5
   127c6:	47b8      	blx	r7
    if(n_after == NULL) ll_p->tail = n_act;
   127c8:	60ac      	str	r4, [r5, #8]
   127ca:	e7dd      	b.n	12788 <_lv_ll_move_before+0x4c>
    if(n_before == NULL) ll_p->head = n_act;
   127cc:	606c      	str	r4, [r5, #4]
   127ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    void * tail = NULL;
   127d2:	4616      	mov	r6, r2
   127d4:	e7df      	b.n	12796 <_lv_ll_move_before+0x5a>
   127d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   127da:	4770      	bx	lr
   127dc:	00012591 	.word	0x00012591
   127e0:	0001263d 	.word	0x0001263d
   127e4:	00012421 	.word	0x00012421
   127e8:	00012461 	.word	0x00012461

000127ec <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
   127ec:	b140      	cbz	r0, 12800 <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   127ee:	6842      	ldr	r2, [r0, #4]
   127f0:	b10a      	cbz	r2, 127f6 <_lv_ll_is_empty+0xa>
    return false;
   127f2:	2000      	movs	r0, #0
}
   127f4:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
   127f6:	6880      	ldr	r0, [r0, #8]
   127f8:	fab0 f080 	clz	r0, r0
   127fc:	0940      	lsrs	r0, r0, #5
   127fe:	4770      	bx	lr
    if(ll_p == NULL) return true;
   12800:	2001      	movs	r0, #1
   12802:	4770      	bx	lr

00012804 <_lv_log_add>:
 * @param func name of the function when the log added
 * @param format printf-like format string
 * @param ... parameters for `format`
 */
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)
{
   12804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12808:	b0c4      	sub	sp, #272	; 0x110
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   1280a:	1e44      	subs	r4, r0, #1
   1280c:	b2e4      	uxtb	r4, r4
   1280e:	2c04      	cmp	r4, #4
   12810:	d815      	bhi.n	1283e <_lv_log_add+0x3a>
   12812:	461f      	mov	r7, r3
   12814:	4616      	mov	r6, r2
   12816:	460d      	mov	r5, r1
   12818:	4680      	mov	r8, r0
        va_list args;
        va_start(args, format);
   1281a:	ab4b      	add	r3, sp, #300	; 0x12c
   1281c:	9303      	str	r3, [sp, #12]
        char buf[256];
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1281e:	9a4a      	ldr	r2, [sp, #296]	; 0x128
   12820:	f44f 7180 	mov.w	r1, #256	; 0x100
   12824:	a804      	add	r0, sp, #16
   12826:	4c07      	ldr	r4, [pc, #28]	; (12844 <_lv_log_add+0x40>)
   12828:	47a0      	blx	r4
        }

        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error", "User"};
        printf("%s: %s \t(%s #%d %s())\n", lvl_prefix[level], buf, &file[p], line, func);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, func, buf);
   1282a:	4b07      	ldr	r3, [pc, #28]	; (12848 <_lv_log_add+0x44>)
   1282c:	681c      	ldr	r4, [r3, #0]
   1282e:	b134      	cbz	r4, 1283e <_lv_log_add+0x3a>
   12830:	ab04      	add	r3, sp, #16
   12832:	9300      	str	r3, [sp, #0]
   12834:	463b      	mov	r3, r7
   12836:	4632      	mov	r2, r6
   12838:	4629      	mov	r1, r5
   1283a:	4640      	mov	r0, r8
   1283c:	47a0      	blx	r4
#endif
    }
}
   1283e:	b044      	add	sp, #272	; 0x110
   12840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12844:	00013b75 	.word	0x00013b75
   12848:	20002b88 	.word	0x20002b88

0001284c <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
   1284c:	4b1b      	ldr	r3, [pc, #108]	; (128bc <_lv_trigo_sin+0x70>)
   1284e:	fb83 2300 	smull	r2, r3, r3, r0
   12852:	181a      	adds	r2, r3, r0
   12854:	17c3      	asrs	r3, r0, #31
   12856:	ebc3 2322 	rsb	r3, r3, r2, asr #8
   1285a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   1285e:	fb02 0013 	mls	r0, r2, r3, r0
   12862:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
   12864:	2800      	cmp	r0, #0
   12866:	bfbc      	itt	lt
   12868:	1880      	addlt	r0, r0, r2
   1286a:	b200      	sxthlt	r0, r0

    if(angle < 90) {
   1286c:	2859      	cmp	r0, #89	; 0x59
   1286e:	dd13      	ble.n	12898 <_lv_trigo_sin+0x4c>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
   12870:	b280      	uxth	r0, r0
   12872:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
   12876:	b29b      	uxth	r3, r3
   12878:	2b59      	cmp	r3, #89	; 0x59
   1287a:	d911      	bls.n	128a0 <_lv_trigo_sin+0x54>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
   1287c:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
   12880:	b29b      	uxth	r3, r3
   12882:	2b59      	cmp	r3, #89	; 0x59
   12884:	d913      	bls.n	128ae <_lv_trigo_sin+0x62>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
   12886:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
   1288a:	b200      	sxth	r0, r0
   1288c:	4b0c      	ldr	r3, [pc, #48]	; (128c0 <_lv_trigo_sin+0x74>)
   1288e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   12892:	4240      	negs	r0, r0
   12894:	b200      	sxth	r0, r0
    }

    return ret;
}
   12896:	4770      	bx	lr
        ret = sin0_90_table[angle];
   12898:	4b09      	ldr	r3, [pc, #36]	; (128c0 <_lv_trigo_sin+0x74>)
   1289a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   1289e:	4770      	bx	lr
        angle = 180 - angle;
   128a0:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
   128a4:	b200      	sxth	r0, r0
   128a6:	4b06      	ldr	r3, [pc, #24]	; (128c0 <_lv_trigo_sin+0x74>)
   128a8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
   128ac:	4770      	bx	lr
        ret   = -sin0_90_table[angle];
   128ae:	b21b      	sxth	r3, r3
   128b0:	4a03      	ldr	r2, [pc, #12]	; (128c0 <_lv_trigo_sin+0x74>)
   128b2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
   128b6:	4240      	negs	r0, r0
   128b8:	b200      	sxth	r0, r0
   128ba:	4770      	bx	lr
   128bc:	b60b60b7 	.word	0xb60b60b7
   128c0:	00020780 	.word	0x00020780

000128c4 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   128c4:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   128c6:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   128c8:	2400      	movs	r4, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   128ca:	1913      	adds	r3, r2, r4
        if((uint32_t)trial * trial <= x) root = trial;
   128cc:	fb03 f503 	mul.w	r5, r3, r3
   128d0:	42a8      	cmp	r0, r5
   128d2:	bf28      	it	cs
   128d4:	461c      	movcs	r4, r3
        mask = mask >> 1;
    } while(mask);
   128d6:	0852      	lsrs	r2, r2, #1
   128d8:	d1f7      	bne.n	128ca <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   128da:	0923      	lsrs	r3, r4, #4
   128dc:	800b      	strh	r3, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   128de:	0124      	lsls	r4, r4, #4
   128e0:	b2e4      	uxtb	r4, r4
   128e2:	804c      	strh	r4, [r1, #2]
}
   128e4:	bc30      	pop	{r4, r5}
   128e6:	4770      	bx	lr

000128e8 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
   128e8:	4603      	mov	r3, r0
   128ea:	b160      	cbz	r0, 12906 <ent_get_next+0x1e>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
   128ec:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
   128ee:	681b      	ldr	r3, [r3, #0]
   128f0:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
   128f4:	1d02      	adds	r2, r0, #4
   128f6:	4b05      	ldr	r3, [pc, #20]	; (1290c <ent_get_next+0x24>)
   128f8:	681b      	ldr	r3, [r3, #0]
   128fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   128fe:	429a      	cmp	r2, r3
   12900:	bf28      	it	cs
   12902:	2000      	movcs	r0, #0
    }

    return next_e;
}
   12904:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
   12906:	4b01      	ldr	r3, [pc, #4]	; (1290c <ent_get_next+0x24>)
   12908:	6818      	ldr	r0, [r3, #0]
   1290a:	4770      	bx	lr
   1290c:	20002b8c 	.word	0x20002b8c

00012910 <ent_trunc>:
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
   12910:	f011 0f03 	tst.w	r1, #3
        size = size & (~0x3);
   12914:	bf1c      	itt	ne
   12916:	f021 0103 	bicne.w	r1, r1, #3
        size += 4;
   1291a:	3104      	addne	r1, #4
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
   1291c:	6803      	ldr	r3, [r0, #0]
   1291e:	f3c3 035e 	ubfx	r3, r3, #1, #31
   12922:	1d0a      	adds	r2, r1, #4
   12924:	4293      	cmp	r3, r2
   12926:	d017      	beq.n	12958 <ent_trunc+0x48>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
   12928:	4299      	cmp	r1, r3
   1292a:	d016      	beq.n	1295a <ent_trunc+0x4a>
{
   1292c:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
   1292e:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
   12930:	5c53      	ldrb	r3, [r2, r1]
   12932:	f36f 0300 	bfc	r3, #0, #1
   12936:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
   12938:	6803      	ldr	r3, [r0, #0]
   1293a:	f3c3 035e 	ubfx	r3, r3, #1, #31
   1293e:	3b04      	subs	r3, #4
   12940:	1a5b      	subs	r3, r3, r1
   12942:	5854      	ldr	r4, [r2, r1]
   12944:	f363 045f 	bfi	r4, r3, #1, #31
   12948:	5054      	str	r4, [r2, r1]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = (uint32_t)size;
   1294a:	6803      	ldr	r3, [r0, #0]
   1294c:	f361 035f 	bfi	r3, r1, #1, #31
   12950:	6003      	str	r3, [r0, #0]
}
   12952:	f85d 4b04 	ldr.w	r4, [sp], #4
   12956:	4770      	bx	lr
        size = e->header.s.d_size;
   12958:	4611      	mov	r1, r2
    e->header.s.d_size = (uint32_t)size;
   1295a:	6803      	ldr	r3, [r0, #0]
   1295c:	f361 035f 	bfi	r3, r1, #1, #31
   12960:	6003      	str	r3, [r0, #0]
   12962:	4770      	bx	lr

00012964 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
   12964:	4b06      	ldr	r3, [pc, #24]	; (12980 <_lv_mem_init+0x1c>)
   12966:	1d1a      	adds	r2, r3, #4
   12968:	601a      	str	r2, [r3, #0]
    full->header.s.used = 0;
   1296a:	791a      	ldrb	r2, [r3, #4]
   1296c:	f36f 0200 	bfc	r2, #0, #1
   12970:	711a      	strb	r2, [r3, #4]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
   12972:	685a      	ldr	r2, [r3, #4]
   12974:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   12978:	f361 025f 	bfi	r2, r1, #1, #31
   1297c:	605a      	str	r2, [r3, #4]
   1297e:	4770      	bx	lr
   12980:	20002b8c 	.word	0x20002b8c

00012984 <lv_mem_alloc>:
    if(size == 0) {
   12984:	2800      	cmp	r0, #0
   12986:	d02e      	beq.n	129e6 <lv_mem_alloc+0x62>
{
   12988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1298a:	b083      	sub	sp, #12
   1298c:	4605      	mov	r5, r0
    if(size & 0x3) {
   1298e:	f010 0f03 	tst.w	r0, #3
        size = size & (~0x3);
   12992:	bf1c      	itt	ne
   12994:	f020 0503 	bicne.w	r5, r0, #3
        size += 4;
   12998:	3504      	addne	r5, #4
    lv_mem_ent_t * e = NULL;
   1299a:	2400      	movs	r4, #0
        e = ent_get_next(e);
   1299c:	4e13      	ldr	r6, [pc, #76]	; (129ec <lv_mem_alloc+0x68>)
        ent_trunc(e, size);
   1299e:	4f14      	ldr	r7, [pc, #80]	; (129f0 <lv_mem_alloc+0x6c>)
   129a0:	e008      	b.n	129b4 <lv_mem_alloc+0x30>
   129a2:	4629      	mov	r1, r5
   129a4:	47b8      	blx	r7
        e->header.s.used = 1;
   129a6:	7823      	ldrb	r3, [r4, #0]
   129a8:	f043 0301 	orr.w	r3, r3, #1
   129ac:	4620      	mov	r0, r4
   129ae:	f800 3b04 	strb.w	r3, [r0], #4
    } while(e != NULL && alloc == NULL);
   129b2:	b9b0      	cbnz	r0, 129e2 <lv_mem_alloc+0x5e>
        e = ent_get_next(e);
   129b4:	4620      	mov	r0, r4
   129b6:	47b0      	blx	r6
        if(e != NULL) {
   129b8:	4604      	mov	r4, r0
   129ba:	b148      	cbz	r0, 129d0 <lv_mem_alloc+0x4c>
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
   129bc:	7803      	ldrb	r3, [r0, #0]
   129be:	f013 0f01 	tst.w	r3, #1
   129c2:	d1f7      	bne.n	129b4 <lv_mem_alloc+0x30>
   129c4:	6803      	ldr	r3, [r0, #0]
   129c6:	f3c3 035e 	ubfx	r3, r3, #1, #31
   129ca:	429d      	cmp	r5, r3
   129cc:	d9e9      	bls.n	129a2 <lv_mem_alloc+0x1e>
   129ce:	e7f1      	b.n	129b4 <lv_mem_alloc+0x30>
    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");
   129d0:	4b08      	ldr	r3, [pc, #32]	; (129f4 <lv_mem_alloc+0x70>)
   129d2:	9300      	str	r3, [sp, #0]
   129d4:	4b08      	ldr	r3, [pc, #32]	; (129f8 <lv_mem_alloc+0x74>)
   129d6:	22d1      	movs	r2, #209	; 0xd1
   129d8:	4908      	ldr	r1, [pc, #32]	; (129fc <lv_mem_alloc+0x78>)
   129da:	2002      	movs	r0, #2
   129dc:	4c08      	ldr	r4, [pc, #32]	; (12a00 <lv_mem_alloc+0x7c>)
   129de:	47a0      	blx	r4
    return alloc;
   129e0:	2000      	movs	r0, #0
}
   129e2:	b003      	add	sp, #12
   129e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &zero_mem;
   129e6:	4807      	ldr	r0, [pc, #28]	; (12a04 <lv_mem_alloc+0x80>)
   129e8:	4770      	bx	lr
   129ea:	bf00      	nop
   129ec:	000128e9 	.word	0x000128e9
   129f0:	00012911 	.word	0x00012911
   129f4:	000208a4 	.word	0x000208a4
   129f8:	00020838 	.word	0x00020838
   129fc:	0002087c 	.word	0x0002087c
   12a00:	00012805 	.word	0x00012805
   12a04:	20006b90 	.word	0x20006b90

00012a08 <lv_mem_defrag>:
{
   12a08:	b538      	push	{r3, r4, r5, lr}
    e_free = ent_get_next(NULL);
   12a0a:	2000      	movs	r0, #0
   12a0c:	4b16      	ldr	r3, [pc, #88]	; (12a68 <lv_mem_defrag+0x60>)
   12a0e:	4798      	blx	r3
   12a10:	4604      	mov	r4, r0
        e_next = ent_get_next(e_free);
   12a12:	4d15      	ldr	r5, [pc, #84]	; (12a68 <lv_mem_defrag+0x60>)
   12a14:	e01b      	b.n	12a4e <lv_mem_defrag+0x46>
   12a16:	bd38      	pop	{r3, r4, r5, pc}
   12a18:	4620      	mov	r0, r4
   12a1a:	47a8      	blx	r5
        while(e_next != NULL) {
   12a1c:	4601      	mov	r1, r0
   12a1e:	b308      	cbz	r0, 12a64 <lv_mem_defrag+0x5c>
            if(e_next->header.s.used == 0) {
   12a20:	7803      	ldrb	r3, [r0, #0]
   12a22:	f013 0f01 	tst.w	r3, #1
   12a26:	d111      	bne.n	12a4c <lv_mem_defrag+0x44>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
   12a28:	6823      	ldr	r3, [r4, #0]
   12a2a:	f3c3 025e 	ubfx	r2, r3, #1, #31
   12a2e:	3204      	adds	r2, #4
   12a30:	6808      	ldr	r0, [r1, #0]
   12a32:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   12a36:	f362 035f 	bfi	r3, r2, #1, #31
   12a3a:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
   12a3c:	4608      	mov	r0, r1
   12a3e:	47a8      	blx	r5
        while(e_next != NULL) {
   12a40:	4601      	mov	r1, r0
   12a42:	b170      	cbz	r0, 12a62 <lv_mem_defrag+0x5a>
            if(e_next->header.s.used == 0) {
   12a44:	780b      	ldrb	r3, [r1, #0]
   12a46:	f013 0f01 	tst.w	r3, #1
   12a4a:	d0ed      	beq.n	12a28 <lv_mem_defrag+0x20>
{
   12a4c:	460c      	mov	r4, r1
        while(e_free != NULL) {
   12a4e:	2c00      	cmp	r4, #0
   12a50:	d0e1      	beq.n	12a16 <lv_mem_defrag+0xe>
            if(e_free->header.s.used != 0) {
   12a52:	7823      	ldrb	r3, [r4, #0]
   12a54:	f013 0f01 	tst.w	r3, #1
   12a58:	d0de      	beq.n	12a18 <lv_mem_defrag+0x10>
                e_free = ent_get_next(e_free);
   12a5a:	4620      	mov	r0, r4
   12a5c:	47a8      	blx	r5
   12a5e:	4604      	mov	r4, r0
   12a60:	e7f5      	b.n	12a4e <lv_mem_defrag+0x46>
   12a62:	bd38      	pop	{r3, r4, r5, pc}
   12a64:	bd38      	pop	{r3, r4, r5, pc}
   12a66:	bf00      	nop
   12a68:	000128e9 	.word	0x000128e9

00012a6c <lv_mem_free>:
{
   12a6c:	b538      	push	{r3, r4, r5, lr}
    if(data == &zero_mem) return;
   12a6e:	4b1e      	ldr	r3, [pc, #120]	; (12ae8 <lv_mem_free+0x7c>)
   12a70:	4298      	cmp	r0, r3
   12a72:	d038      	beq.n	12ae6 <lv_mem_free+0x7a>
    if(data == NULL) return;
   12a74:	2800      	cmp	r0, #0
   12a76:	d036      	beq.n	12ae6 <lv_mem_free+0x7a>
   12a78:	4604      	mov	r4, r0
    e->header.s.used = 0;
   12a7a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   12a7e:	f36f 0300 	bfc	r3, #0, #1
   12a82:	f800 3c04 	strb.w	r3, [r0, #-4]
    full_defrag_cnt++;
   12a86:	4a19      	ldr	r2, [pc, #100]	; (12aec <lv_mem_free+0x80>)
   12a88:	f8b2 3d20 	ldrh.w	r3, [r2, #3360]	; 0xd20
   12a8c:	3301      	adds	r3, #1
   12a8e:	b29b      	uxth	r3, r3
   12a90:	f8a2 3d20 	strh.w	r3, [r2, #3360]	; 0xd20
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
   12a94:	2b0f      	cmp	r3, #15
   12a96:	d820      	bhi.n	12ada <lv_mem_free+0x6e>
        e_next = ent_get_next(e);
   12a98:	3804      	subs	r0, #4
   12a9a:	4b15      	ldr	r3, [pc, #84]	; (12af0 <lv_mem_free+0x84>)
   12a9c:	4798      	blx	r3
        while(e_next != NULL) {
   12a9e:	4601      	mov	r1, r0
   12aa0:	b308      	cbz	r0, 12ae6 <lv_mem_free+0x7a>
            if(e_next->header.s.used == 0) {
   12aa2:	7803      	ldrb	r3, [r0, #0]
   12aa4:	f013 0f01 	tst.w	r3, #1
   12aa8:	d115      	bne.n	12ad6 <lv_mem_free+0x6a>
            e_next = ent_get_next(e_next);
   12aaa:	4d11      	ldr	r5, [pc, #68]	; (12af0 <lv_mem_free+0x84>)
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
   12aac:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12ab0:	f3c3 025e 	ubfx	r2, r3, #1, #31
   12ab4:	3204      	adds	r2, #4
   12ab6:	6808      	ldr	r0, [r1, #0]
   12ab8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   12abc:	f362 035f 	bfi	r3, r2, #1, #31
   12ac0:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
   12ac4:	4608      	mov	r0, r1
   12ac6:	47a8      	blx	r5
        while(e_next != NULL) {
   12ac8:	4601      	mov	r1, r0
   12aca:	b128      	cbz	r0, 12ad8 <lv_mem_free+0x6c>
            if(e_next->header.s.used == 0) {
   12acc:	780b      	ldrb	r3, [r1, #0]
   12ace:	f013 0f01 	tst.w	r3, #1
   12ad2:	d0eb      	beq.n	12aac <lv_mem_free+0x40>
   12ad4:	bd38      	pop	{r3, r4, r5, pc}
   12ad6:	bd38      	pop	{r3, r4, r5, pc}
   12ad8:	bd38      	pop	{r3, r4, r5, pc}
        full_defrag_cnt = 0;
   12ada:	2200      	movs	r2, #0
   12adc:	4b03      	ldr	r3, [pc, #12]	; (12aec <lv_mem_free+0x80>)
   12ade:	f8a3 2d20 	strh.w	r2, [r3, #3360]	; 0xd20
        lv_mem_defrag();
   12ae2:	4b04      	ldr	r3, [pc, #16]	; (12af4 <lv_mem_free+0x88>)
   12ae4:	4798      	blx	r3
   12ae6:	bd38      	pop	{r3, r4, r5, pc}
   12ae8:	20006b90 	.word	0x20006b90
   12aec:	20005e74 	.word	0x20005e74
   12af0:	000128e9 	.word	0x000128e9
   12af4:	00012a09 	.word	0x00012a09

00012af8 <_lv_mem_get_size>:
    if(data == NULL) return 0;
   12af8:	b138      	cbz	r0, 12b0a <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
   12afa:	4a06      	ldr	r2, [pc, #24]	; (12b14 <_lv_mem_get_size+0x1c>)
   12afc:	4290      	cmp	r0, r2
   12afe:	d006      	beq.n	12b0e <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
   12b00:	f850 0c04 	ldr.w	r0, [r0, #-4]
   12b04:	f3c0 005e 	ubfx	r0, r0, #1, #31
   12b08:	4770      	bx	lr
    if(data == NULL) return 0;
   12b0a:	2000      	movs	r0, #0
   12b0c:	4770      	bx	lr
    if(data == &zero_mem) return 0;
   12b0e:	2000      	movs	r0, #0
}
   12b10:	4770      	bx	lr
   12b12:	bf00      	nop
   12b14:	20006b90 	.word	0x20006b90

00012b18 <_lv_mem_buf_release>:
        if(mem_buf_small[i].p == p) {
   12b18:	4b1b      	ldr	r3, [pc, #108]	; (12b88 <_lv_mem_buf_release+0x70>)
   12b1a:	681b      	ldr	r3, [r3, #0]
   12b1c:	4298      	cmp	r0, r3
   12b1e:	d020      	beq.n	12b62 <_lv_mem_buf_release+0x4a>
   12b20:	4b19      	ldr	r3, [pc, #100]	; (12b88 <_lv_mem_buf_release+0x70>)
   12b22:	689b      	ldr	r3, [r3, #8]
   12b24:	4283      	cmp	r3, r0
   12b26:	bf08      	it	eq
   12b28:	2201      	moveq	r2, #1
   12b2a:	d01b      	beq.n	12b64 <_lv_mem_buf_release+0x4c>
{
   12b2c:	b510      	push	{r4, lr}
   12b2e:	b082      	sub	sp, #8
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   12b30:	4b16      	ldr	r3, [pc, #88]	; (12b8c <_lv_mem_buf_release+0x74>)
   12b32:	681b      	ldr	r3, [r3, #0]
   12b34:	4298      	cmp	r0, r3
   12b36:	d01d      	beq.n	12b74 <_lv_mem_buf_release+0x5c>
   12b38:	2301      	movs	r3, #1
   12b3a:	4914      	ldr	r1, [pc, #80]	; (12b8c <_lv_mem_buf_release+0x74>)
   12b3c:	461c      	mov	r4, r3
   12b3e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   12b42:	4290      	cmp	r0, r2
   12b44:	d017      	beq.n	12b76 <_lv_mem_buf_release+0x5e>
   12b46:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12b48:	2b10      	cmp	r3, #16
   12b4a:	d1f7      	bne.n	12b3c <_lv_mem_buf_release+0x24>
    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
   12b4c:	4b10      	ldr	r3, [pc, #64]	; (12b90 <_lv_mem_buf_release+0x78>)
   12b4e:	9300      	str	r3, [sp, #0]
   12b50:	4b10      	ldr	r3, [pc, #64]	; (12b94 <_lv_mem_buf_release+0x7c>)
   12b52:	f240 2232 	movw	r2, #562	; 0x232
   12b56:	4910      	ldr	r1, [pc, #64]	; (12b98 <_lv_mem_buf_release+0x80>)
   12b58:	2003      	movs	r0, #3
   12b5a:	4c10      	ldr	r4, [pc, #64]	; (12b9c <_lv_mem_buf_release+0x84>)
   12b5c:	47a0      	blx	r4
}
   12b5e:	b002      	add	sp, #8
   12b60:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   12b62:	2200      	movs	r2, #0
            mem_buf_small[i].used = 0;
   12b64:	4b08      	ldr	r3, [pc, #32]	; (12b88 <_lv_mem_buf_release+0x70>)
   12b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   12b6a:	799a      	ldrb	r2, [r3, #6]
   12b6c:	f36f 0200 	bfc	r2, #0, #1
   12b70:	719a      	strb	r2, [r3, #6]
            return;
   12b72:	4770      	bx	lr
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   12b74:	2400      	movs	r4, #0
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   12b76:	4b05      	ldr	r3, [pc, #20]	; (12b8c <_lv_mem_buf_release+0x74>)
   12b78:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   12b7c:	79a3      	ldrb	r3, [r4, #6]
   12b7e:	f36f 0300 	bfc	r3, #0, #1
   12b82:	71a3      	strb	r3, [r4, #6]
            return;
   12b84:	e7eb      	b.n	12b5e <_lv_mem_buf_release+0x46>
   12b86:	bf00      	nop
   12b88:	20000044 	.word	0x20000044
   12b8c:	20006ccc 	.word	0x20006ccc
   12b90:	000208c0 	.word	0x000208c0
   12b94:	00020848 	.word	0x00020848
   12b98:	0002087c 	.word	0x0002087c
   12b9c:	00012805 	.word	0x00012805

00012ba0 <_lv_mem_buf_free_all>:
{
   12ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        mem_buf_small[i].used = 0;
   12ba4:	4b12      	ldr	r3, [pc, #72]	; (12bf0 <_lv_mem_buf_free_all+0x50>)
   12ba6:	799a      	ldrb	r2, [r3, #6]
   12ba8:	f36f 0200 	bfc	r2, #0, #1
   12bac:	719a      	strb	r2, [r3, #6]
   12bae:	7b9a      	ldrb	r2, [r3, #14]
   12bb0:	f36f 0200 	bfc	r2, #0, #1
   12bb4:	739a      	strb	r2, [r3, #14]
   12bb6:	4c0f      	ldr	r4, [pc, #60]	; (12bf4 <_lv_mem_buf_free_all+0x54>)
   12bb8:	2500      	movs	r5, #0
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   12bba:	f8df 803c 	ldr.w	r8, [pc, #60]	; 12bf8 <_lv_mem_buf_free_all+0x58>
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   12bbe:	462e      	mov	r6, r5
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   12bc0:	1f27      	subs	r7, r4, #4
   12bc2:	e003      	b.n	12bcc <_lv_mem_buf_free_all+0x2c>
   12bc4:	3501      	adds	r5, #1
   12bc6:	3408      	adds	r4, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12bc8:	2d10      	cmp	r5, #16
   12bca:	d00e      	beq.n	12bea <_lv_mem_buf_free_all+0x4a>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   12bcc:	f854 0c04 	ldr.w	r0, [r4, #-4]
   12bd0:	2800      	cmp	r0, #0
   12bd2:	d0f7      	beq.n	12bc4 <_lv_mem_buf_free_all+0x24>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   12bd4:	47c0      	blx	r8
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   12bd6:	f844 6c04 	str.w	r6, [r4, #-4]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   12bda:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   12bde:	799a      	ldrb	r2, [r3, #6]
   12be0:	f366 0200 	bfi	r2, r6, #0, #1
   12be4:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   12be6:	8026      	strh	r6, [r4, #0]
   12be8:	e7ec      	b.n	12bc4 <_lv_mem_buf_free_all+0x24>
}
   12bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bee:	bf00      	nop
   12bf0:	20000044 	.word	0x20000044
   12bf4:	20006cd0 	.word	0x20006cd0
   12bf8:	00012a6d 	.word	0x00012a6d

00012bfc <_lv_memcpy>:
{
   12bfc:	b4f0      	push	{r4, r5, r6, r7}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
   12bfe:	f000 0303 	and.w	r3, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
   12c02:	f001 0403 	and.w	r4, r1, #3
    if(s_align != d_align) {
   12c06:	42a3      	cmp	r3, r4
   12c08:	f000 80a6 	beq.w	12d58 <_lv_memcpy+0x15c>
        while(len > 32) {
   12c0c:	2a20      	cmp	r2, #32
   12c0e:	f240 80a1 	bls.w	12d54 <_lv_memcpy+0x158>
   12c12:	f100 0420 	add.w	r4, r0, #32
   12c16:	f101 0320 	add.w	r3, r1, #32
   12c1a:	4615      	mov	r5, r2
            REPEAT8(COPY8);
   12c1c:	f813 6c20 	ldrb.w	r6, [r3, #-32]
   12c20:	f804 6c20 	strb.w	r6, [r4, #-32]
   12c24:	f813 6c1f 	ldrb.w	r6, [r3, #-31]
   12c28:	f804 6c1f 	strb.w	r6, [r4, #-31]
   12c2c:	f813 6c1e 	ldrb.w	r6, [r3, #-30]
   12c30:	f804 6c1e 	strb.w	r6, [r4, #-30]
   12c34:	f813 6c1d 	ldrb.w	r6, [r3, #-29]
   12c38:	f804 6c1d 	strb.w	r6, [r4, #-29]
   12c3c:	f813 6c1c 	ldrb.w	r6, [r3, #-28]
   12c40:	f804 6c1c 	strb.w	r6, [r4, #-28]
   12c44:	f813 6c1b 	ldrb.w	r6, [r3, #-27]
   12c48:	f804 6c1b 	strb.w	r6, [r4, #-27]
   12c4c:	f813 6c1a 	ldrb.w	r6, [r3, #-26]
   12c50:	f804 6c1a 	strb.w	r6, [r4, #-26]
   12c54:	f813 6c19 	ldrb.w	r6, [r3, #-25]
   12c58:	f804 6c19 	strb.w	r6, [r4, #-25]
            REPEAT8(COPY8);
   12c5c:	f813 6c18 	ldrb.w	r6, [r3, #-24]
   12c60:	f804 6c18 	strb.w	r6, [r4, #-24]
   12c64:	f813 6c17 	ldrb.w	r6, [r3, #-23]
   12c68:	f804 6c17 	strb.w	r6, [r4, #-23]
   12c6c:	f813 6c16 	ldrb.w	r6, [r3, #-22]
   12c70:	f804 6c16 	strb.w	r6, [r4, #-22]
   12c74:	f813 6c15 	ldrb.w	r6, [r3, #-21]
   12c78:	f804 6c15 	strb.w	r6, [r4, #-21]
   12c7c:	f813 6c14 	ldrb.w	r6, [r3, #-20]
   12c80:	f804 6c14 	strb.w	r6, [r4, #-20]
   12c84:	f813 6c13 	ldrb.w	r6, [r3, #-19]
   12c88:	f804 6c13 	strb.w	r6, [r4, #-19]
   12c8c:	f813 6c12 	ldrb.w	r6, [r3, #-18]
   12c90:	f804 6c12 	strb.w	r6, [r4, #-18]
   12c94:	f813 6c11 	ldrb.w	r6, [r3, #-17]
   12c98:	f804 6c11 	strb.w	r6, [r4, #-17]
            REPEAT8(COPY8);
   12c9c:	f813 6c10 	ldrb.w	r6, [r3, #-16]
   12ca0:	f804 6c10 	strb.w	r6, [r4, #-16]
   12ca4:	f813 6c0f 	ldrb.w	r6, [r3, #-15]
   12ca8:	f804 6c0f 	strb.w	r6, [r4, #-15]
   12cac:	f813 6c0e 	ldrb.w	r6, [r3, #-14]
   12cb0:	f804 6c0e 	strb.w	r6, [r4, #-14]
   12cb4:	f813 6c0d 	ldrb.w	r6, [r3, #-13]
   12cb8:	f804 6c0d 	strb.w	r6, [r4, #-13]
   12cbc:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
   12cc0:	f804 6c0c 	strb.w	r6, [r4, #-12]
   12cc4:	f813 6c0b 	ldrb.w	r6, [r3, #-11]
   12cc8:	f804 6c0b 	strb.w	r6, [r4, #-11]
   12ccc:	f813 6c0a 	ldrb.w	r6, [r3, #-10]
   12cd0:	f804 6c0a 	strb.w	r6, [r4, #-10]
   12cd4:	f813 6c09 	ldrb.w	r6, [r3, #-9]
   12cd8:	f804 6c09 	strb.w	r6, [r4, #-9]
            REPEAT8(COPY8);
   12cdc:	f813 6c08 	ldrb.w	r6, [r3, #-8]
   12ce0:	f804 6c08 	strb.w	r6, [r4, #-8]
   12ce4:	f813 6c07 	ldrb.w	r6, [r3, #-7]
   12ce8:	f804 6c07 	strb.w	r6, [r4, #-7]
   12cec:	f813 6c06 	ldrb.w	r6, [r3, #-6]
   12cf0:	f804 6c06 	strb.w	r6, [r4, #-6]
   12cf4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
   12cf8:	f804 6c05 	strb.w	r6, [r4, #-5]
   12cfc:	f813 6c04 	ldrb.w	r6, [r3, #-4]
   12d00:	f804 6c04 	strb.w	r6, [r4, #-4]
   12d04:	f813 6c03 	ldrb.w	r6, [r3, #-3]
   12d08:	f804 6c03 	strb.w	r6, [r4, #-3]
   12d0c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   12d10:	f804 6c02 	strb.w	r6, [r4, #-2]
   12d14:	f813 6c01 	ldrb.w	r6, [r3, #-1]
   12d18:	f804 6c01 	strb.w	r6, [r4, #-1]
            len -= 32;
   12d1c:	3d20      	subs	r5, #32
   12d1e:	3420      	adds	r4, #32
   12d20:	3320      	adds	r3, #32
        while(len > 32) {
   12d22:	2d20      	cmp	r5, #32
   12d24:	f63f af7a 	bhi.w	12c1c <_lv_memcpy+0x20>
   12d28:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
   12d2c:	f025 041f 	bic.w	r4, r5, #31
   12d30:	3420      	adds	r4, #32
   12d32:	1903      	adds	r3, r0, r4
   12d34:	4421      	add	r1, r4
   12d36:	3a20      	subs	r2, #32
   12d38:	f025 051f 	bic.w	r5, r5, #31
   12d3c:	1b52      	subs	r2, r2, r5
        while(len) {
   12d3e:	b13a      	cbz	r2, 12d50 <_lv_memcpy+0x154>
   12d40:	3901      	subs	r1, #1
   12d42:	441a      	add	r2, r3
            COPY8
   12d44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12d48:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
   12d4c:	429a      	cmp	r2, r3
   12d4e:	d1f9      	bne.n	12d44 <_lv_memcpy+0x148>
}
   12d50:	bcf0      	pop	{r4, r5, r6, r7}
   12d52:	4770      	bx	lr
        while(len > 32) {
   12d54:	4603      	mov	r3, r0
   12d56:	e7f2      	b.n	12d3e <_lv_memcpy+0x142>
    if(d_align) {
   12d58:	2b00      	cmp	r3, #0
   12d5a:	d15b      	bne.n	12e14 <_lv_memcpy+0x218>
    uint8_t * d8 = dst;
   12d5c:	4605      	mov	r5, r0
    while(len > 32) {
   12d5e:	2a20      	cmp	r2, #32
   12d60:	d934      	bls.n	12dcc <_lv_memcpy+0x1d0>
   12d62:	f105 0420 	add.w	r4, r5, #32
   12d66:	f101 0320 	add.w	r3, r1, #32
   12d6a:	4616      	mov	r6, r2
        REPEAT8(COPY32)
   12d6c:	f853 7c20 	ldr.w	r7, [r3, #-32]
   12d70:	f844 7c20 	str.w	r7, [r4, #-32]
   12d74:	f853 7c1c 	ldr.w	r7, [r3, #-28]
   12d78:	f844 7c1c 	str.w	r7, [r4, #-28]
   12d7c:	f853 7c18 	ldr.w	r7, [r3, #-24]
   12d80:	f844 7c18 	str.w	r7, [r4, #-24]
   12d84:	f853 7c14 	ldr.w	r7, [r3, #-20]
   12d88:	f844 7c14 	str.w	r7, [r4, #-20]
   12d8c:	f853 7c10 	ldr.w	r7, [r3, #-16]
   12d90:	f844 7c10 	str.w	r7, [r4, #-16]
   12d94:	f853 7c0c 	ldr.w	r7, [r3, #-12]
   12d98:	f844 7c0c 	str.w	r7, [r4, #-12]
   12d9c:	f853 7c08 	ldr.w	r7, [r3, #-8]
   12da0:	f844 7c08 	str.w	r7, [r4, #-8]
   12da4:	f853 7c04 	ldr.w	r7, [r3, #-4]
   12da8:	f844 7c04 	str.w	r7, [r4, #-4]
        len -= 32;
   12dac:	3e20      	subs	r6, #32
   12dae:	3420      	adds	r4, #32
   12db0:	3320      	adds	r3, #32
    while(len > 32) {
   12db2:	2e20      	cmp	r6, #32
   12db4:	d8da      	bhi.n	12d6c <_lv_memcpy+0x170>
   12db6:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   12dba:	f023 041f 	bic.w	r4, r3, #31
   12dbe:	3420      	adds	r4, #32
   12dc0:	4425      	add	r5, r4
   12dc2:	4421      	add	r1, r4
   12dc4:	3a20      	subs	r2, #32
   12dc6:	f023 031f 	bic.w	r3, r3, #31
   12dca:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   12dcc:	2a04      	cmp	r2, #4
   12dce:	d932      	bls.n	12e36 <_lv_memcpy+0x23a>
   12dd0:	1f0e      	subs	r6, r1, #4
   12dd2:	462c      	mov	r4, r5
   12dd4:	4613      	mov	r3, r2
        COPY32;
   12dd6:	f856 7f04 	ldr.w	r7, [r6, #4]!
   12dda:	f844 7b04 	str.w	r7, [r4], #4
        len -= 4;
   12dde:	3b04      	subs	r3, #4
    while(len > 4) {
   12de0:	2b04      	cmp	r3, #4
   12de2:	d8f8      	bhi.n	12dd6 <_lv_memcpy+0x1da>
   12de4:	1f54      	subs	r4, r2, #5
   12de6:	f024 0303 	bic.w	r3, r4, #3
   12dea:	3304      	adds	r3, #4
   12dec:	3a04      	subs	r2, #4
   12dee:	f024 0403 	bic.w	r4, r4, #3
   12df2:	1b12      	subs	r2, r2, r4
        COPY32;
   12df4:	4419      	add	r1, r3
   12df6:	442b      	add	r3, r5
    while(len) {
   12df8:	2a00      	cmp	r2, #0
   12dfa:	d0a9      	beq.n	12d50 <_lv_memcpy+0x154>
   12dfc:	3901      	subs	r1, #1
   12dfe:	441a      	add	r2, r3
        COPY8
   12e00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12e04:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
   12e08:	4293      	cmp	r3, r2
   12e0a:	d1f9      	bne.n	12e00 <_lv_memcpy+0x204>
   12e0c:	e7a0      	b.n	12d50 <_lv_memcpy+0x154>
            COPY8;
   12e0e:	4629      	mov	r1, r5
   12e10:	461d      	mov	r5, r3
   12e12:	e7a4      	b.n	12d5e <_lv_memcpy+0x162>
        while(d_align && len) {
   12e14:	f1c3 0304 	rsb	r3, r3, #4
   12e18:	b17a      	cbz	r2, 12e3a <_lv_memcpy+0x23e>
   12e1a:	18c4      	adds	r4, r0, r3
   12e1c:	4603      	mov	r3, r0
            COPY8;
   12e1e:	f811 5b01 	ldrb.w	r5, [r1], #1
   12e22:	f803 5b01 	strb.w	r5, [r3], #1
   12e26:	460d      	mov	r5, r1
            len--;
   12e28:	3a01      	subs	r2, #1
        while(d_align && len) {
   12e2a:	42a3      	cmp	r3, r4
   12e2c:	d0ef      	beq.n	12e0e <_lv_memcpy+0x212>
   12e2e:	2a00      	cmp	r2, #0
   12e30:	d1f5      	bne.n	12e1e <_lv_memcpy+0x222>
    while(len > 4) {
   12e32:	2200      	movs	r2, #0
   12e34:	e7e0      	b.n	12df8 <_lv_memcpy+0x1fc>
   12e36:	462b      	mov	r3, r5
   12e38:	e7de      	b.n	12df8 <_lv_memcpy+0x1fc>
    uint8_t * d8 = dst;
   12e3a:	4603      	mov	r3, r0
   12e3c:	e7f9      	b.n	12e32 <_lv_memcpy+0x236>
	...

00012e40 <lv_mem_realloc>:
{
   12e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e42:	b083      	sub	sp, #12
   12e44:	4604      	mov	r4, r0
   12e46:	460d      	mov	r5, r1
    if(new_size & 0x3) {
   12e48:	f011 0f03 	tst.w	r1, #3
        new_size = new_size & (~0x3);
   12e4c:	bf1c      	itt	ne
   12e4e:	f021 0503 	bicne.w	r5, r1, #3
        new_size += 4;
   12e52:	3504      	addne	r5, #4
    if(data_p != NULL) {
   12e54:	b138      	cbz	r0, 12e66 <lv_mem_realloc+0x26>
        if(e->header.s.used == 0) {
   12e56:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   12e5a:	f003 0301 	and.w	r3, r3, #1
            data_p = NULL;
   12e5e:	2b00      	cmp	r3, #0
   12e60:	bf14      	ite	ne
   12e62:	4604      	movne	r4, r0
   12e64:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   12e66:	4620      	mov	r0, r4
   12e68:	4b15      	ldr	r3, [pc, #84]	; (12ec0 <lv_mem_realloc+0x80>)
   12e6a:	4798      	blx	r3
   12e6c:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   12e6e:	4285      	cmp	r5, r0
   12e70:	d024      	beq.n	12ebc <lv_mem_realloc+0x7c>
    if(new_size < old_size) {
   12e72:	d311      	bcc.n	12e98 <lv_mem_realloc+0x58>
    new_p = lv_mem_alloc(new_size);
   12e74:	4628      	mov	r0, r5
   12e76:	4b13      	ldr	r3, [pc, #76]	; (12ec4 <lv_mem_realloc+0x84>)
   12e78:	4798      	blx	r3
    if(new_p == NULL) {
   12e7a:	4607      	mov	r7, r0
   12e7c:	b1a0      	cbz	r0, 12ea8 <lv_mem_realloc+0x68>
    if(data_p != NULL) {
   12e7e:	b184      	cbz	r4, 12ea2 <lv_mem_realloc+0x62>
        if(old_size != 0) {
   12e80:	b17e      	cbz	r6, 12ea2 <lv_mem_realloc+0x62>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
   12e82:	462a      	mov	r2, r5
   12e84:	42b5      	cmp	r5, r6
   12e86:	bf28      	it	cs
   12e88:	4632      	movcs	r2, r6
   12e8a:	4621      	mov	r1, r4
   12e8c:	4b0e      	ldr	r3, [pc, #56]	; (12ec8 <lv_mem_realloc+0x88>)
   12e8e:	4798      	blx	r3
            lv_mem_free(data_p);
   12e90:	4620      	mov	r0, r4
   12e92:	4b0e      	ldr	r3, [pc, #56]	; (12ecc <lv_mem_realloc+0x8c>)
   12e94:	4798      	blx	r3
   12e96:	e004      	b.n	12ea2 <lv_mem_realloc+0x62>
        ent_trunc(e, new_size);
   12e98:	4629      	mov	r1, r5
   12e9a:	1f20      	subs	r0, r4, #4
   12e9c:	4b0c      	ldr	r3, [pc, #48]	; (12ed0 <lv_mem_realloc+0x90>)
   12e9e:	4798      	blx	r3
        return &e->first_data;
   12ea0:	4627      	mov	r7, r4
}
   12ea2:	4638      	mov	r0, r7
   12ea4:	b003      	add	sp, #12
   12ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LV_LOG_WARN("Couldn't allocate memory");
   12ea8:	4b0a      	ldr	r3, [pc, #40]	; (12ed4 <lv_mem_realloc+0x94>)
   12eaa:	9300      	str	r3, [sp, #0]
   12eac:	4b0a      	ldr	r3, [pc, #40]	; (12ed8 <lv_mem_realloc+0x98>)
   12eae:	f240 123f 	movw	r2, #319	; 0x13f
   12eb2:	490a      	ldr	r1, [pc, #40]	; (12edc <lv_mem_realloc+0x9c>)
   12eb4:	2002      	movs	r0, #2
   12eb6:	4c0a      	ldr	r4, [pc, #40]	; (12ee0 <lv_mem_realloc+0xa0>)
   12eb8:	47a0      	blx	r4
        return NULL;
   12eba:	e7f2      	b.n	12ea2 <lv_mem_realloc+0x62>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   12ebc:	4627      	mov	r7, r4
   12ebe:	e7f0      	b.n	12ea2 <lv_mem_realloc+0x62>
   12ec0:	00012af9 	.word	0x00012af9
   12ec4:	00012985 	.word	0x00012985
   12ec8:	00012bfd 	.word	0x00012bfd
   12ecc:	00012a6d 	.word	0x00012a6d
   12ed0:	00012911 	.word	0x00012911
   12ed4:	000208a4 	.word	0x000208a4
   12ed8:	0002085c 	.word	0x0002085c
   12edc:	0002087c 	.word	0x0002087c
   12ee0:	00012805 	.word	0x00012805

00012ee4 <_lv_mem_buf_get>:
    if(size == 0) return NULL;
   12ee4:	2800      	cmp	r0, #0
   12ee6:	f000 808d 	beq.w	13004 <_lv_mem_buf_get+0x120>
   12eea:	4601      	mov	r1, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
   12eec:	2810      	cmp	r0, #16
   12eee:	d80b      	bhi.n	12f08 <_lv_mem_buf_get+0x24>
            if(mem_buf_small[i].used == 0) {
   12ef0:	4b45      	ldr	r3, [pc, #276]	; (13008 <_lv_mem_buf_get+0x124>)
   12ef2:	799b      	ldrb	r3, [r3, #6]
   12ef4:	f013 0f01 	tst.w	r3, #1
   12ef8:	d00e      	beq.n	12f18 <_lv_mem_buf_get+0x34>
   12efa:	4b43      	ldr	r3, [pc, #268]	; (13008 <_lv_mem_buf_get+0x124>)
   12efc:	7b9b      	ldrb	r3, [r3, #14]
   12efe:	f013 0f01 	tst.w	r3, #1
   12f02:	bf08      	it	eq
   12f04:	2001      	moveq	r0, #1
   12f06:	d008      	beq.n	12f1a <_lv_mem_buf_get+0x36>
{
   12f08:	b570      	push	{r4, r5, r6, lr}
   12f0a:	b082      	sub	sp, #8
   12f0c:	4a3f      	ldr	r2, [pc, #252]	; (1300c <_lv_mem_buf_get+0x128>)
            if(mem_buf_small[i].used == 0) {
   12f0e:	2300      	movs	r3, #0
   12f10:	f04f 36ff 	mov.w	r6, #4294967295
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   12f14:	4614      	mov	r4, r2
   12f16:	e019      	b.n	12f4c <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
   12f18:	2000      	movs	r0, #0
                mem_buf_small[i].used = 1;
   12f1a:	4a3b      	ldr	r2, [pc, #236]	; (13008 <_lv_mem_buf_get+0x124>)
   12f1c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
   12f20:	798b      	ldrb	r3, [r1, #6]
   12f22:	f043 0301 	orr.w	r3, r3, #1
   12f26:	718b      	strb	r3, [r1, #6]
                return mem_buf_small[i].p;
   12f28:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
   12f2c:	4770      	bx	lr
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12f2e:	4a37      	ldr	r2, [pc, #220]	; (1300c <_lv_mem_buf_get+0x128>)
   12f30:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   12f34:	798b      	ldrb	r3, [r1, #6]
   12f36:	f043 0301 	orr.w	r3, r3, #1
   12f3a:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   12f3c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
   12f40:	e023      	b.n	12f8a <_lv_mem_buf_get+0xa6>
                i_guess = i;
   12f42:	b25e      	sxtb	r6, r3
   12f44:	3301      	adds	r3, #1
   12f46:	3208      	adds	r2, #8
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12f48:	2b10      	cmp	r3, #16
   12f4a:	d013      	beq.n	12f74 <_lv_mem_buf_get+0x90>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   12f4c:	461d      	mov	r5, r3
   12f4e:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   12f52:	7980      	ldrb	r0, [r0, #6]
   12f54:	f010 0f01 	tst.w	r0, #1
   12f58:	d1f4      	bne.n	12f44 <_lv_mem_buf_get+0x60>
   12f5a:	8890      	ldrh	r0, [r2, #4]
   12f5c:	4281      	cmp	r1, r0
   12f5e:	d8f1      	bhi.n	12f44 <_lv_mem_buf_get+0x60>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   12f60:	d0e5      	beq.n	12f2e <_lv_mem_buf_get+0x4a>
            else if(i_guess < 0) {
   12f62:	2e00      	cmp	r6, #0
   12f64:	dbed      	blt.n	12f42 <_lv_mem_buf_get+0x5e>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   12f66:	eb04 05c6 	add.w	r5, r4, r6, lsl #3
   12f6a:	88ad      	ldrh	r5, [r5, #4]
   12f6c:	4285      	cmp	r5, r0
                i_guess = i;
   12f6e:	bf88      	it	hi
   12f70:	b25e      	sxtbhi	r6, r3
   12f72:	e7e7      	b.n	12f44 <_lv_mem_buf_get+0x60>
    if(i_guess >= 0) {
   12f74:	2e00      	cmp	r6, #0
   12f76:	db0a      	blt.n	12f8e <_lv_mem_buf_get+0xaa>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   12f78:	4a24      	ldr	r2, [pc, #144]	; (1300c <_lv_mem_buf_get+0x128>)
   12f7a:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   12f7e:	798b      	ldrb	r3, [r1, #6]
   12f80:	f043 0301 	orr.w	r3, r3, #1
   12f84:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   12f86:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
}
   12f8a:	b002      	add	sp, #8
   12f8c:	bd70      	pop	{r4, r5, r6, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   12f8e:	4b1f      	ldr	r3, [pc, #124]	; (1300c <_lv_mem_buf_get+0x128>)
   12f90:	799b      	ldrb	r3, [r3, #6]
   12f92:	f013 0f01 	tst.w	r3, #1
   12f96:	bf08      	it	eq
   12f98:	2400      	moveq	r4, #0
   12f9a:	d016      	beq.n	12fca <_lv_mem_buf_get+0xe6>
   12f9c:	2301      	movs	r3, #1
   12f9e:	481b      	ldr	r0, [pc, #108]	; (1300c <_lv_mem_buf_get+0x128>)
   12fa0:	461c      	mov	r4, r3
   12fa2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   12fa6:	7992      	ldrb	r2, [r2, #6]
   12fa8:	f012 0f01 	tst.w	r2, #1
   12fac:	d00d      	beq.n	12fca <_lv_mem_buf_get+0xe6>
   12fae:	3301      	adds	r3, #1
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   12fb0:	2b10      	cmp	r3, #16
   12fb2:	d1f5      	bne.n	12fa0 <_lv_mem_buf_get+0xbc>
    LV_LOG_ERROR("lv_mem_buf_get: no free buffer. Increase LV_DRAW_BUF_MAX_NUM.");
   12fb4:	4b16      	ldr	r3, [pc, #88]	; (13010 <_lv_mem_buf_get+0x12c>)
   12fb6:	9300      	str	r3, [sp, #0]
   12fb8:	4b16      	ldr	r3, [pc, #88]	; (13014 <_lv_mem_buf_get+0x130>)
   12fba:	f240 2216 	movw	r2, #534	; 0x216
   12fbe:	4916      	ldr	r1, [pc, #88]	; (13018 <_lv_mem_buf_get+0x134>)
   12fc0:	2003      	movs	r0, #3
   12fc2:	4c16      	ldr	r4, [pc, #88]	; (1301c <_lv_mem_buf_get+0x138>)
   12fc4:	47a0      	blx	r4
    return NULL;
   12fc6:	2000      	movs	r0, #0
   12fc8:	e7df      	b.n	12f8a <_lv_mem_buf_get+0xa6>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   12fca:	4d10      	ldr	r5, [pc, #64]	; (1300c <_lv_mem_buf_get+0x128>)
   12fcc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   12fd0:	799a      	ldrb	r2, [r3, #6]
   12fd2:	f042 0201 	orr.w	r2, r2, #1
   12fd6:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   12fd8:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   12fda:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   12fde:	4b10      	ldr	r3, [pc, #64]	; (13020 <_lv_mem_buf_get+0x13c>)
   12fe0:	4798      	blx	r3
   12fe2:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            if(LV_GC_ROOT(_lv_mem_buf[i]).p == NULL) {
   12fe6:	b118      	cbz	r0, 12ff0 <_lv_mem_buf_get+0x10c>
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   12fe8:	4b08      	ldr	r3, [pc, #32]	; (1300c <_lv_mem_buf_get+0x128>)
   12fea:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   12fee:	e7cc      	b.n	12f8a <_lv_mem_buf_get+0xa6>
                LV_LOG_ERROR("lv_mem_buf_get: Out of memory, can't allocate a new  buffer (increase your LV_MEM_SIZE/heap size)")
   12ff0:	4b0c      	ldr	r3, [pc, #48]	; (13024 <_lv_mem_buf_get+0x140>)
   12ff2:	9300      	str	r3, [sp, #0]
   12ff4:	4b07      	ldr	r3, [pc, #28]	; (13014 <_lv_mem_buf_get+0x130>)
   12ff6:	f44f 7204 	mov.w	r2, #528	; 0x210
   12ffa:	4907      	ldr	r1, [pc, #28]	; (13018 <_lv_mem_buf_get+0x134>)
   12ffc:	2003      	movs	r0, #3
   12ffe:	4d07      	ldr	r5, [pc, #28]	; (1301c <_lv_mem_buf_get+0x138>)
   13000:	47a8      	blx	r5
   13002:	e7f1      	b.n	12fe8 <_lv_mem_buf_get+0x104>
    if(size == 0) return NULL;
   13004:	2000      	movs	r0, #0
   13006:	4770      	bx	lr
   13008:	20000044 	.word	0x20000044
   1300c:	20006ccc 	.word	0x20006ccc
   13010:	00020950 	.word	0x00020950
   13014:	0002086c 	.word	0x0002086c
   13018:	0002087c 	.word	0x0002087c
   1301c:	00012805 	.word	0x00012805
   13020:	00012e41 	.word	0x00012e41
   13024:	000208ec 	.word	0x000208ec

00013028 <_lv_memset>:
    if(d_align) {
   13028:	f010 0303 	ands.w	r3, r0, #3
   1302c:	d013      	beq.n	13056 <_lv_memset+0x2e>
        while(d_align && len) {
   1302e:	f1c3 0304 	rsb	r3, r3, #4
   13032:	b13a      	cbz	r2, 13044 <_lv_memset+0x1c>
   13034:	4403      	add	r3, r0
            *d8 = v;
   13036:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
   1303a:	3a01      	subs	r2, #1
        while(d_align && len) {
   1303c:	4298      	cmp	r0, r3
   1303e:	d00a      	beq.n	13056 <_lv_memset+0x2e>
   13040:	2a00      	cmp	r2, #0
   13042:	d1f8      	bne.n	13036 <_lv_memset+0xe>
    while(len > 4) {
   13044:	2200      	movs	r2, #0
    while(len) {
   13046:	2a00      	cmp	r2, #0
   13048:	d048      	beq.n	130dc <_lv_memset+0xb4>
   1304a:	4402      	add	r2, r0
        *d8 = v;
   1304c:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   13050:	4290      	cmp	r0, r2
   13052:	d1fb      	bne.n	1304c <_lv_memset+0x24>
   13054:	4770      	bx	lr
{
   13056:	b430      	push	{r4, r5}
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
   13058:	eb01 2401 	add.w	r4, r1, r1, lsl #8
   1305c:	eb04 4401 	add.w	r4, r4, r1, lsl #16
   13060:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
   13064:	2a20      	cmp	r2, #32
   13066:	d920      	bls.n	130aa <_lv_memset+0x82>
   13068:	f100 0320 	add.w	r3, r0, #32
   1306c:	4615      	mov	r5, r2
        SET32(v32);
   1306e:	f843 4c20 	str.w	r4, [r3, #-32]
        SET32(v32);
   13072:	f843 4c1c 	str.w	r4, [r3, #-28]
        SET32(v32);
   13076:	f843 4c18 	str.w	r4, [r3, #-24]
        SET32(v32);
   1307a:	f843 4c14 	str.w	r4, [r3, #-20]
        SET32(v32);
   1307e:	f843 4c10 	str.w	r4, [r3, #-16]
        SET32(v32);
   13082:	f843 4c0c 	str.w	r4, [r3, #-12]
        SET32(v32);
   13086:	f843 4c08 	str.w	r4, [r3, #-8]
        SET32(v32);
   1308a:	f843 4c04 	str.w	r4, [r3, #-4]
        len -= 32;
   1308e:	3d20      	subs	r5, #32
   13090:	3320      	adds	r3, #32
    while(len > 32) {
   13092:	2d20      	cmp	r5, #32
   13094:	d8eb      	bhi.n	1306e <_lv_memset+0x46>
   13096:	f1a2 0321 	sub.w	r3, r2, #33	; 0x21
   1309a:	f023 051f 	bic.w	r5, r3, #31
   1309e:	3520      	adds	r5, #32
   130a0:	4428      	add	r0, r5
   130a2:	3a20      	subs	r2, #32
   130a4:	f023 031f 	bic.w	r3, r3, #31
   130a8:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
   130aa:	2a04      	cmp	r2, #4
   130ac:	d90f      	bls.n	130ce <_lv_memset+0xa6>
   130ae:	4605      	mov	r5, r0
   130b0:	4613      	mov	r3, r2
        SET32(v32);
   130b2:	f845 4b04 	str.w	r4, [r5], #4
        len -= 4;
   130b6:	3b04      	subs	r3, #4
    while(len > 4) {
   130b8:	2b04      	cmp	r3, #4
   130ba:	d8fa      	bhi.n	130b2 <_lv_memset+0x8a>
   130bc:	1f53      	subs	r3, r2, #5
   130be:	f023 0403 	bic.w	r4, r3, #3
   130c2:	3404      	adds	r4, #4
   130c4:	3a04      	subs	r2, #4
   130c6:	f023 0303 	bic.w	r3, r3, #3
   130ca:	1ad2      	subs	r2, r2, r3
        SET32(v32);
   130cc:	4420      	add	r0, r4
    while(len) {
   130ce:	b122      	cbz	r2, 130da <_lv_memset+0xb2>
   130d0:	4402      	add	r2, r0
        *d8 = v;
   130d2:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
   130d6:	4290      	cmp	r0, r2
   130d8:	d1fb      	bne.n	130d2 <_lv_memset+0xaa>
}
   130da:	bc30      	pop	{r4, r5}
   130dc:	4770      	bx	lr

000130de <_lv_memset_00>:
    if(d_align) {
   130de:	f010 0303 	ands.w	r3, r0, #3
   130e2:	d141      	bne.n	13168 <_lv_memset_00+0x8a>
{
   130e4:	b410      	push	{r4}
    while(len > 32) {
   130e6:	2920      	cmp	r1, #32
   130e8:	d921      	bls.n	1312e <_lv_memset_00+0x50>
   130ea:	f100 0320 	add.w	r3, r0, #32
   130ee:	460c      	mov	r4, r1
        SET32(0);
   130f0:	2200      	movs	r2, #0
   130f2:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0);
   130f6:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0);
   130fa:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0);
   130fe:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0);
   13102:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0);
   13106:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0);
   1310a:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0);
   1310e:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   13112:	3c20      	subs	r4, #32
   13114:	3320      	adds	r3, #32
    while(len > 32) {
   13116:	2c20      	cmp	r4, #32
   13118:	d8eb      	bhi.n	130f2 <_lv_memset_00+0x14>
   1311a:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   1311e:	f023 021f 	bic.w	r2, r3, #31
   13122:	3220      	adds	r2, #32
   13124:	4410      	add	r0, r2
   13126:	3920      	subs	r1, #32
   13128:	f023 031f 	bic.w	r3, r3, #31
   1312c:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   1312e:	2904      	cmp	r1, #4
   13130:	d910      	bls.n	13154 <_lv_memset_00+0x76>
   13132:	4602      	mov	r2, r0
   13134:	460b      	mov	r3, r1
        SET32(0);
   13136:	2400      	movs	r4, #0
   13138:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   1313c:	3b04      	subs	r3, #4
    while(len > 4) {
   1313e:	2b04      	cmp	r3, #4
   13140:	d8fa      	bhi.n	13138 <_lv_memset_00+0x5a>
   13142:	1f4b      	subs	r3, r1, #5
   13144:	f023 0203 	bic.w	r2, r3, #3
   13148:	3204      	adds	r2, #4
   1314a:	3904      	subs	r1, #4
   1314c:	f023 0303 	bic.w	r3, r3, #3
   13150:	1ac9      	subs	r1, r1, r3
        SET32(0);
   13152:	4410      	add	r0, r2
    while(len) {
   13154:	b129      	cbz	r1, 13162 <_lv_memset_00+0x84>
   13156:	4401      	add	r1, r0
        *d8 = 0;
   13158:	2300      	movs	r3, #0
   1315a:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   1315e:	4288      	cmp	r0, r1
   13160:	d1fb      	bne.n	1315a <_lv_memset_00+0x7c>
}
   13162:	f85d 4b04 	ldr.w	r4, [sp], #4
   13166:	4770      	bx	lr
        while(d_align && len) {
   13168:	f1c3 0304 	rsb	r3, r3, #4
   1316c:	b141      	cbz	r1, 13180 <_lv_memset_00+0xa2>
   1316e:	4403      	add	r3, r0
            *d8 = 0x00;
   13170:	2200      	movs	r2, #0
   13172:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   13176:	3901      	subs	r1, #1
        while(d_align && len) {
   13178:	4298      	cmp	r0, r3
   1317a:	d0b3      	beq.n	130e4 <_lv_memset_00+0x6>
   1317c:	2900      	cmp	r1, #0
   1317e:	d1f8      	bne.n	13172 <_lv_memset_00+0x94>
    while(len > 4) {
   13180:	2100      	movs	r1, #0
    while(len) {
   13182:	2900      	cmp	r1, #0
   13184:	d0ef      	beq.n	13166 <_lv_memset_00+0x88>
   13186:	4401      	add	r1, r0
        *d8 = 0;
   13188:	2300      	movs	r3, #0
   1318a:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   1318e:	4288      	cmp	r0, r1
   13190:	d1fb      	bne.n	1318a <_lv_memset_00+0xac>
   13192:	4770      	bx	lr

00013194 <_lv_memset_ff>:
    if(d_align) {
   13194:	f010 0303 	ands.w	r3, r0, #3
   13198:	d143      	bne.n	13222 <_lv_memset_ff+0x8e>
{
   1319a:	b410      	push	{r4}
    while(len > 32) {
   1319c:	2920      	cmp	r1, #32
   1319e:	d922      	bls.n	131e6 <_lv_memset_ff+0x52>
   131a0:	f100 0320 	add.w	r3, r0, #32
   131a4:	460c      	mov	r4, r1
        SET32(0xFFFFFFFF);
   131a6:	f04f 32ff 	mov.w	r2, #4294967295
   131aa:	f843 2c20 	str.w	r2, [r3, #-32]
        SET32(0xFFFFFFFF);
   131ae:	f843 2c1c 	str.w	r2, [r3, #-28]
        SET32(0xFFFFFFFF);
   131b2:	f843 2c18 	str.w	r2, [r3, #-24]
        SET32(0xFFFFFFFF);
   131b6:	f843 2c14 	str.w	r2, [r3, #-20]
        SET32(0xFFFFFFFF);
   131ba:	f843 2c10 	str.w	r2, [r3, #-16]
        SET32(0xFFFFFFFF);
   131be:	f843 2c0c 	str.w	r2, [r3, #-12]
        SET32(0xFFFFFFFF);
   131c2:	f843 2c08 	str.w	r2, [r3, #-8]
        SET32(0xFFFFFFFF);
   131c6:	f843 2c04 	str.w	r2, [r3, #-4]
        len -= 32;
   131ca:	3c20      	subs	r4, #32
   131cc:	3320      	adds	r3, #32
    while(len > 32) {
   131ce:	2c20      	cmp	r4, #32
   131d0:	d8eb      	bhi.n	131aa <_lv_memset_ff+0x16>
   131d2:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   131d6:	f023 021f 	bic.w	r2, r3, #31
   131da:	3220      	adds	r2, #32
   131dc:	4410      	add	r0, r2
   131de:	3920      	subs	r1, #32
   131e0:	f023 031f 	bic.w	r3, r3, #31
   131e4:	1ac9      	subs	r1, r1, r3
    while(len > 4) {
   131e6:	2904      	cmp	r1, #4
   131e8:	d911      	bls.n	1320e <_lv_memset_ff+0x7a>
   131ea:	4602      	mov	r2, r0
   131ec:	460b      	mov	r3, r1
        SET32(0xFFFFFFFF);
   131ee:	f04f 34ff 	mov.w	r4, #4294967295
   131f2:	f842 4b04 	str.w	r4, [r2], #4
        len -= 4;
   131f6:	3b04      	subs	r3, #4
    while(len > 4) {
   131f8:	2b04      	cmp	r3, #4
   131fa:	d8fa      	bhi.n	131f2 <_lv_memset_ff+0x5e>
   131fc:	1f4b      	subs	r3, r1, #5
   131fe:	f023 0203 	bic.w	r2, r3, #3
   13202:	3204      	adds	r2, #4
   13204:	3904      	subs	r1, #4
   13206:	f023 0303 	bic.w	r3, r3, #3
   1320a:	1ac9      	subs	r1, r1, r3
        SET32(0xFFFFFFFF);
   1320c:	4410      	add	r0, r2
    while(len) {
   1320e:	b129      	cbz	r1, 1321c <_lv_memset_ff+0x88>
   13210:	4401      	add	r1, r0
        *d8 = 0xFF;
   13212:	23ff      	movs	r3, #255	; 0xff
   13214:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   13218:	4288      	cmp	r0, r1
   1321a:	d1fb      	bne.n	13214 <_lv_memset_ff+0x80>
}
   1321c:	f85d 4b04 	ldr.w	r4, [sp], #4
   13220:	4770      	bx	lr
        while(d_align && len) {
   13222:	f1c3 0304 	rsb	r3, r3, #4
   13226:	b141      	cbz	r1, 1323a <_lv_memset_ff+0xa6>
   13228:	4403      	add	r3, r0
            *d8 = 0xFF;
   1322a:	22ff      	movs	r2, #255	; 0xff
   1322c:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
   13230:	3901      	subs	r1, #1
        while(d_align && len) {
   13232:	4298      	cmp	r0, r3
   13234:	d0b1      	beq.n	1319a <_lv_memset_ff+0x6>
   13236:	2900      	cmp	r1, #0
   13238:	d1f8      	bne.n	1322c <_lv_memset_ff+0x98>
    while(len > 4) {
   1323a:	2100      	movs	r1, #0
    while(len) {
   1323c:	2900      	cmp	r1, #0
   1323e:	d0ef      	beq.n	13220 <_lv_memset_ff+0x8c>
   13240:	4401      	add	r1, r0
        *d8 = 0xFF;
   13242:	23ff      	movs	r3, #255	; 0xff
   13244:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
   13248:	4288      	cmp	r0, r1
   1324a:	d1fb      	bne.n	13244 <_lv_memset_ff+0xb0>
   1324c:	4770      	bx	lr

0001324e <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
   1324e:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
   13250:	bf38      	it	cc
   13252:	5488      	strbcc	r0, [r1, r2]
   13254:	4770      	bx	lr

00013256 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void * buffer, size_t idx, size_t maxlen)
{
   13256:	4770      	bx	lr

00013258 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1325c:	b083      	sub	sp, #12
   1325e:	4607      	mov	r7, r0
   13260:	9100      	str	r1, [sp, #0]
   13262:	4693      	mov	fp, r2
   13264:	4698      	mov	r8, r3
   13266:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1326a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1326c:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   13270:	9910      	ldr	r1, [sp, #64]	; 0x40
   13272:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   13276:	9a12      	ldr	r2, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
   13278:	f012 0302 	ands.w	r3, r2, #2
   1327c:	9301      	str	r3, [sp, #4]
   1327e:	d135      	bne.n	132ec <_ntoa_format+0x94>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
   13280:	f1ba 0f00 	cmp.w	sl, #0
   13284:	d00e      	beq.n	132a4 <_ntoa_format+0x4c>
   13286:	f012 0f01 	tst.w	r2, #1
   1328a:	f000 80b6 	beq.w	133fa <_ntoa_format+0x1a2>
   1328e:	b915      	cbnz	r5, 13296 <_ntoa_format+0x3e>
   13290:	f012 0f0c 	tst.w	r2, #12
   13294:	d001      	beq.n	1329a <_ntoa_format+0x42>
            width--;
   13296:	f10a 3aff 	add.w	sl, sl, #4294967295
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1329a:	428c      	cmp	r4, r1
   1329c:	d213      	bcs.n	132c6 <_ntoa_format+0x6e>
   1329e:	2c1f      	cmp	r4, #31
   132a0:	d904      	bls.n	132ac <_ntoa_format+0x54>
   132a2:	e010      	b.n	132c6 <_ntoa_format+0x6e>
   132a4:	428c      	cmp	r4, r1
   132a6:	d20b      	bcs.n	132c0 <_ntoa_format+0x68>
   132a8:	2c1f      	cmp	r4, #31
   132aa:	d809      	bhi.n	132c0 <_ntoa_format+0x68>
   132ac:	eb09 0304 	add.w	r3, r9, r4
            buf[len++] = '0';
   132b0:	2030      	movs	r0, #48	; 0x30
   132b2:	3401      	adds	r4, #1
   132b4:	f803 0b01 	strb.w	r0, [r3], #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132b8:	42a1      	cmp	r1, r4
   132ba:	d901      	bls.n	132c0 <_ntoa_format+0x68>
   132bc:	2c20      	cmp	r4, #32
   132be:	d1f8      	bne.n	132b2 <_ntoa_format+0x5a>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132c0:	f012 0f01 	tst.w	r2, #1
   132c4:	d012      	beq.n	132ec <_ntoa_format+0x94>
   132c6:	45a2      	cmp	sl, r4
   132c8:	d910      	bls.n	132ec <_ntoa_format+0x94>
   132ca:	2c1f      	cmp	r4, #31
   132cc:	d809      	bhi.n	132e2 <_ntoa_format+0x8a>
   132ce:	eb09 0304 	add.w	r3, r9, r4
            buf[len++] = '0';
   132d2:	2030      	movs	r0, #48	; 0x30
   132d4:	3401      	adds	r4, #1
   132d6:	f803 0b01 	strb.w	r0, [r3], #1
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   132da:	4554      	cmp	r4, sl
   132dc:	d005      	beq.n	132ea <_ntoa_format+0x92>
   132de:	2c20      	cmp	r4, #32
   132e0:	d1f8      	bne.n	132d4 <_ntoa_format+0x7c>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
   132e2:	f012 0f10 	tst.w	r2, #16
   132e6:	d104      	bne.n	132f2 <_ntoa_format+0x9a>
   132e8:	e044      	b.n	13374 <_ntoa_format+0x11c>
   132ea:	46a2      	mov	sl, r4
   132ec:	f012 0f10 	tst.w	r2, #16
   132f0:	d013      	beq.n	1331a <_ntoa_format+0xc2>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
   132f2:	f412 6f80 	tst.w	r2, #1024	; 0x400
   132f6:	d104      	bne.n	13302 <_ntoa_format+0xaa>
   132f8:	b11c      	cbz	r4, 13302 <_ntoa_format+0xaa>
   132fa:	42a1      	cmp	r1, r4
   132fc:	d01b      	beq.n	13336 <_ntoa_format+0xde>
   132fe:	4554      	cmp	r4, sl
   13300:	d019      	beq.n	13336 <_ntoa_format+0xde>
            len--;
            if(len && (base == 16U)) {
                len--;
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13304:	2b10      	cmp	r3, #16
   13306:	d01e      	beq.n	13346 <_ntoa_format+0xee>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1330a:	2b02      	cmp	r3, #2
   1330c:	d027      	beq.n	1335e <_ntoa_format+0x106>
            buf[len++] = 'b';
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
   1330e:	2c1f      	cmp	r4, #31
   13310:	d830      	bhi.n	13374 <_ntoa_format+0x11c>
            buf[len++] = '0';
   13312:	2330      	movs	r3, #48	; 0x30
   13314:	f809 3004 	strb.w	r3, [r9, r4]
   13318:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
   1331a:	2c1f      	cmp	r4, #31
   1331c:	d82a      	bhi.n	13374 <_ntoa_format+0x11c>
        if(negative) {
   1331e:	bb2d      	cbnz	r5, 1336c <_ntoa_format+0x114>
            buf[len++] = '-';
        }
        else if(flags & FLAGS_PLUS) {
   13320:	f012 0f04 	tst.w	r2, #4
   13324:	d13a      	bne.n	1339c <_ntoa_format+0x144>
            buf[len++] = '+';  // ignore the space if the '+' exists
        }
        else if(flags & FLAGS_SPACE) {
   13326:	f012 0f08 	tst.w	r2, #8
   1332a:	d023      	beq.n	13374 <_ntoa_format+0x11c>
            buf[len++] = ' ';
   1332c:	2320      	movs	r3, #32
   1332e:	f809 3004 	strb.w	r3, [r9, r4]
   13332:	3401      	adds	r4, #1
   13334:	e01e      	b.n	13374 <_ntoa_format+0x11c>
            if(len && (base == 16U)) {
   13336:	1e63      	subs	r3, r4, #1
   13338:	d00f      	beq.n	1335a <_ntoa_format+0x102>
   1333a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1333c:	2910      	cmp	r1, #16
   1333e:	d001      	beq.n	13344 <_ntoa_format+0xec>
            len--;
   13340:	461c      	mov	r4, r3
   13342:	e7e1      	b.n	13308 <_ntoa_format+0xb0>
                len--;
   13344:	3c02      	subs	r4, #2
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13346:	f012 0f20 	tst.w	r2, #32
   1334a:	d15d      	bne.n	13408 <_ntoa_format+0x1b0>
   1334c:	2c1f      	cmp	r4, #31
   1334e:	d8de      	bhi.n	1330e <_ntoa_format+0xb6>
            buf[len++] = 'x';
   13350:	2378      	movs	r3, #120	; 0x78
   13352:	f809 3004 	strb.w	r3, [r9, r4]
   13356:	3401      	adds	r4, #1
   13358:	e7d9      	b.n	1330e <_ntoa_format+0xb6>
            len--;
   1335a:	461c      	mov	r4, r3
   1335c:	e7d1      	b.n	13302 <_ntoa_format+0xaa>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   1335e:	2c1f      	cmp	r4, #31
   13360:	d808      	bhi.n	13374 <_ntoa_format+0x11c>
            buf[len++] = 'b';
   13362:	2362      	movs	r3, #98	; 0x62
   13364:	f809 3004 	strb.w	r3, [r9, r4]
   13368:	3401      	adds	r4, #1
   1336a:	e7d0      	b.n	1330e <_ntoa_format+0xb6>
            buf[len++] = '-';
   1336c:	232d      	movs	r3, #45	; 0x2d
   1336e:	f809 3004 	strb.w	r3, [r9, r4]
   13372:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   13374:	f012 0f03 	tst.w	r2, #3
   13378:	d115      	bne.n	133a6 <_ntoa_format+0x14e>
        for(i = len; i < width; i++) {
   1337a:	4554      	cmp	r4, sl
   1337c:	bf28      	it	cs
   1337e:	465e      	movcs	r6, fp
   13380:	d212      	bcs.n	133a8 <_ntoa_format+0x150>
   13382:	eb0b 050a 	add.w	r5, fp, sl
   13386:	1b2d      	subs	r5, r5, r4
   13388:	465a      	mov	r2, fp
            out(' ', buffer, idx++, maxlen);
   1338a:	1c56      	adds	r6, r2, #1
   1338c:	4643      	mov	r3, r8
   1338e:	9900      	ldr	r1, [sp, #0]
   13390:	2020      	movs	r0, #32
   13392:	47b8      	blx	r7
   13394:	4632      	mov	r2, r6
        for(i = len; i < width; i++) {
   13396:	42ae      	cmp	r6, r5
   13398:	d1f7      	bne.n	1338a <_ntoa_format+0x132>
   1339a:	e005      	b.n	133a8 <_ntoa_format+0x150>
            buf[len++] = '+';  // ignore the space if the '+' exists
   1339c:	232b      	movs	r3, #43	; 0x2b
   1339e:	f809 3004 	strb.w	r3, [r9, r4]
   133a2:	3401      	adds	r4, #1
   133a4:	e7e6      	b.n	13374 <_ntoa_format+0x11c>
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
   133a6:	465e      	mov	r6, fp
    while(len) {
   133a8:	4635      	mov	r5, r6
   133aa:	b15c      	cbz	r4, 133c4 <_ntoa_format+0x16c>
   133ac:	44a1      	add	r9, r4
   133ae:	4434      	add	r4, r6
   133b0:	4632      	mov	r2, r6
        out(buf[--len], buffer, idx++, maxlen);
   133b2:	1c55      	adds	r5, r2, #1
   133b4:	4643      	mov	r3, r8
   133b6:	9900      	ldr	r1, [sp, #0]
   133b8:	f819 0d01 	ldrb.w	r0, [r9, #-1]!
   133bc:	47b8      	blx	r7
   133be:	462a      	mov	r2, r5
    while(len) {
   133c0:	42ac      	cmp	r4, r5
   133c2:	d1f6      	bne.n	133b2 <_ntoa_format+0x15a>
    if(flags & FLAGS_LEFT) {
   133c4:	9b01      	ldr	r3, [sp, #4]
   133c6:	b1a3      	cbz	r3, 133f2 <_ntoa_format+0x19a>
        while(idx - start_idx < width) {
   133c8:	eba5 030b 	sub.w	r3, r5, fp
   133cc:	4553      	cmp	r3, sl
   133ce:	d212      	bcs.n	133f6 <_ntoa_format+0x19e>
            out(' ', buffer, idx++, maxlen);
   133d0:	2620      	movs	r6, #32
   133d2:	462a      	mov	r2, r5
   133d4:	9d00      	ldr	r5, [sp, #0]
   133d6:	1c54      	adds	r4, r2, #1
   133d8:	4643      	mov	r3, r8
   133da:	4629      	mov	r1, r5
   133dc:	4630      	mov	r0, r6
   133de:	47b8      	blx	r7
   133e0:	4622      	mov	r2, r4
        while(idx - start_idx < width) {
   133e2:	eba4 030b 	sub.w	r3, r4, fp
   133e6:	4553      	cmp	r3, sl
   133e8:	d3f5      	bcc.n	133d6 <_ntoa_format+0x17e>
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
   133ea:	4620      	mov	r0, r4
   133ec:	b003      	add	sp, #12
   133ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flags & FLAGS_LEFT) {
   133f2:	462c      	mov	r4, r5
   133f4:	e7f9      	b.n	133ea <_ntoa_format+0x192>
        while(idx - start_idx < width) {
   133f6:	462c      	mov	r4, r5
    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
   133f8:	e7f7      	b.n	133ea <_ntoa_format+0x192>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   133fa:	428c      	cmp	r4, r1
   133fc:	f4bf af76 	bcs.w	132ec <_ntoa_format+0x94>
   13400:	2c1f      	cmp	r4, #31
   13402:	f67f af53 	bls.w	132ac <_ntoa_format+0x54>
   13406:	e771      	b.n	132ec <_ntoa_format+0x94>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
   13408:	2c1f      	cmp	r4, #31
   1340a:	d8b3      	bhi.n	13374 <_ntoa_format+0x11c>
            buf[len++] = 'X';
   1340c:	2358      	movs	r3, #88	; 0x58
   1340e:	f809 3004 	strb.w	r3, [r9, r4]
   13412:	3401      	adds	r4, #1
   13414:	e77b      	b.n	1330e <_ntoa_format+0xb6>
	...

00013418 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   13418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1341c:	b090      	sub	sp, #64	; 0x40
   1341e:	9d16      	ldr	r5, [sp, #88]	; 0x58
   13420:	9e18      	ldr	r6, [sp, #96]	; 0x60
   13422:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
   13426:	b92d      	cbnz	r5, 13434 <_ntoa_long+0x1c>
        flags &= ~FLAGS_HASH;
   13428:	f028 0410 	bic.w	r4, r8, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
   1342c:	f418 6f80 	tst.w	r8, #1024	; 0x400
   13430:	d12f      	bne.n	13492 <_ntoa_long+0x7a>
        flags &= ~FLAGS_HASH;
   13432:	46a0      	mov	r8, r4
   13434:	f018 0f20 	tst.w	r8, #32
   13438:	f10d 0e1f 	add.w	lr, sp, #31
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   1343c:	f04f 0700 	mov.w	r7, #0
   13440:	bf14      	ite	ne
   13442:	f04f 0c37 	movne.w	ip, #55	; 0x37
   13446:	f04f 0c57 	moveq.w	ip, #87	; 0x57
            const char digit = (char)(value % base);
   1344a:	fbb5 f4f6 	udiv	r4, r5, r6
   1344e:	fb06 5414 	mls	r4, r6, r4, r5
   13452:	b2e4      	uxtb	r4, r4
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   13454:	3701      	adds	r7, #1
   13456:	2c09      	cmp	r4, #9
   13458:	bf94      	ite	ls
   1345a:	3430      	addls	r4, #48	; 0x30
   1345c:	4464      	addhi	r4, ip
   1345e:	b2e4      	uxtb	r4, r4
   13460:	f80e 4f01 	strb.w	r4, [lr, #1]!
            value /= base;
   13464:	fbb5 f5f6 	udiv	r5, r5, r6
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13468:	b10d      	cbz	r5, 1346e <_ntoa_long+0x56>
   1346a:	2f20      	cmp	r7, #32
   1346c:	d1ed      	bne.n	1344a <_ntoa_long+0x32>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   1346e:	f8cd 8018 	str.w	r8, [sp, #24]
   13472:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   13474:	9405      	str	r4, [sp, #20]
   13476:	9c19      	ldr	r4, [sp, #100]	; 0x64
   13478:	9404      	str	r4, [sp, #16]
   1347a:	9603      	str	r6, [sp, #12]
   1347c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
   13480:	9402      	str	r4, [sp, #8]
   13482:	9701      	str	r7, [sp, #4]
   13484:	ac08      	add	r4, sp, #32
   13486:	9400      	str	r4, [sp, #0]
   13488:	4c03      	ldr	r4, [pc, #12]	; (13498 <_ntoa_long+0x80>)
   1348a:	47a0      	blx	r4
}
   1348c:	b010      	add	sp, #64	; 0x40
   1348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        flags &= ~FLAGS_HASH;
   13492:	46a0      	mov	r8, r4
    size_t len = 0U;
   13494:	2700      	movs	r7, #0
   13496:	e7ea      	b.n	1346e <_ntoa_long+0x56>
   13498:	00013259 	.word	0x00013259

0001349c <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
   1349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134a0:	b095      	sub	sp, #84	; 0x54
   134a2:	9008      	str	r0, [sp, #32]
   134a4:	9109      	str	r1, [sp, #36]	; 0x24
   134a6:	920a      	str	r2, [sp, #40]	; 0x28
   134a8:	930b      	str	r3, [sp, #44]	; 0x2c
   134aa:	e9dd 451e 	ldrd	r4, r5, [sp, #120]	; 0x78
   134ae:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
   134b2:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
   134b6:	ea54 0305 	orrs.w	r3, r4, r5
   134ba:	d107      	bne.n	134cc <_ntoa_long_long+0x30>
        flags &= ~FLAGS_HASH;
   134bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   134be:	f023 0310 	bic.w	r3, r3, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
   134c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   134c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   134c8:	d13e      	bne.n	13548 <_ntoa_long_long+0xac>
        flags &= ~FLAGS_HASH;
   134ca:	9326      	str	r3, [sp, #152]	; 0x98
   134cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   134ce:	f013 0f20 	tst.w	r3, #32
   134d2:	f10d 0a2f 	add.w	sl, sp, #47	; 0x2f
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   134d6:	f04f 0600 	mov.w	r6, #0
            const char digit = (char)(value % base);
   134da:	4f1d      	ldr	r7, [pc, #116]	; (13550 <_ntoa_long_long+0xb4>)
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   134dc:	bf14      	ite	ne
   134de:	f04f 0b37 	movne.w	fp, #55	; 0x37
   134e2:	f04f 0b57 	moveq.w	fp, #87	; 0x57
            const char digit = (char)(value % base);
   134e6:	464a      	mov	r2, r9
   134e8:	4643      	mov	r3, r8
   134ea:	4620      	mov	r0, r4
   134ec:	4629      	mov	r1, r5
   134ee:	47b8      	blx	r7
   134f0:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
   134f2:	3601      	adds	r6, #1
   134f4:	2a09      	cmp	r2, #9
   134f6:	bf94      	ite	ls
   134f8:	3230      	addls	r2, #48	; 0x30
   134fa:	445a      	addhi	r2, fp
   134fc:	b2d2      	uxtb	r2, r2
   134fe:	f80a 2f01 	strb.w	r2, [sl, #1]!
            value /= base;
   13502:	464a      	mov	r2, r9
   13504:	4643      	mov	r3, r8
   13506:	4620      	mov	r0, r4
   13508:	4629      	mov	r1, r5
   1350a:	47b8      	blx	r7
   1350c:	4604      	mov	r4, r0
   1350e:	460d      	mov	r5, r1
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
   13510:	ea54 0305 	orrs.w	r3, r4, r5
   13514:	d001      	beq.n	1351a <_ntoa_long_long+0x7e>
   13516:	2e20      	cmp	r6, #32
   13518:	d1e5      	bne.n	134e6 <_ntoa_long_long+0x4a>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
   1351a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1351c:	9306      	str	r3, [sp, #24]
   1351e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13520:	9305      	str	r3, [sp, #20]
   13522:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13524:	9304      	str	r3, [sp, #16]
   13526:	f8cd 900c 	str.w	r9, [sp, #12]
   1352a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   1352e:	9302      	str	r3, [sp, #8]
   13530:	9601      	str	r6, [sp, #4]
   13532:	ab0c      	add	r3, sp, #48	; 0x30
   13534:	9300      	str	r3, [sp, #0]
   13536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1353a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1353c:	9808      	ldr	r0, [sp, #32]
   1353e:	4c05      	ldr	r4, [pc, #20]	; (13554 <_ntoa_long_long+0xb8>)
   13540:	47a0      	blx	r4
}
   13542:	b015      	add	sp, #84	; 0x54
   13544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        flags &= ~FLAGS_HASH;
   13548:	9326      	str	r3, [sp, #152]	; 0x98
    size_t len = 0U;
   1354a:	2600      	movs	r6, #0
   1354c:	e7e5      	b.n	1351a <_ntoa_long_long+0x7e>
   1354e:	bf00      	nop
   13550:	0001abb5 	.word	0x0001abb5
   13554:	00013259 	.word	0x00013259

00013558 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
   13558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1355c:	b091      	sub	sp, #68	; 0x44
   1355e:	920a      	str	r2, [sp, #40]	; 0x28
   13560:	461c      	mov	r4, r3
   13562:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
   13564:	910b      	str	r1, [sp, #44]	; 0x2c
        // use null output function
        out = _out_null;
   13566:	4b93      	ldr	r3, [pc, #588]	; (137b4 <_vsnprintf+0x25c>)
   13568:	2900      	cmp	r1, #0
   1356a:	bf14      	ite	ne
   1356c:	4681      	movne	r9, r0
   1356e:	4699      	moveq	r9, r3
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
   13570:	f04f 0b00 	mov.w	fp, #0
    while(*format) {
   13574:	7820      	ldrb	r0, [r4, #0]
   13576:	2800      	cmp	r0, #0
   13578:	f000 826a 	beq.w	13a50 <_vsnprintf+0x4f8>
        if(*format != '%') {
   1357c:	2825      	cmp	r0, #37	; 0x25
   1357e:	d008      	beq.n	13592 <_vsnprintf+0x3a>
            out(*format, buffer, idx++, maxlen);
   13580:	f10b 0501 	add.w	r5, fp, #1
   13584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13586:	465a      	mov	r2, fp
   13588:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1358a:	47c8      	blx	r9
            format++;
   1358c:	3401      	adds	r4, #1
            out(*format, buffer, idx++, maxlen);
   1358e:	46ab      	mov	fp, r5
            continue;
   13590:	e7f0      	b.n	13574 <_vsnprintf+0x1c>
            format++;
   13592:	1c62      	adds	r2, r4, #1
        flags = 0U;
   13594:	2100      	movs	r1, #0
   13596:	e001      	b.n	1359c <_vsnprintf+0x44>
                    flags |= FLAGS_ZEROPAD;
   13598:	f041 0101 	orr.w	r1, r1, #1
   1359c:	4614      	mov	r4, r2
   1359e:	3201      	adds	r2, #1
            switch(*format) {
   135a0:	7823      	ldrb	r3, [r4, #0]
   135a2:	3b20      	subs	r3, #32
   135a4:	2b10      	cmp	r3, #16
   135a6:	d831      	bhi.n	1360c <_vsnprintf+0xb4>
   135a8:	a001      	add	r0, pc, #4	; (adr r0, 135b0 <_vsnprintf+0x58>)
   135aa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   135ae:	bf00      	nop
   135b0:	00013601 	.word	0x00013601
   135b4:	0001360d 	.word	0x0001360d
   135b8:	0001360d 	.word	0x0001360d
   135bc:	00013607 	.word	0x00013607
   135c0:	0001360d 	.word	0x0001360d
   135c4:	0001360d 	.word	0x0001360d
   135c8:	0001360d 	.word	0x0001360d
   135cc:	0001360d 	.word	0x0001360d
   135d0:	0001360d 	.word	0x0001360d
   135d4:	0001360d 	.word	0x0001360d
   135d8:	0001360d 	.word	0x0001360d
   135dc:	000135fb 	.word	0x000135fb
   135e0:	0001360d 	.word	0x0001360d
   135e4:	000135f5 	.word	0x000135f5
   135e8:	0001360d 	.word	0x0001360d
   135ec:	0001360d 	.word	0x0001360d
   135f0:	00013599 	.word	0x00013599
                    flags |= FLAGS_LEFT;
   135f4:	f041 0102 	orr.w	r1, r1, #2
                    break;
   135f8:	e7d0      	b.n	1359c <_vsnprintf+0x44>
                    flags |= FLAGS_PLUS;
   135fa:	f041 0104 	orr.w	r1, r1, #4
                    break;
   135fe:	e7cd      	b.n	1359c <_vsnprintf+0x44>
                    flags |= FLAGS_SPACE;
   13600:	f041 0108 	orr.w	r1, r1, #8
                    break;
   13604:	e7ca      	b.n	1359c <_vsnprintf+0x44>
                    flags |= FLAGS_HASH;
   13606:	f041 0110 	orr.w	r1, r1, #16
                    break;
   1360a:	e7c7      	b.n	1359c <_vsnprintf+0x44>
        if(_is_digit(*format)) {
   1360c:	7823      	ldrb	r3, [r4, #0]
    return (ch >= '0') && (ch <= '9');
   1360e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        if(_is_digit(*format)) {
   13612:	b2d2      	uxtb	r2, r2
   13614:	2a09      	cmp	r2, #9
   13616:	d916      	bls.n	13646 <_vsnprintf+0xee>
        else if(*format == '*') {
   13618:	2b2a      	cmp	r3, #42	; 0x2a
   1361a:	d022      	beq.n	13662 <_vsnprintf+0x10a>
        width = 0U;
   1361c:	2500      	movs	r5, #0
        if(*format == '.') {
   1361e:	7823      	ldrb	r3, [r4, #0]
   13620:	2b2e      	cmp	r3, #46	; 0x2e
   13622:	d028      	beq.n	13676 <_vsnprintf+0x11e>
        precision = 0U;
   13624:	2700      	movs	r7, #0
        switch(*format) {
   13626:	7823      	ldrb	r3, [r4, #0]
   13628:	3b68      	subs	r3, #104	; 0x68
   1362a:	2b12      	cmp	r3, #18
   1362c:	d84f      	bhi.n	136ce <_vsnprintf+0x176>
   1362e:	e8df f003 	tbb	[pc, r3]
   13632:	4eaa      	.short	0x4eaa
   13634:	4e454eb8 	.word	0x4e454eb8
   13638:	4e4e4e4e 	.word	0x4e4e4e4e
   1363c:	4eb44e4e 	.word	0x4eb44e4e
   13640:	4e4e4e4e 	.word	0x4e4e4e4e
   13644:	bc          	.byte	0xbc
   13645:	00          	.byte	0x00
   13646:	2500      	movs	r5, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13648:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1364c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   13650:	3d30      	subs	r5, #48	; 0x30
    while(_is_digit(**str)) {
   13652:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    return (ch >= '0') && (ch <= '9');
   13656:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
   1365a:	b2d2      	uxtb	r2, r2
   1365c:	2a09      	cmp	r2, #9
   1365e:	d9f3      	bls.n	13648 <_vsnprintf+0xf0>
   13660:	e7dd      	b.n	1361e <_vsnprintf+0xc6>
            const int w = va_arg(va, int);
   13662:	1d33      	adds	r3, r6, #4
   13664:	6835      	ldr	r5, [r6, #0]
            if(w < 0) {
   13666:	2d00      	cmp	r5, #0
                flags |= FLAGS_LEFT;    // reverse padding
   13668:	bfbc      	itt	lt
   1366a:	f041 0102 	orrlt.w	r1, r1, #2
                width = (unsigned int) - w;
   1366e:	426d      	neglt	r5, r5
            format++;
   13670:	3401      	adds	r4, #1
            const int w = va_arg(va, int);
   13672:	461e      	mov	r6, r3
   13674:	e7d3      	b.n	1361e <_vsnprintf+0xc6>
            flags |= FLAGS_PRECISION;
   13676:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
            format++;
   1367a:	1c60      	adds	r0, r4, #1
            if(_is_digit(*format)) {
   1367c:	7863      	ldrb	r3, [r4, #1]
    return (ch >= '0') && (ch <= '9');
   1367e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            if(_is_digit(*format)) {
   13682:	b2d2      	uxtb	r2, r2
   13684:	2a09      	cmp	r2, #9
   13686:	d904      	bls.n	13692 <_vsnprintf+0x13a>
            else if(*format == '*') {
   13688:	2b2a      	cmp	r3, #42	; 0x2a
   1368a:	d011      	beq.n	136b0 <_vsnprintf+0x158>
            format++;
   1368c:	4604      	mov	r4, r0
        precision = 0U;
   1368e:	2700      	movs	r7, #0
   13690:	e7c9      	b.n	13626 <_vsnprintf+0xce>
   13692:	2700      	movs	r7, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
   13694:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   13698:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1369c:	3f30      	subs	r7, #48	; 0x30
    while(_is_digit(**str)) {
   1369e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    return (ch >= '0') && (ch <= '9');
   136a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
   136a6:	b2d2      	uxtb	r2, r2
   136a8:	2a09      	cmp	r2, #9
   136aa:	d9f3      	bls.n	13694 <_vsnprintf+0x13c>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
   136ac:	4604      	mov	r4, r0
   136ae:	e7ba      	b.n	13626 <_vsnprintf+0xce>
                precision = prec > 0 ? (unsigned int)prec : 0U;
   136b0:	6837      	ldr	r7, [r6, #0]
   136b2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
                format++;
   136b6:	3402      	adds	r4, #2
                const int prec = (int)va_arg(va, int);
   136b8:	3604      	adds	r6, #4
   136ba:	e7b4      	b.n	13626 <_vsnprintf+0xce>
                if(*format == 'l') {
   136bc:	7863      	ldrb	r3, [r4, #1]
   136be:	2b6c      	cmp	r3, #108	; 0x6c
                flags |= FLAGS_LONG;
   136c0:	bf19      	ittee	ne
   136c2:	f441 7180 	orrne.w	r1, r1, #256	; 0x100
                format++;
   136c6:	3401      	addne	r4, #1
                    flags |= FLAGS_LONG_LONG;
   136c8:	f441 7140 	orreq.w	r1, r1, #768	; 0x300
                    format++;
   136cc:	3402      	addeq	r4, #2
        switch(*format) {
   136ce:	7820      	ldrb	r0, [r4, #0]
   136d0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   136d4:	2b53      	cmp	r3, #83	; 0x53
   136d6:	f200 81b2 	bhi.w	13a3e <_vsnprintf+0x4e6>
   136da:	e8df f013 	tbh	[pc, r3, lsl #1]
   136de:	01a6      	.short	0x01a6
   136e0:	01b001b0 	.word	0x01b001b0
   136e4:	01b001b0 	.word	0x01b001b0
   136e8:	01b001b0 	.word	0x01b001b0
   136ec:	01b001b0 	.word	0x01b001b0
   136f0:	01b001b0 	.word	0x01b001b0
   136f4:	01b001b0 	.word	0x01b001b0
   136f8:	01b001b0 	.word	0x01b001b0
   136fc:	01b001b0 	.word	0x01b001b0
   13700:	01b001b0 	.word	0x01b001b0
   13704:	01b001b0 	.word	0x01b001b0
   13708:	01b001b0 	.word	0x01b001b0
   1370c:	01b001b0 	.word	0x01b001b0
   13710:	01b001b0 	.word	0x01b001b0
   13714:	01b001b0 	.word	0x01b001b0
   13718:	01b001b0 	.word	0x01b001b0
   1371c:	01b001b0 	.word	0x01b001b0
   13720:	01b001b0 	.word	0x01b001b0
   13724:	01b001b0 	.word	0x01b001b0
   13728:	01b001b0 	.word	0x01b001b0
   1372c:	01b001b0 	.word	0x01b001b0
   13730:	01b001b0 	.word	0x01b001b0
   13734:	01b001b0 	.word	0x01b001b0
   13738:	01b001b0 	.word	0x01b001b0
   1373c:	01b001b0 	.word	0x01b001b0
   13740:	01b001b0 	.word	0x01b001b0
   13744:	01b0006d 	.word	0x01b0006d
   13748:	01b001b0 	.word	0x01b001b0
   1374c:	01b001b0 	.word	0x01b001b0
   13750:	01b001b0 	.word	0x01b001b0
   13754:	01b001b0 	.word	0x01b001b0
   13758:	0114006d 	.word	0x0114006d
   1375c:	01b0006d 	.word	0x01b0006d
   13760:	01b001b0 	.word	0x01b001b0
   13764:	006d01b0 	.word	0x006d01b0
   13768:	01b001b0 	.word	0x01b001b0
   1376c:	01b001b0 	.word	0x01b001b0
   13770:	006d01b0 	.word	0x006d01b0
   13774:	01b0018f 	.word	0x01b0018f
   13778:	013701b0 	.word	0x013701b0
   1377c:	006d01b0 	.word	0x006d01b0
   13780:	01b001b0 	.word	0x01b001b0
   13784:	006d      	.short	0x006d
                if(*format == 'h') {
   13786:	7863      	ldrb	r3, [r4, #1]
   13788:	2b68      	cmp	r3, #104	; 0x68
                flags |= FLAGS_SHORT;
   1378a:	bf19      	ittee	ne
   1378c:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
                format++;
   13790:	3401      	addne	r4, #1
                    flags |= FLAGS_CHAR;
   13792:	f041 01c0 	orreq.w	r1, r1, #192	; 0xc0
                    format++;
   13796:	3402      	addeq	r4, #2
   13798:	e799      	b.n	136ce <_vsnprintf+0x176>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   1379a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
   1379e:	3401      	adds	r4, #1
                break;
   137a0:	e795      	b.n	136ce <_vsnprintf+0x176>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   137a2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
                format++;
   137a6:	3401      	adds	r4, #1
                break;
   137a8:	e791      	b.n	136ce <_vsnprintf+0x176>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
   137aa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                format++;
   137ae:	3401      	adds	r4, #1
                break;
   137b0:	e78d      	b.n	136ce <_vsnprintf+0x176>
   137b2:	bf00      	nop
   137b4:	00013257 	.word	0x00013257
                    if(*format == 'x' || *format == 'X') {
   137b8:	2878      	cmp	r0, #120	; 0x78
   137ba:	f000 81d5 	beq.w	13b68 <_vsnprintf+0x610>
   137be:	2858      	cmp	r0, #88	; 0x58
   137c0:	f000 8154 	beq.w	13a6c <_vsnprintf+0x514>
                    else if(*format == 'o') {
   137c4:	286f      	cmp	r0, #111	; 0x6f
   137c6:	f000 81d1 	beq.w	13b6c <_vsnprintf+0x614>
                    else if(*format == 'b') {
   137ca:	2862      	cmp	r0, #98	; 0x62
   137cc:	f000 81d0 	beq.w	13b70 <_vsnprintf+0x618>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
   137d0:	f021 0310 	bic.w	r3, r1, #16
                    if((*format != 'i') && (*format != 'd')) {
   137d4:	2869      	cmp	r0, #105	; 0x69
   137d6:	d126      	bne.n	13826 <_vsnprintf+0x2ce>
                    if(flags & FLAGS_PRECISION) {
   137d8:	f411 6f80 	tst.w	r1, #1024	; 0x400
   137dc:	f040 81c0 	bne.w	13b60 <_vsnprintf+0x608>
                        base = 10U;
   137e0:	220a      	movs	r2, #10
                        if(flags & FLAGS_LONG_LONG) {
   137e2:	f413 7f00 	tst.w	r3, #512	; 0x200
   137e6:	d124      	bne.n	13832 <_vsnprintf+0x2da>
                        else if(flags & FLAGS_LONG) {
   137e8:	f413 7f80 	tst.w	r3, #256	; 0x100
   137ec:	d144      	bne.n	13878 <_vsnprintf+0x320>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
   137ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   137f2:	d157      	bne.n	138a4 <_vsnprintf+0x34c>
                                                                                                                                       int) : va_arg(va, int);
   137f4:	f013 0f80 	tst.w	r3, #128	; 0x80
   137f8:	bf14      	ite	ne
   137fa:	f9b6 1000 	ldrshne.w	r1, [r6]
   137fe:	6831      	ldreq	r1, [r6, #0]
   13800:	3604      	adds	r6, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
   13802:	9305      	str	r3, [sp, #20]
   13804:	9504      	str	r5, [sp, #16]
   13806:	9703      	str	r7, [sp, #12]
   13808:	9202      	str	r2, [sp, #8]
   1380a:	0fcb      	lsrs	r3, r1, #31
   1380c:	9301      	str	r3, [sp, #4]
   1380e:	2900      	cmp	r1, #0
   13810:	bfb8      	it	lt
   13812:	4249      	neglt	r1, r1
   13814:	9100      	str	r1, [sp, #0]
   13816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13818:	465a      	mov	r2, fp
   1381a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1381c:	4648      	mov	r0, r9
   1381e:	4dac      	ldr	r5, [pc, #688]	; (13ad0 <_vsnprintf+0x578>)
   13820:	47a8      	blx	r5
   13822:	4683      	mov	fp, r0
   13824:	e152      	b.n	13acc <_vsnprintf+0x574>
                    if((*format != 'i') && (*format != 'd')) {
   13826:	2864      	cmp	r0, #100	; 0x64
   13828:	f000 8156 	beq.w	13ad8 <_vsnprintf+0x580>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
   1382c:	4619      	mov	r1, r3
                        base = 10U;
   1382e:	220a      	movs	r2, #10
   13830:	e11f      	b.n	13a72 <_vsnprintf+0x51a>
                            const long long value = va_arg(va, long long);
   13832:	1df1      	adds	r1, r6, #7
   13834:	f021 0107 	bic.w	r1, r1, #7
   13838:	f101 0608 	add.w	r6, r1, #8
   1383c:	6808      	ldr	r0, [r1, #0]
   1383e:	6849      	ldr	r1, [r1, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
   13840:	9308      	str	r3, [sp, #32]
   13842:	9507      	str	r5, [sp, #28]
   13844:	9706      	str	r7, [sp, #24]
   13846:	9204      	str	r2, [sp, #16]
   13848:	2300      	movs	r3, #0
   1384a:	9305      	str	r3, [sp, #20]
   1384c:	0fcb      	lsrs	r3, r1, #31
   1384e:	9302      	str	r3, [sp, #8]
   13850:	4602      	mov	r2, r0
   13852:	460b      	mov	r3, r1
   13854:	2800      	cmp	r0, #0
   13856:	f173 0100 	sbcs.w	r1, r3, #0
   1385a:	db09      	blt.n	13870 <_vsnprintf+0x318>
   1385c:	e9cd 2300 	strd	r2, r3, [sp]
   13860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13862:	465a      	mov	r2, fp
   13864:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13866:	4648      	mov	r0, r9
   13868:	4d9a      	ldr	r5, [pc, #616]	; (13ad4 <_vsnprintf+0x57c>)
   1386a:	47a8      	blx	r5
   1386c:	4683      	mov	fp, r0
   1386e:	e12d      	b.n	13acc <_vsnprintf+0x574>
   13870:	4242      	negs	r2, r0
   13872:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13876:	e7f1      	b.n	1385c <_vsnprintf+0x304>
                            const long value = va_arg(va, long);
   13878:	f106 0804 	add.w	r8, r6, #4
   1387c:	6831      	ldr	r1, [r6, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
   1387e:	9305      	str	r3, [sp, #20]
   13880:	9504      	str	r5, [sp, #16]
   13882:	9703      	str	r7, [sp, #12]
   13884:	9202      	str	r2, [sp, #8]
   13886:	0fcb      	lsrs	r3, r1, #31
   13888:	9301      	str	r3, [sp, #4]
   1388a:	2900      	cmp	r1, #0
   1388c:	bfb8      	it	lt
   1388e:	4249      	neglt	r1, r1
   13890:	9100      	str	r1, [sp, #0]
   13892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13894:	465a      	mov	r2, fp
   13896:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13898:	4648      	mov	r0, r9
   1389a:	4d8d      	ldr	r5, [pc, #564]	; (13ad0 <_vsnprintf+0x578>)
   1389c:	47a8      	blx	r5
   1389e:	4683      	mov	fp, r0
                            const long value = va_arg(va, long);
   138a0:	4646      	mov	r6, r8
   138a2:	e113      	b.n	13acc <_vsnprintf+0x574>
   138a4:	7831      	ldrb	r1, [r6, #0]
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
   138a6:	3604      	adds	r6, #4
   138a8:	e7ab      	b.n	13802 <_vsnprintf+0x2aa>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
   138aa:	1df1      	adds	r1, r6, #7
   138ac:	f021 0107 	bic.w	r1, r1, #7
   138b0:	f101 0608 	add.w	r6, r1, #8
   138b4:	9308      	str	r3, [sp, #32]
   138b6:	9507      	str	r5, [sp, #28]
   138b8:	9706      	str	r7, [sp, #24]
   138ba:	2300      	movs	r3, #0
   138bc:	9204      	str	r2, [sp, #16]
   138be:	9305      	str	r3, [sp, #20]
   138c0:	9302      	str	r3, [sp, #8]
   138c2:	e9d1 2300 	ldrd	r2, r3, [r1]
   138c6:	e9cd 2300 	strd	r2, r3, [sp]
   138ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138cc:	465a      	mov	r2, fp
   138ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   138d0:	4648      	mov	r0, r9
   138d2:	4d80      	ldr	r5, [pc, #512]	; (13ad4 <_vsnprintf+0x57c>)
   138d4:	47a8      	blx	r5
   138d6:	4683      	mov	fp, r0
   138d8:	e0f8      	b.n	13acc <_vsnprintf+0x574>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
   138da:	f106 0804 	add.w	r8, r6, #4
   138de:	9305      	str	r3, [sp, #20]
   138e0:	9504      	str	r5, [sp, #16]
   138e2:	9703      	str	r7, [sp, #12]
   138e4:	9202      	str	r2, [sp, #8]
   138e6:	2300      	movs	r3, #0
   138e8:	9301      	str	r3, [sp, #4]
   138ea:	6833      	ldr	r3, [r6, #0]
   138ec:	9300      	str	r3, [sp, #0]
   138ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138f0:	465a      	mov	r2, fp
   138f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   138f4:	4648      	mov	r0, r9
   138f6:	4d76      	ldr	r5, [pc, #472]	; (13ad0 <_vsnprintf+0x578>)
   138f8:	47a8      	blx	r5
   138fa:	4683      	mov	fp, r0
   138fc:	4646      	mov	r6, r8
   138fe:	e0e5      	b.n	13acc <_vsnprintf+0x574>
   13900:	7831      	ldrb	r1, [r6, #0]
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
   13902:	3604      	adds	r6, #4
   13904:	e0d4      	b.n	13ab0 <_vsnprintf+0x558>
                    if(!(flags & FLAGS_LEFT)) {
   13906:	f011 0f02 	tst.w	r1, #2
   1390a:	f040 80ea 	bne.w	13ae2 <_vsnprintf+0x58a>
                        while(l++ < width) {
   1390e:	2d01      	cmp	r5, #1
   13910:	f240 8103 	bls.w	13b1a <_vsnprintf+0x5c2>
   13914:	f10b 37ff 	add.w	r7, fp, #4294967295
   13918:	442f      	add	r7, r5
                            out(' ', buffer, idx++, maxlen);
   1391a:	f04f 0820 	mov.w	r8, #32
   1391e:	465a      	mov	r2, fp
   13920:	1c55      	adds	r5, r2, #1
   13922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13924:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13926:	4640      	mov	r0, r8
   13928:	47c8      	blx	r9
   1392a:	462a      	mov	r2, r5
                        while(l++ < width) {
   1392c:	42bd      	cmp	r5, r7
   1392e:	d1f7      	bne.n	13920 <_vsnprintf+0x3c8>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   13930:	1d37      	adds	r7, r6, #4
   13932:	f105 0b01 	add.w	fp, r5, #1
   13936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13938:	462a      	mov	r2, r5
   1393a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1393c:	7830      	ldrb	r0, [r6, #0]
   1393e:	47c8      	blx	r9
   13940:	463e      	mov	r6, r7
                    format++;
   13942:	3401      	adds	r4, #1
                    break;
   13944:	e616      	b.n	13574 <_vsnprintf+0x1c>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   13946:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13948:	46bb      	mov	fp, r7
   1394a:	e7fa      	b.n	13942 <_vsnprintf+0x3ea>
                    const char * p = va_arg(va, char *);
   1394c:	1d33      	adds	r3, r6, #4
   1394e:	930e      	str	r3, [sp, #56]	; 0x38
   13950:	6833      	ldr	r3, [r6, #0]
   13952:	461a      	mov	r2, r3
   13954:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
   13956:	2f00      	cmp	r7, #0
   13958:	bf14      	ite	ne
   1395a:	463b      	movne	r3, r7
   1395c:	f04f 33ff 	moveq.w	r3, #4294967295
    for(s = str; *s && maxsize--; ++s);
   13960:	7810      	ldrb	r0, [r2, #0]
   13962:	2800      	cmp	r0, #0
   13964:	f000 80db 	beq.w	13b1e <_vsnprintf+0x5c6>
   13968:	f812 6f01 	ldrb.w	r6, [r2, #1]!
   1396c:	b10e      	cbz	r6, 13972 <_vsnprintf+0x41a>
   1396e:	3b01      	subs	r3, #1
   13970:	d1fa      	bne.n	13968 <_vsnprintf+0x410>
    return (unsigned int)(s - str);
   13972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13974:	1ad3      	subs	r3, r2, r3
   13976:	930d      	str	r3, [sp, #52]	; 0x34
                    if(flags & FLAGS_PRECISION) {
   13978:	f411 6a80 	ands.w	sl, r1, #1024	; 0x400
   1397c:	d003      	beq.n	13986 <_vsnprintf+0x42e>
                        l = (l < precision ? l : precision);
   1397e:	42bb      	cmp	r3, r7
   13980:	bf28      	it	cs
   13982:	463b      	movcs	r3, r7
   13984:	930d      	str	r3, [sp, #52]	; 0x34
                    if(!(flags & FLAGS_LEFT)) {
   13986:	f011 0302 	ands.w	r3, r1, #2
   1398a:	930f      	str	r3, [sp, #60]	; 0x3c
   1398c:	f040 80ce 	bne.w	13b2c <_vsnprintf+0x5d4>
                        while(l++ < width) {
   13990:	990d      	ldr	r1, [sp, #52]	; 0x34
   13992:	460b      	mov	r3, r1
   13994:	3301      	adds	r3, #1
   13996:	428d      	cmp	r5, r1
   13998:	f240 80c3 	bls.w	13b22 <_vsnprintf+0x5ca>
   1399c:	eb05 080b 	add.w	r8, r5, fp
   139a0:	eba8 0801 	sub.w	r8, r8, r1
                            out(' ', buffer, idx++, maxlen);
   139a4:	465a      	mov	r2, fp
   139a6:	1c56      	adds	r6, r2, #1
   139a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   139ac:	2020      	movs	r0, #32
   139ae:	47c8      	blx	r9
   139b0:	4632      	mov	r2, r6
                        while(l++ < width) {
   139b2:	4546      	cmp	r6, r8
   139b4:	d1f7      	bne.n	139a6 <_vsnprintf+0x44e>
   139b6:	1c6b      	adds	r3, r5, #1
   139b8:	930d      	str	r3, [sp, #52]	; 0x34
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   139ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   139bc:	7818      	ldrb	r0, [r3, #0]
   139be:	2800      	cmp	r0, #0
   139c0:	f000 80b2 	beq.w	13b28 <_vsnprintf+0x5d0>
   139c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   139c8:	4632      	mov	r2, r6
   139ca:	4656      	mov	r6, sl
   139cc:	e009      	b.n	139e2 <_vsnprintf+0x48a>
   139ce:	461f      	mov	r7, r3
                        out(*(p++), buffer, idx++, maxlen);
   139d0:	f102 0b01 	add.w	fp, r2, #1
   139d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   139d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   139d8:	47c8      	blx	r9
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   139da:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   139de:	b130      	cbz	r0, 139ee <_vsnprintf+0x496>
                        out(*(p++), buffer, idx++, maxlen);
   139e0:	465a      	mov	r2, fp
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   139e2:	2e00      	cmp	r6, #0
   139e4:	d0f4      	beq.n	139d0 <_vsnprintf+0x478>
   139e6:	1e7b      	subs	r3, r7, #1
   139e8:	2f00      	cmp	r7, #0
   139ea:	d1f0      	bne.n	139ce <_vsnprintf+0x476>
   139ec:	4693      	mov	fp, r2
                    if(flags & FLAGS_LEFT) {
   139ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   139f0:	2b00      	cmp	r3, #0
   139f2:	f040 809f 	bne.w	13b34 <_vsnprintf+0x5dc>
                    format++;
   139f6:	3401      	adds	r4, #1
                    const char * p = va_arg(va, char *);
   139f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
                    break;
   139fa:	e5bb      	b.n	13574 <_vsnprintf+0x1c>
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
   139fc:	1d35      	adds	r5, r6, #4
                    flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
   139fe:	f041 0121 	orr.w	r1, r1, #33	; 0x21
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
   13a02:	9105      	str	r1, [sp, #20]
   13a04:	2308      	movs	r3, #8
   13a06:	9304      	str	r3, [sp, #16]
   13a08:	9703      	str	r7, [sp, #12]
   13a0a:	2310      	movs	r3, #16
   13a0c:	9302      	str	r3, [sp, #8]
   13a0e:	2300      	movs	r3, #0
   13a10:	9301      	str	r3, [sp, #4]
   13a12:	6833      	ldr	r3, [r6, #0]
   13a14:	9300      	str	r3, [sp, #0]
   13a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a18:	465a      	mov	r2, fp
   13a1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13a1c:	4648      	mov	r0, r9
   13a1e:	4e2c      	ldr	r6, [pc, #176]	; (13ad0 <_vsnprintf+0x578>)
   13a20:	47b0      	blx	r6
   13a22:	4683      	mov	fp, r0
                    format++;
   13a24:	3401      	adds	r4, #1
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void *)), false, 16U, precision, width,
   13a26:	462e      	mov	r6, r5
                    break;
   13a28:	e5a4      	b.n	13574 <_vsnprintf+0x1c>
                out('%', buffer, idx++, maxlen);
   13a2a:	f10b 0501 	add.w	r5, fp, #1
   13a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a30:	465a      	mov	r2, fp
   13a32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13a34:	2025      	movs	r0, #37	; 0x25
   13a36:	47c8      	blx	r9
                format++;
   13a38:	3401      	adds	r4, #1
                out('%', buffer, idx++, maxlen);
   13a3a:	46ab      	mov	fp, r5
                break;
   13a3c:	e59a      	b.n	13574 <_vsnprintf+0x1c>

            default :
                out(*format, buffer, idx++, maxlen);
   13a3e:	f10b 0501 	add.w	r5, fp, #1
   13a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a44:	465a      	mov	r2, fp
   13a46:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13a48:	47c8      	blx	r9
                format++;
   13a4a:	3401      	adds	r4, #1
                out(*format, buffer, idx++, maxlen);
   13a4c:	46ab      	mov	fp, r5
                break;
   13a4e:	e591      	b.n	13574 <_vsnprintf+0x1c>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
   13a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13a52:	4593      	cmp	fp, r2
   13a54:	bf2c      	ite	cs
   13a56:	f102 32ff 	addcs.w	r2, r2, #4294967295
   13a5a:	465a      	movcc	r2, fp
   13a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13a60:	2000      	movs	r0, #0
   13a62:	47c8      	blx	r9

    // return written chars without terminating \0
    return (int)idx;
}
   13a64:	4658      	mov	r0, fp
   13a66:	b011      	add	sp, #68	; 0x44
   13a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        flags |= FLAGS_UPPERCASE;
   13a6c:	f041 0120 	orr.w	r1, r1, #32
                        base = 16U;
   13a70:	2210      	movs	r2, #16
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
   13a72:	f021 030c 	bic.w	r3, r1, #12
                    if(flags & FLAGS_PRECISION) {
   13a76:	f411 6f80 	tst.w	r1, #1024	; 0x400
   13a7a:	d007      	beq.n	13a8c <_vsnprintf+0x534>
                        flags &= ~FLAGS_ZEROPAD;
   13a7c:	f021 030d 	bic.w	r3, r1, #13
                    if((*format == 'i') || (*format == 'd')) {
   13a80:	2869      	cmp	r0, #105	; 0x69
   13a82:	f43f aeae 	beq.w	137e2 <_vsnprintf+0x28a>
   13a86:	2864      	cmp	r0, #100	; 0x64
   13a88:	f43f aeab 	beq.w	137e2 <_vsnprintf+0x28a>
                        if(flags & FLAGS_LONG_LONG) {
   13a8c:	f413 7f00 	tst.w	r3, #512	; 0x200
   13a90:	f47f af0b 	bne.w	138aa <_vsnprintf+0x352>
                        else if(flags & FLAGS_LONG) {
   13a94:	f413 7f80 	tst.w	r3, #256	; 0x100
   13a98:	f47f af1f 	bne.w	138da <_vsnprintf+0x382>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
   13a9c:	f013 0f40 	tst.w	r3, #64	; 0x40
   13aa0:	f47f af2e 	bne.w	13900 <_vsnprintf+0x3a8>
   13aa4:	f013 0f80 	tst.w	r3, #128	; 0x80
   13aa8:	bf14      	ite	ne
   13aaa:	8831      	ldrhne	r1, [r6, #0]
   13aac:	6831      	ldreq	r1, [r6, #0]
   13aae:	3604      	adds	r6, #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
   13ab0:	9305      	str	r3, [sp, #20]
   13ab2:	9504      	str	r5, [sp, #16]
   13ab4:	9703      	str	r7, [sp, #12]
   13ab6:	9202      	str	r2, [sp, #8]
   13ab8:	2300      	movs	r3, #0
   13aba:	9301      	str	r3, [sp, #4]
   13abc:	9100      	str	r1, [sp, #0]
   13abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ac0:	465a      	mov	r2, fp
   13ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13ac4:	4648      	mov	r0, r9
   13ac6:	4d02      	ldr	r5, [pc, #8]	; (13ad0 <_vsnprintf+0x578>)
   13ac8:	47a8      	blx	r5
   13aca:	4683      	mov	fp, r0
                    format++;
   13acc:	3401      	adds	r4, #1
                    break;
   13ace:	e551      	b.n	13574 <_vsnprintf+0x1c>
   13ad0:	00013419 	.word	0x00013419
   13ad4:	0001349d 	.word	0x0001349d
                    if(flags & FLAGS_PRECISION) {
   13ad8:	f411 6f80 	tst.w	r1, #1024	; 0x400
   13adc:	d13c      	bne.n	13b58 <_vsnprintf+0x600>
                        base = 10U;
   13ade:	220a      	movs	r2, #10
   13ae0:	e67f      	b.n	137e2 <_vsnprintf+0x28a>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   13ae2:	1d33      	adds	r3, r6, #4
   13ae4:	930c      	str	r3, [sp, #48]	; 0x30
   13ae6:	f10b 0701 	add.w	r7, fp, #1
   13aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13aec:	465a      	mov	r2, fp
   13aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13af0:	7830      	ldrb	r0, [r6, #0]
   13af2:	47c8      	blx	r9
                        while(l++ < width) {
   13af4:	2d01      	cmp	r5, #1
   13af6:	f67f af26 	bls.w	13946 <_vsnprintf+0x3ee>
   13afa:	eb05 0a0b 	add.w	sl, r5, fp
                            out(' ', buffer, idx++, maxlen);
   13afe:	f04f 0820 	mov.w	r8, #32
   13b02:	463a      	mov	r2, r7
   13b04:	1c56      	adds	r6, r2, #1
   13b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b0a:	4640      	mov	r0, r8
   13b0c:	47c8      	blx	r9
   13b0e:	4632      	mov	r2, r6
                        while(l++ < width) {
   13b10:	45b2      	cmp	sl, r6
   13b12:	d1f7      	bne.n	13b04 <_vsnprintf+0x5ac>
   13b14:	44ab      	add	fp, r5
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
   13b16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   13b18:	e713      	b.n	13942 <_vsnprintf+0x3ea>
                        while(l++ < width) {
   13b1a:	465d      	mov	r5, fp
   13b1c:	e708      	b.n	13930 <_vsnprintf+0x3d8>
    for(s = str; *s && maxsize--; ++s);
   13b1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13b20:	e727      	b.n	13972 <_vsnprintf+0x41a>
                        while(l++ < width) {
   13b22:	930d      	str	r3, [sp, #52]	; 0x34
   13b24:	465e      	mov	r6, fp
   13b26:	e748      	b.n	139ba <_vsnprintf+0x462>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
   13b28:	46b3      	mov	fp, r6
   13b2a:	e764      	b.n	139f6 <_vsnprintf+0x49e>
   13b2c:	465e      	mov	r6, fp
   13b2e:	2800      	cmp	r0, #0
   13b30:	f47f af48 	bne.w	139c4 <_vsnprintf+0x46c>
                        while(l++ < width) {
   13b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13b36:	4295      	cmp	r5, r2
   13b38:	f67f af5d 	bls.w	139f6 <_vsnprintf+0x49e>
   13b3c:	445d      	add	r5, fp
   13b3e:	1aad      	subs	r5, r5, r2
   13b40:	465a      	mov	r2, fp
                            out(' ', buffer, idx++, maxlen);
   13b42:	2620      	movs	r6, #32
   13b44:	f102 0b01 	add.w	fp, r2, #1
   13b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b4c:	4630      	mov	r0, r6
   13b4e:	47c8      	blx	r9
   13b50:	465a      	mov	r2, fp
                        while(l++ < width) {
   13b52:	45ab      	cmp	fp, r5
   13b54:	d1f6      	bne.n	13b44 <_vsnprintf+0x5ec>
   13b56:	e74e      	b.n	139f6 <_vsnprintf+0x49e>
                        flags &= ~FLAGS_ZEROPAD;
   13b58:	f021 0311 	bic.w	r3, r1, #17
                        base = 10U;
   13b5c:	220a      	movs	r2, #10
   13b5e:	e640      	b.n	137e2 <_vsnprintf+0x28a>
                        flags &= ~FLAGS_ZEROPAD;
   13b60:	f021 0311 	bic.w	r3, r1, #17
                        base = 10U;
   13b64:	220a      	movs	r2, #10
   13b66:	e63c      	b.n	137e2 <_vsnprintf+0x28a>
                        base = 16U;
   13b68:	2210      	movs	r2, #16
   13b6a:	e782      	b.n	13a72 <_vsnprintf+0x51a>
                        base =  8U;
   13b6c:	2208      	movs	r2, #8
   13b6e:	e780      	b.n	13a72 <_vsnprintf+0x51a>
                        base =  2U;
   13b70:	2202      	movs	r2, #2
   13b72:	e77e      	b.n	13a72 <_vsnprintf+0x51a>

00013b74 <lv_vsnprintf>:
    va_end(va);
    return ret;
}

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
   13b74:	b510      	push	{r4, lr}
   13b76:	b082      	sub	sp, #8
    return _vsnprintf(_out_buffer, buffer, count, format, va);
   13b78:	9300      	str	r3, [sp, #0]
   13b7a:	4613      	mov	r3, r2
   13b7c:	460a      	mov	r2, r1
   13b7e:	4601      	mov	r1, r0
   13b80:	4802      	ldr	r0, [pc, #8]	; (13b8c <lv_vsnprintf+0x18>)
   13b82:	4c03      	ldr	r4, [pc, #12]	; (13b90 <lv_vsnprintf+0x1c>)
   13b84:	47a0      	blx	r4
}
   13b86:	b002      	add	sp, #8
   13b88:	bd10      	pop	{r4, pc}
   13b8a:	bf00      	nop
   13b8c:	0001324f 	.word	0x0001324f
   13b90:	00013559 	.word	0x00013559

00013b94 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   13b94:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   13b96:	2118      	movs	r1, #24
   13b98:	4804      	ldr	r0, [pc, #16]	; (13bac <_lv_task_core_init+0x18>)
   13b9a:	4b05      	ldr	r3, [pc, #20]	; (13bb0 <_lv_task_core_init+0x1c>)
   13b9c:	4798      	blx	r3

    task_list_changed = false;
   13b9e:	4b05      	ldr	r3, [pc, #20]	; (13bb4 <_lv_task_core_init+0x20>)
   13ba0:	2200      	movs	r2, #0
   13ba2:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   13ba4:	2201      	movs	r2, #1
   13ba6:	705a      	strb	r2, [r3, #1]
   13ba8:	bd08      	pop	{r3, pc}
   13baa:	bf00      	nop
   13bac:	20006c9c 	.word	0x20006c9c
   13bb0:	000124a1 	.word	0x000124a1
   13bb4:	20006bb8 	.word	0x20006bb8

00013bb8 <lv_task_create_basic>:
{
   13bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13bba:	b083      	sub	sp, #12
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   13bbc:	4837      	ldr	r0, [pc, #220]	; (13c9c <lv_task_create_basic+0xe4>)
   13bbe:	4b38      	ldr	r3, [pc, #224]	; (13ca0 <lv_task_create_basic+0xe8>)
   13bc0:	4798      	blx	r3
    if(NULL == tmp) {
   13bc2:	b310      	cbz	r0, 13c0a <lv_task_create_basic+0x52>
   13bc4:	4604      	mov	r4, r0
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   13bc6:	4e35      	ldr	r6, [pc, #212]	; (13c9c <lv_task_create_basic+0xe4>)
   13bc8:	4d36      	ldr	r5, [pc, #216]	; (13ca4 <lv_task_create_basic+0xec>)
            if(tmp->prio <= DEF_PRIO) {
   13bca:	7d23      	ldrb	r3, [r4, #20]
   13bcc:	f003 0307 	and.w	r3, r3, #7
   13bd0:	2b03      	cmp	r3, #3
   13bd2:	dd30      	ble.n	13c36 <lv_task_create_basic+0x7e>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   13bd4:	4621      	mov	r1, r4
   13bd6:	4630      	mov	r0, r6
   13bd8:	47a8      	blx	r5
        } while(tmp != NULL);
   13bda:	4604      	mov	r4, r0
   13bdc:	2800      	cmp	r0, #0
   13bde:	d1f4      	bne.n	13bca <lv_task_create_basic+0x12>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   13be0:	482e      	ldr	r0, [pc, #184]	; (13c9c <lv_task_create_basic+0xe4>)
   13be2:	4b31      	ldr	r3, [pc, #196]	; (13ca8 <lv_task_create_basic+0xf0>)
   13be4:	4798      	blx	r3
   13be6:	4605      	mov	r5, r0
            LV_ASSERT_MEM(new_task);
   13be8:	4b30      	ldr	r3, [pc, #192]	; (13cac <lv_task_create_basic+0xf4>)
   13bea:	4798      	blx	r3
   13bec:	2800      	cmp	r0, #0
   13bee:	d152      	bne.n	13c96 <lv_task_create_basic+0xde>
   13bf0:	4b2f      	ldr	r3, [pc, #188]	; (13cb0 <lv_task_create_basic+0xf8>)
   13bf2:	9300      	str	r3, [sp, #0]
   13bf4:	22e5      	movs	r2, #229	; 0xe5
   13bf6:	492f      	ldr	r1, [pc, #188]	; (13cb4 <lv_task_create_basic+0xfc>)
   13bf8:	2003      	movs	r0, #3
   13bfa:	4c2f      	ldr	r4, [pc, #188]	; (13cb8 <lv_task_create_basic+0x100>)
   13bfc:	47a0      	blx	r4
   13bfe:	462a      	mov	r2, r5
   13c00:	2300      	movs	r3, #0
   13c02:	482e      	ldr	r0, [pc, #184]	; (13cbc <lv_task_create_basic+0x104>)
   13c04:	492e      	ldr	r1, [pc, #184]	; (13cc0 <lv_task_create_basic+0x108>)
   13c06:	4788      	blx	r1
   13c08:	e7fe      	b.n	13c08 <lv_task_create_basic+0x50>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   13c0a:	4824      	ldr	r0, [pc, #144]	; (13c9c <lv_task_create_basic+0xe4>)
   13c0c:	4b2d      	ldr	r3, [pc, #180]	; (13cc4 <lv_task_create_basic+0x10c>)
   13c0e:	4798      	blx	r3
   13c10:	4605      	mov	r5, r0
        LV_ASSERT_MEM(new_task);
   13c12:	4b26      	ldr	r3, [pc, #152]	; (13cac <lv_task_create_basic+0xf4>)
   13c14:	4798      	blx	r3
   13c16:	b960      	cbnz	r0, 13c32 <lv_task_create_basic+0x7a>
   13c18:	4b25      	ldr	r3, [pc, #148]	; (13cb0 <lv_task_create_basic+0xf8>)
   13c1a:	9300      	str	r3, [sp, #0]
   13c1c:	22d3      	movs	r2, #211	; 0xd3
   13c1e:	4925      	ldr	r1, [pc, #148]	; (13cb4 <lv_task_create_basic+0xfc>)
   13c20:	2003      	movs	r0, #3
   13c22:	4c25      	ldr	r4, [pc, #148]	; (13cb8 <lv_task_create_basic+0x100>)
   13c24:	47a0      	blx	r4
   13c26:	462a      	mov	r2, r5
   13c28:	2300      	movs	r3, #0
   13c2a:	4824      	ldr	r0, [pc, #144]	; (13cbc <lv_task_create_basic+0x104>)
   13c2c:	4924      	ldr	r1, [pc, #144]	; (13cc0 <lv_task_create_basic+0x108>)
   13c2e:	4788      	blx	r1
   13c30:	e7fe      	b.n	13c30 <lv_task_create_basic+0x78>
        if(new_task == NULL) return NULL;
   13c32:	b95d      	cbnz	r5, 13c4c <lv_task_create_basic+0x94>
   13c34:	e01f      	b.n	13c76 <lv_task_create_basic+0xbe>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   13c36:	4621      	mov	r1, r4
   13c38:	4818      	ldr	r0, [pc, #96]	; (13c9c <lv_task_create_basic+0xe4>)
   13c3a:	4b23      	ldr	r3, [pc, #140]	; (13cc8 <lv_task_create_basic+0x110>)
   13c3c:	4798      	blx	r3
   13c3e:	4605      	mov	r5, r0
                LV_ASSERT_MEM(new_task);
   13c40:	4b1a      	ldr	r3, [pc, #104]	; (13cac <lv_task_create_basic+0xf4>)
   13c42:	4798      	blx	r3
   13c44:	b1d0      	cbz	r0, 13c7c <lv_task_create_basic+0xc4>
                if(new_task == NULL) return NULL;
   13c46:	b1b5      	cbz	r5, 13c76 <lv_task_create_basic+0xbe>
        if(tmp == NULL) {
   13c48:	2c00      	cmp	r4, #0
   13c4a:	d0c9      	beq.n	13be0 <lv_task_create_basic+0x28>
    task_list_changed = true;
   13c4c:	4c1f      	ldr	r4, [pc, #124]	; (13ccc <lv_task_create_basic+0x114>)
   13c4e:	2601      	movs	r6, #1
   13c50:	7026      	strb	r6, [r4, #0]
    new_task->period  = DEF_PERIOD;
   13c52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   13c56:	602b      	str	r3, [r5, #0]
    new_task->task_cb = NULL;
   13c58:	2700      	movs	r7, #0
   13c5a:	60af      	str	r7, [r5, #8]
    new_task->prio    = DEF_PRIO;
   13c5c:	7d2b      	ldrb	r3, [r5, #20]
   13c5e:	2203      	movs	r2, #3
   13c60:	f362 0302 	bfi	r3, r2, #0, #3
   13c64:	752b      	strb	r3, [r5, #20]
    new_task->repeat_count = -1;
   13c66:	f04f 33ff 	mov.w	r3, #4294967295
   13c6a:	612b      	str	r3, [r5, #16]
    new_task->last_run = lv_tick_get();
   13c6c:	4b18      	ldr	r3, [pc, #96]	; (13cd0 <lv_task_create_basic+0x118>)
   13c6e:	4798      	blx	r3
   13c70:	6068      	str	r0, [r5, #4]
    new_task->user_data = NULL;
   13c72:	60ef      	str	r7, [r5, #12]
    task_created = true;
   13c74:	70a6      	strb	r6, [r4, #2]
}
   13c76:	4628      	mov	r0, r5
   13c78:	b003      	add	sp, #12
   13c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LV_ASSERT_MEM(new_task);
   13c7c:	4b0c      	ldr	r3, [pc, #48]	; (13cb0 <lv_task_create_basic+0xf8>)
   13c7e:	9300      	str	r3, [sp, #0]
   13c80:	22db      	movs	r2, #219	; 0xdb
   13c82:	490c      	ldr	r1, [pc, #48]	; (13cb4 <lv_task_create_basic+0xfc>)
   13c84:	2003      	movs	r0, #3
   13c86:	4c0c      	ldr	r4, [pc, #48]	; (13cb8 <lv_task_create_basic+0x100>)
   13c88:	47a0      	blx	r4
   13c8a:	462a      	mov	r2, r5
   13c8c:	2300      	movs	r3, #0
   13c8e:	480b      	ldr	r0, [pc, #44]	; (13cbc <lv_task_create_basic+0x104>)
   13c90:	490b      	ldr	r1, [pc, #44]	; (13cc0 <lv_task_create_basic+0x108>)
   13c92:	4788      	blx	r1
   13c94:	e7fe      	b.n	13c94 <lv_task_create_basic+0xdc>
            if(new_task == NULL) return NULL;
   13c96:	2d00      	cmp	r5, #0
   13c98:	d1d8      	bne.n	13c4c <lv_task_create_basic+0x94>
   13c9a:	e7ec      	b.n	13c76 <lv_task_create_basic+0xbe>
   13c9c:	20006c9c 	.word	0x20006c9c
   13ca0:	00012551 	.word	0x00012551
   13ca4:	00012565 	.word	0x00012565
   13ca8:	00012505 	.word	0x00012505
   13cac:	0000298d 	.word	0x0000298d
   13cb0:	00020990 	.word	0x00020990
   13cb4:	000209b8 	.word	0x000209b8
   13cb8:	00012805 	.word	0x00012805
   13cbc:	0001b4bc 	.word	0x0001b4bc
   13cc0:	00002995 	.word	0x00002995
   13cc4:	000124b9 	.word	0x000124b9
   13cc8:	000125bd 	.word	0x000125bd
   13ccc:	20006bb8 	.word	0x20006bb8
   13cd0:	00011601 	.word	0x00011601

00013cd4 <lv_task_del>:
{
   13cd4:	b510      	push	{r4, lr}
   13cd6:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   13cd8:	4601      	mov	r1, r0
   13cda:	4809      	ldr	r0, [pc, #36]	; (13d00 <lv_task_del+0x2c>)
   13cdc:	4b09      	ldr	r3, [pc, #36]	; (13d04 <lv_task_del+0x30>)
   13cde:	4798      	blx	r3
    task_list_changed = true;
   13ce0:	2201      	movs	r2, #1
   13ce2:	4b09      	ldr	r3, [pc, #36]	; (13d08 <lv_task_del+0x34>)
   13ce4:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
   13ce6:	4620      	mov	r0, r4
   13ce8:	4b08      	ldr	r3, [pc, #32]	; (13d0c <lv_task_del+0x38>)
   13cea:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   13cec:	4b08      	ldr	r3, [pc, #32]	; (13d10 <lv_task_del+0x3c>)
   13cee:	681b      	ldr	r3, [r3, #0]
   13cf0:	429c      	cmp	r4, r3
   13cf2:	d000      	beq.n	13cf6 <lv_task_del+0x22>
   13cf4:	bd10      	pop	{r4, pc}
   13cf6:	2201      	movs	r2, #1
   13cf8:	4b03      	ldr	r3, [pc, #12]	; (13d08 <lv_task_del+0x34>)
   13cfa:	70da      	strb	r2, [r3, #3]
}
   13cfc:	e7fa      	b.n	13cf4 <lv_task_del+0x20>
   13cfe:	bf00      	nop
   13d00:	20006c9c 	.word	0x20006c9c
   13d04:	0001263d 	.word	0x0001263d
   13d08:	20006bb8 	.word	0x20006bb8
   13d0c:	00012a6d 	.word	0x00012a6d
   13d10:	20006d68 	.word	0x20006d68

00013d14 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   13d14:	b510      	push	{r4, lr}
   13d16:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   13d18:	6840      	ldr	r0, [r0, #4]
   13d1a:	4b12      	ldr	r3, [pc, #72]	; (13d64 <lv_task_exec+0x50>)
   13d1c:	4798      	blx	r3
    if(elp >= task->period)
   13d1e:	6823      	ldr	r3, [r4, #0]
   13d20:	4298      	cmp	r0, r3
   13d22:	d201      	bcs.n	13d28 <lv_task_exec+0x14>
    bool exec = false;
   13d24:	2000      	movs	r0, #0
   13d26:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
   13d28:	4b0f      	ldr	r3, [pc, #60]	; (13d68 <lv_task_exec+0x54>)
   13d2a:	4798      	blx	r3
   13d2c:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   13d2e:	4b0f      	ldr	r3, [pc, #60]	; (13d6c <lv_task_exec+0x58>)
   13d30:	2200      	movs	r2, #0
   13d32:	70da      	strb	r2, [r3, #3]
        task_created   = false;
   13d34:	709a      	strb	r2, [r3, #2]
        if(task->task_cb) task->task_cb(task);
   13d36:	68a3      	ldr	r3, [r4, #8]
   13d38:	b12b      	cbz	r3, 13d46 <lv_task_exec+0x32>
   13d3a:	4620      	mov	r0, r4
   13d3c:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   13d3e:	4b0b      	ldr	r3, [pc, #44]	; (13d6c <lv_task_exec+0x58>)
   13d40:	78d8      	ldrb	r0, [r3, #3]
   13d42:	b100      	cbz	r0, 13d46 <lv_task_exec+0x32>
}
   13d44:	bd10      	pop	{r4, pc}
            if(task->repeat_count > 0) {
   13d46:	6923      	ldr	r3, [r4, #16]
   13d48:	2b00      	cmp	r3, #0
                task->repeat_count--;
   13d4a:	bfc4      	itt	gt
   13d4c:	f103 33ff 	addgt.w	r3, r3, #4294967295
   13d50:	6123      	strgt	r3, [r4, #16]
            if(task->repeat_count == 0) {
   13d52:	6923      	ldr	r3, [r4, #16]
   13d54:	b10b      	cbz	r3, 13d5a <lv_task_exec+0x46>
        exec = true;
   13d56:	2001      	movs	r0, #1
   13d58:	e7f4      	b.n	13d44 <lv_task_exec+0x30>
                lv_task_del(task);
   13d5a:	4620      	mov	r0, r4
   13d5c:	4b04      	ldr	r3, [pc, #16]	; (13d70 <lv_task_exec+0x5c>)
   13d5e:	4798      	blx	r3
        exec = true;
   13d60:	2001      	movs	r0, #1
   13d62:	bd10      	pop	{r4, pc}
   13d64:	00011619 	.word	0x00011619
   13d68:	00011601 	.word	0x00011601
   13d6c:	20006bb8 	.word	0x20006bb8
   13d70:	00013cd5 	.word	0x00013cd5

00013d74 <lv_task_handler>:
{
   13d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(already_running) return 1;
   13d78:	4b58      	ldr	r3, [pc, #352]	; (13edc <lv_task_handler+0x168>)
   13d7a:	791b      	ldrb	r3, [r3, #4]
   13d7c:	2b00      	cmp	r3, #0
   13d7e:	f040 80a9 	bne.w	13ed4 <lv_task_handler+0x160>
    already_running = true;
   13d82:	4b56      	ldr	r3, [pc, #344]	; (13edc <lv_task_handler+0x168>)
   13d84:	2201      	movs	r2, #1
   13d86:	711a      	strb	r2, [r3, #4]
    if(lv_task_run == false) {
   13d88:	785b      	ldrb	r3, [r3, #1]
   13d8a:	b92b      	cbnz	r3, 13d98 <lv_task_handler+0x24>
        already_running = false; /*Release mutex*/
   13d8c:	2200      	movs	r2, #0
   13d8e:	4b53      	ldr	r3, [pc, #332]	; (13edc <lv_task_handler+0x168>)
   13d90:	711a      	strb	r2, [r3, #4]
        return 1;
   13d92:	2001      	movs	r0, #1
   13d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    handler_start = lv_tick_get();
   13d98:	4b51      	ldr	r3, [pc, #324]	; (13ee0 <lv_task_handler+0x16c>)
   13d9a:	4798      	blx	r3
   13d9c:	4b4f      	ldr	r3, [pc, #316]	; (13edc <lv_task_handler+0x168>)
   13d9e:	6098      	str	r0, [r3, #8]
    lv_task_t * task_interrupter = NULL;
   13da0:	2600      	movs	r6, #0
        task_deleted             = false;
   13da2:	461d      	mov	r5, r3
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   13da4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 13ef4 <lv_task_handler+0x180>
   13da8:	4c4e      	ldr	r4, [pc, #312]	; (13ee4 <lv_task_handler+0x170>)
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   13daa:	f8df 9150 	ldr.w	r9, [pc, #336]	; 13efc <lv_task_handler+0x188>
   13dae:	e06d      	b.n	13e8c <lv_task_handler+0x118>
                LV_GC_ROOT(_lv_task_act) = next;
   13db0:	6027      	str	r7, [r4, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   13db2:	2600      	movs	r6, #0
                continue; /*Load the next task*/
   13db4:	e009      	b.n	13dca <lv_task_handler+0x56>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   13db6:	4b4c      	ldr	r3, [pc, #304]	; (13ee8 <lv_task_handler+0x174>)
   13db8:	4798      	blx	r3
            if(task_created || task_deleted) {
   13dba:	78ab      	ldrb	r3, [r5, #2]
   13dbc:	bb33      	cbnz	r3, 13e0c <lv_task_handler+0x98>
   13dbe:	78eb      	ldrb	r3, [r5, #3]
   13dc0:	bb23      	cbnz	r3, 13e0c <lv_task_handler+0x98>
            if(task_list_changed) {
   13dc2:	782b      	ldrb	r3, [r5, #0]
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	d15f      	bne.n	13e88 <lv_task_handler+0x114>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   13dc8:	6027      	str	r7, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   13dca:	6821      	ldr	r1, [r4, #0]
   13dcc:	b1f1      	cbz	r1, 13e0c <lv_task_handler+0x98>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   13dce:	4640      	mov	r0, r8
   13dd0:	47c8      	blx	r9
   13dd2:	4607      	mov	r7, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   13dd4:	6820      	ldr	r0, [r4, #0]
   13dd6:	7d03      	ldrb	r3, [r0, #20]
   13dd8:	f013 0307 	ands.w	r3, r3, #7
   13ddc:	d016      	beq.n	13e0c <lv_task_handler+0x98>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   13dde:	4286      	cmp	r6, r0
   13de0:	d0e6      	beq.n	13db0 <lv_task_handler+0x3c>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   13de2:	2b05      	cmp	r3, #5
   13de4:	d0e7      	beq.n	13db6 <lv_task_handler+0x42>
            else if(task_interrupter) {
   13de6:	2e00      	cmp	r6, #0
   13de8:	d042      	beq.n	13e70 <lv_task_handler+0xfc>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   13dea:	7d02      	ldrb	r2, [r0, #20]
   13dec:	f002 0207 	and.w	r2, r2, #7
   13df0:	7d33      	ldrb	r3, [r6, #20]
   13df2:	f003 0307 	and.w	r3, r3, #7
   13df6:	429a      	cmp	r2, r3
   13df8:	dddf      	ble.n	13dba <lv_task_handler+0x46>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   13dfa:	4b3b      	ldr	r3, [pc, #236]	; (13ee8 <lv_task_handler+0x174>)
   13dfc:	4798      	blx	r3
   13dfe:	2800      	cmp	r0, #0
   13e00:	d0db      	beq.n	13dba <lv_task_handler+0x46>
                        if(!task_created && !task_deleted) {
   13e02:	78ab      	ldrb	r3, [r5, #2]
   13e04:	b913      	cbnz	r3, 13e0c <lv_task_handler+0x98>
   13e06:	78eb      	ldrb	r3, [r5, #3]
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d02f      	beq.n	13e6c <lv_task_handler+0xf8>
    busy_time += lv_tick_elaps(handler_start);
   13e0c:	4c33      	ldr	r4, [pc, #204]	; (13edc <lv_task_handler+0x168>)
   13e0e:	68a0      	ldr	r0, [r4, #8]
   13e10:	4d36      	ldr	r5, [pc, #216]	; (13eec <lv_task_handler+0x178>)
   13e12:	47a8      	blx	r5
   13e14:	68e3      	ldr	r3, [r4, #12]
   13e16:	4403      	add	r3, r0
   13e18:	60e3      	str	r3, [r4, #12]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   13e1a:	6920      	ldr	r0, [r4, #16]
   13e1c:	47a8      	blx	r5
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   13e1e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   13e22:	d315      	bcc.n	13e50 <lv_task_handler+0xdc>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   13e24:	68e2      	ldr	r2, [r4, #12]
   13e26:	2364      	movs	r3, #100	; 0x64
   13e28:	fb03 f302 	mul.w	r3, r3, r2
   13e2c:	4a30      	ldr	r2, [pc, #192]	; (13ef0 <lv_task_handler+0x17c>)
   13e2e:	fba2 2303 	umull	r2, r3, r2, r3
   13e32:	f3c3 1347 	ubfx	r3, r3, #5, #8
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   13e36:	2b64      	cmp	r3, #100	; 0x64
   13e38:	bf9a      	itte	ls
   13e3a:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   13e3e:	b2db      	uxtbls	r3, r3
   13e40:	2300      	movhi	r3, #0
   13e42:	4c26      	ldr	r4, [pc, #152]	; (13edc <lv_task_handler+0x168>)
   13e44:	7523      	strb	r3, [r4, #20]
        busy_time         = 0;
   13e46:	2300      	movs	r3, #0
   13e48:	60e3      	str	r3, [r4, #12]
        idle_period_start = lv_tick_get();
   13e4a:	4b25      	ldr	r3, [pc, #148]	; (13ee0 <lv_task_handler+0x16c>)
   13e4c:	4798      	blx	r3
   13e4e:	6120      	str	r0, [r4, #16]
    time_till_next = LV_NO_TASK_READY;
   13e50:	f04f 32ff 	mov.w	r2, #4294967295
   13e54:	4b21      	ldr	r3, [pc, #132]	; (13edc <lv_task_handler+0x168>)
   13e56:	619a      	str	r2, [r3, #24]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   13e58:	4826      	ldr	r0, [pc, #152]	; (13ef4 <lv_task_handler+0x180>)
   13e5a:	4b27      	ldr	r3, [pc, #156]	; (13ef8 <lv_task_handler+0x184>)
   13e5c:	4798      	blx	r3
    while(next) {
   13e5e:	4604      	mov	r4, r0
   13e60:	2800      	cmp	r0, #0
   13e62:	d031      	beq.n	13ec8 <lv_task_handler+0x154>
    uint32_t elp = lv_tick_elaps(task->last_run);
   13e64:	4f21      	ldr	r7, [pc, #132]	; (13eec <lv_task_handler+0x178>)
            if(delay < time_till_next)
   13e66:	4e1d      	ldr	r6, [pc, #116]	; (13edc <lv_task_handler+0x168>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   13e68:	4d22      	ldr	r5, [pc, #136]	; (13ef4 <lv_task_handler+0x180>)
   13e6a:	e01d      	b.n	13ea8 <lv_task_handler+0x134>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
   13e6c:	6826      	ldr	r6, [r4, #0]
                            break;
   13e6e:	e00d      	b.n	13e8c <lv_task_handler+0x118>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   13e70:	4b1d      	ldr	r3, [pc, #116]	; (13ee8 <lv_task_handler+0x174>)
   13e72:	4798      	blx	r3
   13e74:	2800      	cmp	r0, #0
   13e76:	d0a0      	beq.n	13dba <lv_task_handler+0x46>
                    if(!task_created && !task_deleted) {
   13e78:	78ab      	ldrb	r3, [r5, #2]
   13e7a:	2b00      	cmp	r3, #0
   13e7c:	d1c6      	bne.n	13e0c <lv_task_handler+0x98>
   13e7e:	78eb      	ldrb	r3, [r5, #3]
   13e80:	2b00      	cmp	r3, #0
   13e82:	d1c3      	bne.n	13e0c <lv_task_handler+0x98>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   13e84:	6826      	ldr	r6, [r4, #0]
                        break;
   13e86:	e001      	b.n	13e8c <lv_task_handler+0x118>
                task_list_changed = false;
   13e88:	2600      	movs	r6, #0
   13e8a:	702e      	strb	r6, [r5, #0]
        task_deleted             = false;
   13e8c:	2300      	movs	r3, #0
   13e8e:	70eb      	strb	r3, [r5, #3]
        task_created             = false;
   13e90:	70ab      	strb	r3, [r5, #2]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   13e92:	4640      	mov	r0, r8
   13e94:	4b18      	ldr	r3, [pc, #96]	; (13ef8 <lv_task_handler+0x184>)
   13e96:	4798      	blx	r3
   13e98:	6020      	str	r0, [r4, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
   13e9a:	e796      	b.n	13dca <lv_task_handler+0x56>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   13e9c:	4621      	mov	r1, r4
   13e9e:	4628      	mov	r0, r5
   13ea0:	4b16      	ldr	r3, [pc, #88]	; (13efc <lv_task_handler+0x188>)
   13ea2:	4798      	blx	r3
    while(next) {
   13ea4:	4604      	mov	r4, r0
   13ea6:	b178      	cbz	r0, 13ec8 <lv_task_handler+0x154>
        if(next->prio != LV_TASK_PRIO_OFF) {
   13ea8:	7d23      	ldrb	r3, [r4, #20]
   13eaa:	f013 0f07 	tst.w	r3, #7
   13eae:	d0f5      	beq.n	13e9c <lv_task_handler+0x128>
    uint32_t elp = lv_tick_elaps(task->last_run);
   13eb0:	6860      	ldr	r0, [r4, #4]
   13eb2:	47b8      	blx	r7
    if(elp >= task->period)
   13eb4:	6823      	ldr	r3, [r4, #0]
   13eb6:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
   13eb8:	bf34      	ite	cc
   13eba:	1a1b      	subcc	r3, r3, r0
        return 0;
   13ebc:	2300      	movcs	r3, #0
            if(delay < time_till_next)
   13ebe:	69b2      	ldr	r2, [r6, #24]
   13ec0:	429a      	cmp	r2, r3
                time_till_next = delay;
   13ec2:	bf88      	it	hi
   13ec4:	61b3      	strhi	r3, [r6, #24]
   13ec6:	e7e9      	b.n	13e9c <lv_task_handler+0x128>
    already_running = false; /*Release the mutex*/
   13ec8:	4b04      	ldr	r3, [pc, #16]	; (13edc <lv_task_handler+0x168>)
   13eca:	2200      	movs	r2, #0
   13ecc:	711a      	strb	r2, [r3, #4]
    return time_till_next;
   13ece:	6998      	ldr	r0, [r3, #24]
   13ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(already_running) return 1;
   13ed4:	2001      	movs	r0, #1
}
   13ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13eda:	bf00      	nop
   13edc:	20006bb8 	.word	0x20006bb8
   13ee0:	00011601 	.word	0x00011601
   13ee4:	20006d68 	.word	0x20006d68
   13ee8:	00013d15 	.word	0x00013d15
   13eec:	00011619 	.word	0x00011619
   13ef0:	10624dd3 	.word	0x10624dd3
   13ef4:	20006c9c 	.word	0x20006c9c
   13ef8:	00012551 	.word	0x00012551
   13efc:	00012565 	.word	0x00012565

00013f00 <lv_task_set_prio>:
{
   13f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(task->prio == prio) return;
   13f04:	7d03      	ldrb	r3, [r0, #20]
   13f06:	f003 0307 	and.w	r3, r3, #7
   13f0a:	428b      	cmp	r3, r1
   13f0c:	d031      	beq.n	13f72 <lv_task_set_prio+0x72>
   13f0e:	460d      	mov	r5, r1
   13f10:	4688      	mov	r8, r1
   13f12:	4681      	mov	r9, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   13f14:	4818      	ldr	r0, [pc, #96]	; (13f78 <lv_task_set_prio+0x78>)
   13f16:	4b19      	ldr	r3, [pc, #100]	; (13f7c <lv_task_set_prio+0x7c>)
   13f18:	4798      	blx	r3
   13f1a:	4604      	mov	r4, r0
   13f1c:	b318      	cbz	r0, 13f66 <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   13f1e:	7d03      	ldrb	r3, [r0, #20]
   13f20:	f003 0307 	and.w	r3, r3, #7
   13f24:	429d      	cmp	r5, r3
   13f26:	da0b      	bge.n	13f40 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   13f28:	4f13      	ldr	r7, [pc, #76]	; (13f78 <lv_task_set_prio+0x78>)
   13f2a:	4e15      	ldr	r6, [pc, #84]	; (13f80 <lv_task_set_prio+0x80>)
   13f2c:	4621      	mov	r1, r4
   13f2e:	4638      	mov	r0, r7
   13f30:	47b0      	blx	r6
   13f32:	4604      	mov	r4, r0
   13f34:	b1b8      	cbz	r0, 13f66 <lv_task_set_prio+0x66>
        if(i->prio <= prio) {
   13f36:	7d23      	ldrb	r3, [r4, #20]
   13f38:	f003 0307 	and.w	r3, r3, #7
   13f3c:	429d      	cmp	r5, r3
   13f3e:	dbf5      	blt.n	13f2c <lv_task_set_prio+0x2c>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   13f40:	45a1      	cmp	r9, r4
   13f42:	d005      	beq.n	13f50 <lv_task_set_prio+0x50>
   13f44:	4622      	mov	r2, r4
   13f46:	4649      	mov	r1, r9
   13f48:	480b      	ldr	r0, [pc, #44]	; (13f78 <lv_task_set_prio+0x78>)
   13f4a:	4b0e      	ldr	r3, [pc, #56]	; (13f84 <lv_task_set_prio+0x84>)
   13f4c:	4798      	blx	r3
    if(i == NULL) {
   13f4e:	b154      	cbz	r4, 13f66 <lv_task_set_prio+0x66>
    task_list_changed = true;
   13f50:	2201      	movs	r2, #1
   13f52:	4b0d      	ldr	r3, [pc, #52]	; (13f88 <lv_task_set_prio+0x88>)
   13f54:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   13f56:	f899 3014 	ldrb.w	r3, [r9, #20]
   13f5a:	f368 0302 	bfi	r3, r8, #0, #3
   13f5e:	f889 3014 	strb.w	r3, [r9, #20]
   13f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   13f66:	2200      	movs	r2, #0
   13f68:	4649      	mov	r1, r9
   13f6a:	4803      	ldr	r0, [pc, #12]	; (13f78 <lv_task_set_prio+0x78>)
   13f6c:	4b05      	ldr	r3, [pc, #20]	; (13f84 <lv_task_set_prio+0x84>)
   13f6e:	4798      	blx	r3
   13f70:	e7ee      	b.n	13f50 <lv_task_set_prio+0x50>
   13f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f76:	bf00      	nop
   13f78:	20006c9c 	.word	0x20006c9c
   13f7c:	00012551 	.word	0x00012551
   13f80:	00012565 	.word	0x00012565
   13f84:	0001273d 	.word	0x0001273d
   13f88:	20006bb8 	.word	0x20006bb8

00013f8c <lv_task_create>:
{
   13f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f90:	b082      	sub	sp, #8
   13f92:	4680      	mov	r8, r0
   13f94:	460f      	mov	r7, r1
   13f96:	4616      	mov	r6, r2
   13f98:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   13f9a:	4b10      	ldr	r3, [pc, #64]	; (13fdc <lv_task_create+0x50>)
   13f9c:	4798      	blx	r3
   13f9e:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_task);
   13fa0:	4b0f      	ldr	r3, [pc, #60]	; (13fe0 <lv_task_create+0x54>)
   13fa2:	4798      	blx	r3
   13fa4:	b160      	cbz	r0, 13fc0 <lv_task_create+0x34>
    if(new_task == NULL) return NULL;
   13fa6:	b13c      	cbz	r4, 13fb8 <lv_task_create+0x2c>
    task->task_cb = task_cb;
   13fa8:	f8c4 8008 	str.w	r8, [r4, #8]
    task->period = period;
   13fac:	6027      	str	r7, [r4, #0]
    lv_task_set_prio(new_task, prio);
   13fae:	4631      	mov	r1, r6
   13fb0:	4620      	mov	r0, r4
   13fb2:	4b0c      	ldr	r3, [pc, #48]	; (13fe4 <lv_task_create+0x58>)
   13fb4:	4798      	blx	r3
    new_task->user_data = user_data;
   13fb6:	60e5      	str	r5, [r4, #12]
}
   13fb8:	4620      	mov	r0, r4
   13fba:	b002      	add	sp, #8
   13fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MEM(new_task);
   13fc0:	4b09      	ldr	r3, [pc, #36]	; (13fe8 <lv_task_create+0x5c>)
   13fc2:	9300      	str	r3, [sp, #0]
   13fc4:	f44f 7283 	mov.w	r2, #262	; 0x106
   13fc8:	4908      	ldr	r1, [pc, #32]	; (13fec <lv_task_create+0x60>)
   13fca:	2003      	movs	r0, #3
   13fcc:	4d08      	ldr	r5, [pc, #32]	; (13ff0 <lv_task_create+0x64>)
   13fce:	47a8      	blx	r5
   13fd0:	4622      	mov	r2, r4
   13fd2:	2300      	movs	r3, #0
   13fd4:	4807      	ldr	r0, [pc, #28]	; (13ff4 <lv_task_create+0x68>)
   13fd6:	4908      	ldr	r1, [pc, #32]	; (13ff8 <lv_task_create+0x6c>)
   13fd8:	4788      	blx	r1
   13fda:	e7fe      	b.n	13fda <lv_task_create+0x4e>
   13fdc:	00013bb9 	.word	0x00013bb9
   13fe0:	0000298d 	.word	0x0000298d
   13fe4:	00013f01 	.word	0x00013f01
   13fe8:	000209a8 	.word	0x000209a8
   13fec:	000209b8 	.word	0x000209b8
   13ff0:	00012805 	.word	0x00012805
   13ff4:	0001b4bc 	.word	0x0001b4bc
   13ff8:	00002995 	.word	0x00002995

00013ffc <lv_task_ready>:
{
   13ffc:	b510      	push	{r4, lr}
   13ffe:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   14000:	4b03      	ldr	r3, [pc, #12]	; (14010 <lv_task_ready+0x14>)
   14002:	4798      	blx	r3
   14004:	6823      	ldr	r3, [r4, #0]
   14006:	43db      	mvns	r3, r3
   14008:	4403      	add	r3, r0
   1400a:	6063      	str	r3, [r4, #4]
   1400c:	bd10      	pop	{r4, pc}
   1400e:	bf00      	nop
   14010:	00011601 	.word	0x00011601

00014014 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
   14014:	7803      	ldrb	r3, [r0, #0]
   14016:	f013 0f80 	tst.w	r3, #128	; 0x80
   1401a:	d101      	bne.n	14020 <lv_txt_utf8_size+0xc>
        return 1;
   1401c:	2001      	movs	r0, #1
   1401e:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
   14020:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
   14024:	2ac0      	cmp	r2, #192	; 0xc0
   14026:	d00a      	beq.n	1403e <lv_txt_utf8_size+0x2a>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
   14028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   1402c:	2ae0      	cmp	r2, #224	; 0xe0
   1402e:	d008      	beq.n	14042 <lv_txt_utf8_size+0x2e>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
   14030:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
   14034:	2bf0      	cmp	r3, #240	; 0xf0
   14036:	bf0c      	ite	eq
   14038:	2004      	moveq	r0, #4
   1403a:	2000      	movne	r0, #0
   1403c:	4770      	bx	lr
        return 2;
   1403e:	2002      	movs	r0, #2
   14040:	4770      	bx	lr
        return 3;
   14042:	2003      	movs	r0, #3
}
   14044:	4770      	bx	lr

00014046 <lv_txt_unicode_to_utf8>:
 * @param letter_uni an Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
   14046:	287f      	cmp	r0, #127	; 0x7f
   14048:	d916      	bls.n	14078 <lv_txt_unicode_to_utf8+0x32>
{
   1404a:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
   1404c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14050:	d213      	bcs.n	1407a <lv_txt_unicode_to_utf8+0x34>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
   14052:	f3c0 1384 	ubfx	r3, r0, #6, #5
   14056:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1405a:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
   1405e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   14062:	f060 007f 	orn	r0, r0, #127	; 0x7f
   14066:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
   1406a:	2300      	movs	r3, #0
   1406c:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
   14070:	f88d 3007 	strb.w	r3, [sp, #7]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
   14074:	9801      	ldr	r0, [sp, #4]
}
   14076:	b002      	add	sp, #8
   14078:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
   1407a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1407e:	d215      	bcs.n	140ac <lv_txt_unicode_to_utf8+0x66>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
   14080:	f3c0 3303 	ubfx	r3, r0, #12, #4
   14084:	f063 031f 	orn	r3, r3, #31
   14088:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
   1408c:	f3c0 1385 	ubfx	r3, r0, #6, #6
   14090:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14094:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
   14098:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1409c:	f060 007f 	orn	r0, r0, #127	; 0x7f
   140a0:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
   140a4:	2300      	movs	r3, #0
   140a6:	f88d 3007 	strb.w	r3, [sp, #7]
   140aa:	e7e3      	b.n	14074 <lv_txt_unicode_to_utf8+0x2e>
    else if(letter_uni < 0x110000) {
   140ac:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   140b0:	d2e0      	bcs.n	14074 <lv_txt_unicode_to_utf8+0x2e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
   140b2:	f3c0 4382 	ubfx	r3, r0, #18, #3
   140b6:	f063 030f 	orn	r3, r3, #15
   140ba:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
   140be:	f3c0 3305 	ubfx	r3, r0, #12, #6
   140c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   140c6:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
   140ca:	f3c0 1385 	ubfx	r3, r0, #6, #6
   140ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
   140d2:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
   140d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   140da:	f060 007f 	orn	r0, r0, #127	; 0x7f
   140de:	f88d 0007 	strb.w	r0, [sp, #7]
   140e2:	e7c7      	b.n	14074 <lv_txt_unicode_to_utf8+0x2e>

000140e4 <lv_txt_utf8_conv_wc>:
 * Convert a wide character, e.g. 'Á' little endian to be UTF-8 compatible
 * @param c a wide character or a  Little endian number
 * @return `c` in big endian
 */
static uint32_t lv_txt_utf8_conv_wc(uint32_t c)
{
   140e4:	b082      	sub	sp, #8
   140e6:	9001      	str	r0, [sp, #4]
    /*Swap the bytes (UTF-8 is big endian, but the MCUs are little endian)*/
    if((c & 0x80) != 0) {
   140e8:	f010 0f80 	tst.w	r0, #128	; 0x80
   140ec:	d017      	beq.n	1411e <lv_txt_utf8_conv_wc+0x3a>
        uint32_t swapped;
        uint8_t c8[4];
        _lv_memcpy_small(c8, &c, 4);
        swapped = (c8[0] << 24) + (c8[1] << 16) + (c8[2] << 8) + (c8[3]);
   140ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
   140f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   140f6:	0412      	lsls	r2, r2, #16
   140f8:	eb02 6203 	add.w	r2, r2, r3, lsl #24
   140fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14100:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   14104:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14108:	441a      	add	r2, r3
   1410a:	2304      	movs	r3, #4
        uint8_t i;
        for(i = 0; i < 4; i++) {
            if((swapped & 0xFF) == 0)
   1410c:	f012 0fff 	tst.w	r2, #255	; 0xff
                swapped = (swapped >> 8); /*Ignore leading zeros (they were in the end originally)*/
   14110:	bf08      	it	eq
   14112:	0a12      	lsreq	r2, r2, #8
   14114:	3b01      	subs	r3, #1
        for(i = 0; i < 4; i++) {
   14116:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1411a:	d1f7      	bne.n	1410c <lv_txt_utf8_conv_wc+0x28>
        }
        c = swapped;
   1411c:	9201      	str	r2, [sp, #4]
    }

    return c;
}
   1411e:	9801      	ldr	r0, [sp, #4]
   14120:	b002      	add	sp, #8
   14122:	4770      	bx	lr

00014124 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
   14124:	b470      	push	{r4, r5, r6}
   14126:	b083      	sub	sp, #12
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
   14128:	2300      	movs	r3, #0
   1412a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   1412c:	460c      	mov	r4, r1
   1412e:	b151      	cbz	r1, 14146 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
   14130:	6822      	ldr	r2, [r4, #0]
   14132:	5c83      	ldrb	r3, [r0, r2]
   14134:	f013 0f80 	tst.w	r3, #128	; 0x80
   14138:	d107      	bne.n	1414a <lv_txt_utf8_next+0x26>
        result = txt[*i];
   1413a:	4618      	mov	r0, r3
        (*i)++;
   1413c:	3201      	adds	r2, #1
   1413e:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
   14140:	b003      	add	sp, #12
   14142:	bc70      	pop	{r4, r5, r6}
   14144:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
   14146:	ac01      	add	r4, sp, #4
   14148:	e7f2      	b.n	14130 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
   1414a:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
   1414e:	29c0      	cmp	r1, #192	; 0xc0
   14150:	d00b      	beq.n	1416a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
   14152:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
   14156:	29e0      	cmp	r1, #224	; 0xe0
   14158:	d019      	beq.n	1418e <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
   1415a:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
   1415e:	29f0      	cmp	r1, #240	; 0xf0
   14160:	d033      	beq.n	141ca <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
   14162:	3201      	adds	r2, #1
   14164:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
   14166:	2000      	movs	r0, #0
   14168:	e7ea      	b.n	14140 <lv_txt_utf8_next+0x1c>
            (*i)++;
   1416a:	1c51      	adds	r1, r2, #1
   1416c:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   1416e:	5c40      	ldrb	r0, [r0, r1]
   14170:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   14174:	2980      	cmp	r1, #128	; 0x80
   14176:	d001      	beq.n	1417c <lv_txt_utf8_next+0x58>
   14178:	2000      	movs	r0, #0
   1417a:	e7e1      	b.n	14140 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   1417c:	019b      	lsls	r3, r3, #6
   1417e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
   14182:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   14186:	4418      	add	r0, r3
            (*i)++;
   14188:	3202      	adds	r2, #2
   1418a:	6022      	str	r2, [r4, #0]
   1418c:	e7d8      	b.n	14140 <lv_txt_utf8_next+0x1c>
            (*i)++;
   1418e:	1c51      	adds	r1, r2, #1
   14190:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   14192:	5c41      	ldrb	r1, [r0, r1]
   14194:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   14198:	2d80      	cmp	r5, #128	; 0x80
   1419a:	d001      	beq.n	141a0 <lv_txt_utf8_next+0x7c>
   1419c:	2000      	movs	r0, #0
   1419e:	e7cf      	b.n	14140 <lv_txt_utf8_next+0x1c>
            (*i)++;
   141a0:	1c95      	adds	r5, r2, #2
   141a2:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   141a4:	5d40      	ldrb	r0, [r0, r5]
   141a6:	f000 05c0 	and.w	r5, r0, #192	; 0xc0
   141aa:	2d80      	cmp	r5, #128	; 0x80
   141ac:	d001      	beq.n	141b2 <lv_txt_utf8_next+0x8e>
   141ae:	2000      	movs	r0, #0
   141b0:	e7c6      	b.n	14140 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   141b2:	031b      	lsls	r3, r3, #12
   141b4:	b29b      	uxth	r3, r3
            result += (txt[*i] & 0x3F);
   141b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   141ba:	4403      	add	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   141bc:	0188      	lsls	r0, r1, #6
   141be:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
   141c2:	4418      	add	r0, r3
            (*i)++;
   141c4:	3203      	adds	r2, #3
   141c6:	6022      	str	r2, [r4, #0]
   141c8:	e7ba      	b.n	14140 <lv_txt_utf8_next+0x1c>
            (*i)++;
   141ca:	1c51      	adds	r1, r2, #1
   141cc:	6021      	str	r1, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   141ce:	5c41      	ldrb	r1, [r0, r1]
   141d0:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
   141d4:	2d80      	cmp	r5, #128	; 0x80
   141d6:	d001      	beq.n	141dc <lv_txt_utf8_next+0xb8>
   141d8:	2000      	movs	r0, #0
   141da:	e7b1      	b.n	14140 <lv_txt_utf8_next+0x1c>
            (*i)++;
   141dc:	1c95      	adds	r5, r2, #2
   141de:	6025      	str	r5, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   141e0:	5d45      	ldrb	r5, [r0, r5]
   141e2:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   141e6:	2e80      	cmp	r6, #128	; 0x80
   141e8:	d001      	beq.n	141ee <lv_txt_utf8_next+0xca>
   141ea:	2000      	movs	r0, #0
   141ec:	e7a8      	b.n	14140 <lv_txt_utf8_next+0x1c>
            (*i)++;
   141ee:	1cd6      	adds	r6, r2, #3
   141f0:	6026      	str	r6, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   141f2:	5d86      	ldrb	r6, [r0, r6]
   141f4:	f006 00c0 	and.w	r0, r6, #192	; 0xc0
   141f8:	2880      	cmp	r0, #128	; 0x80
   141fa:	d001      	beq.n	14200 <lv_txt_utf8_next+0xdc>
   141fc:	2000      	movs	r0, #0
   141fe:	e79f      	b.n	14140 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   14200:	049b      	lsls	r3, r3, #18
   14202:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   14206:	0309      	lsls	r1, r1, #12
   14208:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
   1420c:	4303      	orrs	r3, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   1420e:	01a8      	lsls	r0, r5, #6
   14210:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
   14214:	f006 063f 	and.w	r6, r6, #63	; 0x3f
   14218:	4430      	add	r0, r6
   1421a:	4418      	add	r0, r3
            (*i)++;
   1421c:	3204      	adds	r2, #4
   1421e:	6022      	str	r2, [r4, #0]
   14220:	e78e      	b.n	14140 <lv_txt_utf8_next+0x1c>
	...

00014224 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
   14224:	b5f0      	push	{r4, r5, r6, r7, lr}
   14226:	b083      	sub	sp, #12
   14228:	4606      	mov	r6, r0
   1422a:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
   1422c:	680b      	ldr	r3, [r1, #0]
   1422e:	3b01      	subs	r3, #1
   14230:	600b      	str	r3, [r1, #0]
   14232:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
   14234:	4f0e      	ldr	r7, [pc, #56]	; (14270 <lv_txt_utf8_prev+0x4c>)
   14236:	e005      	b.n	14244 <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
   14238:	3801      	subs	r0, #1
   1423a:	6028      	str	r0, [r5, #0]
   1423c:	1e63      	subs	r3, r4, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   1423e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   14242:	d008      	beq.n	14256 <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
   14244:	6828      	ldr	r0, [r5, #0]
   14246:	4430      	add	r0, r6
   14248:	683b      	ldr	r3, [r7, #0]
   1424a:	4798      	blx	r3
        if(c_size == 0) {
   1424c:	b928      	cbnz	r0, 1425a <lv_txt_utf8_prev+0x36>
            if(*i != 0)
   1424e:	6828      	ldr	r0, [r5, #0]
   14250:	2800      	cmp	r0, #0
   14252:	d1f1      	bne.n	14238 <lv_txt_utf8_prev+0x14>
   14254:	e009      	b.n	1426a <lv_txt_utf8_prev+0x46>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   14256:	2000      	movs	r0, #0
   14258:	e007      	b.n	1426a <lv_txt_utf8_prev+0x46>
                return 0;
        }
        cnt++;
    } while(c_size == 0);

    uint32_t i_tmp  = *i;
   1425a:	682b      	ldr	r3, [r5, #0]
   1425c:	a902      	add	r1, sp, #8
   1425e:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
   14262:	4b03      	ldr	r3, [pc, #12]	; (14270 <lv_txt_utf8_prev+0x4c>)
   14264:	685b      	ldr	r3, [r3, #4]
   14266:	4630      	mov	r0, r6
   14268:	4798      	blx	r3

    return letter;
}
   1426a:	b003      	add	sp, #12
   1426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426e:	bf00      	nop
   14270:	20000054 	.word	0x20000054

00014274 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
   14274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id; i++) {
   14278:	460e      	mov	r6, r1
   1427a:	b191      	cbz	r1, 142a2 <lv_txt_utf8_get_byte_id+0x2e>
   1427c:	4607      	mov	r7, r0
   1427e:	2400      	movs	r4, #0
   14280:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   14282:	f8df 8024 	ldr.w	r8, [pc, #36]	; 142a8 <lv_txt_utf8_get_byte_id+0x34>
   14286:	1938      	adds	r0, r7, r4
   14288:	f8d8 3000 	ldr.w	r3, [r8]
   1428c:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
   1428e:	2800      	cmp	r0, #0
   14290:	bf08      	it	eq
   14292:	2001      	moveq	r0, #1
   14294:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
   14296:	3501      	adds	r5, #1
   14298:	42ae      	cmp	r6, r5
   1429a:	d1f4      	bne.n	14286 <lv_txt_utf8_get_byte_id+0x12>
    }

    return byte_cnt;
}
   1429c:	4620      	mov	r0, r4
   1429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t byte_cnt = 0;
   142a2:	460c      	mov	r4, r1
    return byte_cnt;
   142a4:	e7fa      	b.n	1429c <lv_txt_utf8_get_byte_id+0x28>
   142a6:	bf00      	nop
   142a8:	20000054 	.word	0x20000054

000142ac <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   142ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   142ae:	b083      	sub	sp, #12
    uint32_t i        = 0;
   142b0:	2300      	movs	r3, #0
   142b2:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
   142b4:	460d      	mov	r5, r1
   142b6:	b169      	cbz	r1, 142d4 <lv_txt_utf8_get_char_id+0x28>
   142b8:	4606      	mov	r6, r0
   142ba:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   142bc:	4f06      	ldr	r7, [pc, #24]	; (142d8 <lv_txt_utf8_get_char_id+0x2c>)
   142be:	a901      	add	r1, sp, #4
   142c0:	4630      	mov	r0, r6
   142c2:	687b      	ldr	r3, [r7, #4]
   142c4:	4798      	blx	r3
        char_cnt++;
   142c6:	3401      	adds	r4, #1
    while(i < byte_id) {
   142c8:	9b01      	ldr	r3, [sp, #4]
   142ca:	42ab      	cmp	r3, r5
   142cc:	d3f7      	bcc.n	142be <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
   142ce:	4620      	mov	r0, r4
   142d0:	b003      	add	sp, #12
   142d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
   142d4:	460c      	mov	r4, r1
    return char_cnt;
   142d6:	e7fa      	b.n	142ce <lv_txt_utf8_get_char_id+0x22>
   142d8:	20000054 	.word	0x20000054

000142dc <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
   142dc:	b570      	push	{r4, r5, r6, lr}
   142de:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
   142e0:	2300      	movs	r3, #0
   142e2:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
   142e4:	7803      	ldrb	r3, [r0, #0]
   142e6:	b173      	cbz	r3, 14306 <lv_txt_utf8_get_length+0x2a>
   142e8:	4604      	mov	r4, r0
   142ea:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
   142ec:	4e07      	ldr	r6, [pc, #28]	; (1430c <lv_txt_utf8_get_length+0x30>)
   142ee:	a901      	add	r1, sp, #4
   142f0:	4620      	mov	r0, r4
   142f2:	6873      	ldr	r3, [r6, #4]
   142f4:	4798      	blx	r3
        len++;
   142f6:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
   142f8:	9b01      	ldr	r3, [sp, #4]
   142fa:	5ce3      	ldrb	r3, [r4, r3]
   142fc:	2b00      	cmp	r3, #0
   142fe:	d1f6      	bne.n	142ee <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
   14300:	4628      	mov	r0, r5
   14302:	b002      	add	sp, #8
   14304:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
   14306:	2500      	movs	r5, #0
    return len;
   14308:	e7fa      	b.n	14300 <lv_txt_utf8_get_length+0x24>
   1430a:	bf00      	nop
   1430c:	20000054 	.word	0x20000054

00014310 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   14310:	2923      	cmp	r1, #35	; 0x23
   14312:	d004      	beq.n	1431e <_lv_txt_is_cmd+0xe>
    if(*state == LV_TXT_CMD_STATE_PAR) {
   14314:	7803      	ldrb	r3, [r0, #0]
   14316:	2b01      	cmp	r3, #1
   14318:	d015      	beq.n	14346 <_lv_txt_is_cmd+0x36>
    bool ret = false;
   1431a:	2000      	movs	r0, #0
   1431c:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   1431e:	7803      	ldrb	r3, [r0, #0]
   14320:	b91b      	cbnz	r3, 1432a <_lv_txt_is_cmd+0x1a>
            *state = LV_TXT_CMD_STATE_PAR;
   14322:	2301      	movs	r3, #1
   14324:	7003      	strb	r3, [r0, #0]
        ret = true;
   14326:	4618      	mov	r0, r3
   14328:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   1432a:	2b01      	cmp	r3, #1
   1432c:	d003      	beq.n	14336 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   1432e:	2b02      	cmp	r3, #2
   14330:	d005      	beq.n	1433e <_lv_txt_is_cmd+0x2e>
    bool ret = false;
   14332:	2000      	movs	r0, #0
}
   14334:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   14336:	2300      	movs	r3, #0
   14338:	7003      	strb	r3, [r0, #0]
    bool ret = false;
   1433a:	4618      	mov	r0, r3
   1433c:	4770      	bx	lr
            *state = LV_TXT_CMD_STATE_WAIT;
   1433e:	2300      	movs	r3, #0
   14340:	7003      	strb	r3, [r0, #0]
            ret    = true;
   14342:	2001      	movs	r0, #1
   14344:	4770      	bx	lr
        if(c == ' ') {
   14346:	2920      	cmp	r1, #32
   14348:	d103      	bne.n	14352 <_lv_txt_is_cmd+0x42>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   1434a:	2302      	movs	r3, #2
   1434c:	7003      	strb	r3, [r0, #0]
        ret = true;
   1434e:	2001      	movs	r0, #1
   14350:	4770      	bx	lr
   14352:	2001      	movs	r0, #1
   14354:	4770      	bx	lr
	...

00014358 <_lv_txt_get_next_line>:
{
   14358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1435c:	b091      	sub	sp, #68	; 0x44
   1435e:	9105      	str	r1, [sp, #20]
   14360:	9206      	str	r2, [sp, #24]
   14362:	9307      	str	r3, [sp, #28]
   14364:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   14368:	9304      	str	r3, [sp, #16]
    if(txt == NULL) return 0;
   1436a:	9008      	str	r0, [sp, #32]
   1436c:	2800      	cmp	r0, #0
   1436e:	f000 80f0 	beq.w	14552 <_lv_txt_get_next_line+0x1fa>
    if(font == NULL) return 0;
   14372:	2900      	cmp	r1, #0
   14374:	f000 80ef 	beq.w	14556 <_lv_txt_get_next_line+0x1fe>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   14378:	f013 0f12 	tst.w	r3, #18
   1437c:	d017      	beq.n	143ae <_lv_txt_get_next_line+0x56>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1437e:	7803      	ldrb	r3, [r0, #0]
   14380:	2b0a      	cmp	r3, #10
   14382:	f000 80ea 	beq.w	1455a <_lv_txt_get_next_line+0x202>
   14386:	2b0d      	cmp	r3, #13
   14388:	f000 80ed 	beq.w	14566 <_lv_txt_get_next_line+0x20e>
   1438c:	2b00      	cmp	r3, #0
   1438e:	f000 80ec 	beq.w	1456a <_lv_txt_get_next_line+0x212>
   14392:	4601      	mov	r1, r0
   14394:	2200      	movs	r2, #0
   14396:	3201      	adds	r2, #1
   14398:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1439c:	2b0a      	cmp	r3, #10
   1439e:	f000 80dd 	beq.w	1455c <_lv_txt_get_next_line+0x204>
   143a2:	2b0d      	cmp	r3, #13
   143a4:	f000 80da 	beq.w	1455c <_lv_txt_get_next_line+0x204>
   143a8:	2b00      	cmp	r3, #0
   143aa:	d1f4      	bne.n	14396 <_lv_txt_get_next_line+0x3e>
   143ac:	e0d7      	b.n	1455e <_lv_txt_get_next_line+0x206>
   143ae:	9b04      	ldr	r3, [sp, #16]
   143b0:	f003 0302 	and.w	r3, r3, #2
   143b4:	461a      	mov	r2, r3
   143b6:	930b      	str	r3, [sp, #44]	; 0x2c
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   143b8:	f647 4318 	movw	r3, #31768	; 0x7c18
   143bc:	9907      	ldr	r1, [sp, #28]
   143be:	2a00      	cmp	r2, #0
   143c0:	bf18      	it	ne
   143c2:	4619      	movne	r1, r3
   143c4:	9107      	str	r1, [sp, #28]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   143c6:	2300      	movs	r3, #0
   143c8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    uint32_t i = 0;                                        /* Iterating index into txt */
   143cc:	930e      	str	r3, [sp, #56]	; 0x38
    letter = _lv_txt_encoded_next(txt, &i_next);
   143ce:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 1457c <_lv_txt_get_next_line+0x224>
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   143d2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 14580 <_lv_txt_get_next_line+0x228>
    while(txt[i] != '\0' && max_width > 0) {
   143d6:	e078      	b.n	144ca <_lv_txt_get_next_line+0x172>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   143d8:	9a01      	ldr	r2, [sp, #4]
   143da:	4621      	mov	r1, r4
   143dc:	9805      	ldr	r0, [sp, #20]
   143de:	4b64      	ldr	r3, [pc, #400]	; (14570 <_lv_txt_get_next_line+0x218>)
   143e0:	4798      	blx	r3
        cur_w += letter_w;
   143e2:	4405      	add	r5, r0
   143e4:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
   143e6:	b200      	sxth	r0, r0
   143e8:	2800      	cmp	r0, #0
   143ea:	dd02      	ble.n	143f2 <_lv_txt_get_next_line+0x9a>
            cur_w += letter_space;
   143ec:	9b06      	ldr	r3, [sp, #24]
   143ee:	441d      	add	r5, r3
   143f0:	b2ad      	uxth	r5, r5
   143f2:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   143f4:	f1b7 3fff 	cmp.w	r7, #4294967295
   143f8:	d038      	beq.n	1446c <_lv_txt_get_next_line+0x114>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   143fa:	f1a4 020a 	sub.w	r2, r4, #10
   143fe:	2a16      	cmp	r2, #22
   14400:	d83b      	bhi.n	1447a <_lv_txt_get_next_line+0x122>
   14402:	4b5c      	ldr	r3, [pc, #368]	; (14574 <_lv_txt_get_next_line+0x21c>)
   14404:	40d3      	lsrs	r3, r2
   14406:	f013 0f01 	tst.w	r3, #1
   1440a:	d139      	bne.n	14480 <_lv_txt_get_next_line+0x128>
   1440c:	2301      	movs	r3, #1
   1440e:	222c      	movs	r2, #44	; 0x2c
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   14410:	4294      	cmp	r4, r2
   14412:	d035      	beq.n	14480 <_lv_txt_get_next_line+0x128>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   14414:	3301      	adds	r3, #1
   14416:	b2db      	uxtb	r3, r3
   14418:	f81a 2003 	ldrb.w	r2, [sl, r3]
   1441c:	2a00      	cmp	r2, #0
   1441e:	d1f7      	bne.n	14410 <_lv_txt_get_next_line+0xb8>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   14420:	f1b7 3fff 	cmp.w	r7, #4294967295
   14424:	bf08      	it	eq
   14426:	46ab      	moveq	fp, r5
        i = i_next;
   14428:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        i_next = i_next_next;
   1442a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1442c:	930c      	str	r3, [sp, #48]	; 0x30
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1442e:	9b03      	ldr	r3, [sp, #12]
   14430:	9302      	str	r3, [sp, #8]
   14432:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
   14434:	f818 3006 	ldrb.w	r3, [r8, r6]
   14438:	2b00      	cmp	r3, #0
   1443a:	d06e      	beq.n	1451a <_lv_txt_get_next_line+0x1c2>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1443c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14440:	a90d      	add	r1, sp, #52	; 0x34
   14442:	4640      	mov	r0, r8
   14444:	4798      	blx	r3
   14446:	9001      	str	r0, [sp, #4]
        word_len++;
   14448:	9b02      	ldr	r3, [sp, #8]
   1444a:	3301      	adds	r3, #1
   1444c:	9303      	str	r3, [sp, #12]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1444e:	9b04      	ldr	r3, [sp, #16]
   14450:	f013 0f01 	tst.w	r3, #1
   14454:	d0c0      	beq.n	143d8 <_lv_txt_get_next_line+0x80>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   14456:	4621      	mov	r1, r4
   14458:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   1445c:	4b46      	ldr	r3, [pc, #280]	; (14578 <_lv_txt_get_next_line+0x220>)
   1445e:	4798      	blx	r3
   14460:	2800      	cmp	r0, #0
   14462:	d0b9      	beq.n	143d8 <_lv_txt_get_next_line+0x80>
                i = i_next;
   14464:	9e0c      	ldr	r6, [sp, #48]	; 0x30
                i_next = i_next_next;
   14466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14468:	930c      	str	r3, [sp, #48]	; 0x30
   1446a:	e7e0      	b.n	1442e <_lv_txt_get_next_line+0xd6>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   1446c:	9b06      	ldr	r3, [sp, #24]
   1446e:	1aeb      	subs	r3, r5, r3
   14470:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14472:	4293      	cmp	r3, r2
   14474:	bfc8      	it	gt
   14476:	4637      	movgt	r7, r6
   14478:	e7bf      	b.n	143fa <_lv_txt_get_next_line+0xa2>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1447a:	2301      	movs	r3, #1
   1447c:	222c      	movs	r2, #44	; 0x2c
   1447e:	e7c7      	b.n	14410 <_lv_txt_get_next_line+0xb8>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   14480:	2e00      	cmp	r6, #0
   14482:	d14a      	bne.n	1451a <_lv_txt_get_next_line+0x1c2>
   14484:	f1b7 3fff 	cmp.w	r7, #4294967295
   14488:	d14a      	bne.n	14520 <_lv_txt_get_next_line+0x1c8>
   1448a:	46ab      	mov	fp, r5
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   1448c:	9b02      	ldr	r3, [sp, #8]
   1448e:	b123      	cbz	r3, 1449a <_lv_txt_get_next_line+0x142>
   14490:	2c0d      	cmp	r4, #13
   14492:	d103      	bne.n	1449c <_lv_txt_get_next_line+0x144>
   14494:	9b01      	ldr	r3, [sp, #4]
   14496:	2b0a      	cmp	r3, #10
   14498:	d100      	bne.n	1449c <_lv_txt_get_next_line+0x144>
   1449a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
        return i;
   1449c:	b2b6      	uxth	r6, r6
        max_width -= word_w;
   1449e:	9b07      	ldr	r3, [sp, #28]
   144a0:	eba3 0b0b 	sub.w	fp, r3, fp
   144a4:	fa0f f38b 	sxth.w	r3, fp
   144a8:	9307      	str	r3, [sp, #28]
        if(advance == 0) {
   144aa:	2e00      	cmp	r6, #0
   144ac:	d03a      	beq.n	14524 <_lv_txt_get_next_line+0x1cc>
        i += advance;
   144ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   144b0:	443e      	add	r6, r7
   144b2:	960e      	str	r6, [sp, #56]	; 0x38
        if(txt[0] == '\n' || txt[0] == '\r') break;
   144b4:	9a08      	ldr	r2, [sp, #32]
   144b6:	7813      	ldrb	r3, [r2, #0]
   144b8:	2b0a      	cmp	r3, #10
   144ba:	d03f      	beq.n	1453c <_lv_txt_get_next_line+0x1e4>
   144bc:	2b0d      	cmp	r3, #13
   144be:	d03d      	beq.n	1453c <_lv_txt_get_next_line+0x1e4>
        if(txt[i] == '\n' || txt[i] == '\r') {
   144c0:	5d93      	ldrb	r3, [r2, r6]
   144c2:	2b0a      	cmp	r3, #10
   144c4:	d038      	beq.n	14538 <_lv_txt_get_next_line+0x1e0>
   144c6:	2b0d      	cmp	r3, #13
   144c8:	d036      	beq.n	14538 <_lv_txt_get_next_line+0x1e0>
    while(txt[i] != '\0' && max_width > 0) {
   144ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   144cc:	930a      	str	r3, [sp, #40]	; 0x28
   144ce:	9908      	ldr	r1, [sp, #32]
   144d0:	eb01 0803 	add.w	r8, r1, r3
   144d4:	5ccb      	ldrb	r3, [r1, r3]
   144d6:	2b00      	cmp	r3, #0
   144d8:	d030      	beq.n	1453c <_lv_txt_get_next_line+0x1e4>
   144da:	9b07      	ldr	r3, [sp, #28]
   144dc:	2b00      	cmp	r3, #0
   144de:	dd2d      	ble.n	1453c <_lv_txt_get_next_line+0x1e4>
    if(txt == NULL || txt[0] == '\0') return 0;
   144e0:	f1b8 0f00 	cmp.w	r8, #0
   144e4:	d01e      	beq.n	14524 <_lv_txt_get_next_line+0x1cc>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   144e6:	f647 4318 	movw	r3, #31768	; 0x7c18
   144ea:	9a07      	ldr	r2, [sp, #28]
   144ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   144ee:	2900      	cmp	r1, #0
   144f0:	bf08      	it	eq
   144f2:	4613      	moveq	r3, r2
   144f4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   144f6:	2600      	movs	r6, #0
   144f8:	960c      	str	r6, [sp, #48]	; 0x30
   144fa:	960d      	str	r6, [sp, #52]	; 0x34
    letter = _lv_txt_encoded_next(txt, &i_next);
   144fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   14500:	a90c      	add	r1, sp, #48	; 0x30
   14502:	4640      	mov	r0, r8
   14504:	4798      	blx	r3
   14506:	4604      	mov	r4, r0
    i_next_next = i_next;
   14508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1450a:	930d      	str	r3, [sp, #52]	; 0x34
        uint32_t word_w = 0;
   1450c:	46b3      	mov	fp, r6
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   1450e:	f04f 37ff 	mov.w	r7, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   14512:	9602      	str	r6, [sp, #8]
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   14514:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
   14516:	9601      	str	r6, [sp, #4]
   14518:	e78c      	b.n	14434 <_lv_txt_get_next_line+0xdc>
    if(break_index == NO_BREAK_FOUND) {
   1451a:	f1b7 3fff 	cmp.w	r7, #4294967295
   1451e:	d0b5      	beq.n	1448c <_lv_txt_get_next_line+0x134>
    if(force) return break_index;
   14520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14522:	b13b      	cbz	r3, 14534 <_lv_txt_get_next_line+0x1dc>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   14524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14526:	b95b      	cbnz	r3, 14540 <_lv_txt_get_next_line+0x1e8>
   14528:	4b14      	ldr	r3, [pc, #80]	; (1457c <_lv_txt_get_next_line+0x224>)
   1452a:	685b      	ldr	r3, [r3, #4]
   1452c:	a90e      	add	r1, sp, #56	; 0x38
   1452e:	9808      	ldr	r0, [sp, #32]
   14530:	4798      	blx	r3
   14532:	e003      	b.n	1453c <_lv_txt_get_next_line+0x1e4>
    if(force) return break_index;
   14534:	b2be      	uxth	r6, r7
   14536:	e7b2      	b.n	1449e <_lv_txt_get_next_line+0x146>
            i++;  /* Include the following newline in the current line */
   14538:	3601      	adds	r6, #1
   1453a:	960e      	str	r6, [sp, #56]	; 0x38
    if(i == 0) {
   1453c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1453e:	b113      	cbz	r3, 14546 <_lv_txt_get_next_line+0x1ee>
    return i;
   14540:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
   14544:	e00c      	b.n	14560 <_lv_txt_get_next_line+0x208>
        _lv_txt_encoded_next(txt, &i);
   14546:	4b0d      	ldr	r3, [pc, #52]	; (1457c <_lv_txt_get_next_line+0x224>)
   14548:	685b      	ldr	r3, [r3, #4]
   1454a:	a90e      	add	r1, sp, #56	; 0x38
   1454c:	9808      	ldr	r0, [sp, #32]
   1454e:	4798      	blx	r3
   14550:	e7f6      	b.n	14540 <_lv_txt_get_next_line+0x1e8>
    if(txt == NULL) return 0;
   14552:	2000      	movs	r0, #0
   14554:	e004      	b.n	14560 <_lv_txt_get_next_line+0x208>
    if(font == NULL) return 0;
   14556:	2000      	movs	r0, #0
   14558:	e002      	b.n	14560 <_lv_txt_get_next_line+0x208>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1455a:	2200      	movs	r2, #0
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   1455c:	3201      	adds	r2, #1
        return i;
   1455e:	b290      	uxth	r0, r2
}
   14560:	b011      	add	sp, #68	; 0x44
   14562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   14566:	2200      	movs	r2, #0
   14568:	e7f8      	b.n	1455c <_lv_txt_get_next_line+0x204>
   1456a:	2200      	movs	r2, #0
   1456c:	e7f7      	b.n	1455e <_lv_txt_get_next_line+0x206>
   1456e:	bf00      	nop
   14570:	00010609 	.word	0x00010609
   14574:	00400009 	.word	0x00400009
   14578:	00014311 	.word	0x00014311
   1457c:	20000054 	.word	0x20000054
   14580:	000209f8 	.word	0x000209f8

00014584 <_lv_txt_get_width>:
{
   14584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14588:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
   1458a:	2800      	cmp	r0, #0
   1458c:	d040      	beq.n	14610 <_lv_txt_get_width+0x8c>
   1458e:	4605      	mov	r5, r0
    if(font == NULL) return 0;
   14590:	2a00      	cmp	r2, #0
   14592:	d03f      	beq.n	14614 <_lv_txt_get_width+0x90>
    uint32_t i                   = 0;
   14594:	2000      	movs	r0, #0
   14596:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   14598:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
   1459c:	b149      	cbz	r1, 145b2 <_lv_txt_get_width+0x2e>
   1459e:	469b      	mov	fp, r3
   145a0:	9201      	str	r2, [sp, #4]
   145a2:	4689      	mov	r9, r1
   145a4:	2400      	movs	r4, #0
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   145a6:	4f1c      	ldr	r7, [pc, #112]	; (14618 <_lv_txt_get_width+0x94>)
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   145a8:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   145ac:	f00a 0a01 	and.w	sl, sl, #1
   145b0:	e00c      	b.n	145cc <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
   145b2:	4604      	mov	r4, r0
   145b4:	e028      	b.n	14608 <_lv_txt_get_width+0x84>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   145b6:	4642      	mov	r2, r8
   145b8:	4631      	mov	r1, r6
   145ba:	9801      	ldr	r0, [sp, #4]
   145bc:	4b17      	ldr	r3, [pc, #92]	; (1461c <_lv_txt_get_width+0x98>)
   145be:	4798      	blx	r3
            if(char_width > 0) {
   145c0:	b203      	sxth	r3, r0
   145c2:	2b00      	cmp	r3, #0
   145c4:	dd02      	ble.n	145cc <_lv_txt_get_width+0x48>
                width += letter_space;
   145c6:	445c      	add	r4, fp
   145c8:	4404      	add	r4, r0
   145ca:	b224      	sxth	r4, r4
        while(i < length) {
   145cc:	9b03      	ldr	r3, [sp, #12]
   145ce:	4599      	cmp	r9, r3
   145d0:	d915      	bls.n	145fe <_lv_txt_get_width+0x7a>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   145d2:	687b      	ldr	r3, [r7, #4]
   145d4:	a903      	add	r1, sp, #12
   145d6:	4628      	mov	r0, r5
   145d8:	4798      	blx	r3
   145da:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   145dc:	687b      	ldr	r3, [r7, #4]
   145de:	2100      	movs	r1, #0
   145e0:	9803      	ldr	r0, [sp, #12]
   145e2:	4428      	add	r0, r5
   145e4:	4798      	blx	r3
   145e6:	4680      	mov	r8, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   145e8:	f1ba 0f00 	cmp.w	sl, #0
   145ec:	d0e3      	beq.n	145b6 <_lv_txt_get_width+0x32>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   145ee:	4631      	mov	r1, r6
   145f0:	f10d 000b 	add.w	r0, sp, #11
   145f4:	4b0a      	ldr	r3, [pc, #40]	; (14620 <_lv_txt_get_width+0x9c>)
   145f6:	4798      	blx	r3
   145f8:	2800      	cmp	r0, #0
   145fa:	d1e7      	bne.n	145cc <_lv_txt_get_width+0x48>
   145fc:	e7db      	b.n	145b6 <_lv_txt_get_width+0x32>
        if(width > 0) {
   145fe:	2c00      	cmp	r4, #0
   14600:	dd02      	ble.n	14608 <_lv_txt_get_width+0x84>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   14602:	eba4 040b 	sub.w	r4, r4, fp
   14606:	b224      	sxth	r4, r4
}
   14608:	4620      	mov	r0, r4
   1460a:	b005      	add	sp, #20
   1460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
   14610:	2400      	movs	r4, #0
   14612:	e7f9      	b.n	14608 <_lv_txt_get_width+0x84>
    if(font == NULL) return 0;
   14614:	2400      	movs	r4, #0
   14616:	e7f7      	b.n	14608 <_lv_txt_get_width+0x84>
   14618:	20000054 	.word	0x20000054
   1461c:	00010609 	.word	0x00010609
   14620:	00014311 	.word	0x00014311

00014624 <_lv_txt_get_size>:
{
   14624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14628:	b089      	sub	sp, #36	; 0x24
   1462a:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
   1462e:	9406      	str	r4, [sp, #24]
   14630:	f9bd 504c 	ldrsh.w	r5, [sp, #76]	; 0x4c
   14634:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    size_res->x = 0;
   14638:	2400      	movs	r4, #0
   1463a:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
   1463c:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
   1463e:	2900      	cmp	r1, #0
   14640:	d05b      	beq.n	146fa <_lv_txt_get_size+0xd6>
   14642:	460f      	mov	r7, r1
    if(font == NULL) return;
   14644:	2a00      	cmp	r2, #0
   14646:	d058      	beq.n	146fa <_lv_txt_get_size+0xd6>
   14648:	9303      	str	r3, [sp, #12]
   1464a:	4611      	mov	r1, r2
   1464c:	9202      	str	r2, [sp, #8]
   1464e:	4604      	mov	r4, r0
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   14650:	f008 0302 	and.w	r3, r8, #2
   14654:	f647 4218 	movw	r2, #31768	; 0x7c18
   14658:	2b00      	cmp	r3, #0
   1465a:	bf18      	it	ne
   1465c:	4615      	movne	r5, r2
   1465e:	9504      	str	r5, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   14660:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   14664:	9207      	str	r2, [sp, #28]
    uint16_t letter_height = lv_font_get_line_height(font);
   14666:	fa1f fa82 	uxth.w	sl, r2
    while(text[line_start] != '\0') {
   1466a:	783b      	ldrb	r3, [r7, #0]
   1466c:	2b00      	cmp	r3, #0
   1466e:	d04c      	beq.n	1470a <_lv_txt_get_size+0xe6>
   14670:	463e      	mov	r6, r7
   14672:	2500      	movs	r5, #0
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   14674:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 14728 <_lv_txt_get_size+0x104>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   14678:	9b06      	ldr	r3, [sp, #24]
   1467a:	449a      	add	sl, r3
   1467c:	fa1f f98a 	uxth.w	r9, sl
   14680:	4647      	mov	r7, r8
   14682:	46b0      	mov	r8, r6
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   14684:	9700      	str	r7, [sp, #0]
   14686:	9b04      	ldr	r3, [sp, #16]
   14688:	9a03      	ldr	r2, [sp, #12]
   1468a:	9902      	ldr	r1, [sp, #8]
   1468c:	4630      	mov	r0, r6
   1468e:	47d8      	blx	fp
   14690:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   14692:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   14696:	eb0a 0203 	add.w	r2, sl, r3
   1469a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1469e:	d224      	bcs.n	146ea <_lv_txt_get_size+0xc6>
   146a0:	f8cd 9014 	str.w	r9, [sp, #20]
            size_res->y += line_space;
   146a4:	444b      	add	r3, r9
   146a6:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   146a8:	9700      	str	r7, [sp, #0]
   146aa:	9b03      	ldr	r3, [sp, #12]
   146ac:	9a02      	ldr	r2, [sp, #8]
   146ae:	4601      	mov	r1, r0
   146b0:	4630      	mov	r0, r6
   146b2:	4e18      	ldr	r6, [pc, #96]	; (14714 <_lv_txt_get_size+0xf0>)
   146b4:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   146b6:	f9b4 3000 	ldrsh.w	r3, [r4]
   146ba:	4298      	cmp	r0, r3
   146bc:	bfb8      	it	lt
   146be:	4618      	movlt	r0, r3
   146c0:	8020      	strh	r0, [r4, #0]
    while(text[line_start] != '\0') {
   146c2:	eb08 0605 	add.w	r6, r8, r5
   146c6:	f818 3005 	ldrb.w	r3, [r8, r5]
   146ca:	2b00      	cmp	r3, #0
   146cc:	d1da      	bne.n	14684 <_lv_txt_get_size+0x60>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   146ce:	b12d      	cbz	r5, 146dc <_lv_txt_get_size+0xb8>
   146d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   146d4:	2b0a      	cmp	r3, #10
   146d6:	d013      	beq.n	14700 <_lv_txt_get_size+0xdc>
   146d8:	2b0d      	cmp	r3, #13
   146da:	d011      	beq.n	14700 <_lv_txt_get_size+0xdc>
    if(size_res->y == 0)
   146dc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   146e0:	b19b      	cbz	r3, 1470a <_lv_txt_get_size+0xe6>
        size_res->y -= line_space;
   146e2:	9a06      	ldr	r2, [sp, #24]
   146e4:	1a9b      	subs	r3, r3, r2
   146e6:	8063      	strh	r3, [r4, #2]
   146e8:	e007      	b.n	146fa <_lv_txt_get_size+0xd6>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   146ea:	4b0b      	ldr	r3, [pc, #44]	; (14718 <_lv_txt_get_size+0xf4>)
   146ec:	9300      	str	r3, [sp, #0]
   146ee:	4b0b      	ldr	r3, [pc, #44]	; (1471c <_lv_txt_get_size+0xf8>)
   146f0:	2271      	movs	r2, #113	; 0x71
   146f2:	490b      	ldr	r1, [pc, #44]	; (14720 <_lv_txt_get_size+0xfc>)
   146f4:	2002      	movs	r0, #2
   146f6:	4c0b      	ldr	r4, [pc, #44]	; (14724 <_lv_txt_get_size+0x100>)
   146f8:	47a0      	blx	r4
}
   146fa:	b009      	add	sp, #36	; 0x24
   146fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y += letter_height + line_space;
   14700:	8863      	ldrh	r3, [r4, #2]
   14702:	9a05      	ldr	r2, [sp, #20]
   14704:	441a      	add	r2, r3
   14706:	8062      	strh	r2, [r4, #2]
   14708:	e7e8      	b.n	146dc <_lv_txt_get_size+0xb8>
        size_res->y = letter_height;
   1470a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1470e:	8063      	strh	r3, [r4, #2]
   14710:	e7f3      	b.n	146fa <_lv_txt_get_size+0xd6>
   14712:	bf00      	nop
   14714:	00014585 	.word	0x00014585
   14718:	00020a28 	.word	0x00020a28
   1471c:	000209e4 	.word	0x000209e4
   14720:	00020a00 	.word	0x00020a00
   14724:	00012805 	.word	0x00012805
   14728:	00014359 	.word	0x00014359

0001472c <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   1472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14730:	4681      	mov	r9, r0
   14732:	468a      	mov	sl, r1
   14734:	461f      	mov	r7, r3
   14736:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   1473a:	4614      	mov	r4, r2
   1473c:	b932      	cbnz	r2, 1474c <_lv_utils_bsearch+0x20>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   1473e:	2000      	movs	r0, #0
   14740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(c < 0) {
   14744:	2800      	cmp	r0, #0
   14746:	da14      	bge.n	14772 <_lv_utils_bsearch+0x46>
            n /= 2;
   14748:	462c      	mov	r4, r5
    for(middle = base; n != 0;) {
   1474a:	b17c      	cbz	r4, 1476c <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
   1474c:	0865      	lsrs	r5, r4, #1
   1474e:	fb07 a605 	mla	r6, r7, r5, sl
        if((c = (*cmp)(key, middle)) > 0) {
   14752:	4631      	mov	r1, r6
   14754:	4648      	mov	r0, r9
   14756:	47c0      	blx	r8
   14758:	2800      	cmp	r0, #0
   1475a:	ddf3      	ble.n	14744 <_lv_utils_bsearch+0x18>
            n    = (n / 2) - ((n & 1) == 0);
   1475c:	f084 0401 	eor.w	r4, r4, #1
   14760:	f004 0401 	and.w	r4, r4, #1
   14764:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
   14766:	eb06 0a07 	add.w	sl, r6, r7
   1476a:	e7ee      	b.n	1474a <_lv_utils_bsearch+0x1e>
    return NULL;
   1476c:	2000      	movs	r0, #0
   1476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        middle += (n / 2) * size;
   14772:	4630      	mov	r0, r6
}
   14774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00014778 <lv_theme_set_act>:
 * From now, all the created objects will use styles from this theme by default
 * @param th pointer to theme (return value of: 'lv_theme_init_xxx()')
 */
void lv_theme_set_act(lv_theme_t * th)
{
    act_theme = th;
   14778:	4b01      	ldr	r3, [pc, #4]	; (14780 <lv_theme_set_act+0x8>)
   1477a:	6018      	str	r0, [r3, #0]
   1477c:	4770      	bx	lr
   1477e:	bf00      	nop
   14780:	20006bd4 	.word	0x20006bd4

00014784 <lv_theme_get_font_normal>:
 * Get the normal font of the theme
 * @return pointer to the font
 */
const lv_font_t * lv_theme_get_font_normal(void)
{
    return act_theme->font_normal;
   14784:	4b01      	ldr	r3, [pc, #4]	; (1478c <lv_theme_get_font_normal+0x8>)
   14786:	681b      	ldr	r3, [r3, #0]
}
   14788:	68d8      	ldr	r0, [r3, #12]
   1478a:	4770      	bx	lr
   1478c:	20006bd4 	.word	0x20006bd4

00014790 <lv_theme_apply>:
{
    return act_theme->flags;
}

void lv_theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   14790:	b508      	push	{r3, lr}
    act_theme->apply_xcb(obj, name);
   14792:	4b02      	ldr	r3, [pc, #8]	; (1479c <lv_theme_apply+0xc>)
   14794:	681b      	ldr	r3, [r3, #0]
   14796:	681b      	ldr	r3, [r3, #0]
   14798:	4798      	blx	r3
   1479a:	bd08      	pop	{r3, pc}
   1479c:	20006bd4 	.word	0x20006bd4

000147a0 <theme_apply>:
    return &theme;
}


static void theme_apply(lv_obj_t * obj, lv_theme_style_t name)
{
   147a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   147a4:	4604      	mov	r4, r0
    lv_style_list_t * list;

    switch(name) {
   147a6:	3901      	subs	r1, #1
   147a8:	2927      	cmp	r1, #39	; 0x27
   147aa:	d834      	bhi.n	14816 <theme_apply+0x76>
   147ac:	e8df f011 	tbh	[pc, r1, lsl #1]
   147b0:	00390028 	.word	0x00390028
   147b4:	00a100ec 	.word	0x00a100ec
   147b8:	00600053 	.word	0x00600053
   147bc:	00d803a3 	.word	0x00d803a3
   147c0:	02b20144 	.word	0x02b20144
   147c4:	03cc0046 	.word	0x03cc0046
   147c8:	03fe0273 	.word	0x03fe0273
   147cc:	00e000dc 	.word	0x00e000dc
   147d0:	00e40081 	.word	0x00e40081
   147d4:	00e80193 	.word	0x00e80193
   147d8:	02660247 	.word	0x02660247
   147dc:	016a03e3 	.word	0x016a03e3
   147e0:	023f017c 	.word	0x023f017c
   147e4:	022301a0 	.word	0x022301a0
   147e8:	0375011f 	.word	0x0375011f
   147ec:	01080391 	.word	0x01080391
   147f0:	02e000b8 	.word	0x02e000b8
   147f4:	01f401c9 	.word	0x01f401c9
   147f8:	02040347 	.word	0x02040347
   147fc:	033a0312 	.word	0x033a0312
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   14800:	2100      	movs	r1, #0
   14802:	4b9b      	ldr	r3, [pc, #620]	; (14a70 <theme_apply+0x2d0>)
   14804:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   14806:	2100      	movs	r1, #0
   14808:	4620      	mov	r0, r4
   1480a:	4b9a      	ldr	r3, [pc, #616]	; (14a74 <theme_apply+0x2d4>)
   1480c:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
   1480e:	4b9a      	ldr	r3, [pc, #616]	; (14a78 <theme_apply+0x2d8>)
   14810:	6819      	ldr	r1, [r3, #0]
   14812:	4b9a      	ldr	r3, [pc, #616]	; (14a7c <theme_apply+0x2dc>)
   14814:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_STYLE_PROP_ALL);
   14816:	21ff      	movs	r1, #255	; 0xff
   14818:	4620      	mov	r0, r4
   1481a:	4b99      	ldr	r3, [pc, #612]	; (14a80 <theme_apply+0x2e0>)
   1481c:	4798      	blx	r3
   1481e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   14822:	2100      	movs	r1, #0
   14824:	4b92      	ldr	r3, [pc, #584]	; (14a70 <theme_apply+0x2d0>)
   14826:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   14828:	2100      	movs	r1, #0
   1482a:	4620      	mov	r0, r4
   1482c:	4b91      	ldr	r3, [pc, #580]	; (14a74 <theme_apply+0x2d4>)
   1482e:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   14830:	4b91      	ldr	r3, [pc, #580]	; (14a78 <theme_apply+0x2d8>)
   14832:	6819      	ldr	r1, [r3, #0]
   14834:	3104      	adds	r1, #4
   14836:	4b91      	ldr	r3, [pc, #580]	; (14a7c <theme_apply+0x2dc>)
   14838:	4798      	blx	r3
            break;
   1483a:	e7ec      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1483c:	2100      	movs	r1, #0
   1483e:	4b8c      	ldr	r3, [pc, #560]	; (14a70 <theme_apply+0x2d0>)
   14840:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
   14842:	2100      	movs	r1, #0
   14844:	4620      	mov	r0, r4
   14846:	4b8b      	ldr	r3, [pc, #556]	; (14a74 <theme_apply+0x2d4>)
   14848:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
   1484a:	4b8b      	ldr	r3, [pc, #556]	; (14a78 <theme_apply+0x2d8>)
   1484c:	6819      	ldr	r1, [r3, #0]
   1484e:	3104      	adds	r1, #4
   14850:	4b8a      	ldr	r3, [pc, #552]	; (14a7c <theme_apply+0x2dc>)
   14852:	4798      	blx	r3
            break;
   14854:	e7df      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   14856:	2100      	movs	r1, #0
   14858:	4b85      	ldr	r3, [pc, #532]	; (14a70 <theme_apply+0x2d0>)
   1485a:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1485c:	2100      	movs	r1, #0
   1485e:	4620      	mov	r0, r4
   14860:	4b84      	ldr	r3, [pc, #528]	; (14a74 <theme_apply+0x2d4>)
   14862:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
   14864:	4b84      	ldr	r3, [pc, #528]	; (14a78 <theme_apply+0x2d8>)
   14866:	6819      	ldr	r1, [r3, #0]
   14868:	3110      	adds	r1, #16
   1486a:	4b84      	ldr	r3, [pc, #528]	; (14a7c <theme_apply+0x2dc>)
   1486c:	4798      	blx	r3
            break;
   1486e:	e7d2      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
   14870:	2100      	movs	r1, #0
   14872:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 14a70 <theme_apply+0x2d0>
   14876:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
   14878:	2100      	movs	r1, #0
   1487a:	4620      	mov	r0, r4
   1487c:	4f7d      	ldr	r7, [pc, #500]	; (14a74 <theme_apply+0x2d4>)
   1487e:	47b8      	blx	r7
   14880:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14882:	4e7d      	ldr	r6, [pc, #500]	; (14a78 <theme_apply+0x2d8>)
   14884:	6831      	ldr	r1, [r6, #0]
   14886:	3104      	adds	r1, #4
   14888:	4d7c      	ldr	r5, [pc, #496]	; (14a7c <theme_apply+0x2dc>)
   1488a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   1488c:	6831      	ldr	r1, [r6, #0]
   1488e:	3118      	adds	r1, #24
   14890:	4648      	mov	r0, r9
   14892:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
   14894:	2101      	movs	r1, #1
   14896:	4620      	mov	r0, r4
   14898:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
   1489a:	2101      	movs	r1, #1
   1489c:	4620      	mov	r0, r4
   1489e:	47b8      	blx	r7
   148a0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   148a2:	6831      	ldr	r1, [r6, #0]
   148a4:	3104      	adds	r1, #4
   148a6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   148a8:	6831      	ldr	r1, [r6, #0]
   148aa:	3108      	adds	r1, #8
   148ac:	4638      	mov	r0, r7
   148ae:	47a8      	blx	r5
            break;
   148b0:	e7b1      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
   148b2:	2100      	movs	r1, #0
   148b4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 14a70 <theme_apply+0x2d0>
   148b8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
   148ba:	2100      	movs	r1, #0
   148bc:	4620      	mov	r0, r4
   148be:	4f6d      	ldr	r7, [pc, #436]	; (14a74 <theme_apply+0x2d4>)
   148c0:	47b8      	blx	r7
   148c2:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->scr);
   148c4:	4e6c      	ldr	r6, [pc, #432]	; (14a78 <theme_apply+0x2d8>)
   148c6:	6831      	ldr	r1, [r6, #0]
   148c8:	4d6c      	ldr	r5, [pc, #432]	; (14a7c <theme_apply+0x2dc>)
   148ca:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
   148cc:	6831      	ldr	r1, [r6, #0]
   148ce:	3168      	adds	r1, #104	; 0x68
   148d0:	4648      	mov	r0, r9
   148d2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
   148d4:	2101      	movs	r1, #1
   148d6:	4620      	mov	r0, r4
   148d8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
   148da:	2101      	movs	r1, #1
   148dc:	4620      	mov	r0, r4
   148de:	47b8      	blx	r7
   148e0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   148e2:	6831      	ldr	r1, [r6, #0]
   148e4:	3104      	adds	r1, #4
   148e6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   148e8:	6831      	ldr	r1, [r6, #0]
   148ea:	3108      	adds	r1, #8
   148ec:	4638      	mov	r0, r7
   148ee:	47a8      	blx	r5
            break;
   148f0:	e791      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
   148f2:	2100      	movs	r1, #0
   148f4:	f8df 8178 	ldr.w	r8, [pc, #376]	; 14a70 <theme_apply+0x2d0>
   148f8:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
   148fa:	2100      	movs	r1, #0
   148fc:	4620      	mov	r0, r4
   148fe:	4f5d      	ldr	r7, [pc, #372]	; (14a74 <theme_apply+0x2d4>)
   14900:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   14902:	4e5d      	ldr	r6, [pc, #372]	; (14a78 <theme_apply+0x2d8>)
   14904:	6831      	ldr	r1, [r6, #0]
   14906:	3124      	adds	r1, #36	; 0x24
   14908:	4d5c      	ldr	r5, [pc, #368]	; (14a7c <theme_apply+0x2dc>)
   1490a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
   1490c:	2101      	movs	r1, #1
   1490e:	4620      	mov	r0, r4
   14910:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
   14912:	2101      	movs	r1, #1
   14914:	4620      	mov	r0, r4
   14916:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   14918:	6831      	ldr	r1, [r6, #0]
   1491a:	3128      	adds	r1, #40	; 0x28
   1491c:	47a8      	blx	r5
            break;
   1491e:	e77a      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
   14920:	2100      	movs	r1, #0
   14922:	f8df 814c 	ldr.w	r8, [pc, #332]	; 14a70 <theme_apply+0x2d0>
   14926:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
   14928:	2100      	movs	r1, #0
   1492a:	4620      	mov	r0, r4
   1492c:	4f51      	ldr	r7, [pc, #324]	; (14a74 <theme_apply+0x2d4>)
   1492e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
   14930:	4e51      	ldr	r6, [pc, #324]	; (14a78 <theme_apply+0x2d8>)
   14932:	6831      	ldr	r1, [r6, #0]
   14934:	3124      	adds	r1, #36	; 0x24
   14936:	4d51      	ldr	r5, [pc, #324]	; (14a7c <theme_apply+0x2dc>)
   14938:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
   1493a:	2101      	movs	r1, #1
   1493c:	4620      	mov	r0, r4
   1493e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
   14940:	2101      	movs	r1, #1
   14942:	4620      	mov	r0, r4
   14944:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   14946:	6831      	ldr	r1, [r6, #0]
   14948:	3128      	adds	r1, #40	; 0x28
   1494a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
   1494c:	2102      	movs	r1, #2
   1494e:	4620      	mov	r0, r4
   14950:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
   14952:	2102      	movs	r1, #2
   14954:	4620      	mov	r0, r4
   14956:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
   14958:	6831      	ldr	r1, [r6, #0]
   1495a:	319c      	adds	r1, #156	; 0x9c
   1495c:	47a8      	blx	r5
            break;
   1495e:	e75a      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
   14960:	2100      	movs	r1, #0
   14962:	4b43      	ldr	r3, [pc, #268]	; (14a70 <theme_apply+0x2d0>)
   14964:	4798      	blx	r3
            break;
   14966:	e756      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   14968:	2100      	movs	r1, #0
   1496a:	4b41      	ldr	r3, [pc, #260]	; (14a70 <theme_apply+0x2d0>)
   1496c:	4798      	blx	r3
            break;
   1496e:	e752      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
   14970:	2100      	movs	r1, #0
   14972:	4b3f      	ldr	r3, [pc, #252]	; (14a70 <theme_apply+0x2d0>)
   14974:	4798      	blx	r3
            break;
   14976:	e74e      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   14978:	2100      	movs	r1, #0
   1497a:	4b3d      	ldr	r3, [pc, #244]	; (14a70 <theme_apply+0x2d0>)
   1497c:	4798      	blx	r3
            break;
   1497e:	e74a      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
   14980:	2100      	movs	r1, #0
   14982:	4b3b      	ldr	r3, [pc, #236]	; (14a70 <theme_apply+0x2d0>)
   14984:	4798      	blx	r3
            break;
   14986:	e746      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
   14988:	2100      	movs	r1, #0
   1498a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 14a70 <theme_apply+0x2d0>
   1498e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
   14990:	2100      	movs	r1, #0
   14992:	4620      	mov	r0, r4
   14994:	4f37      	ldr	r7, [pc, #220]	; (14a74 <theme_apply+0x2d4>)
   14996:	47b8      	blx	r7
   14998:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   1499a:	4e37      	ldr	r6, [pc, #220]	; (14a78 <theme_apply+0x2d8>)
   1499c:	6831      	ldr	r1, [r6, #0]
   1499e:	3104      	adds	r1, #4
   149a0:	4d36      	ldr	r5, [pc, #216]	; (14a7c <theme_apply+0x2dc>)
   149a2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
   149a4:	6831      	ldr	r1, [r6, #0]
   149a6:	3120      	adds	r1, #32
   149a8:	4648      	mov	r0, r9
   149aa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
   149ac:	2101      	movs	r1, #1
   149ae:	4620      	mov	r0, r4
   149b0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
   149b2:	2101      	movs	r1, #1
   149b4:	4620      	mov	r0, r4
   149b6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   149b8:	6831      	ldr	r1, [r6, #0]
   149ba:	311c      	adds	r1, #28
   149bc:	47a8      	blx	r5
            break;
   149be:	e72a      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
   149c0:	2100      	movs	r1, #0
   149c2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 14a70 <theme_apply+0x2d0>
   149c6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
   149c8:	2100      	movs	r1, #0
   149ca:	4620      	mov	r0, r4
   149cc:	4f29      	ldr	r7, [pc, #164]	; (14a74 <theme_apply+0x2d4>)
   149ce:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
   149d0:	4e29      	ldr	r6, [pc, #164]	; (14a78 <theme_apply+0x2d8>)
   149d2:	6831      	ldr	r1, [r6, #0]
   149d4:	3120      	adds	r1, #32
   149d6:	4d29      	ldr	r5, [pc, #164]	; (14a7c <theme_apply+0x2dc>)
   149d8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
   149da:	2101      	movs	r1, #1
   149dc:	4620      	mov	r0, r4
   149de:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
   149e0:	2101      	movs	r1, #1
   149e2:	4620      	mov	r0, r4
   149e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
   149e6:	6831      	ldr	r1, [r6, #0]
   149e8:	311c      	adds	r1, #28
   149ea:	47a8      	blx	r5
            break;
   149ec:	e713      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
   149ee:	2100      	movs	r1, #0
   149f0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 14a70 <theme_apply+0x2d0>
   149f4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
   149f6:	2100      	movs	r1, #0
   149f8:	4620      	mov	r0, r4
   149fa:	4f1e      	ldr	r7, [pc, #120]	; (14a74 <theme_apply+0x2d4>)
   149fc:	47b8      	blx	r7
   149fe:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
   14a00:	4e1d      	ldr	r6, [pc, #116]	; (14a78 <theme_apply+0x2d8>)
   14a02:	6831      	ldr	r1, [r6, #0]
   14a04:	3124      	adds	r1, #36	; 0x24
   14a06:	4d1d      	ldr	r5, [pc, #116]	; (14a7c <theme_apply+0x2dc>)
   14a08:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
   14a0a:	6831      	ldr	r1, [r6, #0]
   14a0c:	3194      	adds	r1, #148	; 0x94
   14a0e:	4648      	mov	r0, r9
   14a10:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
   14a12:	2101      	movs	r1, #1
   14a14:	4620      	mov	r0, r4
   14a16:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
   14a18:	2101      	movs	r1, #1
   14a1a:	4620      	mov	r0, r4
   14a1c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
   14a1e:	6831      	ldr	r1, [r6, #0]
   14a20:	3128      	adds	r1, #40	; 0x28
   14a22:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
   14a24:	2102      	movs	r1, #2
   14a26:	4620      	mov	r0, r4
   14a28:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
   14a2a:	2102      	movs	r1, #2
   14a2c:	4620      	mov	r0, r4
   14a2e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
   14a30:	6831      	ldr	r1, [r6, #0]
   14a32:	3190      	adds	r1, #144	; 0x90
   14a34:	47a8      	blx	r5
            break;
   14a36:	e6ee      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
   14a38:	2100      	movs	r1, #0
   14a3a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 14a70 <theme_apply+0x2d0>
   14a3e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
   14a40:	2100      	movs	r1, #0
   14a42:	4620      	mov	r0, r4
   14a44:	4f0b      	ldr	r7, [pc, #44]	; (14a74 <theme_apply+0x2d4>)
   14a46:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
   14a48:	4e0b      	ldr	r6, [pc, #44]	; (14a78 <theme_apply+0x2d8>)
   14a4a:	6831      	ldr	r1, [r6, #0]
   14a4c:	314c      	adds	r1, #76	; 0x4c
   14a4e:	4d0b      	ldr	r5, [pc, #44]	; (14a7c <theme_apply+0x2dc>)
   14a50:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
   14a52:	2140      	movs	r1, #64	; 0x40
   14a54:	4620      	mov	r0, r4
   14a56:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
   14a58:	2140      	movs	r1, #64	; 0x40
   14a5a:	4620      	mov	r0, r4
   14a5c:	47b8      	blx	r7
   14a5e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
   14a60:	6831      	ldr	r1, [r6, #0]
   14a62:	3110      	adds	r1, #16
   14a64:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
   14a66:	6831      	ldr	r1, [r6, #0]
   14a68:	3150      	adds	r1, #80	; 0x50
   14a6a:	4638      	mov	r0, r7
   14a6c:	47a8      	blx	r5
            break;
   14a6e:	e6d2      	b.n	14816 <theme_apply+0x76>
   14a70:	00003755 	.word	0x00003755
   14a74:	00003685 	.word	0x00003685
   14a78:	20006bd8 	.word	0x20006bd8
   14a7c:	00006b81 	.word	0x00006b81
   14a80:	00004121 	.word	0x00004121
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
   14a84:	2100      	movs	r1, #0
   14a86:	4b9f      	ldr	r3, [pc, #636]	; (14d04 <theme_apply+0x564>)
   14a88:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
   14a8a:	2100      	movs	r1, #0
   14a8c:	4620      	mov	r0, r4
   14a8e:	4b9e      	ldr	r3, [pc, #632]	; (14d08 <theme_apply+0x568>)
   14a90:	4798      	blx	r3
   14a92:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   14a94:	4e9d      	ldr	r6, [pc, #628]	; (14d0c <theme_apply+0x56c>)
   14a96:	6831      	ldr	r1, [r6, #0]
   14a98:	3104      	adds	r1, #4
   14a9a:	4d9d      	ldr	r5, [pc, #628]	; (14d10 <theme_apply+0x570>)
   14a9c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
   14a9e:	6831      	ldr	r1, [r6, #0]
   14aa0:	317c      	adds	r1, #124	; 0x7c
   14aa2:	4638      	mov	r0, r7
   14aa4:	47a8      	blx	r5
            break;
   14aa6:	e6b6      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   14aa8:	2140      	movs	r1, #64	; 0x40
   14aaa:	f8df 8258 	ldr.w	r8, [pc, #600]	; 14d04 <theme_apply+0x564>
   14aae:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
   14ab0:	2140      	movs	r1, #64	; 0x40
   14ab2:	4620      	mov	r0, r4
   14ab4:	4f94      	ldr	r7, [pc, #592]	; (14d08 <theme_apply+0x568>)
   14ab6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
   14ab8:	4e94      	ldr	r6, [pc, #592]	; (14d0c <theme_apply+0x56c>)
   14aba:	6831      	ldr	r1, [r6, #0]
   14abc:	3118      	adds	r1, #24
   14abe:	4d94      	ldr	r5, [pc, #592]	; (14d10 <theme_apply+0x570>)
   14ac0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
   14ac2:	2141      	movs	r1, #65	; 0x41
   14ac4:	4620      	mov	r0, r4
   14ac6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
   14ac8:	2141      	movs	r1, #65	; 0x41
   14aca:	4620      	mov	r0, r4
   14acc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
   14ace:	6831      	ldr	r1, [r6, #0]
   14ad0:	3110      	adds	r1, #16
   14ad2:	47a8      	blx	r5
            break;
   14ad4:	e69f      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
   14ad6:	2100      	movs	r1, #0
   14ad8:	4b8a      	ldr	r3, [pc, #552]	; (14d04 <theme_apply+0x564>)
   14ada:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
   14adc:	2100      	movs	r1, #0
   14ade:	4620      	mov	r0, r4
   14ae0:	4b89      	ldr	r3, [pc, #548]	; (14d08 <theme_apply+0x568>)
   14ae2:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
   14ae4:	4b89      	ldr	r3, [pc, #548]	; (14d0c <theme_apply+0x56c>)
   14ae6:	6819      	ldr	r1, [r3, #0]
   14ae8:	316c      	adds	r1, #108	; 0x6c
   14aea:	4b89      	ldr	r3, [pc, #548]	; (14d10 <theme_apply+0x570>)
   14aec:	4798      	blx	r3
            break;
   14aee:	e692      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   14af0:	2100      	movs	r1, #0
   14af2:	f8df 8210 	ldr.w	r8, [pc, #528]	; 14d04 <theme_apply+0x564>
   14af6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
   14af8:	2100      	movs	r1, #0
   14afa:	4620      	mov	r0, r4
   14afc:	4f82      	ldr	r7, [pc, #520]	; (14d08 <theme_apply+0x568>)
   14afe:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   14b00:	4e82      	ldr	r6, [pc, #520]	; (14d0c <theme_apply+0x56c>)
   14b02:	6831      	ldr	r1, [r6, #0]
   14b04:	3104      	adds	r1, #4
   14b06:	4d82      	ldr	r5, [pc, #520]	; (14d10 <theme_apply+0x570>)
   14b08:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   14b0a:	2140      	movs	r1, #64	; 0x40
   14b0c:	4620      	mov	r0, r4
   14b0e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   14b10:	2140      	movs	r1, #64	; 0x40
   14b12:	4620      	mov	r0, r4
   14b14:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
   14b16:	6831      	ldr	r1, [r6, #0]
   14b18:	3114      	adds	r1, #20
   14b1a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   14b1c:	2101      	movs	r1, #1
   14b1e:	4620      	mov	r0, r4
   14b20:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
   14b22:	2101      	movs	r1, #1
   14b24:	4620      	mov	r0, r4
   14b26:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14b28:	6831      	ldr	r1, [r6, #0]
   14b2a:	3180      	adds	r1, #128	; 0x80
   14b2c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   14b2e:	2102      	movs	r1, #2
   14b30:	4620      	mov	r0, r4
   14b32:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
   14b34:	2102      	movs	r1, #2
   14b36:	4620      	mov	r0, r4
   14b38:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   14b3a:	6831      	ldr	r1, [r6, #0]
   14b3c:	3184      	adds	r1, #132	; 0x84
   14b3e:	47a8      	blx	r5
            break;
   14b40:	e669      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
   14b42:	2100      	movs	r1, #0
   14b44:	4d6f      	ldr	r5, [pc, #444]	; (14d04 <theme_apply+0x564>)
   14b46:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
   14b48:	2100      	movs	r1, #0
   14b4a:	4620      	mov	r0, r4
   14b4c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 14d08 <theme_apply+0x568>
   14b50:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->scr);
   14b52:	4f6e      	ldr	r7, [pc, #440]	; (14d0c <theme_apply+0x56c>)
   14b54:	6839      	ldr	r1, [r7, #0]
   14b56:	4e6e      	ldr	r6, [pc, #440]	; (14d10 <theme_apply+0x570>)
   14b58:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCRLLABLE);
   14b5a:	2140      	movs	r1, #64	; 0x40
   14b5c:	4620      	mov	r0, r4
   14b5e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   14b60:	2141      	movs	r1, #65	; 0x41
   14b62:	4620      	mov	r0, r4
   14b64:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
   14b66:	2141      	movs	r1, #65	; 0x41
   14b68:	4620      	mov	r0, r4
   14b6a:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   14b6c:	6839      	ldr	r1, [r7, #0]
   14b6e:	31a8      	adds	r1, #168	; 0xa8
   14b70:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
   14b72:	2143      	movs	r1, #67	; 0x43
   14b74:	4620      	mov	r0, r4
   14b76:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
   14b78:	2143      	movs	r1, #67	; 0x43
   14b7a:	4620      	mov	r0, r4
   14b7c:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_indic);
   14b7e:	6839      	ldr	r1, [r7, #0]
   14b80:	31ac      	adds	r1, #172	; 0xac
   14b82:	47b0      	blx	r6
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   14b84:	2142      	movs	r1, #66	; 0x42
   14b86:	4620      	mov	r0, r4
   14b88:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
   14b8a:	2142      	movs	r1, #66	; 0x42
   14b8c:	4620      	mov	r0, r4
   14b8e:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->tabview_btns);
   14b90:	6839      	ldr	r1, [r7, #0]
   14b92:	31a4      	adds	r1, #164	; 0xa4
   14b94:	47b0      	blx	r6
            break;
   14b96:	e63e      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
   14b98:	2100      	movs	r1, #0
   14b9a:	4d5a      	ldr	r5, [pc, #360]	; (14d04 <theme_apply+0x564>)
   14b9c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   14b9e:	2140      	movs	r1, #64	; 0x40
   14ba0:	4620      	mov	r0, r4
   14ba2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
   14ba4:	2140      	movs	r1, #64	; 0x40
   14ba6:	4620      	mov	r0, r4
   14ba8:	4b57      	ldr	r3, [pc, #348]	; (14d08 <theme_apply+0x568>)
   14baa:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   14bac:	4b57      	ldr	r3, [pc, #348]	; (14d0c <theme_apply+0x56c>)
   14bae:	6819      	ldr	r1, [r3, #0]
   14bb0:	31b0      	adds	r1, #176	; 0xb0
   14bb2:	4b57      	ldr	r3, [pc, #348]	; (14d10 <theme_apply+0x570>)
   14bb4:	4798      	blx	r3
            break;
   14bb6:	e62e      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
   14bb8:	2100      	movs	r1, #0
   14bba:	f8df 8148 	ldr.w	r8, [pc, #328]	; 14d04 <theme_apply+0x564>
   14bbe:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
   14bc0:	2100      	movs	r1, #0
   14bc2:	4620      	mov	r0, r4
   14bc4:	4f50      	ldr	r7, [pc, #320]	; (14d08 <theme_apply+0x568>)
   14bc6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   14bc8:	4e50      	ldr	r6, [pc, #320]	; (14d0c <theme_apply+0x56c>)
   14bca:	6831      	ldr	r1, [r6, #0]
   14bcc:	4d50      	ldr	r5, [pc, #320]	; (14d10 <theme_apply+0x570>)
   14bce:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   14bd0:	2101      	movs	r1, #1
   14bd2:	4620      	mov	r0, r4
   14bd4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
   14bd6:	2101      	movs	r1, #1
   14bd8:	4620      	mov	r0, r4
   14bda:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14bdc:	6831      	ldr	r1, [r6, #0]
   14bde:	3180      	adds	r1, #128	; 0x80
   14be0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   14be2:	2102      	movs	r1, #2
   14be4:	4620      	mov	r0, r4
   14be6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
   14be8:	2102      	movs	r1, #2
   14bea:	4620      	mov	r0, r4
   14bec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
   14bee:	6831      	ldr	r1, [r6, #0]
   14bf0:	3184      	adds	r1, #132	; 0x84
   14bf2:	47a8      	blx	r5
            break;
   14bf4:	e60f      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
   14bf6:	2100      	movs	r1, #0
   14bf8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 14d04 <theme_apply+0x564>
   14bfc:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
   14bfe:	2100      	movs	r1, #0
   14c00:	4620      	mov	r0, r4
   14c02:	4f41      	ldr	r7, [pc, #260]	; (14d08 <theme_apply+0x568>)
   14c04:	47b8      	blx	r7
   14c06:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14c08:	4e40      	ldr	r6, [pc, #256]	; (14d0c <theme_apply+0x56c>)
   14c0a:	6831      	ldr	r1, [r6, #0]
   14c0c:	3104      	adds	r1, #4
   14c0e:	4d40      	ldr	r5, [pc, #256]	; (14d10 <theme_apply+0x570>)
   14c10:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
   14c12:	6831      	ldr	r1, [r6, #0]
   14c14:	3188      	adds	r1, #136	; 0x88
   14c16:	4648      	mov	r0, r9
   14c18:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
   14c1a:	2103      	movs	r1, #3
   14c1c:	4620      	mov	r0, r4
   14c1e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
   14c20:	2103      	movs	r1, #3
   14c22:	4620      	mov	r0, r4
   14c24:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
   14c26:	6831      	ldr	r1, [r6, #0]
   14c28:	318c      	adds	r1, #140	; 0x8c
   14c2a:	47a8      	blx	r5
            break;
   14c2c:	e5f3      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
   14c2e:	2100      	movs	r1, #0
   14c30:	4b34      	ldr	r3, [pc, #208]	; (14d04 <theme_apply+0x564>)
   14c32:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
   14c34:	2100      	movs	r1, #0
   14c36:	4620      	mov	r0, r4
   14c38:	4b33      	ldr	r3, [pc, #204]	; (14d08 <theme_apply+0x568>)
   14c3a:	4798      	blx	r3
            break;
   14c3c:	e5eb      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
   14c3e:	2100      	movs	r1, #0
   14c40:	4f30      	ldr	r7, [pc, #192]	; (14d04 <theme_apply+0x564>)
   14c42:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
   14c44:	2100      	movs	r1, #0
   14c46:	4620      	mov	r0, r4
   14c48:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 14d08 <theme_apply+0x568>
   14c4c:	47c0      	blx	r8
   14c4e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14c50:	4e2e      	ldr	r6, [pc, #184]	; (14d0c <theme_apply+0x56c>)
   14c52:	6831      	ldr	r1, [r6, #0]
   14c54:	3104      	adds	r1, #4
   14c56:	4d2e      	ldr	r5, [pc, #184]	; (14d10 <theme_apply+0x570>)
   14c58:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
   14c5a:	6831      	ldr	r1, [r6, #0]
   14c5c:	3174      	adds	r1, #116	; 0x74
   14c5e:	4648      	mov	r0, r9
   14c60:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
   14c62:	2140      	movs	r1, #64	; 0x40
   14c64:	4620      	mov	r0, r4
   14c66:	47b8      	blx	r7
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
   14c68:	2101      	movs	r1, #1
   14c6a:	4620      	mov	r0, r4
   14c6c:	47b8      	blx	r7
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
   14c6e:	2101      	movs	r1, #1
   14c70:	4620      	mov	r0, r4
   14c72:	47c0      	blx	r8
            _lv_style_list_add_style(list, &styles->sb);
   14c74:	6831      	ldr	r1, [r6, #0]
   14c76:	3180      	adds	r1, #128	; 0x80
   14c78:	47a8      	blx	r5
            break;
   14c7a:	e5cc      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   14c7c:	2100      	movs	r1, #0
   14c7e:	4b21      	ldr	r3, [pc, #132]	; (14d04 <theme_apply+0x564>)
   14c80:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   14c82:	2100      	movs	r1, #0
   14c84:	4620      	mov	r0, r4
   14c86:	4b20      	ldr	r3, [pc, #128]	; (14d08 <theme_apply+0x568>)
   14c88:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
   14c8a:	4b20      	ldr	r3, [pc, #128]	; (14d0c <theme_apply+0x56c>)
   14c8c:	6819      	ldr	r1, [r3, #0]
   14c8e:	3178      	adds	r1, #120	; 0x78
   14c90:	4b1f      	ldr	r3, [pc, #124]	; (14d10 <theme_apply+0x570>)
   14c92:	4798      	blx	r3
            break;
   14c94:	e5bf      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
   14c96:	2100      	movs	r1, #0
   14c98:	f8df 8068 	ldr.w	r8, [pc, #104]	; 14d04 <theme_apply+0x564>
   14c9c:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
   14c9e:	2100      	movs	r1, #0
   14ca0:	4620      	mov	r0, r4
   14ca2:	4f19      	ldr	r7, [pc, #100]	; (14d08 <theme_apply+0x568>)
   14ca4:	47b8      	blx	r7
   14ca6:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14ca8:	4e18      	ldr	r6, [pc, #96]	; (14d0c <theme_apply+0x56c>)
   14caa:	6831      	ldr	r1, [r6, #0]
   14cac:	3104      	adds	r1, #4
   14cae:	4d18      	ldr	r5, [pc, #96]	; (14d10 <theme_apply+0x570>)
   14cb0:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   14cb2:	6831      	ldr	r1, [r6, #0]
   14cb4:	3108      	adds	r1, #8
   14cb6:	4648      	mov	r0, r9
   14cb8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14cba:	6831      	ldr	r1, [r6, #0]
   14cbc:	3118      	adds	r1, #24
   14cbe:	4648      	mov	r0, r9
   14cc0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
   14cc2:	2140      	movs	r1, #64	; 0x40
   14cc4:	4620      	mov	r0, r4
   14cc6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
   14cc8:	2140      	movs	r1, #64	; 0x40
   14cca:	4620      	mov	r0, r4
   14ccc:	47b8      	blx	r7
   14cce:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14cd0:	6831      	ldr	r1, [r6, #0]
   14cd2:	3104      	adds	r1, #4
   14cd4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
   14cd6:	6831      	ldr	r1, [r6, #0]
   14cd8:	3154      	adds	r1, #84	; 0x54
   14cda:	4648      	mov	r0, r9
   14cdc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   14cde:	2141      	movs	r1, #65	; 0x41
   14ce0:	4620      	mov	r0, r4
   14ce2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
   14ce4:	2141      	movs	r1, #65	; 0x41
   14ce6:	4620      	mov	r0, r4
   14ce8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14cea:	6831      	ldr	r1, [r6, #0]
   14cec:	3180      	adds	r1, #128	; 0x80
   14cee:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   14cf0:	2142      	movs	r1, #66	; 0x42
   14cf2:	4620      	mov	r0, r4
   14cf4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
   14cf6:	2142      	movs	r1, #66	; 0x42
   14cf8:	4620      	mov	r0, r4
   14cfa:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
   14cfc:	6831      	ldr	r1, [r6, #0]
   14cfe:	3158      	adds	r1, #88	; 0x58
   14d00:	47a8      	blx	r5
            break;
   14d02:	e588      	b.n	14816 <theme_apply+0x76>
   14d04:	00003755 	.word	0x00003755
   14d08:	00003685 	.word	0x00003685
   14d0c:	20006bd8 	.word	0x20006bd8
   14d10:	00006b81 	.word	0x00006b81
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
   14d14:	2100      	movs	r1, #0
   14d16:	f8df 8290 	ldr.w	r8, [pc, #656]	; 14fa8 <theme_apply+0x808>
   14d1a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
   14d1c:	2100      	movs	r1, #0
   14d1e:	4620      	mov	r0, r4
   14d20:	4f9e      	ldr	r7, [pc, #632]	; (14f9c <theme_apply+0x7fc>)
   14d22:	47b8      	blx	r7
   14d24:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14d26:	4e9e      	ldr	r6, [pc, #632]	; (14fa0 <theme_apply+0x800>)
   14d28:	6831      	ldr	r1, [r6, #0]
   14d2a:	3104      	adds	r1, #4
   14d2c:	4d9d      	ldr	r5, [pc, #628]	; (14fa4 <theme_apply+0x804>)
   14d2e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
   14d30:	6831      	ldr	r1, [r6, #0]
   14d32:	3140      	adds	r1, #64	; 0x40
   14d34:	4648      	mov	r0, r9
   14d36:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14d38:	6831      	ldr	r1, [r6, #0]
   14d3a:	3118      	adds	r1, #24
   14d3c:	4648      	mov	r0, r9
   14d3e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
   14d40:	2101      	movs	r1, #1
   14d42:	4620      	mov	r0, r4
   14d44:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
   14d46:	2101      	movs	r1, #1
   14d48:	4620      	mov	r0, r4
   14d4a:	47b8      	blx	r7
   14d4c:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->pad_small);
   14d4e:	6831      	ldr	r1, [r6, #0]
   14d50:	3118      	adds	r1, #24
   14d52:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
   14d54:	6831      	ldr	r1, [r6, #0]
   14d56:	3144      	adds	r1, #68	; 0x44
   14d58:	4648      	mov	r0, r9
   14d5a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
   14d5c:	2102      	movs	r1, #2
   14d5e:	4620      	mov	r0, r4
   14d60:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
   14d62:	2102      	movs	r1, #2
   14d64:	4620      	mov	r0, r4
   14d66:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
   14d68:	6831      	ldr	r1, [r6, #0]
   14d6a:	3148      	adds	r1, #72	; 0x48
   14d6c:	47a8      	blx	r5
            break;
   14d6e:	e552      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
   14d70:	2100      	movs	r1, #0
   14d72:	f8df 8234 	ldr.w	r8, [pc, #564]	; 14fa8 <theme_apply+0x808>
   14d76:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
   14d78:	2100      	movs	r1, #0
   14d7a:	4620      	mov	r0, r4
   14d7c:	4f87      	ldr	r7, [pc, #540]	; (14f9c <theme_apply+0x7fc>)
   14d7e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   14d80:	4e87      	ldr	r6, [pc, #540]	; (14fa0 <theme_apply+0x800>)
   14d82:	6831      	ldr	r1, [r6, #0]
   14d84:	3104      	adds	r1, #4
   14d86:	4d87      	ldr	r5, [pc, #540]	; (14fa4 <theme_apply+0x804>)
   14d88:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
   14d8a:	2101      	movs	r1, #1
   14d8c:	4620      	mov	r0, r4
   14d8e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL1);
   14d90:	2101      	movs	r1, #1
   14d92:	4620      	mov	r0, r4
   14d94:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   14d96:	6831      	ldr	r1, [r6, #0]
   14d98:	31a0      	adds	r1, #160	; 0xa0
   14d9a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
   14d9c:	2102      	movs	r1, #2
   14d9e:	4620      	mov	r0, r4
   14da0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL2);
   14da2:	2102      	movs	r1, #2
   14da4:	4620      	mov	r0, r4
   14da6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   14da8:	6831      	ldr	r1, [r6, #0]
   14daa:	31a0      	adds	r1, #160	; 0xa0
   14dac:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
   14dae:	2103      	movs	r1, #3
   14db0:	4620      	mov	r0, r4
   14db2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL3);
   14db4:	2103      	movs	r1, #3
   14db6:	4620      	mov	r0, r4
   14db8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   14dba:	6831      	ldr	r1, [r6, #0]
   14dbc:	31a0      	adds	r1, #160	; 0xa0
   14dbe:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
   14dc0:	2104      	movs	r1, #4
   14dc2:	4620      	mov	r0, r4
   14dc4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TABLE_PART_CELL4);
   14dc6:	2104      	movs	r1, #4
   14dc8:	4620      	mov	r0, r4
   14dca:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->table_cell);
   14dcc:	6831      	ldr	r1, [r6, #0]
   14dce:	31a0      	adds	r1, #160	; 0xa0
   14dd0:	47a8      	blx	r5
            break;
   14dd2:	e520      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
   14dd4:	2100      	movs	r1, #0
   14dd6:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 14fa8 <theme_apply+0x808>
   14dda:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
   14ddc:	2100      	movs	r1, #0
   14dde:	4620      	mov	r0, r4
   14de0:	4f6e      	ldr	r7, [pc, #440]	; (14f9c <theme_apply+0x7fc>)
   14de2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
   14de4:	4e6e      	ldr	r6, [pc, #440]	; (14fa0 <theme_apply+0x800>)
   14de6:	6831      	ldr	r1, [r6, #0]
   14de8:	4d6e      	ldr	r5, [pc, #440]	; (14fa4 <theme_apply+0x804>)
   14dea:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
   14dec:	2142      	movs	r1, #66	; 0x42
   14dee:	4620      	mov	r0, r4
   14df0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
   14df2:	2142      	movs	r1, #66	; 0x42
   14df4:	4620      	mov	r0, r4
   14df6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14df8:	6831      	ldr	r1, [r6, #0]
   14dfa:	3180      	adds	r1, #128	; 0x80
   14dfc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   14dfe:	2141      	movs	r1, #65	; 0x41
   14e00:	4620      	mov	r0, r4
   14e02:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
   14e04:	2141      	movs	r1, #65	; 0x41
   14e06:	4620      	mov	r0, r4
   14e08:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
   14e0a:	6831      	ldr	r1, [r6, #0]
   14e0c:	31b0      	adds	r1, #176	; 0xb0
   14e0e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
   14e10:	2140      	movs	r1, #64	; 0x40
   14e12:	4620      	mov	r0, r4
   14e14:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
   14e16:	2140      	movs	r1, #64	; 0x40
   14e18:	4620      	mov	r0, r4
   14e1a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
   14e1c:	6831      	ldr	r1, [r6, #0]
   14e1e:	31a8      	adds	r1, #168	; 0xa8
   14e20:	47a8      	blx	r5
            break;
   14e22:	e4f8      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   14e24:	2100      	movs	r1, #0
   14e26:	4b60      	ldr	r3, [pc, #384]	; (14fa8 <theme_apply+0x808>)
   14e28:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   14e2a:	2100      	movs	r1, #0
   14e2c:	4620      	mov	r0, r4
   14e2e:	4b5b      	ldr	r3, [pc, #364]	; (14f9c <theme_apply+0x7fc>)
   14e30:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
   14e32:	4b5b      	ldr	r3, [pc, #364]	; (14fa0 <theme_apply+0x800>)
   14e34:	6819      	ldr	r1, [r3, #0]
   14e36:	31a4      	adds	r1, #164	; 0xa4
   14e38:	4b5a      	ldr	r3, [pc, #360]	; (14fa4 <theme_apply+0x804>)
   14e3a:	4798      	blx	r3
            break;
   14e3c:	e4eb      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
   14e3e:	2100      	movs	r1, #0
   14e40:	f8df 8164 	ldr.w	r8, [pc, #356]	; 14fa8 <theme_apply+0x808>
   14e44:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
   14e46:	2100      	movs	r1, #0
   14e48:	4620      	mov	r0, r4
   14e4a:	4f54      	ldr	r7, [pc, #336]	; (14f9c <theme_apply+0x7fc>)
   14e4c:	47b8      	blx	r7
   14e4e:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14e50:	4e53      	ldr	r6, [pc, #332]	; (14fa0 <theme_apply+0x800>)
   14e52:	6831      	ldr	r1, [r6, #0]
   14e54:	3104      	adds	r1, #4
   14e56:	4d53      	ldr	r5, [pc, #332]	; (14fa4 <theme_apply+0x804>)
   14e58:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14e5a:	6831      	ldr	r1, [r6, #0]
   14e5c:	3118      	adds	r1, #24
   14e5e:	4648      	mov	r0, r9
   14e60:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   14e62:	2104      	movs	r1, #4
   14e64:	4620      	mov	r0, r4
   14e66:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
   14e68:	2104      	movs	r1, #4
   14e6a:	4620      	mov	r0, r4
   14e6c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
   14e6e:	6831      	ldr	r1, [r6, #0]
   14e70:	31b8      	adds	r1, #184	; 0xb8
   14e72:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   14e74:	2103      	movs	r1, #3
   14e76:	4620      	mov	r0, r4
   14e78:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
   14e7a:	2103      	movs	r1, #3
   14e7c:	4620      	mov	r0, r4
   14e7e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
   14e80:	6831      	ldr	r1, [r6, #0]
   14e82:	31b4      	adds	r1, #180	; 0xb4
   14e84:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   14e86:	2101      	movs	r1, #1
   14e88:	4620      	mov	r0, r4
   14e8a:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
   14e8c:	2101      	movs	r1, #1
   14e8e:	4620      	mov	r0, r4
   14e90:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
   14e92:	6831      	ldr	r1, [r6, #0]
   14e94:	3180      	adds	r1, #128	; 0x80
   14e96:	47a8      	blx	r5
            break;
   14e98:	e4bd      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
   14e9a:	2100      	movs	r1, #0
   14e9c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 14fa8 <theme_apply+0x808>
   14ea0:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
   14ea2:	2100      	movs	r1, #0
   14ea4:	4620      	mov	r0, r4
   14ea6:	4f3d      	ldr	r7, [pc, #244]	; (14f9c <theme_apply+0x7fc>)
   14ea8:	47b8      	blx	r7
   14eaa:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14eac:	4e3c      	ldr	r6, [pc, #240]	; (14fa0 <theme_apply+0x800>)
   14eae:	6831      	ldr	r1, [r6, #0]
   14eb0:	3104      	adds	r1, #4
   14eb2:	4d3c      	ldr	r5, [pc, #240]	; (14fa4 <theme_apply+0x804>)
   14eb4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
   14eb6:	6831      	ldr	r1, [r6, #0]
   14eb8:	3118      	adds	r1, #24
   14eba:	4648      	mov	r0, r9
   14ebc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
   14ebe:	2103      	movs	r1, #3
   14ec0:	4620      	mov	r0, r4
   14ec2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
   14ec4:	2103      	movs	r1, #3
   14ec6:	4620      	mov	r0, r4
   14ec8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
   14eca:	6831      	ldr	r1, [r6, #0]
   14ecc:	3198      	adds	r1, #152	; 0x98
   14ece:	47a8      	blx	r5
            break;
   14ed0:	e4a1      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
   14ed2:	2100      	movs	r1, #0
   14ed4:	4b34      	ldr	r3, [pc, #208]	; (14fa8 <theme_apply+0x808>)
   14ed6:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   14ed8:	2100      	movs	r1, #0
   14eda:	4620      	mov	r0, r4
   14edc:	4b2f      	ldr	r3, [pc, #188]	; (14f9c <theme_apply+0x7fc>)
   14ede:	4798      	blx	r3
   14ee0:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   14ee2:	4e2f      	ldr	r6, [pc, #188]	; (14fa0 <theme_apply+0x800>)
   14ee4:	6831      	ldr	r1, [r6, #0]
   14ee6:	3104      	adds	r1, #4
   14ee8:	4d2e      	ldr	r5, [pc, #184]	; (14fa4 <theme_apply+0x804>)
   14eea:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
   14eec:	6831      	ldr	r1, [r6, #0]
   14eee:	3108      	adds	r1, #8
   14ef0:	4638      	mov	r0, r7
   14ef2:	47a8      	blx	r5
            break;
   14ef4:	e48f      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
   14ef6:	2100      	movs	r1, #0
   14ef8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 14fa8 <theme_apply+0x808>
   14efc:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
   14efe:	2100      	movs	r1, #0
   14f00:	4620      	mov	r0, r4
   14f02:	4f26      	ldr	r7, [pc, #152]	; (14f9c <theme_apply+0x7fc>)
   14f04:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
   14f06:	4e26      	ldr	r6, [pc, #152]	; (14fa0 <theme_apply+0x800>)
   14f08:	6831      	ldr	r1, [r6, #0]
   14f0a:	3104      	adds	r1, #4
   14f0c:	4d25      	ldr	r5, [pc, #148]	; (14fa4 <theme_apply+0x804>)
   14f0e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
   14f10:	2103      	movs	r1, #3
   14f12:	4620      	mov	r0, r4
   14f14:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
   14f16:	2103      	movs	r1, #3
   14f18:	4620      	mov	r0, r4
   14f1a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
   14f1c:	6831      	ldr	r1, [r6, #0]
   14f1e:	312c      	adds	r1, #44	; 0x2c
   14f20:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
   14f22:	2101      	movs	r1, #1
   14f24:	4620      	mov	r0, r4
   14f26:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
   14f28:	2101      	movs	r1, #1
   14f2a:	4620      	mov	r0, r4
   14f2c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
   14f2e:	6831      	ldr	r1, [r6, #0]
   14f30:	3130      	adds	r1, #48	; 0x30
   14f32:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   14f34:	2102      	movs	r1, #2
   14f36:	4620      	mov	r0, r4
   14f38:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
   14f3a:	2102      	movs	r1, #2
   14f3c:	4620      	mov	r0, r4
   14f3e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
   14f40:	6831      	ldr	r1, [r6, #0]
   14f42:	3134      	adds	r1, #52	; 0x34
   14f44:	47a8      	blx	r5
            break;
   14f46:	e466      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
   14f48:	2100      	movs	r1, #0
   14f4a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 14fa8 <theme_apply+0x808>
   14f4e:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
   14f50:	2100      	movs	r1, #0
   14f52:	4620      	mov	r0, r4
   14f54:	4f11      	ldr	r7, [pc, #68]	; (14f9c <theme_apply+0x7fc>)
   14f56:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
   14f58:	4e11      	ldr	r6, [pc, #68]	; (14fa0 <theme_apply+0x800>)
   14f5a:	6831      	ldr	r1, [r6, #0]
   14f5c:	3138      	adds	r1, #56	; 0x38
   14f5e:	4d11      	ldr	r5, [pc, #68]	; (14fa4 <theme_apply+0x804>)
   14f60:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
   14f62:	2101      	movs	r1, #1
   14f64:	4620      	mov	r0, r4
   14f66:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
   14f68:	2101      	movs	r1, #1
   14f6a:	4620      	mov	r0, r4
   14f6c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
   14f6e:	6831      	ldr	r1, [r6, #0]
   14f70:	313c      	adds	r1, #60	; 0x3c
   14f72:	47a8      	blx	r5
            break;
   14f74:	e44f      	b.n	14816 <theme_apply+0x76>
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
   14f76:	2100      	movs	r1, #0
   14f78:	4b0b      	ldr	r3, [pc, #44]	; (14fa8 <theme_apply+0x808>)
   14f7a:	4798      	blx	r3
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
   14f7c:	2100      	movs	r1, #0
   14f7e:	4620      	mov	r0, r4
   14f80:	4b06      	ldr	r3, [pc, #24]	; (14f9c <theme_apply+0x7fc>)
   14f82:	4798      	blx	r3
   14f84:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
   14f86:	4e06      	ldr	r6, [pc, #24]	; (14fa0 <theme_apply+0x800>)
   14f88:	6831      	ldr	r1, [r6, #0]
   14f8a:	3104      	adds	r1, #4
   14f8c:	4d05      	ldr	r5, [pc, #20]	; (14fa4 <theme_apply+0x804>)
   14f8e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
   14f90:	6831      	ldr	r1, [r6, #0]
   14f92:	3170      	adds	r1, #112	; 0x70
   14f94:	4638      	mov	r0, r7
   14f96:	47a8      	blx	r5
            break;
   14f98:	e43d      	b.n	14816 <theme_apply+0x76>
   14f9a:	bf00      	nop
   14f9c:	00003685 	.word	0x00003685
   14fa0:	20006bd8 	.word	0x20006bd8
   14fa4:	00006b81 	.word	0x00006b81
   14fa8:	00003755 	.word	0x00003755
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
   14fac:	2100      	movs	r1, #0
   14fae:	f8df 8054 	ldr.w	r8, [pc, #84]	; 15004 <theme_apply+0x864>
   14fb2:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
   14fb4:	2100      	movs	r1, #0
   14fb6:	4620      	mov	r0, r4
   14fb8:	4f0f      	ldr	r7, [pc, #60]	; (14ff8 <theme_apply+0x858>)
   14fba:	47b8      	blx	r7
   14fbc:	4681      	mov	r9, r0
            _lv_style_list_add_style(list, &styles->bg);
   14fbe:	4e0f      	ldr	r6, [pc, #60]	; (14ffc <theme_apply+0x85c>)
   14fc0:	6831      	ldr	r1, [r6, #0]
   14fc2:	3104      	adds	r1, #4
   14fc4:	4d0e      	ldr	r5, [pc, #56]	; (15000 <theme_apply+0x860>)
   14fc6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
   14fc8:	6831      	ldr	r1, [r6, #0]
   14fca:	315c      	adds	r1, #92	; 0x5c
   14fcc:	4648      	mov	r0, r9
   14fce:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
   14fd0:	2101      	movs	r1, #1
   14fd2:	4620      	mov	r0, r4
   14fd4:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
   14fd6:	2101      	movs	r1, #1
   14fd8:	4620      	mov	r0, r4
   14fda:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
   14fdc:	6831      	ldr	r1, [r6, #0]
   14fde:	3160      	adds	r1, #96	; 0x60
   14fe0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
   14fe2:	2102      	movs	r1, #2
   14fe4:	4620      	mov	r0, r4
   14fe6:	47c0      	blx	r8
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
   14fe8:	2102      	movs	r1, #2
   14fea:	4620      	mov	r0, r4
   14fec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
   14fee:	6831      	ldr	r1, [r6, #0]
   14ff0:	3164      	adds	r1, #100	; 0x64
   14ff2:	47a8      	blx	r5
            break;
   14ff4:	e40f      	b.n	14816 <theme_apply+0x76>
   14ff6:	bf00      	nop
   14ff8:	00003685 	.word	0x00003685
   14ffc:	20006bd8 	.word	0x20006bd8
   15000:	00006b81 	.word	0x00006b81
   15004:	00003755 	.word	0x00003755

00015008 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
   15008:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
   1500a:	4b04      	ldr	r3, [pc, #16]	; (1501c <style_init_reset+0x14>)
   1500c:	791b      	ldrb	r3, [r3, #4]
   1500e:	b913      	cbnz	r3, 15016 <style_init_reset+0xe>
    else lv_style_init(style);
   15010:	4b03      	ldr	r3, [pc, #12]	; (15020 <style_init_reset+0x18>)
   15012:	4798      	blx	r3
   15014:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
   15016:	4b03      	ldr	r3, [pc, #12]	; (15024 <style_init_reset+0x1c>)
   15018:	4798      	blx	r3
   1501a:	bd08      	pop	{r3, pc}
   1501c:	20006bd8 	.word	0x20006bd8
   15020:	00006a81 	.word	0x00006a81
   15024:	00006d0d 	.word	0x00006d0d

00015028 <basic_init>:
{
   15028:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->scr);
   1502a:	4cb3      	ldr	r4, [pc, #716]	; (152f8 <basic_init+0x2d0>)
   1502c:	6820      	ldr	r0, [r4, #0]
   1502e:	4bb3      	ldr	r3, [pc, #716]	; (152fc <basic_init+0x2d4>)
   15030:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15032:	22ff      	movs	r2, #255	; 0xff
   15034:	212c      	movs	r1, #44	; 0x2c
   15036:	6820      	ldr	r0, [r4, #0]
   15038:	4bb1      	ldr	r3, [pc, #708]	; (15300 <basic_init+0x2d8>)
   1503a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
   1503c:	6a23      	ldr	r3, [r4, #32]
   1503e:	f013 0302 	ands.w	r3, r3, #2
   15042:	bf14      	ite	ne
   15044:	211d      	movne	r1, #29
   15046:	2108      	moveq	r1, #8
   15048:	2b00      	cmp	r3, #0
   1504a:	bf15      	itete	ne
   1504c:	203b      	movne	r0, #59	; 0x3b
   1504e:	2012      	moveq	r0, #18
   15050:	231e      	movne	r3, #30
   15052:	230b      	moveq	r3, #11
   15054:	f04f 0200 	mov.w	r2, #0
   15058:	f363 0204 	bfi	r2, r3, #0, #5
   1505c:	f360 124a 	bfi	r2, r0, #5, #6
   15060:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15064:	2129      	movs	r1, #41	; 0x29
   15066:	6820      	ldr	r0, [r4, #0]
   15068:	4ba6      	ldr	r3, [pc, #664]	; (15304 <basic_init+0x2dc>)
   1506a:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   1506c:	4620      	mov	r0, r4
   1506e:	6a23      	ldr	r3, [r4, #32]
   15070:	f013 0302 	ands.w	r3, r3, #2
   15074:	bf14      	ite	ne
   15076:	2107      	movne	r1, #7
   15078:	211c      	moveq	r1, #28
   1507a:	2b00      	cmp	r3, #0
   1507c:	bf15      	itete	ne
   1507e:	240f      	movne	r4, #15
   15080:	243a      	moveq	r4, #58	; 0x3a
   15082:	2308      	movne	r3, #8
   15084:	231d      	moveq	r3, #29
   15086:	f04f 0200 	mov.w	r2, #0
   1508a:	f363 0204 	bfi	r2, r3, #0, #5
   1508e:	f364 124a 	bfi	r2, r4, #5, #6
   15092:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15096:	f248 0189 	movw	r1, #32905	; 0x8089
   1509a:	6800      	ldr	r0, [r0, #0]
   1509c:	4b99      	ldr	r3, [pc, #612]	; (15304 <basic_init+0x2dc>)
   1509e:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   150a0:	4895      	ldr	r0, [pc, #596]	; (152f8 <basic_init+0x2d0>)
   150a2:	6a03      	ldr	r3, [r0, #32]
   150a4:	f013 0302 	ands.w	r3, r3, #2
   150a8:	bf14      	ite	ne
   150aa:	2107      	movne	r1, #7
   150ac:	211c      	moveq	r1, #28
   150ae:	2b00      	cmp	r3, #0
   150b0:	bf15      	itete	ne
   150b2:	240f      	movne	r4, #15
   150b4:	243a      	moveq	r4, #58	; 0x3a
   150b6:	2308      	movne	r3, #8
   150b8:	231d      	moveq	r3, #29
   150ba:	f04f 0200 	mov.w	r2, #0
   150be:	f363 0204 	bfi	r2, r3, #0, #5
   150c2:	f364 124a 	bfi	r2, r4, #5, #6
   150c6:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   150ca:	2179      	movs	r1, #121	; 0x79
   150cc:	6800      	ldr	r0, [r0, #0]
   150ce:	4b8d      	ldr	r3, [pc, #564]	; (15304 <basic_init+0x2dc>)
   150d0:	4798      	blx	r3
    lv_style_set_text_font(&styles->scr, LV_STATE_DEFAULT, theme.font_normal);
   150d2:	4c89      	ldr	r4, [pc, #548]	; (152f8 <basic_init+0x2d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   150d4:	6962      	ldr	r2, [r4, #20]
   150d6:	f248 018e 	movw	r1, #32910	; 0x808e
   150da:	6820      	ldr	r0, [r4, #0]
   150dc:	4d8a      	ldr	r5, [pc, #552]	; (15308 <basic_init+0x2e0>)
   150de:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   150e0:	6962      	ldr	r2, [r4, #20]
   150e2:	217e      	movs	r1, #126	; 0x7e
   150e4:	6820      	ldr	r0, [r4, #0]
   150e6:	47a8      	blx	r5
    style_init_reset(&styles->bg);
   150e8:	6820      	ldr	r0, [r4, #0]
   150ea:	3004      	adds	r0, #4
   150ec:	4b83      	ldr	r3, [pc, #524]	; (152fc <basic_init+0x2d4>)
   150ee:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   150f0:	6824      	ldr	r4, [r4, #0]
   150f2:	3404      	adds	r4, #4
   150f4:	2000      	movs	r0, #0
   150f6:	4b85      	ldr	r3, [pc, #532]	; (1530c <basic_init+0x2e4>)
   150f8:	4798      	blx	r3
   150fa:	300a      	adds	r0, #10
   150fc:	00c0      	lsls	r0, r0, #3
   150fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15102:	f280 8646 	bge.w	15d92 <basic_init+0xd6a>
   15106:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15108:	2101      	movs	r1, #1
   1510a:	4620      	mov	r0, r4
   1510c:	4b80      	ldr	r3, [pc, #512]	; (15310 <basic_init+0x2e8>)
   1510e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   15110:	4c79      	ldr	r4, [pc, #484]	; (152f8 <basic_init+0x2d0>)
   15112:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15114:	22ff      	movs	r2, #255	; 0xff
   15116:	212c      	movs	r1, #44	; 0x2c
   15118:	3004      	adds	r0, #4
   1511a:	4b79      	ldr	r3, [pc, #484]	; (15300 <basic_init+0x2d8>)
   1511c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
   1511e:	6820      	ldr	r0, [r4, #0]
   15120:	3004      	adds	r0, #4
   15122:	6a23      	ldr	r3, [r4, #32]
   15124:	f013 0f02 	tst.w	r3, #2
   15128:	f040 8641 	bne.w	15dae <basic_init+0xd86>
   1512c:	230b      	movs	r3, #11
   1512e:	2118      	movs	r1, #24
   15130:	240e      	movs	r4, #14
   15132:	f04f 0200 	mov.w	r2, #0
   15136:	f364 0204 	bfi	r2, r4, #0, #5
   1513a:	f361 124a 	bfi	r2, r1, #5, #6
   1513e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15142:	2129      	movs	r1, #41	; 0x29
   15144:	4b6f      	ldr	r3, [pc, #444]	; (15304 <basic_init+0x2dc>)
   15146:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   15148:	4b6b      	ldr	r3, [pc, #428]	; (152f8 <basic_init+0x2d0>)
   1514a:	6818      	ldr	r0, [r3, #0]
   1514c:	6a1b      	ldr	r3, [r3, #32]
   1514e:	f013 0302 	ands.w	r3, r3, #2
   15152:	bf14      	ite	ne
   15154:	211a      	movne	r1, #26
   15156:	2110      	moveq	r1, #16
   15158:	2b00      	cmp	r3, #0
   1515a:	bf15      	itete	ne
   1515c:	2437      	movne	r4, #55	; 0x37
   1515e:	2422      	moveq	r4, #34	; 0x22
   15160:	231c      	movne	r3, #28
   15162:	2312      	moveq	r3, #18
   15164:	f04f 0200 	mov.w	r2, #0
   15168:	f363 0204 	bfi	r2, r3, #0, #5
   1516c:	f364 124a 	bfi	r2, r4, #5, #6
   15170:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15174:	2139      	movs	r1, #57	; 0x39
   15176:	3004      	adds	r0, #4
   15178:	4d62      	ldr	r5, [pc, #392]	; (15304 <basic_init+0x2dc>)
   1517a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED, theme.color_primary);
   1517c:	4c5e      	ldr	r4, [pc, #376]	; (152f8 <basic_init+0x2d0>)
   1517e:	6820      	ldr	r0, [r4, #0]
   15180:	89a2      	ldrh	r2, [r4, #12]
   15182:	f240 2139 	movw	r1, #569	; 0x239
   15186:	3004      	adds	r0, #4
   15188:	47a8      	blx	r5
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
   1518a:	6820      	ldr	r0, [r4, #0]
   1518c:	89e2      	ldrh	r2, [r4, #14]
   1518e:	f240 4139 	movw	r1, #1081	; 0x439
   15192:	3004      	adds	r0, #4
   15194:	47a8      	blx	r5
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   15196:	6824      	ldr	r4, [r4, #0]
   15198:	3404      	adds	r4, #4
   1519a:	2000      	movs	r0, #0
   1519c:	4b5b      	ldr	r3, [pc, #364]	; (1530c <basic_init+0x2e4>)
   1519e:	4798      	blx	r3
   151a0:	3028      	adds	r0, #40	; 0x28
   151a2:	0040      	lsls	r0, r0, #1
   151a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   151a8:	f280 8606 	bge.w	15db8 <basic_init+0xd90>
   151ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   151ae:	2130      	movs	r1, #48	; 0x30
   151b0:	4620      	mov	r0, r4
   151b2:	4d57      	ldr	r5, [pc, #348]	; (15310 <basic_init+0x2e8>)
   151b4:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   151b6:	4c50      	ldr	r4, [pc, #320]	; (152f8 <basic_init+0x2d0>)
   151b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   151ba:	2201      	movs	r2, #1
   151bc:	2133      	movs	r1, #51	; 0x33
   151be:	3004      	adds	r0, #4
   151c0:	47a8      	blx	r5
    lv_style_set_text_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   151c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   151c4:	6962      	ldr	r2, [r4, #20]
   151c6:	f248 018e 	movw	r1, #32910	; 0x808e
   151ca:	3004      	adds	r0, #4
   151cc:	4b4e      	ldr	r3, [pc, #312]	; (15308 <basic_init+0x2e0>)
   151ce:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   151d0:	6820      	ldr	r0, [r4, #0]
   151d2:	3004      	adds	r0, #4
   151d4:	6a23      	ldr	r3, [r4, #32]
   151d6:	f013 0f02 	tst.w	r3, #2
   151da:	f040 85fb 	bne.w	15dd4 <basic_init+0xdac>
   151de:	231f      	movs	r3, #31
   151e0:	213f      	movs	r1, #63	; 0x3f
   151e2:	461c      	mov	r4, r3
   151e4:	f04f 0200 	mov.w	r2, #0
   151e8:	f364 0204 	bfi	r2, r4, #0, #5
   151ec:	f361 124a 	bfi	r2, r1, #5, #6
   151f0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   151f4:	f248 0189 	movw	r1, #32905	; 0x8089
   151f8:	4b42      	ldr	r3, [pc, #264]	; (15304 <basic_init+0x2dc>)
   151fa:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
   151fc:	4c3e      	ldr	r4, [pc, #248]	; (152f8 <basic_init+0x2d0>)
   151fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   15200:	6962      	ldr	r2, [r4, #20]
   15202:	217e      	movs	r1, #126	; 0x7e
   15204:	3004      	adds	r0, #4
   15206:	4b40      	ldr	r3, [pc, #256]	; (15308 <basic_init+0x2e0>)
   15208:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1520a:	6820      	ldr	r0, [r4, #0]
   1520c:	3004      	adds	r0, #4
   1520e:	6a23      	ldr	r3, [r4, #32]
   15210:	f013 0f02 	tst.w	r3, #2
   15214:	f040 85e3 	bne.w	15dde <basic_init+0xdb6>
   15218:	231f      	movs	r3, #31
   1521a:	213f      	movs	r1, #63	; 0x3f
   1521c:	461c      	mov	r4, r3
   1521e:	f04f 0200 	mov.w	r2, #0
   15222:	f364 0204 	bfi	r2, r4, #0, #5
   15226:	f361 124a 	bfi	r2, r1, #5, #6
   1522a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1522e:	2179      	movs	r1, #121	; 0x79
   15230:	4b34      	ldr	r3, [pc, #208]	; (15304 <basic_init+0x2dc>)
   15232:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   15234:	4b30      	ldr	r3, [pc, #192]	; (152f8 <basic_init+0x2d0>)
   15236:	6818      	ldr	r0, [r3, #0]
   15238:	3004      	adds	r0, #4
   1523a:	6a1b      	ldr	r3, [r3, #32]
   1523c:	f013 0f02 	tst.w	r3, #2
   15240:	f040 85d2 	bne.w	15de8 <basic_init+0xdc0>
   15244:	231f      	movs	r3, #31
   15246:	213f      	movs	r1, #63	; 0x3f
   15248:	461c      	mov	r4, r3
   1524a:	f04f 0200 	mov.w	r2, #0
   1524e:	f364 0204 	bfi	r2, r4, #0, #5
   15252:	f361 124a 	bfi	r2, r1, #5, #6
   15256:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1525a:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1525e:	4b29      	ldr	r3, [pc, #164]	; (15304 <basic_init+0x2dc>)
   15260:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   15262:	4b25      	ldr	r3, [pc, #148]	; (152f8 <basic_init+0x2d0>)
   15264:	6818      	ldr	r0, [r3, #0]
   15266:	3004      	adds	r0, #4
   15268:	6a1b      	ldr	r3, [r3, #32]
   1526a:	f013 0f02 	tst.w	r3, #2
   1526e:	f040 85c0 	bne.w	15df2 <basic_init+0xdca>
   15272:	231f      	movs	r3, #31
   15274:	213f      	movs	r1, #63	; 0x3f
   15276:	461c      	mov	r4, r3
   15278:	f04f 0200 	mov.w	r2, #0
   1527c:	f364 0204 	bfi	r2, r4, #0, #5
   15280:	f361 124a 	bfi	r2, r1, #5, #6
   15284:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   15288:	2199      	movs	r1, #153	; 0x99
   1528a:	4b1e      	ldr	r3, [pc, #120]	; (15304 <basic_init+0x2dc>)
   1528c:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
   1528e:	4c1a      	ldr	r4, [pc, #104]	; (152f8 <basic_init+0x2d0>)
   15290:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   15292:	2201      	movs	r2, #1
   15294:	2190      	movs	r1, #144	; 0x90
   15296:	3004      	adds	r0, #4
   15298:	4b1d      	ldr	r3, [pc, #116]	; (15310 <basic_init+0x2e8>)
   1529a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1529c:	6825      	ldr	r5, [r4, #0]
   1529e:	3504      	adds	r5, #4
   152a0:	2000      	movs	r0, #0
   152a2:	4b1c      	ldr	r3, [pc, #112]	; (15314 <basic_init+0x2ec>)
   152a4:	4798      	blx	r3
   152a6:	2801      	cmp	r0, #1
   152a8:	f240 85a8 	bls.w	15dfc <basic_init+0xdd4>
   152ac:	2000      	movs	r0, #0
   152ae:	4b17      	ldr	r3, [pc, #92]	; (1530c <basic_init+0x2e4>)
   152b0:	4798      	blx	r3
   152b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   152b6:	0040      	lsls	r0, r0, #1
   152b8:	3050      	adds	r0, #80	; 0x50
   152ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   152be:	f280 85b8 	bge.w	15e32 <basic_init+0xe0a>
   152c2:	2401      	movs	r4, #1
   152c4:	2000      	movs	r0, #0
   152c6:	4b11      	ldr	r3, [pc, #68]	; (1530c <basic_init+0x2e4>)
   152c8:	4798      	blx	r3
   152ca:	3028      	adds	r0, #40	; 0x28
   152cc:	0040      	lsls	r0, r0, #1
   152ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   152d2:	f280 85be 	bge.w	15e52 <basic_init+0xe2a>
   152d6:	2201      	movs	r2, #1
   152d8:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   152da:	b212      	sxth	r2, r2
   152dc:	2112      	movs	r1, #18
   152de:	4628      	mov	r0, r5
   152e0:	4b0b      	ldr	r3, [pc, #44]	; (15310 <basic_init+0x2e8>)
   152e2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   152e4:	4b04      	ldr	r3, [pc, #16]	; (152f8 <basic_init+0x2d0>)
   152e6:	681d      	ldr	r5, [r3, #0]
   152e8:	3504      	adds	r5, #4
   152ea:	2000      	movs	r0, #0
   152ec:	4b09      	ldr	r3, [pc, #36]	; (15314 <basic_init+0x2ec>)
   152ee:	4798      	blx	r3
   152f0:	2801      	cmp	r0, #1
   152f2:	f240 85bc 	bls.w	15e6e <basic_init+0xe46>
   152f6:	e00f      	b.n	15318 <basic_init+0x2f0>
   152f8:	20006bd8 	.word	0x20006bd8
   152fc:	00015009 	.word	0x00015009
   15300:	00007111 	.word	0x00007111
   15304:	00006fcd 	.word	0x00006fcd
   15308:	00007241 	.word	0x00007241
   1530c:	000114e5 	.word	0x000114e5
   15310:	00006e89 	.word	0x00006e89
   15314:	00011501 	.word	0x00011501
   15318:	2000      	movs	r0, #0
   1531a:	4bb1      	ldr	r3, [pc, #708]	; (155e0 <basic_init+0x5b8>)
   1531c:	4798      	blx	r3
   1531e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15322:	0040      	lsls	r0, r0, #1
   15324:	3050      	adds	r0, #80	; 0x50
   15326:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1532a:	f280 85bb 	bge.w	15ea4 <basic_init+0xe7c>
   1532e:	2401      	movs	r4, #1
   15330:	2000      	movs	r0, #0
   15332:	4bab      	ldr	r3, [pc, #684]	; (155e0 <basic_init+0x5b8>)
   15334:	4798      	blx	r3
   15336:	3028      	adds	r0, #40	; 0x28
   15338:	0040      	lsls	r0, r0, #1
   1533a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1533e:	f280 85c1 	bge.w	15ec4 <basic_init+0xe9c>
   15342:	2201      	movs	r2, #1
   15344:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15346:	b212      	sxth	r2, r2
   15348:	2113      	movs	r1, #19
   1534a:	4628      	mov	r0, r5
   1534c:	4ba5      	ldr	r3, [pc, #660]	; (155e4 <basic_init+0x5bc>)
   1534e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   15350:	4ba5      	ldr	r3, [pc, #660]	; (155e8 <basic_init+0x5c0>)
   15352:	681d      	ldr	r5, [r3, #0]
   15354:	3504      	adds	r5, #4
   15356:	2000      	movs	r0, #0
   15358:	4ba4      	ldr	r3, [pc, #656]	; (155ec <basic_init+0x5c4>)
   1535a:	4798      	blx	r3
   1535c:	2801      	cmp	r0, #1
   1535e:	f240 85bf 	bls.w	15ee0 <basic_init+0xeb8>
   15362:	2000      	movs	r0, #0
   15364:	4b9e      	ldr	r3, [pc, #632]	; (155e0 <basic_init+0x5b8>)
   15366:	4798      	blx	r3
   15368:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1536c:	0040      	lsls	r0, r0, #1
   1536e:	3050      	adds	r0, #80	; 0x50
   15370:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15374:	f280 85cf 	bge.w	15f16 <basic_init+0xeee>
   15378:	2401      	movs	r4, #1
   1537a:	2000      	movs	r0, #0
   1537c:	4b98      	ldr	r3, [pc, #608]	; (155e0 <basic_init+0x5b8>)
   1537e:	4798      	blx	r3
   15380:	3028      	adds	r0, #40	; 0x28
   15382:	0040      	lsls	r0, r0, #1
   15384:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15388:	f280 85d5 	bge.w	15f36 <basic_init+0xf0e>
   1538c:	2201      	movs	r2, #1
   1538e:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15390:	b212      	sxth	r2, r2
   15392:	2110      	movs	r1, #16
   15394:	4628      	mov	r0, r5
   15396:	4b93      	ldr	r3, [pc, #588]	; (155e4 <basic_init+0x5bc>)
   15398:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   1539a:	4b93      	ldr	r3, [pc, #588]	; (155e8 <basic_init+0x5c0>)
   1539c:	681d      	ldr	r5, [r3, #0]
   1539e:	3504      	adds	r5, #4
   153a0:	2000      	movs	r0, #0
   153a2:	4b92      	ldr	r3, [pc, #584]	; (155ec <basic_init+0x5c4>)
   153a4:	4798      	blx	r3
   153a6:	2801      	cmp	r0, #1
   153a8:	f240 85d3 	bls.w	15f52 <basic_init+0xf2a>
   153ac:	2000      	movs	r0, #0
   153ae:	4b8c      	ldr	r3, [pc, #560]	; (155e0 <basic_init+0x5b8>)
   153b0:	4798      	blx	r3
   153b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   153b6:	0040      	lsls	r0, r0, #1
   153b8:	3050      	adds	r0, #80	; 0x50
   153ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   153be:	f280 85f4 	bge.w	15faa <basic_init+0xf82>
   153c2:	2401      	movs	r4, #1
   153c4:	2000      	movs	r0, #0
   153c6:	4b86      	ldr	r3, [pc, #536]	; (155e0 <basic_init+0x5b8>)
   153c8:	4798      	blx	r3
   153ca:	3028      	adds	r0, #40	; 0x28
   153cc:	0040      	lsls	r0, r0, #1
   153ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   153d2:	f280 85fa 	bge.w	15fca <basic_init+0xfa2>
   153d6:	2201      	movs	r2, #1
   153d8:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   153da:	b212      	sxth	r2, r2
   153dc:	2111      	movs	r1, #17
   153de:	4628      	mov	r0, r5
   153e0:	4b80      	ldr	r3, [pc, #512]	; (155e4 <basic_init+0x5bc>)
   153e2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   153e4:	4b80      	ldr	r3, [pc, #512]	; (155e8 <basic_init+0x5c0>)
   153e6:	681c      	ldr	r4, [r3, #0]
   153e8:	3404      	adds	r4, #4
   153ea:	2000      	movs	r0, #0
   153ec:	4b7f      	ldr	r3, [pc, #508]	; (155ec <basic_init+0x5c4>)
   153ee:	4798      	blx	r3
   153f0:	2801      	cmp	r0, #1
   153f2:	f240 85f8 	bls.w	15fe6 <basic_init+0xfbe>
   153f6:	2000      	movs	r0, #0
   153f8:	4b79      	ldr	r3, [pc, #484]	; (155e0 <basic_init+0x5b8>)
   153fa:	4798      	blx	r3
   153fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15400:	0040      	lsls	r0, r0, #1
   15402:	3050      	adds	r0, #80	; 0x50
   15404:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15408:	f280 8608 	bge.w	1601c <basic_init+0xff4>
   1540c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1540e:	2114      	movs	r1, #20
   15410:	4620      	mov	r0, r4
   15412:	4d74      	ldr	r5, [pc, #464]	; (155e4 <basic_init+0x5bc>)
   15414:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   15416:	4c74      	ldr	r4, [pc, #464]	; (155e8 <basic_init+0x5c0>)
   15418:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   1541a:	2296      	movs	r2, #150	; 0x96
   1541c:	21b0      	movs	r1, #176	; 0xb0
   1541e:	3004      	adds	r0, #4
   15420:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
   15422:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15424:	2239      	movs	r2, #57	; 0x39
   15426:	21b7      	movs	r1, #183	; 0xb7
   15428:	3004      	adds	r0, #4
   1542a:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
   1542c:	6820      	ldr	r0, [r4, #0]
   1542e:	300c      	adds	r0, #12
   15430:	4b6f      	ldr	r3, [pc, #444]	; (155f0 <basic_init+0x5c8>)
   15432:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
   15434:	6820      	ldr	r0, [r4, #0]
   15436:	1d01      	adds	r1, r0, #4
   15438:	300c      	adds	r0, #12
   1543a:	4b6e      	ldr	r3, [pc, #440]	; (155f4 <basic_init+0x5cc>)
   1543c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
   1543e:	6820      	ldr	r0, [r4, #0]
   15440:	6a23      	ldr	r3, [r4, #32]
   15442:	f013 0302 	ands.w	r3, r3, #2
   15446:	bf14      	ite	ne
   15448:	211a      	movne	r1, #26
   1544a:	2108      	moveq	r1, #8
   1544c:	2b00      	cmp	r3, #0
   1544e:	bf15      	itete	ne
   15450:	2435      	movne	r4, #53	; 0x35
   15452:	2412      	moveq	r4, #18
   15454:	231b      	movne	r3, #27
   15456:	2309      	moveq	r3, #9
   15458:	f04f 0200 	mov.w	r2, #0
   1545c:	f363 0204 	bfi	r2, r3, #0, #5
   15460:	f364 124a 	bfi	r2, r4, #5, #6
   15464:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   15468:	2129      	movs	r1, #41	; 0x29
   1546a:	300c      	adds	r0, #12
   1546c:	4b62      	ldr	r3, [pc, #392]	; (155f8 <basic_init+0x5d0>)
   1546e:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
   15470:	4b5d      	ldr	r3, [pc, #372]	; (155e8 <basic_init+0x5c0>)
   15472:	6818      	ldr	r0, [r3, #0]
   15474:	300c      	adds	r0, #12
   15476:	6a1b      	ldr	r3, [r3, #32]
   15478:	f013 0f02 	tst.w	r3, #2
   1547c:	f040 85de 	bne.w	1603c <basic_init+0x1014>
   15480:	2308      	movs	r3, #8
   15482:	2110      	movs	r1, #16
   15484:	461c      	mov	r4, r3
   15486:	f04f 0200 	mov.w	r2, #0
   1548a:	f364 0204 	bfi	r2, r4, #0, #5
   1548e:	f361 124a 	bfi	r2, r1, #5, #6
   15492:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15496:	2139      	movs	r1, #57	; 0x39
   15498:	4b57      	ldr	r3, [pc, #348]	; (155f8 <basic_init+0x5d0>)
   1549a:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   1549c:	4b52      	ldr	r3, [pc, #328]	; (155e8 <basic_init+0x5c0>)
   1549e:	6818      	ldr	r0, [r3, #0]
   154a0:	6a1b      	ldr	r3, [r3, #32]
   154a2:	f013 0302 	ands.w	r3, r3, #2
   154a6:	bf14      	ite	ne
   154a8:	2106      	movne	r1, #6
   154aa:	2114      	moveq	r1, #20
   154ac:	2b00      	cmp	r3, #0
   154ae:	bf15      	itete	ne
   154b0:	2410      	movne	r4, #16
   154b2:	242a      	moveq	r4, #42	; 0x2a
   154b4:	2309      	movne	r3, #9
   154b6:	2315      	moveq	r3, #21
   154b8:	f04f 0200 	mov.w	r2, #0
   154bc:	f363 0204 	bfi	r2, r3, #0, #5
   154c0:	f364 124a 	bfi	r2, r4, #5, #6
   154c4:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   154c8:	f248 0189 	movw	r1, #32905	; 0x8089
   154cc:	300c      	adds	r0, #12
   154ce:	4b4a      	ldr	r3, [pc, #296]	; (155f8 <basic_init+0x5d0>)
   154d0:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   154d2:	4b45      	ldr	r3, [pc, #276]	; (155e8 <basic_init+0x5c0>)
   154d4:	6818      	ldr	r0, [r3, #0]
   154d6:	6a1b      	ldr	r3, [r3, #32]
   154d8:	f013 0302 	ands.w	r3, r3, #2
   154dc:	bf14      	ite	ne
   154de:	2106      	movne	r1, #6
   154e0:	2114      	moveq	r1, #20
   154e2:	2b00      	cmp	r3, #0
   154e4:	bf15      	itete	ne
   154e6:	2410      	movne	r4, #16
   154e8:	242a      	moveq	r4, #42	; 0x2a
   154ea:	2309      	movne	r3, #9
   154ec:	2315      	moveq	r3, #21
   154ee:	f04f 0200 	mov.w	r2, #0
   154f2:	f363 0204 	bfi	r2, r3, #0, #5
   154f6:	f364 124a 	bfi	r2, r4, #5, #6
   154fa:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   154fe:	2179      	movs	r1, #121	; 0x79
   15500:	300c      	adds	r0, #12
   15502:	4b3d      	ldr	r3, [pc, #244]	; (155f8 <basic_init+0x5d0>)
   15504:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   15506:	4b38      	ldr	r3, [pc, #224]	; (155e8 <basic_init+0x5c0>)
   15508:	6818      	ldr	r0, [r3, #0]
   1550a:	6a1b      	ldr	r3, [r3, #32]
   1550c:	f013 0302 	ands.w	r3, r3, #2
   15510:	bf14      	ite	ne
   15512:	2106      	movne	r1, #6
   15514:	2114      	moveq	r1, #20
   15516:	2b00      	cmp	r3, #0
   15518:	bf15      	itete	ne
   1551a:	2410      	movne	r4, #16
   1551c:	242a      	moveq	r4, #42	; 0x2a
   1551e:	2309      	movne	r3, #9
   15520:	2315      	moveq	r3, #21
   15522:	f04f 0200 	mov.w	r2, #0
   15526:	f363 0204 	bfi	r2, r3, #0, #5
   1552a:	f364 124a 	bfi	r2, r4, #5, #6
   1552e:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   15532:	f248 01a9 	movw	r1, #32937	; 0x80a9
   15536:	300c      	adds	r0, #12
   15538:	4b2f      	ldr	r3, [pc, #188]	; (155f8 <basic_init+0x5d0>)
   1553a:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   1553c:	4b2a      	ldr	r3, [pc, #168]	; (155e8 <basic_init+0x5c0>)
   1553e:	6818      	ldr	r0, [r3, #0]
   15540:	6a1b      	ldr	r3, [r3, #32]
   15542:	f013 0302 	ands.w	r3, r3, #2
   15546:	bf14      	ite	ne
   15548:	2106      	movne	r1, #6
   1554a:	2114      	moveq	r1, #20
   1554c:	2b00      	cmp	r3, #0
   1554e:	bf15      	itete	ne
   15550:	2410      	movne	r4, #16
   15552:	242a      	moveq	r4, #42	; 0x2a
   15554:	2309      	movne	r3, #9
   15556:	2315      	moveq	r3, #21
   15558:	f04f 0200 	mov.w	r2, #0
   1555c:	f363 0204 	bfi	r2, r3, #0, #5
   15560:	f364 124a 	bfi	r2, r4, #5, #6
   15564:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   15568:	2199      	movs	r1, #153	; 0x99
   1556a:	300c      	adds	r0, #12
   1556c:	4b22      	ldr	r3, [pc, #136]	; (155f8 <basic_init+0x5d0>)
   1556e:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
   15570:	4c1d      	ldr	r4, [pc, #116]	; (155e8 <basic_init+0x5c0>)
   15572:	6820      	ldr	r0, [r4, #0]
   15574:	3008      	adds	r0, #8
   15576:	4b1e      	ldr	r3, [pc, #120]	; (155f0 <basic_init+0x5c8>)
   15578:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
   1557a:	6820      	ldr	r0, [r4, #0]
   1557c:	3008      	adds	r0, #8
   1557e:	6a23      	ldr	r3, [r4, #32]
   15580:	f013 0f02 	tst.w	r3, #2
   15584:	f040 855f 	bne.w	16046 <basic_init+0x101e>
   15588:	2309      	movs	r3, #9
   1558a:	2113      	movs	r1, #19
   1558c:	240a      	movs	r4, #10
   1558e:	f04f 0200 	mov.w	r2, #0
   15592:	f364 0204 	bfi	r2, r4, #0, #5
   15596:	f361 124a 	bfi	r2, r1, #5, #6
   1559a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1559e:	f241 0129 	movw	r1, #4137	; 0x1029
   155a2:	4d15      	ldr	r5, [pc, #84]	; (155f8 <basic_init+0x5d0>)
   155a4:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
   155a6:	4c10      	ldr	r4, [pc, #64]	; (155e8 <basic_init+0x5c0>)
   155a8:	6820      	ldr	r0, [r4, #0]
   155aa:	89a2      	ldrh	r2, [r4, #12]
   155ac:	f240 1129 	movw	r1, #297	; 0x129
   155b0:	3008      	adds	r0, #8
   155b2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
   155b4:	6826      	ldr	r6, [r4, #0]
   155b6:	3608      	adds	r6, #8
   155b8:	2133      	movs	r1, #51	; 0x33
   155ba:	89a0      	ldrh	r0, [r4, #12]
   155bc:	4b0f      	ldr	r3, [pc, #60]	; (155fc <basic_init+0x5d4>)
   155be:	4798      	blx	r3
   155c0:	4602      	mov	r2, r0
   155c2:	f241 1129 	movw	r1, #4393	; 0x1129
   155c6:	4630      	mov	r0, r6
   155c8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
   155ca:	6820      	ldr	r0, [r4, #0]
   155cc:	3008      	adds	r0, #8
   155ce:	6a23      	ldr	r3, [r4, #32]
   155d0:	f013 0f02 	tst.w	r3, #2
   155d4:	f040 853c 	bne.w	16050 <basic_init+0x1028>
   155d8:	230b      	movs	r3, #11
   155da:	2118      	movs	r1, #24
   155dc:	240e      	movs	r4, #14
   155de:	e00f      	b.n	15600 <basic_init+0x5d8>
   155e0:	000114e5 	.word	0x000114e5
   155e4:	00006e89 	.word	0x00006e89
   155e8:	20006bd8 	.word	0x20006bd8
   155ec:	00011501 	.word	0x00011501
   155f0:	00015009 	.word	0x00015009
   155f4:	00006d61 	.word	0x00006d61
   155f8:	00006fcd 	.word	0x00006fcd
   155fc:	000121ab 	.word	0x000121ab
   15600:	f04f 0200 	mov.w	r2, #0
   15604:	f364 0204 	bfi	r2, r4, #0, #5
   15608:	f361 124a 	bfi	r2, r1, #5, #6
   1560c:	f363 22cf 	bfi	r2, r3, #11, #5
   15610:	f242 0129 	movw	r1, #8233	; 0x2029
   15614:	4ebb      	ldr	r6, [pc, #748]	; (15904 <basic_init+0x8dc>)
   15616:	47b0      	blx	r6
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
   15618:	4cbb      	ldr	r4, [pc, #748]	; (15908 <basic_init+0x8e0>)
   1561a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1561c:	2200      	movs	r2, #0
   1561e:	f44f 7198 	mov.w	r1, #304	; 0x130
   15622:	3008      	adds	r0, #8
   15624:	4bb9      	ldr	r3, [pc, #740]	; (1590c <basic_init+0x8e4>)
   15626:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
   15628:	6825      	ldr	r5, [r4, #0]
   1562a:	3508      	adds	r5, #8
   1562c:	2133      	movs	r1, #51	; 0x33
   1562e:	89a0      	ldrh	r0, [r4, #12]
   15630:	4bb7      	ldr	r3, [pc, #732]	; (15910 <basic_init+0x8e8>)
   15632:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15634:	4602      	mov	r2, r0
   15636:	f241 2139 	movw	r1, #4665	; 0x1239
   1563a:	4628      	mov	r0, r5
   1563c:	47b0      	blx	r6
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
   1563e:	6820      	ldr	r0, [r4, #0]
   15640:	3008      	adds	r0, #8
   15642:	6a23      	ldr	r3, [r4, #32]
   15644:	f013 0f02 	tst.w	r3, #2
   15648:	f040 8507 	bne.w	1605a <basic_init+0x1032>
   1564c:	230b      	movs	r3, #11
   1564e:	2119      	movs	r1, #25
   15650:	240d      	movs	r4, #13
   15652:	f04f 0200 	mov.w	r2, #0
   15656:	f364 0204 	bfi	r2, r4, #0, #5
   1565a:	f361 124a 	bfi	r2, r1, #5, #6
   1565e:	f363 22cf 	bfi	r2, r3, #11, #5
   15662:	f241 0139 	movw	r1, #4153	; 0x1039
   15666:	4ba7      	ldr	r3, [pc, #668]	; (15904 <basic_init+0x8dc>)
   15668:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
   1566a:	4ba7      	ldr	r3, [pc, #668]	; (15908 <basic_init+0x8e0>)
   1566c:	6818      	ldr	r0, [r3, #0]
   1566e:	6a1b      	ldr	r3, [r3, #32]
   15670:	f013 0302 	ands.w	r3, r3, #2
   15674:	bf14      	ite	ne
   15676:	2107      	movne	r1, #7
   15678:	210b      	moveq	r1, #11
   1567a:	2b00      	cmp	r3, #0
   1567c:	bf15      	itete	ne
   1567e:	240f      	movne	r4, #15
   15680:	2419      	moveq	r4, #25
   15682:	2308      	movne	r3, #8
   15684:	230d      	moveq	r3, #13
   15686:	f04f 0200 	mov.w	r2, #0
   1568a:	f363 0204 	bfi	r2, r3, #0, #5
   1568e:	f364 124a 	bfi	r2, r4, #5, #6
   15692:	f361 22cf 	bfi	r2, r1, #11, #5
   15696:	f240 1139 	movw	r1, #313	; 0x139
   1569a:	3008      	adds	r0, #8
   1569c:	4b99      	ldr	r3, [pc, #612]	; (15904 <basic_init+0x8dc>)
   1569e:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
   156a0:	4b99      	ldr	r3, [pc, #612]	; (15908 <basic_init+0x8e0>)
   156a2:	6818      	ldr	r0, [r3, #0]
   156a4:	6a1b      	ldr	r3, [r3, #32]
   156a6:	f013 0302 	ands.w	r3, r3, #2
   156aa:	bf14      	ite	ne
   156ac:	2107      	movne	r1, #7
   156ae:	210b      	moveq	r1, #11
   156b0:	2b00      	cmp	r3, #0
   156b2:	bf15      	itete	ne
   156b4:	240f      	movne	r4, #15
   156b6:	2419      	moveq	r4, #25
   156b8:	2308      	movne	r3, #8
   156ba:	230d      	moveq	r3, #13
   156bc:	f04f 0200 	mov.w	r2, #0
   156c0:	f363 0204 	bfi	r2, r3, #0, #5
   156c4:	f364 124a 	bfi	r2, r4, #5, #6
   156c8:	f361 22cf 	bfi	r2, r1, #11, #5
   156cc:	f241 1139 	movw	r1, #4409	; 0x1139
   156d0:	3008      	adds	r0, #8
   156d2:	4b8c      	ldr	r3, [pc, #560]	; (15904 <basic_init+0x8dc>)
   156d4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
   156d6:	4b8c      	ldr	r3, [pc, #560]	; (15908 <basic_init+0x8e0>)
   156d8:	6818      	ldr	r0, [r3, #0]
   156da:	6a1b      	ldr	r3, [r3, #32]
   156dc:	f013 0302 	ands.w	r3, r3, #2
   156e0:	bf14      	ite	ne
   156e2:	211a      	movne	r1, #26
   156e4:	210b      	moveq	r1, #11
   156e6:	2b00      	cmp	r3, #0
   156e8:	bf15      	itete	ne
   156ea:	2437      	movne	r4, #55	; 0x37
   156ec:	2419      	moveq	r4, #25
   156ee:	231c      	movne	r3, #28
   156f0:	230d      	moveq	r3, #13
   156f2:	f04f 0200 	mov.w	r2, #0
   156f6:	f363 0204 	bfi	r2, r3, #0, #5
   156fa:	f364 124a 	bfi	r2, r4, #5, #6
   156fe:	f361 22cf 	bfi	r2, r1, #11, #5
   15702:	f242 0139 	movw	r1, #8249	; 0x2039
   15706:	3008      	adds	r0, #8
   15708:	4b7e      	ldr	r3, [pc, #504]	; (15904 <basic_init+0x8dc>)
   1570a:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   1570c:	4b7e      	ldr	r3, [pc, #504]	; (15908 <basic_init+0x8e0>)
   1570e:	6818      	ldr	r0, [r3, #0]
   15710:	3008      	adds	r0, #8
   15712:	6a1b      	ldr	r3, [r3, #32]
   15714:	f013 0f02 	tst.w	r3, #2
   15718:	f040 84a4 	bne.w	16064 <basic_init+0x103c>
   1571c:	231f      	movs	r3, #31
   1571e:	213f      	movs	r1, #63	; 0x3f
   15720:	461c      	mov	r4, r3
   15722:	f04f 0200 	mov.w	r2, #0
   15726:	f364 0204 	bfi	r2, r4, #0, #5
   1572a:	f361 124a 	bfi	r2, r1, #5, #6
   1572e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15732:	f249 0189 	movw	r1, #37001	; 0x9089
   15736:	4d73      	ldr	r5, [pc, #460]	; (15904 <basic_init+0x8dc>)
   15738:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   1573a:	4c73      	ldr	r4, [pc, #460]	; (15908 <basic_init+0x8e0>)
   1573c:	6820      	ldr	r0, [r4, #0]
   1573e:	f04f 32ff 	mov.w	r2, #4294967295
   15742:	f248 1189 	movw	r1, #33161	; 0x8189
   15746:	3008      	adds	r0, #8
   15748:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   1574a:	6820      	ldr	r0, [r4, #0]
   1574c:	f04f 32ff 	mov.w	r2, #4294967295
   15750:	f249 1189 	movw	r1, #37257	; 0x9189
   15754:	3008      	adds	r0, #8
   15756:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   15758:	6820      	ldr	r0, [r4, #0]
   1575a:	6a23      	ldr	r3, [r4, #32]
   1575c:	f013 0302 	ands.w	r3, r3, #2
   15760:	bf14      	ite	ne
   15762:	212a      	movne	r1, #42	; 0x2a
   15764:	2126      	moveq	r1, #38	; 0x26
   15766:	2b00      	cmp	r3, #0
   15768:	bf14      	ite	ne
   1576a:	2315      	movne	r3, #21
   1576c:	2313      	moveq	r3, #19
   1576e:	f04f 0200 	mov.w	r2, #0
   15772:	f363 0204 	bfi	r2, r3, #0, #5
   15776:	f361 124a 	bfi	r2, r1, #5, #6
   1577a:	f363 22cf 	bfi	r2, r3, #11, #5
   1577e:	f24a 0189 	movw	r1, #41097	; 0xa089
   15782:	3008      	adds	r0, #8
   15784:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   15786:	6820      	ldr	r0, [r4, #0]
   15788:	3008      	adds	r0, #8
   1578a:	6a23      	ldr	r3, [r4, #32]
   1578c:	f013 0f02 	tst.w	r3, #2
   15790:	f040 846d 	bne.w	1606e <basic_init+0x1046>
   15794:	231f      	movs	r3, #31
   15796:	213f      	movs	r1, #63	; 0x3f
   15798:	461c      	mov	r4, r3
   1579a:	f04f 0200 	mov.w	r2, #0
   1579e:	f364 0204 	bfi	r2, r4, #0, #5
   157a2:	f361 124a 	bfi	r2, r1, #5, #6
   157a6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   157aa:	f249 01a9 	movw	r1, #37033	; 0x90a9
   157ae:	4d55      	ldr	r5, [pc, #340]	; (15904 <basic_init+0x8dc>)
   157b0:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   157b2:	4c55      	ldr	r4, [pc, #340]	; (15908 <basic_init+0x8e0>)
   157b4:	6820      	ldr	r0, [r4, #0]
   157b6:	f04f 32ff 	mov.w	r2, #4294967295
   157ba:	f248 11a9 	movw	r1, #33193	; 0x81a9
   157be:	3008      	adds	r0, #8
   157c0:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
   157c2:	6820      	ldr	r0, [r4, #0]
   157c4:	f04f 32ff 	mov.w	r2, #4294967295
   157c8:	f249 11a9 	movw	r1, #37289	; 0x91a9
   157cc:	3008      	adds	r0, #8
   157ce:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   157d0:	6820      	ldr	r0, [r4, #0]
   157d2:	6a23      	ldr	r3, [r4, #32]
   157d4:	f013 0302 	ands.w	r3, r3, #2
   157d8:	bf14      	ite	ne
   157da:	212a      	movne	r1, #42	; 0x2a
   157dc:	2126      	moveq	r1, #38	; 0x26
   157de:	2b00      	cmp	r3, #0
   157e0:	bf14      	ite	ne
   157e2:	2315      	movne	r3, #21
   157e4:	2313      	moveq	r3, #19
   157e6:	f04f 0200 	mov.w	r2, #0
   157ea:	f363 0204 	bfi	r2, r3, #0, #5
   157ee:	f361 124a 	bfi	r2, r1, #5, #6
   157f2:	f363 22cf 	bfi	r2, r3, #11, #5
   157f6:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   157fa:	3008      	adds	r0, #8
   157fc:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   157fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   15800:	2229      	movs	r2, #41	; 0x29
   15802:	21b6      	movs	r1, #182	; 0xb6
   15804:	3008      	adds	r0, #8
   15806:	4d41      	ldr	r5, [pc, #260]	; (1590c <basic_init+0x8e4>)
   15808:	47a8      	blx	r5
    style_init_reset(&styles->btn);
   1580a:	6820      	ldr	r0, [r4, #0]
   1580c:	3010      	adds	r0, #16
   1580e:	4b41      	ldr	r3, [pc, #260]	; (15914 <basic_init+0x8ec>)
   15810:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   15812:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   15814:	f647 72ff 	movw	r2, #32767	; 0x7fff
   15818:	2101      	movs	r1, #1
   1581a:	3010      	adds	r0, #16
   1581c:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   1581e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   15820:	22ff      	movs	r2, #255	; 0xff
   15822:	212c      	movs	r1, #44	; 0x2c
   15824:	3010      	adds	r0, #16
   15826:	4b3c      	ldr	r3, [pc, #240]	; (15918 <basic_init+0x8f0>)
   15828:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
   1582a:	6820      	ldr	r0, [r4, #0]
   1582c:	3010      	adds	r0, #16
   1582e:	6a23      	ldr	r3, [r4, #32]
   15830:	f013 0f02 	tst.w	r3, #2
   15834:	f040 8420 	bne.w	16078 <basic_init+0x1050>
   15838:	230b      	movs	r3, #11
   1583a:	2118      	movs	r1, #24
   1583c:	240e      	movs	r4, #14
   1583e:	f04f 0200 	mov.w	r2, #0
   15842:	f364 0204 	bfi	r2, r4, #0, #5
   15846:	f361 124a 	bfi	r2, r1, #5, #6
   1584a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1584e:	2129      	movs	r1, #41	; 0x29
   15850:	4b2c      	ldr	r3, [pc, #176]	; (15904 <basic_init+0x8dc>)
   15852:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
   15854:	4b2c      	ldr	r3, [pc, #176]	; (15908 <basic_init+0x8e0>)
   15856:	6818      	ldr	r0, [r3, #0]
   15858:	3010      	adds	r0, #16
   1585a:	6a1b      	ldr	r3, [r3, #32]
   1585c:	f013 0f02 	tst.w	r3, #2
   15860:	f000 840f 	beq.w	16082 <basic_init+0x105a>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   15864:	4928      	ldr	r1, [pc, #160]	; (15908 <basic_init+0x8e0>)
   15866:	7b4b      	ldrb	r3, [r1, #13]
   15868:	08db      	lsrs	r3, r3, #3
   1586a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1586e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15872:	f641 35da 	movw	r5, #7130	; 0x1bda
   15876:	442b      	add	r3, r5
   15878:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   1587c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   15880:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   15884:	898a      	ldrh	r2, [r1, #12]
   15886:	f3c2 1245 	ubfx	r2, r2, #5, #6
   1588a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1588e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   15892:	f502 5262 	add.w	r2, r2, #14464	; 0x3880
   15896:	321a      	adds	r2, #26
   15898:	eb02 2402 	add.w	r4, r2, r2, lsl #8
   1589c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   158a0:	f3c2 54c5 	ubfx	r4, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   158a4:	7b09      	ldrb	r1, [r1, #12]
   158a6:	f001 011f 	and.w	r1, r1, #31
   158aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   158ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   158b2:	4429      	add	r1, r5
   158b4:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   158b8:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   158bc:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   158c0:	f04f 0200 	mov.w	r2, #0
   158c4:	f361 0204 	bfi	r2, r1, #0, #5
   158c8:	f364 124a 	bfi	r2, r4, #5, #6
   158cc:	f363 22cf 	bfi	r2, r3, #11, #5
   158d0:	f241 0129 	movw	r1, #4137	; 0x1029
   158d4:	4d0b      	ldr	r5, [pc, #44]	; (15904 <basic_init+0x8dc>)
   158d6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
   158d8:	4c0b      	ldr	r4, [pc, #44]	; (15908 <basic_init+0x8e0>)
   158da:	6820      	ldr	r0, [r4, #0]
   158dc:	89a2      	ldrh	r2, [r4, #12]
   158de:	f240 1129 	movw	r1, #297	; 0x129
   158e2:	3010      	adds	r0, #16
   158e4:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
   158e6:	6826      	ldr	r6, [r4, #0]
   158e8:	3610      	adds	r6, #16
   158ea:	214c      	movs	r1, #76	; 0x4c
   158ec:	89a0      	ldrh	r0, [r4, #12]
   158ee:	4b08      	ldr	r3, [pc, #32]	; (15910 <basic_init+0x8e8>)
   158f0:	4798      	blx	r3
   158f2:	4602      	mov	r2, r0
   158f4:	f241 1129 	movw	r1, #4393	; 0x1129
   158f8:	4630      	mov	r0, r6
   158fa:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
   158fc:	6820      	ldr	r0, [r4, #0]
   158fe:	3010      	adds	r0, #16
   15900:	6a23      	ldr	r3, [r4, #32]
   15902:	e00b      	b.n	1591c <basic_init+0x8f4>
   15904:	00006fcd 	.word	0x00006fcd
   15908:	20006bd8 	.word	0x20006bd8
   1590c:	00006e89 	.word	0x00006e89
   15910:	000121ab 	.word	0x000121ab
   15914:	00015009 	.word	0x00015009
   15918:	00007111 	.word	0x00007111
   1591c:	f013 0f02 	tst.w	r3, #2
   15920:	f040 83d9 	bne.w	160d6 <basic_init+0x10ae>
   15924:	230b      	movs	r3, #11
   15926:	2118      	movs	r1, #24
   15928:	240e      	movs	r4, #14
   1592a:	f04f 0200 	mov.w	r2, #0
   1592e:	f364 0204 	bfi	r2, r4, #0, #5
   15932:	f361 124a 	bfi	r2, r1, #5, #6
   15936:	f363 22cf 	bfi	r2, r3, #11, #5
   1593a:	f242 0129 	movw	r1, #8233	; 0x2029
   1593e:	4bc6      	ldr	r3, [pc, #792]	; (15c58 <basic_init+0xc30>)
   15940:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
   15942:	4bc6      	ldr	r3, [pc, #792]	; (15c5c <basic_init+0xc34>)
   15944:	6818      	ldr	r0, [r3, #0]
   15946:	6a1b      	ldr	r3, [r3, #32]
   15948:	f013 0302 	ands.w	r3, r3, #2
   1594c:	bf14      	ite	ne
   1594e:	2133      	movne	r1, #51	; 0x33
   15950:	2122      	moveq	r1, #34	; 0x22
   15952:	2b00      	cmp	r3, #0
   15954:	bf14      	ite	ne
   15956:	2319      	movne	r3, #25
   15958:	2311      	moveq	r3, #17
   1595a:	f04f 0200 	mov.w	r2, #0
   1595e:	f363 0204 	bfi	r2, r3, #0, #5
   15962:	f361 124a 	bfi	r2, r1, #5, #6
   15966:	f363 22cf 	bfi	r2, r3, #11, #5
   1596a:	f242 1129 	movw	r1, #8489	; 0x2129
   1596e:	3010      	adds	r0, #16
   15970:	4db9      	ldr	r5, [pc, #740]	; (15c58 <basic_init+0xc30>)
   15972:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
   15974:	4cb9      	ldr	r4, [pc, #740]	; (15c5c <basic_init+0xc34>)
   15976:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   15978:	89a2      	ldrh	r2, [r4, #12]
   1597a:	2139      	movs	r1, #57	; 0x39
   1597c:	3010      	adds	r0, #16
   1597e:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
   15980:	6820      	ldr	r0, [r4, #0]
   15982:	89a2      	ldrh	r2, [r4, #12]
   15984:	f241 0139 	movw	r1, #4153	; 0x1039
   15988:	3010      	adds	r0, #16
   1598a:	47a8      	blx	r5
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
   1598c:	6820      	ldr	r0, [r4, #0]
   1598e:	6a23      	ldr	r3, [r4, #32]
   15990:	f013 0302 	ands.w	r3, r3, #2
   15994:	bf14      	ite	ne
   15996:	2122      	movne	r1, #34	; 0x22
   15998:	2110      	moveq	r1, #16
   1599a:	2b00      	cmp	r3, #0
   1599c:	bf14      	ite	ne
   1599e:	2311      	movne	r3, #17
   159a0:	2308      	moveq	r3, #8
   159a2:	f04f 0200 	mov.w	r2, #0
   159a6:	f363 0204 	bfi	r2, r3, #0, #5
   159aa:	f361 124a 	bfi	r2, r1, #5, #6
   159ae:	f363 22cf 	bfi	r2, r3, #11, #5
   159b2:	f242 0139 	movw	r1, #8249	; 0x2039
   159b6:	3010      	adds	r0, #16
   159b8:	47a8      	blx	r5
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   159ba:	6824      	ldr	r4, [r4, #0]
   159bc:	3410      	adds	r4, #16
   159be:	2000      	movs	r0, #0
   159c0:	4ba7      	ldr	r3, [pc, #668]	; (15c60 <basic_init+0xc38>)
   159c2:	4798      	blx	r3
   159c4:	3028      	adds	r0, #40	; 0x28
   159c6:	0040      	lsls	r0, r0, #1
   159c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   159cc:	f280 8387 	bge.w	160de <basic_init+0x10b6>
   159d0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   159d2:	2130      	movs	r1, #48	; 0x30
   159d4:	4620      	mov	r0, r4
   159d6:	4ba3      	ldr	r3, [pc, #652]	; (15c64 <basic_init+0xc3c>)
   159d8:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
   159da:	4ca0      	ldr	r4, [pc, #640]	; (15c5c <basic_init+0xc34>)
   159dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   159de:	2200      	movs	r2, #0
   159e0:	f44f 719e 	mov.w	r1, #316	; 0x13c
   159e4:	3010      	adds	r0, #16
   159e6:	4ba0      	ldr	r3, [pc, #640]	; (15c68 <basic_init+0xc40>)
   159e8:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   159ea:	6820      	ldr	r0, [r4, #0]
   159ec:	3010      	adds	r0, #16
   159ee:	6a23      	ldr	r3, [r4, #32]
   159f0:	f013 0f02 	tst.w	r3, #2
   159f4:	f040 8380 	bne.w	160f8 <basic_init+0x10d0>
   159f8:	231f      	movs	r3, #31
   159fa:	213f      	movs	r1, #63	; 0x3f
   159fc:	461c      	mov	r4, r3
   159fe:	f04f 0200 	mov.w	r2, #0
   15a02:	f364 0204 	bfi	r2, r4, #0, #5
   15a06:	f361 124a 	bfi	r2, r1, #5, #6
   15a0a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   15a0e:	f248 0189 	movw	r1, #32905	; 0x8089
   15a12:	4b91      	ldr	r3, [pc, #580]	; (15c58 <basic_init+0xc30>)
   15a14:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15a16:	4b91      	ldr	r3, [pc, #580]	; (15c5c <basic_init+0xc34>)
   15a18:	6818      	ldr	r0, [r3, #0]
   15a1a:	3010      	adds	r0, #16
   15a1c:	6a1b      	ldr	r3, [r3, #32]
   15a1e:	f013 0f02 	tst.w	r3, #2
   15a22:	f040 836d 	bne.w	16100 <basic_init+0x10d8>
   15a26:	231f      	movs	r3, #31
   15a28:	213f      	movs	r1, #63	; 0x3f
   15a2a:	461c      	mov	r4, r3
   15a2c:	f04f 0200 	mov.w	r2, #0
   15a30:	f364 0204 	bfi	r2, r4, #0, #5
   15a34:	f361 124a 	bfi	r2, r1, #5, #6
   15a38:	f363 22cf 	bfi	r2, r3, #11, #5
   15a3c:	f249 0189 	movw	r1, #37001	; 0x9089
   15a40:	4d85      	ldr	r5, [pc, #532]	; (15c58 <basic_init+0xc30>)
   15a42:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   15a44:	4c85      	ldr	r4, [pc, #532]	; (15c5c <basic_init+0xc34>)
   15a46:	6820      	ldr	r0, [r4, #0]
   15a48:	f04f 32ff 	mov.w	r2, #4294967295
   15a4c:	f248 1189 	movw	r1, #33161	; 0x8189
   15a50:	3010      	adds	r0, #16
   15a52:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   15a54:	6820      	ldr	r0, [r4, #0]
   15a56:	f04f 32ff 	mov.w	r2, #4294967295
   15a5a:	f249 1189 	movw	r1, #37257	; 0x9189
   15a5e:	3010      	adds	r0, #16
   15a60:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   15a62:	6820      	ldr	r0, [r4, #0]
   15a64:	2311      	movs	r3, #17
   15a66:	f04f 0200 	mov.w	r2, #0
   15a6a:	f363 0204 	bfi	r2, r3, #0, #5
   15a6e:	2122      	movs	r1, #34	; 0x22
   15a70:	f361 124a 	bfi	r2, r1, #5, #6
   15a74:	f363 22cf 	bfi	r2, r3, #11, #5
   15a78:	f24a 0189 	movw	r1, #41097	; 0xa089
   15a7c:	3010      	adds	r0, #16
   15a7e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15a80:	6820      	ldr	r0, [r4, #0]
   15a82:	3010      	adds	r0, #16
   15a84:	6a23      	ldr	r3, [r4, #32]
   15a86:	f013 0f02 	tst.w	r3, #2
   15a8a:	f040 833d 	bne.w	16108 <basic_init+0x10e0>
   15a8e:	231f      	movs	r3, #31
   15a90:	213f      	movs	r1, #63	; 0x3f
   15a92:	461c      	mov	r4, r3
   15a94:	f04f 0200 	mov.w	r2, #0
   15a98:	f364 0204 	bfi	r2, r4, #0, #5
   15a9c:	f361 124a 	bfi	r2, r1, #5, #6
   15aa0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   15aa4:	f248 01a9 	movw	r1, #32937	; 0x80a9
   15aa8:	4b6b      	ldr	r3, [pc, #428]	; (15c58 <basic_init+0xc30>)
   15aaa:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15aac:	4b6b      	ldr	r3, [pc, #428]	; (15c5c <basic_init+0xc34>)
   15aae:	6818      	ldr	r0, [r3, #0]
   15ab0:	3010      	adds	r0, #16
   15ab2:	6a1b      	ldr	r3, [r3, #32]
   15ab4:	f013 0f02 	tst.w	r3, #2
   15ab8:	f040 832a 	bne.w	16110 <basic_init+0x10e8>
   15abc:	231f      	movs	r3, #31
   15abe:	213f      	movs	r1, #63	; 0x3f
   15ac0:	461c      	mov	r4, r3
   15ac2:	f04f 0200 	mov.w	r2, #0
   15ac6:	f364 0204 	bfi	r2, r4, #0, #5
   15aca:	f361 124a 	bfi	r2, r1, #5, #6
   15ace:	f363 22cf 	bfi	r2, r3, #11, #5
   15ad2:	f249 01a9 	movw	r1, #37033	; 0x90a9
   15ad6:	4d60      	ldr	r5, [pc, #384]	; (15c58 <basic_init+0xc30>)
   15ad8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
   15ada:	4c60      	ldr	r4, [pc, #384]	; (15c5c <basic_init+0xc34>)
   15adc:	6820      	ldr	r0, [r4, #0]
   15ade:	f04f 32ff 	mov.w	r2, #4294967295
   15ae2:	f249 01a9 	movw	r1, #37033	; 0x90a9
   15ae6:	3010      	adds	r0, #16
   15ae8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   15aea:	6820      	ldr	r0, [r4, #0]
   15aec:	f04f 32ff 	mov.w	r2, #4294967295
   15af0:	f249 11a9 	movw	r1, #37289	; 0x91a9
   15af4:	3010      	adds	r0, #16
   15af6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   15af8:	6820      	ldr	r0, [r4, #0]
   15afa:	2311      	movs	r3, #17
   15afc:	f04f 0200 	mov.w	r2, #0
   15b00:	f363 0204 	bfi	r2, r3, #0, #5
   15b04:	2122      	movs	r1, #34	; 0x22
   15b06:	f361 124a 	bfi	r2, r1, #5, #6
   15b0a:	f363 22cf 	bfi	r2, r3, #11, #5
   15b0e:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   15b12:	3010      	adds	r0, #16
   15b14:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15b16:	6820      	ldr	r0, [r4, #0]
   15b18:	3010      	adds	r0, #16
   15b1a:	6a23      	ldr	r3, [r4, #32]
   15b1c:	f013 0f02 	tst.w	r3, #2
   15b20:	f040 82fa 	bne.w	16118 <basic_init+0x10f0>
   15b24:	231f      	movs	r3, #31
   15b26:	213f      	movs	r1, #63	; 0x3f
   15b28:	461c      	mov	r4, r3
   15b2a:	f04f 0200 	mov.w	r2, #0
   15b2e:	f364 0204 	bfi	r2, r4, #0, #5
   15b32:	f361 124a 	bfi	r2, r1, #5, #6
   15b36:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   15b3a:	2179      	movs	r1, #121	; 0x79
   15b3c:	4b46      	ldr	r3, [pc, #280]	; (15c58 <basic_init+0xc30>)
   15b3e:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
   15b40:	4b46      	ldr	r3, [pc, #280]	; (15c5c <basic_init+0xc34>)
   15b42:	6818      	ldr	r0, [r3, #0]
   15b44:	3010      	adds	r0, #16
   15b46:	6a1b      	ldr	r3, [r3, #32]
   15b48:	f013 0f02 	tst.w	r3, #2
   15b4c:	f040 82e8 	bne.w	16120 <basic_init+0x10f8>
   15b50:	231f      	movs	r3, #31
   15b52:	213f      	movs	r1, #63	; 0x3f
   15b54:	461c      	mov	r4, r3
   15b56:	f04f 0200 	mov.w	r2, #0
   15b5a:	f364 0204 	bfi	r2, r4, #0, #5
   15b5e:	f361 124a 	bfi	r2, r1, #5, #6
   15b62:	f363 22cf 	bfi	r2, r3, #11, #5
   15b66:	f241 0179 	movw	r1, #4217	; 0x1079
   15b6a:	4d3b      	ldr	r5, [pc, #236]	; (15c58 <basic_init+0xc30>)
   15b6c:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
   15b6e:	4c3b      	ldr	r4, [pc, #236]	; (15c5c <basic_init+0xc34>)
   15b70:	6820      	ldr	r0, [r4, #0]
   15b72:	f04f 32ff 	mov.w	r2, #4294967295
   15b76:	f240 1179 	movw	r1, #377	; 0x179
   15b7a:	3010      	adds	r0, #16
   15b7c:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
   15b7e:	6820      	ldr	r0, [r4, #0]
   15b80:	f04f 32ff 	mov.w	r2, #4294967295
   15b84:	f241 1179 	movw	r1, #4473	; 0x1179
   15b88:	3010      	adds	r0, #16
   15b8a:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
   15b8c:	6820      	ldr	r0, [r4, #0]
   15b8e:	2311      	movs	r3, #17
   15b90:	f04f 0200 	mov.w	r2, #0
   15b94:	f363 0204 	bfi	r2, r3, #0, #5
   15b98:	2122      	movs	r1, #34	; 0x22
   15b9a:	f361 124a 	bfi	r2, r1, #5, #6
   15b9e:	f363 22cf 	bfi	r2, r3, #11, #5
   15ba2:	f242 0179 	movw	r1, #8313	; 0x2079
   15ba6:	3010      	adds	r0, #16
   15ba8:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   15baa:	6824      	ldr	r4, [r4, #0]
   15bac:	3410      	adds	r4, #16
   15bae:	2000      	movs	r0, #0
   15bb0:	4b2b      	ldr	r3, [pc, #172]	; (15c60 <basic_init+0xc38>)
   15bb2:	4798      	blx	r3
   15bb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15bb8:	00c0      	lsls	r0, r0, #3
   15bba:	3050      	adds	r0, #80	; 0x50
   15bbc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15bc0:	f280 82b2 	bge.w	16128 <basic_init+0x1100>
   15bc4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15bc6:	2112      	movs	r1, #18
   15bc8:	4620      	mov	r0, r4
   15bca:	4b26      	ldr	r3, [pc, #152]	; (15c64 <basic_init+0xc3c>)
   15bcc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   15bce:	4b23      	ldr	r3, [pc, #140]	; (15c5c <basic_init+0xc34>)
   15bd0:	681c      	ldr	r4, [r3, #0]
   15bd2:	3410      	adds	r4, #16
   15bd4:	2000      	movs	r0, #0
   15bd6:	4b22      	ldr	r3, [pc, #136]	; (15c60 <basic_init+0xc38>)
   15bd8:	4798      	blx	r3
   15bda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15bde:	00c0      	lsls	r0, r0, #3
   15be0:	3050      	adds	r0, #80	; 0x50
   15be2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15be6:	f280 82ae 	bge.w	16146 <basic_init+0x111e>
   15bea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15bec:	2113      	movs	r1, #19
   15bee:	4620      	mov	r0, r4
   15bf0:	4b1c      	ldr	r3, [pc, #112]	; (15c64 <basic_init+0xc3c>)
   15bf2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   15bf4:	4b19      	ldr	r3, [pc, #100]	; (15c5c <basic_init+0xc34>)
   15bf6:	681c      	ldr	r4, [r3, #0]
   15bf8:	3410      	adds	r4, #16
   15bfa:	2000      	movs	r0, #0
   15bfc:	4b18      	ldr	r3, [pc, #96]	; (15c60 <basic_init+0xc38>)
   15bfe:	4798      	blx	r3
   15c00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15c04:	3050      	adds	r0, #80	; 0x50
   15c06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c0a:	f280 82ab 	bge.w	16164 <basic_init+0x113c>
   15c0e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15c10:	2110      	movs	r1, #16
   15c12:	4620      	mov	r0, r4
   15c14:	4b13      	ldr	r3, [pc, #76]	; (15c64 <basic_init+0xc3c>)
   15c16:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   15c18:	4b10      	ldr	r3, [pc, #64]	; (15c5c <basic_init+0xc34>)
   15c1a:	681c      	ldr	r4, [r3, #0]
   15c1c:	3410      	adds	r4, #16
   15c1e:	2000      	movs	r0, #0
   15c20:	4b0f      	ldr	r3, [pc, #60]	; (15c60 <basic_init+0xc38>)
   15c22:	4798      	blx	r3
   15c24:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15c28:	3050      	adds	r0, #80	; 0x50
   15c2a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c2e:	f280 82a7 	bge.w	16180 <basic_init+0x1158>
   15c32:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15c34:	2111      	movs	r1, #17
   15c36:	4620      	mov	r0, r4
   15c38:	4b0a      	ldr	r3, [pc, #40]	; (15c64 <basic_init+0xc3c>)
   15c3a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   15c3c:	4b07      	ldr	r3, [pc, #28]	; (15c5c <basic_init+0xc34>)
   15c3e:	681c      	ldr	r4, [r3, #0]
   15c40:	3410      	adds	r4, #16
   15c42:	2000      	movs	r0, #0
   15c44:	4b06      	ldr	r3, [pc, #24]	; (15c60 <basic_init+0xc38>)
   15c46:	4798      	blx	r3
   15c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15c4c:	0080      	lsls	r0, r0, #2
   15c4e:	3050      	adds	r0, #80	; 0x50
   15c50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15c54:	e00a      	b.n	15c6c <basic_init+0xc44>
   15c56:	bf00      	nop
   15c58:	00006fcd 	.word	0x00006fcd
   15c5c:	20006bd8 	.word	0x20006bd8
   15c60:	000114e5 	.word	0x000114e5
   15c64:	00006e89 	.word	0x00006e89
   15c68:	00007111 	.word	0x00007111
   15c6c:	f280 8296 	bge.w	1619c <basic_init+0x1174>
   15c70:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15c72:	2114      	movs	r1, #20
   15c74:	4620      	mov	r0, r4
   15c76:	4dbd      	ldr	r5, [pc, #756]	; (15f6c <basic_init+0xf44>)
   15c78:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, 3);
   15c7a:	4cbd      	ldr	r4, [pc, #756]	; (15f70 <basic_init+0xf48>)
   15c7c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   15c7e:	2203      	movs	r2, #3
   15c80:	2140      	movs	r1, #64	; 0x40
   15c82:	3010      	adds	r0, #16
   15c84:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
   15c86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   15c88:	2200      	movs	r2, #0
   15c8a:	214c      	movs	r1, #76	; 0x4c
   15c8c:	3010      	adds	r0, #16
   15c8e:	4eb9      	ldr	r6, [pc, #740]	; (15f74 <basic_init+0xf4c>)
   15c90:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
   15c92:	6820      	ldr	r0, [r4, #0]
   15c94:	227f      	movs	r2, #127	; 0x7f
   15c96:	f44f 7113 	mov.w	r1, #588	; 0x24c
   15c9a:	3010      	adds	r0, #16
   15c9c:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
   15c9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   15ca0:	89a2      	ldrh	r2, [r4, #12]
   15ca2:	2149      	movs	r1, #73	; 0x49
   15ca4:	3010      	adds	r0, #16
   15ca6:	4eb4      	ldr	r6, [pc, #720]	; (15f78 <basic_init+0xf50>)
   15ca8:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
   15caa:	6820      	ldr	r0, [r4, #0]
   15cac:	89e2      	ldrh	r2, [r4, #14]
   15cae:	f240 4149 	movw	r1, #1097	; 0x449
   15cb2:	3010      	adds	r0, #16
   15cb4:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   15cb6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   15cb8:	2296      	movs	r2, #150	; 0x96
   15cba:	21b0      	movs	r1, #176	; 0xb0
   15cbc:	3010      	adds	r0, #16
   15cbe:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
   15cc0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
   15cc2:	223c      	movs	r2, #60	; 0x3c
   15cc4:	21b5      	movs	r1, #181	; 0xb5
   15cc6:	3010      	adds	r0, #16
   15cc8:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   15cca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   15ccc:	2229      	movs	r2, #41	; 0x29
   15cce:	21b6      	movs	r1, #182	; 0xb6
   15cd0:	3010      	adds	r0, #16
   15cd2:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   15cd4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   15cd6:	224c      	movs	r2, #76	; 0x4c
   15cd8:	21b7      	movs	r1, #183	; 0xb7
   15cda:	3010      	adds	r0, #16
   15cdc:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   15cde:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
   15ce0:	2296      	movs	r2, #150	; 0x96
   15ce2:	21b1      	movs	r1, #177	; 0xb1
   15ce4:	3010      	adds	r0, #16
   15ce6:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
   15ce8:	6820      	ldr	r0, [r4, #0]
   15cea:	2200      	movs	r2, #0
   15cec:	f241 01b1 	movw	r1, #4273	; 0x10b1
   15cf0:	3010      	adds	r0, #16
   15cf2:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
   15cf4:	6820      	ldr	r0, [r4, #0]
   15cf6:	3014      	adds	r0, #20
   15cf8:	4ba0      	ldr	r3, [pc, #640]	; (15f7c <basic_init+0xf54>)
   15cfa:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15cfc:	6824      	ldr	r4, [r4, #0]
   15cfe:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   15d00:	2000      	movs	r0, #0
   15d02:	4b9f      	ldr	r3, [pc, #636]	; (15f80 <basic_init+0xf58>)
   15d04:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15d06:	2832      	cmp	r0, #50	; 0x32
   15d08:	f200 8266 	bhi.w	161d8 <basic_init+0x11b0>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   15d0c:	2000      	movs	r0, #0
   15d0e:	4b9d      	ldr	r3, [pc, #628]	; (15f84 <basic_init+0xf5c>)
   15d10:	4798      	blx	r3
   15d12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15d16:	0080      	lsls	r0, r0, #2
   15d18:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   15d1a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15d1e:	f280 824c 	bge.w	161ba <basic_init+0x1192>
   15d22:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15d24:	2114      	movs	r1, #20
   15d26:	4620      	mov	r0, r4
   15d28:	4b90      	ldr	r3, [pc, #576]	; (15f6c <basic_init+0xf44>)
   15d2a:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
   15d2c:	4b90      	ldr	r3, [pc, #576]	; (15f70 <basic_init+0xf48>)
   15d2e:	6818      	ldr	r0, [r3, #0]
   15d30:	3018      	adds	r0, #24
   15d32:	4b92      	ldr	r3, [pc, #584]	; (15f7c <basic_init+0xf54>)
   15d34:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   15d36:	2000      	movs	r0, #0
   15d38:	4b91      	ldr	r3, [pc, #580]	; (15f80 <basic_init+0xf58>)
   15d3a:	4798      	blx	r3
   15d3c:	2832      	cmp	r0, #50	; 0x32
   15d3e:	f200 8275 	bhi.w	1622c <basic_init+0x1204>
   15d42:	2000      	movs	r0, #0
   15d44:	4b8f      	ldr	r3, [pc, #572]	; (15f84 <basic_init+0xf5c>)
   15d46:	4798      	blx	r3
   15d48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15d4c:	0040      	lsls	r0, r0, #1
   15d4e:	3050      	adds	r0, #80	; 0x50
   15d50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15d54:	f280 825b 	bge.w	1620e <basic_init+0x11e6>
   15d58:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   15d5a:	4e85      	ldr	r6, [pc, #532]	; (15f70 <basic_init+0xf48>)
   15d5c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   15d5e:	4622      	mov	r2, r4
   15d60:	2112      	movs	r1, #18
   15d62:	3018      	adds	r0, #24
   15d64:	4d81      	ldr	r5, [pc, #516]	; (15f6c <basic_init+0xf44>)
   15d66:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   15d68:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   15d6a:	4622      	mov	r2, r4
   15d6c:	2113      	movs	r1, #19
   15d6e:	3018      	adds	r0, #24
   15d70:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
   15d72:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   15d74:	4622      	mov	r2, r4
   15d76:	2110      	movs	r1, #16
   15d78:	3018      	adds	r0, #24
   15d7a:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   15d7c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   15d7e:	4622      	mov	r2, r4
   15d80:	2111      	movs	r1, #17
   15d82:	3018      	adds	r0, #24
   15d84:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
   15d86:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   15d88:	4622      	mov	r2, r4
   15d8a:	2114      	movs	r1, #20
   15d8c:	3018      	adds	r0, #24
   15d8e:	47a8      	blx	r5
   15d90:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
   15d92:	2000      	movs	r0, #0
   15d94:	4b7b      	ldr	r3, [pc, #492]	; (15f84 <basic_init+0xf5c>)
   15d96:	4798      	blx	r3
   15d98:	300a      	adds	r0, #10
   15d9a:	00c0      	lsls	r0, r0, #3
   15d9c:	4b7a      	ldr	r3, [pc, #488]	; (15f88 <basic_init+0xf60>)
   15d9e:	fb83 2300 	smull	r2, r3, r3, r0
   15da2:	17c2      	asrs	r2, r0, #31
   15da4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15da8:	b212      	sxth	r2, r2
   15daa:	f7ff b9ad 	b.w	15108 <basic_init+0xe0>
   15dae:	231f      	movs	r3, #31
   15db0:	213f      	movs	r1, #63	; 0x3f
   15db2:	461c      	mov	r4, r3
   15db4:	f7ff b9bd 	b.w	15132 <basic_init+0x10a>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   15db8:	2000      	movs	r0, #0
   15dba:	4b72      	ldr	r3, [pc, #456]	; (15f84 <basic_init+0xf5c>)
   15dbc:	4798      	blx	r3
   15dbe:	3028      	adds	r0, #40	; 0x28
   15dc0:	0040      	lsls	r0, r0, #1
   15dc2:	4b71      	ldr	r3, [pc, #452]	; (15f88 <basic_init+0xf60>)
   15dc4:	fb83 2300 	smull	r2, r3, r3, r0
   15dc8:	17c2      	asrs	r2, r0, #31
   15dca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15dce:	b212      	sxth	r2, r2
   15dd0:	f7ff b9ed 	b.w	151ae <basic_init+0x186>
   15dd4:	2307      	movs	r3, #7
   15dd6:	210f      	movs	r1, #15
   15dd8:	2408      	movs	r4, #8
   15dda:	f7ff ba03 	b.w	151e4 <basic_init+0x1bc>
   15dde:	2307      	movs	r3, #7
   15de0:	210f      	movs	r1, #15
   15de2:	2408      	movs	r4, #8
   15de4:	f7ff ba1b 	b.w	1521e <basic_init+0x1f6>
   15de8:	2307      	movs	r3, #7
   15dea:	210f      	movs	r1, #15
   15dec:	2408      	movs	r4, #8
   15dee:	f7ff ba2c 	b.w	1524a <basic_init+0x222>
   15df2:	2307      	movs	r3, #7
   15df4:	210f      	movs	r1, #15
   15df6:	2408      	movs	r4, #8
   15df8:	f7ff ba3e 	b.w	15278 <basic_init+0x250>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   15dfc:	2000      	movs	r0, #0
   15dfe:	4b61      	ldr	r3, [pc, #388]	; (15f84 <basic_init+0xf5c>)
   15e00:	4798      	blx	r3
   15e02:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15e06:	3050      	adds	r0, #80	; 0x50
   15e08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15e0c:	da02      	bge.n	15e14 <basic_init+0xdec>
   15e0e:	2401      	movs	r4, #1
   15e10:	f7ff ba58 	b.w	152c4 <basic_init+0x29c>
   15e14:	2000      	movs	r0, #0
   15e16:	4b5b      	ldr	r3, [pc, #364]	; (15f84 <basic_init+0xf5c>)
   15e18:	4798      	blx	r3
   15e1a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15e1e:	3050      	adds	r0, #80	; 0x50
   15e20:	4a59      	ldr	r2, [pc, #356]	; (15f88 <basic_init+0xf60>)
   15e22:	fb82 3200 	smull	r3, r2, r2, r0
   15e26:	17c4      	asrs	r4, r0, #31
   15e28:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15e2c:	b2a4      	uxth	r4, r4
   15e2e:	f7ff ba49 	b.w	152c4 <basic_init+0x29c>
   15e32:	2000      	movs	r0, #0
   15e34:	4b53      	ldr	r3, [pc, #332]	; (15f84 <basic_init+0xf5c>)
   15e36:	4798      	blx	r3
   15e38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15e3c:	0040      	lsls	r0, r0, #1
   15e3e:	3050      	adds	r0, #80	; 0x50
   15e40:	4a51      	ldr	r2, [pc, #324]	; (15f88 <basic_init+0xf60>)
   15e42:	fb82 3200 	smull	r3, r2, r2, r0
   15e46:	17c4      	asrs	r4, r0, #31
   15e48:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15e4c:	b2a4      	uxth	r4, r4
   15e4e:	f7ff ba39 	b.w	152c4 <basic_init+0x29c>
   15e52:	2000      	movs	r0, #0
   15e54:	4b4b      	ldr	r3, [pc, #300]	; (15f84 <basic_init+0xf5c>)
   15e56:	4798      	blx	r3
   15e58:	3028      	adds	r0, #40	; 0x28
   15e5a:	0040      	lsls	r0, r0, #1
   15e5c:	4b4a      	ldr	r3, [pc, #296]	; (15f88 <basic_init+0xf60>)
   15e5e:	fb83 2300 	smull	r2, r3, r3, r0
   15e62:	17c2      	asrs	r2, r0, #31
   15e64:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15e68:	b292      	uxth	r2, r2
   15e6a:	f7ff ba35 	b.w	152d8 <basic_init+0x2b0>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   15e6e:	2000      	movs	r0, #0
   15e70:	4b44      	ldr	r3, [pc, #272]	; (15f84 <basic_init+0xf5c>)
   15e72:	4798      	blx	r3
   15e74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15e78:	3050      	adds	r0, #80	; 0x50
   15e7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15e7e:	da02      	bge.n	15e86 <basic_init+0xe5e>
   15e80:	2401      	movs	r4, #1
   15e82:	f7ff ba55 	b.w	15330 <basic_init+0x308>
   15e86:	2000      	movs	r0, #0
   15e88:	4b3e      	ldr	r3, [pc, #248]	; (15f84 <basic_init+0xf5c>)
   15e8a:	4798      	blx	r3
   15e8c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15e90:	3050      	adds	r0, #80	; 0x50
   15e92:	4a3d      	ldr	r2, [pc, #244]	; (15f88 <basic_init+0xf60>)
   15e94:	fb82 3200 	smull	r3, r2, r2, r0
   15e98:	17c4      	asrs	r4, r0, #31
   15e9a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15e9e:	b2a4      	uxth	r4, r4
   15ea0:	f7ff ba46 	b.w	15330 <basic_init+0x308>
   15ea4:	2000      	movs	r0, #0
   15ea6:	4b37      	ldr	r3, [pc, #220]	; (15f84 <basic_init+0xf5c>)
   15ea8:	4798      	blx	r3
   15eaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15eae:	0040      	lsls	r0, r0, #1
   15eb0:	3050      	adds	r0, #80	; 0x50
   15eb2:	4a35      	ldr	r2, [pc, #212]	; (15f88 <basic_init+0xf60>)
   15eb4:	fb82 3200 	smull	r3, r2, r2, r0
   15eb8:	17c4      	asrs	r4, r0, #31
   15eba:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15ebe:	b2a4      	uxth	r4, r4
   15ec0:	f7ff ba36 	b.w	15330 <basic_init+0x308>
   15ec4:	2000      	movs	r0, #0
   15ec6:	4b2f      	ldr	r3, [pc, #188]	; (15f84 <basic_init+0xf5c>)
   15ec8:	4798      	blx	r3
   15eca:	3028      	adds	r0, #40	; 0x28
   15ecc:	0040      	lsls	r0, r0, #1
   15ece:	4b2e      	ldr	r3, [pc, #184]	; (15f88 <basic_init+0xf60>)
   15ed0:	fb83 2300 	smull	r2, r3, r3, r0
   15ed4:	17c2      	asrs	r2, r0, #31
   15ed6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15eda:	b292      	uxth	r2, r2
   15edc:	f7ff ba32 	b.w	15344 <basic_init+0x31c>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   15ee0:	2000      	movs	r0, #0
   15ee2:	4b28      	ldr	r3, [pc, #160]	; (15f84 <basic_init+0xf5c>)
   15ee4:	4798      	blx	r3
   15ee6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15eea:	3050      	adds	r0, #80	; 0x50
   15eec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15ef0:	da02      	bge.n	15ef8 <basic_init+0xed0>
   15ef2:	2401      	movs	r4, #1
   15ef4:	f7ff ba41 	b.w	1537a <basic_init+0x352>
   15ef8:	2000      	movs	r0, #0
   15efa:	4b22      	ldr	r3, [pc, #136]	; (15f84 <basic_init+0xf5c>)
   15efc:	4798      	blx	r3
   15efe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f02:	3050      	adds	r0, #80	; 0x50
   15f04:	4a20      	ldr	r2, [pc, #128]	; (15f88 <basic_init+0xf60>)
   15f06:	fb82 3200 	smull	r3, r2, r2, r0
   15f0a:	17c4      	asrs	r4, r0, #31
   15f0c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15f10:	b2a4      	uxth	r4, r4
   15f12:	f7ff ba32 	b.w	1537a <basic_init+0x352>
   15f16:	2000      	movs	r0, #0
   15f18:	4b1a      	ldr	r3, [pc, #104]	; (15f84 <basic_init+0xf5c>)
   15f1a:	4798      	blx	r3
   15f1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f20:	0040      	lsls	r0, r0, #1
   15f22:	3050      	adds	r0, #80	; 0x50
   15f24:	4a18      	ldr	r2, [pc, #96]	; (15f88 <basic_init+0xf60>)
   15f26:	fb82 3200 	smull	r3, r2, r2, r0
   15f2a:	17c4      	asrs	r4, r0, #31
   15f2c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15f30:	b2a4      	uxth	r4, r4
   15f32:	f7ff ba22 	b.w	1537a <basic_init+0x352>
   15f36:	2000      	movs	r0, #0
   15f38:	4b12      	ldr	r3, [pc, #72]	; (15f84 <basic_init+0xf5c>)
   15f3a:	4798      	blx	r3
   15f3c:	3028      	adds	r0, #40	; 0x28
   15f3e:	0040      	lsls	r0, r0, #1
   15f40:	4b11      	ldr	r3, [pc, #68]	; (15f88 <basic_init+0xf60>)
   15f42:	fb83 2300 	smull	r2, r3, r3, r0
   15f46:	17c2      	asrs	r2, r0, #31
   15f48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15f4c:	b292      	uxth	r2, r2
   15f4e:	f7ff ba1e 	b.w	1538e <basic_init+0x366>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
   15f52:	2000      	movs	r0, #0
   15f54:	4b0b      	ldr	r3, [pc, #44]	; (15f84 <basic_init+0xf5c>)
   15f56:	4798      	blx	r3
   15f58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f5c:	3050      	adds	r0, #80	; 0x50
   15f5e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15f62:	da13      	bge.n	15f8c <basic_init+0xf64>
   15f64:	2401      	movs	r4, #1
   15f66:	f7ff ba2d 	b.w	153c4 <basic_init+0x39c>
   15f6a:	bf00      	nop
   15f6c:	00006e89 	.word	0x00006e89
   15f70:	20006bd8 	.word	0x20006bd8
   15f74:	00007111 	.word	0x00007111
   15f78:	00006fcd 	.word	0x00006fcd
   15f7c:	00015009 	.word	0x00015009
   15f80:	00011501 	.word	0x00011501
   15f84:	000114e5 	.word	0x000114e5
   15f88:	66666667 	.word	0x66666667
   15f8c:	2000      	movs	r0, #0
   15f8e:	4bb5      	ldr	r3, [pc, #724]	; (16264 <basic_init+0x123c>)
   15f90:	4798      	blx	r3
   15f92:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15f96:	3050      	adds	r0, #80	; 0x50
   15f98:	4ab3      	ldr	r2, [pc, #716]	; (16268 <basic_init+0x1240>)
   15f9a:	fb82 3200 	smull	r3, r2, r2, r0
   15f9e:	17c4      	asrs	r4, r0, #31
   15fa0:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15fa4:	b2a4      	uxth	r4, r4
   15fa6:	f7ff ba0d 	b.w	153c4 <basic_init+0x39c>
   15faa:	2000      	movs	r0, #0
   15fac:	4bad      	ldr	r3, [pc, #692]	; (16264 <basic_init+0x123c>)
   15fae:	4798      	blx	r3
   15fb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15fb4:	0040      	lsls	r0, r0, #1
   15fb6:	3050      	adds	r0, #80	; 0x50
   15fb8:	4aab      	ldr	r2, [pc, #684]	; (16268 <basic_init+0x1240>)
   15fba:	fb82 3200 	smull	r3, r2, r2, r0
   15fbe:	17c4      	asrs	r4, r0, #31
   15fc0:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
   15fc4:	b2a4      	uxth	r4, r4
   15fc6:	f7ff b9fd 	b.w	153c4 <basic_init+0x39c>
   15fca:	2000      	movs	r0, #0
   15fcc:	4ba5      	ldr	r3, [pc, #660]	; (16264 <basic_init+0x123c>)
   15fce:	4798      	blx	r3
   15fd0:	3028      	adds	r0, #40	; 0x28
   15fd2:	0040      	lsls	r0, r0, #1
   15fd4:	4ba4      	ldr	r3, [pc, #656]	; (16268 <basic_init+0x1240>)
   15fd6:	fb83 2300 	smull	r2, r3, r3, r0
   15fda:	17c2      	asrs	r2, r0, #31
   15fdc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   15fe0:	b292      	uxth	r2, r2
   15fe2:	f7ff b9f9 	b.w	153d8 <basic_init+0x3b0>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
   15fe6:	2000      	movs	r0, #0
   15fe8:	4b9e      	ldr	r3, [pc, #632]	; (16264 <basic_init+0x123c>)
   15fea:	4798      	blx	r3
   15fec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   15ff0:	3050      	adds	r0, #80	; 0x50
   15ff2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   15ff6:	da02      	bge.n	15ffe <basic_init+0xfd6>
   15ff8:	2201      	movs	r2, #1
   15ffa:	f7ff ba08 	b.w	1540e <basic_init+0x3e6>
   15ffe:	2000      	movs	r0, #0
   16000:	4b98      	ldr	r3, [pc, #608]	; (16264 <basic_init+0x123c>)
   16002:	4798      	blx	r3
   16004:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16008:	3050      	adds	r0, #80	; 0x50
   1600a:	4b97      	ldr	r3, [pc, #604]	; (16268 <basic_init+0x1240>)
   1600c:	fb83 2300 	smull	r2, r3, r3, r0
   16010:	17c2      	asrs	r2, r0, #31
   16012:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16016:	b212      	sxth	r2, r2
   16018:	f7ff b9f9 	b.w	1540e <basic_init+0x3e6>
   1601c:	2000      	movs	r0, #0
   1601e:	4b91      	ldr	r3, [pc, #580]	; (16264 <basic_init+0x123c>)
   16020:	4798      	blx	r3
   16022:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16026:	0040      	lsls	r0, r0, #1
   16028:	3050      	adds	r0, #80	; 0x50
   1602a:	4b8f      	ldr	r3, [pc, #572]	; (16268 <basic_init+0x1240>)
   1602c:	fb83 2300 	smull	r2, r3, r3, r0
   16030:	17c2      	asrs	r2, r0, #31
   16032:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16036:	b212      	sxth	r2, r2
   16038:	f7ff b9e9 	b.w	1540e <basic_init+0x3e6>
   1603c:	231b      	movs	r3, #27
   1603e:	2139      	movs	r1, #57	; 0x39
   16040:	241d      	movs	r4, #29
   16042:	f7ff ba20 	b.w	15486 <basic_init+0x45e>
   16046:	231d      	movs	r3, #29
   16048:	213b      	movs	r1, #59	; 0x3b
   1604a:	461c      	mov	r4, r3
   1604c:	f7ff ba9f 	b.w	1558e <basic_init+0x566>
   16050:	231f      	movs	r3, #31
   16052:	213f      	movs	r1, #63	; 0x3f
   16054:	461c      	mov	r4, r3
   16056:	f7ff bad3 	b.w	15600 <basic_init+0x5d8>
   1605a:	2319      	movs	r3, #25
   1605c:	2133      	movs	r1, #51	; 0x33
   1605e:	461c      	mov	r4, r3
   16060:	f7ff baf7 	b.w	15652 <basic_init+0x62a>
   16064:	2307      	movs	r3, #7
   16066:	210f      	movs	r1, #15
   16068:	2408      	movs	r4, #8
   1606a:	f7ff bb5a 	b.w	15722 <basic_init+0x6fa>
   1606e:	2307      	movs	r3, #7
   16070:	210f      	movs	r1, #15
   16072:	2408      	movs	r4, #8
   16074:	f7ff bb91 	b.w	1579a <basic_init+0x772>
   16078:	231f      	movs	r3, #31
   1607a:	213f      	movs	r1, #63	; 0x3f
   1607c:	461c      	mov	r4, r3
   1607e:	f7ff bbde 	b.w	1583e <basic_init+0x816>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) * (255 - mix)));
   16082:	4d7a      	ldr	r5, [pc, #488]	; (1626c <basic_init+0x1244>)
   16084:	7b6b      	ldrb	r3, [r5, #13]
   16086:	08db      	lsrs	r3, r3, #3
   16088:	214c      	movs	r1, #76	; 0x4c
   1608a:	fb01 f303 	mul.w	r3, r1, r3
   1608e:	f203 73b1 	addw	r3, r3, #1969	; 0x7b1
   16092:	eb03 2203 	add.w	r2, r3, r3, lsl #8
   16096:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
   1609a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) * (255 - mix)));
   1609e:	89ac      	ldrh	r4, [r5, #12]
   160a0:	f3c4 1445 	ubfx	r4, r4, #5, #6
   160a4:	f241 02c8 	movw	r2, #4296	; 0x10c8
   160a8:	fb01 2404 	mla	r4, r1, r4, r2
   160ac:	eb04 2204 	add.w	r2, r4, r4, lsl #8
   160b0:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   160b4:	f3c4 54c5 	ubfx	r4, r4, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) * (255 - mix)));
   160b8:	7b2a      	ldrb	r2, [r5, #12]
   160ba:	f002 021f 	and.w	r2, r2, #31
   160be:	fb01 f102 	mul.w	r1, r1, r2
   160c2:	f601 11ca 	addw	r1, r1, #2506	; 0x9ca
   160c6:	eb01 2201 	add.w	r2, r1, r1, lsl #8
   160ca:	eb01 11c2 	add.w	r1, r1, r2, lsl #7
   160ce:	f3c1 51c4 	ubfx	r1, r1, #23, #5
   160d2:	f7ff bbf5 	b.w	158c0 <basic_init+0x898>
   160d6:	231f      	movs	r3, #31
   160d8:	213f      	movs	r1, #63	; 0x3f
   160da:	461c      	mov	r4, r3
   160dc:	e425      	b.n	1592a <basic_init+0x902>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   160de:	2000      	movs	r0, #0
   160e0:	4b60      	ldr	r3, [pc, #384]	; (16264 <basic_init+0x123c>)
   160e2:	4798      	blx	r3
   160e4:	3028      	adds	r0, #40	; 0x28
   160e6:	0040      	lsls	r0, r0, #1
   160e8:	4b5f      	ldr	r3, [pc, #380]	; (16268 <basic_init+0x1240>)
   160ea:	fb83 2300 	smull	r2, r3, r3, r0
   160ee:	17c2      	asrs	r2, r0, #31
   160f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   160f4:	b212      	sxth	r2, r2
   160f6:	e46c      	b.n	159d2 <basic_init+0x9aa>
   160f8:	2306      	movs	r3, #6
   160fa:	2110      	movs	r1, #16
   160fc:	2409      	movs	r4, #9
   160fe:	e47e      	b.n	159fe <basic_init+0x9d6>
   16100:	2306      	movs	r3, #6
   16102:	2110      	movs	r1, #16
   16104:	2409      	movs	r4, #9
   16106:	e491      	b.n	15a2c <basic_init+0xa04>
   16108:	2306      	movs	r3, #6
   1610a:	2110      	movs	r1, #16
   1610c:	2409      	movs	r4, #9
   1610e:	e4c1      	b.n	15a94 <basic_init+0xa6c>
   16110:	2306      	movs	r3, #6
   16112:	2110      	movs	r1, #16
   16114:	2409      	movs	r4, #9
   16116:	e4d4      	b.n	15ac2 <basic_init+0xa9a>
   16118:	2306      	movs	r3, #6
   1611a:	2110      	movs	r1, #16
   1611c:	2409      	movs	r4, #9
   1611e:	e504      	b.n	15b2a <basic_init+0xb02>
   16120:	2306      	movs	r3, #6
   16122:	2110      	movs	r1, #16
   16124:	2409      	movs	r4, #9
   16126:	e516      	b.n	15b56 <basic_init+0xb2e>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   16128:	2000      	movs	r0, #0
   1612a:	4b4e      	ldr	r3, [pc, #312]	; (16264 <basic_init+0x123c>)
   1612c:	4798      	blx	r3
   1612e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16132:	00c0      	lsls	r0, r0, #3
   16134:	3050      	adds	r0, #80	; 0x50
   16136:	4b4c      	ldr	r3, [pc, #304]	; (16268 <basic_init+0x1240>)
   16138:	fb83 2300 	smull	r2, r3, r3, r0
   1613c:	17c2      	asrs	r2, r0, #31
   1613e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16142:	b212      	sxth	r2, r2
   16144:	e53f      	b.n	15bc6 <basic_init+0xb9e>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
   16146:	2000      	movs	r0, #0
   16148:	4b46      	ldr	r3, [pc, #280]	; (16264 <basic_init+0x123c>)
   1614a:	4798      	blx	r3
   1614c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16150:	00c0      	lsls	r0, r0, #3
   16152:	3050      	adds	r0, #80	; 0x50
   16154:	4b44      	ldr	r3, [pc, #272]	; (16268 <basic_init+0x1240>)
   16156:	fb83 2300 	smull	r2, r3, r3, r0
   1615a:	17c2      	asrs	r2, r0, #31
   1615c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16160:	b212      	sxth	r2, r2
   16162:	e543      	b.n	15bec <basic_init+0xbc4>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   16164:	2000      	movs	r0, #0
   16166:	4b3f      	ldr	r3, [pc, #252]	; (16264 <basic_init+0x123c>)
   16168:	4798      	blx	r3
   1616a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1616e:	3050      	adds	r0, #80	; 0x50
   16170:	4b3d      	ldr	r3, [pc, #244]	; (16268 <basic_init+0x1240>)
   16172:	fb83 2300 	smull	r2, r3, r3, r0
   16176:	17c2      	asrs	r2, r0, #31
   16178:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1617c:	b212      	sxth	r2, r2
   1617e:	e547      	b.n	15c10 <basic_init+0xbe8>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
   16180:	2000      	movs	r0, #0
   16182:	4b38      	ldr	r3, [pc, #224]	; (16264 <basic_init+0x123c>)
   16184:	4798      	blx	r3
   16186:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1618a:	3050      	adds	r0, #80	; 0x50
   1618c:	4b36      	ldr	r3, [pc, #216]	; (16268 <basic_init+0x1240>)
   1618e:	fb83 2300 	smull	r2, r3, r3, r0
   16192:	17c2      	asrs	r2, r0, #31
   16194:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16198:	b212      	sxth	r2, r2
   1619a:	e54b      	b.n	15c34 <basic_init+0xc0c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
   1619c:	2000      	movs	r0, #0
   1619e:	4b31      	ldr	r3, [pc, #196]	; (16264 <basic_init+0x123c>)
   161a0:	4798      	blx	r3
   161a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   161a6:	0080      	lsls	r0, r0, #2
   161a8:	3050      	adds	r0, #80	; 0x50
   161aa:	4b2f      	ldr	r3, [pc, #188]	; (16268 <basic_init+0x1240>)
   161ac:	fb83 2300 	smull	r2, r3, r3, r0
   161b0:	17c2      	asrs	r2, r0, #31
   161b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   161b6:	b212      	sxth	r2, r2
   161b8:	e55b      	b.n	15c72 <basic_init+0xc4a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   161ba:	2000      	movs	r0, #0
   161bc:	4b29      	ldr	r3, [pc, #164]	; (16264 <basic_init+0x123c>)
   161be:	4798      	blx	r3
   161c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   161c4:	0080      	lsls	r0, r0, #2
   161c6:	3050      	adds	r0, #80	; 0x50
   161c8:	4b27      	ldr	r3, [pc, #156]	; (16268 <basic_init+0x1240>)
   161ca:	fb83 2300 	smull	r2, r3, r3, r0
   161ce:	17c2      	asrs	r2, r0, #31
   161d0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   161d4:	b212      	sxth	r2, r2
   161d6:	e5a5      	b.n	15d24 <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   161d8:	2000      	movs	r0, #0
   161da:	4b22      	ldr	r3, [pc, #136]	; (16264 <basic_init+0x123c>)
   161dc:	4798      	blx	r3
   161de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   161e2:	00c0      	lsls	r0, r0, #3
   161e4:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   161e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   161ea:	da01      	bge.n	161f0 <basic_init+0x11c8>
   161ec:	2201      	movs	r2, #1
   161ee:	e599      	b.n	15d24 <basic_init+0xcfc>
                           lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(20) : LV_DPX(40));
   161f0:	2000      	movs	r0, #0
   161f2:	4b1c      	ldr	r3, [pc, #112]	; (16264 <basic_init+0x123c>)
   161f4:	4798      	blx	r3
   161f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   161fa:	00c0      	lsls	r0, r0, #3
   161fc:	3050      	adds	r0, #80	; 0x50
   161fe:	4b1a      	ldr	r3, [pc, #104]	; (16268 <basic_init+0x1240>)
   16200:	fb83 2300 	smull	r2, r3, r3, r0
   16204:	17c2      	asrs	r2, r0, #31
   16206:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
   1620a:	b212      	sxth	r2, r2
   1620c:	e58a      	b.n	15d24 <basic_init+0xcfc>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_MEDIUM_LIMIT ? LV_DPX(10) : LV_DPX(20);
   1620e:	2000      	movs	r0, #0
   16210:	4b14      	ldr	r3, [pc, #80]	; (16264 <basic_init+0x123c>)
   16212:	4798      	blx	r3
   16214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16218:	0040      	lsls	r0, r0, #1
   1621a:	3050      	adds	r0, #80	; 0x50
   1621c:	4b12      	ldr	r3, [pc, #72]	; (16268 <basic_init+0x1240>)
   1621e:	fb83 2300 	smull	r2, r3, r3, r0
   16222:	17c4      	asrs	r4, r0, #31
   16224:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
   16228:	b224      	sxth	r4, r4
   1622a:	e596      	b.n	15d5a <basic_init+0xd32>
   1622c:	2000      	movs	r0, #0
   1622e:	4b0d      	ldr	r3, [pc, #52]	; (16264 <basic_init+0x123c>)
   16230:	4798      	blx	r3
   16232:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16236:	0080      	lsls	r0, r0, #2
   16238:	3050      	adds	r0, #80	; 0x50
   1623a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1623e:	da01      	bge.n	16244 <basic_init+0x121c>
   16240:	2401      	movs	r4, #1
   16242:	e58a      	b.n	15d5a <basic_init+0xd32>
   16244:	2000      	movs	r0, #0
   16246:	4b07      	ldr	r3, [pc, #28]	; (16264 <basic_init+0x123c>)
   16248:	4798      	blx	r3
   1624a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1624e:	0080      	lsls	r0, r0, #2
   16250:	3050      	adds	r0, #80	; 0x50
   16252:	4b05      	ldr	r3, [pc, #20]	; (16268 <basic_init+0x1240>)
   16254:	fb83 2300 	smull	r2, r3, r3, r0
   16258:	17c4      	asrs	r4, r0, #31
   1625a:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
   1625e:	b224      	sxth	r4, r4
   16260:	e57b      	b.n	15d5a <basic_init+0xd32>
   16262:	bf00      	nop
   16264:	000114e5 	.word	0x000114e5
   16268:	66666667 	.word	0x66666667
   1626c:	20006bd8 	.word	0x20006bd8

00016270 <bar_init>:
{
   16270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->bar_bg);
   16272:	4c54      	ldr	r4, [pc, #336]	; (163c4 <bar_init+0x154>)
   16274:	6820      	ldr	r0, [r4, #0]
   16276:	3024      	adds	r0, #36	; 0x24
   16278:	4b53      	ldr	r3, [pc, #332]	; (163c8 <bar_init+0x158>)
   1627a:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1627c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1627e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   16282:	2101      	movs	r1, #1
   16284:	3024      	adds	r0, #36	; 0x24
   16286:	4b51      	ldr	r3, [pc, #324]	; (163cc <bar_init+0x15c>)
   16288:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   1628a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1628c:	22ff      	movs	r2, #255	; 0xff
   1628e:	212c      	movs	r1, #44	; 0x2c
   16290:	3024      	adds	r0, #36	; 0x24
   16292:	4b4f      	ldr	r3, [pc, #316]	; (163d0 <bar_init+0x160>)
   16294:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   16296:	6820      	ldr	r0, [r4, #0]
   16298:	6a23      	ldr	r3, [r4, #32]
   1629a:	f013 0302 	ands.w	r3, r3, #2
   1629e:	bf14      	ite	ne
   162a0:	211a      	movne	r1, #26
   162a2:	2108      	moveq	r1, #8
   162a4:	2b00      	cmp	r3, #0
   162a6:	bf15      	itete	ne
   162a8:	2435      	movne	r4, #53	; 0x35
   162aa:	2412      	moveq	r4, #18
   162ac:	231b      	movne	r3, #27
   162ae:	2309      	moveq	r3, #9
   162b0:	f04f 0200 	mov.w	r2, #0
   162b4:	f363 0204 	bfi	r2, r3, #0, #5
   162b8:	f364 124a 	bfi	r2, r4, #5, #6
   162bc:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   162c0:	2129      	movs	r1, #41	; 0x29
   162c2:	3024      	adds	r0, #36	; 0x24
   162c4:	4b43      	ldr	r3, [pc, #268]	; (163d4 <bar_init+0x164>)
   162c6:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   162c8:	4b3e      	ldr	r3, [pc, #248]	; (163c4 <bar_init+0x154>)
   162ca:	6818      	ldr	r0, [r3, #0]
   162cc:	3024      	adds	r0, #36	; 0x24
   162ce:	6a1b      	ldr	r3, [r3, #32]
   162d0:	f013 0f02 	tst.w	r3, #2
   162d4:	d16d      	bne.n	163b2 <bar_init+0x142>
   162d6:	231f      	movs	r3, #31
   162d8:	213f      	movs	r1, #63	; 0x3f
   162da:	461c      	mov	r4, r3
   162dc:	f04f 0200 	mov.w	r2, #0
   162e0:	f364 0204 	bfi	r2, r4, #0, #5
   162e4:	f361 124a 	bfi	r2, r1, #5, #6
   162e8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   162ec:	2179      	movs	r1, #121	; 0x79
   162ee:	4d39      	ldr	r5, [pc, #228]	; (163d4 <bar_init+0x164>)
   162f0:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
   162f2:	4c34      	ldr	r4, [pc, #208]	; (163c4 <bar_init+0x154>)
   162f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   162f6:	89a2      	ldrh	r2, [r4, #12]
   162f8:	2149      	movs	r1, #73	; 0x49
   162fa:	3024      	adds	r0, #36	; 0x24
   162fc:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
   162fe:	6820      	ldr	r0, [r4, #0]
   16300:	89e2      	ldrh	r2, [r4, #14]
   16302:	f240 4149 	movw	r1, #1097	; 0x449
   16306:	3024      	adds	r0, #36	; 0x24
   16308:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   1630a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   1630c:	2200      	movs	r2, #0
   1630e:	214c      	movs	r1, #76	; 0x4c
   16310:	3024      	adds	r0, #36	; 0x24
   16312:	4f2f      	ldr	r7, [pc, #188]	; (163d0 <bar_init+0x160>)
   16314:	47b8      	blx	r7
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
   16316:	6820      	ldr	r0, [r4, #0]
   16318:	227f      	movs	r2, #127	; 0x7f
   1631a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1631e:	3024      	adds	r0, #36	; 0x24
   16320:	47b8      	blx	r7
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, 3);
   16322:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   16324:	2203      	movs	r2, #3
   16326:	2140      	movs	r1, #64	; 0x40
   16328:	3024      	adds	r0, #36	; 0x24
   1632a:	4e28      	ldr	r6, [pc, #160]	; (163cc <bar_init+0x15c>)
   1632c:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   1632e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   16330:	2296      	movs	r2, #150	; 0x96
   16332:	21b0      	movs	r1, #176	; 0xb0
   16334:	3024      	adds	r0, #36	; 0x24
   16336:	47b0      	blx	r6
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   16338:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   1633a:	224c      	movs	r2, #76	; 0x4c
   1633c:	21b7      	movs	r1, #183	; 0xb7
   1633e:	3024      	adds	r0, #36	; 0x24
   16340:	47b0      	blx	r6
    style_init_reset(&styles->bar_indic);
   16342:	6820      	ldr	r0, [r4, #0]
   16344:	3028      	adds	r0, #40	; 0x28
   16346:	4b20      	ldr	r3, [pc, #128]	; (163c8 <bar_init+0x158>)
   16348:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   1634a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1634c:	22ff      	movs	r2, #255	; 0xff
   1634e:	212c      	movs	r1, #44	; 0x2c
   16350:	3028      	adds	r0, #40	; 0x28
   16352:	47b8      	blx	r7
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16354:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16356:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1635a:	2101      	movs	r1, #1
   1635c:	3028      	adds	r0, #40	; 0x28
   1635e:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
   16360:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16362:	89a2      	ldrh	r2, [r4, #12]
   16364:	2129      	movs	r1, #41	; 0x29
   16366:	3028      	adds	r0, #40	; 0x28
   16368:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
   1636a:	6820      	ldr	r0, [r4, #0]
   1636c:	2311      	movs	r3, #17
   1636e:	f04f 0200 	mov.w	r2, #0
   16372:	f363 0204 	bfi	r2, r3, #0, #5
   16376:	2122      	movs	r1, #34	; 0x22
   16378:	f361 124a 	bfi	r2, r1, #5, #6
   1637c:	f363 22cf 	bfi	r2, r3, #11, #5
   16380:	f242 0129 	movw	r1, #8233	; 0x2029
   16384:	3028      	adds	r0, #40	; 0x28
   16386:	47a8      	blx	r5
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
   16388:	6820      	ldr	r0, [r4, #0]
   1638a:	3028      	adds	r0, #40	; 0x28
   1638c:	6a23      	ldr	r3, [r4, #32]
   1638e:	f013 0f02 	tst.w	r3, #2
   16392:	d112      	bne.n	163ba <bar_init+0x14a>
   16394:	231f      	movs	r3, #31
   16396:	213f      	movs	r1, #63	; 0x3f
   16398:	461c      	mov	r4, r3
   1639a:	f04f 0200 	mov.w	r2, #0
   1639e:	f364 0204 	bfi	r2, r4, #0, #5
   163a2:	f361 124a 	bfi	r2, r1, #5, #6
   163a6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   163aa:	2179      	movs	r1, #121	; 0x79
   163ac:	4b09      	ldr	r3, [pc, #36]	; (163d4 <bar_init+0x164>)
   163ae:	4798      	blx	r3
   163b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   163b2:	2306      	movs	r3, #6
   163b4:	2110      	movs	r1, #16
   163b6:	2409      	movs	r4, #9
   163b8:	e790      	b.n	162dc <bar_init+0x6c>
   163ba:	2308      	movs	r3, #8
   163bc:	2110      	movs	r1, #16
   163be:	2409      	movs	r4, #9
   163c0:	e7eb      	b.n	1639a <bar_init+0x12a>
   163c2:	bf00      	nop
   163c4:	20006bd8 	.word	0x20006bd8
   163c8:	00015009 	.word	0x00015009
   163cc:	00006e89 	.word	0x00006e89
   163d0:	00007111 	.word	0x00007111
   163d4:	00006fcd 	.word	0x00006fcd

000163d8 <slider_init>:
{
   163d8:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
   163da:	4ca0      	ldr	r4, [pc, #640]	; (1665c <slider_init+0x284>)
   163dc:	6820      	ldr	r0, [r4, #0]
   163de:	3090      	adds	r0, #144	; 0x90
   163e0:	4b9f      	ldr	r3, [pc, #636]	; (16660 <slider_init+0x288>)
   163e2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   163e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   163e6:	22ff      	movs	r2, #255	; 0xff
   163e8:	212c      	movs	r1, #44	; 0x2c
   163ea:	3090      	adds	r0, #144	; 0x90
   163ec:	4b9d      	ldr	r3, [pc, #628]	; (16664 <slider_init+0x28c>)
   163ee:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
   163f0:	6820      	ldr	r0, [r4, #0]
   163f2:	3090      	adds	r0, #144	; 0x90
   163f4:	6a23      	ldr	r3, [r4, #32]
   163f6:	f013 0f02 	tst.w	r3, #2
   163fa:	bf19      	ittee	ne
   163fc:	4623      	movne	r3, r4
   163fe:	899a      	ldrhne	r2, [r3, #12]
   16400:	4b99      	ldreq	r3, [pc, #612]	; (16668 <slider_init+0x290>)
   16402:	881a      	ldrheq	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16404:	2129      	movs	r1, #41	; 0x29
   16406:	4b99      	ldr	r3, [pc, #612]	; (1666c <slider_init+0x294>)
   16408:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   1640a:	4b94      	ldr	r3, [pc, #592]	; (1665c <slider_init+0x284>)
   1640c:	6818      	ldr	r0, [r3, #0]
   1640e:	3090      	adds	r0, #144	; 0x90
   16410:	6a1b      	ldr	r3, [r3, #32]
   16412:	f013 0f02 	tst.w	r3, #2
   16416:	f040 80a9 	bne.w	1656c <slider_init+0x194>
   1641a:	231f      	movs	r3, #31
   1641c:	213f      	movs	r1, #63	; 0x3f
   1641e:	461c      	mov	r4, r3
   16420:	f04f 0200 	mov.w	r2, #0
   16424:	f364 0204 	bfi	r2, r4, #0, #5
   16428:	f361 124a 	bfi	r2, r1, #5, #6
   1642c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   16430:	2179      	movs	r1, #121	; 0x79
   16432:	4b8e      	ldr	r3, [pc, #568]	; (1666c <slider_init+0x294>)
   16434:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16436:	4c89      	ldr	r4, [pc, #548]	; (1665c <slider_init+0x284>)
   16438:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1643a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1643e:	2101      	movs	r1, #1
   16440:	3090      	adds	r0, #144	; 0x90
   16442:	4b8b      	ldr	r3, [pc, #556]	; (16670 <slider_init+0x298>)
   16444:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   16446:	6824      	ldr	r4, [r4, #0]
   16448:	3490      	adds	r4, #144	; 0x90
   1644a:	2000      	movs	r0, #0
   1644c:	4b89      	ldr	r3, [pc, #548]	; (16674 <slider_init+0x29c>)
   1644e:	4798      	blx	r3
   16450:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16454:	3050      	adds	r0, #80	; 0x50
   16456:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1645a:	f280 808b 	bge.w	16574 <slider_init+0x19c>
   1645e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16460:	2112      	movs	r1, #18
   16462:	4620      	mov	r0, r4
   16464:	4b82      	ldr	r3, [pc, #520]	; (16670 <slider_init+0x298>)
   16466:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   16468:	4b7c      	ldr	r3, [pc, #496]	; (1665c <slider_init+0x284>)
   1646a:	681c      	ldr	r4, [r3, #0]
   1646c:	3490      	adds	r4, #144	; 0x90
   1646e:	2000      	movs	r0, #0
   16470:	4b80      	ldr	r3, [pc, #512]	; (16674 <slider_init+0x29c>)
   16472:	4798      	blx	r3
   16474:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16478:	3050      	adds	r0, #80	; 0x50
   1647a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1647e:	f280 8087 	bge.w	16590 <slider_init+0x1b8>
   16482:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16484:	2113      	movs	r1, #19
   16486:	4620      	mov	r0, r4
   16488:	4b79      	ldr	r3, [pc, #484]	; (16670 <slider_init+0x298>)
   1648a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   1648c:	4b73      	ldr	r3, [pc, #460]	; (1665c <slider_init+0x284>)
   1648e:	681c      	ldr	r4, [r3, #0]
   16490:	3490      	adds	r4, #144	; 0x90
   16492:	2000      	movs	r0, #0
   16494:	4b77      	ldr	r3, [pc, #476]	; (16674 <slider_init+0x29c>)
   16496:	4798      	blx	r3
   16498:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1649c:	3050      	adds	r0, #80	; 0x50
   1649e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164a2:	f280 8083 	bge.w	165ac <slider_init+0x1d4>
   164a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   164a8:	2110      	movs	r1, #16
   164aa:	4620      	mov	r0, r4
   164ac:	4b70      	ldr	r3, [pc, #448]	; (16670 <slider_init+0x298>)
   164ae:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   164b0:	4b6a      	ldr	r3, [pc, #424]	; (1665c <slider_init+0x284>)
   164b2:	681c      	ldr	r4, [r3, #0]
   164b4:	3490      	adds	r4, #144	; 0x90
   164b6:	2000      	movs	r0, #0
   164b8:	4b6e      	ldr	r3, [pc, #440]	; (16674 <slider_init+0x29c>)
   164ba:	4798      	blx	r3
   164bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   164c0:	3050      	adds	r0, #80	; 0x50
   164c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164c6:	da7f      	bge.n	165c8 <slider_init+0x1f0>
   164c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   164ca:	2111      	movs	r1, #17
   164cc:	4620      	mov	r0, r4
   164ce:	4b68      	ldr	r3, [pc, #416]	; (16670 <slider_init+0x298>)
   164d0:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
   164d2:	4c62      	ldr	r4, [pc, #392]	; (1665c <slider_init+0x284>)
   164d4:	6820      	ldr	r0, [r4, #0]
   164d6:	3094      	adds	r0, #148	; 0x94
   164d8:	4b61      	ldr	r3, [pc, #388]	; (16660 <slider_init+0x288>)
   164da:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   164dc:	6824      	ldr	r4, [r4, #0]
   164de:	3494      	adds	r4, #148	; 0x94
   164e0:	2000      	movs	r0, #0
   164e2:	4b64      	ldr	r3, [pc, #400]	; (16674 <slider_init+0x29c>)
   164e4:	4798      	blx	r3
   164e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   164ea:	0040      	lsls	r0, r0, #1
   164ec:	3050      	adds	r0, #80	; 0x50
   164ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   164f2:	da77      	bge.n	165e4 <slider_init+0x20c>
   164f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   164f6:	2117      	movs	r1, #23
   164f8:	4620      	mov	r0, r4
   164fa:	4b5d      	ldr	r3, [pc, #372]	; (16670 <slider_init+0x298>)
   164fc:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   164fe:	4b57      	ldr	r3, [pc, #348]	; (1665c <slider_init+0x284>)
   16500:	681c      	ldr	r4, [r3, #0]
   16502:	3494      	adds	r4, #148	; 0x94
   16504:	2000      	movs	r0, #0
   16506:	4b5b      	ldr	r3, [pc, #364]	; (16674 <slider_init+0x29c>)
   16508:	4798      	blx	r3
   1650a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1650e:	0040      	lsls	r0, r0, #1
   16510:	3050      	adds	r0, #80	; 0x50
   16512:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16516:	da74      	bge.n	16602 <slider_init+0x22a>
   16518:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   1651a:	2118      	movs	r1, #24
   1651c:	4620      	mov	r0, r4
   1651e:	4b54      	ldr	r3, [pc, #336]	; (16670 <slider_init+0x298>)
   16520:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16522:	4b4e      	ldr	r3, [pc, #312]	; (1665c <slider_init+0x284>)
   16524:	681c      	ldr	r4, [r3, #0]
   16526:	3494      	adds	r4, #148	; 0x94
   16528:	2000      	movs	r0, #0
   1652a:	4b52      	ldr	r3, [pc, #328]	; (16674 <slider_init+0x29c>)
   1652c:	4798      	blx	r3
   1652e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16532:	0040      	lsls	r0, r0, #1
   16534:	3050      	adds	r0, #80	; 0x50
   16536:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1653a:	da71      	bge.n	16620 <slider_init+0x248>
   1653c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   1653e:	2115      	movs	r1, #21
   16540:	4620      	mov	r0, r4
   16542:	4b4b      	ldr	r3, [pc, #300]	; (16670 <slider_init+0x298>)
   16544:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16546:	4b45      	ldr	r3, [pc, #276]	; (1665c <slider_init+0x284>)
   16548:	681c      	ldr	r4, [r3, #0]
   1654a:	3494      	adds	r4, #148	; 0x94
   1654c:	2000      	movs	r0, #0
   1654e:	4b49      	ldr	r3, [pc, #292]	; (16674 <slider_init+0x29c>)
   16550:	4798      	blx	r3
   16552:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16556:	0040      	lsls	r0, r0, #1
   16558:	3050      	adds	r0, #80	; 0x50
   1655a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1655e:	da6e      	bge.n	1663e <slider_init+0x266>
   16560:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   16562:	2116      	movs	r1, #22
   16564:	4620      	mov	r0, r4
   16566:	4b42      	ldr	r3, [pc, #264]	; (16670 <slider_init+0x298>)
   16568:	4798      	blx	r3
   1656a:	bd10      	pop	{r4, pc}
   1656c:	2306      	movs	r3, #6
   1656e:	2110      	movs	r1, #16
   16570:	2409      	movs	r4, #9
   16572:	e755      	b.n	16420 <slider_init+0x48>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   16574:	2000      	movs	r0, #0
   16576:	4b3f      	ldr	r3, [pc, #252]	; (16674 <slider_init+0x29c>)
   16578:	4798      	blx	r3
   1657a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1657e:	3050      	adds	r0, #80	; 0x50
   16580:	4b3d      	ldr	r3, [pc, #244]	; (16678 <slider_init+0x2a0>)
   16582:	fb83 2300 	smull	r2, r3, r3, r0
   16586:	17c2      	asrs	r2, r0, #31
   16588:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1658c:	b212      	sxth	r2, r2
   1658e:	e767      	b.n	16460 <slider_init+0x88>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   16590:	2000      	movs	r0, #0
   16592:	4b38      	ldr	r3, [pc, #224]	; (16674 <slider_init+0x29c>)
   16594:	4798      	blx	r3
   16596:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1659a:	3050      	adds	r0, #80	; 0x50
   1659c:	4b36      	ldr	r3, [pc, #216]	; (16678 <slider_init+0x2a0>)
   1659e:	fb83 2300 	smull	r2, r3, r3, r0
   165a2:	17c2      	asrs	r2, r0, #31
   165a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   165a8:	b212      	sxth	r2, r2
   165aa:	e76b      	b.n	16484 <slider_init+0xac>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   165ac:	2000      	movs	r0, #0
   165ae:	4b31      	ldr	r3, [pc, #196]	; (16674 <slider_init+0x29c>)
   165b0:	4798      	blx	r3
   165b2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   165b6:	3050      	adds	r0, #80	; 0x50
   165b8:	4b2f      	ldr	r3, [pc, #188]	; (16678 <slider_init+0x2a0>)
   165ba:	fb83 2300 	smull	r2, r3, r3, r0
   165be:	17c2      	asrs	r2, r0, #31
   165c0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   165c4:	b212      	sxth	r2, r2
   165c6:	e76f      	b.n	164a8 <slider_init+0xd0>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
   165c8:	2000      	movs	r0, #0
   165ca:	4b2a      	ldr	r3, [pc, #168]	; (16674 <slider_init+0x29c>)
   165cc:	4798      	blx	r3
   165ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   165d2:	3050      	adds	r0, #80	; 0x50
   165d4:	4b28      	ldr	r3, [pc, #160]	; (16678 <slider_init+0x2a0>)
   165d6:	fb83 2300 	smull	r2, r3, r3, r0
   165da:	17c2      	asrs	r2, r0, #31
   165dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   165e0:	b212      	sxth	r2, r2
   165e2:	e772      	b.n	164ca <slider_init+0xf2>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   165e4:	2000      	movs	r0, #0
   165e6:	4b23      	ldr	r3, [pc, #140]	; (16674 <slider_init+0x29c>)
   165e8:	4798      	blx	r3
   165ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   165ee:	0040      	lsls	r0, r0, #1
   165f0:	3050      	adds	r0, #80	; 0x50
   165f2:	4b21      	ldr	r3, [pc, #132]	; (16678 <slider_init+0x2a0>)
   165f4:	fb83 2300 	smull	r2, r3, r3, r0
   165f8:	17c2      	asrs	r2, r0, #31
   165fa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   165fe:	b212      	sxth	r2, r2
   16600:	e779      	b.n	164f6 <slider_init+0x11e>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16602:	2000      	movs	r0, #0
   16604:	4b1b      	ldr	r3, [pc, #108]	; (16674 <slider_init+0x29c>)
   16606:	4798      	blx	r3
   16608:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1660c:	0040      	lsls	r0, r0, #1
   1660e:	3050      	adds	r0, #80	; 0x50
   16610:	4b19      	ldr	r3, [pc, #100]	; (16678 <slider_init+0x2a0>)
   16612:	fb83 2300 	smull	r2, r3, r3, r0
   16616:	17c2      	asrs	r2, r0, #31
   16618:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1661c:	b212      	sxth	r2, r2
   1661e:	e77c      	b.n	1651a <slider_init+0x142>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   16620:	2000      	movs	r0, #0
   16622:	4b14      	ldr	r3, [pc, #80]	; (16674 <slider_init+0x29c>)
   16624:	4798      	blx	r3
   16626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1662a:	0040      	lsls	r0, r0, #1
   1662c:	3050      	adds	r0, #80	; 0x50
   1662e:	4b12      	ldr	r3, [pc, #72]	; (16678 <slider_init+0x2a0>)
   16630:	fb83 2300 	smull	r2, r3, r3, r0
   16634:	17c2      	asrs	r2, r0, #31
   16636:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1663a:	b212      	sxth	r2, r2
   1663c:	e77f      	b.n	1653e <slider_init+0x166>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1663e:	2000      	movs	r0, #0
   16640:	4b0c      	ldr	r3, [pc, #48]	; (16674 <slider_init+0x29c>)
   16642:	4798      	blx	r3
   16644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16648:	0040      	lsls	r0, r0, #1
   1664a:	3050      	adds	r0, #80	; 0x50
   1664c:	4b0a      	ldr	r3, [pc, #40]	; (16678 <slider_init+0x2a0>)
   1664e:	fb83 2300 	smull	r2, r3, r3, r0
   16652:	17c2      	asrs	r2, r0, #31
   16654:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16658:	b212      	sxth	r2, r2
   1665a:	e782      	b.n	16562 <slider_init+0x18a>
   1665c:	20006bd8 	.word	0x20006bd8
   16660:	00015009 	.word	0x00015009
   16664:	00007111 	.word	0x00007111
   16668:	00020a68 	.word	0x00020a68
   1666c:	00006fcd 	.word	0x00006fcd
   16670:	00006e89 	.word	0x00006e89
   16674:	000114e5 	.word	0x000114e5
   16678:	66666667 	.word	0x66666667

0001667c <switch_init>:
{
   1667c:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
   1667e:	4c48      	ldr	r4, [pc, #288]	; (167a0 <switch_init+0x124>)
   16680:	6820      	ldr	r0, [r4, #0]
   16682:	309c      	adds	r0, #156	; 0x9c
   16684:	4b47      	ldr	r3, [pc, #284]	; (167a4 <switch_init+0x128>)
   16686:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
   16688:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1668a:	22ff      	movs	r2, #255	; 0xff
   1668c:	212c      	movs	r1, #44	; 0x2c
   1668e:	309c      	adds	r0, #156	; 0x9c
   16690:	4b45      	ldr	r3, [pc, #276]	; (167a8 <switch_init+0x12c>)
   16692:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   16694:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16696:	4b45      	ldr	r3, [pc, #276]	; (167ac <switch_init+0x130>)
   16698:	881a      	ldrh	r2, [r3, #0]
   1669a:	2129      	movs	r1, #41	; 0x29
   1669c:	309c      	adds	r0, #156	; 0x9c
   1669e:	4b44      	ldr	r3, [pc, #272]	; (167b0 <switch_init+0x134>)
   166a0:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   166a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   166a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
   166a8:	2101      	movs	r1, #1
   166aa:	309c      	adds	r0, #156	; 0x9c
   166ac:	4b41      	ldr	r3, [pc, #260]	; (167b4 <switch_init+0x138>)
   166ae:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   166b0:	6824      	ldr	r4, [r4, #0]
   166b2:	349c      	adds	r4, #156	; 0x9c
   166b4:	2000      	movs	r0, #0
   166b6:	4b40      	ldr	r3, [pc, #256]	; (167b8 <switch_init+0x13c>)
   166b8:	4798      	blx	r3
   166ba:	3014      	adds	r0, #20
   166bc:	0080      	lsls	r0, r0, #2
   166be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   166c2:	da39      	bge.n	16738 <switch_init+0xbc>
   166c4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   166c8:	2110      	movs	r1, #16
   166ca:	4620      	mov	r0, r4
   166cc:	4b39      	ldr	r3, [pc, #228]	; (167b4 <switch_init+0x138>)
   166ce:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   166d0:	4b33      	ldr	r3, [pc, #204]	; (167a0 <switch_init+0x124>)
   166d2:	681c      	ldr	r4, [r3, #0]
   166d4:	349c      	adds	r4, #156	; 0x9c
   166d6:	2000      	movs	r0, #0
   166d8:	4b37      	ldr	r3, [pc, #220]	; (167b8 <switch_init+0x13c>)
   166da:	4798      	blx	r3
   166dc:	3014      	adds	r0, #20
   166de:	0080      	lsls	r0, r0, #2
   166e0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   166e4:	da35      	bge.n	16752 <switch_init+0xd6>
   166e6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   166ea:	2111      	movs	r1, #17
   166ec:	4620      	mov	r0, r4
   166ee:	4b31      	ldr	r3, [pc, #196]	; (167b4 <switch_init+0x138>)
   166f0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   166f2:	4b2b      	ldr	r3, [pc, #172]	; (167a0 <switch_init+0x124>)
   166f4:	681c      	ldr	r4, [r3, #0]
   166f6:	349c      	adds	r4, #156	; 0x9c
   166f8:	2000      	movs	r0, #0
   166fa:	4b2f      	ldr	r3, [pc, #188]	; (167b8 <switch_init+0x13c>)
   166fc:	4798      	blx	r3
   166fe:	3014      	adds	r0, #20
   16700:	0080      	lsls	r0, r0, #2
   16702:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16706:	da31      	bge.n	1676c <switch_init+0xf0>
   16708:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1670c:	2112      	movs	r1, #18
   1670e:	4620      	mov	r0, r4
   16710:	4b28      	ldr	r3, [pc, #160]	; (167b4 <switch_init+0x138>)
   16712:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   16714:	4b22      	ldr	r3, [pc, #136]	; (167a0 <switch_init+0x124>)
   16716:	681c      	ldr	r4, [r3, #0]
   16718:	349c      	adds	r4, #156	; 0x9c
   1671a:	2000      	movs	r0, #0
   1671c:	4b26      	ldr	r3, [pc, #152]	; (167b8 <switch_init+0x13c>)
   1671e:	4798      	blx	r3
   16720:	3014      	adds	r0, #20
   16722:	0080      	lsls	r0, r0, #2
   16724:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16728:	da2d      	bge.n	16786 <switch_init+0x10a>
   1672a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1672e:	2113      	movs	r1, #19
   16730:	4620      	mov	r0, r4
   16732:	4b20      	ldr	r3, [pc, #128]	; (167b4 <switch_init+0x138>)
   16734:	4798      	blx	r3
   16736:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
   16738:	2000      	movs	r0, #0
   1673a:	4b1f      	ldr	r3, [pc, #124]	; (167b8 <switch_init+0x13c>)
   1673c:	4798      	blx	r3
   1673e:	3014      	adds	r0, #20
   16740:	0080      	lsls	r0, r0, #2
   16742:	4b1e      	ldr	r3, [pc, #120]	; (167bc <switch_init+0x140>)
   16744:	fb83 2300 	smull	r2, r3, r3, r0
   16748:	17c2      	asrs	r2, r0, #31
   1674a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   1674e:	b212      	sxth	r2, r2
   16750:	e7ba      	b.n	166c8 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
   16752:	2000      	movs	r0, #0
   16754:	4b18      	ldr	r3, [pc, #96]	; (167b8 <switch_init+0x13c>)
   16756:	4798      	blx	r3
   16758:	3014      	adds	r0, #20
   1675a:	0080      	lsls	r0, r0, #2
   1675c:	4b17      	ldr	r3, [pc, #92]	; (167bc <switch_init+0x140>)
   1675e:	fb83 2300 	smull	r2, r3, r3, r0
   16762:	17c2      	asrs	r2, r0, #31
   16764:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   16768:	b212      	sxth	r2, r2
   1676a:	e7be      	b.n	166ea <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
   1676c:	2000      	movs	r0, #0
   1676e:	4b12      	ldr	r3, [pc, #72]	; (167b8 <switch_init+0x13c>)
   16770:	4798      	blx	r3
   16772:	3014      	adds	r0, #20
   16774:	0080      	lsls	r0, r0, #2
   16776:	4b11      	ldr	r3, [pc, #68]	; (167bc <switch_init+0x140>)
   16778:	fb83 2300 	smull	r2, r3, r3, r0
   1677c:	17c2      	asrs	r2, r0, #31
   1677e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   16782:	b212      	sxth	r2, r2
   16784:	e7c2      	b.n	1670c <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
   16786:	2000      	movs	r0, #0
   16788:	4b0b      	ldr	r3, [pc, #44]	; (167b8 <switch_init+0x13c>)
   1678a:	4798      	blx	r3
   1678c:	3014      	adds	r0, #20
   1678e:	0080      	lsls	r0, r0, #2
   16790:	4b0a      	ldr	r3, [pc, #40]	; (167bc <switch_init+0x140>)
   16792:	fb83 2300 	smull	r2, r3, r3, r0
   16796:	17c2      	asrs	r2, r0, #31
   16798:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   1679c:	b212      	sxth	r2, r2
   1679e:	e7c6      	b.n	1672e <switch_init+0xb2>
   167a0:	20006bd8 	.word	0x20006bd8
   167a4:	00015009 	.word	0x00015009
   167a8:	00007111 	.word	0x00007111
   167ac:	00020a68 	.word	0x00020a68
   167b0:	00006fcd 	.word	0x00006fcd
   167b4:	00006e89 	.word	0x00006e89
   167b8:	000114e5 	.word	0x000114e5
   167bc:	66666667 	.word	0x66666667

000167c0 <linemeter_init>:
{
   167c0:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->lmeter);
   167c2:	4c88      	ldr	r4, [pc, #544]	; (169e4 <linemeter_init+0x224>)
   167c4:	6820      	ldr	r0, [r4, #0]
   167c6:	3070      	adds	r0, #112	; 0x70
   167c8:	4b87      	ldr	r3, [pc, #540]	; (169e8 <linemeter_init+0x228>)
   167ca:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   167cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   167ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
   167d2:	2101      	movs	r1, #1
   167d4:	3070      	adds	r0, #112	; 0x70
   167d6:	4b85      	ldr	r3, [pc, #532]	; (169ec <linemeter_init+0x22c>)
   167d8:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   167da:	6824      	ldr	r4, [r4, #0]
   167dc:	3470      	adds	r4, #112	; 0x70
   167de:	2000      	movs	r0, #0
   167e0:	4b83      	ldr	r3, [pc, #524]	; (169f0 <linemeter_init+0x230>)
   167e2:	4798      	blx	r3
   167e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   167e8:	0080      	lsls	r0, r0, #2
   167ea:	3050      	adds	r0, #80	; 0x50
   167ec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   167f0:	f280 808e 	bge.w	16910 <linemeter_init+0x150>
   167f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   167f6:	2112      	movs	r1, #18
   167f8:	4620      	mov	r0, r4
   167fa:	4b7c      	ldr	r3, [pc, #496]	; (169ec <linemeter_init+0x22c>)
   167fc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   167fe:	4b79      	ldr	r3, [pc, #484]	; (169e4 <linemeter_init+0x224>)
   16800:	681c      	ldr	r4, [r3, #0]
   16802:	3470      	adds	r4, #112	; 0x70
   16804:	2000      	movs	r0, #0
   16806:	4b7a      	ldr	r3, [pc, #488]	; (169f0 <linemeter_init+0x230>)
   16808:	4798      	blx	r3
   1680a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1680e:	0080      	lsls	r0, r0, #2
   16810:	3050      	adds	r0, #80	; 0x50
   16812:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16816:	f280 808a 	bge.w	1692e <linemeter_init+0x16e>
   1681a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1681c:	2113      	movs	r1, #19
   1681e:	4620      	mov	r0, r4
   16820:	4b72      	ldr	r3, [pc, #456]	; (169ec <linemeter_init+0x22c>)
   16822:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   16824:	4b6f      	ldr	r3, [pc, #444]	; (169e4 <linemeter_init+0x224>)
   16826:	681c      	ldr	r4, [r3, #0]
   16828:	3470      	adds	r4, #112	; 0x70
   1682a:	2000      	movs	r0, #0
   1682c:	4b70      	ldr	r3, [pc, #448]	; (169f0 <linemeter_init+0x230>)
   1682e:	4798      	blx	r3
   16830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16834:	0080      	lsls	r0, r0, #2
   16836:	3050      	adds	r0, #80	; 0x50
   16838:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1683c:	f280 8086 	bge.w	1694c <linemeter_init+0x18c>
   16840:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16842:	2110      	movs	r1, #16
   16844:	4620      	mov	r0, r4
   16846:	4b69      	ldr	r3, [pc, #420]	; (169ec <linemeter_init+0x22c>)
   16848:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   1684a:	4b66      	ldr	r3, [pc, #408]	; (169e4 <linemeter_init+0x224>)
   1684c:	681c      	ldr	r4, [r3, #0]
   1684e:	3470      	adds	r4, #112	; 0x70
   16850:	2000      	movs	r0, #0
   16852:	4b67      	ldr	r3, [pc, #412]	; (169f0 <linemeter_init+0x230>)
   16854:	4798      	blx	r3
   16856:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1685a:	0040      	lsls	r0, r0, #1
   1685c:	3050      	adds	r0, #80	; 0x50
   1685e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16862:	f280 8082 	bge.w	1696a <linemeter_init+0x1aa>
   16866:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   16868:	2114      	movs	r1, #20
   1686a:	4620      	mov	r0, r4
   1686c:	4b5f      	ldr	r3, [pc, #380]	; (169ec <linemeter_init+0x22c>)
   1686e:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   16870:	4b5c      	ldr	r3, [pc, #368]	; (169e4 <linemeter_init+0x224>)
   16872:	681c      	ldr	r4, [r3, #0]
   16874:	3470      	adds	r4, #112	; 0x70
   16876:	2000      	movs	r0, #0
   16878:	4b5d      	ldr	r3, [pc, #372]	; (169f0 <linemeter_init+0x230>)
   1687a:	4798      	blx	r3
   1687c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16880:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16884:	3050      	adds	r0, #80	; 0x50
   16886:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1688a:	da7d      	bge.n	16988 <linemeter_init+0x1c8>
   1688c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   1688e:	21c0      	movs	r1, #192	; 0xc0
   16890:	4620      	mov	r0, r4
   16892:	4b56      	ldr	r3, [pc, #344]	; (169ec <linemeter_init+0x22c>)
   16894:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   16896:	4c53      	ldr	r4, [pc, #332]	; (169e4 <linemeter_init+0x224>)
   16898:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1689a:	89a2      	ldrh	r2, [r4, #12]
   1689c:	2199      	movs	r1, #153	; 0x99
   1689e:	3070      	adds	r0, #112	; 0x70
   168a0:	4d54      	ldr	r5, [pc, #336]	; (169f4 <linemeter_init+0x234>)
   168a2:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
   168a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   168a6:	89a2      	ldrh	r2, [r4, #12]
   168a8:	21c9      	movs	r1, #201	; 0xc9
   168aa:	3070      	adds	r0, #112	; 0x70
   168ac:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   168ae:	6820      	ldr	r0, [r4, #0]
   168b0:	2311      	movs	r3, #17
   168b2:	f04f 0200 	mov.w	r2, #0
   168b6:	f363 0204 	bfi	r2, r3, #0, #5
   168ba:	2122      	movs	r1, #34	; 0x22
   168bc:	f361 124a 	bfi	r2, r1, #5, #6
   168c0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   168c4:	21ca      	movs	r1, #202	; 0xca
   168c6:	3070      	adds	r0, #112	; 0x70
   168c8:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   168ca:	6824      	ldr	r4, [r4, #0]
   168cc:	3470      	adds	r4, #112	; 0x70
   168ce:	2000      	movs	r0, #0
   168d0:	4b47      	ldr	r3, [pc, #284]	; (169f0 <linemeter_init+0x230>)
   168d2:	4798      	blx	r3
   168d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   168d8:	0040      	lsls	r0, r0, #1
   168da:	3050      	adds	r0, #80	; 0x50
   168dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   168e0:	da62      	bge.n	169a8 <linemeter_init+0x1e8>
   168e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   168e4:	2190      	movs	r1, #144	; 0x90
   168e6:	4620      	mov	r0, r4
   168e8:	4b40      	ldr	r3, [pc, #256]	; (169ec <linemeter_init+0x22c>)
   168ea:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   168ec:	4b3d      	ldr	r3, [pc, #244]	; (169e4 <linemeter_init+0x224>)
   168ee:	681c      	ldr	r4, [r3, #0]
   168f0:	3470      	adds	r4, #112	; 0x70
   168f2:	2000      	movs	r0, #0
   168f4:	4b3e      	ldr	r3, [pc, #248]	; (169f0 <linemeter_init+0x230>)
   168f6:	4798      	blx	r3
   168f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   168fc:	3050      	adds	r0, #80	; 0x50
   168fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16902:	da60      	bge.n	169c6 <linemeter_init+0x206>
   16904:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   16906:	21c3      	movs	r1, #195	; 0xc3
   16908:	4620      	mov	r0, r4
   1690a:	4b38      	ldr	r3, [pc, #224]	; (169ec <linemeter_init+0x22c>)
   1690c:	4798      	blx	r3
   1690e:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   16910:	2000      	movs	r0, #0
   16912:	4b37      	ldr	r3, [pc, #220]	; (169f0 <linemeter_init+0x230>)
   16914:	4798      	blx	r3
   16916:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1691a:	0080      	lsls	r0, r0, #2
   1691c:	3050      	adds	r0, #80	; 0x50
   1691e:	4b36      	ldr	r3, [pc, #216]	; (169f8 <linemeter_init+0x238>)
   16920:	fb83 2300 	smull	r2, r3, r3, r0
   16924:	17c2      	asrs	r2, r0, #31
   16926:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1692a:	b212      	sxth	r2, r2
   1692c:	e763      	b.n	167f6 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   1692e:	2000      	movs	r0, #0
   16930:	4b2f      	ldr	r3, [pc, #188]	; (169f0 <linemeter_init+0x230>)
   16932:	4798      	blx	r3
   16934:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16938:	0080      	lsls	r0, r0, #2
   1693a:	3050      	adds	r0, #80	; 0x50
   1693c:	4b2e      	ldr	r3, [pc, #184]	; (169f8 <linemeter_init+0x238>)
   1693e:	fb83 2300 	smull	r2, r3, r3, r0
   16942:	17c2      	asrs	r2, r0, #31
   16944:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16948:	b212      	sxth	r2, r2
   1694a:	e767      	b.n	1681c <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
   1694c:	2000      	movs	r0, #0
   1694e:	4b28      	ldr	r3, [pc, #160]	; (169f0 <linemeter_init+0x230>)
   16950:	4798      	blx	r3
   16952:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16956:	0080      	lsls	r0, r0, #2
   16958:	3050      	adds	r0, #80	; 0x50
   1695a:	4b27      	ldr	r3, [pc, #156]	; (169f8 <linemeter_init+0x238>)
   1695c:	fb83 2300 	smull	r2, r3, r3, r0
   16960:	17c2      	asrs	r2, r0, #31
   16962:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16966:	b212      	sxth	r2, r2
   16968:	e76b      	b.n	16842 <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
   1696a:	2000      	movs	r0, #0
   1696c:	4b20      	ldr	r3, [pc, #128]	; (169f0 <linemeter_init+0x230>)
   1696e:	4798      	blx	r3
   16970:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16974:	0040      	lsls	r0, r0, #1
   16976:	3050      	adds	r0, #80	; 0x50
   16978:	4b1f      	ldr	r3, [pc, #124]	; (169f8 <linemeter_init+0x238>)
   1697a:	fb83 2300 	smull	r2, r3, r3, r0
   1697e:	17c2      	asrs	r2, r0, #31
   16980:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16984:	b212      	sxth	r2, r2
   16986:	e76f      	b.n	16868 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
   16988:	2000      	movs	r0, #0
   1698a:	4b19      	ldr	r3, [pc, #100]	; (169f0 <linemeter_init+0x230>)
   1698c:	4798      	blx	r3
   1698e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16996:	3050      	adds	r0, #80	; 0x50
   16998:	4b17      	ldr	r3, [pc, #92]	; (169f8 <linemeter_init+0x238>)
   1699a:	fb83 2300 	smull	r2, r3, r3, r0
   1699e:	17c2      	asrs	r2, r0, #31
   169a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   169a4:	b212      	sxth	r2, r2
   169a6:	e772      	b.n	1688e <linemeter_init+0xce>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
   169a8:	2000      	movs	r0, #0
   169aa:	4b11      	ldr	r3, [pc, #68]	; (169f0 <linemeter_init+0x230>)
   169ac:	4798      	blx	r3
   169ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   169b2:	0040      	lsls	r0, r0, #1
   169b4:	3050      	adds	r0, #80	; 0x50
   169b6:	4b10      	ldr	r3, [pc, #64]	; (169f8 <linemeter_init+0x238>)
   169b8:	fb83 2300 	smull	r2, r3, r3, r0
   169bc:	17c2      	asrs	r2, r0, #31
   169be:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   169c2:	b212      	sxth	r2, r2
   169c4:	e78e      	b.n	168e4 <linemeter_init+0x124>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
   169c6:	2000      	movs	r0, #0
   169c8:	4b09      	ldr	r3, [pc, #36]	; (169f0 <linemeter_init+0x230>)
   169ca:	4798      	blx	r3
   169cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   169d0:	3050      	adds	r0, #80	; 0x50
   169d2:	4b09      	ldr	r3, [pc, #36]	; (169f8 <linemeter_init+0x238>)
   169d4:	fb83 2300 	smull	r2, r3, r3, r0
   169d8:	17c2      	asrs	r2, r0, #31
   169da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   169de:	b212      	sxth	r2, r2
   169e0:	e791      	b.n	16906 <linemeter_init+0x146>
   169e2:	bf00      	nop
   169e4:	20006bd8 	.word	0x20006bd8
   169e8:	00015009 	.word	0x00015009
   169ec:	00006e89 	.word	0x00006e89
   169f0:	000114e5 	.word	0x000114e5
   169f4:	00006fcd 	.word	0x00006fcd
   169f8:	66666667 	.word	0x66666667

000169fc <gauge_init>:
{
   169fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->gauge_main);
   169fe:	4cc0      	ldr	r4, [pc, #768]	; (16d00 <gauge_init+0x304>)
   16a00:	6820      	ldr	r0, [r4, #0]
   16a02:	305c      	adds	r0, #92	; 0x5c
   16a04:	4bbf      	ldr	r3, [pc, #764]	; (16d04 <gauge_init+0x308>)
   16a06:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   16a08:	6820      	ldr	r0, [r4, #0]
   16a0a:	2511      	movs	r5, #17
   16a0c:	f04f 0200 	mov.w	r2, #0
   16a10:	f365 0204 	bfi	r2, r5, #0, #5
   16a14:	2722      	movs	r7, #34	; 0x22
   16a16:	f367 124a 	bfi	r2, r7, #5, #6
   16a1a:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16a1e:	2199      	movs	r1, #153	; 0x99
   16a20:	305c      	adds	r0, #92	; 0x5c
   16a22:	4eb9      	ldr	r6, [pc, #740]	; (16d08 <gauge_init+0x30c>)
   16a24:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   16a26:	6820      	ldr	r0, [r4, #0]
   16a28:	f04f 0200 	mov.w	r2, #0
   16a2c:	f365 0204 	bfi	r2, r5, #0, #5
   16a30:	f367 124a 	bfi	r2, r7, #5, #6
   16a34:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   16a38:	21c9      	movs	r1, #201	; 0xc9
   16a3a:	305c      	adds	r0, #92	; 0x5c
   16a3c:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
   16a3e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   16a40:	89a2      	ldrh	r2, [r4, #12]
   16a42:	21ca      	movs	r1, #202	; 0xca
   16a44:	305c      	adds	r0, #92	; 0x5c
   16a46:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   16a48:	6824      	ldr	r4, [r4, #0]
   16a4a:	345c      	adds	r4, #92	; 0x5c
   16a4c:	2000      	movs	r0, #0
   16a4e:	4baf      	ldr	r3, [pc, #700]	; (16d0c <gauge_init+0x310>)
   16a50:	4798      	blx	r3
   16a52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16a56:	3050      	adds	r0, #80	; 0x50
   16a58:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16a5c:	f280 8168 	bge.w	16d30 <gauge_init+0x334>
   16a60:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16a62:	2190      	movs	r1, #144	; 0x90
   16a64:	4620      	mov	r0, r4
   16a66:	4baa      	ldr	r3, [pc, #680]	; (16d10 <gauge_init+0x314>)
   16a68:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   16a6a:	4ba5      	ldr	r3, [pc, #660]	; (16d00 <gauge_init+0x304>)
   16a6c:	681c      	ldr	r4, [r3, #0]
   16a6e:	345c      	adds	r4, #92	; 0x5c
   16a70:	2000      	movs	r0, #0
   16a72:	4ba6      	ldr	r3, [pc, #664]	; (16d0c <gauge_init+0x310>)
   16a74:	4798      	blx	r3
   16a76:	3014      	adds	r0, #20
   16a78:	0080      	lsls	r0, r0, #2
   16a7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16a7e:	f280 8165 	bge.w	16d4c <gauge_init+0x350>
   16a82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   16a84:	21c3      	movs	r1, #195	; 0xc3
   16a86:	4620      	mov	r0, r4
   16a88:	4ba1      	ldr	r3, [pc, #644]	; (16d10 <gauge_init+0x314>)
   16a8a:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   16a8c:	4b9c      	ldr	r3, [pc, #624]	; (16d00 <gauge_init+0x304>)
   16a8e:	681c      	ldr	r4, [r3, #0]
   16a90:	345c      	adds	r4, #92	; 0x5c
   16a92:	2000      	movs	r0, #0
   16a94:	4b9d      	ldr	r3, [pc, #628]	; (16d0c <gauge_init+0x310>)
   16a96:	4798      	blx	r3
   16a98:	300a      	adds	r0, #10
   16a9a:	00c0      	lsls	r0, r0, #3
   16a9c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16aa0:	f280 8161 	bge.w	16d66 <gauge_init+0x36a>
   16aa4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   16aa6:	21c2      	movs	r1, #194	; 0xc2
   16aa8:	4620      	mov	r0, r4
   16aaa:	4b99      	ldr	r3, [pc, #612]	; (16d10 <gauge_init+0x314>)
   16aac:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16aae:	4b94      	ldr	r3, [pc, #592]	; (16d00 <gauge_init+0x304>)
   16ab0:	681c      	ldr	r4, [r3, #0]
   16ab2:	345c      	adds	r4, #92	; 0x5c
   16ab4:	2000      	movs	r0, #0
   16ab6:	4b95      	ldr	r3, [pc, #596]	; (16d0c <gauge_init+0x310>)
   16ab8:	4798      	blx	r3
   16aba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16abe:	0080      	lsls	r0, r0, #2
   16ac0:	3050      	adds	r0, #80	; 0x50
   16ac2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16ac6:	f280 815b 	bge.w	16d80 <gauge_init+0x384>
   16aca:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   16acc:	2112      	movs	r1, #18
   16ace:	4620      	mov	r0, r4
   16ad0:	4b8f      	ldr	r3, [pc, #572]	; (16d10 <gauge_init+0x314>)
   16ad2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16ad4:	4b8a      	ldr	r3, [pc, #552]	; (16d00 <gauge_init+0x304>)
   16ad6:	681c      	ldr	r4, [r3, #0]
   16ad8:	345c      	adds	r4, #92	; 0x5c
   16ada:	2000      	movs	r0, #0
   16adc:	4b8b      	ldr	r3, [pc, #556]	; (16d0c <gauge_init+0x310>)
   16ade:	4798      	blx	r3
   16ae0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16ae4:	0080      	lsls	r0, r0, #2
   16ae6:	3050      	adds	r0, #80	; 0x50
   16ae8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16aec:	f280 8157 	bge.w	16d9e <gauge_init+0x3a2>
   16af0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   16af2:	2113      	movs	r1, #19
   16af4:	4620      	mov	r0, r4
   16af6:	4b86      	ldr	r3, [pc, #536]	; (16d10 <gauge_init+0x314>)
   16af8:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16afa:	4b81      	ldr	r3, [pc, #516]	; (16d00 <gauge_init+0x304>)
   16afc:	681c      	ldr	r4, [r3, #0]
   16afe:	345c      	adds	r4, #92	; 0x5c
   16b00:	2000      	movs	r0, #0
   16b02:	4b82      	ldr	r3, [pc, #520]	; (16d0c <gauge_init+0x310>)
   16b04:	4798      	blx	r3
   16b06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16b0a:	0080      	lsls	r0, r0, #2
   16b0c:	3050      	adds	r0, #80	; 0x50
   16b0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16b12:	f280 8153 	bge.w	16dbc <gauge_init+0x3c0>
   16b16:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   16b18:	2110      	movs	r1, #16
   16b1a:	4620      	mov	r0, r4
   16b1c:	4b7c      	ldr	r3, [pc, #496]	; (16d10 <gauge_init+0x314>)
   16b1e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16b20:	4b77      	ldr	r3, [pc, #476]	; (16d00 <gauge_init+0x304>)
   16b22:	681c      	ldr	r4, [r3, #0]
   16b24:	345c      	adds	r4, #92	; 0x5c
   16b26:	2000      	movs	r0, #0
   16b28:	4b78      	ldr	r3, [pc, #480]	; (16d0c <gauge_init+0x310>)
   16b2a:	4798      	blx	r3
   16b2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16b30:	0080      	lsls	r0, r0, #2
   16b32:	3050      	adds	r0, #80	; 0x50
   16b34:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16b38:	f280 814f 	bge.w	16dda <gauge_init+0x3de>
   16b3c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   16b3e:	2114      	movs	r1, #20
   16b40:	4620      	mov	r0, r4
   16b42:	4b73      	ldr	r3, [pc, #460]	; (16d10 <gauge_init+0x314>)
   16b44:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   16b46:	4b6e      	ldr	r3, [pc, #440]	; (16d00 <gauge_init+0x304>)
   16b48:	681c      	ldr	r4, [r3, #0]
   16b4a:	345c      	adds	r4, #92	; 0x5c
   16b4c:	2000      	movs	r0, #0
   16b4e:	4b6f      	ldr	r3, [pc, #444]	; (16d0c <gauge_init+0x310>)
   16b50:	4798      	blx	r3
   16b52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16b56:	3050      	adds	r0, #80	; 0x50
   16b58:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16b5c:	f280 814c 	bge.w	16df8 <gauge_init+0x3fc>
   16b60:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   16b62:	21c0      	movs	r1, #192	; 0xc0
   16b64:	4620      	mov	r0, r4
   16b66:	4d6a      	ldr	r5, [pc, #424]	; (16d10 <gauge_init+0x314>)
   16b68:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16b6a:	4c65      	ldr	r4, [pc, #404]	; (16d00 <gauge_init+0x304>)
   16b6c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16b6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   16b72:	2101      	movs	r1, #1
   16b74:	305c      	adds	r0, #92	; 0x5c
   16b76:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
   16b78:	6820      	ldr	r0, [r4, #0]
   16b7a:	3060      	adds	r0, #96	; 0x60
   16b7c:	4b61      	ldr	r3, [pc, #388]	; (16d04 <gauge_init+0x308>)
   16b7e:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   16b80:	6820      	ldr	r0, [r4, #0]
   16b82:	2511      	movs	r5, #17
   16b84:	f04f 0200 	mov.w	r2, #0
   16b88:	f365 0204 	bfi	r2, r5, #0, #5
   16b8c:	2722      	movs	r7, #34	; 0x22
   16b8e:	f367 124a 	bfi	r2, r7, #5, #6
   16b92:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16b96:	2199      	movs	r1, #153	; 0x99
   16b98:	3060      	adds	r0, #96	; 0x60
   16b9a:	4e5b      	ldr	r6, [pc, #364]	; (16d08 <gauge_init+0x30c>)
   16b9c:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
   16b9e:	6820      	ldr	r0, [r4, #0]
   16ba0:	f04f 0200 	mov.w	r2, #0
   16ba4:	f365 0204 	bfi	r2, r5, #0, #5
   16ba8:	f367 124a 	bfi	r2, r7, #5, #6
   16bac:	f365 22cf 	bfi	r2, r5, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   16bb0:	21c9      	movs	r1, #201	; 0xc9
   16bb2:	3060      	adds	r0, #96	; 0x60
   16bb4:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
   16bb6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   16bb8:	89a2      	ldrh	r2, [r4, #12]
   16bba:	21ca      	movs	r1, #202	; 0xca
   16bbc:	3060      	adds	r0, #96	; 0x60
   16bbe:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   16bc0:	6824      	ldr	r4, [r4, #0]
   16bc2:	3460      	adds	r4, #96	; 0x60
   16bc4:	2000      	movs	r0, #0
   16bc6:	4b51      	ldr	r3, [pc, #324]	; (16d0c <gauge_init+0x310>)
   16bc8:	4798      	blx	r3
   16bca:	300a      	adds	r0, #10
   16bcc:	00c0      	lsls	r0, r0, #3
   16bce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16bd2:	f280 811f 	bge.w	16e14 <gauge_init+0x418>
   16bd6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16bd8:	2190      	movs	r1, #144	; 0x90
   16bda:	4620      	mov	r0, r4
   16bdc:	4b4c      	ldr	r3, [pc, #304]	; (16d10 <gauge_init+0x314>)
   16bde:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   16be0:	4b47      	ldr	r3, [pc, #284]	; (16d00 <gauge_init+0x304>)
   16be2:	681c      	ldr	r4, [r3, #0]
   16be4:	3460      	adds	r4, #96	; 0x60
   16be6:	2000      	movs	r0, #0
   16be8:	4b48      	ldr	r3, [pc, #288]	; (16d0c <gauge_init+0x310>)
   16bea:	4798      	blx	r3
   16bec:	300a      	adds	r0, #10
   16bee:	00c0      	lsls	r0, r0, #3
   16bf0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16bf4:	f280 811b 	bge.w	16e2e <gauge_init+0x432>
   16bf8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   16bfa:	21c3      	movs	r1, #195	; 0xc3
   16bfc:	4620      	mov	r0, r4
   16bfe:	4b44      	ldr	r3, [pc, #272]	; (16d10 <gauge_init+0x314>)
   16c00:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   16c02:	4b3f      	ldr	r3, [pc, #252]	; (16d00 <gauge_init+0x304>)
   16c04:	681c      	ldr	r4, [r3, #0]
   16c06:	3460      	adds	r4, #96	; 0x60
   16c08:	2000      	movs	r0, #0
   16c0a:	4b40      	ldr	r3, [pc, #256]	; (16d0c <gauge_init+0x310>)
   16c0c:	4798      	blx	r3
   16c0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16c12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16c16:	3050      	adds	r0, #80	; 0x50
   16c18:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16c1c:	f280 8114 	bge.w	16e48 <gauge_init+0x44c>
   16c20:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   16c22:	21c0      	movs	r1, #192	; 0xc0
   16c24:	4620      	mov	r0, r4
   16c26:	4b3a      	ldr	r3, [pc, #232]	; (16d10 <gauge_init+0x314>)
   16c28:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
   16c2a:	4c35      	ldr	r4, [pc, #212]	; (16d00 <gauge_init+0x304>)
   16c2c:	6820      	ldr	r0, [r4, #0]
   16c2e:	3064      	adds	r0, #100	; 0x64
   16c30:	4b34      	ldr	r3, [pc, #208]	; (16d04 <gauge_init+0x308>)
   16c32:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   16c34:	6820      	ldr	r0, [r4, #0]
   16c36:	3064      	adds	r0, #100	; 0x64
   16c38:	6a23      	ldr	r3, [r4, #32]
   16c3a:	f013 0f02 	tst.w	r3, #2
   16c3e:	f040 8113 	bne.w	16e68 <gauge_init+0x46c>
   16c42:	231f      	movs	r3, #31
   16c44:	213f      	movs	r1, #63	; 0x3f
   16c46:	461c      	mov	r4, r3
   16c48:	f04f 0200 	mov.w	r2, #0
   16c4c:	f364 0204 	bfi	r2, r4, #0, #5
   16c50:	f361 124a 	bfi	r2, r1, #5, #6
   16c54:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16c58:	2199      	movs	r1, #153	; 0x99
   16c5a:	4b2b      	ldr	r3, [pc, #172]	; (16d08 <gauge_init+0x30c>)
   16c5c:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   16c5e:	4b28      	ldr	r3, [pc, #160]	; (16d00 <gauge_init+0x304>)
   16c60:	681c      	ldr	r4, [r3, #0]
   16c62:	3464      	adds	r4, #100	; 0x64
   16c64:	2000      	movs	r0, #0
   16c66:	4b29      	ldr	r3, [pc, #164]	; (16d0c <gauge_init+0x310>)
   16c68:	4798      	blx	r3
   16c6a:	300a      	adds	r0, #10
   16c6c:	00c0      	lsls	r0, r0, #3
   16c6e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16c72:	f280 80fd 	bge.w	16e70 <gauge_init+0x474>
   16c76:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16c78:	2190      	movs	r1, #144	; 0x90
   16c7a:	4620      	mov	r0, r4
   16c7c:	4b24      	ldr	r3, [pc, #144]	; (16d10 <gauge_init+0x314>)
   16c7e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
   16c80:	4c1f      	ldr	r4, [pc, #124]	; (16d00 <gauge_init+0x304>)
   16c82:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16c84:	22ff      	movs	r2, #255	; 0xff
   16c86:	212c      	movs	r1, #44	; 0x2c
   16c88:	3064      	adds	r0, #100	; 0x64
   16c8a:	4b22      	ldr	r3, [pc, #136]	; (16d14 <gauge_init+0x318>)
   16c8c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
   16c8e:	6820      	ldr	r0, [r4, #0]
   16c90:	3064      	adds	r0, #100	; 0x64
   16c92:	6a23      	ldr	r3, [r4, #32]
   16c94:	f013 0f02 	tst.w	r3, #2
   16c98:	f040 80f7 	bne.w	16e8a <gauge_init+0x48e>
   16c9c:	231f      	movs	r3, #31
   16c9e:	213f      	movs	r1, #63	; 0x3f
   16ca0:	461c      	mov	r4, r3
   16ca2:	f04f 0200 	mov.w	r2, #0
   16ca6:	f364 0204 	bfi	r2, r4, #0, #5
   16caa:	f361 124a 	bfi	r2, r1, #5, #6
   16cae:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   16cb2:	2129      	movs	r1, #41	; 0x29
   16cb4:	4b14      	ldr	r3, [pc, #80]	; (16d08 <gauge_init+0x30c>)
   16cb6:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   16cb8:	4c11      	ldr	r4, [pc, #68]	; (16d00 <gauge_init+0x304>)
   16cba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   16cbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
   16cc0:	2101      	movs	r1, #1
   16cc2:	3064      	adds	r0, #100	; 0x64
   16cc4:	4b12      	ldr	r3, [pc, #72]	; (16d10 <gauge_init+0x314>)
   16cc6:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   16cc8:	6824      	ldr	r4, [r4, #0]
   16cca:	3464      	adds	r4, #100	; 0x64
   16ccc:	2000      	movs	r0, #0
   16cce:	4b0f      	ldr	r3, [pc, #60]	; (16d0c <gauge_init+0x310>)
   16cd0:	4798      	blx	r3
   16cd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16cd6:	0040      	lsls	r0, r0, #1
   16cd8:	3050      	adds	r0, #80	; 0x50
   16cda:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16cde:	f280 80d8 	bge.w	16e92 <gauge_init+0x496>
   16ce2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   16ce4:	2103      	movs	r1, #3
   16ce6:	4620      	mov	r0, r4
   16ce8:	4b09      	ldr	r3, [pc, #36]	; (16d10 <gauge_init+0x314>)
   16cea:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   16cec:	4b04      	ldr	r3, [pc, #16]	; (16d00 <gauge_init+0x304>)
   16cee:	681c      	ldr	r4, [r3, #0]
   16cf0:	3464      	adds	r4, #100	; 0x64
   16cf2:	2000      	movs	r0, #0
   16cf4:	4b05      	ldr	r3, [pc, #20]	; (16d0c <gauge_init+0x310>)
   16cf6:	4798      	blx	r3
   16cf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16cfc:	e00c      	b.n	16d18 <gauge_init+0x31c>
   16cfe:	bf00      	nop
   16d00:	20006bd8 	.word	0x20006bd8
   16d04:	00015009 	.word	0x00015009
   16d08:	00006fcd 	.word	0x00006fcd
   16d0c:	000114e5 	.word	0x000114e5
   16d10:	00006e89 	.word	0x00006e89
   16d14:	00007111 	.word	0x00007111
   16d18:	0040      	lsls	r0, r0, #1
   16d1a:	3050      	adds	r0, #80	; 0x50
   16d1c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16d20:	f280 80c6 	bge.w	16eb0 <gauge_init+0x4b4>
   16d24:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   16d26:	2114      	movs	r1, #20
   16d28:	4620      	mov	r0, r4
   16d2a:	4b69      	ldr	r3, [pc, #420]	; (16ed0 <gauge_init+0x4d4>)
   16d2c:	4798      	blx	r3
   16d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
   16d30:	2000      	movs	r0, #0
   16d32:	4b68      	ldr	r3, [pc, #416]	; (16ed4 <gauge_init+0x4d8>)
   16d34:	4798      	blx	r3
   16d36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16d3a:	3050      	adds	r0, #80	; 0x50
   16d3c:	4b66      	ldr	r3, [pc, #408]	; (16ed8 <gauge_init+0x4dc>)
   16d3e:	fb83 2300 	smull	r2, r3, r3, r0
   16d42:	17c2      	asrs	r2, r0, #31
   16d44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16d48:	b212      	sxth	r2, r2
   16d4a:	e68a      	b.n	16a62 <gauge_init+0x66>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
   16d4c:	2000      	movs	r0, #0
   16d4e:	4b61      	ldr	r3, [pc, #388]	; (16ed4 <gauge_init+0x4d8>)
   16d50:	4798      	blx	r3
   16d52:	3014      	adds	r0, #20
   16d54:	0080      	lsls	r0, r0, #2
   16d56:	4b60      	ldr	r3, [pc, #384]	; (16ed8 <gauge_init+0x4dc>)
   16d58:	fb83 2300 	smull	r2, r3, r3, r0
   16d5c:	17c2      	asrs	r2, r0, #31
   16d5e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16d62:	b212      	sxth	r2, r2
   16d64:	e68e      	b.n	16a84 <gauge_init+0x88>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
   16d66:	2000      	movs	r0, #0
   16d68:	4b5a      	ldr	r3, [pc, #360]	; (16ed4 <gauge_init+0x4d8>)
   16d6a:	4798      	blx	r3
   16d6c:	300a      	adds	r0, #10
   16d6e:	00c0      	lsls	r0, r0, #3
   16d70:	4b59      	ldr	r3, [pc, #356]	; (16ed8 <gauge_init+0x4dc>)
   16d72:	fb83 2300 	smull	r2, r3, r3, r0
   16d76:	17c2      	asrs	r2, r0, #31
   16d78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16d7c:	b212      	sxth	r2, r2
   16d7e:	e692      	b.n	16aa6 <gauge_init+0xaa>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16d80:	2000      	movs	r0, #0
   16d82:	4b54      	ldr	r3, [pc, #336]	; (16ed4 <gauge_init+0x4d8>)
   16d84:	4798      	blx	r3
   16d86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16d8a:	0080      	lsls	r0, r0, #2
   16d8c:	3050      	adds	r0, #80	; 0x50
   16d8e:	4b52      	ldr	r3, [pc, #328]	; (16ed8 <gauge_init+0x4dc>)
   16d90:	fb83 2300 	smull	r2, r3, r3, r0
   16d94:	17c2      	asrs	r2, r0, #31
   16d96:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16d9a:	b212      	sxth	r2, r2
   16d9c:	e696      	b.n	16acc <gauge_init+0xd0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16d9e:	2000      	movs	r0, #0
   16da0:	4b4c      	ldr	r3, [pc, #304]	; (16ed4 <gauge_init+0x4d8>)
   16da2:	4798      	blx	r3
   16da4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16da8:	0080      	lsls	r0, r0, #2
   16daa:	3050      	adds	r0, #80	; 0x50
   16dac:	4b4a      	ldr	r3, [pc, #296]	; (16ed8 <gauge_init+0x4dc>)
   16dae:	fb83 2300 	smull	r2, r3, r3, r0
   16db2:	17c2      	asrs	r2, r0, #31
   16db4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16db8:	b212      	sxth	r2, r2
   16dba:	e69a      	b.n	16af2 <gauge_init+0xf6>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16dbc:	2000      	movs	r0, #0
   16dbe:	4b45      	ldr	r3, [pc, #276]	; (16ed4 <gauge_init+0x4d8>)
   16dc0:	4798      	blx	r3
   16dc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16dc6:	0080      	lsls	r0, r0, #2
   16dc8:	3050      	adds	r0, #80	; 0x50
   16dca:	4b43      	ldr	r3, [pc, #268]	; (16ed8 <gauge_init+0x4dc>)
   16dcc:	fb83 2300 	smull	r2, r3, r3, r0
   16dd0:	17c2      	asrs	r2, r0, #31
   16dd2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16dd6:	b212      	sxth	r2, r2
   16dd8:	e69e      	b.n	16b18 <gauge_init+0x11c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
   16dda:	2000      	movs	r0, #0
   16ddc:	4b3d      	ldr	r3, [pc, #244]	; (16ed4 <gauge_init+0x4d8>)
   16dde:	4798      	blx	r3
   16de0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16de4:	0080      	lsls	r0, r0, #2
   16de6:	3050      	adds	r0, #80	; 0x50
   16de8:	4b3b      	ldr	r3, [pc, #236]	; (16ed8 <gauge_init+0x4dc>)
   16dea:	fb83 2300 	smull	r2, r3, r3, r0
   16dee:	17c2      	asrs	r2, r0, #31
   16df0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16df4:	b212      	sxth	r2, r2
   16df6:	e6a2      	b.n	16b3e <gauge_init+0x142>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
   16df8:	2000      	movs	r0, #0
   16dfa:	4b36      	ldr	r3, [pc, #216]	; (16ed4 <gauge_init+0x4d8>)
   16dfc:	4798      	blx	r3
   16dfe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e02:	3050      	adds	r0, #80	; 0x50
   16e04:	4b34      	ldr	r3, [pc, #208]	; (16ed8 <gauge_init+0x4dc>)
   16e06:	fb83 2300 	smull	r2, r3, r3, r0
   16e0a:	17c2      	asrs	r2, r0, #31
   16e0c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16e10:	b212      	sxth	r2, r2
   16e12:	e6a6      	b.n	16b62 <gauge_init+0x166>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   16e14:	2000      	movs	r0, #0
   16e16:	4b2f      	ldr	r3, [pc, #188]	; (16ed4 <gauge_init+0x4d8>)
   16e18:	4798      	blx	r3
   16e1a:	300a      	adds	r0, #10
   16e1c:	00c0      	lsls	r0, r0, #3
   16e1e:	4b2e      	ldr	r3, [pc, #184]	; (16ed8 <gauge_init+0x4dc>)
   16e20:	fb83 2300 	smull	r2, r3, r3, r0
   16e24:	17c2      	asrs	r2, r0, #31
   16e26:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16e2a:	b212      	sxth	r2, r2
   16e2c:	e6d4      	b.n	16bd8 <gauge_init+0x1dc>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
   16e2e:	2000      	movs	r0, #0
   16e30:	4b28      	ldr	r3, [pc, #160]	; (16ed4 <gauge_init+0x4d8>)
   16e32:	4798      	blx	r3
   16e34:	300a      	adds	r0, #10
   16e36:	00c0      	lsls	r0, r0, #3
   16e38:	4b27      	ldr	r3, [pc, #156]	; (16ed8 <gauge_init+0x4dc>)
   16e3a:	fb83 2300 	smull	r2, r3, r3, r0
   16e3e:	17c2      	asrs	r2, r0, #31
   16e40:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16e44:	b212      	sxth	r2, r2
   16e46:	e6d8      	b.n	16bfa <gauge_init+0x1fe>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
   16e48:	2000      	movs	r0, #0
   16e4a:	4b22      	ldr	r3, [pc, #136]	; (16ed4 <gauge_init+0x4d8>)
   16e4c:	4798      	blx	r3
   16e4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16e52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16e56:	3050      	adds	r0, #80	; 0x50
   16e58:	4b1f      	ldr	r3, [pc, #124]	; (16ed8 <gauge_init+0x4dc>)
   16e5a:	fb83 2300 	smull	r2, r3, r3, r0
   16e5e:	17c2      	asrs	r2, r0, #31
   16e60:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16e64:	b212      	sxth	r2, r2
   16e66:	e6dc      	b.n	16c22 <gauge_init+0x226>
   16e68:	2308      	movs	r3, #8
   16e6a:	2112      	movs	r1, #18
   16e6c:	240b      	movs	r4, #11
   16e6e:	e6eb      	b.n	16c48 <gauge_init+0x24c>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
   16e70:	2000      	movs	r0, #0
   16e72:	4b18      	ldr	r3, [pc, #96]	; (16ed4 <gauge_init+0x4d8>)
   16e74:	4798      	blx	r3
   16e76:	300a      	adds	r0, #10
   16e78:	00c0      	lsls	r0, r0, #3
   16e7a:	4b17      	ldr	r3, [pc, #92]	; (16ed8 <gauge_init+0x4dc>)
   16e7c:	fb83 2300 	smull	r2, r3, r3, r0
   16e80:	17c2      	asrs	r2, r0, #31
   16e82:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16e86:	b212      	sxth	r2, r2
   16e88:	e6f6      	b.n	16c78 <gauge_init+0x27c>
   16e8a:	2308      	movs	r3, #8
   16e8c:	2112      	movs	r1, #18
   16e8e:	240b      	movs	r4, #11
   16e90:	e707      	b.n	16ca2 <gauge_init+0x2a6>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
   16e92:	2000      	movs	r0, #0
   16e94:	4b0f      	ldr	r3, [pc, #60]	; (16ed4 <gauge_init+0x4d8>)
   16e96:	4798      	blx	r3
   16e98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   16e9c:	0040      	lsls	r0, r0, #1
   16e9e:	3050      	adds	r0, #80	; 0x50
   16ea0:	4b0d      	ldr	r3, [pc, #52]	; (16ed8 <gauge_init+0x4dc>)
   16ea2:	fb83 2300 	smull	r2, r3, r3, r0
   16ea6:	17c2      	asrs	r2, r0, #31
   16ea8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16eac:	b212      	sxth	r2, r2
   16eae:	e719      	b.n	16ce4 <gauge_init+0x2e8>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
   16eb0:	2000      	movs	r0, #0
   16eb2:	4b08      	ldr	r3, [pc, #32]	; (16ed4 <gauge_init+0x4d8>)
   16eb4:	4798      	blx	r3
   16eb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16eba:	0040      	lsls	r0, r0, #1
   16ebc:	3050      	adds	r0, #80	; 0x50
   16ebe:	4b06      	ldr	r3, [pc, #24]	; (16ed8 <gauge_init+0x4dc>)
   16ec0:	fb83 2300 	smull	r2, r3, r3, r0
   16ec4:	17c2      	asrs	r2, r0, #31
   16ec6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16eca:	b212      	sxth	r2, r2
   16ecc:	e72b      	b.n	16d26 <gauge_init+0x32a>
   16ece:	bf00      	nop
   16ed0:	00006e89 	.word	0x00006e89
   16ed4:	000114e5 	.word	0x000114e5
   16ed8:	66666667 	.word	0x66666667

00016edc <arc_init>:
{
   16edc:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
   16ede:	4c3d      	ldr	r4, [pc, #244]	; (16fd4 <arc_init+0xf8>)
   16ee0:	6820      	ldr	r0, [r4, #0]
   16ee2:	301c      	adds	r0, #28
   16ee4:	4b3c      	ldr	r3, [pc, #240]	; (16fd8 <arc_init+0xfc>)
   16ee6:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
   16ee8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16eea:	89a2      	ldrh	r2, [r4, #12]
   16eec:	2199      	movs	r1, #153	; 0x99
   16eee:	301c      	adds	r0, #28
   16ef0:	4b3a      	ldr	r3, [pc, #232]	; (16fdc <arc_init+0x100>)
   16ef2:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   16ef4:	6824      	ldr	r4, [r4, #0]
   16ef6:	341c      	adds	r4, #28
   16ef8:	2000      	movs	r0, #0
   16efa:	4b39      	ldr	r3, [pc, #228]	; (16fe0 <arc_init+0x104>)
   16efc:	4798      	blx	r3
   16efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f06:	3050      	adds	r0, #80	; 0x50
   16f08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16f0c:	da41      	bge.n	16f92 <arc_init+0xb6>
   16f0e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16f10:	2190      	movs	r1, #144	; 0x90
   16f12:	4620      	mov	r0, r4
   16f14:	4d33      	ldr	r5, [pc, #204]	; (16fe4 <arc_init+0x108>)
   16f16:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
   16f18:	4c2e      	ldr	r4, [pc, #184]	; (16fd4 <arc_init+0xf8>)
   16f1a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   16f1c:	2201      	movs	r2, #1
   16f1e:	2194      	movs	r1, #148	; 0x94
   16f20:	301c      	adds	r0, #28
   16f22:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
   16f24:	6820      	ldr	r0, [r4, #0]
   16f26:	3020      	adds	r0, #32
   16f28:	4b2b      	ldr	r3, [pc, #172]	; (16fd8 <arc_init+0xfc>)
   16f2a:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
   16f2c:	6820      	ldr	r0, [r4, #0]
   16f2e:	6a23      	ldr	r3, [r4, #32]
   16f30:	f013 0302 	ands.w	r3, r3, #2
   16f34:	bf14      	ite	ne
   16f36:	211a      	movne	r1, #26
   16f38:	2108      	moveq	r1, #8
   16f3a:	2b00      	cmp	r3, #0
   16f3c:	bf15      	itete	ne
   16f3e:	2435      	movne	r4, #53	; 0x35
   16f40:	2412      	moveq	r4, #18
   16f42:	231b      	movne	r3, #27
   16f44:	2309      	moveq	r3, #9
   16f46:	f04f 0200 	mov.w	r2, #0
   16f4a:	f363 0204 	bfi	r2, r3, #0, #5
   16f4e:	f364 124a 	bfi	r2, r4, #5, #6
   16f52:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   16f56:	2199      	movs	r1, #153	; 0x99
   16f58:	3020      	adds	r0, #32
   16f5a:	4b20      	ldr	r3, [pc, #128]	; (16fdc <arc_init+0x100>)
   16f5c:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   16f5e:	4b1d      	ldr	r3, [pc, #116]	; (16fd4 <arc_init+0xf8>)
   16f60:	681c      	ldr	r4, [r3, #0]
   16f62:	3420      	adds	r4, #32
   16f64:	2000      	movs	r0, #0
   16f66:	4b1e      	ldr	r3, [pc, #120]	; (16fe0 <arc_init+0x104>)
   16f68:	4798      	blx	r3
   16f6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f72:	3050      	adds	r0, #80	; 0x50
   16f74:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   16f78:	da1b      	bge.n	16fb2 <arc_init+0xd6>
   16f7a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   16f7c:	2190      	movs	r1, #144	; 0x90
   16f7e:	4620      	mov	r0, r4
   16f80:	4c18      	ldr	r4, [pc, #96]	; (16fe4 <arc_init+0x108>)
   16f82:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
   16f84:	4b13      	ldr	r3, [pc, #76]	; (16fd4 <arc_init+0xf8>)
   16f86:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   16f88:	2201      	movs	r2, #1
   16f8a:	2194      	movs	r1, #148	; 0x94
   16f8c:	3020      	adds	r0, #32
   16f8e:	47a0      	blx	r4
   16f90:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
   16f92:	2000      	movs	r0, #0
   16f94:	4b12      	ldr	r3, [pc, #72]	; (16fe0 <arc_init+0x104>)
   16f96:	4798      	blx	r3
   16f98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16f9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16fa0:	3050      	adds	r0, #80	; 0x50
   16fa2:	4b11      	ldr	r3, [pc, #68]	; (16fe8 <arc_init+0x10c>)
   16fa4:	fb83 2300 	smull	r2, r3, r3, r0
   16fa8:	17c2      	asrs	r2, r0, #31
   16faa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16fae:	b212      	sxth	r2, r2
   16fb0:	e7ae      	b.n	16f10 <arc_init+0x34>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
   16fb2:	2000      	movs	r0, #0
   16fb4:	4b0a      	ldr	r3, [pc, #40]	; (16fe0 <arc_init+0x104>)
   16fb6:	4798      	blx	r3
   16fb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16fbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16fc0:	3050      	adds	r0, #80	; 0x50
   16fc2:	4b09      	ldr	r3, [pc, #36]	; (16fe8 <arc_init+0x10c>)
   16fc4:	fb83 2300 	smull	r2, r3, r3, r0
   16fc8:	17c2      	asrs	r2, r0, #31
   16fca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   16fce:	b212      	sxth	r2, r2
   16fd0:	e7d4      	b.n	16f7c <arc_init+0xa0>
   16fd2:	bf00      	nop
   16fd4:	20006bd8 	.word	0x20006bd8
   16fd8:	00015009 	.word	0x00015009
   16fdc:	00006fcd 	.word	0x00006fcd
   16fe0:	000114e5 	.word	0x000114e5
   16fe4:	00006e89 	.word	0x00006e89
   16fe8:	66666667 	.word	0x66666667

00016fec <led_init>:
{
   16fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->led);
   16fee:	4c38      	ldr	r4, [pc, #224]	; (170d0 <led_init+0xe4>)
   16ff0:	6820      	ldr	r0, [r4, #0]
   16ff2:	306c      	adds	r0, #108	; 0x6c
   16ff4:	4b37      	ldr	r3, [pc, #220]	; (170d4 <led_init+0xe8>)
   16ff6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
   16ff8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   16ffa:	22ff      	movs	r2, #255	; 0xff
   16ffc:	212c      	movs	r1, #44	; 0x2c
   16ffe:	306c      	adds	r0, #108	; 0x6c
   17000:	4d35      	ldr	r5, [pc, #212]	; (170d8 <led_init+0xec>)
   17002:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   17004:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17006:	89a2      	ldrh	r2, [r4, #12]
   17008:	2129      	movs	r1, #41	; 0x29
   1700a:	306c      	adds	r0, #108	; 0x6c
   1700c:	4f33      	ldr	r7, [pc, #204]	; (170dc <led_init+0xf0>)
   1700e:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
   17010:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17012:	2202      	movs	r2, #2
   17014:	2130      	movs	r1, #48	; 0x30
   17016:	306c      	adds	r0, #108	; 0x6c
   17018:	4e31      	ldr	r6, [pc, #196]	; (170e0 <led_init+0xf4>)
   1701a:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
   1701c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   1701e:	227f      	movs	r2, #127	; 0x7f
   17020:	213c      	movs	r1, #60	; 0x3c
   17022:	306c      	adds	r0, #108	; 0x6c
   17024:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
   17026:	6825      	ldr	r5, [r4, #0]
   17028:	356c      	adds	r5, #108	; 0x6c
   1702a:	214c      	movs	r1, #76	; 0x4c
   1702c:	89a0      	ldrh	r0, [r4, #12]
   1702e:	4b2d      	ldr	r3, [pc, #180]	; (170e4 <led_init+0xf8>)
   17030:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17032:	4602      	mov	r2, r0
   17034:	2139      	movs	r1, #57	; 0x39
   17036:	4628      	mov	r0, r5
   17038:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1703a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1703c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17040:	2101      	movs	r1, #1
   17042:	306c      	adds	r0, #108	; 0x6c
   17044:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   17046:	6824      	ldr	r4, [r4, #0]
   17048:	346c      	adds	r4, #108	; 0x6c
   1704a:	2000      	movs	r0, #0
   1704c:	4b26      	ldr	r3, [pc, #152]	; (170e8 <led_init+0xfc>)
   1704e:	4798      	blx	r3
   17050:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17054:	3050      	adds	r0, #80	; 0x50
   17056:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1705a:	da1c      	bge.n	17096 <led_init+0xaa>
   1705c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   1705e:	2150      	movs	r1, #80	; 0x50
   17060:	4620      	mov	r0, r4
   17062:	4b1f      	ldr	r3, [pc, #124]	; (170e0 <led_init+0xf4>)
   17064:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
   17066:	4c1a      	ldr	r4, [pc, #104]	; (170d0 <led_init+0xe4>)
   17068:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   1706a:	89a2      	ldrh	r2, [r4, #12]
   1706c:	2159      	movs	r1, #89	; 0x59
   1706e:	306c      	adds	r0, #108	; 0x6c
   17070:	4b1a      	ldr	r3, [pc, #104]	; (170dc <led_init+0xf0>)
   17072:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   17074:	6824      	ldr	r4, [r4, #0]
   17076:	346c      	adds	r4, #108	; 0x6c
   17078:	2000      	movs	r0, #0
   1707a:	4b1b      	ldr	r3, [pc, #108]	; (170e8 <led_init+0xfc>)
   1707c:	4798      	blx	r3
   1707e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17082:	3050      	adds	r0, #80	; 0x50
   17084:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17088:	da13      	bge.n	170b2 <led_init+0xc6>
   1708a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   1708c:	2153      	movs	r1, #83	; 0x53
   1708e:	4620      	mov	r0, r4
   17090:	4b13      	ldr	r3, [pc, #76]	; (170e0 <led_init+0xf4>)
   17092:	4798      	blx	r3
   17094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
   17096:	2000      	movs	r0, #0
   17098:	4b13      	ldr	r3, [pc, #76]	; (170e8 <led_init+0xfc>)
   1709a:	4798      	blx	r3
   1709c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   170a0:	3050      	adds	r0, #80	; 0x50
   170a2:	4b12      	ldr	r3, [pc, #72]	; (170ec <led_init+0x100>)
   170a4:	fb83 2300 	smull	r2, r3, r3, r0
   170a8:	17c2      	asrs	r2, r0, #31
   170aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   170ae:	b212      	sxth	r2, r2
   170b0:	e7d5      	b.n	1705e <led_init+0x72>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
   170b2:	2000      	movs	r0, #0
   170b4:	4b0c      	ldr	r3, [pc, #48]	; (170e8 <led_init+0xfc>)
   170b6:	4798      	blx	r3
   170b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   170bc:	3050      	adds	r0, #80	; 0x50
   170be:	4b0b      	ldr	r3, [pc, #44]	; (170ec <led_init+0x100>)
   170c0:	fb83 2300 	smull	r2, r3, r3, r0
   170c4:	17c2      	asrs	r2, r0, #31
   170c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   170ca:	b212      	sxth	r2, r2
   170cc:	e7de      	b.n	1708c <led_init+0xa0>
   170ce:	bf00      	nop
   170d0:	20006bd8 	.word	0x20006bd8
   170d4:	00015009 	.word	0x00015009
   170d8:	00007111 	.word	0x00007111
   170dc:	00006fcd 	.word	0x00006fcd
   170e0:	00006e89 	.word	0x00006e89
   170e4:	0001214f 	.word	0x0001214f
   170e8:	000114e5 	.word	0x000114e5
   170ec:	66666667 	.word	0x66666667

000170f0 <lv_theme_material_init>:
{
   170f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170f4:	4680      	mov	r8, r0
   170f6:	460f      	mov	r7, r1
   170f8:	4615      	mov	r5, r2
   170fa:	461e      	mov	r6, r3
    if(!inited) {
   170fc:	4bb2      	ldr	r3, [pc, #712]	; (173c8 <lv_theme_material_init+0x2d8>)
   170fe:	791b      	ldrb	r3, [r3, #4]
   17100:	2b00      	cmp	r3, #0
   17102:	f001 8369 	beq.w	187d8 <lv_theme_material_init+0x16e8>
    theme.color_primary = color_primary;
   17106:	4cb0      	ldr	r4, [pc, #704]	; (173c8 <lv_theme_material_init+0x2d8>)
   17108:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
   1710c:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
   1710e:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
   17110:	9b06      	ldr	r3, [sp, #24]
   17112:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
   17114:	9b07      	ldr	r3, [sp, #28]
   17116:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
   17118:	9b08      	ldr	r3, [sp, #32]
   1711a:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
   1711c:	6225      	str	r5, [r4, #32]
    basic_init();
   1711e:	4bab      	ldr	r3, [pc, #684]	; (173cc <lv_theme_material_init+0x2dc>)
   17120:	4798      	blx	r3
    bar_init();
   17122:	4bab      	ldr	r3, [pc, #684]	; (173d0 <lv_theme_material_init+0x2e0>)
   17124:	4798      	blx	r3
    led_init();
   17126:	4bab      	ldr	r3, [pc, #684]	; (173d4 <lv_theme_material_init+0x2e4>)
   17128:	4798      	blx	r3
    slider_init();
   1712a:	4bab      	ldr	r3, [pc, #684]	; (173d8 <lv_theme_material_init+0x2e8>)
   1712c:	4798      	blx	r3
    switch_init();
   1712e:	4bab      	ldr	r3, [pc, #684]	; (173dc <lv_theme_material_init+0x2ec>)
   17130:	4798      	blx	r3
    linemeter_init();
   17132:	4bab      	ldr	r3, [pc, #684]	; (173e0 <lv_theme_material_init+0x2f0>)
   17134:	4798      	blx	r3
    gauge_init();
   17136:	4bab      	ldr	r3, [pc, #684]	; (173e4 <lv_theme_material_init+0x2f4>)
   17138:	4798      	blx	r3
    arc_init();
   1713a:	4bab      	ldr	r3, [pc, #684]	; (173e8 <lv_theme_material_init+0x2f8>)
   1713c:	4798      	blx	r3
    style_init_reset(&styles->chart_bg);
   1713e:	6820      	ldr	r0, [r4, #0]
   17140:	3040      	adds	r0, #64	; 0x40
   17142:	4baa      	ldr	r3, [pc, #680]	; (173ec <lv_theme_material_init+0x2fc>)
   17144:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   17146:	6820      	ldr	r0, [r4, #0]
   17148:	3040      	adds	r0, #64	; 0x40
   1714a:	6a23      	ldr	r3, [r4, #32]
   1714c:	f013 0f02 	tst.w	r3, #2
   17150:	f041 834b 	bne.w	187ea <lv_theme_material_init+0x16fa>
   17154:	2314      	movs	r3, #20
   17156:	212b      	movs	r1, #43	; 0x2b
   17158:	2417      	movs	r4, #23
   1715a:	f04f 0200 	mov.w	r2, #0
   1715e:	f364 0204 	bfi	r2, r4, #0, #5
   17162:	f361 124a 	bfi	r2, r1, #5, #6
   17166:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1716a:	f248 0189 	movw	r1, #32905	; 0x8089
   1716e:	4ba0      	ldr	r3, [pc, #640]	; (173f0 <lv_theme_material_init+0x300>)
   17170:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
   17172:	4c95      	ldr	r4, [pc, #596]	; (173c8 <lv_theme_material_init+0x2d8>)
   17174:	6820      	ldr	r0, [r4, #0]
   17176:	3044      	adds	r0, #68	; 0x44
   17178:	4b9c      	ldr	r3, [pc, #624]	; (173ec <lv_theme_material_init+0x2fc>)
   1717a:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   1717c:	6824      	ldr	r4, [r4, #0]
   1717e:	3444      	adds	r4, #68	; 0x44
   17180:	2000      	movs	r0, #0
   17182:	4b9c      	ldr	r3, [pc, #624]	; (173f4 <lv_theme_material_init+0x304>)
   17184:	4798      	blx	r3
   17186:	3050      	adds	r0, #80	; 0x50
   17188:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1718c:	f281 8332 	bge.w	187f4 <lv_theme_material_init+0x1704>
   17190:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   17192:	2190      	movs	r1, #144	; 0x90
   17194:	4620      	mov	r0, r4
   17196:	4b98      	ldr	r3, [pc, #608]	; (173f8 <lv_theme_material_init+0x308>)
   17198:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1719a:	4b8b      	ldr	r3, [pc, #556]	; (173c8 <lv_theme_material_init+0x2d8>)
   1719c:	681c      	ldr	r4, [r3, #0]
   1719e:	3444      	adds	r4, #68	; 0x44
   171a0:	2000      	movs	r0, #0
   171a2:	4b94      	ldr	r3, [pc, #592]	; (173f4 <lv_theme_material_init+0x304>)
   171a4:	4798      	blx	r3
   171a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   171aa:	0040      	lsls	r0, r0, #1
   171ac:	3050      	adds	r0, #80	; 0x50
   171ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   171b2:	f281 832c 	bge.w	1880e <lv_theme_material_init+0x171e>
   171b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   171b8:	2192      	movs	r1, #146	; 0x92
   171ba:	4620      	mov	r0, r4
   171bc:	4b8e      	ldr	r3, [pc, #568]	; (173f8 <lv_theme_material_init+0x308>)
   171be:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   171c0:	4b81      	ldr	r3, [pc, #516]	; (173c8 <lv_theme_material_init+0x2d8>)
   171c2:	681c      	ldr	r4, [r3, #0]
   171c4:	3444      	adds	r4, #68	; 0x44
   171c6:	2000      	movs	r0, #0
   171c8:	4b8a      	ldr	r3, [pc, #552]	; (173f4 <lv_theme_material_init+0x304>)
   171ca:	4798      	blx	r3
   171cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   171d0:	0040      	lsls	r0, r0, #1
   171d2:	3050      	adds	r0, #80	; 0x50
   171d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   171d8:	f281 8329 	bge.w	1882e <lv_theme_material_init+0x173e>
   171dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   171de:	2193      	movs	r1, #147	; 0x93
   171e0:	4620      	mov	r0, r4
   171e2:	4b85      	ldr	r3, [pc, #532]	; (173f8 <lv_theme_material_init+0x308>)
   171e4:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   171e6:	4b78      	ldr	r3, [pc, #480]	; (173c8 <lv_theme_material_init+0x2d8>)
   171e8:	6818      	ldr	r0, [r3, #0]
   171ea:	6a1b      	ldr	r3, [r3, #32]
   171ec:	f013 0302 	ands.w	r3, r3, #2
   171f0:	bf14      	ite	ne
   171f2:	211a      	movne	r1, #26
   171f4:	2110      	moveq	r1, #16
   171f6:	2b00      	cmp	r3, #0
   171f8:	bf15      	itete	ne
   171fa:	2437      	movne	r4, #55	; 0x37
   171fc:	2422      	moveq	r4, #34	; 0x22
   171fe:	231c      	movne	r3, #28
   17200:	2312      	moveq	r3, #18
   17202:	f04f 0200 	mov.w	r2, #0
   17206:	f363 0204 	bfi	r2, r3, #0, #5
   1720a:	f364 124a 	bfi	r2, r4, #5, #6
   1720e:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   17212:	2199      	movs	r1, #153	; 0x99
   17214:	3044      	adds	r0, #68	; 0x44
   17216:	4b76      	ldr	r3, [pc, #472]	; (173f0 <lv_theme_material_init+0x300>)
   17218:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
   1721a:	4c6b      	ldr	r4, [pc, #428]	; (173c8 <lv_theme_material_init+0x2d8>)
   1721c:	6820      	ldr	r0, [r4, #0]
   1721e:	3048      	adds	r0, #72	; 0x48
   17220:	4b72      	ldr	r3, [pc, #456]	; (173ec <lv_theme_material_init+0x2fc>)
   17222:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   17224:	6824      	ldr	r4, [r4, #0]
   17226:	3448      	adds	r4, #72	; 0x48
   17228:	2000      	movs	r0, #0
   1722a:	4b72      	ldr	r3, [pc, #456]	; (173f4 <lv_theme_material_init+0x304>)
   1722c:	4798      	blx	r3
   1722e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17232:	3050      	adds	r0, #80	; 0x50
   17234:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17238:	f281 8309 	bge.w	1884e <lv_theme_material_init+0x175e>
   1723c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1723e:	2190      	movs	r1, #144	; 0x90
   17240:	4620      	mov	r0, r4
   17242:	4b6d      	ldr	r3, [pc, #436]	; (173f8 <lv_theme_material_init+0x308>)
   17244:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   17246:	4b60      	ldr	r3, [pc, #384]	; (173c8 <lv_theme_material_init+0x2d8>)
   17248:	681c      	ldr	r4, [r3, #0]
   1724a:	3448      	adds	r4, #72	; 0x48
   1724c:	2000      	movs	r0, #0
   1724e:	4b69      	ldr	r3, [pc, #420]	; (173f4 <lv_theme_material_init+0x304>)
   17250:	4798      	blx	r3
   17252:	3014      	adds	r0, #20
   17254:	0080      	lsls	r0, r0, #2
   17256:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1725a:	f281 8307 	bge.w	1886c <lv_theme_material_init+0x177c>
   1725e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   17260:	2103      	movs	r1, #3
   17262:	4620      	mov	r0, r4
   17264:	4b64      	ldr	r3, [pc, #400]	; (173f8 <lv_theme_material_init+0x308>)
   17266:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   17268:	4b57      	ldr	r3, [pc, #348]	; (173c8 <lv_theme_material_init+0x2d8>)
   1726a:	681c      	ldr	r4, [r3, #0]
   1726c:	3448      	adds	r4, #72	; 0x48
   1726e:	2000      	movs	r0, #0
   17270:	4b60      	ldr	r3, [pc, #384]	; (173f4 <lv_theme_material_init+0x304>)
   17272:	4798      	blx	r3
   17274:	3028      	adds	r0, #40	; 0x28
   17276:	0040      	lsls	r0, r0, #1
   17278:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1727c:	f281 8304 	bge.w	18888 <lv_theme_material_init+0x1798>
   17280:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17282:	2114      	movs	r1, #20
   17284:	4620      	mov	r0, r4
   17286:	4b5c      	ldr	r3, [pc, #368]	; (173f8 <lv_theme_material_init+0x308>)
   17288:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   1728a:	4b4f      	ldr	r3, [pc, #316]	; (173c8 <lv_theme_material_init+0x2d8>)
   1728c:	681c      	ldr	r4, [r3, #0]
   1728e:	3448      	adds	r4, #72	; 0x48
   17290:	2000      	movs	r0, #0
   17292:	4b58      	ldr	r3, [pc, #352]	; (173f4 <lv_theme_material_init+0x304>)
   17294:	4798      	blx	r3
   17296:	3050      	adds	r0, #80	; 0x50
   17298:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1729c:	f281 8302 	bge.w	188a4 <lv_theme_material_init+0x17b4>
   172a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   172a2:	2101      	movs	r1, #1
   172a4:	4620      	mov	r0, r4
   172a6:	4b54      	ldr	r3, [pc, #336]	; (173f8 <lv_theme_material_init+0x308>)
   172a8:	4798      	blx	r3
    style_init_reset(&styles->calendar_header);
   172aa:	4c47      	ldr	r4, [pc, #284]	; (173c8 <lv_theme_material_init+0x2d8>)
   172ac:	6820      	ldr	r0, [r4, #0]
   172ae:	3030      	adds	r0, #48	; 0x30
   172b0:	4b4e      	ldr	r3, [pc, #312]	; (173ec <lv_theme_material_init+0x2fc>)
   172b2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   172b4:	6824      	ldr	r4, [r4, #0]
   172b6:	3430      	adds	r4, #48	; 0x30
   172b8:	2000      	movs	r0, #0
   172ba:	4b50      	ldr	r3, [pc, #320]	; (173fc <lv_theme_material_init+0x30c>)
   172bc:	4798      	blx	r3
   172be:	2801      	cmp	r0, #1
   172c0:	f241 82fd 	bls.w	188be <lv_theme_material_init+0x17ce>
   172c4:	2000      	movs	r0, #0
   172c6:	4b4b      	ldr	r3, [pc, #300]	; (173f4 <lv_theme_material_init+0x304>)
   172c8:	4798      	blx	r3
   172ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   172ce:	0040      	lsls	r0, r0, #1
   172d0:	3050      	adds	r0, #80	; 0x50
   172d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   172d6:	f281 830d 	bge.w	188f4 <lv_theme_material_init+0x1804>
   172da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   172dc:	2110      	movs	r1, #16
   172de:	4620      	mov	r0, r4
   172e0:	4b45      	ldr	r3, [pc, #276]	; (173f8 <lv_theme_material_init+0x308>)
   172e2:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   172e4:	4b38      	ldr	r3, [pc, #224]	; (173c8 <lv_theme_material_init+0x2d8>)
   172e6:	681c      	ldr	r4, [r3, #0]
   172e8:	3430      	adds	r4, #48	; 0x30
   172ea:	2000      	movs	r0, #0
   172ec:	4b43      	ldr	r3, [pc, #268]	; (173fc <lv_theme_material_init+0x30c>)
   172ee:	4798      	blx	r3
   172f0:	2801      	cmp	r0, #1
   172f2:	f241 830f 	bls.w	18914 <lv_theme_material_init+0x1824>
   172f6:	2000      	movs	r0, #0
   172f8:	4b3e      	ldr	r3, [pc, #248]	; (173f4 <lv_theme_material_init+0x304>)
   172fa:	4798      	blx	r3
   172fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17300:	0040      	lsls	r0, r0, #1
   17302:	3050      	adds	r0, #80	; 0x50
   17304:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17308:	f281 8336 	bge.w	18978 <lv_theme_material_init+0x1888>
   1730c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1730e:	2112      	movs	r1, #18
   17310:	4620      	mov	r0, r4
   17312:	4b39      	ldr	r3, [pc, #228]	; (173f8 <lv_theme_material_init+0x308>)
   17314:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   17316:	4b2c      	ldr	r3, [pc, #176]	; (173c8 <lv_theme_material_init+0x2d8>)
   17318:	681c      	ldr	r4, [r3, #0]
   1731a:	3430      	adds	r4, #48	; 0x30
   1731c:	2000      	movs	r0, #0
   1731e:	4b37      	ldr	r3, [pc, #220]	; (173fc <lv_theme_material_init+0x30c>)
   17320:	4798      	blx	r3
   17322:	2801      	cmp	r0, #1
   17324:	f241 8338 	bls.w	18998 <lv_theme_material_init+0x18a8>
   17328:	2000      	movs	r0, #0
   1732a:	4b32      	ldr	r3, [pc, #200]	; (173f4 <lv_theme_material_init+0x304>)
   1732c:	4798      	blx	r3
   1732e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17332:	0040      	lsls	r0, r0, #1
   17334:	3050      	adds	r0, #80	; 0x50
   17336:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1733a:	f281 8348 	bge.w	189ce <lv_theme_material_init+0x18de>
   1733e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17340:	2113      	movs	r1, #19
   17342:	4620      	mov	r0, r4
   17344:	4b2c      	ldr	r3, [pc, #176]	; (173f8 <lv_theme_material_init+0x308>)
   17346:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   17348:	4b1f      	ldr	r3, [pc, #124]	; (173c8 <lv_theme_material_init+0x2d8>)
   1734a:	681c      	ldr	r4, [r3, #0]
   1734c:	3430      	adds	r4, #48	; 0x30
   1734e:	2000      	movs	r0, #0
   17350:	4b2a      	ldr	r3, [pc, #168]	; (173fc <lv_theme_material_init+0x30c>)
   17352:	4798      	blx	r3
   17354:	2801      	cmp	r0, #1
   17356:	f241 834a 	bls.w	189ee <lv_theme_material_init+0x18fe>
   1735a:	2000      	movs	r0, #0
   1735c:	4b25      	ldr	r3, [pc, #148]	; (173f4 <lv_theme_material_init+0x304>)
   1735e:	4798      	blx	r3
   17360:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   17364:	0040      	lsls	r0, r0, #1
   17366:	3050      	adds	r0, #80	; 0x50
   17368:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1736c:	f281 835a 	bge.w	18a24 <lv_theme_material_init+0x1934>
   17370:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17372:	2111      	movs	r1, #17
   17374:	4620      	mov	r0, r4
   17376:	4b20      	ldr	r3, [pc, #128]	; (173f8 <lv_theme_material_init+0x308>)
   17378:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
   1737a:	4b13      	ldr	r3, [pc, #76]	; (173c8 <lv_theme_material_init+0x2d8>)
   1737c:	6818      	ldr	r0, [r3, #0]
   1737e:	6a1b      	ldr	r3, [r3, #32]
   17380:	f013 0302 	ands.w	r3, r3, #2
   17384:	bf14      	ite	ne
   17386:	2122      	movne	r1, #34	; 0x22
   17388:	213f      	moveq	r1, #63	; 0x3f
   1738a:	2b00      	cmp	r3, #0
   1738c:	bf14      	ite	ne
   1738e:	2311      	movne	r3, #17
   17390:	231f      	moveq	r3, #31
   17392:	f04f 0200 	mov.w	r2, #0
   17396:	f363 0204 	bfi	r2, r3, #0, #5
   1739a:	f361 124a 	bfi	r2, r1, #5, #6
   1739e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   173a2:	f249 0189 	movw	r1, #37001	; 0x9089
   173a6:	3030      	adds	r0, #48	; 0x30
   173a8:	4b11      	ldr	r3, [pc, #68]	; (173f0 <lv_theme_material_init+0x300>)
   173aa:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
   173ac:	4c06      	ldr	r4, [pc, #24]	; (173c8 <lv_theme_material_init+0x2d8>)
   173ae:	6820      	ldr	r0, [r4, #0]
   173b0:	3034      	adds	r0, #52	; 0x34
   173b2:	4b0e      	ldr	r3, [pc, #56]	; (173ec <lv_theme_material_init+0x2fc>)
   173b4:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   173b6:	6820      	ldr	r0, [r4, #0]
   173b8:	3034      	adds	r0, #52	; 0x34
   173ba:	6a23      	ldr	r3, [r4, #32]
   173bc:	f013 0f02 	tst.w	r3, #2
   173c0:	f041 8340 	bne.w	18a44 <lv_theme_material_init+0x1954>
   173c4:	e01c      	b.n	17400 <lv_theme_material_init+0x310>
   173c6:	bf00      	nop
   173c8:	20006bd8 	.word	0x20006bd8
   173cc:	00015029 	.word	0x00015029
   173d0:	00016271 	.word	0x00016271
   173d4:	00016fed 	.word	0x00016fed
   173d8:	000163d9 	.word	0x000163d9
   173dc:	0001667d 	.word	0x0001667d
   173e0:	000167c1 	.word	0x000167c1
   173e4:	000169fd 	.word	0x000169fd
   173e8:	00016edd 	.word	0x00016edd
   173ec:	00015009 	.word	0x00015009
   173f0:	00006fcd 	.word	0x00006fcd
   173f4:	000114e5 	.word	0x000114e5
   173f8:	00006e89 	.word	0x00006e89
   173fc:	00011501 	.word	0x00011501
   17400:	231d      	movs	r3, #29
   17402:	213b      	movs	r1, #59	; 0x3b
   17404:	461c      	mov	r4, r3
   17406:	f04f 0200 	mov.w	r2, #0
   1740a:	f364 0204 	bfi	r2, r4, #0, #5
   1740e:	f361 124a 	bfi	r2, r1, #5, #6
   17412:	f363 22cf 	bfi	r2, r3, #11, #5
   17416:	f248 0189 	movw	r1, #32905	; 0x8089
   1741a:	4bb8      	ldr	r3, [pc, #736]	; (176fc <lv_theme_material_init+0x60c>)
   1741c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   1741e:	4bb8      	ldr	r3, [pc, #736]	; (17700 <lv_theme_material_init+0x610>)
   17420:	681c      	ldr	r4, [r3, #0]
   17422:	3434      	adds	r4, #52	; 0x34
   17424:	2000      	movs	r0, #0
   17426:	4bb7      	ldr	r3, [pc, #732]	; (17704 <lv_theme_material_init+0x614>)
   17428:	4798      	blx	r3
   1742a:	2801      	cmp	r0, #1
   1742c:	f241 830f 	bls.w	18a4e <lv_theme_material_init+0x195e>
   17430:	2000      	movs	r0, #0
   17432:	4bb5      	ldr	r3, [pc, #724]	; (17708 <lv_theme_material_init+0x618>)
   17434:	4798      	blx	r3
   17436:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1743a:	0040      	lsls	r0, r0, #1
   1743c:	3050      	adds	r0, #80	; 0x50
   1743e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17442:	f281 831f 	bge.w	18a84 <lv_theme_material_init+0x1994>
   17446:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17448:	2112      	movs	r1, #18
   1744a:	4620      	mov	r0, r4
   1744c:	4baf      	ldr	r3, [pc, #700]	; (1770c <lv_theme_material_init+0x61c>)
   1744e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   17450:	4bab      	ldr	r3, [pc, #684]	; (17700 <lv_theme_material_init+0x610>)
   17452:	681c      	ldr	r4, [r3, #0]
   17454:	3434      	adds	r4, #52	; 0x34
   17456:	2000      	movs	r0, #0
   17458:	4baa      	ldr	r3, [pc, #680]	; (17704 <lv_theme_material_init+0x614>)
   1745a:	4798      	blx	r3
   1745c:	2801      	cmp	r0, #1
   1745e:	f241 8321 	bls.w	18aa4 <lv_theme_material_init+0x19b4>
   17462:	2000      	movs	r0, #0
   17464:	4ba8      	ldr	r3, [pc, #672]	; (17708 <lv_theme_material_init+0x618>)
   17466:	4798      	blx	r3
   17468:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1746c:	0040      	lsls	r0, r0, #1
   1746e:	3050      	adds	r0, #80	; 0x50
   17470:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17474:	f281 8331 	bge.w	18ada <lv_theme_material_init+0x19ea>
   17478:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1747a:	2113      	movs	r1, #19
   1747c:	4620      	mov	r0, r4
   1747e:	4ba3      	ldr	r3, [pc, #652]	; (1770c <lv_theme_material_init+0x61c>)
   17480:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   17482:	4b9f      	ldr	r3, [pc, #636]	; (17700 <lv_theme_material_init+0x610>)
   17484:	681c      	ldr	r4, [r3, #0]
   17486:	3434      	adds	r4, #52	; 0x34
   17488:	2000      	movs	r0, #0
   1748a:	4b9e      	ldr	r3, [pc, #632]	; (17704 <lv_theme_material_init+0x614>)
   1748c:	4798      	blx	r3
   1748e:	2801      	cmp	r0, #1
   17490:	f241 8333 	bls.w	18afa <lv_theme_material_init+0x1a0a>
   17494:	2000      	movs	r0, #0
   17496:	4b9c      	ldr	r3, [pc, #624]	; (17708 <lv_theme_material_init+0x618>)
   17498:	4798      	blx	r3
   1749a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1749e:	0040      	lsls	r0, r0, #1
   174a0:	3050      	adds	r0, #80	; 0x50
   174a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   174a6:	f281 8343 	bge.w	18b30 <lv_theme_material_init+0x1a40>
   174aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   174ac:	2111      	movs	r1, #17
   174ae:	4620      	mov	r0, r4
   174b0:	4b96      	ldr	r3, [pc, #600]	; (1770c <lv_theme_material_init+0x61c>)
   174b2:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
   174b4:	4c92      	ldr	r4, [pc, #584]	; (17700 <lv_theme_material_init+0x610>)
   174b6:	6820      	ldr	r0, [r4, #0]
   174b8:	302c      	adds	r0, #44	; 0x2c
   174ba:	4b95      	ldr	r3, [pc, #596]	; (17710 <lv_theme_material_init+0x620>)
   174bc:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   174be:	6824      	ldr	r4, [r4, #0]
   174c0:	342c      	adds	r4, #44	; 0x2c
   174c2:	2000      	movs	r0, #0
   174c4:	4b90      	ldr	r3, [pc, #576]	; (17708 <lv_theme_material_init+0x618>)
   174c6:	4798      	blx	r3
   174c8:	3014      	adds	r0, #20
   174ca:	0080      	lsls	r0, r0, #2
   174cc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   174d0:	f281 833e 	bge.w	18b50 <lv_theme_material_init+0x1a60>
   174d4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   174d6:	2101      	movs	r1, #1
   174d8:	4620      	mov	r0, r4
   174da:	4b8c      	ldr	r3, [pc, #560]	; (1770c <lv_theme_material_init+0x61c>)
   174dc:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   174de:	4b88      	ldr	r3, [pc, #544]	; (17700 <lv_theme_material_init+0x610>)
   174e0:	6818      	ldr	r0, [r3, #0]
   174e2:	302c      	adds	r0, #44	; 0x2c
   174e4:	6a1b      	ldr	r3, [r3, #32]
   174e6:	f013 0f02 	tst.w	r3, #2
   174ea:	f041 833f 	bne.w	18b6c <lv_theme_material_init+0x1a7c>
   174ee:	231f      	movs	r3, #31
   174f0:	213f      	movs	r1, #63	; 0x3f
   174f2:	461c      	mov	r4, r3
   174f4:	f04f 0200 	mov.w	r2, #0
   174f8:	f364 0204 	bfi	r2, r4, #0, #5
   174fc:	f361 124a 	bfi	r2, r1, #5, #6
   17500:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17504:	f248 1189 	movw	r1, #33161	; 0x8189
   17508:	4b7c      	ldr	r3, [pc, #496]	; (176fc <lv_theme_material_init+0x60c>)
   1750a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
   1750c:	4b7c      	ldr	r3, [pc, #496]	; (17700 <lv_theme_material_init+0x610>)
   1750e:	6818      	ldr	r0, [r3, #0]
   17510:	6a1b      	ldr	r3, [r3, #32]
   17512:	f013 0f02 	tst.w	r3, #2
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17516:	bf14      	ite	ne
   17518:	2233      	movne	r2, #51	; 0x33
   1751a:	2266      	moveq	r2, #102	; 0x66
   1751c:	f44f 7196 	mov.w	r1, #300	; 0x12c
   17520:	302c      	adds	r0, #44	; 0x2c
   17522:	4d7c      	ldr	r5, [pc, #496]	; (17714 <lv_theme_material_init+0x624>)
   17524:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
   17526:	4c76      	ldr	r4, [pc, #472]	; (17700 <lv_theme_material_init+0x610>)
   17528:	6820      	ldr	r0, [r4, #0]
   1752a:	2233      	movs	r2, #51	; 0x33
   1752c:	f241 012c 	movw	r1, #4140	; 0x102c
   17530:	302c      	adds	r0, #44	; 0x2c
   17532:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
   17534:	6820      	ldr	r0, [r4, #0]
   17536:	22ff      	movs	r2, #255	; 0xff
   17538:	f44f 710b 	mov.w	r1, #556	; 0x22c
   1753c:	302c      	adds	r0, #44	; 0x2c
   1753e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
   17540:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17542:	4b75      	ldr	r3, [pc, #468]	; (17718 <lv_theme_material_init+0x628>)
   17544:	881a      	ldrh	r2, [r3, #0]
   17546:	f248 2189 	movw	r1, #33417	; 0x8289
   1754a:	302c      	adds	r0, #44	; 0x2c
   1754c:	4d6b      	ldr	r5, [pc, #428]	; (176fc <lv_theme_material_init+0x60c>)
   1754e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
   17550:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17552:	89a2      	ldrh	r2, [r4, #12]
   17554:	f240 2129 	movw	r1, #553	; 0x229
   17558:	302c      	adds	r0, #44	; 0x2c
   1755a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
   1755c:	6820      	ldr	r0, [r4, #0]
   1755e:	6a23      	ldr	r3, [r4, #32]
   17560:	f013 0302 	ands.w	r3, r3, #2
   17564:	bf14      	ite	ne
   17566:	2119      	movne	r1, #25
   17568:	213f      	moveq	r1, #63	; 0x3f
   1756a:	2b00      	cmp	r3, #0
   1756c:	bf14      	ite	ne
   1756e:	230c      	movne	r3, #12
   17570:	231f      	moveq	r3, #31
   17572:	f04f 0200 	mov.w	r2, #0
   17576:	f363 0204 	bfi	r2, r3, #0, #5
   1757a:	f361 124a 	bfi	r2, r1, #5, #6
   1757e:	f363 22cf 	bfi	r2, r3, #11, #5
   17582:	2129      	movs	r1, #41	; 0x29
   17584:	302c      	adds	r0, #44	; 0x2c
   17586:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   17588:	6820      	ldr	r0, [r4, #0]
   1758a:	89a2      	ldrh	r2, [r4, #12]
   1758c:	f240 1129 	movw	r1, #297	; 0x129
   17590:	302c      	adds	r0, #44	; 0x2c
   17592:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
   17594:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17596:	2202      	movs	r2, #2
   17598:	f44f 7198 	mov.w	r1, #304	; 0x130
   1759c:	302c      	adds	r0, #44	; 0x2c
   1759e:	4e5b      	ldr	r6, [pc, #364]	; (1770c <lv_theme_material_init+0x61c>)
   175a0:	47b0      	blx	r6
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
   175a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   175a4:	2204      	movs	r2, #4
   175a6:	f240 1131 	movw	r1, #305	; 0x131
   175aa:	302c      	adds	r0, #44	; 0x2c
   175ac:	47b0      	blx	r6
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
   175ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   175b0:	89a2      	ldrh	r2, [r4, #12]
   175b2:	f240 1139 	movw	r1, #313	; 0x139
   175b6:	302c      	adds	r0, #44	; 0x2c
   175b8:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   175ba:	6824      	ldr	r4, [r4, #0]
   175bc:	342c      	adds	r4, #44	; 0x2c
   175be:	2000      	movs	r0, #0
   175c0:	4b51      	ldr	r3, [pc, #324]	; (17708 <lv_theme_material_init+0x618>)
   175c2:	4798      	blx	r3
   175c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   175c8:	3050      	adds	r0, #80	; 0x50
   175ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   175ce:	f281 82d2 	bge.w	18b76 <lv_theme_material_init+0x1a86>
   175d2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   175d4:	2114      	movs	r1, #20
   175d6:	4620      	mov	r0, r4
   175d8:	4b4c      	ldr	r3, [pc, #304]	; (1770c <lv_theme_material_init+0x61c>)
   175da:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   175dc:	4b48      	ldr	r3, [pc, #288]	; (17700 <lv_theme_material_init+0x610>)
   175de:	681c      	ldr	r4, [r3, #0]
   175e0:	342c      	adds	r4, #44	; 0x2c
   175e2:	2000      	movs	r0, #0
   175e4:	4b47      	ldr	r3, [pc, #284]	; (17704 <lv_theme_material_init+0x614>)
   175e6:	4798      	blx	r3
   175e8:	2801      	cmp	r0, #1
   175ea:	f241 82d3 	bls.w	18b94 <lv_theme_material_init+0x1aa4>
   175ee:	2000      	movs	r0, #0
   175f0:	4b45      	ldr	r3, [pc, #276]	; (17708 <lv_theme_material_init+0x618>)
   175f2:	4798      	blx	r3
   175f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   175f8:	0040      	lsls	r0, r0, #1
   175fa:	3050      	adds	r0, #80	; 0x50
   175fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17600:	f281 82e3 	bge.w	18bca <lv_theme_material_init+0x1ada>
   17604:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17606:	2112      	movs	r1, #18
   17608:	4620      	mov	r0, r4
   1760a:	4b40      	ldr	r3, [pc, #256]	; (1770c <lv_theme_material_init+0x61c>)
   1760c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   1760e:	4b3c      	ldr	r3, [pc, #240]	; (17700 <lv_theme_material_init+0x610>)
   17610:	681c      	ldr	r4, [r3, #0]
   17612:	342c      	adds	r4, #44	; 0x2c
   17614:	2000      	movs	r0, #0
   17616:	4b3b      	ldr	r3, [pc, #236]	; (17704 <lv_theme_material_init+0x614>)
   17618:	4798      	blx	r3
   1761a:	2801      	cmp	r0, #1
   1761c:	f241 82e5 	bls.w	18bea <lv_theme_material_init+0x1afa>
   17620:	2000      	movs	r0, #0
   17622:	4b39      	ldr	r3, [pc, #228]	; (17708 <lv_theme_material_init+0x618>)
   17624:	4798      	blx	r3
   17626:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1762a:	0040      	lsls	r0, r0, #1
   1762c:	3050      	adds	r0, #80	; 0x50
   1762e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17632:	f281 82f5 	bge.w	18c20 <lv_theme_material_init+0x1b30>
   17636:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17638:	2113      	movs	r1, #19
   1763a:	4620      	mov	r0, r4
   1763c:	4b33      	ldr	r3, [pc, #204]	; (1770c <lv_theme_material_init+0x61c>)
   1763e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   17640:	4b2f      	ldr	r3, [pc, #188]	; (17700 <lv_theme_material_init+0x610>)
   17642:	681c      	ldr	r4, [r3, #0]
   17644:	342c      	adds	r4, #44	; 0x2c
   17646:	2000      	movs	r0, #0
   17648:	4b2e      	ldr	r3, [pc, #184]	; (17704 <lv_theme_material_init+0x614>)
   1764a:	4798      	blx	r3
   1764c:	2801      	cmp	r0, #1
   1764e:	f241 82f7 	bls.w	18c40 <lv_theme_material_init+0x1b50>
   17652:	2000      	movs	r0, #0
   17654:	4b2c      	ldr	r3, [pc, #176]	; (17708 <lv_theme_material_init+0x618>)
   17656:	4798      	blx	r3
   17658:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1765c:	0040      	lsls	r0, r0, #1
   1765e:	3050      	adds	r0, #80	; 0x50
   17660:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17664:	f281 8307 	bge.w	18c76 <lv_theme_material_init+0x1b86>
   17668:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1766a:	2111      	movs	r1, #17
   1766c:	4620      	mov	r0, r4
   1766e:	4b27      	ldr	r3, [pc, #156]	; (1770c <lv_theme_material_init+0x61c>)
   17670:	4798      	blx	r3
    style_init_reset(&styles->cpicker_bg);
   17672:	4c23      	ldr	r4, [pc, #140]	; (17700 <lv_theme_material_init+0x610>)
   17674:	6820      	ldr	r0, [r4, #0]
   17676:	3038      	adds	r0, #56	; 0x38
   17678:	4b25      	ldr	r3, [pc, #148]	; (17710 <lv_theme_material_init+0x620>)
   1767a:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   1767c:	6824      	ldr	r4, [r4, #0]
   1767e:	3438      	adds	r4, #56	; 0x38
   17680:	2000      	movs	r0, #0
   17682:	4b21      	ldr	r3, [pc, #132]	; (17708 <lv_theme_material_init+0x618>)
   17684:	4798      	blx	r3
   17686:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1768a:	0040      	lsls	r0, r0, #1
   1768c:	3050      	adds	r0, #80	; 0x50
   1768e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17692:	f281 8305 	bge.w	18ca0 <lv_theme_material_init+0x1bb0>
   17696:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   17698:	21c0      	movs	r1, #192	; 0xc0
   1769a:	4620      	mov	r0, r4
   1769c:	4b1b      	ldr	r3, [pc, #108]	; (1770c <lv_theme_material_init+0x61c>)
   1769e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   176a0:	4c17      	ldr	r4, [pc, #92]	; (17700 <lv_theme_material_init+0x610>)
   176a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   176a4:	22ff      	movs	r2, #255	; 0xff
   176a6:	212c      	movs	r1, #44	; 0x2c
   176a8:	3038      	adds	r0, #56	; 0x38
   176aa:	4b1a      	ldr	r3, [pc, #104]	; (17714 <lv_theme_material_init+0x624>)
   176ac:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
   176ae:	6820      	ldr	r0, [r4, #0]
   176b0:	6a23      	ldr	r3, [r4, #32]
   176b2:	f013 0302 	ands.w	r3, r3, #2
   176b6:	bf14      	ite	ne
   176b8:	211d      	movne	r1, #29
   176ba:	2108      	moveq	r1, #8
   176bc:	2b00      	cmp	r3, #0
   176be:	bf15      	itete	ne
   176c0:	243b      	movne	r4, #59	; 0x3b
   176c2:	2412      	moveq	r4, #18
   176c4:	231e      	movne	r3, #30
   176c6:	230b      	moveq	r3, #11
   176c8:	f04f 0200 	mov.w	r2, #0
   176cc:	f363 0204 	bfi	r2, r3, #0, #5
   176d0:	f364 124a 	bfi	r2, r4, #5, #6
   176d4:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   176d8:	2129      	movs	r1, #41	; 0x29
   176da:	3038      	adds	r0, #56	; 0x38
   176dc:	4b07      	ldr	r3, [pc, #28]	; (176fc <lv_theme_material_init+0x60c>)
   176de:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   176e0:	4b07      	ldr	r3, [pc, #28]	; (17700 <lv_theme_material_init+0x610>)
   176e2:	681c      	ldr	r4, [r3, #0]
   176e4:	3438      	adds	r4, #56	; 0x38
   176e6:	2000      	movs	r0, #0
   176e8:	4b07      	ldr	r3, [pc, #28]	; (17708 <lv_theme_material_init+0x618>)
   176ea:	4798      	blx	r3
   176ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   176f0:	0080      	lsls	r0, r0, #2
   176f2:	3050      	adds	r0, #80	; 0x50
   176f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   176f8:	e010      	b.n	1771c <lv_theme_material_init+0x62c>
   176fa:	bf00      	nop
   176fc:	00006fcd 	.word	0x00006fcd
   17700:	20006bd8 	.word	0x20006bd8
   17704:	00011501 	.word	0x00011501
   17708:	000114e5 	.word	0x000114e5
   1770c:	00006e89 	.word	0x00006e89
   17710:	00015009 	.word	0x00015009
   17714:	00007111 	.word	0x00007111
   17718:	00020a68 	.word	0x00020a68
   1771c:	f281 82d0 	bge.w	18cc0 <lv_theme_material_init+0x1bd0>
   17720:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17722:	2114      	movs	r1, #20
   17724:	4620      	mov	r0, r4
   17726:	4eb6      	ldr	r6, [pc, #728]	; (17a00 <lv_theme_material_init+0x910>)
   17728:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1772a:	4cb6      	ldr	r4, [pc, #728]	; (17a04 <lv_theme_material_init+0x914>)
   1772c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1772e:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17732:	2101      	movs	r1, #1
   17734:	3038      	adds	r0, #56	; 0x38
   17736:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
   17738:	6820      	ldr	r0, [r4, #0]
   1773a:	303c      	adds	r0, #60	; 0x3c
   1773c:	4bb2      	ldr	r3, [pc, #712]	; (17a08 <lv_theme_material_init+0x918>)
   1773e:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   17740:	6820      	ldr	r0, [r4, #0]
   17742:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17746:	2101      	movs	r1, #1
   17748:	303c      	adds	r0, #60	; 0x3c
   1774a:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   1774c:	6820      	ldr	r0, [r4, #0]
   1774e:	4faf      	ldr	r7, [pc, #700]	; (17a0c <lv_theme_material_init+0x91c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17750:	883a      	ldrh	r2, [r7, #0]
   17752:	2129      	movs	r1, #41	; 0x29
   17754:	303c      	adds	r0, #60	; 0x3c
   17756:	4dae      	ldr	r5, [pc, #696]	; (17a10 <lv_theme_material_init+0x920>)
   17758:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   1775a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1775c:	22ff      	movs	r2, #255	; 0xff
   1775e:	212c      	movs	r1, #44	; 0x2c
   17760:	303c      	adds	r0, #60	; 0x3c
   17762:	4bac      	ldr	r3, [pc, #688]	; (17a14 <lv_theme_material_init+0x924>)
   17764:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
   17766:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17768:	2202      	movs	r2, #2
   1776a:	2130      	movs	r1, #48	; 0x30
   1776c:	303c      	adds	r0, #60	; 0x3c
   1776e:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
   17770:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17772:	88ba      	ldrh	r2, [r7, #4]
   17774:	2139      	movs	r1, #57	; 0x39
   17776:	303c      	adds	r0, #60	; 0x3c
   17778:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
   1777a:	6820      	ldr	r0, [r4, #0]
   1777c:	89a2      	ldrh	r2, [r4, #12]
   1777e:	f240 2139 	movw	r1, #569	; 0x239
   17782:	303c      	adds	r0, #60	; 0x3c
   17784:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
   17786:	6820      	ldr	r0, [r4, #0]
   17788:	89e2      	ldrh	r2, [r4, #14]
   1778a:	f240 4139 	movw	r1, #1081	; 0x439
   1778e:	303c      	adds	r0, #60	; 0x3c
   17790:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   17792:	6824      	ldr	r4, [r4, #0]
   17794:	343c      	adds	r4, #60	; 0x3c
   17796:	2000      	movs	r0, #0
   17798:	4b9f      	ldr	r3, [pc, #636]	; (17a18 <lv_theme_material_init+0x928>)
   1779a:	4798      	blx	r3
   1779c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   177a0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   177a4:	3050      	adds	r0, #80	; 0x50
   177a6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   177aa:	f281 8299 	bge.w	18ce0 <lv_theme_material_init+0x1bf0>
   177ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   177b0:	2112      	movs	r1, #18
   177b2:	4620      	mov	r0, r4
   177b4:	4b92      	ldr	r3, [pc, #584]	; (17a00 <lv_theme_material_init+0x910>)
   177b6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   177b8:	4b92      	ldr	r3, [pc, #584]	; (17a04 <lv_theme_material_init+0x914>)
   177ba:	681c      	ldr	r4, [r3, #0]
   177bc:	343c      	adds	r4, #60	; 0x3c
   177be:	2000      	movs	r0, #0
   177c0:	4b95      	ldr	r3, [pc, #596]	; (17a18 <lv_theme_material_init+0x928>)
   177c2:	4798      	blx	r3
   177c4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   177c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   177cc:	3050      	adds	r0, #80	; 0x50
   177ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   177d2:	f281 8296 	bge.w	18d02 <lv_theme_material_init+0x1c12>
   177d6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   177d8:	2113      	movs	r1, #19
   177da:	4620      	mov	r0, r4
   177dc:	4b88      	ldr	r3, [pc, #544]	; (17a00 <lv_theme_material_init+0x910>)
   177de:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   177e0:	4b88      	ldr	r3, [pc, #544]	; (17a04 <lv_theme_material_init+0x914>)
   177e2:	681c      	ldr	r4, [r3, #0]
   177e4:	343c      	adds	r4, #60	; 0x3c
   177e6:	2000      	movs	r0, #0
   177e8:	4b8b      	ldr	r3, [pc, #556]	; (17a18 <lv_theme_material_init+0x928>)
   177ea:	4798      	blx	r3
   177ec:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   177f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   177f4:	3050      	adds	r0, #80	; 0x50
   177f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   177fa:	f281 8293 	bge.w	18d24 <lv_theme_material_init+0x1c34>
   177fe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17800:	2110      	movs	r1, #16
   17802:	4620      	mov	r0, r4
   17804:	4b7e      	ldr	r3, [pc, #504]	; (17a00 <lv_theme_material_init+0x910>)
   17806:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   17808:	4b7e      	ldr	r3, [pc, #504]	; (17a04 <lv_theme_material_init+0x914>)
   1780a:	681c      	ldr	r4, [r3, #0]
   1780c:	343c      	adds	r4, #60	; 0x3c
   1780e:	2000      	movs	r0, #0
   17810:	4b81      	ldr	r3, [pc, #516]	; (17a18 <lv_theme_material_init+0x928>)
   17812:	4798      	blx	r3
   17814:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   17818:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1781c:	3050      	adds	r0, #80	; 0x50
   1781e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17822:	f281 8290 	bge.w	18d46 <lv_theme_material_init+0x1c56>
   17826:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17828:	2111      	movs	r1, #17
   1782a:	4620      	mov	r0, r4
   1782c:	4b74      	ldr	r3, [pc, #464]	; (17a00 <lv_theme_material_init+0x910>)
   1782e:	4798      	blx	r3
    style_init_reset(&styles->cb_bg);
   17830:	4c74      	ldr	r4, [pc, #464]	; (17a04 <lv_theme_material_init+0x914>)
   17832:	6820      	ldr	r0, [r4, #0]
   17834:	304c      	adds	r0, #76	; 0x4c
   17836:	4b74      	ldr	r3, [pc, #464]	; (17a08 <lv_theme_material_init+0x918>)
   17838:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   1783a:	6824      	ldr	r4, [r4, #0]
   1783c:	344c      	adds	r4, #76	; 0x4c
   1783e:	2000      	movs	r0, #0
   17840:	4b75      	ldr	r3, [pc, #468]	; (17a18 <lv_theme_material_init+0x928>)
   17842:	4798      	blx	r3
   17844:	3014      	adds	r0, #20
   17846:	0080      	lsls	r0, r0, #2
   17848:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1784c:	f281 828c 	bge.w	18d68 <lv_theme_material_init+0x1c78>
   17850:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   17852:	2101      	movs	r1, #1
   17854:	4620      	mov	r0, r4
   17856:	4b6a      	ldr	r3, [pc, #424]	; (17a00 <lv_theme_material_init+0x910>)
   17858:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1785a:	4b6a      	ldr	r3, [pc, #424]	; (17a04 <lv_theme_material_init+0x914>)
   1785c:	681c      	ldr	r4, [r3, #0]
   1785e:	344c      	adds	r4, #76	; 0x4c
   17860:	2000      	movs	r0, #0
   17862:	4b6d      	ldr	r3, [pc, #436]	; (17a18 <lv_theme_material_init+0x928>)
   17864:	4798      	blx	r3
   17866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1786a:	0040      	lsls	r0, r0, #1
   1786c:	3050      	adds	r0, #80	; 0x50
   1786e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17872:	f281 8287 	bge.w	18d84 <lv_theme_material_init+0x1c94>
   17876:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17878:	2114      	movs	r1, #20
   1787a:	4620      	mov	r0, r4
   1787c:	4b60      	ldr	r3, [pc, #384]	; (17a00 <lv_theme_material_init+0x910>)
   1787e:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
   17880:	4c60      	ldr	r4, [pc, #384]	; (17a04 <lv_theme_material_init+0x914>)
   17882:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
   17884:	89a2      	ldrh	r2, [r4, #12]
   17886:	2149      	movs	r1, #73	; 0x49
   17888:	304c      	adds	r0, #76	; 0x4c
   1788a:	4b61      	ldr	r3, [pc, #388]	; (17a10 <lv_theme_material_init+0x920>)
   1788c:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
   1788e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   17890:	2200      	movs	r2, #0
   17892:	214c      	movs	r1, #76	; 0x4c
   17894:	4408      	add	r0, r1
   17896:	4d5f      	ldr	r5, [pc, #380]	; (17a14 <lv_theme_material_init+0x924>)
   17898:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
   1789a:	6820      	ldr	r0, [r4, #0]
   1789c:	227f      	movs	r2, #127	; 0x7f
   1789e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   178a2:	304c      	adds	r0, #76	; 0x4c
   178a4:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   178a6:	6824      	ldr	r4, [r4, #0]
   178a8:	344c      	adds	r4, #76	; 0x4c
   178aa:	2000      	movs	r0, #0
   178ac:	4b5a      	ldr	r3, [pc, #360]	; (17a18 <lv_theme_material_init+0x928>)
   178ae:	4798      	blx	r3
   178b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   178b4:	3050      	adds	r0, #80	; 0x50
   178b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   178ba:	f281 8273 	bge.w	18da4 <lv_theme_material_init+0x1cb4>
   178be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   178c0:	2140      	movs	r1, #64	; 0x40
   178c2:	4620      	mov	r0, r4
   178c4:	4b4e      	ldr	r3, [pc, #312]	; (17a00 <lv_theme_material_init+0x910>)
   178c6:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   178c8:	4b4e      	ldr	r3, [pc, #312]	; (17a04 <lv_theme_material_init+0x914>)
   178ca:	681c      	ldr	r4, [r3, #0]
   178cc:	344c      	adds	r4, #76	; 0x4c
   178ce:	2000      	movs	r0, #0
   178d0:	4b51      	ldr	r3, [pc, #324]	; (17a18 <lv_theme_material_init+0x928>)
   178d2:	4798      	blx	r3
   178d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   178d8:	0040      	lsls	r0, r0, #1
   178da:	3050      	adds	r0, #80	; 0x50
   178dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   178e0:	f281 826f 	bge.w	18dc2 <lv_theme_material_init+0x1cd2>
   178e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   178e6:	2141      	movs	r1, #65	; 0x41
   178e8:	4620      	mov	r0, r4
   178ea:	4d45      	ldr	r5, [pc, #276]	; (17a00 <lv_theme_material_init+0x910>)
   178ec:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
   178ee:	4c45      	ldr	r4, [pc, #276]	; (17a04 <lv_theme_material_init+0x914>)
   178f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   178f2:	2296      	movs	r2, #150	; 0x96
   178f4:	21b0      	movs	r1, #176	; 0xb0
   178f6:	304c      	adds	r0, #76	; 0x4c
   178f8:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
   178fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   178fc:	224c      	movs	r2, #76	; 0x4c
   178fe:	21b7      	movs	r1, #183	; 0xb7
   17900:	4410      	add	r0, r2
   17902:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
   17904:	6820      	ldr	r0, [r4, #0]
   17906:	3050      	adds	r0, #80	; 0x50
   17908:	4b3f      	ldr	r3, [pc, #252]	; (17a08 <lv_theme_material_init+0x918>)
   1790a:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
   1790c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   1790e:	2200      	movs	r2, #0
   17910:	f44f 7113 	mov.w	r1, #588	; 0x24c
   17914:	3050      	adds	r0, #80	; 0x50
   17916:	4b3f      	ldr	r3, [pc, #252]	; (17a14 <lv_theme_material_init+0x924>)
   17918:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   1791a:	6824      	ldr	r4, [r4, #0]
   1791c:	3450      	adds	r4, #80	; 0x50
   1791e:	2000      	movs	r0, #0
   17920:	4b3d      	ldr	r3, [pc, #244]	; (17a18 <lv_theme_material_init+0x928>)
   17922:	4798      	blx	r3
   17924:	3014      	adds	r0, #20
   17926:	0080      	lsls	r0, r0, #2
   17928:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1792c:	f281 8259 	bge.w	18de2 <lv_theme_material_init+0x1cf2>
   17930:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   17932:	2101      	movs	r1, #1
   17934:	4620      	mov	r0, r4
   17936:	4b32      	ldr	r3, [pc, #200]	; (17a00 <lv_theme_material_init+0x910>)
   17938:	4798      	blx	r3
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
   1793a:	4c32      	ldr	r4, [pc, #200]	; (17a04 <lv_theme_material_init+0x914>)
   1793c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   1793e:	4a37      	ldr	r2, [pc, #220]	; (17a1c <lv_theme_material_init+0x92c>)
   17940:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   17944:	3050      	adds	r0, #80	; 0x50
   17946:	4d36      	ldr	r5, [pc, #216]	; (17a20 <lv_theme_material_init+0x930>)
   17948:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
   1794a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
   1794c:	4b2f      	ldr	r3, [pc, #188]	; (17a0c <lv_theme_material_init+0x91c>)
   1794e:	881a      	ldrh	r2, [r3, #0]
   17950:	f240 1169 	movw	r1, #361	; 0x169
   17954:	3050      	adds	r0, #80	; 0x50
   17956:	4b2e      	ldr	r3, [pc, #184]	; (17a10 <lv_theme_material_init+0x920>)
   17958:	4798      	blx	r3
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
   1795a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1795c:	6922      	ldr	r2, [r4, #16]
   1795e:	f248 118e 	movw	r1, #33166	; 0x818e
   17962:	3050      	adds	r0, #80	; 0x50
   17964:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   17966:	6824      	ldr	r4, [r4, #0]
   17968:	3450      	adds	r4, #80	; 0x50
   1796a:	2000      	movs	r0, #0
   1796c:	4b2a      	ldr	r3, [pc, #168]	; (17a18 <lv_theme_material_init+0x928>)
   1796e:	4798      	blx	r3
   17970:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17974:	3050      	adds	r0, #80	; 0x50
   17976:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1797a:	f281 8240 	bge.w	18dfe <lv_theme_material_init+0x1d0e>
   1797e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17980:	2112      	movs	r1, #18
   17982:	4620      	mov	r0, r4
   17984:	4b1e      	ldr	r3, [pc, #120]	; (17a00 <lv_theme_material_init+0x910>)
   17986:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   17988:	4b1e      	ldr	r3, [pc, #120]	; (17a04 <lv_theme_material_init+0x914>)
   1798a:	681c      	ldr	r4, [r3, #0]
   1798c:	3450      	adds	r4, #80	; 0x50
   1798e:	2000      	movs	r0, #0
   17990:	4b21      	ldr	r3, [pc, #132]	; (17a18 <lv_theme_material_init+0x928>)
   17992:	4798      	blx	r3
   17994:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17998:	3050      	adds	r0, #80	; 0x50
   1799a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1799e:	f281 823d 	bge.w	18e1c <lv_theme_material_init+0x1d2c>
   179a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   179a4:	2113      	movs	r1, #19
   179a6:	4620      	mov	r0, r4
   179a8:	4b15      	ldr	r3, [pc, #84]	; (17a00 <lv_theme_material_init+0x910>)
   179aa:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   179ac:	4b15      	ldr	r3, [pc, #84]	; (17a04 <lv_theme_material_init+0x914>)
   179ae:	681c      	ldr	r4, [r3, #0]
   179b0:	3450      	adds	r4, #80	; 0x50
   179b2:	2000      	movs	r0, #0
   179b4:	4b18      	ldr	r3, [pc, #96]	; (17a18 <lv_theme_material_init+0x928>)
   179b6:	4798      	blx	r3
   179b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   179bc:	3050      	adds	r0, #80	; 0x50
   179be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   179c2:	f281 823a 	bge.w	18e3a <lv_theme_material_init+0x1d4a>
   179c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   179c8:	2110      	movs	r1, #16
   179ca:	4620      	mov	r0, r4
   179cc:	4b0c      	ldr	r3, [pc, #48]	; (17a00 <lv_theme_material_init+0x910>)
   179ce:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   179d0:	4b0c      	ldr	r3, [pc, #48]	; (17a04 <lv_theme_material_init+0x914>)
   179d2:	681c      	ldr	r4, [r3, #0]
   179d4:	3450      	adds	r4, #80	; 0x50
   179d6:	2000      	movs	r0, #0
   179d8:	4b0f      	ldr	r3, [pc, #60]	; (17a18 <lv_theme_material_init+0x928>)
   179da:	4798      	blx	r3
   179dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   179e0:	3050      	adds	r0, #80	; 0x50
   179e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   179e6:	f281 8237 	bge.w	18e58 <lv_theme_material_init+0x1d68>
   179ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   179ec:	2111      	movs	r1, #17
   179ee:	4620      	mov	r0, r4
   179f0:	4d03      	ldr	r5, [pc, #12]	; (17a00 <lv_theme_material_init+0x910>)
   179f2:	47a8      	blx	r5
    style_init_reset(&styles->kb_bg);
   179f4:	4c03      	ldr	r4, [pc, #12]	; (17a04 <lv_theme_material_init+0x914>)
   179f6:	6820      	ldr	r0, [r4, #0]
   179f8:	3068      	adds	r0, #104	; 0x68
   179fa:	4b03      	ldr	r3, [pc, #12]	; (17a08 <lv_theme_material_init+0x918>)
   179fc:	4798      	blx	r3
   179fe:	e011      	b.n	17a24 <lv_theme_material_init+0x934>
   17a00:	00006e89 	.word	0x00006e89
   17a04:	20006bd8 	.word	0x20006bd8
   17a08:	00015009 	.word	0x00015009
   17a0c:	00020a68 	.word	0x00020a68
   17a10:	00006fcd 	.word	0x00006fcd
   17a14:	00007111 	.word	0x00007111
   17a18:	000114e5 	.word	0x000114e5
   17a1c:	00020a70 	.word	0x00020a70
   17a20:	00007241 	.word	0x00007241
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
   17a24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   17a26:	2200      	movs	r2, #0
   17a28:	2101      	movs	r1, #1
   17a2a:	3068      	adds	r0, #104	; 0x68
   17a2c:	47a8      	blx	r5
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   17a2e:	6824      	ldr	r4, [r4, #0]
   17a30:	3468      	adds	r4, #104	; 0x68
   17a32:	2000      	movs	r0, #0
   17a34:	4bb5      	ldr	r3, [pc, #724]	; (17d0c <lv_theme_material_init+0xc1c>)
   17a36:	4798      	blx	r3
   17a38:	3014      	adds	r0, #20
   17a3a:	0080      	lsls	r0, r0, #2
   17a3c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17a40:	f281 8219 	bge.w	18e76 <lv_theme_material_init+0x1d86>
   17a44:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17a46:	2130      	movs	r1, #48	; 0x30
   17a48:	4620      	mov	r0, r4
   17a4a:	4db1      	ldr	r5, [pc, #708]	; (17d10 <lv_theme_material_init+0xc20>)
   17a4c:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
   17a4e:	4cb1      	ldr	r4, [pc, #708]	; (17d14 <lv_theme_material_init+0xc24>)
   17a50:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   17a52:	2202      	movs	r2, #2
   17a54:	2131      	movs	r1, #49	; 0x31
   17a56:	3068      	adds	r0, #104	; 0x68
   17a58:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   17a5a:	6820      	ldr	r0, [r4, #0]
   17a5c:	3068      	adds	r0, #104	; 0x68
   17a5e:	6a23      	ldr	r3, [r4, #32]
   17a60:	f013 0f02 	tst.w	r3, #2
   17a64:	f041 8215 	bne.w	18e92 <lv_theme_material_init+0x1da2>
   17a68:	2300      	movs	r3, #0
   17a6a:	4619      	mov	r1, r3
   17a6c:	461c      	mov	r4, r3
   17a6e:	f04f 0200 	mov.w	r2, #0
   17a72:	f364 0204 	bfi	r2, r4, #0, #5
   17a76:	f361 124a 	bfi	r2, r1, #5, #6
   17a7a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17a7e:	2139      	movs	r1, #57	; 0x39
   17a80:	4da5      	ldr	r5, [pc, #660]	; (17d18 <lv_theme_material_init+0xc28>)
   17a82:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
   17a84:	4ca3      	ldr	r4, [pc, #652]	; (17d14 <lv_theme_material_init+0xc24>)
   17a86:	6820      	ldr	r0, [r4, #0]
   17a88:	89e2      	ldrh	r2, [r4, #14]
   17a8a:	f240 4139 	movw	r1, #1081	; 0x439
   17a8e:	3068      	adds	r0, #104	; 0x68
   17a90:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   17a92:	6824      	ldr	r4, [r4, #0]
   17a94:	3468      	adds	r4, #104	; 0x68
   17a96:	2000      	movs	r0, #0
   17a98:	4b9c      	ldr	r3, [pc, #624]	; (17d0c <lv_theme_material_init+0xc1c>)
   17a9a:	4798      	blx	r3
   17a9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17aa0:	3050      	adds	r0, #80	; 0x50
   17aa2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17aa6:	f281 81f9 	bge.w	18e9c <lv_theme_material_init+0x1dac>
   17aaa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17aac:	2112      	movs	r1, #18
   17aae:	4620      	mov	r0, r4
   17ab0:	4b97      	ldr	r3, [pc, #604]	; (17d10 <lv_theme_material_init+0xc20>)
   17ab2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   17ab4:	4b97      	ldr	r3, [pc, #604]	; (17d14 <lv_theme_material_init+0xc24>)
   17ab6:	681c      	ldr	r4, [r3, #0]
   17ab8:	3468      	adds	r4, #104	; 0x68
   17aba:	2000      	movs	r0, #0
   17abc:	4b93      	ldr	r3, [pc, #588]	; (17d0c <lv_theme_material_init+0xc1c>)
   17abe:	4798      	blx	r3
   17ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17ac4:	3050      	adds	r0, #80	; 0x50
   17ac6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17aca:	f281 81f6 	bge.w	18eba <lv_theme_material_init+0x1dca>
   17ace:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17ad0:	2113      	movs	r1, #19
   17ad2:	4620      	mov	r0, r4
   17ad4:	4b8e      	ldr	r3, [pc, #568]	; (17d10 <lv_theme_material_init+0xc20>)
   17ad6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   17ad8:	4b8e      	ldr	r3, [pc, #568]	; (17d14 <lv_theme_material_init+0xc24>)
   17ada:	681c      	ldr	r4, [r3, #0]
   17adc:	3468      	adds	r4, #104	; 0x68
   17ade:	2000      	movs	r0, #0
   17ae0:	4b8a      	ldr	r3, [pc, #552]	; (17d0c <lv_theme_material_init+0xc1c>)
   17ae2:	4798      	blx	r3
   17ae4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17ae8:	3050      	adds	r0, #80	; 0x50
   17aea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17aee:	f281 81f3 	bge.w	18ed8 <lv_theme_material_init+0x1de8>
   17af2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17af4:	2110      	movs	r1, #16
   17af6:	4620      	mov	r0, r4
   17af8:	4b85      	ldr	r3, [pc, #532]	; (17d10 <lv_theme_material_init+0xc20>)
   17afa:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   17afc:	4b85      	ldr	r3, [pc, #532]	; (17d14 <lv_theme_material_init+0xc24>)
   17afe:	681c      	ldr	r4, [r3, #0]
   17b00:	3468      	adds	r4, #104	; 0x68
   17b02:	2000      	movs	r0, #0
   17b04:	4b81      	ldr	r3, [pc, #516]	; (17d0c <lv_theme_material_init+0xc1c>)
   17b06:	4798      	blx	r3
   17b08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17b0c:	3050      	adds	r0, #80	; 0x50
   17b0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b12:	f281 81f0 	bge.w	18ef6 <lv_theme_material_init+0x1e06>
   17b16:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17b18:	2111      	movs	r1, #17
   17b1a:	4620      	mov	r0, r4
   17b1c:	4b7c      	ldr	r3, [pc, #496]	; (17d10 <lv_theme_material_init+0xc20>)
   17b1e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   17b20:	4b7c      	ldr	r3, [pc, #496]	; (17d14 <lv_theme_material_init+0xc24>)
   17b22:	681c      	ldr	r4, [r3, #0]
   17b24:	3468      	adds	r4, #104	; 0x68
   17b26:	2000      	movs	r0, #0
   17b28:	4b78      	ldr	r3, [pc, #480]	; (17d0c <lv_theme_material_init+0xc1c>)
   17b2a:	4798      	blx	r3
   17b2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17b30:	3050      	adds	r0, #80	; 0x50
   17b32:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b36:	f281 81ed 	bge.w	18f14 <lv_theme_material_init+0x1e24>
   17b3a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17b3c:	2114      	movs	r1, #20
   17b3e:	4620      	mov	r0, r4
   17b40:	4b73      	ldr	r3, [pc, #460]	; (17d10 <lv_theme_material_init+0xc20>)
   17b42:	4798      	blx	r3
    style_init_reset(&styles->mbox_bg);
   17b44:	4c73      	ldr	r4, [pc, #460]	; (17d14 <lv_theme_material_init+0xc24>)
   17b46:	6820      	ldr	r0, [r4, #0]
   17b48:	307c      	adds	r0, #124	; 0x7c
   17b4a:	4b74      	ldr	r3, [pc, #464]	; (17d1c <lv_theme_material_init+0xc2c>)
   17b4c:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   17b4e:	6824      	ldr	r4, [r4, #0]
   17b50:	347c      	adds	r4, #124	; 0x7c
   17b52:	2000      	movs	r0, #0
   17b54:	4b6d      	ldr	r3, [pc, #436]	; (17d0c <lv_theme_material_init+0xc1c>)
   17b56:	4798      	blx	r3
   17b58:	2332      	movs	r3, #50	; 0x32
   17b5a:	fb03 f000 	mul.w	r0, r3, r0
   17b5e:	3050      	adds	r0, #80	; 0x50
   17b60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17b64:	f281 81e5 	bge.w	18f32 <lv_theme_material_init+0x1e42>
   17b68:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   17b6a:	2150      	movs	r1, #80	; 0x50
   17b6c:	4620      	mov	r0, r4
   17b6e:	4b68      	ldr	r3, [pc, #416]	; (17d10 <lv_theme_material_init+0xc20>)
   17b70:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
   17b72:	4b68      	ldr	r3, [pc, #416]	; (17d14 <lv_theme_material_init+0xc24>)
   17b74:	6818      	ldr	r0, [r3, #0]
   17b76:	6a1b      	ldr	r3, [r3, #32]
   17b78:	f013 0302 	ands.w	r3, r3, #2
   17b7c:	bf0c      	ite	eq
   17b7e:	2126      	moveq	r1, #38	; 0x26
   17b80:	2130      	movne	r1, #48	; 0x30
   17b82:	2b00      	cmp	r3, #0
   17b84:	bf0c      	ite	eq
   17b86:	2313      	moveq	r3, #19
   17b88:	2318      	movne	r3, #24
   17b8a:	f04f 0200 	mov.w	r2, #0
   17b8e:	f363 0204 	bfi	r2, r3, #0, #5
   17b92:	f361 124a 	bfi	r2, r1, #5, #6
   17b96:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
   17b9a:	2159      	movs	r1, #89	; 0x59
   17b9c:	307c      	adds	r0, #124	; 0x7c
   17b9e:	4b5e      	ldr	r3, [pc, #376]	; (17d18 <lv_theme_material_init+0xc28>)
   17ba0:	4798      	blx	r3
    style_init_reset(&styles->sb);
   17ba2:	4c5c      	ldr	r4, [pc, #368]	; (17d14 <lv_theme_material_init+0xc24>)
   17ba4:	6820      	ldr	r0, [r4, #0]
   17ba6:	3080      	adds	r0, #128	; 0x80
   17ba8:	4b5c      	ldr	r3, [pc, #368]	; (17d1c <lv_theme_material_init+0xc2c>)
   17baa:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
   17bac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17bae:	22ff      	movs	r2, #255	; 0xff
   17bb0:	212c      	movs	r1, #44	; 0x2c
   17bb2:	3080      	adds	r0, #128	; 0x80
   17bb4:	4b5a      	ldr	r3, [pc, #360]	; (17d20 <lv_theme_material_init+0xc30>)
   17bb6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
   17bb8:	6820      	ldr	r0, [r4, #0]
   17bba:	6a23      	ldr	r3, [r4, #32]
   17bbc:	f013 0302 	ands.w	r3, r3, #2
   17bc0:	bf14      	ite	ne
   17bc2:	2119      	movne	r1, #25
   17bc4:	210e      	moveq	r1, #14
   17bc6:	2b00      	cmp	r3, #0
   17bc8:	bf15      	itete	ne
   17bca:	2433      	movne	r4, #51	; 0x33
   17bcc:	241f      	moveq	r4, #31
   17bce:	231a      	movne	r3, #26
   17bd0:	2310      	moveq	r3, #16
   17bd2:	f04f 0200 	mov.w	r2, #0
   17bd6:	f363 0204 	bfi	r2, r3, #0, #5
   17bda:	f364 124a 	bfi	r2, r4, #5, #6
   17bde:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17be2:	2129      	movs	r1, #41	; 0x29
   17be4:	3080      	adds	r0, #128	; 0x80
   17be6:	4b4c      	ldr	r3, [pc, #304]	; (17d18 <lv_theme_material_init+0xc28>)
   17be8:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   17bea:	4c4a      	ldr	r4, [pc, #296]	; (17d14 <lv_theme_material_init+0xc24>)
   17bec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   17bee:	f647 72ff 	movw	r2, #32767	; 0x7fff
   17bf2:	2101      	movs	r1, #1
   17bf4:	3080      	adds	r0, #128	; 0x80
   17bf6:	4b46      	ldr	r3, [pc, #280]	; (17d10 <lv_theme_material_init+0xc20>)
   17bf8:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   17bfa:	6824      	ldr	r4, [r4, #0]
   17bfc:	3480      	adds	r4, #128	; 0x80
   17bfe:	2000      	movs	r0, #0
   17c00:	4b42      	ldr	r3, [pc, #264]	; (17d0c <lv_theme_material_init+0xc1c>)
   17c02:	4798      	blx	r3
   17c04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17c08:	3050      	adds	r0, #80	; 0x50
   17c0a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17c0e:	f281 81a0 	bge.w	18f52 <lv_theme_material_init+0x1e62>
   17c12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   17c14:	2103      	movs	r1, #3
   17c16:	4620      	mov	r0, r4
   17c18:	4b3d      	ldr	r3, [pc, #244]	; (17d10 <lv_theme_material_init+0xc20>)
   17c1a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   17c1c:	4b3d      	ldr	r3, [pc, #244]	; (17d14 <lv_theme_material_init+0xc24>)
   17c1e:	681c      	ldr	r4, [r3, #0]
   17c20:	3480      	adds	r4, #128	; 0x80
   17c22:	2000      	movs	r0, #0
   17c24:	4b39      	ldr	r3, [pc, #228]	; (17d0c <lv_theme_material_init+0xc1c>)
   17c26:	4798      	blx	r3
   17c28:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17c2c:	3050      	adds	r0, #80	; 0x50
   17c2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17c32:	f281 819d 	bge.w	18f70 <lv_theme_material_init+0x1e80>
   17c36:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17c38:	2113      	movs	r1, #19
   17c3a:	4620      	mov	r0, r4
   17c3c:	4b34      	ldr	r3, [pc, #208]	; (17d10 <lv_theme_material_init+0xc20>)
   17c3e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   17c40:	4b34      	ldr	r3, [pc, #208]	; (17d14 <lv_theme_material_init+0xc24>)
   17c42:	681c      	ldr	r4, [r3, #0]
   17c44:	3480      	adds	r4, #128	; 0x80
   17c46:	2000      	movs	r0, #0
   17c48:	4b30      	ldr	r3, [pc, #192]	; (17d0c <lv_theme_material_init+0xc1c>)
   17c4a:	4798      	blx	r3
   17c4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17c50:	3050      	adds	r0, #80	; 0x50
   17c52:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17c56:	f281 819a 	bge.w	18f8e <lv_theme_material_init+0x1e9e>
   17c5a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17c5c:	2111      	movs	r1, #17
   17c5e:	4620      	mov	r0, r4
   17c60:	4b2b      	ldr	r3, [pc, #172]	; (17d10 <lv_theme_material_init+0xc20>)
   17c62:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
   17c64:	4c2b      	ldr	r4, [pc, #172]	; (17d14 <lv_theme_material_init+0xc24>)
   17c66:	6820      	ldr	r0, [r4, #0]
   17c68:	3084      	adds	r0, #132	; 0x84
   17c6a:	4d2c      	ldr	r5, [pc, #176]	; (17d1c <lv_theme_material_init+0xc2c>)
   17c6c:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
   17c6e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17c70:	22ff      	movs	r2, #255	; 0xff
   17c72:	212c      	movs	r1, #44	; 0x2c
   17c74:	3084      	adds	r0, #132	; 0x84
   17c76:	4b2a      	ldr	r3, [pc, #168]	; (17d20 <lv_theme_material_init+0xc30>)
   17c78:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
   17c7a:	6820      	ldr	r0, [r4, #0]
   17c7c:	2311      	movs	r3, #17
   17c7e:	f04f 0200 	mov.w	r2, #0
   17c82:	f363 0204 	bfi	r2, r3, #0, #5
   17c86:	2122      	movs	r1, #34	; 0x22
   17c88:	f361 124a 	bfi	r2, r1, #5, #6
   17c8c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17c90:	2129      	movs	r1, #41	; 0x29
   17c92:	3084      	adds	r0, #132	; 0x84
   17c94:	4b20      	ldr	r3, [pc, #128]	; (17d18 <lv_theme_material_init+0xc28>)
   17c96:	4798      	blx	r3
    style_init_reset(&styles->ta_cursor);
   17c98:	6820      	ldr	r0, [r4, #0]
   17c9a:	30b4      	adds	r0, #180	; 0xb4
   17c9c:	47a8      	blx	r5
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
   17c9e:	6820      	ldr	r0, [r4, #0]
   17ca0:	6a23      	ldr	r3, [r4, #32]
   17ca2:	f013 0302 	ands.w	r3, r3, #2
   17ca6:	bf14      	ite	ne
   17ca8:	2106      	movne	r1, #6
   17caa:	2114      	moveq	r1, #20
   17cac:	2b00      	cmp	r3, #0
   17cae:	bf15      	itete	ne
   17cb0:	2410      	movne	r4, #16
   17cb2:	242a      	moveq	r4, #42	; 0x2a
   17cb4:	2309      	movne	r3, #9
   17cb6:	2315      	moveq	r3, #21
   17cb8:	f04f 0200 	mov.w	r2, #0
   17cbc:	f363 0204 	bfi	r2, r3, #0, #5
   17cc0:	f364 124a 	bfi	r2, r4, #5, #6
   17cc4:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17cc8:	2139      	movs	r1, #57	; 0x39
   17cca:	30b4      	adds	r0, #180	; 0xb4
   17ccc:	4b12      	ldr	r3, [pc, #72]	; (17d18 <lv_theme_material_init+0xc28>)
   17cce:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   17cd0:	4b10      	ldr	r3, [pc, #64]	; (17d14 <lv_theme_material_init+0xc24>)
   17cd2:	681c      	ldr	r4, [r3, #0]
   17cd4:	34b4      	adds	r4, #180	; 0xb4
   17cd6:	2000      	movs	r0, #0
   17cd8:	4b0c      	ldr	r3, [pc, #48]	; (17d0c <lv_theme_material_init+0xc1c>)
   17cda:	4798      	blx	r3
   17cdc:	3028      	adds	r0, #40	; 0x28
   17cde:	0040      	lsls	r0, r0, #1
   17ce0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17ce4:	f281 8162 	bge.w	18fac <lv_theme_material_init+0x1ebc>
   17ce8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   17cea:	2130      	movs	r1, #48	; 0x30
   17cec:	4620      	mov	r0, r4
   17cee:	4b08      	ldr	r3, [pc, #32]	; (17d10 <lv_theme_material_init+0xc20>)
   17cf0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   17cf2:	4b08      	ldr	r3, [pc, #32]	; (17d14 <lv_theme_material_init+0xc24>)
   17cf4:	681c      	ldr	r4, [r3, #0]
   17cf6:	34b4      	adds	r4, #180	; 0xb4
   17cf8:	2000      	movs	r0, #0
   17cfa:	4b04      	ldr	r3, [pc, #16]	; (17d0c <lv_theme_material_init+0xc1c>)
   17cfc:	4798      	blx	r3
   17cfe:	3050      	adds	r0, #80	; 0x50
   17d00:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17d04:	f281 8164 	bge.w	18fd0 <lv_theme_material_init+0x1ee0>
   17d08:	2201      	movs	r2, #1
   17d0a:	e00b      	b.n	17d24 <lv_theme_material_init+0xc34>
   17d0c:	000114e5 	.word	0x000114e5
   17d10:	00006e89 	.word	0x00006e89
   17d14:	20006bd8 	.word	0x20006bd8
   17d18:	00006fcd 	.word	0x00006fcd
   17d1c:	00015009 	.word	0x00015009
   17d20:	00007111 	.word	0x00007111
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17d24:	2112      	movs	r1, #18
   17d26:	4620      	mov	r0, r4
   17d28:	4dba      	ldr	r5, [pc, #744]	; (18014 <lv_theme_material_init+0xf24>)
   17d2a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
   17d2c:	4cba      	ldr	r4, [pc, #744]	; (18018 <lv_theme_material_init+0xf28>)
   17d2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   17d30:	2204      	movs	r2, #4
   17d32:	2131      	movs	r1, #49	; 0x31
   17d34:	30b4      	adds	r0, #180	; 0xb4
   17d36:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
   17d38:	6820      	ldr	r0, [r4, #0]
   17d3a:	30b8      	adds	r0, #184	; 0xb8
   17d3c:	4bb7      	ldr	r3, [pc, #732]	; (1801c <lv_theme_material_init+0xf2c>)
   17d3e:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   17d40:	6820      	ldr	r0, [r4, #0]
   17d42:	30b8      	adds	r0, #184	; 0xb8
   17d44:	6a23      	ldr	r3, [r4, #32]
   17d46:	f013 0f02 	tst.w	r3, #2
   17d4a:	f041 814e 	bne.w	18fea <lv_theme_material_init+0x1efa>
   17d4e:	2314      	movs	r3, #20
   17d50:	212b      	movs	r1, #43	; 0x2b
   17d52:	2417      	movs	r4, #23
   17d54:	f04f 0200 	mov.w	r2, #0
   17d58:	f364 0204 	bfi	r2, r4, #0, #5
   17d5c:	f361 124a 	bfi	r2, r1, #5, #6
   17d60:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17d64:	f248 0189 	movw	r1, #32905	; 0x8089
   17d68:	4dad      	ldr	r5, [pc, #692]	; (18020 <lv_theme_material_init+0xf30>)
   17d6a:	47a8      	blx	r5
    style_init_reset(&styles->spinbox_cursor);
   17d6c:	4caa      	ldr	r4, [pc, #680]	; (18018 <lv_theme_material_init+0xf28>)
   17d6e:	6820      	ldr	r0, [r4, #0]
   17d70:	3098      	adds	r0, #152	; 0x98
   17d72:	4baa      	ldr	r3, [pc, #680]	; (1801c <lv_theme_material_init+0xf2c>)
   17d74:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
   17d76:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17d78:	22ff      	movs	r2, #255	; 0xff
   17d7a:	212c      	movs	r1, #44	; 0x2c
   17d7c:	3098      	adds	r0, #152	; 0x98
   17d7e:	4ba9      	ldr	r3, [pc, #676]	; (18024 <lv_theme_material_init+0xf34>)
   17d80:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
   17d82:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17d84:	89a2      	ldrh	r2, [r4, #12]
   17d86:	2129      	movs	r1, #41	; 0x29
   17d88:	3098      	adds	r0, #152	; 0x98
   17d8a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   17d8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17d8e:	4ba6      	ldr	r3, [pc, #664]	; (18028 <lv_theme_material_init+0xf38>)
   17d90:	881a      	ldrh	r2, [r3, #0]
   17d92:	f248 0189 	movw	r1, #32905	; 0x8089
   17d96:	3098      	adds	r0, #152	; 0x98
   17d98:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   17d9a:	6824      	ldr	r4, [r4, #0]
   17d9c:	3498      	adds	r4, #152	; 0x98
   17d9e:	2000      	movs	r0, #0
   17da0:	4ba2      	ldr	r3, [pc, #648]	; (1802c <lv_theme_material_init+0xf3c>)
   17da2:	4798      	blx	r3
   17da4:	2364      	movs	r3, #100	; 0x64
   17da6:	fb03 f000 	mul.w	r0, r3, r0
   17daa:	3050      	adds	r0, #80	; 0x50
   17dac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17db0:	f281 8120 	bge.w	18ff4 <lv_theme_material_init+0x1f04>
   17db4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17db6:	2110      	movs	r1, #16
   17db8:	4620      	mov	r0, r4
   17dba:	4b96      	ldr	r3, [pc, #600]	; (18014 <lv_theme_material_init+0xf24>)
   17dbc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   17dbe:	4b96      	ldr	r3, [pc, #600]	; (18018 <lv_theme_material_init+0xf28>)
   17dc0:	681c      	ldr	r4, [r3, #0]
   17dc2:	3498      	adds	r4, #152	; 0x98
   17dc4:	2000      	movs	r0, #0
   17dc6:	4b99      	ldr	r3, [pc, #612]	; (1802c <lv_theme_material_init+0xf3c>)
   17dc8:	4798      	blx	r3
   17dca:	2364      	movs	r3, #100	; 0x64
   17dcc:	fb03 f000 	mul.w	r0, r3, r0
   17dd0:	3050      	adds	r0, #80	; 0x50
   17dd2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   17dd6:	f281 811d 	bge.w	19014 <lv_theme_material_init+0x1f24>
   17dda:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17ddc:	2111      	movs	r1, #17
   17dde:	4620      	mov	r0, r4
   17de0:	4d8c      	ldr	r5, [pc, #560]	; (18014 <lv_theme_material_init+0xf24>)
   17de2:	47a8      	blx	r5
    style_init_reset(&styles->list_bg);
   17de4:	4c8c      	ldr	r4, [pc, #560]	; (18018 <lv_theme_material_init+0xf28>)
   17de6:	6820      	ldr	r0, [r4, #0]
   17de8:	3074      	adds	r0, #116	; 0x74
   17dea:	4e8c      	ldr	r6, [pc, #560]	; (1801c <lv_theme_material_init+0xf2c>)
   17dec:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
   17dee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   17df0:	2201      	movs	r2, #1
   17df2:	2102      	movs	r1, #2
   17df4:	3074      	adds	r0, #116	; 0x74
   17df6:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17df8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   17dfa:	2200      	movs	r2, #0
   17dfc:	2112      	movs	r1, #18
   17dfe:	3074      	adds	r0, #116	; 0x74
   17e00:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17e02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   17e04:	2200      	movs	r2, #0
   17e06:	2113      	movs	r1, #19
   17e08:	3074      	adds	r0, #116	; 0x74
   17e0a:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17e0c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   17e0e:	2200      	movs	r2, #0
   17e10:	2110      	movs	r1, #16
   17e12:	3074      	adds	r0, #116	; 0x74
   17e14:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17e16:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   17e18:	2200      	movs	r2, #0
   17e1a:	2111      	movs	r1, #17
   17e1c:	3074      	adds	r0, #116	; 0x74
   17e1e:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
   17e20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   17e22:	2200      	movs	r2, #0
   17e24:	2114      	movs	r1, #20
   17e26:	3074      	adds	r0, #116	; 0x74
   17e28:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
   17e2a:	6820      	ldr	r0, [r4, #0]
   17e2c:	3078      	adds	r0, #120	; 0x78
   17e2e:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
   17e30:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   17e32:	22ff      	movs	r2, #255	; 0xff
   17e34:	212c      	movs	r1, #44	; 0x2c
   17e36:	3078      	adds	r0, #120	; 0x78
   17e38:	4b7a      	ldr	r3, [pc, #488]	; (18024 <lv_theme_material_init+0xf34>)
   17e3a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   17e3c:	6820      	ldr	r0, [r4, #0]
   17e3e:	3078      	adds	r0, #120	; 0x78
   17e40:	6a23      	ldr	r3, [r4, #32]
   17e42:	f013 0f02 	tst.w	r3, #2
   17e46:	f041 80f5 	bne.w	19034 <lv_theme_material_init+0x1f44>
   17e4a:	230b      	movs	r3, #11
   17e4c:	2118      	movs	r1, #24
   17e4e:	240e      	movs	r4, #14
   17e50:	f04f 0200 	mov.w	r2, #0
   17e54:	f364 0204 	bfi	r2, r4, #0, #5
   17e58:	f361 124a 	bfi	r2, r1, #5, #6
   17e5c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   17e60:	2129      	movs	r1, #41	; 0x29
   17e62:	4b6f      	ldr	r3, [pc, #444]	; (18020 <lv_theme_material_init+0xf30>)
   17e64:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   17e66:	4b6c      	ldr	r3, [pc, #432]	; (18018 <lv_theme_material_init+0xf28>)
   17e68:	6818      	ldr	r0, [r3, #0]
   17e6a:	3078      	adds	r0, #120	; 0x78
   17e6c:	6a1b      	ldr	r3, [r3, #32]
   17e6e:	f013 0f02 	tst.w	r3, #2
   17e72:	f041 80e4 	bne.w	1903e <lv_theme_material_init+0x1f4e>
   17e76:	2309      	movs	r3, #9
   17e78:	2113      	movs	r1, #19
   17e7a:	240a      	movs	r4, #10
   17e7c:	f04f 0200 	mov.w	r2, #0
   17e80:	f364 0204 	bfi	r2, r4, #0, #5
   17e84:	f361 124a 	bfi	r2, r1, #5, #6
   17e88:	f363 22cf 	bfi	r2, r3, #11, #5
   17e8c:	f241 0129 	movw	r1, #4137	; 0x1029
   17e90:	4b63      	ldr	r3, [pc, #396]	; (18020 <lv_theme_material_init+0xf30>)
   17e92:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   17e94:	4b60      	ldr	r3, [pc, #384]	; (18018 <lv_theme_material_init+0xf28>)
   17e96:	6818      	ldr	r0, [r3, #0]
   17e98:	3078      	adds	r0, #120	; 0x78
   17e9a:	6a1b      	ldr	r3, [r3, #32]
   17e9c:	f013 0f02 	tst.w	r3, #2
   17ea0:	f041 80d2 	bne.w	19048 <lv_theme_material_init+0x1f58>
   17ea4:	230b      	movs	r3, #11
   17ea6:	2118      	movs	r1, #24
   17ea8:	240e      	movs	r4, #14
   17eaa:	f04f 0200 	mov.w	r2, #0
   17eae:	f364 0204 	bfi	r2, r4, #0, #5
   17eb2:	f361 124a 	bfi	r2, r1, #5, #6
   17eb6:	f363 22cf 	bfi	r2, r3, #11, #5
   17eba:	f242 0129 	movw	r1, #8233	; 0x2029
   17ebe:	4d58      	ldr	r5, [pc, #352]	; (18020 <lv_theme_material_init+0xf30>)
   17ec0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
   17ec2:	4c55      	ldr	r4, [pc, #340]	; (18018 <lv_theme_material_init+0xf28>)
   17ec4:	6820      	ldr	r0, [r4, #0]
   17ec6:	89a2      	ldrh	r2, [r4, #12]
   17ec8:	f240 1129 	movw	r1, #297	; 0x129
   17ecc:	3078      	adds	r0, #120	; 0x78
   17ece:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
   17ed0:	6826      	ldr	r6, [r4, #0]
   17ed2:	3678      	adds	r6, #120	; 0x78
   17ed4:	2133      	movs	r1, #51	; 0x33
   17ed6:	89a0      	ldrh	r0, [r4, #12]
   17ed8:	4b55      	ldr	r3, [pc, #340]	; (18030 <lv_theme_material_init+0xf40>)
   17eda:	4798      	blx	r3
   17edc:	4602      	mov	r2, r0
   17ede:	f241 1129 	movw	r1, #4393	; 0x1129
   17ee2:	4630      	mov	r0, r6
   17ee4:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   17ee6:	6820      	ldr	r0, [r4, #0]
   17ee8:	3078      	adds	r0, #120	; 0x78
   17eea:	6a23      	ldr	r3, [r4, #32]
   17eec:	f013 0f02 	tst.w	r3, #2
   17ef0:	f041 80af 	bne.w	19052 <lv_theme_material_init+0x1f62>
   17ef4:	231f      	movs	r3, #31
   17ef6:	213f      	movs	r1, #63	; 0x3f
   17ef8:	461c      	mov	r4, r3
   17efa:	f04f 0200 	mov.w	r2, #0
   17efe:	f364 0204 	bfi	r2, r4, #0, #5
   17f02:	f361 124a 	bfi	r2, r1, #5, #6
   17f06:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   17f0a:	f248 0189 	movw	r1, #32905	; 0x8089
   17f0e:	4d44      	ldr	r5, [pc, #272]	; (18020 <lv_theme_material_init+0xf30>)
   17f10:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   17f12:	4c41      	ldr	r4, [pc, #260]	; (18018 <lv_theme_material_init+0xf28>)
   17f14:	6820      	ldr	r0, [r4, #0]
   17f16:	f04f 32ff 	mov.w	r2, #4294967295
   17f1a:	f248 1189 	movw	r1, #33161	; 0x8189
   17f1e:	3078      	adds	r0, #120	; 0x78
   17f20:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   17f22:	6820      	ldr	r0, [r4, #0]
   17f24:	6a23      	ldr	r3, [r4, #32]
   17f26:	f013 0302 	ands.w	r3, r3, #2
   17f2a:	bf14      	ite	ne
   17f2c:	212a      	movne	r1, #42	; 0x2a
   17f2e:	2126      	moveq	r1, #38	; 0x26
   17f30:	2b00      	cmp	r3, #0
   17f32:	bf14      	ite	ne
   17f34:	2315      	movne	r3, #21
   17f36:	2313      	moveq	r3, #19
   17f38:	f04f 0200 	mov.w	r2, #0
   17f3c:	f363 0204 	bfi	r2, r3, #0, #5
   17f40:	f361 124a 	bfi	r2, r1, #5, #6
   17f44:	f363 22cf 	bfi	r2, r3, #11, #5
   17f48:	f24a 0189 	movw	r1, #41097	; 0xa089
   17f4c:	3078      	adds	r0, #120	; 0x78
   17f4e:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   17f50:	6820      	ldr	r0, [r4, #0]
   17f52:	3078      	adds	r0, #120	; 0x78
   17f54:	6a23      	ldr	r3, [r4, #32]
   17f56:	f013 0f02 	tst.w	r3, #2
   17f5a:	f041 807f 	bne.w	1905c <lv_theme_material_init+0x1f6c>
   17f5e:	231f      	movs	r3, #31
   17f60:	213f      	movs	r1, #63	; 0x3f
   17f62:	461c      	mov	r4, r3
   17f64:	f04f 0200 	mov.w	r2, #0
   17f68:	f364 0204 	bfi	r2, r4, #0, #5
   17f6c:	f361 124a 	bfi	r2, r1, #5, #6
   17f70:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   17f74:	f248 01a9 	movw	r1, #32937	; 0x80a9
   17f78:	4d29      	ldr	r5, [pc, #164]	; (18020 <lv_theme_material_init+0xf30>)
   17f7a:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
   17f7c:	4c26      	ldr	r4, [pc, #152]	; (18018 <lv_theme_material_init+0xf28>)
   17f7e:	6820      	ldr	r0, [r4, #0]
   17f80:	f04f 32ff 	mov.w	r2, #4294967295
   17f84:	f248 11a9 	movw	r1, #33193	; 0x81a9
   17f88:	3078      	adds	r0, #120	; 0x78
   17f8a:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
   17f8c:	6820      	ldr	r0, [r4, #0]
   17f8e:	6a23      	ldr	r3, [r4, #32]
   17f90:	f013 0302 	ands.w	r3, r3, #2
   17f94:	bf14      	ite	ne
   17f96:	212a      	movne	r1, #42	; 0x2a
   17f98:	2126      	moveq	r1, #38	; 0x26
   17f9a:	2b00      	cmp	r3, #0
   17f9c:	bf14      	ite	ne
   17f9e:	2315      	movne	r3, #21
   17fa0:	2313      	moveq	r3, #19
   17fa2:	f04f 0200 	mov.w	r2, #0
   17fa6:	f363 0204 	bfi	r2, r3, #0, #5
   17faa:	f361 124a 	bfi	r2, r1, #5, #6
   17fae:	f363 22cf 	bfi	r2, r3, #11, #5
   17fb2:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
   17fb6:	3078      	adds	r0, #120	; 0x78
   17fb8:	47a8      	blx	r5
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   17fba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   17fbc:	2201      	movs	r2, #1
   17fbe:	2131      	movs	r1, #49	; 0x31
   17fc0:	3078      	adds	r0, #120	; 0x78
   17fc2:	4b14      	ldr	r3, [pc, #80]	; (18014 <lv_theme_material_init+0xf24>)
   17fc4:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   17fc6:	6820      	ldr	r0, [r4, #0]
   17fc8:	6a23      	ldr	r3, [r4, #32]
   17fca:	f013 0302 	ands.w	r3, r3, #2
   17fce:	bf14      	ite	ne
   17fd0:	211a      	movne	r1, #26
   17fd2:	2110      	moveq	r1, #16
   17fd4:	2b00      	cmp	r3, #0
   17fd6:	bf15      	itete	ne
   17fd8:	2437      	movne	r4, #55	; 0x37
   17fda:	2422      	moveq	r4, #34	; 0x22
   17fdc:	231c      	movne	r3, #28
   17fde:	2312      	moveq	r3, #18
   17fe0:	f04f 0200 	mov.w	r2, #0
   17fe4:	f363 0204 	bfi	r2, r3, #0, #5
   17fe8:	f364 124a 	bfi	r2, r4, #5, #6
   17fec:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   17ff0:	2139      	movs	r1, #57	; 0x39
   17ff2:	3078      	adds	r0, #120	; 0x78
   17ff4:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
   17ff6:	4c08      	ldr	r4, [pc, #32]	; (18018 <lv_theme_material_init+0xf28>)
   17ff8:	6820      	ldr	r0, [r4, #0]
   17ffa:	89a2      	ldrh	r2, [r4, #12]
   17ffc:	f240 2139 	movw	r1, #569	; 0x239
   18000:	3078      	adds	r0, #120	; 0x78
   18002:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
   18004:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   18006:	2201      	movs	r2, #1
   18008:	2130      	movs	r1, #48	; 0x30
   1800a:	3078      	adds	r0, #120	; 0x78
   1800c:	4b01      	ldr	r3, [pc, #4]	; (18014 <lv_theme_material_init+0xf24>)
   1800e:	4798      	blx	r3
   18010:	e010      	b.n	18034 <lv_theme_material_init+0xf44>
   18012:	bf00      	nop
   18014:	00006e89 	.word	0x00006e89
   18018:	20006bd8 	.word	0x20006bd8
   1801c:	00015009 	.word	0x00015009
   18020:	00006fcd 	.word	0x00006fcd
   18024:	00007111 	.word	0x00007111
   18028:	00020a68 	.word	0x00020a68
   1802c:	000114e5 	.word	0x000114e5
   18030:	000121ab 	.word	0x000121ab
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18034:	6824      	ldr	r4, [r4, #0]
   18036:	3478      	adds	r4, #120	; 0x78
   18038:	2000      	movs	r0, #0
   1803a:	4bba      	ldr	r3, [pc, #744]	; (18324 <lv_theme_material_init+0x1234>)
   1803c:	4798      	blx	r3
   1803e:	2801      	cmp	r0, #1
   18040:	f241 8011 	bls.w	19066 <lv_theme_material_init+0x1f76>
   18044:	2000      	movs	r0, #0
   18046:	4bb8      	ldr	r3, [pc, #736]	; (18328 <lv_theme_material_init+0x1238>)
   18048:	4798      	blx	r3
   1804a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1804e:	0040      	lsls	r0, r0, #1
   18050:	3050      	adds	r0, #80	; 0x50
   18052:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18056:	f281 8021 	bge.w	1909c <lv_theme_material_init+0x1fac>
   1805a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1805c:	2112      	movs	r1, #18
   1805e:	4620      	mov	r0, r4
   18060:	4bb2      	ldr	r3, [pc, #712]	; (1832c <lv_theme_material_init+0x123c>)
   18062:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18064:	4bb2      	ldr	r3, [pc, #712]	; (18330 <lv_theme_material_init+0x1240>)
   18066:	681c      	ldr	r4, [r3, #0]
   18068:	3478      	adds	r4, #120	; 0x78
   1806a:	2000      	movs	r0, #0
   1806c:	4bad      	ldr	r3, [pc, #692]	; (18324 <lv_theme_material_init+0x1234>)
   1806e:	4798      	blx	r3
   18070:	2801      	cmp	r0, #1
   18072:	f241 8023 	bls.w	190bc <lv_theme_material_init+0x1fcc>
   18076:	2000      	movs	r0, #0
   18078:	4bab      	ldr	r3, [pc, #684]	; (18328 <lv_theme_material_init+0x1238>)
   1807a:	4798      	blx	r3
   1807c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18080:	0040      	lsls	r0, r0, #1
   18082:	3050      	adds	r0, #80	; 0x50
   18084:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18088:	f281 8033 	bge.w	190f2 <lv_theme_material_init+0x2002>
   1808c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1808e:	2113      	movs	r1, #19
   18090:	4620      	mov	r0, r4
   18092:	4ba6      	ldr	r3, [pc, #664]	; (1832c <lv_theme_material_init+0x123c>)
   18094:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   18096:	4ba6      	ldr	r3, [pc, #664]	; (18330 <lv_theme_material_init+0x1240>)
   18098:	681c      	ldr	r4, [r3, #0]
   1809a:	3478      	adds	r4, #120	; 0x78
   1809c:	2000      	movs	r0, #0
   1809e:	4ba1      	ldr	r3, [pc, #644]	; (18324 <lv_theme_material_init+0x1234>)
   180a0:	4798      	blx	r3
   180a2:	2801      	cmp	r0, #1
   180a4:	f241 8035 	bls.w	19112 <lv_theme_material_init+0x2022>
   180a8:	2000      	movs	r0, #0
   180aa:	4b9f      	ldr	r3, [pc, #636]	; (18328 <lv_theme_material_init+0x1238>)
   180ac:	4798      	blx	r3
   180ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   180b2:	0040      	lsls	r0, r0, #1
   180b4:	3050      	adds	r0, #80	; 0x50
   180b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   180ba:	f281 8045 	bge.w	19148 <lv_theme_material_init+0x2058>
   180be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   180c0:	2110      	movs	r1, #16
   180c2:	4620      	mov	r0, r4
   180c4:	4b99      	ldr	r3, [pc, #612]	; (1832c <lv_theme_material_init+0x123c>)
   180c6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   180c8:	4b99      	ldr	r3, [pc, #612]	; (18330 <lv_theme_material_init+0x1240>)
   180ca:	681c      	ldr	r4, [r3, #0]
   180cc:	3478      	adds	r4, #120	; 0x78
   180ce:	2000      	movs	r0, #0
   180d0:	4b94      	ldr	r3, [pc, #592]	; (18324 <lv_theme_material_init+0x1234>)
   180d2:	4798      	blx	r3
   180d4:	2801      	cmp	r0, #1
   180d6:	f241 8047 	bls.w	19168 <lv_theme_material_init+0x2078>
   180da:	2000      	movs	r0, #0
   180dc:	4b92      	ldr	r3, [pc, #584]	; (18328 <lv_theme_material_init+0x1238>)
   180de:	4798      	blx	r3
   180e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   180e4:	0040      	lsls	r0, r0, #1
   180e6:	3050      	adds	r0, #80	; 0x50
   180e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   180ec:	f281 8057 	bge.w	1919e <lv_theme_material_init+0x20ae>
   180f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   180f2:	2111      	movs	r1, #17
   180f4:	4620      	mov	r0, r4
   180f6:	4b8d      	ldr	r3, [pc, #564]	; (1832c <lv_theme_material_init+0x123c>)
   180f8:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   180fa:	4b8d      	ldr	r3, [pc, #564]	; (18330 <lv_theme_material_init+0x1240>)
   180fc:	681c      	ldr	r4, [r3, #0]
   180fe:	3478      	adds	r4, #120	; 0x78
   18100:	2000      	movs	r0, #0
   18102:	4b88      	ldr	r3, [pc, #544]	; (18324 <lv_theme_material_init+0x1234>)
   18104:	4798      	blx	r3
   18106:	2801      	cmp	r0, #1
   18108:	f241 8059 	bls.w	191be <lv_theme_material_init+0x20ce>
   1810c:	2000      	movs	r0, #0
   1810e:	4b86      	ldr	r3, [pc, #536]	; (18328 <lv_theme_material_init+0x1238>)
   18110:	4798      	blx	r3
   18112:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18116:	0040      	lsls	r0, r0, #1
   18118:	3050      	adds	r0, #80	; 0x50
   1811a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1811e:	f281 8069 	bge.w	191f4 <lv_theme_material_init+0x2104>
   18122:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   18124:	2114      	movs	r1, #20
   18126:	4620      	mov	r0, r4
   18128:	4b80      	ldr	r3, [pc, #512]	; (1832c <lv_theme_material_init+0x123c>)
   1812a:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   1812c:	4b80      	ldr	r3, [pc, #512]	; (18330 <lv_theme_material_init+0x1240>)
   1812e:	681c      	ldr	r4, [r3, #0]
   18130:	3478      	adds	r4, #120	; 0x78
   18132:	2000      	movs	r0, #0
   18134:	4b7b      	ldr	r3, [pc, #492]	; (18324 <lv_theme_material_init+0x1234>)
   18136:	4798      	blx	r3
   18138:	2801      	cmp	r0, #1
   1813a:	f241 806b 	bls.w	19214 <lv_theme_material_init+0x2124>
   1813e:	2000      	movs	r0, #0
   18140:	4b79      	ldr	r3, [pc, #484]	; (18328 <lv_theme_material_init+0x1238>)
   18142:	4798      	blx	r3
   18144:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18148:	0040      	lsls	r0, r0, #1
   1814a:	3050      	adds	r0, #80	; 0x50
   1814c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18150:	f281 807c 	bge.w	1924c <lv_theme_material_init+0x215c>
   18154:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   18158:	2104      	movs	r1, #4
   1815a:	4620      	mov	r0, r4
   1815c:	4d73      	ldr	r5, [pc, #460]	; (1832c <lv_theme_material_init+0x123c>)
   1815e:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, 0);
   18160:	4c73      	ldr	r4, [pc, #460]	; (18330 <lv_theme_material_init+0x1240>)
   18162:	6820      	ldr	r0, [r4, #0]
   18164:	2200      	movs	r2, #0
   18166:	f241 0104 	movw	r1, #4100	; 0x1004
   1816a:	3078      	adds	r0, #120	; 0x78
   1816c:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, 0);
   1816e:	6820      	ldr	r0, [r4, #0]
   18170:	2200      	movs	r2, #0
   18172:	f44f 7182 	mov.w	r1, #260	; 0x104
   18176:	3078      	adds	r0, #120	; 0x78
   18178:	47a8      	blx	r5
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, 0);
   1817a:	6820      	ldr	r0, [r4, #0]
   1817c:	2200      	movs	r2, #0
   1817e:	f242 0104 	movw	r1, #8196	; 0x2004
   18182:	3078      	adds	r0, #120	; 0x78
   18184:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
   18186:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
   18188:	2296      	movs	r2, #150	; 0x96
   1818a:	21b0      	movs	r1, #176	; 0xb0
   1818c:	3078      	adds	r0, #120	; 0x78
   1818e:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
   18190:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
   18192:	2229      	movs	r2, #41	; 0x29
   18194:	21b7      	movs	r1, #183	; 0xb7
   18196:	3078      	adds	r0, #120	; 0x78
   18198:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
   1819a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
   1819c:	2204      	movs	r2, #4
   1819e:	21b6      	movs	r1, #182	; 0xb6
   181a0:	3078      	adds	r0, #120	; 0x78
   181a2:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_page);
   181a4:	6820      	ldr	r0, [r4, #0]
   181a6:	3054      	adds	r0, #84	; 0x54
   181a8:	4b62      	ldr	r3, [pc, #392]	; (18334 <lv_theme_material_init+0x1244>)
   181aa:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   181ac:	6824      	ldr	r4, [r4, #0]
   181ae:	3454      	adds	r4, #84	; 0x54
   181b0:	2000      	movs	r0, #0
   181b2:	4b5d      	ldr	r3, [pc, #372]	; (18328 <lv_theme_material_init+0x1238>)
   181b4:	4798      	blx	r3
   181b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   181ba:	0080      	lsls	r0, r0, #2
   181bc:	3050      	adds	r0, #80	; 0x50
   181be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   181c2:	f281 8053 	bge.w	1926c <lv_theme_material_init+0x217c>
   181c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   181c8:	f248 0181 	movw	r1, #32897	; 0x8081
   181cc:	4620      	mov	r0, r4
   181ce:	4d57      	ldr	r5, [pc, #348]	; (1832c <lv_theme_material_init+0x123c>)
   181d0:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
   181d2:	4c57      	ldr	r4, [pc, #348]	; (18330 <lv_theme_material_init+0x1240>)
   181d4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   181d6:	2201      	movs	r2, #1
   181d8:	2102      	movs	r1, #2
   181da:	3054      	adds	r0, #84	; 0x54
   181dc:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
   181de:	6820      	ldr	r0, [r4, #0]
   181e0:	3058      	adds	r0, #88	; 0x58
   181e2:	4b54      	ldr	r3, [pc, #336]	; (18334 <lv_theme_material_init+0x1244>)
   181e4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   181e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   181e8:	22ff      	movs	r2, #255	; 0xff
   181ea:	212c      	movs	r1, #44	; 0x2c
   181ec:	3058      	adds	r0, #88	; 0x58
   181ee:	4b52      	ldr	r3, [pc, #328]	; (18338 <lv_theme_material_init+0x1248>)
   181f0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
   181f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   181f4:	89a2      	ldrh	r2, [r4, #12]
   181f6:	2129      	movs	r1, #41	; 0x29
   181f8:	3058      	adds	r0, #88	; 0x58
   181fa:	4d50      	ldr	r5, [pc, #320]	; (1833c <lv_theme_material_init+0x124c>)
   181fc:	47a8      	blx	r5
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
   181fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   18200:	f04f 32ff 	mov.w	r2, #4294967295
   18204:	f248 0189 	movw	r1, #32905	; 0x8089
   18208:	3058      	adds	r0, #88	; 0x58
   1820a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   1820c:	6820      	ldr	r0, [r4, #0]
   1820e:	3058      	adds	r0, #88	; 0x58
   18210:	6a23      	ldr	r3, [r4, #32]
   18212:	f013 0f02 	tst.w	r3, #2
   18216:	f041 8039 	bne.w	1928c <lv_theme_material_init+0x219c>
   1821a:	2309      	movs	r3, #9
   1821c:	2113      	movs	r1, #19
   1821e:	240a      	movs	r4, #10
   18220:	f04f 0200 	mov.w	r2, #0
   18224:	f364 0204 	bfi	r2, r4, #0, #5
   18228:	f361 124a 	bfi	r2, r1, #5, #6
   1822c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   18230:	f241 0129 	movw	r1, #4137	; 0x1029
   18234:	4b41      	ldr	r3, [pc, #260]	; (1833c <lv_theme_material_init+0x124c>)
   18236:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   18238:	4b3d      	ldr	r3, [pc, #244]	; (18330 <lv_theme_material_init+0x1240>)
   1823a:	6818      	ldr	r0, [r3, #0]
   1823c:	3058      	adds	r0, #88	; 0x58
   1823e:	6a1b      	ldr	r3, [r3, #32]
   18240:	f013 0f02 	tst.w	r3, #2
   18244:	f041 8027 	bne.w	19296 <lv_theme_material_init+0x21a6>
   18248:	231f      	movs	r3, #31
   1824a:	213f      	movs	r1, #63	; 0x3f
   1824c:	461c      	mov	r4, r3
   1824e:	f04f 0200 	mov.w	r2, #0
   18252:	f364 0204 	bfi	r2, r4, #0, #5
   18256:	f361 124a 	bfi	r2, r1, #5, #6
   1825a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1825e:	f249 0189 	movw	r1, #37001	; 0x9089
   18262:	4b36      	ldr	r3, [pc, #216]	; (1833c <lv_theme_material_init+0x124c>)
   18264:	4798      	blx	r3
    style_init_reset(&styles->roller_bg);
   18266:	4c32      	ldr	r4, [pc, #200]	; (18330 <lv_theme_material_init+0x1240>)
   18268:	6820      	ldr	r0, [r4, #0]
   1826a:	3088      	adds	r0, #136	; 0x88
   1826c:	4b31      	ldr	r3, [pc, #196]	; (18334 <lv_theme_material_init+0x1244>)
   1826e:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   18270:	6824      	ldr	r4, [r4, #0]
   18272:	3488      	adds	r4, #136	; 0x88
   18274:	2000      	movs	r0, #0
   18276:	4b2c      	ldr	r3, [pc, #176]	; (18328 <lv_theme_material_init+0x1238>)
   18278:	4798      	blx	r3
   1827a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1827e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18282:	3050      	adds	r0, #80	; 0x50
   18284:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18288:	f281 800a 	bge.w	192a0 <lv_theme_material_init+0x21b0>
   1828c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1828e:	f248 0181 	movw	r1, #32897	; 0x8081
   18292:	4620      	mov	r0, r4
   18294:	4b25      	ldr	r3, [pc, #148]	; (1832c <lv_theme_material_init+0x123c>)
   18296:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
   18298:	4c25      	ldr	r4, [pc, #148]	; (18330 <lv_theme_material_init+0x1240>)
   1829a:	6820      	ldr	r0, [r4, #0]
   1829c:	308c      	adds	r0, #140	; 0x8c
   1829e:	4e25      	ldr	r6, [pc, #148]	; (18334 <lv_theme_material_init+0x1244>)
   182a0:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
   182a2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   182a4:	22ff      	movs	r2, #255	; 0xff
   182a6:	212c      	movs	r1, #44	; 0x2c
   182a8:	308c      	adds	r0, #140	; 0x8c
   182aa:	4d23      	ldr	r5, [pc, #140]	; (18338 <lv_theme_material_init+0x1248>)
   182ac:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
   182ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   182b0:	89a2      	ldrh	r2, [r4, #12]
   182b2:	2129      	movs	r1, #41	; 0x29
   182b4:	308c      	adds	r0, #140	; 0x8c
   182b6:	4f21      	ldr	r7, [pc, #132]	; (1833c <lv_theme_material_init+0x124c>)
   182b8:	47b8      	blx	r7
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
   182ba:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   182bc:	4b20      	ldr	r3, [pc, #128]	; (18340 <lv_theme_material_init+0x1250>)
   182be:	881a      	ldrh	r2, [r3, #0]
   182c0:	f248 0189 	movw	r1, #32905	; 0x8089
   182c4:	308c      	adds	r0, #140	; 0x8c
   182c6:	47b8      	blx	r7
    style_init_reset(&styles->tabview_btns_bg);
   182c8:	6820      	ldr	r0, [r4, #0]
   182ca:	30a8      	adds	r0, #168	; 0xa8
   182cc:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   182ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   182d0:	22ff      	movs	r2, #255	; 0xff
   182d2:	212c      	movs	r1, #44	; 0x2c
   182d4:	30a8      	adds	r0, #168	; 0xa8
   182d6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   182d8:	6820      	ldr	r0, [r4, #0]
   182da:	30a8      	adds	r0, #168	; 0xa8
   182dc:	6a23      	ldr	r3, [r4, #32]
   182de:	f013 0f02 	tst.w	r3, #2
   182e2:	f040 87ee 	bne.w	192c2 <lv_theme_material_init+0x21d2>
   182e6:	230b      	movs	r3, #11
   182e8:	2118      	movs	r1, #24
   182ea:	240e      	movs	r4, #14
   182ec:	f04f 0200 	mov.w	r2, #0
   182f0:	f364 0204 	bfi	r2, r4, #0, #5
   182f4:	f361 124a 	bfi	r2, r1, #5, #6
   182f8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   182fc:	2129      	movs	r1, #41	; 0x29
   182fe:	4b0f      	ldr	r3, [pc, #60]	; (1833c <lv_theme_material_init+0x124c>)
   18300:	4798      	blx	r3
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   18302:	4b0b      	ldr	r3, [pc, #44]	; (18330 <lv_theme_material_init+0x1240>)
   18304:	6818      	ldr	r0, [r3, #0]
                              IS_LIGHT ? lv_color_hex(0xe4eaf0) : lv_color_hex(0x3b3e42));
   18306:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_border_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT,
   18308:	f013 0302 	ands.w	r3, r3, #2
   1830c:	bf14      	ite	ne
   1830e:	211c      	movne	r1, #28
   18310:	2107      	moveq	r1, #7
   18312:	2b00      	cmp	r3, #0
   18314:	bf15      	itete	ne
   18316:	243a      	movne	r4, #58	; 0x3a
   18318:	240f      	moveq	r4, #15
   1831a:	231e      	movne	r3, #30
   1831c:	2308      	moveq	r3, #8
   1831e:	f04f 0200 	mov.w	r2, #0
   18322:	e00f      	b.n	18344 <lv_theme_material_init+0x1254>
   18324:	00011501 	.word	0x00011501
   18328:	000114e5 	.word	0x000114e5
   1832c:	00006e89 	.word	0x00006e89
   18330:	20006bd8 	.word	0x20006bd8
   18334:	00015009 	.word	0x00015009
   18338:	00007111 	.word	0x00007111
   1833c:	00006fcd 	.word	0x00006fcd
   18340:	00020a68 	.word	0x00020a68
   18344:	f363 0204 	bfi	r2, r3, #0, #5
   18348:	f364 124a 	bfi	r2, r4, #5, #6
   1834c:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   18350:	2139      	movs	r1, #57	; 0x39
   18352:	30a8      	adds	r0, #168	; 0xa8
   18354:	4bb6      	ldr	r3, [pc, #728]	; (18630 <lv_theme_material_init+0x1540>)
   18356:	4798      	blx	r3
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   18358:	4bb6      	ldr	r3, [pc, #728]	; (18634 <lv_theme_material_init+0x1544>)
   1835a:	681c      	ldr	r4, [r3, #0]
   1835c:	34a8      	adds	r4, #168	; 0xa8
   1835e:	2000      	movs	r0, #0
   18360:	4bb5      	ldr	r3, [pc, #724]	; (18638 <lv_theme_material_init+0x1548>)
   18362:	4798      	blx	r3
   18364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18368:	3050      	adds	r0, #80	; 0x50
   1836a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1836e:	f280 87ad 	bge.w	192cc <lv_theme_material_init+0x21dc>
   18372:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   18374:	2130      	movs	r1, #48	; 0x30
   18376:	4620      	mov	r0, r4
   18378:	4db0      	ldr	r5, [pc, #704]	; (1863c <lv_theme_material_init+0x154c>)
   1837a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
   1837c:	4cad      	ldr	r4, [pc, #692]	; (18634 <lv_theme_material_init+0x1544>)
   1837e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   18380:	2201      	movs	r2, #1
   18382:	2131      	movs	r1, #49	; 0x31
   18384:	30a8      	adds	r0, #168	; 0xa8
   18386:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
   18388:	6820      	ldr	r0, [r4, #0]
   1838a:	6a23      	ldr	r3, [r4, #32]
   1838c:	f013 0302 	ands.w	r3, r3, #2
   18390:	bf14      	ite	ne
   18392:	2107      	movne	r1, #7
   18394:	211c      	moveq	r1, #28
   18396:	2b00      	cmp	r3, #0
   18398:	bf15      	itete	ne
   1839a:	240f      	movne	r4, #15
   1839c:	243a      	moveq	r4, #58	; 0x3a
   1839e:	2308      	movne	r3, #8
   183a0:	231d      	moveq	r3, #29
   183a2:	f04f 0200 	mov.w	r2, #0
   183a6:	f363 0204 	bfi	r2, r3, #0, #5
   183aa:	f364 124a 	bfi	r2, r4, #5, #6
   183ae:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   183b2:	f248 0189 	movw	r1, #32905	; 0x8089
   183b6:	30a8      	adds	r0, #168	; 0xa8
   183b8:	4d9d      	ldr	r5, [pc, #628]	; (18630 <lv_theme_material_init+0x1540>)
   183ba:	47a8      	blx	r5
    lv_style_set_text_font(&styles->tabview_btns_bg, LV_STATE_DEFAULT, theme.font_normal);
   183bc:	4c9d      	ldr	r4, [pc, #628]	; (18634 <lv_theme_material_init+0x1544>)
   183be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   183c0:	6962      	ldr	r2, [r4, #20]
   183c2:	f248 018e 	movw	r1, #32910	; 0x808e
   183c6:	30a8      	adds	r0, #168	; 0xa8
   183c8:	4b9d      	ldr	r3, [pc, #628]	; (18640 <lv_theme_material_init+0x1550>)
   183ca:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
   183cc:	6820      	ldr	r0, [r4, #0]
   183ce:	f04f 0200 	mov.w	r2, #0
   183d2:	2313      	movs	r3, #19
   183d4:	f363 0204 	bfi	r2, r3, #0, #5
   183d8:	2326      	movs	r3, #38	; 0x26
   183da:	f363 124a 	bfi	r2, r3, #5, #6
   183de:	2312      	movs	r3, #18
   183e0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   183e4:	f248 01a9 	movw	r1, #32937	; 0x80a9
   183e8:	30a8      	adds	r0, #168	; 0xa8
   183ea:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   183ec:	6824      	ldr	r4, [r4, #0]
   183ee:	34a8      	adds	r4, #168	; 0xa8
   183f0:	2000      	movs	r0, #0
   183f2:	4b91      	ldr	r3, [pc, #580]	; (18638 <lv_theme_material_init+0x1548>)
   183f4:	4798      	blx	r3
   183f6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   183fa:	3050      	adds	r0, #80	; 0x50
   183fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18400:	f280 8773 	bge.w	192ea <lv_theme_material_init+0x21fa>
   18404:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   18406:	2110      	movs	r1, #16
   18408:	4620      	mov	r0, r4
   1840a:	4b8c      	ldr	r3, [pc, #560]	; (1863c <lv_theme_material_init+0x154c>)
   1840c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1840e:	4b89      	ldr	r3, [pc, #548]	; (18634 <lv_theme_material_init+0x1544>)
   18410:	681c      	ldr	r4, [r3, #0]
   18412:	34a8      	adds	r4, #168	; 0xa8
   18414:	2000      	movs	r0, #0
   18416:	4b88      	ldr	r3, [pc, #544]	; (18638 <lv_theme_material_init+0x1548>)
   18418:	4798      	blx	r3
   1841a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1841e:	3050      	adds	r0, #80	; 0x50
   18420:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18424:	f280 8774 	bge.w	19310 <lv_theme_material_init+0x2220>
   18428:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1842a:	2112      	movs	r1, #18
   1842c:	4620      	mov	r0, r4
   1842e:	4b83      	ldr	r3, [pc, #524]	; (1863c <lv_theme_material_init+0x154c>)
   18430:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   18432:	4b80      	ldr	r3, [pc, #512]	; (18634 <lv_theme_material_init+0x1544>)
   18434:	681c      	ldr	r4, [r3, #0]
   18436:	34a8      	adds	r4, #168	; 0xa8
   18438:	2000      	movs	r0, #0
   1843a:	4b7f      	ldr	r3, [pc, #508]	; (18638 <lv_theme_material_init+0x1548>)
   1843c:	4798      	blx	r3
   1843e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18442:	3050      	adds	r0, #80	; 0x50
   18444:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18448:	f280 8771 	bge.w	1932e <lv_theme_material_init+0x223e>
   1844c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1844e:	2113      	movs	r1, #19
   18450:	4620      	mov	r0, r4
   18452:	4b7a      	ldr	r3, [pc, #488]	; (1863c <lv_theme_material_init+0x154c>)
   18454:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
   18456:	4c77      	ldr	r4, [pc, #476]	; (18634 <lv_theme_material_init+0x1544>)
   18458:	6820      	ldr	r0, [r4, #0]
   1845a:	30a4      	adds	r0, #164	; 0xa4
   1845c:	4b79      	ldr	r3, [pc, #484]	; (18644 <lv_theme_material_init+0x1554>)
   1845e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
   18460:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   18462:	227f      	movs	r2, #127	; 0x7f
   18464:	f241 012c 	movw	r1, #4140	; 0x102c
   18468:	30a4      	adds	r0, #164	; 0xa4
   1846a:	4b77      	ldr	r3, [pc, #476]	; (18648 <lv_theme_material_init+0x1558>)
   1846c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
   1846e:	6820      	ldr	r0, [r4, #0]
   18470:	2311      	movs	r3, #17
   18472:	f04f 0200 	mov.w	r2, #0
   18476:	f363 0204 	bfi	r2, r3, #0, #5
   1847a:	2122      	movs	r1, #34	; 0x22
   1847c:	f361 124a 	bfi	r2, r1, #5, #6
   18480:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   18484:	f241 0129 	movw	r1, #4137	; 0x1029
   18488:	30a4      	adds	r0, #164	; 0xa4
   1848a:	4b69      	ldr	r3, [pc, #420]	; (18630 <lv_theme_material_init+0x1540>)
   1848c:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
   1848e:	6820      	ldr	r0, [r4, #0]
   18490:	6a23      	ldr	r3, [r4, #32]
   18492:	f013 0302 	ands.w	r3, r3, #2
   18496:	bf14      	ite	ne
   18498:	2107      	movne	r1, #7
   1849a:	211c      	moveq	r1, #28
   1849c:	2b00      	cmp	r3, #0
   1849e:	bf15      	itete	ne
   184a0:	240f      	movne	r4, #15
   184a2:	243a      	moveq	r4, #58	; 0x3a
   184a4:	2308      	movne	r3, #8
   184a6:	231d      	moveq	r3, #29
   184a8:	f04f 0200 	mov.w	r2, #0
   184ac:	f363 0204 	bfi	r2, r3, #0, #5
   184b0:	f364 124a 	bfi	r2, r4, #5, #6
   184b4:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   184b8:	f248 1189 	movw	r1, #33161	; 0x8189
   184bc:	30a4      	adds	r0, #164	; 0xa4
   184be:	4b5c      	ldr	r3, [pc, #368]	; (18630 <lv_theme_material_init+0x1540>)
   184c0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   184c2:	4b5c      	ldr	r3, [pc, #368]	; (18634 <lv_theme_material_init+0x1544>)
   184c4:	681c      	ldr	r4, [r3, #0]
   184c6:	34a4      	adds	r4, #164	; 0xa4
   184c8:	2000      	movs	r0, #0
   184ca:	4b5b      	ldr	r3, [pc, #364]	; (18638 <lv_theme_material_init+0x1548>)
   184cc:	4798      	blx	r3
   184ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   184d2:	0080      	lsls	r0, r0, #2
   184d4:	3050      	adds	r0, #80	; 0x50
   184d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   184da:	f280 8737 	bge.w	1934c <lv_theme_material_init+0x225c>
   184de:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   184e0:	2110      	movs	r1, #16
   184e2:	4620      	mov	r0, r4
   184e4:	4b55      	ldr	r3, [pc, #340]	; (1863c <lv_theme_material_init+0x154c>)
   184e6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   184e8:	4b52      	ldr	r3, [pc, #328]	; (18634 <lv_theme_material_init+0x1544>)
   184ea:	681c      	ldr	r4, [r3, #0]
   184ec:	34a4      	adds	r4, #164	; 0xa4
   184ee:	2000      	movs	r0, #0
   184f0:	4b51      	ldr	r3, [pc, #324]	; (18638 <lv_theme_material_init+0x1548>)
   184f2:	4798      	blx	r3
   184f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   184f8:	0080      	lsls	r0, r0, #2
   184fa:	3050      	adds	r0, #80	; 0x50
   184fc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18500:	f280 8734 	bge.w	1936c <lv_theme_material_init+0x227c>
   18504:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   18506:	2111      	movs	r1, #17
   18508:	4620      	mov	r0, r4
   1850a:	4b4c      	ldr	r3, [pc, #304]	; (1863c <lv_theme_material_init+0x154c>)
   1850c:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
   1850e:	4c49      	ldr	r4, [pc, #292]	; (18634 <lv_theme_material_init+0x1544>)
   18510:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   18512:	89a2      	ldrh	r2, [r4, #12]
   18514:	f248 2189 	movw	r1, #33417	; 0x8289
   18518:	30a4      	adds	r0, #164	; 0xa4
   1851a:	4d45      	ldr	r5, [pc, #276]	; (18630 <lv_theme_material_init+0x1540>)
   1851c:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
   1851e:	6820      	ldr	r0, [r4, #0]
   18520:	89e2      	ldrh	r2, [r4, #14]
   18522:	f248 4189 	movw	r1, #33929	; 0x8489
   18526:	30a4      	adds	r0, #164	; 0xa4
   18528:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
   1852a:	6820      	ldr	r0, [r4, #0]
   1852c:	30ac      	adds	r0, #172	; 0xac
   1852e:	4b45      	ldr	r3, [pc, #276]	; (18644 <lv_theme_material_init+0x1554>)
   18530:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
   18532:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   18534:	22ff      	movs	r2, #255	; 0xff
   18536:	212c      	movs	r1, #44	; 0x2c
   18538:	30ac      	adds	r0, #172	; 0xac
   1853a:	4b43      	ldr	r3, [pc, #268]	; (18648 <lv_theme_material_init+0x1558>)
   1853c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
   1853e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   18540:	89a2      	ldrh	r2, [r4, #12]
   18542:	2129      	movs	r1, #41	; 0x29
   18544:	30ac      	adds	r0, #172	; 0xac
   18546:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
   18548:	6820      	ldr	r0, [r4, #0]
   1854a:	89e2      	ldrh	r2, [r4, #14]
   1854c:	f240 4129 	movw	r1, #1065	; 0x429
   18550:	30ac      	adds	r0, #172	; 0xac
   18552:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   18554:	6824      	ldr	r4, [r4, #0]
   18556:	34ac      	adds	r4, #172	; 0xac
   18558:	2000      	movs	r0, #0
   1855a:	4b37      	ldr	r3, [pc, #220]	; (18638 <lv_theme_material_init+0x1548>)
   1855c:	4798      	blx	r3
   1855e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18562:	3050      	adds	r0, #80	; 0x50
   18564:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18568:	f280 8710 	bge.w	1938c <lv_theme_material_init+0x229c>
   1856c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   1856e:	2103      	movs	r1, #3
   18570:	4620      	mov	r0, r4
   18572:	4d32      	ldr	r5, [pc, #200]	; (1863c <lv_theme_material_init+0x154c>)
   18574:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   18576:	4c2f      	ldr	r4, [pc, #188]	; (18634 <lv_theme_material_init+0x1544>)
   18578:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1857a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1857e:	2101      	movs	r1, #1
   18580:	30ac      	adds	r0, #172	; 0xac
   18582:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
   18584:	6820      	ldr	r0, [r4, #0]
   18586:	30b0      	adds	r0, #176	; 0xb0
   18588:	4b2e      	ldr	r3, [pc, #184]	; (18644 <lv_theme_material_init+0x1554>)
   1858a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   1858c:	6824      	ldr	r4, [r4, #0]
   1858e:	34b0      	adds	r4, #176	; 0xb0
   18590:	2000      	movs	r0, #0
   18592:	4b2e      	ldr	r3, [pc, #184]	; (1864c <lv_theme_material_init+0x155c>)
   18594:	4798      	blx	r3
   18596:	2801      	cmp	r0, #1
   18598:	f240 8707 	bls.w	193aa <lv_theme_material_init+0x22ba>
   1859c:	2000      	movs	r0, #0
   1859e:	4b26      	ldr	r3, [pc, #152]	; (18638 <lv_theme_material_init+0x1548>)
   185a0:	4798      	blx	r3
   185a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   185a6:	0040      	lsls	r0, r0, #1
   185a8:	3050      	adds	r0, #80	; 0x50
   185aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   185ae:	f280 8717 	bge.w	193e0 <lv_theme_material_init+0x22f0>
   185b2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   185b4:	2110      	movs	r1, #16
   185b6:	4620      	mov	r0, r4
   185b8:	4b20      	ldr	r3, [pc, #128]	; (1863c <lv_theme_material_init+0x154c>)
   185ba:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   185bc:	4b1d      	ldr	r3, [pc, #116]	; (18634 <lv_theme_material_init+0x1544>)
   185be:	681c      	ldr	r4, [r3, #0]
   185c0:	34b0      	adds	r4, #176	; 0xb0
   185c2:	2000      	movs	r0, #0
   185c4:	4b21      	ldr	r3, [pc, #132]	; (1864c <lv_theme_material_init+0x155c>)
   185c6:	4798      	blx	r3
   185c8:	2801      	cmp	r0, #1
   185ca:	f240 8719 	bls.w	19400 <lv_theme_material_init+0x2310>
   185ce:	2000      	movs	r0, #0
   185d0:	4b19      	ldr	r3, [pc, #100]	; (18638 <lv_theme_material_init+0x1548>)
   185d2:	4798      	blx	r3
   185d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   185d8:	0040      	lsls	r0, r0, #1
   185da:	3050      	adds	r0, #80	; 0x50
   185dc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   185e0:	f280 8729 	bge.w	19436 <lv_theme_material_init+0x2346>
   185e4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   185e6:	2111      	movs	r1, #17
   185e8:	4620      	mov	r0, r4
   185ea:	4b14      	ldr	r3, [pc, #80]	; (1863c <lv_theme_material_init+0x154c>)
   185ec:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   185ee:	4b11      	ldr	r3, [pc, #68]	; (18634 <lv_theme_material_init+0x1544>)
   185f0:	681c      	ldr	r4, [r3, #0]
   185f2:	34b0      	adds	r4, #176	; 0xb0
   185f4:	2000      	movs	r0, #0
   185f6:	4b15      	ldr	r3, [pc, #84]	; (1864c <lv_theme_material_init+0x155c>)
   185f8:	4798      	blx	r3
   185fa:	2801      	cmp	r0, #1
   185fc:	f240 872b 	bls.w	19456 <lv_theme_material_init+0x2366>
   18600:	2000      	movs	r0, #0
   18602:	4b0d      	ldr	r3, [pc, #52]	; (18638 <lv_theme_material_init+0x1548>)
   18604:	4798      	blx	r3
   18606:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1860a:	0040      	lsls	r0, r0, #1
   1860c:	3050      	adds	r0, #80	; 0x50
   1860e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18612:	f280 873b 	bge.w	1948c <lv_theme_material_init+0x239c>
   18616:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   18618:	2112      	movs	r1, #18
   1861a:	4620      	mov	r0, r4
   1861c:	4b07      	ldr	r3, [pc, #28]	; (1863c <lv_theme_material_init+0x154c>)
   1861e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18620:	4b04      	ldr	r3, [pc, #16]	; (18634 <lv_theme_material_init+0x1544>)
   18622:	681c      	ldr	r4, [r3, #0]
   18624:	34b0      	adds	r4, #176	; 0xb0
   18626:	2000      	movs	r0, #0
   18628:	4b08      	ldr	r3, [pc, #32]	; (1864c <lv_theme_material_init+0x155c>)
   1862a:	4798      	blx	r3
   1862c:	2801      	cmp	r0, #1
   1862e:	e00f      	b.n	18650 <lv_theme_material_init+0x1560>
   18630:	00006fcd 	.word	0x00006fcd
   18634:	20006bd8 	.word	0x20006bd8
   18638:	000114e5 	.word	0x000114e5
   1863c:	00006e89 	.word	0x00006e89
   18640:	00007241 	.word	0x00007241
   18644:	00015009 	.word	0x00015009
   18648:	00007111 	.word	0x00007111
   1864c:	00011501 	.word	0x00011501
   18650:	f240 872c 	bls.w	194ac <lv_theme_material_init+0x23bc>
   18654:	2000      	movs	r0, #0
   18656:	4bbd      	ldr	r3, [pc, #756]	; (1894c <lv_theme_material_init+0x185c>)
   18658:	4798      	blx	r3
   1865a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1865e:	0040      	lsls	r0, r0, #1
   18660:	3050      	adds	r0, #80	; 0x50
   18662:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18666:	f280 873c 	bge.w	194e2 <lv_theme_material_init+0x23f2>
   1866a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1866c:	2113      	movs	r1, #19
   1866e:	4620      	mov	r0, r4
   18670:	4bb7      	ldr	r3, [pc, #732]	; (18950 <lv_theme_material_init+0x1860>)
   18672:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   18674:	4bb7      	ldr	r3, [pc, #732]	; (18954 <lv_theme_material_init+0x1864>)
   18676:	681c      	ldr	r4, [r3, #0]
   18678:	34b0      	adds	r4, #176	; 0xb0
   1867a:	2000      	movs	r0, #0
   1867c:	4bb6      	ldr	r3, [pc, #728]	; (18958 <lv_theme_material_init+0x1868>)
   1867e:	4798      	blx	r3
   18680:	2801      	cmp	r0, #1
   18682:	f240 873e 	bls.w	19502 <lv_theme_material_init+0x2412>
   18686:	2000      	movs	r0, #0
   18688:	4bb0      	ldr	r3, [pc, #704]	; (1894c <lv_theme_material_init+0x185c>)
   1868a:	4798      	blx	r3
   1868c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18690:	0040      	lsls	r0, r0, #1
   18692:	3050      	adds	r0, #80	; 0x50
   18694:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18698:	f280 874e 	bge.w	19538 <lv_theme_material_init+0x2448>
   1869c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1869e:	2114      	movs	r1, #20
   186a0:	4620      	mov	r0, r4
   186a2:	4bab      	ldr	r3, [pc, #684]	; (18950 <lv_theme_material_init+0x1860>)
   186a4:	4798      	blx	r3
    style_init_reset(&styles->table_cell);
   186a6:	4cab      	ldr	r4, [pc, #684]	; (18954 <lv_theme_material_init+0x1864>)
   186a8:	6820      	ldr	r0, [r4, #0]
   186aa:	30a0      	adds	r0, #160	; 0xa0
   186ac:	4bab      	ldr	r3, [pc, #684]	; (1895c <lv_theme_material_init+0x186c>)
   186ae:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
   186b0:	6820      	ldr	r0, [r4, #0]
   186b2:	6a23      	ldr	r3, [r4, #32]
   186b4:	f013 0302 	ands.w	r3, r3, #2
   186b8:	bf14      	ite	ne
   186ba:	211a      	movne	r1, #26
   186bc:	2110      	moveq	r1, #16
   186be:	2b00      	cmp	r3, #0
   186c0:	bf15      	itete	ne
   186c2:	2437      	movne	r4, #55	; 0x37
   186c4:	2422      	moveq	r4, #34	; 0x22
   186c6:	231c      	movne	r3, #28
   186c8:	2312      	moveq	r3, #18
   186ca:	f04f 0200 	mov.w	r2, #0
   186ce:	f363 0204 	bfi	r2, r3, #0, #5
   186d2:	f364 124a 	bfi	r2, r4, #5, #6
   186d6:	f361 22cf 	bfi	r2, r1, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   186da:	2139      	movs	r1, #57	; 0x39
   186dc:	30a0      	adds	r0, #160	; 0xa0
   186de:	4ba0      	ldr	r3, [pc, #640]	; (18960 <lv_theme_material_init+0x1870>)
   186e0:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
   186e2:	4c9c      	ldr	r4, [pc, #624]	; (18954 <lv_theme_material_init+0x1864>)
   186e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   186e6:	2201      	movs	r2, #1
   186e8:	2130      	movs	r1, #48	; 0x30
   186ea:	30a0      	adds	r0, #160	; 0xa0
   186ec:	4d98      	ldr	r5, [pc, #608]	; (18950 <lv_theme_material_init+0x1860>)
   186ee:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
   186f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   186f2:	2203      	movs	r2, #3
   186f4:	2131      	movs	r1, #49	; 0x31
   186f6:	30a0      	adds	r0, #160	; 0xa0
   186f8:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   186fa:	6824      	ldr	r4, [r4, #0]
   186fc:	34a0      	adds	r4, #160	; 0xa0
   186fe:	2000      	movs	r0, #0
   18700:	4b95      	ldr	r3, [pc, #596]	; (18958 <lv_theme_material_init+0x1868>)
   18702:	4798      	blx	r3
   18704:	2801      	cmp	r0, #1
   18706:	f240 8727 	bls.w	19558 <lv_theme_material_init+0x2468>
   1870a:	2000      	movs	r0, #0
   1870c:	4b8f      	ldr	r3, [pc, #572]	; (1894c <lv_theme_material_init+0x185c>)
   1870e:	4798      	blx	r3
   18710:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18714:	0040      	lsls	r0, r0, #1
   18716:	3050      	adds	r0, #80	; 0x50
   18718:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1871c:	f280 8737 	bge.w	1958e <lv_theme_material_init+0x249e>
   18720:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   18722:	2112      	movs	r1, #18
   18724:	4620      	mov	r0, r4
   18726:	4b8a      	ldr	r3, [pc, #552]	; (18950 <lv_theme_material_init+0x1860>)
   18728:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   1872a:	4b8a      	ldr	r3, [pc, #552]	; (18954 <lv_theme_material_init+0x1864>)
   1872c:	681c      	ldr	r4, [r3, #0]
   1872e:	34a0      	adds	r4, #160	; 0xa0
   18730:	2000      	movs	r0, #0
   18732:	4b89      	ldr	r3, [pc, #548]	; (18958 <lv_theme_material_init+0x1868>)
   18734:	4798      	blx	r3
   18736:	2801      	cmp	r0, #1
   18738:	f240 8739 	bls.w	195ae <lv_theme_material_init+0x24be>
   1873c:	2000      	movs	r0, #0
   1873e:	4b83      	ldr	r3, [pc, #524]	; (1894c <lv_theme_material_init+0x185c>)
   18740:	4798      	blx	r3
   18742:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18746:	0040      	lsls	r0, r0, #1
   18748:	3050      	adds	r0, #80	; 0x50
   1874a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1874e:	f280 8749 	bge.w	195e4 <lv_theme_material_init+0x24f4>
   18752:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   18754:	2113      	movs	r1, #19
   18756:	4620      	mov	r0, r4
   18758:	4b7d      	ldr	r3, [pc, #500]	; (18950 <lv_theme_material_init+0x1860>)
   1875a:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   1875c:	4b7d      	ldr	r3, [pc, #500]	; (18954 <lv_theme_material_init+0x1864>)
   1875e:	681c      	ldr	r4, [r3, #0]
   18760:	34a0      	adds	r4, #160	; 0xa0
   18762:	2000      	movs	r0, #0
   18764:	4b7c      	ldr	r3, [pc, #496]	; (18958 <lv_theme_material_init+0x1868>)
   18766:	4798      	blx	r3
   18768:	2801      	cmp	r0, #1
   1876a:	f240 874b 	bls.w	19604 <lv_theme_material_init+0x2514>
   1876e:	2000      	movs	r0, #0
   18770:	4b76      	ldr	r3, [pc, #472]	; (1894c <lv_theme_material_init+0x185c>)
   18772:	4798      	blx	r3
   18774:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18778:	0040      	lsls	r0, r0, #1
   1877a:	3050      	adds	r0, #80	; 0x50
   1877c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18780:	f280 8760 	bge.w	19644 <lv_theme_material_init+0x2554>
   18784:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   18786:	2110      	movs	r1, #16
   18788:	4620      	mov	r0, r4
   1878a:	4b71      	ldr	r3, [pc, #452]	; (18950 <lv_theme_material_init+0x1860>)
   1878c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   1878e:	4b71      	ldr	r3, [pc, #452]	; (18954 <lv_theme_material_init+0x1864>)
   18790:	681c      	ldr	r4, [r3, #0]
   18792:	34a0      	adds	r4, #160	; 0xa0
   18794:	2000      	movs	r0, #0
   18796:	4b70      	ldr	r3, [pc, #448]	; (18958 <lv_theme_material_init+0x1868>)
   18798:	4798      	blx	r3
   1879a:	2801      	cmp	r0, #1
   1879c:	f240 8762 	bls.w	19664 <lv_theme_material_init+0x2574>
   187a0:	2000      	movs	r0, #0
   187a2:	4b6a      	ldr	r3, [pc, #424]	; (1894c <lv_theme_material_init+0x185c>)
   187a4:	4798      	blx	r3
   187a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   187aa:	0040      	lsls	r0, r0, #1
   187ac:	3050      	adds	r0, #80	; 0x50
   187ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   187b2:	f280 8772 	bge.w	1969a <lv_theme_material_init+0x25aa>
   187b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   187b8:	2111      	movs	r1, #17
   187ba:	4620      	mov	r0, r4
   187bc:	4b64      	ldr	r3, [pc, #400]	; (18950 <lv_theme_material_init+0x1860>)
   187be:	4798      	blx	r3
    theme.apply_xcb = theme_apply;
   187c0:	4c64      	ldr	r4, [pc, #400]	; (18954 <lv_theme_material_init+0x1864>)
   187c2:	4b68      	ldr	r3, [pc, #416]	; (18964 <lv_theme_material_init+0x1874>)
   187c4:	60a3      	str	r3, [r4, #8]
    inited = true;
   187c6:	2301      	movs	r3, #1
   187c8:	7123      	strb	r3, [r4, #4]
    lv_obj_report_style_mod(NULL);
   187ca:	2000      	movs	r0, #0
   187cc:	4b66      	ldr	r3, [pc, #408]	; (18968 <lv_theme_material_init+0x1878>)
   187ce:	4798      	blx	r3
}
   187d0:	f104 0008 	add.w	r0, r4, #8
   187d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   187d8:	20bc      	movs	r0, #188	; 0xbc
   187da:	4b64      	ldr	r3, [pc, #400]	; (1896c <lv_theme_material_init+0x187c>)
   187dc:	4798      	blx	r3
   187de:	4b64      	ldr	r3, [pc, #400]	; (18970 <lv_theme_material_init+0x1880>)
   187e0:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
   187e2:	4b5c      	ldr	r3, [pc, #368]	; (18954 <lv_theme_material_init+0x1864>)
   187e4:	6018      	str	r0, [r3, #0]
   187e6:	f7fe bc8e 	b.w	17106 <lv_theme_material_init+0x16>
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   187ea:	2315      	movs	r3, #21
   187ec:	212a      	movs	r1, #42	; 0x2a
   187ee:	461c      	mov	r4, r3
   187f0:	f7fe bcb3 	b.w	1715a <lv_theme_material_init+0x6a>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
   187f4:	2000      	movs	r0, #0
   187f6:	4b55      	ldr	r3, [pc, #340]	; (1894c <lv_theme_material_init+0x185c>)
   187f8:	4798      	blx	r3
   187fa:	3050      	adds	r0, #80	; 0x50
   187fc:	4b5d      	ldr	r3, [pc, #372]	; (18974 <lv_theme_material_init+0x1884>)
   187fe:	fb83 2300 	smull	r2, r3, r3, r0
   18802:	17c2      	asrs	r2, r0, #31
   18804:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18808:	b212      	sxth	r2, r2
   1880a:	f7fe bcc2 	b.w	17192 <lv_theme_material_init+0xa2>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1880e:	2000      	movs	r0, #0
   18810:	4b4e      	ldr	r3, [pc, #312]	; (1894c <lv_theme_material_init+0x185c>)
   18812:	4798      	blx	r3
   18814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18818:	0040      	lsls	r0, r0, #1
   1881a:	3050      	adds	r0, #80	; 0x50
   1881c:	4b55      	ldr	r3, [pc, #340]	; (18974 <lv_theme_material_init+0x1884>)
   1881e:	fb83 2300 	smull	r2, r3, r3, r0
   18822:	17c2      	asrs	r2, r0, #31
   18824:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18828:	b212      	sxth	r2, r2
   1882a:	f7fe bcc5 	b.w	171b8 <lv_theme_material_init+0xc8>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
   1882e:	2000      	movs	r0, #0
   18830:	4b46      	ldr	r3, [pc, #280]	; (1894c <lv_theme_material_init+0x185c>)
   18832:	4798      	blx	r3
   18834:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18838:	0040      	lsls	r0, r0, #1
   1883a:	3050      	adds	r0, #80	; 0x50
   1883c:	4b4d      	ldr	r3, [pc, #308]	; (18974 <lv_theme_material_init+0x1884>)
   1883e:	fb83 2300 	smull	r2, r3, r3, r0
   18842:	17c2      	asrs	r2, r0, #31
   18844:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18848:	b212      	sxth	r2, r2
   1884a:	f7fe bcc8 	b.w	171de <lv_theme_material_init+0xee>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
   1884e:	2000      	movs	r0, #0
   18850:	4b3e      	ldr	r3, [pc, #248]	; (1894c <lv_theme_material_init+0x185c>)
   18852:	4798      	blx	r3
   18854:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18858:	3050      	adds	r0, #80	; 0x50
   1885a:	4b46      	ldr	r3, [pc, #280]	; (18974 <lv_theme_material_init+0x1884>)
   1885c:	fb83 2300 	smull	r2, r3, r3, r0
   18860:	17c2      	asrs	r2, r0, #31
   18862:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18866:	b212      	sxth	r2, r2
   18868:	f7fe bce9 	b.w	1723e <lv_theme_material_init+0x14e>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
   1886c:	2000      	movs	r0, #0
   1886e:	4b37      	ldr	r3, [pc, #220]	; (1894c <lv_theme_material_init+0x185c>)
   18870:	4798      	blx	r3
   18872:	3014      	adds	r0, #20
   18874:	0080      	lsls	r0, r0, #2
   18876:	4b3f      	ldr	r3, [pc, #252]	; (18974 <lv_theme_material_init+0x1884>)
   18878:	fb83 2300 	smull	r2, r3, r3, r0
   1887c:	17c2      	asrs	r2, r0, #31
   1887e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18882:	b212      	sxth	r2, r2
   18884:	f7fe bcec 	b.w	17260 <lv_theme_material_init+0x170>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
   18888:	2000      	movs	r0, #0
   1888a:	4b30      	ldr	r3, [pc, #192]	; (1894c <lv_theme_material_init+0x185c>)
   1888c:	4798      	blx	r3
   1888e:	3028      	adds	r0, #40	; 0x28
   18890:	0040      	lsls	r0, r0, #1
   18892:	4b38      	ldr	r3, [pc, #224]	; (18974 <lv_theme_material_init+0x1884>)
   18894:	fb83 2300 	smull	r2, r3, r3, r0
   18898:	17c2      	asrs	r2, r0, #31
   1889a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1889e:	b212      	sxth	r2, r2
   188a0:	f7fe bcef 	b.w	17282 <lv_theme_material_init+0x192>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
   188a4:	2000      	movs	r0, #0
   188a6:	4b29      	ldr	r3, [pc, #164]	; (1894c <lv_theme_material_init+0x185c>)
   188a8:	4798      	blx	r3
   188aa:	3050      	adds	r0, #80	; 0x50
   188ac:	4b31      	ldr	r3, [pc, #196]	; (18974 <lv_theme_material_init+0x1884>)
   188ae:	fb83 2300 	smull	r2, r3, r3, r0
   188b2:	17c2      	asrs	r2, r0, #31
   188b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   188b8:	b212      	sxth	r2, r2
   188ba:	f7fe bcf2 	b.w	172a2 <lv_theme_material_init+0x1b2>
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   188be:	2000      	movs	r0, #0
   188c0:	4b22      	ldr	r3, [pc, #136]	; (1894c <lv_theme_material_init+0x185c>)
   188c2:	4798      	blx	r3
   188c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   188c8:	3050      	adds	r0, #80	; 0x50
   188ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   188ce:	da02      	bge.n	188d6 <lv_theme_material_init+0x17e6>
   188d0:	2201      	movs	r2, #1
   188d2:	f7fe bd03 	b.w	172dc <lv_theme_material_init+0x1ec>
   188d6:	2000      	movs	r0, #0
   188d8:	4b1c      	ldr	r3, [pc, #112]	; (1894c <lv_theme_material_init+0x185c>)
   188da:	4798      	blx	r3
   188dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   188e0:	3050      	adds	r0, #80	; 0x50
   188e2:	4b24      	ldr	r3, [pc, #144]	; (18974 <lv_theme_material_init+0x1884>)
   188e4:	fb83 2300 	smull	r2, r3, r3, r0
   188e8:	17c2      	asrs	r2, r0, #31
   188ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   188ee:	b212      	sxth	r2, r2
   188f0:	f7fe bcf4 	b.w	172dc <lv_theme_material_init+0x1ec>
   188f4:	2000      	movs	r0, #0
   188f6:	4b15      	ldr	r3, [pc, #84]	; (1894c <lv_theme_material_init+0x185c>)
   188f8:	4798      	blx	r3
   188fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   188fe:	0040      	lsls	r0, r0, #1
   18900:	3050      	adds	r0, #80	; 0x50
   18902:	4b1c      	ldr	r3, [pc, #112]	; (18974 <lv_theme_material_init+0x1884>)
   18904:	fb83 2300 	smull	r2, r3, r3, r0
   18908:	17c2      	asrs	r2, r0, #31
   1890a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1890e:	b212      	sxth	r2, r2
   18910:	f7fe bce4 	b.w	172dc <lv_theme_material_init+0x1ec>
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   18914:	2000      	movs	r0, #0
   18916:	4b0d      	ldr	r3, [pc, #52]	; (1894c <lv_theme_material_init+0x185c>)
   18918:	4798      	blx	r3
   1891a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1891e:	3050      	adds	r0, #80	; 0x50
   18920:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18924:	da02      	bge.n	1892c <lv_theme_material_init+0x183c>
   18926:	2201      	movs	r2, #1
   18928:	f7fe bcf1 	b.w	1730e <lv_theme_material_init+0x21e>
   1892c:	2000      	movs	r0, #0
   1892e:	4b07      	ldr	r3, [pc, #28]	; (1894c <lv_theme_material_init+0x185c>)
   18930:	4798      	blx	r3
   18932:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18936:	3050      	adds	r0, #80	; 0x50
   18938:	4b0e      	ldr	r3, [pc, #56]	; (18974 <lv_theme_material_init+0x1884>)
   1893a:	fb83 2300 	smull	r2, r3, r3, r0
   1893e:	17c2      	asrs	r2, r0, #31
   18940:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18944:	b212      	sxth	r2, r2
   18946:	f7fe bce2 	b.w	1730e <lv_theme_material_init+0x21e>
   1894a:	bf00      	nop
   1894c:	000114e5 	.word	0x000114e5
   18950:	00006e89 	.word	0x00006e89
   18954:	20006bd8 	.word	0x20006bd8
   18958:	00011501 	.word	0x00011501
   1895c:	00015009 	.word	0x00015009
   18960:	00006fcd 	.word	0x00006fcd
   18964:	000147a1 	.word	0x000147a1
   18968:	000042dd 	.word	0x000042dd
   1896c:	00012985 	.word	0x00012985
   18970:	20006d64 	.word	0x20006d64
   18974:	66666667 	.word	0x66666667
   18978:	2000      	movs	r0, #0
   1897a:	4bc7      	ldr	r3, [pc, #796]	; (18c98 <lv_theme_material_init+0x1ba8>)
   1897c:	4798      	blx	r3
   1897e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18982:	0040      	lsls	r0, r0, #1
   18984:	3050      	adds	r0, #80	; 0x50
   18986:	4bc5      	ldr	r3, [pc, #788]	; (18c9c <lv_theme_material_init+0x1bac>)
   18988:	fb83 2300 	smull	r2, r3, r3, r0
   1898c:	17c2      	asrs	r2, r0, #31
   1898e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18992:	b212      	sxth	r2, r2
   18994:	f7fe bcbb 	b.w	1730e <lv_theme_material_init+0x21e>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   18998:	2000      	movs	r0, #0
   1899a:	4bbf      	ldr	r3, [pc, #764]	; (18c98 <lv_theme_material_init+0x1ba8>)
   1899c:	4798      	blx	r3
   1899e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   189a2:	3050      	adds	r0, #80	; 0x50
   189a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   189a8:	da02      	bge.n	189b0 <lv_theme_material_init+0x18c0>
   189aa:	2201      	movs	r2, #1
   189ac:	f7fe bcc8 	b.w	17340 <lv_theme_material_init+0x250>
   189b0:	2000      	movs	r0, #0
   189b2:	4bb9      	ldr	r3, [pc, #740]	; (18c98 <lv_theme_material_init+0x1ba8>)
   189b4:	4798      	blx	r3
   189b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   189ba:	3050      	adds	r0, #80	; 0x50
   189bc:	4bb7      	ldr	r3, [pc, #732]	; (18c9c <lv_theme_material_init+0x1bac>)
   189be:	fb83 2300 	smull	r2, r3, r3, r0
   189c2:	17c2      	asrs	r2, r0, #31
   189c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   189c8:	b212      	sxth	r2, r2
   189ca:	f7fe bcb9 	b.w	17340 <lv_theme_material_init+0x250>
   189ce:	2000      	movs	r0, #0
   189d0:	4bb1      	ldr	r3, [pc, #708]	; (18c98 <lv_theme_material_init+0x1ba8>)
   189d2:	4798      	blx	r3
   189d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   189d8:	0040      	lsls	r0, r0, #1
   189da:	3050      	adds	r0, #80	; 0x50
   189dc:	4baf      	ldr	r3, [pc, #700]	; (18c9c <lv_theme_material_init+0x1bac>)
   189de:	fb83 2300 	smull	r2, r3, r3, r0
   189e2:	17c2      	asrs	r2, r0, #31
   189e4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   189e8:	b212      	sxth	r2, r2
   189ea:	f7fe bca9 	b.w	17340 <lv_theme_material_init+0x250>
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
   189ee:	2000      	movs	r0, #0
   189f0:	4ba9      	ldr	r3, [pc, #676]	; (18c98 <lv_theme_material_init+0x1ba8>)
   189f2:	4798      	blx	r3
   189f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   189f8:	3050      	adds	r0, #80	; 0x50
   189fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   189fe:	da02      	bge.n	18a06 <lv_theme_material_init+0x1916>
   18a00:	2201      	movs	r2, #1
   18a02:	f7fe bcb6 	b.w	17372 <lv_theme_material_init+0x282>
   18a06:	2000      	movs	r0, #0
   18a08:	4ba3      	ldr	r3, [pc, #652]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18a0a:	4798      	blx	r3
   18a0c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18a10:	3050      	adds	r0, #80	; 0x50
   18a12:	4ba2      	ldr	r3, [pc, #648]	; (18c9c <lv_theme_material_init+0x1bac>)
   18a14:	fb83 2300 	smull	r2, r3, r3, r0
   18a18:	17c2      	asrs	r2, r0, #31
   18a1a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a1e:	b212      	sxth	r2, r2
   18a20:	f7fe bca7 	b.w	17372 <lv_theme_material_init+0x282>
   18a24:	2000      	movs	r0, #0
   18a26:	4b9c      	ldr	r3, [pc, #624]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18a28:	4798      	blx	r3
   18a2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18a2e:	0040      	lsls	r0, r0, #1
   18a30:	3050      	adds	r0, #80	; 0x50
   18a32:	4b9a      	ldr	r3, [pc, #616]	; (18c9c <lv_theme_material_init+0x1bac>)
   18a34:	fb83 2300 	smull	r2, r3, r3, r0
   18a38:	17c2      	asrs	r2, r0, #31
   18a3a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a3e:	b212      	sxth	r2, r2
   18a40:	f7fe bc97 	b.w	17372 <lv_theme_material_init+0x282>
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
   18a44:	2306      	movs	r3, #6
   18a46:	2110      	movs	r1, #16
   18a48:	2409      	movs	r4, #9
   18a4a:	f7fe bcdc 	b.w	17406 <lv_theme_material_init+0x316>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   18a4e:	2000      	movs	r0, #0
   18a50:	4b91      	ldr	r3, [pc, #580]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18a52:	4798      	blx	r3
   18a54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18a58:	3050      	adds	r0, #80	; 0x50
   18a5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18a5e:	da02      	bge.n	18a66 <lv_theme_material_init+0x1976>
   18a60:	2201      	movs	r2, #1
   18a62:	f7fe bcf1 	b.w	17448 <lv_theme_material_init+0x358>
   18a66:	2000      	movs	r0, #0
   18a68:	4b8b      	ldr	r3, [pc, #556]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18a6a:	4798      	blx	r3
   18a6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18a70:	3050      	adds	r0, #80	; 0x50
   18a72:	4b8a      	ldr	r3, [pc, #552]	; (18c9c <lv_theme_material_init+0x1bac>)
   18a74:	fb83 2300 	smull	r2, r3, r3, r0
   18a78:	17c2      	asrs	r2, r0, #31
   18a7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a7e:	b212      	sxth	r2, r2
   18a80:	f7fe bce2 	b.w	17448 <lv_theme_material_init+0x358>
   18a84:	2000      	movs	r0, #0
   18a86:	4b84      	ldr	r3, [pc, #528]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18a88:	4798      	blx	r3
   18a8a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18a8e:	0040      	lsls	r0, r0, #1
   18a90:	3050      	adds	r0, #80	; 0x50
   18a92:	4b82      	ldr	r3, [pc, #520]	; (18c9c <lv_theme_material_init+0x1bac>)
   18a94:	fb83 2300 	smull	r2, r3, r3, r0
   18a98:	17c2      	asrs	r2, r0, #31
   18a9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18a9e:	b212      	sxth	r2, r2
   18aa0:	f7fe bcd2 	b.w	17448 <lv_theme_material_init+0x358>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   18aa4:	2000      	movs	r0, #0
   18aa6:	4b7c      	ldr	r3, [pc, #496]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18aa8:	4798      	blx	r3
   18aaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18aae:	3050      	adds	r0, #80	; 0x50
   18ab0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18ab4:	da02      	bge.n	18abc <lv_theme_material_init+0x19cc>
   18ab6:	2201      	movs	r2, #1
   18ab8:	f7fe bcdf 	b.w	1747a <lv_theme_material_init+0x38a>
   18abc:	2000      	movs	r0, #0
   18abe:	4b76      	ldr	r3, [pc, #472]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18ac0:	4798      	blx	r3
   18ac2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18ac6:	3050      	adds	r0, #80	; 0x50
   18ac8:	4b74      	ldr	r3, [pc, #464]	; (18c9c <lv_theme_material_init+0x1bac>)
   18aca:	fb83 2300 	smull	r2, r3, r3, r0
   18ace:	17c2      	asrs	r2, r0, #31
   18ad0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ad4:	b212      	sxth	r2, r2
   18ad6:	f7fe bcd0 	b.w	1747a <lv_theme_material_init+0x38a>
   18ada:	2000      	movs	r0, #0
   18adc:	4b6e      	ldr	r3, [pc, #440]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18ade:	4798      	blx	r3
   18ae0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18ae4:	0040      	lsls	r0, r0, #1
   18ae6:	3050      	adds	r0, #80	; 0x50
   18ae8:	4b6c      	ldr	r3, [pc, #432]	; (18c9c <lv_theme_material_init+0x1bac>)
   18aea:	fb83 2300 	smull	r2, r3, r3, r0
   18aee:	17c2      	asrs	r2, r0, #31
   18af0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18af4:	b212      	sxth	r2, r2
   18af6:	f7fe bcc0 	b.w	1747a <lv_theme_material_init+0x38a>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
   18afa:	2000      	movs	r0, #0
   18afc:	4b66      	ldr	r3, [pc, #408]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18afe:	4798      	blx	r3
   18b00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b04:	3050      	adds	r0, #80	; 0x50
   18b06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18b0a:	da02      	bge.n	18b12 <lv_theme_material_init+0x1a22>
   18b0c:	2201      	movs	r2, #1
   18b0e:	f7fe bccd 	b.w	174ac <lv_theme_material_init+0x3bc>
   18b12:	2000      	movs	r0, #0
   18b14:	4b60      	ldr	r3, [pc, #384]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18b16:	4798      	blx	r3
   18b18:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b1c:	3050      	adds	r0, #80	; 0x50
   18b1e:	4b5f      	ldr	r3, [pc, #380]	; (18c9c <lv_theme_material_init+0x1bac>)
   18b20:	fb83 2300 	smull	r2, r3, r3, r0
   18b24:	17c2      	asrs	r2, r0, #31
   18b26:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b2a:	b212      	sxth	r2, r2
   18b2c:	f7fe bcbe 	b.w	174ac <lv_theme_material_init+0x3bc>
   18b30:	2000      	movs	r0, #0
   18b32:	4b59      	ldr	r3, [pc, #356]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18b34:	4798      	blx	r3
   18b36:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b3a:	0040      	lsls	r0, r0, #1
   18b3c:	3050      	adds	r0, #80	; 0x50
   18b3e:	4b57      	ldr	r3, [pc, #348]	; (18c9c <lv_theme_material_init+0x1bac>)
   18b40:	fb83 2300 	smull	r2, r3, r3, r0
   18b44:	17c2      	asrs	r2, r0, #31
   18b46:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b4a:	b212      	sxth	r2, r2
   18b4c:	f7fe bcae 	b.w	174ac <lv_theme_material_init+0x3bc>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
   18b50:	2000      	movs	r0, #0
   18b52:	4b51      	ldr	r3, [pc, #324]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18b54:	4798      	blx	r3
   18b56:	3014      	adds	r0, #20
   18b58:	0080      	lsls	r0, r0, #2
   18b5a:	4b50      	ldr	r3, [pc, #320]	; (18c9c <lv_theme_material_init+0x1bac>)
   18b5c:	fb83 2300 	smull	r2, r3, r3, r0
   18b60:	17c2      	asrs	r2, r0, #31
   18b62:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b66:	b212      	sxth	r2, r2
   18b68:	f7fe bcb5 	b.w	174d6 <lv_theme_material_init+0x3e6>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
   18b6c:	2306      	movs	r3, #6
   18b6e:	2110      	movs	r1, #16
   18b70:	2409      	movs	r4, #9
   18b72:	f7fe bcbf 	b.w	174f4 <lv_theme_material_init+0x404>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
   18b76:	2000      	movs	r0, #0
   18b78:	4b47      	ldr	r3, [pc, #284]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18b7a:	4798      	blx	r3
   18b7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18b80:	3050      	adds	r0, #80	; 0x50
   18b82:	4b46      	ldr	r3, [pc, #280]	; (18c9c <lv_theme_material_init+0x1bac>)
   18b84:	fb83 2300 	smull	r2, r3, r3, r0
   18b88:	17c2      	asrs	r2, r0, #31
   18b8a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18b8e:	b212      	sxth	r2, r2
   18b90:	f7fe bd20 	b.w	175d4 <lv_theme_material_init+0x4e4>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   18b94:	2000      	movs	r0, #0
   18b96:	4b40      	ldr	r3, [pc, #256]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18b98:	4798      	blx	r3
   18b9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18b9e:	3050      	adds	r0, #80	; 0x50
   18ba0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18ba4:	da02      	bge.n	18bac <lv_theme_material_init+0x1abc>
   18ba6:	2201      	movs	r2, #1
   18ba8:	f7fe bd2d 	b.w	17606 <lv_theme_material_init+0x516>
   18bac:	2000      	movs	r0, #0
   18bae:	4b3a      	ldr	r3, [pc, #232]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18bb0:	4798      	blx	r3
   18bb2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18bb6:	3050      	adds	r0, #80	; 0x50
   18bb8:	4b38      	ldr	r3, [pc, #224]	; (18c9c <lv_theme_material_init+0x1bac>)
   18bba:	fb83 2300 	smull	r2, r3, r3, r0
   18bbe:	17c2      	asrs	r2, r0, #31
   18bc0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18bc4:	b212      	sxth	r2, r2
   18bc6:	f7fe bd1e 	b.w	17606 <lv_theme_material_init+0x516>
   18bca:	2000      	movs	r0, #0
   18bcc:	4b32      	ldr	r3, [pc, #200]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18bce:	4798      	blx	r3
   18bd0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18bd4:	0040      	lsls	r0, r0, #1
   18bd6:	3050      	adds	r0, #80	; 0x50
   18bd8:	4b30      	ldr	r3, [pc, #192]	; (18c9c <lv_theme_material_init+0x1bac>)
   18bda:	fb83 2300 	smull	r2, r3, r3, r0
   18bde:	17c2      	asrs	r2, r0, #31
   18be0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18be4:	b212      	sxth	r2, r2
   18be6:	f7fe bd0e 	b.w	17606 <lv_theme_material_init+0x516>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   18bea:	2000      	movs	r0, #0
   18bec:	4b2a      	ldr	r3, [pc, #168]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18bee:	4798      	blx	r3
   18bf0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18bf4:	3050      	adds	r0, #80	; 0x50
   18bf6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18bfa:	da02      	bge.n	18c02 <lv_theme_material_init+0x1b12>
   18bfc:	2201      	movs	r2, #1
   18bfe:	f7fe bd1b 	b.w	17638 <lv_theme_material_init+0x548>
   18c02:	2000      	movs	r0, #0
   18c04:	4b24      	ldr	r3, [pc, #144]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18c06:	4798      	blx	r3
   18c08:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c0c:	3050      	adds	r0, #80	; 0x50
   18c0e:	4b23      	ldr	r3, [pc, #140]	; (18c9c <lv_theme_material_init+0x1bac>)
   18c10:	fb83 2300 	smull	r2, r3, r3, r0
   18c14:	17c2      	asrs	r2, r0, #31
   18c16:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c1a:	b212      	sxth	r2, r2
   18c1c:	f7fe bd0c 	b.w	17638 <lv_theme_material_init+0x548>
   18c20:	2000      	movs	r0, #0
   18c22:	4b1d      	ldr	r3, [pc, #116]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18c24:	4798      	blx	r3
   18c26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c2a:	0040      	lsls	r0, r0, #1
   18c2c:	3050      	adds	r0, #80	; 0x50
   18c2e:	4b1b      	ldr	r3, [pc, #108]	; (18c9c <lv_theme_material_init+0x1bac>)
   18c30:	fb83 2300 	smull	r2, r3, r3, r0
   18c34:	17c2      	asrs	r2, r0, #31
   18c36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c3a:	b212      	sxth	r2, r2
   18c3c:	f7fe bcfc 	b.w	17638 <lv_theme_material_init+0x548>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
   18c40:	2000      	movs	r0, #0
   18c42:	4b15      	ldr	r3, [pc, #84]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18c44:	4798      	blx	r3
   18c46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c4a:	3050      	adds	r0, #80	; 0x50
   18c4c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   18c50:	da02      	bge.n	18c58 <lv_theme_material_init+0x1b68>
   18c52:	2201      	movs	r2, #1
   18c54:	f7fe bd09 	b.w	1766a <lv_theme_material_init+0x57a>
   18c58:	2000      	movs	r0, #0
   18c5a:	4b0f      	ldr	r3, [pc, #60]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18c5c:	4798      	blx	r3
   18c5e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c62:	3050      	adds	r0, #80	; 0x50
   18c64:	4b0d      	ldr	r3, [pc, #52]	; (18c9c <lv_theme_material_init+0x1bac>)
   18c66:	fb83 2300 	smull	r2, r3, r3, r0
   18c6a:	17c2      	asrs	r2, r0, #31
   18c6c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c70:	b212      	sxth	r2, r2
   18c72:	f7fe bcfa 	b.w	1766a <lv_theme_material_init+0x57a>
   18c76:	2000      	movs	r0, #0
   18c78:	4b07      	ldr	r3, [pc, #28]	; (18c98 <lv_theme_material_init+0x1ba8>)
   18c7a:	4798      	blx	r3
   18c7c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18c80:	0040      	lsls	r0, r0, #1
   18c82:	3050      	adds	r0, #80	; 0x50
   18c84:	4b05      	ldr	r3, [pc, #20]	; (18c9c <lv_theme_material_init+0x1bac>)
   18c86:	fb83 2300 	smull	r2, r3, r3, r0
   18c8a:	17c2      	asrs	r2, r0, #31
   18c8c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18c90:	b212      	sxth	r2, r2
   18c92:	f7fe bcea 	b.w	1766a <lv_theme_material_init+0x57a>
   18c96:	bf00      	nop
   18c98:	000114e5 	.word	0x000114e5
   18c9c:	66666667 	.word	0x66666667
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
   18ca0:	2000      	movs	r0, #0
   18ca2:	4bc9      	ldr	r3, [pc, #804]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18ca4:	4798      	blx	r3
   18ca6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   18caa:	0040      	lsls	r0, r0, #1
   18cac:	3050      	adds	r0, #80	; 0x50
   18cae:	4bc7      	ldr	r3, [pc, #796]	; (18fcc <lv_theme_material_init+0x1edc>)
   18cb0:	fb83 2300 	smull	r2, r3, r3, r0
   18cb4:	17c2      	asrs	r2, r0, #31
   18cb6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18cba:	b212      	sxth	r2, r2
   18cbc:	f7fe bcec 	b.w	17698 <lv_theme_material_init+0x5a8>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
   18cc0:	2000      	movs	r0, #0
   18cc2:	4bc1      	ldr	r3, [pc, #772]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18cc4:	4798      	blx	r3
   18cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18cca:	0080      	lsls	r0, r0, #2
   18ccc:	3050      	adds	r0, #80	; 0x50
   18cce:	4bbf      	ldr	r3, [pc, #764]	; (18fcc <lv_theme_material_init+0x1edc>)
   18cd0:	fb83 2300 	smull	r2, r3, r3, r0
   18cd4:	17c2      	asrs	r2, r0, #31
   18cd6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18cda:	b212      	sxth	r2, r2
   18cdc:	f7fe bd21 	b.w	17722 <lv_theme_material_init+0x632>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   18ce0:	2000      	movs	r0, #0
   18ce2:	4bb9      	ldr	r3, [pc, #740]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18ce4:	4798      	blx	r3
   18ce6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18cea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   18cee:	3050      	adds	r0, #80	; 0x50
   18cf0:	4bb6      	ldr	r3, [pc, #728]	; (18fcc <lv_theme_material_init+0x1edc>)
   18cf2:	fb83 2300 	smull	r2, r3, r3, r0
   18cf6:	17c2      	asrs	r2, r0, #31
   18cf8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18cfc:	b212      	sxth	r2, r2
   18cfe:	f7fe bd57 	b.w	177b0 <lv_theme_material_init+0x6c0>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   18d02:	2000      	movs	r0, #0
   18d04:	4bb0      	ldr	r3, [pc, #704]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18d06:	4798      	blx	r3
   18d08:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18d0c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   18d10:	3050      	adds	r0, #80	; 0x50
   18d12:	4bae      	ldr	r3, [pc, #696]	; (18fcc <lv_theme_material_init+0x1edc>)
   18d14:	fb83 2300 	smull	r2, r3, r3, r0
   18d18:	17c2      	asrs	r2, r0, #31
   18d1a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d1e:	b212      	sxth	r2, r2
   18d20:	f7fe bd5a 	b.w	177d8 <lv_theme_material_init+0x6e8>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   18d24:	2000      	movs	r0, #0
   18d26:	4ba8      	ldr	r3, [pc, #672]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18d28:	4798      	blx	r3
   18d2a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18d2e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   18d32:	3050      	adds	r0, #80	; 0x50
   18d34:	4ba5      	ldr	r3, [pc, #660]	; (18fcc <lv_theme_material_init+0x1edc>)
   18d36:	fb83 2300 	smull	r2, r3, r3, r0
   18d3a:	17c2      	asrs	r2, r0, #31
   18d3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d40:	b212      	sxth	r2, r2
   18d42:	f7fe bd5d 	b.w	17800 <lv_theme_material_init+0x710>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
   18d46:	2000      	movs	r0, #0
   18d48:	4b9f      	ldr	r3, [pc, #636]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18d4a:	4798      	blx	r3
   18d4c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18d50:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   18d54:	3050      	adds	r0, #80	; 0x50
   18d56:	4b9d      	ldr	r3, [pc, #628]	; (18fcc <lv_theme_material_init+0x1edc>)
   18d58:	fb83 2300 	smull	r2, r3, r3, r0
   18d5c:	17c2      	asrs	r2, r0, #31
   18d5e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d62:	b212      	sxth	r2, r2
   18d64:	f7fe bd60 	b.w	17828 <lv_theme_material_init+0x738>
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   18d68:	2000      	movs	r0, #0
   18d6a:	4b97      	ldr	r3, [pc, #604]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18d6c:	4798      	blx	r3
   18d6e:	3014      	adds	r0, #20
   18d70:	0080      	lsls	r0, r0, #2
   18d72:	4b96      	ldr	r3, [pc, #600]	; (18fcc <lv_theme_material_init+0x1edc>)
   18d74:	fb83 2300 	smull	r2, r3, r3, r0
   18d78:	17c2      	asrs	r2, r0, #31
   18d7a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d7e:	b212      	sxth	r2, r2
   18d80:	f7fe bd67 	b.w	17852 <lv_theme_material_init+0x762>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   18d84:	2000      	movs	r0, #0
   18d86:	4b90      	ldr	r3, [pc, #576]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18d88:	4798      	blx	r3
   18d8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18d8e:	0040      	lsls	r0, r0, #1
   18d90:	3050      	adds	r0, #80	; 0x50
   18d92:	4b8e      	ldr	r3, [pc, #568]	; (18fcc <lv_theme_material_init+0x1edc>)
   18d94:	fb83 2300 	smull	r2, r3, r3, r0
   18d98:	17c2      	asrs	r2, r0, #31
   18d9a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18d9e:	b212      	sxth	r2, r2
   18da0:	f7fe bd6a 	b.w	17878 <lv_theme_material_init+0x788>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   18da4:	2000      	movs	r0, #0
   18da6:	4b88      	ldr	r3, [pc, #544]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18da8:	4798      	blx	r3
   18daa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18dae:	3050      	adds	r0, #80	; 0x50
   18db0:	4b86      	ldr	r3, [pc, #536]	; (18fcc <lv_theme_material_init+0x1edc>)
   18db2:	fb83 2300 	smull	r2, r3, r3, r0
   18db6:	17c2      	asrs	r2, r0, #31
   18db8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18dbc:	b212      	sxth	r2, r2
   18dbe:	f7fe bd7f 	b.w	178c0 <lv_theme_material_init+0x7d0>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
   18dc2:	2000      	movs	r0, #0
   18dc4:	4b80      	ldr	r3, [pc, #512]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18dc6:	4798      	blx	r3
   18dc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18dcc:	0040      	lsls	r0, r0, #1
   18dce:	3050      	adds	r0, #80	; 0x50
   18dd0:	4b7e      	ldr	r3, [pc, #504]	; (18fcc <lv_theme_material_init+0x1edc>)
   18dd2:	fb83 2300 	smull	r2, r3, r3, r0
   18dd6:	17c2      	asrs	r2, r0, #31
   18dd8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ddc:	b212      	sxth	r2, r2
   18dde:	f7fe bd82 	b.w	178e6 <lv_theme_material_init+0x7f6>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
   18de2:	2000      	movs	r0, #0
   18de4:	4b78      	ldr	r3, [pc, #480]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18de6:	4798      	blx	r3
   18de8:	3014      	adds	r0, #20
   18dea:	0080      	lsls	r0, r0, #2
   18dec:	4b77      	ldr	r3, [pc, #476]	; (18fcc <lv_theme_material_init+0x1edc>)
   18dee:	fb83 2300 	smull	r2, r3, r3, r0
   18df2:	17c2      	asrs	r2, r0, #31
   18df4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18df8:	b212      	sxth	r2, r2
   18dfa:	f7fe bd9a 	b.w	17932 <lv_theme_material_init+0x842>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   18dfe:	2000      	movs	r0, #0
   18e00:	4b71      	ldr	r3, [pc, #452]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18e02:	4798      	blx	r3
   18e04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18e08:	3050      	adds	r0, #80	; 0x50
   18e0a:	4b70      	ldr	r3, [pc, #448]	; (18fcc <lv_theme_material_init+0x1edc>)
   18e0c:	fb83 2300 	smull	r2, r3, r3, r0
   18e10:	17c2      	asrs	r2, r0, #31
   18e12:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e16:	b212      	sxth	r2, r2
   18e18:	f7fe bdb2 	b.w	17980 <lv_theme_material_init+0x890>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   18e1c:	2000      	movs	r0, #0
   18e1e:	4b6a      	ldr	r3, [pc, #424]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18e20:	4798      	blx	r3
   18e22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18e26:	3050      	adds	r0, #80	; 0x50
   18e28:	4b68      	ldr	r3, [pc, #416]	; (18fcc <lv_theme_material_init+0x1edc>)
   18e2a:	fb83 2300 	smull	r2, r3, r3, r0
   18e2e:	17c2      	asrs	r2, r0, #31
   18e30:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e34:	b212      	sxth	r2, r2
   18e36:	f7fe bdb5 	b.w	179a4 <lv_theme_material_init+0x8b4>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   18e3a:	2000      	movs	r0, #0
   18e3c:	4b62      	ldr	r3, [pc, #392]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18e3e:	4798      	blx	r3
   18e40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18e44:	3050      	adds	r0, #80	; 0x50
   18e46:	4b61      	ldr	r3, [pc, #388]	; (18fcc <lv_theme_material_init+0x1edc>)
   18e48:	fb83 2300 	smull	r2, r3, r3, r0
   18e4c:	17c2      	asrs	r2, r0, #31
   18e4e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e52:	b212      	sxth	r2, r2
   18e54:	f7fe bdb8 	b.w	179c8 <lv_theme_material_init+0x8d8>
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
   18e58:	2000      	movs	r0, #0
   18e5a:	4b5b      	ldr	r3, [pc, #364]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18e5c:	4798      	blx	r3
   18e5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18e62:	3050      	adds	r0, #80	; 0x50
   18e64:	4b59      	ldr	r3, [pc, #356]	; (18fcc <lv_theme_material_init+0x1edc>)
   18e66:	fb83 2300 	smull	r2, r3, r3, r0
   18e6a:	17c2      	asrs	r2, r0, #31
   18e6c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e70:	b212      	sxth	r2, r2
   18e72:	f7fe bdbb 	b.w	179ec <lv_theme_material_init+0x8fc>
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
   18e76:	2000      	movs	r0, #0
   18e78:	4b53      	ldr	r3, [pc, #332]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18e7a:	4798      	blx	r3
   18e7c:	3014      	adds	r0, #20
   18e7e:	0080      	lsls	r0, r0, #2
   18e80:	4b52      	ldr	r3, [pc, #328]	; (18fcc <lv_theme_material_init+0x1edc>)
   18e82:	fb83 2300 	smull	r2, r3, r3, r0
   18e86:	17c2      	asrs	r2, r0, #31
   18e88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18e8c:	b212      	sxth	r2, r2
   18e8e:	f7fe bdda 	b.w	17a46 <lv_theme_material_init+0x956>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
   18e92:	2307      	movs	r3, #7
   18e94:	210f      	movs	r1, #15
   18e96:	2408      	movs	r4, #8
   18e98:	f7fe bde9 	b.w	17a6e <lv_theme_material_init+0x97e>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   18e9c:	2000      	movs	r0, #0
   18e9e:	4b4a      	ldr	r3, [pc, #296]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18ea0:	4798      	blx	r3
   18ea2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18ea6:	3050      	adds	r0, #80	; 0x50
   18ea8:	4b48      	ldr	r3, [pc, #288]	; (18fcc <lv_theme_material_init+0x1edc>)
   18eaa:	fb83 2300 	smull	r2, r3, r3, r0
   18eae:	17c2      	asrs	r2, r0, #31
   18eb0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18eb4:	b212      	sxth	r2, r2
   18eb6:	f7fe bdf9 	b.w	17aac <lv_theme_material_init+0x9bc>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   18eba:	2000      	movs	r0, #0
   18ebc:	4b42      	ldr	r3, [pc, #264]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18ebe:	4798      	blx	r3
   18ec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18ec4:	3050      	adds	r0, #80	; 0x50
   18ec6:	4b41      	ldr	r3, [pc, #260]	; (18fcc <lv_theme_material_init+0x1edc>)
   18ec8:	fb83 2300 	smull	r2, r3, r3, r0
   18ecc:	17c2      	asrs	r2, r0, #31
   18ece:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ed2:	b212      	sxth	r2, r2
   18ed4:	f7fe bdfc 	b.w	17ad0 <lv_theme_material_init+0x9e0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
   18ed8:	2000      	movs	r0, #0
   18eda:	4b3b      	ldr	r3, [pc, #236]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18edc:	4798      	blx	r3
   18ede:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18ee2:	3050      	adds	r0, #80	; 0x50
   18ee4:	4b39      	ldr	r3, [pc, #228]	; (18fcc <lv_theme_material_init+0x1edc>)
   18ee6:	fb83 2300 	smull	r2, r3, r3, r0
   18eea:	17c2      	asrs	r2, r0, #31
   18eec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18ef0:	b212      	sxth	r2, r2
   18ef2:	f7fe bdff 	b.w	17af4 <lv_theme_material_init+0xa04>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
   18ef6:	2000      	movs	r0, #0
   18ef8:	4b33      	ldr	r3, [pc, #204]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18efa:	4798      	blx	r3
   18efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18f00:	3050      	adds	r0, #80	; 0x50
   18f02:	4b32      	ldr	r3, [pc, #200]	; (18fcc <lv_theme_material_init+0x1edc>)
   18f04:	fb83 2300 	smull	r2, r3, r3, r0
   18f08:	17c2      	asrs	r2, r0, #31
   18f0a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f0e:	b212      	sxth	r2, r2
   18f10:	f7fe be02 	b.w	17b18 <lv_theme_material_init+0xa28>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
   18f14:	2000      	movs	r0, #0
   18f16:	4b2c      	ldr	r3, [pc, #176]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18f18:	4798      	blx	r3
   18f1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18f1e:	3050      	adds	r0, #80	; 0x50
   18f20:	4b2a      	ldr	r3, [pc, #168]	; (18fcc <lv_theme_material_init+0x1edc>)
   18f22:	fb83 2300 	smull	r2, r3, r3, r0
   18f26:	17c2      	asrs	r2, r0, #31
   18f28:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f2c:	b212      	sxth	r2, r2
   18f2e:	f7fe be05 	b.w	17b3c <lv_theme_material_init+0xa4c>
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
   18f32:	2000      	movs	r0, #0
   18f34:	4b24      	ldr	r3, [pc, #144]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18f36:	4798      	blx	r3
   18f38:	2232      	movs	r2, #50	; 0x32
   18f3a:	fb02 f000 	mul.w	r0, r2, r0
   18f3e:	3050      	adds	r0, #80	; 0x50
   18f40:	4b22      	ldr	r3, [pc, #136]	; (18fcc <lv_theme_material_init+0x1edc>)
   18f42:	fb83 2300 	smull	r2, r3, r3, r0
   18f46:	17c2      	asrs	r2, r0, #31
   18f48:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f4c:	b212      	sxth	r2, r2
   18f4e:	f7fe be0c 	b.w	17b6a <lv_theme_material_init+0xa7a>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
   18f52:	2000      	movs	r0, #0
   18f54:	4b1c      	ldr	r3, [pc, #112]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18f56:	4798      	blx	r3
   18f58:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18f5c:	3050      	adds	r0, #80	; 0x50
   18f5e:	4b1b      	ldr	r3, [pc, #108]	; (18fcc <lv_theme_material_init+0x1edc>)
   18f60:	fb83 2300 	smull	r2, r3, r3, r0
   18f64:	17c2      	asrs	r2, r0, #31
   18f66:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f6a:	b212      	sxth	r2, r2
   18f6c:	f7fe be52 	b.w	17c14 <lv_theme_material_init+0xb24>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   18f70:	2000      	movs	r0, #0
   18f72:	4b15      	ldr	r3, [pc, #84]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18f74:	4798      	blx	r3
   18f76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18f7a:	3050      	adds	r0, #80	; 0x50
   18f7c:	4b13      	ldr	r3, [pc, #76]	; (18fcc <lv_theme_material_init+0x1edc>)
   18f7e:	fb83 2300 	smull	r2, r3, r3, r0
   18f82:	17c2      	asrs	r2, r0, #31
   18f84:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18f88:	b212      	sxth	r2, r2
   18f8a:	f7fe be55 	b.w	17c38 <lv_theme_material_init+0xb48>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
   18f8e:	2000      	movs	r0, #0
   18f90:	4b0d      	ldr	r3, [pc, #52]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18f92:	4798      	blx	r3
   18f94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18f98:	3050      	adds	r0, #80	; 0x50
   18f9a:	4b0c      	ldr	r3, [pc, #48]	; (18fcc <lv_theme_material_init+0x1edc>)
   18f9c:	fb83 2300 	smull	r2, r3, r3, r0
   18fa0:	17c2      	asrs	r2, r0, #31
   18fa2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18fa6:	b212      	sxth	r2, r2
   18fa8:	f7fe be58 	b.w	17c5c <lv_theme_material_init+0xb6c>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
   18fac:	2000      	movs	r0, #0
   18fae:	4b06      	ldr	r3, [pc, #24]	; (18fc8 <lv_theme_material_init+0x1ed8>)
   18fb0:	4798      	blx	r3
   18fb2:	3028      	adds	r0, #40	; 0x28
   18fb4:	0040      	lsls	r0, r0, #1
   18fb6:	4b05      	ldr	r3, [pc, #20]	; (18fcc <lv_theme_material_init+0x1edc>)
   18fb8:	fb83 2300 	smull	r2, r3, r3, r0
   18fbc:	17c2      	asrs	r2, r0, #31
   18fbe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18fc2:	b212      	sxth	r2, r2
   18fc4:	f7fe be91 	b.w	17cea <lv_theme_material_init+0xbfa>
   18fc8:	000114e5 	.word	0x000114e5
   18fcc:	66666667 	.word	0x66666667
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
   18fd0:	2000      	movs	r0, #0
   18fd2:	4bcd      	ldr	r3, [pc, #820]	; (19308 <lv_theme_material_init+0x2218>)
   18fd4:	4798      	blx	r3
   18fd6:	3050      	adds	r0, #80	; 0x50
   18fd8:	4bcc      	ldr	r3, [pc, #816]	; (1930c <lv_theme_material_init+0x221c>)
   18fda:	fb83 2300 	smull	r2, r3, r3, r0
   18fde:	17c2      	asrs	r2, r0, #31
   18fe0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   18fe4:	b212      	sxth	r2, r2
   18fe6:	f7fe be9d 	b.w	17d24 <lv_theme_material_init+0xc34>
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
   18fea:	2315      	movs	r3, #21
   18fec:	212a      	movs	r1, #42	; 0x2a
   18fee:	461c      	mov	r4, r3
   18ff0:	f7fe beb0 	b.w	17d54 <lv_theme_material_init+0xc64>
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   18ff4:	2000      	movs	r0, #0
   18ff6:	4bc4      	ldr	r3, [pc, #784]	; (19308 <lv_theme_material_init+0x2218>)
   18ff8:	4798      	blx	r3
   18ffa:	2264      	movs	r2, #100	; 0x64
   18ffc:	fb02 f000 	mul.w	r0, r2, r0
   19000:	3050      	adds	r0, #80	; 0x50
   19002:	4bc2      	ldr	r3, [pc, #776]	; (1930c <lv_theme_material_init+0x221c>)
   19004:	fb83 2300 	smull	r2, r3, r3, r0
   19008:	17c2      	asrs	r2, r0, #31
   1900a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1900e:	b212      	sxth	r2, r2
   19010:	f7fe bed1 	b.w	17db6 <lv_theme_material_init+0xcc6>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
   19014:	2000      	movs	r0, #0
   19016:	4bbc      	ldr	r3, [pc, #752]	; (19308 <lv_theme_material_init+0x2218>)
   19018:	4798      	blx	r3
   1901a:	2264      	movs	r2, #100	; 0x64
   1901c:	fb02 f000 	mul.w	r0, r2, r0
   19020:	3050      	adds	r0, #80	; 0x50
   19022:	4bba      	ldr	r3, [pc, #744]	; (1930c <lv_theme_material_init+0x221c>)
   19024:	fb83 2300 	smull	r2, r3, r3, r0
   19028:	17c2      	asrs	r2, r0, #31
   1902a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1902e:	b212      	sxth	r2, r2
   19030:	f7fe bed4 	b.w	17ddc <lv_theme_material_init+0xcec>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
   19034:	231f      	movs	r3, #31
   19036:	213f      	movs	r1, #63	; 0x3f
   19038:	461c      	mov	r4, r3
   1903a:	f7fe bf09 	b.w	17e50 <lv_theme_material_init+0xd60>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
   1903e:	231d      	movs	r3, #29
   19040:	213b      	movs	r1, #59	; 0x3b
   19042:	461c      	mov	r4, r3
   19044:	f7fe bf1a 	b.w	17e7c <lv_theme_material_init+0xd8c>
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
   19048:	231f      	movs	r3, #31
   1904a:	213f      	movs	r1, #63	; 0x3f
   1904c:	461c      	mov	r4, r3
   1904e:	f7fe bf2c 	b.w	17eaa <lv_theme_material_init+0xdba>
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   19052:	2307      	movs	r3, #7
   19054:	210f      	movs	r1, #15
   19056:	2408      	movs	r4, #8
   19058:	f7fe bf4f 	b.w	17efa <lv_theme_material_init+0xe0a>
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
   1905c:	2307      	movs	r3, #7
   1905e:	210f      	movs	r1, #15
   19060:	2408      	movs	r4, #8
   19062:	f7fe bf7f 	b.w	17f64 <lv_theme_material_init+0xe74>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   19066:	2000      	movs	r0, #0
   19068:	4ba7      	ldr	r3, [pc, #668]	; (19308 <lv_theme_material_init+0x2218>)
   1906a:	4798      	blx	r3
   1906c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19070:	3050      	adds	r0, #80	; 0x50
   19072:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19076:	da02      	bge.n	1907e <lv_theme_material_init+0x1f8e>
   19078:	2201      	movs	r2, #1
   1907a:	f7fe bfef 	b.w	1805c <lv_theme_material_init+0xf6c>
   1907e:	2000      	movs	r0, #0
   19080:	4ba1      	ldr	r3, [pc, #644]	; (19308 <lv_theme_material_init+0x2218>)
   19082:	4798      	blx	r3
   19084:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19088:	3050      	adds	r0, #80	; 0x50
   1908a:	4ba0      	ldr	r3, [pc, #640]	; (1930c <lv_theme_material_init+0x221c>)
   1908c:	fb83 2300 	smull	r2, r3, r3, r0
   19090:	17c2      	asrs	r2, r0, #31
   19092:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19096:	b212      	sxth	r2, r2
   19098:	f7fe bfe0 	b.w	1805c <lv_theme_material_init+0xf6c>
   1909c:	2000      	movs	r0, #0
   1909e:	4b9a      	ldr	r3, [pc, #616]	; (19308 <lv_theme_material_init+0x2218>)
   190a0:	4798      	blx	r3
   190a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190a6:	0040      	lsls	r0, r0, #1
   190a8:	3050      	adds	r0, #80	; 0x50
   190aa:	4b98      	ldr	r3, [pc, #608]	; (1930c <lv_theme_material_init+0x221c>)
   190ac:	fb83 2300 	smull	r2, r3, r3, r0
   190b0:	17c2      	asrs	r2, r0, #31
   190b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   190b6:	b212      	sxth	r2, r2
   190b8:	f7fe bfd0 	b.w	1805c <lv_theme_material_init+0xf6c>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   190bc:	2000      	movs	r0, #0
   190be:	4b92      	ldr	r3, [pc, #584]	; (19308 <lv_theme_material_init+0x2218>)
   190c0:	4798      	blx	r3
   190c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190c6:	3050      	adds	r0, #80	; 0x50
   190c8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   190cc:	da02      	bge.n	190d4 <lv_theme_material_init+0x1fe4>
   190ce:	2201      	movs	r2, #1
   190d0:	f7fe bfdd 	b.w	1808e <lv_theme_material_init+0xf9e>
   190d4:	2000      	movs	r0, #0
   190d6:	4b8c      	ldr	r3, [pc, #560]	; (19308 <lv_theme_material_init+0x2218>)
   190d8:	4798      	blx	r3
   190da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190de:	3050      	adds	r0, #80	; 0x50
   190e0:	4b8a      	ldr	r3, [pc, #552]	; (1930c <lv_theme_material_init+0x221c>)
   190e2:	fb83 2300 	smull	r2, r3, r3, r0
   190e6:	17c2      	asrs	r2, r0, #31
   190e8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   190ec:	b212      	sxth	r2, r2
   190ee:	f7fe bfce 	b.w	1808e <lv_theme_material_init+0xf9e>
   190f2:	2000      	movs	r0, #0
   190f4:	4b84      	ldr	r3, [pc, #528]	; (19308 <lv_theme_material_init+0x2218>)
   190f6:	4798      	blx	r3
   190f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   190fc:	0040      	lsls	r0, r0, #1
   190fe:	3050      	adds	r0, #80	; 0x50
   19100:	4b82      	ldr	r3, [pc, #520]	; (1930c <lv_theme_material_init+0x221c>)
   19102:	fb83 2300 	smull	r2, r3, r3, r0
   19106:	17c2      	asrs	r2, r0, #31
   19108:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1910c:	b212      	sxth	r2, r2
   1910e:	f7fe bfbe 	b.w	1808e <lv_theme_material_init+0xf9e>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   19112:	2000      	movs	r0, #0
   19114:	4b7c      	ldr	r3, [pc, #496]	; (19308 <lv_theme_material_init+0x2218>)
   19116:	4798      	blx	r3
   19118:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1911c:	3050      	adds	r0, #80	; 0x50
   1911e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19122:	da02      	bge.n	1912a <lv_theme_material_init+0x203a>
   19124:	2201      	movs	r2, #1
   19126:	f7fe bfcb 	b.w	180c0 <lv_theme_material_init+0xfd0>
   1912a:	2000      	movs	r0, #0
   1912c:	4b76      	ldr	r3, [pc, #472]	; (19308 <lv_theme_material_init+0x2218>)
   1912e:	4798      	blx	r3
   19130:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19134:	3050      	adds	r0, #80	; 0x50
   19136:	4b75      	ldr	r3, [pc, #468]	; (1930c <lv_theme_material_init+0x221c>)
   19138:	fb83 2300 	smull	r2, r3, r3, r0
   1913c:	17c2      	asrs	r2, r0, #31
   1913e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19142:	b212      	sxth	r2, r2
   19144:	f7fe bfbc 	b.w	180c0 <lv_theme_material_init+0xfd0>
   19148:	2000      	movs	r0, #0
   1914a:	4b6f      	ldr	r3, [pc, #444]	; (19308 <lv_theme_material_init+0x2218>)
   1914c:	4798      	blx	r3
   1914e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19152:	0040      	lsls	r0, r0, #1
   19154:	3050      	adds	r0, #80	; 0x50
   19156:	4b6d      	ldr	r3, [pc, #436]	; (1930c <lv_theme_material_init+0x221c>)
   19158:	fb83 2300 	smull	r2, r3, r3, r0
   1915c:	17c2      	asrs	r2, r0, #31
   1915e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19162:	b212      	sxth	r2, r2
   19164:	f7fe bfac 	b.w	180c0 <lv_theme_material_init+0xfd0>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   19168:	2000      	movs	r0, #0
   1916a:	4b67      	ldr	r3, [pc, #412]	; (19308 <lv_theme_material_init+0x2218>)
   1916c:	4798      	blx	r3
   1916e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19172:	3050      	adds	r0, #80	; 0x50
   19174:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19178:	da02      	bge.n	19180 <lv_theme_material_init+0x2090>
   1917a:	2201      	movs	r2, #1
   1917c:	f7fe bfb9 	b.w	180f2 <lv_theme_material_init+0x1002>
   19180:	2000      	movs	r0, #0
   19182:	4b61      	ldr	r3, [pc, #388]	; (19308 <lv_theme_material_init+0x2218>)
   19184:	4798      	blx	r3
   19186:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1918a:	3050      	adds	r0, #80	; 0x50
   1918c:	4b5f      	ldr	r3, [pc, #380]	; (1930c <lv_theme_material_init+0x221c>)
   1918e:	fb83 2300 	smull	r2, r3, r3, r0
   19192:	17c2      	asrs	r2, r0, #31
   19194:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19198:	b212      	sxth	r2, r2
   1919a:	f7fe bfaa 	b.w	180f2 <lv_theme_material_init+0x1002>
   1919e:	2000      	movs	r0, #0
   191a0:	4b59      	ldr	r3, [pc, #356]	; (19308 <lv_theme_material_init+0x2218>)
   191a2:	4798      	blx	r3
   191a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   191a8:	0040      	lsls	r0, r0, #1
   191aa:	3050      	adds	r0, #80	; 0x50
   191ac:	4b57      	ldr	r3, [pc, #348]	; (1930c <lv_theme_material_init+0x221c>)
   191ae:	fb83 2300 	smull	r2, r3, r3, r0
   191b2:	17c2      	asrs	r2, r0, #31
   191b4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   191b8:	b212      	sxth	r2, r2
   191ba:	f7fe bf9a 	b.w	180f2 <lv_theme_material_init+0x1002>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
   191be:	2000      	movs	r0, #0
   191c0:	4b51      	ldr	r3, [pc, #324]	; (19308 <lv_theme_material_init+0x2218>)
   191c2:	4798      	blx	r3
   191c4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   191c8:	3050      	adds	r0, #80	; 0x50
   191ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   191ce:	da02      	bge.n	191d6 <lv_theme_material_init+0x20e6>
   191d0:	2201      	movs	r2, #1
   191d2:	f7fe bfa7 	b.w	18124 <lv_theme_material_init+0x1034>
   191d6:	2000      	movs	r0, #0
   191d8:	4b4b      	ldr	r3, [pc, #300]	; (19308 <lv_theme_material_init+0x2218>)
   191da:	4798      	blx	r3
   191dc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   191e0:	3050      	adds	r0, #80	; 0x50
   191e2:	4b4a      	ldr	r3, [pc, #296]	; (1930c <lv_theme_material_init+0x221c>)
   191e4:	fb83 2300 	smull	r2, r3, r3, r0
   191e8:	17c2      	asrs	r2, r0, #31
   191ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   191ee:	b212      	sxth	r2, r2
   191f0:	f7fe bf98 	b.w	18124 <lv_theme_material_init+0x1034>
   191f4:	2000      	movs	r0, #0
   191f6:	4b44      	ldr	r3, [pc, #272]	; (19308 <lv_theme_material_init+0x2218>)
   191f8:	4798      	blx	r3
   191fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   191fe:	0040      	lsls	r0, r0, #1
   19200:	3050      	adds	r0, #80	; 0x50
   19202:	4b42      	ldr	r3, [pc, #264]	; (1930c <lv_theme_material_init+0x221c>)
   19204:	fb83 2300 	smull	r2, r3, r3, r0
   19208:	17c2      	asrs	r2, r0, #31
   1920a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1920e:	b212      	sxth	r2, r2
   19210:	f7fe bf88 	b.w	18124 <lv_theme_material_init+0x1034>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
   19214:	2000      	movs	r0, #0
   19216:	4b3c      	ldr	r3, [pc, #240]	; (19308 <lv_theme_material_init+0x2218>)
   19218:	4798      	blx	r3
   1921a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1921e:	3050      	adds	r0, #80	; 0x50
   19220:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19224:	da03      	bge.n	1922e <lv_theme_material_init+0x213e>
   19226:	f04f 32ff 	mov.w	r2, #4294967295
   1922a:	f7fe bf95 	b.w	18158 <lv_theme_material_init+0x1068>
   1922e:	2000      	movs	r0, #0
   19230:	4b35      	ldr	r3, [pc, #212]	; (19308 <lv_theme_material_init+0x2218>)
   19232:	4798      	blx	r3
   19234:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19238:	3050      	adds	r0, #80	; 0x50
   1923a:	4b34      	ldr	r3, [pc, #208]	; (1930c <lv_theme_material_init+0x221c>)
   1923c:	fb83 2300 	smull	r2, r3, r3, r0
   19240:	17c2      	asrs	r2, r0, #31
   19242:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   19246:	b212      	sxth	r2, r2
   19248:	f7fe bf86 	b.w	18158 <lv_theme_material_init+0x1068>
   1924c:	2000      	movs	r0, #0
   1924e:	4b2e      	ldr	r3, [pc, #184]	; (19308 <lv_theme_material_init+0x2218>)
   19250:	4798      	blx	r3
   19252:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19256:	0040      	lsls	r0, r0, #1
   19258:	3050      	adds	r0, #80	; 0x50
   1925a:	4b2c      	ldr	r3, [pc, #176]	; (1930c <lv_theme_material_init+0x221c>)
   1925c:	fb83 2300 	smull	r2, r3, r3, r0
   19260:	17c2      	asrs	r2, r0, #31
   19262:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
   19266:	b212      	sxth	r2, r2
   19268:	f7fe bf76 	b.w	18158 <lv_theme_material_init+0x1068>
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
   1926c:	2000      	movs	r0, #0
   1926e:	4b26      	ldr	r3, [pc, #152]	; (19308 <lv_theme_material_init+0x2218>)
   19270:	4798      	blx	r3
   19272:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19276:	0080      	lsls	r0, r0, #2
   19278:	3050      	adds	r0, #80	; 0x50
   1927a:	4b24      	ldr	r3, [pc, #144]	; (1930c <lv_theme_material_init+0x221c>)
   1927c:	fb83 2300 	smull	r2, r3, r3, r0
   19280:	17c2      	asrs	r2, r0, #31
   19282:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19286:	b212      	sxth	r2, r2
   19288:	f7fe bf9e 	b.w	181c8 <lv_theme_material_init+0x10d8>
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
   1928c:	231d      	movs	r3, #29
   1928e:	213b      	movs	r1, #59	; 0x3b
   19290:	461c      	mov	r4, r3
   19292:	f7fe bfc5 	b.w	18220 <lv_theme_material_init+0x1130>
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
   19296:	2307      	movs	r3, #7
   19298:	210f      	movs	r1, #15
   1929a:	2408      	movs	r4, #8
   1929c:	f7fe bfd7 	b.w	1824e <lv_theme_material_init+0x115e>
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
   192a0:	2000      	movs	r0, #0
   192a2:	4b19      	ldr	r3, [pc, #100]	; (19308 <lv_theme_material_init+0x2218>)
   192a4:	4798      	blx	r3
   192a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   192aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   192ae:	3050      	adds	r0, #80	; 0x50
   192b0:	4b16      	ldr	r3, [pc, #88]	; (1930c <lv_theme_material_init+0x221c>)
   192b2:	fb83 2300 	smull	r2, r3, r3, r0
   192b6:	17c2      	asrs	r2, r0, #31
   192b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   192bc:	b212      	sxth	r2, r2
   192be:	f7fe bfe6 	b.w	1828e <lv_theme_material_init+0x119e>
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
   192c2:	231f      	movs	r3, #31
   192c4:	213f      	movs	r1, #63	; 0x3f
   192c6:	461c      	mov	r4, r3
   192c8:	f7ff b810 	b.w	182ec <lv_theme_material_init+0x11fc>
    lv_style_set_border_width(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(5));
   192cc:	2000      	movs	r0, #0
   192ce:	4b0e      	ldr	r3, [pc, #56]	; (19308 <lv_theme_material_init+0x2218>)
   192d0:	4798      	blx	r3
   192d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   192d6:	3050      	adds	r0, #80	; 0x50
   192d8:	4b0c      	ldr	r3, [pc, #48]	; (1930c <lv_theme_material_init+0x221c>)
   192da:	fb83 2300 	smull	r2, r3, r3, r0
   192de:	17c2      	asrs	r2, r0, #31
   192e0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   192e4:	b212      	sxth	r2, r2
   192e6:	f7ff b845 	b.w	18374 <lv_theme_material_init+0x1284>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   192ea:	2000      	movs	r0, #0
   192ec:	4b06      	ldr	r3, [pc, #24]	; (19308 <lv_theme_material_init+0x2218>)
   192ee:	4798      	blx	r3
   192f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   192f4:	3050      	adds	r0, #80	; 0x50
   192f6:	4b05      	ldr	r3, [pc, #20]	; (1930c <lv_theme_material_init+0x221c>)
   192f8:	fb83 2300 	smull	r2, r3, r3, r0
   192fc:	17c2      	asrs	r2, r0, #31
   192fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19302:	b212      	sxth	r2, r2
   19304:	f7ff b87f 	b.w	18406 <lv_theme_material_init+0x1316>
   19308:	000114e5 	.word	0x000114e5
   1930c:	66666667 	.word	0x66666667
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   19310:	2000      	movs	r0, #0
   19312:	4bca      	ldr	r3, [pc, #808]	; (1963c <lv_theme_material_init+0x254c>)
   19314:	4798      	blx	r3
   19316:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1931a:	3050      	adds	r0, #80	; 0x50
   1931c:	4bc8      	ldr	r3, [pc, #800]	; (19640 <lv_theme_material_init+0x2550>)
   1931e:	fb83 2300 	smull	r2, r3, r3, r0
   19322:	17c2      	asrs	r2, r0, #31
   19324:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19328:	b212      	sxth	r2, r2
   1932a:	f7ff b87e 	b.w	1842a <lv_theme_material_init+0x133a>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
   1932e:	2000      	movs	r0, #0
   19330:	4bc2      	ldr	r3, [pc, #776]	; (1963c <lv_theme_material_init+0x254c>)
   19332:	4798      	blx	r3
   19334:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   19338:	3050      	adds	r0, #80	; 0x50
   1933a:	4bc1      	ldr	r3, [pc, #772]	; (19640 <lv_theme_material_init+0x2550>)
   1933c:	fb83 2300 	smull	r2, r3, r3, r0
   19340:	17c2      	asrs	r2, r0, #31
   19342:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19346:	b212      	sxth	r2, r2
   19348:	f7ff b881 	b.w	1844e <lv_theme_material_init+0x135e>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   1934c:	2000      	movs	r0, #0
   1934e:	4bbb      	ldr	r3, [pc, #748]	; (1963c <lv_theme_material_init+0x254c>)
   19350:	4798      	blx	r3
   19352:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19356:	0080      	lsls	r0, r0, #2
   19358:	3050      	adds	r0, #80	; 0x50
   1935a:	4bb9      	ldr	r3, [pc, #740]	; (19640 <lv_theme_material_init+0x2550>)
   1935c:	fb83 2300 	smull	r2, r3, r3, r0
   19360:	17c2      	asrs	r2, r0, #31
   19362:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19366:	b212      	sxth	r2, r2
   19368:	f7ff b8ba 	b.w	184e0 <lv_theme_material_init+0x13f0>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
   1936c:	2000      	movs	r0, #0
   1936e:	4bb3      	ldr	r3, [pc, #716]	; (1963c <lv_theme_material_init+0x254c>)
   19370:	4798      	blx	r3
   19372:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19376:	0080      	lsls	r0, r0, #2
   19378:	3050      	adds	r0, #80	; 0x50
   1937a:	4bb1      	ldr	r3, [pc, #708]	; (19640 <lv_theme_material_init+0x2550>)
   1937c:	fb83 2300 	smull	r2, r3, r3, r0
   19380:	17c2      	asrs	r2, r0, #31
   19382:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19386:	b212      	sxth	r2, r2
   19388:	f7ff b8bd 	b.w	18506 <lv_theme_material_init+0x1416>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
   1938c:	2000      	movs	r0, #0
   1938e:	4bab      	ldr	r3, [pc, #684]	; (1963c <lv_theme_material_init+0x254c>)
   19390:	4798      	blx	r3
   19392:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19396:	3050      	adds	r0, #80	; 0x50
   19398:	4ba9      	ldr	r3, [pc, #676]	; (19640 <lv_theme_material_init+0x2550>)
   1939a:	fb83 2300 	smull	r2, r3, r3, r0
   1939e:	17c2      	asrs	r2, r0, #31
   193a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   193a4:	b212      	sxth	r2, r2
   193a6:	f7ff b8e2 	b.w	1856e <lv_theme_material_init+0x147e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   193aa:	2000      	movs	r0, #0
   193ac:	4ba3      	ldr	r3, [pc, #652]	; (1963c <lv_theme_material_init+0x254c>)
   193ae:	4798      	blx	r3
   193b0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   193b4:	3050      	adds	r0, #80	; 0x50
   193b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   193ba:	da02      	bge.n	193c2 <lv_theme_material_init+0x22d2>
   193bc:	2201      	movs	r2, #1
   193be:	f7ff b8f9 	b.w	185b4 <lv_theme_material_init+0x14c4>
   193c2:	2000      	movs	r0, #0
   193c4:	4b9d      	ldr	r3, [pc, #628]	; (1963c <lv_theme_material_init+0x254c>)
   193c6:	4798      	blx	r3
   193c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   193cc:	3050      	adds	r0, #80	; 0x50
   193ce:	4b9c      	ldr	r3, [pc, #624]	; (19640 <lv_theme_material_init+0x2550>)
   193d0:	fb83 2300 	smull	r2, r3, r3, r0
   193d4:	17c2      	asrs	r2, r0, #31
   193d6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   193da:	b212      	sxth	r2, r2
   193dc:	f7ff b8ea 	b.w	185b4 <lv_theme_material_init+0x14c4>
   193e0:	2000      	movs	r0, #0
   193e2:	4b96      	ldr	r3, [pc, #600]	; (1963c <lv_theme_material_init+0x254c>)
   193e4:	4798      	blx	r3
   193e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   193ea:	0040      	lsls	r0, r0, #1
   193ec:	3050      	adds	r0, #80	; 0x50
   193ee:	4b94      	ldr	r3, [pc, #592]	; (19640 <lv_theme_material_init+0x2550>)
   193f0:	fb83 2300 	smull	r2, r3, r3, r0
   193f4:	17c2      	asrs	r2, r0, #31
   193f6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   193fa:	b212      	sxth	r2, r2
   193fc:	f7ff b8da 	b.w	185b4 <lv_theme_material_init+0x14c4>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   19400:	2000      	movs	r0, #0
   19402:	4b8e      	ldr	r3, [pc, #568]	; (1963c <lv_theme_material_init+0x254c>)
   19404:	4798      	blx	r3
   19406:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1940a:	3050      	adds	r0, #80	; 0x50
   1940c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19410:	da02      	bge.n	19418 <lv_theme_material_init+0x2328>
   19412:	2201      	movs	r2, #1
   19414:	f7ff b8e7 	b.w	185e6 <lv_theme_material_init+0x14f6>
   19418:	2000      	movs	r0, #0
   1941a:	4b88      	ldr	r3, [pc, #544]	; (1963c <lv_theme_material_init+0x254c>)
   1941c:	4798      	blx	r3
   1941e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19422:	3050      	adds	r0, #80	; 0x50
   19424:	4b86      	ldr	r3, [pc, #536]	; (19640 <lv_theme_material_init+0x2550>)
   19426:	fb83 2300 	smull	r2, r3, r3, r0
   1942a:	17c2      	asrs	r2, r0, #31
   1942c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19430:	b212      	sxth	r2, r2
   19432:	f7ff b8d8 	b.w	185e6 <lv_theme_material_init+0x14f6>
   19436:	2000      	movs	r0, #0
   19438:	4b80      	ldr	r3, [pc, #512]	; (1963c <lv_theme_material_init+0x254c>)
   1943a:	4798      	blx	r3
   1943c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19440:	0040      	lsls	r0, r0, #1
   19442:	3050      	adds	r0, #80	; 0x50
   19444:	4b7e      	ldr	r3, [pc, #504]	; (19640 <lv_theme_material_init+0x2550>)
   19446:	fb83 2300 	smull	r2, r3, r3, r0
   1944a:	17c2      	asrs	r2, r0, #31
   1944c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19450:	b212      	sxth	r2, r2
   19452:	f7ff b8c8 	b.w	185e6 <lv_theme_material_init+0x14f6>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   19456:	2000      	movs	r0, #0
   19458:	4b78      	ldr	r3, [pc, #480]	; (1963c <lv_theme_material_init+0x254c>)
   1945a:	4798      	blx	r3
   1945c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19460:	3050      	adds	r0, #80	; 0x50
   19462:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19466:	da02      	bge.n	1946e <lv_theme_material_init+0x237e>
   19468:	2201      	movs	r2, #1
   1946a:	f7ff b8d5 	b.w	18618 <lv_theme_material_init+0x1528>
   1946e:	2000      	movs	r0, #0
   19470:	4b72      	ldr	r3, [pc, #456]	; (1963c <lv_theme_material_init+0x254c>)
   19472:	4798      	blx	r3
   19474:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19478:	3050      	adds	r0, #80	; 0x50
   1947a:	4b71      	ldr	r3, [pc, #452]	; (19640 <lv_theme_material_init+0x2550>)
   1947c:	fb83 2300 	smull	r2, r3, r3, r0
   19480:	17c2      	asrs	r2, r0, #31
   19482:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19486:	b212      	sxth	r2, r2
   19488:	f7ff b8c6 	b.w	18618 <lv_theme_material_init+0x1528>
   1948c:	2000      	movs	r0, #0
   1948e:	4b6b      	ldr	r3, [pc, #428]	; (1963c <lv_theme_material_init+0x254c>)
   19490:	4798      	blx	r3
   19492:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19496:	0040      	lsls	r0, r0, #1
   19498:	3050      	adds	r0, #80	; 0x50
   1949a:	4b69      	ldr	r3, [pc, #420]	; (19640 <lv_theme_material_init+0x2550>)
   1949c:	fb83 2300 	smull	r2, r3, r3, r0
   194a0:	17c2      	asrs	r2, r0, #31
   194a2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   194a6:	b212      	sxth	r2, r2
   194a8:	f7ff b8b6 	b.w	18618 <lv_theme_material_init+0x1528>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   194ac:	2000      	movs	r0, #0
   194ae:	4b63      	ldr	r3, [pc, #396]	; (1963c <lv_theme_material_init+0x254c>)
   194b0:	4798      	blx	r3
   194b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   194b6:	3050      	adds	r0, #80	; 0x50
   194b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   194bc:	da02      	bge.n	194c4 <lv_theme_material_init+0x23d4>
   194be:	2201      	movs	r2, #1
   194c0:	f7ff b8d4 	b.w	1866c <lv_theme_material_init+0x157c>
   194c4:	2000      	movs	r0, #0
   194c6:	4b5d      	ldr	r3, [pc, #372]	; (1963c <lv_theme_material_init+0x254c>)
   194c8:	4798      	blx	r3
   194ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   194ce:	3050      	adds	r0, #80	; 0x50
   194d0:	4b5b      	ldr	r3, [pc, #364]	; (19640 <lv_theme_material_init+0x2550>)
   194d2:	fb83 2300 	smull	r2, r3, r3, r0
   194d6:	17c2      	asrs	r2, r0, #31
   194d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   194dc:	b212      	sxth	r2, r2
   194de:	f7ff b8c5 	b.w	1866c <lv_theme_material_init+0x157c>
   194e2:	2000      	movs	r0, #0
   194e4:	4b55      	ldr	r3, [pc, #340]	; (1963c <lv_theme_material_init+0x254c>)
   194e6:	4798      	blx	r3
   194e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   194ec:	0040      	lsls	r0, r0, #1
   194ee:	3050      	adds	r0, #80	; 0x50
   194f0:	4b53      	ldr	r3, [pc, #332]	; (19640 <lv_theme_material_init+0x2550>)
   194f2:	fb83 2300 	smull	r2, r3, r3, r0
   194f6:	17c2      	asrs	r2, r0, #31
   194f8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   194fc:	b212      	sxth	r2, r2
   194fe:	f7ff b8b5 	b.w	1866c <lv_theme_material_init+0x157c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
   19502:	2000      	movs	r0, #0
   19504:	4b4d      	ldr	r3, [pc, #308]	; (1963c <lv_theme_material_init+0x254c>)
   19506:	4798      	blx	r3
   19508:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1950c:	3050      	adds	r0, #80	; 0x50
   1950e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19512:	da02      	bge.n	1951a <lv_theme_material_init+0x242a>
   19514:	2201      	movs	r2, #1
   19516:	f7ff b8c2 	b.w	1869e <lv_theme_material_init+0x15ae>
   1951a:	2000      	movs	r0, #0
   1951c:	4b47      	ldr	r3, [pc, #284]	; (1963c <lv_theme_material_init+0x254c>)
   1951e:	4798      	blx	r3
   19520:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19524:	3050      	adds	r0, #80	; 0x50
   19526:	4b46      	ldr	r3, [pc, #280]	; (19640 <lv_theme_material_init+0x2550>)
   19528:	fb83 2300 	smull	r2, r3, r3, r0
   1952c:	17c2      	asrs	r2, r0, #31
   1952e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19532:	b212      	sxth	r2, r2
   19534:	f7ff b8b3 	b.w	1869e <lv_theme_material_init+0x15ae>
   19538:	2000      	movs	r0, #0
   1953a:	4b40      	ldr	r3, [pc, #256]	; (1963c <lv_theme_material_init+0x254c>)
   1953c:	4798      	blx	r3
   1953e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19542:	0040      	lsls	r0, r0, #1
   19544:	3050      	adds	r0, #80	; 0x50
   19546:	4b3e      	ldr	r3, [pc, #248]	; (19640 <lv_theme_material_init+0x2550>)
   19548:	fb83 2300 	smull	r2, r3, r3, r0
   1954c:	17c2      	asrs	r2, r0, #31
   1954e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19552:	b212      	sxth	r2, r2
   19554:	f7ff b8a3 	b.w	1869e <lv_theme_material_init+0x15ae>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   19558:	2000      	movs	r0, #0
   1955a:	4b38      	ldr	r3, [pc, #224]	; (1963c <lv_theme_material_init+0x254c>)
   1955c:	4798      	blx	r3
   1955e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19562:	3050      	adds	r0, #80	; 0x50
   19564:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19568:	da02      	bge.n	19570 <lv_theme_material_init+0x2480>
   1956a:	2201      	movs	r2, #1
   1956c:	f7ff b8d9 	b.w	18722 <lv_theme_material_init+0x1632>
   19570:	2000      	movs	r0, #0
   19572:	4b32      	ldr	r3, [pc, #200]	; (1963c <lv_theme_material_init+0x254c>)
   19574:	4798      	blx	r3
   19576:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1957a:	3050      	adds	r0, #80	; 0x50
   1957c:	4b30      	ldr	r3, [pc, #192]	; (19640 <lv_theme_material_init+0x2550>)
   1957e:	fb83 2300 	smull	r2, r3, r3, r0
   19582:	17c2      	asrs	r2, r0, #31
   19584:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19588:	b212      	sxth	r2, r2
   1958a:	f7ff b8ca 	b.w	18722 <lv_theme_material_init+0x1632>
   1958e:	2000      	movs	r0, #0
   19590:	4b2a      	ldr	r3, [pc, #168]	; (1963c <lv_theme_material_init+0x254c>)
   19592:	4798      	blx	r3
   19594:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19598:	0040      	lsls	r0, r0, #1
   1959a:	3050      	adds	r0, #80	; 0x50
   1959c:	4b28      	ldr	r3, [pc, #160]	; (19640 <lv_theme_material_init+0x2550>)
   1959e:	fb83 2300 	smull	r2, r3, r3, r0
   195a2:	17c2      	asrs	r2, r0, #31
   195a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   195a8:	b212      	sxth	r2, r2
   195aa:	f7ff b8ba 	b.w	18722 <lv_theme_material_init+0x1632>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   195ae:	2000      	movs	r0, #0
   195b0:	4b22      	ldr	r3, [pc, #136]	; (1963c <lv_theme_material_init+0x254c>)
   195b2:	4798      	blx	r3
   195b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   195b8:	3050      	adds	r0, #80	; 0x50
   195ba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   195be:	da02      	bge.n	195c6 <lv_theme_material_init+0x24d6>
   195c0:	2201      	movs	r2, #1
   195c2:	f7ff b8c7 	b.w	18754 <lv_theme_material_init+0x1664>
   195c6:	2000      	movs	r0, #0
   195c8:	4b1c      	ldr	r3, [pc, #112]	; (1963c <lv_theme_material_init+0x254c>)
   195ca:	4798      	blx	r3
   195cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   195d0:	3050      	adds	r0, #80	; 0x50
   195d2:	4b1b      	ldr	r3, [pc, #108]	; (19640 <lv_theme_material_init+0x2550>)
   195d4:	fb83 2300 	smull	r2, r3, r3, r0
   195d8:	17c2      	asrs	r2, r0, #31
   195da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   195de:	b212      	sxth	r2, r2
   195e0:	f7ff b8b8 	b.w	18754 <lv_theme_material_init+0x1664>
   195e4:	2000      	movs	r0, #0
   195e6:	4b15      	ldr	r3, [pc, #84]	; (1963c <lv_theme_material_init+0x254c>)
   195e8:	4798      	blx	r3
   195ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   195ee:	0040      	lsls	r0, r0, #1
   195f0:	3050      	adds	r0, #80	; 0x50
   195f2:	4b13      	ldr	r3, [pc, #76]	; (19640 <lv_theme_material_init+0x2550>)
   195f4:	fb83 2300 	smull	r2, r3, r3, r0
   195f8:	17c2      	asrs	r2, r0, #31
   195fa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   195fe:	b212      	sxth	r2, r2
   19600:	f7ff b8a8 	b.w	18754 <lv_theme_material_init+0x1664>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   19604:	2000      	movs	r0, #0
   19606:	4b0d      	ldr	r3, [pc, #52]	; (1963c <lv_theme_material_init+0x254c>)
   19608:	4798      	blx	r3
   1960a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1960e:	3050      	adds	r0, #80	; 0x50
   19610:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19614:	da02      	bge.n	1961c <lv_theme_material_init+0x252c>
   19616:	2201      	movs	r2, #1
   19618:	f7ff b8b5 	b.w	18786 <lv_theme_material_init+0x1696>
   1961c:	2000      	movs	r0, #0
   1961e:	4b07      	ldr	r3, [pc, #28]	; (1963c <lv_theme_material_init+0x254c>)
   19620:	4798      	blx	r3
   19622:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19626:	3050      	adds	r0, #80	; 0x50
   19628:	4b05      	ldr	r3, [pc, #20]	; (19640 <lv_theme_material_init+0x2550>)
   1962a:	fb83 2300 	smull	r2, r3, r3, r0
   1962e:	17c2      	asrs	r2, r0, #31
   19630:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19634:	b212      	sxth	r2, r2
   19636:	f7ff b8a6 	b.w	18786 <lv_theme_material_init+0x1696>
   1963a:	bf00      	nop
   1963c:	000114e5 	.word	0x000114e5
   19640:	66666667 	.word	0x66666667
   19644:	2000      	movs	r0, #0
   19646:	4b1d      	ldr	r3, [pc, #116]	; (196bc <lv_theme_material_init+0x25cc>)
   19648:	4798      	blx	r3
   1964a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1964e:	0040      	lsls	r0, r0, #1
   19650:	3050      	adds	r0, #80	; 0x50
   19652:	4b1b      	ldr	r3, [pc, #108]	; (196c0 <lv_theme_material_init+0x25d0>)
   19654:	fb83 2300 	smull	r2, r3, r3, r0
   19658:	17c2      	asrs	r2, r0, #31
   1965a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   1965e:	b212      	sxth	r2, r2
   19660:	f7ff b891 	b.w	18786 <lv_theme_material_init+0x1696>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
   19664:	2000      	movs	r0, #0
   19666:	4b15      	ldr	r3, [pc, #84]	; (196bc <lv_theme_material_init+0x25cc>)
   19668:	4798      	blx	r3
   1966a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1966e:	3050      	adds	r0, #80	; 0x50
   19670:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   19674:	da02      	bge.n	1967c <lv_theme_material_init+0x258c>
   19676:	2201      	movs	r2, #1
   19678:	f7ff b89e 	b.w	187b8 <lv_theme_material_init+0x16c8>
   1967c:	2000      	movs	r0, #0
   1967e:	4b0f      	ldr	r3, [pc, #60]	; (196bc <lv_theme_material_init+0x25cc>)
   19680:	4798      	blx	r3
   19682:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   19686:	3050      	adds	r0, #80	; 0x50
   19688:	4b0d      	ldr	r3, [pc, #52]	; (196c0 <lv_theme_material_init+0x25d0>)
   1968a:	fb83 2300 	smull	r2, r3, r3, r0
   1968e:	17c2      	asrs	r2, r0, #31
   19690:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   19694:	b212      	sxth	r2, r2
   19696:	f7ff b88f 	b.w	187b8 <lv_theme_material_init+0x16c8>
   1969a:	2000      	movs	r0, #0
   1969c:	4b07      	ldr	r3, [pc, #28]	; (196bc <lv_theme_material_init+0x25cc>)
   1969e:	4798      	blx	r3
   196a0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   196a4:	0040      	lsls	r0, r0, #1
   196a6:	3050      	adds	r0, #80	; 0x50
   196a8:	4b05      	ldr	r3, [pc, #20]	; (196c0 <lv_theme_material_init+0x25d0>)
   196aa:	fb83 2300 	smull	r2, r3, r3, r0
   196ae:	17c2      	asrs	r2, r0, #31
   196b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
   196b4:	b212      	sxth	r2, r2
   196b6:	f7ff b87f 	b.w	187b8 <lv_theme_material_init+0x16c8>
   196ba:	bf00      	nop
   196bc:	000114e5 	.word	0x000114e5
   196c0:	66666667 	.word	0x66666667

000196c4 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   196c4:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   196c6:	4b09      	ldr	r3, [pc, #36]	; (196ec <lv_label_dot_tmp_free+0x28>)
   196c8:	4798      	blx	r3
   196ca:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   196cc:	7c43      	ldrb	r3, [r0, #17]
   196ce:	f013 0f01 	tst.w	r3, #1
   196d2:	d003      	beq.n	196dc <lv_label_dot_tmp_free+0x18>
   196d4:	6840      	ldr	r0, [r0, #4]
   196d6:	b108      	cbz	r0, 196dc <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
   196d8:	4b05      	ldr	r3, [pc, #20]	; (196f0 <lv_label_dot_tmp_free+0x2c>)
   196da:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
   196dc:	7c63      	ldrb	r3, [r4, #17]
   196de:	f36f 0300 	bfc	r3, #0, #1
   196e2:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
   196e4:	2300      	movs	r3, #0
   196e6:	6063      	str	r3, [r4, #4]
   196e8:	bd10      	pop	{r4, pc}
   196ea:	bf00      	nop
   196ec:	00005425 	.word	0x00005425
   196f0:	00012a6d 	.word	0x00012a6d

000196f4 <lv_label_revert_dots>:
{
   196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196f6:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   196f8:	4b1e      	ldr	r3, [pc, #120]	; (19774 <lv_label_revert_dots+0x80>)
   196fa:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   196fc:	7c03      	ldrb	r3, [r0, #16]
   196fe:	f003 0307 	and.w	r3, r3, #7
   19702:	2b02      	cmp	r3, #2
   19704:	d000      	beq.n	19708 <lv_label_revert_dots+0x14>
   19706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19708:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   1970a:	8901      	ldrh	r1, [r0, #8]
   1970c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19710:	4299      	cmp	r1, r3
   19712:	d0f8      	beq.n	19706 <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
   19714:	4b18      	ldr	r3, [pc, #96]	; (19778 <lv_label_revert_dots+0x84>)
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	3903      	subs	r1, #3
   1971a:	6800      	ldr	r0, [r0, #0]
   1971c:	4798      	blx	r3
   1971e:	4606      	mov	r6, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19720:	4638      	mov	r0, r7
   19722:	4b14      	ldr	r3, [pc, #80]	; (19774 <lv_label_revert_dots+0x80>)
   19724:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
   19726:	7c43      	ldrb	r3, [r0, #17]
   19728:	f013 0f01 	tst.w	r3, #1
        return ext->dot.tmp_ptr;
   1972c:	bf14      	ite	ne
   1972e:	6840      	ldrne	r0, [r0, #4]
        return ext->dot.tmp;
   19730:	3004      	addeq	r0, #4
    while(ext->text[byte_i + i] != '\0') {
   19732:	6823      	ldr	r3, [r4, #0]
   19734:	eb03 0e06 	add.w	lr, r3, r6
   19738:	5d9b      	ldrb	r3, [r3, r6]
   1973a:	b1c3      	cbz	r3, 1976e <lv_label_revert_dots+0x7a>
   1973c:	2500      	movs	r5, #0
   1973e:	462b      	mov	r3, r5
        ext->text[byte_i + i] = dot_tmp[i];
   19740:	5d42      	ldrb	r2, [r0, r5]
   19742:	f88e 2000 	strb.w	r2, [lr]
        i++;
   19746:	3301      	adds	r3, #1
   19748:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
   1974a:	461d      	mov	r5, r3
   1974c:	18f2      	adds	r2, r6, r3
   1974e:	6821      	ldr	r1, [r4, #0]
   19750:	eb01 0e02 	add.w	lr, r1, r2
   19754:	5c8a      	ldrb	r2, [r1, r2]
   19756:	2a00      	cmp	r2, #0
   19758:	d1f2      	bne.n	19740 <lv_label_revert_dots+0x4c>
    ext->text[byte_i + i] = dot_tmp[i];
   1975a:	5d43      	ldrb	r3, [r0, r5]
   1975c:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
   19760:	4638      	mov	r0, r7
   19762:	4b06      	ldr	r3, [pc, #24]	; (1977c <lv_label_revert_dots+0x88>)
   19764:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
   19766:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1976a:	8123      	strh	r3, [r4, #8]
   1976c:	e7cb      	b.n	19706 <lv_label_revert_dots+0x12>
    while(ext->text[byte_i + i] != '\0') {
   1976e:	2500      	movs	r5, #0
   19770:	e7f3      	b.n	1975a <lv_label_revert_dots+0x66>
   19772:	bf00      	nop
   19774:	00005425 	.word	0x00005425
   19778:	2000005c 	.word	0x2000005c
   1977c:	000196c5 	.word	0x000196c5

00019780 <lv_label_set_offset_y>:
{
   19780:	b538      	push	{r3, r4, r5, lr}
   19782:	4604      	mov	r4, r0
   19784:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19786:	4b03      	ldr	r3, [pc, #12]	; (19794 <lv_label_set_offset_y+0x14>)
   19788:	4798      	blx	r3
    ext->offset.y        = y;
   1978a:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
   1978c:	4620      	mov	r0, r4
   1978e:	4b02      	ldr	r3, [pc, #8]	; (19798 <lv_label_set_offset_y+0x18>)
   19790:	4798      	blx	r3
   19792:	bd38      	pop	{r3, r4, r5, pc}
   19794:	00005425 	.word	0x00005425
   19798:	000039a9 	.word	0x000039a9

0001979c <lv_label_set_offset_x>:
{
   1979c:	b538      	push	{r3, r4, r5, lr}
   1979e:	4604      	mov	r4, r0
   197a0:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   197a2:	4b03      	ldr	r3, [pc, #12]	; (197b0 <lv_label_set_offset_x+0x14>)
   197a4:	4798      	blx	r3
    ext->offset.x        = x;
   197a6:	8185      	strh	r5, [r0, #12]
    lv_obj_invalidate(label);
   197a8:	4620      	mov	r0, r4
   197aa:	4b02      	ldr	r3, [pc, #8]	; (197b4 <lv_label_set_offset_x+0x18>)
   197ac:	4798      	blx	r3
   197ae:	bd38      	pop	{r3, r4, r5, pc}
   197b0:	00005425 	.word	0x00005425
   197b4:	000039a9 	.word	0x000039a9

000197b8 <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
   197b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   197bc:	4606      	mov	r6, r0
   197be:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
   197c0:	4b12      	ldr	r3, [pc, #72]	; (1980c <get_txt_coords+0x54>)
   197c2:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   197c4:	2212      	movs	r2, #18
   197c6:	2100      	movs	r1, #0
   197c8:	4630      	mov	r0, r6
   197ca:	4d11      	ldr	r5, [pc, #68]	; (19810 <get_txt_coords+0x58>)
   197cc:	47a8      	blx	r5
   197ce:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   197d0:	2213      	movs	r2, #19
   197d2:	2100      	movs	r1, #0
   197d4:	4630      	mov	r0, r6
   197d6:	47a8      	blx	r5
   197d8:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   197da:	2210      	movs	r2, #16
   197dc:	2100      	movs	r1, #0
   197de:	4630      	mov	r0, r6
   197e0:	47a8      	blx	r5
   197e2:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   197e4:	2211      	movs	r2, #17
   197e6:	2100      	movs	r1, #0
   197e8:	4630      	mov	r0, r6
   197ea:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
   197ec:	8823      	ldrh	r3, [r4, #0]
   197ee:	4498      	add	r8, r3
   197f0:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
   197f4:	88a3      	ldrh	r3, [r4, #4]
   197f6:	eba3 0309 	sub.w	r3, r3, r9
   197fa:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
   197fc:	8863      	ldrh	r3, [r4, #2]
   197fe:	441f      	add	r7, r3
   19800:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
   19802:	88e3      	ldrh	r3, [r4, #6]
   19804:	1a18      	subs	r0, r3, r0
   19806:	80e0      	strh	r0, [r4, #6]
   19808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1980c:	000034c9 	.word	0x000034c9
   19810:	00004b5d 	.word	0x00004b5d

00019814 <lv_label_set_dot_tmp>:
{
   19814:	b5f0      	push	{r4, r5, r6, r7, lr}
   19816:	b083      	sub	sp, #12
   19818:	4606      	mov	r6, r0
   1981a:	460f      	mov	r7, r1
   1981c:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1981e:	4b18      	ldr	r3, [pc, #96]	; (19880 <lv_label_set_dot_tmp+0x6c>)
   19820:	4798      	blx	r3
   19822:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   19824:	4630      	mov	r0, r6
   19826:	4b17      	ldr	r3, [pc, #92]	; (19884 <lv_label_set_dot_tmp+0x70>)
   19828:	4798      	blx	r3
    if(len > sizeof(char *)) {
   1982a:	2d04      	cmp	r5, #4
   1982c:	d91c      	bls.n	19868 <lv_label_set_dot_tmp+0x54>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   1982e:	1c68      	adds	r0, r5, #1
   19830:	4b15      	ldr	r3, [pc, #84]	; (19888 <lv_label_set_dot_tmp+0x74>)
   19832:	4798      	blx	r3
   19834:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
   19836:	b160      	cbz	r0, 19852 <lv_label_set_dot_tmp+0x3e>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
   19838:	462a      	mov	r2, r5
   1983a:	4639      	mov	r1, r7
   1983c:	4b13      	ldr	r3, [pc, #76]	; (1988c <lv_label_set_dot_tmp+0x78>)
   1983e:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
   19840:	6863      	ldr	r3, [r4, #4]
   19842:	2200      	movs	r2, #0
   19844:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
   19846:	7c63      	ldrb	r3, [r4, #17]
   19848:	f043 0301 	orr.w	r3, r3, #1
   1984c:	7463      	strb	r3, [r4, #17]
    return true;
   1984e:	2001      	movs	r0, #1
   19850:	e014      	b.n	1987c <lv_label_set_dot_tmp+0x68>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
   19852:	4b0f      	ldr	r3, [pc, #60]	; (19890 <lv_label_set_dot_tmp+0x7c>)
   19854:	9300      	str	r3, [sp, #0]
   19856:	4b0f      	ldr	r3, [pc, #60]	; (19894 <lv_label_set_dot_tmp+0x80>)
   19858:	f240 52b5 	movw	r2, #1461	; 0x5b5
   1985c:	490e      	ldr	r1, [pc, #56]	; (19898 <lv_label_set_dot_tmp+0x84>)
   1985e:	2003      	movs	r0, #3
   19860:	4c0e      	ldr	r4, [pc, #56]	; (1989c <lv_label_set_dot_tmp+0x88>)
   19862:	47a0      	blx	r4
            return false;
   19864:	2000      	movs	r0, #0
   19866:	e009      	b.n	1987c <lv_label_set_dot_tmp+0x68>
        ext->dot_tmp_alloc = false;
   19868:	7c63      	ldrb	r3, [r4, #17]
   1986a:	f36f 0300 	bfc	r3, #0, #1
   1986e:	7463      	strb	r3, [r4, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
   19870:	462a      	mov	r2, r5
   19872:	4639      	mov	r1, r7
   19874:	1d20      	adds	r0, r4, #4
   19876:	4b05      	ldr	r3, [pc, #20]	; (1988c <lv_label_set_dot_tmp+0x78>)
   19878:	4798      	blx	r3
    return true;
   1987a:	2001      	movs	r0, #1
}
   1987c:	b003      	add	sp, #12
   1987e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19880:	00005425 	.word	0x00005425
   19884:	000196c5 	.word	0x000196c5
   19888:	00012985 	.word	0x00012985
   1988c:	00012bfd 	.word	0x00012bfd
   19890:	00020cc4 	.word	0x00020cc4
   19894:	00020a74 	.word	0x00020a74
   19898:	00020c94 	.word	0x00020c94
   1989c:	00012805 	.word	0x00012805

000198a0 <lv_label_set_align>:
{
   198a0:	b530      	push	{r4, r5, lr}
   198a2:	b083      	sub	sp, #12
   198a4:	4604      	mov	r4, r0
   198a6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   198a8:	4b10      	ldr	r3, [pc, #64]	; (198ec <lv_label_set_align+0x4c>)
   198aa:	4798      	blx	r3
   198ac:	b968      	cbnz	r0, 198ca <lv_label_set_align+0x2a>
   198ae:	4b10      	ldr	r3, [pc, #64]	; (198f0 <lv_label_set_align+0x50>)
   198b0:	9300      	str	r3, [sp, #0]
   198b2:	f44f 72c4 	mov.w	r2, #392	; 0x188
   198b6:	490f      	ldr	r1, [pc, #60]	; (198f4 <lv_label_set_align+0x54>)
   198b8:	2003      	movs	r0, #3
   198ba:	4d0f      	ldr	r5, [pc, #60]	; (198f8 <lv_label_set_align+0x58>)
   198bc:	47a8      	blx	r5
   198be:	4622      	mov	r2, r4
   198c0:	2300      	movs	r3, #0
   198c2:	480e      	ldr	r0, [pc, #56]	; (198fc <lv_label_set_align+0x5c>)
   198c4:	490e      	ldr	r1, [pc, #56]	; (19900 <lv_label_set_align+0x60>)
   198c6:	4788      	blx	r1
   198c8:	e7fe      	b.n	198c8 <lv_label_set_align+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   198ca:	4620      	mov	r0, r4
   198cc:	4b0d      	ldr	r3, [pc, #52]	; (19904 <lv_label_set_align+0x64>)
   198ce:	4798      	blx	r3
    if(ext->align == align) return;
   198d0:	7c03      	ldrb	r3, [r0, #16]
   198d2:	f3c3 1301 	ubfx	r3, r3, #4, #2
   198d6:	42ab      	cmp	r3, r5
   198d8:	d006      	beq.n	198e8 <lv_label_set_align+0x48>
    ext->align = align;
   198da:	7c03      	ldrb	r3, [r0, #16]
   198dc:	f365 1305 	bfi	r3, r5, #4, #2
   198e0:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   198e2:	4620      	mov	r0, r4
   198e4:	4b08      	ldr	r3, [pc, #32]	; (19908 <lv_label_set_align+0x68>)
   198e6:	4798      	blx	r3
}
   198e8:	b003      	add	sp, #12
   198ea:	bd30      	pop	{r4, r5, pc}
   198ec:	0000298d 	.word	0x0000298d
   198f0:	00020a8c 	.word	0x00020a8c
   198f4:	00020c94 	.word	0x00020c94
   198f8:	00012805 	.word	0x00012805
   198fc:	0001bd20 	.word	0x0001bd20
   19900:	00002995 	.word	0x00002995
   19904:	00005425 	.word	0x00005425
   19908:	000039a9 	.word	0x000039a9

0001990c <lv_label_get_text>:
{
   1990c:	b530      	push	{r4, r5, lr}
   1990e:	b083      	sub	sp, #12
   19910:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19912:	4b0b      	ldr	r3, [pc, #44]	; (19940 <lv_label_get_text+0x34>)
   19914:	4798      	blx	r3
   19916:	b968      	cbnz	r0, 19934 <lv_label_get_text+0x28>
   19918:	4b0a      	ldr	r3, [pc, #40]	; (19944 <lv_label_get_text+0x38>)
   1991a:	9300      	str	r3, [sp, #0]
   1991c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
   19920:	4909      	ldr	r1, [pc, #36]	; (19948 <lv_label_get_text+0x3c>)
   19922:	2003      	movs	r0, #3
   19924:	4d09      	ldr	r5, [pc, #36]	; (1994c <lv_label_get_text+0x40>)
   19926:	47a8      	blx	r5
   19928:	4622      	mov	r2, r4
   1992a:	2300      	movs	r3, #0
   1992c:	4808      	ldr	r0, [pc, #32]	; (19950 <lv_label_get_text+0x44>)
   1992e:	4909      	ldr	r1, [pc, #36]	; (19954 <lv_label_get_text+0x48>)
   19930:	4788      	blx	r1
   19932:	e7fe      	b.n	19932 <lv_label_get_text+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19934:	4620      	mov	r0, r4
   19936:	4b08      	ldr	r3, [pc, #32]	; (19958 <lv_label_get_text+0x4c>)
   19938:	4798      	blx	r3
}
   1993a:	6800      	ldr	r0, [r0, #0]
   1993c:	b003      	add	sp, #12
   1993e:	bd30      	pop	{r4, r5, pc}
   19940:	0000298d 	.word	0x0000298d
   19944:	00020ad8 	.word	0x00020ad8
   19948:	00020c94 	.word	0x00020c94
   1994c:	00012805 	.word	0x00012805
   19950:	0001bd20 	.word	0x0001bd20
   19954:	00002995 	.word	0x00002995
   19958:	00005425 	.word	0x00005425

0001995c <lv_label_get_long_mode>:
{
   1995c:	b530      	push	{r4, r5, lr}
   1995e:	b083      	sub	sp, #12
   19960:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19962:	4b0c      	ldr	r3, [pc, #48]	; (19994 <lv_label_get_long_mode+0x38>)
   19964:	4798      	blx	r3
   19966:	b968      	cbnz	r0, 19984 <lv_label_get_long_mode+0x28>
   19968:	4b0b      	ldr	r3, [pc, #44]	; (19998 <lv_label_get_long_mode+0x3c>)
   1996a:	9300      	str	r3, [sp, #0]
   1996c:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   19970:	490a      	ldr	r1, [pc, #40]	; (1999c <lv_label_get_long_mode+0x40>)
   19972:	2003      	movs	r0, #3
   19974:	4d0a      	ldr	r5, [pc, #40]	; (199a0 <lv_label_get_long_mode+0x44>)
   19976:	47a8      	blx	r5
   19978:	4622      	mov	r2, r4
   1997a:	2300      	movs	r3, #0
   1997c:	4809      	ldr	r0, [pc, #36]	; (199a4 <lv_label_get_long_mode+0x48>)
   1997e:	490a      	ldr	r1, [pc, #40]	; (199a8 <lv_label_get_long_mode+0x4c>)
   19980:	4788      	blx	r1
   19982:	e7fe      	b.n	19982 <lv_label_get_long_mode+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19984:	4620      	mov	r0, r4
   19986:	4b09      	ldr	r3, [pc, #36]	; (199ac <lv_label_get_long_mode+0x50>)
   19988:	4798      	blx	r3
    return ext->long_mode;
   1998a:	7c00      	ldrb	r0, [r0, #16]
}
   1998c:	f000 0007 	and.w	r0, r0, #7
   19990:	b003      	add	sp, #12
   19992:	bd30      	pop	{r4, r5, pc}
   19994:	0000298d 	.word	0x0000298d
   19998:	00020aec 	.word	0x00020aec
   1999c:	00020c94 	.word	0x00020c94
   199a0:	00012805 	.word	0x00012805
   199a4:	0001bd20 	.word	0x0001bd20
   199a8:	00002995 	.word	0x00002995
   199ac:	00005425 	.word	0x00005425

000199b0 <lv_label_get_align>:
{
   199b0:	b530      	push	{r4, r5, lr}
   199b2:	b083      	sub	sp, #12
   199b4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   199b6:	4b0e      	ldr	r3, [pc, #56]	; (199f0 <lv_label_get_align+0x40>)
   199b8:	4798      	blx	r3
   199ba:	b968      	cbnz	r0, 199d8 <lv_label_get_align+0x28>
   199bc:	4b0d      	ldr	r3, [pc, #52]	; (199f4 <lv_label_get_align+0x44>)
   199be:	9300      	str	r3, [sp, #0]
   199c0:	f240 12ff 	movw	r2, #511	; 0x1ff
   199c4:	490c      	ldr	r1, [pc, #48]	; (199f8 <lv_label_get_align+0x48>)
   199c6:	2003      	movs	r0, #3
   199c8:	4d0c      	ldr	r5, [pc, #48]	; (199fc <lv_label_get_align+0x4c>)
   199ca:	47a8      	blx	r5
   199cc:	4622      	mov	r2, r4
   199ce:	2300      	movs	r3, #0
   199d0:	480b      	ldr	r0, [pc, #44]	; (19a00 <lv_label_get_align+0x50>)
   199d2:	490c      	ldr	r1, [pc, #48]	; (19a04 <lv_label_get_align+0x54>)
   199d4:	4788      	blx	r1
   199d6:	e7fe      	b.n	199d6 <lv_label_get_align+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   199d8:	4620      	mov	r0, r4
   199da:	4b0b      	ldr	r3, [pc, #44]	; (19a08 <lv_label_get_align+0x58>)
   199dc:	4798      	blx	r3
    lv_label_align_t align = ext->align;
   199de:	7c00      	ldrb	r0, [r0, #16]
   199e0:	f3c0 1001 	ubfx	r0, r0, #4, #2
        align = LV_LABEL_ALIGN_LEFT;
   199e4:	2803      	cmp	r0, #3
}
   199e6:	bf08      	it	eq
   199e8:	2000      	moveq	r0, #0
   199ea:	b003      	add	sp, #12
   199ec:	bd30      	pop	{r4, r5, pc}
   199ee:	bf00      	nop
   199f0:	0000298d 	.word	0x0000298d
   199f4:	00020b04 	.word	0x00020b04
   199f8:	00020c94 	.word	0x00020c94
   199fc:	00012805 	.word	0x00012805
   19a00:	0001bd20 	.word	0x0001bd20
   19a04:	00002995 	.word	0x00002995
   19a08:	00005425 	.word	0x00005425

00019a0c <lv_label_get_recolor>:
{
   19a0c:	b530      	push	{r4, r5, lr}
   19a0e:	b083      	sub	sp, #12
   19a10:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19a12:	4b0c      	ldr	r3, [pc, #48]	; (19a44 <lv_label_get_recolor+0x38>)
   19a14:	4798      	blx	r3
   19a16:	b968      	cbnz	r0, 19a34 <lv_label_get_recolor+0x28>
   19a18:	4b0b      	ldr	r3, [pc, #44]	; (19a48 <lv_label_get_recolor+0x3c>)
   19a1a:	9300      	str	r3, [sp, #0]
   19a1c:	f240 221b 	movw	r2, #539	; 0x21b
   19a20:	490a      	ldr	r1, [pc, #40]	; (19a4c <lv_label_get_recolor+0x40>)
   19a22:	2003      	movs	r0, #3
   19a24:	4d0a      	ldr	r5, [pc, #40]	; (19a50 <lv_label_get_recolor+0x44>)
   19a26:	47a8      	blx	r5
   19a28:	4622      	mov	r2, r4
   19a2a:	2300      	movs	r3, #0
   19a2c:	4809      	ldr	r0, [pc, #36]	; (19a54 <lv_label_get_recolor+0x48>)
   19a2e:	490a      	ldr	r1, [pc, #40]	; (19a58 <lv_label_get_recolor+0x4c>)
   19a30:	4788      	blx	r1
   19a32:	e7fe      	b.n	19a32 <lv_label_get_recolor+0x26>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19a34:	4620      	mov	r0, r4
   19a36:	4b09      	ldr	r3, [pc, #36]	; (19a5c <lv_label_get_recolor+0x50>)
   19a38:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
   19a3a:	7c00      	ldrb	r0, [r0, #16]
}
   19a3c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19a40:	b003      	add	sp, #12
   19a42:	bd30      	pop	{r4, r5, pc}
   19a44:	0000298d 	.word	0x0000298d
   19a48:	00020b18 	.word	0x00020b18
   19a4c:	00020c94 	.word	0x00020c94
   19a50:	00012805 	.word	0x00012805
   19a54:	0001bd20 	.word	0x0001bd20
   19a58:	00002995 	.word	0x00002995
   19a5c:	00005425 	.word	0x00005425

00019a60 <lv_label_get_letter_on>:
{
   19a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a64:	b08f      	sub	sp, #60	; 0x3c
   19a66:	4605      	mov	r5, r0
   19a68:	9105      	str	r1, [sp, #20]
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   19a6a:	4b9e      	ldr	r3, [pc, #632]	; (19ce4 <lv_label_get_letter_on+0x284>)
   19a6c:	4798      	blx	r3
   19a6e:	b968      	cbnz	r0, 19a8c <lv_label_get_letter_on+0x2c>
   19a70:	4b9d      	ldr	r3, [pc, #628]	; (19ce8 <lv_label_get_letter_on+0x288>)
   19a72:	9300      	str	r3, [sp, #0]
   19a74:	f240 22a5 	movw	r2, #677	; 0x2a5
   19a78:	499c      	ldr	r1, [pc, #624]	; (19cec <lv_label_get_letter_on+0x28c>)
   19a7a:	2003      	movs	r0, #3
   19a7c:	4c9c      	ldr	r4, [pc, #624]	; (19cf0 <lv_label_get_letter_on+0x290>)
   19a7e:	47a0      	blx	r4
   19a80:	462a      	mov	r2, r5
   19a82:	2300      	movs	r3, #0
   19a84:	489b      	ldr	r0, [pc, #620]	; (19cf4 <lv_label_get_letter_on+0x294>)
   19a86:	499c      	ldr	r1, [pc, #624]	; (19cf8 <lv_label_get_letter_on+0x298>)
   19a88:	4788      	blx	r1
   19a8a:	e7fe      	b.n	19a8a <lv_label_get_letter_on+0x2a>
    LV_ASSERT_NULL(pos);
   19a8c:	9e05      	ldr	r6, [sp, #20]
   19a8e:	4630      	mov	r0, r6
   19a90:	4b94      	ldr	r3, [pc, #592]	; (19ce4 <lv_label_get_letter_on+0x284>)
   19a92:	4798      	blx	r3
   19a94:	b968      	cbnz	r0, 19ab2 <lv_label_get_letter_on+0x52>
   19a96:	4b94      	ldr	r3, [pc, #592]	; (19ce8 <lv_label_get_letter_on+0x288>)
   19a98:	9300      	str	r3, [sp, #0]
   19a9a:	f240 22a6 	movw	r2, #678	; 0x2a6
   19a9e:	4993      	ldr	r1, [pc, #588]	; (19cec <lv_label_get_letter_on+0x28c>)
   19aa0:	2003      	movs	r0, #3
   19aa2:	4c93      	ldr	r4, [pc, #588]	; (19cf0 <lv_label_get_letter_on+0x290>)
   19aa4:	47a0      	blx	r4
   19aa6:	4632      	mov	r2, r6
   19aa8:	2300      	movs	r3, #0
   19aaa:	4892      	ldr	r0, [pc, #584]	; (19cf4 <lv_label_get_letter_on+0x294>)
   19aac:	4992      	ldr	r1, [pc, #584]	; (19cf8 <lv_label_get_letter_on+0x298>)
   19aae:	4788      	blx	r1
   19ab0:	e7fe      	b.n	19ab0 <lv_label_get_letter_on+0x50>
    get_txt_coords(label, &txt_coords);
   19ab2:	a90c      	add	r1, sp, #48	; 0x30
   19ab4:	4628      	mov	r0, r5
   19ab6:	4b91      	ldr	r3, [pc, #580]	; (19cfc <lv_label_get_letter_on+0x29c>)
   19ab8:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
   19aba:	4628      	mov	r0, r5
   19abc:	4b90      	ldr	r3, [pc, #576]	; (19d00 <lv_label_get_letter_on+0x2a0>)
   19abe:	4798      	blx	r3
   19ac0:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   19ac2:	4628      	mov	r0, r5
   19ac4:	4b8f      	ldr	r3, [pc, #572]	; (19d04 <lv_label_get_letter_on+0x2a4>)
   19ac6:	4798      	blx	r3
   19ac8:	4606      	mov	r6, r0
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19aca:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19ace:	3301      	adds	r3, #1
   19ad0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   19ad4:	1a9b      	subs	r3, r3, r2
   19ad6:	b21b      	sxth	r3, r3
   19ad8:	9306      	str	r3, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19ada:	f248 028e 	movw	r2, #32910	; 0x808e
   19ade:	2100      	movs	r1, #0
   19ae0:	4628      	mov	r0, r5
   19ae2:	4b89      	ldr	r3, [pc, #548]	; (19d08 <lv_label_get_letter_on+0x2a8>)
   19ae4:	4798      	blx	r3
   19ae6:	4681      	mov	r9, r0
   19ae8:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19aea:	f248 0281 	movw	r2, #32897	; 0x8081
   19aee:	2100      	movs	r1, #0
   19af0:	4628      	mov	r0, r5
   19af2:	f8df 8230 	ldr.w	r8, [pc, #560]	; 19d24 <lv_label_get_letter_on+0x2c4>
   19af6:	47c0      	blx	r8
   19af8:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   19afa:	f248 0280 	movw	r2, #32896	; 0x8080
   19afe:	2100      	movs	r1, #0
   19b00:	4628      	mov	r0, r5
   19b02:	47c0      	blx	r8
   19b04:	9004      	str	r0, [sp, #16]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
   19b06:	f9b9 b008 	ldrsh.w	fp, [r9, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   19b0a:	7c33      	ldrb	r3, [r6, #16]
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
   19b0c:	f3c3 1680 	ubfx	r6, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   19b10:	f013 0f80 	tst.w	r3, #128	; 0x80
   19b14:	bf18      	it	ne
   19b16:	f046 0602 	orrne.w	r6, r6, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   19b1a:	f013 0f07 	tst.w	r3, #7
   19b1e:	bf08      	it	eq
   19b20:	f046 0610 	orreq.w	r6, r6, #16
    lv_label_align_t align = lv_label_get_align(label);
   19b24:	4628      	mov	r0, r5
   19b26:	4b79      	ldr	r3, [pc, #484]	; (19d0c <lv_label_get_letter_on+0x2ac>)
   19b28:	4798      	blx	r3
   19b2a:	4682      	mov	sl, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   19b2c:	2801      	cmp	r0, #1
   19b2e:	d137      	bne.n	19ba0 <lv_label_get_letter_on+0x140>
   19b30:	f046 0604 	orr.w	r6, r6, #4
    while(txt[line_start] != '\0') {
   19b34:	783b      	ldrb	r3, [r7, #0]
   19b36:	2b00      	cmp	r3, #0
   19b38:	d13a      	bne.n	19bb0 <lv_label_get_letter_on+0x150>
   19b3a:	46b8      	mov	r8, r7
   19b3c:	2500      	movs	r5, #0
   19b3e:	462c      	mov	r4, r5
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   19b40:	1b61      	subs	r1, r4, r5
   19b42:	9600      	str	r6, [sp, #0]
   19b44:	9b04      	ldr	r3, [sp, #16]
   19b46:	9a03      	ldr	r2, [sp, #12]
   19b48:	b289      	uxth	r1, r1
   19b4a:	4640      	mov	r0, r8
   19b4c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 19d28 <lv_label_get_letter_on+0x2c8>
   19b50:	47c8      	blx	r9
   19b52:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19b56:	3301      	adds	r3, #1
   19b58:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   19b5c:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
   19b5e:	b21b      	sxth	r3, r3
   19b60:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   19b64:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   19b68:	ea4f 0960 	mov.w	r9, r0, asr #1
   19b6c:	ebc9 0363 	rsb	r3, r9, r3, asr #1
   19b70:	fa0f f983 	sxth.w	r9, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   19b74:	2300      	movs	r3, #0
   19b76:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
   19b7a:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
   19b7c:	2c00      	cmp	r4, #0
   19b7e:	f040 80a1 	bne.w	19cc4 <lv_label_get_letter_on+0x264>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   19b82:	4e63      	ldr	r6, [pc, #396]	; (19d10 <lv_label_get_letter_on+0x2b0>)
   19b84:	6833      	ldr	r3, [r6, #0]
   19b86:	990a      	ldr	r1, [sp, #40]	; 0x28
   19b88:	4640      	mov	r0, r8
   19b8a:	4798      	blx	r3
   19b8c:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   19b8e:	6833      	ldr	r3, [r6, #0]
   19b90:	4629      	mov	r1, r5
   19b92:	4638      	mov	r0, r7
   19b94:	4798      	blx	r3
   19b96:	4420      	add	r0, r4
   19b98:	b280      	uxth	r0, r0
}
   19b9a:	b00f      	add	sp, #60	; 0x3c
   19b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   19ba0:	2802      	cmp	r0, #2
   19ba2:	f040 8096 	bne.w	19cd2 <lv_label_get_letter_on+0x272>
   19ba6:	f046 0608 	orr.w	r6, r6, #8
    while(txt[line_start] != '\0') {
   19baa:	783b      	ldrb	r3, [r7, #0]
   19bac:	2b00      	cmp	r3, #0
   19bae:	d048      	beq.n	19c42 <lv_label_get_letter_on+0x1e2>
{
   19bb0:	46b8      	mov	r8, r7
   19bb2:	f04f 0900 	mov.w	r9, #0
   19bb6:	464d      	mov	r5, r9
        y += letter_height + line_space;
   19bb8:	eb0b 0304 	add.w	r3, fp, r4
   19bbc:	9307      	str	r3, [sp, #28]
   19bbe:	e009      	b.n	19bd4 <lv_label_get_letter_on+0x174>
   19bc0:	9b07      	ldr	r3, [sp, #28]
   19bc2:	4499      	add	r9, r3
   19bc4:	fa0f f989 	sxth.w	r9, r9
    while(txt[line_start] != '\0') {
   19bc8:	eb07 0800 	add.w	r8, r7, r0
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   19bcc:	4605      	mov	r5, r0
    while(txt[line_start] != '\0') {
   19bce:	5c3b      	ldrb	r3, [r7, r0]
   19bd0:	2b00      	cmp	r3, #0
   19bd2:	d034      	beq.n	19c3e <lv_label_get_letter_on+0x1de>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   19bd4:	9600      	str	r6, [sp, #0]
   19bd6:	9b06      	ldr	r3, [sp, #24]
   19bd8:	9a04      	ldr	r2, [sp, #16]
   19bda:	9903      	ldr	r1, [sp, #12]
   19bdc:	4640      	mov	r0, r8
   19bde:	4c4d      	ldr	r4, [pc, #308]	; (19d14 <lv_label_get_letter_on+0x2b4>)
   19be0:	47a0      	blx	r4
   19be2:	4428      	add	r0, r5
        if(pos->y <= y + letter_height) {
   19be4:	9b05      	ldr	r3, [sp, #20]
   19be6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   19bea:	eb09 030b 	add.w	r3, r9, fp
   19bee:	429a      	cmp	r2, r3
   19bf0:	dce6      	bgt.n	19bc0 <lv_label_get_letter_on+0x160>
   19bf2:	4604      	mov	r4, r0
            uint32_t tmp = new_line_start;
   19bf4:	a90e      	add	r1, sp, #56	; 0x38
   19bf6:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
   19bfa:	4b47      	ldr	r3, [pc, #284]	; (19d18 <lv_label_get_letter_on+0x2b8>)
   19bfc:	681b      	ldr	r3, [r3, #0]
   19bfe:	4638      	mov	r0, r7
   19c00:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
   19c02:	280a      	cmp	r0, #10
   19c04:	d002      	beq.n	19c0c <lv_label_get_letter_on+0x1ac>
   19c06:	5d3b      	ldrb	r3, [r7, r4]
   19c08:	b903      	cbnz	r3, 19c0c <lv_label_get_letter_on+0x1ac>
   19c0a:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   19c0c:	f1ba 0f01 	cmp.w	sl, #1
   19c10:	d096      	beq.n	19b40 <lv_label_get_letter_on+0xe0>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   19c12:	f1ba 0f02 	cmp.w	sl, #2
   19c16:	d118      	bne.n	19c4a <lv_label_get_letter_on+0x1ea>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   19c18:	1b61      	subs	r1, r4, r5
   19c1a:	9600      	str	r6, [sp, #0]
   19c1c:	9b04      	ldr	r3, [sp, #16]
   19c1e:	9a03      	ldr	r2, [sp, #12]
   19c20:	b289      	uxth	r1, r1
   19c22:	4640      	mov	r0, r8
   19c24:	f8df 9100 	ldr.w	r9, [pc, #256]	; 19d28 <lv_label_get_letter_on+0x2c8>
   19c28:	47c8      	blx	r9
   19c2a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19c2e:	3301      	adds	r3, #1
   19c30:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   19c34:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
   19c36:	1a1b      	subs	r3, r3, r0
   19c38:	fa0f f983 	sxth.w	r9, r3
   19c3c:	e79a      	b.n	19b74 <lv_label_get_letter_on+0x114>
   19c3e:	4604      	mov	r4, r0
   19c40:	e7e4      	b.n	19c0c <lv_label_get_letter_on+0x1ac>
    while(txt[line_start] != '\0') {
   19c42:	46b8      	mov	r8, r7
   19c44:	2500      	movs	r5, #0
   19c46:	462c      	mov	r4, r5
   19c48:	e7e6      	b.n	19c18 <lv_label_get_letter_on+0x1b8>
    lv_coord_t x = 0;
   19c4a:	f04f 0900 	mov.w	r9, #0
   19c4e:	e791      	b.n	19b74 <lv_label_get_letter_on+0x114>
            x += lv_font_get_glyph_width(font, letter, letter_next);
   19c50:	9a07      	ldr	r2, [sp, #28]
   19c52:	9906      	ldr	r1, [sp, #24]
   19c54:	9803      	ldr	r0, [sp, #12]
   19c56:	4b31      	ldr	r3, [pc, #196]	; (19d1c <lv_label_get_letter_on+0x2bc>)
   19c58:	4798      	blx	r3
   19c5a:	eb00 0309 	add.w	r3, r0, r9
   19c5e:	b29b      	uxth	r3, r3
            if(pos->x < x || i + line_start == new_line_start ||  txt[i + line_start] == '\0') {
   19c60:	9a05      	ldr	r2, [sp, #20]
   19c62:	f9b2 1000 	ldrsh.w	r1, [r2]
   19c66:	b21a      	sxth	r2, r3
   19c68:	4291      	cmp	r1, r2
   19c6a:	db28      	blt.n	19cbe <lv_label_get_letter_on+0x25e>
   19c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19c6e:	1951      	adds	r1, r2, r5
   19c70:	42a1      	cmp	r1, r4
   19c72:	d024      	beq.n	19cbe <lv_label_get_letter_on+0x25e>
   19c74:	5c79      	ldrb	r1, [r7, r1]
   19c76:	b311      	cbz	r1, 19cbe <lv_label_get_letter_on+0x25e>
            x += letter_space;
   19c78:	9904      	ldr	r1, [sp, #16]
   19c7a:	440b      	add	r3, r1
   19c7c:	fa0f f983 	sxth.w	r9, r3
            i_act = i;
   19c80:	4693      	mov	fp, r2
        while(i + line_start < new_line_start) {
   19c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19c84:	442b      	add	r3, r5
   19c86:	42a3      	cmp	r3, r4
   19c88:	f4bf af7b 	bcs.w	19b82 <lv_label_get_letter_on+0x122>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   19c8c:	f8da 3000 	ldr.w	r3, [sl]
   19c90:	a90a      	add	r1, sp, #40	; 0x28
   19c92:	4640      	mov	r0, r8
   19c94:	4798      	blx	r3
   19c96:	9006      	str	r0, [sp, #24]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   19c98:	f8da 3000 	ldr.w	r3, [sl]
   19c9c:	2100      	movs	r1, #0
   19c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   19ca0:	4440      	add	r0, r8
   19ca2:	4798      	blx	r3
   19ca4:	9007      	str	r0, [sp, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19ca6:	2e00      	cmp	r6, #0
   19ca8:	d0d2      	beq.n	19c50 <lv_label_get_letter_on+0x1f0>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   19caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19cac:	f818 1003 	ldrb.w	r1, [r8, r3]
   19cb0:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   19cb4:	4b1a      	ldr	r3, [pc, #104]	; (19d20 <lv_label_get_letter_on+0x2c0>)
   19cb6:	4798      	blx	r3
   19cb8:	2800      	cmp	r0, #0
   19cba:	d1e2      	bne.n	19c82 <lv_label_get_letter_on+0x222>
   19cbc:	e7c8      	b.n	19c50 <lv_label_get_letter_on+0x1f0>
                i = i_act;
   19cbe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
                break;
   19cc2:	e75e      	b.n	19b82 <lv_label_get_letter_on+0x122>
   19cc4:	f04f 0b00 	mov.w	fp, #0
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   19cc8:	f8df a060 	ldr.w	sl, [pc, #96]	; 19d2c <lv_label_get_letter_on+0x2cc>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   19ccc:	f006 0601 	and.w	r6, r6, #1
   19cd0:	e7d7      	b.n	19c82 <lv_label_get_letter_on+0x222>
    while(txt[line_start] != '\0') {
   19cd2:	783b      	ldrb	r3, [r7, #0]
   19cd4:	2b00      	cmp	r3, #0
   19cd6:	f47f af6b 	bne.w	19bb0 <lv_label_get_letter_on+0x150>
   19cda:	46b8      	mov	r8, r7
   19cdc:	2500      	movs	r5, #0
   19cde:	462c      	mov	r4, r5
    lv_coord_t x = 0;
   19ce0:	46a9      	mov	r9, r5
   19ce2:	e747      	b.n	19b74 <lv_label_get_letter_on+0x114>
   19ce4:	0000298d 	.word	0x0000298d
   19ce8:	00020b60 	.word	0x00020b60
   19cec:	00020c94 	.word	0x00020c94
   19cf0:	00012805 	.word	0x00012805
   19cf4:	0001bd20 	.word	0x0001bd20
   19cf8:	00002995 	.word	0x00002995
   19cfc:	000197b9 	.word	0x000197b9
   19d00:	0001990d 	.word	0x0001990d
   19d04:	00005425 	.word	0x00005425
   19d08:	00004d29 	.word	0x00004d29
   19d0c:	000199b1 	.word	0x000199b1
   19d10:	20000064 	.word	0x20000064
   19d14:	00014359 	.word	0x00014359
   19d18:	20000068 	.word	0x20000068
   19d1c:	00010609 	.word	0x00010609
   19d20:	00014311 	.word	0x00014311
   19d24:	00004b5d 	.word	0x00004b5d
   19d28:	00014585 	.word	0x00014585
   19d2c:	20000058 	.word	0x20000058

00019d30 <lv_label_refr_text>:
{
   19d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d34:	b099      	sub	sp, #100	; 0x64
   19d36:	4604      	mov	r4, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   19d38:	4baf      	ldr	r3, [pc, #700]	; (19ff8 <lv_label_refr_text+0x2c8>)
   19d3a:	4798      	blx	r3
    if(ext->text == NULL) return;
   19d3c:	6803      	ldr	r3, [r0, #0]
   19d3e:	2b00      	cmp	r3, #0
   19d40:	d048      	beq.n	19dd4 <lv_label_refr_text+0xa4>
   19d42:	4605      	mov	r5, r0
    get_txt_coords(label, &txt_coords);
   19d44:	a916      	add	r1, sp, #88	; 0x58
   19d46:	4620      	mov	r0, r4
   19d48:	4bac      	ldr	r3, [pc, #688]	; (19ffc <lv_label_refr_text+0x2cc>)
   19d4a:	4798      	blx	r3
   19d4c:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
   19d50:	3601      	adds	r6, #1
   19d52:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   19d56:	1af6      	subs	r6, r6, r3
   19d58:	b236      	sxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   19d5a:	f248 028e 	movw	r2, #32910	; 0x808e
   19d5e:	2100      	movs	r1, #0
   19d60:	4620      	mov	r0, r4
   19d62:	4ba7      	ldr	r3, [pc, #668]	; (1a000 <lv_label_refr_text+0x2d0>)
   19d64:	4798      	blx	r3
   19d66:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   19d68:	f248 0281 	movw	r2, #32897	; 0x8081
   19d6c:	2100      	movs	r1, #0
   19d6e:	4620      	mov	r0, r4
   19d70:	4fa4      	ldr	r7, [pc, #656]	; (1a004 <lv_label_refr_text+0x2d4>)
   19d72:	47b8      	blx	r7
   19d74:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   19d76:	f248 0280 	movw	r2, #32896	; 0x8080
   19d7a:	2100      	movs	r1, #0
   19d7c:	4620      	mov	r0, r4
   19d7e:	47b8      	blx	r7
   19d80:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   19d82:	7c2b      	ldrb	r3, [r5, #16]
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
   19d84:	f3c3 1280 	ubfx	r2, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   19d88:	f013 0f80 	tst.w	r3, #128	; 0x80
   19d8c:	bf18      	it	ne
   19d8e:	f042 0202 	orrne.w	r2, r2, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   19d92:	f013 0f07 	tst.w	r3, #7
   19d96:	bf08      	it	eq
   19d98:	f042 0210 	orreq.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   19d9c:	6829      	ldr	r1, [r5, #0]
   19d9e:	9202      	str	r2, [sp, #8]
   19da0:	9601      	str	r6, [sp, #4]
   19da2:	f8cd 9000 	str.w	r9, [sp]
   19da6:	4603      	mov	r3, r0
   19da8:	4642      	mov	r2, r8
   19daa:	a815      	add	r0, sp, #84	; 0x54
   19dac:	4e96      	ldr	r6, [pc, #600]	; (1a008 <lv_label_refr_text+0x2d8>)
   19dae:	47b0      	blx	r6
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   19db0:	7c2b      	ldrb	r3, [r5, #16]
   19db2:	f013 0307 	ands.w	r3, r3, #7
   19db6:	d010      	beq.n	19dda <lv_label_refr_text+0xaa>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   19db8:	2b03      	cmp	r3, #3
   19dba:	d034      	beq.n	19e26 <lv_label_refr_text+0xf6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   19dbc:	2b04      	cmp	r3, #4
   19dbe:	f000 80d7 	beq.w	19f70 <lv_label_refr_text+0x240>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   19dc2:	2b02      	cmp	r3, #2
   19dc4:	f000 816d 	beq.w	1a0a2 <lv_label_refr_text+0x372>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   19dc8:	2b01      	cmp	r3, #1
   19dca:	f000 81fe 	beq.w	1a1ca <lv_label_refr_text+0x49a>
    lv_obj_invalidate(label);
   19dce:	4620      	mov	r0, r4
   19dd0:	4b8e      	ldr	r3, [pc, #568]	; (1a00c <lv_label_refr_text+0x2dc>)
   19dd2:	4798      	blx	r3
}
   19dd4:	b019      	add	sp, #100	; 0x64
   19dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   19dda:	2212      	movs	r2, #18
   19ddc:	2100      	movs	r1, #0
   19dde:	4620      	mov	r0, r4
   19de0:	4e88      	ldr	r6, [pc, #544]	; (1a004 <lv_label_refr_text+0x2d4>)
   19de2:	47b0      	blx	r6
   19de4:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   19de6:	2213      	movs	r2, #19
   19de8:	2100      	movs	r1, #0
   19dea:	4620      	mov	r0, r4
   19dec:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
   19dee:	4428      	add	r0, r5
   19df0:	f8bd 5054 	ldrh.w	r5, [sp, #84]	; 0x54
   19df4:	4428      	add	r0, r5
   19df6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   19dfa:	2210      	movs	r2, #16
   19dfc:	2100      	movs	r1, #0
   19dfe:	4620      	mov	r0, r4
   19e00:	47b0      	blx	r6
   19e02:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   19e04:	2211      	movs	r2, #17
   19e06:	2100      	movs	r1, #0
   19e08:	4620      	mov	r0, r4
   19e0a:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   19e0c:	182a      	adds	r2, r5, r0
   19e0e:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
   19e12:	4402      	add	r2, r0
   19e14:	b212      	sxth	r2, r2
   19e16:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
        lv_obj_set_size(label, size.x, size.y);
   19e1a:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
   19e1e:	4620      	mov	r0, r4
   19e20:	4b7b      	ldr	r3, [pc, #492]	; (1a010 <lv_label_refr_text+0x2e0>)
   19e22:	4798      	blx	r3
   19e24:	e7d3      	b.n	19dce <lv_label_refr_text+0x9e>
        lv_anim_init(&a);
   19e26:	a805      	add	r0, sp, #20
   19e28:	4b7a      	ldr	r3, [pc, #488]	; (1a014 <lv_label_refr_text+0x2e4>)
   19e2a:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
   19e2c:	9405      	str	r4, [sp, #20]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
   19e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19e32:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
   19e36:	2220      	movs	r2, #32
   19e38:	4611      	mov	r1, r2
   19e3a:	4640      	mov	r0, r8
   19e3c:	4b76      	ldr	r3, [pc, #472]	; (1a018 <lv_label_refr_text+0x2e8>)
   19e3e:	4798      	blx	r3
   19e40:	4438      	add	r0, r7
   19e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19e46:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
   19e4a:	8968      	ldrh	r0, [r5, #10]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
   19e4c:	fb93 f3f0 	sdiv	r3, r3, r0
   19e50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a->playback_delay = delay;
   19e54:	b29b      	uxth	r3, r3
   19e56:	930f      	str	r3, [sp, #60]	; 0x3c
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
   19e58:	9311      	str	r3, [sp, #68]	; 0x44
        if(size.x > lv_area_get_width(&txt_coords)) {
   19e5a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
   19e5e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   19e62:	3301      	adds	r3, #1
   19e64:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   19e68:	1a5b      	subs	r3, r3, r1
   19e6a:	b29b      	uxth	r3, r3
   19e6c:	b219      	sxth	r1, r3
   19e6e:	428a      	cmp	r2, r1
   19e70:	dd37      	ble.n	19ee2 <lv_label_refr_text+0x1b2>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
   19e72:	1a9b      	subs	r3, r3, r2
   19e74:	b21a      	sxth	r2, r3
    a->start = start;
   19e76:	2100      	movs	r1, #0
   19e78:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   19e7a:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   19e7c:	4e67      	ldr	r6, [pc, #412]	; (1a01c <lv_label_refr_text+0x2ec>)
   19e7e:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   19e80:	8968      	ldrh	r0, [r5, #10]
   19e82:	4b67      	ldr	r3, [pc, #412]	; (1a020 <lv_label_refr_text+0x2f0>)
   19e84:	4798      	blx	r3
    a->time     = duration;
   19e86:	900d      	str	r0, [sp, #52]	; 0x34
   19e88:	9010      	str	r0, [sp, #64]	; 0x40
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   19e8a:	4631      	mov	r1, r6
   19e8c:	4620      	mov	r0, r4
   19e8e:	4b65      	ldr	r3, [pc, #404]	; (1a024 <lv_label_refr_text+0x2f4>)
   19e90:	4798      	blx	r3
            if(anim_cur) {
   19e92:	b318      	cbz	r0, 19edc <lv_label_refr_text+0x1ac>
                act_time = anim_cur->act_time;
   19e94:	6a42      	ldr	r2, [r0, #36]	; 0x24
                playback_now = anim_cur->playback_now;
   19e96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   19e9a:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
   19e9e:	990d      	ldr	r1, [sp, #52]	; 0x34
   19ea0:	428a      	cmp	r2, r1
   19ea2:	da11      	bge.n	19ec8 <lv_label_refr_text+0x198>
                a.act_time = act_time;      /*To keep the old position*/
   19ea4:	920e      	str	r2, [sp, #56]	; 0x38
                a.early_apply = 0;
   19ea6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   19eaa:	f36f 0200 	bfc	r2, #0, #1
   19eae:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if(playback_now) {
   19eb2:	b14b      	cbz	r3, 19ec8 <lv_label_refr_text+0x198>
                    a.playback_now = 1;
   19eb4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   19eb8:	f043 0301 	orr.w	r3, r3, #1
   19ebc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
                    tmp      = a.start;
   19ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    a.start = a.end;
   19ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19ec4:	920b      	str	r2, [sp, #44]	; 0x2c
                    a.end   = tmp;
   19ec6:	930c      	str	r3, [sp, #48]	; 0x30
            lv_anim_start(&a);
   19ec8:	a805      	add	r0, sp, #20
   19eca:	4b57      	ldr	r3, [pc, #348]	; (1a028 <lv_label_refr_text+0x2f8>)
   19ecc:	4798      	blx	r3
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   19ece:	4957      	ldr	r1, [pc, #348]	; (1a02c <lv_label_refr_text+0x2fc>)
   19ed0:	4620      	mov	r0, r4
   19ed2:	4b57      	ldr	r3, [pc, #348]	; (1a030 <lv_label_refr_text+0x300>)
   19ed4:	4798      	blx	r3
            ext->offset.y = 0;
   19ed6:	2300      	movs	r3, #0
   19ed8:	81eb      	strh	r3, [r5, #14]
   19eda:	e778      	b.n	19dce <lv_label_refr_text+0x9e>
            bool playback_now = false;
   19edc:	2300      	movs	r3, #0
            int32_t act_time = 0;
   19ede:	461a      	mov	r2, r3
   19ee0:	e7dd      	b.n	19e9e <lv_label_refr_text+0x16e>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   19ee2:	494e      	ldr	r1, [pc, #312]	; (1a01c <lv_label_refr_text+0x2ec>)
   19ee4:	4620      	mov	r0, r4
   19ee6:	4b52      	ldr	r3, [pc, #328]	; (1a030 <lv_label_refr_text+0x300>)
   19ee8:	4798      	blx	r3
            ext->offset.x = 0;
   19eea:	2300      	movs	r3, #0
   19eec:	81ab      	strh	r3, [r5, #12]
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   19eee:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   19ef2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   19ef6:	3301      	adds	r3, #1
   19ef8:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
   19efc:	1a5b      	subs	r3, r3, r1
   19efe:	b29b      	uxth	r3, r3
   19f00:	b219      	sxth	r1, r3
   19f02:	428a      	cmp	r2, r1
   19f04:	dde3      	ble.n	19ece <lv_label_refr_text+0x19e>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
   19f06:	1a9a      	subs	r2, r3, r2
   19f08:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   19f0c:	1ad2      	subs	r2, r2, r3
   19f0e:	b212      	sxth	r2, r2
    a->start = start;
   19f10:	2100      	movs	r1, #0
   19f12:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   19f14:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   19f16:	4e45      	ldr	r6, [pc, #276]	; (1a02c <lv_label_refr_text+0x2fc>)
   19f18:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   19f1a:	8968      	ldrh	r0, [r5, #10]
   19f1c:	4b40      	ldr	r3, [pc, #256]	; (1a020 <lv_label_refr_text+0x2f0>)
   19f1e:	4798      	blx	r3
    a->time     = duration;
   19f20:	900d      	str	r0, [sp, #52]	; 0x34
   19f22:	9010      	str	r0, [sp, #64]	; 0x40
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   19f24:	4631      	mov	r1, r6
   19f26:	4620      	mov	r0, r4
   19f28:	4b3e      	ldr	r3, [pc, #248]	; (1a024 <lv_label_refr_text+0x2f4>)
   19f2a:	4798      	blx	r3
            if(anim_cur) {
   19f2c:	b1e8      	cbz	r0, 19f6a <lv_label_refr_text+0x23a>
                act_time = anim_cur->act_time;
   19f2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
                playback_now = anim_cur->playback_now;
   19f30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   19f34:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
   19f38:	990d      	ldr	r1, [sp, #52]	; 0x34
   19f3a:	428a      	cmp	r2, r1
   19f3c:	da11      	bge.n	19f62 <lv_label_refr_text+0x232>
                a.act_time = act_time;      /*To keep the old position*/
   19f3e:	920e      	str	r2, [sp, #56]	; 0x38
                a.early_apply = 0;
   19f40:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   19f44:	f36f 0200 	bfc	r2, #0, #1
   19f48:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
                if(playback_now) {
   19f4c:	b14b      	cbz	r3, 19f62 <lv_label_refr_text+0x232>
                    a.playback_now = 1;
   19f4e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   19f52:	f043 0301 	orr.w	r3, r3, #1
   19f56:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
                    tmp      = a.start;
   19f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    a.start = a.end;
   19f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19f5e:	920b      	str	r2, [sp, #44]	; 0x2c
                    a.end   = tmp;
   19f60:	930c      	str	r3, [sp, #48]	; 0x30
            lv_anim_start(&a);
   19f62:	a805      	add	r0, sp, #20
   19f64:	4b30      	ldr	r3, [pc, #192]	; (1a028 <lv_label_refr_text+0x2f8>)
   19f66:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   19f68:	e731      	b.n	19dce <lv_label_refr_text+0x9e>
            bool playback_now = false;
   19f6a:	2300      	movs	r3, #0
            int32_t act_time = 0;
   19f6c:	461a      	mov	r2, r3
   19f6e:	e7e3      	b.n	19f38 <lv_label_refr_text+0x208>
        lv_anim_init(&a);
   19f70:	a805      	add	r0, sp, #20
   19f72:	4b28      	ldr	r3, [pc, #160]	; (1a014 <lv_label_refr_text+0x2e4>)
   19f74:	4798      	blx	r3
    a->var     = var;
   19f76:	9405      	str	r4, [sp, #20]
    a->repeat_cnt       = cnt;
   19f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19f7c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   19f80:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   19f84:	3301      	adds	r3, #1
   19f86:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   19f8a:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
   19f8c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
   19f90:	b21b      	sxth	r3, r3
   19f92:	429a      	cmp	r2, r3
   19f94:	dd50      	ble.n	1a038 <lv_label_refr_text+0x308>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
   19f96:	2220      	movs	r2, #32
   19f98:	4611      	mov	r1, r2
   19f9a:	4640      	mov	r0, r8
   19f9c:	4b1e      	ldr	r3, [pc, #120]	; (1a018 <lv_label_refr_text+0x2e8>)
   19f9e:	4798      	blx	r3
   19fa0:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
   19fa4:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   19fa8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   19fac:	1ad2      	subs	r2, r2, r3
   19fae:	b212      	sxth	r2, r2
    a->start = start;
   19fb0:	2100      	movs	r1, #0
   19fb2:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   19fb4:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   19fb6:	4e19      	ldr	r6, [pc, #100]	; (1a01c <lv_label_refr_text+0x2ec>)
   19fb8:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   19fba:	8968      	ldrh	r0, [r5, #10]
   19fbc:	4b18      	ldr	r3, [pc, #96]	; (1a020 <lv_label_refr_text+0x2f0>)
   19fbe:	4798      	blx	r3
    a->time     = duration;
   19fc0:	900d      	str	r0, [sp, #52]	; 0x34
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   19fc2:	4631      	mov	r1, r6
   19fc4:	4620      	mov	r0, r4
   19fc6:	4b17      	ldr	r3, [pc, #92]	; (1a024 <lv_label_refr_text+0x2f4>)
   19fc8:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   19fca:	2800      	cmp	r0, #0
   19fcc:	d032      	beq.n	1a034 <lv_label_refr_text+0x304>
   19fce:	6a43      	ldr	r3, [r0, #36]	; 0x24
            if(act_time < a.time) {
   19fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19fd2:	4293      	cmp	r3, r2
   19fd4:	da06      	bge.n	19fe4 <lv_label_refr_text+0x2b4>
                a.act_time = act_time;      /*To keep the old position*/
   19fd6:	930e      	str	r3, [sp, #56]	; 0x38
                a.early_apply = 0;
   19fd8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   19fdc:	f36f 0300 	bfc	r3, #0, #1
   19fe0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            lv_anim_start(&a);
   19fe4:	a805      	add	r0, sp, #20
   19fe6:	4b10      	ldr	r3, [pc, #64]	; (1a028 <lv_label_refr_text+0x2f8>)
   19fe8:	4798      	blx	r3
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   19fea:	4910      	ldr	r1, [pc, #64]	; (1a02c <lv_label_refr_text+0x2fc>)
   19fec:	4620      	mov	r0, r4
   19fee:	4b10      	ldr	r3, [pc, #64]	; (1a030 <lv_label_refr_text+0x300>)
   19ff0:	4798      	blx	r3
            ext->offset.y = 0;
   19ff2:	2300      	movs	r3, #0
   19ff4:	81eb      	strh	r3, [r5, #14]
   19ff6:	e6ea      	b.n	19dce <lv_label_refr_text+0x9e>
   19ff8:	00005425 	.word	0x00005425
   19ffc:	000197b9 	.word	0x000197b9
   1a000:	00004d29 	.word	0x00004d29
   1a004:	00004b5d 	.word	0x00004b5d
   1a008:	00014625 	.word	0x00014625
   1a00c:	000039a9 	.word	0x000039a9
   1a010:	00004929 	.word	0x00004929
   1a014:	0001188d 	.word	0x0001188d
   1a018:	00010609 	.word	0x00010609
   1a01c:	0001979d 	.word	0x0001979d
   1a020:	00011a39 	.word	0x00011a39
   1a024:	000119fd 	.word	0x000119fd
   1a028:	00011949 	.word	0x00011949
   1a02c:	00019781 	.word	0x00019781
   1a030:	000118d1 	.word	0x000118d1
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a034:	2300      	movs	r3, #0
   1a036:	e7cb      	b.n	19fd0 <lv_label_refr_text+0x2a0>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1a038:	496e      	ldr	r1, [pc, #440]	; (1a1f4 <lv_label_refr_text+0x4c4>)
   1a03a:	4620      	mov	r0, r4
   1a03c:	4b6e      	ldr	r3, [pc, #440]	; (1a1f8 <lv_label_refr_text+0x4c8>)
   1a03e:	4798      	blx	r3
            ext->offset.x = 0;
   1a040:	2300      	movs	r3, #0
   1a042:	81ab      	strh	r3, [r5, #12]
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   1a044:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a048:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a04c:	3301      	adds	r3, #1
   1a04e:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
   1a052:	1a5b      	subs	r3, r3, r1
   1a054:	b21b      	sxth	r3, r3
   1a056:	429a      	cmp	r2, r3
   1a058:	ddc7      	ble.n	19fea <lv_label_refr_text+0x2ba>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
   1a05a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1a05e:	441a      	add	r2, r3
   1a060:	4252      	negs	r2, r2
   1a062:	b212      	sxth	r2, r2
    a->start = start;
   1a064:	2100      	movs	r1, #0
   1a066:	910b      	str	r1, [sp, #44]	; 0x2c
    a->end   = end;
   1a068:	920c      	str	r2, [sp, #48]	; 0x30
    a->exec_cb = exec_cb;
   1a06a:	4e64      	ldr	r6, [pc, #400]	; (1a1fc <lv_label_refr_text+0x4cc>)
   1a06c:	9606      	str	r6, [sp, #24]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
   1a06e:	8968      	ldrh	r0, [r5, #10]
   1a070:	4b63      	ldr	r3, [pc, #396]	; (1a200 <lv_label_refr_text+0x4d0>)
   1a072:	4798      	blx	r3
    a->time     = duration;
   1a074:	900d      	str	r0, [sp, #52]	; 0x34
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1a076:	4631      	mov	r1, r6
   1a078:	4620      	mov	r0, r4
   1a07a:	4b62      	ldr	r3, [pc, #392]	; (1a204 <lv_label_refr_text+0x4d4>)
   1a07c:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a07e:	b170      	cbz	r0, 1a09e <lv_label_refr_text+0x36e>
   1a080:	6a43      	ldr	r3, [r0, #36]	; 0x24
            if(act_time < a.time) {
   1a082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a084:	4293      	cmp	r3, r2
   1a086:	da06      	bge.n	1a096 <lv_label_refr_text+0x366>
                a.act_time = act_time;      /*To keep the old position*/
   1a088:	930e      	str	r3, [sp, #56]	; 0x38
                a.early_apply = 0;
   1a08a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1a08e:	f36f 0300 	bfc	r3, #0, #1
   1a092:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
            lv_anim_start(&a);
   1a096:	a805      	add	r0, sp, #20
   1a098:	4b5b      	ldr	r3, [pc, #364]	; (1a208 <lv_label_refr_text+0x4d8>)
   1a09a:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
   1a09c:	e697      	b.n	19dce <lv_label_refr_text+0x9e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a09e:	2300      	movs	r3, #0
   1a0a0:	e7ef      	b.n	1a082 <lv_label_refr_text+0x352>
   1a0a2:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a0a6:	3301      	adds	r3, #1
   1a0a8:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
   1a0ac:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
   1a0ae:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   1a0b2:	b21b      	sxth	r3, r3
   1a0b4:	429a      	cmp	r2, r3
   1a0b6:	dc03      	bgt.n	1a0c0 <lv_label_refr_text+0x390>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1a0b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a0bc:	812b      	strh	r3, [r5, #8]
   1a0be:	e686      	b.n	19dce <lv_label_refr_text+0x9e>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
   1a0c0:	4b52      	ldr	r3, [pc, #328]	; (1a20c <lv_label_refr_text+0x4dc>)
   1a0c2:	681b      	ldr	r3, [r3, #0]
   1a0c4:	6828      	ldr	r0, [r5, #0]
   1a0c6:	4798      	blx	r3
   1a0c8:	2803      	cmp	r0, #3
   1a0ca:	d803      	bhi.n	1a0d4 <lv_label_refr_text+0x3a4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1a0cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a0d0:	812b      	strh	r3, [r5, #8]
   1a0d2:	e67c      	b.n	19dce <lv_label_refr_text+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1a0d4:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
   1a0d8:	3601      	adds	r6, #1
   1a0da:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1a0de:	1af6      	subs	r6, r6, r3
   1a0e0:	b2b6      	uxth	r6, r6
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
   1a0e2:	222e      	movs	r2, #46	; 0x2e
   1a0e4:	4611      	mov	r1, r2
   1a0e6:	4640      	mov	r0, r8
   1a0e8:	4b49      	ldr	r3, [pc, #292]	; (1a210 <lv_label_refr_text+0x4e0>)
   1a0ea:	4798      	blx	r3
   1a0ec:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
   1a0ee:	ebc0 3380 	rsb	r3, r0, r0, lsl #14
   1a0f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1a0f6:	4430      	add	r0, r6
   1a0f8:	f8ad 0010 	strh.w	r0, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a0fc:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   1a100:	3301      	adds	r3, #1
   1a102:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
   1a106:	1a9b      	subs	r3, r3, r2
   1a108:	b29b      	uxth	r3, r3
            p.y -= p.y %
   1a10a:	b218      	sxth	r0, r3
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   1a10c:	f9b8 2008 	ldrsh.w	r2, [r8, #8]
   1a110:	444a      	add	r2, r9
            p.y -= p.y %
   1a112:	fb90 f1f2 	sdiv	r1, r0, r2
   1a116:	fb02 0211 	mls	r2, r2, r1, r0
   1a11a:	1a9b      	subs	r3, r3, r2
            p.y -= line_space;                                               /*Trim the last line space*/
   1a11c:	eba3 0909 	sub.w	r9, r3, r9
   1a120:	f8ad 9012 	strh.w	r9, [sp, #18]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1a124:	a904      	add	r1, sp, #16
   1a126:	4620      	mov	r0, r4
   1a128:	4b3a      	ldr	r3, [pc, #232]	; (1a214 <lv_label_refr_text+0x4e4>)
   1a12a:	4798      	blx	r3
   1a12c:	4680      	mov	r8, r0
   1a12e:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
   1a130:	682e      	ldr	r6, [r5, #0]
   1a132:	4630      	mov	r0, r6
   1a134:	4b38      	ldr	r3, [pc, #224]	; (1a218 <lv_label_refr_text+0x4e8>)
   1a136:	4798      	blx	r3
   1a138:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1a13a:	4b38      	ldr	r3, [pc, #224]	; (1a21c <lv_label_refr_text+0x4ec>)
   1a13c:	681b      	ldr	r3, [r3, #0]
   1a13e:	4641      	mov	r1, r8
   1a140:	4630      	mov	r0, r6
   1a142:	4798      	blx	r3
   1a144:	4606      	mov	r6, r0
   1a146:	9005      	str	r0, [sp, #20]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   1a148:	f100 0803 	add.w	r8, r0, #3
   1a14c:	45c1      	cmp	r9, r8
   1a14e:	d20e      	bcs.n	1a16e <lv_label_refr_text+0x43e>
                byte_id -= _lv_txt_encoded_size(&ext->text[byte_id]);
   1a150:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1a230 <lv_label_refr_text+0x500>
   1a154:	6828      	ldr	r0, [r5, #0]
   1a156:	4430      	add	r0, r6
   1a158:	f8da 3000 	ldr.w	r3, [sl]
   1a15c:	4798      	blx	r3
   1a15e:	9e05      	ldr	r6, [sp, #20]
   1a160:	1a36      	subs	r6, r6, r0
   1a162:	9605      	str	r6, [sp, #20]
                letter_id--;
   1a164:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   1a166:	f106 0803 	add.w	r8, r6, #3
   1a16a:	45c1      	cmp	r9, r8
   1a16c:	d3f2      	bcc.n	1a154 <lv_label_refr_text+0x424>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
   1a16e:	f04f 0a04 	mov.w	sl, #4
   1a172:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1a176:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1a230 <lv_label_refr_text+0x500>
   1a17a:	6828      	ldr	r0, [r5, #0]
   1a17c:	9b05      	ldr	r3, [sp, #20]
   1a17e:	4418      	add	r0, r3
   1a180:	f8db 3000 	ldr.w	r3, [fp]
   1a184:	4798      	blx	r3
   1a186:	4481      	add	r9, r0
   1a188:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
   1a18c:	a905      	add	r1, sp, #20
   1a18e:	6828      	ldr	r0, [r5, #0]
   1a190:	4b23      	ldr	r3, [pc, #140]	; (1a220 <lv_label_refr_text+0x4f0>)
   1a192:	681b      	ldr	r3, [r3, #0]
   1a194:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1a196:	f1ba 0a01 	subs.w	sl, sl, #1
   1a19a:	d1ee      	bne.n	1a17a <lv_label_refr_text+0x44a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   1a19c:	6829      	ldr	r1, [r5, #0]
   1a19e:	464a      	mov	r2, r9
   1a1a0:	4431      	add	r1, r6
   1a1a2:	4620      	mov	r0, r4
   1a1a4:	4b1f      	ldr	r3, [pc, #124]	; (1a224 <lv_label_refr_text+0x4f4>)
   1a1a6:	4798      	blx	r3
   1a1a8:	2800      	cmp	r0, #0
   1a1aa:	f43f ae10 	beq.w	19dce <lv_label_refr_text+0x9e>
   1a1ae:	1cf1      	adds	r1, r6, #3
                    ext->text[byte_id_ori + i] = '.';
   1a1b0:	222e      	movs	r2, #46	; 0x2e
   1a1b2:	682b      	ldr	r3, [r5, #0]
   1a1b4:	559a      	strb	r2, [r3, r6]
   1a1b6:	3601      	adds	r6, #1
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
   1a1b8:	428e      	cmp	r6, r1
   1a1ba:	d1fa      	bne.n	1a1b2 <lv_label_refr_text+0x482>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   1a1bc:	682b      	ldr	r3, [r5, #0]
   1a1be:	2200      	movs	r2, #0
   1a1c0:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1a1c4:	3703      	adds	r7, #3
   1a1c6:	812f      	strh	r7, [r5, #8]
   1a1c8:	e601      	b.n	19dce <lv_label_refr_text+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1a1ca:	2210      	movs	r2, #16
   1a1cc:	2100      	movs	r1, #0
   1a1ce:	4620      	mov	r0, r4
   1a1d0:	4e15      	ldr	r6, [pc, #84]	; (1a228 <lv_label_refr_text+0x4f8>)
   1a1d2:	47b0      	blx	r6
   1a1d4:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1a1d6:	2211      	movs	r2, #17
   1a1d8:	2100      	movs	r1, #0
   1a1da:	4620      	mov	r0, r4
   1a1dc:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1a1de:	1829      	adds	r1, r5, r0
   1a1e0:	f8bd 0056 	ldrh.w	r0, [sp, #86]	; 0x56
   1a1e4:	4401      	add	r1, r0
   1a1e6:	b209      	sxth	r1, r1
   1a1e8:	f8ad 1056 	strh.w	r1, [sp, #86]	; 0x56
        lv_obj_set_height(label, size.y);
   1a1ec:	4620      	mov	r0, r4
   1a1ee:	4b0f      	ldr	r3, [pc, #60]	; (1a22c <lv_label_refr_text+0x4fc>)
   1a1f0:	4798      	blx	r3
   1a1f2:	e5ec      	b.n	19dce <lv_label_refr_text+0x9e>
   1a1f4:	0001979d 	.word	0x0001979d
   1a1f8:	000118d1 	.word	0x000118d1
   1a1fc:	00019781 	.word	0x00019781
   1a200:	00011a39 	.word	0x00011a39
   1a204:	000119fd 	.word	0x000119fd
   1a208:	00011949 	.word	0x00011949
   1a20c:	20000060 	.word	0x20000060
   1a210:	00010609 	.word	0x00010609
   1a214:	00019a61 	.word	0x00019a61
   1a218:	0001af4f 	.word	0x0001af4f
   1a21c:	2000005c 	.word	0x2000005c
   1a220:	20000058 	.word	0x20000058
   1a224:	00019815 	.word	0x00019815
   1a228:	00004b5d 	.word	0x00004b5d
   1a22c:	00004a3d 	.word	0x00004a3d
   1a230:	20000054 	.word	0x20000054

0001a234 <lv_label_set_text>:
{
   1a234:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a236:	b083      	sub	sp, #12
   1a238:	4606      	mov	r6, r0
   1a23a:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a23c:	4b40      	ldr	r3, [pc, #256]	; (1a340 <lv_label_set_text+0x10c>)
   1a23e:	4798      	blx	r3
   1a240:	b960      	cbnz	r0, 1a25c <lv_label_set_text+0x28>
   1a242:	4b40      	ldr	r3, [pc, #256]	; (1a344 <lv_label_set_text+0x110>)
   1a244:	9300      	str	r3, [sp, #0]
   1a246:	22b8      	movs	r2, #184	; 0xb8
   1a248:	493f      	ldr	r1, [pc, #252]	; (1a348 <lv_label_set_text+0x114>)
   1a24a:	2003      	movs	r0, #3
   1a24c:	4c3f      	ldr	r4, [pc, #252]	; (1a34c <lv_label_set_text+0x118>)
   1a24e:	47a0      	blx	r4
   1a250:	4632      	mov	r2, r6
   1a252:	2300      	movs	r3, #0
   1a254:	483e      	ldr	r0, [pc, #248]	; (1a350 <lv_label_set_text+0x11c>)
   1a256:	493f      	ldr	r1, [pc, #252]	; (1a354 <lv_label_set_text+0x120>)
   1a258:	4788      	blx	r1
   1a25a:	e7fe      	b.n	1a25a <lv_label_set_text+0x26>
    lv_obj_invalidate(label);
   1a25c:	4630      	mov	r0, r6
   1a25e:	4b3e      	ldr	r3, [pc, #248]	; (1a358 <lv_label_set_text+0x124>)
   1a260:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a262:	4630      	mov	r0, r6
   1a264:	4b3d      	ldr	r3, [pc, #244]	; (1a35c <lv_label_set_text+0x128>)
   1a266:	4798      	blx	r3
   1a268:	4604      	mov	r4, r0
    if(text == NULL) {
   1a26a:	b305      	cbz	r5, 1a2ae <lv_label_set_text+0x7a>
    LV_ASSERT_STR(text);
   1a26c:	4628      	mov	r0, r5
   1a26e:	4b34      	ldr	r3, [pc, #208]	; (1a340 <lv_label_set_text+0x10c>)
   1a270:	4798      	blx	r3
   1a272:	b308      	cbz	r0, 1a2b8 <lv_label_set_text+0x84>
    if(ext->text == text && ext->static_txt == 0) {
   1a274:	6827      	ldr	r7, [r4, #0]
   1a276:	42bd      	cmp	r5, r7
   1a278:	d02b      	beq.n	1a2d2 <lv_label_set_text+0x9e>
        if(ext->text != NULL && ext->static_txt == 0) {
   1a27a:	b11f      	cbz	r7, 1a284 <lv_label_set_text+0x50>
   1a27c:	7c23      	ldrb	r3, [r4, #16]
   1a27e:	f013 0f08 	tst.w	r3, #8
   1a282:	d049      	beq.n	1a318 <lv_label_set_text+0xe4>
        size_t len = strlen(text) + 1;
   1a284:	4628      	mov	r0, r5
   1a286:	4b36      	ldr	r3, [pc, #216]	; (1a360 <lv_label_set_text+0x12c>)
   1a288:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
   1a28a:	3001      	adds	r0, #1
   1a28c:	4b35      	ldr	r3, [pc, #212]	; (1a364 <lv_label_set_text+0x130>)
   1a28e:	4798      	blx	r3
   1a290:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
   1a292:	4b2b      	ldr	r3, [pc, #172]	; (1a340 <lv_label_set_text+0x10c>)
   1a294:	4798      	blx	r3
   1a296:	2800      	cmp	r0, #0
   1a298:	d044      	beq.n	1a324 <lv_label_set_text+0xf0>
        if(ext->text == NULL) return;
   1a29a:	6820      	ldr	r0, [r4, #0]
   1a29c:	b150      	cbz	r0, 1a2b4 <lv_label_set_text+0x80>
        strcpy(ext->text, text);
   1a29e:	4629      	mov	r1, r5
   1a2a0:	4b31      	ldr	r3, [pc, #196]	; (1a368 <lv_label_set_text+0x134>)
   1a2a2:	4798      	blx	r3
        ext->static_txt = 0;
   1a2a4:	7c23      	ldrb	r3, [r4, #16]
   1a2a6:	f36f 03c3 	bfc	r3, #3, #1
   1a2aa:	7423      	strb	r3, [r4, #16]
   1a2ac:	e030      	b.n	1a310 <lv_label_set_text+0xdc>
        lv_label_refr_text(label);
   1a2ae:	4630      	mov	r0, r6
   1a2b0:	4b2e      	ldr	r3, [pc, #184]	; (1a36c <lv_label_set_text+0x138>)
   1a2b2:	4798      	blx	r3
}
   1a2b4:	b003      	add	sp, #12
   1a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_STR(text);
   1a2b8:	4b22      	ldr	r3, [pc, #136]	; (1a344 <lv_label_set_text+0x110>)
   1a2ba:	9300      	str	r3, [sp, #0]
   1a2bc:	22c4      	movs	r2, #196	; 0xc4
   1a2be:	4922      	ldr	r1, [pc, #136]	; (1a348 <lv_label_set_text+0x114>)
   1a2c0:	2003      	movs	r0, #3
   1a2c2:	4c22      	ldr	r4, [pc, #136]	; (1a34c <lv_label_set_text+0x118>)
   1a2c4:	47a0      	blx	r4
   1a2c6:	462a      	mov	r2, r5
   1a2c8:	2300      	movs	r3, #0
   1a2ca:	4821      	ldr	r0, [pc, #132]	; (1a350 <lv_label_set_text+0x11c>)
   1a2cc:	4921      	ldr	r1, [pc, #132]	; (1a354 <lv_label_set_text+0x120>)
   1a2ce:	4788      	blx	r1
   1a2d0:	e7fe      	b.n	1a2d0 <lv_label_set_text+0x9c>
    if(ext->text == text && ext->static_txt == 0) {
   1a2d2:	7c23      	ldrb	r3, [r4, #16]
   1a2d4:	f013 0f08 	tst.w	r3, #8
   1a2d8:	d1d4      	bne.n	1a284 <lv_label_set_text+0x50>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   1a2da:	4638      	mov	r0, r7
   1a2dc:	4b20      	ldr	r3, [pc, #128]	; (1a360 <lv_label_set_text+0x12c>)
   1a2de:	4798      	blx	r3
   1a2e0:	1c41      	adds	r1, r0, #1
   1a2e2:	4638      	mov	r0, r7
   1a2e4:	4b22      	ldr	r3, [pc, #136]	; (1a370 <lv_label_set_text+0x13c>)
   1a2e6:	4798      	blx	r3
   1a2e8:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
   1a2ea:	4b15      	ldr	r3, [pc, #84]	; (1a340 <lv_label_set_text+0x10c>)
   1a2ec:	4798      	blx	r3
   1a2ee:	b960      	cbnz	r0, 1a30a <lv_label_set_text+0xd6>
   1a2f0:	4b14      	ldr	r3, [pc, #80]	; (1a344 <lv_label_set_text+0x110>)
   1a2f2:	9300      	str	r3, [sp, #0]
   1a2f4:	22d5      	movs	r2, #213	; 0xd5
   1a2f6:	4914      	ldr	r1, [pc, #80]	; (1a348 <lv_label_set_text+0x114>)
   1a2f8:	2003      	movs	r0, #3
   1a2fa:	4d14      	ldr	r5, [pc, #80]	; (1a34c <lv_label_set_text+0x118>)
   1a2fc:	47a8      	blx	r5
   1a2fe:	6822      	ldr	r2, [r4, #0]
   1a300:	2300      	movs	r3, #0
   1a302:	481c      	ldr	r0, [pc, #112]	; (1a374 <lv_label_set_text+0x140>)
   1a304:	4913      	ldr	r1, [pc, #76]	; (1a354 <lv_label_set_text+0x120>)
   1a306:	4788      	blx	r1
   1a308:	e7fe      	b.n	1a308 <lv_label_set_text+0xd4>
        if(ext->text == NULL) return;
   1a30a:	6823      	ldr	r3, [r4, #0]
   1a30c:	2b00      	cmp	r3, #0
   1a30e:	d0d1      	beq.n	1a2b4 <lv_label_set_text+0x80>
    lv_label_refr_text(label);
   1a310:	4630      	mov	r0, r6
   1a312:	4b16      	ldr	r3, [pc, #88]	; (1a36c <lv_label_set_text+0x138>)
   1a314:	4798      	blx	r3
   1a316:	e7cd      	b.n	1a2b4 <lv_label_set_text+0x80>
            lv_mem_free(ext->text);
   1a318:	4638      	mov	r0, r7
   1a31a:	4b17      	ldr	r3, [pc, #92]	; (1a378 <lv_label_set_text+0x144>)
   1a31c:	4798      	blx	r3
            ext->text = NULL;
   1a31e:	2300      	movs	r3, #0
   1a320:	6023      	str	r3, [r4, #0]
   1a322:	e7af      	b.n	1a284 <lv_label_set_text+0x50>
        LV_ASSERT_MEM(ext->text);
   1a324:	4b07      	ldr	r3, [pc, #28]	; (1a344 <lv_label_set_text+0x110>)
   1a326:	9300      	str	r3, [sp, #0]
   1a328:	22ee      	movs	r2, #238	; 0xee
   1a32a:	4907      	ldr	r1, [pc, #28]	; (1a348 <lv_label_set_text+0x114>)
   1a32c:	2003      	movs	r0, #3
   1a32e:	4d07      	ldr	r5, [pc, #28]	; (1a34c <lv_label_set_text+0x118>)
   1a330:	47a8      	blx	r5
   1a332:	6822      	ldr	r2, [r4, #0]
   1a334:	2300      	movs	r3, #0
   1a336:	480f      	ldr	r0, [pc, #60]	; (1a374 <lv_label_set_text+0x140>)
   1a338:	4906      	ldr	r1, [pc, #24]	; (1a354 <lv_label_set_text+0x120>)
   1a33a:	4788      	blx	r1
   1a33c:	e7fe      	b.n	1a33c <lv_label_set_text+0x108>
   1a33e:	bf00      	nop
   1a340:	0000298d 	.word	0x0000298d
   1a344:	00020b78 	.word	0x00020b78
   1a348:	00020c94 	.word	0x00020c94
   1a34c:	00012805 	.word	0x00012805
   1a350:	0001bd20 	.word	0x0001bd20
   1a354:	00002995 	.word	0x00002995
   1a358:	000039a9 	.word	0x000039a9
   1a35c:	00005425 	.word	0x00005425
   1a360:	0001af4f 	.word	0x0001af4f
   1a364:	00012985 	.word	0x00012985
   1a368:	0001af3f 	.word	0x0001af3f
   1a36c:	00019d31 	.word	0x00019d31
   1a370:	00012e41 	.word	0x00012e41
   1a374:	0001b4bc 	.word	0x0001b4bc
   1a378:	00012a6d 	.word	0x00012a6d

0001a37c <lv_label_set_text_static>:
{
   1a37c:	b570      	push	{r4, r5, r6, lr}
   1a37e:	b082      	sub	sp, #8
   1a380:	4605      	mov	r5, r0
   1a382:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a384:	4b14      	ldr	r3, [pc, #80]	; (1a3d8 <lv_label_set_text_static+0x5c>)
   1a386:	4798      	blx	r3
   1a388:	b968      	cbnz	r0, 1a3a6 <lv_label_set_text_static+0x2a>
   1a38a:	4b14      	ldr	r3, [pc, #80]	; (1a3dc <lv_label_set_text_static+0x60>)
   1a38c:	9300      	str	r3, [sp, #0]
   1a38e:	f44f 72a6 	mov.w	r2, #332	; 0x14c
   1a392:	4913      	ldr	r1, [pc, #76]	; (1a3e0 <lv_label_set_text_static+0x64>)
   1a394:	2003      	movs	r0, #3
   1a396:	4c13      	ldr	r4, [pc, #76]	; (1a3e4 <lv_label_set_text_static+0x68>)
   1a398:	47a0      	blx	r4
   1a39a:	462a      	mov	r2, r5
   1a39c:	2300      	movs	r3, #0
   1a39e:	4812      	ldr	r0, [pc, #72]	; (1a3e8 <lv_label_set_text_static+0x6c>)
   1a3a0:	4912      	ldr	r1, [pc, #72]	; (1a3ec <lv_label_set_text_static+0x70>)
   1a3a2:	4788      	blx	r1
   1a3a4:	e7fe      	b.n	1a3a4 <lv_label_set_text_static+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a3a6:	4628      	mov	r0, r5
   1a3a8:	4b11      	ldr	r3, [pc, #68]	; (1a3f0 <lv_label_set_text_static+0x74>)
   1a3aa:	4798      	blx	r3
   1a3ac:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   1a3ae:	7c03      	ldrb	r3, [r0, #16]
   1a3b0:	f013 0f08 	tst.w	r3, #8
   1a3b4:	d105      	bne.n	1a3c2 <lv_label_set_text_static+0x46>
   1a3b6:	6800      	ldr	r0, [r0, #0]
   1a3b8:	b118      	cbz	r0, 1a3c2 <lv_label_set_text_static+0x46>
        lv_mem_free(ext->text);
   1a3ba:	4b0e      	ldr	r3, [pc, #56]	; (1a3f4 <lv_label_set_text_static+0x78>)
   1a3bc:	4798      	blx	r3
        ext->text = NULL;
   1a3be:	2300      	movs	r3, #0
   1a3c0:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
   1a3c2:	b126      	cbz	r6, 1a3ce <lv_label_set_text_static+0x52>
        ext->static_txt = 1;
   1a3c4:	7c23      	ldrb	r3, [r4, #16]
   1a3c6:	f043 0308 	orr.w	r3, r3, #8
   1a3ca:	7423      	strb	r3, [r4, #16]
        ext->text       = (char *)text;
   1a3cc:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
   1a3ce:	4628      	mov	r0, r5
   1a3d0:	4b09      	ldr	r3, [pc, #36]	; (1a3f8 <lv_label_set_text_static+0x7c>)
   1a3d2:	4798      	blx	r3
}
   1a3d4:	b002      	add	sp, #8
   1a3d6:	bd70      	pop	{r4, r5, r6, pc}
   1a3d8:	0000298d 	.word	0x0000298d
   1a3dc:	00020ba4 	.word	0x00020ba4
   1a3e0:	00020c94 	.word	0x00020c94
   1a3e4:	00012805 	.word	0x00012805
   1a3e8:	0001bd20 	.word	0x0001bd20
   1a3ec:	00002995 	.word	0x00002995
   1a3f0:	00005425 	.word	0x00005425
   1a3f4:	00012a6d 	.word	0x00012a6d
   1a3f8:	00019d31 	.word	0x00019d31

0001a3fc <lv_label_set_long_mode>:
{
   1a3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3fe:	b083      	sub	sp, #12
   1a400:	4605      	mov	r5, r0
   1a402:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a404:	4b22      	ldr	r3, [pc, #136]	; (1a490 <lv_label_set_long_mode+0x94>)
   1a406:	4798      	blx	r3
   1a408:	b968      	cbnz	r0, 1a426 <lv_label_set_long_mode+0x2a>
   1a40a:	4b22      	ldr	r3, [pc, #136]	; (1a494 <lv_label_set_long_mode+0x98>)
   1a40c:	9300      	str	r3, [sp, #0]
   1a40e:	f240 1265 	movw	r2, #357	; 0x165
   1a412:	4921      	ldr	r1, [pc, #132]	; (1a498 <lv_label_set_long_mode+0x9c>)
   1a414:	2003      	movs	r0, #3
   1a416:	4c21      	ldr	r4, [pc, #132]	; (1a49c <lv_label_set_long_mode+0xa0>)
   1a418:	47a0      	blx	r4
   1a41a:	462a      	mov	r2, r5
   1a41c:	2300      	movs	r3, #0
   1a41e:	4820      	ldr	r0, [pc, #128]	; (1a4a0 <lv_label_set_long_mode+0xa4>)
   1a420:	4920      	ldr	r1, [pc, #128]	; (1a4a4 <lv_label_set_long_mode+0xa8>)
   1a422:	4788      	blx	r1
   1a424:	e7fe      	b.n	1a424 <lv_label_set_long_mode+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a426:	4628      	mov	r0, r5
   1a428:	4b1f      	ldr	r3, [pc, #124]	; (1a4a8 <lv_label_set_long_mode+0xac>)
   1a42a:	4798      	blx	r3
   1a42c:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
   1a42e:	491f      	ldr	r1, [pc, #124]	; (1a4ac <lv_label_set_long_mode+0xb0>)
   1a430:	4628      	mov	r0, r5
   1a432:	4e1f      	ldr	r6, [pc, #124]	; (1a4b0 <lv_label_set_long_mode+0xb4>)
   1a434:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
   1a436:	491f      	ldr	r1, [pc, #124]	; (1a4b4 <lv_label_set_long_mode+0xb8>)
   1a438:	4628      	mov	r0, r5
   1a43a:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
   1a43c:	491e      	ldr	r1, [pc, #120]	; (1a4b8 <lv_label_set_long_mode+0xbc>)
   1a43e:	4628      	mov	r0, r5
   1a440:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
   1a442:	491e      	ldr	r1, [pc, #120]	; (1a4bc <lv_label_set_long_mode+0xc0>)
   1a444:	4628      	mov	r0, r5
   1a446:	47b0      	blx	r6
    ext->offset.x = 0;
   1a448:	2300      	movs	r3, #0
   1a44a:	81a3      	strh	r3, [r4, #12]
    ext->offset.y = 0;
   1a44c:	81e3      	strh	r3, [r4, #14]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   1a44e:	1efb      	subs	r3, r7, #3
   1a450:	b2db      	uxtb	r3, r3
   1a452:	2b02      	cmp	r3, #2
        ext->expand = 1;
   1a454:	7c23      	ldrb	r3, [r4, #16]
   1a456:	bf94      	ite	ls
   1a458:	f043 0380 	orrls.w	r3, r3, #128	; 0x80
        ext->expand = 0;
   1a45c:	f36f 13c7 	bfchi	r3, #7, #1
   1a460:	7423      	strb	r3, [r4, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   1a462:	7c23      	ldrb	r3, [r4, #16]
   1a464:	f003 0307 	and.w	r3, r3, #7
   1a468:	2b02      	cmp	r3, #2
   1a46a:	d008      	beq.n	1a47e <lv_label_set_long_mode+0x82>
    ext->long_mode = long_mode;
   1a46c:	7c23      	ldrb	r3, [r4, #16]
   1a46e:	f367 0302 	bfi	r3, r7, #0, #3
   1a472:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   1a474:	4628      	mov	r0, r5
   1a476:	4b12      	ldr	r3, [pc, #72]	; (1a4c0 <lv_label_set_long_mode+0xc4>)
   1a478:	4798      	blx	r3
}
   1a47a:	b003      	add	sp, #12
   1a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   1a47e:	8922      	ldrh	r2, [r4, #8]
   1a480:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a484:	429a      	cmp	r2, r3
   1a486:	d0f1      	beq.n	1a46c <lv_label_set_long_mode+0x70>
        lv_label_revert_dots(label);
   1a488:	4628      	mov	r0, r5
   1a48a:	4b0e      	ldr	r3, [pc, #56]	; (1a4c4 <lv_label_set_long_mode+0xc8>)
   1a48c:	4798      	blx	r3
   1a48e:	e7ed      	b.n	1a46c <lv_label_set_long_mode+0x70>
   1a490:	0000298d 	.word	0x0000298d
   1a494:	00020bc0 	.word	0x00020bc0
   1a498:	00020c94 	.word	0x00020c94
   1a49c:	00012805 	.word	0x00012805
   1a4a0:	0001bd20 	.word	0x0001bd20
   1a4a4:	00002995 	.word	0x00002995
   1a4a8:	00005425 	.word	0x00005425
   1a4ac:	00003bb1 	.word	0x00003bb1
   1a4b0:	000118d1 	.word	0x000118d1
   1a4b4:	00003c11 	.word	0x00003c11
   1a4b8:	0001979d 	.word	0x0001979d
   1a4bc:	00019781 	.word	0x00019781
   1a4c0:	00019d31 	.word	0x00019d31
   1a4c4:	000196f5 	.word	0x000196f5

0001a4c8 <lv_label_set_recolor>:
{
   1a4c8:	b530      	push	{r4, r5, lr}
   1a4ca:	b083      	sub	sp, #12
   1a4cc:	4604      	mov	r4, r0
   1a4ce:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a4d0:	4b10      	ldr	r3, [pc, #64]	; (1a514 <lv_label_set_recolor+0x4c>)
   1a4d2:	4798      	blx	r3
   1a4d4:	b968      	cbnz	r0, 1a4f2 <lv_label_set_recolor+0x2a>
   1a4d6:	4b10      	ldr	r3, [pc, #64]	; (1a518 <lv_label_set_recolor+0x50>)
   1a4d8:	9300      	str	r3, [sp, #0]
   1a4da:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1a4de:	490f      	ldr	r1, [pc, #60]	; (1a51c <lv_label_set_recolor+0x54>)
   1a4e0:	2003      	movs	r0, #3
   1a4e2:	4d0f      	ldr	r5, [pc, #60]	; (1a520 <lv_label_set_recolor+0x58>)
   1a4e4:	47a8      	blx	r5
   1a4e6:	4622      	mov	r2, r4
   1a4e8:	2300      	movs	r3, #0
   1a4ea:	480e      	ldr	r0, [pc, #56]	; (1a524 <lv_label_set_recolor+0x5c>)
   1a4ec:	490e      	ldr	r1, [pc, #56]	; (1a528 <lv_label_set_recolor+0x60>)
   1a4ee:	4788      	blx	r1
   1a4f0:	e7fe      	b.n	1a4f0 <lv_label_set_recolor+0x28>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a4f2:	4620      	mov	r0, r4
   1a4f4:	4b0d      	ldr	r3, [pc, #52]	; (1a52c <lv_label_set_recolor+0x64>)
   1a4f6:	4798      	blx	r3
    if(ext->recolor == en) return;
   1a4f8:	7c03      	ldrb	r3, [r0, #16]
   1a4fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a4fe:	42ab      	cmp	r3, r5
   1a500:	d006      	beq.n	1a510 <lv_label_set_recolor+0x48>
    ext->recolor = en == false ? 0 : 1;
   1a502:	7c03      	ldrb	r3, [r0, #16]
   1a504:	f365 1386 	bfi	r3, r5, #6, #1
   1a508:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
   1a50a:	4620      	mov	r0, r4
   1a50c:	4b08      	ldr	r3, [pc, #32]	; (1a530 <lv_label_set_recolor+0x68>)
   1a50e:	4798      	blx	r3
}
   1a510:	b003      	add	sp, #12
   1a512:	bd30      	pop	{r4, r5, pc}
   1a514:	0000298d 	.word	0x0000298d
   1a518:	00020bd8 	.word	0x00020bd8
   1a51c:	00020c94 	.word	0x00020c94
   1a520:	00012805 	.word	0x00012805
   1a524:	0001bd20 	.word	0x0001bd20
   1a528:	00002995 	.word	0x00002995
   1a52c:	00005425 	.word	0x00005425
   1a530:	00019d31 	.word	0x00019d31

0001a534 <lv_label_create>:
{
   1a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a538:	b082      	sub	sp, #8
   1a53a:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1a53c:	4b79      	ldr	r3, [pc, #484]	; (1a724 <lv_label_create+0x1f0>)
   1a53e:	4798      	blx	r3
   1a540:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
   1a542:	4b79      	ldr	r3, [pc, #484]	; (1a728 <lv_label_create+0x1f4>)
   1a544:	4798      	blx	r3
   1a546:	b1e8      	cbz	r0, 1a584 <lv_label_create+0x50>
    if(new_label == NULL) return NULL;
   1a548:	2c00      	cmp	r4, #0
   1a54a:	f000 809a 	beq.w	1a682 <lv_label_create+0x14e>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1a54e:	4b77      	ldr	r3, [pc, #476]	; (1a72c <lv_label_create+0x1f8>)
   1a550:	681b      	ldr	r3, [r3, #0]
   1a552:	b323      	cbz	r3, 1a59e <lv_label_create+0x6a>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   1a554:	2114      	movs	r1, #20
   1a556:	4620      	mov	r0, r4
   1a558:	4b75      	ldr	r3, [pc, #468]	; (1a730 <lv_label_create+0x1fc>)
   1a55a:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1a55c:	4620      	mov	r0, r4
   1a55e:	4b75      	ldr	r3, [pc, #468]	; (1a734 <lv_label_create+0x200>)
   1a560:	4798      	blx	r3
   1a562:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
   1a564:	4b70      	ldr	r3, [pc, #448]	; (1a728 <lv_label_create+0x1f4>)
   1a566:	4798      	blx	r3
   1a568:	b9f8      	cbnz	r0, 1a5aa <lv_label_create+0x76>
   1a56a:	4b73      	ldr	r3, [pc, #460]	; (1a738 <lv_label_create+0x204>)
   1a56c:	9300      	str	r3, [sp, #0]
   1a56e:	225d      	movs	r2, #93	; 0x5d
   1a570:	4972      	ldr	r1, [pc, #456]	; (1a73c <lv_label_create+0x208>)
   1a572:	2003      	movs	r0, #3
   1a574:	4c72      	ldr	r4, [pc, #456]	; (1a740 <lv_label_create+0x20c>)
   1a576:	47a0      	blx	r4
   1a578:	462a      	mov	r2, r5
   1a57a:	2300      	movs	r3, #0
   1a57c:	4871      	ldr	r0, [pc, #452]	; (1a744 <lv_label_create+0x210>)
   1a57e:	4972      	ldr	r1, [pc, #456]	; (1a748 <lv_label_create+0x214>)
   1a580:	4788      	blx	r1
   1a582:	e7fe      	b.n	1a582 <lv_label_create+0x4e>
    LV_ASSERT_MEM(new_label);
   1a584:	4b6c      	ldr	r3, [pc, #432]	; (1a738 <lv_label_create+0x204>)
   1a586:	9300      	str	r3, [sp, #0]
   1a588:	2254      	movs	r2, #84	; 0x54
   1a58a:	496c      	ldr	r1, [pc, #432]	; (1a73c <lv_label_create+0x208>)
   1a58c:	2003      	movs	r0, #3
   1a58e:	4d6c      	ldr	r5, [pc, #432]	; (1a740 <lv_label_create+0x20c>)
   1a590:	47a8      	blx	r5
   1a592:	4622      	mov	r2, r4
   1a594:	2300      	movs	r3, #0
   1a596:	486b      	ldr	r0, [pc, #428]	; (1a744 <lv_label_create+0x210>)
   1a598:	496b      	ldr	r1, [pc, #428]	; (1a748 <lv_label_create+0x214>)
   1a59a:	4788      	blx	r1
   1a59c:	e7fe      	b.n	1a59c <lv_label_create+0x68>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1a59e:	4620      	mov	r0, r4
   1a5a0:	4b6a      	ldr	r3, [pc, #424]	; (1a74c <lv_label_create+0x218>)
   1a5a2:	4798      	blx	r3
   1a5a4:	4b61      	ldr	r3, [pc, #388]	; (1a72c <lv_label_create+0x1f8>)
   1a5a6:	6018      	str	r0, [r3, #0]
   1a5a8:	e7d4      	b.n	1a554 <lv_label_create+0x20>
    if(ext == NULL) {
   1a5aa:	2d00      	cmp	r5, #0
   1a5ac:	d06d      	beq.n	1a68a <lv_label_create+0x156>
    ext->text       = NULL;
   1a5ae:	2300      	movs	r3, #0
   1a5b0:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
   1a5b2:	7c2a      	ldrb	r2, [r5, #16]
    ext->align      = LV_LABEL_ALIGN_AUTO;
   1a5b4:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1a5b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a5bc:	8129      	strh	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1a5be:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   1a5c2:	f363 0202 	bfi	r2, r3, #0, #3
   1a5c6:	742a      	strb	r2, [r5, #16]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
   1a5c8:	2219      	movs	r2, #25
   1a5ca:	816a      	strh	r2, [r5, #10]
    ext->offset.x = 0;
   1a5cc:	81ab      	strh	r3, [r5, #12]
    ext->offset.y = 0;
   1a5ce:	81eb      	strh	r3, [r5, #14]
    ext->dot.tmp_ptr   = NULL;
   1a5d0:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
   1a5d2:	7c6a      	ldrb	r2, [r5, #17]
   1a5d4:	f363 0200 	bfi	r2, r3, #0, #1
   1a5d8:	746a      	strb	r2, [r5, #17]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1a5da:	495d      	ldr	r1, [pc, #372]	; (1a750 <lv_label_create+0x21c>)
   1a5dc:	4620      	mov	r0, r4
   1a5de:	4b5d      	ldr	r3, [pc, #372]	; (1a754 <lv_label_create+0x220>)
   1a5e0:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   1a5e2:	495d      	ldr	r1, [pc, #372]	; (1a758 <lv_label_create+0x224>)
   1a5e4:	4620      	mov	r0, r4
   1a5e6:	4b5d      	ldr	r3, [pc, #372]	; (1a75c <lv_label_create+0x228>)
   1a5e8:	4798      	blx	r3
    if(copy == NULL) {
   1a5ea:	2f00      	cmp	r7, #0
   1a5ec:	d052      	beq.n	1a694 <lv_label_create+0x160>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1a5ee:	4638      	mov	r0, r7
   1a5f0:	4b50      	ldr	r3, [pc, #320]	; (1a734 <lv_label_create+0x200>)
   1a5f2:	4798      	blx	r3
   1a5f4:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   1a5f6:	4638      	mov	r0, r7
   1a5f8:	4b59      	ldr	r3, [pc, #356]	; (1a760 <lv_label_create+0x22c>)
   1a5fa:	4798      	blx	r3
   1a5fc:	4601      	mov	r1, r0
   1a5fe:	4620      	mov	r0, r4
   1a600:	4b58      	ldr	r3, [pc, #352]	; (1a764 <lv_label_create+0x230>)
   1a602:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   1a604:	4638      	mov	r0, r7
   1a606:	4b58      	ldr	r3, [pc, #352]	; (1a768 <lv_label_create+0x234>)
   1a608:	4798      	blx	r3
   1a60a:	4601      	mov	r1, r0
   1a60c:	4620      	mov	r0, r4
   1a60e:	4b57      	ldr	r3, [pc, #348]	; (1a76c <lv_label_create+0x238>)
   1a610:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
   1a612:	4638      	mov	r0, r7
   1a614:	4b56      	ldr	r3, [pc, #344]	; (1a770 <lv_label_create+0x23c>)
   1a616:	4798      	blx	r3
   1a618:	4601      	mov	r1, r0
   1a61a:	4620      	mov	r0, r4
   1a61c:	4b55      	ldr	r3, [pc, #340]	; (1a774 <lv_label_create+0x240>)
   1a61e:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
   1a620:	7c33      	ldrb	r3, [r6, #16]
   1a622:	f013 0f08 	tst.w	r3, #8
   1a626:	d146      	bne.n	1a6b6 <lv_label_create+0x182>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1a628:	4638      	mov	r0, r7
   1a62a:	4b53      	ldr	r3, [pc, #332]	; (1a778 <lv_label_create+0x244>)
   1a62c:	4798      	blx	r3
   1a62e:	4601      	mov	r1, r0
   1a630:	4620      	mov	r0, r4
   1a632:	4b52      	ldr	r3, [pc, #328]	; (1a77c <lv_label_create+0x248>)
   1a634:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   1a636:	7c33      	ldrb	r3, [r6, #16]
   1a638:	f003 0307 	and.w	r3, r3, #7
   1a63c:	2b02      	cmp	r3, #2
   1a63e:	d042      	beq.n	1a6c6 <lv_label_create+0x192>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1a640:	7c73      	ldrb	r3, [r6, #17]
   1a642:	f013 0f01 	tst.w	r3, #1
   1a646:	d064      	beq.n	1a712 <lv_label_create+0x1de>
   1a648:	6870      	ldr	r0, [r6, #4]
   1a64a:	2800      	cmp	r0, #0
   1a64c:	d061      	beq.n	1a712 <lv_label_create+0x1de>
            uint16_t len = (uint16_t)strlen(copy_ext->dot.tmp_ptr);
   1a64e:	4b4c      	ldr	r3, [pc, #304]	; (1a780 <lv_label_create+0x24c>)
   1a650:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1a652:	b282      	uxth	r2, r0
   1a654:	6869      	ldr	r1, [r5, #4]
   1a656:	4620      	mov	r0, r4
   1a658:	4b4a      	ldr	r3, [pc, #296]	; (1a784 <lv_label_create+0x250>)
   1a65a:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   1a65c:	7c72      	ldrb	r2, [r6, #17]
   1a65e:	7c6b      	ldrb	r3, [r5, #17]
   1a660:	f362 0300 	bfi	r3, r2, #0, #1
   1a664:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
   1a666:	8933      	ldrh	r3, [r6, #8]
   1a668:	812b      	strh	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_STYLE_PROP_ALL);
   1a66a:	21ff      	movs	r1, #255	; 0xff
   1a66c:	4620      	mov	r0, r4
   1a66e:	4b46      	ldr	r3, [pc, #280]	; (1a788 <lv_label_create+0x254>)
   1a670:	4798      	blx	r3
    LV_LOG_INFO("label created");
   1a672:	4b46      	ldr	r3, [pc, #280]	; (1a78c <lv_label_create+0x258>)
   1a674:	9300      	str	r3, [sp, #0]
   1a676:	4b30      	ldr	r3, [pc, #192]	; (1a738 <lv_label_create+0x204>)
   1a678:	22a8      	movs	r2, #168	; 0xa8
   1a67a:	4930      	ldr	r1, [pc, #192]	; (1a73c <lv_label_create+0x208>)
   1a67c:	2001      	movs	r0, #1
   1a67e:	4d30      	ldr	r5, [pc, #192]	; (1a740 <lv_label_create+0x20c>)
   1a680:	47a8      	blx	r5
}
   1a682:	4620      	mov	r0, r4
   1a684:	b002      	add	sp, #8
   1a686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
   1a68a:	4620      	mov	r0, r4
   1a68c:	4b40      	ldr	r3, [pc, #256]	; (1a790 <lv_label_create+0x25c>)
   1a68e:	4798      	blx	r3
        return NULL;
   1a690:	2400      	movs	r4, #0
   1a692:	e7f6      	b.n	1a682 <lv_label_create+0x14e>
        lv_theme_apply(new_label, LV_THEME_LABEL);
   1a694:	2112      	movs	r1, #18
   1a696:	4620      	mov	r0, r4
   1a698:	4b3e      	ldr	r3, [pc, #248]	; (1a794 <lv_label_create+0x260>)
   1a69a:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
   1a69c:	2100      	movs	r1, #0
   1a69e:	4620      	mov	r0, r4
   1a6a0:	4b3d      	ldr	r3, [pc, #244]	; (1a798 <lv_label_create+0x264>)
   1a6a2:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   1a6a4:	2100      	movs	r1, #0
   1a6a6:	4620      	mov	r0, r4
   1a6a8:	4b2e      	ldr	r3, [pc, #184]	; (1a764 <lv_label_create+0x230>)
   1a6aa:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
   1a6ac:	493b      	ldr	r1, [pc, #236]	; (1a79c <lv_label_create+0x268>)
   1a6ae:	4620      	mov	r0, r4
   1a6b0:	4b32      	ldr	r3, [pc, #200]	; (1a77c <lv_label_create+0x248>)
   1a6b2:	4798      	blx	r3
   1a6b4:	e7dd      	b.n	1a672 <lv_label_create+0x13e>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
   1a6b6:	4638      	mov	r0, r7
   1a6b8:	4b2f      	ldr	r3, [pc, #188]	; (1a778 <lv_label_create+0x244>)
   1a6ba:	4798      	blx	r3
   1a6bc:	4601      	mov	r1, r0
   1a6be:	4620      	mov	r0, r4
   1a6c0:	4b37      	ldr	r3, [pc, #220]	; (1a7a0 <lv_label_create+0x26c>)
   1a6c2:	4798      	blx	r3
   1a6c4:	e7b7      	b.n	1a636 <lv_label_create+0x102>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
   1a6c6:	682f      	ldr	r7, [r5, #0]
   1a6c8:	6830      	ldr	r0, [r6, #0]
   1a6ca:	4b36      	ldr	r3, [pc, #216]	; (1a7a4 <lv_label_create+0x270>)
   1a6cc:	4798      	blx	r3
   1a6ce:	4601      	mov	r1, r0
   1a6d0:	4638      	mov	r0, r7
   1a6d2:	4b35      	ldr	r3, [pc, #212]	; (1a7a8 <lv_label_create+0x274>)
   1a6d4:	4798      	blx	r3
   1a6d6:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
   1a6d8:	4b13      	ldr	r3, [pc, #76]	; (1a728 <lv_label_create+0x1f4>)
   1a6da:	4798      	blx	r3
   1a6dc:	b960      	cbnz	r0, 1a6f8 <lv_label_create+0x1c4>
   1a6de:	4b16      	ldr	r3, [pc, #88]	; (1a738 <lv_label_create+0x204>)
   1a6e0:	9300      	str	r3, [sp, #0]
   1a6e2:	2295      	movs	r2, #149	; 0x95
   1a6e4:	4915      	ldr	r1, [pc, #84]	; (1a73c <lv_label_create+0x208>)
   1a6e6:	2003      	movs	r0, #3
   1a6e8:	4c15      	ldr	r4, [pc, #84]	; (1a740 <lv_label_create+0x20c>)
   1a6ea:	47a0      	blx	r4
   1a6ec:	682a      	ldr	r2, [r5, #0]
   1a6ee:	2300      	movs	r3, #0
   1a6f0:	4814      	ldr	r0, [pc, #80]	; (1a744 <lv_label_create+0x210>)
   1a6f2:	4915      	ldr	r1, [pc, #84]	; (1a748 <lv_label_create+0x214>)
   1a6f4:	4788      	blx	r1
   1a6f6:	e7fe      	b.n	1a6f6 <lv_label_create+0x1c2>
            if(ext->text == NULL) return NULL;
   1a6f8:	682f      	ldr	r7, [r5, #0]
   1a6fa:	b187      	cbz	r7, 1a71e <lv_label_create+0x1ea>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
   1a6fc:	f8d6 8000 	ldr.w	r8, [r6]
   1a700:	4640      	mov	r0, r8
   1a702:	4b28      	ldr	r3, [pc, #160]	; (1a7a4 <lv_label_create+0x270>)
   1a704:	4798      	blx	r3
   1a706:	4602      	mov	r2, r0
   1a708:	4641      	mov	r1, r8
   1a70a:	4638      	mov	r0, r7
   1a70c:	4b27      	ldr	r3, [pc, #156]	; (1a7ac <lv_label_create+0x278>)
   1a70e:	4798      	blx	r3
   1a710:	e796      	b.n	1a640 <lv_label_create+0x10c>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   1a712:	2204      	movs	r2, #4
   1a714:	18b1      	adds	r1, r6, r2
   1a716:	18a8      	adds	r0, r5, r2
   1a718:	4b24      	ldr	r3, [pc, #144]	; (1a7ac <lv_label_create+0x278>)
   1a71a:	4798      	blx	r3
   1a71c:	e79e      	b.n	1a65c <lv_label_create+0x128>
            if(ext->text == NULL) return NULL;
   1a71e:	2400      	movs	r4, #0
   1a720:	e7af      	b.n	1a682 <lv_label_create+0x14e>
   1a722:	bf00      	nop
   1a724:	000044ad 	.word	0x000044ad
   1a728:	0000298d 	.word	0x0000298d
   1a72c:	20006bfc 	.word	0x20006bfc
   1a730:	00003259 	.word	0x00003259
   1a734:	00005425 	.word	0x00005425
   1a738:	00020bf0 	.word	0x00020bf0
   1a73c:	00020c94 	.word	0x00020c94
   1a740:	00012805 	.word	0x00012805
   1a744:	0001b4bc 	.word	0x0001b4bc
   1a748:	00002995 	.word	0x00002995
   1a74c:	000053dd 	.word	0x000053dd
   1a750:	0001a931 	.word	0x0001a931
   1a754:	00003211 	.word	0x00003211
   1a758:	0001a7b1 	.word	0x0001a7b1
   1a75c:	000031b5 	.word	0x000031b5
   1a760:	0001995d 	.word	0x0001995d
   1a764:	0001a3fd 	.word	0x0001a3fd
   1a768:	00019a0d 	.word	0x00019a0d
   1a76c:	0001a4c9 	.word	0x0001a4c9
   1a770:	000199b1 	.word	0x000199b1
   1a774:	000198a1 	.word	0x000198a1
   1a778:	0001990d 	.word	0x0001990d
   1a77c:	0001a235 	.word	0x0001a235
   1a780:	0001af4f 	.word	0x0001af4f
   1a784:	00019815 	.word	0x00019815
   1a788:	00004121 	.word	0x00004121
   1a78c:	00020cf8 	.word	0x00020cf8
   1a790:	000055ed 	.word	0x000055ed
   1a794:	00014791 	.word	0x00014791
   1a798:	00003029 	.word	0x00003029
   1a79c:	00020cf0 	.word	0x00020cf0
   1a7a0:	0001a37d 	.word	0x0001a37d
   1a7a4:	00012af9 	.word	0x00012af9
   1a7a8:	00012e41 	.word	0x00012e41
   1a7ac:	00012bfd 	.word	0x00012bfd

0001a7b0 <lv_label_signal>:
{
   1a7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7b4:	4607      	mov	r7, r0
   1a7b6:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
   1a7b8:	2908      	cmp	r1, #8
   1a7ba:	d015      	beq.n	1a7e8 <lv_label_signal+0x38>
   1a7bc:	460c      	mov	r4, r1
    res = ancestor_signal(label, sign, param);
   1a7be:	4b30      	ldr	r3, [pc, #192]	; (1a880 <lv_label_signal+0xd0>)
   1a7c0:	681b      	ldr	r3, [r3, #0]
   1a7c2:	4798      	blx	r3
   1a7c4:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
   1a7c6:	2801      	cmp	r0, #1
   1a7c8:	d115      	bne.n	1a7f6 <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1a7ca:	2c07      	cmp	r4, #7
   1a7cc:	d020      	beq.n	1a810 <lv_label_signal+0x60>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a7ce:	4638      	mov	r0, r7
   1a7d0:	4b2c      	ldr	r3, [pc, #176]	; (1a884 <lv_label_signal+0xd4>)
   1a7d2:	4798      	blx	r3
   1a7d4:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   1a7d6:	bb44      	cbnz	r4, 1a82a <lv_label_signal+0x7a>
        if(ext->static_txt == 0) {
   1a7d8:	7c03      	ldrb	r3, [r0, #16]
   1a7da:	f013 0f08 	tst.w	r3, #8
   1a7de:	d01d      	beq.n	1a81c <lv_label_signal+0x6c>
        lv_label_dot_tmp_free(label);
   1a7e0:	4638      	mov	r0, r7
   1a7e2:	4b29      	ldr	r3, [pc, #164]	; (1a888 <lv_label_signal+0xd8>)
   1a7e4:	4798      	blx	r3
   1a7e6:	e006      	b.n	1a7f6 <lv_label_signal+0x46>
    switch(type) {
   1a7e8:	7813      	ldrb	r3, [r2, #0]
   1a7ea:	b93b      	cbnz	r3, 1a7fc <lv_label_signal+0x4c>
            style_dsc_p = &label->style_list;
   1a7ec:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
   1a7f0:	606b      	str	r3, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
   1a7f2:	2601      	movs	r6, #1
   1a7f4:	b123      	cbz	r3, 1a800 <lv_label_signal+0x50>
}
   1a7f6:	4630      	mov	r0, r6
   1a7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            style_dsc_p = NULL;
   1a7fc:	2300      	movs	r3, #0
   1a7fe:	e7f7      	b.n	1a7f0 <lv_label_signal+0x40>
        else return ancestor_signal(label, sign, param);
   1a800:	4b1f      	ldr	r3, [pc, #124]	; (1a880 <lv_label_signal+0xd0>)
   1a802:	681b      	ldr	r3, [r3, #0]
   1a804:	462a      	mov	r2, r5
   1a806:	2108      	movs	r1, #8
   1a808:	4638      	mov	r0, r7
   1a80a:	4798      	blx	r3
   1a80c:	4606      	mov	r6, r0
   1a80e:	e7f2      	b.n	1a7f6 <lv_label_signal+0x46>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1a810:	491e      	ldr	r1, [pc, #120]	; (1a88c <lv_label_signal+0xdc>)
   1a812:	4628      	mov	r0, r5
   1a814:	4b1e      	ldr	r3, [pc, #120]	; (1a890 <lv_label_signal+0xe0>)
   1a816:	4798      	blx	r3
   1a818:	4606      	mov	r6, r0
   1a81a:	e7ec      	b.n	1a7f6 <lv_label_signal+0x46>
            lv_mem_free(ext->text);
   1a81c:	6800      	ldr	r0, [r0, #0]
   1a81e:	4b1d      	ldr	r3, [pc, #116]	; (1a894 <lv_label_signal+0xe4>)
   1a820:	4798      	blx	r3
            ext->text = NULL;
   1a822:	2300      	movs	r3, #0
   1a824:	f8c8 3000 	str.w	r3, [r8]
   1a828:	e7da      	b.n	1a7e0 <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1a82a:	2c04      	cmp	r4, #4
   1a82c:	d014      	beq.n	1a858 <lv_label_signal+0xa8>
    else if(sign == LV_SIGNAL_COORD_CHG) {
   1a82e:	2c02      	cmp	r4, #2
   1a830:	d1e1      	bne.n	1a7f6 <lv_label_signal+0x46>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1a832:	88aa      	ldrh	r2, [r5, #4]
   1a834:	3201      	adds	r2, #1
   1a836:	882b      	ldrh	r3, [r5, #0]
   1a838:	1ad2      	subs	r2, r2, r3
   1a83a:	8abb      	ldrh	r3, [r7, #20]
   1a83c:	3301      	adds	r3, #1
   1a83e:	8a39      	ldrh	r1, [r7, #16]
   1a840:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1a842:	b292      	uxth	r2, r2
   1a844:	b29b      	uxth	r3, r3
   1a846:	429a      	cmp	r2, r3
   1a848:	d00d      	beq.n	1a866 <lv_label_signal+0xb6>
            lv_label_revert_dots(label);
   1a84a:	4638      	mov	r0, r7
   1a84c:	4b12      	ldr	r3, [pc, #72]	; (1a898 <lv_label_signal+0xe8>)
   1a84e:	4798      	blx	r3
            lv_label_refr_text(label);
   1a850:	4638      	mov	r0, r7
   1a852:	4b12      	ldr	r3, [pc, #72]	; (1a89c <lv_label_signal+0xec>)
   1a854:	4798      	blx	r3
   1a856:	e7ce      	b.n	1a7f6 <lv_label_signal+0x46>
        lv_label_revert_dots(label);
   1a858:	4638      	mov	r0, r7
   1a85a:	4b0f      	ldr	r3, [pc, #60]	; (1a898 <lv_label_signal+0xe8>)
   1a85c:	4798      	blx	r3
        lv_label_refr_text(label);
   1a85e:	4638      	mov	r0, r7
   1a860:	4b0e      	ldr	r3, [pc, #56]	; (1a89c <lv_label_signal+0xec>)
   1a862:	4798      	blx	r3
   1a864:	e7c7      	b.n	1a7f6 <lv_label_signal+0x46>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1a866:	88ea      	ldrh	r2, [r5, #6]
   1a868:	3201      	adds	r2, #1
   1a86a:	886b      	ldrh	r3, [r5, #2]
   1a86c:	1ad2      	subs	r2, r2, r3
   1a86e:	8afb      	ldrh	r3, [r7, #22]
   1a870:	3301      	adds	r3, #1
   1a872:	8a79      	ldrh	r1, [r7, #18]
   1a874:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1a876:	b292      	uxth	r2, r2
   1a878:	b29b      	uxth	r3, r3
   1a87a:	429a      	cmp	r2, r3
   1a87c:	d1e5      	bne.n	1a84a <lv_label_signal+0x9a>
   1a87e:	e7ba      	b.n	1a7f6 <lv_label_signal+0x46>
   1a880:	20006bfc 	.word	0x20006bfc
   1a884:	00005425 	.word	0x00005425
   1a888:	000196c5 	.word	0x000196c5
   1a88c:	00020d08 	.word	0x00020d08
   1a890:	000056dd 	.word	0x000056dd
   1a894:	00012a6d 	.word	0x00012a6d
   1a898:	000196f5 	.word	0x000196f5
   1a89c:	00019d31 	.word	0x00019d31

0001a8a0 <lv_label_get_text_sel_start>:
{
   1a8a0:	b530      	push	{r4, r5, lr}
   1a8a2:	b083      	sub	sp, #12
   1a8a4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a8a6:	4b0a      	ldr	r3, [pc, #40]	; (1a8d0 <lv_label_get_text_sel_start+0x30>)
   1a8a8:	4798      	blx	r3
   1a8aa:	b118      	cbz	r0, 1a8b4 <lv_label_get_text_sel_start+0x14>
}
   1a8ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a8b0:	b003      	add	sp, #12
   1a8b2:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a8b4:	4b07      	ldr	r3, [pc, #28]	; (1a8d4 <lv_label_get_text_sel_start+0x34>)
   1a8b6:	9300      	str	r3, [sp, #0]
   1a8b8:	f240 321d 	movw	r2, #797	; 0x31d
   1a8bc:	4906      	ldr	r1, [pc, #24]	; (1a8d8 <lv_label_get_text_sel_start+0x38>)
   1a8be:	2003      	movs	r0, #3
   1a8c0:	4d06      	ldr	r5, [pc, #24]	; (1a8dc <lv_label_get_text_sel_start+0x3c>)
   1a8c2:	47a8      	blx	r5
   1a8c4:	4622      	mov	r2, r4
   1a8c6:	2300      	movs	r3, #0
   1a8c8:	4805      	ldr	r0, [pc, #20]	; (1a8e0 <lv_label_get_text_sel_start+0x40>)
   1a8ca:	4906      	ldr	r1, [pc, #24]	; (1a8e4 <lv_label_get_text_sel_start+0x44>)
   1a8cc:	4788      	blx	r1
   1a8ce:	e7fe      	b.n	1a8ce <lv_label_get_text_sel_start+0x2e>
   1a8d0:	0000298d 	.word	0x0000298d
   1a8d4:	00020c18 	.word	0x00020c18
   1a8d8:	00020c94 	.word	0x00020c94
   1a8dc:	00012805 	.word	0x00012805
   1a8e0:	0001bd20 	.word	0x0001bd20
   1a8e4:	00002995 	.word	0x00002995

0001a8e8 <lv_label_get_text_sel_end>:
{
   1a8e8:	b530      	push	{r4, r5, lr}
   1a8ea:	b083      	sub	sp, #12
   1a8ec:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a8ee:	4b0a      	ldr	r3, [pc, #40]	; (1a918 <lv_label_get_text_sel_end+0x30>)
   1a8f0:	4798      	blx	r3
   1a8f2:	b118      	cbz	r0, 1a8fc <lv_label_get_text_sel_end+0x14>
}
   1a8f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a8f8:	b003      	add	sp, #12
   1a8fa:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
   1a8fc:	4b07      	ldr	r3, [pc, #28]	; (1a91c <lv_label_get_text_sel_end+0x34>)
   1a8fe:	9300      	str	r3, [sp, #0]
   1a900:	f44f 724c 	mov.w	r2, #816	; 0x330
   1a904:	4906      	ldr	r1, [pc, #24]	; (1a920 <lv_label_get_text_sel_end+0x38>)
   1a906:	2003      	movs	r0, #3
   1a908:	4d06      	ldr	r5, [pc, #24]	; (1a924 <lv_label_get_text_sel_end+0x3c>)
   1a90a:	47a8      	blx	r5
   1a90c:	4622      	mov	r2, r4
   1a90e:	2300      	movs	r3, #0
   1a910:	4805      	ldr	r0, [pc, #20]	; (1a928 <lv_label_get_text_sel_end+0x40>)
   1a912:	4906      	ldr	r1, [pc, #24]	; (1a92c <lv_label_get_text_sel_end+0x44>)
   1a914:	4788      	blx	r1
   1a916:	e7fe      	b.n	1a916 <lv_label_get_text_sel_end+0x2e>
   1a918:	0000298d 	.word	0x0000298d
   1a91c:	00020c34 	.word	0x00020c34
   1a920:	00020c94 	.word	0x00020c94
   1a924:	00012805 	.word	0x00012805
   1a928:	0001bd20 	.word	0x0001bd20
   1a92c:	00002995 	.word	0x00002995

0001a930 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
   1a930:	2a02      	cmp	r2, #2
   1a932:	f000 811e 	beq.w	1ab72 <lv_label_design+0x242>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   1a936:	b10a      	cbz	r2, 1a93c <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
   1a938:	2000      	movs	r0, #0
   1a93a:	4770      	bx	lr
{
   1a93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a940:	b0a9      	sub	sp, #164	; 0xa4
   1a942:	460f      	mov	r7, r1
   1a944:	4605      	mov	r5, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1a946:	4b8c      	ldr	r3, [pc, #560]	; (1ab78 <lv_label_design+0x248>)
   1a948:	4798      	blx	r3
   1a94a:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1a94c:	2204      	movs	r2, #4
   1a94e:	2100      	movs	r1, #0
   1a950:	4628      	mov	r0, r5
   1a952:	4c8a      	ldr	r4, [pc, #552]	; (1ab7c <lv_label_design+0x24c>)
   1a954:	47a0      	blx	r4
   1a956:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1a958:	2205      	movs	r2, #5
   1a95a:	2100      	movs	r1, #0
   1a95c:	4628      	mov	r0, r5
   1a95e:	47a0      	blx	r4
   1a960:	f105 030f 	add.w	r3, r5, #15
   1a964:	f105 0617 	add.w	r6, r5, #23
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
   1a968:	aa06      	add	r2, sp, #24
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
   1a96a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   1a96e:	f802 4b01 	strb.w	r4, [r2], #1
    while(len) {
   1a972:	42b3      	cmp	r3, r6
   1a974:	d1f9      	bne.n	1a96a <lv_label_design+0x3a>
        bg_coords.x1 -= w;
   1a976:	fa1f f989 	uxth.w	r9, r9
   1a97a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1a97e:	eba3 0309 	sub.w	r3, r3, r9
   1a982:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
   1a986:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1a98a:	4499      	add	r9, r3
   1a98c:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
   1a990:	b280      	uxth	r0, r0
   1a992:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1a996:	1a1b      	subs	r3, r3, r0
   1a998:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
   1a99c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a9a0:	4418      	add	r0, r3
   1a9a2:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   1a9a6:	a813      	add	r0, sp, #76	; 0x4c
   1a9a8:	4b75      	ldr	r3, [pc, #468]	; (1ab80 <lv_label_design+0x250>)
   1a9aa:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
   1a9ac:	aa13      	add	r2, sp, #76	; 0x4c
   1a9ae:	2100      	movs	r1, #0
   1a9b0:	4628      	mov	r0, r5
   1a9b2:	4b74      	ldr	r3, [pc, #464]	; (1ab84 <lv_label_design+0x254>)
   1a9b4:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
   1a9b6:	aa13      	add	r2, sp, #76	; 0x4c
   1a9b8:	4639      	mov	r1, r7
   1a9ba:	a806      	add	r0, sp, #24
   1a9bc:	4b72      	ldr	r3, [pc, #456]	; (1ab88 <lv_label_design+0x258>)
   1a9be:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
   1a9c0:	a908      	add	r1, sp, #32
   1a9c2:	4628      	mov	r0, r5
   1a9c4:	4b71      	ldr	r3, [pc, #452]	; (1ab8c <lv_label_design+0x25c>)
   1a9c6:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
   1a9c8:	aa08      	add	r2, sp, #32
   1a9ca:	4639      	mov	r1, r7
   1a9cc:	a80a      	add	r0, sp, #40	; 0x28
   1a9ce:	4b70      	ldr	r3, [pc, #448]	; (1ab90 <lv_label_design+0x260>)
   1a9d0:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
   1a9d2:	b910      	cbnz	r0, 1a9da <lv_label_design+0xaa>
}
   1a9d4:	b029      	add	sp, #164	; 0xa4
   1a9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
   1a9da:	4628      	mov	r0, r5
   1a9dc:	4b6d      	ldr	r3, [pc, #436]	; (1ab94 <lv_label_design+0x264>)
   1a9de:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1a9e0:	f898 3010 	ldrb.w	r3, [r8, #16]
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
   1a9e4:	f3c3 1480 	ubfx	r4, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1a9e8:	f013 0f80 	tst.w	r3, #128	; 0x80
   1a9ec:	bf18      	it	ne
   1a9ee:	f044 0402 	orrne.w	r4, r4, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1a9f2:	f013 0f07 	tst.w	r3, #7
   1a9f6:	bf08      	it	eq
   1a9f8:	f044 0410 	orreq.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1a9fc:	2801      	cmp	r0, #1
   1a9fe:	d038      	beq.n	1aa72 <lv_label_design+0x142>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1aa00:	2802      	cmp	r0, #2
   1aa02:	bf08      	it	eq
   1aa04:	f044 0408 	orreq.w	r4, r4, #8
        lv_draw_label_dsc_init(&label_draw_dsc);
   1aa08:	a80c      	add	r0, sp, #48	; 0x30
   1aa0a:	4b63      	ldr	r3, [pc, #396]	; (1ab98 <lv_label_design+0x268>)
   1aa0c:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
   1aa0e:	4628      	mov	r0, r5
   1aa10:	4b62      	ldr	r3, [pc, #392]	; (1ab9c <lv_label_design+0x26c>)
   1aa12:	4798      	blx	r3
   1aa14:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
   1aa18:	4628      	mov	r0, r5
   1aa1a:	4b61      	ldr	r3, [pc, #388]	; (1aba0 <lv_label_design+0x270>)
   1aa1c:	4798      	blx	r3
   1aa1e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
        label_draw_dsc.ofs_x = ext->offset.x;
   1aa22:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   1aa26:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        label_draw_dsc.ofs_y = ext->offset.y;
   1aa2a:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   1aa2e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_draw_dsc.flag = flag;
   1aa32:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   1aa36:	aa0c      	add	r2, sp, #48	; 0x30
   1aa38:	2100      	movs	r1, #0
   1aa3a:	4628      	mov	r0, r5
   1aa3c:	4b59      	ldr	r3, [pc, #356]	; (1aba4 <lv_label_design+0x274>)
   1aa3e:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   1aa40:	f898 2010 	ldrb.w	r2, [r8, #16]
   1aa44:	f002 0307 	and.w	r3, r2, #7
   1aa48:	3b03      	subs	r3, #3
   1aa4a:	b2db      	uxtb	r3, r3
   1aa4c:	2b01      	cmp	r3, #1
   1aa4e:	d913      	bls.n	1aa78 <lv_label_design+0x148>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   1aa50:	f8d8 3000 	ldr.w	r3, [r8]
   1aa54:	2200      	movs	r2, #0
   1aa56:	9200      	str	r2, [sp, #0]
   1aa58:	aa0c      	add	r2, sp, #48	; 0x30
   1aa5a:	a90a      	add	r1, sp, #40	; 0x28
   1aa5c:	a808      	add	r0, sp, #32
   1aa5e:	4d52      	ldr	r5, [pc, #328]	; (1aba8 <lv_label_design+0x278>)
   1aa60:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   1aa62:	f898 3010 	ldrb.w	r3, [r8, #16]
   1aa66:	f003 0307 	and.w	r3, r3, #7
   1aa6a:	2b04      	cmp	r3, #4
   1aa6c:	d02b      	beq.n	1aac6 <lv_label_design+0x196>
    return LV_DESIGN_RES_OK;
   1aa6e:	2000      	movs	r0, #0
   1aa70:	e7b0      	b.n	1a9d4 <lv_label_design+0xa4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1aa72:	f044 0404 	orr.w	r4, r4, #4
   1aa76:	e7c7      	b.n	1aa08 <lv_label_design+0xd8>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   1aa78:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   1aa7c:	2a10      	cmp	r2, #16
   1aa7e:	d001      	beq.n	1aa84 <lv_label_design+0x154>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   1aa80:	2a20      	cmp	r2, #32
   1aa82:	d1e5      	bne.n	1aa50 <lv_label_design+0x120>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   1aa84:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   1aa88:	f8d8 1000 	ldr.w	r1, [r8]
   1aa8c:	9402      	str	r4, [sp, #8]
   1aa8e:	f647 4218 	movw	r2, #31768	; 0x7c18
   1aa92:	9201      	str	r2, [sp, #4]
   1aa94:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
   1aa98:	9200      	str	r2, [sp, #0]
   1aa9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1aa9c:	a805      	add	r0, sp, #20
   1aa9e:	4d43      	ldr	r5, [pc, #268]	; (1abac <lv_label_design+0x27c>)
   1aaa0:	47a8      	blx	r5
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1aaa2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1aaa6:	3301      	adds	r3, #1
   1aaa8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1aaac:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
   1aaae:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   1aab2:	b21b      	sxth	r3, r3
   1aab4:	429a      	cmp	r2, r3
   1aab6:	ddcb      	ble.n	1aa50 <lv_label_design+0x120>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
   1aab8:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   1aabc:	f023 030c 	bic.w	r3, r3, #12
   1aac0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
   1aac4:	e7c4      	b.n	1aa50 <lv_label_design+0x120>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   1aac6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   1aaca:	f8d8 1000 	ldr.w	r1, [r8]
   1aace:	9402      	str	r4, [sp, #8]
   1aad0:	f647 4218 	movw	r2, #31768	; 0x7c18
   1aad4:	9201      	str	r2, [sp, #4]
   1aad6:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
   1aada:	9200      	str	r2, [sp, #0]
   1aadc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1aade:	a805      	add	r0, sp, #20
   1aae0:	4c32      	ldr	r4, [pc, #200]	; (1abac <lv_label_design+0x27c>)
   1aae2:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
   1aae4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   1aae8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1aaec:	3301      	adds	r3, #1
   1aaee:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1aaf2:	1a5b      	subs	r3, r3, r1
   1aaf4:	b21b      	sxth	r3, r3
   1aaf6:	429a      	cmp	r2, r3
   1aaf8:	dc20      	bgt.n	1ab3c <lv_label_design+0x20c>
            if(size.y > lv_area_get_height(&txt_coords)) {
   1aafa:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1aafe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ab02:	3301      	adds	r3, #1
   1ab04:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   1ab08:	1a5b      	subs	r3, r3, r1
   1ab0a:	b21b      	sxth	r3, r3
   1ab0c:	429a      	cmp	r2, r3
   1ab0e:	ddae      	ble.n	1aa6e <lv_label_design+0x13e>
                label_draw_dsc.ofs_x = ext->offset.x;
   1ab10:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
   1ab14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1ab18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   1ab1a:	891b      	ldrh	r3, [r3, #8]
   1ab1c:	4413      	add	r3, r2
   1ab1e:	f8b8 200e 	ldrh.w	r2, [r8, #14]
   1ab22:	4413      	add	r3, r2
   1ab24:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   1ab28:	f8d8 3000 	ldr.w	r3, [r8]
   1ab2c:	2200      	movs	r2, #0
   1ab2e:	9200      	str	r2, [sp, #0]
   1ab30:	aa0c      	add	r2, sp, #48	; 0x30
   1ab32:	a90a      	add	r1, sp, #40	; 0x28
   1ab34:	a808      	add	r0, sp, #32
   1ab36:	4c1c      	ldr	r4, [pc, #112]	; (1aba8 <lv_label_design+0x278>)
   1ab38:	47a0      	blx	r4
   1ab3a:	e798      	b.n	1aa6e <lv_label_design+0x13e>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   1ab3c:	f8b8 400c 	ldrh.w	r4, [r8, #12]
   1ab40:	4422      	add	r2, r4
   1ab42:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   1ab44:	2220      	movs	r2, #32
   1ab46:	4611      	mov	r1, r2
   1ab48:	980d      	ldr	r0, [sp, #52]	; 0x34
   1ab4a:	4b19      	ldr	r3, [pc, #100]	; (1abb0 <lv_label_design+0x280>)
   1ab4c:	4798      	blx	r3
   1ab4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   1ab52:	4404      	add	r4, r0
   1ab54:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
                label_draw_dsc.ofs_y = ext->offset.y;
   1ab58:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
   1ab5c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   1ab60:	f8d8 3000 	ldr.w	r3, [r8]
   1ab64:	2200      	movs	r2, #0
   1ab66:	9200      	str	r2, [sp, #0]
   1ab68:	aa0c      	add	r2, sp, #48	; 0x30
   1ab6a:	a90a      	add	r1, sp, #40	; 0x28
   1ab6c:	a808      	add	r0, sp, #32
   1ab6e:	47a8      	blx	r5
   1ab70:	e7c3      	b.n	1aafa <lv_label_design+0x1ca>
        return LV_DESIGN_RES_NOT_COVER;
   1ab72:	2002      	movs	r0, #2
   1ab74:	4770      	bx	lr
   1ab76:	bf00      	nop
   1ab78:	00005425 	.word	0x00005425
   1ab7c:	00004b5d 	.word	0x00004b5d
   1ab80:	0000c811 	.word	0x0000c811
   1ab84:	0000570d 	.word	0x0000570d
   1ab88:	0000c8d9 	.word	0x0000c8d9
   1ab8c:	000197b9 	.word	0x000197b9
   1ab90:	00011ac1 	.word	0x00011ac1
   1ab94:	000199b1 	.word	0x000199b1
   1ab98:	00009f75 	.word	0x00009f75
   1ab9c:	0001a8a1 	.word	0x0001a8a1
   1aba0:	0001a8e9 	.word	0x0001a8e9
   1aba4:	00005cf9 	.word	0x00005cf9
   1aba8:	00009fcd 	.word	0x00009fcd
   1abac:	00014625 	.word	0x00014625
   1abb0:	00010609 	.word	0x00010609

0001abb4 <__aeabi_uldivmod>:
   1abb4:	b953      	cbnz	r3, 1abcc <__aeabi_uldivmod+0x18>
   1abb6:	b94a      	cbnz	r2, 1abcc <__aeabi_uldivmod+0x18>
   1abb8:	2900      	cmp	r1, #0
   1abba:	bf08      	it	eq
   1abbc:	2800      	cmpeq	r0, #0
   1abbe:	bf1c      	itt	ne
   1abc0:	f04f 31ff 	movne.w	r1, #4294967295
   1abc4:	f04f 30ff 	movne.w	r0, #4294967295
   1abc8:	f000 b97a 	b.w	1aec0 <__aeabi_idiv0>
   1abcc:	f1ad 0c08 	sub.w	ip, sp, #8
   1abd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1abd4:	f000 f806 	bl	1abe4 <__udivmoddi4>
   1abd8:	f8dd e004 	ldr.w	lr, [sp, #4]
   1abdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1abe0:	b004      	add	sp, #16
   1abe2:	4770      	bx	lr

0001abe4 <__udivmoddi4>:
   1abe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1abe8:	468c      	mov	ip, r1
   1abea:	460d      	mov	r5, r1
   1abec:	4604      	mov	r4, r0
   1abee:	9e08      	ldr	r6, [sp, #32]
   1abf0:	2b00      	cmp	r3, #0
   1abf2:	d151      	bne.n	1ac98 <__udivmoddi4+0xb4>
   1abf4:	428a      	cmp	r2, r1
   1abf6:	4617      	mov	r7, r2
   1abf8:	d96d      	bls.n	1acd6 <__udivmoddi4+0xf2>
   1abfa:	fab2 fe82 	clz	lr, r2
   1abfe:	f1be 0f00 	cmp.w	lr, #0
   1ac02:	d00b      	beq.n	1ac1c <__udivmoddi4+0x38>
   1ac04:	f1ce 0c20 	rsb	ip, lr, #32
   1ac08:	fa01 f50e 	lsl.w	r5, r1, lr
   1ac0c:	fa20 fc0c 	lsr.w	ip, r0, ip
   1ac10:	fa02 f70e 	lsl.w	r7, r2, lr
   1ac14:	ea4c 0c05 	orr.w	ip, ip, r5
   1ac18:	fa00 f40e 	lsl.w	r4, r0, lr
   1ac1c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1ac20:	0c25      	lsrs	r5, r4, #16
   1ac22:	fbbc f8fa 	udiv	r8, ip, sl
   1ac26:	fa1f f987 	uxth.w	r9, r7
   1ac2a:	fb0a cc18 	mls	ip, sl, r8, ip
   1ac2e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   1ac32:	fb08 f309 	mul.w	r3, r8, r9
   1ac36:	42ab      	cmp	r3, r5
   1ac38:	d90a      	bls.n	1ac50 <__udivmoddi4+0x6c>
   1ac3a:	19ed      	adds	r5, r5, r7
   1ac3c:	f108 32ff 	add.w	r2, r8, #4294967295
   1ac40:	f080 8123 	bcs.w	1ae8a <__udivmoddi4+0x2a6>
   1ac44:	42ab      	cmp	r3, r5
   1ac46:	f240 8120 	bls.w	1ae8a <__udivmoddi4+0x2a6>
   1ac4a:	f1a8 0802 	sub.w	r8, r8, #2
   1ac4e:	443d      	add	r5, r7
   1ac50:	1aed      	subs	r5, r5, r3
   1ac52:	b2a4      	uxth	r4, r4
   1ac54:	fbb5 f0fa 	udiv	r0, r5, sl
   1ac58:	fb0a 5510 	mls	r5, sl, r0, r5
   1ac5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1ac60:	fb00 f909 	mul.w	r9, r0, r9
   1ac64:	45a1      	cmp	r9, r4
   1ac66:	d909      	bls.n	1ac7c <__udivmoddi4+0x98>
   1ac68:	19e4      	adds	r4, r4, r7
   1ac6a:	f100 33ff 	add.w	r3, r0, #4294967295
   1ac6e:	f080 810a 	bcs.w	1ae86 <__udivmoddi4+0x2a2>
   1ac72:	45a1      	cmp	r9, r4
   1ac74:	f240 8107 	bls.w	1ae86 <__udivmoddi4+0x2a2>
   1ac78:	3802      	subs	r0, #2
   1ac7a:	443c      	add	r4, r7
   1ac7c:	eba4 0409 	sub.w	r4, r4, r9
   1ac80:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1ac84:	2100      	movs	r1, #0
   1ac86:	2e00      	cmp	r6, #0
   1ac88:	d061      	beq.n	1ad4e <__udivmoddi4+0x16a>
   1ac8a:	fa24 f40e 	lsr.w	r4, r4, lr
   1ac8e:	2300      	movs	r3, #0
   1ac90:	6034      	str	r4, [r6, #0]
   1ac92:	6073      	str	r3, [r6, #4]
   1ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ac98:	428b      	cmp	r3, r1
   1ac9a:	d907      	bls.n	1acac <__udivmoddi4+0xc8>
   1ac9c:	2e00      	cmp	r6, #0
   1ac9e:	d054      	beq.n	1ad4a <__udivmoddi4+0x166>
   1aca0:	2100      	movs	r1, #0
   1aca2:	e886 0021 	stmia.w	r6, {r0, r5}
   1aca6:	4608      	mov	r0, r1
   1aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1acac:	fab3 f183 	clz	r1, r3
   1acb0:	2900      	cmp	r1, #0
   1acb2:	f040 808e 	bne.w	1add2 <__udivmoddi4+0x1ee>
   1acb6:	42ab      	cmp	r3, r5
   1acb8:	d302      	bcc.n	1acc0 <__udivmoddi4+0xdc>
   1acba:	4282      	cmp	r2, r0
   1acbc:	f200 80fa 	bhi.w	1aeb4 <__udivmoddi4+0x2d0>
   1acc0:	1a84      	subs	r4, r0, r2
   1acc2:	eb65 0503 	sbc.w	r5, r5, r3
   1acc6:	2001      	movs	r0, #1
   1acc8:	46ac      	mov	ip, r5
   1acca:	2e00      	cmp	r6, #0
   1accc:	d03f      	beq.n	1ad4e <__udivmoddi4+0x16a>
   1acce:	e886 1010 	stmia.w	r6, {r4, ip}
   1acd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1acd6:	b912      	cbnz	r2, 1acde <__udivmoddi4+0xfa>
   1acd8:	2701      	movs	r7, #1
   1acda:	fbb7 f7f2 	udiv	r7, r7, r2
   1acde:	fab7 fe87 	clz	lr, r7
   1ace2:	f1be 0f00 	cmp.w	lr, #0
   1ace6:	d134      	bne.n	1ad52 <__udivmoddi4+0x16e>
   1ace8:	1beb      	subs	r3, r5, r7
   1acea:	0c3a      	lsrs	r2, r7, #16
   1acec:	fa1f fc87 	uxth.w	ip, r7
   1acf0:	2101      	movs	r1, #1
   1acf2:	fbb3 f8f2 	udiv	r8, r3, r2
   1acf6:	0c25      	lsrs	r5, r4, #16
   1acf8:	fb02 3318 	mls	r3, r2, r8, r3
   1acfc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1ad00:	fb0c f308 	mul.w	r3, ip, r8
   1ad04:	42ab      	cmp	r3, r5
   1ad06:	d907      	bls.n	1ad18 <__udivmoddi4+0x134>
   1ad08:	19ed      	adds	r5, r5, r7
   1ad0a:	f108 30ff 	add.w	r0, r8, #4294967295
   1ad0e:	d202      	bcs.n	1ad16 <__udivmoddi4+0x132>
   1ad10:	42ab      	cmp	r3, r5
   1ad12:	f200 80d1 	bhi.w	1aeb8 <__udivmoddi4+0x2d4>
   1ad16:	4680      	mov	r8, r0
   1ad18:	1aed      	subs	r5, r5, r3
   1ad1a:	b2a3      	uxth	r3, r4
   1ad1c:	fbb5 f0f2 	udiv	r0, r5, r2
   1ad20:	fb02 5510 	mls	r5, r2, r0, r5
   1ad24:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   1ad28:	fb0c fc00 	mul.w	ip, ip, r0
   1ad2c:	45a4      	cmp	ip, r4
   1ad2e:	d907      	bls.n	1ad40 <__udivmoddi4+0x15c>
   1ad30:	19e4      	adds	r4, r4, r7
   1ad32:	f100 33ff 	add.w	r3, r0, #4294967295
   1ad36:	d202      	bcs.n	1ad3e <__udivmoddi4+0x15a>
   1ad38:	45a4      	cmp	ip, r4
   1ad3a:	f200 80b8 	bhi.w	1aeae <__udivmoddi4+0x2ca>
   1ad3e:	4618      	mov	r0, r3
   1ad40:	eba4 040c 	sub.w	r4, r4, ip
   1ad44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   1ad48:	e79d      	b.n	1ac86 <__udivmoddi4+0xa2>
   1ad4a:	4631      	mov	r1, r6
   1ad4c:	4630      	mov	r0, r6
   1ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ad52:	f1ce 0420 	rsb	r4, lr, #32
   1ad56:	fa05 f30e 	lsl.w	r3, r5, lr
   1ad5a:	fa07 f70e 	lsl.w	r7, r7, lr
   1ad5e:	fa20 f804 	lsr.w	r8, r0, r4
   1ad62:	0c3a      	lsrs	r2, r7, #16
   1ad64:	fa25 f404 	lsr.w	r4, r5, r4
   1ad68:	ea48 0803 	orr.w	r8, r8, r3
   1ad6c:	fbb4 f1f2 	udiv	r1, r4, r2
   1ad70:	ea4f 4518 	mov.w	r5, r8, lsr #16
   1ad74:	fb02 4411 	mls	r4, r2, r1, r4
   1ad78:	fa1f fc87 	uxth.w	ip, r7
   1ad7c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
   1ad80:	fb01 f30c 	mul.w	r3, r1, ip
   1ad84:	42ab      	cmp	r3, r5
   1ad86:	fa00 f40e 	lsl.w	r4, r0, lr
   1ad8a:	d909      	bls.n	1ada0 <__udivmoddi4+0x1bc>
   1ad8c:	19ed      	adds	r5, r5, r7
   1ad8e:	f101 30ff 	add.w	r0, r1, #4294967295
   1ad92:	f080 808a 	bcs.w	1aeaa <__udivmoddi4+0x2c6>
   1ad96:	42ab      	cmp	r3, r5
   1ad98:	f240 8087 	bls.w	1aeaa <__udivmoddi4+0x2c6>
   1ad9c:	3902      	subs	r1, #2
   1ad9e:	443d      	add	r5, r7
   1ada0:	1aeb      	subs	r3, r5, r3
   1ada2:	fa1f f588 	uxth.w	r5, r8
   1ada6:	fbb3 f0f2 	udiv	r0, r3, r2
   1adaa:	fb02 3310 	mls	r3, r2, r0, r3
   1adae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1adb2:	fb00 f30c 	mul.w	r3, r0, ip
   1adb6:	42ab      	cmp	r3, r5
   1adb8:	d907      	bls.n	1adca <__udivmoddi4+0x1e6>
   1adba:	19ed      	adds	r5, r5, r7
   1adbc:	f100 38ff 	add.w	r8, r0, #4294967295
   1adc0:	d26f      	bcs.n	1aea2 <__udivmoddi4+0x2be>
   1adc2:	42ab      	cmp	r3, r5
   1adc4:	d96d      	bls.n	1aea2 <__udivmoddi4+0x2be>
   1adc6:	3802      	subs	r0, #2
   1adc8:	443d      	add	r5, r7
   1adca:	1aeb      	subs	r3, r5, r3
   1adcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1add0:	e78f      	b.n	1acf2 <__udivmoddi4+0x10e>
   1add2:	f1c1 0720 	rsb	r7, r1, #32
   1add6:	fa22 f807 	lsr.w	r8, r2, r7
   1adda:	408b      	lsls	r3, r1
   1addc:	fa05 f401 	lsl.w	r4, r5, r1
   1ade0:	ea48 0303 	orr.w	r3, r8, r3
   1ade4:	fa20 fe07 	lsr.w	lr, r0, r7
   1ade8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1adec:	40fd      	lsrs	r5, r7
   1adee:	ea4e 0e04 	orr.w	lr, lr, r4
   1adf2:	fbb5 f9fc 	udiv	r9, r5, ip
   1adf6:	ea4f 441e 	mov.w	r4, lr, lsr #16
   1adfa:	fb0c 5519 	mls	r5, ip, r9, r5
   1adfe:	fa1f f883 	uxth.w	r8, r3
   1ae02:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1ae06:	fb09 f408 	mul.w	r4, r9, r8
   1ae0a:	42ac      	cmp	r4, r5
   1ae0c:	fa02 f201 	lsl.w	r2, r2, r1
   1ae10:	fa00 fa01 	lsl.w	sl, r0, r1
   1ae14:	d908      	bls.n	1ae28 <__udivmoddi4+0x244>
   1ae16:	18ed      	adds	r5, r5, r3
   1ae18:	f109 30ff 	add.w	r0, r9, #4294967295
   1ae1c:	d243      	bcs.n	1aea6 <__udivmoddi4+0x2c2>
   1ae1e:	42ac      	cmp	r4, r5
   1ae20:	d941      	bls.n	1aea6 <__udivmoddi4+0x2c2>
   1ae22:	f1a9 0902 	sub.w	r9, r9, #2
   1ae26:	441d      	add	r5, r3
   1ae28:	1b2d      	subs	r5, r5, r4
   1ae2a:	fa1f fe8e 	uxth.w	lr, lr
   1ae2e:	fbb5 f0fc 	udiv	r0, r5, ip
   1ae32:	fb0c 5510 	mls	r5, ip, r0, r5
   1ae36:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
   1ae3a:	fb00 f808 	mul.w	r8, r0, r8
   1ae3e:	45a0      	cmp	r8, r4
   1ae40:	d907      	bls.n	1ae52 <__udivmoddi4+0x26e>
   1ae42:	18e4      	adds	r4, r4, r3
   1ae44:	f100 35ff 	add.w	r5, r0, #4294967295
   1ae48:	d229      	bcs.n	1ae9e <__udivmoddi4+0x2ba>
   1ae4a:	45a0      	cmp	r8, r4
   1ae4c:	d927      	bls.n	1ae9e <__udivmoddi4+0x2ba>
   1ae4e:	3802      	subs	r0, #2
   1ae50:	441c      	add	r4, r3
   1ae52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1ae56:	eba4 0408 	sub.w	r4, r4, r8
   1ae5a:	fba0 8902 	umull	r8, r9, r0, r2
   1ae5e:	454c      	cmp	r4, r9
   1ae60:	46c6      	mov	lr, r8
   1ae62:	464d      	mov	r5, r9
   1ae64:	d315      	bcc.n	1ae92 <__udivmoddi4+0x2ae>
   1ae66:	d012      	beq.n	1ae8e <__udivmoddi4+0x2aa>
   1ae68:	b156      	cbz	r6, 1ae80 <__udivmoddi4+0x29c>
   1ae6a:	ebba 030e 	subs.w	r3, sl, lr
   1ae6e:	eb64 0405 	sbc.w	r4, r4, r5
   1ae72:	fa04 f707 	lsl.w	r7, r4, r7
   1ae76:	40cb      	lsrs	r3, r1
   1ae78:	431f      	orrs	r7, r3
   1ae7a:	40cc      	lsrs	r4, r1
   1ae7c:	6037      	str	r7, [r6, #0]
   1ae7e:	6074      	str	r4, [r6, #4]
   1ae80:	2100      	movs	r1, #0
   1ae82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ae86:	4618      	mov	r0, r3
   1ae88:	e6f8      	b.n	1ac7c <__udivmoddi4+0x98>
   1ae8a:	4690      	mov	r8, r2
   1ae8c:	e6e0      	b.n	1ac50 <__udivmoddi4+0x6c>
   1ae8e:	45c2      	cmp	sl, r8
   1ae90:	d2ea      	bcs.n	1ae68 <__udivmoddi4+0x284>
   1ae92:	ebb8 0e02 	subs.w	lr, r8, r2
   1ae96:	eb69 0503 	sbc.w	r5, r9, r3
   1ae9a:	3801      	subs	r0, #1
   1ae9c:	e7e4      	b.n	1ae68 <__udivmoddi4+0x284>
   1ae9e:	4628      	mov	r0, r5
   1aea0:	e7d7      	b.n	1ae52 <__udivmoddi4+0x26e>
   1aea2:	4640      	mov	r0, r8
   1aea4:	e791      	b.n	1adca <__udivmoddi4+0x1e6>
   1aea6:	4681      	mov	r9, r0
   1aea8:	e7be      	b.n	1ae28 <__udivmoddi4+0x244>
   1aeaa:	4601      	mov	r1, r0
   1aeac:	e778      	b.n	1ada0 <__udivmoddi4+0x1bc>
   1aeae:	3802      	subs	r0, #2
   1aeb0:	443c      	add	r4, r7
   1aeb2:	e745      	b.n	1ad40 <__udivmoddi4+0x15c>
   1aeb4:	4608      	mov	r0, r1
   1aeb6:	e708      	b.n	1acca <__udivmoddi4+0xe6>
   1aeb8:	f1a8 0802 	sub.w	r8, r8, #2
   1aebc:	443d      	add	r5, r7
   1aebe:	e72b      	b.n	1ad18 <__udivmoddi4+0x134>

0001aec0 <__aeabi_idiv0>:
   1aec0:	4770      	bx	lr
   1aec2:	bf00      	nop

0001aec4 <__libc_init_array>:
   1aec4:	b570      	push	{r4, r5, r6, lr}
   1aec6:	4e0d      	ldr	r6, [pc, #52]	; (1aefc <__libc_init_array+0x38>)
   1aec8:	4c0d      	ldr	r4, [pc, #52]	; (1af00 <__libc_init_array+0x3c>)
   1aeca:	1ba4      	subs	r4, r4, r6
   1aecc:	10a4      	asrs	r4, r4, #2
   1aece:	2500      	movs	r5, #0
   1aed0:	42a5      	cmp	r5, r4
   1aed2:	d109      	bne.n	1aee8 <__libc_init_array+0x24>
   1aed4:	4e0b      	ldr	r6, [pc, #44]	; (1af04 <__libc_init_array+0x40>)
   1aed6:	4c0c      	ldr	r4, [pc, #48]	; (1af08 <__libc_init_array+0x44>)
   1aed8:	f005 ff1c 	bl	20d14 <_init>
   1aedc:	1ba4      	subs	r4, r4, r6
   1aede:	10a4      	asrs	r4, r4, #2
   1aee0:	2500      	movs	r5, #0
   1aee2:	42a5      	cmp	r5, r4
   1aee4:	d105      	bne.n	1aef2 <__libc_init_array+0x2e>
   1aee6:	bd70      	pop	{r4, r5, r6, pc}
   1aee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1aeec:	4798      	blx	r3
   1aeee:	3501      	adds	r5, #1
   1aef0:	e7ee      	b.n	1aed0 <__libc_init_array+0xc>
   1aef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1aef6:	4798      	blx	r3
   1aef8:	3501      	adds	r5, #1
   1aefa:	e7f2      	b.n	1aee2 <__libc_init_array+0x1e>
   1aefc:	00020d20 	.word	0x00020d20
   1af00:	00020d20 	.word	0x00020d20
   1af04:	00020d20 	.word	0x00020d20
   1af08:	00020d24 	.word	0x00020d24

0001af0c <memcmp>:
   1af0c:	b510      	push	{r4, lr}
   1af0e:	3901      	subs	r1, #1
   1af10:	4402      	add	r2, r0
   1af12:	4290      	cmp	r0, r2
   1af14:	d101      	bne.n	1af1a <memcmp+0xe>
   1af16:	2000      	movs	r0, #0
   1af18:	bd10      	pop	{r4, pc}
   1af1a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1af1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1af22:	42a3      	cmp	r3, r4
   1af24:	d0f5      	beq.n	1af12 <memcmp+0x6>
   1af26:	1b18      	subs	r0, r3, r4
   1af28:	bd10      	pop	{r4, pc}

0001af2a <strcmp>:
   1af2a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1af2e:	f811 3b01 	ldrb.w	r3, [r1], #1
   1af32:	2a01      	cmp	r2, #1
   1af34:	bf28      	it	cs
   1af36:	429a      	cmpcs	r2, r3
   1af38:	d0f7      	beq.n	1af2a <strcmp>
   1af3a:	1ad0      	subs	r0, r2, r3
   1af3c:	4770      	bx	lr

0001af3e <strcpy>:
   1af3e:	4603      	mov	r3, r0
   1af40:	f811 2b01 	ldrb.w	r2, [r1], #1
   1af44:	f803 2b01 	strb.w	r2, [r3], #1
   1af48:	2a00      	cmp	r2, #0
   1af4a:	d1f9      	bne.n	1af40 <strcpy+0x2>
   1af4c:	4770      	bx	lr

0001af4e <strlen>:
   1af4e:	4603      	mov	r3, r0
   1af50:	f813 2b01 	ldrb.w	r2, [r3], #1
   1af54:	2a00      	cmp	r2, #0
   1af56:	d1fb      	bne.n	1af50 <strlen+0x2>
   1af58:	1a18      	subs	r0, r3, r0
   1af5a:	3801      	subs	r0, #1
   1af5c:	4770      	bx	lr
   1af5e:	0000      	movs	r0, r0
   1af60:	682f2e2e 	.word	0x682f2e2e
   1af64:	702f6c70 	.word	0x702f6c70
   1af68:	2f74726f 	.word	0x2f74726f
   1af6c:	5f6c7068 	.word	0x5f6c7068
   1af70:	6f697067 	.word	0x6f697067
   1af74:	7361625f 	.word	0x7361625f
   1af78:	00682e65 	.word	0x00682e65
   1af7c:	682f2e2e 	.word	0x682f2e2e
   1af80:	732f6c61 	.word	0x732f6c61
   1af84:	682f6372 	.word	0x682f6372
   1af88:	695f6c61 	.word	0x695f6c61
   1af8c:	6d5f6332 	.word	0x6d5f6332
   1af90:	6e79735f 	.word	0x6e79735f
   1af94:	00632e63 	.word	0x00632e63
   1af98:	682f2e2e 	.word	0x682f2e2e
   1af9c:	732f6c61 	.word	0x732f6c61
   1afa0:	682f6372 	.word	0x682f6372
   1afa4:	695f6c61 	.word	0x695f6c61
   1afa8:	00632e6f 	.word	0x00632e6f
   1afac:	682f2e2e 	.word	0x682f2e2e
   1afb0:	732f6c61 	.word	0x732f6c61
   1afb4:	682f6372 	.word	0x682f6372
   1afb8:	745f6c61 	.word	0x745f6c61
   1afbc:	72656d69 	.word	0x72656d69
   1afc0:	0000632e 	.word	0x0000632e
   1afc4:	682f2e2e 	.word	0x682f2e2e
   1afc8:	732f6c61 	.word	0x732f6c61
   1afcc:	682f6372 	.word	0x682f6372
   1afd0:	755f6c61 	.word	0x755f6c61
   1afd4:	74726173 	.word	0x74726173
   1afd8:	7973615f 	.word	0x7973615f
   1afdc:	632e636e 	.word	0x632e636e
   1afe0:	00000000 	.word	0x00000000
   1afe4:	682f2e2e 	.word	0x682f2e2e
   1afe8:	752f6c61 	.word	0x752f6c61
   1afec:	736c6974 	.word	0x736c6974
   1aff0:	6372732f 	.word	0x6372732f
   1aff4:	6974752f 	.word	0x6974752f
   1aff8:	6c5f736c 	.word	0x6c5f736c
   1affc:	2e747369 	.word	0x2e747369
   1b000:	00000063 	.word	0x00000063
   1b004:	682f2e2e 	.word	0x682f2e2e
   1b008:	752f6c61 	.word	0x752f6c61
   1b00c:	736c6974 	.word	0x736c6974
   1b010:	6372732f 	.word	0x6372732f
   1b014:	6974752f 	.word	0x6974752f
   1b018:	725f736c 	.word	0x725f736c
   1b01c:	62676e69 	.word	0x62676e69
   1b020:	65666675 	.word	0x65666675
   1b024:	00632e72 	.word	0x00632e72
   1b028:	40003000 	.word	0x40003000
   1b02c:	40003400 	.word	0x40003400
   1b030:	41012000 	.word	0x41012000
   1b034:	41014000 	.word	0x41014000
   1b038:	43000000 	.word	0x43000000
   1b03c:	43000400 	.word	0x43000400
   1b040:	43000800 	.word	0x43000800
   1b044:	43000c00 	.word	0x43000c00

0001b048 <_i2cms>:
   1b048:	00000003 00200014 00000100 000000ff     ...... .........
   1b058:	00d70000 07270400 682f2e2e 732f6c70     ......'.../hpl/s
   1b068:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
   1b078:	0000632e 40003800 40003c00 4101a000     .c...8.@.<.@...A
   1b088:	4101c000 42001400 42001800 43001400     ...A...B...B...C
   1b098:	43001800                                ...C

0001b09c <_tcs>:
   1b09c:	006b0000 00000308 00000000 00003a97     ..k..........:..
   1b0ac:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
   1b0bc:	63745f6c 0000632e 6c6c6548 6f57206f     l_tc.c..Hello Wo
   1b0cc:	00646c72                                rld.

0001b0d0 <__func__.9536>:
   1b0d0:	645f766c 67756265 6568635f 735f6b63     lv_debug_check_s
   1b0e0:	00007274                                tr..

0001b0e4 <hex.9544>:
   1b0e4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1b0f4:	00000000                                ....

0001b0f8 <__func__.9554>:
   1b0f8:	645f766c 67756265 676f6c5f 7272655f     lv_debug_log_err
   1b108:	0000726f 742f2e2e 64726968 74726170     or..../thirdpart
   1b118:	766c2f79 732f6c67 6c2f6372 6f635f76     y/lvgl/src/lv_co
   1b128:	6c2f6572 65645f76 2e677562 00000063     re/lv_debug.c...
   1b138:	645f766c 67756265 6568635f 735f6b63     lv_debug_check_s
   1b148:	203a7274 6f6e2061 53412d6e 20494943     tr: a non-ASCII 
   1b158:	72616863 73616820 70657220 65746165     char has repeate
   1b168:	6f6d2064 74206572 206e6168 445f564c     d more than LV_D
   1b178:	47554245 5254535f 58414d5f 5045525f     EBUG_STR_MAX_REP
   1b188:	20544145 656d6974 00002973 645f766c     EAT times)..lv_d
   1b198:	67756265 6568635f 735f6b63 203a7274     ebug_check_str: 
   1b1a8:	61766e69 2064696c 72616863 206e6920     invalid char in 
   1b1b8:	20656874 69727473 2820676e 3031203c     the string (< 10
   1b1c8:	6c617620 00296575 645f766c 67756265      value).lv_debug
   1b1d8:	6568635f 735f6b63 203a7274 69727473     _check_str: stri
   1b1e8:	6920676e 6f6c2073 7265676e 61687420     ng is longer tha
   1b1f8:	564c206e 4245445f 535f4755 4d5f5254     n LV_DEBUG_STR_M
   1b208:	4c5f5841 54474e45 00000048              AX_LENGTH...

0001b214 <__func__.9507>:
   1b214:	645f766c 5f707369 5f746567 5f726373     lv_disp_get_scr_
   1b224:	00746361                                act.

0001b228 <__func__.9515>:
   1b228:	645f766c 5f707369 5f746567 6579616c     lv_disp_get_laye
   1b238:	6f745f72 00000070                       r_top...

0001b240 <__func__.9519>:
   1b240:	645f766c 5f707369 5f746567 6579616c     lv_disp_get_laye
   1b250:	79735f72 00000073                       r_sys...

0001b258 <__func__.9524>:
   1b258:	645f766c 5f707369 69737361 735f6e67     lv_disp_assign_s
   1b268:	65657263 0000006e                       creen...

0001b270 <__func__.9529>:
   1b270:	645f766c 5f707369 5f746567 63616e69     lv_disp_get_inac
   1b280:	65766974 6d69745f 00000065              tive_time...

0001b28c <__func__.9539>:
   1b28c:	645f766c 5f707369 67697274 7463615f     lv_disp_trig_act
   1b29c:	74697669 00000079                       ivity...

0001b2a4 <__func__.9543>:
   1b2a4:	5f766c5f 70736964 7465675f 6665725f     _lv_disp_get_ref
   1b2b4:	61745f72 00006b73 742f2e2e 64726968     r_task..../third
   1b2c4:	74726170 766c2f79 732f6c67 6c2f6372     party/lvgl/src/l
   1b2d4:	6f635f76 6c2f6572 69645f76 632e7073     v_core/lv_disp.c
   1b2e4:	00000000 735f766c 615f7263 203a7463     ....lv_scr_act: 
   1b2f4:	64206f6e 6c707369 72207961 73696765     no display regis
   1b304:	65726574 6f742064 74656720 73746920     tered to get its
   1b314:	74636120 6373202e 6e656572 00000000      act. screen....
   1b324:	6c5f766c 72657961 706f745f 6f6e203a     lv_layer_top: no
   1b334:	73696420 79616c70 67657220 65747369      display registe
   1b344:	20646572 67206f74 69207465 74207374     red to get its t
   1b354:	6c20706f 72657961 00000000 6c5f766c     op layer....lv_l
   1b364:	72657961 7379735f 6f6e203a 73696420     ayer_sys: no dis
   1b374:	79616c70 67657220 65747369 20646572     play registered 
   1b384:	67206f74 69207465 73207374 202e7379     to get its sys. 
   1b394:	6579616c 00000072 645f766c 5f707369     layer...lv_disp_
   1b3a4:	69737361 735f6e67 65657263 74203a6e     assign_screen: t
   1b3b4:	74207972 7361206f 6e676973 6e206120     ry to assign a n
   1b3c4:	732d6e6f 65657263 626f206e 7463656a     on-screen object
   1b3d4:	00000000 645f766c 5f707369 5f746567     ....lv_disp_get_
   1b3e4:	63616e69 65766974 6d69745f 6e203a65     inactive_time: n
   1b3f4:	6964206f 616c7073 65722079 74736967     o display regist
   1b404:	64657265 00000000 645f766c 5f707369     ered....lv_disp_
   1b414:	67697274 7463615f 74697669 6e203a79     trig_activity: n
   1b424:	6964206f 616c7073 65722079 74736967     o display regist
   1b434:	64657265 00000000 645f766c 5f707369     ered....lv_disp_
   1b444:	5f746567 72666572 7361745f 6e203a6b     get_refr_task: n
   1b454:	6964206f 616c7073 65722079 74736967     o display regist
   1b464:	64657265 00000000                       ered....

0001b46c <__func__.9740>:
   1b46c:	675f766c 70756f72 6572635f 00657461     lv_group_create.

0001b47c <__func__.9754>:
   1b47c:	675f766c 70756f72 6464615f 6a626f5f     lv_group_add_obj
   1b48c:	00000000 742f2e2e 64726968 74726170     ....../thirdpart
   1b49c:	766c2f79 732f6c67 6c2f6372 6f635f76     y/lvgl/src/lv_co
   1b4ac:	6c2f6572 72675f76 2e70756f 00000063     re/lv_group.c...
   1b4bc:	2074754f 6d20666f 726f6d65 00000079     Out of memory...
   1b4cc:	675f766c 70756f72 6464615f 6a626f5f     lv_group_add_obj
   1b4dc:	6874203a 626f2065 7463656a 20736920     : the object is 
   1b4ec:	65726c61 20796461 65646461 6f742064     already added to
   1b4fc:	69687420 72672073 0070756f 675f766c      this group.lv_g
   1b50c:	70756f72 6464615f 6a626f5f 7361203a     roup_add_obj: as
   1b51c:	6e676973 6a626f20 20746365 61206f74     sign object to a
   1b52c:	746f206e 20726568 756f7267 00000070     n other group...

0001b53c <__func__.9914>:
   1b53c:	695f766c 0074696e                       lv_init.

0001b544 <__func__.9921>:
   1b544:	645f766c 696e6965 00000074              lv_deinit...

0001b550 <__func__.9946>:
   1b550:	6f5f766c 645f6a62 615f6c65 636e7973     lv_obj_del_async
   1b560:	00000000                                ....

0001b564 <__func__.10139>:
   1b564:	6f5f766c 735f6a62 615f7465 5f6f7475     lv_obj_set_auto_
   1b574:	6c616572 006e6769                       realign.

0001b57c <__func__.10148>:
   1b57c:	6f5f766c 735f6a62 655f7465 635f7478     lv_obj_set_ext_c
   1b58c:	6b63696c 6572615f 00000061              lick_area...

0001b598 <__func__.10276>:
   1b598:	6f5f766c 735f6a62 615f7465 685f7664     lv_obj_set_adv_h
   1b5a8:	65747469 00007473                       ittest..

0001b5b0 <__func__.10282>:
   1b5b0:	6f5f766c 735f6a62 635f7465 6b63696c     lv_obj_set_click
   1b5c0:	00000000                                ....

0001b5c4 <__func__.10288>:
   1b5c4:	6f5f766c 735f6a62 745f7465 0000706f     lv_obj_set_top..

0001b5d4 <__func__.10294>:
   1b5d4:	6f5f766c 735f6a62 645f7465 00676172     lv_obj_set_drag.

0001b5e4 <__func__.10300>:
   1b5e4:	6f5f766c 735f6a62 645f7465 5f676172     lv_obj_set_drag_
   1b5f4:	00726964                                dir.

0001b5f8 <__func__.10306>:
   1b5f8:	6f5f766c 735f6a62 645f7465 5f676172     lv_obj_set_drag_
   1b608:	6f726874 00000077                       throw...

0001b610 <__func__.10312>:
   1b610:	6f5f766c 735f6a62 645f7465 5f676172     lv_obj_set_drag_
   1b620:	65726170 0000746e                       parent..

0001b628 <__func__.10322>:
   1b628:	6f5f766c 735f6a62 705f7465 6e657261     lv_obj_set_paren
   1b638:	76655f74 00746e65                       t_event.

0001b640 <__func__.10333>:
   1b640:	6f5f766c 615f6a62 705f6464 65746f72     lv_obj_add_prote
   1b650:	00007463                                ct..

0001b654 <__func__.10339>:
   1b654:	6f5f766c 635f6a62 7261656c 6f72705f     lv_obj_clear_pro
   1b664:	74636574 00000000                       tect....

0001b66c <__func__.10390>:
   1b66c:	6f5f766c 735f6a62 655f7465 746e6576     lv_obj_set_event
   1b67c:	0062635f                                _cb.

0001b680 <__func__.10406>:
   1b680:	655f766c 746e6576 6e65735f 75665f64     lv_event_send_fu
   1b690:	0000636e                                nc..

0001b694 <__func__.10397>:
   1b694:	655f766c 746e6576 6e65735f 00000064     lv_event_send...

0001b6a4 <__func__.10419>:
   1b6a4:	6f5f766c 735f6a62 735f7465 616e6769     lv_obj_set_signa
   1b6b4:	62635f6c 00000000                       l_cb....

0001b6bc <__func__.10431>:
   1b6bc:	6f5f766c 735f6a62 645f7465 67697365     lv_obj_set_desig
   1b6cc:	62635f6e 00000000                       n_cb....

0001b6d4 <__func__.10437>:
   1b6d4:	6f5f766c 615f6a62 636f6c6c 5f657461     lv_obj_allocate_
   1b6e4:	5f747865 72747461 00000000              ext_attr....

0001b6f0 <__func__.10443>:
   1b6f0:	6f5f766c 725f6a62 65726665 655f6873     lv_obj_refresh_e
   1b700:	645f7478 5f776172 00646170              xt_draw_pad.

0001b70c <__func__.10471>:
   1b70c:	6f5f766c 675f6a62 705f7465 6e657261     lv_obj_get_paren
   1b71c:	00000074                                t...

0001b720 <__func__.10448>:
   1b720:	6f5f766c 675f6a62 735f7465 65657263     lv_obj_get_scree
   1b730:	0000006e                                n...

0001b734 <__func__.10457>:
   1b734:	6f5f766c 675f6a62 645f7465 00707369     lv_obj_get_disp.

0001b744 <__func__.10477>:
   1b744:	6f5f766c 675f6a62 635f7465 646c6968     lv_obj_get_child
   1b754:	00000000                                ....

0001b758 <__func__.10328>:
   1b758:	6f5f766c 735f6a62 625f7465 5f657361     lv_obj_set_base_
   1b768:	00726964                                dir.

0001b76c <__func__.10484>:
   1b76c:	6f5f766c 675f6a62 635f7465 646c6968     lv_obj_get_child
   1b77c:	6361625f 0000006b                       _back...

0001b784 <__func__.10490>:
   1b784:	6f5f766c 635f6a62 746e756f 6968635f     lv_obj_count_chi
   1b794:	6572646c 0000006e                       ldren...

0001b79c <__func__.10500>:
   1b79c:	6f5f766c 635f6a62 746e756f 6968635f     lv_obj_count_chi
   1b7ac:	6572646c 65725f6e 73727563 00657669     ldren_recursive.

0001b7bc <__func__.10511>:
   1b7bc:	6f5f766c 675f6a62 635f7465 64726f6f     lv_obj_get_coord
   1b7cc:	00000073                                s...

0001b7d0 <__func__.10524>:
   1b7d0:	6f5f766c 675f6a62 785f7465 00000000     lv_obj_get_x....

0001b7e0 <__func__.10531>:
   1b7e0:	6f5f766c 675f6a62 795f7465 00000000     lv_obj_get_y....

0001b7f0 <__func__.10538>:
   1b7f0:	6f5f766c 675f6a62 775f7465 68746469     lv_obj_get_width
   1b800:	00000000                                ....

0001b804 <__func__.10543>:
   1b804:	6f5f766c 675f6a62 685f7465 68676965     lv_obj_get_heigh
   1b814:	00000074                                t...

0001b818 <__func__.10588>:
   1b818:	6f5f766c 675f6a62 615f7465 5f6f7475     lv_obj_get_auto_
   1b828:	6c616572 006e6769                       realign.

0001b830 <__func__.10593>:
   1b830:	6f5f766c 675f6a62 655f7465 635f7478     lv_obj_get_ext_c
   1b840:	6b63696c 6461705f 66656c5f 00000074     lick_pad_left...

0001b850 <__func__.10598>:
   1b850:	6f5f766c 675f6a62 655f7465 635f7478     lv_obj_get_ext_c
   1b860:	6b63696c 6461705f 6769725f 00007468     lick_pad_right..

0001b870 <__func__.10603>:
   1b870:	6f5f766c 675f6a62 655f7465 635f7478     lv_obj_get_ext_c
   1b880:	6b63696c 6461705f 706f745f 00000000     lick_pad_top....

0001b890 <__func__.10608>:
   1b890:	6f5f766c 675f6a62 655f7465 635f7478     lv_obj_get_ext_c
   1b8a0:	6b63696c 6461705f 746f625f 006d6f74     lick_pad_bottom.

0001b8b0 <__func__.10613>:
   1b8b0:	6f5f766c 675f6a62 655f7465 645f7478     lv_obj_get_ext_d
   1b8c0:	5f776172 00646170                       raw_pad.

0001b8c8 <__func__.10162>:
   1b8c8:	6f5f766c 635f6a62 6e61656c 7974735f     lv_obj_clean_sty
   1b8d8:	6c5f656c 00747369                       le_list.

0001b8e0 <__func__.10700>:
   1b8e0:	6f5f766c 675f6a62 6c5f7465 6c61636f     lv_obj_get_local
   1b8f0:	7974735f 0000656c                       _style..

0001b8f8 <__func__.10200>:
   1b8f8:	6f5f766c 725f6a62 766f6d65 74735f65     lv_obj_remove_st
   1b908:	5f656c79 61636f6c 72705f6c 0000706f     yle_local_prop..

0001b918 <__func__.10706>:
   1b918:	6f5f766c 675f6a62 685f7465 65646469     lv_obj_get_hidde
   1b928:	0000006e                                n...

0001b92c <__func__.9962>:
   1b92c:	6f5f766c 695f6a62 6c61766e 74616469     lv_obj_invalidat
   1b93c:	72615f65 00006165                       e_area..

0001b944 <__func__.9977>:
   1b944:	6f5f766c 695f6a62 6c61766e 74616469     lv_obj_invalidat
   1b954:	00000065                                e...

0001b958 <__func__.9995>:
   1b958:	6f5f766c 6d5f6a62 5f65766f 65726f66     lv_obj_move_fore
   1b968:	756f7267 0000646e                       ground..

0001b970 <__func__.10001>:
   1b970:	6f5f766c 6d5f6a62 5f65766f 6b636162     lv_obj_move_back
   1b980:	756f7267 0000646e                       ground..

0001b988 <__func__.10009>:
   1b988:	6f5f766c 735f6a62 705f7465 0000736f     lv_obj_set_pos..

0001b998 <__func__.10018>:
   1b998:	6f5f766c 735f6a62 785f7465 00000000     lv_obj_set_x....

0001b9a8 <__func__.10024>:
   1b9a8:	6f5f766c 735f6a62 795f7465 00000000     lv_obj_set_y....

0001b9b8 <__func__.10082>:
   1b9b8:	6f5f766c 615f6a62 6e67696c 00000000     lv_obj_align....

0001b9c8 <__func__.10096>:
   1b9c8:	6f5f766c 615f6a62 6e67696c 69726f5f     lv_obj_align_ori
   1b9d8:	00006f67                                go..

0001b9dc <__func__.10133>:
   1b9dc:	6f5f766c 725f6a62 696c6165 00006e67     lv_obj_realign..

0001b9ec <__func__.10207>:
   1b9ec:	6f5f766c 725f6a62 65726665 735f6873     lv_obj_refresh_s
   1b9fc:	656c7974 00000000                       tyle....

0001ba04 <__func__.10156>:
   1ba04:	6f5f766c 615f6a62 735f6464 656c7974     lv_obj_add_style
   1ba14:	00000000                                ....

0001ba18 <__func__.10269>:
   1ba18:	6f5f766c 735f6a62 685f7465 65646469     lv_obj_set_hidde
   1ba28:	0000006e                                n...

0001ba2c <__func__.10711>:
   1ba2c:	6f5f766c 675f6a62 615f7465 685f7664     lv_obj_get_adv_h
   1ba3c:	65747469 00007473                       ittest..

0001ba44 <__func__.10716>:
   1ba44:	6f5f766c 675f6a62 635f7465 6b63696c     lv_obj_get_click
   1ba54:	00000000                                ....

0001ba58 <__func__.10721>:
   1ba58:	6f5f766c 675f6a62 745f7465 0000706f     lv_obj_get_top..

0001ba68 <__func__.10726>:
   1ba68:	6f5f766c 675f6a62 645f7465 00676172     lv_obj_get_drag.

0001ba78 <__func__.10731>:
   1ba78:	6f5f766c 675f6a62 645f7465 5f676172     lv_obj_get_drag_
   1ba88:	00726964                                dir.

0001ba8c <__func__.10736>:
   1ba8c:	6f5f766c 675f6a62 645f7465 5f676172     lv_obj_get_drag_
   1ba9c:	6f726874 00000077                       throw...

0001baa4 <__func__.10747>:
   1baa4:	6f5f766c 675f6a62 705f7465 6e657261     lv_obj_get_paren
   1bab4:	76655f74 00746e65                       t_event.

0001babc <__func__.10752>:
   1babc:	6f5f766c 675f6a62 625f7465 5f657361     lv_obj_get_base_
   1bacc:	00726964                                dir.

0001bad0 <__func__.9928>:
   1bad0:	6f5f766c 635f6a62 74616572 00000065     lv_obj_create...

0001bae0 <__func__.9985>:
   1bae0:	6f5f766c 735f6a62 705f7465 6e657261     lv_obj_set_paren
   1baf0:	00000074                                t...

0001baf4 <__func__.10031>:
   1baf4:	6f5f766c 735f6a62 735f7465 00657a69     lv_obj_set_size.

0001bb04 <__func__.10043>:
   1bb04:	6f5f766c 735f6a62 775f7465 68746469     lv_obj_set_width
   1bb14:	00000000                                ....

0001bb18 <__func__.10049>:
   1bb18:	6f5f766c 735f6a62 685f7465 68676965     lv_obj_set_heigh
   1bb28:	00000074                                t...

0001bb2c <__func__.10757>:
   1bb2c:	6f5f766c 675f6a62 705f7465 65746f72     lv_obj_get_prote
   1bb3c:	00007463                                ct..

0001bb40 <__func__.10763>:
   1bb40:	6f5f766c 695f6a62 72705f73 6365746f     lv_obj_is_protec
   1bb50:	00646574                                ted.

0001bb54 <__func__.10769>:
   1bb54:	6f5f766c 675f6a62 735f7465 65746174     lv_obj_get_state
   1bb64:	00000000                                ....

0001bb68 <__func__.10548>:
   1bb68:	6f5f766c 675f6a62 775f7465 68746469     lv_obj_get_width
   1bb78:	7469665f 00000000                       _fit....

0001bb80 <__func__.10555>:
   1bb80:	6f5f766c 675f6a62 685f7465 68676965     lv_obj_get_heigh
   1bb90:	69665f74 00000074                       t_fit...

0001bb98 <__func__.10517>:
   1bb98:	6f5f766c 675f6a62 695f7465 72656e6e     lv_obj_get_inner
   1bba8:	6f6f635f 00736472 0000ffff              _coords.....

0001bbb4 <__func__.10345>:
   1bbb4:	6f5f766c 735f6a62 735f7465 65746174     lv_obj_set_state
   1bbc4:	00000000                                ....

0001bbc8 <__func__.11002>:
   1bbc8:	6e617274 72635f73 65746165 00000000     trans_create....

0001bbd8 <__func__.10368>:
   1bbd8:	6f5f766c 615f6a62 735f6464 65746174     lv_obj_add_state
   1bbe8:	00000000                                ....

0001bbec <__func__.10375>:
   1bbec:	6f5f766c 635f6a62 7261656c 6174735f     lv_obj_clear_sta
   1bbfc:	00006574                                te..

0001bc00 <__func__.10775>:
   1bc00:	6f5f766c 675f6a62 735f7465 616e6769     lv_obj_get_signa
   1bc10:	62635f6c 00000000                       l_cb....

0001bc18 <__func__.10780>:
   1bc18:	6f5f766c 675f6a62 645f7465 67697365     lv_obj_get_desig
   1bc28:	62635f6e 00000000                       n_cb....

0001bc30 <__func__.10785>:
   1bc30:	6f5f766c 675f6a62 655f7465 746e6576     lv_obj_get_event
   1bc40:	0062635f                                _cb.

0001bc44 <__func__.10790>:
   1bc44:	6f5f766c 675f6a62 655f7465 615f7478     lv_obj_get_ext_a
   1bc54:	00727474                                ttr.

0001bc58 <__func__.10796>:
   1bc58:	6f5f766c 675f6a62 745f7465 00657079     lv_obj_get_type.

0001bc68 <__func__.10811>:
   1bc68:	6f5f766c 675f6a62 675f7465 70756f72     lv_obj_get_group
   1bc78:	00000000                                ....

0001bc7c <__func__.9935>:
   1bc7c:	6f5f766c 645f6a62 00006c65              lv_obj_del..

0001bc88 <__func__.10901>:
   1bc88:	6f5f766c 645f6a62 615f6c65 636e7973     lv_obj_del_async
   1bc98:	0062635f                                _cb.

0001bc9c <__func__.9951>:
   1bc9c:	6f5f766c 635f6a62 6e61656c 00000000     lv_obj_clean....

0001bcac <__func__.10816>:
   1bcac:	6f5f766c 695f6a62 6f665f73 65737563     lv_obj_is_focuse
   1bcbc:	00000064 742f2e2e 64726968 74726170     d...../thirdpart
   1bccc:	766c2f79 732f6c67 6c2f6372 6f635f76     y/lvgl/src/lv_co
   1bcdc:	6c2f6572 626f5f76 00632e6a 695f766c     re/lv_obj.c.lv_i
   1bcec:	3a74696e 726c6120 79646165 696e6920     nit: already ini
   1bcfc:	00646574 695f766c 2074696e 64616572     ted.lv_init read
   1bd0c:	00000079 645f766c 696e6965 6f642074     y...lv_deinit do
   1bd1c:	0000656e 4c4c554e 696f7020 7265746e     ne..NULL pointer
   1bd2c:	00000000 735f766c 675f7263 645f7465     ....lv_scr_get_d
   1bd3c:	3a707369 72637320 206e6565 20746f6e     isp: screen not 
   1bd4c:	6e756f66 00000064 6f5f766c 735f6a62     found...lv_obj_s
   1bd5c:	625f7465 5f657361 3a726964 766e6920     et_base_dir: inv
   1bd6c:	64696c61 73616220 69642065 00000072     alid base dir...
   1bd7c:	6f5f766c 635f6a62 6e61656c 7974735f     lv_obj_clean_sty
   1bd8c:	6c5f656c 3a747369 6e616320 66207427     le_list: can't f
   1bd9c:	20646e69 6c797473 69772065 60206874     ind style with `
   1bdac:	74726170 00000060 6f5f766c 735f6a62     part`...lv_obj_s
   1bdbc:	705f7465 203a736f 20746f6e 6e616863     et_pos: not chan
   1bdcc:	676e6967 736f7020 6f697469 666f206e     ging position of
   1bddc:	72637320 206e6565 656a626f 00007463      screen object..
   1bdec:	6f5f766c 615f6a62 735f6464 656c7974     lv_obj_add_style
   1bdfc:	6163203a 2074276e 646e6966 79747320     : can't find sty
   1be0c:	7720656c 20687469 70797460 00006065     le with `type`..
   1be1c:	6f5f766c 635f6a62 74616572 6e203a65     lv_obj_create: n
   1be2c:	6420746f 6c707369 63207961 74616572     ot display creat
   1be3c:	74206465 6f73206f 72616620 6f4e202e     ed to so far. No
   1be4c:	616c7020 74206563 7361206f 6e676973      place to assign
   1be5c:	65687420 77656e20 72637320 006e6565      the new screen.
   1be6c:	656a624f 63207463 74616572 65722065     Object create re
   1be7c:	00796461 276e6143 65732074 68742074     ady.Can't set th
   1be8c:	61702065 746e6572 20666f20 63732061     e parent of a sc
   1be9c:	6e656572 00000000 276e6143 65732074     reen....Can't se
   1beac:	61702074 746e6572 203d3d20 4c4c554e     t parent == NULL
   1bebc:	206f7420 6f206e61 63656a62 00000074      to an object...
   1becc:	6f5f766c 00006a62                       lv_obj..

0001bed4 <__func__.9738>:
   1bed4:	725f766c 5f726665 61657261 00000000     lv_refr_area....
   1bee4:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   1bef4:	732f6c67 6c2f6372 6f635f76 6c2f6572     gl/src/lv_core/l
   1bf04:	65725f76 632e7266 00000000 276e6143     v_refr.c....Can'
   1bf14:	65732074 44562074 65682042 74686769     t set VDB height
   1bf24:	69737520 7420676e 72206568 646e756f      using the round
   1bf34:	6e756620 6f697463 28202e6e 6e6f7257      function. (Wron
   1bf44:	6f722067 5f646e75 6f206263 6f742072     g round_cb or to
   1bf54:	616d7320 56206c6c 00294244               small VDB).

0001bf60 <__func__.9549>:
   1bf60:	5f766c5f 6c797473 696c5f65 725f7473     _lv_style_list_r
   1bf70:	766f6d65 74735f65 00656c79              emove_style.

0001bf7c <__func__.9532>:
   1bf7c:	5f766c5f 6c797473 696c5f65 615f7473     _lv_style_list_a
   1bf8c:	735f6464 656c7974 00000000              dd_style....

0001bf98 <__func__.9777>:
   1bf98:	5f746567 6f6c6c61 6f6c5f63 5f6c6163     get_alloc_local_
   1bfa8:	6c797473 00000065                       style...

0001bfb0 <__func__.9583>:
   1bfb0:	5f766c5f 6c797473 65735f65 6e695f74     _lv_style_set_in
   1bfc0:	00000074                                t...

0001bfc4 <__func__.9597>:
   1bfc4:	5f766c5f 6c797473 65735f65 6f635f74     _lv_style_set_co
   1bfd4:	00726f6c                                lor.

0001bfd8 <__func__.9611>:
   1bfd8:	5f766c5f 6c797473 65735f65 706f5f74     _lv_style_set_op
   1bfe8:	00000061                                a...

0001bfec <__func__.9625>:
   1bfec:	5f766c5f 6c797473 65735f65 74705f74     _lv_style_set_pt
   1bffc:	00000072                                r...

0001c000 <__func__.9673>:
   1c000:	5f766c5f 6c797473 696c5f65 615f7473     _lv_style_list_a
   1c010:	745f6464 736e6172 7974735f 0000656c     dd_trans_style..
   1c020:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   1c030:	732f6c67 6c2f6372 6f635f76 6c2f6572     gl/src/lv_core/l
   1c040:	74735f76 2e656c79 00000063 735f766c     v_style.c...lv_s
   1c050:	656c7974 73696c5f 65725f74 65766f6d     tyle_list_remove
   1c060:	7974735f 203a656c 6c756f63 74276e64     _style: couldn't
   1c070:	61657220 636f6c6c 20657461 73616c63      reallocate clas
   1c080:	696c2073 00007473 735f766c 656c7974     s list..lv_style
   1c090:	73696c5f 64615f74 74735f64 3a656c79     _list_add_style:
   1c0a0:	756f6320 276e646c 64612074 68742064      couldn't add th
   1c0b0:	6c632065 00737361 5f746567 61636f6c     e class.get_loca
   1c0c0:	74735f6c 3a656c79 756f6320 276e646c     l_style: couldn'
   1c0d0:	72632074 65746165 636f6c20 73206c61     t create local s
   1c0e0:	656c7974 00000000 735f766c 656c7974     tyle....lv_style
   1c0f0:	73696c5f 64615f74 72745f64 5f736e61     _list_add_trans_
   1c100:	6c797473 63203a65 646c756f 2074276e     style: couldn't 
   1c110:	61657263 74206574 736e6172 6f697469     create transitio
   1c120:	7473206e 00656c79                       n style.

0001c128 <__func__.9728>:
   1c128:	6c6c6966 656c625f 6465646e 00000000     fill_blended....

0001c138 <__func__.9860>:
   1c138:	5f70616d 6e656c62 00646564 742f2e2e     map_blended.../t
   1c148:	64726968 74726170 766c2f79 732f6c67     hirdparty/lvgl/s
   1c158:	6c2f6372 72645f76 6c2f7761 72645f76     rc/lv_draw/lv_dr
   1c168:	625f7761 646e656c 0000632e 6c6c6966     aw_blend.c..fill
   1c178:	656c625f 6465646e 6e75203a 70707573     _blended: unsupp
   1c188:	6574726f 6c622064 20646e65 65646f6d     orted blend mode
   1c198:	00000000 0000ffff                       ........

0001c1a0 <__func__.9554>:
   1c1a0:	645f766c 5f776172 00676d69              lv_draw_img.

0001c1ac <__func__.9618>:
   1c1ac:	695f766c 645f676d 5f776172 65726f63     lv_img_draw_core
   1c1bc:	00000000 742f2e2e 64726968 74726170     ....../thirdpart
   1c1cc:	766c2f79 732f6c67 6c2f6372 72645f76     y/lvgl/src/lv_dr
   1c1dc:	6c2f7761 72645f76 695f7761 632e676d     aw/lv_draw_img.c
   1c1ec:	00000000 67616d49 72642065 203a7761     ....Image draw: 
   1c1fc:	20637273 4e207369 004c4c55 640a6f4e     src is NULL.No.d
   1c20c:	00617461 67616d49 72642065 65207761     ata.Image draw e
   1c21c:	726f7272 00000000 67616d49 72642065     rror....Image dr
   1c22c:	63207761 74276e61 61657220 68742064     aw can't read th
   1c23c:	696c2065 0000656e                       e line..

0001c244 <_lv_bpp1_opa_table>:
   1c244:	0000ff00                                ....

0001c248 <_lv_bpp2_opa_table>:
   1c248:	ffaa5500                                .U..

0001c24c <_lv_bpp4_opa_table>:
   1c24c:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

0001c25c <_lv_bpp8_opa_table>:
   1c25c:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   1c26c:	13121110 17161514 1b1a1918 1f1e1d1c     ................
   1c27c:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
   1c28c:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
   1c29c:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
   1c2ac:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
   1c2bc:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
   1c2cc:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
   1c2dc:	83828180 87868584 8b8a8988 8f8e8d8c     ................
   1c2ec:	93929190 97969594 9b9a9998 9f9e9d9c     ................
   1c2fc:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
   1c30c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1c31c:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
   1c32c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1c33c:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
   1c34c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0001c35c <__func__.9614>:
   1c35c:	645f766c 5f776172 7474656c 00007265     lv_draw_letter..

0001c36c <__func__.9696>:
   1c36c:	77617264 74656c5f 5f726574 70627573     draw_letter_subp
   1c37c:	00000078                                x...

0001c380 <__func__.9641>:
   1c380:	77617264 74656c5f 5f726574 6d726f6e     draw_letter_norm
   1c390:	00006c61                                al..

0001c394 <_lv_bpp3_opa_table>:
   1c394:	6d492400 ffdbb692 742f2e2e 64726968     .$Im....../third
   1c3a4:	74726170 766c2f79 732f6c67 6c2f6372     party/lvgl/src/l
   1c3b4:	72645f76 6c2f7761 72645f76 6c5f7761     v_draw/lv_draw_l
   1c3c4:	6c656261 0000632e 645f766c 5f776172     abel.c..lv_draw_
   1c3d4:	7474656c 203a7265 746e6f66 20736920     letter: font is 
   1c3e4:	4c4c554e 00000000 645f766c 5f776172     NULL....lv_draw_
   1c3f4:	7474656c 203a7265 70796c67 73642068     letter: glyph ds
   1c404:	6e202e63 6620746f 646e756f 00000000     c. not found....
   1c414:	645f766c 5f776172 7474656c 203a7265     lv_draw_letter: 
   1c424:	72616863 65746361 20732772 6d746962     character's bitm
   1c434:	6e207061 6620746f 646e756f 00000000     ap not found....
   1c444:	645f766c 5f776172 7474656c 203a7265     lv_draw_letter: 
   1c454:	61766e69 2064696c 20707062 20746f6e     invalid bpp not 
   1c464:	6e756f66 00000064 645f766c 5f776172     found...lv_draw_
   1c474:	7474656c 203a7265 61766e69 2064696c     letter: invalid 
   1c484:	00707062                                bpp.

0001c488 <wcorr.10369>:
   1c488:	81808080 83828281 87868584 8d8c8a89     ................
   1c498:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
   1c4a8:	000000b5                                ....

0001c4ac <__func__.9580>:
   1c4ac:	645f766c 5f776172 6b73616d 6464615f     lv_draw_mask_add
   1c4bc:	00000000                                ....

0001c4c0 <__func__.9645>:
   1c4c0:	645f766c 5f776172 6b73616d 676e615f     lv_draw_mask_ang
   1c4d0:	695f656c 0074696e 742f2e2e 64726968     le_init.../third
   1c4e0:	74726170 766c2f79 732f6c67 6c2f6372     party/lvgl/src/l
   1c4f0:	72645f76 6c2f7761 72645f76 6d5f7761     v_draw/lv_draw_m
   1c500:	2e6b7361 00000063 6d5f766c 5f6b7361     ask.c...lv_mask_
   1c510:	3a646461 206f6e20 63616c70 6f742065     add: no place to
   1c520:	64646120 65687420 73616d20 0000006b      add the mask...
   1c530:	78656e55 74636570 73206465 74726174     Unexpected start
   1c540:	676e615f 0000656c 78656e55 74636570     _angle..Unexpect
   1c550:	65206465 615f646e 656c676e 00000000     ed end_angle....
   1c560:	0000ffff                                ....

0001c564 <__func__.9886>:
   1c564:	77617264 7461705f 6e726574 00000000     draw_pattern....
   1c574:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   1c584:	732f6c67 6c2f6372 72645f76 6c2f7761     gl/src/lv_draw/l
   1c594:	72645f76 725f7761 2e746365 00000063     v_draw_rect.c...
   1c5a4:	77617264 676d695f 6163203a 2074276e     draw_img: can't 
   1c5b4:	20746567 67616d69 6e692065 00006f66     get image info..
   1c5c4:	695f766c 645f676d 67697365 69203a6e     lv_img_design: i
   1c5d4:	6567616d 756f7320 20656372 65707974     mage source type
   1c5e4:	20736920 6e6b6e75 006e776f 33221100      is unknown..."3
   1c5f4:	77665544 bbaa9988 ffeeddcc              DUfw........

0001c600 <__func__.7156>:
   1c600:	695f766c 625f676d 735f6675 705f7465     lv_img_buf_set_p
   1c610:	74656c61 00006574                       alette..

0001c618 <__func__.9528>:
   1c618:	5f766c5f 5f676d69 68636163 706f5f65     _lv_img_cache_op
   1c628:	00006e65                                en..

0001c62c <__func__.9548>:
   1c62c:	695f766c 635f676d 65686361 7465735f     lv_img_cache_set
   1c63c:	7a69735f 00000065 742f2e2e 64726968     _size...../third
   1c64c:	74726170 766c2f79 732f6c67 6c2f6372     party/lvgl/src/l
   1c65c:	72645f76 6c2f7761 6d695f76 61635f67     v_draw/lv_img_ca
   1c66c:	2e656863 00000063 695f766c 635f676d     che.c...lv_img_c
   1c67c:	65686361 65706f5f 74203a6e 63206568     ache_open: the c
   1c68c:	65686361 7a697320 73692065 00003020     ache size is 0..
   1c69c:	67616d69 72642065 203a7761 68636163     image draw: cach
   1c6ac:	696d2065 202c7373 736f6c63 6e612065     e miss, close an
   1c6bc:	65722064 20657375 65206e61 7972746e     d reuse an entry
   1c6cc:	00000000 67616d69 72642065 203a7761     ....image draw: 
   1c6dc:	68636163 696d2065 202c7373 68636163     cache miss, cach
   1c6ec:	74206465 6e61206f 706d6520 65207974     ed to an empty e
   1c6fc:	7972746e 00000000 67616d49 72642065     ntry....Image dr
   1c70c:	63207761 6f6e6e61 706f2074 74206e65     aw cannot open t
   1c71c:	69206568 6567616d 73657220 6372756f     he image resourc
   1c72c:	00000065                                e...

0001c730 <__func__.9619>:
   1c730:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
   1c740:	746c6975 5f6e695f 6f666e69 00000000     uilt_in_info....

0001c750 <__func__.9626>:
   1c750:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
   1c760:	746c6975 5f6e695f 6e65706f 00000000     uilt_in_open....

0001c770 <__func__.9673>:
   1c770:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
   1c780:	746c6975 5f6e695f 656e696c 7572745f     uilt_in_line_tru
   1c790:	6f635f65 00726f6c 33221100 77665544     e_color..."3DUfw
   1c7a0:	bbaa9988 ffeeddcc                       ........

0001c7a8 <__func__.9656>:
   1c7a8:	695f766c 645f676d 646f6365 625f7265     lv_img_decoder_b
   1c7b8:	746c6975 5f6e695f 64616572 6e696c5f     uilt_in_read_lin
   1c7c8:	00000065                                e...

0001c7cc <__func__.9588>:
   1c7cc:	695f766c 645f676d 646f6365 635f7265     lv_img_decoder_c
   1c7dc:	74616572 00000065                       reate...

0001c7e4 <__func__.9550>:
   1c7e4:	5f766c5f 5f676d69 6f636564 5f726564     _lv_img_decoder_
   1c7f4:	74696e69 00000000 742f2e2e 64726968     init....../third
   1c804:	74726170 766c2f79 732f6c67 6c2f6372     party/lvgl/src/l
   1c814:	72645f76 6c2f7761 6d695f76 65645f67     v_draw/lv_img_de
   1c824:	65646f63 00632e72 67616d49 65672065     coder.c.Image ge
   1c834:	6e692074 67206f66 72207465 20646165     t info get read 
   1c844:	656c6966 61656820 00726564 67616d49     file header.Imag
   1c854:	65672065 6e692074 66206f66 646e756f     e get info found
   1c864:	6b6e7520 6e776f6e 63727320 70797420      unknown src typ
   1c874:	00000065 006e6962 6c697542 6e692d74     e...bin.Built-in
   1c884:	616d6920 64206567 646f6365 63207265      image decoder c
   1c894:	74276e61 65706f20 6874206e 69662065     an't open the fi
   1c8a4:	0000656c 5f676d69 6f636564 5f726564     le..img_decoder_
   1c8b4:	6c697562 6e695f74 65706f5f 6f203a6e     built_in_open: o
   1c8c4:	6f207475 656d2066 79726f6d 00000000     ut of memory....
   1c8d4:	67616d49 65642065 65646f63 706f2072     Image decoder op
   1c8e4:	203a6e65 6e6b6e75 206e776f 6f6c6f63     en: unknown colo
   1c8f4:	6f662072 74616d72 00000000 6c697542     r format....Buil
   1c904:	6e692d74 616d6920 64206567 646f6365     t-in image decod
   1c914:	73207265 206b6565 6c696166 00006465     er seek failed..
   1c924:	6c697542 6e692d74 616d6920 64206567     Built-in image d
   1c934:	646f6365 72207265 20646165 6c696166     ecoder read fail
   1c944:	00006465 6c697542 6e692d74 616d6920     ed..Built-in ima
   1c954:	64206567 646f6365 72207265 20646165     ge decoder read 
   1c964:	20746f6e 70707573 7374726f 65687420     not supports the
   1c974:	6c6f6320 6620726f 616d726f 00000074      color format...
   1c984:	695f766c 645f676d 646f6365 695f7265     lv_img_decoder_i
   1c994:	3a74696e 74756f20 20666f20 6f6d656d     nit: out of memo
   1c9a4:	00007972                                ry..

0001c9a8 <__func__.9652>:
   1c9a8:	665f766c 5f746e6f 5f746567 6d746962     lv_font_get_bitm
   1c9b8:	665f7061 745f746d 00007478 742f2e2e     ap_fmt_txt..../t
   1c9c8:	64726968 74726170 766c2f79 732f6c67     hirdparty/lvgl/s
   1c9d8:	6c2f6372 6f665f76 6c2f746e 6f665f76     rc/lv_font/lv_fo
   1c9e8:	665f746e 745f746d 632e7478 00000000     nt_fmt_txt.c....

0001c9f8 <kern_classes>:
   1c9f8:	0001ca08 0001d654 0001d5b8 0000313d     ....T.......=1..

0001ca08 <kern_class_values>:
   1ca08:	00000100 00000000 00000100 00000003     ................
   1ca18:	00000200 00000000 00000000 00000000     ................
   1ca28:	00010000 00000000 00000000 00000000     ................
   1ca38:	000c0100 0000fa07 f1f20000 04060c02     ................
   1ca48:	010d02f6 0008030b 00000000 00000000     ................
   1ca58:	020f0000 000000fe 00000000 00000000     ................
   1ca68:	f8000500 00000000 0504fb00 00fd0000     ................
   1ca78:	fd0003fe fbfffd00 00000000 fd0000fd     ................
   1ca88:	fd0000fc 0000fb00 00000000 fd000000     ................
   1ca98:	00fc00fd 00e100f9 0500fb00 fb000008     ................
   1caa8:	05080303 000005fc 000000f1 00000000     ................
   1cab8:	00000000 000000f7 00000000 00000000     ................
   1cac8:	f9000000 f600f3fd 000000fe 000a0100     ................
   1cad8:	01fffef8 0000fc00 0000edfe 00000000     ................
   1cae8:	00000000 0afeec00 00000000 00000000     ................
   1caf8:	00000000 000000f6 00000000 08000000     ................
   1cb08:	00000300 000000fb 00000000 00000000     ................
   1cb18:	00000000 020a0000 00000001 00000000     ................
	...
   1cb48:	000000f7 00000000 00000000 00000000     ................
   1cb58:	00000000 02000000 fd080305 fd050000     ................
   1cb68:	0702ddf8 00fd0105 00080009 00e80008     ................
   1cb78:	080008fd 000305fd 00fd0100 0014fc00     ................
   1cb88:	00080014 0804030b f7000000 00000000     ................
   1cb98:	0200fe01 02fbfdfb 0000fd00 0000f600     ................
	...
   1cbb0:	0000ef00 00000000 00000000 00000000     ................
   1cbc0:	00f20100 000000f0 1900fe00 0303fdfd     ................
   1cbd0:	03fd00fe 00f20000 00000000 00000000     ................
   1cbe0:	00e70000 00000003 00000000 00000000     ................
   1cbf0:	0f00f000 00f70000 e7ef0008 0008fbef     ................
   1cc00:	0300ef00 00fc00fa 00000000 00000000     ................
   1cc10:	07000000 0000e108 00000000 00000000     ................
   1cc20:	000c0000 00000002 02020000 ff00fbfd     ................
   1cc30:	0000fdff 000000fe 00fe00fb fa00fbfa     ................
   1cc40:	00fbf8f8 00fb00fb fe000000 00030000     ................
   1cc50:	0100fd02 03000000 000000fe ff0303fe     ................
   1cc60:	fb000000 0000ff00 01000000 00fe0300     ................
   1cc70:	00fc00fd 0800fe00 00fd0000 00000000     ................
   1cc80:	fefe01ff 00fd0000 000000fd 00000000     ................
   1cc90:	ffff0000 00fdfd00 00000000 fe000001     ................
   1cca0:	fdfdfd00 00000000 00000000 0000fe00     ................
   1ccb0:	fdfe0000 f800fc00 0005f8fe 0503fb00     ................
   1ccc0:	fffa0007 f4ff00fd f202fe03 01000003     ................
   1ccd0:	fef200f3 f300feea 00070500 00000003     ................
   1cce0:	fb000100 00f800fd 00fd0000 00fd0000     ................
   1ccf0:	00000000 ff00ffff 000000fd 00000000     ................
   1cd00:	fe00fdfd 0000fefd 000000fd 00000000     ................
   1cd10:	00000000 fd00fefe fb00fe00 fd000003     ................
   1cd20:	00030301 00000000 0000fe00 02000000     ................
   1cd30:	00fd0000 00fdfefd 00000000 00020000     ................
   1cd40:	000000fe 00fcfd00 fe0800fb 0000f801     ................
   1cd50:	f5f3f307 fe0003fb fb00fbef fb04fb00     ................
   1cd60:	00f900f0 02ff0100 000300fe f300f6f8     ................
   1cd70:	f8fafbfa fbfff9fd 010002f9 0000fd00     ................
   1cd80:	03000200 00000000 00000000 fd000000     ................
   1cd90:	ff00ff00 fafc00fd f800fffa 00000000     ................
   1cda0:	00fe0000 01000000 000000fe 00000003     ................
   1cdb0:	00000000 00000c00 00000000 00000002     ................
   1cdc0:	000000fd 00000000 00000000 000300fb     ................
	...
   1cddc:	000000fe 000000fb 00f8f300 f3fc0000     ................
   1cdec:	03fd0000 0000f900 00000000 00000000     ................
   1cdfc:	fb0000fc 00000000 00000000 00000000     ................
   1ce0c:	00fb0003 03000000 fbfb0200 fdfdfd00     ................
   1ce1c:	00000000 00f80000 fdfc00fd f8fafa00     ................
   1ce2c:	00fb00fe 000000f8 00001400 fd000001     ................
   1ce3c:	f5000300 00000000 08fbe800 00f5fe08     ................
   1ce4c:	f300fc03 ee03fdff 040003fd f8f7fcf7     ................
   1ce5c:	f10000f5 00000f00 000000ff f9fdffff     ................
   1ce6c:	00e8fff8 00000000 00000000 00000001     ................
	...
   1ce88:	ff00fd00 0000fcfd 00fd00fb 00000000     ................
	...
   1cea0:	00ff0000 050000fb fa0003ff f9fffe03     ................
   1ceb0:	fdfd00fd fcfc00fe fffe0000 00fdfcfe     ................
   1cec0:	0300fd00 00fa00fe 00fb0000 fcfc00fc     ................
   1ced0:	00000003 00000000 0003fb00 fdfe00fc     ................
   1cee0:	fefefef8 fffdfeff 00000000 fefefd00     ................
   1cef0:	00000000 fe00fe03 fe000000 fdfefefd     ................
   1cf00:	0a0200fe 00f900ff fd0005fe 0004fdf5     ................
   1cf10:	03fcf400 fe0002fc fc00f8fe fc000001     ................
   1cf20:	03000000 00fbfb03 fdfcfdfc 01fc00fd     ................
   1cf30:	0008fcfb 00000000 00000000 00000003     ................
	...
   1cf54:	000000fc 00000000 00000000 00000000     ................
	...
   1cf80:	000000fe 00000000 00000000 00000000     ................
	...
   1cf9c:	fdfe0000 00000000 00000000 00000000     ................
   1cfac:	fd0000fc fdfd0000 00000000 000000fd     ................
   1cfbc:	0000ff00 fe000000 00000000 00fb00fc     ................
   1cfcc:	00f80000 0105fa02 0000f4fe f600fdfa     ................
   1cfdc:	0000f9fa f6f6fdf5 00f900f4 00fd1102     ................
   1cfec:	fdfffdfa f7fbf9fc 00fdfaf6 0100fe00     ................
   1cffc:	feee0000 f7fa0608 00f80100 05fdfef3     ................
   1d00c:	0001fde8 f3fdef00 0000edfd 010f00ee     ................
   1d01c:	0000fe00 feff0000 ef00fef6 00000000     ................
   1d02c:	00fe00f8 00f4f9ff f8fcff00 00fe00fd     ................
   1d03c:	f4000000 fef8f8fd fcfdfafc f8fefb00     ................
   1d04c:	fbfd00fc 0100fbfd 00f8fe00 00fb0005     ................
   1d05c:	03000000 0afb0200 fdfdfd00 00000000     ................
   1d06c:	00f80000 fdfc00fd f8fafa00 02fb00fe     ................
   1d07c:	0000000a 00001400 fd000001 00000300     ................
   1d08c:	00000000 00ff0000 00000000 0000fbfe     ................
   1d09c:	ff000000 fd000000 fb0000fd fb0000fd     ................
   1d0ac:	00ff0400 00000000 00000100 05040000     ................
   1d0bc:	f800fe02 f80800fc 0afbfbf8 feea0305     ................
   1d0cc:	fd00fd05 00f7fd03 fefd03fd 0000fef8     ................
   1d0dc:	f9000508 07fdf200 fd01f6fd 0afdf8f8     ................
   1d0ec:	00fc0003 080200f9 faf6f7fa ed010008     ................
   1d0fc:	fefc03fe f7fa00fa 00fefcfc fdfbfa00     ................
   1d10c:	fd060800 fcf200f2 fff1f700 f9f8fcf8     ................
   1d11c:	fd000007 00fefb00 0400fbfd 000003f8     ................
   1d12c:	fafd00f2 faf8fefc f800faf8 f8fbfafd     ................
   1d13c:	010000fd f800fc0c fbfd00fd f6f9f9fa     ................
   1d14c:	0005fbfd fdf300fc f7f80502 fd08f8fb     ................
   1d15c:	05fbe801 00f7fcfa fdfdf5f8 f8fbfdfe     ................
   1d16c:	080000ff 00effe07 f606faf1 f5f7fbef     ................
   1d17c:	0005f8f3 fd000000 fd030000 05fb0205     ................
   1d18c:	fff80000 0100ff00 0000fe01 00000000     ................
   1d19c:	000000fd 01080200 0000fd00 fefe0000     ................
   1d1ac:	000000fd 00000201 00020000 000a00fe     ................
   1d1bc:	fd010105 00000500 00000200 00000000     ................
   1d1cc:	00000000 07000800 00000000 00000000     ................
   1d1dc:	00000000 00f10000 080004fd 03190000     ................
   1d1ec:	0303fbfb 00f301fe 00f10c00 00000000     ................
   1d1fc:	00000000 0aef0000 00000024 00000000     ........$.......
   1d20c:	00000000 0000f100 00000000 00000000     ................
	...
   1d22c:	fb0000fc 000000fe 00000000 00000000     ................
	...
   1d244:	00f900fe 00000100 fefb2103 03f90708     .........!......
   1d254:	03030000 000000fd 00000000 00000000     ................
   1d264:	000007df 00000000 00000000 00000000     ................
   1d274:	f9000000 f9000000 00000000 0000fffa     ................
   1d284:	fd00fa00 0000f400 00000000 00000000     ................
   1d294:	0000ef00 00010000 00000000 0000fd00     ................
   1d2a4:	00fc00fb 000000f9 00fd03fc fafdf900     ................
   1d2b4:	00f90000 00f400fd eb0000fd f7fdf6fb     ................
   1d2c4:	00ef0000 0000fff9 00000000 fbfc0000     ................
   1d2d4:	0000fcfe 00fa0000 05fd03fa fefafe00     ................
   1d2e4:	fd00fbfc f902feff 000000ff 00fcfee9     ................
   1d2f4:	f4fe00fa fe0000fe 000000fe fe000200     ................
   1d304:	0004fefc 00000000 00000000 00000000     ................
	...
   1d330:	00030000 00000000 fe00fa00 fb000000     ................
   1d340:	00000003 00fbfdf9 fd00f900 0000f400     ................
   1d350:	00e70000 00f3f7fb fe00ef00 000000fc     ................
   1d360:	00000000 fffcfd00 000001fc 0800fd04     ................
   1d370:	f8fdfd0d 06040d03 030b03f9 00070607     ................
	...
   1d388:	0c100000 fe00fdfb 00140b14 00030000     ................
   1d398:	00000900 000000fc 00000000 00fe0000     ................
   1d3a8:	00000000 04000000 00000000 f6fefdea     ................
   1d3b8:	ef0000f3 00000000 00000000 00000000     ................
   1d3c8:	00000000 0000fc00 00000000 fe000000     ................
	...
   1d3e0:	00000004 fefdea00 0000f3f6 000000f6     ................
	...
   1d400:	000000fe fd0003fa f8030502 03feff00     ................
   1d410:	00000200 00fa0000 00fbfefe 1000f6fe     ................
   1d420:	fefa00fd 00fcfe00 fdfbf9fd fc000000     ................
	...
   1d438:	0000fe00 00000000 00040000 ea000000     ................
   1d448:	f3f6fefd 00ef0000 00000000 00000d00     ................
	...
   1d460:	fdf800fc fdfe08fe 01fe01f6 0601f9fe     ................
   1d470:	02010201 00fdf6fa f5f9fbf6 fbfc00f6     ................
   1d480:	fefefdfd fe00fefd 040004ff 000800fe     ................
	...
   1d498:	fe000000 0000fdfd 00ff00f9 000000fc     ................
	...
   1d4b0:	000000f1 00000000 00000000 fd00fdfd     ................
   1d4c0:	00000000 fc0000fe fc0003fd f900fefb     ................
   1d4d0:	fdfefafe 0000fc00 00000000 00000000     ................
   1d4e0:	0800ef00 00fb0000 fd000000 0000fd00     ................
   1d4f0:	fe0000ff 0000fa00 f8f8fd0b ff030302     ................
   1d500:	020402f9 fe080208 f60000f9 f9f80000     ................
   1d510:	00fb0000 fc00fcfd fe00fc00 f8fe0004     ................
   1d520:	000009fd 00fb00fe 00fa0300 0002fd03     ................
   1d530:	fe00f800 03fd00ff 000000fe 00fafdf6     ................
   1d540:	f40000f8 00fd0900 000200fb f8fd00fd     ................
   1d550:	0003fd00 fe000000 fd030000 fd000001     ................
   1d560:	00fd00fe 00000000 00000000 00000000     ................
   1d570:	00000000 000600f0 0000fe00 00010000     ................
   1d580:	0000fdfd 06000500 00000000 01f1f000     ................
   1d590:	f604080b 09000b02 00000500 00000000     ................
   1d5a0:	00000000 00000e00 00000000 00000000     ................
	...

0001d5b8 <kern_right_class_mapping>:
   1d5b8:	02010000 05040300 08070602 0a090a09     ................
   1d5c8:	0e0d0c0b 0c11100f 15141312 00000015     ................
   1d5d8:	19181716 19191917 1a191917 19191919     ................
   1d5e8:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
   1d5f8:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
   1d608:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
   1d618:	00000931 00000000 00000000 00000000     1...............
	...

0001d654 <kern_left_class_mapping>:
   1d654:	02010000 05040300 08070602 0a090a09     ................
   1d664:	0d000c0b 11100f0e 140c1312 00000014     ................
   1d674:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
   1d684:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
   1d694:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
   1d6a4:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
   1d6b4:	0000093d 00000000 00000000 00000000     =...............
	...

0001d6f0 <cmaps>:
   1d6f0:	00000020 0001005f 00000000 00000000      ..._...........
   1d700:	00000000 000000b0 0060f7f3 0001d718     ..........`.....
   1d710:	00000000 0002003b                       ....;...

0001d718 <unicode_list_1>:
   1d718:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
   1d728:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
   1d738:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
   1d748:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
   1d758:	efc9efc8 efe3efcb f014efe5 f017f015     ................
   1d768:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
   1d778:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
   1d788:	f712f4aa 0000f7f2                       ........

0001d790 <glyph_dsc>:
	...
   1d798:	04500000 00000000 04500000 00010c03     ..P.......P.....
   1d7a8:	06400012 07010505 0b40001f 00000c0b     ..@.......@.....
   1d7b8:	09f00061 fe00100a 0d8000b1 00000c0d     a...............
   1d7c8:	0b0000ff ff000d0b 03600147 07010502     ........G.`.....
   1d7d8:	0560014c fd010f04 0570016a fd000f04     L.`.....j.p.....
   1d7e8:	06600188 05000707 095001a1 02010808     ..`.......P.....
   1d7f8:	03a001c1 fe000503 062001c9 03000306     .......... .....
   1d808:	03a001d2 00000303 05a001d7 feff1008     ................
   1d818:	0ab00217 00000c0a 05f00253 00000c05     ........S.......
   1d828:	09300271 00000c09 092002a7 00000c09     q.0....... .....
   1d838:	0ab002dd 00000c0b 0930031f 00000c09     ..........0.....
   1d848:	09e00355 00000c0a 09900391 00000c09     U...............
   1d858:	0a5003c7 00000c0a 09e00403 00000c0a     ..P.............
   1d868:	03a0043f 00000903 03a0044d fd000c03     ?.......M.......
   1d878:	0950045f 02010808 0950047f 03010608     _.P.......P.....
   1d888:	09500497 02010808 093004b7 00000c09     ..P.......0.....
   1d898:	109004ed fd000f10 0bb00565 00ff0c0d     ........e.......
   1d8a8:	0c2005b3 00010c0b 0b9005f5 00000c0b     .. .............
   1d8b8:	0d300637 00010c0c 0ac0067f 00010c09     7.0.............
   1d8c8:	0a3006b5 00010c09 0c6006eb 00000c0c     ..0.......`.....
   1d8d8:	0d000733 00010c0b 04f00775 00010c03     3.......u.......
   1d8e8:	08300787 00ff0c08 0b8007b7 00010c0b     ..0.............
   1d8f8:	098007f9 00010c09 0f40082f 00010c0d     ......../.@.....
   1d908:	0d00087d 00010c0b 0d7008bf 00000c0d     }.........p.....
   1d918:	0b90090d 00010c0a 0d700949 fd000f0e     ........I.p.....
   1d928:	0ba009b2 00010c0a 09f009ee 00000c0a     ................
   1d938:	09600a2a 00000c0a 0ca00a66 00010c0b     *.`.....f.......
   1d948:	0b600aa8 00ff0c0d 12000af6 00000c12     ..`.............
   1d958:	0ac00b62 00000c0b 0a600ba4 00ff0c0c     b.........`.....
   1d968:	0a800bec 00000c0b 05500c2e fd010f05     ..........P.....
   1d978:	05a00c54 feff1008 05500c94 fd000f04     T.........P.....
   1d988:	09500cb2 02010708 08000cce fe000208     ..P.............
   1d998:	09a00cd6 0a010205 09900cdb 00000909     ................
   1d9a8:	0af00d04 00010c0a 09200d40 00000909     ........@. .....
   1d9b8:	0af00d69 00000c0a 09d00da5 0000090a     i...............
   1d9c8:	05a00dd2 00000c07 0b100dfc fd000c0a     ................
   1d9d8:	0ae00e38 00010c09 04700e6e 00010c03     8.......n.p.....
   1d9e8:	04900e80 fdfe0f06 09e00ead 00010c09     ................
   1d9f8:	04700ee3 00010c02 10f00eef 0001090f     ..p.............
   1da08:	0ae00f33 00010909 0a300f5c 0000090a     3.......\.0.....
   1da18:	0af00f89 fd010c0a 0af00fc5 fd000c0a     ................
   1da28:	06901001 00010906 0800101c 00000908     ................
   1da38:	06a01040 00000b07 0ad01067 00010909     @.......g.......
   1da48:	08f01090 00ff090a 0e6010bd 0000090f     ..........`.....
   1da58:	08d01101 00000909 08f0112a fdff0c0a     ........*.......
   1da68:	08501166 00000908 05a0118a fd000f06     f.P.............
   1da78:	04d011b7 fd010f03 05a011ce fd000f05     ................
   1da88:	095011f4 04000509 06b0120b 06000606     ..P.............
   1da98:	0500121d 03010403 10001223 fe001110     ........#.......
   1daa8:	100012ab 00000c10 1000130b ff000e10     ................
   1dab8:	1000137b 00000c10 0b0013db 00000c0b     {...............
   1dac8:	1000141d fe001010 1000149d fe001010     ................
   1dad8:	1200151d ff000e12 1000159b fe001010     ................
   1dae8:	1200161b 00000c12 10001687 fe001010     ................
   1daf8:	08001707 ff000e08 0c00173f ff000e0c     ........?.......
   1db08:	12001793 fe001012 10001823 00000c10     ........#.......
   1db18:	0e001883 fe02100a 0e0018d3 fd00120e     ................
   1db28:	0e001951 ff000f0e 0e0019ba ff000e0e     Q...............
   1db38:	0e001a1c fe02100a 0e001a6c ffff0e10     ........l.......
   1db48:	0a001adc ff000e0a 0a001b22 ff000e0a     ........".......
   1db58:	0e001b68 ff000e0e 0e001bca 0400040e     h...............
   1db68:	12001be6 00000c12 14001c52 fe001014     ........R.......
   1db78:	12001cf2 feff1014 10001d92 fe001010     ................
   1db88:	0e001e12 01000a0e 0e001e58 01000a0e     ........X.......
   1db98:	14001e9e ff000e14 10001f2a 00000c10     ........*.......
   1dba8:	10001f8a fe001010 1000200a feff1111     ......... ......
   1dbb8:	0e00209b ff000e0f 0e002104 fe00100e     . .......!......
   1dbc8:	0e002174 ff000e0e 0a0021d6 feff100c     t!.......!......
   1dbd8:	0e002236 fe00100e 0e0022a6 fe00100e     6"......."......
   1dbe8:	12002316 00000c12 10002382 fdff1212     .#.......#......
   1dbf8:	0c002424 fe00100c 14002484 ff000f14     $$.......$......
   1dc08:	1400251a 01000a14 1400257e 01000a14     .%......~%......
   1dc18:	140025e2 01000a14 14002646 01000a14     .%......F&......
   1dc28:	140026aa 01000a14 1400270e ff000e15     .&.......'......
   1dc38:	0e0027a1 fe01100c 0e002801 fe00100e     .'.......(......
   1dc48:	10002871 fdff1111 14002902 00000c14     q(.......)......
   1dc58:	0c00297a fe00100c 102029da 01000b11     z).......) .....

0001dc68 <gylph_bitmap>:
   1dc68:	aff00bbf 089ee00a c0078cd0 bf100000     ................
   1dc78:	1ff5e01a e4f3513f f2403e0f 00100872     ....?Q...>@.r...
   1dc88:	e003c005 007a0000 0900005c 01a00780     ......z.\.......
   1dc98:	ffffffff 733e03fd 0030833c 00c500f2     ......>s<.0.....
   1dca8:	0e100f00 f0020030 9f00f200 ffffffff     ....0...........
   1dcb8:	36c33841 890030e3 00005c00 a007700a     A8.6.0...\...p..
   1dcc8:	79000000 00000000 00000079 20e9ff5c     ...y....y...\.. 
   1dcd8:	9ebcfc06 79b00e90 800f1000 0d000079     .......y....y...
   1dce8:	000079f5 50fdef03 cf060000 000040fe     .y.....P.....@..
   1dcf8:	00f15e79 f3057900 07790007 bce92ff1     y^...y....y../..
   1dd08:	ae03a0af 0000d7ff 00007900 00790000     .........y....y.
   1dd18:	80de0300 00d00500 01500ce4 004c00e3     ..........P...L.
   1dd28:	00a9005a c004a006 4c00004e 500d5a00     Z.......N..L.Z.P
   1dd38:	1ce40000 0000a058 e173ce03 0000e93c     ....X.....s.<...
   1dd48:	400ed600 7c0000a8 d003c003 3c202e00     ...@...|...... <
   1dd58:	0b003d00 09e20070 00d00680 00a0dd04     .=..p...........
   1dd68:	00b1ef09 3ce40900 d90000a0 00007d00     .......<.....}..
   1dd78:	a01cc00c ae3f0000 010000c1 0000c0df     ......?.........
   1dd88:	708feb03 00db0018 3ff0657f ea8f0040     ...p.....e.?@...
   1dd98:	0000f703 f90b70cf 40bfcf66 30eadf08     .....p..f..@...0
   1dda8:	000000a5 f5000000 72e4e4f5 f205da00     ...........r....
   1ddb8:	700fc00b 205f403f 007f106f 205f106f     ...p?@_ o...o._ 
   1ddc8:	700f403f f205c00b 303fda00 f106b00c     ?@.p......?0....
   1ddd8:	e900f601 ad00bc00 ad00ae00 e900bc00     ................
   1dde8:	f106f601 303fb00c 06004a00 2ba0a474     ......?0.J..t..+
   1ddf8:	7f00e5ff 6b7b20fb a004008d 00130000     ..... {k........
   1de08:	10050000 500f0000 500f0000 511f0100     .......P...P...Q
   1de18:	ffffef10 744f34f3 500f0040 500f0000     .....4Ot@..P...P
   1de28:	fd520900 0fc5a00b 10110100 04f3ff1f     ..R.............
   1de38:	12034044 00901efc 00f10500 00b00a00     D@..............
   1de48:	00600f00 00105f00 0000ab00 0000f600     ..`.._..........
   1de58:	0000f105 0000b00a 0000600f 0000104f     .........`..O...
   1de68:	000000ac 040000f6 0a0000f1 0e0000c0     ................
   1de78:	4f000060 00000010 00c5ef08 cfa8cf00     `..O............
   1de88:	00f50770 c00df20a 1ff80100 dc000080     p...............
   1de98:	0000603f 00603fbd 801fbd00 0ddc0000     ?`...?`.........
   1dea8:	f80100c0 0a00f507 a8cf00f2 080070cf     .............p..
   1deb8:	ef00c5ef f37a36ff 05305f00 305f00f3     .....6z.._0..._0
   1dec8:	5f00f305 00f30530 f305305f 05305f00     ..._0..._0..._0.
   1ded8:	fdbe04f3 98fd0770 002890cf 0000bf00     ....p.....(.....
   1dee8:	00f20700 00af0000 804f0000 c03f0000     ..........O...?.
   1def8:	c13e0000 c12e0000 d12e0000 f82e0000     ..>.............
   1df08:	ff467777 6ffaffff 02ffffff b09f7777     wwF....o....ww..
   1df18:	e10c0000 f3090000 f6050000 df000000     ................
   1df28:	040010e9 0000fd59 00f40600 643f0000     ....Y.........?d
   1df38:	f3080040 fb8cc9bf d7ff7c00 01000000     @........|......
   1df48:	000000eb 0010be00 506f0000 2f000000     ..........oP.../
   1df58:	00000090 0000d00c 01f30800 f80300d5     ................
   1df68:	00602f00 f72322ed ffff6f21 5581ffff     ./`.."#.!o.....U
   1df78:	52f95655 2f000000 00000060 0500f602     UV.R.../`.......
   1df88:	00ffffff 7077777f 0000e008 0000ad00     .....wwp........
   1df98:	10c20b00 ffdf0000 550430fb 0020ff68     .........0.Uh. .
   1dfa8:	00f80400 920f0000 f6050050 fd8ad98f     ........P.......
   1dfb8:	e9ef5b10 ce050010 9f0060fc 05708bc8     .[.......`....p.
   1dfc8:	000000f8 0000d00c 00801f00 682f0000     ............../h
   1dfd8:	3f10faef d08f64ee 0600f12f 00c00ef4     ...?.d../.......
   1dfe8:	f109f602 01f30600 b09f86de d8ef1900     ................
   1dff8:	ffff8f00 77f7e8ff 008ffc77 90554f00     .......ww....OU.
   1e008:	00e00b00 00f80200 109f0000 b00f0000     ................
   1e018:	f4060000 dd000000 3f000000 0a000070     ...........?p...
   1e028:	010000f1 000000f9 00d7ff5c af76fc06     ........\.....v.
   1e038:	00d00ca0 c00df109 07f20700 c05e11f7     ..............^.
   1e048:	feffbf00 54f90910 802fd07e 4ff60400     .......T~./....O
   1e058:	f8000050 0500a01f 76fb09f6 6c00d0af     P..........v...l
   1e068:	0010d8ff 0080fd8e fc68f80c 00505f00     ..........h.._P.
   1e078:	008f703f 7fc00e00 f01f0030 cf13d41f     ?p......0.......
   1e088:	ffef04f1 0200f0a9 00f00a31 a00e0000     ........1.......
   1e098:	9f000000 8da70930 df0700f7 1e0040eb     ....0........@..
   1e0a8:	1003fc92 00000000 1efc1203 fc921e90     ................
   1e0b8:	00001003 01000000 a8d01fe9 00a0300e     .............0..
   1e0c8:	00420000 03f37d01 bf10e89f ee0000b5     ..B..}..........
   1e0d8:	17000081 0000b4df 00d2af04 ef820100     ................
   1e0e8:	45f3ffff 00515555 01000000 ef101111     ...EUUQ.........
   1e0f8:	34f3ffff 50404444 ef000000 06000092     ...4DD@P........
   1e108:	0000b5cf 00e29f03 02f36c00 bf20e99e     .........l.... .
   1e118:	930000c6 04000000 0770fdbe a0bf77fc     ..........p..w..
   1e128:	cf000027 09000000 010000f0 010000ea     '...............
   1e138:	000010dd 000010ce 0000603f 00003001     ........?`...0..
   1e148:	00000100 00f50600 405f0000 17000000     .........._@....
   1e158:	00b5fdce fb050000 c27d2353 406e0000     ........S#}...n@
   1e168:	8e000000 01f40210 493ffaae 1e900ab0     ..........?I....
   1e178:	40ef5be6 8f300fe3 40af0010 d9001f98     .[.@..0....@....
   1e188:	403f0000 e8003f6a 401f0000 d9001f5c     ..?@j?.....@\...
   1e198:	403f0000 8f300f6a 40af0010 1e900a98     ..?@j.0....@....
   1e1a8:	a6de5ad6 01f303f2 ee16faaf 406e0050     .Z..........P.n@
   1e1b8:	00000000 fb060000 00752353 17000000     ........S#u.....
   1e1c8:	00a3fdce 02000000 000000fd f49f0000     ................
   1e1d8:	00000000 00b09e0f f2060000 0000207f     ............. ..
   1e1e8:	f801dc00 4f000000 00e00b60 00f00b00     .......O`.......
   1e1f8:	0100604f ed1111fa ff8f0000 00f3ffff     O`..............
   1e208:	4444c40e f406a04f af000000 0000cd10     ..DDO...........
   1e218:	5ff80200 40ebffff 5755f805 405f40df     ..._...@..UW.@_@
   1e228:	05fa0100 0f0000f4 11515fa0 ff05f43a     ........._Q.:...
   1e238:	00faffff 5944745f 00f405fa 5ff20800     ...._tDY......._
   1e248:	5f000040 0000f445 855ff209 05fb6a55     @.._E....._.Uj..
   1e258:	d7ffffff 8d020000 0400b4fe f99db8ff     ................
   1e268:	0020fd02 20bf5008 0f000000 000000a0     .. ..P. ........
   1e278:	0000f602 602f0000 00000000 000000fa     ....../`........
   1e288:	00f20b00 2f000000 850000d2 89fb5f00     ......./....._..
   1e298:	290080df 5f40ebdf 30eaffff 77975f00     ...)..@_...0._.w
   1e2a8:	5f00f89e af000040 00405f60 5fe00d00     ..._@...`_@...._
   1e2b8:	06000040 00405ff4 5ff60300 03000040     @...._@...._@...
   1e2c8:	00405ff6 5ff40600 0d000040 00405fe0     ._@...._@...._@.
   1e2d8:	5f60af00 f89e7797 ffff5f00 5f0030ea     ..`_.w..._...0._
   1e2e8:	95ffffff 747777f9 0000405f 0000f405     .....wwt_@......
   1e2f8:	11515f00 ffff0511 745fe0ff f4054444     ._Q......._tDD..
   1e308:	5f000000 05000040 000000f4 7777975f     ..._@......._.ww
   1e318:	ffffff65 ffff5ffd 77f995ff 405f7477     e...._.....wwt_@
   1e328:	f4050000 5f000000 05000040 102222f5     ......._@...."".
   1e338:	feffff5f 5555f805 00405f40 00f40500     _.....UU@_@.....
   1e348:	405f0000 f4050000 00000000 b5fe8d01     .._@............
   1e358:	fb4f0000 02b0df89 060020fd 00f20b60     ..O...... ..`...
   1e368:	0f000000 000000a0 00602f00 2f000000     ........./`..../
   1e378:	09000060 00a00ff0 0bf00900 090000f2     `...............
   1e388:	20fd02f0 00f00a00 df89fb4f 8d0200c0     ... ....O.......
   1e398:	5f00c6fe 4f000040 0000f455 405ff504     ..._@..OU....._@
   1e3a8:	554f0000 040000f4 22525ff5 ff555f22     ..OU....._R""_U.
   1e3b8:	f5ffffff 5555855f 00f4558f 5ff50400     ...._.UU.U....._
   1e3c8:	4f000040 0000f455 405ff504 554f0000     @..OU....._@..OU
   1e3d8:	040000f4 f4455ff5 5ff4455f 455ff445     ....._E._E._E._E
   1e3e8:	f4455ff4 00f4455f 00faffff 00fa7777     ._E._E......ww..
   1e3f8:	00fa0000 00fa0000 00fa0000 00fa0000     ................
   1e408:	00fa0000 00fa0000 07f90000 0df60320     ............ ...
   1e418:	01f18ee9 5f30fbae eb020040 0100f405     ......0_@.......
   1e428:	405f00ec 0510de01 20ce00f4 bf405f00     .._@....... ._@.
   1e438:	f4050030 0000909f 40efcf5f 91ff0500     0......._..@....
   1e448:	5f0010ee 00fc03a0 0600f405 405f00f8     ..._.........._@
   1e458:	05f50900 0c0000f4 00405ff2 00f40500     ........._@.....
   1e468:	405f0000 f4050000 5f000000 05000040     .._@......._@...
   1e478:	000000f4 0000405f 0000f405 00405f00     ...._@......._@.
   1e488:	00f40500 975f0000 ff257777 5ff5ffff     ......_.ww%...._
   1e498:	00000040 00fc951e f9080000 0000f55f     @..........._...
   1e4a8:	fd95ff02 ae0000e0 705f5ff9 955f3f00     .........__p.?_.
   1e4b8:	0b108ff3 315ff9c0 0ff304e9 f207f395     ......_1........
   1e4c8:	5ff900db 20ef0d30 00f3950f f900905f     ..._0.. ...._...
   1e4d8:	7100305f f3950f00 00000000 00505ff9     _0.q........._P.
   1e4e8:	ff554f00 f5040020 0000fd5f f9fa554f     .OU. ..._...OU..
   1e4f8:	5ff50400 4f00f54a f20df455 405ff504     ..._J..OU....._@
   1e508:	554fd02f 946f00f4 00405ff5 f455afaf     /.OU..o.._@...U.
   1e518:	f5df0000 0200405f 00f455ff 00f50600     ...._@...U......
   1e528:	b5fe8d01 ff040000 00fa9eb8 0020fd02     .............. .
   1e538:	bf00f908 0a000020 00a00ff2 723f0000     .... .........?r
   1e548:	000000f6 602ff900 0f000000 0000fa90     ....../`........
   1e558:	0bf70300 000000f2 d22f20af 908f0000     ......... /.....
   1e568:	89fb4f00 0000a0ef 50ebdf28 ffff5f00     .O......(..P._..
   1e578:	975f00d7 5fc0bf78 f6070040 0000405f     .._.x.._@..._@..
   1e588:	00405ffa 405ffa00 5ff80300 f16e2362     ._@..._@..._b#n.
   1e598:	fdffff5f 54855f30 405f0020 5f000000     _...0_.T ._@..._
   1e5a8:	00000040 0000405f 8d010000 0000b5fe     @..._@..........
   1e5b8:	89fb4e00 0200a0ef 080020fd f20a00f9     .N....... ......
   1e5c8:	af000000 00a00f20 703f0000 0000602f     .... .....?p/`..
   1e5d8:	2f900f00 00000060 901f900f 2f000000     .../`........../
   1e5e8:	00f10b70 20af0000 0010fc03 0000f907     p...... ........
   1e5f8:	df78fa6f 030000b0 00c5ffae 00000000     o.x.............
   1e608:	b015d43e 02000000 0080ffbf 01000000     >...............
   1e618:	ff5f0031 5f00d7ff c0bf7897 0700405f     1._...._.x.._@..
   1e628:	00405ff6 405ffa00 5ffa0000 f8030040     ._@..._@..._@...
   1e638:	6e23525f ffff5fe1 855f30fc 5f00f955     _R#n._...0_.U.._
   1e648:	407f0040 0c00405f 00405fe0 5c00f902     @..@_@..._@....\
   1e658:	0720d9ef 90af87fc 0100c00e 00800f10     .. .............
   1e668:	f50d0000 03000000 0050eaef feae0500     ..........P.....
   1e678:	00000040 0000f14e 08f30500 f2080000     @...N...........
   1e688:	bf77fa2f ff9d02a0 ffff00c7 67f5ffff     /.w............g
   1e698:	7277fb78 00f70100 f7010000 01000000     x.wr............
   1e6a8:	000000f7 0000f701 00f70100 f7010000     ................
   1e6b8:	01000000 000000f7 0000f701 00f70100     ................
   1e6c8:	f7010000 306f0000 168f0000 080000f3     ......o0........
   1e6d8:	00306ff1 f3168f00 f1080000 0000306f     .o0.........o0..
   1e6e8:	00f3168f 6ff10800 8f000030 0000f405     .......o0.......
   1e6f8:	703ff009 00cd0000 5f0020de a8ff0480     ..?p..... ._....
   1e708:	0300d0bf 0081fdbe 0000e00c 6f306f00     .............o0o
   1e718:	0c000050 00fb00c0 00f60300 0000f209     P...............
   1e728:	2f0000ae 901f0080 00ce0000 0000f207     .../............
   1e738:	db00f605 0e000000 00504fc0 3b8f0000     .........OP....;
   1e748:	000000e0 00f8fb02 0b000000 000010ff     ................
   1e758:	b04f0000 405f0000 00df0000 0ff50200     ..O..._@........
   1e768:	ff020090 f0070040 0700e00b 0c0090fe     ....@...........
   1e778:	00f306b0 00e0aa0c f801601f f3541f00     .........`....T.
   1e788:	00106f00 107f00cd 00cc00f8 cb207f00     .o............ .
   1e798:	f701ad00 712f0000 265f00f6 0d0000f2     ....../q.._&....
   1e7a8:	0f00f1c6 0000d07b 00c0fd08 0080df0b     ....{...........
   1e7b8:	70ff0300 30ff0600 ef000000 fe010020     ...p...0.... ...
   1e7c8:	903f0000 00cd0000 7f00408f 10de0030     ..?......@..0...
   1e7d8:	0300802f 00d00cfa f3fb0700 0c000000     /...............
   1e7e8:	000000f8 00c0ef01 7fbf0000 6f000070     ............p..o
   1e7f8:	0020af60 ed01b02f 00f10c00 f607f804     `. ./...........
   1e808:	f3090000 0000e00c f703f207 901f0000     ................
   1e818:	0010af00 1f00109e 00f602a0 0bf30800     ................
   1e828:	000000d0 00404fec fb5f0000 00000000     .....O@..._.....
   1e838:	0000f20c f0090000 00000000 0000f009     ................
   1e848:	f0090000 00000000 0000f009 ffffff3f     ............?...
   1e858:	777701fd 0090bf77 c01e0000 0c000000     ..www...........
   1e868:	000000f2 0000f508 00f90400 ec010000     ................
   1e878:	00000000 000020cf 00508f00 904f0000     ..... ....P...O.
   1e888:	1e000000 777777f8 ffffff05 ff5ff0ff     .....www......_.
   1e898:	5f50f705 00f30530 f305305f 05305f00     ..P_0..._0..._0.
   1e8a8:	305f00f3 5f00f305 00f30530 f705305f     .._0..._0..._0..
   1e8b8:	00ff5f50 0000007e 0000401f 0000900c     P_..~....@......
   1e8c8:	0000e007 0000f402 0000c900 00007e00     .............~..
   1e8d8:	00402f00 00900c00 00e00700 00f30200     ./@.............
   1e8e8:	00d90000 007e0000 302f0000 900d0000     ......~.../0....
   1e8f8:	e0070000 ea35fabf ea00ea00 ea00ea00     ......5.........
   1e908:	ea00ea00 ea00ea00 ea00ea00 ea35ea00     ..............5.
   1e918:	2f00fabf 9d000080 f30000e0 d00600d5     .../............
   1e928:	600c007b 103f201f 009a800b ffffe004     {..`. ?.........
   1e938:	1111ffff f6071111 01e70300 0080fd9e     ................
   1e948:	90af87ce af000002 06000000 ffbe02f2     ................
   1e958:	42ec20ff 502ff227 ec207f00 02f27f42     . .B'./P.. .B...
   1e968:	206ffbbf 0000008f 00008f00 008f0000     ..o ............
   1e978:	8f000000 00b3fe2b ef78ec8f 00a08f30     ....+.....x.0...
   1e988:	208fc01e 8ff10700 f3050000 0700208f     ... ......... ..
   1e998:	00a08ff1 ec8fd01e 8e30ef78 00b3fe2b     ........x.0.+...
   1e9a8:	c4ef3a00 7cd84f00 00d00df4 00f61307     .:...O.|........
   1e9b8:	304f0000 f6030000 0d000000 100600d0     ..O0............
   1e9c8:	f47cd74f c4ef3a00 00000000 0000f701     O.|..:..........
   1e9d8:	00f70100 f7010000 a3ff3b00 87fd04f7     .........;......
   1e9e8:	d00ef7ce 3ff70b00 f7030060 0100304f     .......?`...O0..
   1e9f8:	00503ff7 c00ef703 04f70a00 f7be65fc     .?P..........e..
   1ea08:	b2ff3b00 fe3b00f7 fc0400a2 0e20ee67     .;....;.....g. .
   1ea18:	a01e00c0 0700503f ffff4ff0 723ff1ff     ....?P...O....?r
   1ea28:	0e202222 000200c0 af87fd04 ef3a0050     "" .........P.:.
   1ea38:	5d0000d6 b52f00fc 00f30470 a0ffff0c     ...]../.p.......
   1ea48:	0053f748 0500305f 5f0000f3 f3050030     H.S._0....._0...
   1ea58:	305f0000 00f30500 00305f00 b2ff3b00     .._0....._0..;..
   1ea68:	87fe04e9 d10ef9cf 3ff90a00 f9010060     ...........?`...
   1ea78:	0000404f 00603ff9 d00ef901 04f90900     O@...?`.........
   1ea88:	f8cf87fd b3ff3b00 000000f7 e909f405     .....;..........
   1ea98:	01b0af77 00d8ff7c 0000008f 0000f008     w...|...........
   1eaa8:	00008f00 bff20800 fb8f10ea f808fd89     ................
   1eab8:	8ff40600 781f0010 f80000f0 0f00008f     .......x........
   1eac8:	0000f088 00008ff8 00f0880f 1a9ef800     ................
   1ead8:	f00800f2 8ff0088f 088ff008 f0088ff0     ................
   1eae8:	00e20700 0000f309 f1070000 00f10700     ................
   1eaf8:	0700f107 f10700f1 00f10700 0700f107     ................
   1eb08:	f10700f1 18f00800 fc3ec06e 00008f20     ........n.>. ...
   1eb18:	00f00800 008f0000 f0080000 8fd11d00     ................
   1eb28:	08e21d00 00e21df0 00f32d8f 70fffe08     .........-.....p
   1eb38:	bfe28f00 01f20830 008f10ee f008fb03     ....0...........
   1eb48:	8ff70700 8f8f8f8f 8f8f8f8f 8e8f8f8f     ................
   1eb58:	3b91fe3c ff08a2fe c6cf9f96 708fd08f     <..;...........p
   1eb68:	00c09f00 00f1585f 0100f605 00008ff7     ...._X..........
   1eb78:	0f00404f 0400f088 f80000f4 4f00008f     O@.............O
   1eb88:	880f0040 f40400f0 8ff80000 404f0000     @.............O@
   1eb98:	8e800f00 08a1fe3b d08fa6ff 6f00808f     ....;..........o
   1eba8:	0100f148 00008ff7 00f0880f 008ff800     H...............
   1ebb8:	f0880f00 8ff80000 800f0000 c4ef3b00     .............;..
   1ebc8:	87fd0400 d00e60cf 3ff10b00 f5030060     .....`.....?`...
   1ebd8:	0100304f 00603ff7 d00ef503 04f10b00     O0...?`.........
   1ebe8:	60cf77fd c4ef3b00 fe3b8e00 fb8f00b3     .w.`.;....;.....
   1ebf8:	8f30df57 c00d0090 0700108f 00008ff1     W.0.............
   1ec08:	208ff305 8ff10700 d01e00a0 ef78ec8f     ... ..........x.
   1ec18:	fe2b8f30 008f00b3 8f000000 00000000     0.+.............
   1ec28:	0000008f ff3b0000 fd04f7a2 0ef7de87     ......;.........
   1ec38:	f70b00d0 0300603f 00304ff7 603ff701     ....?`...O0...?`
   1ec48:	0ef70300 f70b00d0 ce77fd04 ff3b00f7     ..........w...;.
   1ec58:	0000f7a3 00f70100 f7010000 01000000     ................
   1ec68:	f02b8ef7 8f90ed8f 208f00a0 00008f00     ..+........ ....
   1ec78:	8f00008f 008f0000 00008f00 91fdae02     ................
   1ec88:	d069d71e 0000304f 0010b42f 60fdef06     ..i.O0../......`
   1ec98:	f55b0100 f7000001 f36ba75f 40ecdf19     ..[....._.k....@
   1eca8:	0000f305 cf00305f 8f04faff f3053075     ...._0......u0..
   1ecb8:	305f0000 00f30500 00305f00 0000f404     .._0....._0.....
   1ecc8:	0080c61f ae10fc5d 5a2f0000 f50200e0     ....]...../Z....
   1ecd8:	2f0000ae 0200e05a 0000aef5 00f0592f     .../Z......./Y..
   1ece8:	306ff504 ee51af00 02f5bf76 503ffbbe     ..o0..Q.v.....?P
   1ecf8:	0000c00d 00f206cb f900f502 00e00900     ................
   1ed08:	800f009e 6f602f00 c00c0010 050000cb     ...../`o........
   1ed18:	0000f4f6 00d0ef00 708f0000 0000bb00     ...........p....
   1ed28:	4f00109f 0e00f116 c00900f6 fc05600f     ...O.........`..
   1ed38:	00f600b0 5fab00ac 05105f10 f7500ff1     ......._._....P.
   1ed48:	0f00b00a c009f076 ac0000f5 8f4f00ba     ....v.........O.
   1ed58:	ff040000 a0ef0040 e00e0000 00f40800     ....@...........
   1ed68:	00704f00 308f209f cd00505f 0200902e     .Op.. .0_P......
   1ed78:	0000d0ff 0000f60a 00e1fd04 c00deb01     ................
   1ed88:	3f10be00 00406f80 c00d407f 06cb0000     ...?.o@..@......
   1ed98:	f40200f3 0900ea00 108f00d0 1f00701f     .............p..
   1eda8:	00107f70 00d9e00a f2f90300 cf000000     p...............
   1edb8:	000000b0 0000406f 0000ad00 00f5791c     ....o@.......y..
   1edc8:	70ee1a00 ff4f0000 5515f9ff 0000f45b     ...p..O....U[...
   1edd8:	0100804f 0b0000ec 8f0000e1 f7040040     O...........@...
   1ede8:	e51e0000 ff5f5355 2c00fcff 61af00f5     ....US_....,...a
   1edf8:	0000cc00 db0000db 00db0000 1f00ea02     ................
   1ee08:	fa0500f4 00db0000 0000db00 cc0000db     ................
   1ee18:	61af0000 5ff52c00 155ff115 f1155ff1     ...a.,._.._.._..
   1ee28:	5ff1155f 155ff115 f1155ff1 80be105f     _.._.._.._.._...
   1ee38:	0140af03 701f00f6 1f00f701 00f90070     ..@....p....p...
   1ee48:	fb00fb0a 01701f20 701f00f7 af03f601     .... .p....p....
   1ee58:	0090be40 00000000 00e43d00 f5860cb5     @........=......
   1ee68:	03f0201e 000290ef 02001000 400d90ce     . .............@
   1ee78:	0e003b89 0d0e003b ce028940 f8080090     .;..;...@.......
   1ee88:	00f7e7ef 00000000 00000000 00000000     ................
   1ee98:	00dc4900 16000000 00ffffbf ff8d0300     .I..............
   1eea8:	00ffffff ffffcf00 00ffffff ffffff00     ................
   1eeb8:	00ffc7ff eaffff00 00ff0051 0083ff00     ........Q.......
   1eec8:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   1eed8:	00ff0000 0000ff00 00ff0000 0000ff00     ................
   1eee8:	00ffff2b 0000ff00 2bffffdf 0000ffff     +..........+....
   1eef8:	dffdffdf 0000ffff dfb2ff2b 0000fdff     ........+.......
   1ef08:	2b000000 0000b2ff d0000000 ffffff0f     ...+............
   1ef18:	ff0df0ff 8888c8ff f0ffff8c 0000800f     ................
   1ef28:	f00ff008 0000800f ff0ff008 000080ff     ................
   1ef38:	f0ffff08 ccccec0f f00ff0ce ccccec0f     ................
   1ef48:	ff0ff0ce 000080ff f0ffff08 0000800f     ................
   1ef58:	f00ff008 0000800f ff0ff008 8888c8ff     ................
   1ef68:	d0ffff8c ffffff0f df0df0ff ffff73ff     .............s..
   1ef78:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   1ef88:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   1ef98:	df000000 ffff73ff fffdffff ffffa5ff     .....s..........
   1efa8:	ffffffff ffffa5ff dfffffff ffff73ff     .............s..
   1efb8:	00fdffff 00000000 df000000 ffff73ff     .............s..
   1efc8:	fffdffff ffffa5ff ffffffff ffffa5ff     ................
   1efd8:	dfffffff ffff73ff 00fdffff 00000000     .....s..........
   1efe8:	00b10a00 00000000 00fcbf00 00000000     ................
   1eff8:	00fbff0b 00000000 1bc0ffbf 0b0000a0     ................
   1f008:	cf00fcff bf0000fb bf00c0ff ff0bb0ff     ................
   1f018:	0c0000fc ffbffbff 000000c0 fbffffcf     ................
   1f028:	00000000 b0ffff0c 00000000 00fbbf00     ................
   1f038:	00000000 00b00b00 03000000 03000000     ................
   1f048:	0010fc08 fcfff81c f5ff1c10 ff2cfcff     ..............,.
   1f058:	ffff05f5 0500f5ff 00f5ffff fdff1d00     ................
   1f068:	ff1c0010 1c10fcff fcfff9ff 05f5ff1c     ................
   1f078:	f5dffcff d1ff0500 040000a4 000000a1     ................
   1f088:	0000e04f 10020000 1003f16f d05f0000     O.......o....._.
   1f098:	d13ff16f f1ff0300 fd5ff16f 40ff0d00     o.?.....o._....@
   1f0a8:	ff09f16f 00f74f70 cf00f16f 00f09fe0     o...pO..o.......
   1f0b8:	5f00f16f 00c0bff3 2f00f16f 00c0bff5     o.._....o../....
   1f0c8:	1f00e04f 00e0aff6 4f000000 00f46ff4     O..........O.o..
   1f0d8:	af000000 10fe0ff0 ff050000 d3ff06a0     ................
   1f0e8:	ff7f0000 ff9f0020 f4ffbeda ff060000     .... ...........
   1f0f8:	30fdffff 17000000 0050cabd 00000000     ...0......P.....
   1f108:	0000b88b 00000000 0000ffff 06300000     ..............0.
   1f118:	0360ffff dffd0400 effdffff ffff0d40     ..`.........@...
   1f128:	ffffffff ffff4fd0 ffff9ff9 ffff08f4     .....O..........
   1f138:	ffff0220 f9ff0080 ff9f0000 f9ff0000      ...............
   1f148:	ff9f0000 ffff0800 ffff0220 ffff4f80     ........ ....O..
   1f158:	ffff9ff9 ffff0df4 ffffffff dffe04d0     ................
   1f168:	dffdffff 06300040 0360ffff 00000000     ....@.0...`.....
   1f178:	0000ffff 00000000 0000b88b 00000000     ................
   1f188:	3f30dd03 000000f3 f5ff6f00 0000f44f     ..0?.....o..O...
   1f198:	99ff0900 00f4bfff f6bf0100 f4ff6f22     ............"o..
   1f1a8:	fe2d0000 ef53ff35 ff0400f4 f8ff8fc1     ..-.5.S.........
   1f1b8:	7f40fe2d ffff1afa f7afa1ff ffdf82cf     -.@.............
   1f1c8:	28fdffff ff0e14fc ffffffff 0f0041e0     ...(.........A..
   1f1d8:	ffffffff 0000f0ff 00f9ff0f 00f0ff8f     ................
   1f1e8:	f8ff0f00 f0ff8f00 ff0f0000 ff8f00f8     ................
   1f1f8:	0e0000f0 6f00f6ff 0000e0ff fddf0000     .......o........
   1f208:	00000000 ffff0000 00000000 ffff0000     ................
   1f218:	00000000 ffff0000 00000000 ffff0000     ................
   1f228:	00000000 ffff0000 00000000 ffffff4f     ............O...
   1f238:	0000f4ff ffffff0b 0000b0ff ffffbf00     ................
   1f248:	000000fb ffff0b00 000000b0 fbbf0000     ................
   1f258:	df000000 b11bfcff fffdffcf 2cc2ffff     ...............,
   1f268:	ffffffff ffffffff ffffffff ffffffff     ................
   1f278:	dfffe0f0 ffffffff 00fdffff ffffef04     ................
   1f288:	0040feff ffff1e00 e1ffffff b0af0000     ..@.............
   1f298:	0b000000 ff0500fa 00000010 1e50ff01     ..............P.
   1f2a8:	000000f6 e16f0000 0000b0af 0b000000     ......o.........
   1f2b8:	fffffffa ff080080 ffffffff 1f00f1ff     ................
   1f2c8:	ffffffff ffffffff ffffffff ffffffff     ................
   1f2d8:	ffffffff ffffffff ffffffff ff8fffff     ................
   1f2e8:	ffffffff 00f8ffff dabd0600 00ff0250     ............P...
   1f2f8:	ffffef05 00ff42fe 7ba7ff7f 05fff9ff     .....B.....{....
   1f308:	0000c1ff 0effff2c 020000fc 5fffdf22     ....,.......".._
   1f318:	0f0000f2 8fffffff 0f0000b0 00ffffff     ................
	...
   1f334:	ff000000 00f0ffff fff80b00 00f0ffff     ................
   1f344:	fff42f00 002022fd ffe0cf00 0000c2ff     ./..." .........
   1f354:	ff40ff2c 6ab7ff9f ff00f7ff ffffdf24     ,.@....j....$...
   1f364:	ff0050fe dbac0520 00000060 00000000     .P.. ...`.......
   1f374:	008d0000 00ff0800 dfff8f00 ffffffff     ................
   1f384:	ffffffff ffffffff ffffffff dfffffff     ................
   1f394:	00ffffff 00ff8f00 00ff0800 008d0000     ................
	...
   1f3b0:	0000008d 00ff0800 8f000000 cf0000ff     ................
   1f3c0:	01ffffff ffffff50 fff706ff 00ffffff     ....P...........
   1f3d0:	ffffffbe ffae00ff 05ffffff ffffdff8     ................
   1f3e0:	006002ff 00ff9f00 09000000 000000ff     ..`.............
   1f3f0:	009e0000 00000000 00000000 00000000     ................
   1f400:	00100600 00000000 d21f0000 00000000     ................
   1f410:	0300008d 000010ee 0a00ff08 00b02fb1     ............./..
   1f420:	00ff8f00 f407fc05 ffffffdf 605f5002     .............P_`
   1f430:	fffffff9 0df706ff ffffbdc0 ae00ffff     ................
   1f440:	ff9ff009 00ffffff 8ff009ae ffffffff     ................
   1f450:	c00df706 ffffdfad 5f5002ff 0000e960     ..........P_`...
   1f460:	0500ff8f 00f406fc 00ff0800 b02fb10a     ............../.
   1f470:	8d000000 ee020000 00000010 1f000000     ................
   1f480:	000000d2 00000000 8f001006 ffffffff     ................
   1f490:	fff8ffff fffffffc ffffffff ffff2f20     ............ /..
   1f4a0:	fcffffff ffff0c00 ffffffee feff2f20     ............ /..
   1f4b0:	ffffef22 e2fffffc ffff2e00 20fe4efe     "............N. 
   1f4c0:	ffff0200 00c202e2 ffff0000 00000020     ............ ...
   1f4d0:	ffff0000 00000000 ffff0000 ffffffff     ................
   1f4e0:	8fffffff ffffffff 00f8ffff 00000000     ................
   1f4f0:	010030ff 0040ffcc 40ffff2d ffffef03     .0....@.-..@....
   1f500:	ffff3f40 ffff44ff ff9fffff ffffffff     @?...D..........
   1f510:	ffffffff ffffffff ffffafff ff45ffff     ..............E.
   1f520:	40ffffff ffffff4f ffef0340 2e0040ff     ...@O...@....@..
   1f530:	0030ffff 0000cc01 00000000 00000000     ..0.............
   1f540:	918f0000 00000000 70ffff00 00000000     ...........p....
   1f550:	40fdffff ff000000 10faffff ffff0000     ...@............
   1f560:	00f7ffff ffffff00 00d5ffff ffffffff     ................
   1f570:	ffb2ffff ffffffff fffffdff ffffffff     ................
   1f580:	fffffffd b2ffffff ffffffff ff00d5ff     ................
   1f590:	f7ffffff ffff0000 0010faff fdffff00     ................
   1f5a0:	00000040 0070ffff 8e000000 000000a1     @.....p.........
	...
   1f5c0:	00f8ff8f fff8ff8f ff00ffff ffffffff     ................
   1f5d0:	ffff00ff ffffffff ffffff00 00ffffff     ................
   1f5e0:	ffffffff ff00ffff ffffffff ffff00ff     ................
   1f5f0:	ffffffff ffffff00 00ffffff ffffffff     ................
   1f600:	ff00ffff ffffffff ffff00ff ffffffff     ................
   1f610:	ffffff00 00ffffff 7fffffff 7f00f7ff     ................
   1f620:	ff8ff7ff ffffffff fffffff8 ffffffff     ................
   1f630:	ffffffff ffffffff ffffffff ffffffff     ................
   1f640:	ffffffff ffffffff ffffffff ffffffff     ................
   1f650:	ffffffff ffffffff ffffffff ffffffff     ................
   1f660:	ffffffff ffffffff ffffffff ffffffff     ................
   1f670:	ffffffff ffffffff ffffffff ffff8fff     ................
   1f680:	f8ffffff 00000000 0010cc00 d2ffff03     ................
   1f690:	ffff0400 ff0430fe 04f4ffff ffffffff     .....0..........
   1f6a0:	ffffff54 fffff9ff ffffffff ffffffff     T...............
   1f6b0:	ffffffff fffffff9 ffff44ff ff04f3ff     .........D......
   1f6c0:	0430feff 00d2ffff 10ccff04 00ff0300     ..0.............
   1f6d0:	00000000 2d000000 000000d2 ef010000     .......-........
   1f6e0:	000010fe ff1d0000 0000d1ff ffcf0000     ................
   1f6f0:	0000fcff ffff0b00 00b0ffff ffffaf00     ................
   1f700:	00faffff ffffff09 90ffffff ffffff0f     ................
   1f710:	f0ffffff ffffff08 80ffffff 00000000     ................
   1f720:	00000000 ffffff0c c0ffffff ffffff0f     ................
   1f730:	f0ffffff ffffff0f f0ffffff ffffff0c     ................
   1f740:	c0ffffff 1a000000 01000040 0000f0df     ........@.......
   1f750:	00a0ff1d 00fadf01 a0ff1d00 fadf0100     ................
   1f760:	ff0c0000 0d0000a0 000080ff 00f8df01     ................
   1f770:	ff1d0000 01000080 0000f8df 80ff1d00     ................
   1f780:	df010000 000000f0 a104501b 0f000000     .........P......
   1f790:	000010fd 00d1ff0a fdaf0000 0a000010     ................
   1f7a0:	0000d1ff 10fdaf00 ff0a0000 080000c0     ................
   1f7b0:	0000d0ff 0010fd8f 00d1ff08 10fd8f00     ................
   1f7c0:	d1ff0800 fd0f0000 05000010 000000b1     ................
   1f7d0:	ff040000 00000040 80ff0800 00000000     ....@...........
   1f7e0:	0080ff08 08000000 000080ff ff080000     ................
   1f7f0:	48000080 c8ff8c88 ffff8488 ffffffff     ...H............
   1f800:	ffffffff ffffffff ff8c8848 008488c8     ........H.......
   1f810:	80ff0800 00000000 0080ff08 08000000     ................
   1f820:	000080ff ff080000 00000080 40ff0400     ...............@
   1f830:	44140000 44444444 ffffef41 feffffff     ...DDDDDA.......
   1f840:	ffffffff 7bffffff bbbbbbbb 0000b7bb     .......{........
   1f850:	daffad05 00000050 88fcdf04 0040fdcf     ....P.........@.
   1f860:	40fe7f00 f7ef0400 f4ff0700 4f809e00     ...@...........O
   1f870:	ff4f70ff f8af00c0 dff4ff0c ff9a80ff     .pO.............
   1f880:	fdff08fe ef80ffdf ff08feff c0ff4ffd     .............O..
   1f890:	0cf8ff8f ff07f4ff 80ee08f4 0070ff4f     ............O.p.
   1f8a0:	0040fe7f 00f8ef04 fcdf0400 40fdcf88     ..@............@
   1f8b0:	05000000 50daffad 208c0000 00000000     .......P... ....
   1f8c0:	00000000 0000e4df 00000000 ff1b0000     ................
   1f8d0:	fddf4980 000000a5 ffff7f00 d4ff8cd8     .I..............
   1f8e0:	04000000 0000f8ef 0070ff4e ff1c0000     ........N.p.....
   1f8f0:	ff04e869 e30400f7 fffe9f00 40ffcf80     i..............@
   1f900:	0570ff0d 8fe0ffff ff0dd0ff ff2d00f7     ..p...........-.
   1f910:	d0ff8fe0 00fcff04 cff8af00 7f0030ff     .............0..
   1f920:	060040ff 00f7ffff f4ff0800 ff3e0000     .@............>.
   1f930:	000000a0 82c8ff4d 00f7bf01 5a000000     ....M..........Z
   1f940:	0810fcdf 0000a0ff 00000000 fd4e0000     ..............N.
	...
   1f958:	0000c802 d22d0000 00000000 00000000     ......-.........
   1f968:	0000fbbf 00000000 ffff0500 00000050     ............P...
   1f978:	0d000000 00d0ffff 00000000 ffff7f00     ................
   1f988:	000000f7 ff010000 10ff8dd8 00000000     ................
   1f998:	0aa0ff0a 0000a0ff ff3f0000 f3ff0bb0     ..........?.....
   1f9a8:	00000000 0cc0ffcf 0000fcff ffff0500     ................
   1f9b8:	ffff0dd0 0e000050 9ff9ffff 00e0ffff     ....P...........
   1f9c8:	ffff8f00 ffff2ee2 ff0200f8 0990ffff     ................
   1f9d8:	10ffffff ffffff0a ffff3ee3 ff0fa0ff     .........>......
   1f9e8:	ffffffff f0ffffff ffffff08 ffffffff     ................
   1f9f8:	000080ff 00000000 00000000 00000000     ................
   1fa08:	000000d8 00000000 ffff80ff ff070070     ............p...
   1fa18:	fffff8ff ff6f00f6 8e78fdff e8ff15ff     ......o...x.....
   1fa28:	0200e2ff 20fe4fe5 000020fe 00f3ff13     .....O. . ......
   1fa38:	00000052 0031ff3f 02000052 205ef4ef     R...?.1.R.....^ 
   1fa48:	8e7820fe e8ff51ff ffffe2ff ff6f00f6     . x..Q........o.
   1fa58:	fffffdff ff070070 0000f8ff 00000000     ....p...........
   1fa68:	000080ff 00000000 000000d8 00000000     ................
	...
   1fa80:	01000000 000010dd ff1d0000 000000d1     ................
   1fa90:	fdffdf01 1d000010 d1ff99ff f9df0100     ................
   1faa0:	10fd9f00 0090ff1d bfd1ff09 000000f9     ................
   1fab0:	905ffb9f 09000000 000000f5 00000000     .._.............
   1fac0:	00000000 5f000000 00000090 f9bff509     ......._........
   1fad0:	9f000000 90ff1dfb d1ff0900 00f9df01     ................
   1fae0:	0010fd9f ff99ff1d 010000d1 10fdffdf     ................
   1faf0:	1d000000 0000d1ff dd010000 00000010     ................
	...
   1fb10:	00d11d00 00000000 df010000 ffef10fd     ................
   1fb20:	00d0ffff d1ffff1d ffffffaf cfcf00f0     ................
   1fb30:	0000fcfc 00f00f00 b6f11f6b 0f000000     ........k.......
   1fb40:	0f0000f0 000000f0 00f00f00 00f00f00     ................
   1fb50:	0f000000 0f0000f0 000000f0 b6f11f6b     ............k...
   1fb60:	00f00f00 cfcf0000 0f00fcfc faffffff     ................
   1fb70:	d1ffff1d ffff0d00 df01feff 000010fd     ................
   1fb80:	00000000 00d11d00 00000000 00000000     ................
   1fb90:	ff8f0000 0000e2ff ffff0000 0020feff     .............. .
   1fba0:	ffff0000 ffffffff fffff8ff ffffffff     ................
   1fbb0:	ffffffff ffffffff ffffffff ffffffff     ................
   1fbc0:	ffffffff ffffffff ffffffff ffffffff     ................
   1fbd0:	ffffffff ffffffff ffffffff ffffffff     ................
   1fbe0:	ffffffff ffffffff ff8fffff ffffffff     ................
   1fbf0:	0000f8ff 00b00b00 00000000 00fbbf00     ................
   1fc00:	00000000 b0ffff0b 00000000 fbffffbf     ................
   1fc10:	0b000000 ffffffff 4f0000b0 ffffffff     ...........O....
   1fc20:	000000f4 00ffff00 00000000 00ffff00     ................
   1fc30:	00000000 00ffff00 00000000 00ffff00     ................
   1fc40:	00000000 00ffff00 ffdf0000 0ffddff0     ................
   1fc50:	fffffdff 9f0000f9 ffffffff ffffffff     ................
   1fc60:	ffffffff f0ffffff ffdfffe0 ffffffff     ................
   1fc70:	0000fdff 00000000 00000000 00000000     ................
   1fc80:	0062ea0a 00000000 f0ffff02 00000000     ..b.............
   1fc90:	ffff9f00 00000000 ffff0f00 000000d0     ................
   1fca0:	ffff0200 000000fb ef030000 000070ff     .............p..
   1fcb0:	04000000 0000f2ff 00000000 0000fbbf     ................
   1fcc0:	00000000 0030ff6f 00000200 0090ff4f     ....o.0.....O...
   1fcd0:	00f38f02 00d0ff6f e4ffff0a 00d1ffbf     ....o...........
   1fce0:	ffffef00 00d1ffff ffff0a00 0090ffff     ................
   1fcf0:	ff6f0000 0030fbff ff020000 000072db     ..o...0......r..
   1fd00:	08000000 000080ee ff086106 2d0080ff     .........a.....-
   1fd10:	33efd0ff ff2e00fe 3ff30ef3 f3ff2ee0     ...3.......?....
   1fd20:	ffff8f00 00f3ff6e ffff8e00 0000f3ff     ....n...........
   1fd30:	ffef0200 000000f3 ffff2e00 08000030     ............0...
   1fd40:	ffffffef ff080030 ffeff6ff 33ef0030     ....0.......0..3
   1fd50:	ffef02fe 3ff30e30 ffef02e0 f8ff8f30     ....0..?....0...
   1fd60:	fddf0200 00e88e00 10660000 ffdf0000     ..........f.....
   1fd70:	00200dff ffffff00 0000e20f 0fffffff     .. .............
   1fd80:	fff0dffd 0020ffff fffff0ff ffffffff     ...... .........
   1fd90:	fffffff0 f0ffffff ffffffff fff0ffff     ................
   1fda0:	ffffffff fffff0ff ffffffff fffffff0     ................
   1fdb0:	f0ffffff ffffffff fff0ffff ffffffff     ................
   1fdc0:	ffdff0ff fffdffff 000000f9 ffff0000     ................
   1fdd0:	00ffffff ffffdf00 0000fdff ffffff8f     ................
   1fde0:	ff00c2ff ffffffff 00ff20fe ff010000     ......... ......
   1fdf0:	0000ffe2 fcff0000 000000ff ffffff00     ................
   1fe00:	00000000 ffffffff ffffffff ffffffff     ................
   1fe10:	ffffffff 11fbffff ffffffbf 1f00f1ff     ................
   1fe20:	ffffffff ff1f00f1 fbffffff ffffbf11     ................
   1fe30:	ffffffff 8fffffff ffffffff df00f8ff     ................
   1fe40:	0000fdff fcffff01 ff030000 0000f7ff     ................
   1fe50:	f2ffff06 ff080000 0000d0ff ffffff0a     ................
   1fe60:	ff0cd0ff a0ffffff ffffff0e ff0d20ff     ............. ..
   1fe70:	00f8ffff ff0a0000 000000e0 0050ff0e     ..............P.
   1fe80:	fc2f0000 00000000 0000f35f a09f0000     ../....._.......
   1fe90:	00000000 000010df 00d70000 04000000     ................
   1fea0:	000040ee 99ffdf00 0000fdff ff99ffff     .@..............
   1feb0:	ff0000ff ffffffff ffff0000 00000090     ................
   1fec0:	0dffff00 200dffff ff0fffff ffe20fff     ....... ........
   1fed0:	ffff0fff fffffd0f 20ffff0f 0fffff00     ........... ....
   1fee0:	ffffffff ff0fffff ffffffff ffff0fff     ................
   1fef0:	ffdfffff ffffff0f 0f0000ff ffffffff     ................
   1ff00:	ff0f0000 00ffffff ffff0d00 0000fdff     ................
   1ff10:	0000cc00 02000000 000030ff ffbf0100     .........0......
   1ff20:	000020fc ffffff1e 9f0000e1 f8ffffff     . ..............
   1ff30:	ffef0000 00fdffff ffffff00 0100ffff     ................
   1ff40:	ffffffff ff0300ff ffffffff ffff0830     ............0...
   1ff50:	80ffffff ffffff1e cfe1ffff ffffffff     ................
   1ff60:	ffcffcff ffffffff 000000fc 00000000     ................
   1ff70:	ff0e0000 000000e0 40ee0400 ff8f0000     ...........@....
   1ff80:	ffffffff fff8ffff ffffffff ffffffff     ................
   1ff90:	0ff000ff 000ff000 f000ffff 0ff0000f     ................
   1ffa0:	ffffff00 ffffffff ffffffff 888008f8     ................
   1ffb0:	ff8f8008 8008f8ff 8f800888 ffffffff     ................
   1ffc0:	ffffffff 00ffffff 000000f0 ffff000f     ................
   1ffd0:	0000f000 ff000f00 ffffffff ffffffff     ................
   1ffe0:	ffff8fff ffffffff 0000f8ff 00000000     ................
	...
   1fff8:	70af0300 00000000 ffcf0400 000000f0     ...p............
   20008:	ffdf0600 0000a0ff ffef1700 0030ffff     ..............0.
   20018:	ffff1800 00fcffff ffff2a00 f4ffffff     .........*......
   20028:	ffff0800 ffffffff ff0f00d0 ffffffff     ................
   20038:	080060ff ffffffff 0000feff 00000000     .`..............
   20048:	00f7ffff 00000000 f1ffff00 00000000     ................
   20058:	ffff0000 00000080 ff000000 000010ff     ................
   20068:	00000000 0000faff 00000000 00f2ff00     ................
   20078:	00000000 808f0000 00000000 00000000     ................
   20088:	00000000 f0ffffdf ffff00d2 20fef0ff     ............... 
   20098:	f0ffffff ffffe2ff fdfff0ff f2ffffff     ................
   200a8:	ffff0000 ffffffff ffffffff ffffffff     ................
   200b8:	ffffffff ffffffff ffffffff ffffffff     ................
   200c8:	ffffffff ffffffff ffffffff ffffffff     ................
   200d8:	ffffffff ffffffff ffffffff ffdfffff     ................
   200e8:	fdffffff 00000000 00000000 00000000     ................
   200f8:	feef9c04 000040c9 ffef0700 feffffff     .....@..........
   20108:	df040070 8aa8fcff 40fdffcf 00d5ff6f     p..........@o...
   20118:	5d000000 f6cff6ff 00000000 fc6f0000     ...]..........o.
   20128:	5a00301a 00a5fddf 0000a103 ffffff4d     .0.Z........M...
   20138:	0000d4ff feff0500 ffef8aa8 01000050     ............P...
   20148:	000070df 0010fd07 00120000 21000000     .p.............!
   20158:	00000000 e44e0000 00000000 00000000     ......N.........
   20168:	0000feef 00000000 feef0000 00000000     ................
   20178:	00000000 0000e44e ff8f0000 ffffffff     ....N...........
   20188:	80ffffff ffffffff ffffffff 00fff0ff     ................
   20198:	00000000 fd0f0000 ffff0fff ffffffff     ................
   201a8:	0fffff0f ffffffff ff00ffff ffff0fff     ................
   201b8:	ffffffff 0fffff00 ffffffff ff0fffff     ................
   201c8:	000000ff 00000000 fffffd0f ffffffff     ................
   201d8:	f0ffffff ffffff8f ffffffff ff8f80ff     ................
   201e8:	ffffffff 80ffffff ffffffff ffffffff     ................
   201f8:	00fff0ff 00000000 fd0f0000 ffff0fff     ................
   20208:	00f0ffff 0fffff0f ffffffff ff0000f0     ................
   20218:	ffff0fff 00f0ffff 0fffff00 ffffffff     ................
   20228:	ff0f00f0 000000ff 00000000 fffffd0f     ................
   20238:	ffffffff f0ffffff ffffff8f ffffffff     ................
   20248:	ff8f80ff ffffffff 80ffffff ffffffff     ................
   20258:	ffffffff 00fff0ff 00000000 fd0f0000     ................
   20268:	ffff0fff 000000ff 0fffff0f 00ffffff     ................
   20278:	ff000000 ffff0fff 000000ff 0fffff00     ................
   20288:	00ffffff ff0f0000 000000ff 00000000     ................
   20298:	fffffd0f ffffffff f0ffffff ffffff8f     ................
   202a8:	ffffffff ff8f80ff ffffffff 80ffffff     ................
   202b8:	ffffffff ffffffff 00fff0ff 00000000     ................
   202c8:	fd0f0000 f0ff0fff 00000000 0fffff0f     ................
   202d8:	0000f0ff ff000000 f0ff0fff 00000000     ................
   202e8:	0fffff00 0000f0ff ff0f0000 000000ff     ................
   202f8:	00000000 fffffd0f ffffffff f0ffffff     ................
   20308:	ffffff8f ffffffff ff8f80ff ffffffff     ................
   20318:	80ffffff ffffffff ffffffff 00fff0ff     ................
   20328:	00000000 fd0f0000 000000ff 00000000     ................
   20338:	00ffff0f 00000000 ff000000 000000ff     ................
   20348:	00000000 00ffff00 00000000 ff0f0000     ................
   20358:	000000ff 00000000 fffffd0f ffffffff     ................
   20368:	f0ffffff ffffff8f ffffffff 000080ff     ................
   20378:	01000000 00000000 00000000 10fd0700     ................
   20388:	00000000 cf010000 0000f5ff 00000000     ................
   20398:	fe29b900 00000010 3f000000 00000210     ..)........?....
   203a8:	df030000 00900a80 70030000 77ffdf00     ...........p...w
   203b8:	555555f7 0fd38f55 dfccfdff cdccccdc     .UUUU...........
   203c8:	fe8fb0ff 00aa0010 404d0000 00104600     ..........M@.F..
   203d8:	3302f201 00000010 09000000 00f9cfb1     ...3............
   203e8:	00000000 ff0a0000 000090ff 00000000     ................
   203f8:	f9bf0000 00000000 00000000 00002201     ............."..
   20408:	df180000 020092fd ffeffbef faff0d30     ............0...
   20418:	4fe0ff2e ff03faff fafa9ff5 cffa4f35     ...O........5O..
   20428:	0b3d8ac0 03fbeffd fffe8f12 ff06b0ff     ..=.............
   20438:	d1ffffff efffff08 9f1011fd 59d1dfff     ...............Y
   20448:	affd0b3b 1d38fad7 faff5ffb 0df7df01     ;.....8.._......
   20458:	ff1dfaff fcef03f1 0050ffdf a3fedf18     ..........P.....
   20468:	7f000000 0000f7ff ffffffef effeffff     ................
   20478:	ffffffff 0000feff 00000000 ffff0f00     ................
   20488:	f0ffffff ffffff0f 0ff0ffff f9999ff9     ................
   20498:	f80ff09f 8ff8888f 8ff80ff0 f08ff888     ................
   204a8:	888ff80f 0ff08ff8 f8888ff8 f80ff08f     ................
   204b8:	8ff8888f 8ff80ff0 f08ff888 999ff90f     ................
   204c8:	0ff09ff9 ffffffff ff08f0ff ffffffff     ................
   204d8:	00000080 7f000000 000000a0 8f000000     ................
   204e8:	0000b0ff 0d000000 00a0ffff 8a000000     ................
   204f8:	00ffff1d 8f000000 70ff1dfa 8f000000     ...........p....
   20508:	801dfaff 8f000000 00faffff 8f000000     ................
   20518:	80ffffff 8f000000 80ffffff 8f000000     ................
   20528:	80ffffff 8f000000 80ffffff 6f000000     ...............o
   20538:	80ffffff 0b000000 80ffffff 00000000     ................
   20548:	80ffffdf 00000000 80ffff0e 00000000     ................
   20558:	60dbde00 00000000 00000000 00000000     ...`............
   20568:	00000000 ffffff1b e4ffffff ffdf0100     ................
   20578:	ffffffff 1d00feff effaffff ffffaffe     ................
   20588:	ffffdf01 0ae22ea0 ff1dffff 02e2ffff     ................
   20598:	ffff2e20 ffffffcf ef0220fe ffcfffff      ........ ......
   205a8:	20feffff ffffef02 ffffff1d 2e2002e2     ... .......... .
   205b8:	df01ffff 2ea0ffff ffff0ae2 ffff1d00     ................
   205c8:	affeeffa 0100ffff ffffffdf feffffff     ................
   205d8:	ff1b0000 ffffffff 0800e4ff e4ffffff     ................
   205e8:	ffff8f00 f808feff ff400b0f 0b0ff88f     ..........@.....
   205f8:	f8ffff40 ff400b0f ffffffff ffffffff     @.....@.........
   20608:	ffffffff ffffffff ffffffff ffffffff     ................
   20618:	ffffffff ffffffff ffffffff ffffffff     ................
   20628:	ffffffff ffffffff ffffffff ffefffff     ................
   20638:	feffffff ffffff4e 0000e4ff 00000000     ....N...........
   20648:	00000100 00000000 00e00300 00001000     ................
   20658:	10ef0200 0000bf00 f17f0000 00f1cf00     ................
   20668:	ff070000 77ffcf11 bf777777 ffffcff1     .......wwww.....
   20678:	ffffffff ffff17ff ffffffff ff07e0ff     ................
   20688:	000000f1 06000000 000010ff 00000000     ................
   20698:	0000a005 00000000                       ........

000206a0 <__func__.9667>:
   206a0:	645f766c 5f707369 5f767264 69676572     lv_disp_drv_regi
   206b0:	72657473 00000000 742f2e2e 64726968     ster....../third
   206c0:	74726170 766c2f79 732f6c67 6c2f6372     party/lvgl/src/l
   206d0:	61685f76 766c2f6c 6c61685f 7369645f     v_hal/lv_hal_dis
   206e0:	00632e70                                p.c.

000206e4 <lv_anim_path_def>:
   206e4:	00011629 00000000                       ).......

000206ec <__func__.9543>:
   206ec:	615f766c 5f6d696e 72617473 00000074     lv_anim_start...
   206fc:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   2070c:	732f6c67 6c2f6372 696d5f76 6c2f6373     gl/src/lv_misc/l
   2071c:	6e615f76 632e6d69 00000000              v_anim.c....

00020728 <__func__.9631>:
   20728:	665f766c 72645f73 65725f76 74736967     lv_fs_drv_regist
   20738:	00007265                                er..

0002073c <__func__.9538>:
   2073c:	665f766c 706f5f73 00006e65              lv_fs_open..

00020748 <__func__.9602>:
   20748:	665f766c 69645f73 706f5f72 00006e65     lv_fs_dir_open..
   20758:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   20768:	732f6c67 6c2f6372 696d5f76 6c2f6373     gl/src/lv_misc/l
   20778:	73665f76 0000632e                       v_fs.c..

00020780 <sin0_90_table>:
   20780:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
   20790:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
   207a0:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
   207b0:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
   207c0:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
   207d0:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
   207e0:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
   207f0:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
   20800:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
   20810:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
   20820:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
   20830:	7ffa7feb 00007fff                       ........

00020838 <__func__.7222>:
   20838:	6d5f766c 615f6d65 636f6c6c 00000000     lv_mem_alloc....

00020848 <__func__.7297>:
   20848:	5f766c5f 5f6d656d 5f667562 656c6572     _lv_mem_buf_rele
   20858:	00657361                                ase.

0002085c <__func__.7240>:
   2085c:	6d5f766c 725f6d65 6c6c6165 0000636f     lv_mem_realloc..

0002086c <__func__.7283>:
   2086c:	5f766c5f 5f6d656d 5f667562 00746567     _lv_mem_buf_get.
   2087c:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   2088c:	732f6c67 6c2f6372 696d5f76 6c2f6373     gl/src/lv_misc/l
   2089c:	656d5f76 00632e6d 6c756f43 74276e64     v_mem.c.Couldn't
   208ac:	6c6c6120 7461636f 656d2065 79726f6d      allocate memory
   208bc:	00000000 6d5f766c 625f6d65 725f6675     ....lv_mem_buf_r
   208cc:	61656c65 203a6573 73692070 746f6e20     elease: p is not
   208dc:	6b206120 6e776f6e 66756220 00726566      a known buffer.
   208ec:	6d5f766c 625f6d65 675f6675 203a7465     lv_mem_buf_get: 
   208fc:	2074754f 6d20666f 726f6d65 63202c79     Out of memory, c
   2090c:	74276e61 6c6c6120 7461636f 20612065     an't allocate a 
   2091c:	2077656e 66756220 20726566 636e6928     new  buffer (inc
   2092c:	73616572 6f792065 4c207275 454d5f56     rease your LV_ME
   2093c:	49535f4d 682f455a 20706165 657a6973     M_SIZE/heap size
   2094c:	00000029 6d5f766c 625f6d65 675f6675     )...lv_mem_buf_g
   2095c:	203a7465 66206f6e 20656572 66667562     et: no free buff
   2096c:	202e7265 72636e49 65736165 5f564c20     er. Increase LV_
   2097c:	57415244 4655425f 58414d5f 4d554e5f     DRAW_BUF_MAX_NUM
   2098c:	0000002e                                ....

00020990 <__func__.9561>:
   20990:	745f766c 5f6b7361 61657263 625f6574     lv_task_create_b
   209a0:	63697361 00000000                       asic....

000209a8 <__func__.9574>:
   209a8:	745f766c 5f6b7361 61657263 00006574     lv_task_create..
   209b8:	742f2e2e 64726968 74726170 766c2f79     ../thirdparty/lv
   209c8:	732f6c67 6c2f6372 696d5f76 6c2f6373     gl/src/lv_misc/l
   209d8:	61745f76 632e6b73 00000000              v_task.c....

000209e4 <__func__.6088>:
   209e4:	5f766c5f 5f747874 5f746567 657a6973     _lv_txt_get_size
   209f4:	00000000 3b2e2c20 005f2d3a 742f2e2e     .... ,.;:-_.../t
   20a04:	64726968 74726170 766c2f79 732f6c67     hirdparty/lvgl/s
   20a14:	6c2f6372 696d5f76 6c2f6373 78745f76     rc/lv_misc/lv_tx
   20a24:	00632e74 745f766c 675f7478 735f7465     t.c.lv_txt_get_s
   20a34:	3a657a69 746e6920 72656765 65766f20     ize: integer ove
   20a44:	6f6c6672 68772077 20656c69 636c6163     rflow while calc
   20a54:	74616c75 20676e69 74786574 69656820     ulating text hei
   20a64:	00746867 0000ffff 00008410 008c80ef     ght.............

00020a74 <__func__.10208>:
   20a74:	6c5f766c 6c656261 7465735f 746f645f     lv_label_set_dot
   20a84:	706d745f 00000000                       _tmp....

00020a8c <__func__.9902>:
   20a8c:	6c5f766c 6c656261 7465735f 696c615f     lv_label_set_ali
   20a9c:	00006e67                                gn..

00020aa0 <__func__.9923>:
   20aa0:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
   20ab0:	65735f74 74735f6c 00747261              t_sel_start.

00020abc <__func__.9929>:
   20abc:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
   20acc:	65735f74 6e655f6c 00000064              t_sel_end...

00020ad8 <__func__.9934>:
   20ad8:	6c5f766c 6c656261 7465675f 7865745f     lv_label_get_tex
   20ae8:	00000074                                t...

00020aec <__func__.9940>:
   20aec:	6c5f766c 6c656261 7465675f 6e6f6c5f     lv_label_get_lon
   20afc:	6f6d5f67 00006564                       g_mode..

00020b04 <__func__.9946>:
   20b04:	6c5f766c 6c656261 7465675f 696c615f     lv_label_get_ali
   20b14:	00006e67                                gn..

00020b18 <__func__.9953>:
   20b18:	6c5f766c 6c656261 7465675f 6365725f     lv_label_get_rec
   20b28:	726f6c6f 00000000                       olor....

00020b30 <__func__.9959>:
   20b30:	6c5f766c 6c656261 7465675f 696e615f     lv_label_get_ani
   20b40:	70735f6d 00646565                       m_speed.

00020b48 <__func__.9967>:
   20b48:	6c5f766c 6c656261 7465675f 74656c5f     lv_label_get_let
   20b58:	5f726574 00736f70                       ter_pos.

00020b60 <__func__.9996>:
   20b60:	6c5f766c 6c656261 7465675f 74656c5f     lv_label_get_let
   20b70:	5f726574 00006e6f                       ter_on..

00020b78 <__func__.9865>:
   20b78:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
   20b88:	00000074                                t...

00020b8c <__func__.9876>:
   20b8c:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
   20b9c:	6d665f74 00000074                       t_fmt...

00020ba4 <__func__.9888>:
   20ba4:	6c5f766c 6c656261 7465735f 7865745f     lv_label_set_tex
   20bb4:	74735f74 63697461 00000000              t_static....

00020bc0 <__func__.9895>:
   20bc0:	6c5f766c 6c656261 7465735f 6e6f6c5f     lv_label_set_lon
   20bd0:	6f6d5f67 00006564                       g_mode..

00020bd8 <__func__.9909>:
   20bd8:	6c5f766c 6c656261 7465735f 6365725f     lv_label_set_rec
   20be8:	726f6c6f 00000000                       olor....

00020bf0 <__func__.9854>:
   20bf0:	6c5f766c 6c656261 6572635f 00657461     lv_label_create.

00020c00 <__func__.9916>:
   20c00:	6c5f766c 6c656261 7465735f 696e615f     lv_label_set_ani
   20c10:	70735f6d 00646565                       m_speed.

00020c18 <__func__.10033>:
   20c18:	6c5f766c 6c656261 7465675f 7865745f     lv_label_get_tex
   20c28:	65735f74 74735f6c 00747261              t_sel_start.

00020c34 <__func__.10038>:
   20c34:	6c5f766c 6c656261 7465675f 7865745f     lv_label_get_tex
   20c44:	65735f74 6e655f6c 00000064              t_sel_end...

00020c50 <__func__.10044>:
   20c50:	6c5f766c 6c656261 5f73695f 72616863     lv_label_is_char
   20c60:	646e755f 705f7265 0000736f              _under_pos..

00020c6c <__func__.10089>:
   20c6c:	6c5f766c 6c656261 736e695f 7865745f     lv_label_ins_tex
   20c7c:	00000074                                t...

00020c80 <__func__.10102>:
   20c80:	6c5f766c 6c656261 7475635f 7865745f     lv_label_cut_tex
   20c90:	00000074 742f2e2e 64726968 74726170     t...../thirdpart
   20ca0:	766c2f79 732f6c67 6c2f6372 69775f76     y/lvgl/src/lv_wi
   20cb0:	74656764 766c2f73 62616c5f 632e6c65     dgets/lv_label.c
   20cc0:	00000000 6c696146 74206465 6c61206f     ....Failed to al
   20cd0:	61636f6c 6d206574 726f6d65 6f662079     locate memory fo
   20ce0:	6f642072 6d745f74 74705f70 00000072     r dot_tmp_ptr...
   20cf0:	74786554 00000000 6562616c 7263206c     Text....label cr
   20d00:	65746165 00000064 6c5f766c 6c656261     eated...lv_label
   20d10:	00000000                                ....

00020d14 <_init>:
   20d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d16:	bf00      	nop
   20d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   20d1a:	bc08      	pop	{r3}
   20d1c:	469e      	mov	lr, r3
   20d1e:	4770      	bx	lr

00020d20 <__init_array_start>:
   20d20:	00000289 	.word	0x00000289

00020d24 <_fini>:
   20d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d26:	bf00      	nop
   20d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   20d2a:	bc08      	pop	{r3}
   20d2c:	469e      	mov	lr, r3
   20d2e:	4770      	bx	lr

00020d30 <__fini_array_start>:
   20d30:	00000265 	.word	0x00000265
